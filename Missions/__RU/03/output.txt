// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 317 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 88
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// endCutscene = false ;
 257: LD_ADDR_EXP 31
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 265: LD_ADDR_EXP 30
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// kirovFactory = 0 ;
 272: LD_ADDR_EXP 21
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// kirovCompleteFactory = false ;
 280: LD_ADDR_EXP 22
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// enableOmicronAI = true ;
 288: LD_ADDR_EXP 29
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// PrepareRussians ;
 296: CALL 940 0 0
// PrepareAmericans ;
 300: CALL 5409 0 0
// Nef_PrepareNature ;
 304: CALL 30174 0 0
// MissionIntro ;
 308: CALL 21803 0 0
// end ; end_of_file
 312: LD_VAR 0 1
 316: RET
// export function InitMapConfig ; begin
 317: LD_INT 0
 319: PPUSH
// BaseMapConfig ;
 320: CALL 333 0 0
// MissionMapConfig ;
 324: CALL 435 0 0
// end ;
 328: LD_VAR 0 1
 332: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 336: LD_ADDR_EXP 32
 340: PUSH
 341: LD_INT 8
 343: PUSH
 344: LD_INT 12
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 363: LD_ADDR_EXP 33
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 386: LD_ADDR_EXP 34
 390: PUSH
 391: LD_INT 5
 393: NEG
 394: PPUSH
 395: LD_INT 5
 397: PPUSH
 398: CALL_OW 12
 402: PUSH
 403: EMPTY
 404: LIST
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 37
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 03_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 03_
 421: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 422: LD_ADDR_EXP 36
 426: PUSH
 427: LD_STRING 02_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 438: LD_ADDR_EXP 38
 442: PUSH
 443: LD_INT 7
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 6
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 463: LD_ADDR_EXP 40
 467: PUSH
 468: LD_INT 84000
 470: PUSH
 471: LD_INT 73500
 473: PUSH
 474: LD_INT 63000
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 488: LD_ADDR_EXP 41
 492: PUSH
 493: LD_INT 150
 495: PUSH
 496: LD_INT 100
 498: PUSH
 499: LD_INT 50
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 513: LD_ADDR_EXP 42
 517: PUSH
 518: LD_INT 100
 520: PUSH
 521: LD_INT 50
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 538: LD_ADDR_EXP 43
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 2
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 563: LD_ADDR_EXP 46
 567: PUSH
 568: LD_INT 8
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 47
 592: PUSH
 593: LD_INT 17850
 595: PUSH
 596: LD_INT 16800
 598: PUSH
 599: LD_INT 15750
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// end ;
 613: LD_VAR 0 1
 617: RET
// every 0 0$1 trigger debugMode do var i ;
 618: LD_EXP 37
 622: IFFALSE 937
 624: GO 626
 626: DISABLE
 627: LD_INT 0
 629: PPUSH
// begin enable ;
 630: ENABLE
// FogOff ( your_side ) ;
 631: LD_OWVAR 2
 635: PPUSH
 636: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 640: LD_ADDR_VAR 0 1
 644: PUSH
 645: LD_INT 22
 647: PUSH
 648: LD_OWVAR 2
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 21
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 711
// SetLives ( i , 1000 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: LD_INT 1000
 704: PPUSH
 705: CALL_OW 234
 709: GO 694
 711: POP
 712: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 713: LD_ADDR_VAR 0 1
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_OWVAR 2
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 21
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PPUSH
 744: CALL_OW 69
 748: PUSH
 749: FOR_IN
 750: IFFALSE 814
// begin SetSkill ( i , skill_combat , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 3
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 4
 804: PPUSH
 805: LD_INT 10
 807: PPUSH
 808: CALL_OW 237
// end ;
 812: GO 749
 814: POP
 815: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 816: LD_ADDR_VAR 0 1
 820: PUSH
 821: LD_INT 22
 823: PUSH
 824: LD_OWVAR 2
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 2
 835: PUSH
 836: LD_INT 30
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: PUSH
 870: FOR_IN
 871: IFFALSE 935
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 274
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 9999
 888: PPUSH
 889: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 893: LD_VAR 0 1
 897: PPUSH
 898: CALL_OW 274
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: LD_INT 9999
 908: PPUSH
 909: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: CALL_OW 274
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 9999
 928: PPUSH
 929: CALL_OW 277
// end ;
 933: GO 870
 935: POP
 936: POP
// end ; end_of_file
 937: PPOPN 1
 939: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 940: LD_INT 0
 942: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 943: LD_ADDR_EXP 80
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: LD_INT 0
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 966: LD_ADDR_EXP 74
 970: PUSH
 971: EMPTY
 972: ST_TO_ADDR
// PrepareKirovBase ;
 973: CALL 2029 0 0
// PrepareHeroes ;
 977: CALL 1010 0 0
// PrepareKirovPersonel ;
 981: CALL 2794 0 0
// PrepareBeriaBase ;
 985: CALL 1431 0 0
// PrepareSecondBaseTeam ;
 989: CALL 3937 0 0
// PrepareGrishko ;
 993: CALL 3122 0 0
// PrepareOtherBuildings ;
 997: CALL 3371 0 0
// PrepareVehicles ;
1001: CALL 3195 0 0
// end ;
1005: LD_VAR 0 1
1009: RET
// function PrepareHeroes ; begin
1010: LD_INT 0
1012: PPUSH
// uc_side = 3 ;
1013: LD_ADDR_OWVAR 20
1017: PUSH
1018: LD_INT 3
1020: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1021: LD_ADDR_EXP 48
1025: PUSH
1026: LD_STRING Burlak
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: CALL 6913 0 2
1036: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1037: LD_ADDR_EXP 49
1041: PUSH
1042: LD_STRING Gnyevko
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL 6913 0 2
1052: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1053: LD_ADDR_EXP 51
1057: PUSH
1058: LD_STRING Kovalyuk
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL 6913 0 2
1068: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1069: LD_ADDR_EXP 50
1073: PUSH
1074: LD_STRING Kirilenkova
1076: PPUSH
1077: LD_INT 1
1079: PPUSH
1080: CALL 6913 0 2
1084: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1085: LD_EXP 48
1089: PUSH
1090: LD_EXP 49
1094: PUSH
1095: LD_EXP 51
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PPUSH
1105: LD_INT 3
1107: PPUSH
1108: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1112: LD_EXP 50
1116: PPUSH
1117: LD_INT 4
1119: PPUSH
1120: CALL_OW 336
// uc_side = 6 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 6
1131: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1132: LD_EXP 1
1136: NOT
1137: PUSH
1138: LD_STRING 02_Belkov
1140: PPUSH
1141: CALL_OW 28
1145: AND
1146: IFFALSE 1247
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1148: LD_ADDR_EXP 52
1152: PUSH
1153: LD_STRING Belkov
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL 6913 0 2
1163: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1164: LD_STRING 02_Belkov2
1166: PPUSH
1167: CALL_OW 28
1171: IFFALSE 1210
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1173: LD_ADDR_EXP 53
1177: PUSH
1178: LD_STRING Belkov2
1180: PPUSH
1181: LD_INT 1
1183: PPUSH
1184: CALL 6913 0 2
1188: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1189: LD_EXP 53
1193: PPUSH
1194: LD_INT 159
1196: PPUSH
1197: LD_INT 107
1199: PPUSH
1200: LD_INT 5
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1210: LD_ADDR_EXP 62
1214: PUSH
1215: LD_EXP 52
1219: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1220: LD_EXP 52
1224: PPUSH
1225: LD_INT 165
1227: PPUSH
1228: LD_INT 110
1230: PPUSH
1231: LD_INT 0
1233: PPUSH
1234: CALL_OW 48
// ComHold ( Belkov ) ;
1238: LD_EXP 52
1242: PPUSH
1243: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1247: LD_EXP 1
1251: PUSH
1252: LD_STRING 02_Belkov2
1254: PPUSH
1255: CALL_OW 28
1259: AND
1260: IFFALSE 1315
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1262: LD_ADDR_EXP 53
1266: PUSH
1267: LD_STRING Belkov2
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: CALL 6913 0 2
1277: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1278: LD_ADDR_EXP 62
1282: PUSH
1283: LD_EXP 53
1287: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1288: LD_EXP 53
1292: PPUSH
1293: LD_INT 165
1295: PPUSH
1296: LD_INT 110
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 48
// ComHold ( Belkov2 ) ;
1306: LD_EXP 53
1310: PPUSH
1311: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1315: LD_EXP 52
1319: PUSH
1320: LD_EXP 53
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1336: LD_EXP 48
1340: PPUSH
1341: LD_INT 164
1343: PPUSH
1344: LD_INT 108
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 48
// ComHold ( Burlak ) ;
1354: LD_EXP 48
1358: PPUSH
1359: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1363: LD_EXP 49
1367: PPUSH
1368: LD_INT 159
1370: PPUSH
1371: LD_INT 107
1373: PPUSH
1374: LD_INT 5
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1384: LD_EXP 51
1388: PPUSH
1389: LD_INT 159
1391: PPUSH
1392: LD_INT 107
1394: PPUSH
1395: LD_INT 5
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1405: LD_EXP 50
1409: PPUSH
1410: LD_INT 159
1412: PPUSH
1413: LD_INT 107
1415: PPUSH
1416: LD_INT 5
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 50
// end ;
1426: LD_VAR 0 1
1430: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1431: LD_INT 0
1433: PPUSH
1434: PPUSH
1435: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1436: LD_ADDR_EXP 58
1440: PUSH
1441: LD_STRING 02_BeriaBase_2
1443: PPUSH
1444: EMPTY
1445: PPUSH
1446: CALL_OW 30
1450: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1451: LD_ADDR_EXP 57
1455: PUSH
1456: LD_STRING 02_other_beria
1458: PPUSH
1459: CALL_OW 31
1463: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1464: LD_ADDR_EXP 55
1468: PUSH
1469: LD_STRING 02_other_survivors
1471: PPUSH
1472: CALL_OW 31
1476: ST_TO_ADDR
// uc_side = 3 ;
1477: LD_ADDR_OWVAR 20
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// uc_nation = 3 ;
1485: LD_ADDR_OWVAR 21
1489: PUSH
1490: LD_INT 3
1492: ST_TO_ADDR
// for i := 1 to beriaBase do
1493: LD_ADDR_VAR 0 2
1497: PUSH
1498: DOUBLE
1499: LD_INT 1
1501: DEC
1502: ST_TO_ADDR
1503: LD_EXP 58
1507: PUSH
1508: FOR_TO
1509: IFFALSE 1762
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1511: LD_ADDR_OWVAR 42
1515: PUSH
1516: LD_EXP 58
1520: PUSH
1521: LD_VAR 0 2
1525: ARRAY
1526: PUSH
1527: LD_INT 1
1529: ARRAY
1530: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1531: LD_ADDR_OWVAR 43
1535: PUSH
1536: LD_EXP 58
1540: PUSH
1541: LD_VAR 0 2
1545: ARRAY
1546: PUSH
1547: LD_INT 5
1549: ARRAY
1550: ST_TO_ADDR
// if bc_type = b_lab then
1551: LD_OWVAR 42
1555: PUSH
1556: LD_INT 6
1558: EQUAL
1559: IFFALSE 1577
// begin bc_kind1 = b_lab_basic ;
1561: LD_ADDR_OWVAR 44
1565: PUSH
1566: LD_INT 9
1568: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1569: LD_ADDR_OWVAR 45
1573: PUSH
1574: LD_INT 9
1576: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1577: LD_OWVAR 42
1581: PUSH
1582: LD_INT 7
1584: EQUAL
1585: PUSH
1586: LD_OWVAR 42
1590: PUSH
1591: LD_INT 8
1593: EQUAL
1594: OR
1595: IFFALSE 1711
// begin if beriaBase [ i ] [ 7 ] then
1597: LD_EXP 58
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 7
1610: ARRAY
1611: IFFALSE 1633
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1613: LD_ADDR_OWVAR 44
1617: PUSH
1618: LD_EXP 58
1622: PUSH
1623: LD_VAR 0 2
1627: ARRAY
1628: PUSH
1629: LD_INT 7
1631: ARRAY
1632: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1633: LD_EXP 58
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 8
1646: ARRAY
1647: IFFALSE 1669
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1649: LD_ADDR_OWVAR 45
1653: PUSH
1654: LD_EXP 58
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 8
1667: ARRAY
1668: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1669: LD_EXP 58
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PUSH
1680: LD_INT 7
1682: ARRAY
1683: NOT
1684: PUSH
1685: LD_EXP 58
1689: PUSH
1690: LD_VAR 0 2
1694: ARRAY
1695: PUSH
1696: LD_INT 8
1698: ARRAY
1699: NOT
1700: AND
1701: IFFALSE 1711
// bc_type := b_lab ;
1703: LD_ADDR_OWVAR 42
1707: PUSH
1708: LD_INT 6
1710: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1711: LD_EXP 58
1715: PUSH
1716: LD_VAR 0 2
1720: ARRAY
1721: PUSH
1722: LD_INT 2
1724: ARRAY
1725: PPUSH
1726: LD_EXP 58
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 3
1739: ARRAY
1740: PPUSH
1741: LD_EXP 58
1745: PUSH
1746: LD_VAR 0 2
1750: ARRAY
1751: PUSH
1752: LD_INT 4
1754: ARRAY
1755: PPUSH
1756: CALL_OW 47
// end ;
1760: GO 1508
1762: POP
1763: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1764: LD_ADDR_EXP 59
1768: PUSH
1769: LD_INT 22
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 30
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_INT 1
1800: ARRAY
1801: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1802: LD_EXP 59
1806: PPUSH
1807: LD_STRING beria
1809: PPUSH
1810: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1814: LD_EXP 59
1818: PPUSH
1819: CALL_OW 274
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_EXP 2
1831: PPUSH
1832: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1836: LD_EXP 59
1840: PPUSH
1841: CALL_OW 274
1845: PPUSH
1846: LD_INT 2
1848: PPUSH
1849: LD_EXP 3
1853: PPUSH
1854: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1858: LD_EXP 59
1862: PPUSH
1863: CALL_OW 274
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: LD_EXP 59
1875: PPUSH
1876: CALL_OW 274
1880: PPUSH
1881: LD_INT 2
1883: PPUSH
1884: CALL_OW 275
1888: PUSH
1889: LD_EXP 41
1893: PLUS
1894: PPUSH
1895: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1899: LD_EXP 59
1903: PPUSH
1904: CALL_OW 274
1908: PPUSH
1909: LD_INT 2
1911: PPUSH
1912: LD_EXP 59
1916: PPUSH
1917: CALL_OW 274
1921: PPUSH
1922: LD_INT 2
1924: PPUSH
1925: CALL_OW 275
1929: PUSH
1930: LD_EXP 42
1934: PLUS
1935: PPUSH
1936: CALL_OW 277
// uc_side = 6 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 6
1947: ST_TO_ADDR
// for i in otherBeriaUnits do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_EXP 57
1957: PUSH
1958: FOR_IN
1959: IFFALSE 1984
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1961: LD_VAR 0 2
1965: PPUSH
1966: LD_INT 159
1968: PPUSH
1969: LD_INT 107
1971: PPUSH
1972: LD_INT 10
1974: PPUSH
1975: LD_INT 0
1977: PPUSH
1978: CALL_OW 50
1982: GO 1958
1984: POP
1985: POP
// for i in other_survivors do
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_EXP 55
1995: PUSH
1996: FOR_IN
1997: IFFALSE 2022
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1999: LD_VAR 0 2
2003: PPUSH
2004: LD_INT 159
2006: PPUSH
2007: LD_INT 107
2009: PPUSH
2010: LD_INT 10
2012: PPUSH
2013: LD_INT 0
2015: PPUSH
2016: CALL_OW 50
2020: GO 1996
2022: POP
2023: POP
// end ;
2024: LD_VAR 0 1
2028: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2029: LD_INT 0
2031: PPUSH
2032: PPUSH
2033: PPUSH
2034: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2035: LD_ADDR_EXP 65
2039: PUSH
2040: LD_STRING 02_KirovBase_3
2042: PPUSH
2043: EMPTY
2044: PPUSH
2045: CALL_OW 30
2049: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2050: LD_ADDR_EXP 64
2054: PUSH
2055: LD_STRING 02_other_kirov
2057: PPUSH
2058: CALL_OW 31
2062: ST_TO_ADDR
// uc_side = 6 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// uc_nation = 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2079: LD_ADDR_EXP 60
2083: PUSH
2084: LD_STRING Kurin
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL 6913 0 2
2094: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2095: LD_EXP 60
2099: PPUSH
2100: LD_INT 166
2102: PPUSH
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 0
2108: PPUSH
2109: CALL_OW 48
// ComHold ( Kurin ) ;
2113: LD_EXP 60
2117: PPUSH
2118: CALL_OW 140
// for i := 1 to kirovBase do
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: DOUBLE
2128: LD_INT 1
2130: DEC
2131: ST_TO_ADDR
2132: LD_EXP 65
2136: PUSH
2137: FOR_TO
2138: IFFALSE 2576
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2140: LD_ADDR_OWVAR 42
2144: PUSH
2145: LD_EXP 65
2149: PUSH
2150: LD_VAR 0 2
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2160: LD_ADDR_OWVAR 43
2164: PUSH
2165: LD_EXP 65
2169: PUSH
2170: LD_VAR 0 2
2174: ARRAY
2175: PUSH
2176: LD_INT 5
2178: ARRAY
2179: ST_TO_ADDR
// if bc_type = b_depot then
2180: LD_OWVAR 42
2184: PUSH
2185: LD_INT 0
2187: EQUAL
2188: IFFALSE 2198
// bc_type = b_warehouse ;
2190: LD_ADDR_OWVAR 42
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// if bc_type = b_armoury then
2198: LD_OWVAR 42
2202: PUSH
2203: LD_INT 4
2205: EQUAL
2206: IFFALSE 2216
// bc_type = b_barracks ;
2208: LD_ADDR_OWVAR 42
2212: PUSH
2213: LD_INT 5
2215: ST_TO_ADDR
// if bc_type = b_lab then
2216: LD_OWVAR 42
2220: PUSH
2221: LD_INT 6
2223: EQUAL
2224: IFFALSE 2242
// begin bc_kind1 = b_lab_weapon ;
2226: LD_ADDR_OWVAR 44
2230: PUSH
2231: LD_INT 10
2233: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2234: LD_ADDR_OWVAR 45
2238: PUSH
2239: LD_INT 9
2241: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2242: LD_OWVAR 42
2246: PUSH
2247: LD_INT 2
2249: EQUAL
2250: IFFALSE 2260
// bc_type = b_factory ;
2252: LD_ADDR_OWVAR 42
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2260: LD_OWVAR 42
2264: PUSH
2265: LD_INT 7
2267: EQUAL
2268: PUSH
2269: LD_OWVAR 42
2273: PUSH
2274: LD_INT 8
2276: EQUAL
2277: OR
2278: IFFALSE 2394
// begin if kirovBase [ i ] [ 7 ] then
2280: LD_EXP 65
2284: PUSH
2285: LD_VAR 0 2
2289: ARRAY
2290: PUSH
2291: LD_INT 7
2293: ARRAY
2294: IFFALSE 2316
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2296: LD_ADDR_OWVAR 44
2300: PUSH
2301: LD_EXP 65
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PUSH
2312: LD_INT 7
2314: ARRAY
2315: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2316: LD_EXP 65
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PUSH
2327: LD_INT 8
2329: ARRAY
2330: IFFALSE 2352
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2332: LD_ADDR_OWVAR 45
2336: PUSH
2337: LD_EXP 65
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: PUSH
2348: LD_INT 8
2350: ARRAY
2351: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2352: LD_EXP 65
2356: PUSH
2357: LD_VAR 0 2
2361: ARRAY
2362: PUSH
2363: LD_INT 7
2365: ARRAY
2366: NOT
2367: PUSH
2368: LD_EXP 65
2372: PUSH
2373: LD_VAR 0 2
2377: ARRAY
2378: PUSH
2379: LD_INT 8
2381: ARRAY
2382: NOT
2383: AND
2384: IFFALSE 2394
// bc_type := b_lab ;
2386: LD_ADDR_OWVAR 42
2390: PUSH
2391: LD_INT 6
2393: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2394: LD_OWVAR 42
2398: PUSH
2399: LD_INT 31
2401: EQUAL
2402: IFFALSE 2426
// begin bc_type = b_bunker ;
2404: LD_ADDR_OWVAR 42
2408: PUSH
2409: LD_INT 32
2411: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2412: LD_ADDR_EXP 76
2416: PUSH
2417: LD_EXP 76
2421: PUSH
2422: LD_INT 1
2424: PLUS
2425: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_EXP 65
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 2
2444: ARRAY
2445: PPUSH
2446: LD_EXP 65
2450: PUSH
2451: LD_VAR 0 2
2455: ARRAY
2456: PUSH
2457: LD_INT 3
2459: ARRAY
2460: PPUSH
2461: LD_EXP 65
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_INT 4
2474: ARRAY
2475: PPUSH
2476: CALL_OW 47
2480: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 4
2488: LESS
2489: PUSH
2490: LD_OWVAR 42
2494: PUSH
2495: LD_INT 32
2497: EQUAL
2498: AND
2499: IFFALSE 2548
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2501: LD_VAR 0 4
2505: PPUSH
2506: LD_INT 42
2508: PUSH
2509: LD_INT 43
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 1
2518: PPUSH
2519: LD_INT 2
2521: PPUSH
2522: CALL_OW 12
2526: ARRAY
2527: PPUSH
2528: CALL_OW 431
// tmp = tmp + 1 ;
2532: LD_ADDR_VAR 0 3
2536: PUSH
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: PLUS
2545: ST_TO_ADDR
// end else
2546: GO 2574
// if bc_type = b_bunker then
2548: LD_OWVAR 42
2552: PUSH
2553: LD_INT 32
2555: EQUAL
2556: IFFALSE 2574
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2558: LD_ADDR_EXP 71
2562: PUSH
2563: LD_EXP 71
2567: PUSH
2568: LD_VAR 0 4
2572: ADD
2573: ST_TO_ADDR
// end ;
2574: GO 2137
2576: POP
2577: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2578: LD_ADDR_EXP 66
2582: PUSH
2583: LD_INT 22
2585: PUSH
2586: LD_INT 6
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 30
2595: PUSH
2596: LD_INT 1
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL_OW 69
2611: PUSH
2612: LD_INT 1
2614: ARRAY
2615: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2616: LD_EXP 66
2620: PPUSH
2621: LD_STRING kirov
2623: PPUSH
2624: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2628: LD_EXP 66
2632: PPUSH
2633: CALL_OW 274
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 5000
2643: PPUSH
2644: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2648: LD_EXP 66
2652: PPUSH
2653: CALL_OW 274
2657: PPUSH
2658: LD_INT 2
2660: PPUSH
2661: LD_INT 2000
2663: PPUSH
2664: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2668: LD_ADDR_EXP 68
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 6
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 21
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 30
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PPUSH
2713: LD_INT 145
2715: PPUSH
2716: LD_INT 102
2718: PPUSH
2719: CALL_OW 73
2723: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2724: LD_ADDR_EXP 69
2728: PUSH
2729: LD_INT 22
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 21
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 30
2751: PUSH
2752: LD_INT 5
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: PPUSH
2764: CALL_OW 69
2768: PUSH
2769: LD_EXP 68
2773: DIFF
2774: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2775: LD_ADDR_EXP 69
2779: PUSH
2780: LD_EXP 69
2784: PUSH
2785: LD_INT 1
2787: ARRAY
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 1
2793: RET
// export function PrepareKirovPersonel ; var i ; begin
2794: LD_INT 0
2796: PPUSH
2797: PPUSH
// PrepareEngineer ( false , 7 ) ;
2798: LD_INT 0
2800: PPUSH
2801: LD_INT 7
2803: PPUSH
2804: CALL_OW 382
// kirovEng = CreateHuman ;
2808: LD_ADDR_EXP 70
2812: PUSH
2813: CALL_OW 44
2817: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2818: LD_EXP 70
2822: PPUSH
2823: LD_INT 159
2825: PPUSH
2826: LD_INT 107
2828: PPUSH
2829: LD_INT 10
2831: PPUSH
2832: LD_INT 0
2834: PPUSH
2835: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2839: LD_ADDR_EXP 61
2843: PUSH
2844: LD_STRING Popov
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL 6913 0 2
2854: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2855: LD_EXP 61
2859: PPUSH
2860: LD_INT 4
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2870: LD_EXP 61
2874: PPUSH
2875: LD_INT 98
2877: PPUSH
2878: LD_INT 36
2880: PPUSH
2881: CALL_OW 118
// hc_name :=  ;
2885: LD_ADDR_OWVAR 26
2889: PUSH
2890: LD_STRING 
2892: ST_TO_ADDR
// hc_gallery :=  ;
2893: LD_ADDR_OWVAR 33
2897: PUSH
2898: LD_STRING 
2900: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: CALL_OW 381
// ruScout = CreateHuman ;
2911: LD_ADDR_EXP 63
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2921: LD_EXP 63
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 0
2931: PPUSH
2932: CALL_OW 49
// ComCrawl ( ruScout ) ;
2936: LD_EXP 63
2940: PPUSH
2941: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2945: LD_EXP 63
2949: PPUSH
2950: LD_INT 98
2952: PPUSH
2953: LD_INT 36
2955: PPUSH
2956: CALL_OW 178
// uc_side = 6 ;
2960: LD_ADDR_OWVAR 20
2964: PUSH
2965: LD_INT 6
2967: ST_TO_ADDR
// for i in otherKirovUnits do
2968: LD_ADDR_VAR 0 2
2972: PUSH
2973: LD_EXP 64
2977: PUSH
2978: FOR_IN
2979: IFFALSE 3115
// begin SetSide ( i , 6 ) ;
2981: LD_VAR 0 2
2985: PPUSH
2986: LD_INT 6
2988: PPUSH
2989: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL_OW 257
3002: PUSH
3003: LD_INT 1
3005: EQUAL
3006: PUSH
3007: LD_EXP 76
3011: PUSH
3012: LD_INT 0
3014: GREATER
3015: AND
3016: IFFALSE 3092
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3018: LD_VAR 0 2
3022: PPUSH
3023: LD_INT 18
3025: PPUSH
3026: LD_INT 22
3028: PUSH
3029: LD_INT 6
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 21
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 30
3048: PUSH
3049: LD_INT 32
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 70
3065: PUSH
3066: LD_EXP 76
3070: ARRAY
3071: PPUSH
3072: CALL 8457 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3076: LD_ADDR_EXP 76
3080: PUSH
3081: LD_EXP 76
3085: PUSH
3086: LD_INT 1
3088: MINUS
3089: ST_TO_ADDR
// end else
3090: GO 3113
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_INT 159
3099: PPUSH
3100: LD_INT 107
3102: PPUSH
3103: LD_INT 10
3105: PPUSH
3106: LD_INT 0
3108: PPUSH
3109: CALL_OW 50
// end ; end ;
3113: GO 2978
3115: POP
3116: POP
// end ;
3117: LD_VAR 0 1
3121: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// uc_side = 6 ;
3128: LD_ADDR_OWVAR 20
3132: PUSH
3133: LD_INT 6
3135: ST_TO_ADDR
// uc_nation = 3 ;
3136: LD_ADDR_OWVAR 21
3140: PUSH
3141: LD_INT 3
3143: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3144: LD_ADDR_EXP 81
3148: PUSH
3149: LD_STRING Grishko
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL 6913 0 2
3159: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3160: LD_EXP 81
3164: PPUSH
3165: LD_INT 218
3167: PPUSH
3168: LD_INT 108
3170: PPUSH
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: CALL_OW 50
// ComHold ( Grishko ) ;
3181: LD_EXP 81
3185: PPUSH
3186: CALL_OW 140
// end ;
3190: LD_VAR 0 1
3194: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3195: LD_INT 0
3197: PPUSH
3198: PPUSH
3199: PPUSH
// uc_side = 3 ;
3200: LD_ADDR_OWVAR 20
3204: PUSH
3205: LD_INT 3
3207: ST_TO_ADDR
// uc_nation = 3 ;
3208: LD_ADDR_OWVAR 21
3212: PUSH
3213: LD_INT 3
3215: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_EXP 4
3230: PUSH
3231: FOR_TO
3232: IFFALSE 3364
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3234: LD_EXP 4
3238: PUSH
3239: LD_VAR 0 2
3243: ARRAY
3244: PUSH
3245: LD_INT 1
3247: ARRAY
3248: PPUSH
3249: LD_EXP 4
3253: PUSH
3254: LD_VAR 0 2
3258: ARRAY
3259: PUSH
3260: LD_INT 2
3262: ARRAY
3263: PPUSH
3264: LD_EXP 4
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PUSH
3275: LD_INT 3
3277: ARRAY
3278: PPUSH
3279: LD_EXP 4
3283: PUSH
3284: LD_VAR 0 2
3288: ARRAY
3289: PUSH
3290: LD_INT 4
3292: ARRAY
3293: PPUSH
3294: LD_EXP 4
3298: PUSH
3299: LD_VAR 0 2
3303: ARRAY
3304: PUSH
3305: LD_INT 5
3307: ARRAY
3308: PPUSH
3309: CALL 35817 0 5
// vehicle = CreateVehicle ;
3313: LD_ADDR_VAR 0 3
3317: PUSH
3318: CALL_OW 45
3322: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3323: LD_VAR 0 3
3327: PPUSH
3328: LD_INT 25
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: LD_EXP 4
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PUSH
3354: LD_INT 6
3356: ARRAY
3357: PPUSH
3358: CALL_OW 234
// end ;
3362: GO 3231
3364: POP
3365: POP
// end ;
3366: LD_VAR 0 1
3370: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3371: LD_INT 0
3373: PPUSH
3374: PPUSH
3375: PPUSH
3376: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_STRING 02_OtherBuildings_4
3384: PPUSH
3385: EMPTY
3386: PPUSH
3387: CALL_OW 30
3391: ST_TO_ADDR
// uc_side = 3 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 3
3399: ST_TO_ADDR
// for i := 1 to otherBuildings do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_VAR 0 3
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3677
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_VAR 0 3
3427: PUSH
3428: LD_VAR 0 2
3432: ARRAY
3433: PUSH
3434: LD_INT 6
3436: ARRAY
3437: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_VAR 0 3
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_INT 1
3456: ARRAY
3457: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3458: LD_ADDR_OWVAR 43
3462: PUSH
3463: LD_VAR 0 3
3467: PUSH
3468: LD_VAR 0 2
3472: ARRAY
3473: PUSH
3474: LD_INT 5
3476: ARRAY
3477: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3478: LD_ADDR_VAR 0 4
3482: PUSH
3483: LD_VAR 0 3
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PUSH
3494: LD_INT 2
3496: ARRAY
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_VAR 0 2
3507: ARRAY
3508: PUSH
3509: LD_INT 3
3511: ARRAY
3512: PPUSH
3513: LD_VAR 0 3
3517: PUSH
3518: LD_VAR 0 2
3522: ARRAY
3523: PUSH
3524: LD_INT 4
3526: ARRAY
3527: PPUSH
3528: CALL_OW 47
3532: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3533: LD_VAR 0 4
3537: PPUSH
3538: LD_VAR 0 3
3542: PUSH
3543: LD_VAR 0 2
3547: ARRAY
3548: PUSH
3549: LD_INT 7
3551: ARRAY
3552: PPUSH
3553: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL_OW 266
3566: PUSH
3567: LD_INT 0
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: IN
3577: IFFALSE 3675
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3579: LD_VAR 0 4
3583: PPUSH
3584: CALL_OW 274
3588: PPUSH
3589: LD_INT 1
3591: PPUSH
3592: LD_VAR 0 3
3596: PUSH
3597: LD_VAR 0 2
3601: ARRAY
3602: PUSH
3603: LD_INT 8
3605: ARRAY
3606: PPUSH
3607: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3611: LD_VAR 0 4
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_VAR 0 3
3628: PUSH
3629: LD_VAR 0 2
3633: ARRAY
3634: PUSH
3635: LD_INT 9
3637: ARRAY
3638: PPUSH
3639: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_VAR 0 3
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PUSH
3667: LD_INT 10
3669: ARRAY
3670: PPUSH
3671: CALL_OW 277
// end ; end ;
3675: GO 3415
3677: POP
3678: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: LD_STRING 02_AmericanBuildings_5
3686: PPUSH
3687: EMPTY
3688: PPUSH
3689: CALL_OW 30
3693: ST_TO_ADDR
// uc_side = 1 ;
3694: LD_ADDR_OWVAR 20
3698: PUSH
3699: LD_INT 1
3701: ST_TO_ADDR
// uc_nation = 1 ;
3702: LD_ADDR_OWVAR 21
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// for i := 1 to otherBuildings do
3710: LD_ADDR_VAR 0 2
3714: PUSH
3715: DOUBLE
3716: LD_INT 1
3718: DEC
3719: ST_TO_ADDR
3720: LD_VAR 0 3
3724: PUSH
3725: FOR_TO
3726: IFFALSE 3930
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3728: LD_ADDR_OWVAR 42
3732: PUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_VAR 0 2
3742: ARRAY
3743: PUSH
3744: LD_INT 1
3746: ARRAY
3747: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3748: LD_ADDR_OWVAR 43
3752: PUSH
3753: LD_VAR 0 3
3757: PUSH
3758: LD_VAR 0 2
3762: ARRAY
3763: PUSH
3764: LD_INT 5
3766: ARRAY
3767: ST_TO_ADDR
// if bc_type = b_breastwork then
3768: LD_OWVAR 42
3772: PUSH
3773: LD_INT 31
3775: EQUAL
3776: IFFALSE 3849
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_VAR 0 3
3787: PUSH
3788: LD_VAR 0 2
3792: ARRAY
3793: PUSH
3794: LD_INT 2
3796: ARRAY
3797: PPUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_VAR 0 2
3807: ARRAY
3808: PUSH
3809: LD_INT 3
3811: ARRAY
3812: PPUSH
3813: LD_VAR 0 3
3817: PUSH
3818: LD_VAR 0 2
3822: ARRAY
3823: PUSH
3824: LD_INT 4
3826: ARRAY
3827: PPUSH
3828: CALL_OW 47
3832: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_VAR 0 4
3842: PPUSH
3843: CALL 8547 0 2
// end else
3847: GO 3904
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 3
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: PUSH
3865: LD_INT 2
3867: ARRAY
3868: PPUSH
3869: LD_VAR 0 3
3873: PUSH
3874: LD_VAR 0 2
3878: ARRAY
3879: PUSH
3880: LD_INT 3
3882: ARRAY
3883: PPUSH
3884: LD_VAR 0 3
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: PUSH
3895: LD_INT 4
3897: ARRAY
3898: PPUSH
3899: CALL_OW 47
3903: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3904: LD_VAR 0 4
3908: PPUSH
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 2
3918: ARRAY
3919: PUSH
3920: LD_INT 7
3922: ARRAY
3923: PPUSH
3924: CALL_OW 234
// end ;
3928: GO 3725
3930: POP
3931: POP
// end ;
3932: LD_VAR 0 1
3936: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3937: LD_INT 0
3939: PPUSH
3940: PPUSH
// secondBaseTeam = [ ] ;
3941: LD_ADDR_EXP 77
3945: PUSH
3946: EMPTY
3947: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3948: LD_INT 226
3950: PPUSH
3951: LD_INT 109
3953: PPUSH
3954: LD_INT 6
3956: PPUSH
3957: CALL_OW 441
// uc_side = 6 ;
3961: LD_ADDR_OWVAR 20
3965: PUSH
3966: LD_INT 6
3968: ST_TO_ADDR
// uc_nation = 3 ;
3969: LD_ADDR_OWVAR 21
3973: PUSH
3974: LD_INT 3
3976: ST_TO_ADDR
// hc_name =  ;
3977: LD_ADDR_OWVAR 26
3981: PUSH
3982: LD_STRING 
3984: ST_TO_ADDR
// hc_gallery =  ;
3985: LD_ADDR_OWVAR 33
3989: PUSH
3990: LD_STRING 
3992: ST_TO_ADDR
// for i := 1 to 3 do
3993: LD_ADDR_VAR 0 2
3997: PUSH
3998: DOUBLE
3999: LD_INT 1
4001: DEC
4002: ST_TO_ADDR
4003: LD_INT 3
4005: PUSH
4006: FOR_TO
4007: IFFALSE 4060
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4009: LD_INT 0
4011: PPUSH
4012: LD_EXP 43
4016: PPUSH
4017: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4021: LD_ADDR_EXP 77
4025: PUSH
4026: LD_EXP 77
4030: PUSH
4031: CALL_OW 44
4035: ADD
4036: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4037: LD_EXP 77
4041: PUSH
4042: LD_VAR 0 2
4046: ARRAY
4047: PPUSH
4048: LD_INT 19
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 49
// end ;
4058: GO 4006
4060: POP
4061: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4062: LD_INT 0
4064: PPUSH
4065: LD_EXP 43
4069: PPUSH
4070: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4074: LD_ADDR_EXP 77
4078: PUSH
4079: LD_EXP 77
4083: PUSH
4084: CALL_OW 44
4088: ADD
4089: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4090: LD_EXP 77
4094: PUSH
4095: LD_INT 4
4097: ARRAY
4098: PPUSH
4099: LD_INT 19
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_EXP 43
4116: PPUSH
4117: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4121: LD_ADDR_EXP 77
4125: PUSH
4126: LD_EXP 77
4130: PUSH
4131: CALL_OW 44
4135: ADD
4136: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4137: LD_EXP 77
4141: PUSH
4142: LD_INT 5
4144: ARRAY
4145: PPUSH
4146: LD_INT 19
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4156: LD_EXP 77
4160: PPUSH
4161: LD_INT 214
4163: PPUSH
4164: LD_INT 105
4166: PPUSH
4167: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4171: LD_EXP 77
4175: PPUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: PPUSH
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 222
4196: PPUSH
4197: LD_INT 115
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4207: LD_EXP 77
4211: PPUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 72
4226: PPUSH
4227: LD_INT 224
4229: PPUSH
4230: LD_INT 107
4232: PPUSH
4233: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4237: LD_EXP 77
4241: PPUSH
4242: LD_INT 25
4244: PUSH
4245: LD_INT 2
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PPUSH
4257: LD_INT 228
4259: PPUSH
4260: LD_INT 110
4262: PPUSH
4263: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4267: LD_EXP 77
4271: PPUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 72
4286: PPUSH
4287: LD_INT 29
4289: PPUSH
4290: LD_INT 226
4292: PPUSH
4293: LD_INT 109
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4303: LD_EXP 77
4307: PPUSH
4308: LD_INT 25
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 72
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 216
4328: PPUSH
4329: LD_INT 114
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4339: LD_EXP 77
4343: PPUSH
4344: LD_INT 25
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: PPUSH
4359: LD_INT 31
4361: PPUSH
4362: LD_INT 215
4364: PPUSH
4365: LD_INT 103
4367: PPUSH
4368: LD_INT 3
4370: PPUSH
4371: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4375: LD_EXP 77
4379: PPUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 72
4394: PPUSH
4395: LD_INT 31
4397: PPUSH
4398: LD_INT 227
4400: PPUSH
4401: LD_INT 116
4403: PPUSH
4404: LD_INT 5
4406: PPUSH
4407: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4411: LD_EXP 77
4415: PPUSH
4416: LD_INT 25
4418: PUSH
4419: LD_INT 2
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 72
4430: PPUSH
4431: LD_INT 208
4433: PPUSH
4434: LD_INT 106
4436: PPUSH
4437: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4441: LD_EXP 77
4445: PPUSH
4446: LD_INT 25
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PPUSH
4456: CALL_OW 72
4460: PPUSH
4461: LD_INT 209
4463: PPUSH
4464: LD_INT 105
4466: PPUSH
4467: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4471: LD_EXP 77
4475: PUSH
4476: LD_INT 5
4478: ARRAY
4479: PPUSH
4480: LD_INT 209
4482: PPUSH
4483: LD_INT 105
4485: PPUSH
4486: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4490: LD_EXP 77
4494: PUSH
4495: LD_INT 5
4497: ARRAY
4498: PPUSH
4499: LD_INT 208
4501: PPUSH
4502: LD_INT 106
4504: PPUSH
4505: CALL_OW 178
// end ;
4509: LD_VAR 0 1
4513: RET
// export function SpawnKirovSupport ; var i , un ; begin
4514: LD_INT 0
4516: PPUSH
4517: PPUSH
4518: PPUSH
// uc_side = 6 ;
4519: LD_ADDR_OWVAR 20
4523: PUSH
4524: LD_INT 6
4526: ST_TO_ADDR
// uc_nation = 3 ;
4527: LD_ADDR_OWVAR 21
4531: PUSH
4532: LD_INT 3
4534: ST_TO_ADDR
// hc_name =  ;
4535: LD_ADDR_OWVAR 26
4539: PUSH
4540: LD_STRING 
4542: ST_TO_ADDR
// hc_gallery :=  ;
4543: LD_ADDR_OWVAR 33
4547: PUSH
4548: LD_STRING 
4550: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_EXP 79
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4655
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: LD_INT 4
4577: PPUSH
4578: CALL_OW 12
4582: PPUSH
4583: LD_INT 1
4585: PPUSH
4586: LD_INT 2
4588: PPUSH
4589: CALL_OW 12
4593: PPUSH
4594: CALL_OW 380
// un = CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4608: LD_ADDR_EXP 78
4612: PUSH
4613: LD_EXP 78
4617: PUSH
4618: LD_VAR 0 3
4622: ADD
4623: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4624: LD_VAR 0 3
4628: PPUSH
4629: LD_INT 19
4631: PPUSH
4632: LD_INT 0
4634: PPUSH
4635: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4639: LD_VAR 0 3
4643: PPUSH
4644: LD_EXP 66
4648: PPUSH
4649: CALL_OW 120
// end ;
4653: GO 4566
4655: POP
4656: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_EXP 80
4671: PUSH
4672: LD_INT 1
4674: ARRAY
4675: PUSH
4676: LD_INT 4
4678: PLUS
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4779
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: LD_INT 3
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: CALL_OW 380
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 19
4721: PPUSH
4722: LD_INT 0
4724: PPUSH
4725: CALL_OW 49
// if i > kirovBunkersToOccupy then
4729: LD_VAR 0 2
4733: PUSH
4734: LD_EXP 72
4738: GREATER
4739: IFFALSE 4757
// ComEnterUnit ( un , ru2_bar2 ) else
4741: LD_VAR 0 3
4745: PPUSH
4746: LD_EXP 69
4750: PPUSH
4751: CALL_OW 120
4755: GO 4777
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_EXP 72
4766: PUSH
4767: LD_VAR 0 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 120
// end ;
4777: GO 4680
4779: POP
4780: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_EXP 80
4795: PUSH
4796: LD_INT 3
4798: ARRAY
4799: PUSH
4800: FOR_TO
4801: IFFALSE 4904
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4803: LD_INT 0
4805: PPUSH
4806: LD_INT 3
4808: PPUSH
4809: LD_INT 1
4811: PPUSH
4812: LD_INT 3
4814: PPUSH
4815: CALL_OW 12
4819: PPUSH
4820: CALL_OW 380
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 19
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 6
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 3
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: PUSH
4894: LD_INT 1
4896: ARRAY
4897: PPUSH
4898: CALL_OW 120
// end ;
4902: GO 4800
4904: POP
4905: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_EXP 80
4920: PUSH
4921: LD_INT 4
4923: ARRAY
4924: PUSH
4925: LD_INT 2
4927: PLUS
4928: PUSH
4929: FOR_TO
4930: IFFALSE 5036
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4932: LD_INT 0
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: LD_INT 3
4943: PPUSH
4944: CALL_OW 12
4948: PPUSH
4949: CALL_OW 380
// un = CreateHuman ;
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: CALL_OW 44
4962: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4963: LD_VAR 0 3
4967: PPUSH
4968: LD_INT 19
4970: PPUSH
4971: LD_INT 0
4973: PPUSH
4974: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_INT 18
4985: PPUSH
4986: LD_INT 22
4988: PUSH
4989: LD_INT 6
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 21
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_INT 30
5008: PUSH
5009: LD_INT 6
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 70
5025: PUSH
5026: LD_INT 1
5028: ARRAY
5029: PPUSH
5030: CALL_OW 120
// end ;
5034: GO 4929
5036: POP
5037: POP
// end ;
5038: LD_VAR 0 1
5042: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5043: LD_INT 0
5045: PPUSH
5046: PPUSH
5047: PPUSH
// survivorsArabianAttack = [ ] ;
5048: LD_ADDR_EXP 78
5052: PUSH
5053: EMPTY
5054: ST_TO_ADDR
// limit = 9 ;
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: LD_INT 9
5062: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5063: LD_ADDR_EXP 78
5067: PUSH
5068: LD_EXP 78
5072: PUSH
5073: LD_EXP 61
5077: ADD
5078: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5079: LD_EXP 52
5083: PPUSH
5084: CALL_OW 302
5088: PUSH
5089: LD_EXP 52
5093: PPUSH
5094: CALL_OW 255
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: AND
5103: IFFALSE 5135
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5105: LD_ADDR_EXP 78
5109: PUSH
5110: LD_EXP 78
5114: PUSH
5115: LD_EXP 52
5119: ADD
5120: ST_TO_ADDR
// limit = limit - 1 ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: MINUS
5134: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5135: LD_EXP 53
5139: PPUSH
5140: CALL_OW 302
5144: PUSH
5145: LD_EXP 53
5149: PPUSH
5150: CALL_OW 255
5154: PUSH
5155: LD_INT 6
5157: EQUAL
5158: AND
5159: IFFALSE 5191
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5161: LD_ADDR_EXP 78
5165: PUSH
5166: LD_EXP 78
5170: PUSH
5171: LD_EXP 53
5175: ADD
5176: ST_TO_ADDR
// limit = limit - 1 ;
5177: LD_ADDR_VAR 0 2
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: MINUS
5190: ST_TO_ADDR
// end ; for unit in other_survivors do
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_EXP 55
5200: PUSH
5201: FOR_IN
5202: IFFALSE 5262
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5204: LD_VAR 0 3
5208: PPUSH
5209: CALL_OW 302
5213: PUSH
5214: LD_VAR 0 3
5218: PPUSH
5219: CALL_OW 255
5223: PUSH
5224: LD_INT 6
5226: EQUAL
5227: AND
5228: IFFALSE 5260
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5230: LD_ADDR_EXP 78
5234: PUSH
5235: LD_EXP 78
5239: PUSH
5240: LD_VAR 0 3
5244: ADD
5245: ST_TO_ADDR
// limit = limit - 1 ;
5246: LD_ADDR_VAR 0 2
5250: PUSH
5251: LD_VAR 0 2
5255: PUSH
5256: LD_INT 1
5258: MINUS
5259: ST_TO_ADDR
// end ; end ;
5260: GO 5201
5262: POP
5263: POP
// for unit in otherBeriaUnits do
5264: LD_ADDR_VAR 0 3
5268: PUSH
5269: LD_EXP 57
5273: PUSH
5274: FOR_IN
5275: IFFALSE 5335
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5277: LD_VAR 0 3
5281: PPUSH
5282: CALL_OW 302
5286: PUSH
5287: LD_VAR 0 3
5291: PPUSH
5292: CALL_OW 255
5296: PUSH
5297: LD_INT 6
5299: EQUAL
5300: AND
5301: IFFALSE 5333
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5303: LD_ADDR_EXP 78
5307: PUSH
5308: LD_EXP 78
5312: PUSH
5313: LD_VAR 0 3
5317: ADD
5318: ST_TO_ADDR
// limit = limit - 1 ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 2
5328: PUSH
5329: LD_INT 1
5331: MINUS
5332: ST_TO_ADDR
// end ; end ;
5333: GO 5274
5335: POP
5336: POP
// if limit > 0 then
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 0
5344: GREATER
5345: IFFALSE 5357
// survivorsToSpawn = limit ;
5347: LD_ADDR_EXP 79
5351: PUSH
5352: LD_VAR 0 2
5356: ST_TO_ADDR
// end ;
5357: LD_VAR 0 1
5361: RET
// export function PrepareScholtze ; begin
5362: LD_INT 0
5364: PPUSH
// uc_side = 8 ;
5365: LD_ADDR_OWVAR 20
5369: PUSH
5370: LD_INT 8
5372: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5373: LD_ADDR_EXP 54
5377: PUSH
5378: LD_STRING Scholtze
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL 6913 0 2
5388: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5389: LD_EXP 54
5393: PPUSH
5394: LD_INT 30
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 49
// end ; end_of_file
5404: LD_VAR 0 1
5408: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5409: LD_INT 0
5411: PPUSH
// amSupportTroops = [ ] ;
5412: LD_ADDR_EXP 83
5416: PUSH
5417: EMPTY
5418: ST_TO_ADDR
// PrepareOmicronBase ;
5419: CALL 5428 0 0
// end ;
5423: LD_VAR 0 1
5427: RET
// function PrepareOmicronBase ; var base ; begin
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5432: LD_ADDR_EXP 85
5436: PUSH
5437: LD_INT 64
5439: PPUSH
5440: LD_INT 13
5442: PPUSH
5443: LD_STRING omikron
5445: PPUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_OWVAR 67
5464: ARRAY
5465: PPUSH
5466: LD_INT 3000
5468: PUSH
5469: LD_INT 3000
5471: PUSH
5472: LD_INT 0
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: PPUSH
5480: LD_INT 7
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL 39226 0 6
5502: ST_TO_ADDR
// case Difficulty of 2 :
5503: LD_OWVAR 67
5507: PUSH
5508: LD_INT 2
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5532
5516: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5517: LD_INT 51
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 322
// end ; 3 :
5530: GO 5570
5532: LD_INT 3
5534: DOUBLE
5535: EQUAL
5536: IFTRUE 5540
5538: GO 5569
5540: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5541: LD_INT 49
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5554: LD_INT 51
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 1
5562: PPUSH
5563: CALL_OW 322
// end ; end ;
5567: GO 5570
5569: POP
// end ;
5570: LD_VAR 0 1
5574: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5575: LD_INT 0
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
// amIntroUnits = [ ] ;
5581: LD_ADDR_EXP 82
5585: PUSH
5586: EMPTY
5587: ST_TO_ADDR
// uc_side = 1 ;
5588: LD_ADDR_OWVAR 20
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// uc_nation = nation_american ;
5596: LD_ADDR_OWVAR 21
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5604: LD_ADDR_OWVAR 37
5608: PUSH
5609: LD_INT 3
5611: ST_TO_ADDR
// vc_control = control_manual ;
5612: LD_ADDR_OWVAR 38
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// vc_engine = engine_combustion ;
5620: LD_ADDR_OWVAR 39
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5628: LD_ADDR_OWVAR 40
5632: PUSH
5633: LD_INT 5
5635: ST_TO_ADDR
// veh = CreateVehicle ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: CALL_OW 45
5645: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5646: LD_VAR 0 3
5650: PPUSH
5651: LD_INT 4
5653: PPUSH
5654: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5658: LD_ADDR_EXP 82
5662: PUSH
5663: LD_EXP 82
5667: PUSH
5668: LD_VAR 0 3
5672: ADD
5673: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5674: LD_VAR 0 3
5678: PPUSH
5679: LD_INT 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL_OW 49
// for i := 1 to 5 do
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: DOUBLE
5695: LD_INT 1
5697: DEC
5698: ST_TO_ADDR
5699: LD_INT 5
5701: PUSH
5702: FOR_TO
5703: IFFALSE 5800
// begin hc_name :=  ;
5705: LD_ADDR_OWVAR 26
5709: PUSH
5710: LD_STRING 
5712: ST_TO_ADDR
// hc_gallery :=  ;
5713: LD_ADDR_OWVAR 33
5717: PUSH
5718: LD_STRING 
5720: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5721: LD_INT 0
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 381
// human = CreateHuman ;
5731: LD_ADDR_VAR 0 4
5735: PUSH
5736: CALL_OW 44
5740: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5741: LD_ADDR_EXP 82
5745: PUSH
5746: LD_EXP 82
5750: PUSH
5751: LD_VAR 0 4
5755: ADD
5756: ST_TO_ADDR
// if i < 5 then
5757: LD_VAR 0 2
5761: PUSH
5762: LD_INT 5
5764: LESS
5765: IFFALSE 5784
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_INT 5
5774: PPUSH
5775: LD_INT 0
5777: PPUSH
5778: CALL_OW 49
5782: GO 5798
// begin PlaceHumanInUnit ( human , veh ) ;
5784: LD_VAR 0 4
5788: PPUSH
5789: LD_VAR 0 3
5793: PPUSH
5794: CALL_OW 52
// end ; end ;
5798: GO 5702
5800: POP
5801: POP
// end ;
5802: LD_VAR 0 1
5806: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
// uc_side := 1 ;
5814: LD_ADDR_OWVAR 20
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// uc_nation := 1 ;
5822: LD_ADDR_OWVAR 21
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// hc_name :=  ;
5830: LD_ADDR_OWVAR 26
5834: PUSH
5835: LD_STRING 
5837: ST_TO_ADDR
// hc_gallery :=  ;
5838: LD_ADDR_OWVAR 33
5842: PUSH
5843: LD_STRING 
5845: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5846: LD_ADDR_VAR 0 6
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_VAR 0 1
5860: PUSH
5861: FOR_TO
5862: IFFALSE 5921
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_EXP 43
5871: PPUSH
5872: CALL_OW 381
// un = CreateHuman ;
5876: LD_ADDR_VAR 0 7
5880: PUSH
5881: CALL_OW 44
5885: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5886: LD_ADDR_EXP 83
5890: PUSH
5891: LD_EXP 83
5895: PUSH
5896: LD_VAR 0 7
5900: ADD
5901: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5902: LD_VAR 0 7
5906: PPUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 0
5914: PPUSH
5915: CALL_OW 49
// end ;
5919: GO 5861
5921: POP
5922: POP
// for i := 1 to scientistsAmount do
5923: LD_ADDR_VAR 0 6
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_VAR 0 2
5937: PUSH
5938: FOR_TO
5939: IFFALSE 5998
// begin PrepareScientist ( false , enemySkillLevel ) ;
5941: LD_INT 0
5943: PPUSH
5944: LD_EXP 43
5948: PPUSH
5949: CALL_OW 384
// un = CreateHuman ;
5953: LD_ADDR_VAR 0 7
5957: PUSH
5958: CALL_OW 44
5962: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5963: LD_ADDR_EXP 83
5967: PUSH
5968: LD_EXP 83
5972: PUSH
5973: LD_VAR 0 7
5977: ADD
5978: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5979: LD_VAR 0 7
5983: PPUSH
5984: LD_VAR 0 4
5988: PPUSH
5989: LD_INT 0
5991: PPUSH
5992: CALL_OW 49
// end ;
5996: GO 5938
5998: POP
5999: POP
// for i := 1 to vehiclesAmount do
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: DOUBLE
6006: LD_INT 1
6008: DEC
6009: ST_TO_ADDR
6010: LD_VAR 0 3
6014: PUSH
6015: FOR_TO
6016: IFFALSE 6182
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6018: LD_ADDR_OWVAR 40
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 4
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 12
6047: ARRAY
6048: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6049: LD_ADDR_OWVAR 37
6053: PUSH
6054: LD_INT 3
6056: ST_TO_ADDR
// vc_control = control_manual ;
6057: LD_ADDR_OWVAR 38
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// vc_engine = engine_combustion ;
6065: LD_ADDR_OWVAR 39
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// veh = CreateVehicle ;
6073: LD_ADDR_VAR 0 8
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6083: LD_ADDR_EXP 83
6087: PUSH
6088: LD_EXP 83
6092: PUSH
6093: LD_VAR 0 8
6097: ADD
6098: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6099: LD_VAR 0 8
6103: PPUSH
6104: LD_VAR 0 4
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6116: LD_INT 0
6118: PPUSH
6119: LD_EXP 43
6123: PPUSH
6124: CALL_OW 383
// un = CreateHuman ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: CALL_OW 44
6137: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6138: LD_ADDR_EXP 83
6142: PUSH
6143: LD_EXP 83
6147: PUSH
6148: LD_VAR 0 7
6152: ADD
6153: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6154: LD_VAR 0 7
6158: PPUSH
6159: LD_VAR 0 8
6163: PPUSH
6164: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6168: LD_VAR 0 8
6172: PPUSH
6173: LD_INT 100
6175: PPUSH
6176: CALL_OW 240
// end ;
6180: GO 6015
6182: POP
6183: POP
// case area of NorthAmericanSpawnArea :
6184: LD_VAR 0 4
6188: PUSH
6189: LD_INT 7
6191: DOUBLE
6192: EQUAL
6193: IFTRUE 6197
6195: GO 6208
6197: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6198: LD_ADDR_VAR 0 9
6202: PUSH
6203: LD_INT 10
6205: ST_TO_ADDR
6206: GO 6247
6208: LD_INT 9
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6227
6216: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6217: LD_ADDR_VAR 0 9
6221: PUSH
6222: LD_INT 11
6224: ST_TO_ADDR
6225: GO 6247
6227: LD_INT 8
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6246
6235: POP
// road = SouthRoadArea2 ; end ;
6236: LD_ADDR_VAR 0 9
6240: PUSH
6241: LD_INT 12
6243: ST_TO_ADDR
6244: GO 6247
6246: POP
// MoveToBase ( amSupportTroops , road ) ;
6247: LD_EXP 83
6251: PPUSH
6252: LD_VAR 0 9
6256: PPUSH
6257: CALL 18921 0 2
// end ;
6261: LD_VAR 0 5
6265: RET
// export function PrepareAmericanPatrol ; var un ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
// amPatrol = [ ] ;
6270: LD_ADDR_EXP 84
6274: PUSH
6275: EMPTY
6276: ST_TO_ADDR
// uc_side = 1 ;
6277: LD_ADDR_OWVAR 20
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// uc_nation = 1 ;
6285: LD_ADDR_OWVAR 21
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6293: LD_ADDR_VAR 0 2
6297: PUSH
6298: LD_STRING Campell
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL 6913 0 2
6308: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6309: LD_ADDR_EXP 84
6313: PUSH
6314: LD_EXP 84
6318: PUSH
6319: LD_VAR 0 2
6323: ADD
6324: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 14
6332: PPUSH
6333: LD_INT 0
6335: PPUSH
6336: CALL_OW 49
// SetClass ( un , 1 ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6352: LD_INT 1
6354: PPUSH
6355: LD_EXP 43
6359: PPUSH
6360: CALL_OW 381
// un = CreateHuman ;
6364: LD_ADDR_VAR 0 2
6368: PUSH
6369: CALL_OW 44
6373: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6374: LD_ADDR_EXP 84
6378: PUSH
6379: LD_EXP 84
6383: PUSH
6384: LD_VAR 0 2
6388: ADD
6389: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6390: LD_VAR 0 2
6394: PPUSH
6395: LD_INT 14
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6405: LD_EXP 84
6409: PPUSH
6410: LD_EXP 54
6414: PPUSH
6415: CALL_OW 115
// end ; end_of_file
6419: LD_VAR 0 1
6423: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
6428: PPUSH
6429: PPUSH
// northGroup = [ ] ;
6430: LD_ADDR_EXP 86
6434: PUSH
6435: EMPTY
6436: ST_TO_ADDR
// southGroup = [ ] ;
6437: LD_ADDR_EXP 87
6441: PUSH
6442: EMPTY
6443: ST_TO_ADDR
// uc_side = 2 ;
6444: LD_ADDR_OWVAR 20
6448: PUSH
6449: LD_INT 2
6451: ST_TO_ADDR
// uc_nation = 2 ;
6452: LD_ADDR_OWVAR 21
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// hc_name :=  ;
6460: LD_ADDR_OWVAR 26
6464: PUSH
6465: LD_STRING 
6467: ST_TO_ADDR
// hc_gallery :=  ;
6468: LD_ADDR_OWVAR 33
6472: PUSH
6473: LD_STRING 
6475: ST_TO_ADDR
// for i := 1 to 10 do
6476: LD_ADDR_VAR 0 2
6480: PUSH
6481: DOUBLE
6482: LD_INT 1
6484: DEC
6485: ST_TO_ADDR
6486: LD_INT 10
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6604
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6492: LD_INT 13
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 1
6500: PPUSH
6501: LD_INT 26
6503: PPUSH
6504: LD_INT 100
6506: PPUSH
6507: CALL 35817 0 5
// veh = CreateVehicle ;
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: CALL_OW 45
6520: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6521: LD_ADDR_EXP 87
6525: PUSH
6526: LD_EXP 87
6530: PUSH
6531: LD_VAR 0 4
6535: ADD
6536: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_INT 23
6544: PPUSH
6545: LD_INT 0
6547: PPUSH
6548: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6552: LD_INT 0
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 383
// un = CreateHuman ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: CALL_OW 44
6571: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6572: LD_ADDR_EXP 87
6576: PUSH
6577: LD_EXP 87
6581: PUSH
6582: LD_VAR 0 3
6586: ADD
6587: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6588: LD_VAR 0 3
6592: PPUSH
6593: LD_VAR 0 4
6597: PPUSH
6598: CALL_OW 52
// end ;
6602: GO 6489
6604: POP
6605: POP
// for i := 1 to 20 do
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_INT 20
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6675
// begin PrepareSoldier ( false , 8 ) ;
6622: LD_INT 0
6624: PPUSH
6625: LD_INT 8
6627: PPUSH
6628: CALL_OW 381
// un = CreateHuman ;
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: CALL_OW 44
6641: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6642: LD_ADDR_EXP 87
6646: PUSH
6647: LD_EXP 87
6651: PUSH
6652: LD_VAR 0 3
6656: ADD
6657: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6658: LD_VAR 0 3
6662: PPUSH
6663: LD_INT 23
6665: PPUSH
6666: LD_INT 0
6668: PPUSH
6669: CALL_OW 49
// end ;
6673: GO 6619
6675: POP
6676: POP
// for i := 1 to 20 do
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: DOUBLE
6683: LD_INT 1
6685: DEC
6686: ST_TO_ADDR
6687: LD_INT 20
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6749
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 8
6698: PPUSH
6699: LD_INT 8
6701: PPUSH
6702: CALL_OW 380
// un = CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6716: LD_ADDR_EXP 87
6720: PUSH
6721: LD_EXP 87
6725: PUSH
6726: LD_VAR 0 3
6730: ADD
6731: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_INT 23
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 49
// end ;
6747: GO 6690
6749: POP
6750: POP
// for i := 1 to 10 do
6751: LD_ADDR_VAR 0 2
6755: PUSH
6756: DOUBLE
6757: LD_INT 1
6759: DEC
6760: ST_TO_ADDR
6761: LD_INT 10
6763: PUSH
6764: FOR_TO
6765: IFFALSE 6906
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6767: LD_INT 13
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 25
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 26
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_INT 4
6799: PPUSH
6800: CALL_OW 12
6804: ARRAY
6805: PPUSH
6806: LD_INT 100
6808: PPUSH
6809: CALL 35817 0 5
// veh = CreateVehicle ;
6813: LD_ADDR_VAR 0 4
6817: PUSH
6818: CALL_OW 45
6822: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6823: LD_ADDR_EXP 86
6827: PUSH
6828: LD_EXP 86
6832: PUSH
6833: LD_VAR 0 4
6837: ADD
6838: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6839: LD_VAR 0 4
6843: PPUSH
6844: LD_INT 22
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6854: LD_INT 0
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 383
// un = CreateHuman ;
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6874: LD_ADDR_EXP 86
6878: PUSH
6879: LD_EXP 86
6883: PUSH
6884: LD_VAR 0 3
6888: ADD
6889: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_VAR 0 4
6899: PPUSH
6900: CALL_OW 52
// end ;
6904: GO 6764
6906: POP
6907: POP
// end ; end_of_file
6908: LD_VAR 0 1
6912: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// if exist_mode then
6917: LD_VAR 0 2
6921: IFFALSE 6946
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6923: LD_ADDR_VAR 0 4
6927: PUSH
6928: LD_EXP 36
6932: PUSH
6933: LD_VAR 0 1
6937: STR
6938: PPUSH
6939: CALL_OW 34
6943: ST_TO_ADDR
6944: GO 6961
// unit := NewCharacter ( ident ) ;
6946: LD_ADDR_VAR 0 4
6950: PUSH
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 25
6960: ST_TO_ADDR
// result := unit ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_VAR 0 4
6970: ST_TO_ADDR
// end ;
6971: LD_VAR 0 3
6975: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
// units = characters ;
6982: LD_ADDR_VAR 0 9
6986: PUSH
6987: LD_VAR 0 1
6991: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6992: LD_ADDR_VAR 0 9
6996: PUSH
6997: LD_VAR 0 9
7001: PUSH
7002: LD_EXP 48
7006: PUSH
7007: LD_EXP 49
7011: PUSH
7012: LD_EXP 50
7016: PUSH
7017: LD_EXP 51
7021: PUSH
7022: LD_EXP 52
7026: PUSH
7027: LD_EXP 53
7031: PUSH
7032: LD_EXP 54
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: DIFF
7046: ST_TO_ADDR
// if not units and not canTalkHero then
7047: LD_VAR 0 9
7051: NOT
7052: PUSH
7053: LD_VAR 0 5
7057: NOT
7058: AND
7059: IFFALSE 7063
// exit ;
7061: GO 7236
// if not units then
7063: LD_VAR 0 9
7067: NOT
7068: IFFALSE 7089
// units = characters diff [ Burlak ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_VAR 0 1
7079: PUSH
7080: LD_EXP 48
7084: PUSH
7085: EMPTY
7086: LIST
7087: DIFF
7088: ST_TO_ADDR
// if not units and canTalkHero then
7089: LD_VAR 0 9
7093: NOT
7094: PUSH
7095: LD_VAR 0 5
7099: AND
7100: IFFALSE 7104
// exit ;
7102: GO 7236
// speaker := units [ rand ( 1 , units ) ] ;
7104: LD_ADDR_VAR 0 8
7108: PUSH
7109: LD_VAR 0 9
7113: PUSH
7114: LD_INT 1
7116: PPUSH
7117: LD_VAR 0 9
7121: PPUSH
7122: CALL_OW 12
7126: ARRAY
7127: ST_TO_ADDR
// if radio then
7128: LD_VAR 0 4
7132: IFFALSE 7181
// begin if GetSex ( speaker ) = sex_male then
7134: LD_VAR 0 8
7138: PPUSH
7139: CALL_OW 258
7143: PUSH
7144: LD_INT 1
7146: EQUAL
7147: IFFALSE 7165
// SayRadio ( speaker , dialogMID ) else
7149: LD_VAR 0 8
7153: PPUSH
7154: LD_VAR 0 2
7158: PPUSH
7159: CALL_OW 94
7163: GO 7179
// SayRadio ( speaker , dialogFID ) ;
7165: LD_VAR 0 8
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: CALL_OW 94
// end else
7179: GO 7226
// begin if GetSex ( speaker ) = sex_male then
7181: LD_VAR 0 8
7185: PPUSH
7186: CALL_OW 258
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7212
// Say ( speaker , dialogMID ) else
7196: LD_VAR 0 8
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 88
7210: GO 7226
// Say ( speaker , dialogFID ) ;
7212: LD_VAR 0 8
7216: PPUSH
7217: LD_VAR 0 3
7221: PPUSH
7222: CALL_OW 88
// end ; result := speaker ;
7226: LD_ADDR_VAR 0 6
7230: PUSH
7231: LD_VAR 0 8
7235: ST_TO_ADDR
// end ;
7236: LD_VAR 0 6
7240: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7241: LD_INT 0
7243: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7244: LD_VAR 0 1
7248: PPUSH
7249: CALL_OW 255
7253: PUSH
7254: LD_VAR 0 3
7258: EQUAL
7259: PUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7292
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7272: LD_VAR 0 1
7276: PPUSH
7277: LD_EXP 35
7281: PUSH
7282: LD_VAR 0 2
7286: STR
7287: PPUSH
7288: CALL_OW 38
// end ;
7292: LD_VAR 0 4
7296: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
7301: PPUSH
// resultCharactersToSave = [ ] ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: EMPTY
7308: ST_TO_ADDR
// for unit in characters do
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_VAR 0 1
7318: PUSH
7319: FOR_IN
7320: IFFALSE 7368
// if GetSide ( unit ) = side and IsOK ( unit ) then
7322: LD_VAR 0 5
7326: PPUSH
7327: CALL_OW 255
7331: PUSH
7332: LD_VAR 0 3
7336: EQUAL
7337: PUSH
7338: LD_VAR 0 5
7342: PPUSH
7343: CALL_OW 302
7347: AND
7348: IFFALSE 7366
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_VAR 0 6
7359: PUSH
7360: LD_VAR 0 5
7364: ADD
7365: ST_TO_ADDR
7366: GO 7319
7368: POP
7369: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7370: LD_VAR 0 6
7374: PPUSH
7375: LD_EXP 35
7379: PUSH
7380: LD_VAR 0 2
7384: STR
7385: PPUSH
7386: CALL_OW 38
// end ;
7390: LD_VAR 0 4
7394: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
// charsToChoose = otherKirovUnits ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_EXP 64
7410: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7411: LD_ADDR_VAR 0 4
7415: PUSH
7416: LD_VAR 0 4
7420: PUSH
7421: LD_EXP 57
7425: ADD
7426: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7427: LD_ADDR_VAR 0 4
7431: PUSH
7432: LD_VAR 0 4
7436: PUSH
7437: LD_EXP 55
7441: ADD
7442: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7443: LD_ADDR_VAR 0 4
7447: PUSH
7448: LD_VAR 0 4
7452: PUSH
7453: LD_EXP 52
7457: ADD
7458: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 4
7468: PUSH
7469: LD_EXP 53
7473: ADD
7474: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7475: LD_ADDR_VAR 0 5
7479: PUSH
7480: LD_STRING text
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT -5
7495: PUSH
7496: LD_EXP 48
7500: PUSH
7501: LD_EXP 49
7505: PUSH
7506: LD_EXP 51
7510: PUSH
7511: LD_EXP 50
7515: PUSH
7516: LD_INT -6
7518: PUSH
7519: LD_INT -2
7521: PUSH
7522: LD_INT -3
7524: PUSH
7525: LD_INT -5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_VAR 0 4
7543: ADD
7544: PUSH
7545: LD_INT -6
7547: PUSH
7548: LD_INT -4
7550: PUSH
7551: LD_EXP 60
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: ADD
7561: PPUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 42
7598: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7599: LD_VAR 0 4
7603: PPUSH
7604: LD_INT 6
7606: PPUSH
7607: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_INT 3
7618: PPUSH
7619: CALL_OW 235
// SetSurvivorsArabianAttack ;
7623: CALL 5043 0 0
// MoveKurinUnitsToBuildings ;
7627: CALL 9165 0 0
// end ;
7631: LD_VAR 0 2
7635: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7640: LD_ADDR_VAR 0 5
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 22
7652: PUSH
7653: LD_VAR 0 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 21
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 30
7674: PUSH
7675: LD_VAR 0 3
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 70
7693: PUSH
7694: FOR_IN
7695: IFFALSE 7728
// begin if UnitsInside ( building ) < 6 then
7697: LD_VAR 0 5
7701: PPUSH
7702: CALL_OW 313
7706: PUSH
7707: LD_INT 6
7709: LESS
7710: IFFALSE 7726
// begin result = building ;
7712: LD_ADDR_VAR 0 4
7716: PUSH
7717: LD_VAR 0 5
7721: ST_TO_ADDR
// exit ;
7722: POP
7723: POP
7724: GO 7738
// end ; end ;
7726: GO 7694
7728: POP
7729: POP
// result = 0 ;
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: LD_INT 0
7737: ST_TO_ADDR
// end ;
7738: LD_VAR 0 4
7742: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7743: LD_INT 0
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7749: LD_ADDR_VAR 0 6
7753: PUSH
7754: LD_INT 34
7756: PUSH
7757: LD_INT 71
7759: PUSH
7760: LD_INT 70
7762: PUSH
7763: LD_INT 69
7765: PUSH
7766: LD_INT 39
7768: PUSH
7769: LD_INT 31
7771: PUSH
7772: LD_INT 14
7774: PUSH
7775: LD_INT 10
7777: PUSH
7778: LD_INT 40
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// resultWeapons = [ ] ;
7792: LD_ADDR_VAR 0 5
7796: PUSH
7797: EMPTY
7798: ST_TO_ADDR
// for i := 1 to weaponTechs do
7799: LD_ADDR_VAR 0 4
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_VAR 0 6
7813: PUSH
7814: FOR_TO
7815: IFFALSE 8002
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7817: LD_VAR 0 6
7821: PUSH
7822: LD_VAR 0 4
7826: ARRAY
7827: PPUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL_OW 482
7837: PUSH
7838: LD_VAR 0 6
7842: PUSH
7843: LD_VAR 0 4
7847: ARRAY
7848: PPUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 321
7858: PUSH
7859: LD_INT 2
7861: EQUAL
7862: AND
7863: IFFALSE 8000
// case nation of nation_american :
7865: LD_VAR 0 2
7869: PUSH
7870: LD_INT 1
7872: DOUBLE
7873: EQUAL
7874: IFTRUE 7878
7876: GO 7913
7878: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: LD_VAR 0 5
7888: PUSH
7889: LD_VAR 0 6
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PPUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL 8019 0 2
7909: ADD
7910: ST_TO_ADDR
7911: GO 8000
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7956
7921: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7922: LD_ADDR_VAR 0 5
7926: PUSH
7927: LD_VAR 0 5
7931: PUSH
7932: LD_VAR 0 6
7936: PUSH
7937: LD_VAR 0 4
7941: ARRAY
7942: PPUSH
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL 8019 0 2
7952: ADD
7953: ST_TO_ADDR
7954: GO 8000
7956: LD_INT 3
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7999
7964: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7965: LD_ADDR_VAR 0 5
7969: PUSH
7970: LD_VAR 0 5
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: LD_VAR 0 4
7984: ARRAY
7985: PPUSH
7986: LD_VAR 0 2
7990: PPUSH
7991: CALL 8019 0 2
7995: ADD
7996: ST_TO_ADDR
7997: GO 8000
7999: POP
// end ;
8000: GO 7814
8002: POP
8003: POP
// result = resultWeapons ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_VAR 0 5
8013: ST_TO_ADDR
// end ;
8014: LD_VAR 0 3
8018: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8019: LD_INT 0
8021: PPUSH
// case tech of tech_AdvMet :
8022: LD_VAR 0 1
8026: PUSH
8027: LD_INT 34
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8063
8035: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8036: LD_ADDR_VAR 0 3
8040: PUSH
8041: LD_INT 6
8043: PUSH
8044: LD_STRING 
8046: PUSH
8047: LD_INT 46
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_VAR 0 2
8059: ARRAY
8060: ST_TO_ADDR
8061: GO 8352
8063: LD_INT 71
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8099
8071: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_STRING 
8079: PUSH
8080: LD_STRING 
8082: PUSH
8083: LD_INT 47
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_VAR 0 2
8095: ARRAY
8096: ST_TO_ADDR
8097: GO 8352
8099: LD_INT 70
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8135
8107: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_STRING 
8115: PUSH
8116: LD_INT 26
8118: PUSH
8119: LD_STRING 
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_VAR 0 2
8131: ARRAY
8132: ST_TO_ADDR
8133: GO 8352
8135: LD_INT 69
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8171
8143: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 4
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 43
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_VAR 0 2
8167: ARRAY
8168: ST_TO_ADDR
8169: GO 8352
8171: LD_INT 39
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8207
8179: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8180: LD_ADDR_VAR 0 3
8184: PUSH
8185: LD_INT 5
8187: PUSH
8188: LD_INT 27
8190: PUSH
8191: LD_INT 44
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: ST_TO_ADDR
8205: GO 8352
8207: LD_INT 31
8209: DOUBLE
8210: EQUAL
8211: IFTRUE 8215
8213: GO 8243
8215: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_STRING 
8223: PUSH
8224: LD_STRING 
8226: PUSH
8227: LD_INT 49
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_VAR 0 2
8239: ARRAY
8240: ST_TO_ADDR
8241: GO 8352
8243: LD_INT 14
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8279
8251: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8252: LD_ADDR_VAR 0 3
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: LD_STRING 
8262: PUSH
8263: LD_STRING 
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: ST_TO_ADDR
8277: GO 8352
8279: LD_INT 10
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8315
8287: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 9
8295: PUSH
8296: LD_STRING 
8298: PUSH
8299: LD_STRING 
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: PUSH
8307: LD_VAR 0 2
8311: ARRAY
8312: ST_TO_ADDR
8313: GO 8352
8315: LD_INT 40
8317: DOUBLE
8318: EQUAL
8319: IFTRUE 8323
8321: GO 8351
8323: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8324: LD_ADDR_VAR 0 3
8328: PUSH
8329: LD_INT 7
8331: PUSH
8332: LD_INT 28
8334: PUSH
8335: LD_INT 45
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_VAR 0 2
8347: ARRAY
8348: ST_TO_ADDR
8349: GO 8352
8351: POP
// end ;
8352: LD_VAR 0 3
8356: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8357: LD_INT 0
8359: PPUSH
8360: PPUSH
// for veh in units do
8361: LD_ADDR_VAR 0 4
8365: PUSH
8366: LD_VAR 0 1
8370: PUSH
8371: FOR_IN
8372: IFFALSE 8450
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8374: LD_VAR 0 4
8378: PPUSH
8379: CALL_OW 247
8383: PUSH
8384: LD_INT 2
8386: EQUAL
8387: PUSH
8388: LD_VAR 0 4
8392: PPUSH
8393: CALL_OW 261
8397: PUSH
8398: LD_INT 100
8400: LESS
8401: AND
8402: IFFALSE 8448
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8404: LD_VAR 0 4
8408: PPUSH
8409: LD_STRING X
8411: PUSH
8412: LD_INT 0
8414: PUSH
8415: LD_INT 0
8417: PUSH
8418: LD_VAR 0 2
8422: PUSH
8423: LD_INT 0
8425: PUSH
8426: LD_INT 0
8428: PUSH
8429: LD_INT 0
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: PPUSH
8444: CALL_OW 446
// end ;
8448: GO 8371
8450: POP
8451: POP
// end ;
8452: LD_VAR 0 3
8456: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8457: LD_INT 0
8459: PPUSH
8460: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 2
8470: PPUSH
8471: CALL_OW 254
8475: PUSH
8476: LD_INT 3
8478: MINUS
8479: ST_TO_ADDR
// if dir < 0 then
8480: LD_VAR 0 4
8484: PUSH
8485: LD_INT 0
8487: LESS
8488: IFFALSE 8504
// dir := 6 + dir ;
8490: LD_ADDR_VAR 0 4
8494: PUSH
8495: LD_INT 6
8497: PUSH
8498: LD_VAR 0 4
8502: PLUS
8503: ST_TO_ADDR
// SetDir ( un , dir ) ;
8504: LD_VAR 0 1
8508: PPUSH
8509: LD_VAR 0 4
8513: PPUSH
8514: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PPUSH
8528: CALL_OW 52
// result = un ;
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_VAR 0 1
8541: ST_TO_ADDR
// end ;
8542: LD_VAR 0 3
8546: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
// uc_side := GetSide ( b ) ;
8552: LD_ADDR_OWVAR 20
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 255
8566: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8567: LD_ADDR_OWVAR 21
8571: PUSH
8572: LD_VAR 0 2
8576: PPUSH
8577: CALL_OW 248
8581: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8582: LD_INT 0
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 1
8592: PPUSH
8593: CALL_OW 380
// un = CreateHuman ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: CALL_OW 44
8606: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8607: LD_ADDR_VAR 0 5
8611: PUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 254
8621: PUSH
8622: LD_INT 3
8624: MINUS
8625: ST_TO_ADDR
// if dir < 0 then
8626: LD_VAR 0 5
8630: PUSH
8631: LD_INT 0
8633: LESS
8634: IFFALSE 8650
// dir := 6 + dir ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_INT 6
8643: PUSH
8644: LD_VAR 0 5
8648: PLUS
8649: ST_TO_ADDR
// SetDir ( un , dir ) ;
8650: LD_VAR 0 4
8654: PPUSH
8655: LD_VAR 0 5
8659: PPUSH
8660: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8664: LD_VAR 0 4
8668: PPUSH
8669: LD_VAR 0 2
8673: PPUSH
8674: CALL_OW 52
// result = un ;
8678: LD_ADDR_VAR 0 3
8682: PUSH
8683: LD_VAR 0 4
8687: ST_TO_ADDR
// end ;
8688: LD_VAR 0 3
8692: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8693: LD_INT 0
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
8699: PPUSH
// for building in buildings do
8700: LD_ADDR_VAR 0 5
8704: PUSH
8705: LD_VAR 0 2
8709: PUSH
8710: FOR_IN
8711: IFFALSE 8803
// begin x = GetX ( building ) ;
8713: LD_ADDR_VAR 0 6
8717: PUSH
8718: LD_VAR 0 5
8722: PPUSH
8723: CALL_OW 250
8727: ST_TO_ADDR
// y = GetY ( building ) ;
8728: LD_ADDR_VAR 0 7
8732: PUSH
8733: LD_VAR 0 5
8737: PPUSH
8738: CALL_OW 251
8742: ST_TO_ADDR
// dir = GetDir ( building ) ;
8743: LD_ADDR_VAR 0 8
8747: PUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 254
8757: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_VAR 0 5
8767: PPUSH
8768: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_VAR 0 6
8786: PPUSH
8787: LD_VAR 0 7
8791: PPUSH
8792: LD_VAR 0 8
8796: PPUSH
8797: CALL_OW 205
// end ;
8801: GO 8710
8803: POP
8804: POP
// end ;
8805: LD_VAR 0 4
8809: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
8816: PPUSH
8817: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8818: LD_ADDR_VAR 0 8
8822: PUSH
8823: LD_INT 48
8825: PUSH
8826: LD_INT 49
8828: PUSH
8829: LD_INT 50
8831: PUSH
8832: LD_INT 20
8834: PUSH
8835: LD_INT 1
8837: PUSH
8838: LD_INT 51
8840: PUSH
8841: LD_INT 52
8843: PUSH
8844: LD_INT 69
8846: PUSH
8847: LD_INT 39
8849: PUSH
8850: LD_INT 34
8852: PUSH
8853: LD_INT 40
8855: PUSH
8856: LD_INT 53
8858: PUSH
8859: LD_INT 71
8861: PUSH
8862: LD_INT 57
8864: PUSH
8865: LD_INT 58
8867: PUSH
8868: LD_INT 44
8870: PUSH
8871: LD_INT 32
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 33
8882: PUSH
8883: LD_INT 59
8885: PUSH
8886: LD_INT 54
8888: PUSH
8889: LD_INT 55
8891: PUSH
8892: LD_INT 56
8894: PUSH
8895: LD_INT 63
8897: PUSH
8898: LD_INT 64
8900: PUSH
8901: LD_INT 65
8903: PUSH
8904: LD_INT 30
8906: PUSH
8907: LD_INT 31
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 22
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8953: LD_ADDR_VAR 0 9
8957: PUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_INT 1
8966: PPUSH
8967: CALL 31056 0 3
8971: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_VAR 0 8
8986: PUSH
8987: FOR_TO
8988: IFFALSE 9064
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 5
8999: ARRAY
9000: PPUSH
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 321
9010: PUSH
9011: LD_INT 1
9013: EQUAL
9014: PUSH
9015: LD_VAR 0 8
9019: PUSH
9020: LD_VAR 0 5
9024: ARRAY
9025: PPUSH
9026: LD_VAR 0 3
9030: PPUSH
9031: CALL_OW 482
9035: PUSH
9036: LD_INT 1
9038: EQUAL
9039: AND
9040: IFFALSE 9062
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9042: LD_VAR 0 2
9046: PPUSH
9047: LD_VAR 0 8
9051: PUSH
9052: LD_VAR 0 5
9056: ARRAY
9057: PPUSH
9058: CALL_OW 184
9062: GO 8987
9064: POP
9065: POP
// for i = 1 to am_tech_list do
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_VAR 0 9
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9158
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9084: LD_VAR 0 9
9088: PUSH
9089: LD_VAR 0 5
9093: ARRAY
9094: PPUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: CALL_OW 321
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: PUSH
9109: LD_VAR 0 9
9113: PUSH
9114: LD_VAR 0 5
9118: ARRAY
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: CALL_OW 482
9129: PUSH
9130: LD_INT 1
9132: EQUAL
9133: AND
9134: IFFALSE 9156
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9136: LD_VAR 0 2
9140: PPUSH
9141: LD_VAR 0 9
9145: PUSH
9146: LD_VAR 0 5
9150: ARRAY
9151: PPUSH
9152: CALL_OW 184
9156: GO 9081
9158: POP
9159: POP
// end ;
9160: LD_VAR 0 4
9164: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9165: LD_INT 0
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
9175: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9176: LD_ADDR_VAR 0 3
9180: PUSH
9181: LD_INT 22
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 21
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 30
9203: PUSH
9204: LD_INT 6
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 69
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 22
9232: PUSH
9233: LD_INT 6
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 21
9242: PUSH
9243: LD_INT 3
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 30
9252: PUSH
9253: LD_INT 3
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: PPUSH
9265: CALL_OW 69
9269: PUSH
9270: LD_INT 1
9272: ARRAY
9273: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9274: LD_ADDR_VAR 0 9
9278: PUSH
9279: LD_VAR 0 9
9283: PUSH
9284: LD_EXP 60
9288: ADD
9289: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9290: LD_ADDR_VAR 0 9
9294: PUSH
9295: LD_VAR 0 9
9299: PUSH
9300: LD_EXP 78
9304: ADD
9305: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9306: LD_ADDR_VAR 0 9
9310: PUSH
9311: LD_VAR 0 9
9315: PUSH
9316: LD_EXP 70
9320: ADD
9321: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9322: LD_ADDR_VAR 0 8
9326: PUSH
9327: LD_INT 18
9329: PPUSH
9330: LD_INT 22
9332: PUSH
9333: LD_INT 6
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 21
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 70
9372: PUSH
9373: LD_VAR 0 9
9377: DIFF
9378: ST_TO_ADDR
// if not canTakeUnits then
9379: LD_VAR 0 8
9383: NOT
9384: IFFALSE 9417
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9386: LD_ADDR_EXP 80
9390: PUSH
9391: LD_EXP 80
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: LD_EXP 80
9403: PUSH
9404: LD_INT 3
9406: ARRAY
9407: PUSH
9408: LD_INT 2
9410: PLUS
9411: PPUSH
9412: CALL_OW 1
9416: ST_TO_ADDR
// if canTakeUnits > 2 then
9417: LD_VAR 0 8
9421: PUSH
9422: LD_INT 2
9424: GREATER
9425: IFFALSE 9495
// begin for i := 1 to rand ( 1 , 2 ) do
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: DOUBLE
9433: LD_INT 1
9435: DEC
9436: ST_TO_ADDR
9437: LD_INT 1
9439: PPUSH
9440: LD_INT 2
9442: PPUSH
9443: CALL_OW 12
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9491
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9451: LD_VAR 0 8
9455: PUSH
9456: LD_VAR 0 2
9460: ARRAY
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9471: LD_VAR 0 8
9475: PUSH
9476: LD_VAR 0 2
9480: ARRAY
9481: PPUSH
9482: LD_INT 4
9484: PPUSH
9485: CALL_OW 183
// end ;
9489: GO 9448
9491: POP
9492: POP
// end else
9493: GO 9563
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: DOUBLE
9501: LD_INT 1
9503: DEC
9504: ST_TO_ADDR
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 8
9512: PPUSH
9513: CALL_OW 12
9517: PUSH
9518: FOR_TO
9519: IFFALSE 9561
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9521: LD_VAR 0 8
9525: PUSH
9526: LD_VAR 0 2
9530: ARRAY
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9541: LD_VAR 0 8
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 183
// end ;
9559: GO 9518
9561: POP
9562: POP
// end ; wait ( 0 0$01 ) ;
9563: LD_INT 35
9565: PPUSH
9566: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9570: LD_ADDR_VAR 0 8
9574: PUSH
9575: LD_INT 18
9577: PPUSH
9578: LD_INT 22
9580: PUSH
9581: LD_INT 6
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 21
9590: PUSH
9591: LD_INT 1
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: LD_INT 60
9603: PUSH
9604: EMPTY
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL_OW 70
9620: PUSH
9621: LD_VAR 0 9
9625: DIFF
9626: ST_TO_ADDR
// pom = 6 ;
9627: LD_ADDR_VAR 0 7
9631: PUSH
9632: LD_INT 6
9634: ST_TO_ADDR
// if canTakeUnits then
9635: LD_VAR 0 8
9639: IFFALSE 9756
// for i = 1 to canTakeUnits do
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9754
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9659: LD_VAR 0 8
9663: PUSH
9664: LD_VAR 0 2
9668: ARRAY
9669: PPUSH
9670: CALL_OW 257
9674: PUSH
9675: LD_INT 3
9677: NONEQUAL
9678: IFFALSE 9718
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9680: LD_VAR 0 8
9684: PUSH
9685: LD_VAR 0 2
9689: ARRAY
9690: PPUSH
9691: LD_VAR 0 4
9695: PPUSH
9696: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9700: LD_VAR 0 8
9704: PUSH
9705: LD_VAR 0 2
9709: ARRAY
9710: PPUSH
9711: LD_INT 3
9713: PPUSH
9714: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9718: LD_VAR 0 8
9722: PUSH
9723: LD_VAR 0 2
9727: ARRAY
9728: PPUSH
9729: LD_VAR 0 4
9733: PPUSH
9734: CALL_OW 120
// pom = pom - 1 ;
9738: LD_ADDR_VAR 0 7
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: LD_INT 1
9750: MINUS
9751: ST_TO_ADDR
// end ;
9752: GO 9656
9754: POP
9755: POP
// if pom > 0 then
9756: LD_VAR 0 7
9760: PUSH
9761: LD_INT 0
9763: GREATER
9764: IFFALSE 9789
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9766: LD_ADDR_EXP 80
9770: PUSH
9771: LD_EXP 80
9775: PPUSH
9776: LD_INT 3
9778: PPUSH
9779: LD_VAR 0 7
9783: PPUSH
9784: CALL_OW 1
9788: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9796: LD_ADDR_VAR 0 5
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_INT 6
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 30
9823: PUSH
9824: LD_INT 32
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: LD_INT 59
9836: PUSH
9837: EMPTY
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: PUSH
9855: FOR_IN
9856: IFFALSE 10102
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9858: LD_ADDR_VAR 0 8
9862: PUSH
9863: LD_INT 18
9865: PPUSH
9866: LD_INT 22
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: LD_INT 60
9891: PUSH
9892: EMPTY
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 70
9908: PUSH
9909: LD_VAR 0 9
9913: DIFF
9914: ST_TO_ADDR
// if canTakeUnits then
9915: LD_VAR 0 8
9919: IFFALSE 10053
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9921: LD_VAR 0 8
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PPUSH
9930: CALL_OW 257
9934: PUSH
9935: LD_INT 1
9937: NONEQUAL
9938: IFFALSE 10033
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9940: LD_VAR 0 8
9944: PUSH
9945: LD_INT 1
9947: ARRAY
9948: PPUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 6
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 30
9971: PUSH
9972: LD_INT 5
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: PPUSH
9984: CALL_OW 69
9988: PUSH
9989: LD_INT 1
9991: ARRAY
9992: PPUSH
9993: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9997: LD_VAR 0 8
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10013: LD_VAR 0 8
10017: PUSH
10018: LD_INT 1
10020: ARRAY
10021: PPUSH
10022: CALL_OW 182
// wait ( 0 0$1 ) ;
10026: LD_INT 35
10028: PPUSH
10029: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10033: LD_VAR 0 8
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_VAR 0 5
10046: PPUSH
10047: CALL_OW 120
// end else
10051: GO 10100
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10053: LD_ADDR_EXP 72
10057: PUSH
10058: LD_EXP 72
10062: PUSH
10063: LD_VAR 0 5
10067: ADD
10068: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10069: LD_ADDR_EXP 80
10073: PUSH
10074: LD_EXP 80
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: LD_EXP 80
10086: PUSH
10087: LD_INT 1
10089: ARRAY
10090: PUSH
10091: LD_INT 1
10093: PLUS
10094: PPUSH
10095: CALL_OW 1
10099: ST_TO_ADDR
// end ; end ;
10100: GO 9855
10102: POP
10103: POP
// end ;
10104: LD_VAR 0 1
10108: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10109: LD_INT 0
10111: PPUSH
10112: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10113: LD_ADDR_VAR 0 4
10117: PUSH
10118: LD_INT 22
10120: PUSH
10121: LD_VAR 0 2
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 50
10132: PUSH
10133: EMPTY
10134: LIST
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 21
10141: PUSH
10142: LD_INT 1
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: PUSH
10149: LD_INT 21
10151: PUSH
10152: LD_INT 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: LIST
10168: PPUSH
10169: CALL_OW 69
10173: PPUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: CALL_OW 74
10183: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10184: LD_VAR 0 4
10188: PPUSH
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 296
10198: PUSH
10199: LD_INT 13
10201: LESS
10202: IFFALSE 10214
// begin result = true ;
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: LD_INT 1
10211: ST_TO_ADDR
// exit ;
10212: GO 10222
// end ; result = false ;
10214: LD_ADDR_VAR 0 3
10218: PUSH
10219: LD_INT 0
10221: ST_TO_ADDR
// end ;
10222: LD_VAR 0 3
10226: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
10240: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10241: LD_VAR 0 1
10245: PPUSH
10246: CALL_OW 302
10250: NOT
10251: PUSH
10252: LD_VAR 0 4
10256: PUSH
10257: LD_INT 1
10259: EQUAL
10260: OR
10261: PUSH
10262: LD_VAR 0 2
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: CALL_OW 488
10276: NOT
10277: OR
10278: PUSH
10279: LD_VAR 0 1
10283: PPUSH
10284: LD_VAR 0 2
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: CALL_OW 297
10298: PUSH
10299: LD_VAR 0 4
10303: GREATEREQUAL
10304: OR
10305: PUSH
10306: LD_VAR 0 5
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 0
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: IN
10321: NOT
10322: OR
10323: IFFALSE 10327
// exit ;
10325: GO 11884
// attempts = 0 ;
10327: LD_ADDR_VAR 0 17
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10335: LD_ADDR_VAR 0 7
10339: PUSH
10340: EMPTY
10341: ST_TO_ADDR
// list_coords = [ ] ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: EMPTY
10348: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10349: LD_ADDR_VAR 0 9
10353: PUSH
10354: LD_VAR 0 2
10358: PPUSH
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 250
10373: PPUSH
10374: LD_VAR 0 1
10378: PPUSH
10379: CALL_OW 251
10383: PPUSH
10384: CALL 11889 0 4
10388: ST_TO_ADDR
// if attempts = 0 then
10389: LD_VAR 0 17
10393: PUSH
10394: LD_INT 0
10396: EQUAL
10397: IFFALSE 10505
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10399: LD_ADDR_VAR 0 10
10403: PUSH
10404: LD_VAR 0 9
10408: PUSH
10409: LD_VAR 0 9
10413: PUSH
10414: LD_INT 1
10416: PLUS
10417: PUSH
10418: LD_VAR 0 9
10422: PUSH
10423: LD_INT 1
10425: MINUS
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10432: LD_VAR 0 10
10436: PUSH
10437: LD_INT 2
10439: ARRAY
10440: PUSH
10441: LD_INT 6
10443: EQUAL
10444: IFFALSE 10467
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10446: LD_ADDR_VAR 0 10
10450: PUSH
10451: LD_VAR 0 10
10455: PPUSH
10456: LD_INT 2
10458: PPUSH
10459: LD_INT 0
10461: PPUSH
10462: CALL_OW 1
10466: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10467: LD_VAR 0 10
10471: PUSH
10472: LD_INT 3
10474: ARRAY
10475: PUSH
10476: LD_INT 1
10478: NEG
10479: EQUAL
10480: IFFALSE 10503
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10482: LD_ADDR_VAR 0 10
10486: PUSH
10487: LD_VAR 0 10
10491: PPUSH
10492: LD_INT 3
10494: PPUSH
10495: LD_INT 5
10497: PPUSH
10498: CALL_OW 1
10502: ST_TO_ADDR
// end else
10503: GO 10542
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10505: LD_ADDR_VAR 0 10
10509: PUSH
10510: LD_INT 0
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: LD_INT 2
10518: PUSH
10519: LD_INT 3
10521: PUSH
10522: LD_INT 4
10524: PUSH
10525: LD_INT 5
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: LD_VAR 0 9
10540: DIFF
10541: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10542: LD_ADDR_VAR 0 14
10546: PUSH
10547: DOUBLE
10548: LD_INT 1
10550: DEC
10551: ST_TO_ADDR
10552: LD_VAR 0 10
10556: PUSH
10557: LD_INT 0
10559: PLUS
10560: PUSH
10561: FOR_TO
10562: IFFALSE 10884
// case dir_list [ c ] of 0 :
10564: LD_VAR 0 10
10568: PUSH
10569: LD_VAR 0 14
10573: ARRAY
10574: PUSH
10575: LD_INT 0
10577: DOUBLE
10578: EQUAL
10579: IFTRUE 10583
10581: GO 10624
10583: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10584: LD_ADDR_VAR 0 8
10588: PUSH
10589: LD_VAR 0 8
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: LD_VAR 0 2
10601: PUSH
10602: LD_VAR 0 3
10606: PUSH
10607: LD_VAR 0 4
10611: MINUS
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 2
10621: ST_TO_ADDR
10622: GO 10882
10624: LD_INT 1
10626: DOUBLE
10627: EQUAL
10628: IFTRUE 10632
10630: GO 10673
10632: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10633: LD_ADDR_VAR 0 8
10637: PUSH
10638: LD_VAR 0 8
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: LD_VAR 0 2
10650: PUSH
10651: LD_VAR 0 4
10655: PLUS
10656: PUSH
10657: LD_VAR 0 3
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 2
10670: ST_TO_ADDR
10671: GO 10882
10673: LD_INT 2
10675: DOUBLE
10676: EQUAL
10677: IFTRUE 10681
10679: GO 10728
10681: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10682: LD_ADDR_VAR 0 8
10686: PUSH
10687: LD_VAR 0 8
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: LD_VAR 0 2
10699: PUSH
10700: LD_VAR 0 4
10704: PLUS
10705: PUSH
10706: LD_VAR 0 3
10710: PUSH
10711: LD_VAR 0 4
10715: PLUS
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PPUSH
10721: CALL_OW 2
10725: ST_TO_ADDR
10726: GO 10882
10728: LD_INT 3
10730: DOUBLE
10731: EQUAL
10732: IFTRUE 10736
10734: GO 10777
10736: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10737: LD_ADDR_VAR 0 8
10741: PUSH
10742: LD_VAR 0 8
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: LD_VAR 0 2
10754: PUSH
10755: LD_VAR 0 3
10759: PUSH
10760: LD_VAR 0 4
10764: PLUS
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PPUSH
10770: CALL_OW 2
10774: ST_TO_ADDR
10775: GO 10882
10777: LD_INT 4
10779: DOUBLE
10780: EQUAL
10781: IFTRUE 10785
10783: GO 10826
10785: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10786: LD_ADDR_VAR 0 8
10790: PUSH
10791: LD_VAR 0 8
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: LD_VAR 0 2
10803: PUSH
10804: LD_VAR 0 4
10808: MINUS
10809: PUSH
10810: LD_VAR 0 3
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PPUSH
10819: CALL_OW 2
10823: ST_TO_ADDR
10824: GO 10882
10826: LD_INT 5
10828: DOUBLE
10829: EQUAL
10830: IFTRUE 10834
10832: GO 10881
10834: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10835: LD_ADDR_VAR 0 8
10839: PUSH
10840: LD_VAR 0 8
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: LD_VAR 0 2
10852: PUSH
10853: LD_VAR 0 4
10857: MINUS
10858: PUSH
10859: LD_VAR 0 3
10863: PUSH
10864: LD_VAR 0 4
10868: MINUS
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: PPUSH
10874: CALL_OW 2
10878: ST_TO_ADDR
10879: GO 10882
10881: POP
10882: GO 10561
10884: POP
10885: POP
// if dist < 30 then
10886: LD_VAR 0 4
10890: PUSH
10891: LD_INT 30
10893: LESS
10894: IFFALSE 10906
// c = 1 else
10896: LD_ADDR_VAR 0 14
10900: PUSH
10901: LD_INT 1
10903: ST_TO_ADDR
10904: GO 10914
// c = 2 ;
10906: LD_ADDR_VAR 0 14
10910: PUSH
10911: LD_INT 2
10913: ST_TO_ADDR
// b = 1 ;
10914: LD_ADDR_VAR 0 11
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10922: LD_VAR 0 11
10926: PUSH
10927: LD_VAR 0 4
10931: PUSH
10932: LD_INT 1
10934: MINUS
10935: LESSEQUAL
10936: IFFALSE 11364
// begin if 0 in dir_list and 1 in dir_list then
10938: LD_INT 0
10940: PUSH
10941: LD_VAR 0 10
10945: IN
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: LD_VAR 0 10
10954: IN
10955: AND
10956: IFFALSE 11008
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10958: LD_ADDR_VAR 0 8
10962: PUSH
10963: LD_VAR 0 8
10967: PPUSH
10968: LD_INT 1
10970: PPUSH
10971: LD_VAR 0 2
10975: PUSH
10976: LD_VAR 0 11
10980: PLUS
10981: PUSH
10982: LD_VAR 0 3
10986: PUSH
10987: LD_VAR 0 4
10991: MINUS
10992: PUSH
10993: LD_VAR 0 11
10997: PLUS
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PPUSH
11003: CALL_OW 2
11007: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11008: LD_INT 1
11010: PUSH
11011: LD_VAR 0 10
11015: IN
11016: PUSH
11017: LD_INT 2
11019: PUSH
11020: LD_VAR 0 10
11024: IN
11025: AND
11026: IFFALSE 11072
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11028: LD_ADDR_VAR 0 8
11032: PUSH
11033: LD_VAR 0 8
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: LD_VAR 0 2
11045: PUSH
11046: LD_VAR 0 4
11050: PLUS
11051: PUSH
11052: LD_VAR 0 3
11056: PUSH
11057: LD_VAR 0 11
11061: PLUS
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 2
11071: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11072: LD_INT 2
11074: PUSH
11075: LD_VAR 0 10
11079: IN
11080: PUSH
11081: LD_INT 3
11083: PUSH
11084: LD_VAR 0 10
11088: IN
11089: AND
11090: IFFALSE 11142
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11092: LD_ADDR_VAR 0 8
11096: PUSH
11097: LD_VAR 0 8
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: LD_VAR 0 2
11109: PUSH
11110: LD_VAR 0 4
11114: PLUS
11115: PUSH
11116: LD_VAR 0 11
11120: MINUS
11121: PUSH
11122: LD_VAR 0 3
11126: PUSH
11127: LD_VAR 0 4
11131: PLUS
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PPUSH
11137: CALL_OW 2
11141: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11142: LD_INT 3
11144: PUSH
11145: LD_VAR 0 10
11149: IN
11150: PUSH
11151: LD_INT 4
11153: PUSH
11154: LD_VAR 0 10
11158: IN
11159: AND
11160: IFFALSE 11212
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11162: LD_ADDR_VAR 0 8
11166: PUSH
11167: LD_VAR 0 8
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: LD_VAR 0 2
11179: PUSH
11180: LD_VAR 0 11
11184: MINUS
11185: PUSH
11186: LD_VAR 0 3
11190: PUSH
11191: LD_VAR 0 4
11195: PLUS
11196: PUSH
11197: LD_VAR 0 11
11201: MINUS
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PPUSH
11207: CALL_OW 2
11211: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11212: LD_INT 4
11214: PUSH
11215: LD_VAR 0 10
11219: IN
11220: PUSH
11221: LD_INT 5
11223: PUSH
11224: LD_VAR 0 10
11228: IN
11229: AND
11230: IFFALSE 11276
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11232: LD_ADDR_VAR 0 8
11236: PUSH
11237: LD_VAR 0 8
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_VAR 0 2
11249: PUSH
11250: LD_VAR 0 4
11254: MINUS
11255: PUSH
11256: LD_VAR 0 3
11260: PUSH
11261: LD_VAR 0 11
11265: MINUS
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 2
11275: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11276: LD_INT 5
11278: PUSH
11279: LD_VAR 0 10
11283: IN
11284: PUSH
11285: LD_INT 0
11287: PUSH
11288: LD_VAR 0 10
11292: IN
11293: AND
11294: IFFALSE 11346
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11296: LD_ADDR_VAR 0 8
11300: PUSH
11301: LD_VAR 0 8
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: LD_VAR 0 2
11313: PUSH
11314: LD_VAR 0 4
11318: MINUS
11319: PUSH
11320: LD_VAR 0 11
11324: PLUS
11325: PUSH
11326: LD_VAR 0 3
11330: PUSH
11331: LD_VAR 0 4
11335: MINUS
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PPUSH
11341: CALL_OW 2
11345: ST_TO_ADDR
// b = b + c end ;
11346: LD_ADDR_VAR 0 11
11350: PUSH
11351: LD_VAR 0 11
11355: PUSH
11356: LD_VAR 0 14
11360: PLUS
11361: ST_TO_ADDR
11362: GO 10922
// if list_coords = 0 then
11364: LD_VAR 0 8
11368: PUSH
11369: LD_INT 0
11371: EQUAL
11372: IFFALSE 11376
// exit ;
11374: GO 11884
// repeat min_dist = 5000 ;
11376: LD_ADDR_VAR 0 12
11380: PUSH
11381: LD_INT 5000
11383: ST_TO_ADDR
// for b in list_coords do
11384: LD_ADDR_VAR 0 11
11388: PUSH
11389: LD_VAR 0 8
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11454
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11397: LD_ADDR_VAR 0 13
11401: PUSH
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_VAR 0 11
11411: PUSH
11412: LD_INT 1
11414: ARRAY
11415: PPUSH
11416: LD_VAR 0 11
11420: PUSH
11421: LD_INT 2
11423: ARRAY
11424: PPUSH
11425: CALL_OW 297
11429: ST_TO_ADDR
// if temp_dist < min_dist then
11430: LD_VAR 0 13
11434: PUSH
11435: LD_VAR 0 12
11439: LESS
11440: IFFALSE 11452
// min_dist = temp_dist ;
11442: LD_ADDR_VAR 0 12
11446: PUSH
11447: LD_VAR 0 13
11451: ST_TO_ADDR
// end ;
11452: GO 11394
11454: POP
11455: POP
// c = 0 ;
11456: LD_ADDR_VAR 0 14
11460: PUSH
11461: LD_INT 0
11463: ST_TO_ADDR
// repeat c = c + 1 ;
11464: LD_ADDR_VAR 0 14
11468: PUSH
11469: LD_VAR 0 14
11473: PUSH
11474: LD_INT 1
11476: PLUS
11477: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11478: LD_VAR 0 1
11482: PPUSH
11483: LD_VAR 0 8
11487: PUSH
11488: LD_VAR 0 14
11492: ARRAY
11493: PUSH
11494: LD_INT 1
11496: ARRAY
11497: PPUSH
11498: LD_VAR 0 8
11502: PUSH
11503: LD_VAR 0 14
11507: ARRAY
11508: PUSH
11509: LD_INT 2
11511: ARRAY
11512: PPUSH
11513: CALL_OW 297
11517: PUSH
11518: LD_VAR 0 12
11522: EQUAL
11523: IFFALSE 11588
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11525: LD_ADDR_VAR 0 7
11529: PUSH
11530: LD_VAR 0 7
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: LD_VAR 0 8
11542: PUSH
11543: LD_VAR 0 14
11547: ARRAY
11548: PPUSH
11549: CALL_OW 2
11553: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11554: LD_ADDR_VAR 0 8
11558: PUSH
11559: LD_VAR 0 8
11563: PPUSH
11564: LD_VAR 0 14
11568: PPUSH
11569: CALL_OW 3
11573: ST_TO_ADDR
// c = c - 1 ;
11574: LD_ADDR_VAR 0 14
11578: PUSH
11579: LD_VAR 0 14
11583: PUSH
11584: LD_INT 1
11586: MINUS
11587: ST_TO_ADDR
// end ; until c = list_coords ;
11588: LD_VAR 0 14
11592: PUSH
11593: LD_VAR 0 8
11597: EQUAL
11598: IFFALSE 11464
// c = 0 ;
11600: LD_ADDR_VAR 0 14
11604: PUSH
11605: LD_INT 0
11607: ST_TO_ADDR
// if list_nearest > 0 then
11608: LD_VAR 0 7
11612: PUSH
11613: LD_INT 0
11615: GREATER
11616: IFFALSE 11758
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11618: LD_ADDR_VAR 0 15
11622: PUSH
11623: LD_INT 1
11625: PPUSH
11626: LD_VAR 0 7
11630: PPUSH
11631: CALL_OW 12
11635: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11636: LD_ADDR_VAR 0 16
11640: PUSH
11641: LD_VAR 0 7
11645: PUSH
11646: LD_VAR 0 15
11650: ARRAY
11651: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11652: LD_VAR 0 16
11656: PUSH
11657: LD_INT 1
11659: ARRAY
11660: PPUSH
11661: LD_VAR 0 16
11665: PUSH
11666: LD_INT 2
11668: ARRAY
11669: PPUSH
11670: CALL_OW 488
11674: PUSH
11675: LD_INT 0
11677: GREATER
11678: PUSH
11679: LD_VAR 0 16
11683: PUSH
11684: LD_INT 1
11686: ARRAY
11687: PPUSH
11688: LD_VAR 0 16
11692: PUSH
11693: LD_INT 2
11695: ARRAY
11696: PPUSH
11697: CALL_OW 428
11701: PUSH
11702: LD_INT 0
11704: EQUAL
11705: AND
11706: IFFALSE 11718
// c = 1 else
11708: LD_ADDR_VAR 0 14
11712: PUSH
11713: LD_INT 1
11715: ST_TO_ADDR
11716: GO 11738
// list_nearest = Delete ( list_nearest , rand_num ) ;
11718: LD_ADDR_VAR 0 7
11722: PUSH
11723: LD_VAR 0 7
11727: PPUSH
11728: LD_VAR 0 15
11732: PPUSH
11733: CALL_OW 3
11737: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11738: LD_VAR 0 14
11742: PUSH
11743: LD_INT 1
11745: EQUAL
11746: PUSH
11747: LD_VAR 0 7
11751: PUSH
11752: LD_INT 0
11754: EQUAL
11755: OR
11756: IFFALSE 11618
// end ; until c = 1 or list_coords = 0 ;
11758: LD_VAR 0 14
11762: PUSH
11763: LD_INT 1
11765: EQUAL
11766: PUSH
11767: LD_VAR 0 8
11771: PUSH
11772: LD_INT 0
11774: EQUAL
11775: OR
11776: IFFALSE 11376
// attempts = attempts + 1 ;
11778: LD_ADDR_VAR 0 17
11782: PUSH
11783: LD_VAR 0 17
11787: PUSH
11788: LD_INT 1
11790: PLUS
11791: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11792: LD_VAR 0 14
11796: PUSH
11797: LD_INT 1
11799: EQUAL
11800: PUSH
11801: LD_VAR 0 17
11805: PUSH
11806: LD_INT 1
11808: GREATER
11809: OR
11810: IFFALSE 10335
// if c = 1 then
11812: LD_VAR 0 14
11816: PUSH
11817: LD_INT 1
11819: EQUAL
11820: IFFALSE 11884
// if add then
11822: LD_VAR 0 5
11826: IFFALSE 11857
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11828: LD_VAR 0 1
11832: PPUSH
11833: LD_VAR 0 16
11837: PUSH
11838: LD_INT 1
11840: ARRAY
11841: PPUSH
11842: LD_VAR 0 16
11846: PUSH
11847: LD_INT 2
11849: ARRAY
11850: PPUSH
11851: CALL_OW 171
11855: GO 11884
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_VAR 0 16
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PPUSH
11871: LD_VAR 0 16
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: CALL_OW 111
// end ;
11884: LD_VAR 0 6
11888: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11889: LD_INT 0
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11897: LD_VAR 0 1
11901: PPUSH
11902: LD_VAR 0 2
11906: PPUSH
11907: CALL_OW 488
11911: NOT
11912: PUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_VAR 0 4
11922: PPUSH
11923: CALL_OW 488
11927: NOT
11928: OR
11929: IFFALSE 11942
// begin result = - 1 ;
11931: LD_ADDR_VAR 0 5
11935: PUSH
11936: LD_INT 1
11938: NEG
11939: ST_TO_ADDR
// exit ;
11940: GO 12102
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11942: LD_ADDR_VAR 0 6
11946: PUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_VAR 0 2
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_VAR 0 4
11966: PPUSH
11967: CALL_OW 298
11971: ST_TO_ADDR
// dist_2 = 99999 ;
11972: LD_ADDR_VAR 0 7
11976: PUSH
11977: LD_INT 99999
11979: ST_TO_ADDR
// for b = 0 to 5 do
11980: LD_ADDR_VAR 0 8
11984: PUSH
11985: DOUBLE
11986: LD_INT 0
11988: DEC
11989: ST_TO_ADDR
11990: LD_INT 5
11992: PUSH
11993: FOR_TO
11994: IFFALSE 12090
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11996: LD_ADDR_VAR 0 9
12000: PUSH
12001: LD_VAR 0 1
12005: PPUSH
12006: LD_VAR 0 8
12010: PPUSH
12011: LD_VAR 0 6
12015: PPUSH
12016: CALL_OW 272
12020: PPUSH
12021: LD_VAR 0 2
12025: PPUSH
12026: LD_VAR 0 8
12030: PPUSH
12031: LD_VAR 0 6
12035: PPUSH
12036: CALL_OW 273
12040: PPUSH
12041: LD_VAR 0 3
12045: PPUSH
12046: LD_VAR 0 4
12050: PPUSH
12051: CALL_OW 298
12055: ST_TO_ADDR
// if temp_dist < dist_2 then
12056: LD_VAR 0 9
12060: PUSH
12061: LD_VAR 0 7
12065: LESS
12066: IFFALSE 12088
// begin dist_2 = temp_dist ;
12068: LD_ADDR_VAR 0 7
12072: PUSH
12073: LD_VAR 0 9
12077: ST_TO_ADDR
// dir = b ;
12078: LD_ADDR_VAR 0 10
12082: PUSH
12083: LD_VAR 0 8
12087: ST_TO_ADDR
// end ; end ;
12088: GO 11993
12090: POP
12091: POP
// result = dir ;
12092: LD_ADDR_VAR 0 5
12096: PUSH
12097: LD_VAR 0 10
12101: ST_TO_ADDR
// end ; end_of_file
12102: LD_VAR 0 5
12106: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12107: LD_INT 0
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
// personel = [ ] ;
12137: LD_ADDR_VAR 0 18
12141: PUSH
12142: EMPTY
12143: ST_TO_ADDR
// vehicles = [ ] ;
12144: LD_ADDR_VAR 0 24
12148: PUSH
12149: EMPTY
12150: ST_TO_ADDR
// for unit in basePersonel do
12151: LD_ADDR_VAR 0 17
12155: PUSH
12156: LD_VAR 0 3
12160: PUSH
12161: FOR_IN
12162: IFFALSE 12210
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12164: LD_ADDR_VAR 0 18
12168: PUSH
12169: LD_VAR 0 18
12173: PUSH
12174: LD_VAR 0 17
12178: PUSH
12179: LD_VAR 0 17
12183: PPUSH
12184: CALL_OW 310
12188: PUSH
12189: LD_VAR 0 17
12193: PPUSH
12194: CALL_OW 302
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: EMPTY
12205: LIST
12206: ADD
12207: ST_TO_ADDR
12208: GO 12161
12210: POP
12211: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12212: LD_ADDR_VAR 0 23
12216: PUSH
12217: LD_VAR 0 4
12221: PPUSH
12222: LD_INT 22
12224: PUSH
12225: LD_VAR 0 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 21
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 50
12246: PUSH
12247: EMPTY
12248: LIST
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 34
12258: PUSH
12259: LD_INT 12
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: PUSH
12266: LD_INT 34
12268: PUSH
12269: LD_INT 51
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 34
12278: PUSH
12279: LD_INT 32
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 70
12306: PUSH
12307: FOR_IN
12308: IFFALSE 12356
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12310: LD_ADDR_VAR 0 24
12314: PUSH
12315: LD_VAR 0 24
12319: PUSH
12320: LD_VAR 0 23
12324: PUSH
12325: LD_VAR 0 23
12329: PPUSH
12330: CALL_OW 310
12334: PUSH
12335: LD_VAR 0 23
12339: PPUSH
12340: CALL_OW 302
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: ADD
12353: ST_TO_ADDR
12354: GO 12307
12356: POP
12357: POP
// repeat soldiers = [ ] ;
12358: LD_ADDR_VAR 0 19
12362: PUSH
12363: EMPTY
12364: ST_TO_ADDR
// engineers = [ ] ;
12365: LD_ADDR_VAR 0 20
12369: PUSH
12370: EMPTY
12371: ST_TO_ADDR
// mechanics = [ ] ;
12372: LD_ADDR_VAR 0 21
12376: PUSH
12377: EMPTY
12378: ST_TO_ADDR
// scientists = [ ] ;
12379: LD_ADDR_VAR 0 22
12383: PUSH
12384: EMPTY
12385: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12386: LD_ADDR_VAR 0 29
12390: PUSH
12391: LD_VAR 0 4
12395: PPUSH
12396: LD_INT 22
12398: PUSH
12399: LD_VAR 0 1
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: LD_INT 21
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 50
12420: PUSH
12421: EMPTY
12422: LIST
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: LD_INT 30
12429: PUSH
12430: LD_INT 0
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PPUSH
12458: CALL_OW 70
12462: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12463: LD_ADDR_VAR 0 30
12467: PUSH
12468: LD_VAR 0 4
12472: PPUSH
12473: LD_INT 22
12475: PUSH
12476: LD_VAR 0 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 21
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 50
12497: PUSH
12498: EMPTY
12499: LIST
12500: PUSH
12501: LD_INT 2
12503: PUSH
12504: LD_INT 30
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 30
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 70
12539: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12540: LD_ADDR_VAR 0 31
12544: PUSH
12545: LD_VAR 0 4
12549: PPUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 3
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 50
12574: PUSH
12575: EMPTY
12576: LIST
12577: PUSH
12578: LD_INT 2
12580: PUSH
12581: LD_INT 30
12583: PUSH
12584: LD_INT 6
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 30
12593: PUSH
12594: LD_INT 7
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 30
12603: PUSH
12604: LD_INT 8
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: PPUSH
12623: CALL_OW 70
12627: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12628: LD_ADDR_VAR 0 32
12632: PUSH
12633: LD_VAR 0 4
12637: PPUSH
12638: LD_INT 22
12640: PUSH
12641: LD_VAR 0 1
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 50
12662: PUSH
12663: EMPTY
12664: LIST
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: LD_INT 30
12671: PUSH
12672: LD_INT 31
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 30
12681: PUSH
12682: LD_INT 32
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 70
12704: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12705: LD_ADDR_VAR 0 33
12709: PUSH
12710: LD_VAR 0 4
12714: PPUSH
12715: LD_INT 22
12717: PUSH
12718: LD_VAR 0 1
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 21
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 50
12739: PUSH
12740: EMPTY
12741: LIST
12742: PUSH
12743: LD_INT 2
12745: PUSH
12746: LD_INT 30
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: LD_INT 5
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: PPUSH
12777: CALL_OW 70
12781: ST_TO_ADDR
// for i := 1 to personel do
12782: LD_ADDR_VAR 0 13
12786: PUSH
12787: DOUBLE
12788: LD_INT 1
12790: DEC
12791: ST_TO_ADDR
12792: LD_VAR 0 18
12796: PUSH
12797: FOR_TO
12798: IFFALSE 13004
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12800: LD_VAR 0 18
12804: PUSH
12805: LD_VAR 0 13
12809: ARRAY
12810: PUSH
12811: LD_INT 1
12813: ARRAY
12814: PPUSH
12815: CALL_OW 256
12819: PUSH
12820: LD_INT 1000
12822: EQUAL
12823: IFFALSE 12865
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12825: LD_ADDR_VAR 0 18
12829: PUSH
12830: LD_VAR 0 18
12834: PPUSH
12835: LD_VAR 0 13
12839: PUSH
12840: LD_VAR 0 18
12844: PUSH
12845: LD_VAR 0 13
12849: ARRAY
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL 35939 0 3
12862: ST_TO_ADDR
// end else
12863: GO 12952
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12865: LD_VAR 0 18
12869: PUSH
12870: LD_VAR 0 13
12874: ARRAY
12875: PUSH
12876: LD_INT 1
12878: ARRAY
12879: PPUSH
12880: CALL_OW 256
12884: PUSH
12885: LD_INT 950
12887: LESSEQUAL
12888: IFFALSE 12952
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12890: LD_ADDR_VAR 0 18
12894: PUSH
12895: LD_VAR 0 18
12899: PPUSH
12900: LD_VAR 0 13
12904: PUSH
12905: LD_VAR 0 18
12909: PUSH
12910: LD_VAR 0 13
12914: ARRAY
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PPUSH
12920: LD_INT 0
12922: PPUSH
12923: CALL 35939 0 3
12927: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12928: LD_VAR 0 18
12932: PUSH
12933: LD_VAR 0 13
12937: ARRAY
12938: PUSH
12939: LD_INT 1
12941: ARRAY
12942: PPUSH
12943: LD_VAR 0 5
12947: PPUSH
12948: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12952: LD_VAR 0 18
12956: PUSH
12957: LD_VAR 0 13
12961: ARRAY
12962: PUSH
12963: LD_INT 1
12965: ARRAY
12966: PPUSH
12967: CALL_OW 256
12971: PUSH
12972: LD_INT 250
12974: LESS
12975: IFFALSE 13002
// personel = personel diff [ personel [ i ] ] ;
12977: LD_ADDR_VAR 0 18
12981: PUSH
12982: LD_VAR 0 18
12986: PUSH
12987: LD_VAR 0 18
12991: PUSH
12992: LD_VAR 0 13
12996: ARRAY
12997: PUSH
12998: EMPTY
12999: LIST
13000: DIFF
13001: ST_TO_ADDR
// end ;
13002: GO 12797
13004: POP
13005: POP
// for i := 1 to vehicles do
13006: LD_ADDR_VAR 0 13
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_VAR 0 24
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13408
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13024: LD_VAR 0 24
13028: PUSH
13029: LD_VAR 0 13
13033: ARRAY
13034: PUSH
13035: LD_INT 1
13037: ARRAY
13038: PPUSH
13039: CALL_OW 261
13043: PUSH
13044: LD_INT 50
13046: LESS
13047: IFFALSE 13071
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13049: LD_VAR 0 24
13053: PUSH
13054: LD_VAR 0 13
13058: ARRAY
13059: PUSH
13060: LD_INT 1
13062: ARRAY
13063: PPUSH
13064: LD_INT 100
13066: PPUSH
13067: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13071: LD_VAR 0 24
13075: PUSH
13076: LD_VAR 0 13
13080: ARRAY
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: CALL_OW 256
13090: PUSH
13091: LD_INT 1000
13093: EQUAL
13094: IFFALSE 13269
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13096: LD_VAR 0 24
13100: PUSH
13101: LD_VAR 0 13
13105: ARRAY
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: CALL_OW 263
13115: PUSH
13116: LD_INT 1
13118: EQUAL
13119: IFFALSE 13177
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13121: LD_VAR 0 24
13125: PUSH
13126: LD_VAR 0 13
13130: ARRAY
13131: PUSH
13132: LD_INT 2
13134: ARRAY
13135: PPUSH
13136: CALL_OW 310
13140: NOT
13141: IFFALSE 13177
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13143: LD_VAR 0 24
13147: PUSH
13148: LD_VAR 0 13
13152: ARRAY
13153: PUSH
13154: LD_INT 2
13156: ARRAY
13157: PPUSH
13158: LD_VAR 0 24
13162: PUSH
13163: LD_VAR 0 13
13167: ARRAY
13168: PUSH
13169: LD_INT 1
13171: ARRAY
13172: PPUSH
13173: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13177: LD_VAR 0 24
13181: PUSH
13182: LD_VAR 0 10
13186: LESS
13187: IFFALSE 13229
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13189: LD_ADDR_VAR 0 24
13193: PUSH
13194: LD_VAR 0 24
13198: PPUSH
13199: LD_VAR 0 13
13203: PUSH
13204: LD_VAR 0 24
13208: PUSH
13209: LD_VAR 0 13
13213: ARRAY
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL 35939 0 3
13226: ST_TO_ADDR
13227: GO 13267
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13229: LD_ADDR_VAR 0 24
13233: PUSH
13234: LD_VAR 0 24
13238: PPUSH
13239: LD_VAR 0 13
13243: PUSH
13244: LD_VAR 0 24
13248: PUSH
13249: LD_VAR 0 13
13253: ARRAY
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PPUSH
13259: LD_INT 2
13261: PPUSH
13262: CALL 35939 0 3
13266: ST_TO_ADDR
// end else
13267: GO 13356
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13269: LD_VAR 0 24
13273: PUSH
13274: LD_VAR 0 13
13278: ARRAY
13279: PUSH
13280: LD_INT 1
13282: ARRAY
13283: PPUSH
13284: CALL_OW 256
13288: PUSH
13289: LD_INT 650
13291: LESSEQUAL
13292: IFFALSE 13356
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13294: LD_ADDR_VAR 0 24
13298: PUSH
13299: LD_VAR 0 24
13303: PPUSH
13304: LD_VAR 0 13
13308: PUSH
13309: LD_VAR 0 24
13313: PUSH
13314: LD_VAR 0 13
13318: ARRAY
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL 35939 0 3
13331: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13332: LD_VAR 0 24
13336: PUSH
13337: LD_VAR 0 13
13341: ARRAY
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PPUSH
13347: LD_VAR 0 6
13351: PPUSH
13352: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13356: LD_VAR 0 24
13360: PUSH
13361: LD_VAR 0 13
13365: ARRAY
13366: PUSH
13367: LD_INT 1
13369: ARRAY
13370: PPUSH
13371: CALL_OW 256
13375: PUSH
13376: LD_INT 250
13378: LESS
13379: IFFALSE 13406
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13381: LD_ADDR_VAR 0 24
13385: PUSH
13386: LD_VAR 0 24
13390: PUSH
13391: LD_VAR 0 24
13395: PUSH
13396: LD_VAR 0 13
13400: ARRAY
13401: PUSH
13402: EMPTY
13403: LIST
13404: DIFF
13405: ST_TO_ADDR
// end ;
13406: GO 13021
13408: POP
13409: POP
// for i := 1 to personel do
13410: LD_ADDR_VAR 0 13
13414: PUSH
13415: DOUBLE
13416: LD_INT 1
13418: DEC
13419: ST_TO_ADDR
13420: LD_VAR 0 18
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13467
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13428: LD_ADDR_VAR 0 19
13432: PUSH
13433: LD_VAR 0 19
13437: PUSH
13438: LD_VAR 0 18
13442: PUSH
13443: LD_VAR 0 13
13447: ARRAY
13448: PPUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 1
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 72
13463: ADD
13464: ST_TO_ADDR
13465: GO 13425
13467: POP
13468: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13469: LD_VAR 0 19
13473: PUSH
13474: LD_VAR 0 32
13478: PPUSH
13479: LD_INT 3
13481: PUSH
13482: LD_INT 59
13484: PUSH
13485: EMPTY
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: AND
13497: IFFALSE 13785
// begin for i := 1 to personel do
13499: LD_ADDR_VAR 0 13
13503: PUSH
13504: DOUBLE
13505: LD_INT 1
13507: DEC
13508: ST_TO_ADDR
13509: LD_VAR 0 18
13513: PUSH
13514: FOR_TO
13515: IFFALSE 13781
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13517: LD_VAR 0 18
13521: PUSH
13522: LD_VAR 0 13
13526: ARRAY
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PPUSH
13532: CALL_OW 257
13536: PUSH
13537: LD_INT 1
13539: EQUAL
13540: PUSH
13541: LD_VAR 0 18
13545: PUSH
13546: LD_VAR 0 13
13550: ARRAY
13551: PUSH
13552: LD_INT 3
13554: ARRAY
13555: PUSH
13556: LD_INT 1
13558: EQUAL
13559: AND
13560: IFFALSE 13779
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13562: LD_VAR 0 18
13566: PUSH
13567: LD_VAR 0 13
13571: ARRAY
13572: PUSH
13573: LD_INT 1
13575: ARRAY
13576: PPUSH
13577: CALL_OW 437
13581: IFFALSE 13682
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13583: LD_VAR 0 18
13587: PUSH
13588: LD_VAR 0 13
13592: ARRAY
13593: PUSH
13594: LD_INT 1
13596: ARRAY
13597: PPUSH
13598: CALL_OW 437
13602: PUSH
13603: LD_INT 1
13605: ARRAY
13606: PUSH
13607: LD_INT 1
13609: ARRAY
13610: PUSH
13611: LD_STRING e
13613: EQUAL
13614: PUSH
13615: LD_VAR 0 18
13619: PUSH
13620: LD_VAR 0 13
13624: ARRAY
13625: PUSH
13626: LD_INT 1
13628: ARRAY
13629: PPUSH
13630: CALL_OW 437
13634: PUSH
13635: LD_INT 1
13637: ARRAY
13638: PUSH
13639: LD_INT 4
13641: ARRAY
13642: PPUSH
13643: CALL_OW 266
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: LD_INT 5
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: IN
13658: AND
13659: IFFALSE 13682
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13661: LD_VAR 0 18
13665: PUSH
13666: LD_VAR 0 13
13670: ARRAY
13671: PUSH
13672: LD_INT 1
13674: ARRAY
13675: PPUSH
13676: EMPTY
13677: PPUSH
13678: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13682: LD_ADDR_VAR 0 36
13686: PUSH
13687: LD_VAR 0 32
13691: PPUSH
13692: LD_INT 3
13694: PUSH
13695: LD_INT 59
13697: PUSH
13698: EMPTY
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PPUSH
13705: CALL_OW 72
13709: PUSH
13710: FOR_IN
13711: IFFALSE 13777
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13713: LD_VAR 0 18
13717: PUSH
13718: LD_VAR 0 13
13722: ARRAY
13723: PUSH
13724: LD_INT 1
13726: ARRAY
13727: PPUSH
13728: CALL_OW 310
13732: PPUSH
13733: CALL_OW 266
13737: PUSH
13738: LD_INT 31
13740: PUSH
13741: LD_INT 32
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: IN
13748: NOT
13749: IFFALSE 13775
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13751: LD_VAR 0 18
13755: PUSH
13756: LD_VAR 0 13
13760: ARRAY
13761: PUSH
13762: LD_INT 1
13764: ARRAY
13765: PPUSH
13766: LD_VAR 0 36
13770: PPUSH
13771: CALL_OW 120
13775: GO 13710
13777: POP
13778: POP
// end ; end ;
13779: GO 13514
13781: POP
13782: POP
// end else
13783: GO 14000
// if soldiers and barracks then
13785: LD_VAR 0 19
13789: PUSH
13790: LD_VAR 0 33
13794: AND
13795: IFFALSE 14000
// for i := 1 to personel do
13797: LD_ADDR_VAR 0 13
13801: PUSH
13802: DOUBLE
13803: LD_INT 1
13805: DEC
13806: ST_TO_ADDR
13807: LD_VAR 0 18
13811: PUSH
13812: FOR_TO
13813: IFFALSE 13998
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13815: LD_VAR 0 18
13819: PUSH
13820: LD_VAR 0 13
13824: ARRAY
13825: PUSH
13826: LD_INT 1
13828: ARRAY
13829: PPUSH
13830: CALL_OW 257
13834: PUSH
13835: LD_INT 1
13837: EQUAL
13838: PUSH
13839: LD_VAR 0 18
13843: PUSH
13844: LD_VAR 0 13
13848: ARRAY
13849: PUSH
13850: LD_INT 3
13852: ARRAY
13853: PUSH
13854: LD_INT 1
13856: EQUAL
13857: AND
13858: PUSH
13859: LD_VAR 0 18
13863: PUSH
13864: LD_VAR 0 13
13868: ARRAY
13869: PUSH
13870: LD_INT 1
13872: ARRAY
13873: PPUSH
13874: LD_INT 56
13876: PUSH
13877: EMPTY
13878: LIST
13879: PPUSH
13880: CALL_OW 72
13884: AND
13885: IFFALSE 13996
// begin if not personel [ i ] [ 2 ] then
13887: LD_VAR 0 18
13891: PUSH
13892: LD_VAR 0 13
13896: ARRAY
13897: PUSH
13898: LD_INT 2
13900: ARRAY
13901: NOT
13902: IFFALSE 13962
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13904: LD_ADDR_VAR 0 18
13908: PUSH
13909: LD_VAR 0 18
13913: PPUSH
13914: LD_VAR 0 13
13918: PUSH
13919: LD_VAR 0 18
13923: PUSH
13924: LD_VAR 0 13
13928: ARRAY
13929: PUSH
13930: LD_INT 1
13932: MINUS
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: LD_VAR 0 33
13942: PUSH
13943: LD_INT 1
13945: PPUSH
13946: LD_VAR 0 33
13950: PPUSH
13951: CALL_OW 12
13955: ARRAY
13956: PPUSH
13957: CALL 35939 0 3
13961: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13962: LD_VAR 0 18
13966: PUSH
13967: LD_VAR 0 13
13971: ARRAY
13972: PUSH
13973: LD_INT 1
13975: ARRAY
13976: PPUSH
13977: LD_VAR 0 18
13981: PUSH
13982: LD_VAR 0 13
13986: ARRAY
13987: PUSH
13988: LD_INT 2
13990: ARRAY
13991: PPUSH
13992: CALL_OW 120
// end ;
13996: GO 13812
13998: POP
13999: POP
// for i := 1 to personel do
14000: LD_ADDR_VAR 0 13
14004: PUSH
14005: DOUBLE
14006: LD_INT 1
14008: DEC
14009: ST_TO_ADDR
14010: LD_VAR 0 18
14014: PUSH
14015: FOR_TO
14016: IFFALSE 14057
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14018: LD_ADDR_VAR 0 20
14022: PUSH
14023: LD_VAR 0 20
14027: PUSH
14028: LD_VAR 0 18
14032: PUSH
14033: LD_VAR 0 13
14037: ARRAY
14038: PPUSH
14039: LD_INT 25
14041: PUSH
14042: LD_INT 2
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PPUSH
14049: CALL_OW 72
14053: ADD
14054: ST_TO_ADDR
14055: GO 14015
14057: POP
14058: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14059: LD_VAR 0 20
14063: PUSH
14064: LD_VAR 0 4
14068: PPUSH
14069: LD_INT 22
14071: PUSH
14072: LD_VAR 0 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 21
14083: PUSH
14084: LD_INT 3
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 3
14093: PUSH
14094: LD_INT 24
14096: PUSH
14097: LD_INT 1000
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 70
14117: AND
14118: IFFALSE 14394
// begin for i := 1 to personel do
14120: LD_ADDR_VAR 0 13
14124: PUSH
14125: DOUBLE
14126: LD_INT 1
14128: DEC
14129: ST_TO_ADDR
14130: LD_VAR 0 18
14134: PUSH
14135: FOR_TO
14136: IFFALSE 14390
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14138: LD_VAR 0 18
14142: PUSH
14143: LD_VAR 0 13
14147: ARRAY
14148: PUSH
14149: LD_INT 1
14151: ARRAY
14152: PPUSH
14153: CALL_OW 257
14157: PUSH
14158: LD_INT 2
14160: EQUAL
14161: PUSH
14162: LD_VAR 0 18
14166: PUSH
14167: LD_VAR 0 13
14171: ARRAY
14172: PUSH
14173: LD_INT 3
14175: ARRAY
14176: PUSH
14177: LD_INT 1
14179: EQUAL
14180: AND
14181: IFFALSE 14388
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14183: LD_VAR 0 18
14187: PUSH
14188: LD_VAR 0 13
14192: ARRAY
14193: PUSH
14194: LD_INT 1
14196: ARRAY
14197: PPUSH
14198: CALL_OW 437
14202: IFFALSE 14258
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14204: LD_VAR 0 18
14208: PUSH
14209: LD_VAR 0 13
14213: ARRAY
14214: PUSH
14215: LD_INT 1
14217: ARRAY
14218: PPUSH
14219: CALL_OW 437
14223: PUSH
14224: LD_INT 1
14226: ARRAY
14227: PUSH
14228: LD_INT 1
14230: ARRAY
14231: PUSH
14232: LD_STRING e
14234: EQUAL
14235: IFFALSE 14258
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14237: LD_VAR 0 18
14241: PUSH
14242: LD_VAR 0 13
14246: ARRAY
14247: PUSH
14248: LD_INT 1
14250: ARRAY
14251: PPUSH
14252: EMPTY
14253: PPUSH
14254: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14258: LD_VAR 0 18
14262: PUSH
14263: LD_VAR 0 13
14267: ARRAY
14268: PUSH
14269: LD_INT 1
14271: ARRAY
14272: PPUSH
14273: CALL_OW 310
14277: IFFALSE 14298
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14279: LD_VAR 0 18
14283: PUSH
14284: LD_VAR 0 13
14288: ARRAY
14289: PUSH
14290: LD_INT 1
14292: ARRAY
14293: PPUSH
14294: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14298: LD_ADDR_VAR 0 34
14302: PUSH
14303: LD_VAR 0 4
14307: PPUSH
14308: LD_INT 22
14310: PUSH
14311: LD_VAR 0 1
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 21
14322: PUSH
14323: LD_INT 3
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 3
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: LD_INT 1000
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 70
14356: PUSH
14357: FOR_IN
14358: IFFALSE 14386
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14360: LD_VAR 0 18
14364: PUSH
14365: LD_VAR 0 13
14369: ARRAY
14370: PUSH
14371: LD_INT 1
14373: ARRAY
14374: PPUSH
14375: LD_VAR 0 34
14379: PPUSH
14380: CALL_OW 190
14384: GO 14357
14386: POP
14387: POP
// end ;
14388: GO 14135
14390: POP
14391: POP
// end else
14392: GO 14656
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14394: LD_VAR 0 20
14398: PUSH
14399: LD_VAR 0 20
14403: PPUSH
14404: LD_INT 56
14406: PUSH
14407: EMPTY
14408: LIST
14409: PPUSH
14410: CALL_OW 72
14414: AND
14415: PUSH
14416: LD_VAR 0 29
14420: AND
14421: IFFALSE 14656
// for i := 1 to personel do
14423: LD_ADDR_VAR 0 13
14427: PUSH
14428: DOUBLE
14429: LD_INT 1
14431: DEC
14432: ST_TO_ADDR
14433: LD_VAR 0 18
14437: PUSH
14438: FOR_TO
14439: IFFALSE 14654
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14441: LD_VAR 0 18
14445: PUSH
14446: LD_VAR 0 13
14450: ARRAY
14451: PUSH
14452: LD_INT 1
14454: ARRAY
14455: PPUSH
14456: CALL_OW 257
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: PUSH
14465: LD_VAR 0 18
14469: PUSH
14470: LD_VAR 0 13
14474: ARRAY
14475: PUSH
14476: LD_INT 3
14478: ARRAY
14479: PUSH
14480: LD_INT 1
14482: EQUAL
14483: AND
14484: IFFALSE 14652
// begin if not personel [ i ] [ 2 ] then
14486: LD_VAR 0 18
14490: PUSH
14491: LD_VAR 0 13
14495: ARRAY
14496: PUSH
14497: LD_INT 2
14499: ARRAY
14500: NOT
14501: IFFALSE 14618
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14503: LD_ADDR_VAR 0 18
14507: PUSH
14508: LD_VAR 0 18
14512: PPUSH
14513: LD_VAR 0 13
14517: PUSH
14518: LD_VAR 0 18
14522: PUSH
14523: LD_VAR 0 13
14527: ARRAY
14528: PUSH
14529: LD_INT 1
14531: MINUS
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: LD_VAR 0 4
14541: PPUSH
14542: LD_INT 22
14544: PUSH
14545: LD_VAR 0 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 50
14566: PUSH
14567: EMPTY
14568: LIST
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: LD_INT 30
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 30
14585: PUSH
14586: LD_INT 1
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 70
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PPUSH
14613: CALL 35939 0 3
14617: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14618: LD_VAR 0 18
14622: PUSH
14623: LD_VAR 0 13
14627: ARRAY
14628: PUSH
14629: LD_INT 1
14631: ARRAY
14632: PPUSH
14633: LD_VAR 0 18
14637: PUSH
14638: LD_VAR 0 13
14642: ARRAY
14643: PUSH
14644: LD_INT 2
14646: ARRAY
14647: PPUSH
14648: CALL_OW 120
// end ; end ;
14652: GO 14438
14654: POP
14655: POP
// for i := 1 to personel do
14656: LD_ADDR_VAR 0 13
14660: PUSH
14661: DOUBLE
14662: LD_INT 1
14664: DEC
14665: ST_TO_ADDR
14666: LD_VAR 0 18
14670: PUSH
14671: FOR_TO
14672: IFFALSE 14713
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14674: LD_ADDR_VAR 0 21
14678: PUSH
14679: LD_VAR 0 21
14683: PUSH
14684: LD_VAR 0 18
14688: PUSH
14689: LD_VAR 0 13
14693: ARRAY
14694: PPUSH
14695: LD_INT 25
14697: PUSH
14698: LD_INT 3
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 72
14709: ADD
14710: ST_TO_ADDR
14711: GO 14671
14713: POP
14714: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14715: LD_VAR 0 21
14719: PUSH
14720: LD_VAR 0 4
14724: PPUSH
14725: LD_INT 22
14727: PUSH
14728: LD_VAR 0 1
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 21
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 3
14749: PUSH
14750: LD_INT 24
14752: PUSH
14753: LD_INT 1000
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 70
14773: AND
14774: IFFALSE 15378
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14776: LD_ADDR_VAR 0 35
14780: PUSH
14781: LD_VAR 0 4
14785: PPUSH
14786: LD_INT 22
14788: PUSH
14789: LD_VAR 0 1
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 21
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: LD_INT 24
14813: PUSH
14814: LD_INT 1000
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: PPUSH
14830: CALL_OW 70
14834: PUSH
14835: FOR_IN
14836: IFFALSE 15374
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14838: LD_VAR 0 35
14842: PPUSH
14843: LD_VAR 0 6
14847: PPUSH
14848: CALL_OW 299
14852: PUSH
14853: LD_INT 5
14855: LESS
14856: IFFALSE 15151
// begin for i := 1 to vehicles do
14858: LD_ADDR_VAR 0 13
14862: PUSH
14863: DOUBLE
14864: LD_INT 1
14866: DEC
14867: ST_TO_ADDR
14868: LD_VAR 0 24
14872: PUSH
14873: FOR_TO
14874: IFFALSE 14943
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14876: LD_VAR 0 24
14880: PUSH
14881: LD_VAR 0 13
14885: ARRAY
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PUSH
14891: LD_VAR 0 35
14895: EQUAL
14896: IFFALSE 14917
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14898: LD_VAR 0 24
14902: PUSH
14903: LD_VAR 0 13
14907: ARRAY
14908: PUSH
14909: LD_INT 2
14911: ARRAY
14912: PPUSH
14913: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14917: LD_VAR 0 24
14921: PUSH
14922: LD_VAR 0 13
14926: ARRAY
14927: PUSH
14928: LD_INT 2
14930: ARRAY
14931: PPUSH
14932: LD_VAR 0 35
14936: PPUSH
14937: CALL_OW 189
// end ;
14941: GO 14873
14943: POP
14944: POP
// for i := 1 to personel do
14945: LD_ADDR_VAR 0 13
14949: PUSH
14950: DOUBLE
14951: LD_INT 1
14953: DEC
14954: ST_TO_ADDR
14955: LD_VAR 0 18
14959: PUSH
14960: FOR_TO
14961: IFFALSE 15149
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14963: LD_VAR 0 18
14967: PUSH
14968: LD_VAR 0 13
14972: ARRAY
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: CALL_OW 257
14982: PUSH
14983: LD_INT 3
14985: EQUAL
14986: PUSH
14987: LD_VAR 0 18
14991: PUSH
14992: LD_VAR 0 13
14996: ARRAY
14997: PUSH
14998: LD_INT 3
15000: ARRAY
15001: PUSH
15002: LD_INT 1
15004: EQUAL
15005: AND
15006: IFFALSE 15147
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15008: LD_VAR 0 18
15012: PUSH
15013: LD_VAR 0 13
15017: ARRAY
15018: PUSH
15019: LD_INT 1
15021: ARRAY
15022: PPUSH
15023: CALL_OW 437
15027: IFFALSE 15083
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15029: LD_VAR 0 18
15033: PUSH
15034: LD_VAR 0 13
15038: ARRAY
15039: PUSH
15040: LD_INT 1
15042: ARRAY
15043: PPUSH
15044: CALL_OW 437
15048: PUSH
15049: LD_INT 1
15051: ARRAY
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PUSH
15057: LD_STRING e
15059: EQUAL
15060: IFFALSE 15083
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15062: LD_VAR 0 18
15066: PUSH
15067: LD_VAR 0 13
15071: ARRAY
15072: PUSH
15073: LD_INT 1
15075: ARRAY
15076: PPUSH
15077: EMPTY
15078: PPUSH
15079: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15083: LD_VAR 0 18
15087: PUSH
15088: LD_VAR 0 13
15092: ARRAY
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: PPUSH
15098: CALL_OW 310
15102: IFFALSE 15123
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15104: LD_VAR 0 18
15108: PUSH
15109: LD_VAR 0 13
15113: ARRAY
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15123: LD_VAR 0 18
15127: PUSH
15128: LD_VAR 0 13
15132: ARRAY
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PPUSH
15138: LD_VAR 0 35
15142: PPUSH
15143: CALL_OW 189
// end ;
15147: GO 14960
15149: POP
15150: POP
// end ; if GetLives ( damageUnit ) < 250 then
15151: LD_VAR 0 35
15155: PPUSH
15156: CALL_OW 256
15160: PUSH
15161: LD_INT 250
15163: LESS
15164: IFFALSE 15372
// for i := 1 to personel do
15166: LD_ADDR_VAR 0 13
15170: PUSH
15171: DOUBLE
15172: LD_INT 1
15174: DEC
15175: ST_TO_ADDR
15176: LD_VAR 0 18
15180: PUSH
15181: FOR_TO
15182: IFFALSE 15370
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15184: LD_VAR 0 18
15188: PUSH
15189: LD_VAR 0 13
15193: ARRAY
15194: PUSH
15195: LD_INT 1
15197: ARRAY
15198: PPUSH
15199: CALL_OW 257
15203: PUSH
15204: LD_INT 3
15206: EQUAL
15207: PUSH
15208: LD_VAR 0 18
15212: PUSH
15213: LD_VAR 0 13
15217: ARRAY
15218: PUSH
15219: LD_INT 3
15221: ARRAY
15222: PUSH
15223: LD_INT 1
15225: EQUAL
15226: AND
15227: IFFALSE 15368
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15229: LD_VAR 0 18
15233: PUSH
15234: LD_VAR 0 13
15238: ARRAY
15239: PUSH
15240: LD_INT 1
15242: ARRAY
15243: PPUSH
15244: CALL_OW 437
15248: IFFALSE 15304
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15250: LD_VAR 0 18
15254: PUSH
15255: LD_VAR 0 13
15259: ARRAY
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: CALL_OW 437
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PUSH
15274: LD_INT 1
15276: ARRAY
15277: PUSH
15278: LD_STRING e
15280: EQUAL
15281: IFFALSE 15304
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15283: LD_VAR 0 18
15287: PUSH
15288: LD_VAR 0 13
15292: ARRAY
15293: PUSH
15294: LD_INT 1
15296: ARRAY
15297: PPUSH
15298: EMPTY
15299: PPUSH
15300: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15304: LD_VAR 0 18
15308: PUSH
15309: LD_VAR 0 13
15313: ARRAY
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: CALL_OW 310
15323: IFFALSE 15344
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15325: LD_VAR 0 18
15329: PUSH
15330: LD_VAR 0 13
15334: ARRAY
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PPUSH
15340: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15344: LD_VAR 0 18
15348: PUSH
15349: LD_VAR 0 13
15353: ARRAY
15354: PUSH
15355: LD_INT 1
15357: ARRAY
15358: PPUSH
15359: LD_VAR 0 35
15363: PPUSH
15364: CALL_OW 189
// end ;
15368: GO 15181
15370: POP
15371: POP
// end ;
15372: GO 14835
15374: POP
15375: POP
// end else
15376: GO 15583
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15378: LD_VAR 0 21
15382: PUSH
15383: LD_VAR 0 21
15387: PPUSH
15388: LD_INT 56
15390: PUSH
15391: EMPTY
15392: LIST
15393: PPUSH
15394: CALL_OW 72
15398: AND
15399: PUSH
15400: LD_VAR 0 30
15404: AND
15405: IFFALSE 15583
// for i := 1 to personel do
15407: LD_ADDR_VAR 0 13
15411: PUSH
15412: DOUBLE
15413: LD_INT 1
15415: DEC
15416: ST_TO_ADDR
15417: LD_VAR 0 18
15421: PUSH
15422: FOR_TO
15423: IFFALSE 15581
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15425: LD_VAR 0 18
15429: PUSH
15430: LD_VAR 0 13
15434: ARRAY
15435: PUSH
15436: LD_INT 1
15438: ARRAY
15439: PPUSH
15440: CALL_OW 257
15444: PUSH
15445: LD_INT 3
15447: EQUAL
15448: PUSH
15449: LD_VAR 0 18
15453: PUSH
15454: LD_VAR 0 13
15458: ARRAY
15459: PUSH
15460: LD_INT 3
15462: ARRAY
15463: PUSH
15464: LD_INT 1
15466: EQUAL
15467: AND
15468: IFFALSE 15579
// begin if not personel [ i ] [ 2 ] then
15470: LD_VAR 0 18
15474: PUSH
15475: LD_VAR 0 13
15479: ARRAY
15480: PUSH
15481: LD_INT 2
15483: ARRAY
15484: NOT
15485: IFFALSE 15545
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15487: LD_ADDR_VAR 0 18
15491: PUSH
15492: LD_VAR 0 18
15496: PPUSH
15497: LD_VAR 0 13
15501: PUSH
15502: LD_VAR 0 18
15506: PUSH
15507: LD_VAR 0 13
15511: ARRAY
15512: PUSH
15513: LD_INT 1
15515: MINUS
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PPUSH
15521: LD_VAR 0 30
15525: PUSH
15526: LD_INT 1
15528: PPUSH
15529: LD_VAR 0 30
15533: PPUSH
15534: CALL_OW 12
15538: ARRAY
15539: PPUSH
15540: CALL 35939 0 3
15544: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15545: LD_VAR 0 18
15549: PUSH
15550: LD_VAR 0 13
15554: ARRAY
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: LD_VAR 0 18
15564: PUSH
15565: LD_VAR 0 13
15569: ARRAY
15570: PUSH
15571: LD_INT 2
15573: ARRAY
15574: PPUSH
15575: CALL_OW 120
// end ;
15579: GO 15422
15581: POP
15582: POP
// for i := 1 to personel do
15583: LD_ADDR_VAR 0 13
15587: PUSH
15588: DOUBLE
15589: LD_INT 1
15591: DEC
15592: ST_TO_ADDR
15593: LD_VAR 0 18
15597: PUSH
15598: FOR_TO
15599: IFFALSE 15640
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15601: LD_ADDR_VAR 0 22
15605: PUSH
15606: LD_VAR 0 22
15610: PUSH
15611: LD_VAR 0 18
15615: PUSH
15616: LD_VAR 0 13
15620: ARRAY
15621: PPUSH
15622: LD_INT 25
15624: PUSH
15625: LD_INT 4
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 72
15636: ADD
15637: ST_TO_ADDR
15638: GO 15598
15640: POP
15641: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15642: LD_VAR 0 22
15646: PUSH
15647: LD_VAR 0 4
15651: PPUSH
15652: LD_INT 22
15654: PUSH
15655: LD_VAR 0 1
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: PUSH
15664: LD_INT 21
15666: PUSH
15667: LD_INT 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: LD_INT 3
15676: PUSH
15677: LD_INT 24
15679: PUSH
15680: LD_INT 1000
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: LIST
15695: PPUSH
15696: CALL_OW 70
15700: AND
15701: IFFALSE 16218
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15703: LD_ADDR_VAR 0 35
15707: PUSH
15708: LD_VAR 0 4
15712: PPUSH
15713: LD_INT 22
15715: PUSH
15716: LD_VAR 0 1
15720: PUSH
15721: EMPTY
15722: LIST
15723: LIST
15724: PUSH
15725: LD_INT 21
15727: PUSH
15728: LD_INT 1
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 3
15737: PUSH
15738: LD_INT 24
15740: PUSH
15741: LD_INT 1000
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: PPUSH
15757: CALL_OW 70
15761: PUSH
15762: FOR_IN
15763: IFFALSE 16214
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15765: LD_VAR 0 35
15769: PPUSH
15770: LD_VAR 0 5
15774: PPUSH
15775: CALL_OW 299
15779: PUSH
15780: LD_INT 5
15782: LESS
15783: IFFALSE 15991
// for i := 1 to personel do
15785: LD_ADDR_VAR 0 13
15789: PUSH
15790: DOUBLE
15791: LD_INT 1
15793: DEC
15794: ST_TO_ADDR
15795: LD_VAR 0 18
15799: PUSH
15800: FOR_TO
15801: IFFALSE 15989
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15803: LD_VAR 0 18
15807: PUSH
15808: LD_VAR 0 13
15812: ARRAY
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: CALL_OW 257
15822: PUSH
15823: LD_INT 4
15825: EQUAL
15826: PUSH
15827: LD_VAR 0 18
15831: PUSH
15832: LD_VAR 0 13
15836: ARRAY
15837: PUSH
15838: LD_INT 3
15840: ARRAY
15841: PUSH
15842: LD_INT 1
15844: EQUAL
15845: AND
15846: IFFALSE 15987
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15848: LD_VAR 0 18
15852: PUSH
15853: LD_VAR 0 13
15857: ARRAY
15858: PUSH
15859: LD_INT 1
15861: ARRAY
15862: PPUSH
15863: CALL_OW 437
15867: IFFALSE 15923
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15869: LD_VAR 0 18
15873: PUSH
15874: LD_VAR 0 13
15878: ARRAY
15879: PUSH
15880: LD_INT 1
15882: ARRAY
15883: PPUSH
15884: CALL_OW 437
15888: PUSH
15889: LD_INT 1
15891: ARRAY
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PUSH
15897: LD_STRING e
15899: EQUAL
15900: IFFALSE 15923
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15902: LD_VAR 0 18
15906: PUSH
15907: LD_VAR 0 13
15911: ARRAY
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: PPUSH
15917: EMPTY
15918: PPUSH
15919: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15923: LD_VAR 0 18
15927: PUSH
15928: LD_VAR 0 13
15932: ARRAY
15933: PUSH
15934: LD_INT 1
15936: ARRAY
15937: PPUSH
15938: CALL_OW 310
15942: IFFALSE 15963
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15944: LD_VAR 0 18
15948: PUSH
15949: LD_VAR 0 13
15953: ARRAY
15954: PUSH
15955: LD_INT 1
15957: ARRAY
15958: PPUSH
15959: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15963: LD_VAR 0 18
15967: PUSH
15968: LD_VAR 0 13
15972: ARRAY
15973: PUSH
15974: LD_INT 1
15976: ARRAY
15977: PPUSH
15978: LD_VAR 0 35
15982: PPUSH
15983: CALL_OW 188
// end ;
15987: GO 15800
15989: POP
15990: POP
// if GetLives ( damageUnit ) < 250 then
15991: LD_VAR 0 35
15995: PPUSH
15996: CALL_OW 256
16000: PUSH
16001: LD_INT 250
16003: LESS
16004: IFFALSE 16212
// for i := 1 to personel do
16006: LD_ADDR_VAR 0 13
16010: PUSH
16011: DOUBLE
16012: LD_INT 1
16014: DEC
16015: ST_TO_ADDR
16016: LD_VAR 0 18
16020: PUSH
16021: FOR_TO
16022: IFFALSE 16210
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16024: LD_VAR 0 18
16028: PUSH
16029: LD_VAR 0 13
16033: ARRAY
16034: PUSH
16035: LD_INT 1
16037: ARRAY
16038: PPUSH
16039: CALL_OW 257
16043: PUSH
16044: LD_INT 4
16046: EQUAL
16047: PUSH
16048: LD_VAR 0 18
16052: PUSH
16053: LD_VAR 0 13
16057: ARRAY
16058: PUSH
16059: LD_INT 3
16061: ARRAY
16062: PUSH
16063: LD_INT 1
16065: EQUAL
16066: AND
16067: IFFALSE 16208
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16069: LD_VAR 0 18
16073: PUSH
16074: LD_VAR 0 13
16078: ARRAY
16079: PUSH
16080: LD_INT 1
16082: ARRAY
16083: PPUSH
16084: CALL_OW 437
16088: IFFALSE 16144
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16090: LD_VAR 0 18
16094: PUSH
16095: LD_VAR 0 13
16099: ARRAY
16100: PUSH
16101: LD_INT 1
16103: ARRAY
16104: PPUSH
16105: CALL_OW 437
16109: PUSH
16110: LD_INT 1
16112: ARRAY
16113: PUSH
16114: LD_INT 1
16116: ARRAY
16117: PUSH
16118: LD_STRING e
16120: EQUAL
16121: IFFALSE 16144
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16123: LD_VAR 0 18
16127: PUSH
16128: LD_VAR 0 13
16132: ARRAY
16133: PUSH
16134: LD_INT 1
16136: ARRAY
16137: PPUSH
16138: EMPTY
16139: PPUSH
16140: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16144: LD_VAR 0 18
16148: PUSH
16149: LD_VAR 0 13
16153: ARRAY
16154: PUSH
16155: LD_INT 1
16157: ARRAY
16158: PPUSH
16159: CALL_OW 310
16163: IFFALSE 16184
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16165: LD_VAR 0 18
16169: PUSH
16170: LD_VAR 0 13
16174: ARRAY
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16184: LD_VAR 0 18
16188: PUSH
16189: LD_VAR 0 13
16193: ARRAY
16194: PUSH
16195: LD_INT 1
16197: ARRAY
16198: PPUSH
16199: LD_VAR 0 35
16203: PPUSH
16204: CALL_OW 188
// end ;
16208: GO 16021
16210: POP
16211: POP
// end ;
16212: GO 15762
16214: POP
16215: POP
// end else
16216: GO 16423
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16218: LD_VAR 0 22
16222: PUSH
16223: LD_VAR 0 22
16227: PPUSH
16228: LD_INT 56
16230: PUSH
16231: EMPTY
16232: LIST
16233: PPUSH
16234: CALL_OW 72
16238: AND
16239: PUSH
16240: LD_VAR 0 31
16244: AND
16245: IFFALSE 16423
// for i := 1 to personel do
16247: LD_ADDR_VAR 0 13
16251: PUSH
16252: DOUBLE
16253: LD_INT 1
16255: DEC
16256: ST_TO_ADDR
16257: LD_VAR 0 18
16261: PUSH
16262: FOR_TO
16263: IFFALSE 16421
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16265: LD_VAR 0 18
16269: PUSH
16270: LD_VAR 0 13
16274: ARRAY
16275: PUSH
16276: LD_INT 1
16278: ARRAY
16279: PPUSH
16280: CALL_OW 257
16284: PUSH
16285: LD_INT 4
16287: EQUAL
16288: PUSH
16289: LD_VAR 0 18
16293: PUSH
16294: LD_VAR 0 13
16298: ARRAY
16299: PUSH
16300: LD_INT 3
16302: ARRAY
16303: PUSH
16304: LD_INT 1
16306: EQUAL
16307: AND
16308: IFFALSE 16419
// begin if not personel [ i ] [ 2 ] then
16310: LD_VAR 0 18
16314: PUSH
16315: LD_VAR 0 13
16319: ARRAY
16320: PUSH
16321: LD_INT 2
16323: ARRAY
16324: NOT
16325: IFFALSE 16385
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16327: LD_ADDR_VAR 0 18
16331: PUSH
16332: LD_VAR 0 18
16336: PPUSH
16337: LD_VAR 0 13
16341: PUSH
16342: LD_VAR 0 18
16346: PUSH
16347: LD_VAR 0 13
16351: ARRAY
16352: PUSH
16353: LD_INT 1
16355: MINUS
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PPUSH
16361: LD_VAR 0 31
16365: PUSH
16366: LD_INT 1
16368: PPUSH
16369: LD_VAR 0 31
16373: PPUSH
16374: CALL_OW 12
16378: ARRAY
16379: PPUSH
16380: CALL 35939 0 3
16384: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16385: LD_VAR 0 18
16389: PUSH
16390: LD_VAR 0 13
16394: ARRAY
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: LD_VAR 0 18
16404: PUSH
16405: LD_VAR 0 13
16409: ARRAY
16410: PUSH
16411: LD_INT 2
16413: ARRAY
16414: PPUSH
16415: CALL_OW 120
// end ;
16419: GO 16262
16421: POP
16422: POP
// wait ( 0 0$01 ) ;
16423: LD_INT 35
16425: PPUSH
16426: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16430: LD_VAR 0 24
16434: PUSH
16435: LD_VAR 0 8
16439: LESS
16440: PUSH
16441: LD_VAR 0 30
16445: AND
16446: IFFALSE 16696
// begin tmp = vehiclesAmount - vehicles ;
16448: LD_ADDR_VAR 0 15
16452: PUSH
16453: LD_VAR 0 8
16457: PUSH
16458: LD_VAR 0 24
16462: MINUS
16463: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16464: LD_ADDR_VAR 0 27
16468: PUSH
16469: LD_VAR 0 1
16473: PPUSH
16474: LD_VAR 0 2
16478: PPUSH
16479: CALL 7743 0 2
16483: ST_TO_ADDR
// for i := 1 to tmp do
16484: LD_ADDR_VAR 0 13
16488: PUSH
16489: DOUBLE
16490: LD_INT 1
16492: DEC
16493: ST_TO_ADDR
16494: LD_VAR 0 15
16498: PUSH
16499: FOR_TO
16500: IFFALSE 16692
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16502: LD_ADDR_VAR 0 15
16506: PUSH
16507: LD_VAR 0 27
16511: PUSH
16512: LD_INT 1
16514: PPUSH
16515: LD_VAR 0 27
16519: PPUSH
16520: CALL_OW 12
16524: ARRAY
16525: ST_TO_ADDR
// if tmp then
16526: LD_VAR 0 15
16530: IFFALSE 16690
// begin if tmp in [ 34 , 14 , 71 ] then
16532: LD_VAR 0 15
16536: PUSH
16537: LD_INT 34
16539: PUSH
16540: LD_INT 14
16542: PUSH
16543: LD_INT 71
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: IN
16551: IFFALSE 16589
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16553: LD_ADDR_VAR 0 28
16557: PUSH
16558: LD_INT 4
16560: PUSH
16561: EMPTY
16562: LIST
16563: PUSH
16564: LD_INT 14
16566: PUSH
16567: EMPTY
16568: LIST
16569: PUSH
16570: LD_INT 24
16572: PUSH
16573: EMPTY
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: LD_VAR 0 2
16585: ARRAY
16586: ST_TO_ADDR
16587: GO 16647
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16589: LD_ADDR_VAR 0 28
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: LD_INT 3
16599: PUSH
16600: LD_INT 4
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 13
16610: PUSH
16611: LD_INT 14
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 23
16623: PUSH
16624: LD_INT 24
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_VAR 0 2
16645: ARRAY
16646: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16647: LD_VAR 0 30
16651: PUSH
16652: LD_INT 1
16654: ARRAY
16655: PPUSH
16656: LD_VAR 0 28
16660: PUSH
16661: LD_INT 1
16663: PPUSH
16664: LD_VAR 0 28
16668: PPUSH
16669: CALL_OW 12
16673: ARRAY
16674: PPUSH
16675: LD_INT 1
16677: PPUSH
16678: LD_INT 1
16680: PPUSH
16681: LD_VAR 0 15
16685: PPUSH
16686: CALL_OW 185
// end ; end ;
16690: GO 16499
16692: POP
16693: POP
// end else
16694: GO 16709
// ComCancel ( factory [ 1 ] ) ;
16696: LD_VAR 0 30
16700: PUSH
16701: LD_INT 1
16703: ARRAY
16704: PPUSH
16705: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16709: LD_ADDR_VAR 0 23
16713: PUSH
16714: LD_VAR 0 4
16718: PPUSH
16719: LD_INT 22
16721: PUSH
16722: LD_VAR 0 1
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: LD_INT 21
16733: PUSH
16734: LD_INT 2
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PPUSH
16745: CALL_OW 70
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16921
// begin vehicleInList = false ;
16753: LD_ADDR_VAR 0 25
16757: PUSH
16758: LD_INT 0
16760: ST_TO_ADDR
// for i := 1 to vehicles do
16761: LD_ADDR_VAR 0 13
16765: PUSH
16766: DOUBLE
16767: LD_INT 1
16769: DEC
16770: ST_TO_ADDR
16771: LD_VAR 0 24
16775: PUSH
16776: FOR_TO
16777: IFFALSE 16807
// begin if vehicle in vehicles [ i ] then
16779: LD_VAR 0 23
16783: PUSH
16784: LD_VAR 0 24
16788: PUSH
16789: LD_VAR 0 13
16793: ARRAY
16794: IN
16795: IFFALSE 16805
// vehicleInList = true ;
16797: LD_ADDR_VAR 0 25
16801: PUSH
16802: LD_INT 1
16804: ST_TO_ADDR
// end ;
16805: GO 16776
16807: POP
16808: POP
// if not vehicleInList then
16809: LD_VAR 0 25
16813: NOT
16814: IFFALSE 16919
// if vehicles < vehiclesToAttackAmount then
16816: LD_VAR 0 24
16820: PUSH
16821: LD_VAR 0 10
16825: LESS
16826: IFFALSE 16878
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16828: LD_ADDR_VAR 0 24
16832: PUSH
16833: LD_VAR 0 24
16837: PUSH
16838: LD_VAR 0 23
16842: PUSH
16843: LD_VAR 0 23
16847: PPUSH
16848: CALL_OW 313
16852: PUSH
16853: LD_INT 1
16855: ARRAY
16856: PUSH
16857: LD_VAR 0 23
16861: PPUSH
16862: CALL_OW 302
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: ADD
16875: ST_TO_ADDR
16876: GO 16919
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16878: LD_ADDR_VAR 0 24
16882: PUSH
16883: LD_VAR 0 24
16887: PUSH
16888: LD_VAR 0 23
16892: PUSH
16893: LD_VAR 0 23
16897: PPUSH
16898: CALL_OW 313
16902: PUSH
16903: LD_INT 1
16905: ARRAY
16906: PUSH
16907: LD_INT 2
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: ADD
16918: ST_TO_ADDR
// end ;
16919: GO 16750
16921: POP
16922: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16923: LD_ADDR_VAR 0 37
16927: PUSH
16928: LD_VAR 0 7
16932: PPUSH
16933: LD_INT 81
16935: PUSH
16936: LD_VAR 0 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 70
16949: PUSH
16950: FOR_IN
16951: IFFALSE 17130
// begin defenceUnits = [ ] ;
16953: LD_ADDR_VAR 0 26
16957: PUSH
16958: EMPTY
16959: ST_TO_ADDR
// for i := 1 to personel do
16960: LD_ADDR_VAR 0 13
16964: PUSH
16965: DOUBLE
16966: LD_INT 1
16968: DEC
16969: ST_TO_ADDR
16970: LD_VAR 0 18
16974: PUSH
16975: FOR_TO
16976: IFFALSE 17026
// if personel [ i ] [ 3 ] = 2 then
16978: LD_VAR 0 18
16982: PUSH
16983: LD_VAR 0 13
16987: ARRAY
16988: PUSH
16989: LD_INT 3
16991: ARRAY
16992: PUSH
16993: LD_INT 2
16995: EQUAL
16996: IFFALSE 17024
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16998: LD_ADDR_VAR 0 26
17002: PUSH
17003: LD_VAR 0 26
17007: PUSH
17008: LD_VAR 0 18
17012: PUSH
17013: LD_VAR 0 13
17017: ARRAY
17018: PUSH
17019: LD_INT 1
17021: ARRAY
17022: ADD
17023: ST_TO_ADDR
17024: GO 16975
17026: POP
17027: POP
// for i := 1 to vehicles do
17028: LD_ADDR_VAR 0 13
17032: PUSH
17033: DOUBLE
17034: LD_INT 1
17036: DEC
17037: ST_TO_ADDR
17038: LD_VAR 0 24
17042: PUSH
17043: FOR_TO
17044: IFFALSE 17094
// if vehicles [ i ] [ 3 ] = 2 then
17046: LD_VAR 0 24
17050: PUSH
17051: LD_VAR 0 13
17055: ARRAY
17056: PUSH
17057: LD_INT 3
17059: ARRAY
17060: PUSH
17061: LD_INT 2
17063: EQUAL
17064: IFFALSE 17092
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17066: LD_ADDR_VAR 0 26
17070: PUSH
17071: LD_VAR 0 26
17075: PUSH
17076: LD_VAR 0 24
17080: PUSH
17081: LD_VAR 0 13
17085: ARRAY
17086: PUSH
17087: LD_INT 1
17089: ARRAY
17090: ADD
17091: ST_TO_ADDR
17092: GO 17043
17094: POP
17095: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17096: LD_VAR 0 26
17100: PPUSH
17101: LD_INT 3
17103: PUSH
17104: LD_INT 60
17106: PUSH
17107: EMPTY
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 72
17118: PPUSH
17119: LD_VAR 0 37
17123: PPUSH
17124: CALL_OW 175
// end ;
17128: GO 16950
17130: POP
17131: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17132: LD_ADDR_VAR 0 38
17136: PUSH
17137: LD_INT 22
17139: PUSH
17140: LD_VAR 0 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: LD_INT 2
17151: PUSH
17152: LD_INT 30
17154: PUSH
17155: LD_INT 31
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 30
17164: PUSH
17165: LD_INT 32
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 30
17174: PUSH
17175: LD_INT 33
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 4
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 30
17194: PUSH
17195: LD_INT 5
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17219: LD_ADDR_VAR 0 39
17223: PUSH
17224: LD_INT 81
17226: PUSH
17227: LD_VAR 0 1
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 21
17238: PUSH
17239: LD_INT 3
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 58
17248: PUSH
17249: EMPTY
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 69
17261: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17262: LD_VAR 0 38
17266: PUSH
17267: LD_VAR 0 39
17271: AND
17272: IFFALSE 17342
// for i in attackBuildings do
17274: LD_ADDR_VAR 0 13
17278: PUSH
17279: LD_VAR 0 38
17283: PUSH
17284: FOR_IN
17285: IFFALSE 17340
// for j in enemyBuildings do
17287: LD_ADDR_VAR 0 14
17291: PUSH
17292: LD_VAR 0 39
17296: PUSH
17297: FOR_IN
17298: IFFALSE 17336
// if GetDistUnits ( i , j ) < 12 then
17300: LD_VAR 0 13
17304: PPUSH
17305: LD_VAR 0 14
17309: PPUSH
17310: CALL_OW 296
17314: PUSH
17315: LD_INT 12
17317: LESS
17318: IFFALSE 17334
// ComAttackUnit ( i , j ) ;
17320: LD_VAR 0 13
17324: PPUSH
17325: LD_VAR 0 14
17329: PPUSH
17330: CALL_OW 115
17334: GO 17297
17336: POP
17337: POP
17338: GO 17284
17340: POP
17341: POP
// until not personel or not enableOmicronAI ;
17342: LD_VAR 0 18
17346: NOT
17347: PUSH
17348: LD_EXP 29
17352: NOT
17353: OR
17354: IFFALSE 12358
// end ;
17356: LD_VAR 0 12
17360: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17361: LD_INT 0
17363: PPUSH
17364: PPUSH
17365: PPUSH
// weapons = [ ru_gun ] ;
17366: LD_ADDR_VAR 0 3
17370: PUSH
17371: LD_INT 44
17373: PUSH
17374: EMPTY
17375: LIST
17376: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17377: LD_ADDR_VAR 0 2
17381: PUSH
17382: LD_EXP 71
17386: PUSH
17387: FOR_IN
17388: IFFALSE 17420
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17390: LD_VAR 0 2
17394: PPUSH
17395: LD_VAR 0 3
17399: PUSH
17400: LD_INT 1
17402: PPUSH
17403: LD_VAR 0 3
17407: PPUSH
17408: CALL_OW 12
17412: ARRAY
17413: PPUSH
17414: CALL_OW 208
17418: GO 17387
17420: POP
17421: POP
// end ;
17422: LD_VAR 0 1
17426: RET
// export function KirovProduceVehicles ( factory ) ; begin
17427: LD_INT 0
17429: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 21
17437: PPUSH
17438: LD_INT 1
17440: PPUSH
17441: LD_INT 1
17443: PPUSH
17444: LD_INT 51
17446: PPUSH
17447: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_INT 21
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: LD_INT 1
17464: PPUSH
17465: LD_INT 51
17467: PPUSH
17468: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_INT 21
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: LD_INT 51
17488: PPUSH
17489: CALL_OW 185
// case Difficulty of 1 :
17493: LD_OWVAR 67
17497: PUSH
17498: LD_INT 1
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17629
17506: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17507: LD_VAR 0 1
17511: PPUSH
17512: LD_INT 21
17514: PUSH
17515: LD_INT 23
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: PPUSH
17525: LD_INT 2
17527: PPUSH
17528: CALL_OW 12
17532: ARRAY
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: LD_INT 1
17539: PPUSH
17540: LD_INT 43
17542: PPUSH
17543: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17547: LD_VAR 0 1
17551: PPUSH
17552: LD_INT 21
17554: PUSH
17555: LD_INT 23
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PPUSH
17565: LD_INT 2
17567: PPUSH
17568: CALL_OW 12
17572: ARRAY
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: LD_INT 43
17582: PPUSH
17583: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17587: LD_VAR 0 1
17591: PPUSH
17592: LD_INT 21
17594: PUSH
17595: LD_INT 23
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: PPUSH
17605: LD_INT 2
17607: PPUSH
17608: CALL_OW 12
17612: ARRAY
17613: PPUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_INT 1
17619: PPUSH
17620: LD_INT 44
17622: PPUSH
17623: CALL_OW 185
// end ; 2 :
17627: GO 17892
17629: LD_INT 2
17631: DOUBLE
17632: EQUAL
17633: IFTRUE 17637
17635: GO 17760
17637: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17638: LD_VAR 0 1
17642: PPUSH
17643: LD_INT 21
17645: PUSH
17646: LD_INT 23
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: PPUSH
17656: LD_INT 2
17658: PPUSH
17659: CALL_OW 12
17663: ARRAY
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_INT 42
17673: PPUSH
17674: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17678: LD_VAR 0 1
17682: PPUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 23
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: PPUSH
17696: LD_INT 2
17698: PPUSH
17699: CALL_OW 12
17703: ARRAY
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: LD_INT 1
17710: PPUSH
17711: LD_INT 43
17713: PPUSH
17714: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17718: LD_VAR 0 1
17722: PPUSH
17723: LD_INT 21
17725: PUSH
17726: LD_INT 23
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 1
17735: PPUSH
17736: LD_INT 2
17738: PPUSH
17739: CALL_OW 12
17743: ARRAY
17744: PPUSH
17745: LD_INT 1
17747: PPUSH
17748: LD_INT 1
17750: PPUSH
17751: LD_INT 44
17753: PPUSH
17754: CALL_OW 185
// end ; 3 :
17758: GO 17892
17760: LD_INT 3
17762: DOUBLE
17763: EQUAL
17764: IFTRUE 17768
17766: GO 17891
17768: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17769: LD_VAR 0 1
17773: PPUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 23
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 1
17786: PPUSH
17787: LD_INT 2
17789: PPUSH
17790: CALL_OW 12
17794: ARRAY
17795: PPUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_INT 1
17801: PPUSH
17802: LD_INT 42
17804: PPUSH
17805: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_INT 21
17816: PUSH
17817: LD_INT 23
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: PPUSH
17827: LD_INT 2
17829: PPUSH
17830: CALL_OW 12
17834: ARRAY
17835: PPUSH
17836: LD_INT 1
17838: PPUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 42
17844: PPUSH
17845: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17849: LD_VAR 0 1
17853: PPUSH
17854: LD_INT 21
17856: PUSH
17857: LD_INT 23
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 1
17866: PPUSH
17867: LD_INT 2
17869: PPUSH
17870: CALL_OW 12
17874: ARRAY
17875: PPUSH
17876: LD_INT 1
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: LD_INT 44
17884: PPUSH
17885: CALL_OW 185
// end ; end ;
17889: GO 17892
17891: POP
// end ;
17892: LD_VAR 0 2
17896: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17897: LD_INT 0
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
17905: PPUSH
// vehicles = [ ] ;
17906: LD_ADDR_VAR 0 3
17910: PUSH
17911: EMPTY
17912: ST_TO_ADDR
// cargoRefuel = [ ] ;
17913: LD_ADDR_VAR 0 7
17917: PUSH
17918: EMPTY
17919: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17920: LD_ADDR_VAR 0 4
17924: PUSH
17925: LD_EXP 75
17929: PUSH
17930: FOR_IN
17931: IFFALSE 17980
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_VAR 0 3
17942: PPUSH
17943: LD_INT 1
17945: PPUSH
17946: LD_VAR 0 4
17950: PUSH
17951: LD_VAR 0 4
17955: PPUSH
17956: CALL_OW 313
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PUSH
17965: LD_INT 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: PPUSH
17973: CALL_OW 2
17977: ST_TO_ADDR
17978: GO 17930
17980: POP
17981: POP
// repeat for i := 1 to vehicles do
17982: LD_ADDR_VAR 0 2
17986: PUSH
17987: DOUBLE
17988: LD_INT 1
17990: DEC
17991: ST_TO_ADDR
17992: LD_VAR 0 3
17996: PUSH
17997: FOR_TO
17998: IFFALSE 18036
// if vehicles [ i ] [ 3 ] = 1 then
18000: LD_VAR 0 3
18004: PUSH
18005: LD_VAR 0 2
18009: ARRAY
18010: PUSH
18011: LD_INT 3
18013: ARRAY
18014: PUSH
18015: LD_INT 1
18017: EQUAL
18018: IFFALSE 18034
// goodVehs = goodVehs + 1 ;
18020: LD_ADDR_VAR 0 5
18024: PUSH
18025: LD_VAR 0 5
18029: PUSH
18030: LD_INT 1
18032: PLUS
18033: ST_TO_ADDR
18034: GO 17997
18036: POP
18037: POP
// if goodVehs = vehicles then
18038: LD_VAR 0 5
18042: PUSH
18043: LD_VAR 0 3
18047: EQUAL
18048: IFFALSE 18271
// for i := 1 to vehicles do
18050: LD_ADDR_VAR 0 2
18054: PUSH
18055: DOUBLE
18056: LD_INT 1
18058: DEC
18059: ST_TO_ADDR
18060: LD_VAR 0 3
18064: PUSH
18065: FOR_TO
18066: IFFALSE 18269
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_VAR 0 2
18077: ARRAY
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: CALL_OW 314
18087: NOT
18088: IFFALSE 18267
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18090: LD_VAR 0 3
18094: PUSH
18095: LD_VAR 0 2
18099: ARRAY
18100: PUSH
18101: LD_INT 1
18103: ARRAY
18104: PPUSH
18105: CALL_OW 261
18109: PUSH
18110: LD_INT 50
18112: LESS
18113: IFFALSE 18242
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18115: LD_ADDR_VAR 0 6
18119: PUSH
18120: LD_INT 22
18122: PUSH
18123: LD_INT 6
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 21
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 34
18142: PUSH
18143: LD_INT 51
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 50
18152: PUSH
18153: EMPTY
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: PPUSH
18162: CALL_OW 69
18166: PUSH
18167: FOR_IN
18168: IFFALSE 18206
// if GetCargo ( cargo , mat_oil ) > 0 then
18170: LD_VAR 0 6
18174: PPUSH
18175: LD_INT 2
18177: PPUSH
18178: CALL_OW 289
18182: PUSH
18183: LD_INT 0
18185: GREATER
18186: IFFALSE 18204
// cargoRefuel = cargoRefuel ^ cargo ;
18188: LD_ADDR_VAR 0 7
18192: PUSH
18193: LD_VAR 0 7
18197: PUSH
18198: LD_VAR 0 6
18202: ADD
18203: ST_TO_ADDR
18204: GO 18167
18206: POP
18207: POP
// if cargo then
18208: LD_VAR 0 6
18212: IFFALSE 18242
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18214: LD_VAR 0 3
18218: PUSH
18219: LD_VAR 0 2
18223: ARRAY
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: LD_VAR 0 6
18233: PUSH
18234: LD_INT 1
18236: ARRAY
18237: PPUSH
18238: CALL 8357 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18242: LD_VAR 0 3
18246: PUSH
18247: LD_VAR 0 2
18251: ARRAY
18252: PUSH
18253: LD_INT 1
18255: ARRAY
18256: PPUSH
18257: LD_INT 26
18259: PPUSH
18260: LD_INT 35
18262: PPUSH
18263: CALL_OW 174
// end ; end ;
18267: GO 18065
18269: POP
18270: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18271: LD_VAR 0 3
18275: PUSH
18276: LD_VAR 0 2
18280: ARRAY
18281: PUSH
18282: LD_INT 1
18284: ARRAY
18285: PPUSH
18286: LD_INT 1
18288: PPUSH
18289: CALL 10109 0 2
18293: PUSH
18294: LD_VAR 0 3
18298: PUSH
18299: LD_VAR 0 2
18303: ARRAY
18304: PUSH
18305: LD_INT 2
18307: ARRAY
18308: PPUSH
18309: CALL_OW 310
18313: NOT
18314: AND
18315: IFFALSE 18351
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18317: LD_VAR 0 3
18321: PUSH
18322: LD_VAR 0 2
18326: ARRAY
18327: PUSH
18328: LD_INT 2
18330: ARRAY
18331: PPUSH
18332: LD_VAR 0 3
18336: PUSH
18337: LD_VAR 0 2
18341: ARRAY
18342: PUSH
18343: LD_INT 1
18345: ARRAY
18346: PPUSH
18347: CALL_OW 120
// goodVehs = 0 ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_INT 0
18358: ST_TO_ADDR
// for i := 1 to vehicles do
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: DOUBLE
18365: LD_INT 1
18367: DEC
18368: ST_TO_ADDR
18369: LD_VAR 0 3
18373: PUSH
18374: FOR_TO
18375: IFFALSE 18901
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18377: LD_VAR 0 3
18381: PUSH
18382: LD_VAR 0 2
18386: ARRAY
18387: PUSH
18388: LD_INT 1
18390: ARRAY
18391: PPUSH
18392: CALL_OW 256
18396: PUSH
18397: LD_INT 500
18399: LESS
18400: PUSH
18401: LD_VAR 0 3
18405: PUSH
18406: LD_VAR 0 2
18410: ARRAY
18411: PUSH
18412: LD_INT 1
18414: ARRAY
18415: PPUSH
18416: LD_INT 78
18418: PPUSH
18419: LD_INT 39
18421: PPUSH
18422: CALL_OW 297
18426: PUSH
18427: LD_INT 9
18429: LESS
18430: NOT
18431: AND
18432: IFFALSE 18497
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: LD_VAR 0 3
18443: PPUSH
18444: LD_VAR 0 2
18448: PUSH
18449: LD_VAR 0 3
18453: PUSH
18454: LD_VAR 0 2
18458: ARRAY
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PPUSH
18464: LD_INT 2
18466: PPUSH
18467: CALL 35939 0 3
18471: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18472: LD_VAR 0 3
18476: PUSH
18477: LD_VAR 0 2
18481: ARRAY
18482: PUSH
18483: LD_INT 1
18485: ARRAY
18486: PPUSH
18487: LD_INT 78
18489: PPUSH
18490: LD_INT 39
18492: PPUSH
18493: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18497: LD_VAR 0 3
18501: PUSH
18502: LD_VAR 0 2
18506: ARRAY
18507: PUSH
18508: LD_INT 1
18510: ARRAY
18511: PPUSH
18512: CALL_OW 256
18516: PUSH
18517: LD_INT 500
18519: LESS
18520: PUSH
18521: LD_VAR 0 3
18525: PUSH
18526: LD_VAR 0 2
18530: ARRAY
18531: PUSH
18532: LD_INT 1
18534: ARRAY
18535: PPUSH
18536: LD_INT 78
18538: PPUSH
18539: LD_INT 39
18541: PPUSH
18542: CALL_OW 297
18546: PUSH
18547: LD_INT 9
18549: LESS
18550: AND
18551: PUSH
18552: LD_VAR 0 3
18556: PUSH
18557: LD_VAR 0 2
18561: ARRAY
18562: PUSH
18563: LD_INT 1
18565: ARRAY
18566: PPUSH
18567: LD_INT 1
18569: PPUSH
18570: CALL 10109 0 2
18574: NOT
18575: AND
18576: IFFALSE 18631
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18578: LD_VAR 0 3
18582: PUSH
18583: LD_VAR 0 2
18587: ARRAY
18588: PUSH
18589: LD_INT 2
18591: ARRAY
18592: PPUSH
18593: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18597: LD_VAR 0 3
18601: PUSH
18602: LD_VAR 0 2
18606: ARRAY
18607: PUSH
18608: LD_INT 2
18610: ARRAY
18611: PPUSH
18612: LD_VAR 0 3
18616: PUSH
18617: LD_VAR 0 2
18621: ARRAY
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: PPUSH
18627: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18631: LD_VAR 0 3
18635: PUSH
18636: LD_VAR 0 2
18640: ARRAY
18641: PUSH
18642: LD_INT 1
18644: ARRAY
18645: PPUSH
18646: CALL_OW 256
18650: PUSH
18651: LD_INT 1000
18653: EQUAL
18654: PUSH
18655: LD_VAR 0 3
18659: PUSH
18660: LD_VAR 0 2
18664: ARRAY
18665: PUSH
18666: LD_INT 3
18668: ARRAY
18669: PUSH
18670: LD_INT 2
18672: EQUAL
18673: AND
18674: IFFALSE 18748
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18676: LD_ADDR_VAR 0 3
18680: PUSH
18681: LD_VAR 0 3
18685: PPUSH
18686: LD_VAR 0 2
18690: PUSH
18691: LD_VAR 0 3
18695: PUSH
18696: LD_VAR 0 2
18700: ARRAY
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL 35939 0 3
18713: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18714: LD_VAR 0 3
18718: PUSH
18719: LD_VAR 0 2
18723: ARRAY
18724: PUSH
18725: LD_INT 2
18727: ARRAY
18728: PPUSH
18729: LD_VAR 0 3
18733: PUSH
18734: LD_VAR 0 2
18738: ARRAY
18739: PUSH
18740: LD_INT 1
18742: ARRAY
18743: PPUSH
18744: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18748: LD_VAR 0 3
18752: PUSH
18753: LD_VAR 0 2
18757: ARRAY
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: CALL_OW 256
18767: PUSH
18768: LD_INT 250
18770: LESS
18771: IFFALSE 18798
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18773: LD_ADDR_VAR 0 3
18777: PUSH
18778: LD_VAR 0 3
18782: PUSH
18783: LD_VAR 0 3
18787: PUSH
18788: LD_VAR 0 2
18792: ARRAY
18793: PUSH
18794: EMPTY
18795: LIST
18796: DIFF
18797: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18798: LD_VAR 0 3
18802: PUSH
18803: LD_VAR 0 2
18807: ARRAY
18808: PUSH
18809: LD_INT 2
18811: ARRAY
18812: PPUSH
18813: CALL_OW 256
18817: PUSH
18818: LD_INT 250
18820: LESS
18821: PUSH
18822: LD_VAR 0 3
18826: PUSH
18827: LD_VAR 0 2
18831: ARRAY
18832: PUSH
18833: LD_INT 1
18835: ARRAY
18836: PPUSH
18837: CALL_OW 256
18841: PUSH
18842: LD_INT 250
18844: GREATER
18845: AND
18846: IFFALSE 18899
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18848: LD_ADDR_EXP 30
18852: PUSH
18853: LD_EXP 30
18857: PUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 2
18867: ARRAY
18868: PUSH
18869: LD_INT 1
18871: ARRAY
18872: ADD
18873: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18874: LD_ADDR_VAR 0 3
18878: PUSH
18879: LD_VAR 0 3
18883: PUSH
18884: LD_VAR 0 3
18888: PUSH
18889: LD_VAR 0 2
18893: ARRAY
18894: PUSH
18895: EMPTY
18896: LIST
18897: DIFF
18898: ST_TO_ADDR
// end ; end ;
18899: GO 18374
18901: POP
18902: POP
// wait ( 0 0$1 ) ;
18903: LD_INT 35
18905: PPUSH
18906: CALL_OW 67
// until omicronSurrender ;
18910: LD_EXP 23
18914: IFFALSE 17982
// end ;
18916: LD_VAR 0 1
18920: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18921: LD_INT 0
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
// inBase = false ;
18937: LD_ADDR_VAR 0 15
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18945: LD_ADDR_VAR 0 8
18949: PUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: LD_INT 22
18957: PUSH
18958: LD_INT 3
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: EMPTY
18966: LIST
18967: PPUSH
18968: CALL_OW 70
18972: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18973: LD_ADDR_VAR 0 9
18977: PUSH
18978: LD_VAR 0 2
18982: PPUSH
18983: CALL_OW 435
18987: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18988: LD_ADDR_VAR 0 12
18992: PUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: LD_INT 50
19000: PUSH
19001: EMPTY
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 21
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PPUSH
19047: CALL_OW 72
19051: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19052: LD_ADDR_VAR 0 13
19056: PUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: LD_INT 50
19064: PUSH
19065: EMPTY
19066: LIST
19067: PUSH
19068: LD_INT 25
19070: PUSH
19071: LD_INT 4
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PPUSH
19082: CALL_OW 72
19086: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19087: LD_ADDR_VAR 0 14
19091: PUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: LD_INT 3
19099: PUSH
19100: LD_INT 24
19102: PUSH
19103: LD_INT 1000
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PPUSH
19114: CALL_OW 72
19118: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19119: LD_ADDR_VAR 0 6
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_INT 3
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: PPUSH
19137: CALL_OW 69
19141: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19142: LD_ADDR_VAR 0 5
19146: PUSH
19147: LD_VAR 0 1
19151: PPUSH
19152: LD_INT 50
19154: PUSH
19155: EMPTY
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: PPUSH
19161: CALL_OW 72
19165: PUSH
19166: FOR_IN
19167: IFFALSE 19914
// begin if attackUnits and medics then
19169: LD_VAR 0 12
19173: PUSH
19174: LD_VAR 0 13
19178: AND
19179: IFFALSE 19246
// begin if damageUnits then
19181: LD_VAR 0 14
19185: IFFALSE 19207
// ComHeal ( medics , damageUnits [ 1 ] ) else
19187: LD_VAR 0 13
19191: PPUSH
19192: LD_VAR 0 14
19196: PUSH
19197: LD_INT 1
19199: ARRAY
19200: PPUSH
19201: CALL_OW 128
19205: GO 19244
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19207: LD_VAR 0 13
19211: PPUSH
19212: LD_VAR 0 12
19216: PUSH
19217: LD_INT 1
19219: ARRAY
19220: PPUSH
19221: CALL_OW 250
19225: PPUSH
19226: LD_VAR 0 12
19230: PUSH
19231: LD_INT 1
19233: ARRAY
19234: PPUSH
19235: CALL_OW 251
19239: PPUSH
19240: CALL_OW 111
// end else
19244: GO 19275
// begin if not attackUnits and medics then
19246: LD_VAR 0 12
19250: NOT
19251: PUSH
19252: LD_VAR 0 13
19256: AND
19257: IFFALSE 19275
// attackUnits = attackUnits ^ medics ;
19259: LD_ADDR_VAR 0 12
19263: PUSH
19264: LD_VAR 0 12
19268: PUSH
19269: LD_VAR 0 13
19273: ADD
19274: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19275: LD_ADDR_VAR 0 4
19279: PUSH
19280: DOUBLE
19281: LD_INT 1
19283: DEC
19284: ST_TO_ADDR
19285: LD_VAR 0 9
19289: PUSH
19290: LD_INT 2
19292: DIVREAL
19293: PUSH
19294: FOR_TO
19295: IFFALSE 19334
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19297: LD_VAR 0 12
19301: PPUSH
19302: LD_VAR 0 9
19306: PUSH
19307: LD_VAR 0 4
19311: ARRAY
19312: PPUSH
19313: LD_VAR 0 9
19317: PUSH
19318: LD_VAR 0 4
19322: PUSH
19323: LD_INT 1
19325: PLUS
19326: ARRAY
19327: PPUSH
19328: CALL_OW 176
19332: GO 19294
19334: POP
19335: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19336: LD_VAR 0 12
19340: PPUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 3
19353: PUSH
19354: LD_INT 60
19356: PUSH
19357: EMPTY
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 72
19372: PPUSH
19373: LD_INT 27
19375: PPUSH
19376: LD_INT 34
19378: PPUSH
19379: CALL_OW 111
// wait ( 0 0$01 ) ;
19383: LD_INT 35
19385: PPUSH
19386: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19390: LD_VAR 0 8
19394: PUSH
19395: LD_VAR 0 12
19399: PPUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 60
19415: PUSH
19416: EMPTY
19417: LIST
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 72
19431: AND
19432: IFFALSE 19615
// begin for playerUnit in playerUnits do
19434: LD_ADDR_VAR 0 7
19438: PUSH
19439: LD_VAR 0 6
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19611
// begin if Attacks ( playerUnit ) then
19447: LD_VAR 0 7
19451: PPUSH
19452: CALL_OW 320
19456: IFFALSE 19543
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19458: LD_VAR 0 7
19462: PPUSH
19463: CALL_OW 320
19467: PUSH
19468: LD_VAR 0 1
19472: IN
19473: PUSH
19474: LD_VAR 0 7
19478: PPUSH
19479: LD_VAR 0 5
19483: PPUSH
19484: CALL_OW 296
19488: PUSH
19489: LD_INT 13
19491: LESS
19492: AND
19493: IFFALSE 19541
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19495: LD_VAR 0 12
19499: PPUSH
19500: LD_INT 21
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 3
19512: PUSH
19513: LD_INT 60
19515: PUSH
19516: EMPTY
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 72
19531: PPUSH
19532: LD_VAR 0 7
19536: PPUSH
19537: CALL_OW 115
19541: GO 19609
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19543: LD_ADDR_VAR 0 10
19547: PUSH
19548: LD_VAR 0 8
19552: PPUSH
19553: LD_VAR 0 5
19557: PPUSH
19558: CALL_OW 74
19562: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19563: LD_VAR 0 12
19567: PPUSH
19568: LD_INT 21
19570: PUSH
19571: LD_INT 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 3
19580: PUSH
19581: LD_INT 60
19583: PUSH
19584: EMPTY
19585: LIST
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 72
19599: PPUSH
19600: LD_VAR 0 10
19604: PPUSH
19605: CALL_OW 115
// end ; end ;
19609: GO 19444
19611: POP
19612: POP
// end else
19613: GO 19662
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19615: LD_VAR 0 12
19619: PPUSH
19620: LD_INT 21
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 3
19632: PUSH
19633: LD_INT 60
19635: PUSH
19636: EMPTY
19637: LIST
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PPUSH
19647: CALL_OW 72
19651: PPUSH
19652: LD_INT 27
19654: PPUSH
19655: LD_INT 34
19657: PPUSH
19658: CALL_OW 111
// if enemyUnitsOnRoad then
19662: LD_VAR 0 8
19666: IFFALSE 19850
// begin for playerUnit in playerUnits do
19668: LD_ADDR_VAR 0 7
19672: PUSH
19673: LD_VAR 0 6
19677: PUSH
19678: FOR_IN
19679: IFFALSE 19846
// begin if Attacks ( playerUnit ) then
19681: LD_VAR 0 7
19685: PPUSH
19686: CALL_OW 320
19690: IFFALSE 19763
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19692: LD_VAR 0 7
19696: PPUSH
19697: CALL_OW 320
19701: PUSH
19702: LD_VAR 0 1
19706: IN
19707: PUSH
19708: LD_VAR 0 7
19712: PPUSH
19713: LD_VAR 0 5
19717: PPUSH
19718: CALL_OW 296
19722: PUSH
19723: LD_INT 13
19725: LESS
19726: AND
19727: IFFALSE 19761
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19729: LD_VAR 0 12
19733: PPUSH
19734: LD_INT 21
19736: PUSH
19737: LD_INT 2
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: PPUSH
19747: CALL_OW 72
19751: PPUSH
19752: LD_VAR 0 7
19756: PPUSH
19757: CALL_OW 115
19761: GO 19844
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19763: LD_ADDR_VAR 0 10
19767: PUSH
19768: LD_VAR 0 8
19772: PPUSH
19773: LD_VAR 0 12
19777: PPUSH
19778: LD_INT 21
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 50
19790: PUSH
19791: EMPTY
19792: LIST
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PPUSH
19798: CALL_OW 72
19802: PUSH
19803: LD_INT 1
19805: ARRAY
19806: PPUSH
19807: CALL_OW 74
19811: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19812: LD_VAR 0 12
19816: PPUSH
19817: LD_INT 21
19819: PUSH
19820: LD_INT 2
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: EMPTY
19828: LIST
19829: PPUSH
19830: CALL_OW 72
19834: PPUSH
19835: LD_VAR 0 10
19839: PPUSH
19840: CALL_OW 115
// end ; end ;
19844: GO 19678
19846: POP
19847: POP
// end else
19848: GO 19883
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19850: LD_VAR 0 12
19854: PPUSH
19855: LD_INT 21
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: PPUSH
19868: CALL_OW 72
19872: PPUSH
19873: LD_INT 27
19875: PPUSH
19876: LD_INT 34
19878: PPUSH
19879: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19883: LD_VAR 0 5
19887: PPUSH
19888: LD_INT 27
19890: PPUSH
19891: LD_INT 34
19893: PPUSH
19894: CALL_OW 297
19898: PUSH
19899: LD_INT 5
19901: LESS
19902: IFFALSE 19912
// inBase = true ;
19904: LD_ADDR_VAR 0 15
19908: PUSH
19909: LD_INT 1
19911: ST_TO_ADDR
// end ;
19912: GO 19166
19914: POP
19915: POP
// wait ( 0 0$1 ) ;
19916: LD_INT 35
19918: PPUSH
19919: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19923: LD_VAR 0 1
19927: PPUSH
19928: LD_INT 50
19930: PUSH
19931: EMPTY
19932: LIST
19933: PPUSH
19934: CALL_OW 72
19938: PUSH
19939: LD_INT 0
19941: EQUAL
19942: PUSH
19943: LD_VAR 0 15
19947: OR
19948: IFFALSE 18945
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
19950: LD_VAR 0 1
19954: PPUSH
19955: LD_INT 21
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 50
19967: PUSH
19968: EMPTY
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PPUSH
19975: CALL_OW 72
19979: PPUSH
19980: LD_INT 27
19982: PPUSH
19983: LD_INT 34
19985: PPUSH
19986: CALL_OW 111
// for i := 1 to units do
19990: LD_ADDR_VAR 0 4
19994: PUSH
19995: DOUBLE
19996: LD_INT 1
19998: DEC
19999: ST_TO_ADDR
20000: LD_VAR 0 1
20004: PUSH
20005: FOR_TO
20006: IFFALSE 20041
// if IsOk ( units [ i ] ) then
20008: LD_VAR 0 1
20012: PUSH
20013: LD_VAR 0 4
20017: ARRAY
20018: PPUSH
20019: CALL_OW 302
20023: IFFALSE 20039
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20025: LD_ADDR_EXP 12
20029: PUSH
20030: LD_EXP 12
20034: PUSH
20035: LD_INT 1
20037: PLUS
20038: ST_TO_ADDR
20039: GO 20005
20041: POP
20042: POP
// amSupportTroops = amSupportTroops diff units ;
20043: LD_ADDR_EXP 83
20047: PUSH
20048: LD_EXP 83
20052: PUSH
20053: LD_VAR 0 1
20057: DIFF
20058: ST_TO_ADDR
// newBase = amBase ;
20059: LD_ADDR_VAR 0 16
20063: PUSH
20064: LD_EXP 85
20068: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20069: LD_ADDR_VAR 0 16
20073: PUSH
20074: LD_VAR 0 16
20078: PUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: LD_INT 50
20086: PUSH
20087: EMPTY
20088: LIST
20089: PPUSH
20090: CALL_OW 72
20094: ADD
20095: ST_TO_ADDR
// amBase = newBase ;
20096: LD_ADDR_EXP 85
20100: PUSH
20101: LD_VAR 0 16
20105: ST_TO_ADDR
// end ; end_of_file
20106: LD_VAR 0 3
20110: RET
// export function Lose_Burlak ; begin
20111: LD_INT 0
20113: PPUSH
// YouLost ( Burlak ) ;
20114: LD_STRING Burlak
20116: PPUSH
20117: CALL_OW 104
// end ;
20121: LD_VAR 0 1
20125: RET
// export function Lose_Omicron ; begin
20126: LD_INT 0
20128: PPUSH
// YouLost ( Omicron ) ;
20129: LD_STRING Omicron
20131: PPUSH
20132: CALL_OW 104
// end ;
20136: LD_VAR 0 1
20140: RET
// export function Lose_Vehicles ; begin
20141: LD_INT 0
20143: PPUSH
// YouLost ( Vehicles ) ;
20144: LD_STRING Vehicles
20146: PPUSH
20147: CALL_OW 104
// end ;
20151: LD_VAR 0 1
20155: RET
// export function Lose_SelfAttack ; begin
20156: LD_INT 0
20158: PPUSH
// YouLost ( SelfAttack ) ;
20159: LD_STRING SelfAttack
20161: PPUSH
20162: CALL_OW 104
// end ;
20166: LD_VAR 0 1
20170: RET
// export function Lose_Delay ; begin
20171: LD_INT 0
20173: PPUSH
// YouLost ( Delay ) ;
20174: LD_STRING Delay
20176: PPUSH
20177: CALL_OW 104
// end ; end_of_file
20181: LD_VAR 0 1
20185: RET
// export function FinishMission ; begin
20186: LD_INT 0
20188: PPUSH
// SetRewards ;
20189: CALL 20210 0 0
// SavePlayerCharacters ;
20193: CALL 20424 0 0
// SaveGlobalVariables ;
20197: CALL 20753 0 0
// YouWin ;
20201: CALL_OW 103
// end ;
20205: LD_VAR 0 1
20209: RET
// function SetRewards ; var unitsToReward ; begin
20210: LD_INT 0
20212: PPUSH
20213: PPUSH
// if produceMoreVehicles then
20214: LD_EXP 16
20218: IFFALSE 20232
// AddMedal ( Surplus , 1 ) else
20220: LD_STRING Surplus
20222: PPUSH
20223: LD_INT 1
20225: PPUSH
20226: CALL_OW 101
20230: GO 20262
// if produceOnlyForYou then
20232: LD_EXP 17
20236: IFFALSE 20251
// AddMedal ( Surplus , - 1 ) else
20238: LD_STRING Surplus
20240: PPUSH
20241: LD_INT 1
20243: NEG
20244: PPUSH
20245: CALL_OW 101
20249: GO 20262
// AddMedal ( Surplus , - 2 ) ;
20251: LD_STRING Surplus
20253: PPUSH
20254: LD_INT 2
20256: NEG
20257: PPUSH
20258: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20262: LD_EXP 12
20266: PUSH
20267: LD_EXP 46
20271: LESS
20272: IFFALSE 20286
// AddMedal ( PreventReinforcements , 1 ) else
20274: LD_STRING PreventReinforcements
20276: PPUSH
20277: LD_INT 1
20279: PPUSH
20280: CALL_OW 101
20284: GO 20297
// AddMedal ( PreventReinforcements , - 1 ) ;
20286: LD_STRING PreventReinforcements
20288: PPUSH
20289: LD_INT 1
20291: NEG
20292: PPUSH
20293: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20297: LD_EXP 7
20301: PUSH
20302: LD_EXP 54
20306: PPUSH
20307: CALL_OW 302
20311: AND
20312: IFFALSE 20326
// AddMedal ( Scholtze , 1 ) else
20314: LD_STRING Scholtze
20316: PPUSH
20317: LD_INT 1
20319: PPUSH
20320: CALL_OW 101
20324: GO 20337
// AddMedal ( Scholtze , - 1 ) ;
20326: LD_STRING Scholtze
20328: PPUSH
20329: LD_INT 1
20331: NEG
20332: PPUSH
20333: CALL_OW 101
// GiveMedals ( Main ) ;
20337: LD_STRING Main
20339: PPUSH
20340: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 22
20351: PUSH
20352: LD_INT 3
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 21
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PPUSH
20373: CALL_OW 69
20377: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_VAR 0 2
20387: PUSH
20388: LD_EXP 78
20392: ADD
20393: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20394: LD_ADDR_VAR 0 2
20398: PUSH
20399: LD_VAR 0 2
20403: PUSH
20404: LD_EXP 61
20408: DIFF
20409: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20410: LD_VAR 0 2
20414: PPUSH
20415: CALL_OW 43
// end ;
20419: LD_VAR 0 1
20423: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20429: LD_EXP 48
20433: PPUSH
20434: LD_STRING Burlak
20436: PPUSH
20437: LD_INT 3
20439: PPUSH
20440: CALL 7241 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20444: LD_EXP 49
20448: PPUSH
20449: LD_STRING Gnyevko
20451: PPUSH
20452: LD_INT 3
20454: PPUSH
20455: CALL 7241 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20459: LD_EXP 51
20463: PPUSH
20464: LD_STRING Kovalyuk
20466: PPUSH
20467: LD_INT 3
20469: PPUSH
20470: CALL 7241 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20474: LD_EXP 50
20478: PPUSH
20479: LD_STRING Kirilenkova
20481: PPUSH
20482: LD_INT 3
20484: PPUSH
20485: CALL 7241 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20489: LD_EXP 54
20493: PPUSH
20494: LD_STRING Scholtze
20496: PPUSH
20497: LD_INT 3
20499: PPUSH
20500: CALL 7241 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20504: LD_EXP 52
20508: PPUSH
20509: LD_STRING Belkov
20511: PPUSH
20512: LD_INT 3
20514: PPUSH
20515: CALL 7241 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20519: LD_EXP 53
20523: PPUSH
20524: LD_STRING Belkov2
20526: PPUSH
20527: LD_INT 3
20529: PPUSH
20530: CALL 7241 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20534: LD_EXP 52
20538: PPUSH
20539: LD_STRING Belkov
20541: PPUSH
20542: LD_INT 6
20544: PPUSH
20545: CALL 7241 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20549: LD_EXP 53
20553: PPUSH
20554: LD_STRING Belkov2
20556: PPUSH
20557: LD_INT 6
20559: PPUSH
20560: CALL 7241 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20564: LD_ADDR_VAR 0 2
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_INT 3
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PUSH
20579: LD_INT 21
20581: PUSH
20582: LD_INT 1
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 50
20591: PUSH
20592: EMPTY
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: PPUSH
20600: CALL_OW 69
20604: PUSH
20605: LD_EXP 48
20609: PUSH
20610: LD_EXP 49
20614: PUSH
20615: LD_EXP 52
20619: PUSH
20620: LD_EXP 53
20624: PUSH
20625: LD_EXP 51
20629: PUSH
20630: LD_EXP 50
20634: PUSH
20635: LD_EXP 54
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: DIFF
20649: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20650: LD_VAR 0 2
20654: PPUSH
20655: LD_STRING other_survivors
20657: PPUSH
20658: LD_INT 3
20660: PPUSH
20661: CALL 7297 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20665: LD_ADDR_VAR 0 3
20669: PUSH
20670: LD_INT 22
20672: PUSH
20673: LD_INT 6
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 50
20692: PUSH
20693: EMPTY
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: PPUSH
20701: CALL_OW 69
20705: PUSH
20706: LD_EXP 60
20710: PUSH
20711: LD_EXP 61
20715: PUSH
20716: LD_EXP 52
20720: PUSH
20721: LD_EXP 53
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: DIFF
20732: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20733: LD_VAR 0 3
20737: PPUSH
20738: LD_STRING other_kirov
20740: PPUSH
20741: LD_INT 6
20743: PPUSH
20744: CALL 7297 0 3
// end ;
20748: LD_VAR 0 1
20752: RET
// function SaveGlobalVariables ; begin
20753: LD_INT 0
20755: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20756: LD_EXP 26
20760: PPUSH
20761: LD_STRING 03_KurinOpinion_1
20763: PPUSH
20764: CALL_OW 39
// end ; end_of_file
20768: LD_VAR 0 1
20772: RET
// export function CustomEvent ( event ) ; begin
20773: LD_INT 0
20775: PPUSH
// end ;
20776: LD_VAR 0 2
20780: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: LD_INT 22
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: PUSH
20824: FOR_IN
20825: IFFALSE 21022
// if GetTaskList ( i ) > 0 then
20827: LD_VAR 0 2
20831: PPUSH
20832: CALL_OW 437
20836: PUSH
20837: LD_INT 0
20839: GREATER
20840: IFFALSE 21020
// for j = 1 to GetTaskList ( i ) do
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: DOUBLE
20848: LD_INT 1
20850: DEC
20851: ST_TO_ADDR
20852: LD_VAR 0 2
20856: PPUSH
20857: CALL_OW 437
20861: PUSH
20862: FOR_TO
20863: IFFALSE 21018
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20865: LD_ADDR_VAR 0 4
20869: PUSH
20870: LD_VAR 0 2
20874: PPUSH
20875: CALL_OW 437
20879: PUSH
20880: LD_VAR 0 3
20884: ARRAY
20885: PUSH
20886: LD_INT 4
20888: ARRAY
20889: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20890: LD_ADDR_VAR 0 8
20894: PUSH
20895: LD_VAR 0 2
20899: PPUSH
20900: CALL_OW 437
20904: PUSH
20905: LD_VAR 0 3
20909: ARRAY
20910: PUSH
20911: LD_INT 5
20913: ARRAY
20914: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20915: LD_ADDR_VAR 0 6
20919: PUSH
20920: LD_VAR 0 2
20924: PPUSH
20925: CALL_OW 437
20929: PUSH
20930: LD_VAR 0 3
20934: ARRAY
20935: PUSH
20936: LD_INT 2
20938: ARRAY
20939: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20940: LD_ADDR_VAR 0 7
20944: PUSH
20945: LD_VAR 0 2
20949: PPUSH
20950: CALL_OW 437
20954: PUSH
20955: LD_VAR 0 3
20959: ARRAY
20960: PUSH
20961: LD_INT 3
20963: ARRAY
20964: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20965: LD_VAR 0 4
20969: PPUSH
20970: CALL_OW 255
20974: PUSH
20975: LD_INT 6
20977: EQUAL
20978: PUSH
20979: LD_VAR 0 2
20983: PPUSH
20984: CALL_OW 437
20988: PUSH
20989: LD_VAR 0 3
20993: ARRAY
20994: PUSH
20995: LD_INT 1
20997: ARRAY
20998: PUSH
20999: LD_STRING <
21001: EQUAL
21002: AND
21003: IFFALSE 21016
// SetTaskList ( i , [ ] ) ;
21005: LD_VAR 0 2
21009: PPUSH
21010: EMPTY
21011: PPUSH
21012: CALL_OW 446
// end ;
21016: GO 20862
21018: POP
21019: POP
21020: GO 20824
21022: POP
21023: POP
// end ;
21024: PPOPN 8
21026: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21027: LD_VAR 0 2
21031: PUSH
21032: LD_INT 6
21034: EQUAL
21035: IFFALSE 21049
// SetSide ( building , 6 ) ;
21037: LD_VAR 0 1
21041: PPUSH
21042: LD_INT 6
21044: PPUSH
21045: CALL_OW 235
// end ;
21049: PPOPN 3
21051: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21052: LD_INT 0
21054: PPUSH
21055: PPUSH
// begin diffUnits = [ ] ;
21056: LD_ADDR_VAR 0 2
21060: PUSH
21061: EMPTY
21062: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21063: LD_VAR 0 1
21067: PPUSH
21068: CALL_OW 255
21072: PUSH
21073: LD_INT 3
21075: EQUAL
21076: PUSH
21077: LD_VAR 0 1
21081: PPUSH
21082: CALL_OW 266
21086: PUSH
21087: LD_INT 0
21089: EQUAL
21090: AND
21091: PUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: LD_INT 21
21099: PPUSH
21100: CALL_OW 308
21104: AND
21105: IFFALSE 21119
// SetBName ( building , kagan ) ;
21107: LD_VAR 0 1
21111: PPUSH
21112: LD_STRING kagan
21114: PPUSH
21115: CALL_OW 500
// if GetSide ( building ) = 6 then
21119: LD_VAR 0 1
21123: PPUSH
21124: CALL_OW 255
21128: PUSH
21129: LD_INT 6
21131: EQUAL
21132: IFFALSE 21313
// begin if GetBType ( building ) = b_ext_noncombat then
21134: LD_VAR 0 1
21138: PPUSH
21139: CALL_OW 266
21143: PUSH
21144: LD_INT 19
21146: EQUAL
21147: IFFALSE 21153
// begin SpawnKirovSupport ;
21149: CALL 4514 0 0
// end ; if GetBType ( building ) = b_depot then
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 266
21162: PUSH
21163: LD_INT 0
21165: EQUAL
21166: IFFALSE 21212
// begin kirovOilDepot = building ;
21168: LD_ADDR_EXP 67
21172: PUSH
21173: LD_VAR 0 1
21177: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21178: LD_EXP 67
21182: PPUSH
21183: CALL_OW 274
21187: PPUSH
21188: LD_INT 2
21190: PPUSH
21191: LD_INT 3000
21193: PPUSH
21194: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21198: LD_EXP 81
21202: PPUSH
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL_OW 266
21221: PUSH
21222: LD_INT 31
21224: EQUAL
21225: PUSH
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 266
21235: PUSH
21236: LD_INT 4
21238: EQUAL
21239: OR
21240: PUSH
21241: LD_VAR 0 1
21245: PPUSH
21246: LD_INT 20
21248: PPUSH
21249: CALL_OW 308
21253: AND
21254: IFFALSE 21313
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21256: LD_EXP 77
21260: PPUSH
21261: LD_INT 25
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 56
21273: PUSH
21274: EMPTY
21275: LIST
21276: PUSH
21277: LD_INT 3
21279: PUSH
21280: LD_INT 60
21282: PUSH
21283: EMPTY
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: LIST
21294: PPUSH
21295: CALL_OW 72
21299: PUSH
21300: LD_INT 1
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 1
21308: PPUSH
21309: CALL_OW 120
// end ; end ;
21313: PPOPN 3
21315: END
// on UpgradeComplete ( building ) do var i , tmp ;
21316: LD_INT 0
21318: PPUSH
21319: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 255
21329: PUSH
21330: LD_INT 3
21332: EQUAL
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 266
21343: PUSH
21344: LD_INT 3
21346: EQUAL
21347: AND
21348: PUSH
21349: LD_EXP 8
21353: NOT
21354: AND
21355: IFFALSE 21366
// Dial_UpgradeWorkshop ( building ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: CALL 24464 0 1
// end ;
21366: PPOPN 3
21368: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21369: LD_VAR 0 1
21373: PUSH
21374: LD_EXP 48
21378: EQUAL
21379: IFFALSE 21385
// Lose_Burlak ;
21381: CALL 20111 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21385: LD_VAR 0 1
21389: PUSH
21390: LD_EXP 59
21394: EQUAL
21395: PUSH
21396: LD_EXP 28
21400: NOT
21401: AND
21402: IFFALSE 21408
// Lose_Omicron ;
21404: CALL 20126 0 0
// end ;
21408: PPOPN 1
21410: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21411: LD_VAR 0 1
21415: PUSH
21416: LD_INT 3
21418: EQUAL
21419: PUSH
21420: LD_VAR 0 2
21424: PUSH
21425: LD_INT 6
21427: EQUAL
21428: AND
21429: IFFALSE 21435
// Lose_SelfAttack ;
21431: CALL 20156 0 0
// end ;
21435: PPOPN 2
21437: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21438: LD_VAR 0 1
21442: PPUSH
21443: CALL_OW 255
21447: PUSH
21448: LD_INT 6
21450: EQUAL
21451: IFFALSE 21616
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 264
21462: PUSH
21463: LD_INT 51
21465: EQUAL
21466: PUSH
21467: LD_EXP 73
21471: NOT
21472: AND
21473: IFFALSE 21487
// kirovTransportCargo = vehicle else
21475: LD_ADDR_EXP 73
21479: PUSH
21480: LD_VAR 0 1
21484: ST_TO_ADDR
21485: GO 21559
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 264
21496: PUSH
21497: LD_INT 51
21499: EQUAL
21500: IFFALSE 21559
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_EXP 67
21511: PPUSH
21512: LD_INT 2
21514: PPUSH
21515: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21519: LD_VAR 0 1
21523: PPUSH
21524: LD_INT 137
21526: PPUSH
21527: LD_INT 99
21529: PPUSH
21530: CALL_OW 171
// AddComHold ( vehicle ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21543: LD_ADDR_EXP 74
21547: PUSH
21548: LD_EXP 74
21552: PUSH
21553: LD_VAR 0 1
21557: ADD
21558: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21559: LD_VAR 0 1
21563: PPUSH
21564: CALL_OW 264
21568: PUSH
21569: LD_INT 42
21571: PUSH
21572: LD_INT 43
21574: PUSH
21575: LD_INT 44
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: IN
21583: IFFALSE 21616
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21585: LD_ADDR_EXP 75
21589: PUSH
21590: LD_EXP 75
21594: PUSH
21595: LD_VAR 0 1
21599: ADD
21600: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21601: LD_VAR 0 1
21605: PPUSH
21606: LD_INT 137
21608: PPUSH
21609: LD_INT 99
21611: PPUSH
21612: CALL_OW 111
// end ; end ; end ;
21616: PPOPN 2
21618: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21619: LD_VAR 0 3
21623: PUSH
21624: LD_INT 6
21626: EQUAL
21627: PUSH
21628: LD_VAR 0 2
21632: PUSH
21633: LD_EXP 30
21637: IN
21638: NOT
21639: AND
21640: IFFALSE 21663
// begin ComExitVehicle ( capturing_unit ) ;
21642: LD_VAR 0 4
21646: PPUSH
21647: CALL_OW 121
// SetSide ( new , 6 ) ;
21651: LD_VAR 0 1
21655: PPUSH
21656: LD_INT 6
21658: PPUSH
21659: CALL_OW 235
// end ; end ;
21663: PPOPN 4
21665: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: PUSH
21676: LD_INT 6
21678: EQUAL
21679: PUSH
21680: LD_EXP 19
21684: AND
21685: IFFALSE 21713
// begin wait ( 0 0$2 ) ;
21687: LD_INT 70
21689: PPUSH
21690: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21694: LD_VAR 0 1
21698: PPUSH
21699: LD_INT 78
21701: PPUSH
21702: LD_INT 39
21704: PPUSH
21705: CALL_OW 174
// KirovAttackOmicron ;
21709: CALL 17897 0 0
// end ; end ;
21713: PPOPN 2
21715: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21716: LD_VAR 0 2
21720: PPUSH
21721: CALL_OW 255
21725: PUSH
21726: LD_INT 6
21728: EQUAL
21729: PUSH
21730: LD_VAR 0 1
21734: PUSH
21735: LD_INT 39
21737: EQUAL
21738: AND
21739: IFFALSE 21800
// begin MountWeaponTurrent ;
21741: CALL 17361 0 0
// wait ( 3 3$30 ) ;
21745: LD_INT 7350
21747: PPUSH
21748: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21752: LD_INT 22
21754: PUSH
21755: LD_INT 6
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 3
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PPUSH
21796: CALL 17427 0 1
// end ; end ; end_of_file
21800: PPOPN 2
21802: END
// export function MissionIntro ; var i , unit , freeSlots , tmp ; begin
21803: LD_INT 0
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
21809: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21810: LD_EXP 48
21814: PUSH
21815: LD_EXP 60
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PPUSH
21824: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21828: LD_EXP 48
21832: PUSH
21833: LD_EXP 62
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: LD_EXP 60
21846: PPUSH
21847: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21851: LD_EXP 60
21855: PPUSH
21856: LD_EXP 48
21860: PPUSH
21861: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21865: LD_INT 3
21867: PPUSH
21868: LD_INT 24
21870: PPUSH
21871: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21875: LD_EXP 52
21879: PPUSH
21880: CALL_OW 305
21884: NOT
21885: PUSH
21886: LD_EXP 53
21890: PPUSH
21891: CALL_OW 305
21895: NOT
21896: AND
21897: IFFALSE 21985
// begin Say ( Kurin , D1a-Kur-1 ) ;
21899: LD_EXP 60
21903: PPUSH
21904: LD_STRING D1a-Kur-1
21906: PPUSH
21907: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21911: LD_EXP 48
21915: PPUSH
21916: LD_STRING D1a-Bur-1
21918: PPUSH
21919: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21923: LD_EXP 60
21927: PPUSH
21928: LD_STRING D1a-Kur-2
21930: PPUSH
21931: CALL_OW 88
// if platonovOpinion <= 1 then
21935: LD_EXP 27
21939: PUSH
21940: LD_INT 1
21942: LESSEQUAL
21943: IFFALSE 21959
// Say ( Kurin , D1a-Kur-2a ) else
21945: LD_EXP 60
21949: PPUSH
21950: LD_STRING D1a-Kur-2a
21952: PPUSH
21953: CALL_OW 88
21957: GO 21971
// Say ( Kurin , D1a-Kur-2b ) ;
21959: LD_EXP 60
21963: PPUSH
21964: LD_STRING D1a-Kur-2b
21966: PPUSH
21967: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21971: LD_EXP 48
21975: PPUSH
21976: LD_STRING D1a-Bur-2
21978: PPUSH
21979: CALL_OW 88
// end else
21983: GO 22021
// begin Say ( Kurin , D1b-Kur-1 ) ;
21985: LD_EXP 60
21989: PPUSH
21990: LD_STRING D1b-Kur-1
21992: PPUSH
21993: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21997: LD_EXP 62
22001: PPUSH
22002: LD_STRING D1b-Bel-1
22004: PPUSH
22005: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22009: LD_EXP 60
22013: PPUSH
22014: LD_STRING D1b-Kur-2
22016: PPUSH
22017: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22021: LD_EXP 60
22025: PPUSH
22026: LD_STRING D2-Kur-1
22028: PPUSH
22029: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22033: LD_EXP 48
22037: PPUSH
22038: LD_STRING D2-Bur-1
22040: PPUSH
22041: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22045: LD_EXP 60
22049: PPUSH
22050: LD_STRING D2-Kur-2
22052: PPUSH
22053: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22057: LD_EXP 48
22061: PPUSH
22062: LD_STRING D2-Bur-2
22064: PPUSH
22065: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22069: LD_EXP 60
22073: PPUSH
22074: LD_STRING D2-Kur-3
22076: PPUSH
22077: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22081: LD_INT 1
22083: PPUSH
22084: LD_INT 6
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: CALL_OW 80
// PrepareAmericansMissionIntro ;
22097: CALL 5575 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22101: LD_EXP 82
22105: PPUSH
22106: LD_INT 28
22108: PPUSH
22109: LD_INT 35
22111: PPUSH
22112: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22116: LD_INT 93
22118: PPUSH
22119: LD_INT 36
22121: PPUSH
22122: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22126: LD_INT 93
22128: PPUSH
22129: LD_INT 36
22131: PPUSH
22132: LD_INT 3
22134: PPUSH
22135: LD_INT 9
22137: NEG
22138: PPUSH
22139: CALL_OW 330
// wait ( 0 0$6 ) ;
22143: LD_INT 210
22145: PPUSH
22146: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22150: LD_EXP 61
22154: PPUSH
22155: CALL_OW 85
// wait ( 0 0$1 ) ;
22159: LD_INT 35
22161: PPUSH
22162: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22166: LD_EXP 61
22170: PPUSH
22171: LD_STRING D2-Pop-3
22173: PPUSH
22174: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22178: LD_EXP 48
22182: PUSH
22183: LD_EXP 60
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PPUSH
22192: CALL_OW 87
// wait ( 0 0$1 ) ;
22196: LD_INT 35
22198: PPUSH
22199: CALL_OW 67
// for unit in amIntroUnits do
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_EXP 82
22212: PUSH
22213: FOR_IN
22214: IFFALSE 22227
// RemoveUnit ( unit ) ;
22216: LD_VAR 0 3
22220: PPUSH
22221: CALL_OW 64
22225: GO 22213
22227: POP
22228: POP
// Say ( Kurin , D2-Kur-4 ) ;
22229: LD_EXP 60
22233: PPUSH
22234: LD_STRING D2-Kur-4
22236: PPUSH
22237: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22241: LD_EXP 48
22245: PPUSH
22246: LD_STRING D2-Bur-4
22248: PPUSH
22249: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22253: LD_EXP 60
22257: PPUSH
22258: LD_STRING D2-Kur-5
22260: PPUSH
22261: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22265: LD_EXP 48
22269: PPUSH
22270: LD_STRING D2-Bur-5
22272: PPUSH
22273: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22277: LD_EXP 60
22281: PPUSH
22282: LD_STRING D2-Kur-6
22284: PPUSH
22285: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22289: LD_EXP 49
22293: PPUSH
22294: CALL_OW 305
22298: IFFALSE 22314
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22300: LD_ADDR_EXP 38
22304: PUSH
22305: LD_EXP 38
22309: PUSH
22310: LD_INT 1
22312: MINUS
22313: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22314: LD_EXP 51
22318: PPUSH
22319: CALL_OW 305
22323: IFFALSE 22339
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22325: LD_ADDR_EXP 38
22329: PUSH
22330: LD_EXP 38
22334: PUSH
22335: LD_INT 1
22337: MINUS
22338: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22339: LD_EXP 50
22343: PPUSH
22344: CALL_OW 305
22348: IFFALSE 22364
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22350: LD_ADDR_EXP 38
22354: PUSH
22355: LD_EXP 38
22359: PUSH
22360: LD_INT 1
22362: MINUS
22363: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22364: LD_EXP 38
22368: PPUSH
22369: CALL 7395 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22373: LD_INT 93
22375: PPUSH
22376: LD_INT 36
22378: PPUSH
22379: LD_INT 3
22381: PPUSH
22382: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22386: LD_INT 3
22388: PPUSH
22389: LD_INT 24
22391: PPUSH
22392: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22396: LD_INT 22
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 21
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PPUSH
22420: CALL_OW 69
22424: PPUSH
22425: CALL_OW 122
// wait ( 0 0$1 ) ;
22429: LD_INT 35
22431: PPUSH
22432: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
22436: LD_INT 22
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 21
22448: PUSH
22449: LD_INT 1
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PPUSH
22460: CALL_OW 69
22464: PPUSH
22465: LD_EXP 59
22469: PPUSH
22470: CALL_OW 250
22474: PPUSH
22475: LD_EXP 59
22479: PPUSH
22480: CALL_OW 251
22484: PPUSH
22485: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
22489: LD_INT 35
22491: PPUSH
22492: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
22496: LD_EXP 48
22500: PPUSH
22501: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
22505: LD_EXP 48
22509: PPUSH
22510: LD_EXP 59
22514: PPUSH
22515: CALL_OW 296
22519: PUSH
22520: LD_INT 6
22522: LESS
22523: IFFALSE 22489
// InGameOff ;
22525: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22529: LD_STRING M1
22531: PPUSH
22532: CALL_OW 337
// SaveForQuickRestart ;
22536: CALL_OW 22
// counterEnable = true ;
22540: LD_ADDR_EXP 88
22544: PUSH
22545: LD_INT 1
22547: ST_TO_ADDR
// counterIndex = 1 ;
22548: LD_ADDR_EXP 89
22552: PUSH
22553: LD_INT 1
22555: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22556: LD_INT 3
22558: PPUSH
22559: LD_INT 24
22561: PPUSH
22562: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22566: LD_INT 6
22568: PPUSH
22569: LD_INT 22
22571: PUSH
22572: LD_INT 6
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 3
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 30
22591: PUSH
22592: LD_INT 6
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: PUSH
22609: LD_INT 1
22611: ARRAY
22612: PPUSH
22613: LD_INT 3
22615: PPUSH
22616: CALL 8810 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22620: LD_INT 1
22622: PPUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 1
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 21
22635: PUSH
22636: LD_INT 3
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 30
22645: PUSH
22646: LD_INT 7
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 69
22662: PUSH
22663: LD_INT 1
22665: ARRAY
22666: PPUSH
22667: LD_INT 1
22669: PPUSH
22670: CALL 8810 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22674: LD_INT 18
22676: PPUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 6
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 21
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 25
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 70
22716: PPUSH
22717: LD_INT 17
22719: PPUSH
22720: LD_INT 159
22722: PPUSH
22723: LD_INT 116
22725: PPUSH
22726: LD_INT 0
22728: PPUSH
22729: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22733: LD_INT 18
22735: PPUSH
22736: LD_INT 22
22738: PUSH
22739: LD_INT 6
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 21
22748: PUSH
22749: LD_INT 1
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 25
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: PPUSH
22771: CALL_OW 70
22775: PPUSH
22776: LD_INT 19
22778: PPUSH
22779: LD_INT 161
22781: PPUSH
22782: LD_INT 115
22784: PPUSH
22785: LD_INT 5
22787: PPUSH
22788: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22792: LD_INT 18
22794: PPUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 6
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 25
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL_OW 70
22834: PPUSH
22835: LD_EXP 66
22839: PPUSH
22840: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22844: LD_EXP 78
22848: PPUSH
22849: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22853: LD_ADDR_VAR 0 5
22857: PUSH
22858: LD_EXP 78
22862: PUSH
22863: LD_EXP 61
22867: DIFF
22868: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22869: LD_ADDR_VAR 0 4
22873: PUSH
22874: LD_INT 6
22876: PUSH
22877: LD_EXP 68
22881: PPUSH
22882: CALL_OW 313
22886: MINUS
22887: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22888: LD_EXP 78
22892: PUSH
22893: LD_EXP 61
22897: DIFF
22898: PPUSH
22899: LD_EXP 68
22903: PPUSH
22904: CALL_OW 180
// for i = 1 to tmp do
22908: LD_ADDR_VAR 0 2
22912: PUSH
22913: DOUBLE
22914: LD_INT 1
22916: DEC
22917: ST_TO_ADDR
22918: LD_VAR 0 5
22922: PUSH
22923: FOR_TO
22924: IFFALSE 22976
// begin if freeSlots > 0 then
22926: LD_VAR 0 4
22930: PUSH
22931: LD_INT 0
22933: GREATER
22934: IFFALSE 22972
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
22936: LD_VAR 0 5
22940: PUSH
22941: LD_VAR 0 2
22945: ARRAY
22946: PPUSH
22947: LD_EXP 68
22951: PPUSH
22952: CALL_OW 120
// freeSlots = freeSlots - 1 ;
22956: LD_ADDR_VAR 0 4
22960: PUSH
22961: LD_VAR 0 4
22965: PUSH
22966: LD_INT 1
22968: MINUS
22969: ST_TO_ADDR
// end else
22970: GO 22974
// break ;
22972: GO 22976
// end ;
22974: GO 22923
22976: POP
22977: POP
// wait ( 0 0$1 ) ;
22978: LD_INT 35
22980: PPUSH
22981: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
22985: LD_VAR 0 5
22989: PPUSH
22990: LD_INT 56
22992: PUSH
22993: EMPTY
22994: LIST
22995: PUSH
22996: LD_INT 3
22998: PUSH
22999: LD_INT 60
23001: PUSH
23002: EMPTY
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PPUSH
23013: CALL_OW 72
23017: PPUSH
23018: LD_EXP 66
23022: PPUSH
23023: CALL_OW 120
// ComWalk ( ruScout ) ;
23027: LD_EXP 63
23031: PPUSH
23032: CALL_OW 138
// wait ( 0 0$1 ) ;
23036: LD_INT 35
23038: PPUSH
23039: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23043: LD_EXP 63
23047: PUSH
23048: LD_EXP 61
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PPUSH
23057: LD_INT 99
23059: PPUSH
23060: LD_INT 37
23062: PPUSH
23063: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23067: LD_EXP 63
23071: PUSH
23072: LD_EXP 61
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PPUSH
23081: LD_INT 88
23083: PPUSH
23084: LD_INT 60
23086: PPUSH
23087: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23091: LD_EXP 63
23095: PUSH
23096: LD_EXP 61
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PPUSH
23105: LD_INT 129
23107: PPUSH
23108: LD_INT 99
23110: PPUSH
23111: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23115: LD_EXP 61
23119: PUSH
23120: LD_EXP 63
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PPUSH
23129: LD_EXP 66
23133: PPUSH
23134: CALL_OW 180
// end ;
23138: LD_VAR 0 1
23142: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23143: LD_EXP 22
23147: IFFALSE 23419
23149: GO 23151
23151: DISABLE
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23159: LD_ADDR_VAR 0 4
23163: PUSH
23164: LD_VAR 0 4
23168: PUSH
23169: LD_EXP 60
23173: ADD
23174: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23175: LD_ADDR_VAR 0 4
23179: PUSH
23180: LD_VAR 0 4
23184: PUSH
23185: LD_EXP 78
23189: ADD
23190: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23191: LD_ADDR_VAR 0 4
23195: PUSH
23196: LD_VAR 0 4
23200: PUSH
23201: LD_EXP 70
23205: ADD
23206: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23207: LD_ADDR_VAR 0 5
23211: PUSH
23212: LD_INT 18
23214: PPUSH
23215: LD_INT 22
23217: PUSH
23218: LD_INT 6
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 21
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 70
23243: PUSH
23244: LD_VAR 0 4
23248: DIFF
23249: ST_TO_ADDR
// pom = 6 ;
23250: LD_ADDR_VAR 0 3
23254: PUSH
23255: LD_INT 6
23257: ST_TO_ADDR
// if canTakeUnits then
23258: LD_VAR 0 5
23262: IFFALSE 23386
// for i = 1 to canTakeUnits do
23264: LD_ADDR_VAR 0 1
23268: PUSH
23269: DOUBLE
23270: LD_INT 1
23272: DEC
23273: ST_TO_ADDR
23274: LD_VAR 0 5
23278: PUSH
23279: FOR_TO
23280: IFFALSE 23384
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23282: LD_VAR 0 5
23286: PUSH
23287: LD_VAR 0 1
23291: ARRAY
23292: PPUSH
23293: CALL_OW 257
23297: PUSH
23298: LD_INT 3
23300: NONEQUAL
23301: IFFALSE 23348
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23303: LD_VAR 0 5
23307: PUSH
23308: LD_VAR 0 1
23312: ARRAY
23313: PPUSH
23314: LD_EXP 21
23318: PPUSH
23319: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23323: LD_VAR 0 5
23327: PUSH
23328: LD_VAR 0 1
23332: ARRAY
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 183
// wait ( 0 0$1 ) ;
23341: LD_INT 35
23343: PPUSH
23344: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23348: LD_VAR 0 5
23352: PUSH
23353: LD_VAR 0 1
23357: ARRAY
23358: PPUSH
23359: LD_EXP 21
23363: PPUSH
23364: CALL_OW 120
// pom = pom - 1 ;
23368: LD_ADDR_VAR 0 3
23372: PUSH
23373: LD_VAR 0 3
23377: PUSH
23378: LD_INT 1
23380: MINUS
23381: ST_TO_ADDR
// end ;
23382: GO 23279
23384: POP
23385: POP
// if pom > 0 then
23386: LD_VAR 0 3
23390: PUSH
23391: LD_INT 0
23393: GREATER
23394: IFFALSE 23419
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23396: LD_ADDR_EXP 80
23400: PUSH
23401: LD_EXP 80
23405: PPUSH
23406: LD_INT 3
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: CALL_OW 1
23418: ST_TO_ADDR
// end ;
23419: PPOPN 5
23421: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23422: LD_EXP 73
23426: PUSH
23427: LD_EXP 31
23431: NOT
23432: AND
23433: IFFALSE 23482
23435: GO 23437
23437: DISABLE
// begin enable ;
23438: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23439: LD_EXP 73
23443: PPUSH
23444: LD_EXP 67
23448: PPUSH
23449: LD_INT 2
23451: PPUSH
23452: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23456: LD_EXP 73
23460: PPUSH
23461: LD_EXP 66
23465: PPUSH
23466: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23470: LD_EXP 73
23474: PPUSH
23475: LD_INT 100
23477: PPUSH
23478: CALL_OW 240
// end ;
23482: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23483: LD_INT 78
23485: PPUSH
23486: LD_INT 112
23488: PPUSH
23489: LD_INT 3
23491: PPUSH
23492: CALL_OW 440
23496: IFFALSE 23550
23498: GO 23500
23500: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23501: LD_INT 78
23503: PPUSH
23504: LD_INT 112
23506: PPUSH
23507: CALL_OW 84
// DialogueOn ;
23511: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23515: LD_EXP 48
23519: PPUSH
23520: LD_STRING D2a-Bur-1
23522: PPUSH
23523: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23527: LD_EXP 60
23531: PPUSH
23532: LD_STRING D2a-Kur-1
23534: PPUSH
23535: CALL_OW 94
// DialogueOff ;
23539: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23543: LD_STRING M2
23545: PPUSH
23546: CALL_OW 337
// end ;
23550: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23551: LD_EXP 10
23555: NOT
23556: IFFALSE 23764
23558: GO 23560
23560: DISABLE
23561: LD_INT 0
23563: PPUSH
// begin enable ;
23564: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23565: LD_ADDR_VAR 0 1
23569: PUSH
23570: LD_INT 22
23572: PUSH
23573: LD_INT 3
23575: PUSH
23576: EMPTY
23577: LIST
23578: LIST
23579: PUSH
23580: LD_INT 21
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 23
23592: PUSH
23593: LD_INT 3
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: LD_INT 31
23605: PUSH
23606: LD_INT 21
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 31
23615: PUSH
23616: LD_INT 23
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: LIST
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: PPUSH
23634: CALL_OW 69
23638: PUSH
23639: FOR_IN
23640: IFFALSE 23762
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23642: LD_VAR 0 1
23646: PPUSH
23647: LD_INT 48
23649: PPUSH
23650: LD_INT 81
23652: PPUSH
23653: CALL_OW 297
23657: PUSH
23658: LD_INT 7
23660: LESS
23661: IFFALSE 23760
// begin dialog_track = true ;
23663: LD_ADDR_EXP 10
23667: PUSH
23668: LD_INT 1
23670: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23671: LD_INT 48
23673: PPUSH
23674: LD_INT 81
23676: PPUSH
23677: CALL_OW 86
// DialogueOn ;
23681: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23685: LD_EXP 48
23689: PPUSH
23690: LD_STRING D5a-Bur-1
23692: PPUSH
23693: CALL_OW 88
// DialogueOff ;
23697: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23701: LD_INT 82
23703: PPUSH
23704: LD_INT 3
23706: PPUSH
23707: CALL_OW 321
23711: PUSH
23712: LD_INT 0
23714: EQUAL
23715: IFFALSE 23730
// SetTech ( 82 , 3 , state_enabled ) ;
23717: LD_INT 82
23719: PPUSH
23720: LD_INT 3
23722: PPUSH
23723: LD_INT 1
23725: PPUSH
23726: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23730: LD_INT 84
23732: PPUSH
23733: LD_INT 3
23735: PPUSH
23736: LD_INT 1
23738: PPUSH
23739: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23743: LD_INT 16
23745: PPUSH
23746: LD_INT 3
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 324
// exit ;
23756: POP
23757: POP
23758: GO 23764
// end ;
23760: GO 23639
23762: POP
23763: POP
// end ;
23764: PPOPN 1
23766: END
// every 5 5$30 do
23767: GO 23769
23769: DISABLE
// begin PrepareScholtze ;
23770: CALL 5362 0 0
// wait ( 0 0$2 ) ;
23774: LD_INT 70
23776: PPUSH
23777: CALL_OW 67
// DialogueOn ;
23781: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23785: LD_EXP 54
23789: PPUSH
23790: LD_STRING D4-Sch-1
23792: PPUSH
23793: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23797: LD_EXP 48
23801: PPUSH
23802: LD_STRING D4-Bur-1
23804: PPUSH
23805: CALL_OW 88
// DialogueOff ;
23809: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23813: LD_STRING M4
23815: PPUSH
23816: CALL_OW 337
// ComHold ( Scholtze ) ;
23820: LD_EXP 54
23824: PPUSH
23825: CALL_OW 140
// scholtzeSpawned = true ;
23829: LD_ADDR_EXP 6
23833: PUSH
23834: LD_INT 1
23836: ST_TO_ADDR
// end ;
23837: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23838: LD_INT 3
23840: PPUSH
23841: LD_EXP 54
23845: PPUSH
23846: CALL_OW 292
23850: PUSH
23851: LD_EXP 6
23855: AND
23856: PUSH
23857: LD_EXP 7
23861: NOT
23862: AND
23863: IFFALSE 24044
23865: GO 23867
23867: DISABLE
// begin scholtzeSaved = true ;
23868: LD_ADDR_EXP 7
23872: PUSH
23873: LD_INT 1
23875: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23876: LD_EXP 54
23880: PPUSH
23881: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23885: LD_EXP 54
23889: PPUSH
23890: LD_INT 3
23892: PPUSH
23893: CALL_OW 235
// DialogueOn ;
23897: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23901: LD_EXP 54
23905: PPUSH
23906: LD_STRING D4a-Sch-1
23908: PPUSH
23909: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23913: LD_EXP 48
23917: PPUSH
23918: LD_STRING D4a-Bur-1
23920: PPUSH
23921: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23925: LD_EXP 54
23929: PPUSH
23930: LD_STRING D4a-Sch-2
23932: PPUSH
23933: CALL_OW 88
// DialogueOff ;
23937: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
23941: LD_EXP 84
23945: PPUSH
23946: LD_INT 28
23948: PPUSH
23949: LD_INT 36
23951: PPUSH
23952: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
23956: LD_STRING MScholtzeOut
23958: PPUSH
23959: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
23963: LD_INT 49
23965: PPUSH
23966: LD_INT 3
23968: PPUSH
23969: LD_INT 1
23971: PPUSH
23972: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
23976: LD_INT 51
23978: PPUSH
23979: LD_INT 3
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
23989: LD_INT 82
23991: PPUSH
23992: LD_INT 3
23994: PPUSH
23995: CALL_OW 321
23999: PUSH
24000: LD_INT 0
24002: EQUAL
24003: IFFALSE 24018
// SetTech ( 82 , 3 , state_enabled ) ;
24005: LD_INT 82
24007: PPUSH
24008: LD_INT 3
24010: PPUSH
24011: LD_INT 1
24013: PPUSH
24014: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24018: LD_INT 83
24020: PPUSH
24021: LD_INT 3
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24031: LD_INT 19
24033: PPUSH
24034: LD_INT 3
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: CALL_OW 324
// end ;
24044: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24045: LD_EXP 54
24049: PPUSH
24050: CALL_OW 305
24054: PUSH
24055: LD_EXP 7
24059: NOT
24060: AND
24061: IFFALSE 24070
24063: GO 24065
24065: DISABLE
// PrepareAmericanPatrol ;
24066: CALL 6266 0 0
24070: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24071: LD_EXP 54
24075: PPUSH
24076: CALL_OW 305
24080: PUSH
24081: LD_EXP 54
24085: PPUSH
24086: CALL_OW 255
24090: PUSH
24091: LD_INT 8
24093: EQUAL
24094: AND
24095: PUSH
24096: LD_EXP 47
24100: PUSH
24101: LD_INT 35
24103: GREATER
24104: AND
24105: IFFALSE 24281
24107: GO 24109
24109: DISABLE
24110: LD_INT 0
24112: PPUSH
24113: PPUSH
// begin enable ;
24114: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24115: LD_ADDR_EXP 47
24119: PUSH
24120: LD_EXP 47
24124: PUSH
24125: LD_INT 35
24127: MINUS
24128: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_INT 22
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 12
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PPUSH
24158: CALL_OW 69
24162: PUSH
24163: FOR_IN
24164: IFFALSE 24203
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: LD_EXP 54
24175: PPUSH
24176: CALL_OW 250
24180: PPUSH
24181: LD_EXP 54
24185: PPUSH
24186: CALL_OW 251
24190: PPUSH
24191: LD_INT 12
24193: PPUSH
24194: LD_INT 0
24196: PPUSH
24197: CALL 10227 0 5
24201: GO 24163
24203: POP
24204: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: LD_INT 22
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 25
24222: PUSH
24223: LD_INT 14
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PPUSH
24234: CALL_OW 69
24238: PUSH
24239: FOR_IN
24240: IFFALSE 24279
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24242: LD_VAR 0 2
24246: PPUSH
24247: LD_EXP 54
24251: PPUSH
24252: CALL_OW 250
24256: PPUSH
24257: LD_EXP 54
24261: PPUSH
24262: CALL_OW 251
24266: PPUSH
24267: LD_INT 12
24269: PPUSH
24270: LD_INT 0
24272: PPUSH
24273: CALL 10227 0 5
24277: GO 24239
24279: POP
24280: POP
// end ;
24281: PPOPN 2
24283: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24284: LD_INT 1
24286: PPUSH
24287: LD_EXP 54
24291: PPUSH
24292: CALL_OW 292
24296: PUSH
24297: LD_EXP 84
24301: AND
24302: PUSH
24303: LD_EXP 7
24307: NOT
24308: AND
24309: IFFALSE 24463
24311: GO 24313
24313: DISABLE
// begin enable ;
24314: ENABLE
// if not IsPlaced ( Scholtze ) then
24315: LD_EXP 54
24319: PPUSH
24320: CALL_OW 305
24324: NOT
24325: IFFALSE 24329
// exit ;
24327: GO 24463
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24329: LD_EXP 84
24333: PUSH
24334: LD_INT 1
24336: ARRAY
24337: PPUSH
24338: CALL_OW 320
24342: PUSH
24343: LD_EXP 54
24347: EQUAL
24348: PUSH
24349: LD_EXP 84
24353: PUSH
24354: LD_INT 2
24356: ARRAY
24357: PPUSH
24358: CALL_OW 320
24362: PUSH
24363: LD_EXP 54
24367: EQUAL
24368: OR
24369: IFFALSE 24463
// begin DialogueOn ;
24371: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24375: LD_EXP 54
24379: PPUSH
24380: LD_STRING D4b-Sch-1
24382: PPUSH
24383: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24387: LD_EXP 84
24391: PUSH
24392: LD_INT 2
24394: ARRAY
24395: PPUSH
24396: LD_STRING D4b-Sol1-1
24398: PPUSH
24399: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24403: LD_EXP 84
24407: PUSH
24408: LD_INT 1
24410: ARRAY
24411: PPUSH
24412: LD_STRING D4b-Sol2-1
24414: PPUSH
24415: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24419: LD_EXP 54
24423: PPUSH
24424: LD_STRING D4b-Sch-2
24426: PPUSH
24427: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24431: LD_EXP 48
24435: PPUSH
24436: LD_STRING D4b-Bur-2
24438: PPUSH
24439: CALL_OW 88
// DialogueOff ;
24443: CALL_OW 7
// Killunit ( Scholtze ) ;
24447: LD_EXP 54
24451: PPUSH
24452: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24456: LD_STRING MScholtzeDel
24458: PPUSH
24459: CALL_OW 337
// end ; end ;
24463: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
24468: PPUSH
// dialog_workshop = true ;
24469: LD_ADDR_EXP 8
24473: PUSH
24474: LD_INT 1
24476: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24477: LD_INT 22
24479: PUSH
24480: LD_INT 3
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 30
24489: PUSH
24490: LD_INT 26
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 69
24505: NOT
24506: IFFALSE 24895
// begin CenterNowOnUnits ( building ) ;
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 87
// DialogueOn ;
24517: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24521: LD_EXP 48
24525: PPUSH
24526: LD_STRING D3aa-Bur-1
24528: PPUSH
24529: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24533: LD_EXP 54
24537: PPUSH
24538: CALL_OW 302
24542: PUSH
24543: LD_EXP 54
24547: PPUSH
24548: CALL_OW 255
24552: PUSH
24553: LD_INT 3
24555: EQUAL
24556: AND
24557: IFFALSE 24573
// Say ( Scholtze , D3aa-Sch-1 ) else
24559: LD_EXP 54
24563: PPUSH
24564: LD_STRING D3aa-Sch-1
24566: PPUSH
24567: CALL_OW 88
24571: GO 24879
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24573: LD_ADDR_VAR 0 3
24577: PUSH
24578: LD_INT 22
24580: PUSH
24581: LD_INT 3
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 25
24600: PUSH
24601: LD_INT 4
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 26
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 50
24620: PUSH
24621: EMPTY
24622: LIST
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: PPUSH
24631: CALL_OW 69
24635: PUSH
24636: LD_EXP 48
24640: PUSH
24641: LD_EXP 49
24645: PUSH
24646: LD_EXP 51
24650: PUSH
24651: LD_EXP 52
24655: PUSH
24656: LD_EXP 53
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: DIFF
24668: ST_TO_ADDR
// if maleSci then
24669: LD_VAR 0 3
24673: IFFALSE 24693
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24675: LD_VAR 0 3
24679: PUSH
24680: LD_INT 1
24682: ARRAY
24683: PPUSH
24684: LD_STRING D3aa-Sci1-1
24686: PPUSH
24687: CALL_OW 88
24691: GO 24879
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24693: LD_ADDR_VAR 0 4
24697: PUSH
24698: LD_INT 22
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 21
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 26
24720: PUSH
24721: LD_INT 1
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 50
24730: PUSH
24731: EMPTY
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: PPUSH
24740: CALL_OW 69
24744: PUSH
24745: LD_EXP 48
24749: PUSH
24750: LD_EXP 49
24754: PUSH
24755: LD_EXP 51
24759: PUSH
24760: LD_EXP 52
24764: PUSH
24765: LD_EXP 53
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: DIFF
24777: ST_TO_ADDR
// if maleOthers then
24778: LD_VAR 0 4
24782: IFFALSE 24802
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24784: LD_VAR 0 4
24788: PUSH
24789: LD_INT 1
24791: ARRAY
24792: PPUSH
24793: LD_STRING D3aa-Sci1-1
24795: PPUSH
24796: CALL_OW 88
24800: GO 24879
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24802: LD_ADDR_VAR 0 4
24806: PUSH
24807: LD_INT 22
24809: PUSH
24810: LD_INT 3
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 21
24819: PUSH
24820: LD_INT 1
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 26
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 50
24839: PUSH
24840: EMPTY
24841: LIST
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: PPUSH
24849: CALL_OW 69
24853: PUSH
24854: LD_EXP 48
24858: PUSH
24859: EMPTY
24860: LIST
24861: DIFF
24862: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24863: LD_VAR 0 4
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PPUSH
24872: LD_STRING D3aa-Sci1-1
24874: PPUSH
24875: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24879: LD_EXP 48
24883: PPUSH
24884: LD_STRING D3aa-Bur-2
24886: PPUSH
24887: CALL_OW 88
// DialogueOff ;
24891: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24895: LD_STRING M3
24897: PPUSH
24898: CALL_OW 337
// end ;
24902: LD_VAR 0 2
24906: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24907: LD_EXP 9
24911: NOT
24912: IFFALSE 25250
24914: GO 24916
24916: DISABLE
24917: LD_INT 0
24919: PPUSH
24920: PPUSH
// begin enable ;
24921: ENABLE
// for amUnit in amSupportTroops do
24922: LD_ADDR_VAR 0 1
24926: PUSH
24927: LD_EXP 83
24931: PUSH
24932: FOR_IN
24933: IFFALSE 25248
// begin if See ( 3 , amUnit ) then
24935: LD_INT 3
24937: PPUSH
24938: LD_VAR 0 1
24942: PPUSH
24943: CALL_OW 292
24947: IFFALSE 25246
// begin dialog_amSupportTroops = true ;
24949: LD_ADDR_EXP 9
24953: PUSH
24954: LD_INT 1
24956: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
24957: LD_VAR 0 1
24961: PPUSH
24962: CALL_OW 87
// DialogueOn ;
24966: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24970: LD_ADDR_VAR 0 2
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 3
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 21
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 26
24997: PUSH
24998: LD_INT 1
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 50
25007: PUSH
25008: EMPTY
25009: LIST
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: PPUSH
25017: CALL_OW 69
25021: PUSH
25022: LD_EXP 48
25026: PUSH
25027: LD_EXP 49
25031: PUSH
25032: LD_EXP 51
25036: PUSH
25037: LD_EXP 52
25041: PUSH
25042: LD_EXP 53
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: DIFF
25054: ST_TO_ADDR
// if randomMale then
25055: LD_VAR 0 2
25059: IFFALSE 25126
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25061: LD_INT 22
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 21
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 26
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 50
25093: PUSH
25094: EMPTY
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PPUSH
25103: CALL_OW 69
25107: PPUSH
25108: LD_STRING D3b-RSol1-1
25110: PPUSH
25111: LD_STRING 
25113: PPUSH
25114: LD_INT 0
25116: PPUSH
25117: LD_INT 1
25119: PPUSH
25120: CALL 6976 0 5
25124: GO 25203
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25126: LD_ADDR_VAR 0 2
25130: PUSH
25131: LD_INT 22
25133: PUSH
25134: LD_INT 3
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 21
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 26
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 50
25163: PUSH
25164: EMPTY
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: PUSH
25178: LD_EXP 48
25182: PUSH
25183: EMPTY
25184: LIST
25185: DIFF
25186: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25187: LD_VAR 0 2
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: PPUSH
25196: LD_STRING D3b-RSol1-1
25198: PPUSH
25199: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25203: LD_EXP 49
25207: PPUSH
25208: CALL_OW 302
25212: IFFALSE 25226
// Say ( Gnyevko , D3b-Gny-1 ) ;
25214: LD_EXP 49
25218: PPUSH
25219: LD_STRING D3b-Gny-1
25221: PPUSH
25222: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25226: LD_EXP 48
25230: PPUSH
25231: LD_STRING D3b-Bur-1
25233: PPUSH
25234: CALL_OW 88
// DialogueOff ;
25238: CALL_OW 7
// exit ;
25242: POP
25243: POP
25244: GO 25250
// end ; end ;
25246: GO 24932
25248: POP
25249: POP
// end ;
25250: PPOPN 2
25252: END
// every 2 2$0 trigger dialog_amSupportTroops do
25253: LD_EXP 9
25257: IFFALSE 25341
25259: GO 25261
25261: DISABLE
// begin if IsOK ( Kovalyuk ) then
25262: LD_EXP 51
25266: PPUSH
25267: CALL_OW 302
25271: IFFALSE 25285
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25273: LD_EXP 51
25277: PPUSH
25278: LD_STRING D3b-Kov-1
25280: PPUSH
25281: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25285: LD_INT 22
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 21
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 26
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: PPUSH
25320: CALL_OW 69
25324: PPUSH
25325: LD_STRING D3b-RSol1-2
25327: PPUSH
25328: LD_STRING 
25330: PPUSH
25331: LD_INT 0
25333: PPUSH
25334: LD_INT 0
25336: PPUSH
25337: CALL 6976 0 5
// end ;
25341: END
// every 1 trigger not endCutscene do
25342: LD_EXP 31
25346: NOT
25347: IFFALSE 25365
25349: GO 25351
25351: DISABLE
// begin enable ;
25352: ENABLE
// SetLives ( Kurin , 1000 ) ;
25353: LD_EXP 60
25357: PPUSH
25358: LD_INT 1000
25360: PPUSH
25361: CALL_OW 234
// end ;
25365: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25366: LD_EXP 40
25370: PUSH
25371: LD_INT 35
25373: LESS
25374: IFFALSE 25602
25376: GO 25378
25378: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25379: LD_EXP 60
25383: PPUSH
25384: CALL_OW 87
// InGameOn ;
25388: CALL_OW 8
// DialogueOn ;
25392: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25396: LD_EXP 60
25400: PPUSH
25401: LD_STRING D5-Kur-1
25403: PPUSH
25404: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25408: LD_STRING QVehicles
25410: PPUSH
25411: CALL_OW 97
25415: PUSH
25416: LD_INT 1
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25467
25424: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25425: LD_EXP 48
25429: PPUSH
25430: LD_STRING D6a-Bur-1
25432: PPUSH
25433: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25437: LD_EXP 60
25441: PPUSH
25442: LD_STRING D6a-Kur-1
25444: PPUSH
25445: CALL_OW 94
// meetNearOmicronBase = true ;
25449: LD_ADDR_EXP 19
25453: PUSH
25454: LD_INT 1
25456: ST_TO_ADDR
// kurinCheckVehicles = true ;
25457: LD_ADDR_EXP 18
25461: PUSH
25462: LD_INT 1
25464: ST_TO_ADDR
// end ; 2 :
25465: GO 25594
25467: LD_INT 2
25469: DOUBLE
25470: EQUAL
25471: IFTRUE 25475
25473: GO 25522
25475: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25476: LD_EXP 48
25480: PPUSH
25481: LD_STRING D6b-Bur-1
25483: PPUSH
25484: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25488: LD_EXP 60
25492: PPUSH
25493: LD_STRING D6b-Kur-1
25495: PPUSH
25496: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25500: LD_EXP 48
25504: PPUSH
25505: LD_STRING D6b-Bur-2
25507: PPUSH
25508: CALL_OW 88
// meetNearOmicronBase = true ;
25512: LD_ADDR_EXP 19
25516: PUSH
25517: LD_INT 1
25519: ST_TO_ADDR
// end ; 3 :
25520: GO 25594
25522: LD_INT 3
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25593
25530: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25531: LD_EXP 48
25535: PPUSH
25536: LD_STRING D6c-Bur-1
25538: PPUSH
25539: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25543: LD_EXP 60
25547: PPUSH
25548: LD_STRING D6c-Kur-1
25550: PPUSH
25551: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25555: LD_EXP 48
25559: PPUSH
25560: LD_STRING D6c-Bur-2
25562: PPUSH
25563: CALL_OW 88
// kurinGiveMoreTime = true ;
25567: LD_ADDR_EXP 13
25571: PUSH
25572: LD_INT 1
25574: ST_TO_ADDR
// kurinOpinion = 0 ;
25575: LD_ADDR_EXP 26
25579: PUSH
25580: LD_INT 0
25582: ST_TO_ADDR
// counterIndex = 4 ;
25583: LD_ADDR_EXP 89
25587: PUSH
25588: LD_INT 4
25590: ST_TO_ADDR
// end ; end ;
25591: GO 25594
25593: POP
// InGameOff ;
25594: CALL_OW 9
// DialogueOff ;
25598: CALL_OW 7
// end ;
25602: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25603: LD_EXP 14
25607: PUSH
25608: LD_INT 35
25610: LESS
25611: PUSH
25612: LD_EXP 13
25616: AND
25617: IFFALSE 25650
25619: GO 25621
25621: DISABLE
// begin DialogueOn ;
25622: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25626: LD_EXP 60
25630: PPUSH
25631: LD_STRING D6c-Kur-2
25633: PPUSH
25634: CALL_OW 94
// DialogueOff ;
25638: CALL_OW 7
// meetNearOmicronBase = true ;
25642: LD_ADDR_EXP 19
25646: PUSH
25647: LD_INT 1
25649: ST_TO_ADDR
// end ;
25650: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25651: LD_EXP 19
25655: IFFALSE 26310
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
// begin mechs = [ ] ;
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: EMPTY
25673: ST_TO_ADDR
// vehs = [ ] ;
25674: LD_ADDR_VAR 0 4
25678: PUSH
25679: EMPTY
25680: ST_TO_ADDR
// haveVehs = 0 ;
25681: LD_ADDR_VAR 0 5
25685: PUSH
25686: LD_INT 0
25688: ST_TO_ADDR
// uc_side = 6 ;
25689: LD_ADDR_OWVAR 20
25693: PUSH
25694: LD_INT 6
25696: ST_TO_ADDR
// uc_nation = 3 ;
25697: LD_ADDR_OWVAR 21
25701: PUSH
25702: LD_INT 3
25704: ST_TO_ADDR
// for i := 1 to 2 do
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: DOUBLE
25711: LD_INT 1
25713: DEC
25714: ST_TO_ADDR
25715: LD_INT 2
25717: PUSH
25718: FOR_TO
25719: IFFALSE 25818
// begin PrepareMechanic ( false , 2 ) ;
25721: LD_INT 0
25723: PPUSH
25724: LD_INT 2
25726: PPUSH
25727: CALL_OW 383
// mech = CreateHuman ;
25731: LD_ADDR_VAR 0 2
25735: PUSH
25736: CALL_OW 44
25740: ST_TO_ADDR
// mechs = mechs ^ mech ;
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_VAR 0 3
25750: PUSH
25751: LD_VAR 0 2
25755: ADD
25756: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25757: LD_VAR 0 2
25761: PPUSH
25762: LD_EXP 66
25766: PPUSH
25767: CALL_OW 52
// ComExitBuilding ( mech ) ;
25771: LD_VAR 0 2
25775: PPUSH
25776: CALL_OW 122
// wait ( 0 0$1 ) ;
25780: LD_INT 35
25782: PPUSH
25783: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25787: LD_VAR 0 2
25791: PPUSH
25792: LD_EXP 59
25796: PPUSH
25797: CALL_OW 250
25801: PPUSH
25802: LD_EXP 59
25806: PPUSH
25807: CALL_OW 251
25811: PPUSH
25812: CALL_OW 171
// end ;
25816: GO 25718
25818: POP
25819: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25820: LD_INT 22
25822: PUSH
25823: LD_INT 3
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 21
25832: PUSH
25833: LD_INT 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 23
25842: PUSH
25843: LD_INT 3
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: PPUSH
25855: CALL_OW 69
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 21
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PPUSH
25884: CALL_OW 69
25888: EQUAL
25889: IFFALSE 25899
// produceOnlyForYou = true ;
25891: LD_ADDR_EXP 17
25895: PUSH
25896: LD_INT 1
25898: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25899: LD_INT 700
25901: PPUSH
25902: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25906: LD_INT 22
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 21
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 23
25928: PUSH
25929: LD_INT 3
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 3
25938: PUSH
25939: LD_INT 34
25941: PUSH
25942: LD_INT 51
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: PPUSH
25959: CALL_OW 69
25963: PUSH
25964: LD_INT 22
25966: PUSH
25967: LD_INT 3
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 21
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PPUSH
25988: CALL_OW 69
25992: PUSH
25993: LD_INT 2
25995: PLUS
25996: GREATEREQUAL
25997: IFFALSE 26280
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
25999: LD_ADDR_VAR 0 4
26003: PUSH
26004: LD_VAR 0 4
26008: PUSH
26009: LD_INT 22
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 21
26021: PUSH
26022: LD_INT 2
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 23
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 3
26041: PUSH
26042: LD_INT 34
26044: PUSH
26045: LD_INT 51
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 59
26061: PUSH
26062: EMPTY
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 69
26080: PUSH
26081: LD_INT 1
26083: ARRAY
26084: ADD
26085: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26086: LD_ADDR_VAR 0 4
26090: PUSH
26091: LD_VAR 0 4
26095: PUSH
26096: LD_INT 22
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 21
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 23
26118: PUSH
26119: LD_INT 3
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 3
26128: PUSH
26129: LD_INT 34
26131: PUSH
26132: LD_INT 51
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 3
26145: PUSH
26146: LD_INT 59
26148: PUSH
26149: EMPTY
26150: LIST
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: PUSH
26168: LD_INT 2
26170: ARRAY
26171: ADD
26172: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26173: LD_ADDR_EXP 75
26177: PUSH
26178: LD_EXP 75
26182: PUSH
26183: LD_VAR 0 4
26187: ADD
26188: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26189: LD_VAR 0 4
26193: PPUSH
26194: LD_INT 6
26196: PPUSH
26197: CALL_OW 235
// produceMoreVehicles = true ;
26201: LD_ADDR_EXP 16
26205: PUSH
26206: LD_INT 1
26208: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26209: LD_VAR 0 3
26213: PUSH
26214: LD_INT 1
26216: ARRAY
26217: PPUSH
26218: LD_VAR 0 4
26222: PUSH
26223: LD_INT 1
26225: ARRAY
26226: PPUSH
26227: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26231: LD_VAR 0 3
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: PPUSH
26240: LD_VAR 0 4
26244: PUSH
26245: LD_INT 2
26247: ARRAY
26248: PPUSH
26249: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26253: LD_EXP 18
26257: PUSH
26258: LD_EXP 26
26262: PUSH
26263: LD_INT 0
26265: EQUAL
26266: NOT
26267: AND
26268: IFFALSE 26278
// kurinOpinion = 1 ;
26270: LD_ADDR_EXP 26
26274: PUSH
26275: LD_INT 1
26277: ST_TO_ADDR
// end else
26278: GO 26310
// begin if kurinCheckVehicles then
26280: LD_EXP 18
26284: IFFALSE 26310
// begin DialogueOn ;
26286: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26290: LD_EXP 60
26294: PPUSH
26295: LD_STRING D6d-Kur-1
26297: PPUSH
26298: CALL_OW 94
// DialogueOff ;
26302: CALL_OW 7
// Lose_Vehicles ;
26306: CALL 20141 0 0
// end ; end ; end ;
26310: PPOPN 5
26312: END
// every 0 0$1 trigger meetNearOmicronBase do
26313: LD_EXP 19
26317: IFFALSE 26537
26319: GO 26321
26321: DISABLE
// begin spawnCrates = false ;
26322: LD_ADDR_EXP 5
26326: PUSH
26327: LD_INT 0
26329: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26330: LD_INT 6
26332: PPUSH
26333: LD_INT 1
26335: PPUSH
26336: LD_INT 2
26338: PPUSH
26339: LD_INT 1
26341: PPUSH
26342: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26346: LD_INT 0
26348: PPUSH
26349: LD_INT 3
26351: PPUSH
26352: LD_INT 0
26354: PPUSH
26355: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26359: LD_STRING M3a
26361: PPUSH
26362: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26366: LD_STRING M5
26368: PPUSH
26369: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26373: LD_INT 15
26375: PPUSH
26376: LD_INT 1
26378: PPUSH
26379: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26383: LD_EXP 75
26387: PPUSH
26388: LD_INT 75
26390: PPUSH
26391: LD_INT 38
26393: PPUSH
26394: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26398: LD_EXP 74
26402: PPUSH
26403: LD_INT 75
26405: PPUSH
26406: LD_INT 38
26408: PPUSH
26409: CALL_OW 111
// counterIndex = 2 ;
26413: LD_ADDR_EXP 89
26417: PUSH
26418: LD_INT 2
26420: ST_TO_ADDR
// if not kurinOpinion = 0 then
26421: LD_EXP 26
26425: PUSH
26426: LD_INT 0
26428: EQUAL
26429: NOT
26430: IFFALSE 26440
// kurinOpinion = 1 ;
26432: LD_ADDR_EXP 26
26436: PUSH
26437: LD_INT 1
26439: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26440: LD_INT 1
26442: PPUSH
26443: LD_INT 1
26445: PPUSH
26446: LD_INT 22
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 21
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PPUSH
26470: CALL_OW 69
26474: PPUSH
26475: LD_INT 13
26477: PPUSH
26478: LD_INT 28
26480: PPUSH
26481: LD_INT 17
26483: PPUSH
26484: LD_INT 29
26486: PPUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 3
26492: PUSH
26493: LD_INT 4
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: LIST
26500: PUSH
26501: LD_OWVAR 67
26505: ARRAY
26506: PPUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 4
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: LIST
26520: PUSH
26521: LD_OWVAR 67
26525: ARRAY
26526: PPUSH
26527: LD_INT 0
26529: PPUSH
26530: LD_INT 0
26532: PPUSH
26533: CALL 12107 0 11
// end ;
26537: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26538: LD_EXP 15
26542: PUSH
26543: LD_INT 35
26545: LESS
26546: PUSH
26547: LD_EXP 89
26551: PUSH
26552: LD_INT 2
26554: EQUAL
26555: AND
26556: IFFALSE 26605
26558: GO 26560
26560: DISABLE
// begin DialogueOn ;
26561: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26565: LD_EXP 60
26569: PPUSH
26570: LD_STRING D7a-Kur-1
26572: PPUSH
26573: CALL_OW 94
// DialogueOff ;
26577: CALL_OW 7
// counterIndex = 3 ;
26581: LD_ADDR_EXP 89
26585: PUSH
26586: LD_INT 3
26588: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26589: LD_ADDR_EXP 15
26593: PUSH
26594: LD_INT 4200
26596: ST_TO_ADDR
// kurinOpinion = 0 ;
26597: LD_ADDR_EXP 26
26601: PUSH
26602: LD_INT 0
26604: ST_TO_ADDR
// end ;
26605: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26606: LD_EXP 15
26610: PUSH
26611: LD_INT 35
26613: LESS
26614: PUSH
26615: LD_EXP 89
26619: PUSH
26620: LD_INT 3
26622: EQUAL
26623: AND
26624: IFFALSE 26633
26626: GO 26628
26628: DISABLE
// Lose_Delay ;
26629: CALL 20171 0 0
26633: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26634: LD_EXP 19
26638: PUSH
26639: LD_INT 15
26641: PPUSH
26642: LD_INT 22
26644: PUSH
26645: LD_INT 3
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 21
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PPUSH
26666: CALL_OW 71
26670: PUSH
26671: LD_INT 0
26673: EQUAL
26674: AND
26675: IFFALSE 26763
26677: GO 26679
26679: DISABLE
// begin counterEnable = false ;
26680: LD_ADDR_EXP 88
26684: PUSH
26685: LD_INT 0
26687: ST_TO_ADDR
// Display_strings = [ ] ;
26688: LD_ADDR_OWVAR 47
26692: PUSH
26693: EMPTY
26694: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26695: LD_INT 15
26697: PPUSH
26698: LD_INT 0
26700: PPUSH
26701: CALL_OW 424
// canExitBattlefield = false ;
26705: LD_ADDR_EXP 24
26709: PUSH
26710: LD_INT 0
26712: ST_TO_ADDR
// DialogueOn ;
26713: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26717: LD_EXP 48
26721: PPUSH
26722: LD_STRING D7-Bur-1
26724: PPUSH
26725: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26729: LD_EXP 60
26733: PPUSH
26734: LD_STRING D7-Kur-1
26736: PPUSH
26737: CALL_OW 94
// DialogueOff ;
26741: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26745: LD_STRING M5a
26747: PPUSH
26748: CALL_OW 337
// Query ( QRefuel ) ;
26752: LD_STRING QRefuel
26754: PPUSH
26755: CALL_OW 97
// KirovAttackOmicron ;
26759: CALL 17897 0 0
// end ;
26763: END
// every 1 trigger not canExitBattlefield do var unit ;
26764: LD_EXP 24
26768: NOT
26769: IFFALSE 26938
26771: GO 26773
26773: DISABLE
26774: LD_INT 0
26776: PPUSH
// begin enable ;
26777: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26778: LD_ADDR_VAR 0 1
26782: PUSH
26783: LD_INT 22
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 21
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: PUSH
26830: FOR_IN
26831: IFFALSE 26936
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26833: LD_VAR 0 1
26837: PPUSH
26838: LD_INT 26
26840: PPUSH
26841: CALL_OW 308
26845: NOT
26846: PUSH
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_INT 21
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PPUSH
26862: CALL_OW 72
26866: PUSH
26867: LD_VAR 0 1
26871: PPUSH
26872: CALL_OW 313
26876: OR
26877: AND
26878: IFFALSE 26934
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26880: LD_VAR 0 1
26884: PPUSH
26885: LD_INT 26
26887: PPUSH
26888: CALL_OW 113
// if not dialog_stop then
26892: LD_EXP 11
26896: NOT
26897: IFFALSE 26934
// begin dialog_stop = true ;
26899: LD_ADDR_EXP 11
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26907: LD_EXP 60
26911: PPUSH
26912: LD_STRING D12-Kur-1
26914: PPUSH
26915: CALL_OW 88
// wait ( 0 0$5 ) ;
26919: LD_INT 175
26921: PPUSH
26922: CALL_OW 67
// dialog_stop = false ;
26926: LD_ADDR_EXP 11
26930: PUSH
26931: LD_INT 0
26933: ST_TO_ADDR
// end ; end ;
26934: GO 26830
26936: POP
26937: POP
// end ;
26938: PPOPN 1
26940: END
// every 1 do var unit ;
26941: GO 26943
26943: DISABLE
26944: LD_INT 0
26946: PPUSH
// begin enable ;
26947: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26948: LD_ADDR_VAR 0 1
26952: PUSH
26953: LD_INT 22
26955: PUSH
26956: LD_INT 3
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 21
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 21
26978: PUSH
26979: LD_INT 2
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PPUSH
26995: CALL_OW 69
26999: PUSH
27000: FOR_IN
27001: IFFALSE 27076
// if IsInArea ( unit , SecondKurinBase ) then
27003: LD_VAR 0 1
27007: PPUSH
27008: LD_INT 20
27010: PPUSH
27011: CALL_OW 308
27015: IFFALSE 27074
// begin ComMoveXY ( unit , 200 , 114 ) ;
27017: LD_VAR 0 1
27021: PPUSH
27022: LD_INT 200
27024: PPUSH
27025: LD_INT 114
27027: PPUSH
27028: CALL_OW 111
// if not dialog_stop then
27032: LD_EXP 11
27036: NOT
27037: IFFALSE 27074
// begin dialog_stop = true ;
27039: LD_ADDR_EXP 11
27043: PUSH
27044: LD_INT 1
27046: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27047: LD_EXP 60
27051: PPUSH
27052: LD_STRING D12-Kur-1
27054: PPUSH
27055: CALL_OW 88
// wait ( 0 0$5 ) ;
27059: LD_INT 175
27061: PPUSH
27062: CALL_OW 67
// dialog_stop = false ;
27066: LD_ADDR_EXP 11
27070: PUSH
27071: LD_INT 0
27073: ST_TO_ADDR
// end ; end ;
27074: GO 27000
27076: POP
27077: POP
// end ;
27078: PPOPN 1
27080: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
27081: LD_EXP 19
27085: NOT
27086: PUSH
27087: LD_INT 290
27089: PPUSH
27090: CALL_OW 302
27094: AND
27095: IFFALSE 27411
27097: GO 27099
27099: DISABLE
27100: LD_INT 0
27102: PPUSH
27103: PPUSH
// begin enable ;
27104: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27105: LD_ADDR_VAR 0 1
27109: PUSH
27110: LD_INT 13
27112: PPUSH
27113: LD_INT 22
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: LD_INT 21
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 21
27138: PUSH
27139: LD_INT 2
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 21
27148: PUSH
27149: LD_INT 3
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PPUSH
27166: CALL_OW 70
27170: PUSH
27171: FOR_IN
27172: IFFALSE 27409
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27174: LD_VAR 0 1
27178: PPUSH
27179: LD_INT 22
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: LD_INT 21
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 21
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PPUSH
27221: CALL_OW 69
27225: PPUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 74
27235: PPUSH
27236: CALL_OW 296
27240: PUSH
27241: LD_INT 17
27243: LESS
27244: IFFALSE 27407
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
27246: LD_INT 22
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 21
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 21
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 69
27292: PPUSH
27293: LD_VAR 0 1
27297: PPUSH
27298: CALL_OW 74
27302: PPUSH
27303: LD_INT 69
27305: PPUSH
27306: LD_INT 85
27308: PPUSH
27309: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27313: LD_ADDR_VAR 0 2
27317: PUSH
27318: LD_INT 1
27320: PPUSH
27321: LD_INT 2
27323: PPUSH
27324: CALL_OW 12
27328: ST_TO_ADDR
// if not dialog_stop then
27329: LD_EXP 11
27333: NOT
27334: IFFALSE 27407
// begin dialog_stop = true ;
27336: LD_ADDR_EXP 11
27340: PUSH
27341: LD_INT 1
27343: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27344: LD_VAR 0 2
27348: PUSH
27349: LD_INT 1
27351: EQUAL
27352: PUSH
27353: LD_EXP 49
27357: PPUSH
27358: CALL_OW 302
27362: NOT
27363: OR
27364: IFFALSE 27380
// SayRadio ( Kurin , D11-Kur-1 ) else
27366: LD_EXP 60
27370: PPUSH
27371: LD_STRING D11-Kur-1
27373: PPUSH
27374: CALL_OW 94
27378: GO 27392
// Say ( Gnyevko , D11-Gny-1 ) ;
27380: LD_EXP 49
27384: PPUSH
27385: LD_STRING D11-Gny-1
27387: PPUSH
27388: CALL_OW 88
// wait ( 0 0$5 ) ;
27392: LD_INT 175
27394: PPUSH
27395: CALL_OW 67
// dialog_stop = false ;
27399: LD_ADDR_EXP 11
27403: PUSH
27404: LD_INT 0
27406: ST_TO_ADDR
// end ; end ;
27407: GO 27171
27409: POP
27410: POP
// end ;
27411: PPOPN 2
27413: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets ;
27414: LD_INT 290
27416: PPUSH
27417: CALL_OW 301
27421: PUSH
27422: LD_INT 22
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 21
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PPUSH
27446: CALL_OW 69
27450: PUSH
27451: LD_INT 5
27453: LESS
27454: AND
27455: IFFALSE 29730
27457: GO 27459
27459: DISABLE
27460: LD_INT 0
27462: PPUSH
27463: PPUSH
27464: PPUSH
27465: PPUSH
27466: PPUSH
27467: PPUSH
27468: PPUSH
27469: PPUSH
// begin omicronSurrender = true ;
27470: LD_ADDR_EXP 23
27474: PUSH
27475: LD_INT 1
27477: ST_TO_ADDR
// canExitBattlefield = true ;
27478: LD_ADDR_EXP 24
27482: PUSH
27483: LD_INT 1
27485: ST_TO_ADDR
// enableOmicronAI = false ;
27486: LD_ADDR_EXP 29
27490: PUSH
27491: LD_INT 0
27493: ST_TO_ADDR
// endCutscene = true ;
27494: LD_ADDR_EXP 31
27498: PUSH
27499: LD_INT 1
27501: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27502: LD_INT 1
27504: PPUSH
27505: LD_INT 3
27507: PPUSH
27508: LD_INT 1
27510: PPUSH
27511: LD_INT 0
27513: PPUSH
27514: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27518: LD_INT 2
27520: PPUSH
27521: LD_INT 3
27523: PPUSH
27524: LD_INT 1
27526: PPUSH
27527: LD_INT 1
27529: PPUSH
27530: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
27534: LD_EXP 48
27538: PPUSH
27539: CALL_OW 87
// uc_side = 1 ;
27543: LD_ADDR_OWVAR 20
27547: PUSH
27548: LD_INT 1
27550: ST_TO_ADDR
// uc_nation = 1 ;
27551: LD_ADDR_OWVAR 21
27555: PUSH
27556: LD_INT 1
27558: ST_TO_ADDR
// hc_name :=  ;
27559: LD_ADDR_OWVAR 26
27563: PUSH
27564: LD_STRING 
27566: ST_TO_ADDR
// hc_gallery =  ;
27567: LD_ADDR_OWVAR 33
27571: PUSH
27572: LD_STRING 
27574: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27575: LD_INT 1
27577: PPUSH
27578: LD_INT 1
27580: PPUSH
27581: CALL_OW 381
// tmpUs = CreateHuman ;
27585: LD_ADDR_VAR 0 2
27589: PUSH
27590: CALL_OW 44
27594: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27595: LD_INT 22
27597: PUSH
27598: LD_INT 3
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PPUSH
27605: CALL_OW 69
27609: PPUSH
27610: CALL_OW 141
// InGameOn ;
27614: CALL_OW 8
// DialogueOn ;
27618: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
27622: LD_INT 26
27624: PPUSH
27625: LD_INT 33
27627: PPUSH
27628: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
27632: LD_VAR 0 2
27636: PPUSH
27637: LD_STRING D8-Sol1-1
27639: PPUSH
27640: CALL_OW 94
// if IsOk ( Kovalyuk ) then
27644: LD_EXP 51
27648: PPUSH
27649: CALL_OW 302
27653: IFFALSE 27667
// Say ( Kovalyuk , D8-Kov-1 ) ;
27655: LD_EXP 51
27659: PPUSH
27660: LD_STRING D8-Kov-1
27662: PPUSH
27663: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
27667: LD_ADDR_VAR 0 3
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_INT 3
27677: PUSH
27678: EMPTY
27679: LIST
27680: LIST
27681: PUSH
27682: LD_INT 21
27684: PUSH
27685: LD_INT 1
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 26
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: PPUSH
27707: CALL_OW 69
27711: PPUSH
27712: LD_STRING D8-RSol1-1
27714: PPUSH
27715: LD_STRING 
27717: PPUSH
27718: LD_INT 0
27720: PPUSH
27721: LD_INT 0
27723: PPUSH
27724: CALL 6976 0 5
27728: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
27729: LD_EXP 49
27733: PPUSH
27734: CALL_OW 302
27738: IFFALSE 27752
// Say ( Gnyevko , D8-Gny-1 ) ;
27740: LD_EXP 49
27744: PPUSH
27745: LD_STRING D8-Gny-1
27747: PPUSH
27748: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
27752: LD_INT 22
27754: PUSH
27755: LD_INT 3
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 21
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 26
27774: PUSH
27775: LD_INT 1
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: PPUSH
27787: CALL_OW 69
27791: PUSH
27792: LD_VAR 0 3
27796: DIFF
27797: PPUSH
27798: LD_STRING D8-RSol2-1
27800: PPUSH
27801: LD_STRING 
27803: PPUSH
27804: LD_INT 0
27806: PPUSH
27807: LD_INT 0
27809: PPUSH
27810: CALL 6976 0 5
// DialogueOff ;
27814: CALL_OW 7
// PrepareArabian ;
27818: CALL 6424 0 0
// CenterNowOnXY ( 234 , 122 ) ;
27822: LD_INT 234
27824: PPUSH
27825: LD_INT 122
27827: PPUSH
27828: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
27832: LD_EXP 86
27836: PPUSH
27837: LD_INT 221
27839: PPUSH
27840: LD_INT 110
27842: PPUSH
27843: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27847: LD_EXP 87
27851: PPUSH
27852: LD_INT 21
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PPUSH
27862: CALL_OW 72
27866: PPUSH
27867: LD_INT 221
27869: PPUSH
27870: LD_INT 110
27872: PPUSH
27873: CALL_OW 114
// wait ( 0 0$7 ) ;
27877: LD_INT 245
27879: PPUSH
27880: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
27884: LD_EXP 87
27888: PPUSH
27889: LD_INT 221
27891: PPUSH
27892: LD_INT 110
27894: PPUSH
27895: CALL_OW 174
// wait ( 0 0$8 ) ;
27899: LD_INT 280
27901: PPUSH
27902: CALL_OW 67
// music_nat = nation_arabian ;
27906: LD_ADDR_OWVAR 71
27910: PUSH
27911: LD_INT 2
27913: ST_TO_ADDR
// music_class = music_combat ;
27914: LD_ADDR_OWVAR 72
27918: PUSH
27919: LD_INT 1
27921: ST_TO_ADDR
// game_speed = 4 ;
27922: LD_ADDR_OWVAR 65
27926: PUSH
27927: LD_INT 4
27929: ST_TO_ADDR
// DialogueOn ;
27930: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
27934: LD_EXP 81
27938: PPUSH
27939: LD_STRING D9-Gri-1
27941: PPUSH
27942: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
27946: LD_EXP 60
27950: PPUSH
27951: LD_STRING D9-Kur-1
27953: PPUSH
27954: CALL_OW 94
// DialogueOff ;
27958: CALL_OW 7
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
27962: LD_EXP 77
27966: PPUSH
27967: LD_INT 25
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: PPUSH
27982: LD_INT 158
27984: PPUSH
27985: LD_INT 105
27987: PPUSH
27988: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
27992: LD_EXP 77
27996: PPUSH
27997: LD_INT 25
27999: PUSH
28000: LD_INT 4
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PPUSH
28007: CALL_OW 72
28011: PPUSH
28012: LD_INT 158
28014: PPUSH
28015: LD_INT 105
28017: PPUSH
28018: CALL_OW 111
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28022: LD_EXP 77
28026: PPUSH
28027: LD_INT 25
28029: PUSH
28030: LD_INT 2
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PPUSH
28037: CALL_OW 72
28041: PPUSH
28042: LD_EXP 59
28046: PPUSH
28047: CALL_OW 250
28051: PPUSH
28052: LD_EXP 59
28056: PPUSH
28057: CALL_OW 251
28061: PPUSH
28062: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28066: LD_EXP 77
28070: PPUSH
28071: LD_INT 25
28073: PUSH
28074: LD_INT 4
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PPUSH
28081: CALL_OW 72
28085: PPUSH
28086: LD_EXP 59
28090: PPUSH
28091: CALL_OW 250
28095: PPUSH
28096: LD_EXP 59
28100: PPUSH
28101: CALL_OW 251
28105: PPUSH
28106: CALL_OW 171
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28110: LD_EXP 73
28114: PPUSH
28115: LD_INT 158
28117: PPUSH
28118: LD_INT 105
28120: PPUSH
28121: CALL_OW 111
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28125: LD_EXP 73
28129: PPUSH
28130: LD_EXP 59
28134: PPUSH
28135: CALL_OW 250
28139: PPUSH
28140: LD_EXP 59
28144: PPUSH
28145: CALL_OW 251
28149: PPUSH
28150: CALL_OW 171
// wait ( 0 0$2.5 ) ;
28154: LD_INT 88
28156: PPUSH
28157: CALL_OW 67
// DialogueOn ;
28161: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28165: LD_EXP 81
28169: PPUSH
28170: LD_STRING D9-Gri-2
28172: PPUSH
28173: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28177: LD_EXP 60
28181: PPUSH
28182: LD_STRING D9-Kur-2
28184: PPUSH
28185: CALL_OW 94
// DialogueOff ;
28189: CALL_OW 7
// repeat wait ( 1 ) ;
28193: LD_INT 1
28195: PPUSH
28196: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28200: LD_EXP 81
28204: PPUSH
28205: CALL_OW 256
28209: PUSH
28210: LD_INT 1000
28212: LESS
28213: IFFALSE 28193
// DialogueOn ;
28215: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28219: LD_EXP 81
28223: PPUSH
28224: LD_STRING D9-Gri-3
28226: PPUSH
28227: CALL_OW 94
// DialogueOff ;
28231: CALL_OW 7
// KillUnit ( Grishko ) ;
28235: LD_EXP 81
28239: PPUSH
28240: CALL_OW 66
// wait ( 0 0$12 ) ;
28244: LD_INT 420
28246: PPUSH
28247: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28251: LD_EXP 60
28255: PPUSH
28256: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28260: LD_EXP 60
28264: PPUSH
28265: LD_STRING D9-Kur-3
28267: PPUSH
28268: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28272: LD_INT 176
28274: PPUSH
28275: LD_INT 110
28277: PPUSH
28278: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28282: LD_EXP 87
28286: PPUSH
28287: LD_INT 21
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PPUSH
28297: CALL_OW 72
28301: PPUSH
28302: LD_INT 221
28304: PPUSH
28305: LD_INT 110
28307: PPUSH
28308: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28312: LD_EXP 86
28316: PPUSH
28317: LD_INT 161
28319: PPUSH
28320: LD_INT 109
28322: PPUSH
28323: CALL_OW 114
// wait ( 0 0$7 ) ;
28327: LD_INT 245
28329: PPUSH
28330: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28334: LD_EXP 87
28338: PPUSH
28339: LD_INT 161
28341: PPUSH
28342: LD_INT 109
28344: PPUSH
28345: CALL_OW 114
// wait ( 0 0$11 ) ;
28349: LD_INT 385
28351: PPUSH
28352: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28356: LD_EXP 60
28360: PPUSH
28361: LD_EXP 66
28365: PPUSH
28366: CALL_OW 120
// DialogueOn ;
28370: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28374: LD_EXP 60
28378: PPUSH
28379: LD_STRING D9a-Kur-1
28381: PPUSH
28382: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28386: LD_EXP 48
28390: PPUSH
28391: LD_STRING D9a-Bur-1
28393: PPUSH
28394: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28398: LD_EXP 60
28402: PPUSH
28403: LD_STRING D9a-Kur-2
28405: PPUSH
28406: CALL_OW 94
// DialogueOff ;
28410: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28414: LD_EXP 78
28418: PPUSH
28419: CALL_OW 122
// wait ( 0 0$1 ) ;
28423: LD_INT 35
28425: PPUSH
28426: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28430: LD_EXP 78
28434: PPUSH
28435: LD_EXP 59
28439: PPUSH
28440: CALL_OW 250
28444: PPUSH
28445: LD_EXP 59
28449: PPUSH
28450: CALL_OW 251
28454: PPUSH
28455: CALL_OW 111
// immortalSurvivors = true ;
28459: LD_ADDR_EXP 25
28463: PUSH
28464: LD_INT 1
28466: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28467: LD_ADDR_VAR 0 2
28471: PUSH
28472: LD_INT 22
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 21
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 50
28494: PUSH
28495: EMPTY
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL_OW 69
28507: PUSH
28508: FOR_IN
28509: IFFALSE 28522
// RemoveUnit ( tmpUS ) ;
28511: LD_VAR 0 2
28515: PPUSH
28516: CALL_OW 64
28520: GO 28508
28522: POP
28523: POP
// repeat wait ( 0 0$1 ) ;
28524: LD_INT 35
28526: PPUSH
28527: CALL_OW 67
// until IsDead ( Kurin ) ;
28531: LD_EXP 60
28535: PPUSH
28536: CALL_OW 301
28540: IFFALSE 28524
// wait ( 0 0$1 ) ;
28542: LD_INT 35
28544: PPUSH
28545: CALL_OW 67
// nearTurrets = [ ] ;
28549: LD_ADDR_VAR 0 8
28553: PUSH
28554: EMPTY
28555: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
28556: LD_ADDR_VAR 0 7
28560: PUSH
28561: LD_INT 22
28563: PUSH
28564: LD_INT 6
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 30
28573: PUSH
28574: LD_INT 32
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 50
28583: PUSH
28584: EMPTY
28585: LIST
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: ST_TO_ADDR
// for i = 1 to 2 do
28597: LD_ADDR_VAR 0 1
28601: PUSH
28602: DOUBLE
28603: LD_INT 1
28605: DEC
28606: ST_TO_ADDR
28607: LD_INT 2
28609: PUSH
28610: FOR_TO
28611: IFFALSE 28720
// begin nearTurrets = nearTurrets ^ NearestUnitToUnit ( turrets , beriaDepot ) ;
28613: LD_ADDR_VAR 0 8
28617: PUSH
28618: LD_VAR 0 8
28622: PUSH
28623: LD_VAR 0 7
28627: PPUSH
28628: LD_EXP 59
28632: PPUSH
28633: CALL_OW 74
28637: ADD
28638: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
28639: LD_ADDR_VAR 0 7
28643: PUSH
28644: LD_VAR 0 7
28648: PUSH
28649: LD_VAR 0 8
28653: DIFF
28654: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
28655: LD_ADDR_VAR 0 3
28659: PUSH
28660: LD_VAR 0 8
28664: PUSH
28665: LD_VAR 0 1
28669: ARRAY
28670: PPUSH
28671: CALL_OW 313
28675: PUSH
28676: LD_INT 1
28678: ARRAY
28679: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28680: LD_VAR 0 3
28684: PPUSH
28685: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28689: LD_VAR 0 3
28693: PPUSH
28694: LD_EXP 59
28698: PPUSH
28699: CALL_OW 250
28703: PPUSH
28704: LD_EXP 59
28708: PPUSH
28709: CALL_OW 251
28713: PPUSH
28714: CALL_OW 171
// end ;
28718: GO 28610
28720: POP
28721: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_INT 22
28729: PUSH
28730: LD_INT 6
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 21
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 2
28749: PUSH
28750: LD_INT 30
28752: PUSH
28753: LD_INT 6
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 30
28762: PUSH
28763: LD_INT 7
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: LIST
28779: PPUSH
28780: CALL_OW 69
28784: PUSH
28785: LD_INT 1
28787: ARRAY
28788: PPUSH
28789: CALL_OW 313
28793: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28794: LD_VAR 0 3
28798: PPUSH
28799: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28803: LD_VAR 0 3
28807: PPUSH
28808: LD_EXP 59
28812: PPUSH
28813: CALL_OW 250
28817: PPUSH
28818: LD_EXP 59
28822: PPUSH
28823: CALL_OW 251
28827: PPUSH
28828: CALL_OW 171
// wait ( 0 0$14 ) ;
28832: LD_INT 490
28834: PPUSH
28835: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
28839: LD_INT 26
28841: PPUSH
28842: LD_INT 22
28844: PUSH
28845: LD_INT 6
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 21
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PPUSH
28866: CALL_OW 70
28870: PPUSH
28871: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
28875: LD_ADDR_VAR 0 1
28879: PUSH
28880: LD_INT 26
28882: PPUSH
28883: LD_INT 22
28885: PUSH
28886: LD_INT 6
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 21
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 70
28911: PUSH
28912: FOR_IN
28913: IFFALSE 28978
// begin tmpRu = UnitsInside ( i ) ;
28915: LD_ADDR_VAR 0 3
28919: PUSH
28920: LD_VAR 0 1
28924: PPUSH
28925: CALL_OW 313
28929: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
28930: LD_VAR 0 3
28934: PUSH
28935: LD_INT 1
28937: ARRAY
28938: PPUSH
28939: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28943: LD_VAR 0 3
28947: PUSH
28948: LD_INT 1
28950: ARRAY
28951: PPUSH
28952: LD_EXP 59
28956: PPUSH
28957: CALL_OW 250
28961: PPUSH
28962: LD_EXP 59
28966: PPUSH
28967: CALL_OW 251
28971: PPUSH
28972: CALL_OW 171
// end ;
28976: GO 28912
28978: POP
28979: POP
// wait ( 0 0$1 ) ;
28980: LD_INT 35
28982: PPUSH
28983: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28987: LD_INT 26
28989: PPUSH
28990: LD_INT 22
28992: PUSH
28993: LD_INT 6
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 21
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PPUSH
29014: CALL_OW 70
29018: PPUSH
29019: LD_EXP 59
29023: PPUSH
29024: CALL_OW 250
29028: PPUSH
29029: LD_EXP 59
29033: PPUSH
29034: CALL_OW 251
29038: PPUSH
29039: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29043: LD_EXP 73
29047: PPUSH
29048: CALL_OW 313
29052: PUSH
29053: LD_INT 1
29055: ARRAY
29056: PPUSH
29057: CALL_OW 121
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
29061: LD_INT 22
29063: PUSH
29064: LD_INT 3
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 21
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PPUSH
29085: CALL_OW 69
29089: PPUSH
29090: CALL_OW 121
// wait ( 0 0$1 ) ;
29094: LD_INT 35
29096: PPUSH
29097: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29101: LD_INT 22
29103: PUSH
29104: LD_INT 3
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 21
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PPUSH
29125: CALL_OW 69
29129: PPUSH
29130: LD_EXP 61
29134: PPUSH
29135: CALL_OW 250
29139: PPUSH
29140: LD_EXP 61
29144: PPUSH
29145: CALL_OW 251
29149: PPUSH
29150: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29154: LD_INT 22
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 21
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PPUSH
29178: CALL_OW 69
29182: PPUSH
29183: LD_EXP 61
29187: PPUSH
29188: CALL_OW 250
29192: PPUSH
29193: LD_EXP 61
29197: PPUSH
29198: CALL_OW 251
29202: PPUSH
29203: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
29207: LD_EXP 48
29211: PPUSH
29212: CALL_OW 87
// wait ( 0 0$1 ) ;
29216: LD_INT 35
29218: PPUSH
29219: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 ;
29223: LD_EXP 48
29227: PPUSH
29228: LD_EXP 61
29232: PPUSH
29233: CALL_OW 296
29237: PUSH
29238: LD_INT 8
29240: LESS
29241: IFFALSE 29154
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
29243: LD_EXP 48
29247: PUSH
29248: LD_EXP 61
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PPUSH
29257: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
29261: LD_EXP 48
29265: PPUSH
29266: LD_EXP 61
29270: PPUSH
29271: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
29275: LD_EXP 61
29279: PPUSH
29280: LD_EXP 48
29284: PPUSH
29285: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
29289: LD_EXP 48
29293: PPUSH
29294: LD_STRING D10a-Bur-1
29296: PPUSH
29297: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
29301: LD_EXP 61
29305: PPUSH
29306: LD_STRING D10a-Pop-1
29308: PPUSH
29309: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
29313: LD_EXP 48
29317: PPUSH
29318: LD_STRING D10a-Bur-2
29320: PPUSH
29321: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
29325: LD_EXP 61
29329: PPUSH
29330: LD_STRING D10a-Pop-2
29332: PPUSH
29333: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
29337: LD_EXP 48
29341: PPUSH
29342: LD_STRING D10a-Bur-3
29344: PPUSH
29345: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
29349: LD_EXP 61
29353: PPUSH
29354: LD_STRING D10a-Pop-3
29356: PPUSH
29357: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
29361: LD_EXP 48
29365: PPUSH
29366: LD_STRING D10a-Bur-4
29368: PPUSH
29369: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
29373: LD_EXP 61
29377: PPUSH
29378: LD_STRING D10a-Pop-4
29380: PPUSH
29381: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
29385: LD_EXP 48
29389: PPUSH
29390: LD_STRING D10a-Bur-5
29392: PPUSH
29393: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
29397: LD_EXP 61
29401: PPUSH
29402: LD_STRING D10a-Pop-5
29404: PPUSH
29405: CALL_OW 88
// survivorsArabianAttack = [ ] ;
29409: LD_ADDR_EXP 78
29413: PUSH
29414: EMPTY
29415: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
29416: LD_ADDR_EXP 78
29420: PUSH
29421: LD_INT 22
29423: PUSH
29424: LD_INT 6
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 50
29433: PUSH
29434: EMPTY
29435: LIST
29436: PUSH
29437: LD_INT 21
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: LIST
29451: PPUSH
29452: CALL_OW 69
29456: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
29457: LD_INT 22
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 21
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PPUSH
29481: CALL_OW 69
29485: PPUSH
29486: LD_INT 83
29488: PPUSH
29489: LD_INT 157
29491: PPUSH
29492: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
29496: LD_EXP 78
29500: PPUSH
29501: LD_INT 83
29503: PPUSH
29504: LD_INT 157
29506: PPUSH
29507: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
29511: LD_EXP 48
29515: PPUSH
29516: CALL_OW 87
// wait ( 0 0$1 ) ;
29520: LD_INT 35
29522: PPUSH
29523: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
29527: LD_EXP 48
29531: PPUSH
29532: LD_EXP 59
29536: PPUSH
29537: CALL_OW 296
29541: PUSH
29542: LD_INT 23
29544: GREATER
29545: IFFALSE 29511
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
29547: LD_INT 113
29549: PPUSH
29550: LD_INT 96
29552: PPUSH
29553: LD_INT 3
29555: PPUSH
29556: LD_INT 12
29558: NEG
29559: PPUSH
29560: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
29564: LD_INT 113
29566: PPUSH
29567: LD_INT 96
29569: PPUSH
29570: CALL_OW 86
// canDestroyBeriaBase = true ;
29574: LD_ADDR_EXP 28
29578: PUSH
29579: LD_INT 1
29581: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
29582: LD_ADDR_VAR 0 5
29586: PUSH
29587: LD_INT 25
29589: PPUSH
29590: LD_INT 22
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 21
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PPUSH
29614: CALL_OW 70
29618: ST_TO_ADDR
// for i = 1 to beriaBuildings do
29619: LD_ADDR_VAR 0 1
29623: PUSH
29624: DOUBLE
29625: LD_INT 1
29627: DEC
29628: ST_TO_ADDR
29629: LD_VAR 0 5
29633: PUSH
29634: FOR_TO
29635: IFFALSE 29717
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
29637: LD_ADDR_VAR 0 6
29641: PUSH
29642: LD_VAR 0 5
29646: PPUSH
29647: LD_INT 22
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PPUSH
29657: CALL_OW 69
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: PPUSH
29666: CALL_OW 74
29670: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
29671: LD_ADDR_VAR 0 5
29675: PUSH
29676: LD_VAR 0 5
29680: PUSH
29681: LD_VAR 0 6
29685: DIFF
29686: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
29687: LD_EXP 86
29691: PPUSH
29692: LD_VAR 0 6
29696: PPUSH
29697: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
29701: LD_EXP 87
29705: PPUSH
29706: LD_VAR 0 6
29710: PPUSH
29711: CALL_OW 175
// end ;
29715: GO 29634
29717: POP
29718: POP
// wait ( 0 0$35 ) ;
29719: LD_INT 1225
29721: PPUSH
29722: CALL_OW 67
// FinishMission ;
29726: CALL 20186 0 0
// end ;
29730: PPOPN 8
29732: END
// every 1 trigger immortalSurvivors do var unit ;
29733: LD_EXP 25
29737: IFFALSE 29775
29739: GO 29741
29741: DISABLE
29742: LD_INT 0
29744: PPUSH
// begin enable ;
29745: ENABLE
// for unit in survivorsArabianAttack do
29746: LD_ADDR_VAR 0 1
29750: PUSH
29751: LD_EXP 78
29755: PUSH
29756: FOR_IN
29757: IFFALSE 29773
// SetLives ( unit , 1000 ) ;
29759: LD_VAR 0 1
29763: PPUSH
29764: LD_INT 1000
29766: PPUSH
29767: CALL_OW 234
29771: GO 29756
29773: POP
29774: POP
// end ; end_of_file
29775: PPOPN 1
29777: END
// every 0 0$30 do
29778: GO 29780
29780: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
29781: LD_INT 3
29783: PPUSH
29784: LD_INT 5
29786: PPUSH
29787: CALL_OW 12
29791: PPUSH
29792: LD_INT 76
29794: PPUSH
29795: LD_INT 111
29797: PPUSH
29798: LD_INT 5
29800: PPUSH
29801: LD_INT 1
29803: PPUSH
29804: CALL_OW 56
29808: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
29809: LD_EXP 5
29813: IFFALSE 29885
29815: GO 29817
29817: DISABLE
29818: LD_INT 0
29820: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
29821: LD_INT 50
29823: PPUSH
29824: LD_INT 4200
29826: PPUSH
29827: CALL_OW 12
29831: PPUSH
29832: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
29836: LD_VAR 0 1
29840: PUSH
29841: LD_INT 175
29843: MUL
29844: PPUSH
29845: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
29849: LD_ADDR_VAR 0 1
29853: PUSH
29854: LD_VAR 0 1
29858: PUSH
29859: LD_INT 1
29861: PLUS
29862: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
29863: LD_INT 3
29865: PPUSH
29866: LD_INT 5
29868: PPUSH
29869: CALL_OW 12
29873: PPUSH
29874: LD_INT 6
29876: PPUSH
29877: LD_INT 1
29879: PPUSH
29880: CALL_OW 55
// enable ;
29884: ENABLE
// end ; end_of_file
29885: PPOPN 1
29887: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
29888: LD_EXP 88
29892: IFFALSE 30055
29894: GO 29896
29896: DISABLE
// begin enable ;
29897: ENABLE
// case counterIndex of 1 :
29898: LD_EXP 89
29902: PUSH
29903: LD_INT 1
29905: DOUBLE
29906: EQUAL
29907: IFTRUE 29911
29909: GO 29928
29911: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
29912: LD_ADDR_EXP 40
29916: PUSH
29917: LD_EXP 40
29921: PUSH
29922: LD_INT 35
29924: MINUS
29925: ST_TO_ADDR
29926: GO 30055
29928: LD_INT 2
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 29970
29936: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
29937: LD_ADDR_OWVAR 47
29941: PUSH
29942: LD_STRING #Ru03-1
29944: PUSH
29945: LD_EXP 15
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
29954: LD_ADDR_EXP 15
29958: PUSH
29959: LD_EXP 15
29963: PUSH
29964: LD_INT 35
29966: MINUS
29967: ST_TO_ADDR
// end ; 3 :
29968: GO 30055
29970: LD_INT 3
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 30012
29978: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
29979: LD_ADDR_OWVAR 47
29983: PUSH
29984: LD_STRING #Ru03-2
29986: PUSH
29987: LD_EXP 15
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
29996: LD_ADDR_EXP 15
30000: PUSH
30001: LD_EXP 15
30005: PUSH
30006: LD_INT 35
30008: MINUS
30009: ST_TO_ADDR
// end ; 4 :
30010: GO 30055
30012: LD_INT 4
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30054
30020: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
30021: LD_ADDR_OWVAR 47
30025: PUSH
30026: LD_STRING #Ru03-3
30028: PUSH
30029: LD_EXP 14
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
30038: LD_ADDR_EXP 14
30042: PUSH
30043: LD_EXP 14
30047: PUSH
30048: LD_INT 35
30050: MINUS
30051: ST_TO_ADDR
// end ; end ;
30052: GO 30055
30054: POP
// end ; end_of_file
30055: END
// every 7 7$0 do
30056: GO 30058
30058: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
30059: LD_INT 3
30061: PPUSH
30062: LD_INT 1
30064: PPUSH
30065: LD_INT 0
30067: PPUSH
30068: LD_INT 7
30070: PPUSH
30071: CALL 5807 0 4
30075: END
// every 12 12$0 do
30076: GO 30078
30078: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
30079: LD_INT 2
30081: PPUSH
30082: LD_INT 2
30084: PPUSH
30085: LD_INT 1
30087: PPUSH
30088: LD_INT 9
30090: PUSH
30091: LD_INT 8
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 1
30100: PPUSH
30101: LD_INT 2
30103: PPUSH
30104: CALL_OW 12
30108: ARRAY
30109: PPUSH
30110: CALL 5807 0 4
30114: END
// every 20 20$0 do
30115: GO 30117
30117: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
30118: LD_INT 4
30120: PPUSH
30121: LD_INT 2
30123: PPUSH
30124: LD_INT 0
30126: PPUSH
30127: LD_INT 7
30129: PPUSH
30130: CALL 5807 0 4
30134: END
// every 23 23$0 do
30135: GO 30137
30137: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
30138: LD_INT 3
30140: PPUSH
30141: LD_INT 1
30143: PPUSH
30144: LD_INT 2
30146: PPUSH
30147: LD_INT 9
30149: PUSH
30150: LD_INT 8
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: PPUSH
30160: LD_INT 2
30162: PPUSH
30163: CALL_OW 12
30167: ARRAY
30168: PPUSH
30169: CALL 5807 0 4
30173: END
// export function Nef_PrepareNature ; var i , un ; begin
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
30179: LD_ADDR_VAR 0 2
30183: PUSH
30184: DOUBLE
30185: LD_INT 1
30187: DEC
30188: ST_TO_ADDR
30189: LD_EXP 32
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PUSH
30198: FOR_TO
30199: IFFALSE 30309
// begin uc_side = 0 ;
30201: LD_ADDR_OWVAR 20
30205: PUSH
30206: LD_INT 0
30208: ST_TO_ADDR
// uc_nation = nation_nature ;
30209: LD_ADDR_OWVAR 21
30213: PUSH
30214: LD_INT 0
30216: ST_TO_ADDR
// hc_class = class_apeman ;
30217: LD_ADDR_OWVAR 28
30221: PUSH
30222: LD_INT 12
30224: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30225: LD_ADDR_OWVAR 31
30229: PUSH
30230: LD_EXP 33
30234: PUSH
30235: LD_INT 1
30237: ARRAY
30238: PUSH
30239: LD_EXP 33
30243: PUSH
30244: LD_INT 2
30246: ARRAY
30247: PUSH
30248: LD_EXP 33
30252: PUSH
30253: LD_INT 3
30255: ARRAY
30256: PUSH
30257: LD_EXP 33
30261: PUSH
30262: LD_INT 4
30264: ARRAY
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30272: LD_ADDR_OWVAR 35
30276: PUSH
30277: LD_EXP 34
30281: ST_TO_ADDR
// un = CreateHuman ;
30282: LD_ADDR_VAR 0 3
30286: PUSH
30287: CALL_OW 44
30291: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30292: LD_VAR 0 3
30296: PPUSH
30297: LD_INT 27
30299: PPUSH
30300: LD_INT 0
30302: PPUSH
30303: CALL_OW 49
// end ;
30307: GO 30198
30309: POP
30310: POP
// for i := 1 to animalsAmount [ 2 ] do
30311: LD_ADDR_VAR 0 2
30315: PUSH
30316: DOUBLE
30317: LD_INT 1
30319: DEC
30320: ST_TO_ADDR
30321: LD_EXP 32
30325: PUSH
30326: LD_INT 2
30328: ARRAY
30329: PUSH
30330: FOR_TO
30331: IFFALSE 30441
// begin uc_side = 0 ;
30333: LD_ADDR_OWVAR 20
30337: PUSH
30338: LD_INT 0
30340: ST_TO_ADDR
// uc_nation = nation_nature ;
30341: LD_ADDR_OWVAR 21
30345: PUSH
30346: LD_INT 0
30348: ST_TO_ADDR
// hc_class = class_phororhacos ;
30349: LD_ADDR_OWVAR 28
30353: PUSH
30354: LD_INT 18
30356: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30357: LD_ADDR_OWVAR 31
30361: PUSH
30362: LD_EXP 33
30366: PUSH
30367: LD_INT 1
30369: ARRAY
30370: PUSH
30371: LD_EXP 33
30375: PUSH
30376: LD_INT 2
30378: ARRAY
30379: PUSH
30380: LD_EXP 33
30384: PUSH
30385: LD_INT 3
30387: ARRAY
30388: PUSH
30389: LD_EXP 33
30393: PUSH
30394: LD_INT 4
30396: ARRAY
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30404: LD_ADDR_OWVAR 35
30408: PUSH
30409: LD_EXP 34
30413: ST_TO_ADDR
// un = CreateHuman ;
30414: LD_ADDR_VAR 0 3
30418: PUSH
30419: CALL_OW 44
30423: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30424: LD_VAR 0 3
30428: PPUSH
30429: LD_INT 27
30431: PPUSH
30432: LD_INT 0
30434: PPUSH
30435: CALL_OW 49
// end ;
30439: GO 30330
30441: POP
30442: POP
// for i := 1 to animalsAmount [ 3 ] do
30443: LD_ADDR_VAR 0 2
30447: PUSH
30448: DOUBLE
30449: LD_INT 1
30451: DEC
30452: ST_TO_ADDR
30453: LD_EXP 32
30457: PUSH
30458: LD_INT 3
30460: ARRAY
30461: PUSH
30462: FOR_TO
30463: IFFALSE 30573
// begin uc_side = 0 ;
30465: LD_ADDR_OWVAR 20
30469: PUSH
30470: LD_INT 0
30472: ST_TO_ADDR
// uc_nation = nation_nature ;
30473: LD_ADDR_OWVAR 21
30477: PUSH
30478: LD_INT 0
30480: ST_TO_ADDR
// hc_class = class_tiger ;
30481: LD_ADDR_OWVAR 28
30485: PUSH
30486: LD_INT 14
30488: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30489: LD_ADDR_OWVAR 31
30493: PUSH
30494: LD_EXP 33
30498: PUSH
30499: LD_INT 1
30501: ARRAY
30502: PUSH
30503: LD_EXP 33
30507: PUSH
30508: LD_INT 2
30510: ARRAY
30511: PUSH
30512: LD_EXP 33
30516: PUSH
30517: LD_INT 3
30519: ARRAY
30520: PUSH
30521: LD_EXP 33
30525: PUSH
30526: LD_INT 4
30528: ARRAY
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30536: LD_ADDR_OWVAR 35
30540: PUSH
30541: LD_EXP 34
30545: ST_TO_ADDR
// un = CreateHuman ;
30546: LD_ADDR_VAR 0 3
30550: PUSH
30551: CALL_OW 44
30555: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30556: LD_VAR 0 3
30560: PPUSH
30561: LD_INT 27
30563: PPUSH
30564: LD_INT 0
30566: PPUSH
30567: CALL_OW 49
// end ;
30571: GO 30462
30573: POP
30574: POP
// for i := 1 to animalsAmount [ 4 ] do
30575: LD_ADDR_VAR 0 2
30579: PUSH
30580: DOUBLE
30581: LD_INT 1
30583: DEC
30584: ST_TO_ADDR
30585: LD_EXP 32
30589: PUSH
30590: LD_INT 4
30592: ARRAY
30593: PUSH
30594: FOR_TO
30595: IFFALSE 30705
// begin uc_side = 0 ;
30597: LD_ADDR_OWVAR 20
30601: PUSH
30602: LD_INT 0
30604: ST_TO_ADDR
// uc_nation = nation_nature ;
30605: LD_ADDR_OWVAR 21
30609: PUSH
30610: LD_INT 0
30612: ST_TO_ADDR
// hc_class = 21 ;
30613: LD_ADDR_OWVAR 28
30617: PUSH
30618: LD_INT 21
30620: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30621: LD_ADDR_OWVAR 31
30625: PUSH
30626: LD_EXP 33
30630: PUSH
30631: LD_INT 1
30633: ARRAY
30634: PUSH
30635: LD_EXP 33
30639: PUSH
30640: LD_INT 2
30642: ARRAY
30643: PUSH
30644: LD_EXP 33
30648: PUSH
30649: LD_INT 3
30651: ARRAY
30652: PUSH
30653: LD_EXP 33
30657: PUSH
30658: LD_INT 4
30660: ARRAY
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30668: LD_ADDR_OWVAR 35
30672: PUSH
30673: LD_EXP 34
30677: ST_TO_ADDR
// un = CreateHuman ;
30678: LD_ADDR_VAR 0 3
30682: PUSH
30683: CALL_OW 44
30687: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30688: LD_VAR 0 3
30692: PPUSH
30693: LD_INT 27
30695: PPUSH
30696: LD_INT 0
30698: PPUSH
30699: CALL_OW 49
// end ;
30703: GO 30594
30705: POP
30706: POP
// for i := 1 to animalsAmount [ 5 ] do
30707: LD_ADDR_VAR 0 2
30711: PUSH
30712: DOUBLE
30713: LD_INT 1
30715: DEC
30716: ST_TO_ADDR
30717: LD_EXP 32
30721: PUSH
30722: LD_INT 5
30724: ARRAY
30725: PUSH
30726: FOR_TO
30727: IFFALSE 30788
// begin uc_side = 0 ;
30729: LD_ADDR_OWVAR 20
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
// uc_nation = nation_nature ;
30737: LD_ADDR_OWVAR 21
30741: PUSH
30742: LD_INT 0
30744: ST_TO_ADDR
// vc_chassis := 31 ;
30745: LD_ADDR_OWVAR 37
30749: PUSH
30750: LD_INT 31
30752: ST_TO_ADDR
// vc_control := control_rider ;
30753: LD_ADDR_OWVAR 38
30757: PUSH
30758: LD_INT 4
30760: ST_TO_ADDR
// un := CreateVehicle ;
30761: LD_ADDR_VAR 0 3
30765: PUSH
30766: CALL_OW 45
30770: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30771: LD_VAR 0 3
30775: PPUSH
30776: LD_INT 27
30778: PPUSH
30779: LD_INT 0
30781: PPUSH
30782: CALL_OW 49
// end ;
30786: GO 30726
30788: POP
30789: POP
// end ; end_of_file
30790: LD_VAR 0 1
30794: RET
// every 1 trigger scholtzeSaved do
30795: LD_EXP 7
30799: IFFALSE 30811
30801: GO 30803
30803: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
30804: LD_STRING ACH_PROFESSOR
30806: PPUSH
30807: CALL_OW 543
30811: END
// every 1 trigger IsDead ( Sikorski ) do
30812: LD_INT 290
30814: PPUSH
30815: CALL_OW 301
30819: IFFALSE 30831
30821: GO 30823
30823: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
30824: LD_STRING ACH_SIKORSKI
30826: PPUSH
30827: CALL_OW 543
30831: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
30832: LD_EXP 12
30836: NOT
30837: PUSH
30838: LD_EXP 24
30842: NOT
30843: AND
30844: IFFALSE 30856
30846: GO 30848
30848: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
30849: LD_STRING ACH_REINFORCE
30851: PPUSH
30852: CALL_OW 543
30856: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
30857: LD_INT 0
30859: PPUSH
// ar_crane := 88 ;
30860: LD_ADDR_EXP 96
30864: PUSH
30865: LD_INT 88
30867: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30868: LD_ADDR_EXP 91
30872: PUSH
30873: LD_INT 89
30875: ST_TO_ADDR
// us_hack := 99 ;
30876: LD_ADDR_EXP 92
30880: PUSH
30881: LD_INT 99
30883: ST_TO_ADDR
// us_artillery := 97 ;
30884: LD_ADDR_EXP 93
30888: PUSH
30889: LD_INT 97
30891: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30892: LD_ADDR_EXP 94
30896: PUSH
30897: LD_INT 91
30899: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
30900: LD_ADDR_EXP 95
30904: PUSH
30905: LD_INT 92
30907: ST_TO_ADDR
// ru_radar := 98 ;
30908: LD_ADDR_EXP 90
30912: PUSH
30913: LD_INT 98
30915: ST_TO_ADDR
// tech_Artillery := 80 ;
30916: LD_ADDR_EXP 97
30920: PUSH
30921: LD_INT 80
30923: ST_TO_ADDR
// tech_RadMat := 81 ;
30924: LD_ADDR_EXP 98
30928: PUSH
30929: LD_INT 81
30931: ST_TO_ADDR
// tech_BasicTools := 82 ;
30932: LD_ADDR_EXP 99
30936: PUSH
30937: LD_INT 82
30939: ST_TO_ADDR
// tech_Cargo := 83 ;
30940: LD_ADDR_EXP 100
30944: PUSH
30945: LD_INT 83
30947: ST_TO_ADDR
// tech_Track := 84 ;
30948: LD_ADDR_EXP 101
30952: PUSH
30953: LD_INT 84
30955: ST_TO_ADDR
// tech_Crane := 85 ;
30956: LD_ADDR_EXP 102
30960: PUSH
30961: LD_INT 85
30963: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30964: LD_ADDR_EXP 103
30968: PUSH
30969: LD_INT 86
30971: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30972: LD_ADDR_EXP 104
30976: PUSH
30977: LD_INT 87
30979: ST_TO_ADDR
// end ;
30980: LD_VAR 0 1
30984: RET
// every 1 do
30985: GO 30987
30987: DISABLE
// InitGlobalVariables ; end_of_file
30988: CALL 30857 0 0
30992: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30993: LD_INT 0
30995: PPUSH
30996: PPUSH
// if exist_mode then
30997: LD_VAR 0 2
31001: IFFALSE 31026
// unit := CreateCharacter ( prefix & ident ) else
31003: LD_ADDR_VAR 0 5
31007: PUSH
31008: LD_VAR 0 3
31012: PUSH
31013: LD_VAR 0 1
31017: STR
31018: PPUSH
31019: CALL_OW 34
31023: ST_TO_ADDR
31024: GO 31041
// unit := NewCharacter ( ident ) ;
31026: LD_ADDR_VAR 0 5
31030: PUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: CALL_OW 25
31040: ST_TO_ADDR
// result := unit ;
31041: LD_ADDR_VAR 0 4
31045: PUSH
31046: LD_VAR 0 5
31050: ST_TO_ADDR
// end ;
31051: LD_VAR 0 4
31055: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31056: LD_INT 0
31058: PPUSH
31059: PPUSH
// if not side or not nation then
31060: LD_VAR 0 1
31064: NOT
31065: PUSH
31066: LD_VAR 0 2
31070: NOT
31071: OR
31072: IFFALSE 31076
// exit ;
31074: GO 31840
// case nation of nation_american :
31076: LD_VAR 0 2
31080: PUSH
31081: LD_INT 1
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31303
31089: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31090: LD_ADDR_VAR 0 4
31094: PUSH
31095: LD_INT 35
31097: PUSH
31098: LD_INT 45
31100: PUSH
31101: LD_INT 46
31103: PUSH
31104: LD_INT 47
31106: PUSH
31107: LD_INT 82
31109: PUSH
31110: LD_INT 83
31112: PUSH
31113: LD_INT 84
31115: PUSH
31116: LD_INT 85
31118: PUSH
31119: LD_INT 86
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 6
31130: PUSH
31131: LD_INT 15
31133: PUSH
31134: LD_INT 16
31136: PUSH
31137: LD_INT 7
31139: PUSH
31140: LD_INT 12
31142: PUSH
31143: LD_INT 13
31145: PUSH
31146: LD_INT 10
31148: PUSH
31149: LD_INT 14
31151: PUSH
31152: LD_INT 20
31154: PUSH
31155: LD_INT 21
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 25
31163: PUSH
31164: LD_INT 32
31166: PUSH
31167: LD_INT 27
31169: PUSH
31170: LD_INT 36
31172: PUSH
31173: LD_INT 69
31175: PUSH
31176: LD_INT 39
31178: PUSH
31179: LD_INT 34
31181: PUSH
31182: LD_INT 40
31184: PUSH
31185: LD_INT 48
31187: PUSH
31188: LD_INT 49
31190: PUSH
31191: LD_INT 50
31193: PUSH
31194: LD_INT 51
31196: PUSH
31197: LD_INT 52
31199: PUSH
31200: LD_INT 53
31202: PUSH
31203: LD_INT 54
31205: PUSH
31206: LD_INT 55
31208: PUSH
31209: LD_INT 56
31211: PUSH
31212: LD_INT 57
31214: PUSH
31215: LD_INT 58
31217: PUSH
31218: LD_INT 59
31220: PUSH
31221: LD_INT 60
31223: PUSH
31224: LD_INT 61
31226: PUSH
31227: LD_INT 62
31229: PUSH
31230: LD_INT 80
31232: PUSH
31233: LD_INT 82
31235: PUSH
31236: LD_INT 83
31238: PUSH
31239: LD_INT 84
31241: PUSH
31242: LD_INT 85
31244: PUSH
31245: LD_INT 86
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: ST_TO_ADDR
31301: GO 31764
31303: LD_INT 2
31305: DOUBLE
31306: EQUAL
31307: IFTRUE 31311
31309: GO 31533
31311: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31312: LD_ADDR_VAR 0 4
31316: PUSH
31317: LD_INT 35
31319: PUSH
31320: LD_INT 45
31322: PUSH
31323: LD_INT 46
31325: PUSH
31326: LD_INT 47
31328: PUSH
31329: LD_INT 82
31331: PUSH
31332: LD_INT 83
31334: PUSH
31335: LD_INT 84
31337: PUSH
31338: LD_INT 85
31340: PUSH
31341: LD_INT 87
31343: PUSH
31344: LD_INT 70
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: LD_INT 11
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: LD_INT 4
31358: PUSH
31359: LD_INT 5
31361: PUSH
31362: LD_INT 6
31364: PUSH
31365: LD_INT 15
31367: PUSH
31368: LD_INT 18
31370: PUSH
31371: LD_INT 7
31373: PUSH
31374: LD_INT 17
31376: PUSH
31377: LD_INT 8
31379: PUSH
31380: LD_INT 20
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_INT 72
31391: PUSH
31392: LD_INT 26
31394: PUSH
31395: LD_INT 69
31397: PUSH
31398: LD_INT 39
31400: PUSH
31401: LD_INT 40
31403: PUSH
31404: LD_INT 41
31406: PUSH
31407: LD_INT 42
31409: PUSH
31410: LD_INT 43
31412: PUSH
31413: LD_INT 48
31415: PUSH
31416: LD_INT 49
31418: PUSH
31419: LD_INT 50
31421: PUSH
31422: LD_INT 51
31424: PUSH
31425: LD_INT 52
31427: PUSH
31428: LD_INT 53
31430: PUSH
31431: LD_INT 54
31433: PUSH
31434: LD_INT 55
31436: PUSH
31437: LD_INT 56
31439: PUSH
31440: LD_INT 60
31442: PUSH
31443: LD_INT 61
31445: PUSH
31446: LD_INT 62
31448: PUSH
31449: LD_INT 66
31451: PUSH
31452: LD_INT 67
31454: PUSH
31455: LD_INT 68
31457: PUSH
31458: LD_INT 81
31460: PUSH
31461: LD_INT 82
31463: PUSH
31464: LD_INT 83
31466: PUSH
31467: LD_INT 84
31469: PUSH
31470: LD_INT 85
31472: PUSH
31473: LD_INT 87
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: ST_TO_ADDR
31531: GO 31764
31533: LD_INT 3
31535: DOUBLE
31536: EQUAL
31537: IFTRUE 31541
31539: GO 31763
31541: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31542: LD_ADDR_VAR 0 4
31546: PUSH
31547: LD_INT 46
31549: PUSH
31550: LD_INT 47
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 82
31561: PUSH
31562: LD_INT 83
31564: PUSH
31565: LD_INT 84
31567: PUSH
31568: LD_INT 85
31570: PUSH
31571: LD_INT 86
31573: PUSH
31574: LD_INT 11
31576: PUSH
31577: LD_INT 9
31579: PUSH
31580: LD_INT 20
31582: PUSH
31583: LD_INT 19
31585: PUSH
31586: LD_INT 21
31588: PUSH
31589: LD_INT 24
31591: PUSH
31592: LD_INT 22
31594: PUSH
31595: LD_INT 25
31597: PUSH
31598: LD_INT 28
31600: PUSH
31601: LD_INT 29
31603: PUSH
31604: LD_INT 30
31606: PUSH
31607: LD_INT 31
31609: PUSH
31610: LD_INT 37
31612: PUSH
31613: LD_INT 38
31615: PUSH
31616: LD_INT 32
31618: PUSH
31619: LD_INT 27
31621: PUSH
31622: LD_INT 33
31624: PUSH
31625: LD_INT 69
31627: PUSH
31628: LD_INT 39
31630: PUSH
31631: LD_INT 34
31633: PUSH
31634: LD_INT 40
31636: PUSH
31637: LD_INT 71
31639: PUSH
31640: LD_INT 23
31642: PUSH
31643: LD_INT 44
31645: PUSH
31646: LD_INT 48
31648: PUSH
31649: LD_INT 49
31651: PUSH
31652: LD_INT 50
31654: PUSH
31655: LD_INT 51
31657: PUSH
31658: LD_INT 52
31660: PUSH
31661: LD_INT 53
31663: PUSH
31664: LD_INT 54
31666: PUSH
31667: LD_INT 55
31669: PUSH
31670: LD_INT 56
31672: PUSH
31673: LD_INT 57
31675: PUSH
31676: LD_INT 58
31678: PUSH
31679: LD_INT 59
31681: PUSH
31682: LD_INT 63
31684: PUSH
31685: LD_INT 64
31687: PUSH
31688: LD_INT 65
31690: PUSH
31691: LD_INT 82
31693: PUSH
31694: LD_INT 83
31696: PUSH
31697: LD_INT 84
31699: PUSH
31700: LD_INT 85
31702: PUSH
31703: LD_INT 86
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: ST_TO_ADDR
31761: GO 31764
31763: POP
// if state > - 1 and state < 3 then
31764: LD_VAR 0 3
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: GREATER
31773: PUSH
31774: LD_VAR 0 3
31778: PUSH
31779: LD_INT 3
31781: LESS
31782: AND
31783: IFFALSE 31840
// for i in result do
31785: LD_ADDR_VAR 0 5
31789: PUSH
31790: LD_VAR 0 4
31794: PUSH
31795: FOR_IN
31796: IFFALSE 31838
// if GetTech ( i , side ) <> state then
31798: LD_VAR 0 5
31802: PPUSH
31803: LD_VAR 0 1
31807: PPUSH
31808: CALL_OW 321
31812: PUSH
31813: LD_VAR 0 3
31817: NONEQUAL
31818: IFFALSE 31836
// result := result diff i ;
31820: LD_ADDR_VAR 0 4
31824: PUSH
31825: LD_VAR 0 4
31829: PUSH
31830: LD_VAR 0 5
31834: DIFF
31835: ST_TO_ADDR
31836: GO 31795
31838: POP
31839: POP
// end ;
31840: LD_VAR 0 4
31844: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31845: LD_INT 0
31847: PPUSH
31848: PPUSH
31849: PPUSH
// result := true ;
31850: LD_ADDR_VAR 0 3
31854: PUSH
31855: LD_INT 1
31857: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31858: LD_ADDR_VAR 0 5
31862: PUSH
31863: LD_VAR 0 2
31867: PPUSH
31868: CALL_OW 480
31872: ST_TO_ADDR
// if not tmp then
31873: LD_VAR 0 5
31877: NOT
31878: IFFALSE 31882
// exit ;
31880: GO 31931
// for i in tmp do
31882: LD_ADDR_VAR 0 4
31886: PUSH
31887: LD_VAR 0 5
31891: PUSH
31892: FOR_IN
31893: IFFALSE 31929
// if GetTech ( i , side ) <> state_researched then
31895: LD_VAR 0 4
31899: PPUSH
31900: LD_VAR 0 1
31904: PPUSH
31905: CALL_OW 321
31909: PUSH
31910: LD_INT 2
31912: NONEQUAL
31913: IFFALSE 31927
// begin result := false ;
31915: LD_ADDR_VAR 0 3
31919: PUSH
31920: LD_INT 0
31922: ST_TO_ADDR
// exit ;
31923: POP
31924: POP
31925: GO 31931
// end ;
31927: GO 31892
31929: POP
31930: POP
// end ;
31931: LD_VAR 0 3
31935: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31936: LD_INT 0
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
31944: PPUSH
31945: PPUSH
31946: PPUSH
31947: PPUSH
31948: PPUSH
31949: PPUSH
31950: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31951: LD_VAR 0 1
31955: NOT
31956: PUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: CALL_OW 257
31966: PUSH
31967: LD_INT 9
31969: NONEQUAL
31970: OR
31971: IFFALSE 31975
// exit ;
31973: GO 32548
// side := GetSide ( unit ) ;
31975: LD_ADDR_VAR 0 9
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 255
31989: ST_TO_ADDR
// tech_space := tech_spacanom ;
31990: LD_ADDR_VAR 0 12
31994: PUSH
31995: LD_INT 29
31997: ST_TO_ADDR
// tech_time := tech_taurad ;
31998: LD_ADDR_VAR 0 13
32002: PUSH
32003: LD_INT 28
32005: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32006: LD_ADDR_VAR 0 11
32010: PUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 310
32020: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32021: LD_VAR 0 11
32025: PPUSH
32026: CALL_OW 247
32030: PUSH
32031: LD_INT 2
32033: EQUAL
32034: IFFALSE 32038
// exit ;
32036: GO 32548
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32038: LD_ADDR_VAR 0 8
32042: PUSH
32043: LD_INT 81
32045: PUSH
32046: LD_VAR 0 9
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 21
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PPUSH
32076: CALL_OW 69
32080: ST_TO_ADDR
// if not tmp then
32081: LD_VAR 0 8
32085: NOT
32086: IFFALSE 32090
// exit ;
32088: GO 32548
// if in_unit then
32090: LD_VAR 0 11
32094: IFFALSE 32118
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32096: LD_ADDR_VAR 0 10
32100: PUSH
32101: LD_VAR 0 8
32105: PPUSH
32106: LD_VAR 0 11
32110: PPUSH
32111: CALL_OW 74
32115: ST_TO_ADDR
32116: GO 32138
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32118: LD_ADDR_VAR 0 10
32122: PUSH
32123: LD_VAR 0 8
32127: PPUSH
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL_OW 74
32137: ST_TO_ADDR
// if not enemy then
32138: LD_VAR 0 10
32142: NOT
32143: IFFALSE 32147
// exit ;
32145: GO 32548
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32147: LD_VAR 0 11
32151: PUSH
32152: LD_VAR 0 11
32156: PPUSH
32157: LD_VAR 0 10
32161: PPUSH
32162: CALL_OW 296
32166: PUSH
32167: LD_INT 13
32169: GREATER
32170: AND
32171: PUSH
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_VAR 0 10
32181: PPUSH
32182: CALL_OW 296
32186: PUSH
32187: LD_INT 12
32189: GREATER
32190: OR
32191: IFFALSE 32195
// exit ;
32193: GO 32548
// missile := [ 1 ] ;
32195: LD_ADDR_VAR 0 14
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: EMPTY
32204: LIST
32205: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32206: LD_VAR 0 9
32210: PPUSH
32211: LD_VAR 0 12
32215: PPUSH
32216: CALL_OW 325
32220: IFFALSE 32249
// missile := Insert ( missile , missile + 1 , 2 ) ;
32222: LD_ADDR_VAR 0 14
32226: PUSH
32227: LD_VAR 0 14
32231: PPUSH
32232: LD_VAR 0 14
32236: PUSH
32237: LD_INT 1
32239: PLUS
32240: PPUSH
32241: LD_INT 2
32243: PPUSH
32244: CALL_OW 2
32248: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32249: LD_VAR 0 9
32253: PPUSH
32254: LD_VAR 0 13
32258: PPUSH
32259: CALL_OW 325
32263: PUSH
32264: LD_VAR 0 10
32268: PPUSH
32269: CALL_OW 255
32273: PPUSH
32274: LD_VAR 0 13
32278: PPUSH
32279: CALL_OW 325
32283: NOT
32284: AND
32285: IFFALSE 32314
// missile := Insert ( missile , missile + 1 , 3 ) ;
32287: LD_ADDR_VAR 0 14
32291: PUSH
32292: LD_VAR 0 14
32296: PPUSH
32297: LD_VAR 0 14
32301: PUSH
32302: LD_INT 1
32304: PLUS
32305: PPUSH
32306: LD_INT 3
32308: PPUSH
32309: CALL_OW 2
32313: ST_TO_ADDR
// if missile < 2 then
32314: LD_VAR 0 14
32318: PUSH
32319: LD_INT 2
32321: LESS
32322: IFFALSE 32326
// exit ;
32324: GO 32548
// x := GetX ( enemy ) ;
32326: LD_ADDR_VAR 0 4
32330: PUSH
32331: LD_VAR 0 10
32335: PPUSH
32336: CALL_OW 250
32340: ST_TO_ADDR
// y := GetY ( enemy ) ;
32341: LD_ADDR_VAR 0 5
32345: PUSH
32346: LD_VAR 0 10
32350: PPUSH
32351: CALL_OW 251
32355: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32356: LD_ADDR_VAR 0 6
32360: PUSH
32361: LD_VAR 0 4
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PPUSH
32370: LD_INT 1
32372: PPUSH
32373: CALL_OW 12
32377: PLUS
32378: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32379: LD_ADDR_VAR 0 7
32383: PUSH
32384: LD_VAR 0 5
32388: PUSH
32389: LD_INT 1
32391: NEG
32392: PPUSH
32393: LD_INT 1
32395: PPUSH
32396: CALL_OW 12
32400: PLUS
32401: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32402: LD_VAR 0 6
32406: PPUSH
32407: LD_VAR 0 7
32411: PPUSH
32412: CALL_OW 488
32416: NOT
32417: IFFALSE 32439
// begin _x := x ;
32419: LD_ADDR_VAR 0 6
32423: PUSH
32424: LD_VAR 0 4
32428: ST_TO_ADDR
// _y := y ;
32429: LD_ADDR_VAR 0 7
32433: PUSH
32434: LD_VAR 0 5
32438: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: LD_INT 1
32446: PPUSH
32447: LD_VAR 0 14
32451: PPUSH
32452: CALL_OW 12
32456: ST_TO_ADDR
// case i of 1 :
32457: LD_VAR 0 3
32461: PUSH
32462: LD_INT 1
32464: DOUBLE
32465: EQUAL
32466: IFTRUE 32470
32468: GO 32487
32470: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32471: LD_VAR 0 1
32475: PPUSH
32476: LD_VAR 0 10
32480: PPUSH
32481: CALL_OW 115
32485: GO 32548
32487: LD_INT 2
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32517
32495: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_VAR 0 6
32505: PPUSH
32506: LD_VAR 0 7
32510: PPUSH
32511: CALL_OW 153
32515: GO 32548
32517: LD_INT 3
32519: DOUBLE
32520: EQUAL
32521: IFTRUE 32525
32523: GO 32547
32525: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32526: LD_VAR 0 1
32530: PPUSH
32531: LD_VAR 0 6
32535: PPUSH
32536: LD_VAR 0 7
32540: PPUSH
32541: CALL_OW 154
32545: GO 32548
32547: POP
// end ;
32548: LD_VAR 0 2
32552: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32553: LD_INT 0
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
// if not unit or not building then
32561: LD_VAR 0 1
32565: NOT
32566: PUSH
32567: LD_VAR 0 2
32571: NOT
32572: OR
32573: IFFALSE 32577
// exit ;
32575: GO 32735
// x := GetX ( building ) ;
32577: LD_ADDR_VAR 0 5
32581: PUSH
32582: LD_VAR 0 2
32586: PPUSH
32587: CALL_OW 250
32591: ST_TO_ADDR
// y := GetY ( building ) ;
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: LD_VAR 0 2
32601: PPUSH
32602: CALL_OW 251
32606: ST_TO_ADDR
// for i = 0 to 5 do
32607: LD_ADDR_VAR 0 4
32611: PUSH
32612: DOUBLE
32613: LD_INT 0
32615: DEC
32616: ST_TO_ADDR
32617: LD_INT 5
32619: PUSH
32620: FOR_TO
32621: IFFALSE 32733
// begin _x := ShiftX ( x , i , 3 ) ;
32623: LD_ADDR_VAR 0 7
32627: PUSH
32628: LD_VAR 0 5
32632: PPUSH
32633: LD_VAR 0 4
32637: PPUSH
32638: LD_INT 3
32640: PPUSH
32641: CALL_OW 272
32645: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32646: LD_ADDR_VAR 0 8
32650: PUSH
32651: LD_VAR 0 6
32655: PPUSH
32656: LD_VAR 0 4
32660: PPUSH
32661: LD_INT 3
32663: PPUSH
32664: CALL_OW 273
32668: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32669: LD_VAR 0 7
32673: PPUSH
32674: LD_VAR 0 8
32678: PPUSH
32679: CALL_OW 488
32683: NOT
32684: IFFALSE 32688
// continue ;
32686: GO 32620
// if HexInfo ( _x , _y ) = 0 then
32688: LD_VAR 0 7
32692: PPUSH
32693: LD_VAR 0 8
32697: PPUSH
32698: CALL_OW 428
32702: PUSH
32703: LD_INT 0
32705: EQUAL
32706: IFFALSE 32731
// begin ComMoveXY ( unit , _x , _y ) ;
32708: LD_VAR 0 1
32712: PPUSH
32713: LD_VAR 0 7
32717: PPUSH
32718: LD_VAR 0 8
32722: PPUSH
32723: CALL_OW 111
// exit ;
32727: POP
32728: POP
32729: GO 32735
// end ; end ;
32731: GO 32620
32733: POP
32734: POP
// end ;
32735: LD_VAR 0 3
32739: RET
// export function ScanBase ( side , base_area ) ; begin
32740: LD_INT 0
32742: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32743: LD_ADDR_VAR 0 3
32747: PUSH
32748: LD_VAR 0 2
32752: PPUSH
32753: LD_INT 81
32755: PUSH
32756: LD_VAR 0 1
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PPUSH
32765: CALL_OW 70
32769: ST_TO_ADDR
// end ;
32770: LD_VAR 0 3
32774: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32775: LD_INT 0
32777: PPUSH
32778: PPUSH
32779: PPUSH
32780: PPUSH
// result := false ;
32781: LD_ADDR_VAR 0 2
32785: PUSH
32786: LD_INT 0
32788: ST_TO_ADDR
// side := GetSide ( unit ) ;
32789: LD_ADDR_VAR 0 3
32793: PUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 255
32803: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32804: LD_ADDR_VAR 0 4
32808: PUSH
32809: LD_VAR 0 1
32813: PPUSH
32814: CALL_OW 248
32818: ST_TO_ADDR
// case nat of 1 :
32819: LD_VAR 0 4
32823: PUSH
32824: LD_INT 1
32826: DOUBLE
32827: EQUAL
32828: IFTRUE 32832
32830: GO 32843
32832: POP
// tech := tech_lassight ; 2 :
32833: LD_ADDR_VAR 0 5
32837: PUSH
32838: LD_INT 12
32840: ST_TO_ADDR
32841: GO 32882
32843: LD_INT 2
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 32862
32851: POP
// tech := tech_mortar ; 3 :
32852: LD_ADDR_VAR 0 5
32856: PUSH
32857: LD_INT 41
32859: ST_TO_ADDR
32860: GO 32882
32862: LD_INT 3
32864: DOUBLE
32865: EQUAL
32866: IFTRUE 32870
32868: GO 32881
32870: POP
// tech := tech_bazooka ; end ;
32871: LD_ADDR_VAR 0 5
32875: PUSH
32876: LD_INT 44
32878: ST_TO_ADDR
32879: GO 32882
32881: POP
// if Researched ( side , tech ) then
32882: LD_VAR 0 3
32886: PPUSH
32887: LD_VAR 0 5
32891: PPUSH
32892: CALL_OW 325
32896: IFFALSE 32923
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32898: LD_ADDR_VAR 0 2
32902: PUSH
32903: LD_INT 5
32905: PUSH
32906: LD_INT 8
32908: PUSH
32909: LD_INT 9
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: PUSH
32917: LD_VAR 0 4
32921: ARRAY
32922: ST_TO_ADDR
// end ;
32923: LD_VAR 0 2
32927: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32928: LD_INT 0
32930: PPUSH
32931: PPUSH
32932: PPUSH
// if not mines then
32933: LD_VAR 0 2
32937: NOT
32938: IFFALSE 32942
// exit ;
32940: GO 33086
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32942: LD_ADDR_VAR 0 5
32946: PUSH
32947: LD_INT 81
32949: PUSH
32950: LD_VAR 0 1
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: LD_INT 21
32964: PUSH
32965: LD_INT 3
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PPUSH
32980: CALL_OW 69
32984: ST_TO_ADDR
// for i in mines do
32985: LD_ADDR_VAR 0 4
32989: PUSH
32990: LD_VAR 0 2
32994: PUSH
32995: FOR_IN
32996: IFFALSE 33084
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32998: LD_VAR 0 4
33002: PUSH
33003: LD_INT 1
33005: ARRAY
33006: PPUSH
33007: LD_VAR 0 4
33011: PUSH
33012: LD_INT 2
33014: ARRAY
33015: PPUSH
33016: CALL_OW 458
33020: NOT
33021: IFFALSE 33025
// continue ;
33023: GO 32995
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33025: LD_VAR 0 4
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: PPUSH
33034: LD_VAR 0 4
33038: PUSH
33039: LD_INT 2
33041: ARRAY
33042: PPUSH
33043: CALL_OW 428
33047: PUSH
33048: LD_VAR 0 5
33052: IN
33053: IFFALSE 33082
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33055: LD_VAR 0 4
33059: PUSH
33060: LD_INT 1
33062: ARRAY
33063: PPUSH
33064: LD_VAR 0 4
33068: PUSH
33069: LD_INT 2
33071: ARRAY
33072: PPUSH
33073: LD_VAR 0 1
33077: PPUSH
33078: CALL_OW 456
// end ;
33082: GO 32995
33084: POP
33085: POP
// end ;
33086: LD_VAR 0 3
33090: RET
// export function Count ( array ) ; var i ; begin
33091: LD_INT 0
33093: PPUSH
33094: PPUSH
// result := 0 ;
33095: LD_ADDR_VAR 0 2
33099: PUSH
33100: LD_INT 0
33102: ST_TO_ADDR
// for i in array do
33103: LD_ADDR_VAR 0 3
33107: PUSH
33108: LD_VAR 0 1
33112: PUSH
33113: FOR_IN
33114: IFFALSE 33138
// if i then
33116: LD_VAR 0 3
33120: IFFALSE 33136
// result := result + 1 ;
33122: LD_ADDR_VAR 0 2
33126: PUSH
33127: LD_VAR 0 2
33131: PUSH
33132: LD_INT 1
33134: PLUS
33135: ST_TO_ADDR
33136: GO 33113
33138: POP
33139: POP
// end ;
33140: LD_VAR 0 2
33144: RET
// export function IsEmpty ( building ) ; begin
33145: LD_INT 0
33147: PPUSH
// if not building then
33148: LD_VAR 0 1
33152: NOT
33153: IFFALSE 33157
// exit ;
33155: GO 33200
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33157: LD_ADDR_VAR 0 2
33161: PUSH
33162: LD_VAR 0 1
33166: PUSH
33167: LD_INT 22
33169: PUSH
33170: LD_VAR 0 1
33174: PPUSH
33175: CALL_OW 255
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 58
33186: PUSH
33187: EMPTY
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PPUSH
33194: CALL_OW 69
33198: IN
33199: ST_TO_ADDR
// end ;
33200: LD_VAR 0 2
33204: RET
// export function IsNotFull ( building ) ; begin
33205: LD_INT 0
33207: PPUSH
// if not building then
33208: LD_VAR 0 1
33212: NOT
33213: IFFALSE 33217
// exit ;
33215: GO 33236
// result := UnitsInside ( building ) < 6 ;
33217: LD_ADDR_VAR 0 2
33221: PUSH
33222: LD_VAR 0 1
33226: PPUSH
33227: CALL_OW 313
33231: PUSH
33232: LD_INT 6
33234: LESS
33235: ST_TO_ADDR
// end ;
33236: LD_VAR 0 2
33240: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33241: LD_INT 0
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
// tmp := [ ] ;
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: EMPTY
33253: ST_TO_ADDR
// list := [ ] ;
33254: LD_ADDR_VAR 0 5
33258: PUSH
33259: EMPTY
33260: ST_TO_ADDR
// for i = 16 to 25 do
33261: LD_ADDR_VAR 0 4
33265: PUSH
33266: DOUBLE
33267: LD_INT 16
33269: DEC
33270: ST_TO_ADDR
33271: LD_INT 25
33273: PUSH
33274: FOR_TO
33275: IFFALSE 33348
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_VAR 0 3
33286: PUSH
33287: LD_INT 22
33289: PUSH
33290: LD_VAR 0 1
33294: PPUSH
33295: CALL_OW 255
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 91
33306: PUSH
33307: LD_VAR 0 1
33311: PUSH
33312: LD_INT 6
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 30
33322: PUSH
33323: LD_VAR 0 4
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: PPUSH
33340: CALL_OW 69
33344: ADD
33345: ST_TO_ADDR
33346: GO 33274
33348: POP
33349: POP
// for i = 1 to tmp do
33350: LD_ADDR_VAR 0 4
33354: PUSH
33355: DOUBLE
33356: LD_INT 1
33358: DEC
33359: ST_TO_ADDR
33360: LD_VAR 0 3
33364: PUSH
33365: FOR_TO
33366: IFFALSE 33454
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33368: LD_ADDR_VAR 0 5
33372: PUSH
33373: LD_VAR 0 5
33377: PUSH
33378: LD_VAR 0 3
33382: PUSH
33383: LD_VAR 0 4
33387: ARRAY
33388: PPUSH
33389: CALL_OW 266
33393: PUSH
33394: LD_VAR 0 3
33398: PUSH
33399: LD_VAR 0 4
33403: ARRAY
33404: PPUSH
33405: CALL_OW 250
33409: PUSH
33410: LD_VAR 0 3
33414: PUSH
33415: LD_VAR 0 4
33419: ARRAY
33420: PPUSH
33421: CALL_OW 251
33425: PUSH
33426: LD_VAR 0 3
33430: PUSH
33431: LD_VAR 0 4
33435: ARRAY
33436: PPUSH
33437: CALL_OW 254
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: PUSH
33448: EMPTY
33449: LIST
33450: ADD
33451: ST_TO_ADDR
33452: GO 33365
33454: POP
33455: POP
// result := list ;
33456: LD_ADDR_VAR 0 2
33460: PUSH
33461: LD_VAR 0 5
33465: ST_TO_ADDR
// end ;
33466: LD_VAR 0 2
33470: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33471: LD_INT 0
33473: PPUSH
33474: PPUSH
33475: PPUSH
33476: PPUSH
33477: PPUSH
33478: PPUSH
33479: PPUSH
// if not factory then
33480: LD_VAR 0 1
33484: NOT
33485: IFFALSE 33489
// exit ;
33487: GO 34082
// if control = control_apeman then
33489: LD_VAR 0 4
33493: PUSH
33494: LD_INT 5
33496: EQUAL
33497: IFFALSE 33606
// begin tmp := UnitsInside ( factory ) ;
33499: LD_ADDR_VAR 0 8
33503: PUSH
33504: LD_VAR 0 1
33508: PPUSH
33509: CALL_OW 313
33513: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33514: LD_VAR 0 8
33518: PPUSH
33519: LD_INT 25
33521: PUSH
33522: LD_INT 12
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PPUSH
33529: CALL_OW 72
33533: NOT
33534: IFFALSE 33544
// control := control_manual ;
33536: LD_ADDR_VAR 0 4
33540: PUSH
33541: LD_INT 1
33543: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33544: LD_ADDR_VAR 0 8
33548: PUSH
33549: LD_VAR 0 1
33553: PPUSH
33554: CALL 33241 0 1
33558: ST_TO_ADDR
// if tmp then
33559: LD_VAR 0 8
33563: IFFALSE 33606
// begin for i in tmp do
33565: LD_ADDR_VAR 0 7
33569: PUSH
33570: LD_VAR 0 8
33574: PUSH
33575: FOR_IN
33576: IFFALSE 33604
// if i [ 1 ] = b_ext_radio then
33578: LD_VAR 0 7
33582: PUSH
33583: LD_INT 1
33585: ARRAY
33586: PUSH
33587: LD_INT 22
33589: EQUAL
33590: IFFALSE 33602
// begin control := control_remote ;
33592: LD_ADDR_VAR 0 4
33596: PUSH
33597: LD_INT 2
33599: ST_TO_ADDR
// break ;
33600: GO 33604
// end ;
33602: GO 33575
33604: POP
33605: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33606: LD_VAR 0 1
33610: PPUSH
33611: LD_VAR 0 2
33615: PPUSH
33616: LD_VAR 0 3
33620: PPUSH
33621: LD_VAR 0 4
33625: PPUSH
33626: LD_VAR 0 5
33630: PPUSH
33631: CALL_OW 448
33635: IFFALSE 33670
// begin result := [ chassis , engine , control , weapon ] ;
33637: LD_ADDR_VAR 0 6
33641: PUSH
33642: LD_VAR 0 2
33646: PUSH
33647: LD_VAR 0 3
33651: PUSH
33652: LD_VAR 0 4
33656: PUSH
33657: LD_VAR 0 5
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// exit ;
33668: GO 34082
// end ; _chassis := AvailableChassisList ( factory ) ;
33670: LD_ADDR_VAR 0 9
33674: PUSH
33675: LD_VAR 0 1
33679: PPUSH
33680: CALL_OW 475
33684: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33685: LD_ADDR_VAR 0 11
33689: PUSH
33690: LD_VAR 0 1
33694: PPUSH
33695: CALL_OW 476
33699: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33700: LD_ADDR_VAR 0 12
33704: PUSH
33705: LD_VAR 0 1
33709: PPUSH
33710: CALL_OW 477
33714: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33715: LD_ADDR_VAR 0 10
33719: PUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 478
33729: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33730: LD_VAR 0 9
33734: NOT
33735: PUSH
33736: LD_VAR 0 11
33740: NOT
33741: OR
33742: PUSH
33743: LD_VAR 0 12
33747: NOT
33748: OR
33749: PUSH
33750: LD_VAR 0 10
33754: NOT
33755: OR
33756: IFFALSE 33791
// begin result := [ chassis , engine , control , weapon ] ;
33758: LD_ADDR_VAR 0 6
33762: PUSH
33763: LD_VAR 0 2
33767: PUSH
33768: LD_VAR 0 3
33772: PUSH
33773: LD_VAR 0 4
33777: PUSH
33778: LD_VAR 0 5
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: ST_TO_ADDR
// exit ;
33789: GO 34082
// end ; if not chassis in _chassis then
33791: LD_VAR 0 2
33795: PUSH
33796: LD_VAR 0 9
33800: IN
33801: NOT
33802: IFFALSE 33828
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33804: LD_ADDR_VAR 0 2
33808: PUSH
33809: LD_VAR 0 9
33813: PUSH
33814: LD_INT 1
33816: PPUSH
33817: LD_VAR 0 9
33821: PPUSH
33822: CALL_OW 12
33826: ARRAY
33827: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33828: LD_VAR 0 2
33832: PPUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: CALL 34087 0 2
33842: NOT
33843: IFFALSE 33902
// repeat engine := _engine [ 1 ] ;
33845: LD_ADDR_VAR 0 3
33849: PUSH
33850: LD_VAR 0 11
33854: PUSH
33855: LD_INT 1
33857: ARRAY
33858: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33859: LD_ADDR_VAR 0 11
33863: PUSH
33864: LD_VAR 0 11
33868: PPUSH
33869: LD_INT 1
33871: PPUSH
33872: CALL_OW 3
33876: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33877: LD_VAR 0 2
33881: PPUSH
33882: LD_VAR 0 3
33886: PPUSH
33887: CALL 34087 0 2
33891: PUSH
33892: LD_VAR 0 11
33896: PUSH
33897: EMPTY
33898: EQUAL
33899: OR
33900: IFFALSE 33845
// if not control in _control then
33902: LD_VAR 0 4
33906: PUSH
33907: LD_VAR 0 12
33911: IN
33912: NOT
33913: IFFALSE 33939
// control := _control [ rand ( 1 , _control ) ] ;
33915: LD_ADDR_VAR 0 4
33919: PUSH
33920: LD_VAR 0 12
33924: PUSH
33925: LD_INT 1
33927: PPUSH
33928: LD_VAR 0 12
33932: PPUSH
33933: CALL_OW 12
33937: ARRAY
33938: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33939: LD_VAR 0 2
33943: PPUSH
33944: LD_VAR 0 5
33948: PPUSH
33949: CALL 34307 0 2
33953: NOT
33954: IFFALSE 34013
// repeat weapon := _weapon [ 1 ] ;
33956: LD_ADDR_VAR 0 5
33960: PUSH
33961: LD_VAR 0 10
33965: PUSH
33966: LD_INT 1
33968: ARRAY
33969: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33970: LD_ADDR_VAR 0 10
33974: PUSH
33975: LD_VAR 0 10
33979: PPUSH
33980: LD_INT 1
33982: PPUSH
33983: CALL_OW 3
33987: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33988: LD_VAR 0 2
33992: PPUSH
33993: LD_VAR 0 5
33997: PPUSH
33998: CALL 34307 0 2
34002: PUSH
34003: LD_VAR 0 10
34007: PUSH
34008: EMPTY
34009: EQUAL
34010: OR
34011: IFFALSE 33956
// result := [ ] ;
34013: LD_ADDR_VAR 0 6
34017: PUSH
34018: EMPTY
34019: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34020: LD_VAR 0 1
34024: PPUSH
34025: LD_VAR 0 2
34029: PPUSH
34030: LD_VAR 0 3
34034: PPUSH
34035: LD_VAR 0 4
34039: PPUSH
34040: LD_VAR 0 5
34044: PPUSH
34045: CALL_OW 448
34049: IFFALSE 34082
// result := [ chassis , engine , control , weapon ] ;
34051: LD_ADDR_VAR 0 6
34055: PUSH
34056: LD_VAR 0 2
34060: PUSH
34061: LD_VAR 0 3
34065: PUSH
34066: LD_VAR 0 4
34070: PUSH
34071: LD_VAR 0 5
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: ST_TO_ADDR
// end ;
34082: LD_VAR 0 6
34086: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34087: LD_INT 0
34089: PPUSH
// if not chassis or not engine then
34090: LD_VAR 0 1
34094: NOT
34095: PUSH
34096: LD_VAR 0 2
34100: NOT
34101: OR
34102: IFFALSE 34106
// exit ;
34104: GO 34302
// case engine of engine_solar :
34106: LD_VAR 0 2
34110: PUSH
34111: LD_INT 2
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34119
34117: GO 34157
34119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34120: LD_ADDR_VAR 0 3
34124: PUSH
34125: LD_INT 11
34127: PUSH
34128: LD_INT 12
34130: PUSH
34131: LD_INT 13
34133: PUSH
34134: LD_INT 14
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
34155: GO 34286
34157: LD_INT 1
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34227
34165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_INT 11
34173: PUSH
34174: LD_INT 12
34176: PUSH
34177: LD_INT 13
34179: PUSH
34180: LD_INT 14
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 3
34191: PUSH
34192: LD_INT 4
34194: PUSH
34195: LD_INT 5
34197: PUSH
34198: LD_INT 21
34200: PUSH
34201: LD_INT 23
34203: PUSH
34204: LD_INT 22
34206: PUSH
34207: LD_INT 24
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
34225: GO 34286
34227: LD_INT 3
34229: DOUBLE
34230: EQUAL
34231: IFTRUE 34235
34233: GO 34285
34235: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34236: LD_ADDR_VAR 0 3
34240: PUSH
34241: LD_INT 13
34243: PUSH
34244: LD_INT 14
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: LD_INT 4
34255: PUSH
34256: LD_INT 5
34258: PUSH
34259: LD_INT 21
34261: PUSH
34262: LD_INT 22
34264: PUSH
34265: LD_INT 23
34267: PUSH
34268: LD_INT 24
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
34283: GO 34286
34285: POP
// result := ( chassis in result ) ;
34286: LD_ADDR_VAR 0 3
34290: PUSH
34291: LD_VAR 0 1
34295: PUSH
34296: LD_VAR 0 3
34300: IN
34301: ST_TO_ADDR
// end ;
34302: LD_VAR 0 3
34306: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34307: LD_INT 0
34309: PPUSH
// if not chassis or not weapon then
34310: LD_VAR 0 1
34314: NOT
34315: PUSH
34316: LD_VAR 0 2
34320: NOT
34321: OR
34322: IFFALSE 34326
// exit ;
34324: GO 35352
// case weapon of us_machine_gun :
34326: LD_VAR 0 2
34330: PUSH
34331: LD_INT 2
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34339
34337: GO 34369
34339: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 2
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: LD_INT 4
34356: PUSH
34357: LD_INT 5
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: ST_TO_ADDR
34367: GO 35336
34369: LD_INT 3
34371: DOUBLE
34372: EQUAL
34373: IFTRUE 34377
34375: GO 34407
34377: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34378: LD_ADDR_VAR 0 3
34382: PUSH
34383: LD_INT 1
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: LD_INT 5
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: ST_TO_ADDR
34405: GO 35336
34407: LD_INT 11
34409: DOUBLE
34410: EQUAL
34411: IFTRUE 34415
34413: GO 34445
34415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: LD_INT 3
34429: PUSH
34430: LD_INT 4
34432: PUSH
34433: LD_INT 5
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: ST_TO_ADDR
34443: GO 35336
34445: LD_INT 4
34447: DOUBLE
34448: EQUAL
34449: IFTRUE 34453
34451: GO 34479
34453: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34454: LD_ADDR_VAR 0 3
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 3
34464: PUSH
34465: LD_INT 4
34467: PUSH
34468: LD_INT 5
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: ST_TO_ADDR
34477: GO 35336
34479: LD_INT 5
34481: DOUBLE
34482: EQUAL
34483: IFTRUE 34487
34485: GO 34513
34487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34488: LD_ADDR_VAR 0 3
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: LD_INT 3
34498: PUSH
34499: LD_INT 4
34501: PUSH
34502: LD_INT 5
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: ST_TO_ADDR
34511: GO 35336
34513: LD_INT 9
34515: DOUBLE
34516: EQUAL
34517: IFTRUE 34521
34519: GO 34547
34521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_INT 2
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 4
34535: PUSH
34536: LD_INT 5
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: ST_TO_ADDR
34545: GO 35336
34547: LD_INT 7
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34581
34555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34556: LD_ADDR_VAR 0 3
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: LD_INT 3
34566: PUSH
34567: LD_INT 4
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: ST_TO_ADDR
34579: GO 35336
34581: LD_INT 12
34583: DOUBLE
34584: EQUAL
34585: IFTRUE 34589
34587: GO 34615
34589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34590: LD_ADDR_VAR 0 3
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: LD_INT 4
34603: PUSH
34604: LD_INT 5
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: ST_TO_ADDR
34613: GO 35336
34615: LD_INT 13
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34623
34621: GO 34649
34623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 3
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: ST_TO_ADDR
34647: GO 35336
34649: LD_INT 14
34651: DOUBLE
34652: EQUAL
34653: IFTRUE 34657
34655: GO 34675
34657: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34658: LD_ADDR_VAR 0 3
34662: PUSH
34663: LD_INT 4
34665: PUSH
34666: LD_INT 5
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: ST_TO_ADDR
34673: GO 35336
34675: LD_INT 6
34677: DOUBLE
34678: EQUAL
34679: IFTRUE 34683
34681: GO 34701
34683: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34684: LD_ADDR_VAR 0 3
34688: PUSH
34689: LD_INT 4
34691: PUSH
34692: LD_INT 5
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: ST_TO_ADDR
34699: GO 35336
34701: LD_INT 10
34703: DOUBLE
34704: EQUAL
34705: IFTRUE 34709
34707: GO 34727
34709: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_INT 4
34717: PUSH
34718: LD_INT 5
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: ST_TO_ADDR
34725: GO 35336
34727: LD_INT 22
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34735
34733: GO 34761
34735: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: LD_INT 11
34743: PUSH
34744: LD_INT 12
34746: PUSH
34747: LD_INT 13
34749: PUSH
34750: LD_INT 14
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: ST_TO_ADDR
34759: GO 35336
34761: LD_INT 23
34763: DOUBLE
34764: EQUAL
34765: IFTRUE 34769
34767: GO 34795
34769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34770: LD_ADDR_VAR 0 3
34774: PUSH
34775: LD_INT 11
34777: PUSH
34778: LD_INT 12
34780: PUSH
34781: LD_INT 13
34783: PUSH
34784: LD_INT 14
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
34793: GO 35336
34795: LD_INT 24
34797: DOUBLE
34798: EQUAL
34799: IFTRUE 34803
34801: GO 34829
34803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34804: LD_ADDR_VAR 0 3
34808: PUSH
34809: LD_INT 11
34811: PUSH
34812: LD_INT 12
34814: PUSH
34815: LD_INT 13
34817: PUSH
34818: LD_INT 14
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
34827: GO 35336
34829: LD_INT 30
34831: DOUBLE
34832: EQUAL
34833: IFTRUE 34837
34835: GO 34863
34837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 11
34845: PUSH
34846: LD_INT 12
34848: PUSH
34849: LD_INT 13
34851: PUSH
34852: LD_INT 14
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: ST_TO_ADDR
34861: GO 35336
34863: LD_INT 25
34865: DOUBLE
34866: EQUAL
34867: IFTRUE 34871
34869: GO 34889
34871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34872: LD_ADDR_VAR 0 3
34876: PUSH
34877: LD_INT 13
34879: PUSH
34880: LD_INT 14
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: ST_TO_ADDR
34887: GO 35336
34889: LD_INT 27
34891: DOUBLE
34892: EQUAL
34893: IFTRUE 34897
34895: GO 34915
34897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34898: LD_ADDR_VAR 0 3
34902: PUSH
34903: LD_INT 13
34905: PUSH
34906: LD_INT 14
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: ST_TO_ADDR
34913: GO 35336
34915: LD_INT 28
34917: DOUBLE
34918: EQUAL
34919: IFTRUE 34923
34921: GO 34941
34923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_INT 13
34931: PUSH
34932: LD_INT 14
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: ST_TO_ADDR
34939: GO 35336
34941: LD_INT 29
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 34967
34949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_INT 13
34957: PUSH
34958: LD_INT 14
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: ST_TO_ADDR
34965: GO 35336
34967: LD_INT 31
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 34993
34975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34976: LD_ADDR_VAR 0 3
34980: PUSH
34981: LD_INT 13
34983: PUSH
34984: LD_INT 14
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: ST_TO_ADDR
34991: GO 35336
34993: LD_INT 26
34995: DOUBLE
34996: EQUAL
34997: IFTRUE 35001
34999: GO 35019
35001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35002: LD_ADDR_VAR 0 3
35006: PUSH
35007: LD_INT 13
35009: PUSH
35010: LD_INT 14
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: ST_TO_ADDR
35017: GO 35336
35019: LD_INT 42
35021: DOUBLE
35022: EQUAL
35023: IFTRUE 35027
35025: GO 35053
35027: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35028: LD_ADDR_VAR 0 3
35032: PUSH
35033: LD_INT 21
35035: PUSH
35036: LD_INT 22
35038: PUSH
35039: LD_INT 23
35041: PUSH
35042: LD_INT 24
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
35051: GO 35336
35053: LD_INT 43
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35087
35061: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 21
35069: PUSH
35070: LD_INT 22
35072: PUSH
35073: LD_INT 23
35075: PUSH
35076: LD_INT 24
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: ST_TO_ADDR
35085: GO 35336
35087: LD_INT 44
35089: DOUBLE
35090: EQUAL
35091: IFTRUE 35095
35093: GO 35121
35095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_INT 21
35103: PUSH
35104: LD_INT 22
35106: PUSH
35107: LD_INT 23
35109: PUSH
35110: LD_INT 24
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
35119: GO 35336
35121: LD_INT 45
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35155
35129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_INT 21
35137: PUSH
35138: LD_INT 22
35140: PUSH
35141: LD_INT 23
35143: PUSH
35144: LD_INT 24
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: ST_TO_ADDR
35153: GO 35336
35155: LD_INT 49
35157: DOUBLE
35158: EQUAL
35159: IFTRUE 35163
35161: GO 35189
35163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: LD_INT 21
35171: PUSH
35172: LD_INT 22
35174: PUSH
35175: LD_INT 23
35177: PUSH
35178: LD_INT 24
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
35187: GO 35336
35189: LD_INT 51
35191: DOUBLE
35192: EQUAL
35193: IFTRUE 35197
35195: GO 35223
35197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_INT 21
35205: PUSH
35206: LD_INT 22
35208: PUSH
35209: LD_INT 23
35211: PUSH
35212: LD_INT 24
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: ST_TO_ADDR
35221: GO 35336
35223: LD_INT 52
35225: DOUBLE
35226: EQUAL
35227: IFTRUE 35231
35229: GO 35257
35231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35232: LD_ADDR_VAR 0 3
35236: PUSH
35237: LD_INT 21
35239: PUSH
35240: LD_INT 22
35242: PUSH
35243: LD_INT 23
35245: PUSH
35246: LD_INT 24
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: ST_TO_ADDR
35255: GO 35336
35257: LD_INT 53
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35283
35265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_INT 23
35273: PUSH
35274: LD_INT 24
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: ST_TO_ADDR
35281: GO 35336
35283: LD_INT 46
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35291
35289: GO 35309
35291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35292: LD_ADDR_VAR 0 3
35296: PUSH
35297: LD_INT 23
35299: PUSH
35300: LD_INT 24
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: ST_TO_ADDR
35307: GO 35336
35309: LD_INT 47
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35317
35315: GO 35335
35317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35318: LD_ADDR_VAR 0 3
35322: PUSH
35323: LD_INT 23
35325: PUSH
35326: LD_INT 24
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: ST_TO_ADDR
35333: GO 35336
35335: POP
// result := ( chassis in result ) ;
35336: LD_ADDR_VAR 0 3
35340: PUSH
35341: LD_VAR 0 1
35345: PUSH
35346: LD_VAR 0 3
35350: IN
35351: ST_TO_ADDR
// end ;
35352: LD_VAR 0 3
35356: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35357: LD_INT 0
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
// result := array ;
35366: LD_ADDR_VAR 0 5
35370: PUSH
35371: LD_VAR 0 1
35375: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35376: LD_VAR 0 1
35380: NOT
35381: PUSH
35382: LD_VAR 0 2
35386: NOT
35387: OR
35388: PUSH
35389: LD_VAR 0 3
35393: NOT
35394: OR
35395: PUSH
35396: LD_VAR 0 2
35400: PUSH
35401: LD_VAR 0 1
35405: GREATER
35406: OR
35407: PUSH
35408: LD_VAR 0 3
35412: PUSH
35413: LD_VAR 0 1
35417: GREATER
35418: OR
35419: IFFALSE 35423
// exit ;
35421: GO 35719
// if direction then
35423: LD_VAR 0 4
35427: IFFALSE 35491
// begin d := 1 ;
35429: LD_ADDR_VAR 0 9
35433: PUSH
35434: LD_INT 1
35436: ST_TO_ADDR
// if i_from > i_to then
35437: LD_VAR 0 2
35441: PUSH
35442: LD_VAR 0 3
35446: GREATER
35447: IFFALSE 35473
// length := ( array - i_from ) + i_to else
35449: LD_ADDR_VAR 0 11
35453: PUSH
35454: LD_VAR 0 1
35458: PUSH
35459: LD_VAR 0 2
35463: MINUS
35464: PUSH
35465: LD_VAR 0 3
35469: PLUS
35470: ST_TO_ADDR
35471: GO 35489
// length := i_to - i_from ;
35473: LD_ADDR_VAR 0 11
35477: PUSH
35478: LD_VAR 0 3
35482: PUSH
35483: LD_VAR 0 2
35487: MINUS
35488: ST_TO_ADDR
// end else
35489: GO 35552
// begin d := - 1 ;
35491: LD_ADDR_VAR 0 9
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: ST_TO_ADDR
// if i_from > i_to then
35500: LD_VAR 0 2
35504: PUSH
35505: LD_VAR 0 3
35509: GREATER
35510: IFFALSE 35530
// length := i_from - i_to else
35512: LD_ADDR_VAR 0 11
35516: PUSH
35517: LD_VAR 0 2
35521: PUSH
35522: LD_VAR 0 3
35526: MINUS
35527: ST_TO_ADDR
35528: GO 35552
// length := ( array - i_to ) + i_from ;
35530: LD_ADDR_VAR 0 11
35534: PUSH
35535: LD_VAR 0 1
35539: PUSH
35540: LD_VAR 0 3
35544: MINUS
35545: PUSH
35546: LD_VAR 0 2
35550: PLUS
35551: ST_TO_ADDR
// end ; if not length then
35552: LD_VAR 0 11
35556: NOT
35557: IFFALSE 35561
// exit ;
35559: GO 35719
// tmp := array ;
35561: LD_ADDR_VAR 0 10
35565: PUSH
35566: LD_VAR 0 1
35570: ST_TO_ADDR
// for i = 1 to length do
35571: LD_ADDR_VAR 0 6
35575: PUSH
35576: DOUBLE
35577: LD_INT 1
35579: DEC
35580: ST_TO_ADDR
35581: LD_VAR 0 11
35585: PUSH
35586: FOR_TO
35587: IFFALSE 35707
// begin for j = 1 to array do
35589: LD_ADDR_VAR 0 7
35593: PUSH
35594: DOUBLE
35595: LD_INT 1
35597: DEC
35598: ST_TO_ADDR
35599: LD_VAR 0 1
35603: PUSH
35604: FOR_TO
35605: IFFALSE 35693
// begin k := j + d ;
35607: LD_ADDR_VAR 0 8
35611: PUSH
35612: LD_VAR 0 7
35616: PUSH
35617: LD_VAR 0 9
35621: PLUS
35622: ST_TO_ADDR
// if k > array then
35623: LD_VAR 0 8
35627: PUSH
35628: LD_VAR 0 1
35632: GREATER
35633: IFFALSE 35643
// k := 1 ;
35635: LD_ADDR_VAR 0 8
35639: PUSH
35640: LD_INT 1
35642: ST_TO_ADDR
// if not k then
35643: LD_VAR 0 8
35647: NOT
35648: IFFALSE 35660
// k := array ;
35650: LD_ADDR_VAR 0 8
35654: PUSH
35655: LD_VAR 0 1
35659: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35660: LD_ADDR_VAR 0 10
35664: PUSH
35665: LD_VAR 0 10
35669: PPUSH
35670: LD_VAR 0 8
35674: PPUSH
35675: LD_VAR 0 1
35679: PUSH
35680: LD_VAR 0 7
35684: ARRAY
35685: PPUSH
35686: CALL_OW 1
35690: ST_TO_ADDR
// end ;
35691: GO 35604
35693: POP
35694: POP
// array := tmp ;
35695: LD_ADDR_VAR 0 1
35699: PUSH
35700: LD_VAR 0 10
35704: ST_TO_ADDR
// end ;
35705: GO 35586
35707: POP
35708: POP
// result := array ;
35709: LD_ADDR_VAR 0 5
35713: PUSH
35714: LD_VAR 0 1
35718: ST_TO_ADDR
// end ;
35719: LD_VAR 0 5
35723: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35724: LD_INT 0
35726: PPUSH
35727: PPUSH
// result := 0 ;
35728: LD_ADDR_VAR 0 3
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
// if not array or not value in array then
35736: LD_VAR 0 1
35740: NOT
35741: PUSH
35742: LD_VAR 0 2
35746: PUSH
35747: LD_VAR 0 1
35751: IN
35752: NOT
35753: OR
35754: IFFALSE 35758
// exit ;
35756: GO 35812
// for i = 1 to array do
35758: LD_ADDR_VAR 0 4
35762: PUSH
35763: DOUBLE
35764: LD_INT 1
35766: DEC
35767: ST_TO_ADDR
35768: LD_VAR 0 1
35772: PUSH
35773: FOR_TO
35774: IFFALSE 35810
// if value = array [ i ] then
35776: LD_VAR 0 2
35780: PUSH
35781: LD_VAR 0 1
35785: PUSH
35786: LD_VAR 0 4
35790: ARRAY
35791: EQUAL
35792: IFFALSE 35808
// begin result := i ;
35794: LD_ADDR_VAR 0 3
35798: PUSH
35799: LD_VAR 0 4
35803: ST_TO_ADDR
// exit ;
35804: POP
35805: POP
35806: GO 35812
// end ;
35808: GO 35773
35810: POP
35811: POP
// end ;
35812: LD_VAR 0 3
35816: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35817: LD_INT 0
35819: PPUSH
// vc_chassis := chassis ;
35820: LD_ADDR_OWVAR 37
35824: PUSH
35825: LD_VAR 0 1
35829: ST_TO_ADDR
// vc_engine := engine ;
35830: LD_ADDR_OWVAR 39
35834: PUSH
35835: LD_VAR 0 2
35839: ST_TO_ADDR
// vc_control := control ;
35840: LD_ADDR_OWVAR 38
35844: PUSH
35845: LD_VAR 0 3
35849: ST_TO_ADDR
// vc_weapon := weapon ;
35850: LD_ADDR_OWVAR 40
35854: PUSH
35855: LD_VAR 0 4
35859: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35860: LD_ADDR_OWVAR 41
35864: PUSH
35865: LD_VAR 0 5
35869: ST_TO_ADDR
// end ;
35870: LD_VAR 0 6
35874: RET
// export function WantPlant ( unit ) ; var task ; begin
35875: LD_INT 0
35877: PPUSH
35878: PPUSH
// result := false ;
35879: LD_ADDR_VAR 0 2
35883: PUSH
35884: LD_INT 0
35886: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35887: LD_ADDR_VAR 0 3
35891: PUSH
35892: LD_VAR 0 1
35896: PPUSH
35897: CALL_OW 437
35901: ST_TO_ADDR
// if task then
35902: LD_VAR 0 3
35906: IFFALSE 35934
// if task [ 1 ] [ 1 ] = p then
35908: LD_VAR 0 3
35912: PUSH
35913: LD_INT 1
35915: ARRAY
35916: PUSH
35917: LD_INT 1
35919: ARRAY
35920: PUSH
35921: LD_STRING p
35923: EQUAL
35924: IFFALSE 35934
// result := true ;
35926: LD_ADDR_VAR 0 2
35930: PUSH
35931: LD_INT 1
35933: ST_TO_ADDR
// end ;
35934: LD_VAR 0 2
35938: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35939: LD_INT 0
35941: PPUSH
35942: PPUSH
35943: PPUSH
35944: PPUSH
// if pos < 1 then
35945: LD_VAR 0 2
35949: PUSH
35950: LD_INT 1
35952: LESS
35953: IFFALSE 35957
// exit ;
35955: GO 36260
// if pos = 1 then
35957: LD_VAR 0 2
35961: PUSH
35962: LD_INT 1
35964: EQUAL
35965: IFFALSE 35998
// result := Replace ( arr , pos [ 1 ] , value ) else
35967: LD_ADDR_VAR 0 4
35971: PUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: LD_VAR 0 2
35981: PUSH
35982: LD_INT 1
35984: ARRAY
35985: PPUSH
35986: LD_VAR 0 3
35990: PPUSH
35991: CALL_OW 1
35995: ST_TO_ADDR
35996: GO 36260
// begin tmp := arr ;
35998: LD_ADDR_VAR 0 6
36002: PUSH
36003: LD_VAR 0 1
36007: ST_TO_ADDR
// s_arr := [ tmp ] ;
36008: LD_ADDR_VAR 0 7
36012: PUSH
36013: LD_VAR 0 6
36017: PUSH
36018: EMPTY
36019: LIST
36020: ST_TO_ADDR
// for i = 1 to pos - 1 do
36021: LD_ADDR_VAR 0 5
36025: PUSH
36026: DOUBLE
36027: LD_INT 1
36029: DEC
36030: ST_TO_ADDR
36031: LD_VAR 0 2
36035: PUSH
36036: LD_INT 1
36038: MINUS
36039: PUSH
36040: FOR_TO
36041: IFFALSE 36086
// begin tmp := tmp [ pos [ i ] ] ;
36043: LD_ADDR_VAR 0 6
36047: PUSH
36048: LD_VAR 0 6
36052: PUSH
36053: LD_VAR 0 2
36057: PUSH
36058: LD_VAR 0 5
36062: ARRAY
36063: ARRAY
36064: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36065: LD_ADDR_VAR 0 7
36069: PUSH
36070: LD_VAR 0 7
36074: PUSH
36075: LD_VAR 0 6
36079: PUSH
36080: EMPTY
36081: LIST
36082: ADD
36083: ST_TO_ADDR
// end ;
36084: GO 36040
36086: POP
36087: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36088: LD_ADDR_VAR 0 6
36092: PUSH
36093: LD_VAR 0 6
36097: PPUSH
36098: LD_VAR 0 2
36102: PUSH
36103: LD_VAR 0 2
36107: ARRAY
36108: PPUSH
36109: LD_VAR 0 3
36113: PPUSH
36114: CALL_OW 1
36118: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36119: LD_ADDR_VAR 0 7
36123: PUSH
36124: LD_VAR 0 7
36128: PPUSH
36129: LD_VAR 0 7
36133: PPUSH
36134: LD_VAR 0 6
36138: PPUSH
36139: CALL_OW 1
36143: ST_TO_ADDR
// for i = s_arr downto 2 do
36144: LD_ADDR_VAR 0 5
36148: PUSH
36149: DOUBLE
36150: LD_VAR 0 7
36154: INC
36155: ST_TO_ADDR
36156: LD_INT 2
36158: PUSH
36159: FOR_DOWNTO
36160: IFFALSE 36244
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36162: LD_ADDR_VAR 0 6
36166: PUSH
36167: LD_VAR 0 7
36171: PUSH
36172: LD_VAR 0 5
36176: PUSH
36177: LD_INT 1
36179: MINUS
36180: ARRAY
36181: PPUSH
36182: LD_VAR 0 2
36186: PUSH
36187: LD_VAR 0 5
36191: PUSH
36192: LD_INT 1
36194: MINUS
36195: ARRAY
36196: PPUSH
36197: LD_VAR 0 7
36201: PUSH
36202: LD_VAR 0 5
36206: ARRAY
36207: PPUSH
36208: CALL_OW 1
36212: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36213: LD_ADDR_VAR 0 7
36217: PUSH
36218: LD_VAR 0 7
36222: PPUSH
36223: LD_VAR 0 5
36227: PUSH
36228: LD_INT 1
36230: MINUS
36231: PPUSH
36232: LD_VAR 0 6
36236: PPUSH
36237: CALL_OW 1
36241: ST_TO_ADDR
// end ;
36242: GO 36159
36244: POP
36245: POP
// result := s_arr [ 1 ] ;
36246: LD_ADDR_VAR 0 4
36250: PUSH
36251: LD_VAR 0 7
36255: PUSH
36256: LD_INT 1
36258: ARRAY
36259: ST_TO_ADDR
// end ; end ;
36260: LD_VAR 0 4
36264: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36265: LD_INT 0
36267: PPUSH
36268: PPUSH
// if not list then
36269: LD_VAR 0 1
36273: NOT
36274: IFFALSE 36278
// exit ;
36276: GO 36369
// i := list [ pos1 ] ;
36278: LD_ADDR_VAR 0 5
36282: PUSH
36283: LD_VAR 0 1
36287: PUSH
36288: LD_VAR 0 2
36292: ARRAY
36293: ST_TO_ADDR
// if not i then
36294: LD_VAR 0 5
36298: NOT
36299: IFFALSE 36303
// exit ;
36301: GO 36369
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36303: LD_ADDR_VAR 0 1
36307: PUSH
36308: LD_VAR 0 1
36312: PPUSH
36313: LD_VAR 0 2
36317: PPUSH
36318: LD_VAR 0 1
36322: PUSH
36323: LD_VAR 0 3
36327: ARRAY
36328: PPUSH
36329: CALL_OW 1
36333: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36334: LD_ADDR_VAR 0 1
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: LD_VAR 0 3
36348: PPUSH
36349: LD_VAR 0 5
36353: PPUSH
36354: CALL_OW 1
36358: ST_TO_ADDR
// result := list ;
36359: LD_ADDR_VAR 0 4
36363: PUSH
36364: LD_VAR 0 1
36368: ST_TO_ADDR
// end ;
36369: LD_VAR 0 4
36373: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36374: LD_INT 0
36376: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36377: LD_ADDR_VAR 0 5
36381: PUSH
36382: LD_VAR 0 1
36386: PPUSH
36387: CALL_OW 250
36391: PPUSH
36392: LD_VAR 0 1
36396: PPUSH
36397: CALL_OW 251
36401: PPUSH
36402: LD_VAR 0 2
36406: PPUSH
36407: LD_VAR 0 3
36411: PPUSH
36412: LD_VAR 0 4
36416: PPUSH
36417: CALL 36427 0 5
36421: ST_TO_ADDR
// end ;
36422: LD_VAR 0 5
36426: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36427: LD_INT 0
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
// if not list then
36433: LD_VAR 0 3
36437: NOT
36438: IFFALSE 36442
// exit ;
36440: GO 36830
// result := [ ] ;
36442: LD_ADDR_VAR 0 6
36446: PUSH
36447: EMPTY
36448: ST_TO_ADDR
// for i in list do
36449: LD_ADDR_VAR 0 7
36453: PUSH
36454: LD_VAR 0 3
36458: PUSH
36459: FOR_IN
36460: IFFALSE 36662
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36462: LD_ADDR_VAR 0 9
36466: PUSH
36467: LD_VAR 0 7
36471: PPUSH
36472: LD_VAR 0 1
36476: PPUSH
36477: LD_VAR 0 2
36481: PPUSH
36482: CALL_OW 297
36486: ST_TO_ADDR
// if not result then
36487: LD_VAR 0 6
36491: NOT
36492: IFFALSE 36518
// result := [ [ i , tmp ] ] else
36494: LD_ADDR_VAR 0 6
36498: PUSH
36499: LD_VAR 0 7
36503: PUSH
36504: LD_VAR 0 9
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: EMPTY
36514: LIST
36515: ST_TO_ADDR
36516: GO 36660
// begin if result [ result ] [ 2 ] < tmp then
36518: LD_VAR 0 6
36522: PUSH
36523: LD_VAR 0 6
36527: ARRAY
36528: PUSH
36529: LD_INT 2
36531: ARRAY
36532: PUSH
36533: LD_VAR 0 9
36537: LESS
36538: IFFALSE 36580
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36540: LD_ADDR_VAR 0 6
36544: PUSH
36545: LD_VAR 0 6
36549: PPUSH
36550: LD_VAR 0 6
36554: PUSH
36555: LD_INT 1
36557: PLUS
36558: PPUSH
36559: LD_VAR 0 7
36563: PUSH
36564: LD_VAR 0 9
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PPUSH
36573: CALL_OW 2
36577: ST_TO_ADDR
36578: GO 36660
// for j = 1 to result do
36580: LD_ADDR_VAR 0 8
36584: PUSH
36585: DOUBLE
36586: LD_INT 1
36588: DEC
36589: ST_TO_ADDR
36590: LD_VAR 0 6
36594: PUSH
36595: FOR_TO
36596: IFFALSE 36658
// begin if tmp < result [ j ] [ 2 ] then
36598: LD_VAR 0 9
36602: PUSH
36603: LD_VAR 0 6
36607: PUSH
36608: LD_VAR 0 8
36612: ARRAY
36613: PUSH
36614: LD_INT 2
36616: ARRAY
36617: LESS
36618: IFFALSE 36656
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36620: LD_ADDR_VAR 0 6
36624: PUSH
36625: LD_VAR 0 6
36629: PPUSH
36630: LD_VAR 0 8
36634: PPUSH
36635: LD_VAR 0 7
36639: PUSH
36640: LD_VAR 0 9
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PPUSH
36649: CALL_OW 2
36653: ST_TO_ADDR
// break ;
36654: GO 36658
// end ; end ;
36656: GO 36595
36658: POP
36659: POP
// end ; end ;
36660: GO 36459
36662: POP
36663: POP
// if result and not asc then
36664: LD_VAR 0 6
36668: PUSH
36669: LD_VAR 0 4
36673: NOT
36674: AND
36675: IFFALSE 36750
// begin tmp := result ;
36677: LD_ADDR_VAR 0 9
36681: PUSH
36682: LD_VAR 0 6
36686: ST_TO_ADDR
// for i = tmp downto 1 do
36687: LD_ADDR_VAR 0 7
36691: PUSH
36692: DOUBLE
36693: LD_VAR 0 9
36697: INC
36698: ST_TO_ADDR
36699: LD_INT 1
36701: PUSH
36702: FOR_DOWNTO
36703: IFFALSE 36748
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36705: LD_ADDR_VAR 0 6
36709: PUSH
36710: LD_VAR 0 6
36714: PPUSH
36715: LD_VAR 0 9
36719: PUSH
36720: LD_VAR 0 7
36724: MINUS
36725: PUSH
36726: LD_INT 1
36728: PLUS
36729: PPUSH
36730: LD_VAR 0 9
36734: PUSH
36735: LD_VAR 0 7
36739: ARRAY
36740: PPUSH
36741: CALL_OW 1
36745: ST_TO_ADDR
36746: GO 36702
36748: POP
36749: POP
// end ; tmp := [ ] ;
36750: LD_ADDR_VAR 0 9
36754: PUSH
36755: EMPTY
36756: ST_TO_ADDR
// if mode then
36757: LD_VAR 0 5
36761: IFFALSE 36830
// begin for i = 1 to result do
36763: LD_ADDR_VAR 0 7
36767: PUSH
36768: DOUBLE
36769: LD_INT 1
36771: DEC
36772: ST_TO_ADDR
36773: LD_VAR 0 6
36777: PUSH
36778: FOR_TO
36779: IFFALSE 36818
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36781: LD_ADDR_VAR 0 9
36785: PUSH
36786: LD_VAR 0 9
36790: PPUSH
36791: LD_VAR 0 7
36795: PPUSH
36796: LD_VAR 0 6
36800: PUSH
36801: LD_VAR 0 7
36805: ARRAY
36806: PUSH
36807: LD_INT 1
36809: ARRAY
36810: PPUSH
36811: CALL_OW 1
36815: ST_TO_ADDR
36816: GO 36778
36818: POP
36819: POP
// result := tmp ;
36820: LD_ADDR_VAR 0 6
36824: PUSH
36825: LD_VAR 0 9
36829: ST_TO_ADDR
// end ; end ;
36830: LD_VAR 0 6
36834: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36835: LD_INT 0
36837: PPUSH
36838: PPUSH
36839: PPUSH
36840: PPUSH
36841: PPUSH
36842: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36843: LD_ADDR_VAR 0 5
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: EMPTY
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: ST_TO_ADDR
// if not x or not y then
36865: LD_VAR 0 2
36869: NOT
36870: PUSH
36871: LD_VAR 0 3
36875: NOT
36876: OR
36877: IFFALSE 36881
// exit ;
36879: GO 38527
// if not range then
36881: LD_VAR 0 4
36885: NOT
36886: IFFALSE 36896
// range := 10 ;
36888: LD_ADDR_VAR 0 4
36892: PUSH
36893: LD_INT 10
36895: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36896: LD_ADDR_VAR 0 8
36900: PUSH
36901: LD_INT 81
36903: PUSH
36904: LD_VAR 0 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 92
36915: PUSH
36916: LD_VAR 0 2
36920: PUSH
36921: LD_VAR 0 3
36925: PUSH
36926: LD_VAR 0 4
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: LD_INT 21
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 69
36963: ST_TO_ADDR
// if not tmp then
36964: LD_VAR 0 8
36968: NOT
36969: IFFALSE 36973
// exit ;
36971: GO 38527
// for i in tmp do
36973: LD_ADDR_VAR 0 6
36977: PUSH
36978: LD_VAR 0 8
36982: PUSH
36983: FOR_IN
36984: IFFALSE 38502
// begin points := [ 0 , 0 , 0 ] ;
36986: LD_ADDR_VAR 0 9
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: LIST
37004: ST_TO_ADDR
// bpoints := 1 ;
37005: LD_ADDR_VAR 0 10
37009: PUSH
37010: LD_INT 1
37012: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37013: LD_VAR 0 6
37017: PPUSH
37018: CALL_OW 247
37022: PUSH
37023: LD_INT 1
37025: DOUBLE
37026: EQUAL
37027: IFTRUE 37031
37029: GO 37609
37031: POP
// begin if GetClass ( i ) = 1 then
37032: LD_VAR 0 6
37036: PPUSH
37037: CALL_OW 257
37041: PUSH
37042: LD_INT 1
37044: EQUAL
37045: IFFALSE 37066
// points := [ 10 , 5 , 3 ] ;
37047: LD_ADDR_VAR 0 9
37051: PUSH
37052: LD_INT 10
37054: PUSH
37055: LD_INT 5
37057: PUSH
37058: LD_INT 3
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37066: LD_VAR 0 6
37070: PPUSH
37071: CALL_OW 257
37075: PUSH
37076: LD_INT 2
37078: PUSH
37079: LD_INT 3
37081: PUSH
37082: LD_INT 4
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: IN
37090: IFFALSE 37111
// points := [ 3 , 2 , 1 ] ;
37092: LD_ADDR_VAR 0 9
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37111: LD_VAR 0 6
37115: PPUSH
37116: CALL_OW 257
37120: PUSH
37121: LD_INT 5
37123: EQUAL
37124: IFFALSE 37145
// points := [ 130 , 5 , 2 ] ;
37126: LD_ADDR_VAR 0 9
37130: PUSH
37131: LD_INT 130
37133: PUSH
37134: LD_INT 5
37136: PUSH
37137: LD_INT 2
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37145: LD_VAR 0 6
37149: PPUSH
37150: CALL_OW 257
37154: PUSH
37155: LD_INT 8
37157: EQUAL
37158: IFFALSE 37179
// points := [ 35 , 35 , 30 ] ;
37160: LD_ADDR_VAR 0 9
37164: PUSH
37165: LD_INT 35
37167: PUSH
37168: LD_INT 35
37170: PUSH
37171: LD_INT 30
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37179: LD_VAR 0 6
37183: PPUSH
37184: CALL_OW 257
37188: PUSH
37189: LD_INT 9
37191: EQUAL
37192: IFFALSE 37213
// points := [ 20 , 55 , 40 ] ;
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: LD_INT 20
37201: PUSH
37202: LD_INT 55
37204: PUSH
37205: LD_INT 40
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37213: LD_VAR 0 6
37217: PPUSH
37218: CALL_OW 257
37222: PUSH
37223: LD_INT 12
37225: PUSH
37226: LD_INT 16
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: IN
37233: IFFALSE 37254
// points := [ 5 , 3 , 2 ] ;
37235: LD_ADDR_VAR 0 9
37239: PUSH
37240: LD_INT 5
37242: PUSH
37243: LD_INT 3
37245: PUSH
37246: LD_INT 2
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: LIST
37253: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37254: LD_VAR 0 6
37258: PPUSH
37259: CALL_OW 257
37263: PUSH
37264: LD_INT 17
37266: EQUAL
37267: IFFALSE 37288
// points := [ 100 , 50 , 75 ] ;
37269: LD_ADDR_VAR 0 9
37273: PUSH
37274: LD_INT 100
37276: PUSH
37277: LD_INT 50
37279: PUSH
37280: LD_INT 75
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37288: LD_VAR 0 6
37292: PPUSH
37293: CALL_OW 257
37297: PUSH
37298: LD_INT 15
37300: EQUAL
37301: IFFALSE 37322
// points := [ 10 , 5 , 3 ] ;
37303: LD_ADDR_VAR 0 9
37307: PUSH
37308: LD_INT 10
37310: PUSH
37311: LD_INT 5
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37322: LD_VAR 0 6
37326: PPUSH
37327: CALL_OW 257
37331: PUSH
37332: LD_INT 14
37334: EQUAL
37335: IFFALSE 37356
// points := [ 10 , 0 , 0 ] ;
37337: LD_ADDR_VAR 0 9
37341: PUSH
37342: LD_INT 10
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37356: LD_VAR 0 6
37360: PPUSH
37361: CALL_OW 257
37365: PUSH
37366: LD_INT 11
37368: EQUAL
37369: IFFALSE 37390
// points := [ 30 , 10 , 5 ] ;
37371: LD_ADDR_VAR 0 9
37375: PUSH
37376: LD_INT 30
37378: PUSH
37379: LD_INT 10
37381: PUSH
37382: LD_INT 5
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37390: LD_VAR 0 1
37394: PPUSH
37395: LD_INT 5
37397: PPUSH
37398: CALL_OW 321
37402: PUSH
37403: LD_INT 2
37405: EQUAL
37406: IFFALSE 37423
// bpoints := bpoints * 1.8 ;
37408: LD_ADDR_VAR 0 10
37412: PUSH
37413: LD_VAR 0 10
37417: PUSH
37418: LD_REAL  1.80000000000000E+0000
37421: MUL
37422: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37423: LD_VAR 0 6
37427: PPUSH
37428: CALL_OW 257
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: LD_INT 4
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: IN
37451: PUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: LD_INT 51
37459: PPUSH
37460: CALL_OW 321
37464: PUSH
37465: LD_INT 2
37467: EQUAL
37468: AND
37469: IFFALSE 37486
// bpoints := bpoints * 1.2 ;
37471: LD_ADDR_VAR 0 10
37475: PUSH
37476: LD_VAR 0 10
37480: PUSH
37481: LD_REAL  1.20000000000000E+0000
37484: MUL
37485: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37486: LD_VAR 0 6
37490: PPUSH
37491: CALL_OW 257
37495: PUSH
37496: LD_INT 5
37498: PUSH
37499: LD_INT 7
37501: PUSH
37502: LD_INT 9
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: IN
37510: PUSH
37511: LD_VAR 0 1
37515: PPUSH
37516: LD_INT 52
37518: PPUSH
37519: CALL_OW 321
37523: PUSH
37524: LD_INT 2
37526: EQUAL
37527: AND
37528: IFFALSE 37545
// bpoints := bpoints * 1.5 ;
37530: LD_ADDR_VAR 0 10
37534: PUSH
37535: LD_VAR 0 10
37539: PUSH
37540: LD_REAL  1.50000000000000E+0000
37543: MUL
37544: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37545: LD_VAR 0 1
37549: PPUSH
37550: LD_INT 66
37552: PPUSH
37553: CALL_OW 321
37557: PUSH
37558: LD_INT 2
37560: EQUAL
37561: IFFALSE 37578
// bpoints := bpoints * 1.1 ;
37563: LD_ADDR_VAR 0 10
37567: PUSH
37568: LD_VAR 0 10
37572: PUSH
37573: LD_REAL  1.10000000000000E+0000
37576: MUL
37577: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37578: LD_ADDR_VAR 0 10
37582: PUSH
37583: LD_VAR 0 10
37587: PUSH
37588: LD_VAR 0 6
37592: PPUSH
37593: LD_INT 1
37595: PPUSH
37596: CALL_OW 259
37600: PUSH
37601: LD_REAL  1.15000000000000E+0000
37604: MUL
37605: MUL
37606: ST_TO_ADDR
// end ; unit_vehicle :
37607: GO 38431
37609: LD_INT 2
37611: DOUBLE
37612: EQUAL
37613: IFTRUE 37617
37615: GO 38419
37617: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37618: LD_VAR 0 6
37622: PPUSH
37623: CALL_OW 264
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: LD_INT 42
37633: PUSH
37634: LD_INT 24
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: IN
37642: IFFALSE 37663
// points := [ 25 , 5 , 3 ] ;
37644: LD_ADDR_VAR 0 9
37648: PUSH
37649: LD_INT 25
37651: PUSH
37652: LD_INT 5
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: LIST
37662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37663: LD_VAR 0 6
37667: PPUSH
37668: CALL_OW 264
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: LD_INT 43
37678: PUSH
37679: LD_INT 25
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: IN
37687: IFFALSE 37708
// points := [ 40 , 15 , 5 ] ;
37689: LD_ADDR_VAR 0 9
37693: PUSH
37694: LD_INT 40
37696: PUSH
37697: LD_INT 15
37699: PUSH
37700: LD_INT 5
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37708: LD_VAR 0 6
37712: PPUSH
37713: CALL_OW 264
37717: PUSH
37718: LD_INT 3
37720: PUSH
37721: LD_INT 23
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: IN
37728: IFFALSE 37749
// points := [ 7 , 25 , 8 ] ;
37730: LD_ADDR_VAR 0 9
37734: PUSH
37735: LD_INT 7
37737: PUSH
37738: LD_INT 25
37740: PUSH
37741: LD_INT 8
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: LIST
37748: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37749: LD_VAR 0 6
37753: PPUSH
37754: CALL_OW 264
37758: PUSH
37759: LD_INT 5
37761: PUSH
37762: LD_INT 27
37764: PUSH
37765: LD_INT 44
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: IN
37773: IFFALSE 37794
// points := [ 14 , 50 , 16 ] ;
37775: LD_ADDR_VAR 0 9
37779: PUSH
37780: LD_INT 14
37782: PUSH
37783: LD_INT 50
37785: PUSH
37786: LD_INT 16
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37794: LD_VAR 0 6
37798: PPUSH
37799: CALL_OW 264
37803: PUSH
37804: LD_INT 6
37806: PUSH
37807: LD_INT 46
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: IN
37814: IFFALSE 37835
// points := [ 32 , 120 , 70 ] ;
37816: LD_ADDR_VAR 0 9
37820: PUSH
37821: LD_INT 32
37823: PUSH
37824: LD_INT 120
37826: PUSH
37827: LD_INT 70
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37835: LD_VAR 0 6
37839: PPUSH
37840: CALL_OW 264
37844: PUSH
37845: LD_INT 7
37847: PUSH
37848: LD_INT 28
37850: PUSH
37851: LD_INT 45
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: IN
37859: IFFALSE 37880
// points := [ 35 , 20 , 45 ] ;
37861: LD_ADDR_VAR 0 9
37865: PUSH
37866: LD_INT 35
37868: PUSH
37869: LD_INT 20
37871: PUSH
37872: LD_INT 45
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37880: LD_VAR 0 6
37884: PPUSH
37885: CALL_OW 264
37889: PUSH
37890: LD_INT 47
37892: PUSH
37893: EMPTY
37894: LIST
37895: IN
37896: IFFALSE 37917
// points := [ 67 , 45 , 75 ] ;
37898: LD_ADDR_VAR 0 9
37902: PUSH
37903: LD_INT 67
37905: PUSH
37906: LD_INT 45
37908: PUSH
37909: LD_INT 75
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: LIST
37916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37917: LD_VAR 0 6
37921: PPUSH
37922: CALL_OW 264
37926: PUSH
37927: LD_INT 26
37929: PUSH
37930: EMPTY
37931: LIST
37932: IN
37933: IFFALSE 37954
// points := [ 120 , 30 , 80 ] ;
37935: LD_ADDR_VAR 0 9
37939: PUSH
37940: LD_INT 120
37942: PUSH
37943: LD_INT 30
37945: PUSH
37946: LD_INT 80
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 264
37963: PUSH
37964: LD_INT 22
37966: PUSH
37967: EMPTY
37968: LIST
37969: IN
37970: IFFALSE 37991
// points := [ 40 , 1 , 1 ] ;
37972: LD_ADDR_VAR 0 9
37976: PUSH
37977: LD_INT 40
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37991: LD_VAR 0 6
37995: PPUSH
37996: CALL_OW 264
38000: PUSH
38001: LD_INT 29
38003: PUSH
38004: EMPTY
38005: LIST
38006: IN
38007: IFFALSE 38028
// points := [ 70 , 200 , 400 ] ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_INT 70
38016: PUSH
38017: LD_INT 200
38019: PUSH
38020: LD_INT 400
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38028: LD_VAR 0 6
38032: PPUSH
38033: CALL_OW 264
38037: PUSH
38038: LD_INT 14
38040: PUSH
38041: LD_INT 53
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: IN
38048: IFFALSE 38069
// points := [ 40 , 10 , 20 ] ;
38050: LD_ADDR_VAR 0 9
38054: PUSH
38055: LD_INT 40
38057: PUSH
38058: LD_INT 10
38060: PUSH
38061: LD_INT 20
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38069: LD_VAR 0 6
38073: PPUSH
38074: CALL_OW 264
38078: PUSH
38079: LD_INT 9
38081: PUSH
38082: EMPTY
38083: LIST
38084: IN
38085: IFFALSE 38106
// points := [ 5 , 70 , 20 ] ;
38087: LD_ADDR_VAR 0 9
38091: PUSH
38092: LD_INT 5
38094: PUSH
38095: LD_INT 70
38097: PUSH
38098: LD_INT 20
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38106: LD_VAR 0 6
38110: PPUSH
38111: CALL_OW 264
38115: PUSH
38116: LD_INT 10
38118: PUSH
38119: EMPTY
38120: LIST
38121: IN
38122: IFFALSE 38143
// points := [ 35 , 110 , 70 ] ;
38124: LD_ADDR_VAR 0 9
38128: PUSH
38129: LD_INT 35
38131: PUSH
38132: LD_INT 110
38134: PUSH
38135: LD_INT 70
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38143: LD_VAR 0 6
38147: PPUSH
38148: CALL_OW 265
38152: PUSH
38153: LD_INT 25
38155: EQUAL
38156: IFFALSE 38177
// points := [ 80 , 65 , 100 ] ;
38158: LD_ADDR_VAR 0 9
38162: PUSH
38163: LD_INT 80
38165: PUSH
38166: LD_INT 65
38168: PUSH
38169: LD_INT 100
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38177: LD_VAR 0 6
38181: PPUSH
38182: CALL_OW 263
38186: PUSH
38187: LD_INT 1
38189: EQUAL
38190: IFFALSE 38225
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38192: LD_ADDR_VAR 0 10
38196: PUSH
38197: LD_VAR 0 10
38201: PUSH
38202: LD_VAR 0 6
38206: PPUSH
38207: CALL_OW 311
38211: PPUSH
38212: LD_INT 3
38214: PPUSH
38215: CALL_OW 259
38219: PUSH
38220: LD_INT 4
38222: MUL
38223: MUL
38224: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38225: LD_VAR 0 6
38229: PPUSH
38230: CALL_OW 263
38234: PUSH
38235: LD_INT 2
38237: EQUAL
38238: IFFALSE 38289
// begin j := IsControledBy ( i ) ;
38240: LD_ADDR_VAR 0 7
38244: PUSH
38245: LD_VAR 0 6
38249: PPUSH
38250: CALL_OW 312
38254: ST_TO_ADDR
// if j then
38255: LD_VAR 0 7
38259: IFFALSE 38289
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38261: LD_ADDR_VAR 0 10
38265: PUSH
38266: LD_VAR 0 10
38270: PUSH
38271: LD_VAR 0 7
38275: PPUSH
38276: LD_INT 3
38278: PPUSH
38279: CALL_OW 259
38283: PUSH
38284: LD_INT 3
38286: MUL
38287: MUL
38288: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38289: LD_VAR 0 6
38293: PPUSH
38294: CALL_OW 264
38298: PUSH
38299: LD_INT 5
38301: PUSH
38302: LD_INT 6
38304: PUSH
38305: LD_INT 46
38307: PUSH
38308: LD_INT 44
38310: PUSH
38311: LD_INT 47
38313: PUSH
38314: LD_INT 45
38316: PUSH
38317: LD_INT 28
38319: PUSH
38320: LD_INT 7
38322: PUSH
38323: LD_INT 27
38325: PUSH
38326: LD_INT 29
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: IN
38341: PUSH
38342: LD_VAR 0 1
38346: PPUSH
38347: LD_INT 52
38349: PPUSH
38350: CALL_OW 321
38354: PUSH
38355: LD_INT 2
38357: EQUAL
38358: AND
38359: IFFALSE 38376
// bpoints := bpoints * 1.2 ;
38361: LD_ADDR_VAR 0 10
38365: PUSH
38366: LD_VAR 0 10
38370: PUSH
38371: LD_REAL  1.20000000000000E+0000
38374: MUL
38375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38376: LD_VAR 0 6
38380: PPUSH
38381: CALL_OW 264
38385: PUSH
38386: LD_INT 6
38388: PUSH
38389: LD_INT 46
38391: PUSH
38392: LD_INT 47
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: LIST
38399: IN
38400: IFFALSE 38417
// bpoints := bpoints * 1.2 ;
38402: LD_ADDR_VAR 0 10
38406: PUSH
38407: LD_VAR 0 10
38411: PUSH
38412: LD_REAL  1.20000000000000E+0000
38415: MUL
38416: ST_TO_ADDR
// end ; unit_building :
38417: GO 38431
38419: LD_INT 3
38421: DOUBLE
38422: EQUAL
38423: IFTRUE 38427
38425: GO 38430
38427: POP
// ; end ;
38428: GO 38431
38430: POP
// for j = 1 to 3 do
38431: LD_ADDR_VAR 0 7
38435: PUSH
38436: DOUBLE
38437: LD_INT 1
38439: DEC
38440: ST_TO_ADDR
38441: LD_INT 3
38443: PUSH
38444: FOR_TO
38445: IFFALSE 38498
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38447: LD_ADDR_VAR 0 5
38451: PUSH
38452: LD_VAR 0 5
38456: PPUSH
38457: LD_VAR 0 7
38461: PPUSH
38462: LD_VAR 0 5
38466: PUSH
38467: LD_VAR 0 7
38471: ARRAY
38472: PUSH
38473: LD_VAR 0 9
38477: PUSH
38478: LD_VAR 0 7
38482: ARRAY
38483: PUSH
38484: LD_VAR 0 10
38488: MUL
38489: PLUS
38490: PPUSH
38491: CALL_OW 1
38495: ST_TO_ADDR
38496: GO 38444
38498: POP
38499: POP
// end ;
38500: GO 36983
38502: POP
38503: POP
// result := Replace ( result , 4 , tmp ) ;
38504: LD_ADDR_VAR 0 5
38508: PUSH
38509: LD_VAR 0 5
38513: PPUSH
38514: LD_INT 4
38516: PPUSH
38517: LD_VAR 0 8
38521: PPUSH
38522: CALL_OW 1
38526: ST_TO_ADDR
// end ;
38527: LD_VAR 0 5
38531: RET
// export function DangerAtRange ( unit , range ) ; begin
38532: LD_INT 0
38534: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38535: LD_ADDR_VAR 0 3
38539: PUSH
38540: LD_VAR 0 1
38544: PPUSH
38545: CALL_OW 255
38549: PPUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 250
38559: PPUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 251
38569: PPUSH
38570: LD_VAR 0 2
38574: PPUSH
38575: CALL 36835 0 4
38579: ST_TO_ADDR
// end ;
38580: LD_VAR 0 3
38584: RET
// export function DangerInArea ( side , area ) ; begin
38585: LD_INT 0
38587: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 2
38597: PPUSH
38598: LD_INT 81
38600: PUSH
38601: LD_VAR 0 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PPUSH
38610: CALL_OW 70
38614: ST_TO_ADDR
// end ;
38615: LD_VAR 0 3
38619: RET
// export function IsExtension ( b ) ; begin
38620: LD_INT 0
38622: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38623: LD_ADDR_VAR 0 2
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_INT 23
38635: PUSH
38636: LD_INT 20
38638: PUSH
38639: LD_INT 22
38641: PUSH
38642: LD_INT 17
38644: PUSH
38645: LD_INT 24
38647: PUSH
38648: LD_INT 21
38650: PUSH
38651: LD_INT 19
38653: PUSH
38654: LD_INT 16
38656: PUSH
38657: LD_INT 25
38659: PUSH
38660: LD_INT 18
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: IN
38675: ST_TO_ADDR
// end ;
38676: LD_VAR 0 2
38680: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38681: LD_INT 0
38683: PPUSH
38684: PPUSH
38685: PPUSH
// result := [ ] ;
38686: LD_ADDR_VAR 0 3
38690: PUSH
38691: EMPTY
38692: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38693: LD_ADDR_VAR 0 4
38697: PUSH
38698: LD_VAR 0 2
38702: PPUSH
38703: LD_INT 21
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PPUSH
38713: CALL_OW 70
38717: ST_TO_ADDR
// if not tmp then
38718: LD_VAR 0 4
38722: NOT
38723: IFFALSE 38727
// exit ;
38725: GO 38785
// for i in tmp do
38727: LD_ADDR_VAR 0 5
38731: PUSH
38732: LD_VAR 0 4
38736: PUSH
38737: FOR_IN
38738: IFFALSE 38773
// if GetBase ( i ) <> base then
38740: LD_VAR 0 5
38744: PPUSH
38745: CALL_OW 274
38749: PUSH
38750: LD_VAR 0 1
38754: NONEQUAL
38755: IFFALSE 38771
// ComLinkToBase ( base , i ) ;
38757: LD_VAR 0 1
38761: PPUSH
38762: LD_VAR 0 5
38766: PPUSH
38767: CALL_OW 169
38771: GO 38737
38773: POP
38774: POP
// result := tmp ;
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_VAR 0 4
38784: ST_TO_ADDR
// end ;
38785: LD_VAR 0 3
38789: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38790: LD_INT 0
38792: PPUSH
38793: PPUSH
// if BuildingStatus ( b ) = bs_build then
38794: LD_VAR 0 2
38798: PPUSH
38799: CALL_OW 461
38803: PUSH
38804: LD_INT 1
38806: EQUAL
38807: IFFALSE 38867
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38809: LD_VAR 0 1
38813: PPUSH
38814: LD_STRING h
38816: PUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: CALL_OW 250
38826: PUSH
38827: LD_VAR 0 2
38831: PPUSH
38832: CALL_OW 251
38836: PUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: PPUSH
38863: CALL_OW 446
// end ;
38867: LD_VAR 0 3
38871: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38872: LD_INT 0
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38880: LD_VAR 0 1
38884: NOT
38885: PUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 263
38895: PUSH
38896: LD_INT 2
38898: EQUAL
38899: NOT
38900: OR
38901: IFFALSE 38905
// exit ;
38903: GO 39221
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38905: LD_ADDR_VAR 0 6
38909: PUSH
38910: LD_INT 22
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 255
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 30
38932: PUSH
38933: LD_INT 36
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 34
38942: PUSH
38943: LD_INT 31
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PPUSH
38959: CALL_OW 69
38963: ST_TO_ADDR
// if not tmp then
38964: LD_VAR 0 6
38968: NOT
38969: IFFALSE 38973
// exit ;
38971: GO 39221
// result := [ ] ;
38973: LD_ADDR_VAR 0 2
38977: PUSH
38978: EMPTY
38979: ST_TO_ADDR
// for i in tmp do
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_VAR 0 6
38989: PUSH
38990: FOR_IN
38991: IFFALSE 39062
// begin t := UnitsInside ( i ) ;
38993: LD_ADDR_VAR 0 4
38997: PUSH
38998: LD_VAR 0 3
39002: PPUSH
39003: CALL_OW 313
39007: ST_TO_ADDR
// if t then
39008: LD_VAR 0 4
39012: IFFALSE 39060
// for j in t do
39014: LD_ADDR_VAR 0 7
39018: PUSH
39019: LD_VAR 0 4
39023: PUSH
39024: FOR_IN
39025: IFFALSE 39058
// result := Insert ( result , result + 1 , j ) ;
39027: LD_ADDR_VAR 0 2
39031: PUSH
39032: LD_VAR 0 2
39036: PPUSH
39037: LD_VAR 0 2
39041: PUSH
39042: LD_INT 1
39044: PLUS
39045: PPUSH
39046: LD_VAR 0 7
39050: PPUSH
39051: CALL_OW 2
39055: ST_TO_ADDR
39056: GO 39024
39058: POP
39059: POP
// end ;
39060: GO 38990
39062: POP
39063: POP
// if not result then
39064: LD_VAR 0 2
39068: NOT
39069: IFFALSE 39073
// exit ;
39071: GO 39221
// mech := result [ 1 ] ;
39073: LD_ADDR_VAR 0 5
39077: PUSH
39078: LD_VAR 0 2
39082: PUSH
39083: LD_INT 1
39085: ARRAY
39086: ST_TO_ADDR
// if result > 1 then
39087: LD_VAR 0 2
39091: PUSH
39092: LD_INT 1
39094: GREATER
39095: IFFALSE 39207
// for i = 2 to result do
39097: LD_ADDR_VAR 0 3
39101: PUSH
39102: DOUBLE
39103: LD_INT 2
39105: DEC
39106: ST_TO_ADDR
39107: LD_VAR 0 2
39111: PUSH
39112: FOR_TO
39113: IFFALSE 39205
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39115: LD_ADDR_VAR 0 4
39119: PUSH
39120: LD_VAR 0 2
39124: PUSH
39125: LD_VAR 0 3
39129: ARRAY
39130: PPUSH
39131: LD_INT 3
39133: PPUSH
39134: CALL_OW 259
39138: PUSH
39139: LD_VAR 0 2
39143: PUSH
39144: LD_VAR 0 3
39148: ARRAY
39149: PPUSH
39150: CALL_OW 432
39154: MINUS
39155: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39156: LD_VAR 0 4
39160: PUSH
39161: LD_VAR 0 5
39165: PPUSH
39166: LD_INT 3
39168: PPUSH
39169: CALL_OW 259
39173: PUSH
39174: LD_VAR 0 5
39178: PPUSH
39179: CALL_OW 432
39183: MINUS
39184: GREATEREQUAL
39185: IFFALSE 39203
// mech := result [ i ] ;
39187: LD_ADDR_VAR 0 5
39191: PUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_VAR 0 3
39201: ARRAY
39202: ST_TO_ADDR
// end ;
39203: GO 39112
39205: POP
39206: POP
// ComLinkTo ( vehicle , mech ) ;
39207: LD_VAR 0 1
39211: PPUSH
39212: LD_VAR 0 5
39216: PPUSH
39217: CALL_OW 135
// end ;
39221: LD_VAR 0 2
39225: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39226: LD_INT 0
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
39240: PPUSH
// result := [ ] ;
39241: LD_ADDR_VAR 0 7
39245: PUSH
39246: EMPTY
39247: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39248: LD_VAR 0 1
39252: PPUSH
39253: CALL_OW 266
39257: PUSH
39258: LD_INT 0
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: IN
39268: NOT
39269: IFFALSE 39273
// exit ;
39271: GO 40904
// if name then
39273: LD_VAR 0 3
39277: IFFALSE 39293
// SetBName ( base_dep , name ) ;
39279: LD_VAR 0 1
39283: PPUSH
39284: LD_VAR 0 3
39288: PPUSH
39289: CALL_OW 500
// base := GetBase ( base_dep ) ;
39293: LD_ADDR_VAR 0 15
39297: PUSH
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 274
39307: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39308: LD_ADDR_VAR 0 16
39312: PUSH
39313: LD_VAR 0 1
39317: PPUSH
39318: CALL_OW 255
39322: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39323: LD_ADDR_VAR 0 17
39327: PUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 248
39337: ST_TO_ADDR
// if sources then
39338: LD_VAR 0 5
39342: IFFALSE 39389
// for i = 1 to 3 do
39344: LD_ADDR_VAR 0 8
39348: PUSH
39349: DOUBLE
39350: LD_INT 1
39352: DEC
39353: ST_TO_ADDR
39354: LD_INT 3
39356: PUSH
39357: FOR_TO
39358: IFFALSE 39387
// AddResourceType ( base , i , sources [ i ] ) ;
39360: LD_VAR 0 15
39364: PPUSH
39365: LD_VAR 0 8
39369: PPUSH
39370: LD_VAR 0 5
39374: PUSH
39375: LD_VAR 0 8
39379: ARRAY
39380: PPUSH
39381: CALL_OW 276
39385: GO 39357
39387: POP
39388: POP
// buildings := GetBaseBuildings ( base , area ) ;
39389: LD_ADDR_VAR 0 18
39393: PUSH
39394: LD_VAR 0 15
39398: PPUSH
39399: LD_VAR 0 2
39403: PPUSH
39404: CALL 38681 0 2
39408: ST_TO_ADDR
// InitHc ;
39409: CALL_OW 19
// InitUc ;
39413: CALL_OW 18
// uc_side := side ;
39417: LD_ADDR_OWVAR 20
39421: PUSH
39422: LD_VAR 0 16
39426: ST_TO_ADDR
// uc_nation := nation ;
39427: LD_ADDR_OWVAR 21
39431: PUSH
39432: LD_VAR 0 17
39436: ST_TO_ADDR
// if buildings then
39437: LD_VAR 0 18
39441: IFFALSE 40763
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39443: LD_ADDR_VAR 0 19
39447: PUSH
39448: LD_VAR 0 18
39452: PPUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 30
39458: PUSH
39459: LD_INT 29
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 30
39468: PUSH
39469: LD_INT 30
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: LIST
39480: PPUSH
39481: CALL_OW 72
39485: ST_TO_ADDR
// if tmp then
39486: LD_VAR 0 19
39490: IFFALSE 39538
// for i in tmp do
39492: LD_ADDR_VAR 0 8
39496: PUSH
39497: LD_VAR 0 19
39501: PUSH
39502: FOR_IN
39503: IFFALSE 39536
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39505: LD_VAR 0 8
39509: PPUSH
39510: CALL_OW 250
39514: PPUSH
39515: LD_VAR 0 8
39519: PPUSH
39520: CALL_OW 251
39524: PPUSH
39525: LD_VAR 0 16
39529: PPUSH
39530: CALL_OW 441
39534: GO 39502
39536: POP
39537: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39538: LD_VAR 0 18
39542: PPUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 30
39548: PUSH
39549: LD_INT 32
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 30
39558: PUSH
39559: LD_INT 33
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: PPUSH
39571: CALL_OW 72
39575: IFFALSE 39663
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39577: LD_ADDR_VAR 0 8
39581: PUSH
39582: LD_VAR 0 18
39586: PPUSH
39587: LD_INT 2
39589: PUSH
39590: LD_INT 30
39592: PUSH
39593: LD_INT 32
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 30
39602: PUSH
39603: LD_INT 33
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: PPUSH
39615: CALL_OW 72
39619: PUSH
39620: FOR_IN
39621: IFFALSE 39661
// begin if not GetBWeapon ( i ) then
39623: LD_VAR 0 8
39627: PPUSH
39628: CALL_OW 269
39632: NOT
39633: IFFALSE 39659
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39635: LD_VAR 0 8
39639: PPUSH
39640: LD_VAR 0 8
39644: PPUSH
39645: LD_VAR 0 2
39649: PPUSH
39650: CALL 40909 0 2
39654: PPUSH
39655: CALL_OW 431
// end ;
39659: GO 39620
39661: POP
39662: POP
// end ; for i = 1 to personel do
39663: LD_ADDR_VAR 0 8
39667: PUSH
39668: DOUBLE
39669: LD_INT 1
39671: DEC
39672: ST_TO_ADDR
39673: LD_VAR 0 6
39677: PUSH
39678: FOR_TO
39679: IFFALSE 40743
// begin if i > 4 then
39681: LD_VAR 0 8
39685: PUSH
39686: LD_INT 4
39688: GREATER
39689: IFFALSE 39693
// break ;
39691: GO 40743
// case i of 1 :
39693: LD_VAR 0 8
39697: PUSH
39698: LD_INT 1
39700: DOUBLE
39701: EQUAL
39702: IFTRUE 39706
39704: GO 39786
39706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39707: LD_ADDR_VAR 0 12
39711: PUSH
39712: LD_VAR 0 18
39716: PPUSH
39717: LD_INT 22
39719: PUSH
39720: LD_VAR 0 16
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 58
39731: PUSH
39732: EMPTY
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 30
39740: PUSH
39741: LD_INT 32
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 30
39750: PUSH
39751: LD_INT 4
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 30
39760: PUSH
39761: LD_INT 5
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: LIST
39778: PPUSH
39779: CALL_OW 72
39783: ST_TO_ADDR
39784: GO 40008
39786: LD_INT 2
39788: DOUBLE
39789: EQUAL
39790: IFTRUE 39794
39792: GO 39856
39794: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39795: LD_ADDR_VAR 0 12
39799: PUSH
39800: LD_VAR 0 18
39804: PPUSH
39805: LD_INT 22
39807: PUSH
39808: LD_VAR 0 16
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: LD_INT 30
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 30
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PPUSH
39849: CALL_OW 72
39853: ST_TO_ADDR
39854: GO 40008
39856: LD_INT 3
39858: DOUBLE
39859: EQUAL
39860: IFTRUE 39864
39862: GO 39926
39864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39865: LD_ADDR_VAR 0 12
39869: PUSH
39870: LD_VAR 0 18
39874: PPUSH
39875: LD_INT 22
39877: PUSH
39878: LD_VAR 0 16
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: LD_INT 30
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 30
39902: PUSH
39903: LD_INT 3
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PPUSH
39919: CALL_OW 72
39923: ST_TO_ADDR
39924: GO 40008
39926: LD_INT 4
39928: DOUBLE
39929: EQUAL
39930: IFTRUE 39934
39932: GO 40007
39934: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39935: LD_ADDR_VAR 0 12
39939: PUSH
39940: LD_VAR 0 18
39944: PPUSH
39945: LD_INT 22
39947: PUSH
39948: LD_VAR 0 16
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: PUSH
39960: LD_INT 30
39962: PUSH
39963: LD_INT 6
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 30
39972: PUSH
39973: LD_INT 7
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 30
39982: PUSH
39983: LD_INT 8
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PPUSH
40000: CALL_OW 72
40004: ST_TO_ADDR
40005: GO 40008
40007: POP
// if i = 1 then
40008: LD_VAR 0 8
40012: PUSH
40013: LD_INT 1
40015: EQUAL
40016: IFFALSE 40127
// begin tmp := [ ] ;
40018: LD_ADDR_VAR 0 19
40022: PUSH
40023: EMPTY
40024: ST_TO_ADDR
// for j in f do
40025: LD_ADDR_VAR 0 9
40029: PUSH
40030: LD_VAR 0 12
40034: PUSH
40035: FOR_IN
40036: IFFALSE 40109
// if GetBType ( j ) = b_bunker then
40038: LD_VAR 0 9
40042: PPUSH
40043: CALL_OW 266
40047: PUSH
40048: LD_INT 32
40050: EQUAL
40051: IFFALSE 40078
// tmp := Insert ( tmp , 1 , j ) else
40053: LD_ADDR_VAR 0 19
40057: PUSH
40058: LD_VAR 0 19
40062: PPUSH
40063: LD_INT 1
40065: PPUSH
40066: LD_VAR 0 9
40070: PPUSH
40071: CALL_OW 2
40075: ST_TO_ADDR
40076: GO 40107
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40078: LD_ADDR_VAR 0 19
40082: PUSH
40083: LD_VAR 0 19
40087: PPUSH
40088: LD_VAR 0 19
40092: PUSH
40093: LD_INT 1
40095: PLUS
40096: PPUSH
40097: LD_VAR 0 9
40101: PPUSH
40102: CALL_OW 2
40106: ST_TO_ADDR
40107: GO 40035
40109: POP
40110: POP
// if tmp then
40111: LD_VAR 0 19
40115: IFFALSE 40127
// f := tmp ;
40117: LD_ADDR_VAR 0 12
40121: PUSH
40122: LD_VAR 0 19
40126: ST_TO_ADDR
// end ; x := personel [ i ] ;
40127: LD_ADDR_VAR 0 13
40131: PUSH
40132: LD_VAR 0 6
40136: PUSH
40137: LD_VAR 0 8
40141: ARRAY
40142: ST_TO_ADDR
// if x = - 1 then
40143: LD_VAR 0 13
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: EQUAL
40152: IFFALSE 40361
// begin for j in f do
40154: LD_ADDR_VAR 0 9
40158: PUSH
40159: LD_VAR 0 12
40163: PUSH
40164: FOR_IN
40165: IFFALSE 40357
// repeat InitHc ;
40167: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40171: LD_VAR 0 9
40175: PPUSH
40176: CALL_OW 266
40180: PUSH
40181: LD_INT 5
40183: EQUAL
40184: IFFALSE 40254
// begin if UnitsInside ( j ) < 3 then
40186: LD_VAR 0 9
40190: PPUSH
40191: CALL_OW 313
40195: PUSH
40196: LD_INT 3
40198: LESS
40199: IFFALSE 40235
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40201: LD_INT 0
40203: PPUSH
40204: LD_INT 5
40206: PUSH
40207: LD_INT 8
40209: PUSH
40210: LD_INT 9
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: LIST
40217: PUSH
40218: LD_VAR 0 17
40222: ARRAY
40223: PPUSH
40224: LD_VAR 0 4
40228: PPUSH
40229: CALL_OW 380
40233: GO 40252
// PrepareHuman ( false , i , skill ) ;
40235: LD_INT 0
40237: PPUSH
40238: LD_VAR 0 8
40242: PPUSH
40243: LD_VAR 0 4
40247: PPUSH
40248: CALL_OW 380
// end else
40252: GO 40271
// PrepareHuman ( false , i , skill ) ;
40254: LD_INT 0
40256: PPUSH
40257: LD_VAR 0 8
40261: PPUSH
40262: LD_VAR 0 4
40266: PPUSH
40267: CALL_OW 380
// un := CreateHuman ;
40271: LD_ADDR_VAR 0 14
40275: PUSH
40276: CALL_OW 44
40280: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40281: LD_ADDR_VAR 0 7
40285: PUSH
40286: LD_VAR 0 7
40290: PPUSH
40291: LD_INT 1
40293: PPUSH
40294: LD_VAR 0 14
40298: PPUSH
40299: CALL_OW 2
40303: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40304: LD_VAR 0 14
40308: PPUSH
40309: LD_VAR 0 9
40313: PPUSH
40314: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40318: LD_VAR 0 9
40322: PPUSH
40323: CALL_OW 313
40327: PUSH
40328: LD_INT 6
40330: EQUAL
40331: PUSH
40332: LD_VAR 0 9
40336: PPUSH
40337: CALL_OW 266
40341: PUSH
40342: LD_INT 32
40344: PUSH
40345: LD_INT 31
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: IN
40352: OR
40353: IFFALSE 40167
40355: GO 40164
40357: POP
40358: POP
// end else
40359: GO 40741
// for j = 1 to x do
40361: LD_ADDR_VAR 0 9
40365: PUSH
40366: DOUBLE
40367: LD_INT 1
40369: DEC
40370: ST_TO_ADDR
40371: LD_VAR 0 13
40375: PUSH
40376: FOR_TO
40377: IFFALSE 40739
// begin InitHc ;
40379: CALL_OW 19
// if not f then
40383: LD_VAR 0 12
40387: NOT
40388: IFFALSE 40477
// begin PrepareHuman ( false , i , skill ) ;
40390: LD_INT 0
40392: PPUSH
40393: LD_VAR 0 8
40397: PPUSH
40398: LD_VAR 0 4
40402: PPUSH
40403: CALL_OW 380
// un := CreateHuman ;
40407: LD_ADDR_VAR 0 14
40411: PUSH
40412: CALL_OW 44
40416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40417: LD_ADDR_VAR 0 7
40421: PUSH
40422: LD_VAR 0 7
40426: PPUSH
40427: LD_INT 1
40429: PPUSH
40430: LD_VAR 0 14
40434: PPUSH
40435: CALL_OW 2
40439: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40440: LD_VAR 0 14
40444: PPUSH
40445: LD_VAR 0 1
40449: PPUSH
40450: CALL_OW 250
40454: PPUSH
40455: LD_VAR 0 1
40459: PPUSH
40460: CALL_OW 251
40464: PPUSH
40465: LD_INT 10
40467: PPUSH
40468: LD_INT 0
40470: PPUSH
40471: CALL_OW 50
// continue ;
40475: GO 40376
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40477: LD_VAR 0 12
40481: PUSH
40482: LD_INT 1
40484: ARRAY
40485: PPUSH
40486: CALL_OW 313
40490: PUSH
40491: LD_VAR 0 12
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PPUSH
40500: CALL_OW 266
40504: PUSH
40505: LD_INT 32
40507: PUSH
40508: LD_INT 31
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: IN
40515: AND
40516: PUSH
40517: LD_VAR 0 12
40521: PUSH
40522: LD_INT 1
40524: ARRAY
40525: PPUSH
40526: CALL_OW 313
40530: PUSH
40531: LD_INT 6
40533: EQUAL
40534: OR
40535: IFFALSE 40555
// f := Delete ( f , 1 ) ;
40537: LD_ADDR_VAR 0 12
40541: PUSH
40542: LD_VAR 0 12
40546: PPUSH
40547: LD_INT 1
40549: PPUSH
40550: CALL_OW 3
40554: ST_TO_ADDR
// if not f then
40555: LD_VAR 0 12
40559: NOT
40560: IFFALSE 40578
// begin x := x + 2 ;
40562: LD_ADDR_VAR 0 13
40566: PUSH
40567: LD_VAR 0 13
40571: PUSH
40572: LD_INT 2
40574: PLUS
40575: ST_TO_ADDR
// continue ;
40576: GO 40376
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40578: LD_VAR 0 12
40582: PUSH
40583: LD_INT 1
40585: ARRAY
40586: PPUSH
40587: CALL_OW 266
40591: PUSH
40592: LD_INT 5
40594: EQUAL
40595: IFFALSE 40669
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40597: LD_VAR 0 12
40601: PUSH
40602: LD_INT 1
40604: ARRAY
40605: PPUSH
40606: CALL_OW 313
40610: PUSH
40611: LD_INT 3
40613: LESS
40614: IFFALSE 40650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40616: LD_INT 0
40618: PPUSH
40619: LD_INT 5
40621: PUSH
40622: LD_INT 8
40624: PUSH
40625: LD_INT 9
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: PUSH
40633: LD_VAR 0 17
40637: ARRAY
40638: PPUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: CALL_OW 380
40648: GO 40667
// PrepareHuman ( false , i , skill ) ;
40650: LD_INT 0
40652: PPUSH
40653: LD_VAR 0 8
40657: PPUSH
40658: LD_VAR 0 4
40662: PPUSH
40663: CALL_OW 380
// end else
40667: GO 40686
// PrepareHuman ( false , i , skill ) ;
40669: LD_INT 0
40671: PPUSH
40672: LD_VAR 0 8
40676: PPUSH
40677: LD_VAR 0 4
40681: PPUSH
40682: CALL_OW 380
// un := CreateHuman ;
40686: LD_ADDR_VAR 0 14
40690: PUSH
40691: CALL_OW 44
40695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40696: LD_ADDR_VAR 0 7
40700: PUSH
40701: LD_VAR 0 7
40705: PPUSH
40706: LD_INT 1
40708: PPUSH
40709: LD_VAR 0 14
40713: PPUSH
40714: CALL_OW 2
40718: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40719: LD_VAR 0 14
40723: PPUSH
40724: LD_VAR 0 12
40728: PUSH
40729: LD_INT 1
40731: ARRAY
40732: PPUSH
40733: CALL_OW 52
// end ;
40737: GO 40376
40739: POP
40740: POP
// end ;
40741: GO 39678
40743: POP
40744: POP
// result := result ^ buildings ;
40745: LD_ADDR_VAR 0 7
40749: PUSH
40750: LD_VAR 0 7
40754: PUSH
40755: LD_VAR 0 18
40759: ADD
40760: ST_TO_ADDR
// end else
40761: GO 40904
// begin for i = 1 to personel do
40763: LD_ADDR_VAR 0 8
40767: PUSH
40768: DOUBLE
40769: LD_INT 1
40771: DEC
40772: ST_TO_ADDR
40773: LD_VAR 0 6
40777: PUSH
40778: FOR_TO
40779: IFFALSE 40902
// begin if i > 4 then
40781: LD_VAR 0 8
40785: PUSH
40786: LD_INT 4
40788: GREATER
40789: IFFALSE 40793
// break ;
40791: GO 40902
// x := personel [ i ] ;
40793: LD_ADDR_VAR 0 13
40797: PUSH
40798: LD_VAR 0 6
40802: PUSH
40803: LD_VAR 0 8
40807: ARRAY
40808: ST_TO_ADDR
// if x = - 1 then
40809: LD_VAR 0 13
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: EQUAL
40818: IFFALSE 40822
// continue ;
40820: GO 40778
// PrepareHuman ( false , i , skill ) ;
40822: LD_INT 0
40824: PPUSH
40825: LD_VAR 0 8
40829: PPUSH
40830: LD_VAR 0 4
40834: PPUSH
40835: CALL_OW 380
// un := CreateHuman ;
40839: LD_ADDR_VAR 0 14
40843: PUSH
40844: CALL_OW 44
40848: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40849: LD_VAR 0 14
40853: PPUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: CALL_OW 250
40863: PPUSH
40864: LD_VAR 0 1
40868: PPUSH
40869: CALL_OW 251
40873: PPUSH
40874: LD_INT 10
40876: PPUSH
40877: LD_INT 0
40879: PPUSH
40880: CALL_OW 50
// result := result ^ un ;
40884: LD_ADDR_VAR 0 7
40888: PUSH
40889: LD_VAR 0 7
40893: PUSH
40894: LD_VAR 0 14
40898: ADD
40899: ST_TO_ADDR
// end ;
40900: GO 40778
40902: POP
40903: POP
// end ; end ;
40904: LD_VAR 0 7
40908: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40909: LD_INT 0
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
40916: PPUSH
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
40921: PPUSH
40922: PPUSH
40923: PPUSH
40924: PPUSH
40925: PPUSH
40926: PPUSH
// result := false ;
40927: LD_ADDR_VAR 0 3
40931: PUSH
40932: LD_INT 0
40934: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40935: LD_VAR 0 1
40939: NOT
40940: PUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 266
40950: PUSH
40951: LD_INT 32
40953: PUSH
40954: LD_INT 33
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: IN
40961: NOT
40962: OR
40963: IFFALSE 40967
// exit ;
40965: GO 42103
// nat := GetNation ( tower ) ;
40967: LD_ADDR_VAR 0 12
40971: PUSH
40972: LD_VAR 0 1
40976: PPUSH
40977: CALL_OW 248
40981: ST_TO_ADDR
// side := GetSide ( tower ) ;
40982: LD_ADDR_VAR 0 16
40986: PUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: CALL_OW 255
40996: ST_TO_ADDR
// x := GetX ( tower ) ;
40997: LD_ADDR_VAR 0 10
41001: PUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 250
41011: ST_TO_ADDR
// y := GetY ( tower ) ;
41012: LD_ADDR_VAR 0 11
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 251
41026: ST_TO_ADDR
// if not x or not y then
41027: LD_VAR 0 10
41031: NOT
41032: PUSH
41033: LD_VAR 0 11
41037: NOT
41038: OR
41039: IFFALSE 41043
// exit ;
41041: GO 42103
// weapon := 0 ;
41043: LD_ADDR_VAR 0 18
41047: PUSH
41048: LD_INT 0
41050: ST_TO_ADDR
// fac_list := [ ] ;
41051: LD_ADDR_VAR 0 17
41055: PUSH
41056: EMPTY
41057: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41058: LD_ADDR_VAR 0 6
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: CALL_OW 274
41072: PPUSH
41073: LD_VAR 0 2
41077: PPUSH
41078: CALL 38681 0 2
41082: PPUSH
41083: LD_INT 30
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PPUSH
41093: CALL_OW 72
41097: ST_TO_ADDR
// if not factories then
41098: LD_VAR 0 6
41102: NOT
41103: IFFALSE 41107
// exit ;
41105: GO 42103
// for i in factories do
41107: LD_ADDR_VAR 0 8
41111: PUSH
41112: LD_VAR 0 6
41116: PUSH
41117: FOR_IN
41118: IFFALSE 41143
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41120: LD_ADDR_VAR 0 17
41124: PUSH
41125: LD_VAR 0 17
41129: PUSH
41130: LD_VAR 0 8
41134: PPUSH
41135: CALL_OW 478
41139: UNION
41140: ST_TO_ADDR
41141: GO 41117
41143: POP
41144: POP
// if not fac_list then
41145: LD_VAR 0 17
41149: NOT
41150: IFFALSE 41154
// exit ;
41152: GO 42103
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41154: LD_ADDR_VAR 0 5
41158: PUSH
41159: LD_INT 4
41161: PUSH
41162: LD_INT 5
41164: PUSH
41165: LD_INT 9
41167: PUSH
41168: LD_INT 10
41170: PUSH
41171: LD_INT 6
41173: PUSH
41174: LD_INT 7
41176: PUSH
41177: LD_INT 11
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 27
41191: PUSH
41192: LD_INT 28
41194: PUSH
41195: LD_INT 26
41197: PUSH
41198: LD_INT 30
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 43
41209: PUSH
41210: LD_INT 44
41212: PUSH
41213: LD_INT 46
41215: PUSH
41216: LD_INT 45
41218: PUSH
41219: LD_INT 47
41221: PUSH
41222: LD_INT 49
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: PUSH
41238: LD_VAR 0 12
41242: ARRAY
41243: ST_TO_ADDR
// for i in list do
41244: LD_ADDR_VAR 0 8
41248: PUSH
41249: LD_VAR 0 5
41253: PUSH
41254: FOR_IN
41255: IFFALSE 41288
// if not i in fac_list then
41257: LD_VAR 0 8
41261: PUSH
41262: LD_VAR 0 17
41266: IN
41267: NOT
41268: IFFALSE 41286
// list := list diff i ;
41270: LD_ADDR_VAR 0 5
41274: PUSH
41275: LD_VAR 0 5
41279: PUSH
41280: LD_VAR 0 8
41284: DIFF
41285: ST_TO_ADDR
41286: GO 41254
41288: POP
41289: POP
// if not list then
41290: LD_VAR 0 5
41294: NOT
41295: IFFALSE 41299
// exit ;
41297: GO 42103
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41299: LD_VAR 0 12
41303: PUSH
41304: LD_INT 3
41306: EQUAL
41307: PUSH
41308: LD_INT 49
41310: PUSH
41311: LD_VAR 0 5
41315: IN
41316: AND
41317: PUSH
41318: LD_INT 31
41320: PPUSH
41321: LD_VAR 0 16
41325: PPUSH
41326: CALL_OW 321
41330: PUSH
41331: LD_INT 2
41333: EQUAL
41334: AND
41335: IFFALSE 41395
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41337: LD_INT 22
41339: PUSH
41340: LD_VAR 0 16
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 35
41351: PUSH
41352: LD_INT 49
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 91
41361: PUSH
41362: LD_VAR 0 1
41366: PUSH
41367: LD_INT 10
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: LIST
41379: PPUSH
41380: CALL_OW 69
41384: NOT
41385: IFFALSE 41395
// weapon := ru_time_lapser ;
41387: LD_ADDR_VAR 0 18
41391: PUSH
41392: LD_INT 49
41394: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41395: LD_VAR 0 12
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: IN
41410: PUSH
41411: LD_INT 11
41413: PUSH
41414: LD_VAR 0 5
41418: IN
41419: PUSH
41420: LD_INT 30
41422: PUSH
41423: LD_VAR 0 5
41427: IN
41428: OR
41429: AND
41430: PUSH
41431: LD_INT 6
41433: PPUSH
41434: LD_VAR 0 16
41438: PPUSH
41439: CALL_OW 321
41443: PUSH
41444: LD_INT 2
41446: EQUAL
41447: AND
41448: IFFALSE 41613
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41450: LD_INT 22
41452: PUSH
41453: LD_VAR 0 16
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 2
41464: PUSH
41465: LD_INT 35
41467: PUSH
41468: LD_INT 11
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 35
41477: PUSH
41478: LD_INT 30
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 91
41492: PUSH
41493: LD_VAR 0 1
41497: PUSH
41498: LD_INT 18
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: PPUSH
41511: CALL_OW 69
41515: NOT
41516: PUSH
41517: LD_INT 22
41519: PUSH
41520: LD_VAR 0 16
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: LD_INT 30
41534: PUSH
41535: LD_INT 32
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 30
41544: PUSH
41545: LD_INT 33
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 91
41559: PUSH
41560: LD_VAR 0 1
41564: PUSH
41565: LD_INT 12
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: PUSH
41578: EMPTY
41579: LIST
41580: PPUSH
41581: CALL_OW 69
41585: PUSH
41586: LD_INT 2
41588: GREATER
41589: AND
41590: IFFALSE 41613
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41592: LD_ADDR_VAR 0 18
41596: PUSH
41597: LD_INT 11
41599: PUSH
41600: LD_INT 30
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_VAR 0 12
41611: ARRAY
41612: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41613: LD_VAR 0 18
41617: NOT
41618: PUSH
41619: LD_INT 40
41621: PPUSH
41622: LD_VAR 0 16
41626: PPUSH
41627: CALL_OW 321
41631: PUSH
41632: LD_INT 2
41634: EQUAL
41635: AND
41636: PUSH
41637: LD_INT 7
41639: PUSH
41640: LD_VAR 0 5
41644: IN
41645: PUSH
41646: LD_INT 28
41648: PUSH
41649: LD_VAR 0 5
41653: IN
41654: OR
41655: PUSH
41656: LD_INT 45
41658: PUSH
41659: LD_VAR 0 5
41663: IN
41664: OR
41665: AND
41666: IFFALSE 41920
// begin hex := GetHexInfo ( x , y ) ;
41668: LD_ADDR_VAR 0 4
41672: PUSH
41673: LD_VAR 0 10
41677: PPUSH
41678: LD_VAR 0 11
41682: PPUSH
41683: CALL_OW 546
41687: ST_TO_ADDR
// if hex [ 1 ] then
41688: LD_VAR 0 4
41692: PUSH
41693: LD_INT 1
41695: ARRAY
41696: IFFALSE 41700
// exit ;
41698: GO 42103
// height := hex [ 2 ] ;
41700: LD_ADDR_VAR 0 15
41704: PUSH
41705: LD_VAR 0 4
41709: PUSH
41710: LD_INT 2
41712: ARRAY
41713: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41714: LD_ADDR_VAR 0 14
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: LD_INT 5
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: ST_TO_ADDR
// for i in tmp do
41737: LD_ADDR_VAR 0 8
41741: PUSH
41742: LD_VAR 0 14
41746: PUSH
41747: FOR_IN
41748: IFFALSE 41918
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41750: LD_ADDR_VAR 0 9
41754: PUSH
41755: LD_VAR 0 10
41759: PPUSH
41760: LD_VAR 0 8
41764: PPUSH
41765: LD_INT 5
41767: PPUSH
41768: CALL_OW 272
41772: PUSH
41773: LD_VAR 0 11
41777: PPUSH
41778: LD_VAR 0 8
41782: PPUSH
41783: LD_INT 5
41785: PPUSH
41786: CALL_OW 273
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41795: LD_VAR 0 9
41799: PUSH
41800: LD_INT 1
41802: ARRAY
41803: PPUSH
41804: LD_VAR 0 9
41808: PUSH
41809: LD_INT 2
41811: ARRAY
41812: PPUSH
41813: CALL_OW 488
41817: IFFALSE 41916
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41819: LD_ADDR_VAR 0 4
41823: PUSH
41824: LD_VAR 0 9
41828: PUSH
41829: LD_INT 1
41831: ARRAY
41832: PPUSH
41833: LD_VAR 0 9
41837: PUSH
41838: LD_INT 2
41840: ARRAY
41841: PPUSH
41842: CALL_OW 546
41846: ST_TO_ADDR
// if hex [ 1 ] then
41847: LD_VAR 0 4
41851: PUSH
41852: LD_INT 1
41854: ARRAY
41855: IFFALSE 41859
// continue ;
41857: GO 41747
// h := hex [ 2 ] ;
41859: LD_ADDR_VAR 0 13
41863: PUSH
41864: LD_VAR 0 4
41868: PUSH
41869: LD_INT 2
41871: ARRAY
41872: ST_TO_ADDR
// if h + 7 < height then
41873: LD_VAR 0 13
41877: PUSH
41878: LD_INT 7
41880: PLUS
41881: PUSH
41882: LD_VAR 0 15
41886: LESS
41887: IFFALSE 41916
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41889: LD_ADDR_VAR 0 18
41893: PUSH
41894: LD_INT 7
41896: PUSH
41897: LD_INT 28
41899: PUSH
41900: LD_INT 45
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: LIST
41907: PUSH
41908: LD_VAR 0 12
41912: ARRAY
41913: ST_TO_ADDR
// break ;
41914: GO 41918
// end ; end ; end ;
41916: GO 41747
41918: POP
41919: POP
// end ; if not weapon then
41920: LD_VAR 0 18
41924: NOT
41925: IFFALSE 41985
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41927: LD_ADDR_VAR 0 5
41931: PUSH
41932: LD_VAR 0 5
41936: PUSH
41937: LD_INT 11
41939: PUSH
41940: LD_INT 30
41942: PUSH
41943: LD_INT 49
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: DIFF
41951: ST_TO_ADDR
// if not list then
41952: LD_VAR 0 5
41956: NOT
41957: IFFALSE 41961
// exit ;
41959: GO 42103
// weapon := list [ rand ( 1 , list ) ] ;
41961: LD_ADDR_VAR 0 18
41965: PUSH
41966: LD_VAR 0 5
41970: PUSH
41971: LD_INT 1
41973: PPUSH
41974: LD_VAR 0 5
41978: PPUSH
41979: CALL_OW 12
41983: ARRAY
41984: ST_TO_ADDR
// end ; if weapon then
41985: LD_VAR 0 18
41989: IFFALSE 42103
// begin tmp := CostOfWeapon ( weapon ) ;
41991: LD_ADDR_VAR 0 14
41995: PUSH
41996: LD_VAR 0 18
42000: PPUSH
42001: CALL_OW 451
42005: ST_TO_ADDR
// j := GetBase ( tower ) ;
42006: LD_ADDR_VAR 0 9
42010: PUSH
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 274
42020: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42021: LD_VAR 0 9
42025: PPUSH
42026: LD_INT 1
42028: PPUSH
42029: CALL_OW 275
42033: PUSH
42034: LD_VAR 0 14
42038: PUSH
42039: LD_INT 1
42041: ARRAY
42042: GREATEREQUAL
42043: PUSH
42044: LD_VAR 0 9
42048: PPUSH
42049: LD_INT 2
42051: PPUSH
42052: CALL_OW 275
42056: PUSH
42057: LD_VAR 0 14
42061: PUSH
42062: LD_INT 2
42064: ARRAY
42065: GREATEREQUAL
42066: AND
42067: PUSH
42068: LD_VAR 0 9
42072: PPUSH
42073: LD_INT 3
42075: PPUSH
42076: CALL_OW 275
42080: PUSH
42081: LD_VAR 0 14
42085: PUSH
42086: LD_INT 3
42088: ARRAY
42089: GREATEREQUAL
42090: AND
42091: IFFALSE 42103
// result := weapon ;
42093: LD_ADDR_VAR 0 3
42097: PUSH
42098: LD_VAR 0 18
42102: ST_TO_ADDR
// end ; end ;
42103: LD_VAR 0 3
42107: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42108: LD_INT 0
42110: PPUSH
42111: PPUSH
// result := true ;
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_INT 1
42119: ST_TO_ADDR
// if array1 = array2 then
42120: LD_VAR 0 1
42124: PUSH
42125: LD_VAR 0 2
42129: EQUAL
42130: IFFALSE 42190
// begin for i = 1 to array1 do
42132: LD_ADDR_VAR 0 4
42136: PUSH
42137: DOUBLE
42138: LD_INT 1
42140: DEC
42141: ST_TO_ADDR
42142: LD_VAR 0 1
42146: PUSH
42147: FOR_TO
42148: IFFALSE 42186
// if array1 [ i ] <> array2 [ i ] then
42150: LD_VAR 0 1
42154: PUSH
42155: LD_VAR 0 4
42159: ARRAY
42160: PUSH
42161: LD_VAR 0 2
42165: PUSH
42166: LD_VAR 0 4
42170: ARRAY
42171: NONEQUAL
42172: IFFALSE 42184
// begin result := false ;
42174: LD_ADDR_VAR 0 3
42178: PUSH
42179: LD_INT 0
42181: ST_TO_ADDR
// break ;
42182: GO 42186
// end ;
42184: GO 42147
42186: POP
42187: POP
// end else
42188: GO 42198
// result := false ;
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_INT 0
42197: ST_TO_ADDR
// end ;
42198: LD_VAR 0 3
42202: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42203: LD_INT 0
42205: PPUSH
42206: PPUSH
42207: PPUSH
// pom := GetBase ( fac ) ;
42208: LD_ADDR_VAR 0 5
42212: PUSH
42213: LD_VAR 0 1
42217: PPUSH
42218: CALL_OW 274
42222: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42223: LD_ADDR_VAR 0 4
42227: PUSH
42228: LD_VAR 0 2
42232: PUSH
42233: LD_INT 1
42235: ARRAY
42236: PPUSH
42237: LD_VAR 0 2
42241: PUSH
42242: LD_INT 2
42244: ARRAY
42245: PPUSH
42246: LD_VAR 0 2
42250: PUSH
42251: LD_INT 3
42253: ARRAY
42254: PPUSH
42255: LD_VAR 0 2
42259: PUSH
42260: LD_INT 4
42262: ARRAY
42263: PPUSH
42264: CALL_OW 449
42268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42269: LD_ADDR_VAR 0 3
42273: PUSH
42274: LD_VAR 0 5
42278: PPUSH
42279: LD_INT 1
42281: PPUSH
42282: CALL_OW 275
42286: PUSH
42287: LD_VAR 0 4
42291: PUSH
42292: LD_INT 1
42294: ARRAY
42295: GREATEREQUAL
42296: PUSH
42297: LD_VAR 0 5
42301: PPUSH
42302: LD_INT 2
42304: PPUSH
42305: CALL_OW 275
42309: PUSH
42310: LD_VAR 0 4
42314: PUSH
42315: LD_INT 2
42317: ARRAY
42318: GREATEREQUAL
42319: AND
42320: PUSH
42321: LD_VAR 0 5
42325: PPUSH
42326: LD_INT 3
42328: PPUSH
42329: CALL_OW 275
42333: PUSH
42334: LD_VAR 0 4
42338: PUSH
42339: LD_INT 3
42341: ARRAY
42342: GREATEREQUAL
42343: AND
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 3
42349: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42350: LD_INT 0
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
// pom := GetBase ( building ) ;
42356: LD_ADDR_VAR 0 3
42360: PUSH
42361: LD_VAR 0 1
42365: PPUSH
42366: CALL_OW 274
42370: ST_TO_ADDR
// if not pom then
42371: LD_VAR 0 3
42375: NOT
42376: IFFALSE 42380
// exit ;
42378: GO 42550
// btype := GetBType ( building ) ;
42380: LD_ADDR_VAR 0 5
42384: PUSH
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 266
42394: ST_TO_ADDR
// if btype = b_armoury then
42395: LD_VAR 0 5
42399: PUSH
42400: LD_INT 4
42402: EQUAL
42403: IFFALSE 42413
// btype := b_barracks ;
42405: LD_ADDR_VAR 0 5
42409: PUSH
42410: LD_INT 5
42412: ST_TO_ADDR
// if btype = b_depot then
42413: LD_VAR 0 5
42417: PUSH
42418: LD_INT 0
42420: EQUAL
42421: IFFALSE 42431
// btype := b_warehouse ;
42423: LD_ADDR_VAR 0 5
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// if btype = b_workshop then
42431: LD_VAR 0 5
42435: PUSH
42436: LD_INT 2
42438: EQUAL
42439: IFFALSE 42449
// btype := b_factory ;
42441: LD_ADDR_VAR 0 5
42445: PUSH
42446: LD_INT 3
42448: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42449: LD_ADDR_VAR 0 4
42453: PUSH
42454: LD_VAR 0 5
42458: PPUSH
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 248
42468: PPUSH
42469: CALL_OW 450
42473: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42474: LD_ADDR_VAR 0 2
42478: PUSH
42479: LD_VAR 0 3
42483: PPUSH
42484: LD_INT 1
42486: PPUSH
42487: CALL_OW 275
42491: PUSH
42492: LD_VAR 0 4
42496: PUSH
42497: LD_INT 1
42499: ARRAY
42500: GREATEREQUAL
42501: PUSH
42502: LD_VAR 0 3
42506: PPUSH
42507: LD_INT 2
42509: PPUSH
42510: CALL_OW 275
42514: PUSH
42515: LD_VAR 0 4
42519: PUSH
42520: LD_INT 2
42522: ARRAY
42523: GREATEREQUAL
42524: AND
42525: PUSH
42526: LD_VAR 0 3
42530: PPUSH
42531: LD_INT 3
42533: PPUSH
42534: CALL_OW 275
42538: PUSH
42539: LD_VAR 0 4
42543: PUSH
42544: LD_INT 3
42546: ARRAY
42547: GREATEREQUAL
42548: AND
42549: ST_TO_ADDR
// end ;
42550: LD_VAR 0 2
42554: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42555: LD_INT 0
42557: PPUSH
42558: PPUSH
42559: PPUSH
// pom := GetBase ( building ) ;
42560: LD_ADDR_VAR 0 4
42564: PUSH
42565: LD_VAR 0 1
42569: PPUSH
42570: CALL_OW 274
42574: ST_TO_ADDR
// if not pom then
42575: LD_VAR 0 4
42579: NOT
42580: IFFALSE 42584
// exit ;
42582: GO 42685
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42584: LD_ADDR_VAR 0 5
42588: PUSH
42589: LD_VAR 0 2
42593: PPUSH
42594: LD_VAR 0 1
42598: PPUSH
42599: CALL_OW 248
42603: PPUSH
42604: CALL_OW 450
42608: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42609: LD_ADDR_VAR 0 3
42613: PUSH
42614: LD_VAR 0 4
42618: PPUSH
42619: LD_INT 1
42621: PPUSH
42622: CALL_OW 275
42626: PUSH
42627: LD_VAR 0 5
42631: PUSH
42632: LD_INT 1
42634: ARRAY
42635: GREATEREQUAL
42636: PUSH
42637: LD_VAR 0 4
42641: PPUSH
42642: LD_INT 2
42644: PPUSH
42645: CALL_OW 275
42649: PUSH
42650: LD_VAR 0 5
42654: PUSH
42655: LD_INT 2
42657: ARRAY
42658: GREATEREQUAL
42659: AND
42660: PUSH
42661: LD_VAR 0 4
42665: PPUSH
42666: LD_INT 3
42668: PPUSH
42669: CALL_OW 275
42673: PUSH
42674: LD_VAR 0 5
42678: PUSH
42679: LD_INT 3
42681: ARRAY
42682: GREATEREQUAL
42683: AND
42684: ST_TO_ADDR
// end ;
42685: LD_VAR 0 3
42689: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42690: LD_INT 0
42692: PPUSH
42693: PPUSH
42694: PPUSH
42695: PPUSH
42696: PPUSH
42697: PPUSH
42698: PPUSH
42699: PPUSH
42700: PPUSH
42701: PPUSH
// result := false ;
42702: LD_ADDR_VAR 0 6
42706: PUSH
42707: LD_INT 0
42709: ST_TO_ADDR
// if not base or not btype or not x or not y then
42710: LD_VAR 0 1
42714: NOT
42715: PUSH
42716: LD_VAR 0 2
42720: NOT
42721: OR
42722: PUSH
42723: LD_VAR 0 3
42727: NOT
42728: OR
42729: PUSH
42730: LD_VAR 0 4
42734: NOT
42735: OR
42736: IFFALSE 42740
// exit ;
42738: GO 43349
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42740: LD_ADDR_VAR 0 12
42744: PUSH
42745: LD_VAR 0 2
42749: PPUSH
42750: LD_VAR 0 3
42754: PPUSH
42755: LD_VAR 0 4
42759: PPUSH
42760: LD_VAR 0 5
42764: PPUSH
42765: LD_VAR 0 1
42769: PUSH
42770: LD_INT 1
42772: ARRAY
42773: PPUSH
42774: CALL_OW 248
42778: PPUSH
42779: LD_INT 0
42781: PPUSH
42782: CALL 44186 0 6
42786: ST_TO_ADDR
// if not hexes then
42787: LD_VAR 0 12
42791: NOT
42792: IFFALSE 42796
// exit ;
42794: GO 43349
// for i = 1 to hexes do
42796: LD_ADDR_VAR 0 7
42800: PUSH
42801: DOUBLE
42802: LD_INT 1
42804: DEC
42805: ST_TO_ADDR
42806: LD_VAR 0 12
42810: PUSH
42811: FOR_TO
42812: IFFALSE 43347
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42814: LD_ADDR_VAR 0 11
42818: PUSH
42819: LD_VAR 0 12
42823: PUSH
42824: LD_VAR 0 7
42828: ARRAY
42829: PUSH
42830: LD_INT 1
42832: ARRAY
42833: PPUSH
42834: LD_VAR 0 12
42838: PUSH
42839: LD_VAR 0 7
42843: ARRAY
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: PPUSH
42849: CALL_OW 428
42853: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42854: LD_VAR 0 12
42858: PUSH
42859: LD_VAR 0 7
42863: ARRAY
42864: PUSH
42865: LD_INT 1
42867: ARRAY
42868: PPUSH
42869: LD_VAR 0 12
42873: PUSH
42874: LD_VAR 0 7
42878: ARRAY
42879: PUSH
42880: LD_INT 2
42882: ARRAY
42883: PPUSH
42884: CALL_OW 351
42888: PUSH
42889: LD_VAR 0 12
42893: PUSH
42894: LD_VAR 0 7
42898: ARRAY
42899: PUSH
42900: LD_INT 1
42902: ARRAY
42903: PPUSH
42904: LD_VAR 0 12
42908: PUSH
42909: LD_VAR 0 7
42913: ARRAY
42914: PUSH
42915: LD_INT 2
42917: ARRAY
42918: PPUSH
42919: CALL_OW 488
42923: NOT
42924: OR
42925: PUSH
42926: LD_VAR 0 11
42930: PPUSH
42931: CALL_OW 247
42935: PUSH
42936: LD_INT 3
42938: EQUAL
42939: OR
42940: IFFALSE 42946
// exit ;
42942: POP
42943: POP
42944: GO 43349
// if not tmp or not tmp in base then
42946: LD_VAR 0 11
42950: NOT
42951: PUSH
42952: LD_VAR 0 11
42956: PUSH
42957: LD_VAR 0 1
42961: IN
42962: NOT
42963: OR
42964: IFFALSE 42968
// continue ;
42966: GO 42811
// result := true ;
42968: LD_ADDR_VAR 0 6
42972: PUSH
42973: LD_INT 1
42975: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42976: LD_ADDR_VAR 0 15
42980: PUSH
42981: LD_VAR 0 1
42985: PPUSH
42986: LD_INT 22
42988: PUSH
42989: LD_VAR 0 11
42993: PPUSH
42994: CALL_OW 255
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: LD_INT 30
43008: PUSH
43009: LD_INT 0
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 30
43018: PUSH
43019: LD_INT 1
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PPUSH
43035: CALL_OW 72
43039: ST_TO_ADDR
// if dep then
43040: LD_VAR 0 15
43044: IFFALSE 43180
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43046: LD_ADDR_VAR 0 14
43050: PUSH
43051: LD_VAR 0 15
43055: PUSH
43056: LD_INT 1
43058: ARRAY
43059: PPUSH
43060: CALL_OW 250
43064: PPUSH
43065: LD_VAR 0 15
43069: PUSH
43070: LD_INT 1
43072: ARRAY
43073: PPUSH
43074: CALL_OW 254
43078: PPUSH
43079: LD_INT 5
43081: PPUSH
43082: CALL_OW 272
43086: PUSH
43087: LD_VAR 0 15
43091: PUSH
43092: LD_INT 1
43094: ARRAY
43095: PPUSH
43096: CALL_OW 251
43100: PPUSH
43101: LD_VAR 0 15
43105: PUSH
43106: LD_INT 1
43108: ARRAY
43109: PPUSH
43110: CALL_OW 254
43114: PPUSH
43115: LD_INT 5
43117: PPUSH
43118: CALL_OW 273
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43127: LD_VAR 0 14
43131: PUSH
43132: LD_INT 1
43134: ARRAY
43135: PPUSH
43136: LD_VAR 0 14
43140: PUSH
43141: LD_INT 2
43143: ARRAY
43144: PPUSH
43145: CALL_OW 488
43149: IFFALSE 43180
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43151: LD_VAR 0 11
43155: PPUSH
43156: LD_VAR 0 14
43160: PUSH
43161: LD_INT 1
43163: ARRAY
43164: PPUSH
43165: LD_VAR 0 14
43169: PUSH
43170: LD_INT 2
43172: ARRAY
43173: PPUSH
43174: CALL_OW 111
// continue ;
43178: GO 42811
// end ; end ; r := GetDir ( tmp ) ;
43180: LD_ADDR_VAR 0 13
43184: PUSH
43185: LD_VAR 0 11
43189: PPUSH
43190: CALL_OW 254
43194: ST_TO_ADDR
// if r = 5 then
43195: LD_VAR 0 13
43199: PUSH
43200: LD_INT 5
43202: EQUAL
43203: IFFALSE 43213
// r := 0 ;
43205: LD_ADDR_VAR 0 13
43209: PUSH
43210: LD_INT 0
43212: ST_TO_ADDR
// for j = r to 5 do
43213: LD_ADDR_VAR 0 8
43217: PUSH
43218: DOUBLE
43219: LD_VAR 0 13
43223: DEC
43224: ST_TO_ADDR
43225: LD_INT 5
43227: PUSH
43228: FOR_TO
43229: IFFALSE 43343
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43231: LD_ADDR_VAR 0 9
43235: PUSH
43236: LD_VAR 0 11
43240: PPUSH
43241: CALL_OW 250
43245: PPUSH
43246: LD_VAR 0 8
43250: PPUSH
43251: LD_INT 2
43253: PPUSH
43254: CALL_OW 272
43258: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43259: LD_ADDR_VAR 0 10
43263: PUSH
43264: LD_VAR 0 11
43268: PPUSH
43269: CALL_OW 251
43273: PPUSH
43274: LD_VAR 0 8
43278: PPUSH
43279: LD_INT 2
43281: PPUSH
43282: CALL_OW 273
43286: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43287: LD_VAR 0 9
43291: PPUSH
43292: LD_VAR 0 10
43296: PPUSH
43297: CALL_OW 488
43301: PUSH
43302: LD_VAR 0 9
43306: PPUSH
43307: LD_VAR 0 10
43311: PPUSH
43312: CALL_OW 428
43316: NOT
43317: AND
43318: IFFALSE 43341
// begin ComMoveXY ( tmp , _x , _y ) ;
43320: LD_VAR 0 11
43324: PPUSH
43325: LD_VAR 0 9
43329: PPUSH
43330: LD_VAR 0 10
43334: PPUSH
43335: CALL_OW 111
// break ;
43339: GO 43343
// end ; end ;
43341: GO 43228
43343: POP
43344: POP
// end ;
43345: GO 42811
43347: POP
43348: POP
// end ;
43349: LD_VAR 0 6
43353: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43354: LD_INT 0
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
43364: PPUSH
43365: PPUSH
// result := false ;
43366: LD_ADDR_VAR 0 6
43370: PUSH
43371: LD_INT 0
43373: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43374: LD_VAR 0 1
43378: NOT
43379: PUSH
43380: LD_VAR 0 1
43384: PPUSH
43385: CALL_OW 266
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 1
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: IN
43400: NOT
43401: OR
43402: PUSH
43403: LD_VAR 0 2
43407: NOT
43408: OR
43409: PUSH
43410: LD_VAR 0 5
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 3
43426: PUSH
43427: LD_INT 4
43429: PUSH
43430: LD_INT 5
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: IN
43441: NOT
43442: OR
43443: PUSH
43444: LD_VAR 0 3
43448: PPUSH
43449: LD_VAR 0 4
43453: PPUSH
43454: CALL_OW 488
43458: NOT
43459: OR
43460: IFFALSE 43464
// exit ;
43462: GO 44181
// pom := GetBase ( depot ) ;
43464: LD_ADDR_VAR 0 10
43468: PUSH
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 274
43478: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43479: LD_ADDR_VAR 0 11
43483: PUSH
43484: LD_VAR 0 2
43488: PPUSH
43489: LD_VAR 0 1
43493: PPUSH
43494: CALL_OW 248
43498: PPUSH
43499: CALL_OW 450
43503: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43504: LD_VAR 0 10
43508: PPUSH
43509: LD_INT 1
43511: PPUSH
43512: CALL_OW 275
43516: PUSH
43517: LD_VAR 0 11
43521: PUSH
43522: LD_INT 1
43524: ARRAY
43525: GREATEREQUAL
43526: PUSH
43527: LD_VAR 0 10
43531: PPUSH
43532: LD_INT 2
43534: PPUSH
43535: CALL_OW 275
43539: PUSH
43540: LD_VAR 0 11
43544: PUSH
43545: LD_INT 2
43547: ARRAY
43548: GREATEREQUAL
43549: AND
43550: PUSH
43551: LD_VAR 0 10
43555: PPUSH
43556: LD_INT 3
43558: PPUSH
43559: CALL_OW 275
43563: PUSH
43564: LD_VAR 0 11
43568: PUSH
43569: LD_INT 3
43571: ARRAY
43572: GREATEREQUAL
43573: AND
43574: NOT
43575: IFFALSE 43579
// exit ;
43577: GO 44181
// if GetBType ( depot ) = b_depot then
43579: LD_VAR 0 1
43583: PPUSH
43584: CALL_OW 266
43588: PUSH
43589: LD_INT 0
43591: EQUAL
43592: IFFALSE 43604
// dist := 28 else
43594: LD_ADDR_VAR 0 14
43598: PUSH
43599: LD_INT 28
43601: ST_TO_ADDR
43602: GO 43612
// dist := 36 ;
43604: LD_ADDR_VAR 0 14
43608: PUSH
43609: LD_INT 36
43611: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43612: LD_VAR 0 1
43616: PPUSH
43617: LD_VAR 0 3
43621: PPUSH
43622: LD_VAR 0 4
43626: PPUSH
43627: CALL_OW 297
43631: PUSH
43632: LD_VAR 0 14
43636: GREATER
43637: IFFALSE 43641
// exit ;
43639: GO 44181
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43641: LD_ADDR_VAR 0 12
43645: PUSH
43646: LD_VAR 0 2
43650: PPUSH
43651: LD_VAR 0 3
43655: PPUSH
43656: LD_VAR 0 4
43660: PPUSH
43661: LD_VAR 0 5
43665: PPUSH
43666: LD_VAR 0 1
43670: PPUSH
43671: CALL_OW 248
43675: PPUSH
43676: LD_INT 0
43678: PPUSH
43679: CALL 44186 0 6
43683: ST_TO_ADDR
// if not hexes then
43684: LD_VAR 0 12
43688: NOT
43689: IFFALSE 43693
// exit ;
43691: GO 44181
// hex := GetHexInfo ( x , y ) ;
43693: LD_ADDR_VAR 0 15
43697: PUSH
43698: LD_VAR 0 3
43702: PPUSH
43703: LD_VAR 0 4
43707: PPUSH
43708: CALL_OW 546
43712: ST_TO_ADDR
// if hex [ 1 ] then
43713: LD_VAR 0 15
43717: PUSH
43718: LD_INT 1
43720: ARRAY
43721: IFFALSE 43725
// exit ;
43723: GO 44181
// height := hex [ 2 ] ;
43725: LD_ADDR_VAR 0 13
43729: PUSH
43730: LD_VAR 0 15
43734: PUSH
43735: LD_INT 2
43737: ARRAY
43738: ST_TO_ADDR
// for i = 1 to hexes do
43739: LD_ADDR_VAR 0 7
43743: PUSH
43744: DOUBLE
43745: LD_INT 1
43747: DEC
43748: ST_TO_ADDR
43749: LD_VAR 0 12
43753: PUSH
43754: FOR_TO
43755: IFFALSE 44085
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43757: LD_VAR 0 12
43761: PUSH
43762: LD_VAR 0 7
43766: ARRAY
43767: PUSH
43768: LD_INT 1
43770: ARRAY
43771: PPUSH
43772: LD_VAR 0 12
43776: PUSH
43777: LD_VAR 0 7
43781: ARRAY
43782: PUSH
43783: LD_INT 2
43785: ARRAY
43786: PPUSH
43787: CALL_OW 488
43791: NOT
43792: PUSH
43793: LD_VAR 0 12
43797: PUSH
43798: LD_VAR 0 7
43802: ARRAY
43803: PUSH
43804: LD_INT 1
43806: ARRAY
43807: PPUSH
43808: LD_VAR 0 12
43812: PUSH
43813: LD_VAR 0 7
43817: ARRAY
43818: PUSH
43819: LD_INT 2
43821: ARRAY
43822: PPUSH
43823: CALL_OW 428
43827: PUSH
43828: LD_INT 0
43830: GREATER
43831: OR
43832: PUSH
43833: LD_VAR 0 12
43837: PUSH
43838: LD_VAR 0 7
43842: ARRAY
43843: PUSH
43844: LD_INT 1
43846: ARRAY
43847: PPUSH
43848: LD_VAR 0 12
43852: PUSH
43853: LD_VAR 0 7
43857: ARRAY
43858: PUSH
43859: LD_INT 2
43861: ARRAY
43862: PPUSH
43863: CALL_OW 351
43867: OR
43868: IFFALSE 43874
// exit ;
43870: POP
43871: POP
43872: GO 44181
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43874: LD_ADDR_VAR 0 8
43878: PUSH
43879: LD_VAR 0 12
43883: PUSH
43884: LD_VAR 0 7
43888: ARRAY
43889: PUSH
43890: LD_INT 1
43892: ARRAY
43893: PPUSH
43894: LD_VAR 0 12
43898: PUSH
43899: LD_VAR 0 7
43903: ARRAY
43904: PUSH
43905: LD_INT 2
43907: ARRAY
43908: PPUSH
43909: CALL_OW 546
43913: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43914: LD_VAR 0 8
43918: PUSH
43919: LD_INT 1
43921: ARRAY
43922: PUSH
43923: LD_VAR 0 8
43927: PUSH
43928: LD_INT 2
43930: ARRAY
43931: PUSH
43932: LD_VAR 0 13
43936: PUSH
43937: LD_INT 2
43939: PLUS
43940: GREATER
43941: OR
43942: PUSH
43943: LD_VAR 0 8
43947: PUSH
43948: LD_INT 2
43950: ARRAY
43951: PUSH
43952: LD_VAR 0 13
43956: PUSH
43957: LD_INT 2
43959: MINUS
43960: LESS
43961: OR
43962: PUSH
43963: LD_VAR 0 8
43967: PUSH
43968: LD_INT 3
43970: ARRAY
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: LD_INT 8
43977: PUSH
43978: LD_INT 9
43980: PUSH
43981: LD_INT 10
43983: PUSH
43984: LD_INT 11
43986: PUSH
43987: LD_INT 12
43989: PUSH
43990: LD_INT 13
43992: PUSH
43993: LD_INT 16
43995: PUSH
43996: LD_INT 17
43998: PUSH
43999: LD_INT 18
44001: PUSH
44002: LD_INT 19
44004: PUSH
44005: LD_INT 20
44007: PUSH
44008: LD_INT 21
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: IN
44026: NOT
44027: OR
44028: PUSH
44029: LD_VAR 0 8
44033: PUSH
44034: LD_INT 5
44036: ARRAY
44037: NOT
44038: OR
44039: PUSH
44040: LD_VAR 0 8
44044: PUSH
44045: LD_INT 6
44047: ARRAY
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 2
44054: PUSH
44055: LD_INT 7
44057: PUSH
44058: LD_INT 9
44060: PUSH
44061: LD_INT 10
44063: PUSH
44064: LD_INT 11
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: IN
44075: NOT
44076: OR
44077: IFFALSE 44083
// exit ;
44079: POP
44080: POP
44081: GO 44181
// end ;
44083: GO 43754
44085: POP
44086: POP
// side := GetSide ( depot ) ;
44087: LD_ADDR_VAR 0 9
44091: PUSH
44092: LD_VAR 0 1
44096: PPUSH
44097: CALL_OW 255
44101: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44102: LD_VAR 0 9
44106: PPUSH
44107: LD_VAR 0 3
44111: PPUSH
44112: LD_VAR 0 4
44116: PPUSH
44117: LD_INT 20
44119: PPUSH
44120: CALL 36835 0 4
44124: PUSH
44125: LD_INT 4
44127: ARRAY
44128: IFFALSE 44132
// exit ;
44130: GO 44181
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44132: LD_VAR 0 2
44136: PUSH
44137: LD_INT 29
44139: PUSH
44140: LD_INT 30
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: IN
44147: PUSH
44148: LD_VAR 0 3
44152: PPUSH
44153: LD_VAR 0 4
44157: PPUSH
44158: LD_VAR 0 9
44162: PPUSH
44163: CALL_OW 440
44167: NOT
44168: AND
44169: IFFALSE 44173
// exit ;
44171: GO 44181
// result := true ;
44173: LD_ADDR_VAR 0 6
44177: PUSH
44178: LD_INT 1
44180: ST_TO_ADDR
// end ;
44181: LD_VAR 0 6
44185: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44186: LD_INT 0
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
44196: PPUSH
44197: PPUSH
44198: PPUSH
44199: PPUSH
44200: PPUSH
44201: PPUSH
44202: PPUSH
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
44223: PPUSH
44224: PPUSH
44225: PPUSH
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
44230: PPUSH
44231: PPUSH
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
44238: PPUSH
44239: PPUSH
44240: PPUSH
44241: PPUSH
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
// result = [ ] ;
44246: LD_ADDR_VAR 0 7
44250: PUSH
44251: EMPTY
44252: ST_TO_ADDR
// temp_list = [ ] ;
44253: LD_ADDR_VAR 0 9
44257: PUSH
44258: EMPTY
44259: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44260: LD_VAR 0 4
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 4
44279: PUSH
44280: LD_INT 5
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: IN
44291: NOT
44292: PUSH
44293: LD_VAR 0 1
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: IN
44308: PUSH
44309: LD_VAR 0 5
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: IN
44328: NOT
44329: AND
44330: OR
44331: IFFALSE 44335
// exit ;
44333: GO 62726
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44335: LD_VAR 0 1
44339: PUSH
44340: LD_INT 6
44342: PUSH
44343: LD_INT 7
44345: PUSH
44346: LD_INT 8
44348: PUSH
44349: LD_INT 13
44351: PUSH
44352: LD_INT 12
44354: PUSH
44355: LD_INT 15
44357: PUSH
44358: LD_INT 11
44360: PUSH
44361: LD_INT 14
44363: PUSH
44364: LD_INT 10
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: IN
44378: IFFALSE 44388
// btype = b_lab ;
44380: LD_ADDR_VAR 0 1
44384: PUSH
44385: LD_INT 6
44387: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44388: LD_VAR 0 6
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 2
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: IN
44407: NOT
44408: PUSH
44409: LD_VAR 0 1
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 3
44425: PUSH
44426: LD_INT 6
44428: PUSH
44429: LD_INT 36
44431: PUSH
44432: LD_INT 4
44434: PUSH
44435: LD_INT 5
44437: PUSH
44438: LD_INT 31
44440: PUSH
44441: LD_INT 32
44443: PUSH
44444: LD_INT 33
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: IN
44460: NOT
44461: PUSH
44462: LD_VAR 0 6
44466: PUSH
44467: LD_INT 1
44469: EQUAL
44470: AND
44471: OR
44472: PUSH
44473: LD_VAR 0 1
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: IN
44488: NOT
44489: PUSH
44490: LD_VAR 0 6
44494: PUSH
44495: LD_INT 2
44497: EQUAL
44498: AND
44499: OR
44500: IFFALSE 44510
// mode = 0 ;
44502: LD_ADDR_VAR 0 6
44506: PUSH
44507: LD_INT 0
44509: ST_TO_ADDR
// case mode of 0 :
44510: LD_VAR 0 6
44514: PUSH
44515: LD_INT 0
44517: DOUBLE
44518: EQUAL
44519: IFTRUE 44523
44521: GO 55976
44523: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44524: LD_ADDR_VAR 0 11
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 1
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 3
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44717: LD_ADDR_VAR 0 12
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 0
44765: PUSH
44766: LD_INT 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 3
44874: NEG
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44913: LD_ADDR_VAR 0 13
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: LD_INT 2
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 3
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 3
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45112: LD_ADDR_VAR 0 14
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 3
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 3
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45308: LD_ADDR_VAR 0 15
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: NEG
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45501: LD_ADDR_VAR 0 16
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 3
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 3
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45694: LD_ADDR_VAR 0 17
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 0
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 1
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 1
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45924: LD_ADDR_VAR 0 18
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 0
46079: PUSH
46080: LD_INT 2
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 1
46089: NEG
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 2
46100: NEG
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: LD_INT 2
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46154: LD_ADDR_VAR 0 19
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 2
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 2
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46384: LD_ADDR_VAR 0 20
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: PUSH
46520: LD_INT 2
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46614: LD_ADDR_VAR 0 21
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 2
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 2
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46844: LD_ADDR_VAR 0 22
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: PUSH
46980: LD_INT 2
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 2
47031: NEG
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47074: LD_ADDR_VAR 0 23
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: NEG
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 2
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 3
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47354: LD_ADDR_VAR 0 24
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 2
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47630: LD_ADDR_VAR 0 25
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: NEG
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 1
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: NEG
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47904: LD_ADDR_VAR 0 26
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48180: LD_ADDR_VAR 0 27
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 3
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48460: LD_ADDR_VAR 0 28
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: NEG
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 2
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 2
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: NEG
48708: PUSH
48709: LD_INT 2
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48742: LD_ADDR_VAR 0 29
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: LD_INT 2
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 2
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 0
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 3
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: NEG
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49021: LD_ADDR_VAR 0 30
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 2
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: LD_INT 2
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 3
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49299: LD_ADDR_VAR 0 31
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: NEG
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49577: LD_ADDR_VAR 0 32
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 3
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 3
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49855: LD_ADDR_VAR 0 33
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: LD_INT 2
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 3
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 3
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50134: LD_ADDR_VAR 0 34
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 3
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50414: LD_ADDR_VAR 0 35
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50526: LD_ADDR_VAR 0 36
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50638: LD_ADDR_VAR 0 37
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50750: LD_ADDR_VAR 0 38
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 0
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50862: LD_ADDR_VAR 0 39
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 1
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50974: LD_ADDR_VAR 0 40
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 0
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 1
51066: NEG
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51086: LD_ADDR_VAR 0 41
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: LD_INT 2
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: LD_INT 2
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: NEG
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: NEG
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 3
51395: NEG
51396: PUSH
51397: LD_INT 3
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51436: LD_ADDR_VAR 0 42
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: LD_INT 3
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 3
51733: NEG
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: LD_INT 3
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51786: LD_ADDR_VAR 0 43
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 0
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 3
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 3
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 3
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52134: LD_ADDR_VAR 0 44
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: NEG
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 3
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: LD_INT 3
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 3
52408: NEG
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52484: LD_ADDR_VAR 0 45
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: PUSH
52731: LD_INT 3
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: LD_INT 3
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 3
52793: NEG
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52834: LD_ADDR_VAR 0 46
52838: PUSH
52839: LD_INT 0
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: LD_INT 1
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 3
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 3
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 3
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 3
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53182: LD_ADDR_VAR 0 47
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: NEG
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53333: LD_ADDR_VAR 0 48
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53480: LD_ADDR_VAR 0 49
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 2
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 2
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53624: LD_ADDR_VAR 0 50
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 1
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 1
53745: NEG
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53768: LD_ADDR_VAR 0 51
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53915: LD_ADDR_VAR 0 52
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: NEG
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 2
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54066: LD_ADDR_VAR 0 53
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 2
54265: NEG
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54296: LD_ADDR_VAR 0 54
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: LD_INT 1
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: LD_INT 2
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: LD_INT 2
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: NEG
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54526: LD_ADDR_VAR 0 55
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: LD_INT 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54756: LD_ADDR_VAR 0 56
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 2
54943: NEG
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54986: LD_ADDR_VAR 0 57
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 2
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 2
55173: NEG
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55216: LD_ADDR_VAR 0 58
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 0
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 2
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55446: LD_ADDR_VAR 0 59
55450: PUSH
55451: LD_INT 0
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55534: LD_ADDR_VAR 0 60
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55622: LD_ADDR_VAR 0 61
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 1
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55710: LD_ADDR_VAR 0 62
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55798: LD_ADDR_VAR 0 63
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55886: LD_ADDR_VAR 0 64
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: ST_TO_ADDR
// end ; 1 :
55974: GO 61871
55976: LD_INT 1
55978: DOUBLE
55979: EQUAL
55980: IFTRUE 55984
55982: GO 58607
55984: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55985: LD_ADDR_VAR 0 11
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: LD_INT 3
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56029: LD_ADDR_VAR 0 12
56033: PUSH
56034: LD_INT 2
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56070: LD_ADDR_VAR 0 13
56074: PUSH
56075: LD_INT 3
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56110: LD_ADDR_VAR 0 14
56114: PUSH
56115: LD_INT 1
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56151: LD_ADDR_VAR 0 15
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 3
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56195: LD_ADDR_VAR 0 16
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: NEG
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56241: LD_ADDR_VAR 0 17
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: LD_INT 3
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 3
56263: NEG
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 2
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56285: LD_ADDR_VAR 0 18
56289: PUSH
56290: LD_INT 2
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56326: LD_ADDR_VAR 0 19
56330: PUSH
56331: LD_INT 3
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56366: LD_ADDR_VAR 0 20
56370: PUSH
56371: LD_INT 1
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: LD_INT 3
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56407: LD_ADDR_VAR 0 21
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 3
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: LIST
56450: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56451: LD_ADDR_VAR 0 22
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56497: LD_ADDR_VAR 0 23
56501: PUSH
56502: LD_INT 0
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 4
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: LIST
56540: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56541: LD_ADDR_VAR 0 24
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 4
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56582: LD_ADDR_VAR 0 25
56586: PUSH
56587: LD_INT 3
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 4
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56622: LD_ADDR_VAR 0 26
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: LD_INT 4
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56663: LD_ADDR_VAR 0 27
56667: PUSH
56668: LD_INT 3
56670: NEG
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: NEG
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 4
56692: NEG
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56707: LD_ADDR_VAR 0 28
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: LD_INT 4
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56753: LD_ADDR_VAR 0 29
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 3
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 4
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 4
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 3
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 5
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 5
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 4
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: NEG
56863: PUSH
56864: LD_INT 6
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 6
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 5
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56908: LD_ADDR_VAR 0 30
56912: PUSH
56913: LD_INT 2
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 4
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 4
56977: PUSH
56978: LD_INT 1
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 5
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 5
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 5
57008: PUSH
57009: LD_INT 1
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 6
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 6
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57051: LD_ADDR_VAR 0 31
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 4
57088: PUSH
57089: LD_INT 3
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 4
57098: PUSH
57099: LD_INT 4
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: PUSH
57109: LD_INT 4
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 5
57118: PUSH
57119: LD_INT 4
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 5
57128: PUSH
57129: LD_INT 5
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 4
57138: PUSH
57139: LD_INT 5
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 6
57148: PUSH
57149: LD_INT 5
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 6
57158: PUSH
57159: LD_INT 6
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 5
57168: PUSH
57169: LD_INT 6
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57190: LD_ADDR_VAR 0 32
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: LD_INT 3
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 1
57217: NEG
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 4
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 0
57238: PUSH
57239: LD_INT 4
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 5
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 5
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 6
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 6
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 5
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57333: LD_ADDR_VAR 0 33
57337: PUSH
57338: LD_INT 2
57340: NEG
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 3
57362: NEG
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 3
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 4
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 4
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 5
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 5
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 5
57442: NEG
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 6
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 6
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57488: LD_ADDR_VAR 0 34
57492: PUSH
57493: LD_INT 2
57495: NEG
57496: PUSH
57497: LD_INT 3
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 3
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: NEG
57532: PUSH
57533: LD_INT 4
57535: NEG
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 4
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 4
57555: NEG
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 4
57567: NEG
57568: PUSH
57569: LD_INT 5
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 5
57579: NEG
57580: PUSH
57581: LD_INT 4
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 5
57591: NEG
57592: PUSH
57593: LD_INT 5
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 5
57603: NEG
57604: PUSH
57605: LD_INT 6
57607: NEG
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 6
57615: NEG
57616: PUSH
57617: LD_INT 5
57619: NEG
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 6
57627: NEG
57628: PUSH
57629: LD_INT 6
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57651: LD_ADDR_VAR 0 41
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: LIST
57694: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57695: LD_ADDR_VAR 0 42
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: LD_INT 1
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57736: LD_ADDR_VAR 0 43
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: LIST
57775: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57776: LD_ADDR_VAR 0 44
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: LIST
57816: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57817: LD_ADDR_VAR 0 45
57821: PUSH
57822: LD_INT 2
57824: NEG
57825: PUSH
57826: LD_INT 0
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57861: LD_ADDR_VAR 0 46
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 2
57880: NEG
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57907: LD_ADDR_VAR 0 47
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 3
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57940: LD_ADDR_VAR 0 48
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 2
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57971: LD_ADDR_VAR 0 49
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58000: LD_ADDR_VAR 0 50
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 3
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: LD_INT 3
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58029: LD_ADDR_VAR 0 51
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58060: LD_ADDR_VAR 0 52
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58093: LD_ADDR_VAR 0 53
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58137: LD_ADDR_VAR 0 54
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58178: LD_ADDR_VAR 0 55
58182: PUSH
58183: LD_INT 3
58185: PUSH
58186: LD_INT 2
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 3
58195: PUSH
58196: LD_INT 3
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58218: LD_ADDR_VAR 0 56
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58259: LD_ADDR_VAR 0 57
58263: PUSH
58264: LD_INT 2
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58303: LD_ADDR_VAR 0 58
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 3
58322: NEG
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: NEG
58335: PUSH
58336: LD_INT 3
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58349: LD_ADDR_VAR 0 59
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 2
58360: NEG
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58393: LD_ADDR_VAR 0 60
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58434: LD_ADDR_VAR 0 61
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58474: LD_ADDR_VAR 0 62
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58515: LD_ADDR_VAR 0 63
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58559: LD_ADDR_VAR 0 64
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 2
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// end ; 2 :
58605: GO 61871
58607: LD_INT 2
58609: DOUBLE
58610: EQUAL
58611: IFTRUE 58615
58613: GO 61870
58615: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58616: LD_ADDR_VAR 0 29
58620: PUSH
58621: LD_INT 4
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 5
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 5
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 4
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 3
58695: PUSH
58696: LD_INT 2
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 5
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: LD_INT 3
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 4
58736: PUSH
58737: LD_INT 3
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: LD_INT 4
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: LD_INT 4
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 2
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 2
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 4
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: PUSH
58797: LD_INT 4
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 5
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: LD_INT 5
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 4
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 4
58955: NEG
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 4
58966: NEG
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 4
58978: NEG
58979: PUSH
58980: LD_INT 2
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 2
58990: NEG
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 4
59001: NEG
59002: PUSH
59003: LD_INT 4
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: LD_INT 5
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: NEG
59026: PUSH
59027: LD_INT 4
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 3
59037: NEG
59038: PUSH
59039: LD_INT 3
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 5
59061: NEG
59062: PUSH
59063: LD_INT 4
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 5
59073: NEG
59074: PUSH
59075: LD_INT 5
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 5
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59154: LD_ADDR_VAR 0 30
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: LD_INT 4
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 4
59171: PUSH
59172: LD_INT 3
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 5
59181: PUSH
59182: LD_INT 4
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 5
59191: PUSH
59192: LD_INT 5
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 4
59201: PUSH
59202: LD_INT 5
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 5
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 5
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: LD_INT 2
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 1
59281: PUSH
59282: LD_INT 4
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: LD_INT 4
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 4
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 5
59400: NEG
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 5
59411: NEG
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 5
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: NEG
59436: PUSH
59437: LD_INT 2
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 3
59458: NEG
59459: PUSH
59460: LD_INT 4
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: NEG
59495: PUSH
59496: LD_INT 2
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: NEG
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 4
59518: NEG
59519: PUSH
59520: LD_INT 4
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: NEG
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 4
59542: NEG
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: LD_INT 4
59579: NEG
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 0
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 4
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: LD_INT 5
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59701: LD_ADDR_VAR 0 31
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 4
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 3
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 4
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 5
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 4
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 3
59812: NEG
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 2
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 3
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 4
59857: NEG
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 4
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 4
59880: NEG
59881: PUSH
59882: LD_INT 2
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 2
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 4
59903: NEG
59904: PUSH
59905: LD_INT 4
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 4
59915: NEG
59916: PUSH
59917: LD_INT 5
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 4
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 3
59939: NEG
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 4
59951: NEG
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 5
59963: NEG
59964: PUSH
59965: LD_INT 4
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 5
59975: NEG
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: LD_INT 5
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 5
59999: NEG
60000: PUSH
60001: LD_INT 3
60003: NEG
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 0
60011: PUSH
60012: LD_INT 3
60014: NEG
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 4
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 3
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 4
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 4
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 4
60123: PUSH
60124: LD_INT 1
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 5
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 4
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 5
60196: PUSH
60197: LD_INT 2
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60251: LD_ADDR_VAR 0 32
60255: PUSH
60256: LD_INT 4
60258: NEG
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 4
60269: NEG
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 3
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 5
60314: NEG
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 5
60325: NEG
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 5
60337: NEG
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 3
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: NEG
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 3
60372: NEG
60373: PUSH
60374: LD_INT 4
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 3
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 3
60408: NEG
60409: PUSH
60410: LD_INT 2
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 4
60432: NEG
60433: PUSH
60434: LD_INT 4
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 4
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 4
60456: NEG
60457: PUSH
60458: LD_INT 2
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 0
60468: PUSH
60469: LD_INT 4
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: LD_INT 5
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 4
60493: NEG
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: PUSH
60502: LD_INT 3
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 3
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 4
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: LD_INT 5
60539: NEG
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 2
60558: NEG
60559: PUSH
60560: LD_INT 5
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 3
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 4
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 3
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 2
60642: PUSH
60643: LD_INT 2
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 4
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: PUSH
60664: LD_INT 4
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 4
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: LD_INT 4
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: PUSH
60694: LD_INT 5
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: LD_INT 5
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 4
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 5
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 3
60743: PUSH
60744: LD_INT 5
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60798: LD_ADDR_VAR 0 33
60802: PUSH
60803: LD_INT 4
60805: NEG
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 4
60817: NEG
60818: PUSH
60819: LD_INT 5
60821: NEG
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: LD_INT 4
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: LD_INT 3
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 4
60853: NEG
60854: PUSH
60855: LD_INT 3
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 5
60877: NEG
60878: PUSH
60879: LD_INT 5
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 5
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 5
60901: NEG
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 3
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: LD_INT 4
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: LD_INT 4
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 4
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 5
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: LD_INT 1
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 3
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 5
61098: PUSH
61099: LD_INT 2
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 3
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 3
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 4
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 4
61138: PUSH
61139: LD_INT 4
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: LD_INT 4
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 2
61168: PUSH
61169: LD_INT 2
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: LD_INT 2
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: LD_INT 4
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 4
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 4
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: LD_INT 5
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: LD_INT 5
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 4
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: LD_INT 5
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61336: LD_ADDR_VAR 0 34
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 5
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: NEG
61399: PUSH
61400: LD_INT 4
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 2
61433: NEG
61434: PUSH
61435: LD_INT 5
61437: NEG
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 3
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 4
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 4
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: LD_INT 4
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 4
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 5
61558: PUSH
61559: LD_INT 4
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 5
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: LD_INT 5
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 3
61588: PUSH
61589: LD_INT 4
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 5
61608: PUSH
61609: LD_INT 3
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 5
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 4
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 4
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 3
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: LD_INT 4
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 2
61710: NEG
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 4
61721: NEG
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 4
61732: NEG
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: NEG
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 4
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 5
61777: NEG
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 5
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 5
61800: NEG
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: ST_TO_ADDR
// end ; end ;
61868: GO 61871
61870: POP
// case btype of b_depot , b_warehouse :
61871: LD_VAR 0 1
61875: PUSH
61876: LD_INT 0
61878: DOUBLE
61879: EQUAL
61880: IFTRUE 61890
61882: LD_INT 1
61884: DOUBLE
61885: EQUAL
61886: IFTRUE 61890
61888: GO 62091
61890: POP
// case nation of nation_american :
61891: LD_VAR 0 5
61895: PUSH
61896: LD_INT 1
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61904
61902: GO 61960
61904: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
61905: LD_ADDR_VAR 0 9
61909: PUSH
61910: LD_VAR 0 11
61914: PUSH
61915: LD_VAR 0 12
61919: PUSH
61920: LD_VAR 0 13
61924: PUSH
61925: LD_VAR 0 14
61929: PUSH
61930: LD_VAR 0 15
61934: PUSH
61935: LD_VAR 0 16
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: PUSH
61948: LD_VAR 0 4
61952: PUSH
61953: LD_INT 1
61955: PLUS
61956: ARRAY
61957: ST_TO_ADDR
61958: GO 62089
61960: LD_INT 2
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61968
61966: GO 62024
61968: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
61969: LD_ADDR_VAR 0 9
61973: PUSH
61974: LD_VAR 0 17
61978: PUSH
61979: LD_VAR 0 18
61983: PUSH
61984: LD_VAR 0 19
61988: PUSH
61989: LD_VAR 0 20
61993: PUSH
61994: LD_VAR 0 21
61998: PUSH
61999: LD_VAR 0 22
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: PUSH
62012: LD_VAR 0 4
62016: PUSH
62017: LD_INT 1
62019: PLUS
62020: ARRAY
62021: ST_TO_ADDR
62022: GO 62089
62024: LD_INT 3
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62032
62030: GO 62088
62032: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62033: LD_ADDR_VAR 0 9
62037: PUSH
62038: LD_VAR 0 23
62042: PUSH
62043: LD_VAR 0 24
62047: PUSH
62048: LD_VAR 0 25
62052: PUSH
62053: LD_VAR 0 26
62057: PUSH
62058: LD_VAR 0 27
62062: PUSH
62063: LD_VAR 0 28
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: PUSH
62076: LD_VAR 0 4
62080: PUSH
62081: LD_INT 1
62083: PLUS
62084: ARRAY
62085: ST_TO_ADDR
62086: GO 62089
62088: POP
62089: GO 62644
62091: LD_INT 2
62093: DOUBLE
62094: EQUAL
62095: IFTRUE 62105
62097: LD_INT 3
62099: DOUBLE
62100: EQUAL
62101: IFTRUE 62105
62103: GO 62161
62105: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62106: LD_ADDR_VAR 0 9
62110: PUSH
62111: LD_VAR 0 29
62115: PUSH
62116: LD_VAR 0 30
62120: PUSH
62121: LD_VAR 0 31
62125: PUSH
62126: LD_VAR 0 32
62130: PUSH
62131: LD_VAR 0 33
62135: PUSH
62136: LD_VAR 0 34
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: LD_VAR 0 4
62153: PUSH
62154: LD_INT 1
62156: PLUS
62157: ARRAY
62158: ST_TO_ADDR
62159: GO 62644
62161: LD_INT 16
62163: DOUBLE
62164: EQUAL
62165: IFTRUE 62223
62167: LD_INT 17
62169: DOUBLE
62170: EQUAL
62171: IFTRUE 62223
62173: LD_INT 18
62175: DOUBLE
62176: EQUAL
62177: IFTRUE 62223
62179: LD_INT 19
62181: DOUBLE
62182: EQUAL
62183: IFTRUE 62223
62185: LD_INT 22
62187: DOUBLE
62188: EQUAL
62189: IFTRUE 62223
62191: LD_INT 20
62193: DOUBLE
62194: EQUAL
62195: IFTRUE 62223
62197: LD_INT 21
62199: DOUBLE
62200: EQUAL
62201: IFTRUE 62223
62203: LD_INT 23
62205: DOUBLE
62206: EQUAL
62207: IFTRUE 62223
62209: LD_INT 24
62211: DOUBLE
62212: EQUAL
62213: IFTRUE 62223
62215: LD_INT 25
62217: DOUBLE
62218: EQUAL
62219: IFTRUE 62223
62221: GO 62279
62223: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62224: LD_ADDR_VAR 0 9
62228: PUSH
62229: LD_VAR 0 35
62233: PUSH
62234: LD_VAR 0 36
62238: PUSH
62239: LD_VAR 0 37
62243: PUSH
62244: LD_VAR 0 38
62248: PUSH
62249: LD_VAR 0 39
62253: PUSH
62254: LD_VAR 0 40
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: PUSH
62267: LD_VAR 0 4
62271: PUSH
62272: LD_INT 1
62274: PLUS
62275: ARRAY
62276: ST_TO_ADDR
62277: GO 62644
62279: LD_INT 6
62281: DOUBLE
62282: EQUAL
62283: IFTRUE 62335
62285: LD_INT 7
62287: DOUBLE
62288: EQUAL
62289: IFTRUE 62335
62291: LD_INT 8
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62335
62297: LD_INT 13
62299: DOUBLE
62300: EQUAL
62301: IFTRUE 62335
62303: LD_INT 12
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62335
62309: LD_INT 15
62311: DOUBLE
62312: EQUAL
62313: IFTRUE 62335
62315: LD_INT 11
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62335
62321: LD_INT 14
62323: DOUBLE
62324: EQUAL
62325: IFTRUE 62335
62327: LD_INT 10
62329: DOUBLE
62330: EQUAL
62331: IFTRUE 62335
62333: GO 62391
62335: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62336: LD_ADDR_VAR 0 9
62340: PUSH
62341: LD_VAR 0 41
62345: PUSH
62346: LD_VAR 0 42
62350: PUSH
62351: LD_VAR 0 43
62355: PUSH
62356: LD_VAR 0 44
62360: PUSH
62361: LD_VAR 0 45
62365: PUSH
62366: LD_VAR 0 46
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: PUSH
62379: LD_VAR 0 4
62383: PUSH
62384: LD_INT 1
62386: PLUS
62387: ARRAY
62388: ST_TO_ADDR
62389: GO 62644
62391: LD_INT 36
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62399
62397: GO 62455
62399: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62400: LD_ADDR_VAR 0 9
62404: PUSH
62405: LD_VAR 0 47
62409: PUSH
62410: LD_VAR 0 48
62414: PUSH
62415: LD_VAR 0 49
62419: PUSH
62420: LD_VAR 0 50
62424: PUSH
62425: LD_VAR 0 51
62429: PUSH
62430: LD_VAR 0 52
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_VAR 0 4
62447: PUSH
62448: LD_INT 1
62450: PLUS
62451: ARRAY
62452: ST_TO_ADDR
62453: GO 62644
62455: LD_INT 4
62457: DOUBLE
62458: EQUAL
62459: IFTRUE 62481
62461: LD_INT 5
62463: DOUBLE
62464: EQUAL
62465: IFTRUE 62481
62467: LD_INT 34
62469: DOUBLE
62470: EQUAL
62471: IFTRUE 62481
62473: LD_INT 37
62475: DOUBLE
62476: EQUAL
62477: IFTRUE 62481
62479: GO 62537
62481: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62482: LD_ADDR_VAR 0 9
62486: PUSH
62487: LD_VAR 0 53
62491: PUSH
62492: LD_VAR 0 54
62496: PUSH
62497: LD_VAR 0 55
62501: PUSH
62502: LD_VAR 0 56
62506: PUSH
62507: LD_VAR 0 57
62511: PUSH
62512: LD_VAR 0 58
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: PUSH
62525: LD_VAR 0 4
62529: PUSH
62530: LD_INT 1
62532: PLUS
62533: ARRAY
62534: ST_TO_ADDR
62535: GO 62644
62537: LD_INT 31
62539: DOUBLE
62540: EQUAL
62541: IFTRUE 62587
62543: LD_INT 32
62545: DOUBLE
62546: EQUAL
62547: IFTRUE 62587
62549: LD_INT 33
62551: DOUBLE
62552: EQUAL
62553: IFTRUE 62587
62555: LD_INT 27
62557: DOUBLE
62558: EQUAL
62559: IFTRUE 62587
62561: LD_INT 26
62563: DOUBLE
62564: EQUAL
62565: IFTRUE 62587
62567: LD_INT 28
62569: DOUBLE
62570: EQUAL
62571: IFTRUE 62587
62573: LD_INT 29
62575: DOUBLE
62576: EQUAL
62577: IFTRUE 62587
62579: LD_INT 30
62581: DOUBLE
62582: EQUAL
62583: IFTRUE 62587
62585: GO 62643
62587: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
62588: LD_ADDR_VAR 0 9
62592: PUSH
62593: LD_VAR 0 59
62597: PUSH
62598: LD_VAR 0 60
62602: PUSH
62603: LD_VAR 0 61
62607: PUSH
62608: LD_VAR 0 62
62612: PUSH
62613: LD_VAR 0 63
62617: PUSH
62618: LD_VAR 0 64
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: PUSH
62631: LD_VAR 0 4
62635: PUSH
62636: LD_INT 1
62638: PLUS
62639: ARRAY
62640: ST_TO_ADDR
62641: GO 62644
62643: POP
// temp_list2 = [ ] ;
62644: LD_ADDR_VAR 0 10
62648: PUSH
62649: EMPTY
62650: ST_TO_ADDR
// for i in temp_list do
62651: LD_ADDR_VAR 0 8
62655: PUSH
62656: LD_VAR 0 9
62660: PUSH
62661: FOR_IN
62662: IFFALSE 62714
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62664: LD_ADDR_VAR 0 10
62668: PUSH
62669: LD_VAR 0 10
62673: PUSH
62674: LD_VAR 0 8
62678: PUSH
62679: LD_INT 1
62681: ARRAY
62682: PUSH
62683: LD_VAR 0 2
62687: PLUS
62688: PUSH
62689: LD_VAR 0 8
62693: PUSH
62694: LD_INT 2
62696: ARRAY
62697: PUSH
62698: LD_VAR 0 3
62702: PLUS
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: EMPTY
62709: LIST
62710: ADD
62711: ST_TO_ADDR
62712: GO 62661
62714: POP
62715: POP
// result = temp_list2 ;
62716: LD_ADDR_VAR 0 7
62720: PUSH
62721: LD_VAR 0 10
62725: ST_TO_ADDR
// end ;
62726: LD_VAR 0 7
62730: RET
// export function EnemyInRange ( unit , dist ) ; begin
62731: LD_INT 0
62733: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62734: LD_ADDR_VAR 0 3
62738: PUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: CALL_OW 255
62748: PPUSH
62749: LD_VAR 0 1
62753: PPUSH
62754: CALL_OW 250
62758: PPUSH
62759: LD_VAR 0 1
62763: PPUSH
62764: CALL_OW 251
62768: PPUSH
62769: LD_VAR 0 2
62773: PPUSH
62774: CALL 36835 0 4
62778: PUSH
62779: LD_INT 4
62781: ARRAY
62782: ST_TO_ADDR
// end ;
62783: LD_VAR 0 3
62787: RET
// export function PlayerSeeMe ( unit ) ; begin
62788: LD_INT 0
62790: PPUSH
// result := See ( your_side , unit ) ;
62791: LD_ADDR_VAR 0 2
62795: PUSH
62796: LD_OWVAR 2
62800: PPUSH
62801: LD_VAR 0 1
62805: PPUSH
62806: CALL_OW 292
62810: ST_TO_ADDR
// end ;
62811: LD_VAR 0 2
62815: RET
// export function ReverseDir ( unit ) ; begin
62816: LD_INT 0
62818: PPUSH
// if not unit then
62819: LD_VAR 0 1
62823: NOT
62824: IFFALSE 62828
// exit ;
62826: GO 62851
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62828: LD_ADDR_VAR 0 2
62832: PUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: CALL_OW 254
62842: PUSH
62843: LD_INT 3
62845: PLUS
62846: PUSH
62847: LD_INT 6
62849: MOD
62850: ST_TO_ADDR
// end ;
62851: LD_VAR 0 2
62855: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62856: LD_INT 0
62858: PPUSH
62859: PPUSH
62860: PPUSH
62861: PPUSH
62862: PPUSH
// if not hexes then
62863: LD_VAR 0 2
62867: NOT
62868: IFFALSE 62872
// exit ;
62870: GO 63020
// dist := 9999 ;
62872: LD_ADDR_VAR 0 5
62876: PUSH
62877: LD_INT 9999
62879: ST_TO_ADDR
// for i = 1 to hexes do
62880: LD_ADDR_VAR 0 4
62884: PUSH
62885: DOUBLE
62886: LD_INT 1
62888: DEC
62889: ST_TO_ADDR
62890: LD_VAR 0 2
62894: PUSH
62895: FOR_TO
62896: IFFALSE 63008
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62898: LD_VAR 0 1
62902: PPUSH
62903: LD_VAR 0 2
62907: PUSH
62908: LD_VAR 0 4
62912: ARRAY
62913: PUSH
62914: LD_INT 1
62916: ARRAY
62917: PPUSH
62918: LD_VAR 0 2
62922: PUSH
62923: LD_VAR 0 4
62927: ARRAY
62928: PUSH
62929: LD_INT 2
62931: ARRAY
62932: PPUSH
62933: CALL_OW 297
62937: PUSH
62938: LD_VAR 0 5
62942: LESS
62943: IFFALSE 63006
// begin hex := hexes [ i ] ;
62945: LD_ADDR_VAR 0 7
62949: PUSH
62950: LD_VAR 0 2
62954: PUSH
62955: LD_VAR 0 4
62959: ARRAY
62960: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62961: LD_ADDR_VAR 0 5
62965: PUSH
62966: LD_VAR 0 1
62970: PPUSH
62971: LD_VAR 0 2
62975: PUSH
62976: LD_VAR 0 4
62980: ARRAY
62981: PUSH
62982: LD_INT 1
62984: ARRAY
62985: PPUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_VAR 0 4
62995: ARRAY
62996: PUSH
62997: LD_INT 2
62999: ARRAY
63000: PPUSH
63001: CALL_OW 297
63005: ST_TO_ADDR
// end ; end ;
63006: GO 62895
63008: POP
63009: POP
// result := hex ;
63010: LD_ADDR_VAR 0 3
63014: PUSH
63015: LD_VAR 0 7
63019: ST_TO_ADDR
// end ;
63020: LD_VAR 0 3
63024: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63025: LD_INT 0
63027: PPUSH
63028: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63029: LD_VAR 0 1
63033: NOT
63034: PUSH
63035: LD_VAR 0 1
63039: PUSH
63040: LD_INT 21
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 23
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PPUSH
63064: CALL_OW 69
63068: IN
63069: NOT
63070: OR
63071: IFFALSE 63075
// exit ;
63073: GO 63122
// for i = 1 to 3 do
63075: LD_ADDR_VAR 0 3
63079: PUSH
63080: DOUBLE
63081: LD_INT 1
63083: DEC
63084: ST_TO_ADDR
63085: LD_INT 3
63087: PUSH
63088: FOR_TO
63089: IFFALSE 63120
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63091: LD_VAR 0 1
63095: PPUSH
63096: CALL_OW 250
63100: PPUSH
63101: LD_VAR 0 1
63105: PPUSH
63106: CALL_OW 251
63110: PPUSH
63111: LD_INT 1
63113: PPUSH
63114: CALL_OW 453
63118: GO 63088
63120: POP
63121: POP
// end ;
63122: LD_VAR 0 2
63126: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63127: LD_INT 0
63129: PPUSH
63130: PPUSH
63131: PPUSH
63132: PPUSH
63133: PPUSH
63134: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63135: LD_VAR 0 1
63139: NOT
63140: PUSH
63141: LD_VAR 0 2
63145: NOT
63146: OR
63147: PUSH
63148: LD_VAR 0 1
63152: PPUSH
63153: CALL_OW 314
63157: OR
63158: IFFALSE 63162
// exit ;
63160: GO 63603
// x := GetX ( enemy_unit ) ;
63162: LD_ADDR_VAR 0 7
63166: PUSH
63167: LD_VAR 0 2
63171: PPUSH
63172: CALL_OW 250
63176: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63177: LD_ADDR_VAR 0 8
63181: PUSH
63182: LD_VAR 0 2
63186: PPUSH
63187: CALL_OW 251
63191: ST_TO_ADDR
// if not x or not y then
63192: LD_VAR 0 7
63196: NOT
63197: PUSH
63198: LD_VAR 0 8
63202: NOT
63203: OR
63204: IFFALSE 63208
// exit ;
63206: GO 63603
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63208: LD_ADDR_VAR 0 6
63212: PUSH
63213: LD_VAR 0 7
63217: PPUSH
63218: LD_INT 0
63220: PPUSH
63221: LD_INT 4
63223: PPUSH
63224: CALL_OW 272
63228: PUSH
63229: LD_VAR 0 8
63233: PPUSH
63234: LD_INT 0
63236: PPUSH
63237: LD_INT 4
63239: PPUSH
63240: CALL_OW 273
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_VAR 0 7
63253: PPUSH
63254: LD_INT 1
63256: PPUSH
63257: LD_INT 4
63259: PPUSH
63260: CALL_OW 272
63264: PUSH
63265: LD_VAR 0 8
63269: PPUSH
63270: LD_INT 1
63272: PPUSH
63273: LD_INT 4
63275: PPUSH
63276: CALL_OW 273
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 7
63289: PPUSH
63290: LD_INT 2
63292: PPUSH
63293: LD_INT 4
63295: PPUSH
63296: CALL_OW 272
63300: PUSH
63301: LD_VAR 0 8
63305: PPUSH
63306: LD_INT 2
63308: PPUSH
63309: LD_INT 4
63311: PPUSH
63312: CALL_OW 273
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_VAR 0 7
63325: PPUSH
63326: LD_INT 3
63328: PPUSH
63329: LD_INT 4
63331: PPUSH
63332: CALL_OW 272
63336: PUSH
63337: LD_VAR 0 8
63341: PPUSH
63342: LD_INT 3
63344: PPUSH
63345: LD_INT 4
63347: PPUSH
63348: CALL_OW 273
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_VAR 0 7
63361: PPUSH
63362: LD_INT 4
63364: PPUSH
63365: LD_INT 4
63367: PPUSH
63368: CALL_OW 272
63372: PUSH
63373: LD_VAR 0 8
63377: PPUSH
63378: LD_INT 4
63380: PPUSH
63381: LD_INT 4
63383: PPUSH
63384: CALL_OW 273
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_VAR 0 7
63397: PPUSH
63398: LD_INT 5
63400: PPUSH
63401: LD_INT 4
63403: PPUSH
63404: CALL_OW 272
63408: PUSH
63409: LD_VAR 0 8
63413: PPUSH
63414: LD_INT 5
63416: PPUSH
63417: LD_INT 4
63419: PPUSH
63420: CALL_OW 273
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: ST_TO_ADDR
// for i = tmp downto 1 do
63437: LD_ADDR_VAR 0 4
63441: PUSH
63442: DOUBLE
63443: LD_VAR 0 6
63447: INC
63448: ST_TO_ADDR
63449: LD_INT 1
63451: PUSH
63452: FOR_DOWNTO
63453: IFFALSE 63554
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63455: LD_VAR 0 6
63459: PUSH
63460: LD_VAR 0 4
63464: ARRAY
63465: PUSH
63466: LD_INT 1
63468: ARRAY
63469: PPUSH
63470: LD_VAR 0 6
63474: PUSH
63475: LD_VAR 0 4
63479: ARRAY
63480: PUSH
63481: LD_INT 2
63483: ARRAY
63484: PPUSH
63485: CALL_OW 488
63489: NOT
63490: PUSH
63491: LD_VAR 0 6
63495: PUSH
63496: LD_VAR 0 4
63500: ARRAY
63501: PUSH
63502: LD_INT 1
63504: ARRAY
63505: PPUSH
63506: LD_VAR 0 6
63510: PUSH
63511: LD_VAR 0 4
63515: ARRAY
63516: PUSH
63517: LD_INT 2
63519: ARRAY
63520: PPUSH
63521: CALL_OW 428
63525: PUSH
63526: LD_INT 0
63528: NONEQUAL
63529: OR
63530: IFFALSE 63552
// tmp := Delete ( tmp , i ) ;
63532: LD_ADDR_VAR 0 6
63536: PUSH
63537: LD_VAR 0 6
63541: PPUSH
63542: LD_VAR 0 4
63546: PPUSH
63547: CALL_OW 3
63551: ST_TO_ADDR
63552: GO 63452
63554: POP
63555: POP
// j := GetClosestHex ( unit , tmp ) ;
63556: LD_ADDR_VAR 0 5
63560: PUSH
63561: LD_VAR 0 1
63565: PPUSH
63566: LD_VAR 0 6
63570: PPUSH
63571: CALL 62856 0 2
63575: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63576: LD_VAR 0 1
63580: PPUSH
63581: LD_VAR 0 5
63585: PUSH
63586: LD_INT 1
63588: ARRAY
63589: PPUSH
63590: LD_VAR 0 5
63594: PUSH
63595: LD_INT 2
63597: ARRAY
63598: PPUSH
63599: CALL_OW 111
// end ;
63603: LD_VAR 0 3
63607: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63608: LD_INT 0
63610: PPUSH
63611: PPUSH
63612: PPUSH
// uc_side = 0 ;
63613: LD_ADDR_OWVAR 20
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
// uc_nation = 0 ;
63621: LD_ADDR_OWVAR 21
63625: PUSH
63626: LD_INT 0
63628: ST_TO_ADDR
// InitHc ;
63629: CALL_OW 19
// InitVc ;
63633: CALL_OW 20
// if mastodonts then
63637: LD_VAR 0 6
63641: IFFALSE 63708
// for i = 1 to mastodonts do
63643: LD_ADDR_VAR 0 11
63647: PUSH
63648: DOUBLE
63649: LD_INT 1
63651: DEC
63652: ST_TO_ADDR
63653: LD_VAR 0 6
63657: PUSH
63658: FOR_TO
63659: IFFALSE 63706
// begin vc_chassis := 31 ;
63661: LD_ADDR_OWVAR 37
63665: PUSH
63666: LD_INT 31
63668: ST_TO_ADDR
// vc_control := control_rider ;
63669: LD_ADDR_OWVAR 38
63673: PUSH
63674: LD_INT 4
63676: ST_TO_ADDR
// animal := CreateVehicle ;
63677: LD_ADDR_VAR 0 12
63681: PUSH
63682: CALL_OW 45
63686: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63687: LD_VAR 0 12
63691: PPUSH
63692: LD_VAR 0 8
63696: PPUSH
63697: LD_INT 0
63699: PPUSH
63700: CALL 65777 0 3
// end ;
63704: GO 63658
63706: POP
63707: POP
// if horses then
63708: LD_VAR 0 5
63712: IFFALSE 63779
// for i = 1 to horses do
63714: LD_ADDR_VAR 0 11
63718: PUSH
63719: DOUBLE
63720: LD_INT 1
63722: DEC
63723: ST_TO_ADDR
63724: LD_VAR 0 5
63728: PUSH
63729: FOR_TO
63730: IFFALSE 63777
// begin hc_class := 21 ;
63732: LD_ADDR_OWVAR 28
63736: PUSH
63737: LD_INT 21
63739: ST_TO_ADDR
// hc_gallery :=  ;
63740: LD_ADDR_OWVAR 33
63744: PUSH
63745: LD_STRING 
63747: ST_TO_ADDR
// animal := CreateHuman ;
63748: LD_ADDR_VAR 0 12
63752: PUSH
63753: CALL_OW 44
63757: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63758: LD_VAR 0 12
63762: PPUSH
63763: LD_VAR 0 8
63767: PPUSH
63768: LD_INT 0
63770: PPUSH
63771: CALL 65777 0 3
// end ;
63775: GO 63729
63777: POP
63778: POP
// if birds then
63779: LD_VAR 0 1
63783: IFFALSE 63850
// for i = 1 to birds do
63785: LD_ADDR_VAR 0 11
63789: PUSH
63790: DOUBLE
63791: LD_INT 1
63793: DEC
63794: ST_TO_ADDR
63795: LD_VAR 0 1
63799: PUSH
63800: FOR_TO
63801: IFFALSE 63848
// begin hc_class = 18 ;
63803: LD_ADDR_OWVAR 28
63807: PUSH
63808: LD_INT 18
63810: ST_TO_ADDR
// hc_gallery =  ;
63811: LD_ADDR_OWVAR 33
63815: PUSH
63816: LD_STRING 
63818: ST_TO_ADDR
// animal := CreateHuman ;
63819: LD_ADDR_VAR 0 12
63823: PUSH
63824: CALL_OW 44
63828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63829: LD_VAR 0 12
63833: PPUSH
63834: LD_VAR 0 8
63838: PPUSH
63839: LD_INT 0
63841: PPUSH
63842: CALL 65777 0 3
// end ;
63846: GO 63800
63848: POP
63849: POP
// if tigers then
63850: LD_VAR 0 2
63854: IFFALSE 63938
// for i = 1 to tigers do
63856: LD_ADDR_VAR 0 11
63860: PUSH
63861: DOUBLE
63862: LD_INT 1
63864: DEC
63865: ST_TO_ADDR
63866: LD_VAR 0 2
63870: PUSH
63871: FOR_TO
63872: IFFALSE 63936
// begin hc_class = class_tiger ;
63874: LD_ADDR_OWVAR 28
63878: PUSH
63879: LD_INT 14
63881: ST_TO_ADDR
// hc_gallery =  ;
63882: LD_ADDR_OWVAR 33
63886: PUSH
63887: LD_STRING 
63889: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63890: LD_ADDR_OWVAR 35
63894: PUSH
63895: LD_INT 7
63897: NEG
63898: PPUSH
63899: LD_INT 7
63901: PPUSH
63902: CALL_OW 12
63906: ST_TO_ADDR
// animal := CreateHuman ;
63907: LD_ADDR_VAR 0 12
63911: PUSH
63912: CALL_OW 44
63916: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63917: LD_VAR 0 12
63921: PPUSH
63922: LD_VAR 0 8
63926: PPUSH
63927: LD_INT 0
63929: PPUSH
63930: CALL 65777 0 3
// end ;
63934: GO 63871
63936: POP
63937: POP
// if apemans then
63938: LD_VAR 0 3
63942: IFFALSE 64065
// for i = 1 to apemans do
63944: LD_ADDR_VAR 0 11
63948: PUSH
63949: DOUBLE
63950: LD_INT 1
63952: DEC
63953: ST_TO_ADDR
63954: LD_VAR 0 3
63958: PUSH
63959: FOR_TO
63960: IFFALSE 64063
// begin hc_class = class_apeman ;
63962: LD_ADDR_OWVAR 28
63966: PUSH
63967: LD_INT 12
63969: ST_TO_ADDR
// hc_gallery =  ;
63970: LD_ADDR_OWVAR 33
63974: PUSH
63975: LD_STRING 
63977: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63978: LD_ADDR_OWVAR 35
63982: PUSH
63983: LD_INT 5
63985: NEG
63986: PPUSH
63987: LD_INT 5
63989: PPUSH
63990: CALL_OW 12
63994: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63995: LD_ADDR_OWVAR 31
63999: PUSH
64000: LD_INT 1
64002: PPUSH
64003: LD_INT 3
64005: PPUSH
64006: CALL_OW 12
64010: PUSH
64011: LD_INT 1
64013: PPUSH
64014: LD_INT 3
64016: PPUSH
64017: CALL_OW 12
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: ST_TO_ADDR
// animal := CreateHuman ;
64034: LD_ADDR_VAR 0 12
64038: PUSH
64039: CALL_OW 44
64043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64044: LD_VAR 0 12
64048: PPUSH
64049: LD_VAR 0 8
64053: PPUSH
64054: LD_INT 0
64056: PPUSH
64057: CALL 65777 0 3
// end ;
64061: GO 63959
64063: POP
64064: POP
// if enchidnas then
64065: LD_VAR 0 4
64069: IFFALSE 64136
// for i = 1 to enchidnas do
64071: LD_ADDR_VAR 0 11
64075: PUSH
64076: DOUBLE
64077: LD_INT 1
64079: DEC
64080: ST_TO_ADDR
64081: LD_VAR 0 4
64085: PUSH
64086: FOR_TO
64087: IFFALSE 64134
// begin hc_class = 13 ;
64089: LD_ADDR_OWVAR 28
64093: PUSH
64094: LD_INT 13
64096: ST_TO_ADDR
// hc_gallery =  ;
64097: LD_ADDR_OWVAR 33
64101: PUSH
64102: LD_STRING 
64104: ST_TO_ADDR
// animal := CreateHuman ;
64105: LD_ADDR_VAR 0 12
64109: PUSH
64110: CALL_OW 44
64114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64115: LD_VAR 0 12
64119: PPUSH
64120: LD_VAR 0 8
64124: PPUSH
64125: LD_INT 0
64127: PPUSH
64128: CALL 65777 0 3
// end ;
64132: GO 64086
64134: POP
64135: POP
// if fishes then
64136: LD_VAR 0 7
64140: IFFALSE 64207
// for i = 1 to fishes do
64142: LD_ADDR_VAR 0 11
64146: PUSH
64147: DOUBLE
64148: LD_INT 1
64150: DEC
64151: ST_TO_ADDR
64152: LD_VAR 0 7
64156: PUSH
64157: FOR_TO
64158: IFFALSE 64205
// begin hc_class = 20 ;
64160: LD_ADDR_OWVAR 28
64164: PUSH
64165: LD_INT 20
64167: ST_TO_ADDR
// hc_gallery =  ;
64168: LD_ADDR_OWVAR 33
64172: PUSH
64173: LD_STRING 
64175: ST_TO_ADDR
// animal := CreateHuman ;
64176: LD_ADDR_VAR 0 12
64180: PUSH
64181: CALL_OW 44
64185: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64186: LD_VAR 0 12
64190: PPUSH
64191: LD_VAR 0 9
64195: PPUSH
64196: LD_INT 0
64198: PPUSH
64199: CALL 65777 0 3
// end ;
64203: GO 64157
64205: POP
64206: POP
// end ;
64207: LD_VAR 0 10
64211: RET
// export function WantHeal ( sci , unit ) ; begin
64212: LD_INT 0
64214: PPUSH
// if GetTaskList ( sci ) > 0 then
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 437
64224: PUSH
64225: LD_INT 0
64227: GREATER
64228: IFFALSE 64298
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 437
64239: PUSH
64240: LD_INT 1
64242: ARRAY
64243: PUSH
64244: LD_INT 1
64246: ARRAY
64247: PUSH
64248: LD_STRING l
64250: EQUAL
64251: PUSH
64252: LD_VAR 0 1
64256: PPUSH
64257: CALL_OW 437
64261: PUSH
64262: LD_INT 1
64264: ARRAY
64265: PUSH
64266: LD_INT 4
64268: ARRAY
64269: PUSH
64270: LD_VAR 0 2
64274: EQUAL
64275: AND
64276: IFFALSE 64288
// result := true else
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_INT 1
64285: ST_TO_ADDR
64286: GO 64296
// result := false ;
64288: LD_ADDR_VAR 0 3
64292: PUSH
64293: LD_INT 0
64295: ST_TO_ADDR
// end else
64296: GO 64306
// result := false ;
64298: LD_ADDR_VAR 0 3
64302: PUSH
64303: LD_INT 0
64305: ST_TO_ADDR
// end ;
64306: LD_VAR 0 3
64310: RET
// export function HealTarget ( sci ) ; begin
64311: LD_INT 0
64313: PPUSH
// if not sci then
64314: LD_VAR 0 1
64318: NOT
64319: IFFALSE 64323
// exit ;
64321: GO 64388
// result := 0 ;
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: LD_INT 0
64330: ST_TO_ADDR
// if GetTaskList ( sci ) then
64331: LD_VAR 0 1
64335: PPUSH
64336: CALL_OW 437
64340: IFFALSE 64388
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64342: LD_VAR 0 1
64346: PPUSH
64347: CALL_OW 437
64351: PUSH
64352: LD_INT 1
64354: ARRAY
64355: PUSH
64356: LD_INT 1
64358: ARRAY
64359: PUSH
64360: LD_STRING l
64362: EQUAL
64363: IFFALSE 64388
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64365: LD_ADDR_VAR 0 2
64369: PUSH
64370: LD_VAR 0 1
64374: PPUSH
64375: CALL_OW 437
64379: PUSH
64380: LD_INT 1
64382: ARRAY
64383: PUSH
64384: LD_INT 4
64386: ARRAY
64387: ST_TO_ADDR
// end ;
64388: LD_VAR 0 2
64392: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64393: LD_INT 0
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
// if not base_units then
64399: LD_VAR 0 1
64403: NOT
64404: IFFALSE 64408
// exit ;
64406: GO 64495
// result := false ;
64408: LD_ADDR_VAR 0 2
64412: PUSH
64413: LD_INT 0
64415: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64416: LD_ADDR_VAR 0 5
64420: PUSH
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_INT 21
64428: PUSH
64429: LD_INT 3
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PPUSH
64436: CALL_OW 72
64440: ST_TO_ADDR
// if not tmp then
64441: LD_VAR 0 5
64445: NOT
64446: IFFALSE 64450
// exit ;
64448: GO 64495
// for i in tmp do
64450: LD_ADDR_VAR 0 3
64454: PUSH
64455: LD_VAR 0 5
64459: PUSH
64460: FOR_IN
64461: IFFALSE 64493
// begin result := EnemyInRange ( i , 22 ) ;
64463: LD_ADDR_VAR 0 2
64467: PUSH
64468: LD_VAR 0 3
64472: PPUSH
64473: LD_INT 22
64475: PPUSH
64476: CALL 62731 0 2
64480: ST_TO_ADDR
// if result then
64481: LD_VAR 0 2
64485: IFFALSE 64491
// exit ;
64487: POP
64488: POP
64489: GO 64495
// end ;
64491: GO 64460
64493: POP
64494: POP
// end ;
64495: LD_VAR 0 2
64499: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64500: LD_INT 0
64502: PPUSH
64503: PPUSH
// if not units then
64504: LD_VAR 0 1
64508: NOT
64509: IFFALSE 64513
// exit ;
64511: GO 64583
// result := [ ] ;
64513: LD_ADDR_VAR 0 3
64517: PUSH
64518: EMPTY
64519: ST_TO_ADDR
// for i in units do
64520: LD_ADDR_VAR 0 4
64524: PUSH
64525: LD_VAR 0 1
64529: PUSH
64530: FOR_IN
64531: IFFALSE 64581
// if GetTag ( i ) = tag then
64533: LD_VAR 0 4
64537: PPUSH
64538: CALL_OW 110
64542: PUSH
64543: LD_VAR 0 2
64547: EQUAL
64548: IFFALSE 64579
// result := Insert ( result , result + 1 , i ) ;
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_VAR 0 3
64559: PPUSH
64560: LD_VAR 0 3
64564: PUSH
64565: LD_INT 1
64567: PLUS
64568: PPUSH
64569: LD_VAR 0 4
64573: PPUSH
64574: CALL_OW 2
64578: ST_TO_ADDR
64579: GO 64530
64581: POP
64582: POP
// end ;
64583: LD_VAR 0 3
64587: RET
// export function IsDriver ( un ) ; begin
64588: LD_INT 0
64590: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64591: LD_ADDR_VAR 0 2
64595: PUSH
64596: LD_VAR 0 1
64600: PUSH
64601: LD_INT 55
64603: PUSH
64604: EMPTY
64605: LIST
64606: PPUSH
64607: CALL_OW 69
64611: IN
64612: ST_TO_ADDR
// end ;
64613: LD_VAR 0 2
64617: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64618: LD_INT 0
64620: PPUSH
64621: PPUSH
// list := [ ] ;
64622: LD_ADDR_VAR 0 5
64626: PUSH
64627: EMPTY
64628: ST_TO_ADDR
// case d of 0 :
64629: LD_VAR 0 3
64633: PUSH
64634: LD_INT 0
64636: DOUBLE
64637: EQUAL
64638: IFTRUE 64642
64640: GO 64775
64642: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64643: LD_ADDR_VAR 0 5
64647: PUSH
64648: LD_VAR 0 1
64652: PUSH
64653: LD_INT 4
64655: MINUS
64656: PUSH
64657: LD_VAR 0 2
64661: PUSH
64662: LD_INT 4
64664: MINUS
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: LIST
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 3
64681: MINUS
64682: PUSH
64683: LD_VAR 0 2
64687: PUSH
64688: LD_INT 1
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: LIST
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_INT 4
64703: PLUS
64704: PUSH
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 4
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: LIST
64717: PUSH
64718: LD_VAR 0 1
64722: PUSH
64723: LD_INT 3
64725: PLUS
64726: PUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_INT 3
64734: PLUS
64735: PUSH
64736: LD_INT 5
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: LIST
64743: PUSH
64744: LD_VAR 0 1
64748: PUSH
64749: LD_VAR 0 2
64753: PUSH
64754: LD_INT 4
64756: PLUS
64757: PUSH
64758: LD_INT 0
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: ST_TO_ADDR
// end ; 1 :
64773: GO 65473
64775: LD_INT 1
64777: DOUBLE
64778: EQUAL
64779: IFTRUE 64783
64781: GO 64916
64783: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64784: LD_ADDR_VAR 0 5
64788: PUSH
64789: LD_VAR 0 1
64793: PUSH
64794: LD_VAR 0 2
64798: PUSH
64799: LD_INT 4
64801: MINUS
64802: PUSH
64803: LD_INT 3
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: PUSH
64811: LD_VAR 0 1
64815: PUSH
64816: LD_INT 3
64818: MINUS
64819: PUSH
64820: LD_VAR 0 2
64824: PUSH
64825: LD_INT 3
64827: MINUS
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: LIST
64836: PUSH
64837: LD_VAR 0 1
64841: PUSH
64842: LD_INT 4
64844: MINUS
64845: PUSH
64846: LD_VAR 0 2
64850: PUSH
64851: LD_INT 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: LIST
64858: PUSH
64859: LD_VAR 0 1
64863: PUSH
64864: LD_VAR 0 2
64868: PUSH
64869: LD_INT 3
64871: PLUS
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: LIST
64880: PUSH
64881: LD_VAR 0 1
64885: PUSH
64886: LD_INT 4
64888: PLUS
64889: PUSH
64890: LD_VAR 0 2
64894: PUSH
64895: LD_INT 4
64897: PLUS
64898: PUSH
64899: LD_INT 5
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: ST_TO_ADDR
// end ; 2 :
64914: GO 65473
64916: LD_INT 2
64918: DOUBLE
64919: EQUAL
64920: IFTRUE 64924
64922: GO 65053
64924: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64925: LD_ADDR_VAR 0 5
64929: PUSH
64930: LD_VAR 0 1
64934: PUSH
64935: LD_VAR 0 2
64939: PUSH
64940: LD_INT 3
64942: MINUS
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: PUSH
64952: LD_VAR 0 1
64956: PUSH
64957: LD_INT 4
64959: PLUS
64960: PUSH
64961: LD_VAR 0 2
64965: PUSH
64966: LD_INT 4
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: PUSH
64974: LD_VAR 0 1
64978: PUSH
64979: LD_VAR 0 2
64983: PUSH
64984: LD_INT 4
64986: PLUS
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: PUSH
64996: LD_VAR 0 1
65000: PUSH
65001: LD_INT 3
65003: MINUS
65004: PUSH
65005: LD_VAR 0 2
65009: PUSH
65010: LD_INT 1
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: LIST
65017: PUSH
65018: LD_VAR 0 1
65022: PUSH
65023: LD_INT 4
65025: MINUS
65026: PUSH
65027: LD_VAR 0 2
65031: PUSH
65032: LD_INT 4
65034: MINUS
65035: PUSH
65036: LD_INT 2
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: LIST
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: ST_TO_ADDR
// end ; 3 :
65051: GO 65473
65053: LD_INT 3
65055: DOUBLE
65056: EQUAL
65057: IFTRUE 65061
65059: GO 65194
65061: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65062: LD_ADDR_VAR 0 5
65066: PUSH
65067: LD_VAR 0 1
65071: PUSH
65072: LD_INT 3
65074: PLUS
65075: PUSH
65076: LD_VAR 0 2
65080: PUSH
65081: LD_INT 4
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: LIST
65088: PUSH
65089: LD_VAR 0 1
65093: PUSH
65094: LD_INT 4
65096: PLUS
65097: PUSH
65098: LD_VAR 0 2
65102: PUSH
65103: LD_INT 4
65105: PLUS
65106: PUSH
65107: LD_INT 5
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: PUSH
65115: LD_VAR 0 1
65119: PUSH
65120: LD_INT 4
65122: MINUS
65123: PUSH
65124: LD_VAR 0 2
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: LD_VAR 0 2
65146: PUSH
65147: LD_INT 4
65149: MINUS
65150: PUSH
65151: LD_INT 3
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: LIST
65158: PUSH
65159: LD_VAR 0 1
65163: PUSH
65164: LD_INT 3
65166: MINUS
65167: PUSH
65168: LD_VAR 0 2
65172: PUSH
65173: LD_INT 3
65175: MINUS
65176: PUSH
65177: LD_INT 2
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: LIST
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: ST_TO_ADDR
// end ; 4 :
65192: GO 65473
65194: LD_INT 4
65196: DOUBLE
65197: EQUAL
65198: IFTRUE 65202
65200: GO 65335
65202: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65203: LD_ADDR_VAR 0 5
65207: PUSH
65208: LD_VAR 0 1
65212: PUSH
65213: LD_VAR 0 2
65217: PUSH
65218: LD_INT 4
65220: PLUS
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: PUSH
65230: LD_VAR 0 1
65234: PUSH
65235: LD_INT 3
65237: PLUS
65238: PUSH
65239: LD_VAR 0 2
65243: PUSH
65244: LD_INT 3
65246: PLUS
65247: PUSH
65248: LD_INT 5
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: PUSH
65256: LD_VAR 0 1
65260: PUSH
65261: LD_INT 4
65263: PLUS
65264: PUSH
65265: LD_VAR 0 2
65269: PUSH
65270: LD_INT 4
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: LIST
65277: PUSH
65278: LD_VAR 0 1
65282: PUSH
65283: LD_VAR 0 2
65287: PUSH
65288: LD_INT 3
65290: MINUS
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: LIST
65299: PUSH
65300: LD_VAR 0 1
65304: PUSH
65305: LD_INT 4
65307: MINUS
65308: PUSH
65309: LD_VAR 0 2
65313: PUSH
65314: LD_INT 4
65316: MINUS
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: LIST
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: ST_TO_ADDR
// end ; 5 :
65333: GO 65473
65335: LD_INT 5
65337: DOUBLE
65338: EQUAL
65339: IFTRUE 65343
65341: GO 65472
65343: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65344: LD_ADDR_VAR 0 5
65348: PUSH
65349: LD_VAR 0 1
65353: PUSH
65354: LD_INT 4
65356: MINUS
65357: PUSH
65358: LD_VAR 0 2
65362: PUSH
65363: LD_INT 1
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: PUSH
65371: LD_VAR 0 1
65375: PUSH
65376: LD_VAR 0 2
65380: PUSH
65381: LD_INT 4
65383: MINUS
65384: PUSH
65385: LD_INT 3
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: LIST
65392: PUSH
65393: LD_VAR 0 1
65397: PUSH
65398: LD_INT 4
65400: PLUS
65401: PUSH
65402: LD_VAR 0 2
65406: PUSH
65407: LD_INT 4
65409: PLUS
65410: PUSH
65411: LD_INT 5
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: LIST
65418: PUSH
65419: LD_VAR 0 1
65423: PUSH
65424: LD_INT 3
65426: PLUS
65427: PUSH
65428: LD_VAR 0 2
65432: PUSH
65433: LD_INT 4
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: LIST
65440: PUSH
65441: LD_VAR 0 1
65445: PUSH
65446: LD_VAR 0 2
65450: PUSH
65451: LD_INT 3
65453: PLUS
65454: PUSH
65455: LD_INT 0
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// end ; end ;
65470: GO 65473
65472: POP
// result := list ;
65473: LD_ADDR_VAR 0 4
65477: PUSH
65478: LD_VAR 0 5
65482: ST_TO_ADDR
// end ;
65483: LD_VAR 0 4
65487: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
65492: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65493: LD_VAR 0 1
65497: NOT
65498: PUSH
65499: LD_VAR 0 2
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: LD_INT 2
65509: PUSH
65510: LD_INT 3
65512: PUSH
65513: LD_INT 4
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: IN
65522: NOT
65523: OR
65524: IFFALSE 65528
// exit ;
65526: GO 65620
// tmp := [ ] ;
65528: LD_ADDR_VAR 0 5
65532: PUSH
65533: EMPTY
65534: ST_TO_ADDR
// for i in units do
65535: LD_ADDR_VAR 0 4
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: FOR_IN
65546: IFFALSE 65589
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65548: LD_ADDR_VAR 0 5
65552: PUSH
65553: LD_VAR 0 5
65557: PPUSH
65558: LD_VAR 0 5
65562: PUSH
65563: LD_INT 1
65565: PLUS
65566: PPUSH
65567: LD_VAR 0 4
65571: PPUSH
65572: LD_VAR 0 2
65576: PPUSH
65577: CALL_OW 259
65581: PPUSH
65582: CALL_OW 2
65586: ST_TO_ADDR
65587: GO 65545
65589: POP
65590: POP
// if not tmp then
65591: LD_VAR 0 5
65595: NOT
65596: IFFALSE 65600
// exit ;
65598: GO 65620
// result := SortListByListDesc ( units , tmp ) ;
65600: LD_ADDR_VAR 0 3
65604: PUSH
65605: LD_VAR 0 1
65609: PPUSH
65610: LD_VAR 0 5
65614: PPUSH
65615: CALL_OW 77
65619: ST_TO_ADDR
// end ;
65620: LD_VAR 0 3
65624: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65625: LD_INT 0
65627: PPUSH
65628: PPUSH
65629: PPUSH
// x := GetX ( building ) ;
65630: LD_ADDR_VAR 0 4
65634: PUSH
65635: LD_VAR 0 2
65639: PPUSH
65640: CALL_OW 250
65644: ST_TO_ADDR
// y := GetY ( building ) ;
65645: LD_ADDR_VAR 0 5
65649: PUSH
65650: LD_VAR 0 2
65654: PPUSH
65655: CALL_OW 251
65659: ST_TO_ADDR
// if GetTaskList ( unit ) then
65660: LD_VAR 0 1
65664: PPUSH
65665: CALL_OW 437
65669: IFFALSE 65764
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65671: LD_STRING e
65673: PUSH
65674: LD_VAR 0 1
65678: PPUSH
65679: CALL_OW 437
65683: PUSH
65684: LD_INT 1
65686: ARRAY
65687: PUSH
65688: LD_INT 1
65690: ARRAY
65691: EQUAL
65692: PUSH
65693: LD_VAR 0 4
65697: PUSH
65698: LD_VAR 0 1
65702: PPUSH
65703: CALL_OW 437
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PUSH
65712: LD_INT 2
65714: ARRAY
65715: EQUAL
65716: AND
65717: PUSH
65718: LD_VAR 0 5
65722: PUSH
65723: LD_VAR 0 1
65727: PPUSH
65728: CALL_OW 437
65732: PUSH
65733: LD_INT 1
65735: ARRAY
65736: PUSH
65737: LD_INT 3
65739: ARRAY
65740: EQUAL
65741: AND
65742: IFFALSE 65754
// result := true else
65744: LD_ADDR_VAR 0 3
65748: PUSH
65749: LD_INT 1
65751: ST_TO_ADDR
65752: GO 65762
// result := false ;
65754: LD_ADDR_VAR 0 3
65758: PUSH
65759: LD_INT 0
65761: ST_TO_ADDR
// end else
65762: GO 65772
// result := false ;
65764: LD_ADDR_VAR 0 3
65768: PUSH
65769: LD_INT 0
65771: ST_TO_ADDR
// end ;
65772: LD_VAR 0 3
65776: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65777: LD_INT 0
65779: PPUSH
65780: PPUSH
65781: PPUSH
65782: PPUSH
// if not unit or not area then
65783: LD_VAR 0 1
65787: NOT
65788: PUSH
65789: LD_VAR 0 2
65793: NOT
65794: OR
65795: IFFALSE 65799
// exit ;
65797: GO 65963
// tmp := AreaToList ( area , i ) ;
65799: LD_ADDR_VAR 0 6
65803: PUSH
65804: LD_VAR 0 2
65808: PPUSH
65809: LD_VAR 0 5
65813: PPUSH
65814: CALL_OW 517
65818: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65819: LD_ADDR_VAR 0 5
65823: PUSH
65824: DOUBLE
65825: LD_INT 1
65827: DEC
65828: ST_TO_ADDR
65829: LD_VAR 0 6
65833: PUSH
65834: LD_INT 1
65836: ARRAY
65837: PUSH
65838: FOR_TO
65839: IFFALSE 65961
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65841: LD_ADDR_VAR 0 7
65845: PUSH
65846: LD_VAR 0 6
65850: PUSH
65851: LD_INT 1
65853: ARRAY
65854: PUSH
65855: LD_VAR 0 5
65859: ARRAY
65860: PUSH
65861: LD_VAR 0 6
65865: PUSH
65866: LD_INT 2
65868: ARRAY
65869: PUSH
65870: LD_VAR 0 5
65874: ARRAY
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65880: LD_VAR 0 7
65884: PUSH
65885: LD_INT 1
65887: ARRAY
65888: PPUSH
65889: LD_VAR 0 7
65893: PUSH
65894: LD_INT 2
65896: ARRAY
65897: PPUSH
65898: CALL_OW 428
65902: PUSH
65903: LD_INT 0
65905: EQUAL
65906: IFFALSE 65959
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65908: LD_VAR 0 1
65912: PPUSH
65913: LD_VAR 0 7
65917: PUSH
65918: LD_INT 1
65920: ARRAY
65921: PPUSH
65922: LD_VAR 0 7
65926: PUSH
65927: LD_INT 2
65929: ARRAY
65930: PPUSH
65931: LD_VAR 0 3
65935: PPUSH
65936: CALL_OW 48
// result := IsPlaced ( unit ) ;
65940: LD_ADDR_VAR 0 4
65944: PUSH
65945: LD_VAR 0 1
65949: PPUSH
65950: CALL_OW 305
65954: ST_TO_ADDR
// exit ;
65955: POP
65956: POP
65957: GO 65963
// end ; end ;
65959: GO 65838
65961: POP
65962: POP
// end ;
65963: LD_VAR 0 4
65967: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65968: LD_INT 0
65970: PPUSH
65971: PPUSH
65972: PPUSH
// if not side or side > 8 then
65973: LD_VAR 0 1
65977: NOT
65978: PUSH
65979: LD_VAR 0 1
65983: PUSH
65984: LD_INT 8
65986: GREATER
65987: OR
65988: IFFALSE 65992
// exit ;
65990: GO 66179
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65992: LD_ADDR_VAR 0 4
65996: PUSH
65997: LD_INT 22
65999: PUSH
66000: LD_VAR 0 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 21
66011: PUSH
66012: LD_INT 3
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PPUSH
66023: CALL_OW 69
66027: ST_TO_ADDR
// if not tmp then
66028: LD_VAR 0 4
66032: NOT
66033: IFFALSE 66037
// exit ;
66035: GO 66179
// enable_addtolog := true ;
66037: LD_ADDR_OWVAR 81
66041: PUSH
66042: LD_INT 1
66044: ST_TO_ADDR
// AddToLog ( [ ) ;
66045: LD_STRING [
66047: PPUSH
66048: CALL_OW 561
// for i in tmp do
66052: LD_ADDR_VAR 0 3
66056: PUSH
66057: LD_VAR 0 4
66061: PUSH
66062: FOR_IN
66063: IFFALSE 66170
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66065: LD_STRING [
66067: PUSH
66068: LD_VAR 0 3
66072: PPUSH
66073: CALL_OW 266
66077: STR
66078: PUSH
66079: LD_STRING , 
66081: STR
66082: PUSH
66083: LD_VAR 0 3
66087: PPUSH
66088: CALL_OW 250
66092: STR
66093: PUSH
66094: LD_STRING , 
66096: STR
66097: PUSH
66098: LD_VAR 0 3
66102: PPUSH
66103: CALL_OW 251
66107: STR
66108: PUSH
66109: LD_STRING , 
66111: STR
66112: PUSH
66113: LD_VAR 0 3
66117: PPUSH
66118: CALL_OW 254
66122: STR
66123: PUSH
66124: LD_STRING , 
66126: STR
66127: PUSH
66128: LD_VAR 0 3
66132: PPUSH
66133: LD_INT 1
66135: PPUSH
66136: CALL_OW 268
66140: STR
66141: PUSH
66142: LD_STRING , 
66144: STR
66145: PUSH
66146: LD_VAR 0 3
66150: PPUSH
66151: LD_INT 2
66153: PPUSH
66154: CALL_OW 268
66158: STR
66159: PUSH
66160: LD_STRING ],
66162: STR
66163: PPUSH
66164: CALL_OW 561
// end ;
66168: GO 66062
66170: POP
66171: POP
// AddToLog ( ]; ) ;
66172: LD_STRING ];
66174: PPUSH
66175: CALL_OW 561
// end ;
66179: LD_VAR 0 2
66183: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66184: LD_INT 0
66186: PPUSH
66187: PPUSH
66188: PPUSH
66189: PPUSH
66190: PPUSH
// if not area or not rate or not max then
66191: LD_VAR 0 1
66195: NOT
66196: PUSH
66197: LD_VAR 0 2
66201: NOT
66202: OR
66203: PUSH
66204: LD_VAR 0 4
66208: NOT
66209: OR
66210: IFFALSE 66214
// exit ;
66212: GO 66406
// while 1 do
66214: LD_INT 1
66216: IFFALSE 66406
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66218: LD_ADDR_VAR 0 9
66222: PUSH
66223: LD_VAR 0 1
66227: PPUSH
66228: LD_INT 1
66230: PPUSH
66231: CALL_OW 287
66235: PUSH
66236: LD_INT 10
66238: MUL
66239: ST_TO_ADDR
// r := rate / 10 ;
66240: LD_ADDR_VAR 0 7
66244: PUSH
66245: LD_VAR 0 2
66249: PUSH
66250: LD_INT 10
66252: DIVREAL
66253: ST_TO_ADDR
// time := 1 1$00 ;
66254: LD_ADDR_VAR 0 8
66258: PUSH
66259: LD_INT 2100
66261: ST_TO_ADDR
// if amount < min then
66262: LD_VAR 0 9
66266: PUSH
66267: LD_VAR 0 3
66271: LESS
66272: IFFALSE 66290
// r := r * 2 else
66274: LD_ADDR_VAR 0 7
66278: PUSH
66279: LD_VAR 0 7
66283: PUSH
66284: LD_INT 2
66286: MUL
66287: ST_TO_ADDR
66288: GO 66316
// if amount > max then
66290: LD_VAR 0 9
66294: PUSH
66295: LD_VAR 0 4
66299: GREATER
66300: IFFALSE 66316
// r := r / 2 ;
66302: LD_ADDR_VAR 0 7
66306: PUSH
66307: LD_VAR 0 7
66311: PUSH
66312: LD_INT 2
66314: DIVREAL
66315: ST_TO_ADDR
// time := time / r ;
66316: LD_ADDR_VAR 0 8
66320: PUSH
66321: LD_VAR 0 8
66325: PUSH
66326: LD_VAR 0 7
66330: DIVREAL
66331: ST_TO_ADDR
// if time < 0 then
66332: LD_VAR 0 8
66336: PUSH
66337: LD_INT 0
66339: LESS
66340: IFFALSE 66357
// time := time * - 1 ;
66342: LD_ADDR_VAR 0 8
66346: PUSH
66347: LD_VAR 0 8
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: MUL
66356: ST_TO_ADDR
// wait ( time ) ;
66357: LD_VAR 0 8
66361: PPUSH
66362: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66366: LD_INT 35
66368: PPUSH
66369: LD_INT 875
66371: PPUSH
66372: CALL_OW 12
66376: PPUSH
66377: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66381: LD_INT 1
66383: PPUSH
66384: LD_INT 5
66386: PPUSH
66387: CALL_OW 12
66391: PPUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: LD_INT 1
66399: PPUSH
66400: CALL_OW 55
// end ;
66404: GO 66214
// end ;
66406: LD_VAR 0 5
66410: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66411: LD_INT 0
66413: PPUSH
66414: PPUSH
66415: PPUSH
66416: PPUSH
66417: PPUSH
66418: PPUSH
66419: PPUSH
66420: PPUSH
// if not turrets or not factories then
66421: LD_VAR 0 1
66425: NOT
66426: PUSH
66427: LD_VAR 0 2
66431: NOT
66432: OR
66433: IFFALSE 66437
// exit ;
66435: GO 66744
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66437: LD_ADDR_VAR 0 10
66441: PUSH
66442: LD_INT 5
66444: PUSH
66445: LD_INT 6
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 2
66454: PUSH
66455: LD_INT 4
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 3
66464: PUSH
66465: LD_INT 5
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 24
66479: PUSH
66480: LD_INT 25
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 23
66489: PUSH
66490: LD_INT 27
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 42
66503: PUSH
66504: LD_INT 43
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 44
66513: PUSH
66514: LD_INT 46
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: PUSH
66521: LD_INT 45
66523: PUSH
66524: LD_INT 47
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: LIST
66540: ST_TO_ADDR
// result := [ ] ;
66541: LD_ADDR_VAR 0 3
66545: PUSH
66546: EMPTY
66547: ST_TO_ADDR
// for i in turrets do
66548: LD_ADDR_VAR 0 4
66552: PUSH
66553: LD_VAR 0 1
66557: PUSH
66558: FOR_IN
66559: IFFALSE 66742
// begin nat := GetNation ( i ) ;
66561: LD_ADDR_VAR 0 7
66565: PUSH
66566: LD_VAR 0 4
66570: PPUSH
66571: CALL_OW 248
66575: ST_TO_ADDR
// weapon := 0 ;
66576: LD_ADDR_VAR 0 8
66580: PUSH
66581: LD_INT 0
66583: ST_TO_ADDR
// if not nat then
66584: LD_VAR 0 7
66588: NOT
66589: IFFALSE 66593
// continue ;
66591: GO 66558
// for j in list [ nat ] do
66593: LD_ADDR_VAR 0 5
66597: PUSH
66598: LD_VAR 0 10
66602: PUSH
66603: LD_VAR 0 7
66607: ARRAY
66608: PUSH
66609: FOR_IN
66610: IFFALSE 66651
// if GetBWeapon ( i ) = j [ 1 ] then
66612: LD_VAR 0 4
66616: PPUSH
66617: CALL_OW 269
66621: PUSH
66622: LD_VAR 0 5
66626: PUSH
66627: LD_INT 1
66629: ARRAY
66630: EQUAL
66631: IFFALSE 66649
// begin weapon := j [ 2 ] ;
66633: LD_ADDR_VAR 0 8
66637: PUSH
66638: LD_VAR 0 5
66642: PUSH
66643: LD_INT 2
66645: ARRAY
66646: ST_TO_ADDR
// break ;
66647: GO 66651
// end ;
66649: GO 66609
66651: POP
66652: POP
// if not weapon then
66653: LD_VAR 0 8
66657: NOT
66658: IFFALSE 66662
// continue ;
66660: GO 66558
// for k in factories do
66662: LD_ADDR_VAR 0 6
66666: PUSH
66667: LD_VAR 0 2
66671: PUSH
66672: FOR_IN
66673: IFFALSE 66738
// begin weapons := AvailableWeaponList ( k ) ;
66675: LD_ADDR_VAR 0 9
66679: PUSH
66680: LD_VAR 0 6
66684: PPUSH
66685: CALL_OW 478
66689: ST_TO_ADDR
// if not weapons then
66690: LD_VAR 0 9
66694: NOT
66695: IFFALSE 66699
// continue ;
66697: GO 66672
// if weapon in weapons then
66699: LD_VAR 0 8
66703: PUSH
66704: LD_VAR 0 9
66708: IN
66709: IFFALSE 66736
// begin result := [ i , weapon ] ;
66711: LD_ADDR_VAR 0 3
66715: PUSH
66716: LD_VAR 0 4
66720: PUSH
66721: LD_VAR 0 8
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: ST_TO_ADDR
// exit ;
66730: POP
66731: POP
66732: POP
66733: POP
66734: GO 66744
// end ; end ;
66736: GO 66672
66738: POP
66739: POP
// end ;
66740: GO 66558
66742: POP
66743: POP
// end ;
66744: LD_VAR 0 3
66748: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66749: LD_INT 0
66751: PPUSH
// if not side or side > 8 then
66752: LD_VAR 0 3
66756: NOT
66757: PUSH
66758: LD_VAR 0 3
66762: PUSH
66763: LD_INT 8
66765: GREATER
66766: OR
66767: IFFALSE 66771
// exit ;
66769: GO 66830
// if not range then
66771: LD_VAR 0 4
66775: NOT
66776: IFFALSE 66787
// range := - 12 ;
66778: LD_ADDR_VAR 0 4
66782: PUSH
66783: LD_INT 12
66785: NEG
66786: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66787: LD_VAR 0 1
66791: PPUSH
66792: LD_VAR 0 2
66796: PPUSH
66797: LD_VAR 0 3
66801: PPUSH
66802: LD_VAR 0 4
66806: PPUSH
66807: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66811: LD_VAR 0 1
66815: PPUSH
66816: LD_VAR 0 2
66820: PPUSH
66821: LD_VAR 0 3
66825: PPUSH
66826: CALL_OW 331
// end ;
66830: LD_VAR 0 5
66834: RET
// export function Video ( mode ) ; begin
66835: LD_INT 0
66837: PPUSH
// ingame_video = mode ;
66838: LD_ADDR_OWVAR 52
66842: PUSH
66843: LD_VAR 0 1
66847: ST_TO_ADDR
// interface_hidden = mode ;
66848: LD_ADDR_OWVAR 54
66852: PUSH
66853: LD_VAR 0 1
66857: ST_TO_ADDR
// end ;
66858: LD_VAR 0 2
66862: RET
// export function Join ( array , element ) ; begin
66863: LD_INT 0
66865: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66866: LD_ADDR_VAR 0 3
66870: PUSH
66871: LD_VAR 0 1
66875: PPUSH
66876: LD_VAR 0 1
66880: PUSH
66881: LD_INT 1
66883: PLUS
66884: PPUSH
66885: LD_VAR 0 2
66889: PPUSH
66890: CALL_OW 1
66894: ST_TO_ADDR
// end ;
66895: LD_VAR 0 3
66899: RET
// export function JoinUnion ( array , element ) ; begin
66900: LD_INT 0
66902: PPUSH
// result := array union element ;
66903: LD_ADDR_VAR 0 3
66907: PUSH
66908: LD_VAR 0 1
66912: PUSH
66913: LD_VAR 0 2
66917: UNION
66918: ST_TO_ADDR
// end ;
66919: LD_VAR 0 3
66923: RET
// export function GetBehemoths ( side ) ; begin
66924: LD_INT 0
66926: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66927: LD_ADDR_VAR 0 2
66931: PUSH
66932: LD_INT 22
66934: PUSH
66935: LD_VAR 0 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 31
66946: PUSH
66947: LD_INT 25
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PPUSH
66958: CALL_OW 69
66962: ST_TO_ADDR
// end ;
66963: LD_VAR 0 2
66967: RET
// export function Shuffle ( array ) ; var i , index ; begin
66968: LD_INT 0
66970: PPUSH
66971: PPUSH
66972: PPUSH
// result := [ ] ;
66973: LD_ADDR_VAR 0 2
66977: PUSH
66978: EMPTY
66979: ST_TO_ADDR
// if not array then
66980: LD_VAR 0 1
66984: NOT
66985: IFFALSE 66989
// exit ;
66987: GO 67088
// Randomize ;
66989: CALL_OW 10
// for i = array downto 1 do
66993: LD_ADDR_VAR 0 3
66997: PUSH
66998: DOUBLE
66999: LD_VAR 0 1
67003: INC
67004: ST_TO_ADDR
67005: LD_INT 1
67007: PUSH
67008: FOR_DOWNTO
67009: IFFALSE 67086
// begin index := rand ( 1 , array ) ;
67011: LD_ADDR_VAR 0 4
67015: PUSH
67016: LD_INT 1
67018: PPUSH
67019: LD_VAR 0 1
67023: PPUSH
67024: CALL_OW 12
67028: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67029: LD_ADDR_VAR 0 2
67033: PUSH
67034: LD_VAR 0 2
67038: PPUSH
67039: LD_VAR 0 2
67043: PUSH
67044: LD_INT 1
67046: PLUS
67047: PPUSH
67048: LD_VAR 0 1
67052: PUSH
67053: LD_VAR 0 4
67057: ARRAY
67058: PPUSH
67059: CALL_OW 2
67063: ST_TO_ADDR
// array := Delete ( array , index ) ;
67064: LD_ADDR_VAR 0 1
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: LD_VAR 0 4
67078: PPUSH
67079: CALL_OW 3
67083: ST_TO_ADDR
// end ;
67084: GO 67008
67086: POP
67087: POP
// end ;
67088: LD_VAR 0 2
67092: RET
// export function GetBaseMaterials ( base ) ; begin
67093: LD_INT 0
67095: PPUSH
// result := [ 0 , 0 , 0 ] ;
67096: LD_ADDR_VAR 0 2
67100: PUSH
67101: LD_INT 0
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: LIST
67114: ST_TO_ADDR
// if not base then
67115: LD_VAR 0 1
67119: NOT
67120: IFFALSE 67124
// exit ;
67122: GO 67173
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67124: LD_ADDR_VAR 0 2
67128: PUSH
67129: LD_VAR 0 1
67133: PPUSH
67134: LD_INT 1
67136: PPUSH
67137: CALL_OW 275
67141: PUSH
67142: LD_VAR 0 1
67146: PPUSH
67147: LD_INT 2
67149: PPUSH
67150: CALL_OW 275
67154: PUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: LD_INT 3
67162: PPUSH
67163: CALL_OW 275
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: LIST
67172: ST_TO_ADDR
// end ;
67173: LD_VAR 0 2
67177: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67178: LD_INT 0
67180: PPUSH
67181: PPUSH
// result := array ;
67182: LD_ADDR_VAR 0 3
67186: PUSH
67187: LD_VAR 0 1
67191: ST_TO_ADDR
// if size > 0 then
67192: LD_VAR 0 2
67196: PUSH
67197: LD_INT 0
67199: GREATER
67200: IFFALSE 67246
// for i := array downto size do
67202: LD_ADDR_VAR 0 4
67206: PUSH
67207: DOUBLE
67208: LD_VAR 0 1
67212: INC
67213: ST_TO_ADDR
67214: LD_VAR 0 2
67218: PUSH
67219: FOR_DOWNTO
67220: IFFALSE 67244
// result := Delete ( result , result ) ;
67222: LD_ADDR_VAR 0 3
67226: PUSH
67227: LD_VAR 0 3
67231: PPUSH
67232: LD_VAR 0 3
67236: PPUSH
67237: CALL_OW 3
67241: ST_TO_ADDR
67242: GO 67219
67244: POP
67245: POP
// end ;
67246: LD_VAR 0 3
67250: RET
// export function ComExit ( unit ) ; var tmp ; begin
67251: LD_INT 0
67253: PPUSH
67254: PPUSH
// if not IsInUnit ( unit ) then
67255: LD_VAR 0 1
67259: PPUSH
67260: CALL_OW 310
67264: NOT
67265: IFFALSE 67269
// exit ;
67267: GO 67329
// tmp := IsInUnit ( unit ) ;
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: LD_VAR 0 1
67278: PPUSH
67279: CALL_OW 310
67283: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67284: LD_VAR 0 3
67288: PPUSH
67289: CALL_OW 247
67293: PUSH
67294: LD_INT 2
67296: EQUAL
67297: IFFALSE 67310
// ComExitVehicle ( unit ) else
67299: LD_VAR 0 1
67303: PPUSH
67304: CALL_OW 121
67308: GO 67319
// ComExitBuilding ( unit ) ;
67310: LD_VAR 0 1
67314: PPUSH
67315: CALL_OW 122
// result := tmp ;
67319: LD_ADDR_VAR 0 2
67323: PUSH
67324: LD_VAR 0 3
67328: ST_TO_ADDR
// end ;
67329: LD_VAR 0 2
67333: RET
// export function ResetHc ; begin
67334: LD_INT 0
67336: PPUSH
// InitHc ;
67337: CALL_OW 19
// hc_importance := 0 ;
67341: LD_ADDR_OWVAR 32
67345: PUSH
67346: LD_INT 0
67348: ST_TO_ADDR
// end ; end_of_file
67349: LD_VAR 0 1
67353: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
67354: LD_VAR 0 2
67358: PUSH
67359: LD_INT 100
67361: EQUAL
67362: IFFALSE 68311
// begin if not StreamModeActive then
67364: LD_EXP 105
67368: NOT
67369: IFFALSE 67379
// StreamModeActive := true ;
67371: LD_ADDR_EXP 105
67375: PUSH
67376: LD_INT 1
67378: ST_TO_ADDR
// if p3 = 0 then
67379: LD_VAR 0 3
67383: PUSH
67384: LD_INT 0
67386: EQUAL
67387: IFFALSE 67393
// InitStreamMode ;
67389: CALL 68544 0 0
// if p3 = 1 then
67393: LD_VAR 0 3
67397: PUSH
67398: LD_INT 1
67400: EQUAL
67401: IFFALSE 67411
// sRocket := true ;
67403: LD_ADDR_EXP 110
67407: PUSH
67408: LD_INT 1
67410: ST_TO_ADDR
// if p3 = 2 then
67411: LD_VAR 0 3
67415: PUSH
67416: LD_INT 2
67418: EQUAL
67419: IFFALSE 67429
// sSpeed := true ;
67421: LD_ADDR_EXP 109
67425: PUSH
67426: LD_INT 1
67428: ST_TO_ADDR
// if p3 = 3 then
67429: LD_VAR 0 3
67433: PUSH
67434: LD_INT 3
67436: EQUAL
67437: IFFALSE 67447
// sEngine := true ;
67439: LD_ADDR_EXP 111
67443: PUSH
67444: LD_INT 1
67446: ST_TO_ADDR
// if p3 = 4 then
67447: LD_VAR 0 3
67451: PUSH
67452: LD_INT 4
67454: EQUAL
67455: IFFALSE 67465
// sSpec := true ;
67457: LD_ADDR_EXP 108
67461: PUSH
67462: LD_INT 1
67464: ST_TO_ADDR
// if p3 = 5 then
67465: LD_VAR 0 3
67469: PUSH
67470: LD_INT 5
67472: EQUAL
67473: IFFALSE 67483
// sLevel := true ;
67475: LD_ADDR_EXP 112
67479: PUSH
67480: LD_INT 1
67482: ST_TO_ADDR
// if p3 = 6 then
67483: LD_VAR 0 3
67487: PUSH
67488: LD_INT 6
67490: EQUAL
67491: IFFALSE 67501
// sArmoury := true ;
67493: LD_ADDR_EXP 113
67497: PUSH
67498: LD_INT 1
67500: ST_TO_ADDR
// if p3 = 7 then
67501: LD_VAR 0 3
67505: PUSH
67506: LD_INT 7
67508: EQUAL
67509: IFFALSE 67519
// sRadar := true ;
67511: LD_ADDR_EXP 114
67515: PUSH
67516: LD_INT 1
67518: ST_TO_ADDR
// if p3 = 8 then
67519: LD_VAR 0 3
67523: PUSH
67524: LD_INT 8
67526: EQUAL
67527: IFFALSE 67537
// sBunker := true ;
67529: LD_ADDR_EXP 115
67533: PUSH
67534: LD_INT 1
67536: ST_TO_ADDR
// if p3 = 9 then
67537: LD_VAR 0 3
67541: PUSH
67542: LD_INT 9
67544: EQUAL
67545: IFFALSE 67555
// sHack := true ;
67547: LD_ADDR_EXP 116
67551: PUSH
67552: LD_INT 1
67554: ST_TO_ADDR
// if p3 = 10 then
67555: LD_VAR 0 3
67559: PUSH
67560: LD_INT 10
67562: EQUAL
67563: IFFALSE 67573
// sFire := true ;
67565: LD_ADDR_EXP 117
67569: PUSH
67570: LD_INT 1
67572: ST_TO_ADDR
// if p3 = 11 then
67573: LD_VAR 0 3
67577: PUSH
67578: LD_INT 11
67580: EQUAL
67581: IFFALSE 67591
// sRefresh := true ;
67583: LD_ADDR_EXP 118
67587: PUSH
67588: LD_INT 1
67590: ST_TO_ADDR
// if p3 = 12 then
67591: LD_VAR 0 3
67595: PUSH
67596: LD_INT 12
67598: EQUAL
67599: IFFALSE 67609
// sExp := true ;
67601: LD_ADDR_EXP 119
67605: PUSH
67606: LD_INT 1
67608: ST_TO_ADDR
// if p3 = 13 then
67609: LD_VAR 0 3
67613: PUSH
67614: LD_INT 13
67616: EQUAL
67617: IFFALSE 67627
// sDepot := true ;
67619: LD_ADDR_EXP 120
67623: PUSH
67624: LD_INT 1
67626: ST_TO_ADDR
// if p3 = 14 then
67627: LD_VAR 0 3
67631: PUSH
67632: LD_INT 14
67634: EQUAL
67635: IFFALSE 67645
// sFlag := true ;
67637: LD_ADDR_EXP 121
67641: PUSH
67642: LD_INT 1
67644: ST_TO_ADDR
// if p3 = 15 then
67645: LD_VAR 0 3
67649: PUSH
67650: LD_INT 15
67652: EQUAL
67653: IFFALSE 67663
// sKamikadze := true ;
67655: LD_ADDR_EXP 129
67659: PUSH
67660: LD_INT 1
67662: ST_TO_ADDR
// if p3 = 16 then
67663: LD_VAR 0 3
67667: PUSH
67668: LD_INT 16
67670: EQUAL
67671: IFFALSE 67681
// sTroll := true ;
67673: LD_ADDR_EXP 130
67677: PUSH
67678: LD_INT 1
67680: ST_TO_ADDR
// if p3 = 17 then
67681: LD_VAR 0 3
67685: PUSH
67686: LD_INT 17
67688: EQUAL
67689: IFFALSE 67699
// sSlow := true ;
67691: LD_ADDR_EXP 131
67695: PUSH
67696: LD_INT 1
67698: ST_TO_ADDR
// if p3 = 18 then
67699: LD_VAR 0 3
67703: PUSH
67704: LD_INT 18
67706: EQUAL
67707: IFFALSE 67717
// sLack := true ;
67709: LD_ADDR_EXP 132
67713: PUSH
67714: LD_INT 1
67716: ST_TO_ADDR
// if p3 = 19 then
67717: LD_VAR 0 3
67721: PUSH
67722: LD_INT 19
67724: EQUAL
67725: IFFALSE 67735
// sTank := true ;
67727: LD_ADDR_EXP 134
67731: PUSH
67732: LD_INT 1
67734: ST_TO_ADDR
// if p3 = 20 then
67735: LD_VAR 0 3
67739: PUSH
67740: LD_INT 20
67742: EQUAL
67743: IFFALSE 67753
// sRemote := true ;
67745: LD_ADDR_EXP 135
67749: PUSH
67750: LD_INT 1
67752: ST_TO_ADDR
// if p3 = 21 then
67753: LD_VAR 0 3
67757: PUSH
67758: LD_INT 21
67760: EQUAL
67761: IFFALSE 67771
// sPowell := true ;
67763: LD_ADDR_EXP 136
67767: PUSH
67768: LD_INT 1
67770: ST_TO_ADDR
// if p3 = 22 then
67771: LD_VAR 0 3
67775: PUSH
67776: LD_INT 22
67778: EQUAL
67779: IFFALSE 67789
// sTeleport := true ;
67781: LD_ADDR_EXP 139
67785: PUSH
67786: LD_INT 1
67788: ST_TO_ADDR
// if p3 = 23 then
67789: LD_VAR 0 3
67793: PUSH
67794: LD_INT 23
67796: EQUAL
67797: IFFALSE 67807
// sOilTower := true ;
67799: LD_ADDR_EXP 141
67803: PUSH
67804: LD_INT 1
67806: ST_TO_ADDR
// if p3 = 24 then
67807: LD_VAR 0 3
67811: PUSH
67812: LD_INT 24
67814: EQUAL
67815: IFFALSE 67825
// sShovel := true ;
67817: LD_ADDR_EXP 142
67821: PUSH
67822: LD_INT 1
67824: ST_TO_ADDR
// if p3 = 25 then
67825: LD_VAR 0 3
67829: PUSH
67830: LD_INT 25
67832: EQUAL
67833: IFFALSE 67843
// sSheik := true ;
67835: LD_ADDR_EXP 143
67839: PUSH
67840: LD_INT 1
67842: ST_TO_ADDR
// if p3 = 26 then
67843: LD_VAR 0 3
67847: PUSH
67848: LD_INT 26
67850: EQUAL
67851: IFFALSE 67861
// sEarthquake := true ;
67853: LD_ADDR_EXP 145
67857: PUSH
67858: LD_INT 1
67860: ST_TO_ADDR
// if p3 = 27 then
67861: LD_VAR 0 3
67865: PUSH
67866: LD_INT 27
67868: EQUAL
67869: IFFALSE 67879
// sAI := true ;
67871: LD_ADDR_EXP 146
67875: PUSH
67876: LD_INT 1
67878: ST_TO_ADDR
// if p3 = 28 then
67879: LD_VAR 0 3
67883: PUSH
67884: LD_INT 28
67886: EQUAL
67887: IFFALSE 67897
// sCargo := true ;
67889: LD_ADDR_EXP 149
67893: PUSH
67894: LD_INT 1
67896: ST_TO_ADDR
// if p3 = 29 then
67897: LD_VAR 0 3
67901: PUSH
67902: LD_INT 29
67904: EQUAL
67905: IFFALSE 67915
// sDLaser := true ;
67907: LD_ADDR_EXP 150
67911: PUSH
67912: LD_INT 1
67914: ST_TO_ADDR
// if p3 = 30 then
67915: LD_VAR 0 3
67919: PUSH
67920: LD_INT 30
67922: EQUAL
67923: IFFALSE 67933
// sExchange := true ;
67925: LD_ADDR_EXP 151
67929: PUSH
67930: LD_INT 1
67932: ST_TO_ADDR
// if p3 = 31 then
67933: LD_VAR 0 3
67937: PUSH
67938: LD_INT 31
67940: EQUAL
67941: IFFALSE 67951
// sFac := true ;
67943: LD_ADDR_EXP 152
67947: PUSH
67948: LD_INT 1
67950: ST_TO_ADDR
// if p3 = 32 then
67951: LD_VAR 0 3
67955: PUSH
67956: LD_INT 32
67958: EQUAL
67959: IFFALSE 67969
// sPower := true ;
67961: LD_ADDR_EXP 153
67965: PUSH
67966: LD_INT 1
67968: ST_TO_ADDR
// if p3 = 33 then
67969: LD_VAR 0 3
67973: PUSH
67974: LD_INT 33
67976: EQUAL
67977: IFFALSE 67987
// sRandom := true ;
67979: LD_ADDR_EXP 154
67983: PUSH
67984: LD_INT 1
67986: ST_TO_ADDR
// if p3 = 34 then
67987: LD_VAR 0 3
67991: PUSH
67992: LD_INT 34
67994: EQUAL
67995: IFFALSE 68005
// sShield := true ;
67997: LD_ADDR_EXP 155
68001: PUSH
68002: LD_INT 1
68004: ST_TO_ADDR
// if p3 = 35 then
68005: LD_VAR 0 3
68009: PUSH
68010: LD_INT 35
68012: EQUAL
68013: IFFALSE 68023
// sTime := true ;
68015: LD_ADDR_EXP 156
68019: PUSH
68020: LD_INT 1
68022: ST_TO_ADDR
// if p3 = 36 then
68023: LD_VAR 0 3
68027: PUSH
68028: LD_INT 36
68030: EQUAL
68031: IFFALSE 68041
// sTools := true ;
68033: LD_ADDR_EXP 157
68037: PUSH
68038: LD_INT 1
68040: ST_TO_ADDR
// if p3 = 101 then
68041: LD_VAR 0 3
68045: PUSH
68046: LD_INT 101
68048: EQUAL
68049: IFFALSE 68059
// sSold := true ;
68051: LD_ADDR_EXP 122
68055: PUSH
68056: LD_INT 1
68058: ST_TO_ADDR
// if p3 = 102 then
68059: LD_VAR 0 3
68063: PUSH
68064: LD_INT 102
68066: EQUAL
68067: IFFALSE 68077
// sDiff := true ;
68069: LD_ADDR_EXP 123
68073: PUSH
68074: LD_INT 1
68076: ST_TO_ADDR
// if p3 = 103 then
68077: LD_VAR 0 3
68081: PUSH
68082: LD_INT 103
68084: EQUAL
68085: IFFALSE 68095
// sFog := true ;
68087: LD_ADDR_EXP 126
68091: PUSH
68092: LD_INT 1
68094: ST_TO_ADDR
// if p3 = 104 then
68095: LD_VAR 0 3
68099: PUSH
68100: LD_INT 104
68102: EQUAL
68103: IFFALSE 68113
// sReset := true ;
68105: LD_ADDR_EXP 127
68109: PUSH
68110: LD_INT 1
68112: ST_TO_ADDR
// if p3 = 105 then
68113: LD_VAR 0 3
68117: PUSH
68118: LD_INT 105
68120: EQUAL
68121: IFFALSE 68131
// sSun := true ;
68123: LD_ADDR_EXP 128
68127: PUSH
68128: LD_INT 1
68130: ST_TO_ADDR
// if p3 = 106 then
68131: LD_VAR 0 3
68135: PUSH
68136: LD_INT 106
68138: EQUAL
68139: IFFALSE 68149
// sTiger := true ;
68141: LD_ADDR_EXP 124
68145: PUSH
68146: LD_INT 1
68148: ST_TO_ADDR
// if p3 = 107 then
68149: LD_VAR 0 3
68153: PUSH
68154: LD_INT 107
68156: EQUAL
68157: IFFALSE 68167
// sBomb := true ;
68159: LD_ADDR_EXP 125
68163: PUSH
68164: LD_INT 1
68166: ST_TO_ADDR
// if p3 = 108 then
68167: LD_VAR 0 3
68171: PUSH
68172: LD_INT 108
68174: EQUAL
68175: IFFALSE 68185
// sWound := true ;
68177: LD_ADDR_EXP 133
68181: PUSH
68182: LD_INT 1
68184: ST_TO_ADDR
// if p3 = 109 then
68185: LD_VAR 0 3
68189: PUSH
68190: LD_INT 109
68192: EQUAL
68193: IFFALSE 68203
// sBetray := true ;
68195: LD_ADDR_EXP 137
68199: PUSH
68200: LD_INT 1
68202: ST_TO_ADDR
// if p3 = 110 then
68203: LD_VAR 0 3
68207: PUSH
68208: LD_INT 110
68210: EQUAL
68211: IFFALSE 68221
// sContamin := true ;
68213: LD_ADDR_EXP 138
68217: PUSH
68218: LD_INT 1
68220: ST_TO_ADDR
// if p3 = 111 then
68221: LD_VAR 0 3
68225: PUSH
68226: LD_INT 111
68228: EQUAL
68229: IFFALSE 68239
// sOil := true ;
68231: LD_ADDR_EXP 140
68235: PUSH
68236: LD_INT 1
68238: ST_TO_ADDR
// if p3 = 112 then
68239: LD_VAR 0 3
68243: PUSH
68244: LD_INT 112
68246: EQUAL
68247: IFFALSE 68257
// sStu := true ;
68249: LD_ADDR_EXP 144
68253: PUSH
68254: LD_INT 1
68256: ST_TO_ADDR
// if p3 = 113 then
68257: LD_VAR 0 3
68261: PUSH
68262: LD_INT 113
68264: EQUAL
68265: IFFALSE 68275
// sBazooka := true ;
68267: LD_ADDR_EXP 147
68271: PUSH
68272: LD_INT 1
68274: ST_TO_ADDR
// if p3 = 114 then
68275: LD_VAR 0 3
68279: PUSH
68280: LD_INT 114
68282: EQUAL
68283: IFFALSE 68293
// sMortar := true ;
68285: LD_ADDR_EXP 148
68289: PUSH
68290: LD_INT 1
68292: ST_TO_ADDR
// if p3 = 115 then
68293: LD_VAR 0 3
68297: PUSH
68298: LD_INT 115
68300: EQUAL
68301: IFFALSE 68311
// sRanger := true ;
68303: LD_ADDR_EXP 158
68307: PUSH
68308: LD_INT 1
68310: ST_TO_ADDR
// end ; if p2 = 101 then
68311: LD_VAR 0 2
68315: PUSH
68316: LD_INT 101
68318: EQUAL
68319: IFFALSE 68522
// begin case p3 of 1 :
68321: LD_VAR 0 3
68325: PUSH
68326: LD_INT 1
68328: DOUBLE
68329: EQUAL
68330: IFTRUE 68334
68332: GO 68341
68334: POP
// hHackUnlimitedResources ; 2 :
68335: CALL 78616 0 0
68339: GO 68522
68341: LD_INT 2
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68349
68347: GO 68356
68349: POP
// hHackSetLevel10 ; 3 :
68350: CALL 78749 0 0
68354: GO 68522
68356: LD_INT 3
68358: DOUBLE
68359: EQUAL
68360: IFTRUE 68364
68362: GO 68371
68364: POP
// hHackSetLevel10YourUnits ; 4 :
68365: CALL 78834 0 0
68369: GO 68522
68371: LD_INT 4
68373: DOUBLE
68374: EQUAL
68375: IFTRUE 68379
68377: GO 68401
68379: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
68380: LD_VAR 0 4
68384: PPUSH
68385: LD_VAR 0 5
68389: PPUSH
68390: LD_VAR 0 6
68394: PPUSH
68395: CALL 78924 0 3
68399: GO 68522
68401: LD_INT 5
68403: DOUBLE
68404: EQUAL
68405: IFTRUE 68409
68407: GO 68416
68409: POP
// hHackSpawnVehicle ; 6 :
68410: CALL 78985 0 0
68414: GO 68522
68416: LD_INT 6
68418: DOUBLE
68419: EQUAL
68420: IFTRUE 68424
68422: GO 68431
68424: POP
// hHackInvincible ; 7 :
68425: CALL 79531 0 0
68429: GO 68522
68431: LD_INT 7
68433: DOUBLE
68434: EQUAL
68435: IFTRUE 68439
68437: GO 68446
68439: POP
// hHackInvisible ; 8 :
68440: CALL 79642 0 0
68444: GO 68522
68446: LD_INT 8
68448: DOUBLE
68449: EQUAL
68450: IFTRUE 68454
68452: GO 68461
68454: POP
// hHackChangeYourSide ; 9 :
68455: CALL 79699 0 0
68459: GO 68522
68461: LD_INT 9
68463: DOUBLE
68464: EQUAL
68465: IFTRUE 68469
68467: GO 68476
68469: POP
// hHackChangeUnitSide ; 10 :
68470: CALL 79741 0 0
68474: GO 68522
68476: LD_INT 10
68478: DOUBLE
68479: EQUAL
68480: IFTRUE 68484
68482: GO 68491
68484: POP
// hHackFog ; 11 :
68485: CALL 79842 0 0
68489: GO 68522
68491: LD_INT 11
68493: DOUBLE
68494: EQUAL
68495: IFTRUE 68499
68497: GO 68506
68499: POP
// hHackApeman ; 12 :
68500: CALL 79857 0 0
68504: GO 68522
68506: LD_INT 12
68508: DOUBLE
68509: EQUAL
68510: IFTRUE 68514
68512: GO 68521
68514: POP
// hHackBoom ; end ;
68515: CALL 79942 0 0
68519: GO 68522
68521: POP
// end ; end ;
68522: PPOPN 6
68524: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
68525: GO 68527
68527: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
68528: LD_STRING initStreamRollete();
68530: PPUSH
68531: CALL_OW 559
// InitStreamMode ;
68535: CALL 68544 0 0
// DefineStreamItems ( ) ;
68539: CALL 68984 0 0
// end ;
68543: END
// function InitStreamMode ; begin
68544: LD_INT 0
68546: PPUSH
// streamModeActive := false ;
68547: LD_ADDR_EXP 105
68551: PUSH
68552: LD_INT 0
68554: ST_TO_ADDR
// normalCounter := 36 ;
68555: LD_ADDR_EXP 106
68559: PUSH
68560: LD_INT 36
68562: ST_TO_ADDR
// hardcoreCounter := 16 ;
68563: LD_ADDR_EXP 107
68567: PUSH
68568: LD_INT 16
68570: ST_TO_ADDR
// sRocket := false ;
68571: LD_ADDR_EXP 110
68575: PUSH
68576: LD_INT 0
68578: ST_TO_ADDR
// sSpeed := false ;
68579: LD_ADDR_EXP 109
68583: PUSH
68584: LD_INT 0
68586: ST_TO_ADDR
// sEngine := false ;
68587: LD_ADDR_EXP 111
68591: PUSH
68592: LD_INT 0
68594: ST_TO_ADDR
// sSpec := false ;
68595: LD_ADDR_EXP 108
68599: PUSH
68600: LD_INT 0
68602: ST_TO_ADDR
// sLevel := false ;
68603: LD_ADDR_EXP 112
68607: PUSH
68608: LD_INT 0
68610: ST_TO_ADDR
// sArmoury := false ;
68611: LD_ADDR_EXP 113
68615: PUSH
68616: LD_INT 0
68618: ST_TO_ADDR
// sRadar := false ;
68619: LD_ADDR_EXP 114
68623: PUSH
68624: LD_INT 0
68626: ST_TO_ADDR
// sBunker := false ;
68627: LD_ADDR_EXP 115
68631: PUSH
68632: LD_INT 0
68634: ST_TO_ADDR
// sHack := false ;
68635: LD_ADDR_EXP 116
68639: PUSH
68640: LD_INT 0
68642: ST_TO_ADDR
// sFire := false ;
68643: LD_ADDR_EXP 117
68647: PUSH
68648: LD_INT 0
68650: ST_TO_ADDR
// sRefresh := false ;
68651: LD_ADDR_EXP 118
68655: PUSH
68656: LD_INT 0
68658: ST_TO_ADDR
// sExp := false ;
68659: LD_ADDR_EXP 119
68663: PUSH
68664: LD_INT 0
68666: ST_TO_ADDR
// sDepot := false ;
68667: LD_ADDR_EXP 120
68671: PUSH
68672: LD_INT 0
68674: ST_TO_ADDR
// sFlag := false ;
68675: LD_ADDR_EXP 121
68679: PUSH
68680: LD_INT 0
68682: ST_TO_ADDR
// sKamikadze := false ;
68683: LD_ADDR_EXP 129
68687: PUSH
68688: LD_INT 0
68690: ST_TO_ADDR
// sTroll := false ;
68691: LD_ADDR_EXP 130
68695: PUSH
68696: LD_INT 0
68698: ST_TO_ADDR
// sSlow := false ;
68699: LD_ADDR_EXP 131
68703: PUSH
68704: LD_INT 0
68706: ST_TO_ADDR
// sLack := false ;
68707: LD_ADDR_EXP 132
68711: PUSH
68712: LD_INT 0
68714: ST_TO_ADDR
// sTank := false ;
68715: LD_ADDR_EXP 134
68719: PUSH
68720: LD_INT 0
68722: ST_TO_ADDR
// sRemote := false ;
68723: LD_ADDR_EXP 135
68727: PUSH
68728: LD_INT 0
68730: ST_TO_ADDR
// sPowell := false ;
68731: LD_ADDR_EXP 136
68735: PUSH
68736: LD_INT 0
68738: ST_TO_ADDR
// sTeleport := false ;
68739: LD_ADDR_EXP 139
68743: PUSH
68744: LD_INT 0
68746: ST_TO_ADDR
// sOilTower := false ;
68747: LD_ADDR_EXP 141
68751: PUSH
68752: LD_INT 0
68754: ST_TO_ADDR
// sShovel := false ;
68755: LD_ADDR_EXP 142
68759: PUSH
68760: LD_INT 0
68762: ST_TO_ADDR
// sSheik := false ;
68763: LD_ADDR_EXP 143
68767: PUSH
68768: LD_INT 0
68770: ST_TO_ADDR
// sEarthquake := false ;
68771: LD_ADDR_EXP 145
68775: PUSH
68776: LD_INT 0
68778: ST_TO_ADDR
// sAI := false ;
68779: LD_ADDR_EXP 146
68783: PUSH
68784: LD_INT 0
68786: ST_TO_ADDR
// sCargo := false ;
68787: LD_ADDR_EXP 149
68791: PUSH
68792: LD_INT 0
68794: ST_TO_ADDR
// sDLaser := false ;
68795: LD_ADDR_EXP 150
68799: PUSH
68800: LD_INT 0
68802: ST_TO_ADDR
// sExchange := false ;
68803: LD_ADDR_EXP 151
68807: PUSH
68808: LD_INT 0
68810: ST_TO_ADDR
// sFac := false ;
68811: LD_ADDR_EXP 152
68815: PUSH
68816: LD_INT 0
68818: ST_TO_ADDR
// sPower := false ;
68819: LD_ADDR_EXP 153
68823: PUSH
68824: LD_INT 0
68826: ST_TO_ADDR
// sRandom := false ;
68827: LD_ADDR_EXP 154
68831: PUSH
68832: LD_INT 0
68834: ST_TO_ADDR
// sShield := false ;
68835: LD_ADDR_EXP 155
68839: PUSH
68840: LD_INT 0
68842: ST_TO_ADDR
// sTime := false ;
68843: LD_ADDR_EXP 156
68847: PUSH
68848: LD_INT 0
68850: ST_TO_ADDR
// sTools := false ;
68851: LD_ADDR_EXP 157
68855: PUSH
68856: LD_INT 0
68858: ST_TO_ADDR
// sSold := false ;
68859: LD_ADDR_EXP 122
68863: PUSH
68864: LD_INT 0
68866: ST_TO_ADDR
// sDiff := false ;
68867: LD_ADDR_EXP 123
68871: PUSH
68872: LD_INT 0
68874: ST_TO_ADDR
// sFog := false ;
68875: LD_ADDR_EXP 126
68879: PUSH
68880: LD_INT 0
68882: ST_TO_ADDR
// sReset := false ;
68883: LD_ADDR_EXP 127
68887: PUSH
68888: LD_INT 0
68890: ST_TO_ADDR
// sSun := false ;
68891: LD_ADDR_EXP 128
68895: PUSH
68896: LD_INT 0
68898: ST_TO_ADDR
// sTiger := false ;
68899: LD_ADDR_EXP 124
68903: PUSH
68904: LD_INT 0
68906: ST_TO_ADDR
// sBomb := false ;
68907: LD_ADDR_EXP 125
68911: PUSH
68912: LD_INT 0
68914: ST_TO_ADDR
// sWound := false ;
68915: LD_ADDR_EXP 133
68919: PUSH
68920: LD_INT 0
68922: ST_TO_ADDR
// sBetray := false ;
68923: LD_ADDR_EXP 137
68927: PUSH
68928: LD_INT 0
68930: ST_TO_ADDR
// sContamin := false ;
68931: LD_ADDR_EXP 138
68935: PUSH
68936: LD_INT 0
68938: ST_TO_ADDR
// sOil := false ;
68939: LD_ADDR_EXP 140
68943: PUSH
68944: LD_INT 0
68946: ST_TO_ADDR
// sStu := false ;
68947: LD_ADDR_EXP 144
68951: PUSH
68952: LD_INT 0
68954: ST_TO_ADDR
// sBazooka := false ;
68955: LD_ADDR_EXP 147
68959: PUSH
68960: LD_INT 0
68962: ST_TO_ADDR
// sMortar := false ;
68963: LD_ADDR_EXP 148
68967: PUSH
68968: LD_INT 0
68970: ST_TO_ADDR
// sRanger := false ;
68971: LD_ADDR_EXP 158
68975: PUSH
68976: LD_INT 0
68978: ST_TO_ADDR
// end ;
68979: LD_VAR 0 1
68983: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
68984: LD_INT 0
68986: PPUSH
68987: PPUSH
68988: PPUSH
68989: PPUSH
68990: PPUSH
// result := [ ] ;
68991: LD_ADDR_VAR 0 1
68995: PUSH
68996: EMPTY
68997: ST_TO_ADDR
// if campaign_id = 1 then
68998: LD_OWVAR 69
69002: PUSH
69003: LD_INT 1
69005: EQUAL
69006: IFFALSE 71944
// begin case mission_number of 1 :
69008: LD_OWVAR 70
69012: PUSH
69013: LD_INT 1
69015: DOUBLE
69016: EQUAL
69017: IFTRUE 69021
69019: GO 69085
69021: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
69022: LD_ADDR_VAR 0 1
69026: PUSH
69027: LD_INT 2
69029: PUSH
69030: LD_INT 4
69032: PUSH
69033: LD_INT 11
69035: PUSH
69036: LD_INT 12
69038: PUSH
69039: LD_INT 15
69041: PUSH
69042: LD_INT 16
69044: PUSH
69045: LD_INT 22
69047: PUSH
69048: LD_INT 23
69050: PUSH
69051: LD_INT 26
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 101
69067: PUSH
69068: LD_INT 102
69070: PUSH
69071: LD_INT 106
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: ST_TO_ADDR
69083: GO 71942
69085: LD_INT 2
69087: DOUBLE
69088: EQUAL
69089: IFTRUE 69093
69091: GO 69165
69093: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
69094: LD_ADDR_VAR 0 1
69098: PUSH
69099: LD_INT 2
69101: PUSH
69102: LD_INT 4
69104: PUSH
69105: LD_INT 11
69107: PUSH
69108: LD_INT 12
69110: PUSH
69111: LD_INT 15
69113: PUSH
69114: LD_INT 16
69116: PUSH
69117: LD_INT 22
69119: PUSH
69120: LD_INT 23
69122: PUSH
69123: LD_INT 26
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 101
69139: PUSH
69140: LD_INT 102
69142: PUSH
69143: LD_INT 105
69145: PUSH
69146: LD_INT 106
69148: PUSH
69149: LD_INT 108
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: ST_TO_ADDR
69163: GO 71942
69165: LD_INT 3
69167: DOUBLE
69168: EQUAL
69169: IFTRUE 69173
69171: GO 69249
69173: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
69174: LD_ADDR_VAR 0 1
69178: PUSH
69179: LD_INT 2
69181: PUSH
69182: LD_INT 4
69184: PUSH
69185: LD_INT 5
69187: PUSH
69188: LD_INT 11
69190: PUSH
69191: LD_INT 12
69193: PUSH
69194: LD_INT 15
69196: PUSH
69197: LD_INT 16
69199: PUSH
69200: LD_INT 22
69202: PUSH
69203: LD_INT 26
69205: PUSH
69206: LD_INT 36
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 101
69223: PUSH
69224: LD_INT 102
69226: PUSH
69227: LD_INT 105
69229: PUSH
69230: LD_INT 106
69232: PUSH
69233: LD_INT 108
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: ST_TO_ADDR
69247: GO 71942
69249: LD_INT 4
69251: DOUBLE
69252: EQUAL
69253: IFTRUE 69257
69255: GO 69341
69257: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
69258: LD_ADDR_VAR 0 1
69262: PUSH
69263: LD_INT 2
69265: PUSH
69266: LD_INT 4
69268: PUSH
69269: LD_INT 5
69271: PUSH
69272: LD_INT 8
69274: PUSH
69275: LD_INT 11
69277: PUSH
69278: LD_INT 12
69280: PUSH
69281: LD_INT 15
69283: PUSH
69284: LD_INT 16
69286: PUSH
69287: LD_INT 22
69289: PUSH
69290: LD_INT 23
69292: PUSH
69293: LD_INT 26
69295: PUSH
69296: LD_INT 36
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 101
69315: PUSH
69316: LD_INT 102
69318: PUSH
69319: LD_INT 105
69321: PUSH
69322: LD_INT 106
69324: PUSH
69325: LD_INT 108
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: ST_TO_ADDR
69339: GO 71942
69341: LD_INT 5
69343: DOUBLE
69344: EQUAL
69345: IFTRUE 69349
69347: GO 69449
69349: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
69350: LD_ADDR_VAR 0 1
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: LD_INT 4
69360: PUSH
69361: LD_INT 5
69363: PUSH
69364: LD_INT 6
69366: PUSH
69367: LD_INT 8
69369: PUSH
69370: LD_INT 11
69372: PUSH
69373: LD_INT 12
69375: PUSH
69376: LD_INT 15
69378: PUSH
69379: LD_INT 16
69381: PUSH
69382: LD_INT 22
69384: PUSH
69385: LD_INT 23
69387: PUSH
69388: LD_INT 25
69390: PUSH
69391: LD_INT 26
69393: PUSH
69394: LD_INT 36
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 101
69415: PUSH
69416: LD_INT 102
69418: PUSH
69419: LD_INT 105
69421: PUSH
69422: LD_INT 106
69424: PUSH
69425: LD_INT 108
69427: PUSH
69428: LD_INT 109
69430: PUSH
69431: LD_INT 112
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: ST_TO_ADDR
69447: GO 71942
69449: LD_INT 6
69451: DOUBLE
69452: EQUAL
69453: IFTRUE 69457
69455: GO 69577
69457: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
69458: LD_ADDR_VAR 0 1
69462: PUSH
69463: LD_INT 2
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: LD_INT 5
69471: PUSH
69472: LD_INT 6
69474: PUSH
69475: LD_INT 8
69477: PUSH
69478: LD_INT 11
69480: PUSH
69481: LD_INT 12
69483: PUSH
69484: LD_INT 15
69486: PUSH
69487: LD_INT 16
69489: PUSH
69490: LD_INT 20
69492: PUSH
69493: LD_INT 21
69495: PUSH
69496: LD_INT 22
69498: PUSH
69499: LD_INT 23
69501: PUSH
69502: LD_INT 25
69504: PUSH
69505: LD_INT 26
69507: PUSH
69508: LD_INT 30
69510: PUSH
69511: LD_INT 31
69513: PUSH
69514: LD_INT 32
69516: PUSH
69517: LD_INT 36
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 101
69543: PUSH
69544: LD_INT 102
69546: PUSH
69547: LD_INT 105
69549: PUSH
69550: LD_INT 106
69552: PUSH
69553: LD_INT 108
69555: PUSH
69556: LD_INT 109
69558: PUSH
69559: LD_INT 112
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: ST_TO_ADDR
69575: GO 71942
69577: LD_INT 7
69579: DOUBLE
69580: EQUAL
69581: IFTRUE 69585
69583: GO 69685
69585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
69586: LD_ADDR_VAR 0 1
69590: PUSH
69591: LD_INT 2
69593: PUSH
69594: LD_INT 4
69596: PUSH
69597: LD_INT 5
69599: PUSH
69600: LD_INT 7
69602: PUSH
69603: LD_INT 11
69605: PUSH
69606: LD_INT 12
69608: PUSH
69609: LD_INT 15
69611: PUSH
69612: LD_INT 16
69614: PUSH
69615: LD_INT 20
69617: PUSH
69618: LD_INT 21
69620: PUSH
69621: LD_INT 22
69623: PUSH
69624: LD_INT 23
69626: PUSH
69627: LD_INT 25
69629: PUSH
69630: LD_INT 26
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 101
69651: PUSH
69652: LD_INT 102
69654: PUSH
69655: LD_INT 103
69657: PUSH
69658: LD_INT 105
69660: PUSH
69661: LD_INT 106
69663: PUSH
69664: LD_INT 108
69666: PUSH
69667: LD_INT 112
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: ST_TO_ADDR
69683: GO 71942
69685: LD_INT 8
69687: DOUBLE
69688: EQUAL
69689: IFTRUE 69693
69691: GO 69821
69693: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
69694: LD_ADDR_VAR 0 1
69698: PUSH
69699: LD_INT 2
69701: PUSH
69702: LD_INT 4
69704: PUSH
69705: LD_INT 5
69707: PUSH
69708: LD_INT 6
69710: PUSH
69711: LD_INT 7
69713: PUSH
69714: LD_INT 8
69716: PUSH
69717: LD_INT 11
69719: PUSH
69720: LD_INT 12
69722: PUSH
69723: LD_INT 15
69725: PUSH
69726: LD_INT 16
69728: PUSH
69729: LD_INT 20
69731: PUSH
69732: LD_INT 21
69734: PUSH
69735: LD_INT 22
69737: PUSH
69738: LD_INT 23
69740: PUSH
69741: LD_INT 25
69743: PUSH
69744: LD_INT 26
69746: PUSH
69747: LD_INT 30
69749: PUSH
69750: LD_INT 31
69752: PUSH
69753: LD_INT 32
69755: PUSH
69756: LD_INT 36
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 101
69783: PUSH
69784: LD_INT 102
69786: PUSH
69787: LD_INT 103
69789: PUSH
69790: LD_INT 105
69792: PUSH
69793: LD_INT 106
69795: PUSH
69796: LD_INT 108
69798: PUSH
69799: LD_INT 109
69801: PUSH
69802: LD_INT 112
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: ST_TO_ADDR
69819: GO 71942
69821: LD_INT 9
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69829
69827: GO 69965
69829: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
69830: LD_ADDR_VAR 0 1
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: LD_INT 4
69840: PUSH
69841: LD_INT 5
69843: PUSH
69844: LD_INT 6
69846: PUSH
69847: LD_INT 7
69849: PUSH
69850: LD_INT 8
69852: PUSH
69853: LD_INT 11
69855: PUSH
69856: LD_INT 12
69858: PUSH
69859: LD_INT 15
69861: PUSH
69862: LD_INT 16
69864: PUSH
69865: LD_INT 20
69867: PUSH
69868: LD_INT 21
69870: PUSH
69871: LD_INT 22
69873: PUSH
69874: LD_INT 23
69876: PUSH
69877: LD_INT 25
69879: PUSH
69880: LD_INT 26
69882: PUSH
69883: LD_INT 28
69885: PUSH
69886: LD_INT 30
69888: PUSH
69889: LD_INT 31
69891: PUSH
69892: LD_INT 32
69894: PUSH
69895: LD_INT 36
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 101
69923: PUSH
69924: LD_INT 102
69926: PUSH
69927: LD_INT 103
69929: PUSH
69930: LD_INT 105
69932: PUSH
69933: LD_INT 106
69935: PUSH
69936: LD_INT 108
69938: PUSH
69939: LD_INT 109
69941: PUSH
69942: LD_INT 112
69944: PUSH
69945: LD_INT 114
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: ST_TO_ADDR
69963: GO 71942
69965: LD_INT 10
69967: DOUBLE
69968: EQUAL
69969: IFTRUE 69973
69971: GO 70157
69973: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
69974: LD_ADDR_VAR 0 1
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: LD_INT 4
69984: PUSH
69985: LD_INT 5
69987: PUSH
69988: LD_INT 6
69990: PUSH
69991: LD_INT 7
69993: PUSH
69994: LD_INT 8
69996: PUSH
69997: LD_INT 9
69999: PUSH
70000: LD_INT 10
70002: PUSH
70003: LD_INT 11
70005: PUSH
70006: LD_INT 12
70008: PUSH
70009: LD_INT 13
70011: PUSH
70012: LD_INT 14
70014: PUSH
70015: LD_INT 15
70017: PUSH
70018: LD_INT 16
70020: PUSH
70021: LD_INT 17
70023: PUSH
70024: LD_INT 18
70026: PUSH
70027: LD_INT 19
70029: PUSH
70030: LD_INT 20
70032: PUSH
70033: LD_INT 21
70035: PUSH
70036: LD_INT 22
70038: PUSH
70039: LD_INT 23
70041: PUSH
70042: LD_INT 24
70044: PUSH
70045: LD_INT 25
70047: PUSH
70048: LD_INT 26
70050: PUSH
70051: LD_INT 28
70053: PUSH
70054: LD_INT 30
70056: PUSH
70057: LD_INT 31
70059: PUSH
70060: LD_INT 32
70062: PUSH
70063: LD_INT 36
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 101
70099: PUSH
70100: LD_INT 102
70102: PUSH
70103: LD_INT 103
70105: PUSH
70106: LD_INT 104
70108: PUSH
70109: LD_INT 105
70111: PUSH
70112: LD_INT 106
70114: PUSH
70115: LD_INT 107
70117: PUSH
70118: LD_INT 108
70120: PUSH
70121: LD_INT 109
70123: PUSH
70124: LD_INT 110
70126: PUSH
70127: LD_INT 111
70129: PUSH
70130: LD_INT 112
70132: PUSH
70133: LD_INT 114
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: ST_TO_ADDR
70155: GO 71942
70157: LD_INT 11
70159: DOUBLE
70160: EQUAL
70161: IFTRUE 70165
70163: GO 70357
70165: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
70166: LD_ADDR_VAR 0 1
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: LD_INT 3
70176: PUSH
70177: LD_INT 4
70179: PUSH
70180: LD_INT 5
70182: PUSH
70183: LD_INT 6
70185: PUSH
70186: LD_INT 7
70188: PUSH
70189: LD_INT 8
70191: PUSH
70192: LD_INT 9
70194: PUSH
70195: LD_INT 10
70197: PUSH
70198: LD_INT 11
70200: PUSH
70201: LD_INT 12
70203: PUSH
70204: LD_INT 13
70206: PUSH
70207: LD_INT 14
70209: PUSH
70210: LD_INT 15
70212: PUSH
70213: LD_INT 16
70215: PUSH
70216: LD_INT 17
70218: PUSH
70219: LD_INT 18
70221: PUSH
70222: LD_INT 19
70224: PUSH
70225: LD_INT 20
70227: PUSH
70228: LD_INT 21
70230: PUSH
70231: LD_INT 22
70233: PUSH
70234: LD_INT 23
70236: PUSH
70237: LD_INT 24
70239: PUSH
70240: LD_INT 25
70242: PUSH
70243: LD_INT 26
70245: PUSH
70246: LD_INT 28
70248: PUSH
70249: LD_INT 30
70251: PUSH
70252: LD_INT 31
70254: PUSH
70255: LD_INT 32
70257: PUSH
70258: LD_INT 34
70260: PUSH
70261: LD_INT 36
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 101
70299: PUSH
70300: LD_INT 102
70302: PUSH
70303: LD_INT 103
70305: PUSH
70306: LD_INT 104
70308: PUSH
70309: LD_INT 105
70311: PUSH
70312: LD_INT 106
70314: PUSH
70315: LD_INT 107
70317: PUSH
70318: LD_INT 108
70320: PUSH
70321: LD_INT 109
70323: PUSH
70324: LD_INT 110
70326: PUSH
70327: LD_INT 111
70329: PUSH
70330: LD_INT 112
70332: PUSH
70333: LD_INT 114
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: ST_TO_ADDR
70355: GO 71942
70357: LD_INT 12
70359: DOUBLE
70360: EQUAL
70361: IFTRUE 70365
70363: GO 70573
70365: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
70366: LD_ADDR_VAR 0 1
70370: PUSH
70371: LD_INT 1
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: LD_INT 3
70379: PUSH
70380: LD_INT 4
70382: PUSH
70383: LD_INT 5
70385: PUSH
70386: LD_INT 6
70388: PUSH
70389: LD_INT 7
70391: PUSH
70392: LD_INT 8
70394: PUSH
70395: LD_INT 9
70397: PUSH
70398: LD_INT 10
70400: PUSH
70401: LD_INT 11
70403: PUSH
70404: LD_INT 12
70406: PUSH
70407: LD_INT 13
70409: PUSH
70410: LD_INT 14
70412: PUSH
70413: LD_INT 15
70415: PUSH
70416: LD_INT 16
70418: PUSH
70419: LD_INT 17
70421: PUSH
70422: LD_INT 18
70424: PUSH
70425: LD_INT 19
70427: PUSH
70428: LD_INT 20
70430: PUSH
70431: LD_INT 21
70433: PUSH
70434: LD_INT 22
70436: PUSH
70437: LD_INT 23
70439: PUSH
70440: LD_INT 24
70442: PUSH
70443: LD_INT 25
70445: PUSH
70446: LD_INT 26
70448: PUSH
70449: LD_INT 27
70451: PUSH
70452: LD_INT 28
70454: PUSH
70455: LD_INT 30
70457: PUSH
70458: LD_INT 31
70460: PUSH
70461: LD_INT 32
70463: PUSH
70464: LD_INT 33
70466: PUSH
70467: LD_INT 34
70469: PUSH
70470: LD_INT 36
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 101
70511: PUSH
70512: LD_INT 102
70514: PUSH
70515: LD_INT 103
70517: PUSH
70518: LD_INT 104
70520: PUSH
70521: LD_INT 105
70523: PUSH
70524: LD_INT 106
70526: PUSH
70527: LD_INT 107
70529: PUSH
70530: LD_INT 108
70532: PUSH
70533: LD_INT 109
70535: PUSH
70536: LD_INT 110
70538: PUSH
70539: LD_INT 111
70541: PUSH
70542: LD_INT 112
70544: PUSH
70545: LD_INT 113
70547: PUSH
70548: LD_INT 114
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: ST_TO_ADDR
70571: GO 71942
70573: LD_INT 13
70575: DOUBLE
70576: EQUAL
70577: IFTRUE 70581
70579: GO 70777
70581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
70582: LD_ADDR_VAR 0 1
70586: PUSH
70587: LD_INT 1
70589: PUSH
70590: LD_INT 2
70592: PUSH
70593: LD_INT 3
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: LD_INT 5
70601: PUSH
70602: LD_INT 8
70604: PUSH
70605: LD_INT 9
70607: PUSH
70608: LD_INT 10
70610: PUSH
70611: LD_INT 11
70613: PUSH
70614: LD_INT 12
70616: PUSH
70617: LD_INT 14
70619: PUSH
70620: LD_INT 15
70622: PUSH
70623: LD_INT 16
70625: PUSH
70626: LD_INT 17
70628: PUSH
70629: LD_INT 18
70631: PUSH
70632: LD_INT 19
70634: PUSH
70635: LD_INT 20
70637: PUSH
70638: LD_INT 21
70640: PUSH
70641: LD_INT 22
70643: PUSH
70644: LD_INT 23
70646: PUSH
70647: LD_INT 24
70649: PUSH
70650: LD_INT 25
70652: PUSH
70653: LD_INT 26
70655: PUSH
70656: LD_INT 27
70658: PUSH
70659: LD_INT 28
70661: PUSH
70662: LD_INT 30
70664: PUSH
70665: LD_INT 31
70667: PUSH
70668: LD_INT 32
70670: PUSH
70671: LD_INT 33
70673: PUSH
70674: LD_INT 34
70676: PUSH
70677: LD_INT 36
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 101
70715: PUSH
70716: LD_INT 102
70718: PUSH
70719: LD_INT 103
70721: PUSH
70722: LD_INT 104
70724: PUSH
70725: LD_INT 105
70727: PUSH
70728: LD_INT 106
70730: PUSH
70731: LD_INT 107
70733: PUSH
70734: LD_INT 108
70736: PUSH
70737: LD_INT 109
70739: PUSH
70740: LD_INT 110
70742: PUSH
70743: LD_INT 111
70745: PUSH
70746: LD_INT 112
70748: PUSH
70749: LD_INT 113
70751: PUSH
70752: LD_INT 114
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: ST_TO_ADDR
70775: GO 71942
70777: LD_INT 14
70779: DOUBLE
70780: EQUAL
70781: IFTRUE 70785
70783: GO 70997
70785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
70786: LD_ADDR_VAR 0 1
70790: PUSH
70791: LD_INT 1
70793: PUSH
70794: LD_INT 2
70796: PUSH
70797: LD_INT 3
70799: PUSH
70800: LD_INT 4
70802: PUSH
70803: LD_INT 5
70805: PUSH
70806: LD_INT 6
70808: PUSH
70809: LD_INT 7
70811: PUSH
70812: LD_INT 8
70814: PUSH
70815: LD_INT 9
70817: PUSH
70818: LD_INT 10
70820: PUSH
70821: LD_INT 11
70823: PUSH
70824: LD_INT 12
70826: PUSH
70827: LD_INT 13
70829: PUSH
70830: LD_INT 14
70832: PUSH
70833: LD_INT 15
70835: PUSH
70836: LD_INT 16
70838: PUSH
70839: LD_INT 17
70841: PUSH
70842: LD_INT 18
70844: PUSH
70845: LD_INT 19
70847: PUSH
70848: LD_INT 20
70850: PUSH
70851: LD_INT 21
70853: PUSH
70854: LD_INT 22
70856: PUSH
70857: LD_INT 23
70859: PUSH
70860: LD_INT 24
70862: PUSH
70863: LD_INT 25
70865: PUSH
70866: LD_INT 26
70868: PUSH
70869: LD_INT 27
70871: PUSH
70872: LD_INT 28
70874: PUSH
70875: LD_INT 29
70877: PUSH
70878: LD_INT 30
70880: PUSH
70881: LD_INT 31
70883: PUSH
70884: LD_INT 32
70886: PUSH
70887: LD_INT 33
70889: PUSH
70890: LD_INT 34
70892: PUSH
70893: LD_INT 36
70895: PUSH
70896: EMPTY
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 101
70935: PUSH
70936: LD_INT 102
70938: PUSH
70939: LD_INT 103
70941: PUSH
70942: LD_INT 104
70944: PUSH
70945: LD_INT 105
70947: PUSH
70948: LD_INT 106
70950: PUSH
70951: LD_INT 107
70953: PUSH
70954: LD_INT 108
70956: PUSH
70957: LD_INT 109
70959: PUSH
70960: LD_INT 110
70962: PUSH
70963: LD_INT 111
70965: PUSH
70966: LD_INT 112
70968: PUSH
70969: LD_INT 113
70971: PUSH
70972: LD_INT 114
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: ST_TO_ADDR
70995: GO 71942
70997: LD_INT 15
70999: DOUBLE
71000: EQUAL
71001: IFTRUE 71005
71003: GO 71217
71005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
71006: LD_ADDR_VAR 0 1
71010: PUSH
71011: LD_INT 1
71013: PUSH
71014: LD_INT 2
71016: PUSH
71017: LD_INT 3
71019: PUSH
71020: LD_INT 4
71022: PUSH
71023: LD_INT 5
71025: PUSH
71026: LD_INT 6
71028: PUSH
71029: LD_INT 7
71031: PUSH
71032: LD_INT 8
71034: PUSH
71035: LD_INT 9
71037: PUSH
71038: LD_INT 10
71040: PUSH
71041: LD_INT 11
71043: PUSH
71044: LD_INT 12
71046: PUSH
71047: LD_INT 13
71049: PUSH
71050: LD_INT 14
71052: PUSH
71053: LD_INT 15
71055: PUSH
71056: LD_INT 16
71058: PUSH
71059: LD_INT 17
71061: PUSH
71062: LD_INT 18
71064: PUSH
71065: LD_INT 19
71067: PUSH
71068: LD_INT 20
71070: PUSH
71071: LD_INT 21
71073: PUSH
71074: LD_INT 22
71076: PUSH
71077: LD_INT 23
71079: PUSH
71080: LD_INT 24
71082: PUSH
71083: LD_INT 25
71085: PUSH
71086: LD_INT 26
71088: PUSH
71089: LD_INT 27
71091: PUSH
71092: LD_INT 28
71094: PUSH
71095: LD_INT 29
71097: PUSH
71098: LD_INT 30
71100: PUSH
71101: LD_INT 31
71103: PUSH
71104: LD_INT 32
71106: PUSH
71107: LD_INT 33
71109: PUSH
71110: LD_INT 34
71112: PUSH
71113: LD_INT 36
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: LIST
71120: LIST
71121: LIST
71122: LIST
71123: LIST
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 101
71155: PUSH
71156: LD_INT 102
71158: PUSH
71159: LD_INT 103
71161: PUSH
71162: LD_INT 104
71164: PUSH
71165: LD_INT 105
71167: PUSH
71168: LD_INT 106
71170: PUSH
71171: LD_INT 107
71173: PUSH
71174: LD_INT 108
71176: PUSH
71177: LD_INT 109
71179: PUSH
71180: LD_INT 110
71182: PUSH
71183: LD_INT 111
71185: PUSH
71186: LD_INT 112
71188: PUSH
71189: LD_INT 113
71191: PUSH
71192: LD_INT 114
71194: PUSH
71195: EMPTY
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: ST_TO_ADDR
71215: GO 71942
71217: LD_INT 16
71219: DOUBLE
71220: EQUAL
71221: IFTRUE 71225
71223: GO 71349
71225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
71226: LD_ADDR_VAR 0 1
71230: PUSH
71231: LD_INT 2
71233: PUSH
71234: LD_INT 4
71236: PUSH
71237: LD_INT 5
71239: PUSH
71240: LD_INT 7
71242: PUSH
71243: LD_INT 11
71245: PUSH
71246: LD_INT 12
71248: PUSH
71249: LD_INT 15
71251: PUSH
71252: LD_INT 16
71254: PUSH
71255: LD_INT 20
71257: PUSH
71258: LD_INT 21
71260: PUSH
71261: LD_INT 22
71263: PUSH
71264: LD_INT 23
71266: PUSH
71267: LD_INT 25
71269: PUSH
71270: LD_INT 26
71272: PUSH
71273: LD_INT 30
71275: PUSH
71276: LD_INT 31
71278: PUSH
71279: LD_INT 32
71281: PUSH
71282: LD_INT 33
71284: PUSH
71285: LD_INT 34
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: LIST
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 101
71311: PUSH
71312: LD_INT 102
71314: PUSH
71315: LD_INT 103
71317: PUSH
71318: LD_INT 106
71320: PUSH
71321: LD_INT 108
71323: PUSH
71324: LD_INT 112
71326: PUSH
71327: LD_INT 113
71329: PUSH
71330: LD_INT 114
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: ST_TO_ADDR
71347: GO 71942
71349: LD_INT 17
71351: DOUBLE
71352: EQUAL
71353: IFTRUE 71357
71355: GO 71569
71357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
71358: LD_ADDR_VAR 0 1
71362: PUSH
71363: LD_INT 1
71365: PUSH
71366: LD_INT 2
71368: PUSH
71369: LD_INT 3
71371: PUSH
71372: LD_INT 4
71374: PUSH
71375: LD_INT 5
71377: PUSH
71378: LD_INT 6
71380: PUSH
71381: LD_INT 7
71383: PUSH
71384: LD_INT 8
71386: PUSH
71387: LD_INT 9
71389: PUSH
71390: LD_INT 10
71392: PUSH
71393: LD_INT 11
71395: PUSH
71396: LD_INT 12
71398: PUSH
71399: LD_INT 13
71401: PUSH
71402: LD_INT 14
71404: PUSH
71405: LD_INT 15
71407: PUSH
71408: LD_INT 16
71410: PUSH
71411: LD_INT 17
71413: PUSH
71414: LD_INT 18
71416: PUSH
71417: LD_INT 19
71419: PUSH
71420: LD_INT 20
71422: PUSH
71423: LD_INT 21
71425: PUSH
71426: LD_INT 22
71428: PUSH
71429: LD_INT 23
71431: PUSH
71432: LD_INT 24
71434: PUSH
71435: LD_INT 25
71437: PUSH
71438: LD_INT 26
71440: PUSH
71441: LD_INT 27
71443: PUSH
71444: LD_INT 28
71446: PUSH
71447: LD_INT 29
71449: PUSH
71450: LD_INT 30
71452: PUSH
71453: LD_INT 31
71455: PUSH
71456: LD_INT 32
71458: PUSH
71459: LD_INT 33
71461: PUSH
71462: LD_INT 34
71464: PUSH
71465: LD_INT 36
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: LIST
71472: LIST
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 101
71507: PUSH
71508: LD_INT 102
71510: PUSH
71511: LD_INT 103
71513: PUSH
71514: LD_INT 104
71516: PUSH
71517: LD_INT 105
71519: PUSH
71520: LD_INT 106
71522: PUSH
71523: LD_INT 107
71525: PUSH
71526: LD_INT 108
71528: PUSH
71529: LD_INT 109
71531: PUSH
71532: LD_INT 110
71534: PUSH
71535: LD_INT 111
71537: PUSH
71538: LD_INT 112
71540: PUSH
71541: LD_INT 113
71543: PUSH
71544: LD_INT 114
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: ST_TO_ADDR
71567: GO 71942
71569: LD_INT 18
71571: DOUBLE
71572: EQUAL
71573: IFTRUE 71577
71575: GO 71713
71577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
71578: LD_ADDR_VAR 0 1
71582: PUSH
71583: LD_INT 2
71585: PUSH
71586: LD_INT 4
71588: PUSH
71589: LD_INT 5
71591: PUSH
71592: LD_INT 7
71594: PUSH
71595: LD_INT 11
71597: PUSH
71598: LD_INT 12
71600: PUSH
71601: LD_INT 15
71603: PUSH
71604: LD_INT 16
71606: PUSH
71607: LD_INT 20
71609: PUSH
71610: LD_INT 21
71612: PUSH
71613: LD_INT 22
71615: PUSH
71616: LD_INT 23
71618: PUSH
71619: LD_INT 25
71621: PUSH
71622: LD_INT 26
71624: PUSH
71625: LD_INT 30
71627: PUSH
71628: LD_INT 31
71630: PUSH
71631: LD_INT 32
71633: PUSH
71634: LD_INT 33
71636: PUSH
71637: LD_INT 34
71639: PUSH
71640: LD_INT 35
71642: PUSH
71643: LD_INT 36
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 101
71671: PUSH
71672: LD_INT 102
71674: PUSH
71675: LD_INT 103
71677: PUSH
71678: LD_INT 106
71680: PUSH
71681: LD_INT 108
71683: PUSH
71684: LD_INT 112
71686: PUSH
71687: LD_INT 113
71689: PUSH
71690: LD_INT 114
71692: PUSH
71693: LD_INT 115
71695: PUSH
71696: EMPTY
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: ST_TO_ADDR
71711: GO 71942
71713: LD_INT 19
71715: DOUBLE
71716: EQUAL
71717: IFTRUE 71721
71719: GO 71941
71721: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
71722: LD_ADDR_VAR 0 1
71726: PUSH
71727: LD_INT 1
71729: PUSH
71730: LD_INT 2
71732: PUSH
71733: LD_INT 3
71735: PUSH
71736: LD_INT 4
71738: PUSH
71739: LD_INT 5
71741: PUSH
71742: LD_INT 6
71744: PUSH
71745: LD_INT 7
71747: PUSH
71748: LD_INT 8
71750: PUSH
71751: LD_INT 9
71753: PUSH
71754: LD_INT 10
71756: PUSH
71757: LD_INT 11
71759: PUSH
71760: LD_INT 12
71762: PUSH
71763: LD_INT 13
71765: PUSH
71766: LD_INT 14
71768: PUSH
71769: LD_INT 15
71771: PUSH
71772: LD_INT 16
71774: PUSH
71775: LD_INT 17
71777: PUSH
71778: LD_INT 18
71780: PUSH
71781: LD_INT 19
71783: PUSH
71784: LD_INT 20
71786: PUSH
71787: LD_INT 21
71789: PUSH
71790: LD_INT 22
71792: PUSH
71793: LD_INT 23
71795: PUSH
71796: LD_INT 24
71798: PUSH
71799: LD_INT 25
71801: PUSH
71802: LD_INT 26
71804: PUSH
71805: LD_INT 27
71807: PUSH
71808: LD_INT 28
71810: PUSH
71811: LD_INT 29
71813: PUSH
71814: LD_INT 30
71816: PUSH
71817: LD_INT 31
71819: PUSH
71820: LD_INT 32
71822: PUSH
71823: LD_INT 33
71825: PUSH
71826: LD_INT 34
71828: PUSH
71829: LD_INT 35
71831: PUSH
71832: LD_INT 36
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: LIST
71840: LIST
71841: LIST
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: LIST
71855: LIST
71856: LIST
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 101
71875: PUSH
71876: LD_INT 102
71878: PUSH
71879: LD_INT 103
71881: PUSH
71882: LD_INT 104
71884: PUSH
71885: LD_INT 105
71887: PUSH
71888: LD_INT 106
71890: PUSH
71891: LD_INT 107
71893: PUSH
71894: LD_INT 108
71896: PUSH
71897: LD_INT 109
71899: PUSH
71900: LD_INT 110
71902: PUSH
71903: LD_INT 111
71905: PUSH
71906: LD_INT 112
71908: PUSH
71909: LD_INT 113
71911: PUSH
71912: LD_INT 114
71914: PUSH
71915: LD_INT 115
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: ST_TO_ADDR
71939: GO 71942
71941: POP
// end else
71942: GO 72161
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
71944: LD_ADDR_VAR 0 1
71948: PUSH
71949: LD_INT 1
71951: PUSH
71952: LD_INT 2
71954: PUSH
71955: LD_INT 3
71957: PUSH
71958: LD_INT 4
71960: PUSH
71961: LD_INT 5
71963: PUSH
71964: LD_INT 6
71966: PUSH
71967: LD_INT 7
71969: PUSH
71970: LD_INT 8
71972: PUSH
71973: LD_INT 9
71975: PUSH
71976: LD_INT 10
71978: PUSH
71979: LD_INT 11
71981: PUSH
71982: LD_INT 12
71984: PUSH
71985: LD_INT 13
71987: PUSH
71988: LD_INT 14
71990: PUSH
71991: LD_INT 15
71993: PUSH
71994: LD_INT 16
71996: PUSH
71997: LD_INT 17
71999: PUSH
72000: LD_INT 18
72002: PUSH
72003: LD_INT 19
72005: PUSH
72006: LD_INT 20
72008: PUSH
72009: LD_INT 21
72011: PUSH
72012: LD_INT 22
72014: PUSH
72015: LD_INT 23
72017: PUSH
72018: LD_INT 24
72020: PUSH
72021: LD_INT 25
72023: PUSH
72024: LD_INT 26
72026: PUSH
72027: LD_INT 27
72029: PUSH
72030: LD_INT 28
72032: PUSH
72033: LD_INT 29
72035: PUSH
72036: LD_INT 30
72038: PUSH
72039: LD_INT 31
72041: PUSH
72042: LD_INT 32
72044: PUSH
72045: LD_INT 33
72047: PUSH
72048: LD_INT 34
72050: PUSH
72051: LD_INT 35
72053: PUSH
72054: LD_INT 36
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: PUSH
72095: LD_INT 101
72097: PUSH
72098: LD_INT 102
72100: PUSH
72101: LD_INT 103
72103: PUSH
72104: LD_INT 104
72106: PUSH
72107: LD_INT 105
72109: PUSH
72110: LD_INT 106
72112: PUSH
72113: LD_INT 107
72115: PUSH
72116: LD_INT 108
72118: PUSH
72119: LD_INT 109
72121: PUSH
72122: LD_INT 110
72124: PUSH
72125: LD_INT 111
72127: PUSH
72128: LD_INT 112
72130: PUSH
72131: LD_INT 113
72133: PUSH
72134: LD_INT 114
72136: PUSH
72137: LD_INT 115
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: ST_TO_ADDR
// if result then
72161: LD_VAR 0 1
72165: IFFALSE 72454
// begin normal :=  ;
72167: LD_ADDR_VAR 0 3
72171: PUSH
72172: LD_STRING 
72174: ST_TO_ADDR
// hardcore :=  ;
72175: LD_ADDR_VAR 0 4
72179: PUSH
72180: LD_STRING 
72182: ST_TO_ADDR
// for i = 1 to normalCounter do
72183: LD_ADDR_VAR 0 5
72187: PUSH
72188: DOUBLE
72189: LD_INT 1
72191: DEC
72192: ST_TO_ADDR
72193: LD_EXP 106
72197: PUSH
72198: FOR_TO
72199: IFFALSE 72300
// begin tmp := 0 ;
72201: LD_ADDR_VAR 0 2
72205: PUSH
72206: LD_STRING 0
72208: ST_TO_ADDR
// if result [ 1 ] then
72209: LD_VAR 0 1
72213: PUSH
72214: LD_INT 1
72216: ARRAY
72217: IFFALSE 72282
// if result [ 1 ] [ 1 ] = i then
72219: LD_VAR 0 1
72223: PUSH
72224: LD_INT 1
72226: ARRAY
72227: PUSH
72228: LD_INT 1
72230: ARRAY
72231: PUSH
72232: LD_VAR 0 5
72236: EQUAL
72237: IFFALSE 72282
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72239: LD_ADDR_VAR 0 1
72243: PUSH
72244: LD_VAR 0 1
72248: PPUSH
72249: LD_INT 1
72251: PPUSH
72252: LD_VAR 0 1
72256: PUSH
72257: LD_INT 1
72259: ARRAY
72260: PPUSH
72261: LD_INT 1
72263: PPUSH
72264: CALL_OW 3
72268: PPUSH
72269: CALL_OW 1
72273: ST_TO_ADDR
// tmp := 1 ;
72274: LD_ADDR_VAR 0 2
72278: PUSH
72279: LD_STRING 1
72281: ST_TO_ADDR
// end ; normal := normal & tmp ;
72282: LD_ADDR_VAR 0 3
72286: PUSH
72287: LD_VAR 0 3
72291: PUSH
72292: LD_VAR 0 2
72296: STR
72297: ST_TO_ADDR
// end ;
72298: GO 72198
72300: POP
72301: POP
// for i = 1 to hardcoreCounter do
72302: LD_ADDR_VAR 0 5
72306: PUSH
72307: DOUBLE
72308: LD_INT 1
72310: DEC
72311: ST_TO_ADDR
72312: LD_EXP 107
72316: PUSH
72317: FOR_TO
72318: IFFALSE 72423
// begin tmp := 0 ;
72320: LD_ADDR_VAR 0 2
72324: PUSH
72325: LD_STRING 0
72327: ST_TO_ADDR
// if result [ 2 ] then
72328: LD_VAR 0 1
72332: PUSH
72333: LD_INT 2
72335: ARRAY
72336: IFFALSE 72405
// if result [ 2 ] [ 1 ] = 100 + i then
72338: LD_VAR 0 1
72342: PUSH
72343: LD_INT 2
72345: ARRAY
72346: PUSH
72347: LD_INT 1
72349: ARRAY
72350: PUSH
72351: LD_INT 100
72353: PUSH
72354: LD_VAR 0 5
72358: PLUS
72359: EQUAL
72360: IFFALSE 72405
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72362: LD_ADDR_VAR 0 1
72366: PUSH
72367: LD_VAR 0 1
72371: PPUSH
72372: LD_INT 2
72374: PPUSH
72375: LD_VAR 0 1
72379: PUSH
72380: LD_INT 2
72382: ARRAY
72383: PPUSH
72384: LD_INT 1
72386: PPUSH
72387: CALL_OW 3
72391: PPUSH
72392: CALL_OW 1
72396: ST_TO_ADDR
// tmp := 1 ;
72397: LD_ADDR_VAR 0 2
72401: PUSH
72402: LD_STRING 1
72404: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72405: LD_ADDR_VAR 0 4
72409: PUSH
72410: LD_VAR 0 4
72414: PUSH
72415: LD_VAR 0 2
72419: STR
72420: ST_TO_ADDR
// end ;
72421: GO 72317
72423: POP
72424: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
72425: LD_STRING getStreamItemsFromMission("
72427: PUSH
72428: LD_VAR 0 3
72432: STR
72433: PUSH
72434: LD_STRING ","
72436: STR
72437: PUSH
72438: LD_VAR 0 4
72442: STR
72443: PUSH
72444: LD_STRING ")
72446: STR
72447: PPUSH
72448: CALL_OW 559
// end else
72452: GO 72461
// ToLua ( getStreamItemsFromMission("","") ) ;
72454: LD_STRING getStreamItemsFromMission("","")
72456: PPUSH
72457: CALL_OW 559
// end ;
72461: LD_VAR 0 1
72465: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72466: LD_EXP 105
72470: PUSH
72471: LD_EXP 110
72475: AND
72476: IFFALSE 72600
72478: GO 72480
72480: DISABLE
72481: LD_INT 0
72483: PPUSH
72484: PPUSH
// begin enable ;
72485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72486: LD_ADDR_VAR 0 2
72490: PUSH
72491: LD_INT 22
72493: PUSH
72494: LD_OWVAR 2
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 2
72505: PUSH
72506: LD_INT 34
72508: PUSH
72509: LD_INT 7
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PUSH
72516: LD_INT 34
72518: PUSH
72519: LD_INT 45
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 34
72528: PUSH
72529: LD_INT 28
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 34
72538: PUSH
72539: LD_INT 47
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PPUSH
72557: CALL_OW 69
72561: ST_TO_ADDR
// if not tmp then
72562: LD_VAR 0 2
72566: NOT
72567: IFFALSE 72571
// exit ;
72569: GO 72600
// for i in tmp do
72571: LD_ADDR_VAR 0 1
72575: PUSH
72576: LD_VAR 0 2
72580: PUSH
72581: FOR_IN
72582: IFFALSE 72598
// begin SetLives ( i , 0 ) ;
72584: LD_VAR 0 1
72588: PPUSH
72589: LD_INT 0
72591: PPUSH
72592: CALL_OW 234
// end ;
72596: GO 72581
72598: POP
72599: POP
// end ;
72600: PPOPN 2
72602: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72603: LD_EXP 105
72607: PUSH
72608: LD_EXP 111
72612: AND
72613: IFFALSE 72697
72615: GO 72617
72617: DISABLE
72618: LD_INT 0
72620: PPUSH
72621: PPUSH
// begin enable ;
72622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72623: LD_ADDR_VAR 0 2
72627: PUSH
72628: LD_INT 22
72630: PUSH
72631: LD_OWVAR 2
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 32
72642: PUSH
72643: LD_INT 3
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: PPUSH
72654: CALL_OW 69
72658: ST_TO_ADDR
// if not tmp then
72659: LD_VAR 0 2
72663: NOT
72664: IFFALSE 72668
// exit ;
72666: GO 72697
// for i in tmp do
72668: LD_ADDR_VAR 0 1
72672: PUSH
72673: LD_VAR 0 2
72677: PUSH
72678: FOR_IN
72679: IFFALSE 72695
// begin SetLives ( i , 0 ) ;
72681: LD_VAR 0 1
72685: PPUSH
72686: LD_INT 0
72688: PPUSH
72689: CALL_OW 234
// end ;
72693: GO 72678
72695: POP
72696: POP
// end ;
72697: PPOPN 2
72699: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72700: LD_EXP 105
72704: PUSH
72705: LD_EXP 108
72709: AND
72710: IFFALSE 72803
72712: GO 72714
72714: DISABLE
72715: LD_INT 0
72717: PPUSH
// begin enable ;
72718: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72719: LD_ADDR_VAR 0 1
72723: PUSH
72724: LD_INT 22
72726: PUSH
72727: LD_OWVAR 2
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 2
72738: PUSH
72739: LD_INT 25
72741: PUSH
72742: LD_INT 5
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 25
72751: PUSH
72752: LD_INT 9
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 25
72761: PUSH
72762: LD_INT 8
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PPUSH
72779: CALL_OW 69
72783: PUSH
72784: FOR_IN
72785: IFFALSE 72801
// begin SetClass ( i , 1 ) ;
72787: LD_VAR 0 1
72791: PPUSH
72792: LD_INT 1
72794: PPUSH
72795: CALL_OW 336
// end ;
72799: GO 72784
72801: POP
72802: POP
// end ;
72803: PPOPN 1
72805: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72806: LD_EXP 105
72810: PUSH
72811: LD_EXP 109
72815: AND
72816: PUSH
72817: LD_OWVAR 65
72821: PUSH
72822: LD_INT 7
72824: LESS
72825: AND
72826: IFFALSE 72840
72828: GO 72830
72830: DISABLE
// begin enable ;
72831: ENABLE
// game_speed := 7 ;
72832: LD_ADDR_OWVAR 65
72836: PUSH
72837: LD_INT 7
72839: ST_TO_ADDR
// end ;
72840: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72841: LD_EXP 105
72845: PUSH
72846: LD_EXP 112
72850: AND
72851: IFFALSE 73053
72853: GO 72855
72855: DISABLE
72856: LD_INT 0
72858: PPUSH
72859: PPUSH
72860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72861: LD_ADDR_VAR 0 3
72865: PUSH
72866: LD_INT 81
72868: PUSH
72869: LD_OWVAR 2
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 21
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PPUSH
72892: CALL_OW 69
72896: ST_TO_ADDR
// if not tmp then
72897: LD_VAR 0 3
72901: NOT
72902: IFFALSE 72906
// exit ;
72904: GO 73053
// if tmp > 5 then
72906: LD_VAR 0 3
72910: PUSH
72911: LD_INT 5
72913: GREATER
72914: IFFALSE 72926
// k := 5 else
72916: LD_ADDR_VAR 0 2
72920: PUSH
72921: LD_INT 5
72923: ST_TO_ADDR
72924: GO 72936
// k := tmp ;
72926: LD_ADDR_VAR 0 2
72930: PUSH
72931: LD_VAR 0 3
72935: ST_TO_ADDR
// for i := 1 to k do
72936: LD_ADDR_VAR 0 1
72940: PUSH
72941: DOUBLE
72942: LD_INT 1
72944: DEC
72945: ST_TO_ADDR
72946: LD_VAR 0 2
72950: PUSH
72951: FOR_TO
72952: IFFALSE 73051
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72954: LD_VAR 0 3
72958: PUSH
72959: LD_VAR 0 1
72963: ARRAY
72964: PPUSH
72965: LD_VAR 0 1
72969: PUSH
72970: LD_INT 4
72972: MOD
72973: PUSH
72974: LD_INT 1
72976: PLUS
72977: PPUSH
72978: CALL_OW 259
72982: PUSH
72983: LD_INT 10
72985: LESS
72986: IFFALSE 73049
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
72988: LD_VAR 0 3
72992: PUSH
72993: LD_VAR 0 1
72997: ARRAY
72998: PPUSH
72999: LD_VAR 0 1
73003: PUSH
73004: LD_INT 4
73006: MOD
73007: PUSH
73008: LD_INT 1
73010: PLUS
73011: PPUSH
73012: LD_VAR 0 3
73016: PUSH
73017: LD_VAR 0 1
73021: ARRAY
73022: PPUSH
73023: LD_VAR 0 1
73027: PUSH
73028: LD_INT 4
73030: MOD
73031: PUSH
73032: LD_INT 1
73034: PLUS
73035: PPUSH
73036: CALL_OW 259
73040: PUSH
73041: LD_INT 1
73043: PLUS
73044: PPUSH
73045: CALL_OW 237
73049: GO 72951
73051: POP
73052: POP
// end ;
73053: PPOPN 3
73055: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73056: LD_EXP 105
73060: PUSH
73061: LD_EXP 113
73065: AND
73066: IFFALSE 73086
73068: GO 73070
73070: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73071: LD_INT 4
73073: PPUSH
73074: LD_OWVAR 2
73078: PPUSH
73079: LD_INT 0
73081: PPUSH
73082: CALL_OW 324
73086: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73087: LD_EXP 105
73091: PUSH
73092: LD_EXP 142
73096: AND
73097: IFFALSE 73117
73099: GO 73101
73101: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73102: LD_INT 19
73104: PPUSH
73105: LD_OWVAR 2
73109: PPUSH
73110: LD_INT 0
73112: PPUSH
73113: CALL_OW 324
73117: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73118: LD_EXP 105
73122: PUSH
73123: LD_EXP 114
73127: AND
73128: IFFALSE 73230
73130: GO 73132
73132: DISABLE
73133: LD_INT 0
73135: PPUSH
73136: PPUSH
// begin enable ;
73137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73138: LD_ADDR_VAR 0 2
73142: PUSH
73143: LD_INT 22
73145: PUSH
73146: LD_OWVAR 2
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 2
73157: PUSH
73158: LD_INT 34
73160: PUSH
73161: LD_INT 11
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 34
73170: PUSH
73171: LD_INT 30
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: LIST
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PPUSH
73187: CALL_OW 69
73191: ST_TO_ADDR
// if not tmp then
73192: LD_VAR 0 2
73196: NOT
73197: IFFALSE 73201
// exit ;
73199: GO 73230
// for i in tmp do
73201: LD_ADDR_VAR 0 1
73205: PUSH
73206: LD_VAR 0 2
73210: PUSH
73211: FOR_IN
73212: IFFALSE 73228
// begin SetLives ( i , 0 ) ;
73214: LD_VAR 0 1
73218: PPUSH
73219: LD_INT 0
73221: PPUSH
73222: CALL_OW 234
// end ;
73226: GO 73211
73228: POP
73229: POP
// end ;
73230: PPOPN 2
73232: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73233: LD_EXP 105
73237: PUSH
73238: LD_EXP 115
73242: AND
73243: IFFALSE 73263
73245: GO 73247
73247: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73248: LD_INT 32
73250: PPUSH
73251: LD_OWVAR 2
73255: PPUSH
73256: LD_INT 0
73258: PPUSH
73259: CALL_OW 324
73263: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73264: LD_EXP 105
73268: PUSH
73269: LD_EXP 116
73273: AND
73274: IFFALSE 73455
73276: GO 73278
73278: DISABLE
73279: LD_INT 0
73281: PPUSH
73282: PPUSH
73283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73284: LD_ADDR_VAR 0 2
73288: PUSH
73289: LD_INT 22
73291: PUSH
73292: LD_OWVAR 2
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 33
73303: PUSH
73304: LD_INT 3
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PPUSH
73315: CALL_OW 69
73319: ST_TO_ADDR
// if not tmp then
73320: LD_VAR 0 2
73324: NOT
73325: IFFALSE 73329
// exit ;
73327: GO 73455
// side := 0 ;
73329: LD_ADDR_VAR 0 3
73333: PUSH
73334: LD_INT 0
73336: ST_TO_ADDR
// for i := 1 to 8 do
73337: LD_ADDR_VAR 0 1
73341: PUSH
73342: DOUBLE
73343: LD_INT 1
73345: DEC
73346: ST_TO_ADDR
73347: LD_INT 8
73349: PUSH
73350: FOR_TO
73351: IFFALSE 73399
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73353: LD_OWVAR 2
73357: PUSH
73358: LD_VAR 0 1
73362: NONEQUAL
73363: PUSH
73364: LD_OWVAR 2
73368: PPUSH
73369: LD_VAR 0 1
73373: PPUSH
73374: CALL_OW 81
73378: PUSH
73379: LD_INT 2
73381: EQUAL
73382: AND
73383: IFFALSE 73397
// begin side := i ;
73385: LD_ADDR_VAR 0 3
73389: PUSH
73390: LD_VAR 0 1
73394: ST_TO_ADDR
// break ;
73395: GO 73399
// end ;
73397: GO 73350
73399: POP
73400: POP
// if not side then
73401: LD_VAR 0 3
73405: NOT
73406: IFFALSE 73410
// exit ;
73408: GO 73455
// for i := 1 to tmp do
73410: LD_ADDR_VAR 0 1
73414: PUSH
73415: DOUBLE
73416: LD_INT 1
73418: DEC
73419: ST_TO_ADDR
73420: LD_VAR 0 2
73424: PUSH
73425: FOR_TO
73426: IFFALSE 73453
// if Prob ( 60 ) then
73428: LD_INT 60
73430: PPUSH
73431: CALL_OW 13
73435: IFFALSE 73451
// SetSide ( i , side ) ;
73437: LD_VAR 0 1
73441: PPUSH
73442: LD_VAR 0 3
73446: PPUSH
73447: CALL_OW 235
73451: GO 73425
73453: POP
73454: POP
// end ;
73455: PPOPN 3
73457: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73458: LD_EXP 105
73462: PUSH
73463: LD_EXP 118
73467: AND
73468: IFFALSE 73587
73470: GO 73472
73472: DISABLE
73473: LD_INT 0
73475: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73476: LD_ADDR_VAR 0 1
73480: PUSH
73481: LD_INT 22
73483: PUSH
73484: LD_OWVAR 2
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 21
73495: PUSH
73496: LD_INT 1
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 3
73505: PUSH
73506: LD_INT 23
73508: PUSH
73509: LD_INT 0
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: LIST
73524: PPUSH
73525: CALL_OW 69
73529: PUSH
73530: FOR_IN
73531: IFFALSE 73585
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73533: LD_VAR 0 1
73537: PPUSH
73538: CALL_OW 257
73542: PUSH
73543: LD_INT 1
73545: PUSH
73546: LD_INT 2
73548: PUSH
73549: LD_INT 3
73551: PUSH
73552: LD_INT 4
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: IN
73561: IFFALSE 73583
// SetClass ( un , rand ( 1 , 4 ) ) ;
73563: LD_VAR 0 1
73567: PPUSH
73568: LD_INT 1
73570: PPUSH
73571: LD_INT 4
73573: PPUSH
73574: CALL_OW 12
73578: PPUSH
73579: CALL_OW 336
73583: GO 73530
73585: POP
73586: POP
// end ;
73587: PPOPN 1
73589: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73590: LD_EXP 105
73594: PUSH
73595: LD_EXP 117
73599: AND
73600: IFFALSE 73679
73602: GO 73604
73604: DISABLE
73605: LD_INT 0
73607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73608: LD_ADDR_VAR 0 1
73612: PUSH
73613: LD_INT 22
73615: PUSH
73616: LD_OWVAR 2
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 21
73627: PUSH
73628: LD_INT 3
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PPUSH
73639: CALL_OW 69
73643: ST_TO_ADDR
// if not tmp then
73644: LD_VAR 0 1
73648: NOT
73649: IFFALSE 73653
// exit ;
73651: GO 73679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73653: LD_VAR 0 1
73657: PUSH
73658: LD_INT 1
73660: PPUSH
73661: LD_VAR 0 1
73665: PPUSH
73666: CALL_OW 12
73670: ARRAY
73671: PPUSH
73672: LD_INT 100
73674: PPUSH
73675: CALL_OW 234
// end ;
73679: PPOPN 1
73681: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73682: LD_EXP 105
73686: PUSH
73687: LD_EXP 119
73691: AND
73692: IFFALSE 73790
73694: GO 73696
73696: DISABLE
73697: LD_INT 0
73699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73700: LD_ADDR_VAR 0 1
73704: PUSH
73705: LD_INT 22
73707: PUSH
73708: LD_OWVAR 2
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 21
73719: PUSH
73720: LD_INT 1
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PPUSH
73731: CALL_OW 69
73735: ST_TO_ADDR
// if not tmp then
73736: LD_VAR 0 1
73740: NOT
73741: IFFALSE 73745
// exit ;
73743: GO 73790
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73745: LD_VAR 0 1
73749: PUSH
73750: LD_INT 1
73752: PPUSH
73753: LD_VAR 0 1
73757: PPUSH
73758: CALL_OW 12
73762: ARRAY
73763: PPUSH
73764: LD_INT 1
73766: PPUSH
73767: LD_INT 4
73769: PPUSH
73770: CALL_OW 12
73774: PPUSH
73775: LD_INT 3000
73777: PPUSH
73778: LD_INT 9000
73780: PPUSH
73781: CALL_OW 12
73785: PPUSH
73786: CALL_OW 492
// end ;
73790: PPOPN 1
73792: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73793: LD_EXP 105
73797: PUSH
73798: LD_EXP 120
73802: AND
73803: IFFALSE 73823
73805: GO 73807
73807: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73808: LD_INT 1
73810: PPUSH
73811: LD_OWVAR 2
73815: PPUSH
73816: LD_INT 0
73818: PPUSH
73819: CALL_OW 324
73823: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73824: LD_EXP 105
73828: PUSH
73829: LD_EXP 121
73833: AND
73834: IFFALSE 73917
73836: GO 73838
73838: DISABLE
73839: LD_INT 0
73841: PPUSH
73842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73843: LD_ADDR_VAR 0 2
73847: PUSH
73848: LD_INT 22
73850: PUSH
73851: LD_OWVAR 2
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 21
73862: PUSH
73863: LD_INT 3
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PPUSH
73874: CALL_OW 69
73878: ST_TO_ADDR
// if not tmp then
73879: LD_VAR 0 2
73883: NOT
73884: IFFALSE 73888
// exit ;
73886: GO 73917
// for i in tmp do
73888: LD_ADDR_VAR 0 1
73892: PUSH
73893: LD_VAR 0 2
73897: PUSH
73898: FOR_IN
73899: IFFALSE 73915
// SetBLevel ( i , 10 ) ;
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_INT 10
73908: PPUSH
73909: CALL_OW 241
73913: GO 73898
73915: POP
73916: POP
// end ;
73917: PPOPN 2
73919: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73920: LD_EXP 105
73924: PUSH
73925: LD_EXP 122
73929: AND
73930: IFFALSE 74041
73932: GO 73934
73934: DISABLE
73935: LD_INT 0
73937: PPUSH
73938: PPUSH
73939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73940: LD_ADDR_VAR 0 3
73944: PUSH
73945: LD_INT 22
73947: PUSH
73948: LD_OWVAR 2
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 25
73959: PUSH
73960: LD_INT 1
73962: PUSH
73963: EMPTY
73964: LIST
73965: LIST
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PPUSH
73971: CALL_OW 69
73975: ST_TO_ADDR
// if not tmp then
73976: LD_VAR 0 3
73980: NOT
73981: IFFALSE 73985
// exit ;
73983: GO 74041
// un := tmp [ rand ( 1 , tmp ) ] ;
73985: LD_ADDR_VAR 0 2
73989: PUSH
73990: LD_VAR 0 3
73994: PUSH
73995: LD_INT 1
73997: PPUSH
73998: LD_VAR 0 3
74002: PPUSH
74003: CALL_OW 12
74007: ARRAY
74008: ST_TO_ADDR
// if Crawls ( un ) then
74009: LD_VAR 0 2
74013: PPUSH
74014: CALL_OW 318
74018: IFFALSE 74029
// ComWalk ( un ) ;
74020: LD_VAR 0 2
74024: PPUSH
74025: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74029: LD_VAR 0 2
74033: PPUSH
74034: LD_INT 5
74036: PPUSH
74037: CALL_OW 336
// end ;
74041: PPOPN 3
74043: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
74044: LD_EXP 105
74048: PUSH
74049: LD_EXP 123
74053: AND
74054: PUSH
74055: LD_OWVAR 67
74059: PUSH
74060: LD_INT 3
74062: LESS
74063: AND
74064: IFFALSE 74083
74066: GO 74068
74068: DISABLE
// Difficulty := Difficulty + 1 ;
74069: LD_ADDR_OWVAR 67
74073: PUSH
74074: LD_OWVAR 67
74078: PUSH
74079: LD_INT 1
74081: PLUS
74082: ST_TO_ADDR
74083: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74084: LD_EXP 105
74088: PUSH
74089: LD_EXP 124
74093: AND
74094: IFFALSE 74197
74096: GO 74098
74098: DISABLE
74099: LD_INT 0
74101: PPUSH
// begin for i := 1 to 5 do
74102: LD_ADDR_VAR 0 1
74106: PUSH
74107: DOUBLE
74108: LD_INT 1
74110: DEC
74111: ST_TO_ADDR
74112: LD_INT 5
74114: PUSH
74115: FOR_TO
74116: IFFALSE 74195
// begin uc_nation := nation_nature ;
74118: LD_ADDR_OWVAR 21
74122: PUSH
74123: LD_INT 0
74125: ST_TO_ADDR
// uc_side := 0 ;
74126: LD_ADDR_OWVAR 20
74130: PUSH
74131: LD_INT 0
74133: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74134: LD_ADDR_OWVAR 29
74138: PUSH
74139: LD_INT 12
74141: PUSH
74142: LD_INT 12
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: ST_TO_ADDR
// hc_agressivity := 20 ;
74149: LD_ADDR_OWVAR 35
74153: PUSH
74154: LD_INT 20
74156: ST_TO_ADDR
// hc_class := class_tiger ;
74157: LD_ADDR_OWVAR 28
74161: PUSH
74162: LD_INT 14
74164: ST_TO_ADDR
// hc_gallery :=  ;
74165: LD_ADDR_OWVAR 33
74169: PUSH
74170: LD_STRING 
74172: ST_TO_ADDR
// hc_name :=  ;
74173: LD_ADDR_OWVAR 26
74177: PUSH
74178: LD_STRING 
74180: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74181: CALL_OW 44
74185: PPUSH
74186: LD_INT 0
74188: PPUSH
74189: CALL_OW 51
// end ;
74193: GO 74115
74195: POP
74196: POP
// end ;
74197: PPOPN 1
74199: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74200: LD_EXP 105
74204: PUSH
74205: LD_EXP 125
74209: AND
74210: IFFALSE 74219
74212: GO 74214
74214: DISABLE
// StreamSibBomb ;
74215: CALL 74220 0 0
74219: END
// export function StreamSibBomb ; var i , x , y ; begin
74220: LD_INT 0
74222: PPUSH
74223: PPUSH
74224: PPUSH
74225: PPUSH
// result := false ;
74226: LD_ADDR_VAR 0 1
74230: PUSH
74231: LD_INT 0
74233: ST_TO_ADDR
// for i := 1 to 16 do
74234: LD_ADDR_VAR 0 2
74238: PUSH
74239: DOUBLE
74240: LD_INT 1
74242: DEC
74243: ST_TO_ADDR
74244: LD_INT 16
74246: PUSH
74247: FOR_TO
74248: IFFALSE 74447
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74250: LD_ADDR_VAR 0 3
74254: PUSH
74255: LD_INT 10
74257: PUSH
74258: LD_INT 20
74260: PUSH
74261: LD_INT 30
74263: PUSH
74264: LD_INT 40
74266: PUSH
74267: LD_INT 50
74269: PUSH
74270: LD_INT 60
74272: PUSH
74273: LD_INT 70
74275: PUSH
74276: LD_INT 80
74278: PUSH
74279: LD_INT 90
74281: PUSH
74282: LD_INT 100
74284: PUSH
74285: LD_INT 110
74287: PUSH
74288: LD_INT 120
74290: PUSH
74291: LD_INT 130
74293: PUSH
74294: LD_INT 140
74296: PUSH
74297: LD_INT 150
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 1
74319: PPUSH
74320: LD_INT 15
74322: PPUSH
74323: CALL_OW 12
74327: ARRAY
74328: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74329: LD_ADDR_VAR 0 4
74333: PUSH
74334: LD_INT 10
74336: PUSH
74337: LD_INT 20
74339: PUSH
74340: LD_INT 30
74342: PUSH
74343: LD_INT 40
74345: PUSH
74346: LD_INT 50
74348: PUSH
74349: LD_INT 60
74351: PUSH
74352: LD_INT 70
74354: PUSH
74355: LD_INT 80
74357: PUSH
74358: LD_INT 90
74360: PUSH
74361: LD_INT 100
74363: PUSH
74364: LD_INT 110
74366: PUSH
74367: LD_INT 120
74369: PUSH
74370: LD_INT 130
74372: PUSH
74373: LD_INT 140
74375: PUSH
74376: LD_INT 150
74378: PUSH
74379: EMPTY
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 1
74398: PPUSH
74399: LD_INT 15
74401: PPUSH
74402: CALL_OW 12
74406: ARRAY
74407: ST_TO_ADDR
// if ValidHex ( x , y ) then
74408: LD_VAR 0 3
74412: PPUSH
74413: LD_VAR 0 4
74417: PPUSH
74418: CALL_OW 488
74422: IFFALSE 74445
// begin result := [ x , y ] ;
74424: LD_ADDR_VAR 0 1
74428: PUSH
74429: LD_VAR 0 3
74433: PUSH
74434: LD_VAR 0 4
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: ST_TO_ADDR
// break ;
74443: GO 74447
// end ; end ;
74445: GO 74247
74447: POP
74448: POP
// if result then
74449: LD_VAR 0 1
74453: IFFALSE 74513
// begin ToLua ( playSibBomb() ) ;
74455: LD_STRING playSibBomb()
74457: PPUSH
74458: CALL_OW 559
// wait ( 0 0$14 ) ;
74462: LD_INT 490
74464: PPUSH
74465: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74469: LD_VAR 0 1
74473: PUSH
74474: LD_INT 1
74476: ARRAY
74477: PPUSH
74478: LD_VAR 0 1
74482: PUSH
74483: LD_INT 2
74485: ARRAY
74486: PPUSH
74487: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74491: LD_VAR 0 1
74495: PUSH
74496: LD_INT 1
74498: ARRAY
74499: PPUSH
74500: LD_VAR 0 1
74504: PUSH
74505: LD_INT 2
74507: ARRAY
74508: PPUSH
74509: CALL_OW 429
// end ; end ;
74513: LD_VAR 0 1
74517: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74518: LD_EXP 105
74522: PUSH
74523: LD_EXP 127
74527: AND
74528: IFFALSE 74540
74530: GO 74532
74532: DISABLE
// YouLost (  ) ;
74533: LD_STRING 
74535: PPUSH
74536: CALL_OW 104
74540: END
// every 0 0$1 trigger StreamModeActive and sFog do
74541: LD_EXP 105
74545: PUSH
74546: LD_EXP 126
74550: AND
74551: IFFALSE 74565
74553: GO 74555
74555: DISABLE
// FogOff ( your_side ) ;
74556: LD_OWVAR 2
74560: PPUSH
74561: CALL_OW 344
74565: END
// every 0 0$1 trigger StreamModeActive and sSun do
74566: LD_EXP 105
74570: PUSH
74571: LD_EXP 128
74575: AND
74576: IFFALSE 74604
74578: GO 74580
74580: DISABLE
// begin solar_recharge_percent := 0 ;
74581: LD_ADDR_OWVAR 79
74585: PUSH
74586: LD_INT 0
74588: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74589: LD_INT 10500
74591: PPUSH
74592: CALL_OW 67
// solar_recharge_percent := 100 ;
74596: LD_ADDR_OWVAR 79
74600: PUSH
74601: LD_INT 100
74603: ST_TO_ADDR
// end ;
74604: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74605: LD_EXP 105
74609: PUSH
74610: LD_EXP 129
74614: AND
74615: IFFALSE 74854
74617: GO 74619
74619: DISABLE
74620: LD_INT 0
74622: PPUSH
74623: PPUSH
74624: PPUSH
// begin tmp := [ ] ;
74625: LD_ADDR_VAR 0 3
74629: PUSH
74630: EMPTY
74631: ST_TO_ADDR
// for i := 1 to 6 do
74632: LD_ADDR_VAR 0 1
74636: PUSH
74637: DOUBLE
74638: LD_INT 1
74640: DEC
74641: ST_TO_ADDR
74642: LD_INT 6
74644: PUSH
74645: FOR_TO
74646: IFFALSE 74751
// begin uc_nation := nation_nature ;
74648: LD_ADDR_OWVAR 21
74652: PUSH
74653: LD_INT 0
74655: ST_TO_ADDR
// uc_side := 0 ;
74656: LD_ADDR_OWVAR 20
74660: PUSH
74661: LD_INT 0
74663: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74664: LD_ADDR_OWVAR 29
74668: PUSH
74669: LD_INT 12
74671: PUSH
74672: LD_INT 12
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: ST_TO_ADDR
// hc_agressivity := 20 ;
74679: LD_ADDR_OWVAR 35
74683: PUSH
74684: LD_INT 20
74686: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74687: LD_ADDR_OWVAR 28
74691: PUSH
74692: LD_INT 17
74694: ST_TO_ADDR
// hc_gallery :=  ;
74695: LD_ADDR_OWVAR 33
74699: PUSH
74700: LD_STRING 
74702: ST_TO_ADDR
// hc_name :=  ;
74703: LD_ADDR_OWVAR 26
74707: PUSH
74708: LD_STRING 
74710: ST_TO_ADDR
// un := CreateHuman ;
74711: LD_ADDR_VAR 0 2
74715: PUSH
74716: CALL_OW 44
74720: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74721: LD_VAR 0 2
74725: PPUSH
74726: LD_INT 1
74728: PPUSH
74729: CALL_OW 51
// tmp := tmp ^ un ;
74733: LD_ADDR_VAR 0 3
74737: PUSH
74738: LD_VAR 0 3
74742: PUSH
74743: LD_VAR 0 2
74747: ADD
74748: ST_TO_ADDR
// end ;
74749: GO 74645
74751: POP
74752: POP
// repeat wait ( 0 0$1 ) ;
74753: LD_INT 35
74755: PPUSH
74756: CALL_OW 67
// for un in tmp do
74760: LD_ADDR_VAR 0 2
74764: PUSH
74765: LD_VAR 0 3
74769: PUSH
74770: FOR_IN
74771: IFFALSE 74845
// begin if IsDead ( un ) then
74773: LD_VAR 0 2
74777: PPUSH
74778: CALL_OW 301
74782: IFFALSE 74802
// begin tmp := tmp diff un ;
74784: LD_ADDR_VAR 0 3
74788: PUSH
74789: LD_VAR 0 3
74793: PUSH
74794: LD_VAR 0 2
74798: DIFF
74799: ST_TO_ADDR
// continue ;
74800: GO 74770
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74802: LD_VAR 0 2
74806: PPUSH
74807: LD_INT 3
74809: PUSH
74810: LD_INT 22
74812: PUSH
74813: LD_INT 0
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PPUSH
74824: CALL_OW 69
74828: PPUSH
74829: LD_VAR 0 2
74833: PPUSH
74834: CALL_OW 74
74838: PPUSH
74839: CALL_OW 115
// end ;
74843: GO 74770
74845: POP
74846: POP
// until not tmp ;
74847: LD_VAR 0 3
74851: NOT
74852: IFFALSE 74753
// end ;
74854: PPOPN 3
74856: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74857: LD_EXP 105
74861: PUSH
74862: LD_EXP 130
74866: AND
74867: IFFALSE 74921
74869: GO 74871
74871: DISABLE
// begin ToLua ( displayTroll(); ) ;
74872: LD_STRING displayTroll();
74874: PPUSH
74875: CALL_OW 559
// wait ( 3 3$00 ) ;
74879: LD_INT 6300
74881: PPUSH
74882: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74886: LD_STRING hideTroll();
74888: PPUSH
74889: CALL_OW 559
// wait ( 1 1$00 ) ;
74893: LD_INT 2100
74895: PPUSH
74896: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74900: LD_STRING displayTroll();
74902: PPUSH
74903: CALL_OW 559
// wait ( 1 1$00 ) ;
74907: LD_INT 2100
74909: PPUSH
74910: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74914: LD_STRING hideTroll();
74916: PPUSH
74917: CALL_OW 559
// end ;
74921: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74922: LD_EXP 105
74926: PUSH
74927: LD_EXP 131
74931: AND
74932: IFFALSE 74995
74934: GO 74936
74936: DISABLE
74937: LD_INT 0
74939: PPUSH
// begin p := 0 ;
74940: LD_ADDR_VAR 0 1
74944: PUSH
74945: LD_INT 0
74947: ST_TO_ADDR
// repeat game_speed := 1 ;
74948: LD_ADDR_OWVAR 65
74952: PUSH
74953: LD_INT 1
74955: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74956: LD_INT 35
74958: PPUSH
74959: CALL_OW 67
// p := p + 1 ;
74963: LD_ADDR_VAR 0 1
74967: PUSH
74968: LD_VAR 0 1
74972: PUSH
74973: LD_INT 1
74975: PLUS
74976: ST_TO_ADDR
// until p >= 60 ;
74977: LD_VAR 0 1
74981: PUSH
74982: LD_INT 60
74984: GREATEREQUAL
74985: IFFALSE 74948
// game_speed := 4 ;
74987: LD_ADDR_OWVAR 65
74991: PUSH
74992: LD_INT 4
74994: ST_TO_ADDR
// end ;
74995: PPOPN 1
74997: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
74998: LD_EXP 105
75002: PUSH
75003: LD_EXP 132
75007: AND
75008: IFFALSE 75154
75010: GO 75012
75012: DISABLE
75013: LD_INT 0
75015: PPUSH
75016: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75017: LD_ADDR_VAR 0 1
75021: PUSH
75022: LD_INT 22
75024: PUSH
75025: LD_OWVAR 2
75029: PUSH
75030: EMPTY
75031: LIST
75032: LIST
75033: PUSH
75034: LD_INT 2
75036: PUSH
75037: LD_INT 30
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 30
75049: PUSH
75050: LD_INT 1
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: LIST
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PPUSH
75066: CALL_OW 69
75070: ST_TO_ADDR
// if not depot then
75071: LD_VAR 0 1
75075: NOT
75076: IFFALSE 75080
// exit ;
75078: GO 75154
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75080: LD_ADDR_VAR 0 2
75084: PUSH
75085: LD_VAR 0 1
75089: PUSH
75090: LD_INT 1
75092: PPUSH
75093: LD_VAR 0 1
75097: PPUSH
75098: CALL_OW 12
75102: ARRAY
75103: PPUSH
75104: CALL_OW 274
75108: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75109: LD_VAR 0 2
75113: PPUSH
75114: LD_INT 1
75116: PPUSH
75117: LD_INT 0
75119: PPUSH
75120: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75124: LD_VAR 0 2
75128: PPUSH
75129: LD_INT 2
75131: PPUSH
75132: LD_INT 0
75134: PPUSH
75135: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75139: LD_VAR 0 2
75143: PPUSH
75144: LD_INT 3
75146: PPUSH
75147: LD_INT 0
75149: PPUSH
75150: CALL_OW 277
// end ;
75154: PPOPN 2
75156: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75157: LD_EXP 105
75161: PUSH
75162: LD_EXP 133
75166: AND
75167: IFFALSE 75264
75169: GO 75171
75171: DISABLE
75172: LD_INT 0
75174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75175: LD_ADDR_VAR 0 1
75179: PUSH
75180: LD_INT 22
75182: PUSH
75183: LD_OWVAR 2
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 21
75194: PUSH
75195: LD_INT 1
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 3
75204: PUSH
75205: LD_INT 23
75207: PUSH
75208: LD_INT 0
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: LIST
75223: PPUSH
75224: CALL_OW 69
75228: ST_TO_ADDR
// if not tmp then
75229: LD_VAR 0 1
75233: NOT
75234: IFFALSE 75238
// exit ;
75236: GO 75264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75238: LD_VAR 0 1
75242: PUSH
75243: LD_INT 1
75245: PPUSH
75246: LD_VAR 0 1
75250: PPUSH
75251: CALL_OW 12
75255: ARRAY
75256: PPUSH
75257: LD_INT 200
75259: PPUSH
75260: CALL_OW 234
// end ;
75264: PPOPN 1
75266: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75267: LD_EXP 105
75271: PUSH
75272: LD_EXP 134
75276: AND
75277: IFFALSE 75356
75279: GO 75281
75281: DISABLE
75282: LD_INT 0
75284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75285: LD_ADDR_VAR 0 1
75289: PUSH
75290: LD_INT 22
75292: PUSH
75293: LD_OWVAR 2
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 21
75304: PUSH
75305: LD_INT 2
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PPUSH
75316: CALL_OW 69
75320: ST_TO_ADDR
// if not tmp then
75321: LD_VAR 0 1
75325: NOT
75326: IFFALSE 75330
// exit ;
75328: GO 75356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75330: LD_VAR 0 1
75334: PUSH
75335: LD_INT 1
75337: PPUSH
75338: LD_VAR 0 1
75342: PPUSH
75343: CALL_OW 12
75347: ARRAY
75348: PPUSH
75349: LD_INT 60
75351: PPUSH
75352: CALL_OW 234
// end ;
75356: PPOPN 1
75358: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75359: LD_EXP 105
75363: PUSH
75364: LD_EXP 135
75368: AND
75369: IFFALSE 75468
75371: GO 75373
75373: DISABLE
75374: LD_INT 0
75376: PPUSH
75377: PPUSH
// begin enable ;
75378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75379: LD_ADDR_VAR 0 1
75383: PUSH
75384: LD_INT 22
75386: PUSH
75387: LD_OWVAR 2
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: LD_INT 61
75398: PUSH
75399: EMPTY
75400: LIST
75401: PUSH
75402: LD_INT 33
75404: PUSH
75405: LD_INT 2
75407: PUSH
75408: EMPTY
75409: LIST
75410: LIST
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: PPUSH
75417: CALL_OW 69
75421: ST_TO_ADDR
// if not tmp then
75422: LD_VAR 0 1
75426: NOT
75427: IFFALSE 75431
// exit ;
75429: GO 75468
// for i in tmp do
75431: LD_ADDR_VAR 0 2
75435: PUSH
75436: LD_VAR 0 1
75440: PUSH
75441: FOR_IN
75442: IFFALSE 75466
// if IsControledBy ( i ) then
75444: LD_VAR 0 2
75448: PPUSH
75449: CALL_OW 312
75453: IFFALSE 75464
// ComUnlink ( i ) ;
75455: LD_VAR 0 2
75459: PPUSH
75460: CALL_OW 136
75464: GO 75441
75466: POP
75467: POP
// end ;
75468: PPOPN 2
75470: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75471: LD_EXP 105
75475: PUSH
75476: LD_EXP 136
75480: AND
75481: IFFALSE 75621
75483: GO 75485
75485: DISABLE
75486: LD_INT 0
75488: PPUSH
75489: PPUSH
// begin ToLua ( displayPowell(); ) ;
75490: LD_STRING displayPowell();
75492: PPUSH
75493: CALL_OW 559
// uc_side := 0 ;
75497: LD_ADDR_OWVAR 20
75501: PUSH
75502: LD_INT 0
75504: ST_TO_ADDR
// uc_nation := 2 ;
75505: LD_ADDR_OWVAR 21
75509: PUSH
75510: LD_INT 2
75512: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75513: LD_ADDR_OWVAR 37
75517: PUSH
75518: LD_INT 14
75520: ST_TO_ADDR
// vc_engine := engine_siberite ;
75521: LD_ADDR_OWVAR 39
75525: PUSH
75526: LD_INT 3
75528: ST_TO_ADDR
// vc_control := control_apeman ;
75529: LD_ADDR_OWVAR 38
75533: PUSH
75534: LD_INT 5
75536: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75537: LD_ADDR_OWVAR 40
75541: PUSH
75542: LD_INT 29
75544: ST_TO_ADDR
// un := CreateVehicle ;
75545: LD_ADDR_VAR 0 2
75549: PUSH
75550: CALL_OW 45
75554: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75555: LD_VAR 0 2
75559: PPUSH
75560: LD_INT 1
75562: PPUSH
75563: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75567: LD_INT 35
75569: PPUSH
75570: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75574: LD_VAR 0 2
75578: PPUSH
75579: LD_INT 22
75581: PUSH
75582: LD_OWVAR 2
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: PPUSH
75591: CALL_OW 69
75595: PPUSH
75596: LD_VAR 0 2
75600: PPUSH
75601: CALL_OW 74
75605: PPUSH
75606: CALL_OW 115
// until IsDead ( un ) ;
75610: LD_VAR 0 2
75614: PPUSH
75615: CALL_OW 301
75619: IFFALSE 75567
// end ;
75621: PPOPN 2
75623: END
// every 0 0$1 trigger StreamModeActive and sStu do
75624: LD_EXP 105
75628: PUSH
75629: LD_EXP 144
75633: AND
75634: IFFALSE 75650
75636: GO 75638
75638: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75639: LD_STRING displayStucuk();
75641: PPUSH
75642: CALL_OW 559
// ResetFog ;
75646: CALL_OW 335
// end ;
75650: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75651: LD_EXP 105
75655: PUSH
75656: LD_EXP 137
75660: AND
75661: IFFALSE 75802
75663: GO 75665
75665: DISABLE
75666: LD_INT 0
75668: PPUSH
75669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75670: LD_ADDR_VAR 0 2
75674: PUSH
75675: LD_INT 22
75677: PUSH
75678: LD_OWVAR 2
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PUSH
75687: LD_INT 21
75689: PUSH
75690: LD_INT 1
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: PUSH
75697: EMPTY
75698: LIST
75699: LIST
75700: PPUSH
75701: CALL_OW 69
75705: ST_TO_ADDR
// if not tmp then
75706: LD_VAR 0 2
75710: NOT
75711: IFFALSE 75715
// exit ;
75713: GO 75802
// un := tmp [ rand ( 1 , tmp ) ] ;
75715: LD_ADDR_VAR 0 1
75719: PUSH
75720: LD_VAR 0 2
75724: PUSH
75725: LD_INT 1
75727: PPUSH
75728: LD_VAR 0 2
75732: PPUSH
75733: CALL_OW 12
75737: ARRAY
75738: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75739: LD_VAR 0 1
75743: PPUSH
75744: LD_INT 0
75746: PPUSH
75747: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75751: LD_VAR 0 1
75755: PPUSH
75756: LD_OWVAR 3
75760: PUSH
75761: LD_VAR 0 1
75765: DIFF
75766: PPUSH
75767: LD_VAR 0 1
75771: PPUSH
75772: CALL_OW 74
75776: PPUSH
75777: CALL_OW 115
// wait ( 0 0$20 ) ;
75781: LD_INT 700
75783: PPUSH
75784: CALL_OW 67
// SetSide ( un , your_side ) ;
75788: LD_VAR 0 1
75792: PPUSH
75793: LD_OWVAR 2
75797: PPUSH
75798: CALL_OW 235
// end ;
75802: PPOPN 2
75804: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75805: LD_EXP 105
75809: PUSH
75810: LD_EXP 138
75814: AND
75815: IFFALSE 75921
75817: GO 75819
75819: DISABLE
75820: LD_INT 0
75822: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75823: LD_ADDR_VAR 0 1
75827: PUSH
75828: LD_INT 22
75830: PUSH
75831: LD_OWVAR 2
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: LD_INT 2
75842: PUSH
75843: LD_INT 30
75845: PUSH
75846: LD_INT 0
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 30
75855: PUSH
75856: LD_INT 1
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: LIST
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: PPUSH
75872: CALL_OW 69
75876: ST_TO_ADDR
// if not depot then
75877: LD_VAR 0 1
75881: NOT
75882: IFFALSE 75886
// exit ;
75884: GO 75921
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75886: LD_VAR 0 1
75890: PUSH
75891: LD_INT 1
75893: ARRAY
75894: PPUSH
75895: CALL_OW 250
75899: PPUSH
75900: LD_VAR 0 1
75904: PUSH
75905: LD_INT 1
75907: ARRAY
75908: PPUSH
75909: CALL_OW 251
75913: PPUSH
75914: LD_INT 70
75916: PPUSH
75917: CALL_OW 495
// end ;
75921: PPOPN 1
75923: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75924: LD_EXP 105
75928: PUSH
75929: LD_EXP 139
75933: AND
75934: IFFALSE 76145
75936: GO 75938
75938: DISABLE
75939: LD_INT 0
75941: PPUSH
75942: PPUSH
75943: PPUSH
75944: PPUSH
75945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75946: LD_ADDR_VAR 0 5
75950: PUSH
75951: LD_INT 22
75953: PUSH
75954: LD_OWVAR 2
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 21
75965: PUSH
75966: LD_INT 1
75968: PUSH
75969: EMPTY
75970: LIST
75971: LIST
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PPUSH
75977: CALL_OW 69
75981: ST_TO_ADDR
// if not tmp then
75982: LD_VAR 0 5
75986: NOT
75987: IFFALSE 75991
// exit ;
75989: GO 76145
// for i in tmp do
75991: LD_ADDR_VAR 0 1
75995: PUSH
75996: LD_VAR 0 5
76000: PUSH
76001: FOR_IN
76002: IFFALSE 76143
// begin d := rand ( 0 , 5 ) ;
76004: LD_ADDR_VAR 0 4
76008: PUSH
76009: LD_INT 0
76011: PPUSH
76012: LD_INT 5
76014: PPUSH
76015: CALL_OW 12
76019: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76020: LD_ADDR_VAR 0 2
76024: PUSH
76025: LD_VAR 0 1
76029: PPUSH
76030: CALL_OW 250
76034: PPUSH
76035: LD_VAR 0 4
76039: PPUSH
76040: LD_INT 3
76042: PPUSH
76043: LD_INT 12
76045: PPUSH
76046: CALL_OW 12
76050: PPUSH
76051: CALL_OW 272
76055: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76056: LD_ADDR_VAR 0 3
76060: PUSH
76061: LD_VAR 0 1
76065: PPUSH
76066: CALL_OW 251
76070: PPUSH
76071: LD_VAR 0 4
76075: PPUSH
76076: LD_INT 3
76078: PPUSH
76079: LD_INT 12
76081: PPUSH
76082: CALL_OW 12
76086: PPUSH
76087: CALL_OW 273
76091: ST_TO_ADDR
// if ValidHex ( x , y ) then
76092: LD_VAR 0 2
76096: PPUSH
76097: LD_VAR 0 3
76101: PPUSH
76102: CALL_OW 488
76106: IFFALSE 76141
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76108: LD_VAR 0 1
76112: PPUSH
76113: LD_VAR 0 2
76117: PPUSH
76118: LD_VAR 0 3
76122: PPUSH
76123: LD_INT 3
76125: PPUSH
76126: LD_INT 6
76128: PPUSH
76129: CALL_OW 12
76133: PPUSH
76134: LD_INT 1
76136: PPUSH
76137: CALL_OW 483
// end ;
76141: GO 76001
76143: POP
76144: POP
// end ;
76145: PPOPN 5
76147: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76148: LD_EXP 105
76152: PUSH
76153: LD_EXP 140
76157: AND
76158: IFFALSE 76252
76160: GO 76162
76162: DISABLE
76163: LD_INT 0
76165: PPUSH
76166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76167: LD_ADDR_VAR 0 2
76171: PUSH
76172: LD_INT 22
76174: PUSH
76175: LD_OWVAR 2
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 32
76186: PUSH
76187: LD_INT 1
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 21
76196: PUSH
76197: LD_INT 2
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: LIST
76208: PPUSH
76209: CALL_OW 69
76213: ST_TO_ADDR
// if not tmp then
76214: LD_VAR 0 2
76218: NOT
76219: IFFALSE 76223
// exit ;
76221: GO 76252
// for i in tmp do
76223: LD_ADDR_VAR 0 1
76227: PUSH
76228: LD_VAR 0 2
76232: PUSH
76233: FOR_IN
76234: IFFALSE 76250
// SetFuel ( i , 0 ) ;
76236: LD_VAR 0 1
76240: PPUSH
76241: LD_INT 0
76243: PPUSH
76244: CALL_OW 240
76248: GO 76233
76250: POP
76251: POP
// end ;
76252: PPOPN 2
76254: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76255: LD_EXP 105
76259: PUSH
76260: LD_EXP 141
76264: AND
76265: IFFALSE 76331
76267: GO 76269
76269: DISABLE
76270: LD_INT 0
76272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76273: LD_ADDR_VAR 0 1
76277: PUSH
76278: LD_INT 22
76280: PUSH
76281: LD_OWVAR 2
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: PUSH
76290: LD_INT 30
76292: PUSH
76293: LD_INT 29
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: PUSH
76300: EMPTY
76301: LIST
76302: LIST
76303: PPUSH
76304: CALL_OW 69
76308: ST_TO_ADDR
// if not tmp then
76309: LD_VAR 0 1
76313: NOT
76314: IFFALSE 76318
// exit ;
76316: GO 76331
// DestroyUnit ( tmp [ 1 ] ) ;
76318: LD_VAR 0 1
76322: PUSH
76323: LD_INT 1
76325: ARRAY
76326: PPUSH
76327: CALL_OW 65
// end ;
76331: PPOPN 1
76333: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76334: LD_EXP 105
76338: PUSH
76339: LD_EXP 143
76343: AND
76344: IFFALSE 76473
76346: GO 76348
76348: DISABLE
76349: LD_INT 0
76351: PPUSH
// begin uc_side := 0 ;
76352: LD_ADDR_OWVAR 20
76356: PUSH
76357: LD_INT 0
76359: ST_TO_ADDR
// uc_nation := nation_arabian ;
76360: LD_ADDR_OWVAR 21
76364: PUSH
76365: LD_INT 2
76367: ST_TO_ADDR
// hc_gallery :=  ;
76368: LD_ADDR_OWVAR 33
76372: PUSH
76373: LD_STRING 
76375: ST_TO_ADDR
// hc_name :=  ;
76376: LD_ADDR_OWVAR 26
76380: PUSH
76381: LD_STRING 
76383: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76384: LD_INT 1
76386: PPUSH
76387: LD_INT 11
76389: PPUSH
76390: LD_INT 10
76392: PPUSH
76393: CALL_OW 380
// un := CreateHuman ;
76397: LD_ADDR_VAR 0 1
76401: PUSH
76402: CALL_OW 44
76406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76407: LD_VAR 0 1
76411: PPUSH
76412: LD_INT 1
76414: PPUSH
76415: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76419: LD_INT 35
76421: PPUSH
76422: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76426: LD_VAR 0 1
76430: PPUSH
76431: LD_INT 22
76433: PUSH
76434: LD_OWVAR 2
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PPUSH
76443: CALL_OW 69
76447: PPUSH
76448: LD_VAR 0 1
76452: PPUSH
76453: CALL_OW 74
76457: PPUSH
76458: CALL_OW 115
// until IsDead ( un ) ;
76462: LD_VAR 0 1
76466: PPUSH
76467: CALL_OW 301
76471: IFFALSE 76419
// end ;
76473: PPOPN 1
76475: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76476: LD_EXP 105
76480: PUSH
76481: LD_EXP 145
76485: AND
76486: IFFALSE 76498
76488: GO 76490
76490: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76491: LD_STRING earthquake(getX(game), 0, 32)
76493: PPUSH
76494: CALL_OW 559
76498: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76499: LD_EXP 105
76503: PUSH
76504: LD_EXP 146
76508: AND
76509: IFFALSE 76600
76511: GO 76513
76513: DISABLE
76514: LD_INT 0
76516: PPUSH
// begin enable ;
76517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76518: LD_ADDR_VAR 0 1
76522: PUSH
76523: LD_INT 22
76525: PUSH
76526: LD_OWVAR 2
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: PUSH
76535: LD_INT 21
76537: PUSH
76538: LD_INT 2
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PUSH
76545: LD_INT 33
76547: PUSH
76548: LD_INT 3
76550: PUSH
76551: EMPTY
76552: LIST
76553: LIST
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: LIST
76559: PPUSH
76560: CALL_OW 69
76564: ST_TO_ADDR
// if not tmp then
76565: LD_VAR 0 1
76569: NOT
76570: IFFALSE 76574
// exit ;
76572: GO 76600
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76574: LD_VAR 0 1
76578: PUSH
76579: LD_INT 1
76581: PPUSH
76582: LD_VAR 0 1
76586: PPUSH
76587: CALL_OW 12
76591: ARRAY
76592: PPUSH
76593: LD_INT 1
76595: PPUSH
76596: CALL_OW 234
// end ;
76600: PPOPN 1
76602: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76603: LD_EXP 105
76607: PUSH
76608: LD_EXP 147
76612: AND
76613: IFFALSE 76754
76615: GO 76617
76617: DISABLE
76618: LD_INT 0
76620: PPUSH
76621: PPUSH
76622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76623: LD_ADDR_VAR 0 3
76627: PUSH
76628: LD_INT 22
76630: PUSH
76631: LD_OWVAR 2
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 25
76642: PUSH
76643: LD_INT 1
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PPUSH
76654: CALL_OW 69
76658: ST_TO_ADDR
// if not tmp then
76659: LD_VAR 0 3
76663: NOT
76664: IFFALSE 76668
// exit ;
76666: GO 76754
// un := tmp [ rand ( 1 , tmp ) ] ;
76668: LD_ADDR_VAR 0 2
76672: PUSH
76673: LD_VAR 0 3
76677: PUSH
76678: LD_INT 1
76680: PPUSH
76681: LD_VAR 0 3
76685: PPUSH
76686: CALL_OW 12
76690: ARRAY
76691: ST_TO_ADDR
// if Crawls ( un ) then
76692: LD_VAR 0 2
76696: PPUSH
76697: CALL_OW 318
76701: IFFALSE 76712
// ComWalk ( un ) ;
76703: LD_VAR 0 2
76707: PPUSH
76708: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76712: LD_VAR 0 2
76716: PPUSH
76717: LD_INT 9
76719: PPUSH
76720: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76724: LD_INT 28
76726: PPUSH
76727: LD_OWVAR 2
76731: PPUSH
76732: LD_INT 2
76734: PPUSH
76735: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76739: LD_INT 29
76741: PPUSH
76742: LD_OWVAR 2
76746: PPUSH
76747: LD_INT 2
76749: PPUSH
76750: CALL_OW 322
// end ;
76754: PPOPN 3
76756: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76757: LD_EXP 105
76761: PUSH
76762: LD_EXP 148
76766: AND
76767: IFFALSE 76878
76769: GO 76771
76771: DISABLE
76772: LD_INT 0
76774: PPUSH
76775: PPUSH
76776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76777: LD_ADDR_VAR 0 3
76781: PUSH
76782: LD_INT 22
76784: PUSH
76785: LD_OWVAR 2
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 25
76796: PUSH
76797: LD_INT 1
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PPUSH
76808: CALL_OW 69
76812: ST_TO_ADDR
// if not tmp then
76813: LD_VAR 0 3
76817: NOT
76818: IFFALSE 76822
// exit ;
76820: GO 76878
// un := tmp [ rand ( 1 , tmp ) ] ;
76822: LD_ADDR_VAR 0 2
76826: PUSH
76827: LD_VAR 0 3
76831: PUSH
76832: LD_INT 1
76834: PPUSH
76835: LD_VAR 0 3
76839: PPUSH
76840: CALL_OW 12
76844: ARRAY
76845: ST_TO_ADDR
// if Crawls ( un ) then
76846: LD_VAR 0 2
76850: PPUSH
76851: CALL_OW 318
76855: IFFALSE 76866
// ComWalk ( un ) ;
76857: LD_VAR 0 2
76861: PPUSH
76862: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76866: LD_VAR 0 2
76870: PPUSH
76871: LD_INT 8
76873: PPUSH
76874: CALL_OW 336
// end ;
76878: PPOPN 3
76880: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76881: LD_EXP 105
76885: PUSH
76886: LD_EXP 149
76890: AND
76891: IFFALSE 77035
76893: GO 76895
76895: DISABLE
76896: LD_INT 0
76898: PPUSH
76899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76900: LD_ADDR_VAR 0 2
76904: PUSH
76905: LD_INT 22
76907: PUSH
76908: LD_OWVAR 2
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 21
76919: PUSH
76920: LD_INT 2
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 2
76929: PUSH
76930: LD_INT 34
76932: PUSH
76933: LD_INT 12
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: PUSH
76940: LD_INT 34
76942: PUSH
76943: LD_INT 51
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_INT 34
76952: PUSH
76953: LD_INT 32
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: LIST
76964: LIST
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 69
76975: ST_TO_ADDR
// if not tmp then
76976: LD_VAR 0 2
76980: NOT
76981: IFFALSE 76985
// exit ;
76983: GO 77035
// for i in tmp do
76985: LD_ADDR_VAR 0 1
76989: PUSH
76990: LD_VAR 0 2
76994: PUSH
76995: FOR_IN
76996: IFFALSE 77033
// if GetCargo ( i , mat_artifact ) = 0 then
76998: LD_VAR 0 1
77002: PPUSH
77003: LD_INT 4
77005: PPUSH
77006: CALL_OW 289
77010: PUSH
77011: LD_INT 0
77013: EQUAL
77014: IFFALSE 77031
// SetCargo ( i , mat_siberit , 100 ) ;
77016: LD_VAR 0 1
77020: PPUSH
77021: LD_INT 3
77023: PPUSH
77024: LD_INT 100
77026: PPUSH
77027: CALL_OW 290
77031: GO 76995
77033: POP
77034: POP
// end ;
77035: PPOPN 2
77037: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77038: LD_EXP 105
77042: PUSH
77043: LD_EXP 150
77047: AND
77048: IFFALSE 77231
77050: GO 77052
77052: DISABLE
77053: LD_INT 0
77055: PPUSH
77056: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77057: LD_ADDR_VAR 0 2
77061: PUSH
77062: LD_INT 22
77064: PUSH
77065: LD_OWVAR 2
77069: PUSH
77070: EMPTY
77071: LIST
77072: LIST
77073: PPUSH
77074: CALL_OW 69
77078: ST_TO_ADDR
// if not tmp then
77079: LD_VAR 0 2
77083: NOT
77084: IFFALSE 77088
// exit ;
77086: GO 77231
// for i := 1 to 2 do
77088: LD_ADDR_VAR 0 1
77092: PUSH
77093: DOUBLE
77094: LD_INT 1
77096: DEC
77097: ST_TO_ADDR
77098: LD_INT 2
77100: PUSH
77101: FOR_TO
77102: IFFALSE 77229
// begin uc_side := your_side ;
77104: LD_ADDR_OWVAR 20
77108: PUSH
77109: LD_OWVAR 2
77113: ST_TO_ADDR
// uc_nation := nation_american ;
77114: LD_ADDR_OWVAR 21
77118: PUSH
77119: LD_INT 1
77121: ST_TO_ADDR
// vc_chassis := us_morphling ;
77122: LD_ADDR_OWVAR 37
77126: PUSH
77127: LD_INT 5
77129: ST_TO_ADDR
// vc_engine := engine_siberite ;
77130: LD_ADDR_OWVAR 39
77134: PUSH
77135: LD_INT 3
77137: ST_TO_ADDR
// vc_control := control_computer ;
77138: LD_ADDR_OWVAR 38
77142: PUSH
77143: LD_INT 3
77145: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77146: LD_ADDR_OWVAR 40
77150: PUSH
77151: LD_INT 10
77153: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77154: LD_VAR 0 2
77158: PUSH
77159: LD_INT 1
77161: ARRAY
77162: PPUSH
77163: CALL_OW 310
77167: NOT
77168: IFFALSE 77215
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77170: CALL_OW 45
77174: PPUSH
77175: LD_VAR 0 2
77179: PUSH
77180: LD_INT 1
77182: ARRAY
77183: PPUSH
77184: CALL_OW 250
77188: PPUSH
77189: LD_VAR 0 2
77193: PUSH
77194: LD_INT 1
77196: ARRAY
77197: PPUSH
77198: CALL_OW 251
77202: PPUSH
77203: LD_INT 12
77205: PPUSH
77206: LD_INT 1
77208: PPUSH
77209: CALL_OW 50
77213: GO 77227
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77215: CALL_OW 45
77219: PPUSH
77220: LD_INT 1
77222: PPUSH
77223: CALL_OW 51
// end ;
77227: GO 77101
77229: POP
77230: POP
// end ;
77231: PPOPN 2
77233: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77234: LD_EXP 105
77238: PUSH
77239: LD_EXP 151
77243: AND
77244: IFFALSE 77466
77246: GO 77248
77248: DISABLE
77249: LD_INT 0
77251: PPUSH
77252: PPUSH
77253: PPUSH
77254: PPUSH
77255: PPUSH
77256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77257: LD_ADDR_VAR 0 6
77261: PUSH
77262: LD_INT 22
77264: PUSH
77265: LD_OWVAR 2
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 21
77276: PUSH
77277: LD_INT 1
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 3
77286: PUSH
77287: LD_INT 23
77289: PUSH
77290: LD_INT 0
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: LIST
77305: PPUSH
77306: CALL_OW 69
77310: ST_TO_ADDR
// if not tmp then
77311: LD_VAR 0 6
77315: NOT
77316: IFFALSE 77320
// exit ;
77318: GO 77466
// s1 := rand ( 1 , 4 ) ;
77320: LD_ADDR_VAR 0 2
77324: PUSH
77325: LD_INT 1
77327: PPUSH
77328: LD_INT 4
77330: PPUSH
77331: CALL_OW 12
77335: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77336: LD_ADDR_VAR 0 4
77340: PUSH
77341: LD_VAR 0 6
77345: PUSH
77346: LD_INT 1
77348: ARRAY
77349: PPUSH
77350: LD_VAR 0 2
77354: PPUSH
77355: CALL_OW 259
77359: ST_TO_ADDR
// if s1 = 1 then
77360: LD_VAR 0 2
77364: PUSH
77365: LD_INT 1
77367: EQUAL
77368: IFFALSE 77388
// s2 := rand ( 2 , 4 ) else
77370: LD_ADDR_VAR 0 3
77374: PUSH
77375: LD_INT 2
77377: PPUSH
77378: LD_INT 4
77380: PPUSH
77381: CALL_OW 12
77385: ST_TO_ADDR
77386: GO 77396
// s2 := 1 ;
77388: LD_ADDR_VAR 0 3
77392: PUSH
77393: LD_INT 1
77395: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77396: LD_ADDR_VAR 0 5
77400: PUSH
77401: LD_VAR 0 6
77405: PUSH
77406: LD_INT 1
77408: ARRAY
77409: PPUSH
77410: LD_VAR 0 3
77414: PPUSH
77415: CALL_OW 259
77419: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77420: LD_VAR 0 6
77424: PUSH
77425: LD_INT 1
77427: ARRAY
77428: PPUSH
77429: LD_VAR 0 2
77433: PPUSH
77434: LD_VAR 0 5
77438: PPUSH
77439: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77443: LD_VAR 0 6
77447: PUSH
77448: LD_INT 1
77450: ARRAY
77451: PPUSH
77452: LD_VAR 0 3
77456: PPUSH
77457: LD_VAR 0 4
77461: PPUSH
77462: CALL_OW 237
// end ;
77466: PPOPN 6
77468: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77469: LD_EXP 105
77473: PUSH
77474: LD_EXP 152
77478: AND
77479: IFFALSE 77558
77481: GO 77483
77483: DISABLE
77484: LD_INT 0
77486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77487: LD_ADDR_VAR 0 1
77491: PUSH
77492: LD_INT 22
77494: PUSH
77495: LD_OWVAR 2
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_INT 30
77506: PUSH
77507: LD_INT 3
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PPUSH
77518: CALL_OW 69
77522: ST_TO_ADDR
// if not tmp then
77523: LD_VAR 0 1
77527: NOT
77528: IFFALSE 77532
// exit ;
77530: GO 77558
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77532: LD_VAR 0 1
77536: PUSH
77537: LD_INT 1
77539: PPUSH
77540: LD_VAR 0 1
77544: PPUSH
77545: CALL_OW 12
77549: ARRAY
77550: PPUSH
77551: LD_INT 1
77553: PPUSH
77554: CALL_OW 234
// end ;
77558: PPOPN 1
77560: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77561: LD_EXP 105
77565: PUSH
77566: LD_EXP 153
77570: AND
77571: IFFALSE 77683
77573: GO 77575
77575: DISABLE
77576: LD_INT 0
77578: PPUSH
77579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77580: LD_ADDR_VAR 0 2
77584: PUSH
77585: LD_INT 22
77587: PUSH
77588: LD_OWVAR 2
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: PUSH
77597: LD_INT 2
77599: PUSH
77600: LD_INT 30
77602: PUSH
77603: LD_INT 27
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PUSH
77610: LD_INT 30
77612: PUSH
77613: LD_INT 26
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: PUSH
77620: LD_INT 30
77622: PUSH
77623: LD_INT 28
77625: PUSH
77626: EMPTY
77627: LIST
77628: LIST
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: LIST
77634: LIST
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: PPUSH
77640: CALL_OW 69
77644: ST_TO_ADDR
// if not tmp then
77645: LD_VAR 0 2
77649: NOT
77650: IFFALSE 77654
// exit ;
77652: GO 77683
// for i in tmp do
77654: LD_ADDR_VAR 0 1
77658: PUSH
77659: LD_VAR 0 2
77663: PUSH
77664: FOR_IN
77665: IFFALSE 77681
// SetLives ( i , 1 ) ;
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_INT 1
77674: PPUSH
77675: CALL_OW 234
77679: GO 77664
77681: POP
77682: POP
// end ;
77683: PPOPN 2
77685: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77686: LD_EXP 105
77690: PUSH
77691: LD_EXP 154
77695: AND
77696: IFFALSE 77970
77698: GO 77700
77700: DISABLE
77701: LD_INT 0
77703: PPUSH
77704: PPUSH
77705: PPUSH
// begin i := rand ( 1 , 7 ) ;
77706: LD_ADDR_VAR 0 1
77710: PUSH
77711: LD_INT 1
77713: PPUSH
77714: LD_INT 7
77716: PPUSH
77717: CALL_OW 12
77721: ST_TO_ADDR
// case i of 1 :
77722: LD_VAR 0 1
77726: PUSH
77727: LD_INT 1
77729: DOUBLE
77730: EQUAL
77731: IFTRUE 77735
77733: GO 77745
77735: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77736: LD_STRING earthquake(getX(game), 0, 32)
77738: PPUSH
77739: CALL_OW 559
77743: GO 77970
77745: LD_INT 2
77747: DOUBLE
77748: EQUAL
77749: IFTRUE 77753
77751: GO 77767
77753: POP
// begin ToLua ( displayStucuk(); ) ;
77754: LD_STRING displayStucuk();
77756: PPUSH
77757: CALL_OW 559
// ResetFog ;
77761: CALL_OW 335
// end ; 3 :
77765: GO 77970
77767: LD_INT 3
77769: DOUBLE
77770: EQUAL
77771: IFTRUE 77775
77773: GO 77879
77775: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77776: LD_ADDR_VAR 0 2
77780: PUSH
77781: LD_INT 22
77783: PUSH
77784: LD_OWVAR 2
77788: PUSH
77789: EMPTY
77790: LIST
77791: LIST
77792: PUSH
77793: LD_INT 25
77795: PUSH
77796: LD_INT 1
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PPUSH
77807: CALL_OW 69
77811: ST_TO_ADDR
// if not tmp then
77812: LD_VAR 0 2
77816: NOT
77817: IFFALSE 77821
// exit ;
77819: GO 77970
// un := tmp [ rand ( 1 , tmp ) ] ;
77821: LD_ADDR_VAR 0 3
77825: PUSH
77826: LD_VAR 0 2
77830: PUSH
77831: LD_INT 1
77833: PPUSH
77834: LD_VAR 0 2
77838: PPUSH
77839: CALL_OW 12
77843: ARRAY
77844: ST_TO_ADDR
// if Crawls ( un ) then
77845: LD_VAR 0 3
77849: PPUSH
77850: CALL_OW 318
77854: IFFALSE 77865
// ComWalk ( un ) ;
77856: LD_VAR 0 3
77860: PPUSH
77861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77865: LD_VAR 0 3
77869: PPUSH
77870: LD_INT 8
77872: PPUSH
77873: CALL_OW 336
// end ; 4 :
77877: GO 77970
77879: LD_INT 4
77881: DOUBLE
77882: EQUAL
77883: IFTRUE 77887
77885: GO 77948
77887: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77888: LD_ADDR_VAR 0 2
77892: PUSH
77893: LD_INT 22
77895: PUSH
77896: LD_OWVAR 2
77900: PUSH
77901: EMPTY
77902: LIST
77903: LIST
77904: PUSH
77905: LD_INT 30
77907: PUSH
77908: LD_INT 29
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: PPUSH
77919: CALL_OW 69
77923: ST_TO_ADDR
// if not tmp then
77924: LD_VAR 0 2
77928: NOT
77929: IFFALSE 77933
// exit ;
77931: GO 77970
// DestroyUnit ( tmp [ 1 ] ) ;
77933: LD_VAR 0 2
77937: PUSH
77938: LD_INT 1
77940: ARRAY
77941: PPUSH
77942: CALL_OW 65
// end ; 5 .. 7 :
77946: GO 77970
77948: LD_INT 5
77950: DOUBLE
77951: GREATEREQUAL
77952: IFFALSE 77960
77954: LD_INT 7
77956: DOUBLE
77957: LESSEQUAL
77958: IFTRUE 77962
77960: GO 77969
77962: POP
// StreamSibBomb ; end ;
77963: CALL 74220 0 0
77967: GO 77970
77969: POP
// end ;
77970: PPOPN 3
77972: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
77973: LD_EXP 105
77977: PUSH
77978: LD_EXP 155
77982: AND
77983: IFFALSE 78139
77985: GO 77987
77987: DISABLE
77988: LD_INT 0
77990: PPUSH
77991: PPUSH
77992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
77993: LD_ADDR_VAR 0 2
77997: PUSH
77998: LD_INT 81
78000: PUSH
78001: LD_OWVAR 2
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PUSH
78010: LD_INT 2
78012: PUSH
78013: LD_INT 21
78015: PUSH
78016: LD_INT 1
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 21
78025: PUSH
78026: LD_INT 2
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PPUSH
78042: CALL_OW 69
78046: ST_TO_ADDR
// if not tmp then
78047: LD_VAR 0 2
78051: NOT
78052: IFFALSE 78056
// exit ;
78054: GO 78139
// p := 0 ;
78056: LD_ADDR_VAR 0 3
78060: PUSH
78061: LD_INT 0
78063: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78064: LD_INT 35
78066: PPUSH
78067: CALL_OW 67
// p := p + 1 ;
78071: LD_ADDR_VAR 0 3
78075: PUSH
78076: LD_VAR 0 3
78080: PUSH
78081: LD_INT 1
78083: PLUS
78084: ST_TO_ADDR
// for i in tmp do
78085: LD_ADDR_VAR 0 1
78089: PUSH
78090: LD_VAR 0 2
78094: PUSH
78095: FOR_IN
78096: IFFALSE 78127
// if GetLives ( i ) < 1000 then
78098: LD_VAR 0 1
78102: PPUSH
78103: CALL_OW 256
78107: PUSH
78108: LD_INT 1000
78110: LESS
78111: IFFALSE 78125
// SetLives ( i , 1000 ) ;
78113: LD_VAR 0 1
78117: PPUSH
78118: LD_INT 1000
78120: PPUSH
78121: CALL_OW 234
78125: GO 78095
78127: POP
78128: POP
// until p > 20 ;
78129: LD_VAR 0 3
78133: PUSH
78134: LD_INT 20
78136: GREATER
78137: IFFALSE 78064
// end ;
78139: PPOPN 3
78141: END
// every 0 0$1 trigger StreamModeActive and sTime do
78142: LD_EXP 105
78146: PUSH
78147: LD_EXP 156
78151: AND
78152: IFFALSE 78187
78154: GO 78156
78156: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78157: LD_INT 28
78159: PPUSH
78160: LD_OWVAR 2
78164: PPUSH
78165: LD_INT 2
78167: PPUSH
78168: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78172: LD_INT 30
78174: PPUSH
78175: LD_OWVAR 2
78179: PPUSH
78180: LD_INT 2
78182: PPUSH
78183: CALL_OW 322
// end ;
78187: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78188: LD_EXP 105
78192: PUSH
78193: LD_EXP 157
78197: AND
78198: IFFALSE 78319
78200: GO 78202
78202: DISABLE
78203: LD_INT 0
78205: PPUSH
78206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78207: LD_ADDR_VAR 0 2
78211: PUSH
78212: LD_INT 22
78214: PUSH
78215: LD_OWVAR 2
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: LD_INT 21
78226: PUSH
78227: LD_INT 1
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: LD_INT 3
78236: PUSH
78237: LD_INT 23
78239: PUSH
78240: LD_INT 0
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PUSH
78247: EMPTY
78248: LIST
78249: LIST
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: LIST
78255: PPUSH
78256: CALL_OW 69
78260: ST_TO_ADDR
// if not tmp then
78261: LD_VAR 0 2
78265: NOT
78266: IFFALSE 78270
// exit ;
78268: GO 78319
// for i in tmp do
78270: LD_ADDR_VAR 0 1
78274: PUSH
78275: LD_VAR 0 2
78279: PUSH
78280: FOR_IN
78281: IFFALSE 78317
// begin if Crawls ( i ) then
78283: LD_VAR 0 1
78287: PPUSH
78288: CALL_OW 318
78292: IFFALSE 78303
// ComWalk ( i ) ;
78294: LD_VAR 0 1
78298: PPUSH
78299: CALL_OW 138
// SetClass ( i , 2 ) ;
78303: LD_VAR 0 1
78307: PPUSH
78308: LD_INT 2
78310: PPUSH
78311: CALL_OW 336
// end ;
78315: GO 78280
78317: POP
78318: POP
// end ;
78319: PPOPN 2
78321: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78322: LD_EXP 105
78326: PUSH
78327: LD_EXP 158
78331: AND
78332: IFFALSE 78613
78334: GO 78336
78336: DISABLE
78337: LD_INT 0
78339: PPUSH
78340: PPUSH
78341: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78342: LD_OWVAR 2
78346: PPUSH
78347: LD_INT 9
78349: PPUSH
78350: LD_INT 1
78352: PPUSH
78353: LD_INT 1
78355: PPUSH
78356: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78360: LD_INT 9
78362: PPUSH
78363: LD_OWVAR 2
78367: PPUSH
78368: CALL_OW 343
// uc_side := 9 ;
78372: LD_ADDR_OWVAR 20
78376: PUSH
78377: LD_INT 9
78379: ST_TO_ADDR
// uc_nation := 2 ;
78380: LD_ADDR_OWVAR 21
78384: PUSH
78385: LD_INT 2
78387: ST_TO_ADDR
// hc_name := Dark Warrior ;
78388: LD_ADDR_OWVAR 26
78392: PUSH
78393: LD_STRING Dark Warrior
78395: ST_TO_ADDR
// hc_gallery :=  ;
78396: LD_ADDR_OWVAR 33
78400: PUSH
78401: LD_STRING 
78403: ST_TO_ADDR
// hc_noskilllimit := true ;
78404: LD_ADDR_OWVAR 76
78408: PUSH
78409: LD_INT 1
78411: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78412: LD_ADDR_OWVAR 31
78416: PUSH
78417: LD_INT 30
78419: PUSH
78420: LD_INT 30
78422: PUSH
78423: LD_INT 30
78425: PUSH
78426: LD_INT 30
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: LIST
78433: LIST
78434: ST_TO_ADDR
// un := CreateHuman ;
78435: LD_ADDR_VAR 0 3
78439: PUSH
78440: CALL_OW 44
78444: ST_TO_ADDR
// hc_noskilllimit := false ;
78445: LD_ADDR_OWVAR 76
78449: PUSH
78450: LD_INT 0
78452: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78453: LD_VAR 0 3
78457: PPUSH
78458: LD_INT 1
78460: PPUSH
78461: CALL_OW 51
// p := 0 ;
78465: LD_ADDR_VAR 0 2
78469: PUSH
78470: LD_INT 0
78472: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78473: LD_INT 35
78475: PPUSH
78476: CALL_OW 67
// p := p + 1 ;
78480: LD_ADDR_VAR 0 2
78484: PUSH
78485: LD_VAR 0 2
78489: PUSH
78490: LD_INT 1
78492: PLUS
78493: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78494: LD_VAR 0 3
78498: PPUSH
78499: CALL_OW 256
78503: PUSH
78504: LD_INT 1000
78506: LESS
78507: IFFALSE 78521
// SetLives ( un , 1000 ) ;
78509: LD_VAR 0 3
78513: PPUSH
78514: LD_INT 1000
78516: PPUSH
78517: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78521: LD_VAR 0 3
78525: PPUSH
78526: LD_INT 81
78528: PUSH
78529: LD_OWVAR 2
78533: PUSH
78534: EMPTY
78535: LIST
78536: LIST
78537: PUSH
78538: LD_INT 91
78540: PUSH
78541: LD_VAR 0 3
78545: PUSH
78546: LD_INT 30
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: LIST
78553: PUSH
78554: EMPTY
78555: LIST
78556: LIST
78557: PPUSH
78558: CALL_OW 69
78562: PPUSH
78563: LD_VAR 0 3
78567: PPUSH
78568: CALL_OW 74
78572: PPUSH
78573: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
78577: LD_VAR 0 2
78581: PUSH
78582: LD_INT 60
78584: GREATER
78585: PUSH
78586: LD_VAR 0 3
78590: PPUSH
78591: CALL_OW 301
78595: OR
78596: IFFALSE 78473
// if un then
78598: LD_VAR 0 3
78602: IFFALSE 78613
// RemoveUnit ( un ) ;
78604: LD_VAR 0 3
78608: PPUSH
78609: CALL_OW 64
// end ;
78613: PPOPN 3
78615: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
78616: LD_INT 0
78618: PPUSH
78619: PPUSH
78620: PPUSH
78621: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78622: LD_ADDR_VAR 0 4
78626: PUSH
78627: LD_INT 22
78629: PUSH
78630: LD_OWVAR 2
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: PUSH
78639: LD_INT 2
78641: PUSH
78642: LD_INT 30
78644: PUSH
78645: LD_INT 0
78647: PUSH
78648: EMPTY
78649: LIST
78650: LIST
78651: PUSH
78652: LD_INT 30
78654: PUSH
78655: LD_INT 1
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: LIST
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: PPUSH
78671: CALL_OW 69
78675: ST_TO_ADDR
// if not tmp then
78676: LD_VAR 0 4
78680: NOT
78681: IFFALSE 78685
// exit ;
78683: GO 78744
// for i in tmp do
78685: LD_ADDR_VAR 0 2
78689: PUSH
78690: LD_VAR 0 4
78694: PUSH
78695: FOR_IN
78696: IFFALSE 78742
// for j = 1 to 3 do
78698: LD_ADDR_VAR 0 3
78702: PUSH
78703: DOUBLE
78704: LD_INT 1
78706: DEC
78707: ST_TO_ADDR
78708: LD_INT 3
78710: PUSH
78711: FOR_TO
78712: IFFALSE 78738
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
78714: LD_VAR 0 2
78718: PPUSH
78719: CALL_OW 274
78723: PPUSH
78724: LD_VAR 0 3
78728: PPUSH
78729: LD_INT 99999
78731: PPUSH
78732: CALL_OW 277
78736: GO 78711
78738: POP
78739: POP
78740: GO 78695
78742: POP
78743: POP
// end ;
78744: LD_VAR 0 1
78748: RET
// export function hHackSetLevel10 ; var i , j ; begin
78749: LD_INT 0
78751: PPUSH
78752: PPUSH
78753: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78754: LD_ADDR_VAR 0 2
78758: PUSH
78759: LD_INT 21
78761: PUSH
78762: LD_INT 1
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: PPUSH
78769: CALL_OW 69
78773: PUSH
78774: FOR_IN
78775: IFFALSE 78827
// if IsSelected ( i ) then
78777: LD_VAR 0 2
78781: PPUSH
78782: CALL_OW 306
78786: IFFALSE 78825
// begin for j := 1 to 4 do
78788: LD_ADDR_VAR 0 3
78792: PUSH
78793: DOUBLE
78794: LD_INT 1
78796: DEC
78797: ST_TO_ADDR
78798: LD_INT 4
78800: PUSH
78801: FOR_TO
78802: IFFALSE 78823
// SetSkill ( i , j , 10 ) ;
78804: LD_VAR 0 2
78808: PPUSH
78809: LD_VAR 0 3
78813: PPUSH
78814: LD_INT 10
78816: PPUSH
78817: CALL_OW 237
78821: GO 78801
78823: POP
78824: POP
// end ;
78825: GO 78774
78827: POP
78828: POP
// end ;
78829: LD_VAR 0 1
78833: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
78834: LD_INT 0
78836: PPUSH
78837: PPUSH
78838: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78839: LD_ADDR_VAR 0 2
78843: PUSH
78844: LD_INT 22
78846: PUSH
78847: LD_OWVAR 2
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: LD_INT 21
78858: PUSH
78859: LD_INT 1
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PPUSH
78870: CALL_OW 69
78874: PUSH
78875: FOR_IN
78876: IFFALSE 78917
// begin for j := 1 to 4 do
78878: LD_ADDR_VAR 0 3
78882: PUSH
78883: DOUBLE
78884: LD_INT 1
78886: DEC
78887: ST_TO_ADDR
78888: LD_INT 4
78890: PUSH
78891: FOR_TO
78892: IFFALSE 78913
// SetSkill ( i , j , 10 ) ;
78894: LD_VAR 0 2
78898: PPUSH
78899: LD_VAR 0 3
78903: PPUSH
78904: LD_INT 10
78906: PPUSH
78907: CALL_OW 237
78911: GO 78891
78913: POP
78914: POP
// end ;
78915: GO 78875
78917: POP
78918: POP
// end ;
78919: LD_VAR 0 1
78923: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
78924: LD_INT 0
78926: PPUSH
// uc_side := your_side ;
78927: LD_ADDR_OWVAR 20
78931: PUSH
78932: LD_OWVAR 2
78936: ST_TO_ADDR
// uc_nation := nation ;
78937: LD_ADDR_OWVAR 21
78941: PUSH
78942: LD_VAR 0 1
78946: ST_TO_ADDR
// InitHc ;
78947: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78951: LD_INT 0
78953: PPUSH
78954: LD_VAR 0 2
78958: PPUSH
78959: LD_VAR 0 3
78963: PPUSH
78964: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
78968: CALL_OW 44
78972: PPUSH
78973: LD_INT 1
78975: PPUSH
78976: CALL_OW 51
// end ;
78980: LD_VAR 0 4
78984: RET
// export function hHackSpawnVehicle ; begin
78985: LD_INT 0
78987: PPUSH
// uc_side := your_side ;
78988: LD_ADDR_OWVAR 20
78992: PUSH
78993: LD_OWVAR 2
78997: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
78998: LD_ADDR_OWVAR 21
79002: PUSH
79003: LD_INT 1
79005: PPUSH
79006: LD_INT 3
79008: PPUSH
79009: CALL_OW 12
79013: ST_TO_ADDR
// InitVc ;
79014: CALL_OW 20
// case uc_nation of 1 :
79018: LD_OWVAR 21
79022: PUSH
79023: LD_INT 1
79025: DOUBLE
79026: EQUAL
79027: IFTRUE 79031
79029: GO 79175
79031: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
79032: LD_ADDR_OWVAR 37
79036: PUSH
79037: LD_INT 1
79039: PUSH
79040: LD_INT 2
79042: PUSH
79043: LD_INT 3
79045: PUSH
79046: LD_INT 4
79048: PUSH
79049: LD_INT 5
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 1
79061: PPUSH
79062: LD_INT 5
79064: PPUSH
79065: CALL_OW 12
79069: ARRAY
79070: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79071: LD_ADDR_OWVAR 39
79075: PUSH
79076: LD_INT 1
79078: PPUSH
79079: LD_INT 3
79081: PPUSH
79082: CALL_OW 12
79086: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
79087: LD_ADDR_OWVAR 38
79091: PUSH
79092: LD_INT 1
79094: PUSH
79095: LD_INT 2
79097: PUSH
79098: LD_INT 3
79100: PUSH
79101: EMPTY
79102: LIST
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 1
79108: PPUSH
79109: LD_INT 3
79111: PPUSH
79112: CALL_OW 12
79116: ARRAY
79117: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
79118: LD_ADDR_OWVAR 40
79122: PUSH
79123: LD_INT 2
79125: PUSH
79126: LD_INT 4
79128: PUSH
79129: LD_INT 5
79131: PUSH
79132: LD_INT 3
79134: PUSH
79135: LD_INT 7
79137: PUSH
79138: LD_INT 8
79140: PUSH
79141: LD_INT 9
79143: PUSH
79144: LD_INT 10
79146: PUSH
79147: LD_INT 6
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: LIST
79154: LIST
79155: LIST
79156: LIST
79157: LIST
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 1
79163: PPUSH
79164: LD_INT 9
79166: PPUSH
79167: CALL_OW 12
79171: ARRAY
79172: ST_TO_ADDR
// end ; 2 :
79173: GO 79440
79175: LD_INT 2
79177: DOUBLE
79178: EQUAL
79179: IFTRUE 79183
79181: GO 79307
79183: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
79184: LD_ADDR_OWVAR 37
79188: PUSH
79189: LD_INT 11
79191: PUSH
79192: LD_INT 12
79194: PUSH
79195: LD_INT 13
79197: PUSH
79198: LD_INT 14
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: LIST
79205: LIST
79206: PUSH
79207: LD_INT 1
79209: PPUSH
79210: LD_INT 4
79212: PPUSH
79213: CALL_OW 12
79217: ARRAY
79218: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79219: LD_ADDR_OWVAR 39
79223: PUSH
79224: LD_INT 1
79226: PPUSH
79227: LD_INT 3
79229: PPUSH
79230: CALL_OW 12
79234: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
79235: LD_ADDR_OWVAR 38
79239: PUSH
79240: LD_INT 1
79242: PUSH
79243: LD_INT 2
79245: PUSH
79246: LD_INT 5
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: LIST
79253: PUSH
79254: LD_INT 1
79256: PPUSH
79257: LD_INT 3
79259: PPUSH
79260: CALL_OW 12
79264: ARRAY
79265: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
79266: LD_ADDR_OWVAR 40
79270: PUSH
79271: LD_INT 24
79273: PUSH
79274: LD_INT 26
79276: PUSH
79277: LD_INT 27
79279: PUSH
79280: LD_INT 28
79282: PUSH
79283: LD_INT 29
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: PUSH
79293: LD_INT 1
79295: PPUSH
79296: LD_INT 5
79298: PPUSH
79299: CALL_OW 12
79303: ARRAY
79304: ST_TO_ADDR
// end ; 3 :
79305: GO 79440
79307: LD_INT 3
79309: DOUBLE
79310: EQUAL
79311: IFTRUE 79315
79313: GO 79439
79315: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
79316: LD_ADDR_OWVAR 37
79320: PUSH
79321: LD_INT 21
79323: PUSH
79324: LD_INT 23
79326: PUSH
79327: LD_INT 22
79329: PUSH
79330: LD_INT 24
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: PUSH
79339: LD_INT 1
79341: PPUSH
79342: LD_INT 4
79344: PPUSH
79345: CALL_OW 12
79349: ARRAY
79350: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79351: LD_ADDR_OWVAR 39
79355: PUSH
79356: LD_INT 1
79358: PPUSH
79359: LD_INT 3
79361: PPUSH
79362: CALL_OW 12
79366: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
79367: LD_ADDR_OWVAR 38
79371: PUSH
79372: LD_INT 1
79374: PUSH
79375: LD_INT 3
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PUSH
79382: LD_INT 1
79384: PPUSH
79385: LD_INT 2
79387: PPUSH
79388: CALL_OW 12
79392: ARRAY
79393: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
79394: LD_ADDR_OWVAR 40
79398: PUSH
79399: LD_INT 42
79401: PUSH
79402: LD_INT 43
79404: PUSH
79405: LD_INT 44
79407: PUSH
79408: LD_INT 46
79410: PUSH
79411: LD_INT 48
79413: PUSH
79414: LD_INT 47
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: LIST
79421: LIST
79422: LIST
79423: LIST
79424: PUSH
79425: LD_INT 1
79427: PPUSH
79428: LD_INT 6
79430: PPUSH
79431: CALL_OW 12
79435: ARRAY
79436: ST_TO_ADDR
// end ; end ;
79437: GO 79440
79439: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79440: CALL_OW 45
79444: PPUSH
79445: LD_INT 1
79447: PPUSH
79448: CALL_OW 51
// end ;
79452: LD_VAR 0 1
79456: RET
// export hInvincible ; every 1 do
79457: GO 79459
79459: DISABLE
// hInvincible := [ ] ;
79460: LD_ADDR_EXP 159
79464: PUSH
79465: EMPTY
79466: ST_TO_ADDR
79467: END
// every 10 do var i ;
79468: GO 79470
79470: DISABLE
79471: LD_INT 0
79473: PPUSH
// begin enable ;
79474: ENABLE
// if not hInvincible then
79475: LD_EXP 159
79479: NOT
79480: IFFALSE 79484
// exit ;
79482: GO 79528
// for i in hInvincible do
79484: LD_ADDR_VAR 0 1
79488: PUSH
79489: LD_EXP 159
79493: PUSH
79494: FOR_IN
79495: IFFALSE 79526
// if GetLives ( i ) < 1000 then
79497: LD_VAR 0 1
79501: PPUSH
79502: CALL_OW 256
79506: PUSH
79507: LD_INT 1000
79509: LESS
79510: IFFALSE 79524
// SetLives ( i , 1000 ) ;
79512: LD_VAR 0 1
79516: PPUSH
79517: LD_INT 1000
79519: PPUSH
79520: CALL_OW 234
79524: GO 79494
79526: POP
79527: POP
// end ;
79528: PPOPN 1
79530: END
// export function hHackInvincible ; var i ; begin
79531: LD_INT 0
79533: PPUSH
79534: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
79535: LD_ADDR_VAR 0 2
79539: PUSH
79540: LD_INT 2
79542: PUSH
79543: LD_INT 21
79545: PUSH
79546: LD_INT 1
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 21
79555: PUSH
79556: LD_INT 2
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: EMPTY
79564: LIST
79565: LIST
79566: LIST
79567: PPUSH
79568: CALL_OW 69
79572: PUSH
79573: FOR_IN
79574: IFFALSE 79635
// if IsSelected ( i ) then
79576: LD_VAR 0 2
79580: PPUSH
79581: CALL_OW 306
79585: IFFALSE 79633
// begin if i in hInvincible then
79587: LD_VAR 0 2
79591: PUSH
79592: LD_EXP 159
79596: IN
79597: IFFALSE 79617
// hInvincible := hInvincible diff i else
79599: LD_ADDR_EXP 159
79603: PUSH
79604: LD_EXP 159
79608: PUSH
79609: LD_VAR 0 2
79613: DIFF
79614: ST_TO_ADDR
79615: GO 79633
// hInvincible := hInvincible union i ;
79617: LD_ADDR_EXP 159
79621: PUSH
79622: LD_EXP 159
79626: PUSH
79627: LD_VAR 0 2
79631: UNION
79632: ST_TO_ADDR
// end ;
79633: GO 79573
79635: POP
79636: POP
// end ;
79637: LD_VAR 0 1
79641: RET
// export function hHackInvisible ; var i , j ; begin
79642: LD_INT 0
79644: PPUSH
79645: PPUSH
79646: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79647: LD_ADDR_VAR 0 2
79651: PUSH
79652: LD_INT 21
79654: PUSH
79655: LD_INT 1
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: PPUSH
79662: CALL_OW 69
79666: PUSH
79667: FOR_IN
79668: IFFALSE 79692
// if IsSelected ( i ) then
79670: LD_VAR 0 2
79674: PPUSH
79675: CALL_OW 306
79679: IFFALSE 79690
// ComForceInvisible ( i ) ;
79681: LD_VAR 0 2
79685: PPUSH
79686: CALL_OW 496
79690: GO 79667
79692: POP
79693: POP
// end ;
79694: LD_VAR 0 1
79698: RET
// export function hHackChangeYourSide ; begin
79699: LD_INT 0
79701: PPUSH
// if your_side = 8 then
79702: LD_OWVAR 2
79706: PUSH
79707: LD_INT 8
79709: EQUAL
79710: IFFALSE 79722
// your_side := 0 else
79712: LD_ADDR_OWVAR 2
79716: PUSH
79717: LD_INT 0
79719: ST_TO_ADDR
79720: GO 79736
// your_side := your_side + 1 ;
79722: LD_ADDR_OWVAR 2
79726: PUSH
79727: LD_OWVAR 2
79731: PUSH
79732: LD_INT 1
79734: PLUS
79735: ST_TO_ADDR
// end ;
79736: LD_VAR 0 1
79740: RET
// export function hHackChangeUnitSide ; var i , j ; begin
79741: LD_INT 0
79743: PPUSH
79744: PPUSH
79745: PPUSH
// for i in all_units do
79746: LD_ADDR_VAR 0 2
79750: PUSH
79751: LD_OWVAR 3
79755: PUSH
79756: FOR_IN
79757: IFFALSE 79835
// if IsSelected ( i ) then
79759: LD_VAR 0 2
79763: PPUSH
79764: CALL_OW 306
79768: IFFALSE 79833
// begin j := GetSide ( i ) ;
79770: LD_ADDR_VAR 0 3
79774: PUSH
79775: LD_VAR 0 2
79779: PPUSH
79780: CALL_OW 255
79784: ST_TO_ADDR
// if j = 8 then
79785: LD_VAR 0 3
79789: PUSH
79790: LD_INT 8
79792: EQUAL
79793: IFFALSE 79805
// j := 0 else
79795: LD_ADDR_VAR 0 3
79799: PUSH
79800: LD_INT 0
79802: ST_TO_ADDR
79803: GO 79819
// j := j + 1 ;
79805: LD_ADDR_VAR 0 3
79809: PUSH
79810: LD_VAR 0 3
79814: PUSH
79815: LD_INT 1
79817: PLUS
79818: ST_TO_ADDR
// SetSide ( i , j ) ;
79819: LD_VAR 0 2
79823: PPUSH
79824: LD_VAR 0 3
79828: PPUSH
79829: CALL_OW 235
// end ;
79833: GO 79756
79835: POP
79836: POP
// end ;
79837: LD_VAR 0 1
79841: RET
// export function hHackFog ; begin
79842: LD_INT 0
79844: PPUSH
// FogOff ( true ) ;
79845: LD_INT 1
79847: PPUSH
79848: CALL_OW 344
// end ;
79852: LD_VAR 0 1
79856: RET
// export function hHackApeman ; begin
79857: LD_INT 0
79859: PPUSH
// uc_side := your_side ;
79860: LD_ADDR_OWVAR 20
79864: PUSH
79865: LD_OWVAR 2
79869: ST_TO_ADDR
// uc_nation := 0 ;
79870: LD_ADDR_OWVAR 21
79874: PUSH
79875: LD_INT 0
79877: ST_TO_ADDR
// hc_name :=  ;
79878: LD_ADDR_OWVAR 26
79882: PUSH
79883: LD_STRING 
79885: ST_TO_ADDR
// hc_gallery :=  ;
79886: LD_ADDR_OWVAR 33
79890: PUSH
79891: LD_STRING 
79893: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
79894: LD_ADDR_OWVAR 31
79898: PUSH
79899: LD_INT 0
79901: PUSH
79902: LD_INT 0
79904: PUSH
79905: LD_INT 0
79907: PUSH
79908: LD_INT 0
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: LIST
79915: LIST
79916: ST_TO_ADDR
// hc_class := class_apeman ;
79917: LD_ADDR_OWVAR 28
79921: PUSH
79922: LD_INT 12
79924: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
79925: CALL_OW 44
79929: PPUSH
79930: LD_INT 1
79932: PPUSH
79933: CALL_OW 51
// end ;
79937: LD_VAR 0 1
79941: RET
// export function hHackBoom ; begin
79942: LD_INT 0
79944: PPUSH
// uc_side := your_side ;
79945: LD_ADDR_OWVAR 20
79949: PUSH
79950: LD_OWVAR 2
79954: ST_TO_ADDR
// uc_nation := 1 ;
79955: LD_ADDR_OWVAR 21
79959: PUSH
79960: LD_INT 1
79962: ST_TO_ADDR
// vc_chassis := us_morphling ;
79963: LD_ADDR_OWVAR 37
79967: PUSH
79968: LD_INT 5
79970: ST_TO_ADDR
// vc_engine := engine_siberite ;
79971: LD_ADDR_OWVAR 39
79975: PUSH
79976: LD_INT 3
79978: ST_TO_ADDR
// vc_control := control_computer ;
79979: LD_ADDR_OWVAR 38
79983: PUSH
79984: LD_INT 3
79986: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
79987: LD_ADDR_OWVAR 40
79991: PUSH
79992: LD_INT 8
79994: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79995: CALL_OW 45
79999: PPUSH
80000: LD_INT 1
80002: PPUSH
80003: CALL_OW 51
// end ;
80007: LD_VAR 0 1
80011: RET
