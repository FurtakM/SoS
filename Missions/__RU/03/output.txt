// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawnNearAmericans , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 294 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawnNearAmericans = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 83
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// PrepareRussians ;
 273: CALL 974 0 0
// PrepareAmericans ;
 277: CALL 5559 0 0
// Nef_PrepareNature ;
 281: CALL 19369 0 0
// MissionIntro ;
 285: CALL 12718 0 0
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export function InitMapConfig ; begin
 294: LD_INT 0
 296: PPUSH
// BaseMapConfig ;
 297: CALL 310 0 0
// MissionMapConfig ;
 301: CALL 408 0 0
// end ;
 305: LD_VAR 0 1
 309: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 310: LD_INT 0
 312: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 ] ;
 313: LD_ADDR_EXP 29
 317: PUSH
 318: LD_INT 8
 320: PUSH
 321: LD_INT 12
 323: PUSH
 324: LD_INT 6
 326: PUSH
 327: LD_INT 6
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: LIST
 334: LIST
 335: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 336: LD_ADDR_EXP 30
 340: PUSH
 341: LD_INT 2
 343: PUSH
 344: LD_INT 2
 346: PUSH
 347: LD_INT 2
 349: PUSH
 350: LD_INT 2
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: LIST
 357: LIST
 358: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 359: LD_ADDR_EXP 31
 363: PUSH
 364: LD_INT 5
 366: NEG
 367: PPUSH
 368: LD_INT 5
 370: PPUSH
 371: CALL_OW 12
 375: PUSH
 376: EMPTY
 377: LIST
 378: ST_TO_ADDR
// debugMode = 0 ;
 379: LD_ADDR_EXP 34
 383: PUSH
 384: LD_INT 0
 386: ST_TO_ADDR
// missionPrefix = 03_ ;
 387: LD_ADDR_EXP 32
 391: PUSH
 392: LD_STRING 03_
 394: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 395: LD_ADDR_EXP 33
 399: PUSH
 400: LD_STRING 02_
 402: ST_TO_ADDR
// end ;
 403: LD_VAR 0 1
 407: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; function MissionMapConfig ; begin
 408: LD_INT 0
 410: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 411: LD_ADDR_EXP 35
 415: PUSH
 416: LD_INT 7
 418: PUSH
 419: LD_INT 6
 421: PUSH
 422: LD_INT 6
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// scholtzeSpawnPositions = [ [ 150 , 144 ] , [ 51 , 7 , 89 , 19 , 118 , 9 ] , [ 150 , 144 , 51 , 7 , 89 , 19 , 118 , 9 ] ] [ Difficulty ] ;
 436: LD_ADDR_EXP 36
 440: PUSH
 441: LD_INT 150
 443: PUSH
 444: LD_INT 144
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: LD_INT 51
 453: PUSH
 454: LD_INT 7
 456: PUSH
 457: LD_INT 89
 459: PUSH
 460: LD_INT 19
 462: PUSH
 463: LD_INT 118
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 150
 479: PUSH
 480: LD_INT 144
 482: PUSH
 483: LD_INT 51
 485: PUSH
 486: LD_INT 7
 488: PUSH
 489: LD_INT 89
 491: PUSH
 492: LD_INT 19
 494: PUSH
 495: LD_INT 118
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_OWVAR 67
 520: ARRAY
 521: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 522: LD_ADDR_EXP 37
 526: PUSH
 527: LD_INT 84000
 529: PUSH
 530: LD_INT 73500
 532: PUSH
 533: LD_INT 63000
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: LIST
 540: PUSH
 541: LD_OWVAR 67
 545: ARRAY
 546: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 547: LD_ADDR_EXP 38
 551: PUSH
 552: LD_INT 150
 554: PUSH
 555: LD_INT 100
 557: PUSH
 558: LD_INT 50
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_OWVAR 67
 570: ARRAY
 571: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 572: LD_ADDR_EXP 39
 576: PUSH
 577: LD_INT 100
 579: PUSH
 580: LD_INT 50
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: LIST
 590: PUSH
 591: LD_OWVAR 67
 595: ARRAY
 596: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 597: LD_ADDR_EXP 40
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 2
 607: PUSH
 608: LD_INT 2
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PUSH
 616: LD_OWVAR 67
 620: ARRAY
 621: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 622: LD_ADDR_EXP 43
 626: PUSH
 627: LD_INT 8
 629: PUSH
 630: LD_INT 6
 632: PUSH
 633: LD_INT 5
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PUSH
 641: LD_OWVAR 67
 645: ARRAY
 646: ST_TO_ADDR
// end ;
 647: LD_VAR 0 1
 651: RET
// every 0 0$1 trigger debugMode do var i ;
 652: LD_EXP 34
 656: IFFALSE 971
 658: GO 660
 660: DISABLE
 661: LD_INT 0
 663: PPUSH
// begin enable ;
 664: ENABLE
// FogOff ( your_side ) ;
 665: LD_OWVAR 2
 669: PPUSH
 670: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 674: LD_ADDR_VAR 0 1
 678: PUSH
 679: LD_INT 22
 681: PUSH
 682: LD_OWVAR 2
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: LD_INT 2
 693: PUSH
 694: LD_INT 21
 696: PUSH
 697: LD_INT 1
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PUSH
 704: LD_INT 21
 706: PUSH
 707: LD_INT 2
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: PUSH
 728: FOR_IN
 729: IFFALSE 745
// SetLives ( i , 1000 ) ;
 731: LD_VAR 0 1
 735: PPUSH
 736: LD_INT 1000
 738: PPUSH
 739: CALL_OW 234
 743: GO 728
 745: POP
 746: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 747: LD_ADDR_VAR 0 1
 751: PUSH
 752: LD_INT 22
 754: PUSH
 755: LD_OWVAR 2
 759: PUSH
 760: EMPTY
 761: LIST
 762: LIST
 763: PUSH
 764: LD_INT 21
 766: PUSH
 767: LD_INT 1
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PPUSH
 778: CALL_OW 69
 782: PUSH
 783: FOR_IN
 784: IFFALSE 848
// begin SetSkill ( i , skill_combat , 10 ) ;
 786: LD_VAR 0 1
 790: PPUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 10
 796: PPUSH
 797: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 801: LD_VAR 0 1
 805: PPUSH
 806: LD_INT 2
 808: PPUSH
 809: LD_INT 10
 811: PPUSH
 812: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 816: LD_VAR 0 1
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 10
 826: PPUSH
 827: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_INT 4
 838: PPUSH
 839: LD_INT 10
 841: PPUSH
 842: CALL_OW 237
// end ;
 846: GO 783
 848: POP
 849: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 850: LD_ADDR_VAR 0 1
 854: PUSH
 855: LD_INT 22
 857: PUSH
 858: LD_OWVAR 2
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: PUSH
 867: LD_INT 2
 869: PUSH
 870: LD_INT 30
 872: PUSH
 873: LD_INT 0
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: PUSH
 880: LD_INT 30
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PPUSH
 899: CALL_OW 69
 903: PUSH
 904: FOR_IN
 905: IFFALSE 969
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 907: LD_VAR 0 1
 911: PPUSH
 912: CALL_OW 274
 916: PPUSH
 917: LD_INT 1
 919: PPUSH
 920: LD_INT 9999
 922: PPUSH
 923: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 927: LD_VAR 0 1
 931: PPUSH
 932: CALL_OW 274
 936: PPUSH
 937: LD_INT 2
 939: PPUSH
 940: LD_INT 9999
 942: PPUSH
 943: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 947: LD_VAR 0 1
 951: PPUSH
 952: CALL_OW 274
 956: PPUSH
 957: LD_INT 3
 959: PPUSH
 960: LD_INT 9999
 962: PPUSH
 963: CALL_OW 277
// end ;
 967: GO 904
 969: POP
 970: POP
// end ; end_of_file
 971: PPOPN 1
 973: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 974: LD_INT 0
 976: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 977: LD_ADDR_EXP 75
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: LD_INT 0
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1000: LD_ADDR_EXP 70
1004: PUSH
1005: EMPTY
1006: ST_TO_ADDR
// PrepareKirovBase ;
1007: CALL 1991 0 0
// KirovUpgradeBase ;
1011: CALL 9360 0 0
// PrepareHeroes ;
1015: CALL 1044 0 0
// PrepareBeriaBase ;
1019: CALL 1393 0 0
// PrepareSecondBaseTeam ;
1023: CALL 3784 0 0
// PrepareGrishko ;
1027: CALL 2949 0 0
// PrepareOtherBuildings ;
1031: CALL 3218 0 0
// PrepareVehicles ;
1035: CALL 3022 0 0
// end ;
1039: LD_VAR 0 1
1043: RET
// function PrepareHeroes ; begin
1044: LD_INT 0
1046: PPUSH
// uc_side = 3 ;
1047: LD_ADDR_OWVAR 20
1051: PUSH
1052: LD_INT 3
1054: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1055: LD_ADDR_EXP 44
1059: PUSH
1060: LD_STRING Burlak
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: CALL 7047 0 2
1070: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1071: LD_ADDR_EXP 45
1075: PUSH
1076: LD_STRING Gnyevko
1078: PPUSH
1079: LD_INT 1
1081: PPUSH
1082: CALL 7047 0 2
1086: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1087: LD_ADDR_EXP 47
1091: PUSH
1092: LD_STRING Kovalyuk
1094: PPUSH
1095: LD_INT 1
1097: PPUSH
1098: CALL 7047 0 2
1102: ST_TO_ADDR
// Kirilenkova = CreateCharacter ( 01_Kirilenkova ) ;
1103: LD_ADDR_EXP 46
1107: PUSH
1108: LD_STRING 01_Kirilenkova
1110: PPUSH
1111: CALL_OW 34
1115: ST_TO_ADDR
// uc_side = 6 ;
1116: LD_ADDR_OWVAR 20
1120: PUSH
1121: LD_INT 6
1123: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1124: LD_EXP 1
1128: NOT
1129: PUSH
1130: LD_STRING 02_Belkov
1132: PPUSH
1133: CALL_OW 28
1137: AND
1138: IFFALSE 1230
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1140: LD_ADDR_EXP 48
1144: PUSH
1145: LD_STRING Belkov
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: CALL 7047 0 2
1155: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , false ) ;
1156: LD_ADDR_EXP 49
1160: PUSH
1161: LD_STRING Belkov2
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL 7047 0 2
1171: ST_TO_ADDR
// BelkovDialog = Belkov ;
1172: LD_ADDR_EXP 58
1176: PUSH
1177: LD_EXP 48
1181: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1182: LD_EXP 48
1186: PPUSH
1187: LD_INT 165
1189: PPUSH
1190: LD_INT 110
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 48
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1200: LD_EXP 49
1204: PPUSH
1205: LD_INT 159
1207: PPUSH
1208: LD_INT 107
1210: PPUSH
1211: LD_INT 5
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL_OW 50
// ComHold ( Belkov ) ;
1221: LD_EXP 48
1225: PPUSH
1226: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1230: LD_EXP 1
1234: PUSH
1235: LD_STRING 02_Belkov2
1237: PPUSH
1238: CALL_OW 28
1242: AND
1243: IFFALSE 1298
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1245: LD_ADDR_EXP 49
1249: PUSH
1250: LD_STRING Belkov2
1252: PPUSH
1253: LD_INT 1
1255: PPUSH
1256: CALL 7047 0 2
1260: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1261: LD_ADDR_EXP 58
1265: PUSH
1266: LD_EXP 49
1270: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1271: LD_EXP 49
1275: PPUSH
1276: LD_INT 165
1278: PPUSH
1279: LD_INT 110
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 48
// ComHold ( Belkov2 ) ;
1289: LD_EXP 49
1293: PPUSH
1294: CALL_OW 140
// end ; PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1298: LD_EXP 44
1302: PPUSH
1303: LD_INT 164
1305: PPUSH
1306: LD_INT 108
1308: PPUSH
1309: LD_INT 0
1311: PPUSH
1312: CALL_OW 48
// ComHold ( Burlak ) ;
1316: LD_EXP 44
1320: PPUSH
1321: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1325: LD_EXP 45
1329: PPUSH
1330: LD_INT 159
1332: PPUSH
1333: LD_INT 107
1335: PPUSH
1336: LD_INT 5
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1346: LD_EXP 47
1350: PPUSH
1351: LD_INT 159
1353: PPUSH
1354: LD_INT 107
1356: PPUSH
1357: LD_INT 5
1359: PPUSH
1360: LD_INT 0
1362: PPUSH
1363: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1367: LD_EXP 46
1371: PPUSH
1372: LD_INT 159
1374: PPUSH
1375: LD_INT 107
1377: PPUSH
1378: LD_INT 5
1380: PPUSH
1381: LD_INT 0
1383: PPUSH
1384: CALL_OW 50
// end ;
1388: LD_VAR 0 1
1392: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1398: LD_ADDR_EXP 54
1402: PUSH
1403: LD_STRING 02_BeriaBase_2
1405: PPUSH
1406: EMPTY
1407: PPUSH
1408: CALL_OW 30
1412: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1413: LD_ADDR_EXP 53
1417: PUSH
1418: LD_STRING 02_other_beria
1420: PPUSH
1421: CALL_OW 31
1425: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1426: LD_ADDR_EXP 51
1430: PUSH
1431: LD_STRING 02_other_survivors
1433: PPUSH
1434: CALL_OW 31
1438: ST_TO_ADDR
// uc_side = 3 ;
1439: LD_ADDR_OWVAR 20
1443: PUSH
1444: LD_INT 3
1446: ST_TO_ADDR
// uc_nation = 3 ;
1447: LD_ADDR_OWVAR 21
1451: PUSH
1452: LD_INT 3
1454: ST_TO_ADDR
// for i := 1 to beriaBase do
1455: LD_ADDR_VAR 0 2
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_EXP 54
1469: PUSH
1470: FOR_TO
1471: IFFALSE 1724
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1473: LD_ADDR_OWVAR 42
1477: PUSH
1478: LD_EXP 54
1482: PUSH
1483: LD_VAR 0 2
1487: ARRAY
1488: PUSH
1489: LD_INT 1
1491: ARRAY
1492: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1493: LD_ADDR_OWVAR 43
1497: PUSH
1498: LD_EXP 54
1502: PUSH
1503: LD_VAR 0 2
1507: ARRAY
1508: PUSH
1509: LD_INT 5
1511: ARRAY
1512: ST_TO_ADDR
// if bc_type = b_lab then
1513: LD_OWVAR 42
1517: PUSH
1518: LD_INT 6
1520: EQUAL
1521: IFFALSE 1539
// begin bc_kind1 = b_lab_basic ;
1523: LD_ADDR_OWVAR 44
1527: PUSH
1528: LD_INT 9
1530: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1531: LD_ADDR_OWVAR 45
1535: PUSH
1536: LD_INT 9
1538: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1539: LD_OWVAR 42
1543: PUSH
1544: LD_INT 7
1546: EQUAL
1547: PUSH
1548: LD_OWVAR 42
1552: PUSH
1553: LD_INT 8
1555: EQUAL
1556: OR
1557: IFFALSE 1673
// begin if beriaBase [ i ] [ 7 ] then
1559: LD_EXP 54
1563: PUSH
1564: LD_VAR 0 2
1568: ARRAY
1569: PUSH
1570: LD_INT 7
1572: ARRAY
1573: IFFALSE 1595
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1575: LD_ADDR_OWVAR 44
1579: PUSH
1580: LD_EXP 54
1584: PUSH
1585: LD_VAR 0 2
1589: ARRAY
1590: PUSH
1591: LD_INT 7
1593: ARRAY
1594: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1595: LD_EXP 54
1599: PUSH
1600: LD_VAR 0 2
1604: ARRAY
1605: PUSH
1606: LD_INT 8
1608: ARRAY
1609: IFFALSE 1631
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1611: LD_ADDR_OWVAR 45
1615: PUSH
1616: LD_EXP 54
1620: PUSH
1621: LD_VAR 0 2
1625: ARRAY
1626: PUSH
1627: LD_INT 8
1629: ARRAY
1630: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1631: LD_EXP 54
1635: PUSH
1636: LD_VAR 0 2
1640: ARRAY
1641: PUSH
1642: LD_INT 7
1644: ARRAY
1645: NOT
1646: PUSH
1647: LD_EXP 54
1651: PUSH
1652: LD_VAR 0 2
1656: ARRAY
1657: PUSH
1658: LD_INT 8
1660: ARRAY
1661: NOT
1662: AND
1663: IFFALSE 1673
// bc_type := b_lab ;
1665: LD_ADDR_OWVAR 42
1669: PUSH
1670: LD_INT 6
1672: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1673: LD_EXP 54
1677: PUSH
1678: LD_VAR 0 2
1682: ARRAY
1683: PUSH
1684: LD_INT 2
1686: ARRAY
1687: PPUSH
1688: LD_EXP 54
1692: PUSH
1693: LD_VAR 0 2
1697: ARRAY
1698: PUSH
1699: LD_INT 3
1701: ARRAY
1702: PPUSH
1703: LD_EXP 54
1707: PUSH
1708: LD_VAR 0 2
1712: ARRAY
1713: PUSH
1714: LD_INT 4
1716: ARRAY
1717: PPUSH
1718: CALL_OW 47
// end ;
1722: GO 1470
1724: POP
1725: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1726: LD_ADDR_EXP 55
1730: PUSH
1731: LD_INT 22
1733: PUSH
1734: LD_INT 3
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 30
1743: PUSH
1744: LD_INT 0
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PPUSH
1755: CALL_OW 69
1759: PUSH
1760: LD_INT 1
1762: ARRAY
1763: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1764: LD_EXP 55
1768: PPUSH
1769: LD_STRING beria
1771: PPUSH
1772: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1776: LD_EXP 55
1780: PPUSH
1781: CALL_OW 274
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: LD_EXP 2
1793: PPUSH
1794: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1798: LD_EXP 55
1802: PPUSH
1803: CALL_OW 274
1807: PPUSH
1808: LD_INT 2
1810: PPUSH
1811: LD_EXP 3
1815: PPUSH
1816: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1820: LD_EXP 55
1824: PPUSH
1825: CALL_OW 274
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: LD_EXP 55
1837: PPUSH
1838: CALL_OW 274
1842: PPUSH
1843: LD_INT 2
1845: PPUSH
1846: CALL_OW 275
1850: PUSH
1851: LD_EXP 38
1855: PLUS
1856: PPUSH
1857: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1861: LD_EXP 55
1865: PPUSH
1866: CALL_OW 274
1870: PPUSH
1871: LD_INT 2
1873: PPUSH
1874: LD_EXP 55
1878: PPUSH
1879: CALL_OW 274
1883: PPUSH
1884: LD_INT 2
1886: PPUSH
1887: CALL_OW 275
1891: PUSH
1892: LD_EXP 39
1896: PLUS
1897: PPUSH
1898: CALL_OW 277
// uc_side = 6 ;
1902: LD_ADDR_OWVAR 20
1906: PUSH
1907: LD_INT 6
1909: ST_TO_ADDR
// for i in otherBeriaUnits do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: LD_EXP 53
1919: PUSH
1920: FOR_IN
1921: IFFALSE 1946
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1923: LD_VAR 0 2
1927: PPUSH
1928: LD_INT 159
1930: PPUSH
1931: LD_INT 107
1933: PPUSH
1934: LD_INT 10
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 50
1944: GO 1920
1946: POP
1947: POP
// for i in other_survivors do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_EXP 51
1957: PUSH
1958: FOR_IN
1959: IFFALSE 1984
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1961: LD_VAR 0 2
1965: PPUSH
1966: LD_INT 159
1968: PPUSH
1969: LD_INT 107
1971: PPUSH
1972: LD_INT 10
1974: PPUSH
1975: LD_INT 0
1977: PPUSH
1978: CALL_OW 50
1982: GO 1958
1984: POP
1985: POP
// end ;
1986: LD_VAR 0 1
1990: RET
// function PrepareKirovBase ; var i , bunkerCounter ; begin
1991: LD_INT 0
1993: PPUSH
1994: PPUSH
1995: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
1996: LD_ADDR_EXP 61
2000: PUSH
2001: LD_STRING 02_KirovBase_3
2003: PPUSH
2004: EMPTY
2005: PPUSH
2006: CALL_OW 30
2010: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2011: LD_ADDR_EXP 60
2015: PUSH
2016: LD_STRING 02_other_kirov
2018: PPUSH
2019: CALL_OW 31
2023: ST_TO_ADDR
// uc_side = 6 ;
2024: LD_ADDR_OWVAR 20
2028: PUSH
2029: LD_INT 6
2031: ST_TO_ADDR
// uc_nation = 3 ;
2032: LD_ADDR_OWVAR 21
2036: PUSH
2037: LD_INT 3
2039: ST_TO_ADDR
// for i := 1 to kirovBase do
2040: LD_ADDR_VAR 0 2
2044: PUSH
2045: DOUBLE
2046: LD_INT 1
2048: DEC
2049: ST_TO_ADDR
2050: LD_EXP 61
2054: PUSH
2055: FOR_TO
2056: IFFALSE 2369
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2058: LD_ADDR_OWVAR 42
2062: PUSH
2063: LD_EXP 61
2067: PUSH
2068: LD_VAR 0 2
2072: ARRAY
2073: PUSH
2074: LD_INT 1
2076: ARRAY
2077: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2078: LD_ADDR_OWVAR 43
2082: PUSH
2083: LD_EXP 61
2087: PUSH
2088: LD_VAR 0 2
2092: ARRAY
2093: PUSH
2094: LD_INT 5
2096: ARRAY
2097: ST_TO_ADDR
// if bc_type = b_depot then
2098: LD_OWVAR 42
2102: PUSH
2103: LD_INT 0
2105: EQUAL
2106: IFFALSE 2116
// bc_type = b_warehouse ;
2108: LD_ADDR_OWVAR 42
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// if bc_type = b_armoury then
2116: LD_OWVAR 42
2120: PUSH
2121: LD_INT 4
2123: EQUAL
2124: IFFALSE 2134
// bc_type = b_barracks ;
2126: LD_ADDR_OWVAR 42
2130: PUSH
2131: LD_INT 5
2133: ST_TO_ADDR
// if bc_type = b_lab then
2134: LD_OWVAR 42
2138: PUSH
2139: LD_INT 6
2141: EQUAL
2142: IFFALSE 2160
// begin bc_kind1 = b_lab_basic ;
2144: LD_ADDR_OWVAR 44
2148: PUSH
2149: LD_INT 9
2151: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2152: LD_ADDR_OWVAR 45
2156: PUSH
2157: LD_INT 9
2159: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
2160: LD_OWVAR 42
2164: PUSH
2165: LD_INT 7
2167: EQUAL
2168: PUSH
2169: LD_OWVAR 42
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: OR
2178: IFFALSE 2294
// begin if kirovBase [ i ] [ 7 ] then
2180: LD_EXP 61
2184: PUSH
2185: LD_VAR 0 2
2189: ARRAY
2190: PUSH
2191: LD_INT 7
2193: ARRAY
2194: IFFALSE 2216
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2196: LD_ADDR_OWVAR 44
2200: PUSH
2201: LD_EXP 61
2205: PUSH
2206: LD_VAR 0 2
2210: ARRAY
2211: PUSH
2212: LD_INT 7
2214: ARRAY
2215: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2216: LD_EXP 61
2220: PUSH
2221: LD_VAR 0 2
2225: ARRAY
2226: PUSH
2227: LD_INT 8
2229: ARRAY
2230: IFFALSE 2252
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2232: LD_ADDR_OWVAR 45
2236: PUSH
2237: LD_EXP 61
2241: PUSH
2242: LD_VAR 0 2
2246: ARRAY
2247: PUSH
2248: LD_INT 8
2250: ARRAY
2251: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2252: LD_EXP 61
2256: PUSH
2257: LD_VAR 0 2
2261: ARRAY
2262: PUSH
2263: LD_INT 7
2265: ARRAY
2266: NOT
2267: PUSH
2268: LD_EXP 61
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PUSH
2279: LD_INT 8
2281: ARRAY
2282: NOT
2283: AND
2284: IFFALSE 2294
// bc_type := b_lab ;
2286: LD_ADDR_OWVAR 42
2290: PUSH
2291: LD_INT 6
2293: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2294: LD_OWVAR 42
2298: PUSH
2299: LD_INT 31
2301: EQUAL
2302: IFFALSE 2318
// bunkerCounter = bunkerCounter + 1 ;
2304: LD_ADDR_VAR 0 3
2308: PUSH
2309: LD_VAR 0 3
2313: PUSH
2314: LD_INT 1
2316: PLUS
2317: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2318: LD_EXP 61
2322: PUSH
2323: LD_VAR 0 2
2327: ARRAY
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_EXP 61
2337: PUSH
2338: LD_VAR 0 2
2342: ARRAY
2343: PUSH
2344: LD_INT 3
2346: ARRAY
2347: PPUSH
2348: LD_EXP 61
2352: PUSH
2353: LD_VAR 0 2
2357: ARRAY
2358: PUSH
2359: LD_INT 4
2361: ARRAY
2362: PPUSH
2363: CALL_OW 47
// end ;
2367: GO 2055
2369: POP
2370: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2371: LD_ADDR_EXP 62
2375: PUSH
2376: LD_INT 22
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: PUSH
2386: LD_INT 30
2388: PUSH
2389: LD_INT 1
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PPUSH
2400: CALL_OW 69
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2409: LD_EXP 62
2413: PPUSH
2414: LD_STRING kirov
2416: PPUSH
2417: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2421: LD_EXP 62
2425: PPUSH
2426: CALL_OW 274
2430: PPUSH
2431: LD_INT 1
2433: PPUSH
2434: LD_INT 5000
2436: PPUSH
2437: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2441: LD_EXP 62
2445: PPUSH
2446: CALL_OW 274
2450: PPUSH
2451: LD_INT 2
2453: PPUSH
2454: LD_INT 2000
2456: PPUSH
2457: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2461: LD_ADDR_EXP 64
2465: PUSH
2466: LD_INT 22
2468: PUSH
2469: LD_INT 6
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PUSH
2476: LD_INT 21
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: EMPTY
2483: LIST
2484: LIST
2485: PUSH
2486: LD_INT 30
2488: PUSH
2489: LD_INT 5
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: EMPTY
2497: LIST
2498: LIST
2499: LIST
2500: PPUSH
2501: CALL_OW 69
2505: PPUSH
2506: LD_INT 145
2508: PPUSH
2509: LD_INT 102
2511: PPUSH
2512: CALL_OW 73
2516: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2517: LD_ADDR_EXP 65
2521: PUSH
2522: LD_INT 22
2524: PUSH
2525: LD_INT 6
2527: PUSH
2528: EMPTY
2529: LIST
2530: LIST
2531: PUSH
2532: LD_INT 21
2534: PUSH
2535: LD_INT 3
2537: PUSH
2538: EMPTY
2539: LIST
2540: LIST
2541: PUSH
2542: LD_INT 30
2544: PUSH
2545: LD_INT 5
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: PPUSH
2557: CALL_OW 69
2561: PUSH
2562: LD_EXP 64
2566: DIFF
2567: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2568: LD_ADDR_EXP 65
2572: PUSH
2573: LD_EXP 65
2577: PUSH
2578: LD_INT 1
2580: ARRAY
2581: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2582: LD_ADDR_EXP 56
2586: PUSH
2587: LD_STRING Kurin
2589: PPUSH
2590: LD_INT 0
2592: PPUSH
2593: CALL 7047 0 2
2597: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2598: LD_EXP 56
2602: PPUSH
2603: LD_INT 166
2605: PPUSH
2606: LD_INT 109
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL_OW 48
// ComHold ( Kurin ) ;
2616: LD_EXP 56
2620: PPUSH
2621: CALL_OW 140
// PrepareEngineer ( false , 7 ) ;
2625: LD_INT 0
2627: PPUSH
2628: LD_INT 7
2630: PPUSH
2631: CALL_OW 382
// kirovEng = CreateHuman ;
2635: LD_ADDR_EXP 66
2639: PUSH
2640: CALL_OW 44
2644: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2645: LD_EXP 66
2649: PPUSH
2650: LD_INT 159
2652: PPUSH
2653: LD_INT 107
2655: PPUSH
2656: LD_INT 10
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2666: LD_ADDR_EXP 57
2670: PUSH
2671: LD_STRING Popov
2673: PPUSH
2674: LD_INT 0
2676: PPUSH
2677: CALL 7047 0 2
2681: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2682: LD_EXP 57
2686: PPUSH
2687: LD_INT 4
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2697: LD_EXP 57
2701: PPUSH
2702: LD_INT 98
2704: PPUSH
2705: LD_INT 36
2707: PPUSH
2708: CALL_OW 118
// hc_name :=  ;
2712: LD_ADDR_OWVAR 26
2716: PUSH
2717: LD_STRING 
2719: ST_TO_ADDR
// hc_gallery :=  ;
2720: LD_ADDR_OWVAR 33
2724: PUSH
2725: LD_STRING 
2727: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: CALL_OW 381
// ruScout = CreateHuman ;
2738: LD_ADDR_EXP 59
2742: PUSH
2743: CALL_OW 44
2747: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2748: LD_EXP 59
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// ComCrawl ( ruScout ) ;
2763: LD_EXP 59
2767: PPUSH
2768: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2772: LD_EXP 59
2776: PPUSH
2777: LD_INT 98
2779: PPUSH
2780: LD_INT 36
2782: PPUSH
2783: CALL_OW 178
// uc_side = 6 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 6
2794: ST_TO_ADDR
// for i in otherKirovUnits do
2795: LD_ADDR_VAR 0 2
2799: PUSH
2800: LD_EXP 60
2804: PUSH
2805: FOR_IN
2806: IFFALSE 2942
// begin SetSide ( i , 6 ) ;
2808: LD_VAR 0 2
2812: PPUSH
2813: LD_INT 6
2815: PPUSH
2816: CALL_OW 235
// if GetClass ( i ) = class_soldier and bunkerCounter > 0 then
2820: LD_VAR 0 2
2824: PPUSH
2825: CALL_OW 257
2829: PUSH
2830: LD_INT 1
2832: EQUAL
2833: PUSH
2834: LD_VAR 0 3
2838: PUSH
2839: LD_INT 0
2841: GREATER
2842: AND
2843: IFFALSE 2919
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) [ bunkerCounter ] ) ;
2845: LD_VAR 0 2
2849: PPUSH
2850: LD_INT 19
2852: PPUSH
2853: LD_INT 22
2855: PUSH
2856: LD_INT 6
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: PUSH
2863: LD_INT 21
2865: PUSH
2866: LD_INT 3
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PUSH
2873: LD_INT 30
2875: PUSH
2876: LD_INT 31
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: PPUSH
2888: CALL_OW 70
2892: PUSH
2893: LD_VAR 0 3
2897: ARRAY
2898: PPUSH
2899: CALL 7805 0 2
// bunkerCounter = bunkerCounter - 1 ;
2903: LD_ADDR_VAR 0 3
2907: PUSH
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: MINUS
2916: ST_TO_ADDR
// end else
2917: GO 2940
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2919: LD_VAR 0 2
2923: PPUSH
2924: LD_INT 159
2926: PPUSH
2927: LD_INT 107
2929: PPUSH
2930: LD_INT 10
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 50
// end ; end ;
2940: GO 2805
2942: POP
2943: POP
// end ;
2944: LD_VAR 0 1
2948: RET
// export function PrepareGrishko ; var i , un , turret ; begin
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
2953: PPUSH
2954: PPUSH
// uc_side = 6 ;
2955: LD_ADDR_OWVAR 20
2959: PUSH
2960: LD_INT 6
2962: ST_TO_ADDR
// uc_nation = 3 ;
2963: LD_ADDR_OWVAR 21
2967: PUSH
2968: LD_INT 3
2970: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
2971: LD_ADDR_EXP 76
2975: PUSH
2976: LD_STRING Grishko
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL 7047 0 2
2986: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
2987: LD_EXP 76
2991: PPUSH
2992: LD_INT 218
2994: PPUSH
2995: LD_INT 108
2997: PPUSH
2998: LD_INT 3
3000: PPUSH
3001: LD_INT 0
3003: PPUSH
3004: CALL_OW 50
// ComHold ( Grishko ) ;
3008: LD_EXP 76
3012: PPUSH
3013: CALL_OW 140
// end ;
3017: LD_VAR 0 1
3021: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3022: LD_INT 0
3024: PPUSH
3025: PPUSH
3026: PPUSH
// uc_side = 3 ;
3027: LD_ADDR_OWVAR 20
3031: PUSH
3032: LD_INT 3
3034: ST_TO_ADDR
// uc_nation = 3 ;
3035: LD_ADDR_OWVAR 21
3039: PUSH
3040: LD_INT 3
3042: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3043: LD_ADDR_VAR 0 2
3047: PUSH
3048: DOUBLE
3049: LD_INT 1
3051: DEC
3052: ST_TO_ADDR
3053: LD_EXP 4
3057: PUSH
3058: FOR_TO
3059: IFFALSE 3211
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3061: LD_EXP 4
3065: PUSH
3066: LD_VAR 0 2
3070: ARRAY
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: PPUSH
3076: LD_EXP 4
3080: PUSH
3081: LD_VAR 0 2
3085: ARRAY
3086: PUSH
3087: LD_INT 2
3089: ARRAY
3090: PPUSH
3091: LD_EXP 4
3095: PUSH
3096: LD_VAR 0 2
3100: ARRAY
3101: PUSH
3102: LD_INT 3
3104: ARRAY
3105: PPUSH
3106: LD_EXP 4
3110: PUSH
3111: LD_VAR 0 2
3115: ARRAY
3116: PUSH
3117: LD_INT 4
3119: ARRAY
3120: PPUSH
3121: LD_EXP 4
3125: PUSH
3126: LD_VAR 0 2
3130: ARRAY
3131: PUSH
3132: LD_INT 5
3134: ARRAY
3135: PPUSH
3136: CALL 50021 0 5
// vehicle = CreateVehicle ;
3140: LD_ADDR_VAR 0 3
3144: PUSH
3145: CALL_OW 45
3149: ST_TO_ADDR
// PlaceUnitXYR ( vehicle , GetX ( beriaDepot ) , GetY ( beriaDepot ) , 7 , false ) ;
3150: LD_VAR 0 3
3154: PPUSH
3155: LD_EXP 55
3159: PPUSH
3160: CALL_OW 250
3164: PPUSH
3165: LD_EXP 55
3169: PPUSH
3170: CALL_OW 251
3174: PPUSH
3175: LD_INT 7
3177: PPUSH
3178: LD_INT 0
3180: PPUSH
3181: CALL_OW 50
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3185: LD_VAR 0 3
3189: PPUSH
3190: LD_EXP 4
3194: PUSH
3195: LD_VAR 0 2
3199: ARRAY
3200: PUSH
3201: LD_INT 6
3203: ARRAY
3204: PPUSH
3205: CALL_OW 234
// end ;
3209: GO 3058
3211: POP
3212: POP
// end ;
3213: LD_VAR 0 1
3217: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3218: LD_INT 0
3220: PPUSH
3221: PPUSH
3222: PPUSH
3223: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: LD_STRING 02_OtherBuildings_4
3231: PPUSH
3232: EMPTY
3233: PPUSH
3234: CALL_OW 30
3238: ST_TO_ADDR
// uc_side = 3 ;
3239: LD_ADDR_OWVAR 20
3243: PUSH
3244: LD_INT 3
3246: ST_TO_ADDR
// for i := 1 to otherBuildings do
3247: LD_ADDR_VAR 0 2
3251: PUSH
3252: DOUBLE
3253: LD_INT 1
3255: DEC
3256: ST_TO_ADDR
3257: LD_VAR 0 3
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3524
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3265: LD_ADDR_OWVAR 21
3269: PUSH
3270: LD_VAR 0 3
3274: PUSH
3275: LD_VAR 0 2
3279: ARRAY
3280: PUSH
3281: LD_INT 6
3283: ARRAY
3284: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3285: LD_ADDR_OWVAR 42
3289: PUSH
3290: LD_VAR 0 3
3294: PUSH
3295: LD_VAR 0 2
3299: ARRAY
3300: PUSH
3301: LD_INT 1
3303: ARRAY
3304: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3305: LD_ADDR_OWVAR 43
3309: PUSH
3310: LD_VAR 0 3
3314: PUSH
3315: LD_VAR 0 2
3319: ARRAY
3320: PUSH
3321: LD_INT 5
3323: ARRAY
3324: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3325: LD_ADDR_VAR 0 4
3329: PUSH
3330: LD_VAR 0 3
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PUSH
3341: LD_INT 2
3343: ARRAY
3344: PPUSH
3345: LD_VAR 0 3
3349: PUSH
3350: LD_VAR 0 2
3354: ARRAY
3355: PUSH
3356: LD_INT 3
3358: ARRAY
3359: PPUSH
3360: LD_VAR 0 3
3364: PUSH
3365: LD_VAR 0 2
3369: ARRAY
3370: PUSH
3371: LD_INT 4
3373: ARRAY
3374: PPUSH
3375: CALL_OW 47
3379: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3380: LD_VAR 0 4
3384: PPUSH
3385: LD_VAR 0 3
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PUSH
3396: LD_INT 7
3398: ARRAY
3399: PPUSH
3400: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3404: LD_VAR 0 4
3408: PPUSH
3409: CALL_OW 266
3413: PUSH
3414: LD_INT 0
3416: PUSH
3417: LD_INT 1
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: IN
3424: IFFALSE 3522
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3426: LD_VAR 0 4
3430: PPUSH
3431: CALL_OW 274
3435: PPUSH
3436: LD_INT 1
3438: PPUSH
3439: LD_VAR 0 3
3443: PUSH
3444: LD_VAR 0 2
3448: ARRAY
3449: PUSH
3450: LD_INT 8
3452: ARRAY
3453: PPUSH
3454: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 274
3467: PPUSH
3468: LD_INT 1
3470: PPUSH
3471: LD_VAR 0 3
3475: PUSH
3476: LD_VAR 0 2
3480: ARRAY
3481: PUSH
3482: LD_INT 9
3484: ARRAY
3485: PPUSH
3486: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3490: LD_VAR 0 4
3494: PPUSH
3495: CALL_OW 274
3499: PPUSH
3500: LD_INT 1
3502: PPUSH
3503: LD_VAR 0 3
3507: PUSH
3508: LD_VAR 0 2
3512: ARRAY
3513: PUSH
3514: LD_INT 10
3516: ARRAY
3517: PPUSH
3518: CALL_OW 277
// end ; end ;
3522: GO 3262
3524: POP
3525: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: LD_STRING 02_AmericanBuildings_5
3533: PPUSH
3534: EMPTY
3535: PPUSH
3536: CALL_OW 30
3540: ST_TO_ADDR
// uc_side = 1 ;
3541: LD_ADDR_OWVAR 20
3545: PUSH
3546: LD_INT 1
3548: ST_TO_ADDR
// uc_nation = 1 ;
3549: LD_ADDR_OWVAR 21
3553: PUSH
3554: LD_INT 1
3556: ST_TO_ADDR
// for i := 1 to otherBuildings do
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: DOUBLE
3563: LD_INT 1
3565: DEC
3566: ST_TO_ADDR
3567: LD_VAR 0 3
3571: PUSH
3572: FOR_TO
3573: IFFALSE 3777
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3575: LD_ADDR_OWVAR 42
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: LD_VAR 0 2
3589: ARRAY
3590: PUSH
3591: LD_INT 1
3593: ARRAY
3594: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3595: LD_ADDR_OWVAR 43
3599: PUSH
3600: LD_VAR 0 3
3604: PUSH
3605: LD_VAR 0 2
3609: ARRAY
3610: PUSH
3611: LD_INT 5
3613: ARRAY
3614: ST_TO_ADDR
// if bc_type = b_breastwork then
3615: LD_OWVAR 42
3619: PUSH
3620: LD_INT 31
3622: EQUAL
3623: IFFALSE 3696
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3625: LD_ADDR_VAR 0 4
3629: PUSH
3630: LD_VAR 0 3
3634: PUSH
3635: LD_VAR 0 2
3639: ARRAY
3640: PUSH
3641: LD_INT 2
3643: ARRAY
3644: PPUSH
3645: LD_VAR 0 3
3649: PUSH
3650: LD_VAR 0 2
3654: ARRAY
3655: PUSH
3656: LD_INT 3
3658: ARRAY
3659: PPUSH
3660: LD_VAR 0 3
3664: PUSH
3665: LD_VAR 0 2
3669: ARRAY
3670: PUSH
3671: LD_INT 4
3673: ARRAY
3674: PPUSH
3675: CALL_OW 47
3679: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3680: LD_EXP 40
3684: PPUSH
3685: LD_VAR 0 4
3689: PPUSH
3690: CALL 7895 0 2
// end else
3694: GO 3751
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3696: LD_ADDR_VAR 0 4
3700: PUSH
3701: LD_VAR 0 3
3705: PUSH
3706: LD_VAR 0 2
3710: ARRAY
3711: PUSH
3712: LD_INT 2
3714: ARRAY
3715: PPUSH
3716: LD_VAR 0 3
3720: PUSH
3721: LD_VAR 0 2
3725: ARRAY
3726: PUSH
3727: LD_INT 3
3729: ARRAY
3730: PPUSH
3731: LD_VAR 0 3
3735: PUSH
3736: LD_VAR 0 2
3740: ARRAY
3741: PUSH
3742: LD_INT 4
3744: ARRAY
3745: PPUSH
3746: CALL_OW 47
3750: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3751: LD_VAR 0 4
3755: PPUSH
3756: LD_VAR 0 3
3760: PUSH
3761: LD_VAR 0 2
3765: ARRAY
3766: PUSH
3767: LD_INT 7
3769: ARRAY
3770: PPUSH
3771: CALL_OW 234
// end ;
3775: GO 3572
3777: POP
3778: POP
// end ;
3779: LD_VAR 0 1
3783: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3784: LD_INT 0
3786: PPUSH
3787: PPUSH
// secondBaseTeam = [ ] ;
3788: LD_ADDR_EXP 72
3792: PUSH
3793: EMPTY
3794: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3795: LD_INT 226
3797: PPUSH
3798: LD_INT 109
3800: PPUSH
3801: LD_INT 6
3803: PPUSH
3804: CALL_OW 441
// uc_side = 6 ;
3808: LD_ADDR_OWVAR 20
3812: PUSH
3813: LD_INT 6
3815: ST_TO_ADDR
// uc_nation = 3 ;
3816: LD_ADDR_OWVAR 21
3820: PUSH
3821: LD_INT 3
3823: ST_TO_ADDR
// hc_name =  ;
3824: LD_ADDR_OWVAR 26
3828: PUSH
3829: LD_STRING 
3831: ST_TO_ADDR
// hc_gallery =  ;
3832: LD_ADDR_OWVAR 33
3836: PUSH
3837: LD_STRING 
3839: ST_TO_ADDR
// for i := 1 to 3 do
3840: LD_ADDR_VAR 0 2
3844: PUSH
3845: DOUBLE
3846: LD_INT 1
3848: DEC
3849: ST_TO_ADDR
3850: LD_INT 3
3852: PUSH
3853: FOR_TO
3854: IFFALSE 3907
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3856: LD_INT 0
3858: PPUSH
3859: LD_EXP 40
3863: PPUSH
3864: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3868: LD_ADDR_EXP 72
3872: PUSH
3873: LD_EXP 72
3877: PUSH
3878: CALL_OW 44
3882: ADD
3883: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
3884: LD_EXP 72
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: PPUSH
3895: LD_INT 20
3897: PPUSH
3898: LD_INT 0
3900: PPUSH
3901: CALL_OW 49
// end ;
3905: GO 3853
3907: POP
3908: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
3909: LD_INT 0
3911: PPUSH
3912: LD_EXP 40
3916: PPUSH
3917: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3921: LD_ADDR_EXP 72
3925: PUSH
3926: LD_EXP 72
3930: PUSH
3931: CALL_OW 44
3935: ADD
3936: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
3937: LD_EXP 72
3941: PUSH
3942: LD_INT 4
3944: ARRAY
3945: PPUSH
3946: LD_INT 20
3948: PPUSH
3949: LD_INT 0
3951: PPUSH
3952: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
3956: LD_INT 0
3958: PPUSH
3959: LD_EXP 40
3963: PPUSH
3964: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3968: LD_ADDR_EXP 72
3972: PUSH
3973: LD_EXP 72
3977: PUSH
3978: CALL_OW 44
3982: ADD
3983: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
3984: LD_EXP 72
3988: PUSH
3989: LD_INT 5
3991: ARRAY
3992: PPUSH
3993: LD_INT 20
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4003: LD_EXP 72
4007: PPUSH
4008: LD_INT 214
4010: PPUSH
4011: LD_INT 105
4013: PPUSH
4014: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4018: LD_EXP 72
4022: PPUSH
4023: LD_INT 25
4025: PUSH
4026: LD_INT 2
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PPUSH
4033: CALL_OW 72
4037: PPUSH
4038: LD_INT 0
4040: PPUSH
4041: LD_INT 222
4043: PPUSH
4044: LD_INT 115
4046: PPUSH
4047: LD_INT 0
4049: PPUSH
4050: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4054: LD_EXP 72
4058: PPUSH
4059: LD_INT 25
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PPUSH
4069: CALL_OW 72
4073: PPUSH
4074: LD_INT 224
4076: PPUSH
4077: LD_INT 107
4079: PPUSH
4080: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4084: LD_EXP 72
4088: PPUSH
4089: LD_INT 25
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 72
4103: PPUSH
4104: LD_INT 228
4106: PPUSH
4107: LD_INT 110
4109: PPUSH
4110: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4114: LD_EXP 72
4118: PPUSH
4119: LD_INT 25
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 72
4133: PPUSH
4134: LD_INT 4
4136: PPUSH
4137: LD_INT 216
4139: PPUSH
4140: LD_INT 114
4142: PPUSH
4143: LD_INT 0
4145: PPUSH
4146: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4150: LD_EXP 72
4154: PPUSH
4155: LD_INT 25
4157: PUSH
4158: LD_INT 2
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 72
4169: PPUSH
4170: LD_INT 31
4172: PPUSH
4173: LD_INT 215
4175: PPUSH
4176: LD_INT 103
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4186: LD_EXP 72
4190: PPUSH
4191: LD_INT 25
4193: PUSH
4194: LD_INT 2
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 72
4205: PPUSH
4206: LD_INT 31
4208: PPUSH
4209: LD_INT 227
4211: PPUSH
4212: LD_INT 116
4214: PPUSH
4215: LD_INT 5
4217: PPUSH
4218: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4222: LD_EXP 72
4226: PPUSH
4227: LD_INT 25
4229: PUSH
4230: LD_INT 2
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PPUSH
4237: CALL_OW 72
4241: PPUSH
4242: LD_INT 29
4244: PPUSH
4245: LD_INT 226
4247: PPUSH
4248: LD_INT 109
4250: PPUSH
4251: LD_INT 3
4253: PPUSH
4254: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4258: LD_EXP 72
4262: PPUSH
4263: LD_INT 25
4265: PUSH
4266: LD_INT 2
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PPUSH
4273: CALL_OW 72
4277: PPUSH
4278: LD_INT 208
4280: PPUSH
4281: LD_INT 106
4283: PPUSH
4284: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4288: LD_EXP 72
4292: PPUSH
4293: LD_INT 25
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PPUSH
4303: CALL_OW 72
4307: PPUSH
4308: LD_INT 209
4310: PPUSH
4311: LD_INT 105
4313: PPUSH
4314: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4318: LD_EXP 72
4322: PUSH
4323: LD_INT 5
4325: ARRAY
4326: PPUSH
4327: LD_INT 209
4329: PPUSH
4330: LD_INT 105
4332: PPUSH
4333: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4337: LD_EXP 72
4341: PUSH
4342: LD_INT 5
4344: ARRAY
4345: PPUSH
4346: LD_INT 208
4348: PPUSH
4349: LD_INT 106
4351: PPUSH
4352: CALL_OW 178
// end ;
4356: LD_VAR 0 1
4360: RET
// export function SpawnKirovSupport ; var i , un ; begin
4361: LD_INT 0
4363: PPUSH
4364: PPUSH
4365: PPUSH
// uc_side = 6 ;
4366: LD_ADDR_OWVAR 20
4370: PUSH
4371: LD_INT 6
4373: ST_TO_ADDR
// uc_nation = 3 ;
4374: LD_ADDR_OWVAR 21
4378: PUSH
4379: LD_INT 3
4381: ST_TO_ADDR
// hc_name =  ;
4382: LD_ADDR_OWVAR 26
4386: PUSH
4387: LD_STRING 
4389: ST_TO_ADDR
// hc_gallery :=  ;
4390: LD_ADDR_OWVAR 33
4394: PUSH
4395: LD_STRING 
4397: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: DOUBLE
4404: LD_INT 1
4406: DEC
4407: ST_TO_ADDR
4408: LD_EXP 74
4412: PUSH
4413: FOR_TO
4414: IFFALSE 4502
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4416: LD_INT 0
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: LD_INT 4
4424: PPUSH
4425: CALL_OW 12
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_INT 2
4435: PPUSH
4436: CALL_OW 12
4440: PPUSH
4441: CALL_OW 380
// un = CreateHuman ;
4445: LD_ADDR_VAR 0 3
4449: PUSH
4450: CALL_OW 44
4454: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4455: LD_ADDR_EXP 73
4459: PUSH
4460: LD_EXP 73
4464: PUSH
4465: LD_VAR 0 3
4469: ADD
4470: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4471: LD_VAR 0 3
4475: PPUSH
4476: LD_INT 20
4478: PPUSH
4479: LD_INT 0
4481: PPUSH
4482: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4486: LD_VAR 0 3
4490: PPUSH
4491: LD_EXP 64
4495: PPUSH
4496: CALL_OW 120
// end ;
4500: GO 4413
4502: POP
4503: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: DOUBLE
4510: LD_INT 1
4512: DEC
4513: ST_TO_ADDR
4514: LD_EXP 75
4518: PUSH
4519: LD_INT 1
4521: ARRAY
4522: PUSH
4523: LD_INT 4
4525: PLUS
4526: PUSH
4527: FOR_TO
4528: IFFALSE 4626
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4530: LD_INT 0
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 3
4541: PPUSH
4542: CALL_OW 12
4546: PPUSH
4547: CALL_OW 380
// un = CreateHuman ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: CALL_OW 44
4560: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4561: LD_VAR 0 3
4565: PPUSH
4566: LD_INT 20
4568: PPUSH
4569: LD_INT 0
4571: PPUSH
4572: CALL_OW 49
// if i > kirovBunkersToOccupy then
4576: LD_VAR 0 2
4580: PUSH
4581: LD_EXP 68
4585: GREATER
4586: IFFALSE 4604
// ComEnterUnit ( un , ru2_bar2 ) else
4588: LD_VAR 0 3
4592: PPUSH
4593: LD_EXP 65
4597: PPUSH
4598: CALL_OW 120
4602: GO 4624
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4604: LD_VAR 0 3
4608: PPUSH
4609: LD_EXP 68
4613: PUSH
4614: LD_VAR 0 2
4618: ARRAY
4619: PPUSH
4620: CALL_OW 120
// end ;
4624: GO 4527
4626: POP
4627: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: DOUBLE
4634: LD_INT 1
4636: DEC
4637: ST_TO_ADDR
4638: LD_EXP 75
4642: PUSH
4643: LD_INT 3
4645: ARRAY
4646: PUSH
4647: FOR_TO
4648: IFFALSE 4712
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4650: LD_INT 0
4652: PPUSH
4653: LD_INT 3
4655: PPUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: CALL_OW 12
4666: PPUSH
4667: CALL_OW 380
// un = CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4681: LD_VAR 0 3
4685: PPUSH
4686: LD_INT 20
4688: PPUSH
4689: LD_INT 0
4691: PPUSH
4692: CALL_OW 49
// ComEnterUnit ( un , kirovFactory ) ;
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_EXP 21
4705: PPUSH
4706: CALL_OW 120
// end ;
4710: GO 4647
4712: POP
4713: POP
// for i := 1 to neededUnitsSpawn [ 4 ] do
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: DOUBLE
4720: LD_INT 1
4722: DEC
4723: ST_TO_ADDR
4724: LD_EXP 75
4728: PUSH
4729: LD_INT 4
4731: ARRAY
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4840
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 4
4741: PPUSH
4742: LD_INT 1
4744: PPUSH
4745: LD_INT 3
4747: PPUSH
4748: CALL_OW 12
4752: PPUSH
4753: CALL_OW 380
// un = CreateHuman ;
4757: LD_ADDR_VAR 0 3
4761: PUSH
4762: CALL_OW 44
4766: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4767: LD_VAR 0 3
4771: PPUSH
4772: LD_INT 20
4774: PPUSH
4775: LD_INT 0
4777: PPUSH
4778: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4782: LD_VAR 0 3
4786: PPUSH
4787: LD_INT 19
4789: PPUSH
4790: LD_INT 22
4792: PUSH
4793: LD_INT 6
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 21
4802: PUSH
4803: LD_INT 3
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 30
4812: PUSH
4813: LD_INT 7
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: PPUSH
4825: CALL_OW 70
4829: PUSH
4830: LD_INT 1
4832: ARRAY
4833: PPUSH
4834: CALL_OW 120
// end ;
4838: GO 4733
4840: POP
4841: POP
// end ;
4842: LD_VAR 0 1
4846: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
4847: LD_INT 0
4849: PPUSH
4850: PPUSH
4851: PPUSH
// survivorsArabianAttack = [ ] ;
4852: LD_ADDR_EXP 73
4856: PUSH
4857: EMPTY
4858: ST_TO_ADDR
// limit = 9 ;
4859: LD_ADDR_VAR 0 2
4863: PUSH
4864: LD_INT 9
4866: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
4867: LD_ADDR_EXP 73
4871: PUSH
4872: LD_EXP 73
4876: PUSH
4877: LD_EXP 57
4881: ADD
4882: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
4883: LD_EXP 48
4887: PPUSH
4888: CALL_OW 302
4892: PUSH
4893: LD_EXP 48
4897: PPUSH
4898: CALL_OW 255
4902: PUSH
4903: LD_INT 6
4905: EQUAL
4906: AND
4907: IFFALSE 4939
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
4909: LD_ADDR_EXP 73
4913: PUSH
4914: LD_EXP 73
4918: PUSH
4919: LD_EXP 48
4923: ADD
4924: ST_TO_ADDR
// limit = limit - 1 ;
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: LD_VAR 0 2
4934: PUSH
4935: LD_INT 1
4937: MINUS
4938: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
4939: LD_EXP 49
4943: PPUSH
4944: CALL_OW 302
4948: PUSH
4949: LD_EXP 49
4953: PPUSH
4954: CALL_OW 255
4958: PUSH
4959: LD_INT 6
4961: EQUAL
4962: AND
4963: IFFALSE 4995
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
4965: LD_ADDR_EXP 73
4969: PUSH
4970: LD_EXP 73
4974: PUSH
4975: LD_EXP 49
4979: ADD
4980: ST_TO_ADDR
// limit = limit - 1 ;
4981: LD_ADDR_VAR 0 2
4985: PUSH
4986: LD_VAR 0 2
4990: PUSH
4991: LD_INT 1
4993: MINUS
4994: ST_TO_ADDR
// end ; for unit in other_survivors do
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_EXP 51
5004: PUSH
5005: FOR_IN
5006: IFFALSE 5066
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5008: LD_VAR 0 3
5012: PPUSH
5013: CALL_OW 302
5017: PUSH
5018: LD_VAR 0 3
5022: PPUSH
5023: CALL_OW 255
5027: PUSH
5028: LD_INT 6
5030: EQUAL
5031: AND
5032: IFFALSE 5064
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5034: LD_ADDR_EXP 73
5038: PUSH
5039: LD_EXP 73
5043: PUSH
5044: LD_VAR 0 3
5048: ADD
5049: ST_TO_ADDR
// limit = limit - 1 ;
5050: LD_ADDR_VAR 0 2
5054: PUSH
5055: LD_VAR 0 2
5059: PUSH
5060: LD_INT 1
5062: MINUS
5063: ST_TO_ADDR
// end ; end ;
5064: GO 5005
5066: POP
5067: POP
// for unit in otherBeriaUnits do
5068: LD_ADDR_VAR 0 3
5072: PUSH
5073: LD_EXP 53
5077: PUSH
5078: FOR_IN
5079: IFFALSE 5139
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5081: LD_VAR 0 3
5085: PPUSH
5086: CALL_OW 302
5090: PUSH
5091: LD_VAR 0 3
5095: PPUSH
5096: CALL_OW 255
5100: PUSH
5101: LD_INT 6
5103: EQUAL
5104: AND
5105: IFFALSE 5137
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5107: LD_ADDR_EXP 73
5111: PUSH
5112: LD_EXP 73
5116: PUSH
5117: LD_VAR 0 3
5121: ADD
5122: ST_TO_ADDR
// limit = limit - 1 ;
5123: LD_ADDR_VAR 0 2
5127: PUSH
5128: LD_VAR 0 2
5132: PUSH
5133: LD_INT 1
5135: MINUS
5136: ST_TO_ADDR
// end ; end ;
5137: GO 5078
5139: POP
5140: POP
// if limit > 0 then
5141: LD_VAR 0 2
5145: PUSH
5146: LD_INT 0
5148: GREATER
5149: IFFALSE 5161
// survivorsToSpawn = limit ;
5151: LD_ADDR_EXP 74
5155: PUSH
5156: LD_VAR 0 2
5160: ST_TO_ADDR
// end ;
5161: LD_VAR 0 1
5165: RET
// export function PrepareScholtze ; var rndPos , x , y ; begin
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
5170: PPUSH
5171: PPUSH
// uc_side = 8 ;
5172: LD_ADDR_OWVAR 20
5176: PUSH
5177: LD_INT 8
5179: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5180: LD_ADDR_EXP 50
5184: PUSH
5185: LD_STRING Scholtze
5187: PPUSH
5188: LD_INT 0
5190: PPUSH
5191: CALL 7047 0 2
5195: ST_TO_ADDR
// case Difficulty of 1 :
5196: LD_OWVAR 67
5200: PUSH
5201: LD_INT 1
5203: DOUBLE
5204: EQUAL
5205: IFTRUE 5209
5207: GO 5245
5209: POP
// PlaceUnitXYR ( Scholtze , scholtzeSpawnPositions [ 1 ] , scholtzeSpawnPositions [ 2 ] , 3 , true ) ; 2 :
5210: LD_EXP 50
5214: PPUSH
5215: LD_EXP 36
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PPUSH
5224: LD_EXP 36
5228: PUSH
5229: LD_INT 2
5231: ARRAY
5232: PPUSH
5233: LD_INT 3
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 50
5243: GO 5554
5245: LD_INT 2
5247: DOUBLE
5248: EQUAL
5249: IFTRUE 5253
5251: GO 5401
5253: POP
// begin scholtzeSpawnNearAmericans = true ;
5254: LD_ADDR_EXP 6
5258: PUSH
5259: LD_INT 1
5261: ST_TO_ADDR
// rndPos = rand ( 1 , scholtzeSpawnPositions / 2 ) ;
5262: LD_ADDR_VAR 0 2
5266: PUSH
5267: LD_INT 1
5269: PPUSH
5270: LD_EXP 36
5274: PUSH
5275: LD_INT 2
5277: DIVREAL
5278: PPUSH
5279: CALL_OW 12
5283: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos [ 1 ] ] ;
5284: LD_ADDR_VAR 0 3
5288: PUSH
5289: LD_EXP 36
5293: PUSH
5294: LD_VAR 0 2
5298: PUSH
5299: LD_INT 1
5301: ARRAY
5302: ARRAY
5303: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos [ 2 ] ] ;
5304: LD_ADDR_VAR 0 4
5308: PUSH
5309: LD_EXP 36
5313: PUSH
5314: LD_VAR 0 2
5318: PUSH
5319: LD_INT 2
5321: ARRAY
5322: ARRAY
5323: ST_TO_ADDR
// if rndPos > 1 then
5324: LD_VAR 0 2
5328: PUSH
5329: LD_INT 1
5331: GREATER
5332: IFFALSE 5374
// begin x = scholtzeSpawnPositions [ rndPos + 1 ] ;
5334: LD_ADDR_VAR 0 3
5338: PUSH
5339: LD_EXP 36
5343: PUSH
5344: LD_VAR 0 2
5348: PUSH
5349: LD_INT 1
5351: PLUS
5352: ARRAY
5353: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 2 ] ;
5354: LD_ADDR_VAR 0 4
5358: PUSH
5359: LD_EXP 36
5363: PUSH
5364: LD_VAR 0 2
5368: PUSH
5369: LD_INT 2
5371: PLUS
5372: ARRAY
5373: ST_TO_ADDR
// end ; PlaceUnitXYR ( Scholtze , x , y , 3 , true ) ;
5374: LD_EXP 50
5378: PPUSH
5379: LD_VAR 0 3
5383: PPUSH
5384: LD_VAR 0 4
5388: PPUSH
5389: LD_INT 3
5391: PPUSH
5392: LD_INT 1
5394: PPUSH
5395: CALL_OW 50
// end ; 3 :
5399: GO 5554
5401: LD_INT 3
5403: DOUBLE
5404: EQUAL
5405: IFTRUE 5409
5407: GO 5553
5409: POP
// begin rndPos = rand ( 1 , scholtzeSpawnPositions / 2 ) ;
5410: LD_ADDR_VAR 0 2
5414: PUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_EXP 36
5422: PUSH
5423: LD_INT 2
5425: DIVREAL
5426: PPUSH
5427: CALL_OW 12
5431: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos ] ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: LD_EXP 36
5441: PUSH
5442: LD_VAR 0 2
5446: ARRAY
5447: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 1 ] ;
5448: LD_ADDR_VAR 0 4
5452: PUSH
5453: LD_EXP 36
5457: PUSH
5458: LD_VAR 0 2
5462: PUSH
5463: LD_INT 1
5465: PLUS
5466: ARRAY
5467: ST_TO_ADDR
// if rndPos > 1 then
5468: LD_VAR 0 2
5472: PUSH
5473: LD_INT 1
5475: GREATER
5476: IFFALSE 5526
// begin scholtzeSpawnNearAmericans = true ;
5478: LD_ADDR_EXP 6
5482: PUSH
5483: LD_INT 1
5485: ST_TO_ADDR
// x = scholtzeSpawnPositions [ rndPos + 1 ] ;
5486: LD_ADDR_VAR 0 3
5490: PUSH
5491: LD_EXP 36
5495: PUSH
5496: LD_VAR 0 2
5500: PUSH
5501: LD_INT 1
5503: PLUS
5504: ARRAY
5505: ST_TO_ADDR
// y = scholtzeSpawnPositions [ rndPos + 2 ] ;
5506: LD_ADDR_VAR 0 4
5510: PUSH
5511: LD_EXP 36
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: LD_INT 2
5523: PLUS
5524: ARRAY
5525: ST_TO_ADDR
// end ; PlaceUnitXYR ( Scholtze , x , y , 3 , true ) ;
5526: LD_EXP 50
5530: PPUSH
5531: LD_VAR 0 3
5535: PPUSH
5536: LD_VAR 0 4
5540: PPUSH
5541: LD_INT 3
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: CALL_OW 50
// end ; end ;
5551: GO 5554
5553: POP
// end ; end_of_file
5554: LD_VAR 0 1
5558: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5559: LD_INT 0
5561: PPUSH
// amSupportTroops = [ ] ;
5562: LD_ADDR_EXP 78
5566: PUSH
5567: EMPTY
5568: ST_TO_ADDR
// PrepareOmicronBase ;
5569: CALL 5578 0 0
// end ;
5573: LD_VAR 0 1
5577: RET
// function PrepareOmicronBase ; var base ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 6 , 2 , 3 , 1 ] ) ;
5582: LD_ADDR_EXP 80
5586: PUSH
5587: LD_INT 64
5589: PPUSH
5590: LD_INT 13
5592: PPUSH
5593: LD_STRING omikron
5595: PPUSH
5596: LD_INT 1
5598: PUSH
5599: LD_INT 2
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: LD_OWVAR 67
5614: ARRAY
5615: PPUSH
5616: LD_INT 3000
5618: PUSH
5619: LD_INT 3000
5621: PUSH
5622: LD_INT 0
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: PPUSH
5630: LD_INT 6
5632: PUSH
5633: LD_INT 2
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: LD_INT 1
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL 53430 0 6
5652: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , amBase ) ;
5653: LD_ADDR_EXP 87
5657: PUSH
5658: LD_EXP 87
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: LD_EXP 80
5670: PPUSH
5671: CALL_OW 1
5675: ST_TO_ADDR
// case Difficulty of 2 :
5676: LD_OWVAR 67
5680: PUSH
5681: LD_INT 2
5683: DOUBLE
5684: EQUAL
5685: IFTRUE 5689
5687: GO 5705
5689: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5690: LD_INT 51
5692: PPUSH
5693: LD_INT 1
5695: PPUSH
5696: LD_INT 1
5698: PPUSH
5699: CALL_OW 322
// end ; 3 :
5703: GO 5743
5705: LD_INT 3
5707: DOUBLE
5708: EQUAL
5709: IFTRUE 5713
5711: GO 5742
5713: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5714: LD_INT 49
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5727: LD_INT 51
5729: PPUSH
5730: LD_INT 1
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: CALL_OW 322
// end ; end ;
5740: GO 5743
5742: POP
// end ;
5743: LD_VAR 0 1
5747: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5748: LD_INT 0
5750: PPUSH
5751: PPUSH
5752: PPUSH
5753: PPUSH
// amIntroUnits = [ ] ;
5754: LD_ADDR_EXP 77
5758: PUSH
5759: EMPTY
5760: ST_TO_ADDR
// uc_side = 1 ;
5761: LD_ADDR_OWVAR 20
5765: PUSH
5766: LD_INT 1
5768: ST_TO_ADDR
// uc_nation = nation_american ;
5769: LD_ADDR_OWVAR 21
5773: PUSH
5774: LD_INT 1
5776: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5777: LD_ADDR_OWVAR 37
5781: PUSH
5782: LD_INT 3
5784: ST_TO_ADDR
// vc_control = control_manual ;
5785: LD_ADDR_OWVAR 38
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// vc_engine = engine_combustion ;
5793: LD_ADDR_OWVAR 39
5797: PUSH
5798: LD_INT 1
5800: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5801: LD_ADDR_OWVAR 40
5805: PUSH
5806: LD_INT 5
5808: ST_TO_ADDR
// veh = CreateVehicle ;
5809: LD_ADDR_VAR 0 3
5813: PUSH
5814: CALL_OW 45
5818: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5819: LD_VAR 0 3
5823: PPUSH
5824: LD_INT 4
5826: PPUSH
5827: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5831: LD_ADDR_EXP 77
5835: PUSH
5836: LD_EXP 77
5840: PUSH
5841: LD_VAR 0 3
5845: ADD
5846: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5847: LD_VAR 0 3
5851: PPUSH
5852: LD_INT 5
5854: PPUSH
5855: LD_INT 0
5857: PPUSH
5858: CALL_OW 49
// for i := 1 to 5 do
5862: LD_ADDR_VAR 0 2
5866: PUSH
5867: DOUBLE
5868: LD_INT 1
5870: DEC
5871: ST_TO_ADDR
5872: LD_INT 5
5874: PUSH
5875: FOR_TO
5876: IFFALSE 5973
// begin hc_name :=  ;
5878: LD_ADDR_OWVAR 26
5882: PUSH
5883: LD_STRING 
5885: ST_TO_ADDR
// hc_gallery :=  ;
5886: LD_ADDR_OWVAR 33
5890: PUSH
5891: LD_STRING 
5893: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5894: LD_INT 0
5896: PPUSH
5897: LD_INT 1
5899: PPUSH
5900: CALL_OW 381
// human = CreateHuman ;
5904: LD_ADDR_VAR 0 4
5908: PUSH
5909: CALL_OW 44
5913: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5914: LD_ADDR_EXP 77
5918: PUSH
5919: LD_EXP 77
5923: PUSH
5924: LD_VAR 0 4
5928: ADD
5929: ST_TO_ADDR
// if i < 5 then
5930: LD_VAR 0 2
5934: PUSH
5935: LD_INT 5
5937: LESS
5938: IFFALSE 5957
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5940: LD_VAR 0 4
5944: PPUSH
5945: LD_INT 5
5947: PPUSH
5948: LD_INT 0
5950: PPUSH
5951: CALL_OW 49
5955: GO 5971
// begin PlaceHumanInUnit ( human , veh ) ;
5957: LD_VAR 0 4
5961: PPUSH
5962: LD_VAR 0 3
5966: PPUSH
5967: CALL_OW 52
// end ; end ;
5971: GO 5875
5973: POP
5974: POP
// end ;
5975: LD_VAR 0 1
5979: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5980: LD_INT 0
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
// uc_side := 1 ;
5987: LD_ADDR_OWVAR 20
5991: PUSH
5992: LD_INT 1
5994: ST_TO_ADDR
// uc_nation := 1 ;
5995: LD_ADDR_OWVAR 21
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// hc_name :=  ;
6003: LD_ADDR_OWVAR 26
6007: PUSH
6008: LD_STRING 
6010: ST_TO_ADDR
// hc_gallery :=  ;
6011: LD_ADDR_OWVAR 33
6015: PUSH
6016: LD_STRING 
6018: ST_TO_ADDR
// for i := 1 to soldiersAmount do
6019: LD_ADDR_VAR 0 6
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_VAR 0 1
6033: PUSH
6034: FOR_TO
6035: IFFALSE 6094
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_EXP 40
6044: PPUSH
6045: CALL_OW 381
// un = CreateHuman ;
6049: LD_ADDR_VAR 0 7
6053: PUSH
6054: CALL_OW 44
6058: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6059: LD_ADDR_EXP 78
6063: PUSH
6064: LD_EXP 78
6068: PUSH
6069: LD_VAR 0 7
6073: ADD
6074: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6075: LD_VAR 0 7
6079: PPUSH
6080: LD_VAR 0 4
6084: PPUSH
6085: LD_INT 0
6087: PPUSH
6088: CALL_OW 49
// end ;
6092: GO 6034
6094: POP
6095: POP
// for i := 1 to scientistsAmount do
6096: LD_ADDR_VAR 0 6
6100: PUSH
6101: DOUBLE
6102: LD_INT 1
6104: DEC
6105: ST_TO_ADDR
6106: LD_VAR 0 2
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6171
// begin PrepareScientist ( false , enemySkillLevel ) ;
6114: LD_INT 0
6116: PPUSH
6117: LD_EXP 40
6121: PPUSH
6122: CALL_OW 384
// un = CreateHuman ;
6126: LD_ADDR_VAR 0 7
6130: PUSH
6131: CALL_OW 44
6135: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6136: LD_ADDR_EXP 78
6140: PUSH
6141: LD_EXP 78
6145: PUSH
6146: LD_VAR 0 7
6150: ADD
6151: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6152: LD_VAR 0 7
6156: PPUSH
6157: LD_VAR 0 4
6161: PPUSH
6162: LD_INT 0
6164: PPUSH
6165: CALL_OW 49
// end ;
6169: GO 6111
6171: POP
6172: POP
// for i := 1 to vehiclesAmount do
6173: LD_ADDR_VAR 0 6
6177: PUSH
6178: DOUBLE
6179: LD_INT 1
6181: DEC
6182: ST_TO_ADDR
6183: LD_VAR 0 3
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6343
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6191: LD_ADDR_OWVAR 40
6195: PUSH
6196: LD_INT 2
6198: PUSH
6199: LD_INT 4
6201: PUSH
6202: LD_INT 3
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 1
6212: PPUSH
6213: LD_INT 3
6215: PPUSH
6216: CALL_OW 12
6220: ARRAY
6221: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6222: LD_ADDR_OWVAR 37
6226: PUSH
6227: LD_INT 3
6229: ST_TO_ADDR
// vc_control = control_manual ;
6230: LD_ADDR_OWVAR 38
6234: PUSH
6235: LD_INT 1
6237: ST_TO_ADDR
// vc_engine = engine_combustion ;
6238: LD_ADDR_OWVAR 39
6242: PUSH
6243: LD_INT 1
6245: ST_TO_ADDR
// veh = CreateVehicle ;
6246: LD_ADDR_VAR 0 8
6250: PUSH
6251: CALL_OW 45
6255: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6256: LD_ADDR_EXP 78
6260: PUSH
6261: LD_EXP 78
6265: PUSH
6266: LD_VAR 0 8
6270: ADD
6271: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6272: LD_VAR 0 8
6276: PPUSH
6277: LD_VAR 0 4
6281: PPUSH
6282: LD_INT 0
6284: PPUSH
6285: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6289: LD_INT 0
6291: PPUSH
6292: LD_EXP 40
6296: PPUSH
6297: CALL_OW 383
// un = CreateHuman ;
6301: LD_ADDR_VAR 0 7
6305: PUSH
6306: CALL_OW 44
6310: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6311: LD_ADDR_EXP 78
6315: PUSH
6316: LD_EXP 78
6320: PUSH
6321: LD_VAR 0 7
6325: ADD
6326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6327: LD_VAR 0 7
6331: PPUSH
6332: LD_VAR 0 8
6336: PPUSH
6337: CALL_OW 52
// end ;
6341: GO 6188
6343: POP
6344: POP
// case area of NorthAmericanSpawnArea :
6345: LD_VAR 0 4
6349: PUSH
6350: LD_INT 7
6352: DOUBLE
6353: EQUAL
6354: IFTRUE 6358
6356: GO 6369
6358: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6359: LD_ADDR_VAR 0 9
6363: PUSH
6364: LD_INT 10
6366: ST_TO_ADDR
6367: GO 6408
6369: LD_INT 9
6371: DOUBLE
6372: EQUAL
6373: IFTRUE 6377
6375: GO 6388
6377: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6378: LD_ADDR_VAR 0 9
6382: PUSH
6383: LD_INT 11
6385: ST_TO_ADDR
6386: GO 6408
6388: LD_INT 8
6390: DOUBLE
6391: EQUAL
6392: IFTRUE 6396
6394: GO 6407
6396: POP
// road = SouthRoadArea2 ; end ;
6397: LD_ADDR_VAR 0 9
6401: PUSH
6402: LD_INT 12
6404: ST_TO_ADDR
6405: GO 6408
6407: POP
// MoveToBase ( amSupportTroops , road ) ;
6408: LD_EXP 78
6412: PPUSH
6413: LD_VAR 0 9
6417: PPUSH
6418: CALL 8399 0 2
// end ;
6422: LD_VAR 0 5
6426: RET
// export function PrepareAmericanPatrol ; var un ; begin
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
// amPatrol = [ ] ;
6431: LD_ADDR_EXP 79
6435: PUSH
6436: EMPTY
6437: ST_TO_ADDR
// uc_side = 1 ;
6438: LD_ADDR_OWVAR 20
6442: PUSH
6443: LD_INT 1
6445: ST_TO_ADDR
// uc_nation = 1 ;
6446: LD_ADDR_OWVAR 21
6450: PUSH
6451: LD_INT 1
6453: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: LD_STRING Campell
6461: PPUSH
6462: LD_INT 0
6464: PPUSH
6465: CALL 7047 0 2
6469: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6470: LD_ADDR_EXP 79
6474: PUSH
6475: LD_EXP 79
6479: PUSH
6480: LD_VAR 0 2
6484: ADD
6485: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6486: LD_VAR 0 2
6490: PPUSH
6491: LD_INT 14
6493: PPUSH
6494: LD_INT 0
6496: PPUSH
6497: CALL_OW 49
// SetClass ( un , 1 ) ;
6501: LD_VAR 0 2
6505: PPUSH
6506: LD_INT 1
6508: PPUSH
6509: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6513: LD_INT 1
6515: PPUSH
6516: LD_EXP 40
6520: PPUSH
6521: CALL_OW 381
// un = CreateHuman ;
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: CALL_OW 44
6534: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6535: LD_ADDR_EXP 79
6539: PUSH
6540: LD_EXP 79
6544: PUSH
6545: LD_VAR 0 2
6549: ADD
6550: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6551: LD_VAR 0 2
6555: PPUSH
6556: LD_INT 14
6558: PPUSH
6559: LD_INT 0
6561: PPUSH
6562: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6566: LD_EXP 79
6570: PPUSH
6571: LD_EXP 50
6575: PPUSH
6576: CALL_OW 115
// end ; end_of_file
6580: LD_VAR 0 1
6584: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6585: LD_INT 0
6587: PPUSH
6588: PPUSH
6589: PPUSH
6590: PPUSH
// northGroup = [ ] ;
6591: LD_ADDR_EXP 81
6595: PUSH
6596: EMPTY
6597: ST_TO_ADDR
// southGroup = [ ] ;
6598: LD_ADDR_EXP 82
6602: PUSH
6603: EMPTY
6604: ST_TO_ADDR
// uc_side = 2 ;
6605: LD_ADDR_OWVAR 20
6609: PUSH
6610: LD_INT 2
6612: ST_TO_ADDR
// uc_nation = 2 ;
6613: LD_ADDR_OWVAR 21
6617: PUSH
6618: LD_INT 2
6620: ST_TO_ADDR
// hc_name :=  ;
6621: LD_ADDR_OWVAR 26
6625: PUSH
6626: LD_STRING 
6628: ST_TO_ADDR
// hc_gallery :=  ;
6629: LD_ADDR_OWVAR 33
6633: PUSH
6634: LD_STRING 
6636: ST_TO_ADDR
// for i := 1 to 10 do
6637: LD_ADDR_VAR 0 2
6641: PUSH
6642: DOUBLE
6643: LD_INT 1
6645: DEC
6646: ST_TO_ADDR
6647: LD_INT 10
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6765
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6653: LD_INT 13
6655: PPUSH
6656: LD_INT 1
6658: PPUSH
6659: LD_INT 1
6661: PPUSH
6662: LD_INT 26
6664: PPUSH
6665: LD_INT 100
6667: PPUSH
6668: CALL 50021 0 5
// veh = CreateVehicle ;
6672: LD_ADDR_VAR 0 4
6676: PUSH
6677: CALL_OW 45
6681: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6682: LD_ADDR_EXP 81
6686: PUSH
6687: LD_EXP 81
6691: PUSH
6692: LD_VAR 0 4
6696: ADD
6697: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6698: LD_VAR 0 4
6702: PPUSH
6703: LD_INT 23
6705: PPUSH
6706: LD_INT 0
6708: PPUSH
6709: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6713: LD_INT 0
6715: PPUSH
6716: LD_INT 8
6718: PPUSH
6719: CALL_OW 383
// un = CreateHuman ;
6723: LD_ADDR_VAR 0 3
6727: PUSH
6728: CALL_OW 44
6732: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6733: LD_ADDR_EXP 81
6737: PUSH
6738: LD_EXP 81
6742: PUSH
6743: LD_VAR 0 3
6747: ADD
6748: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6749: LD_VAR 0 3
6753: PPUSH
6754: LD_VAR 0 4
6758: PPUSH
6759: CALL_OW 52
// end ;
6763: GO 6650
6765: POP
6766: POP
// for i := 1 to 20 do
6767: LD_ADDR_VAR 0 2
6771: PUSH
6772: DOUBLE
6773: LD_INT 1
6775: DEC
6776: ST_TO_ADDR
6777: LD_INT 20
6779: PUSH
6780: FOR_TO
6781: IFFALSE 6836
// begin PrepareSoldier ( false , 8 ) ;
6783: LD_INT 0
6785: PPUSH
6786: LD_INT 8
6788: PPUSH
6789: CALL_OW 381
// un = CreateHuman ;
6793: LD_ADDR_VAR 0 3
6797: PUSH
6798: CALL_OW 44
6802: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6803: LD_ADDR_EXP 81
6807: PUSH
6808: LD_EXP 81
6812: PUSH
6813: LD_VAR 0 3
6817: ADD
6818: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea1 , false ) ;
6819: LD_VAR 0 3
6823: PPUSH
6824: LD_INT 23
6826: PPUSH
6827: LD_INT 0
6829: PPUSH
6830: CALL_OW 49
// end ;
6834: GO 6780
6836: POP
6837: POP
// for i := 1 to 20 do
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: DOUBLE
6844: LD_INT 1
6846: DEC
6847: ST_TO_ADDR
6848: LD_INT 20
6850: PUSH
6851: FOR_TO
6852: IFFALSE 6910
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6854: LD_INT 0
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: LD_INT 8
6862: PPUSH
6863: CALL_OW 380
// un = CreateHuman ;
6867: LD_ADDR_VAR 0 3
6871: PUSH
6872: CALL_OW 44
6876: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6877: LD_ADDR_EXP 81
6881: PUSH
6882: LD_EXP 81
6886: PUSH
6887: LD_VAR 0 3
6891: ADD
6892: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea1 , false ) ;
6893: LD_VAR 0 3
6897: PPUSH
6898: LD_INT 23
6900: PPUSH
6901: LD_INT 0
6903: PPUSH
6904: CALL_OW 49
// end ;
6908: GO 6851
6910: POP
6911: POP
// for i := 1 to 10 do
6912: LD_ADDR_VAR 0 2
6916: PUSH
6917: DOUBLE
6918: LD_INT 1
6920: DEC
6921: ST_TO_ADDR
6922: LD_INT 10
6924: PUSH
6925: FOR_TO
6926: IFFALSE 7040
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6928: LD_INT 13
6930: PPUSH
6931: LD_INT 1
6933: PPUSH
6934: LD_INT 1
6936: PPUSH
6937: LD_INT 26
6939: PPUSH
6940: LD_INT 100
6942: PPUSH
6943: CALL 50021 0 5
// veh = CreateVehicle ;
6947: LD_ADDR_VAR 0 4
6951: PUSH
6952: CALL_OW 45
6956: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6957: LD_ADDR_EXP 82
6961: PUSH
6962: LD_EXP 82
6966: PUSH
6967: LD_VAR 0 4
6971: ADD
6972: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6973: LD_VAR 0 4
6977: PPUSH
6978: LD_INT 24
6980: PPUSH
6981: LD_INT 0
6983: PPUSH
6984: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6988: LD_INT 0
6990: PPUSH
6991: LD_INT 8
6993: PPUSH
6994: CALL_OW 383
// un = CreateHuman ;
6998: LD_ADDR_VAR 0 3
7002: PUSH
7003: CALL_OW 44
7007: ST_TO_ADDR
// southGroup = southGroup ^ un ;
7008: LD_ADDR_EXP 82
7012: PUSH
7013: LD_EXP 82
7017: PUSH
7018: LD_VAR 0 3
7022: ADD
7023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7024: LD_VAR 0 3
7028: PPUSH
7029: LD_VAR 0 4
7033: PPUSH
7034: CALL_OW 52
// end ;
7038: GO 6925
7040: POP
7041: POP
// end ; end_of_file
7042: LD_VAR 0 1
7046: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
7047: LD_INT 0
7049: PPUSH
7050: PPUSH
// if exist_mode then
7051: LD_VAR 0 2
7055: IFFALSE 7080
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7057: LD_ADDR_VAR 0 4
7061: PUSH
7062: LD_EXP 33
7066: PUSH
7067: LD_VAR 0 1
7071: STR
7072: PPUSH
7073: CALL_OW 34
7077: ST_TO_ADDR
7078: GO 7095
// unit := NewCharacter ( ident ) ;
7080: LD_ADDR_VAR 0 4
7084: PUSH
7085: LD_VAR 0 1
7089: PPUSH
7090: CALL_OW 25
7094: ST_TO_ADDR
// result := unit ;
7095: LD_ADDR_VAR 0 3
7099: PUSH
7100: LD_VAR 0 4
7104: ST_TO_ADDR
// end ;
7105: LD_VAR 0 3
7109: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7110: LD_INT 0
7112: PPUSH
7113: PPUSH
7114: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze ] ;
7115: LD_ADDR_VAR 0 1
7119: PUSH
7120: LD_VAR 0 1
7124: PUSH
7125: LD_EXP 44
7129: PUSH
7130: LD_EXP 45
7134: PUSH
7135: LD_EXP 48
7139: PUSH
7140: LD_EXP 49
7144: PUSH
7145: LD_EXP 46
7149: PUSH
7150: LD_EXP 47
7154: PUSH
7155: LD_EXP 50
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: DIFF
7169: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7170: LD_ADDR_VAR 0 7
7174: PUSH
7175: LD_VAR 0 1
7179: PUSH
7180: LD_INT 1
7182: PPUSH
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 12
7192: ARRAY
7193: ST_TO_ADDR
// if radio then
7194: LD_VAR 0 4
7198: IFFALSE 7247
// begin if GetSex ( speaker ) = sex_male then
7200: LD_VAR 0 7
7204: PPUSH
7205: CALL_OW 258
7209: PUSH
7210: LD_INT 1
7212: EQUAL
7213: IFFALSE 7231
// SayRadio ( speaker , dialogMID ) else
7215: LD_VAR 0 7
7219: PPUSH
7220: LD_VAR 0 2
7224: PPUSH
7225: CALL_OW 94
7229: GO 7245
// SayRadio ( speaker , dialogFID ) ;
7231: LD_VAR 0 7
7235: PPUSH
7236: LD_VAR 0 3
7240: PPUSH
7241: CALL_OW 94
// end else
7245: GO 7292
// begin if GetSex ( speaker ) = sex_male then
7247: LD_VAR 0 7
7251: PPUSH
7252: CALL_OW 258
7256: PUSH
7257: LD_INT 1
7259: EQUAL
7260: IFFALSE 7278
// Say ( speaker , dialogMID ) else
7262: LD_VAR 0 7
7266: PPUSH
7267: LD_VAR 0 2
7271: PPUSH
7272: CALL_OW 88
7276: GO 7292
// Say ( speaker , dialogFID ) ;
7278: LD_VAR 0 7
7282: PPUSH
7283: LD_VAR 0 3
7287: PPUSH
7288: CALL_OW 88
// end ; result := speaker ;
7292: LD_ADDR_VAR 0 5
7296: PUSH
7297: LD_VAR 0 7
7301: ST_TO_ADDR
// end ;
7302: LD_VAR 0 5
7306: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7307: LD_INT 0
7309: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7310: LD_VAR 0 1
7314: PPUSH
7315: CALL_OW 255
7319: PUSH
7320: LD_VAR 0 3
7324: EQUAL
7325: PUSH
7326: LD_VAR 0 1
7330: PPUSH
7331: CALL_OW 302
7335: AND
7336: IFFALSE 7358
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7338: LD_VAR 0 1
7342: PPUSH
7343: LD_EXP 32
7347: PUSH
7348: LD_VAR 0 2
7352: STR
7353: PPUSH
7354: CALL_OW 38
// end ;
7358: LD_VAR 0 4
7362: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7363: LD_INT 0
7365: PPUSH
7366: PPUSH
7367: PPUSH
// resultCharactersToSave = [ ] ;
7368: LD_ADDR_VAR 0 6
7372: PUSH
7373: EMPTY
7374: ST_TO_ADDR
// for unit in characters do
7375: LD_ADDR_VAR 0 5
7379: PUSH
7380: LD_VAR 0 1
7384: PUSH
7385: FOR_IN
7386: IFFALSE 7434
// if GetSide ( unit ) = side and IsOK ( unit ) then
7388: LD_VAR 0 5
7392: PPUSH
7393: CALL_OW 255
7397: PUSH
7398: LD_VAR 0 3
7402: EQUAL
7403: PUSH
7404: LD_VAR 0 5
7408: PPUSH
7409: CALL_OW 302
7413: AND
7414: IFFALSE 7432
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7416: LD_ADDR_VAR 0 6
7420: PUSH
7421: LD_VAR 0 6
7425: PUSH
7426: LD_VAR 0 5
7430: ADD
7431: ST_TO_ADDR
7432: GO 7385
7434: POP
7435: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7436: LD_VAR 0 6
7440: PPUSH
7441: LD_EXP 32
7445: PUSH
7446: LD_VAR 0 2
7450: STR
7451: PPUSH
7452: CALL_OW 38
// end ;
7456: LD_VAR 0 4
7460: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7461: LD_INT 0
7463: PPUSH
7464: PPUSH
7465: PPUSH
7466: PPUSH
// charsToChoose = otherKirovUnits ;
7467: LD_ADDR_VAR 0 4
7471: PUSH
7472: LD_EXP 60
7476: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7477: LD_ADDR_VAR 0 4
7481: PUSH
7482: LD_VAR 0 4
7486: PUSH
7487: LD_EXP 53
7491: ADD
7492: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7493: LD_ADDR_VAR 0 4
7497: PUSH
7498: LD_VAR 0 4
7502: PUSH
7503: LD_EXP 51
7507: ADD
7508: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7509: LD_ADDR_VAR 0 4
7513: PUSH
7514: LD_VAR 0 4
7518: PUSH
7519: LD_EXP 48
7523: ADD
7524: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7525: LD_ADDR_VAR 0 4
7529: PUSH
7530: LD_VAR 0 4
7534: PUSH
7535: LD_EXP 49
7539: ADD
7540: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7541: LD_ADDR_VAR 0 5
7545: PUSH
7546: LD_STRING text
7548: PPUSH
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: LD_INT -5
7561: PUSH
7562: LD_EXP 44
7566: PUSH
7567: LD_EXP 45
7571: PUSH
7572: LD_EXP 47
7576: PUSH
7577: LD_EXP 46
7581: PUSH
7582: LD_INT -6
7584: PUSH
7585: LD_INT -2
7587: PUSH
7588: LD_INT -3
7590: PUSH
7591: LD_INT -5
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: PUSH
7605: LD_VAR 0 4
7609: ADD
7610: PUSH
7611: LD_INT -6
7613: PUSH
7614: LD_INT -4
7616: PUSH
7617: LD_EXP 56
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: ADD
7627: PPUSH
7628: LD_INT 1
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: LD_INT 1
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 4
7646: PUSH
7647: LD_INT 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 42
7664: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7665: LD_VAR 0 4
7669: PPUSH
7670: LD_INT 6
7672: PPUSH
7673: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7677: LD_VAR 0 5
7681: PPUSH
7682: LD_INT 3
7684: PPUSH
7685: CALL_OW 235
// SetSurvivorsArabianAttack ;
7689: CALL 4847 0 0
// end ;
7693: LD_VAR 0 2
7697: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7698: LD_INT 0
7700: PPUSH
7701: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7702: LD_ADDR_VAR 0 5
7706: PUSH
7707: LD_VAR 0 1
7711: PPUSH
7712: LD_INT 22
7714: PUSH
7715: LD_VAR 0 2
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 21
7726: PUSH
7727: LD_INT 3
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 30
7736: PUSH
7737: LD_VAR 0 3
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: PPUSH
7751: CALL_OW 70
7755: PUSH
7756: FOR_IN
7757: IFFALSE 7790
// begin if UnitsInside ( building ) < 6 then
7759: LD_VAR 0 5
7763: PPUSH
7764: CALL_OW 313
7768: PUSH
7769: LD_INT 6
7771: LESS
7772: IFFALSE 7788
// begin result = building ;
7774: LD_ADDR_VAR 0 4
7778: PUSH
7779: LD_VAR 0 5
7783: ST_TO_ADDR
// exit ;
7784: POP
7785: POP
7786: GO 7800
// end ; end ;
7788: GO 7756
7790: POP
7791: POP
// result = 0 ;
7792: LD_ADDR_VAR 0 4
7796: PUSH
7797: LD_INT 0
7799: ST_TO_ADDR
// end ;
7800: LD_VAR 0 4
7804: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
7805: LD_INT 0
7807: PPUSH
7808: PPUSH
// dir := GetDir ( bunker ) - 3 ;
7809: LD_ADDR_VAR 0 4
7813: PUSH
7814: LD_VAR 0 2
7818: PPUSH
7819: CALL_OW 254
7823: PUSH
7824: LD_INT 3
7826: MINUS
7827: ST_TO_ADDR
// if dir < 0 then
7828: LD_VAR 0 4
7832: PUSH
7833: LD_INT 0
7835: LESS
7836: IFFALSE 7852
// dir := 6 + dir ;
7838: LD_ADDR_VAR 0 4
7842: PUSH
7843: LD_INT 6
7845: PUSH
7846: LD_VAR 0 4
7850: PLUS
7851: ST_TO_ADDR
// SetDir ( un , dir ) ;
7852: LD_VAR 0 1
7856: PPUSH
7857: LD_VAR 0 4
7861: PPUSH
7862: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
7866: LD_VAR 0 1
7870: PPUSH
7871: LD_VAR 0 2
7875: PPUSH
7876: CALL_OW 52
// result = un ;
7880: LD_ADDR_VAR 0 3
7884: PUSH
7885: LD_VAR 0 1
7889: ST_TO_ADDR
// end ;
7890: LD_VAR 0 3
7894: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
7895: LD_INT 0
7897: PPUSH
7898: PPUSH
7899: PPUSH
// uc_side := GetSide ( b ) ;
7900: LD_ADDR_OWVAR 20
7904: PUSH
7905: LD_VAR 0 2
7909: PPUSH
7910: CALL_OW 255
7914: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
7915: LD_ADDR_OWVAR 21
7919: PUSH
7920: LD_VAR 0 2
7924: PPUSH
7925: CALL_OW 248
7929: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7930: LD_INT 0
7932: PPUSH
7933: LD_INT 1
7935: PPUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 380
// un = CreateHuman ;
7945: LD_ADDR_VAR 0 4
7949: PUSH
7950: CALL_OW 44
7954: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
7955: LD_ADDR_VAR 0 5
7959: PUSH
7960: LD_VAR 0 2
7964: PPUSH
7965: CALL_OW 254
7969: PUSH
7970: LD_INT 3
7972: MINUS
7973: ST_TO_ADDR
// if dir < 0 then
7974: LD_VAR 0 5
7978: PUSH
7979: LD_INT 0
7981: LESS
7982: IFFALSE 7998
// dir := 6 + dir ;
7984: LD_ADDR_VAR 0 5
7988: PUSH
7989: LD_INT 6
7991: PUSH
7992: LD_VAR 0 5
7996: PLUS
7997: ST_TO_ADDR
// SetDir ( un , dir ) ;
7998: LD_VAR 0 4
8002: PPUSH
8003: LD_VAR 0 5
8007: PPUSH
8008: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8012: LD_VAR 0 4
8016: PPUSH
8017: LD_VAR 0 2
8021: PPUSH
8022: CALL_OW 52
// result = un ;
8026: LD_ADDR_VAR 0 3
8030: PUSH
8031: LD_VAR 0 4
8035: ST_TO_ADDR
// end ;
8036: LD_VAR 0 3
8040: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8041: LD_INT 0
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// for building in buildings do
8048: LD_ADDR_VAR 0 5
8052: PUSH
8053: LD_VAR 0 2
8057: PUSH
8058: FOR_IN
8059: IFFALSE 8151
// begin x = GetX ( building ) ;
8061: LD_ADDR_VAR 0 6
8065: PUSH
8066: LD_VAR 0 5
8070: PPUSH
8071: CALL_OW 250
8075: ST_TO_ADDR
// y = GetY ( building ) ;
8076: LD_ADDR_VAR 0 7
8080: PUSH
8081: LD_VAR 0 5
8085: PPUSH
8086: CALL_OW 251
8090: ST_TO_ADDR
// dir = GetDir ( building ) ;
8091: LD_ADDR_VAR 0 8
8095: PUSH
8096: LD_VAR 0 5
8100: PPUSH
8101: CALL_OW 254
8105: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8106: LD_VAR 0 1
8110: PPUSH
8111: LD_VAR 0 5
8115: PPUSH
8116: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8120: LD_VAR 0 1
8124: PPUSH
8125: LD_VAR 0 3
8129: PPUSH
8130: LD_VAR 0 6
8134: PPUSH
8135: LD_VAR 0 7
8139: PPUSH
8140: LD_VAR 0 8
8144: PPUSH
8145: CALL_OW 205
// end ;
8149: GO 8058
8151: POP
8152: POP
// end ;
8153: LD_VAR 0 4
8157: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
8162: PPUSH
8163: PPUSH
8164: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8165: LD_ADDR_VAR 0 8
8169: PUSH
8170: LD_INT 48
8172: PUSH
8173: LD_INT 49
8175: PUSH
8176: LD_INT 50
8178: PUSH
8179: LD_INT 20
8181: PUSH
8182: LD_INT 1
8184: PUSH
8185: LD_INT 51
8187: PUSH
8188: LD_INT 52
8190: PUSH
8191: LD_INT 69
8193: PUSH
8194: LD_INT 39
8196: PUSH
8197: LD_INT 34
8199: PUSH
8200: LD_INT 40
8202: PUSH
8203: LD_INT 53
8205: PUSH
8206: LD_INT 71
8208: PUSH
8209: LD_INT 57
8211: PUSH
8212: LD_INT 58
8214: PUSH
8215: LD_INT 44
8217: PUSH
8218: LD_INT 32
8220: PUSH
8221: LD_INT 27
8223: PUSH
8224: LD_INT 23
8226: PUSH
8227: LD_INT 33
8229: PUSH
8230: LD_INT 59
8232: PUSH
8233: LD_INT 54
8235: PUSH
8236: LD_INT 55
8238: PUSH
8239: LD_INT 56
8241: PUSH
8242: LD_INT 63
8244: PUSH
8245: LD_INT 64
8247: PUSH
8248: LD_INT 65
8250: PUSH
8251: LD_INT 30
8253: PUSH
8254: LD_INT 31
8256: PUSH
8257: LD_INT 21
8259: PUSH
8260: LD_INT 22
8262: PUSH
8263: LD_INT 25
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8300: LD_ADDR_VAR 0 5
8304: PUSH
8305: DOUBLE
8306: LD_INT 1
8308: DEC
8309: ST_TO_ADDR
8310: LD_VAR 0 8
8314: PUSH
8315: FOR_TO
8316: IFFALSE 8392
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8318: LD_VAR 0 8
8322: PUSH
8323: LD_VAR 0 5
8327: ARRAY
8328: PPUSH
8329: LD_VAR 0 1
8333: PPUSH
8334: CALL_OW 321
8338: PUSH
8339: LD_INT 1
8341: EQUAL
8342: PUSH
8343: LD_VAR 0 8
8347: PUSH
8348: LD_VAR 0 5
8352: ARRAY
8353: PPUSH
8354: LD_VAR 0 3
8358: PPUSH
8359: CALL_OW 482
8363: PUSH
8364: LD_INT 1
8366: EQUAL
8367: AND
8368: IFFALSE 8390
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8370: LD_VAR 0 2
8374: PPUSH
8375: LD_VAR 0 8
8379: PUSH
8380: LD_VAR 0 5
8384: ARRAY
8385: PPUSH
8386: CALL_OW 184
8390: GO 8315
8392: POP
8393: POP
// end ;
8394: LD_VAR 0 4
8398: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , nearUnit , attackUnits , medics , damageUnits , inBase , newBase ; begin
8399: LD_INT 0
8401: PPUSH
8402: PPUSH
8403: PPUSH
8404: PPUSH
8405: PPUSH
8406: PPUSH
8407: PPUSH
8408: PPUSH
8409: PPUSH
8410: PPUSH
8411: PPUSH
8412: PPUSH
// inBase = false ;
8413: LD_ADDR_VAR 0 13
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
8421: LD_ADDR_VAR 0 8
8425: PUSH
8426: LD_VAR 0 2
8430: PPUSH
8431: LD_INT 22
8433: PUSH
8434: LD_INT 3
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: PPUSH
8444: CALL_OW 70
8448: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
8449: LD_ADDR_VAR 0 10
8453: PUSH
8454: LD_VAR 0 1
8458: PPUSH
8459: LD_INT 50
8461: PUSH
8462: EMPTY
8463: LIST
8464: PUSH
8465: LD_INT 2
8467: PUSH
8468: LD_INT 25
8470: PUSH
8471: LD_INT 1
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 25
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: LD_INT 21
8490: PUSH
8491: LD_INT 2
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PPUSH
8508: CALL_OW 72
8512: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
8513: LD_ADDR_VAR 0 11
8517: PUSH
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_INT 50
8525: PUSH
8526: EMPTY
8527: LIST
8528: PUSH
8529: LD_INT 25
8531: PUSH
8532: LD_INT 4
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 72
8547: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
8548: LD_ADDR_VAR 0 12
8552: PUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_INT 3
8560: PUSH
8561: LD_INT 24
8563: PUSH
8564: LD_INT 1000
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 72
8579: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
8580: LD_ADDR_VAR 0 6
8584: PUSH
8585: LD_INT 22
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: ST_TO_ADDR
// for unit in UnitFilter ( units , [ f_ok ] ) do
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: LD_VAR 0 1
8612: PPUSH
8613: LD_INT 50
8615: PUSH
8616: EMPTY
8617: LIST
8618: PPUSH
8619: CALL_OW 72
8623: PUSH
8624: FOR_IN
8625: IFFALSE 8902
// begin if attackUnits and medics then
8627: LD_VAR 0 10
8631: PUSH
8632: LD_VAR 0 11
8636: AND
8637: IFFALSE 8704
// begin if damageUnits then
8639: LD_VAR 0 12
8643: IFFALSE 8665
// ComHeal ( medics , damageUnits [ 1 ] ) else
8645: LD_VAR 0 11
8649: PPUSH
8650: LD_VAR 0 12
8654: PUSH
8655: LD_INT 1
8657: ARRAY
8658: PPUSH
8659: CALL_OW 128
8663: GO 8702
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
8665: LD_VAR 0 11
8669: PPUSH
8670: LD_VAR 0 10
8674: PUSH
8675: LD_INT 1
8677: ARRAY
8678: PPUSH
8679: CALL_OW 250
8683: PPUSH
8684: LD_VAR 0 10
8688: PUSH
8689: LD_INT 1
8691: ARRAY
8692: PPUSH
8693: CALL_OW 251
8697: PPUSH
8698: CALL_OW 111
// end else
8702: GO 8733
// begin if not attackUnits and medics then
8704: LD_VAR 0 10
8708: NOT
8709: PUSH
8710: LD_VAR 0 11
8714: AND
8715: IFFALSE 8733
// attackUnits = attackUnits ^ medics ;
8717: LD_ADDR_VAR 0 10
8721: PUSH
8722: LD_VAR 0 10
8726: PUSH
8727: LD_VAR 0 11
8731: ADD
8732: ST_TO_ADDR
// end ; if enemyUnitsOnRoad then
8733: LD_VAR 0 8
8737: IFFALSE 8856
// begin for playerUnit in playerUnits do
8739: LD_ADDR_VAR 0 7
8743: PUSH
8744: LD_VAR 0 6
8748: PUSH
8749: FOR_IN
8750: IFFALSE 8852
// begin if Attacks ( playerUnit ) then
8752: LD_VAR 0 7
8756: PPUSH
8757: CALL_OW 320
8761: IFFALSE 8816
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
8763: LD_VAR 0 7
8767: PPUSH
8768: CALL_OW 320
8772: PUSH
8773: LD_VAR 0 1
8777: IN
8778: PUSH
8779: LD_VAR 0 7
8783: PPUSH
8784: LD_VAR 0 5
8788: PPUSH
8789: CALL_OW 296
8793: PUSH
8794: LD_INT 13
8796: LESS
8797: AND
8798: IFFALSE 8814
// ComAttackUnit ( attackUnits , playerUnit ) end else
8800: LD_VAR 0 10
8804: PPUSH
8805: LD_VAR 0 7
8809: PPUSH
8810: CALL_OW 115
8814: GO 8850
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
8816: LD_ADDR_VAR 0 9
8820: PUSH
8821: LD_VAR 0 8
8825: PPUSH
8826: LD_VAR 0 5
8830: PPUSH
8831: CALL_OW 74
8835: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
8836: LD_VAR 0 10
8840: PPUSH
8841: LD_VAR 0 9
8845: PPUSH
8846: CALL_OW 115
// end ; end ;
8850: GO 8749
8852: POP
8853: POP
// end else
8854: GO 8871
// begin ComMoveXY ( unit , 27 , 34 ) ;
8856: LD_VAR 0 5
8860: PPUSH
8861: LD_INT 27
8863: PPUSH
8864: LD_INT 34
8866: PPUSH
8867: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
8871: LD_VAR 0 5
8875: PPUSH
8876: LD_INT 27
8878: PPUSH
8879: LD_INT 34
8881: PPUSH
8882: CALL_OW 297
8886: PUSH
8887: LD_INT 5
8889: LESS
8890: IFFALSE 8900
// inBase = true ;
8892: LD_ADDR_VAR 0 13
8896: PUSH
8897: LD_INT 1
8899: ST_TO_ADDR
// end ;
8900: GO 8624
8902: POP
8903: POP
// wait ( 0 0$1 ) ;
8904: LD_INT 35
8906: PPUSH
8907: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
8911: LD_VAR 0 1
8915: PPUSH
8916: LD_INT 50
8918: PUSH
8919: EMPTY
8920: LIST
8921: PPUSH
8922: CALL_OW 72
8926: PUSH
8927: LD_INT 0
8929: EQUAL
8930: PUSH
8931: LD_VAR 0 13
8935: OR
8936: IFFALSE 8421
// ComMoveXY ( units , 27 , 34 ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: LD_INT 27
8945: PPUSH
8946: LD_INT 34
8948: PPUSH
8949: CALL_OW 111
// for i := 1 to units do
8953: LD_ADDR_VAR 0 4
8957: PUSH
8958: DOUBLE
8959: LD_INT 1
8961: DEC
8962: ST_TO_ADDR
8963: LD_VAR 0 1
8967: PUSH
8968: FOR_TO
8969: IFFALSE 9004
// if IsOk ( units [ i ] ) then
8971: LD_VAR 0 1
8975: PUSH
8976: LD_VAR 0 4
8980: ARRAY
8981: PPUSH
8982: CALL_OW 302
8986: IFFALSE 9002
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
8988: LD_ADDR_EXP 12
8992: PUSH
8993: LD_EXP 12
8997: PUSH
8998: LD_INT 1
9000: PLUS
9001: ST_TO_ADDR
9002: GO 8968
9004: POP
9005: POP
// amSupportTroops = amSupportTroops diff units ;
9006: LD_ADDR_EXP 78
9010: PUSH
9011: LD_EXP 78
9015: PUSH
9016: LD_VAR 0 1
9020: DIFF
9021: ST_TO_ADDR
// newBase = amBase ;
9022: LD_ADDR_VAR 0 14
9026: PUSH
9027: LD_EXP 80
9031: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
9032: LD_ADDR_VAR 0 14
9036: PUSH
9037: LD_VAR 0 14
9041: PUSH
9042: LD_VAR 0 1
9046: PPUSH
9047: LD_INT 50
9049: PUSH
9050: EMPTY
9051: LIST
9052: PPUSH
9053: CALL_OW 72
9057: ADD
9058: ST_TO_ADDR
// amBase = newBase ;
9059: LD_ADDR_EXP 80
9063: PUSH
9064: LD_VAR 0 14
9068: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 1 , newBase ) ;
9069: LD_ADDR_EXP 87
9073: PUSH
9074: LD_EXP 87
9078: PPUSH
9079: LD_INT 1
9081: PPUSH
9082: LD_VAR 0 14
9086: PPUSH
9087: CALL_OW 1
9091: ST_TO_ADDR
// end ; end_of_file
9092: LD_VAR 0 3
9096: RET
// every 0 0$1 do
9097: GO 9099
9099: DISABLE
// MC_Start ;
9100: CALL 22019 0 0
9104: END
// export function CustomInitMacro ; begin
9105: LD_INT 0
9107: PPUSH
// MC_SetParkingArea ( 1 , OmicronParkingArea ) ;
9108: LD_INT 1
9110: PPUSH
9111: LD_INT 17
9113: PPUSH
9114: CALL 44803 0 2
// case Difficulty of 1 :
9118: LD_OWVAR 67
9122: PUSH
9123: LD_INT 1
9125: DOUBLE
9126: EQUAL
9127: IFTRUE 9131
9129: GO 9200
9131: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_machine_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; 2 :
9132: LD_INT 1
9134: PPUSH
9135: LD_INT 3
9137: PUSH
9138: LD_INT 1
9140: PUSH
9141: LD_INT 1
9143: PUSH
9144: LD_INT 2
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: PUSH
9153: LD_INT 3
9155: PUSH
9156: LD_INT 1
9158: PUSH
9159: LD_INT 1
9161: PUSH
9162: LD_INT 4
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: LD_INT 1
9176: PUSH
9177: LD_INT 1
9179: PUSH
9180: LD_INT 4
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: PPUSH
9194: CALL 43538 0 2
9198: GO 9355
9200: LD_INT 2
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9277
9208: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; 3 :
9209: LD_INT 1
9211: PPUSH
9212: LD_INT 3
9214: PUSH
9215: LD_INT 1
9217: PUSH
9218: LD_INT 1
9220: PUSH
9221: LD_INT 4
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 3
9232: PUSH
9233: LD_INT 1
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: LD_INT 4
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: LD_INT 4
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: PPUSH
9271: CALL 43538 0 2
9275: GO 9355
9277: LD_INT 3
9279: DOUBLE
9280: EQUAL
9281: IFTRUE 9285
9283: GO 9354
9285: POP
// MC_SetProduceList ( 1 , [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] ] ) ; end ;
9286: LD_INT 1
9288: PPUSH
9289: LD_INT 3
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: LD_INT 1
9297: PUSH
9298: LD_INT 4
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 1
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: LD_INT 4
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: LD_INT 1
9330: PUSH
9331: LD_INT 1
9333: PUSH
9334: LD_INT 4
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: PUSH
9343: EMPTY
9344: LIST
9345: LIST
9346: LIST
9347: PPUSH
9348: CALL 43538 0 2
9352: GO 9355
9354: POP
// end ;
9355: LD_VAR 0 1
9359: RET
// export function KirovUpgradeBase ; var lab , workshop , turret ; begin
9360: LD_INT 0
9362: PPUSH
9363: PPUSH
9364: PPUSH
9365: PPUSH
// lab = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9366: LD_ADDR_VAR 0 2
9370: PUSH
9371: LD_INT 19
9373: PPUSH
9374: LD_INT 22
9376: PUSH
9377: LD_INT 6
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 21
9386: PUSH
9387: LD_INT 3
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 30
9396: PUSH
9397: LD_INT 6
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: LIST
9408: PPUSH
9409: CALL_OW 70
9413: PUSH
9414: LD_INT 1
9416: ARRAY
9417: ST_TO_ADDR
// workshop = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: LD_INT 19
9425: PPUSH
9426: LD_INT 22
9428: PUSH
9429: LD_INT 6
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 21
9438: PUSH
9439: LD_INT 3
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 30
9448: PUSH
9449: LD_INT 2
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: PPUSH
9461: CALL_OW 70
9465: PUSH
9466: LD_INT 1
9468: ARRAY
9469: ST_TO_ADDR
// AddComUpgradeLab ( lab , b_lab_weapon ) ;
9470: LD_VAR 0 2
9474: PPUSH
9475: LD_INT 10
9477: PPUSH
9478: CALL_OW 207
// AddComUpgrade ( workshop ) ;
9482: LD_VAR 0 3
9486: PPUSH
9487: CALL_OW 206
// end ;
9491: LD_VAR 0 1
9495: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
9496: LD_INT 0
9498: PPUSH
9499: PPUSH
9500: PPUSH
// weapons = [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] ;
9501: LD_ADDR_VAR 0 3
9505: PUSH
9506: LD_INT 42
9508: PUSH
9509: LD_INT 43
9511: PUSH
9512: LD_INT 44
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
9520: LD_ADDR_VAR 0 2
9524: PUSH
9525: LD_EXP 67
9529: PUSH
9530: FOR_IN
9531: IFFALSE 9563
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
9533: LD_VAR 0 2
9537: PPUSH
9538: LD_VAR 0 3
9542: PUSH
9543: LD_INT 1
9545: PPUSH
9546: LD_VAR 0 3
9550: PPUSH
9551: CALL_OW 12
9555: ARRAY
9556: PPUSH
9557: CALL_OW 208
9561: GO 9530
9563: POP
9564: POP
// end ;
9565: LD_VAR 0 1
9569: RET
// export function KirovProduceVehicles ( factory ) ; begin
9570: LD_INT 0
9572: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
9573: LD_VAR 0 1
9577: PPUSH
9578: LD_INT 21
9580: PPUSH
9581: LD_INT 1
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_INT 51
9589: PPUSH
9590: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
9594: LD_VAR 0 1
9598: PPUSH
9599: LD_INT 21
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: LD_INT 51
9610: PPUSH
9611: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
9615: LD_VAR 0 1
9619: PPUSH
9620: LD_INT 21
9622: PPUSH
9623: LD_INT 1
9625: PPUSH
9626: LD_INT 1
9628: PPUSH
9629: LD_INT 51
9631: PPUSH
9632: CALL_OW 185
// case Difficulty of 1 :
9636: LD_OWVAR 67
9640: PUSH
9641: LD_INT 1
9643: DOUBLE
9644: EQUAL
9645: IFTRUE 9649
9647: GO 9715
9649: POP
// begin AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9650: LD_VAR 0 1
9654: PPUSH
9655: LD_INT 21
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: LD_INT 1
9663: PPUSH
9664: LD_INT 43
9666: PPUSH
9667: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9671: LD_VAR 0 1
9675: PPUSH
9676: LD_INT 21
9678: PPUSH
9679: LD_INT 1
9681: PPUSH
9682: LD_INT 1
9684: PPUSH
9685: LD_INT 43
9687: PPUSH
9688: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gun ) ;
9692: LD_VAR 0 1
9696: PPUSH
9697: LD_INT 21
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: LD_INT 44
9708: PPUSH
9709: CALL_OW 185
// end ; 2 :
9713: GO 9864
9715: LD_INT 2
9717: DOUBLE
9718: EQUAL
9719: IFTRUE 9723
9721: GO 9789
9723: POP
// begin AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
9724: LD_VAR 0 1
9728: PPUSH
9729: LD_INT 21
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: LD_INT 1
9737: PPUSH
9738: LD_INT 42
9740: PPUSH
9741: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9745: LD_VAR 0 1
9749: PPUSH
9750: LD_INT 21
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_INT 43
9761: PPUSH
9762: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9766: LD_VAR 0 1
9770: PPUSH
9771: LD_INT 21
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: LD_INT 43
9782: PPUSH
9783: CALL_OW 185
// end ; 3 :
9787: GO 9864
9789: LD_INT 3
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9863
9797: POP
// begin AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
9798: LD_VAR 0 1
9802: PPUSH
9803: LD_INT 21
9805: PPUSH
9806: LD_INT 1
9808: PPUSH
9809: LD_INT 1
9811: PPUSH
9812: LD_INT 42
9814: PPUSH
9815: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
9819: LD_VAR 0 1
9823: PPUSH
9824: LD_INT 21
9826: PPUSH
9827: LD_INT 1
9829: PPUSH
9830: LD_INT 1
9832: PPUSH
9833: LD_INT 42
9835: PPUSH
9836: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ) ;
9840: LD_VAR 0 1
9844: PPUSH
9845: LD_INT 21
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: LD_INT 1
9853: PPUSH
9854: LD_INT 43
9856: PPUSH
9857: CALL_OW 185
// end ; end ;
9861: GO 9864
9863: POP
// end ;
9864: LD_VAR 0 2
9868: RET
// export function KirovAttackOmicron ; var i , vehicle , vehicles , goodVehs ; begin
9869: LD_INT 0
9871: PPUSH
9872: PPUSH
9873: PPUSH
9874: PPUSH
9875: PPUSH
// vehicles = [ ] ;
9876: LD_ADDR_VAR 0 4
9880: PUSH
9881: EMPTY
9882: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
9883: LD_ADDR_VAR 0 3
9887: PUSH
9888: LD_EXP 71
9892: PUSH
9893: FOR_IN
9894: IFFALSE 9943
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
9896: LD_ADDR_VAR 0 4
9900: PUSH
9901: LD_VAR 0 4
9905: PPUSH
9906: LD_INT 1
9908: PPUSH
9909: LD_VAR 0 3
9913: PUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: CALL_OW 313
9923: PUSH
9924: LD_INT 1
9926: ARRAY
9927: PUSH
9928: LD_INT 1
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: PPUSH
9936: CALL_OW 2
9940: ST_TO_ADDR
9941: GO 9893
9943: POP
9944: POP
// repeat for i := 1 to vehicles do
9945: LD_ADDR_VAR 0 2
9949: PUSH
9950: DOUBLE
9951: LD_INT 1
9953: DEC
9954: ST_TO_ADDR
9955: LD_VAR 0 4
9959: PUSH
9960: FOR_TO
9961: IFFALSE 9999
// if vehicles [ i ] [ 3 ] = 1 then
9963: LD_VAR 0 4
9967: PUSH
9968: LD_VAR 0 2
9972: ARRAY
9973: PUSH
9974: LD_INT 3
9976: ARRAY
9977: PUSH
9978: LD_INT 1
9980: EQUAL
9981: IFFALSE 9997
// goodVehs = goodVehs + 1 ;
9983: LD_ADDR_VAR 0 5
9987: PUSH
9988: LD_VAR 0 5
9992: PUSH
9993: LD_INT 1
9995: PLUS
9996: ST_TO_ADDR
9997: GO 9960
9999: POP
10000: POP
// if goodVehs = vehicles then
10001: LD_VAR 0 5
10005: PUSH
10006: LD_VAR 0 4
10010: EQUAL
10011: IFFALSE 10060
// for i := 1 to vehicles do
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: DOUBLE
10019: LD_INT 1
10021: DEC
10022: ST_TO_ADDR
10023: LD_VAR 0 4
10027: PUSH
10028: FOR_TO
10029: IFFALSE 10058
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
10031: LD_VAR 0 4
10035: PUSH
10036: LD_VAR 0 2
10040: ARRAY
10041: PUSH
10042: LD_INT 1
10044: ARRAY
10045: PPUSH
10046: LD_INT 26
10048: PPUSH
10049: LD_INT 35
10051: PPUSH
10052: CALL_OW 114
10056: GO 10028
10058: POP
10059: POP
// goodVehs = 0 ;
10060: LD_ADDR_VAR 0 5
10064: PUSH
10065: LD_INT 0
10067: ST_TO_ADDR
// for i := 1 to vehicles do
10068: LD_ADDR_VAR 0 2
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_VAR 0 4
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10396
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 then
10086: LD_VAR 0 4
10090: PUSH
10091: LD_VAR 0 2
10095: ARRAY
10096: PUSH
10097: LD_INT 1
10099: ARRAY
10100: PPUSH
10101: CALL_OW 256
10105: PUSH
10106: LD_INT 500
10108: LESS
10109: IFFALSE 10227
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
10111: LD_ADDR_VAR 0 4
10115: PUSH
10116: LD_VAR 0 4
10120: PPUSH
10121: LD_VAR 0 2
10125: PUSH
10126: LD_VAR 0 4
10130: PUSH
10131: LD_VAR 0 2
10135: ARRAY
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PPUSH
10141: LD_INT 2
10143: PPUSH
10144: CALL 50143 0 3
10148: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
10149: LD_VAR 0 4
10153: PUSH
10154: LD_VAR 0 2
10158: ARRAY
10159: PUSH
10160: LD_INT 1
10162: ARRAY
10163: PPUSH
10164: LD_INT 78
10166: PPUSH
10167: LD_INT 39
10169: PPUSH
10170: CALL_OW 111
// AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
10174: LD_VAR 0 4
10178: PUSH
10179: LD_VAR 0 2
10183: ARRAY
10184: PUSH
10185: LD_INT 2
10187: ARRAY
10188: PPUSH
10189: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
10193: LD_VAR 0 4
10197: PUSH
10198: LD_VAR 0 2
10202: ARRAY
10203: PUSH
10204: LD_INT 2
10206: ARRAY
10207: PPUSH
10208: LD_VAR 0 4
10212: PUSH
10213: LD_VAR 0 2
10217: ARRAY
10218: PUSH
10219: LD_INT 1
10221: ARRAY
10222: PPUSH
10223: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
10227: LD_VAR 0 4
10231: PUSH
10232: LD_VAR 0 2
10236: ARRAY
10237: PUSH
10238: LD_INT 1
10240: ARRAY
10241: PPUSH
10242: CALL_OW 256
10246: PUSH
10247: LD_INT 1000
10249: EQUAL
10250: PUSH
10251: LD_VAR 0 4
10255: PUSH
10256: LD_VAR 0 2
10260: ARRAY
10261: PUSH
10262: LD_INT 3
10264: ARRAY
10265: PUSH
10266: LD_INT 2
10268: EQUAL
10269: AND
10270: IFFALSE 10344
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
10272: LD_ADDR_VAR 0 4
10276: PUSH
10277: LD_VAR 0 4
10281: PPUSH
10282: LD_VAR 0 2
10286: PUSH
10287: LD_VAR 0 4
10291: PUSH
10292: LD_VAR 0 2
10296: ARRAY
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL 50143 0 3
10309: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
10310: LD_VAR 0 4
10314: PUSH
10315: LD_VAR 0 2
10319: ARRAY
10320: PUSH
10321: LD_INT 2
10323: ARRAY
10324: PPUSH
10325: LD_VAR 0 4
10329: PUSH
10330: LD_VAR 0 2
10334: ARRAY
10335: PUSH
10336: LD_INT 1
10338: ARRAY
10339: PPUSH
10340: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
10344: LD_VAR 0 4
10348: PUSH
10349: LD_VAR 0 2
10353: ARRAY
10354: PUSH
10355: LD_INT 1
10357: ARRAY
10358: PPUSH
10359: CALL_OW 256
10363: PUSH
10364: LD_INT 250
10366: LESS
10367: IFFALSE 10394
// vehicles = vehicles diff [ vehicles [ i ] ] ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_VAR 0 4
10378: PUSH
10379: LD_VAR 0 4
10383: PUSH
10384: LD_VAR 0 2
10388: ARRAY
10389: PUSH
10390: EMPTY
10391: LIST
10392: DIFF
10393: ST_TO_ADDR
// end ;
10394: GO 10083
10396: POP
10397: POP
// wait ( 0 0$1 ) ;
10398: LD_INT 35
10400: PPUSH
10401: CALL_OW 67
// until omicronSurrender ;
10405: LD_EXP 23
10409: IFFALSE 9945
// end ; end_of_file
10411: LD_VAR 0 1
10415: RET
// export function Lose_Burlak ; begin
10416: LD_INT 0
10418: PPUSH
// YouLost ( Burlak ) ;
10419: LD_STRING Burlak
10421: PPUSH
10422: CALL_OW 104
// end ;
10426: LD_VAR 0 1
10430: RET
// export function Lose_Omicron ; begin
10431: LD_INT 0
10433: PPUSH
// YouLost ( Omicron ) ;
10434: LD_STRING Omicron
10436: PPUSH
10437: CALL_OW 104
// end ;
10441: LD_VAR 0 1
10445: RET
// export function Lose_Vehicles ; begin
10446: LD_INT 0
10448: PPUSH
// YouLost ( Vehicles ) ;
10449: LD_STRING Vehicles
10451: PPUSH
10452: CALL_OW 104
// end ;
10456: LD_VAR 0 1
10460: RET
// export function Lose_SelfAttack ; begin
10461: LD_INT 0
10463: PPUSH
// YouLost ( SelfAttack ) ;
10464: LD_STRING SelfAttack
10466: PPUSH
10467: CALL_OW 104
// end ;
10471: LD_VAR 0 1
10475: RET
// export function Lose_Delay ; begin
10476: LD_INT 0
10478: PPUSH
// YouLost ( Delay ) ;
10479: LD_STRING Delay
10481: PPUSH
10482: CALL_OW 104
// end ; end_of_file
10486: LD_VAR 0 1
10490: RET
// export function FinishMission ; begin
10491: LD_INT 0
10493: PPUSH
// SetRewards ;
10494: CALL 10515 0 0
// SavePlayerCharacters ;
10498: CALL 10729 0 0
// SaveGlobalVariables ;
10502: CALL 11002 0 0
// YouWin ;
10506: CALL_OW 103
// end ;
10510: LD_VAR 0 1
10514: RET
// function SetRewards ; var unitsToReward ; begin
10515: LD_INT 0
10517: PPUSH
10518: PPUSH
// if produceMoreVehicles then
10519: LD_EXP 16
10523: IFFALSE 10537
// AddMedal ( Surplus , 1 ) else
10525: LD_STRING Surplus
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 101
10535: GO 10567
// if produceOnlyForYou then
10537: LD_EXP 17
10541: IFFALSE 10556
// AddMedal ( Surplus , - 1 ) else
10543: LD_STRING Surplus
10545: PPUSH
10546: LD_INT 1
10548: NEG
10549: PPUSH
10550: CALL_OW 101
10554: GO 10567
// AddMedal ( Surplus , - 2 ) ;
10556: LD_STRING Surplus
10558: PPUSH
10559: LD_INT 2
10561: NEG
10562: PPUSH
10563: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
10567: LD_EXP 12
10571: PUSH
10572: LD_EXP 43
10576: LESS
10577: IFFALSE 10591
// AddMedal ( PreventReinforcements , 1 ) else
10579: LD_STRING PreventReinforcements
10581: PPUSH
10582: LD_INT 1
10584: PPUSH
10585: CALL_OW 101
10589: GO 10602
// AddMedal ( PreventReinforcements , - 1 ) ;
10591: LD_STRING PreventReinforcements
10593: PPUSH
10594: LD_INT 1
10596: NEG
10597: PPUSH
10598: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
10602: LD_EXP 7
10606: PUSH
10607: LD_EXP 50
10611: PPUSH
10612: CALL_OW 302
10616: AND
10617: IFFALSE 10631
// AddMedal ( Scholtze , 1 ) else
10619: LD_STRING Scholtze
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 101
10629: GO 10642
// AddMedal ( Scholtze , - 1 ) ;
10631: LD_STRING Scholtze
10633: PPUSH
10634: LD_INT 1
10636: NEG
10637: PPUSH
10638: CALL_OW 101
// GiveMedals ( Main ) ;
10642: LD_STRING Main
10644: PPUSH
10645: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
10649: LD_ADDR_VAR 0 2
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_INT 3
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 1
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 69
10682: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
10683: LD_ADDR_VAR 0 2
10687: PUSH
10688: LD_VAR 0 2
10692: PUSH
10693: LD_EXP 73
10697: ADD
10698: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
10699: LD_ADDR_VAR 0 2
10703: PUSH
10704: LD_VAR 0 2
10708: PUSH
10709: LD_EXP 57
10713: DIFF
10714: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
10715: LD_VAR 0 2
10719: PPUSH
10720: CALL_OW 43
// end ;
10724: LD_VAR 0 1
10728: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
10729: LD_INT 0
10731: PPUSH
10732: PPUSH
10733: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
10734: LD_EXP 44
10738: PPUSH
10739: LD_STRING Burlak
10741: PPUSH
10742: LD_INT 3
10744: PPUSH
10745: CALL 7307 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
10749: LD_EXP 45
10753: PPUSH
10754: LD_STRING Gnyevko
10756: PPUSH
10757: LD_INT 3
10759: PPUSH
10760: CALL 7307 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
10764: LD_EXP 47
10768: PPUSH
10769: LD_STRING Kovalyuk
10771: PPUSH
10772: LD_INT 3
10774: PPUSH
10775: CALL 7307 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
10779: LD_EXP 46
10783: PPUSH
10784: LD_STRING Kirilenkova
10786: PPUSH
10787: LD_INT 3
10789: PPUSH
10790: CALL 7307 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
10794: LD_EXP 50
10798: PPUSH
10799: LD_STRING Scholtze
10801: PPUSH
10802: LD_INT 3
10804: PPUSH
10805: CALL 7307 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
10809: LD_EXP 48
10813: PPUSH
10814: LD_STRING Belkov
10816: PPUSH
10817: LD_INT 3
10819: PPUSH
10820: CALL 7307 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
10824: LD_EXP 49
10828: PPUSH
10829: LD_STRING Belkov2
10831: PPUSH
10832: LD_INT 3
10834: PPUSH
10835: CALL 7307 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
10839: LD_ADDR_VAR 0 2
10843: PUSH
10844: LD_INT 22
10846: PUSH
10847: LD_INT 3
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 21
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: PUSH
10873: LD_EXP 44
10877: PUSH
10878: LD_EXP 45
10882: PUSH
10883: LD_EXP 48
10887: PUSH
10888: LD_EXP 49
10892: PUSH
10893: LD_EXP 47
10897: PUSH
10898: LD_EXP 46
10902: PUSH
10903: LD_EXP 50
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: DIFF
10917: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
10918: LD_VAR 0 2
10922: PPUSH
10923: LD_STRING other_survivors
10925: PPUSH
10926: LD_INT 3
10928: PPUSH
10929: CALL 7363 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff [ Kurin , Popov ] ;
10933: LD_ADDR_VAR 0 3
10937: PUSH
10938: LD_INT 22
10940: PUSH
10941: LD_INT 6
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 21
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 69
10966: PUSH
10967: LD_EXP 56
10971: PUSH
10972: LD_EXP 57
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: DIFF
10981: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
10982: LD_VAR 0 3
10986: PPUSH
10987: LD_STRING other_kirov
10989: PPUSH
10990: LD_INT 6
10992: PPUSH
10993: CALL 7363 0 3
// end ;
10997: LD_VAR 0 1
11001: RET
// function SaveGlobalVariables ; begin
11002: LD_INT 0
11004: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
11005: LD_EXP 26
11009: PPUSH
11010: LD_STRING 03_KurinOpinion_1
11012: PPUSH
11013: CALL_OW 39
// end ; end_of_file
11017: LD_VAR 0 1
11021: RET
// export function CustomEvent ( event ) ; begin
11022: LD_INT 0
11024: PPUSH
// end ;
11025: LD_VAR 0 2
11029: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
11030: LD_INT 0
11032: PPUSH
11033: PPUSH
11034: PPUSH
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: LD_INT 3
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 21
11056: PUSH
11057: LD_INT 1
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: PUSH
11073: FOR_IN
11074: IFFALSE 11301
// if GetTaskList ( i ) > 0 then
11076: LD_VAR 0 2
11080: PPUSH
11081: CALL_OW 437
11085: PUSH
11086: LD_INT 0
11088: GREATER
11089: IFFALSE 11299
// for j = 1 to GetTaskList ( i ) do
11091: LD_ADDR_VAR 0 3
11095: PUSH
11096: DOUBLE
11097: LD_INT 1
11099: DEC
11100: ST_TO_ADDR
11101: LD_VAR 0 2
11105: PPUSH
11106: CALL_OW 437
11110: PUSH
11111: FOR_TO
11112: IFFALSE 11297
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
11114: LD_ADDR_VAR 0 4
11118: PUSH
11119: LD_VAR 0 2
11123: PPUSH
11124: CALL_OW 437
11128: PUSH
11129: LD_VAR 0 3
11133: ARRAY
11134: PUSH
11135: LD_INT 4
11137: ARRAY
11138: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
11139: LD_ADDR_VAR 0 8
11143: PUSH
11144: LD_VAR 0 2
11148: PPUSH
11149: CALL_OW 437
11153: PUSH
11154: LD_VAR 0 3
11158: ARRAY
11159: PUSH
11160: LD_INT 5
11162: ARRAY
11163: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
11164: LD_ADDR_VAR 0 6
11168: PUSH
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 437
11178: PUSH
11179: LD_VAR 0 3
11183: ARRAY
11184: PUSH
11185: LD_INT 2
11187: ARRAY
11188: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
11189: LD_ADDR_VAR 0 7
11193: PUSH
11194: LD_VAR 0 2
11198: PPUSH
11199: CALL_OW 437
11203: PUSH
11204: LD_VAR 0 3
11208: ARRAY
11209: PUSH
11210: LD_INT 3
11212: ARRAY
11213: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
11214: LD_VAR 0 4
11218: PPUSH
11219: CALL_OW 255
11223: PUSH
11224: LD_INT 6
11226: EQUAL
11227: PUSH
11228: LD_VAR 0 2
11232: PPUSH
11233: CALL_OW 437
11237: PUSH
11238: LD_VAR 0 3
11242: ARRAY
11243: PUSH
11244: LD_INT 1
11246: ARRAY
11247: PUSH
11248: LD_STRING <
11250: EQUAL
11251: AND
11252: IFFALSE 11265
// SetTaskList ( i , [ ] ) ;
11254: LD_VAR 0 2
11258: PPUSH
11259: EMPTY
11260: PPUSH
11261: CALL_OW 446
// if InArea ( x , y , HideMapPartArea ) then
11265: LD_VAR 0 6
11269: PPUSH
11270: LD_VAR 0 7
11274: PPUSH
11275: LD_INT 25
11277: PPUSH
11278: CALL_OW 309
11282: IFFALSE 11295
// SetTaskList ( i , [ ] ) ;
11284: LD_VAR 0 2
11288: PPUSH
11289: EMPTY
11290: PPUSH
11291: CALL_OW 446
// end ;
11295: GO 11111
11297: POP
11298: POP
11299: GO 11073
11301: POP
11302: POP
// end ;
11303: PPOPN 8
11305: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
11306: LD_VAR 0 2
11310: PUSH
11311: LD_INT 6
11313: EQUAL
11314: IFFALSE 11328
// SetSide ( building , 6 ) ;
11316: LD_VAR 0 1
11320: PPUSH
11321: LD_INT 6
11323: PPUSH
11324: CALL_OW 235
// end ;
11328: PPOPN 3
11330: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
11331: LD_INT 0
11333: PPUSH
11334: PPUSH
// begin diffUnits = [ ] ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: EMPTY
11341: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
11342: LD_VAR 0 1
11346: PPUSH
11347: CALL_OW 255
11351: PUSH
11352: LD_INT 3
11354: EQUAL
11355: PUSH
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 266
11365: PUSH
11366: LD_INT 0
11368: EQUAL
11369: AND
11370: PUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: LD_INT 22
11378: PPUSH
11379: CALL_OW 308
11383: AND
11384: IFFALSE 11398
// SetBName ( building , kagan ) ;
11386: LD_VAR 0 1
11390: PPUSH
11391: LD_STRING kagan
11393: PPUSH
11394: CALL_OW 500
// if GetSide ( building ) = 6 then
11398: LD_VAR 0 1
11402: PPUSH
11403: CALL_OW 255
11407: PUSH
11408: LD_INT 6
11410: EQUAL
11411: IFFALSE 11919
// begin diffUnits = diffUnits ^ Kurin ;
11413: LD_ADDR_VAR 0 2
11417: PUSH
11418: LD_VAR 0 2
11422: PUSH
11423: LD_EXP 56
11427: ADD
11428: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
11429: LD_ADDR_VAR 0 2
11433: PUSH
11434: LD_VAR 0 2
11438: PUSH
11439: LD_EXP 73
11443: ADD
11444: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
11445: LD_ADDR_VAR 0 2
11449: PUSH
11450: LD_VAR 0 2
11454: PUSH
11455: LD_EXP 66
11459: ADD
11460: ST_TO_ADDR
// if GetBType ( building ) = b_bunker then
11461: LD_VAR 0 1
11465: PPUSH
11466: CALL_OW 266
11470: PUSH
11471: LD_INT 32
11473: EQUAL
11474: IFFALSE 11734
// begin kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
11476: LD_ADDR_EXP 67
11480: PUSH
11481: LD_EXP 67
11485: PUSH
11486: LD_VAR 0 1
11490: ADD
11491: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
11492: LD_ADDR_VAR 0 3
11496: PUSH
11497: LD_INT 19
11499: PPUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 6
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 60
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 70
11542: PUSH
11543: LD_VAR 0 2
11547: DIFF
11548: ST_TO_ADDR
// if canTakeUnits then
11549: LD_VAR 0 3
11553: IFFALSE 11687
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
11555: LD_VAR 0 3
11559: PUSH
11560: LD_INT 1
11562: ARRAY
11563: PPUSH
11564: CALL_OW 257
11568: PUSH
11569: LD_INT 1
11571: NONEQUAL
11572: IFFALSE 11667
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
11574: LD_VAR 0 3
11578: PUSH
11579: LD_INT 1
11581: ARRAY
11582: PPUSH
11583: LD_INT 22
11585: PUSH
11586: LD_INT 6
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PUSH
11593: LD_INT 21
11595: PUSH
11596: LD_INT 3
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 30
11605: PUSH
11606: LD_INT 5
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: PPUSH
11618: CALL_OW 69
11622: PUSH
11623: LD_INT 1
11625: ARRAY
11626: PPUSH
11627: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
11631: LD_VAR 0 3
11635: PUSH
11636: LD_INT 1
11638: ARRAY
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
11647: LD_VAR 0 3
11651: PUSH
11652: LD_INT 1
11654: ARRAY
11655: PPUSH
11656: CALL_OW 182
// wait ( 0 0$1 ) ;
11660: LD_INT 35
11662: PPUSH
11663: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , building ) ;
11667: LD_VAR 0 3
11671: PUSH
11672: LD_INT 1
11674: ARRAY
11675: PPUSH
11676: LD_VAR 0 1
11680: PPUSH
11681: CALL_OW 120
// end else
11685: GO 11734
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ building ;
11687: LD_ADDR_EXP 68
11691: PUSH
11692: LD_EXP 68
11696: PUSH
11697: LD_VAR 0 1
11701: ADD
11702: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
11703: LD_ADDR_EXP 75
11707: PUSH
11708: LD_EXP 75
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: LD_EXP 75
11720: PUSH
11721: LD_INT 1
11723: ARRAY
11724: PUSH
11725: LD_INT 1
11727: PLUS
11728: PPUSH
11729: CALL_OW 1
11733: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_ext_noncombat then
11734: LD_VAR 0 1
11738: PPUSH
11739: CALL_OW 266
11743: PUSH
11744: LD_INT 19
11746: EQUAL
11747: IFFALSE 11773
// begin SpawnKirovSupport ;
11749: CALL 4361 0 0
// MountWeaponTurrent ;
11753: CALL 9496 0 0
// wait ( 3 3$30 ) ;
11757: LD_INT 7350
11759: PPUSH
11760: CALL_OW 67
// KirovProduceVehicles ( kirovFactory ) ;
11764: LD_EXP 21
11768: PPUSH
11769: CALL 9570 0 1
// end ; if GetBType ( building ) = b_depot then
11773: LD_VAR 0 1
11777: PPUSH
11778: CALL_OW 266
11782: PUSH
11783: LD_INT 0
11785: EQUAL
11786: IFFALSE 11818
// begin kirovOilDepot = building ;
11788: LD_ADDR_EXP 63
11792: PUSH
11793: LD_VAR 0 1
11797: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
11798: LD_EXP 63
11802: PPUSH
11803: CALL_OW 274
11807: PPUSH
11808: LD_INT 2
11810: PPUSH
11811: LD_INT 3000
11813: PPUSH
11814: CALL_OW 277
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
11818: LD_VAR 0 1
11822: PPUSH
11823: CALL_OW 266
11827: PUSH
11828: LD_INT 31
11830: EQUAL
11831: PUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 266
11841: PUSH
11842: LD_INT 4
11844: EQUAL
11845: OR
11846: PUSH
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_INT 21
11854: PPUSH
11855: CALL_OW 308
11859: AND
11860: IFFALSE 11919
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
11862: LD_EXP 72
11866: PPUSH
11867: LD_INT 25
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 56
11879: PUSH
11880: EMPTY
11881: LIST
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: LD_INT 60
11888: PUSH
11889: EMPTY
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: LIST
11900: PPUSH
11901: CALL_OW 72
11905: PUSH
11906: LD_INT 1
11908: ARRAY
11909: PPUSH
11910: LD_VAR 0 1
11914: PPUSH
11915: CALL_OW 120
// end ; end ;
11919: PPOPN 3
11921: END
// on UpgradeComplete ( building ) do var i , tmp ;
11922: LD_INT 0
11924: PPUSH
11925: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
11926: LD_VAR 0 1
11930: PPUSH
11931: CALL_OW 255
11935: PUSH
11936: LD_INT 3
11938: EQUAL
11939: PUSH
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 266
11949: PUSH
11950: LD_INT 3
11952: EQUAL
11953: AND
11954: PUSH
11955: LD_EXP 8
11959: NOT
11960: AND
11961: IFFALSE 11972
// Dial_UpgradeWorkshop ( building ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: CALL 14980 0 1
// if Getside ( building ) = 6 then
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 255
11981: PUSH
11982: LD_INT 6
11984: EQUAL
11985: IFFALSE 12351
// begin if GetBType ( building ) = b_lab_half then
11987: LD_VAR 0 1
11991: PPUSH
11992: CALL_OW 266
11996: PUSH
11997: LD_INT 7
11999: EQUAL
12000: IFFALSE 12318
// begin if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) then
12002: LD_INT 19
12004: PPUSH
12005: LD_INT 22
12007: PUSH
12008: LD_INT 6
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 21
12017: PUSH
12018: LD_INT 1
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 4
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 70
12044: IFFALSE 12100
// ComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) , building ) else
12046: LD_INT 19
12048: PPUSH
12049: LD_INT 22
12051: PUSH
12052: LD_INT 6
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 21
12061: PUSH
12062: LD_INT 1
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 25
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: PPUSH
12084: CALL_OW 70
12088: PPUSH
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 120
12098: GO 12303
// begin tmp = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff Kurin ;
12100: LD_ADDR_VAR 0 3
12104: PUSH
12105: LD_INT 19
12107: PPUSH
12108: LD_INT 22
12110: PUSH
12111: LD_INT 6
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 21
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 3
12130: PUSH
12131: LD_INT 60
12133: PUSH
12134: EMPTY
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 70
12150: PUSH
12151: LD_EXP 56
12155: DIFF
12156: ST_TO_ADDR
// if tmp > 2 then
12157: LD_VAR 0 3
12161: PUSH
12162: LD_INT 2
12164: GREATER
12165: IFFALSE 12235
// begin for i := 1 to rand ( 1 , 2 ) do
12167: LD_ADDR_VAR 0 2
12171: PUSH
12172: DOUBLE
12173: LD_INT 1
12175: DEC
12176: ST_TO_ADDR
12177: LD_INT 1
12179: PPUSH
12180: LD_INT 2
12182: PPUSH
12183: CALL_OW 12
12187: PUSH
12188: FOR_TO
12189: IFFALSE 12231
// begin ComEnterUnit ( tmp [ i ] , building ) ;
12191: LD_VAR 0 3
12195: PUSH
12196: LD_VAR 0 2
12200: ARRAY
12201: PPUSH
12202: LD_VAR 0 1
12206: PPUSH
12207: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_scientistic ) ;
12211: LD_VAR 0 3
12215: PUSH
12216: LD_VAR 0 2
12220: ARRAY
12221: PPUSH
12222: LD_INT 4
12224: PPUSH
12225: CALL_OW 183
// end ;
12229: GO 12188
12231: POP
12232: POP
// end else
12233: GO 12303
// begin for i := 1 to rand ( 1 , tmp ) do
12235: LD_ADDR_VAR 0 2
12239: PUSH
12240: DOUBLE
12241: LD_INT 1
12243: DEC
12244: ST_TO_ADDR
12245: LD_INT 1
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: CALL_OW 12
12257: PUSH
12258: FOR_TO
12259: IFFALSE 12301
// begin ComEnterUnit ( tmp [ i ] , building ) ;
12261: LD_VAR 0 3
12265: PUSH
12266: LD_VAR 0 2
12270: ARRAY
12271: PPUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 120
// AddComChangeProfession ( tmp [ i ] , class_scientistic ) ;
12281: LD_VAR 0 3
12285: PUSH
12286: LD_VAR 0 2
12290: ARRAY
12291: PPUSH
12292: LD_INT 4
12294: PPUSH
12295: CALL_OW 183
// end ;
12299: GO 12258
12301: POP
12302: POP
// end ; end ; ResAllTechs ( 6 , building , 3 ) ;
12303: LD_INT 6
12305: PPUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: LD_INT 3
12313: PPUSH
12314: CALL 8158 0 3
// end ; if GetBType ( building ) = b_factory then
12318: LD_VAR 0 1
12322: PPUSH
12323: CALL_OW 266
12327: PUSH
12328: LD_INT 3
12330: EQUAL
12331: IFFALSE 12351
// begin kirovFactory = building ;
12333: LD_ADDR_EXP 21
12337: PUSH
12338: LD_VAR 0 1
12342: ST_TO_ADDR
// kirovCompleteFactory = true ;
12343: LD_ADDR_EXP 22
12347: PUSH
12348: LD_INT 1
12350: ST_TO_ADDR
// end ; end ; end ;
12351: PPOPN 3
12353: END
// on UnitDestroyed ( un ) do begin MCE_UnitDestroyed ( un ) ;
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL 83326 0 1
// if un = Burlak then
12363: LD_VAR 0 1
12367: PUSH
12368: LD_EXP 44
12372: EQUAL
12373: IFFALSE 12379
// Lose_Burlak ;
12375: CALL 10416 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
12379: LD_VAR 0 1
12383: PUSH
12384: LD_EXP 55
12388: EQUAL
12389: PUSH
12390: LD_EXP 28
12394: NOT
12395: AND
12396: IFFALSE 12402
// Lose_Omicron ;
12398: CALL 10431 0 0
// end ;
12402: PPOPN 1
12404: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
12405: LD_VAR 0 1
12409: PUSH
12410: LD_INT 3
12412: EQUAL
12413: PUSH
12414: LD_VAR 0 2
12418: PUSH
12419: LD_INT 6
12421: EQUAL
12422: AND
12423: IFFALSE 12429
// Lose_SelfAttack ;
12425: CALL 10461 0 0
// end ;
12429: PPOPN 2
12431: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_VAR 0 2
12441: PPUSH
12442: CALL 82238 0 2
// if GetSide ( vehicle ) = 6 then
12446: LD_VAR 0 1
12450: PPUSH
12451: CALL_OW 255
12455: PUSH
12456: LD_INT 6
12458: EQUAL
12459: IFFALSE 12624
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
12461: LD_VAR 0 1
12465: PPUSH
12466: CALL_OW 264
12470: PUSH
12471: LD_INT 51
12473: EQUAL
12474: PUSH
12475: LD_EXP 69
12479: NOT
12480: AND
12481: IFFALSE 12495
// kirovTransportCargo = vehicle else
12483: LD_ADDR_EXP 69
12487: PUSH
12488: LD_VAR 0 1
12492: ST_TO_ADDR
12493: GO 12567
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
12495: LD_VAR 0 1
12499: PPUSH
12500: CALL_OW 264
12504: PUSH
12505: LD_INT 51
12507: EQUAL
12508: IFFALSE 12567
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
12510: LD_VAR 0 1
12514: PPUSH
12515: LD_EXP 63
12519: PPUSH
12520: LD_INT 2
12522: PPUSH
12523: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
12527: LD_VAR 0 1
12531: PPUSH
12532: LD_INT 137
12534: PPUSH
12535: LD_INT 99
12537: PPUSH
12538: CALL_OW 171
// AddComHold ( vehicle ) ;
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
12551: LD_ADDR_EXP 70
12555: PUSH
12556: LD_EXP 70
12560: PUSH
12561: LD_VAR 0 1
12565: ADD
12566: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
12567: LD_VAR 0 1
12571: PPUSH
12572: CALL_OW 264
12576: PUSH
12577: LD_INT 42
12579: PUSH
12580: LD_INT 43
12582: PUSH
12583: LD_INT 44
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: LIST
12590: IN
12591: IFFALSE 12624
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
12593: LD_ADDR_EXP 71
12597: PUSH
12598: LD_EXP 71
12602: PUSH
12603: LD_VAR 0 1
12607: ADD
12608: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 137
12616: PPUSH
12617: LD_INT 99
12619: PPUSH
12620: CALL_OW 111
// end ; end ; end ;
12624: PPOPN 2
12626: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_VAR 0 2
12636: PPUSH
12637: LD_VAR 0 3
12641: PPUSH
12642: LD_VAR 0 4
12646: PPUSH
12647: CALL 82076 0 4
// if side = 6 then
12651: LD_VAR 0 3
12655: PUSH
12656: LD_INT 6
12658: EQUAL
12659: IFFALSE 12682
// begin ComExitVehicle ( capturing_unit ) ;
12661: LD_VAR 0 4
12665: PPUSH
12666: CALL_OW 121
// SetSide ( new , 6 ) ;
12670: LD_VAR 0 1
12674: PPUSH
12675: LD_INT 6
12677: PPUSH
12678: CALL_OW 235
// end ; end ;
12682: PPOPN 4
12684: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 then
12685: LD_VAR 0 1
12689: PPUSH
12690: CALL_OW 255
12694: PUSH
12695: LD_INT 6
12697: EQUAL
12698: IFFALSE 12715
// AddComAgressiveMove ( vehicle , 28 , 35 ) ;
12700: LD_VAR 0 1
12704: PPUSH
12705: LD_INT 28
12707: PPUSH
12708: LD_INT 35
12710: PPUSH
12711: CALL_OW 174
// end ; end_of_file
12715: PPOPN 2
12717: END
// export function MissionIntro ; var unit ; begin
12718: LD_INT 0
12720: PPUSH
12721: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
12722: LD_EXP 44
12726: PUSH
12727: LD_EXP 56
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PPUSH
12736: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
12740: LD_EXP 44
12744: PUSH
12745: LD_EXP 58
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PPUSH
12754: LD_EXP 56
12758: PPUSH
12759: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
12763: LD_EXP 56
12767: PPUSH
12768: LD_EXP 44
12772: PPUSH
12773: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
12777: LD_INT 3
12779: PPUSH
12780: LD_INT 26
12782: PPUSH
12783: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
12787: LD_EXP 48
12791: PPUSH
12792: CALL_OW 305
12796: NOT
12797: PUSH
12798: LD_EXP 49
12802: PPUSH
12803: CALL_OW 305
12807: NOT
12808: AND
12809: IFFALSE 12897
// begin Say ( Kurin , D1a-Kur-1 ) ;
12811: LD_EXP 56
12815: PPUSH
12816: LD_STRING D1a-Kur-1
12818: PPUSH
12819: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
12823: LD_EXP 44
12827: PPUSH
12828: LD_STRING D1a-Bur-1
12830: PPUSH
12831: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
12835: LD_EXP 56
12839: PPUSH
12840: LD_STRING D1a-Kur-2
12842: PPUSH
12843: CALL_OW 88
// if platonovOpinion <= 1 then
12847: LD_EXP 27
12851: PUSH
12852: LD_INT 1
12854: LESSEQUAL
12855: IFFALSE 12871
// Say ( Kurin , D1a-Kur-2a ) else
12857: LD_EXP 56
12861: PPUSH
12862: LD_STRING D1a-Kur-2a
12864: PPUSH
12865: CALL_OW 88
12869: GO 12883
// Say ( Kurin , D1a-Kur-2b ) ;
12871: LD_EXP 56
12875: PPUSH
12876: LD_STRING D1a-Kur-2b
12878: PPUSH
12879: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
12883: LD_EXP 44
12887: PPUSH
12888: LD_STRING D1a-Bur-2
12890: PPUSH
12891: CALL_OW 88
// end else
12895: GO 12933
// begin Say ( Kurin , D1b-Kur-1 ) ;
12897: LD_EXP 56
12901: PPUSH
12902: LD_STRING D1b-Kur-1
12904: PPUSH
12905: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
12909: LD_EXP 58
12913: PPUSH
12914: LD_STRING D1b-Bel-1
12916: PPUSH
12917: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
12921: LD_EXP 56
12925: PPUSH
12926: LD_STRING D1b-Kur-2
12928: PPUSH
12929: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
12933: LD_EXP 56
12937: PPUSH
12938: LD_STRING D2-Kur-1
12940: PPUSH
12941: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
12945: LD_EXP 44
12949: PPUSH
12950: LD_STRING D2-Bur-1
12952: PPUSH
12953: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
12957: LD_EXP 56
12961: PPUSH
12962: LD_STRING D2-Kur-2
12964: PPUSH
12965: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
12969: LD_EXP 44
12973: PPUSH
12974: LD_STRING D2-Bur-2
12976: PPUSH
12977: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
12981: LD_EXP 56
12985: PPUSH
12986: LD_STRING D2-Kur-3
12988: PPUSH
12989: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
12993: LD_INT 1
12995: PPUSH
12996: LD_INT 6
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: LD_INT 1
13004: PPUSH
13005: CALL_OW 80
// PrepareAmericansMissionIntro ;
13009: CALL 5748 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
13013: LD_EXP 77
13017: PPUSH
13018: LD_INT 28
13020: PPUSH
13021: LD_INT 35
13023: PPUSH
13024: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
13028: LD_INT 93
13030: PPUSH
13031: LD_INT 36
13033: PPUSH
13034: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
13038: LD_INT 93
13040: PPUSH
13041: LD_INT 36
13043: PPUSH
13044: LD_INT 3
13046: PPUSH
13047: LD_INT 9
13049: NEG
13050: PPUSH
13051: CALL_OW 330
// wait ( 0 0$6 ) ;
13055: LD_INT 210
13057: PPUSH
13058: CALL_OW 67
// CenterOnUnits ( Popov ) ;
13062: LD_EXP 57
13066: PPUSH
13067: CALL_OW 85
// wait ( 0 0$1 ) ;
13071: LD_INT 35
13073: PPUSH
13074: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
13078: LD_EXP 57
13082: PPUSH
13083: LD_STRING D2-Pop-3
13085: PPUSH
13086: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
13090: LD_EXP 44
13094: PUSH
13095: LD_EXP 56
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 87
// wait ( 0 0$1 ) ;
13108: LD_INT 35
13110: PPUSH
13111: CALL_OW 67
// for unit in amIntroUnits do
13115: LD_ADDR_VAR 0 2
13119: PUSH
13120: LD_EXP 77
13124: PUSH
13125: FOR_IN
13126: IFFALSE 13139
// RemoveUnit ( unit ) ;
13128: LD_VAR 0 2
13132: PPUSH
13133: CALL_OW 64
13137: GO 13125
13139: POP
13140: POP
// Say ( Kurin , D2-Kur-4 ) ;
13141: LD_EXP 56
13145: PPUSH
13146: LD_STRING D2-Kur-4
13148: PPUSH
13149: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
13153: LD_EXP 44
13157: PPUSH
13158: LD_STRING D2-Bur-4
13160: PPUSH
13161: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
13165: LD_EXP 56
13169: PPUSH
13170: LD_STRING D2-Kur-5
13172: PPUSH
13173: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
13177: LD_EXP 44
13181: PPUSH
13182: LD_STRING D2-Bur-5
13184: PPUSH
13185: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
13189: LD_EXP 56
13193: PPUSH
13194: LD_STRING D2-Kur-6
13196: PPUSH
13197: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
13201: LD_EXP 45
13205: PPUSH
13206: CALL_OW 305
13210: IFFALSE 13226
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
13212: LD_ADDR_EXP 35
13216: PUSH
13217: LD_EXP 35
13221: PUSH
13222: LD_INT 1
13224: MINUS
13225: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
13226: LD_EXP 47
13230: PPUSH
13231: CALL_OW 305
13235: IFFALSE 13251
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
13237: LD_ADDR_EXP 35
13241: PUSH
13242: LD_EXP 35
13246: PUSH
13247: LD_INT 1
13249: MINUS
13250: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
13251: LD_EXP 46
13255: PPUSH
13256: CALL_OW 305
13260: IFFALSE 13276
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
13262: LD_ADDR_EXP 35
13266: PUSH
13267: LD_EXP 35
13271: PUSH
13272: LD_INT 1
13274: MINUS
13275: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
13276: LD_EXP 35
13280: PPUSH
13281: CALL 7461 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
13285: LD_INT 93
13287: PPUSH
13288: LD_INT 36
13290: PPUSH
13291: LD_INT 3
13293: PPUSH
13294: CALL_OW 331
// Resetfog ;
13298: CALL_OW 335
// RevealFogArea ( 3 , RevealMapPartArea ) ;
13302: LD_INT 3
13304: PPUSH
13305: LD_INT 26
13307: PPUSH
13308: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
13312: LD_INT 22
13314: PUSH
13315: LD_INT 3
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 21
13324: PUSH
13325: LD_INT 1
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: PPUSH
13341: CALL_OW 122
// wait ( 0 0$1 ) ;
13345: LD_INT 35
13347: PPUSH
13348: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
13352: LD_INT 22
13354: PUSH
13355: LD_INT 3
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 21
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: PPUSH
13381: LD_EXP 55
13385: PPUSH
13386: CALL_OW 250
13390: PPUSH
13391: LD_EXP 55
13395: PPUSH
13396: CALL_OW 251
13400: PPUSH
13401: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
13405: LD_INT 35
13407: PPUSH
13408: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
13412: LD_EXP 44
13416: PPUSH
13417: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
13421: LD_EXP 44
13425: PPUSH
13426: LD_EXP 55
13430: PPUSH
13431: CALL_OW 296
13435: PUSH
13436: LD_INT 6
13438: LESS
13439: IFFALSE 13405
// InGameOff ;
13441: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
13445: LD_STRING M1
13447: PPUSH
13448: CALL_OW 337
// SaveForQuickRestart ;
13452: CALL_OW 22
// counterEnable = true ;
13456: LD_ADDR_EXP 83
13460: PUSH
13461: LD_INT 1
13463: ST_TO_ADDR
// counterIndex = 1 ;
13464: LD_ADDR_EXP 84
13468: PUSH
13469: LD_INT 1
13471: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
13472: LD_INT 3
13474: PPUSH
13475: LD_INT 26
13477: PPUSH
13478: CALL_OW 332
// ComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
13482: LD_EXP 73
13486: PUSH
13487: LD_EXP 57
13491: DIFF
13492: PPUSH
13493: LD_EXP 64
13497: PPUSH
13498: CALL_OW 120
// AddComUpgradeBreastwork ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) , b_bunker ) ;
13502: LD_INT 19
13504: PPUSH
13505: LD_INT 22
13507: PUSH
13508: LD_INT 6
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 21
13517: PUSH
13518: LD_INT 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 25
13527: PUSH
13528: LD_INT 2
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: PPUSH
13540: CALL_OW 70
13544: PPUSH
13545: LD_INT 19
13547: PPUSH
13548: LD_INT 22
13550: PUSH
13551: LD_INT 6
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 3
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 30
13570: PUSH
13571: LD_INT 31
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: PPUSH
13583: CALL_OW 70
13587: PPUSH
13588: LD_INT 32
13590: PPUSH
13591: CALL 8041 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_oil_power , 158 , 98 , 2 ) ;
13595: LD_INT 19
13597: PPUSH
13598: LD_INT 22
13600: PUSH
13601: LD_INT 6
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 1
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 25
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 70
13637: PPUSH
13638: LD_INT 26
13640: PPUSH
13641: LD_INT 158
13643: PPUSH
13644: LD_INT 98
13646: PPUSH
13647: LD_INT 2
13649: PPUSH
13650: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_oil_power , 163 , 98 , 2 ) ;
13654: LD_INT 19
13656: PPUSH
13657: LD_INT 22
13659: PUSH
13660: LD_INT 6
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 21
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 25
13679: PUSH
13680: LD_INT 2
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 70
13696: PPUSH
13697: LD_INT 26
13699: PPUSH
13700: LD_INT 163
13702: PPUSH
13703: LD_INT 98
13705: PPUSH
13706: LD_INT 2
13708: PPUSH
13709: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
13713: LD_INT 19
13715: PPUSH
13716: LD_INT 22
13718: PUSH
13719: LD_INT 6
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 21
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 2
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 70
13755: PPUSH
13756: LD_INT 17
13758: PPUSH
13759: LD_INT 159
13761: PPUSH
13762: LD_INT 116
13764: PPUSH
13765: LD_INT 0
13767: PPUSH
13768: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
13772: LD_INT 19
13774: PPUSH
13775: LD_INT 22
13777: PUSH
13778: LD_INT 6
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 21
13787: PUSH
13788: LD_INT 1
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 25
13797: PUSH
13798: LD_INT 2
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 70
13814: PPUSH
13815: LD_INT 19
13817: PPUSH
13818: LD_INT 161
13820: PPUSH
13821: LD_INT 115
13823: PPUSH
13824: LD_INT 5
13826: PPUSH
13827: CALL_OW 205
// ComFree ( [ Belkov , Belkov2 ] ) ;
13831: LD_EXP 48
13835: PUSH
13836: LD_EXP 49
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 139
// ComWalk ( ruScout ) ;
13849: LD_EXP 59
13853: PPUSH
13854: CALL_OW 138
// wait ( 0 0$1 ) ;
13858: LD_INT 35
13860: PPUSH
13861: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
13865: LD_EXP 59
13869: PUSH
13870: LD_EXP 57
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: LD_INT 99
13881: PPUSH
13882: LD_INT 37
13884: PPUSH
13885: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
13889: LD_EXP 59
13893: PUSH
13894: LD_EXP 57
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PPUSH
13903: LD_INT 88
13905: PPUSH
13906: LD_INT 60
13908: PPUSH
13909: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
13913: LD_EXP 59
13917: PUSH
13918: LD_EXP 57
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PPUSH
13927: LD_INT 129
13929: PPUSH
13930: LD_INT 99
13932: PPUSH
13933: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
13937: LD_EXP 57
13941: PUSH
13942: LD_EXP 59
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PPUSH
13951: LD_EXP 62
13955: PPUSH
13956: CALL_OW 180
// end ;
13960: LD_VAR 0 1
13964: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
13965: LD_EXP 22
13969: IFFALSE 14241
13971: GO 13973
13973: DISABLE
13974: LD_INT 0
13976: PPUSH
13977: PPUSH
13978: PPUSH
13979: PPUSH
13980: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
13981: LD_ADDR_VAR 0 4
13985: PUSH
13986: LD_VAR 0 4
13990: PUSH
13991: LD_EXP 56
13995: ADD
13996: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
13997: LD_ADDR_VAR 0 4
14001: PUSH
14002: LD_VAR 0 4
14006: PUSH
14007: LD_EXP 73
14011: ADD
14012: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
14013: LD_ADDR_VAR 0 4
14017: PUSH
14018: LD_VAR 0 4
14022: PUSH
14023: LD_EXP 66
14027: ADD
14028: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
14029: LD_ADDR_VAR 0 5
14033: PUSH
14034: LD_INT 19
14036: PPUSH
14037: LD_INT 22
14039: PUSH
14040: LD_INT 6
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 21
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 70
14065: PUSH
14066: LD_VAR 0 4
14070: DIFF
14071: ST_TO_ADDR
// pom = 6 ;
14072: LD_ADDR_VAR 0 3
14076: PUSH
14077: LD_INT 6
14079: ST_TO_ADDR
// if canTakeUnits then
14080: LD_VAR 0 5
14084: IFFALSE 14208
// for i = 1 to canTakeUnits do
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: DOUBLE
14092: LD_INT 1
14094: DEC
14095: ST_TO_ADDR
14096: LD_VAR 0 5
14100: PUSH
14101: FOR_TO
14102: IFFALSE 14206
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
14104: LD_VAR 0 5
14108: PUSH
14109: LD_VAR 0 1
14113: ARRAY
14114: PPUSH
14115: CALL_OW 257
14119: PUSH
14120: LD_INT 3
14122: NONEQUAL
14123: IFFALSE 14170
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
14125: LD_VAR 0 5
14129: PUSH
14130: LD_VAR 0 1
14134: ARRAY
14135: PPUSH
14136: LD_EXP 21
14140: PPUSH
14141: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
14145: LD_VAR 0 5
14149: PUSH
14150: LD_VAR 0 1
14154: ARRAY
14155: PPUSH
14156: LD_INT 1
14158: PPUSH
14159: CALL_OW 183
// wait ( 0 0$1 ) ;
14163: LD_INT 35
14165: PPUSH
14166: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
14170: LD_VAR 0 5
14174: PUSH
14175: LD_VAR 0 1
14179: ARRAY
14180: PPUSH
14181: LD_EXP 21
14185: PPUSH
14186: CALL_OW 120
// pom = pom - 1 ;
14190: LD_ADDR_VAR 0 3
14194: PUSH
14195: LD_VAR 0 3
14199: PUSH
14200: LD_INT 1
14202: MINUS
14203: ST_TO_ADDR
// end ;
14204: GO 14101
14206: POP
14207: POP
// if pom > 0 then
14208: LD_VAR 0 3
14212: PUSH
14213: LD_INT 0
14215: GREATER
14216: IFFALSE 14241
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
14218: LD_ADDR_EXP 75
14222: PUSH
14223: LD_EXP 75
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: LD_VAR 0 3
14235: PPUSH
14236: CALL_OW 1
14240: ST_TO_ADDR
// end ;
14241: PPOPN 5
14243: END
// every 0 0$1 trigger kirovTransportCargo do
14244: LD_EXP 69
14248: IFFALSE 14297
14250: GO 14252
14252: DISABLE
// begin enable ;
14253: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
14254: LD_EXP 69
14258: PPUSH
14259: LD_EXP 63
14263: PPUSH
14264: LD_INT 2
14266: PPUSH
14267: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
14271: LD_EXP 69
14275: PPUSH
14276: LD_EXP 62
14280: PPUSH
14281: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
14285: LD_EXP 69
14289: PPUSH
14290: LD_INT 100
14292: PPUSH
14293: CALL_OW 240
// end ;
14297: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
14298: LD_INT 78
14300: PPUSH
14301: LD_INT 112
14303: PPUSH
14304: LD_INT 3
14306: PPUSH
14307: CALL_OW 440
14311: IFFALSE 14365
14313: GO 14315
14315: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
14316: LD_INT 78
14318: PPUSH
14319: LD_INT 112
14321: PPUSH
14322: CALL_OW 84
// DialogueOn ;
14326: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
14330: LD_EXP 44
14334: PPUSH
14335: LD_STRING D2a-Bur-1
14337: PPUSH
14338: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
14342: LD_EXP 56
14346: PPUSH
14347: LD_STRING D2a-Kur-1
14349: PPUSH
14350: CALL_OW 94
// DialogueOff ;
14354: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
14358: LD_STRING M2
14360: PPUSH
14361: CALL_OW 337
// end ;
14365: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
14366: LD_EXP 10
14370: NOT
14371: IFFALSE 14563
14373: GO 14375
14375: DISABLE
14376: LD_INT 0
14378: PPUSH
// begin enable ;
14379: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: LD_INT 22
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 21
14397: PUSH
14398: LD_INT 2
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 23
14407: PUSH
14408: LD_INT 3
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 31
14420: PUSH
14421: LD_INT 21
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 31
14430: PUSH
14431: LD_INT 23
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: PPUSH
14449: CALL_OW 69
14453: PUSH
14454: FOR_IN
14455: IFFALSE 14522
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
14457: LD_VAR 0 1
14461: PPUSH
14462: LD_INT 48
14464: PPUSH
14465: LD_INT 81
14467: PPUSH
14468: CALL_OW 297
14472: PUSH
14473: LD_INT 7
14475: LESS
14476: IFFALSE 14520
// begin dialog_track = true ;
14478: LD_ADDR_EXP 10
14482: PUSH
14483: LD_INT 1
14485: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
14486: LD_INT 48
14488: PPUSH
14489: LD_INT 81
14491: PPUSH
14492: CALL_OW 86
// DialogueOn ;
14496: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
14500: LD_EXP 44
14504: PPUSH
14505: LD_STRING D5a-Bur-1
14507: PPUSH
14508: CALL_OW 88
// DialogueOff ;
14512: CALL_OW 7
// exit ;
14516: POP
14517: POP
14518: GO 14563
// end ;
14520: GO 14454
14522: POP
14523: POP
// SetTech ( 82 , 3 , state_enabled ) ;
14524: LD_INT 82
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
14537: LD_INT 84
14539: PPUSH
14540: LD_INT 3
14542: PPUSH
14543: LD_INT 1
14545: PPUSH
14546: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
14550: LD_INT 16
14552: PPUSH
14553: LD_INT 3
14555: PPUSH
14556: LD_INT 1
14558: PPUSH
14559: CALL_OW 324
// end ;
14563: PPOPN 1
14565: END
// every 5 5$30 do
14566: GO 14568
14568: DISABLE
// begin PrepareScholtze ;
14569: CALL 5166 0 0
// DialogueOn ;
14573: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
14577: LD_EXP 50
14581: PPUSH
14582: LD_STRING D4-Sch-1
14584: PPUSH
14585: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
14589: LD_EXP 44
14593: PPUSH
14594: LD_STRING D4-Bur-1
14596: PPUSH
14597: CALL_OW 88
// DialogueOff ;
14601: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
14605: LD_STRING M4
14607: PPUSH
14608: CALL_OW 337
// ComHold ( Scholtze ) ;
14612: LD_EXP 50
14616: PPUSH
14617: CALL_OW 140
// end ;
14621: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and not scholtzeSaved do
14622: LD_INT 3
14624: PPUSH
14625: LD_EXP 50
14629: PPUSH
14630: CALL_OW 292
14634: PUSH
14635: LD_EXP 7
14639: NOT
14640: AND
14641: IFFALSE 14767
14643: GO 14645
14645: DISABLE
// begin scholtzeSaved = true ;
14646: LD_ADDR_EXP 7
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
14654: LD_EXP 50
14658: PPUSH
14659: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
14663: LD_EXP 50
14667: PPUSH
14668: LD_INT 3
14670: PPUSH
14671: CALL_OW 235
// DialogueOn ;
14675: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
14679: LD_EXP 50
14683: PPUSH
14684: LD_STRING D4a-Sch-1
14686: PPUSH
14687: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
14691: LD_EXP 44
14695: PPUSH
14696: LD_STRING D4a-Bur-1
14698: PPUSH
14699: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
14703: LD_EXP 50
14707: PPUSH
14708: LD_STRING D4a-Sch-2
14710: PPUSH
14711: CALL_OW 88
// DialogueOff ;
14715: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
14719: LD_EXP 79
14723: PPUSH
14724: LD_INT 28
14726: PPUSH
14727: LD_INT 36
14729: PPUSH
14730: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
14734: LD_STRING MScholtzeOut
14736: PPUSH
14737: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
14741: LD_INT 49
14743: PPUSH
14744: LD_INT 3
14746: PPUSH
14747: LD_INT 1
14749: PPUSH
14750: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
14754: LD_INT 51
14756: PPUSH
14757: LD_INT 3
14759: PPUSH
14760: LD_INT 1
14762: PPUSH
14763: CALL_OW 322
// end ;
14767: END
// every 8 8$30 trigger IsPlaced ( Scholtze ) and scholtzeSpawnNearAmericans and not scholtzeSaved do
14768: LD_EXP 50
14772: PPUSH
14773: CALL_OW 305
14777: PUSH
14778: LD_EXP 6
14782: AND
14783: PUSH
14784: LD_EXP 7
14788: NOT
14789: AND
14790: IFFALSE 14799
14792: GO 14794
14794: DISABLE
// PrepareAmericanPatrol ;
14795: CALL 6427 0 0
14799: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
14800: LD_INT 1
14802: PPUSH
14803: LD_EXP 50
14807: PPUSH
14808: CALL_OW 292
14812: PUSH
14813: LD_EXP 79
14817: AND
14818: PUSH
14819: LD_EXP 7
14823: NOT
14824: AND
14825: IFFALSE 14979
14827: GO 14829
14829: DISABLE
// begin enable ;
14830: ENABLE
// if not IsPlaced ( Scholtze ) then
14831: LD_EXP 50
14835: PPUSH
14836: CALL_OW 305
14840: NOT
14841: IFFALSE 14845
// exit ;
14843: GO 14979
// if Attack ( amPatrol [ 1 ] ) = Scholtze or Attack ( amPatrol [ 2 ] ) = Scholtze then
14845: LD_EXP 79
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PPUSH
14854: CALL 86278 0 1
14858: PUSH
14859: LD_EXP 50
14863: EQUAL
14864: PUSH
14865: LD_EXP 79
14869: PUSH
14870: LD_INT 2
14872: ARRAY
14873: PPUSH
14874: CALL 86278 0 1
14878: PUSH
14879: LD_EXP 50
14883: EQUAL
14884: OR
14885: IFFALSE 14979
// begin DialogueOn ;
14887: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
14891: LD_EXP 50
14895: PPUSH
14896: LD_STRING D4b-Sch-1
14898: PPUSH
14899: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
14903: LD_EXP 79
14907: PUSH
14908: LD_INT 2
14910: ARRAY
14911: PPUSH
14912: LD_STRING D4b-Sol1-1
14914: PPUSH
14915: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
14919: LD_EXP 79
14923: PUSH
14924: LD_INT 1
14926: ARRAY
14927: PPUSH
14928: LD_STRING D4b-Sol2-1
14930: PPUSH
14931: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
14935: LD_EXP 50
14939: PPUSH
14940: LD_STRING D4b-Sch-2
14942: PPUSH
14943: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
14947: LD_EXP 44
14951: PPUSH
14952: LD_STRING D4b-Bur-2
14954: PPUSH
14955: CALL_OW 88
// DialogueOff ;
14959: CALL_OW 7
// Killunit ( Scholtze ) ;
14963: LD_EXP 50
14967: PPUSH
14968: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
14972: LD_STRING MScholtzeDel
14974: PPUSH
14975: CALL_OW 337
// end ; end ;
14979: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
14980: LD_INT 0
14982: PPUSH
14983: PPUSH
14984: PPUSH
// dialog_workshop = true ;
14985: LD_ADDR_EXP 8
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
14993: LD_INT 22
14995: PUSH
14996: LD_INT 3
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 30
15005: PUSH
15006: LD_INT 26
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PPUSH
15017: CALL_OW 69
15021: NOT
15022: IFFALSE 15332
// begin CenterNowOnUnits ( building ) ;
15024: LD_VAR 0 1
15028: PPUSH
15029: CALL_OW 87
// DialogueOn ;
15033: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
15037: LD_EXP 44
15041: PPUSH
15042: LD_STRING D3aa-Bur-1
15044: PPUSH
15045: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
15049: LD_EXP 50
15053: PPUSH
15054: CALL_OW 302
15058: PUSH
15059: LD_EXP 50
15063: PPUSH
15064: CALL_OW 255
15068: PUSH
15069: LD_INT 3
15071: EQUAL
15072: AND
15073: IFFALSE 15089
// Say ( Scholtze , D3aa-Sch-1 ) else
15075: LD_EXP 50
15079: PPUSH
15080: LD_STRING D3aa-Sch-1
15082: PPUSH
15083: CALL_OW 88
15087: GO 15316
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
15089: LD_ADDR_VAR 0 3
15093: PUSH
15094: LD_INT 22
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 21
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 4
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 26
15126: PUSH
15127: LD_INT 1
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 50
15136: PUSH
15137: EMPTY
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: PPUSH
15147: CALL_OW 69
15151: PUSH
15152: LD_EXP 44
15156: PUSH
15157: LD_EXP 45
15161: PUSH
15162: LD_EXP 47
15166: PUSH
15167: LD_EXP 48
15171: PUSH
15172: LD_EXP 49
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: DIFF
15184: ST_TO_ADDR
// if maleSci then
15185: LD_VAR 0 3
15189: IFFALSE 15209
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
15191: LD_VAR 0 3
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PPUSH
15200: LD_STRING D3aa-Sci1-1
15202: PPUSH
15203: CALL_OW 88
15207: GO 15316
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
15209: LD_ADDR_VAR 0 4
15213: PUSH
15214: LD_INT 22
15216: PUSH
15217: LD_INT 3
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 21
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 26
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 50
15246: PUSH
15247: EMPTY
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: PPUSH
15256: CALL_OW 69
15260: PUSH
15261: LD_EXP 44
15265: PUSH
15266: LD_EXP 45
15270: PUSH
15271: LD_EXP 47
15275: PUSH
15276: LD_EXP 48
15280: PUSH
15281: LD_EXP 49
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: DIFF
15293: ST_TO_ADDR
// if maleOthers then
15294: LD_VAR 0 4
15298: IFFALSE 15316
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) end ;
15300: LD_VAR 0 4
15304: PUSH
15305: LD_INT 1
15307: ARRAY
15308: PPUSH
15309: LD_STRING D3aa-Sci1-1
15311: PPUSH
15312: CALL_OW 88
// end ; Say ( Burlak , D3aa-Bur-2 ) ;
15316: LD_EXP 44
15320: PPUSH
15321: LD_STRING D3aa-Bur-2
15323: PPUSH
15324: CALL_OW 88
// DialogueOff ;
15328: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
15332: LD_STRING M3
15334: PPUSH
15335: CALL_OW 337
// end ;
15339: LD_VAR 0 2
15343: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit ;
15344: LD_EXP 9
15348: NOT
15349: IFFALSE 15506
15351: GO 15353
15353: DISABLE
15354: LD_INT 0
15356: PPUSH
// begin enable ;
15357: ENABLE
// for amUnit in amSupportTroops do
15358: LD_ADDR_VAR 0 1
15362: PUSH
15363: LD_EXP 78
15367: PUSH
15368: FOR_IN
15369: IFFALSE 15504
// begin if See ( 3 , amUnit ) then
15371: LD_INT 3
15373: PPUSH
15374: LD_VAR 0 1
15378: PPUSH
15379: CALL_OW 292
15383: IFFALSE 15502
// begin dialog_amSupportTroops = true ;
15385: LD_ADDR_EXP 9
15389: PUSH
15390: LD_INT 1
15392: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 87
// DialogueOn ;
15402: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-1 ,  , false ) ;
15406: LD_INT 22
15408: PUSH
15409: LD_INT 3
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 21
15418: PUSH
15419: LD_INT 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 26
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: LIST
15440: PPUSH
15441: CALL_OW 69
15445: PPUSH
15446: LD_STRING D3b-RSol1-1
15448: PPUSH
15449: LD_STRING 
15451: PPUSH
15452: LD_INT 0
15454: PPUSH
15455: CALL 7110 0 4
// if IsOK ( Gnyevko ) then
15459: LD_EXP 45
15463: PPUSH
15464: CALL_OW 302
15468: IFFALSE 15482
// Say ( Gnyevko , D3b-Gny-1 ) ;
15470: LD_EXP 45
15474: PPUSH
15475: LD_STRING D3b-Gny-1
15477: PPUSH
15478: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
15482: LD_EXP 44
15486: PPUSH
15487: LD_STRING D3b-Bur-1
15489: PPUSH
15490: CALL_OW 88
// DialogueOff ;
15494: CALL_OW 7
// exit ;
15498: POP
15499: POP
15500: GO 15506
// end ; end ;
15502: GO 15368
15504: POP
15505: POP
// end ;
15506: PPOPN 1
15508: END
// every 2 2$0 trigger dialog_amSupportTroops do
15509: LD_EXP 9
15513: IFFALSE 15594
15515: GO 15517
15517: DISABLE
// begin if IsOK ( Kovalyuk ) then
15518: LD_EXP 47
15522: PPUSH
15523: CALL_OW 302
15527: IFFALSE 15541
// Say ( Kovalyuk , D3b-Kov-1 ) ;
15529: LD_EXP 47
15533: PPUSH
15534: LD_STRING D3b-Kov-1
15536: PPUSH
15537: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false ) ;
15541: LD_INT 22
15543: PUSH
15544: LD_INT 3
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 21
15553: PUSH
15554: LD_INT 1
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 26
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: PPUSH
15576: CALL_OW 69
15580: PPUSH
15581: LD_STRING D3b-RSol1-2
15583: PPUSH
15584: LD_STRING 
15586: PPUSH
15587: LD_INT 0
15589: PPUSH
15590: CALL 7110 0 4
// end ;
15594: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
15595: LD_EXP 37
15599: PUSH
15600: LD_INT 35
15602: LESS
15603: IFFALSE 15831
15605: GO 15607
15607: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
15608: LD_EXP 56
15612: PPUSH
15613: CALL_OW 87
// InGameOn ;
15617: CALL_OW 8
// DialogueOn ;
15621: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
15625: LD_EXP 56
15629: PPUSH
15630: LD_STRING D5-Kur-1
15632: PPUSH
15633: CALL_OW 94
// case Query ( QVehicles ) of 1 :
15637: LD_STRING QVehicles
15639: PPUSH
15640: CALL_OW 97
15644: PUSH
15645: LD_INT 1
15647: DOUBLE
15648: EQUAL
15649: IFTRUE 15653
15651: GO 15696
15653: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
15654: LD_EXP 44
15658: PPUSH
15659: LD_STRING D6a-Bur-1
15661: PPUSH
15662: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
15666: LD_EXP 56
15670: PPUSH
15671: LD_STRING D6a-Kur-1
15673: PPUSH
15674: CALL_OW 94
// meetNearOmicronBase = true ;
15678: LD_ADDR_EXP 19
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// kurinCheckVehicles = true ;
15686: LD_ADDR_EXP 18
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// end ; 2 :
15694: GO 15823
15696: LD_INT 2
15698: DOUBLE
15699: EQUAL
15700: IFTRUE 15704
15702: GO 15751
15704: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
15705: LD_EXP 44
15709: PPUSH
15710: LD_STRING D6b-Bur-1
15712: PPUSH
15713: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
15717: LD_EXP 56
15721: PPUSH
15722: LD_STRING D6b-Kur-1
15724: PPUSH
15725: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
15729: LD_EXP 44
15733: PPUSH
15734: LD_STRING D6b-Bur-2
15736: PPUSH
15737: CALL_OW 88
// meetNearOmicronBase = true ;
15741: LD_ADDR_EXP 19
15745: PUSH
15746: LD_INT 1
15748: ST_TO_ADDR
// end ; 3 :
15749: GO 15823
15751: LD_INT 3
15753: DOUBLE
15754: EQUAL
15755: IFTRUE 15759
15757: GO 15822
15759: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
15760: LD_EXP 44
15764: PPUSH
15765: LD_STRING D6c-Bur-1
15767: PPUSH
15768: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
15772: LD_EXP 56
15776: PPUSH
15777: LD_STRING D6c-Kur-1
15779: PPUSH
15780: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
15784: LD_EXP 44
15788: PPUSH
15789: LD_STRING D6c-Bur-2
15791: PPUSH
15792: CALL_OW 88
// kurinGiveMoreTime = true ;
15796: LD_ADDR_EXP 13
15800: PUSH
15801: LD_INT 1
15803: ST_TO_ADDR
// kurinOpinion = 0 ;
15804: LD_ADDR_EXP 26
15808: PUSH
15809: LD_INT 0
15811: ST_TO_ADDR
// counterIndex = 4 ;
15812: LD_ADDR_EXP 84
15816: PUSH
15817: LD_INT 4
15819: ST_TO_ADDR
// end ; end ;
15820: GO 15823
15822: POP
// InGameOff ;
15823: CALL_OW 9
// DialogueOff ;
15827: CALL_OW 7
// end ;
15831: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
15832: LD_EXP 14
15836: PUSH
15837: LD_INT 35
15839: LESS
15840: PUSH
15841: LD_EXP 13
15845: AND
15846: IFFALSE 15879
15848: GO 15850
15850: DISABLE
// begin DialogueOn ;
15851: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
15855: LD_EXP 56
15859: PPUSH
15860: LD_STRING D6c-Kur-2
15862: PPUSH
15863: CALL_OW 94
// DialogueOff ;
15867: CALL_OW 7
// meetNearOmicronBase = true ;
15871: LD_ADDR_EXP 19
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// end ;
15879: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
15880: LD_EXP 19
15884: IFFALSE 16469
15886: GO 15888
15888: DISABLE
15889: LD_INT 0
15891: PPUSH
15892: PPUSH
15893: PPUSH
15894: PPUSH
15895: PPUSH
// begin mechs = [ ] ;
15896: LD_ADDR_VAR 0 3
15900: PUSH
15901: EMPTY
15902: ST_TO_ADDR
// vehs = [ ] ;
15903: LD_ADDR_VAR 0 4
15907: PUSH
15908: EMPTY
15909: ST_TO_ADDR
// haveVehs = 0 ;
15910: LD_ADDR_VAR 0 5
15914: PUSH
15915: LD_INT 0
15917: ST_TO_ADDR
// uc_side = 6 ;
15918: LD_ADDR_OWVAR 20
15922: PUSH
15923: LD_INT 6
15925: ST_TO_ADDR
// uc_nation = 3 ;
15926: LD_ADDR_OWVAR 21
15930: PUSH
15931: LD_INT 3
15933: ST_TO_ADDR
// for i := 1 to 2 do
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: DOUBLE
15940: LD_INT 1
15942: DEC
15943: ST_TO_ADDR
15944: LD_INT 2
15946: PUSH
15947: FOR_TO
15948: IFFALSE 16047
// begin PrepareMechanic ( false , 2 ) ;
15950: LD_INT 0
15952: PPUSH
15953: LD_INT 2
15955: PPUSH
15956: CALL_OW 383
// mech = CreateHuman ;
15960: LD_ADDR_VAR 0 2
15964: PUSH
15965: CALL_OW 44
15969: ST_TO_ADDR
// mechs = mechs ^ mech ;
15970: LD_ADDR_VAR 0 3
15974: PUSH
15975: LD_VAR 0 3
15979: PUSH
15980: LD_VAR 0 2
15984: ADD
15985: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
15986: LD_VAR 0 2
15990: PPUSH
15991: LD_EXP 62
15995: PPUSH
15996: CALL_OW 52
// ComExitBuilding ( mech ) ;
16000: LD_VAR 0 2
16004: PPUSH
16005: CALL_OW 122
// wait ( 0 0$1 ) ;
16009: LD_INT 35
16011: PPUSH
16012: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
16016: LD_VAR 0 2
16020: PPUSH
16021: LD_EXP 55
16025: PPUSH
16026: CALL_OW 250
16030: PPUSH
16031: LD_EXP 55
16035: PPUSH
16036: CALL_OW 251
16040: PPUSH
16041: CALL_OW 171
// end ;
16045: GO 15947
16047: POP
16048: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
16049: LD_INT 22
16051: PUSH
16052: LD_INT 3
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 21
16061: PUSH
16062: LD_INT 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 23
16071: PUSH
16072: LD_INT 3
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: PPUSH
16084: CALL_OW 69
16088: PUSH
16089: LD_INT 22
16091: PUSH
16092: LD_INT 3
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 21
16101: PUSH
16102: LD_INT 1
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PPUSH
16113: CALL_OW 69
16117: EQUAL
16118: IFFALSE 16128
// produceOnlyForYou = true ;
16120: LD_ADDR_EXP 17
16124: PUSH
16125: LD_INT 1
16127: ST_TO_ADDR
// wait ( 0 0$20 ) ;
16128: LD_INT 700
16130: PPUSH
16131: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
16135: LD_INT 22
16137: PUSH
16138: LD_INT 3
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PUSH
16145: LD_INT 21
16147: PUSH
16148: LD_INT 2
16150: PUSH
16151: EMPTY
16152: LIST
16153: LIST
16154: PUSH
16155: LD_INT 23
16157: PUSH
16158: LD_INT 3
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: PUSH
16175: LD_INT 22
16177: PUSH
16178: LD_INT 3
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 21
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: PUSH
16204: LD_INT 2
16206: PLUS
16207: GREATEREQUAL
16208: IFFALSE 16439
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
16210: LD_ADDR_VAR 0 4
16214: PUSH
16215: LD_VAR 0 4
16219: PUSH
16220: LD_INT 22
16222: PUSH
16223: LD_INT 3
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 23
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: LD_INT 59
16255: PUSH
16256: EMPTY
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: PUSH
16274: LD_INT 1
16276: ARRAY
16277: ADD
16278: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
16279: LD_ADDR_VAR 0 4
16283: PUSH
16284: LD_VAR 0 4
16288: PUSH
16289: LD_INT 22
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 21
16301: PUSH
16302: LD_INT 2
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 23
16311: PUSH
16312: LD_INT 3
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: LD_INT 3
16321: PUSH
16322: LD_INT 59
16324: PUSH
16325: EMPTY
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: PPUSH
16338: CALL_OW 69
16342: PUSH
16343: LD_INT 2
16345: ARRAY
16346: ADD
16347: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
16348: LD_VAR 0 4
16352: PPUSH
16353: LD_INT 6
16355: PPUSH
16356: CALL_OW 235
// produceMoreVehicles = true ;
16360: LD_ADDR_EXP 16
16364: PUSH
16365: LD_INT 1
16367: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
16368: LD_VAR 0 3
16372: PUSH
16373: LD_INT 1
16375: ARRAY
16376: PPUSH
16377: LD_VAR 0 4
16381: PUSH
16382: LD_INT 1
16384: ARRAY
16385: PPUSH
16386: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
16390: LD_VAR 0 3
16394: PUSH
16395: LD_INT 2
16397: ARRAY
16398: PPUSH
16399: LD_VAR 0 4
16403: PUSH
16404: LD_INT 2
16406: ARRAY
16407: PPUSH
16408: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
16412: LD_EXP 18
16416: PUSH
16417: LD_EXP 26
16421: PUSH
16422: LD_INT 0
16424: EQUAL
16425: NOT
16426: AND
16427: IFFALSE 16437
// kurinOpinion = 1 ;
16429: LD_ADDR_EXP 26
16433: PUSH
16434: LD_INT 1
16436: ST_TO_ADDR
// end else
16437: GO 16469
// begin if kurinCheckVehicles then
16439: LD_EXP 18
16443: IFFALSE 16469
// begin DialogueOn ;
16445: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
16449: LD_EXP 56
16453: PPUSH
16454: LD_STRING D6d-Kur-1
16456: PPUSH
16457: CALL_OW 94
// DialogueOff ;
16461: CALL_OW 7
// Lose_Vehicles ;
16465: CALL 10446 0 0
// end ; end ; end ;
16469: PPOPN 5
16471: END
// every 0 0$1 trigger meetNearOmicronBase do
16472: LD_EXP 19
16476: IFFALSE 16599
16478: GO 16480
16480: DISABLE
// begin spawnCrates = false ;
16481: LD_ADDR_EXP 5
16485: PUSH
16486: LD_INT 0
16488: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
16489: LD_INT 6
16491: PPUSH
16492: LD_INT 1
16494: PPUSH
16495: LD_INT 2
16497: PPUSH
16498: LD_INT 1
16500: PPUSH
16501: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
16505: LD_INT 0
16507: PPUSH
16508: LD_INT 3
16510: PPUSH
16511: LD_INT 0
16513: PPUSH
16514: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
16518: LD_STRING M3a
16520: PPUSH
16521: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
16525: LD_STRING M5
16527: PPUSH
16528: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
16532: LD_INT 15
16534: PPUSH
16535: LD_INT 1
16537: PPUSH
16538: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
16542: LD_EXP 71
16546: PPUSH
16547: LD_INT 75
16549: PPUSH
16550: LD_INT 38
16552: PPUSH
16553: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
16557: LD_EXP 70
16561: PPUSH
16562: LD_INT 75
16564: PPUSH
16565: LD_INT 38
16567: PPUSH
16568: CALL_OW 111
// counterIndex = 2 ;
16572: LD_ADDR_EXP 84
16576: PUSH
16577: LD_INT 2
16579: ST_TO_ADDR
// if not kurinOpinion = 0 then
16580: LD_EXP 26
16584: PUSH
16585: LD_INT 0
16587: EQUAL
16588: NOT
16589: IFFALSE 16599
// kurinOpinion = 1 ;
16591: LD_ADDR_EXP 26
16595: PUSH
16596: LD_INT 1
16598: ST_TO_ADDR
// end ;
16599: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
16600: LD_EXP 15
16604: PUSH
16605: LD_INT 35
16607: LESS
16608: PUSH
16609: LD_EXP 84
16613: PUSH
16614: LD_INT 2
16616: EQUAL
16617: AND
16618: IFFALSE 16667
16620: GO 16622
16622: DISABLE
// begin DialogueOn ;
16623: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
16627: LD_EXP 56
16631: PPUSH
16632: LD_STRING D7a-Kur-1
16634: PPUSH
16635: CALL_OW 94
// DialogueOff ;
16639: CALL_OW 7
// counterIndex = 3 ;
16643: LD_ADDR_EXP 84
16647: PUSH
16648: LD_INT 3
16650: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
16651: LD_ADDR_EXP 15
16655: PUSH
16656: LD_INT 4200
16658: ST_TO_ADDR
// kurinOpinion = 0 ;
16659: LD_ADDR_EXP 26
16663: PUSH
16664: LD_INT 0
16666: ST_TO_ADDR
// end ;
16667: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
16668: LD_EXP 15
16672: PUSH
16673: LD_INT 35
16675: LESS
16676: PUSH
16677: LD_EXP 84
16681: PUSH
16682: LD_INT 3
16684: EQUAL
16685: AND
16686: IFFALSE 16695
16688: GO 16690
16690: DISABLE
// Lose_Delay ;
16691: CALL 10476 0 0
16695: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
16696: LD_EXP 19
16700: PUSH
16701: LD_INT 15
16703: PPUSH
16704: LD_INT 22
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 21
16716: PUSH
16717: LD_INT 1
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 71
16732: PUSH
16733: LD_INT 0
16735: EQUAL
16736: AND
16737: IFFALSE 16845
16739: GO 16741
16741: DISABLE
// begin counterEnable = false ;
16742: LD_ADDR_EXP 83
16746: PUSH
16747: LD_INT 0
16749: ST_TO_ADDR
// Display_Strings := [ ] ;
16750: LD_ADDR_OWVAR 47
16754: PUSH
16755: EMPTY
16756: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
16757: LD_INT 15
16759: PPUSH
16760: LD_INT 0
16762: PPUSH
16763: CALL_OW 424
// canExitBattlefield = false ;
16767: LD_ADDR_EXP 24
16771: PUSH
16772: LD_INT 0
16774: ST_TO_ADDR
// DialogueOn ;
16775: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
16779: LD_EXP 44
16783: PPUSH
16784: LD_STRING D7-Bur-1
16786: PPUSH
16787: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
16791: LD_EXP 56
16795: PPUSH
16796: LD_STRING D7-Kur-1
16798: PPUSH
16799: CALL_OW 94
// DialogueOff ;
16803: CALL_OW 7
// MC_SetScanArea ( 1 , OmicronScanArea ) ;
16807: LD_INT 1
16809: PPUSH
16810: LD_INT 18
16812: PPUSH
16813: CALL 44859 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
16817: LD_INT 1
16819: PPUSH
16820: LD_INT 8
16822: PPUSH
16823: CALL 43723 0 2
// ChangeMissionObjectives ( M5a ) ;
16827: LD_STRING M5a
16829: PPUSH
16830: CALL_OW 337
// Query ( QRefuel ) ;
16834: LD_STRING QRefuel
16836: PPUSH
16837: CALL_OW 97
// KirovAttackOmicron ;
16841: CALL 9869 0 0
// end ;
16845: END
// every 0 0$1 trigger not canExitBattlefield do var unit ;
16846: LD_EXP 24
16850: NOT
16851: IFFALSE 17019
16853: GO 16855
16855: DISABLE
16856: LD_INT 0
16858: PPUSH
// begin enable ;
16859: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
16860: LD_ADDR_VAR 0 1
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_INT 3
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 2
16877: PUSH
16878: LD_INT 21
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 21
16890: PUSH
16891: LD_INT 2
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PPUSH
16907: CALL_OW 69
16911: PUSH
16912: FOR_IN
16913: IFFALSE 17017
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
16915: LD_VAR 0 1
16919: PPUSH
16920: LD_INT 28
16922: PPUSH
16923: CALL_OW 308
16927: NOT
16928: PUSH
16929: LD_VAR 0 1
16933: PPUSH
16934: LD_INT 59
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: LD_INT 21
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 72
16958: AND
16959: IFFALSE 17015
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_INT 28
16968: PPUSH
16969: CALL_OW 113
// if not dialog_stop then
16973: LD_EXP 11
16977: NOT
16978: IFFALSE 17015
// begin dialog_stop = true ;
16980: LD_ADDR_EXP 11
16984: PUSH
16985: LD_INT 1
16987: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
16988: LD_EXP 56
16992: PPUSH
16993: LD_STRING D12-Kur-1
16995: PPUSH
16996: CALL_OW 88
// wait ( 0 0$5 ) ;
17000: LD_INT 175
17002: PPUSH
17003: CALL_OW 67
// dialog_stop = false ;
17007: LD_ADDR_EXP 11
17011: PUSH
17012: LD_INT 0
17014: ST_TO_ADDR
// end ; end ;
17015: GO 16912
17017: POP
17018: POP
// end ;
17019: PPOPN 1
17021: END
// every 0 0$1 do var unit ;
17022: GO 17024
17024: DISABLE
17025: LD_INT 0
17027: PPUSH
// begin enable ;
17028: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_INT 22
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: LD_INT 21
17049: PUSH
17050: LD_INT 1
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 21
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: PUSH
17081: FOR_IN
17082: IFFALSE 17157
// if IsInArea ( unit , SecondKurinBase ) then
17084: LD_VAR 0 1
17088: PPUSH
17089: LD_INT 21
17091: PPUSH
17092: CALL_OW 308
17096: IFFALSE 17155
// begin ComMoveXY ( unit , 200 , 114 ) ;
17098: LD_VAR 0 1
17102: PPUSH
17103: LD_INT 200
17105: PPUSH
17106: LD_INT 114
17108: PPUSH
17109: CALL_OW 111
// if not dialog_stop then
17113: LD_EXP 11
17117: NOT
17118: IFFALSE 17155
// begin dialog_stop = true ;
17120: LD_ADDR_EXP 11
17124: PUSH
17125: LD_INT 1
17127: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
17128: LD_EXP 56
17132: PPUSH
17133: LD_STRING D12-Kur-1
17135: PPUSH
17136: CALL_OW 88
// wait ( 0 0$5 ) ;
17140: LD_INT 175
17142: PPUSH
17143: CALL_OW 67
// dialog_stop = false ;
17147: LD_ADDR_EXP 11
17151: PUSH
17152: LD_INT 0
17154: ST_TO_ADDR
// end ; end ;
17155: GO 17081
17157: POP
17158: POP
// end ;
17159: PPOPN 1
17161: END
// every 0 0$1 trigger canExitBattlefield and IsOK ( Sikorski ) do var unit , randDialog ;
17162: LD_EXP 24
17166: PUSH
17167: LD_INT 290
17169: PPUSH
17170: CALL_OW 302
17174: AND
17175: IFFALSE 17491
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin enable ;
17184: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
17185: LD_ADDR_VAR 0 1
17189: PUSH
17190: LD_INT 13
17192: PPUSH
17193: LD_INT 22
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 21
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PPUSH
17246: CALL_OW 70
17250: PUSH
17251: FOR_IN
17252: IFFALSE 17489
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
17254: LD_VAR 0 1
17258: PPUSH
17259: LD_INT 22
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 2
17271: PUSH
17272: LD_INT 21
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 21
17284: PUSH
17285: LD_INT 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: PPUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: CALL_OW 74
17315: PPUSH
17316: CALL_OW 296
17320: PUSH
17321: LD_INT 17
17323: LESS
17324: IFFALSE 17487
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
17326: LD_INT 22
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 2
17338: PUSH
17339: LD_INT 21
17341: PUSH
17342: LD_INT 1
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 21
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: LIST
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PPUSH
17368: CALL_OW 69
17372: PPUSH
17373: LD_VAR 0 1
17377: PPUSH
17378: CALL_OW 74
17382: PPUSH
17383: LD_INT 69
17385: PPUSH
17386: LD_INT 85
17388: PPUSH
17389: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
17393: LD_ADDR_VAR 0 2
17397: PUSH
17398: LD_INT 1
17400: PPUSH
17401: LD_INT 2
17403: PPUSH
17404: CALL_OW 12
17408: ST_TO_ADDR
// if not dialog_stop then
17409: LD_EXP 11
17413: NOT
17414: IFFALSE 17487
// begin dialog_stop = true ;
17416: LD_ADDR_EXP 11
17420: PUSH
17421: LD_INT 1
17423: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
17424: LD_VAR 0 2
17428: PUSH
17429: LD_INT 1
17431: EQUAL
17432: PUSH
17433: LD_EXP 45
17437: PPUSH
17438: CALL_OW 302
17442: NOT
17443: OR
17444: IFFALSE 17460
// SayRadio ( Kurin , D11-Kur-1 ) else
17446: LD_EXP 56
17450: PPUSH
17451: LD_STRING D11-Kur-1
17453: PPUSH
17454: CALL_OW 94
17458: GO 17472
// Say ( Gnyevko , D11-Gny-1 ) ;
17460: LD_EXP 45
17464: PPUSH
17465: LD_STRING D11-Gny-1
17467: PPUSH
17468: CALL_OW 88
// wait ( 0 0$5 ) ;
17472: LD_INT 175
17474: PPUSH
17475: CALL_OW 67
// dialog_stop = false ;
17479: LD_ADDR_EXP 11
17483: PUSH
17484: LD_INT 0
17486: ST_TO_ADDR
// end ; end ;
17487: GO 17251
17489: POP
17490: POP
// end ;
17491: PPOPN 2
17493: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 3 do var tmpUs , tmpRu , building ;
17494: LD_INT 290
17496: PPUSH
17497: CALL_OW 301
17501: PUSH
17502: LD_INT 13
17504: PPUSH
17505: LD_INT 22
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 21
17517: PUSH
17518: LD_INT 1
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 70
17533: PUSH
17534: LD_INT 3
17536: LESS
17537: AND
17538: IFFALSE 18871
17540: GO 17542
17542: DISABLE
17543: LD_INT 0
17545: PPUSH
17546: PPUSH
17547: PPUSH
// begin omicronSurrender = true ;
17548: LD_ADDR_EXP 23
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// canExitBattlefield = true ;
17556: LD_ADDR_EXP 24
17560: PUSH
17561: LD_INT 1
17563: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
17564: LD_INT 1
17566: PPUSH
17567: LD_INT 3
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 0
17575: PPUSH
17576: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
17580: LD_EXP 44
17584: PPUSH
17585: CALL_OW 87
// uc_side = 1 ;
17589: LD_ADDR_OWVAR 20
17593: PUSH
17594: LD_INT 1
17596: ST_TO_ADDR
// uc_nation = 1 ;
17597: LD_ADDR_OWVAR 21
17601: PUSH
17602: LD_INT 1
17604: ST_TO_ADDR
// hc_name :=  ;
17605: LD_ADDR_OWVAR 26
17609: PUSH
17610: LD_STRING 
17612: ST_TO_ADDR
// hc_gallery =  ;
17613: LD_ADDR_OWVAR 33
17617: PUSH
17618: LD_STRING 
17620: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
17621: LD_INT 1
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 381
// tmpUs = CreateHuman ;
17631: LD_ADDR_VAR 0 1
17635: PUSH
17636: CALL_OW 44
17640: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
17641: LD_INT 22
17643: PUSH
17644: LD_INT 3
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PPUSH
17651: CALL_OW 69
17655: PPUSH
17656: CALL_OW 141
// InGameOn ;
17660: CALL_OW 8
// DialogueOn ;
17664: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
17668: LD_INT 26
17670: PPUSH
17671: LD_INT 33
17673: PPUSH
17674: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
17678: LD_VAR 0 1
17682: PPUSH
17683: LD_STRING D8-Sol1-1
17685: PPUSH
17686: CALL_OW 94
// if IsOk ( Kovalyuk ) then
17690: LD_EXP 47
17694: PPUSH
17695: CALL_OW 302
17699: IFFALSE 17713
// Say ( Kovalyuk , D8-Kov-1 ) ;
17701: LD_EXP 47
17705: PPUSH
17706: LD_STRING D8-Kov-1
17708: PPUSH
17709: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_INT 22
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 21
17730: PUSH
17731: LD_INT 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 26
17740: PUSH
17741: LD_INT 1
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: PPUSH
17758: LD_STRING D8-RSol1-1
17760: PPUSH
17761: LD_STRING 
17763: PPUSH
17764: LD_INT 0
17766: PPUSH
17767: CALL 7110 0 4
17771: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
17772: LD_EXP 45
17776: PPUSH
17777: CALL_OW 302
17781: IFFALSE 17795
// Say ( Gnyevko , D8-Gny-1 ) ;
17783: LD_EXP 45
17787: PPUSH
17788: LD_STRING D8-Gny-1
17790: PPUSH
17791: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 26
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 69
17834: PUSH
17835: LD_VAR 0 2
17839: DIFF
17840: PPUSH
17841: LD_STRING D8-RSol2-1
17843: PPUSH
17844: LD_STRING 
17846: PPUSH
17847: LD_INT 0
17849: PPUSH
17850: CALL 7110 0 4
// DialogueOff ;
17854: CALL_OW 7
// if IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 then
17858: LD_EXP 50
17862: PPUSH
17863: CALL_OW 305
17867: PUSH
17868: LD_EXP 50
17872: PPUSH
17873: CALL_OW 255
17877: PUSH
17878: LD_INT 8
17880: EQUAL
17881: AND
17882: IFFALSE 17896
// SetSide ( Scholtze , 0 ) ;
17884: LD_EXP 50
17888: PPUSH
17889: LD_INT 0
17891: PPUSH
17892: CALL_OW 235
// SetSide ( FilterAllUnits ( [ f_side , 8 ] ) , 6 ) ;
17896: LD_INT 22
17898: PUSH
17899: LD_INT 8
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PPUSH
17911: LD_INT 6
17913: PPUSH
17914: CALL_OW 235
// PrepareArabian ;
17918: CALL 6585 0 0
// CenterNowOnXY ( 200 , 32 ) ;
17922: LD_INT 200
17924: PPUSH
17925: LD_INT 32
17927: PPUSH
17928: CALL_OW 86
// ComAgressiveMove ( northGroup , 207 , 37 ) ;
17932: LD_EXP 81
17936: PPUSH
17937: LD_INT 207
17939: PPUSH
17940: LD_INT 37
17942: PPUSH
17943: CALL_OW 114
// AddComAgressiveMove ( northGroup , 216 , 62 ) ;
17947: LD_EXP 81
17951: PPUSH
17952: LD_INT 216
17954: PPUSH
17955: LD_INT 62
17957: PPUSH
17958: CALL_OW 174
// wait ( 0 0$7 ) ;
17962: LD_INT 245
17964: PPUSH
17965: CALL_OW 67
// music_nat = nation_arabian ;
17969: LD_ADDR_OWVAR 71
17973: PUSH
17974: LD_INT 2
17976: ST_TO_ADDR
// game_speed = 4 ;
17977: LD_ADDR_OWVAR 65
17981: PUSH
17982: LD_INT 4
17984: ST_TO_ADDR
// DialogueOn ;
17985: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
17989: LD_EXP 76
17993: PPUSH
17994: LD_STRING D9-Gri-1
17996: PPUSH
17997: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
18001: LD_EXP 56
18005: PPUSH
18006: LD_STRING D9-Kur-1
18008: PPUSH
18009: CALL_OW 94
// DialogueOff ;
18013: CALL_OW 7
// wait ( 0 0$3 ) ;
18017: LD_INT 105
18019: PPUSH
18020: CALL_OW 67
// DialogueOn ;
18024: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
18028: LD_EXP 76
18032: PPUSH
18033: LD_STRING D9-Gri-2
18035: PPUSH
18036: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
18040: LD_EXP 56
18044: PPUSH
18045: LD_STRING D9-Kur-2
18047: PPUSH
18048: CALL_OW 94
// DialogueOff ;
18052: CALL_OW 7
// repeat wait ( 1 ) ;
18056: LD_INT 1
18058: PPUSH
18059: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
18063: LD_EXP 76
18067: PPUSH
18068: CALL_OW 256
18072: PUSH
18073: LD_INT 1000
18075: LESS
18076: IFFALSE 18056
// DialogueOn ;
18078: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
18082: LD_EXP 76
18086: PPUSH
18087: LD_STRING D9-Gri-3
18089: PPUSH
18090: CALL_OW 94
// DialogueOff ;
18094: CALL_OW 7
// KillUnit ( Grishko ) ;
18098: LD_EXP 76
18102: PPUSH
18103: CALL_OW 66
// wait ( 0 0$12 ) ;
18107: LD_INT 420
18109: PPUSH
18110: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
18114: LD_EXP 56
18118: PPUSH
18119: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
18123: LD_EXP 56
18127: PPUSH
18128: LD_STRING D9-Kur-3
18130: PPUSH
18131: CALL_OW 94
// CenterNowOnXY ( 218 , 109 ) ;
18135: LD_INT 218
18137: PPUSH
18138: LD_INT 109
18140: PPUSH
18141: CALL_OW 86
// ComAgressiveMove ( southGroup , 218 , 109 ) ;
18145: LD_EXP 82
18149: PPUSH
18150: LD_INT 218
18152: PPUSH
18153: LD_INT 109
18155: PPUSH
18156: CALL_OW 114
// wait ( 0 0$25 ) ;
18160: LD_INT 875
18162: PPUSH
18163: CALL_OW 67
// CenterOnXY ( 169 , 109 ) ;
18167: LD_INT 169
18169: PPUSH
18170: LD_INT 109
18172: PPUSH
18173: CALL_OW 84
// AddComAgressiveMove ( northGroup , 161 , 109 ) ;
18177: LD_EXP 81
18181: PPUSH
18182: LD_INT 161
18184: PPUSH
18185: LD_INT 109
18187: PPUSH
18188: CALL_OW 174
// wait ( 0 0$25 ) ;
18192: LD_INT 875
18194: PPUSH
18195: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
18199: LD_EXP 82
18203: PPUSH
18204: LD_INT 161
18206: PPUSH
18207: LD_INT 109
18209: PPUSH
18210: CALL_OW 114
// ComEnterUnit ( Kurin , kirovDepot ) ;
18214: LD_EXP 56
18218: PPUSH
18219: LD_EXP 62
18223: PPUSH
18224: CALL_OW 120
// DialogueOn ;
18228: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
18232: LD_EXP 56
18236: PPUSH
18237: LD_STRING D9a-Kur-1
18239: PPUSH
18240: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
18244: LD_EXP 44
18248: PPUSH
18249: LD_STRING D9a-Bur-1
18251: PPUSH
18252: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
18256: LD_EXP 56
18260: PPUSH
18261: LD_STRING D9a-Kur-2
18263: PPUSH
18264: CALL_OW 94
// DialogueOff ;
18268: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
18272: LD_EXP 73
18276: PPUSH
18277: CALL_OW 122
// wait ( 0 0$1 ) ;
18281: LD_INT 35
18283: PPUSH
18284: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
18288: LD_EXP 73
18292: PPUSH
18293: LD_EXP 55
18297: PPUSH
18298: CALL_OW 250
18302: PPUSH
18303: LD_EXP 55
18307: PPUSH
18308: CALL_OW 251
18312: PPUSH
18313: CALL_OW 111
// immortalSurvivors = true ;
18317: LD_ADDR_EXP 25
18321: PUSH
18322: LD_INT 1
18324: ST_TO_ADDR
// wait ( 0 0$33 ) ;
18325: LD_INT 1155
18327: PPUSH
18328: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18332: LD_INT 22
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 21
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PPUSH
18356: CALL_OW 69
18360: PPUSH
18361: CALL_OW 121
// wait ( 0 0$1 ) ;
18365: LD_INT 35
18367: PPUSH
18368: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
18372: LD_INT 22
18374: PUSH
18375: LD_INT 3
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 21
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PPUSH
18396: CALL_OW 69
18400: PPUSH
18401: LD_EXP 57
18405: PPUSH
18406: CALL_OW 250
18410: PPUSH
18411: LD_EXP 57
18415: PPUSH
18416: CALL_OW 251
18420: PPUSH
18421: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
18425: LD_INT 22
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 21
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PPUSH
18449: CALL_OW 69
18453: PPUSH
18454: LD_EXP 57
18458: PPUSH
18459: CALL_OW 250
18463: PPUSH
18464: LD_EXP 57
18468: PPUSH
18469: CALL_OW 251
18473: PPUSH
18474: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
18478: LD_EXP 44
18482: PPUSH
18483: CALL_OW 87
// wait ( 0 0$1 ) ;
18487: LD_INT 35
18489: PPUSH
18490: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
18494: LD_EXP 44
18498: PPUSH
18499: LD_EXP 57
18503: PPUSH
18504: CALL_OW 296
18508: PUSH
18509: LD_INT 6
18511: LESS
18512: IFFALSE 18425
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
18514: LD_EXP 44
18518: PUSH
18519: LD_EXP 57
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
18532: LD_EXP 44
18536: PPUSH
18537: LD_EXP 57
18541: PPUSH
18542: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
18546: LD_EXP 57
18550: PPUSH
18551: LD_EXP 44
18555: PPUSH
18556: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
18560: LD_EXP 44
18564: PPUSH
18565: LD_STRING D10a-Bur-1
18567: PPUSH
18568: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
18572: LD_EXP 57
18576: PPUSH
18577: LD_STRING D10a-Pop-1
18579: PPUSH
18580: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
18584: LD_EXP 44
18588: PPUSH
18589: LD_STRING D10a-Bur-2
18591: PPUSH
18592: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
18596: LD_EXP 57
18600: PPUSH
18601: LD_STRING D10a-Pop-2
18603: PPUSH
18604: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
18608: LD_EXP 44
18612: PPUSH
18613: LD_STRING D10a-Bur-3
18615: PPUSH
18616: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
18620: LD_EXP 57
18624: PPUSH
18625: LD_STRING D10a-Pop-3
18627: PPUSH
18628: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
18632: LD_EXP 44
18636: PPUSH
18637: LD_STRING D10a-Bur-4
18639: PPUSH
18640: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
18644: LD_EXP 57
18648: PPUSH
18649: LD_STRING D10a-Pop-4
18651: PPUSH
18652: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
18656: LD_EXP 44
18660: PPUSH
18661: LD_STRING D10a-Bur-5
18663: PPUSH
18664: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
18668: LD_EXP 57
18672: PPUSH
18673: LD_STRING D10a-Pop-5
18675: PPUSH
18676: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
18680: LD_INT 22
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 69
18708: PPUSH
18709: LD_INT 83
18711: PPUSH
18712: LD_INT 157
18714: PPUSH
18715: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
18719: LD_EXP 73
18723: PPUSH
18724: LD_INT 83
18726: PPUSH
18727: LD_INT 157
18729: PPUSH
18730: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
18734: LD_EXP 44
18738: PPUSH
18739: CALL_OW 87
// wait ( 0 0$1 ) ;
18743: LD_INT 35
18745: PPUSH
18746: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
18750: LD_EXP 44
18754: PPUSH
18755: LD_EXP 55
18759: PPUSH
18760: CALL_OW 296
18764: PUSH
18765: LD_INT 19
18767: GREATER
18768: IFFALSE 18734
// CenterNowOnXY ( 113 , 96 ) ;
18770: LD_INT 113
18772: PPUSH
18773: LD_INT 96
18775: PPUSH
18776: CALL_OW 86
// canDestroyBeriaBase = true ;
18780: LD_ADDR_EXP 28
18784: PUSH
18785: LD_INT 1
18787: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: LD_INT 27
18795: PPUSH
18796: LD_INT 22
18798: PUSH
18799: LD_INT 3
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PPUSH
18820: CALL_OW 70
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18858
// begin AddComAttackUnit ( northGroup , building ) ;
18828: LD_EXP 81
18832: PPUSH
18833: LD_VAR 0 3
18837: PPUSH
18838: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
18842: LD_EXP 82
18846: PPUSH
18847: LD_VAR 0 3
18851: PPUSH
18852: CALL_OW 175
// end ;
18856: GO 18825
18858: POP
18859: POP
// wait ( 0 0$35 ) ;
18860: LD_INT 1225
18862: PPUSH
18863: CALL_OW 67
// FinishMission ;
18867: CALL 10491 0 0
// end ;
18871: PPOPN 3
18873: END
// every 1 trigger immortalSurvivors do var unit ;
18874: LD_EXP 25
18878: IFFALSE 18916
18880: GO 18882
18882: DISABLE
18883: LD_INT 0
18885: PPUSH
// begin enable ;
18886: ENABLE
// for unit in survivorsArabianAttack do
18887: LD_ADDR_VAR 0 1
18891: PUSH
18892: LD_EXP 73
18896: PUSH
18897: FOR_IN
18898: IFFALSE 18914
// SetLives ( unit , 1000 ) ;
18900: LD_VAR 0 1
18904: PPUSH
18905: LD_INT 1000
18907: PPUSH
18908: CALL_OW 234
18912: GO 18897
18914: POP
18915: POP
// end ; end_of_file
18916: PPOPN 1
18918: END
// every 0 0$30 do
18919: GO 18921
18921: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
18922: LD_INT 3
18924: PPUSH
18925: LD_INT 5
18927: PPUSH
18928: CALL_OW 12
18932: PPUSH
18933: LD_INT 76
18935: PPUSH
18936: LD_INT 111
18938: PPUSH
18939: LD_INT 5
18941: PPUSH
18942: LD_INT 1
18944: PPUSH
18945: CALL_OW 56
18949: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
18950: LD_EXP 5
18954: IFFALSE 19026
18956: GO 18958
18958: DISABLE
18959: LD_INT 0
18961: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
18962: LD_INT 50
18964: PPUSH
18965: LD_INT 4200
18967: PPUSH
18968: CALL_OW 12
18972: PPUSH
18973: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
18977: LD_VAR 0 1
18981: PUSH
18982: LD_INT 175
18984: MUL
18985: PPUSH
18986: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
18990: LD_ADDR_VAR 0 1
18994: PUSH
18995: LD_VAR 0 1
18999: PUSH
19000: LD_INT 1
19002: PLUS
19003: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
19004: LD_INT 3
19006: PPUSH
19007: LD_INT 5
19009: PPUSH
19010: CALL_OW 12
19014: PPUSH
19015: LD_INT 6
19017: PPUSH
19018: LD_INT 1
19020: PPUSH
19021: CALL_OW 55
// enable ;
19025: ENABLE
// end ; end_of_file
19026: PPOPN 1
19028: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
19029: LD_EXP 83
19033: IFFALSE 19196
19035: GO 19037
19037: DISABLE
// begin enable ;
19038: ENABLE
// case counterIndex of 1 :
19039: LD_EXP 84
19043: PUSH
19044: LD_INT 1
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19069
19052: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
19053: LD_ADDR_EXP 37
19057: PUSH
19058: LD_EXP 37
19062: PUSH
19063: LD_INT 35
19065: MINUS
19066: ST_TO_ADDR
19067: GO 19196
19069: LD_INT 2
19071: DOUBLE
19072: EQUAL
19073: IFTRUE 19077
19075: GO 19111
19077: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
19078: LD_ADDR_OWVAR 47
19082: PUSH
19083: LD_STRING #Ru03-1
19085: PUSH
19086: LD_EXP 15
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
19095: LD_ADDR_EXP 15
19099: PUSH
19100: LD_EXP 15
19104: PUSH
19105: LD_INT 35
19107: MINUS
19108: ST_TO_ADDR
// end ; 3 :
19109: GO 19196
19111: LD_INT 3
19113: DOUBLE
19114: EQUAL
19115: IFTRUE 19119
19117: GO 19153
19119: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
19120: LD_ADDR_OWVAR 47
19124: PUSH
19125: LD_STRING #Ru03-2
19127: PUSH
19128: LD_EXP 15
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
19137: LD_ADDR_EXP 15
19141: PUSH
19142: LD_EXP 15
19146: PUSH
19147: LD_INT 35
19149: MINUS
19150: ST_TO_ADDR
// end ; 4 :
19151: GO 19196
19153: LD_INT 4
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19195
19161: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
19162: LD_ADDR_OWVAR 47
19166: PUSH
19167: LD_STRING #Ru03-3
19169: PUSH
19170: LD_EXP 14
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
19179: LD_ADDR_EXP 14
19183: PUSH
19184: LD_EXP 14
19188: PUSH
19189: LD_INT 35
19191: MINUS
19192: ST_TO_ADDR
// end ; end ;
19193: GO 19196
19195: POP
// end ; end_of_file
19196: END
// every 7 7$0 do
19197: GO 19199
19199: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
19200: LD_INT 3
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 0
19208: PPUSH
19209: LD_INT 7
19211: PUSH
19212: LD_INT 9
19214: PUSH
19215: LD_INT 8
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 1
19225: PPUSH
19226: LD_INT 3
19228: PPUSH
19229: CALL_OW 12
19233: ARRAY
19234: PPUSH
19235: CALL 5980 0 4
19239: END
// every 12 12$0 do
19240: GO 19242
19242: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
19243: LD_INT 4
19245: PPUSH
19246: LD_INT 2
19248: PPUSH
19249: LD_INT 1
19251: PPUSH
19252: LD_INT 7
19254: PUSH
19255: LD_INT 9
19257: PUSH
19258: LD_INT 8
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 1
19268: PPUSH
19269: LD_INT 3
19271: PPUSH
19272: CALL_OW 12
19276: ARRAY
19277: PPUSH
19278: CALL 5980 0 4
19282: END
// every 20 20$0 do
19283: GO 19285
19285: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
19286: LD_INT 6
19288: PPUSH
19289: LD_INT 2
19291: PPUSH
19292: LD_INT 0
19294: PPUSH
19295: LD_INT 7
19297: PUSH
19298: LD_INT 9
19300: PUSH
19301: LD_INT 8
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: PUSH
19309: LD_INT 1
19311: PPUSH
19312: LD_INT 3
19314: PPUSH
19315: CALL_OW 12
19319: ARRAY
19320: PPUSH
19321: CALL 5980 0 4
19325: END
// every 23 23$0 do
19326: GO 19328
19328: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
19329: LD_INT 5
19331: PPUSH
19332: LD_INT 1
19334: PPUSH
19335: LD_INT 3
19337: PPUSH
19338: LD_INT 7
19340: PUSH
19341: LD_INT 9
19343: PUSH
19344: LD_INT 8
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: CALL_OW 12
19362: ARRAY
19363: PPUSH
19364: CALL 5980 0 4
19368: END
// export function Nef_PrepareNature ; var i , un ; begin
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
19373: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
19374: LD_ADDR_VAR 0 2
19378: PUSH
19379: DOUBLE
19380: LD_INT 1
19382: DEC
19383: ST_TO_ADDR
19384: LD_EXP 29
19388: PUSH
19389: LD_INT 1
19391: ARRAY
19392: PUSH
19393: FOR_TO
19394: IFFALSE 19504
// begin uc_side = 0 ;
19396: LD_ADDR_OWVAR 20
19400: PUSH
19401: LD_INT 0
19403: ST_TO_ADDR
// uc_nation = nation_nature ;
19404: LD_ADDR_OWVAR 21
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
// hc_class = class_apeman ;
19412: LD_ADDR_OWVAR 28
19416: PUSH
19417: LD_INT 12
19419: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19420: LD_ADDR_OWVAR 31
19424: PUSH
19425: LD_EXP 30
19429: PUSH
19430: LD_INT 1
19432: ARRAY
19433: PUSH
19434: LD_EXP 30
19438: PUSH
19439: LD_INT 2
19441: ARRAY
19442: PUSH
19443: LD_EXP 30
19447: PUSH
19448: LD_INT 3
19450: ARRAY
19451: PUSH
19452: LD_EXP 30
19456: PUSH
19457: LD_INT 4
19459: ARRAY
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19467: LD_ADDR_OWVAR 35
19471: PUSH
19472: LD_EXP 31
19476: ST_TO_ADDR
// un = CreateHuman ;
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: CALL_OW 44
19486: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19487: LD_VAR 0 3
19491: PPUSH
19492: LD_INT 29
19494: PPUSH
19495: LD_INT 0
19497: PPUSH
19498: CALL_OW 49
// end ;
19502: GO 19393
19504: POP
19505: POP
// for i := 1 to animalsAmount [ 2 ] do
19506: LD_ADDR_VAR 0 2
19510: PUSH
19511: DOUBLE
19512: LD_INT 1
19514: DEC
19515: ST_TO_ADDR
19516: LD_EXP 29
19520: PUSH
19521: LD_INT 2
19523: ARRAY
19524: PUSH
19525: FOR_TO
19526: IFFALSE 19636
// begin uc_side = 0 ;
19528: LD_ADDR_OWVAR 20
19532: PUSH
19533: LD_INT 0
19535: ST_TO_ADDR
// uc_nation = nation_nature ;
19536: LD_ADDR_OWVAR 21
19540: PUSH
19541: LD_INT 0
19543: ST_TO_ADDR
// hc_class = class_phororhacos ;
19544: LD_ADDR_OWVAR 28
19548: PUSH
19549: LD_INT 18
19551: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19552: LD_ADDR_OWVAR 31
19556: PUSH
19557: LD_EXP 30
19561: PUSH
19562: LD_INT 1
19564: ARRAY
19565: PUSH
19566: LD_EXP 30
19570: PUSH
19571: LD_INT 2
19573: ARRAY
19574: PUSH
19575: LD_EXP 30
19579: PUSH
19580: LD_INT 3
19582: ARRAY
19583: PUSH
19584: LD_EXP 30
19588: PUSH
19589: LD_INT 4
19591: ARRAY
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19599: LD_ADDR_OWVAR 35
19603: PUSH
19604: LD_EXP 31
19608: ST_TO_ADDR
// un = CreateHuman ;
19609: LD_ADDR_VAR 0 3
19613: PUSH
19614: CALL_OW 44
19618: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19619: LD_VAR 0 3
19623: PPUSH
19624: LD_INT 29
19626: PPUSH
19627: LD_INT 0
19629: PPUSH
19630: CALL_OW 49
// end ;
19634: GO 19525
19636: POP
19637: POP
// for i := 1 to animalsAmount [ 3 ] do
19638: LD_ADDR_VAR 0 2
19642: PUSH
19643: DOUBLE
19644: LD_INT 1
19646: DEC
19647: ST_TO_ADDR
19648: LD_EXP 29
19652: PUSH
19653: LD_INT 3
19655: ARRAY
19656: PUSH
19657: FOR_TO
19658: IFFALSE 19768
// begin uc_side = 0 ;
19660: LD_ADDR_OWVAR 20
19664: PUSH
19665: LD_INT 0
19667: ST_TO_ADDR
// uc_nation = nation_nature ;
19668: LD_ADDR_OWVAR 21
19672: PUSH
19673: LD_INT 0
19675: ST_TO_ADDR
// hc_class = class_tiger ;
19676: LD_ADDR_OWVAR 28
19680: PUSH
19681: LD_INT 14
19683: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19684: LD_ADDR_OWVAR 31
19688: PUSH
19689: LD_EXP 30
19693: PUSH
19694: LD_INT 1
19696: ARRAY
19697: PUSH
19698: LD_EXP 30
19702: PUSH
19703: LD_INT 2
19705: ARRAY
19706: PUSH
19707: LD_EXP 30
19711: PUSH
19712: LD_INT 3
19714: ARRAY
19715: PUSH
19716: LD_EXP 30
19720: PUSH
19721: LD_INT 4
19723: ARRAY
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19731: LD_ADDR_OWVAR 35
19735: PUSH
19736: LD_EXP 31
19740: ST_TO_ADDR
// un = CreateHuman ;
19741: LD_ADDR_VAR 0 3
19745: PUSH
19746: CALL_OW 44
19750: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19751: LD_VAR 0 3
19755: PPUSH
19756: LD_INT 29
19758: PPUSH
19759: LD_INT 0
19761: PPUSH
19762: CALL_OW 49
// end ;
19766: GO 19657
19768: POP
19769: POP
// for i := 1 to animalsAmount [ 4 ] do
19770: LD_ADDR_VAR 0 2
19774: PUSH
19775: DOUBLE
19776: LD_INT 1
19778: DEC
19779: ST_TO_ADDR
19780: LD_EXP 29
19784: PUSH
19785: LD_INT 4
19787: ARRAY
19788: PUSH
19789: FOR_TO
19790: IFFALSE 19900
// begin uc_side = 0 ;
19792: LD_ADDR_OWVAR 20
19796: PUSH
19797: LD_INT 0
19799: ST_TO_ADDR
// uc_nation = nation_nature ;
19800: LD_ADDR_OWVAR 21
19804: PUSH
19805: LD_INT 0
19807: ST_TO_ADDR
// hc_class = 21 ;
19808: LD_ADDR_OWVAR 28
19812: PUSH
19813: LD_INT 21
19815: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
19816: LD_ADDR_OWVAR 31
19820: PUSH
19821: LD_EXP 30
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PUSH
19830: LD_EXP 30
19834: PUSH
19835: LD_INT 2
19837: ARRAY
19838: PUSH
19839: LD_EXP 30
19843: PUSH
19844: LD_INT 3
19846: ARRAY
19847: PUSH
19848: LD_EXP 30
19852: PUSH
19853: LD_INT 4
19855: ARRAY
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
19863: LD_ADDR_OWVAR 35
19867: PUSH
19868: LD_EXP 31
19872: ST_TO_ADDR
// un = CreateHuman ;
19873: LD_ADDR_VAR 0 3
19877: PUSH
19878: CALL_OW 44
19882: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
19883: LD_VAR 0 3
19887: PPUSH
19888: LD_INT 29
19890: PPUSH
19891: LD_INT 0
19893: PPUSH
19894: CALL_OW 49
// end ;
19898: GO 19789
19900: POP
19901: POP
// end ; end_of_file
19902: LD_VAR 0 1
19906: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
19907: LD_INT 0
19909: PPUSH
19910: PPUSH
// skirmish := false ;
19911: LD_ADDR_EXP 85
19915: PUSH
19916: LD_INT 0
19918: ST_TO_ADDR
// debug_mc := false ;
19919: LD_ADDR_EXP 86
19923: PUSH
19924: LD_INT 0
19926: ST_TO_ADDR
// mc_bases := [ ] ;
19927: LD_ADDR_EXP 87
19931: PUSH
19932: EMPTY
19933: ST_TO_ADDR
// mc_sides := [ ] ;
19934: LD_ADDR_EXP 113
19938: PUSH
19939: EMPTY
19940: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
19941: LD_ADDR_EXP 88
19945: PUSH
19946: EMPTY
19947: ST_TO_ADDR
// mc_building_repairs := [ ] ;
19948: LD_ADDR_EXP 89
19952: PUSH
19953: EMPTY
19954: ST_TO_ADDR
// mc_need_heal := [ ] ;
19955: LD_ADDR_EXP 90
19959: PUSH
19960: EMPTY
19961: ST_TO_ADDR
// mc_healers := [ ] ;
19962: LD_ADDR_EXP 91
19966: PUSH
19967: EMPTY
19968: ST_TO_ADDR
// mc_build_list := [ ] ;
19969: LD_ADDR_EXP 92
19973: PUSH
19974: EMPTY
19975: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
19976: LD_ADDR_EXP 119
19980: PUSH
19981: EMPTY
19982: ST_TO_ADDR
// mc_builders := [ ] ;
19983: LD_ADDR_EXP 93
19987: PUSH
19988: EMPTY
19989: ST_TO_ADDR
// mc_construct_list := [ ] ;
19990: LD_ADDR_EXP 94
19994: PUSH
19995: EMPTY
19996: ST_TO_ADDR
// mc_turret_list := [ ] ;
19997: LD_ADDR_EXP 95
20001: PUSH
20002: EMPTY
20003: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
20004: LD_ADDR_EXP 96
20008: PUSH
20009: EMPTY
20010: ST_TO_ADDR
// mc_miners := [ ] ;
20011: LD_ADDR_EXP 101
20015: PUSH
20016: EMPTY
20017: ST_TO_ADDR
// mc_mines := [ ] ;
20018: LD_ADDR_EXP 100
20022: PUSH
20023: EMPTY
20024: ST_TO_ADDR
// mc_minefields := [ ] ;
20025: LD_ADDR_EXP 102
20029: PUSH
20030: EMPTY
20031: ST_TO_ADDR
// mc_crates := [ ] ;
20032: LD_ADDR_EXP 103
20036: PUSH
20037: EMPTY
20038: ST_TO_ADDR
// mc_crates_collector := [ ] ;
20039: LD_ADDR_EXP 104
20043: PUSH
20044: EMPTY
20045: ST_TO_ADDR
// mc_crates_area := [ ] ;
20046: LD_ADDR_EXP 105
20050: PUSH
20051: EMPTY
20052: ST_TO_ADDR
// mc_vehicles := [ ] ;
20053: LD_ADDR_EXP 106
20057: PUSH
20058: EMPTY
20059: ST_TO_ADDR
// mc_attack := [ ] ;
20060: LD_ADDR_EXP 107
20064: PUSH
20065: EMPTY
20066: ST_TO_ADDR
// mc_produce := [ ] ;
20067: LD_ADDR_EXP 108
20071: PUSH
20072: EMPTY
20073: ST_TO_ADDR
// mc_defender := [ ] ;
20074: LD_ADDR_EXP 109
20078: PUSH
20079: EMPTY
20080: ST_TO_ADDR
// mc_parking := [ ] ;
20081: LD_ADDR_EXP 111
20085: PUSH
20086: EMPTY
20087: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
20088: LD_ADDR_EXP 97
20092: PUSH
20093: EMPTY
20094: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
20095: LD_ADDR_EXP 99
20099: PUSH
20100: EMPTY
20101: ST_TO_ADDR
// mc_scan := [ ] ;
20102: LD_ADDR_EXP 110
20106: PUSH
20107: EMPTY
20108: ST_TO_ADDR
// mc_scan_area := [ ] ;
20109: LD_ADDR_EXP 112
20113: PUSH
20114: EMPTY
20115: ST_TO_ADDR
// mc_tech := [ ] ;
20116: LD_ADDR_EXP 114
20120: PUSH
20121: EMPTY
20122: ST_TO_ADDR
// mc_class := [ ] ;
20123: LD_ADDR_EXP 128
20127: PUSH
20128: EMPTY
20129: ST_TO_ADDR
// mc_class_case_use := [ ] ;
20130: LD_ADDR_EXP 129
20134: PUSH
20135: EMPTY
20136: ST_TO_ADDR
// end ;
20137: LD_VAR 0 1
20141: RET
// export function MC_Kill ( base ) ; begin
20142: LD_INT 0
20144: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
20145: LD_ADDR_EXP 87
20149: PUSH
20150: LD_EXP 87
20154: PPUSH
20155: LD_VAR 0 1
20159: PPUSH
20160: EMPTY
20161: PPUSH
20162: CALL_OW 1
20166: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
20167: LD_ADDR_EXP 88
20171: PUSH
20172: LD_EXP 88
20176: PPUSH
20177: LD_VAR 0 1
20181: PPUSH
20182: EMPTY
20183: PPUSH
20184: CALL_OW 1
20188: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
20189: LD_ADDR_EXP 89
20193: PUSH
20194: LD_EXP 89
20198: PPUSH
20199: LD_VAR 0 1
20203: PPUSH
20204: EMPTY
20205: PPUSH
20206: CALL_OW 1
20210: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
20211: LD_ADDR_EXP 90
20215: PUSH
20216: LD_EXP 90
20220: PPUSH
20221: LD_VAR 0 1
20225: PPUSH
20226: EMPTY
20227: PPUSH
20228: CALL_OW 1
20232: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
20233: LD_ADDR_EXP 91
20237: PUSH
20238: LD_EXP 91
20242: PPUSH
20243: LD_VAR 0 1
20247: PPUSH
20248: EMPTY
20249: PPUSH
20250: CALL_OW 1
20254: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
20255: LD_ADDR_EXP 92
20259: PUSH
20260: LD_EXP 92
20264: PPUSH
20265: LD_VAR 0 1
20269: PPUSH
20270: EMPTY
20271: PPUSH
20272: CALL_OW 1
20276: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
20277: LD_ADDR_EXP 93
20281: PUSH
20282: LD_EXP 93
20286: PPUSH
20287: LD_VAR 0 1
20291: PPUSH
20292: EMPTY
20293: PPUSH
20294: CALL_OW 1
20298: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
20299: LD_ADDR_EXP 94
20303: PUSH
20304: LD_EXP 94
20308: PPUSH
20309: LD_VAR 0 1
20313: PPUSH
20314: EMPTY
20315: PPUSH
20316: CALL_OW 1
20320: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
20321: LD_ADDR_EXP 95
20325: PUSH
20326: LD_EXP 95
20330: PPUSH
20331: LD_VAR 0 1
20335: PPUSH
20336: EMPTY
20337: PPUSH
20338: CALL_OW 1
20342: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
20343: LD_ADDR_EXP 96
20347: PUSH
20348: LD_EXP 96
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: EMPTY
20359: PPUSH
20360: CALL_OW 1
20364: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
20365: LD_ADDR_EXP 97
20369: PUSH
20370: LD_EXP 97
20374: PPUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: EMPTY
20381: PPUSH
20382: CALL_OW 1
20386: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
20387: LD_ADDR_EXP 98
20391: PUSH
20392: LD_EXP 98
20396: PPUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: LD_INT 0
20404: PPUSH
20405: CALL_OW 1
20409: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
20410: LD_ADDR_EXP 99
20414: PUSH
20415: LD_EXP 99
20419: PPUSH
20420: LD_VAR 0 1
20424: PPUSH
20425: EMPTY
20426: PPUSH
20427: CALL_OW 1
20431: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
20432: LD_ADDR_EXP 100
20436: PUSH
20437: LD_EXP 100
20441: PPUSH
20442: LD_VAR 0 1
20446: PPUSH
20447: EMPTY
20448: PPUSH
20449: CALL_OW 1
20453: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
20454: LD_ADDR_EXP 101
20458: PUSH
20459: LD_EXP 101
20463: PPUSH
20464: LD_VAR 0 1
20468: PPUSH
20469: EMPTY
20470: PPUSH
20471: CALL_OW 1
20475: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
20476: LD_ADDR_EXP 102
20480: PUSH
20481: LD_EXP 102
20485: PPUSH
20486: LD_VAR 0 1
20490: PPUSH
20491: EMPTY
20492: PPUSH
20493: CALL_OW 1
20497: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
20498: LD_ADDR_EXP 103
20502: PUSH
20503: LD_EXP 103
20507: PPUSH
20508: LD_VAR 0 1
20512: PPUSH
20513: EMPTY
20514: PPUSH
20515: CALL_OW 1
20519: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
20520: LD_ADDR_EXP 104
20524: PUSH
20525: LD_EXP 104
20529: PPUSH
20530: LD_VAR 0 1
20534: PPUSH
20535: EMPTY
20536: PPUSH
20537: CALL_OW 1
20541: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
20542: LD_ADDR_EXP 105
20546: PUSH
20547: LD_EXP 105
20551: PPUSH
20552: LD_VAR 0 1
20556: PPUSH
20557: EMPTY
20558: PPUSH
20559: CALL_OW 1
20563: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
20564: LD_ADDR_EXP 106
20568: PUSH
20569: LD_EXP 106
20573: PPUSH
20574: LD_VAR 0 1
20578: PPUSH
20579: EMPTY
20580: PPUSH
20581: CALL_OW 1
20585: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
20586: LD_ADDR_EXP 107
20590: PUSH
20591: LD_EXP 107
20595: PPUSH
20596: LD_VAR 0 1
20600: PPUSH
20601: EMPTY
20602: PPUSH
20603: CALL_OW 1
20607: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
20608: LD_ADDR_EXP 108
20612: PUSH
20613: LD_EXP 108
20617: PPUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: EMPTY
20624: PPUSH
20625: CALL_OW 1
20629: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
20630: LD_ADDR_EXP 109
20634: PUSH
20635: LD_EXP 109
20639: PPUSH
20640: LD_VAR 0 1
20644: PPUSH
20645: EMPTY
20646: PPUSH
20647: CALL_OW 1
20651: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
20652: LD_ADDR_EXP 110
20656: PUSH
20657: LD_EXP 110
20661: PPUSH
20662: LD_VAR 0 1
20666: PPUSH
20667: EMPTY
20668: PPUSH
20669: CALL_OW 1
20673: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
20674: LD_ADDR_EXP 111
20678: PUSH
20679: LD_EXP 111
20683: PPUSH
20684: LD_VAR 0 1
20688: PPUSH
20689: EMPTY
20690: PPUSH
20691: CALL_OW 1
20695: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
20696: LD_ADDR_EXP 112
20700: PUSH
20701: LD_EXP 112
20705: PPUSH
20706: LD_VAR 0 1
20710: PPUSH
20711: EMPTY
20712: PPUSH
20713: CALL_OW 1
20717: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
20718: LD_ADDR_EXP 114
20722: PUSH
20723: LD_EXP 114
20727: PPUSH
20728: LD_VAR 0 1
20732: PPUSH
20733: EMPTY
20734: PPUSH
20735: CALL_OW 1
20739: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
20740: LD_ADDR_EXP 116
20744: PUSH
20745: LD_EXP 116
20749: PPUSH
20750: LD_VAR 0 1
20754: PPUSH
20755: EMPTY
20756: PPUSH
20757: CALL_OW 1
20761: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
20762: LD_ADDR_EXP 117
20766: PUSH
20767: LD_EXP 117
20771: PPUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: EMPTY
20778: PPUSH
20779: CALL_OW 1
20783: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
20784: LD_ADDR_EXP 118
20788: PUSH
20789: LD_EXP 118
20793: PPUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: EMPTY
20800: PPUSH
20801: CALL_OW 1
20805: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
20806: LD_ADDR_EXP 119
20810: PUSH
20811: LD_EXP 119
20815: PPUSH
20816: LD_VAR 0 1
20820: PPUSH
20821: EMPTY
20822: PPUSH
20823: CALL_OW 1
20827: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
20828: LD_ADDR_EXP 120
20832: PUSH
20833: LD_EXP 120
20837: PPUSH
20838: LD_VAR 0 1
20842: PPUSH
20843: EMPTY
20844: PPUSH
20845: CALL_OW 1
20849: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
20850: LD_ADDR_EXP 121
20854: PUSH
20855: LD_EXP 121
20859: PPUSH
20860: LD_VAR 0 1
20864: PPUSH
20865: EMPTY
20866: PPUSH
20867: CALL_OW 1
20871: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
20872: LD_ADDR_EXP 122
20876: PUSH
20877: LD_EXP 122
20881: PPUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: EMPTY
20888: PPUSH
20889: CALL_OW 1
20893: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
20894: LD_ADDR_EXP 123
20898: PUSH
20899: LD_EXP 123
20903: PPUSH
20904: LD_VAR 0 1
20908: PPUSH
20909: EMPTY
20910: PPUSH
20911: CALL_OW 1
20915: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
20916: LD_ADDR_EXP 124
20920: PUSH
20921: LD_EXP 124
20925: PPUSH
20926: LD_VAR 0 1
20930: PPUSH
20931: EMPTY
20932: PPUSH
20933: CALL_OW 1
20937: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
20938: LD_ADDR_EXP 125
20942: PUSH
20943: LD_EXP 125
20947: PPUSH
20948: LD_VAR 0 1
20952: PPUSH
20953: EMPTY
20954: PPUSH
20955: CALL_OW 1
20959: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
20960: LD_ADDR_EXP 126
20964: PUSH
20965: LD_EXP 126
20969: PPUSH
20970: LD_VAR 0 1
20974: PPUSH
20975: EMPTY
20976: PPUSH
20977: CALL_OW 1
20981: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
20982: LD_ADDR_EXP 127
20986: PUSH
20987: LD_EXP 127
20991: PPUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: EMPTY
20998: PPUSH
20999: CALL_OW 1
21003: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
21004: LD_ADDR_EXP 128
21008: PUSH
21009: LD_EXP 128
21013: PPUSH
21014: LD_VAR 0 1
21018: PPUSH
21019: EMPTY
21020: PPUSH
21021: CALL_OW 1
21025: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
21026: LD_ADDR_EXP 129
21030: PUSH
21031: LD_EXP 129
21035: PPUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: LD_INT 0
21043: PPUSH
21044: CALL_OW 1
21048: ST_TO_ADDR
// end ;
21049: LD_VAR 0 2
21053: RET
// export function MC_Add ( side , units ) ; var base ; begin
21054: LD_INT 0
21056: PPUSH
21057: PPUSH
// base := mc_bases + 1 ;
21058: LD_ADDR_VAR 0 4
21062: PUSH
21063: LD_EXP 87
21067: PUSH
21068: LD_INT 1
21070: PLUS
21071: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
21072: LD_ADDR_EXP 113
21076: PUSH
21077: LD_EXP 113
21081: PPUSH
21082: LD_VAR 0 4
21086: PPUSH
21087: LD_VAR 0 1
21091: PPUSH
21092: CALL_OW 1
21096: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
21097: LD_ADDR_EXP 87
21101: PUSH
21102: LD_EXP 87
21106: PPUSH
21107: LD_VAR 0 4
21111: PPUSH
21112: LD_VAR 0 2
21116: PPUSH
21117: CALL_OW 1
21121: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
21122: LD_ADDR_EXP 88
21126: PUSH
21127: LD_EXP 88
21131: PPUSH
21132: LD_VAR 0 4
21136: PPUSH
21137: EMPTY
21138: PPUSH
21139: CALL_OW 1
21143: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
21144: LD_ADDR_EXP 89
21148: PUSH
21149: LD_EXP 89
21153: PPUSH
21154: LD_VAR 0 4
21158: PPUSH
21159: EMPTY
21160: PPUSH
21161: CALL_OW 1
21165: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
21166: LD_ADDR_EXP 90
21170: PUSH
21171: LD_EXP 90
21175: PPUSH
21176: LD_VAR 0 4
21180: PPUSH
21181: EMPTY
21182: PPUSH
21183: CALL_OW 1
21187: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
21188: LD_ADDR_EXP 91
21192: PUSH
21193: LD_EXP 91
21197: PPUSH
21198: LD_VAR 0 4
21202: PPUSH
21203: EMPTY
21204: PPUSH
21205: CALL_OW 1
21209: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
21210: LD_ADDR_EXP 92
21214: PUSH
21215: LD_EXP 92
21219: PPUSH
21220: LD_VAR 0 4
21224: PPUSH
21225: EMPTY
21226: PPUSH
21227: CALL_OW 1
21231: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
21232: LD_ADDR_EXP 93
21236: PUSH
21237: LD_EXP 93
21241: PPUSH
21242: LD_VAR 0 4
21246: PPUSH
21247: EMPTY
21248: PPUSH
21249: CALL_OW 1
21253: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
21254: LD_ADDR_EXP 94
21258: PUSH
21259: LD_EXP 94
21263: PPUSH
21264: LD_VAR 0 4
21268: PPUSH
21269: EMPTY
21270: PPUSH
21271: CALL_OW 1
21275: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
21276: LD_ADDR_EXP 95
21280: PUSH
21281: LD_EXP 95
21285: PPUSH
21286: LD_VAR 0 4
21290: PPUSH
21291: EMPTY
21292: PPUSH
21293: CALL_OW 1
21297: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
21298: LD_ADDR_EXP 96
21302: PUSH
21303: LD_EXP 96
21307: PPUSH
21308: LD_VAR 0 4
21312: PPUSH
21313: EMPTY
21314: PPUSH
21315: CALL_OW 1
21319: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
21320: LD_ADDR_EXP 97
21324: PUSH
21325: LD_EXP 97
21329: PPUSH
21330: LD_VAR 0 4
21334: PPUSH
21335: EMPTY
21336: PPUSH
21337: CALL_OW 1
21341: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
21342: LD_ADDR_EXP 98
21346: PUSH
21347: LD_EXP 98
21351: PPUSH
21352: LD_VAR 0 4
21356: PPUSH
21357: LD_INT 0
21359: PPUSH
21360: CALL_OW 1
21364: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
21365: LD_ADDR_EXP 99
21369: PUSH
21370: LD_EXP 99
21374: PPUSH
21375: LD_VAR 0 4
21379: PPUSH
21380: EMPTY
21381: PPUSH
21382: CALL_OW 1
21386: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
21387: LD_ADDR_EXP 100
21391: PUSH
21392: LD_EXP 100
21396: PPUSH
21397: LD_VAR 0 4
21401: PPUSH
21402: EMPTY
21403: PPUSH
21404: CALL_OW 1
21408: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
21409: LD_ADDR_EXP 101
21413: PUSH
21414: LD_EXP 101
21418: PPUSH
21419: LD_VAR 0 4
21423: PPUSH
21424: EMPTY
21425: PPUSH
21426: CALL_OW 1
21430: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
21431: LD_ADDR_EXP 102
21435: PUSH
21436: LD_EXP 102
21440: PPUSH
21441: LD_VAR 0 4
21445: PPUSH
21446: EMPTY
21447: PPUSH
21448: CALL_OW 1
21452: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
21453: LD_ADDR_EXP 103
21457: PUSH
21458: LD_EXP 103
21462: PPUSH
21463: LD_VAR 0 4
21467: PPUSH
21468: EMPTY
21469: PPUSH
21470: CALL_OW 1
21474: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
21475: LD_ADDR_EXP 104
21479: PUSH
21480: LD_EXP 104
21484: PPUSH
21485: LD_VAR 0 4
21489: PPUSH
21490: EMPTY
21491: PPUSH
21492: CALL_OW 1
21496: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
21497: LD_ADDR_EXP 105
21501: PUSH
21502: LD_EXP 105
21506: PPUSH
21507: LD_VAR 0 4
21511: PPUSH
21512: EMPTY
21513: PPUSH
21514: CALL_OW 1
21518: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
21519: LD_ADDR_EXP 106
21523: PUSH
21524: LD_EXP 106
21528: PPUSH
21529: LD_VAR 0 4
21533: PPUSH
21534: EMPTY
21535: PPUSH
21536: CALL_OW 1
21540: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
21541: LD_ADDR_EXP 107
21545: PUSH
21546: LD_EXP 107
21550: PPUSH
21551: LD_VAR 0 4
21555: PPUSH
21556: EMPTY
21557: PPUSH
21558: CALL_OW 1
21562: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
21563: LD_ADDR_EXP 108
21567: PUSH
21568: LD_EXP 108
21572: PPUSH
21573: LD_VAR 0 4
21577: PPUSH
21578: EMPTY
21579: PPUSH
21580: CALL_OW 1
21584: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
21585: LD_ADDR_EXP 109
21589: PUSH
21590: LD_EXP 109
21594: PPUSH
21595: LD_VAR 0 4
21599: PPUSH
21600: EMPTY
21601: PPUSH
21602: CALL_OW 1
21606: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
21607: LD_ADDR_EXP 110
21611: PUSH
21612: LD_EXP 110
21616: PPUSH
21617: LD_VAR 0 4
21621: PPUSH
21622: EMPTY
21623: PPUSH
21624: CALL_OW 1
21628: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
21629: LD_ADDR_EXP 111
21633: PUSH
21634: LD_EXP 111
21638: PPUSH
21639: LD_VAR 0 4
21643: PPUSH
21644: EMPTY
21645: PPUSH
21646: CALL_OW 1
21650: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
21651: LD_ADDR_EXP 112
21655: PUSH
21656: LD_EXP 112
21660: PPUSH
21661: LD_VAR 0 4
21665: PPUSH
21666: EMPTY
21667: PPUSH
21668: CALL_OW 1
21672: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
21673: LD_ADDR_EXP 114
21677: PUSH
21678: LD_EXP 114
21682: PPUSH
21683: LD_VAR 0 4
21687: PPUSH
21688: EMPTY
21689: PPUSH
21690: CALL_OW 1
21694: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
21695: LD_ADDR_EXP 116
21699: PUSH
21700: LD_EXP 116
21704: PPUSH
21705: LD_VAR 0 4
21709: PPUSH
21710: EMPTY
21711: PPUSH
21712: CALL_OW 1
21716: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
21717: LD_ADDR_EXP 117
21721: PUSH
21722: LD_EXP 117
21726: PPUSH
21727: LD_VAR 0 4
21731: PPUSH
21732: EMPTY
21733: PPUSH
21734: CALL_OW 1
21738: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
21739: LD_ADDR_EXP 118
21743: PUSH
21744: LD_EXP 118
21748: PPUSH
21749: LD_VAR 0 4
21753: PPUSH
21754: EMPTY
21755: PPUSH
21756: CALL_OW 1
21760: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
21761: LD_ADDR_EXP 119
21765: PUSH
21766: LD_EXP 119
21770: PPUSH
21771: LD_VAR 0 4
21775: PPUSH
21776: EMPTY
21777: PPUSH
21778: CALL_OW 1
21782: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
21783: LD_ADDR_EXP 120
21787: PUSH
21788: LD_EXP 120
21792: PPUSH
21793: LD_VAR 0 4
21797: PPUSH
21798: EMPTY
21799: PPUSH
21800: CALL_OW 1
21804: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
21805: LD_ADDR_EXP 121
21809: PUSH
21810: LD_EXP 121
21814: PPUSH
21815: LD_VAR 0 4
21819: PPUSH
21820: EMPTY
21821: PPUSH
21822: CALL_OW 1
21826: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
21827: LD_ADDR_EXP 122
21831: PUSH
21832: LD_EXP 122
21836: PPUSH
21837: LD_VAR 0 4
21841: PPUSH
21842: EMPTY
21843: PPUSH
21844: CALL_OW 1
21848: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
21849: LD_ADDR_EXP 123
21853: PUSH
21854: LD_EXP 123
21858: PPUSH
21859: LD_VAR 0 4
21863: PPUSH
21864: EMPTY
21865: PPUSH
21866: CALL_OW 1
21870: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
21871: LD_ADDR_EXP 124
21875: PUSH
21876: LD_EXP 124
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: EMPTY
21887: PPUSH
21888: CALL_OW 1
21892: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
21893: LD_ADDR_EXP 125
21897: PUSH
21898: LD_EXP 125
21902: PPUSH
21903: LD_VAR 0 4
21907: PPUSH
21908: EMPTY
21909: PPUSH
21910: CALL_OW 1
21914: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
21915: LD_ADDR_EXP 126
21919: PUSH
21920: LD_EXP 126
21924: PPUSH
21925: LD_VAR 0 4
21929: PPUSH
21930: EMPTY
21931: PPUSH
21932: CALL_OW 1
21936: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
21937: LD_ADDR_EXP 127
21941: PUSH
21942: LD_EXP 127
21946: PPUSH
21947: LD_VAR 0 4
21951: PPUSH
21952: EMPTY
21953: PPUSH
21954: CALL_OW 1
21958: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
21959: LD_ADDR_EXP 128
21963: PUSH
21964: LD_EXP 128
21968: PPUSH
21969: LD_VAR 0 4
21973: PPUSH
21974: EMPTY
21975: PPUSH
21976: CALL_OW 1
21980: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
21981: LD_ADDR_EXP 129
21985: PUSH
21986: LD_EXP 129
21990: PPUSH
21991: LD_VAR 0 4
21995: PPUSH
21996: LD_INT 0
21998: PPUSH
21999: CALL_OW 1
22003: ST_TO_ADDR
// result := base ;
22004: LD_ADDR_VAR 0 3
22008: PUSH
22009: LD_VAR 0 4
22013: ST_TO_ADDR
// end ;
22014: LD_VAR 0 3
22018: RET
// export function MC_Start ( ) ; var i ; begin
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
// for i = 1 to mc_bases do
22023: LD_ADDR_VAR 0 2
22027: PUSH
22028: DOUBLE
22029: LD_INT 1
22031: DEC
22032: ST_TO_ADDR
22033: LD_EXP 87
22037: PUSH
22038: FOR_TO
22039: IFFALSE 23116
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
22041: LD_ADDR_EXP 87
22045: PUSH
22046: LD_EXP 87
22050: PPUSH
22051: LD_VAR 0 2
22055: PPUSH
22056: LD_EXP 87
22060: PUSH
22061: LD_VAR 0 2
22065: ARRAY
22066: PUSH
22067: LD_INT 0
22069: DIFF
22070: PPUSH
22071: CALL_OW 1
22075: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
22076: LD_ADDR_EXP 88
22080: PUSH
22081: LD_EXP 88
22085: PPUSH
22086: LD_VAR 0 2
22090: PPUSH
22091: EMPTY
22092: PPUSH
22093: CALL_OW 1
22097: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
22098: LD_ADDR_EXP 89
22102: PUSH
22103: LD_EXP 89
22107: PPUSH
22108: LD_VAR 0 2
22112: PPUSH
22113: EMPTY
22114: PPUSH
22115: CALL_OW 1
22119: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
22120: LD_ADDR_EXP 90
22124: PUSH
22125: LD_EXP 90
22129: PPUSH
22130: LD_VAR 0 2
22134: PPUSH
22135: EMPTY
22136: PPUSH
22137: CALL_OW 1
22141: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
22142: LD_ADDR_EXP 91
22146: PUSH
22147: LD_EXP 91
22151: PPUSH
22152: LD_VAR 0 2
22156: PPUSH
22157: EMPTY
22158: PUSH
22159: EMPTY
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PPUSH
22165: CALL_OW 1
22169: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
22170: LD_ADDR_EXP 92
22174: PUSH
22175: LD_EXP 92
22179: PPUSH
22180: LD_VAR 0 2
22184: PPUSH
22185: EMPTY
22186: PPUSH
22187: CALL_OW 1
22191: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
22192: LD_ADDR_EXP 119
22196: PUSH
22197: LD_EXP 119
22201: PPUSH
22202: LD_VAR 0 2
22206: PPUSH
22207: EMPTY
22208: PPUSH
22209: CALL_OW 1
22213: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
22214: LD_ADDR_EXP 93
22218: PUSH
22219: LD_EXP 93
22223: PPUSH
22224: LD_VAR 0 2
22228: PPUSH
22229: EMPTY
22230: PPUSH
22231: CALL_OW 1
22235: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
22236: LD_ADDR_EXP 94
22240: PUSH
22241: LD_EXP 94
22245: PPUSH
22246: LD_VAR 0 2
22250: PPUSH
22251: EMPTY
22252: PPUSH
22253: CALL_OW 1
22257: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
22258: LD_ADDR_EXP 95
22262: PUSH
22263: LD_EXP 95
22267: PPUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_EXP 87
22277: PUSH
22278: LD_VAR 0 2
22282: ARRAY
22283: PPUSH
22284: LD_INT 2
22286: PUSH
22287: LD_INT 30
22289: PUSH
22290: LD_INT 32
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 30
22299: PUSH
22300: LD_INT 33
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: LIST
22311: PPUSH
22312: CALL_OW 72
22316: PPUSH
22317: CALL_OW 1
22321: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
22322: LD_ADDR_EXP 96
22326: PUSH
22327: LD_EXP 96
22331: PPUSH
22332: LD_VAR 0 2
22336: PPUSH
22337: LD_EXP 87
22341: PUSH
22342: LD_VAR 0 2
22346: ARRAY
22347: PPUSH
22348: LD_INT 2
22350: PUSH
22351: LD_INT 30
22353: PUSH
22354: LD_INT 32
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 30
22363: PUSH
22364: LD_INT 31
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 58
22378: PUSH
22379: EMPTY
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PPUSH
22386: CALL_OW 72
22390: PPUSH
22391: CALL_OW 1
22395: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
22396: LD_ADDR_EXP 97
22400: PUSH
22401: LD_EXP 97
22405: PPUSH
22406: LD_VAR 0 2
22410: PPUSH
22411: EMPTY
22412: PPUSH
22413: CALL_OW 1
22417: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
22418: LD_ADDR_EXP 101
22422: PUSH
22423: LD_EXP 101
22427: PPUSH
22428: LD_VAR 0 2
22432: PPUSH
22433: EMPTY
22434: PPUSH
22435: CALL_OW 1
22439: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
22440: LD_ADDR_EXP 100
22444: PUSH
22445: LD_EXP 100
22449: PPUSH
22450: LD_VAR 0 2
22454: PPUSH
22455: EMPTY
22456: PPUSH
22457: CALL_OW 1
22461: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
22462: LD_ADDR_EXP 102
22466: PUSH
22467: LD_EXP 102
22471: PPUSH
22472: LD_VAR 0 2
22476: PPUSH
22477: EMPTY
22478: PPUSH
22479: CALL_OW 1
22483: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
22484: LD_ADDR_EXP 103
22488: PUSH
22489: LD_EXP 103
22493: PPUSH
22494: LD_VAR 0 2
22498: PPUSH
22499: EMPTY
22500: PPUSH
22501: CALL_OW 1
22505: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
22506: LD_ADDR_EXP 104
22510: PUSH
22511: LD_EXP 104
22515: PPUSH
22516: LD_VAR 0 2
22520: PPUSH
22521: EMPTY
22522: PPUSH
22523: CALL_OW 1
22527: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
22528: LD_ADDR_EXP 105
22532: PUSH
22533: LD_EXP 105
22537: PPUSH
22538: LD_VAR 0 2
22542: PPUSH
22543: EMPTY
22544: PPUSH
22545: CALL_OW 1
22549: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
22550: LD_ADDR_EXP 106
22554: PUSH
22555: LD_EXP 106
22559: PPUSH
22560: LD_VAR 0 2
22564: PPUSH
22565: EMPTY
22566: PPUSH
22567: CALL_OW 1
22571: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
22572: LD_ADDR_EXP 107
22576: PUSH
22577: LD_EXP 107
22581: PPUSH
22582: LD_VAR 0 2
22586: PPUSH
22587: EMPTY
22588: PPUSH
22589: CALL_OW 1
22593: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
22594: LD_ADDR_EXP 108
22598: PUSH
22599: LD_EXP 108
22603: PPUSH
22604: LD_VAR 0 2
22608: PPUSH
22609: EMPTY
22610: PPUSH
22611: CALL_OW 1
22615: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
22616: LD_ADDR_EXP 109
22620: PUSH
22621: LD_EXP 109
22625: PPUSH
22626: LD_VAR 0 2
22630: PPUSH
22631: EMPTY
22632: PPUSH
22633: CALL_OW 1
22637: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
22638: LD_ADDR_EXP 98
22642: PUSH
22643: LD_EXP 98
22647: PPUSH
22648: LD_VAR 0 2
22652: PPUSH
22653: LD_INT 0
22655: PPUSH
22656: CALL_OW 1
22660: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
22661: LD_ADDR_EXP 111
22665: PUSH
22666: LD_EXP 111
22670: PPUSH
22671: LD_VAR 0 2
22675: PPUSH
22676: LD_INT 0
22678: PPUSH
22679: CALL_OW 1
22683: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
22684: LD_ADDR_EXP 99
22688: PUSH
22689: LD_EXP 99
22693: PPUSH
22694: LD_VAR 0 2
22698: PPUSH
22699: EMPTY
22700: PPUSH
22701: CALL_OW 1
22705: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
22706: LD_ADDR_EXP 110
22710: PUSH
22711: LD_EXP 110
22715: PPUSH
22716: LD_VAR 0 2
22720: PPUSH
22721: LD_INT 0
22723: PPUSH
22724: CALL_OW 1
22728: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
22729: LD_ADDR_EXP 112
22733: PUSH
22734: LD_EXP 112
22738: PPUSH
22739: LD_VAR 0 2
22743: PPUSH
22744: EMPTY
22745: PPUSH
22746: CALL_OW 1
22750: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
22751: LD_ADDR_EXP 115
22755: PUSH
22756: LD_EXP 115
22760: PPUSH
22761: LD_VAR 0 2
22765: PPUSH
22766: LD_INT 0
22768: PPUSH
22769: CALL_OW 1
22773: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
22774: LD_ADDR_EXP 116
22778: PUSH
22779: LD_EXP 116
22783: PPUSH
22784: LD_VAR 0 2
22788: PPUSH
22789: EMPTY
22790: PPUSH
22791: CALL_OW 1
22795: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
22796: LD_ADDR_EXP 117
22800: PUSH
22801: LD_EXP 117
22805: PPUSH
22806: LD_VAR 0 2
22810: PPUSH
22811: EMPTY
22812: PPUSH
22813: CALL_OW 1
22817: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
22818: LD_ADDR_EXP 118
22822: PUSH
22823: LD_EXP 118
22827: PPUSH
22828: LD_VAR 0 2
22832: PPUSH
22833: EMPTY
22834: PPUSH
22835: CALL_OW 1
22839: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
22840: LD_ADDR_EXP 120
22844: PUSH
22845: LD_EXP 120
22849: PPUSH
22850: LD_VAR 0 2
22854: PPUSH
22855: LD_EXP 87
22859: PUSH
22860: LD_VAR 0 2
22864: ARRAY
22865: PPUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 30
22871: PUSH
22872: LD_INT 6
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 30
22881: PUSH
22882: LD_INT 7
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 30
22891: PUSH
22892: LD_INT 8
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: PPUSH
22905: CALL_OW 72
22909: PPUSH
22910: CALL_OW 1
22914: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
22915: LD_ADDR_EXP 121
22919: PUSH
22920: LD_EXP 121
22924: PPUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: EMPTY
22931: PPUSH
22932: CALL_OW 1
22936: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
22937: LD_ADDR_EXP 122
22941: PUSH
22942: LD_EXP 122
22946: PPUSH
22947: LD_VAR 0 2
22951: PPUSH
22952: EMPTY
22953: PPUSH
22954: CALL_OW 1
22958: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
22959: LD_ADDR_EXP 123
22963: PUSH
22964: LD_EXP 123
22968: PPUSH
22969: LD_VAR 0 2
22973: PPUSH
22974: EMPTY
22975: PPUSH
22976: CALL_OW 1
22980: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
22981: LD_ADDR_EXP 124
22985: PUSH
22986: LD_EXP 124
22990: PPUSH
22991: LD_VAR 0 2
22995: PPUSH
22996: EMPTY
22997: PPUSH
22998: CALL_OW 1
23002: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
23003: LD_ADDR_EXP 125
23007: PUSH
23008: LD_EXP 125
23012: PPUSH
23013: LD_VAR 0 2
23017: PPUSH
23018: EMPTY
23019: PPUSH
23020: CALL_OW 1
23024: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
23025: LD_ADDR_EXP 126
23029: PUSH
23030: LD_EXP 126
23034: PPUSH
23035: LD_VAR 0 2
23039: PPUSH
23040: EMPTY
23041: PPUSH
23042: CALL_OW 1
23046: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
23047: LD_ADDR_EXP 127
23051: PUSH
23052: LD_EXP 127
23056: PPUSH
23057: LD_VAR 0 2
23061: PPUSH
23062: EMPTY
23063: PPUSH
23064: CALL_OW 1
23068: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
23069: LD_ADDR_EXP 128
23073: PUSH
23074: LD_EXP 128
23078: PPUSH
23079: LD_VAR 0 2
23083: PPUSH
23084: EMPTY
23085: PPUSH
23086: CALL_OW 1
23090: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
23091: LD_ADDR_EXP 129
23095: PUSH
23096: LD_EXP 129
23100: PPUSH
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 0
23108: PPUSH
23109: CALL_OW 1
23113: ST_TO_ADDR
// end ;
23114: GO 22038
23116: POP
23117: POP
// MC_InitSides ( ) ;
23118: CALL 23404 0 0
// MC_InitResearch ( ) ;
23122: CALL 23143 0 0
// CustomInitMacro ( ) ;
23126: CALL 9105 0 0
// skirmish := true ;
23130: LD_ADDR_EXP 85
23134: PUSH
23135: LD_INT 1
23137: ST_TO_ADDR
// end ;
23138: LD_VAR 0 1
23142: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
23143: LD_INT 0
23145: PPUSH
23146: PPUSH
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
// if not mc_bases then
23151: LD_EXP 87
23155: NOT
23156: IFFALSE 23160
// exit ;
23158: GO 23399
// for i = 1 to 8 do
23160: LD_ADDR_VAR 0 2
23164: PUSH
23165: DOUBLE
23166: LD_INT 1
23168: DEC
23169: ST_TO_ADDR
23170: LD_INT 8
23172: PUSH
23173: FOR_TO
23174: IFFALSE 23200
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
23176: LD_ADDR_EXP 114
23180: PUSH
23181: LD_EXP 114
23185: PPUSH
23186: LD_VAR 0 2
23190: PPUSH
23191: EMPTY
23192: PPUSH
23193: CALL_OW 1
23197: ST_TO_ADDR
23198: GO 23173
23200: POP
23201: POP
// tmp := [ ] ;
23202: LD_ADDR_VAR 0 5
23206: PUSH
23207: EMPTY
23208: ST_TO_ADDR
// for i = 1 to mc_sides do
23209: LD_ADDR_VAR 0 2
23213: PUSH
23214: DOUBLE
23215: LD_INT 1
23217: DEC
23218: ST_TO_ADDR
23219: LD_EXP 113
23223: PUSH
23224: FOR_TO
23225: IFFALSE 23283
// if not mc_sides [ i ] in tmp then
23227: LD_EXP 113
23231: PUSH
23232: LD_VAR 0 2
23236: ARRAY
23237: PUSH
23238: LD_VAR 0 5
23242: IN
23243: NOT
23244: IFFALSE 23281
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
23246: LD_ADDR_VAR 0 5
23250: PUSH
23251: LD_VAR 0 5
23255: PPUSH
23256: LD_VAR 0 5
23260: PUSH
23261: LD_INT 1
23263: PLUS
23264: PPUSH
23265: LD_EXP 113
23269: PUSH
23270: LD_VAR 0 2
23274: ARRAY
23275: PPUSH
23276: CALL_OW 2
23280: ST_TO_ADDR
23281: GO 23224
23283: POP
23284: POP
// if not tmp then
23285: LD_VAR 0 5
23289: NOT
23290: IFFALSE 23294
// exit ;
23292: GO 23399
// for j in tmp do
23294: LD_ADDR_VAR 0 3
23298: PUSH
23299: LD_VAR 0 5
23303: PUSH
23304: FOR_IN
23305: IFFALSE 23397
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
23307: LD_ADDR_VAR 0 6
23311: PUSH
23312: LD_INT 22
23314: PUSH
23315: LD_VAR 0 3
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PPUSH
23324: CALL_OW 69
23328: ST_TO_ADDR
// if not un then
23329: LD_VAR 0 6
23333: NOT
23334: IFFALSE 23338
// continue ;
23336: GO 23304
// nation := GetNation ( un [ 1 ] ) ;
23338: LD_ADDR_VAR 0 4
23342: PUSH
23343: LD_VAR 0 6
23347: PUSH
23348: LD_INT 1
23350: ARRAY
23351: PPUSH
23352: CALL_OW 248
23356: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
23357: LD_ADDR_EXP 114
23361: PUSH
23362: LD_EXP 114
23366: PPUSH
23367: LD_VAR 0 3
23371: PPUSH
23372: LD_VAR 0 3
23376: PPUSH
23377: LD_VAR 0 4
23381: PPUSH
23382: LD_INT 1
23384: PPUSH
23385: CALL 45260 0 3
23389: PPUSH
23390: CALL_OW 1
23394: ST_TO_ADDR
// end ;
23395: GO 23304
23397: POP
23398: POP
// end ;
23399: LD_VAR 0 1
23403: RET
// export function MC_InitSides ( ) ; var i ; begin
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
// if not mc_bases then
23408: LD_EXP 87
23412: NOT
23413: IFFALSE 23417
// exit ;
23415: GO 23491
// for i = 1 to mc_bases do
23417: LD_ADDR_VAR 0 2
23421: PUSH
23422: DOUBLE
23423: LD_INT 1
23425: DEC
23426: ST_TO_ADDR
23427: LD_EXP 87
23431: PUSH
23432: FOR_TO
23433: IFFALSE 23489
// if mc_bases [ i ] then
23435: LD_EXP 87
23439: PUSH
23440: LD_VAR 0 2
23444: ARRAY
23445: IFFALSE 23487
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
23447: LD_ADDR_EXP 113
23451: PUSH
23452: LD_EXP 113
23456: PPUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: LD_EXP 87
23466: PUSH
23467: LD_VAR 0 2
23471: ARRAY
23472: PUSH
23473: LD_INT 1
23475: ARRAY
23476: PPUSH
23477: CALL_OW 255
23481: PPUSH
23482: CALL_OW 1
23486: ST_TO_ADDR
23487: GO 23432
23489: POP
23490: POP
// end ;
23491: LD_VAR 0 1
23495: RET
// every 0 0$01 trigger skirmish do
23496: LD_EXP 85
23500: IFFALSE 23654
23502: GO 23504
23504: DISABLE
// begin enable ;
23505: ENABLE
// MC_CheckBuildings ( ) ;
23506: CALL 28152 0 0
// MC_CheckPeopleLife ( ) ;
23510: CALL 28277 0 0
// RaiseSailEvent ( 100 ) ;
23514: LD_INT 100
23516: PPUSH
23517: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
23521: LD_INT 103
23523: PPUSH
23524: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
23528: LD_INT 104
23530: PPUSH
23531: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
23535: LD_INT 105
23537: PPUSH
23538: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
23542: LD_INT 106
23544: PPUSH
23545: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
23549: LD_INT 107
23551: PPUSH
23552: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
23556: LD_INT 108
23558: PPUSH
23559: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
23563: LD_INT 109
23565: PPUSH
23566: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
23570: LD_INT 110
23572: PPUSH
23573: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
23577: LD_INT 111
23579: PPUSH
23580: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
23584: LD_INT 112
23586: PPUSH
23587: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
23591: LD_INT 113
23593: PPUSH
23594: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
23598: LD_INT 120
23600: PPUSH
23601: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
23605: LD_INT 121
23607: PPUSH
23608: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
23612: LD_INT 122
23614: PPUSH
23615: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
23619: LD_INT 123
23621: PPUSH
23622: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
23626: LD_INT 124
23628: PPUSH
23629: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
23633: LD_INT 125
23635: PPUSH
23636: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
23640: LD_INT 126
23642: PPUSH
23643: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
23647: LD_INT 200
23649: PPUSH
23650: CALL_OW 427
// end ;
23654: END
// on SailEvent ( event ) do begin if event < 100 then
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 100
23662: LESS
23663: IFFALSE 23674
// CustomEvent ( event ) ;
23665: LD_VAR 0 1
23669: PPUSH
23670: CALL 11022 0 1
// if event = 100 then
23674: LD_VAR 0 1
23678: PUSH
23679: LD_INT 100
23681: EQUAL
23682: IFFALSE 23688
// MC_ClassManager ( ) ;
23684: CALL 24080 0 0
// if event = 101 then
23688: LD_VAR 0 1
23692: PUSH
23693: LD_INT 101
23695: EQUAL
23696: IFFALSE 23702
// MC_RepairBuildings ( ) ;
23698: CALL 28862 0 0
// if event = 102 then
23702: LD_VAR 0 1
23706: PUSH
23707: LD_INT 102
23709: EQUAL
23710: IFFALSE 23716
// MC_Heal ( ) ;
23712: CALL 29721 0 0
// if event = 103 then
23716: LD_VAR 0 1
23720: PUSH
23721: LD_INT 103
23723: EQUAL
23724: IFFALSE 23730
// MC_Build ( ) ;
23726: CALL 30143 0 0
// if event = 104 then
23730: LD_VAR 0 1
23734: PUSH
23735: LD_INT 104
23737: EQUAL
23738: IFFALSE 23744
// MC_TurretWeapon ( ) ;
23740: CALL 31756 0 0
// if event = 105 then
23744: LD_VAR 0 1
23748: PUSH
23749: LD_INT 105
23751: EQUAL
23752: IFFALSE 23758
// MC_BuildUpgrade ( ) ;
23754: CALL 31307 0 0
// if event = 106 then
23758: LD_VAR 0 1
23762: PUSH
23763: LD_INT 106
23765: EQUAL
23766: IFFALSE 23772
// MC_PlantMines ( ) ;
23768: CALL 32186 0 0
// if event = 107 then
23772: LD_VAR 0 1
23776: PUSH
23777: LD_INT 107
23779: EQUAL
23780: IFFALSE 23786
// MC_CollectCrates ( ) ;
23782: CALL 32984 0 0
// if event = 108 then
23786: LD_VAR 0 1
23790: PUSH
23791: LD_INT 108
23793: EQUAL
23794: IFFALSE 23800
// MC_LinkRemoteControl ( ) ;
23796: CALL 34760 0 0
// if event = 109 then
23800: LD_VAR 0 1
23804: PUSH
23805: LD_INT 109
23807: EQUAL
23808: IFFALSE 23814
// MC_ProduceVehicle ( ) ;
23810: CALL 34941 0 0
// if event = 110 then
23814: LD_VAR 0 1
23818: PUSH
23819: LD_INT 110
23821: EQUAL
23822: IFFALSE 23828
// MC_SendAttack ( ) ;
23824: CALL 35407 0 0
// if event = 111 then
23828: LD_VAR 0 1
23832: PUSH
23833: LD_INT 111
23835: EQUAL
23836: IFFALSE 23842
// MC_Defend ( ) ;
23838: CALL 35515 0 0
// if event = 112 then
23842: LD_VAR 0 1
23846: PUSH
23847: LD_INT 112
23849: EQUAL
23850: IFFALSE 23856
// MC_Research ( ) ;
23852: CALL 36120 0 0
// if event = 113 then
23856: LD_VAR 0 1
23860: PUSH
23861: LD_INT 113
23863: EQUAL
23864: IFFALSE 23870
// MC_MinesTrigger ( ) ;
23866: CALL 37234 0 0
// if event = 120 then
23870: LD_VAR 0 1
23874: PUSH
23875: LD_INT 120
23877: EQUAL
23878: IFFALSE 23884
// MC_RepairVehicle ( ) ;
23880: CALL 37333 0 0
// if event = 121 then
23884: LD_VAR 0 1
23888: PUSH
23889: LD_INT 121
23891: EQUAL
23892: IFFALSE 23898
// MC_TameApe ( ) ;
23894: CALL 38063 0 0
// if event = 122 then
23898: LD_VAR 0 1
23902: PUSH
23903: LD_INT 122
23905: EQUAL
23906: IFFALSE 23912
// MC_ChangeApeClass ( ) ;
23908: CALL 38892 0 0
// if event = 123 then
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 123
23919: EQUAL
23920: IFFALSE 23926
// MC_Bazooka ( ) ;
23922: CALL 39542 0 0
// if event = 124 then
23926: LD_VAR 0 1
23930: PUSH
23931: LD_INT 124
23933: EQUAL
23934: IFFALSE 23940
// MC_TeleportExit ( ) ;
23936: CALL 39740 0 0
// if event = 125 then
23940: LD_VAR 0 1
23944: PUSH
23945: LD_INT 125
23947: EQUAL
23948: IFFALSE 23954
// MC_Deposits ( ) ;
23950: CALL 40387 0 0
// if event = 126 then
23954: LD_VAR 0 1
23958: PUSH
23959: LD_INT 126
23961: EQUAL
23962: IFFALSE 23968
// MC_RemoteDriver ( ) ;
23964: CALL 41012 0 0
// if event = 200 then
23968: LD_VAR 0 1
23972: PUSH
23973: LD_INT 200
23975: EQUAL
23976: IFFALSE 23982
// MC_Idle ( ) ;
23978: CALL 42961 0 0
// end ;
23982: PPOPN 1
23984: END
// export function MC_Reset ( base , tag ) ; var i ; begin
23985: LD_INT 0
23987: PPUSH
23988: PPUSH
// if not mc_bases [ base ] or not tag then
23989: LD_EXP 87
23993: PUSH
23994: LD_VAR 0 1
23998: ARRAY
23999: NOT
24000: PUSH
24001: LD_VAR 0 2
24005: NOT
24006: OR
24007: IFFALSE 24011
// exit ;
24009: GO 24075
// for i in mc_bases [ base ] union mc_ape [ base ] do
24011: LD_ADDR_VAR 0 4
24015: PUSH
24016: LD_EXP 87
24020: PUSH
24021: LD_VAR 0 1
24025: ARRAY
24026: PUSH
24027: LD_EXP 116
24031: PUSH
24032: LD_VAR 0 1
24036: ARRAY
24037: UNION
24038: PUSH
24039: FOR_IN
24040: IFFALSE 24073
// if GetTag ( i ) = tag then
24042: LD_VAR 0 4
24046: PPUSH
24047: CALL_OW 110
24051: PUSH
24052: LD_VAR 0 2
24056: EQUAL
24057: IFFALSE 24071
// SetTag ( i , 0 ) ;
24059: LD_VAR 0 4
24063: PPUSH
24064: LD_INT 0
24066: PPUSH
24067: CALL_OW 109
24071: GO 24039
24073: POP
24074: POP
// end ;
24075: LD_VAR 0 3
24079: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
24080: LD_INT 0
24082: PPUSH
24083: PPUSH
24084: PPUSH
24085: PPUSH
24086: PPUSH
24087: PPUSH
24088: PPUSH
24089: PPUSH
// if not mc_bases then
24090: LD_EXP 87
24094: NOT
24095: IFFALSE 24099
// exit ;
24097: GO 24557
// for i = 1 to mc_bases do
24099: LD_ADDR_VAR 0 2
24103: PUSH
24104: DOUBLE
24105: LD_INT 1
24107: DEC
24108: ST_TO_ADDR
24109: LD_EXP 87
24113: PUSH
24114: FOR_TO
24115: IFFALSE 24555
// begin tmp := MC_ClassCheckReq ( i ) ;
24117: LD_ADDR_VAR 0 4
24121: PUSH
24122: LD_VAR 0 2
24126: PPUSH
24127: CALL 24562 0 1
24131: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
24132: LD_ADDR_EXP 128
24136: PUSH
24137: LD_EXP 128
24141: PPUSH
24142: LD_VAR 0 2
24146: PPUSH
24147: LD_VAR 0 4
24151: PPUSH
24152: CALL_OW 1
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 4
24161: NOT
24162: IFFALSE 24166
// continue ;
24164: GO 24114
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
24166: LD_ADDR_VAR 0 6
24170: PUSH
24171: LD_EXP 87
24175: PUSH
24176: LD_VAR 0 2
24180: ARRAY
24181: PPUSH
24182: LD_INT 2
24184: PUSH
24185: LD_INT 30
24187: PUSH
24188: LD_INT 4
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 30
24197: PUSH
24198: LD_INT 5
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: PPUSH
24210: CALL_OW 72
24214: PUSH
24215: LD_EXP 87
24219: PUSH
24220: LD_VAR 0 2
24224: ARRAY
24225: PPUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 30
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 30
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: LIST
24253: PPUSH
24254: CALL_OW 72
24258: PUSH
24259: LD_EXP 87
24263: PUSH
24264: LD_VAR 0 2
24268: ARRAY
24269: PPUSH
24270: LD_INT 30
24272: PUSH
24273: LD_INT 3
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PPUSH
24280: CALL_OW 72
24284: PUSH
24285: LD_EXP 87
24289: PUSH
24290: LD_VAR 0 2
24294: ARRAY
24295: PPUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 30
24301: PUSH
24302: LD_INT 6
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 30
24311: PUSH
24312: LD_INT 7
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 30
24321: PUSH
24322: LD_INT 8
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 72
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
// for j = 1 to 4 do
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: DOUBLE
24352: LD_INT 1
24354: DEC
24355: ST_TO_ADDR
24356: LD_INT 4
24358: PUSH
24359: FOR_TO
24360: IFFALSE 24551
// begin if not tmp [ j ] then
24362: LD_VAR 0 4
24366: PUSH
24367: LD_VAR 0 3
24371: ARRAY
24372: NOT
24373: IFFALSE 24377
// continue ;
24375: GO 24359
// for p in tmp [ j ] do
24377: LD_ADDR_VAR 0 5
24381: PUSH
24382: LD_VAR 0 4
24386: PUSH
24387: LD_VAR 0 3
24391: ARRAY
24392: PUSH
24393: FOR_IN
24394: IFFALSE 24547
// begin if not b [ j ] then
24396: LD_VAR 0 6
24400: PUSH
24401: LD_VAR 0 3
24405: ARRAY
24406: NOT
24407: IFFALSE 24411
// break ;
24409: GO 24547
// e := 0 ;
24411: LD_ADDR_VAR 0 7
24415: PUSH
24416: LD_INT 0
24418: ST_TO_ADDR
// for k in b [ j ] do
24419: LD_ADDR_VAR 0 8
24423: PUSH
24424: LD_VAR 0 6
24428: PUSH
24429: LD_VAR 0 3
24433: ARRAY
24434: PUSH
24435: FOR_IN
24436: IFFALSE 24463
// if IsNotFull ( k ) then
24438: LD_VAR 0 8
24442: PPUSH
24443: CALL 47409 0 1
24447: IFFALSE 24461
// begin e := k ;
24449: LD_ADDR_VAR 0 7
24453: PUSH
24454: LD_VAR 0 8
24458: ST_TO_ADDR
// break ;
24459: GO 24463
// end ;
24461: GO 24435
24463: POP
24464: POP
// if e and not UnitGoingToBuilding ( p , e ) then
24465: LD_VAR 0 7
24469: PUSH
24470: LD_VAR 0 5
24474: PPUSH
24475: LD_VAR 0 7
24479: PPUSH
24480: CALL 79829 0 2
24484: NOT
24485: AND
24486: IFFALSE 24545
// begin if IsInUnit ( p ) then
24488: LD_VAR 0 5
24492: PPUSH
24493: CALL_OW 310
24497: IFFALSE 24508
// ComExitBuilding ( p ) ;
24499: LD_VAR 0 5
24503: PPUSH
24504: CALL_OW 122
// ComEnterUnit ( p , e ) ;
24508: LD_VAR 0 5
24512: PPUSH
24513: LD_VAR 0 7
24517: PPUSH
24518: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
24522: LD_VAR 0 5
24526: PPUSH
24527: LD_VAR 0 3
24531: PPUSH
24532: CALL_OW 183
// AddComExitBuilding ( p ) ;
24536: LD_VAR 0 5
24540: PPUSH
24541: CALL_OW 182
// end ; end ;
24545: GO 24393
24547: POP
24548: POP
// end ;
24549: GO 24359
24551: POP
24552: POP
// end ;
24553: GO 24114
24555: POP
24556: POP
// end ;
24557: LD_VAR 0 1
24561: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
24562: LD_INT 0
24564: PPUSH
24565: PPUSH
24566: PPUSH
24567: PPUSH
24568: PPUSH
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
24574: PPUSH
24575: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
24576: LD_VAR 0 1
24580: NOT
24581: PUSH
24582: LD_EXP 87
24586: PUSH
24587: LD_VAR 0 1
24591: ARRAY
24592: NOT
24593: OR
24594: PUSH
24595: LD_EXP 87
24599: PUSH
24600: LD_VAR 0 1
24604: ARRAY
24605: PPUSH
24606: LD_INT 2
24608: PUSH
24609: LD_INT 30
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 30
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: PPUSH
24634: CALL_OW 72
24638: NOT
24639: OR
24640: IFFALSE 24644
// exit ;
24642: GO 28147
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
24644: LD_ADDR_VAR 0 4
24648: PUSH
24649: LD_EXP 87
24653: PUSH
24654: LD_VAR 0 1
24658: ARRAY
24659: PPUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 25
24665: PUSH
24666: LD_INT 1
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 25
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 25
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 25
24695: PUSH
24696: LD_INT 4
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 25
24705: PUSH
24706: LD_INT 5
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 25
24715: PUSH
24716: LD_INT 8
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 25
24725: PUSH
24726: LD_INT 9
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: PPUSH
24743: CALL_OW 72
24747: ST_TO_ADDR
// if not tmp then
24748: LD_VAR 0 4
24752: NOT
24753: IFFALSE 24757
// exit ;
24755: GO 28147
// for i in tmp do
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: LD_VAR 0 4
24766: PUSH
24767: FOR_IN
24768: IFFALSE 24799
// if GetTag ( i ) then
24770: LD_VAR 0 3
24774: PPUSH
24775: CALL_OW 110
24779: IFFALSE 24797
// tmp := tmp diff i ;
24781: LD_ADDR_VAR 0 4
24785: PUSH
24786: LD_VAR 0 4
24790: PUSH
24791: LD_VAR 0 3
24795: DIFF
24796: ST_TO_ADDR
24797: GO 24767
24799: POP
24800: POP
// if not tmp then
24801: LD_VAR 0 4
24805: NOT
24806: IFFALSE 24810
// exit ;
24808: GO 28147
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
24810: LD_ADDR_VAR 0 5
24814: PUSH
24815: LD_EXP 87
24819: PUSH
24820: LD_VAR 0 1
24824: ARRAY
24825: PPUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 25
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 25
24841: PUSH
24842: LD_INT 5
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 25
24851: PUSH
24852: LD_INT 8
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 25
24861: PUSH
24862: LD_INT 9
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: PPUSH
24876: CALL_OW 72
24880: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
24881: LD_ADDR_VAR 0 6
24885: PUSH
24886: LD_EXP 87
24890: PUSH
24891: LD_VAR 0 1
24895: ARRAY
24896: PPUSH
24897: LD_INT 25
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PPUSH
24907: CALL_OW 72
24911: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
24912: LD_ADDR_VAR 0 7
24916: PUSH
24917: LD_EXP 87
24921: PUSH
24922: LD_VAR 0 1
24926: ARRAY
24927: PPUSH
24928: LD_INT 25
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PPUSH
24938: CALL_OW 72
24942: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
24943: LD_ADDR_VAR 0 8
24947: PUSH
24948: LD_EXP 87
24952: PUSH
24953: LD_VAR 0 1
24957: ARRAY
24958: PPUSH
24959: LD_INT 25
24961: PUSH
24962: LD_INT 4
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 24
24971: PUSH
24972: LD_INT 251
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PPUSH
24983: CALL_OW 72
24987: ST_TO_ADDR
// if mc_scan [ base ] then
24988: LD_EXP 110
24992: PUSH
24993: LD_VAR 0 1
24997: ARRAY
24998: IFFALSE 25459
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
25000: LD_ADDR_EXP 129
25004: PUSH
25005: LD_EXP 129
25009: PPUSH
25010: LD_VAR 0 1
25014: PPUSH
25015: LD_INT 4
25017: PPUSH
25018: CALL_OW 1
25022: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
25023: LD_ADDR_VAR 0 12
25027: PUSH
25028: LD_EXP 87
25032: PUSH
25033: LD_VAR 0 1
25037: ARRAY
25038: PPUSH
25039: LD_INT 2
25041: PUSH
25042: LD_INT 30
25044: PUSH
25045: LD_INT 4
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 30
25054: PUSH
25055: LD_INT 5
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: PPUSH
25067: CALL_OW 72
25071: ST_TO_ADDR
// if not b then
25072: LD_VAR 0 12
25076: NOT
25077: IFFALSE 25081
// exit ;
25079: GO 28147
// p := [ ] ;
25081: LD_ADDR_VAR 0 11
25085: PUSH
25086: EMPTY
25087: ST_TO_ADDR
// if sci >= 2 then
25088: LD_VAR 0 8
25092: PUSH
25093: LD_INT 2
25095: GREATEREQUAL
25096: IFFALSE 25127
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
25098: LD_ADDR_VAR 0 8
25102: PUSH
25103: LD_VAR 0 8
25107: PUSH
25108: LD_INT 1
25110: ARRAY
25111: PUSH
25112: LD_VAR 0 8
25116: PUSH
25117: LD_INT 2
25119: ARRAY
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: ST_TO_ADDR
25125: GO 25188
// if sci = 1 then
25127: LD_VAR 0 8
25131: PUSH
25132: LD_INT 1
25134: EQUAL
25135: IFFALSE 25156
// sci := [ sci [ 1 ] ] else
25137: LD_ADDR_VAR 0 8
25141: PUSH
25142: LD_VAR 0 8
25146: PUSH
25147: LD_INT 1
25149: ARRAY
25150: PUSH
25151: EMPTY
25152: LIST
25153: ST_TO_ADDR
25154: GO 25188
// if sci = 0 then
25156: LD_VAR 0 8
25160: PUSH
25161: LD_INT 0
25163: EQUAL
25164: IFFALSE 25188
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
25166: LD_ADDR_VAR 0 11
25170: PUSH
25171: LD_VAR 0 4
25175: PPUSH
25176: LD_INT 4
25178: PPUSH
25179: CALL 79692 0 2
25183: PUSH
25184: LD_INT 1
25186: ARRAY
25187: ST_TO_ADDR
// if eng > 4 then
25188: LD_VAR 0 6
25192: PUSH
25193: LD_INT 4
25195: GREATER
25196: IFFALSE 25242
// for i = eng downto 4 do
25198: LD_ADDR_VAR 0 3
25202: PUSH
25203: DOUBLE
25204: LD_VAR 0 6
25208: INC
25209: ST_TO_ADDR
25210: LD_INT 4
25212: PUSH
25213: FOR_DOWNTO
25214: IFFALSE 25240
// eng := eng diff eng [ i ] ;
25216: LD_ADDR_VAR 0 6
25220: PUSH
25221: LD_VAR 0 6
25225: PUSH
25226: LD_VAR 0 6
25230: PUSH
25231: LD_VAR 0 3
25235: ARRAY
25236: DIFF
25237: ST_TO_ADDR
25238: GO 25213
25240: POP
25241: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
25242: LD_ADDR_VAR 0 4
25246: PUSH
25247: LD_VAR 0 4
25251: PUSH
25252: LD_VAR 0 5
25256: PUSH
25257: LD_VAR 0 6
25261: UNION
25262: PUSH
25263: LD_VAR 0 7
25267: UNION
25268: PUSH
25269: LD_VAR 0 8
25273: UNION
25274: DIFF
25275: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
25276: LD_ADDR_VAR 0 13
25280: PUSH
25281: LD_EXP 87
25285: PUSH
25286: LD_VAR 0 1
25290: ARRAY
25291: PPUSH
25292: LD_INT 2
25294: PUSH
25295: LD_INT 30
25297: PUSH
25298: LD_INT 32
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 30
25307: PUSH
25308: LD_INT 31
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: LIST
25319: PPUSH
25320: CALL_OW 72
25324: PUSH
25325: LD_EXP 87
25329: PUSH
25330: LD_VAR 0 1
25334: ARRAY
25335: PPUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 30
25341: PUSH
25342: LD_INT 4
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 30
25351: PUSH
25352: LD_INT 5
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: PPUSH
25364: CALL_OW 72
25368: PUSH
25369: LD_INT 6
25371: MUL
25372: PLUS
25373: ST_TO_ADDR
// if bcount < tmp then
25374: LD_VAR 0 13
25378: PUSH
25379: LD_VAR 0 4
25383: LESS
25384: IFFALSE 25430
// for i = tmp downto bcount do
25386: LD_ADDR_VAR 0 3
25390: PUSH
25391: DOUBLE
25392: LD_VAR 0 4
25396: INC
25397: ST_TO_ADDR
25398: LD_VAR 0 13
25402: PUSH
25403: FOR_DOWNTO
25404: IFFALSE 25428
// tmp := Delete ( tmp , tmp ) ;
25406: LD_ADDR_VAR 0 4
25410: PUSH
25411: LD_VAR 0 4
25415: PPUSH
25416: LD_VAR 0 4
25420: PPUSH
25421: CALL_OW 3
25425: ST_TO_ADDR
25426: GO 25403
25428: POP
25429: POP
// result := [ tmp , 0 , 0 , p ] ;
25430: LD_ADDR_VAR 0 2
25434: PUSH
25435: LD_VAR 0 4
25439: PUSH
25440: LD_INT 0
25442: PUSH
25443: LD_INT 0
25445: PUSH
25446: LD_VAR 0 11
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: ST_TO_ADDR
// exit ;
25457: GO 28147
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
25459: LD_EXP 87
25463: PUSH
25464: LD_VAR 0 1
25468: ARRAY
25469: PPUSH
25470: LD_INT 2
25472: PUSH
25473: LD_INT 30
25475: PUSH
25476: LD_INT 6
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 30
25485: PUSH
25486: LD_INT 7
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 30
25495: PUSH
25496: LD_INT 8
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: PPUSH
25509: CALL_OW 72
25513: NOT
25514: PUSH
25515: LD_EXP 87
25519: PUSH
25520: LD_VAR 0 1
25524: ARRAY
25525: PPUSH
25526: LD_INT 30
25528: PUSH
25529: LD_INT 3
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PPUSH
25536: CALL_OW 72
25540: NOT
25541: AND
25542: IFFALSE 25614
// begin if eng = tmp then
25544: LD_VAR 0 6
25548: PUSH
25549: LD_VAR 0 4
25553: EQUAL
25554: IFFALSE 25558
// exit ;
25556: GO 28147
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
25558: LD_ADDR_EXP 129
25562: PUSH
25563: LD_EXP 129
25567: PPUSH
25568: LD_VAR 0 1
25572: PPUSH
25573: LD_INT 1
25575: PPUSH
25576: CALL_OW 1
25580: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: LD_VAR 0 4
25593: PUSH
25594: LD_VAR 0 6
25598: DIFF
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: ST_TO_ADDR
// exit ;
25612: GO 28147
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
25614: LD_EXP 114
25618: PUSH
25619: LD_EXP 113
25623: PUSH
25624: LD_VAR 0 1
25628: ARRAY
25629: ARRAY
25630: PUSH
25631: LD_EXP 87
25635: PUSH
25636: LD_VAR 0 1
25640: ARRAY
25641: PPUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 30
25647: PUSH
25648: LD_INT 6
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: LD_INT 7
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 30
25667: PUSH
25668: LD_INT 8
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: PPUSH
25681: CALL_OW 72
25685: AND
25686: PUSH
25687: LD_EXP 87
25691: PUSH
25692: LD_VAR 0 1
25696: ARRAY
25697: PPUSH
25698: LD_INT 30
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PPUSH
25708: CALL_OW 72
25712: NOT
25713: AND
25714: IFFALSE 25928
// begin if sci >= 6 then
25716: LD_VAR 0 8
25720: PUSH
25721: LD_INT 6
25723: GREATEREQUAL
25724: IFFALSE 25728
// exit ;
25726: GO 28147
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
25728: LD_ADDR_EXP 129
25732: PUSH
25733: LD_EXP 129
25737: PPUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: LD_INT 2
25745: PPUSH
25746: CALL_OW 1
25750: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
25751: LD_ADDR_VAR 0 9
25755: PUSH
25756: LD_VAR 0 4
25760: PUSH
25761: LD_VAR 0 8
25765: DIFF
25766: PPUSH
25767: LD_INT 4
25769: PPUSH
25770: CALL 79692 0 2
25774: ST_TO_ADDR
// p := [ ] ;
25775: LD_ADDR_VAR 0 11
25779: PUSH
25780: EMPTY
25781: ST_TO_ADDR
// if sci < 6 and sort > 6 then
25782: LD_VAR 0 8
25786: PUSH
25787: LD_INT 6
25789: LESS
25790: PUSH
25791: LD_VAR 0 9
25795: PUSH
25796: LD_INT 6
25798: GREATER
25799: AND
25800: IFFALSE 25881
// begin for i = 1 to 6 - sci do
25802: LD_ADDR_VAR 0 3
25806: PUSH
25807: DOUBLE
25808: LD_INT 1
25810: DEC
25811: ST_TO_ADDR
25812: LD_INT 6
25814: PUSH
25815: LD_VAR 0 8
25819: MINUS
25820: PUSH
25821: FOR_TO
25822: IFFALSE 25877
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
25824: LD_ADDR_VAR 0 11
25828: PUSH
25829: LD_VAR 0 11
25833: PPUSH
25834: LD_VAR 0 11
25838: PUSH
25839: LD_INT 1
25841: PLUS
25842: PPUSH
25843: LD_VAR 0 9
25847: PUSH
25848: LD_INT 1
25850: ARRAY
25851: PPUSH
25852: CALL_OW 2
25856: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
25857: LD_ADDR_VAR 0 9
25861: PUSH
25862: LD_VAR 0 9
25866: PPUSH
25867: LD_INT 1
25869: PPUSH
25870: CALL_OW 3
25874: ST_TO_ADDR
// end ;
25875: GO 25821
25877: POP
25878: POP
// end else
25879: GO 25901
// if sort then
25881: LD_VAR 0 9
25885: IFFALSE 25901
// p := sort [ 1 ] ;
25887: LD_ADDR_VAR 0 11
25891: PUSH
25892: LD_VAR 0 9
25896: PUSH
25897: LD_INT 1
25899: ARRAY
25900: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
25901: LD_ADDR_VAR 0 2
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_VAR 0 11
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
// exit ;
25926: GO 28147
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
25928: LD_EXP 114
25932: PUSH
25933: LD_EXP 113
25937: PUSH
25938: LD_VAR 0 1
25942: ARRAY
25943: ARRAY
25944: PUSH
25945: LD_EXP 87
25949: PUSH
25950: LD_VAR 0 1
25954: ARRAY
25955: PPUSH
25956: LD_INT 2
25958: PUSH
25959: LD_INT 30
25961: PUSH
25962: LD_INT 6
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 30
25971: PUSH
25972: LD_INT 7
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 30
25981: PUSH
25982: LD_INT 8
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 72
25999: AND
26000: PUSH
26001: LD_EXP 87
26005: PUSH
26006: LD_VAR 0 1
26010: ARRAY
26011: PPUSH
26012: LD_INT 30
26014: PUSH
26015: LD_INT 3
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: CALL_OW 72
26026: AND
26027: IFFALSE 26761
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
26029: LD_ADDR_EXP 129
26033: PUSH
26034: LD_EXP 129
26038: PPUSH
26039: LD_VAR 0 1
26043: PPUSH
26044: LD_INT 3
26046: PPUSH
26047: CALL_OW 1
26051: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
26052: LD_ADDR_VAR 0 2
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: ST_TO_ADDR
// if not eng then
26075: LD_VAR 0 6
26079: NOT
26080: IFFALSE 26143
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
26082: LD_ADDR_VAR 0 11
26086: PUSH
26087: LD_VAR 0 4
26091: PPUSH
26092: LD_INT 2
26094: PPUSH
26095: CALL 79692 0 2
26099: PUSH
26100: LD_INT 1
26102: ARRAY
26103: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
26104: LD_ADDR_VAR 0 2
26108: PUSH
26109: LD_VAR 0 2
26113: PPUSH
26114: LD_INT 2
26116: PPUSH
26117: LD_VAR 0 11
26121: PPUSH
26122: CALL_OW 1
26126: ST_TO_ADDR
// tmp := tmp diff p ;
26127: LD_ADDR_VAR 0 4
26131: PUSH
26132: LD_VAR 0 4
26136: PUSH
26137: LD_VAR 0 11
26141: DIFF
26142: ST_TO_ADDR
// end ; if tmp and sci < 6 then
26143: LD_VAR 0 4
26147: PUSH
26148: LD_VAR 0 8
26152: PUSH
26153: LD_INT 6
26155: LESS
26156: AND
26157: IFFALSE 26345
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
26159: LD_ADDR_VAR 0 9
26163: PUSH
26164: LD_VAR 0 4
26168: PUSH
26169: LD_VAR 0 8
26173: PUSH
26174: LD_VAR 0 7
26178: UNION
26179: DIFF
26180: PPUSH
26181: LD_INT 4
26183: PPUSH
26184: CALL 79692 0 2
26188: ST_TO_ADDR
// p := [ ] ;
26189: LD_ADDR_VAR 0 11
26193: PUSH
26194: EMPTY
26195: ST_TO_ADDR
// if sort then
26196: LD_VAR 0 9
26200: IFFALSE 26316
// for i = 1 to 6 - sci do
26202: LD_ADDR_VAR 0 3
26206: PUSH
26207: DOUBLE
26208: LD_INT 1
26210: DEC
26211: ST_TO_ADDR
26212: LD_INT 6
26214: PUSH
26215: LD_VAR 0 8
26219: MINUS
26220: PUSH
26221: FOR_TO
26222: IFFALSE 26314
// begin if i = sort then
26224: LD_VAR 0 3
26228: PUSH
26229: LD_VAR 0 9
26233: EQUAL
26234: IFFALSE 26238
// break ;
26236: GO 26314
// if GetClass ( i ) = 4 then
26238: LD_VAR 0 3
26242: PPUSH
26243: CALL_OW 257
26247: PUSH
26248: LD_INT 4
26250: EQUAL
26251: IFFALSE 26255
// continue ;
26253: GO 26221
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26255: LD_ADDR_VAR 0 11
26259: PUSH
26260: LD_VAR 0 11
26264: PPUSH
26265: LD_VAR 0 11
26269: PUSH
26270: LD_INT 1
26272: PLUS
26273: PPUSH
26274: LD_VAR 0 9
26278: PUSH
26279: LD_VAR 0 3
26283: ARRAY
26284: PPUSH
26285: CALL_OW 2
26289: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26290: LD_ADDR_VAR 0 4
26294: PUSH
26295: LD_VAR 0 4
26299: PUSH
26300: LD_VAR 0 9
26304: PUSH
26305: LD_VAR 0 3
26309: ARRAY
26310: DIFF
26311: ST_TO_ADDR
// end ;
26312: GO 26221
26314: POP
26315: POP
// if p then
26316: LD_VAR 0 11
26320: IFFALSE 26345
// result := Replace ( result , 4 , p ) ;
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_VAR 0 2
26331: PPUSH
26332: LD_INT 4
26334: PPUSH
26335: LD_VAR 0 11
26339: PPUSH
26340: CALL_OW 1
26344: ST_TO_ADDR
// end ; if tmp and mech < 6 then
26345: LD_VAR 0 4
26349: PUSH
26350: LD_VAR 0 7
26354: PUSH
26355: LD_INT 6
26357: LESS
26358: AND
26359: IFFALSE 26547
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
26361: LD_ADDR_VAR 0 9
26365: PUSH
26366: LD_VAR 0 4
26370: PUSH
26371: LD_VAR 0 8
26375: PUSH
26376: LD_VAR 0 7
26380: UNION
26381: DIFF
26382: PPUSH
26383: LD_INT 3
26385: PPUSH
26386: CALL 79692 0 2
26390: ST_TO_ADDR
// p := [ ] ;
26391: LD_ADDR_VAR 0 11
26395: PUSH
26396: EMPTY
26397: ST_TO_ADDR
// if sort then
26398: LD_VAR 0 9
26402: IFFALSE 26518
// for i = 1 to 6 - mech do
26404: LD_ADDR_VAR 0 3
26408: PUSH
26409: DOUBLE
26410: LD_INT 1
26412: DEC
26413: ST_TO_ADDR
26414: LD_INT 6
26416: PUSH
26417: LD_VAR 0 7
26421: MINUS
26422: PUSH
26423: FOR_TO
26424: IFFALSE 26516
// begin if i = sort then
26426: LD_VAR 0 3
26430: PUSH
26431: LD_VAR 0 9
26435: EQUAL
26436: IFFALSE 26440
// break ;
26438: GO 26516
// if GetClass ( i ) = 3 then
26440: LD_VAR 0 3
26444: PPUSH
26445: CALL_OW 257
26449: PUSH
26450: LD_INT 3
26452: EQUAL
26453: IFFALSE 26457
// continue ;
26455: GO 26423
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26457: LD_ADDR_VAR 0 11
26461: PUSH
26462: LD_VAR 0 11
26466: PPUSH
26467: LD_VAR 0 11
26471: PUSH
26472: LD_INT 1
26474: PLUS
26475: PPUSH
26476: LD_VAR 0 9
26480: PUSH
26481: LD_VAR 0 3
26485: ARRAY
26486: PPUSH
26487: CALL_OW 2
26491: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26492: LD_ADDR_VAR 0 4
26496: PUSH
26497: LD_VAR 0 4
26501: PUSH
26502: LD_VAR 0 9
26506: PUSH
26507: LD_VAR 0 3
26511: ARRAY
26512: DIFF
26513: ST_TO_ADDR
// end ;
26514: GO 26423
26516: POP
26517: POP
// if p then
26518: LD_VAR 0 11
26522: IFFALSE 26547
// result := Replace ( result , 3 , p ) ;
26524: LD_ADDR_VAR 0 2
26528: PUSH
26529: LD_VAR 0 2
26533: PPUSH
26534: LD_INT 3
26536: PPUSH
26537: LD_VAR 0 11
26541: PPUSH
26542: CALL_OW 1
26546: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
26547: LD_VAR 0 4
26551: PUSH
26552: LD_INT 6
26554: GREATER
26555: PUSH
26556: LD_VAR 0 6
26560: PUSH
26561: LD_INT 6
26563: LESS
26564: AND
26565: IFFALSE 26759
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
26567: LD_ADDR_VAR 0 9
26571: PUSH
26572: LD_VAR 0 4
26576: PUSH
26577: LD_VAR 0 8
26581: PUSH
26582: LD_VAR 0 7
26586: UNION
26587: PUSH
26588: LD_VAR 0 6
26592: UNION
26593: DIFF
26594: PPUSH
26595: LD_INT 2
26597: PPUSH
26598: CALL 79692 0 2
26602: ST_TO_ADDR
// p := [ ] ;
26603: LD_ADDR_VAR 0 11
26607: PUSH
26608: EMPTY
26609: ST_TO_ADDR
// if sort then
26610: LD_VAR 0 9
26614: IFFALSE 26730
// for i = 1 to 6 - eng do
26616: LD_ADDR_VAR 0 3
26620: PUSH
26621: DOUBLE
26622: LD_INT 1
26624: DEC
26625: ST_TO_ADDR
26626: LD_INT 6
26628: PUSH
26629: LD_VAR 0 6
26633: MINUS
26634: PUSH
26635: FOR_TO
26636: IFFALSE 26728
// begin if i = sort then
26638: LD_VAR 0 3
26642: PUSH
26643: LD_VAR 0 9
26647: EQUAL
26648: IFFALSE 26652
// break ;
26650: GO 26728
// if GetClass ( i ) = 2 then
26652: LD_VAR 0 3
26656: PPUSH
26657: CALL_OW 257
26661: PUSH
26662: LD_INT 2
26664: EQUAL
26665: IFFALSE 26669
// continue ;
26667: GO 26635
// p := Insert ( p , p + 1 , sort [ i ] ) ;
26669: LD_ADDR_VAR 0 11
26673: PUSH
26674: LD_VAR 0 11
26678: PPUSH
26679: LD_VAR 0 11
26683: PUSH
26684: LD_INT 1
26686: PLUS
26687: PPUSH
26688: LD_VAR 0 9
26692: PUSH
26693: LD_VAR 0 3
26697: ARRAY
26698: PPUSH
26699: CALL_OW 2
26703: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
26704: LD_ADDR_VAR 0 4
26708: PUSH
26709: LD_VAR 0 4
26713: PUSH
26714: LD_VAR 0 9
26718: PUSH
26719: LD_VAR 0 3
26723: ARRAY
26724: DIFF
26725: ST_TO_ADDR
// end ;
26726: GO 26635
26728: POP
26729: POP
// if p then
26730: LD_VAR 0 11
26734: IFFALSE 26759
// result := Replace ( result , 2 , p ) ;
26736: LD_ADDR_VAR 0 2
26740: PUSH
26741: LD_VAR 0 2
26745: PPUSH
26746: LD_INT 2
26748: PPUSH
26749: LD_VAR 0 11
26753: PPUSH
26754: CALL_OW 1
26758: ST_TO_ADDR
// end ; exit ;
26759: GO 28147
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
26761: LD_EXP 114
26765: PUSH
26766: LD_EXP 113
26770: PUSH
26771: LD_VAR 0 1
26775: ARRAY
26776: ARRAY
26777: NOT
26778: PUSH
26779: LD_EXP 87
26783: PUSH
26784: LD_VAR 0 1
26788: ARRAY
26789: PPUSH
26790: LD_INT 30
26792: PUSH
26793: LD_INT 3
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PPUSH
26800: CALL_OW 72
26804: AND
26805: PUSH
26806: LD_EXP 92
26810: PUSH
26811: LD_VAR 0 1
26815: ARRAY
26816: AND
26817: IFFALSE 27425
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
26819: LD_ADDR_EXP 129
26823: PUSH
26824: LD_EXP 129
26828: PPUSH
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_INT 5
26836: PPUSH
26837: CALL_OW 1
26841: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
26842: LD_ADDR_VAR 0 2
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: ST_TO_ADDR
// if sci > 1 then
26865: LD_VAR 0 8
26869: PUSH
26870: LD_INT 1
26872: GREATER
26873: IFFALSE 26901
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
26875: LD_ADDR_VAR 0 4
26879: PUSH
26880: LD_VAR 0 4
26884: PUSH
26885: LD_VAR 0 8
26889: PUSH
26890: LD_VAR 0 8
26894: PUSH
26895: LD_INT 1
26897: ARRAY
26898: DIFF
26899: DIFF
26900: ST_TO_ADDR
// if tmp and not sci then
26901: LD_VAR 0 4
26905: PUSH
26906: LD_VAR 0 8
26910: NOT
26911: AND
26912: IFFALSE 26981
// begin sort := SortBySkill ( tmp , 4 ) ;
26914: LD_ADDR_VAR 0 9
26918: PUSH
26919: LD_VAR 0 4
26923: PPUSH
26924: LD_INT 4
26926: PPUSH
26927: CALL 79692 0 2
26931: ST_TO_ADDR
// if sort then
26932: LD_VAR 0 9
26936: IFFALSE 26952
// p := sort [ 1 ] ;
26938: LD_ADDR_VAR 0 11
26942: PUSH
26943: LD_VAR 0 9
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: ST_TO_ADDR
// if p then
26952: LD_VAR 0 11
26956: IFFALSE 26981
// result := Replace ( result , 4 , p ) ;
26958: LD_ADDR_VAR 0 2
26962: PUSH
26963: LD_VAR 0 2
26967: PPUSH
26968: LD_INT 4
26970: PPUSH
26971: LD_VAR 0 11
26975: PPUSH
26976: CALL_OW 1
26980: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
26981: LD_ADDR_VAR 0 4
26985: PUSH
26986: LD_VAR 0 4
26990: PUSH
26991: LD_VAR 0 7
26995: DIFF
26996: ST_TO_ADDR
// if tmp and mech < 6 then
26997: LD_VAR 0 4
27001: PUSH
27002: LD_VAR 0 7
27006: PUSH
27007: LD_INT 6
27009: LESS
27010: AND
27011: IFFALSE 27199
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
27013: LD_ADDR_VAR 0 9
27017: PUSH
27018: LD_VAR 0 4
27022: PUSH
27023: LD_VAR 0 8
27027: PUSH
27028: LD_VAR 0 7
27032: UNION
27033: DIFF
27034: PPUSH
27035: LD_INT 3
27037: PPUSH
27038: CALL 79692 0 2
27042: ST_TO_ADDR
// p := [ ] ;
27043: LD_ADDR_VAR 0 11
27047: PUSH
27048: EMPTY
27049: ST_TO_ADDR
// if sort then
27050: LD_VAR 0 9
27054: IFFALSE 27170
// for i = 1 to 6 - mech do
27056: LD_ADDR_VAR 0 3
27060: PUSH
27061: DOUBLE
27062: LD_INT 1
27064: DEC
27065: ST_TO_ADDR
27066: LD_INT 6
27068: PUSH
27069: LD_VAR 0 7
27073: MINUS
27074: PUSH
27075: FOR_TO
27076: IFFALSE 27168
// begin if i = sort then
27078: LD_VAR 0 3
27082: PUSH
27083: LD_VAR 0 9
27087: EQUAL
27088: IFFALSE 27092
// break ;
27090: GO 27168
// if GetClass ( i ) = 3 then
27092: LD_VAR 0 3
27096: PPUSH
27097: CALL_OW 257
27101: PUSH
27102: LD_INT 3
27104: EQUAL
27105: IFFALSE 27109
// continue ;
27107: GO 27075
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27109: LD_ADDR_VAR 0 11
27113: PUSH
27114: LD_VAR 0 11
27118: PPUSH
27119: LD_VAR 0 11
27123: PUSH
27124: LD_INT 1
27126: PLUS
27127: PPUSH
27128: LD_VAR 0 9
27132: PUSH
27133: LD_VAR 0 3
27137: ARRAY
27138: PPUSH
27139: CALL_OW 2
27143: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27144: LD_ADDR_VAR 0 4
27148: PUSH
27149: LD_VAR 0 4
27153: PUSH
27154: LD_VAR 0 9
27158: PUSH
27159: LD_VAR 0 3
27163: ARRAY
27164: DIFF
27165: ST_TO_ADDR
// end ;
27166: GO 27075
27168: POP
27169: POP
// if p then
27170: LD_VAR 0 11
27174: IFFALSE 27199
// result := Replace ( result , 3 , p ) ;
27176: LD_ADDR_VAR 0 2
27180: PUSH
27181: LD_VAR 0 2
27185: PPUSH
27186: LD_INT 3
27188: PPUSH
27189: LD_VAR 0 11
27193: PPUSH
27194: CALL_OW 1
27198: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27199: LD_ADDR_VAR 0 4
27203: PUSH
27204: LD_VAR 0 4
27208: PUSH
27209: LD_VAR 0 6
27213: DIFF
27214: ST_TO_ADDR
// if tmp and eng < 6 then
27215: LD_VAR 0 4
27219: PUSH
27220: LD_VAR 0 6
27224: PUSH
27225: LD_INT 6
27227: LESS
27228: AND
27229: IFFALSE 27423
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
27231: LD_ADDR_VAR 0 9
27235: PUSH
27236: LD_VAR 0 4
27240: PUSH
27241: LD_VAR 0 8
27245: PUSH
27246: LD_VAR 0 7
27250: UNION
27251: PUSH
27252: LD_VAR 0 6
27256: UNION
27257: DIFF
27258: PPUSH
27259: LD_INT 2
27261: PPUSH
27262: CALL 79692 0 2
27266: ST_TO_ADDR
// p := [ ] ;
27267: LD_ADDR_VAR 0 11
27271: PUSH
27272: EMPTY
27273: ST_TO_ADDR
// if sort then
27274: LD_VAR 0 9
27278: IFFALSE 27394
// for i = 1 to 6 - eng do
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: DOUBLE
27286: LD_INT 1
27288: DEC
27289: ST_TO_ADDR
27290: LD_INT 6
27292: PUSH
27293: LD_VAR 0 6
27297: MINUS
27298: PUSH
27299: FOR_TO
27300: IFFALSE 27392
// begin if i = sort then
27302: LD_VAR 0 3
27306: PUSH
27307: LD_VAR 0 9
27311: EQUAL
27312: IFFALSE 27316
// break ;
27314: GO 27392
// if GetClass ( i ) = 2 then
27316: LD_VAR 0 3
27320: PPUSH
27321: CALL_OW 257
27325: PUSH
27326: LD_INT 2
27328: EQUAL
27329: IFFALSE 27333
// continue ;
27331: GO 27299
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27333: LD_ADDR_VAR 0 11
27337: PUSH
27338: LD_VAR 0 11
27342: PPUSH
27343: LD_VAR 0 11
27347: PUSH
27348: LD_INT 1
27350: PLUS
27351: PPUSH
27352: LD_VAR 0 9
27356: PUSH
27357: LD_VAR 0 3
27361: ARRAY
27362: PPUSH
27363: CALL_OW 2
27367: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27368: LD_ADDR_VAR 0 4
27372: PUSH
27373: LD_VAR 0 4
27377: PUSH
27378: LD_VAR 0 9
27382: PUSH
27383: LD_VAR 0 3
27387: ARRAY
27388: DIFF
27389: ST_TO_ADDR
// end ;
27390: GO 27299
27392: POP
27393: POP
// if p then
27394: LD_VAR 0 11
27398: IFFALSE 27423
// result := Replace ( result , 2 , p ) ;
27400: LD_ADDR_VAR 0 2
27404: PUSH
27405: LD_VAR 0 2
27409: PPUSH
27410: LD_INT 2
27412: PPUSH
27413: LD_VAR 0 11
27417: PPUSH
27418: CALL_OW 1
27422: ST_TO_ADDR
// end ; exit ;
27423: GO 28147
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
27425: LD_EXP 114
27429: PUSH
27430: LD_EXP 113
27434: PUSH
27435: LD_VAR 0 1
27439: ARRAY
27440: ARRAY
27441: NOT
27442: PUSH
27443: LD_EXP 87
27447: PUSH
27448: LD_VAR 0 1
27452: ARRAY
27453: PPUSH
27454: LD_INT 30
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PPUSH
27464: CALL_OW 72
27468: AND
27469: PUSH
27470: LD_EXP 92
27474: PUSH
27475: LD_VAR 0 1
27479: ARRAY
27480: NOT
27481: AND
27482: IFFALSE 28147
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
27484: LD_ADDR_EXP 129
27488: PUSH
27489: LD_EXP 129
27493: PPUSH
27494: LD_VAR 0 1
27498: PPUSH
27499: LD_INT 6
27501: PPUSH
27502: CALL_OW 1
27506: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
27507: LD_ADDR_VAR 0 2
27511: PUSH
27512: LD_INT 0
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: ST_TO_ADDR
// if sci >= 1 then
27530: LD_VAR 0 8
27534: PUSH
27535: LD_INT 1
27537: GREATEREQUAL
27538: IFFALSE 27560
// tmp := tmp diff sci [ 1 ] ;
27540: LD_ADDR_VAR 0 4
27544: PUSH
27545: LD_VAR 0 4
27549: PUSH
27550: LD_VAR 0 8
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: DIFF
27559: ST_TO_ADDR
// if tmp and not sci then
27560: LD_VAR 0 4
27564: PUSH
27565: LD_VAR 0 8
27569: NOT
27570: AND
27571: IFFALSE 27640
// begin sort := SortBySkill ( tmp , 4 ) ;
27573: LD_ADDR_VAR 0 9
27577: PUSH
27578: LD_VAR 0 4
27582: PPUSH
27583: LD_INT 4
27585: PPUSH
27586: CALL 79692 0 2
27590: ST_TO_ADDR
// if sort then
27591: LD_VAR 0 9
27595: IFFALSE 27611
// p := sort [ 1 ] ;
27597: LD_ADDR_VAR 0 11
27601: PUSH
27602: LD_VAR 0 9
27606: PUSH
27607: LD_INT 1
27609: ARRAY
27610: ST_TO_ADDR
// if p then
27611: LD_VAR 0 11
27615: IFFALSE 27640
// result := Replace ( result , 4 , p ) ;
27617: LD_ADDR_VAR 0 2
27621: PUSH
27622: LD_VAR 0 2
27626: PPUSH
27627: LD_INT 4
27629: PPUSH
27630: LD_VAR 0 11
27634: PPUSH
27635: CALL_OW 1
27639: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
27640: LD_ADDR_VAR 0 4
27644: PUSH
27645: LD_VAR 0 4
27649: PUSH
27650: LD_VAR 0 7
27654: DIFF
27655: ST_TO_ADDR
// if tmp and mech < 6 then
27656: LD_VAR 0 4
27660: PUSH
27661: LD_VAR 0 7
27665: PUSH
27666: LD_INT 6
27668: LESS
27669: AND
27670: IFFALSE 27852
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
27672: LD_ADDR_VAR 0 9
27676: PUSH
27677: LD_VAR 0 4
27681: PUSH
27682: LD_VAR 0 7
27686: DIFF
27687: PPUSH
27688: LD_INT 3
27690: PPUSH
27691: CALL 79692 0 2
27695: ST_TO_ADDR
// p := [ ] ;
27696: LD_ADDR_VAR 0 11
27700: PUSH
27701: EMPTY
27702: ST_TO_ADDR
// if sort then
27703: LD_VAR 0 9
27707: IFFALSE 27823
// for i = 1 to 6 - mech do
27709: LD_ADDR_VAR 0 3
27713: PUSH
27714: DOUBLE
27715: LD_INT 1
27717: DEC
27718: ST_TO_ADDR
27719: LD_INT 6
27721: PUSH
27722: LD_VAR 0 7
27726: MINUS
27727: PUSH
27728: FOR_TO
27729: IFFALSE 27821
// begin if i = sort then
27731: LD_VAR 0 3
27735: PUSH
27736: LD_VAR 0 9
27740: EQUAL
27741: IFFALSE 27745
// break ;
27743: GO 27821
// if GetClass ( i ) = 3 then
27745: LD_VAR 0 3
27749: PPUSH
27750: CALL_OW 257
27754: PUSH
27755: LD_INT 3
27757: EQUAL
27758: IFFALSE 27762
// continue ;
27760: GO 27728
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27762: LD_ADDR_VAR 0 11
27766: PUSH
27767: LD_VAR 0 11
27771: PPUSH
27772: LD_VAR 0 11
27776: PUSH
27777: LD_INT 1
27779: PLUS
27780: PPUSH
27781: LD_VAR 0 9
27785: PUSH
27786: LD_VAR 0 3
27790: ARRAY
27791: PPUSH
27792: CALL_OW 2
27796: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
27797: LD_ADDR_VAR 0 4
27801: PUSH
27802: LD_VAR 0 4
27806: PUSH
27807: LD_VAR 0 9
27811: PUSH
27812: LD_VAR 0 3
27816: ARRAY
27817: DIFF
27818: ST_TO_ADDR
// end ;
27819: GO 27728
27821: POP
27822: POP
// if p then
27823: LD_VAR 0 11
27827: IFFALSE 27852
// result := Replace ( result , 3 , p ) ;
27829: LD_ADDR_VAR 0 2
27833: PUSH
27834: LD_VAR 0 2
27838: PPUSH
27839: LD_INT 3
27841: PPUSH
27842: LD_VAR 0 11
27846: PPUSH
27847: CALL_OW 1
27851: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
27852: LD_ADDR_VAR 0 4
27856: PUSH
27857: LD_VAR 0 4
27861: PUSH
27862: LD_VAR 0 6
27866: DIFF
27867: ST_TO_ADDR
// if tmp and eng < 4 then
27868: LD_VAR 0 4
27872: PUSH
27873: LD_VAR 0 6
27877: PUSH
27878: LD_INT 4
27880: LESS
27881: AND
27882: IFFALSE 28072
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
27884: LD_ADDR_VAR 0 9
27888: PUSH
27889: LD_VAR 0 4
27893: PUSH
27894: LD_VAR 0 7
27898: PUSH
27899: LD_VAR 0 6
27903: UNION
27904: DIFF
27905: PPUSH
27906: LD_INT 2
27908: PPUSH
27909: CALL 79692 0 2
27913: ST_TO_ADDR
// p := [ ] ;
27914: LD_ADDR_VAR 0 11
27918: PUSH
27919: EMPTY
27920: ST_TO_ADDR
// if sort then
27921: LD_VAR 0 9
27925: IFFALSE 28041
// for i = 1 to 4 - eng do
27927: LD_ADDR_VAR 0 3
27931: PUSH
27932: DOUBLE
27933: LD_INT 1
27935: DEC
27936: ST_TO_ADDR
27937: LD_INT 4
27939: PUSH
27940: LD_VAR 0 6
27944: MINUS
27945: PUSH
27946: FOR_TO
27947: IFFALSE 28039
// begin if i = sort then
27949: LD_VAR 0 3
27953: PUSH
27954: LD_VAR 0 9
27958: EQUAL
27959: IFFALSE 27963
// break ;
27961: GO 28039
// if GetClass ( i ) = 2 then
27963: LD_VAR 0 3
27967: PPUSH
27968: CALL_OW 257
27972: PUSH
27973: LD_INT 2
27975: EQUAL
27976: IFFALSE 27980
// continue ;
27978: GO 27946
// p := Insert ( p , p + 1 , sort [ i ] ) ;
27980: LD_ADDR_VAR 0 11
27984: PUSH
27985: LD_VAR 0 11
27989: PPUSH
27990: LD_VAR 0 11
27994: PUSH
27995: LD_INT 1
27997: PLUS
27998: PPUSH
27999: LD_VAR 0 9
28003: PUSH
28004: LD_VAR 0 3
28008: ARRAY
28009: PPUSH
28010: CALL_OW 2
28014: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
28015: LD_ADDR_VAR 0 4
28019: PUSH
28020: LD_VAR 0 4
28024: PUSH
28025: LD_VAR 0 9
28029: PUSH
28030: LD_VAR 0 3
28034: ARRAY
28035: DIFF
28036: ST_TO_ADDR
// end ;
28037: GO 27946
28039: POP
28040: POP
// if p then
28041: LD_VAR 0 11
28045: IFFALSE 28070
// result := Replace ( result , 2 , p ) ;
28047: LD_ADDR_VAR 0 2
28051: PUSH
28052: LD_VAR 0 2
28056: PPUSH
28057: LD_INT 2
28059: PPUSH
28060: LD_VAR 0 11
28064: PPUSH
28065: CALL_OW 1
28069: ST_TO_ADDR
// end else
28070: GO 28116
// for i = eng downto 5 do
28072: LD_ADDR_VAR 0 3
28076: PUSH
28077: DOUBLE
28078: LD_VAR 0 6
28082: INC
28083: ST_TO_ADDR
28084: LD_INT 5
28086: PUSH
28087: FOR_DOWNTO
28088: IFFALSE 28114
// tmp := tmp union eng [ i ] ;
28090: LD_ADDR_VAR 0 4
28094: PUSH
28095: LD_VAR 0 4
28099: PUSH
28100: LD_VAR 0 6
28104: PUSH
28105: LD_VAR 0 3
28109: ARRAY
28110: UNION
28111: ST_TO_ADDR
28112: GO 28087
28114: POP
28115: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
28116: LD_ADDR_VAR 0 2
28120: PUSH
28121: LD_VAR 0 2
28125: PPUSH
28126: LD_INT 1
28128: PPUSH
28129: LD_VAR 0 4
28133: PUSH
28134: LD_VAR 0 5
28138: DIFF
28139: PPUSH
28140: CALL_OW 1
28144: ST_TO_ADDR
// exit ;
28145: GO 28147
// end ; end ;
28147: LD_VAR 0 2
28151: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
28152: LD_INT 0
28154: PPUSH
28155: PPUSH
28156: PPUSH
// if not mc_bases then
28157: LD_EXP 87
28161: NOT
28162: IFFALSE 28166
// exit ;
28164: GO 28272
// for i = 1 to mc_bases do
28166: LD_ADDR_VAR 0 2
28170: PUSH
28171: DOUBLE
28172: LD_INT 1
28174: DEC
28175: ST_TO_ADDR
28176: LD_EXP 87
28180: PUSH
28181: FOR_TO
28182: IFFALSE 28263
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
28184: LD_ADDR_VAR 0 3
28188: PUSH
28189: LD_EXP 87
28193: PUSH
28194: LD_VAR 0 2
28198: ARRAY
28199: PPUSH
28200: LD_INT 21
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 3
28212: PUSH
28213: LD_INT 24
28215: PUSH
28216: LD_INT 1000
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PPUSH
28231: CALL_OW 72
28235: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
28236: LD_ADDR_EXP 88
28240: PUSH
28241: LD_EXP 88
28245: PPUSH
28246: LD_VAR 0 2
28250: PPUSH
28251: LD_VAR 0 3
28255: PPUSH
28256: CALL_OW 1
28260: ST_TO_ADDR
// end ;
28261: GO 28181
28263: POP
28264: POP
// RaiseSailEvent ( 101 ) ;
28265: LD_INT 101
28267: PPUSH
28268: CALL_OW 427
// end ;
28272: LD_VAR 0 1
28276: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
// if not mc_bases then
28286: LD_EXP 87
28290: NOT
28291: IFFALSE 28295
// exit ;
28293: GO 28857
// for i = 1 to mc_bases do
28295: LD_ADDR_VAR 0 2
28299: PUSH
28300: DOUBLE
28301: LD_INT 1
28303: DEC
28304: ST_TO_ADDR
28305: LD_EXP 87
28309: PUSH
28310: FOR_TO
28311: IFFALSE 28848
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
28313: LD_ADDR_VAR 0 5
28317: PUSH
28318: LD_EXP 87
28322: PUSH
28323: LD_VAR 0 2
28327: ARRAY
28328: PUSH
28329: LD_EXP 116
28333: PUSH
28334: LD_VAR 0 2
28338: ARRAY
28339: UNION
28340: PPUSH
28341: LD_INT 21
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: LD_INT 54
28359: PUSH
28360: EMPTY
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: LD_INT 24
28372: PUSH
28373: LD_INT 800
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PPUSH
28393: CALL_OW 72
28397: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
28398: LD_ADDR_VAR 0 6
28402: PUSH
28403: LD_EXP 87
28407: PUSH
28408: LD_VAR 0 2
28412: ARRAY
28413: PPUSH
28414: LD_INT 21
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 1
28426: PUSH
28427: LD_INT 3
28429: PUSH
28430: LD_INT 54
28432: PUSH
28433: EMPTY
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: LD_INT 24
28445: PUSH
28446: LD_INT 250
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PPUSH
28466: CALL_OW 72
28470: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
28471: LD_ADDR_VAR 0 7
28475: PUSH
28476: LD_VAR 0 5
28480: PUSH
28481: LD_VAR 0 6
28485: DIFF
28486: ST_TO_ADDR
// if not need_heal_1 then
28487: LD_VAR 0 6
28491: NOT
28492: IFFALSE 28525
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
28494: LD_ADDR_EXP 90
28498: PUSH
28499: LD_EXP 90
28503: PPUSH
28504: LD_VAR 0 2
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PPUSH
28516: EMPTY
28517: PPUSH
28518: CALL 50143 0 3
28522: ST_TO_ADDR
28523: GO 28595
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
28525: LD_ADDR_EXP 90
28529: PUSH
28530: LD_EXP 90
28534: PPUSH
28535: LD_VAR 0 2
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PPUSH
28547: LD_EXP 90
28551: PUSH
28552: LD_VAR 0 2
28556: ARRAY
28557: PUSH
28558: LD_INT 1
28560: ARRAY
28561: PPUSH
28562: LD_INT 3
28564: PUSH
28565: LD_INT 24
28567: PUSH
28568: LD_INT 1000
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PPUSH
28579: CALL_OW 72
28583: PUSH
28584: LD_VAR 0 6
28588: UNION
28589: PPUSH
28590: CALL 50143 0 3
28594: ST_TO_ADDR
// if not need_heal_2 then
28595: LD_VAR 0 7
28599: NOT
28600: IFFALSE 28633
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
28602: LD_ADDR_EXP 90
28606: PUSH
28607: LD_EXP 90
28611: PPUSH
28612: LD_VAR 0 2
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PPUSH
28624: EMPTY
28625: PPUSH
28626: CALL 50143 0 3
28630: ST_TO_ADDR
28631: GO 28665
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
28633: LD_ADDR_EXP 90
28637: PUSH
28638: LD_EXP 90
28642: PPUSH
28643: LD_VAR 0 2
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PPUSH
28655: LD_VAR 0 7
28659: PPUSH
28660: CALL 50143 0 3
28664: ST_TO_ADDR
// if need_heal_2 then
28665: LD_VAR 0 7
28669: IFFALSE 28830
// for j in need_heal_2 do
28671: LD_ADDR_VAR 0 3
28675: PUSH
28676: LD_VAR 0 7
28680: PUSH
28681: FOR_IN
28682: IFFALSE 28828
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28684: LD_ADDR_VAR 0 5
28688: PUSH
28689: LD_EXP 87
28693: PUSH
28694: LD_VAR 0 2
28698: ARRAY
28699: PPUSH
28700: LD_INT 2
28702: PUSH
28703: LD_INT 30
28705: PUSH
28706: LD_INT 6
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 30
28715: PUSH
28716: LD_INT 7
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 30
28725: PUSH
28726: LD_INT 8
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 30
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 30
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: PPUSH
28761: CALL_OW 72
28765: ST_TO_ADDR
// if tmp then
28766: LD_VAR 0 5
28770: IFFALSE 28826
// begin k := NearestUnitToUnit ( tmp , j ) ;
28772: LD_ADDR_VAR 0 4
28776: PUSH
28777: LD_VAR 0 5
28781: PPUSH
28782: LD_VAR 0 3
28786: PPUSH
28787: CALL_OW 74
28791: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
28792: LD_VAR 0 3
28796: PPUSH
28797: LD_VAR 0 4
28801: PPUSH
28802: CALL_OW 296
28806: PUSH
28807: LD_INT 5
28809: GREATER
28810: IFFALSE 28826
// ComMoveUnit ( j , k ) ;
28812: LD_VAR 0 3
28816: PPUSH
28817: LD_VAR 0 4
28821: PPUSH
28822: CALL_OW 112
// end ; end ;
28826: GO 28681
28828: POP
28829: POP
// if not need_heal_1 and not need_heal_2 then
28830: LD_VAR 0 6
28834: NOT
28835: PUSH
28836: LD_VAR 0 7
28840: NOT
28841: AND
28842: IFFALSE 28846
// continue ;
28844: GO 28310
// end ;
28846: GO 28310
28848: POP
28849: POP
// RaiseSailEvent ( 102 ) ;
28850: LD_INT 102
28852: PPUSH
28853: CALL_OW 427
// end ;
28857: LD_VAR 0 1
28861: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
28862: LD_INT 0
28864: PPUSH
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
// if not mc_bases then
28872: LD_EXP 87
28876: NOT
28877: IFFALSE 28881
// exit ;
28879: GO 29716
// for i = 1 to mc_bases do
28881: LD_ADDR_VAR 0 2
28885: PUSH
28886: DOUBLE
28887: LD_INT 1
28889: DEC
28890: ST_TO_ADDR
28891: LD_EXP 87
28895: PUSH
28896: FOR_TO
28897: IFFALSE 29714
// begin if not mc_building_need_repair [ i ] then
28899: LD_EXP 88
28903: PUSH
28904: LD_VAR 0 2
28908: ARRAY
28909: NOT
28910: IFFALSE 29084
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
28912: LD_ADDR_VAR 0 6
28916: PUSH
28917: LD_EXP 106
28921: PUSH
28922: LD_VAR 0 2
28926: ARRAY
28927: PPUSH
28928: LD_INT 3
28930: PUSH
28931: LD_INT 24
28933: PUSH
28934: LD_INT 1000
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 2
28947: PUSH
28948: LD_INT 34
28950: PUSH
28951: LD_INT 13
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 34
28960: PUSH
28961: LD_INT 52
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PPUSH
28977: CALL_OW 72
28981: ST_TO_ADDR
// if cranes then
28982: LD_VAR 0 6
28986: IFFALSE 29048
// for j in cranes do
28988: LD_ADDR_VAR 0 3
28992: PUSH
28993: LD_VAR 0 6
28997: PUSH
28998: FOR_IN
28999: IFFALSE 29046
// if not IsInArea ( j , mc_parking [ i ] ) then
29001: LD_VAR 0 3
29005: PPUSH
29006: LD_EXP 111
29010: PUSH
29011: LD_VAR 0 2
29015: ARRAY
29016: PPUSH
29017: CALL_OW 308
29021: NOT
29022: IFFALSE 29044
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29024: LD_VAR 0 3
29028: PPUSH
29029: LD_EXP 111
29033: PUSH
29034: LD_VAR 0 2
29038: ARRAY
29039: PPUSH
29040: CALL_OW 113
29044: GO 28998
29046: POP
29047: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
29048: LD_ADDR_EXP 89
29052: PUSH
29053: LD_EXP 89
29057: PPUSH
29058: LD_VAR 0 2
29062: PPUSH
29063: EMPTY
29064: PPUSH
29065: CALL_OW 1
29069: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
29070: LD_VAR 0 2
29074: PPUSH
29075: LD_INT 101
29077: PPUSH
29078: CALL 23985 0 2
// continue ;
29082: GO 28896
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
29084: LD_ADDR_EXP 93
29088: PUSH
29089: LD_EXP 93
29093: PPUSH
29094: LD_VAR 0 2
29098: PPUSH
29099: EMPTY
29100: PPUSH
29101: CALL_OW 1
29105: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
29106: LD_VAR 0 2
29110: PPUSH
29111: LD_INT 103
29113: PPUSH
29114: CALL 23985 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
29118: LD_ADDR_VAR 0 5
29122: PUSH
29123: LD_EXP 87
29127: PUSH
29128: LD_VAR 0 2
29132: ARRAY
29133: PUSH
29134: LD_EXP 116
29138: PUSH
29139: LD_VAR 0 2
29143: ARRAY
29144: UNION
29145: PPUSH
29146: LD_INT 2
29148: PUSH
29149: LD_INT 25
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 25
29161: PUSH
29162: LD_INT 16
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: PPUSH
29177: CALL_OW 72
29181: PUSH
29182: LD_EXP 90
29186: PUSH
29187: LD_VAR 0 2
29191: ARRAY
29192: PUSH
29193: LD_INT 1
29195: ARRAY
29196: PUSH
29197: LD_EXP 90
29201: PUSH
29202: LD_VAR 0 2
29206: ARRAY
29207: PUSH
29208: LD_INT 2
29210: ARRAY
29211: UNION
29212: DIFF
29213: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
29214: LD_ADDR_VAR 0 6
29218: PUSH
29219: LD_EXP 106
29223: PUSH
29224: LD_VAR 0 2
29228: ARRAY
29229: PPUSH
29230: LD_INT 2
29232: PUSH
29233: LD_INT 34
29235: PUSH
29236: LD_INT 13
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 34
29245: PUSH
29246: LD_INT 52
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: PPUSH
29258: CALL_OW 72
29262: ST_TO_ADDR
// if cranes then
29263: LD_VAR 0 6
29267: IFFALSE 29403
// begin for j in cranes do
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_VAR 0 6
29278: PUSH
29279: FOR_IN
29280: IFFALSE 29401
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
29282: LD_VAR 0 3
29286: PPUSH
29287: CALL_OW 256
29291: PUSH
29292: LD_INT 500
29294: GREATEREQUAL
29295: PUSH
29296: LD_VAR 0 3
29300: PPUSH
29301: CALL_OW 314
29305: NOT
29306: AND
29307: IFFALSE 29341
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
29309: LD_VAR 0 3
29313: PPUSH
29314: LD_EXP 88
29318: PUSH
29319: LD_VAR 0 2
29323: ARRAY
29324: PPUSH
29325: LD_VAR 0 3
29329: PPUSH
29330: CALL_OW 74
29334: PPUSH
29335: CALL_OW 130
29339: GO 29399
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
29341: LD_VAR 0 3
29345: PPUSH
29346: CALL_OW 256
29350: PUSH
29351: LD_INT 500
29353: LESS
29354: PUSH
29355: LD_VAR 0 3
29359: PPUSH
29360: LD_EXP 111
29364: PUSH
29365: LD_VAR 0 2
29369: ARRAY
29370: PPUSH
29371: CALL_OW 308
29375: NOT
29376: AND
29377: IFFALSE 29399
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29379: LD_VAR 0 3
29383: PPUSH
29384: LD_EXP 111
29388: PUSH
29389: LD_VAR 0 2
29393: ARRAY
29394: PPUSH
29395: CALL_OW 113
29399: GO 29279
29401: POP
29402: POP
// end ; if tmp > 3 then
29403: LD_VAR 0 5
29407: PUSH
29408: LD_INT 3
29410: GREATER
29411: IFFALSE 29431
// tmp := ShrinkArray ( tmp , 4 ) ;
29413: LD_ADDR_VAR 0 5
29417: PUSH
29418: LD_VAR 0 5
29422: PPUSH
29423: LD_INT 4
29425: PPUSH
29426: CALL 81369 0 2
29430: ST_TO_ADDR
// if not tmp then
29431: LD_VAR 0 5
29435: NOT
29436: IFFALSE 29440
// continue ;
29438: GO 28896
// for j in tmp do
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_VAR 0 5
29449: PUSH
29450: FOR_IN
29451: IFFALSE 29710
// begin if IsInUnit ( j ) then
29453: LD_VAR 0 3
29457: PPUSH
29458: CALL_OW 310
29462: IFFALSE 29473
// ComExitBuilding ( j ) ;
29464: LD_VAR 0 3
29468: PPUSH
29469: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
29473: LD_VAR 0 3
29477: PUSH
29478: LD_EXP 89
29482: PUSH
29483: LD_VAR 0 2
29487: ARRAY
29488: IN
29489: NOT
29490: IFFALSE 29548
// begin SetTag ( j , 101 ) ;
29492: LD_VAR 0 3
29496: PPUSH
29497: LD_INT 101
29499: PPUSH
29500: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
29504: LD_ADDR_EXP 89
29508: PUSH
29509: LD_EXP 89
29513: PPUSH
29514: LD_VAR 0 2
29518: PUSH
29519: LD_EXP 89
29523: PUSH
29524: LD_VAR 0 2
29528: ARRAY
29529: PUSH
29530: LD_INT 1
29532: PLUS
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PPUSH
29538: LD_VAR 0 3
29542: PPUSH
29543: CALL 50143 0 3
29547: ST_TO_ADDR
// end ; wait ( 1 ) ;
29548: LD_INT 1
29550: PPUSH
29551: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
29555: LD_ADDR_VAR 0 7
29559: PUSH
29560: LD_EXP 88
29564: PUSH
29565: LD_VAR 0 2
29569: ARRAY
29570: ST_TO_ADDR
// if mc_scan [ i ] then
29571: LD_EXP 110
29575: PUSH
29576: LD_VAR 0 2
29580: ARRAY
29581: IFFALSE 29643
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
29583: LD_ADDR_VAR 0 7
29587: PUSH
29588: LD_EXP 88
29592: PUSH
29593: LD_VAR 0 2
29597: ARRAY
29598: PPUSH
29599: LD_INT 3
29601: PUSH
29602: LD_INT 30
29604: PUSH
29605: LD_INT 32
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 30
29614: PUSH
29615: LD_INT 33
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 30
29624: PUSH
29625: LD_INT 31
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: PPUSH
29638: CALL_OW 72
29642: ST_TO_ADDR
// if not to_repair_tmp then
29643: LD_VAR 0 7
29647: NOT
29648: IFFALSE 29652
// continue ;
29650: GO 29450
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
29652: LD_ADDR_VAR 0 8
29656: PUSH
29657: LD_VAR 0 7
29661: PPUSH
29662: LD_VAR 0 3
29666: PPUSH
29667: CALL_OW 74
29671: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
29672: LD_VAR 0 8
29676: PPUSH
29677: LD_INT 16
29679: PPUSH
29680: CALL 52736 0 2
29684: PUSH
29685: LD_INT 4
29687: ARRAY
29688: PUSH
29689: LD_INT 5
29691: LESS
29692: IFFALSE 29708
// ComRepairBuilding ( j , to_repair ) ;
29694: LD_VAR 0 3
29698: PPUSH
29699: LD_VAR 0 8
29703: PPUSH
29704: CALL_OW 130
// end ;
29708: GO 29450
29710: POP
29711: POP
// end ;
29712: GO 28896
29714: POP
29715: POP
// end ;
29716: LD_VAR 0 1
29720: RET
// export function MC_Heal ; var i , j , tmp ; begin
29721: LD_INT 0
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
// if not mc_bases then
29727: LD_EXP 87
29731: NOT
29732: IFFALSE 29736
// exit ;
29734: GO 30138
// for i = 1 to mc_bases do
29736: LD_ADDR_VAR 0 2
29740: PUSH
29741: DOUBLE
29742: LD_INT 1
29744: DEC
29745: ST_TO_ADDR
29746: LD_EXP 87
29750: PUSH
29751: FOR_TO
29752: IFFALSE 30136
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
29754: LD_EXP 90
29758: PUSH
29759: LD_VAR 0 2
29763: ARRAY
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: NOT
29769: PUSH
29770: LD_EXP 90
29774: PUSH
29775: LD_VAR 0 2
29779: ARRAY
29780: PUSH
29781: LD_INT 2
29783: ARRAY
29784: NOT
29785: AND
29786: IFFALSE 29824
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
29788: LD_ADDR_EXP 91
29792: PUSH
29793: LD_EXP 91
29797: PPUSH
29798: LD_VAR 0 2
29802: PPUSH
29803: EMPTY
29804: PPUSH
29805: CALL_OW 1
29809: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
29810: LD_VAR 0 2
29814: PPUSH
29815: LD_INT 102
29817: PPUSH
29818: CALL 23985 0 2
// continue ;
29822: GO 29751
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29824: LD_ADDR_VAR 0 4
29828: PUSH
29829: LD_EXP 87
29833: PUSH
29834: LD_VAR 0 2
29838: ARRAY
29839: PPUSH
29840: LD_INT 25
29842: PUSH
29843: LD_INT 4
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PPUSH
29850: CALL_OW 72
29854: ST_TO_ADDR
// if not tmp then
29855: LD_VAR 0 4
29859: NOT
29860: IFFALSE 29864
// continue ;
29862: GO 29751
// if mc_taming [ i ] then
29864: LD_EXP 118
29868: PUSH
29869: LD_VAR 0 2
29873: ARRAY
29874: IFFALSE 29898
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
29876: LD_ADDR_EXP 118
29880: PUSH
29881: LD_EXP 118
29885: PPUSH
29886: LD_VAR 0 2
29890: PPUSH
29891: EMPTY
29892: PPUSH
29893: CALL_OW 1
29897: ST_TO_ADDR
// for j in tmp do
29898: LD_ADDR_VAR 0 3
29902: PUSH
29903: LD_VAR 0 4
29907: PUSH
29908: FOR_IN
29909: IFFALSE 30132
// begin if IsInUnit ( j ) then
29911: LD_VAR 0 3
29915: PPUSH
29916: CALL_OW 310
29920: IFFALSE 29931
// ComExitBuilding ( j ) ;
29922: LD_VAR 0 3
29926: PPUSH
29927: CALL_OW 122
// if not j in mc_healers [ i ] then
29931: LD_VAR 0 3
29935: PUSH
29936: LD_EXP 91
29940: PUSH
29941: LD_VAR 0 2
29945: ARRAY
29946: IN
29947: NOT
29948: IFFALSE 29994
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
29950: LD_ADDR_EXP 91
29954: PUSH
29955: LD_EXP 91
29959: PPUSH
29960: LD_VAR 0 2
29964: PUSH
29965: LD_EXP 91
29969: PUSH
29970: LD_VAR 0 2
29974: ARRAY
29975: PUSH
29976: LD_INT 1
29978: PLUS
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PPUSH
29984: LD_VAR 0 3
29988: PPUSH
29989: CALL 50143 0 3
29993: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
29994: LD_VAR 0 3
29998: PPUSH
29999: CALL_OW 110
30003: PUSH
30004: LD_INT 102
30006: NONEQUAL
30007: IFFALSE 30021
// SetTag ( j , 102 ) ;
30009: LD_VAR 0 3
30013: PPUSH
30014: LD_INT 102
30016: PPUSH
30017: CALL_OW 109
// Wait ( 3 ) ;
30021: LD_INT 3
30023: PPUSH
30024: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
30028: LD_EXP 90
30032: PUSH
30033: LD_VAR 0 2
30037: ARRAY
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: IFFALSE 30074
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
30044: LD_VAR 0 3
30048: PPUSH
30049: LD_EXP 90
30053: PUSH
30054: LD_VAR 0 2
30058: ARRAY
30059: PUSH
30060: LD_INT 1
30062: ARRAY
30063: PUSH
30064: LD_INT 1
30066: ARRAY
30067: PPUSH
30068: CALL_OW 128
30072: GO 30130
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
30074: LD_VAR 0 3
30078: PPUSH
30079: CALL_OW 314
30083: NOT
30084: PUSH
30085: LD_EXP 90
30089: PUSH
30090: LD_VAR 0 2
30094: ARRAY
30095: PUSH
30096: LD_INT 2
30098: ARRAY
30099: AND
30100: IFFALSE 30130
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
30102: LD_VAR 0 3
30106: PPUSH
30107: LD_EXP 90
30111: PUSH
30112: LD_VAR 0 2
30116: ARRAY
30117: PUSH
30118: LD_INT 2
30120: ARRAY
30121: PUSH
30122: LD_INT 1
30124: ARRAY
30125: PPUSH
30126: CALL_OW 128
// end ;
30130: GO 29908
30132: POP
30133: POP
// end ;
30134: GO 29751
30136: POP
30137: POP
// end ;
30138: LD_VAR 0 1
30142: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
30143: LD_INT 0
30145: PPUSH
30146: PPUSH
30147: PPUSH
30148: PPUSH
30149: PPUSH
// if not mc_bases then
30150: LD_EXP 87
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 31302
// for i = 1 to mc_bases do
30159: LD_ADDR_VAR 0 2
30163: PUSH
30164: DOUBLE
30165: LD_INT 1
30167: DEC
30168: ST_TO_ADDR
30169: LD_EXP 87
30173: PUSH
30174: FOR_TO
30175: IFFALSE 31300
// begin if mc_scan [ i ] then
30177: LD_EXP 110
30181: PUSH
30182: LD_VAR 0 2
30186: ARRAY
30187: IFFALSE 30191
// continue ;
30189: GO 30174
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
30191: LD_EXP 92
30195: PUSH
30196: LD_VAR 0 2
30200: ARRAY
30201: NOT
30202: PUSH
30203: LD_EXP 94
30207: PUSH
30208: LD_VAR 0 2
30212: ARRAY
30213: NOT
30214: AND
30215: PUSH
30216: LD_EXP 93
30220: PUSH
30221: LD_VAR 0 2
30225: ARRAY
30226: AND
30227: IFFALSE 30265
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
30229: LD_ADDR_EXP 93
30233: PUSH
30234: LD_EXP 93
30238: PPUSH
30239: LD_VAR 0 2
30243: PPUSH
30244: EMPTY
30245: PPUSH
30246: CALL_OW 1
30250: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
30251: LD_VAR 0 2
30255: PPUSH
30256: LD_INT 103
30258: PPUSH
30259: CALL 23985 0 2
// continue ;
30263: GO 30174
// end ; if mc_construct_list [ i ] then
30265: LD_EXP 94
30269: PUSH
30270: LD_VAR 0 2
30274: ARRAY
30275: IFFALSE 30495
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30277: LD_ADDR_VAR 0 4
30281: PUSH
30282: LD_EXP 87
30286: PUSH
30287: LD_VAR 0 2
30291: ARRAY
30292: PPUSH
30293: LD_INT 25
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PPUSH
30303: CALL_OW 72
30307: PUSH
30308: LD_EXP 89
30312: PUSH
30313: LD_VAR 0 2
30317: ARRAY
30318: DIFF
30319: ST_TO_ADDR
// if not tmp then
30320: LD_VAR 0 4
30324: NOT
30325: IFFALSE 30329
// continue ;
30327: GO 30174
// for j in tmp do
30329: LD_ADDR_VAR 0 3
30333: PUSH
30334: LD_VAR 0 4
30338: PUSH
30339: FOR_IN
30340: IFFALSE 30491
// begin if not mc_builders [ i ] then
30342: LD_EXP 93
30346: PUSH
30347: LD_VAR 0 2
30351: ARRAY
30352: NOT
30353: IFFALSE 30411
// begin SetTag ( j , 103 ) ;
30355: LD_VAR 0 3
30359: PPUSH
30360: LD_INT 103
30362: PPUSH
30363: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
30367: LD_ADDR_EXP 93
30371: PUSH
30372: LD_EXP 93
30376: PPUSH
30377: LD_VAR 0 2
30381: PUSH
30382: LD_EXP 93
30386: PUSH
30387: LD_VAR 0 2
30391: ARRAY
30392: PUSH
30393: LD_INT 1
30395: PLUS
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PPUSH
30401: LD_VAR 0 3
30405: PPUSH
30406: CALL 50143 0 3
30410: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
30411: LD_VAR 0 3
30415: PPUSH
30416: CALL_OW 310
30420: IFFALSE 30431
// ComExitBuilding ( j ) ;
30422: LD_VAR 0 3
30426: PPUSH
30427: CALL_OW 122
// wait ( 3 ) ;
30431: LD_INT 3
30433: PPUSH
30434: CALL_OW 67
// if not mc_construct_list [ i ] then
30438: LD_EXP 94
30442: PUSH
30443: LD_VAR 0 2
30447: ARRAY
30448: NOT
30449: IFFALSE 30453
// break ;
30451: GO 30491
// if not HasTask ( j ) then
30453: LD_VAR 0 3
30457: PPUSH
30458: CALL_OW 314
30462: NOT
30463: IFFALSE 30489
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
30465: LD_VAR 0 3
30469: PPUSH
30470: LD_EXP 94
30474: PUSH
30475: LD_VAR 0 2
30479: ARRAY
30480: PUSH
30481: LD_INT 1
30483: ARRAY
30484: PPUSH
30485: CALL 52994 0 2
// end ;
30489: GO 30339
30491: POP
30492: POP
// end else
30493: GO 31298
// if mc_build_list [ i ] then
30495: LD_EXP 92
30499: PUSH
30500: LD_VAR 0 2
30504: ARRAY
30505: IFFALSE 31298
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
30507: LD_ADDR_VAR 0 5
30511: PUSH
30512: LD_EXP 87
30516: PUSH
30517: LD_VAR 0 2
30521: ARRAY
30522: PPUSH
30523: LD_INT 2
30525: PUSH
30526: LD_INT 30
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 30
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: PPUSH
30551: CALL_OW 72
30555: ST_TO_ADDR
// if depot then
30556: LD_VAR 0 5
30560: IFFALSE 30578
// depot := depot [ 1 ] else
30562: LD_ADDR_VAR 0 5
30566: PUSH
30567: LD_VAR 0 5
30571: PUSH
30572: LD_INT 1
30574: ARRAY
30575: ST_TO_ADDR
30576: GO 30586
// depot := 0 ;
30578: LD_ADDR_VAR 0 5
30582: PUSH
30583: LD_INT 0
30585: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
30586: LD_EXP 92
30590: PUSH
30591: LD_VAR 0 2
30595: ARRAY
30596: PUSH
30597: LD_INT 1
30599: ARRAY
30600: PUSH
30601: LD_INT 1
30603: ARRAY
30604: PPUSH
30605: CALL 52824 0 1
30609: PUSH
30610: LD_EXP 87
30614: PUSH
30615: LD_VAR 0 2
30619: ARRAY
30620: PPUSH
30621: LD_INT 2
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: LD_INT 2
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 30
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: LIST
30648: PPUSH
30649: CALL_OW 72
30653: NOT
30654: AND
30655: IFFALSE 30760
// begin for j = 1 to mc_build_list [ i ] do
30657: LD_ADDR_VAR 0 3
30661: PUSH
30662: DOUBLE
30663: LD_INT 1
30665: DEC
30666: ST_TO_ADDR
30667: LD_EXP 92
30671: PUSH
30672: LD_VAR 0 2
30676: ARRAY
30677: PUSH
30678: FOR_TO
30679: IFFALSE 30758
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
30681: LD_EXP 92
30685: PUSH
30686: LD_VAR 0 2
30690: ARRAY
30691: PUSH
30692: LD_VAR 0 3
30696: ARRAY
30697: PUSH
30698: LD_INT 1
30700: ARRAY
30701: PUSH
30702: LD_INT 2
30704: EQUAL
30705: IFFALSE 30756
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
30707: LD_ADDR_EXP 92
30711: PUSH
30712: LD_EXP 92
30716: PPUSH
30717: LD_VAR 0 2
30721: PPUSH
30722: LD_EXP 92
30726: PUSH
30727: LD_VAR 0 2
30731: ARRAY
30732: PPUSH
30733: LD_VAR 0 3
30737: PPUSH
30738: LD_INT 1
30740: PPUSH
30741: LD_INT 0
30743: PPUSH
30744: CALL 49561 0 4
30748: PPUSH
30749: CALL_OW 1
30753: ST_TO_ADDR
// break ;
30754: GO 30758
// end ;
30756: GO 30678
30758: POP
30759: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
30760: LD_EXP 92
30764: PUSH
30765: LD_VAR 0 2
30769: ARRAY
30770: PUSH
30771: LD_INT 1
30773: ARRAY
30774: PUSH
30775: LD_INT 1
30777: ARRAY
30778: PUSH
30779: LD_INT 0
30781: EQUAL
30782: PUSH
30783: LD_VAR 0 5
30787: PUSH
30788: LD_VAR 0 5
30792: PPUSH
30793: LD_EXP 92
30797: PUSH
30798: LD_VAR 0 2
30802: ARRAY
30803: PUSH
30804: LD_INT 1
30806: ARRAY
30807: PUSH
30808: LD_INT 1
30810: ARRAY
30811: PPUSH
30812: LD_EXP 92
30816: PUSH
30817: LD_VAR 0 2
30821: ARRAY
30822: PUSH
30823: LD_INT 1
30825: ARRAY
30826: PUSH
30827: LD_INT 2
30829: ARRAY
30830: PPUSH
30831: LD_EXP 92
30835: PUSH
30836: LD_VAR 0 2
30840: ARRAY
30841: PUSH
30842: LD_INT 1
30844: ARRAY
30845: PUSH
30846: LD_INT 3
30848: ARRAY
30849: PPUSH
30850: LD_EXP 92
30854: PUSH
30855: LD_VAR 0 2
30859: ARRAY
30860: PUSH
30861: LD_INT 1
30863: ARRAY
30864: PUSH
30865: LD_INT 4
30867: ARRAY
30868: PPUSH
30869: CALL 57558 0 5
30873: AND
30874: OR
30875: IFFALSE 31156
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
30877: LD_ADDR_VAR 0 4
30881: PUSH
30882: LD_EXP 87
30886: PUSH
30887: LD_VAR 0 2
30891: ARRAY
30892: PPUSH
30893: LD_INT 25
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PPUSH
30903: CALL_OW 72
30907: PUSH
30908: LD_EXP 89
30912: PUSH
30913: LD_VAR 0 2
30917: ARRAY
30918: DIFF
30919: ST_TO_ADDR
// if not tmp then
30920: LD_VAR 0 4
30924: NOT
30925: IFFALSE 30929
// continue ;
30927: GO 30174
// for j in tmp do
30929: LD_ADDR_VAR 0 3
30933: PUSH
30934: LD_VAR 0 4
30938: PUSH
30939: FOR_IN
30940: IFFALSE 31152
// begin if not mc_builders [ i ] then
30942: LD_EXP 93
30946: PUSH
30947: LD_VAR 0 2
30951: ARRAY
30952: NOT
30953: IFFALSE 31011
// begin SetTag ( j , 103 ) ;
30955: LD_VAR 0 3
30959: PPUSH
30960: LD_INT 103
30962: PPUSH
30963: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
30967: LD_ADDR_EXP 93
30971: PUSH
30972: LD_EXP 93
30976: PPUSH
30977: LD_VAR 0 2
30981: PUSH
30982: LD_EXP 93
30986: PUSH
30987: LD_VAR 0 2
30991: ARRAY
30992: PUSH
30993: LD_INT 1
30995: PLUS
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PPUSH
31001: LD_VAR 0 3
31005: PPUSH
31006: CALL 50143 0 3
31010: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
31011: LD_VAR 0 3
31015: PPUSH
31016: CALL_OW 310
31020: IFFALSE 31031
// ComExitBuilding ( j ) ;
31022: LD_VAR 0 3
31026: PPUSH
31027: CALL_OW 122
// wait ( 3 ) ;
31031: LD_INT 3
31033: PPUSH
31034: CALL_OW 67
// if not mc_build_list [ i ] then
31038: LD_EXP 92
31042: PUSH
31043: LD_VAR 0 2
31047: ARRAY
31048: NOT
31049: IFFALSE 31053
// break ;
31051: GO 31152
// if not HasTask ( j ) then
31053: LD_VAR 0 3
31057: PPUSH
31058: CALL_OW 314
31062: NOT
31063: IFFALSE 31150
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
31065: LD_VAR 0 3
31069: PPUSH
31070: LD_EXP 92
31074: PUSH
31075: LD_VAR 0 2
31079: ARRAY
31080: PUSH
31081: LD_INT 1
31083: ARRAY
31084: PUSH
31085: LD_INT 1
31087: ARRAY
31088: PPUSH
31089: LD_EXP 92
31093: PUSH
31094: LD_VAR 0 2
31098: ARRAY
31099: PUSH
31100: LD_INT 1
31102: ARRAY
31103: PUSH
31104: LD_INT 2
31106: ARRAY
31107: PPUSH
31108: LD_EXP 92
31112: PUSH
31113: LD_VAR 0 2
31117: ARRAY
31118: PUSH
31119: LD_INT 1
31121: ARRAY
31122: PUSH
31123: LD_INT 3
31125: ARRAY
31126: PPUSH
31127: LD_EXP 92
31131: PUSH
31132: LD_VAR 0 2
31136: ARRAY
31137: PUSH
31138: LD_INT 1
31140: ARRAY
31141: PUSH
31142: LD_INT 4
31144: ARRAY
31145: PPUSH
31146: CALL_OW 145
// end ;
31150: GO 30939
31152: POP
31153: POP
// end else
31154: GO 31298
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
31156: LD_EXP 87
31160: PUSH
31161: LD_VAR 0 2
31165: ARRAY
31166: PPUSH
31167: LD_EXP 92
31171: PUSH
31172: LD_VAR 0 2
31176: ARRAY
31177: PUSH
31178: LD_INT 1
31180: ARRAY
31181: PUSH
31182: LD_INT 1
31184: ARRAY
31185: PPUSH
31186: LD_EXP 92
31190: PUSH
31191: LD_VAR 0 2
31195: ARRAY
31196: PUSH
31197: LD_INT 1
31199: ARRAY
31200: PUSH
31201: LD_INT 2
31203: ARRAY
31204: PPUSH
31205: LD_EXP 92
31209: PUSH
31210: LD_VAR 0 2
31214: ARRAY
31215: PUSH
31216: LD_INT 1
31218: ARRAY
31219: PUSH
31220: LD_INT 3
31222: ARRAY
31223: PPUSH
31224: LD_EXP 92
31228: PUSH
31229: LD_VAR 0 2
31233: ARRAY
31234: PUSH
31235: LD_INT 1
31237: ARRAY
31238: PUSH
31239: LD_INT 4
31241: ARRAY
31242: PPUSH
31243: CALL 56894 0 5
31247: NOT
31248: IFFALSE 31298
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
31250: LD_ADDR_EXP 92
31254: PUSH
31255: LD_EXP 92
31259: PPUSH
31260: LD_VAR 0 2
31264: PPUSH
31265: LD_EXP 92
31269: PUSH
31270: LD_VAR 0 2
31274: ARRAY
31275: PPUSH
31276: LD_INT 1
31278: PPUSH
31279: LD_INT 1
31281: NEG
31282: PPUSH
31283: LD_INT 0
31285: PPUSH
31286: CALL 49561 0 4
31290: PPUSH
31291: CALL_OW 1
31295: ST_TO_ADDR
// continue ;
31296: GO 30174
// end ; end ; end ;
31298: GO 30174
31300: POP
31301: POP
// end ;
31302: LD_VAR 0 1
31306: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
31307: LD_INT 0
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
// if not mc_bases then
31315: LD_EXP 87
31319: NOT
31320: IFFALSE 31324
// exit ;
31322: GO 31751
// for i = 1 to mc_bases do
31324: LD_ADDR_VAR 0 2
31328: PUSH
31329: DOUBLE
31330: LD_INT 1
31332: DEC
31333: ST_TO_ADDR
31334: LD_EXP 87
31338: PUSH
31339: FOR_TO
31340: IFFALSE 31749
// begin tmp := mc_build_upgrade [ i ] ;
31342: LD_ADDR_VAR 0 4
31346: PUSH
31347: LD_EXP 119
31351: PUSH
31352: LD_VAR 0 2
31356: ARRAY
31357: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
31358: LD_ADDR_VAR 0 6
31362: PUSH
31363: LD_EXP 120
31367: PUSH
31368: LD_VAR 0 2
31372: ARRAY
31373: PPUSH
31374: LD_INT 2
31376: PUSH
31377: LD_INT 30
31379: PUSH
31380: LD_INT 6
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 30
31389: PUSH
31390: LD_INT 7
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: LIST
31401: PPUSH
31402: CALL_OW 72
31406: ST_TO_ADDR
// if not tmp and not lab then
31407: LD_VAR 0 4
31411: NOT
31412: PUSH
31413: LD_VAR 0 6
31417: NOT
31418: AND
31419: IFFALSE 31423
// continue ;
31421: GO 31339
// if tmp then
31423: LD_VAR 0 4
31427: IFFALSE 31547
// for j in tmp do
31429: LD_ADDR_VAR 0 3
31433: PUSH
31434: LD_VAR 0 4
31438: PUSH
31439: FOR_IN
31440: IFFALSE 31545
// begin if UpgradeCost ( j ) then
31442: LD_VAR 0 3
31446: PPUSH
31447: CALL 56554 0 1
31451: IFFALSE 31543
// begin ComUpgrade ( j ) ;
31453: LD_VAR 0 3
31457: PPUSH
31458: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
31462: LD_ADDR_EXP 119
31466: PUSH
31467: LD_EXP 119
31471: PPUSH
31472: LD_VAR 0 2
31476: PPUSH
31477: LD_EXP 119
31481: PUSH
31482: LD_VAR 0 2
31486: ARRAY
31487: PUSH
31488: LD_VAR 0 3
31492: DIFF
31493: PPUSH
31494: CALL_OW 1
31498: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
31499: LD_ADDR_EXP 94
31503: PUSH
31504: LD_EXP 94
31508: PPUSH
31509: LD_VAR 0 2
31513: PUSH
31514: LD_EXP 94
31518: PUSH
31519: LD_VAR 0 2
31523: ARRAY
31524: PUSH
31525: LD_INT 1
31527: PLUS
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PPUSH
31533: LD_VAR 0 3
31537: PPUSH
31538: CALL 50143 0 3
31542: ST_TO_ADDR
// end ; end ;
31543: GO 31439
31545: POP
31546: POP
// if not lab or not mc_lab_upgrade [ i ] then
31547: LD_VAR 0 6
31551: NOT
31552: PUSH
31553: LD_EXP 121
31557: PUSH
31558: LD_VAR 0 2
31562: ARRAY
31563: NOT
31564: OR
31565: IFFALSE 31569
// continue ;
31567: GO 31339
// for j in lab do
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_VAR 0 6
31578: PUSH
31579: FOR_IN
31580: IFFALSE 31745
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
31582: LD_VAR 0 3
31586: PPUSH
31587: CALL_OW 266
31591: PUSH
31592: LD_INT 6
31594: PUSH
31595: LD_INT 7
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: IN
31602: PUSH
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 461
31612: PUSH
31613: LD_INT 1
31615: NONEQUAL
31616: AND
31617: IFFALSE 31743
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
31619: LD_VAR 0 3
31623: PPUSH
31624: LD_EXP 121
31628: PUSH
31629: LD_VAR 0 2
31633: ARRAY
31634: PUSH
31635: LD_INT 1
31637: ARRAY
31638: PPUSH
31639: CALL 56759 0 2
31643: IFFALSE 31743
// begin ComCancel ( j ) ;
31645: LD_VAR 0 3
31649: PPUSH
31650: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
31654: LD_VAR 0 3
31658: PPUSH
31659: LD_EXP 121
31663: PUSH
31664: LD_VAR 0 2
31668: ARRAY
31669: PUSH
31670: LD_INT 1
31672: ARRAY
31673: PPUSH
31674: CALL_OW 207
// if not j in mc_construct_list [ i ] then
31678: LD_VAR 0 3
31682: PUSH
31683: LD_EXP 94
31687: PUSH
31688: LD_VAR 0 2
31692: ARRAY
31693: IN
31694: NOT
31695: IFFALSE 31741
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
31697: LD_ADDR_EXP 94
31701: PUSH
31702: LD_EXP 94
31706: PPUSH
31707: LD_VAR 0 2
31711: PUSH
31712: LD_EXP 94
31716: PUSH
31717: LD_VAR 0 2
31721: ARRAY
31722: PUSH
31723: LD_INT 1
31725: PLUS
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PPUSH
31731: LD_VAR 0 3
31735: PPUSH
31736: CALL 50143 0 3
31740: ST_TO_ADDR
// break ;
31741: GO 31745
// end ; end ; end ;
31743: GO 31579
31745: POP
31746: POP
// end ;
31747: GO 31339
31749: POP
31750: POP
// end ;
31751: LD_VAR 0 1
31755: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
31756: LD_INT 0
31758: PPUSH
31759: PPUSH
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
// if not mc_bases then
31767: LD_EXP 87
31771: NOT
31772: IFFALSE 31776
// exit ;
31774: GO 32181
// for i = 1 to mc_bases do
31776: LD_ADDR_VAR 0 2
31780: PUSH
31781: DOUBLE
31782: LD_INT 1
31784: DEC
31785: ST_TO_ADDR
31786: LD_EXP 87
31790: PUSH
31791: FOR_TO
31792: IFFALSE 32179
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
31794: LD_EXP 95
31798: PUSH
31799: LD_VAR 0 2
31803: ARRAY
31804: NOT
31805: PUSH
31806: LD_EXP 87
31810: PUSH
31811: LD_VAR 0 2
31815: ARRAY
31816: PPUSH
31817: LD_INT 30
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PPUSH
31827: CALL_OW 72
31831: NOT
31832: OR
31833: IFFALSE 31837
// continue ;
31835: GO 31791
// busy := false ;
31837: LD_ADDR_VAR 0 8
31841: PUSH
31842: LD_INT 0
31844: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31845: LD_ADDR_VAR 0 4
31849: PUSH
31850: LD_EXP 87
31854: PUSH
31855: LD_VAR 0 2
31859: ARRAY
31860: PPUSH
31861: LD_INT 30
31863: PUSH
31864: LD_INT 3
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PPUSH
31871: CALL_OW 72
31875: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
31876: LD_ADDR_VAR 0 6
31880: PUSH
31881: LD_EXP 95
31885: PUSH
31886: LD_VAR 0 2
31890: ARRAY
31891: PPUSH
31892: LD_INT 2
31894: PUSH
31895: LD_INT 30
31897: PUSH
31898: LD_INT 32
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 30
31907: PUSH
31908: LD_INT 33
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: PPUSH
31920: CALL_OW 72
31924: ST_TO_ADDR
// if not t then
31925: LD_VAR 0 6
31929: NOT
31930: IFFALSE 31934
// continue ;
31932: GO 31791
// for j in tmp do
31934: LD_ADDR_VAR 0 3
31938: PUSH
31939: LD_VAR 0 4
31943: PUSH
31944: FOR_IN
31945: IFFALSE 31975
// if not BuildingStatus ( j ) = bs_idle then
31947: LD_VAR 0 3
31951: PPUSH
31952: CALL_OW 461
31956: PUSH
31957: LD_INT 2
31959: EQUAL
31960: NOT
31961: IFFALSE 31973
// begin busy := true ;
31963: LD_ADDR_VAR 0 8
31967: PUSH
31968: LD_INT 1
31970: ST_TO_ADDR
// break ;
31971: GO 31975
// end ;
31973: GO 31944
31975: POP
31976: POP
// if busy then
31977: LD_VAR 0 8
31981: IFFALSE 31985
// continue ;
31983: GO 31791
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
31985: LD_ADDR_VAR 0 7
31989: PUSH
31990: LD_VAR 0 6
31994: PPUSH
31995: LD_INT 35
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PPUSH
32005: CALL_OW 72
32009: ST_TO_ADDR
// if tw then
32010: LD_VAR 0 7
32014: IFFALSE 32091
// begin tw := tw [ 1 ] ;
32016: LD_ADDR_VAR 0 7
32020: PUSH
32021: LD_VAR 0 7
32025: PUSH
32026: LD_INT 1
32028: ARRAY
32029: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_VAR 0 7
32039: PPUSH
32040: LD_EXP 112
32044: PUSH
32045: LD_VAR 0 2
32049: ARRAY
32050: PPUSH
32051: CALL 55113 0 2
32055: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
32056: LD_EXP 126
32060: PUSH
32061: LD_VAR 0 2
32065: ARRAY
32066: IFFALSE 32089
// if not weapon in mc_allowed_tower_weapons [ i ] then
32068: LD_VAR 0 9
32072: PUSH
32073: LD_EXP 126
32077: PUSH
32078: LD_VAR 0 2
32082: ARRAY
32083: IN
32084: NOT
32085: IFFALSE 32089
// continue ;
32087: GO 31791
// end else
32089: GO 32154
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
32091: LD_ADDR_VAR 0 5
32095: PUSH
32096: LD_EXP 95
32100: PUSH
32101: LD_VAR 0 2
32105: ARRAY
32106: PPUSH
32107: LD_VAR 0 4
32111: PPUSH
32112: CALL 80615 0 2
32116: ST_TO_ADDR
// if not tmp2 then
32117: LD_VAR 0 5
32121: NOT
32122: IFFALSE 32126
// continue ;
32124: GO 31791
// tw := tmp2 [ 1 ] ;
32126: LD_ADDR_VAR 0 7
32130: PUSH
32131: LD_VAR 0 5
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
32140: LD_ADDR_VAR 0 9
32144: PUSH
32145: LD_VAR 0 5
32149: PUSH
32150: LD_INT 2
32152: ARRAY
32153: ST_TO_ADDR
// end ; if not weapon then
32154: LD_VAR 0 9
32158: NOT
32159: IFFALSE 32163
// continue ;
32161: GO 31791
// ComPlaceWeapon ( tw , weapon ) ;
32163: LD_VAR 0 7
32167: PPUSH
32168: LD_VAR 0 9
32172: PPUSH
32173: CALL_OW 148
// end ;
32177: GO 31791
32179: POP
32180: POP
// end ;
32181: LD_VAR 0 1
32185: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
32186: LD_INT 0
32188: PPUSH
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
32193: PPUSH
// if not mc_bases then
32194: LD_EXP 87
32198: NOT
32199: IFFALSE 32203
// exit ;
32201: GO 32979
// for i = 1 to mc_bases do
32203: LD_ADDR_VAR 0 2
32207: PUSH
32208: DOUBLE
32209: LD_INT 1
32211: DEC
32212: ST_TO_ADDR
32213: LD_EXP 87
32217: PUSH
32218: FOR_TO
32219: IFFALSE 32977
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
32221: LD_EXP 100
32225: PUSH
32226: LD_VAR 0 2
32230: ARRAY
32231: NOT
32232: PUSH
32233: LD_EXP 100
32237: PUSH
32238: LD_VAR 0 2
32242: ARRAY
32243: PUSH
32244: LD_EXP 101
32248: PUSH
32249: LD_VAR 0 2
32253: ARRAY
32254: EQUAL
32255: OR
32256: PUSH
32257: LD_EXP 110
32261: PUSH
32262: LD_VAR 0 2
32266: ARRAY
32267: OR
32268: IFFALSE 32272
// continue ;
32270: GO 32218
// if mc_miners [ i ] then
32272: LD_EXP 101
32276: PUSH
32277: LD_VAR 0 2
32281: ARRAY
32282: IFFALSE 32664
// begin for j = mc_miners [ i ] downto 1 do
32284: LD_ADDR_VAR 0 3
32288: PUSH
32289: DOUBLE
32290: LD_EXP 101
32294: PUSH
32295: LD_VAR 0 2
32299: ARRAY
32300: INC
32301: ST_TO_ADDR
32302: LD_INT 1
32304: PUSH
32305: FOR_DOWNTO
32306: IFFALSE 32662
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
32308: LD_EXP 101
32312: PUSH
32313: LD_VAR 0 2
32317: ARRAY
32318: PUSH
32319: LD_VAR 0 3
32323: ARRAY
32324: PPUSH
32325: CALL_OW 301
32329: PUSH
32330: LD_EXP 101
32334: PUSH
32335: LD_VAR 0 2
32339: ARRAY
32340: PUSH
32341: LD_VAR 0 3
32345: ARRAY
32346: PPUSH
32347: CALL_OW 257
32351: PUSH
32352: LD_INT 1
32354: NONEQUAL
32355: OR
32356: IFFALSE 32419
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
32358: LD_ADDR_VAR 0 5
32362: PUSH
32363: LD_EXP 101
32367: PUSH
32368: LD_VAR 0 2
32372: ARRAY
32373: PUSH
32374: LD_EXP 101
32378: PUSH
32379: LD_VAR 0 2
32383: ARRAY
32384: PUSH
32385: LD_VAR 0 3
32389: ARRAY
32390: DIFF
32391: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
32392: LD_ADDR_EXP 101
32396: PUSH
32397: LD_EXP 101
32401: PPUSH
32402: LD_VAR 0 2
32406: PPUSH
32407: LD_VAR 0 5
32411: PPUSH
32412: CALL_OW 1
32416: ST_TO_ADDR
// continue ;
32417: GO 32305
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
32419: LD_EXP 101
32423: PUSH
32424: LD_VAR 0 2
32428: ARRAY
32429: PUSH
32430: LD_VAR 0 3
32434: ARRAY
32435: PPUSH
32436: CALL_OW 257
32440: PUSH
32441: LD_INT 1
32443: EQUAL
32444: PUSH
32445: LD_EXP 101
32449: PUSH
32450: LD_VAR 0 2
32454: ARRAY
32455: PUSH
32456: LD_VAR 0 3
32460: ARRAY
32461: PPUSH
32462: CALL_OW 459
32466: NOT
32467: AND
32468: PUSH
32469: LD_EXP 101
32473: PUSH
32474: LD_VAR 0 2
32478: ARRAY
32479: PUSH
32480: LD_VAR 0 3
32484: ARRAY
32485: PPUSH
32486: CALL_OW 314
32490: NOT
32491: AND
32492: IFFALSE 32660
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
32494: LD_EXP 101
32498: PUSH
32499: LD_VAR 0 2
32503: ARRAY
32504: PUSH
32505: LD_VAR 0 3
32509: ARRAY
32510: PPUSH
32511: CALL_OW 310
32515: IFFALSE 32538
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
32517: LD_EXP 101
32521: PUSH
32522: LD_VAR 0 2
32526: ARRAY
32527: PUSH
32528: LD_VAR 0 3
32532: ARRAY
32533: PPUSH
32534: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
32538: LD_EXP 101
32542: PUSH
32543: LD_VAR 0 2
32547: ARRAY
32548: PUSH
32549: LD_VAR 0 3
32553: ARRAY
32554: PPUSH
32555: CALL_OW 314
32559: NOT
32560: IFFALSE 32660
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
32562: LD_EXP 101
32566: PUSH
32567: LD_VAR 0 2
32571: ARRAY
32572: PUSH
32573: LD_VAR 0 3
32577: ARRAY
32578: PPUSH
32579: LD_EXP 100
32583: PUSH
32584: LD_VAR 0 2
32588: ARRAY
32589: PUSH
32590: LD_VAR 0 3
32594: PUSH
32595: LD_EXP 100
32599: PUSH
32600: LD_VAR 0 2
32604: ARRAY
32605: MOD
32606: PUSH
32607: LD_INT 1
32609: PLUS
32610: ARRAY
32611: PUSH
32612: LD_INT 1
32614: ARRAY
32615: PPUSH
32616: LD_EXP 100
32620: PUSH
32621: LD_VAR 0 2
32625: ARRAY
32626: PUSH
32627: LD_VAR 0 3
32631: PUSH
32632: LD_EXP 100
32636: PUSH
32637: LD_VAR 0 2
32641: ARRAY
32642: MOD
32643: PUSH
32644: LD_INT 1
32646: PLUS
32647: ARRAY
32648: PUSH
32649: LD_INT 2
32651: ARRAY
32652: PPUSH
32653: LD_INT 0
32655: PPUSH
32656: CALL_OW 193
// end ; end ;
32660: GO 32305
32662: POP
32663: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
32664: LD_ADDR_VAR 0 5
32668: PUSH
32669: LD_EXP 87
32673: PUSH
32674: LD_VAR 0 2
32678: ARRAY
32679: PPUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 30
32685: PUSH
32686: LD_INT 4
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 30
32695: PUSH
32696: LD_INT 5
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 30
32705: PUSH
32706: LD_INT 32
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: PPUSH
32719: CALL_OW 72
32723: ST_TO_ADDR
// if not tmp then
32724: LD_VAR 0 5
32728: NOT
32729: IFFALSE 32733
// continue ;
32731: GO 32218
// list := [ ] ;
32733: LD_ADDR_VAR 0 6
32737: PUSH
32738: EMPTY
32739: ST_TO_ADDR
// for j in tmp do
32740: LD_ADDR_VAR 0 3
32744: PUSH
32745: LD_VAR 0 5
32749: PUSH
32750: FOR_IN
32751: IFFALSE 32820
// begin for k in UnitsInside ( j ) do
32753: LD_ADDR_VAR 0 4
32757: PUSH
32758: LD_VAR 0 3
32762: PPUSH
32763: CALL_OW 313
32767: PUSH
32768: FOR_IN
32769: IFFALSE 32816
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
32771: LD_VAR 0 4
32775: PPUSH
32776: CALL_OW 257
32780: PUSH
32781: LD_INT 1
32783: EQUAL
32784: PUSH
32785: LD_VAR 0 4
32789: PPUSH
32790: CALL_OW 459
32794: NOT
32795: AND
32796: IFFALSE 32814
// list := list ^ k ;
32798: LD_ADDR_VAR 0 6
32802: PUSH
32803: LD_VAR 0 6
32807: PUSH
32808: LD_VAR 0 4
32812: ADD
32813: ST_TO_ADDR
32814: GO 32768
32816: POP
32817: POP
// end ;
32818: GO 32750
32820: POP
32821: POP
// list := list diff mc_miners [ i ] ;
32822: LD_ADDR_VAR 0 6
32826: PUSH
32827: LD_VAR 0 6
32831: PUSH
32832: LD_EXP 101
32836: PUSH
32837: LD_VAR 0 2
32841: ARRAY
32842: DIFF
32843: ST_TO_ADDR
// if not list then
32844: LD_VAR 0 6
32848: NOT
32849: IFFALSE 32853
// continue ;
32851: GO 32218
// k := mc_mines [ i ] - mc_miners [ i ] ;
32853: LD_ADDR_VAR 0 4
32857: PUSH
32858: LD_EXP 100
32862: PUSH
32863: LD_VAR 0 2
32867: ARRAY
32868: PUSH
32869: LD_EXP 101
32873: PUSH
32874: LD_VAR 0 2
32878: ARRAY
32879: MINUS
32880: ST_TO_ADDR
// if k > list then
32881: LD_VAR 0 4
32885: PUSH
32886: LD_VAR 0 6
32890: GREATER
32891: IFFALSE 32903
// k := list ;
32893: LD_ADDR_VAR 0 4
32897: PUSH
32898: LD_VAR 0 6
32902: ST_TO_ADDR
// for j = 1 to k do
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: DOUBLE
32909: LD_INT 1
32911: DEC
32912: ST_TO_ADDR
32913: LD_VAR 0 4
32917: PUSH
32918: FOR_TO
32919: IFFALSE 32973
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
32921: LD_ADDR_EXP 101
32925: PUSH
32926: LD_EXP 101
32930: PPUSH
32931: LD_VAR 0 2
32935: PUSH
32936: LD_EXP 101
32940: PUSH
32941: LD_VAR 0 2
32945: ARRAY
32946: PUSH
32947: LD_INT 1
32949: PLUS
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PPUSH
32955: LD_VAR 0 6
32959: PUSH
32960: LD_VAR 0 3
32964: ARRAY
32965: PPUSH
32966: CALL 50143 0 3
32970: ST_TO_ADDR
32971: GO 32918
32973: POP
32974: POP
// end ;
32975: GO 32218
32977: POP
32978: POP
// end ;
32979: LD_VAR 0 1
32983: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
32984: LD_INT 0
32986: PPUSH
32987: PPUSH
32988: PPUSH
32989: PPUSH
32990: PPUSH
32991: PPUSH
32992: PPUSH
32993: PPUSH
32994: PPUSH
32995: PPUSH
// if not mc_bases then
32996: LD_EXP 87
33000: NOT
33001: IFFALSE 33005
// exit ;
33003: GO 34755
// for i = 1 to mc_bases do
33005: LD_ADDR_VAR 0 2
33009: PUSH
33010: DOUBLE
33011: LD_INT 1
33013: DEC
33014: ST_TO_ADDR
33015: LD_EXP 87
33019: PUSH
33020: FOR_TO
33021: IFFALSE 34753
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
33023: LD_EXP 87
33027: PUSH
33028: LD_VAR 0 2
33032: ARRAY
33033: NOT
33034: PUSH
33035: LD_EXP 94
33039: PUSH
33040: LD_VAR 0 2
33044: ARRAY
33045: OR
33046: IFFALSE 33050
// continue ;
33048: GO 33020
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
33050: LD_EXP 103
33054: PUSH
33055: LD_VAR 0 2
33059: ARRAY
33060: NOT
33061: PUSH
33062: LD_EXP 104
33066: PUSH
33067: LD_VAR 0 2
33071: ARRAY
33072: AND
33073: IFFALSE 33111
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33075: LD_ADDR_EXP 104
33079: PUSH
33080: LD_EXP 104
33084: PPUSH
33085: LD_VAR 0 2
33089: PPUSH
33090: EMPTY
33091: PPUSH
33092: CALL_OW 1
33096: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
33097: LD_VAR 0 2
33101: PPUSH
33102: LD_INT 107
33104: PPUSH
33105: CALL 23985 0 2
// continue ;
33109: GO 33020
// end ; target := [ ] ;
33111: LD_ADDR_VAR 0 6
33115: PUSH
33116: EMPTY
33117: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: DOUBLE
33124: LD_EXP 103
33128: PUSH
33129: LD_VAR 0 2
33133: ARRAY
33134: INC
33135: ST_TO_ADDR
33136: LD_INT 1
33138: PUSH
33139: FOR_DOWNTO
33140: IFFALSE 33400
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
33142: LD_EXP 103
33146: PUSH
33147: LD_VAR 0 2
33151: ARRAY
33152: PUSH
33153: LD_VAR 0 3
33157: ARRAY
33158: PUSH
33159: LD_INT 2
33161: ARRAY
33162: PPUSH
33163: LD_EXP 103
33167: PUSH
33168: LD_VAR 0 2
33172: ARRAY
33173: PUSH
33174: LD_VAR 0 3
33178: ARRAY
33179: PUSH
33180: LD_INT 3
33182: ARRAY
33183: PPUSH
33184: CALL_OW 488
33188: PUSH
33189: LD_EXP 103
33193: PUSH
33194: LD_VAR 0 2
33198: ARRAY
33199: PUSH
33200: LD_VAR 0 3
33204: ARRAY
33205: PUSH
33206: LD_INT 2
33208: ARRAY
33209: PPUSH
33210: LD_EXP 103
33214: PUSH
33215: LD_VAR 0 2
33219: ARRAY
33220: PUSH
33221: LD_VAR 0 3
33225: ARRAY
33226: PUSH
33227: LD_INT 3
33229: ARRAY
33230: PPUSH
33231: CALL_OW 284
33235: PUSH
33236: LD_INT 0
33238: EQUAL
33239: AND
33240: IFFALSE 33295
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
33242: LD_ADDR_VAR 0 5
33246: PUSH
33247: LD_EXP 103
33251: PUSH
33252: LD_VAR 0 2
33256: ARRAY
33257: PPUSH
33258: LD_VAR 0 3
33262: PPUSH
33263: CALL_OW 3
33267: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
33268: LD_ADDR_EXP 103
33272: PUSH
33273: LD_EXP 103
33277: PPUSH
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 5
33287: PPUSH
33288: CALL_OW 1
33292: ST_TO_ADDR
// continue ;
33293: GO 33139
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
33295: LD_EXP 87
33299: PUSH
33300: LD_VAR 0 2
33304: ARRAY
33305: PUSH
33306: LD_INT 1
33308: ARRAY
33309: PPUSH
33310: CALL_OW 255
33314: PPUSH
33315: LD_EXP 103
33319: PUSH
33320: LD_VAR 0 2
33324: ARRAY
33325: PUSH
33326: LD_VAR 0 3
33330: ARRAY
33331: PUSH
33332: LD_INT 2
33334: ARRAY
33335: PPUSH
33336: LD_EXP 103
33340: PUSH
33341: LD_VAR 0 2
33345: ARRAY
33346: PUSH
33347: LD_VAR 0 3
33351: ARRAY
33352: PUSH
33353: LD_INT 3
33355: ARRAY
33356: PPUSH
33357: LD_INT 30
33359: PPUSH
33360: CALL 51039 0 4
33364: PUSH
33365: LD_INT 4
33367: ARRAY
33368: PUSH
33369: LD_INT 0
33371: EQUAL
33372: IFFALSE 33398
// begin target := mc_crates [ i ] [ j ] ;
33374: LD_ADDR_VAR 0 6
33378: PUSH
33379: LD_EXP 103
33383: PUSH
33384: LD_VAR 0 2
33388: ARRAY
33389: PUSH
33390: LD_VAR 0 3
33394: ARRAY
33395: ST_TO_ADDR
// break ;
33396: GO 33400
// end ; end ;
33398: GO 33139
33400: POP
33401: POP
// if not target then
33402: LD_VAR 0 6
33406: NOT
33407: IFFALSE 33411
// continue ;
33409: GO 33020
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
33411: LD_ADDR_VAR 0 7
33415: PUSH
33416: LD_EXP 106
33420: PUSH
33421: LD_VAR 0 2
33425: ARRAY
33426: PPUSH
33427: LD_INT 2
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: LD_INT 58
33435: PUSH
33436: EMPTY
33437: LIST
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 61
33445: PUSH
33446: EMPTY
33447: LIST
33448: PUSH
33449: LD_INT 33
33451: PUSH
33452: LD_INT 5
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 33
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: PUSH
33479: LD_INT 34
33481: PUSH
33482: LD_INT 32
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 34
33491: PUSH
33492: LD_INT 51
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 34
33501: PUSH
33502: LD_INT 12
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 72
33523: ST_TO_ADDR
// if not cargo then
33524: LD_VAR 0 7
33528: NOT
33529: IFFALSE 34172
// begin if mc_crates_collector [ i ] < 5 then
33531: LD_EXP 104
33535: PUSH
33536: LD_VAR 0 2
33540: ARRAY
33541: PUSH
33542: LD_INT 5
33544: LESS
33545: IFFALSE 33911
// begin if mc_ape [ i ] then
33547: LD_EXP 116
33551: PUSH
33552: LD_VAR 0 2
33556: ARRAY
33557: IFFALSE 33604
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
33559: LD_ADDR_VAR 0 5
33563: PUSH
33564: LD_EXP 116
33568: PUSH
33569: LD_VAR 0 2
33573: ARRAY
33574: PPUSH
33575: LD_INT 25
33577: PUSH
33578: LD_INT 16
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 24
33587: PUSH
33588: LD_INT 750
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PPUSH
33599: CALL_OW 72
33603: ST_TO_ADDR
// if not tmp then
33604: LD_VAR 0 5
33608: NOT
33609: IFFALSE 33656
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
33611: LD_ADDR_VAR 0 5
33615: PUSH
33616: LD_EXP 87
33620: PUSH
33621: LD_VAR 0 2
33625: ARRAY
33626: PPUSH
33627: LD_INT 25
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 24
33639: PUSH
33640: LD_INT 750
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PPUSH
33651: CALL_OW 72
33655: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
33656: LD_EXP 116
33660: PUSH
33661: LD_VAR 0 2
33665: ARRAY
33666: PUSH
33667: LD_EXP 87
33671: PUSH
33672: LD_VAR 0 2
33676: ARRAY
33677: PPUSH
33678: LD_INT 25
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 24
33690: PUSH
33691: LD_INT 750
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PPUSH
33702: CALL_OW 72
33706: AND
33707: PUSH
33708: LD_VAR 0 5
33712: PUSH
33713: LD_INT 5
33715: LESS
33716: AND
33717: IFFALSE 33799
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_EXP 87
33728: PUSH
33729: LD_VAR 0 2
33733: ARRAY
33734: PPUSH
33735: LD_INT 25
33737: PUSH
33738: LD_INT 2
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 24
33747: PUSH
33748: LD_INT 750
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PPUSH
33759: CALL_OW 72
33763: PUSH
33764: FOR_IN
33765: IFFALSE 33797
// begin tmp := tmp union j ;
33767: LD_ADDR_VAR 0 5
33771: PUSH
33772: LD_VAR 0 5
33776: PUSH
33777: LD_VAR 0 3
33781: UNION
33782: ST_TO_ADDR
// if tmp >= 5 then
33783: LD_VAR 0 5
33787: PUSH
33788: LD_INT 5
33790: GREATEREQUAL
33791: IFFALSE 33795
// break ;
33793: GO 33797
// end ;
33795: GO 33764
33797: POP
33798: POP
// end ; if not tmp then
33799: LD_VAR 0 5
33803: NOT
33804: IFFALSE 33808
// continue ;
33806: GO 33020
// for j in tmp do
33808: LD_ADDR_VAR 0 3
33812: PUSH
33813: LD_VAR 0 5
33817: PUSH
33818: FOR_IN
33819: IFFALSE 33909
// if not GetTag ( j ) then
33821: LD_VAR 0 3
33825: PPUSH
33826: CALL_OW 110
33830: NOT
33831: IFFALSE 33907
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
33833: LD_ADDR_EXP 104
33837: PUSH
33838: LD_EXP 104
33842: PPUSH
33843: LD_VAR 0 2
33847: PUSH
33848: LD_EXP 104
33852: PUSH
33853: LD_VAR 0 2
33857: ARRAY
33858: PUSH
33859: LD_INT 1
33861: PLUS
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PPUSH
33867: LD_VAR 0 3
33871: PPUSH
33872: CALL 50143 0 3
33876: ST_TO_ADDR
// SetTag ( j , 107 ) ;
33877: LD_VAR 0 3
33881: PPUSH
33882: LD_INT 107
33884: PPUSH
33885: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
33889: LD_EXP 104
33893: PUSH
33894: LD_VAR 0 2
33898: ARRAY
33899: PUSH
33900: LD_INT 5
33902: GREATEREQUAL
33903: IFFALSE 33907
// break ;
33905: GO 33909
// end ;
33907: GO 33818
33909: POP
33910: POP
// end ; if mc_crates_collector [ i ] and target then
33911: LD_EXP 104
33915: PUSH
33916: LD_VAR 0 2
33920: ARRAY
33921: PUSH
33922: LD_VAR 0 6
33926: AND
33927: IFFALSE 34170
// begin if mc_crates_collector [ i ] < target [ 1 ] then
33929: LD_EXP 104
33933: PUSH
33934: LD_VAR 0 2
33938: ARRAY
33939: PUSH
33940: LD_VAR 0 6
33944: PUSH
33945: LD_INT 1
33947: ARRAY
33948: LESS
33949: IFFALSE 33969
// tmp := mc_crates_collector [ i ] else
33951: LD_ADDR_VAR 0 5
33955: PUSH
33956: LD_EXP 104
33960: PUSH
33961: LD_VAR 0 2
33965: ARRAY
33966: ST_TO_ADDR
33967: GO 33983
// tmp := target [ 1 ] ;
33969: LD_ADDR_VAR 0 5
33973: PUSH
33974: LD_VAR 0 6
33978: PUSH
33979: LD_INT 1
33981: ARRAY
33982: ST_TO_ADDR
// k := 0 ;
33983: LD_ADDR_VAR 0 4
33987: PUSH
33988: LD_INT 0
33990: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
33991: LD_ADDR_VAR 0 3
33995: PUSH
33996: LD_EXP 104
34000: PUSH
34001: LD_VAR 0 2
34005: ARRAY
34006: PUSH
34007: FOR_IN
34008: IFFALSE 34168
// begin k := k + 1 ;
34010: LD_ADDR_VAR 0 4
34014: PUSH
34015: LD_VAR 0 4
34019: PUSH
34020: LD_INT 1
34022: PLUS
34023: ST_TO_ADDR
// if k > tmp then
34024: LD_VAR 0 4
34028: PUSH
34029: LD_VAR 0 5
34033: GREATER
34034: IFFALSE 34038
// break ;
34036: GO 34168
// if not GetClass ( j ) in [ 2 , 16 ] then
34038: LD_VAR 0 3
34042: PPUSH
34043: CALL_OW 257
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: LD_INT 16
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: IN
34058: NOT
34059: IFFALSE 34112
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
34061: LD_ADDR_EXP 104
34065: PUSH
34066: LD_EXP 104
34070: PPUSH
34071: LD_VAR 0 2
34075: PPUSH
34076: LD_EXP 104
34080: PUSH
34081: LD_VAR 0 2
34085: ARRAY
34086: PUSH
34087: LD_VAR 0 3
34091: DIFF
34092: PPUSH
34093: CALL_OW 1
34097: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34098: LD_VAR 0 3
34102: PPUSH
34103: LD_INT 0
34105: PPUSH
34106: CALL_OW 109
// continue ;
34110: GO 34007
// end ; if IsInUnit ( j ) then
34112: LD_VAR 0 3
34116: PPUSH
34117: CALL_OW 310
34121: IFFALSE 34132
// ComExitBuilding ( j ) ;
34123: LD_VAR 0 3
34127: PPUSH
34128: CALL_OW 122
// wait ( 3 ) ;
34132: LD_INT 3
34134: PPUSH
34135: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34139: LD_VAR 0 3
34143: PPUSH
34144: LD_VAR 0 6
34148: PUSH
34149: LD_INT 2
34151: ARRAY
34152: PPUSH
34153: LD_VAR 0 6
34157: PUSH
34158: LD_INT 3
34160: ARRAY
34161: PPUSH
34162: CALL_OW 117
// end ;
34166: GO 34007
34168: POP
34169: POP
// end ; end else
34170: GO 34751
// begin for j in cargo do
34172: LD_ADDR_VAR 0 3
34176: PUSH
34177: LD_VAR 0 7
34181: PUSH
34182: FOR_IN
34183: IFFALSE 34749
// begin if GetTag ( j ) <> 0 then
34185: LD_VAR 0 3
34189: PPUSH
34190: CALL_OW 110
34194: PUSH
34195: LD_INT 0
34197: NONEQUAL
34198: IFFALSE 34202
// continue ;
34200: GO 34182
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
34202: LD_VAR 0 3
34206: PPUSH
34207: CALL_OW 256
34211: PUSH
34212: LD_INT 1000
34214: LESS
34215: PUSH
34216: LD_VAR 0 3
34220: PPUSH
34221: LD_EXP 111
34225: PUSH
34226: LD_VAR 0 2
34230: ARRAY
34231: PPUSH
34232: CALL_OW 308
34236: NOT
34237: AND
34238: IFFALSE 34260
// ComMoveToArea ( j , mc_parking [ i ] ) ;
34240: LD_VAR 0 3
34244: PPUSH
34245: LD_EXP 111
34249: PUSH
34250: LD_VAR 0 2
34254: ARRAY
34255: PPUSH
34256: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
34260: LD_VAR 0 3
34264: PPUSH
34265: CALL_OW 256
34269: PUSH
34270: LD_INT 1000
34272: LESS
34273: PUSH
34274: LD_VAR 0 3
34278: PPUSH
34279: LD_EXP 111
34283: PUSH
34284: LD_VAR 0 2
34288: ARRAY
34289: PPUSH
34290: CALL_OW 308
34294: AND
34295: IFFALSE 34299
// continue ;
34297: GO 34182
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
34299: LD_VAR 0 3
34303: PPUSH
34304: CALL_OW 262
34308: PUSH
34309: LD_INT 2
34311: EQUAL
34312: PUSH
34313: LD_VAR 0 3
34317: PPUSH
34318: CALL_OW 261
34322: PUSH
34323: LD_INT 15
34325: LESS
34326: AND
34327: IFFALSE 34331
// continue ;
34329: GO 34182
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
34331: LD_VAR 0 3
34335: PPUSH
34336: CALL_OW 262
34340: PUSH
34341: LD_INT 1
34343: EQUAL
34344: PUSH
34345: LD_VAR 0 3
34349: PPUSH
34350: CALL_OW 261
34354: PUSH
34355: LD_INT 10
34357: LESS
34358: AND
34359: IFFALSE 34688
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34361: LD_ADDR_VAR 0 8
34365: PUSH
34366: LD_EXP 87
34370: PUSH
34371: LD_VAR 0 2
34375: ARRAY
34376: PPUSH
34377: LD_INT 2
34379: PUSH
34380: LD_INT 30
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 30
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 72
34409: ST_TO_ADDR
// if not depot then
34410: LD_VAR 0 8
34414: NOT
34415: IFFALSE 34419
// continue ;
34417: GO 34182
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
34419: LD_VAR 0 3
34423: PPUSH
34424: LD_VAR 0 8
34428: PPUSH
34429: LD_VAR 0 3
34433: PPUSH
34434: CALL_OW 74
34438: PPUSH
34439: CALL_OW 296
34443: PUSH
34444: LD_INT 6
34446: LESS
34447: IFFALSE 34463
// SetFuel ( j , 100 ) else
34449: LD_VAR 0 3
34453: PPUSH
34454: LD_INT 100
34456: PPUSH
34457: CALL_OW 240
34461: GO 34688
// if GetFuel ( j ) = 0 then
34463: LD_VAR 0 3
34467: PPUSH
34468: CALL_OW 261
34472: PUSH
34473: LD_INT 0
34475: EQUAL
34476: IFFALSE 34688
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
34478: LD_ADDR_EXP 106
34482: PUSH
34483: LD_EXP 106
34487: PPUSH
34488: LD_VAR 0 2
34492: PPUSH
34493: LD_EXP 106
34497: PUSH
34498: LD_VAR 0 2
34502: ARRAY
34503: PUSH
34504: LD_VAR 0 3
34508: DIFF
34509: PPUSH
34510: CALL_OW 1
34514: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
34515: LD_VAR 0 3
34519: PPUSH
34520: CALL_OW 263
34524: PUSH
34525: LD_INT 1
34527: EQUAL
34528: IFFALSE 34544
// ComExitVehicle ( IsInUnit ( j ) ) ;
34530: LD_VAR 0 3
34534: PPUSH
34535: CALL_OW 310
34539: PPUSH
34540: CALL_OW 121
// if GetControl ( j ) = control_remote then
34544: LD_VAR 0 3
34548: PPUSH
34549: CALL_OW 263
34553: PUSH
34554: LD_INT 2
34556: EQUAL
34557: IFFALSE 34568
// ComUnlink ( j ) ;
34559: LD_VAR 0 3
34563: PPUSH
34564: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
34568: LD_ADDR_VAR 0 9
34572: PUSH
34573: LD_VAR 0 2
34577: PPUSH
34578: LD_INT 3
34580: PPUSH
34581: CALL 44041 0 2
34585: ST_TO_ADDR
// if fac then
34586: LD_VAR 0 9
34590: IFFALSE 34686
// begin for k in fac do
34592: LD_ADDR_VAR 0 4
34596: PUSH
34597: LD_VAR 0 9
34601: PUSH
34602: FOR_IN
34603: IFFALSE 34684
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
34605: LD_ADDR_VAR 0 10
34609: PUSH
34610: LD_VAR 0 9
34614: PPUSH
34615: LD_VAR 0 3
34619: PPUSH
34620: CALL_OW 265
34624: PPUSH
34625: LD_VAR 0 3
34629: PPUSH
34630: CALL_OW 262
34634: PPUSH
34635: LD_VAR 0 3
34639: PPUSH
34640: CALL_OW 263
34644: PPUSH
34645: LD_VAR 0 3
34649: PPUSH
34650: CALL_OW 264
34654: PPUSH
34655: CALL 47675 0 5
34659: ST_TO_ADDR
// if components then
34660: LD_VAR 0 10
34664: IFFALSE 34682
// begin MC_InsertProduceList ( i , components ) ;
34666: LD_VAR 0 2
34670: PPUSH
34671: LD_VAR 0 10
34675: PPUSH
34676: CALL 43586 0 2
// break ;
34680: GO 34684
// end ; end ;
34682: GO 34602
34684: POP
34685: POP
// end ; continue ;
34686: GO 34182
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
34688: LD_VAR 0 3
34692: PPUSH
34693: LD_INT 1
34695: PPUSH
34696: CALL_OW 289
34700: PUSH
34701: LD_INT 100
34703: LESS
34704: PUSH
34705: LD_VAR 0 3
34709: PPUSH
34710: CALL_OW 314
34714: NOT
34715: AND
34716: IFFALSE 34745
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
34718: LD_VAR 0 3
34722: PPUSH
34723: LD_VAR 0 6
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: PPUSH
34732: LD_VAR 0 6
34736: PUSH
34737: LD_INT 3
34739: ARRAY
34740: PPUSH
34741: CALL_OW 117
// break ;
34745: GO 34749
// end ;
34747: GO 34182
34749: POP
34750: POP
// end ; end ;
34751: GO 33020
34753: POP
34754: POP
// end ;
34755: LD_VAR 0 1
34759: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
34760: LD_INT 0
34762: PPUSH
34763: PPUSH
34764: PPUSH
34765: PPUSH
// if not mc_bases then
34766: LD_EXP 87
34770: NOT
34771: IFFALSE 34775
// exit ;
34773: GO 34936
// for i = 1 to mc_bases do
34775: LD_ADDR_VAR 0 2
34779: PUSH
34780: DOUBLE
34781: LD_INT 1
34783: DEC
34784: ST_TO_ADDR
34785: LD_EXP 87
34789: PUSH
34790: FOR_TO
34791: IFFALSE 34934
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
34793: LD_ADDR_VAR 0 4
34797: PUSH
34798: LD_EXP 106
34802: PUSH
34803: LD_VAR 0 2
34807: ARRAY
34808: PUSH
34809: LD_EXP 109
34813: PUSH
34814: LD_VAR 0 2
34818: ARRAY
34819: UNION
34820: PPUSH
34821: LD_INT 33
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PPUSH
34831: CALL_OW 72
34835: ST_TO_ADDR
// if tmp then
34836: LD_VAR 0 4
34840: IFFALSE 34932
// for j in tmp do
34842: LD_ADDR_VAR 0 3
34846: PUSH
34847: LD_VAR 0 4
34851: PUSH
34852: FOR_IN
34853: IFFALSE 34930
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
34855: LD_VAR 0 3
34859: PPUSH
34860: CALL_OW 312
34864: NOT
34865: PUSH
34866: LD_VAR 0 3
34870: PPUSH
34871: CALL_OW 256
34875: PUSH
34876: LD_INT 250
34878: GREATEREQUAL
34879: AND
34880: IFFALSE 34893
// Connect ( j ) else
34882: LD_VAR 0 3
34886: PPUSH
34887: CALL 53076 0 1
34891: GO 34928
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
34893: LD_VAR 0 3
34897: PPUSH
34898: CALL_OW 256
34902: PUSH
34903: LD_INT 250
34905: LESS
34906: PUSH
34907: LD_VAR 0 3
34911: PPUSH
34912: CALL_OW 312
34916: AND
34917: IFFALSE 34928
// ComUnlink ( j ) ;
34919: LD_VAR 0 3
34923: PPUSH
34924: CALL_OW 136
34928: GO 34852
34930: POP
34931: POP
// end ;
34932: GO 34790
34934: POP
34935: POP
// end ;
34936: LD_VAR 0 1
34940: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
34941: LD_INT 0
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
// if not mc_bases then
34948: LD_EXP 87
34952: NOT
34953: IFFALSE 34957
// exit ;
34955: GO 35402
// for i = 1 to mc_bases do
34957: LD_ADDR_VAR 0 2
34961: PUSH
34962: DOUBLE
34963: LD_INT 1
34965: DEC
34966: ST_TO_ADDR
34967: LD_EXP 87
34971: PUSH
34972: FOR_TO
34973: IFFALSE 35400
// begin if not mc_produce [ i ] then
34975: LD_EXP 108
34979: PUSH
34980: LD_VAR 0 2
34984: ARRAY
34985: NOT
34986: IFFALSE 34990
// continue ;
34988: GO 34972
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34990: LD_ADDR_VAR 0 5
34994: PUSH
34995: LD_EXP 87
34999: PUSH
35000: LD_VAR 0 2
35004: ARRAY
35005: PPUSH
35006: LD_INT 30
35008: PUSH
35009: LD_INT 3
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PPUSH
35016: CALL_OW 72
35020: ST_TO_ADDR
// if not fac then
35021: LD_VAR 0 5
35025: NOT
35026: IFFALSE 35030
// continue ;
35028: GO 34972
// for j in fac do
35030: LD_ADDR_VAR 0 3
35034: PUSH
35035: LD_VAR 0 5
35039: PUSH
35040: FOR_IN
35041: IFFALSE 35396
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
35043: LD_VAR 0 3
35047: PPUSH
35048: CALL_OW 461
35052: PUSH
35053: LD_INT 2
35055: NONEQUAL
35056: PUSH
35057: LD_VAR 0 3
35061: PPUSH
35062: LD_INT 15
35064: PPUSH
35065: CALL 52736 0 2
35069: PUSH
35070: LD_INT 4
35072: ARRAY
35073: OR
35074: IFFALSE 35078
// continue ;
35076: GO 35040
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
35078: LD_VAR 0 3
35082: PPUSH
35083: LD_EXP 108
35087: PUSH
35088: LD_VAR 0 2
35092: ARRAY
35093: PUSH
35094: LD_INT 1
35096: ARRAY
35097: PUSH
35098: LD_INT 1
35100: ARRAY
35101: PPUSH
35102: LD_EXP 108
35106: PUSH
35107: LD_VAR 0 2
35111: ARRAY
35112: PUSH
35113: LD_INT 1
35115: ARRAY
35116: PUSH
35117: LD_INT 2
35119: ARRAY
35120: PPUSH
35121: LD_EXP 108
35125: PUSH
35126: LD_VAR 0 2
35130: ARRAY
35131: PUSH
35132: LD_INT 1
35134: ARRAY
35135: PUSH
35136: LD_INT 3
35138: ARRAY
35139: PPUSH
35140: LD_EXP 108
35144: PUSH
35145: LD_VAR 0 2
35149: ARRAY
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: PUSH
35155: LD_INT 4
35157: ARRAY
35158: PPUSH
35159: CALL_OW 448
35163: PUSH
35164: LD_VAR 0 3
35168: PPUSH
35169: LD_EXP 108
35173: PUSH
35174: LD_VAR 0 2
35178: ARRAY
35179: PUSH
35180: LD_INT 1
35182: ARRAY
35183: PUSH
35184: LD_INT 1
35186: ARRAY
35187: PUSH
35188: LD_EXP 108
35192: PUSH
35193: LD_VAR 0 2
35197: ARRAY
35198: PUSH
35199: LD_INT 1
35201: ARRAY
35202: PUSH
35203: LD_INT 2
35205: ARRAY
35206: PUSH
35207: LD_EXP 108
35211: PUSH
35212: LD_VAR 0 2
35216: ARRAY
35217: PUSH
35218: LD_INT 1
35220: ARRAY
35221: PUSH
35222: LD_INT 3
35224: ARRAY
35225: PUSH
35226: LD_EXP 108
35230: PUSH
35231: LD_VAR 0 2
35235: ARRAY
35236: PUSH
35237: LD_INT 1
35239: ARRAY
35240: PUSH
35241: LD_INT 4
35243: ARRAY
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: PPUSH
35251: CALL 56407 0 2
35255: AND
35256: IFFALSE 35394
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
35258: LD_VAR 0 3
35262: PPUSH
35263: LD_EXP 108
35267: PUSH
35268: LD_VAR 0 2
35272: ARRAY
35273: PUSH
35274: LD_INT 1
35276: ARRAY
35277: PUSH
35278: LD_INT 1
35280: ARRAY
35281: PPUSH
35282: LD_EXP 108
35286: PUSH
35287: LD_VAR 0 2
35291: ARRAY
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PUSH
35297: LD_INT 2
35299: ARRAY
35300: PPUSH
35301: LD_EXP 108
35305: PUSH
35306: LD_VAR 0 2
35310: ARRAY
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: PUSH
35316: LD_INT 3
35318: ARRAY
35319: PPUSH
35320: LD_EXP 108
35324: PUSH
35325: LD_VAR 0 2
35329: ARRAY
35330: PUSH
35331: LD_INT 1
35333: ARRAY
35334: PUSH
35335: LD_INT 4
35337: ARRAY
35338: PPUSH
35339: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
35343: LD_ADDR_VAR 0 4
35347: PUSH
35348: LD_EXP 108
35352: PUSH
35353: LD_VAR 0 2
35357: ARRAY
35358: PPUSH
35359: LD_INT 1
35361: PPUSH
35362: CALL_OW 3
35366: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
35367: LD_ADDR_EXP 108
35371: PUSH
35372: LD_EXP 108
35376: PPUSH
35377: LD_VAR 0 2
35381: PPUSH
35382: LD_VAR 0 4
35386: PPUSH
35387: CALL_OW 1
35391: ST_TO_ADDR
// break ;
35392: GO 35396
// end ; end ;
35394: GO 35040
35396: POP
35397: POP
// end ;
35398: GO 34972
35400: POP
35401: POP
// end ;
35402: LD_VAR 0 1
35406: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
35407: LD_INT 0
35409: PPUSH
35410: PPUSH
35411: PPUSH
// if not mc_bases then
35412: LD_EXP 87
35416: NOT
35417: IFFALSE 35421
// exit ;
35419: GO 35510
// for i = 1 to mc_bases do
35421: LD_ADDR_VAR 0 2
35425: PUSH
35426: DOUBLE
35427: LD_INT 1
35429: DEC
35430: ST_TO_ADDR
35431: LD_EXP 87
35435: PUSH
35436: FOR_TO
35437: IFFALSE 35508
// begin if mc_attack [ i ] then
35439: LD_EXP 107
35443: PUSH
35444: LD_VAR 0 2
35448: ARRAY
35449: IFFALSE 35506
// begin tmp := mc_attack [ i ] [ 1 ] ;
35451: LD_ADDR_VAR 0 3
35455: PUSH
35456: LD_EXP 107
35460: PUSH
35461: LD_VAR 0 2
35465: ARRAY
35466: PUSH
35467: LD_INT 1
35469: ARRAY
35470: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
35471: LD_ADDR_EXP 107
35475: PUSH
35476: LD_EXP 107
35480: PPUSH
35481: LD_VAR 0 2
35485: PPUSH
35486: EMPTY
35487: PPUSH
35488: CALL_OW 1
35492: ST_TO_ADDR
// Attack ( tmp ) ;
35493: LD_VAR 0 3
35497: PPUSH
35498: CALL 86278 0 1
// exit ;
35502: POP
35503: POP
35504: GO 35510
// end ; end ;
35506: GO 35436
35508: POP
35509: POP
// end ;
35510: LD_VAR 0 1
35514: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
35519: PPUSH
35520: PPUSH
35521: PPUSH
35522: PPUSH
35523: PPUSH
// if not mc_bases then
35524: LD_EXP 87
35528: NOT
35529: IFFALSE 35533
// exit ;
35531: GO 36115
// for i = 1 to mc_bases do
35533: LD_ADDR_VAR 0 2
35537: PUSH
35538: DOUBLE
35539: LD_INT 1
35541: DEC
35542: ST_TO_ADDR
35543: LD_EXP 87
35547: PUSH
35548: FOR_TO
35549: IFFALSE 36113
// begin if not mc_bases [ i ] then
35551: LD_EXP 87
35555: PUSH
35556: LD_VAR 0 2
35560: ARRAY
35561: NOT
35562: IFFALSE 35566
// continue ;
35564: GO 35548
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
35566: LD_ADDR_VAR 0 7
35570: PUSH
35571: LD_EXP 87
35575: PUSH
35576: LD_VAR 0 2
35580: ARRAY
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PPUSH
35586: CALL 46979 0 1
35590: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
35591: LD_ADDR_EXP 110
35595: PUSH
35596: LD_EXP 110
35600: PPUSH
35601: LD_VAR 0 2
35605: PPUSH
35606: LD_EXP 87
35610: PUSH
35611: LD_VAR 0 2
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: CALL_OW 255
35625: PPUSH
35626: LD_EXP 112
35630: PUSH
35631: LD_VAR 0 2
35635: ARRAY
35636: PPUSH
35637: CALL 46944 0 2
35641: PPUSH
35642: CALL_OW 1
35646: ST_TO_ADDR
// if not mc_scan [ i ] then
35647: LD_EXP 110
35651: PUSH
35652: LD_VAR 0 2
35656: ARRAY
35657: NOT
35658: IFFALSE 35813
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35660: LD_ADDR_VAR 0 4
35664: PUSH
35665: LD_EXP 87
35669: PUSH
35670: LD_VAR 0 2
35674: ARRAY
35675: PPUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 25
35681: PUSH
35682: LD_INT 5
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 25
35691: PUSH
35692: LD_INT 8
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 25
35701: PUSH
35702: LD_INT 9
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: PPUSH
35715: CALL_OW 72
35719: ST_TO_ADDR
// if not tmp then
35720: LD_VAR 0 4
35724: NOT
35725: IFFALSE 35729
// continue ;
35727: GO 35548
// for j in tmp do
35729: LD_ADDR_VAR 0 3
35733: PUSH
35734: LD_VAR 0 4
35738: PUSH
35739: FOR_IN
35740: IFFALSE 35811
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
35742: LD_VAR 0 3
35746: PPUSH
35747: CALL_OW 310
35751: PPUSH
35752: CALL_OW 266
35756: PUSH
35757: LD_INT 5
35759: EQUAL
35760: PUSH
35761: LD_VAR 0 3
35765: PPUSH
35766: CALL_OW 257
35770: PUSH
35771: LD_INT 1
35773: EQUAL
35774: AND
35775: PUSH
35776: LD_VAR 0 3
35780: PPUSH
35781: CALL_OW 459
35785: NOT
35786: AND
35787: PUSH
35788: LD_VAR 0 7
35792: AND
35793: IFFALSE 35809
// ComChangeProfession ( j , class ) ;
35795: LD_VAR 0 3
35799: PPUSH
35800: LD_VAR 0 7
35804: PPUSH
35805: CALL_OW 123
35809: GO 35739
35811: POP
35812: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
35813: LD_EXP 110
35817: PUSH
35818: LD_VAR 0 2
35822: ARRAY
35823: PUSH
35824: LD_EXP 109
35828: PUSH
35829: LD_VAR 0 2
35833: ARRAY
35834: NOT
35835: AND
35836: PUSH
35837: LD_EXP 87
35841: PUSH
35842: LD_VAR 0 2
35846: ARRAY
35847: PPUSH
35848: LD_INT 30
35850: PUSH
35851: LD_INT 32
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PPUSH
35858: CALL_OW 72
35862: NOT
35863: AND
35864: PUSH
35865: LD_EXP 87
35869: PUSH
35870: LD_VAR 0 2
35874: ARRAY
35875: PPUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 30
35881: PUSH
35882: LD_INT 4
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 30
35891: PUSH
35892: LD_INT 5
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: PPUSH
35904: CALL_OW 72
35908: NOT
35909: AND
35910: IFFALSE 36042
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
35912: LD_ADDR_VAR 0 4
35916: PUSH
35917: LD_EXP 87
35921: PUSH
35922: LD_VAR 0 2
35926: ARRAY
35927: PPUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 25
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 25
35943: PUSH
35944: LD_INT 5
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 25
35953: PUSH
35954: LD_INT 8
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 25
35963: PUSH
35964: LD_INT 9
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: PPUSH
35978: CALL_OW 72
35982: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
35983: LD_ADDR_VAR 0 4
35987: PUSH
35988: LD_VAR 0 4
35992: PUSH
35993: LD_VAR 0 4
35997: PPUSH
35998: LD_INT 18
36000: PPUSH
36001: CALL 78704 0 2
36005: DIFF
36006: ST_TO_ADDR
// if tmp then
36007: LD_VAR 0 4
36011: IFFALSE 36042
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
36013: LD_VAR 0 2
36017: PPUSH
36018: LD_VAR 0 4
36022: PPUSH
36023: LD_EXP 112
36027: PUSH
36028: LD_VAR 0 2
36032: ARRAY
36033: PPUSH
36034: CALL 90987 0 3
// exit ;
36038: POP
36039: POP
36040: GO 36115
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
36042: LD_EXP 110
36046: PUSH
36047: LD_VAR 0 2
36051: ARRAY
36052: PUSH
36053: LD_EXP 109
36057: PUSH
36058: LD_VAR 0 2
36062: ARRAY
36063: AND
36064: IFFALSE 36111
// begin tmp := mc_defender [ i ] ;
36066: LD_ADDR_VAR 0 4
36070: PUSH
36071: LD_EXP 109
36075: PUSH
36076: LD_VAR 0 2
36080: ARRAY
36081: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
36082: LD_VAR 0 2
36086: PPUSH
36087: LD_VAR 0 4
36091: PPUSH
36092: LD_EXP 110
36096: PUSH
36097: LD_VAR 0 2
36101: ARRAY
36102: PPUSH
36103: CALL 91548 0 3
// exit ;
36107: POP
36108: POP
36109: GO 36115
// end ; end ;
36111: GO 35548
36113: POP
36114: POP
// end ;
36115: LD_VAR 0 1
36119: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
36120: LD_INT 0
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
36128: PPUSH
36129: PPUSH
36130: PPUSH
36131: PPUSH
36132: PPUSH
// if not mc_bases then
36133: LD_EXP 87
36137: NOT
36138: IFFALSE 36142
// exit ;
36140: GO 37229
// for i = 1 to mc_bases do
36142: LD_ADDR_VAR 0 2
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_EXP 87
36156: PUSH
36157: FOR_TO
36158: IFFALSE 37227
// begin tmp := mc_lab [ i ] ;
36160: LD_ADDR_VAR 0 6
36164: PUSH
36165: LD_EXP 120
36169: PUSH
36170: LD_VAR 0 2
36174: ARRAY
36175: ST_TO_ADDR
// if not tmp then
36176: LD_VAR 0 6
36180: NOT
36181: IFFALSE 36185
// continue ;
36183: GO 36157
// idle_lab := 0 ;
36185: LD_ADDR_VAR 0 11
36189: PUSH
36190: LD_INT 0
36192: ST_TO_ADDR
// for j in tmp do
36193: LD_ADDR_VAR 0 3
36197: PUSH
36198: LD_VAR 0 6
36202: PUSH
36203: FOR_IN
36204: IFFALSE 37223
// begin researching := false ;
36206: LD_ADDR_VAR 0 10
36210: PUSH
36211: LD_INT 0
36213: ST_TO_ADDR
// side := GetSide ( j ) ;
36214: LD_ADDR_VAR 0 4
36218: PUSH
36219: LD_VAR 0 3
36223: PPUSH
36224: CALL_OW 255
36228: ST_TO_ADDR
// if not mc_tech [ side ] then
36229: LD_EXP 114
36233: PUSH
36234: LD_VAR 0 4
36238: ARRAY
36239: NOT
36240: IFFALSE 36244
// continue ;
36242: GO 36203
// if BuildingStatus ( j ) = bs_idle then
36244: LD_VAR 0 3
36248: PPUSH
36249: CALL_OW 461
36253: PUSH
36254: LD_INT 2
36256: EQUAL
36257: IFFALSE 36445
// begin if idle_lab and UnitsInside ( j ) < 6 then
36259: LD_VAR 0 11
36263: PUSH
36264: LD_VAR 0 3
36268: PPUSH
36269: CALL_OW 313
36273: PUSH
36274: LD_INT 6
36276: LESS
36277: AND
36278: IFFALSE 36349
// begin tmp2 := UnitsInside ( idle_lab ) ;
36280: LD_ADDR_VAR 0 9
36284: PUSH
36285: LD_VAR 0 11
36289: PPUSH
36290: CALL_OW 313
36294: ST_TO_ADDR
// if tmp2 then
36295: LD_VAR 0 9
36299: IFFALSE 36341
// for x in tmp2 do
36301: LD_ADDR_VAR 0 7
36305: PUSH
36306: LD_VAR 0 9
36310: PUSH
36311: FOR_IN
36312: IFFALSE 36339
// begin ComExitBuilding ( x ) ;
36314: LD_VAR 0 7
36318: PPUSH
36319: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
36323: LD_VAR 0 7
36327: PPUSH
36328: LD_VAR 0 3
36332: PPUSH
36333: CALL_OW 180
// end ;
36337: GO 36311
36339: POP
36340: POP
// idle_lab := 0 ;
36341: LD_ADDR_VAR 0 11
36345: PUSH
36346: LD_INT 0
36348: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
36349: LD_ADDR_VAR 0 5
36353: PUSH
36354: LD_EXP 114
36358: PUSH
36359: LD_VAR 0 4
36363: ARRAY
36364: PUSH
36365: FOR_IN
36366: IFFALSE 36426
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
36368: LD_VAR 0 3
36372: PPUSH
36373: LD_VAR 0 5
36377: PPUSH
36378: CALL_OW 430
36382: PUSH
36383: LD_VAR 0 4
36387: PPUSH
36388: LD_VAR 0 5
36392: PPUSH
36393: CALL 46049 0 2
36397: AND
36398: IFFALSE 36424
// begin researching := true ;
36400: LD_ADDR_VAR 0 10
36404: PUSH
36405: LD_INT 1
36407: ST_TO_ADDR
// ComResearch ( j , t ) ;
36408: LD_VAR 0 3
36412: PPUSH
36413: LD_VAR 0 5
36417: PPUSH
36418: CALL_OW 124
// break ;
36422: GO 36426
// end ;
36424: GO 36365
36426: POP
36427: POP
// if not researching then
36428: LD_VAR 0 10
36432: NOT
36433: IFFALSE 36445
// idle_lab := j ;
36435: LD_ADDR_VAR 0 11
36439: PUSH
36440: LD_VAR 0 3
36444: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
36445: LD_VAR 0 3
36449: PPUSH
36450: CALL_OW 461
36454: PUSH
36455: LD_INT 10
36457: EQUAL
36458: IFFALSE 37046
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
36460: LD_EXP 116
36464: PUSH
36465: LD_VAR 0 2
36469: ARRAY
36470: NOT
36471: PUSH
36472: LD_EXP 117
36476: PUSH
36477: LD_VAR 0 2
36481: ARRAY
36482: NOT
36483: AND
36484: PUSH
36485: LD_EXP 114
36489: PUSH
36490: LD_VAR 0 4
36494: ARRAY
36495: PUSH
36496: LD_INT 1
36498: GREATER
36499: AND
36500: IFFALSE 36631
// begin ComCancel ( j ) ;
36502: LD_VAR 0 3
36506: PPUSH
36507: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
36511: LD_ADDR_EXP 114
36515: PUSH
36516: LD_EXP 114
36520: PPUSH
36521: LD_VAR 0 4
36525: PPUSH
36526: LD_EXP 114
36530: PUSH
36531: LD_VAR 0 4
36535: ARRAY
36536: PPUSH
36537: LD_EXP 114
36541: PUSH
36542: LD_VAR 0 4
36546: ARRAY
36547: PUSH
36548: LD_INT 1
36550: MINUS
36551: PPUSH
36552: LD_EXP 114
36556: PUSH
36557: LD_VAR 0 4
36561: ARRAY
36562: PPUSH
36563: LD_INT 0
36565: PPUSH
36566: CALL 49561 0 4
36570: PPUSH
36571: CALL_OW 1
36575: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
36576: LD_ADDR_EXP 114
36580: PUSH
36581: LD_EXP 114
36585: PPUSH
36586: LD_VAR 0 4
36590: PPUSH
36591: LD_EXP 114
36595: PUSH
36596: LD_VAR 0 4
36600: ARRAY
36601: PPUSH
36602: LD_EXP 114
36606: PUSH
36607: LD_VAR 0 4
36611: ARRAY
36612: PPUSH
36613: LD_INT 1
36615: PPUSH
36616: LD_INT 0
36618: PPUSH
36619: CALL 49561 0 4
36623: PPUSH
36624: CALL_OW 1
36628: ST_TO_ADDR
// continue ;
36629: GO 36203
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
36631: LD_EXP 116
36635: PUSH
36636: LD_VAR 0 2
36640: ARRAY
36641: PUSH
36642: LD_EXP 117
36646: PUSH
36647: LD_VAR 0 2
36651: ARRAY
36652: NOT
36653: AND
36654: IFFALSE 36781
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
36656: LD_ADDR_EXP 117
36660: PUSH
36661: LD_EXP 117
36665: PPUSH
36666: LD_VAR 0 2
36670: PUSH
36671: LD_EXP 117
36675: PUSH
36676: LD_VAR 0 2
36680: ARRAY
36681: PUSH
36682: LD_INT 1
36684: PLUS
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PPUSH
36690: LD_EXP 116
36694: PUSH
36695: LD_VAR 0 2
36699: ARRAY
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: PPUSH
36705: CALL 50143 0 3
36709: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
36710: LD_EXP 116
36714: PUSH
36715: LD_VAR 0 2
36719: ARRAY
36720: PUSH
36721: LD_INT 1
36723: ARRAY
36724: PPUSH
36725: LD_INT 112
36727: PPUSH
36728: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
36732: LD_ADDR_VAR 0 9
36736: PUSH
36737: LD_EXP 116
36741: PUSH
36742: LD_VAR 0 2
36746: ARRAY
36747: PPUSH
36748: LD_INT 1
36750: PPUSH
36751: CALL_OW 3
36755: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
36756: LD_ADDR_EXP 116
36760: PUSH
36761: LD_EXP 116
36765: PPUSH
36766: LD_VAR 0 2
36770: PPUSH
36771: LD_VAR 0 9
36775: PPUSH
36776: CALL_OW 1
36780: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
36781: LD_EXP 116
36785: PUSH
36786: LD_VAR 0 2
36790: ARRAY
36791: PUSH
36792: LD_EXP 117
36796: PUSH
36797: LD_VAR 0 2
36801: ARRAY
36802: AND
36803: PUSH
36804: LD_EXP 117
36808: PUSH
36809: LD_VAR 0 2
36813: ARRAY
36814: PUSH
36815: LD_INT 1
36817: ARRAY
36818: PPUSH
36819: CALL_OW 310
36823: NOT
36824: AND
36825: PUSH
36826: LD_VAR 0 3
36830: PPUSH
36831: CALL_OW 313
36835: PUSH
36836: LD_INT 6
36838: EQUAL
36839: AND
36840: IFFALSE 36896
// begin tmp2 := UnitsInside ( j ) ;
36842: LD_ADDR_VAR 0 9
36846: PUSH
36847: LD_VAR 0 3
36851: PPUSH
36852: CALL_OW 313
36856: ST_TO_ADDR
// if tmp2 = 6 then
36857: LD_VAR 0 9
36861: PUSH
36862: LD_INT 6
36864: EQUAL
36865: IFFALSE 36896
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
36867: LD_VAR 0 9
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: PPUSH
36876: LD_INT 112
36878: PPUSH
36879: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
36883: LD_VAR 0 9
36887: PUSH
36888: LD_INT 1
36890: ARRAY
36891: PPUSH
36892: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
36896: LD_EXP 117
36900: PUSH
36901: LD_VAR 0 2
36905: ARRAY
36906: PUSH
36907: LD_EXP 117
36911: PUSH
36912: LD_VAR 0 2
36916: ARRAY
36917: PUSH
36918: LD_INT 1
36920: ARRAY
36921: PPUSH
36922: CALL_OW 314
36926: NOT
36927: AND
36928: PUSH
36929: LD_EXP 117
36933: PUSH
36934: LD_VAR 0 2
36938: ARRAY
36939: PUSH
36940: LD_INT 1
36942: ARRAY
36943: PPUSH
36944: CALL_OW 310
36948: NOT
36949: AND
36950: IFFALSE 36976
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
36952: LD_EXP 117
36956: PUSH
36957: LD_VAR 0 2
36961: ARRAY
36962: PUSH
36963: LD_INT 1
36965: ARRAY
36966: PPUSH
36967: LD_VAR 0 3
36971: PPUSH
36972: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
36976: LD_EXP 117
36980: PUSH
36981: LD_VAR 0 2
36985: ARRAY
36986: PUSH
36987: LD_INT 1
36989: ARRAY
36990: PPUSH
36991: CALL_OW 310
36995: PUSH
36996: LD_EXP 117
37000: PUSH
37001: LD_VAR 0 2
37005: ARRAY
37006: PUSH
37007: LD_INT 1
37009: ARRAY
37010: PPUSH
37011: CALL_OW 310
37015: PPUSH
37016: CALL_OW 461
37020: PUSH
37021: LD_INT 3
37023: NONEQUAL
37024: AND
37025: IFFALSE 37046
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
37027: LD_EXP 117
37031: PUSH
37032: LD_VAR 0 2
37036: ARRAY
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
37046: LD_VAR 0 3
37050: PPUSH
37051: CALL_OW 461
37055: PUSH
37056: LD_INT 6
37058: EQUAL
37059: PUSH
37060: LD_VAR 0 6
37064: PUSH
37065: LD_INT 1
37067: GREATER
37068: AND
37069: IFFALSE 37221
// begin sci := [ ] ;
37071: LD_ADDR_VAR 0 8
37075: PUSH
37076: EMPTY
37077: ST_TO_ADDR
// for x in ( tmp diff j ) do
37078: LD_ADDR_VAR 0 7
37082: PUSH
37083: LD_VAR 0 6
37087: PUSH
37088: LD_VAR 0 3
37092: DIFF
37093: PUSH
37094: FOR_IN
37095: IFFALSE 37147
// begin if sci = 6 then
37097: LD_VAR 0 8
37101: PUSH
37102: LD_INT 6
37104: EQUAL
37105: IFFALSE 37109
// break ;
37107: GO 37147
// if BuildingStatus ( x ) = bs_idle then
37109: LD_VAR 0 7
37113: PPUSH
37114: CALL_OW 461
37118: PUSH
37119: LD_INT 2
37121: EQUAL
37122: IFFALSE 37145
// sci := sci ^ UnitsInside ( x ) ;
37124: LD_ADDR_VAR 0 8
37128: PUSH
37129: LD_VAR 0 8
37133: PUSH
37134: LD_VAR 0 7
37138: PPUSH
37139: CALL_OW 313
37143: ADD
37144: ST_TO_ADDR
// end ;
37145: GO 37094
37147: POP
37148: POP
// if not sci then
37149: LD_VAR 0 8
37153: NOT
37154: IFFALSE 37158
// continue ;
37156: GO 36203
// for x in sci do
37158: LD_ADDR_VAR 0 7
37162: PUSH
37163: LD_VAR 0 8
37167: PUSH
37168: FOR_IN
37169: IFFALSE 37219
// if IsInUnit ( x ) and not HasTask ( x ) then
37171: LD_VAR 0 7
37175: PPUSH
37176: CALL_OW 310
37180: PUSH
37181: LD_VAR 0 7
37185: PPUSH
37186: CALL_OW 314
37190: NOT
37191: AND
37192: IFFALSE 37217
// begin ComExitBuilding ( x ) ;
37194: LD_VAR 0 7
37198: PPUSH
37199: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
37203: LD_VAR 0 7
37207: PPUSH
37208: LD_VAR 0 3
37212: PPUSH
37213: CALL_OW 180
// end ;
37217: GO 37168
37219: POP
37220: POP
// end ; end ;
37221: GO 36203
37223: POP
37224: POP
// end ;
37225: GO 36157
37227: POP
37228: POP
// end ;
37229: LD_VAR 0 1
37233: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
37234: LD_INT 0
37236: PPUSH
37237: PPUSH
// if not mc_bases then
37238: LD_EXP 87
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 37328
// for i = 1 to mc_bases do
37247: LD_ADDR_VAR 0 2
37251: PUSH
37252: DOUBLE
37253: LD_INT 1
37255: DEC
37256: ST_TO_ADDR
37257: LD_EXP 87
37261: PUSH
37262: FOR_TO
37263: IFFALSE 37326
// if mc_mines [ i ] and mc_miners [ i ] then
37265: LD_EXP 100
37269: PUSH
37270: LD_VAR 0 2
37274: ARRAY
37275: PUSH
37276: LD_EXP 101
37280: PUSH
37281: LD_VAR 0 2
37285: ARRAY
37286: AND
37287: IFFALSE 37324
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
37289: LD_EXP 101
37293: PUSH
37294: LD_VAR 0 2
37298: ARRAY
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: PPUSH
37304: CALL_OW 255
37308: PPUSH
37309: LD_EXP 100
37313: PUSH
37314: LD_VAR 0 2
37318: ARRAY
37319: PPUSH
37320: CALL 47132 0 2
37324: GO 37262
37326: POP
37327: POP
// end ;
37328: LD_VAR 0 1
37332: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
37333: LD_INT 0
37335: PPUSH
37336: PPUSH
37337: PPUSH
37338: PPUSH
37339: PPUSH
37340: PPUSH
37341: PPUSH
37342: PPUSH
// if not mc_bases or not mc_parking then
37343: LD_EXP 87
37347: NOT
37348: PUSH
37349: LD_EXP 111
37353: NOT
37354: OR
37355: IFFALSE 37359
// exit ;
37357: GO 38058
// for i = 1 to mc_bases do
37359: LD_ADDR_VAR 0 2
37363: PUSH
37364: DOUBLE
37365: LD_INT 1
37367: DEC
37368: ST_TO_ADDR
37369: LD_EXP 87
37373: PUSH
37374: FOR_TO
37375: IFFALSE 38056
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
37377: LD_EXP 87
37381: PUSH
37382: LD_VAR 0 2
37386: ARRAY
37387: NOT
37388: PUSH
37389: LD_EXP 111
37393: PUSH
37394: LD_VAR 0 2
37398: ARRAY
37399: NOT
37400: OR
37401: IFFALSE 37405
// continue ;
37403: GO 37374
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
37405: LD_ADDR_VAR 0 5
37409: PUSH
37410: LD_EXP 87
37414: PUSH
37415: LD_VAR 0 2
37419: ARRAY
37420: PUSH
37421: LD_INT 1
37423: ARRAY
37424: PPUSH
37425: CALL_OW 255
37429: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
37430: LD_ADDR_VAR 0 6
37434: PUSH
37435: LD_EXP 87
37439: PUSH
37440: LD_VAR 0 2
37444: ARRAY
37445: PPUSH
37446: LD_INT 30
37448: PUSH
37449: LD_INT 3
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 72
37460: ST_TO_ADDR
// if not fac then
37461: LD_VAR 0 6
37465: NOT
37466: IFFALSE 37517
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37468: LD_ADDR_VAR 0 6
37472: PUSH
37473: LD_EXP 87
37477: PUSH
37478: LD_VAR 0 2
37482: ARRAY
37483: PPUSH
37484: LD_INT 2
37486: PUSH
37487: LD_INT 30
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 30
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: PPUSH
37512: CALL_OW 72
37516: ST_TO_ADDR
// if not fac then
37517: LD_VAR 0 6
37521: NOT
37522: IFFALSE 37526
// continue ;
37524: GO 37374
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
37526: LD_ADDR_VAR 0 7
37530: PUSH
37531: LD_EXP 111
37535: PUSH
37536: LD_VAR 0 2
37540: ARRAY
37541: PPUSH
37542: LD_INT 22
37544: PUSH
37545: LD_VAR 0 5
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 21
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: LD_INT 24
37569: PUSH
37570: LD_INT 1000
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: PPUSH
37586: CALL_OW 70
37590: ST_TO_ADDR
// for j in fac do
37591: LD_ADDR_VAR 0 3
37595: PUSH
37596: LD_VAR 0 6
37600: PUSH
37601: FOR_IN
37602: IFFALSE 37683
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
37604: LD_ADDR_VAR 0 7
37608: PUSH
37609: LD_VAR 0 7
37613: PUSH
37614: LD_INT 22
37616: PUSH
37617: LD_VAR 0 5
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 91
37628: PUSH
37629: LD_VAR 0 3
37633: PUSH
37634: LD_INT 15
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 21
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 24
37657: PUSH
37658: LD_INT 1000
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: PPUSH
37675: CALL_OW 69
37679: UNION
37680: ST_TO_ADDR
37681: GO 37601
37683: POP
37684: POP
// if not vehs then
37685: LD_VAR 0 7
37689: NOT
37690: IFFALSE 37716
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
37692: LD_ADDR_EXP 99
37696: PUSH
37697: LD_EXP 99
37701: PPUSH
37702: LD_VAR 0 2
37706: PPUSH
37707: EMPTY
37708: PPUSH
37709: CALL_OW 1
37713: ST_TO_ADDR
// continue ;
37714: GO 37374
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
37716: LD_ADDR_VAR 0 8
37720: PUSH
37721: LD_EXP 87
37725: PUSH
37726: LD_VAR 0 2
37730: ARRAY
37731: PPUSH
37732: LD_INT 30
37734: PUSH
37735: LD_INT 3
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PPUSH
37742: CALL_OW 72
37746: ST_TO_ADDR
// if tmp then
37747: LD_VAR 0 8
37751: IFFALSE 37854
// begin for j in tmp do
37753: LD_ADDR_VAR 0 3
37757: PUSH
37758: LD_VAR 0 8
37762: PUSH
37763: FOR_IN
37764: IFFALSE 37852
// for k in UnitsInside ( j ) do
37766: LD_ADDR_VAR 0 4
37770: PUSH
37771: LD_VAR 0 3
37775: PPUSH
37776: CALL_OW 313
37780: PUSH
37781: FOR_IN
37782: IFFALSE 37848
// if k then
37784: LD_VAR 0 4
37788: IFFALSE 37846
// if not k in mc_repair_vehicle [ i ] then
37790: LD_VAR 0 4
37794: PUSH
37795: LD_EXP 99
37799: PUSH
37800: LD_VAR 0 2
37804: ARRAY
37805: IN
37806: NOT
37807: IFFALSE 37846
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
37809: LD_ADDR_EXP 99
37813: PUSH
37814: LD_EXP 99
37818: PPUSH
37819: LD_VAR 0 2
37823: PPUSH
37824: LD_EXP 99
37828: PUSH
37829: LD_VAR 0 2
37833: ARRAY
37834: PUSH
37835: LD_VAR 0 4
37839: UNION
37840: PPUSH
37841: CALL_OW 1
37845: ST_TO_ADDR
37846: GO 37781
37848: POP
37849: POP
37850: GO 37763
37852: POP
37853: POP
// end ; if not mc_repair_vehicle [ i ] then
37854: LD_EXP 99
37858: PUSH
37859: LD_VAR 0 2
37863: ARRAY
37864: NOT
37865: IFFALSE 37869
// continue ;
37867: GO 37374
// for j in mc_repair_vehicle [ i ] do
37869: LD_ADDR_VAR 0 3
37873: PUSH
37874: LD_EXP 99
37878: PUSH
37879: LD_VAR 0 2
37883: ARRAY
37884: PUSH
37885: FOR_IN
37886: IFFALSE 38052
// begin if GetClass ( j ) <> 3 then
37888: LD_VAR 0 3
37892: PPUSH
37893: CALL_OW 257
37897: PUSH
37898: LD_INT 3
37900: NONEQUAL
37901: IFFALSE 37942
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
37903: LD_ADDR_EXP 99
37907: PUSH
37908: LD_EXP 99
37912: PPUSH
37913: LD_VAR 0 2
37917: PPUSH
37918: LD_EXP 99
37922: PUSH
37923: LD_VAR 0 2
37927: ARRAY
37928: PUSH
37929: LD_VAR 0 3
37933: DIFF
37934: PPUSH
37935: CALL_OW 1
37939: ST_TO_ADDR
// continue ;
37940: GO 37885
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
37942: LD_VAR 0 3
37946: PPUSH
37947: CALL_OW 311
37951: NOT
37952: PUSH
37953: LD_VAR 0 3
37957: PUSH
37958: LD_EXP 90
37962: PUSH
37963: LD_VAR 0 2
37967: ARRAY
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: IN
37973: NOT
37974: AND
37975: PUSH
37976: LD_VAR 0 3
37980: PUSH
37981: LD_EXP 90
37985: PUSH
37986: LD_VAR 0 2
37990: ARRAY
37991: PUSH
37992: LD_INT 2
37994: ARRAY
37995: IN
37996: NOT
37997: AND
37998: IFFALSE 38050
// begin if IsInUnit ( j ) then
38000: LD_VAR 0 3
38004: PPUSH
38005: CALL_OW 310
38009: IFFALSE 38020
// ComExitBuilding ( j ) ;
38011: LD_VAR 0 3
38015: PPUSH
38016: CALL_OW 122
// if not HasTask ( j ) then
38020: LD_VAR 0 3
38024: PPUSH
38025: CALL_OW 314
38029: NOT
38030: IFFALSE 38050
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
38032: LD_VAR 0 3
38036: PPUSH
38037: LD_VAR 0 7
38041: PUSH
38042: LD_INT 1
38044: ARRAY
38045: PPUSH
38046: CALL_OW 189
// end ; end ;
38050: GO 37885
38052: POP
38053: POP
// end ;
38054: GO 37374
38056: POP
38057: POP
// end ;
38058: LD_VAR 0 1
38062: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
38063: LD_INT 0
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
38069: PPUSH
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
// if not mc_bases then
38076: LD_EXP 87
38080: NOT
38081: IFFALSE 38085
// exit ;
38083: GO 38887
// for i = 1 to mc_bases do
38085: LD_ADDR_VAR 0 2
38089: PUSH
38090: DOUBLE
38091: LD_INT 1
38093: DEC
38094: ST_TO_ADDR
38095: LD_EXP 87
38099: PUSH
38100: FOR_TO
38101: IFFALSE 38885
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
38103: LD_EXP 115
38107: PUSH
38108: LD_VAR 0 2
38112: ARRAY
38113: NOT
38114: PUSH
38115: LD_EXP 90
38119: PUSH
38120: LD_VAR 0 2
38124: ARRAY
38125: PUSH
38126: LD_INT 1
38128: ARRAY
38129: OR
38130: PUSH
38131: LD_EXP 90
38135: PUSH
38136: LD_VAR 0 2
38140: ARRAY
38141: PUSH
38142: LD_INT 2
38144: ARRAY
38145: OR
38146: PUSH
38147: LD_EXP 113
38151: PUSH
38152: LD_VAR 0 2
38156: ARRAY
38157: PPUSH
38158: LD_INT 1
38160: PPUSH
38161: CALL_OW 325
38165: NOT
38166: OR
38167: PUSH
38168: LD_EXP 110
38172: PUSH
38173: LD_VAR 0 2
38177: ARRAY
38178: OR
38179: IFFALSE 38183
// continue ;
38181: GO 38100
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
38183: LD_ADDR_VAR 0 8
38187: PUSH
38188: LD_EXP 87
38192: PUSH
38193: LD_VAR 0 2
38197: ARRAY
38198: PPUSH
38199: LD_INT 25
38201: PUSH
38202: LD_INT 4
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 50
38211: PUSH
38212: EMPTY
38213: LIST
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: LD_INT 60
38220: PUSH
38221: EMPTY
38222: LIST
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: PPUSH
38233: CALL_OW 72
38237: PUSH
38238: LD_EXP 91
38242: PUSH
38243: LD_VAR 0 2
38247: ARRAY
38248: DIFF
38249: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38250: LD_ADDR_VAR 0 9
38254: PUSH
38255: LD_EXP 87
38259: PUSH
38260: LD_VAR 0 2
38264: ARRAY
38265: PPUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 30
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 30
38281: PUSH
38282: LD_INT 1
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: LIST
38293: PPUSH
38294: CALL_OW 72
38298: ST_TO_ADDR
// if not tmp or not dep then
38299: LD_VAR 0 8
38303: NOT
38304: PUSH
38305: LD_VAR 0 9
38309: NOT
38310: OR
38311: IFFALSE 38315
// continue ;
38313: GO 38100
// side := GetSide ( tmp [ 1 ] ) ;
38315: LD_ADDR_VAR 0 11
38319: PUSH
38320: LD_VAR 0 8
38324: PUSH
38325: LD_INT 1
38327: ARRAY
38328: PPUSH
38329: CALL_OW 255
38333: ST_TO_ADDR
// dep := dep [ 1 ] ;
38334: LD_ADDR_VAR 0 9
38338: PUSH
38339: LD_VAR 0 9
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
38348: LD_ADDR_VAR 0 7
38352: PUSH
38353: LD_EXP 115
38357: PUSH
38358: LD_VAR 0 2
38362: ARRAY
38363: PPUSH
38364: LD_INT 22
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 25
38376: PUSH
38377: LD_INT 12
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PPUSH
38388: CALL_OW 70
38392: PUSH
38393: LD_INT 22
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 25
38405: PUSH
38406: LD_INT 12
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 91
38415: PUSH
38416: LD_VAR 0 9
38420: PUSH
38421: LD_INT 20
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: LIST
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: PPUSH
38434: CALL_OW 69
38438: UNION
38439: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
38440: LD_ADDR_VAR 0 10
38444: PUSH
38445: LD_EXP 115
38449: PUSH
38450: LD_VAR 0 2
38454: ARRAY
38455: PPUSH
38456: LD_INT 81
38458: PUSH
38459: LD_VAR 0 11
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PPUSH
38468: CALL_OW 70
38472: ST_TO_ADDR
// if not apes or danger_at_area then
38473: LD_VAR 0 7
38477: NOT
38478: PUSH
38479: LD_VAR 0 10
38483: OR
38484: IFFALSE 38534
// begin if mc_taming [ i ] then
38486: LD_EXP 118
38490: PUSH
38491: LD_VAR 0 2
38495: ARRAY
38496: IFFALSE 38532
// begin MC_Reset ( i , 121 ) ;
38498: LD_VAR 0 2
38502: PPUSH
38503: LD_INT 121
38505: PPUSH
38506: CALL 23985 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
38510: LD_ADDR_EXP 118
38514: PUSH
38515: LD_EXP 118
38519: PPUSH
38520: LD_VAR 0 2
38524: PPUSH
38525: EMPTY
38526: PPUSH
38527: CALL_OW 1
38531: ST_TO_ADDR
// end ; continue ;
38532: GO 38100
// end ; for j in tmp do
38534: LD_ADDR_VAR 0 3
38538: PUSH
38539: LD_VAR 0 8
38543: PUSH
38544: FOR_IN
38545: IFFALSE 38881
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
38547: LD_VAR 0 3
38551: PUSH
38552: LD_EXP 118
38556: PUSH
38557: LD_VAR 0 2
38561: ARRAY
38562: IN
38563: NOT
38564: PUSH
38565: LD_EXP 118
38569: PUSH
38570: LD_VAR 0 2
38574: ARRAY
38575: PUSH
38576: LD_INT 3
38578: LESS
38579: AND
38580: IFFALSE 38638
// begin SetTag ( j , 121 ) ;
38582: LD_VAR 0 3
38586: PPUSH
38587: LD_INT 121
38589: PPUSH
38590: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
38594: LD_ADDR_EXP 118
38598: PUSH
38599: LD_EXP 118
38603: PPUSH
38604: LD_VAR 0 2
38608: PUSH
38609: LD_EXP 118
38613: PUSH
38614: LD_VAR 0 2
38618: ARRAY
38619: PUSH
38620: LD_INT 1
38622: PLUS
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: LD_VAR 0 3
38632: PPUSH
38633: CALL 50143 0 3
38637: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
38638: LD_VAR 0 3
38642: PUSH
38643: LD_EXP 118
38647: PUSH
38648: LD_VAR 0 2
38652: ARRAY
38653: IN
38654: IFFALSE 38879
// begin if GetClass ( j ) <> 4 then
38656: LD_VAR 0 3
38660: PPUSH
38661: CALL_OW 257
38665: PUSH
38666: LD_INT 4
38668: NONEQUAL
38669: IFFALSE 38722
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
38671: LD_ADDR_EXP 118
38675: PUSH
38676: LD_EXP 118
38680: PPUSH
38681: LD_VAR 0 2
38685: PPUSH
38686: LD_EXP 118
38690: PUSH
38691: LD_VAR 0 2
38695: ARRAY
38696: PUSH
38697: LD_VAR 0 3
38701: DIFF
38702: PPUSH
38703: CALL_OW 1
38707: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38708: LD_VAR 0 3
38712: PPUSH
38713: LD_INT 0
38715: PPUSH
38716: CALL_OW 109
// continue ;
38720: GO 38544
// end ; if IsInUnit ( j ) then
38722: LD_VAR 0 3
38726: PPUSH
38727: CALL_OW 310
38731: IFFALSE 38742
// ComExitBuilding ( j ) ;
38733: LD_VAR 0 3
38737: PPUSH
38738: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
38742: LD_ADDR_VAR 0 6
38746: PUSH
38747: LD_VAR 0 7
38751: PPUSH
38752: LD_VAR 0 3
38756: PPUSH
38757: CALL_OW 74
38761: ST_TO_ADDR
// if not ape then
38762: LD_VAR 0 6
38766: NOT
38767: IFFALSE 38771
// break ;
38769: GO 38881
// x := GetX ( ape ) ;
38771: LD_ADDR_VAR 0 4
38775: PUSH
38776: LD_VAR 0 6
38780: PPUSH
38781: CALL_OW 250
38785: ST_TO_ADDR
// y := GetY ( ape ) ;
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_VAR 0 6
38795: PPUSH
38796: CALL_OW 251
38800: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38801: LD_VAR 0 4
38805: PPUSH
38806: LD_VAR 0 5
38810: PPUSH
38811: CALL_OW 488
38815: NOT
38816: PUSH
38817: LD_VAR 0 11
38821: PPUSH
38822: LD_VAR 0 4
38826: PPUSH
38827: LD_VAR 0 5
38831: PPUSH
38832: LD_INT 20
38834: PPUSH
38835: CALL 51039 0 4
38839: PUSH
38840: LD_INT 4
38842: ARRAY
38843: OR
38844: IFFALSE 38848
// break ;
38846: GO 38881
// if not HasTask ( j ) then
38848: LD_VAR 0 3
38852: PPUSH
38853: CALL_OW 314
38857: NOT
38858: IFFALSE 38879
// ComTameXY ( j , x , y ) ;
38860: LD_VAR 0 3
38864: PPUSH
38865: LD_VAR 0 4
38869: PPUSH
38870: LD_VAR 0 5
38874: PPUSH
38875: CALL_OW 131
// end ; end ;
38879: GO 38544
38881: POP
38882: POP
// end ;
38883: GO 38100
38885: POP
38886: POP
// end ;
38887: LD_VAR 0 1
38891: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
38892: LD_INT 0
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
// if not mc_bases then
38902: LD_EXP 87
38906: NOT
38907: IFFALSE 38911
// exit ;
38909: GO 39537
// for i = 1 to mc_bases do
38911: LD_ADDR_VAR 0 2
38915: PUSH
38916: DOUBLE
38917: LD_INT 1
38919: DEC
38920: ST_TO_ADDR
38921: LD_EXP 87
38925: PUSH
38926: FOR_TO
38927: IFFALSE 39535
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
38929: LD_EXP 116
38933: PUSH
38934: LD_VAR 0 2
38938: ARRAY
38939: NOT
38940: PUSH
38941: LD_EXP 116
38945: PUSH
38946: LD_VAR 0 2
38950: ARRAY
38951: PPUSH
38952: LD_INT 25
38954: PUSH
38955: LD_INT 12
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PPUSH
38962: CALL_OW 72
38966: NOT
38967: OR
38968: IFFALSE 38972
// continue ;
38970: GO 38926
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
38972: LD_ADDR_VAR 0 5
38976: PUSH
38977: LD_EXP 116
38981: PUSH
38982: LD_VAR 0 2
38986: ARRAY
38987: PUSH
38988: LD_INT 1
38990: ARRAY
38991: PPUSH
38992: CALL_OW 255
38996: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
38997: LD_VAR 0 5
39001: PPUSH
39002: LD_INT 2
39004: PPUSH
39005: CALL_OW 325
39009: IFFALSE 39262
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39011: LD_ADDR_VAR 0 4
39015: PUSH
39016: LD_EXP 116
39020: PUSH
39021: LD_VAR 0 2
39025: ARRAY
39026: PPUSH
39027: LD_INT 25
39029: PUSH
39030: LD_INT 16
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PPUSH
39037: CALL_OW 72
39041: ST_TO_ADDR
// if tmp < 6 then
39042: LD_VAR 0 4
39046: PUSH
39047: LD_INT 6
39049: LESS
39050: IFFALSE 39262
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
39052: LD_ADDR_VAR 0 6
39056: PUSH
39057: LD_EXP 87
39061: PUSH
39062: LD_VAR 0 2
39066: ARRAY
39067: PPUSH
39068: LD_INT 2
39070: PUSH
39071: LD_INT 30
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 30
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: PPUSH
39096: CALL_OW 72
39100: ST_TO_ADDR
// if depot then
39101: LD_VAR 0 6
39105: IFFALSE 39262
// begin selected := 0 ;
39107: LD_ADDR_VAR 0 7
39111: PUSH
39112: LD_INT 0
39114: ST_TO_ADDR
// for j in depot do
39115: LD_ADDR_VAR 0 3
39119: PUSH
39120: LD_VAR 0 6
39124: PUSH
39125: FOR_IN
39126: IFFALSE 39157
// begin if UnitsInside ( j ) < 6 then
39128: LD_VAR 0 3
39132: PPUSH
39133: CALL_OW 313
39137: PUSH
39138: LD_INT 6
39140: LESS
39141: IFFALSE 39155
// begin selected := j ;
39143: LD_ADDR_VAR 0 7
39147: PUSH
39148: LD_VAR 0 3
39152: ST_TO_ADDR
// break ;
39153: GO 39157
// end ; end ;
39155: GO 39125
39157: POP
39158: POP
// if selected then
39159: LD_VAR 0 7
39163: IFFALSE 39262
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39165: LD_ADDR_VAR 0 3
39169: PUSH
39170: LD_EXP 116
39174: PUSH
39175: LD_VAR 0 2
39179: ARRAY
39180: PPUSH
39181: LD_INT 25
39183: PUSH
39184: LD_INT 12
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PPUSH
39191: CALL_OW 72
39195: PUSH
39196: FOR_IN
39197: IFFALSE 39260
// if not HasTask ( j ) then
39199: LD_VAR 0 3
39203: PPUSH
39204: CALL_OW 314
39208: NOT
39209: IFFALSE 39258
// begin if not IsInUnit ( j ) then
39211: LD_VAR 0 3
39215: PPUSH
39216: CALL_OW 310
39220: NOT
39221: IFFALSE 39237
// ComEnterUnit ( j , selected ) ;
39223: LD_VAR 0 3
39227: PPUSH
39228: LD_VAR 0 7
39232: PPUSH
39233: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
39237: LD_VAR 0 3
39241: PPUSH
39242: LD_INT 16
39244: PPUSH
39245: CALL_OW 183
// AddComExitBuilding ( j ) ;
39249: LD_VAR 0 3
39253: PPUSH
39254: CALL_OW 182
// end ;
39258: GO 39196
39260: POP
39261: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
39262: LD_VAR 0 5
39266: PPUSH
39267: LD_INT 11
39269: PPUSH
39270: CALL_OW 325
39274: IFFALSE 39533
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
39276: LD_ADDR_VAR 0 4
39280: PUSH
39281: LD_EXP 116
39285: PUSH
39286: LD_VAR 0 2
39290: ARRAY
39291: PPUSH
39292: LD_INT 25
39294: PUSH
39295: LD_INT 16
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PPUSH
39302: CALL_OW 72
39306: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
39307: LD_VAR 0 4
39311: PUSH
39312: LD_INT 6
39314: GREATEREQUAL
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: LD_INT 2
39323: PPUSH
39324: CALL_OW 325
39328: NOT
39329: OR
39330: IFFALSE 39533
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
39332: LD_ADDR_VAR 0 8
39336: PUSH
39337: LD_EXP 87
39341: PUSH
39342: LD_VAR 0 2
39346: ARRAY
39347: PPUSH
39348: LD_INT 2
39350: PUSH
39351: LD_INT 30
39353: PUSH
39354: LD_INT 4
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 30
39363: PUSH
39364: LD_INT 5
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: PPUSH
39376: CALL_OW 72
39380: ST_TO_ADDR
// if barracks then
39381: LD_VAR 0 8
39385: IFFALSE 39533
// begin selected := 0 ;
39387: LD_ADDR_VAR 0 7
39391: PUSH
39392: LD_INT 0
39394: ST_TO_ADDR
// for j in barracks do
39395: LD_ADDR_VAR 0 3
39399: PUSH
39400: LD_VAR 0 8
39404: PUSH
39405: FOR_IN
39406: IFFALSE 39437
// begin if UnitsInside ( j ) < 6 then
39408: LD_VAR 0 3
39412: PPUSH
39413: CALL_OW 313
39417: PUSH
39418: LD_INT 6
39420: LESS
39421: IFFALSE 39435
// begin selected := j ;
39423: LD_ADDR_VAR 0 7
39427: PUSH
39428: LD_VAR 0 3
39432: ST_TO_ADDR
// break ;
39433: GO 39437
// end ; end ;
39435: GO 39405
39437: POP
39438: POP
// if selected then
39439: LD_VAR 0 7
39443: IFFALSE 39533
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
39445: LD_ADDR_VAR 0 3
39449: PUSH
39450: LD_EXP 116
39454: PUSH
39455: LD_VAR 0 2
39459: ARRAY
39460: PPUSH
39461: LD_INT 25
39463: PUSH
39464: LD_INT 12
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PPUSH
39471: CALL_OW 72
39475: PUSH
39476: FOR_IN
39477: IFFALSE 39531
// if not IsInUnit ( j ) and not HasTask ( j ) then
39479: LD_VAR 0 3
39483: PPUSH
39484: CALL_OW 310
39488: NOT
39489: PUSH
39490: LD_VAR 0 3
39494: PPUSH
39495: CALL_OW 314
39499: NOT
39500: AND
39501: IFFALSE 39529
// begin ComEnterUnit ( j , selected ) ;
39503: LD_VAR 0 3
39507: PPUSH
39508: LD_VAR 0 7
39512: PPUSH
39513: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
39517: LD_VAR 0 3
39521: PPUSH
39522: LD_INT 15
39524: PPUSH
39525: CALL_OW 183
// end ;
39529: GO 39476
39531: POP
39532: POP
// end ; end ; end ; end ; end ;
39533: GO 38926
39535: POP
39536: POP
// end ;
39537: LD_VAR 0 1
39541: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
39542: LD_INT 0
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
// if not mc_bases then
39548: LD_EXP 87
39552: NOT
39553: IFFALSE 39557
// exit ;
39555: GO 39735
// for i = 1 to mc_bases do
39557: LD_ADDR_VAR 0 2
39561: PUSH
39562: DOUBLE
39563: LD_INT 1
39565: DEC
39566: ST_TO_ADDR
39567: LD_EXP 87
39571: PUSH
39572: FOR_TO
39573: IFFALSE 39733
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
39575: LD_ADDR_VAR 0 4
39579: PUSH
39580: LD_EXP 87
39584: PUSH
39585: LD_VAR 0 2
39589: ARRAY
39590: PPUSH
39591: LD_INT 25
39593: PUSH
39594: LD_INT 9
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PPUSH
39601: CALL_OW 72
39605: ST_TO_ADDR
// if not tmp then
39606: LD_VAR 0 4
39610: NOT
39611: IFFALSE 39615
// continue ;
39613: GO 39572
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
39615: LD_EXP 113
39619: PUSH
39620: LD_VAR 0 2
39624: ARRAY
39625: PPUSH
39626: LD_INT 29
39628: PPUSH
39629: CALL_OW 325
39633: NOT
39634: PUSH
39635: LD_EXP 113
39639: PUSH
39640: LD_VAR 0 2
39644: ARRAY
39645: PPUSH
39646: LD_INT 28
39648: PPUSH
39649: CALL_OW 325
39653: NOT
39654: AND
39655: IFFALSE 39659
// continue ;
39657: GO 39572
// for j in tmp do
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_VAR 0 4
39668: PUSH
39669: FOR_IN
39670: IFFALSE 39729
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
39672: LD_VAR 0 3
39676: PUSH
39677: LD_EXP 90
39681: PUSH
39682: LD_VAR 0 2
39686: ARRAY
39687: PUSH
39688: LD_INT 1
39690: ARRAY
39691: IN
39692: NOT
39693: PUSH
39694: LD_VAR 0 3
39698: PUSH
39699: LD_EXP 90
39703: PUSH
39704: LD_VAR 0 2
39708: ARRAY
39709: PUSH
39710: LD_INT 2
39712: ARRAY
39713: IN
39714: NOT
39715: AND
39716: IFFALSE 39727
// ComSpaceTimeShoot ( j ) ;
39718: LD_VAR 0 3
39722: PPUSH
39723: CALL 46140 0 1
39727: GO 39669
39729: POP
39730: POP
// end ;
39731: GO 39572
39733: POP
39734: POP
// end ;
39735: LD_VAR 0 1
39739: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
39740: LD_INT 0
39742: PPUSH
39743: PPUSH
39744: PPUSH
39745: PPUSH
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
// if not mc_bases then
39751: LD_EXP 87
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 40382
// for i = 1 to mc_bases do
39760: LD_ADDR_VAR 0 2
39764: PUSH
39765: DOUBLE
39766: LD_INT 1
39768: DEC
39769: ST_TO_ADDR
39770: LD_EXP 87
39774: PUSH
39775: FOR_TO
39776: IFFALSE 40380
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
39778: LD_EXP 122
39782: PUSH
39783: LD_VAR 0 2
39787: ARRAY
39788: NOT
39789: PUSH
39790: LD_INT 38
39792: PPUSH
39793: LD_EXP 113
39797: PUSH
39798: LD_VAR 0 2
39802: ARRAY
39803: PPUSH
39804: CALL_OW 321
39808: PUSH
39809: LD_INT 2
39811: NONEQUAL
39812: OR
39813: IFFALSE 39817
// continue ;
39815: GO 39775
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
39817: LD_ADDR_VAR 0 8
39821: PUSH
39822: LD_EXP 87
39826: PUSH
39827: LD_VAR 0 2
39831: ARRAY
39832: PPUSH
39833: LD_INT 30
39835: PUSH
39836: LD_INT 34
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PPUSH
39843: CALL_OW 72
39847: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
39848: LD_ADDR_VAR 0 9
39852: PUSH
39853: LD_EXP 87
39857: PUSH
39858: LD_VAR 0 2
39862: ARRAY
39863: PPUSH
39864: LD_INT 25
39866: PUSH
39867: LD_INT 4
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PPUSH
39874: CALL_OW 72
39878: PPUSH
39879: LD_INT 0
39881: PPUSH
39882: CALL 78704 0 2
39886: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
39887: LD_VAR 0 9
39891: NOT
39892: PUSH
39893: LD_VAR 0 8
39897: NOT
39898: OR
39899: PUSH
39900: LD_EXP 87
39904: PUSH
39905: LD_VAR 0 2
39909: ARRAY
39910: PPUSH
39911: LD_INT 124
39913: PPUSH
39914: CALL 78704 0 2
39918: OR
39919: IFFALSE 39923
// continue ;
39921: GO 39775
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
39923: LD_EXP 123
39927: PUSH
39928: LD_VAR 0 2
39932: ARRAY
39933: PUSH
39934: LD_EXP 122
39938: PUSH
39939: LD_VAR 0 2
39943: ARRAY
39944: LESS
39945: PUSH
39946: LD_EXP 123
39950: PUSH
39951: LD_VAR 0 2
39955: ARRAY
39956: PUSH
39957: LD_VAR 0 8
39961: LESS
39962: AND
39963: IFFALSE 40378
// begin tmp := sci [ 1 ] ;
39965: LD_ADDR_VAR 0 7
39969: PUSH
39970: LD_VAR 0 9
39974: PUSH
39975: LD_INT 1
39977: ARRAY
39978: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
39979: LD_VAR 0 7
39983: PPUSH
39984: LD_INT 124
39986: PPUSH
39987: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: DOUBLE
39997: LD_EXP 122
40001: PUSH
40002: LD_VAR 0 2
40006: ARRAY
40007: INC
40008: ST_TO_ADDR
40009: LD_EXP 122
40013: PUSH
40014: LD_VAR 0 2
40018: ARRAY
40019: PUSH
40020: FOR_DOWNTO
40021: IFFALSE 40364
// begin if IsInUnit ( tmp ) then
40023: LD_VAR 0 7
40027: PPUSH
40028: CALL_OW 310
40032: IFFALSE 40043
// ComExitBuilding ( tmp ) ;
40034: LD_VAR 0 7
40038: PPUSH
40039: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
40043: LD_INT 35
40045: PPUSH
40046: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
40050: LD_VAR 0 7
40054: PPUSH
40055: CALL_OW 310
40059: NOT
40060: PUSH
40061: LD_VAR 0 7
40065: PPUSH
40066: CALL_OW 314
40070: NOT
40071: AND
40072: IFFALSE 40043
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
40074: LD_ADDR_VAR 0 6
40078: PUSH
40079: LD_VAR 0 7
40083: PPUSH
40084: CALL_OW 250
40088: PUSH
40089: LD_VAR 0 7
40093: PPUSH
40094: CALL_OW 251
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40103: LD_INT 35
40105: PPUSH
40106: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
40110: LD_ADDR_VAR 0 4
40114: PUSH
40115: LD_EXP 122
40119: PUSH
40120: LD_VAR 0 2
40124: ARRAY
40125: PUSH
40126: LD_VAR 0 3
40130: ARRAY
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
40136: LD_ADDR_VAR 0 5
40140: PUSH
40141: LD_EXP 122
40145: PUSH
40146: LD_VAR 0 2
40150: ARRAY
40151: PUSH
40152: LD_VAR 0 3
40156: ARRAY
40157: PUSH
40158: LD_INT 2
40160: ARRAY
40161: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
40162: LD_VAR 0 7
40166: PPUSH
40167: LD_INT 10
40169: PPUSH
40170: CALL 52736 0 2
40174: PUSH
40175: LD_INT 4
40177: ARRAY
40178: IFFALSE 40216
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
40180: LD_VAR 0 7
40184: PPUSH
40185: LD_VAR 0 6
40189: PUSH
40190: LD_INT 1
40192: ARRAY
40193: PPUSH
40194: LD_VAR 0 6
40198: PUSH
40199: LD_INT 2
40201: ARRAY
40202: PPUSH
40203: CALL_OW 111
// wait ( 0 0$10 ) ;
40207: LD_INT 350
40209: PPUSH
40210: CALL_OW 67
// end else
40214: GO 40242
// begin ComMoveXY ( tmp , x , y ) ;
40216: LD_VAR 0 7
40220: PPUSH
40221: LD_VAR 0 4
40225: PPUSH
40226: LD_VAR 0 5
40230: PPUSH
40231: CALL_OW 111
// wait ( 0 0$3 ) ;
40235: LD_INT 105
40237: PPUSH
40238: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
40242: LD_VAR 0 7
40246: PPUSH
40247: LD_VAR 0 4
40251: PPUSH
40252: LD_VAR 0 5
40256: PPUSH
40257: CALL_OW 307
40261: IFFALSE 40103
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
40263: LD_VAR 0 7
40267: PPUSH
40268: LD_VAR 0 4
40272: PPUSH
40273: LD_VAR 0 5
40277: PPUSH
40278: LD_VAR 0 8
40282: PUSH
40283: LD_VAR 0 3
40287: ARRAY
40288: PPUSH
40289: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
40293: LD_INT 35
40295: PPUSH
40296: CALL_OW 67
// until not HasTask ( tmp ) ;
40300: LD_VAR 0 7
40304: PPUSH
40305: CALL_OW 314
40309: NOT
40310: IFFALSE 40293
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
40312: LD_ADDR_EXP 123
40316: PUSH
40317: LD_EXP 123
40321: PPUSH
40322: LD_VAR 0 2
40326: PUSH
40327: LD_EXP 123
40331: PUSH
40332: LD_VAR 0 2
40336: ARRAY
40337: PUSH
40338: LD_INT 1
40340: PLUS
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PPUSH
40346: LD_VAR 0 8
40350: PUSH
40351: LD_VAR 0 3
40355: ARRAY
40356: PPUSH
40357: CALL 50143 0 3
40361: ST_TO_ADDR
// end ;
40362: GO 40020
40364: POP
40365: POP
// MC_Reset ( i , 124 ) ;
40366: LD_VAR 0 2
40370: PPUSH
40371: LD_INT 124
40373: PPUSH
40374: CALL 23985 0 2
// end ; end ;
40378: GO 39775
40380: POP
40381: POP
// end ;
40382: LD_VAR 0 1
40386: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
40387: LD_INT 0
40389: PPUSH
40390: PPUSH
40391: PPUSH
// if not mc_bases then
40392: LD_EXP 87
40396: NOT
40397: IFFALSE 40401
// exit ;
40399: GO 41007
// for i = 1 to mc_bases do
40401: LD_ADDR_VAR 0 2
40405: PUSH
40406: DOUBLE
40407: LD_INT 1
40409: DEC
40410: ST_TO_ADDR
40411: LD_EXP 87
40415: PUSH
40416: FOR_TO
40417: IFFALSE 41005
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
40419: LD_ADDR_VAR 0 3
40423: PUSH
40424: LD_EXP 87
40428: PUSH
40429: LD_VAR 0 2
40433: ARRAY
40434: PPUSH
40435: LD_INT 25
40437: PUSH
40438: LD_INT 4
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PPUSH
40445: CALL_OW 72
40449: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
40450: LD_VAR 0 3
40454: NOT
40455: PUSH
40456: LD_EXP 124
40460: PUSH
40461: LD_VAR 0 2
40465: ARRAY
40466: NOT
40467: OR
40468: PUSH
40469: LD_EXP 87
40473: PUSH
40474: LD_VAR 0 2
40478: ARRAY
40479: PPUSH
40480: LD_INT 2
40482: PUSH
40483: LD_INT 30
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 30
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PPUSH
40508: CALL_OW 72
40512: NOT
40513: OR
40514: IFFALSE 40564
// begin if mc_deposits_finder [ i ] then
40516: LD_EXP 125
40520: PUSH
40521: LD_VAR 0 2
40525: ARRAY
40526: IFFALSE 40562
// begin MC_Reset ( i , 125 ) ;
40528: LD_VAR 0 2
40532: PPUSH
40533: LD_INT 125
40535: PPUSH
40536: CALL 23985 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
40540: LD_ADDR_EXP 125
40544: PUSH
40545: LD_EXP 125
40549: PPUSH
40550: LD_VAR 0 2
40554: PPUSH
40555: EMPTY
40556: PPUSH
40557: CALL_OW 1
40561: ST_TO_ADDR
// end ; continue ;
40562: GO 40416
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
40564: LD_EXP 124
40568: PUSH
40569: LD_VAR 0 2
40573: ARRAY
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: PUSH
40579: LD_INT 3
40581: ARRAY
40582: PUSH
40583: LD_INT 1
40585: EQUAL
40586: PUSH
40587: LD_INT 20
40589: PPUSH
40590: LD_EXP 113
40594: PUSH
40595: LD_VAR 0 2
40599: ARRAY
40600: PPUSH
40601: CALL_OW 321
40605: PUSH
40606: LD_INT 2
40608: NONEQUAL
40609: AND
40610: IFFALSE 40660
// begin if mc_deposits_finder [ i ] then
40612: LD_EXP 125
40616: PUSH
40617: LD_VAR 0 2
40621: ARRAY
40622: IFFALSE 40658
// begin MC_Reset ( i , 125 ) ;
40624: LD_VAR 0 2
40628: PPUSH
40629: LD_INT 125
40631: PPUSH
40632: CALL 23985 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
40636: LD_ADDR_EXP 125
40640: PUSH
40641: LD_EXP 125
40645: PPUSH
40646: LD_VAR 0 2
40650: PPUSH
40651: EMPTY
40652: PPUSH
40653: CALL_OW 1
40657: ST_TO_ADDR
// end ; continue ;
40658: GO 40416
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
40660: LD_EXP 124
40664: PUSH
40665: LD_VAR 0 2
40669: ARRAY
40670: PUSH
40671: LD_INT 1
40673: ARRAY
40674: PUSH
40675: LD_INT 1
40677: ARRAY
40678: PPUSH
40679: LD_EXP 124
40683: PUSH
40684: LD_VAR 0 2
40688: ARRAY
40689: PUSH
40690: LD_INT 1
40692: ARRAY
40693: PUSH
40694: LD_INT 2
40696: ARRAY
40697: PPUSH
40698: LD_EXP 113
40702: PUSH
40703: LD_VAR 0 2
40707: ARRAY
40708: PPUSH
40709: CALL_OW 440
40713: IFFALSE 40756
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
40715: LD_ADDR_EXP 124
40719: PUSH
40720: LD_EXP 124
40724: PPUSH
40725: LD_VAR 0 2
40729: PPUSH
40730: LD_EXP 124
40734: PUSH
40735: LD_VAR 0 2
40739: ARRAY
40740: PPUSH
40741: LD_INT 1
40743: PPUSH
40744: CALL_OW 3
40748: PPUSH
40749: CALL_OW 1
40753: ST_TO_ADDR
40754: GO 41003
// begin if not mc_deposits_finder [ i ] then
40756: LD_EXP 125
40760: PUSH
40761: LD_VAR 0 2
40765: ARRAY
40766: NOT
40767: IFFALSE 40819
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
40769: LD_ADDR_EXP 125
40773: PUSH
40774: LD_EXP 125
40778: PPUSH
40779: LD_VAR 0 2
40783: PPUSH
40784: LD_VAR 0 3
40788: PUSH
40789: LD_INT 1
40791: ARRAY
40792: PUSH
40793: EMPTY
40794: LIST
40795: PPUSH
40796: CALL_OW 1
40800: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
40801: LD_VAR 0 3
40805: PUSH
40806: LD_INT 1
40808: ARRAY
40809: PPUSH
40810: LD_INT 125
40812: PPUSH
40813: CALL_OW 109
// end else
40817: GO 41003
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
40819: LD_EXP 125
40823: PUSH
40824: LD_VAR 0 2
40828: ARRAY
40829: PUSH
40830: LD_INT 1
40832: ARRAY
40833: PPUSH
40834: CALL_OW 310
40838: IFFALSE 40861
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
40840: LD_EXP 125
40844: PUSH
40845: LD_VAR 0 2
40849: ARRAY
40850: PUSH
40851: LD_INT 1
40853: ARRAY
40854: PPUSH
40855: CALL_OW 122
40859: GO 41003
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
40861: LD_EXP 125
40865: PUSH
40866: LD_VAR 0 2
40870: ARRAY
40871: PUSH
40872: LD_INT 1
40874: ARRAY
40875: PPUSH
40876: CALL_OW 314
40880: NOT
40881: PUSH
40882: LD_EXP 125
40886: PUSH
40887: LD_VAR 0 2
40891: ARRAY
40892: PUSH
40893: LD_INT 1
40895: ARRAY
40896: PPUSH
40897: LD_EXP 124
40901: PUSH
40902: LD_VAR 0 2
40906: ARRAY
40907: PUSH
40908: LD_INT 1
40910: ARRAY
40911: PUSH
40912: LD_INT 1
40914: ARRAY
40915: PPUSH
40916: LD_EXP 124
40920: PUSH
40921: LD_VAR 0 2
40925: ARRAY
40926: PUSH
40927: LD_INT 1
40929: ARRAY
40930: PUSH
40931: LD_INT 2
40933: ARRAY
40934: PPUSH
40935: CALL_OW 297
40939: PUSH
40940: LD_INT 6
40942: GREATER
40943: AND
40944: IFFALSE 41003
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
40946: LD_EXP 125
40950: PUSH
40951: LD_VAR 0 2
40955: ARRAY
40956: PUSH
40957: LD_INT 1
40959: ARRAY
40960: PPUSH
40961: LD_EXP 124
40965: PUSH
40966: LD_VAR 0 2
40970: ARRAY
40971: PUSH
40972: LD_INT 1
40974: ARRAY
40975: PUSH
40976: LD_INT 1
40978: ARRAY
40979: PPUSH
40980: LD_EXP 124
40984: PUSH
40985: LD_VAR 0 2
40989: ARRAY
40990: PUSH
40991: LD_INT 1
40993: ARRAY
40994: PUSH
40995: LD_INT 2
40997: ARRAY
40998: PPUSH
40999: CALL_OW 111
// end ; end ; end ;
41003: GO 40416
41005: POP
41006: POP
// end ;
41007: LD_VAR 0 1
41011: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
41012: LD_INT 0
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
41024: PPUSH
// if not mc_bases then
41025: LD_EXP 87
41029: NOT
41030: IFFALSE 41034
// exit ;
41032: GO 41974
// for i = 1 to mc_bases do
41034: LD_ADDR_VAR 0 2
41038: PUSH
41039: DOUBLE
41040: LD_INT 1
41042: DEC
41043: ST_TO_ADDR
41044: LD_EXP 87
41048: PUSH
41049: FOR_TO
41050: IFFALSE 41972
// begin if not mc_bases [ i ] or mc_scan [ i ] then
41052: LD_EXP 87
41056: PUSH
41057: LD_VAR 0 2
41061: ARRAY
41062: NOT
41063: PUSH
41064: LD_EXP 110
41068: PUSH
41069: LD_VAR 0 2
41073: ARRAY
41074: OR
41075: IFFALSE 41079
// continue ;
41077: GO 41049
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
41079: LD_ADDR_VAR 0 7
41083: PUSH
41084: LD_EXP 87
41088: PUSH
41089: LD_VAR 0 2
41093: ARRAY
41094: PUSH
41095: LD_INT 1
41097: ARRAY
41098: PPUSH
41099: CALL_OW 248
41103: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
41104: LD_VAR 0 7
41108: PUSH
41109: LD_INT 3
41111: EQUAL
41112: PUSH
41113: LD_EXP 106
41117: PUSH
41118: LD_VAR 0 2
41122: ARRAY
41123: PUSH
41124: LD_EXP 109
41128: PUSH
41129: LD_VAR 0 2
41133: ARRAY
41134: UNION
41135: PPUSH
41136: LD_INT 33
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PPUSH
41146: CALL_OW 72
41150: NOT
41151: OR
41152: IFFALSE 41156
// continue ;
41154: GO 41049
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
41156: LD_ADDR_VAR 0 9
41160: PUSH
41161: LD_EXP 87
41165: PUSH
41166: LD_VAR 0 2
41170: ARRAY
41171: PPUSH
41172: LD_INT 30
41174: PUSH
41175: LD_INT 36
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PPUSH
41182: CALL_OW 72
41186: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
41187: LD_ADDR_VAR 0 10
41191: PUSH
41192: LD_EXP 106
41196: PUSH
41197: LD_VAR 0 2
41201: ARRAY
41202: PPUSH
41203: LD_INT 34
41205: PUSH
41206: LD_INT 31
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PPUSH
41213: CALL_OW 72
41217: ST_TO_ADDR
// if not cts and not mcts then
41218: LD_VAR 0 9
41222: NOT
41223: PUSH
41224: LD_VAR 0 10
41228: NOT
41229: AND
41230: IFFALSE 41234
// continue ;
41232: GO 41049
// x := cts ;
41234: LD_ADDR_VAR 0 11
41238: PUSH
41239: LD_VAR 0 9
41243: ST_TO_ADDR
// if not x then
41244: LD_VAR 0 11
41248: NOT
41249: IFFALSE 41261
// x := mcts ;
41251: LD_ADDR_VAR 0 11
41255: PUSH
41256: LD_VAR 0 10
41260: ST_TO_ADDR
// if not x then
41261: LD_VAR 0 11
41265: NOT
41266: IFFALSE 41270
// continue ;
41268: GO 41049
// if mc_remote_driver [ i ] then
41270: LD_EXP 127
41274: PUSH
41275: LD_VAR 0 2
41279: ARRAY
41280: IFFALSE 41667
// for j in mc_remote_driver [ i ] do
41282: LD_ADDR_VAR 0 3
41286: PUSH
41287: LD_EXP 127
41291: PUSH
41292: LD_VAR 0 2
41296: ARRAY
41297: PUSH
41298: FOR_IN
41299: IFFALSE 41665
// begin if GetClass ( j ) <> 3 then
41301: LD_VAR 0 3
41305: PPUSH
41306: CALL_OW 257
41310: PUSH
41311: LD_INT 3
41313: NONEQUAL
41314: IFFALSE 41367
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
41316: LD_ADDR_EXP 127
41320: PUSH
41321: LD_EXP 127
41325: PPUSH
41326: LD_VAR 0 2
41330: PPUSH
41331: LD_EXP 127
41335: PUSH
41336: LD_VAR 0 2
41340: ARRAY
41341: PUSH
41342: LD_VAR 0 3
41346: DIFF
41347: PPUSH
41348: CALL_OW 1
41352: ST_TO_ADDR
// SetTag ( j , 0 ) ;
41353: LD_VAR 0 3
41357: PPUSH
41358: LD_INT 0
41360: PPUSH
41361: CALL_OW 109
// continue ;
41365: GO 41298
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
41367: LD_EXP 106
41371: PUSH
41372: LD_VAR 0 2
41376: ARRAY
41377: PPUSH
41378: LD_INT 34
41380: PUSH
41381: LD_INT 31
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 58
41390: PUSH
41391: EMPTY
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PPUSH
41398: CALL_OW 72
41402: PUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: CALL 78792 0 1
41412: NOT
41413: AND
41414: IFFALSE 41485
// begin if IsInUnit ( j ) then
41416: LD_VAR 0 3
41420: PPUSH
41421: CALL_OW 310
41425: IFFALSE 41436
// ComExitBuilding ( j ) ;
41427: LD_VAR 0 3
41431: PPUSH
41432: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
41436: LD_VAR 0 3
41440: PPUSH
41441: LD_EXP 106
41445: PUSH
41446: LD_VAR 0 2
41450: ARRAY
41451: PPUSH
41452: LD_INT 34
41454: PUSH
41455: LD_INT 31
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 58
41464: PUSH
41465: EMPTY
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PPUSH
41472: CALL_OW 72
41476: PUSH
41477: LD_INT 1
41479: ARRAY
41480: PPUSH
41481: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
41485: LD_VAR 0 3
41489: PPUSH
41490: CALL_OW 310
41494: NOT
41495: PUSH
41496: LD_VAR 0 3
41500: PPUSH
41501: CALL_OW 310
41505: PPUSH
41506: CALL_OW 266
41510: PUSH
41511: LD_INT 36
41513: NONEQUAL
41514: PUSH
41515: LD_VAR 0 3
41519: PPUSH
41520: CALL 78792 0 1
41524: NOT
41525: AND
41526: OR
41527: IFFALSE 41663
// begin if IsInUnit ( j ) then
41529: LD_VAR 0 3
41533: PPUSH
41534: CALL_OW 310
41538: IFFALSE 41549
// ComExitBuilding ( j ) ;
41540: LD_VAR 0 3
41544: PPUSH
41545: CALL_OW 122
// ct := 0 ;
41549: LD_ADDR_VAR 0 8
41553: PUSH
41554: LD_INT 0
41556: ST_TO_ADDR
// for k in x do
41557: LD_ADDR_VAR 0 4
41561: PUSH
41562: LD_VAR 0 11
41566: PUSH
41567: FOR_IN
41568: IFFALSE 41641
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
41570: LD_VAR 0 4
41574: PPUSH
41575: CALL_OW 264
41579: PUSH
41580: LD_INT 31
41582: EQUAL
41583: PUSH
41584: LD_VAR 0 4
41588: PPUSH
41589: CALL_OW 311
41593: NOT
41594: AND
41595: PUSH
41596: LD_VAR 0 4
41600: PPUSH
41601: CALL_OW 266
41605: PUSH
41606: LD_INT 36
41608: EQUAL
41609: PUSH
41610: LD_VAR 0 4
41614: PPUSH
41615: CALL_OW 313
41619: PUSH
41620: LD_INT 3
41622: LESS
41623: AND
41624: OR
41625: IFFALSE 41639
// begin ct := k ;
41627: LD_ADDR_VAR 0 8
41631: PUSH
41632: LD_VAR 0 4
41636: ST_TO_ADDR
// break ;
41637: GO 41641
// end ;
41639: GO 41567
41641: POP
41642: POP
// if ct then
41643: LD_VAR 0 8
41647: IFFALSE 41663
// ComEnterUnit ( j , ct ) ;
41649: LD_VAR 0 3
41653: PPUSH
41654: LD_VAR 0 8
41658: PPUSH
41659: CALL_OW 120
// end ; end ;
41663: GO 41298
41665: POP
41666: POP
// places := 0 ;
41667: LD_ADDR_VAR 0 5
41671: PUSH
41672: LD_INT 0
41674: ST_TO_ADDR
// for j = 1 to x do
41675: LD_ADDR_VAR 0 3
41679: PUSH
41680: DOUBLE
41681: LD_INT 1
41683: DEC
41684: ST_TO_ADDR
41685: LD_VAR 0 11
41689: PUSH
41690: FOR_TO
41691: IFFALSE 41767
// if GetWeapon ( x [ j ] ) = ar_control_tower then
41693: LD_VAR 0 11
41697: PUSH
41698: LD_VAR 0 3
41702: ARRAY
41703: PPUSH
41704: CALL_OW 264
41708: PUSH
41709: LD_INT 31
41711: EQUAL
41712: IFFALSE 41730
// places := places + 1 else
41714: LD_ADDR_VAR 0 5
41718: PUSH
41719: LD_VAR 0 5
41723: PUSH
41724: LD_INT 1
41726: PLUS
41727: ST_TO_ADDR
41728: GO 41765
// if GetBType ( x [ j ] ) = b_control_tower then
41730: LD_VAR 0 11
41734: PUSH
41735: LD_VAR 0 3
41739: ARRAY
41740: PPUSH
41741: CALL_OW 266
41745: PUSH
41746: LD_INT 36
41748: EQUAL
41749: IFFALSE 41765
// places := places + 3 ;
41751: LD_ADDR_VAR 0 5
41755: PUSH
41756: LD_VAR 0 5
41760: PUSH
41761: LD_INT 3
41763: PLUS
41764: ST_TO_ADDR
41765: GO 41690
41767: POP
41768: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
41769: LD_VAR 0 5
41773: PUSH
41774: LD_INT 0
41776: EQUAL
41777: PUSH
41778: LD_VAR 0 5
41782: PUSH
41783: LD_EXP 127
41787: PUSH
41788: LD_VAR 0 2
41792: ARRAY
41793: LESSEQUAL
41794: OR
41795: IFFALSE 41799
// continue ;
41797: GO 41049
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
41799: LD_ADDR_VAR 0 6
41803: PUSH
41804: LD_EXP 87
41808: PUSH
41809: LD_VAR 0 2
41813: ARRAY
41814: PPUSH
41815: LD_INT 25
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PPUSH
41825: CALL_OW 72
41829: PUSH
41830: LD_EXP 127
41834: PUSH
41835: LD_VAR 0 2
41839: ARRAY
41840: DIFF
41841: PPUSH
41842: LD_INT 3
41844: PPUSH
41845: CALL 79692 0 2
41849: ST_TO_ADDR
// for j in tmp do
41850: LD_ADDR_VAR 0 3
41854: PUSH
41855: LD_VAR 0 6
41859: PUSH
41860: FOR_IN
41861: IFFALSE 41896
// if GetTag ( j ) > 0 then
41863: LD_VAR 0 3
41867: PPUSH
41868: CALL_OW 110
41872: PUSH
41873: LD_INT 0
41875: GREATER
41876: IFFALSE 41894
// tmp := tmp diff j ;
41878: LD_ADDR_VAR 0 6
41882: PUSH
41883: LD_VAR 0 6
41887: PUSH
41888: LD_VAR 0 3
41892: DIFF
41893: ST_TO_ADDR
41894: GO 41860
41896: POP
41897: POP
// if not tmp then
41898: LD_VAR 0 6
41902: NOT
41903: IFFALSE 41907
// continue ;
41905: GO 41049
// if places then
41907: LD_VAR 0 5
41911: IFFALSE 41970
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
41913: LD_ADDR_EXP 127
41917: PUSH
41918: LD_EXP 127
41922: PPUSH
41923: LD_VAR 0 2
41927: PPUSH
41928: LD_EXP 127
41932: PUSH
41933: LD_VAR 0 2
41937: ARRAY
41938: PUSH
41939: LD_VAR 0 6
41943: PUSH
41944: LD_INT 1
41946: ARRAY
41947: UNION
41948: PPUSH
41949: CALL_OW 1
41953: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
41954: LD_VAR 0 6
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: PPUSH
41963: LD_INT 126
41965: PPUSH
41966: CALL_OW 109
// end ; end ;
41970: GO 41049
41972: POP
41973: POP
// end ;
41974: LD_VAR 0 1
41978: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
41979: LD_INT 0
41981: PPUSH
41982: PPUSH
41983: PPUSH
41984: PPUSH
41985: PPUSH
41986: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
41987: LD_VAR 0 1
41991: NOT
41992: PUSH
41993: LD_VAR 0 2
41997: NOT
41998: OR
41999: PUSH
42000: LD_VAR 0 3
42004: NOT
42005: OR
42006: PUSH
42007: LD_VAR 0 4
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 3
42020: PUSH
42021: LD_INT 4
42023: PUSH
42024: LD_INT 5
42026: PUSH
42027: LD_INT 8
42029: PUSH
42030: LD_INT 9
42032: PUSH
42033: LD_INT 15
42035: PUSH
42036: LD_INT 16
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: IN
42050: NOT
42051: OR
42052: IFFALSE 42056
// exit ;
42054: GO 42956
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
42056: LD_ADDR_VAR 0 2
42060: PUSH
42061: LD_VAR 0 2
42065: PPUSH
42066: LD_INT 21
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 24
42078: PUSH
42079: LD_INT 250
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PPUSH
42090: CALL_OW 72
42094: ST_TO_ADDR
// case class of 1 , 15 :
42095: LD_VAR 0 4
42099: PUSH
42100: LD_INT 1
42102: DOUBLE
42103: EQUAL
42104: IFTRUE 42114
42106: LD_INT 15
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42114
42112: GO 42199
42114: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
42115: LD_ADDR_VAR 0 8
42119: PUSH
42120: LD_VAR 0 2
42124: PPUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 30
42130: PUSH
42131: LD_INT 32
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 30
42140: PUSH
42141: LD_INT 31
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: PPUSH
42153: CALL_OW 72
42157: PUSH
42158: LD_VAR 0 2
42162: PPUSH
42163: LD_INT 2
42165: PUSH
42166: LD_INT 30
42168: PUSH
42169: LD_INT 4
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 30
42178: PUSH
42179: LD_INT 5
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: PPUSH
42191: CALL_OW 72
42195: ADD
42196: ST_TO_ADDR
42197: GO 42445
42199: LD_INT 2
42201: DOUBLE
42202: EQUAL
42203: IFTRUE 42213
42205: LD_INT 16
42207: DOUBLE
42208: EQUAL
42209: IFTRUE 42213
42211: GO 42259
42213: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
42214: LD_ADDR_VAR 0 8
42218: PUSH
42219: LD_VAR 0 2
42223: PPUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 30
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 30
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: PPUSH
42252: CALL_OW 72
42256: ST_TO_ADDR
42257: GO 42445
42259: LD_INT 3
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42267
42265: GO 42313
42267: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
42268: LD_ADDR_VAR 0 8
42272: PUSH
42273: LD_VAR 0 2
42277: PPUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 30
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 30
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: PPUSH
42306: CALL_OW 72
42310: ST_TO_ADDR
42311: GO 42445
42313: LD_INT 4
42315: DOUBLE
42316: EQUAL
42317: IFTRUE 42321
42319: GO 42378
42321: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
42322: LD_ADDR_VAR 0 8
42326: PUSH
42327: LD_VAR 0 2
42331: PPUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 30
42337: PUSH
42338: LD_INT 6
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 30
42347: PUSH
42348: LD_INT 7
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 30
42357: PUSH
42358: LD_INT 8
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: PPUSH
42371: CALL_OW 72
42375: ST_TO_ADDR
42376: GO 42445
42378: LD_INT 5
42380: DOUBLE
42381: EQUAL
42382: IFTRUE 42398
42384: LD_INT 8
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42398
42390: LD_INT 9
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42444
42398: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
42399: LD_ADDR_VAR 0 8
42403: PUSH
42404: LD_VAR 0 2
42408: PPUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 30
42414: PUSH
42415: LD_INT 4
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 30
42424: PUSH
42425: LD_INT 5
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: LIST
42436: PPUSH
42437: CALL_OW 72
42441: ST_TO_ADDR
42442: GO 42445
42444: POP
// if not tmp then
42445: LD_VAR 0 8
42449: NOT
42450: IFFALSE 42454
// exit ;
42452: GO 42956
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
42454: LD_VAR 0 4
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 15
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: IN
42469: PUSH
42470: LD_EXP 96
42474: PUSH
42475: LD_VAR 0 1
42479: ARRAY
42480: AND
42481: IFFALSE 42637
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
42483: LD_ADDR_VAR 0 9
42487: PUSH
42488: LD_EXP 96
42492: PUSH
42493: LD_VAR 0 1
42497: ARRAY
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
42503: LD_VAR 0 9
42507: PUSH
42508: LD_EXP 97
42512: PUSH
42513: LD_VAR 0 1
42517: ARRAY
42518: IN
42519: NOT
42520: IFFALSE 42635
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
42522: LD_ADDR_EXP 97
42526: PUSH
42527: LD_EXP 97
42531: PPUSH
42532: LD_VAR 0 1
42536: PUSH
42537: LD_EXP 97
42541: PUSH
42542: LD_VAR 0 1
42546: ARRAY
42547: PUSH
42548: LD_INT 1
42550: PLUS
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PPUSH
42556: LD_VAR 0 9
42560: PPUSH
42561: CALL 50143 0 3
42565: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
42566: LD_ADDR_EXP 96
42570: PUSH
42571: LD_EXP 96
42575: PPUSH
42576: LD_VAR 0 1
42580: PPUSH
42581: LD_EXP 96
42585: PUSH
42586: LD_VAR 0 1
42590: ARRAY
42591: PUSH
42592: LD_VAR 0 9
42596: DIFF
42597: PPUSH
42598: CALL_OW 1
42602: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
42603: LD_VAR 0 3
42607: PPUSH
42608: LD_EXP 97
42612: PUSH
42613: LD_VAR 0 1
42617: ARRAY
42618: PUSH
42619: LD_EXP 97
42623: PUSH
42624: LD_VAR 0 1
42628: ARRAY
42629: ARRAY
42630: PPUSH
42631: CALL_OW 120
// end ; exit ;
42635: GO 42956
// end ; if tmp > 1 then
42637: LD_VAR 0 8
42641: PUSH
42642: LD_INT 1
42644: GREATER
42645: IFFALSE 42749
// for i = 2 to tmp do
42647: LD_ADDR_VAR 0 6
42651: PUSH
42652: DOUBLE
42653: LD_INT 2
42655: DEC
42656: ST_TO_ADDR
42657: LD_VAR 0 8
42661: PUSH
42662: FOR_TO
42663: IFFALSE 42747
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
42665: LD_VAR 0 8
42669: PUSH
42670: LD_VAR 0 6
42674: ARRAY
42675: PPUSH
42676: CALL_OW 461
42680: PUSH
42681: LD_INT 6
42683: EQUAL
42684: IFFALSE 42745
// begin x := tmp [ i ] ;
42686: LD_ADDR_VAR 0 9
42690: PUSH
42691: LD_VAR 0 8
42695: PUSH
42696: LD_VAR 0 6
42700: ARRAY
42701: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
42702: LD_ADDR_VAR 0 8
42706: PUSH
42707: LD_VAR 0 8
42711: PPUSH
42712: LD_VAR 0 6
42716: PPUSH
42717: CALL_OW 3
42721: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
42722: LD_ADDR_VAR 0 8
42726: PUSH
42727: LD_VAR 0 8
42731: PPUSH
42732: LD_INT 1
42734: PPUSH
42735: LD_VAR 0 9
42739: PPUSH
42740: CALL_OW 2
42744: ST_TO_ADDR
// end ;
42745: GO 42662
42747: POP
42748: POP
// for i in tmp do
42749: LD_ADDR_VAR 0 6
42753: PUSH
42754: LD_VAR 0 8
42758: PUSH
42759: FOR_IN
42760: IFFALSE 42829
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
42762: LD_VAR 0 6
42766: PPUSH
42767: CALL_OW 313
42771: PUSH
42772: LD_INT 6
42774: LESS
42775: PUSH
42776: LD_VAR 0 6
42780: PPUSH
42781: CALL_OW 266
42785: PUSH
42786: LD_INT 31
42788: PUSH
42789: LD_INT 32
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: IN
42796: NOT
42797: AND
42798: PUSH
42799: LD_VAR 0 6
42803: PPUSH
42804: CALL_OW 313
42808: PUSH
42809: LD_INT 0
42811: EQUAL
42812: OR
42813: IFFALSE 42827
// begin j := i ;
42815: LD_ADDR_VAR 0 7
42819: PUSH
42820: LD_VAR 0 6
42824: ST_TO_ADDR
// break ;
42825: GO 42829
// end ; end ;
42827: GO 42759
42829: POP
42830: POP
// if j then
42831: LD_VAR 0 7
42835: IFFALSE 42853
// ComEnterUnit ( unit , j ) else
42837: LD_VAR 0 3
42841: PPUSH
42842: LD_VAR 0 7
42846: PPUSH
42847: CALL_OW 120
42851: GO 42956
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
42853: LD_ADDR_VAR 0 10
42857: PUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 30
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 30
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: PPUSH
42891: CALL_OW 72
42895: ST_TO_ADDR
// if depot then
42896: LD_VAR 0 10
42900: IFFALSE 42956
// begin depot := NearestUnitToUnit ( depot , unit ) ;
42902: LD_ADDR_VAR 0 10
42906: PUSH
42907: LD_VAR 0 10
42911: PPUSH
42912: LD_VAR 0 3
42916: PPUSH
42917: CALL_OW 74
42921: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
42922: LD_VAR 0 3
42926: PPUSH
42927: LD_VAR 0 10
42931: PPUSH
42932: CALL_OW 296
42936: PUSH
42937: LD_INT 10
42939: GREATER
42940: IFFALSE 42956
// ComStandNearbyBuilding ( unit , depot ) ;
42942: LD_VAR 0 3
42946: PPUSH
42947: LD_VAR 0 10
42951: PPUSH
42952: CALL 46757 0 2
// end ; end ; end ;
42956: LD_VAR 0 5
42960: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
42961: LD_INT 0
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
// if not mc_bases then
42967: LD_EXP 87
42971: NOT
42972: IFFALSE 42976
// exit ;
42974: GO 43215
// for i = 1 to mc_bases do
42976: LD_ADDR_VAR 0 2
42980: PUSH
42981: DOUBLE
42982: LD_INT 1
42984: DEC
42985: ST_TO_ADDR
42986: LD_EXP 87
42990: PUSH
42991: FOR_TO
42992: IFFALSE 43213
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
42994: LD_ADDR_VAR 0 4
42998: PUSH
42999: LD_EXP 87
43003: PUSH
43004: LD_VAR 0 2
43008: ARRAY
43009: PPUSH
43010: LD_INT 21
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PPUSH
43020: CALL_OW 72
43024: PUSH
43025: LD_EXP 116
43029: PUSH
43030: LD_VAR 0 2
43034: ARRAY
43035: UNION
43036: ST_TO_ADDR
// if not tmp then
43037: LD_VAR 0 4
43041: NOT
43042: IFFALSE 43046
// continue ;
43044: GO 42991
// for j in tmp do
43046: LD_ADDR_VAR 0 3
43050: PUSH
43051: LD_VAR 0 4
43055: PUSH
43056: FOR_IN
43057: IFFALSE 43209
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
43059: LD_VAR 0 3
43063: PPUSH
43064: CALL_OW 110
43068: NOT
43069: PUSH
43070: LD_VAR 0 3
43074: PPUSH
43075: CALL_OW 314
43079: NOT
43080: AND
43081: PUSH
43082: LD_VAR 0 3
43086: PPUSH
43087: CALL_OW 311
43091: NOT
43092: AND
43093: PUSH
43094: LD_VAR 0 3
43098: PPUSH
43099: CALL_OW 310
43103: NOT
43104: AND
43105: PUSH
43106: LD_VAR 0 3
43110: PUSH
43111: LD_EXP 90
43115: PUSH
43116: LD_VAR 0 2
43120: ARRAY
43121: PUSH
43122: LD_INT 1
43124: ARRAY
43125: IN
43126: NOT
43127: AND
43128: PUSH
43129: LD_VAR 0 3
43133: PUSH
43134: LD_EXP 90
43138: PUSH
43139: LD_VAR 0 2
43143: ARRAY
43144: PUSH
43145: LD_INT 2
43147: ARRAY
43148: IN
43149: NOT
43150: AND
43151: PUSH
43152: LD_VAR 0 3
43156: PUSH
43157: LD_EXP 99
43161: PUSH
43162: LD_VAR 0 2
43166: ARRAY
43167: IN
43168: NOT
43169: AND
43170: IFFALSE 43207
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
43172: LD_VAR 0 2
43176: PPUSH
43177: LD_EXP 87
43181: PUSH
43182: LD_VAR 0 2
43186: ARRAY
43187: PPUSH
43188: LD_VAR 0 3
43192: PPUSH
43193: LD_VAR 0 3
43197: PPUSH
43198: CALL_OW 257
43202: PPUSH
43203: CALL 41979 0 4
// end ;
43207: GO 43056
43209: POP
43210: POP
// end ;
43211: GO 42991
43213: POP
43214: POP
// end ;
43215: LD_VAR 0 1
43219: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
43220: LD_INT 0
43222: PPUSH
43223: PPUSH
43224: PPUSH
43225: PPUSH
43226: PPUSH
43227: PPUSH
// if not mc_bases [ base ] then
43228: LD_EXP 87
43232: PUSH
43233: LD_VAR 0 1
43237: ARRAY
43238: NOT
43239: IFFALSE 43243
// exit ;
43241: GO 43425
// tmp := [ ] ;
43243: LD_ADDR_VAR 0 6
43247: PUSH
43248: EMPTY
43249: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
43250: LD_ADDR_VAR 0 7
43254: PUSH
43255: LD_VAR 0 3
43259: PPUSH
43260: LD_INT 0
43262: PPUSH
43263: CALL_OW 517
43267: ST_TO_ADDR
// if not list then
43268: LD_VAR 0 7
43272: NOT
43273: IFFALSE 43277
// exit ;
43275: GO 43425
// for i = 1 to amount do
43277: LD_ADDR_VAR 0 5
43281: PUSH
43282: DOUBLE
43283: LD_INT 1
43285: DEC
43286: ST_TO_ADDR
43287: LD_VAR 0 2
43291: PUSH
43292: FOR_TO
43293: IFFALSE 43373
// begin x := rand ( 1 , list [ 1 ] ) ;
43295: LD_ADDR_VAR 0 8
43299: PUSH
43300: LD_INT 1
43302: PPUSH
43303: LD_VAR 0 7
43307: PUSH
43308: LD_INT 1
43310: ARRAY
43311: PPUSH
43312: CALL_OW 12
43316: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
43317: LD_ADDR_VAR 0 6
43321: PUSH
43322: LD_VAR 0 6
43326: PPUSH
43327: LD_VAR 0 5
43331: PPUSH
43332: LD_VAR 0 7
43336: PUSH
43337: LD_INT 1
43339: ARRAY
43340: PUSH
43341: LD_VAR 0 8
43345: ARRAY
43346: PUSH
43347: LD_VAR 0 7
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: PUSH
43356: LD_VAR 0 8
43360: ARRAY
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PPUSH
43366: CALL_OW 1
43370: ST_TO_ADDR
// end ;
43371: GO 43292
43373: POP
43374: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
43375: LD_ADDR_EXP 100
43379: PUSH
43380: LD_EXP 100
43384: PPUSH
43385: LD_VAR 0 1
43389: PPUSH
43390: LD_VAR 0 6
43394: PPUSH
43395: CALL_OW 1
43399: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
43400: LD_ADDR_EXP 102
43404: PUSH
43405: LD_EXP 102
43409: PPUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: LD_VAR 0 3
43419: PPUSH
43420: CALL_OW 1
43424: ST_TO_ADDR
// end ;
43425: LD_VAR 0 4
43429: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
43430: LD_INT 0
43432: PPUSH
// if not mc_bases [ base ] then
43433: LD_EXP 87
43437: PUSH
43438: LD_VAR 0 1
43442: ARRAY
43443: NOT
43444: IFFALSE 43448
// exit ;
43446: GO 43473
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
43448: LD_ADDR_EXP 92
43452: PUSH
43453: LD_EXP 92
43457: PPUSH
43458: LD_VAR 0 1
43462: PPUSH
43463: LD_VAR 0 2
43467: PPUSH
43468: CALL_OW 1
43472: ST_TO_ADDR
// end ;
43473: LD_VAR 0 3
43477: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
43478: LD_INT 0
43480: PPUSH
// if not mc_bases [ base ] then
43481: LD_EXP 87
43485: PUSH
43486: LD_VAR 0 1
43490: ARRAY
43491: NOT
43492: IFFALSE 43496
// exit ;
43494: GO 43533
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
43496: LD_ADDR_EXP 92
43500: PUSH
43501: LD_EXP 92
43505: PPUSH
43506: LD_VAR 0 1
43510: PPUSH
43511: LD_EXP 92
43515: PUSH
43516: LD_VAR 0 1
43520: ARRAY
43521: PUSH
43522: LD_VAR 0 2
43526: UNION
43527: PPUSH
43528: CALL_OW 1
43532: ST_TO_ADDR
// end ;
43533: LD_VAR 0 3
43537: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
43538: LD_INT 0
43540: PPUSH
// if not mc_bases [ base ] then
43541: LD_EXP 87
43545: PUSH
43546: LD_VAR 0 1
43550: ARRAY
43551: NOT
43552: IFFALSE 43556
// exit ;
43554: GO 43581
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
43556: LD_ADDR_EXP 108
43560: PUSH
43561: LD_EXP 108
43565: PPUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: LD_VAR 0 2
43575: PPUSH
43576: CALL_OW 1
43580: ST_TO_ADDR
// end ;
43581: LD_VAR 0 3
43585: RET
// export function MC_InsertProduceList ( base , components ) ; begin
43586: LD_INT 0
43588: PPUSH
// if not mc_bases [ base ] then
43589: LD_EXP 87
43593: PUSH
43594: LD_VAR 0 1
43598: ARRAY
43599: NOT
43600: IFFALSE 43604
// exit ;
43602: GO 43641
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
43604: LD_ADDR_EXP 108
43608: PUSH
43609: LD_EXP 108
43613: PPUSH
43614: LD_VAR 0 1
43618: PPUSH
43619: LD_EXP 108
43623: PUSH
43624: LD_VAR 0 1
43628: ARRAY
43629: PUSH
43630: LD_VAR 0 2
43634: ADD
43635: PPUSH
43636: CALL_OW 1
43640: ST_TO_ADDR
// end ;
43641: LD_VAR 0 3
43645: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
43646: LD_INT 0
43648: PPUSH
// if not mc_bases [ base ] then
43649: LD_EXP 87
43653: PUSH
43654: LD_VAR 0 1
43658: ARRAY
43659: NOT
43660: IFFALSE 43664
// exit ;
43662: GO 43718
// mc_defender := Replace ( mc_defender , base , deflist ) ;
43664: LD_ADDR_EXP 109
43668: PUSH
43669: LD_EXP 109
43673: PPUSH
43674: LD_VAR 0 1
43678: PPUSH
43679: LD_VAR 0 2
43683: PPUSH
43684: CALL_OW 1
43688: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
43689: LD_ADDR_EXP 98
43693: PUSH
43694: LD_EXP 98
43698: PPUSH
43699: LD_VAR 0 1
43703: PPUSH
43704: LD_VAR 0 2
43708: PUSH
43709: LD_INT 0
43711: PLUS
43712: PPUSH
43713: CALL_OW 1
43717: ST_TO_ADDR
// end ;
43718: LD_VAR 0 3
43722: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
43723: LD_INT 0
43725: PPUSH
// if not mc_bases [ base ] then
43726: LD_EXP 87
43730: PUSH
43731: LD_VAR 0 1
43735: ARRAY
43736: NOT
43737: IFFALSE 43741
// exit ;
43739: GO 43766
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
43741: LD_ADDR_EXP 98
43745: PUSH
43746: LD_EXP 98
43750: PPUSH
43751: LD_VAR 0 1
43755: PPUSH
43756: LD_VAR 0 2
43760: PPUSH
43761: CALL_OW 1
43765: ST_TO_ADDR
// end ;
43766: LD_VAR 0 3
43770: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
43771: LD_INT 0
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
// if not mc_bases [ base ] then
43777: LD_EXP 87
43781: PUSH
43782: LD_VAR 0 1
43786: ARRAY
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 43857
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
43792: LD_ADDR_EXP 107
43796: PUSH
43797: LD_EXP 107
43801: PPUSH
43802: LD_VAR 0 1
43806: PUSH
43807: LD_EXP 107
43811: PUSH
43812: LD_VAR 0 1
43816: ARRAY
43817: PUSH
43818: LD_INT 1
43820: PLUS
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PPUSH
43826: LD_VAR 0 1
43830: PUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 3
43840: PUSH
43841: LD_VAR 0 4
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: PPUSH
43852: CALL 50143 0 3
43856: ST_TO_ADDR
// end ;
43857: LD_VAR 0 5
43861: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
43862: LD_INT 0
43864: PPUSH
// if not mc_bases [ base ] then
43865: LD_EXP 87
43869: PUSH
43870: LD_VAR 0 1
43874: ARRAY
43875: NOT
43876: IFFALSE 43880
// exit ;
43878: GO 43905
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
43880: LD_ADDR_EXP 124
43884: PUSH
43885: LD_EXP 124
43889: PPUSH
43890: LD_VAR 0 1
43894: PPUSH
43895: LD_VAR 0 2
43899: PPUSH
43900: CALL_OW 1
43904: ST_TO_ADDR
// end ;
43905: LD_VAR 0 3
43909: RET
// export function MC_GetMinesField ( base ) ; begin
43910: LD_INT 0
43912: PPUSH
// result := mc_mines [ base ] ;
43913: LD_ADDR_VAR 0 2
43917: PUSH
43918: LD_EXP 100
43922: PUSH
43923: LD_VAR 0 1
43927: ARRAY
43928: ST_TO_ADDR
// end ;
43929: LD_VAR 0 2
43933: RET
// export function MC_GetProduceList ( base ) ; begin
43934: LD_INT 0
43936: PPUSH
// result := mc_produce [ base ] ;
43937: LD_ADDR_VAR 0 2
43941: PUSH
43942: LD_EXP 108
43946: PUSH
43947: LD_VAR 0 1
43951: ARRAY
43952: ST_TO_ADDR
// end ;
43953: LD_VAR 0 2
43957: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
43958: LD_INT 0
43960: PPUSH
43961: PPUSH
// if not mc_bases then
43962: LD_EXP 87
43966: NOT
43967: IFFALSE 43971
// exit ;
43969: GO 44036
// if mc_bases [ base ] then
43971: LD_EXP 87
43975: PUSH
43976: LD_VAR 0 1
43980: ARRAY
43981: IFFALSE 44036
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_EXP 87
43992: PUSH
43993: LD_VAR 0 1
43997: ARRAY
43998: PPUSH
43999: LD_INT 30
44001: PUSH
44002: LD_VAR 0 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PPUSH
44011: CALL_OW 72
44015: ST_TO_ADDR
// if result then
44016: LD_VAR 0 3
44020: IFFALSE 44036
// result := result [ 1 ] ;
44022: LD_ADDR_VAR 0 3
44026: PUSH
44027: LD_VAR 0 3
44031: PUSH
44032: LD_INT 1
44034: ARRAY
44035: ST_TO_ADDR
// end ; end ;
44036: LD_VAR 0 3
44040: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
44041: LD_INT 0
44043: PPUSH
44044: PPUSH
// if not mc_bases then
44045: LD_EXP 87
44049: NOT
44050: IFFALSE 44054
// exit ;
44052: GO 44099
// if mc_bases [ base ] then
44054: LD_EXP 87
44058: PUSH
44059: LD_VAR 0 1
44063: ARRAY
44064: IFFALSE 44099
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44066: LD_ADDR_VAR 0 3
44070: PUSH
44071: LD_EXP 87
44075: PUSH
44076: LD_VAR 0 1
44080: ARRAY
44081: PPUSH
44082: LD_INT 30
44084: PUSH
44085: LD_VAR 0 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PPUSH
44094: CALL_OW 72
44098: ST_TO_ADDR
// end ;
44099: LD_VAR 0 3
44103: RET
// export function MC_SetTame ( base , area ) ; begin
44104: LD_INT 0
44106: PPUSH
// if not mc_bases or not base then
44107: LD_EXP 87
44111: NOT
44112: PUSH
44113: LD_VAR 0 1
44117: NOT
44118: OR
44119: IFFALSE 44123
// exit ;
44121: GO 44148
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
44123: LD_ADDR_EXP 115
44127: PUSH
44128: LD_EXP 115
44132: PPUSH
44133: LD_VAR 0 1
44137: PPUSH
44138: LD_VAR 0 2
44142: PPUSH
44143: CALL_OW 1
44147: ST_TO_ADDR
// end ;
44148: LD_VAR 0 3
44152: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
44153: LD_INT 0
44155: PPUSH
44156: PPUSH
// if not mc_bases or not base then
44157: LD_EXP 87
44161: NOT
44162: PUSH
44163: LD_VAR 0 1
44167: NOT
44168: OR
44169: IFFALSE 44173
// exit ;
44171: GO 44275
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
44173: LD_ADDR_VAR 0 4
44177: PUSH
44178: LD_EXP 87
44182: PUSH
44183: LD_VAR 0 1
44187: ARRAY
44188: PPUSH
44189: LD_INT 30
44191: PUSH
44192: LD_VAR 0 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PPUSH
44201: CALL_OW 72
44205: ST_TO_ADDR
// if not tmp then
44206: LD_VAR 0 4
44210: NOT
44211: IFFALSE 44215
// exit ;
44213: GO 44275
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
44215: LD_ADDR_EXP 119
44219: PUSH
44220: LD_EXP 119
44224: PPUSH
44225: LD_VAR 0 1
44229: PPUSH
44230: LD_EXP 119
44234: PUSH
44235: LD_VAR 0 1
44239: ARRAY
44240: PPUSH
44241: LD_EXP 119
44245: PUSH
44246: LD_VAR 0 1
44250: ARRAY
44251: PUSH
44252: LD_INT 1
44254: PLUS
44255: PPUSH
44256: LD_VAR 0 4
44260: PUSH
44261: LD_INT 1
44263: ARRAY
44264: PPUSH
44265: CALL_OW 2
44269: PPUSH
44270: CALL_OW 1
44274: ST_TO_ADDR
// end ;
44275: LD_VAR 0 3
44279: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
44280: LD_INT 0
44282: PPUSH
44283: PPUSH
// if not mc_bases or not base or not kinds then
44284: LD_EXP 87
44288: NOT
44289: PUSH
44290: LD_VAR 0 1
44294: NOT
44295: OR
44296: PUSH
44297: LD_VAR 0 2
44301: NOT
44302: OR
44303: IFFALSE 44307
// exit ;
44305: GO 44368
// for i in kinds do
44307: LD_ADDR_VAR 0 4
44311: PUSH
44312: LD_VAR 0 2
44316: PUSH
44317: FOR_IN
44318: IFFALSE 44366
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
44320: LD_ADDR_EXP 121
44324: PUSH
44325: LD_EXP 121
44329: PPUSH
44330: LD_VAR 0 1
44334: PUSH
44335: LD_EXP 121
44339: PUSH
44340: LD_VAR 0 1
44344: ARRAY
44345: PUSH
44346: LD_INT 1
44348: PLUS
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PPUSH
44354: LD_VAR 0 4
44358: PPUSH
44359: CALL 50143 0 3
44363: ST_TO_ADDR
44364: GO 44317
44366: POP
44367: POP
// end ;
44368: LD_VAR 0 3
44372: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
44373: LD_INT 0
44375: PPUSH
// if not mc_bases or not base or not areas then
44376: LD_EXP 87
44380: NOT
44381: PUSH
44382: LD_VAR 0 1
44386: NOT
44387: OR
44388: PUSH
44389: LD_VAR 0 2
44393: NOT
44394: OR
44395: IFFALSE 44399
// exit ;
44397: GO 44424
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
44399: LD_ADDR_EXP 105
44403: PUSH
44404: LD_EXP 105
44408: PPUSH
44409: LD_VAR 0 1
44413: PPUSH
44414: LD_VAR 0 2
44418: PPUSH
44419: CALL_OW 1
44423: ST_TO_ADDR
// end ;
44424: LD_VAR 0 3
44428: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
44429: LD_INT 0
44431: PPUSH
// if not mc_bases or not base or not teleports_exit then
44432: LD_EXP 87
44436: NOT
44437: PUSH
44438: LD_VAR 0 1
44442: NOT
44443: OR
44444: PUSH
44445: LD_VAR 0 2
44449: NOT
44450: OR
44451: IFFALSE 44455
// exit ;
44453: GO 44480
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
44455: LD_ADDR_EXP 122
44459: PUSH
44460: LD_EXP 122
44464: PPUSH
44465: LD_VAR 0 1
44469: PPUSH
44470: LD_VAR 0 2
44474: PPUSH
44475: CALL_OW 1
44479: ST_TO_ADDR
// end ;
44480: LD_VAR 0 3
44484: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
44485: LD_INT 0
44487: PPUSH
44488: PPUSH
44489: PPUSH
// if not mc_bases or not base or not ext_list then
44490: LD_EXP 87
44494: NOT
44495: PUSH
44496: LD_VAR 0 1
44500: NOT
44501: OR
44502: PUSH
44503: LD_VAR 0 5
44507: NOT
44508: OR
44509: IFFALSE 44513
// exit ;
44511: GO 44686
// tmp := GetFacExtXYD ( x , y , d ) ;
44513: LD_ADDR_VAR 0 8
44517: PUSH
44518: LD_VAR 0 2
44522: PPUSH
44523: LD_VAR 0 3
44527: PPUSH
44528: LD_VAR 0 4
44532: PPUSH
44533: CALL 78822 0 3
44537: ST_TO_ADDR
// if not tmp then
44538: LD_VAR 0 8
44542: NOT
44543: IFFALSE 44547
// exit ;
44545: GO 44686
// for i in tmp do
44547: LD_ADDR_VAR 0 7
44551: PUSH
44552: LD_VAR 0 8
44556: PUSH
44557: FOR_IN
44558: IFFALSE 44684
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
44560: LD_ADDR_EXP 92
44564: PUSH
44565: LD_EXP 92
44569: PPUSH
44570: LD_VAR 0 1
44574: PPUSH
44575: LD_EXP 92
44579: PUSH
44580: LD_VAR 0 1
44584: ARRAY
44585: PPUSH
44586: LD_EXP 92
44590: PUSH
44591: LD_VAR 0 1
44595: ARRAY
44596: PUSH
44597: LD_INT 1
44599: PLUS
44600: PPUSH
44601: LD_VAR 0 5
44605: PUSH
44606: LD_INT 1
44608: ARRAY
44609: PUSH
44610: LD_VAR 0 7
44614: PUSH
44615: LD_INT 1
44617: ARRAY
44618: PUSH
44619: LD_VAR 0 7
44623: PUSH
44624: LD_INT 2
44626: ARRAY
44627: PUSH
44628: LD_VAR 0 7
44632: PUSH
44633: LD_INT 3
44635: ARRAY
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: PPUSH
44643: CALL_OW 2
44647: PPUSH
44648: CALL_OW 1
44652: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
44653: LD_ADDR_VAR 0 5
44657: PUSH
44658: LD_VAR 0 5
44662: PPUSH
44663: LD_INT 1
44665: PPUSH
44666: CALL_OW 3
44670: ST_TO_ADDR
// if not ext_list then
44671: LD_VAR 0 5
44675: NOT
44676: IFFALSE 44682
// exit ;
44678: POP
44679: POP
44680: GO 44686
// end ;
44682: GO 44557
44684: POP
44685: POP
// end ;
44686: LD_VAR 0 6
44690: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
44691: LD_INT 0
44693: PPUSH
// if not mc_bases or not base or not weapon_list then
44694: LD_EXP 87
44698: NOT
44699: PUSH
44700: LD_VAR 0 1
44704: NOT
44705: OR
44706: PUSH
44707: LD_VAR 0 2
44711: NOT
44712: OR
44713: IFFALSE 44717
// exit ;
44715: GO 44742
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
44717: LD_ADDR_EXP 126
44721: PUSH
44722: LD_EXP 126
44726: PPUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: LD_VAR 0 2
44736: PPUSH
44737: CALL_OW 1
44741: ST_TO_ADDR
// end ;
44742: LD_VAR 0 3
44746: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
44747: LD_INT 0
44749: PPUSH
// if not mc_bases or not base or not tech_list then
44750: LD_EXP 87
44754: NOT
44755: PUSH
44756: LD_VAR 0 1
44760: NOT
44761: OR
44762: PUSH
44763: LD_VAR 0 2
44767: NOT
44768: OR
44769: IFFALSE 44773
// exit ;
44771: GO 44798
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
44773: LD_ADDR_EXP 114
44777: PUSH
44778: LD_EXP 114
44782: PPUSH
44783: LD_VAR 0 1
44787: PPUSH
44788: LD_VAR 0 2
44792: PPUSH
44793: CALL_OW 1
44797: ST_TO_ADDR
// end ;
44798: LD_VAR 0 3
44802: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
44803: LD_INT 0
44805: PPUSH
// if not mc_bases or not parking_area or not base then
44806: LD_EXP 87
44810: NOT
44811: PUSH
44812: LD_VAR 0 2
44816: NOT
44817: OR
44818: PUSH
44819: LD_VAR 0 1
44823: NOT
44824: OR
44825: IFFALSE 44829
// exit ;
44827: GO 44854
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
44829: LD_ADDR_EXP 111
44833: PUSH
44834: LD_EXP 111
44838: PPUSH
44839: LD_VAR 0 1
44843: PPUSH
44844: LD_VAR 0 2
44848: PPUSH
44849: CALL_OW 1
44853: ST_TO_ADDR
// end ;
44854: LD_VAR 0 3
44858: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
44859: LD_INT 0
44861: PPUSH
// if not mc_bases or not base or not scan_area then
44862: LD_EXP 87
44866: NOT
44867: PUSH
44868: LD_VAR 0 1
44872: NOT
44873: OR
44874: PUSH
44875: LD_VAR 0 2
44879: NOT
44880: OR
44881: IFFALSE 44885
// exit ;
44883: GO 44910
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
44885: LD_ADDR_EXP 112
44889: PUSH
44890: LD_EXP 112
44894: PPUSH
44895: LD_VAR 0 1
44899: PPUSH
44900: LD_VAR 0 2
44904: PPUSH
44905: CALL_OW 1
44909: ST_TO_ADDR
// end ;
44910: LD_VAR 0 3
44914: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
44915: LD_INT 0
44917: PPUSH
44918: PPUSH
// if not mc_bases or not base then
44919: LD_EXP 87
44923: NOT
44924: PUSH
44925: LD_VAR 0 1
44929: NOT
44930: OR
44931: IFFALSE 44935
// exit ;
44933: GO 44999
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
44935: LD_ADDR_VAR 0 3
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 3
44948: PUSH
44949: LD_INT 4
44951: PUSH
44952: LD_INT 11
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
44962: LD_ADDR_EXP 114
44966: PUSH
44967: LD_EXP 114
44971: PPUSH
44972: LD_VAR 0 1
44976: PPUSH
44977: LD_EXP 114
44981: PUSH
44982: LD_VAR 0 1
44986: ARRAY
44987: PUSH
44988: LD_VAR 0 3
44992: DIFF
44993: PPUSH
44994: CALL_OW 1
44998: ST_TO_ADDR
// end ;
44999: LD_VAR 0 2
45003: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
45004: LD_INT 0
45006: PPUSH
// result := mc_vehicles [ base ] ;
45007: LD_ADDR_VAR 0 3
45011: PUSH
45012: LD_EXP 106
45016: PUSH
45017: LD_VAR 0 1
45021: ARRAY
45022: ST_TO_ADDR
// if onlyCombat then
45023: LD_VAR 0 2
45027: IFFALSE 45192
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
45029: LD_ADDR_VAR 0 3
45033: PUSH
45034: LD_VAR 0 3
45038: PUSH
45039: LD_VAR 0 3
45043: PPUSH
45044: LD_INT 2
45046: PUSH
45047: LD_INT 34
45049: PUSH
45050: LD_INT 12
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 34
45059: PUSH
45060: LD_INT 51
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 34
45069: PUSH
45070: LD_EXP 131
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 34
45081: PUSH
45082: LD_INT 32
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 34
45091: PUSH
45092: LD_INT 13
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 34
45101: PUSH
45102: LD_INT 52
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 34
45111: PUSH
45112: LD_INT 14
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 34
45121: PUSH
45122: LD_INT 53
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 34
45131: PUSH
45132: LD_EXP 130
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 34
45143: PUSH
45144: LD_INT 31
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 34
45153: PUSH
45154: LD_INT 48
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 34
45163: PUSH
45164: LD_INT 8
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: PPUSH
45186: CALL_OW 72
45190: DIFF
45191: ST_TO_ADDR
// end ; end_of_file
45192: LD_VAR 0 3
45196: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
45197: LD_INT 0
45199: PPUSH
45200: PPUSH
// if exist_mode then
45201: LD_VAR 0 2
45205: IFFALSE 45230
// unit := CreateCharacter ( prefix & ident ) else
45207: LD_ADDR_VAR 0 5
45211: PUSH
45212: LD_VAR 0 3
45216: PUSH
45217: LD_VAR 0 1
45221: STR
45222: PPUSH
45223: CALL_OW 34
45227: ST_TO_ADDR
45228: GO 45245
// unit := NewCharacter ( ident ) ;
45230: LD_ADDR_VAR 0 5
45234: PUSH
45235: LD_VAR 0 1
45239: PPUSH
45240: CALL_OW 25
45244: ST_TO_ADDR
// result := unit ;
45245: LD_ADDR_VAR 0 4
45249: PUSH
45250: LD_VAR 0 5
45254: ST_TO_ADDR
// end ;
45255: LD_VAR 0 4
45259: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
45260: LD_INT 0
45262: PPUSH
45263: PPUSH
// if not side or not nation then
45264: LD_VAR 0 1
45268: NOT
45269: PUSH
45270: LD_VAR 0 2
45274: NOT
45275: OR
45276: IFFALSE 45280
// exit ;
45278: GO 46044
// case nation of nation_american :
45280: LD_VAR 0 2
45284: PUSH
45285: LD_INT 1
45287: DOUBLE
45288: EQUAL
45289: IFTRUE 45293
45291: GO 45507
45293: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
45294: LD_ADDR_VAR 0 4
45298: PUSH
45299: LD_INT 35
45301: PUSH
45302: LD_INT 45
45304: PUSH
45305: LD_INT 46
45307: PUSH
45308: LD_INT 47
45310: PUSH
45311: LD_INT 82
45313: PUSH
45314: LD_INT 83
45316: PUSH
45317: LD_INT 84
45319: PUSH
45320: LD_INT 85
45322: PUSH
45323: LD_INT 86
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 6
45334: PUSH
45335: LD_INT 15
45337: PUSH
45338: LD_INT 16
45340: PUSH
45341: LD_INT 7
45343: PUSH
45344: LD_INT 12
45346: PUSH
45347: LD_INT 13
45349: PUSH
45350: LD_INT 10
45352: PUSH
45353: LD_INT 14
45355: PUSH
45356: LD_INT 20
45358: PUSH
45359: LD_INT 21
45361: PUSH
45362: LD_INT 22
45364: PUSH
45365: LD_INT 25
45367: PUSH
45368: LD_INT 32
45370: PUSH
45371: LD_INT 27
45373: PUSH
45374: LD_INT 36
45376: PUSH
45377: LD_INT 69
45379: PUSH
45380: LD_INT 39
45382: PUSH
45383: LD_INT 34
45385: PUSH
45386: LD_INT 40
45388: PUSH
45389: LD_INT 48
45391: PUSH
45392: LD_INT 49
45394: PUSH
45395: LD_INT 50
45397: PUSH
45398: LD_INT 51
45400: PUSH
45401: LD_INT 52
45403: PUSH
45404: LD_INT 53
45406: PUSH
45407: LD_INT 54
45409: PUSH
45410: LD_INT 55
45412: PUSH
45413: LD_INT 56
45415: PUSH
45416: LD_INT 57
45418: PUSH
45419: LD_INT 58
45421: PUSH
45422: LD_INT 59
45424: PUSH
45425: LD_INT 60
45427: PUSH
45428: LD_INT 61
45430: PUSH
45431: LD_INT 62
45433: PUSH
45434: LD_INT 80
45436: PUSH
45437: LD_INT 82
45439: PUSH
45440: LD_INT 83
45442: PUSH
45443: LD_INT 84
45445: PUSH
45446: LD_INT 85
45448: PUSH
45449: LD_INT 86
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: ST_TO_ADDR
45505: GO 45968
45507: LD_INT 2
45509: DOUBLE
45510: EQUAL
45511: IFTRUE 45515
45513: GO 45737
45515: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
45516: LD_ADDR_VAR 0 4
45520: PUSH
45521: LD_INT 35
45523: PUSH
45524: LD_INT 45
45526: PUSH
45527: LD_INT 46
45529: PUSH
45530: LD_INT 47
45532: PUSH
45533: LD_INT 82
45535: PUSH
45536: LD_INT 83
45538: PUSH
45539: LD_INT 84
45541: PUSH
45542: LD_INT 85
45544: PUSH
45545: LD_INT 87
45547: PUSH
45548: LD_INT 70
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 11
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: LD_INT 4
45562: PUSH
45563: LD_INT 5
45565: PUSH
45566: LD_INT 6
45568: PUSH
45569: LD_INT 15
45571: PUSH
45572: LD_INT 18
45574: PUSH
45575: LD_INT 7
45577: PUSH
45578: LD_INT 17
45580: PUSH
45581: LD_INT 8
45583: PUSH
45584: LD_INT 20
45586: PUSH
45587: LD_INT 21
45589: PUSH
45590: LD_INT 22
45592: PUSH
45593: LD_INT 72
45595: PUSH
45596: LD_INT 26
45598: PUSH
45599: LD_INT 69
45601: PUSH
45602: LD_INT 39
45604: PUSH
45605: LD_INT 40
45607: PUSH
45608: LD_INT 41
45610: PUSH
45611: LD_INT 42
45613: PUSH
45614: LD_INT 43
45616: PUSH
45617: LD_INT 48
45619: PUSH
45620: LD_INT 49
45622: PUSH
45623: LD_INT 50
45625: PUSH
45626: LD_INT 51
45628: PUSH
45629: LD_INT 52
45631: PUSH
45632: LD_INT 53
45634: PUSH
45635: LD_INT 54
45637: PUSH
45638: LD_INT 55
45640: PUSH
45641: LD_INT 56
45643: PUSH
45644: LD_INT 60
45646: PUSH
45647: LD_INT 61
45649: PUSH
45650: LD_INT 62
45652: PUSH
45653: LD_INT 66
45655: PUSH
45656: LD_INT 67
45658: PUSH
45659: LD_INT 68
45661: PUSH
45662: LD_INT 81
45664: PUSH
45665: LD_INT 82
45667: PUSH
45668: LD_INT 83
45670: PUSH
45671: LD_INT 84
45673: PUSH
45674: LD_INT 85
45676: PUSH
45677: LD_INT 87
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: ST_TO_ADDR
45735: GO 45968
45737: LD_INT 3
45739: DOUBLE
45740: EQUAL
45741: IFTRUE 45745
45743: GO 45967
45745: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
45746: LD_ADDR_VAR 0 4
45750: PUSH
45751: LD_INT 46
45753: PUSH
45754: LD_INT 47
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: LD_INT 82
45765: PUSH
45766: LD_INT 83
45768: PUSH
45769: LD_INT 84
45771: PUSH
45772: LD_INT 85
45774: PUSH
45775: LD_INT 86
45777: PUSH
45778: LD_INT 11
45780: PUSH
45781: LD_INT 9
45783: PUSH
45784: LD_INT 20
45786: PUSH
45787: LD_INT 19
45789: PUSH
45790: LD_INT 21
45792: PUSH
45793: LD_INT 24
45795: PUSH
45796: LD_INT 22
45798: PUSH
45799: LD_INT 25
45801: PUSH
45802: LD_INT 28
45804: PUSH
45805: LD_INT 29
45807: PUSH
45808: LD_INT 30
45810: PUSH
45811: LD_INT 31
45813: PUSH
45814: LD_INT 37
45816: PUSH
45817: LD_INT 38
45819: PUSH
45820: LD_INT 32
45822: PUSH
45823: LD_INT 27
45825: PUSH
45826: LD_INT 33
45828: PUSH
45829: LD_INT 69
45831: PUSH
45832: LD_INT 39
45834: PUSH
45835: LD_INT 34
45837: PUSH
45838: LD_INT 40
45840: PUSH
45841: LD_INT 71
45843: PUSH
45844: LD_INT 23
45846: PUSH
45847: LD_INT 44
45849: PUSH
45850: LD_INT 48
45852: PUSH
45853: LD_INT 49
45855: PUSH
45856: LD_INT 50
45858: PUSH
45859: LD_INT 51
45861: PUSH
45862: LD_INT 52
45864: PUSH
45865: LD_INT 53
45867: PUSH
45868: LD_INT 54
45870: PUSH
45871: LD_INT 55
45873: PUSH
45874: LD_INT 56
45876: PUSH
45877: LD_INT 57
45879: PUSH
45880: LD_INT 58
45882: PUSH
45883: LD_INT 59
45885: PUSH
45886: LD_INT 63
45888: PUSH
45889: LD_INT 64
45891: PUSH
45892: LD_INT 65
45894: PUSH
45895: LD_INT 82
45897: PUSH
45898: LD_INT 83
45900: PUSH
45901: LD_INT 84
45903: PUSH
45904: LD_INT 85
45906: PUSH
45907: LD_INT 86
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: ST_TO_ADDR
45965: GO 45968
45967: POP
// if state > - 1 and state < 3 then
45968: LD_VAR 0 3
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: GREATER
45977: PUSH
45978: LD_VAR 0 3
45982: PUSH
45983: LD_INT 3
45985: LESS
45986: AND
45987: IFFALSE 46044
// for i in result do
45989: LD_ADDR_VAR 0 5
45993: PUSH
45994: LD_VAR 0 4
45998: PUSH
45999: FOR_IN
46000: IFFALSE 46042
// if GetTech ( i , side ) <> state then
46002: LD_VAR 0 5
46006: PPUSH
46007: LD_VAR 0 1
46011: PPUSH
46012: CALL_OW 321
46016: PUSH
46017: LD_VAR 0 3
46021: NONEQUAL
46022: IFFALSE 46040
// result := result diff i ;
46024: LD_ADDR_VAR 0 4
46028: PUSH
46029: LD_VAR 0 4
46033: PUSH
46034: LD_VAR 0 5
46038: DIFF
46039: ST_TO_ADDR
46040: GO 45999
46042: POP
46043: POP
// end ;
46044: LD_VAR 0 4
46048: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
46049: LD_INT 0
46051: PPUSH
46052: PPUSH
46053: PPUSH
// result := true ;
46054: LD_ADDR_VAR 0 3
46058: PUSH
46059: LD_INT 1
46061: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
46062: LD_ADDR_VAR 0 5
46066: PUSH
46067: LD_VAR 0 2
46071: PPUSH
46072: CALL_OW 480
46076: ST_TO_ADDR
// if not tmp then
46077: LD_VAR 0 5
46081: NOT
46082: IFFALSE 46086
// exit ;
46084: GO 46135
// for i in tmp do
46086: LD_ADDR_VAR 0 4
46090: PUSH
46091: LD_VAR 0 5
46095: PUSH
46096: FOR_IN
46097: IFFALSE 46133
// if GetTech ( i , side ) <> state_researched then
46099: LD_VAR 0 4
46103: PPUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: CALL_OW 321
46113: PUSH
46114: LD_INT 2
46116: NONEQUAL
46117: IFFALSE 46131
// begin result := false ;
46119: LD_ADDR_VAR 0 3
46123: PUSH
46124: LD_INT 0
46126: ST_TO_ADDR
// exit ;
46127: POP
46128: POP
46129: GO 46135
// end ;
46131: GO 46096
46133: POP
46134: POP
// end ;
46135: LD_VAR 0 3
46139: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
46140: LD_INT 0
46142: PPUSH
46143: PPUSH
46144: PPUSH
46145: PPUSH
46146: PPUSH
46147: PPUSH
46148: PPUSH
46149: PPUSH
46150: PPUSH
46151: PPUSH
46152: PPUSH
46153: PPUSH
46154: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
46155: LD_VAR 0 1
46159: NOT
46160: PUSH
46161: LD_VAR 0 1
46165: PPUSH
46166: CALL_OW 257
46170: PUSH
46171: LD_INT 9
46173: NONEQUAL
46174: OR
46175: IFFALSE 46179
// exit ;
46177: GO 46752
// side := GetSide ( unit ) ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_VAR 0 1
46188: PPUSH
46189: CALL_OW 255
46193: ST_TO_ADDR
// tech_space := tech_spacanom ;
46194: LD_ADDR_VAR 0 12
46198: PUSH
46199: LD_INT 29
46201: ST_TO_ADDR
// tech_time := tech_taurad ;
46202: LD_ADDR_VAR 0 13
46206: PUSH
46207: LD_INT 28
46209: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
46210: LD_ADDR_VAR 0 11
46214: PUSH
46215: LD_VAR 0 1
46219: PPUSH
46220: CALL_OW 310
46224: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
46225: LD_VAR 0 11
46229: PPUSH
46230: CALL_OW 247
46234: PUSH
46235: LD_INT 2
46237: EQUAL
46238: IFFALSE 46242
// exit ;
46240: GO 46752
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46242: LD_ADDR_VAR 0 8
46246: PUSH
46247: LD_INT 81
46249: PUSH
46250: LD_VAR 0 9
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: LD_INT 21
46264: PUSH
46265: LD_INT 3
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PPUSH
46280: CALL_OW 69
46284: ST_TO_ADDR
// if not tmp then
46285: LD_VAR 0 8
46289: NOT
46290: IFFALSE 46294
// exit ;
46292: GO 46752
// if in_unit then
46294: LD_VAR 0 11
46298: IFFALSE 46322
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
46300: LD_ADDR_VAR 0 10
46304: PUSH
46305: LD_VAR 0 8
46309: PPUSH
46310: LD_VAR 0 11
46314: PPUSH
46315: CALL_OW 74
46319: ST_TO_ADDR
46320: GO 46342
// enemy := NearestUnitToUnit ( tmp , unit ) ;
46322: LD_ADDR_VAR 0 10
46326: PUSH
46327: LD_VAR 0 8
46331: PPUSH
46332: LD_VAR 0 1
46336: PPUSH
46337: CALL_OW 74
46341: ST_TO_ADDR
// if not enemy then
46342: LD_VAR 0 10
46346: NOT
46347: IFFALSE 46351
// exit ;
46349: GO 46752
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
46351: LD_VAR 0 11
46355: PUSH
46356: LD_VAR 0 11
46360: PPUSH
46361: LD_VAR 0 10
46365: PPUSH
46366: CALL_OW 296
46370: PUSH
46371: LD_INT 13
46373: GREATER
46374: AND
46375: PUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: LD_VAR 0 10
46385: PPUSH
46386: CALL_OW 296
46390: PUSH
46391: LD_INT 12
46393: GREATER
46394: OR
46395: IFFALSE 46399
// exit ;
46397: GO 46752
// missile := [ 1 ] ;
46399: LD_ADDR_VAR 0 14
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: ST_TO_ADDR
// if Researched ( side , tech_space ) then
46410: LD_VAR 0 9
46414: PPUSH
46415: LD_VAR 0 12
46419: PPUSH
46420: CALL_OW 325
46424: IFFALSE 46453
// missile := Insert ( missile , missile + 1 , 2 ) ;
46426: LD_ADDR_VAR 0 14
46430: PUSH
46431: LD_VAR 0 14
46435: PPUSH
46436: LD_VAR 0 14
46440: PUSH
46441: LD_INT 1
46443: PLUS
46444: PPUSH
46445: LD_INT 2
46447: PPUSH
46448: CALL_OW 2
46452: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
46453: LD_VAR 0 9
46457: PPUSH
46458: LD_VAR 0 13
46462: PPUSH
46463: CALL_OW 325
46467: PUSH
46468: LD_VAR 0 10
46472: PPUSH
46473: CALL_OW 255
46477: PPUSH
46478: LD_VAR 0 13
46482: PPUSH
46483: CALL_OW 325
46487: NOT
46488: AND
46489: IFFALSE 46518
// missile := Insert ( missile , missile + 1 , 3 ) ;
46491: LD_ADDR_VAR 0 14
46495: PUSH
46496: LD_VAR 0 14
46500: PPUSH
46501: LD_VAR 0 14
46505: PUSH
46506: LD_INT 1
46508: PLUS
46509: PPUSH
46510: LD_INT 3
46512: PPUSH
46513: CALL_OW 2
46517: ST_TO_ADDR
// if missile < 2 then
46518: LD_VAR 0 14
46522: PUSH
46523: LD_INT 2
46525: LESS
46526: IFFALSE 46530
// exit ;
46528: GO 46752
// x := GetX ( enemy ) ;
46530: LD_ADDR_VAR 0 4
46534: PUSH
46535: LD_VAR 0 10
46539: PPUSH
46540: CALL_OW 250
46544: ST_TO_ADDR
// y := GetY ( enemy ) ;
46545: LD_ADDR_VAR 0 5
46549: PUSH
46550: LD_VAR 0 10
46554: PPUSH
46555: CALL_OW 251
46559: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
46560: LD_ADDR_VAR 0 6
46564: PUSH
46565: LD_VAR 0 4
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PPUSH
46574: LD_INT 1
46576: PPUSH
46577: CALL_OW 12
46581: PLUS
46582: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
46583: LD_ADDR_VAR 0 7
46587: PUSH
46588: LD_VAR 0 5
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PPUSH
46597: LD_INT 1
46599: PPUSH
46600: CALL_OW 12
46604: PLUS
46605: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46606: LD_VAR 0 6
46610: PPUSH
46611: LD_VAR 0 7
46615: PPUSH
46616: CALL_OW 488
46620: NOT
46621: IFFALSE 46643
// begin _x := x ;
46623: LD_ADDR_VAR 0 6
46627: PUSH
46628: LD_VAR 0 4
46632: ST_TO_ADDR
// _y := y ;
46633: LD_ADDR_VAR 0 7
46637: PUSH
46638: LD_VAR 0 5
46642: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: LD_INT 1
46650: PPUSH
46651: LD_VAR 0 14
46655: PPUSH
46656: CALL_OW 12
46660: ST_TO_ADDR
// case i of 1 :
46661: LD_VAR 0 3
46665: PUSH
46666: LD_INT 1
46668: DOUBLE
46669: EQUAL
46670: IFTRUE 46674
46672: GO 46691
46674: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
46675: LD_VAR 0 1
46679: PPUSH
46680: LD_VAR 0 10
46684: PPUSH
46685: CALL_OW 115
46689: GO 46752
46691: LD_INT 2
46693: DOUBLE
46694: EQUAL
46695: IFTRUE 46699
46697: GO 46721
46699: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
46700: LD_VAR 0 1
46704: PPUSH
46705: LD_VAR 0 6
46709: PPUSH
46710: LD_VAR 0 7
46714: PPUSH
46715: CALL_OW 153
46719: GO 46752
46721: LD_INT 3
46723: DOUBLE
46724: EQUAL
46725: IFTRUE 46729
46727: GO 46751
46729: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
46730: LD_VAR 0 1
46734: PPUSH
46735: LD_VAR 0 6
46739: PPUSH
46740: LD_VAR 0 7
46744: PPUSH
46745: CALL_OW 154
46749: GO 46752
46751: POP
// end ;
46752: LD_VAR 0 2
46756: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
46757: LD_INT 0
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
// if not unit or not building then
46765: LD_VAR 0 1
46769: NOT
46770: PUSH
46771: LD_VAR 0 2
46775: NOT
46776: OR
46777: IFFALSE 46781
// exit ;
46779: GO 46939
// x := GetX ( building ) ;
46781: LD_ADDR_VAR 0 5
46785: PUSH
46786: LD_VAR 0 2
46790: PPUSH
46791: CALL_OW 250
46795: ST_TO_ADDR
// y := GetY ( building ) ;
46796: LD_ADDR_VAR 0 6
46800: PUSH
46801: LD_VAR 0 2
46805: PPUSH
46806: CALL_OW 251
46810: ST_TO_ADDR
// for i = 0 to 5 do
46811: LD_ADDR_VAR 0 4
46815: PUSH
46816: DOUBLE
46817: LD_INT 0
46819: DEC
46820: ST_TO_ADDR
46821: LD_INT 5
46823: PUSH
46824: FOR_TO
46825: IFFALSE 46937
// begin _x := ShiftX ( x , i , 3 ) ;
46827: LD_ADDR_VAR 0 7
46831: PUSH
46832: LD_VAR 0 5
46836: PPUSH
46837: LD_VAR 0 4
46841: PPUSH
46842: LD_INT 3
46844: PPUSH
46845: CALL_OW 272
46849: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
46850: LD_ADDR_VAR 0 8
46854: PUSH
46855: LD_VAR 0 6
46859: PPUSH
46860: LD_VAR 0 4
46864: PPUSH
46865: LD_INT 3
46867: PPUSH
46868: CALL_OW 273
46872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46873: LD_VAR 0 7
46877: PPUSH
46878: LD_VAR 0 8
46882: PPUSH
46883: CALL_OW 488
46887: NOT
46888: IFFALSE 46892
// continue ;
46890: GO 46824
// if HexInfo ( _x , _y ) = 0 then
46892: LD_VAR 0 7
46896: PPUSH
46897: LD_VAR 0 8
46901: PPUSH
46902: CALL_OW 428
46906: PUSH
46907: LD_INT 0
46909: EQUAL
46910: IFFALSE 46935
// begin ComMoveXY ( unit , _x , _y ) ;
46912: LD_VAR 0 1
46916: PPUSH
46917: LD_VAR 0 7
46921: PPUSH
46922: LD_VAR 0 8
46926: PPUSH
46927: CALL_OW 111
// exit ;
46931: POP
46932: POP
46933: GO 46939
// end ; end ;
46935: GO 46824
46937: POP
46938: POP
// end ;
46939: LD_VAR 0 3
46943: RET
// export function ScanBase ( side , base_area ) ; begin
46944: LD_INT 0
46946: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46947: LD_ADDR_VAR 0 3
46951: PUSH
46952: LD_VAR 0 2
46956: PPUSH
46957: LD_INT 81
46959: PUSH
46960: LD_VAR 0 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PPUSH
46969: CALL_OW 70
46973: ST_TO_ADDR
// end ;
46974: LD_VAR 0 3
46978: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
46979: LD_INT 0
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
// result := false ;
46985: LD_ADDR_VAR 0 2
46989: PUSH
46990: LD_INT 0
46992: ST_TO_ADDR
// side := GetSide ( unit ) ;
46993: LD_ADDR_VAR 0 3
46997: PUSH
46998: LD_VAR 0 1
47002: PPUSH
47003: CALL_OW 255
47007: ST_TO_ADDR
// nat := GetNation ( unit ) ;
47008: LD_ADDR_VAR 0 4
47012: PUSH
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 248
47022: ST_TO_ADDR
// case nat of 1 :
47023: LD_VAR 0 4
47027: PUSH
47028: LD_INT 1
47030: DOUBLE
47031: EQUAL
47032: IFTRUE 47036
47034: GO 47047
47036: POP
// tech := tech_lassight ; 2 :
47037: LD_ADDR_VAR 0 5
47041: PUSH
47042: LD_INT 12
47044: ST_TO_ADDR
47045: GO 47086
47047: LD_INT 2
47049: DOUBLE
47050: EQUAL
47051: IFTRUE 47055
47053: GO 47066
47055: POP
// tech := tech_mortar ; 3 :
47056: LD_ADDR_VAR 0 5
47060: PUSH
47061: LD_INT 41
47063: ST_TO_ADDR
47064: GO 47086
47066: LD_INT 3
47068: DOUBLE
47069: EQUAL
47070: IFTRUE 47074
47072: GO 47085
47074: POP
// tech := tech_bazooka ; end ;
47075: LD_ADDR_VAR 0 5
47079: PUSH
47080: LD_INT 44
47082: ST_TO_ADDR
47083: GO 47086
47085: POP
// if Researched ( side , tech ) then
47086: LD_VAR 0 3
47090: PPUSH
47091: LD_VAR 0 5
47095: PPUSH
47096: CALL_OW 325
47100: IFFALSE 47127
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
47102: LD_ADDR_VAR 0 2
47106: PUSH
47107: LD_INT 5
47109: PUSH
47110: LD_INT 8
47112: PUSH
47113: LD_INT 9
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: PUSH
47121: LD_VAR 0 4
47125: ARRAY
47126: ST_TO_ADDR
// end ;
47127: LD_VAR 0 2
47131: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
47132: LD_INT 0
47134: PPUSH
47135: PPUSH
47136: PPUSH
// if not mines then
47137: LD_VAR 0 2
47141: NOT
47142: IFFALSE 47146
// exit ;
47144: GO 47290
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47146: LD_ADDR_VAR 0 5
47150: PUSH
47151: LD_INT 81
47153: PUSH
47154: LD_VAR 0 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: PUSH
47166: LD_INT 21
47168: PUSH
47169: LD_INT 3
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PPUSH
47184: CALL_OW 69
47188: ST_TO_ADDR
// for i in mines do
47189: LD_ADDR_VAR 0 4
47193: PUSH
47194: LD_VAR 0 2
47198: PUSH
47199: FOR_IN
47200: IFFALSE 47288
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
47202: LD_VAR 0 4
47206: PUSH
47207: LD_INT 1
47209: ARRAY
47210: PPUSH
47211: LD_VAR 0 4
47215: PUSH
47216: LD_INT 2
47218: ARRAY
47219: PPUSH
47220: CALL_OW 458
47224: NOT
47225: IFFALSE 47229
// continue ;
47227: GO 47199
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
47229: LD_VAR 0 4
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: PPUSH
47238: LD_VAR 0 4
47242: PUSH
47243: LD_INT 2
47245: ARRAY
47246: PPUSH
47247: CALL_OW 428
47251: PUSH
47252: LD_VAR 0 5
47256: IN
47257: IFFALSE 47286
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
47259: LD_VAR 0 4
47263: PUSH
47264: LD_INT 1
47266: ARRAY
47267: PPUSH
47268: LD_VAR 0 4
47272: PUSH
47273: LD_INT 2
47275: ARRAY
47276: PPUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 456
// end ;
47286: GO 47199
47288: POP
47289: POP
// end ;
47290: LD_VAR 0 3
47294: RET
// export function Count ( array ) ; var i ; begin
47295: LD_INT 0
47297: PPUSH
47298: PPUSH
// result := 0 ;
47299: LD_ADDR_VAR 0 2
47303: PUSH
47304: LD_INT 0
47306: ST_TO_ADDR
// for i in array do
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_VAR 0 1
47316: PUSH
47317: FOR_IN
47318: IFFALSE 47342
// if i then
47320: LD_VAR 0 3
47324: IFFALSE 47340
// result := result + 1 ;
47326: LD_ADDR_VAR 0 2
47330: PUSH
47331: LD_VAR 0 2
47335: PUSH
47336: LD_INT 1
47338: PLUS
47339: ST_TO_ADDR
47340: GO 47317
47342: POP
47343: POP
// end ;
47344: LD_VAR 0 2
47348: RET
// export function IsEmpty ( building ) ; begin
47349: LD_INT 0
47351: PPUSH
// if not building then
47352: LD_VAR 0 1
47356: NOT
47357: IFFALSE 47361
// exit ;
47359: GO 47404
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
47361: LD_ADDR_VAR 0 2
47365: PUSH
47366: LD_VAR 0 1
47370: PUSH
47371: LD_INT 22
47373: PUSH
47374: LD_VAR 0 1
47378: PPUSH
47379: CALL_OW 255
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 58
47390: PUSH
47391: EMPTY
47392: LIST
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PPUSH
47398: CALL_OW 69
47402: IN
47403: ST_TO_ADDR
// end ;
47404: LD_VAR 0 2
47408: RET
// export function IsNotFull ( building ) ; begin
47409: LD_INT 0
47411: PPUSH
// if not building then
47412: LD_VAR 0 1
47416: NOT
47417: IFFALSE 47421
// exit ;
47419: GO 47440
// result := UnitsInside ( building ) < 6 ;
47421: LD_ADDR_VAR 0 2
47425: PUSH
47426: LD_VAR 0 1
47430: PPUSH
47431: CALL_OW 313
47435: PUSH
47436: LD_INT 6
47438: LESS
47439: ST_TO_ADDR
// end ;
47440: LD_VAR 0 2
47444: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
47445: LD_INT 0
47447: PPUSH
47448: PPUSH
47449: PPUSH
47450: PPUSH
// tmp := [ ] ;
47451: LD_ADDR_VAR 0 3
47455: PUSH
47456: EMPTY
47457: ST_TO_ADDR
// list := [ ] ;
47458: LD_ADDR_VAR 0 5
47462: PUSH
47463: EMPTY
47464: ST_TO_ADDR
// for i = 16 to 25 do
47465: LD_ADDR_VAR 0 4
47469: PUSH
47470: DOUBLE
47471: LD_INT 16
47473: DEC
47474: ST_TO_ADDR
47475: LD_INT 25
47477: PUSH
47478: FOR_TO
47479: IFFALSE 47552
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_VAR 0 3
47490: PUSH
47491: LD_INT 22
47493: PUSH
47494: LD_VAR 0 1
47498: PPUSH
47499: CALL_OW 255
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 91
47510: PUSH
47511: LD_VAR 0 1
47515: PUSH
47516: LD_INT 6
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 30
47526: PUSH
47527: LD_VAR 0 4
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: PUSH
47541: EMPTY
47542: LIST
47543: PPUSH
47544: CALL_OW 69
47548: ADD
47549: ST_TO_ADDR
47550: GO 47478
47552: POP
47553: POP
// for i = 1 to tmp do
47554: LD_ADDR_VAR 0 4
47558: PUSH
47559: DOUBLE
47560: LD_INT 1
47562: DEC
47563: ST_TO_ADDR
47564: LD_VAR 0 3
47568: PUSH
47569: FOR_TO
47570: IFFALSE 47658
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
47572: LD_ADDR_VAR 0 5
47576: PUSH
47577: LD_VAR 0 5
47581: PUSH
47582: LD_VAR 0 3
47586: PUSH
47587: LD_VAR 0 4
47591: ARRAY
47592: PPUSH
47593: CALL_OW 266
47597: PUSH
47598: LD_VAR 0 3
47602: PUSH
47603: LD_VAR 0 4
47607: ARRAY
47608: PPUSH
47609: CALL_OW 250
47613: PUSH
47614: LD_VAR 0 3
47618: PUSH
47619: LD_VAR 0 4
47623: ARRAY
47624: PPUSH
47625: CALL_OW 251
47629: PUSH
47630: LD_VAR 0 3
47634: PUSH
47635: LD_VAR 0 4
47639: ARRAY
47640: PPUSH
47641: CALL_OW 254
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: PUSH
47652: EMPTY
47653: LIST
47654: ADD
47655: ST_TO_ADDR
47656: GO 47569
47658: POP
47659: POP
// result := list ;
47660: LD_ADDR_VAR 0 2
47664: PUSH
47665: LD_VAR 0 5
47669: ST_TO_ADDR
// end ;
47670: LD_VAR 0 2
47674: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
47675: LD_INT 0
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
// if not factory then
47684: LD_VAR 0 1
47688: NOT
47689: IFFALSE 47693
// exit ;
47691: GO 48286
// if control = control_apeman then
47693: LD_VAR 0 4
47697: PUSH
47698: LD_INT 5
47700: EQUAL
47701: IFFALSE 47810
// begin tmp := UnitsInside ( factory ) ;
47703: LD_ADDR_VAR 0 8
47707: PUSH
47708: LD_VAR 0 1
47712: PPUSH
47713: CALL_OW 313
47717: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
47718: LD_VAR 0 8
47722: PPUSH
47723: LD_INT 25
47725: PUSH
47726: LD_INT 12
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PPUSH
47733: CALL_OW 72
47737: NOT
47738: IFFALSE 47748
// control := control_manual ;
47740: LD_ADDR_VAR 0 4
47744: PUSH
47745: LD_INT 1
47747: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
47748: LD_ADDR_VAR 0 8
47752: PUSH
47753: LD_VAR 0 1
47757: PPUSH
47758: CALL 47445 0 1
47762: ST_TO_ADDR
// if tmp then
47763: LD_VAR 0 8
47767: IFFALSE 47810
// begin for i in tmp do
47769: LD_ADDR_VAR 0 7
47773: PUSH
47774: LD_VAR 0 8
47778: PUSH
47779: FOR_IN
47780: IFFALSE 47808
// if i [ 1 ] = b_ext_radio then
47782: LD_VAR 0 7
47786: PUSH
47787: LD_INT 1
47789: ARRAY
47790: PUSH
47791: LD_INT 22
47793: EQUAL
47794: IFFALSE 47806
// begin control := control_remote ;
47796: LD_ADDR_VAR 0 4
47800: PUSH
47801: LD_INT 2
47803: ST_TO_ADDR
// break ;
47804: GO 47808
// end ;
47806: GO 47779
47808: POP
47809: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
47810: LD_VAR 0 1
47814: PPUSH
47815: LD_VAR 0 2
47819: PPUSH
47820: LD_VAR 0 3
47824: PPUSH
47825: LD_VAR 0 4
47829: PPUSH
47830: LD_VAR 0 5
47834: PPUSH
47835: CALL_OW 448
47839: IFFALSE 47874
// begin result := [ chassis , engine , control , weapon ] ;
47841: LD_ADDR_VAR 0 6
47845: PUSH
47846: LD_VAR 0 2
47850: PUSH
47851: LD_VAR 0 3
47855: PUSH
47856: LD_VAR 0 4
47860: PUSH
47861: LD_VAR 0 5
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// exit ;
47872: GO 48286
// end ; _chassis := AvailableChassisList ( factory ) ;
47874: LD_ADDR_VAR 0 9
47878: PUSH
47879: LD_VAR 0 1
47883: PPUSH
47884: CALL_OW 475
47888: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
47889: LD_ADDR_VAR 0 11
47893: PUSH
47894: LD_VAR 0 1
47898: PPUSH
47899: CALL_OW 476
47903: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
47904: LD_ADDR_VAR 0 12
47908: PUSH
47909: LD_VAR 0 1
47913: PPUSH
47914: CALL_OW 477
47918: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
47919: LD_ADDR_VAR 0 10
47923: PUSH
47924: LD_VAR 0 1
47928: PPUSH
47929: CALL_OW 478
47933: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
47934: LD_VAR 0 9
47938: NOT
47939: PUSH
47940: LD_VAR 0 11
47944: NOT
47945: OR
47946: PUSH
47947: LD_VAR 0 12
47951: NOT
47952: OR
47953: PUSH
47954: LD_VAR 0 10
47958: NOT
47959: OR
47960: IFFALSE 47995
// begin result := [ chassis , engine , control , weapon ] ;
47962: LD_ADDR_VAR 0 6
47966: PUSH
47967: LD_VAR 0 2
47971: PUSH
47972: LD_VAR 0 3
47976: PUSH
47977: LD_VAR 0 4
47981: PUSH
47982: LD_VAR 0 5
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: ST_TO_ADDR
// exit ;
47993: GO 48286
// end ; if not chassis in _chassis then
47995: LD_VAR 0 2
47999: PUSH
48000: LD_VAR 0 9
48004: IN
48005: NOT
48006: IFFALSE 48032
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
48008: LD_ADDR_VAR 0 2
48012: PUSH
48013: LD_VAR 0 9
48017: PUSH
48018: LD_INT 1
48020: PPUSH
48021: LD_VAR 0 9
48025: PPUSH
48026: CALL_OW 12
48030: ARRAY
48031: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
48032: LD_VAR 0 2
48036: PPUSH
48037: LD_VAR 0 3
48041: PPUSH
48042: CALL 48291 0 2
48046: NOT
48047: IFFALSE 48106
// repeat engine := _engine [ 1 ] ;
48049: LD_ADDR_VAR 0 3
48053: PUSH
48054: LD_VAR 0 11
48058: PUSH
48059: LD_INT 1
48061: ARRAY
48062: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
48063: LD_ADDR_VAR 0 11
48067: PUSH
48068: LD_VAR 0 11
48072: PPUSH
48073: LD_INT 1
48075: PPUSH
48076: CALL_OW 3
48080: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
48081: LD_VAR 0 2
48085: PPUSH
48086: LD_VAR 0 3
48090: PPUSH
48091: CALL 48291 0 2
48095: PUSH
48096: LD_VAR 0 11
48100: PUSH
48101: EMPTY
48102: EQUAL
48103: OR
48104: IFFALSE 48049
// if not control in _control then
48106: LD_VAR 0 4
48110: PUSH
48111: LD_VAR 0 12
48115: IN
48116: NOT
48117: IFFALSE 48143
// control := _control [ rand ( 1 , _control ) ] ;
48119: LD_ADDR_VAR 0 4
48123: PUSH
48124: LD_VAR 0 12
48128: PUSH
48129: LD_INT 1
48131: PPUSH
48132: LD_VAR 0 12
48136: PPUSH
48137: CALL_OW 12
48141: ARRAY
48142: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
48143: LD_VAR 0 2
48147: PPUSH
48148: LD_VAR 0 5
48152: PPUSH
48153: CALL 48511 0 2
48157: NOT
48158: IFFALSE 48217
// repeat weapon := _weapon [ 1 ] ;
48160: LD_ADDR_VAR 0 5
48164: PUSH
48165: LD_VAR 0 10
48169: PUSH
48170: LD_INT 1
48172: ARRAY
48173: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
48174: LD_ADDR_VAR 0 10
48178: PUSH
48179: LD_VAR 0 10
48183: PPUSH
48184: LD_INT 1
48186: PPUSH
48187: CALL_OW 3
48191: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
48192: LD_VAR 0 2
48196: PPUSH
48197: LD_VAR 0 5
48201: PPUSH
48202: CALL 48511 0 2
48206: PUSH
48207: LD_VAR 0 10
48211: PUSH
48212: EMPTY
48213: EQUAL
48214: OR
48215: IFFALSE 48160
// result := [ ] ;
48217: LD_ADDR_VAR 0 6
48221: PUSH
48222: EMPTY
48223: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48224: LD_VAR 0 1
48228: PPUSH
48229: LD_VAR 0 2
48233: PPUSH
48234: LD_VAR 0 3
48238: PPUSH
48239: LD_VAR 0 4
48243: PPUSH
48244: LD_VAR 0 5
48248: PPUSH
48249: CALL_OW 448
48253: IFFALSE 48286
// result := [ chassis , engine , control , weapon ] ;
48255: LD_ADDR_VAR 0 6
48259: PUSH
48260: LD_VAR 0 2
48264: PUSH
48265: LD_VAR 0 3
48269: PUSH
48270: LD_VAR 0 4
48274: PUSH
48275: LD_VAR 0 5
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// end ;
48286: LD_VAR 0 6
48290: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
48291: LD_INT 0
48293: PPUSH
// if not chassis or not engine then
48294: LD_VAR 0 1
48298: NOT
48299: PUSH
48300: LD_VAR 0 2
48304: NOT
48305: OR
48306: IFFALSE 48310
// exit ;
48308: GO 48506
// case engine of engine_solar :
48310: LD_VAR 0 2
48314: PUSH
48315: LD_INT 2
48317: DOUBLE
48318: EQUAL
48319: IFTRUE 48323
48321: GO 48361
48323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
48324: LD_ADDR_VAR 0 3
48328: PUSH
48329: LD_INT 11
48331: PUSH
48332: LD_INT 12
48334: PUSH
48335: LD_INT 13
48337: PUSH
48338: LD_INT 14
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 3
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
48359: GO 48490
48361: LD_INT 1
48363: DOUBLE
48364: EQUAL
48365: IFTRUE 48369
48367: GO 48431
48369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
48370: LD_ADDR_VAR 0 3
48374: PUSH
48375: LD_INT 11
48377: PUSH
48378: LD_INT 12
48380: PUSH
48381: LD_INT 13
48383: PUSH
48384: LD_INT 14
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 4
48398: PUSH
48399: LD_INT 5
48401: PUSH
48402: LD_INT 21
48404: PUSH
48405: LD_INT 23
48407: PUSH
48408: LD_INT 22
48410: PUSH
48411: LD_INT 24
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: ST_TO_ADDR
48429: GO 48490
48431: LD_INT 3
48433: DOUBLE
48434: EQUAL
48435: IFTRUE 48439
48437: GO 48489
48439: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48440: LD_ADDR_VAR 0 3
48444: PUSH
48445: LD_INT 13
48447: PUSH
48448: LD_INT 14
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: LD_INT 4
48459: PUSH
48460: LD_INT 5
48462: PUSH
48463: LD_INT 21
48465: PUSH
48466: LD_INT 22
48468: PUSH
48469: LD_INT 23
48471: PUSH
48472: LD_INT 24
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
48487: GO 48490
48489: POP
// result := ( chassis in result ) ;
48490: LD_ADDR_VAR 0 3
48494: PUSH
48495: LD_VAR 0 1
48499: PUSH
48500: LD_VAR 0 3
48504: IN
48505: ST_TO_ADDR
// end ;
48506: LD_VAR 0 3
48510: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
48511: LD_INT 0
48513: PPUSH
// if not chassis or not weapon then
48514: LD_VAR 0 1
48518: NOT
48519: PUSH
48520: LD_VAR 0 2
48524: NOT
48525: OR
48526: IFFALSE 48530
// exit ;
48528: GO 49556
// case weapon of us_machine_gun :
48530: LD_VAR 0 2
48534: PUSH
48535: LD_INT 2
48537: DOUBLE
48538: EQUAL
48539: IFTRUE 48543
48541: GO 48573
48543: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: LD_INT 4
48560: PUSH
48561: LD_INT 5
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: ST_TO_ADDR
48571: GO 49540
48573: LD_INT 3
48575: DOUBLE
48576: EQUAL
48577: IFTRUE 48581
48579: GO 48611
48581: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
48582: LD_ADDR_VAR 0 3
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 4
48598: PUSH
48599: LD_INT 5
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
48609: GO 49540
48611: LD_INT 11
48613: DOUBLE
48614: EQUAL
48615: IFTRUE 48619
48617: GO 48649
48619: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
48620: LD_ADDR_VAR 0 3
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: LD_INT 4
48636: PUSH
48637: LD_INT 5
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: ST_TO_ADDR
48647: GO 49540
48649: LD_INT 4
48651: DOUBLE
48652: EQUAL
48653: IFTRUE 48657
48655: GO 48683
48657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
48658: LD_ADDR_VAR 0 3
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 3
48668: PUSH
48669: LD_INT 4
48671: PUSH
48672: LD_INT 5
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
48681: GO 49540
48683: LD_INT 5
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48691
48689: GO 48717
48691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
48692: LD_ADDR_VAR 0 3
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 3
48702: PUSH
48703: LD_INT 4
48705: PUSH
48706: LD_INT 5
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: ST_TO_ADDR
48715: GO 49540
48717: LD_INT 9
48719: DOUBLE
48720: EQUAL
48721: IFTRUE 48725
48723: GO 48751
48725: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
48726: LD_ADDR_VAR 0 3
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 3
48736: PUSH
48737: LD_INT 4
48739: PUSH
48740: LD_INT 5
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: ST_TO_ADDR
48749: GO 49540
48751: LD_INT 7
48753: DOUBLE
48754: EQUAL
48755: IFTRUE 48759
48757: GO 48785
48759: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
48760: LD_ADDR_VAR 0 3
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: LD_INT 3
48770: PUSH
48771: LD_INT 4
48773: PUSH
48774: LD_INT 5
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: ST_TO_ADDR
48783: GO 49540
48785: LD_INT 12
48787: DOUBLE
48788: EQUAL
48789: IFTRUE 48793
48791: GO 48819
48793: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
48794: LD_ADDR_VAR 0 3
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: LD_INT 4
48807: PUSH
48808: LD_INT 5
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
48817: GO 49540
48819: LD_INT 13
48821: DOUBLE
48822: EQUAL
48823: IFTRUE 48827
48825: GO 48853
48827: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
48828: LD_ADDR_VAR 0 3
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 4
48841: PUSH
48842: LD_INT 5
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: ST_TO_ADDR
48851: GO 49540
48853: LD_INT 14
48855: DOUBLE
48856: EQUAL
48857: IFTRUE 48861
48859: GO 48879
48861: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
48862: LD_ADDR_VAR 0 3
48866: PUSH
48867: LD_INT 4
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: ST_TO_ADDR
48877: GO 49540
48879: LD_INT 6
48881: DOUBLE
48882: EQUAL
48883: IFTRUE 48887
48885: GO 48905
48887: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
48888: LD_ADDR_VAR 0 3
48892: PUSH
48893: LD_INT 4
48895: PUSH
48896: LD_INT 5
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: ST_TO_ADDR
48903: GO 49540
48905: LD_INT 10
48907: DOUBLE
48908: EQUAL
48909: IFTRUE 48913
48911: GO 48931
48913: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
48914: LD_ADDR_VAR 0 3
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: LD_INT 5
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: ST_TO_ADDR
48929: GO 49540
48931: LD_INT 22
48933: DOUBLE
48934: EQUAL
48935: IFTRUE 48939
48937: GO 48965
48939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
48940: LD_ADDR_VAR 0 3
48944: PUSH
48945: LD_INT 11
48947: PUSH
48948: LD_INT 12
48950: PUSH
48951: LD_INT 13
48953: PUSH
48954: LD_INT 14
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
48963: GO 49540
48965: LD_INT 23
48967: DOUBLE
48968: EQUAL
48969: IFTRUE 48973
48971: GO 48999
48973: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
48974: LD_ADDR_VAR 0 3
48978: PUSH
48979: LD_INT 11
48981: PUSH
48982: LD_INT 12
48984: PUSH
48985: LD_INT 13
48987: PUSH
48988: LD_INT 14
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: ST_TO_ADDR
48997: GO 49540
48999: LD_INT 24
49001: DOUBLE
49002: EQUAL
49003: IFTRUE 49007
49005: GO 49033
49007: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
49008: LD_ADDR_VAR 0 3
49012: PUSH
49013: LD_INT 11
49015: PUSH
49016: LD_INT 12
49018: PUSH
49019: LD_INT 13
49021: PUSH
49022: LD_INT 14
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: ST_TO_ADDR
49031: GO 49540
49033: LD_INT 30
49035: DOUBLE
49036: EQUAL
49037: IFTRUE 49041
49039: GO 49067
49041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
49042: LD_ADDR_VAR 0 3
49046: PUSH
49047: LD_INT 11
49049: PUSH
49050: LD_INT 12
49052: PUSH
49053: LD_INT 13
49055: PUSH
49056: LD_INT 14
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: ST_TO_ADDR
49065: GO 49540
49067: LD_INT 25
49069: DOUBLE
49070: EQUAL
49071: IFTRUE 49075
49073: GO 49093
49075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
49076: LD_ADDR_VAR 0 3
49080: PUSH
49081: LD_INT 13
49083: PUSH
49084: LD_INT 14
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: ST_TO_ADDR
49091: GO 49540
49093: LD_INT 27
49095: DOUBLE
49096: EQUAL
49097: IFTRUE 49101
49099: GO 49119
49101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
49102: LD_ADDR_VAR 0 3
49106: PUSH
49107: LD_INT 13
49109: PUSH
49110: LD_INT 14
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: ST_TO_ADDR
49117: GO 49540
49119: LD_INT 28
49121: DOUBLE
49122: EQUAL
49123: IFTRUE 49127
49125: GO 49145
49127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
49128: LD_ADDR_VAR 0 3
49132: PUSH
49133: LD_INT 13
49135: PUSH
49136: LD_INT 14
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: ST_TO_ADDR
49143: GO 49540
49145: LD_INT 29
49147: DOUBLE
49148: EQUAL
49149: IFTRUE 49153
49151: GO 49171
49153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
49154: LD_ADDR_VAR 0 3
49158: PUSH
49159: LD_INT 13
49161: PUSH
49162: LD_INT 14
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: ST_TO_ADDR
49169: GO 49540
49171: LD_INT 31
49173: DOUBLE
49174: EQUAL
49175: IFTRUE 49179
49177: GO 49197
49179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
49180: LD_ADDR_VAR 0 3
49184: PUSH
49185: LD_INT 13
49187: PUSH
49188: LD_INT 14
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: ST_TO_ADDR
49195: GO 49540
49197: LD_INT 26
49199: DOUBLE
49200: EQUAL
49201: IFTRUE 49205
49203: GO 49223
49205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
49206: LD_ADDR_VAR 0 3
49210: PUSH
49211: LD_INT 13
49213: PUSH
49214: LD_INT 14
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: ST_TO_ADDR
49221: GO 49540
49223: LD_INT 42
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49231
49229: GO 49257
49231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
49232: LD_ADDR_VAR 0 3
49236: PUSH
49237: LD_INT 21
49239: PUSH
49240: LD_INT 22
49242: PUSH
49243: LD_INT 23
49245: PUSH
49246: LD_INT 24
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: ST_TO_ADDR
49255: GO 49540
49257: LD_INT 43
49259: DOUBLE
49260: EQUAL
49261: IFTRUE 49265
49263: GO 49291
49265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
49266: LD_ADDR_VAR 0 3
49270: PUSH
49271: LD_INT 21
49273: PUSH
49274: LD_INT 22
49276: PUSH
49277: LD_INT 23
49279: PUSH
49280: LD_INT 24
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
49289: GO 49540
49291: LD_INT 44
49293: DOUBLE
49294: EQUAL
49295: IFTRUE 49299
49297: GO 49325
49299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
49300: LD_ADDR_VAR 0 3
49304: PUSH
49305: LD_INT 21
49307: PUSH
49308: LD_INT 22
49310: PUSH
49311: LD_INT 23
49313: PUSH
49314: LD_INT 24
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
49323: GO 49540
49325: LD_INT 45
49327: DOUBLE
49328: EQUAL
49329: IFTRUE 49333
49331: GO 49359
49333: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
49334: LD_ADDR_VAR 0 3
49338: PUSH
49339: LD_INT 21
49341: PUSH
49342: LD_INT 22
49344: PUSH
49345: LD_INT 23
49347: PUSH
49348: LD_INT 24
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: ST_TO_ADDR
49357: GO 49540
49359: LD_INT 49
49361: DOUBLE
49362: EQUAL
49363: IFTRUE 49367
49365: GO 49393
49367: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
49368: LD_ADDR_VAR 0 3
49372: PUSH
49373: LD_INT 21
49375: PUSH
49376: LD_INT 22
49378: PUSH
49379: LD_INT 23
49381: PUSH
49382: LD_INT 24
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
49391: GO 49540
49393: LD_INT 51
49395: DOUBLE
49396: EQUAL
49397: IFTRUE 49401
49399: GO 49427
49401: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
49402: LD_ADDR_VAR 0 3
49406: PUSH
49407: LD_INT 21
49409: PUSH
49410: LD_INT 22
49412: PUSH
49413: LD_INT 23
49415: PUSH
49416: LD_INT 24
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
49425: GO 49540
49427: LD_INT 52
49429: DOUBLE
49430: EQUAL
49431: IFTRUE 49435
49433: GO 49461
49435: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
49436: LD_ADDR_VAR 0 3
49440: PUSH
49441: LD_INT 21
49443: PUSH
49444: LD_INT 22
49446: PUSH
49447: LD_INT 23
49449: PUSH
49450: LD_INT 24
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: ST_TO_ADDR
49459: GO 49540
49461: LD_INT 53
49463: DOUBLE
49464: EQUAL
49465: IFTRUE 49469
49467: GO 49487
49469: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
49470: LD_ADDR_VAR 0 3
49474: PUSH
49475: LD_INT 23
49477: PUSH
49478: LD_INT 24
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: ST_TO_ADDR
49485: GO 49540
49487: LD_INT 46
49489: DOUBLE
49490: EQUAL
49491: IFTRUE 49495
49493: GO 49513
49495: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
49496: LD_ADDR_VAR 0 3
49500: PUSH
49501: LD_INT 23
49503: PUSH
49504: LD_INT 24
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: ST_TO_ADDR
49511: GO 49540
49513: LD_INT 47
49515: DOUBLE
49516: EQUAL
49517: IFTRUE 49521
49519: GO 49539
49521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49522: LD_ADDR_VAR 0 3
49526: PUSH
49527: LD_INT 23
49529: PUSH
49530: LD_INT 24
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: ST_TO_ADDR
49537: GO 49540
49539: POP
// result := ( chassis in result ) ;
49540: LD_ADDR_VAR 0 3
49544: PUSH
49545: LD_VAR 0 1
49549: PUSH
49550: LD_VAR 0 3
49554: IN
49555: ST_TO_ADDR
// end ;
49556: LD_VAR 0 3
49560: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
49561: LD_INT 0
49563: PPUSH
49564: PPUSH
49565: PPUSH
49566: PPUSH
49567: PPUSH
49568: PPUSH
49569: PPUSH
// result := array ;
49570: LD_ADDR_VAR 0 5
49574: PUSH
49575: LD_VAR 0 1
49579: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
49580: LD_VAR 0 1
49584: NOT
49585: PUSH
49586: LD_VAR 0 2
49590: NOT
49591: OR
49592: PUSH
49593: LD_VAR 0 3
49597: NOT
49598: OR
49599: PUSH
49600: LD_VAR 0 2
49604: PUSH
49605: LD_VAR 0 1
49609: GREATER
49610: OR
49611: PUSH
49612: LD_VAR 0 3
49616: PUSH
49617: LD_VAR 0 1
49621: GREATER
49622: OR
49623: IFFALSE 49627
// exit ;
49625: GO 49923
// if direction then
49627: LD_VAR 0 4
49631: IFFALSE 49695
// begin d := 1 ;
49633: LD_ADDR_VAR 0 9
49637: PUSH
49638: LD_INT 1
49640: ST_TO_ADDR
// if i_from > i_to then
49641: LD_VAR 0 2
49645: PUSH
49646: LD_VAR 0 3
49650: GREATER
49651: IFFALSE 49677
// length := ( array - i_from ) + i_to else
49653: LD_ADDR_VAR 0 11
49657: PUSH
49658: LD_VAR 0 1
49662: PUSH
49663: LD_VAR 0 2
49667: MINUS
49668: PUSH
49669: LD_VAR 0 3
49673: PLUS
49674: ST_TO_ADDR
49675: GO 49693
// length := i_to - i_from ;
49677: LD_ADDR_VAR 0 11
49681: PUSH
49682: LD_VAR 0 3
49686: PUSH
49687: LD_VAR 0 2
49691: MINUS
49692: ST_TO_ADDR
// end else
49693: GO 49756
// begin d := - 1 ;
49695: LD_ADDR_VAR 0 9
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: ST_TO_ADDR
// if i_from > i_to then
49704: LD_VAR 0 2
49708: PUSH
49709: LD_VAR 0 3
49713: GREATER
49714: IFFALSE 49734
// length := i_from - i_to else
49716: LD_ADDR_VAR 0 11
49720: PUSH
49721: LD_VAR 0 2
49725: PUSH
49726: LD_VAR 0 3
49730: MINUS
49731: ST_TO_ADDR
49732: GO 49756
// length := ( array - i_to ) + i_from ;
49734: LD_ADDR_VAR 0 11
49738: PUSH
49739: LD_VAR 0 1
49743: PUSH
49744: LD_VAR 0 3
49748: MINUS
49749: PUSH
49750: LD_VAR 0 2
49754: PLUS
49755: ST_TO_ADDR
// end ; if not length then
49756: LD_VAR 0 11
49760: NOT
49761: IFFALSE 49765
// exit ;
49763: GO 49923
// tmp := array ;
49765: LD_ADDR_VAR 0 10
49769: PUSH
49770: LD_VAR 0 1
49774: ST_TO_ADDR
// for i = 1 to length do
49775: LD_ADDR_VAR 0 6
49779: PUSH
49780: DOUBLE
49781: LD_INT 1
49783: DEC
49784: ST_TO_ADDR
49785: LD_VAR 0 11
49789: PUSH
49790: FOR_TO
49791: IFFALSE 49911
// begin for j = 1 to array do
49793: LD_ADDR_VAR 0 7
49797: PUSH
49798: DOUBLE
49799: LD_INT 1
49801: DEC
49802: ST_TO_ADDR
49803: LD_VAR 0 1
49807: PUSH
49808: FOR_TO
49809: IFFALSE 49897
// begin k := j + d ;
49811: LD_ADDR_VAR 0 8
49815: PUSH
49816: LD_VAR 0 7
49820: PUSH
49821: LD_VAR 0 9
49825: PLUS
49826: ST_TO_ADDR
// if k > array then
49827: LD_VAR 0 8
49831: PUSH
49832: LD_VAR 0 1
49836: GREATER
49837: IFFALSE 49847
// k := 1 ;
49839: LD_ADDR_VAR 0 8
49843: PUSH
49844: LD_INT 1
49846: ST_TO_ADDR
// if not k then
49847: LD_VAR 0 8
49851: NOT
49852: IFFALSE 49864
// k := array ;
49854: LD_ADDR_VAR 0 8
49858: PUSH
49859: LD_VAR 0 1
49863: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
49864: LD_ADDR_VAR 0 10
49868: PUSH
49869: LD_VAR 0 10
49873: PPUSH
49874: LD_VAR 0 8
49878: PPUSH
49879: LD_VAR 0 1
49883: PUSH
49884: LD_VAR 0 7
49888: ARRAY
49889: PPUSH
49890: CALL_OW 1
49894: ST_TO_ADDR
// end ;
49895: GO 49808
49897: POP
49898: POP
// array := tmp ;
49899: LD_ADDR_VAR 0 1
49903: PUSH
49904: LD_VAR 0 10
49908: ST_TO_ADDR
// end ;
49909: GO 49790
49911: POP
49912: POP
// result := array ;
49913: LD_ADDR_VAR 0 5
49917: PUSH
49918: LD_VAR 0 1
49922: ST_TO_ADDR
// end ;
49923: LD_VAR 0 5
49927: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
49928: LD_INT 0
49930: PPUSH
49931: PPUSH
// result := 0 ;
49932: LD_ADDR_VAR 0 3
49936: PUSH
49937: LD_INT 0
49939: ST_TO_ADDR
// if not array or not value in array then
49940: LD_VAR 0 1
49944: NOT
49945: PUSH
49946: LD_VAR 0 2
49950: PUSH
49951: LD_VAR 0 1
49955: IN
49956: NOT
49957: OR
49958: IFFALSE 49962
// exit ;
49960: GO 50016
// for i = 1 to array do
49962: LD_ADDR_VAR 0 4
49966: PUSH
49967: DOUBLE
49968: LD_INT 1
49970: DEC
49971: ST_TO_ADDR
49972: LD_VAR 0 1
49976: PUSH
49977: FOR_TO
49978: IFFALSE 50014
// if value = array [ i ] then
49980: LD_VAR 0 2
49984: PUSH
49985: LD_VAR 0 1
49989: PUSH
49990: LD_VAR 0 4
49994: ARRAY
49995: EQUAL
49996: IFFALSE 50012
// begin result := i ;
49998: LD_ADDR_VAR 0 3
50002: PUSH
50003: LD_VAR 0 4
50007: ST_TO_ADDR
// exit ;
50008: POP
50009: POP
50010: GO 50016
// end ;
50012: GO 49977
50014: POP
50015: POP
// end ;
50016: LD_VAR 0 3
50020: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
50021: LD_INT 0
50023: PPUSH
// vc_chassis := chassis ;
50024: LD_ADDR_OWVAR 37
50028: PUSH
50029: LD_VAR 0 1
50033: ST_TO_ADDR
// vc_engine := engine ;
50034: LD_ADDR_OWVAR 39
50038: PUSH
50039: LD_VAR 0 2
50043: ST_TO_ADDR
// vc_control := control ;
50044: LD_ADDR_OWVAR 38
50048: PUSH
50049: LD_VAR 0 3
50053: ST_TO_ADDR
// vc_weapon := weapon ;
50054: LD_ADDR_OWVAR 40
50058: PUSH
50059: LD_VAR 0 4
50063: ST_TO_ADDR
// vc_fuel_battery := fuel ;
50064: LD_ADDR_OWVAR 41
50068: PUSH
50069: LD_VAR 0 5
50073: ST_TO_ADDR
// end ;
50074: LD_VAR 0 6
50078: RET
// export function WantPlant ( unit ) ; var task ; begin
50079: LD_INT 0
50081: PPUSH
50082: PPUSH
// result := false ;
50083: LD_ADDR_VAR 0 2
50087: PUSH
50088: LD_INT 0
50090: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
50091: LD_ADDR_VAR 0 3
50095: PUSH
50096: LD_VAR 0 1
50100: PPUSH
50101: CALL_OW 437
50105: ST_TO_ADDR
// if task then
50106: LD_VAR 0 3
50110: IFFALSE 50138
// if task [ 1 ] [ 1 ] = p then
50112: LD_VAR 0 3
50116: PUSH
50117: LD_INT 1
50119: ARRAY
50120: PUSH
50121: LD_INT 1
50123: ARRAY
50124: PUSH
50125: LD_STRING p
50127: EQUAL
50128: IFFALSE 50138
// result := true ;
50130: LD_ADDR_VAR 0 2
50134: PUSH
50135: LD_INT 1
50137: ST_TO_ADDR
// end ;
50138: LD_VAR 0 2
50142: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
50143: LD_INT 0
50145: PPUSH
50146: PPUSH
50147: PPUSH
50148: PPUSH
// if pos < 1 then
50149: LD_VAR 0 2
50153: PUSH
50154: LD_INT 1
50156: LESS
50157: IFFALSE 50161
// exit ;
50159: GO 50464
// if pos = 1 then
50161: LD_VAR 0 2
50165: PUSH
50166: LD_INT 1
50168: EQUAL
50169: IFFALSE 50202
// result := Replace ( arr , pos [ 1 ] , value ) else
50171: LD_ADDR_VAR 0 4
50175: PUSH
50176: LD_VAR 0 1
50180: PPUSH
50181: LD_VAR 0 2
50185: PUSH
50186: LD_INT 1
50188: ARRAY
50189: PPUSH
50190: LD_VAR 0 3
50194: PPUSH
50195: CALL_OW 1
50199: ST_TO_ADDR
50200: GO 50464
// begin tmp := arr ;
50202: LD_ADDR_VAR 0 6
50206: PUSH
50207: LD_VAR 0 1
50211: ST_TO_ADDR
// s_arr := [ tmp ] ;
50212: LD_ADDR_VAR 0 7
50216: PUSH
50217: LD_VAR 0 6
50221: PUSH
50222: EMPTY
50223: LIST
50224: ST_TO_ADDR
// for i = 1 to pos - 1 do
50225: LD_ADDR_VAR 0 5
50229: PUSH
50230: DOUBLE
50231: LD_INT 1
50233: DEC
50234: ST_TO_ADDR
50235: LD_VAR 0 2
50239: PUSH
50240: LD_INT 1
50242: MINUS
50243: PUSH
50244: FOR_TO
50245: IFFALSE 50290
// begin tmp := tmp [ pos [ i ] ] ;
50247: LD_ADDR_VAR 0 6
50251: PUSH
50252: LD_VAR 0 6
50256: PUSH
50257: LD_VAR 0 2
50261: PUSH
50262: LD_VAR 0 5
50266: ARRAY
50267: ARRAY
50268: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
50269: LD_ADDR_VAR 0 7
50273: PUSH
50274: LD_VAR 0 7
50278: PUSH
50279: LD_VAR 0 6
50283: PUSH
50284: EMPTY
50285: LIST
50286: ADD
50287: ST_TO_ADDR
// end ;
50288: GO 50244
50290: POP
50291: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
50292: LD_ADDR_VAR 0 6
50296: PUSH
50297: LD_VAR 0 6
50301: PPUSH
50302: LD_VAR 0 2
50306: PUSH
50307: LD_VAR 0 2
50311: ARRAY
50312: PPUSH
50313: LD_VAR 0 3
50317: PPUSH
50318: CALL_OW 1
50322: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
50323: LD_ADDR_VAR 0 7
50327: PUSH
50328: LD_VAR 0 7
50332: PPUSH
50333: LD_VAR 0 7
50337: PPUSH
50338: LD_VAR 0 6
50342: PPUSH
50343: CALL_OW 1
50347: ST_TO_ADDR
// for i = s_arr downto 2 do
50348: LD_ADDR_VAR 0 5
50352: PUSH
50353: DOUBLE
50354: LD_VAR 0 7
50358: INC
50359: ST_TO_ADDR
50360: LD_INT 2
50362: PUSH
50363: FOR_DOWNTO
50364: IFFALSE 50448
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
50366: LD_ADDR_VAR 0 6
50370: PUSH
50371: LD_VAR 0 7
50375: PUSH
50376: LD_VAR 0 5
50380: PUSH
50381: LD_INT 1
50383: MINUS
50384: ARRAY
50385: PPUSH
50386: LD_VAR 0 2
50390: PUSH
50391: LD_VAR 0 5
50395: PUSH
50396: LD_INT 1
50398: MINUS
50399: ARRAY
50400: PPUSH
50401: LD_VAR 0 7
50405: PUSH
50406: LD_VAR 0 5
50410: ARRAY
50411: PPUSH
50412: CALL_OW 1
50416: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
50417: LD_ADDR_VAR 0 7
50421: PUSH
50422: LD_VAR 0 7
50426: PPUSH
50427: LD_VAR 0 5
50431: PUSH
50432: LD_INT 1
50434: MINUS
50435: PPUSH
50436: LD_VAR 0 6
50440: PPUSH
50441: CALL_OW 1
50445: ST_TO_ADDR
// end ;
50446: GO 50363
50448: POP
50449: POP
// result := s_arr [ 1 ] ;
50450: LD_ADDR_VAR 0 4
50454: PUSH
50455: LD_VAR 0 7
50459: PUSH
50460: LD_INT 1
50462: ARRAY
50463: ST_TO_ADDR
// end ; end ;
50464: LD_VAR 0 4
50468: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
50469: LD_INT 0
50471: PPUSH
50472: PPUSH
// if not list then
50473: LD_VAR 0 1
50477: NOT
50478: IFFALSE 50482
// exit ;
50480: GO 50573
// i := list [ pos1 ] ;
50482: LD_ADDR_VAR 0 5
50486: PUSH
50487: LD_VAR 0 1
50491: PUSH
50492: LD_VAR 0 2
50496: ARRAY
50497: ST_TO_ADDR
// if not i then
50498: LD_VAR 0 5
50502: NOT
50503: IFFALSE 50507
// exit ;
50505: GO 50573
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
50507: LD_ADDR_VAR 0 1
50511: PUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: LD_VAR 0 2
50521: PPUSH
50522: LD_VAR 0 1
50526: PUSH
50527: LD_VAR 0 3
50531: ARRAY
50532: PPUSH
50533: CALL_OW 1
50537: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
50538: LD_ADDR_VAR 0 1
50542: PUSH
50543: LD_VAR 0 1
50547: PPUSH
50548: LD_VAR 0 3
50552: PPUSH
50553: LD_VAR 0 5
50557: PPUSH
50558: CALL_OW 1
50562: ST_TO_ADDR
// result := list ;
50563: LD_ADDR_VAR 0 4
50567: PUSH
50568: LD_VAR 0 1
50572: ST_TO_ADDR
// end ;
50573: LD_VAR 0 4
50577: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
50578: LD_INT 0
50580: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
50581: LD_ADDR_VAR 0 5
50585: PUSH
50586: LD_VAR 0 1
50590: PPUSH
50591: CALL_OW 250
50595: PPUSH
50596: LD_VAR 0 1
50600: PPUSH
50601: CALL_OW 251
50605: PPUSH
50606: LD_VAR 0 2
50610: PPUSH
50611: LD_VAR 0 3
50615: PPUSH
50616: LD_VAR 0 4
50620: PPUSH
50621: CALL 50631 0 5
50625: ST_TO_ADDR
// end ;
50626: LD_VAR 0 5
50630: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
50631: LD_INT 0
50633: PPUSH
50634: PPUSH
50635: PPUSH
50636: PPUSH
// if not list then
50637: LD_VAR 0 3
50641: NOT
50642: IFFALSE 50646
// exit ;
50644: GO 51034
// result := [ ] ;
50646: LD_ADDR_VAR 0 6
50650: PUSH
50651: EMPTY
50652: ST_TO_ADDR
// for i in list do
50653: LD_ADDR_VAR 0 7
50657: PUSH
50658: LD_VAR 0 3
50662: PUSH
50663: FOR_IN
50664: IFFALSE 50866
// begin tmp := GetDistUnitXY ( i , x , y ) ;
50666: LD_ADDR_VAR 0 9
50670: PUSH
50671: LD_VAR 0 7
50675: PPUSH
50676: LD_VAR 0 1
50680: PPUSH
50681: LD_VAR 0 2
50685: PPUSH
50686: CALL_OW 297
50690: ST_TO_ADDR
// if not result then
50691: LD_VAR 0 6
50695: NOT
50696: IFFALSE 50722
// result := [ [ i , tmp ] ] else
50698: LD_ADDR_VAR 0 6
50702: PUSH
50703: LD_VAR 0 7
50707: PUSH
50708: LD_VAR 0 9
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: ST_TO_ADDR
50720: GO 50864
// begin if result [ result ] [ 2 ] < tmp then
50722: LD_VAR 0 6
50726: PUSH
50727: LD_VAR 0 6
50731: ARRAY
50732: PUSH
50733: LD_INT 2
50735: ARRAY
50736: PUSH
50737: LD_VAR 0 9
50741: LESS
50742: IFFALSE 50784
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
50744: LD_ADDR_VAR 0 6
50748: PUSH
50749: LD_VAR 0 6
50753: PPUSH
50754: LD_VAR 0 6
50758: PUSH
50759: LD_INT 1
50761: PLUS
50762: PPUSH
50763: LD_VAR 0 7
50767: PUSH
50768: LD_VAR 0 9
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PPUSH
50777: CALL_OW 2
50781: ST_TO_ADDR
50782: GO 50864
// for j = 1 to result do
50784: LD_ADDR_VAR 0 8
50788: PUSH
50789: DOUBLE
50790: LD_INT 1
50792: DEC
50793: ST_TO_ADDR
50794: LD_VAR 0 6
50798: PUSH
50799: FOR_TO
50800: IFFALSE 50862
// begin if tmp < result [ j ] [ 2 ] then
50802: LD_VAR 0 9
50806: PUSH
50807: LD_VAR 0 6
50811: PUSH
50812: LD_VAR 0 8
50816: ARRAY
50817: PUSH
50818: LD_INT 2
50820: ARRAY
50821: LESS
50822: IFFALSE 50860
// begin result := Insert ( result , j , [ i , tmp ] ) ;
50824: LD_ADDR_VAR 0 6
50828: PUSH
50829: LD_VAR 0 6
50833: PPUSH
50834: LD_VAR 0 8
50838: PPUSH
50839: LD_VAR 0 7
50843: PUSH
50844: LD_VAR 0 9
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PPUSH
50853: CALL_OW 2
50857: ST_TO_ADDR
// break ;
50858: GO 50862
// end ; end ;
50860: GO 50799
50862: POP
50863: POP
// end ; end ;
50864: GO 50663
50866: POP
50867: POP
// if result and not asc then
50868: LD_VAR 0 6
50872: PUSH
50873: LD_VAR 0 4
50877: NOT
50878: AND
50879: IFFALSE 50954
// begin tmp := result ;
50881: LD_ADDR_VAR 0 9
50885: PUSH
50886: LD_VAR 0 6
50890: ST_TO_ADDR
// for i = tmp downto 1 do
50891: LD_ADDR_VAR 0 7
50895: PUSH
50896: DOUBLE
50897: LD_VAR 0 9
50901: INC
50902: ST_TO_ADDR
50903: LD_INT 1
50905: PUSH
50906: FOR_DOWNTO
50907: IFFALSE 50952
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
50909: LD_ADDR_VAR 0 6
50913: PUSH
50914: LD_VAR 0 6
50918: PPUSH
50919: LD_VAR 0 9
50923: PUSH
50924: LD_VAR 0 7
50928: MINUS
50929: PUSH
50930: LD_INT 1
50932: PLUS
50933: PPUSH
50934: LD_VAR 0 9
50938: PUSH
50939: LD_VAR 0 7
50943: ARRAY
50944: PPUSH
50945: CALL_OW 1
50949: ST_TO_ADDR
50950: GO 50906
50952: POP
50953: POP
// end ; tmp := [ ] ;
50954: LD_ADDR_VAR 0 9
50958: PUSH
50959: EMPTY
50960: ST_TO_ADDR
// if mode then
50961: LD_VAR 0 5
50965: IFFALSE 51034
// begin for i = 1 to result do
50967: LD_ADDR_VAR 0 7
50971: PUSH
50972: DOUBLE
50973: LD_INT 1
50975: DEC
50976: ST_TO_ADDR
50977: LD_VAR 0 6
50981: PUSH
50982: FOR_TO
50983: IFFALSE 51022
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
50985: LD_ADDR_VAR 0 9
50989: PUSH
50990: LD_VAR 0 9
50994: PPUSH
50995: LD_VAR 0 7
50999: PPUSH
51000: LD_VAR 0 6
51004: PUSH
51005: LD_VAR 0 7
51009: ARRAY
51010: PUSH
51011: LD_INT 1
51013: ARRAY
51014: PPUSH
51015: CALL_OW 1
51019: ST_TO_ADDR
51020: GO 50982
51022: POP
51023: POP
// result := tmp ;
51024: LD_ADDR_VAR 0 6
51028: PUSH
51029: LD_VAR 0 9
51033: ST_TO_ADDR
// end ; end ;
51034: LD_VAR 0 6
51038: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
51039: LD_INT 0
51041: PPUSH
51042: PPUSH
51043: PPUSH
51044: PPUSH
51045: PPUSH
51046: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
51047: LD_ADDR_VAR 0 5
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: ST_TO_ADDR
// if not x or not y then
51069: LD_VAR 0 2
51073: NOT
51074: PUSH
51075: LD_VAR 0 3
51079: NOT
51080: OR
51081: IFFALSE 51085
// exit ;
51083: GO 52731
// if not range then
51085: LD_VAR 0 4
51089: NOT
51090: IFFALSE 51100
// range := 10 ;
51092: LD_ADDR_VAR 0 4
51096: PUSH
51097: LD_INT 10
51099: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51100: LD_ADDR_VAR 0 8
51104: PUSH
51105: LD_INT 81
51107: PUSH
51108: LD_VAR 0 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 92
51119: PUSH
51120: LD_VAR 0 2
51124: PUSH
51125: LD_VAR 0 3
51129: PUSH
51130: LD_VAR 0 4
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: LD_INT 21
51146: PUSH
51147: LD_INT 3
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: PPUSH
51163: CALL_OW 69
51167: ST_TO_ADDR
// if not tmp then
51168: LD_VAR 0 8
51172: NOT
51173: IFFALSE 51177
// exit ;
51175: GO 52731
// for i in tmp do
51177: LD_ADDR_VAR 0 6
51181: PUSH
51182: LD_VAR 0 8
51186: PUSH
51187: FOR_IN
51188: IFFALSE 52706
// begin points := [ 0 , 0 , 0 ] ;
51190: LD_ADDR_VAR 0 9
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: LIST
51208: ST_TO_ADDR
// bpoints := 1 ;
51209: LD_ADDR_VAR 0 10
51213: PUSH
51214: LD_INT 1
51216: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51217: LD_VAR 0 6
51221: PPUSH
51222: CALL_OW 247
51226: PUSH
51227: LD_INT 1
51229: DOUBLE
51230: EQUAL
51231: IFTRUE 51235
51233: GO 51813
51235: POP
// begin if GetClass ( i ) = 1 then
51236: LD_VAR 0 6
51240: PPUSH
51241: CALL_OW 257
51245: PUSH
51246: LD_INT 1
51248: EQUAL
51249: IFFALSE 51270
// points := [ 10 , 5 , 3 ] ;
51251: LD_ADDR_VAR 0 9
51255: PUSH
51256: LD_INT 10
51258: PUSH
51259: LD_INT 5
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
51270: LD_VAR 0 6
51274: PPUSH
51275: CALL_OW 257
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 3
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: IN
51294: IFFALSE 51315
// points := [ 3 , 2 , 1 ] ;
51296: LD_ADDR_VAR 0 9
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: LIST
51314: ST_TO_ADDR
// if GetClass ( i ) = 5 then
51315: LD_VAR 0 6
51319: PPUSH
51320: CALL_OW 257
51324: PUSH
51325: LD_INT 5
51327: EQUAL
51328: IFFALSE 51349
// points := [ 130 , 5 , 2 ] ;
51330: LD_ADDR_VAR 0 9
51334: PUSH
51335: LD_INT 130
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: ST_TO_ADDR
// if GetClass ( i ) = 8 then
51349: LD_VAR 0 6
51353: PPUSH
51354: CALL_OW 257
51358: PUSH
51359: LD_INT 8
51361: EQUAL
51362: IFFALSE 51383
// points := [ 35 , 35 , 30 ] ;
51364: LD_ADDR_VAR 0 9
51368: PUSH
51369: LD_INT 35
51371: PUSH
51372: LD_INT 35
51374: PUSH
51375: LD_INT 30
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: ST_TO_ADDR
// if GetClass ( i ) = 9 then
51383: LD_VAR 0 6
51387: PPUSH
51388: CALL_OW 257
51392: PUSH
51393: LD_INT 9
51395: EQUAL
51396: IFFALSE 51417
// points := [ 20 , 55 , 40 ] ;
51398: LD_ADDR_VAR 0 9
51402: PUSH
51403: LD_INT 20
51405: PUSH
51406: LD_INT 55
51408: PUSH
51409: LD_INT 40
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
51417: LD_VAR 0 6
51421: PPUSH
51422: CALL_OW 257
51426: PUSH
51427: LD_INT 12
51429: PUSH
51430: LD_INT 16
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: IN
51437: IFFALSE 51458
// points := [ 5 , 3 , 2 ] ;
51439: LD_ADDR_VAR 0 9
51443: PUSH
51444: LD_INT 5
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: ST_TO_ADDR
// if GetClass ( i ) = 17 then
51458: LD_VAR 0 6
51462: PPUSH
51463: CALL_OW 257
51467: PUSH
51468: LD_INT 17
51470: EQUAL
51471: IFFALSE 51492
// points := [ 100 , 50 , 75 ] ;
51473: LD_ADDR_VAR 0 9
51477: PUSH
51478: LD_INT 100
51480: PUSH
51481: LD_INT 50
51483: PUSH
51484: LD_INT 75
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: ST_TO_ADDR
// if GetClass ( i ) = 15 then
51492: LD_VAR 0 6
51496: PPUSH
51497: CALL_OW 257
51501: PUSH
51502: LD_INT 15
51504: EQUAL
51505: IFFALSE 51526
// points := [ 10 , 5 , 3 ] ;
51507: LD_ADDR_VAR 0 9
51511: PUSH
51512: LD_INT 10
51514: PUSH
51515: LD_INT 5
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// if GetClass ( i ) = 14 then
51526: LD_VAR 0 6
51530: PPUSH
51531: CALL_OW 257
51535: PUSH
51536: LD_INT 14
51538: EQUAL
51539: IFFALSE 51560
// points := [ 10 , 0 , 0 ] ;
51541: LD_ADDR_VAR 0 9
51545: PUSH
51546: LD_INT 10
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: ST_TO_ADDR
// if GetClass ( i ) = 11 then
51560: LD_VAR 0 6
51564: PPUSH
51565: CALL_OW 257
51569: PUSH
51570: LD_INT 11
51572: EQUAL
51573: IFFALSE 51594
// points := [ 30 , 10 , 5 ] ;
51575: LD_ADDR_VAR 0 9
51579: PUSH
51580: LD_INT 30
51582: PUSH
51583: LD_INT 10
51585: PUSH
51586: LD_INT 5
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
51594: LD_VAR 0 1
51598: PPUSH
51599: LD_INT 5
51601: PPUSH
51602: CALL_OW 321
51606: PUSH
51607: LD_INT 2
51609: EQUAL
51610: IFFALSE 51627
// bpoints := bpoints * 1.8 ;
51612: LD_ADDR_VAR 0 10
51616: PUSH
51617: LD_VAR 0 10
51621: PUSH
51622: LD_REAL  1.80000000000000E+0000
51625: MUL
51626: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
51627: LD_VAR 0 6
51631: PPUSH
51632: CALL_OW 257
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: IN
51655: PUSH
51656: LD_VAR 0 1
51660: PPUSH
51661: LD_INT 51
51663: PPUSH
51664: CALL_OW 321
51668: PUSH
51669: LD_INT 2
51671: EQUAL
51672: AND
51673: IFFALSE 51690
// bpoints := bpoints * 1.2 ;
51675: LD_ADDR_VAR 0 10
51679: PUSH
51680: LD_VAR 0 10
51684: PUSH
51685: LD_REAL  1.20000000000000E+0000
51688: MUL
51689: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
51690: LD_VAR 0 6
51694: PPUSH
51695: CALL_OW 257
51699: PUSH
51700: LD_INT 5
51702: PUSH
51703: LD_INT 7
51705: PUSH
51706: LD_INT 9
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: IN
51714: PUSH
51715: LD_VAR 0 1
51719: PPUSH
51720: LD_INT 52
51722: PPUSH
51723: CALL_OW 321
51727: PUSH
51728: LD_INT 2
51730: EQUAL
51731: AND
51732: IFFALSE 51749
// bpoints := bpoints * 1.5 ;
51734: LD_ADDR_VAR 0 10
51738: PUSH
51739: LD_VAR 0 10
51743: PUSH
51744: LD_REAL  1.50000000000000E+0000
51747: MUL
51748: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
51749: LD_VAR 0 1
51753: PPUSH
51754: LD_INT 66
51756: PPUSH
51757: CALL_OW 321
51761: PUSH
51762: LD_INT 2
51764: EQUAL
51765: IFFALSE 51782
// bpoints := bpoints * 1.1 ;
51767: LD_ADDR_VAR 0 10
51771: PUSH
51772: LD_VAR 0 10
51776: PUSH
51777: LD_REAL  1.10000000000000E+0000
51780: MUL
51781: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
51782: LD_ADDR_VAR 0 10
51786: PUSH
51787: LD_VAR 0 10
51791: PUSH
51792: LD_VAR 0 6
51796: PPUSH
51797: LD_INT 1
51799: PPUSH
51800: CALL_OW 259
51804: PUSH
51805: LD_REAL  1.15000000000000E+0000
51808: MUL
51809: MUL
51810: ST_TO_ADDR
// end ; unit_vehicle :
51811: GO 52635
51813: LD_INT 2
51815: DOUBLE
51816: EQUAL
51817: IFTRUE 51821
51819: GO 52623
51821: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
51822: LD_VAR 0 6
51826: PPUSH
51827: CALL_OW 264
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 42
51837: PUSH
51838: LD_INT 24
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: LIST
51845: IN
51846: IFFALSE 51867
// points := [ 25 , 5 , 3 ] ;
51848: LD_ADDR_VAR 0 9
51852: PUSH
51853: LD_INT 25
51855: PUSH
51856: LD_INT 5
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
51867: LD_VAR 0 6
51871: PPUSH
51872: CALL_OW 264
51876: PUSH
51877: LD_INT 4
51879: PUSH
51880: LD_INT 43
51882: PUSH
51883: LD_INT 25
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: IN
51891: IFFALSE 51912
// points := [ 40 , 15 , 5 ] ;
51893: LD_ADDR_VAR 0 9
51897: PUSH
51898: LD_INT 40
51900: PUSH
51901: LD_INT 15
51903: PUSH
51904: LD_INT 5
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
51912: LD_VAR 0 6
51916: PPUSH
51917: CALL_OW 264
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: LD_INT 23
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: IN
51932: IFFALSE 51953
// points := [ 7 , 25 , 8 ] ;
51934: LD_ADDR_VAR 0 9
51938: PUSH
51939: LD_INT 7
51941: PUSH
51942: LD_INT 25
51944: PUSH
51945: LD_INT 8
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
51953: LD_VAR 0 6
51957: PPUSH
51958: CALL_OW 264
51962: PUSH
51963: LD_INT 5
51965: PUSH
51966: LD_INT 27
51968: PUSH
51969: LD_INT 44
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: LIST
51976: IN
51977: IFFALSE 51998
// points := [ 14 , 50 , 16 ] ;
51979: LD_ADDR_VAR 0 9
51983: PUSH
51984: LD_INT 14
51986: PUSH
51987: LD_INT 50
51989: PUSH
51990: LD_INT 16
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
51998: LD_VAR 0 6
52002: PPUSH
52003: CALL_OW 264
52007: PUSH
52008: LD_INT 6
52010: PUSH
52011: LD_INT 46
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: IN
52018: IFFALSE 52039
// points := [ 32 , 120 , 70 ] ;
52020: LD_ADDR_VAR 0 9
52024: PUSH
52025: LD_INT 32
52027: PUSH
52028: LD_INT 120
52030: PUSH
52031: LD_INT 70
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
52039: LD_VAR 0 6
52043: PPUSH
52044: CALL_OW 264
52048: PUSH
52049: LD_INT 7
52051: PUSH
52052: LD_INT 28
52054: PUSH
52055: LD_INT 45
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: LIST
52062: IN
52063: IFFALSE 52084
// points := [ 35 , 20 , 45 ] ;
52065: LD_ADDR_VAR 0 9
52069: PUSH
52070: LD_INT 35
52072: PUSH
52073: LD_INT 20
52075: PUSH
52076: LD_INT 45
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: LIST
52083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
52084: LD_VAR 0 6
52088: PPUSH
52089: CALL_OW 264
52093: PUSH
52094: LD_INT 47
52096: PUSH
52097: EMPTY
52098: LIST
52099: IN
52100: IFFALSE 52121
// points := [ 67 , 45 , 75 ] ;
52102: LD_ADDR_VAR 0 9
52106: PUSH
52107: LD_INT 67
52109: PUSH
52110: LD_INT 45
52112: PUSH
52113: LD_INT 75
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52121: LD_VAR 0 6
52125: PPUSH
52126: CALL_OW 264
52130: PUSH
52131: LD_INT 26
52133: PUSH
52134: EMPTY
52135: LIST
52136: IN
52137: IFFALSE 52158
// points := [ 120 , 30 , 80 ] ;
52139: LD_ADDR_VAR 0 9
52143: PUSH
52144: LD_INT 120
52146: PUSH
52147: LD_INT 30
52149: PUSH
52150: LD_INT 80
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52158: LD_VAR 0 6
52162: PPUSH
52163: CALL_OW 264
52167: PUSH
52168: LD_INT 22
52170: PUSH
52171: EMPTY
52172: LIST
52173: IN
52174: IFFALSE 52195
// points := [ 40 , 1 , 1 ] ;
52176: LD_ADDR_VAR 0 9
52180: PUSH
52181: LD_INT 40
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52195: LD_VAR 0 6
52199: PPUSH
52200: CALL_OW 264
52204: PUSH
52205: LD_INT 29
52207: PUSH
52208: EMPTY
52209: LIST
52210: IN
52211: IFFALSE 52232
// points := [ 70 , 200 , 400 ] ;
52213: LD_ADDR_VAR 0 9
52217: PUSH
52218: LD_INT 70
52220: PUSH
52221: LD_INT 200
52223: PUSH
52224: LD_INT 400
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52232: LD_VAR 0 6
52236: PPUSH
52237: CALL_OW 264
52241: PUSH
52242: LD_INT 14
52244: PUSH
52245: LD_INT 53
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: IN
52252: IFFALSE 52273
// points := [ 40 , 10 , 20 ] ;
52254: LD_ADDR_VAR 0 9
52258: PUSH
52259: LD_INT 40
52261: PUSH
52262: LD_INT 10
52264: PUSH
52265: LD_INT 20
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
52273: LD_VAR 0 6
52277: PPUSH
52278: CALL_OW 264
52282: PUSH
52283: LD_INT 9
52285: PUSH
52286: EMPTY
52287: LIST
52288: IN
52289: IFFALSE 52310
// points := [ 5 , 70 , 20 ] ;
52291: LD_ADDR_VAR 0 9
52295: PUSH
52296: LD_INT 5
52298: PUSH
52299: LD_INT 70
52301: PUSH
52302: LD_INT 20
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
52310: LD_VAR 0 6
52314: PPUSH
52315: CALL_OW 264
52319: PUSH
52320: LD_INT 10
52322: PUSH
52323: EMPTY
52324: LIST
52325: IN
52326: IFFALSE 52347
// points := [ 35 , 110 , 70 ] ;
52328: LD_ADDR_VAR 0 9
52332: PUSH
52333: LD_INT 35
52335: PUSH
52336: LD_INT 110
52338: PUSH
52339: LD_INT 70
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
52347: LD_VAR 0 6
52351: PPUSH
52352: CALL_OW 265
52356: PUSH
52357: LD_INT 25
52359: EQUAL
52360: IFFALSE 52381
// points := [ 80 , 65 , 100 ] ;
52362: LD_ADDR_VAR 0 9
52366: PUSH
52367: LD_INT 80
52369: PUSH
52370: LD_INT 65
52372: PUSH
52373: LD_INT 100
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: LIST
52380: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
52381: LD_VAR 0 6
52385: PPUSH
52386: CALL_OW 263
52390: PUSH
52391: LD_INT 1
52393: EQUAL
52394: IFFALSE 52429
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
52396: LD_ADDR_VAR 0 10
52400: PUSH
52401: LD_VAR 0 10
52405: PUSH
52406: LD_VAR 0 6
52410: PPUSH
52411: CALL_OW 311
52415: PPUSH
52416: LD_INT 3
52418: PPUSH
52419: CALL_OW 259
52423: PUSH
52424: LD_INT 4
52426: MUL
52427: MUL
52428: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
52429: LD_VAR 0 6
52433: PPUSH
52434: CALL_OW 263
52438: PUSH
52439: LD_INT 2
52441: EQUAL
52442: IFFALSE 52493
// begin j := IsControledBy ( i ) ;
52444: LD_ADDR_VAR 0 7
52448: PUSH
52449: LD_VAR 0 6
52453: PPUSH
52454: CALL_OW 312
52458: ST_TO_ADDR
// if j then
52459: LD_VAR 0 7
52463: IFFALSE 52493
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
52465: LD_ADDR_VAR 0 10
52469: PUSH
52470: LD_VAR 0 10
52474: PUSH
52475: LD_VAR 0 7
52479: PPUSH
52480: LD_INT 3
52482: PPUSH
52483: CALL_OW 259
52487: PUSH
52488: LD_INT 3
52490: MUL
52491: MUL
52492: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
52493: LD_VAR 0 6
52497: PPUSH
52498: CALL_OW 264
52502: PUSH
52503: LD_INT 5
52505: PUSH
52506: LD_INT 6
52508: PUSH
52509: LD_INT 46
52511: PUSH
52512: LD_INT 44
52514: PUSH
52515: LD_INT 47
52517: PUSH
52518: LD_INT 45
52520: PUSH
52521: LD_INT 28
52523: PUSH
52524: LD_INT 7
52526: PUSH
52527: LD_INT 27
52529: PUSH
52530: LD_INT 29
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: IN
52545: PUSH
52546: LD_VAR 0 1
52550: PPUSH
52551: LD_INT 52
52553: PPUSH
52554: CALL_OW 321
52558: PUSH
52559: LD_INT 2
52561: EQUAL
52562: AND
52563: IFFALSE 52580
// bpoints := bpoints * 1.2 ;
52565: LD_ADDR_VAR 0 10
52569: PUSH
52570: LD_VAR 0 10
52574: PUSH
52575: LD_REAL  1.20000000000000E+0000
52578: MUL
52579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
52580: LD_VAR 0 6
52584: PPUSH
52585: CALL_OW 264
52589: PUSH
52590: LD_INT 6
52592: PUSH
52593: LD_INT 46
52595: PUSH
52596: LD_INT 47
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: IN
52604: IFFALSE 52621
// bpoints := bpoints * 1.2 ;
52606: LD_ADDR_VAR 0 10
52610: PUSH
52611: LD_VAR 0 10
52615: PUSH
52616: LD_REAL  1.20000000000000E+0000
52619: MUL
52620: ST_TO_ADDR
// end ; unit_building :
52621: GO 52635
52623: LD_INT 3
52625: DOUBLE
52626: EQUAL
52627: IFTRUE 52631
52629: GO 52634
52631: POP
// ; end ;
52632: GO 52635
52634: POP
// for j = 1 to 3 do
52635: LD_ADDR_VAR 0 7
52639: PUSH
52640: DOUBLE
52641: LD_INT 1
52643: DEC
52644: ST_TO_ADDR
52645: LD_INT 3
52647: PUSH
52648: FOR_TO
52649: IFFALSE 52702
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
52651: LD_ADDR_VAR 0 5
52655: PUSH
52656: LD_VAR 0 5
52660: PPUSH
52661: LD_VAR 0 7
52665: PPUSH
52666: LD_VAR 0 5
52670: PUSH
52671: LD_VAR 0 7
52675: ARRAY
52676: PUSH
52677: LD_VAR 0 9
52681: PUSH
52682: LD_VAR 0 7
52686: ARRAY
52687: PUSH
52688: LD_VAR 0 10
52692: MUL
52693: PLUS
52694: PPUSH
52695: CALL_OW 1
52699: ST_TO_ADDR
52700: GO 52648
52702: POP
52703: POP
// end ;
52704: GO 51187
52706: POP
52707: POP
// result := Replace ( result , 4 , tmp ) ;
52708: LD_ADDR_VAR 0 5
52712: PUSH
52713: LD_VAR 0 5
52717: PPUSH
52718: LD_INT 4
52720: PPUSH
52721: LD_VAR 0 8
52725: PPUSH
52726: CALL_OW 1
52730: ST_TO_ADDR
// end ;
52731: LD_VAR 0 5
52735: RET
// export function DangerAtRange ( unit , range ) ; begin
52736: LD_INT 0
52738: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
52739: LD_ADDR_VAR 0 3
52743: PUSH
52744: LD_VAR 0 1
52748: PPUSH
52749: CALL_OW 255
52753: PPUSH
52754: LD_VAR 0 1
52758: PPUSH
52759: CALL_OW 250
52763: PPUSH
52764: LD_VAR 0 1
52768: PPUSH
52769: CALL_OW 251
52773: PPUSH
52774: LD_VAR 0 2
52778: PPUSH
52779: CALL 51039 0 4
52783: ST_TO_ADDR
// end ;
52784: LD_VAR 0 3
52788: RET
// export function DangerInArea ( side , area ) ; begin
52789: LD_INT 0
52791: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
52792: LD_ADDR_VAR 0 3
52796: PUSH
52797: LD_VAR 0 2
52801: PPUSH
52802: LD_INT 81
52804: PUSH
52805: LD_VAR 0 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PPUSH
52814: CALL_OW 70
52818: ST_TO_ADDR
// end ;
52819: LD_VAR 0 3
52823: RET
// export function IsExtension ( b ) ; begin
52824: LD_INT 0
52826: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
52827: LD_ADDR_VAR 0 2
52831: PUSH
52832: LD_VAR 0 1
52836: PUSH
52837: LD_INT 23
52839: PUSH
52840: LD_INT 20
52842: PUSH
52843: LD_INT 22
52845: PUSH
52846: LD_INT 17
52848: PUSH
52849: LD_INT 24
52851: PUSH
52852: LD_INT 21
52854: PUSH
52855: LD_INT 19
52857: PUSH
52858: LD_INT 16
52860: PUSH
52861: LD_INT 25
52863: PUSH
52864: LD_INT 18
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: IN
52879: ST_TO_ADDR
// end ;
52880: LD_VAR 0 2
52884: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
52885: LD_INT 0
52887: PPUSH
52888: PPUSH
52889: PPUSH
// result := [ ] ;
52890: LD_ADDR_VAR 0 3
52894: PUSH
52895: EMPTY
52896: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
52897: LD_ADDR_VAR 0 4
52901: PUSH
52902: LD_VAR 0 2
52906: PPUSH
52907: LD_INT 21
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PPUSH
52917: CALL_OW 70
52921: ST_TO_ADDR
// if not tmp then
52922: LD_VAR 0 4
52926: NOT
52927: IFFALSE 52931
// exit ;
52929: GO 52989
// for i in tmp do
52931: LD_ADDR_VAR 0 5
52935: PUSH
52936: LD_VAR 0 4
52940: PUSH
52941: FOR_IN
52942: IFFALSE 52977
// if GetBase ( i ) <> base then
52944: LD_VAR 0 5
52948: PPUSH
52949: CALL_OW 274
52953: PUSH
52954: LD_VAR 0 1
52958: NONEQUAL
52959: IFFALSE 52975
// ComLinkToBase ( base , i ) ;
52961: LD_VAR 0 1
52965: PPUSH
52966: LD_VAR 0 5
52970: PPUSH
52971: CALL_OW 169
52975: GO 52941
52977: POP
52978: POP
// result := tmp ;
52979: LD_ADDR_VAR 0 3
52983: PUSH
52984: LD_VAR 0 4
52988: ST_TO_ADDR
// end ;
52989: LD_VAR 0 3
52993: RET
// export function ComComplete ( unit , b ) ; var i ; begin
52994: LD_INT 0
52996: PPUSH
52997: PPUSH
// if BuildingStatus ( b ) = bs_build then
52998: LD_VAR 0 2
53002: PPUSH
53003: CALL_OW 461
53007: PUSH
53008: LD_INT 1
53010: EQUAL
53011: IFFALSE 53071
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
53013: LD_VAR 0 1
53017: PPUSH
53018: LD_STRING h
53020: PUSH
53021: LD_VAR 0 2
53025: PPUSH
53026: CALL_OW 250
53030: PUSH
53031: LD_VAR 0 2
53035: PPUSH
53036: CALL_OW 251
53040: PUSH
53041: LD_VAR 0 2
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: PUSH
53064: EMPTY
53065: LIST
53066: PPUSH
53067: CALL_OW 446
// end ;
53071: LD_VAR 0 3
53075: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53076: LD_INT 0
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
53084: LD_VAR 0 1
53088: NOT
53089: PUSH
53090: LD_VAR 0 1
53094: PPUSH
53095: CALL_OW 263
53099: PUSH
53100: LD_INT 2
53102: EQUAL
53103: NOT
53104: OR
53105: IFFALSE 53109
// exit ;
53107: GO 53425
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53109: LD_ADDR_VAR 0 6
53113: PUSH
53114: LD_INT 22
53116: PUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 255
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 30
53136: PUSH
53137: LD_INT 36
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 34
53146: PUSH
53147: LD_INT 31
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PPUSH
53163: CALL_OW 69
53167: ST_TO_ADDR
// if not tmp then
53168: LD_VAR 0 6
53172: NOT
53173: IFFALSE 53177
// exit ;
53175: GO 53425
// result := [ ] ;
53177: LD_ADDR_VAR 0 2
53181: PUSH
53182: EMPTY
53183: ST_TO_ADDR
// for i in tmp do
53184: LD_ADDR_VAR 0 3
53188: PUSH
53189: LD_VAR 0 6
53193: PUSH
53194: FOR_IN
53195: IFFALSE 53266
// begin t := UnitsInside ( i ) ;
53197: LD_ADDR_VAR 0 4
53201: PUSH
53202: LD_VAR 0 3
53206: PPUSH
53207: CALL_OW 313
53211: ST_TO_ADDR
// if t then
53212: LD_VAR 0 4
53216: IFFALSE 53264
// for j in t do
53218: LD_ADDR_VAR 0 7
53222: PUSH
53223: LD_VAR 0 4
53227: PUSH
53228: FOR_IN
53229: IFFALSE 53262
// result := Insert ( result , result + 1 , j ) ;
53231: LD_ADDR_VAR 0 2
53235: PUSH
53236: LD_VAR 0 2
53240: PPUSH
53241: LD_VAR 0 2
53245: PUSH
53246: LD_INT 1
53248: PLUS
53249: PPUSH
53250: LD_VAR 0 7
53254: PPUSH
53255: CALL_OW 2
53259: ST_TO_ADDR
53260: GO 53228
53262: POP
53263: POP
// end ;
53264: GO 53194
53266: POP
53267: POP
// if not result then
53268: LD_VAR 0 2
53272: NOT
53273: IFFALSE 53277
// exit ;
53275: GO 53425
// mech := result [ 1 ] ;
53277: LD_ADDR_VAR 0 5
53281: PUSH
53282: LD_VAR 0 2
53286: PUSH
53287: LD_INT 1
53289: ARRAY
53290: ST_TO_ADDR
// if result > 1 then
53291: LD_VAR 0 2
53295: PUSH
53296: LD_INT 1
53298: GREATER
53299: IFFALSE 53411
// for i = 2 to result do
53301: LD_ADDR_VAR 0 3
53305: PUSH
53306: DOUBLE
53307: LD_INT 2
53309: DEC
53310: ST_TO_ADDR
53311: LD_VAR 0 2
53315: PUSH
53316: FOR_TO
53317: IFFALSE 53409
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
53319: LD_ADDR_VAR 0 4
53323: PUSH
53324: LD_VAR 0 2
53328: PUSH
53329: LD_VAR 0 3
53333: ARRAY
53334: PPUSH
53335: LD_INT 3
53337: PPUSH
53338: CALL_OW 259
53342: PUSH
53343: LD_VAR 0 2
53347: PUSH
53348: LD_VAR 0 3
53352: ARRAY
53353: PPUSH
53354: CALL_OW 432
53358: MINUS
53359: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
53360: LD_VAR 0 4
53364: PUSH
53365: LD_VAR 0 5
53369: PPUSH
53370: LD_INT 3
53372: PPUSH
53373: CALL_OW 259
53377: PUSH
53378: LD_VAR 0 5
53382: PPUSH
53383: CALL_OW 432
53387: MINUS
53388: GREATEREQUAL
53389: IFFALSE 53407
// mech := result [ i ] ;
53391: LD_ADDR_VAR 0 5
53395: PUSH
53396: LD_VAR 0 2
53400: PUSH
53401: LD_VAR 0 3
53405: ARRAY
53406: ST_TO_ADDR
// end ;
53407: GO 53316
53409: POP
53410: POP
// ComLinkTo ( vehicle , mech ) ;
53411: LD_VAR 0 1
53415: PPUSH
53416: LD_VAR 0 5
53420: PPUSH
53421: CALL_OW 135
// end ;
53425: LD_VAR 0 2
53429: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
53430: LD_INT 0
53432: PPUSH
53433: PPUSH
53434: PPUSH
53435: PPUSH
53436: PPUSH
53437: PPUSH
53438: PPUSH
53439: PPUSH
53440: PPUSH
53441: PPUSH
53442: PPUSH
53443: PPUSH
53444: PPUSH
// result := [ ] ;
53445: LD_ADDR_VAR 0 7
53449: PUSH
53450: EMPTY
53451: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
53452: LD_VAR 0 1
53456: PPUSH
53457: CALL_OW 266
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: IN
53472: NOT
53473: IFFALSE 53477
// exit ;
53475: GO 55108
// if name then
53477: LD_VAR 0 3
53481: IFFALSE 53497
// SetBName ( base_dep , name ) ;
53483: LD_VAR 0 1
53487: PPUSH
53488: LD_VAR 0 3
53492: PPUSH
53493: CALL_OW 500
// base := GetBase ( base_dep ) ;
53497: LD_ADDR_VAR 0 15
53501: PUSH
53502: LD_VAR 0 1
53506: PPUSH
53507: CALL_OW 274
53511: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
53512: LD_ADDR_VAR 0 16
53516: PUSH
53517: LD_VAR 0 1
53521: PPUSH
53522: CALL_OW 255
53526: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
53527: LD_ADDR_VAR 0 17
53531: PUSH
53532: LD_VAR 0 1
53536: PPUSH
53537: CALL_OW 248
53541: ST_TO_ADDR
// if sources then
53542: LD_VAR 0 5
53546: IFFALSE 53593
// for i = 1 to 3 do
53548: LD_ADDR_VAR 0 8
53552: PUSH
53553: DOUBLE
53554: LD_INT 1
53556: DEC
53557: ST_TO_ADDR
53558: LD_INT 3
53560: PUSH
53561: FOR_TO
53562: IFFALSE 53591
// AddResourceType ( base , i , sources [ i ] ) ;
53564: LD_VAR 0 15
53568: PPUSH
53569: LD_VAR 0 8
53573: PPUSH
53574: LD_VAR 0 5
53578: PUSH
53579: LD_VAR 0 8
53583: ARRAY
53584: PPUSH
53585: CALL_OW 276
53589: GO 53561
53591: POP
53592: POP
// buildings := GetBaseBuildings ( base , area ) ;
53593: LD_ADDR_VAR 0 18
53597: PUSH
53598: LD_VAR 0 15
53602: PPUSH
53603: LD_VAR 0 2
53607: PPUSH
53608: CALL 52885 0 2
53612: ST_TO_ADDR
// InitHc ;
53613: CALL_OW 19
// InitUc ;
53617: CALL_OW 18
// uc_side := side ;
53621: LD_ADDR_OWVAR 20
53625: PUSH
53626: LD_VAR 0 16
53630: ST_TO_ADDR
// uc_nation := nation ;
53631: LD_ADDR_OWVAR 21
53635: PUSH
53636: LD_VAR 0 17
53640: ST_TO_ADDR
// if buildings then
53641: LD_VAR 0 18
53645: IFFALSE 54967
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
53647: LD_ADDR_VAR 0 19
53651: PUSH
53652: LD_VAR 0 18
53656: PPUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 30
53662: PUSH
53663: LD_INT 29
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 30
53672: PUSH
53673: LD_INT 30
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: PPUSH
53685: CALL_OW 72
53689: ST_TO_ADDR
// if tmp then
53690: LD_VAR 0 19
53694: IFFALSE 53742
// for i in tmp do
53696: LD_ADDR_VAR 0 8
53700: PUSH
53701: LD_VAR 0 19
53705: PUSH
53706: FOR_IN
53707: IFFALSE 53740
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
53709: LD_VAR 0 8
53713: PPUSH
53714: CALL_OW 250
53718: PPUSH
53719: LD_VAR 0 8
53723: PPUSH
53724: CALL_OW 251
53728: PPUSH
53729: LD_VAR 0 16
53733: PPUSH
53734: CALL_OW 441
53738: GO 53706
53740: POP
53741: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
53742: LD_VAR 0 18
53746: PPUSH
53747: LD_INT 2
53749: PUSH
53750: LD_INT 30
53752: PUSH
53753: LD_INT 32
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 30
53762: PUSH
53763: LD_INT 33
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: LIST
53774: PPUSH
53775: CALL_OW 72
53779: IFFALSE 53867
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
53781: LD_ADDR_VAR 0 8
53785: PUSH
53786: LD_VAR 0 18
53790: PPUSH
53791: LD_INT 2
53793: PUSH
53794: LD_INT 30
53796: PUSH
53797: LD_INT 32
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 30
53806: PUSH
53807: LD_INT 33
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: PPUSH
53819: CALL_OW 72
53823: PUSH
53824: FOR_IN
53825: IFFALSE 53865
// begin if not GetBWeapon ( i ) then
53827: LD_VAR 0 8
53831: PPUSH
53832: CALL_OW 269
53836: NOT
53837: IFFALSE 53863
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
53839: LD_VAR 0 8
53843: PPUSH
53844: LD_VAR 0 8
53848: PPUSH
53849: LD_VAR 0 2
53853: PPUSH
53854: CALL 55113 0 2
53858: PPUSH
53859: CALL_OW 431
// end ;
53863: GO 53824
53865: POP
53866: POP
// end ; for i = 1 to personel do
53867: LD_ADDR_VAR 0 8
53871: PUSH
53872: DOUBLE
53873: LD_INT 1
53875: DEC
53876: ST_TO_ADDR
53877: LD_VAR 0 6
53881: PUSH
53882: FOR_TO
53883: IFFALSE 54947
// begin if i > 4 then
53885: LD_VAR 0 8
53889: PUSH
53890: LD_INT 4
53892: GREATER
53893: IFFALSE 53897
// break ;
53895: GO 54947
// case i of 1 :
53897: LD_VAR 0 8
53901: PUSH
53902: LD_INT 1
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53910
53908: GO 53990
53910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
53911: LD_ADDR_VAR 0 12
53915: PUSH
53916: LD_VAR 0 18
53920: PPUSH
53921: LD_INT 22
53923: PUSH
53924: LD_VAR 0 16
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 58
53935: PUSH
53936: EMPTY
53937: LIST
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: LD_INT 30
53944: PUSH
53945: LD_INT 32
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 30
53954: PUSH
53955: LD_INT 4
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 30
53964: PUSH
53965: LD_INT 5
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: PPUSH
53983: CALL_OW 72
53987: ST_TO_ADDR
53988: GO 54212
53990: LD_INT 2
53992: DOUBLE
53993: EQUAL
53994: IFTRUE 53998
53996: GO 54060
53998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
53999: LD_ADDR_VAR 0 12
54003: PUSH
54004: LD_VAR 0 18
54008: PPUSH
54009: LD_INT 22
54011: PUSH
54012: LD_VAR 0 16
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: LD_INT 30
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 30
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PPUSH
54053: CALL_OW 72
54057: ST_TO_ADDR
54058: GO 54212
54060: LD_INT 3
54062: DOUBLE
54063: EQUAL
54064: IFTRUE 54068
54066: GO 54130
54068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54069: LD_ADDR_VAR 0 12
54073: PUSH
54074: LD_VAR 0 18
54078: PPUSH
54079: LD_INT 22
54081: PUSH
54082: LD_VAR 0 16
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 30
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 30
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PPUSH
54123: CALL_OW 72
54127: ST_TO_ADDR
54128: GO 54212
54130: LD_INT 4
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54211
54138: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54139: LD_ADDR_VAR 0 12
54143: PUSH
54144: LD_VAR 0 18
54148: PPUSH
54149: LD_INT 22
54151: PUSH
54152: LD_VAR 0 16
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 30
54166: PUSH
54167: LD_INT 6
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 30
54176: PUSH
54177: LD_INT 7
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 30
54186: PUSH
54187: LD_INT 8
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PPUSH
54204: CALL_OW 72
54208: ST_TO_ADDR
54209: GO 54212
54211: POP
// if i = 1 then
54212: LD_VAR 0 8
54216: PUSH
54217: LD_INT 1
54219: EQUAL
54220: IFFALSE 54331
// begin tmp := [ ] ;
54222: LD_ADDR_VAR 0 19
54226: PUSH
54227: EMPTY
54228: ST_TO_ADDR
// for j in f do
54229: LD_ADDR_VAR 0 9
54233: PUSH
54234: LD_VAR 0 12
54238: PUSH
54239: FOR_IN
54240: IFFALSE 54313
// if GetBType ( j ) = b_bunker then
54242: LD_VAR 0 9
54246: PPUSH
54247: CALL_OW 266
54251: PUSH
54252: LD_INT 32
54254: EQUAL
54255: IFFALSE 54282
// tmp := Insert ( tmp , 1 , j ) else
54257: LD_ADDR_VAR 0 19
54261: PUSH
54262: LD_VAR 0 19
54266: PPUSH
54267: LD_INT 1
54269: PPUSH
54270: LD_VAR 0 9
54274: PPUSH
54275: CALL_OW 2
54279: ST_TO_ADDR
54280: GO 54311
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54282: LD_ADDR_VAR 0 19
54286: PUSH
54287: LD_VAR 0 19
54291: PPUSH
54292: LD_VAR 0 19
54296: PUSH
54297: LD_INT 1
54299: PLUS
54300: PPUSH
54301: LD_VAR 0 9
54305: PPUSH
54306: CALL_OW 2
54310: ST_TO_ADDR
54311: GO 54239
54313: POP
54314: POP
// if tmp then
54315: LD_VAR 0 19
54319: IFFALSE 54331
// f := tmp ;
54321: LD_ADDR_VAR 0 12
54325: PUSH
54326: LD_VAR 0 19
54330: ST_TO_ADDR
// end ; x := personel [ i ] ;
54331: LD_ADDR_VAR 0 13
54335: PUSH
54336: LD_VAR 0 6
54340: PUSH
54341: LD_VAR 0 8
54345: ARRAY
54346: ST_TO_ADDR
// if x = - 1 then
54347: LD_VAR 0 13
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: EQUAL
54356: IFFALSE 54565
// begin for j in f do
54358: LD_ADDR_VAR 0 9
54362: PUSH
54363: LD_VAR 0 12
54367: PUSH
54368: FOR_IN
54369: IFFALSE 54561
// repeat InitHc ;
54371: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54375: LD_VAR 0 9
54379: PPUSH
54380: CALL_OW 266
54384: PUSH
54385: LD_INT 5
54387: EQUAL
54388: IFFALSE 54458
// begin if UnitsInside ( j ) < 3 then
54390: LD_VAR 0 9
54394: PPUSH
54395: CALL_OW 313
54399: PUSH
54400: LD_INT 3
54402: LESS
54403: IFFALSE 54439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54405: LD_INT 0
54407: PPUSH
54408: LD_INT 5
54410: PUSH
54411: LD_INT 8
54413: PUSH
54414: LD_INT 9
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: PUSH
54422: LD_VAR 0 17
54426: ARRAY
54427: PPUSH
54428: LD_VAR 0 4
54432: PPUSH
54433: CALL_OW 380
54437: GO 54456
// PrepareHuman ( false , i , skill ) ;
54439: LD_INT 0
54441: PPUSH
54442: LD_VAR 0 8
54446: PPUSH
54447: LD_VAR 0 4
54451: PPUSH
54452: CALL_OW 380
// end else
54456: GO 54475
// PrepareHuman ( false , i , skill ) ;
54458: LD_INT 0
54460: PPUSH
54461: LD_VAR 0 8
54465: PPUSH
54466: LD_VAR 0 4
54470: PPUSH
54471: CALL_OW 380
// un := CreateHuman ;
54475: LD_ADDR_VAR 0 14
54479: PUSH
54480: CALL_OW 44
54484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54485: LD_ADDR_VAR 0 7
54489: PUSH
54490: LD_VAR 0 7
54494: PPUSH
54495: LD_INT 1
54497: PPUSH
54498: LD_VAR 0 14
54502: PPUSH
54503: CALL_OW 2
54507: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
54508: LD_VAR 0 14
54512: PPUSH
54513: LD_VAR 0 9
54517: PPUSH
54518: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
54522: LD_VAR 0 9
54526: PPUSH
54527: CALL_OW 313
54531: PUSH
54532: LD_INT 6
54534: EQUAL
54535: PUSH
54536: LD_VAR 0 9
54540: PPUSH
54541: CALL_OW 266
54545: PUSH
54546: LD_INT 32
54548: PUSH
54549: LD_INT 31
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: IN
54556: OR
54557: IFFALSE 54371
54559: GO 54368
54561: POP
54562: POP
// end else
54563: GO 54945
// for j = 1 to x do
54565: LD_ADDR_VAR 0 9
54569: PUSH
54570: DOUBLE
54571: LD_INT 1
54573: DEC
54574: ST_TO_ADDR
54575: LD_VAR 0 13
54579: PUSH
54580: FOR_TO
54581: IFFALSE 54943
// begin InitHc ;
54583: CALL_OW 19
// if not f then
54587: LD_VAR 0 12
54591: NOT
54592: IFFALSE 54681
// begin PrepareHuman ( false , i , skill ) ;
54594: LD_INT 0
54596: PPUSH
54597: LD_VAR 0 8
54601: PPUSH
54602: LD_VAR 0 4
54606: PPUSH
54607: CALL_OW 380
// un := CreateHuman ;
54611: LD_ADDR_VAR 0 14
54615: PUSH
54616: CALL_OW 44
54620: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54621: LD_ADDR_VAR 0 7
54625: PUSH
54626: LD_VAR 0 7
54630: PPUSH
54631: LD_INT 1
54633: PPUSH
54634: LD_VAR 0 14
54638: PPUSH
54639: CALL_OW 2
54643: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
54644: LD_VAR 0 14
54648: PPUSH
54649: LD_VAR 0 1
54653: PPUSH
54654: CALL_OW 250
54658: PPUSH
54659: LD_VAR 0 1
54663: PPUSH
54664: CALL_OW 251
54668: PPUSH
54669: LD_INT 10
54671: PPUSH
54672: LD_INT 0
54674: PPUSH
54675: CALL_OW 50
// continue ;
54679: GO 54580
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
54681: LD_VAR 0 12
54685: PUSH
54686: LD_INT 1
54688: ARRAY
54689: PPUSH
54690: CALL_OW 313
54694: PUSH
54695: LD_VAR 0 12
54699: PUSH
54700: LD_INT 1
54702: ARRAY
54703: PPUSH
54704: CALL_OW 266
54708: PUSH
54709: LD_INT 32
54711: PUSH
54712: LD_INT 31
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: IN
54719: AND
54720: PUSH
54721: LD_VAR 0 12
54725: PUSH
54726: LD_INT 1
54728: ARRAY
54729: PPUSH
54730: CALL_OW 313
54734: PUSH
54735: LD_INT 6
54737: EQUAL
54738: OR
54739: IFFALSE 54759
// f := Delete ( f , 1 ) ;
54741: LD_ADDR_VAR 0 12
54745: PUSH
54746: LD_VAR 0 12
54750: PPUSH
54751: LD_INT 1
54753: PPUSH
54754: CALL_OW 3
54758: ST_TO_ADDR
// if not f then
54759: LD_VAR 0 12
54763: NOT
54764: IFFALSE 54782
// begin x := x + 2 ;
54766: LD_ADDR_VAR 0 13
54770: PUSH
54771: LD_VAR 0 13
54775: PUSH
54776: LD_INT 2
54778: PLUS
54779: ST_TO_ADDR
// continue ;
54780: GO 54580
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
54782: LD_VAR 0 12
54786: PUSH
54787: LD_INT 1
54789: ARRAY
54790: PPUSH
54791: CALL_OW 266
54795: PUSH
54796: LD_INT 5
54798: EQUAL
54799: IFFALSE 54873
// begin if UnitsInside ( f [ 1 ] ) < 3 then
54801: LD_VAR 0 12
54805: PUSH
54806: LD_INT 1
54808: ARRAY
54809: PPUSH
54810: CALL_OW 313
54814: PUSH
54815: LD_INT 3
54817: LESS
54818: IFFALSE 54854
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
54820: LD_INT 0
54822: PPUSH
54823: LD_INT 5
54825: PUSH
54826: LD_INT 8
54828: PUSH
54829: LD_INT 9
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: PUSH
54837: LD_VAR 0 17
54841: ARRAY
54842: PPUSH
54843: LD_VAR 0 4
54847: PPUSH
54848: CALL_OW 380
54852: GO 54871
// PrepareHuman ( false , i , skill ) ;
54854: LD_INT 0
54856: PPUSH
54857: LD_VAR 0 8
54861: PPUSH
54862: LD_VAR 0 4
54866: PPUSH
54867: CALL_OW 380
// end else
54871: GO 54890
// PrepareHuman ( false , i , skill ) ;
54873: LD_INT 0
54875: PPUSH
54876: LD_VAR 0 8
54880: PPUSH
54881: LD_VAR 0 4
54885: PPUSH
54886: CALL_OW 380
// un := CreateHuman ;
54890: LD_ADDR_VAR 0 14
54894: PUSH
54895: CALL_OW 44
54899: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
54900: LD_ADDR_VAR 0 7
54904: PUSH
54905: LD_VAR 0 7
54909: PPUSH
54910: LD_INT 1
54912: PPUSH
54913: LD_VAR 0 14
54917: PPUSH
54918: CALL_OW 2
54922: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
54923: LD_VAR 0 14
54927: PPUSH
54928: LD_VAR 0 12
54932: PUSH
54933: LD_INT 1
54935: ARRAY
54936: PPUSH
54937: CALL_OW 52
// end ;
54941: GO 54580
54943: POP
54944: POP
// end ;
54945: GO 53882
54947: POP
54948: POP
// result := result ^ buildings ;
54949: LD_ADDR_VAR 0 7
54953: PUSH
54954: LD_VAR 0 7
54958: PUSH
54959: LD_VAR 0 18
54963: ADD
54964: ST_TO_ADDR
// end else
54965: GO 55108
// begin for i = 1 to personel do
54967: LD_ADDR_VAR 0 8
54971: PUSH
54972: DOUBLE
54973: LD_INT 1
54975: DEC
54976: ST_TO_ADDR
54977: LD_VAR 0 6
54981: PUSH
54982: FOR_TO
54983: IFFALSE 55106
// begin if i > 4 then
54985: LD_VAR 0 8
54989: PUSH
54990: LD_INT 4
54992: GREATER
54993: IFFALSE 54997
// break ;
54995: GO 55106
// x := personel [ i ] ;
54997: LD_ADDR_VAR 0 13
55001: PUSH
55002: LD_VAR 0 6
55006: PUSH
55007: LD_VAR 0 8
55011: ARRAY
55012: ST_TO_ADDR
// if x = - 1 then
55013: LD_VAR 0 13
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: EQUAL
55022: IFFALSE 55026
// continue ;
55024: GO 54982
// PrepareHuman ( false , i , skill ) ;
55026: LD_INT 0
55028: PPUSH
55029: LD_VAR 0 8
55033: PPUSH
55034: LD_VAR 0 4
55038: PPUSH
55039: CALL_OW 380
// un := CreateHuman ;
55043: LD_ADDR_VAR 0 14
55047: PUSH
55048: CALL_OW 44
55052: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55053: LD_VAR 0 14
55057: PPUSH
55058: LD_VAR 0 1
55062: PPUSH
55063: CALL_OW 250
55067: PPUSH
55068: LD_VAR 0 1
55072: PPUSH
55073: CALL_OW 251
55077: PPUSH
55078: LD_INT 10
55080: PPUSH
55081: LD_INT 0
55083: PPUSH
55084: CALL_OW 50
// result := result ^ un ;
55088: LD_ADDR_VAR 0 7
55092: PUSH
55093: LD_VAR 0 7
55097: PUSH
55098: LD_VAR 0 14
55102: ADD
55103: ST_TO_ADDR
// end ;
55104: GO 54982
55106: POP
55107: POP
// end ; end ;
55108: LD_VAR 0 7
55112: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55113: LD_INT 0
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
// result := false ;
55131: LD_ADDR_VAR 0 3
55135: PUSH
55136: LD_INT 0
55138: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55139: LD_VAR 0 1
55143: NOT
55144: PUSH
55145: LD_VAR 0 1
55149: PPUSH
55150: CALL_OW 266
55154: PUSH
55155: LD_INT 32
55157: PUSH
55158: LD_INT 33
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: IN
55165: NOT
55166: OR
55167: IFFALSE 55171
// exit ;
55169: GO 56307
// nat := GetNation ( tower ) ;
55171: LD_ADDR_VAR 0 12
55175: PUSH
55176: LD_VAR 0 1
55180: PPUSH
55181: CALL_OW 248
55185: ST_TO_ADDR
// side := GetSide ( tower ) ;
55186: LD_ADDR_VAR 0 16
55190: PUSH
55191: LD_VAR 0 1
55195: PPUSH
55196: CALL_OW 255
55200: ST_TO_ADDR
// x := GetX ( tower ) ;
55201: LD_ADDR_VAR 0 10
55205: PUSH
55206: LD_VAR 0 1
55210: PPUSH
55211: CALL_OW 250
55215: ST_TO_ADDR
// y := GetY ( tower ) ;
55216: LD_ADDR_VAR 0 11
55220: PUSH
55221: LD_VAR 0 1
55225: PPUSH
55226: CALL_OW 251
55230: ST_TO_ADDR
// if not x or not y then
55231: LD_VAR 0 10
55235: NOT
55236: PUSH
55237: LD_VAR 0 11
55241: NOT
55242: OR
55243: IFFALSE 55247
// exit ;
55245: GO 56307
// weapon := 0 ;
55247: LD_ADDR_VAR 0 18
55251: PUSH
55252: LD_INT 0
55254: ST_TO_ADDR
// fac_list := [ ] ;
55255: LD_ADDR_VAR 0 17
55259: PUSH
55260: EMPTY
55261: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
55262: LD_ADDR_VAR 0 6
55266: PUSH
55267: LD_VAR 0 1
55271: PPUSH
55272: CALL_OW 274
55276: PPUSH
55277: LD_VAR 0 2
55281: PPUSH
55282: CALL 52885 0 2
55286: PPUSH
55287: LD_INT 30
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PPUSH
55297: CALL_OW 72
55301: ST_TO_ADDR
// if not factories then
55302: LD_VAR 0 6
55306: NOT
55307: IFFALSE 55311
// exit ;
55309: GO 56307
// for i in factories do
55311: LD_ADDR_VAR 0 8
55315: PUSH
55316: LD_VAR 0 6
55320: PUSH
55321: FOR_IN
55322: IFFALSE 55347
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55324: LD_ADDR_VAR 0 17
55328: PUSH
55329: LD_VAR 0 17
55333: PUSH
55334: LD_VAR 0 8
55338: PPUSH
55339: CALL_OW 478
55343: UNION
55344: ST_TO_ADDR
55345: GO 55321
55347: POP
55348: POP
// if not fac_list then
55349: LD_VAR 0 17
55353: NOT
55354: IFFALSE 55358
// exit ;
55356: GO 56307
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55358: LD_ADDR_VAR 0 5
55362: PUSH
55363: LD_INT 4
55365: PUSH
55366: LD_INT 5
55368: PUSH
55369: LD_INT 9
55371: PUSH
55372: LD_INT 10
55374: PUSH
55375: LD_INT 6
55377: PUSH
55378: LD_INT 7
55380: PUSH
55381: LD_INT 11
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 27
55395: PUSH
55396: LD_INT 28
55398: PUSH
55399: LD_INT 26
55401: PUSH
55402: LD_INT 30
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 43
55413: PUSH
55414: LD_INT 44
55416: PUSH
55417: LD_INT 46
55419: PUSH
55420: LD_INT 45
55422: PUSH
55423: LD_INT 47
55425: PUSH
55426: LD_INT 49
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: PUSH
55442: LD_VAR 0 12
55446: ARRAY
55447: ST_TO_ADDR
// for i in list do
55448: LD_ADDR_VAR 0 8
55452: PUSH
55453: LD_VAR 0 5
55457: PUSH
55458: FOR_IN
55459: IFFALSE 55492
// if not i in fac_list then
55461: LD_VAR 0 8
55465: PUSH
55466: LD_VAR 0 17
55470: IN
55471: NOT
55472: IFFALSE 55490
// list := list diff i ;
55474: LD_ADDR_VAR 0 5
55478: PUSH
55479: LD_VAR 0 5
55483: PUSH
55484: LD_VAR 0 8
55488: DIFF
55489: ST_TO_ADDR
55490: GO 55458
55492: POP
55493: POP
// if not list then
55494: LD_VAR 0 5
55498: NOT
55499: IFFALSE 55503
// exit ;
55501: GO 56307
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
55503: LD_VAR 0 12
55507: PUSH
55508: LD_INT 3
55510: EQUAL
55511: PUSH
55512: LD_INT 49
55514: PUSH
55515: LD_VAR 0 5
55519: IN
55520: AND
55521: PUSH
55522: LD_INT 31
55524: PPUSH
55525: LD_VAR 0 16
55529: PPUSH
55530: CALL_OW 321
55534: PUSH
55535: LD_INT 2
55537: EQUAL
55538: AND
55539: IFFALSE 55599
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
55541: LD_INT 22
55543: PUSH
55544: LD_VAR 0 16
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 35
55555: PUSH
55556: LD_INT 49
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 91
55565: PUSH
55566: LD_VAR 0 1
55570: PUSH
55571: LD_INT 10
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: PPUSH
55584: CALL_OW 69
55588: NOT
55589: IFFALSE 55599
// weapon := ru_time_lapser ;
55591: LD_ADDR_VAR 0 18
55595: PUSH
55596: LD_INT 49
55598: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
55599: LD_VAR 0 12
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: IN
55614: PUSH
55615: LD_INT 11
55617: PUSH
55618: LD_VAR 0 5
55622: IN
55623: PUSH
55624: LD_INT 30
55626: PUSH
55627: LD_VAR 0 5
55631: IN
55632: OR
55633: AND
55634: PUSH
55635: LD_INT 6
55637: PPUSH
55638: LD_VAR 0 16
55642: PPUSH
55643: CALL_OW 321
55647: PUSH
55648: LD_INT 2
55650: EQUAL
55651: AND
55652: IFFALSE 55817
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
55654: LD_INT 22
55656: PUSH
55657: LD_VAR 0 16
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: LD_INT 35
55671: PUSH
55672: LD_INT 11
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 35
55681: PUSH
55682: LD_INT 30
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 91
55696: PUSH
55697: LD_VAR 0 1
55701: PUSH
55702: LD_INT 18
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: PPUSH
55715: CALL_OW 69
55719: NOT
55720: PUSH
55721: LD_INT 22
55723: PUSH
55724: LD_VAR 0 16
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 30
55738: PUSH
55739: LD_INT 32
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 30
55748: PUSH
55749: LD_INT 33
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 91
55763: PUSH
55764: LD_VAR 0 1
55768: PUSH
55769: LD_INT 12
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: PPUSH
55785: CALL_OW 69
55789: PUSH
55790: LD_INT 2
55792: GREATER
55793: AND
55794: IFFALSE 55817
// weapon := [ us_radar , ar_radar ] [ nat ] ;
55796: LD_ADDR_VAR 0 18
55800: PUSH
55801: LD_INT 11
55803: PUSH
55804: LD_INT 30
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_VAR 0 12
55815: ARRAY
55816: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
55817: LD_VAR 0 18
55821: NOT
55822: PUSH
55823: LD_INT 40
55825: PPUSH
55826: LD_VAR 0 16
55830: PPUSH
55831: CALL_OW 321
55835: PUSH
55836: LD_INT 2
55838: EQUAL
55839: AND
55840: PUSH
55841: LD_INT 7
55843: PUSH
55844: LD_VAR 0 5
55848: IN
55849: PUSH
55850: LD_INT 28
55852: PUSH
55853: LD_VAR 0 5
55857: IN
55858: OR
55859: PUSH
55860: LD_INT 45
55862: PUSH
55863: LD_VAR 0 5
55867: IN
55868: OR
55869: AND
55870: IFFALSE 56124
// begin hex := GetHexInfo ( x , y ) ;
55872: LD_ADDR_VAR 0 4
55876: PUSH
55877: LD_VAR 0 10
55881: PPUSH
55882: LD_VAR 0 11
55886: PPUSH
55887: CALL_OW 546
55891: ST_TO_ADDR
// if hex [ 1 ] then
55892: LD_VAR 0 4
55896: PUSH
55897: LD_INT 1
55899: ARRAY
55900: IFFALSE 55904
// exit ;
55902: GO 56307
// height := hex [ 2 ] ;
55904: LD_ADDR_VAR 0 15
55908: PUSH
55909: LD_VAR 0 4
55913: PUSH
55914: LD_INT 2
55916: ARRAY
55917: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
55918: LD_ADDR_VAR 0 14
55922: PUSH
55923: LD_INT 0
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 3
55931: PUSH
55932: LD_INT 5
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: ST_TO_ADDR
// for i in tmp do
55941: LD_ADDR_VAR 0 8
55945: PUSH
55946: LD_VAR 0 14
55950: PUSH
55951: FOR_IN
55952: IFFALSE 56122
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
55954: LD_ADDR_VAR 0 9
55958: PUSH
55959: LD_VAR 0 10
55963: PPUSH
55964: LD_VAR 0 8
55968: PPUSH
55969: LD_INT 5
55971: PPUSH
55972: CALL_OW 272
55976: PUSH
55977: LD_VAR 0 11
55981: PPUSH
55982: LD_VAR 0 8
55986: PPUSH
55987: LD_INT 5
55989: PPUSH
55990: CALL_OW 273
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
55999: LD_VAR 0 9
56003: PUSH
56004: LD_INT 1
56006: ARRAY
56007: PPUSH
56008: LD_VAR 0 9
56012: PUSH
56013: LD_INT 2
56015: ARRAY
56016: PPUSH
56017: CALL_OW 488
56021: IFFALSE 56120
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
56023: LD_ADDR_VAR 0 4
56027: PUSH
56028: LD_VAR 0 9
56032: PUSH
56033: LD_INT 1
56035: ARRAY
56036: PPUSH
56037: LD_VAR 0 9
56041: PUSH
56042: LD_INT 2
56044: ARRAY
56045: PPUSH
56046: CALL_OW 546
56050: ST_TO_ADDR
// if hex [ 1 ] then
56051: LD_VAR 0 4
56055: PUSH
56056: LD_INT 1
56058: ARRAY
56059: IFFALSE 56063
// continue ;
56061: GO 55951
// h := hex [ 2 ] ;
56063: LD_ADDR_VAR 0 13
56067: PUSH
56068: LD_VAR 0 4
56072: PUSH
56073: LD_INT 2
56075: ARRAY
56076: ST_TO_ADDR
// if h + 7 < height then
56077: LD_VAR 0 13
56081: PUSH
56082: LD_INT 7
56084: PLUS
56085: PUSH
56086: LD_VAR 0 15
56090: LESS
56091: IFFALSE 56120
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56093: LD_ADDR_VAR 0 18
56097: PUSH
56098: LD_INT 7
56100: PUSH
56101: LD_INT 28
56103: PUSH
56104: LD_INT 45
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: PUSH
56112: LD_VAR 0 12
56116: ARRAY
56117: ST_TO_ADDR
// break ;
56118: GO 56122
// end ; end ; end ;
56120: GO 55951
56122: POP
56123: POP
// end ; if not weapon then
56124: LD_VAR 0 18
56128: NOT
56129: IFFALSE 56189
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56131: LD_ADDR_VAR 0 5
56135: PUSH
56136: LD_VAR 0 5
56140: PUSH
56141: LD_INT 11
56143: PUSH
56144: LD_INT 30
56146: PUSH
56147: LD_INT 49
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: DIFF
56155: ST_TO_ADDR
// if not list then
56156: LD_VAR 0 5
56160: NOT
56161: IFFALSE 56165
// exit ;
56163: GO 56307
// weapon := list [ rand ( 1 , list ) ] ;
56165: LD_ADDR_VAR 0 18
56169: PUSH
56170: LD_VAR 0 5
56174: PUSH
56175: LD_INT 1
56177: PPUSH
56178: LD_VAR 0 5
56182: PPUSH
56183: CALL_OW 12
56187: ARRAY
56188: ST_TO_ADDR
// end ; if weapon then
56189: LD_VAR 0 18
56193: IFFALSE 56307
// begin tmp := CostOfWeapon ( weapon ) ;
56195: LD_ADDR_VAR 0 14
56199: PUSH
56200: LD_VAR 0 18
56204: PPUSH
56205: CALL_OW 451
56209: ST_TO_ADDR
// j := GetBase ( tower ) ;
56210: LD_ADDR_VAR 0 9
56214: PUSH
56215: LD_VAR 0 1
56219: PPUSH
56220: CALL_OW 274
56224: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56225: LD_VAR 0 9
56229: PPUSH
56230: LD_INT 1
56232: PPUSH
56233: CALL_OW 275
56237: PUSH
56238: LD_VAR 0 14
56242: PUSH
56243: LD_INT 1
56245: ARRAY
56246: GREATEREQUAL
56247: PUSH
56248: LD_VAR 0 9
56252: PPUSH
56253: LD_INT 2
56255: PPUSH
56256: CALL_OW 275
56260: PUSH
56261: LD_VAR 0 14
56265: PUSH
56266: LD_INT 2
56268: ARRAY
56269: GREATEREQUAL
56270: AND
56271: PUSH
56272: LD_VAR 0 9
56276: PPUSH
56277: LD_INT 3
56279: PPUSH
56280: CALL_OW 275
56284: PUSH
56285: LD_VAR 0 14
56289: PUSH
56290: LD_INT 3
56292: ARRAY
56293: GREATEREQUAL
56294: AND
56295: IFFALSE 56307
// result := weapon ;
56297: LD_ADDR_VAR 0 3
56301: PUSH
56302: LD_VAR 0 18
56306: ST_TO_ADDR
// end ; end ;
56307: LD_VAR 0 3
56311: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56312: LD_INT 0
56314: PPUSH
56315: PPUSH
// result := true ;
56316: LD_ADDR_VAR 0 3
56320: PUSH
56321: LD_INT 1
56323: ST_TO_ADDR
// if array1 = array2 then
56324: LD_VAR 0 1
56328: PUSH
56329: LD_VAR 0 2
56333: EQUAL
56334: IFFALSE 56394
// begin for i = 1 to array1 do
56336: LD_ADDR_VAR 0 4
56340: PUSH
56341: DOUBLE
56342: LD_INT 1
56344: DEC
56345: ST_TO_ADDR
56346: LD_VAR 0 1
56350: PUSH
56351: FOR_TO
56352: IFFALSE 56390
// if array1 [ i ] <> array2 [ i ] then
56354: LD_VAR 0 1
56358: PUSH
56359: LD_VAR 0 4
56363: ARRAY
56364: PUSH
56365: LD_VAR 0 2
56369: PUSH
56370: LD_VAR 0 4
56374: ARRAY
56375: NONEQUAL
56376: IFFALSE 56388
// begin result := false ;
56378: LD_ADDR_VAR 0 3
56382: PUSH
56383: LD_INT 0
56385: ST_TO_ADDR
// break ;
56386: GO 56390
// end ;
56388: GO 56351
56390: POP
56391: POP
// end else
56392: GO 56402
// result := false ;
56394: LD_ADDR_VAR 0 3
56398: PUSH
56399: LD_INT 0
56401: ST_TO_ADDR
// end ;
56402: LD_VAR 0 3
56406: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
56407: LD_INT 0
56409: PPUSH
56410: PPUSH
56411: PPUSH
// pom := GetBase ( fac ) ;
56412: LD_ADDR_VAR 0 5
56416: PUSH
56417: LD_VAR 0 1
56421: PPUSH
56422: CALL_OW 274
56426: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
56427: LD_ADDR_VAR 0 4
56431: PUSH
56432: LD_VAR 0 2
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PPUSH
56441: LD_VAR 0 2
56445: PUSH
56446: LD_INT 2
56448: ARRAY
56449: PPUSH
56450: LD_VAR 0 2
56454: PUSH
56455: LD_INT 3
56457: ARRAY
56458: PPUSH
56459: LD_VAR 0 2
56463: PUSH
56464: LD_INT 4
56466: ARRAY
56467: PPUSH
56468: CALL_OW 449
56472: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56473: LD_ADDR_VAR 0 3
56477: PUSH
56478: LD_VAR 0 5
56482: PPUSH
56483: LD_INT 1
56485: PPUSH
56486: CALL_OW 275
56490: PUSH
56491: LD_VAR 0 4
56495: PUSH
56496: LD_INT 1
56498: ARRAY
56499: GREATEREQUAL
56500: PUSH
56501: LD_VAR 0 5
56505: PPUSH
56506: LD_INT 2
56508: PPUSH
56509: CALL_OW 275
56513: PUSH
56514: LD_VAR 0 4
56518: PUSH
56519: LD_INT 2
56521: ARRAY
56522: GREATEREQUAL
56523: AND
56524: PUSH
56525: LD_VAR 0 5
56529: PPUSH
56530: LD_INT 3
56532: PPUSH
56533: CALL_OW 275
56537: PUSH
56538: LD_VAR 0 4
56542: PUSH
56543: LD_INT 3
56545: ARRAY
56546: GREATEREQUAL
56547: AND
56548: ST_TO_ADDR
// end ;
56549: LD_VAR 0 3
56553: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
56554: LD_INT 0
56556: PPUSH
56557: PPUSH
56558: PPUSH
56559: PPUSH
// pom := GetBase ( building ) ;
56560: LD_ADDR_VAR 0 3
56564: PUSH
56565: LD_VAR 0 1
56569: PPUSH
56570: CALL_OW 274
56574: ST_TO_ADDR
// if not pom then
56575: LD_VAR 0 3
56579: NOT
56580: IFFALSE 56584
// exit ;
56582: GO 56754
// btype := GetBType ( building ) ;
56584: LD_ADDR_VAR 0 5
56588: PUSH
56589: LD_VAR 0 1
56593: PPUSH
56594: CALL_OW 266
56598: ST_TO_ADDR
// if btype = b_armoury then
56599: LD_VAR 0 5
56603: PUSH
56604: LD_INT 4
56606: EQUAL
56607: IFFALSE 56617
// btype := b_barracks ;
56609: LD_ADDR_VAR 0 5
56613: PUSH
56614: LD_INT 5
56616: ST_TO_ADDR
// if btype = b_depot then
56617: LD_VAR 0 5
56621: PUSH
56622: LD_INT 0
56624: EQUAL
56625: IFFALSE 56635
// btype := b_warehouse ;
56627: LD_ADDR_VAR 0 5
56631: PUSH
56632: LD_INT 1
56634: ST_TO_ADDR
// if btype = b_workshop then
56635: LD_VAR 0 5
56639: PUSH
56640: LD_INT 2
56642: EQUAL
56643: IFFALSE 56653
// btype := b_factory ;
56645: LD_ADDR_VAR 0 5
56649: PUSH
56650: LD_INT 3
56652: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56653: LD_ADDR_VAR 0 4
56657: PUSH
56658: LD_VAR 0 5
56662: PPUSH
56663: LD_VAR 0 1
56667: PPUSH
56668: CALL_OW 248
56672: PPUSH
56673: CALL_OW 450
56677: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56678: LD_ADDR_VAR 0 2
56682: PUSH
56683: LD_VAR 0 3
56687: PPUSH
56688: LD_INT 1
56690: PPUSH
56691: CALL_OW 275
56695: PUSH
56696: LD_VAR 0 4
56700: PUSH
56701: LD_INT 1
56703: ARRAY
56704: GREATEREQUAL
56705: PUSH
56706: LD_VAR 0 3
56710: PPUSH
56711: LD_INT 2
56713: PPUSH
56714: CALL_OW 275
56718: PUSH
56719: LD_VAR 0 4
56723: PUSH
56724: LD_INT 2
56726: ARRAY
56727: GREATEREQUAL
56728: AND
56729: PUSH
56730: LD_VAR 0 3
56734: PPUSH
56735: LD_INT 3
56737: PPUSH
56738: CALL_OW 275
56742: PUSH
56743: LD_VAR 0 4
56747: PUSH
56748: LD_INT 3
56750: ARRAY
56751: GREATEREQUAL
56752: AND
56753: ST_TO_ADDR
// end ;
56754: LD_VAR 0 2
56758: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
56759: LD_INT 0
56761: PPUSH
56762: PPUSH
56763: PPUSH
// pom := GetBase ( building ) ;
56764: LD_ADDR_VAR 0 4
56768: PUSH
56769: LD_VAR 0 1
56773: PPUSH
56774: CALL_OW 274
56778: ST_TO_ADDR
// if not pom then
56779: LD_VAR 0 4
56783: NOT
56784: IFFALSE 56788
// exit ;
56786: GO 56889
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
56788: LD_ADDR_VAR 0 5
56792: PUSH
56793: LD_VAR 0 2
56797: PPUSH
56798: LD_VAR 0 1
56802: PPUSH
56803: CALL_OW 248
56807: PPUSH
56808: CALL_OW 450
56812: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
56813: LD_ADDR_VAR 0 3
56817: PUSH
56818: LD_VAR 0 4
56822: PPUSH
56823: LD_INT 1
56825: PPUSH
56826: CALL_OW 275
56830: PUSH
56831: LD_VAR 0 5
56835: PUSH
56836: LD_INT 1
56838: ARRAY
56839: GREATEREQUAL
56840: PUSH
56841: LD_VAR 0 4
56845: PPUSH
56846: LD_INT 2
56848: PPUSH
56849: CALL_OW 275
56853: PUSH
56854: LD_VAR 0 5
56858: PUSH
56859: LD_INT 2
56861: ARRAY
56862: GREATEREQUAL
56863: AND
56864: PUSH
56865: LD_VAR 0 4
56869: PPUSH
56870: LD_INT 3
56872: PPUSH
56873: CALL_OW 275
56877: PUSH
56878: LD_VAR 0 5
56882: PUSH
56883: LD_INT 3
56885: ARRAY
56886: GREATEREQUAL
56887: AND
56888: ST_TO_ADDR
// end ;
56889: LD_VAR 0 3
56893: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
56894: LD_INT 0
56896: PPUSH
56897: PPUSH
56898: PPUSH
56899: PPUSH
56900: PPUSH
56901: PPUSH
56902: PPUSH
56903: PPUSH
56904: PPUSH
56905: PPUSH
// result := false ;
56906: LD_ADDR_VAR 0 6
56910: PUSH
56911: LD_INT 0
56913: ST_TO_ADDR
// if not base or not btype or not x or not y then
56914: LD_VAR 0 1
56918: NOT
56919: PUSH
56920: LD_VAR 0 2
56924: NOT
56925: OR
56926: PUSH
56927: LD_VAR 0 3
56931: NOT
56932: OR
56933: PUSH
56934: LD_VAR 0 4
56938: NOT
56939: OR
56940: IFFALSE 56944
// exit ;
56942: GO 57553
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
56944: LD_ADDR_VAR 0 12
56948: PUSH
56949: LD_VAR 0 2
56953: PPUSH
56954: LD_VAR 0 3
56958: PPUSH
56959: LD_VAR 0 4
56963: PPUSH
56964: LD_VAR 0 5
56968: PPUSH
56969: LD_VAR 0 1
56973: PUSH
56974: LD_INT 1
56976: ARRAY
56977: PPUSH
56978: CALL_OW 248
56982: PPUSH
56983: LD_INT 0
56985: PPUSH
56986: CALL 58390 0 6
56990: ST_TO_ADDR
// if not hexes then
56991: LD_VAR 0 12
56995: NOT
56996: IFFALSE 57000
// exit ;
56998: GO 57553
// for i = 1 to hexes do
57000: LD_ADDR_VAR 0 7
57004: PUSH
57005: DOUBLE
57006: LD_INT 1
57008: DEC
57009: ST_TO_ADDR
57010: LD_VAR 0 12
57014: PUSH
57015: FOR_TO
57016: IFFALSE 57551
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57018: LD_ADDR_VAR 0 11
57022: PUSH
57023: LD_VAR 0 12
57027: PUSH
57028: LD_VAR 0 7
57032: ARRAY
57033: PUSH
57034: LD_INT 1
57036: ARRAY
57037: PPUSH
57038: LD_VAR 0 12
57042: PUSH
57043: LD_VAR 0 7
57047: ARRAY
57048: PUSH
57049: LD_INT 2
57051: ARRAY
57052: PPUSH
57053: CALL_OW 428
57057: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
57058: LD_VAR 0 12
57062: PUSH
57063: LD_VAR 0 7
57067: ARRAY
57068: PUSH
57069: LD_INT 1
57071: ARRAY
57072: PPUSH
57073: LD_VAR 0 12
57077: PUSH
57078: LD_VAR 0 7
57082: ARRAY
57083: PUSH
57084: LD_INT 2
57086: ARRAY
57087: PPUSH
57088: CALL_OW 351
57092: PUSH
57093: LD_VAR 0 12
57097: PUSH
57098: LD_VAR 0 7
57102: ARRAY
57103: PUSH
57104: LD_INT 1
57106: ARRAY
57107: PPUSH
57108: LD_VAR 0 12
57112: PUSH
57113: LD_VAR 0 7
57117: ARRAY
57118: PUSH
57119: LD_INT 2
57121: ARRAY
57122: PPUSH
57123: CALL_OW 488
57127: NOT
57128: OR
57129: PUSH
57130: LD_VAR 0 11
57134: PPUSH
57135: CALL_OW 247
57139: PUSH
57140: LD_INT 3
57142: EQUAL
57143: OR
57144: IFFALSE 57150
// exit ;
57146: POP
57147: POP
57148: GO 57553
// if not tmp or not tmp in base then
57150: LD_VAR 0 11
57154: NOT
57155: PUSH
57156: LD_VAR 0 11
57160: PUSH
57161: LD_VAR 0 1
57165: IN
57166: NOT
57167: OR
57168: IFFALSE 57172
// continue ;
57170: GO 57015
// result := true ;
57172: LD_ADDR_VAR 0 6
57176: PUSH
57177: LD_INT 1
57179: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57180: LD_ADDR_VAR 0 15
57184: PUSH
57185: LD_VAR 0 1
57189: PPUSH
57190: LD_INT 22
57192: PUSH
57193: LD_VAR 0 11
57197: PPUSH
57198: CALL_OW 255
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 30
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 30
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PPUSH
57239: CALL_OW 72
57243: ST_TO_ADDR
// if dep then
57244: LD_VAR 0 15
57248: IFFALSE 57384
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57250: LD_ADDR_VAR 0 14
57254: PUSH
57255: LD_VAR 0 15
57259: PUSH
57260: LD_INT 1
57262: ARRAY
57263: PPUSH
57264: CALL_OW 250
57268: PPUSH
57269: LD_VAR 0 15
57273: PUSH
57274: LD_INT 1
57276: ARRAY
57277: PPUSH
57278: CALL_OW 254
57282: PPUSH
57283: LD_INT 5
57285: PPUSH
57286: CALL_OW 272
57290: PUSH
57291: LD_VAR 0 15
57295: PUSH
57296: LD_INT 1
57298: ARRAY
57299: PPUSH
57300: CALL_OW 251
57304: PPUSH
57305: LD_VAR 0 15
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: PPUSH
57314: CALL_OW 254
57318: PPUSH
57319: LD_INT 5
57321: PPUSH
57322: CALL_OW 273
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57331: LD_VAR 0 14
57335: PUSH
57336: LD_INT 1
57338: ARRAY
57339: PPUSH
57340: LD_VAR 0 14
57344: PUSH
57345: LD_INT 2
57347: ARRAY
57348: PPUSH
57349: CALL_OW 488
57353: IFFALSE 57384
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57355: LD_VAR 0 11
57359: PPUSH
57360: LD_VAR 0 14
57364: PUSH
57365: LD_INT 1
57367: ARRAY
57368: PPUSH
57369: LD_VAR 0 14
57373: PUSH
57374: LD_INT 2
57376: ARRAY
57377: PPUSH
57378: CALL_OW 111
// continue ;
57382: GO 57015
// end ; end ; r := GetDir ( tmp ) ;
57384: LD_ADDR_VAR 0 13
57388: PUSH
57389: LD_VAR 0 11
57393: PPUSH
57394: CALL_OW 254
57398: ST_TO_ADDR
// if r = 5 then
57399: LD_VAR 0 13
57403: PUSH
57404: LD_INT 5
57406: EQUAL
57407: IFFALSE 57417
// r := 0 ;
57409: LD_ADDR_VAR 0 13
57413: PUSH
57414: LD_INT 0
57416: ST_TO_ADDR
// for j = r to 5 do
57417: LD_ADDR_VAR 0 8
57421: PUSH
57422: DOUBLE
57423: LD_VAR 0 13
57427: DEC
57428: ST_TO_ADDR
57429: LD_INT 5
57431: PUSH
57432: FOR_TO
57433: IFFALSE 57547
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57435: LD_ADDR_VAR 0 9
57439: PUSH
57440: LD_VAR 0 11
57444: PPUSH
57445: CALL_OW 250
57449: PPUSH
57450: LD_VAR 0 8
57454: PPUSH
57455: LD_INT 2
57457: PPUSH
57458: CALL_OW 272
57462: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57463: LD_ADDR_VAR 0 10
57467: PUSH
57468: LD_VAR 0 11
57472: PPUSH
57473: CALL_OW 251
57477: PPUSH
57478: LD_VAR 0 8
57482: PPUSH
57483: LD_INT 2
57485: PPUSH
57486: CALL_OW 273
57490: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
57491: LD_VAR 0 9
57495: PPUSH
57496: LD_VAR 0 10
57500: PPUSH
57501: CALL_OW 488
57505: PUSH
57506: LD_VAR 0 9
57510: PPUSH
57511: LD_VAR 0 10
57515: PPUSH
57516: CALL_OW 428
57520: NOT
57521: AND
57522: IFFALSE 57545
// begin ComMoveXY ( tmp , _x , _y ) ;
57524: LD_VAR 0 11
57528: PPUSH
57529: LD_VAR 0 9
57533: PPUSH
57534: LD_VAR 0 10
57538: PPUSH
57539: CALL_OW 111
// break ;
57543: GO 57547
// end ; end ;
57545: GO 57432
57547: POP
57548: POP
// end ;
57549: GO 57015
57551: POP
57552: POP
// end ;
57553: LD_VAR 0 6
57557: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
57558: LD_INT 0
57560: PPUSH
57561: PPUSH
57562: PPUSH
57563: PPUSH
57564: PPUSH
57565: PPUSH
57566: PPUSH
57567: PPUSH
57568: PPUSH
57569: PPUSH
// result := false ;
57570: LD_ADDR_VAR 0 6
57574: PUSH
57575: LD_INT 0
57577: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
57578: LD_VAR 0 1
57582: NOT
57583: PUSH
57584: LD_VAR 0 1
57588: PPUSH
57589: CALL_OW 266
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: IN
57604: NOT
57605: OR
57606: PUSH
57607: LD_VAR 0 2
57611: NOT
57612: OR
57613: PUSH
57614: LD_VAR 0 5
57618: PUSH
57619: LD_INT 0
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 4
57633: PUSH
57634: LD_INT 5
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: IN
57645: NOT
57646: OR
57647: PUSH
57648: LD_VAR 0 3
57652: PPUSH
57653: LD_VAR 0 4
57657: PPUSH
57658: CALL_OW 488
57662: NOT
57663: OR
57664: IFFALSE 57668
// exit ;
57666: GO 58385
// pom := GetBase ( depot ) ;
57668: LD_ADDR_VAR 0 10
57672: PUSH
57673: LD_VAR 0 1
57677: PPUSH
57678: CALL_OW 274
57682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57683: LD_ADDR_VAR 0 11
57687: PUSH
57688: LD_VAR 0 2
57692: PPUSH
57693: LD_VAR 0 1
57697: PPUSH
57698: CALL_OW 248
57702: PPUSH
57703: CALL_OW 450
57707: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57708: LD_VAR 0 10
57712: PPUSH
57713: LD_INT 1
57715: PPUSH
57716: CALL_OW 275
57720: PUSH
57721: LD_VAR 0 11
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: GREATEREQUAL
57730: PUSH
57731: LD_VAR 0 10
57735: PPUSH
57736: LD_INT 2
57738: PPUSH
57739: CALL_OW 275
57743: PUSH
57744: LD_VAR 0 11
57748: PUSH
57749: LD_INT 2
57751: ARRAY
57752: GREATEREQUAL
57753: AND
57754: PUSH
57755: LD_VAR 0 10
57759: PPUSH
57760: LD_INT 3
57762: PPUSH
57763: CALL_OW 275
57767: PUSH
57768: LD_VAR 0 11
57772: PUSH
57773: LD_INT 3
57775: ARRAY
57776: GREATEREQUAL
57777: AND
57778: NOT
57779: IFFALSE 57783
// exit ;
57781: GO 58385
// if GetBType ( depot ) = b_depot then
57783: LD_VAR 0 1
57787: PPUSH
57788: CALL_OW 266
57792: PUSH
57793: LD_INT 0
57795: EQUAL
57796: IFFALSE 57808
// dist := 28 else
57798: LD_ADDR_VAR 0 14
57802: PUSH
57803: LD_INT 28
57805: ST_TO_ADDR
57806: GO 57816
// dist := 36 ;
57808: LD_ADDR_VAR 0 14
57812: PUSH
57813: LD_INT 36
57815: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57816: LD_VAR 0 1
57820: PPUSH
57821: LD_VAR 0 3
57825: PPUSH
57826: LD_VAR 0 4
57830: PPUSH
57831: CALL_OW 297
57835: PUSH
57836: LD_VAR 0 14
57840: GREATER
57841: IFFALSE 57845
// exit ;
57843: GO 58385
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57845: LD_ADDR_VAR 0 12
57849: PUSH
57850: LD_VAR 0 2
57854: PPUSH
57855: LD_VAR 0 3
57859: PPUSH
57860: LD_VAR 0 4
57864: PPUSH
57865: LD_VAR 0 5
57869: PPUSH
57870: LD_VAR 0 1
57874: PPUSH
57875: CALL_OW 248
57879: PPUSH
57880: LD_INT 0
57882: PPUSH
57883: CALL 58390 0 6
57887: ST_TO_ADDR
// if not hexes then
57888: LD_VAR 0 12
57892: NOT
57893: IFFALSE 57897
// exit ;
57895: GO 58385
// hex := GetHexInfo ( x , y ) ;
57897: LD_ADDR_VAR 0 15
57901: PUSH
57902: LD_VAR 0 3
57906: PPUSH
57907: LD_VAR 0 4
57911: PPUSH
57912: CALL_OW 546
57916: ST_TO_ADDR
// if hex [ 1 ] then
57917: LD_VAR 0 15
57921: PUSH
57922: LD_INT 1
57924: ARRAY
57925: IFFALSE 57929
// exit ;
57927: GO 58385
// height := hex [ 2 ] ;
57929: LD_ADDR_VAR 0 13
57933: PUSH
57934: LD_VAR 0 15
57938: PUSH
57939: LD_INT 2
57941: ARRAY
57942: ST_TO_ADDR
// for i = 1 to hexes do
57943: LD_ADDR_VAR 0 7
57947: PUSH
57948: DOUBLE
57949: LD_INT 1
57951: DEC
57952: ST_TO_ADDR
57953: LD_VAR 0 12
57957: PUSH
57958: FOR_TO
57959: IFFALSE 58289
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57961: LD_VAR 0 12
57965: PUSH
57966: LD_VAR 0 7
57970: ARRAY
57971: PUSH
57972: LD_INT 1
57974: ARRAY
57975: PPUSH
57976: LD_VAR 0 12
57980: PUSH
57981: LD_VAR 0 7
57985: ARRAY
57986: PUSH
57987: LD_INT 2
57989: ARRAY
57990: PPUSH
57991: CALL_OW 488
57995: NOT
57996: PUSH
57997: LD_VAR 0 12
58001: PUSH
58002: LD_VAR 0 7
58006: ARRAY
58007: PUSH
58008: LD_INT 1
58010: ARRAY
58011: PPUSH
58012: LD_VAR 0 12
58016: PUSH
58017: LD_VAR 0 7
58021: ARRAY
58022: PUSH
58023: LD_INT 2
58025: ARRAY
58026: PPUSH
58027: CALL_OW 428
58031: PUSH
58032: LD_INT 0
58034: GREATER
58035: OR
58036: PUSH
58037: LD_VAR 0 12
58041: PUSH
58042: LD_VAR 0 7
58046: ARRAY
58047: PUSH
58048: LD_INT 1
58050: ARRAY
58051: PPUSH
58052: LD_VAR 0 12
58056: PUSH
58057: LD_VAR 0 7
58061: ARRAY
58062: PUSH
58063: LD_INT 2
58065: ARRAY
58066: PPUSH
58067: CALL_OW 351
58071: OR
58072: IFFALSE 58078
// exit ;
58074: POP
58075: POP
58076: GO 58385
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58078: LD_ADDR_VAR 0 8
58082: PUSH
58083: LD_VAR 0 12
58087: PUSH
58088: LD_VAR 0 7
58092: ARRAY
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PPUSH
58098: LD_VAR 0 12
58102: PUSH
58103: LD_VAR 0 7
58107: ARRAY
58108: PUSH
58109: LD_INT 2
58111: ARRAY
58112: PPUSH
58113: CALL_OW 546
58117: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58118: LD_VAR 0 8
58122: PUSH
58123: LD_INT 1
58125: ARRAY
58126: PUSH
58127: LD_VAR 0 8
58131: PUSH
58132: LD_INT 2
58134: ARRAY
58135: PUSH
58136: LD_VAR 0 13
58140: PUSH
58141: LD_INT 2
58143: PLUS
58144: GREATER
58145: OR
58146: PUSH
58147: LD_VAR 0 8
58151: PUSH
58152: LD_INT 2
58154: ARRAY
58155: PUSH
58156: LD_VAR 0 13
58160: PUSH
58161: LD_INT 2
58163: MINUS
58164: LESS
58165: OR
58166: PUSH
58167: LD_VAR 0 8
58171: PUSH
58172: LD_INT 3
58174: ARRAY
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 8
58181: PUSH
58182: LD_INT 9
58184: PUSH
58185: LD_INT 10
58187: PUSH
58188: LD_INT 11
58190: PUSH
58191: LD_INT 12
58193: PUSH
58194: LD_INT 13
58196: PUSH
58197: LD_INT 16
58199: PUSH
58200: LD_INT 17
58202: PUSH
58203: LD_INT 18
58205: PUSH
58206: LD_INT 19
58208: PUSH
58209: LD_INT 20
58211: PUSH
58212: LD_INT 21
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: IN
58230: NOT
58231: OR
58232: PUSH
58233: LD_VAR 0 8
58237: PUSH
58238: LD_INT 5
58240: ARRAY
58241: NOT
58242: OR
58243: PUSH
58244: LD_VAR 0 8
58248: PUSH
58249: LD_INT 6
58251: ARRAY
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 7
58261: PUSH
58262: LD_INT 9
58264: PUSH
58265: LD_INT 10
58267: PUSH
58268: LD_INT 11
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: IN
58279: NOT
58280: OR
58281: IFFALSE 58287
// exit ;
58283: POP
58284: POP
58285: GO 58385
// end ;
58287: GO 57958
58289: POP
58290: POP
// side := GetSide ( depot ) ;
58291: LD_ADDR_VAR 0 9
58295: PUSH
58296: LD_VAR 0 1
58300: PPUSH
58301: CALL_OW 255
58305: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
58306: LD_VAR 0 9
58310: PPUSH
58311: LD_VAR 0 3
58315: PPUSH
58316: LD_VAR 0 4
58320: PPUSH
58321: LD_INT 20
58323: PPUSH
58324: CALL 51039 0 4
58328: PUSH
58329: LD_INT 4
58331: ARRAY
58332: IFFALSE 58336
// exit ;
58334: GO 58385
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
58336: LD_VAR 0 2
58340: PUSH
58341: LD_INT 29
58343: PUSH
58344: LD_INT 30
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: IN
58351: PUSH
58352: LD_VAR 0 3
58356: PPUSH
58357: LD_VAR 0 4
58361: PPUSH
58362: LD_VAR 0 9
58366: PPUSH
58367: CALL_OW 440
58371: NOT
58372: AND
58373: IFFALSE 58377
// exit ;
58375: GO 58385
// result := true ;
58377: LD_ADDR_VAR 0 6
58381: PUSH
58382: LD_INT 1
58384: ST_TO_ADDR
// end ;
58385: LD_VAR 0 6
58389: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
58390: LD_INT 0
58392: PPUSH
58393: PPUSH
58394: PPUSH
58395: PPUSH
58396: PPUSH
58397: PPUSH
58398: PPUSH
58399: PPUSH
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
58410: PPUSH
58411: PPUSH
58412: PPUSH
58413: PPUSH
58414: PPUSH
58415: PPUSH
58416: PPUSH
58417: PPUSH
58418: PPUSH
58419: PPUSH
58420: PPUSH
58421: PPUSH
58422: PPUSH
58423: PPUSH
58424: PPUSH
58425: PPUSH
58426: PPUSH
58427: PPUSH
58428: PPUSH
58429: PPUSH
58430: PPUSH
58431: PPUSH
58432: PPUSH
58433: PPUSH
58434: PPUSH
58435: PPUSH
58436: PPUSH
58437: PPUSH
58438: PPUSH
58439: PPUSH
58440: PPUSH
58441: PPUSH
58442: PPUSH
58443: PPUSH
58444: PPUSH
58445: PPUSH
58446: PPUSH
58447: PPUSH
58448: PPUSH
58449: PPUSH
// result = [ ] ;
58450: LD_ADDR_VAR 0 7
58454: PUSH
58455: EMPTY
58456: ST_TO_ADDR
// temp_list = [ ] ;
58457: LD_ADDR_VAR 0 9
58461: PUSH
58462: EMPTY
58463: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58464: LD_VAR 0 4
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 3
58480: PUSH
58481: LD_INT 4
58483: PUSH
58484: LD_INT 5
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: IN
58495: NOT
58496: PUSH
58497: LD_VAR 0 1
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 1
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: IN
58512: PUSH
58513: LD_VAR 0 5
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: LD_INT 3
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: IN
58532: NOT
58533: AND
58534: OR
58535: IFFALSE 58539
// exit ;
58537: GO 76930
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
58539: LD_VAR 0 1
58543: PUSH
58544: LD_INT 6
58546: PUSH
58547: LD_INT 7
58549: PUSH
58550: LD_INT 8
58552: PUSH
58553: LD_INT 13
58555: PUSH
58556: LD_INT 12
58558: PUSH
58559: LD_INT 15
58561: PUSH
58562: LD_INT 11
58564: PUSH
58565: LD_INT 14
58567: PUSH
58568: LD_INT 10
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: IN
58582: IFFALSE 58592
// btype = b_lab ;
58584: LD_ADDR_VAR 0 1
58588: PUSH
58589: LD_INT 6
58591: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
58592: LD_VAR 0 6
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: IN
58611: NOT
58612: PUSH
58613: LD_VAR 0 1
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 3
58629: PUSH
58630: LD_INT 6
58632: PUSH
58633: LD_INT 36
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: LD_INT 31
58644: PUSH
58645: LD_INT 32
58647: PUSH
58648: LD_INT 33
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: IN
58664: NOT
58665: PUSH
58666: LD_VAR 0 6
58670: PUSH
58671: LD_INT 1
58673: EQUAL
58674: AND
58675: OR
58676: PUSH
58677: LD_VAR 0 1
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: IN
58692: NOT
58693: PUSH
58694: LD_VAR 0 6
58698: PUSH
58699: LD_INT 2
58701: EQUAL
58702: AND
58703: OR
58704: IFFALSE 58714
// mode = 0 ;
58706: LD_ADDR_VAR 0 6
58710: PUSH
58711: LD_INT 0
58713: ST_TO_ADDR
// case mode of 0 :
58714: LD_VAR 0 6
58718: PUSH
58719: LD_INT 0
58721: DOUBLE
58722: EQUAL
58723: IFTRUE 58727
58725: GO 70180
58727: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58728: LD_ADDR_VAR 0 11
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: NEG
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58921: LD_ADDR_VAR 0 12
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 3
59078: NEG
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: NEG
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59117: LD_ADDR_VAR 0 13
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: PUSH
59221: LD_INT 2
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 3
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 3
59288: NEG
59289: PUSH
59290: LD_INT 3
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59316: LD_ADDR_VAR 0 14
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: LD_INT 1
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 1
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 2
59412: NEG
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 2
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 3
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59512: LD_ADDR_VAR 0 15
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 1
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 2
59646: NEG
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59705: LD_ADDR_VAR 0 16
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: NEG
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59898: LD_ADDR_VAR 0 17
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60128: LD_ADDR_VAR 0 18
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60358: LD_ADDR_VAR 0 19
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60588: LD_ADDR_VAR 0 20
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60818: LD_ADDR_VAR 0 21
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61048: LD_ADDR_VAR 0 22
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61278: LD_ADDR_VAR 0 23
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 2
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 2
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 2
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 2
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 2
61454: NEG
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: LD_INT 1
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: LD_INT 2
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: LD_INT 3
61505: NEG
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: LD_INT 2
61516: NEG
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
61558: LD_ADDR_VAR 0 24
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 1
61586: PUSH
61587: LD_INT 0
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 2
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 2
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 2
61734: NEG
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 2
61745: NEG
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 3
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: PUSH
61802: LD_INT 2
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61834: LD_ADDR_VAR 0 25
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: LD_INT 1
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 1
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 2
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 0
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 1
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: LD_INT 1
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: NEG
62034: PUSH
62035: LD_INT 2
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62108: LD_ADDR_VAR 0 26
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: LD_INT 0
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 1
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 0
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 1
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 2
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 2
62307: NEG
62308: PUSH
62309: LD_INT 2
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: LD_INT 3
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 2
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62384: LD_ADDR_VAR 0 27
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 0
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 2
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 2
62560: NEG
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: LD_INT 2
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 1
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: LD_INT 1
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 3
62617: NEG
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62664: LD_ADDR_VAR 0 28
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 0
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 1
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 2
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 2
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 1
62809: PUSH
62810: LD_INT 2
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 0
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: NEG
62852: PUSH
62853: LD_INT 1
62855: NEG
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: NEG
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 3
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: NEG
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 3
62899: NEG
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: NEG
62912: PUSH
62913: LD_INT 2
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62946: LD_ADDR_VAR 0 29
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 0
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 1
63015: NEG
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: LD_INT 2
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 2
63042: NEG
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 1
63050: PUSH
63051: LD_INT 1
63053: NEG
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: LD_INT 0
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 1
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 2
63112: NEG
63113: PUSH
63114: LD_INT 1
63116: NEG
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 2
63124: NEG
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 1
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 3
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 3
63190: NEG
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63225: LD_ADDR_VAR 0 30
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: LD_INT 1
63245: NEG
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: LD_INT 0
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: LD_INT 1
63263: PUSH
63264: LD_INT 1
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: NEG
63307: PUSH
63308: LD_INT 2
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 1
63332: NEG
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 2
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: LD_INT 3
63418: NEG
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 2
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 3
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 2
63457: NEG
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 3
63468: NEG
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63503: LD_ADDR_VAR 0 31
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 1
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: NEG
63573: PUSH
63574: LD_INT 1
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 2
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 2
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: PUSH
63618: LD_INT 1
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 2
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: LD_INT 1
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 2
63668: NEG
63669: PUSH
63670: LD_INT 1
63672: NEG
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 2
63680: NEG
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 2
63692: NEG
63693: PUSH
63694: LD_INT 3
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: LD_INT 3
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 1
63735: NEG
63736: PUSH
63737: LD_INT 2
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63781: LD_ADDR_VAR 0 32
63785: PUSH
63786: LD_INT 0
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: LD_INT 2
63877: NEG
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 0
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 1
63936: NEG
63937: PUSH
63938: LD_INT 1
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: NEG
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: LD_INT 1
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: LD_INT 3
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: LD_INT 2
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 3
63993: PUSH
63994: LD_INT 2
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 2
64003: PUSH
64004: LD_INT 3
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 2
64013: NEG
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 3
64024: NEG
64025: PUSH
64026: LD_INT 1
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64059: LD_ADDR_VAR 0 33
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 0
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 1
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: LD_INT 2
64144: NEG
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 1
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 2
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 2
64214: NEG
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: LD_INT 2
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: NEG
64250: PUSH
64251: LD_INT 3
64253: NEG
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: LD_INT 1
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: NEG
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 3
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64338: LD_ADDR_VAR 0 34
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 1
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 1
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 0
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 0
64431: PUSH
64432: LD_INT 2
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: LD_INT 2
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: LD_INT 2
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: LD_INT 1
64483: NEG
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 2
64494: NEG
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 2
64505: NEG
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: LD_INT 2
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 1
64541: PUSH
64542: LD_INT 2
64544: NEG
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 3
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 2
64572: NEG
64573: PUSH
64574: LD_INT 1
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64618: LD_ADDR_VAR 0 35
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: PUSH
64657: LD_INT 1
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 0
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: LD_INT 1
64676: NEG
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 1
64687: NEG
64688: PUSH
64689: LD_INT 1
64691: NEG
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 2
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: NEG
64710: PUSH
64711: LD_INT 1
64713: NEG
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64730: LD_ADDR_VAR 0 36
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64842: LD_ADDR_VAR 0 37
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 1
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: NEG
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: NEG
64912: PUSH
64913: LD_INT 1
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64954: LD_ADDR_VAR 0 38
64958: PUSH
64959: LD_INT 0
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 0
64971: PUSH
64972: LD_INT 1
64974: NEG
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 0
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 1
65012: NEG
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 2
65035: PUSH
65036: LD_INT 1
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 2
65045: NEG
65046: PUSH
65047: LD_INT 1
65049: NEG
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65066: LD_ADDR_VAR 0 39
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 1
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 2
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65178: LD_ADDR_VAR 0 40
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 0
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 0
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 0
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: LD_INT 1
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65290: LD_ADDR_VAR 0 41
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 0
65307: PUSH
65308: LD_INT 1
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: LD_INT 0
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 1
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: NEG
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 2
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 2
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 1
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 0
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 2
65468: NEG
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 2
65480: NEG
65481: PUSH
65482: LD_INT 3
65484: NEG
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 3
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: LD_INT 2
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 3
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: LD_INT 3
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 2
65553: NEG
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 3
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 3
65587: NEG
65588: PUSH
65589: LD_INT 2
65591: NEG
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: LD_INT 3
65603: NEG
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65640: LD_ADDR_VAR 0 42
65644: PUSH
65645: LD_INT 0
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 1
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: LD_INT 0
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 1
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 2
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 2
65765: PUSH
65766: LD_INT 2
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 2
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 2
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 2
65806: NEG
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 2
65818: NEG
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: LD_INT 3
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 3
65876: PUSH
65877: LD_INT 2
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 3
65886: PUSH
65887: LD_INT 3
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 2
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: LD_INT 3
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: LD_INT 3
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 3
65937: NEG
65938: PUSH
65939: LD_INT 2
65941: NEG
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: NEG
65950: PUSH
65951: LD_INT 3
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65990: LD_ADDR_VAR 0 43
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: LD_INT 0
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: NEG
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: LD_INT 2
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: LD_INT 2
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: LD_INT 1
66097: NEG
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 1
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 0
66135: PUSH
66136: LD_INT 2
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: LD_INT 1
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 2
66156: NEG
66157: PUSH
66158: LD_INT 0
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 2
66167: NEG
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: LD_INT 3
66183: NEG
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: LD_INT 3
66194: NEG
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: PUSH
66203: LD_INT 2
66205: NEG
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 1
66244: PUSH
66245: LD_INT 3
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: LD_INT 3
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 2
66275: NEG
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: LD_INT 0
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 3
66297: NEG
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66338: LD_ADDR_VAR 0 44
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 1
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 2
66452: PUSH
66453: LD_INT 1
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 2
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 2
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 2
66493: NEG
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 2
66516: NEG
66517: PUSH
66518: LD_INT 2
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 3
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 3
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: PUSH
66582: LD_INT 3
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 2
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 2
66601: NEG
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 3
66612: NEG
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 3
66623: NEG
66624: PUSH
66625: LD_INT 1
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 3
66635: NEG
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 3
66647: NEG
66648: PUSH
66649: LD_INT 3
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66688: LD_ADDR_VAR 0 45
66692: PUSH
66693: LD_INT 0
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: EMPTY
66711: LIST
66712: LIST
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: LD_INT 0
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: LD_INT 1
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 1
66757: NEG
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: NEG
66770: PUSH
66771: LD_INT 2
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 0
66781: PUSH
66782: LD_INT 2
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: LD_INT 1
66795: NEG
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: PUSH
66804: LD_INT 1
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 2
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: LD_INT 2
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 0
66833: PUSH
66834: LD_INT 2
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 1
66843: NEG
66844: PUSH
66845: LD_INT 1
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 2
66854: NEG
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 2
66866: NEG
66867: PUSH
66868: LD_INT 2
66870: NEG
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 2
66878: NEG
66879: PUSH
66880: LD_INT 3
66882: NEG
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: LD_INT 3
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: PUSH
66914: LD_INT 2
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: LD_INT 3
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 3
66985: NEG
66986: PUSH
66987: LD_INT 2
66989: NEG
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 3
66997: NEG
66998: PUSH
66999: LD_INT 3
67001: NEG
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67038: LD_ADDR_VAR 0 46
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: LD_INT 0
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_INT 1
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: NEG
67097: PUSH
67098: LD_INT 0
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: LD_INT 2
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 0
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 2
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 2
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: NEG
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 2
67204: NEG
67205: PUSH
67206: LD_INT 0
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 2
67215: NEG
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 3
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 3
67242: NEG
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 1
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: LD_INT 3
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: PUSH
67280: LD_INT 3
67282: PUSH
67283: LD_INT 1
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 1
67292: PUSH
67293: LD_INT 3
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 3
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 3
67334: NEG
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 3
67345: NEG
67346: PUSH
67347: LD_INT 1
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67386: LD_ADDR_VAR 0 47
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: LD_INT 1
67406: NEG
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: LD_INT 0
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 1
67455: NEG
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: EMPTY
67474: LIST
67475: LIST
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 2
67501: NEG
67502: PUSH
67503: LD_INT 1
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 2
67513: NEG
67514: PUSH
67515: LD_INT 2
67517: NEG
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67537: LD_ADDR_VAR 0 48
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 1
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 1
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: NEG
67596: PUSH
67597: LD_INT 0
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: NEG
67619: PUSH
67620: LD_INT 2
67622: NEG
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: LD_INT 2
67633: NEG
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: LD_INT 1
67644: NEG
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: LD_INT 0
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: LD_INT 1
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67684: LD_ADDR_VAR 0 49
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: PUSH
67723: LD_INT 1
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: LD_INT 1
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: LD_INT 0
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 1
67753: NEG
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 1
67768: NEG
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: LD_INT 0
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: LD_INT 2
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67828: LD_ADDR_VAR 0 50
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: LD_INT 1
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 2
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: LD_INT 1
67929: PUSH
67930: LD_INT 2
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: LD_INT 2
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: LIST
67963: LIST
67964: LIST
67965: LIST
67966: LIST
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67972: LD_ADDR_VAR 0 51
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: LD_INT 0
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 0
67989: PUSH
67990: LD_INT 1
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 1
68000: PUSH
68001: LD_INT 0
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: PUSH
68011: LD_INT 1
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: NEG
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: NEG
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 1
68053: PUSH
68054: LD_INT 2
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 2
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 1
68073: NEG
68074: PUSH
68075: LD_INT 1
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 2
68095: NEG
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68119: LD_ADDR_VAR 0 52
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: LD_INT 0
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: LD_INT 1
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 1
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: PUSH
68175: LD_INT 1
68177: NEG
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: LD_INT 1
68192: NEG
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: LD_INT 2
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: LD_INT 0
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 2
68246: NEG
68247: PUSH
68248: LD_INT 2
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68270: LD_ADDR_VAR 0 53
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 1
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: LD_INT 1
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 1
68339: NEG
68340: PUSH
68341: LD_INT 1
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: LD_INT 2
68355: NEG
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 2
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 1
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: LD_INT 1
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 1
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68500: LD_ADDR_VAR 0 54
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 0
68517: PUSH
68518: LD_INT 1
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 1
68538: PUSH
68539: LD_INT 1
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 0
68548: PUSH
68549: LD_INT 1
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: NEG
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: NEG
68582: PUSH
68583: LD_INT 2
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: LD_INT 1
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: LD_INT 1
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 1
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: LD_INT 1
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 2
68687: NEG
68688: PUSH
68689: LD_INT 1
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: LD_INT 2
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: LIST
68719: LIST
68720: LIST
68721: LIST
68722: LIST
68723: LIST
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68730: LD_ADDR_VAR 0 55
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: LD_INT 0
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 1
68750: NEG
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 1
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: LD_INT 1
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 1
68811: NEG
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: LD_INT 1
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: LD_INT 2
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 1
68875: PUSH
68876: LD_INT 2
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: LD_INT 2
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 1
68895: NEG
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 2
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 2
68929: NEG
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68960: LD_ADDR_VAR 0 56
68964: PUSH
68965: LD_INT 0
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 0
68977: PUSH
68978: LD_INT 1
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 0
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: EMPTY
69003: LIST
69004: LIST
69005: PUSH
69006: LD_INT 0
69008: PUSH
69009: LD_INT 1
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 1
69018: NEG
69019: PUSH
69020: LD_INT 0
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 1
69041: NEG
69042: PUSH
69043: LD_INT 2
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_INT 2
69056: NEG
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 2
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 2
69085: PUSH
69086: LD_INT 1
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 2
69095: PUSH
69096: LD_INT 2
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 1
69105: PUSH
69106: LD_INT 2
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 0
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 1
69125: NEG
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 2
69136: NEG
69137: PUSH
69138: LD_INT 0
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: LD_INT 2
69163: NEG
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69190: LD_ADDR_VAR 0 57
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 1
69218: PUSH
69219: LD_INT 0
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 1
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: NEG
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: LD_INT 1
69263: NEG
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: LD_INT 2
69275: NEG
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: LD_INT 2
69286: NEG
69287: PUSH
69288: EMPTY
69289: LIST
69290: LIST
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: LD_INT 1
69297: NEG
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: PUSH
69303: LD_INT 2
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 2
69315: PUSH
69316: LD_INT 1
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: LD_INT 2
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 1
69335: PUSH
69336: LD_INT 2
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: LD_INT 2
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: LD_INT 1
69355: NEG
69356: PUSH
69357: LD_INT 1
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 2
69366: NEG
69367: PUSH
69368: LD_INT 0
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 2
69377: NEG
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 2
69389: NEG
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69420: LD_ADDR_VAR 0 58
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: LD_INT 0
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: LD_INT 0
69437: PUSH
69438: LD_INT 1
69440: NEG
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: LD_INT 0
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 1
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: LD_INT 1
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 1
69501: NEG
69502: PUSH
69503: LD_INT 2
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: LD_INT 2
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 1
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: LD_INT 0
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 2
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: PUSH
69566: LD_INT 2
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 0
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 1
69585: NEG
69586: PUSH
69587: LD_INT 1
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 2
69596: NEG
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 2
69607: NEG
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: LD_INT 2
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69650: LD_ADDR_VAR 0 59
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 1
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69738: LD_ADDR_VAR 0 60
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 1
69766: PUSH
69767: LD_INT 0
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PUSH
69774: LD_INT 1
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 0
69786: PUSH
69787: LD_INT 1
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 1
69796: NEG
69797: PUSH
69798: LD_INT 0
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: LD_INT 1
69811: NEG
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69826: LD_ADDR_VAR 0 61
69830: PUSH
69831: LD_INT 0
69833: PUSH
69834: LD_INT 0
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 0
69843: PUSH
69844: LD_INT 1
69846: NEG
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 1
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: LD_INT 1
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 0
69874: PUSH
69875: LD_INT 1
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 1
69884: NEG
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: LD_INT 1
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69914: LD_ADDR_VAR 0 62
69918: PUSH
69919: LD_INT 0
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: LD_INT 0
69931: PUSH
69932: LD_INT 1
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 1
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 1
69952: PUSH
69953: LD_INT 1
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: PUSH
69960: LD_INT 0
69962: PUSH
69963: LD_INT 1
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: NEG
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70002: LD_ADDR_VAR 0 63
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: LD_INT 1
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 1
70040: PUSH
70041: LD_INT 1
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 0
70050: PUSH
70051: LD_INT 1
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 1
70060: NEG
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: NEG
70072: PUSH
70073: LD_INT 1
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70090: LD_ADDR_VAR 0 64
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 1
70110: NEG
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 1
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 1
70128: PUSH
70129: LD_INT 1
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 1
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 1
70148: NEG
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: ST_TO_ADDR
// end ; 1 :
70178: GO 76075
70180: LD_INT 1
70182: DOUBLE
70183: EQUAL
70184: IFTRUE 70188
70186: GO 72811
70188: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70189: LD_ADDR_VAR 0 11
70193: PUSH
70194: LD_INT 1
70196: NEG
70197: PUSH
70198: LD_INT 3
70200: NEG
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 0
70208: PUSH
70209: LD_INT 3
70211: NEG
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 1
70219: PUSH
70220: LD_INT 2
70222: NEG
70223: PUSH
70224: EMPTY
70225: LIST
70226: LIST
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: LIST
70232: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70233: LD_ADDR_VAR 0 12
70237: PUSH
70238: LD_INT 2
70240: PUSH
70241: LD_INT 1
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 3
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: PUSH
70259: LD_INT 3
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: LIST
70273: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70274: LD_ADDR_VAR 0 13
70278: PUSH
70279: LD_INT 3
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 3
70291: PUSH
70292: LD_INT 3
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: LD_INT 3
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: LIST
70313: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70314: LD_ADDR_VAR 0 14
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: LD_INT 3
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: LD_INT 3
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 1
70341: NEG
70342: PUSH
70343: LD_INT 2
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: LIST
70354: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70355: LD_ADDR_VAR 0 15
70359: PUSH
70360: LD_INT 2
70362: NEG
70363: PUSH
70364: LD_INT 1
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 3
70373: NEG
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 3
70384: NEG
70385: PUSH
70386: LD_INT 1
70388: NEG
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: LIST
70398: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70399: LD_ADDR_VAR 0 16
70403: PUSH
70404: LD_INT 2
70406: NEG
70407: PUSH
70408: LD_INT 3
70410: NEG
70411: PUSH
70412: EMPTY
70413: LIST
70414: LIST
70415: PUSH
70416: LD_INT 3
70418: NEG
70419: PUSH
70420: LD_INT 2
70422: NEG
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 3
70430: NEG
70431: PUSH
70432: LD_INT 3
70434: NEG
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70445: LD_ADDR_VAR 0 17
70449: PUSH
70450: LD_INT 1
70452: NEG
70453: PUSH
70454: LD_INT 3
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: LD_INT 3
70467: NEG
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: LD_INT 2
70478: NEG
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: LIST
70488: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70489: LD_ADDR_VAR 0 18
70493: PUSH
70494: LD_INT 2
70496: PUSH
70497: LD_INT 1
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 3
70507: PUSH
70508: LD_INT 0
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 3
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: LIST
70529: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70530: LD_ADDR_VAR 0 19
70534: PUSH
70535: LD_INT 3
70537: PUSH
70538: LD_INT 2
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 3
70547: PUSH
70548: LD_INT 3
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: LD_INT 3
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: EMPTY
70566: LIST
70567: LIST
70568: LIST
70569: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70570: LD_ADDR_VAR 0 20
70574: PUSH
70575: LD_INT 1
70577: PUSH
70578: LD_INT 3
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: LD_INT 3
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: LD_INT 2
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: LIST
70610: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70611: LD_ADDR_VAR 0 21
70615: PUSH
70616: LD_INT 2
70618: NEG
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 3
70629: NEG
70630: PUSH
70631: LD_INT 0
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 3
70640: NEG
70641: PUSH
70642: LD_INT 1
70644: NEG
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: LIST
70654: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70655: LD_ADDR_VAR 0 22
70659: PUSH
70660: LD_INT 2
70662: NEG
70663: PUSH
70664: LD_INT 3
70666: NEG
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 3
70674: NEG
70675: PUSH
70676: LD_INT 2
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 3
70686: NEG
70687: PUSH
70688: LD_INT 3
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: LIST
70700: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
70701: LD_ADDR_VAR 0 23
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: LD_INT 3
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 1
70719: NEG
70720: PUSH
70721: LD_INT 4
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 1
70731: PUSH
70732: LD_INT 3
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: LIST
70744: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70745: LD_ADDR_VAR 0 24
70749: PUSH
70750: LD_INT 3
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 3
70762: PUSH
70763: LD_INT 1
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 4
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: LIST
70785: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70786: LD_ADDR_VAR 0 25
70790: PUSH
70791: LD_INT 3
70793: PUSH
70794: LD_INT 3
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 4
70803: PUSH
70804: LD_INT 3
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 3
70813: PUSH
70814: LD_INT 4
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: LIST
70825: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70826: LD_ADDR_VAR 0 26
70830: PUSH
70831: LD_INT 0
70833: PUSH
70834: LD_INT 3
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 1
70843: PUSH
70844: LD_INT 4
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 1
70853: NEG
70854: PUSH
70855: LD_INT 3
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: LIST
70866: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70867: LD_ADDR_VAR 0 27
70871: PUSH
70872: LD_INT 3
70874: NEG
70875: PUSH
70876: LD_INT 0
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 3
70885: NEG
70886: PUSH
70887: LD_INT 1
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 4
70896: NEG
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: LIST
70910: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70911: LD_ADDR_VAR 0 28
70915: PUSH
70916: LD_INT 3
70918: NEG
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: LD_INT 4
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 4
70942: NEG
70943: PUSH
70944: LD_INT 3
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70957: LD_ADDR_VAR 0 29
70961: PUSH
70962: LD_INT 1
70964: NEG
70965: PUSH
70966: LD_INT 3
70968: NEG
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 0
70976: PUSH
70977: LD_INT 3
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 1
70987: PUSH
70988: LD_INT 2
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 1
70998: NEG
70999: PUSH
71000: LD_INT 4
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 0
71010: PUSH
71011: LD_INT 4
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 1
71021: PUSH
71022: LD_INT 3
71024: NEG
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 1
71032: NEG
71033: PUSH
71034: LD_INT 5
71036: NEG
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: LD_INT 5
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 1
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 1
71066: NEG
71067: PUSH
71068: LD_INT 6
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: LD_INT 6
71081: NEG
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: LD_INT 1
71089: PUSH
71090: LD_INT 5
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71112: LD_ADDR_VAR 0 30
71116: PUSH
71117: LD_INT 2
71119: PUSH
71120: LD_INT 1
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 3
71130: PUSH
71131: LD_INT 0
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 3
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 3
71150: PUSH
71151: LD_INT 1
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 4
71161: PUSH
71162: LD_INT 0
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PUSH
71169: LD_INT 4
71171: PUSH
71172: LD_INT 1
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: LD_INT 4
71181: PUSH
71182: LD_INT 1
71184: NEG
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 5
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 5
71202: PUSH
71203: LD_INT 1
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 5
71212: PUSH
71213: LD_INT 1
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 6
71223: PUSH
71224: LD_INT 0
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 6
71233: PUSH
71234: LD_INT 1
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71255: LD_ADDR_VAR 0 31
71259: PUSH
71260: LD_INT 3
71262: PUSH
71263: LD_INT 2
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 3
71272: PUSH
71273: LD_INT 3
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 2
71282: PUSH
71283: LD_INT 3
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 4
71292: PUSH
71293: LD_INT 3
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 4
71302: PUSH
71303: LD_INT 4
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 3
71312: PUSH
71313: LD_INT 4
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 5
71322: PUSH
71323: LD_INT 4
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 5
71332: PUSH
71333: LD_INT 5
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 4
71342: PUSH
71343: LD_INT 5
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 6
71352: PUSH
71353: LD_INT 5
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 6
71362: PUSH
71363: LD_INT 6
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: LD_INT 5
71372: PUSH
71373: LD_INT 6
71375: PUSH
71376: EMPTY
71377: LIST
71378: LIST
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71394: LD_ADDR_VAR 0 32
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: LD_INT 3
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 3
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 1
71421: NEG
71422: PUSH
71423: LD_INT 2
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: LD_INT 4
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: LD_INT 4
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 1
71452: NEG
71453: PUSH
71454: LD_INT 3
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 1
71463: PUSH
71464: LD_INT 5
71466: PUSH
71467: EMPTY
71468: LIST
71469: LIST
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: LD_INT 5
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: LD_INT 4
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: LD_INT 6
71497: PUSH
71498: EMPTY
71499: LIST
71500: LIST
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 6
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: PUSH
71512: LD_INT 1
71514: NEG
71515: PUSH
71516: LD_INT 5
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
71537: LD_ADDR_VAR 0 33
71541: PUSH
71542: LD_INT 2
71544: NEG
71545: PUSH
71546: LD_INT 1
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 3
71555: NEG
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: NEG
71567: PUSH
71568: LD_INT 1
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: NEG
71579: PUSH
71580: LD_INT 1
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 4
71589: NEG
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 4
71600: NEG
71601: PUSH
71602: LD_INT 1
71604: NEG
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PUSH
71610: LD_INT 4
71612: NEG
71613: PUSH
71614: LD_INT 1
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 5
71623: NEG
71624: PUSH
71625: LD_INT 0
71627: PUSH
71628: EMPTY
71629: LIST
71630: LIST
71631: PUSH
71632: LD_INT 5
71634: NEG
71635: PUSH
71636: LD_INT 1
71638: NEG
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 5
71646: NEG
71647: PUSH
71648: LD_INT 1
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 6
71657: NEG
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: LD_INT 6
71668: NEG
71669: PUSH
71670: LD_INT 1
71672: NEG
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
71692: LD_ADDR_VAR 0 34
71696: PUSH
71697: LD_INT 2
71699: NEG
71700: PUSH
71701: LD_INT 3
71703: NEG
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 3
71711: NEG
71712: PUSH
71713: LD_INT 2
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 3
71723: NEG
71724: PUSH
71725: LD_INT 3
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 3
71735: NEG
71736: PUSH
71737: LD_INT 4
71739: NEG
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 4
71747: NEG
71748: PUSH
71749: LD_INT 3
71751: NEG
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 4
71759: NEG
71760: PUSH
71761: LD_INT 4
71763: NEG
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 4
71771: NEG
71772: PUSH
71773: LD_INT 5
71775: NEG
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 5
71783: NEG
71784: PUSH
71785: LD_INT 4
71787: NEG
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 5
71795: NEG
71796: PUSH
71797: LD_INT 5
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 5
71807: NEG
71808: PUSH
71809: LD_INT 6
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 6
71819: NEG
71820: PUSH
71821: LD_INT 5
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 6
71831: NEG
71832: PUSH
71833: LD_INT 6
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: LIST
71849: LIST
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71855: LD_ADDR_VAR 0 41
71859: PUSH
71860: LD_INT 0
71862: PUSH
71863: LD_INT 2
71865: NEG
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 1
71873: NEG
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 1
71885: PUSH
71886: LD_INT 2
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: LIST
71898: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71899: LD_ADDR_VAR 0 42
71903: PUSH
71904: LD_INT 2
71906: PUSH
71907: LD_INT 0
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 2
71916: PUSH
71917: LD_INT 1
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 3
71927: PUSH
71928: LD_INT 1
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: LIST
71939: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71940: LD_ADDR_VAR 0 43
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: LD_INT 2
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 3
71957: PUSH
71958: LD_INT 2
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: LD_INT 2
71967: PUSH
71968: LD_INT 3
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: LIST
71979: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71980: LD_ADDR_VAR 0 44
71984: PUSH
71985: LD_INT 0
71987: PUSH
71988: LD_INT 2
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 1
71997: PUSH
71998: LD_INT 3
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: PUSH
72005: LD_INT 1
72007: NEG
72008: PUSH
72009: LD_INT 2
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: LIST
72020: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72021: LD_ADDR_VAR 0 45
72025: PUSH
72026: LD_INT 2
72028: NEG
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 2
72039: NEG
72040: PUSH
72041: LD_INT 1
72043: PUSH
72044: EMPTY
72045: LIST
72046: LIST
72047: PUSH
72048: LD_INT 3
72050: NEG
72051: PUSH
72052: LD_INT 1
72054: NEG
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: LIST
72064: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72065: LD_ADDR_VAR 0 46
72069: PUSH
72070: LD_INT 2
72072: NEG
72073: PUSH
72074: LD_INT 2
72076: NEG
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 2
72084: NEG
72085: PUSH
72086: LD_INT 3
72088: NEG
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 3
72096: NEG
72097: PUSH
72098: LD_INT 2
72100: NEG
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: LIST
72110: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72111: LD_ADDR_VAR 0 47
72115: PUSH
72116: LD_INT 2
72118: NEG
72119: PUSH
72120: LD_INT 3
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 1
72130: NEG
72131: PUSH
72132: LD_INT 3
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72144: LD_ADDR_VAR 0 48
72148: PUSH
72149: LD_INT 1
72151: PUSH
72152: LD_INT 2
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 2
72162: PUSH
72163: LD_INT 1
72165: NEG
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72175: LD_ADDR_VAR 0 49
72179: PUSH
72180: LD_INT 3
72182: PUSH
72183: LD_INT 1
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: LD_INT 2
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72204: LD_ADDR_VAR 0 50
72208: PUSH
72209: LD_INT 2
72211: PUSH
72212: LD_INT 3
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 1
72221: PUSH
72222: LD_INT 3
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72233: LD_ADDR_VAR 0 51
72237: PUSH
72238: LD_INT 1
72240: NEG
72241: PUSH
72242: LD_INT 2
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 2
72251: NEG
72252: PUSH
72253: LD_INT 1
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: EMPTY
72261: LIST
72262: LIST
72263: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72264: LD_ADDR_VAR 0 52
72268: PUSH
72269: LD_INT 3
72271: NEG
72272: PUSH
72273: LD_INT 1
72275: NEG
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 3
72283: NEG
72284: PUSH
72285: LD_INT 2
72287: NEG
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72297: LD_ADDR_VAR 0 53
72301: PUSH
72302: LD_INT 1
72304: NEG
72305: PUSH
72306: LD_INT 3
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 0
72316: PUSH
72317: LD_INT 3
72319: NEG
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: LD_INT 2
72330: NEG
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: LIST
72340: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72341: LD_ADDR_VAR 0 54
72345: PUSH
72346: LD_INT 2
72348: PUSH
72349: LD_INT 1
72351: NEG
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 3
72359: PUSH
72360: LD_INT 0
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 3
72369: PUSH
72370: LD_INT 1
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: EMPTY
72378: LIST
72379: LIST
72380: LIST
72381: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72382: LD_ADDR_VAR 0 55
72386: PUSH
72387: LD_INT 3
72389: PUSH
72390: LD_INT 2
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 3
72399: PUSH
72400: LD_INT 3
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 2
72409: PUSH
72410: LD_INT 3
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: EMPTY
72418: LIST
72419: LIST
72420: LIST
72421: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72422: LD_ADDR_VAR 0 56
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: LD_INT 3
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 1
72449: NEG
72450: PUSH
72451: LD_INT 2
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: LIST
72462: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72463: LD_ADDR_VAR 0 57
72467: PUSH
72468: LD_INT 2
72470: NEG
72471: PUSH
72472: LD_INT 1
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 3
72481: NEG
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 3
72492: NEG
72493: PUSH
72494: LD_INT 1
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: LIST
72506: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72507: LD_ADDR_VAR 0 58
72511: PUSH
72512: LD_INT 2
72514: NEG
72515: PUSH
72516: LD_INT 3
72518: NEG
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 3
72526: NEG
72527: PUSH
72528: LD_INT 2
72530: NEG
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 3
72538: NEG
72539: PUSH
72540: LD_INT 3
72542: NEG
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: LIST
72552: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
72553: LD_ADDR_VAR 0 59
72557: PUSH
72558: LD_INT 1
72560: NEG
72561: PUSH
72562: LD_INT 2
72564: NEG
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 0
72572: PUSH
72573: LD_INT 2
72575: NEG
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 1
72583: PUSH
72584: LD_INT 1
72586: NEG
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: LIST
72596: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72597: LD_ADDR_VAR 0 60
72601: PUSH
72602: LD_INT 1
72604: PUSH
72605: LD_INT 1
72607: NEG
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 2
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: LD_INT 1
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: LIST
72637: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72638: LD_ADDR_VAR 0 61
72642: PUSH
72643: LD_INT 2
72645: PUSH
72646: LD_INT 1
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 2
72655: PUSH
72656: LD_INT 2
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 1
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: LIST
72677: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72678: LD_ADDR_VAR 0 62
72682: PUSH
72683: LD_INT 1
72685: PUSH
72686: LD_INT 2
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: LD_INT 2
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: NEG
72706: PUSH
72707: LD_INT 1
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: LIST
72718: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72719: LD_ADDR_VAR 0 63
72723: PUSH
72724: LD_INT 1
72726: NEG
72727: PUSH
72728: LD_INT 1
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 2
72737: NEG
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 2
72748: NEG
72749: PUSH
72750: LD_INT 1
72752: NEG
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: LIST
72762: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72763: LD_ADDR_VAR 0 64
72767: PUSH
72768: LD_INT 1
72770: NEG
72771: PUSH
72772: LD_INT 2
72774: NEG
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 2
72782: NEG
72783: PUSH
72784: LD_INT 1
72786: NEG
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 2
72794: NEG
72795: PUSH
72796: LD_INT 2
72798: NEG
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: LIST
72808: ST_TO_ADDR
// end ; 2 :
72809: GO 76075
72811: LD_INT 2
72813: DOUBLE
72814: EQUAL
72815: IFTRUE 72819
72817: GO 76074
72819: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72820: LD_ADDR_VAR 0 29
72824: PUSH
72825: LD_INT 4
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 4
72837: PUSH
72838: LD_INT 1
72840: NEG
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 5
72848: PUSH
72849: LD_INT 0
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 5
72858: PUSH
72859: LD_INT 1
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 4
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: LD_INT 0
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 3
72888: PUSH
72889: LD_INT 1
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: LD_INT 3
72899: PUSH
72900: LD_INT 2
72902: NEG
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: LD_INT 5
72910: PUSH
72911: LD_INT 2
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 3
72920: PUSH
72921: LD_INT 3
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 3
72930: PUSH
72931: LD_INT 2
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 4
72940: PUSH
72941: LD_INT 3
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 4
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 3
72960: PUSH
72961: LD_INT 4
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 2
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 4
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 2
73000: PUSH
73001: LD_INT 4
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: LD_INT 4
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 3
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 1
73030: PUSH
73031: LD_INT 4
73033: PUSH
73034: EMPTY
73035: LIST
73036: LIST
73037: PUSH
73038: LD_INT 1
73040: PUSH
73041: LD_INT 5
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 0
73050: PUSH
73051: LD_INT 5
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 1
73060: NEG
73061: PUSH
73062: LD_INT 4
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 3
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: PUSH
73083: LD_INT 5
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 2
73092: NEG
73093: PUSH
73094: LD_INT 3
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 3
73103: NEG
73104: PUSH
73105: LD_INT 0
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 3
73114: NEG
73115: PUSH
73116: LD_INT 1
73118: NEG
73119: PUSH
73120: EMPTY
73121: LIST
73122: LIST
73123: PUSH
73124: LD_INT 2
73126: NEG
73127: PUSH
73128: LD_INT 0
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 2
73137: NEG
73138: PUSH
73139: LD_INT 1
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 3
73148: NEG
73149: PUSH
73150: LD_INT 1
73152: PUSH
73153: EMPTY
73154: LIST
73155: LIST
73156: PUSH
73157: LD_INT 4
73159: NEG
73160: PUSH
73161: LD_INT 0
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 4
73170: NEG
73171: PUSH
73172: LD_INT 1
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 4
73182: NEG
73183: PUSH
73184: LD_INT 2
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 2
73194: NEG
73195: PUSH
73196: LD_INT 2
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 4
73205: NEG
73206: PUSH
73207: LD_INT 4
73209: NEG
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 4
73217: NEG
73218: PUSH
73219: LD_INT 5
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 3
73229: NEG
73230: PUSH
73231: LD_INT 4
73233: NEG
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 3
73241: NEG
73242: PUSH
73243: LD_INT 3
73245: NEG
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 4
73253: NEG
73254: PUSH
73255: LD_INT 3
73257: NEG
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 5
73265: NEG
73266: PUSH
73267: LD_INT 4
73269: NEG
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 5
73277: NEG
73278: PUSH
73279: LD_INT 5
73281: NEG
73282: PUSH
73283: EMPTY
73284: LIST
73285: LIST
73286: PUSH
73287: LD_INT 3
73289: NEG
73290: PUSH
73291: LD_INT 5
73293: NEG
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 5
73301: NEG
73302: PUSH
73303: LD_INT 3
73305: NEG
73306: PUSH
73307: EMPTY
73308: LIST
73309: LIST
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73358: LD_ADDR_VAR 0 30
73362: PUSH
73363: LD_INT 4
73365: PUSH
73366: LD_INT 4
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 4
73375: PUSH
73376: LD_INT 3
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 5
73385: PUSH
73386: LD_INT 4
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 5
73395: PUSH
73396: LD_INT 5
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 4
73405: PUSH
73406: LD_INT 5
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 3
73415: PUSH
73416: LD_INT 4
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 3
73425: PUSH
73426: LD_INT 3
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 5
73435: PUSH
73436: LD_INT 3
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 3
73445: PUSH
73446: LD_INT 5
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 0
73455: PUSH
73456: LD_INT 3
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 0
73465: PUSH
73466: LD_INT 2
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 1
73475: PUSH
73476: LD_INT 3
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 1
73485: PUSH
73486: LD_INT 4
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 0
73495: PUSH
73496: LD_INT 4
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 1
73505: NEG
73506: PUSH
73507: LD_INT 3
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 1
73516: NEG
73517: PUSH
73518: LD_INT 2
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 2
73527: PUSH
73528: LD_INT 4
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 2
73537: NEG
73538: PUSH
73539: LD_INT 2
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 4
73548: NEG
73549: PUSH
73550: LD_INT 0
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 4
73559: NEG
73560: PUSH
73561: LD_INT 1
73563: NEG
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 3
73571: NEG
73572: PUSH
73573: LD_INT 0
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: LD_INT 3
73582: NEG
73583: PUSH
73584: LD_INT 1
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 4
73593: NEG
73594: PUSH
73595: LD_INT 1
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 5
73604: NEG
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 5
73615: NEG
73616: PUSH
73617: LD_INT 1
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 5
73627: NEG
73628: PUSH
73629: LD_INT 2
73631: NEG
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 3
73639: NEG
73640: PUSH
73641: LD_INT 2
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 3
73650: NEG
73651: PUSH
73652: LD_INT 3
73654: NEG
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 3
73662: NEG
73663: PUSH
73664: LD_INT 4
73666: NEG
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 2
73674: NEG
73675: PUSH
73676: LD_INT 3
73678: NEG
73679: PUSH
73680: EMPTY
73681: LIST
73682: LIST
73683: PUSH
73684: LD_INT 2
73686: NEG
73687: PUSH
73688: LD_INT 2
73690: NEG
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 3
73698: NEG
73699: PUSH
73700: LD_INT 2
73702: NEG
73703: PUSH
73704: EMPTY
73705: LIST
73706: LIST
73707: PUSH
73708: LD_INT 4
73710: NEG
73711: PUSH
73712: LD_INT 3
73714: NEG
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 4
73722: NEG
73723: PUSH
73724: LD_INT 4
73726: NEG
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 2
73734: NEG
73735: PUSH
73736: LD_INT 4
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 4
73746: NEG
73747: PUSH
73748: LD_INT 2
73750: NEG
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 0
73758: PUSH
73759: LD_INT 4
73761: NEG
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 0
73769: PUSH
73770: LD_INT 5
73772: NEG
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 1
73780: PUSH
73781: LD_INT 4
73783: NEG
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 1
73791: PUSH
73792: LD_INT 3
73794: NEG
73795: PUSH
73796: EMPTY
73797: LIST
73798: LIST
73799: PUSH
73800: LD_INT 0
73802: PUSH
73803: LD_INT 3
73805: NEG
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 1
73813: NEG
73814: PUSH
73815: LD_INT 4
73817: NEG
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 1
73825: NEG
73826: PUSH
73827: LD_INT 5
73829: NEG
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 2
73837: PUSH
73838: LD_INT 3
73840: NEG
73841: PUSH
73842: EMPTY
73843: LIST
73844: LIST
73845: PUSH
73846: LD_INT 2
73848: NEG
73849: PUSH
73850: LD_INT 5
73852: NEG
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: LIST
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73905: LD_ADDR_VAR 0 31
73909: PUSH
73910: LD_INT 0
73912: PUSH
73913: LD_INT 4
73915: PUSH
73916: EMPTY
73917: LIST
73918: LIST
73919: PUSH
73920: LD_INT 0
73922: PUSH
73923: LD_INT 3
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: PUSH
73930: LD_INT 1
73932: PUSH
73933: LD_INT 4
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: PUSH
73940: LD_INT 1
73942: PUSH
73943: LD_INT 5
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 0
73952: PUSH
73953: LD_INT 5
73955: PUSH
73956: EMPTY
73957: LIST
73958: LIST
73959: PUSH
73960: LD_INT 1
73962: NEG
73963: PUSH
73964: LD_INT 4
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 1
73973: NEG
73974: PUSH
73975: LD_INT 3
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: LD_INT 2
73984: PUSH
73985: LD_INT 5
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 2
73994: NEG
73995: PUSH
73996: LD_INT 3
73998: PUSH
73999: EMPTY
74000: LIST
74001: LIST
74002: PUSH
74003: LD_INT 3
74005: NEG
74006: PUSH
74007: LD_INT 0
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 3
74016: NEG
74017: PUSH
74018: LD_INT 1
74020: NEG
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 2
74028: NEG
74029: PUSH
74030: LD_INT 0
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 2
74039: NEG
74040: PUSH
74041: LD_INT 1
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 3
74050: NEG
74051: PUSH
74052: LD_INT 1
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 4
74061: NEG
74062: PUSH
74063: LD_INT 0
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 4
74072: NEG
74073: PUSH
74074: LD_INT 1
74076: NEG
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 4
74084: NEG
74085: PUSH
74086: LD_INT 2
74088: NEG
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 2
74096: NEG
74097: PUSH
74098: LD_INT 2
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 4
74107: NEG
74108: PUSH
74109: LD_INT 4
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 4
74119: NEG
74120: PUSH
74121: LD_INT 5
74123: NEG
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: PUSH
74129: LD_INT 3
74131: NEG
74132: PUSH
74133: LD_INT 4
74135: NEG
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: LD_INT 3
74143: NEG
74144: PUSH
74145: LD_INT 3
74147: NEG
74148: PUSH
74149: EMPTY
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 4
74155: NEG
74156: PUSH
74157: LD_INT 3
74159: NEG
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 5
74167: NEG
74168: PUSH
74169: LD_INT 4
74171: NEG
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 5
74179: NEG
74180: PUSH
74181: LD_INT 5
74183: NEG
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: LD_INT 3
74191: NEG
74192: PUSH
74193: LD_INT 5
74195: NEG
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 5
74203: NEG
74204: PUSH
74205: LD_INT 3
74207: NEG
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 0
74215: PUSH
74216: LD_INT 3
74218: NEG
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 0
74226: PUSH
74227: LD_INT 4
74229: NEG
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 1
74237: PUSH
74238: LD_INT 3
74240: NEG
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 1
74248: PUSH
74249: LD_INT 2
74251: NEG
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 0
74259: PUSH
74260: LD_INT 2
74262: NEG
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 1
74270: NEG
74271: PUSH
74272: LD_INT 3
74274: NEG
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 1
74282: NEG
74283: PUSH
74284: LD_INT 4
74286: NEG
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 2
74294: PUSH
74295: LD_INT 2
74297: NEG
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_INT 2
74305: NEG
74306: PUSH
74307: LD_INT 4
74309: NEG
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 4
74317: PUSH
74318: LD_INT 0
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 4
74327: PUSH
74328: LD_INT 1
74330: NEG
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 5
74338: PUSH
74339: LD_INT 0
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: PUSH
74346: LD_INT 5
74348: PUSH
74349: LD_INT 1
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PUSH
74356: LD_INT 4
74358: PUSH
74359: LD_INT 1
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 3
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 3
74378: PUSH
74379: LD_INT 1
74381: NEG
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 3
74389: PUSH
74390: LD_INT 2
74392: NEG
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: PUSH
74398: LD_INT 5
74400: PUSH
74401: LD_INT 2
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: LIST
74422: LIST
74423: LIST
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: LIST
74437: LIST
74438: LIST
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: LIST
74454: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74455: LD_ADDR_VAR 0 32
74459: PUSH
74460: LD_INT 4
74462: NEG
74463: PUSH
74464: LD_INT 0
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 4
74473: NEG
74474: PUSH
74475: LD_INT 1
74477: NEG
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 3
74485: NEG
74486: PUSH
74487: LD_INT 0
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 3
74496: NEG
74497: PUSH
74498: LD_INT 1
74500: PUSH
74501: EMPTY
74502: LIST
74503: LIST
74504: PUSH
74505: LD_INT 4
74507: NEG
74508: PUSH
74509: LD_INT 1
74511: PUSH
74512: EMPTY
74513: LIST
74514: LIST
74515: PUSH
74516: LD_INT 5
74518: NEG
74519: PUSH
74520: LD_INT 0
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 5
74529: NEG
74530: PUSH
74531: LD_INT 1
74533: NEG
74534: PUSH
74535: EMPTY
74536: LIST
74537: LIST
74538: PUSH
74539: LD_INT 5
74541: NEG
74542: PUSH
74543: LD_INT 2
74545: NEG
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: LD_INT 3
74553: NEG
74554: PUSH
74555: LD_INT 2
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: LD_INT 3
74564: NEG
74565: PUSH
74566: LD_INT 3
74568: NEG
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 3
74576: NEG
74577: PUSH
74578: LD_INT 4
74580: NEG
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 2
74588: NEG
74589: PUSH
74590: LD_INT 3
74592: NEG
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: PUSH
74598: LD_INT 2
74600: NEG
74601: PUSH
74602: LD_INT 2
74604: NEG
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PUSH
74610: LD_INT 3
74612: NEG
74613: PUSH
74614: LD_INT 2
74616: NEG
74617: PUSH
74618: EMPTY
74619: LIST
74620: LIST
74621: PUSH
74622: LD_INT 4
74624: NEG
74625: PUSH
74626: LD_INT 3
74628: NEG
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: LD_INT 4
74636: NEG
74637: PUSH
74638: LD_INT 4
74640: NEG
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: PUSH
74646: LD_INT 2
74648: NEG
74649: PUSH
74650: LD_INT 4
74652: NEG
74653: PUSH
74654: EMPTY
74655: LIST
74656: LIST
74657: PUSH
74658: LD_INT 4
74660: NEG
74661: PUSH
74662: LD_INT 2
74664: NEG
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: LD_INT 4
74675: NEG
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 0
74683: PUSH
74684: LD_INT 5
74686: NEG
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 1
74694: PUSH
74695: LD_INT 4
74697: NEG
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: LD_INT 1
74705: PUSH
74706: LD_INT 3
74708: NEG
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 0
74716: PUSH
74717: LD_INT 3
74719: NEG
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 1
74727: NEG
74728: PUSH
74729: LD_INT 4
74731: NEG
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 1
74739: NEG
74740: PUSH
74741: LD_INT 5
74743: NEG
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 2
74751: PUSH
74752: LD_INT 3
74754: NEG
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 2
74762: NEG
74763: PUSH
74764: LD_INT 5
74766: NEG
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: LD_INT 3
74774: PUSH
74775: LD_INT 0
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: PUSH
74782: LD_INT 3
74784: PUSH
74785: LD_INT 1
74787: NEG
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: PUSH
74793: LD_INT 4
74795: PUSH
74796: LD_INT 0
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 4
74805: PUSH
74806: LD_INT 1
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PUSH
74813: LD_INT 3
74815: PUSH
74816: LD_INT 1
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PUSH
74823: LD_INT 2
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: LD_INT 2
74835: PUSH
74836: LD_INT 1
74838: NEG
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_INT 2
74846: PUSH
74847: LD_INT 2
74849: NEG
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 4
74857: PUSH
74858: LD_INT 2
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 4
74867: PUSH
74868: LD_INT 4
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 4
74877: PUSH
74878: LD_INT 3
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 5
74887: PUSH
74888: LD_INT 4
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 5
74897: PUSH
74898: LD_INT 5
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 4
74907: PUSH
74908: LD_INT 5
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PUSH
74915: LD_INT 3
74917: PUSH
74918: LD_INT 4
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: LD_INT 3
74927: PUSH
74928: LD_INT 3
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 5
74937: PUSH
74938: LD_INT 3
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 3
74947: PUSH
74948: LD_INT 5
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75002: LD_ADDR_VAR 0 33
75006: PUSH
75007: LD_INT 4
75009: NEG
75010: PUSH
75011: LD_INT 4
75013: NEG
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 4
75021: NEG
75022: PUSH
75023: LD_INT 5
75025: NEG
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PUSH
75031: LD_INT 3
75033: NEG
75034: PUSH
75035: LD_INT 4
75037: NEG
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: LD_INT 3
75045: NEG
75046: PUSH
75047: LD_INT 3
75049: NEG
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: LD_INT 4
75057: NEG
75058: PUSH
75059: LD_INT 3
75061: NEG
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 5
75069: NEG
75070: PUSH
75071: LD_INT 4
75073: NEG
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 5
75081: NEG
75082: PUSH
75083: LD_INT 5
75085: NEG
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 3
75093: NEG
75094: PUSH
75095: LD_INT 5
75097: NEG
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 5
75105: NEG
75106: PUSH
75107: LD_INT 3
75109: NEG
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: LD_INT 3
75120: NEG
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 0
75128: PUSH
75129: LD_INT 4
75131: NEG
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 1
75139: PUSH
75140: LD_INT 3
75142: NEG
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 1
75150: PUSH
75151: LD_INT 2
75153: NEG
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 0
75161: PUSH
75162: LD_INT 2
75164: NEG
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 1
75172: NEG
75173: PUSH
75174: LD_INT 3
75176: NEG
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 1
75184: NEG
75185: PUSH
75186: LD_INT 4
75188: NEG
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: LD_INT 2
75196: PUSH
75197: LD_INT 2
75199: NEG
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 2
75207: NEG
75208: PUSH
75209: LD_INT 4
75211: NEG
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_INT 4
75219: PUSH
75220: LD_INT 0
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: LD_INT 4
75229: PUSH
75230: LD_INT 1
75232: NEG
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 5
75240: PUSH
75241: LD_INT 0
75243: PUSH
75244: EMPTY
75245: LIST
75246: LIST
75247: PUSH
75248: LD_INT 5
75250: PUSH
75251: LD_INT 1
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_INT 4
75260: PUSH
75261: LD_INT 1
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: PUSH
75268: LD_INT 3
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 3
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 3
75291: PUSH
75292: LD_INT 2
75294: NEG
75295: PUSH
75296: EMPTY
75297: LIST
75298: LIST
75299: PUSH
75300: LD_INT 5
75302: PUSH
75303: LD_INT 2
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_INT 3
75312: PUSH
75313: LD_INT 3
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 3
75322: PUSH
75323: LD_INT 2
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 4
75332: PUSH
75333: LD_INT 3
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 4
75342: PUSH
75343: LD_INT 4
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: LD_INT 3
75352: PUSH
75353: LD_INT 4
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: LD_INT 2
75362: PUSH
75363: LD_INT 3
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: LD_INT 2
75372: PUSH
75373: LD_INT 2
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 4
75382: PUSH
75383: LD_INT 2
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 2
75392: PUSH
75393: LD_INT 4
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: LD_INT 0
75402: PUSH
75403: LD_INT 4
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PUSH
75410: LD_INT 0
75412: PUSH
75413: LD_INT 3
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 1
75422: PUSH
75423: LD_INT 4
75425: PUSH
75426: EMPTY
75427: LIST
75428: LIST
75429: PUSH
75430: LD_INT 1
75432: PUSH
75433: LD_INT 5
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 0
75442: PUSH
75443: LD_INT 5
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 1
75452: NEG
75453: PUSH
75454: LD_INT 4
75456: PUSH
75457: EMPTY
75458: LIST
75459: LIST
75460: PUSH
75461: LD_INT 1
75463: NEG
75464: PUSH
75465: LD_INT 3
75467: PUSH
75468: EMPTY
75469: LIST
75470: LIST
75471: PUSH
75472: LD_INT 2
75474: PUSH
75475: LD_INT 5
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PUSH
75482: LD_INT 2
75484: NEG
75485: PUSH
75486: LD_INT 3
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
75540: LD_ADDR_VAR 0 34
75544: PUSH
75545: LD_INT 0
75547: PUSH
75548: LD_INT 4
75550: NEG
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 0
75558: PUSH
75559: LD_INT 5
75561: NEG
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: LD_INT 4
75572: NEG
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 1
75580: PUSH
75581: LD_INT 3
75583: NEG
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 0
75591: PUSH
75592: LD_INT 3
75594: NEG
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: LD_INT 1
75602: NEG
75603: PUSH
75604: LD_INT 4
75606: NEG
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 1
75614: NEG
75615: PUSH
75616: LD_INT 5
75618: NEG
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: PUSH
75624: LD_INT 2
75626: PUSH
75627: LD_INT 3
75629: NEG
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 2
75637: NEG
75638: PUSH
75639: LD_INT 5
75641: NEG
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 3
75649: PUSH
75650: LD_INT 0
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: LD_INT 3
75659: PUSH
75660: LD_INT 1
75662: NEG
75663: PUSH
75664: EMPTY
75665: LIST
75666: LIST
75667: PUSH
75668: LD_INT 4
75670: PUSH
75671: LD_INT 0
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: PUSH
75678: LD_INT 4
75680: PUSH
75681: LD_INT 1
75683: PUSH
75684: EMPTY
75685: LIST
75686: LIST
75687: PUSH
75688: LD_INT 3
75690: PUSH
75691: LD_INT 1
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 2
75700: PUSH
75701: LD_INT 0
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 2
75710: PUSH
75711: LD_INT 1
75713: NEG
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 2
75721: PUSH
75722: LD_INT 2
75724: NEG
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 4
75732: PUSH
75733: LD_INT 2
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 4
75742: PUSH
75743: LD_INT 4
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 4
75752: PUSH
75753: LD_INT 3
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 5
75762: PUSH
75763: LD_INT 4
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 5
75772: PUSH
75773: LD_INT 5
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PUSH
75780: LD_INT 4
75782: PUSH
75783: LD_INT 5
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 3
75792: PUSH
75793: LD_INT 4
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 3
75802: PUSH
75803: LD_INT 3
75805: PUSH
75806: EMPTY
75807: LIST
75808: LIST
75809: PUSH
75810: LD_INT 5
75812: PUSH
75813: LD_INT 3
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 3
75822: PUSH
75823: LD_INT 5
75825: PUSH
75826: EMPTY
75827: LIST
75828: LIST
75829: PUSH
75830: LD_INT 0
75832: PUSH
75833: LD_INT 3
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PUSH
75840: LD_INT 0
75842: PUSH
75843: LD_INT 2
75845: PUSH
75846: EMPTY
75847: LIST
75848: LIST
75849: PUSH
75850: LD_INT 1
75852: PUSH
75853: LD_INT 3
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 1
75862: PUSH
75863: LD_INT 4
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PUSH
75870: LD_INT 0
75872: PUSH
75873: LD_INT 4
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: PUSH
75880: LD_INT 1
75882: NEG
75883: PUSH
75884: LD_INT 3
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 1
75893: NEG
75894: PUSH
75895: LD_INT 2
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 2
75904: PUSH
75905: LD_INT 4
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: LD_INT 2
75914: NEG
75915: PUSH
75916: LD_INT 2
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: LD_INT 4
75925: NEG
75926: PUSH
75927: LD_INT 0
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 4
75936: NEG
75937: PUSH
75938: LD_INT 1
75940: NEG
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PUSH
75946: LD_INT 3
75948: NEG
75949: PUSH
75950: LD_INT 0
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: LD_INT 3
75959: NEG
75960: PUSH
75961: LD_INT 1
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 4
75970: NEG
75971: PUSH
75972: LD_INT 1
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PUSH
75979: LD_INT 5
75981: NEG
75982: PUSH
75983: LD_INT 0
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PUSH
75990: LD_INT 5
75992: NEG
75993: PUSH
75994: LD_INT 1
75996: NEG
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: PUSH
76002: LD_INT 5
76004: NEG
76005: PUSH
76006: LD_INT 2
76008: NEG
76009: PUSH
76010: EMPTY
76011: LIST
76012: LIST
76013: PUSH
76014: LD_INT 3
76016: NEG
76017: PUSH
76018: LD_INT 2
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PUSH
76025: EMPTY
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: ST_TO_ADDR
// end ; end ;
76072: GO 76075
76074: POP
// case btype of b_depot , b_warehouse :
76075: LD_VAR 0 1
76079: PUSH
76080: LD_INT 0
76082: DOUBLE
76083: EQUAL
76084: IFTRUE 76094
76086: LD_INT 1
76088: DOUBLE
76089: EQUAL
76090: IFTRUE 76094
76092: GO 76295
76094: POP
// case nation of nation_american :
76095: LD_VAR 0 5
76099: PUSH
76100: LD_INT 1
76102: DOUBLE
76103: EQUAL
76104: IFTRUE 76108
76106: GO 76164
76108: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
76109: LD_ADDR_VAR 0 9
76113: PUSH
76114: LD_VAR 0 11
76118: PUSH
76119: LD_VAR 0 12
76123: PUSH
76124: LD_VAR 0 13
76128: PUSH
76129: LD_VAR 0 14
76133: PUSH
76134: LD_VAR 0 15
76138: PUSH
76139: LD_VAR 0 16
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: PUSH
76152: LD_VAR 0 4
76156: PUSH
76157: LD_INT 1
76159: PLUS
76160: ARRAY
76161: ST_TO_ADDR
76162: GO 76293
76164: LD_INT 2
76166: DOUBLE
76167: EQUAL
76168: IFTRUE 76172
76170: GO 76228
76172: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
76173: LD_ADDR_VAR 0 9
76177: PUSH
76178: LD_VAR 0 17
76182: PUSH
76183: LD_VAR 0 18
76187: PUSH
76188: LD_VAR 0 19
76192: PUSH
76193: LD_VAR 0 20
76197: PUSH
76198: LD_VAR 0 21
76202: PUSH
76203: LD_VAR 0 22
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: PUSH
76216: LD_VAR 0 4
76220: PUSH
76221: LD_INT 1
76223: PLUS
76224: ARRAY
76225: ST_TO_ADDR
76226: GO 76293
76228: LD_INT 3
76230: DOUBLE
76231: EQUAL
76232: IFTRUE 76236
76234: GO 76292
76236: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76237: LD_ADDR_VAR 0 9
76241: PUSH
76242: LD_VAR 0 23
76246: PUSH
76247: LD_VAR 0 24
76251: PUSH
76252: LD_VAR 0 25
76256: PUSH
76257: LD_VAR 0 26
76261: PUSH
76262: LD_VAR 0 27
76266: PUSH
76267: LD_VAR 0 28
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: PUSH
76280: LD_VAR 0 4
76284: PUSH
76285: LD_INT 1
76287: PLUS
76288: ARRAY
76289: ST_TO_ADDR
76290: GO 76293
76292: POP
76293: GO 76848
76295: LD_INT 2
76297: DOUBLE
76298: EQUAL
76299: IFTRUE 76309
76301: LD_INT 3
76303: DOUBLE
76304: EQUAL
76305: IFTRUE 76309
76307: GO 76365
76309: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76310: LD_ADDR_VAR 0 9
76314: PUSH
76315: LD_VAR 0 29
76319: PUSH
76320: LD_VAR 0 30
76324: PUSH
76325: LD_VAR 0 31
76329: PUSH
76330: LD_VAR 0 32
76334: PUSH
76335: LD_VAR 0 33
76339: PUSH
76340: LD_VAR 0 34
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: PUSH
76353: LD_VAR 0 4
76357: PUSH
76358: LD_INT 1
76360: PLUS
76361: ARRAY
76362: ST_TO_ADDR
76363: GO 76848
76365: LD_INT 16
76367: DOUBLE
76368: EQUAL
76369: IFTRUE 76427
76371: LD_INT 17
76373: DOUBLE
76374: EQUAL
76375: IFTRUE 76427
76377: LD_INT 18
76379: DOUBLE
76380: EQUAL
76381: IFTRUE 76427
76383: LD_INT 19
76385: DOUBLE
76386: EQUAL
76387: IFTRUE 76427
76389: LD_INT 22
76391: DOUBLE
76392: EQUAL
76393: IFTRUE 76427
76395: LD_INT 20
76397: DOUBLE
76398: EQUAL
76399: IFTRUE 76427
76401: LD_INT 21
76403: DOUBLE
76404: EQUAL
76405: IFTRUE 76427
76407: LD_INT 23
76409: DOUBLE
76410: EQUAL
76411: IFTRUE 76427
76413: LD_INT 24
76415: DOUBLE
76416: EQUAL
76417: IFTRUE 76427
76419: LD_INT 25
76421: DOUBLE
76422: EQUAL
76423: IFTRUE 76427
76425: GO 76483
76427: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76428: LD_ADDR_VAR 0 9
76432: PUSH
76433: LD_VAR 0 35
76437: PUSH
76438: LD_VAR 0 36
76442: PUSH
76443: LD_VAR 0 37
76447: PUSH
76448: LD_VAR 0 38
76452: PUSH
76453: LD_VAR 0 39
76457: PUSH
76458: LD_VAR 0 40
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: PUSH
76471: LD_VAR 0 4
76475: PUSH
76476: LD_INT 1
76478: PLUS
76479: ARRAY
76480: ST_TO_ADDR
76481: GO 76848
76483: LD_INT 6
76485: DOUBLE
76486: EQUAL
76487: IFTRUE 76539
76489: LD_INT 7
76491: DOUBLE
76492: EQUAL
76493: IFTRUE 76539
76495: LD_INT 8
76497: DOUBLE
76498: EQUAL
76499: IFTRUE 76539
76501: LD_INT 13
76503: DOUBLE
76504: EQUAL
76505: IFTRUE 76539
76507: LD_INT 12
76509: DOUBLE
76510: EQUAL
76511: IFTRUE 76539
76513: LD_INT 15
76515: DOUBLE
76516: EQUAL
76517: IFTRUE 76539
76519: LD_INT 11
76521: DOUBLE
76522: EQUAL
76523: IFTRUE 76539
76525: LD_INT 14
76527: DOUBLE
76528: EQUAL
76529: IFTRUE 76539
76531: LD_INT 10
76533: DOUBLE
76534: EQUAL
76535: IFTRUE 76539
76537: GO 76595
76539: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
76540: LD_ADDR_VAR 0 9
76544: PUSH
76545: LD_VAR 0 41
76549: PUSH
76550: LD_VAR 0 42
76554: PUSH
76555: LD_VAR 0 43
76559: PUSH
76560: LD_VAR 0 44
76564: PUSH
76565: LD_VAR 0 45
76569: PUSH
76570: LD_VAR 0 46
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: PUSH
76583: LD_VAR 0 4
76587: PUSH
76588: LD_INT 1
76590: PLUS
76591: ARRAY
76592: ST_TO_ADDR
76593: GO 76848
76595: LD_INT 36
76597: DOUBLE
76598: EQUAL
76599: IFTRUE 76603
76601: GO 76659
76603: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
76604: LD_ADDR_VAR 0 9
76608: PUSH
76609: LD_VAR 0 47
76613: PUSH
76614: LD_VAR 0 48
76618: PUSH
76619: LD_VAR 0 49
76623: PUSH
76624: LD_VAR 0 50
76628: PUSH
76629: LD_VAR 0 51
76633: PUSH
76634: LD_VAR 0 52
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: PUSH
76647: LD_VAR 0 4
76651: PUSH
76652: LD_INT 1
76654: PLUS
76655: ARRAY
76656: ST_TO_ADDR
76657: GO 76848
76659: LD_INT 4
76661: DOUBLE
76662: EQUAL
76663: IFTRUE 76685
76665: LD_INT 5
76667: DOUBLE
76668: EQUAL
76669: IFTRUE 76685
76671: LD_INT 34
76673: DOUBLE
76674: EQUAL
76675: IFTRUE 76685
76677: LD_INT 37
76679: DOUBLE
76680: EQUAL
76681: IFTRUE 76685
76683: GO 76741
76685: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
76686: LD_ADDR_VAR 0 9
76690: PUSH
76691: LD_VAR 0 53
76695: PUSH
76696: LD_VAR 0 54
76700: PUSH
76701: LD_VAR 0 55
76705: PUSH
76706: LD_VAR 0 56
76710: PUSH
76711: LD_VAR 0 57
76715: PUSH
76716: LD_VAR 0 58
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: LIST
76727: LIST
76728: PUSH
76729: LD_VAR 0 4
76733: PUSH
76734: LD_INT 1
76736: PLUS
76737: ARRAY
76738: ST_TO_ADDR
76739: GO 76848
76741: LD_INT 31
76743: DOUBLE
76744: EQUAL
76745: IFTRUE 76791
76747: LD_INT 32
76749: DOUBLE
76750: EQUAL
76751: IFTRUE 76791
76753: LD_INT 33
76755: DOUBLE
76756: EQUAL
76757: IFTRUE 76791
76759: LD_INT 27
76761: DOUBLE
76762: EQUAL
76763: IFTRUE 76791
76765: LD_INT 26
76767: DOUBLE
76768: EQUAL
76769: IFTRUE 76791
76771: LD_INT 28
76773: DOUBLE
76774: EQUAL
76775: IFTRUE 76791
76777: LD_INT 29
76779: DOUBLE
76780: EQUAL
76781: IFTRUE 76791
76783: LD_INT 30
76785: DOUBLE
76786: EQUAL
76787: IFTRUE 76791
76789: GO 76847
76791: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
76792: LD_ADDR_VAR 0 9
76796: PUSH
76797: LD_VAR 0 59
76801: PUSH
76802: LD_VAR 0 60
76806: PUSH
76807: LD_VAR 0 61
76811: PUSH
76812: LD_VAR 0 62
76816: PUSH
76817: LD_VAR 0 63
76821: PUSH
76822: LD_VAR 0 64
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: PUSH
76835: LD_VAR 0 4
76839: PUSH
76840: LD_INT 1
76842: PLUS
76843: ARRAY
76844: ST_TO_ADDR
76845: GO 76848
76847: POP
// temp_list2 = [ ] ;
76848: LD_ADDR_VAR 0 10
76852: PUSH
76853: EMPTY
76854: ST_TO_ADDR
// for i in temp_list do
76855: LD_ADDR_VAR 0 8
76859: PUSH
76860: LD_VAR 0 9
76864: PUSH
76865: FOR_IN
76866: IFFALSE 76918
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76868: LD_ADDR_VAR 0 10
76872: PUSH
76873: LD_VAR 0 10
76877: PUSH
76878: LD_VAR 0 8
76882: PUSH
76883: LD_INT 1
76885: ARRAY
76886: PUSH
76887: LD_VAR 0 2
76891: PLUS
76892: PUSH
76893: LD_VAR 0 8
76897: PUSH
76898: LD_INT 2
76900: ARRAY
76901: PUSH
76902: LD_VAR 0 3
76906: PLUS
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: EMPTY
76913: LIST
76914: ADD
76915: ST_TO_ADDR
76916: GO 76865
76918: POP
76919: POP
// result = temp_list2 ;
76920: LD_ADDR_VAR 0 7
76924: PUSH
76925: LD_VAR 0 10
76929: ST_TO_ADDR
// end ;
76930: LD_VAR 0 7
76934: RET
// export function EnemyInRange ( unit , dist ) ; begin
76935: LD_INT 0
76937: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76938: LD_ADDR_VAR 0 3
76942: PUSH
76943: LD_VAR 0 1
76947: PPUSH
76948: CALL_OW 255
76952: PPUSH
76953: LD_VAR 0 1
76957: PPUSH
76958: CALL_OW 250
76962: PPUSH
76963: LD_VAR 0 1
76967: PPUSH
76968: CALL_OW 251
76972: PPUSH
76973: LD_VAR 0 2
76977: PPUSH
76978: CALL 51039 0 4
76982: PUSH
76983: LD_INT 4
76985: ARRAY
76986: ST_TO_ADDR
// end ;
76987: LD_VAR 0 3
76991: RET
// export function PlayerSeeMe ( unit ) ; begin
76992: LD_INT 0
76994: PPUSH
// result := See ( your_side , unit ) ;
76995: LD_ADDR_VAR 0 2
76999: PUSH
77000: LD_OWVAR 2
77004: PPUSH
77005: LD_VAR 0 1
77009: PPUSH
77010: CALL_OW 292
77014: ST_TO_ADDR
// end ;
77015: LD_VAR 0 2
77019: RET
// export function ReverseDir ( unit ) ; begin
77020: LD_INT 0
77022: PPUSH
// if not unit then
77023: LD_VAR 0 1
77027: NOT
77028: IFFALSE 77032
// exit ;
77030: GO 77055
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
77032: LD_ADDR_VAR 0 2
77036: PUSH
77037: LD_VAR 0 1
77041: PPUSH
77042: CALL_OW 254
77046: PUSH
77047: LD_INT 3
77049: PLUS
77050: PUSH
77051: LD_INT 6
77053: MOD
77054: ST_TO_ADDR
// end ;
77055: LD_VAR 0 2
77059: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
77060: LD_INT 0
77062: PPUSH
77063: PPUSH
77064: PPUSH
77065: PPUSH
77066: PPUSH
// if not hexes then
77067: LD_VAR 0 2
77071: NOT
77072: IFFALSE 77076
// exit ;
77074: GO 77224
// dist := 9999 ;
77076: LD_ADDR_VAR 0 5
77080: PUSH
77081: LD_INT 9999
77083: ST_TO_ADDR
// for i = 1 to hexes do
77084: LD_ADDR_VAR 0 4
77088: PUSH
77089: DOUBLE
77090: LD_INT 1
77092: DEC
77093: ST_TO_ADDR
77094: LD_VAR 0 2
77098: PUSH
77099: FOR_TO
77100: IFFALSE 77212
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77102: LD_VAR 0 1
77106: PPUSH
77107: LD_VAR 0 2
77111: PUSH
77112: LD_VAR 0 4
77116: ARRAY
77117: PUSH
77118: LD_INT 1
77120: ARRAY
77121: PPUSH
77122: LD_VAR 0 2
77126: PUSH
77127: LD_VAR 0 4
77131: ARRAY
77132: PUSH
77133: LD_INT 2
77135: ARRAY
77136: PPUSH
77137: CALL_OW 297
77141: PUSH
77142: LD_VAR 0 5
77146: LESS
77147: IFFALSE 77210
// begin hex := hexes [ i ] ;
77149: LD_ADDR_VAR 0 7
77153: PUSH
77154: LD_VAR 0 2
77158: PUSH
77159: LD_VAR 0 4
77163: ARRAY
77164: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77165: LD_ADDR_VAR 0 5
77169: PUSH
77170: LD_VAR 0 1
77174: PPUSH
77175: LD_VAR 0 2
77179: PUSH
77180: LD_VAR 0 4
77184: ARRAY
77185: PUSH
77186: LD_INT 1
77188: ARRAY
77189: PPUSH
77190: LD_VAR 0 2
77194: PUSH
77195: LD_VAR 0 4
77199: ARRAY
77200: PUSH
77201: LD_INT 2
77203: ARRAY
77204: PPUSH
77205: CALL_OW 297
77209: ST_TO_ADDR
// end ; end ;
77210: GO 77099
77212: POP
77213: POP
// result := hex ;
77214: LD_ADDR_VAR 0 3
77218: PUSH
77219: LD_VAR 0 7
77223: ST_TO_ADDR
// end ;
77224: LD_VAR 0 3
77228: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77229: LD_INT 0
77231: PPUSH
77232: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77233: LD_VAR 0 1
77237: NOT
77238: PUSH
77239: LD_VAR 0 1
77243: PUSH
77244: LD_INT 21
77246: PUSH
77247: LD_INT 2
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 23
77256: PUSH
77257: LD_INT 2
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PPUSH
77268: CALL_OW 69
77272: IN
77273: NOT
77274: OR
77275: IFFALSE 77279
// exit ;
77277: GO 77326
// for i = 1 to 3 do
77279: LD_ADDR_VAR 0 3
77283: PUSH
77284: DOUBLE
77285: LD_INT 1
77287: DEC
77288: ST_TO_ADDR
77289: LD_INT 3
77291: PUSH
77292: FOR_TO
77293: IFFALSE 77324
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77295: LD_VAR 0 1
77299: PPUSH
77300: CALL_OW 250
77304: PPUSH
77305: LD_VAR 0 1
77309: PPUSH
77310: CALL_OW 251
77314: PPUSH
77315: LD_INT 1
77317: PPUSH
77318: CALL_OW 453
77322: GO 77292
77324: POP
77325: POP
// end ;
77326: LD_VAR 0 2
77330: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77331: LD_INT 0
77333: PPUSH
77334: PPUSH
77335: PPUSH
77336: PPUSH
77337: PPUSH
77338: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77339: LD_VAR 0 1
77343: NOT
77344: PUSH
77345: LD_VAR 0 2
77349: NOT
77350: OR
77351: PUSH
77352: LD_VAR 0 1
77356: PPUSH
77357: CALL_OW 314
77361: OR
77362: IFFALSE 77366
// exit ;
77364: GO 77807
// x := GetX ( enemy_unit ) ;
77366: LD_ADDR_VAR 0 7
77370: PUSH
77371: LD_VAR 0 2
77375: PPUSH
77376: CALL_OW 250
77380: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77381: LD_ADDR_VAR 0 8
77385: PUSH
77386: LD_VAR 0 2
77390: PPUSH
77391: CALL_OW 251
77395: ST_TO_ADDR
// if not x or not y then
77396: LD_VAR 0 7
77400: NOT
77401: PUSH
77402: LD_VAR 0 8
77406: NOT
77407: OR
77408: IFFALSE 77412
// exit ;
77410: GO 77807
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77412: LD_ADDR_VAR 0 6
77416: PUSH
77417: LD_VAR 0 7
77421: PPUSH
77422: LD_INT 0
77424: PPUSH
77425: LD_INT 4
77427: PPUSH
77428: CALL_OW 272
77432: PUSH
77433: LD_VAR 0 8
77437: PPUSH
77438: LD_INT 0
77440: PPUSH
77441: LD_INT 4
77443: PPUSH
77444: CALL_OW 273
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_VAR 0 7
77457: PPUSH
77458: LD_INT 1
77460: PPUSH
77461: LD_INT 4
77463: PPUSH
77464: CALL_OW 272
77468: PUSH
77469: LD_VAR 0 8
77473: PPUSH
77474: LD_INT 1
77476: PPUSH
77477: LD_INT 4
77479: PPUSH
77480: CALL_OW 273
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_VAR 0 7
77493: PPUSH
77494: LD_INT 2
77496: PPUSH
77497: LD_INT 4
77499: PPUSH
77500: CALL_OW 272
77504: PUSH
77505: LD_VAR 0 8
77509: PPUSH
77510: LD_INT 2
77512: PPUSH
77513: LD_INT 4
77515: PPUSH
77516: CALL_OW 273
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: LD_VAR 0 7
77529: PPUSH
77530: LD_INT 3
77532: PPUSH
77533: LD_INT 4
77535: PPUSH
77536: CALL_OW 272
77540: PUSH
77541: LD_VAR 0 8
77545: PPUSH
77546: LD_INT 3
77548: PPUSH
77549: LD_INT 4
77551: PPUSH
77552: CALL_OW 273
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: PUSH
77561: LD_VAR 0 7
77565: PPUSH
77566: LD_INT 4
77568: PPUSH
77569: LD_INT 4
77571: PPUSH
77572: CALL_OW 272
77576: PUSH
77577: LD_VAR 0 8
77581: PPUSH
77582: LD_INT 4
77584: PPUSH
77585: LD_INT 4
77587: PPUSH
77588: CALL_OW 273
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: PUSH
77597: LD_VAR 0 7
77601: PPUSH
77602: LD_INT 5
77604: PPUSH
77605: LD_INT 4
77607: PPUSH
77608: CALL_OW 272
77612: PUSH
77613: LD_VAR 0 8
77617: PPUSH
77618: LD_INT 5
77620: PPUSH
77621: LD_INT 4
77623: PPUSH
77624: CALL_OW 273
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: LIST
77639: LIST
77640: ST_TO_ADDR
// for i = tmp downto 1 do
77641: LD_ADDR_VAR 0 4
77645: PUSH
77646: DOUBLE
77647: LD_VAR 0 6
77651: INC
77652: ST_TO_ADDR
77653: LD_INT 1
77655: PUSH
77656: FOR_DOWNTO
77657: IFFALSE 77758
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77659: LD_VAR 0 6
77663: PUSH
77664: LD_VAR 0 4
77668: ARRAY
77669: PUSH
77670: LD_INT 1
77672: ARRAY
77673: PPUSH
77674: LD_VAR 0 6
77678: PUSH
77679: LD_VAR 0 4
77683: ARRAY
77684: PUSH
77685: LD_INT 2
77687: ARRAY
77688: PPUSH
77689: CALL_OW 488
77693: NOT
77694: PUSH
77695: LD_VAR 0 6
77699: PUSH
77700: LD_VAR 0 4
77704: ARRAY
77705: PUSH
77706: LD_INT 1
77708: ARRAY
77709: PPUSH
77710: LD_VAR 0 6
77714: PUSH
77715: LD_VAR 0 4
77719: ARRAY
77720: PUSH
77721: LD_INT 2
77723: ARRAY
77724: PPUSH
77725: CALL_OW 428
77729: PUSH
77730: LD_INT 0
77732: NONEQUAL
77733: OR
77734: IFFALSE 77756
// tmp := Delete ( tmp , i ) ;
77736: LD_ADDR_VAR 0 6
77740: PUSH
77741: LD_VAR 0 6
77745: PPUSH
77746: LD_VAR 0 4
77750: PPUSH
77751: CALL_OW 3
77755: ST_TO_ADDR
77756: GO 77656
77758: POP
77759: POP
// j := GetClosestHex ( unit , tmp ) ;
77760: LD_ADDR_VAR 0 5
77764: PUSH
77765: LD_VAR 0 1
77769: PPUSH
77770: LD_VAR 0 6
77774: PPUSH
77775: CALL 77060 0 2
77779: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77780: LD_VAR 0 1
77784: PPUSH
77785: LD_VAR 0 5
77789: PUSH
77790: LD_INT 1
77792: ARRAY
77793: PPUSH
77794: LD_VAR 0 5
77798: PUSH
77799: LD_INT 2
77801: ARRAY
77802: PPUSH
77803: CALL_OW 111
// end ;
77807: LD_VAR 0 3
77811: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77812: LD_INT 0
77814: PPUSH
77815: PPUSH
77816: PPUSH
// uc_side = 0 ;
77817: LD_ADDR_OWVAR 20
77821: PUSH
77822: LD_INT 0
77824: ST_TO_ADDR
// uc_nation = 0 ;
77825: LD_ADDR_OWVAR 21
77829: PUSH
77830: LD_INT 0
77832: ST_TO_ADDR
// InitHc ;
77833: CALL_OW 19
// InitVc ;
77837: CALL_OW 20
// if mastodonts then
77841: LD_VAR 0 6
77845: IFFALSE 77912
// for i = 1 to mastodonts do
77847: LD_ADDR_VAR 0 11
77851: PUSH
77852: DOUBLE
77853: LD_INT 1
77855: DEC
77856: ST_TO_ADDR
77857: LD_VAR 0 6
77861: PUSH
77862: FOR_TO
77863: IFFALSE 77910
// begin vc_chassis := 31 ;
77865: LD_ADDR_OWVAR 37
77869: PUSH
77870: LD_INT 31
77872: ST_TO_ADDR
// vc_control := control_rider ;
77873: LD_ADDR_OWVAR 38
77877: PUSH
77878: LD_INT 4
77880: ST_TO_ADDR
// animal := CreateVehicle ;
77881: LD_ADDR_VAR 0 12
77885: PUSH
77886: CALL_OW 45
77890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77891: LD_VAR 0 12
77895: PPUSH
77896: LD_VAR 0 8
77900: PPUSH
77901: LD_INT 0
77903: PPUSH
77904: CALL 79981 0 3
// end ;
77908: GO 77862
77910: POP
77911: POP
// if horses then
77912: LD_VAR 0 5
77916: IFFALSE 77983
// for i = 1 to horses do
77918: LD_ADDR_VAR 0 11
77922: PUSH
77923: DOUBLE
77924: LD_INT 1
77926: DEC
77927: ST_TO_ADDR
77928: LD_VAR 0 5
77932: PUSH
77933: FOR_TO
77934: IFFALSE 77981
// begin hc_class := 21 ;
77936: LD_ADDR_OWVAR 28
77940: PUSH
77941: LD_INT 21
77943: ST_TO_ADDR
// hc_gallery :=  ;
77944: LD_ADDR_OWVAR 33
77948: PUSH
77949: LD_STRING 
77951: ST_TO_ADDR
// animal := CreateHuman ;
77952: LD_ADDR_VAR 0 12
77956: PUSH
77957: CALL_OW 44
77961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77962: LD_VAR 0 12
77966: PPUSH
77967: LD_VAR 0 8
77971: PPUSH
77972: LD_INT 0
77974: PPUSH
77975: CALL 79981 0 3
// end ;
77979: GO 77933
77981: POP
77982: POP
// if birds then
77983: LD_VAR 0 1
77987: IFFALSE 78054
// for i = 1 to birds do
77989: LD_ADDR_VAR 0 11
77993: PUSH
77994: DOUBLE
77995: LD_INT 1
77997: DEC
77998: ST_TO_ADDR
77999: LD_VAR 0 1
78003: PUSH
78004: FOR_TO
78005: IFFALSE 78052
// begin hc_class = 18 ;
78007: LD_ADDR_OWVAR 28
78011: PUSH
78012: LD_INT 18
78014: ST_TO_ADDR
// hc_gallery =  ;
78015: LD_ADDR_OWVAR 33
78019: PUSH
78020: LD_STRING 
78022: ST_TO_ADDR
// animal := CreateHuman ;
78023: LD_ADDR_VAR 0 12
78027: PUSH
78028: CALL_OW 44
78032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78033: LD_VAR 0 12
78037: PPUSH
78038: LD_VAR 0 8
78042: PPUSH
78043: LD_INT 0
78045: PPUSH
78046: CALL 79981 0 3
// end ;
78050: GO 78004
78052: POP
78053: POP
// if tigers then
78054: LD_VAR 0 2
78058: IFFALSE 78142
// for i = 1 to tigers do
78060: LD_ADDR_VAR 0 11
78064: PUSH
78065: DOUBLE
78066: LD_INT 1
78068: DEC
78069: ST_TO_ADDR
78070: LD_VAR 0 2
78074: PUSH
78075: FOR_TO
78076: IFFALSE 78140
// begin hc_class = class_tiger ;
78078: LD_ADDR_OWVAR 28
78082: PUSH
78083: LD_INT 14
78085: ST_TO_ADDR
// hc_gallery =  ;
78086: LD_ADDR_OWVAR 33
78090: PUSH
78091: LD_STRING 
78093: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78094: LD_ADDR_OWVAR 35
78098: PUSH
78099: LD_INT 7
78101: NEG
78102: PPUSH
78103: LD_INT 7
78105: PPUSH
78106: CALL_OW 12
78110: ST_TO_ADDR
// animal := CreateHuman ;
78111: LD_ADDR_VAR 0 12
78115: PUSH
78116: CALL_OW 44
78120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78121: LD_VAR 0 12
78125: PPUSH
78126: LD_VAR 0 8
78130: PPUSH
78131: LD_INT 0
78133: PPUSH
78134: CALL 79981 0 3
// end ;
78138: GO 78075
78140: POP
78141: POP
// if apemans then
78142: LD_VAR 0 3
78146: IFFALSE 78269
// for i = 1 to apemans do
78148: LD_ADDR_VAR 0 11
78152: PUSH
78153: DOUBLE
78154: LD_INT 1
78156: DEC
78157: ST_TO_ADDR
78158: LD_VAR 0 3
78162: PUSH
78163: FOR_TO
78164: IFFALSE 78267
// begin hc_class = class_apeman ;
78166: LD_ADDR_OWVAR 28
78170: PUSH
78171: LD_INT 12
78173: ST_TO_ADDR
// hc_gallery =  ;
78174: LD_ADDR_OWVAR 33
78178: PUSH
78179: LD_STRING 
78181: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
78182: LD_ADDR_OWVAR 35
78186: PUSH
78187: LD_INT 5
78189: NEG
78190: PPUSH
78191: LD_INT 5
78193: PPUSH
78194: CALL_OW 12
78198: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78199: LD_ADDR_OWVAR 31
78203: PUSH
78204: LD_INT 1
78206: PPUSH
78207: LD_INT 3
78209: PPUSH
78210: CALL_OW 12
78214: PUSH
78215: LD_INT 1
78217: PPUSH
78218: LD_INT 3
78220: PPUSH
78221: CALL_OW 12
78225: PUSH
78226: LD_INT 0
78228: PUSH
78229: LD_INT 0
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: LIST
78236: LIST
78237: ST_TO_ADDR
// animal := CreateHuman ;
78238: LD_ADDR_VAR 0 12
78242: PUSH
78243: CALL_OW 44
78247: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78248: LD_VAR 0 12
78252: PPUSH
78253: LD_VAR 0 8
78257: PPUSH
78258: LD_INT 0
78260: PPUSH
78261: CALL 79981 0 3
// end ;
78265: GO 78163
78267: POP
78268: POP
// if enchidnas then
78269: LD_VAR 0 4
78273: IFFALSE 78340
// for i = 1 to enchidnas do
78275: LD_ADDR_VAR 0 11
78279: PUSH
78280: DOUBLE
78281: LD_INT 1
78283: DEC
78284: ST_TO_ADDR
78285: LD_VAR 0 4
78289: PUSH
78290: FOR_TO
78291: IFFALSE 78338
// begin hc_class = 13 ;
78293: LD_ADDR_OWVAR 28
78297: PUSH
78298: LD_INT 13
78300: ST_TO_ADDR
// hc_gallery =  ;
78301: LD_ADDR_OWVAR 33
78305: PUSH
78306: LD_STRING 
78308: ST_TO_ADDR
// animal := CreateHuman ;
78309: LD_ADDR_VAR 0 12
78313: PUSH
78314: CALL_OW 44
78318: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78319: LD_VAR 0 12
78323: PPUSH
78324: LD_VAR 0 8
78328: PPUSH
78329: LD_INT 0
78331: PPUSH
78332: CALL 79981 0 3
// end ;
78336: GO 78290
78338: POP
78339: POP
// if fishes then
78340: LD_VAR 0 7
78344: IFFALSE 78411
// for i = 1 to fishes do
78346: LD_ADDR_VAR 0 11
78350: PUSH
78351: DOUBLE
78352: LD_INT 1
78354: DEC
78355: ST_TO_ADDR
78356: LD_VAR 0 7
78360: PUSH
78361: FOR_TO
78362: IFFALSE 78409
// begin hc_class = 20 ;
78364: LD_ADDR_OWVAR 28
78368: PUSH
78369: LD_INT 20
78371: ST_TO_ADDR
// hc_gallery =  ;
78372: LD_ADDR_OWVAR 33
78376: PUSH
78377: LD_STRING 
78379: ST_TO_ADDR
// animal := CreateHuman ;
78380: LD_ADDR_VAR 0 12
78384: PUSH
78385: CALL_OW 44
78389: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78390: LD_VAR 0 12
78394: PPUSH
78395: LD_VAR 0 9
78399: PPUSH
78400: LD_INT 0
78402: PPUSH
78403: CALL 79981 0 3
// end ;
78407: GO 78361
78409: POP
78410: POP
// end ;
78411: LD_VAR 0 10
78415: RET
// export function WantHeal ( sci , unit ) ; begin
78416: LD_INT 0
78418: PPUSH
// if GetTaskList ( sci ) > 0 then
78419: LD_VAR 0 1
78423: PPUSH
78424: CALL_OW 437
78428: PUSH
78429: LD_INT 0
78431: GREATER
78432: IFFALSE 78502
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78434: LD_VAR 0 1
78438: PPUSH
78439: CALL_OW 437
78443: PUSH
78444: LD_INT 1
78446: ARRAY
78447: PUSH
78448: LD_INT 1
78450: ARRAY
78451: PUSH
78452: LD_STRING l
78454: EQUAL
78455: PUSH
78456: LD_VAR 0 1
78460: PPUSH
78461: CALL_OW 437
78465: PUSH
78466: LD_INT 1
78468: ARRAY
78469: PUSH
78470: LD_INT 4
78472: ARRAY
78473: PUSH
78474: LD_VAR 0 2
78478: EQUAL
78479: AND
78480: IFFALSE 78492
// result := true else
78482: LD_ADDR_VAR 0 3
78486: PUSH
78487: LD_INT 1
78489: ST_TO_ADDR
78490: GO 78500
// result := false ;
78492: LD_ADDR_VAR 0 3
78496: PUSH
78497: LD_INT 0
78499: ST_TO_ADDR
// end else
78500: GO 78510
// result := false ;
78502: LD_ADDR_VAR 0 3
78506: PUSH
78507: LD_INT 0
78509: ST_TO_ADDR
// end ;
78510: LD_VAR 0 3
78514: RET
// export function HealTarget ( sci ) ; begin
78515: LD_INT 0
78517: PPUSH
// if not sci then
78518: LD_VAR 0 1
78522: NOT
78523: IFFALSE 78527
// exit ;
78525: GO 78592
// result := 0 ;
78527: LD_ADDR_VAR 0 2
78531: PUSH
78532: LD_INT 0
78534: ST_TO_ADDR
// if GetTaskList ( sci ) then
78535: LD_VAR 0 1
78539: PPUSH
78540: CALL_OW 437
78544: IFFALSE 78592
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78546: LD_VAR 0 1
78550: PPUSH
78551: CALL_OW 437
78555: PUSH
78556: LD_INT 1
78558: ARRAY
78559: PUSH
78560: LD_INT 1
78562: ARRAY
78563: PUSH
78564: LD_STRING l
78566: EQUAL
78567: IFFALSE 78592
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78569: LD_ADDR_VAR 0 2
78573: PUSH
78574: LD_VAR 0 1
78578: PPUSH
78579: CALL_OW 437
78583: PUSH
78584: LD_INT 1
78586: ARRAY
78587: PUSH
78588: LD_INT 4
78590: ARRAY
78591: ST_TO_ADDR
// end ;
78592: LD_VAR 0 2
78596: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78597: LD_INT 0
78599: PPUSH
78600: PPUSH
78601: PPUSH
78602: PPUSH
// if not base_units then
78603: LD_VAR 0 1
78607: NOT
78608: IFFALSE 78612
// exit ;
78610: GO 78699
// result := false ;
78612: LD_ADDR_VAR 0 2
78616: PUSH
78617: LD_INT 0
78619: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78620: LD_ADDR_VAR 0 5
78624: PUSH
78625: LD_VAR 0 1
78629: PPUSH
78630: LD_INT 21
78632: PUSH
78633: LD_INT 3
78635: PUSH
78636: EMPTY
78637: LIST
78638: LIST
78639: PPUSH
78640: CALL_OW 72
78644: ST_TO_ADDR
// if not tmp then
78645: LD_VAR 0 5
78649: NOT
78650: IFFALSE 78654
// exit ;
78652: GO 78699
// for i in tmp do
78654: LD_ADDR_VAR 0 3
78658: PUSH
78659: LD_VAR 0 5
78663: PUSH
78664: FOR_IN
78665: IFFALSE 78697
// begin result := EnemyInRange ( i , 22 ) ;
78667: LD_ADDR_VAR 0 2
78671: PUSH
78672: LD_VAR 0 3
78676: PPUSH
78677: LD_INT 22
78679: PPUSH
78680: CALL 76935 0 2
78684: ST_TO_ADDR
// if result then
78685: LD_VAR 0 2
78689: IFFALSE 78695
// exit ;
78691: POP
78692: POP
78693: GO 78699
// end ;
78695: GO 78664
78697: POP
78698: POP
// end ;
78699: LD_VAR 0 2
78703: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
78704: LD_INT 0
78706: PPUSH
78707: PPUSH
// if not units then
78708: LD_VAR 0 1
78712: NOT
78713: IFFALSE 78717
// exit ;
78715: GO 78787
// result := [ ] ;
78717: LD_ADDR_VAR 0 3
78721: PUSH
78722: EMPTY
78723: ST_TO_ADDR
// for i in units do
78724: LD_ADDR_VAR 0 4
78728: PUSH
78729: LD_VAR 0 1
78733: PUSH
78734: FOR_IN
78735: IFFALSE 78785
// if GetTag ( i ) = tag then
78737: LD_VAR 0 4
78741: PPUSH
78742: CALL_OW 110
78746: PUSH
78747: LD_VAR 0 2
78751: EQUAL
78752: IFFALSE 78783
// result := Insert ( result , result + 1 , i ) ;
78754: LD_ADDR_VAR 0 3
78758: PUSH
78759: LD_VAR 0 3
78763: PPUSH
78764: LD_VAR 0 3
78768: PUSH
78769: LD_INT 1
78771: PLUS
78772: PPUSH
78773: LD_VAR 0 4
78777: PPUSH
78778: CALL_OW 2
78782: ST_TO_ADDR
78783: GO 78734
78785: POP
78786: POP
// end ;
78787: LD_VAR 0 3
78791: RET
// export function IsDriver ( un ) ; begin
78792: LD_INT 0
78794: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78795: LD_ADDR_VAR 0 2
78799: PUSH
78800: LD_VAR 0 1
78804: PUSH
78805: LD_INT 55
78807: PUSH
78808: EMPTY
78809: LIST
78810: PPUSH
78811: CALL_OW 69
78815: IN
78816: ST_TO_ADDR
// end ;
78817: LD_VAR 0 2
78821: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78822: LD_INT 0
78824: PPUSH
78825: PPUSH
// list := [ ] ;
78826: LD_ADDR_VAR 0 5
78830: PUSH
78831: EMPTY
78832: ST_TO_ADDR
// case d of 0 :
78833: LD_VAR 0 3
78837: PUSH
78838: LD_INT 0
78840: DOUBLE
78841: EQUAL
78842: IFTRUE 78846
78844: GO 78979
78846: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78847: LD_ADDR_VAR 0 5
78851: PUSH
78852: LD_VAR 0 1
78856: PUSH
78857: LD_INT 4
78859: MINUS
78860: PUSH
78861: LD_VAR 0 2
78865: PUSH
78866: LD_INT 4
78868: MINUS
78869: PUSH
78870: LD_INT 2
78872: PUSH
78873: EMPTY
78874: LIST
78875: LIST
78876: LIST
78877: PUSH
78878: LD_VAR 0 1
78882: PUSH
78883: LD_INT 3
78885: MINUS
78886: PUSH
78887: LD_VAR 0 2
78891: PUSH
78892: LD_INT 1
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: LIST
78899: PUSH
78900: LD_VAR 0 1
78904: PUSH
78905: LD_INT 4
78907: PLUS
78908: PUSH
78909: LD_VAR 0 2
78913: PUSH
78914: LD_INT 4
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: LIST
78921: PUSH
78922: LD_VAR 0 1
78926: PUSH
78927: LD_INT 3
78929: PLUS
78930: PUSH
78931: LD_VAR 0 2
78935: PUSH
78936: LD_INT 3
78938: PLUS
78939: PUSH
78940: LD_INT 5
78942: PUSH
78943: EMPTY
78944: LIST
78945: LIST
78946: LIST
78947: PUSH
78948: LD_VAR 0 1
78952: PUSH
78953: LD_VAR 0 2
78957: PUSH
78958: LD_INT 4
78960: PLUS
78961: PUSH
78962: LD_INT 0
78964: PUSH
78965: EMPTY
78966: LIST
78967: LIST
78968: LIST
78969: PUSH
78970: EMPTY
78971: LIST
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: ST_TO_ADDR
// end ; 1 :
78977: GO 79677
78979: LD_INT 1
78981: DOUBLE
78982: EQUAL
78983: IFTRUE 78987
78985: GO 79120
78987: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78988: LD_ADDR_VAR 0 5
78992: PUSH
78993: LD_VAR 0 1
78997: PUSH
78998: LD_VAR 0 2
79002: PUSH
79003: LD_INT 4
79005: MINUS
79006: PUSH
79007: LD_INT 3
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: LIST
79014: PUSH
79015: LD_VAR 0 1
79019: PUSH
79020: LD_INT 3
79022: MINUS
79023: PUSH
79024: LD_VAR 0 2
79028: PUSH
79029: LD_INT 3
79031: MINUS
79032: PUSH
79033: LD_INT 2
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: LIST
79040: PUSH
79041: LD_VAR 0 1
79045: PUSH
79046: LD_INT 4
79048: MINUS
79049: PUSH
79050: LD_VAR 0 2
79054: PUSH
79055: LD_INT 1
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: LIST
79062: PUSH
79063: LD_VAR 0 1
79067: PUSH
79068: LD_VAR 0 2
79072: PUSH
79073: LD_INT 3
79075: PLUS
79076: PUSH
79077: LD_INT 0
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: LIST
79084: PUSH
79085: LD_VAR 0 1
79089: PUSH
79090: LD_INT 4
79092: PLUS
79093: PUSH
79094: LD_VAR 0 2
79098: PUSH
79099: LD_INT 4
79101: PLUS
79102: PUSH
79103: LD_INT 5
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: LIST
79110: PUSH
79111: EMPTY
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: ST_TO_ADDR
// end ; 2 :
79118: GO 79677
79120: LD_INT 2
79122: DOUBLE
79123: EQUAL
79124: IFTRUE 79128
79126: GO 79257
79128: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79129: LD_ADDR_VAR 0 5
79133: PUSH
79134: LD_VAR 0 1
79138: PUSH
79139: LD_VAR 0 2
79143: PUSH
79144: LD_INT 3
79146: MINUS
79147: PUSH
79148: LD_INT 3
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: LIST
79155: PUSH
79156: LD_VAR 0 1
79160: PUSH
79161: LD_INT 4
79163: PLUS
79164: PUSH
79165: LD_VAR 0 2
79169: PUSH
79170: LD_INT 4
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: PUSH
79178: LD_VAR 0 1
79182: PUSH
79183: LD_VAR 0 2
79187: PUSH
79188: LD_INT 4
79190: PLUS
79191: PUSH
79192: LD_INT 0
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: LIST
79199: PUSH
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 3
79207: MINUS
79208: PUSH
79209: LD_VAR 0 2
79213: PUSH
79214: LD_INT 1
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: LIST
79221: PUSH
79222: LD_VAR 0 1
79226: PUSH
79227: LD_INT 4
79229: MINUS
79230: PUSH
79231: LD_VAR 0 2
79235: PUSH
79236: LD_INT 4
79238: MINUS
79239: PUSH
79240: LD_INT 2
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: LIST
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: ST_TO_ADDR
// end ; 3 :
79255: GO 79677
79257: LD_INT 3
79259: DOUBLE
79260: EQUAL
79261: IFTRUE 79265
79263: GO 79398
79265: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79266: LD_ADDR_VAR 0 5
79270: PUSH
79271: LD_VAR 0 1
79275: PUSH
79276: LD_INT 3
79278: PLUS
79279: PUSH
79280: LD_VAR 0 2
79284: PUSH
79285: LD_INT 4
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: LIST
79292: PUSH
79293: LD_VAR 0 1
79297: PUSH
79298: LD_INT 4
79300: PLUS
79301: PUSH
79302: LD_VAR 0 2
79306: PUSH
79307: LD_INT 4
79309: PLUS
79310: PUSH
79311: LD_INT 5
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: LIST
79318: PUSH
79319: LD_VAR 0 1
79323: PUSH
79324: LD_INT 4
79326: MINUS
79327: PUSH
79328: LD_VAR 0 2
79332: PUSH
79333: LD_INT 1
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: LIST
79340: PUSH
79341: LD_VAR 0 1
79345: PUSH
79346: LD_VAR 0 2
79350: PUSH
79351: LD_INT 4
79353: MINUS
79354: PUSH
79355: LD_INT 3
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: LIST
79362: PUSH
79363: LD_VAR 0 1
79367: PUSH
79368: LD_INT 3
79370: MINUS
79371: PUSH
79372: LD_VAR 0 2
79376: PUSH
79377: LD_INT 3
79379: MINUS
79380: PUSH
79381: LD_INT 2
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: LIST
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: LIST
79393: LIST
79394: LIST
79395: ST_TO_ADDR
// end ; 4 :
79396: GO 79677
79398: LD_INT 4
79400: DOUBLE
79401: EQUAL
79402: IFTRUE 79406
79404: GO 79539
79406: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79407: LD_ADDR_VAR 0 5
79411: PUSH
79412: LD_VAR 0 1
79416: PUSH
79417: LD_VAR 0 2
79421: PUSH
79422: LD_INT 4
79424: PLUS
79425: PUSH
79426: LD_INT 0
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: LIST
79433: PUSH
79434: LD_VAR 0 1
79438: PUSH
79439: LD_INT 3
79441: PLUS
79442: PUSH
79443: LD_VAR 0 2
79447: PUSH
79448: LD_INT 3
79450: PLUS
79451: PUSH
79452: LD_INT 5
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: LIST
79459: PUSH
79460: LD_VAR 0 1
79464: PUSH
79465: LD_INT 4
79467: PLUS
79468: PUSH
79469: LD_VAR 0 2
79473: PUSH
79474: LD_INT 4
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: LIST
79481: PUSH
79482: LD_VAR 0 1
79486: PUSH
79487: LD_VAR 0 2
79491: PUSH
79492: LD_INT 3
79494: MINUS
79495: PUSH
79496: LD_INT 3
79498: PUSH
79499: EMPTY
79500: LIST
79501: LIST
79502: LIST
79503: PUSH
79504: LD_VAR 0 1
79508: PUSH
79509: LD_INT 4
79511: MINUS
79512: PUSH
79513: LD_VAR 0 2
79517: PUSH
79518: LD_INT 4
79520: MINUS
79521: PUSH
79522: LD_INT 2
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: LIST
79529: PUSH
79530: EMPTY
79531: LIST
79532: LIST
79533: LIST
79534: LIST
79535: LIST
79536: ST_TO_ADDR
// end ; 5 :
79537: GO 79677
79539: LD_INT 5
79541: DOUBLE
79542: EQUAL
79543: IFTRUE 79547
79545: GO 79676
79547: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79548: LD_ADDR_VAR 0 5
79552: PUSH
79553: LD_VAR 0 1
79557: PUSH
79558: LD_INT 4
79560: MINUS
79561: PUSH
79562: LD_VAR 0 2
79566: PUSH
79567: LD_INT 1
79569: PUSH
79570: EMPTY
79571: LIST
79572: LIST
79573: LIST
79574: PUSH
79575: LD_VAR 0 1
79579: PUSH
79580: LD_VAR 0 2
79584: PUSH
79585: LD_INT 4
79587: MINUS
79588: PUSH
79589: LD_INT 3
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: LIST
79596: PUSH
79597: LD_VAR 0 1
79601: PUSH
79602: LD_INT 4
79604: PLUS
79605: PUSH
79606: LD_VAR 0 2
79610: PUSH
79611: LD_INT 4
79613: PLUS
79614: PUSH
79615: LD_INT 5
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: LIST
79622: PUSH
79623: LD_VAR 0 1
79627: PUSH
79628: LD_INT 3
79630: PLUS
79631: PUSH
79632: LD_VAR 0 2
79636: PUSH
79637: LD_INT 4
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: LIST
79644: PUSH
79645: LD_VAR 0 1
79649: PUSH
79650: LD_VAR 0 2
79654: PUSH
79655: LD_INT 3
79657: PLUS
79658: PUSH
79659: LD_INT 0
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: LIST
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: ST_TO_ADDR
// end ; end ;
79674: GO 79677
79676: POP
// result := list ;
79677: LD_ADDR_VAR 0 4
79681: PUSH
79682: LD_VAR 0 5
79686: ST_TO_ADDR
// end ;
79687: LD_VAR 0 4
79691: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79692: LD_INT 0
79694: PPUSH
79695: PPUSH
79696: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79697: LD_VAR 0 1
79701: NOT
79702: PUSH
79703: LD_VAR 0 2
79707: PUSH
79708: LD_INT 1
79710: PUSH
79711: LD_INT 2
79713: PUSH
79714: LD_INT 3
79716: PUSH
79717: LD_INT 4
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: LIST
79724: LIST
79725: IN
79726: NOT
79727: OR
79728: IFFALSE 79732
// exit ;
79730: GO 79824
// tmp := [ ] ;
79732: LD_ADDR_VAR 0 5
79736: PUSH
79737: EMPTY
79738: ST_TO_ADDR
// for i in units do
79739: LD_ADDR_VAR 0 4
79743: PUSH
79744: LD_VAR 0 1
79748: PUSH
79749: FOR_IN
79750: IFFALSE 79793
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
79752: LD_ADDR_VAR 0 5
79756: PUSH
79757: LD_VAR 0 5
79761: PPUSH
79762: LD_VAR 0 5
79766: PUSH
79767: LD_INT 1
79769: PLUS
79770: PPUSH
79771: LD_VAR 0 4
79775: PPUSH
79776: LD_VAR 0 2
79780: PPUSH
79781: CALL_OW 259
79785: PPUSH
79786: CALL_OW 2
79790: ST_TO_ADDR
79791: GO 79749
79793: POP
79794: POP
// if not tmp then
79795: LD_VAR 0 5
79799: NOT
79800: IFFALSE 79804
// exit ;
79802: GO 79824
// result := SortListByListDesc ( units , tmp ) ;
79804: LD_ADDR_VAR 0 3
79808: PUSH
79809: LD_VAR 0 1
79813: PPUSH
79814: LD_VAR 0 5
79818: PPUSH
79819: CALL_OW 77
79823: ST_TO_ADDR
// end ;
79824: LD_VAR 0 3
79828: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79829: LD_INT 0
79831: PPUSH
79832: PPUSH
79833: PPUSH
// x := GetX ( building ) ;
79834: LD_ADDR_VAR 0 4
79838: PUSH
79839: LD_VAR 0 2
79843: PPUSH
79844: CALL_OW 250
79848: ST_TO_ADDR
// y := GetY ( building ) ;
79849: LD_ADDR_VAR 0 5
79853: PUSH
79854: LD_VAR 0 2
79858: PPUSH
79859: CALL_OW 251
79863: ST_TO_ADDR
// if GetTaskList ( unit ) then
79864: LD_VAR 0 1
79868: PPUSH
79869: CALL_OW 437
79873: IFFALSE 79968
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79875: LD_STRING e
79877: PUSH
79878: LD_VAR 0 1
79882: PPUSH
79883: CALL_OW 437
79887: PUSH
79888: LD_INT 1
79890: ARRAY
79891: PUSH
79892: LD_INT 1
79894: ARRAY
79895: EQUAL
79896: PUSH
79897: LD_VAR 0 4
79901: PUSH
79902: LD_VAR 0 1
79906: PPUSH
79907: CALL_OW 437
79911: PUSH
79912: LD_INT 1
79914: ARRAY
79915: PUSH
79916: LD_INT 2
79918: ARRAY
79919: EQUAL
79920: AND
79921: PUSH
79922: LD_VAR 0 5
79926: PUSH
79927: LD_VAR 0 1
79931: PPUSH
79932: CALL_OW 437
79936: PUSH
79937: LD_INT 1
79939: ARRAY
79940: PUSH
79941: LD_INT 3
79943: ARRAY
79944: EQUAL
79945: AND
79946: IFFALSE 79958
// result := true else
79948: LD_ADDR_VAR 0 3
79952: PUSH
79953: LD_INT 1
79955: ST_TO_ADDR
79956: GO 79966
// result := false ;
79958: LD_ADDR_VAR 0 3
79962: PUSH
79963: LD_INT 0
79965: ST_TO_ADDR
// end else
79966: GO 79976
// result := false ;
79968: LD_ADDR_VAR 0 3
79972: PUSH
79973: LD_INT 0
79975: ST_TO_ADDR
// end ;
79976: LD_VAR 0 3
79980: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79981: LD_INT 0
79983: PPUSH
79984: PPUSH
79985: PPUSH
79986: PPUSH
// if not unit or not area then
79987: LD_VAR 0 1
79991: NOT
79992: PUSH
79993: LD_VAR 0 2
79997: NOT
79998: OR
79999: IFFALSE 80003
// exit ;
80001: GO 80167
// tmp := AreaToList ( area , i ) ;
80003: LD_ADDR_VAR 0 6
80007: PUSH
80008: LD_VAR 0 2
80012: PPUSH
80013: LD_VAR 0 5
80017: PPUSH
80018: CALL_OW 517
80022: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80023: LD_ADDR_VAR 0 5
80027: PUSH
80028: DOUBLE
80029: LD_INT 1
80031: DEC
80032: ST_TO_ADDR
80033: LD_VAR 0 6
80037: PUSH
80038: LD_INT 1
80040: ARRAY
80041: PUSH
80042: FOR_TO
80043: IFFALSE 80165
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80045: LD_ADDR_VAR 0 7
80049: PUSH
80050: LD_VAR 0 6
80054: PUSH
80055: LD_INT 1
80057: ARRAY
80058: PUSH
80059: LD_VAR 0 5
80063: ARRAY
80064: PUSH
80065: LD_VAR 0 6
80069: PUSH
80070: LD_INT 2
80072: ARRAY
80073: PUSH
80074: LD_VAR 0 5
80078: ARRAY
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
80084: LD_VAR 0 7
80088: PUSH
80089: LD_INT 1
80091: ARRAY
80092: PPUSH
80093: LD_VAR 0 7
80097: PUSH
80098: LD_INT 2
80100: ARRAY
80101: PPUSH
80102: CALL_OW 428
80106: PUSH
80107: LD_INT 0
80109: EQUAL
80110: IFFALSE 80163
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
80112: LD_VAR 0 1
80116: PPUSH
80117: LD_VAR 0 7
80121: PUSH
80122: LD_INT 1
80124: ARRAY
80125: PPUSH
80126: LD_VAR 0 7
80130: PUSH
80131: LD_INT 2
80133: ARRAY
80134: PPUSH
80135: LD_VAR 0 3
80139: PPUSH
80140: CALL_OW 48
// result := IsPlaced ( unit ) ;
80144: LD_ADDR_VAR 0 4
80148: PUSH
80149: LD_VAR 0 1
80153: PPUSH
80154: CALL_OW 305
80158: ST_TO_ADDR
// exit ;
80159: POP
80160: POP
80161: GO 80167
// end ; end ;
80163: GO 80042
80165: POP
80166: POP
// end ;
80167: LD_VAR 0 4
80171: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80172: LD_INT 0
80174: PPUSH
80175: PPUSH
80176: PPUSH
// if not side or side > 8 then
80177: LD_VAR 0 1
80181: NOT
80182: PUSH
80183: LD_VAR 0 1
80187: PUSH
80188: LD_INT 8
80190: GREATER
80191: OR
80192: IFFALSE 80196
// exit ;
80194: GO 80383
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80196: LD_ADDR_VAR 0 4
80200: PUSH
80201: LD_INT 22
80203: PUSH
80204: LD_VAR 0 1
80208: PUSH
80209: EMPTY
80210: LIST
80211: LIST
80212: PUSH
80213: LD_INT 21
80215: PUSH
80216: LD_INT 3
80218: PUSH
80219: EMPTY
80220: LIST
80221: LIST
80222: PUSH
80223: EMPTY
80224: LIST
80225: LIST
80226: PPUSH
80227: CALL_OW 69
80231: ST_TO_ADDR
// if not tmp then
80232: LD_VAR 0 4
80236: NOT
80237: IFFALSE 80241
// exit ;
80239: GO 80383
// enable_addtolog := true ;
80241: LD_ADDR_OWVAR 81
80245: PUSH
80246: LD_INT 1
80248: ST_TO_ADDR
// AddToLog ( [ ) ;
80249: LD_STRING [
80251: PPUSH
80252: CALL_OW 561
// for i in tmp do
80256: LD_ADDR_VAR 0 3
80260: PUSH
80261: LD_VAR 0 4
80265: PUSH
80266: FOR_IN
80267: IFFALSE 80374
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80269: LD_STRING [
80271: PUSH
80272: LD_VAR 0 3
80276: PPUSH
80277: CALL_OW 266
80281: STR
80282: PUSH
80283: LD_STRING , 
80285: STR
80286: PUSH
80287: LD_VAR 0 3
80291: PPUSH
80292: CALL_OW 250
80296: STR
80297: PUSH
80298: LD_STRING , 
80300: STR
80301: PUSH
80302: LD_VAR 0 3
80306: PPUSH
80307: CALL_OW 251
80311: STR
80312: PUSH
80313: LD_STRING , 
80315: STR
80316: PUSH
80317: LD_VAR 0 3
80321: PPUSH
80322: CALL_OW 254
80326: STR
80327: PUSH
80328: LD_STRING , 
80330: STR
80331: PUSH
80332: LD_VAR 0 3
80336: PPUSH
80337: LD_INT 1
80339: PPUSH
80340: CALL_OW 268
80344: STR
80345: PUSH
80346: LD_STRING , 
80348: STR
80349: PUSH
80350: LD_VAR 0 3
80354: PPUSH
80355: LD_INT 2
80357: PPUSH
80358: CALL_OW 268
80362: STR
80363: PUSH
80364: LD_STRING ],
80366: STR
80367: PPUSH
80368: CALL_OW 561
// end ;
80372: GO 80266
80374: POP
80375: POP
// AddToLog ( ]; ) ;
80376: LD_STRING ];
80378: PPUSH
80379: CALL_OW 561
// end ;
80383: LD_VAR 0 2
80387: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80388: LD_INT 0
80390: PPUSH
80391: PPUSH
80392: PPUSH
80393: PPUSH
80394: PPUSH
// if not area or not rate or not max then
80395: LD_VAR 0 1
80399: NOT
80400: PUSH
80401: LD_VAR 0 2
80405: NOT
80406: OR
80407: PUSH
80408: LD_VAR 0 4
80412: NOT
80413: OR
80414: IFFALSE 80418
// exit ;
80416: GO 80610
// while 1 do
80418: LD_INT 1
80420: IFFALSE 80610
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80422: LD_ADDR_VAR 0 9
80426: PUSH
80427: LD_VAR 0 1
80431: PPUSH
80432: LD_INT 1
80434: PPUSH
80435: CALL_OW 287
80439: PUSH
80440: LD_INT 10
80442: MUL
80443: ST_TO_ADDR
// r := rate / 10 ;
80444: LD_ADDR_VAR 0 7
80448: PUSH
80449: LD_VAR 0 2
80453: PUSH
80454: LD_INT 10
80456: DIVREAL
80457: ST_TO_ADDR
// time := 1 1$00 ;
80458: LD_ADDR_VAR 0 8
80462: PUSH
80463: LD_INT 2100
80465: ST_TO_ADDR
// if amount < min then
80466: LD_VAR 0 9
80470: PUSH
80471: LD_VAR 0 3
80475: LESS
80476: IFFALSE 80494
// r := r * 2 else
80478: LD_ADDR_VAR 0 7
80482: PUSH
80483: LD_VAR 0 7
80487: PUSH
80488: LD_INT 2
80490: MUL
80491: ST_TO_ADDR
80492: GO 80520
// if amount > max then
80494: LD_VAR 0 9
80498: PUSH
80499: LD_VAR 0 4
80503: GREATER
80504: IFFALSE 80520
// r := r / 2 ;
80506: LD_ADDR_VAR 0 7
80510: PUSH
80511: LD_VAR 0 7
80515: PUSH
80516: LD_INT 2
80518: DIVREAL
80519: ST_TO_ADDR
// time := time / r ;
80520: LD_ADDR_VAR 0 8
80524: PUSH
80525: LD_VAR 0 8
80529: PUSH
80530: LD_VAR 0 7
80534: DIVREAL
80535: ST_TO_ADDR
// if time < 0 then
80536: LD_VAR 0 8
80540: PUSH
80541: LD_INT 0
80543: LESS
80544: IFFALSE 80561
// time := time * - 1 ;
80546: LD_ADDR_VAR 0 8
80550: PUSH
80551: LD_VAR 0 8
80555: PUSH
80556: LD_INT 1
80558: NEG
80559: MUL
80560: ST_TO_ADDR
// wait ( time ) ;
80561: LD_VAR 0 8
80565: PPUSH
80566: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
80570: LD_INT 35
80572: PPUSH
80573: LD_INT 875
80575: PPUSH
80576: CALL_OW 12
80580: PPUSH
80581: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80585: LD_INT 1
80587: PPUSH
80588: LD_INT 5
80590: PPUSH
80591: CALL_OW 12
80595: PPUSH
80596: LD_VAR 0 1
80600: PPUSH
80601: LD_INT 1
80603: PPUSH
80604: CALL_OW 55
// end ;
80608: GO 80418
// end ;
80610: LD_VAR 0 5
80614: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80615: LD_INT 0
80617: PPUSH
80618: PPUSH
80619: PPUSH
80620: PPUSH
80621: PPUSH
80622: PPUSH
80623: PPUSH
80624: PPUSH
// if not turrets or not factories then
80625: LD_VAR 0 1
80629: NOT
80630: PUSH
80631: LD_VAR 0 2
80635: NOT
80636: OR
80637: IFFALSE 80641
// exit ;
80639: GO 80948
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80641: LD_ADDR_VAR 0 10
80645: PUSH
80646: LD_INT 5
80648: PUSH
80649: LD_INT 6
80651: PUSH
80652: EMPTY
80653: LIST
80654: LIST
80655: PUSH
80656: LD_INT 2
80658: PUSH
80659: LD_INT 4
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: LD_INT 3
80668: PUSH
80669: LD_INT 5
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: PUSH
80676: EMPTY
80677: LIST
80678: LIST
80679: LIST
80680: PUSH
80681: LD_INT 24
80683: PUSH
80684: LD_INT 25
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PUSH
80691: LD_INT 23
80693: PUSH
80694: LD_INT 27
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: PUSH
80705: LD_INT 42
80707: PUSH
80708: LD_INT 43
80710: PUSH
80711: EMPTY
80712: LIST
80713: LIST
80714: PUSH
80715: LD_INT 44
80717: PUSH
80718: LD_INT 46
80720: PUSH
80721: EMPTY
80722: LIST
80723: LIST
80724: PUSH
80725: LD_INT 45
80727: PUSH
80728: LD_INT 47
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: LIST
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: LIST
80744: ST_TO_ADDR
// result := [ ] ;
80745: LD_ADDR_VAR 0 3
80749: PUSH
80750: EMPTY
80751: ST_TO_ADDR
// for i in turrets do
80752: LD_ADDR_VAR 0 4
80756: PUSH
80757: LD_VAR 0 1
80761: PUSH
80762: FOR_IN
80763: IFFALSE 80946
// begin nat := GetNation ( i ) ;
80765: LD_ADDR_VAR 0 7
80769: PUSH
80770: LD_VAR 0 4
80774: PPUSH
80775: CALL_OW 248
80779: ST_TO_ADDR
// weapon := 0 ;
80780: LD_ADDR_VAR 0 8
80784: PUSH
80785: LD_INT 0
80787: ST_TO_ADDR
// if not nat then
80788: LD_VAR 0 7
80792: NOT
80793: IFFALSE 80797
// continue ;
80795: GO 80762
// for j in list [ nat ] do
80797: LD_ADDR_VAR 0 5
80801: PUSH
80802: LD_VAR 0 10
80806: PUSH
80807: LD_VAR 0 7
80811: ARRAY
80812: PUSH
80813: FOR_IN
80814: IFFALSE 80855
// if GetBWeapon ( i ) = j [ 1 ] then
80816: LD_VAR 0 4
80820: PPUSH
80821: CALL_OW 269
80825: PUSH
80826: LD_VAR 0 5
80830: PUSH
80831: LD_INT 1
80833: ARRAY
80834: EQUAL
80835: IFFALSE 80853
// begin weapon := j [ 2 ] ;
80837: LD_ADDR_VAR 0 8
80841: PUSH
80842: LD_VAR 0 5
80846: PUSH
80847: LD_INT 2
80849: ARRAY
80850: ST_TO_ADDR
// break ;
80851: GO 80855
// end ;
80853: GO 80813
80855: POP
80856: POP
// if not weapon then
80857: LD_VAR 0 8
80861: NOT
80862: IFFALSE 80866
// continue ;
80864: GO 80762
// for k in factories do
80866: LD_ADDR_VAR 0 6
80870: PUSH
80871: LD_VAR 0 2
80875: PUSH
80876: FOR_IN
80877: IFFALSE 80942
// begin weapons := AvailableWeaponList ( k ) ;
80879: LD_ADDR_VAR 0 9
80883: PUSH
80884: LD_VAR 0 6
80888: PPUSH
80889: CALL_OW 478
80893: ST_TO_ADDR
// if not weapons then
80894: LD_VAR 0 9
80898: NOT
80899: IFFALSE 80903
// continue ;
80901: GO 80876
// if weapon in weapons then
80903: LD_VAR 0 8
80907: PUSH
80908: LD_VAR 0 9
80912: IN
80913: IFFALSE 80940
// begin result := [ i , weapon ] ;
80915: LD_ADDR_VAR 0 3
80919: PUSH
80920: LD_VAR 0 4
80924: PUSH
80925: LD_VAR 0 8
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: ST_TO_ADDR
// exit ;
80934: POP
80935: POP
80936: POP
80937: POP
80938: GO 80948
// end ; end ;
80940: GO 80876
80942: POP
80943: POP
// end ;
80944: GO 80762
80946: POP
80947: POP
// end ;
80948: LD_VAR 0 3
80952: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80953: LD_INT 0
80955: PPUSH
// if not side or side > 8 then
80956: LD_VAR 0 3
80960: NOT
80961: PUSH
80962: LD_VAR 0 3
80966: PUSH
80967: LD_INT 8
80969: GREATER
80970: OR
80971: IFFALSE 80975
// exit ;
80973: GO 81034
// if not range then
80975: LD_VAR 0 4
80979: NOT
80980: IFFALSE 80991
// range := - 12 ;
80982: LD_ADDR_VAR 0 4
80986: PUSH
80987: LD_INT 12
80989: NEG
80990: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80991: LD_VAR 0 1
80995: PPUSH
80996: LD_VAR 0 2
81000: PPUSH
81001: LD_VAR 0 3
81005: PPUSH
81006: LD_VAR 0 4
81010: PPUSH
81011: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81015: LD_VAR 0 1
81019: PPUSH
81020: LD_VAR 0 2
81024: PPUSH
81025: LD_VAR 0 3
81029: PPUSH
81030: CALL_OW 331
// end ;
81034: LD_VAR 0 5
81038: RET
// export function Video ( mode ) ; begin
81039: LD_INT 0
81041: PPUSH
// ingame_video = mode ;
81042: LD_ADDR_OWVAR 52
81046: PUSH
81047: LD_VAR 0 1
81051: ST_TO_ADDR
// interface_hidden = mode ;
81052: LD_ADDR_OWVAR 54
81056: PUSH
81057: LD_VAR 0 1
81061: ST_TO_ADDR
// end ;
81062: LD_VAR 0 2
81066: RET
// export function Join ( array , element ) ; begin
81067: LD_INT 0
81069: PPUSH
// result := array ^ element ;
81070: LD_ADDR_VAR 0 3
81074: PUSH
81075: LD_VAR 0 1
81079: PUSH
81080: LD_VAR 0 2
81084: ADD
81085: ST_TO_ADDR
// end ;
81086: LD_VAR 0 3
81090: RET
// export function JoinUnion ( array , element ) ; begin
81091: LD_INT 0
81093: PPUSH
// result := array union element ;
81094: LD_ADDR_VAR 0 3
81098: PUSH
81099: LD_VAR 0 1
81103: PUSH
81104: LD_VAR 0 2
81108: UNION
81109: ST_TO_ADDR
// end ;
81110: LD_VAR 0 3
81114: RET
// export function GetBehemoths ( side ) ; begin
81115: LD_INT 0
81117: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
81118: LD_ADDR_VAR 0 2
81122: PUSH
81123: LD_INT 22
81125: PUSH
81126: LD_VAR 0 1
81130: PUSH
81131: EMPTY
81132: LIST
81133: LIST
81134: PUSH
81135: LD_INT 31
81137: PUSH
81138: LD_INT 25
81140: PUSH
81141: EMPTY
81142: LIST
81143: LIST
81144: PUSH
81145: EMPTY
81146: LIST
81147: LIST
81148: PPUSH
81149: CALL_OW 69
81153: ST_TO_ADDR
// end ;
81154: LD_VAR 0 2
81158: RET
// export function Shuffle ( array ) ; var i , index ; begin
81159: LD_INT 0
81161: PPUSH
81162: PPUSH
81163: PPUSH
// result := [ ] ;
81164: LD_ADDR_VAR 0 2
81168: PUSH
81169: EMPTY
81170: ST_TO_ADDR
// if not array then
81171: LD_VAR 0 1
81175: NOT
81176: IFFALSE 81180
// exit ;
81178: GO 81279
// Randomize ;
81180: CALL_OW 10
// for i = array downto 1 do
81184: LD_ADDR_VAR 0 3
81188: PUSH
81189: DOUBLE
81190: LD_VAR 0 1
81194: INC
81195: ST_TO_ADDR
81196: LD_INT 1
81198: PUSH
81199: FOR_DOWNTO
81200: IFFALSE 81277
// begin index := rand ( 1 , array ) ;
81202: LD_ADDR_VAR 0 4
81206: PUSH
81207: LD_INT 1
81209: PPUSH
81210: LD_VAR 0 1
81214: PPUSH
81215: CALL_OW 12
81219: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81220: LD_ADDR_VAR 0 2
81224: PUSH
81225: LD_VAR 0 2
81229: PPUSH
81230: LD_VAR 0 2
81234: PUSH
81235: LD_INT 1
81237: PLUS
81238: PPUSH
81239: LD_VAR 0 1
81243: PUSH
81244: LD_VAR 0 4
81248: ARRAY
81249: PPUSH
81250: CALL_OW 2
81254: ST_TO_ADDR
// array := Delete ( array , index ) ;
81255: LD_ADDR_VAR 0 1
81259: PUSH
81260: LD_VAR 0 1
81264: PPUSH
81265: LD_VAR 0 4
81269: PPUSH
81270: CALL_OW 3
81274: ST_TO_ADDR
// end ;
81275: GO 81199
81277: POP
81278: POP
// end ;
81279: LD_VAR 0 2
81283: RET
// export function GetBaseMaterials ( base ) ; begin
81284: LD_INT 0
81286: PPUSH
// result := [ 0 , 0 , 0 ] ;
81287: LD_ADDR_VAR 0 2
81291: PUSH
81292: LD_INT 0
81294: PUSH
81295: LD_INT 0
81297: PUSH
81298: LD_INT 0
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: LIST
81305: ST_TO_ADDR
// if not base then
81306: LD_VAR 0 1
81310: NOT
81311: IFFALSE 81315
// exit ;
81313: GO 81364
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81315: LD_ADDR_VAR 0 2
81319: PUSH
81320: LD_VAR 0 1
81324: PPUSH
81325: LD_INT 1
81327: PPUSH
81328: CALL_OW 275
81332: PUSH
81333: LD_VAR 0 1
81337: PPUSH
81338: LD_INT 2
81340: PPUSH
81341: CALL_OW 275
81345: PUSH
81346: LD_VAR 0 1
81350: PPUSH
81351: LD_INT 3
81353: PPUSH
81354: CALL_OW 275
81358: PUSH
81359: EMPTY
81360: LIST
81361: LIST
81362: LIST
81363: ST_TO_ADDR
// end ;
81364: LD_VAR 0 2
81368: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81369: LD_INT 0
81371: PPUSH
81372: PPUSH
// result := array ;
81373: LD_ADDR_VAR 0 3
81377: PUSH
81378: LD_VAR 0 1
81382: ST_TO_ADDR
// if size > 0 then
81383: LD_VAR 0 2
81387: PUSH
81388: LD_INT 0
81390: GREATER
81391: IFFALSE 81437
// for i := array downto size do
81393: LD_ADDR_VAR 0 4
81397: PUSH
81398: DOUBLE
81399: LD_VAR 0 1
81403: INC
81404: ST_TO_ADDR
81405: LD_VAR 0 2
81409: PUSH
81410: FOR_DOWNTO
81411: IFFALSE 81435
// result := Delete ( result , result ) ;
81413: LD_ADDR_VAR 0 3
81417: PUSH
81418: LD_VAR 0 3
81422: PPUSH
81423: LD_VAR 0 3
81427: PPUSH
81428: CALL_OW 3
81432: ST_TO_ADDR
81433: GO 81410
81435: POP
81436: POP
// end ;
81437: LD_VAR 0 3
81441: RET
// export function ComExit ( unit ) ; var tmp ; begin
81442: LD_INT 0
81444: PPUSH
81445: PPUSH
// if not IsInUnit ( unit ) then
81446: LD_VAR 0 1
81450: PPUSH
81451: CALL_OW 310
81455: NOT
81456: IFFALSE 81460
// exit ;
81458: GO 81520
// tmp := IsInUnit ( unit ) ;
81460: LD_ADDR_VAR 0 3
81464: PUSH
81465: LD_VAR 0 1
81469: PPUSH
81470: CALL_OW 310
81474: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81475: LD_VAR 0 3
81479: PPUSH
81480: CALL_OW 247
81484: PUSH
81485: LD_INT 2
81487: EQUAL
81488: IFFALSE 81501
// ComExitVehicle ( unit ) else
81490: LD_VAR 0 1
81494: PPUSH
81495: CALL_OW 121
81499: GO 81510
// ComExitBuilding ( unit ) ;
81501: LD_VAR 0 1
81505: PPUSH
81506: CALL_OW 122
// result := tmp ;
81510: LD_ADDR_VAR 0 2
81514: PUSH
81515: LD_VAR 0 3
81519: ST_TO_ADDR
// end ;
81520: LD_VAR 0 2
81524: RET
// export function ResetHc ; begin
81525: LD_INT 0
81527: PPUSH
// InitHc ;
81528: CALL_OW 19
// hc_importance := 0 ;
81532: LD_ADDR_OWVAR 32
81536: PUSH
81537: LD_INT 0
81539: ST_TO_ADDR
// end ; end_of_file
81540: LD_VAR 0 1
81544: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81545: LD_INT 0
81547: PPUSH
81548: PPUSH
81549: PPUSH
// if not mc_bases or not skirmish then
81550: LD_EXP 87
81554: NOT
81555: PUSH
81556: LD_EXP 85
81560: NOT
81561: OR
81562: IFFALSE 81566
// exit ;
81564: GO 81731
// for i = 1 to mc_bases do
81566: LD_ADDR_VAR 0 4
81570: PUSH
81571: DOUBLE
81572: LD_INT 1
81574: DEC
81575: ST_TO_ADDR
81576: LD_EXP 87
81580: PUSH
81581: FOR_TO
81582: IFFALSE 81729
// begin if sci in mc_bases [ i ] then
81584: LD_VAR 0 2
81588: PUSH
81589: LD_EXP 87
81593: PUSH
81594: LD_VAR 0 4
81598: ARRAY
81599: IN
81600: IFFALSE 81727
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81602: LD_ADDR_EXP 116
81606: PUSH
81607: LD_EXP 116
81611: PPUSH
81612: LD_VAR 0 4
81616: PUSH
81617: LD_EXP 116
81621: PUSH
81622: LD_VAR 0 4
81626: ARRAY
81627: PUSH
81628: LD_INT 1
81630: PLUS
81631: PUSH
81632: EMPTY
81633: LIST
81634: LIST
81635: PPUSH
81636: LD_VAR 0 1
81640: PPUSH
81641: CALL 50143 0 3
81645: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81646: LD_ADDR_VAR 0 5
81650: PUSH
81651: LD_EXP 87
81655: PUSH
81656: LD_VAR 0 4
81660: ARRAY
81661: PPUSH
81662: LD_INT 2
81664: PUSH
81665: LD_INT 30
81667: PUSH
81668: LD_INT 0
81670: PUSH
81671: EMPTY
81672: LIST
81673: LIST
81674: PUSH
81675: LD_INT 30
81677: PUSH
81678: LD_INT 1
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: LIST
81689: PPUSH
81690: CALL_OW 72
81694: PPUSH
81695: LD_VAR 0 1
81699: PPUSH
81700: CALL_OW 74
81704: ST_TO_ADDR
// if tmp then
81705: LD_VAR 0 5
81709: IFFALSE 81725
// ComStandNearbyBuilding ( ape , tmp ) ;
81711: LD_VAR 0 1
81715: PPUSH
81716: LD_VAR 0 5
81720: PPUSH
81721: CALL 46757 0 2
// break ;
81725: GO 81729
// end ; end ;
81727: GO 81581
81729: POP
81730: POP
// end ;
81731: LD_VAR 0 3
81735: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81736: LD_INT 0
81738: PPUSH
81739: PPUSH
81740: PPUSH
// if not mc_bases or not skirmish then
81741: LD_EXP 87
81745: NOT
81746: PUSH
81747: LD_EXP 85
81751: NOT
81752: OR
81753: IFFALSE 81757
// exit ;
81755: GO 81846
// for i = 1 to mc_bases do
81757: LD_ADDR_VAR 0 4
81761: PUSH
81762: DOUBLE
81763: LD_INT 1
81765: DEC
81766: ST_TO_ADDR
81767: LD_EXP 87
81771: PUSH
81772: FOR_TO
81773: IFFALSE 81844
// begin if building in mc_busy_turret_list [ i ] then
81775: LD_VAR 0 1
81779: PUSH
81780: LD_EXP 97
81784: PUSH
81785: LD_VAR 0 4
81789: ARRAY
81790: IN
81791: IFFALSE 81842
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81793: LD_ADDR_VAR 0 5
81797: PUSH
81798: LD_EXP 97
81802: PUSH
81803: LD_VAR 0 4
81807: ARRAY
81808: PUSH
81809: LD_VAR 0 1
81813: DIFF
81814: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81815: LD_ADDR_EXP 97
81819: PUSH
81820: LD_EXP 97
81824: PPUSH
81825: LD_VAR 0 4
81829: PPUSH
81830: LD_VAR 0 5
81834: PPUSH
81835: CALL_OW 1
81839: ST_TO_ADDR
// break ;
81840: GO 81844
// end ; end ;
81842: GO 81772
81844: POP
81845: POP
// end ;
81846: LD_VAR 0 3
81850: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81851: LD_INT 0
81853: PPUSH
81854: PPUSH
81855: PPUSH
// if not mc_bases or not skirmish then
81856: LD_EXP 87
81860: NOT
81861: PUSH
81862: LD_EXP 85
81866: NOT
81867: OR
81868: IFFALSE 81872
// exit ;
81870: GO 82071
// for i = 1 to mc_bases do
81872: LD_ADDR_VAR 0 5
81876: PUSH
81877: DOUBLE
81878: LD_INT 1
81880: DEC
81881: ST_TO_ADDR
81882: LD_EXP 87
81886: PUSH
81887: FOR_TO
81888: IFFALSE 82069
// if building in mc_bases [ i ] then
81890: LD_VAR 0 1
81894: PUSH
81895: LD_EXP 87
81899: PUSH
81900: LD_VAR 0 5
81904: ARRAY
81905: IN
81906: IFFALSE 82067
// begin tmp := mc_bases [ i ] diff building ;
81908: LD_ADDR_VAR 0 6
81912: PUSH
81913: LD_EXP 87
81917: PUSH
81918: LD_VAR 0 5
81922: ARRAY
81923: PUSH
81924: LD_VAR 0 1
81928: DIFF
81929: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81930: LD_ADDR_EXP 87
81934: PUSH
81935: LD_EXP 87
81939: PPUSH
81940: LD_VAR 0 5
81944: PPUSH
81945: LD_VAR 0 6
81949: PPUSH
81950: CALL_OW 1
81954: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81955: LD_VAR 0 1
81959: PUSH
81960: LD_EXP 95
81964: PUSH
81965: LD_VAR 0 5
81969: ARRAY
81970: IN
81971: IFFALSE 82010
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81973: LD_ADDR_EXP 95
81977: PUSH
81978: LD_EXP 95
81982: PPUSH
81983: LD_VAR 0 5
81987: PPUSH
81988: LD_EXP 95
81992: PUSH
81993: LD_VAR 0 5
81997: ARRAY
81998: PUSH
81999: LD_VAR 0 1
82003: DIFF
82004: PPUSH
82005: CALL_OW 1
82009: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
82010: LD_VAR 0 1
82014: PUSH
82015: LD_EXP 96
82019: PUSH
82020: LD_VAR 0 5
82024: ARRAY
82025: IN
82026: IFFALSE 82065
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
82028: LD_ADDR_EXP 96
82032: PUSH
82033: LD_EXP 96
82037: PPUSH
82038: LD_VAR 0 5
82042: PPUSH
82043: LD_EXP 96
82047: PUSH
82048: LD_VAR 0 5
82052: ARRAY
82053: PUSH
82054: LD_VAR 0 1
82058: DIFF
82059: PPUSH
82060: CALL_OW 1
82064: ST_TO_ADDR
// break ;
82065: GO 82069
// end ;
82067: GO 81887
82069: POP
82070: POP
// end ;
82071: LD_VAR 0 4
82075: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
82076: LD_INT 0
82078: PPUSH
82079: PPUSH
82080: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
82081: LD_EXP 87
82085: NOT
82086: PUSH
82087: LD_EXP 85
82091: NOT
82092: OR
82093: PUSH
82094: LD_VAR 0 3
82098: PUSH
82099: LD_EXP 113
82103: IN
82104: NOT
82105: OR
82106: IFFALSE 82110
// exit ;
82108: GO 82233
// for i = 1 to mc_vehicles do
82110: LD_ADDR_VAR 0 6
82114: PUSH
82115: DOUBLE
82116: LD_INT 1
82118: DEC
82119: ST_TO_ADDR
82120: LD_EXP 106
82124: PUSH
82125: FOR_TO
82126: IFFALSE 82231
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
82128: LD_VAR 0 2
82132: PUSH
82133: LD_EXP 106
82137: PUSH
82138: LD_VAR 0 6
82142: ARRAY
82143: IN
82144: PUSH
82145: LD_VAR 0 1
82149: PUSH
82150: LD_EXP 106
82154: PUSH
82155: LD_VAR 0 6
82159: ARRAY
82160: IN
82161: OR
82162: IFFALSE 82229
// begin tmp := mc_vehicles [ i ] diff old ;
82164: LD_ADDR_VAR 0 7
82168: PUSH
82169: LD_EXP 106
82173: PUSH
82174: LD_VAR 0 6
82178: ARRAY
82179: PUSH
82180: LD_VAR 0 2
82184: DIFF
82185: ST_TO_ADDR
// tmp := tmp diff new ;
82186: LD_ADDR_VAR 0 7
82190: PUSH
82191: LD_VAR 0 7
82195: PUSH
82196: LD_VAR 0 1
82200: DIFF
82201: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
82202: LD_ADDR_EXP 106
82206: PUSH
82207: LD_EXP 106
82211: PPUSH
82212: LD_VAR 0 6
82216: PPUSH
82217: LD_VAR 0 7
82221: PPUSH
82222: CALL_OW 1
82226: ST_TO_ADDR
// break ;
82227: GO 82231
// end ;
82229: GO 82125
82231: POP
82232: POP
// end ;
82233: LD_VAR 0 5
82237: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
82238: LD_INT 0
82240: PPUSH
82241: PPUSH
82242: PPUSH
82243: PPUSH
// if not mc_bases or not skirmish then
82244: LD_EXP 87
82248: NOT
82249: PUSH
82250: LD_EXP 85
82254: NOT
82255: OR
82256: IFFALSE 82260
// exit ;
82258: GO 82637
// side := GetSide ( vehicle ) ;
82260: LD_ADDR_VAR 0 5
82264: PUSH
82265: LD_VAR 0 1
82269: PPUSH
82270: CALL_OW 255
82274: ST_TO_ADDR
// for i = 1 to mc_bases do
82275: LD_ADDR_VAR 0 4
82279: PUSH
82280: DOUBLE
82281: LD_INT 1
82283: DEC
82284: ST_TO_ADDR
82285: LD_EXP 87
82289: PUSH
82290: FOR_TO
82291: IFFALSE 82635
// begin if factory in mc_bases [ i ] then
82293: LD_VAR 0 2
82297: PUSH
82298: LD_EXP 87
82302: PUSH
82303: LD_VAR 0 4
82307: ARRAY
82308: IN
82309: IFFALSE 82633
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
82311: LD_EXP 109
82315: PUSH
82316: LD_VAR 0 4
82320: ARRAY
82321: PUSH
82322: LD_EXP 98
82326: PUSH
82327: LD_VAR 0 4
82331: ARRAY
82332: LESS
82333: PUSH
82334: LD_VAR 0 1
82338: PPUSH
82339: CALL_OW 264
82343: PUSH
82344: LD_INT 31
82346: PUSH
82347: LD_INT 32
82349: PUSH
82350: LD_INT 51
82352: PUSH
82353: LD_EXP 131
82357: PUSH
82358: LD_INT 12
82360: PUSH
82361: LD_INT 30
82363: PUSH
82364: LD_EXP 130
82368: PUSH
82369: LD_INT 11
82371: PUSH
82372: LD_INT 53
82374: PUSH
82375: LD_INT 14
82377: PUSH
82378: LD_EXP 134
82382: PUSH
82383: LD_INT 29
82385: PUSH
82386: LD_EXP 132
82390: PUSH
82391: LD_INT 13
82393: PUSH
82394: LD_INT 52
82396: PUSH
82397: LD_INT 48
82399: PUSH
82400: LD_INT 8
82402: PUSH
82403: EMPTY
82404: LIST
82405: LIST
82406: LIST
82407: LIST
82408: LIST
82409: LIST
82410: LIST
82411: LIST
82412: LIST
82413: LIST
82414: LIST
82415: LIST
82416: LIST
82417: LIST
82418: LIST
82419: LIST
82420: LIST
82421: IN
82422: NOT
82423: AND
82424: IFFALSE 82472
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
82426: LD_ADDR_EXP 109
82430: PUSH
82431: LD_EXP 109
82435: PPUSH
82436: LD_VAR 0 4
82440: PUSH
82441: LD_EXP 109
82445: PUSH
82446: LD_VAR 0 4
82450: ARRAY
82451: PUSH
82452: LD_INT 1
82454: PLUS
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: PPUSH
82460: LD_VAR 0 1
82464: PPUSH
82465: CALL 50143 0 3
82469: ST_TO_ADDR
82470: GO 82516
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82472: LD_ADDR_EXP 106
82476: PUSH
82477: LD_EXP 106
82481: PPUSH
82482: LD_VAR 0 4
82486: PUSH
82487: LD_EXP 106
82491: PUSH
82492: LD_VAR 0 4
82496: ARRAY
82497: PUSH
82498: LD_INT 1
82500: PLUS
82501: PUSH
82502: EMPTY
82503: LIST
82504: LIST
82505: PPUSH
82506: LD_VAR 0 1
82510: PPUSH
82511: CALL 50143 0 3
82515: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82516: LD_VAR 0 1
82520: PPUSH
82521: CALL_OW 263
82525: PUSH
82526: LD_INT 2
82528: EQUAL
82529: IFFALSE 82549
// begin repeat wait ( 0 0$1 ) ;
82531: LD_INT 35
82533: PPUSH
82534: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82538: LD_VAR 0 1
82542: PPUSH
82543: CALL_OW 312
82547: IFFALSE 82531
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82549: LD_VAR 0 1
82553: PPUSH
82554: LD_EXP 111
82558: PUSH
82559: LD_VAR 0 4
82563: ARRAY
82564: PPUSH
82565: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82569: LD_VAR 0 1
82573: PPUSH
82574: CALL_OW 263
82578: PUSH
82579: LD_INT 1
82581: NONEQUAL
82582: IFFALSE 82586
// break ;
82584: GO 82635
// repeat wait ( 0 0$1 ) ;
82586: LD_INT 35
82588: PPUSH
82589: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82593: LD_VAR 0 1
82597: PPUSH
82598: LD_EXP 111
82602: PUSH
82603: LD_VAR 0 4
82607: ARRAY
82608: PPUSH
82609: CALL_OW 308
82613: IFFALSE 82586
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82615: LD_VAR 0 1
82619: PPUSH
82620: CALL_OW 311
82624: PPUSH
82625: CALL_OW 121
// exit ;
82629: POP
82630: POP
82631: GO 82637
// end ; end ;
82633: GO 82290
82635: POP
82636: POP
// end ;
82637: LD_VAR 0 3
82641: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82642: LD_INT 0
82644: PPUSH
82645: PPUSH
82646: PPUSH
82647: PPUSH
// if not mc_bases or not skirmish then
82648: LD_EXP 87
82652: NOT
82653: PUSH
82654: LD_EXP 85
82658: NOT
82659: OR
82660: IFFALSE 82664
// exit ;
82662: GO 83017
// repeat wait ( 0 0$1 ) ;
82664: LD_INT 35
82666: PPUSH
82667: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82671: LD_VAR 0 2
82675: PPUSH
82676: LD_VAR 0 3
82680: PPUSH
82681: CALL_OW 284
82685: IFFALSE 82664
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82687: LD_VAR 0 2
82691: PPUSH
82692: LD_VAR 0 3
82696: PPUSH
82697: CALL_OW 283
82701: PUSH
82702: LD_INT 4
82704: EQUAL
82705: IFFALSE 82709
// exit ;
82707: GO 83017
// for i = 1 to mc_bases do
82709: LD_ADDR_VAR 0 7
82713: PUSH
82714: DOUBLE
82715: LD_INT 1
82717: DEC
82718: ST_TO_ADDR
82719: LD_EXP 87
82723: PUSH
82724: FOR_TO
82725: IFFALSE 83015
// begin if mc_crates_area [ i ] then
82727: LD_EXP 105
82731: PUSH
82732: LD_VAR 0 7
82736: ARRAY
82737: IFFALSE 82848
// for j in mc_crates_area [ i ] do
82739: LD_ADDR_VAR 0 8
82743: PUSH
82744: LD_EXP 105
82748: PUSH
82749: LD_VAR 0 7
82753: ARRAY
82754: PUSH
82755: FOR_IN
82756: IFFALSE 82846
// if InArea ( x , y , j ) then
82758: LD_VAR 0 2
82762: PPUSH
82763: LD_VAR 0 3
82767: PPUSH
82768: LD_VAR 0 8
82772: PPUSH
82773: CALL_OW 309
82777: IFFALSE 82844
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82779: LD_ADDR_EXP 103
82783: PUSH
82784: LD_EXP 103
82788: PPUSH
82789: LD_VAR 0 7
82793: PUSH
82794: LD_EXP 103
82798: PUSH
82799: LD_VAR 0 7
82803: ARRAY
82804: PUSH
82805: LD_INT 1
82807: PLUS
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PPUSH
82813: LD_VAR 0 4
82817: PUSH
82818: LD_VAR 0 2
82822: PUSH
82823: LD_VAR 0 3
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: LIST
82832: PPUSH
82833: CALL 50143 0 3
82837: ST_TO_ADDR
// exit ;
82838: POP
82839: POP
82840: POP
82841: POP
82842: GO 83017
// end ;
82844: GO 82755
82846: POP
82847: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82848: LD_ADDR_VAR 0 9
82852: PUSH
82853: LD_EXP 87
82857: PUSH
82858: LD_VAR 0 7
82862: ARRAY
82863: PPUSH
82864: LD_INT 2
82866: PUSH
82867: LD_INT 30
82869: PUSH
82870: LD_INT 0
82872: PUSH
82873: EMPTY
82874: LIST
82875: LIST
82876: PUSH
82877: LD_INT 30
82879: PUSH
82880: LD_INT 1
82882: PUSH
82883: EMPTY
82884: LIST
82885: LIST
82886: PUSH
82887: EMPTY
82888: LIST
82889: LIST
82890: LIST
82891: PPUSH
82892: CALL_OW 72
82896: ST_TO_ADDR
// if not depot then
82897: LD_VAR 0 9
82901: NOT
82902: IFFALSE 82906
// continue ;
82904: GO 82724
// for j in depot do
82906: LD_ADDR_VAR 0 8
82910: PUSH
82911: LD_VAR 0 9
82915: PUSH
82916: FOR_IN
82917: IFFALSE 83011
// if GetDistUnitXY ( j , x , y ) < 30 then
82919: LD_VAR 0 8
82923: PPUSH
82924: LD_VAR 0 2
82928: PPUSH
82929: LD_VAR 0 3
82933: PPUSH
82934: CALL_OW 297
82938: PUSH
82939: LD_INT 30
82941: LESS
82942: IFFALSE 83009
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82944: LD_ADDR_EXP 103
82948: PUSH
82949: LD_EXP 103
82953: PPUSH
82954: LD_VAR 0 7
82958: PUSH
82959: LD_EXP 103
82963: PUSH
82964: LD_VAR 0 7
82968: ARRAY
82969: PUSH
82970: LD_INT 1
82972: PLUS
82973: PUSH
82974: EMPTY
82975: LIST
82976: LIST
82977: PPUSH
82978: LD_VAR 0 4
82982: PUSH
82983: LD_VAR 0 2
82987: PUSH
82988: LD_VAR 0 3
82992: PUSH
82993: EMPTY
82994: LIST
82995: LIST
82996: LIST
82997: PPUSH
82998: CALL 50143 0 3
83002: ST_TO_ADDR
// exit ;
83003: POP
83004: POP
83005: POP
83006: POP
83007: GO 83017
// end ;
83009: GO 82916
83011: POP
83012: POP
// end ;
83013: GO 82724
83015: POP
83016: POP
// end ;
83017: LD_VAR 0 6
83021: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
83022: LD_INT 0
83024: PPUSH
83025: PPUSH
83026: PPUSH
83027: PPUSH
// if not mc_bases or not skirmish then
83028: LD_EXP 87
83032: NOT
83033: PUSH
83034: LD_EXP 85
83038: NOT
83039: OR
83040: IFFALSE 83044
// exit ;
83042: GO 83321
// side := GetSide ( lab ) ;
83044: LD_ADDR_VAR 0 4
83048: PUSH
83049: LD_VAR 0 2
83053: PPUSH
83054: CALL_OW 255
83058: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
83059: LD_VAR 0 4
83063: PUSH
83064: LD_EXP 113
83068: IN
83069: NOT
83070: PUSH
83071: LD_EXP 114
83075: NOT
83076: OR
83077: PUSH
83078: LD_EXP 87
83082: NOT
83083: OR
83084: IFFALSE 83088
// exit ;
83086: GO 83321
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
83088: LD_ADDR_EXP 114
83092: PUSH
83093: LD_EXP 114
83097: PPUSH
83098: LD_VAR 0 4
83102: PPUSH
83103: LD_EXP 114
83107: PUSH
83108: LD_VAR 0 4
83112: ARRAY
83113: PUSH
83114: LD_VAR 0 1
83118: DIFF
83119: PPUSH
83120: CALL_OW 1
83124: ST_TO_ADDR
// for i = 1 to mc_bases do
83125: LD_ADDR_VAR 0 5
83129: PUSH
83130: DOUBLE
83131: LD_INT 1
83133: DEC
83134: ST_TO_ADDR
83135: LD_EXP 87
83139: PUSH
83140: FOR_TO
83141: IFFALSE 83319
// begin if lab in mc_bases [ i ] then
83143: LD_VAR 0 2
83147: PUSH
83148: LD_EXP 87
83152: PUSH
83153: LD_VAR 0 5
83157: ARRAY
83158: IN
83159: IFFALSE 83317
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
83161: LD_VAR 0 1
83165: PUSH
83166: LD_INT 11
83168: PUSH
83169: LD_INT 4
83171: PUSH
83172: LD_INT 3
83174: PUSH
83175: LD_INT 2
83177: PUSH
83178: EMPTY
83179: LIST
83180: LIST
83181: LIST
83182: LIST
83183: IN
83184: PUSH
83185: LD_EXP 117
83189: PUSH
83190: LD_VAR 0 5
83194: ARRAY
83195: AND
83196: IFFALSE 83317
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
83198: LD_ADDR_VAR 0 6
83202: PUSH
83203: LD_EXP 117
83207: PUSH
83208: LD_VAR 0 5
83212: ARRAY
83213: PUSH
83214: LD_INT 1
83216: ARRAY
83217: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83218: LD_ADDR_EXP 117
83222: PUSH
83223: LD_EXP 117
83227: PPUSH
83228: LD_VAR 0 5
83232: PPUSH
83233: EMPTY
83234: PPUSH
83235: CALL_OW 1
83239: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
83240: LD_VAR 0 6
83244: PPUSH
83245: LD_INT 0
83247: PPUSH
83248: CALL_OW 109
// ComExitBuilding ( tmp ) ;
83252: LD_VAR 0 6
83256: PPUSH
83257: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
83261: LD_ADDR_EXP 116
83265: PUSH
83266: LD_EXP 116
83270: PPUSH
83271: LD_VAR 0 5
83275: PPUSH
83276: LD_EXP 116
83280: PUSH
83281: LD_VAR 0 5
83285: ARRAY
83286: PPUSH
83287: LD_INT 1
83289: PPUSH
83290: LD_VAR 0 6
83294: PPUSH
83295: CALL_OW 2
83299: PPUSH
83300: CALL_OW 1
83304: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
83305: LD_VAR 0 5
83309: PPUSH
83310: LD_INT 112
83312: PPUSH
83313: CALL 23985 0 2
// end ; end ; end ;
83317: GO 83140
83319: POP
83320: POP
// end ;
83321: LD_VAR 0 3
83325: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
83326: LD_INT 0
83328: PPUSH
83329: PPUSH
83330: PPUSH
83331: PPUSH
83332: PPUSH
83333: PPUSH
83334: PPUSH
83335: PPUSH
// if not mc_bases or not skirmish then
83336: LD_EXP 87
83340: NOT
83341: PUSH
83342: LD_EXP 85
83346: NOT
83347: OR
83348: IFFALSE 83352
// exit ;
83350: GO 84723
// for i = 1 to mc_bases do
83352: LD_ADDR_VAR 0 3
83356: PUSH
83357: DOUBLE
83358: LD_INT 1
83360: DEC
83361: ST_TO_ADDR
83362: LD_EXP 87
83366: PUSH
83367: FOR_TO
83368: IFFALSE 84721
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
83370: LD_VAR 0 1
83374: PUSH
83375: LD_EXP 87
83379: PUSH
83380: LD_VAR 0 3
83384: ARRAY
83385: IN
83386: PUSH
83387: LD_VAR 0 1
83391: PUSH
83392: LD_EXP 94
83396: PUSH
83397: LD_VAR 0 3
83401: ARRAY
83402: IN
83403: OR
83404: PUSH
83405: LD_VAR 0 1
83409: PUSH
83410: LD_EXP 109
83414: PUSH
83415: LD_VAR 0 3
83419: ARRAY
83420: IN
83421: OR
83422: PUSH
83423: LD_VAR 0 1
83427: PUSH
83428: LD_EXP 106
83432: PUSH
83433: LD_VAR 0 3
83437: ARRAY
83438: IN
83439: OR
83440: PUSH
83441: LD_VAR 0 1
83445: PUSH
83446: LD_EXP 116
83450: PUSH
83451: LD_VAR 0 3
83455: ARRAY
83456: IN
83457: OR
83458: PUSH
83459: LD_VAR 0 1
83463: PUSH
83464: LD_EXP 117
83468: PUSH
83469: LD_VAR 0 3
83473: ARRAY
83474: IN
83475: OR
83476: IFFALSE 84719
// begin if un in mc_ape [ i ] then
83478: LD_VAR 0 1
83482: PUSH
83483: LD_EXP 116
83487: PUSH
83488: LD_VAR 0 3
83492: ARRAY
83493: IN
83494: IFFALSE 83533
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83496: LD_ADDR_EXP 116
83500: PUSH
83501: LD_EXP 116
83505: PPUSH
83506: LD_VAR 0 3
83510: PPUSH
83511: LD_EXP 116
83515: PUSH
83516: LD_VAR 0 3
83520: ARRAY
83521: PUSH
83522: LD_VAR 0 1
83526: DIFF
83527: PPUSH
83528: CALL_OW 1
83532: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83533: LD_VAR 0 1
83537: PUSH
83538: LD_EXP 117
83542: PUSH
83543: LD_VAR 0 3
83547: ARRAY
83548: IN
83549: IFFALSE 83573
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83551: LD_ADDR_EXP 117
83555: PUSH
83556: LD_EXP 117
83560: PPUSH
83561: LD_VAR 0 3
83565: PPUSH
83566: EMPTY
83567: PPUSH
83568: CALL_OW 1
83572: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83573: LD_VAR 0 1
83577: PPUSH
83578: CALL_OW 247
83582: PUSH
83583: LD_INT 2
83585: EQUAL
83586: PUSH
83587: LD_VAR 0 1
83591: PPUSH
83592: CALL_OW 110
83596: PUSH
83597: LD_INT 20
83599: EQUAL
83600: PUSH
83601: LD_VAR 0 1
83605: PUSH
83606: LD_EXP 109
83610: PUSH
83611: LD_VAR 0 3
83615: ARRAY
83616: IN
83617: OR
83618: PUSH
83619: LD_VAR 0 1
83623: PPUSH
83624: CALL_OW 264
83628: PUSH
83629: LD_INT 12
83631: PUSH
83632: LD_INT 51
83634: PUSH
83635: LD_EXP 131
83639: PUSH
83640: LD_INT 32
83642: PUSH
83643: LD_INT 13
83645: PUSH
83646: LD_INT 52
83648: PUSH
83649: LD_INT 31
83651: PUSH
83652: EMPTY
83653: LIST
83654: LIST
83655: LIST
83656: LIST
83657: LIST
83658: LIST
83659: LIST
83660: IN
83661: OR
83662: AND
83663: IFFALSE 83971
// begin if un in mc_defender [ i ] then
83665: LD_VAR 0 1
83669: PUSH
83670: LD_EXP 109
83674: PUSH
83675: LD_VAR 0 3
83679: ARRAY
83680: IN
83681: IFFALSE 83720
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83683: LD_ADDR_EXP 109
83687: PUSH
83688: LD_EXP 109
83692: PPUSH
83693: LD_VAR 0 3
83697: PPUSH
83698: LD_EXP 109
83702: PUSH
83703: LD_VAR 0 3
83707: ARRAY
83708: PUSH
83709: LD_VAR 0 1
83713: DIFF
83714: PPUSH
83715: CALL_OW 1
83719: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83720: LD_ADDR_VAR 0 8
83724: PUSH
83725: LD_VAR 0 3
83729: PPUSH
83730: LD_INT 3
83732: PPUSH
83733: CALL 44041 0 2
83737: ST_TO_ADDR
// if fac then
83738: LD_VAR 0 8
83742: IFFALSE 83971
// begin for j in fac do
83744: LD_ADDR_VAR 0 4
83748: PUSH
83749: LD_VAR 0 8
83753: PUSH
83754: FOR_IN
83755: IFFALSE 83969
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83757: LD_ADDR_VAR 0 9
83761: PUSH
83762: LD_VAR 0 8
83766: PPUSH
83767: LD_VAR 0 1
83771: PPUSH
83772: CALL_OW 265
83776: PPUSH
83777: LD_VAR 0 1
83781: PPUSH
83782: CALL_OW 262
83786: PPUSH
83787: LD_VAR 0 1
83791: PPUSH
83792: CALL_OW 263
83796: PPUSH
83797: LD_VAR 0 1
83801: PPUSH
83802: CALL_OW 264
83806: PPUSH
83807: CALL 47675 0 5
83811: ST_TO_ADDR
// if components then
83812: LD_VAR 0 9
83816: IFFALSE 83967
// begin if GetWeapon ( un ) = ar_control_tower then
83818: LD_VAR 0 1
83822: PPUSH
83823: CALL_OW 264
83827: PUSH
83828: LD_INT 31
83830: EQUAL
83831: IFFALSE 83948
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83833: LD_VAR 0 1
83837: PPUSH
83838: CALL_OW 311
83842: PPUSH
83843: LD_INT 0
83845: PPUSH
83846: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83850: LD_ADDR_EXP 127
83854: PUSH
83855: LD_EXP 127
83859: PPUSH
83860: LD_VAR 0 3
83864: PPUSH
83865: LD_EXP 127
83869: PUSH
83870: LD_VAR 0 3
83874: ARRAY
83875: PUSH
83876: LD_VAR 0 1
83880: PPUSH
83881: CALL_OW 311
83885: DIFF
83886: PPUSH
83887: CALL_OW 1
83891: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83892: LD_ADDR_VAR 0 7
83896: PUSH
83897: LD_EXP 108
83901: PUSH
83902: LD_VAR 0 3
83906: ARRAY
83907: PPUSH
83908: LD_INT 1
83910: PPUSH
83911: LD_VAR 0 9
83915: PPUSH
83916: CALL_OW 2
83920: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83921: LD_ADDR_EXP 108
83925: PUSH
83926: LD_EXP 108
83930: PPUSH
83931: LD_VAR 0 3
83935: PPUSH
83936: LD_VAR 0 7
83940: PPUSH
83941: CALL_OW 1
83945: ST_TO_ADDR
// end else
83946: GO 83965
// MC_InsertProduceList ( i , [ components ] ) ;
83948: LD_VAR 0 3
83952: PPUSH
83953: LD_VAR 0 9
83957: PUSH
83958: EMPTY
83959: LIST
83960: PPUSH
83961: CALL 43586 0 2
// break ;
83965: GO 83969
// end ; end ;
83967: GO 83754
83969: POP
83970: POP
// end ; end ; if GetType ( un ) = unit_building then
83971: LD_VAR 0 1
83975: PPUSH
83976: CALL_OW 247
83980: PUSH
83981: LD_INT 3
83983: EQUAL
83984: IFFALSE 84387
// begin btype := GetBType ( un ) ;
83986: LD_ADDR_VAR 0 5
83990: PUSH
83991: LD_VAR 0 1
83995: PPUSH
83996: CALL_OW 266
84000: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
84001: LD_VAR 0 5
84005: PUSH
84006: LD_INT 29
84008: PUSH
84009: LD_INT 30
84011: PUSH
84012: EMPTY
84013: LIST
84014: LIST
84015: IN
84016: IFFALSE 84089
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
84018: LD_VAR 0 1
84022: PPUSH
84023: CALL_OW 250
84027: PPUSH
84028: LD_VAR 0 1
84032: PPUSH
84033: CALL_OW 251
84037: PPUSH
84038: LD_VAR 0 1
84042: PPUSH
84043: CALL_OW 255
84047: PPUSH
84048: CALL_OW 440
84052: NOT
84053: IFFALSE 84089
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
84055: LD_VAR 0 1
84059: PPUSH
84060: CALL_OW 250
84064: PPUSH
84065: LD_VAR 0 1
84069: PPUSH
84070: CALL_OW 251
84074: PPUSH
84075: LD_VAR 0 1
84079: PPUSH
84080: CALL_OW 255
84084: PPUSH
84085: CALL_OW 441
// end ; if btype = b_warehouse then
84089: LD_VAR 0 5
84093: PUSH
84094: LD_INT 1
84096: EQUAL
84097: IFFALSE 84115
// begin btype := b_depot ;
84099: LD_ADDR_VAR 0 5
84103: PUSH
84104: LD_INT 0
84106: ST_TO_ADDR
// pos := 1 ;
84107: LD_ADDR_VAR 0 6
84111: PUSH
84112: LD_INT 1
84114: ST_TO_ADDR
// end ; if btype = b_factory then
84115: LD_VAR 0 5
84119: PUSH
84120: LD_INT 3
84122: EQUAL
84123: IFFALSE 84141
// begin btype := b_workshop ;
84125: LD_ADDR_VAR 0 5
84129: PUSH
84130: LD_INT 2
84132: ST_TO_ADDR
// pos := 1 ;
84133: LD_ADDR_VAR 0 6
84137: PUSH
84138: LD_INT 1
84140: ST_TO_ADDR
// end ; if btype = b_barracks then
84141: LD_VAR 0 5
84145: PUSH
84146: LD_INT 5
84148: EQUAL
84149: IFFALSE 84159
// btype := b_armoury ;
84151: LD_ADDR_VAR 0 5
84155: PUSH
84156: LD_INT 4
84158: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
84159: LD_VAR 0 5
84163: PUSH
84164: LD_INT 7
84166: PUSH
84167: LD_INT 8
84169: PUSH
84170: EMPTY
84171: LIST
84172: LIST
84173: IN
84174: IFFALSE 84184
// btype := b_lab ;
84176: LD_ADDR_VAR 0 5
84180: PUSH
84181: LD_INT 6
84183: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
84184: LD_ADDR_EXP 92
84188: PUSH
84189: LD_EXP 92
84193: PPUSH
84194: LD_VAR 0 3
84198: PUSH
84199: LD_EXP 92
84203: PUSH
84204: LD_VAR 0 3
84208: ARRAY
84209: PUSH
84210: LD_INT 1
84212: PLUS
84213: PUSH
84214: EMPTY
84215: LIST
84216: LIST
84217: PPUSH
84218: LD_VAR 0 5
84222: PUSH
84223: LD_VAR 0 1
84227: PPUSH
84228: CALL_OW 250
84232: PUSH
84233: LD_VAR 0 1
84237: PPUSH
84238: CALL_OW 251
84242: PUSH
84243: LD_VAR 0 1
84247: PPUSH
84248: CALL_OW 254
84252: PUSH
84253: EMPTY
84254: LIST
84255: LIST
84256: LIST
84257: LIST
84258: PPUSH
84259: CALL 50143 0 3
84263: ST_TO_ADDR
// if pos = 1 then
84264: LD_VAR 0 6
84268: PUSH
84269: LD_INT 1
84271: EQUAL
84272: IFFALSE 84387
// begin tmp := mc_build_list [ i ] ;
84274: LD_ADDR_VAR 0 7
84278: PUSH
84279: LD_EXP 92
84283: PUSH
84284: LD_VAR 0 3
84288: ARRAY
84289: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
84290: LD_VAR 0 7
84294: PPUSH
84295: LD_INT 2
84297: PUSH
84298: LD_INT 30
84300: PUSH
84301: LD_INT 0
84303: PUSH
84304: EMPTY
84305: LIST
84306: LIST
84307: PUSH
84308: LD_INT 30
84310: PUSH
84311: LD_INT 1
84313: PUSH
84314: EMPTY
84315: LIST
84316: LIST
84317: PUSH
84318: EMPTY
84319: LIST
84320: LIST
84321: LIST
84322: PPUSH
84323: CALL_OW 72
84327: IFFALSE 84337
// pos := 2 ;
84329: LD_ADDR_VAR 0 6
84333: PUSH
84334: LD_INT 2
84336: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
84337: LD_ADDR_VAR 0 7
84341: PUSH
84342: LD_VAR 0 7
84346: PPUSH
84347: LD_VAR 0 6
84351: PPUSH
84352: LD_VAR 0 7
84356: PPUSH
84357: CALL 50469 0 3
84361: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
84362: LD_ADDR_EXP 92
84366: PUSH
84367: LD_EXP 92
84371: PPUSH
84372: LD_VAR 0 3
84376: PPUSH
84377: LD_VAR 0 7
84381: PPUSH
84382: CALL_OW 1
84386: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
84387: LD_VAR 0 1
84391: PUSH
84392: LD_EXP 87
84396: PUSH
84397: LD_VAR 0 3
84401: ARRAY
84402: IN
84403: IFFALSE 84442
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
84405: LD_ADDR_EXP 87
84409: PUSH
84410: LD_EXP 87
84414: PPUSH
84415: LD_VAR 0 3
84419: PPUSH
84420: LD_EXP 87
84424: PUSH
84425: LD_VAR 0 3
84429: ARRAY
84430: PUSH
84431: LD_VAR 0 1
84435: DIFF
84436: PPUSH
84437: CALL_OW 1
84441: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84442: LD_VAR 0 1
84446: PUSH
84447: LD_EXP 94
84451: PUSH
84452: LD_VAR 0 3
84456: ARRAY
84457: IN
84458: IFFALSE 84497
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84460: LD_ADDR_EXP 94
84464: PUSH
84465: LD_EXP 94
84469: PPUSH
84470: LD_VAR 0 3
84474: PPUSH
84475: LD_EXP 94
84479: PUSH
84480: LD_VAR 0 3
84484: ARRAY
84485: PUSH
84486: LD_VAR 0 1
84490: DIFF
84491: PPUSH
84492: CALL_OW 1
84496: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84497: LD_VAR 0 1
84501: PUSH
84502: LD_EXP 106
84506: PUSH
84507: LD_VAR 0 3
84511: ARRAY
84512: IN
84513: IFFALSE 84552
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84515: LD_ADDR_EXP 106
84519: PUSH
84520: LD_EXP 106
84524: PPUSH
84525: LD_VAR 0 3
84529: PPUSH
84530: LD_EXP 106
84534: PUSH
84535: LD_VAR 0 3
84539: ARRAY
84540: PUSH
84541: LD_VAR 0 1
84545: DIFF
84546: PPUSH
84547: CALL_OW 1
84551: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84552: LD_VAR 0 1
84556: PUSH
84557: LD_EXP 109
84561: PUSH
84562: LD_VAR 0 3
84566: ARRAY
84567: IN
84568: IFFALSE 84607
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84570: LD_ADDR_EXP 109
84574: PUSH
84575: LD_EXP 109
84579: PPUSH
84580: LD_VAR 0 3
84584: PPUSH
84585: LD_EXP 109
84589: PUSH
84590: LD_VAR 0 3
84594: ARRAY
84595: PUSH
84596: LD_VAR 0 1
84600: DIFF
84601: PPUSH
84602: CALL_OW 1
84606: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84607: LD_VAR 0 1
84611: PUSH
84612: LD_EXP 96
84616: PUSH
84617: LD_VAR 0 3
84621: ARRAY
84622: IN
84623: IFFALSE 84662
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84625: LD_ADDR_EXP 96
84629: PUSH
84630: LD_EXP 96
84634: PPUSH
84635: LD_VAR 0 3
84639: PPUSH
84640: LD_EXP 96
84644: PUSH
84645: LD_VAR 0 3
84649: ARRAY
84650: PUSH
84651: LD_VAR 0 1
84655: DIFF
84656: PPUSH
84657: CALL_OW 1
84661: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84662: LD_VAR 0 1
84666: PUSH
84667: LD_EXP 95
84671: PUSH
84672: LD_VAR 0 3
84676: ARRAY
84677: IN
84678: IFFALSE 84717
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84680: LD_ADDR_EXP 95
84684: PUSH
84685: LD_EXP 95
84689: PPUSH
84690: LD_VAR 0 3
84694: PPUSH
84695: LD_EXP 95
84699: PUSH
84700: LD_VAR 0 3
84704: ARRAY
84705: PUSH
84706: LD_VAR 0 1
84710: DIFF
84711: PPUSH
84712: CALL_OW 1
84716: ST_TO_ADDR
// end ; break ;
84717: GO 84721
// end ;
84719: GO 83367
84721: POP
84722: POP
// end ;
84723: LD_VAR 0 2
84727: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84728: LD_INT 0
84730: PPUSH
84731: PPUSH
84732: PPUSH
// if not mc_bases or not skirmish then
84733: LD_EXP 87
84737: NOT
84738: PUSH
84739: LD_EXP 85
84743: NOT
84744: OR
84745: IFFALSE 84749
// exit ;
84747: GO 84964
// for i = 1 to mc_bases do
84749: LD_ADDR_VAR 0 3
84753: PUSH
84754: DOUBLE
84755: LD_INT 1
84757: DEC
84758: ST_TO_ADDR
84759: LD_EXP 87
84763: PUSH
84764: FOR_TO
84765: IFFALSE 84962
// begin if building in mc_construct_list [ i ] then
84767: LD_VAR 0 1
84771: PUSH
84772: LD_EXP 94
84776: PUSH
84777: LD_VAR 0 3
84781: ARRAY
84782: IN
84783: IFFALSE 84960
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84785: LD_ADDR_EXP 94
84789: PUSH
84790: LD_EXP 94
84794: PPUSH
84795: LD_VAR 0 3
84799: PPUSH
84800: LD_EXP 94
84804: PUSH
84805: LD_VAR 0 3
84809: ARRAY
84810: PUSH
84811: LD_VAR 0 1
84815: DIFF
84816: PPUSH
84817: CALL_OW 1
84821: ST_TO_ADDR
// if building in mc_lab [ i ] then
84822: LD_VAR 0 1
84826: PUSH
84827: LD_EXP 120
84831: PUSH
84832: LD_VAR 0 3
84836: ARRAY
84837: IN
84838: IFFALSE 84893
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84840: LD_ADDR_EXP 121
84844: PUSH
84845: LD_EXP 121
84849: PPUSH
84850: LD_VAR 0 3
84854: PPUSH
84855: LD_EXP 121
84859: PUSH
84860: LD_VAR 0 3
84864: ARRAY
84865: PPUSH
84866: LD_INT 1
84868: PPUSH
84869: LD_EXP 121
84873: PUSH
84874: LD_VAR 0 3
84878: ARRAY
84879: PPUSH
84880: LD_INT 0
84882: PPUSH
84883: CALL 49561 0 4
84887: PPUSH
84888: CALL_OW 1
84892: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84893: LD_VAR 0 1
84897: PUSH
84898: LD_EXP 87
84902: PUSH
84903: LD_VAR 0 3
84907: ARRAY
84908: IN
84909: NOT
84910: IFFALSE 84956
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84912: LD_ADDR_EXP 87
84916: PUSH
84917: LD_EXP 87
84921: PPUSH
84922: LD_VAR 0 3
84926: PUSH
84927: LD_EXP 87
84931: PUSH
84932: LD_VAR 0 3
84936: ARRAY
84937: PUSH
84938: LD_INT 1
84940: PLUS
84941: PUSH
84942: EMPTY
84943: LIST
84944: LIST
84945: PPUSH
84946: LD_VAR 0 1
84950: PPUSH
84951: CALL 50143 0 3
84955: ST_TO_ADDR
// exit ;
84956: POP
84957: POP
84958: GO 84964
// end ; end ;
84960: GO 84764
84962: POP
84963: POP
// end ;
84964: LD_VAR 0 2
84968: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84969: LD_INT 0
84971: PPUSH
84972: PPUSH
84973: PPUSH
84974: PPUSH
84975: PPUSH
84976: PPUSH
84977: PPUSH
// if not mc_bases or not skirmish then
84978: LD_EXP 87
84982: NOT
84983: PUSH
84984: LD_EXP 85
84988: NOT
84989: OR
84990: IFFALSE 84994
// exit ;
84992: GO 85655
// for i = 1 to mc_bases do
84994: LD_ADDR_VAR 0 3
84998: PUSH
84999: DOUBLE
85000: LD_INT 1
85002: DEC
85003: ST_TO_ADDR
85004: LD_EXP 87
85008: PUSH
85009: FOR_TO
85010: IFFALSE 85653
// begin if building in mc_construct_list [ i ] then
85012: LD_VAR 0 1
85016: PUSH
85017: LD_EXP 94
85021: PUSH
85022: LD_VAR 0 3
85026: ARRAY
85027: IN
85028: IFFALSE 85651
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
85030: LD_ADDR_EXP 94
85034: PUSH
85035: LD_EXP 94
85039: PPUSH
85040: LD_VAR 0 3
85044: PPUSH
85045: LD_EXP 94
85049: PUSH
85050: LD_VAR 0 3
85054: ARRAY
85055: PUSH
85056: LD_VAR 0 1
85060: DIFF
85061: PPUSH
85062: CALL_OW 1
85066: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
85067: LD_ADDR_EXP 87
85071: PUSH
85072: LD_EXP 87
85076: PPUSH
85077: LD_VAR 0 3
85081: PUSH
85082: LD_EXP 87
85086: PUSH
85087: LD_VAR 0 3
85091: ARRAY
85092: PUSH
85093: LD_INT 1
85095: PLUS
85096: PUSH
85097: EMPTY
85098: LIST
85099: LIST
85100: PPUSH
85101: LD_VAR 0 1
85105: PPUSH
85106: CALL 50143 0 3
85110: ST_TO_ADDR
// btype := GetBType ( building ) ;
85111: LD_ADDR_VAR 0 5
85115: PUSH
85116: LD_VAR 0 1
85120: PPUSH
85121: CALL_OW 266
85125: ST_TO_ADDR
// side := GetSide ( building ) ;
85126: LD_ADDR_VAR 0 8
85130: PUSH
85131: LD_VAR 0 1
85135: PPUSH
85136: CALL_OW 255
85140: ST_TO_ADDR
// if btype = b_lab then
85141: LD_VAR 0 5
85145: PUSH
85146: LD_INT 6
85148: EQUAL
85149: IFFALSE 85199
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
85151: LD_ADDR_EXP 120
85155: PUSH
85156: LD_EXP 120
85160: PPUSH
85161: LD_VAR 0 3
85165: PUSH
85166: LD_EXP 120
85170: PUSH
85171: LD_VAR 0 3
85175: ARRAY
85176: PUSH
85177: LD_INT 1
85179: PLUS
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: PPUSH
85185: LD_VAR 0 1
85189: PPUSH
85190: CALL 50143 0 3
85194: ST_TO_ADDR
// exit ;
85195: POP
85196: POP
85197: GO 85655
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
85199: LD_VAR 0 5
85203: PUSH
85204: LD_INT 0
85206: PUSH
85207: LD_INT 2
85209: PUSH
85210: LD_INT 4
85212: PUSH
85213: EMPTY
85214: LIST
85215: LIST
85216: LIST
85217: IN
85218: IFFALSE 85342
// begin if btype = b_armoury then
85220: LD_VAR 0 5
85224: PUSH
85225: LD_INT 4
85227: EQUAL
85228: IFFALSE 85238
// btype := b_barracks ;
85230: LD_ADDR_VAR 0 5
85234: PUSH
85235: LD_INT 5
85237: ST_TO_ADDR
// if btype = b_depot then
85238: LD_VAR 0 5
85242: PUSH
85243: LD_INT 0
85245: EQUAL
85246: IFFALSE 85256
// btype := b_warehouse ;
85248: LD_ADDR_VAR 0 5
85252: PUSH
85253: LD_INT 1
85255: ST_TO_ADDR
// if btype = b_workshop then
85256: LD_VAR 0 5
85260: PUSH
85261: LD_INT 2
85263: EQUAL
85264: IFFALSE 85274
// btype := b_factory ;
85266: LD_ADDR_VAR 0 5
85270: PUSH
85271: LD_INT 3
85273: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
85274: LD_VAR 0 5
85278: PPUSH
85279: LD_VAR 0 8
85283: PPUSH
85284: CALL_OW 323
85288: PUSH
85289: LD_INT 1
85291: EQUAL
85292: IFFALSE 85338
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
85294: LD_ADDR_EXP 119
85298: PUSH
85299: LD_EXP 119
85303: PPUSH
85304: LD_VAR 0 3
85308: PUSH
85309: LD_EXP 119
85313: PUSH
85314: LD_VAR 0 3
85318: ARRAY
85319: PUSH
85320: LD_INT 1
85322: PLUS
85323: PUSH
85324: EMPTY
85325: LIST
85326: LIST
85327: PPUSH
85328: LD_VAR 0 1
85332: PPUSH
85333: CALL 50143 0 3
85337: ST_TO_ADDR
// exit ;
85338: POP
85339: POP
85340: GO 85655
// end ; if btype in [ b_bunker , b_turret ] then
85342: LD_VAR 0 5
85346: PUSH
85347: LD_INT 32
85349: PUSH
85350: LD_INT 33
85352: PUSH
85353: EMPTY
85354: LIST
85355: LIST
85356: IN
85357: IFFALSE 85647
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
85359: LD_ADDR_EXP 95
85363: PUSH
85364: LD_EXP 95
85368: PPUSH
85369: LD_VAR 0 3
85373: PUSH
85374: LD_EXP 95
85378: PUSH
85379: LD_VAR 0 3
85383: ARRAY
85384: PUSH
85385: LD_INT 1
85387: PLUS
85388: PUSH
85389: EMPTY
85390: LIST
85391: LIST
85392: PPUSH
85393: LD_VAR 0 1
85397: PPUSH
85398: CALL 50143 0 3
85402: ST_TO_ADDR
// if btype = b_bunker then
85403: LD_VAR 0 5
85407: PUSH
85408: LD_INT 32
85410: EQUAL
85411: IFFALSE 85647
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85413: LD_ADDR_EXP 96
85417: PUSH
85418: LD_EXP 96
85422: PPUSH
85423: LD_VAR 0 3
85427: PUSH
85428: LD_EXP 96
85432: PUSH
85433: LD_VAR 0 3
85437: ARRAY
85438: PUSH
85439: LD_INT 1
85441: PLUS
85442: PUSH
85443: EMPTY
85444: LIST
85445: LIST
85446: PPUSH
85447: LD_VAR 0 1
85451: PPUSH
85452: CALL 50143 0 3
85456: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85457: LD_ADDR_VAR 0 6
85461: PUSH
85462: LD_EXP 87
85466: PUSH
85467: LD_VAR 0 3
85471: ARRAY
85472: PPUSH
85473: LD_INT 25
85475: PUSH
85476: LD_INT 1
85478: PUSH
85479: EMPTY
85480: LIST
85481: LIST
85482: PUSH
85483: LD_INT 3
85485: PUSH
85486: LD_INT 54
85488: PUSH
85489: EMPTY
85490: LIST
85491: PUSH
85492: EMPTY
85493: LIST
85494: LIST
85495: PUSH
85496: EMPTY
85497: LIST
85498: LIST
85499: PPUSH
85500: CALL_OW 72
85504: ST_TO_ADDR
// if tmp then
85505: LD_VAR 0 6
85509: IFFALSE 85515
// exit ;
85511: POP
85512: POP
85513: GO 85655
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85515: LD_ADDR_VAR 0 6
85519: PUSH
85520: LD_EXP 87
85524: PUSH
85525: LD_VAR 0 3
85529: ARRAY
85530: PPUSH
85531: LD_INT 2
85533: PUSH
85534: LD_INT 30
85536: PUSH
85537: LD_INT 4
85539: PUSH
85540: EMPTY
85541: LIST
85542: LIST
85543: PUSH
85544: LD_INT 30
85546: PUSH
85547: LD_INT 5
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: PUSH
85554: EMPTY
85555: LIST
85556: LIST
85557: LIST
85558: PPUSH
85559: CALL_OW 72
85563: ST_TO_ADDR
// if not tmp then
85564: LD_VAR 0 6
85568: NOT
85569: IFFALSE 85575
// exit ;
85571: POP
85572: POP
85573: GO 85655
// for j in tmp do
85575: LD_ADDR_VAR 0 4
85579: PUSH
85580: LD_VAR 0 6
85584: PUSH
85585: FOR_IN
85586: IFFALSE 85645
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85588: LD_ADDR_VAR 0 7
85592: PUSH
85593: LD_VAR 0 4
85597: PPUSH
85598: CALL_OW 313
85602: PPUSH
85603: LD_INT 25
85605: PUSH
85606: LD_INT 1
85608: PUSH
85609: EMPTY
85610: LIST
85611: LIST
85612: PPUSH
85613: CALL_OW 72
85617: ST_TO_ADDR
// if units then
85618: LD_VAR 0 7
85622: IFFALSE 85643
// begin ComExitBuilding ( units [ 1 ] ) ;
85624: LD_VAR 0 7
85628: PUSH
85629: LD_INT 1
85631: ARRAY
85632: PPUSH
85633: CALL_OW 122
// exit ;
85637: POP
85638: POP
85639: POP
85640: POP
85641: GO 85655
// end ; end ;
85643: GO 85585
85645: POP
85646: POP
// end ; end ; exit ;
85647: POP
85648: POP
85649: GO 85655
// end ; end ;
85651: GO 85009
85653: POP
85654: POP
// end ;
85655: LD_VAR 0 2
85659: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85660: LD_INT 0
85662: PPUSH
85663: PPUSH
85664: PPUSH
85665: PPUSH
85666: PPUSH
85667: PPUSH
85668: PPUSH
// if not mc_bases or not skirmish then
85669: LD_EXP 87
85673: NOT
85674: PUSH
85675: LD_EXP 85
85679: NOT
85680: OR
85681: IFFALSE 85685
// exit ;
85683: GO 85916
// btype := GetBType ( building ) ;
85685: LD_ADDR_VAR 0 6
85689: PUSH
85690: LD_VAR 0 1
85694: PPUSH
85695: CALL_OW 266
85699: ST_TO_ADDR
// x := GetX ( building ) ;
85700: LD_ADDR_VAR 0 7
85704: PUSH
85705: LD_VAR 0 1
85709: PPUSH
85710: CALL_OW 250
85714: ST_TO_ADDR
// y := GetY ( building ) ;
85715: LD_ADDR_VAR 0 8
85719: PUSH
85720: LD_VAR 0 1
85724: PPUSH
85725: CALL_OW 251
85729: ST_TO_ADDR
// d := GetDir ( building ) ;
85730: LD_ADDR_VAR 0 9
85734: PUSH
85735: LD_VAR 0 1
85739: PPUSH
85740: CALL_OW 254
85744: ST_TO_ADDR
// for i = 1 to mc_bases do
85745: LD_ADDR_VAR 0 4
85749: PUSH
85750: DOUBLE
85751: LD_INT 1
85753: DEC
85754: ST_TO_ADDR
85755: LD_EXP 87
85759: PUSH
85760: FOR_TO
85761: IFFALSE 85914
// begin if not mc_build_list [ i ] then
85763: LD_EXP 92
85767: PUSH
85768: LD_VAR 0 4
85772: ARRAY
85773: NOT
85774: IFFALSE 85778
// continue ;
85776: GO 85760
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85778: LD_VAR 0 6
85782: PUSH
85783: LD_VAR 0 7
85787: PUSH
85788: LD_VAR 0 8
85792: PUSH
85793: LD_VAR 0 9
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: LIST
85802: LIST
85803: PPUSH
85804: LD_EXP 92
85808: PUSH
85809: LD_VAR 0 4
85813: ARRAY
85814: PUSH
85815: LD_INT 1
85817: ARRAY
85818: PPUSH
85819: CALL 56312 0 2
85823: IFFALSE 85912
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85825: LD_ADDR_EXP 92
85829: PUSH
85830: LD_EXP 92
85834: PPUSH
85835: LD_VAR 0 4
85839: PPUSH
85840: LD_EXP 92
85844: PUSH
85845: LD_VAR 0 4
85849: ARRAY
85850: PPUSH
85851: LD_INT 1
85853: PPUSH
85854: CALL_OW 3
85858: PPUSH
85859: CALL_OW 1
85863: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85864: LD_ADDR_EXP 94
85868: PUSH
85869: LD_EXP 94
85873: PPUSH
85874: LD_VAR 0 4
85878: PUSH
85879: LD_EXP 94
85883: PUSH
85884: LD_VAR 0 4
85888: ARRAY
85889: PUSH
85890: LD_INT 1
85892: PLUS
85893: PUSH
85894: EMPTY
85895: LIST
85896: LIST
85897: PPUSH
85898: LD_VAR 0 1
85902: PPUSH
85903: CALL 50143 0 3
85907: ST_TO_ADDR
// exit ;
85908: POP
85909: POP
85910: GO 85916
// end ; end ;
85912: GO 85760
85914: POP
85915: POP
// end ;
85916: LD_VAR 0 3
85920: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85921: LD_INT 0
85923: PPUSH
85924: PPUSH
85925: PPUSH
// if not mc_bases or not skirmish then
85926: LD_EXP 87
85930: NOT
85931: PUSH
85932: LD_EXP 85
85936: NOT
85937: OR
85938: IFFALSE 85942
// exit ;
85940: GO 86132
// for i = 1 to mc_bases do
85942: LD_ADDR_VAR 0 4
85946: PUSH
85947: DOUBLE
85948: LD_INT 1
85950: DEC
85951: ST_TO_ADDR
85952: LD_EXP 87
85956: PUSH
85957: FOR_TO
85958: IFFALSE 86045
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85960: LD_VAR 0 1
85964: PUSH
85965: LD_EXP 95
85969: PUSH
85970: LD_VAR 0 4
85974: ARRAY
85975: IN
85976: PUSH
85977: LD_VAR 0 1
85981: PUSH
85982: LD_EXP 96
85986: PUSH
85987: LD_VAR 0 4
85991: ARRAY
85992: IN
85993: NOT
85994: AND
85995: IFFALSE 86043
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85997: LD_ADDR_EXP 96
86001: PUSH
86002: LD_EXP 96
86006: PPUSH
86007: LD_VAR 0 4
86011: PUSH
86012: LD_EXP 96
86016: PUSH
86017: LD_VAR 0 4
86021: ARRAY
86022: PUSH
86023: LD_INT 1
86025: PLUS
86026: PUSH
86027: EMPTY
86028: LIST
86029: LIST
86030: PPUSH
86031: LD_VAR 0 1
86035: PPUSH
86036: CALL 50143 0 3
86040: ST_TO_ADDR
// break ;
86041: GO 86045
// end ; end ;
86043: GO 85957
86045: POP
86046: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
86047: LD_VAR 0 1
86051: PPUSH
86052: CALL_OW 257
86056: PUSH
86057: LD_EXP 113
86061: IN
86062: PUSH
86063: LD_VAR 0 1
86067: PPUSH
86068: CALL_OW 266
86072: PUSH
86073: LD_INT 5
86075: EQUAL
86076: AND
86077: PUSH
86078: LD_VAR 0 2
86082: PPUSH
86083: CALL_OW 110
86087: PUSH
86088: LD_INT 18
86090: NONEQUAL
86091: AND
86092: IFFALSE 86132
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
86094: LD_VAR 0 2
86098: PPUSH
86099: CALL_OW 257
86103: PUSH
86104: LD_INT 5
86106: PUSH
86107: LD_INT 8
86109: PUSH
86110: LD_INT 9
86112: PUSH
86113: EMPTY
86114: LIST
86115: LIST
86116: LIST
86117: IN
86118: IFFALSE 86132
// SetClass ( unit , 1 ) ;
86120: LD_VAR 0 2
86124: PPUSH
86125: LD_INT 1
86127: PPUSH
86128: CALL_OW 336
// end ;
86132: LD_VAR 0 3
86136: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
86137: LD_INT 0
86139: PPUSH
86140: PPUSH
// if not mc_bases or not skirmish then
86141: LD_EXP 87
86145: NOT
86146: PUSH
86147: LD_EXP 85
86151: NOT
86152: OR
86153: IFFALSE 86157
// exit ;
86155: GO 86273
// if GetLives ( abandoned_vehicle ) > 250 then
86157: LD_VAR 0 2
86161: PPUSH
86162: CALL_OW 256
86166: PUSH
86167: LD_INT 250
86169: GREATER
86170: IFFALSE 86174
// exit ;
86172: GO 86273
// for i = 1 to mc_bases do
86174: LD_ADDR_VAR 0 6
86178: PUSH
86179: DOUBLE
86180: LD_INT 1
86182: DEC
86183: ST_TO_ADDR
86184: LD_EXP 87
86188: PUSH
86189: FOR_TO
86190: IFFALSE 86271
// begin if driver in mc_bases [ i ] then
86192: LD_VAR 0 1
86196: PUSH
86197: LD_EXP 87
86201: PUSH
86202: LD_VAR 0 6
86206: ARRAY
86207: IN
86208: IFFALSE 86269
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
86210: LD_VAR 0 1
86214: PPUSH
86215: LD_EXP 87
86219: PUSH
86220: LD_VAR 0 6
86224: ARRAY
86225: PPUSH
86226: LD_INT 2
86228: PUSH
86229: LD_INT 30
86231: PUSH
86232: LD_INT 0
86234: PUSH
86235: EMPTY
86236: LIST
86237: LIST
86238: PUSH
86239: LD_INT 30
86241: PUSH
86242: LD_INT 1
86244: PUSH
86245: EMPTY
86246: LIST
86247: LIST
86248: PUSH
86249: EMPTY
86250: LIST
86251: LIST
86252: LIST
86253: PPUSH
86254: CALL_OW 72
86258: PUSH
86259: LD_INT 1
86261: ARRAY
86262: PPUSH
86263: CALL_OW 112
// break ;
86267: GO 86271
// end ; end ;
86269: GO 86189
86271: POP
86272: POP
// end ; end_of_file
86273: LD_VAR 0 5
86277: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
86278: LD_INT 0
86280: PPUSH
86281: PPUSH
86282: PPUSH
86283: PPUSH
86284: PPUSH
86285: PPUSH
86286: PPUSH
86287: PPUSH
86288: PPUSH
86289: PPUSH
86290: PPUSH
86291: PPUSH
86292: PPUSH
86293: PPUSH
86294: PPUSH
86295: PPUSH
86296: PPUSH
86297: PPUSH
86298: PPUSH
86299: PPUSH
86300: PPUSH
86301: PPUSH
86302: PPUSH
86303: PPUSH
86304: PPUSH
86305: PPUSH
86306: PPUSH
86307: PPUSH
86308: PPUSH
86309: PPUSH
86310: PPUSH
86311: PPUSH
86312: PPUSH
86313: PPUSH
// if not list then
86314: LD_VAR 0 1
86318: NOT
86319: IFFALSE 86323
// exit ;
86321: GO 90982
// base := list [ 1 ] ;
86323: LD_ADDR_VAR 0 3
86327: PUSH
86328: LD_VAR 0 1
86332: PUSH
86333: LD_INT 1
86335: ARRAY
86336: ST_TO_ADDR
// group := list [ 2 ] ;
86337: LD_ADDR_VAR 0 4
86341: PUSH
86342: LD_VAR 0 1
86346: PUSH
86347: LD_INT 2
86349: ARRAY
86350: ST_TO_ADDR
// path := list [ 3 ] ;
86351: LD_ADDR_VAR 0 5
86355: PUSH
86356: LD_VAR 0 1
86360: PUSH
86361: LD_INT 3
86363: ARRAY
86364: ST_TO_ADDR
// flags := list [ 4 ] ;
86365: LD_ADDR_VAR 0 6
86369: PUSH
86370: LD_VAR 0 1
86374: PUSH
86375: LD_INT 4
86377: ARRAY
86378: ST_TO_ADDR
// mined := [ ] ;
86379: LD_ADDR_VAR 0 27
86383: PUSH
86384: EMPTY
86385: ST_TO_ADDR
// bombed := [ ] ;
86386: LD_ADDR_VAR 0 28
86390: PUSH
86391: EMPTY
86392: ST_TO_ADDR
// healers := [ ] ;
86393: LD_ADDR_VAR 0 31
86397: PUSH
86398: EMPTY
86399: ST_TO_ADDR
// to_heal := [ ] ;
86400: LD_ADDR_VAR 0 30
86404: PUSH
86405: EMPTY
86406: ST_TO_ADDR
// repairs := [ ] ;
86407: LD_ADDR_VAR 0 33
86411: PUSH
86412: EMPTY
86413: ST_TO_ADDR
// to_repair := [ ] ;
86414: LD_ADDR_VAR 0 32
86418: PUSH
86419: EMPTY
86420: ST_TO_ADDR
// if not group or not path then
86421: LD_VAR 0 4
86425: NOT
86426: PUSH
86427: LD_VAR 0 5
86431: NOT
86432: OR
86433: IFFALSE 86437
// exit ;
86435: GO 90982
// side := GetSide ( group [ 1 ] ) ;
86437: LD_ADDR_VAR 0 35
86441: PUSH
86442: LD_VAR 0 4
86446: PUSH
86447: LD_INT 1
86449: ARRAY
86450: PPUSH
86451: CALL_OW 255
86455: ST_TO_ADDR
// if flags then
86456: LD_VAR 0 6
86460: IFFALSE 86604
// begin f_ignore_area := flags [ 1 ] ;
86462: LD_ADDR_VAR 0 17
86466: PUSH
86467: LD_VAR 0 6
86471: PUSH
86472: LD_INT 1
86474: ARRAY
86475: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
86476: LD_ADDR_VAR 0 18
86480: PUSH
86481: LD_VAR 0 6
86485: PUSH
86486: LD_INT 2
86488: ARRAY
86489: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
86490: LD_ADDR_VAR 0 19
86494: PUSH
86495: LD_VAR 0 6
86499: PUSH
86500: LD_INT 3
86502: ARRAY
86503: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
86504: LD_ADDR_VAR 0 20
86508: PUSH
86509: LD_VAR 0 6
86513: PUSH
86514: LD_INT 4
86516: ARRAY
86517: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
86518: LD_ADDR_VAR 0 21
86522: PUSH
86523: LD_VAR 0 6
86527: PUSH
86528: LD_INT 5
86530: ARRAY
86531: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
86532: LD_ADDR_VAR 0 22
86536: PUSH
86537: LD_VAR 0 6
86541: PUSH
86542: LD_INT 6
86544: ARRAY
86545: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
86546: LD_ADDR_VAR 0 23
86550: PUSH
86551: LD_VAR 0 6
86555: PUSH
86556: LD_INT 7
86558: ARRAY
86559: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
86560: LD_ADDR_VAR 0 24
86564: PUSH
86565: LD_VAR 0 6
86569: PUSH
86570: LD_INT 8
86572: ARRAY
86573: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
86574: LD_ADDR_VAR 0 25
86578: PUSH
86579: LD_VAR 0 6
86583: PUSH
86584: LD_INT 9
86586: ARRAY
86587: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
86588: LD_ADDR_VAR 0 26
86592: PUSH
86593: LD_VAR 0 6
86597: PUSH
86598: LD_INT 10
86600: ARRAY
86601: ST_TO_ADDR
// end else
86602: GO 86684
// begin f_ignore_area := false ;
86604: LD_ADDR_VAR 0 17
86608: PUSH
86609: LD_INT 0
86611: ST_TO_ADDR
// f_capture := false ;
86612: LD_ADDR_VAR 0 18
86616: PUSH
86617: LD_INT 0
86619: ST_TO_ADDR
// f_ignore_civ := false ;
86620: LD_ADDR_VAR 0 19
86624: PUSH
86625: LD_INT 0
86627: ST_TO_ADDR
// f_murder := false ;
86628: LD_ADDR_VAR 0 20
86632: PUSH
86633: LD_INT 0
86635: ST_TO_ADDR
// f_mines := false ;
86636: LD_ADDR_VAR 0 21
86640: PUSH
86641: LD_INT 0
86643: ST_TO_ADDR
// f_repair := false ;
86644: LD_ADDR_VAR 0 22
86648: PUSH
86649: LD_INT 0
86651: ST_TO_ADDR
// f_heal := false ;
86652: LD_ADDR_VAR 0 23
86656: PUSH
86657: LD_INT 0
86659: ST_TO_ADDR
// f_spacetime := false ;
86660: LD_ADDR_VAR 0 24
86664: PUSH
86665: LD_INT 0
86667: ST_TO_ADDR
// f_attack_depot := false ;
86668: LD_ADDR_VAR 0 25
86672: PUSH
86673: LD_INT 0
86675: ST_TO_ADDR
// f_crawl := false ;
86676: LD_ADDR_VAR 0 26
86680: PUSH
86681: LD_INT 0
86683: ST_TO_ADDR
// end ; if f_heal then
86684: LD_VAR 0 23
86688: IFFALSE 86715
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
86690: LD_ADDR_VAR 0 31
86694: PUSH
86695: LD_VAR 0 4
86699: PPUSH
86700: LD_INT 25
86702: PUSH
86703: LD_INT 4
86705: PUSH
86706: EMPTY
86707: LIST
86708: LIST
86709: PPUSH
86710: CALL_OW 72
86714: ST_TO_ADDR
// if f_repair then
86715: LD_VAR 0 22
86719: IFFALSE 86746
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
86721: LD_ADDR_VAR 0 33
86725: PUSH
86726: LD_VAR 0 4
86730: PPUSH
86731: LD_INT 25
86733: PUSH
86734: LD_INT 3
86736: PUSH
86737: EMPTY
86738: LIST
86739: LIST
86740: PPUSH
86741: CALL_OW 72
86745: ST_TO_ADDR
// units_path := [ ] ;
86746: LD_ADDR_VAR 0 16
86750: PUSH
86751: EMPTY
86752: ST_TO_ADDR
// for i = 1 to group do
86753: LD_ADDR_VAR 0 7
86757: PUSH
86758: DOUBLE
86759: LD_INT 1
86761: DEC
86762: ST_TO_ADDR
86763: LD_VAR 0 4
86767: PUSH
86768: FOR_TO
86769: IFFALSE 86798
// units_path := Replace ( units_path , i , path ) ;
86771: LD_ADDR_VAR 0 16
86775: PUSH
86776: LD_VAR 0 16
86780: PPUSH
86781: LD_VAR 0 7
86785: PPUSH
86786: LD_VAR 0 5
86790: PPUSH
86791: CALL_OW 1
86795: ST_TO_ADDR
86796: GO 86768
86798: POP
86799: POP
// repeat for i = group downto 1 do
86800: LD_ADDR_VAR 0 7
86804: PUSH
86805: DOUBLE
86806: LD_VAR 0 4
86810: INC
86811: ST_TO_ADDR
86812: LD_INT 1
86814: PUSH
86815: FOR_DOWNTO
86816: IFFALSE 90938
// begin wait ( 5 ) ;
86818: LD_INT 5
86820: PPUSH
86821: CALL_OW 67
// tmp := [ ] ;
86825: LD_ADDR_VAR 0 14
86829: PUSH
86830: EMPTY
86831: ST_TO_ADDR
// attacking := false ;
86832: LD_ADDR_VAR 0 29
86836: PUSH
86837: LD_INT 0
86839: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
86840: LD_VAR 0 4
86844: PUSH
86845: LD_VAR 0 7
86849: ARRAY
86850: PPUSH
86851: CALL_OW 301
86855: PUSH
86856: LD_VAR 0 4
86860: PUSH
86861: LD_VAR 0 7
86865: ARRAY
86866: NOT
86867: OR
86868: IFFALSE 86977
// begin if GetType ( group [ i ] ) = unit_human then
86870: LD_VAR 0 4
86874: PUSH
86875: LD_VAR 0 7
86879: ARRAY
86880: PPUSH
86881: CALL_OW 247
86885: PUSH
86886: LD_INT 1
86888: EQUAL
86889: IFFALSE 86935
// begin to_heal := to_heal diff group [ i ] ;
86891: LD_ADDR_VAR 0 30
86895: PUSH
86896: LD_VAR 0 30
86900: PUSH
86901: LD_VAR 0 4
86905: PUSH
86906: LD_VAR 0 7
86910: ARRAY
86911: DIFF
86912: ST_TO_ADDR
// healers := healers diff group [ i ] ;
86913: LD_ADDR_VAR 0 31
86917: PUSH
86918: LD_VAR 0 31
86922: PUSH
86923: LD_VAR 0 4
86927: PUSH
86928: LD_VAR 0 7
86932: ARRAY
86933: DIFF
86934: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
86935: LD_ADDR_VAR 0 4
86939: PUSH
86940: LD_VAR 0 4
86944: PPUSH
86945: LD_VAR 0 7
86949: PPUSH
86950: CALL_OW 3
86954: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
86955: LD_ADDR_VAR 0 16
86959: PUSH
86960: LD_VAR 0 16
86964: PPUSH
86965: LD_VAR 0 7
86969: PPUSH
86970: CALL_OW 3
86974: ST_TO_ADDR
// continue ;
86975: GO 86815
// end ; if f_repair then
86977: LD_VAR 0 22
86981: IFFALSE 87470
// begin if GetType ( group [ i ] ) = unit_vehicle then
86983: LD_VAR 0 4
86987: PUSH
86988: LD_VAR 0 7
86992: ARRAY
86993: PPUSH
86994: CALL_OW 247
86998: PUSH
86999: LD_INT 2
87001: EQUAL
87002: IFFALSE 87192
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
87004: LD_VAR 0 4
87008: PUSH
87009: LD_VAR 0 7
87013: ARRAY
87014: PPUSH
87015: CALL_OW 256
87019: PUSH
87020: LD_INT 700
87022: LESS
87023: PUSH
87024: LD_VAR 0 4
87028: PUSH
87029: LD_VAR 0 7
87033: ARRAY
87034: PUSH
87035: LD_VAR 0 32
87039: IN
87040: NOT
87041: AND
87042: IFFALSE 87066
// to_repair := to_repair union group [ i ] ;
87044: LD_ADDR_VAR 0 32
87048: PUSH
87049: LD_VAR 0 32
87053: PUSH
87054: LD_VAR 0 4
87058: PUSH
87059: LD_VAR 0 7
87063: ARRAY
87064: UNION
87065: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
87066: LD_VAR 0 4
87070: PUSH
87071: LD_VAR 0 7
87075: ARRAY
87076: PPUSH
87077: CALL_OW 256
87081: PUSH
87082: LD_INT 1000
87084: EQUAL
87085: PUSH
87086: LD_VAR 0 4
87090: PUSH
87091: LD_VAR 0 7
87095: ARRAY
87096: PUSH
87097: LD_VAR 0 32
87101: IN
87102: AND
87103: IFFALSE 87127
// to_repair := to_repair diff group [ i ] ;
87105: LD_ADDR_VAR 0 32
87109: PUSH
87110: LD_VAR 0 32
87114: PUSH
87115: LD_VAR 0 4
87119: PUSH
87120: LD_VAR 0 7
87124: ARRAY
87125: DIFF
87126: ST_TO_ADDR
// if group [ i ] in to_repair then
87127: LD_VAR 0 4
87131: PUSH
87132: LD_VAR 0 7
87136: ARRAY
87137: PUSH
87138: LD_VAR 0 32
87142: IN
87143: IFFALSE 87190
// begin if not IsInArea ( group [ i ] , f_repair ) then
87145: LD_VAR 0 4
87149: PUSH
87150: LD_VAR 0 7
87154: ARRAY
87155: PPUSH
87156: LD_VAR 0 22
87160: PPUSH
87161: CALL_OW 308
87165: NOT
87166: IFFALSE 87188
// ComMoveToArea ( group [ i ] , f_repair ) ;
87168: LD_VAR 0 4
87172: PUSH
87173: LD_VAR 0 7
87177: ARRAY
87178: PPUSH
87179: LD_VAR 0 22
87183: PPUSH
87184: CALL_OW 113
// continue ;
87188: GO 86815
// end ; end else
87190: GO 87470
// if group [ i ] in repairs then
87192: LD_VAR 0 4
87196: PUSH
87197: LD_VAR 0 7
87201: ARRAY
87202: PUSH
87203: LD_VAR 0 33
87207: IN
87208: IFFALSE 87470
// begin if IsInUnit ( group [ i ] ) then
87210: LD_VAR 0 4
87214: PUSH
87215: LD_VAR 0 7
87219: ARRAY
87220: PPUSH
87221: CALL_OW 310
87225: IFFALSE 87293
// begin z := IsInUnit ( group [ i ] ) ;
87227: LD_ADDR_VAR 0 13
87231: PUSH
87232: LD_VAR 0 4
87236: PUSH
87237: LD_VAR 0 7
87241: ARRAY
87242: PPUSH
87243: CALL_OW 310
87247: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
87248: LD_VAR 0 13
87252: PUSH
87253: LD_VAR 0 32
87257: IN
87258: PUSH
87259: LD_VAR 0 13
87263: PPUSH
87264: LD_VAR 0 22
87268: PPUSH
87269: CALL_OW 308
87273: AND
87274: IFFALSE 87291
// ComExitVehicle ( group [ i ] ) ;
87276: LD_VAR 0 4
87280: PUSH
87281: LD_VAR 0 7
87285: ARRAY
87286: PPUSH
87287: CALL_OW 121
// end else
87291: GO 87470
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
87293: LD_ADDR_VAR 0 13
87297: PUSH
87298: LD_VAR 0 4
87302: PPUSH
87303: LD_INT 95
87305: PUSH
87306: LD_VAR 0 22
87310: PUSH
87311: EMPTY
87312: LIST
87313: LIST
87314: PUSH
87315: LD_INT 58
87317: PUSH
87318: EMPTY
87319: LIST
87320: PUSH
87321: EMPTY
87322: LIST
87323: LIST
87324: PPUSH
87325: CALL_OW 72
87329: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
87330: LD_VAR 0 4
87334: PUSH
87335: LD_VAR 0 7
87339: ARRAY
87340: PPUSH
87341: CALL_OW 314
87345: NOT
87346: IFFALSE 87468
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
87348: LD_ADDR_VAR 0 10
87352: PUSH
87353: LD_VAR 0 13
87357: PPUSH
87358: LD_VAR 0 4
87362: PUSH
87363: LD_VAR 0 7
87367: ARRAY
87368: PPUSH
87369: CALL_OW 74
87373: ST_TO_ADDR
// if not x then
87374: LD_VAR 0 10
87378: NOT
87379: IFFALSE 87383
// continue ;
87381: GO 86815
// if GetLives ( x ) < 1000 then
87383: LD_VAR 0 10
87387: PPUSH
87388: CALL_OW 256
87392: PUSH
87393: LD_INT 1000
87395: LESS
87396: IFFALSE 87420
// ComRepairVehicle ( group [ i ] , x ) else
87398: LD_VAR 0 4
87402: PUSH
87403: LD_VAR 0 7
87407: ARRAY
87408: PPUSH
87409: LD_VAR 0 10
87413: PPUSH
87414: CALL_OW 129
87418: GO 87468
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
87420: LD_VAR 0 23
87424: PUSH
87425: LD_VAR 0 4
87429: PUSH
87430: LD_VAR 0 7
87434: ARRAY
87435: PPUSH
87436: CALL_OW 256
87440: PUSH
87441: LD_INT 1000
87443: LESS
87444: AND
87445: NOT
87446: IFFALSE 87468
// ComEnterUnit ( group [ i ] , x ) ;
87448: LD_VAR 0 4
87452: PUSH
87453: LD_VAR 0 7
87457: ARRAY
87458: PPUSH
87459: LD_VAR 0 10
87463: PPUSH
87464: CALL_OW 120
// end ; continue ;
87468: GO 86815
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
87470: LD_VAR 0 23
87474: PUSH
87475: LD_VAR 0 4
87479: PUSH
87480: LD_VAR 0 7
87484: ARRAY
87485: PPUSH
87486: CALL_OW 247
87490: PUSH
87491: LD_INT 1
87493: EQUAL
87494: AND
87495: IFFALSE 87973
// begin if group [ i ] in healers then
87497: LD_VAR 0 4
87501: PUSH
87502: LD_VAR 0 7
87506: ARRAY
87507: PUSH
87508: LD_VAR 0 31
87512: IN
87513: IFFALSE 87786
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
87515: LD_VAR 0 4
87519: PUSH
87520: LD_VAR 0 7
87524: ARRAY
87525: PPUSH
87526: LD_VAR 0 23
87530: PPUSH
87531: CALL_OW 308
87535: NOT
87536: PUSH
87537: LD_VAR 0 4
87541: PUSH
87542: LD_VAR 0 7
87546: ARRAY
87547: PPUSH
87548: CALL_OW 314
87552: NOT
87553: AND
87554: IFFALSE 87578
// ComMoveToArea ( group [ i ] , f_heal ) else
87556: LD_VAR 0 4
87560: PUSH
87561: LD_VAR 0 7
87565: ARRAY
87566: PPUSH
87567: LD_VAR 0 23
87571: PPUSH
87572: CALL_OW 113
87576: GO 87784
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
87578: LD_VAR 0 4
87582: PUSH
87583: LD_VAR 0 7
87587: ARRAY
87588: PPUSH
87589: CALL 78515 0 1
87593: PPUSH
87594: CALL_OW 256
87598: PUSH
87599: LD_INT 1000
87601: EQUAL
87602: IFFALSE 87621
// ComStop ( group [ i ] ) else
87604: LD_VAR 0 4
87608: PUSH
87609: LD_VAR 0 7
87613: ARRAY
87614: PPUSH
87615: CALL_OW 141
87619: GO 87784
// if not HasTask ( group [ i ] ) and to_heal then
87621: LD_VAR 0 4
87625: PUSH
87626: LD_VAR 0 7
87630: ARRAY
87631: PPUSH
87632: CALL_OW 314
87636: NOT
87637: PUSH
87638: LD_VAR 0 30
87642: AND
87643: IFFALSE 87784
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
87645: LD_ADDR_VAR 0 13
87649: PUSH
87650: LD_VAR 0 30
87654: PPUSH
87655: LD_INT 3
87657: PUSH
87658: LD_INT 54
87660: PUSH
87661: EMPTY
87662: LIST
87663: PUSH
87664: EMPTY
87665: LIST
87666: LIST
87667: PPUSH
87668: CALL_OW 72
87672: PPUSH
87673: LD_VAR 0 4
87677: PUSH
87678: LD_VAR 0 7
87682: ARRAY
87683: PPUSH
87684: CALL_OW 74
87688: ST_TO_ADDR
// if z then
87689: LD_VAR 0 13
87693: IFFALSE 87784
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
87695: LD_INT 91
87697: PUSH
87698: LD_VAR 0 13
87702: PUSH
87703: LD_INT 10
87705: PUSH
87706: EMPTY
87707: LIST
87708: LIST
87709: LIST
87710: PUSH
87711: LD_INT 81
87713: PUSH
87714: LD_VAR 0 13
87718: PPUSH
87719: CALL_OW 255
87723: PUSH
87724: EMPTY
87725: LIST
87726: LIST
87727: PUSH
87728: EMPTY
87729: LIST
87730: LIST
87731: PPUSH
87732: CALL_OW 69
87736: PUSH
87737: LD_INT 0
87739: EQUAL
87740: IFFALSE 87764
// ComHeal ( group [ i ] , z ) else
87742: LD_VAR 0 4
87746: PUSH
87747: LD_VAR 0 7
87751: ARRAY
87752: PPUSH
87753: LD_VAR 0 13
87757: PPUSH
87758: CALL_OW 128
87762: GO 87784
// ComMoveToArea ( group [ i ] , f_heal ) ;
87764: LD_VAR 0 4
87768: PUSH
87769: LD_VAR 0 7
87773: ARRAY
87774: PPUSH
87775: LD_VAR 0 23
87779: PPUSH
87780: CALL_OW 113
// end ; continue ;
87784: GO 86815
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
87786: LD_VAR 0 4
87790: PUSH
87791: LD_VAR 0 7
87795: ARRAY
87796: PPUSH
87797: CALL_OW 256
87801: PUSH
87802: LD_INT 700
87804: LESS
87805: PUSH
87806: LD_VAR 0 4
87810: PUSH
87811: LD_VAR 0 7
87815: ARRAY
87816: PUSH
87817: LD_VAR 0 30
87821: IN
87822: NOT
87823: AND
87824: IFFALSE 87848
// to_heal := to_heal union group [ i ] ;
87826: LD_ADDR_VAR 0 30
87830: PUSH
87831: LD_VAR 0 30
87835: PUSH
87836: LD_VAR 0 4
87840: PUSH
87841: LD_VAR 0 7
87845: ARRAY
87846: UNION
87847: ST_TO_ADDR
// if group [ i ] in to_heal then
87848: LD_VAR 0 4
87852: PUSH
87853: LD_VAR 0 7
87857: ARRAY
87858: PUSH
87859: LD_VAR 0 30
87863: IN
87864: IFFALSE 87973
// begin if GetLives ( group [ i ] ) = 1000 then
87866: LD_VAR 0 4
87870: PUSH
87871: LD_VAR 0 7
87875: ARRAY
87876: PPUSH
87877: CALL_OW 256
87881: PUSH
87882: LD_INT 1000
87884: EQUAL
87885: IFFALSE 87911
// to_heal := to_heal diff group [ i ] else
87887: LD_ADDR_VAR 0 30
87891: PUSH
87892: LD_VAR 0 30
87896: PUSH
87897: LD_VAR 0 4
87901: PUSH
87902: LD_VAR 0 7
87906: ARRAY
87907: DIFF
87908: ST_TO_ADDR
87909: GO 87973
// begin if not IsInArea ( group [ i ] , to_heal ) then
87911: LD_VAR 0 4
87915: PUSH
87916: LD_VAR 0 7
87920: ARRAY
87921: PPUSH
87922: LD_VAR 0 30
87926: PPUSH
87927: CALL_OW 308
87931: NOT
87932: IFFALSE 87956
// ComMoveToArea ( group [ i ] , f_heal ) else
87934: LD_VAR 0 4
87938: PUSH
87939: LD_VAR 0 7
87943: ARRAY
87944: PPUSH
87945: LD_VAR 0 23
87949: PPUSH
87950: CALL_OW 113
87954: GO 87971
// ComHold ( group [ i ] ) ;
87956: LD_VAR 0 4
87960: PUSH
87961: LD_VAR 0 7
87965: ARRAY
87966: PPUSH
87967: CALL_OW 140
// continue ;
87971: GO 86815
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
87973: LD_VAR 0 4
87977: PUSH
87978: LD_VAR 0 7
87982: ARRAY
87983: PPUSH
87984: LD_INT 10
87986: PPUSH
87987: CALL 76935 0 2
87991: NOT
87992: PUSH
87993: LD_VAR 0 16
87997: PUSH
87998: LD_VAR 0 7
88002: ARRAY
88003: PUSH
88004: EMPTY
88005: EQUAL
88006: NOT
88007: AND
88008: IFFALSE 88274
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
88010: LD_VAR 0 4
88014: PUSH
88015: LD_VAR 0 7
88019: ARRAY
88020: PPUSH
88021: CALL_OW 262
88025: PUSH
88026: LD_INT 1
88028: PUSH
88029: LD_INT 2
88031: PUSH
88032: EMPTY
88033: LIST
88034: LIST
88035: IN
88036: IFFALSE 88077
// if GetFuel ( group [ i ] ) < 10 then
88038: LD_VAR 0 4
88042: PUSH
88043: LD_VAR 0 7
88047: ARRAY
88048: PPUSH
88049: CALL_OW 261
88053: PUSH
88054: LD_INT 10
88056: LESS
88057: IFFALSE 88077
// SetFuel ( group [ i ] , 12 ) ;
88059: LD_VAR 0 4
88063: PUSH
88064: LD_VAR 0 7
88068: ARRAY
88069: PPUSH
88070: LD_INT 12
88072: PPUSH
88073: CALL_OW 240
// if units_path [ i ] then
88077: LD_VAR 0 16
88081: PUSH
88082: LD_VAR 0 7
88086: ARRAY
88087: IFFALSE 88272
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
88089: LD_VAR 0 4
88093: PUSH
88094: LD_VAR 0 7
88098: ARRAY
88099: PPUSH
88100: LD_VAR 0 16
88104: PUSH
88105: LD_VAR 0 7
88109: ARRAY
88110: PUSH
88111: LD_INT 1
88113: ARRAY
88114: PUSH
88115: LD_INT 1
88117: ARRAY
88118: PPUSH
88119: LD_VAR 0 16
88123: PUSH
88124: LD_VAR 0 7
88128: ARRAY
88129: PUSH
88130: LD_INT 1
88132: ARRAY
88133: PUSH
88134: LD_INT 2
88136: ARRAY
88137: PPUSH
88138: CALL_OW 297
88142: PUSH
88143: LD_INT 6
88145: GREATER
88146: IFFALSE 88221
// begin if not HasTask ( group [ i ] ) then
88148: LD_VAR 0 4
88152: PUSH
88153: LD_VAR 0 7
88157: ARRAY
88158: PPUSH
88159: CALL_OW 314
88163: NOT
88164: IFFALSE 88219
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
88166: LD_VAR 0 4
88170: PUSH
88171: LD_VAR 0 7
88175: ARRAY
88176: PPUSH
88177: LD_VAR 0 16
88181: PUSH
88182: LD_VAR 0 7
88186: ARRAY
88187: PUSH
88188: LD_INT 1
88190: ARRAY
88191: PUSH
88192: LD_INT 1
88194: ARRAY
88195: PPUSH
88196: LD_VAR 0 16
88200: PUSH
88201: LD_VAR 0 7
88205: ARRAY
88206: PUSH
88207: LD_INT 1
88209: ARRAY
88210: PUSH
88211: LD_INT 2
88213: ARRAY
88214: PPUSH
88215: CALL_OW 114
// end else
88219: GO 88272
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
88221: LD_ADDR_VAR 0 15
88225: PUSH
88226: LD_VAR 0 16
88230: PUSH
88231: LD_VAR 0 7
88235: ARRAY
88236: PPUSH
88237: LD_INT 1
88239: PPUSH
88240: CALL_OW 3
88244: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
88245: LD_ADDR_VAR 0 16
88249: PUSH
88250: LD_VAR 0 16
88254: PPUSH
88255: LD_VAR 0 7
88259: PPUSH
88260: LD_VAR 0 15
88264: PPUSH
88265: CALL_OW 1
88269: ST_TO_ADDR
// continue ;
88270: GO 86815
// end ; end ; end else
88272: GO 90936
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
88274: LD_ADDR_VAR 0 14
88278: PUSH
88279: LD_INT 81
88281: PUSH
88282: LD_VAR 0 4
88286: PUSH
88287: LD_VAR 0 7
88291: ARRAY
88292: PPUSH
88293: CALL_OW 255
88297: PUSH
88298: EMPTY
88299: LIST
88300: LIST
88301: PPUSH
88302: CALL_OW 69
88306: ST_TO_ADDR
// if not tmp then
88307: LD_VAR 0 14
88311: NOT
88312: IFFALSE 88316
// continue ;
88314: GO 86815
// if f_ignore_area then
88316: LD_VAR 0 17
88320: IFFALSE 88408
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
88322: LD_ADDR_VAR 0 15
88326: PUSH
88327: LD_VAR 0 14
88331: PPUSH
88332: LD_INT 3
88334: PUSH
88335: LD_INT 92
88337: PUSH
88338: LD_VAR 0 17
88342: PUSH
88343: LD_INT 1
88345: ARRAY
88346: PUSH
88347: LD_VAR 0 17
88351: PUSH
88352: LD_INT 2
88354: ARRAY
88355: PUSH
88356: LD_VAR 0 17
88360: PUSH
88361: LD_INT 3
88363: ARRAY
88364: PUSH
88365: EMPTY
88366: LIST
88367: LIST
88368: LIST
88369: LIST
88370: PUSH
88371: EMPTY
88372: LIST
88373: LIST
88374: PPUSH
88375: CALL_OW 72
88379: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
88380: LD_VAR 0 14
88384: PUSH
88385: LD_VAR 0 15
88389: DIFF
88390: IFFALSE 88408
// tmp := tmp diff tmp2 ;
88392: LD_ADDR_VAR 0 14
88396: PUSH
88397: LD_VAR 0 14
88401: PUSH
88402: LD_VAR 0 15
88406: DIFF
88407: ST_TO_ADDR
// end ; if not f_murder then
88408: LD_VAR 0 20
88412: NOT
88413: IFFALSE 88471
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
88415: LD_ADDR_VAR 0 15
88419: PUSH
88420: LD_VAR 0 14
88424: PPUSH
88425: LD_INT 3
88427: PUSH
88428: LD_INT 50
88430: PUSH
88431: EMPTY
88432: LIST
88433: PUSH
88434: EMPTY
88435: LIST
88436: LIST
88437: PPUSH
88438: CALL_OW 72
88442: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
88443: LD_VAR 0 14
88447: PUSH
88448: LD_VAR 0 15
88452: DIFF
88453: IFFALSE 88471
// tmp := tmp diff tmp2 ;
88455: LD_ADDR_VAR 0 14
88459: PUSH
88460: LD_VAR 0 14
88464: PUSH
88465: LD_VAR 0 15
88469: DIFF
88470: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
88471: LD_ADDR_VAR 0 14
88475: PUSH
88476: LD_VAR 0 4
88480: PUSH
88481: LD_VAR 0 7
88485: ARRAY
88486: PPUSH
88487: LD_VAR 0 14
88491: PPUSH
88492: LD_INT 1
88494: PPUSH
88495: LD_INT 1
88497: PPUSH
88498: CALL 50578 0 4
88502: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
88503: LD_VAR 0 4
88507: PUSH
88508: LD_VAR 0 7
88512: ARRAY
88513: PPUSH
88514: CALL_OW 257
88518: PUSH
88519: LD_INT 1
88521: EQUAL
88522: IFFALSE 88970
// begin if WantPlant ( group [ i ] ) then
88524: LD_VAR 0 4
88528: PUSH
88529: LD_VAR 0 7
88533: ARRAY
88534: PPUSH
88535: CALL 50079 0 1
88539: IFFALSE 88543
// continue ;
88541: GO 86815
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
88543: LD_VAR 0 18
88547: PUSH
88548: LD_VAR 0 4
88552: PUSH
88553: LD_VAR 0 7
88557: ARRAY
88558: PPUSH
88559: CALL_OW 310
88563: NOT
88564: AND
88565: PUSH
88566: LD_VAR 0 14
88570: PUSH
88571: LD_INT 1
88573: ARRAY
88574: PUSH
88575: LD_VAR 0 14
88579: PPUSH
88580: LD_INT 21
88582: PUSH
88583: LD_INT 2
88585: PUSH
88586: EMPTY
88587: LIST
88588: LIST
88589: PUSH
88590: LD_INT 58
88592: PUSH
88593: EMPTY
88594: LIST
88595: PUSH
88596: EMPTY
88597: LIST
88598: LIST
88599: PPUSH
88600: CALL_OW 72
88604: IN
88605: AND
88606: IFFALSE 88642
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
88608: LD_VAR 0 4
88612: PUSH
88613: LD_VAR 0 7
88617: ARRAY
88618: PPUSH
88619: LD_VAR 0 14
88623: PUSH
88624: LD_INT 1
88626: ARRAY
88627: PPUSH
88628: CALL_OW 120
// attacking := true ;
88632: LD_ADDR_VAR 0 29
88636: PUSH
88637: LD_INT 1
88639: ST_TO_ADDR
// continue ;
88640: GO 86815
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
88642: LD_VAR 0 26
88646: PUSH
88647: LD_VAR 0 4
88651: PUSH
88652: LD_VAR 0 7
88656: ARRAY
88657: PPUSH
88658: CALL_OW 257
88662: PUSH
88663: LD_INT 1
88665: EQUAL
88666: AND
88667: PUSH
88668: LD_VAR 0 4
88672: PUSH
88673: LD_VAR 0 7
88677: ARRAY
88678: PPUSH
88679: CALL_OW 256
88683: PUSH
88684: LD_INT 800
88686: LESS
88687: AND
88688: PUSH
88689: LD_VAR 0 4
88693: PUSH
88694: LD_VAR 0 7
88698: ARRAY
88699: PPUSH
88700: CALL_OW 318
88704: NOT
88705: AND
88706: IFFALSE 88723
// ComCrawl ( group [ i ] ) ;
88708: LD_VAR 0 4
88712: PUSH
88713: LD_VAR 0 7
88717: ARRAY
88718: PPUSH
88719: CALL_OW 137
// if f_mines then
88723: LD_VAR 0 21
88727: IFFALSE 88970
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
88729: LD_VAR 0 14
88733: PUSH
88734: LD_INT 1
88736: ARRAY
88737: PPUSH
88738: CALL_OW 247
88742: PUSH
88743: LD_INT 3
88745: EQUAL
88746: PUSH
88747: LD_VAR 0 14
88751: PUSH
88752: LD_INT 1
88754: ARRAY
88755: PUSH
88756: LD_VAR 0 27
88760: IN
88761: NOT
88762: AND
88763: IFFALSE 88970
// begin x := GetX ( tmp [ 1 ] ) ;
88765: LD_ADDR_VAR 0 10
88769: PUSH
88770: LD_VAR 0 14
88774: PUSH
88775: LD_INT 1
88777: ARRAY
88778: PPUSH
88779: CALL_OW 250
88783: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
88784: LD_ADDR_VAR 0 11
88788: PUSH
88789: LD_VAR 0 14
88793: PUSH
88794: LD_INT 1
88796: ARRAY
88797: PPUSH
88798: CALL_OW 251
88802: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
88803: LD_ADDR_VAR 0 12
88807: PUSH
88808: LD_VAR 0 4
88812: PUSH
88813: LD_VAR 0 7
88817: ARRAY
88818: PPUSH
88819: CALL 77020 0 1
88823: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
88824: LD_VAR 0 4
88828: PUSH
88829: LD_VAR 0 7
88833: ARRAY
88834: PPUSH
88835: LD_VAR 0 10
88839: PPUSH
88840: LD_VAR 0 11
88844: PPUSH
88845: LD_VAR 0 14
88849: PUSH
88850: LD_INT 1
88852: ARRAY
88853: PPUSH
88854: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
88858: LD_VAR 0 4
88862: PUSH
88863: LD_VAR 0 7
88867: ARRAY
88868: PPUSH
88869: LD_VAR 0 10
88873: PPUSH
88874: LD_VAR 0 12
88878: PPUSH
88879: LD_INT 7
88881: PPUSH
88882: CALL_OW 272
88886: PPUSH
88887: LD_VAR 0 11
88891: PPUSH
88892: LD_VAR 0 12
88896: PPUSH
88897: LD_INT 7
88899: PPUSH
88900: CALL_OW 273
88904: PPUSH
88905: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
88909: LD_VAR 0 4
88913: PUSH
88914: LD_VAR 0 7
88918: ARRAY
88919: PPUSH
88920: LD_INT 71
88922: PPUSH
88923: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
88927: LD_ADDR_VAR 0 27
88931: PUSH
88932: LD_VAR 0 27
88936: PPUSH
88937: LD_VAR 0 27
88941: PUSH
88942: LD_INT 1
88944: PLUS
88945: PPUSH
88946: LD_VAR 0 14
88950: PUSH
88951: LD_INT 1
88953: ARRAY
88954: PPUSH
88955: CALL_OW 1
88959: ST_TO_ADDR
// attacking := true ;
88960: LD_ADDR_VAR 0 29
88964: PUSH
88965: LD_INT 1
88967: ST_TO_ADDR
// continue ;
88968: GO 86815
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
88970: LD_VAR 0 4
88974: PUSH
88975: LD_VAR 0 7
88979: ARRAY
88980: PPUSH
88981: CALL_OW 257
88985: PUSH
88986: LD_INT 17
88988: EQUAL
88989: PUSH
88990: LD_VAR 0 4
88994: PUSH
88995: LD_VAR 0 7
88999: ARRAY
89000: PPUSH
89001: CALL_OW 110
89005: PUSH
89006: LD_INT 71
89008: EQUAL
89009: NOT
89010: AND
89011: IFFALSE 89157
// begin attacking := false ;
89013: LD_ADDR_VAR 0 29
89017: PUSH
89018: LD_INT 0
89020: ST_TO_ADDR
// k := 5 ;
89021: LD_ADDR_VAR 0 9
89025: PUSH
89026: LD_INT 5
89028: ST_TO_ADDR
// if tmp < k then
89029: LD_VAR 0 14
89033: PUSH
89034: LD_VAR 0 9
89038: LESS
89039: IFFALSE 89051
// k := tmp ;
89041: LD_ADDR_VAR 0 9
89045: PUSH
89046: LD_VAR 0 14
89050: ST_TO_ADDR
// for j = 1 to k do
89051: LD_ADDR_VAR 0 8
89055: PUSH
89056: DOUBLE
89057: LD_INT 1
89059: DEC
89060: ST_TO_ADDR
89061: LD_VAR 0 9
89065: PUSH
89066: FOR_TO
89067: IFFALSE 89155
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
89069: LD_VAR 0 14
89073: PUSH
89074: LD_VAR 0 8
89078: ARRAY
89079: PUSH
89080: LD_VAR 0 14
89084: PPUSH
89085: LD_INT 58
89087: PUSH
89088: EMPTY
89089: LIST
89090: PPUSH
89091: CALL_OW 72
89095: IN
89096: NOT
89097: IFFALSE 89153
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
89099: LD_VAR 0 4
89103: PUSH
89104: LD_VAR 0 7
89108: ARRAY
89109: PPUSH
89110: LD_VAR 0 14
89114: PUSH
89115: LD_VAR 0 8
89119: ARRAY
89120: PPUSH
89121: CALL_OW 115
// attacking := true ;
89125: LD_ADDR_VAR 0 29
89129: PUSH
89130: LD_INT 1
89132: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
89133: LD_VAR 0 4
89137: PUSH
89138: LD_VAR 0 7
89142: ARRAY
89143: PPUSH
89144: LD_INT 71
89146: PPUSH
89147: CALL_OW 109
// continue ;
89151: GO 89066
// end ; end ;
89153: GO 89066
89155: POP
89156: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
89157: LD_VAR 0 4
89161: PUSH
89162: LD_VAR 0 7
89166: ARRAY
89167: PPUSH
89168: CALL_OW 257
89172: PUSH
89173: LD_INT 8
89175: EQUAL
89176: PUSH
89177: LD_VAR 0 4
89181: PUSH
89182: LD_VAR 0 7
89186: ARRAY
89187: PPUSH
89188: CALL_OW 264
89192: PUSH
89193: LD_INT 28
89195: PUSH
89196: LD_INT 45
89198: PUSH
89199: LD_INT 7
89201: PUSH
89202: LD_INT 47
89204: PUSH
89205: EMPTY
89206: LIST
89207: LIST
89208: LIST
89209: LIST
89210: IN
89211: OR
89212: IFFALSE 89468
// begin attacking := false ;
89214: LD_ADDR_VAR 0 29
89218: PUSH
89219: LD_INT 0
89221: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
89222: LD_VAR 0 14
89226: PUSH
89227: LD_INT 1
89229: ARRAY
89230: PPUSH
89231: CALL_OW 266
89235: PUSH
89236: LD_INT 32
89238: PUSH
89239: LD_INT 31
89241: PUSH
89242: LD_INT 33
89244: PUSH
89245: LD_INT 4
89247: PUSH
89248: LD_INT 5
89250: PUSH
89251: EMPTY
89252: LIST
89253: LIST
89254: LIST
89255: LIST
89256: LIST
89257: IN
89258: IFFALSE 89444
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
89260: LD_ADDR_VAR 0 9
89264: PUSH
89265: LD_VAR 0 14
89269: PUSH
89270: LD_INT 1
89272: ARRAY
89273: PPUSH
89274: CALL_OW 266
89278: PPUSH
89279: LD_VAR 0 14
89283: PUSH
89284: LD_INT 1
89286: ARRAY
89287: PPUSH
89288: CALL_OW 250
89292: PPUSH
89293: LD_VAR 0 14
89297: PUSH
89298: LD_INT 1
89300: ARRAY
89301: PPUSH
89302: CALL_OW 251
89306: PPUSH
89307: LD_VAR 0 14
89311: PUSH
89312: LD_INT 1
89314: ARRAY
89315: PPUSH
89316: CALL_OW 254
89320: PPUSH
89321: LD_VAR 0 14
89325: PUSH
89326: LD_INT 1
89328: ARRAY
89329: PPUSH
89330: CALL_OW 248
89334: PPUSH
89335: LD_INT 0
89337: PPUSH
89338: CALL 58390 0 6
89342: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
89343: LD_ADDR_VAR 0 8
89347: PUSH
89348: LD_VAR 0 4
89352: PUSH
89353: LD_VAR 0 7
89357: ARRAY
89358: PPUSH
89359: LD_VAR 0 9
89363: PPUSH
89364: CALL 77060 0 2
89368: ST_TO_ADDR
// if j then
89369: LD_VAR 0 8
89373: IFFALSE 89442
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
89375: LD_VAR 0 8
89379: PUSH
89380: LD_INT 1
89382: ARRAY
89383: PPUSH
89384: LD_VAR 0 8
89388: PUSH
89389: LD_INT 2
89391: ARRAY
89392: PPUSH
89393: CALL_OW 488
89397: IFFALSE 89442
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
89399: LD_VAR 0 4
89403: PUSH
89404: LD_VAR 0 7
89408: ARRAY
89409: PPUSH
89410: LD_VAR 0 8
89414: PUSH
89415: LD_INT 1
89417: ARRAY
89418: PPUSH
89419: LD_VAR 0 8
89423: PUSH
89424: LD_INT 2
89426: ARRAY
89427: PPUSH
89428: CALL_OW 116
// attacking := true ;
89432: LD_ADDR_VAR 0 29
89436: PUSH
89437: LD_INT 1
89439: ST_TO_ADDR
// continue ;
89440: GO 86815
// end ; end else
89442: GO 89468
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
89444: LD_VAR 0 4
89448: PUSH
89449: LD_VAR 0 7
89453: ARRAY
89454: PPUSH
89455: LD_VAR 0 14
89459: PUSH
89460: LD_INT 1
89462: ARRAY
89463: PPUSH
89464: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
89468: LD_VAR 0 4
89472: PUSH
89473: LD_VAR 0 7
89477: ARRAY
89478: PPUSH
89479: CALL_OW 265
89483: PUSH
89484: LD_INT 11
89486: EQUAL
89487: IFFALSE 89765
// begin k := 10 ;
89489: LD_ADDR_VAR 0 9
89493: PUSH
89494: LD_INT 10
89496: ST_TO_ADDR
// x := 0 ;
89497: LD_ADDR_VAR 0 10
89501: PUSH
89502: LD_INT 0
89504: ST_TO_ADDR
// if tmp < k then
89505: LD_VAR 0 14
89509: PUSH
89510: LD_VAR 0 9
89514: LESS
89515: IFFALSE 89527
// k := tmp ;
89517: LD_ADDR_VAR 0 9
89521: PUSH
89522: LD_VAR 0 14
89526: ST_TO_ADDR
// for j = k downto 1 do
89527: LD_ADDR_VAR 0 8
89531: PUSH
89532: DOUBLE
89533: LD_VAR 0 9
89537: INC
89538: ST_TO_ADDR
89539: LD_INT 1
89541: PUSH
89542: FOR_DOWNTO
89543: IFFALSE 89618
// begin if GetType ( tmp [ j ] ) = unit_human then
89545: LD_VAR 0 14
89549: PUSH
89550: LD_VAR 0 8
89554: ARRAY
89555: PPUSH
89556: CALL_OW 247
89560: PUSH
89561: LD_INT 1
89563: EQUAL
89564: IFFALSE 89616
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
89566: LD_VAR 0 4
89570: PUSH
89571: LD_VAR 0 7
89575: ARRAY
89576: PPUSH
89577: LD_VAR 0 14
89581: PUSH
89582: LD_VAR 0 8
89586: ARRAY
89587: PPUSH
89588: CALL 77331 0 2
// x := tmp [ j ] ;
89592: LD_ADDR_VAR 0 10
89596: PUSH
89597: LD_VAR 0 14
89601: PUSH
89602: LD_VAR 0 8
89606: ARRAY
89607: ST_TO_ADDR
// attacking := true ;
89608: LD_ADDR_VAR 0 29
89612: PUSH
89613: LD_INT 1
89615: ST_TO_ADDR
// end ; end ;
89616: GO 89542
89618: POP
89619: POP
// if not x then
89620: LD_VAR 0 10
89624: NOT
89625: IFFALSE 89765
// begin attacking := true ;
89627: LD_ADDR_VAR 0 29
89631: PUSH
89632: LD_INT 1
89634: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
89635: LD_VAR 0 4
89639: PUSH
89640: LD_VAR 0 7
89644: ARRAY
89645: PPUSH
89646: CALL_OW 250
89650: PPUSH
89651: LD_VAR 0 4
89655: PUSH
89656: LD_VAR 0 7
89660: ARRAY
89661: PPUSH
89662: CALL_OW 251
89666: PPUSH
89667: CALL_OW 546
89671: PUSH
89672: LD_INT 2
89674: ARRAY
89675: PUSH
89676: LD_VAR 0 14
89680: PUSH
89681: LD_INT 1
89683: ARRAY
89684: PPUSH
89685: CALL_OW 250
89689: PPUSH
89690: LD_VAR 0 14
89694: PUSH
89695: LD_INT 1
89697: ARRAY
89698: PPUSH
89699: CALL_OW 251
89703: PPUSH
89704: CALL_OW 546
89708: PUSH
89709: LD_INT 2
89711: ARRAY
89712: EQUAL
89713: IFFALSE 89741
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
89715: LD_VAR 0 4
89719: PUSH
89720: LD_VAR 0 7
89724: ARRAY
89725: PPUSH
89726: LD_VAR 0 14
89730: PUSH
89731: LD_INT 1
89733: ARRAY
89734: PPUSH
89735: CALL 77331 0 2
89739: GO 89765
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
89741: LD_VAR 0 4
89745: PUSH
89746: LD_VAR 0 7
89750: ARRAY
89751: PPUSH
89752: LD_VAR 0 14
89756: PUSH
89757: LD_INT 1
89759: ARRAY
89760: PPUSH
89761: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
89765: LD_VAR 0 4
89769: PUSH
89770: LD_VAR 0 7
89774: ARRAY
89775: PPUSH
89776: CALL_OW 264
89780: PUSH
89781: LD_INT 29
89783: EQUAL
89784: IFFALSE 90150
// begin if WantsToAttack ( group [ i ] ) in bombed then
89786: LD_VAR 0 4
89790: PUSH
89791: LD_VAR 0 7
89795: ARRAY
89796: PPUSH
89797: CALL_OW 319
89801: PUSH
89802: LD_VAR 0 28
89806: IN
89807: IFFALSE 89811
// continue ;
89809: GO 86815
// k := 8 ;
89811: LD_ADDR_VAR 0 9
89815: PUSH
89816: LD_INT 8
89818: ST_TO_ADDR
// x := 0 ;
89819: LD_ADDR_VAR 0 10
89823: PUSH
89824: LD_INT 0
89826: ST_TO_ADDR
// if tmp < k then
89827: LD_VAR 0 14
89831: PUSH
89832: LD_VAR 0 9
89836: LESS
89837: IFFALSE 89849
// k := tmp ;
89839: LD_ADDR_VAR 0 9
89843: PUSH
89844: LD_VAR 0 14
89848: ST_TO_ADDR
// for j = 1 to k do
89849: LD_ADDR_VAR 0 8
89853: PUSH
89854: DOUBLE
89855: LD_INT 1
89857: DEC
89858: ST_TO_ADDR
89859: LD_VAR 0 9
89863: PUSH
89864: FOR_TO
89865: IFFALSE 89997
// begin if GetType ( tmp [ j ] ) = unit_building then
89867: LD_VAR 0 14
89871: PUSH
89872: LD_VAR 0 8
89876: ARRAY
89877: PPUSH
89878: CALL_OW 247
89882: PUSH
89883: LD_INT 3
89885: EQUAL
89886: IFFALSE 89995
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
89888: LD_VAR 0 14
89892: PUSH
89893: LD_VAR 0 8
89897: ARRAY
89898: PUSH
89899: LD_VAR 0 28
89903: IN
89904: NOT
89905: PUSH
89906: LD_VAR 0 14
89910: PUSH
89911: LD_VAR 0 8
89915: ARRAY
89916: PPUSH
89917: CALL_OW 313
89921: AND
89922: IFFALSE 89995
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
89924: LD_VAR 0 4
89928: PUSH
89929: LD_VAR 0 7
89933: ARRAY
89934: PPUSH
89935: LD_VAR 0 14
89939: PUSH
89940: LD_VAR 0 8
89944: ARRAY
89945: PPUSH
89946: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
89950: LD_ADDR_VAR 0 28
89954: PUSH
89955: LD_VAR 0 28
89959: PPUSH
89960: LD_VAR 0 28
89964: PUSH
89965: LD_INT 1
89967: PLUS
89968: PPUSH
89969: LD_VAR 0 14
89973: PUSH
89974: LD_VAR 0 8
89978: ARRAY
89979: PPUSH
89980: CALL_OW 1
89984: ST_TO_ADDR
// attacking := true ;
89985: LD_ADDR_VAR 0 29
89989: PUSH
89990: LD_INT 1
89992: ST_TO_ADDR
// break ;
89993: GO 89997
// end ; end ;
89995: GO 89864
89997: POP
89998: POP
// if not attacking and f_attack_depot then
89999: LD_VAR 0 29
90003: NOT
90004: PUSH
90005: LD_VAR 0 25
90009: AND
90010: IFFALSE 90105
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
90012: LD_ADDR_VAR 0 13
90016: PUSH
90017: LD_VAR 0 14
90021: PPUSH
90022: LD_INT 2
90024: PUSH
90025: LD_INT 30
90027: PUSH
90028: LD_INT 0
90030: PUSH
90031: EMPTY
90032: LIST
90033: LIST
90034: PUSH
90035: LD_INT 30
90037: PUSH
90038: LD_INT 1
90040: PUSH
90041: EMPTY
90042: LIST
90043: LIST
90044: PUSH
90045: EMPTY
90046: LIST
90047: LIST
90048: LIST
90049: PPUSH
90050: CALL_OW 72
90054: ST_TO_ADDR
// if z then
90055: LD_VAR 0 13
90059: IFFALSE 90105
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
90061: LD_VAR 0 4
90065: PUSH
90066: LD_VAR 0 7
90070: ARRAY
90071: PPUSH
90072: LD_VAR 0 13
90076: PPUSH
90077: LD_VAR 0 4
90081: PUSH
90082: LD_VAR 0 7
90086: ARRAY
90087: PPUSH
90088: CALL_OW 74
90092: PPUSH
90093: CALL_OW 115
// attacking := true ;
90097: LD_ADDR_VAR 0 29
90101: PUSH
90102: LD_INT 1
90104: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
90105: LD_VAR 0 4
90109: PUSH
90110: LD_VAR 0 7
90114: ARRAY
90115: PPUSH
90116: CALL_OW 256
90120: PUSH
90121: LD_INT 500
90123: LESS
90124: IFFALSE 90150
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
90126: LD_VAR 0 4
90130: PUSH
90131: LD_VAR 0 7
90135: ARRAY
90136: PPUSH
90137: LD_VAR 0 14
90141: PUSH
90142: LD_INT 1
90144: ARRAY
90145: PPUSH
90146: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
90150: LD_VAR 0 4
90154: PUSH
90155: LD_VAR 0 7
90159: ARRAY
90160: PPUSH
90161: CALL_OW 264
90165: PUSH
90166: LD_INT 49
90168: EQUAL
90169: IFFALSE 90290
// begin if not HasTask ( group [ i ] ) then
90171: LD_VAR 0 4
90175: PUSH
90176: LD_VAR 0 7
90180: ARRAY
90181: PPUSH
90182: CALL_OW 314
90186: NOT
90187: IFFALSE 90290
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
90189: LD_ADDR_VAR 0 9
90193: PUSH
90194: LD_INT 81
90196: PUSH
90197: LD_VAR 0 4
90201: PUSH
90202: LD_VAR 0 7
90206: ARRAY
90207: PPUSH
90208: CALL_OW 255
90212: PUSH
90213: EMPTY
90214: LIST
90215: LIST
90216: PPUSH
90217: CALL_OW 69
90221: PPUSH
90222: LD_VAR 0 4
90226: PUSH
90227: LD_VAR 0 7
90231: ARRAY
90232: PPUSH
90233: CALL_OW 74
90237: ST_TO_ADDR
// if k then
90238: LD_VAR 0 9
90242: IFFALSE 90290
// if GetDistUnits ( group [ i ] , k ) > 10 then
90244: LD_VAR 0 4
90248: PUSH
90249: LD_VAR 0 7
90253: ARRAY
90254: PPUSH
90255: LD_VAR 0 9
90259: PPUSH
90260: CALL_OW 296
90264: PUSH
90265: LD_INT 10
90267: GREATER
90268: IFFALSE 90290
// ComMoveUnit ( group [ i ] , k ) ;
90270: LD_VAR 0 4
90274: PUSH
90275: LD_VAR 0 7
90279: ARRAY
90280: PPUSH
90281: LD_VAR 0 9
90285: PPUSH
90286: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
90290: LD_VAR 0 4
90294: PUSH
90295: LD_VAR 0 7
90299: ARRAY
90300: PPUSH
90301: CALL_OW 256
90305: PUSH
90306: LD_INT 250
90308: LESS
90309: PUSH
90310: LD_VAR 0 4
90314: PUSH
90315: LD_VAR 0 7
90319: ARRAY
90320: PUSH
90321: LD_INT 21
90323: PUSH
90324: LD_INT 2
90326: PUSH
90327: EMPTY
90328: LIST
90329: LIST
90330: PUSH
90331: LD_INT 23
90333: PUSH
90334: LD_INT 2
90336: PUSH
90337: EMPTY
90338: LIST
90339: LIST
90340: PUSH
90341: EMPTY
90342: LIST
90343: LIST
90344: PPUSH
90345: CALL_OW 69
90349: IN
90350: AND
90351: IFFALSE 90476
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
90353: LD_ADDR_VAR 0 9
90357: PUSH
90358: LD_OWVAR 3
90362: PUSH
90363: LD_VAR 0 4
90367: PUSH
90368: LD_VAR 0 7
90372: ARRAY
90373: DIFF
90374: PPUSH
90375: LD_VAR 0 4
90379: PUSH
90380: LD_VAR 0 7
90384: ARRAY
90385: PPUSH
90386: CALL_OW 74
90390: ST_TO_ADDR
// if not k then
90391: LD_VAR 0 9
90395: NOT
90396: IFFALSE 90400
// continue ;
90398: GO 86815
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
90400: LD_VAR 0 9
90404: PUSH
90405: LD_INT 81
90407: PUSH
90408: LD_VAR 0 4
90412: PUSH
90413: LD_VAR 0 7
90417: ARRAY
90418: PPUSH
90419: CALL_OW 255
90423: PUSH
90424: EMPTY
90425: LIST
90426: LIST
90427: PPUSH
90428: CALL_OW 69
90432: IN
90433: PUSH
90434: LD_VAR 0 9
90438: PPUSH
90439: LD_VAR 0 4
90443: PUSH
90444: LD_VAR 0 7
90448: ARRAY
90449: PPUSH
90450: CALL_OW 296
90454: PUSH
90455: LD_INT 5
90457: LESS
90458: AND
90459: IFFALSE 90476
// ComAutodestruct ( group [ i ] ) ;
90461: LD_VAR 0 4
90465: PUSH
90466: LD_VAR 0 7
90470: ARRAY
90471: PPUSH
90472: CALL 77229 0 1
// end ; if f_attack_depot then
90476: LD_VAR 0 25
90480: IFFALSE 90592
// begin k := 6 ;
90482: LD_ADDR_VAR 0 9
90486: PUSH
90487: LD_INT 6
90489: ST_TO_ADDR
// if tmp < k then
90490: LD_VAR 0 14
90494: PUSH
90495: LD_VAR 0 9
90499: LESS
90500: IFFALSE 90512
// k := tmp ;
90502: LD_ADDR_VAR 0 9
90506: PUSH
90507: LD_VAR 0 14
90511: ST_TO_ADDR
// for j = 1 to k do
90512: LD_ADDR_VAR 0 8
90516: PUSH
90517: DOUBLE
90518: LD_INT 1
90520: DEC
90521: ST_TO_ADDR
90522: LD_VAR 0 9
90526: PUSH
90527: FOR_TO
90528: IFFALSE 90590
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
90530: LD_VAR 0 8
90534: PPUSH
90535: CALL_OW 266
90539: PUSH
90540: LD_INT 0
90542: PUSH
90543: LD_INT 1
90545: PUSH
90546: EMPTY
90547: LIST
90548: LIST
90549: IN
90550: IFFALSE 90588
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
90552: LD_VAR 0 4
90556: PUSH
90557: LD_VAR 0 7
90561: ARRAY
90562: PPUSH
90563: LD_VAR 0 14
90567: PUSH
90568: LD_VAR 0 8
90572: ARRAY
90573: PPUSH
90574: CALL_OW 115
// attacking := true ;
90578: LD_ADDR_VAR 0 29
90582: PUSH
90583: LD_INT 1
90585: ST_TO_ADDR
// break ;
90586: GO 90590
// end ;
90588: GO 90527
90590: POP
90591: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
90592: LD_VAR 0 4
90596: PUSH
90597: LD_VAR 0 7
90601: ARRAY
90602: PPUSH
90603: CALL_OW 302
90607: PUSH
90608: LD_VAR 0 29
90612: NOT
90613: AND
90614: IFFALSE 90936
// begin if GetTag ( group [ i ] ) = 71 then
90616: LD_VAR 0 4
90620: PUSH
90621: LD_VAR 0 7
90625: ARRAY
90626: PPUSH
90627: CALL_OW 110
90631: PUSH
90632: LD_INT 71
90634: EQUAL
90635: IFFALSE 90676
// begin if HasTask ( group [ i ] ) then
90637: LD_VAR 0 4
90641: PUSH
90642: LD_VAR 0 7
90646: ARRAY
90647: PPUSH
90648: CALL_OW 314
90652: IFFALSE 90658
// continue else
90654: GO 86815
90656: GO 90676
// SetTag ( group [ i ] , 0 ) ;
90658: LD_VAR 0 4
90662: PUSH
90663: LD_VAR 0 7
90667: ARRAY
90668: PPUSH
90669: LD_INT 0
90671: PPUSH
90672: CALL_OW 109
// end ; k := 8 ;
90676: LD_ADDR_VAR 0 9
90680: PUSH
90681: LD_INT 8
90683: ST_TO_ADDR
// x := 0 ;
90684: LD_ADDR_VAR 0 10
90688: PUSH
90689: LD_INT 0
90691: ST_TO_ADDR
// if tmp < k then
90692: LD_VAR 0 14
90696: PUSH
90697: LD_VAR 0 9
90701: LESS
90702: IFFALSE 90714
// k := tmp ;
90704: LD_ADDR_VAR 0 9
90708: PUSH
90709: LD_VAR 0 14
90713: ST_TO_ADDR
// for j = 1 to k do
90714: LD_ADDR_VAR 0 8
90718: PUSH
90719: DOUBLE
90720: LD_INT 1
90722: DEC
90723: ST_TO_ADDR
90724: LD_VAR 0 9
90728: PUSH
90729: FOR_TO
90730: IFFALSE 90828
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
90732: LD_VAR 0 14
90736: PUSH
90737: LD_VAR 0 8
90741: ARRAY
90742: PPUSH
90743: CALL_OW 247
90747: PUSH
90748: LD_INT 1
90750: EQUAL
90751: PUSH
90752: LD_VAR 0 14
90756: PUSH
90757: LD_VAR 0 8
90761: ARRAY
90762: PPUSH
90763: CALL_OW 256
90767: PUSH
90768: LD_INT 250
90770: LESS
90771: PUSH
90772: LD_VAR 0 20
90776: AND
90777: PUSH
90778: LD_VAR 0 20
90782: NOT
90783: PUSH
90784: LD_VAR 0 14
90788: PUSH
90789: LD_VAR 0 8
90793: ARRAY
90794: PPUSH
90795: CALL_OW 256
90799: PUSH
90800: LD_INT 250
90802: GREATEREQUAL
90803: AND
90804: OR
90805: AND
90806: IFFALSE 90826
// begin x := tmp [ j ] ;
90808: LD_ADDR_VAR 0 10
90812: PUSH
90813: LD_VAR 0 14
90817: PUSH
90818: LD_VAR 0 8
90822: ARRAY
90823: ST_TO_ADDR
// break ;
90824: GO 90828
// end ;
90826: GO 90729
90828: POP
90829: POP
// if x then
90830: LD_VAR 0 10
90834: IFFALSE 90858
// ComAttackUnit ( group [ i ] , x ) else
90836: LD_VAR 0 4
90840: PUSH
90841: LD_VAR 0 7
90845: ARRAY
90846: PPUSH
90847: LD_VAR 0 10
90851: PPUSH
90852: CALL_OW 115
90856: GO 90882
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
90858: LD_VAR 0 4
90862: PUSH
90863: LD_VAR 0 7
90867: ARRAY
90868: PPUSH
90869: LD_VAR 0 14
90873: PUSH
90874: LD_INT 1
90876: ARRAY
90877: PPUSH
90878: CALL_OW 115
// if not HasTask ( group [ i ] ) then
90882: LD_VAR 0 4
90886: PUSH
90887: LD_VAR 0 7
90891: ARRAY
90892: PPUSH
90893: CALL_OW 314
90897: NOT
90898: IFFALSE 90936
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
90900: LD_VAR 0 4
90904: PUSH
90905: LD_VAR 0 7
90909: ARRAY
90910: PPUSH
90911: LD_VAR 0 14
90915: PPUSH
90916: LD_VAR 0 4
90920: PUSH
90921: LD_VAR 0 7
90925: ARRAY
90926: PPUSH
90927: CALL_OW 74
90931: PPUSH
90932: CALL_OW 115
// end ; end ; end ;
90936: GO 86815
90938: POP
90939: POP
// wait ( 0 0$2 ) ;
90940: LD_INT 70
90942: PPUSH
90943: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
90947: LD_VAR 0 4
90951: NOT
90952: PUSH
90953: LD_VAR 0 4
90957: PUSH
90958: EMPTY
90959: EQUAL
90960: OR
90961: PUSH
90962: LD_INT 81
90964: PUSH
90965: LD_VAR 0 35
90969: PUSH
90970: EMPTY
90971: LIST
90972: LIST
90973: PPUSH
90974: CALL_OW 69
90978: NOT
90979: OR
90980: IFFALSE 86800
// end ;
90982: LD_VAR 0 2
90986: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
90987: LD_INT 0
90989: PPUSH
90990: PPUSH
90991: PPUSH
90992: PPUSH
90993: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
90994: LD_VAR 0 1
90998: NOT
90999: PUSH
91000: LD_EXP 87
91004: PUSH
91005: LD_VAR 0 1
91009: ARRAY
91010: NOT
91011: OR
91012: PUSH
91013: LD_VAR 0 2
91017: NOT
91018: OR
91019: PUSH
91020: LD_VAR 0 3
91024: NOT
91025: OR
91026: IFFALSE 91030
// exit ;
91028: GO 91543
// side := mc_sides [ base ] ;
91030: LD_ADDR_VAR 0 6
91034: PUSH
91035: LD_EXP 113
91039: PUSH
91040: LD_VAR 0 1
91044: ARRAY
91045: ST_TO_ADDR
// if not side then
91046: LD_VAR 0 6
91050: NOT
91051: IFFALSE 91055
// exit ;
91053: GO 91543
// for i in solds do
91055: LD_ADDR_VAR 0 7
91059: PUSH
91060: LD_VAR 0 2
91064: PUSH
91065: FOR_IN
91066: IFFALSE 91127
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
91068: LD_VAR 0 7
91072: PPUSH
91073: CALL_OW 310
91077: PPUSH
91078: CALL_OW 266
91082: PUSH
91083: LD_INT 32
91085: PUSH
91086: LD_INT 31
91088: PUSH
91089: EMPTY
91090: LIST
91091: LIST
91092: IN
91093: IFFALSE 91113
// solds := solds diff i else
91095: LD_ADDR_VAR 0 2
91099: PUSH
91100: LD_VAR 0 2
91104: PUSH
91105: LD_VAR 0 7
91109: DIFF
91110: ST_TO_ADDR
91111: GO 91125
// SetTag ( i , 18 ) ;
91113: LD_VAR 0 7
91117: PPUSH
91118: LD_INT 18
91120: PPUSH
91121: CALL_OW 109
91125: GO 91065
91127: POP
91128: POP
// if not solds then
91129: LD_VAR 0 2
91133: NOT
91134: IFFALSE 91138
// exit ;
91136: GO 91543
// repeat wait ( 0 0$1 ) ;
91138: LD_INT 35
91140: PPUSH
91141: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
91145: LD_ADDR_VAR 0 5
91149: PUSH
91150: LD_VAR 0 6
91154: PPUSH
91155: LD_VAR 0 3
91159: PPUSH
91160: CALL 46944 0 2
91164: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
91165: LD_EXP 87
91169: PUSH
91170: LD_VAR 0 1
91174: ARRAY
91175: NOT
91176: PUSH
91177: LD_EXP 87
91181: PUSH
91182: LD_VAR 0 1
91186: ARRAY
91187: PUSH
91188: EMPTY
91189: EQUAL
91190: OR
91191: IFFALSE 91228
// begin for i in solds do
91193: LD_ADDR_VAR 0 7
91197: PUSH
91198: LD_VAR 0 2
91202: PUSH
91203: FOR_IN
91204: IFFALSE 91217
// ComStop ( i ) ;
91206: LD_VAR 0 7
91210: PPUSH
91211: CALL_OW 141
91215: GO 91203
91217: POP
91218: POP
// solds := [ ] ;
91219: LD_ADDR_VAR 0 2
91223: PUSH
91224: EMPTY
91225: ST_TO_ADDR
// exit ;
91226: GO 91543
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
91228: LD_VAR 0 5
91232: NOT
91233: PUSH
91234: LD_VAR 0 5
91238: PUSH
91239: LD_INT 3
91241: GREATER
91242: OR
91243: PUSH
91244: LD_EXP 109
91248: PUSH
91249: LD_VAR 0 1
91253: ARRAY
91254: OR
91255: IFFALSE 91296
// begin for i in solds do
91257: LD_ADDR_VAR 0 7
91261: PUSH
91262: LD_VAR 0 2
91266: PUSH
91267: FOR_IN
91268: IFFALSE 91292
// if HasTask ( i ) then
91270: LD_VAR 0 7
91274: PPUSH
91275: CALL_OW 314
91279: IFFALSE 91290
// ComStop ( i ) ;
91281: LD_VAR 0 7
91285: PPUSH
91286: CALL_OW 141
91290: GO 91267
91292: POP
91293: POP
// break ;
91294: GO 91531
// end ; for i in solds do
91296: LD_ADDR_VAR 0 7
91300: PUSH
91301: LD_VAR 0 2
91305: PUSH
91306: FOR_IN
91307: IFFALSE 91523
// begin if IsInUnit ( i ) then
91309: LD_VAR 0 7
91313: PPUSH
91314: CALL_OW 310
91318: IFFALSE 91329
// ComExitBuilding ( i ) ;
91320: LD_VAR 0 7
91324: PPUSH
91325: CALL_OW 122
// if GetLives ( i ) > 333 then
91329: LD_VAR 0 7
91333: PPUSH
91334: CALL_OW 256
91338: PUSH
91339: LD_INT 333
91341: GREATER
91342: IFFALSE 91370
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
91344: LD_VAR 0 7
91348: PPUSH
91349: LD_VAR 0 5
91353: PPUSH
91354: LD_VAR 0 7
91358: PPUSH
91359: CALL_OW 74
91363: PPUSH
91364: CALL_OW 115
91368: GO 91521
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
91370: LD_ADDR_VAR 0 8
91374: PUSH
91375: LD_EXP 87
91379: PUSH
91380: LD_VAR 0 1
91384: ARRAY
91385: PPUSH
91386: LD_INT 2
91388: PUSH
91389: LD_INT 30
91391: PUSH
91392: LD_INT 0
91394: PUSH
91395: EMPTY
91396: LIST
91397: LIST
91398: PUSH
91399: LD_INT 30
91401: PUSH
91402: LD_INT 1
91404: PUSH
91405: EMPTY
91406: LIST
91407: LIST
91408: PUSH
91409: LD_INT 30
91411: PUSH
91412: LD_INT 6
91414: PUSH
91415: EMPTY
91416: LIST
91417: LIST
91418: PUSH
91419: EMPTY
91420: LIST
91421: LIST
91422: LIST
91423: LIST
91424: PPUSH
91425: CALL_OW 72
91429: PPUSH
91430: LD_VAR 0 7
91434: PPUSH
91435: CALL_OW 74
91439: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
91440: LD_VAR 0 7
91444: PPUSH
91445: LD_VAR 0 8
91449: PPUSH
91450: CALL_OW 250
91454: PPUSH
91455: LD_INT 3
91457: PPUSH
91458: LD_INT 5
91460: PPUSH
91461: CALL_OW 272
91465: PPUSH
91466: LD_VAR 0 8
91470: PPUSH
91471: CALL_OW 251
91475: PPUSH
91476: LD_INT 3
91478: PPUSH
91479: LD_INT 5
91481: PPUSH
91482: CALL_OW 273
91486: PPUSH
91487: CALL_OW 111
// SetTag ( i , 0 ) ;
91491: LD_VAR 0 7
91495: PPUSH
91496: LD_INT 0
91498: PPUSH
91499: CALL_OW 109
// solds := solds diff i ;
91503: LD_ADDR_VAR 0 2
91507: PUSH
91508: LD_VAR 0 2
91512: PUSH
91513: LD_VAR 0 7
91517: DIFF
91518: ST_TO_ADDR
// continue ;
91519: GO 91306
// end ; end ;
91521: GO 91306
91523: POP
91524: POP
// until solds ;
91525: LD_VAR 0 2
91529: IFFALSE 91138
// MC_Reset ( base , 18 ) ;
91531: LD_VAR 0 1
91535: PPUSH
91536: LD_INT 18
91538: PPUSH
91539: CALL 23985 0 2
// end ;
91543: LD_VAR 0 4
91547: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
91548: LD_INT 0
91550: PPUSH
91551: PPUSH
91552: PPUSH
91553: PPUSH
91554: PPUSH
91555: PPUSH
91556: PPUSH
91557: PPUSH
91558: PPUSH
91559: PPUSH
91560: PPUSH
91561: PPUSH
91562: PPUSH
91563: PPUSH
91564: PPUSH
91565: PPUSH
91566: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
91567: LD_ADDR_VAR 0 13
91571: PUSH
91572: LD_EXP 87
91576: PUSH
91577: LD_VAR 0 1
91581: ARRAY
91582: PPUSH
91583: LD_INT 25
91585: PUSH
91586: LD_INT 3
91588: PUSH
91589: EMPTY
91590: LIST
91591: LIST
91592: PPUSH
91593: CALL_OW 72
91597: ST_TO_ADDR
// if mc_remote_driver [ base ] then
91598: LD_EXP 127
91602: PUSH
91603: LD_VAR 0 1
91607: ARRAY
91608: IFFALSE 91632
// mechs := mechs diff mc_remote_driver [ base ] ;
91610: LD_ADDR_VAR 0 13
91614: PUSH
91615: LD_VAR 0 13
91619: PUSH
91620: LD_EXP 127
91624: PUSH
91625: LD_VAR 0 1
91629: ARRAY
91630: DIFF
91631: ST_TO_ADDR
// for i in mechs do
91632: LD_ADDR_VAR 0 5
91636: PUSH
91637: LD_VAR 0 13
91641: PUSH
91642: FOR_IN
91643: IFFALSE 91678
// if GetTag ( i ) > 0 then
91645: LD_VAR 0 5
91649: PPUSH
91650: CALL_OW 110
91654: PUSH
91655: LD_INT 0
91657: GREATER
91658: IFFALSE 91676
// mechs := mechs diff i ;
91660: LD_ADDR_VAR 0 13
91664: PUSH
91665: LD_VAR 0 13
91669: PUSH
91670: LD_VAR 0 5
91674: DIFF
91675: ST_TO_ADDR
91676: GO 91642
91678: POP
91679: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
91680: LD_ADDR_VAR 0 9
91684: PUSH
91685: LD_EXP 87
91689: PUSH
91690: LD_VAR 0 1
91694: ARRAY
91695: PPUSH
91696: LD_INT 2
91698: PUSH
91699: LD_INT 25
91701: PUSH
91702: LD_INT 1
91704: PUSH
91705: EMPTY
91706: LIST
91707: LIST
91708: PUSH
91709: LD_INT 25
91711: PUSH
91712: LD_INT 5
91714: PUSH
91715: EMPTY
91716: LIST
91717: LIST
91718: PUSH
91719: LD_INT 25
91721: PUSH
91722: LD_INT 8
91724: PUSH
91725: EMPTY
91726: LIST
91727: LIST
91728: PUSH
91729: LD_INT 25
91731: PUSH
91732: LD_INT 9
91734: PUSH
91735: EMPTY
91736: LIST
91737: LIST
91738: PUSH
91739: EMPTY
91740: LIST
91741: LIST
91742: LIST
91743: LIST
91744: LIST
91745: PPUSH
91746: CALL_OW 72
91750: ST_TO_ADDR
// if not defenders and not solds then
91751: LD_VAR 0 2
91755: NOT
91756: PUSH
91757: LD_VAR 0 9
91761: NOT
91762: AND
91763: IFFALSE 91767
// exit ;
91765: GO 93393
// depot_under_attack := false ;
91767: LD_ADDR_VAR 0 17
91771: PUSH
91772: LD_INT 0
91774: ST_TO_ADDR
// sold_defenders := [ ] ;
91775: LD_ADDR_VAR 0 18
91779: PUSH
91780: EMPTY
91781: ST_TO_ADDR
// if mechs then
91782: LD_VAR 0 13
91786: IFFALSE 91915
// for i in defenders do
91788: LD_ADDR_VAR 0 5
91792: PUSH
91793: LD_VAR 0 2
91797: PUSH
91798: FOR_IN
91799: IFFALSE 91913
// begin SetTag ( i , 20 ) ;
91801: LD_VAR 0 5
91805: PPUSH
91806: LD_INT 20
91808: PPUSH
91809: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
91813: LD_VAR 0 5
91817: PPUSH
91818: CALL_OW 263
91822: PUSH
91823: LD_INT 1
91825: EQUAL
91826: PUSH
91827: LD_VAR 0 5
91831: PPUSH
91832: CALL_OW 311
91836: NOT
91837: AND
91838: PUSH
91839: LD_VAR 0 13
91843: AND
91844: IFFALSE 91911
// begin un := mechs [ 1 ] ;
91846: LD_ADDR_VAR 0 11
91850: PUSH
91851: LD_VAR 0 13
91855: PUSH
91856: LD_INT 1
91858: ARRAY
91859: ST_TO_ADDR
// ComExitBuilding ( un ) ;
91860: LD_VAR 0 11
91864: PPUSH
91865: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
91869: LD_VAR 0 11
91873: PPUSH
91874: LD_VAR 0 5
91878: PPUSH
91879: CALL_OW 180
// SetTag ( un , 19 ) ;
91883: LD_VAR 0 11
91887: PPUSH
91888: LD_INT 19
91890: PPUSH
91891: CALL_OW 109
// mechs := mechs diff un ;
91895: LD_ADDR_VAR 0 13
91899: PUSH
91900: LD_VAR 0 13
91904: PUSH
91905: LD_VAR 0 11
91909: DIFF
91910: ST_TO_ADDR
// end ; end ;
91911: GO 91798
91913: POP
91914: POP
// if solds then
91915: LD_VAR 0 9
91919: IFFALSE 91978
// for i in solds do
91921: LD_ADDR_VAR 0 5
91925: PUSH
91926: LD_VAR 0 9
91930: PUSH
91931: FOR_IN
91932: IFFALSE 91976
// if not GetTag ( i ) then
91934: LD_VAR 0 5
91938: PPUSH
91939: CALL_OW 110
91943: NOT
91944: IFFALSE 91974
// begin defenders := defenders union i ;
91946: LD_ADDR_VAR 0 2
91950: PUSH
91951: LD_VAR 0 2
91955: PUSH
91956: LD_VAR 0 5
91960: UNION
91961: ST_TO_ADDR
// SetTag ( i , 18 ) ;
91962: LD_VAR 0 5
91966: PPUSH
91967: LD_INT 18
91969: PPUSH
91970: CALL_OW 109
// end ;
91974: GO 91931
91976: POP
91977: POP
// repeat wait ( 0 0$1 ) ;
91978: LD_INT 35
91980: PPUSH
91981: CALL_OW 67
// enemy := mc_scan [ base ] ;
91985: LD_ADDR_VAR 0 3
91989: PUSH
91990: LD_EXP 110
91994: PUSH
91995: LD_VAR 0 1
91999: ARRAY
92000: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
92001: LD_EXP 87
92005: PUSH
92006: LD_VAR 0 1
92010: ARRAY
92011: NOT
92012: PUSH
92013: LD_EXP 87
92017: PUSH
92018: LD_VAR 0 1
92022: ARRAY
92023: PUSH
92024: EMPTY
92025: EQUAL
92026: OR
92027: IFFALSE 92064
// begin for i in defenders do
92029: LD_ADDR_VAR 0 5
92033: PUSH
92034: LD_VAR 0 2
92038: PUSH
92039: FOR_IN
92040: IFFALSE 92053
// ComStop ( i ) ;
92042: LD_VAR 0 5
92046: PPUSH
92047: CALL_OW 141
92051: GO 92039
92053: POP
92054: POP
// defenders := [ ] ;
92055: LD_ADDR_VAR 0 2
92059: PUSH
92060: EMPTY
92061: ST_TO_ADDR
// exit ;
92062: GO 93393
// end ; for i in defenders do
92064: LD_ADDR_VAR 0 5
92068: PUSH
92069: LD_VAR 0 2
92073: PUSH
92074: FOR_IN
92075: IFFALSE 92893
// begin e := NearestUnitToUnit ( enemy , i ) ;
92077: LD_ADDR_VAR 0 14
92081: PUSH
92082: LD_VAR 0 3
92086: PPUSH
92087: LD_VAR 0 5
92091: PPUSH
92092: CALL_OW 74
92096: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
92097: LD_ADDR_VAR 0 8
92101: PUSH
92102: LD_EXP 87
92106: PUSH
92107: LD_VAR 0 1
92111: ARRAY
92112: PPUSH
92113: LD_INT 2
92115: PUSH
92116: LD_INT 30
92118: PUSH
92119: LD_INT 0
92121: PUSH
92122: EMPTY
92123: LIST
92124: LIST
92125: PUSH
92126: LD_INT 30
92128: PUSH
92129: LD_INT 1
92131: PUSH
92132: EMPTY
92133: LIST
92134: LIST
92135: PUSH
92136: EMPTY
92137: LIST
92138: LIST
92139: LIST
92140: PPUSH
92141: CALL_OW 72
92145: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
92146: LD_ADDR_VAR 0 17
92150: PUSH
92151: LD_VAR 0 8
92155: NOT
92156: PUSH
92157: LD_VAR 0 8
92161: PPUSH
92162: LD_INT 3
92164: PUSH
92165: LD_INT 24
92167: PUSH
92168: LD_INT 600
92170: PUSH
92171: EMPTY
92172: LIST
92173: LIST
92174: PUSH
92175: EMPTY
92176: LIST
92177: LIST
92178: PPUSH
92179: CALL_OW 72
92183: OR
92184: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
92185: LD_VAR 0 5
92189: PPUSH
92190: CALL_OW 247
92194: PUSH
92195: LD_INT 2
92197: DOUBLE
92198: EQUAL
92199: IFTRUE 92203
92201: GO 92599
92203: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
92204: LD_VAR 0 5
92208: PPUSH
92209: CALL_OW 256
92213: PUSH
92214: LD_INT 650
92216: GREATER
92217: PUSH
92218: LD_VAR 0 5
92222: PPUSH
92223: LD_VAR 0 14
92227: PPUSH
92228: CALL_OW 296
92232: PUSH
92233: LD_INT 40
92235: LESS
92236: PUSH
92237: LD_VAR 0 14
92241: PPUSH
92242: LD_EXP 112
92246: PUSH
92247: LD_VAR 0 1
92251: ARRAY
92252: PPUSH
92253: CALL_OW 308
92257: OR
92258: AND
92259: IFFALSE 92381
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
92261: LD_VAR 0 5
92265: PPUSH
92266: CALL_OW 262
92270: PUSH
92271: LD_INT 1
92273: EQUAL
92274: PUSH
92275: LD_VAR 0 5
92279: PPUSH
92280: CALL_OW 261
92284: PUSH
92285: LD_INT 30
92287: LESS
92288: AND
92289: PUSH
92290: LD_VAR 0 8
92294: AND
92295: IFFALSE 92365
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
92297: LD_VAR 0 5
92301: PPUSH
92302: LD_VAR 0 8
92306: PPUSH
92307: LD_VAR 0 5
92311: PPUSH
92312: CALL_OW 74
92316: PPUSH
92317: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
92321: LD_VAR 0 5
92325: PPUSH
92326: LD_VAR 0 8
92330: PPUSH
92331: LD_VAR 0 5
92335: PPUSH
92336: CALL_OW 74
92340: PPUSH
92341: CALL_OW 296
92345: PUSH
92346: LD_INT 6
92348: LESS
92349: IFFALSE 92363
// SetFuel ( i , 100 ) ;
92351: LD_VAR 0 5
92355: PPUSH
92356: LD_INT 100
92358: PPUSH
92359: CALL_OW 240
// end else
92363: GO 92379
// ComAttackUnit ( i , e ) ;
92365: LD_VAR 0 5
92369: PPUSH
92370: LD_VAR 0 14
92374: PPUSH
92375: CALL_OW 115
// end else
92379: GO 92482
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
92381: LD_VAR 0 14
92385: PPUSH
92386: LD_EXP 112
92390: PUSH
92391: LD_VAR 0 1
92395: ARRAY
92396: PPUSH
92397: CALL_OW 308
92401: NOT
92402: PUSH
92403: LD_VAR 0 5
92407: PPUSH
92408: LD_VAR 0 14
92412: PPUSH
92413: CALL_OW 296
92417: PUSH
92418: LD_INT 40
92420: GREATEREQUAL
92421: AND
92422: PUSH
92423: LD_VAR 0 5
92427: PPUSH
92428: CALL_OW 256
92432: PUSH
92433: LD_INT 650
92435: LESSEQUAL
92436: OR
92437: PUSH
92438: LD_VAR 0 5
92442: PPUSH
92443: LD_EXP 111
92447: PUSH
92448: LD_VAR 0 1
92452: ARRAY
92453: PPUSH
92454: CALL_OW 308
92458: NOT
92459: AND
92460: IFFALSE 92482
// ComMoveToArea ( i , mc_parking [ base ] ) ;
92462: LD_VAR 0 5
92466: PPUSH
92467: LD_EXP 111
92471: PUSH
92472: LD_VAR 0 1
92476: ARRAY
92477: PPUSH
92478: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
92482: LD_VAR 0 5
92486: PPUSH
92487: CALL_OW 256
92491: PUSH
92492: LD_INT 998
92494: LESS
92495: PUSH
92496: LD_VAR 0 5
92500: PPUSH
92501: CALL_OW 263
92505: PUSH
92506: LD_INT 1
92508: EQUAL
92509: AND
92510: PUSH
92511: LD_VAR 0 5
92515: PPUSH
92516: CALL_OW 311
92520: AND
92521: PUSH
92522: LD_VAR 0 5
92526: PPUSH
92527: LD_EXP 111
92531: PUSH
92532: LD_VAR 0 1
92536: ARRAY
92537: PPUSH
92538: CALL_OW 308
92542: AND
92543: IFFALSE 92597
// begin mech := IsDrivenBy ( i ) ;
92545: LD_ADDR_VAR 0 10
92549: PUSH
92550: LD_VAR 0 5
92554: PPUSH
92555: CALL_OW 311
92559: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
92560: LD_VAR 0 10
92564: PPUSH
92565: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
92569: LD_VAR 0 10
92573: PPUSH
92574: LD_VAR 0 5
92578: PPUSH
92579: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
92583: LD_VAR 0 10
92587: PPUSH
92588: LD_VAR 0 5
92592: PPUSH
92593: CALL_OW 180
// end ; end ; unit_human :
92597: GO 92864
92599: LD_INT 1
92601: DOUBLE
92602: EQUAL
92603: IFTRUE 92607
92605: GO 92863
92607: POP
// begin b := IsInUnit ( i ) ;
92608: LD_ADDR_VAR 0 19
92612: PUSH
92613: LD_VAR 0 5
92617: PPUSH
92618: CALL_OW 310
92622: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
92623: LD_ADDR_VAR 0 20
92627: PUSH
92628: LD_VAR 0 19
92632: NOT
92633: PUSH
92634: LD_VAR 0 19
92638: PPUSH
92639: CALL_OW 266
92643: PUSH
92644: LD_INT 32
92646: PUSH
92647: LD_INT 31
92649: PUSH
92650: EMPTY
92651: LIST
92652: LIST
92653: IN
92654: OR
92655: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
92656: LD_VAR 0 17
92660: PUSH
92661: LD_VAR 0 2
92665: PPUSH
92666: LD_INT 21
92668: PUSH
92669: LD_INT 2
92671: PUSH
92672: EMPTY
92673: LIST
92674: LIST
92675: PPUSH
92676: CALL_OW 72
92680: PUSH
92681: LD_INT 1
92683: LESSEQUAL
92684: OR
92685: PUSH
92686: LD_VAR 0 20
92690: AND
92691: PUSH
92692: LD_VAR 0 5
92696: PUSH
92697: LD_VAR 0 18
92701: IN
92702: NOT
92703: AND
92704: IFFALSE 92797
// begin if b then
92706: LD_VAR 0 19
92710: IFFALSE 92759
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
92712: LD_VAR 0 19
92716: PPUSH
92717: LD_VAR 0 3
92721: PPUSH
92722: LD_VAR 0 19
92726: PPUSH
92727: CALL_OW 74
92731: PPUSH
92732: CALL_OW 296
92736: PUSH
92737: LD_INT 10
92739: LESS
92740: PUSH
92741: LD_VAR 0 19
92745: PPUSH
92746: CALL_OW 461
92750: PUSH
92751: LD_INT 7
92753: NONEQUAL
92754: AND
92755: IFFALSE 92759
// continue ;
92757: GO 92074
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
92759: LD_ADDR_VAR 0 18
92763: PUSH
92764: LD_VAR 0 18
92768: PPUSH
92769: LD_VAR 0 18
92773: PUSH
92774: LD_INT 1
92776: PLUS
92777: PPUSH
92778: LD_VAR 0 5
92782: PPUSH
92783: CALL_OW 1
92787: ST_TO_ADDR
// ComExitBuilding ( i ) ;
92788: LD_VAR 0 5
92792: PPUSH
92793: CALL_OW 122
// end ; if sold_defenders then
92797: LD_VAR 0 18
92801: IFFALSE 92861
// if i in sold_defenders then
92803: LD_VAR 0 5
92807: PUSH
92808: LD_VAR 0 18
92812: IN
92813: IFFALSE 92861
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
92815: LD_VAR 0 5
92819: PPUSH
92820: CALL_OW 314
92824: NOT
92825: PUSH
92826: LD_VAR 0 5
92830: PPUSH
92831: LD_VAR 0 14
92835: PPUSH
92836: CALL_OW 296
92840: PUSH
92841: LD_INT 30
92843: LESS
92844: AND
92845: IFFALSE 92861
// ComAttackUnit ( i , e ) ;
92847: LD_VAR 0 5
92851: PPUSH
92852: LD_VAR 0 14
92856: PPUSH
92857: CALL_OW 115
// end ; end ; end ;
92861: GO 92864
92863: POP
// if IsDead ( i ) then
92864: LD_VAR 0 5
92868: PPUSH
92869: CALL_OW 301
92873: IFFALSE 92891
// defenders := defenders diff i ;
92875: LD_ADDR_VAR 0 2
92879: PUSH
92880: LD_VAR 0 2
92884: PUSH
92885: LD_VAR 0 5
92889: DIFF
92890: ST_TO_ADDR
// end ;
92891: GO 92074
92893: POP
92894: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
92895: LD_VAR 0 3
92899: NOT
92900: PUSH
92901: LD_VAR 0 2
92905: NOT
92906: OR
92907: PUSH
92908: LD_EXP 87
92912: PUSH
92913: LD_VAR 0 1
92917: ARRAY
92918: NOT
92919: OR
92920: IFFALSE 91978
// MC_Reset ( base , 18 ) ;
92922: LD_VAR 0 1
92926: PPUSH
92927: LD_INT 18
92929: PPUSH
92930: CALL 23985 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
92934: LD_ADDR_VAR 0 2
92938: PUSH
92939: LD_VAR 0 2
92943: PUSH
92944: LD_VAR 0 2
92948: PPUSH
92949: LD_INT 2
92951: PUSH
92952: LD_INT 25
92954: PUSH
92955: LD_INT 1
92957: PUSH
92958: EMPTY
92959: LIST
92960: LIST
92961: PUSH
92962: LD_INT 25
92964: PUSH
92965: LD_INT 5
92967: PUSH
92968: EMPTY
92969: LIST
92970: LIST
92971: PUSH
92972: LD_INT 25
92974: PUSH
92975: LD_INT 8
92977: PUSH
92978: EMPTY
92979: LIST
92980: LIST
92981: PUSH
92982: LD_INT 25
92984: PUSH
92985: LD_INT 9
92987: PUSH
92988: EMPTY
92989: LIST
92990: LIST
92991: PUSH
92992: EMPTY
92993: LIST
92994: LIST
92995: LIST
92996: LIST
92997: LIST
92998: PPUSH
92999: CALL_OW 72
93003: DIFF
93004: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
93005: LD_VAR 0 3
93009: NOT
93010: PUSH
93011: LD_VAR 0 2
93015: PPUSH
93016: LD_INT 21
93018: PUSH
93019: LD_INT 2
93021: PUSH
93022: EMPTY
93023: LIST
93024: LIST
93025: PPUSH
93026: CALL_OW 72
93030: AND
93031: IFFALSE 93369
// begin tmp := FilterByTag ( defenders , 19 ) ;
93033: LD_ADDR_VAR 0 12
93037: PUSH
93038: LD_VAR 0 2
93042: PPUSH
93043: LD_INT 19
93045: PPUSH
93046: CALL 78704 0 2
93050: ST_TO_ADDR
// if tmp then
93051: LD_VAR 0 12
93055: IFFALSE 93125
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
93057: LD_ADDR_VAR 0 12
93061: PUSH
93062: LD_VAR 0 12
93066: PPUSH
93067: LD_INT 25
93069: PUSH
93070: LD_INT 3
93072: PUSH
93073: EMPTY
93074: LIST
93075: LIST
93076: PPUSH
93077: CALL_OW 72
93081: ST_TO_ADDR
// if tmp then
93082: LD_VAR 0 12
93086: IFFALSE 93125
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
93088: LD_ADDR_EXP 99
93092: PUSH
93093: LD_EXP 99
93097: PPUSH
93098: LD_VAR 0 1
93102: PPUSH
93103: LD_EXP 99
93107: PUSH
93108: LD_VAR 0 1
93112: ARRAY
93113: PUSH
93114: LD_VAR 0 12
93118: UNION
93119: PPUSH
93120: CALL_OW 1
93124: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
93125: LD_VAR 0 1
93129: PPUSH
93130: LD_INT 19
93132: PPUSH
93133: CALL 23985 0 2
// repeat wait ( 0 0$1 ) ;
93137: LD_INT 35
93139: PPUSH
93140: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
93144: LD_EXP 87
93148: PUSH
93149: LD_VAR 0 1
93153: ARRAY
93154: NOT
93155: PUSH
93156: LD_EXP 87
93160: PUSH
93161: LD_VAR 0 1
93165: ARRAY
93166: PUSH
93167: EMPTY
93168: EQUAL
93169: OR
93170: IFFALSE 93207
// begin for i in defenders do
93172: LD_ADDR_VAR 0 5
93176: PUSH
93177: LD_VAR 0 2
93181: PUSH
93182: FOR_IN
93183: IFFALSE 93196
// ComStop ( i ) ;
93185: LD_VAR 0 5
93189: PPUSH
93190: CALL_OW 141
93194: GO 93182
93196: POP
93197: POP
// defenders := [ ] ;
93198: LD_ADDR_VAR 0 2
93202: PUSH
93203: EMPTY
93204: ST_TO_ADDR
// exit ;
93205: GO 93393
// end ; for i in defenders do
93207: LD_ADDR_VAR 0 5
93211: PUSH
93212: LD_VAR 0 2
93216: PUSH
93217: FOR_IN
93218: IFFALSE 93307
// begin if not IsInArea ( i , mc_parking [ base ] ) then
93220: LD_VAR 0 5
93224: PPUSH
93225: LD_EXP 111
93229: PUSH
93230: LD_VAR 0 1
93234: ARRAY
93235: PPUSH
93236: CALL_OW 308
93240: NOT
93241: IFFALSE 93265
// ComMoveToArea ( i , mc_parking [ base ] ) else
93243: LD_VAR 0 5
93247: PPUSH
93248: LD_EXP 111
93252: PUSH
93253: LD_VAR 0 1
93257: ARRAY
93258: PPUSH
93259: CALL_OW 113
93263: GO 93305
// if GetControl ( i ) = control_manual then
93265: LD_VAR 0 5
93269: PPUSH
93270: CALL_OW 263
93274: PUSH
93275: LD_INT 1
93277: EQUAL
93278: IFFALSE 93305
// if IsDrivenBy ( i ) then
93280: LD_VAR 0 5
93284: PPUSH
93285: CALL_OW 311
93289: IFFALSE 93305
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
93291: LD_VAR 0 5
93295: PPUSH
93296: CALL_OW 311
93300: PPUSH
93301: CALL_OW 121
// end ;
93305: GO 93217
93307: POP
93308: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
93309: LD_VAR 0 2
93313: PPUSH
93314: LD_INT 95
93316: PUSH
93317: LD_EXP 111
93321: PUSH
93322: LD_VAR 0 1
93326: ARRAY
93327: PUSH
93328: EMPTY
93329: LIST
93330: LIST
93331: PPUSH
93332: CALL_OW 72
93336: PUSH
93337: LD_VAR 0 2
93341: EQUAL
93342: PUSH
93343: LD_EXP 110
93347: PUSH
93348: LD_VAR 0 1
93352: ARRAY
93353: OR
93354: PUSH
93355: LD_EXP 87
93359: PUSH
93360: LD_VAR 0 1
93364: ARRAY
93365: NOT
93366: OR
93367: IFFALSE 93137
// end ; MC_Reset ( base , 19 ) ;
93369: LD_VAR 0 1
93373: PPUSH
93374: LD_INT 19
93376: PPUSH
93377: CALL 23985 0 2
// MC_Reset ( base , 20 ) ;
93381: LD_VAR 0 1
93385: PPUSH
93386: LD_INT 20
93388: PPUSH
93389: CALL 23985 0 2
// end ; end_of_file
93393: LD_VAR 0 4
93397: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
93398: GO 93400
93400: DISABLE
// begin ru_radar := 98 ;
93401: LD_ADDR_EXP 130
93405: PUSH
93406: LD_INT 98
93408: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
93409: LD_ADDR_EXP 131
93413: PUSH
93414: LD_INT 89
93416: ST_TO_ADDR
// us_hack := 99 ;
93417: LD_ADDR_EXP 132
93421: PUSH
93422: LD_INT 99
93424: ST_TO_ADDR
// us_artillery := 97 ;
93425: LD_ADDR_EXP 133
93429: PUSH
93430: LD_INT 97
93432: ST_TO_ADDR
// ar_bio_bomb := 91 ;
93433: LD_ADDR_EXP 134
93437: PUSH
93438: LD_INT 91
93440: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
93441: LD_ADDR_EXP 135
93445: PUSH
93446: LD_INT 92
93448: ST_TO_ADDR
// tech_Artillery := 80 ;
93449: LD_ADDR_EXP 136
93453: PUSH
93454: LD_INT 80
93456: ST_TO_ADDR
// tech_RadMat := 81 ;
93457: LD_ADDR_EXP 137
93461: PUSH
93462: LD_INT 81
93464: ST_TO_ADDR
// tech_BasicTools := 82 ;
93465: LD_ADDR_EXP 138
93469: PUSH
93470: LD_INT 82
93472: ST_TO_ADDR
// tech_Cargo := 83 ;
93473: LD_ADDR_EXP 139
93477: PUSH
93478: LD_INT 83
93480: ST_TO_ADDR
// tech_Track := 84 ;
93481: LD_ADDR_EXP 140
93485: PUSH
93486: LD_INT 84
93488: ST_TO_ADDR
// tech_Crane := 85 ;
93489: LD_ADDR_EXP 141
93493: PUSH
93494: LD_INT 85
93496: ST_TO_ADDR
// tech_Bulldozer := 86 ;
93497: LD_ADDR_EXP 142
93501: PUSH
93502: LD_INT 86
93504: ST_TO_ADDR
// tech_Hovercraft := 87 ;
93505: LD_ADDR_EXP 143
93509: PUSH
93510: LD_INT 87
93512: ST_TO_ADDR
// end ;
93513: END
