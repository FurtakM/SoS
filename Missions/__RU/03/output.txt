// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 320 0 0
// PrepareRussian ;
  24: CALL 908 0 0
// playerVehicles = [ ] ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// beriaBase = [ ] ;
  35: LD_ADDR_EXP 2
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// kirovBase = [ ] ;
  42: LD_ADDR_EXP 3
  46: PUSH
  47: EMPTY
  48: ST_TO_ADDR
// meetBelkovBrother = false ;
  49: LD_ADDR_EXP 4
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  57: LD_ADDR_EXP 5
  61: PUSH
  62: LD_STRING 01_Belkov
  64: PPUSH
  65: CALL_OW 28
  69: ST_TO_ADDR
// meetPlatonov = false ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// labConstructed = false ;
  78: LD_ADDR_EXP 7
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// workshopConstructed = false ;
  86: LD_ADDR_EXP 8
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// engineResearched = false ;
  94: LD_ADDR_EXP 9
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// canBuildSameBuilding = false ;
 102: LD_ADDR_EXP 10
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// constructedFirstVehicle = false ;
 110: LD_ADDR_EXP 11
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// vehicleForKurin = false ;
 118: LD_ADDR_EXP 13
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// backToBeria1 = false ;
 126: LD_ADDR_EXP 14
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// backToBeria2 = false ;
 134: LD_ADDR_EXP 15
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// construcMoreVehicles = false ;
 142: LD_ADDR_EXP 16
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 150: LD_ADDR_EXP 17
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// spawnCrates = false ;
 158: LD_ADDR_EXP 19
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 166: LD_ADDR_EXP 20
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 174: LD_ADDR_EXP 21
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// immortalBelkovTeam = false ;
 182: LD_ADDR_EXP 22
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// canExitBase = false ;
 190: LD_ADDR_EXP 18
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// sawLeftBunker = false ;
 198: LD_ADDR_EXP 25
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// sawRightBunker = false ;
 206: LD_ADDR_EXP 26
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 214: LD_ADDR_EXP 27
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 222: LD_ADDR_EXP 28
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// playerGetSupport = false ;
 230: LD_ADDR_EXP 29
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// captureBelkovVehicle = false ;
 238: LD_ADDR_EXP 33
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// saveBelkovObjective = false ;
 246: LD_ADDR_EXP 31
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// medalForGetSupport = true ;
 254: LD_ADDR_EXP 35
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 262: LD_ADDR_EXP 34
 266: PUSH
 267: LD_INT 1
 269: NEG
 270: ST_TO_ADDR
// initiative = 0 ;
 271: LD_ADDR_EXP 37
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// lostComradesCounter = 0 ;
 279: LD_ADDR_EXP 38
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// northMapExplored = false ;
 287: LD_ADDR_EXP 36
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 295: LD_ADDR_EXP 23
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// activateAMAI = false ;
 303: LD_ADDR_EXP 24
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// MissionIntro ;
 311: CALL 5584 0 0
// end ; end_of_file
 315: LD_VAR 0 1
 319: RET
// export function InitMapConfig ; begin
 320: LD_INT 0
 322: PPUSH
// BaseMapConfig ;
 323: CALL 336 0 0
// MissionMapConfig ;
 327: CALL 422 0 0
// end ;
 331: LD_VAR 0 1
 335: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 336: LD_INT 0
 338: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 339: LD_ADDR_EXP 39
 343: PUSH
 344: LD_INT 2
 346: PUSH
 347: LD_INT 4
 349: PUSH
 350: LD_INT 1
 352: PUSH
 353: LD_INT 0
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 362: LD_ADDR_EXP 40
 366: PUSH
 367: LD_INT 2
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: LD_INT 2
 375: PUSH
 376: LD_INT 2
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: ST_TO_ADDR
// animalsAgression = 0 ;
 385: LD_ADDR_EXP 41
 389: PUSH
 390: LD_INT 0
 392: ST_TO_ADDR
// debugMode = 0 ;
 393: LD_ADDR_EXP 44
 397: PUSH
 398: LD_INT 0
 400: ST_TO_ADDR
// missionPrefix = 02_ ;
 401: LD_ADDR_EXP 42
 405: PUSH
 406: LD_STRING 02_
 408: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 409: LD_ADDR_EXP 43
 413: PUSH
 414: LD_STRING 01_
 416: ST_TO_ADDR
// end ;
 417: LD_VAR 0 1
 421: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 422: LD_INT 0
 424: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 425: LD_ADDR_EXP 46
 429: PUSH
 430: LD_INT 162
 432: PUSH
 433: LD_INT 107
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 162
 442: PUSH
 443: LD_INT 108
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 163
 452: PUSH
 453: LD_INT 109
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PUSH
 460: LD_INT 163
 462: PUSH
 463: LD_INT 110
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 162
 472: PUSH
 473: LD_INT 109
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: LD_INT 161
 482: PUSH
 483: LD_INT 107
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 161
 492: PUSH
 493: LD_INT 106
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 509: LD_ADDR_EXP 47
 513: PUSH
 514: LD_INT 113
 516: PUSH
 517: LD_INT 96
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 114
 526: PUSH
 527: LD_INT 97
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 114
 536: PUSH
 537: LD_INT 98
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 549: LD_ADDR_EXP 45
 553: PUSH
 554: LD_INT 10
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: LD_INT 2
 562: PUSH
 563: LD_INT 1
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: LIST
 570: LIST
 571: ST_TO_ADDR
// labCratesRefund = 20 ;
 572: LD_ADDR_EXP 48
 576: PUSH
 577: LD_INT 20
 579: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 580: LD_ADDR_EXP 49
 584: PUSH
 585: LD_INT 40
 587: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 50
 592: PUSH
 593: LD_INT 1
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: LD_INT 2
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 ] , [ 3 , 3 ] , [ 4 , 4 ] ] [ Difficulty ] ;
 613: LD_ADDR_EXP 51
 617: PUSH
 618: LD_INT 2
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 3
 630: PUSH
 631: LD_INT 3
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 4
 640: PUSH
 641: LD_INT 4
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: PUSH
 653: LD_OWVAR 67
 657: ARRAY
 658: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 659: LD_ADDR_EXP 52
 663: PUSH
 664: LD_INT 21000
 666: PUSH
 667: LD_INT 16800
 669: PUSH
 670: LD_INT 12600
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: LIST
 677: PUSH
 678: LD_OWVAR 67
 682: ARRAY
 683: ST_TO_ADDR
// end ;
 684: LD_VAR 0 1
 688: RET
// every 0 0$1 trigger debugMode do var i ;
 689: LD_EXP 44
 693: IFFALSE 905
 695: GO 697
 697: DISABLE
 698: LD_INT 0
 700: PPUSH
// begin enable ;
 701: ENABLE
// FogOff ( your_side ) ;
 702: LD_OWVAR 2
 706: PPUSH
 707: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 711: LD_ADDR_VAR 0 1
 715: PUSH
 716: LD_INT 22
 718: PUSH
 719: LD_OWVAR 2
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 2
 730: PUSH
 731: LD_INT 21
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 21
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: LIST
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PPUSH
 760: CALL_OW 69
 764: PUSH
 765: FOR_IN
 766: IFFALSE 782
// SetLives ( i , 1000 ) ;
 768: LD_VAR 0 1
 772: PPUSH
 773: LD_INT 1000
 775: PPUSH
 776: CALL_OW 234
 780: GO 765
 782: POP
 783: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_OWVAR 2
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 2
 803: PUSH
 804: LD_INT 30
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 30
 816: PUSH
 817: LD_INT 1
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PPUSH
 833: CALL_OW 69
 837: PUSH
 838: FOR_IN
 839: IFFALSE 903
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 841: LD_VAR 0 1
 845: PPUSH
 846: CALL_OW 274
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: LD_INT 9999
 856: PPUSH
 857: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 861: LD_VAR 0 1
 865: PPUSH
 866: CALL_OW 274
 870: PPUSH
 871: LD_INT 2
 873: PPUSH
 874: LD_INT 9999
 876: PPUSH
 877: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 881: LD_VAR 0 1
 885: PPUSH
 886: CALL_OW 274
 890: PPUSH
 891: LD_INT 3
 893: PPUSH
 894: LD_INT 9999
 896: PPUSH
 897: CALL_OW 277
// end ;
 901: GO 838
 903: POP
 904: POP
// end ; end_of_file
 905: PPOPN 1
 907: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export function PrepareRussian ; begin
 908: LD_INT 0
 910: PPUSH
// PrepareCharactersFromPreviousMission ;
 911: CALL 1242 0 0
// PrepareKirovBase ;
 915: CALL 1437 0 0
// PrepareBeriaBase ;
 919: CALL 2155 0 0
// end ;
 923: LD_VAR 0 1
 927: RET
// export function PrepareBelkovReturnTeam ; var unit , others ; begin
 928: LD_INT 0
 930: PPUSH
 931: PPUSH
 932: PPUSH
// belkovTeam = [ ] ;
 933: LD_ADDR_EXP 64
 937: PUSH
 938: EMPTY
 939: ST_TO_ADDR
// uc_side = 6 ;
 940: LD_ADDR_OWVAR 20
 944: PUSH
 945: LD_INT 6
 947: ST_TO_ADDR
// uc_nation = nation_russian ;
 948: LD_ADDR_OWVAR 21
 952: PUSH
 953: LD_INT 3
 955: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
 956: LD_ADDR_OWVAR 37
 960: PUSH
 961: LD_EXP 66
 965: PUSH
 966: LD_INT 1
 968: ARRAY
 969: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
 970: LD_ADDR_OWVAR 39
 974: PUSH
 975: LD_EXP 66
 979: PUSH
 980: LD_INT 2
 982: ARRAY
 983: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
 984: LD_ADDR_OWVAR 38
 988: PUSH
 989: LD_EXP 66
 993: PUSH
 994: LD_INT 3
 996: ARRAY
 997: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
 998: LD_ADDR_OWVAR 40
1002: PUSH
1003: LD_EXP 66
1007: PUSH
1008: LD_INT 4
1010: ARRAY
1011: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1012: LD_ADDR_OWVAR 41
1016: PUSH
1017: LD_EXP 66
1021: PUSH
1022: LD_INT 5
1024: ARRAY
1025: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1026: LD_ADDR_EXP 63
1030: PUSH
1031: CALL_OW 45
1035: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1036: LD_EXP 63
1040: PPUSH
1041: LD_INT 3
1043: PPUSH
1044: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1048: LD_EXP 63
1052: PPUSH
1053: LD_INT 11
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1063: LD_ADDR_EXP 64
1067: PUSH
1068: LD_EXP 64
1072: PUSH
1073: LD_EXP 63
1077: ADD
1078: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1079: LD_STRING 02_TmpBelkov
1081: PPUSH
1082: CALL_OW 28
1086: IFFALSE 1133
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1088: LD_ADDR_EXP 55
1092: PUSH
1093: LD_STRING 02_TmpBelkov
1095: PPUSH
1096: CALL_OW 34
1100: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1101: LD_EXP 55
1105: PPUSH
1106: LD_EXP 63
1110: PPUSH
1111: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1115: LD_ADDR_EXP 64
1119: PUSH
1120: LD_EXP 64
1124: PUSH
1125: LD_EXP 55
1129: ADD
1130: ST_TO_ADDR
// end else
1131: GO 1176
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1133: LD_ADDR_EXP 59
1137: PUSH
1138: LD_STRING 02_TmpBelkov2
1140: PPUSH
1141: CALL_OW 34
1145: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1146: LD_EXP 59
1150: PPUSH
1151: LD_EXP 63
1155: PPUSH
1156: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1160: LD_ADDR_EXP 64
1164: PUSH
1165: LD_EXP 64
1169: PUSH
1170: LD_EXP 59
1174: ADD
1175: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1176: LD_ADDR_VAR 0 3
1180: PUSH
1181: LD_STRING 02_TmpBelkovTeam
1183: PPUSH
1184: CALL_OW 31
1188: ST_TO_ADDR
// for unit in others do
1189: LD_ADDR_VAR 0 2
1193: PUSH
1194: LD_VAR 0 3
1198: PUSH
1199: FOR_IN
1200: IFFALSE 1235
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1202: LD_VAR 0 2
1206: PPUSH
1207: LD_INT 11
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1217: LD_ADDR_EXP 64
1221: PUSH
1222: LD_EXP 64
1226: PUSH
1227: LD_VAR 0 2
1231: ADD
1232: ST_TO_ADDR
// end ;
1233: GO 1199
1235: POP
1236: POP
// end ;
1237: LD_VAR 0 1
1241: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1242: LD_INT 0
1244: PPUSH
1245: PPUSH
// uc_side = 3 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 3
1253: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1254: LD_ADDR_EXP 53
1258: PUSH
1259: LD_STRING Burlak
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: CALL 3345 0 2
1269: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1270: LD_ADDR_EXP 54
1274: PUSH
1275: LD_STRING Gnyevko
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: CALL 3345 0 2
1285: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1286: LD_ADDR_EXP 55
1290: PUSH
1291: LD_STRING Belkov
1293: PPUSH
1294: LD_INT 1
1296: PPUSH
1297: CALL 3345 0 2
1301: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1302: LD_ADDR_EXP 56
1306: PUSH
1307: LD_STRING Kirilenkova
1309: PPUSH
1310: LD_INT 1
1312: PPUSH
1313: CALL 3345 0 2
1317: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1318: LD_EXP 53
1322: PPUSH
1323: LD_INT 5
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1333: LD_EXP 54
1337: PPUSH
1338: LD_INT 3
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1348: LD_EXP 55
1352: PPUSH
1353: LD_INT 3
1355: PPUSH
1356: LD_INT 0
1358: PPUSH
1359: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1363: LD_EXP 56
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 0
1373: PPUSH
1374: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1378: LD_EXP 53
1382: PPUSH
1383: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1387: LD_ADDR_EXP 57
1391: PUSH
1392: LD_STRING 01_other_survivors
1394: PPUSH
1395: CALL_OW 31
1399: ST_TO_ADDR
// for i in other_survivors do
1400: LD_ADDR_VAR 0 2
1404: PUSH
1405: LD_EXP 57
1409: PUSH
1410: FOR_IN
1411: IFFALSE 1430
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1413: LD_VAR 0 2
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
1428: GO 1410
1430: POP
1431: POP
// end ;
1432: LD_VAR 0 1
1436: RET
// function PrepareKirovBase ; var i , un ; begin
1437: LD_INT 0
1439: PPUSH
1440: PPUSH
1441: PPUSH
// SetBName ( kirov , kirov ) ;
1442: LD_INT 71
1444: PPUSH
1445: LD_STRING kirov
1447: PPUSH
1448: CALL_OW 500
// uc_side = 6 ;
1452: LD_ADDR_OWVAR 20
1456: PUSH
1457: LD_INT 6
1459: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1460: LD_ADDR_EXP 58
1464: PUSH
1465: LD_STRING Kurin
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL 3345 0 2
1475: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1476: LD_ADDR_EXP 61
1480: PUSH
1481: LD_STRING Kovalyuk
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL 3345 0 2
1491: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1492: LD_ADDR_EXP 59
1496: PUSH
1497: LD_STRING Belkov2
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL 3345 0 2
1507: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1508: LD_EXP 58
1512: PPUSH
1513: LD_INT 4
1515: PPUSH
1516: LD_INT 0
1518: PPUSH
1519: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1523: LD_EXP 61
1527: PPUSH
1528: LD_INT 161
1530: PPUSH
1531: LD_INT 108
1533: PPUSH
1534: LD_INT 6
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 50
// ComHold ( Kurin ) ;
1544: LD_EXP 58
1548: PPUSH
1549: CALL_OW 140
// otherKirovUnits = [ ] ;
1553: LD_ADDR_EXP 60
1557: PUSH
1558: EMPTY
1559: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1560: LD_ADDR_EXP 45
1564: PUSH
1565: LD_EXP 45
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: LD_EXP 45
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PUSH
1582: LD_EXP 57
1586: PPUSH
1587: LD_INT 25
1589: PUSH
1590: LD_INT 1
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 72
1601: MINUS
1602: PPUSH
1603: CALL_OW 1
1607: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: DOUBLE
1614: LD_INT 1
1616: DEC
1617: ST_TO_ADDR
1618: LD_EXP 45
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1724
// begin uc_nation = 3 ;
1630: LD_ADDR_OWVAR 21
1634: PUSH
1635: LD_INT 3
1637: ST_TO_ADDR
// hc_gallery =  ;
1638: LD_ADDR_OWVAR 33
1642: PUSH
1643: LD_STRING 
1645: ST_TO_ADDR
// hc_name =  ;
1646: LD_ADDR_OWVAR 26
1650: PUSH
1651: LD_STRING 
1653: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( 3 , 5 ) ) ;
1654: LD_INT 0
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 5
1665: PPUSH
1666: CALL_OW 12
1670: PPUSH
1671: CALL_OW 380
// un = CreateHuman ;
1675: LD_ADDR_VAR 0 3
1679: PUSH
1680: CALL_OW 44
1684: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1685: LD_ADDR_EXP 60
1689: PUSH
1690: LD_EXP 60
1694: PUSH
1695: LD_VAR 0 3
1699: ADD
1700: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
1701: LD_VAR 0 3
1705: PPUSH
1706: LD_INT 161
1708: PPUSH
1709: LD_INT 108
1711: PPUSH
1712: LD_INT 6
1714: PPUSH
1715: LD_INT 0
1717: PPUSH
1718: CALL_OW 50
// end ;
1722: GO 1627
1724: POP
1725: POP
// for i := 1 to kirovAmountPeople [ 2 ] do
1726: LD_ADDR_VAR 0 2
1730: PUSH
1731: DOUBLE
1732: LD_INT 1
1734: DEC
1735: ST_TO_ADDR
1736: LD_EXP 45
1740: PUSH
1741: LD_INT 2
1743: ARRAY
1744: PUSH
1745: FOR_TO
1746: IFFALSE 1842
// begin uc_nation = 3 ;
1748: LD_ADDR_OWVAR 21
1752: PUSH
1753: LD_INT 3
1755: ST_TO_ADDR
// hc_gallery =  ;
1756: LD_ADDR_OWVAR 33
1760: PUSH
1761: LD_STRING 
1763: ST_TO_ADDR
// hc_name =  ;
1764: LD_ADDR_OWVAR 26
1768: PUSH
1769: LD_STRING 
1771: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( 4 , 5 ) ) ;
1772: LD_INT 0
1774: PPUSH
1775: LD_INT 2
1777: PPUSH
1778: LD_INT 4
1780: PPUSH
1781: LD_INT 5
1783: PPUSH
1784: CALL_OW 12
1788: PPUSH
1789: CALL_OW 380
// un = CreateHuman ;
1793: LD_ADDR_VAR 0 3
1797: PUSH
1798: CALL_OW 44
1802: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1803: LD_ADDR_EXP 60
1807: PUSH
1808: LD_EXP 60
1812: PUSH
1813: LD_VAR 0 3
1817: ADD
1818: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
1819: LD_VAR 0 3
1823: PPUSH
1824: LD_INT 161
1826: PPUSH
1827: LD_INT 108
1829: PPUSH
1830: LD_INT 6
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 50
// end ;
1840: GO 1745
1842: POP
1843: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
1844: LD_ADDR_VAR 0 2
1848: PUSH
1849: DOUBLE
1850: LD_INT 1
1852: DEC
1853: ST_TO_ADDR
1854: LD_EXP 45
1858: PUSH
1859: LD_INT 3
1861: ARRAY
1862: PUSH
1863: FOR_TO
1864: IFFALSE 1960
// begin uc_nation = 3 ;
1866: LD_ADDR_OWVAR 21
1870: PUSH
1871: LD_INT 3
1873: ST_TO_ADDR
// hc_gallery =  ;
1874: LD_ADDR_OWVAR 33
1878: PUSH
1879: LD_STRING 
1881: ST_TO_ADDR
// hc_name =  ;
1882: LD_ADDR_OWVAR 26
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 3 , 5 ) ) ;
1890: LD_INT 0
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 5
1901: PPUSH
1902: CALL_OW 12
1906: PPUSH
1907: CALL_OW 380
// un = CreateHuman ;
1911: LD_ADDR_VAR 0 3
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1921: LD_ADDR_EXP 60
1925: PUSH
1926: LD_EXP 60
1930: PUSH
1931: LD_VAR 0 3
1935: ADD
1936: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
1937: LD_VAR 0 3
1941: PPUSH
1942: LD_INT 161
1944: PPUSH
1945: LD_INT 108
1947: PPUSH
1948: LD_INT 6
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL_OW 50
// end ;
1958: GO 1863
1960: POP
1961: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
1962: LD_ADDR_VAR 0 2
1966: PUSH
1967: DOUBLE
1968: LD_INT 1
1970: DEC
1971: ST_TO_ADDR
1972: LD_EXP 45
1976: PUSH
1977: LD_INT 4
1979: ARRAY
1980: PUSH
1981: FOR_TO
1982: IFFALSE 2078
// begin uc_nation = 3 ;
1984: LD_ADDR_OWVAR 21
1988: PUSH
1989: LD_INT 3
1991: ST_TO_ADDR
// hc_gallery =  ;
1992: LD_ADDR_OWVAR 33
1996: PUSH
1997: LD_STRING 
1999: ST_TO_ADDR
// hc_name =  ;
2000: LD_ADDR_OWVAR 26
2004: PUSH
2005: LD_STRING 
2007: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( 3 , 5 ) ) ;
2008: LD_INT 0
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: LD_INT 3
2016: PPUSH
2017: LD_INT 5
2019: PPUSH
2020: CALL_OW 12
2024: PPUSH
2025: CALL_OW 380
// un = CreateHuman ;
2029: LD_ADDR_VAR 0 3
2033: PUSH
2034: CALL_OW 44
2038: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2039: LD_ADDR_EXP 60
2043: PUSH
2044: LD_EXP 60
2048: PUSH
2049: LD_VAR 0 3
2053: ADD
2054: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
2055: LD_VAR 0 3
2059: PPUSH
2060: LD_INT 161
2062: PPUSH
2063: LD_INT 108
2065: PPUSH
2066: LD_INT 6
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 50
// end ;
2076: GO 1981
2078: POP
2079: POP
// if not TestCharacters ( 01_Gnyevko ) then
2080: LD_STRING 01_Gnyevko
2082: PPUSH
2083: CALL_OW 28
2087: NOT
2088: IFFALSE 2131
// begin PrepareMechanic ( sex_male , 3 ) ;
2090: LD_INT 1
2092: PPUSH
2093: LD_INT 3
2095: PPUSH
2096: CALL_OW 383
// randomMech = CreateHuman ;
2100: LD_ADDR_EXP 62
2104: PUSH
2105: CALL_OW 44
2109: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2110: LD_EXP 62
2114: PPUSH
2115: LD_INT 161
2117: PPUSH
2118: LD_INT 108
2120: PPUSH
2121: LD_INT 6
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL_OW 50
// end ; if not belkovReturn then
2131: LD_EXP 5
2135: NOT
2136: IFFALSE 2150
// PlaceHumanInUnit ( Belkov2 , ru2_arm ) ;
2138: LD_EXP 59
2142: PPUSH
2143: LD_INT 95
2145: PPUSH
2146: CALL_OW 52
// end ;
2150: LD_VAR 0 1
2154: RET
// function PrepareBeriaBase ; var i , un ; begin
2155: LD_INT 0
2157: PPUSH
2158: PPUSH
2159: PPUSH
// SetBName ( beria , beria ) ;
2160: LD_INT 106
2162: PPUSH
2163: LD_STRING beria
2165: PPUSH
2166: CALL_OW 500
// uc_side = 6 ;
2170: LD_ADDR_OWVAR 20
2174: PUSH
2175: LD_INT 6
2177: ST_TO_ADDR
// uc_nation = 3 ;
2178: LD_ADDR_OWVAR 21
2182: PUSH
2183: LD_INT 3
2185: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2186: LD_ADDR_EXP 67
2190: PUSH
2191: LD_STRING Platonov
2193: PPUSH
2194: LD_INT 0
2196: PPUSH
2197: CALL 3345 0 2
2201: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2202: LD_EXP 67
2206: PPUSH
2207: LD_INT 112
2209: PPUSH
2210: LD_INT 97
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 48
// ComHold ( Platonov ) ;
2220: LD_EXP 67
2224: PPUSH
2225: CALL_OW 140
// platSoldiers = [ ] ;
2229: LD_ADDR_EXP 68
2233: PUSH
2234: EMPTY
2235: ST_TO_ADDR
// hc_gallery =  ;
2236: LD_ADDR_OWVAR 33
2240: PUSH
2241: LD_STRING 
2243: ST_TO_ADDR
// hc_name =  ;
2244: LD_ADDR_OWVAR 26
2248: PUSH
2249: LD_STRING 
2251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , rand ( 1 , 3 ) ) ;
2252: LD_INT 1
2254: PPUSH
2255: LD_INT 1
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: LD_INT 3
2263: PPUSH
2264: CALL_OW 12
2268: PPUSH
2269: CALL_OW 380
// un = CreateHuman ;
2273: LD_ADDR_VAR 0 3
2277: PUSH
2278: CALL_OW 44
2282: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2283: LD_ADDR_EXP 68
2287: PUSH
2288: LD_EXP 68
2292: PUSH
2293: LD_VAR 0 3
2297: ADD
2298: ST_TO_ADDR
// PlaceUnitXYR ( un , 110 , 97 , 6 , false ) ;
2299: LD_VAR 0 3
2303: PPUSH
2304: LD_INT 110
2306: PPUSH
2307: LD_INT 97
2309: PPUSH
2310: LD_INT 6
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: CALL_OW 50
// for i := 1 to 3 do
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: DOUBLE
2326: LD_INT 1
2328: DEC
2329: ST_TO_ADDR
2330: LD_INT 3
2332: PUSH
2333: FOR_TO
2334: IFFALSE 2413
// begin un = PrepareSolBun ( rand ( 1 , 3 ) , FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
2336: LD_ADDR_VAR 0 3
2340: PUSH
2341: LD_INT 1
2343: PPUSH
2344: LD_INT 3
2346: PPUSH
2347: CALL_OW 12
2351: PPUSH
2352: LD_INT 8
2354: PPUSH
2355: LD_INT 22
2357: PUSH
2358: LD_INT 6
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 30
2367: PUSH
2368: LD_INT 31
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 70
2383: PUSH
2384: LD_VAR 0 2
2388: ARRAY
2389: PPUSH
2390: CALL 4401 0 2
2394: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2395: LD_ADDR_EXP 68
2399: PUSH
2400: LD_EXP 68
2404: PUSH
2405: LD_VAR 0 3
2409: ADD
2410: ST_TO_ADDR
// end ;
2411: GO 2333
2413: POP
2414: POP
// end ; end_of_file
2415: LD_VAR 0 1
2419: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2420: LD_INT 0
2422: PPUSH
// PrepareTrap ;
2423: CALL 2436 0 0
// PrepareBunkiers ;
2427: CALL 2800 0 0
// end ;
2431: LD_VAR 0 1
2435: RET
// function PrepareTrap ; var i , un ; begin
2436: LD_INT 0
2438: PPUSH
2439: PPUSH
2440: PPUSH
// trapTeam = [ ] ;
2441: LD_ADDR_EXP 70
2445: PUSH
2446: EMPTY
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// uc_side = 1 ;
2456: LD_ADDR_OWVAR 20
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// hc_gallery =  ;
2464: LD_ADDR_OWVAR 33
2468: PUSH
2469: LD_STRING 
2471: ST_TO_ADDR
// hc_name = profile_name ;
2472: LD_ADDR_OWVAR 26
2476: PUSH
2477: LD_OWVAR 78
2481: ST_TO_ADDR
// hc_importance = 100 ;
2482: LD_ADDR_OWVAR 32
2486: PUSH
2487: LD_INT 100
2489: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2490: LD_INT 1
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: LD_EXP 50
2500: PUSH
2501: LD_INT 1
2503: PLUS
2504: PPUSH
2505: CALL_OW 380
// trapCommander = CreateHuman ;
2509: LD_ADDR_EXP 69
2513: PUSH
2514: CALL_OW 44
2518: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2519: LD_EXP 69
2523: PPUSH
2524: LD_INT 13
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2534: LD_EXP 69
2538: PPUSH
2539: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2543: LD_ADDR_EXP 70
2547: PUSH
2548: LD_EXP 70
2552: PUSH
2553: LD_EXP 69
2557: ADD
2558: ST_TO_ADDR
// hc_importance = 0 ;
2559: LD_ADDR_OWVAR 32
2563: PUSH
2564: LD_INT 0
2566: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2567: LD_ADDR_VAR 0 2
2571: PUSH
2572: DOUBLE
2573: LD_INT 1
2575: DEC
2576: ST_TO_ADDR
2577: LD_EXP 51
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PUSH
2586: FOR_TO
2587: IFFALSE 2679
// begin hc_name =  ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING 
2596: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2597: LD_INT 0
2599: PPUSH
2600: LD_INT 1
2602: PPUSH
2603: LD_EXP 50
2607: PPUSH
2608: CALL_OW 380
// un = CreateHuman ;
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: CALL_OW 44
2621: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
2622: LD_VAR 0 3
2626: PPUSH
2627: LD_INT 12
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 49
// ComCrawl ( un ) ;
2637: LD_VAR 0 3
2641: PPUSH
2642: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2646: LD_VAR 0 3
2650: PPUSH
2651: LD_INT 116
2653: PPUSH
2654: LD_INT 21
2656: PPUSH
2657: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2661: LD_ADDR_EXP 70
2665: PUSH
2666: LD_EXP 70
2670: PUSH
2671: LD_VAR 0 3
2675: ADD
2676: ST_TO_ADDR
// end ;
2677: GO 2586
2679: POP
2680: POP
// for i := 1 to trapAmountPeople [ 2 ] do
2681: LD_ADDR_VAR 0 2
2685: PUSH
2686: DOUBLE
2687: LD_INT 1
2689: DEC
2690: ST_TO_ADDR
2691: LD_EXP 51
2695: PUSH
2696: LD_INT 2
2698: ARRAY
2699: PUSH
2700: FOR_TO
2701: IFFALSE 2793
// begin hc_name =  ;
2703: LD_ADDR_OWVAR 26
2707: PUSH
2708: LD_STRING 
2710: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2711: LD_INT 0
2713: PPUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_EXP 50
2721: PPUSH
2722: CALL_OW 380
// un = CreateHuman ;
2726: LD_ADDR_VAR 0 3
2730: PUSH
2731: CALL_OW 44
2735: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
2736: LD_VAR 0 3
2740: PPUSH
2741: LD_INT 14
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// ComCrawl ( un ) ;
2751: LD_VAR 0 3
2755: PPUSH
2756: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
2760: LD_VAR 0 3
2764: PPUSH
2765: LD_INT 116
2767: PPUSH
2768: LD_INT 21
2770: PPUSH
2771: CALL_OW 178
// trapTeam = trapTeam ^ un ;
2775: LD_ADDR_EXP 70
2779: PUSH
2780: LD_EXP 70
2784: PUSH
2785: LD_VAR 0 3
2789: ADD
2790: ST_TO_ADDR
// end ;
2791: GO 2700
2793: POP
2794: POP
// end ;
2795: LD_VAR 0 1
2799: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
2800: LD_INT 0
2802: PPUSH
2803: PPUSH
2804: PPUSH
2805: PPUSH
// uc_side = 1 ;
2806: LD_ADDR_OWVAR 20
2810: PUSH
2811: LD_INT 1
2813: ST_TO_ADDR
// uc_nation = nation_american ;
2814: LD_ADDR_OWVAR 21
2818: PUSH
2819: LD_INT 1
2821: ST_TO_ADDR
// bc_level = 1 ;
2822: LD_ADDR_OWVAR 43
2826: PUSH
2827: LD_INT 1
2829: ST_TO_ADDR
// bc_type = b_breastwork ;
2830: LD_ADDR_OWVAR 42
2834: PUSH
2835: LD_INT 31
2837: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
2838: LD_ADDR_VAR 0 4
2842: PUSH
2843: LD_INT 104
2845: PPUSH
2846: LD_INT 59
2848: PPUSH
2849: LD_INT 4
2851: PPUSH
2852: CALL_OW 47
2856: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
2857: LD_ADDR_EXP 71
2861: PUSH
2862: LD_EXP 71
2866: PUSH
2867: LD_VAR 0 4
2871: ADD
2872: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2873: LD_EXP 50
2877: PPUSH
2878: LD_VAR 0 4
2882: PPUSH
2883: CALL 4401 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
2887: LD_ADDR_VAR 0 4
2891: PUSH
2892: LD_INT 101
2894: PPUSH
2895: LD_INT 55
2897: PPUSH
2898: LD_INT 4
2900: PPUSH
2901: CALL_OW 47
2905: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
2906: LD_ADDR_EXP 71
2910: PUSH
2911: LD_EXP 71
2915: PUSH
2916: LD_VAR 0 4
2920: ADD
2921: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2922: LD_EXP 50
2926: PPUSH
2927: LD_VAR 0 4
2931: PPUSH
2932: CALL 4401 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
2936: LD_ADDR_VAR 0 4
2940: PUSH
2941: LD_INT 132
2943: PPUSH
2944: LD_INT 62
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 47
2954: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
2955: LD_ADDR_EXP 72
2959: PUSH
2960: LD_EXP 72
2964: PUSH
2965: LD_VAR 0 4
2969: ADD
2970: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
2971: LD_EXP 50
2975: PPUSH
2976: LD_VAR 0 4
2980: PPUSH
2981: CALL 4401 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
2985: LD_ADDR_VAR 0 4
2989: PUSH
2990: LD_INT 134
2992: PPUSH
2993: LD_INT 66
2995: PPUSH
2996: LD_INT 1
2998: PPUSH
2999: CALL_OW 47
3003: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3004: LD_ADDR_EXP 72
3008: PUSH
3009: LD_EXP 72
3013: PUSH
3014: LD_VAR 0 4
3018: ADD
3019: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3020: LD_EXP 50
3024: PPUSH
3025: LD_VAR 0 4
3029: PPUSH
3030: CALL 4401 0 2
// bc_type = b_depot ;
3034: LD_ADDR_OWVAR 42
3038: PUSH
3039: LD_INT 0
3041: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3042: LD_ADDR_EXP 73
3046: PUSH
3047: LD_INT 92
3049: PPUSH
3050: LD_INT 51
3052: PPUSH
3053: LD_INT 2
3055: PPUSH
3056: CALL_OW 47
3060: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3061: LD_ADDR_EXP 74
3065: PUSH
3066: LD_INT 193
3068: ST_TO_ADDR
// amLeftEngs = [ ] ;
3069: LD_ADDR_EXP 75
3073: PUSH
3074: EMPTY
3075: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: DOUBLE
3082: LD_INT 1
3084: DEC
3085: ST_TO_ADDR
3086: LD_INT 1
3088: PUSH
3089: LD_INT 1
3091: PUSH
3092: LD_INT 1
3094: PPUSH
3095: LD_INT 2
3097: PPUSH
3098: CALL_OW 12
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: PUSH
3108: LD_OWVAR 67
3112: ARRAY
3113: PUSH
3114: FOR_TO
3115: IFFALSE 3206
// begin uc_nation = 1 ;
3117: LD_ADDR_OWVAR 21
3121: PUSH
3122: LD_INT 1
3124: ST_TO_ADDR
// uc_side = 1 ;
3125: LD_ADDR_OWVAR 20
3129: PUSH
3130: LD_INT 1
3132: ST_TO_ADDR
// hc_gallery =  ;
3133: LD_ADDR_OWVAR 33
3137: PUSH
3138: LD_STRING 
3140: ST_TO_ADDR
// hc_name =  ;
3141: LD_ADDR_OWVAR 26
3145: PUSH
3146: LD_STRING 
3148: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3149: LD_INT 0
3151: PPUSH
3152: LD_INT 2
3154: PPUSH
3155: LD_EXP 50
3159: PPUSH
3160: CALL_OW 380
// un = CreateHuman ;
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: CALL_OW 44
3173: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3174: LD_ADDR_EXP 75
3178: PUSH
3179: LD_EXP 75
3183: PUSH
3184: LD_VAR 0 3
3188: ADD
3189: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_EXP 73
3199: PPUSH
3200: CALL_OW 52
// end ;
3204: GO 3114
3206: POP
3207: POP
// if Difficulty = 3 then
3208: LD_OWVAR 67
3212: PUSH
3213: LD_INT 3
3215: EQUAL
3216: IFFALSE 3340
// begin amRightEngs = [ ] ;
3218: LD_ADDR_EXP 76
3222: PUSH
3223: EMPTY
3224: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3225: LD_ADDR_VAR 0 2
3229: PUSH
3230: DOUBLE
3231: LD_INT 1
3233: DEC
3234: ST_TO_ADDR
3235: LD_INT 1
3237: PPUSH
3238: LD_INT 2
3240: PPUSH
3241: CALL_OW 12
3245: PUSH
3246: FOR_TO
3247: IFFALSE 3338
// begin uc_nation = 1 ;
3249: LD_ADDR_OWVAR 21
3253: PUSH
3254: LD_INT 1
3256: ST_TO_ADDR
// uc_side = 1 ;
3257: LD_ADDR_OWVAR 20
3261: PUSH
3262: LD_INT 1
3264: ST_TO_ADDR
// hc_gallery =  ;
3265: LD_ADDR_OWVAR 33
3269: PUSH
3270: LD_STRING 
3272: ST_TO_ADDR
// hc_name =  ;
3273: LD_ADDR_OWVAR 26
3277: PUSH
3278: LD_STRING 
3280: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 2
3286: PPUSH
3287: LD_EXP 50
3291: PPUSH
3292: CALL_OW 380
// un = CreateHuman ;
3296: LD_ADDR_VAR 0 3
3300: PUSH
3301: CALL_OW 44
3305: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3306: LD_ADDR_EXP 76
3310: PUSH
3311: LD_EXP 76
3315: PUSH
3316: LD_VAR 0 3
3320: ADD
3321: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: LD_EXP 74
3331: PPUSH
3332: CALL_OW 52
// end ;
3336: GO 3246
3338: POP
3339: POP
// end ; end ; end_of_file
3340: LD_VAR 0 1
3344: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3345: LD_INT 0
3347: PPUSH
3348: PPUSH
// if exist_mode then
3349: LD_VAR 0 2
3353: IFFALSE 3378
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3355: LD_ADDR_VAR 0 4
3359: PUSH
3360: LD_EXP 43
3364: PUSH
3365: LD_VAR 0 1
3369: STR
3370: PPUSH
3371: CALL_OW 34
3375: ST_TO_ADDR
3376: GO 3393
// unit := NewCharacter ( ident ) ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_VAR 0 1
3387: PPUSH
3388: CALL_OW 25
3392: ST_TO_ADDR
// result := unit ;
3393: LD_ADDR_VAR 0 3
3397: PUSH
3398: LD_VAR 0 4
3402: ST_TO_ADDR
// end ;
3403: LD_VAR 0 3
3407: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
3413: LD_ADDR_VAR 0 1
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_EXP 53
3427: PUSH
3428: LD_EXP 54
3432: PUSH
3433: LD_EXP 55
3437: PUSH
3438: LD_EXP 56
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: DIFF
3449: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
3450: LD_ADDR_VAR 0 7
3454: PUSH
3455: LD_VAR 0 1
3459: PUSH
3460: LD_INT 1
3462: PPUSH
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 12
3472: ARRAY
3473: ST_TO_ADDR
// if radio then
3474: LD_VAR 0 4
3478: IFFALSE 3527
// begin if GetSex ( speaker ) = sex_male then
3480: LD_VAR 0 7
3484: PPUSH
3485: CALL_OW 258
3489: PUSH
3490: LD_INT 1
3492: EQUAL
3493: IFFALSE 3511
// SayRadio ( speaker , dialogMID ) else
3495: LD_VAR 0 7
3499: PPUSH
3500: LD_VAR 0 2
3504: PPUSH
3505: CALL_OW 94
3509: GO 3525
// SayRadio ( speaker , dialogFID ) ;
3511: LD_VAR 0 7
3515: PPUSH
3516: LD_VAR 0 3
3520: PPUSH
3521: CALL_OW 94
// end else
3525: GO 3572
// begin if GetSex ( speaker ) = sex_male then
3527: LD_VAR 0 7
3531: PPUSH
3532: CALL_OW 258
3536: PUSH
3537: LD_INT 1
3539: EQUAL
3540: IFFALSE 3558
// Say ( speaker , dialogMID ) else
3542: LD_VAR 0 7
3546: PPUSH
3547: LD_VAR 0 2
3551: PPUSH
3552: CALL_OW 88
3556: GO 3572
// Say ( speaker , dialogFID ) ;
3558: LD_VAR 0 7
3562: PPUSH
3563: LD_VAR 0 3
3567: PPUSH
3568: CALL_OW 88
// end ; result := speaker ;
3572: LD_ADDR_VAR 0 5
3576: PUSH
3577: LD_VAR 0 7
3581: ST_TO_ADDR
// end ;
3582: LD_VAR 0 5
3586: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
3587: LD_INT 0
3589: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 255
3599: PUSH
3600: LD_VAR 0 3
3604: EQUAL
3605: PUSH
3606: LD_VAR 0 1
3610: PPUSH
3611: CALL_OW 302
3615: AND
3616: IFFALSE 3638
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
3618: LD_VAR 0 1
3622: PPUSH
3623: LD_EXP 42
3627: PUSH
3628: LD_VAR 0 2
3632: STR
3633: PPUSH
3634: CALL_OW 38
// end ;
3638: LD_VAR 0 4
3642: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
3643: LD_INT 0
3645: PPUSH
3646: PPUSH
3647: PPUSH
// resultCharactersToSave = [ ] ;
3648: LD_ADDR_VAR 0 6
3652: PUSH
3653: EMPTY
3654: ST_TO_ADDR
// for unit in characters do
3655: LD_ADDR_VAR 0 5
3659: PUSH
3660: LD_VAR 0 1
3664: PUSH
3665: FOR_IN
3666: IFFALSE 3714
// if GetSide ( unit ) = side and IsOK ( unit ) then
3668: LD_VAR 0 5
3672: PPUSH
3673: CALL_OW 255
3677: PUSH
3678: LD_VAR 0 3
3682: EQUAL
3683: PUSH
3684: LD_VAR 0 5
3688: PPUSH
3689: CALL_OW 302
3693: AND
3694: IFFALSE 3712
// resultCharactersToSave = resultCharactersToSave ^ unit ;
3696: LD_ADDR_VAR 0 6
3700: PUSH
3701: LD_VAR 0 6
3705: PUSH
3706: LD_VAR 0 5
3710: ADD
3711: ST_TO_ADDR
3712: GO 3665
3714: POP
3715: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
3716: LD_VAR 0 6
3720: PPUSH
3721: LD_EXP 42
3725: PUSH
3726: LD_VAR 0 2
3730: STR
3731: PPUSH
3732: CALL_OW 38
// end ;
3736: LD_VAR 0 4
3740: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
3746: LD_ADDR_VAR 0 3
3750: PUSH
3751: LD_STRING QMoreInfo
3753: PPUSH
3754: LD_VAR 0 1
3758: PPUSH
3759: CALL_OW 98
3763: ST_TO_ADDR
// case dec of 1 :
3764: LD_VAR 0 3
3768: PUSH
3769: LD_INT 1
3771: DOUBLE
3772: EQUAL
3773: IFTRUE 3777
3775: GO 3837
3777: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
3778: LD_EXP 53
3782: PPUSH
3783: LD_STRING D2a-Bur-1
3785: PPUSH
3786: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
3790: LD_EXP 67
3794: PPUSH
3795: LD_STRING D2a-Pla-1
3797: PPUSH
3798: CALL_OW 88
// q1 = q diff 1 ;
3802: LD_ADDR_VAR 0 4
3806: PUSH
3807: LD_VAR 0 1
3811: PUSH
3812: LD_INT 1
3814: DIFF
3815: ST_TO_ADDR
// if q1 >= 2 then
3816: LD_VAR 0 4
3820: PUSH
3821: LD_INT 2
3823: GREATEREQUAL
3824: IFFALSE 3835
// Question1 ( q1 ) ;
3826: LD_VAR 0 4
3830: PPUSH
3831: CALL 3741 0 1
// end ; 2 :
3835: GO 3974
3837: LD_INT 2
3839: DOUBLE
3840: EQUAL
3841: IFTRUE 3845
3843: GO 3905
3845: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
3846: LD_EXP 53
3850: PPUSH
3851: LD_STRING D2b-Bur-1
3853: PPUSH
3854: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
3858: LD_EXP 67
3862: PPUSH
3863: LD_STRING D2b-Pla-1
3865: PPUSH
3866: CALL_OW 88
// q1 = q diff 2 ;
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_VAR 0 1
3879: PUSH
3880: LD_INT 2
3882: DIFF
3883: ST_TO_ADDR
// if q1 >= 2 then
3884: LD_VAR 0 4
3888: PUSH
3889: LD_INT 2
3891: GREATEREQUAL
3892: IFFALSE 3903
// Question1 ( q1 ) ;
3894: LD_VAR 0 4
3898: PPUSH
3899: CALL 3741 0 1
// end ; 3 :
3903: GO 3974
3905: LD_INT 3
3907: DOUBLE
3908: EQUAL
3909: IFTRUE 3913
3911: GO 3973
3913: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
3914: LD_EXP 53
3918: PPUSH
3919: LD_STRING D2c-Bur-1
3921: PPUSH
3922: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
3926: LD_EXP 67
3930: PPUSH
3931: LD_STRING D2c-Pla-1
3933: PPUSH
3934: CALL_OW 88
// q1 = q diff 3 ;
3938: LD_ADDR_VAR 0 4
3942: PUSH
3943: LD_VAR 0 1
3947: PUSH
3948: LD_INT 3
3950: DIFF
3951: ST_TO_ADDR
// if q1 >= 2 then
3952: LD_VAR 0 4
3956: PUSH
3957: LD_INT 2
3959: GREATEREQUAL
3960: IFFALSE 3971
// Question1 ( q1 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: CALL 3741 0 1
// end ; end ;
3971: GO 3974
3973: POP
// end ;
3974: LD_VAR 0 2
3978: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
3979: LD_INT 0
3981: PPUSH
3982: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
3983: LD_VAR 0 1
3987: PPUSH
3988: CALL_OW 302
3992: NOT
3993: PUSH
3994: LD_VAR 0 2
3998: PPUSH
3999: CALL_OW 302
4003: NOT
4004: OR
4005: PUSH
4006: LD_VAR 0 3
4010: PPUSH
4011: CALL_OW 302
4015: NOT
4016: OR
4017: PUSH
4018: LD_VAR 0 3
4022: PPUSH
4023: CALL_OW 261
4027: PUSH
4028: LD_INT 100
4030: EQUAL
4031: OR
4032: IFFALSE 4036
// exit ;
4034: GO 4155
// AddComTransport ( engineer , depot , mat_oil ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: LD_VAR 0 2
4045: PPUSH
4046: LD_INT 2
4048: PPUSH
4049: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4053: LD_INT 35
4055: PPUSH
4056: CALL_OW 67
// until Carry ( engineer ) ;
4060: LD_VAR 0 1
4064: PPUSH
4065: CALL_OW 281
4069: IFFALSE 4053
// RemoveTasks ( engineer ) ;
4071: LD_VAR 0 1
4075: PPUSH
4076: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4080: LD_VAR 0 1
4084: PPUSH
4085: LD_STRING O
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: LD_VAR 0 3
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: PPUSH
4120: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4124: LD_INT 35
4126: PPUSH
4127: CALL_OW 67
// until not Carry ( engineer ) ;
4131: LD_VAR 0 1
4135: PPUSH
4136: CALL_OW 281
4140: NOT
4141: IFFALSE 4124
// SetFuel ( vehicle , 100 ) ;
4143: LD_VAR 0 3
4147: PPUSH
4148: LD_INT 100
4150: PPUSH
4151: CALL_OW 240
// end ;
4155: LD_VAR 0 4
4159: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4160: LD_INT 0
4162: PPUSH
4163: PPUSH
4164: PPUSH
4165: PPUSH
4166: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4167: LD_ADDR_VAR 0 8
4171: PUSH
4172: LD_INT 48
4174: PUSH
4175: LD_INT 49
4177: PUSH
4178: LD_INT 50
4180: PUSH
4181: LD_INT 20
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: LD_INT 51
4189: PUSH
4190: LD_INT 52
4192: PUSH
4193: LD_INT 69
4195: PUSH
4196: LD_INT 39
4198: PUSH
4199: LD_INT 34
4201: PUSH
4202: LD_INT 40
4204: PUSH
4205: LD_INT 53
4207: PUSH
4208: LD_INT 71
4210: PUSH
4211: LD_INT 57
4213: PUSH
4214: LD_INT 58
4216: PUSH
4217: LD_INT 44
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: LD_INT 27
4225: PUSH
4226: LD_INT 23
4228: PUSH
4229: LD_INT 33
4231: PUSH
4232: LD_INT 59
4234: PUSH
4235: LD_INT 54
4237: PUSH
4238: LD_INT 55
4240: PUSH
4241: LD_INT 56
4243: PUSH
4244: LD_INT 63
4246: PUSH
4247: LD_INT 64
4249: PUSH
4250: LD_INT 65
4252: PUSH
4253: LD_INT 30
4255: PUSH
4256: LD_INT 31
4258: PUSH
4259: LD_INT 21
4261: PUSH
4262: LD_INT 22
4264: PUSH
4265: LD_INT 25
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4302: LD_ADDR_VAR 0 5
4306: PUSH
4307: DOUBLE
4308: LD_INT 1
4310: DEC
4311: ST_TO_ADDR
4312: LD_VAR 0 8
4316: PUSH
4317: FOR_TO
4318: IFFALSE 4394
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4320: LD_VAR 0 8
4324: PUSH
4325: LD_VAR 0 5
4329: ARRAY
4330: PPUSH
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 321
4340: PUSH
4341: LD_INT 1
4343: EQUAL
4344: PUSH
4345: LD_VAR 0 8
4349: PUSH
4350: LD_VAR 0 5
4354: ARRAY
4355: PPUSH
4356: LD_VAR 0 3
4360: PPUSH
4361: CALL_OW 482
4365: PUSH
4366: LD_INT 1
4368: EQUAL
4369: AND
4370: IFFALSE 4392
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
4372: LD_VAR 0 2
4376: PPUSH
4377: LD_VAR 0 8
4381: PUSH
4382: LD_VAR 0 5
4386: ARRAY
4387: PPUSH
4388: CALL_OW 184
4392: GO 4317
4394: POP
4395: POP
// end ;
4396: LD_VAR 0 4
4400: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4401: LD_INT 0
4403: PPUSH
4404: PPUSH
4405: PPUSH
// uc_side := GetSide ( b ) ;
4406: LD_ADDR_OWVAR 20
4410: PUSH
4411: LD_VAR 0 2
4415: PPUSH
4416: CALL_OW 255
4420: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_VAR 0 2
4430: PPUSH
4431: CALL_OW 248
4435: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 1
4441: PPUSH
4442: LD_VAR 0 1
4446: PPUSH
4447: CALL_OW 380
// un = CreateHuman ;
4451: LD_ADDR_VAR 0 4
4455: PUSH
4456: CALL_OW 44
4460: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4461: LD_ADDR_VAR 0 5
4465: PUSH
4466: LD_VAR 0 2
4470: PPUSH
4471: CALL_OW 254
4475: PUSH
4476: LD_INT 3
4478: MINUS
4479: ST_TO_ADDR
// if dir < 0 then
4480: LD_VAR 0 5
4484: PUSH
4485: LD_INT 0
4487: LESS
4488: IFFALSE 4504
// dir := 6 + dir ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_INT 6
4497: PUSH
4498: LD_VAR 0 5
4502: PLUS
4503: ST_TO_ADDR
// SetDir ( un , dir ) ;
4504: LD_VAR 0 4
4508: PPUSH
4509: LD_VAR 0 5
4513: PPUSH
4514: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4518: LD_VAR 0 4
4522: PPUSH
4523: LD_VAR 0 2
4527: PPUSH
4528: CALL_OW 52
// result = un ;
4532: LD_ADDR_VAR 0 3
4536: PUSH
4537: LD_VAR 0 4
4541: ST_TO_ADDR
// end ;
4542: LD_VAR 0 3
4546: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
4547: LD_INT 0
4549: PPUSH
4550: PPUSH
4551: PPUSH
// tmp = [ ] ;
4552: LD_ADDR_VAR 0 5
4556: PUSH
4557: EMPTY
4558: ST_TO_ADDR
// if not vehicles then
4559: LD_VAR 0 1
4563: NOT
4564: IFFALSE 4568
// exit ;
4566: GO 4696
// for i in vehicles do
4568: LD_ADDR_VAR 0 4
4572: PUSH
4573: LD_VAR 0 1
4577: PUSH
4578: FOR_IN
4579: IFFALSE 4680
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) , GetFuel ( i ) ] ) ;
4581: LD_ADDR_VAR 0 5
4585: PUSH
4586: LD_VAR 0 5
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_VAR 0 4
4598: PPUSH
4599: CALL_OW 265
4603: PUSH
4604: LD_VAR 0 4
4608: PPUSH
4609: CALL_OW 262
4613: PUSH
4614: LD_VAR 0 4
4618: PPUSH
4619: CALL_OW 263
4623: PUSH
4624: LD_VAR 0 4
4628: PPUSH
4629: CALL_OW 264
4633: PUSH
4634: LD_VAR 0 4
4638: PPUSH
4639: CALL_OW 261
4643: PUSH
4644: LD_VAR 0 4
4648: PPUSH
4649: CALL_OW 256
4653: PUSH
4654: LD_VAR 0 4
4658: PPUSH
4659: CALL_OW 261
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: PPUSH
4673: CALL_OW 2
4677: ST_TO_ADDR
4678: GO 4578
4680: POP
4681: POP
// SaveVariable ( tmp , ident ) ;
4682: LD_VAR 0 5
4686: PPUSH
4687: LD_VAR 0 2
4691: PPUSH
4692: CALL_OW 39
// end ;
4696: LD_VAR 0 3
4700: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
4701: LD_INT 0
4703: PPUSH
4704: PPUSH
4705: PPUSH
// buildingsToSave = [ ] ;
4706: LD_ADDR_VAR 0 5
4710: PUSH
4711: EMPTY
4712: ST_TO_ADDR
// if not buildings then
4713: LD_VAR 0 1
4717: NOT
4718: IFFALSE 4722
// exit ;
4720: GO 5090
// for i in buildings do
4722: LD_ADDR_VAR 0 4
4726: PUSH
4727: LD_VAR 0 1
4731: PUSH
4732: FOR_IN
4733: IFFALSE 5074
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
4735: LD_VAR 0 4
4739: PPUSH
4740: CALL_OW 266
4744: PUSH
4745: LD_INT 6
4747: PUSH
4748: LD_INT 7
4750: PUSH
4751: LD_INT 8
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: IN
4759: IFFALSE 4873
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
4761: LD_ADDR_VAR 0 5
4765: PUSH
4766: LD_VAR 0 5
4770: PUSH
4771: LD_VAR 0 4
4775: PPUSH
4776: CALL_OW 266
4780: PUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: CALL_OW 250
4790: PUSH
4791: LD_VAR 0 4
4795: PPUSH
4796: CALL_OW 251
4800: PUSH
4801: LD_VAR 0 4
4805: PPUSH
4806: CALL_OW 254
4810: PUSH
4811: LD_VAR 0 4
4815: PPUSH
4816: CALL_OW 267
4820: PUSH
4821: LD_VAR 0 4
4825: PPUSH
4826: CALL_OW 248
4830: PUSH
4831: LD_VAR 0 4
4835: PPUSH
4836: LD_INT 1
4838: PPUSH
4839: CALL_OW 268
4843: PUSH
4844: LD_VAR 0 4
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 268
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: ADD
4870: ST_TO_ADDR
4871: GO 5072
// if GetBType ( i ) in [ b_bunker , b_turret ] then
4873: LD_VAR 0 4
4877: PPUSH
4878: CALL_OW 266
4882: PUSH
4883: LD_INT 32
4885: PUSH
4886: LD_INT 33
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: IN
4893: IFFALSE 4990
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
4895: LD_ADDR_VAR 0 5
4899: PUSH
4900: LD_VAR 0 5
4904: PUSH
4905: LD_VAR 0 4
4909: PPUSH
4910: CALL_OW 266
4914: PUSH
4915: LD_VAR 0 4
4919: PPUSH
4920: CALL_OW 250
4924: PUSH
4925: LD_VAR 0 4
4929: PPUSH
4930: CALL_OW 251
4934: PUSH
4935: LD_VAR 0 4
4939: PPUSH
4940: CALL_OW 254
4944: PUSH
4945: LD_VAR 0 4
4949: PPUSH
4950: CALL_OW 267
4954: PUSH
4955: LD_VAR 0 4
4959: PPUSH
4960: CALL_OW 248
4964: PUSH
4965: LD_VAR 0 4
4969: PPUSH
4970: CALL_OW 269
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: PUSH
4984: EMPTY
4985: LIST
4986: ADD
4987: ST_TO_ADDR
4988: GO 5072
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
4990: LD_ADDR_VAR 0 5
4994: PUSH
4995: LD_VAR 0 5
4999: PUSH
5000: LD_VAR 0 4
5004: PPUSH
5005: CALL_OW 266
5009: PUSH
5010: LD_VAR 0 4
5014: PPUSH
5015: CALL_OW 250
5019: PUSH
5020: LD_VAR 0 4
5024: PPUSH
5025: CALL_OW 251
5029: PUSH
5030: LD_VAR 0 4
5034: PPUSH
5035: CALL_OW 254
5039: PUSH
5040: LD_VAR 0 4
5044: PPUSH
5045: CALL_OW 267
5049: PUSH
5050: LD_VAR 0 4
5054: PPUSH
5055: CALL_OW 248
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: PUSH
5068: EMPTY
5069: LIST
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 4732
5074: POP
5075: POP
// SaveVariable ( buildingsToSave , ident ) ;
5076: LD_VAR 0 5
5080: PPUSH
5081: LD_VAR 0 2
5085: PPUSH
5086: CALL_OW 39
// end ;
5090: LD_VAR 0 3
5094: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds ; begin
5095: LD_INT 0
5097: PPUSH
5098: PPUSH
5099: PPUSH
5100: PPUSH
// belkovTeam = [ ] ;
5101: LD_ADDR_EXP 64
5105: PUSH
5106: EMPTY
5107: ST_TO_ADDR
// if belkovReturn then
5108: LD_EXP 5
5112: IFFALSE 5132
// belkovTeam = belkovTeam ^ Belkov else
5114: LD_ADDR_EXP 64
5118: PUSH
5119: LD_EXP 64
5123: PUSH
5124: LD_EXP 55
5128: ADD
5129: ST_TO_ADDR
5130: GO 5148
// belkovTeam = belkovTeam ^ Belkov2 ;
5132: LD_ADDR_EXP 64
5136: PUSH
5137: LD_EXP 64
5141: PUSH
5142: LD_EXP 59
5146: ADD
5147: ST_TO_ADDR
// for unit in other_survivors do
5148: LD_ADDR_VAR 0 3
5152: PUSH
5153: LD_EXP 57
5157: PUSH
5158: FOR_IN
5159: IFFALSE 5200
// if IsOK ( unit ) and belkovTeam < 5 then
5161: LD_VAR 0 3
5165: PPUSH
5166: CALL_OW 302
5170: PUSH
5171: LD_EXP 64
5175: PUSH
5176: LD_INT 5
5178: LESS
5179: AND
5180: IFFALSE 5198
// belkovTeam = belkovTeam ^ unit ;
5182: LD_ADDR_EXP 64
5186: PUSH
5187: LD_EXP 64
5191: PUSH
5192: LD_VAR 0 3
5196: ADD
5197: ST_TO_ADDR
5198: GO 5158
5200: POP
5201: POP
// if belkovTeam < 5 then
5202: LD_EXP 64
5206: PUSH
5207: LD_INT 5
5209: LESS
5210: IFFALSE 5362
// begin restRandSolds = 5 - belkovTeam ;
5212: LD_ADDR_VAR 0 4
5216: PUSH
5217: LD_INT 5
5219: PUSH
5220: LD_EXP 64
5224: MINUS
5225: ST_TO_ADDR
// for i := 1 to restRandSolds do
5226: LD_ADDR_VAR 0 2
5230: PUSH
5231: DOUBLE
5232: LD_INT 1
5234: DEC
5235: ST_TO_ADDR
5236: LD_VAR 0 4
5240: PUSH
5241: FOR_TO
5242: IFFALSE 5360
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) do
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: LD_EXP 60
5253: PPUSH
5254: LD_INT 25
5256: PUSH
5257: LD_INT 1
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: PUSH
5264: EMPTY
5265: LIST
5266: PPUSH
5267: CALL_OW 72
5271: PUSH
5272: FOR_IN
5273: IFFALSE 5356
// if not unit in belkovTeam then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_EXP 64
5284: IN
5285: NOT
5286: IFFALSE 5354
// if not IsInUnit ( unit ) or GetBType ( IsInUnit ( unit ) ) = b_armoury then
5288: LD_VAR 0 3
5292: PPUSH
5293: CALL_OW 310
5297: NOT
5298: PUSH
5299: LD_VAR 0 3
5303: PPUSH
5304: CALL_OW 310
5308: PPUSH
5309: CALL_OW 266
5313: PUSH
5314: LD_INT 4
5316: EQUAL
5317: OR
5318: IFFALSE 5354
// begin belkovTeam = belkovTeam ^ unit ;
5320: LD_ADDR_EXP 64
5324: PUSH
5325: LD_EXP 64
5329: PUSH
5330: LD_VAR 0 3
5334: ADD
5335: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
5336: LD_ADDR_EXP 60
5340: PUSH
5341: LD_EXP 60
5345: PUSH
5346: LD_VAR 0 3
5350: DIFF
5351: ST_TO_ADDR
// break ;
5352: GO 5356
// end ;
5354: GO 5272
5356: POP
5357: POP
5358: GO 5241
5360: POP
5361: POP
// end ; belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5362: LD_ADDR_EXP 64
5366: PUSH
5367: LD_EXP 64
5371: PUSH
5372: LD_EXP 60
5376: PPUSH
5377: LD_INT 25
5379: PUSH
5380: LD_INT 4
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PUSH
5387: EMPTY
5388: LIST
5389: PPUSH
5390: CALL_OW 72
5394: PUSH
5395: LD_INT 1
5397: ARRAY
5398: ADD
5399: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
5400: LD_ADDR_EXP 60
5404: PUSH
5405: LD_EXP 60
5409: PUSH
5410: LD_EXP 60
5414: PPUSH
5415: LD_INT 25
5417: PUSH
5418: LD_INT 4
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PUSH
5425: EMPTY
5426: LIST
5427: PPUSH
5428: CALL_OW 72
5432: PUSH
5433: LD_INT 1
5435: ARRAY
5436: DIFF
5437: ST_TO_ADDR
// end ;
5438: LD_VAR 0 1
5442: RET
// export function PlatonovSendSupport ; var i , randValue ; begin
5443: LD_INT 0
5445: PPUSH
5446: PPUSH
5447: PPUSH
// for i := 1 to 2 do
5448: LD_ADDR_VAR 0 2
5452: PUSH
5453: DOUBLE
5454: LD_INT 1
5456: DEC
5457: ST_TO_ADDR
5458: LD_INT 2
5460: PUSH
5461: FOR_TO
5462: IFFALSE 5577
// begin randValue = rand ( 1 , platSoldiers ) ;
5464: LD_ADDR_VAR 0 3
5468: PUSH
5469: LD_INT 1
5471: PPUSH
5472: LD_EXP 68
5476: PPUSH
5477: CALL_OW 12
5481: ST_TO_ADDR
// SetSide ( platSoldiers [ randValue ] , 3 ) ;
5482: LD_EXP 68
5486: PUSH
5487: LD_VAR 0 3
5491: ARRAY
5492: PPUSH
5493: LD_INT 3
5495: PPUSH
5496: CALL_OW 235
// if IsInUnit ( platSoldiers [ randValue ] ) then
5500: LD_EXP 68
5504: PUSH
5505: LD_VAR 0 3
5509: ARRAY
5510: PPUSH
5511: CALL_OW 310
5515: IFFALSE 5532
// ComExitBuilding ( platSoldiers [ randValue ] ) ;
5517: LD_EXP 68
5521: PUSH
5522: LD_VAR 0 3
5526: ARRAY
5527: PPUSH
5528: CALL_OW 122
// AddComMoveXY ( platSoldiers [ randValue ] , 112 , 96 ) ;
5532: LD_EXP 68
5536: PUSH
5537: LD_VAR 0 3
5541: ARRAY
5542: PPUSH
5543: LD_INT 112
5545: PPUSH
5546: LD_INT 96
5548: PPUSH
5549: CALL_OW 171
// platSoldiers = platSoldiers diff platSoldiers [ randValue ] ;
5553: LD_ADDR_EXP 68
5557: PUSH
5558: LD_EXP 68
5562: PUSH
5563: LD_EXP 68
5567: PUSH
5568: LD_VAR 0 3
5572: ARRAY
5573: DIFF
5574: ST_TO_ADDR
// end ;
5575: GO 5461
5577: POP
5578: POP
// end ; end_of_file
5579: LD_VAR 0 1
5583: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
5584: LD_INT 0
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
// CenterNowOnUnits ( Burlak ) ;
5590: LD_EXP 53
5594: PPUSH
5595: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
5599: LD_EXP 53
5603: PPUSH
5604: LD_INT 163
5606: PPUSH
5607: LD_INT 108
5609: PPUSH
5610: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
5614: LD_EXP 53
5618: PPUSH
5619: LD_EXP 58
5623: PPUSH
5624: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_INT 22
5635: PUSH
5636: LD_INT 3
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 21
5645: PUSH
5646: LD_INT 1
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 69
5661: PUSH
5662: LD_EXP 53
5666: DIFF
5667: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
5668: LD_ADDR_VAR 0 4
5672: PUSH
5673: DOUBLE
5674: LD_INT 1
5676: DEC
5677: ST_TO_ADDR
5678: LD_EXP 46
5682: PUSH
5683: FOR_TO
5684: IFFALSE 5802
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
5686: LD_ADDR_VAR 0 3
5690: PUSH
5691: LD_VAR 0 2
5695: PPUSH
5696: LD_EXP 46
5700: PUSH
5701: LD_VAR 0 4
5705: ARRAY
5706: PUSH
5707: LD_INT 1
5709: ARRAY
5710: PPUSH
5711: LD_EXP 46
5715: PUSH
5716: LD_VAR 0 4
5720: ARRAY
5721: PUSH
5722: LD_INT 2
5724: ARRAY
5725: PPUSH
5726: CALL_OW 73
5730: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
5731: LD_VAR 0 3
5735: PPUSH
5736: LD_EXP 46
5740: PUSH
5741: LD_VAR 0 4
5745: ARRAY
5746: PUSH
5747: LD_INT 1
5749: ARRAY
5750: PPUSH
5751: LD_EXP 46
5755: PUSH
5756: LD_VAR 0 4
5760: ARRAY
5761: PUSH
5762: LD_INT 2
5764: ARRAY
5765: PPUSH
5766: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
5770: LD_VAR 0 3
5774: PPUSH
5775: LD_EXP 58
5779: PPUSH
5780: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
5784: LD_ADDR_VAR 0 2
5788: PUSH
5789: LD_VAR 0 2
5793: PUSH
5794: LD_VAR 0 3
5798: DIFF
5799: ST_TO_ADDR
// end ;
5800: GO 5683
5802: POP
5803: POP
// repeat CenterNowOnUnits ( Burlak ) ;
5804: LD_EXP 53
5808: PPUSH
5809: CALL_OW 87
// wait ( 0 0$1 ) ;
5813: LD_INT 35
5815: PPUSH
5816: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
5820: LD_EXP 53
5824: PPUSH
5825: LD_EXP 58
5829: PPUSH
5830: CALL_OW 296
5834: PUSH
5835: LD_INT 4
5837: LESS
5838: IFFALSE 5804
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
5840: LD_EXP 53
5844: PUSH
5845: LD_EXP 58
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PPUSH
5854: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
5858: LD_EXP 58
5862: PPUSH
5863: LD_EXP 53
5867: PPUSH
5868: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
5872: LD_EXP 58
5876: PPUSH
5877: LD_STRING D1-Kur-1
5879: PPUSH
5880: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
5884: LD_EXP 53
5888: PPUSH
5889: LD_STRING D1-Bur-1
5891: PPUSH
5892: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
5896: LD_EXP 58
5900: PPUSH
5901: LD_STRING D1-Kur-2
5903: PPUSH
5904: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
5908: LD_EXP 53
5912: PPUSH
5913: LD_STRING D1-Bur-2
5915: PPUSH
5916: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
5920: LD_EXP 58
5924: PPUSH
5925: LD_STRING D1-Kur-3
5927: PPUSH
5928: CALL_OW 88
// if IsOK ( Gnyevko ) then
5932: LD_EXP 54
5936: PPUSH
5937: CALL_OW 302
5941: IFFALSE 5955
// Say ( Kurin , D1-Kur-3a ) ;
5943: LD_EXP 58
5947: PPUSH
5948: LD_STRING D1-Kur-3a
5950: PPUSH
5951: CALL_OW 88
// InGameOff ;
5955: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
5959: LD_INT 22
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: LD_INT 21
5971: PUSH
5972: LD_INT 1
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: PUSH
5988: LD_EXP 53
5992: PUSH
5993: LD_EXP 54
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: DIFF
6002: PPUSH
6003: LD_INT 6
6005: PPUSH
6006: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6010: LD_EXP 61
6014: PPUSH
6015: LD_INT 3
6017: PPUSH
6018: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 6
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 70
6053: PUSH
6054: LD_EXP 58
6058: DIFF
6059: PPUSH
6060: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm ) ;
6064: LD_EXP 57
6068: PPUSH
6069: LD_INT 95
6071: PPUSH
6072: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm ) ;
6076: LD_EXP 55
6080: PPUSH
6081: LD_INT 95
6083: PPUSH
6084: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
6088: LD_STRING 01_Gnyevko
6090: PPUSH
6091: CALL_OW 28
6095: NOT
6096: IFFALSE 6110
// SetSide ( randomMech , 3 ) ;
6098: LD_EXP 62
6102: PPUSH
6103: LD_INT 3
6105: PPUSH
6106: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
6110: LD_STRING M1
6112: PPUSH
6113: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
6117: LD_INT 3
6119: PPUSH
6120: LD_INT 6
6122: PPUSH
6123: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
6127: LD_INT 3
6129: PPUSH
6130: LD_INT 7
6132: PPUSH
6133: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
6137: LD_INT 6
6139: PPUSH
6140: LD_INT 6
6142: PPUSH
6143: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
6147: LD_INT 6
6149: PPUSH
6150: LD_INT 7
6152: PPUSH
6153: CALL_OW 334
// SaveForQuickRestart ;
6157: CALL_OW 22
// end ;
6161: LD_VAR 0 1
6165: RET
// every 0 0$1 trigger not canExitBase and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
6166: LD_EXP 18
6170: NOT
6171: PUSH
6172: LD_INT 20
6174: PPUSH
6175: LD_INT 22
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 2
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 21
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PPUSH
6217: CALL_OW 70
6221: PUSH
6222: LD_INT 0
6224: GREATER
6225: AND
6226: IFFALSE 6389
6228: GO 6230
6230: DISABLE
6231: LD_INT 0
6233: PPUSH
// begin enable ;
6234: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
6235: LD_ADDR_VAR 0 1
6239: PUSH
6240: LD_INT 20
6242: PPUSH
6243: LD_INT 22
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 2
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 1
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 21
6268: PUSH
6269: LD_INT 2
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 70
6289: PUSH
6290: FOR_IN
6291: IFFALSE 6387
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
6293: LD_VAR 0 1
6297: PPUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 250
6307: PPUSH
6308: LD_VAR 0 1
6312: PPUSH
6313: CALL_OW 251
6317: PUSH
6318: LD_INT 5
6320: PLUS
6321: PPUSH
6322: CALL_OW 111
// if unit <> Burlak and IsOk ( Kovalyuk ) then
6326: LD_VAR 0 1
6330: PUSH
6331: LD_EXP 53
6335: NONEQUAL
6336: PUSH
6337: LD_EXP 61
6341: PPUSH
6342: CALL_OW 302
6346: AND
6347: IFFALSE 6361
// Say ( Kovalyuk , D1b-Kov-1 ) ;
6349: LD_EXP 61
6353: PPUSH
6354: LD_STRING D1b-Kov-1
6356: PPUSH
6357: CALL_OW 88
// if unit = Burlak then
6361: LD_VAR 0 1
6365: PUSH
6366: LD_EXP 53
6370: EQUAL
6371: IFFALSE 6385
// Say ( Burlak , D1b-Bur-1 ) ;
6373: LD_EXP 53
6377: PPUSH
6378: LD_STRING D1b-Bur-1
6380: PPUSH
6381: CALL_OW 88
// end ;
6385: GO 6290
6387: POP
6388: POP
// end ;
6389: PPOPN 1
6391: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
6392: LD_EXP 6
6396: NOT
6397: PUSH
6398: LD_INT 9
6400: PPUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 21
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PPUSH
6425: CALL_OW 70
6429: PUSH
6430: LD_INT 0
6432: GREATER
6433: AND
6434: IFFALSE 6451
6436: GO 6438
6438: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
6439: LD_EXP 58
6443: PPUSH
6444: LD_STRING D1a-Kur-1
6446: PPUSH
6447: CALL_OW 88
6451: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
6452: LD_EXP 6
6456: NOT
6457: PUSH
6458: LD_EXP 53
6462: PPUSH
6463: CALL_OW 302
6467: AND
6468: PUSH
6469: LD_INT 8
6471: PPUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 3
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 1
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL_OW 70
6500: PUSH
6501: LD_INT 0
6503: GREATER
6504: AND
6505: IFFALSE 6997
6507: GO 6509
6509: DISABLE
6510: LD_INT 0
6512: PPUSH
6513: PPUSH
6514: PPUSH
6515: PPUSH
// begin enable ;
6516: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
6517: LD_ADDR_VAR 0 2
6521: PUSH
6522: LD_INT 22
6524: PUSH
6525: LD_INT 3
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 21
6534: PUSH
6535: LD_INT 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 69
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6995
// if See ( 6 , unit ) then
6554: LD_INT 6
6556: PPUSH
6557: LD_VAR 0 2
6561: PPUSH
6562: CALL_OW 292
6566: IFFALSE 6993
// begin meetPlatonov = true ;
6568: LD_ADDR_EXP 6
6572: PUSH
6573: LD_INT 1
6575: ST_TO_ADDR
// InGameOn ;
6576: CALL_OW 8
// DialogueOn ;
6580: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: LD_EXP 68
6593: PPUSH
6594: LD_INT 26
6596: PUSH
6597: LD_INT 1
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 72
6608: PPUSH
6609: LD_STRING D2-RSol1-1
6611: PPUSH
6612: LD_STRING 
6614: PPUSH
6615: LD_INT 0
6617: PPUSH
6618: CALL 3408 0 4
6622: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
6623: LD_EXP 53
6627: PPUSH
6628: LD_STRING D2-Bur-1
6630: PPUSH
6631: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
6635: LD_VAR 0 4
6639: PPUSH
6640: LD_STRING D2-RSol1-2
6642: PPUSH
6643: CALL_OW 88
// DialogueOff ;
6647: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
6651: LD_ADDR_VAR 0 3
6655: PUSH
6656: LD_INT 22
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 1
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 50
6678: PUSH
6679: EMPTY
6680: LIST
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: PPUSH
6687: CALL_OW 69
6691: ST_TO_ADDR
// for i := 1 to yourUnits do
6692: LD_ADDR_VAR 0 1
6696: PUSH
6697: DOUBLE
6698: LD_INT 1
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 3
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6777
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
6710: LD_VAR 0 3
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: LD_EXP 47
6725: PUSH
6726: LD_VAR 0 1
6730: ARRAY
6731: PUSH
6732: LD_INT 1
6734: ARRAY
6735: PPUSH
6736: LD_EXP 47
6740: PUSH
6741: LD_VAR 0 1
6745: ARRAY
6746: PUSH
6747: LD_INT 2
6749: ARRAY
6750: PPUSH
6751: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
6755: LD_VAR 0 3
6759: PUSH
6760: LD_VAR 0 1
6764: ARRAY
6765: PPUSH
6766: LD_EXP 67
6770: PPUSH
6771: CALL_OW 179
// end ;
6775: GO 6707
6777: POP
6778: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6779: LD_EXP 53
6783: PPUSH
6784: CALL_OW 87
// wait ( 0 0$1 ) ;
6788: LD_INT 35
6790: PPUSH
6791: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
6795: LD_EXP 53
6799: PPUSH
6800: LD_EXP 67
6804: PPUSH
6805: CALL_OW 296
6809: PUSH
6810: LD_INT 4
6812: LESS
6813: IFFALSE 6779
// ComTurnUnit ( Platonov , Burlak ) ;
6815: LD_EXP 67
6819: PPUSH
6820: LD_EXP 53
6824: PPUSH
6825: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
6829: LD_EXP 67
6833: PPUSH
6834: LD_STRING D2-Pla-2
6836: PPUSH
6837: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6841: LD_EXP 53
6845: PPUSH
6846: LD_STRING D2-Bur-2
6848: PPUSH
6849: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
6853: LD_EXP 67
6857: PPUSH
6858: LD_STRING D2-Pla-3
6860: PPUSH
6861: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
6865: LD_EXP 53
6869: PPUSH
6870: LD_STRING D2-Bur-3
6872: PPUSH
6873: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
6877: LD_EXP 67
6881: PPUSH
6882: LD_STRING D2-Pla-4
6884: PPUSH
6885: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6889: LD_EXP 53
6893: PPUSH
6894: LD_STRING D2-Bur-4
6896: PPUSH
6897: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
6901: LD_EXP 67
6905: PPUSH
6906: LD_STRING D2-Pla-5
6908: PPUSH
6909: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
6913: LD_INT 1
6915: PUSH
6916: LD_INT 2
6918: PUSH
6919: LD_INT 3
6921: PUSH
6922: LD_INT 4
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: PPUSH
6931: CALL 3741 0 1
// Say ( Platonov , D3-Pla-1 ) ;
6935: LD_EXP 67
6939: PPUSH
6940: LD_STRING D3-Pla-1
6942: PPUSH
6943: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
6947: LD_EXP 53
6951: PPUSH
6952: LD_STRING D3-Bur-1
6954: PPUSH
6955: CALL_OW 88
// InGameOff ;
6959: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
6963: LD_STRING M2a
6965: PPUSH
6966: CALL_OW 337
// ComFree ( Platonov ) ;
6970: LD_EXP 67
6974: PPUSH
6975: CALL_OW 139
// SetSide ( beria , 3 ) ;
6979: LD_INT 106
6981: PPUSH
6982: LD_INT 3
6984: PPUSH
6985: CALL_OW 235
// exit ;
6989: POP
6990: POP
6991: GO 6997
// end ;
6993: GO 6551
6995: POP
6996: POP
// end ;
6997: PPOPN 4
6999: END
// export function Dial_LabConstructed ; begin
7000: LD_INT 0
7002: PPUSH
// labConstructed = true ;
7003: LD_ADDR_EXP 7
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// DialogueOn ;
7011: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7015: LD_EXP 53
7019: PPUSH
7020: LD_STRING D5a-Bur-1
7022: PPUSH
7023: CALL_OW 88
// if workshopConstructed then
7027: LD_EXP 8
7031: IFFALSE 7047
// Say ( Platonov , D5a-Pla-1a ) else
7033: LD_EXP 67
7037: PPUSH
7038: LD_STRING D5a-Pla-1a
7040: PPUSH
7041: CALL_OW 88
7045: GO 7059
// Say ( Platonov , D5a-Pla-1a ) ;
7047: LD_EXP 67
7051: PPUSH
7052: LD_STRING D5a-Pla-1a
7054: PPUSH
7055: CALL_OW 88
// DialogueOff ;
7059: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
7063: LD_STRING M2b
7065: PPUSH
7066: CALL_OW 337
// end ;
7070: LD_VAR 0 1
7074: RET
// export function Dial_WorkshopConstructed ; begin
7075: LD_INT 0
7077: PPUSH
// workshopConstructed = true ;
7078: LD_ADDR_EXP 8
7082: PUSH
7083: LD_INT 1
7085: ST_TO_ADDR
// DialogueOn ;
7086: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
7090: LD_EXP 53
7094: PPUSH
7095: LD_STRING D5b-Bur-1
7097: PPUSH
7098: CALL_OW 88
// if labConstructed then
7102: LD_EXP 7
7106: IFFALSE 7122
// Say ( Platonov , D5b-Pla-1 ) else
7108: LD_EXP 67
7112: PPUSH
7113: LD_STRING D5b-Pla-1
7115: PPUSH
7116: CALL_OW 88
7120: GO 7134
// Say ( Platonov , D5b-Pla-1a ) ;
7122: LD_EXP 67
7126: PPUSH
7127: LD_STRING D5b-Pla-1a
7129: PPUSH
7130: CALL_OW 88
// DialogueOff ;
7134: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
7138: LD_STRING M2c
7140: PPUSH
7141: CALL_OW 337
// end ;
7145: LD_VAR 0 1
7149: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
7150: LD_INT 0
7152: PPUSH
// CenterNowOnUnits ( building ) ;
7153: LD_VAR 0 1
7157: PPUSH
7158: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
7162: LD_INT 22
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 21
7174: PUSH
7175: LD_INT 1
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PPUSH
7186: CALL_OW 69
7190: PPUSH
7191: CALL_OW 141
// DialogueOn ;
7195: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
7199: LD_EXP 67
7203: PPUSH
7204: LD_STRING D6-Pla-1
7206: PPUSH
7207: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
7211: LD_EXP 53
7215: PPUSH
7216: LD_STRING D6-Bur-1
7218: PPUSH
7219: CALL_OW 88
// DialogueOff ;
7223: CALL_OW 7
// if GetBType ( building ) = b_lab then
7227: LD_VAR 0 1
7231: PPUSH
7232: CALL_OW 266
7236: PUSH
7237: LD_INT 6
7239: EQUAL
7240: IFFALSE 7281
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) else
7242: LD_INT 106
7244: PPUSH
7245: CALL_OW 274
7249: PPUSH
7250: LD_INT 1
7252: PPUSH
7253: LD_INT 106
7255: PPUSH
7256: CALL_OW 274
7260: PPUSH
7261: LD_INT 1
7263: PPUSH
7264: CALL_OW 275
7268: PUSH
7269: LD_EXP 48
7273: PLUS
7274: PPUSH
7275: CALL_OW 277
7279: GO 7318
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ;
7281: LD_INT 106
7283: PPUSH
7284: CALL_OW 274
7288: PPUSH
7289: LD_INT 1
7291: PPUSH
7292: LD_INT 106
7294: PPUSH
7295: CALL_OW 274
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 275
7307: PUSH
7308: LD_EXP 49
7312: PLUS
7313: PPUSH
7314: CALL_OW 277
// RemoveUnit ( building ) ;
7318: LD_VAR 0 1
7322: PPUSH
7323: CALL_OW 64
// end ;
7327: LD_VAR 0 2
7331: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
7332: LD_EXP 8
7336: PUSH
7337: LD_EXP 7
7341: AND
7342: IFFALSE 7451
7344: GO 7346
7346: DISABLE
// begin DialogueOn ;
7347: CALL_OW 6
// if engineResearched then
7351: LD_EXP 9
7355: IFFALSE 7383
// begin Say ( Burlak , D7b-Bur-1 ) ;
7357: LD_EXP 53
7361: PPUSH
7362: LD_STRING D7b-Bur-1
7364: PPUSH
7365: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
7369: LD_EXP 67
7373: PPUSH
7374: LD_STRING D7b-Pla-1
7376: PPUSH
7377: CALL_OW 88
// end else
7381: GO 7407
// begin Say ( Burlak , D7a-Bur-1 ) ;
7383: LD_EXP 53
7387: PPUSH
7388: LD_STRING D7a-Bur-1
7390: PPUSH
7391: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
7395: LD_EXP 67
7399: PPUSH
7400: LD_STRING D7a-Pla-1
7402: PPUSH
7403: CALL_OW 88
// end ; DialogueOff ;
7407: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
7411: LD_STRING M2
7413: PPUSH
7414: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
7418: LD_INT 5
7420: PPUSH
7421: LD_EXP 67
7425: PPUSH
7426: CALL_OW 250
7430: PPUSH
7431: LD_EXP 67
7435: PPUSH
7436: CALL_OW 251
7440: PPUSH
7441: LD_INT 5
7443: PPUSH
7444: LD_INT 1
7446: PPUSH
7447: CALL_OW 56
// end ;
7451: END
// export function Dial_NewCrates ( x , y ) ; begin
7452: LD_INT 0
7454: PPUSH
// wait ( 0 0$18 ) ;
7455: LD_INT 630
7457: PPUSH
7458: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
7462: LD_EXP 67
7466: PPUSH
7467: LD_VAR 0 1
7471: PPUSH
7472: LD_VAR 0 2
7476: PPUSH
7477: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
7481: LD_EXP 67
7485: PPUSH
7486: LD_STRING D4-Pla-1
7488: PPUSH
7489: CALL_OW 88
// end ;
7493: LD_VAR 0 3
7497: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
7498: LD_INT 0
7500: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
7501: LD_ADDR_EXP 12
7505: PUSH
7506: LD_INT 22
7508: PUSH
7509: LD_INT 3
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 21
7518: PUSH
7519: LD_INT 2
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PPUSH
7530: CALL_OW 69
7534: PUSH
7535: LD_INT 1
7537: ARRAY
7538: ST_TO_ADDR
// constructedFirstVehicle = true ;
7539: LD_ADDR_EXP 11
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// InGameOn ;
7547: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: CALL_OW 87
// wait ( 0 0$3 ) ;
7560: LD_INT 105
7562: PPUSH
7563: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
7567: LD_EXP 53
7571: PPUSH
7572: LD_STRING D9-Bur-1
7574: PPUSH
7575: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
7579: LD_EXP 67
7583: PPUSH
7584: LD_EXP 12
7588: PPUSH
7589: CALL_OW 250
7593: PPUSH
7594: LD_EXP 12
7598: PPUSH
7599: CALL_OW 251
7603: PPUSH
7604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7608: LD_INT 35
7610: PPUSH
7611: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
7615: LD_EXP 67
7619: PPUSH
7620: LD_EXP 12
7624: PPUSH
7625: CALL_OW 296
7629: PUSH
7630: LD_INT 4
7632: LESS
7633: IFFALSE 7608
// ComTurnUnit ( Platonov , firstVeh ) ;
7635: LD_EXP 67
7639: PPUSH
7640: LD_EXP 12
7644: PPUSH
7645: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
7649: LD_EXP 67
7653: PPUSH
7654: LD_STRING D9-Pla-1
7656: PPUSH
7657: CALL_OW 88
// InGameOff ;
7661: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
7665: LD_STRING M3
7667: PPUSH
7668: CALL_OW 337
// ComMoveXY ( Platonov , 112 , 97 ) ;
7672: LD_EXP 67
7676: PPUSH
7677: LD_INT 112
7679: PPUSH
7680: LD_INT 97
7682: PPUSH
7683: CALL_OW 111
// end ;
7687: LD_VAR 0 2
7691: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
7692: LD_EXP 12
7696: PPUSH
7697: LD_INT 9
7699: PPUSH
7700: CALL_OW 308
7704: PUSH
7705: LD_EXP 13
7709: NOT
7710: AND
7711: IFFALSE 8563
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
7720: PPUSH
// begin vehicleForKurin = true ;
7721: LD_ADDR_EXP 13
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
7729: LD_ADDR_VAR 0 2
7733: PUSH
7734: LD_EXP 60
7738: PPUSH
7739: LD_INT 25
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PPUSH
7749: CALL_OW 72
7753: PUSH
7754: LD_INT 1
7756: ARRAY
7757: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_EXP 60
7767: PPUSH
7768: LD_INT 25
7770: PUSH
7771: LD_INT 3
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 72
7782: PUSH
7783: LD_INT 1
7785: ARRAY
7786: ST_TO_ADDR
// InGameOn ;
7787: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
7791: LD_EXP 58
7795: PPUSH
7796: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
7800: LD_EXP 12
7804: PPUSH
7805: LD_EXP 58
7809: PPUSH
7810: CALL_OW 250
7814: PPUSH
7815: LD_EXP 58
7819: PPUSH
7820: CALL_OW 251
7824: PPUSH
7825: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
7829: LD_EXP 58
7833: PPUSH
7834: LD_STRING D10-Kur-1
7836: PPUSH
7837: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7841: LD_INT 35
7843: PPUSH
7844: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
7848: LD_EXP 12
7852: PPUSH
7853: LD_EXP 58
7857: PPUSH
7858: CALL_OW 250
7862: PPUSH
7863: LD_EXP 58
7867: PPUSH
7868: CALL_OW 251
7872: PPUSH
7873: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
7877: LD_EXP 12
7881: PPUSH
7882: LD_EXP 58
7886: PPUSH
7887: CALL_OW 296
7891: PUSH
7892: LD_INT 9
7894: LESS
7895: IFFALSE 7841
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
7897: LD_EXP 12
7901: PPUSH
7902: CALL_OW 313
7906: PPUSH
7907: CALL_OW 121
// wait ( 0 0$1 ) ;
7911: LD_INT 35
7913: PPUSH
7914: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
7918: LD_EXP 12
7922: PPUSH
7923: CALL_OW 256
7927: PUSH
7928: LD_INT 1000
7930: LESS
7931: IFFALSE 7963
// begin ComExitBuilding ( mech ) ;
7933: LD_VAR 0 3
7937: PPUSH
7938: CALL_OW 122
// wait ( 0 0$1 ) ;
7942: LD_INT 35
7944: PPUSH
7945: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
7949: LD_VAR 0 3
7953: PPUSH
7954: LD_EXP 12
7958: PPUSH
7959: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
7963: LD_EXP 12
7967: PPUSH
7968: CALL_OW 261
7972: PUSH
7973: LD_INT 90
7975: LESS
7976: IFFALSE 8011
// begin ComExitBuilding ( eng ) ;
7978: LD_VAR 0 2
7982: PPUSH
7983: CALL_OW 122
// wait ( 0 0$1 ) ;
7987: LD_INT 35
7989: PPUSH
7990: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
7994: LD_VAR 0 2
7998: PPUSH
7999: LD_INT 71
8001: PPUSH
8002: LD_EXP 12
8006: PPUSH
8007: CALL 3979 0 3
// end ; repeat wait ( 0 0$1 ) ;
8011: LD_INT 35
8013: PPUSH
8014: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
8018: LD_EXP 12
8022: PPUSH
8023: CALL_OW 256
8027: PUSH
8028: LD_INT 1000
8030: EQUAL
8031: PUSH
8032: LD_EXP 12
8036: PPUSH
8037: CALL_OW 261
8041: PUSH
8042: LD_INT 90
8044: GREATER
8045: AND
8046: IFFALSE 8011
// ComEnterUnit ( eng , kirov ) ;
8048: LD_VAR 0 2
8052: PPUSH
8053: LD_INT 71
8055: PPUSH
8056: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
8060: LD_EXP 12
8064: PPUSH
8065: LD_INT 6
8067: PPUSH
8068: CALL_OW 235
// if belkovReturn then
8072: LD_EXP 5
8076: IFFALSE 8162
// begin if IsInUnit ( Belkov ) then
8078: LD_EXP 55
8082: PPUSH
8083: CALL_OW 310
8087: IFFALSE 8098
// ComExitBuilding ( Belkov ) ;
8089: LD_EXP 55
8093: PPUSH
8094: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8098: LD_INT 35
8100: PPUSH
8101: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
8105: LD_EXP 55
8109: PPUSH
8110: LD_EXP 12
8114: PPUSH
8115: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
8119: LD_EXP 55
8123: PPUSH
8124: CALL_OW 310
8128: PUSH
8129: LD_EXP 12
8133: EQUAL
8134: IFFALSE 8098
// Say ( Belkov , D10-Bel-1 ) ;
8136: LD_EXP 55
8140: PPUSH
8141: LD_STRING D10-Bel-1
8143: PPUSH
8144: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
8148: LD_EXP 58
8152: PPUSH
8153: LD_STRING D10-Kur-2
8155: PPUSH
8156: CALL_OW 88
// end else
8160: GO 8288
// begin if IsInUnit ( Belkov2 ) then
8162: LD_EXP 59
8166: PPUSH
8167: CALL_OW 310
8171: IFFALSE 8182
// ComExitBuilding ( Belkov2 ) ;
8173: LD_EXP 59
8177: PPUSH
8178: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
8182: LD_INT 35
8184: PPUSH
8185: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
8189: LD_EXP 59
8193: PPUSH
8194: LD_EXP 12
8198: PPUSH
8199: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
8203: LD_EXP 59
8207: PPUSH
8208: CALL_OW 310
8212: PUSH
8213: LD_EXP 12
8217: EQUAL
8218: IFFALSE 8182
// meetBelkovBrother = true ;
8220: LD_ADDR_EXP 4
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
8228: LD_EXP 59
8232: PPUSH
8233: LD_STRING D10-Bel-1
8235: PPUSH
8236: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
8240: LD_EXP 53
8244: PPUSH
8245: LD_STRING D10-Bur-1
8247: PPUSH
8248: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
8252: LD_EXP 59
8256: PPUSH
8257: LD_STRING D10-Bel-2
8259: PPUSH
8260: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
8264: LD_EXP 53
8268: PPUSH
8269: LD_STRING D10-Bur-2
8271: PPUSH
8272: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
8276: LD_EXP 58
8280: PPUSH
8281: LD_STRING D10-Kur-2a
8283: PPUSH
8284: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
8288: LD_ADDR_EXP 65
8292: PUSH
8293: EMPTY
8294: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
8295: LD_ADDR_EXP 66
8299: PUSH
8300: EMPTY
8301: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
8302: LD_ADDR_EXP 20
8306: PUSH
8307: LD_INT 1
8309: ST_TO_ADDR
// CreateBelkovTeam ;
8310: CALL 5095 0 0
// ComExitBuilding ( belkovTeam ) ;
8314: LD_EXP 64
8318: PPUSH
8319: CALL_OW 122
// wait ( 0 0$1 ) ;
8323: LD_INT 35
8325: PPUSH
8326: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8330: LD_ADDR_EXP 63
8334: PUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 6
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: LD_INT 21
8347: PUSH
8348: LD_INT 2
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PPUSH
8359: CALL_OW 69
8363: PUSH
8364: LD_INT 1
8366: ARRAY
8367: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
8368: LD_ADDR_EXP 64
8372: PUSH
8373: LD_EXP 64
8377: PUSH
8378: LD_EXP 63
8382: ADD
8383: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
8384: LD_EXP 64
8388: PPUSH
8389: LD_INT 147
8391: PPUSH
8392: LD_INT 102
8394: PPUSH
8395: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
8399: LD_EXP 64
8403: PPUSH
8404: LD_INT 133
8406: PPUSH
8407: LD_INT 94
8409: PPUSH
8410: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
8414: LD_EXP 64
8418: PPUSH
8419: LD_INT 123
8421: PPUSH
8422: LD_INT 74
8424: PPUSH
8425: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
8429: LD_EXP 64
8433: PPUSH
8434: LD_INT 111
8436: PPUSH
8437: LD_INT 48
8439: PPUSH
8440: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
8444: LD_EXP 64
8448: PPUSH
8449: LD_INT 122
8451: PPUSH
8452: LD_INT 43
8454: PPUSH
8455: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
8459: LD_EXP 64
8463: PPUSH
8464: LD_INT 129
8466: PPUSH
8467: LD_INT 32
8469: PPUSH
8470: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
8474: LD_EXP 64
8478: PPUSH
8479: LD_INT 132
8481: PPUSH
8482: LD_INT 22
8484: PPUSH
8485: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8489: LD_INT 35
8491: PPUSH
8492: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
8496: LD_EXP 63
8500: PPUSH
8501: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
8505: LD_EXP 63
8509: PPUSH
8510: LD_INT 10
8512: PPUSH
8513: CALL_OW 299
8517: PUSH
8518: LD_INT 10
8520: LESS
8521: IFFALSE 8489
// CenterNowOnUnits ( Kurin ) ;
8523: LD_EXP 58
8527: PPUSH
8528: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
8532: LD_EXP 58
8536: PPUSH
8537: LD_STRING D10-Kur-2b
8539: PPUSH
8540: CALL_OW 88
// InGameOff ;
8544: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
8548: LD_STRING M4
8550: PPUSH
8551: CALL_OW 337
// backToBeria1 = true ;
8555: LD_ADDR_EXP 14
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// end ;
8563: PPOPN 3
8565: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
8566: LD_INT 9
8568: PPUSH
8569: LD_INT 22
8571: PUSH
8572: LD_INT 3
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 21
8581: PUSH
8582: LD_INT 2
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 70
8597: PUSH
8598: LD_EXP 13
8602: AND
8603: IFFALSE 8620
8605: GO 8607
8607: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
8608: LD_EXP 58
8612: PPUSH
8613: LD_STRING D1a-Kur-1a
8615: PPUSH
8616: CALL_OW 88
8620: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
8621: LD_EXP 20
8625: IFFALSE 8949
8627: GO 8629
8629: DISABLE
8630: LD_INT 0
8632: PPUSH
8633: PPUSH
// begin enable ;
8634: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
8635: LD_INT 10
8637: PPUSH
8638: LD_INT 22
8640: PUSH
8641: LD_INT 6
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PPUSH
8648: CALL_OW 70
8652: PUSH
8653: LD_INT 0
8655: EQUAL
8656: IFFALSE 8660
// exit ;
8658: GO 8949
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
8660: LD_ADDR_VAR 0 1
8664: PUSH
8665: LD_INT 10
8667: PPUSH
8668: LD_INT 22
8670: PUSH
8671: LD_INT 6
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PPUSH
8678: CALL_OW 70
8682: PUSH
8683: FOR_IN
8684: IFFALSE 8935
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 ) then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 247
8695: PUSH
8696: LD_INT 1
8698: EQUAL
8699: PUSH
8700: LD_VAR 0 1
8704: PUSH
8705: LD_EXP 55
8709: EQUAL
8710: NOT
8711: PUSH
8712: LD_VAR 0 1
8716: PUSH
8717: LD_EXP 59
8721: EQUAL
8722: NOT
8723: AND
8724: AND
8725: IFFALSE 8766
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
8727: LD_ADDR_EXP 21
8731: PUSH
8732: LD_EXP 21
8736: PUSH
8737: LD_INT 1
8739: PLUS
8740: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
8741: LD_ADDR_EXP 65
8745: PUSH
8746: LD_EXP 65
8750: PUSH
8751: LD_VAR 0 1
8755: ADD
8756: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
8766: LD_VAR 0 1
8770: PPUSH
8771: CALL_OW 247
8775: PUSH
8776: LD_INT 2
8778: EQUAL
8779: IFFALSE 8933
// begin driver = UnitsInside ( unit ) ;
8781: LD_ADDR_VAR 0 2
8785: PUSH
8786: LD_VAR 0 1
8790: PPUSH
8791: CALL_OW 313
8795: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
8796: LD_VAR 0 2
8800: PUSH
8801: LD_INT 1
8803: ARRAY
8804: PUSH
8805: LD_EXP 55
8809: EQUAL
8810: IFFALSE 8835
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_STRING 02_TmpBelkov
8819: PPUSH
8820: CALL_OW 38
// RemoveUnit ( unit ) ;
8824: LD_VAR 0 1
8828: PPUSH
8829: CALL_OW 64
// end else
8833: GO 8856
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
8835: LD_EXP 59
8839: PPUSH
8840: LD_STRING 02_TmpBelkov2
8842: PPUSH
8843: CALL_OW 38
// RemoveUnit ( unit ) ;
8847: LD_VAR 0 1
8851: PPUSH
8852: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
8856: LD_ADDR_EXP 66
8860: PUSH
8861: LD_EXP 66
8865: PUSH
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 265
8875: PUSH
8876: LD_VAR 0 1
8880: PPUSH
8881: CALL_OW 262
8885: PUSH
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 263
8895: PUSH
8896: LD_VAR 0 1
8900: PPUSH
8901: CALL_OW 264
8905: PUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: CALL_OW 261
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: ADD
8923: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8924: LD_VAR 0 1
8928: PPUSH
8929: CALL_OW 64
// end ; end ;
8933: GO 8683
8935: POP
8936: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
8937: LD_EXP 65
8941: PPUSH
8942: LD_STRING 02_TmpBelkovTeam
8944: PPUSH
8945: CALL_OW 38
// end ;
8949: PPOPN 2
8951: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do
8952: LD_INT 8
8954: PPUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 3
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 21
8967: PUSH
8968: LD_INT 1
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PPUSH
8979: CALL_OW 71
8983: PUSH
8984: LD_INT 0
8986: EQUAL
8987: PUSH
8988: LD_EXP 14
8992: AND
8993: IFFALSE 9101
8995: GO 8997
8997: DISABLE
// begin backToBeria1 = false ;
8998: LD_ADDR_EXP 14
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
9006: LD_EXP 67
9010: PPUSH
9011: LD_STRING D11-Pla-1
9013: PPUSH
9014: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
9018: LD_INT 22
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 21
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PPUSH
9042: CALL_OW 69
9046: PUSH
9047: LD_INT 1
9049: GREATER
9050: IFFALSE 9066
// Say ( Burlak , D11-Bur-1a ) else
9052: LD_EXP 53
9056: PPUSH
9057: LD_STRING D11-Bur-1a
9059: PPUSH
9060: CALL_OW 88
9064: GO 9078
// Say ( Burlak , D11-Bur-1 ) ;
9066: LD_EXP 53
9070: PPUSH
9071: LD_STRING D11-Bur-1
9073: PPUSH
9074: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
9078: LD_STRING M5
9080: PPUSH
9081: CALL_OW 337
// construcMoreVehicles = true ;
9085: LD_ADDR_EXP 16
9089: PUSH
9090: LD_INT 1
9092: ST_TO_ADDR
// spawnCrates = true ;
9093: LD_ADDR_EXP 19
9097: PUSH
9098: LD_INT 1
9100: ST_TO_ADDR
// end ;
9101: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
9102: LD_EXP 17
9106: PUSH
9107: LD_INT 22
9109: PUSH
9110: LD_INT 3
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 21
9119: PUSH
9120: LD_INT 1
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PPUSH
9131: CALL_OW 69
9135: GREATEREQUAL
9136: IFFALSE 9976
9138: GO 9140
9140: DISABLE
9141: LD_INT 0
9143: PPUSH
9144: PPUSH
// begin canRemoveBelkovUnits = false ;
9145: LD_ADDR_EXP 20
9149: PUSH
9150: LD_INT 0
9152: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
9153: LD_INT 22
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 2
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: LD_INT 1
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 21
9178: PUSH
9179: LD_INT 2
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PPUSH
9195: CALL_OW 69
9199: PPUSH
9200: CALL_OW 141
// InGameOn ;
9204: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
9208: LD_EXP 67
9212: PPUSH
9213: CALL_OW 85
// DialogueOn ;
9217: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
9221: LD_EXP 53
9225: PPUSH
9226: LD_STRING D12-Bur-1
9228: PPUSH
9229: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
9233: LD_EXP 67
9237: PPUSH
9238: LD_STRING D12-Pla-1
9240: PPUSH
9241: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9245: LD_EXP 53
9249: PPUSH
9250: LD_STRING D12-Bur-2
9252: PPUSH
9253: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
9257: LD_EXP 67
9261: PPUSH
9262: LD_STRING D12-Pla-2
9264: PPUSH
9265: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9269: LD_EXP 53
9273: PPUSH
9274: LD_STRING D12-Bur-3
9276: PPUSH
9277: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
9281: LD_EXP 67
9285: PPUSH
9286: LD_STRING D12-Pla-3
9288: PPUSH
9289: CALL_OW 88
// DialogueOff ;
9293: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
9297: LD_INT 6
9299: PPUSH
9300: LD_INT 1
9302: PPUSH
9303: LD_INT 1
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 80
// PrepareAmerican ;
9313: CALL 2420 0 0
// PrepareBelkovReturnTeam ;
9317: CALL 928 0 0
// if IsOK ( Belkov ) then
9321: LD_EXP 55
9325: PPUSH
9326: CALL_OW 302
9330: IFFALSE 9344
// tmpBelkov = Belkov else
9332: LD_ADDR_VAR 0 1
9336: PUSH
9337: LD_EXP 55
9341: ST_TO_ADDR
9342: GO 9354
// tmpBelkov = Belkov2 ;
9344: LD_ADDR_VAR 0 1
9348: PUSH
9349: LD_EXP 59
9353: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
9354: LD_EXP 63
9358: PPUSH
9359: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
9363: LD_EXP 69
9367: PPUSH
9368: LD_STRING D13-Sol1-1
9370: PPUSH
9371: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
9375: LD_VAR 0 1
9379: PPUSH
9380: LD_STRING D13-Bel-1
9382: PPUSH
9383: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
9387: LD_EXP 58
9391: PPUSH
9392: LD_STRING D13-Kur-1
9394: PPUSH
9395: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
9399: LD_VAR 0 1
9403: PPUSH
9404: LD_STRING D13-Bel-2
9406: PPUSH
9407: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
9411: LD_EXP 64
9415: PPUSH
9416: LD_INT 121
9418: PPUSH
9419: LD_INT 29
9421: PPUSH
9422: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9426: LD_INT 35
9428: PPUSH
9429: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9433: LD_EXP 63
9437: PPUSH
9438: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
9442: LD_ADDR_VAR 0 2
9446: PUSH
9447: LD_EXP 64
9451: PPUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 1
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 56
9464: PUSH
9465: EMPTY
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PPUSH
9472: CALL_OW 72
9476: PPUSH
9477: LD_EXP 63
9481: PPUSH
9482: CALL_OW 74
9486: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
9487: LD_EXP 63
9491: PPUSH
9492: LD_VAR 0 2
9496: PPUSH
9497: CALL_OW 296
9501: PUSH
9502: LD_INT 5
9504: LESS
9505: IFFALSE 9518
// ComStop ( kirovVehicle ) else
9507: LD_EXP 63
9511: PPUSH
9512: CALL_OW 141
9516: GO 9533
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
9518: LD_EXP 64
9522: PPUSH
9523: LD_INT 121
9525: PPUSH
9526: LD_INT 29
9528: PPUSH
9529: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
9533: LD_EXP 64
9537: PPUSH
9538: LD_EXP 69
9542: PPUSH
9543: CALL_OW 74
9547: PPUSH
9548: LD_EXP 69
9552: PPUSH
9553: CALL_OW 296
9557: PUSH
9558: LD_INT 5
9560: LESS
9561: IFFALSE 9426
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
9563: LD_EXP 63
9567: PUSH
9568: LD_EXP 69
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PPUSH
9577: CALL_OW 87
// ComWalk ( trapTeam ) ;
9581: LD_EXP 70
9585: PPUSH
9586: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
9590: LD_EXP 70
9594: PPUSH
9595: LD_EXP 63
9599: PPUSH
9600: CALL_OW 179
// ComStop ( belkovTeam ) ;
9604: LD_EXP 64
9608: PPUSH
9609: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
9613: LD_EXP 64
9617: PPUSH
9618: LD_EXP 69
9622: PPUSH
9623: CALL_OW 179
// Say ( trapCommander , D14-Sol1-1 ) ;
9627: LD_EXP 69
9631: PPUSH
9632: LD_STRING D14-Sol1-1
9634: PPUSH
9635: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
9639: LD_VAR 0 1
9643: PPUSH
9644: LD_STRING D14-Bel-1
9646: PPUSH
9647: CALL_OW 88
// immortalBelkovTeam = true ;
9651: LD_ADDR_EXP 22
9655: PUSH
9656: LD_INT 1
9658: ST_TO_ADDR
// ComExitVehicle ( tmpBelkov ) ;
9659: LD_VAR 0 1
9663: PPUSH
9664: CALL_OW 121
// wait ( 0 0$1 ) ;
9668: LD_INT 35
9670: PPUSH
9671: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
9675: LD_EXP 69
9679: PPUSH
9680: LD_EXP 63
9684: PPUSH
9685: CALL_OW 120
// AddComHold ( trapTeam ) ;
9689: LD_EXP 70
9693: PPUSH
9694: CALL_OW 200
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
9698: LD_INT 6
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: LD_INT 2
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 80
// ComMoveToArea ( belkovTeam , BelkovRetreatArea ) ;
9714: LD_EXP 64
9718: PPUSH
9719: LD_INT 15
9721: PPUSH
9722: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
9726: LD_INT 35
9728: PPUSH
9729: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
9733: LD_VAR 0 1
9737: PPUSH
9738: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
9742: LD_VAR 0 1
9746: PPUSH
9747: LD_INT 15
9749: PPUSH
9750: CALL_OW 308
9754: IFFALSE 9726
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
9756: LD_VAR 0 1
9760: PPUSH
9761: LD_STRING D14-Bel-1a
9763: PPUSH
9764: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
9768: LD_EXP 58
9772: PPUSH
9773: LD_STRING D14-Kur-1
9775: PPUSH
9776: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
9780: LD_VAR 0 1
9784: PPUSH
9785: LD_STRING D14-Bel-2
9787: PPUSH
9788: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
9792: LD_EXP 58
9796: PPUSH
9797: LD_STRING D14-Kur-2
9799: PPUSH
9800: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
9804: LD_EXP 67
9808: PPUSH
9809: CALL_OW 85
// wait ( 0 0$2 ) ;
9813: LD_INT 70
9815: PPUSH
9816: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
9820: LD_EXP 53
9824: PPUSH
9825: LD_STRING D14a-Bur-1
9827: PPUSH
9828: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
9832: LD_EXP 67
9836: PPUSH
9837: LD_STRING D14a-Pla-1
9839: PPUSH
9840: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
9844: LD_EXP 53
9848: PPUSH
9849: LD_STRING D14a-Bur-2
9851: PPUSH
9852: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
9856: LD_EXP 67
9860: PPUSH
9861: LD_STRING D14a-Pla-2
9863: PPUSH
9864: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
9868: LD_EXP 53
9872: PPUSH
9873: LD_STRING D14a-Bur-3
9875: PPUSH
9876: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
9880: LD_EXP 67
9884: PPUSH
9885: LD_STRING D14a-Pla-3
9887: PPUSH
9888: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
9892: LD_EXP 53
9896: PPUSH
9897: LD_STRING D14a-Bur-4
9899: PPUSH
9900: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
9904: LD_EXP 67
9908: PPUSH
9909: LD_STRING D14a-Pla-4
9911: PPUSH
9912: CALL_OW 88
// InGameOff ;
9916: CALL_OW 9
// immortalBelkovTeam = false ;
9920: LD_ADDR_EXP 22
9924: PUSH
9925: LD_INT 0
9927: ST_TO_ADDR
// activateAMAI = true ;
9928: LD_ADDR_EXP 24
9932: PUSH
9933: LD_INT 1
9935: ST_TO_ADDR
// canExitBase = true ;
9936: LD_ADDR_EXP 18
9940: PUSH
9941: LD_INT 1
9943: ST_TO_ADDR
// construcMoreVehicles = false ;
9944: LD_ADDR_EXP 16
9948: PUSH
9949: LD_INT 0
9951: ST_TO_ADDR
// spawnCrates = false ;
9952: LD_ADDR_EXP 19
9956: PUSH
9957: LD_INT 0
9959: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
9960: LD_STRING M6
9962: PPUSH
9963: CALL_OW 337
// ComFree ( trapTeam ) ;
9967: LD_EXP 70
9971: PPUSH
9972: CALL_OW 139
// end ;
9976: PPOPN 2
9978: END
// every 0 0$1 trigger immortalBelkovTeam do
9979: LD_EXP 22
9983: IFFALSE 10001
9985: GO 9987
9987: DISABLE
// begin enable ;
9988: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
9989: LD_EXP 64
9993: PPUSH
9994: LD_INT 1000
9996: PPUSH
9997: CALL_OW 234
// end ;
10001: END
// every 0 0$1 trigger canExitBase and not belkovSaved and belkovAttackTime > 0 0$00 do
10002: LD_EXP 18
10006: PUSH
10007: LD_EXP 32
10011: NOT
10012: AND
10013: PUSH
10014: LD_EXP 52
10018: PUSH
10019: LD_INT 0
10021: GREATER
10022: AND
10023: IFFALSE 10043
10025: GO 10027
10027: DISABLE
// begin enable ;
10028: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
10029: LD_ADDR_EXP 52
10033: PUSH
10034: LD_EXP 52
10038: PUSH
10039: LD_INT 35
10041: MINUS
10042: ST_TO_ADDR
// end ;
10043: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
10044: LD_EXP 52
10048: PUSH
10049: LD_INT 70
10051: LESS
10052: PUSH
10053: LD_EXP 70
10057: AND
10058: IFFALSE 10079
10060: GO 10062
10062: DISABLE
// begin enable ;
10063: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
10064: LD_EXP 64
10068: PPUSH
10069: LD_INT 120
10071: PPUSH
10072: LD_INT 28
10074: PPUSH
10075: CALL_OW 114
// end ;
10079: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
10080: LD_EXP 25
10084: NOT
10085: PUSH
10086: LD_EXP 26
10090: NOT
10091: OR
10092: IFFALSE 10469
10094: GO 10096
10096: DISABLE
10097: LD_INT 0
10099: PPUSH
// begin enable ;
10100: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
10101: LD_ADDR_VAR 0 1
10105: PUSH
10106: LD_INT 22
10108: PUSH
10109: LD_INT 1
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 21
10118: PUSH
10119: LD_INT 3
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: LD_INT 30
10128: PUSH
10129: LD_INT 31
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: PPUSH
10141: CALL_OW 69
10145: PUSH
10146: FOR_IN
10147: IFFALSE 10467
// begin if See ( 3 , bunker ) then
10149: LD_INT 3
10151: PPUSH
10152: LD_VAR 0 1
10156: PPUSH
10157: CALL_OW 292
10161: IFFALSE 10465
// begin if bunker in leftBunkers and not sawLeftBunker then
10163: LD_VAR 0 1
10167: PUSH
10168: LD_EXP 71
10172: IN
10173: PUSH
10174: LD_EXP 25
10178: NOT
10179: AND
10180: IFFALSE 10331
// begin sawLeftBunker = true ;
10182: LD_ADDR_EXP 25
10186: PUSH
10187: LD_INT 1
10189: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
10190: LD_VAR 0 1
10194: PPUSH
10195: CALL_OW 85
// DialogueOn ;
10199: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
10203: LD_EXP 53
10207: PPUSH
10208: LD_STRING D15-Bur-1
10210: PPUSH
10211: CALL_OW 88
// if IsOK ( Gnyevko ) then
10215: LD_EXP 54
10219: PPUSH
10220: CALL_OW 302
10224: IFFALSE 10238
// Say ( Gnyevko , D15-Gny-1 ) ;
10226: LD_EXP 54
10230: PPUSH
10231: LD_STRING D15-Gny-1
10233: PPUSH
10234: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10238: LD_EXP 61
10242: PPUSH
10243: CALL_OW 302
10247: IFFALSE 10261
// Say ( Kovalyuk , D15-Kov-1 ) ;
10249: LD_EXP 61
10253: PPUSH
10254: LD_STRING D15-Kov-1
10256: PPUSH
10257: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
10261: LD_EXP 53
10265: PPUSH
10266: LD_STRING D15-Bur-2
10268: PPUSH
10269: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10273: LD_EXP 61
10277: PPUSH
10278: CALL_OW 302
10282: IFFALSE 10296
// Say ( Kovalyuk , D15-Kov-2 ) ;
10284: LD_EXP 61
10288: PPUSH
10289: LD_STRING D15-Kov-2
10291: PPUSH
10292: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
10296: LD_EXP 53
10300: PPUSH
10301: LD_STRING D15-Bur-3
10303: PPUSH
10304: CALL_OW 88
// DialogueOff ;
10308: CALL_OW 7
// raportForPlatonov = 3 ;
10312: LD_ADDR_EXP 34
10316: PUSH
10317: LD_INT 3
10319: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
10320: LD_STRING M7
10322: PPUSH
10323: CALL_OW 337
// exit ;
10327: POP
10328: POP
10329: GO 10469
// end ; if bunker in rightBunkers and not sawRightBunker then
10331: LD_VAR 0 1
10335: PUSH
10336: LD_EXP 72
10340: IN
10341: PUSH
10342: LD_EXP 26
10346: NOT
10347: AND
10348: IFFALSE 10465
// begin sawRightBunker = true ;
10350: LD_ADDR_EXP 26
10354: PUSH
10355: LD_INT 1
10357: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
10358: LD_VAR 0 1
10362: PPUSH
10363: CALL_OW 85
// DialogueOn ;
10367: CALL_OW 6
// if IsOK ( Kovalyuk ) then
10371: LD_EXP 61
10375: PPUSH
10376: CALL_OW 302
10380: IFFALSE 10414
// begin if sawLeftBunker then
10382: LD_EXP 25
10386: IFFALSE 10402
// Say ( Kovalyuk , D15-Kov-2a ) else
10388: LD_EXP 61
10392: PPUSH
10393: LD_STRING D15-Kov-2a
10395: PPUSH
10396: CALL_OW 88
10400: GO 10414
// Say ( Kovalyuk , D15-Kov-2 ) ;
10402: LD_EXP 61
10406: PPUSH
10407: LD_STRING D15-Kov-2
10409: PPUSH
10410: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
10414: LD_EXP 53
10418: PPUSH
10419: LD_STRING D16-Bur-1
10421: PPUSH
10422: CALL_OW 88
// if IsOK ( Gnyevko ) then
10426: LD_EXP 54
10430: PPUSH
10431: CALL_OW 302
10435: IFFALSE 10449
// Say ( Gnyevko , D16-Gny-1 ) ;
10437: LD_EXP 54
10441: PPUSH
10442: LD_STRING D16-Gny-1
10444: PPUSH
10445: CALL_OW 88
// DialogueOff ;
10449: CALL_OW 7
// raportForPlatonov = 2 ;
10453: LD_ADDR_EXP 34
10457: PUSH
10458: LD_INT 2
10460: ST_TO_ADDR
// exit ;
10461: POP
10462: POP
10463: GO 10469
// end ; end ; end ;
10465: GO 10146
10467: POP
10468: POP
// end ;
10469: PPOPN 1
10471: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
10472: LD_EXP 28
10476: NOT
10477: PUSH
10478: LD_EXP 72
10482: AND
10483: PUSH
10484: LD_EXP 61
10488: PPUSH
10489: CALL_OW 302
10493: PUSH
10494: LD_EXP 54
10498: PPUSH
10499: CALL_OW 302
10503: OR
10504: AND
10505: IFFALSE 10693
10507: GO 10509
10509: DISABLE
10510: LD_INT 0
10512: PPUSH
// begin enable ;
10513: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
10514: LD_ADDR_VAR 0 1
10518: PUSH
10519: LD_INT 22
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 21
10534: PUSH
10535: LD_INT 1
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 21
10544: PUSH
10545: LD_INT 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PPUSH
10561: CALL_OW 69
10565: PUSH
10566: FOR_IN
10567: IFFALSE 10691
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
10569: LD_VAR 0 1
10573: PPUSH
10574: CALL_OW 320
10578: PUSH
10579: LD_EXP 72
10583: PUSH
10584: LD_INT 1
10586: ARRAY
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 1
10593: PPUSH
10594: CALL_OW 320
10598: PUSH
10599: LD_EXP 72
10603: PUSH
10604: LD_INT 2
10606: ARRAY
10607: EQUAL
10608: OR
10609: IFFALSE 10689
// begin dialogAttackRightBunkers = true ;
10611: LD_ADDR_EXP 28
10615: PUSH
10616: LD_INT 1
10618: ST_TO_ADDR
// DialogueOn ;
10619: CALL_OW 6
// if IsOK ( Gnyevko ) then
10623: LD_EXP 54
10627: PPUSH
10628: CALL_OW 302
10632: IFFALSE 10646
// Say ( Gnyevko , D16A-Gny-1 ) ;
10634: LD_EXP 54
10638: PPUSH
10639: LD_STRING D16A-Gny-1
10641: PPUSH
10642: CALL_OW 88
// if IsOK ( Kovalyuk ) then
10646: LD_EXP 61
10650: PPUSH
10651: CALL_OW 302
10655: IFFALSE 10669
// Say ( Kovalyuk , D16A-Kov-1 ) ;
10657: LD_EXP 61
10661: PPUSH
10662: LD_STRING D16A-Kov-1
10664: PPUSH
10665: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
10669: LD_EXP 53
10673: PPUSH
10674: LD_STRING D16A-Bur-1
10676: PPUSH
10677: CALL_OW 88
// DialogueOff ;
10681: CALL_OW 7
// exit ;
10685: POP
10686: POP
10687: GO 10693
// end ; end ;
10689: GO 10566
10691: POP
10692: POP
// end ;
10693: PPOPN 1
10695: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) do var decsToChoose ;
10696: LD_INT 18
10698: PPUSH
10699: LD_INT 22
10701: PUSH
10702: LD_INT 3
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: PPUSH
10712: CALL_OW 70
10716: IFFALSE 11067
10718: GO 10720
10720: DISABLE
10721: LD_INT 0
10723: PPUSH
// begin if playerGetSupport then
10724: LD_EXP 29
10728: IFFALSE 10747
// decsToChoose = [ 1 , 3 ] else
10730: LD_ADDR_VAR 0 1
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: LD_INT 3
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: ST_TO_ADDR
10745: GO 10766
// decsToChoose = [ 1 , 2 , 3 ] ;
10747: LD_ADDR_VAR 0 1
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: LD_INT 2
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
10766: LD_STRING QAttackBw
10768: PPUSH
10769: LD_VAR 0 1
10773: PPUSH
10774: CALL_OW 98
10778: PUSH
10779: LD_INT 1
10781: DOUBLE
10782: EQUAL
10783: IFTRUE 10787
10785: GO 10872
10787: POP
// begin DialogueOn ;
10788: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
10792: LD_EXP 53
10796: PPUSH
10797: LD_STRING D17-Bur-1
10799: PPUSH
10800: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
10804: LD_EXP 67
10808: PPUSH
10809: LD_STRING D17-Pla-1
10811: PPUSH
10812: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
10816: LD_EXP 53
10820: PPUSH
10821: LD_STRING D17-Bur-2
10823: PPUSH
10824: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
10828: LD_EXP 67
10832: PPUSH
10833: LD_STRING D17-Pla-2
10835: PPUSH
10836: CALL_OW 94
// DialogueOff ;
10840: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
10844: LD_EXP 37
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: LD_INT 3
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: IN
10859: NOT
10860: IFFALSE 10870
// initiative = 1 ;
10862: LD_ADDR_EXP 37
10866: PUSH
10867: LD_INT 1
10869: ST_TO_ADDR
// end ; 2 :
10870: GO 10997
10872: LD_INT 2
10874: DOUBLE
10875: EQUAL
10876: IFTRUE 10880
10878: GO 10977
10880: POP
// begin DialogueOn ;
10881: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
10885: LD_EXP 53
10889: PPUSH
10890: LD_STRING D18-Bur-1
10892: PPUSH
10893: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
10897: LD_EXP 67
10901: PPUSH
10902: LD_STRING D18-Pla-1
10904: PPUSH
10905: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
10909: LD_EXP 53
10913: PPUSH
10914: LD_STRING D18-Bur-2
10916: PPUSH
10917: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
10921: LD_EXP 67
10925: PPUSH
10926: LD_STRING D18-Pla-2
10928: PPUSH
10929: CALL_OW 94
// DialogueOff ;
10933: CALL_OW 7
// playerGetSupport = true ;
10937: LD_ADDR_EXP 29
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// medalForGetSupport = false ;
10945: LD_ADDR_EXP 35
10949: PUSH
10950: LD_INT 0
10952: ST_TO_ADDR
// PlatonovSendSupport ;
10953: CALL 5443 0 0
// if initiative <> 3 then
10957: LD_EXP 37
10961: PUSH
10962: LD_INT 3
10964: NONEQUAL
10965: IFFALSE 10975
// initiative = 1 ;
10967: LD_ADDR_EXP 37
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// end ; 3 :
10975: GO 10997
10977: LD_INT 3
10979: DOUBLE
10980: EQUAL
10981: IFTRUE 10985
10983: GO 10996
10985: POP
// initiative = 3 ; end ;
10986: LD_ADDR_EXP 37
10990: PUSH
10991: LD_INT 3
10993: ST_TO_ADDR
10994: GO 10997
10996: POP
// if IsOK ( Gnyevko ) then
10997: LD_EXP 54
11001: PPUSH
11002: CALL_OW 302
11006: IFFALSE 11032
// begin Say ( Gnyevko , D19-Gny-1 ) ;
11008: LD_EXP 54
11012: PPUSH
11013: LD_STRING D19-Gny-1
11015: PPUSH
11016: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
11020: LD_EXP 53
11024: PPUSH
11025: LD_STRING D19-Bur-1
11027: PPUSH
11028: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
11032: LD_EXP 61
11036: PPUSH
11037: CALL_OW 302
11041: IFFALSE 11067
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
11043: LD_EXP 61
11047: PPUSH
11048: LD_STRING D19-Kov-1
11050: PPUSH
11051: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
11055: LD_EXP 53
11059: PPUSH
11060: LD_STRING D19-Bur-2
11062: PPUSH
11063: CALL_OW 88
// end ; end ;
11067: PPOPN 1
11069: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
11070: LD_EXP 27
11074: NOT
11075: PUSH
11076: LD_EXP 71
11080: AND
11081: PUSH
11082: LD_INT 18
11084: PPUSH
11085: LD_INT 22
11087: PUSH
11088: LD_INT 3
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: PPUSH
11098: CALL_OW 70
11102: PUSH
11103: LD_INT 0
11105: EQUAL
11106: AND
11107: PUSH
11108: LD_EXP 61
11112: PPUSH
11113: CALL_OW 302
11117: PUSH
11118: LD_EXP 54
11122: PPUSH
11123: CALL_OW 302
11127: OR
11128: AND
11129: IFFALSE 11317
11131: GO 11133
11133: DISABLE
11134: LD_INT 0
11136: PPUSH
// begin enable ;
11137: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11138: LD_ADDR_VAR 0 1
11142: PUSH
11143: LD_INT 22
11145: PUSH
11146: LD_INT 3
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 2
11155: PUSH
11156: LD_INT 21
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 21
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: PUSH
11190: FOR_IN
11191: IFFALSE 11315
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
11193: LD_VAR 0 1
11197: PPUSH
11198: CALL_OW 320
11202: PUSH
11203: LD_EXP 71
11207: PUSH
11208: LD_INT 1
11210: ARRAY
11211: EQUAL
11212: PUSH
11213: LD_VAR 0 1
11217: PPUSH
11218: CALL_OW 320
11222: PUSH
11223: LD_EXP 71
11227: PUSH
11228: LD_INT 2
11230: ARRAY
11231: EQUAL
11232: OR
11233: IFFALSE 11313
// begin dialogAttackLeftBunkers = true ;
11235: LD_ADDR_EXP 27
11239: PUSH
11240: LD_INT 1
11242: ST_TO_ADDR
// DialogueOn ;
11243: CALL_OW 6
// if IsOK ( Gnyevko ) then
11247: LD_EXP 54
11251: PPUSH
11252: CALL_OW 302
11256: IFFALSE 11270
// Say ( Gnyevko , D19A-Gny-1 ) ;
11258: LD_EXP 54
11262: PPUSH
11263: LD_STRING D19A-Gny-1
11265: PPUSH
11266: CALL_OW 88
// if IsOK ( Kovalyuk ) then
11270: LD_EXP 61
11274: PPUSH
11275: CALL_OW 302
11279: IFFALSE 11293
// Say ( Kovalyuk , D19A-Kov-1 ) ;
11281: LD_EXP 61
11285: PPUSH
11286: LD_STRING D19A-Kov-1
11288: PPUSH
11289: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
11293: LD_EXP 53
11297: PPUSH
11298: LD_STRING D16A-Bur-1
11300: PPUSH
11301: CALL_OW 88
// DialogueOff ;
11305: CALL_OW 7
// exit ;
11309: POP
11310: POP
11311: GO 11317
// end ; end ;
11313: GO 11190
11315: POP
11316: POP
// end ;
11317: PPOPN 1
11319: END
// every 0 0$1 trigger not leftBunkers and canExitBase do
11320: LD_EXP 71
11324: NOT
11325: PUSH
11326: LD_EXP 18
11330: AND
11331: IFFALSE 11375
11333: GO 11335
11335: DISABLE
// begin DialogueOn ;
11336: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
11340: LD_EXP 53
11344: PPUSH
11345: LD_STRING D20-Bur-1
11347: PPUSH
11348: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
11352: LD_EXP 67
11356: PPUSH
11357: LD_STRING D20-Pla-1
11359: PPUSH
11360: CALL_OW 88
// DialogueOff ;
11364: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
11368: LD_STRING M8
11370: PPUSH
11371: CALL_OW 337
// end ;
11375: END
// every 0 0$1 trigger not rightBunkers and canExitBase do
11376: LD_EXP 72
11380: NOT
11381: PUSH
11382: LD_EXP 18
11386: AND
11387: IFFALSE 11424
11389: GO 11391
11391: DISABLE
// begin DialogueOn ;
11392: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
11396: LD_EXP 53
11400: PPUSH
11401: LD_STRING D20a-Bur-1
11403: PPUSH
11404: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
11408: LD_EXP 67
11412: PPUSH
11413: LD_STRING D20a-Pla-1
11415: PPUSH
11416: CALL_OW 88
// DialogueOff ;
11420: CALL_OW 7
// end ;
11424: END
// every 0 0$1 trigger not saveBelkovDecision do var yourUnit , trapUnit , decsToChoose ;
11425: LD_EXP 30
11429: NOT
11430: IFFALSE 11901
11432: GO 11434
11434: DISABLE
11435: LD_INT 0
11437: PPUSH
11438: PPUSH
11439: PPUSH
// begin enable ;
11440: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
11441: LD_ADDR_VAR 0 1
11445: PUSH
11446: LD_INT 22
11448: PUSH
11449: LD_INT 3
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: LD_INT 21
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PPUSH
11488: CALL_OW 69
11492: PUSH
11493: FOR_IN
11494: IFFALSE 11899
// for trapUnit in trapTeam do
11496: LD_ADDR_VAR 0 2
11500: PUSH
11501: LD_EXP 70
11505: PUSH
11506: FOR_IN
11507: IFFALSE 11895
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
11509: LD_VAR 0 1
11513: PPUSH
11514: LD_VAR 0 2
11518: PPUSH
11519: CALL_OW 296
11523: PUSH
11524: LD_INT 16
11526: LESS
11527: IFFALSE 11893
// begin saveBelkovDecision = true ;
11529: LD_ADDR_EXP 30
11533: PUSH
11534: LD_INT 1
11536: ST_TO_ADDR
// if playerGetSupport then
11537: LD_EXP 29
11541: IFFALSE 11560
// decsToChoose = [ 1 , 3 ] else
11543: LD_ADDR_VAR 0 3
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: ST_TO_ADDR
11558: GO 11579
// decsToChoose = [ 1 , 2 , 3 ] ;
11560: LD_ADDR_VAR 0 3
11564: PUSH
11565: LD_INT 1
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 3
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
11579: LD_STRING QAttackAm
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: CALL_OW 98
11591: PUSH
11592: LD_INT 1
11594: DOUBLE
11595: EQUAL
11596: IFTRUE 11600
11598: GO 11661
11600: POP
// begin DialogueOn ;
11601: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
11605: LD_EXP 53
11609: PPUSH
11610: LD_STRING D21-Bur-1
11612: PPUSH
11613: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
11617: LD_EXP 67
11621: PPUSH
11622: LD_STRING D21-Pla-1
11624: PPUSH
11625: CALL_OW 94
// DialogueOff ;
11629: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
11633: LD_EXP 37
11637: PUSH
11638: LD_INT 2
11640: PUSH
11641: LD_INT 3
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: IN
11648: NOT
11649: IFFALSE 11659
// initiative = 1 ;
11651: LD_ADDR_EXP 37
11655: PUSH
11656: LD_INT 1
11658: ST_TO_ADDR
// end ; 2 :
11659: GO 11837
11661: LD_INT 2
11663: DOUBLE
11664: EQUAL
11665: IFTRUE 11669
11667: GO 11817
11669: POP
// begin DialogueOn ;
11670: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
11674: LD_EXP 53
11678: PPUSH
11679: LD_STRING D22-Bur-1
11681: PPUSH
11682: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
11686: LD_EXP 29
11690: PUSH
11691: LD_EXP 71
11695: PUSH
11696: LD_INT 0
11698: EQUAL
11699: PUSH
11700: LD_EXP 72
11704: PUSH
11705: LD_INT 0
11707: EQUAL
11708: OR
11709: AND
11710: IFFALSE 11724
// Say ( Platonov , D22-Pla-1b ) ;
11712: LD_EXP 67
11716: PPUSH
11717: LD_STRING D22-Pla-1b
11719: PPUSH
11720: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
11724: LD_EXP 29
11728: PUSH
11729: LD_EXP 71
11733: PUSH
11734: LD_EXP 72
11738: OR
11739: AND
11740: IFFALSE 11754
// Say ( Platonov , D22-Pla-1a ) ;
11742: LD_EXP 67
11746: PPUSH
11747: LD_STRING D22-Pla-1a
11749: PPUSH
11750: CALL_OW 88
// if not playerGetSupport then
11754: LD_EXP 29
11758: NOT
11759: IFFALSE 11793
// begin Say ( Platonov , D22-Pla-1 ) ;
11761: LD_EXP 67
11765: PPUSH
11766: LD_STRING D22-Pla-1
11768: PPUSH
11769: CALL_OW 88
// playerGetSupport = true ;
11773: LD_ADDR_EXP 29
11777: PUSH
11778: LD_INT 1
11780: ST_TO_ADDR
// medalForGetSupport = false ;
11781: LD_ADDR_EXP 35
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// PlatonovSendSupport ;
11789: CALL 5443 0 0
// end ; DialogueOff ;
11793: CALL_OW 7
// if initiative <> 3 then
11797: LD_EXP 37
11801: PUSH
11802: LD_INT 3
11804: NONEQUAL
11805: IFFALSE 11815
// initiative = 2 ;
11807: LD_ADDR_EXP 37
11811: PUSH
11812: LD_INT 2
11814: ST_TO_ADDR
// end ; 3 :
11815: GO 11837
11817: LD_INT 3
11819: DOUBLE
11820: EQUAL
11821: IFTRUE 11825
11823: GO 11836
11825: POP
// initiative = 3 ; end ;
11826: LD_ADDR_EXP 37
11830: PUSH
11831: LD_INT 3
11833: ST_TO_ADDR
11834: GO 11837
11836: POP
// if IsOK ( Gnyevko ) then
11837: LD_EXP 54
11841: PPUSH
11842: CALL_OW 302
11846: IFFALSE 11872
// begin Say ( Gnyevko , D23-Gny-1 ) ;
11848: LD_EXP 54
11852: PPUSH
11853: LD_STRING D23-Gny-1
11855: PPUSH
11856: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
11860: LD_EXP 53
11864: PPUSH
11865: LD_STRING D23-Bur-1
11867: PPUSH
11868: CALL_OW 88
// end ; saveBelkovObjective = true ;
11872: LD_ADDR_EXP 31
11876: PUSH
11877: LD_INT 1
11879: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
11880: LD_STRING M9
11882: PPUSH
11883: CALL_OW 337
// exit ;
11887: POP
11888: POP
11889: POP
11890: POP
11891: GO 11901
// end ;
11893: GO 11506
11895: POP
11896: POP
11897: GO 11493
11899: POP
11900: POP
// end ;
11901: PPOPN 3
11903: END
// every 0 0$1 trigger canExitBase and not trapTeam and not belkovSaved do
11904: LD_EXP 18
11908: PUSH
11909: LD_EXP 70
11913: NOT
11914: AND
11915: PUSH
11916: LD_EXP 32
11920: NOT
11921: AND
11922: IFFALSE 11954
11924: GO 11926
11926: DISABLE
// begin belkovSaved = true ;
11927: LD_ADDR_EXP 32
11931: PUSH
11932: LD_INT 1
11934: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
11935: LD_EXP 64
11939: PPUSH
11940: LD_INT 3
11942: PPUSH
11943: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
11947: LD_STRING M9a
11949: PPUSH
11950: CALL_OW 337
// end ;
11954: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
11955: LD_EXP 32
11959: PUSH
11960: LD_EXP 53
11964: PPUSH
11965: LD_EXP 55
11969: PPUSH
11970: CALL_OW 296
11974: PUSH
11975: LD_INT 14
11977: LESS
11978: PUSH
11979: LD_EXP 53
11983: PPUSH
11984: LD_EXP 59
11988: PPUSH
11989: CALL_OW 296
11993: PUSH
11994: LD_INT 14
11996: LESS
11997: OR
11998: AND
11999: IFFALSE 12273
12001: GO 12003
12003: DISABLE
// begin InGameOn ;
12004: CALL_OW 8
// if IsOk ( Belkov ) then
12008: LD_EXP 55
12012: PPUSH
12013: CALL_OW 302
12017: IFFALSE 12115
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
12019: LD_EXP 53
12023: PUSH
12024: LD_EXP 55
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PPUSH
12033: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
12037: LD_EXP 53
12041: PPUSH
12042: LD_EXP 55
12046: PPUSH
12047: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
12051: LD_EXP 55
12055: PPUSH
12056: LD_EXP 53
12060: PPUSH
12061: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
12065: LD_EXP 55
12069: PPUSH
12070: LD_STRING D24-Bel-1
12072: PPUSH
12073: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12077: LD_EXP 53
12081: PPUSH
12082: LD_STRING D24-Bur-1
12084: PPUSH
12085: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
12089: LD_EXP 55
12093: PPUSH
12094: LD_STRING D24-Bel-2
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12101: LD_EXP 53
12105: PPUSH
12106: LD_STRING D24-Bur-2
12108: PPUSH
12109: CALL_OW 88
// end else
12113: GO 12221
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
12115: LD_EXP 53
12119: PUSH
12120: LD_EXP 59
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PPUSH
12129: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
12133: LD_EXP 53
12137: PPUSH
12138: LD_EXP 59
12142: PPUSH
12143: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
12147: LD_EXP 59
12151: PPUSH
12152: LD_EXP 53
12156: PPUSH
12157: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
12161: LD_EXP 59
12165: PPUSH
12166: LD_STRING D24-Bel-1
12168: PPUSH
12169: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12173: LD_EXP 53
12177: PPUSH
12178: LD_STRING D24-Bur-1
12180: PPUSH
12181: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
12185: LD_EXP 53
12189: PPUSH
12190: LD_STRING D24-Bur-1a
12192: PPUSH
12193: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
12197: LD_EXP 59
12201: PPUSH
12202: LD_STRING D24-Bel-2
12204: PPUSH
12205: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12209: LD_EXP 53
12213: PPUSH
12214: LD_STRING D24-Bur-2
12216: PPUSH
12217: CALL_OW 88
// end ; if captureBelkovVehicle then
12221: LD_EXP 33
12225: IFFALSE 12239
// Say ( Burlak , D24-Bur-2a ) ;
12227: LD_EXP 53
12231: PPUSH
12232: LD_STRING D24-Bur-2a
12234: PPUSH
12235: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
12239: LD_EXP 67
12243: PPUSH
12244: LD_STRING D24-Pla-2
12246: PPUSH
12247: CALL_OW 94
// if leftBunkers then
12251: LD_EXP 71
12255: IFFALSE 12269
// SayRadio ( Platonov , D24-Pla-2a ) ;
12257: LD_EXP 67
12261: PPUSH
12262: LD_STRING D24-Pla-2a
12264: PPUSH
12265: CALL_OW 94
// InGameOff ;
12269: CALL_OW 9
// end ;
12273: END
// every 0 0$1 trigger canExitBase and not IsInArea ( Burlak , BeriaBaseArea ) and raportForPlatonov = - 1 do
12274: LD_EXP 18
12278: PUSH
12279: LD_EXP 53
12283: PPUSH
12284: LD_INT 8
12286: PPUSH
12287: CALL_OW 308
12291: NOT
12292: AND
12293: PUSH
12294: LD_EXP 34
12298: PUSH
12299: LD_INT 1
12301: NEG
12302: EQUAL
12303: AND
12304: IFFALSE 12318
12306: GO 12308
12308: DISABLE
// begin enable ;
12309: ENABLE
// raportForPlatonov = 0 ;
12310: LD_ADDR_EXP 34
12314: PUSH
12315: LD_INT 0
12317: ST_TO_ADDR
// end ;
12318: END
// every 0 0$1 trigger canExitBase and raportForPlatonov >= 0 and not backToBeria2 do
12319: LD_EXP 18
12323: PUSH
12324: LD_EXP 34
12328: PUSH
12329: LD_INT 0
12331: GREATEREQUAL
12332: AND
12333: PUSH
12334: LD_EXP 15
12338: NOT
12339: AND
12340: IFFALSE 12585
12342: GO 12344
12344: DISABLE
// begin DialogueOn ;
12345: CALL_OW 6
// case raportForPlatonov of 0 :
12349: LD_EXP 34
12353: PUSH
12354: LD_INT 0
12356: DOUBLE
12357: EQUAL
12358: IFTRUE 12362
12360: GO 12389
12362: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
12363: LD_EXP 67
12367: PPUSH
12368: LD_STRING D25a-Pla-1
12370: PPUSH
12371: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
12375: LD_EXP 53
12379: PPUSH
12380: LD_STRING D25a-Bur-1
12382: PPUSH
12383: CALL_OW 88
// end ; 1 :
12387: GO 12569
12389: LD_INT 1
12391: DOUBLE
12392: EQUAL
12393: IFTRUE 12397
12395: GO 12424
12397: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12398: LD_EXP 67
12402: PPUSH
12403: LD_STRING D25-Pla-1
12405: PPUSH
12406: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
12410: LD_EXP 53
12414: PPUSH
12415: LD_STRING D25-Bur-1
12417: PPUSH
12418: CALL_OW 88
// end ; 2 :
12422: GO 12569
12424: LD_INT 2
12426: DOUBLE
12427: EQUAL
12428: IFTRUE 12432
12430: GO 12478
12432: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12433: LD_EXP 67
12437: PPUSH
12438: LD_STRING D25-Pla-1
12440: PPUSH
12441: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
12445: LD_EXP 53
12449: PPUSH
12450: LD_STRING D25-Bur-1a
12452: PPUSH
12453: CALL_OW 88
// if not sawLeftBunker then
12457: LD_EXP 25
12461: NOT
12462: IFFALSE 12476
// Say ( Platonov , D25c-Pla-1 ) ;
12464: LD_EXP 67
12468: PPUSH
12469: LD_STRING D25c-Pla-1
12471: PPUSH
12472: CALL_OW 88
// end ; 3 :
12476: GO 12569
12478: LD_INT 3
12480: DOUBLE
12481: EQUAL
12482: IFTRUE 12486
12484: GO 12568
12486: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
12487: LD_EXP 67
12491: PPUSH
12492: LD_STRING D25-Pla-1
12494: PPUSH
12495: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
12499: LD_EXP 53
12503: PPUSH
12504: LD_STRING D25a-Bur-1b
12506: PPUSH
12507: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
12511: LD_EXP 53
12515: PPUSH
12516: LD_STRING D25b-Bur-1
12518: PPUSH
12519: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
12523: LD_EXP 67
12527: PPUSH
12528: LD_STRING D25b-Pla-1
12530: PPUSH
12531: CALL_OW 88
// playerGetSupport = true ;
12535: LD_ADDR_EXP 29
12539: PUSH
12540: LD_INT 1
12542: ST_TO_ADDR
// PlatonovSendSupport ;
12543: CALL 5443 0 0
// if not sawRightBunker then
12547: LD_EXP 26
12551: NOT
12552: IFFALSE 12566
// Say ( Platonov , D25c-Pla-1 ) ;
12554: LD_EXP 67
12558: PPUSH
12559: LD_STRING D25c-Pla-1
12561: PPUSH
12562: CALL_OW 88
// end ; end ;
12566: GO 12569
12568: POP
// Say ( Platonov , D25c-Pla-1a ) ;
12569: LD_EXP 67
12573: PPUSH
12574: LD_STRING D25c-Pla-1a
12576: PPUSH
12577: CALL_OW 88
// DialogueOff ;
12581: CALL_OW 7
// end ;
12585: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
12586: LD_INT 19
12588: PPUSH
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: PPUSH
12602: CALL_OW 70
12606: PUSH
12607: LD_INT 0
12609: GREATER
12610: IFFALSE 12630
12612: GO 12614
12614: DISABLE
// begin northMapExplored = true ;
12615: LD_ADDR_EXP 36
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
12623: LD_STRING M10
12625: PPUSH
12626: CALL_OW 337
// end ;
12630: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
12631: LD_EXP 71
12635: NOT
12636: PUSH
12637: LD_EXP 36
12641: AND
12642: PUSH
12643: LD_EXP 32
12647: PUSH
12648: LD_EXP 31
12652: NOT
12653: OR
12654: AND
12655: IFFALSE 12675
12657: GO 12659
12659: DISABLE
// begin backToBeria2 = true ;
12660: LD_ADDR_EXP 15
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
12668: LD_STRING M10a
12670: PPUSH
12671: CALL_OW 337
// end ; end_of_file end_of_file
12675: END
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
12676: LD_EXP 19
12680: IFFALSE 12909
12682: GO 12684
12684: DISABLE
12685: LD_INT 0
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
12692: LD_ADDR_VAR 0 4
12696: PUSH
12697: LD_INT 22
12699: PUSH
12700: LD_INT 3
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 21
12709: PUSH
12710: LD_INT 1
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 25
12719: PUSH
12720: LD_INT 2
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 69
12736: ST_TO_ADDR
// wait ( 0 0$40 ) ;
12737: LD_INT 1400
12739: PPUSH
12740: CALL_OW 67
// carryCratesEngs = 0 ;
12744: LD_ADDR_VAR 0 3
12748: PUSH
12749: LD_INT 0
12751: ST_TO_ADDR
// for unit in playerEngs do
12752: LD_ADDR_VAR 0 2
12756: PUSH
12757: LD_VAR 0 4
12761: PUSH
12762: FOR_IN
12763: IFFALSE 12791
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
12765: LD_ADDR_VAR 0 3
12769: PUSH
12770: LD_VAR 0 3
12774: PUSH
12775: LD_VAR 0 2
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 289
12787: PLUS
12788: ST_TO_ADDR
12789: GO 12762
12791: POP
12792: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
12793: LD_INT 106
12795: PPUSH
12796: CALL_OW 274
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 275
12808: PUSH
12809: LD_INT 50
12811: LESS
12812: PUSH
12813: LD_INT 8
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 287
12823: PUSH
12824: LD_INT 10
12826: MUL
12827: PUSH
12828: LD_INT 106
12830: PPUSH
12831: CALL_OW 274
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 275
12843: PLUS
12844: PUSH
12845: LD_VAR 0 3
12849: PLUS
12850: PUSH
12851: LD_INT 50
12853: LESS
12854: AND
12855: IFFALSE 12867
// spawnNextCrates = true else
12857: LD_ADDR_VAR 0 5
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
12865: GO 12875
// spawnNextCrates = false ;
12867: LD_ADDR_VAR 0 5
12871: PUSH
12872: LD_INT 0
12874: ST_TO_ADDR
// if spawnNextCrates then
12875: LD_VAR 0 5
12879: IFFALSE 12902
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
12881: LD_INT 1
12883: PPUSH
12884: LD_INT 5
12886: PPUSH
12887: CALL_OW 12
12891: PPUSH
12892: LD_INT 8
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: CALL_OW 55
// until not spawnCrates ;
12902: LD_EXP 19
12906: NOT
12907: IFFALSE 12692
// end ; end_of_file
12909: PPOPN 5
12911: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
12912: LD_VAR 0 1
12916: PPUSH
12917: CALL_OW 266
12921: PUSH
12922: LD_INT 6
12924: EQUAL
12925: PUSH
12926: LD_INT 22
12928: PUSH
12929: LD_INT 3
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 30
12938: PUSH
12939: LD_INT 6
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PPUSH
12950: CALL_OW 69
12954: PUSH
12955: LD_INT 1
12957: GREATER
12958: AND
12959: PUSH
12960: LD_EXP 10
12964: NOT
12965: AND
12966: IFFALSE 12977
// Dial_StopConstructAgainSameBuilding ( building ) ;
12968: LD_VAR 0 1
12972: PPUSH
12973: CALL 7150 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
12977: LD_VAR 0 1
12981: PPUSH
12982: CALL_OW 266
12986: PUSH
12987: LD_INT 2
12989: EQUAL
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_INT 3
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 30
13003: PUSH
13004: LD_INT 2
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 69
13019: PUSH
13020: LD_INT 1
13022: GREATER
13023: AND
13024: PUSH
13025: LD_EXP 10
13029: NOT
13030: AND
13031: IFFALSE 13042
// Dial_StopConstructAgainSameBuilding ( building ) ;
13033: LD_VAR 0 1
13037: PPUSH
13038: CALL 7150 0 1
// end ;
13042: PPOPN 2
13044: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 255
13054: PUSH
13055: LD_INT 3
13057: EQUAL
13058: PUSH
13059: LD_VAR 0 1
13063: PPUSH
13064: CALL_OW 266
13068: PUSH
13069: LD_INT 6
13071: EQUAL
13072: AND
13073: PUSH
13074: LD_EXP 7
13078: NOT
13079: AND
13080: IFFALSE 13086
// Dial_LabConstructed ;
13082: CALL 7000 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
13086: LD_VAR 0 1
13090: PPUSH
13091: CALL_OW 255
13095: PUSH
13096: LD_INT 3
13098: EQUAL
13099: PUSH
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 266
13109: PUSH
13110: LD_INT 2
13112: EQUAL
13113: AND
13114: PUSH
13115: LD_EXP 8
13119: NOT
13120: AND
13121: IFFALSE 13127
// Dial_WorkshopConstructed ;
13123: CALL 7075 0 0
// if GetSide ( building ) = 6 then
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 255
13136: PUSH
13137: LD_INT 6
13139: EQUAL
13140: IFFALSE 13317
// begin if GetBType ( building ) = b_breastwork then
13142: LD_VAR 0 1
13146: PPUSH
13147: CALL_OW 266
13151: PUSH
13152: LD_INT 31
13154: EQUAL
13155: IFFALSE 13200
// ComEnterUnit ( UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] , [ f_outside ] ] ) [ 1 ] , building ) ;
13157: LD_EXP 60
13161: PPUSH
13162: LD_INT 25
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 56
13174: PUSH
13175: EMPTY
13176: LIST
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 72
13186: PUSH
13187: LD_INT 1
13189: ARRAY
13190: PPUSH
13191: LD_VAR 0 1
13195: PPUSH
13196: CALL_OW 120
// if GetBType ( building ) = b_lab then
13200: LD_VAR 0 1
13204: PPUSH
13205: CALL_OW 266
13209: PUSH
13210: LD_INT 6
13212: EQUAL
13213: IFFALSE 13273
// begin ResAllTechs ( 6 , building , 3 ) ;
13215: LD_INT 6
13217: PPUSH
13218: LD_VAR 0 1
13222: PPUSH
13223: LD_INT 3
13225: PPUSH
13226: CALL 4160 0 3
// ComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_scientistic ] ) , building ) ;
13230: LD_EXP 60
13234: PPUSH
13235: LD_INT 25
13237: PUSH
13238: LD_INT 4
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 72
13249: PPUSH
13250: LD_VAR 0 1
13254: PPUSH
13255: CALL_OW 120
// ComEnterUnit ( Kirilenkova , building ) ;
13259: LD_EXP 56
13263: PPUSH
13264: LD_VAR 0 1
13268: PPUSH
13269: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
13273: LD_VAR 0 1
13277: PPUSH
13278: CALL_OW 266
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: IFFALSE 13317
// ComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
13288: LD_EXP 60
13292: PPUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 3
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PPUSH
13303: CALL_OW 72
13307: PPUSH
13308: LD_VAR 0 1
13312: PPUSH
13313: CALL_OW 120
// end ; end ;
13317: PPOPN 1
13319: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
13320: LD_VAR 0 1
13324: PUSH
13325: LD_INT 47
13327: EQUAL
13328: PUSH
13329: LD_VAR 0 2
13333: PPUSH
13334: CALL_OW 255
13338: PUSH
13339: LD_INT 3
13341: EQUAL
13342: AND
13343: IFFALSE 13353
// engineResearched = true ;
13345: LD_ADDR_EXP 9
13349: PUSH
13350: LD_INT 1
13352: ST_TO_ADDR
// end ;
13353: PPOPN 2
13355: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
13356: LD_VAR 0 2
13360: PPUSH
13361: CALL_OW 255
13365: PUSH
13366: LD_OWVAR 2
13370: EQUAL
13371: PUSH
13372: LD_VAR 0 2
13376: PPUSH
13377: CALL_OW 302
13381: AND
13382: PUSH
13383: LD_EXP 11
13387: NOT
13388: AND
13389: PUSH
13390: LD_EXP 16
13394: NOT
13395: AND
13396: IFFALSE 13407
// Dial_FirstVehConstructed ( factory ) ;
13398: LD_VAR 0 2
13402: PPUSH
13403: CALL 7498 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
13407: LD_VAR 0 2
13411: PPUSH
13412: CALL_OW 255
13416: PUSH
13417: LD_OWVAR 2
13421: EQUAL
13422: PUSH
13423: LD_VAR 0 2
13427: PPUSH
13428: CALL_OW 302
13432: AND
13433: PUSH
13434: LD_EXP 16
13438: AND
13439: IFFALSE 13455
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
13441: LD_ADDR_EXP 17
13445: PUSH
13446: LD_EXP 17
13450: PUSH
13451: LD_INT 1
13453: PLUS
13454: ST_TO_ADDR
// end ;
13455: PPOPN 2
13457: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase then
13458: LD_EXP 18
13462: NOT
13463: IFFALSE 13479
// Dial_NewCrates ( x , y ) ;
13465: LD_VAR 0 2
13469: PPUSH
13470: LD_VAR 0 3
13474: PPUSH
13475: CALL 7452 0 2
// end ;
13479: PPOPN 5
13481: END
// on Command ( com ) do var i , j , temp , order , destiny ;
13482: LD_INT 0
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
13489: LD_ADDR_VAR 0 2
13493: PUSH
13494: LD_INT 22
13496: PUSH
13497: LD_INT 3
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 21
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PPUSH
13518: CALL_OW 69
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13671
// if GetTaskList ( i ) > 0 then
13526: LD_VAR 0 2
13530: PPUSH
13531: CALL_OW 437
13535: PUSH
13536: LD_INT 0
13538: GREATER
13539: IFFALSE 13669
// for j = 1 to GetTaskList ( i ) do
13541: LD_ADDR_VAR 0 3
13545: PUSH
13546: DOUBLE
13547: LD_INT 1
13549: DEC
13550: ST_TO_ADDR
13551: LD_VAR 0 2
13555: PPUSH
13556: CALL_OW 437
13560: PUSH
13561: FOR_TO
13562: IFFALSE 13667
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
13564: LD_ADDR_VAR 0 4
13568: PUSH
13569: LD_VAR 0 2
13573: PPUSH
13574: CALL_OW 437
13578: PUSH
13579: LD_VAR 0 3
13583: ARRAY
13584: PUSH
13585: LD_INT 4
13587: ARRAY
13588: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
13589: LD_VAR 0 4
13593: PUSH
13594: LD_INT 71
13596: EQUAL
13597: PUSH
13598: LD_VAR 0 4
13602: PPUSH
13603: CALL_OW 255
13607: PUSH
13608: LD_INT 6
13610: EQUAL
13611: PUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 437
13621: PUSH
13622: LD_VAR 0 3
13626: ARRAY
13627: PUSH
13628: LD_INT 1
13630: ARRAY
13631: PUSH
13632: LD_STRING e
13634: EQUAL
13635: AND
13636: PUSH
13637: LD_VAR 0 4
13641: PPUSH
13642: CALL_OW 247
13646: PUSH
13647: LD_INT 2
13649: EQUAL
13650: AND
13651: OR
13652: IFFALSE 13665
// SetTaskList ( i , [ ] ) ;
13654: LD_VAR 0 2
13658: PPUSH
13659: EMPTY
13660: PPUSH
13661: CALL_OW 446
// end ;
13665: GO 13561
13667: POP
13668: POP
13669: GO 13523
13671: POP
13672: POP
// destiny = [ ] ;
13673: LD_ADDR_VAR 0 6
13677: PUSH
13678: EMPTY
13679: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: LD_INT 22
13687: PUSH
13688: LD_INT 3
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 2
13697: PUSH
13698: LD_INT 21
13700: PUSH
13701: LD_INT 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 21
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: PUSH
13732: FOR_IN
13733: IFFALSE 13915
// if GetTaskList ( i ) > 0 then
13735: LD_VAR 0 2
13739: PPUSH
13740: CALL_OW 437
13744: PUSH
13745: LD_INT 0
13747: GREATER
13748: IFFALSE 13913
// for j = 1 to GetTaskList ( i ) do
13750: LD_ADDR_VAR 0 3
13754: PUSH
13755: DOUBLE
13756: LD_INT 1
13758: DEC
13759: ST_TO_ADDR
13760: LD_VAR 0 2
13764: PPUSH
13765: CALL_OW 437
13769: PUSH
13770: FOR_TO
13771: IFFALSE 13911
// begin order = GetTaskList ( i ) [ j ] [ 1 ] ;
13773: LD_ADDR_VAR 0 5
13777: PUSH
13778: LD_VAR 0 2
13782: PPUSH
13783: CALL_OW 437
13787: PUSH
13788: LD_VAR 0 3
13792: ARRAY
13793: PUSH
13794: LD_INT 1
13796: ARRAY
13797: ST_TO_ADDR
// destiny = destiny ^ GetTaskList ( i ) [ j ] [ 2 ] ;
13798: LD_ADDR_VAR 0 6
13802: PUSH
13803: LD_VAR 0 6
13807: PUSH
13808: LD_VAR 0 2
13812: PPUSH
13813: CALL_OW 437
13817: PUSH
13818: LD_VAR 0 3
13822: ARRAY
13823: PUSH
13824: LD_INT 2
13826: ARRAY
13827: ADD
13828: ST_TO_ADDR
// destiny = destiny ^ GetTaskList ( i ) [ j ] [ 3 ] ;
13829: LD_ADDR_VAR 0 6
13833: PUSH
13834: LD_VAR 0 6
13838: PUSH
13839: LD_VAR 0 2
13843: PPUSH
13844: CALL_OW 437
13848: PUSH
13849: LD_VAR 0 3
13853: ARRAY
13854: PUSH
13855: LD_INT 3
13857: ARRAY
13858: ADD
13859: ST_TO_ADDR
// if order = M and not InArea ( destiny [ 1 ] , destiny [ 2 ] , VisibleMapPartArea ) then
13860: LD_VAR 0 5
13864: PUSH
13865: LD_STRING M
13867: EQUAL
13868: PUSH
13869: LD_VAR 0 6
13873: PUSH
13874: LD_INT 1
13876: ARRAY
13877: PPUSH
13878: LD_VAR 0 6
13882: PUSH
13883: LD_INT 2
13885: ARRAY
13886: PPUSH
13887: LD_INT 7
13889: PPUSH
13890: CALL_OW 309
13894: NOT
13895: AND
13896: IFFALSE 13909
// SetTaskList ( i , [ ] ) ;
13898: LD_VAR 0 2
13902: PPUSH
13903: EMPTY
13904: PPUSH
13905: CALL_OW 446
// end ;
13909: GO 13770
13911: POP
13912: POP
13913: GO 13732
13915: POP
13916: POP
// end ;
13917: PPOPN 6
13919: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
13920: LD_VAR 0 1
13924: PPUSH
13925: CALL_OW 255
13929: PUSH
13930: LD_INT 1
13932: EQUAL
13933: PUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 247
13943: PUSH
13944: LD_INT 1
13946: EQUAL
13947: AND
13948: IFFALSE 14034
// begin if unit in trapTeam then
13950: LD_VAR 0 1
13954: PUSH
13955: LD_EXP 70
13959: IN
13960: IFFALSE 13978
// trapTeam = trapTeam diff unit ;
13962: LD_ADDR_EXP 70
13966: PUSH
13967: LD_EXP 70
13971: PUSH
13972: LD_VAR 0 1
13976: DIFF
13977: ST_TO_ADDR
// if unit in amLeftEngs then
13978: LD_VAR 0 1
13982: PUSH
13983: LD_EXP 75
13987: IN
13988: IFFALSE 14006
// amLeftEngs = amLeftEngs diff unit ;
13990: LD_ADDR_EXP 75
13994: PUSH
13995: LD_EXP 75
13999: PUSH
14000: LD_VAR 0 1
14004: DIFF
14005: ST_TO_ADDR
// if unit in amRightEngs then
14006: LD_VAR 0 1
14010: PUSH
14011: LD_EXP 76
14015: IN
14016: IFFALSE 14034
// amRightEngs = amRightEngs diff unit ;
14018: LD_ADDR_EXP 76
14022: PUSH
14023: LD_EXP 76
14027: PUSH
14028: LD_VAR 0 1
14032: DIFF
14033: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
14034: LD_VAR 0 1
14038: PPUSH
14039: CALL_OW 255
14043: PUSH
14044: LD_INT 6
14046: EQUAL
14047: PUSH
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 247
14057: PUSH
14058: LD_INT 1
14060: EQUAL
14061: AND
14062: IFFALSE 14092
// if unit in belkovTeam then
14064: LD_VAR 0 1
14068: PUSH
14069: LD_EXP 64
14073: IN
14074: IFFALSE 14092
// belkovTeam = belkovTeam diff unit ;
14076: LD_ADDR_EXP 64
14080: PUSH
14081: LD_EXP 64
14085: PUSH
14086: LD_VAR 0 1
14090: DIFF
14091: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
14092: LD_VAR 0 1
14096: PPUSH
14097: CALL_OW 255
14101: PUSH
14102: LD_INT 3
14104: EQUAL
14105: PUSH
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 247
14115: PUSH
14116: LD_INT 1
14118: EQUAL
14119: AND
14120: IFFALSE 14136
// lostComradesCounter = lostComradesCounter + 1 ;
14122: LD_ADDR_EXP 38
14126: PUSH
14127: LD_EXP 38
14131: PUSH
14132: LD_INT 1
14134: PLUS
14135: ST_TO_ADDR
// if unit = Burlak then
14136: LD_VAR 0 1
14140: PUSH
14141: LD_EXP 53
14145: EQUAL
14146: IFFALSE 14152
// BurlakIsDead ;
14148: CALL 15223 0 0
// if unit in platSoldiers then
14152: LD_VAR 0 1
14156: PUSH
14157: LD_EXP 68
14161: IN
14162: IFFALSE 14180
// platSoldiers = platSoldiers diff unit ;
14164: LD_ADDR_EXP 68
14168: PUSH
14169: LD_EXP 68
14173: PUSH
14174: LD_VAR 0 1
14178: DIFF
14179: ST_TO_ADDR
// end ;
14180: PPOPN 1
14182: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
14183: LD_VAR 0 1
14187: PPUSH
14188: CALL_OW 255
14192: PUSH
14193: LD_INT 1
14195: EQUAL
14196: PUSH
14197: LD_VAR 0 1
14201: PPUSH
14202: CALL_OW 247
14206: PUSH
14207: LD_INT 3
14209: EQUAL
14210: AND
14211: IFFALSE 14269
// begin if unit in leftBunkers then
14213: LD_VAR 0 1
14217: PUSH
14218: LD_EXP 71
14222: IN
14223: IFFALSE 14241
// leftBunkers = leftBunkers diff unit ;
14225: LD_ADDR_EXP 71
14229: PUSH
14230: LD_EXP 71
14234: PUSH
14235: LD_VAR 0 1
14239: DIFF
14240: ST_TO_ADDR
// if unit in rightBunkers then
14241: LD_VAR 0 1
14245: PUSH
14246: LD_EXP 72
14250: IN
14251: IFFALSE 14269
// rightBunkers = rightBunkers diff unit ;
14253: LD_ADDR_EXP 72
14257: PUSH
14258: LD_EXP 72
14262: PUSH
14263: LD_VAR 0 1
14267: DIFF
14268: ST_TO_ADDR
// end ; end ;
14269: PPOPN 1
14271: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
14272: LD_VAR 0 3
14276: PUSH
14277: LD_INT 1
14279: EQUAL
14280: IFFALSE 14290
// captureBelkovVehicle = true ;
14282: LD_ADDR_EXP 33
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// end ;
14290: PPOPN 4
14292: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
14293: LD_VAR 0 1
14297: PUSH
14298: LD_INT 3
14300: EQUAL
14301: PUSH
14302: LD_VAR 0 2
14306: PUSH
14307: LD_INT 6
14309: EQUAL
14310: AND
14311: IFFALSE 14317
// AttackComrades ;
14313: CALL 15238 0 0
// end ; end_of_file
14317: PPOPN 2
14319: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
14320: LD_EXP 15
14324: PUSH
14325: LD_INT 8
14327: PPUSH
14328: LD_INT 22
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 21
14340: PUSH
14341: LD_INT 1
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 71
14356: PUSH
14357: LD_INT 0
14359: EQUAL
14360: AND
14361: IFFALSE 14427
14363: GO 14365
14365: DISABLE
// begin enable ;
14366: ENABLE
// if not saveBelkovObjective then
14367: LD_EXP 31
14371: NOT
14372: IFFALSE 14417
// begin case Query ( QContMission ) of 1 :
14374: LD_STRING QContMission
14376: PPUSH
14377: CALL_OW 97
14381: PUSH
14382: LD_INT 1
14384: DOUBLE
14385: EQUAL
14386: IFTRUE 14390
14388: GO 14397
14390: POP
// begin FinishMission ;
14391: CALL 14428 0 0
// end ; 2 :
14395: GO 14417
14397: LD_INT 2
14399: DOUBLE
14400: EQUAL
14401: IFTRUE 14405
14403: GO 14416
14405: POP
// begin saveBelkovObjective = true ;
14406: LD_ADDR_EXP 31
14410: PUSH
14411: LD_INT 1
14413: ST_TO_ADDR
// end ; end ;
14414: GO 14417
14416: POP
// end ; if belkovSaved then
14417: LD_EXP 32
14421: IFFALSE 14427
// FinishMission ;
14423: CALL 14428 0 0
// end ;
14427: END
// function FinishMission ; begin
14428: LD_INT 0
14430: PPUSH
// SetRewards ;
14431: CALL 14452 0 0
// SavePlayerCharacters ;
14435: CALL 14742 0 0
// SaveGlobalVariables ;
14439: CALL 14946 0 0
// YouWin ;
14443: CALL_OW 103
// end ;
14447: LD_VAR 0 1
14451: RET
// function SetRewards ; begin
14452: LD_INT 0
14454: PPUSH
// case initiative of 1 :
14455: LD_EXP 37
14459: PUSH
14460: LD_INT 1
14462: DOUBLE
14463: EQUAL
14464: IFTRUE 14468
14466: GO 14481
14468: POP
// AddMedal ( Initiative , 1 ) ; 2 :
14469: LD_STRING Initiative
14471: PPUSH
14472: LD_INT 1
14474: PPUSH
14475: CALL_OW 101
14479: GO 14526
14481: LD_INT 2
14483: DOUBLE
14484: EQUAL
14485: IFTRUE 14489
14487: GO 14503
14489: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
14490: LD_STRING Initiative
14492: PPUSH
14493: LD_INT 2
14495: NEG
14496: PPUSH
14497: CALL_OW 101
14501: GO 14526
14503: LD_INT 3
14505: DOUBLE
14506: EQUAL
14507: IFTRUE 14511
14509: GO 14525
14511: POP
// AddMedal ( Initiative , - 1 ) ; end ;
14512: LD_STRING Initiative
14514: PPUSH
14515: LD_INT 1
14517: NEG
14518: PPUSH
14519: CALL_OW 101
14523: GO 14526
14525: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
14526: LD_EXP 32
14530: PUSH
14531: LD_EXP 55
14535: PPUSH
14536: CALL_OW 302
14540: PUSH
14541: LD_EXP 59
14545: PPUSH
14546: CALL_OW 302
14550: OR
14551: AND
14552: IFFALSE 14564
// AddMedal ( Belkov , 1 ) ;
14554: LD_STRING Belkov
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
14564: LD_EXP 32
14568: NOT
14569: PUSH
14570: LD_EXP 31
14574: NOT
14575: AND
14576: IFFALSE 14589
// AddMedal ( Belkov , - 1 ) ;
14578: LD_STRING Belkov
14580: PPUSH
14581: LD_INT 1
14583: NEG
14584: PPUSH
14585: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
14589: LD_EXP 32
14593: NOT
14594: PUSH
14595: LD_EXP 31
14599: AND
14600: IFFALSE 14613
// AddMedal ( Belkov , - 2 ) ;
14602: LD_STRING Belkov
14604: PPUSH
14605: LD_INT 2
14607: NEG
14608: PPUSH
14609: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
14613: LD_EXP 32
14617: PUSH
14618: LD_EXP 5
14622: PUSH
14623: LD_EXP 55
14627: PPUSH
14628: CALL_OW 301
14632: AND
14633: AND
14634: PUSH
14635: LD_EXP 5
14639: NOT
14640: PUSH
14641: LD_EXP 59
14645: PPUSH
14646: CALL_OW 301
14650: AND
14651: OR
14652: IFFALSE 14665
// AddMedal ( Belkov , - 2 ) ;
14654: LD_STRING Belkov
14656: PPUSH
14657: LD_INT 2
14659: NEG
14660: PPUSH
14661: CALL_OW 101
// if lostComradesCounter = 0 then
14665: LD_EXP 38
14669: PUSH
14670: LD_INT 0
14672: EQUAL
14673: IFFALSE 14687
// AddMedal ( NoLosses , 1 ) else
14675: LD_STRING NoLosses
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: CALL_OW 101
14685: GO 14697
// AddMedal ( NoLosses , 0 ) ;
14687: LD_STRING NoLosses
14689: PPUSH
14690: LD_INT 0
14692: PPUSH
14693: CALL_OW 101
// GiveMedals ( Main ) ;
14697: LD_STRING Main
14699: PPUSH
14700: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
14704: LD_INT 22
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 1
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PPUSH
14733: CALL_OW 43
// end ;
14737: LD_VAR 0 1
14741: RET
// function SavePlayerCharacters ; var othersYour ; begin
14742: LD_INT 0
14744: PPUSH
14745: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
14746: LD_EXP 53
14750: PPUSH
14751: LD_STRING Burlak
14753: PPUSH
14754: LD_INT 3
14756: PPUSH
14757: CALL 3587 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
14761: LD_EXP 54
14765: PPUSH
14766: LD_STRING Gnyevko
14768: PPUSH
14769: LD_INT 3
14771: PPUSH
14772: CALL 3587 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
14776: LD_EXP 61
14780: PPUSH
14781: LD_STRING Kovalyuk
14783: PPUSH
14784: LD_INT 3
14786: PPUSH
14787: CALL 3587 0 3
// if belkovReturn then
14791: LD_EXP 5
14795: IFFALSE 14814
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
14797: LD_EXP 55
14801: PPUSH
14802: LD_STRING Belkov
14804: PPUSH
14805: LD_INT 3
14807: PPUSH
14808: CALL 3587 0 3
14812: GO 14829
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
14814: LD_EXP 59
14818: PPUSH
14819: LD_STRING Belkov2
14821: PPUSH
14822: LD_INT 3
14824: PPUSH
14825: CALL 3587 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk ] ;
14829: LD_ADDR_VAR 0 2
14833: PUSH
14834: LD_INT 22
14836: PUSH
14837: LD_INT 3
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 21
14846: PUSH
14847: LD_INT 1
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PPUSH
14858: CALL_OW 69
14862: PUSH
14863: LD_EXP 53
14867: PUSH
14868: LD_EXP 54
14872: PUSH
14873: LD_EXP 55
14877: PUSH
14878: LD_EXP 59
14882: PUSH
14883: LD_EXP 61
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: DIFF
14895: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
14896: LD_VAR 0 2
14900: PPUSH
14901: LD_STRING other_survivors
14903: PPUSH
14904: LD_INT 3
14906: PPUSH
14907: CALL 3643 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
14911: LD_EXP 68
14915: PPUSH
14916: LD_STRING other_beria
14918: PPUSH
14919: LD_INT 6
14921: PPUSH
14922: CALL 3643 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
14926: LD_EXP 60
14930: PPUSH
14931: LD_STRING other_kirov
14933: PPUSH
14934: LD_INT 6
14936: PPUSH
14937: CALL 3643 0 3
// end ;
14941: LD_VAR 0 1
14945: RET
// function SaveGlobalVariables ; var vehicles ; begin
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
14950: LD_ADDR_VAR 0 2
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_INT 3
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 21
14967: PUSH
14968: LD_INT 2
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 50
14977: PUSH
14978: EMPTY
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL_OW 69
14990: ST_TO_ADDR
// if vehicles then
14991: LD_VAR 0 2
14995: IFFALSE 15009
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
14997: LD_VAR 0 2
15001: PPUSH
15002: LD_STRING 02_Vehicles_1
15004: PPUSH
15005: CALL 4547 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
15009: LD_INT 8
15011: PPUSH
15012: LD_INT 22
15014: PUSH
15015: LD_INT 6
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: LD_INT 21
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 70
15040: PPUSH
15041: LD_STRING 02_BeriaBase_2
15043: PPUSH
15044: CALL 4701 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
15048: LD_INT 9
15050: PPUSH
15051: LD_INT 22
15053: PUSH
15054: LD_INT 6
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 21
15063: PUSH
15064: LD_INT 3
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PPUSH
15075: CALL_OW 70
15079: PPUSH
15080: LD_STRING 02_KirovBase_3
15082: PPUSH
15083: CALL 4701 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_PlayerAmericanBuildings_4 ) ;
15087: LD_INT 22
15089: PUSH
15090: LD_INT 3
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 21
15099: PUSH
15100: LD_INT 3
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 50
15109: PUSH
15110: EMPTY
15111: LIST
15112: PUSH
15113: LD_INT 23
15115: PUSH
15116: LD_INT 1
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: PPUSH
15134: LD_STRING 02_PlayerAmericanBuildings_4
15136: PPUSH
15137: CALL 4701 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBunkers_5 ) ;
15141: LD_INT 22
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 3
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 30
15163: PUSH
15164: LD_INT 31
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 50
15173: PUSH
15174: EMPTY
15175: LIST
15176: PUSH
15177: LD_INT 23
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 69
15198: PPUSH
15199: LD_STRING 02_AmericanBunkers_5
15201: PPUSH
15202: CALL 4701 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
15206: LD_EXP 4
15210: PPUSH
15211: LD_STRING 02_MeetBelkovBrother_6
15213: PPUSH
15214: CALL_OW 39
// end ; end_of_file
15218: LD_VAR 0 1
15222: RET
// export function BurlakIsDead ; begin
15223: LD_INT 0
15225: PPUSH
// YouLost ( Burlak ) ;
15226: LD_STRING Burlak
15228: PPUSH
15229: CALL_OW 104
// end ;
15233: LD_VAR 0 1
15237: RET
// export function AttackComrades ; begin
15238: LD_INT 0
15240: PPUSH
// YouLost ( SelfAttack ) ;
15241: LD_STRING SelfAttack
15243: PPUSH
15244: CALL_OW 104
// end ; end_of_file
15248: LD_VAR 0 1
15252: RET
// every 0 0$1 do var engs ;
15253: GO 15255
15255: DISABLE
15256: LD_INT 0
15258: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_EXP 60
15268: PPUSH
15269: LD_INT 25
15271: PUSH
15272: LD_INT 2
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 72
15283: ST_TO_ADDR
// AddComBuild ( engs , b_breastwork , 144 , 96 , 1 ) ;
15284: LD_VAR 0 1
15288: PPUSH
15289: LD_INT 31
15291: PPUSH
15292: LD_INT 144
15294: PPUSH
15295: LD_INT 96
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
15305: LD_VAR 0 1
15309: PPUSH
15310: LD_INT 31
15312: PPUSH
15313: LD_INT 146
15315: PPUSH
15316: LD_INT 107
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 180 , 118 , 5 ) ;
15326: LD_VAR 0 1
15330: PPUSH
15331: LD_INT 31
15333: PPUSH
15334: LD_INT 180
15336: PPUSH
15337: LD_INT 118
15339: PPUSH
15340: LD_INT 5
15342: PPUSH
15343: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
15347: LD_VAR 0 1
15351: PPUSH
15352: LD_INT 31
15354: PPUSH
15355: LD_INT 176
15357: PPUSH
15358: LD_INT 123
15360: PPUSH
15361: LD_INT 5
15363: PPUSH
15364: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
15368: LD_VAR 0 1
15372: PPUSH
15373: LD_INT 71
15375: PPUSH
15376: CALL_OW 180
// end ;
15380: PPOPN 1
15382: END
// every 0 0$1 trigger activateAMAI do
15383: LD_EXP 24
15387: IFFALSE 15411
15389: GO 15391
15391: DISABLE
// begin enable ;
15392: ENABLE
// RepairDamageLeftBunkers ;
15393: CALL 15412 0 0
// if Difficulty = 3 then
15397: LD_OWVAR 67
15401: PUSH
15402: LD_INT 3
15404: EQUAL
15405: IFFALSE 15411
// RepairDamageRightBunkers ;
15407: CALL 15491 0 0
// end ;
15411: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
15412: LD_INT 0
15414: PPUSH
15415: PPUSH
15416: PPUSH
// ComExitBuilding ( amLeftEngs ) ;
15417: LD_EXP 75
15421: PPUSH
15422: CALL_OW 122
// for bunker in leftBunkers do
15426: LD_ADDR_VAR 0 3
15430: PUSH
15431: LD_EXP 71
15435: PUSH
15436: FOR_IN
15437: IFFALSE 15470
// if GetLives ( bunker ) < 1000 then
15439: LD_VAR 0 3
15443: PPUSH
15444: CALL_OW 256
15448: PUSH
15449: LD_INT 1000
15451: LESS
15452: IFFALSE 15468
// AddComRepairBuilding ( amLeftEngs , bunker ) ;
15454: LD_EXP 75
15458: PPUSH
15459: LD_VAR 0 3
15463: PPUSH
15464: CALL_OW 190
15468: GO 15436
15470: POP
15471: POP
// AddComEnterUnit ( amLeftEngs , amLeftDepot ) ;
15472: LD_EXP 75
15476: PPUSH
15477: LD_EXP 73
15481: PPUSH
15482: CALL_OW 180
// end ;
15486: LD_VAR 0 1
15490: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
15491: LD_INT 0
15493: PPUSH
15494: PPUSH
15495: PPUSH
// ComExitBuilding ( amRightEngs ) ;
15496: LD_EXP 76
15500: PPUSH
15501: CALL_OW 122
// for bunker in rightBunkers do
15505: LD_ADDR_VAR 0 3
15509: PUSH
15510: LD_EXP 72
15514: PUSH
15515: FOR_IN
15516: IFFALSE 15549
// if GetLives ( bunker ) < 1000 then
15518: LD_VAR 0 3
15522: PPUSH
15523: CALL_OW 256
15527: PUSH
15528: LD_INT 1000
15530: LESS
15531: IFFALSE 15547
// AddComRepairBuilding ( amRightEngs , bunker ) ;
15533: LD_EXP 76
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: CALL_OW 190
15547: GO 15515
15549: POP
15550: POP
// AddComEnterUnit ( amRightEngs , amRightDepot ) ;
15551: LD_EXP 76
15555: PPUSH
15556: LD_EXP 74
15560: PPUSH
15561: CALL_OW 180
// end ; end_of_file
15565: LD_VAR 0 1
15569: RET
