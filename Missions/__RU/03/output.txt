// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 309 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 87
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 257: LD_ADDR_EXP 30
 261: PUSH
 262: EMPTY
 263: ST_TO_ADDR
// kirovFactory = 0 ;
 264: LD_ADDR_EXP 21
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// kirovCompleteFactory = false ;
 272: LD_ADDR_EXP 22
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// enableOmicronAI = true ;
 280: LD_ADDR_EXP 29
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// PrepareRussians ;
 288: CALL 932 0 0
// PrepareAmericans ;
 292: CALL 5401 0 0
// Nef_PrepareNature ;
 296: CALL 28722 0 0
// MissionIntro ;
 300: CALL 21192 0 0
// end ; end_of_file
 304: LD_VAR 0 1
 308: RET
// export function InitMapConfig ; begin
 309: LD_INT 0
 311: PPUSH
// BaseMapConfig ;
 312: CALL 325 0 0
// MissionMapConfig ;
 316: CALL 427 0 0
// end ;
 320: LD_VAR 0 1
 324: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 325: LD_INT 0
 327: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 328: LD_ADDR_EXP 31
 332: PUSH
 333: LD_INT 8
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: LD_INT 6
 341: PUSH
 342: LD_INT 6
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 355: LD_ADDR_EXP 32
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 378: LD_ADDR_EXP 33
 382: PUSH
 383: LD_INT 5
 385: NEG
 386: PPUSH
 387: LD_INT 5
 389: PPUSH
 390: CALL_OW 12
 394: PUSH
 395: EMPTY
 396: LIST
 397: ST_TO_ADDR
// debugMode = 0 ;
 398: LD_ADDR_EXP 36
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// missionPrefix = 03_ ;
 406: LD_ADDR_EXP 34
 410: PUSH
 411: LD_STRING 03_
 413: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 02_
 421: ST_TO_ADDR
// end ;
 422: LD_VAR 0 1
 426: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 427: LD_INT 0
 429: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 430: LD_ADDR_EXP 37
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 6
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 455: LD_ADDR_EXP 39
 459: PUSH
 460: LD_INT 84000
 462: PUSH
 463: LD_INT 73500
 465: PUSH
 466: LD_INT 63000
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_OWVAR 67
 478: ARRAY
 479: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 480: LD_ADDR_EXP 40
 484: PUSH
 485: LD_INT 150
 487: PUSH
 488: LD_INT 100
 490: PUSH
 491: LD_INT 50
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: LD_OWVAR 67
 503: ARRAY
 504: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 505: LD_ADDR_EXP 41
 509: PUSH
 510: LD_INT 100
 512: PUSH
 513: LD_INT 50
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_OWVAR 67
 528: ARRAY
 529: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 530: LD_ADDR_EXP 42
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: LD_INT 2
 540: PUSH
 541: LD_INT 2
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 45
 559: PUSH
 560: LD_INT 8
 562: PUSH
 563: LD_INT 6
 565: PUSH
 566: LD_INT 5
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 46
 584: PUSH
 585: LD_INT 17850
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 15750
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// end ;
 605: LD_VAR 0 1
 609: RET
// every 0 0$1 trigger debugMode do var i ;
 610: LD_EXP 36
 614: IFFALSE 929
 616: GO 618
 618: DISABLE
 619: LD_INT 0
 621: PPUSH
// begin enable ;
 622: ENABLE
// FogOff ( your_side ) ;
 623: LD_OWVAR 2
 627: PPUSH
 628: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 632: LD_ADDR_VAR 0 1
 636: PUSH
 637: LD_INT 22
 639: PUSH
 640: LD_OWVAR 2
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 21
 664: PUSH
 665: LD_INT 2
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PPUSH
 681: CALL_OW 69
 685: PUSH
 686: FOR_IN
 687: IFFALSE 703
// SetLives ( i , 1000 ) ;
 689: LD_VAR 0 1
 693: PPUSH
 694: LD_INT 1000
 696: PPUSH
 697: CALL_OW 234
 701: GO 686
 703: POP
 704: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 705: LD_ADDR_VAR 0 1
 709: PUSH
 710: LD_INT 22
 712: PUSH
 713: LD_OWVAR 2
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 21
 724: PUSH
 725: LD_INT 1
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PPUSH
 736: CALL_OW 69
 740: PUSH
 741: FOR_IN
 742: IFFALSE 806
// begin SetSkill ( i , skill_combat , 10 ) ;
 744: LD_VAR 0 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 10
 754: PPUSH
 755: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 759: LD_VAR 0 1
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: LD_INT 10
 769: PPUSH
 770: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 774: LD_VAR 0 1
 778: PPUSH
 779: LD_INT 3
 781: PPUSH
 782: LD_INT 10
 784: PPUSH
 785: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: LD_INT 10
 799: PPUSH
 800: CALL_OW 237
// end ;
 804: GO 741
 806: POP
 807: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 808: LD_ADDR_VAR 0 1
 812: PUSH
 813: LD_INT 22
 815: PUSH
 816: LD_OWVAR 2
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 2
 827: PUSH
 828: LD_INT 30
 830: PUSH
 831: LD_INT 0
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 30
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: CALL_OW 69
 861: PUSH
 862: FOR_IN
 863: IFFALSE 927
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 865: LD_VAR 0 1
 869: PPUSH
 870: CALL_OW 274
 874: PPUSH
 875: LD_INT 1
 877: PPUSH
 878: LD_INT 9999
 880: PPUSH
 881: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: CALL_OW 274
 894: PPUSH
 895: LD_INT 2
 897: PPUSH
 898: LD_INT 9999
 900: PPUSH
 901: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 905: LD_VAR 0 1
 909: PPUSH
 910: CALL_OW 274
 914: PPUSH
 915: LD_INT 3
 917: PPUSH
 918: LD_INT 9999
 920: PPUSH
 921: CALL_OW 277
// end ;
 925: GO 862
 927: POP
 928: POP
// end ; end_of_file
 929: PPOPN 1
 931: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 932: LD_INT 0
 934: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 935: LD_ADDR_EXP 79
 939: PUSH
 940: LD_INT 0
 942: PUSH
 943: LD_INT 0
 945: PUSH
 946: LD_INT 0
 948: PUSH
 949: LD_INT 0
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 958: LD_ADDR_EXP 73
 962: PUSH
 963: EMPTY
 964: ST_TO_ADDR
// PrepareKirovBase ;
 965: CALL 2021 0 0
// PrepareHeroes ;
 969: CALL 1002 0 0
// PrepareKirovPersonel ;
 973: CALL 2786 0 0
// PrepareBeriaBase ;
 977: CALL 1423 0 0
// PrepareSecondBaseTeam ;
 981: CALL 3929 0 0
// PrepareGrishko ;
 985: CALL 3114 0 0
// PrepareOtherBuildings ;
 989: CALL 3363 0 0
// PrepareVehicles ;
 993: CALL 3187 0 0
// end ;
 997: LD_VAR 0 1
1001: RET
// function PrepareHeroes ; begin
1002: LD_INT 0
1004: PPUSH
// uc_side = 3 ;
1005: LD_ADDR_OWVAR 20
1009: PUSH
1010: LD_INT 3
1012: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1013: LD_ADDR_EXP 47
1017: PUSH
1018: LD_STRING Burlak
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: CALL 6905 0 2
1028: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1029: LD_ADDR_EXP 48
1033: PUSH
1034: LD_STRING Gnyevko
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: CALL 6905 0 2
1044: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1045: LD_ADDR_EXP 50
1049: PUSH
1050: LD_STRING Kovalyuk
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6905 0 2
1060: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1061: LD_ADDR_EXP 49
1065: PUSH
1066: LD_STRING Kirilenkova
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL 6905 0 2
1076: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1077: LD_EXP 47
1081: PUSH
1082: LD_EXP 48
1086: PUSH
1087: LD_EXP 50
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PPUSH
1097: LD_INT 3
1099: PPUSH
1100: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1104: LD_EXP 49
1108: PPUSH
1109: LD_INT 4
1111: PPUSH
1112: CALL_OW 336
// uc_side = 6 ;
1116: LD_ADDR_OWVAR 20
1120: PUSH
1121: LD_INT 6
1123: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1124: LD_EXP 1
1128: NOT
1129: PUSH
1130: LD_STRING 02_Belkov
1132: PPUSH
1133: CALL_OW 28
1137: AND
1138: IFFALSE 1239
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1140: LD_ADDR_EXP 51
1144: PUSH
1145: LD_STRING Belkov
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: CALL 6905 0 2
1155: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1156: LD_STRING 02_Belkov2
1158: PPUSH
1159: CALL_OW 28
1163: IFFALSE 1202
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1165: LD_ADDR_EXP 52
1169: PUSH
1170: LD_STRING Belkov2
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL 6905 0 2
1180: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1181: LD_EXP 52
1185: PPUSH
1186: LD_INT 159
1188: PPUSH
1189: LD_INT 107
1191: PPUSH
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1202: LD_ADDR_EXP 61
1206: PUSH
1207: LD_EXP 51
1211: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1212: LD_EXP 51
1216: PPUSH
1217: LD_INT 165
1219: PPUSH
1220: LD_INT 110
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 48
// ComHold ( Belkov ) ;
1230: LD_EXP 51
1234: PPUSH
1235: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1239: LD_EXP 1
1243: PUSH
1244: LD_STRING 02_Belkov2
1246: PPUSH
1247: CALL_OW 28
1251: AND
1252: IFFALSE 1307
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1254: LD_ADDR_EXP 52
1258: PUSH
1259: LD_STRING Belkov2
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: CALL 6905 0 2
1269: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1270: LD_ADDR_EXP 61
1274: PUSH
1275: LD_EXP 52
1279: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1280: LD_EXP 52
1284: PPUSH
1285: LD_INT 165
1287: PPUSH
1288: LD_INT 110
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 48
// ComHold ( Belkov2 ) ;
1298: LD_EXP 52
1302: PPUSH
1303: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1307: LD_EXP 51
1311: PUSH
1312: LD_EXP 52
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: LD_INT 1
1323: PPUSH
1324: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1328: LD_EXP 47
1332: PPUSH
1333: LD_INT 164
1335: PPUSH
1336: LD_INT 108
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 48
// ComHold ( Burlak ) ;
1346: LD_EXP 47
1350: PPUSH
1351: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1355: LD_EXP 48
1359: PPUSH
1360: LD_INT 159
1362: PPUSH
1363: LD_INT 107
1365: PPUSH
1366: LD_INT 5
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1376: LD_EXP 50
1380: PPUSH
1381: LD_INT 159
1383: PPUSH
1384: LD_INT 107
1386: PPUSH
1387: LD_INT 5
1389: PPUSH
1390: LD_INT 0
1392: PPUSH
1393: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1397: LD_EXP 49
1401: PPUSH
1402: LD_INT 159
1404: PPUSH
1405: LD_INT 107
1407: PPUSH
1408: LD_INT 5
1410: PPUSH
1411: LD_INT 0
1413: PPUSH
1414: CALL_OW 50
// end ;
1418: LD_VAR 0 1
1422: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1423: LD_INT 0
1425: PPUSH
1426: PPUSH
1427: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1428: LD_ADDR_EXP 57
1432: PUSH
1433: LD_STRING 02_BeriaBase_2
1435: PPUSH
1436: EMPTY
1437: PPUSH
1438: CALL_OW 30
1442: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1443: LD_ADDR_EXP 56
1447: PUSH
1448: LD_STRING 02_other_beria
1450: PPUSH
1451: CALL_OW 31
1455: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1456: LD_ADDR_EXP 54
1460: PUSH
1461: LD_STRING 02_other_survivors
1463: PPUSH
1464: CALL_OW 31
1468: ST_TO_ADDR
// uc_side = 3 ;
1469: LD_ADDR_OWVAR 20
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// uc_nation = 3 ;
1477: LD_ADDR_OWVAR 21
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// for i := 1 to beriaBase do
1485: LD_ADDR_VAR 0 2
1489: PUSH
1490: DOUBLE
1491: LD_INT 1
1493: DEC
1494: ST_TO_ADDR
1495: LD_EXP 57
1499: PUSH
1500: FOR_TO
1501: IFFALSE 1754
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1503: LD_ADDR_OWVAR 42
1507: PUSH
1508: LD_EXP 57
1512: PUSH
1513: LD_VAR 0 2
1517: ARRAY
1518: PUSH
1519: LD_INT 1
1521: ARRAY
1522: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1523: LD_ADDR_OWVAR 43
1527: PUSH
1528: LD_EXP 57
1532: PUSH
1533: LD_VAR 0 2
1537: ARRAY
1538: PUSH
1539: LD_INT 5
1541: ARRAY
1542: ST_TO_ADDR
// if bc_type = b_lab then
1543: LD_OWVAR 42
1547: PUSH
1548: LD_INT 6
1550: EQUAL
1551: IFFALSE 1569
// begin bc_kind1 = b_lab_basic ;
1553: LD_ADDR_OWVAR 44
1557: PUSH
1558: LD_INT 9
1560: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1561: LD_ADDR_OWVAR 45
1565: PUSH
1566: LD_INT 9
1568: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1569: LD_OWVAR 42
1573: PUSH
1574: LD_INT 7
1576: EQUAL
1577: PUSH
1578: LD_OWVAR 42
1582: PUSH
1583: LD_INT 8
1585: EQUAL
1586: OR
1587: IFFALSE 1703
// begin if beriaBase [ i ] [ 7 ] then
1589: LD_EXP 57
1593: PUSH
1594: LD_VAR 0 2
1598: ARRAY
1599: PUSH
1600: LD_INT 7
1602: ARRAY
1603: IFFALSE 1625
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1605: LD_ADDR_OWVAR 44
1609: PUSH
1610: LD_EXP 57
1614: PUSH
1615: LD_VAR 0 2
1619: ARRAY
1620: PUSH
1621: LD_INT 7
1623: ARRAY
1624: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1625: LD_EXP 57
1629: PUSH
1630: LD_VAR 0 2
1634: ARRAY
1635: PUSH
1636: LD_INT 8
1638: ARRAY
1639: IFFALSE 1661
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1641: LD_ADDR_OWVAR 45
1645: PUSH
1646: LD_EXP 57
1650: PUSH
1651: LD_VAR 0 2
1655: ARRAY
1656: PUSH
1657: LD_INT 8
1659: ARRAY
1660: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1661: LD_EXP 57
1665: PUSH
1666: LD_VAR 0 2
1670: ARRAY
1671: PUSH
1672: LD_INT 7
1674: ARRAY
1675: NOT
1676: PUSH
1677: LD_EXP 57
1681: PUSH
1682: LD_VAR 0 2
1686: ARRAY
1687: PUSH
1688: LD_INT 8
1690: ARRAY
1691: NOT
1692: AND
1693: IFFALSE 1703
// bc_type := b_lab ;
1695: LD_ADDR_OWVAR 42
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1703: LD_EXP 57
1707: PUSH
1708: LD_VAR 0 2
1712: ARRAY
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PPUSH
1718: LD_EXP 57
1722: PUSH
1723: LD_VAR 0 2
1727: ARRAY
1728: PUSH
1729: LD_INT 3
1731: ARRAY
1732: PPUSH
1733: LD_EXP 57
1737: PUSH
1738: LD_VAR 0 2
1742: ARRAY
1743: PUSH
1744: LD_INT 4
1746: ARRAY
1747: PPUSH
1748: CALL_OW 47
// end ;
1752: GO 1500
1754: POP
1755: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1756: LD_ADDR_EXP 58
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 3
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 30
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_INT 1
1792: ARRAY
1793: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1794: LD_EXP 58
1798: PPUSH
1799: LD_STRING beria
1801: PPUSH
1802: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1806: LD_EXP 58
1810: PPUSH
1811: CALL_OW 274
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_EXP 2
1823: PPUSH
1824: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1828: LD_EXP 58
1832: PPUSH
1833: CALL_OW 274
1837: PPUSH
1838: LD_INT 2
1840: PPUSH
1841: LD_EXP 3
1845: PPUSH
1846: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1850: LD_EXP 58
1854: PPUSH
1855: CALL_OW 274
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_EXP 58
1867: PPUSH
1868: CALL_OW 274
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: CALL_OW 275
1880: PUSH
1881: LD_EXP 40
1885: PLUS
1886: PPUSH
1887: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1891: LD_EXP 58
1895: PPUSH
1896: CALL_OW 274
1900: PPUSH
1901: LD_INT 2
1903: PPUSH
1904: LD_EXP 58
1908: PPUSH
1909: CALL_OW 274
1913: PPUSH
1914: LD_INT 2
1916: PPUSH
1917: CALL_OW 275
1921: PUSH
1922: LD_EXP 41
1926: PLUS
1927: PPUSH
1928: CALL_OW 277
// uc_side = 6 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 6
1939: ST_TO_ADDR
// for i in otherBeriaUnits do
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: LD_EXP 56
1949: PUSH
1950: FOR_IN
1951: IFFALSE 1976
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 159
1960: PPUSH
1961: LD_INT 107
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 50
1974: GO 1950
1976: POP
1977: POP
// for i in other_survivors do
1978: LD_ADDR_VAR 0 2
1982: PUSH
1983: LD_EXP 54
1987: PUSH
1988: FOR_IN
1989: IFFALSE 2014
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 159
1998: PPUSH
1999: LD_INT 107
2001: PPUSH
2002: LD_INT 10
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 50
2012: GO 1988
2014: POP
2015: POP
// end ;
2016: LD_VAR 0 1
2020: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2021: LD_INT 0
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2027: LD_ADDR_EXP 64
2031: PUSH
2032: LD_STRING 02_KirovBase_3
2034: PPUSH
2035: EMPTY
2036: PPUSH
2037: CALL_OW 30
2041: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2042: LD_ADDR_EXP 63
2046: PUSH
2047: LD_STRING 02_other_kirov
2049: PPUSH
2050: CALL_OW 31
2054: ST_TO_ADDR
// uc_side = 6 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 6
2062: ST_TO_ADDR
// uc_nation = 3 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2071: LD_ADDR_EXP 59
2075: PUSH
2076: LD_STRING Kurin
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: CALL 6905 0 2
2086: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2087: LD_EXP 59
2091: PPUSH
2092: LD_INT 166
2094: PPUSH
2095: LD_INT 109
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: CALL_OW 48
// ComHold ( Kurin ) ;
2105: LD_EXP 59
2109: PPUSH
2110: CALL_OW 140
// for i := 1 to kirovBase do
2114: LD_ADDR_VAR 0 2
2118: PUSH
2119: DOUBLE
2120: LD_INT 1
2122: DEC
2123: ST_TO_ADDR
2124: LD_EXP 64
2128: PUSH
2129: FOR_TO
2130: IFFALSE 2568
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2132: LD_ADDR_OWVAR 42
2136: PUSH
2137: LD_EXP 64
2141: PUSH
2142: LD_VAR 0 2
2146: ARRAY
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2152: LD_ADDR_OWVAR 43
2156: PUSH
2157: LD_EXP 64
2161: PUSH
2162: LD_VAR 0 2
2166: ARRAY
2167: PUSH
2168: LD_INT 5
2170: ARRAY
2171: ST_TO_ADDR
// if bc_type = b_depot then
2172: LD_OWVAR 42
2176: PUSH
2177: LD_INT 0
2179: EQUAL
2180: IFFALSE 2190
// bc_type = b_warehouse ;
2182: LD_ADDR_OWVAR 42
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// if bc_type = b_armoury then
2190: LD_OWVAR 42
2194: PUSH
2195: LD_INT 4
2197: EQUAL
2198: IFFALSE 2208
// bc_type = b_barracks ;
2200: LD_ADDR_OWVAR 42
2204: PUSH
2205: LD_INT 5
2207: ST_TO_ADDR
// if bc_type = b_lab then
2208: LD_OWVAR 42
2212: PUSH
2213: LD_INT 6
2215: EQUAL
2216: IFFALSE 2234
// begin bc_kind1 = b_lab_weapon ;
2218: LD_ADDR_OWVAR 44
2222: PUSH
2223: LD_INT 10
2225: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2226: LD_ADDR_OWVAR 45
2230: PUSH
2231: LD_INT 9
2233: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2234: LD_OWVAR 42
2238: PUSH
2239: LD_INT 2
2241: EQUAL
2242: IFFALSE 2252
// bc_type = b_factory ;
2244: LD_ADDR_OWVAR 42
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2252: LD_OWVAR 42
2256: PUSH
2257: LD_INT 7
2259: EQUAL
2260: PUSH
2261: LD_OWVAR 42
2265: PUSH
2266: LD_INT 8
2268: EQUAL
2269: OR
2270: IFFALSE 2386
// begin if kirovBase [ i ] [ 7 ] then
2272: LD_EXP 64
2276: PUSH
2277: LD_VAR 0 2
2281: ARRAY
2282: PUSH
2283: LD_INT 7
2285: ARRAY
2286: IFFALSE 2308
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2288: LD_ADDR_OWVAR 44
2292: PUSH
2293: LD_EXP 64
2297: PUSH
2298: LD_VAR 0 2
2302: ARRAY
2303: PUSH
2304: LD_INT 7
2306: ARRAY
2307: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2308: LD_EXP 64
2312: PUSH
2313: LD_VAR 0 2
2317: ARRAY
2318: PUSH
2319: LD_INT 8
2321: ARRAY
2322: IFFALSE 2344
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2324: LD_ADDR_OWVAR 45
2328: PUSH
2329: LD_EXP 64
2333: PUSH
2334: LD_VAR 0 2
2338: ARRAY
2339: PUSH
2340: LD_INT 8
2342: ARRAY
2343: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2344: LD_EXP 64
2348: PUSH
2349: LD_VAR 0 2
2353: ARRAY
2354: PUSH
2355: LD_INT 7
2357: ARRAY
2358: NOT
2359: PUSH
2360: LD_EXP 64
2364: PUSH
2365: LD_VAR 0 2
2369: ARRAY
2370: PUSH
2371: LD_INT 8
2373: ARRAY
2374: NOT
2375: AND
2376: IFFALSE 2386
// bc_type := b_lab ;
2378: LD_ADDR_OWVAR 42
2382: PUSH
2383: LD_INT 6
2385: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2386: LD_OWVAR 42
2390: PUSH
2391: LD_INT 31
2393: EQUAL
2394: IFFALSE 2418
// begin bc_type = b_bunker ;
2396: LD_ADDR_OWVAR 42
2400: PUSH
2401: LD_INT 32
2403: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2404: LD_ADDR_EXP 75
2408: PUSH
2409: LD_EXP 75
2413: PUSH
2414: LD_INT 1
2416: PLUS
2417: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_EXP 64
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_EXP 64
2442: PUSH
2443: LD_VAR 0 2
2447: ARRAY
2448: PUSH
2449: LD_INT 3
2451: ARRAY
2452: PPUSH
2453: LD_EXP 64
2457: PUSH
2458: LD_VAR 0 2
2462: ARRAY
2463: PUSH
2464: LD_INT 4
2466: ARRAY
2467: PPUSH
2468: CALL_OW 47
2472: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 4
2480: LESS
2481: PUSH
2482: LD_OWVAR 42
2486: PUSH
2487: LD_INT 32
2489: EQUAL
2490: AND
2491: IFFALSE 2540
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_INT 42
2500: PUSH
2501: LD_INT 43
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 1
2510: PPUSH
2511: LD_INT 2
2513: PPUSH
2514: CALL_OW 12
2518: ARRAY
2519: PPUSH
2520: CALL_OW 431
// tmp = tmp + 1 ;
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 1
2536: PLUS
2537: ST_TO_ADDR
// end else
2538: GO 2566
// if bc_type = b_bunker then
2540: LD_OWVAR 42
2544: PUSH
2545: LD_INT 32
2547: EQUAL
2548: IFFALSE 2566
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2550: LD_ADDR_EXP 70
2554: PUSH
2555: LD_EXP 70
2559: PUSH
2560: LD_VAR 0 4
2564: ADD
2565: ST_TO_ADDR
// end ;
2566: GO 2129
2568: POP
2569: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2570: LD_ADDR_EXP 65
2574: PUSH
2575: LD_INT 22
2577: PUSH
2578: LD_INT 6
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 30
2587: PUSH
2588: LD_INT 1
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PPUSH
2599: CALL_OW 69
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2608: LD_EXP 65
2612: PPUSH
2613: LD_STRING kirov
2615: PPUSH
2616: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2620: LD_EXP 65
2624: PPUSH
2625: CALL_OW 274
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_INT 5000
2635: PPUSH
2636: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2640: LD_EXP 65
2644: PPUSH
2645: CALL_OW 274
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: LD_INT 2000
2655: PPUSH
2656: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2660: LD_ADDR_EXP 67
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 6
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 21
2677: PUSH
2678: LD_INT 3
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: PPUSH
2700: CALL_OW 69
2704: PPUSH
2705: LD_INT 145
2707: PPUSH
2708: LD_INT 102
2710: PPUSH
2711: CALL_OW 73
2715: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2716: LD_ADDR_EXP 68
2720: PUSH
2721: LD_INT 22
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 21
2733: PUSH
2734: LD_INT 3
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 30
2743: PUSH
2744: LD_INT 5
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: PUSH
2761: LD_EXP 67
2765: DIFF
2766: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2767: LD_ADDR_EXP 68
2771: PUSH
2772: LD_EXP 68
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// end ;
2781: LD_VAR 0 1
2785: RET
// export function PrepareKirovPersonel ; var i ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
// PrepareEngineer ( false , 7 ) ;
2790: LD_INT 0
2792: PPUSH
2793: LD_INT 7
2795: PPUSH
2796: CALL_OW 382
// kirovEng = CreateHuman ;
2800: LD_ADDR_EXP 69
2804: PUSH
2805: CALL_OW 44
2809: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2810: LD_EXP 69
2814: PPUSH
2815: LD_INT 159
2817: PPUSH
2818: LD_INT 107
2820: PPUSH
2821: LD_INT 10
2823: PPUSH
2824: LD_INT 0
2826: PPUSH
2827: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2831: LD_ADDR_EXP 60
2835: PUSH
2836: LD_STRING Popov
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: CALL 6905 0 2
2846: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2847: LD_EXP 60
2851: PPUSH
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2862: LD_EXP 60
2866: PPUSH
2867: LD_INT 98
2869: PPUSH
2870: LD_INT 36
2872: PPUSH
2873: CALL_OW 118
// hc_name :=  ;
2877: LD_ADDR_OWVAR 26
2881: PUSH
2882: LD_STRING 
2884: ST_TO_ADDR
// hc_gallery :=  ;
2885: LD_ADDR_OWVAR 33
2889: PUSH
2890: LD_STRING 
2892: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2893: LD_INT 0
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 381
// ruScout = CreateHuman ;
2903: LD_ADDR_EXP 62
2907: PUSH
2908: CALL_OW 44
2912: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2913: LD_EXP 62
2917: PPUSH
2918: LD_INT 3
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 49
// ComCrawl ( ruScout ) ;
2928: LD_EXP 62
2932: PPUSH
2933: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2937: LD_EXP 62
2941: PPUSH
2942: LD_INT 98
2944: PPUSH
2945: LD_INT 36
2947: PPUSH
2948: CALL_OW 178
// uc_side = 6 ;
2952: LD_ADDR_OWVAR 20
2956: PUSH
2957: LD_INT 6
2959: ST_TO_ADDR
// for i in otherKirovUnits do
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: LD_EXP 63
2969: PUSH
2970: FOR_IN
2971: IFFALSE 3107
// begin SetSide ( i , 6 ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: LD_INT 6
2980: PPUSH
2981: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2985: LD_VAR 0 2
2989: PPUSH
2990: CALL_OW 257
2994: PUSH
2995: LD_INT 1
2997: EQUAL
2998: PUSH
2999: LD_EXP 75
3003: PUSH
3004: LD_INT 0
3006: GREATER
3007: AND
3008: IFFALSE 3084
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3010: LD_VAR 0 2
3014: PPUSH
3015: LD_INT 18
3017: PPUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 6
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 21
3030: PUSH
3031: LD_INT 3
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 30
3040: PUSH
3041: LD_INT 32
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 70
3057: PUSH
3058: LD_EXP 75
3062: ARRAY
3063: PPUSH
3064: CALL 8349 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3068: LD_ADDR_EXP 75
3072: PUSH
3073: LD_EXP 75
3077: PUSH
3078: LD_INT 1
3080: MINUS
3081: ST_TO_ADDR
// end else
3082: GO 3105
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3084: LD_VAR 0 2
3088: PPUSH
3089: LD_INT 159
3091: PPUSH
3092: LD_INT 107
3094: PPUSH
3095: LD_INT 10
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 50
// end ; end ;
3105: GO 2970
3107: POP
3108: POP
// end ;
3109: LD_VAR 0 1
3113: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// uc_side = 6 ;
3120: LD_ADDR_OWVAR 20
3124: PUSH
3125: LD_INT 6
3127: ST_TO_ADDR
// uc_nation = 3 ;
3128: LD_ADDR_OWVAR 21
3132: PUSH
3133: LD_INT 3
3135: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3136: LD_ADDR_EXP 80
3140: PUSH
3141: LD_STRING Grishko
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL 6905 0 2
3151: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3152: LD_EXP 80
3156: PPUSH
3157: LD_INT 218
3159: PPUSH
3160: LD_INT 108
3162: PPUSH
3163: LD_INT 3
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: CALL_OW 50
// ComHold ( Grishko ) ;
3173: LD_EXP 80
3177: PPUSH
3178: CALL_OW 140
// end ;
3182: LD_VAR 0 1
3186: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3187: LD_INT 0
3189: PPUSH
3190: PPUSH
3191: PPUSH
// uc_side = 3 ;
3192: LD_ADDR_OWVAR 20
3196: PUSH
3197: LD_INT 3
3199: ST_TO_ADDR
// uc_nation = 3 ;
3200: LD_ADDR_OWVAR 21
3204: PUSH
3205: LD_INT 3
3207: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 4
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3356
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3226: LD_EXP 4
3230: PUSH
3231: LD_VAR 0 2
3235: ARRAY
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_EXP 4
3245: PUSH
3246: LD_VAR 0 2
3250: ARRAY
3251: PUSH
3252: LD_INT 2
3254: ARRAY
3255: PPUSH
3256: LD_EXP 4
3260: PUSH
3261: LD_VAR 0 2
3265: ARRAY
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PPUSH
3271: LD_EXP 4
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 4
3284: ARRAY
3285: PPUSH
3286: LD_EXP 4
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 5
3299: ARRAY
3300: PPUSH
3301: CALL 34357 0 5
// vehicle = CreateVehicle ;
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: CALL_OW 45
3314: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_INT 25
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3330: LD_VAR 0 3
3334: PPUSH
3335: LD_EXP 4
3339: PUSH
3340: LD_VAR 0 2
3344: ARRAY
3345: PUSH
3346: LD_INT 6
3348: ARRAY
3349: PPUSH
3350: CALL_OW 234
// end ;
3354: GO 3223
3356: POP
3357: POP
// end ;
3358: LD_VAR 0 1
3362: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3363: LD_INT 0
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3369: LD_ADDR_VAR 0 3
3373: PUSH
3374: LD_STRING 02_OtherBuildings_4
3376: PPUSH
3377: EMPTY
3378: PPUSH
3379: CALL_OW 30
3383: ST_TO_ADDR
// uc_side = 3 ;
3384: LD_ADDR_OWVAR 20
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// for i := 1 to otherBuildings do
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_VAR 0 3
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3669
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3410: LD_ADDR_OWVAR 21
3414: PUSH
3415: LD_VAR 0 3
3419: PUSH
3420: LD_VAR 0 2
3424: ARRAY
3425: PUSH
3426: LD_INT 6
3428: ARRAY
3429: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3430: LD_ADDR_OWVAR 42
3434: PUSH
3435: LD_VAR 0 3
3439: PUSH
3440: LD_VAR 0 2
3444: ARRAY
3445: PUSH
3446: LD_INT 1
3448: ARRAY
3449: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3450: LD_ADDR_OWVAR 43
3454: PUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_VAR 0 2
3464: ARRAY
3465: PUSH
3466: LD_INT 5
3468: ARRAY
3469: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3470: LD_ADDR_VAR 0 4
3474: PUSH
3475: LD_VAR 0 3
3479: PUSH
3480: LD_VAR 0 2
3484: ARRAY
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PPUSH
3490: LD_VAR 0 3
3494: PUSH
3495: LD_VAR 0 2
3499: ARRAY
3500: PUSH
3501: LD_INT 3
3503: ARRAY
3504: PPUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_VAR 0 2
3514: ARRAY
3515: PUSH
3516: LD_INT 4
3518: ARRAY
3519: PPUSH
3520: CALL_OW 47
3524: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3525: LD_VAR 0 4
3529: PPUSH
3530: LD_VAR 0 3
3534: PUSH
3535: LD_VAR 0 2
3539: ARRAY
3540: PUSH
3541: LD_INT 7
3543: ARRAY
3544: PPUSH
3545: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3549: LD_VAR 0 4
3553: PPUSH
3554: CALL_OW 266
3558: PUSH
3559: LD_INT 0
3561: PUSH
3562: LD_INT 1
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: IN
3569: IFFALSE 3667
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 274
3580: PPUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 3
3588: PUSH
3589: LD_VAR 0 2
3593: ARRAY
3594: PUSH
3595: LD_INT 8
3597: ARRAY
3598: PPUSH
3599: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3603: LD_VAR 0 4
3607: PPUSH
3608: CALL_OW 274
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_VAR 0 3
3620: PUSH
3621: LD_VAR 0 2
3625: ARRAY
3626: PUSH
3627: LD_INT 9
3629: ARRAY
3630: PPUSH
3631: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: CALL_OW 274
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_VAR 0 3
3652: PUSH
3653: LD_VAR 0 2
3657: ARRAY
3658: PUSH
3659: LD_INT 10
3661: ARRAY
3662: PPUSH
3663: CALL_OW 277
// end ; end ;
3667: GO 3407
3669: POP
3670: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: LD_STRING 02_AmericanBuildings_5
3678: PPUSH
3679: EMPTY
3680: PPUSH
3681: CALL_OW 30
3685: ST_TO_ADDR
// uc_side = 1 ;
3686: LD_ADDR_OWVAR 20
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// uc_nation = 1 ;
3694: LD_ADDR_OWVAR 21
3698: PUSH
3699: LD_INT 1
3701: ST_TO_ADDR
// for i := 1 to otherBuildings do
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_TO
3718: IFFALSE 3922
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3720: LD_ADDR_OWVAR 42
3724: PUSH
3725: LD_VAR 0 3
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PUSH
3736: LD_INT 1
3738: ARRAY
3739: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3740: LD_ADDR_OWVAR 43
3744: PUSH
3745: LD_VAR 0 3
3749: PUSH
3750: LD_VAR 0 2
3754: ARRAY
3755: PUSH
3756: LD_INT 5
3758: ARRAY
3759: ST_TO_ADDR
// if bc_type = b_breastwork then
3760: LD_OWVAR 42
3764: PUSH
3765: LD_INT 31
3767: EQUAL
3768: IFFALSE 3841
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3770: LD_ADDR_VAR 0 4
3774: PUSH
3775: LD_VAR 0 3
3779: PUSH
3780: LD_VAR 0 2
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_VAR 0 3
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PUSH
3801: LD_INT 3
3803: ARRAY
3804: PPUSH
3805: LD_VAR 0 3
3809: PUSH
3810: LD_VAR 0 2
3814: ARRAY
3815: PUSH
3816: LD_INT 4
3818: ARRAY
3819: PPUSH
3820: CALL_OW 47
3824: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3825: LD_EXP 42
3829: PPUSH
3830: LD_VAR 0 4
3834: PPUSH
3835: CALL 8439 0 2
// end else
3839: GO 3896
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3841: LD_ADDR_VAR 0 4
3845: PUSH
3846: LD_VAR 0 3
3850: PUSH
3851: LD_VAR 0 2
3855: ARRAY
3856: PUSH
3857: LD_INT 2
3859: ARRAY
3860: PPUSH
3861: LD_VAR 0 3
3865: PUSH
3866: LD_VAR 0 2
3870: ARRAY
3871: PUSH
3872: LD_INT 3
3874: ARRAY
3875: PPUSH
3876: LD_VAR 0 3
3880: PUSH
3881: LD_VAR 0 2
3885: ARRAY
3886: PUSH
3887: LD_INT 4
3889: ARRAY
3890: PPUSH
3891: CALL_OW 47
3895: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3896: LD_VAR 0 4
3900: PPUSH
3901: LD_VAR 0 3
3905: PUSH
3906: LD_VAR 0 2
3910: ARRAY
3911: PUSH
3912: LD_INT 7
3914: ARRAY
3915: PPUSH
3916: CALL_OW 234
// end ;
3920: GO 3717
3922: POP
3923: POP
// end ;
3924: LD_VAR 0 1
3928: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3929: LD_INT 0
3931: PPUSH
3932: PPUSH
// secondBaseTeam = [ ] ;
3933: LD_ADDR_EXP 76
3937: PUSH
3938: EMPTY
3939: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3940: LD_INT 226
3942: PPUSH
3943: LD_INT 109
3945: PPUSH
3946: LD_INT 6
3948: PPUSH
3949: CALL_OW 441
// uc_side = 6 ;
3953: LD_ADDR_OWVAR 20
3957: PUSH
3958: LD_INT 6
3960: ST_TO_ADDR
// uc_nation = 3 ;
3961: LD_ADDR_OWVAR 21
3965: PUSH
3966: LD_INT 3
3968: ST_TO_ADDR
// hc_name =  ;
3969: LD_ADDR_OWVAR 26
3973: PUSH
3974: LD_STRING 
3976: ST_TO_ADDR
// hc_gallery =  ;
3977: LD_ADDR_OWVAR 33
3981: PUSH
3982: LD_STRING 
3984: ST_TO_ADDR
// for i := 1 to 3 do
3985: LD_ADDR_VAR 0 2
3989: PUSH
3990: DOUBLE
3991: LD_INT 1
3993: DEC
3994: ST_TO_ADDR
3995: LD_INT 3
3997: PUSH
3998: FOR_TO
3999: IFFALSE 4052
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4001: LD_INT 0
4003: PPUSH
4004: LD_EXP 42
4008: PPUSH
4009: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4013: LD_ADDR_EXP 76
4017: PUSH
4018: LD_EXP 76
4022: PUSH
4023: CALL_OW 44
4027: ADD
4028: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4029: LD_EXP 76
4033: PUSH
4034: LD_VAR 0 2
4038: ARRAY
4039: PPUSH
4040: LD_INT 19
4042: PPUSH
4043: LD_INT 0
4045: PPUSH
4046: CALL_OW 49
// end ;
4050: GO 3998
4052: POP
4053: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4054: LD_INT 0
4056: PPUSH
4057: LD_EXP 42
4061: PPUSH
4062: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4066: LD_ADDR_EXP 76
4070: PUSH
4071: LD_EXP 76
4075: PUSH
4076: CALL_OW 44
4080: ADD
4081: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4082: LD_EXP 76
4086: PUSH
4087: LD_INT 4
4089: ARRAY
4090: PPUSH
4091: LD_INT 19
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4101: LD_INT 0
4103: PPUSH
4104: LD_EXP 42
4108: PPUSH
4109: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4113: LD_ADDR_EXP 76
4117: PUSH
4118: LD_EXP 76
4122: PUSH
4123: CALL_OW 44
4127: ADD
4128: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4129: LD_EXP 76
4133: PUSH
4134: LD_INT 5
4136: ARRAY
4137: PPUSH
4138: LD_INT 19
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4148: LD_EXP 76
4152: PPUSH
4153: LD_INT 214
4155: PPUSH
4156: LD_INT 105
4158: PPUSH
4159: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4163: LD_EXP 76
4167: PPUSH
4168: LD_INT 25
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: LD_INT 222
4188: PPUSH
4189: LD_INT 115
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4199: LD_EXP 76
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 2
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 224
4221: PPUSH
4222: LD_INT 107
4224: PPUSH
4225: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4229: LD_EXP 76
4233: PPUSH
4234: LD_INT 25
4236: PUSH
4237: LD_INT 2
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 72
4248: PPUSH
4249: LD_INT 228
4251: PPUSH
4252: LD_INT 110
4254: PPUSH
4255: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4259: LD_EXP 76
4263: PPUSH
4264: LD_INT 25
4266: PUSH
4267: LD_INT 2
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PPUSH
4274: CALL_OW 72
4278: PPUSH
4279: LD_INT 29
4281: PPUSH
4282: LD_INT 226
4284: PPUSH
4285: LD_INT 109
4287: PPUSH
4288: LD_INT 3
4290: PPUSH
4291: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4295: LD_EXP 76
4299: PPUSH
4300: LD_INT 25
4302: PUSH
4303: LD_INT 2
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 72
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: LD_INT 216
4320: PPUSH
4321: LD_INT 114
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4331: LD_EXP 76
4335: PPUSH
4336: LD_INT 25
4338: PUSH
4339: LD_INT 2
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PPUSH
4346: CALL_OW 72
4350: PPUSH
4351: LD_INT 31
4353: PPUSH
4354: LD_INT 215
4356: PPUSH
4357: LD_INT 103
4359: PPUSH
4360: LD_INT 3
4362: PPUSH
4363: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4367: LD_EXP 76
4371: PPUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 72
4386: PPUSH
4387: LD_INT 31
4389: PPUSH
4390: LD_INT 227
4392: PPUSH
4393: LD_INT 116
4395: PPUSH
4396: LD_INT 5
4398: PPUSH
4399: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4403: LD_EXP 76
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: PPUSH
4423: LD_INT 208
4425: PPUSH
4426: LD_INT 106
4428: PPUSH
4429: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4433: LD_EXP 76
4437: PPUSH
4438: LD_INT 25
4440: PUSH
4441: LD_INT 2
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PPUSH
4448: CALL_OW 72
4452: PPUSH
4453: LD_INT 209
4455: PPUSH
4456: LD_INT 105
4458: PPUSH
4459: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4463: LD_EXP 76
4467: PUSH
4468: LD_INT 5
4470: ARRAY
4471: PPUSH
4472: LD_INT 209
4474: PPUSH
4475: LD_INT 105
4477: PPUSH
4478: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4482: LD_EXP 76
4486: PUSH
4487: LD_INT 5
4489: ARRAY
4490: PPUSH
4491: LD_INT 208
4493: PPUSH
4494: LD_INT 106
4496: PPUSH
4497: CALL_OW 178
// end ;
4501: LD_VAR 0 1
4505: RET
// export function SpawnKirovSupport ; var i , un ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// uc_side = 6 ;
4511: LD_ADDR_OWVAR 20
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
// uc_nation = 3 ;
4519: LD_ADDR_OWVAR 21
4523: PUSH
4524: LD_INT 3
4526: ST_TO_ADDR
// hc_name =  ;
4527: LD_ADDR_OWVAR 26
4531: PUSH
4532: LD_STRING 
4534: ST_TO_ADDR
// hc_gallery :=  ;
4535: LD_ADDR_OWVAR 33
4539: PUSH
4540: LD_STRING 
4542: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: DOUBLE
4549: LD_INT 1
4551: DEC
4552: ST_TO_ADDR
4553: LD_EXP 78
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4647
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: CALL_OW 12
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: LD_INT 2
4580: PPUSH
4581: CALL_OW 12
4585: PPUSH
4586: CALL_OW 380
// un = CreateHuman ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: CALL_OW 44
4599: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4600: LD_ADDR_EXP 77
4604: PUSH
4605: LD_EXP 77
4609: PUSH
4610: LD_VAR 0 3
4614: ADD
4615: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_INT 19
4623: PPUSH
4624: LD_INT 0
4626: PPUSH
4627: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_EXP 67
4640: PPUSH
4641: CALL_OW 120
// end ;
4645: GO 4558
4647: POP
4648: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: DOUBLE
4655: LD_INT 1
4657: DEC
4658: ST_TO_ADDR
4659: LD_EXP 79
4663: PUSH
4664: LD_INT 1
4666: ARRAY
4667: PUSH
4668: LD_INT 4
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4771
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_INT 1
4683: PPUSH
4684: LD_INT 3
4686: PPUSH
4687: CALL_OW 12
4691: PPUSH
4692: CALL_OW 380
// un = CreateHuman ;
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: CALL_OW 44
4705: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: LD_INT 19
4713: PPUSH
4714: LD_INT 0
4716: PPUSH
4717: CALL_OW 49
// if i > kirovBunkersToOccupy then
4721: LD_VAR 0 2
4725: PUSH
4726: LD_EXP 71
4730: GREATER
4731: IFFALSE 4749
// ComEnterUnit ( un , ru2_bar2 ) else
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_EXP 68
4742: PPUSH
4743: CALL_OW 120
4747: GO 4769
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_EXP 71
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: CALL_OW 120
// end ;
4769: GO 4672
4771: POP
4772: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_EXP 79
4787: PUSH
4788: LD_INT 3
4790: ARRAY
4791: PUSH
4792: FOR_TO
4793: IFFALSE 4896
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4795: LD_INT 0
4797: PPUSH
4798: LD_INT 3
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: LD_INT 3
4806: PPUSH
4807: CALL_OW 12
4811: PPUSH
4812: CALL_OW 380
// un = CreateHuman ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: CALL_OW 44
4825: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4826: LD_VAR 0 3
4830: PPUSH
4831: LD_INT 19
4833: PPUSH
4834: LD_INT 0
4836: PPUSH
4837: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 6
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 30
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PPUSH
4881: CALL_OW 69
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: PPUSH
4890: CALL_OW 120
// end ;
4894: GO 4792
4896: POP
4897: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4898: LD_ADDR_VAR 0 2
4902: PUSH
4903: DOUBLE
4904: LD_INT 1
4906: DEC
4907: ST_TO_ADDR
4908: LD_EXP 79
4912: PUSH
4913: LD_INT 4
4915: ARRAY
4916: PUSH
4917: LD_INT 2
4919: PLUS
4920: PUSH
4921: FOR_TO
4922: IFFALSE 5028
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_INT 4
4929: PPUSH
4930: LD_INT 1
4932: PPUSH
4933: LD_INT 3
4935: PPUSH
4936: CALL_OW 12
4940: PPUSH
4941: CALL_OW 380
// un = CreateHuman ;
4945: LD_ADDR_VAR 0 3
4949: PUSH
4950: CALL_OW 44
4954: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4955: LD_VAR 0 3
4959: PPUSH
4960: LD_INT 19
4962: PPUSH
4963: LD_INT 0
4965: PPUSH
4966: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4970: LD_VAR 0 3
4974: PPUSH
4975: LD_INT 18
4977: PPUSH
4978: LD_INT 22
4980: PUSH
4981: LD_INT 6
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 21
4990: PUSH
4991: LD_INT 3
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 70
5017: PUSH
5018: LD_INT 1
5020: ARRAY
5021: PPUSH
5022: CALL_OW 120
// end ;
5026: GO 4921
5028: POP
5029: POP
// end ;
5030: LD_VAR 0 1
5034: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5035: LD_INT 0
5037: PPUSH
5038: PPUSH
5039: PPUSH
// survivorsArabianAttack = [ ] ;
5040: LD_ADDR_EXP 77
5044: PUSH
5045: EMPTY
5046: ST_TO_ADDR
// limit = 9 ;
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_INT 9
5054: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5055: LD_ADDR_EXP 77
5059: PUSH
5060: LD_EXP 77
5064: PUSH
5065: LD_EXP 60
5069: ADD
5070: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5071: LD_EXP 51
5075: PPUSH
5076: CALL_OW 302
5080: PUSH
5081: LD_EXP 51
5085: PPUSH
5086: CALL_OW 255
5090: PUSH
5091: LD_INT 6
5093: EQUAL
5094: AND
5095: IFFALSE 5127
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5097: LD_ADDR_EXP 77
5101: PUSH
5102: LD_EXP 77
5106: PUSH
5107: LD_EXP 51
5111: ADD
5112: ST_TO_ADDR
// limit = limit - 1 ;
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: LD_VAR 0 2
5122: PUSH
5123: LD_INT 1
5125: MINUS
5126: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5127: LD_EXP 52
5131: PPUSH
5132: CALL_OW 302
5136: PUSH
5137: LD_EXP 52
5141: PPUSH
5142: CALL_OW 255
5146: PUSH
5147: LD_INT 6
5149: EQUAL
5150: AND
5151: IFFALSE 5183
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5153: LD_ADDR_EXP 77
5157: PUSH
5158: LD_EXP 77
5162: PUSH
5163: LD_EXP 52
5167: ADD
5168: ST_TO_ADDR
// limit = limit - 1 ;
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_VAR 0 2
5178: PUSH
5179: LD_INT 1
5181: MINUS
5182: ST_TO_ADDR
// end ; for unit in other_survivors do
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: LD_EXP 54
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5254
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5196: LD_VAR 0 3
5200: PPUSH
5201: CALL_OW 302
5205: PUSH
5206: LD_VAR 0 3
5210: PPUSH
5211: CALL_OW 255
5215: PUSH
5216: LD_INT 6
5218: EQUAL
5219: AND
5220: IFFALSE 5252
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5222: LD_ADDR_EXP 77
5226: PUSH
5227: LD_EXP 77
5231: PUSH
5232: LD_VAR 0 3
5236: ADD
5237: ST_TO_ADDR
// limit = limit - 1 ;
5238: LD_ADDR_VAR 0 2
5242: PUSH
5243: LD_VAR 0 2
5247: PUSH
5248: LD_INT 1
5250: MINUS
5251: ST_TO_ADDR
// end ; end ;
5252: GO 5193
5254: POP
5255: POP
// for unit in otherBeriaUnits do
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: LD_EXP 56
5265: PUSH
5266: FOR_IN
5267: IFFALSE 5327
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL_OW 302
5278: PUSH
5279: LD_VAR 0 3
5283: PPUSH
5284: CALL_OW 255
5288: PUSH
5289: LD_INT 6
5291: EQUAL
5292: AND
5293: IFFALSE 5325
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5295: LD_ADDR_EXP 77
5299: PUSH
5300: LD_EXP 77
5304: PUSH
5305: LD_VAR 0 3
5309: ADD
5310: ST_TO_ADDR
// limit = limit - 1 ;
5311: LD_ADDR_VAR 0 2
5315: PUSH
5316: LD_VAR 0 2
5320: PUSH
5321: LD_INT 1
5323: MINUS
5324: ST_TO_ADDR
// end ; end ;
5325: GO 5266
5327: POP
5328: POP
// if limit > 0 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_INT 0
5336: GREATER
5337: IFFALSE 5349
// survivorsToSpawn = limit ;
5339: LD_ADDR_EXP 78
5343: PUSH
5344: LD_VAR 0 2
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 1
5353: RET
// export function PrepareScholtze ; begin
5354: LD_INT 0
5356: PPUSH
// uc_side = 8 ;
5357: LD_ADDR_OWVAR 20
5361: PUSH
5362: LD_INT 8
5364: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5365: LD_ADDR_EXP 53
5369: PUSH
5370: LD_STRING Scholtze
5372: PPUSH
5373: LD_INT 0
5375: PPUSH
5376: CALL 6905 0 2
5380: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5381: LD_EXP 53
5385: PPUSH
5386: LD_INT 30
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 49
// end ; end_of_file
5396: LD_VAR 0 1
5400: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5401: LD_INT 0
5403: PPUSH
// amSupportTroops = [ ] ;
5404: LD_ADDR_EXP 82
5408: PUSH
5409: EMPTY
5410: ST_TO_ADDR
// PrepareOmicronBase ;
5411: CALL 5420 0 0
// end ;
5415: LD_VAR 0 1
5419: RET
// function PrepareOmicronBase ; var base ; begin
5420: LD_INT 0
5422: PPUSH
5423: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5424: LD_ADDR_EXP 84
5428: PUSH
5429: LD_INT 64
5431: PPUSH
5432: LD_INT 13
5434: PPUSH
5435: LD_STRING omikron
5437: PPUSH
5438: LD_INT 1
5440: PUSH
5441: LD_INT 2
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PPUSH
5458: LD_INT 3000
5460: PUSH
5461: LD_INT 3000
5463: PUSH
5464: LD_INT 0
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: PPUSH
5472: LD_INT 7
5474: PUSH
5475: LD_INT 3
5477: PUSH
5478: LD_INT 4
5480: PUSH
5481: LD_INT 2
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL 37766 0 6
5494: ST_TO_ADDR
// case Difficulty of 2 :
5495: LD_OWVAR 67
5499: PUSH
5500: LD_INT 2
5502: DOUBLE
5503: EQUAL
5504: IFTRUE 5508
5506: GO 5524
5508: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5509: LD_INT 51
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: LD_INT 1
5517: PPUSH
5518: CALL_OW 322
// end ; 3 :
5522: GO 5562
5524: LD_INT 3
5526: DOUBLE
5527: EQUAL
5528: IFTRUE 5532
5530: GO 5561
5532: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5533: LD_INT 49
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5546: LD_INT 51
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: LD_INT 1
5554: PPUSH
5555: CALL_OW 322
// end ; end ;
5559: GO 5562
5561: POP
// end ;
5562: LD_VAR 0 1
5566: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// amIntroUnits = [ ] ;
5573: LD_ADDR_EXP 81
5577: PUSH
5578: EMPTY
5579: ST_TO_ADDR
// uc_side = 1 ;
5580: LD_ADDR_OWVAR 20
5584: PUSH
5585: LD_INT 1
5587: ST_TO_ADDR
// uc_nation = nation_american ;
5588: LD_ADDR_OWVAR 21
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5596: LD_ADDR_OWVAR 37
5600: PUSH
5601: LD_INT 3
5603: ST_TO_ADDR
// vc_control = control_manual ;
5604: LD_ADDR_OWVAR 38
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// vc_engine = engine_combustion ;
5612: LD_ADDR_OWVAR 39
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5620: LD_ADDR_OWVAR 40
5624: PUSH
5625: LD_INT 5
5627: ST_TO_ADDR
// veh = CreateVehicle ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 45
5637: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 4
5645: PPUSH
5646: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5650: LD_ADDR_EXP 81
5654: PUSH
5655: LD_EXP 81
5659: PUSH
5660: LD_VAR 0 3
5664: ADD
5665: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_INT 5
5673: PPUSH
5674: LD_INT 0
5676: PPUSH
5677: CALL_OW 49
// for i := 1 to 5 do
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: DOUBLE
5687: LD_INT 1
5689: DEC
5690: ST_TO_ADDR
5691: LD_INT 5
5693: PUSH
5694: FOR_TO
5695: IFFALSE 5792
// begin hc_name :=  ;
5697: LD_ADDR_OWVAR 26
5701: PUSH
5702: LD_STRING 
5704: ST_TO_ADDR
// hc_gallery :=  ;
5705: LD_ADDR_OWVAR 33
5709: PUSH
5710: LD_STRING 
5712: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 1
5718: PPUSH
5719: CALL_OW 381
// human = CreateHuman ;
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: CALL_OW 44
5732: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5733: LD_ADDR_EXP 81
5737: PUSH
5738: LD_EXP 81
5742: PUSH
5743: LD_VAR 0 4
5747: ADD
5748: ST_TO_ADDR
// if i < 5 then
5749: LD_VAR 0 2
5753: PUSH
5754: LD_INT 5
5756: LESS
5757: IFFALSE 5776
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5759: LD_VAR 0 4
5763: PPUSH
5764: LD_INT 5
5766: PPUSH
5767: LD_INT 0
5769: PPUSH
5770: CALL_OW 49
5774: GO 5790
// begin PlaceHumanInUnit ( human , veh ) ;
5776: LD_VAR 0 4
5780: PPUSH
5781: LD_VAR 0 3
5785: PPUSH
5786: CALL_OW 52
// end ; end ;
5790: GO 5694
5792: POP
5793: POP
// end ;
5794: LD_VAR 0 1
5798: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5799: LD_INT 0
5801: PPUSH
5802: PPUSH
5803: PPUSH
5804: PPUSH
5805: PPUSH
// uc_side := 1 ;
5806: LD_ADDR_OWVAR 20
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// uc_nation := 1 ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// hc_name :=  ;
5822: LD_ADDR_OWVAR 26
5826: PUSH
5827: LD_STRING 
5829: ST_TO_ADDR
// hc_gallery :=  ;
5830: LD_ADDR_OWVAR 33
5834: PUSH
5835: LD_STRING 
5837: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5838: LD_ADDR_VAR 0 6
5842: PUSH
5843: DOUBLE
5844: LD_INT 1
5846: DEC
5847: ST_TO_ADDR
5848: LD_VAR 0 1
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5913
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_EXP 42
5863: PPUSH
5864: CALL_OW 381
// un = CreateHuman ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: CALL_OW 44
5877: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5878: LD_ADDR_EXP 82
5882: PUSH
5883: LD_EXP 82
5887: PUSH
5888: LD_VAR 0 7
5892: ADD
5893: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5894: LD_VAR 0 7
5898: PPUSH
5899: LD_VAR 0 4
5903: PPUSH
5904: LD_INT 0
5906: PPUSH
5907: CALL_OW 49
// end ;
5911: GO 5853
5913: POP
5914: POP
// for i := 1 to scientistsAmount do
5915: LD_ADDR_VAR 0 6
5919: PUSH
5920: DOUBLE
5921: LD_INT 1
5923: DEC
5924: ST_TO_ADDR
5925: LD_VAR 0 2
5929: PUSH
5930: FOR_TO
5931: IFFALSE 5990
// begin PrepareScientist ( false , enemySkillLevel ) ;
5933: LD_INT 0
5935: PPUSH
5936: LD_EXP 42
5940: PPUSH
5941: CALL_OW 384
// un = CreateHuman ;
5945: LD_ADDR_VAR 0 7
5949: PUSH
5950: CALL_OW 44
5954: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5955: LD_ADDR_EXP 82
5959: PUSH
5960: LD_EXP 82
5964: PUSH
5965: LD_VAR 0 7
5969: ADD
5970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5971: LD_VAR 0 7
5975: PPUSH
5976: LD_VAR 0 4
5980: PPUSH
5981: LD_INT 0
5983: PPUSH
5984: CALL_OW 49
// end ;
5988: GO 5930
5990: POP
5991: POP
// for i := 1 to vehiclesAmount do
5992: LD_ADDR_VAR 0 6
5996: PUSH
5997: DOUBLE
5998: LD_INT 1
6000: DEC
6001: ST_TO_ADDR
6002: LD_VAR 0 3
6006: PUSH
6007: FOR_TO
6008: IFFALSE 6174
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6010: LD_ADDR_OWVAR 40
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 4
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 1
6031: PPUSH
6032: LD_INT 3
6034: PPUSH
6035: CALL_OW 12
6039: ARRAY
6040: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6041: LD_ADDR_OWVAR 37
6045: PUSH
6046: LD_INT 3
6048: ST_TO_ADDR
// vc_control = control_manual ;
6049: LD_ADDR_OWVAR 38
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
// vc_engine = engine_combustion ;
6057: LD_ADDR_OWVAR 39
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// veh = CreateVehicle ;
6065: LD_ADDR_VAR 0 8
6069: PUSH
6070: CALL_OW 45
6074: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6075: LD_ADDR_EXP 82
6079: PUSH
6080: LD_EXP 82
6084: PUSH
6085: LD_VAR 0 8
6089: ADD
6090: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6091: LD_VAR 0 8
6095: PPUSH
6096: LD_VAR 0 4
6100: PPUSH
6101: LD_INT 0
6103: PPUSH
6104: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6108: LD_INT 0
6110: PPUSH
6111: LD_EXP 42
6115: PPUSH
6116: CALL_OW 383
// un = CreateHuman ;
6120: LD_ADDR_VAR 0 7
6124: PUSH
6125: CALL_OW 44
6129: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6130: LD_ADDR_EXP 82
6134: PUSH
6135: LD_EXP 82
6139: PUSH
6140: LD_VAR 0 7
6144: ADD
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 8
6155: PPUSH
6156: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6160: LD_VAR 0 8
6164: PPUSH
6165: LD_INT 100
6167: PPUSH
6168: CALL_OW 240
// end ;
6172: GO 6007
6174: POP
6175: POP
// case area of NorthAmericanSpawnArea :
6176: LD_VAR 0 4
6180: PUSH
6181: LD_INT 7
6183: DOUBLE
6184: EQUAL
6185: IFTRUE 6189
6187: GO 6200
6189: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6190: LD_ADDR_VAR 0 9
6194: PUSH
6195: LD_INT 10
6197: ST_TO_ADDR
6198: GO 6239
6200: LD_INT 9
6202: DOUBLE
6203: EQUAL
6204: IFTRUE 6208
6206: GO 6219
6208: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6209: LD_ADDR_VAR 0 9
6213: PUSH
6214: LD_INT 11
6216: ST_TO_ADDR
6217: GO 6239
6219: LD_INT 8
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6227
6225: GO 6238
6227: POP
// road = SouthRoadArea2 ; end ;
6228: LD_ADDR_VAR 0 9
6232: PUSH
6233: LD_INT 12
6235: ST_TO_ADDR
6236: GO 6239
6238: POP
// MoveToBase ( amSupportTroops , road ) ;
6239: LD_EXP 82
6243: PPUSH
6244: LD_VAR 0 9
6248: PPUSH
6249: CALL 18364 0 2
// end ;
6253: LD_VAR 0 5
6257: RET
// export function PrepareAmericanPatrol ; var un ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
// amPatrol = [ ] ;
6262: LD_ADDR_EXP 83
6266: PUSH
6267: EMPTY
6268: ST_TO_ADDR
// uc_side = 1 ;
6269: LD_ADDR_OWVAR 20
6273: PUSH
6274: LD_INT 1
6276: ST_TO_ADDR
// uc_nation = 1 ;
6277: LD_ADDR_OWVAR 21
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6285: LD_ADDR_VAR 0 2
6289: PUSH
6290: LD_STRING Campell
6292: PPUSH
6293: LD_INT 0
6295: PPUSH
6296: CALL 6905 0 2
6300: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6301: LD_ADDR_EXP 83
6305: PUSH
6306: LD_EXP 83
6310: PUSH
6311: LD_VAR 0 2
6315: ADD
6316: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 14
6324: PPUSH
6325: LD_INT 0
6327: PPUSH
6328: CALL_OW 49
// SetClass ( un , 1 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 1
6339: PPUSH
6340: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6344: LD_INT 1
6346: PPUSH
6347: LD_EXP 42
6351: PPUSH
6352: CALL_OW 381
// un = CreateHuman ;
6356: LD_ADDR_VAR 0 2
6360: PUSH
6361: CALL_OW 44
6365: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6366: LD_ADDR_EXP 83
6370: PUSH
6371: LD_EXP 83
6375: PUSH
6376: LD_VAR 0 2
6380: ADD
6381: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 14
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6397: LD_EXP 83
6401: PPUSH
6402: LD_EXP 53
6406: PPUSH
6407: CALL_OW 115
// end ; end_of_file
6411: LD_VAR 0 1
6415: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6416: LD_INT 0
6418: PPUSH
6419: PPUSH
6420: PPUSH
6421: PPUSH
// northGroup = [ ] ;
6422: LD_ADDR_EXP 85
6426: PUSH
6427: EMPTY
6428: ST_TO_ADDR
// southGroup = [ ] ;
6429: LD_ADDR_EXP 86
6433: PUSH
6434: EMPTY
6435: ST_TO_ADDR
// uc_side = 2 ;
6436: LD_ADDR_OWVAR 20
6440: PUSH
6441: LD_INT 2
6443: ST_TO_ADDR
// uc_nation = 2 ;
6444: LD_ADDR_OWVAR 21
6448: PUSH
6449: LD_INT 2
6451: ST_TO_ADDR
// hc_name :=  ;
6452: LD_ADDR_OWVAR 26
6456: PUSH
6457: LD_STRING 
6459: ST_TO_ADDR
// hc_gallery :=  ;
6460: LD_ADDR_OWVAR 33
6464: PUSH
6465: LD_STRING 
6467: ST_TO_ADDR
// for i := 1 to 10 do
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: DOUBLE
6474: LD_INT 1
6476: DEC
6477: ST_TO_ADDR
6478: LD_INT 10
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6596
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6484: LD_INT 13
6486: PPUSH
6487: LD_INT 1
6489: PPUSH
6490: LD_INT 1
6492: PPUSH
6493: LD_INT 26
6495: PPUSH
6496: LD_INT 100
6498: PPUSH
6499: CALL 34357 0 5
// veh = CreateVehicle ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: CALL_OW 45
6512: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6513: LD_ADDR_EXP 86
6517: PUSH
6518: LD_EXP 86
6522: PUSH
6523: LD_VAR 0 4
6527: ADD
6528: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6529: LD_VAR 0 4
6533: PPUSH
6534: LD_INT 23
6536: PPUSH
6537: LD_INT 0
6539: PPUSH
6540: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6544: LD_INT 0
6546: PPUSH
6547: LD_INT 8
6549: PPUSH
6550: CALL_OW 383
// un = CreateHuman ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: CALL_OW 44
6563: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6564: LD_ADDR_EXP 86
6568: PUSH
6569: LD_EXP 86
6573: PUSH
6574: LD_VAR 0 3
6578: ADD
6579: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 52
// end ;
6594: GO 6481
6596: POP
6597: POP
// for i := 1 to 20 do
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: DOUBLE
6604: LD_INT 1
6606: DEC
6607: ST_TO_ADDR
6608: LD_INT 20
6610: PUSH
6611: FOR_TO
6612: IFFALSE 6667
// begin PrepareSoldier ( false , 8 ) ;
6614: LD_INT 0
6616: PPUSH
6617: LD_INT 8
6619: PPUSH
6620: CALL_OW 381
// un = CreateHuman ;
6624: LD_ADDR_VAR 0 3
6628: PUSH
6629: CALL_OW 44
6633: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6634: LD_ADDR_EXP 86
6638: PUSH
6639: LD_EXP 86
6643: PUSH
6644: LD_VAR 0 3
6648: ADD
6649: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6650: LD_VAR 0 3
6654: PPUSH
6655: LD_INT 23
6657: PPUSH
6658: LD_INT 0
6660: PPUSH
6661: CALL_OW 49
// end ;
6665: GO 6611
6667: POP
6668: POP
// for i := 1 to 20 do
6669: LD_ADDR_VAR 0 2
6673: PUSH
6674: DOUBLE
6675: LD_INT 1
6677: DEC
6678: ST_TO_ADDR
6679: LD_INT 20
6681: PUSH
6682: FOR_TO
6683: IFFALSE 6741
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6685: LD_INT 0
6687: PPUSH
6688: LD_INT 8
6690: PPUSH
6691: LD_INT 8
6693: PPUSH
6694: CALL_OW 380
// un = CreateHuman ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: CALL_OW 44
6707: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6708: LD_ADDR_EXP 86
6712: PUSH
6713: LD_EXP 86
6717: PUSH
6718: LD_VAR 0 3
6722: ADD
6723: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6724: LD_VAR 0 3
6728: PPUSH
6729: LD_INT 23
6731: PPUSH
6732: LD_INT 0
6734: PPUSH
6735: CALL_OW 49
// end ;
6739: GO 6682
6741: POP
6742: POP
// for i := 1 to 10 do
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_INT 10
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6898
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6759: LD_INT 13
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: LD_INT 25
6770: PUSH
6771: LD_INT 27
6773: PUSH
6774: LD_INT 23
6776: PUSH
6777: LD_INT 26
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 1
6788: PPUSH
6789: LD_INT 4
6791: PPUSH
6792: CALL_OW 12
6796: ARRAY
6797: PPUSH
6798: LD_INT 100
6800: PPUSH
6801: CALL 34357 0 5
// veh = CreateVehicle ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: CALL_OW 45
6814: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6815: LD_ADDR_EXP 85
6819: PUSH
6820: LD_EXP 85
6824: PUSH
6825: LD_VAR 0 4
6829: ADD
6830: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6831: LD_VAR 0 4
6835: PPUSH
6836: LD_INT 22
6838: PPUSH
6839: LD_INT 0
6841: PPUSH
6842: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6846: LD_INT 0
6848: PPUSH
6849: LD_INT 8
6851: PPUSH
6852: CALL_OW 383
// un = CreateHuman ;
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: CALL_OW 44
6865: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6866: LD_ADDR_EXP 85
6870: PUSH
6871: LD_EXP 85
6875: PUSH
6876: LD_VAR 0 3
6880: ADD
6881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6882: LD_VAR 0 3
6886: PPUSH
6887: LD_VAR 0 4
6891: PPUSH
6892: CALL_OW 52
// end ;
6896: GO 6756
6898: POP
6899: POP
// end ; end_of_file
6900: LD_VAR 0 1
6904: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6905: LD_INT 0
6907: PPUSH
6908: PPUSH
// if exist_mode then
6909: LD_VAR 0 2
6913: IFFALSE 6938
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6915: LD_ADDR_VAR 0 4
6919: PUSH
6920: LD_EXP 35
6924: PUSH
6925: LD_VAR 0 1
6929: STR
6930: PPUSH
6931: CALL_OW 34
6935: ST_TO_ADDR
6936: GO 6953
// unit := NewCharacter ( ident ) ;
6938: LD_ADDR_VAR 0 4
6942: PUSH
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL_OW 25
6952: ST_TO_ADDR
// result := unit ;
6953: LD_ADDR_VAR 0 3
6957: PUSH
6958: LD_VAR 0 4
6962: ST_TO_ADDR
// end ;
6963: LD_VAR 0 3
6967: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
// units = characters ;
6974: LD_ADDR_VAR 0 9
6978: PUSH
6979: LD_VAR 0 1
6983: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6984: LD_ADDR_VAR 0 9
6988: PUSH
6989: LD_VAR 0 9
6993: PUSH
6994: LD_EXP 47
6998: PUSH
6999: LD_EXP 48
7003: PUSH
7004: LD_EXP 49
7008: PUSH
7009: LD_EXP 50
7013: PUSH
7014: LD_EXP 51
7018: PUSH
7019: LD_EXP 52
7023: PUSH
7024: LD_EXP 53
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: DIFF
7038: ST_TO_ADDR
// if not units and not canTalkHero then
7039: LD_VAR 0 9
7043: NOT
7044: PUSH
7045: LD_VAR 0 5
7049: NOT
7050: AND
7051: IFFALSE 7055
// exit ;
7053: GO 7228
// if not units then
7055: LD_VAR 0 9
7059: NOT
7060: IFFALSE 7081
// units = characters diff [ Burlak ] ;
7062: LD_ADDR_VAR 0 9
7066: PUSH
7067: LD_VAR 0 1
7071: PUSH
7072: LD_EXP 47
7076: PUSH
7077: EMPTY
7078: LIST
7079: DIFF
7080: ST_TO_ADDR
// if not units and canTalkHero then
7081: LD_VAR 0 9
7085: NOT
7086: PUSH
7087: LD_VAR 0 5
7091: AND
7092: IFFALSE 7096
// exit ;
7094: GO 7228
// speaker := units [ rand ( 1 , units ) ] ;
7096: LD_ADDR_VAR 0 8
7100: PUSH
7101: LD_VAR 0 9
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 9
7113: PPUSH
7114: CALL_OW 12
7118: ARRAY
7119: ST_TO_ADDR
// if radio then
7120: LD_VAR 0 4
7124: IFFALSE 7173
// begin if GetSex ( speaker ) = sex_male then
7126: LD_VAR 0 8
7130: PPUSH
7131: CALL_OW 258
7135: PUSH
7136: LD_INT 1
7138: EQUAL
7139: IFFALSE 7157
// SayRadio ( speaker , dialogMID ) else
7141: LD_VAR 0 8
7145: PPUSH
7146: LD_VAR 0 2
7150: PPUSH
7151: CALL_OW 94
7155: GO 7171
// SayRadio ( speaker , dialogFID ) ;
7157: LD_VAR 0 8
7161: PPUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: CALL_OW 94
// end else
7171: GO 7218
// begin if GetSex ( speaker ) = sex_male then
7173: LD_VAR 0 8
7177: PPUSH
7178: CALL_OW 258
7182: PUSH
7183: LD_INT 1
7185: EQUAL
7186: IFFALSE 7204
// Say ( speaker , dialogMID ) else
7188: LD_VAR 0 8
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 88
7202: GO 7218
// Say ( speaker , dialogFID ) ;
7204: LD_VAR 0 8
7208: PPUSH
7209: LD_VAR 0 3
7213: PPUSH
7214: CALL_OW 88
// end ; result := speaker ;
7218: LD_ADDR_VAR 0 6
7222: PUSH
7223: LD_VAR 0 8
7227: ST_TO_ADDR
// end ;
7228: LD_VAR 0 6
7232: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7233: LD_INT 0
7235: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 255
7245: PUSH
7246: LD_VAR 0 3
7250: EQUAL
7251: PUSH
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 302
7261: AND
7262: IFFALSE 7284
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_EXP 34
7273: PUSH
7274: LD_VAR 0 2
7278: STR
7279: PPUSH
7280: CALL_OW 38
// end ;
7284: LD_VAR 0 4
7288: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
7293: PPUSH
// resultCharactersToSave = [ ] ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: EMPTY
7300: ST_TO_ADDR
// for unit in characters do
7301: LD_ADDR_VAR 0 5
7305: PUSH
7306: LD_VAR 0 1
7310: PUSH
7311: FOR_IN
7312: IFFALSE 7360
// if GetSide ( unit ) = side and IsOK ( unit ) then
7314: LD_VAR 0 5
7318: PPUSH
7319: CALL_OW 255
7323: PUSH
7324: LD_VAR 0 3
7328: EQUAL
7329: PUSH
7330: LD_VAR 0 5
7334: PPUSH
7335: CALL_OW 302
7339: AND
7340: IFFALSE 7358
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7342: LD_ADDR_VAR 0 6
7346: PUSH
7347: LD_VAR 0 6
7351: PUSH
7352: LD_VAR 0 5
7356: ADD
7357: ST_TO_ADDR
7358: GO 7311
7360: POP
7361: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7362: LD_VAR 0 6
7366: PPUSH
7367: LD_EXP 34
7371: PUSH
7372: LD_VAR 0 2
7376: STR
7377: PPUSH
7378: CALL_OW 38
// end ;
7382: LD_VAR 0 4
7386: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
// charsToChoose = otherKirovUnits ;
7393: LD_ADDR_VAR 0 4
7397: PUSH
7398: LD_EXP 63
7402: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7403: LD_ADDR_VAR 0 4
7407: PUSH
7408: LD_VAR 0 4
7412: PUSH
7413: LD_EXP 56
7417: ADD
7418: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_VAR 0 4
7428: PUSH
7429: LD_EXP 54
7433: ADD
7434: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7435: LD_ADDR_VAR 0 4
7439: PUSH
7440: LD_VAR 0 4
7444: PUSH
7445: LD_EXP 51
7449: ADD
7450: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7451: LD_ADDR_VAR 0 4
7455: PUSH
7456: LD_VAR 0 4
7460: PUSH
7461: LD_EXP 52
7465: ADD
7466: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7467: LD_ADDR_VAR 0 5
7471: PUSH
7472: LD_STRING text
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: LD_INT -5
7487: PUSH
7488: LD_EXP 47
7492: PUSH
7493: LD_EXP 48
7497: PUSH
7498: LD_EXP 50
7502: PUSH
7503: LD_EXP 49
7507: PUSH
7508: LD_INT -6
7510: PUSH
7511: LD_INT -2
7513: PUSH
7514: LD_INT -3
7516: PUSH
7517: LD_INT -5
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_VAR 0 4
7535: ADD
7536: PUSH
7537: LD_INT -6
7539: PUSH
7540: LD_INT -4
7542: PUSH
7543: LD_EXP 59
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: ADD
7553: PPUSH
7554: LD_INT 1
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: LD_INT 1
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 4
7572: PUSH
7573: LD_INT 1
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 42
7590: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7591: LD_VAR 0 4
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7603: LD_VAR 0 5
7607: PPUSH
7608: LD_INT 3
7610: PPUSH
7611: CALL_OW 235
// SetSurvivorsArabianAttack ;
7615: CALL 5035 0 0
// MoveKurinUnitsToBuildings ;
7619: CALL 9057 0 0
// end ;
7623: LD_VAR 0 2
7627: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7628: LD_INT 0
7630: PPUSH
7631: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7632: LD_ADDR_VAR 0 5
7636: PUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: LD_INT 22
7644: PUSH
7645: LD_VAR 0 2
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 21
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 30
7666: PUSH
7667: LD_VAR 0 3
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 70
7685: PUSH
7686: FOR_IN
7687: IFFALSE 7720
// begin if UnitsInside ( building ) < 6 then
7689: LD_VAR 0 5
7693: PPUSH
7694: CALL_OW 313
7698: PUSH
7699: LD_INT 6
7701: LESS
7702: IFFALSE 7718
// begin result = building ;
7704: LD_ADDR_VAR 0 4
7708: PUSH
7709: LD_VAR 0 5
7713: ST_TO_ADDR
// exit ;
7714: POP
7715: POP
7716: GO 7730
// end ; end ;
7718: GO 7686
7720: POP
7721: POP
// result = 0 ;
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: LD_INT 0
7729: ST_TO_ADDR
// end ;
7730: LD_VAR 0 4
7734: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7735: LD_INT 0
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7741: LD_ADDR_VAR 0 6
7745: PUSH
7746: LD_INT 34
7748: PUSH
7749: LD_INT 71
7751: PUSH
7752: LD_INT 70
7754: PUSH
7755: LD_INT 69
7757: PUSH
7758: LD_INT 39
7760: PUSH
7761: LD_INT 31
7763: PUSH
7764: LD_INT 14
7766: PUSH
7767: LD_INT 10
7769: PUSH
7770: LD_INT 40
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// resultWeapons = [ ] ;
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: EMPTY
7790: ST_TO_ADDR
// for i := 1 to weaponTechs do
7791: LD_ADDR_VAR 0 4
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 6
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7994
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7809: LD_VAR 0 6
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PPUSH
7820: LD_VAR 0 2
7824: PPUSH
7825: CALL_OW 482
7829: PUSH
7830: LD_VAR 0 6
7834: PUSH
7835: LD_VAR 0 4
7839: ARRAY
7840: PPUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 321
7850: PUSH
7851: LD_INT 2
7853: EQUAL
7854: AND
7855: IFFALSE 7992
// case nation of nation_american :
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 1
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7905
7870: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7871: LD_ADDR_VAR 0 5
7875: PUSH
7876: LD_VAR 0 5
7880: PUSH
7881: LD_VAR 0 6
7885: PUSH
7886: LD_VAR 0 4
7890: ARRAY
7891: PPUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL 8011 0 2
7901: ADD
7902: ST_TO_ADDR
7903: GO 7992
7905: LD_INT 2
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7948
7913: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7914: LD_ADDR_VAR 0 5
7918: PUSH
7919: LD_VAR 0 5
7923: PUSH
7924: LD_VAR 0 6
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PPUSH
7935: LD_VAR 0 2
7939: PPUSH
7940: CALL 8011 0 2
7944: ADD
7945: ST_TO_ADDR
7946: GO 7992
7948: LD_INT 3
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 7991
7956: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7957: LD_ADDR_VAR 0 5
7961: PUSH
7962: LD_VAR 0 5
7966: PUSH
7967: LD_VAR 0 6
7971: PUSH
7972: LD_VAR 0 4
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: CALL 8011 0 2
7987: ADD
7988: ST_TO_ADDR
7989: GO 7992
7991: POP
// end ;
7992: GO 7806
7994: POP
7995: POP
// result = resultWeapons ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: LD_VAR 0 5
8005: ST_TO_ADDR
// end ;
8006: LD_VAR 0 3
8010: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8011: LD_INT 0
8013: PPUSH
// case tech of tech_AdvMet :
8014: LD_VAR 0 1
8018: PUSH
8019: LD_INT 34
8021: DOUBLE
8022: EQUAL
8023: IFTRUE 8027
8025: GO 8055
8027: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8028: LD_ADDR_VAR 0 3
8032: PUSH
8033: LD_INT 6
8035: PUSH
8036: LD_STRING 
8038: PUSH
8039: LD_INT 46
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_VAR 0 2
8051: ARRAY
8052: ST_TO_ADDR
8053: GO 8344
8055: LD_INT 71
8057: DOUBLE
8058: EQUAL
8059: IFTRUE 8063
8061: GO 8091
8063: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_STRING 
8071: PUSH
8072: LD_STRING 
8074: PUSH
8075: LD_INT 47
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_VAR 0 2
8087: ARRAY
8088: ST_TO_ADDR
8089: GO 8344
8091: LD_INT 70
8093: DOUBLE
8094: EQUAL
8095: IFTRUE 8099
8097: GO 8127
8099: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: LD_STRING 
8107: PUSH
8108: LD_INT 26
8110: PUSH
8111: LD_STRING 
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: ST_TO_ADDR
8125: GO 8344
8127: LD_INT 69
8129: DOUBLE
8130: EQUAL
8131: IFTRUE 8135
8133: GO 8163
8135: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8136: LD_ADDR_VAR 0 3
8140: PUSH
8141: LD_INT 4
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 43
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_VAR 0 2
8159: ARRAY
8160: ST_TO_ADDR
8161: GO 8344
8163: LD_INT 39
8165: DOUBLE
8166: EQUAL
8167: IFTRUE 8171
8169: GO 8199
8171: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8172: LD_ADDR_VAR 0 3
8176: PUSH
8177: LD_INT 5
8179: PUSH
8180: LD_INT 27
8182: PUSH
8183: LD_INT 44
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: ST_TO_ADDR
8197: GO 8344
8199: LD_INT 31
8201: DOUBLE
8202: EQUAL
8203: IFTRUE 8207
8205: GO 8235
8207: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8208: LD_ADDR_VAR 0 3
8212: PUSH
8213: LD_STRING 
8215: PUSH
8216: LD_STRING 
8218: PUSH
8219: LD_INT 49
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_VAR 0 2
8231: ARRAY
8232: ST_TO_ADDR
8233: GO 8344
8235: LD_INT 14
8237: DOUBLE
8238: EQUAL
8239: IFTRUE 8243
8241: GO 8271
8243: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: LD_STRING 
8254: PUSH
8255: LD_STRING 
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_VAR 0 2
8267: ARRAY
8268: ST_TO_ADDR
8269: GO 8344
8271: LD_INT 10
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8307
8279: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_INT 9
8287: PUSH
8288: LD_STRING 
8290: PUSH
8291: LD_STRING 
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_VAR 0 2
8303: ARRAY
8304: ST_TO_ADDR
8305: GO 8344
8307: LD_INT 40
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8343
8315: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8316: LD_ADDR_VAR 0 3
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 28
8326: PUSH
8327: LD_INT 45
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_VAR 0 2
8339: ARRAY
8340: ST_TO_ADDR
8341: GO 8344
8343: POP
// end ;
8344: LD_VAR 0 3
8348: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8349: LD_INT 0
8351: PPUSH
8352: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8353: LD_ADDR_VAR 0 4
8357: PUSH
8358: LD_VAR 0 2
8362: PPUSH
8363: CALL_OW 254
8367: PUSH
8368: LD_INT 3
8370: MINUS
8371: ST_TO_ADDR
// if dir < 0 then
8372: LD_VAR 0 4
8376: PUSH
8377: LD_INT 0
8379: LESS
8380: IFFALSE 8396
// dir := 6 + dir ;
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: LD_INT 6
8389: PUSH
8390: LD_VAR 0 4
8394: PLUS
8395: ST_TO_ADDR
// SetDir ( un , dir ) ;
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 4
8405: PPUSH
8406: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8410: LD_VAR 0 1
8414: PPUSH
8415: LD_VAR 0 2
8419: PPUSH
8420: CALL_OW 52
// result = un ;
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_VAR 0 1
8433: ST_TO_ADDR
// end ;
8434: LD_VAR 0 3
8438: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
8443: PPUSH
// uc_side := GetSide ( b ) ;
8444: LD_ADDR_OWVAR 20
8448: PUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: CALL_OW 255
8458: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8459: LD_ADDR_OWVAR 21
8463: PUSH
8464: LD_VAR 0 2
8468: PPUSH
8469: CALL_OW 248
8473: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8474: LD_INT 0
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 380
// un = CreateHuman ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: CALL_OW 44
8498: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8499: LD_ADDR_VAR 0 5
8503: PUSH
8504: LD_VAR 0 2
8508: PPUSH
8509: CALL_OW 254
8513: PUSH
8514: LD_INT 3
8516: MINUS
8517: ST_TO_ADDR
// if dir < 0 then
8518: LD_VAR 0 5
8522: PUSH
8523: LD_INT 0
8525: LESS
8526: IFFALSE 8542
// dir := 6 + dir ;
8528: LD_ADDR_VAR 0 5
8532: PUSH
8533: LD_INT 6
8535: PUSH
8536: LD_VAR 0 5
8540: PLUS
8541: ST_TO_ADDR
// SetDir ( un , dir ) ;
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_VAR 0 5
8551: PPUSH
8552: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8556: LD_VAR 0 4
8560: PPUSH
8561: LD_VAR 0 2
8565: PPUSH
8566: CALL_OW 52
// result = un ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_VAR 0 4
8579: ST_TO_ADDR
// end ;
8580: LD_VAR 0 3
8584: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
8589: PPUSH
8590: PPUSH
8591: PPUSH
// for building in buildings do
8592: LD_ADDR_VAR 0 5
8596: PUSH
8597: LD_VAR 0 2
8601: PUSH
8602: FOR_IN
8603: IFFALSE 8695
// begin x = GetX ( building ) ;
8605: LD_ADDR_VAR 0 6
8609: PUSH
8610: LD_VAR 0 5
8614: PPUSH
8615: CALL_OW 250
8619: ST_TO_ADDR
// y = GetY ( building ) ;
8620: LD_ADDR_VAR 0 7
8624: PUSH
8625: LD_VAR 0 5
8629: PPUSH
8630: CALL_OW 251
8634: ST_TO_ADDR
// dir = GetDir ( building ) ;
8635: LD_ADDR_VAR 0 8
8639: PUSH
8640: LD_VAR 0 5
8644: PPUSH
8645: CALL_OW 254
8649: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 5
8659: PPUSH
8660: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8664: LD_VAR 0 1
8668: PPUSH
8669: LD_VAR 0 3
8673: PPUSH
8674: LD_VAR 0 6
8678: PPUSH
8679: LD_VAR 0 7
8683: PPUSH
8684: LD_VAR 0 8
8688: PPUSH
8689: CALL_OW 205
// end ;
8693: GO 8602
8695: POP
8696: POP
// end ;
8697: LD_VAR 0 4
8701: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
8707: PPUSH
8708: PPUSH
8709: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8710: LD_ADDR_VAR 0 8
8714: PUSH
8715: LD_INT 48
8717: PUSH
8718: LD_INT 49
8720: PUSH
8721: LD_INT 50
8723: PUSH
8724: LD_INT 20
8726: PUSH
8727: LD_INT 1
8729: PUSH
8730: LD_INT 51
8732: PUSH
8733: LD_INT 52
8735: PUSH
8736: LD_INT 69
8738: PUSH
8739: LD_INT 39
8741: PUSH
8742: LD_INT 34
8744: PUSH
8745: LD_INT 40
8747: PUSH
8748: LD_INT 53
8750: PUSH
8751: LD_INT 71
8753: PUSH
8754: LD_INT 57
8756: PUSH
8757: LD_INT 58
8759: PUSH
8760: LD_INT 44
8762: PUSH
8763: LD_INT 32
8765: PUSH
8766: LD_INT 27
8768: PUSH
8769: LD_INT 23
8771: PUSH
8772: LD_INT 33
8774: PUSH
8775: LD_INT 59
8777: PUSH
8778: LD_INT 54
8780: PUSH
8781: LD_INT 55
8783: PUSH
8784: LD_INT 56
8786: PUSH
8787: LD_INT 63
8789: PUSH
8790: LD_INT 64
8792: PUSH
8793: LD_INT 65
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 31
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 22
8807: PUSH
8808: LD_INT 25
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8845: LD_ADDR_VAR 0 9
8849: PUSH
8850: LD_INT 1
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL 29596 0 3
8863: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8864: LD_ADDR_VAR 0 5
8868: PUSH
8869: DOUBLE
8870: LD_INT 1
8872: DEC
8873: ST_TO_ADDR
8874: LD_VAR 0 8
8878: PUSH
8879: FOR_TO
8880: IFFALSE 8956
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8882: LD_VAR 0 8
8886: PUSH
8887: LD_VAR 0 5
8891: ARRAY
8892: PPUSH
8893: LD_VAR 0 1
8897: PPUSH
8898: CALL_OW 321
8902: PUSH
8903: LD_INT 1
8905: EQUAL
8906: PUSH
8907: LD_VAR 0 8
8911: PUSH
8912: LD_VAR 0 5
8916: ARRAY
8917: PPUSH
8918: LD_VAR 0 3
8922: PPUSH
8923: CALL_OW 482
8927: PUSH
8928: LD_INT 1
8930: EQUAL
8931: AND
8932: IFFALSE 8954
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8934: LD_VAR 0 2
8938: PPUSH
8939: LD_VAR 0 8
8943: PUSH
8944: LD_VAR 0 5
8948: ARRAY
8949: PPUSH
8950: CALL_OW 184
8954: GO 8879
8956: POP
8957: POP
// for i = 1 to am_tech_list do
8958: LD_ADDR_VAR 0 5
8962: PUSH
8963: DOUBLE
8964: LD_INT 1
8966: DEC
8967: ST_TO_ADDR
8968: LD_VAR 0 9
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9050
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
8976: LD_VAR 0 9
8980: PUSH
8981: LD_VAR 0 5
8985: ARRAY
8986: PPUSH
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 321
8996: PUSH
8997: LD_INT 1
8999: EQUAL
9000: PUSH
9001: LD_VAR 0 9
9005: PUSH
9006: LD_VAR 0 5
9010: ARRAY
9011: PPUSH
9012: LD_VAR 0 3
9016: PPUSH
9017: CALL_OW 482
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: AND
9026: IFFALSE 9048
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_VAR 0 9
9037: PUSH
9038: LD_VAR 0 5
9042: ARRAY
9043: PPUSH
9044: CALL_OW 184
9048: GO 8973
9050: POP
9051: POP
// end ;
9052: LD_VAR 0 4
9056: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9057: LD_INT 0
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
9067: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9068: LD_ADDR_VAR 0 3
9072: PUSH
9073: LD_INT 22
9075: PUSH
9076: LD_INT 6
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 21
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 6
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: PUSH
9113: LD_INT 1
9115: ARRAY
9116: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9117: LD_ADDR_VAR 0 4
9121: PUSH
9122: LD_INT 22
9124: PUSH
9125: LD_INT 6
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 21
9134: PUSH
9135: LD_INT 3
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 30
9144: PUSH
9145: LD_INT 3
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 69
9161: PUSH
9162: LD_INT 1
9164: ARRAY
9165: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9166: LD_ADDR_VAR 0 9
9170: PUSH
9171: LD_VAR 0 9
9175: PUSH
9176: LD_EXP 59
9180: ADD
9181: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9182: LD_ADDR_VAR 0 9
9186: PUSH
9187: LD_VAR 0 9
9191: PUSH
9192: LD_EXP 77
9196: ADD
9197: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9198: LD_ADDR_VAR 0 9
9202: PUSH
9203: LD_VAR 0 9
9207: PUSH
9208: LD_EXP 69
9212: ADD
9213: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9214: LD_ADDR_VAR 0 8
9218: PUSH
9219: LD_INT 18
9221: PPUSH
9222: LD_INT 22
9224: PUSH
9225: LD_INT 6
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: LD_INT 60
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: PPUSH
9260: CALL_OW 70
9264: PUSH
9265: LD_VAR 0 9
9269: DIFF
9270: ST_TO_ADDR
// if not canTakeUnits then
9271: LD_VAR 0 8
9275: NOT
9276: IFFALSE 9309
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9278: LD_ADDR_EXP 79
9282: PUSH
9283: LD_EXP 79
9287: PPUSH
9288: LD_INT 4
9290: PPUSH
9291: LD_EXP 79
9295: PUSH
9296: LD_INT 3
9298: ARRAY
9299: PUSH
9300: LD_INT 2
9302: PLUS
9303: PPUSH
9304: CALL_OW 1
9308: ST_TO_ADDR
// if canTakeUnits > 2 then
9309: LD_VAR 0 8
9313: PUSH
9314: LD_INT 2
9316: GREATER
9317: IFFALSE 9387
// begin for i := 1 to rand ( 1 , 2 ) do
9319: LD_ADDR_VAR 0 2
9323: PUSH
9324: DOUBLE
9325: LD_INT 1
9327: DEC
9328: ST_TO_ADDR
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 2
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: FOR_TO
9341: IFFALSE 9383
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9343: LD_VAR 0 8
9347: PUSH
9348: LD_VAR 0 2
9352: ARRAY
9353: PPUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9363: LD_VAR 0 8
9367: PUSH
9368: LD_VAR 0 2
9372: ARRAY
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 183
// end ;
9381: GO 9340
9383: POP
9384: POP
// end else
9385: GO 9455
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: DOUBLE
9393: LD_INT 1
9395: DEC
9396: ST_TO_ADDR
9397: LD_INT 1
9399: PPUSH
9400: LD_VAR 0 8
9404: PPUSH
9405: CALL_OW 12
9409: PUSH
9410: FOR_TO
9411: IFFALSE 9453
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9413: LD_VAR 0 8
9417: PUSH
9418: LD_VAR 0 2
9422: ARRAY
9423: PPUSH
9424: LD_VAR 0 3
9428: PPUSH
9429: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9433: LD_VAR 0 8
9437: PUSH
9438: LD_VAR 0 2
9442: ARRAY
9443: PPUSH
9444: LD_INT 4
9446: PPUSH
9447: CALL_OW 183
// end ;
9451: GO 9410
9453: POP
9454: POP
// end ; wait ( 0 0$01 ) ;
9455: LD_INT 35
9457: PPUSH
9458: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9462: LD_ADDR_VAR 0 8
9466: PUSH
9467: LD_INT 18
9469: PPUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 6
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 60
9495: PUSH
9496: EMPTY
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 70
9512: PUSH
9513: LD_VAR 0 9
9517: DIFF
9518: ST_TO_ADDR
// pom = 6 ;
9519: LD_ADDR_VAR 0 7
9523: PUSH
9524: LD_INT 6
9526: ST_TO_ADDR
// if canTakeUnits then
9527: LD_VAR 0 8
9531: IFFALSE 9648
// for i = 1 to canTakeUnits do
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: DOUBLE
9539: LD_INT 1
9541: DEC
9542: ST_TO_ADDR
9543: LD_VAR 0 8
9547: PUSH
9548: FOR_TO
9549: IFFALSE 9646
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9551: LD_VAR 0 8
9555: PUSH
9556: LD_VAR 0 2
9560: ARRAY
9561: PPUSH
9562: CALL_OW 257
9566: PUSH
9567: LD_INT 3
9569: NONEQUAL
9570: IFFALSE 9610
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9572: LD_VAR 0 8
9576: PUSH
9577: LD_VAR 0 2
9581: ARRAY
9582: PPUSH
9583: LD_VAR 0 4
9587: PPUSH
9588: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9592: LD_VAR 0 8
9596: PUSH
9597: LD_VAR 0 2
9601: ARRAY
9602: PPUSH
9603: LD_INT 3
9605: PPUSH
9606: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9610: LD_VAR 0 8
9614: PUSH
9615: LD_VAR 0 2
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL_OW 120
// pom = pom - 1 ;
9630: LD_ADDR_VAR 0 7
9634: PUSH
9635: LD_VAR 0 7
9639: PUSH
9640: LD_INT 1
9642: MINUS
9643: ST_TO_ADDR
// end ;
9644: GO 9548
9646: POP
9647: POP
// if pom > 0 then
9648: LD_VAR 0 7
9652: PUSH
9653: LD_INT 0
9655: GREATER
9656: IFFALSE 9681
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9658: LD_ADDR_EXP 79
9662: PUSH
9663: LD_EXP 79
9667: PPUSH
9668: LD_INT 3
9670: PPUSH
9671: LD_VAR 0 7
9675: PPUSH
9676: CALL_OW 1
9680: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9681: LD_INT 35
9683: PPUSH
9684: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9688: LD_ADDR_VAR 0 5
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_INT 6
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 30
9715: PUSH
9716: LD_INT 32
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 3
9725: PUSH
9726: LD_INT 59
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 69
9746: PUSH
9747: FOR_IN
9748: IFFALSE 9994
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9750: LD_ADDR_VAR 0 8
9754: PUSH
9755: LD_INT 18
9757: PPUSH
9758: LD_INT 22
9760: PUSH
9761: LD_INT 6
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 3
9780: PUSH
9781: LD_INT 60
9783: PUSH
9784: EMPTY
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 70
9800: PUSH
9801: LD_VAR 0 9
9805: DIFF
9806: ST_TO_ADDR
// if canTakeUnits then
9807: LD_VAR 0 8
9811: IFFALSE 9945
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9813: LD_VAR 0 8
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: CALL_OW 257
9826: PUSH
9827: LD_INT 1
9829: NONEQUAL
9830: IFFALSE 9925
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9832: LD_VAR 0 8
9836: PUSH
9837: LD_INT 1
9839: ARRAY
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 6
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 5
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 69
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PPUSH
9885: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9889: LD_VAR 0 8
9893: PUSH
9894: LD_INT 1
9896: ARRAY
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9905: LD_VAR 0 8
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: CALL_OW 182
// wait ( 0 0$1 ) ;
9918: LD_INT 35
9920: PPUSH
9921: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9925: LD_VAR 0 8
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: LD_VAR 0 5
9938: PPUSH
9939: CALL_OW 120
// end else
9943: GO 9992
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9945: LD_ADDR_EXP 71
9949: PUSH
9950: LD_EXP 71
9954: PUSH
9955: LD_VAR 0 5
9959: ADD
9960: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9961: LD_ADDR_EXP 79
9965: PUSH
9966: LD_EXP 79
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: LD_EXP 79
9978: PUSH
9979: LD_INT 1
9981: ARRAY
9982: PUSH
9983: LD_INT 1
9985: PLUS
9986: PPUSH
9987: CALL_OW 1
9991: ST_TO_ADDR
// end ; end ;
9992: GO 9747
9994: POP
9995: POP
// end ;
9996: LD_VAR 0 1
10000: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10001: LD_INT 0
10003: PPUSH
10004: PPUSH
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
10013: PPUSH
10014: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10015: LD_VAR 0 1
10019: PPUSH
10020: CALL_OW 302
10024: NOT
10025: PUSH
10026: LD_VAR 0 4
10030: PUSH
10031: LD_INT 1
10033: EQUAL
10034: OR
10035: PUSH
10036: LD_VAR 0 2
10040: PPUSH
10041: LD_VAR 0 3
10045: PPUSH
10046: CALL_OW 488
10050: NOT
10051: OR
10052: PUSH
10053: LD_VAR 0 1
10057: PPUSH
10058: LD_VAR 0 2
10062: PPUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: CALL_OW 297
10072: PUSH
10073: LD_VAR 0 4
10077: GREATEREQUAL
10078: OR
10079: PUSH
10080: LD_VAR 0 5
10084: PUSH
10085: LD_INT 1
10087: PUSH
10088: LD_INT 0
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: IN
10095: NOT
10096: OR
10097: IFFALSE 10101
// exit ;
10099: GO 11658
// attempts = 0 ;
10101: LD_ADDR_VAR 0 17
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10109: LD_ADDR_VAR 0 7
10113: PUSH
10114: EMPTY
10115: ST_TO_ADDR
// list_coords = [ ] ;
10116: LD_ADDR_VAR 0 8
10120: PUSH
10121: EMPTY
10122: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10123: LD_ADDR_VAR 0 9
10127: PUSH
10128: LD_VAR 0 2
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: LD_VAR 0 1
10142: PPUSH
10143: CALL_OW 250
10147: PPUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 251
10157: PPUSH
10158: CALL 11663 0 4
10162: ST_TO_ADDR
// if attempts = 0 then
10163: LD_VAR 0 17
10167: PUSH
10168: LD_INT 0
10170: EQUAL
10171: IFFALSE 10279
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10173: LD_ADDR_VAR 0 10
10177: PUSH
10178: LD_VAR 0 9
10182: PUSH
10183: LD_VAR 0 9
10187: PUSH
10188: LD_INT 1
10190: PLUS
10191: PUSH
10192: LD_VAR 0 9
10196: PUSH
10197: LD_INT 1
10199: MINUS
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10206: LD_VAR 0 10
10210: PUSH
10211: LD_INT 2
10213: ARRAY
10214: PUSH
10215: LD_INT 6
10217: EQUAL
10218: IFFALSE 10241
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10220: LD_ADDR_VAR 0 10
10224: PUSH
10225: LD_VAR 0 10
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: LD_INT 0
10235: PPUSH
10236: CALL_OW 1
10240: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10241: LD_VAR 0 10
10245: PUSH
10246: LD_INT 3
10248: ARRAY
10249: PUSH
10250: LD_INT 1
10252: NEG
10253: EQUAL
10254: IFFALSE 10277
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10256: LD_ADDR_VAR 0 10
10260: PUSH
10261: LD_VAR 0 10
10265: PPUSH
10266: LD_INT 3
10268: PPUSH
10269: LD_INT 5
10271: PPUSH
10272: CALL_OW 1
10276: ST_TO_ADDR
// end else
10277: GO 10316
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10279: LD_ADDR_VAR 0 10
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: LD_INT 4
10298: PUSH
10299: LD_INT 5
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: LD_VAR 0 9
10314: DIFF
10315: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10316: LD_ADDR_VAR 0 14
10320: PUSH
10321: DOUBLE
10322: LD_INT 1
10324: DEC
10325: ST_TO_ADDR
10326: LD_VAR 0 10
10330: PUSH
10331: LD_INT 0
10333: PLUS
10334: PUSH
10335: FOR_TO
10336: IFFALSE 10658
// case dir_list [ c ] of 0 :
10338: LD_VAR 0 10
10342: PUSH
10343: LD_VAR 0 14
10347: ARRAY
10348: PUSH
10349: LD_INT 0
10351: DOUBLE
10352: EQUAL
10353: IFTRUE 10357
10355: GO 10398
10357: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10358: LD_ADDR_VAR 0 8
10362: PUSH
10363: LD_VAR 0 8
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: LD_VAR 0 2
10375: PUSH
10376: LD_VAR 0 3
10380: PUSH
10381: LD_VAR 0 4
10385: MINUS
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 2
10395: ST_TO_ADDR
10396: GO 10656
10398: LD_INT 1
10400: DOUBLE
10401: EQUAL
10402: IFTRUE 10406
10404: GO 10447
10406: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10407: LD_ADDR_VAR 0 8
10411: PUSH
10412: LD_VAR 0 8
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: LD_VAR 0 2
10424: PUSH
10425: LD_VAR 0 4
10429: PLUS
10430: PUSH
10431: LD_VAR 0 3
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PPUSH
10440: CALL_OW 2
10444: ST_TO_ADDR
10445: GO 10656
10447: LD_INT 2
10449: DOUBLE
10450: EQUAL
10451: IFTRUE 10455
10453: GO 10502
10455: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10456: LD_ADDR_VAR 0 8
10460: PUSH
10461: LD_VAR 0 8
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: LD_VAR 0 2
10473: PUSH
10474: LD_VAR 0 4
10478: PLUS
10479: PUSH
10480: LD_VAR 0 3
10484: PUSH
10485: LD_VAR 0 4
10489: PLUS
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 2
10499: ST_TO_ADDR
10500: GO 10656
10502: LD_INT 3
10504: DOUBLE
10505: EQUAL
10506: IFTRUE 10510
10508: GO 10551
10510: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10511: LD_ADDR_VAR 0 8
10515: PUSH
10516: LD_VAR 0 8
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_VAR 0 2
10528: PUSH
10529: LD_VAR 0 3
10533: PUSH
10534: LD_VAR 0 4
10538: PLUS
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PPUSH
10544: CALL_OW 2
10548: ST_TO_ADDR
10549: GO 10656
10551: LD_INT 4
10553: DOUBLE
10554: EQUAL
10555: IFTRUE 10559
10557: GO 10600
10559: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10560: LD_ADDR_VAR 0 8
10564: PUSH
10565: LD_VAR 0 8
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: LD_VAR 0 2
10577: PUSH
10578: LD_VAR 0 4
10582: MINUS
10583: PUSH
10584: LD_VAR 0 3
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 2
10597: ST_TO_ADDR
10598: GO 10656
10600: LD_INT 5
10602: DOUBLE
10603: EQUAL
10604: IFTRUE 10608
10606: GO 10655
10608: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10609: LD_ADDR_VAR 0 8
10613: PUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: LD_VAR 0 2
10626: PUSH
10627: LD_VAR 0 4
10631: MINUS
10632: PUSH
10633: LD_VAR 0 3
10637: PUSH
10638: LD_VAR 0 4
10642: MINUS
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 2
10652: ST_TO_ADDR
10653: GO 10656
10655: POP
10656: GO 10335
10658: POP
10659: POP
// if dist < 30 then
10660: LD_VAR 0 4
10664: PUSH
10665: LD_INT 30
10667: LESS
10668: IFFALSE 10680
// c = 1 else
10670: LD_ADDR_VAR 0 14
10674: PUSH
10675: LD_INT 1
10677: ST_TO_ADDR
10678: GO 10688
// c = 2 ;
10680: LD_ADDR_VAR 0 14
10684: PUSH
10685: LD_INT 2
10687: ST_TO_ADDR
// b = 1 ;
10688: LD_ADDR_VAR 0 11
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10696: LD_VAR 0 11
10700: PUSH
10701: LD_VAR 0 4
10705: PUSH
10706: LD_INT 1
10708: MINUS
10709: LESSEQUAL
10710: IFFALSE 11138
// begin if 0 in dir_list and 1 in dir_list then
10712: LD_INT 0
10714: PUSH
10715: LD_VAR 0 10
10719: IN
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: LD_VAR 0 10
10728: IN
10729: AND
10730: IFFALSE 10782
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10732: LD_ADDR_VAR 0 8
10736: PUSH
10737: LD_VAR 0 8
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_VAR 0 11
10754: PLUS
10755: PUSH
10756: LD_VAR 0 3
10760: PUSH
10761: LD_VAR 0 4
10765: MINUS
10766: PUSH
10767: LD_VAR 0 11
10771: PLUS
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 2
10781: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10782: LD_INT 1
10784: PUSH
10785: LD_VAR 0 10
10789: IN
10790: PUSH
10791: LD_INT 2
10793: PUSH
10794: LD_VAR 0 10
10798: IN
10799: AND
10800: IFFALSE 10846
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10802: LD_ADDR_VAR 0 8
10806: PUSH
10807: LD_VAR 0 8
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_VAR 0 2
10819: PUSH
10820: LD_VAR 0 4
10824: PLUS
10825: PUSH
10826: LD_VAR 0 3
10830: PUSH
10831: LD_VAR 0 11
10835: PLUS
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 2
10845: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10846: LD_INT 2
10848: PUSH
10849: LD_VAR 0 10
10853: IN
10854: PUSH
10855: LD_INT 3
10857: PUSH
10858: LD_VAR 0 10
10862: IN
10863: AND
10864: IFFALSE 10916
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10866: LD_ADDR_VAR 0 8
10870: PUSH
10871: LD_VAR 0 8
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: LD_VAR 0 2
10883: PUSH
10884: LD_VAR 0 4
10888: PLUS
10889: PUSH
10890: LD_VAR 0 11
10894: MINUS
10895: PUSH
10896: LD_VAR 0 3
10900: PUSH
10901: LD_VAR 0 4
10905: PLUS
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 2
10915: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10916: LD_INT 3
10918: PUSH
10919: LD_VAR 0 10
10923: IN
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: LD_VAR 0 10
10932: IN
10933: AND
10934: IFFALSE 10986
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10936: LD_ADDR_VAR 0 8
10940: PUSH
10941: LD_VAR 0 8
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: LD_VAR 0 2
10953: PUSH
10954: LD_VAR 0 11
10958: MINUS
10959: PUSH
10960: LD_VAR 0 3
10964: PUSH
10965: LD_VAR 0 4
10969: PLUS
10970: PUSH
10971: LD_VAR 0 11
10975: MINUS
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 2
10985: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10986: LD_INT 4
10988: PUSH
10989: LD_VAR 0 10
10993: IN
10994: PUSH
10995: LD_INT 5
10997: PUSH
10998: LD_VAR 0 10
11002: IN
11003: AND
11004: IFFALSE 11050
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11006: LD_ADDR_VAR 0 8
11010: PUSH
11011: LD_VAR 0 8
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 4
11028: MINUS
11029: PUSH
11030: LD_VAR 0 3
11034: PUSH
11035: LD_VAR 0 11
11039: MINUS
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 2
11049: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11050: LD_INT 5
11052: PUSH
11053: LD_VAR 0 10
11057: IN
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_VAR 0 10
11066: IN
11067: AND
11068: IFFALSE 11120
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11070: LD_ADDR_VAR 0 8
11074: PUSH
11075: LD_VAR 0 8
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: LD_VAR 0 2
11087: PUSH
11088: LD_VAR 0 4
11092: MINUS
11093: PUSH
11094: LD_VAR 0 11
11098: PLUS
11099: PUSH
11100: LD_VAR 0 3
11104: PUSH
11105: LD_VAR 0 4
11109: MINUS
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PPUSH
11115: CALL_OW 2
11119: ST_TO_ADDR
// b = b + c end ;
11120: LD_ADDR_VAR 0 11
11124: PUSH
11125: LD_VAR 0 11
11129: PUSH
11130: LD_VAR 0 14
11134: PLUS
11135: ST_TO_ADDR
11136: GO 10696
// if list_coords = 0 then
11138: LD_VAR 0 8
11142: PUSH
11143: LD_INT 0
11145: EQUAL
11146: IFFALSE 11150
// exit ;
11148: GO 11658
// repeat min_dist = 5000 ;
11150: LD_ADDR_VAR 0 12
11154: PUSH
11155: LD_INT 5000
11157: ST_TO_ADDR
// for b in list_coords do
11158: LD_ADDR_VAR 0 11
11162: PUSH
11163: LD_VAR 0 8
11167: PUSH
11168: FOR_IN
11169: IFFALSE 11228
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11171: LD_ADDR_VAR 0 13
11175: PUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: LD_VAR 0 11
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: PPUSH
11190: LD_VAR 0 11
11194: PUSH
11195: LD_INT 2
11197: ARRAY
11198: PPUSH
11199: CALL_OW 297
11203: ST_TO_ADDR
// if temp_dist < min_dist then
11204: LD_VAR 0 13
11208: PUSH
11209: LD_VAR 0 12
11213: LESS
11214: IFFALSE 11226
// min_dist = temp_dist ;
11216: LD_ADDR_VAR 0 12
11220: PUSH
11221: LD_VAR 0 13
11225: ST_TO_ADDR
// end ;
11226: GO 11168
11228: POP
11229: POP
// c = 0 ;
11230: LD_ADDR_VAR 0 14
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// repeat c = c + 1 ;
11238: LD_ADDR_VAR 0 14
11242: PUSH
11243: LD_VAR 0 14
11247: PUSH
11248: LD_INT 1
11250: PLUS
11251: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_VAR 0 8
11261: PUSH
11262: LD_VAR 0 14
11266: ARRAY
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: PPUSH
11272: LD_VAR 0 8
11276: PUSH
11277: LD_VAR 0 14
11281: ARRAY
11282: PUSH
11283: LD_INT 2
11285: ARRAY
11286: PPUSH
11287: CALL_OW 297
11291: PUSH
11292: LD_VAR 0 12
11296: EQUAL
11297: IFFALSE 11362
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11299: LD_ADDR_VAR 0 7
11303: PUSH
11304: LD_VAR 0 7
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: LD_VAR 0 8
11316: PUSH
11317: LD_VAR 0 14
11321: ARRAY
11322: PPUSH
11323: CALL_OW 2
11327: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11328: LD_ADDR_VAR 0 8
11332: PUSH
11333: LD_VAR 0 8
11337: PPUSH
11338: LD_VAR 0 14
11342: PPUSH
11343: CALL_OW 3
11347: ST_TO_ADDR
// c = c - 1 ;
11348: LD_ADDR_VAR 0 14
11352: PUSH
11353: LD_VAR 0 14
11357: PUSH
11358: LD_INT 1
11360: MINUS
11361: ST_TO_ADDR
// end ; until c = list_coords ;
11362: LD_VAR 0 14
11366: PUSH
11367: LD_VAR 0 8
11371: EQUAL
11372: IFFALSE 11238
// c = 0 ;
11374: LD_ADDR_VAR 0 14
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// if list_nearest > 0 then
11382: LD_VAR 0 7
11386: PUSH
11387: LD_INT 0
11389: GREATER
11390: IFFALSE 11532
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11392: LD_ADDR_VAR 0 15
11396: PUSH
11397: LD_INT 1
11399: PPUSH
11400: LD_VAR 0 7
11404: PPUSH
11405: CALL_OW 12
11409: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11410: LD_ADDR_VAR 0 16
11414: PUSH
11415: LD_VAR 0 7
11419: PUSH
11420: LD_VAR 0 15
11424: ARRAY
11425: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11426: LD_VAR 0 16
11430: PUSH
11431: LD_INT 1
11433: ARRAY
11434: PPUSH
11435: LD_VAR 0 16
11439: PUSH
11440: LD_INT 2
11442: ARRAY
11443: PPUSH
11444: CALL_OW 488
11448: PUSH
11449: LD_INT 0
11451: GREATER
11452: PUSH
11453: LD_VAR 0 16
11457: PUSH
11458: LD_INT 1
11460: ARRAY
11461: PPUSH
11462: LD_VAR 0 16
11466: PUSH
11467: LD_INT 2
11469: ARRAY
11470: PPUSH
11471: CALL_OW 428
11475: PUSH
11476: LD_INT 0
11478: EQUAL
11479: AND
11480: IFFALSE 11492
// c = 1 else
11482: LD_ADDR_VAR 0 14
11486: PUSH
11487: LD_INT 1
11489: ST_TO_ADDR
11490: GO 11512
// list_nearest = Delete ( list_nearest , rand_num ) ;
11492: LD_ADDR_VAR 0 7
11496: PUSH
11497: LD_VAR 0 7
11501: PPUSH
11502: LD_VAR 0 15
11506: PPUSH
11507: CALL_OW 3
11511: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11512: LD_VAR 0 14
11516: PUSH
11517: LD_INT 1
11519: EQUAL
11520: PUSH
11521: LD_VAR 0 7
11525: PUSH
11526: LD_INT 0
11528: EQUAL
11529: OR
11530: IFFALSE 11392
// end ; until c = 1 or list_coords = 0 ;
11532: LD_VAR 0 14
11536: PUSH
11537: LD_INT 1
11539: EQUAL
11540: PUSH
11541: LD_VAR 0 8
11545: PUSH
11546: LD_INT 0
11548: EQUAL
11549: OR
11550: IFFALSE 11150
// attempts = attempts + 1 ;
11552: LD_ADDR_VAR 0 17
11556: PUSH
11557: LD_VAR 0 17
11561: PUSH
11562: LD_INT 1
11564: PLUS
11565: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11566: LD_VAR 0 14
11570: PUSH
11571: LD_INT 1
11573: EQUAL
11574: PUSH
11575: LD_VAR 0 17
11579: PUSH
11580: LD_INT 1
11582: GREATER
11583: OR
11584: IFFALSE 10109
// if c = 1 then
11586: LD_VAR 0 14
11590: PUSH
11591: LD_INT 1
11593: EQUAL
11594: IFFALSE 11658
// if add then
11596: LD_VAR 0 5
11600: IFFALSE 11631
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_VAR 0 16
11611: PUSH
11612: LD_INT 1
11614: ARRAY
11615: PPUSH
11616: LD_VAR 0 16
11620: PUSH
11621: LD_INT 2
11623: ARRAY
11624: PPUSH
11625: CALL_OW 171
11629: GO 11658
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_VAR 0 16
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 16
11649: PUSH
11650: LD_INT 2
11652: ARRAY
11653: PPUSH
11654: CALL_OW 111
// end ;
11658: LD_VAR 0 6
11662: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11663: LD_INT 0
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11671: LD_VAR 0 1
11675: PPUSH
11676: LD_VAR 0 2
11680: PPUSH
11681: CALL_OW 488
11685: NOT
11686: PUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: LD_VAR 0 4
11696: PPUSH
11697: CALL_OW 488
11701: NOT
11702: OR
11703: IFFALSE 11716
// begin result = - 1 ;
11705: LD_ADDR_VAR 0 5
11709: PUSH
11710: LD_INT 1
11712: NEG
11713: ST_TO_ADDR
// exit ;
11714: GO 11876
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11716: LD_ADDR_VAR 0 6
11720: PUSH
11721: LD_VAR 0 1
11725: PPUSH
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_VAR 0 4
11740: PPUSH
11741: CALL_OW 298
11745: ST_TO_ADDR
// dist_2 = 99999 ;
11746: LD_ADDR_VAR 0 7
11750: PUSH
11751: LD_INT 99999
11753: ST_TO_ADDR
// for b = 0 to 5 do
11754: LD_ADDR_VAR 0 8
11758: PUSH
11759: DOUBLE
11760: LD_INT 0
11762: DEC
11763: ST_TO_ADDR
11764: LD_INT 5
11766: PUSH
11767: FOR_TO
11768: IFFALSE 11864
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11770: LD_ADDR_VAR 0 9
11774: PUSH
11775: LD_VAR 0 1
11779: PPUSH
11780: LD_VAR 0 8
11784: PPUSH
11785: LD_VAR 0 6
11789: PPUSH
11790: CALL_OW 272
11794: PPUSH
11795: LD_VAR 0 2
11799: PPUSH
11800: LD_VAR 0 8
11804: PPUSH
11805: LD_VAR 0 6
11809: PPUSH
11810: CALL_OW 273
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_VAR 0 4
11824: PPUSH
11825: CALL_OW 298
11829: ST_TO_ADDR
// if temp_dist < dist_2 then
11830: LD_VAR 0 9
11834: PUSH
11835: LD_VAR 0 7
11839: LESS
11840: IFFALSE 11862
// begin dist_2 = temp_dist ;
11842: LD_ADDR_VAR 0 7
11846: PUSH
11847: LD_VAR 0 9
11851: ST_TO_ADDR
// dir = b ;
11852: LD_ADDR_VAR 0 10
11856: PUSH
11857: LD_VAR 0 8
11861: ST_TO_ADDR
// end ; end ;
11862: GO 11767
11864: POP
11865: POP
// result = dir ;
11866: LD_ADDR_VAR 0 5
11870: PUSH
11871: LD_VAR 0 10
11875: ST_TO_ADDR
// end ; end_of_file
11876: LD_VAR 0 5
11880: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
11881: LD_INT 0
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// personel = [ ] ;
11911: LD_ADDR_VAR 0 18
11915: PUSH
11916: EMPTY
11917: ST_TO_ADDR
// vehicles = [ ] ;
11918: LD_ADDR_VAR 0 24
11922: PUSH
11923: EMPTY
11924: ST_TO_ADDR
// for unit in basePersonel do
11925: LD_ADDR_VAR 0 17
11929: PUSH
11930: LD_VAR 0 3
11934: PUSH
11935: FOR_IN
11936: IFFALSE 11984
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11938: LD_ADDR_VAR 0 18
11942: PUSH
11943: LD_VAR 0 18
11947: PUSH
11948: LD_VAR 0 17
11952: PUSH
11953: LD_VAR 0 17
11957: PPUSH
11958: CALL_OW 310
11962: PUSH
11963: LD_VAR 0 17
11967: PPUSH
11968: CALL_OW 302
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: ADD
11981: ST_TO_ADDR
11982: GO 11935
11984: POP
11985: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
11986: LD_ADDR_VAR 0 23
11990: PUSH
11991: LD_VAR 0 4
11995: PPUSH
11996: LD_INT 22
11998: PUSH
11999: LD_VAR 0 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 21
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 50
12020: PUSH
12021: EMPTY
12022: LIST
12023: PUSH
12024: LD_INT 3
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: LD_INT 34
12032: PUSH
12033: LD_INT 12
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 34
12042: PUSH
12043: LD_INT 51
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 34
12052: PUSH
12053: LD_INT 32
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12130
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12084: LD_ADDR_VAR 0 24
12088: PUSH
12089: LD_VAR 0 24
12093: PUSH
12094: LD_VAR 0 23
12098: PUSH
12099: LD_VAR 0 23
12103: PPUSH
12104: CALL_OW 310
12108: PUSH
12109: LD_VAR 0 23
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: ADD
12127: ST_TO_ADDR
12128: GO 12081
12130: POP
12131: POP
// repeat soldiers = [ ] ;
12132: LD_ADDR_VAR 0 19
12136: PUSH
12137: EMPTY
12138: ST_TO_ADDR
// engineers = [ ] ;
12139: LD_ADDR_VAR 0 20
12143: PUSH
12144: EMPTY
12145: ST_TO_ADDR
// mechanics = [ ] ;
12146: LD_ADDR_VAR 0 21
12150: PUSH
12151: EMPTY
12152: ST_TO_ADDR
// scientists = [ ] ;
12153: LD_ADDR_VAR 0 22
12157: PUSH
12158: EMPTY
12159: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12160: LD_ADDR_VAR 0 29
12164: PUSH
12165: LD_VAR 0 4
12169: PPUSH
12170: LD_INT 22
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 3
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 50
12194: PUSH
12195: EMPTY
12196: LIST
12197: PUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 70
12236: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12237: LD_ADDR_VAR 0 30
12241: PUSH
12242: LD_VAR 0 4
12246: PPUSH
12247: LD_INT 22
12249: PUSH
12250: LD_VAR 0 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 21
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 50
12271: PUSH
12272: EMPTY
12273: LIST
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 30
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 30
12290: PUSH
12291: LD_INT 3
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: PPUSH
12309: CALL_OW 70
12313: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12314: LD_ADDR_VAR 0 31
12318: PUSH
12319: LD_VAR 0 4
12323: PPUSH
12324: LD_INT 22
12326: PUSH
12327: LD_VAR 0 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 3
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 50
12348: PUSH
12349: EMPTY
12350: LIST
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 6
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 30
12367: PUSH
12368: LD_INT 7
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 8
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 70
12401: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12402: LD_ADDR_VAR 0 32
12406: PUSH
12407: LD_VAR 0 4
12411: PPUSH
12412: LD_INT 22
12414: PUSH
12415: LD_VAR 0 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 21
12426: PUSH
12427: LD_INT 3
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 50
12436: PUSH
12437: EMPTY
12438: LIST
12439: PUSH
12440: LD_INT 2
12442: PUSH
12443: LD_INT 30
12445: PUSH
12446: LD_INT 31
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 30
12455: PUSH
12456: LD_INT 32
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 70
12478: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12479: LD_ADDR_VAR 0 33
12483: PUSH
12484: LD_VAR 0 4
12488: PPUSH
12489: LD_INT 22
12491: PUSH
12492: LD_VAR 0 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 3
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 50
12513: PUSH
12514: EMPTY
12515: LIST
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: LD_INT 30
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 30
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 70
12555: ST_TO_ADDR
// for i := 1 to personel do
12556: LD_ADDR_VAR 0 13
12560: PUSH
12561: DOUBLE
12562: LD_INT 1
12564: DEC
12565: ST_TO_ADDR
12566: LD_VAR 0 18
12570: PUSH
12571: FOR_TO
12572: IFFALSE 12782
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12574: LD_VAR 0 18
12578: PUSH
12579: LD_VAR 0 13
12583: ARRAY
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 256
12593: PUSH
12594: LD_INT 1000
12596: EQUAL
12597: IFFALSE 12639
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12599: LD_ADDR_VAR 0 18
12603: PUSH
12604: LD_VAR 0 18
12608: PPUSH
12609: LD_VAR 0 13
12613: PUSH
12614: LD_VAR 0 18
12618: PUSH
12619: LD_VAR 0 13
12623: ARRAY
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL 34479 0 3
12636: ST_TO_ADDR
// end else
12637: GO 12730
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12639: LD_VAR 0 18
12643: PUSH
12644: LD_VAR 0 13
12648: ARRAY
12649: PUSH
12650: LD_INT 1
12652: ARRAY
12653: PPUSH
12654: CALL_OW 256
12658: PUSH
12659: LD_INT 950
12661: LESSEQUAL
12662: IFFALSE 12730
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12664: LD_ADDR_VAR 0 18
12668: PUSH
12669: LD_VAR 0 18
12673: PPUSH
12674: LD_VAR 0 13
12678: PUSH
12679: LD_VAR 0 18
12683: PUSH
12684: LD_VAR 0 13
12688: ARRAY
12689: PUSH
12690: LD_INT 1
12692: MINUS
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: LD_INT 0
12700: PPUSH
12701: CALL 34479 0 3
12705: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12706: LD_VAR 0 18
12710: PUSH
12711: LD_VAR 0 13
12715: ARRAY
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: LD_VAR 0 5
12725: PPUSH
12726: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12730: LD_VAR 0 18
12734: PUSH
12735: LD_VAR 0 13
12739: ARRAY
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 256
12749: PUSH
12750: LD_INT 250
12752: LESS
12753: IFFALSE 12780
// personel = personel diff [ personel [ i ] ] ;
12755: LD_ADDR_VAR 0 18
12759: PUSH
12760: LD_VAR 0 18
12764: PUSH
12765: LD_VAR 0 18
12769: PUSH
12770: LD_VAR 0 13
12774: ARRAY
12775: PUSH
12776: EMPTY
12777: LIST
12778: DIFF
12779: ST_TO_ADDR
// end ;
12780: GO 12571
12782: POP
12783: POP
// for i := 1 to vehicles do
12784: LD_ADDR_VAR 0 13
12788: PUSH
12789: DOUBLE
12790: LD_INT 1
12792: DEC
12793: ST_TO_ADDR
12794: LD_VAR 0 24
12798: PUSH
12799: FOR_TO
12800: IFFALSE 13139
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12802: LD_VAR 0 24
12806: PUSH
12807: LD_VAR 0 13
12811: ARRAY
12812: PUSH
12813: LD_INT 1
12815: ARRAY
12816: PPUSH
12817: CALL_OW 256
12821: PUSH
12822: LD_INT 1000
12824: EQUAL
12825: IFFALSE 13000
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12827: LD_VAR 0 24
12831: PUSH
12832: LD_VAR 0 13
12836: ARRAY
12837: PUSH
12838: LD_INT 1
12840: ARRAY
12841: PPUSH
12842: CALL_OW 263
12846: PUSH
12847: LD_INT 1
12849: EQUAL
12850: IFFALSE 12908
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12852: LD_VAR 0 24
12856: PUSH
12857: LD_VAR 0 13
12861: ARRAY
12862: PUSH
12863: LD_INT 2
12865: ARRAY
12866: PPUSH
12867: CALL_OW 310
12871: NOT
12872: IFFALSE 12908
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12874: LD_VAR 0 24
12878: PUSH
12879: LD_VAR 0 13
12883: ARRAY
12884: PUSH
12885: LD_INT 2
12887: ARRAY
12888: PPUSH
12889: LD_VAR 0 24
12893: PUSH
12894: LD_VAR 0 13
12898: ARRAY
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PPUSH
12904: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
12908: LD_VAR 0 24
12912: PUSH
12913: LD_VAR 0 10
12917: LESS
12918: IFFALSE 12960
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
12920: LD_ADDR_VAR 0 24
12924: PUSH
12925: LD_VAR 0 24
12929: PPUSH
12930: LD_VAR 0 13
12934: PUSH
12935: LD_VAR 0 24
12939: PUSH
12940: LD_VAR 0 13
12944: ARRAY
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PPUSH
12950: LD_INT 1
12952: PPUSH
12953: CALL 34479 0 3
12957: ST_TO_ADDR
12958: GO 12998
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12960: LD_ADDR_VAR 0 24
12964: PUSH
12965: LD_VAR 0 24
12969: PPUSH
12970: LD_VAR 0 13
12974: PUSH
12975: LD_VAR 0 24
12979: PUSH
12980: LD_VAR 0 13
12984: ARRAY
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: LD_INT 2
12992: PPUSH
12993: CALL 34479 0 3
12997: ST_TO_ADDR
// end else
12998: GO 13087
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13000: LD_VAR 0 24
13004: PUSH
13005: LD_VAR 0 13
13009: ARRAY
13010: PUSH
13011: LD_INT 1
13013: ARRAY
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 650
13022: LESSEQUAL
13023: IFFALSE 13087
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13025: LD_ADDR_VAR 0 24
13029: PUSH
13030: LD_VAR 0 24
13034: PPUSH
13035: LD_VAR 0 13
13039: PUSH
13040: LD_VAR 0 24
13044: PUSH
13045: LD_VAR 0 13
13049: ARRAY
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: LD_INT 0
13057: PPUSH
13058: CALL 34479 0 3
13062: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13063: LD_VAR 0 24
13067: PUSH
13068: LD_VAR 0 13
13072: ARRAY
13073: PUSH
13074: LD_INT 1
13076: ARRAY
13077: PPUSH
13078: LD_VAR 0 6
13082: PPUSH
13083: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13087: LD_VAR 0 24
13091: PUSH
13092: LD_VAR 0 13
13096: ARRAY
13097: PUSH
13098: LD_INT 1
13100: ARRAY
13101: PPUSH
13102: CALL_OW 256
13106: PUSH
13107: LD_INT 250
13109: LESS
13110: IFFALSE 13137
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13112: LD_ADDR_VAR 0 24
13116: PUSH
13117: LD_VAR 0 24
13121: PUSH
13122: LD_VAR 0 24
13126: PUSH
13127: LD_VAR 0 13
13131: ARRAY
13132: PUSH
13133: EMPTY
13134: LIST
13135: DIFF
13136: ST_TO_ADDR
// end ;
13137: GO 12799
13139: POP
13140: POP
// for i := 1 to personel do
13141: LD_ADDR_VAR 0 13
13145: PUSH
13146: DOUBLE
13147: LD_INT 1
13149: DEC
13150: ST_TO_ADDR
13151: LD_VAR 0 18
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13198
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13159: LD_ADDR_VAR 0 19
13163: PUSH
13164: LD_VAR 0 19
13168: PUSH
13169: LD_VAR 0 18
13173: PUSH
13174: LD_VAR 0 13
13178: ARRAY
13179: PPUSH
13180: LD_INT 25
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 72
13194: ADD
13195: ST_TO_ADDR
13196: GO 13156
13198: POP
13199: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13200: LD_VAR 0 19
13204: PUSH
13205: LD_VAR 0 32
13209: PPUSH
13210: LD_INT 3
13212: PUSH
13213: LD_INT 59
13215: PUSH
13216: EMPTY
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PPUSH
13223: CALL_OW 72
13227: AND
13228: IFFALSE 13516
// begin for i := 1 to personel do
13230: LD_ADDR_VAR 0 13
13234: PUSH
13235: DOUBLE
13236: LD_INT 1
13238: DEC
13239: ST_TO_ADDR
13240: LD_VAR 0 18
13244: PUSH
13245: FOR_TO
13246: IFFALSE 13512
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13248: LD_VAR 0 18
13252: PUSH
13253: LD_VAR 0 13
13257: ARRAY
13258: PUSH
13259: LD_INT 1
13261: ARRAY
13262: PPUSH
13263: CALL_OW 257
13267: PUSH
13268: LD_INT 1
13270: EQUAL
13271: PUSH
13272: LD_VAR 0 18
13276: PUSH
13277: LD_VAR 0 13
13281: ARRAY
13282: PUSH
13283: LD_INT 3
13285: ARRAY
13286: PUSH
13287: LD_INT 1
13289: EQUAL
13290: AND
13291: IFFALSE 13510
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13293: LD_VAR 0 18
13297: PUSH
13298: LD_VAR 0 13
13302: ARRAY
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PPUSH
13308: CALL_OW 437
13312: IFFALSE 13413
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13314: LD_VAR 0 18
13318: PUSH
13319: LD_VAR 0 13
13323: ARRAY
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: CALL_OW 437
13333: PUSH
13334: LD_INT 1
13336: ARRAY
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PUSH
13342: LD_STRING e
13344: EQUAL
13345: PUSH
13346: LD_VAR 0 18
13350: PUSH
13351: LD_VAR 0 13
13355: ARRAY
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 437
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PUSH
13370: LD_INT 4
13372: ARRAY
13373: PPUSH
13374: CALL_OW 266
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: IN
13389: AND
13390: IFFALSE 13413
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13392: LD_VAR 0 18
13396: PUSH
13397: LD_VAR 0 13
13401: ARRAY
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: EMPTY
13408: PPUSH
13409: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13413: LD_ADDR_VAR 0 36
13417: PUSH
13418: LD_VAR 0 32
13422: PPUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 59
13428: PUSH
13429: EMPTY
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 72
13440: PUSH
13441: FOR_IN
13442: IFFALSE 13508
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13444: LD_VAR 0 18
13448: PUSH
13449: LD_VAR 0 13
13453: ARRAY
13454: PUSH
13455: LD_INT 1
13457: ARRAY
13458: PPUSH
13459: CALL_OW 310
13463: PPUSH
13464: CALL_OW 266
13468: PUSH
13469: LD_INT 31
13471: PUSH
13472: LD_INT 32
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: IN
13479: NOT
13480: IFFALSE 13506
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13482: LD_VAR 0 18
13486: PUSH
13487: LD_VAR 0 13
13491: ARRAY
13492: PUSH
13493: LD_INT 1
13495: ARRAY
13496: PPUSH
13497: LD_VAR 0 36
13501: PPUSH
13502: CALL_OW 120
13506: GO 13441
13508: POP
13509: POP
// end ; end ;
13510: GO 13245
13512: POP
13513: POP
// end else
13514: GO 13731
// if soldiers and barracks then
13516: LD_VAR 0 19
13520: PUSH
13521: LD_VAR 0 33
13525: AND
13526: IFFALSE 13731
// for i := 1 to personel do
13528: LD_ADDR_VAR 0 13
13532: PUSH
13533: DOUBLE
13534: LD_INT 1
13536: DEC
13537: ST_TO_ADDR
13538: LD_VAR 0 18
13542: PUSH
13543: FOR_TO
13544: IFFALSE 13729
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13546: LD_VAR 0 18
13550: PUSH
13551: LD_VAR 0 13
13555: ARRAY
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: PPUSH
13561: CALL_OW 257
13565: PUSH
13566: LD_INT 1
13568: EQUAL
13569: PUSH
13570: LD_VAR 0 18
13574: PUSH
13575: LD_VAR 0 13
13579: ARRAY
13580: PUSH
13581: LD_INT 3
13583: ARRAY
13584: PUSH
13585: LD_INT 1
13587: EQUAL
13588: AND
13589: PUSH
13590: LD_VAR 0 18
13594: PUSH
13595: LD_VAR 0 13
13599: ARRAY
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_INT 56
13607: PUSH
13608: EMPTY
13609: LIST
13610: PPUSH
13611: CALL_OW 72
13615: AND
13616: IFFALSE 13727
// begin if not personel [ i ] [ 2 ] then
13618: LD_VAR 0 18
13622: PUSH
13623: LD_VAR 0 13
13627: ARRAY
13628: PUSH
13629: LD_INT 2
13631: ARRAY
13632: NOT
13633: IFFALSE 13693
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13635: LD_ADDR_VAR 0 18
13639: PUSH
13640: LD_VAR 0 18
13644: PPUSH
13645: LD_VAR 0 13
13649: PUSH
13650: LD_VAR 0 18
13654: PUSH
13655: LD_VAR 0 13
13659: ARRAY
13660: PUSH
13661: LD_INT 1
13663: MINUS
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PPUSH
13669: LD_VAR 0 33
13673: PUSH
13674: LD_INT 1
13676: PPUSH
13677: LD_VAR 0 33
13681: PPUSH
13682: CALL_OW 12
13686: ARRAY
13687: PPUSH
13688: CALL 34479 0 3
13692: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13693: LD_VAR 0 18
13697: PUSH
13698: LD_VAR 0 13
13702: ARRAY
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: LD_VAR 0 18
13712: PUSH
13713: LD_VAR 0 13
13717: ARRAY
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: CALL_OW 120
// end ;
13727: GO 13543
13729: POP
13730: POP
// for i := 1 to personel do
13731: LD_ADDR_VAR 0 13
13735: PUSH
13736: DOUBLE
13737: LD_INT 1
13739: DEC
13740: ST_TO_ADDR
13741: LD_VAR 0 18
13745: PUSH
13746: FOR_TO
13747: IFFALSE 13788
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13749: LD_ADDR_VAR 0 20
13753: PUSH
13754: LD_VAR 0 20
13758: PUSH
13759: LD_VAR 0 18
13763: PUSH
13764: LD_VAR 0 13
13768: ARRAY
13769: PPUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 2
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 72
13784: ADD
13785: ST_TO_ADDR
13786: GO 13746
13788: POP
13789: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13790: LD_VAR 0 20
13794: PUSH
13795: LD_VAR 0 4
13799: PPUSH
13800: LD_INT 22
13802: PUSH
13803: LD_VAR 0 1
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 21
13814: PUSH
13815: LD_INT 3
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: LD_INT 24
13827: PUSH
13828: LD_INT 1000
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 70
13848: AND
13849: IFFALSE 14125
// begin for i := 1 to personel do
13851: LD_ADDR_VAR 0 13
13855: PUSH
13856: DOUBLE
13857: LD_INT 1
13859: DEC
13860: ST_TO_ADDR
13861: LD_VAR 0 18
13865: PUSH
13866: FOR_TO
13867: IFFALSE 14121
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13869: LD_VAR 0 18
13873: PUSH
13874: LD_VAR 0 13
13878: ARRAY
13879: PUSH
13880: LD_INT 1
13882: ARRAY
13883: PPUSH
13884: CALL_OW 257
13888: PUSH
13889: LD_INT 2
13891: EQUAL
13892: PUSH
13893: LD_VAR 0 18
13897: PUSH
13898: LD_VAR 0 13
13902: ARRAY
13903: PUSH
13904: LD_INT 3
13906: ARRAY
13907: PUSH
13908: LD_INT 1
13910: EQUAL
13911: AND
13912: IFFALSE 14119
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13914: LD_VAR 0 18
13918: PUSH
13919: LD_VAR 0 13
13923: ARRAY
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PPUSH
13929: CALL_OW 437
13933: IFFALSE 13989
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13935: LD_VAR 0 18
13939: PUSH
13940: LD_VAR 0 13
13944: ARRAY
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PPUSH
13950: CALL_OW 437
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PUSH
13963: LD_STRING e
13965: EQUAL
13966: IFFALSE 13989
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13968: LD_VAR 0 18
13972: PUSH
13973: LD_VAR 0 13
13977: ARRAY
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: EMPTY
13984: PPUSH
13985: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13989: LD_VAR 0 18
13993: PUSH
13994: LD_VAR 0 13
13998: ARRAY
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: CALL_OW 310
14008: IFFALSE 14029
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14010: LD_VAR 0 18
14014: PUSH
14015: LD_VAR 0 13
14019: ARRAY
14020: PUSH
14021: LD_INT 1
14023: ARRAY
14024: PPUSH
14025: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14029: LD_ADDR_VAR 0 34
14033: PUSH
14034: LD_VAR 0 4
14038: PPUSH
14039: LD_INT 22
14041: PUSH
14042: LD_VAR 0 1
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 21
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: LD_INT 24
14066: PUSH
14067: LD_INT 1000
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 70
14087: PUSH
14088: FOR_IN
14089: IFFALSE 14117
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14091: LD_VAR 0 18
14095: PUSH
14096: LD_VAR 0 13
14100: ARRAY
14101: PUSH
14102: LD_INT 1
14104: ARRAY
14105: PPUSH
14106: LD_VAR 0 34
14110: PPUSH
14111: CALL_OW 190
14115: GO 14088
14117: POP
14118: POP
// end ;
14119: GO 13866
14121: POP
14122: POP
// end else
14123: GO 14387
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14125: LD_VAR 0 20
14129: PUSH
14130: LD_VAR 0 20
14134: PPUSH
14135: LD_INT 56
14137: PUSH
14138: EMPTY
14139: LIST
14140: PPUSH
14141: CALL_OW 72
14145: AND
14146: PUSH
14147: LD_VAR 0 29
14151: AND
14152: IFFALSE 14387
// for i := 1 to personel do
14154: LD_ADDR_VAR 0 13
14158: PUSH
14159: DOUBLE
14160: LD_INT 1
14162: DEC
14163: ST_TO_ADDR
14164: LD_VAR 0 18
14168: PUSH
14169: FOR_TO
14170: IFFALSE 14385
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14172: LD_VAR 0 18
14176: PUSH
14177: LD_VAR 0 13
14181: ARRAY
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: CALL_OW 257
14191: PUSH
14192: LD_INT 2
14194: EQUAL
14195: PUSH
14196: LD_VAR 0 18
14200: PUSH
14201: LD_VAR 0 13
14205: ARRAY
14206: PUSH
14207: LD_INT 3
14209: ARRAY
14210: PUSH
14211: LD_INT 1
14213: EQUAL
14214: AND
14215: IFFALSE 14383
// begin if not personel [ i ] [ 2 ] then
14217: LD_VAR 0 18
14221: PUSH
14222: LD_VAR 0 13
14226: ARRAY
14227: PUSH
14228: LD_INT 2
14230: ARRAY
14231: NOT
14232: IFFALSE 14349
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14234: LD_ADDR_VAR 0 18
14238: PUSH
14239: LD_VAR 0 18
14243: PPUSH
14244: LD_VAR 0 13
14248: PUSH
14249: LD_VAR 0 18
14253: PUSH
14254: LD_VAR 0 13
14258: ARRAY
14259: PUSH
14260: LD_INT 1
14262: MINUS
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: LD_VAR 0 4
14272: PPUSH
14273: LD_INT 22
14275: PUSH
14276: LD_VAR 0 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 3
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 50
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: LD_INT 30
14306: PUSH
14307: LD_INT 0
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 30
14316: PUSH
14317: LD_INT 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 70
14339: PUSH
14340: LD_INT 1
14342: ARRAY
14343: PPUSH
14344: CALL 34479 0 3
14348: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14349: LD_VAR 0 18
14353: PUSH
14354: LD_VAR 0 13
14358: ARRAY
14359: PUSH
14360: LD_INT 1
14362: ARRAY
14363: PPUSH
14364: LD_VAR 0 18
14368: PUSH
14369: LD_VAR 0 13
14373: ARRAY
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PPUSH
14379: CALL_OW 120
// end ; end ;
14383: GO 14169
14385: POP
14386: POP
// for i := 1 to personel do
14387: LD_ADDR_VAR 0 13
14391: PUSH
14392: DOUBLE
14393: LD_INT 1
14395: DEC
14396: ST_TO_ADDR
14397: LD_VAR 0 18
14401: PUSH
14402: FOR_TO
14403: IFFALSE 14444
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14405: LD_ADDR_VAR 0 21
14409: PUSH
14410: LD_VAR 0 21
14414: PUSH
14415: LD_VAR 0 18
14419: PUSH
14420: LD_VAR 0 13
14424: ARRAY
14425: PPUSH
14426: LD_INT 25
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 72
14440: ADD
14441: ST_TO_ADDR
14442: GO 14402
14444: POP
14445: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14446: LD_VAR 0 21
14450: PUSH
14451: LD_VAR 0 4
14455: PPUSH
14456: LD_INT 22
14458: PUSH
14459: LD_VAR 0 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 2
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 3
14480: PUSH
14481: LD_INT 24
14483: PUSH
14484: LD_INT 1000
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 70
14504: AND
14505: IFFALSE 15109
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14507: LD_ADDR_VAR 0 35
14511: PUSH
14512: LD_VAR 0 4
14516: PPUSH
14517: LD_INT 22
14519: PUSH
14520: LD_VAR 0 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 21
14531: PUSH
14532: LD_INT 2
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 3
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 1000
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 70
14565: PUSH
14566: FOR_IN
14567: IFFALSE 15105
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14569: LD_VAR 0 35
14573: PPUSH
14574: LD_VAR 0 6
14578: PPUSH
14579: CALL_OW 299
14583: PUSH
14584: LD_INT 5
14586: LESS
14587: IFFALSE 14882
// begin for i := 1 to vehicles do
14589: LD_ADDR_VAR 0 13
14593: PUSH
14594: DOUBLE
14595: LD_INT 1
14597: DEC
14598: ST_TO_ADDR
14599: LD_VAR 0 24
14603: PUSH
14604: FOR_TO
14605: IFFALSE 14674
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14607: LD_VAR 0 24
14611: PUSH
14612: LD_VAR 0 13
14616: ARRAY
14617: PUSH
14618: LD_INT 1
14620: ARRAY
14621: PUSH
14622: LD_VAR 0 35
14626: EQUAL
14627: IFFALSE 14648
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14629: LD_VAR 0 24
14633: PUSH
14634: LD_VAR 0 13
14638: ARRAY
14639: PUSH
14640: LD_INT 2
14642: ARRAY
14643: PPUSH
14644: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14648: LD_VAR 0 24
14652: PUSH
14653: LD_VAR 0 13
14657: ARRAY
14658: PUSH
14659: LD_INT 2
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 35
14667: PPUSH
14668: CALL_OW 189
// end ;
14672: GO 14604
14674: POP
14675: POP
// for i := 1 to personel do
14676: LD_ADDR_VAR 0 13
14680: PUSH
14681: DOUBLE
14682: LD_INT 1
14684: DEC
14685: ST_TO_ADDR
14686: LD_VAR 0 18
14690: PUSH
14691: FOR_TO
14692: IFFALSE 14880
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14694: LD_VAR 0 18
14698: PUSH
14699: LD_VAR 0 13
14703: ARRAY
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: CALL_OW 257
14713: PUSH
14714: LD_INT 3
14716: EQUAL
14717: PUSH
14718: LD_VAR 0 18
14722: PUSH
14723: LD_VAR 0 13
14727: ARRAY
14728: PUSH
14729: LD_INT 3
14731: ARRAY
14732: PUSH
14733: LD_INT 1
14735: EQUAL
14736: AND
14737: IFFALSE 14878
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14739: LD_VAR 0 18
14743: PUSH
14744: LD_VAR 0 13
14748: ARRAY
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: PPUSH
14754: CALL_OW 437
14758: IFFALSE 14814
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14760: LD_VAR 0 18
14764: PUSH
14765: LD_VAR 0 13
14769: ARRAY
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: CALL_OW 437
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PUSH
14784: LD_INT 1
14786: ARRAY
14787: PUSH
14788: LD_STRING e
14790: EQUAL
14791: IFFALSE 14814
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14793: LD_VAR 0 18
14797: PUSH
14798: LD_VAR 0 13
14802: ARRAY
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: EMPTY
14809: PPUSH
14810: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14814: LD_VAR 0 18
14818: PUSH
14819: LD_VAR 0 13
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PPUSH
14829: CALL_OW 310
14833: IFFALSE 14854
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14835: LD_VAR 0 18
14839: PUSH
14840: LD_VAR 0 13
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14854: LD_VAR 0 18
14858: PUSH
14859: LD_VAR 0 13
14863: ARRAY
14864: PUSH
14865: LD_INT 1
14867: ARRAY
14868: PPUSH
14869: LD_VAR 0 35
14873: PPUSH
14874: CALL_OW 189
// end ;
14878: GO 14691
14880: POP
14881: POP
// end ; if GetLives ( damageUnit ) < 250 then
14882: LD_VAR 0 35
14886: PPUSH
14887: CALL_OW 256
14891: PUSH
14892: LD_INT 250
14894: LESS
14895: IFFALSE 15103
// for i := 1 to personel do
14897: LD_ADDR_VAR 0 13
14901: PUSH
14902: DOUBLE
14903: LD_INT 1
14905: DEC
14906: ST_TO_ADDR
14907: LD_VAR 0 18
14911: PUSH
14912: FOR_TO
14913: IFFALSE 15101
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14915: LD_VAR 0 18
14919: PUSH
14920: LD_VAR 0 13
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 257
14934: PUSH
14935: LD_INT 3
14937: EQUAL
14938: PUSH
14939: LD_VAR 0 18
14943: PUSH
14944: LD_VAR 0 13
14948: ARRAY
14949: PUSH
14950: LD_INT 3
14952: ARRAY
14953: PUSH
14954: LD_INT 1
14956: EQUAL
14957: AND
14958: IFFALSE 15099
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14960: LD_VAR 0 18
14964: PUSH
14965: LD_VAR 0 13
14969: ARRAY
14970: PUSH
14971: LD_INT 1
14973: ARRAY
14974: PPUSH
14975: CALL_OW 437
14979: IFFALSE 15035
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14981: LD_VAR 0 18
14985: PUSH
14986: LD_VAR 0 13
14990: ARRAY
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PPUSH
14996: CALL_OW 437
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PUSH
15005: LD_INT 1
15007: ARRAY
15008: PUSH
15009: LD_STRING e
15011: EQUAL
15012: IFFALSE 15035
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15014: LD_VAR 0 18
15018: PUSH
15019: LD_VAR 0 13
15023: ARRAY
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: PPUSH
15029: EMPTY
15030: PPUSH
15031: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15035: LD_VAR 0 18
15039: PUSH
15040: LD_VAR 0 13
15044: ARRAY
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: CALL_OW 310
15054: IFFALSE 15075
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15056: LD_VAR 0 18
15060: PUSH
15061: LD_VAR 0 13
15065: ARRAY
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15075: LD_VAR 0 18
15079: PUSH
15080: LD_VAR 0 13
15084: ARRAY
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PPUSH
15090: LD_VAR 0 35
15094: PPUSH
15095: CALL_OW 189
// end ;
15099: GO 14912
15101: POP
15102: POP
// end ;
15103: GO 14566
15105: POP
15106: POP
// end else
15107: GO 15314
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15109: LD_VAR 0 21
15113: PUSH
15114: LD_VAR 0 21
15118: PPUSH
15119: LD_INT 56
15121: PUSH
15122: EMPTY
15123: LIST
15124: PPUSH
15125: CALL_OW 72
15129: AND
15130: PUSH
15131: LD_VAR 0 30
15135: AND
15136: IFFALSE 15314
// for i := 1 to personel do
15138: LD_ADDR_VAR 0 13
15142: PUSH
15143: DOUBLE
15144: LD_INT 1
15146: DEC
15147: ST_TO_ADDR
15148: LD_VAR 0 18
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15312
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15156: LD_VAR 0 18
15160: PUSH
15161: LD_VAR 0 13
15165: ARRAY
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: CALL_OW 257
15175: PUSH
15176: LD_INT 3
15178: EQUAL
15179: PUSH
15180: LD_VAR 0 18
15184: PUSH
15185: LD_VAR 0 13
15189: ARRAY
15190: PUSH
15191: LD_INT 3
15193: ARRAY
15194: PUSH
15195: LD_INT 1
15197: EQUAL
15198: AND
15199: IFFALSE 15310
// begin if not personel [ i ] [ 2 ] then
15201: LD_VAR 0 18
15205: PUSH
15206: LD_VAR 0 13
15210: ARRAY
15211: PUSH
15212: LD_INT 2
15214: ARRAY
15215: NOT
15216: IFFALSE 15276
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15218: LD_ADDR_VAR 0 18
15222: PUSH
15223: LD_VAR 0 18
15227: PPUSH
15228: LD_VAR 0 13
15232: PUSH
15233: LD_VAR 0 18
15237: PUSH
15238: LD_VAR 0 13
15242: ARRAY
15243: PUSH
15244: LD_INT 1
15246: MINUS
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PPUSH
15252: LD_VAR 0 30
15256: PUSH
15257: LD_INT 1
15259: PPUSH
15260: LD_VAR 0 30
15264: PPUSH
15265: CALL_OW 12
15269: ARRAY
15270: PPUSH
15271: CALL 34479 0 3
15275: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15276: LD_VAR 0 18
15280: PUSH
15281: LD_VAR 0 13
15285: ARRAY
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_VAR 0 18
15295: PUSH
15296: LD_VAR 0 13
15300: ARRAY
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: PPUSH
15306: CALL_OW 120
// end ;
15310: GO 15153
15312: POP
15313: POP
// for i := 1 to personel do
15314: LD_ADDR_VAR 0 13
15318: PUSH
15319: DOUBLE
15320: LD_INT 1
15322: DEC
15323: ST_TO_ADDR
15324: LD_VAR 0 18
15328: PUSH
15329: FOR_TO
15330: IFFALSE 15371
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15332: LD_ADDR_VAR 0 22
15336: PUSH
15337: LD_VAR 0 22
15341: PUSH
15342: LD_VAR 0 18
15346: PUSH
15347: LD_VAR 0 13
15351: ARRAY
15352: PPUSH
15353: LD_INT 25
15355: PUSH
15356: LD_INT 4
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 72
15367: ADD
15368: ST_TO_ADDR
15369: GO 15329
15371: POP
15372: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15373: LD_VAR 0 22
15377: PUSH
15378: LD_VAR 0 4
15382: PPUSH
15383: LD_INT 22
15385: PUSH
15386: LD_VAR 0 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 3
15407: PUSH
15408: LD_INT 24
15410: PUSH
15411: LD_INT 1000
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: PPUSH
15427: CALL_OW 70
15431: AND
15432: IFFALSE 15949
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15434: LD_ADDR_VAR 0 35
15438: PUSH
15439: LD_VAR 0 4
15443: PPUSH
15444: LD_INT 22
15446: PUSH
15447: LD_VAR 0 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 21
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 3
15468: PUSH
15469: LD_INT 24
15471: PUSH
15472: LD_INT 1000
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: PPUSH
15488: CALL_OW 70
15492: PUSH
15493: FOR_IN
15494: IFFALSE 15945
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15496: LD_VAR 0 35
15500: PPUSH
15501: LD_VAR 0 5
15505: PPUSH
15506: CALL_OW 299
15510: PUSH
15511: LD_INT 5
15513: LESS
15514: IFFALSE 15722
// for i := 1 to personel do
15516: LD_ADDR_VAR 0 13
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_VAR 0 18
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15720
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15534: LD_VAR 0 18
15538: PUSH
15539: LD_VAR 0 13
15543: ARRAY
15544: PUSH
15545: LD_INT 1
15547: ARRAY
15548: PPUSH
15549: CALL_OW 257
15553: PUSH
15554: LD_INT 4
15556: EQUAL
15557: PUSH
15558: LD_VAR 0 18
15562: PUSH
15563: LD_VAR 0 13
15567: ARRAY
15568: PUSH
15569: LD_INT 3
15571: ARRAY
15572: PUSH
15573: LD_INT 1
15575: EQUAL
15576: AND
15577: IFFALSE 15718
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15579: LD_VAR 0 18
15583: PUSH
15584: LD_VAR 0 13
15588: ARRAY
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PPUSH
15594: CALL_OW 437
15598: IFFALSE 15654
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15600: LD_VAR 0 18
15604: PUSH
15605: LD_VAR 0 13
15609: ARRAY
15610: PUSH
15611: LD_INT 1
15613: ARRAY
15614: PPUSH
15615: CALL_OW 437
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PUSH
15624: LD_INT 1
15626: ARRAY
15627: PUSH
15628: LD_STRING e
15630: EQUAL
15631: IFFALSE 15654
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15633: LD_VAR 0 18
15637: PUSH
15638: LD_VAR 0 13
15642: ARRAY
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: EMPTY
15649: PPUSH
15650: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15654: LD_VAR 0 18
15658: PUSH
15659: LD_VAR 0 13
15663: ARRAY
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL_OW 310
15673: IFFALSE 15694
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15675: LD_VAR 0 18
15679: PUSH
15680: LD_VAR 0 13
15684: ARRAY
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15694: LD_VAR 0 18
15698: PUSH
15699: LD_VAR 0 13
15703: ARRAY
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: PPUSH
15709: LD_VAR 0 35
15713: PPUSH
15714: CALL_OW 188
// end ;
15718: GO 15531
15720: POP
15721: POP
// if GetLives ( damageUnit ) < 250 then
15722: LD_VAR 0 35
15726: PPUSH
15727: CALL_OW 256
15731: PUSH
15732: LD_INT 250
15734: LESS
15735: IFFALSE 15943
// for i := 1 to personel do
15737: LD_ADDR_VAR 0 13
15741: PUSH
15742: DOUBLE
15743: LD_INT 1
15745: DEC
15746: ST_TO_ADDR
15747: LD_VAR 0 18
15751: PUSH
15752: FOR_TO
15753: IFFALSE 15941
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15755: LD_VAR 0 18
15759: PUSH
15760: LD_VAR 0 13
15764: ARRAY
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PPUSH
15770: CALL_OW 257
15774: PUSH
15775: LD_INT 4
15777: EQUAL
15778: PUSH
15779: LD_VAR 0 18
15783: PUSH
15784: LD_VAR 0 13
15788: ARRAY
15789: PUSH
15790: LD_INT 3
15792: ARRAY
15793: PUSH
15794: LD_INT 1
15796: EQUAL
15797: AND
15798: IFFALSE 15939
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15800: LD_VAR 0 18
15804: PUSH
15805: LD_VAR 0 13
15809: ARRAY
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: CALL_OW 437
15819: IFFALSE 15875
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15821: LD_VAR 0 18
15825: PUSH
15826: LD_VAR 0 13
15830: ARRAY
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: PPUSH
15836: CALL_OW 437
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: PUSH
15845: LD_INT 1
15847: ARRAY
15848: PUSH
15849: LD_STRING e
15851: EQUAL
15852: IFFALSE 15875
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15854: LD_VAR 0 18
15858: PUSH
15859: LD_VAR 0 13
15863: ARRAY
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: PPUSH
15869: EMPTY
15870: PPUSH
15871: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15875: LD_VAR 0 18
15879: PUSH
15880: LD_VAR 0 13
15884: ARRAY
15885: PUSH
15886: LD_INT 1
15888: ARRAY
15889: PPUSH
15890: CALL_OW 310
15894: IFFALSE 15915
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15896: LD_VAR 0 18
15900: PUSH
15901: LD_VAR 0 13
15905: ARRAY
15906: PUSH
15907: LD_INT 1
15909: ARRAY
15910: PPUSH
15911: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15915: LD_VAR 0 18
15919: PUSH
15920: LD_VAR 0 13
15924: ARRAY
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: PPUSH
15930: LD_VAR 0 35
15934: PPUSH
15935: CALL_OW 188
// end ;
15939: GO 15752
15941: POP
15942: POP
// end ;
15943: GO 15493
15945: POP
15946: POP
// end else
15947: GO 16154
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
15949: LD_VAR 0 22
15953: PUSH
15954: LD_VAR 0 22
15958: PPUSH
15959: LD_INT 56
15961: PUSH
15962: EMPTY
15963: LIST
15964: PPUSH
15965: CALL_OW 72
15969: AND
15970: PUSH
15971: LD_VAR 0 31
15975: AND
15976: IFFALSE 16154
// for i := 1 to personel do
15978: LD_ADDR_VAR 0 13
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_VAR 0 18
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16152
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15996: LD_VAR 0 18
16000: PUSH
16001: LD_VAR 0 13
16005: ARRAY
16006: PUSH
16007: LD_INT 1
16009: ARRAY
16010: PPUSH
16011: CALL_OW 257
16015: PUSH
16016: LD_INT 4
16018: EQUAL
16019: PUSH
16020: LD_VAR 0 18
16024: PUSH
16025: LD_VAR 0 13
16029: ARRAY
16030: PUSH
16031: LD_INT 3
16033: ARRAY
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: AND
16039: IFFALSE 16150
// begin if not personel [ i ] [ 2 ] then
16041: LD_VAR 0 18
16045: PUSH
16046: LD_VAR 0 13
16050: ARRAY
16051: PUSH
16052: LD_INT 2
16054: ARRAY
16055: NOT
16056: IFFALSE 16116
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16058: LD_ADDR_VAR 0 18
16062: PUSH
16063: LD_VAR 0 18
16067: PPUSH
16068: LD_VAR 0 13
16072: PUSH
16073: LD_VAR 0 18
16077: PUSH
16078: LD_VAR 0 13
16082: ARRAY
16083: PUSH
16084: LD_INT 1
16086: MINUS
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: LD_VAR 0 31
16096: PUSH
16097: LD_INT 1
16099: PPUSH
16100: LD_VAR 0 31
16104: PPUSH
16105: CALL_OW 12
16109: ARRAY
16110: PPUSH
16111: CALL 34479 0 3
16115: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16116: LD_VAR 0 18
16120: PUSH
16121: LD_VAR 0 13
16125: ARRAY
16126: PUSH
16127: LD_INT 1
16129: ARRAY
16130: PPUSH
16131: LD_VAR 0 18
16135: PUSH
16136: LD_VAR 0 13
16140: ARRAY
16141: PUSH
16142: LD_INT 2
16144: ARRAY
16145: PPUSH
16146: CALL_OW 120
// end ;
16150: GO 15993
16152: POP
16153: POP
// wait ( 0 0$01 ) ;
16154: LD_INT 35
16156: PPUSH
16157: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16161: LD_VAR 0 24
16165: PUSH
16166: LD_VAR 0 8
16170: LESS
16171: PUSH
16172: LD_VAR 0 30
16176: AND
16177: IFFALSE 16427
// begin tmp = vehiclesAmount - vehicles ;
16179: LD_ADDR_VAR 0 15
16183: PUSH
16184: LD_VAR 0 8
16188: PUSH
16189: LD_VAR 0 24
16193: MINUS
16194: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16195: LD_ADDR_VAR 0 27
16199: PUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL 7735 0 2
16214: ST_TO_ADDR
// for i := 1 to tmp do
16215: LD_ADDR_VAR 0 13
16219: PUSH
16220: DOUBLE
16221: LD_INT 1
16223: DEC
16224: ST_TO_ADDR
16225: LD_VAR 0 15
16229: PUSH
16230: FOR_TO
16231: IFFALSE 16423
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16233: LD_ADDR_VAR 0 15
16237: PUSH
16238: LD_VAR 0 27
16242: PUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_VAR 0 27
16250: PPUSH
16251: CALL_OW 12
16255: ARRAY
16256: ST_TO_ADDR
// if tmp then
16257: LD_VAR 0 15
16261: IFFALSE 16421
// begin if tmp in [ 34 , 14 , 71 ] then
16263: LD_VAR 0 15
16267: PUSH
16268: LD_INT 34
16270: PUSH
16271: LD_INT 14
16273: PUSH
16274: LD_INT 71
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: IN
16282: IFFALSE 16320
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16284: LD_ADDR_VAR 0 28
16288: PUSH
16289: LD_INT 4
16291: PUSH
16292: EMPTY
16293: LIST
16294: PUSH
16295: LD_INT 14
16297: PUSH
16298: EMPTY
16299: LIST
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: EMPTY
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: LD_VAR 0 2
16316: ARRAY
16317: ST_TO_ADDR
16318: GO 16378
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16320: LD_ADDR_VAR 0 28
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: LD_INT 4
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 13
16341: PUSH
16342: LD_INT 14
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 21
16351: PUSH
16352: LD_INT 23
16354: PUSH
16355: LD_INT 24
16357: PUSH
16358: LD_INT 22
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: PUSH
16372: LD_VAR 0 2
16376: ARRAY
16377: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16378: LD_VAR 0 30
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_VAR 0 28
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_VAR 0 28
16399: PPUSH
16400: CALL_OW 12
16404: ARRAY
16405: PPUSH
16406: LD_INT 1
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_VAR 0 15
16416: PPUSH
16417: CALL_OW 185
// end ; end ;
16421: GO 16230
16423: POP
16424: POP
// end else
16425: GO 16440
// ComCancel ( factory [ 1 ] ) ;
16427: LD_VAR 0 30
16431: PUSH
16432: LD_INT 1
16434: ARRAY
16435: PPUSH
16436: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16440: LD_ADDR_VAR 0 23
16444: PUSH
16445: LD_VAR 0 4
16449: PPUSH
16450: LD_INT 22
16452: PUSH
16453: LD_VAR 0 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 21
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PPUSH
16476: CALL_OW 70
16480: PUSH
16481: FOR_IN
16482: IFFALSE 16652
// begin vehicleInList = false ;
16484: LD_ADDR_VAR 0 25
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// for i := 1 to vehicles do
16492: LD_ADDR_VAR 0 13
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_VAR 0 24
16506: PUSH
16507: FOR_TO
16508: IFFALSE 16538
// begin if vehicle in vehicles [ i ] then
16510: LD_VAR 0 23
16514: PUSH
16515: LD_VAR 0 24
16519: PUSH
16520: LD_VAR 0 13
16524: ARRAY
16525: IN
16526: IFFALSE 16536
// vehicleInList = true ;
16528: LD_ADDR_VAR 0 25
16532: PUSH
16533: LD_INT 1
16535: ST_TO_ADDR
// end ;
16536: GO 16507
16538: POP
16539: POP
// if not vehicleInList then
16540: LD_VAR 0 25
16544: NOT
16545: IFFALSE 16650
// if vehicles < vehiclesToAttackAmount then
16547: LD_VAR 0 24
16551: PUSH
16552: LD_VAR 0 10
16556: LESS
16557: IFFALSE 16609
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16559: LD_ADDR_VAR 0 24
16563: PUSH
16564: LD_VAR 0 24
16568: PUSH
16569: LD_VAR 0 23
16573: PUSH
16574: LD_VAR 0 23
16578: PPUSH
16579: CALL_OW 313
16583: PUSH
16584: LD_INT 1
16586: ARRAY
16587: PUSH
16588: LD_VAR 0 23
16592: PPUSH
16593: CALL_OW 302
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: ADD
16606: ST_TO_ADDR
16607: GO 16650
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16609: LD_ADDR_VAR 0 24
16613: PUSH
16614: LD_VAR 0 24
16618: PUSH
16619: LD_VAR 0 23
16623: PUSH
16624: LD_VAR 0 23
16628: PPUSH
16629: CALL_OW 313
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: ADD
16649: ST_TO_ADDR
// end ;
16650: GO 16481
16652: POP
16653: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16654: LD_ADDR_VAR 0 37
16658: PUSH
16659: LD_VAR 0 7
16663: PPUSH
16664: LD_INT 81
16666: PUSH
16667: LD_VAR 0 1
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 70
16680: PUSH
16681: FOR_IN
16682: IFFALSE 16861
// begin defenceUnits = [ ] ;
16684: LD_ADDR_VAR 0 26
16688: PUSH
16689: EMPTY
16690: ST_TO_ADDR
// for i := 1 to personel do
16691: LD_ADDR_VAR 0 13
16695: PUSH
16696: DOUBLE
16697: LD_INT 1
16699: DEC
16700: ST_TO_ADDR
16701: LD_VAR 0 18
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16757
// if personel [ i ] [ 3 ] = 2 then
16709: LD_VAR 0 18
16713: PUSH
16714: LD_VAR 0 13
16718: ARRAY
16719: PUSH
16720: LD_INT 3
16722: ARRAY
16723: PUSH
16724: LD_INT 2
16726: EQUAL
16727: IFFALSE 16755
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16729: LD_ADDR_VAR 0 26
16733: PUSH
16734: LD_VAR 0 26
16738: PUSH
16739: LD_VAR 0 18
16743: PUSH
16744: LD_VAR 0 13
16748: ARRAY
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: ADD
16754: ST_TO_ADDR
16755: GO 16706
16757: POP
16758: POP
// for i := 1 to vehicles do
16759: LD_ADDR_VAR 0 13
16763: PUSH
16764: DOUBLE
16765: LD_INT 1
16767: DEC
16768: ST_TO_ADDR
16769: LD_VAR 0 24
16773: PUSH
16774: FOR_TO
16775: IFFALSE 16825
// if vehicles [ i ] [ 3 ] = 2 then
16777: LD_VAR 0 24
16781: PUSH
16782: LD_VAR 0 13
16786: ARRAY
16787: PUSH
16788: LD_INT 3
16790: ARRAY
16791: PUSH
16792: LD_INT 2
16794: EQUAL
16795: IFFALSE 16823
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16797: LD_ADDR_VAR 0 26
16801: PUSH
16802: LD_VAR 0 26
16806: PUSH
16807: LD_VAR 0 24
16811: PUSH
16812: LD_VAR 0 13
16816: ARRAY
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: ADD
16822: ST_TO_ADDR
16823: GO 16774
16825: POP
16826: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16827: LD_VAR 0 26
16831: PPUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 60
16837: PUSH
16838: EMPTY
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 72
16849: PPUSH
16850: LD_VAR 0 37
16854: PPUSH
16855: CALL_OW 175
// end ;
16859: GO 16681
16861: POP
16862: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16863: LD_ADDR_VAR 0 38
16867: PUSH
16868: LD_INT 22
16870: PUSH
16871: LD_VAR 0 1
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: LD_INT 30
16885: PUSH
16886: LD_INT 31
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 30
16895: PUSH
16896: LD_INT 32
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 33
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 30
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 30
16925: PUSH
16926: LD_INT 5
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16950: LD_ADDR_VAR 0 39
16954: PUSH
16955: LD_INT 81
16957: PUSH
16958: LD_VAR 0 1
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 21
16969: PUSH
16970: LD_INT 3
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 58
16979: PUSH
16980: EMPTY
16981: LIST
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16993: LD_VAR 0 38
16997: PUSH
16998: LD_VAR 0 39
17002: AND
17003: IFFALSE 17073
// for i in attackBuildings do
17005: LD_ADDR_VAR 0 13
17009: PUSH
17010: LD_VAR 0 38
17014: PUSH
17015: FOR_IN
17016: IFFALSE 17071
// for j in enemyBuildings do
17018: LD_ADDR_VAR 0 14
17022: PUSH
17023: LD_VAR 0 39
17027: PUSH
17028: FOR_IN
17029: IFFALSE 17067
// if GetDistUnits ( i , j ) < 12 then
17031: LD_VAR 0 13
17035: PPUSH
17036: LD_VAR 0 14
17040: PPUSH
17041: CALL_OW 296
17045: PUSH
17046: LD_INT 12
17048: LESS
17049: IFFALSE 17065
// ComAttackUnit ( i , j ) ;
17051: LD_VAR 0 13
17055: PPUSH
17056: LD_VAR 0 14
17060: PPUSH
17061: CALL_OW 115
17065: GO 17028
17067: POP
17068: POP
17069: GO 17015
17071: POP
17072: POP
// until not personel or not enableOmicronAI ;
17073: LD_VAR 0 18
17077: NOT
17078: PUSH
17079: LD_EXP 29
17083: NOT
17084: OR
17085: IFFALSE 12132
// end ;
17087: LD_VAR 0 12
17091: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
17096: PPUSH
// weapons = [ ru_gun ] ;
17097: LD_ADDR_VAR 0 3
17101: PUSH
17102: LD_INT 44
17104: PUSH
17105: EMPTY
17106: LIST
17107: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_EXP 70
17117: PUSH
17118: FOR_IN
17119: IFFALSE 17151
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17121: LD_VAR 0 2
17125: PPUSH
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 1
17133: PPUSH
17134: LD_VAR 0 3
17138: PPUSH
17139: CALL_OW 12
17143: ARRAY
17144: PPUSH
17145: CALL_OW 208
17149: GO 17118
17151: POP
17152: POP
// end ;
17153: LD_VAR 0 1
17157: RET
// export function KirovProduceVehicles ( factory ) ; begin
17158: LD_INT 0
17160: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17161: LD_VAR 0 1
17165: PPUSH
17166: LD_INT 21
17168: PPUSH
17169: LD_INT 1
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: LD_INT 51
17177: PPUSH
17178: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17182: LD_VAR 0 1
17186: PPUSH
17187: LD_INT 21
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: LD_INT 1
17195: PPUSH
17196: LD_INT 51
17198: PPUSH
17199: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17203: LD_VAR 0 1
17207: PPUSH
17208: LD_INT 21
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_INT 1
17216: PPUSH
17217: LD_INT 51
17219: PPUSH
17220: CALL_OW 185
// case Difficulty of 1 :
17224: LD_OWVAR 67
17228: PUSH
17229: LD_INT 1
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17360
17237: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 23
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: PPUSH
17256: LD_INT 2
17258: PPUSH
17259: CALL_OW 12
17263: ARRAY
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: LD_INT 1
17270: PPUSH
17271: LD_INT 43
17273: PPUSH
17274: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17278: LD_VAR 0 1
17282: PPUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 1
17295: PPUSH
17296: LD_INT 2
17298: PPUSH
17299: CALL_OW 12
17303: ARRAY
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: LD_INT 43
17313: PPUSH
17314: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17318: LD_VAR 0 1
17322: PPUSH
17323: LD_INT 21
17325: PUSH
17326: LD_INT 23
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 2
17338: PPUSH
17339: CALL_OW 12
17343: ARRAY
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: LD_INT 1
17350: PPUSH
17351: LD_INT 44
17353: PPUSH
17354: CALL_OW 185
// end ; 2 :
17358: GO 17623
17360: LD_INT 2
17362: DOUBLE
17363: EQUAL
17364: IFTRUE 17368
17366: GO 17491
17368: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_INT 21
17376: PUSH
17377: LD_INT 23
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 12
17394: ARRAY
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_INT 42
17404: PPUSH
17405: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17409: LD_VAR 0 1
17413: PPUSH
17414: LD_INT 21
17416: PUSH
17417: LD_INT 23
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: PPUSH
17427: LD_INT 2
17429: PPUSH
17430: CALL_OW 12
17434: ARRAY
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_INT 1
17441: PPUSH
17442: LD_INT 43
17444: PPUSH
17445: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17449: LD_VAR 0 1
17453: PPUSH
17454: LD_INT 21
17456: PUSH
17457: LD_INT 23
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 1
17466: PPUSH
17467: LD_INT 2
17469: PPUSH
17470: CALL_OW 12
17474: ARRAY
17475: PPUSH
17476: LD_INT 1
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 44
17484: PPUSH
17485: CALL_OW 185
// end ; 3 :
17489: GO 17623
17491: LD_INT 3
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17622
17499: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17500: LD_VAR 0 1
17504: PPUSH
17505: LD_INT 21
17507: PUSH
17508: LD_INT 23
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: CALL_OW 12
17525: ARRAY
17526: PPUSH
17527: LD_INT 1
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: LD_INT 42
17535: PPUSH
17536: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 23
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_INT 2
17560: PPUSH
17561: CALL_OW 12
17565: ARRAY
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 42
17575: PPUSH
17576: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17580: LD_VAR 0 1
17584: PPUSH
17585: LD_INT 21
17587: PUSH
17588: LD_INT 23
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 2
17600: PPUSH
17601: CALL_OW 12
17605: ARRAY
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_INT 44
17615: PPUSH
17616: CALL_OW 185
// end ; end ;
17620: GO 17623
17622: POP
// end ;
17623: LD_VAR 0 2
17627: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
// vehicles = [ ] ;
17635: LD_ADDR_VAR 0 3
17639: PUSH
17640: EMPTY
17641: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17642: LD_ADDR_VAR 0 4
17646: PUSH
17647: LD_EXP 74
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17702
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17655: LD_ADDR_VAR 0 3
17659: PUSH
17660: LD_VAR 0 3
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: LD_VAR 0 4
17672: PUSH
17673: LD_VAR 0 4
17677: PPUSH
17678: CALL_OW 313
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: PPUSH
17695: CALL_OW 2
17699: ST_TO_ADDR
17700: GO 17652
17702: POP
17703: POP
// repeat for i := 1 to vehicles do
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: DOUBLE
17710: LD_INT 1
17712: DEC
17713: ST_TO_ADDR
17714: LD_VAR 0 3
17718: PUSH
17719: FOR_TO
17720: IFFALSE 17758
// if vehicles [ i ] [ 3 ] = 1 then
17722: LD_VAR 0 3
17726: PUSH
17727: LD_VAR 0 2
17731: ARRAY
17732: PUSH
17733: LD_INT 3
17735: ARRAY
17736: PUSH
17737: LD_INT 1
17739: EQUAL
17740: IFFALSE 17756
// goodVehs = goodVehs + 1 ;
17742: LD_ADDR_VAR 0 5
17746: PUSH
17747: LD_VAR 0 5
17751: PUSH
17752: LD_INT 1
17754: PLUS
17755: ST_TO_ADDR
17756: GO 17719
17758: POP
17759: POP
// if goodVehs = vehicles then
17760: LD_VAR 0 5
17764: PUSH
17765: LD_VAR 0 3
17769: EQUAL
17770: IFFALSE 17819
// for i := 1 to vehicles do
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: DOUBLE
17778: LD_INT 1
17780: DEC
17781: ST_TO_ADDR
17782: LD_VAR 0 3
17786: PUSH
17787: FOR_TO
17788: IFFALSE 17817
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
17790: LD_VAR 0 3
17794: PUSH
17795: LD_VAR 0 2
17799: ARRAY
17800: PUSH
17801: LD_INT 1
17803: ARRAY
17804: PPUSH
17805: LD_INT 26
17807: PPUSH
17808: LD_INT 35
17810: PPUSH
17811: CALL_OW 114
17815: GO 17787
17817: POP
17818: POP
// goodVehs = 0 ;
17819: LD_ADDR_VAR 0 5
17823: PUSH
17824: LD_INT 0
17826: ST_TO_ADDR
// for i := 1 to vehicles do
17827: LD_ADDR_VAR 0 2
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_VAR 0 3
17841: PUSH
17842: FOR_TO
17843: IFFALSE 18344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17845: LD_VAR 0 3
17849: PUSH
17850: LD_VAR 0 2
17854: ARRAY
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: PPUSH
17860: CALL_OW 256
17864: PUSH
17865: LD_INT 500
17867: LESS
17868: PUSH
17869: LD_VAR 0 3
17873: PUSH
17874: LD_VAR 0 2
17878: ARRAY
17879: PUSH
17880: LD_INT 1
17882: ARRAY
17883: PPUSH
17884: LD_INT 78
17886: PPUSH
17887: LD_INT 39
17889: PPUSH
17890: CALL_OW 297
17894: PUSH
17895: LD_INT 9
17897: LESS
17898: NOT
17899: AND
17900: IFFALSE 17965
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
17902: LD_ADDR_VAR 0 3
17906: PUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_VAR 0 2
17916: PUSH
17917: LD_VAR 0 3
17921: PUSH
17922: LD_VAR 0 2
17926: ARRAY
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: LD_INT 2
17934: PPUSH
17935: CALL 34479 0 3
17939: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
17940: LD_VAR 0 3
17944: PUSH
17945: LD_VAR 0 2
17949: ARRAY
17950: PUSH
17951: LD_INT 1
17953: ARRAY
17954: PPUSH
17955: LD_INT 78
17957: PPUSH
17958: LD_INT 39
17960: PPUSH
17961: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_VAR 0 2
17974: ARRAY
17975: PUSH
17976: LD_INT 1
17978: ARRAY
17979: PPUSH
17980: CALL_OW 256
17984: PUSH
17985: LD_INT 500
17987: LESS
17988: PUSH
17989: LD_VAR 0 3
17993: PUSH
17994: LD_VAR 0 2
17998: ARRAY
17999: PUSH
18000: LD_INT 1
18002: ARRAY
18003: PPUSH
18004: LD_INT 78
18006: PPUSH
18007: LD_INT 39
18009: PPUSH
18010: CALL_OW 297
18014: PUSH
18015: LD_INT 9
18017: LESS
18018: AND
18019: IFFALSE 18074
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18021: LD_VAR 0 3
18025: PUSH
18026: LD_VAR 0 2
18030: ARRAY
18031: PUSH
18032: LD_INT 2
18034: ARRAY
18035: PPUSH
18036: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18040: LD_VAR 0 3
18044: PUSH
18045: LD_VAR 0 2
18049: ARRAY
18050: PUSH
18051: LD_INT 2
18053: ARRAY
18054: PPUSH
18055: LD_VAR 0 3
18059: PUSH
18060: LD_VAR 0 2
18064: ARRAY
18065: PUSH
18066: LD_INT 1
18068: ARRAY
18069: PPUSH
18070: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18074: LD_VAR 0 3
18078: PUSH
18079: LD_VAR 0 2
18083: ARRAY
18084: PUSH
18085: LD_INT 1
18087: ARRAY
18088: PPUSH
18089: CALL_OW 256
18093: PUSH
18094: LD_INT 1000
18096: EQUAL
18097: PUSH
18098: LD_VAR 0 3
18102: PUSH
18103: LD_VAR 0 2
18107: ARRAY
18108: PUSH
18109: LD_INT 3
18111: ARRAY
18112: PUSH
18113: LD_INT 2
18115: EQUAL
18116: AND
18117: IFFALSE 18191
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_VAR 0 3
18128: PPUSH
18129: LD_VAR 0 2
18133: PUSH
18134: LD_VAR 0 3
18138: PUSH
18139: LD_VAR 0 2
18143: ARRAY
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL 34479 0 3
18156: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18157: LD_VAR 0 3
18161: PUSH
18162: LD_VAR 0 2
18166: ARRAY
18167: PUSH
18168: LD_INT 2
18170: ARRAY
18171: PPUSH
18172: LD_VAR 0 3
18176: PUSH
18177: LD_VAR 0 2
18181: ARRAY
18182: PUSH
18183: LD_INT 1
18185: ARRAY
18186: PPUSH
18187: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18191: LD_VAR 0 3
18195: PUSH
18196: LD_VAR 0 2
18200: ARRAY
18201: PUSH
18202: LD_INT 1
18204: ARRAY
18205: PPUSH
18206: CALL_OW 256
18210: PUSH
18211: LD_INT 250
18213: LESS
18214: IFFALSE 18241
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18216: LD_ADDR_VAR 0 3
18220: PUSH
18221: LD_VAR 0 3
18225: PUSH
18226: LD_VAR 0 3
18230: PUSH
18231: LD_VAR 0 2
18235: ARRAY
18236: PUSH
18237: EMPTY
18238: LIST
18239: DIFF
18240: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18241: LD_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: ARRAY
18251: PUSH
18252: LD_INT 2
18254: ARRAY
18255: PPUSH
18256: CALL_OW 256
18260: PUSH
18261: LD_INT 250
18263: LESS
18264: PUSH
18265: LD_VAR 0 3
18269: PUSH
18270: LD_VAR 0 2
18274: ARRAY
18275: PUSH
18276: LD_INT 1
18278: ARRAY
18279: PPUSH
18280: CALL_OW 256
18284: PUSH
18285: LD_INT 250
18287: GREATER
18288: AND
18289: IFFALSE 18342
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18291: LD_ADDR_EXP 30
18295: PUSH
18296: LD_EXP 30
18300: PUSH
18301: LD_VAR 0 3
18305: PUSH
18306: LD_VAR 0 2
18310: ARRAY
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: ADD
18316: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18317: LD_ADDR_VAR 0 3
18321: PUSH
18322: LD_VAR 0 3
18326: PUSH
18327: LD_VAR 0 3
18331: PUSH
18332: LD_VAR 0 2
18336: ARRAY
18337: PUSH
18338: EMPTY
18339: LIST
18340: DIFF
18341: ST_TO_ADDR
// end ; end ;
18342: GO 17842
18344: POP
18345: POP
// wait ( 0 0$1 ) ;
18346: LD_INT 35
18348: PPUSH
18349: CALL_OW 67
// until omicronSurrender ;
18353: LD_EXP 23
18357: IFFALSE 17704
// end ;
18359: LD_VAR 0 1
18363: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18364: LD_INT 0
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
// inBase = false ;
18380: LD_ADDR_VAR 0 15
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18388: LD_ADDR_VAR 0 8
18392: PUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_INT 22
18400: PUSH
18401: LD_INT 3
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: PPUSH
18411: CALL_OW 70
18415: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18416: LD_ADDR_VAR 0 9
18420: PUSH
18421: LD_VAR 0 2
18425: PPUSH
18426: CALL_OW 435
18430: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18431: LD_ADDR_VAR 0 12
18435: PUSH
18436: LD_VAR 0 1
18440: PPUSH
18441: LD_INT 50
18443: PUSH
18444: EMPTY
18445: LIST
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 25
18462: PUSH
18463: LD_INT 3
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 21
18472: PUSH
18473: LD_INT 2
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 72
18494: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18495: LD_ADDR_VAR 0 13
18499: PUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: LD_INT 50
18507: PUSH
18508: EMPTY
18509: LIST
18510: PUSH
18511: LD_INT 25
18513: PUSH
18514: LD_INT 4
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PPUSH
18525: CALL_OW 72
18529: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18530: LD_ADDR_VAR 0 14
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: LD_INT 3
18542: PUSH
18543: LD_INT 24
18545: PUSH
18546: LD_INT 1000
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 72
18561: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18562: LD_ADDR_VAR 0 6
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: PPUSH
18580: CALL_OW 69
18584: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18585: LD_ADDR_VAR 0 5
18589: PUSH
18590: LD_VAR 0 1
18594: PPUSH
18595: LD_INT 50
18597: PUSH
18598: EMPTY
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: PPUSH
18604: CALL_OW 72
18608: PUSH
18609: FOR_IN
18610: IFFALSE 19328
// begin if attackUnits and medics then
18612: LD_VAR 0 12
18616: PUSH
18617: LD_VAR 0 13
18621: AND
18622: IFFALSE 18689
// begin if damageUnits then
18624: LD_VAR 0 14
18628: IFFALSE 18650
// ComHeal ( medics , damageUnits [ 1 ] ) else
18630: LD_VAR 0 13
18634: PPUSH
18635: LD_VAR 0 14
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PPUSH
18644: CALL_OW 128
18648: GO 18687
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18650: LD_VAR 0 13
18654: PPUSH
18655: LD_VAR 0 12
18659: PUSH
18660: LD_INT 1
18662: ARRAY
18663: PPUSH
18664: CALL_OW 250
18668: PPUSH
18669: LD_VAR 0 12
18673: PUSH
18674: LD_INT 1
18676: ARRAY
18677: PPUSH
18678: CALL_OW 251
18682: PPUSH
18683: CALL_OW 111
// end else
18687: GO 18718
// begin if not attackUnits and medics then
18689: LD_VAR 0 12
18693: NOT
18694: PUSH
18695: LD_VAR 0 13
18699: AND
18700: IFFALSE 18718
// attackUnits = attackUnits ^ medics ;
18702: LD_ADDR_VAR 0 12
18706: PUSH
18707: LD_VAR 0 12
18711: PUSH
18712: LD_VAR 0 13
18716: ADD
18717: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
18718: LD_ADDR_VAR 0 4
18722: PUSH
18723: DOUBLE
18724: LD_INT 1
18726: DEC
18727: ST_TO_ADDR
18728: LD_VAR 0 9
18732: PUSH
18733: LD_INT 2
18735: DIVREAL
18736: PUSH
18737: FOR_TO
18738: IFFALSE 18777
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
18740: LD_VAR 0 12
18744: PPUSH
18745: LD_VAR 0 9
18749: PUSH
18750: LD_VAR 0 4
18754: ARRAY
18755: PPUSH
18756: LD_VAR 0 9
18760: PUSH
18761: LD_VAR 0 4
18765: PUSH
18766: LD_INT 1
18768: PLUS
18769: ARRAY
18770: PPUSH
18771: CALL_OW 176
18775: GO 18737
18777: POP
18778: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
18779: LD_VAR 0 12
18783: PPUSH
18784: LD_INT 21
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 3
18796: PUSH
18797: LD_INT 60
18799: PUSH
18800: EMPTY
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PPUSH
18811: CALL_OW 72
18815: PPUSH
18816: LD_INT 27
18818: PPUSH
18819: LD_INT 34
18821: PPUSH
18822: CALL_OW 111
// wait ( 0 0$01 ) ;
18826: LD_INT 35
18828: PPUSH
18829: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
18833: LD_VAR 0 8
18837: PUSH
18838: LD_VAR 0 12
18842: PPUSH
18843: LD_INT 21
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 60
18858: PUSH
18859: EMPTY
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL_OW 72
18874: AND
18875: IFFALSE 19058
// begin for playerUnit in playerUnits do
18877: LD_ADDR_VAR 0 7
18881: PUSH
18882: LD_VAR 0 6
18886: PUSH
18887: FOR_IN
18888: IFFALSE 19054
// begin if Attacks ( playerUnit ) then
18890: LD_VAR 0 7
18894: PPUSH
18895: CALL_OW 320
18899: IFFALSE 18986
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
18901: LD_VAR 0 7
18905: PPUSH
18906: CALL_OW 320
18910: PUSH
18911: LD_VAR 0 1
18915: IN
18916: PUSH
18917: LD_VAR 0 7
18921: PPUSH
18922: LD_VAR 0 5
18926: PPUSH
18927: CALL_OW 296
18931: PUSH
18932: LD_INT 13
18934: LESS
18935: AND
18936: IFFALSE 18984
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
18938: LD_VAR 0 12
18942: PPUSH
18943: LD_INT 21
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 3
18955: PUSH
18956: LD_INT 60
18958: PUSH
18959: EMPTY
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 72
18974: PPUSH
18975: LD_VAR 0 7
18979: PPUSH
18980: CALL_OW 115
18984: GO 19052
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
18986: LD_ADDR_VAR 0 10
18990: PUSH
18991: LD_VAR 0 8
18995: PPUSH
18996: LD_VAR 0 5
19000: PPUSH
19001: CALL_OW 74
19005: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19006: LD_VAR 0 12
19010: PPUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 3
19023: PUSH
19024: LD_INT 60
19026: PUSH
19027: EMPTY
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 72
19042: PPUSH
19043: LD_VAR 0 10
19047: PPUSH
19048: CALL_OW 115
// end ; end ;
19052: GO 18887
19054: POP
19055: POP
// end else
19056: GO 19105
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19058: LD_VAR 0 12
19062: PPUSH
19063: LD_INT 21
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: LD_INT 60
19078: PUSH
19079: EMPTY
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_INT 27
19097: PPUSH
19098: LD_INT 34
19100: PPUSH
19101: CALL_OW 111
// if enemyUnitsOnRoad then
19105: LD_VAR 0 8
19109: IFFALSE 19264
// begin for playerUnit in playerUnits do
19111: LD_ADDR_VAR 0 7
19115: PUSH
19116: LD_VAR 0 6
19120: PUSH
19121: FOR_IN
19122: IFFALSE 19260
// begin if Attacks ( playerUnit ) then
19124: LD_VAR 0 7
19128: PPUSH
19129: CALL_OW 320
19133: IFFALSE 19206
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19135: LD_VAR 0 7
19139: PPUSH
19140: CALL_OW 320
19144: PUSH
19145: LD_VAR 0 1
19149: IN
19150: PUSH
19151: LD_VAR 0 7
19155: PPUSH
19156: LD_VAR 0 5
19160: PPUSH
19161: CALL_OW 296
19165: PUSH
19166: LD_INT 13
19168: LESS
19169: AND
19170: IFFALSE 19204
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19172: LD_VAR 0 12
19176: PPUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: PPUSH
19190: CALL_OW 72
19194: PPUSH
19195: LD_VAR 0 7
19199: PPUSH
19200: CALL_OW 115
19204: GO 19258
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19206: LD_ADDR_VAR 0 10
19210: PUSH
19211: LD_VAR 0 8
19215: PPUSH
19216: LD_VAR 0 5
19220: PPUSH
19221: CALL_OW 74
19225: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19226: LD_VAR 0 12
19230: PPUSH
19231: LD_INT 21
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: PPUSH
19244: CALL_OW 72
19248: PPUSH
19249: LD_VAR 0 10
19253: PPUSH
19254: CALL_OW 115
// end ; end ;
19258: GO 19121
19260: POP
19261: POP
// end else
19262: GO 19297
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19264: LD_VAR 0 12
19268: PPUSH
19269: LD_INT 21
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: PPUSH
19282: CALL_OW 72
19286: PPUSH
19287: LD_INT 27
19289: PPUSH
19290: LD_INT 34
19292: PPUSH
19293: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19297: LD_VAR 0 5
19301: PPUSH
19302: LD_INT 27
19304: PPUSH
19305: LD_INT 34
19307: PPUSH
19308: CALL_OW 297
19312: PUSH
19313: LD_INT 5
19315: LESS
19316: IFFALSE 19326
// inBase = true ;
19318: LD_ADDR_VAR 0 15
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// end ;
19326: GO 18609
19328: POP
19329: POP
// wait ( 0 0$1 ) ;
19330: LD_INT 35
19332: PPUSH
19333: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19337: LD_VAR 0 1
19341: PPUSH
19342: LD_INT 50
19344: PUSH
19345: EMPTY
19346: LIST
19347: PPUSH
19348: CALL_OW 72
19352: PUSH
19353: LD_INT 0
19355: EQUAL
19356: PUSH
19357: LD_VAR 0 15
19361: OR
19362: IFFALSE 18388
// ComMoveXY ( units , 27 , 34 ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_INT 27
19371: PPUSH
19372: LD_INT 34
19374: PPUSH
19375: CALL_OW 111
// for i := 1 to units do
19379: LD_ADDR_VAR 0 4
19383: PUSH
19384: DOUBLE
19385: LD_INT 1
19387: DEC
19388: ST_TO_ADDR
19389: LD_VAR 0 1
19393: PUSH
19394: FOR_TO
19395: IFFALSE 19430
// if IsOk ( units [ i ] ) then
19397: LD_VAR 0 1
19401: PUSH
19402: LD_VAR 0 4
19406: ARRAY
19407: PPUSH
19408: CALL_OW 302
19412: IFFALSE 19428
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
19414: LD_ADDR_EXP 12
19418: PUSH
19419: LD_EXP 12
19423: PUSH
19424: LD_INT 1
19426: PLUS
19427: ST_TO_ADDR
19428: GO 19394
19430: POP
19431: POP
// amSupportTroops = amSupportTroops diff units ;
19432: LD_ADDR_EXP 82
19436: PUSH
19437: LD_EXP 82
19441: PUSH
19442: LD_VAR 0 1
19446: DIFF
19447: ST_TO_ADDR
// newBase = amBase ;
19448: LD_ADDR_VAR 0 16
19452: PUSH
19453: LD_EXP 84
19457: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
19458: LD_ADDR_VAR 0 16
19462: PUSH
19463: LD_VAR 0 16
19467: PUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 50
19475: PUSH
19476: EMPTY
19477: LIST
19478: PPUSH
19479: CALL_OW 72
19483: ADD
19484: ST_TO_ADDR
// amBase = newBase ;
19485: LD_ADDR_EXP 84
19489: PUSH
19490: LD_VAR 0 16
19494: ST_TO_ADDR
// end ; end_of_file
19495: LD_VAR 0 3
19499: RET
// export function Lose_Burlak ; begin
19500: LD_INT 0
19502: PPUSH
// YouLost ( Burlak ) ;
19503: LD_STRING Burlak
19505: PPUSH
19506: CALL_OW 104
// end ;
19510: LD_VAR 0 1
19514: RET
// export function Lose_Omicron ; begin
19515: LD_INT 0
19517: PPUSH
// YouLost ( Omicron ) ;
19518: LD_STRING Omicron
19520: PPUSH
19521: CALL_OW 104
// end ;
19525: LD_VAR 0 1
19529: RET
// export function Lose_Vehicles ; begin
19530: LD_INT 0
19532: PPUSH
// YouLost ( Vehicles ) ;
19533: LD_STRING Vehicles
19535: PPUSH
19536: CALL_OW 104
// end ;
19540: LD_VAR 0 1
19544: RET
// export function Lose_SelfAttack ; begin
19545: LD_INT 0
19547: PPUSH
// YouLost ( SelfAttack ) ;
19548: LD_STRING SelfAttack
19550: PPUSH
19551: CALL_OW 104
// end ;
19555: LD_VAR 0 1
19559: RET
// export function Lose_Delay ; begin
19560: LD_INT 0
19562: PPUSH
// YouLost ( Delay ) ;
19563: LD_STRING Delay
19565: PPUSH
19566: CALL_OW 104
// end ; end_of_file
19570: LD_VAR 0 1
19574: RET
// export function FinishMission ; begin
19575: LD_INT 0
19577: PPUSH
// SetRewards ;
19578: CALL 19599 0 0
// SavePlayerCharacters ;
19582: CALL 19813 0 0
// SaveGlobalVariables ;
19586: CALL 20142 0 0
// YouWin ;
19590: CALL_OW 103
// end ;
19594: LD_VAR 0 1
19598: RET
// function SetRewards ; var unitsToReward ; begin
19599: LD_INT 0
19601: PPUSH
19602: PPUSH
// if produceMoreVehicles then
19603: LD_EXP 16
19607: IFFALSE 19621
// AddMedal ( Surplus , 1 ) else
19609: LD_STRING Surplus
19611: PPUSH
19612: LD_INT 1
19614: PPUSH
19615: CALL_OW 101
19619: GO 19651
// if produceOnlyForYou then
19621: LD_EXP 17
19625: IFFALSE 19640
// AddMedal ( Surplus , - 1 ) else
19627: LD_STRING Surplus
19629: PPUSH
19630: LD_INT 1
19632: NEG
19633: PPUSH
19634: CALL_OW 101
19638: GO 19651
// AddMedal ( Surplus , - 2 ) ;
19640: LD_STRING Surplus
19642: PPUSH
19643: LD_INT 2
19645: NEG
19646: PPUSH
19647: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
19651: LD_EXP 12
19655: PUSH
19656: LD_EXP 45
19660: LESS
19661: IFFALSE 19675
// AddMedal ( PreventReinforcements , 1 ) else
19663: LD_STRING PreventReinforcements
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 101
19673: GO 19686
// AddMedal ( PreventReinforcements , - 1 ) ;
19675: LD_STRING PreventReinforcements
19677: PPUSH
19678: LD_INT 1
19680: NEG
19681: PPUSH
19682: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
19686: LD_EXP 7
19690: PUSH
19691: LD_EXP 53
19695: PPUSH
19696: CALL_OW 302
19700: AND
19701: IFFALSE 19715
// AddMedal ( Scholtze , 1 ) else
19703: LD_STRING Scholtze
19705: PPUSH
19706: LD_INT 1
19708: PPUSH
19709: CALL_OW 101
19713: GO 19726
// AddMedal ( Scholtze , - 1 ) ;
19715: LD_STRING Scholtze
19717: PPUSH
19718: LD_INT 1
19720: NEG
19721: PPUSH
19722: CALL_OW 101
// GiveMedals ( Main ) ;
19726: LD_STRING Main
19728: PPUSH
19729: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_INT 3
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 21
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PPUSH
19762: CALL_OW 69
19766: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
19767: LD_ADDR_VAR 0 2
19771: PUSH
19772: LD_VAR 0 2
19776: PUSH
19777: LD_EXP 77
19781: ADD
19782: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
19783: LD_ADDR_VAR 0 2
19787: PUSH
19788: LD_VAR 0 2
19792: PUSH
19793: LD_EXP 60
19797: DIFF
19798: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
19799: LD_VAR 0 2
19803: PPUSH
19804: CALL_OW 43
// end ;
19808: LD_VAR 0 1
19812: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
19813: LD_INT 0
19815: PPUSH
19816: PPUSH
19817: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19818: LD_EXP 47
19822: PPUSH
19823: LD_STRING Burlak
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: CALL 7233 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19833: LD_EXP 48
19837: PPUSH
19838: LD_STRING Gnyevko
19840: PPUSH
19841: LD_INT 3
19843: PPUSH
19844: CALL 7233 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19848: LD_EXP 50
19852: PPUSH
19853: LD_STRING Kovalyuk
19855: PPUSH
19856: LD_INT 3
19858: PPUSH
19859: CALL 7233 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19863: LD_EXP 49
19867: PPUSH
19868: LD_STRING Kirilenkova
19870: PPUSH
19871: LD_INT 3
19873: PPUSH
19874: CALL 7233 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
19878: LD_EXP 53
19882: PPUSH
19883: LD_STRING Scholtze
19885: PPUSH
19886: LD_INT 3
19888: PPUSH
19889: CALL 7233 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19893: LD_EXP 51
19897: PPUSH
19898: LD_STRING Belkov
19900: PPUSH
19901: LD_INT 3
19903: PPUSH
19904: CALL 7233 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19908: LD_EXP 52
19912: PPUSH
19913: LD_STRING Belkov2
19915: PPUSH
19916: LD_INT 3
19918: PPUSH
19919: CALL 7233 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
19923: LD_EXP 51
19927: PPUSH
19928: LD_STRING Belkov
19930: PPUSH
19931: LD_INT 6
19933: PPUSH
19934: CALL 7233 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
19938: LD_EXP 52
19942: PPUSH
19943: LD_STRING Belkov2
19945: PPUSH
19946: LD_INT 6
19948: PPUSH
19949: CALL 7233 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
19953: LD_ADDR_VAR 0 2
19957: PUSH
19958: LD_INT 22
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 21
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 50
19980: PUSH
19981: EMPTY
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PPUSH
19989: CALL_OW 69
19993: PUSH
19994: LD_EXP 47
19998: PUSH
19999: LD_EXP 48
20003: PUSH
20004: LD_EXP 51
20008: PUSH
20009: LD_EXP 52
20013: PUSH
20014: LD_EXP 50
20018: PUSH
20019: LD_EXP 49
20023: PUSH
20024: LD_EXP 53
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: DIFF
20038: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20039: LD_VAR 0 2
20043: PPUSH
20044: LD_STRING other_survivors
20046: PPUSH
20047: LD_INT 3
20049: PPUSH
20050: CALL 7289 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20054: LD_ADDR_VAR 0 3
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_INT 6
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 21
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 50
20081: PUSH
20082: EMPTY
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: PPUSH
20090: CALL_OW 69
20094: PUSH
20095: LD_EXP 59
20099: PUSH
20100: LD_EXP 60
20104: PUSH
20105: LD_EXP 51
20109: PUSH
20110: LD_EXP 52
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: DIFF
20121: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20122: LD_VAR 0 3
20126: PPUSH
20127: LD_STRING other_kirov
20129: PPUSH
20130: LD_INT 6
20132: PPUSH
20133: CALL 7289 0 3
// end ;
20137: LD_VAR 0 1
20141: RET
// function SaveGlobalVariables ; begin
20142: LD_INT 0
20144: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20145: LD_EXP 26
20149: PPUSH
20150: LD_STRING 03_KurinOpinion_1
20152: PPUSH
20153: CALL_OW 39
// end ; end_of_file
20157: LD_VAR 0 1
20161: RET
// export function CustomEvent ( event ) ; begin
20162: LD_INT 0
20164: PPUSH
// end ;
20165: LD_VAR 0 2
20169: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20170: LD_INT 0
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
20176: PPUSH
20177: PPUSH
20178: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20179: LD_ADDR_VAR 0 2
20183: PUSH
20184: LD_INT 22
20186: PUSH
20187: LD_INT 3
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 21
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PPUSH
20208: CALL_OW 69
20212: PUSH
20213: FOR_IN
20214: IFFALSE 20411
// if GetTaskList ( i ) > 0 then
20216: LD_VAR 0 2
20220: PPUSH
20221: CALL_OW 437
20225: PUSH
20226: LD_INT 0
20228: GREATER
20229: IFFALSE 20409
// for j = 1 to GetTaskList ( i ) do
20231: LD_ADDR_VAR 0 3
20235: PUSH
20236: DOUBLE
20237: LD_INT 1
20239: DEC
20240: ST_TO_ADDR
20241: LD_VAR 0 2
20245: PPUSH
20246: CALL_OW 437
20250: PUSH
20251: FOR_TO
20252: IFFALSE 20407
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20254: LD_ADDR_VAR 0 4
20258: PUSH
20259: LD_VAR 0 2
20263: PPUSH
20264: CALL_OW 437
20268: PUSH
20269: LD_VAR 0 3
20273: ARRAY
20274: PUSH
20275: LD_INT 4
20277: ARRAY
20278: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20279: LD_ADDR_VAR 0 8
20283: PUSH
20284: LD_VAR 0 2
20288: PPUSH
20289: CALL_OW 437
20293: PUSH
20294: LD_VAR 0 3
20298: ARRAY
20299: PUSH
20300: LD_INT 5
20302: ARRAY
20303: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20304: LD_ADDR_VAR 0 6
20308: PUSH
20309: LD_VAR 0 2
20313: PPUSH
20314: CALL_OW 437
20318: PUSH
20319: LD_VAR 0 3
20323: ARRAY
20324: PUSH
20325: LD_INT 2
20327: ARRAY
20328: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 2
20338: PPUSH
20339: CALL_OW 437
20343: PUSH
20344: LD_VAR 0 3
20348: ARRAY
20349: PUSH
20350: LD_INT 3
20352: ARRAY
20353: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20354: LD_VAR 0 4
20358: PPUSH
20359: CALL_OW 255
20363: PUSH
20364: LD_INT 6
20366: EQUAL
20367: PUSH
20368: LD_VAR 0 2
20372: PPUSH
20373: CALL_OW 437
20377: PUSH
20378: LD_VAR 0 3
20382: ARRAY
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: PUSH
20388: LD_STRING <
20390: EQUAL
20391: AND
20392: IFFALSE 20405
// SetTaskList ( i , [ ] ) ;
20394: LD_VAR 0 2
20398: PPUSH
20399: EMPTY
20400: PPUSH
20401: CALL_OW 446
// end ;
20405: GO 20251
20407: POP
20408: POP
20409: GO 20213
20411: POP
20412: POP
// end ;
20413: PPOPN 8
20415: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
20416: LD_VAR 0 2
20420: PUSH
20421: LD_INT 6
20423: EQUAL
20424: IFFALSE 20438
// SetSide ( building , 6 ) ;
20426: LD_VAR 0 1
20430: PPUSH
20431: LD_INT 6
20433: PPUSH
20434: CALL_OW 235
// end ;
20438: PPOPN 3
20440: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
20441: LD_INT 0
20443: PPUSH
20444: PPUSH
// begin diffUnits = [ ] ;
20445: LD_ADDR_VAR 0 2
20449: PUSH
20450: EMPTY
20451: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 255
20461: PUSH
20462: LD_INT 3
20464: EQUAL
20465: PUSH
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 266
20475: PUSH
20476: LD_INT 0
20478: EQUAL
20479: AND
20480: PUSH
20481: LD_VAR 0 1
20485: PPUSH
20486: LD_INT 21
20488: PPUSH
20489: CALL_OW 308
20493: AND
20494: IFFALSE 20508
// SetBName ( building , kagan ) ;
20496: LD_VAR 0 1
20500: PPUSH
20501: LD_STRING kagan
20503: PPUSH
20504: CALL_OW 500
// if GetSide ( building ) = 6 then
20508: LD_VAR 0 1
20512: PPUSH
20513: CALL_OW 255
20517: PUSH
20518: LD_INT 6
20520: EQUAL
20521: IFFALSE 20702
// begin if GetBType ( building ) = b_ext_noncombat then
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL_OW 266
20532: PUSH
20533: LD_INT 19
20535: EQUAL
20536: IFFALSE 20542
// begin SpawnKirovSupport ;
20538: CALL 4506 0 0
// end ; if GetBType ( building ) = b_depot then
20542: LD_VAR 0 1
20546: PPUSH
20547: CALL_OW 266
20551: PUSH
20552: LD_INT 0
20554: EQUAL
20555: IFFALSE 20601
// begin kirovOilDepot = building ;
20557: LD_ADDR_EXP 66
20561: PUSH
20562: LD_VAR 0 1
20566: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
20567: LD_EXP 66
20571: PPUSH
20572: CALL_OW 274
20576: PPUSH
20577: LD_INT 2
20579: PPUSH
20580: LD_INT 3000
20582: PPUSH
20583: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
20587: LD_EXP 80
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 266
20610: PUSH
20611: LD_INT 31
20613: EQUAL
20614: PUSH
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 266
20624: PUSH
20625: LD_INT 4
20627: EQUAL
20628: OR
20629: PUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: LD_INT 20
20637: PPUSH
20638: CALL_OW 308
20642: AND
20643: IFFALSE 20702
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
20645: LD_EXP 76
20649: PPUSH
20650: LD_INT 25
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 56
20662: PUSH
20663: EMPTY
20664: LIST
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: LD_INT 60
20671: PUSH
20672: EMPTY
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: PPUSH
20684: CALL_OW 72
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PPUSH
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL_OW 120
// end ; end ;
20702: PPOPN 3
20704: END
// on UpgradeComplete ( building ) do var i , tmp ;
20705: LD_INT 0
20707: PPUSH
20708: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 255
20718: PUSH
20719: LD_INT 3
20721: EQUAL
20722: PUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 266
20732: PUSH
20733: LD_INT 3
20735: EQUAL
20736: AND
20737: PUSH
20738: LD_EXP 8
20742: NOT
20743: AND
20744: IFFALSE 20755
// Dial_UpgradeWorkshop ( building ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL 23689 0 1
// end ;
20755: PPOPN 3
20757: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
20758: LD_VAR 0 1
20762: PUSH
20763: LD_EXP 47
20767: EQUAL
20768: IFFALSE 20774
// Lose_Burlak ;
20770: CALL 19500 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
20774: LD_VAR 0 1
20778: PUSH
20779: LD_EXP 58
20783: EQUAL
20784: PUSH
20785: LD_EXP 28
20789: NOT
20790: AND
20791: IFFALSE 20797
// Lose_Omicron ;
20793: CALL 19515 0 0
// end ;
20797: PPOPN 1
20799: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
20800: LD_VAR 0 1
20804: PUSH
20805: LD_INT 3
20807: EQUAL
20808: PUSH
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 6
20816: EQUAL
20817: AND
20818: IFFALSE 20824
// Lose_SelfAttack ;
20820: CALL 19545 0 0
// end ;
20824: PPOPN 2
20826: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 255
20836: PUSH
20837: LD_INT 6
20839: EQUAL
20840: IFFALSE 21005
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 264
20851: PUSH
20852: LD_INT 51
20854: EQUAL
20855: PUSH
20856: LD_EXP 72
20860: NOT
20861: AND
20862: IFFALSE 20876
// kirovTransportCargo = vehicle else
20864: LD_ADDR_EXP 72
20868: PUSH
20869: LD_VAR 0 1
20873: ST_TO_ADDR
20874: GO 20948
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
20876: LD_VAR 0 1
20880: PPUSH
20881: CALL_OW 264
20885: PUSH
20886: LD_INT 51
20888: EQUAL
20889: IFFALSE 20948
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_EXP 66
20900: PPUSH
20901: LD_INT 2
20903: PPUSH
20904: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
20908: LD_VAR 0 1
20912: PPUSH
20913: LD_INT 137
20915: PPUSH
20916: LD_INT 99
20918: PPUSH
20919: CALL_OW 171
// AddComHold ( vehicle ) ;
20923: LD_VAR 0 1
20927: PPUSH
20928: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
20932: LD_ADDR_EXP 73
20936: PUSH
20937: LD_EXP 73
20941: PUSH
20942: LD_VAR 0 1
20946: ADD
20947: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 264
20957: PUSH
20958: LD_INT 42
20960: PUSH
20961: LD_INT 43
20963: PUSH
20964: LD_INT 44
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: IN
20972: IFFALSE 21005
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
20974: LD_ADDR_EXP 74
20978: PUSH
20979: LD_EXP 74
20983: PUSH
20984: LD_VAR 0 1
20988: ADD
20989: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
20990: LD_VAR 0 1
20994: PPUSH
20995: LD_INT 137
20997: PPUSH
20998: LD_INT 99
21000: PPUSH
21001: CALL_OW 111
// end ; end ; end ;
21005: PPOPN 2
21007: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21008: LD_VAR 0 3
21012: PUSH
21013: LD_INT 6
21015: EQUAL
21016: PUSH
21017: LD_VAR 0 2
21021: PUSH
21022: LD_EXP 30
21026: IN
21027: NOT
21028: AND
21029: IFFALSE 21052
// begin ComExitVehicle ( capturing_unit ) ;
21031: LD_VAR 0 4
21035: PPUSH
21036: CALL_OW 121
// SetSide ( new , 6 ) ;
21040: LD_VAR 0 1
21044: PPUSH
21045: LD_INT 6
21047: PPUSH
21048: CALL_OW 235
// end ; end ;
21052: PPOPN 4
21054: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 255
21064: PUSH
21065: LD_INT 6
21067: EQUAL
21068: PUSH
21069: LD_EXP 19
21073: AND
21074: IFFALSE 21102
// begin wait ( 0 0$2 ) ;
21076: LD_INT 70
21078: PPUSH
21079: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21083: LD_VAR 0 1
21087: PPUSH
21088: LD_INT 78
21090: PPUSH
21091: LD_INT 39
21093: PPUSH
21094: CALL_OW 174
// KirovAttackOmicron ;
21098: CALL 17628 0 0
// end ; end ;
21102: PPOPN 2
21104: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21105: LD_VAR 0 2
21109: PPUSH
21110: CALL_OW 255
21114: PUSH
21115: LD_INT 6
21117: EQUAL
21118: PUSH
21119: LD_VAR 0 1
21123: PUSH
21124: LD_INT 39
21126: EQUAL
21127: AND
21128: IFFALSE 21189
// begin MountWeaponTurrent ;
21130: CALL 17092 0 0
// wait ( 3 3$30 ) ;
21134: LD_INT 7350
21136: PPUSH
21137: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21141: LD_INT 22
21143: PUSH
21144: LD_INT 6
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 21
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: PPUSH
21176: CALL_OW 69
21180: PUSH
21181: LD_INT 1
21183: ARRAY
21184: PPUSH
21185: CALL 17158 0 1
// end ; end ; end_of_file
21189: PPOPN 2
21191: END
// export function MissionIntro ; var unit ; begin
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 59
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21214: LD_EXP 47
21218: PUSH
21219: LD_EXP 61
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PPUSH
21228: LD_EXP 59
21232: PPUSH
21233: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21237: LD_EXP 59
21241: PPUSH
21242: LD_EXP 47
21246: PPUSH
21247: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21251: LD_INT 3
21253: PPUSH
21254: LD_INT 24
21256: PPUSH
21257: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21261: LD_EXP 51
21265: PPUSH
21266: CALL_OW 305
21270: NOT
21271: PUSH
21272: LD_EXP 52
21276: PPUSH
21277: CALL_OW 305
21281: NOT
21282: AND
21283: IFFALSE 21371
// begin Say ( Kurin , D1a-Kur-1 ) ;
21285: LD_EXP 59
21289: PPUSH
21290: LD_STRING D1a-Kur-1
21292: PPUSH
21293: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21297: LD_EXP 47
21301: PPUSH
21302: LD_STRING D1a-Bur-1
21304: PPUSH
21305: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21309: LD_EXP 59
21313: PPUSH
21314: LD_STRING D1a-Kur-2
21316: PPUSH
21317: CALL_OW 88
// if platonovOpinion <= 1 then
21321: LD_EXP 27
21325: PUSH
21326: LD_INT 1
21328: LESSEQUAL
21329: IFFALSE 21345
// Say ( Kurin , D1a-Kur-2a ) else
21331: LD_EXP 59
21335: PPUSH
21336: LD_STRING D1a-Kur-2a
21338: PPUSH
21339: CALL_OW 88
21343: GO 21357
// Say ( Kurin , D1a-Kur-2b ) ;
21345: LD_EXP 59
21349: PPUSH
21350: LD_STRING D1a-Kur-2b
21352: PPUSH
21353: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21357: LD_EXP 47
21361: PPUSH
21362: LD_STRING D1a-Bur-2
21364: PPUSH
21365: CALL_OW 88
// end else
21369: GO 21407
// begin Say ( Kurin , D1b-Kur-1 ) ;
21371: LD_EXP 59
21375: PPUSH
21376: LD_STRING D1b-Kur-1
21378: PPUSH
21379: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21383: LD_EXP 61
21387: PPUSH
21388: LD_STRING D1b-Bel-1
21390: PPUSH
21391: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
21395: LD_EXP 59
21399: PPUSH
21400: LD_STRING D1b-Kur-2
21402: PPUSH
21403: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
21407: LD_EXP 59
21411: PPUSH
21412: LD_STRING D2-Kur-1
21414: PPUSH
21415: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
21419: LD_EXP 47
21423: PPUSH
21424: LD_STRING D2-Bur-1
21426: PPUSH
21427: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
21431: LD_EXP 59
21435: PPUSH
21436: LD_STRING D2-Kur-2
21438: PPUSH
21439: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING D2-Bur-2
21450: PPUSH
21451: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
21455: LD_EXP 59
21459: PPUSH
21460: LD_STRING D2-Kur-3
21462: PPUSH
21463: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21467: LD_INT 1
21469: PPUSH
21470: LD_INT 6
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: LD_INT 1
21478: PPUSH
21479: CALL_OW 80
// PrepareAmericansMissionIntro ;
21483: CALL 5567 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
21487: LD_EXP 81
21491: PPUSH
21492: LD_INT 28
21494: PPUSH
21495: LD_INT 35
21497: PPUSH
21498: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
21502: LD_INT 93
21504: PPUSH
21505: LD_INT 36
21507: PPUSH
21508: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
21512: LD_INT 93
21514: PPUSH
21515: LD_INT 36
21517: PPUSH
21518: LD_INT 3
21520: PPUSH
21521: LD_INT 9
21523: NEG
21524: PPUSH
21525: CALL_OW 330
// wait ( 0 0$6 ) ;
21529: LD_INT 210
21531: PPUSH
21532: CALL_OW 67
// CenterOnUnits ( Popov ) ;
21536: LD_EXP 60
21540: PPUSH
21541: CALL_OW 85
// wait ( 0 0$1 ) ;
21545: LD_INT 35
21547: PPUSH
21548: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
21552: LD_EXP 60
21556: PPUSH
21557: LD_STRING D2-Pop-3
21559: PPUSH
21560: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21564: LD_EXP 47
21568: PUSH
21569: LD_EXP 59
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PPUSH
21578: CALL_OW 87
// wait ( 0 0$1 ) ;
21582: LD_INT 35
21584: PPUSH
21585: CALL_OW 67
// for unit in amIntroUnits do
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_EXP 81
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21613
// RemoveUnit ( unit ) ;
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 64
21611: GO 21599
21613: POP
21614: POP
// Say ( Kurin , D2-Kur-4 ) ;
21615: LD_EXP 59
21619: PPUSH
21620: LD_STRING D2-Kur-4
21622: PPUSH
21623: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
21627: LD_EXP 47
21631: PPUSH
21632: LD_STRING D2-Bur-4
21634: PPUSH
21635: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
21639: LD_EXP 59
21643: PPUSH
21644: LD_STRING D2-Kur-5
21646: PPUSH
21647: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
21651: LD_EXP 47
21655: PPUSH
21656: LD_STRING D2-Bur-5
21658: PPUSH
21659: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
21663: LD_EXP 59
21667: PPUSH
21668: LD_STRING D2-Kur-6
21670: PPUSH
21671: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
21675: LD_EXP 48
21679: PPUSH
21680: CALL_OW 305
21684: IFFALSE 21700
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21686: LD_ADDR_EXP 37
21690: PUSH
21691: LD_EXP 37
21695: PUSH
21696: LD_INT 1
21698: MINUS
21699: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
21700: LD_EXP 50
21704: PPUSH
21705: CALL_OW 305
21709: IFFALSE 21725
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21711: LD_ADDR_EXP 37
21715: PUSH
21716: LD_EXP 37
21720: PUSH
21721: LD_INT 1
21723: MINUS
21724: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
21725: LD_EXP 49
21729: PPUSH
21730: CALL_OW 305
21734: IFFALSE 21750
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21736: LD_ADDR_EXP 37
21740: PUSH
21741: LD_EXP 37
21745: PUSH
21746: LD_INT 1
21748: MINUS
21749: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
21750: LD_EXP 37
21754: PPUSH
21755: CALL 7387 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
21759: LD_INT 93
21761: PPUSH
21762: LD_INT 36
21764: PPUSH
21765: LD_INT 3
21767: PPUSH
21768: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21772: LD_INT 3
21774: PPUSH
21775: LD_INT 24
21777: PPUSH
21778: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21782: LD_INT 22
21784: PUSH
21785: LD_INT 3
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 21
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: PPUSH
21811: CALL_OW 122
// wait ( 0 0$1 ) ;
21815: LD_INT 35
21817: PPUSH
21818: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
21822: LD_INT 22
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 21
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PPUSH
21846: CALL_OW 69
21850: PPUSH
21851: LD_EXP 58
21855: PPUSH
21856: CALL_OW 250
21860: PPUSH
21861: LD_EXP 58
21865: PPUSH
21866: CALL_OW 251
21870: PPUSH
21871: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
21875: LD_INT 35
21877: PPUSH
21878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
21882: LD_EXP 47
21886: PPUSH
21887: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
21891: LD_EXP 47
21895: PPUSH
21896: LD_EXP 58
21900: PPUSH
21901: CALL_OW 296
21905: PUSH
21906: LD_INT 6
21908: LESS
21909: IFFALSE 21875
// InGameOff ;
21911: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
21915: LD_STRING M1
21917: PPUSH
21918: CALL_OW 337
// SaveForQuickRestart ;
21922: CALL_OW 22
// counterEnable = true ;
21926: LD_ADDR_EXP 87
21930: PUSH
21931: LD_INT 1
21933: ST_TO_ADDR
// counterIndex = 1 ;
21934: LD_ADDR_EXP 88
21938: PUSH
21939: LD_INT 1
21941: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21942: LD_INT 3
21944: PPUSH
21945: LD_INT 24
21947: PPUSH
21948: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
21952: LD_INT 6
21954: PPUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 6
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 21
21967: PUSH
21968: LD_INT 3
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 30
21977: PUSH
21978: LD_INT 6
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: PPUSH
21990: CALL_OW 69
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: CALL 8702 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22006: LD_INT 1
22008: PPUSH
22009: LD_INT 22
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 21
22021: PUSH
22022: LD_INT 3
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 30
22031: PUSH
22032: LD_INT 7
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 69
22048: PUSH
22049: LD_INT 1
22051: ARRAY
22052: PPUSH
22053: LD_INT 1
22055: PPUSH
22056: CALL 8702 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22060: LD_INT 18
22062: PPUSH
22063: LD_INT 22
22065: PUSH
22066: LD_INT 6
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 21
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 25
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 70
22102: PPUSH
22103: LD_INT 17
22105: PPUSH
22106: LD_INT 159
22108: PPUSH
22109: LD_INT 116
22111: PPUSH
22112: LD_INT 0
22114: PPUSH
22115: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22119: LD_INT 18
22121: PPUSH
22122: LD_INT 22
22124: PUSH
22125: LD_INT 6
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 21
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 25
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: PPUSH
22157: CALL_OW 70
22161: PPUSH
22162: LD_INT 19
22164: PPUSH
22165: LD_INT 161
22167: PPUSH
22168: LD_INT 115
22170: PPUSH
22171: LD_INT 5
22173: PPUSH
22174: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22178: LD_INT 18
22180: PPUSH
22181: LD_INT 22
22183: PUSH
22184: LD_INT 6
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 21
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 25
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 70
22220: PPUSH
22221: LD_EXP 65
22225: PPUSH
22226: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22230: LD_EXP 77
22234: PPUSH
22235: CALL_OW 139
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22239: LD_EXP 77
22243: PUSH
22244: LD_EXP 60
22248: DIFF
22249: PPUSH
22250: LD_EXP 67
22254: PPUSH
22255: CALL_OW 180
// ComWalk ( ruScout ) ;
22259: LD_EXP 62
22263: PPUSH
22264: CALL_OW 138
// wait ( 0 0$1 ) ;
22268: LD_INT 35
22270: PPUSH
22271: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
22275: LD_EXP 62
22279: PUSH
22280: LD_EXP 60
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: LD_INT 99
22291: PPUSH
22292: LD_INT 37
22294: PPUSH
22295: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
22299: LD_EXP 62
22303: PUSH
22304: LD_EXP 60
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PPUSH
22313: LD_INT 88
22315: PPUSH
22316: LD_INT 60
22318: PPUSH
22319: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
22323: LD_EXP 62
22327: PUSH
22328: LD_EXP 60
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PPUSH
22337: LD_INT 129
22339: PPUSH
22340: LD_INT 99
22342: PPUSH
22343: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
22347: LD_EXP 60
22351: PUSH
22352: LD_EXP 62
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PPUSH
22361: LD_EXP 65
22365: PPUSH
22366: CALL_OW 180
// end ;
22370: LD_VAR 0 1
22374: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
22375: LD_EXP 22
22379: IFFALSE 22651
22381: GO 22383
22383: DISABLE
22384: LD_INT 0
22386: PPUSH
22387: PPUSH
22388: PPUSH
22389: PPUSH
22390: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
22391: LD_ADDR_VAR 0 4
22395: PUSH
22396: LD_VAR 0 4
22400: PUSH
22401: LD_EXP 59
22405: ADD
22406: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
22407: LD_ADDR_VAR 0 4
22411: PUSH
22412: LD_VAR 0 4
22416: PUSH
22417: LD_EXP 77
22421: ADD
22422: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
22423: LD_ADDR_VAR 0 4
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: LD_EXP 69
22437: ADD
22438: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
22439: LD_ADDR_VAR 0 5
22443: PUSH
22444: LD_INT 18
22446: PPUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 21
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PPUSH
22471: CALL_OW 70
22475: PUSH
22476: LD_VAR 0 4
22480: DIFF
22481: ST_TO_ADDR
// pom = 6 ;
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_INT 6
22489: ST_TO_ADDR
// if canTakeUnits then
22490: LD_VAR 0 5
22494: IFFALSE 22618
// for i = 1 to canTakeUnits do
22496: LD_ADDR_VAR 0 1
22500: PUSH
22501: DOUBLE
22502: LD_INT 1
22504: DEC
22505: ST_TO_ADDR
22506: LD_VAR 0 5
22510: PUSH
22511: FOR_TO
22512: IFFALSE 22616
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
22514: LD_VAR 0 5
22518: PUSH
22519: LD_VAR 0 1
22523: ARRAY
22524: PPUSH
22525: CALL_OW 257
22529: PUSH
22530: LD_INT 3
22532: NONEQUAL
22533: IFFALSE 22580
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
22535: LD_VAR 0 5
22539: PUSH
22540: LD_VAR 0 1
22544: ARRAY
22545: PPUSH
22546: LD_EXP 21
22550: PPUSH
22551: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
22555: LD_VAR 0 5
22559: PUSH
22560: LD_VAR 0 1
22564: ARRAY
22565: PPUSH
22566: LD_INT 1
22568: PPUSH
22569: CALL_OW 183
// wait ( 0 0$1 ) ;
22573: LD_INT 35
22575: PPUSH
22576: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
22580: LD_VAR 0 5
22584: PUSH
22585: LD_VAR 0 1
22589: ARRAY
22590: PPUSH
22591: LD_EXP 21
22595: PPUSH
22596: CALL_OW 120
// pom = pom - 1 ;
22600: LD_ADDR_VAR 0 3
22604: PUSH
22605: LD_VAR 0 3
22609: PUSH
22610: LD_INT 1
22612: MINUS
22613: ST_TO_ADDR
// end ;
22614: GO 22511
22616: POP
22617: POP
// if pom > 0 then
22618: LD_VAR 0 3
22622: PUSH
22623: LD_INT 0
22625: GREATER
22626: IFFALSE 22651
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
22628: LD_ADDR_EXP 79
22632: PUSH
22633: LD_EXP 79
22637: PPUSH
22638: LD_INT 3
22640: PPUSH
22641: LD_VAR 0 3
22645: PPUSH
22646: CALL_OW 1
22650: ST_TO_ADDR
// end ;
22651: PPOPN 5
22653: END
// every 0 0$1 trigger kirovTransportCargo do
22654: LD_EXP 72
22658: IFFALSE 22707
22660: GO 22662
22662: DISABLE
// begin enable ;
22663: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
22664: LD_EXP 72
22668: PPUSH
22669: LD_EXP 66
22673: PPUSH
22674: LD_INT 2
22676: PPUSH
22677: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
22681: LD_EXP 72
22685: PPUSH
22686: LD_EXP 65
22690: PPUSH
22691: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
22695: LD_EXP 72
22699: PPUSH
22700: LD_INT 100
22702: PPUSH
22703: CALL_OW 240
// end ;
22707: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
22708: LD_INT 78
22710: PPUSH
22711: LD_INT 112
22713: PPUSH
22714: LD_INT 3
22716: PPUSH
22717: CALL_OW 440
22721: IFFALSE 22775
22723: GO 22725
22725: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
22726: LD_INT 78
22728: PPUSH
22729: LD_INT 112
22731: PPUSH
22732: CALL_OW 84
// DialogueOn ;
22736: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
22740: LD_EXP 47
22744: PPUSH
22745: LD_STRING D2a-Bur-1
22747: PPUSH
22748: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
22752: LD_EXP 59
22756: PPUSH
22757: LD_STRING D2a-Kur-1
22759: PPUSH
22760: CALL_OW 94
// DialogueOff ;
22764: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
22768: LD_STRING M2
22770: PPUSH
22771: CALL_OW 337
// end ;
22775: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
22776: LD_EXP 10
22780: NOT
22781: IFFALSE 22989
22783: GO 22785
22785: DISABLE
22786: LD_INT 0
22788: PPUSH
// begin enable ;
22789: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
22790: LD_ADDR_VAR 0 1
22794: PUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 23
22817: PUSH
22818: LD_INT 3
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: LD_INT 31
22830: PUSH
22831: LD_INT 21
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 31
22840: PUSH
22841: LD_INT 23
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: PPUSH
22859: CALL_OW 69
22863: PUSH
22864: FOR_IN
22865: IFFALSE 22987
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
22867: LD_VAR 0 1
22871: PPUSH
22872: LD_INT 48
22874: PPUSH
22875: LD_INT 81
22877: PPUSH
22878: CALL_OW 297
22882: PUSH
22883: LD_INT 7
22885: LESS
22886: IFFALSE 22985
// begin dialog_track = true ;
22888: LD_ADDR_EXP 10
22892: PUSH
22893: LD_INT 1
22895: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
22896: LD_INT 48
22898: PPUSH
22899: LD_INT 81
22901: PPUSH
22902: CALL_OW 86
// DialogueOn ;
22906: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22910: LD_EXP 47
22914: PPUSH
22915: LD_STRING D5a-Bur-1
22917: PPUSH
22918: CALL_OW 88
// DialogueOff ;
22922: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
22926: LD_INT 82
22928: PPUSH
22929: LD_INT 3
22931: PPUSH
22932: CALL_OW 321
22936: PUSH
22937: LD_INT 0
22939: EQUAL
22940: IFFALSE 22955
// SetTech ( 82 , 3 , state_enabled ) ;
22942: LD_INT 82
22944: PPUSH
22945: LD_INT 3
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
22955: LD_INT 84
22957: PPUSH
22958: LD_INT 3
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22968: LD_INT 16
22970: PPUSH
22971: LD_INT 3
22973: PPUSH
22974: LD_INT 1
22976: PPUSH
22977: CALL_OW 324
// exit ;
22981: POP
22982: POP
22983: GO 22989
// end ;
22985: GO 22864
22987: POP
22988: POP
// end ;
22989: PPOPN 1
22991: END
// every 5 5$30 do
22992: GO 22994
22994: DISABLE
// begin PrepareScholtze ;
22995: CALL 5354 0 0
// wait ( 0 0$2 ) ;
22999: LD_INT 70
23001: PPUSH
23002: CALL_OW 67
// DialogueOn ;
23006: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23010: LD_EXP 53
23014: PPUSH
23015: LD_STRING D4-Sch-1
23017: PPUSH
23018: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23022: LD_EXP 47
23026: PPUSH
23027: LD_STRING D4-Bur-1
23029: PPUSH
23030: CALL_OW 88
// DialogueOff ;
23034: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23038: LD_STRING M4
23040: PPUSH
23041: CALL_OW 337
// ComHold ( Scholtze ) ;
23045: LD_EXP 53
23049: PPUSH
23050: CALL_OW 140
// scholtzeSpawned = true ;
23054: LD_ADDR_EXP 6
23058: PUSH
23059: LD_INT 1
23061: ST_TO_ADDR
// end ;
23062: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23063: LD_INT 3
23065: PPUSH
23066: LD_EXP 53
23070: PPUSH
23071: CALL_OW 292
23075: PUSH
23076: LD_EXP 6
23080: AND
23081: PUSH
23082: LD_EXP 7
23086: NOT
23087: AND
23088: IFFALSE 23269
23090: GO 23092
23092: DISABLE
// begin scholtzeSaved = true ;
23093: LD_ADDR_EXP 7
23097: PUSH
23098: LD_INT 1
23100: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23101: LD_EXP 53
23105: PPUSH
23106: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23110: LD_EXP 53
23114: PPUSH
23115: LD_INT 3
23117: PPUSH
23118: CALL_OW 235
// DialogueOn ;
23122: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23126: LD_EXP 53
23130: PPUSH
23131: LD_STRING D4a-Sch-1
23133: PPUSH
23134: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23138: LD_EXP 47
23142: PPUSH
23143: LD_STRING D4a-Bur-1
23145: PPUSH
23146: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23150: LD_EXP 53
23154: PPUSH
23155: LD_STRING D4a-Sch-2
23157: PPUSH
23158: CALL_OW 88
// DialogueOff ;
23162: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
23166: LD_EXP 83
23170: PPUSH
23171: LD_INT 28
23173: PPUSH
23174: LD_INT 36
23176: PPUSH
23177: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
23181: LD_STRING MScholtzeOut
23183: PPUSH
23184: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
23188: LD_INT 49
23190: PPUSH
23191: LD_INT 3
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
23201: LD_INT 51
23203: PPUSH
23204: LD_INT 3
23206: PPUSH
23207: LD_INT 1
23209: PPUSH
23210: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
23214: LD_INT 82
23216: PPUSH
23217: LD_INT 3
23219: PPUSH
23220: CALL_OW 321
23224: PUSH
23225: LD_INT 0
23227: EQUAL
23228: IFFALSE 23243
// SetTech ( 82 , 3 , state_enabled ) ;
23230: LD_INT 82
23232: PPUSH
23233: LD_INT 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
23243: LD_INT 83
23245: PPUSH
23246: LD_INT 3
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
23256: LD_INT 19
23258: PPUSH
23259: LD_INT 3
23261: PPUSH
23262: LD_INT 1
23264: PPUSH
23265: CALL_OW 324
// end ;
23269: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
23270: LD_EXP 53
23274: PPUSH
23275: CALL_OW 305
23279: PUSH
23280: LD_EXP 7
23284: NOT
23285: AND
23286: IFFALSE 23295
23288: GO 23290
23290: DISABLE
// PrepareAmericanPatrol ;
23291: CALL 6258 0 0
23295: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
23296: LD_EXP 53
23300: PPUSH
23301: CALL_OW 305
23305: PUSH
23306: LD_EXP 53
23310: PPUSH
23311: CALL_OW 255
23315: PUSH
23316: LD_INT 8
23318: EQUAL
23319: AND
23320: PUSH
23321: LD_EXP 46
23325: PUSH
23326: LD_INT 35
23328: GREATER
23329: AND
23330: IFFALSE 23506
23332: GO 23334
23334: DISABLE
23335: LD_INT 0
23337: PPUSH
23338: PPUSH
// begin enable ;
23339: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
23340: LD_ADDR_EXP 46
23344: PUSH
23345: LD_EXP 46
23349: PUSH
23350: LD_INT 35
23352: MINUS
23353: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
23354: LD_ADDR_VAR 0 1
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 25
23371: PUSH
23372: LD_INT 12
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: PUSH
23388: FOR_IN
23389: IFFALSE 23428
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_EXP 53
23400: PPUSH
23401: CALL_OW 250
23405: PPUSH
23406: LD_EXP 53
23410: PPUSH
23411: CALL_OW 251
23415: PPUSH
23416: LD_INT 12
23418: PPUSH
23419: LD_INT 0
23421: PPUSH
23422: CALL 10001 0 5
23426: GO 23388
23428: POP
23429: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 25
23447: PUSH
23448: LD_INT 14
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PPUSH
23459: CALL_OW 69
23463: PUSH
23464: FOR_IN
23465: IFFALSE 23504
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
23467: LD_VAR 0 2
23471: PPUSH
23472: LD_EXP 53
23476: PPUSH
23477: CALL_OW 250
23481: PPUSH
23482: LD_EXP 53
23486: PPUSH
23487: CALL_OW 251
23491: PPUSH
23492: LD_INT 12
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: CALL 10001 0 5
23502: GO 23464
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
23509: LD_INT 1
23511: PPUSH
23512: LD_EXP 53
23516: PPUSH
23517: CALL_OW 292
23521: PUSH
23522: LD_EXP 83
23526: AND
23527: PUSH
23528: LD_EXP 7
23532: NOT
23533: AND
23534: IFFALSE 23688
23536: GO 23538
23538: DISABLE
// begin enable ;
23539: ENABLE
// if not IsPlaced ( Scholtze ) then
23540: LD_EXP 53
23544: PPUSH
23545: CALL_OW 305
23549: NOT
23550: IFFALSE 23554
// exit ;
23552: GO 23688
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
23554: LD_EXP 83
23558: PUSH
23559: LD_INT 1
23561: ARRAY
23562: PPUSH
23563: CALL_OW 320
23567: PUSH
23568: LD_EXP 53
23572: EQUAL
23573: PUSH
23574: LD_EXP 83
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PPUSH
23583: CALL_OW 320
23587: PUSH
23588: LD_EXP 53
23592: EQUAL
23593: OR
23594: IFFALSE 23688
// begin DialogueOn ;
23596: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
23600: LD_EXP 53
23604: PPUSH
23605: LD_STRING D4b-Sch-1
23607: PPUSH
23608: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
23612: LD_EXP 83
23616: PUSH
23617: LD_INT 2
23619: ARRAY
23620: PPUSH
23621: LD_STRING D4b-Sol1-1
23623: PPUSH
23624: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
23628: LD_EXP 83
23632: PUSH
23633: LD_INT 1
23635: ARRAY
23636: PPUSH
23637: LD_STRING D4b-Sol2-1
23639: PPUSH
23640: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
23644: LD_EXP 53
23648: PPUSH
23649: LD_STRING D4b-Sch-2
23651: PPUSH
23652: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
23656: LD_EXP 47
23660: PPUSH
23661: LD_STRING D4b-Bur-2
23663: PPUSH
23664: CALL_OW 88
// DialogueOff ;
23668: CALL_OW 7
// Killunit ( Scholtze ) ;
23672: LD_EXP 53
23676: PPUSH
23677: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
23681: LD_STRING MScholtzeDel
23683: PPUSH
23684: CALL_OW 337
// end ; end ;
23688: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
23689: LD_INT 0
23691: PPUSH
23692: PPUSH
23693: PPUSH
// dialog_workshop = true ;
23694: LD_ADDR_EXP 8
23698: PUSH
23699: LD_INT 1
23701: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
23702: LD_INT 22
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 30
23714: PUSH
23715: LD_INT 26
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: NOT
23731: IFFALSE 24120
// begin CenterNowOnUnits ( building ) ;
23733: LD_VAR 0 1
23737: PPUSH
23738: CALL_OW 87
// DialogueOn ;
23742: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
23746: LD_EXP 47
23750: PPUSH
23751: LD_STRING D3aa-Bur-1
23753: PPUSH
23754: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
23758: LD_EXP 53
23762: PPUSH
23763: CALL_OW 302
23767: PUSH
23768: LD_EXP 53
23772: PPUSH
23773: CALL_OW 255
23777: PUSH
23778: LD_INT 3
23780: EQUAL
23781: AND
23782: IFFALSE 23798
// Say ( Scholtze , D3aa-Sch-1 ) else
23784: LD_EXP 53
23788: PPUSH
23789: LD_STRING D3aa-Sch-1
23791: PPUSH
23792: CALL_OW 88
23796: GO 24104
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23798: LD_ADDR_VAR 0 3
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_INT 3
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 21
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 26
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 50
23845: PUSH
23846: EMPTY
23847: LIST
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 69
23860: PUSH
23861: LD_EXP 47
23865: PUSH
23866: LD_EXP 48
23870: PUSH
23871: LD_EXP 50
23875: PUSH
23876: LD_EXP 51
23880: PUSH
23881: LD_EXP 52
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: DIFF
23893: ST_TO_ADDR
// if maleSci then
23894: LD_VAR 0 3
23898: IFFALSE 23918
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
23900: LD_VAR 0 3
23904: PUSH
23905: LD_INT 1
23907: ARRAY
23908: PPUSH
23909: LD_STRING D3aa-Sci1-1
23911: PPUSH
23912: CALL_OW 88
23916: GO 24104
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23918: LD_ADDR_VAR 0 4
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: LD_INT 3
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 21
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 26
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 50
23955: PUSH
23956: EMPTY
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 69
23969: PUSH
23970: LD_EXP 47
23974: PUSH
23975: LD_EXP 48
23979: PUSH
23980: LD_EXP 50
23984: PUSH
23985: LD_EXP 51
23989: PUSH
23990: LD_EXP 52
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: DIFF
24002: ST_TO_ADDR
// if maleOthers then
24003: LD_VAR 0 4
24007: IFFALSE 24027
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24009: LD_VAR 0 4
24013: PUSH
24014: LD_INT 1
24016: ARRAY
24017: PPUSH
24018: LD_STRING D3aa-Sci1-1
24020: PPUSH
24021: CALL_OW 88
24025: GO 24104
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: LD_INT 22
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 21
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 26
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 50
24064: PUSH
24065: EMPTY
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: PPUSH
24074: CALL_OW 69
24078: PUSH
24079: LD_EXP 47
24083: PUSH
24084: EMPTY
24085: LIST
24086: DIFF
24087: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24088: LD_VAR 0 4
24092: PUSH
24093: LD_INT 1
24095: ARRAY
24096: PPUSH
24097: LD_STRING D3aa-Sci1-1
24099: PPUSH
24100: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24104: LD_EXP 47
24108: PPUSH
24109: LD_STRING D3aa-Bur-2
24111: PPUSH
24112: CALL_OW 88
// DialogueOff ;
24116: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24120: LD_STRING M3
24122: PPUSH
24123: CALL_OW 337
// end ;
24127: LD_VAR 0 2
24131: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24132: LD_EXP 9
24136: NOT
24137: IFFALSE 24475
24139: GO 24141
24141: DISABLE
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
// begin enable ;
24146: ENABLE
// for amUnit in amSupportTroops do
24147: LD_ADDR_VAR 0 1
24151: PUSH
24152: LD_EXP 82
24156: PUSH
24157: FOR_IN
24158: IFFALSE 24473
// begin if See ( 3 , amUnit ) then
24160: LD_INT 3
24162: PPUSH
24163: LD_VAR 0 1
24167: PPUSH
24168: CALL_OW 292
24172: IFFALSE 24471
// begin dialog_amSupportTroops = true ;
24174: LD_ADDR_EXP 9
24178: PUSH
24179: LD_INT 1
24181: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 87
// DialogueOn ;
24191: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24195: LD_ADDR_VAR 0 2
24199: PUSH
24200: LD_INT 22
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 21
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 26
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 50
24232: PUSH
24233: EMPTY
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: PPUSH
24242: CALL_OW 69
24246: PUSH
24247: LD_EXP 47
24251: PUSH
24252: LD_EXP 48
24256: PUSH
24257: LD_EXP 50
24261: PUSH
24262: LD_EXP 51
24266: PUSH
24267: LD_EXP 52
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: DIFF
24279: ST_TO_ADDR
// if randomMale then
24280: LD_VAR 0 2
24284: IFFALSE 24351
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
24286: LD_INT 22
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 21
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 26
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 50
24318: PUSH
24319: EMPTY
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: PPUSH
24328: CALL_OW 69
24332: PPUSH
24333: LD_STRING D3b-RSol1-1
24335: PPUSH
24336: LD_STRING 
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: LD_INT 1
24344: PPUSH
24345: CALL 6968 0 5
24349: GO 24428
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_INT 22
24358: PUSH
24359: LD_INT 3
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 26
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 50
24388: PUSH
24389: EMPTY
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 69
24402: PUSH
24403: LD_EXP 47
24407: PUSH
24408: EMPTY
24409: LIST
24410: DIFF
24411: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
24412: LD_VAR 0 2
24416: PUSH
24417: LD_INT 1
24419: ARRAY
24420: PPUSH
24421: LD_STRING D3b-RSol1-1
24423: PPUSH
24424: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
24428: LD_EXP 48
24432: PPUSH
24433: CALL_OW 302
24437: IFFALSE 24451
// Say ( Gnyevko , D3b-Gny-1 ) ;
24439: LD_EXP 48
24443: PPUSH
24444: LD_STRING D3b-Gny-1
24446: PPUSH
24447: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
24451: LD_EXP 47
24455: PPUSH
24456: LD_STRING D3b-Bur-1
24458: PPUSH
24459: CALL_OW 88
// DialogueOff ;
24463: CALL_OW 7
// exit ;
24467: POP
24468: POP
24469: GO 24475
// end ; end ;
24471: GO 24157
24473: POP
24474: POP
// end ;
24475: PPOPN 2
24477: END
// every 2 2$0 trigger dialog_amSupportTroops do
24478: LD_EXP 9
24482: IFFALSE 24566
24484: GO 24486
24486: DISABLE
// begin if IsOK ( Kovalyuk ) then
24487: LD_EXP 50
24491: PPUSH
24492: CALL_OW 302
24496: IFFALSE 24510
// Say ( Kovalyuk , D3b-Kov-1 ) ;
24498: LD_EXP 50
24502: PPUSH
24503: LD_STRING D3b-Kov-1
24505: PPUSH
24506: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
24510: LD_INT 22
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 21
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 26
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: PPUSH
24545: CALL_OW 69
24549: PPUSH
24550: LD_STRING D3b-RSol1-2
24552: PPUSH
24553: LD_STRING 
24555: PPUSH
24556: LD_INT 0
24558: PPUSH
24559: LD_INT 0
24561: PPUSH
24562: CALL 6968 0 5
// end ;
24566: END
// every 0 0$1 trigger canExitBattlefield do
24567: LD_EXP 24
24571: IFFALSE 24589
24573: GO 24575
24575: DISABLE
// begin enable ;
24576: ENABLE
// SetLives ( Kurin , 1000 ) ;
24577: LD_EXP 59
24581: PPUSH
24582: LD_INT 1000
24584: PPUSH
24585: CALL_OW 234
// end ;
24589: END
// every 0 0$1 do
24590: GO 24592
24592: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
24593: LD_EXP 59
24597: PPUSH
24598: CALL_OW 87
// InGameOn ;
24602: CALL_OW 8
// DialogueOn ;
24606: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
24610: LD_EXP 59
24614: PPUSH
24615: LD_STRING D5-Kur-1
24617: PPUSH
24618: CALL_OW 94
// case Query ( QVehicles ) of 1 :
24622: LD_STRING QVehicles
24624: PPUSH
24625: CALL_OW 97
24629: PUSH
24630: LD_INT 1
24632: DOUBLE
24633: EQUAL
24634: IFTRUE 24638
24636: GO 24681
24638: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
24639: LD_EXP 47
24643: PPUSH
24644: LD_STRING D6a-Bur-1
24646: PPUSH
24647: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
24651: LD_EXP 59
24655: PPUSH
24656: LD_STRING D6a-Kur-1
24658: PPUSH
24659: CALL_OW 94
// meetNearOmicronBase = true ;
24663: LD_ADDR_EXP 19
24667: PUSH
24668: LD_INT 1
24670: ST_TO_ADDR
// kurinCheckVehicles = true ;
24671: LD_ADDR_EXP 18
24675: PUSH
24676: LD_INT 1
24678: ST_TO_ADDR
// end ; 2 :
24679: GO 24808
24681: LD_INT 2
24683: DOUBLE
24684: EQUAL
24685: IFTRUE 24689
24687: GO 24736
24689: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
24690: LD_EXP 47
24694: PPUSH
24695: LD_STRING D6b-Bur-1
24697: PPUSH
24698: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
24702: LD_EXP 59
24706: PPUSH
24707: LD_STRING D6b-Kur-1
24709: PPUSH
24710: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
24714: LD_EXP 47
24718: PPUSH
24719: LD_STRING D6b-Bur-2
24721: PPUSH
24722: CALL_OW 88
// meetNearOmicronBase = true ;
24726: LD_ADDR_EXP 19
24730: PUSH
24731: LD_INT 1
24733: ST_TO_ADDR
// end ; 3 :
24734: GO 24808
24736: LD_INT 3
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24807
24744: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
24745: LD_EXP 47
24749: PPUSH
24750: LD_STRING D6c-Bur-1
24752: PPUSH
24753: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
24757: LD_EXP 59
24761: PPUSH
24762: LD_STRING D6c-Kur-1
24764: PPUSH
24765: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
24769: LD_EXP 47
24773: PPUSH
24774: LD_STRING D6c-Bur-2
24776: PPUSH
24777: CALL_OW 88
// kurinGiveMoreTime = true ;
24781: LD_ADDR_EXP 13
24785: PUSH
24786: LD_INT 1
24788: ST_TO_ADDR
// kurinOpinion = 0 ;
24789: LD_ADDR_EXP 26
24793: PUSH
24794: LD_INT 0
24796: ST_TO_ADDR
// counterIndex = 4 ;
24797: LD_ADDR_EXP 88
24801: PUSH
24802: LD_INT 4
24804: ST_TO_ADDR
// end ; end ;
24805: GO 24808
24807: POP
// InGameOff ;
24808: CALL_OW 9
// DialogueOff ;
24812: CALL_OW 7
// end ;
24816: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
24817: LD_EXP 14
24821: PUSH
24822: LD_INT 35
24824: LESS
24825: PUSH
24826: LD_EXP 13
24830: AND
24831: IFFALSE 24864
24833: GO 24835
24835: DISABLE
// begin DialogueOn ;
24836: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
24840: LD_EXP 59
24844: PPUSH
24845: LD_STRING D6c-Kur-2
24847: PPUSH
24848: CALL_OW 94
// DialogueOff ;
24852: CALL_OW 7
// meetNearOmicronBase = true ;
24856: LD_ADDR_EXP 19
24860: PUSH
24861: LD_INT 1
24863: ST_TO_ADDR
// end ;
24864: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
24865: LD_EXP 19
24869: IFFALSE 25524
24871: GO 24873
24873: DISABLE
24874: LD_INT 0
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
// begin mechs = [ ] ;
24881: LD_ADDR_VAR 0 3
24885: PUSH
24886: EMPTY
24887: ST_TO_ADDR
// vehs = [ ] ;
24888: LD_ADDR_VAR 0 4
24892: PUSH
24893: EMPTY
24894: ST_TO_ADDR
// haveVehs = 0 ;
24895: LD_ADDR_VAR 0 5
24899: PUSH
24900: LD_INT 0
24902: ST_TO_ADDR
// uc_side = 6 ;
24903: LD_ADDR_OWVAR 20
24907: PUSH
24908: LD_INT 6
24910: ST_TO_ADDR
// uc_nation = 3 ;
24911: LD_ADDR_OWVAR 21
24915: PUSH
24916: LD_INT 3
24918: ST_TO_ADDR
// for i := 1 to 2 do
24919: LD_ADDR_VAR 0 1
24923: PUSH
24924: DOUBLE
24925: LD_INT 1
24927: DEC
24928: ST_TO_ADDR
24929: LD_INT 2
24931: PUSH
24932: FOR_TO
24933: IFFALSE 25032
// begin PrepareMechanic ( false , 2 ) ;
24935: LD_INT 0
24937: PPUSH
24938: LD_INT 2
24940: PPUSH
24941: CALL_OW 383
// mech = CreateHuman ;
24945: LD_ADDR_VAR 0 2
24949: PUSH
24950: CALL_OW 44
24954: ST_TO_ADDR
// mechs = mechs ^ mech ;
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_VAR 0 3
24964: PUSH
24965: LD_VAR 0 2
24969: ADD
24970: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
24971: LD_VAR 0 2
24975: PPUSH
24976: LD_EXP 65
24980: PPUSH
24981: CALL_OW 52
// ComExitBuilding ( mech ) ;
24985: LD_VAR 0 2
24989: PPUSH
24990: CALL_OW 122
// wait ( 0 0$1 ) ;
24994: LD_INT 35
24996: PPUSH
24997: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25001: LD_VAR 0 2
25005: PPUSH
25006: LD_EXP 58
25010: PPUSH
25011: CALL_OW 250
25015: PPUSH
25016: LD_EXP 58
25020: PPUSH
25021: CALL_OW 251
25025: PPUSH
25026: CALL_OW 171
// end ;
25030: GO 24932
25032: POP
25033: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25034: LD_INT 22
25036: PUSH
25037: LD_INT 3
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 21
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 23
25056: PUSH
25057: LD_INT 3
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: PPUSH
25069: CALL_OW 69
25073: PUSH
25074: LD_INT 22
25076: PUSH
25077: LD_INT 3
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 21
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PPUSH
25098: CALL_OW 69
25102: EQUAL
25103: IFFALSE 25113
// produceOnlyForYou = true ;
25105: LD_ADDR_EXP 17
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25113: LD_INT 700
25115: PPUSH
25116: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25120: LD_INT 22
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 21
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 23
25142: PUSH
25143: LD_INT 3
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 34
25155: PUSH
25156: LD_INT 51
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: PPUSH
25173: CALL_OW 69
25177: PUSH
25178: LD_INT 22
25180: PUSH
25181: LD_INT 3
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 21
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: PUSH
25207: LD_INT 2
25209: PLUS
25210: GREATEREQUAL
25211: IFFALSE 25494
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
25213: LD_ADDR_VAR 0 4
25217: PUSH
25218: LD_VAR 0 4
25222: PUSH
25223: LD_INT 22
25225: PUSH
25226: LD_INT 3
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 21
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 23
25245: PUSH
25246: LD_INT 3
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: LD_INT 34
25258: PUSH
25259: LD_INT 51
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: LD_INT 59
25275: PUSH
25276: EMPTY
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: PPUSH
25290: CALL_OW 69
25294: PUSH
25295: LD_INT 1
25297: ARRAY
25298: ADD
25299: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
25300: LD_ADDR_VAR 0 4
25304: PUSH
25305: LD_VAR 0 4
25309: PUSH
25310: LD_INT 22
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 21
25322: PUSH
25323: LD_INT 2
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 23
25332: PUSH
25333: LD_INT 3
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: LD_INT 34
25345: PUSH
25346: LD_INT 51
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: LD_INT 59
25362: PUSH
25363: EMPTY
25364: LIST
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: PPUSH
25377: CALL_OW 69
25381: PUSH
25382: LD_INT 2
25384: ARRAY
25385: ADD
25386: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
25387: LD_ADDR_EXP 74
25391: PUSH
25392: LD_EXP 74
25396: PUSH
25397: LD_VAR 0 4
25401: ADD
25402: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
25403: LD_VAR 0 4
25407: PPUSH
25408: LD_INT 6
25410: PPUSH
25411: CALL_OW 235
// produceMoreVehicles = true ;
25415: LD_ADDR_EXP 16
25419: PUSH
25420: LD_INT 1
25422: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
25423: LD_VAR 0 3
25427: PUSH
25428: LD_INT 1
25430: ARRAY
25431: PPUSH
25432: LD_VAR 0 4
25436: PUSH
25437: LD_INT 1
25439: ARRAY
25440: PPUSH
25441: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
25445: LD_VAR 0 3
25449: PUSH
25450: LD_INT 2
25452: ARRAY
25453: PPUSH
25454: LD_VAR 0 4
25458: PUSH
25459: LD_INT 2
25461: ARRAY
25462: PPUSH
25463: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
25467: LD_EXP 18
25471: PUSH
25472: LD_EXP 26
25476: PUSH
25477: LD_INT 0
25479: EQUAL
25480: NOT
25481: AND
25482: IFFALSE 25492
// kurinOpinion = 1 ;
25484: LD_ADDR_EXP 26
25488: PUSH
25489: LD_INT 1
25491: ST_TO_ADDR
// end else
25492: GO 25524
// begin if kurinCheckVehicles then
25494: LD_EXP 18
25498: IFFALSE 25524
// begin DialogueOn ;
25500: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
25504: LD_EXP 59
25508: PPUSH
25509: LD_STRING D6d-Kur-1
25511: PPUSH
25512: CALL_OW 94
// DialogueOff ;
25516: CALL_OW 7
// Lose_Vehicles ;
25520: CALL 19530 0 0
// end ; end ; end ;
25524: PPOPN 5
25526: END
// every 0 0$1 trigger meetNearOmicronBase do
25527: LD_EXP 19
25531: IFFALSE 25751
25533: GO 25535
25535: DISABLE
// begin spawnCrates = false ;
25536: LD_ADDR_EXP 5
25540: PUSH
25541: LD_INT 0
25543: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
25544: LD_INT 6
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: LD_INT 2
25552: PPUSH
25553: LD_INT 1
25555: PPUSH
25556: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
25560: LD_INT 0
25562: PPUSH
25563: LD_INT 3
25565: PPUSH
25566: LD_INT 0
25568: PPUSH
25569: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
25573: LD_STRING M3a
25575: PPUSH
25576: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
25580: LD_STRING M5
25582: PPUSH
25583: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
25587: LD_INT 15
25589: PPUSH
25590: LD_INT 1
25592: PPUSH
25593: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
25597: LD_EXP 74
25601: PPUSH
25602: LD_INT 75
25604: PPUSH
25605: LD_INT 38
25607: PPUSH
25608: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
25612: LD_EXP 73
25616: PPUSH
25617: LD_INT 75
25619: PPUSH
25620: LD_INT 38
25622: PPUSH
25623: CALL_OW 111
// counterIndex = 2 ;
25627: LD_ADDR_EXP 88
25631: PUSH
25632: LD_INT 2
25634: ST_TO_ADDR
// if not kurinOpinion = 0 then
25635: LD_EXP 26
25639: PUSH
25640: LD_INT 0
25642: EQUAL
25643: NOT
25644: IFFALSE 25654
// kurinOpinion = 1 ;
25646: LD_ADDR_EXP 26
25650: PUSH
25651: LD_INT 1
25653: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
25654: LD_INT 1
25656: PPUSH
25657: LD_INT 1
25659: PPUSH
25660: LD_INT 22
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 21
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PPUSH
25684: CALL_OW 69
25688: PPUSH
25689: LD_INT 13
25691: PPUSH
25692: LD_INT 28
25694: PPUSH
25695: LD_INT 17
25697: PPUSH
25698: LD_INT 29
25700: PPUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 3
25706: PUSH
25707: LD_INT 4
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: LIST
25714: PUSH
25715: LD_OWVAR 67
25719: ARRAY
25720: PPUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 3
25726: PUSH
25727: LD_INT 4
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: LIST
25734: PUSH
25735: LD_OWVAR 67
25739: ARRAY
25740: PPUSH
25741: LD_INT 0
25743: PPUSH
25744: LD_INT 0
25746: PPUSH
25747: CALL 11881 0 11
// end ;
25751: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
25752: LD_EXP 15
25756: PUSH
25757: LD_INT 35
25759: LESS
25760: PUSH
25761: LD_EXP 88
25765: PUSH
25766: LD_INT 2
25768: EQUAL
25769: AND
25770: IFFALSE 25819
25772: GO 25774
25774: DISABLE
// begin DialogueOn ;
25775: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
25779: LD_EXP 59
25783: PPUSH
25784: LD_STRING D7a-Kur-1
25786: PPUSH
25787: CALL_OW 94
// DialogueOff ;
25791: CALL_OW 7
// counterIndex = 3 ;
25795: LD_ADDR_EXP 88
25799: PUSH
25800: LD_INT 3
25802: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
25803: LD_ADDR_EXP 15
25807: PUSH
25808: LD_INT 4200
25810: ST_TO_ADDR
// kurinOpinion = 0 ;
25811: LD_ADDR_EXP 26
25815: PUSH
25816: LD_INT 0
25818: ST_TO_ADDR
// end ;
25819: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
25820: LD_EXP 15
25824: PUSH
25825: LD_INT 35
25827: LESS
25828: PUSH
25829: LD_EXP 88
25833: PUSH
25834: LD_INT 3
25836: EQUAL
25837: AND
25838: IFFALSE 25847
25840: GO 25842
25842: DISABLE
// Lose_Delay ;
25843: CALL 19560 0 0
25847: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25848: LD_EXP 19
25852: PUSH
25853: LD_INT 15
25855: PPUSH
25856: LD_INT 22
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 21
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PPUSH
25880: CALL_OW 71
25884: PUSH
25885: LD_INT 0
25887: EQUAL
25888: AND
25889: IFFALSE 25977
25891: GO 25893
25893: DISABLE
// begin counterEnable = false ;
25894: LD_ADDR_EXP 87
25898: PUSH
25899: LD_INT 0
25901: ST_TO_ADDR
// Display_strings = [ ] ;
25902: LD_ADDR_OWVAR 47
25906: PUSH
25907: EMPTY
25908: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
25909: LD_INT 15
25911: PPUSH
25912: LD_INT 0
25914: PPUSH
25915: CALL_OW 424
// canExitBattlefield = false ;
25919: LD_ADDR_EXP 24
25923: PUSH
25924: LD_INT 0
25926: ST_TO_ADDR
// DialogueOn ;
25927: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
25931: LD_EXP 47
25935: PPUSH
25936: LD_STRING D7-Bur-1
25938: PPUSH
25939: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
25943: LD_EXP 59
25947: PPUSH
25948: LD_STRING D7-Kur-1
25950: PPUSH
25951: CALL_OW 94
// DialogueOff ;
25955: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25959: LD_STRING M5a
25961: PPUSH
25962: CALL_OW 337
// Query ( QRefuel ) ;
25966: LD_STRING QRefuel
25968: PPUSH
25969: CALL_OW 97
// KirovAttackOmicron ;
25973: CALL 17628 0 0
// end ;
25977: END
// every 1 trigger not canExitBattlefield do var unit ;
25978: LD_EXP 24
25982: NOT
25983: IFFALSE 26152
25985: GO 25987
25987: DISABLE
25988: LD_INT 0
25990: PPUSH
// begin enable ;
25991: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25992: LD_ADDR_VAR 0 1
25996: PUSH
25997: LD_INT 22
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 21
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: LIST
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PPUSH
26039: CALL_OW 69
26043: PUSH
26044: FOR_IN
26045: IFFALSE 26150
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26047: LD_VAR 0 1
26051: PPUSH
26052: LD_INT 26
26054: PPUSH
26055: CALL_OW 308
26059: NOT
26060: PUSH
26061: LD_VAR 0 1
26065: PPUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 72
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 313
26090: OR
26091: AND
26092: IFFALSE 26148
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26094: LD_VAR 0 1
26098: PPUSH
26099: LD_INT 26
26101: PPUSH
26102: CALL_OW 113
// if not dialog_stop then
26106: LD_EXP 11
26110: NOT
26111: IFFALSE 26148
// begin dialog_stop = true ;
26113: LD_ADDR_EXP 11
26117: PUSH
26118: LD_INT 1
26120: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26121: LD_EXP 59
26125: PPUSH
26126: LD_STRING D12-Kur-1
26128: PPUSH
26129: CALL_OW 88
// wait ( 0 0$5 ) ;
26133: LD_INT 175
26135: PPUSH
26136: CALL_OW 67
// dialog_stop = false ;
26140: LD_ADDR_EXP 11
26144: PUSH
26145: LD_INT 0
26147: ST_TO_ADDR
// end ; end ;
26148: GO 26044
26150: POP
26151: POP
// end ;
26152: PPOPN 1
26154: END
// every 1 do var unit ;
26155: GO 26157
26157: DISABLE
26158: LD_INT 0
26160: PPUSH
// begin enable ;
26161: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26162: LD_ADDR_VAR 0 1
26166: PUSH
26167: LD_INT 22
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: LD_INT 21
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 21
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PPUSH
26209: CALL_OW 69
26213: PUSH
26214: FOR_IN
26215: IFFALSE 26290
// if IsInArea ( unit , SecondKurinBase ) then
26217: LD_VAR 0 1
26221: PPUSH
26222: LD_INT 20
26224: PPUSH
26225: CALL_OW 308
26229: IFFALSE 26288
// begin ComMoveXY ( unit , 200 , 114 ) ;
26231: LD_VAR 0 1
26235: PPUSH
26236: LD_INT 200
26238: PPUSH
26239: LD_INT 114
26241: PPUSH
26242: CALL_OW 111
// if not dialog_stop then
26246: LD_EXP 11
26250: NOT
26251: IFFALSE 26288
// begin dialog_stop = true ;
26253: LD_ADDR_EXP 11
26257: PUSH
26258: LD_INT 1
26260: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26261: LD_EXP 59
26265: PPUSH
26266: LD_STRING D12-Kur-1
26268: PPUSH
26269: CALL_OW 88
// wait ( 0 0$5 ) ;
26273: LD_INT 175
26275: PPUSH
26276: CALL_OW 67
// dialog_stop = false ;
26280: LD_ADDR_EXP 11
26284: PUSH
26285: LD_INT 0
26287: ST_TO_ADDR
// end ; end ;
26288: GO 26214
26290: POP
26291: POP
// end ;
26292: PPOPN 1
26294: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
26295: LD_EXP 19
26299: NOT
26300: PUSH
26301: LD_INT 290
26303: PPUSH
26304: CALL_OW 302
26308: AND
26309: IFFALSE 26625
26311: GO 26313
26313: DISABLE
26314: LD_INT 0
26316: PPUSH
26317: PPUSH
// begin enable ;
26318: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
26319: LD_ADDR_VAR 0 1
26323: PUSH
26324: LD_INT 13
26326: PPUSH
26327: LD_INT 22
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: LD_INT 21
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 21
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 3
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PPUSH
26380: CALL_OW 70
26384: PUSH
26385: FOR_IN
26386: IFFALSE 26623
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
26388: LD_VAR 0 1
26392: PPUSH
26393: LD_INT 22
26395: PUSH
26396: LD_INT 3
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: LD_INT 21
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 21
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PPUSH
26435: CALL_OW 69
26439: PPUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 74
26449: PPUSH
26450: CALL_OW 296
26454: PUSH
26455: LD_INT 17
26457: LESS
26458: IFFALSE 26621
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
26460: LD_INT 22
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: LD_INT 21
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 21
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PPUSH
26502: CALL_OW 69
26506: PPUSH
26507: LD_VAR 0 1
26511: PPUSH
26512: CALL_OW 74
26516: PPUSH
26517: LD_INT 69
26519: PPUSH
26520: LD_INT 85
26522: PPUSH
26523: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
26527: LD_ADDR_VAR 0 2
26531: PUSH
26532: LD_INT 1
26534: PPUSH
26535: LD_INT 2
26537: PPUSH
26538: CALL_OW 12
26542: ST_TO_ADDR
// if not dialog_stop then
26543: LD_EXP 11
26547: NOT
26548: IFFALSE 26621
// begin dialog_stop = true ;
26550: LD_ADDR_EXP 11
26554: PUSH
26555: LD_INT 1
26557: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
26558: LD_VAR 0 2
26562: PUSH
26563: LD_INT 1
26565: EQUAL
26566: PUSH
26567: LD_EXP 48
26571: PPUSH
26572: CALL_OW 302
26576: NOT
26577: OR
26578: IFFALSE 26594
// SayRadio ( Kurin , D11-Kur-1 ) else
26580: LD_EXP 59
26584: PPUSH
26585: LD_STRING D11-Kur-1
26587: PPUSH
26588: CALL_OW 94
26592: GO 26606
// Say ( Gnyevko , D11-Gny-1 ) ;
26594: LD_EXP 48
26598: PPUSH
26599: LD_STRING D11-Gny-1
26601: PPUSH
26602: CALL_OW 88
// wait ( 0 0$5 ) ;
26606: LD_INT 175
26608: PPUSH
26609: CALL_OW 67
// dialog_stop = false ;
26613: LD_ADDR_EXP 11
26617: PUSH
26618: LD_INT 0
26620: ST_TO_ADDR
// end ; end ;
26621: GO 26385
26623: POP
26624: POP
// end ;
26625: PPOPN 2
26627: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding ;
26628: LD_INT 290
26630: PPUSH
26631: CALL_OW 301
26635: PUSH
26636: LD_INT 22
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 21
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PPUSH
26660: CALL_OW 69
26664: PUSH
26665: LD_INT 5
26667: LESS
26668: AND
26669: IFFALSE 28224
26671: GO 26673
26673: DISABLE
26674: LD_INT 0
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
// begin omicronSurrender = true ;
26682: LD_ADDR_EXP 23
26686: PUSH
26687: LD_INT 1
26689: ST_TO_ADDR
// canExitBattlefield = true ;
26690: LD_ADDR_EXP 24
26694: PUSH
26695: LD_INT 1
26697: ST_TO_ADDR
// enableOmicronAI = false ;
26698: LD_ADDR_EXP 29
26702: PUSH
26703: LD_INT 0
26705: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
26706: LD_INT 1
26708: PPUSH
26709: LD_INT 3
26711: PPUSH
26712: LD_INT 1
26714: PPUSH
26715: LD_INT 0
26717: PPUSH
26718: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
26722: LD_INT 2
26724: PPUSH
26725: LD_INT 3
26727: PPUSH
26728: LD_INT 1
26730: PPUSH
26731: LD_INT 1
26733: PPUSH
26734: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
26738: LD_EXP 47
26742: PPUSH
26743: CALL_OW 87
// uc_side = 1 ;
26747: LD_ADDR_OWVAR 20
26751: PUSH
26752: LD_INT 1
26754: ST_TO_ADDR
// uc_nation = 1 ;
26755: LD_ADDR_OWVAR 21
26759: PUSH
26760: LD_INT 1
26762: ST_TO_ADDR
// hc_name :=  ;
26763: LD_ADDR_OWVAR 26
26767: PUSH
26768: LD_STRING 
26770: ST_TO_ADDR
// hc_gallery =  ;
26771: LD_ADDR_OWVAR 33
26775: PUSH
26776: LD_STRING 
26778: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
26779: LD_INT 1
26781: PPUSH
26782: LD_INT 1
26784: PPUSH
26785: CALL_OW 381
// tmpUs = CreateHuman ;
26789: LD_ADDR_VAR 0 2
26793: PUSH
26794: CALL_OW 44
26798: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
26799: LD_INT 22
26801: PUSH
26802: LD_INT 3
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PPUSH
26809: CALL_OW 69
26813: PPUSH
26814: CALL_OW 141
// InGameOn ;
26818: CALL_OW 8
// DialogueOn ;
26822: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
26826: LD_INT 26
26828: PPUSH
26829: LD_INT 33
26831: PPUSH
26832: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
26836: LD_VAR 0 2
26840: PPUSH
26841: LD_STRING D8-Sol1-1
26843: PPUSH
26844: CALL_OW 94
// if IsOk ( Kovalyuk ) then
26848: LD_EXP 50
26852: PPUSH
26853: CALL_OW 302
26857: IFFALSE 26871
// Say ( Kovalyuk , D8-Kov-1 ) ;
26859: LD_EXP 50
26863: PPUSH
26864: LD_STRING D8-Kov-1
26866: PPUSH
26867: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
26871: LD_ADDR_VAR 0 3
26875: PUSH
26876: LD_INT 22
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 21
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 26
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: LIST
26910: PPUSH
26911: CALL_OW 69
26915: PPUSH
26916: LD_STRING D8-RSol1-1
26918: PPUSH
26919: LD_STRING 
26921: PPUSH
26922: LD_INT 0
26924: PPUSH
26925: LD_INT 0
26927: PPUSH
26928: CALL 6968 0 5
26932: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
26933: LD_EXP 48
26937: PPUSH
26938: CALL_OW 302
26942: IFFALSE 26956
// Say ( Gnyevko , D8-Gny-1 ) ;
26944: LD_EXP 48
26948: PPUSH
26949: LD_STRING D8-Gny-1
26951: PPUSH
26952: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
26956: LD_INT 22
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 21
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 26
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 69
26995: PUSH
26996: LD_VAR 0 3
27000: DIFF
27001: PPUSH
27002: LD_STRING D8-RSol2-1
27004: PPUSH
27005: LD_STRING 
27007: PPUSH
27008: LD_INT 0
27010: PPUSH
27011: LD_INT 0
27013: PPUSH
27014: CALL 6968 0 5
// DialogueOff ;
27018: CALL_OW 7
// PrepareArabian ;
27022: CALL 6416 0 0
// CenterNowOnXY ( 234 , 122 ) ;
27026: LD_INT 234
27028: PPUSH
27029: LD_INT 122
27031: PPUSH
27032: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
27036: LD_EXP 85
27040: PPUSH
27041: LD_INT 221
27043: PPUSH
27044: LD_INT 110
27046: PPUSH
27047: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27051: LD_EXP 86
27055: PPUSH
27056: LD_INT 21
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PPUSH
27066: CALL_OW 72
27070: PPUSH
27071: LD_INT 221
27073: PPUSH
27074: LD_INT 110
27076: PPUSH
27077: CALL_OW 114
// wait ( 0 0$7 ) ;
27081: LD_INT 245
27083: PPUSH
27084: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
27088: LD_EXP 86
27092: PPUSH
27093: LD_INT 221
27095: PPUSH
27096: LD_INT 110
27098: PPUSH
27099: CALL_OW 174
// wait ( 0 0$8 ) ;
27103: LD_INT 280
27105: PPUSH
27106: CALL_OW 67
// music_nat = nation_arabian ;
27110: LD_ADDR_OWVAR 71
27114: PUSH
27115: LD_INT 2
27117: ST_TO_ADDR
// music_class = music_combat ;
27118: LD_ADDR_OWVAR 72
27122: PUSH
27123: LD_INT 1
27125: ST_TO_ADDR
// game_speed = 4 ;
27126: LD_ADDR_OWVAR 65
27130: PUSH
27131: LD_INT 4
27133: ST_TO_ADDR
// DialogueOn ;
27134: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
27138: LD_EXP 80
27142: PPUSH
27143: LD_STRING D9-Gri-1
27145: PPUSH
27146: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
27150: LD_EXP 59
27154: PPUSH
27155: LD_STRING D9-Kur-1
27157: PPUSH
27158: CALL_OW 94
// DialogueOff ;
27162: CALL_OW 7
// wait ( 0 0$2.5 ) ;
27166: LD_INT 88
27168: PPUSH
27169: CALL_OW 67
// DialogueOn ;
27173: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
27177: LD_EXP 80
27181: PPUSH
27182: LD_STRING D9-Gri-2
27184: PPUSH
27185: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
27189: LD_EXP 59
27193: PPUSH
27194: LD_STRING D9-Kur-2
27196: PPUSH
27197: CALL_OW 94
// DialogueOff ;
27201: CALL_OW 7
// repeat wait ( 1 ) ;
27205: LD_INT 1
27207: PPUSH
27208: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
27212: LD_EXP 80
27216: PPUSH
27217: CALL_OW 256
27221: PUSH
27222: LD_INT 1000
27224: LESS
27225: IFFALSE 27205
// DialogueOn ;
27227: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
27231: LD_EXP 80
27235: PPUSH
27236: LD_STRING D9-Gri-3
27238: PPUSH
27239: CALL_OW 94
// DialogueOff ;
27243: CALL_OW 7
// KillUnit ( Grishko ) ;
27247: LD_EXP 80
27251: PPUSH
27252: CALL_OW 66
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
27256: LD_EXP 76
27260: PPUSH
27261: LD_INT 25
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PPUSH
27271: CALL_OW 72
27275: PPUSH
27276: LD_INT 158
27278: PPUSH
27279: LD_INT 105
27281: PPUSH
27282: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
27286: LD_EXP 76
27290: PPUSH
27291: LD_INT 25
27293: PUSH
27294: LD_INT 4
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PPUSH
27301: CALL_OW 72
27305: PPUSH
27306: LD_INT 158
27308: PPUSH
27309: LD_INT 105
27311: PPUSH
27312: CALL_OW 111
// wait ( 0 0$12 ) ;
27316: LD_INT 420
27318: PPUSH
27319: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
27323: LD_EXP 59
27327: PPUSH
27328: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
27332: LD_EXP 59
27336: PPUSH
27337: LD_STRING D9-Kur-3
27339: PPUSH
27340: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
27344: LD_INT 176
27346: PPUSH
27347: LD_INT 110
27349: PPUSH
27350: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27354: LD_EXP 86
27358: PPUSH
27359: LD_INT 21
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 72
27373: PPUSH
27374: LD_INT 221
27376: PPUSH
27377: LD_INT 110
27379: PPUSH
27380: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
27384: LD_EXP 85
27388: PPUSH
27389: LD_INT 161
27391: PPUSH
27392: LD_INT 109
27394: PPUSH
27395: CALL_OW 114
// wait ( 0 0$7 ) ;
27399: LD_INT 245
27401: PPUSH
27402: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
27406: LD_EXP 86
27410: PPUSH
27411: LD_INT 161
27413: PPUSH
27414: LD_INT 109
27416: PPUSH
27417: CALL_OW 114
// wait ( 0 0$11 ) ;
27421: LD_INT 385
27423: PPUSH
27424: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
27428: LD_EXP 59
27432: PPUSH
27433: LD_EXP 65
27437: PPUSH
27438: CALL_OW 120
// DialogueOn ;
27442: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
27446: LD_EXP 59
27450: PPUSH
27451: LD_STRING D9a-Kur-1
27453: PPUSH
27454: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
27458: LD_EXP 47
27462: PPUSH
27463: LD_STRING D9a-Bur-1
27465: PPUSH
27466: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
27470: LD_EXP 59
27474: PPUSH
27475: LD_STRING D9a-Kur-2
27477: PPUSH
27478: CALL_OW 94
// DialogueOff ;
27482: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
27486: LD_EXP 77
27490: PPUSH
27491: CALL_OW 122
// wait ( 0 0$1 ) ;
27495: LD_INT 35
27497: PPUSH
27498: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
27502: LD_EXP 77
27506: PPUSH
27507: LD_EXP 58
27511: PPUSH
27512: CALL_OW 250
27516: PPUSH
27517: LD_EXP 58
27521: PPUSH
27522: CALL_OW 251
27526: PPUSH
27527: CALL_OW 111
// immortalSurvivors = true ;
27531: LD_ADDR_EXP 25
27535: PUSH
27536: LD_INT 1
27538: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
27539: LD_ADDR_VAR 0 2
27543: PUSH
27544: LD_INT 22
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 21
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 50
27566: PUSH
27567: EMPTY
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: PPUSH
27575: CALL_OW 69
27579: PUSH
27580: FOR_IN
27581: IFFALSE 27594
// RemoveUnit ( tmpUS ) ;
27583: LD_VAR 0 2
27587: PPUSH
27588: CALL_OW 64
27592: GO 27580
27594: POP
27595: POP
// wait ( 0 0$33 ) ;
27596: LD_INT 1155
27598: PPUSH
27599: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
27603: LD_INT 22
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 21
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PPUSH
27627: CALL_OW 69
27631: PPUSH
27632: CALL_OW 121
// wait ( 0 0$1 ) ;
27636: LD_INT 35
27638: PPUSH
27639: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
27643: LD_INT 22
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 21
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PPUSH
27667: CALL_OW 69
27671: PPUSH
27672: LD_EXP 60
27676: PPUSH
27677: CALL_OW 250
27681: PPUSH
27682: LD_EXP 60
27686: PPUSH
27687: CALL_OW 251
27691: PPUSH
27692: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
27696: LD_INT 22
27698: PUSH
27699: LD_INT 3
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 21
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PPUSH
27720: CALL_OW 69
27724: PPUSH
27725: LD_EXP 60
27729: PPUSH
27730: CALL_OW 250
27734: PPUSH
27735: LD_EXP 60
27739: PPUSH
27740: CALL_OW 251
27744: PPUSH
27745: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
27749: LD_EXP 47
27753: PPUSH
27754: CALL_OW 87
// wait ( 0 0$1 ) ;
27758: LD_INT 35
27760: PPUSH
27761: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
27765: LD_EXP 47
27769: PPUSH
27770: LD_EXP 60
27774: PPUSH
27775: CALL_OW 296
27779: PUSH
27780: LD_INT 6
27782: LESS
27783: IFFALSE 27696
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
27785: LD_EXP 47
27789: PUSH
27790: LD_EXP 60
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PPUSH
27799: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
27803: LD_EXP 47
27807: PPUSH
27808: LD_EXP 60
27812: PPUSH
27813: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
27817: LD_EXP 60
27821: PPUSH
27822: LD_EXP 47
27826: PPUSH
27827: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
27831: LD_EXP 47
27835: PPUSH
27836: LD_STRING D10a-Bur-1
27838: PPUSH
27839: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
27843: LD_EXP 60
27847: PPUSH
27848: LD_STRING D10a-Pop-1
27850: PPUSH
27851: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
27855: LD_EXP 47
27859: PPUSH
27860: LD_STRING D10a-Bur-2
27862: PPUSH
27863: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
27867: LD_EXP 60
27871: PPUSH
27872: LD_STRING D10a-Pop-2
27874: PPUSH
27875: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
27879: LD_EXP 47
27883: PPUSH
27884: LD_STRING D10a-Bur-3
27886: PPUSH
27887: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
27891: LD_EXP 60
27895: PPUSH
27896: LD_STRING D10a-Pop-3
27898: PPUSH
27899: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
27903: LD_EXP 47
27907: PPUSH
27908: LD_STRING D10a-Bur-4
27910: PPUSH
27911: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
27915: LD_EXP 60
27919: PPUSH
27920: LD_STRING D10a-Pop-4
27922: PPUSH
27923: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
27927: LD_EXP 47
27931: PPUSH
27932: LD_STRING D10a-Bur-5
27934: PPUSH
27935: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
27939: LD_EXP 60
27943: PPUSH
27944: LD_STRING D10a-Pop-5
27946: PPUSH
27947: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
27951: LD_INT 22
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 21
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PPUSH
27975: CALL_OW 69
27979: PPUSH
27980: LD_INT 83
27982: PPUSH
27983: LD_INT 157
27985: PPUSH
27986: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
27990: LD_EXP 77
27994: PPUSH
27995: LD_INT 83
27997: PPUSH
27998: LD_INT 157
28000: PPUSH
28001: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
28005: LD_EXP 47
28009: PPUSH
28010: CALL_OW 87
// wait ( 0 0$1 ) ;
28014: LD_INT 35
28016: PPUSH
28017: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
28021: LD_EXP 47
28025: PPUSH
28026: LD_EXP 58
28030: PPUSH
28031: CALL_OW 296
28035: PUSH
28036: LD_INT 19
28038: GREATER
28039: IFFALSE 28005
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
28041: LD_INT 113
28043: PPUSH
28044: LD_INT 96
28046: PPUSH
28047: LD_INT 3
28049: PPUSH
28050: LD_INT 12
28052: NEG
28053: PPUSH
28054: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
28058: LD_INT 113
28060: PPUSH
28061: LD_INT 96
28063: PPUSH
28064: CALL_OW 86
// canDestroyBeriaBase = true ;
28068: LD_ADDR_EXP 28
28072: PUSH
28073: LD_INT 1
28075: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
28076: LD_ADDR_VAR 0 5
28080: PUSH
28081: LD_INT 25
28083: PPUSH
28084: LD_INT 22
28086: PUSH
28087: LD_INT 3
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 21
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PPUSH
28108: CALL_OW 70
28112: ST_TO_ADDR
// for i = 1 to beriaBuildings do
28113: LD_ADDR_VAR 0 1
28117: PUSH
28118: DOUBLE
28119: LD_INT 1
28121: DEC
28122: ST_TO_ADDR
28123: LD_VAR 0 5
28127: PUSH
28128: FOR_TO
28129: IFFALSE 28211
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
28131: LD_ADDR_VAR 0 6
28135: PUSH
28136: LD_VAR 0 5
28140: PPUSH
28141: LD_INT 22
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PPUSH
28151: CALL_OW 69
28155: PUSH
28156: LD_INT 1
28158: ARRAY
28159: PPUSH
28160: CALL_OW 74
28164: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
28165: LD_ADDR_VAR 0 5
28169: PUSH
28170: LD_VAR 0 5
28174: PUSH
28175: LD_VAR 0 6
28179: DIFF
28180: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
28181: LD_EXP 85
28185: PPUSH
28186: LD_VAR 0 6
28190: PPUSH
28191: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
28195: LD_EXP 86
28199: PPUSH
28200: LD_VAR 0 6
28204: PPUSH
28205: CALL_OW 175
// end ;
28209: GO 28128
28211: POP
28212: POP
// wait ( 0 0$35 ) ;
28213: LD_INT 1225
28215: PPUSH
28216: CALL_OW 67
// FinishMission ;
28220: CALL 19575 0 0
// end ;
28224: PPOPN 6
28226: END
// every 1 trigger immortalSurvivors do var unit ;
28227: LD_EXP 25
28231: IFFALSE 28269
28233: GO 28235
28235: DISABLE
28236: LD_INT 0
28238: PPUSH
// begin enable ;
28239: ENABLE
// for unit in survivorsArabianAttack do
28240: LD_ADDR_VAR 0 1
28244: PUSH
28245: LD_EXP 77
28249: PUSH
28250: FOR_IN
28251: IFFALSE 28267
// SetLives ( unit , 1000 ) ;
28253: LD_VAR 0 1
28257: PPUSH
28258: LD_INT 1000
28260: PPUSH
28261: CALL_OW 234
28265: GO 28250
28267: POP
28268: POP
// end ; end_of_file
28269: PPOPN 1
28271: END
// every 0 0$30 do
28272: GO 28274
28274: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
28275: LD_INT 3
28277: PPUSH
28278: LD_INT 5
28280: PPUSH
28281: CALL_OW 12
28285: PPUSH
28286: LD_INT 76
28288: PPUSH
28289: LD_INT 111
28291: PPUSH
28292: LD_INT 5
28294: PPUSH
28295: LD_INT 1
28297: PPUSH
28298: CALL_OW 56
28302: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
28303: LD_EXP 5
28307: IFFALSE 28379
28309: GO 28311
28311: DISABLE
28312: LD_INT 0
28314: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
28315: LD_INT 50
28317: PPUSH
28318: LD_INT 4200
28320: PPUSH
28321: CALL_OW 12
28325: PPUSH
28326: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
28330: LD_VAR 0 1
28334: PUSH
28335: LD_INT 175
28337: MUL
28338: PPUSH
28339: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
28343: LD_ADDR_VAR 0 1
28347: PUSH
28348: LD_VAR 0 1
28352: PUSH
28353: LD_INT 1
28355: PLUS
28356: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
28357: LD_INT 3
28359: PPUSH
28360: LD_INT 5
28362: PPUSH
28363: CALL_OW 12
28367: PPUSH
28368: LD_INT 6
28370: PPUSH
28371: LD_INT 1
28373: PPUSH
28374: CALL_OW 55
// enable ;
28378: ENABLE
// end ; end_of_file
28379: PPOPN 1
28381: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
28382: LD_EXP 87
28386: IFFALSE 28549
28388: GO 28390
28390: DISABLE
// begin enable ;
28391: ENABLE
// case counterIndex of 1 :
28392: LD_EXP 88
28396: PUSH
28397: LD_INT 1
28399: DOUBLE
28400: EQUAL
28401: IFTRUE 28405
28403: GO 28422
28405: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
28406: LD_ADDR_EXP 39
28410: PUSH
28411: LD_EXP 39
28415: PUSH
28416: LD_INT 35
28418: MINUS
28419: ST_TO_ADDR
28420: GO 28549
28422: LD_INT 2
28424: DOUBLE
28425: EQUAL
28426: IFTRUE 28430
28428: GO 28464
28430: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
28431: LD_ADDR_OWVAR 47
28435: PUSH
28436: LD_STRING #Ru03-1
28438: PUSH
28439: LD_EXP 15
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
28448: LD_ADDR_EXP 15
28452: PUSH
28453: LD_EXP 15
28457: PUSH
28458: LD_INT 35
28460: MINUS
28461: ST_TO_ADDR
// end ; 3 :
28462: GO 28549
28464: LD_INT 3
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28506
28472: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
28473: LD_ADDR_OWVAR 47
28477: PUSH
28478: LD_STRING #Ru03-2
28480: PUSH
28481: LD_EXP 15
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
28490: LD_ADDR_EXP 15
28494: PUSH
28495: LD_EXP 15
28499: PUSH
28500: LD_INT 35
28502: MINUS
28503: ST_TO_ADDR
// end ; 4 :
28504: GO 28549
28506: LD_INT 4
28508: DOUBLE
28509: EQUAL
28510: IFTRUE 28514
28512: GO 28548
28514: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
28515: LD_ADDR_OWVAR 47
28519: PUSH
28520: LD_STRING #Ru03-3
28522: PUSH
28523: LD_EXP 14
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
28532: LD_ADDR_EXP 14
28536: PUSH
28537: LD_EXP 14
28541: PUSH
28542: LD_INT 35
28544: MINUS
28545: ST_TO_ADDR
// end ; end ;
28546: GO 28549
28548: POP
// end ; end_of_file
28549: END
// every 7 7$0 do
28550: GO 28552
28552: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
28553: LD_INT 3
28555: PPUSH
28556: LD_INT 1
28558: PPUSH
28559: LD_INT 0
28561: PPUSH
28562: LD_INT 7
28564: PUSH
28565: LD_INT 9
28567: PUSH
28568: LD_INT 8
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 1
28578: PPUSH
28579: LD_INT 3
28581: PPUSH
28582: CALL_OW 12
28586: ARRAY
28587: PPUSH
28588: CALL 5799 0 4
28592: END
// every 12 12$0 do
28593: GO 28595
28595: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
28596: LD_INT 2
28598: PPUSH
28599: LD_INT 2
28601: PPUSH
28602: LD_INT 1
28604: PPUSH
28605: LD_INT 7
28607: PUSH
28608: LD_INT 9
28610: PUSH
28611: LD_INT 8
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: PPUSH
28622: LD_INT 3
28624: PPUSH
28625: CALL_OW 12
28629: ARRAY
28630: PPUSH
28631: CALL 5799 0 4
28635: END
// every 20 20$0 do
28636: GO 28638
28638: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
28639: LD_INT 4
28641: PPUSH
28642: LD_INT 2
28644: PPUSH
28645: LD_INT 0
28647: PPUSH
28648: LD_INT 7
28650: PUSH
28651: LD_INT 9
28653: PUSH
28654: LD_INT 8
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 1
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: CALL_OW 12
28672: ARRAY
28673: PPUSH
28674: CALL 5799 0 4
28678: END
// every 23 23$0 do
28679: GO 28681
28681: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
28682: LD_INT 3
28684: PPUSH
28685: LD_INT 1
28687: PPUSH
28688: LD_INT 2
28690: PPUSH
28691: LD_INT 7
28693: PUSH
28694: LD_INT 9
28696: PUSH
28697: LD_INT 8
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PPUSH
28708: LD_INT 3
28710: PPUSH
28711: CALL_OW 12
28715: ARRAY
28716: PPUSH
28717: CALL 5799 0 4
28721: END
// export function Nef_PrepareNature ; var i , un ; begin
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
28726: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
28727: LD_ADDR_VAR 0 2
28731: PUSH
28732: DOUBLE
28733: LD_INT 1
28735: DEC
28736: ST_TO_ADDR
28737: LD_EXP 31
28741: PUSH
28742: LD_INT 1
28744: ARRAY
28745: PUSH
28746: FOR_TO
28747: IFFALSE 28857
// begin uc_side = 0 ;
28749: LD_ADDR_OWVAR 20
28753: PUSH
28754: LD_INT 0
28756: ST_TO_ADDR
// uc_nation = nation_nature ;
28757: LD_ADDR_OWVAR 21
28761: PUSH
28762: LD_INT 0
28764: ST_TO_ADDR
// hc_class = class_apeman ;
28765: LD_ADDR_OWVAR 28
28769: PUSH
28770: LD_INT 12
28772: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28773: LD_ADDR_OWVAR 31
28777: PUSH
28778: LD_EXP 32
28782: PUSH
28783: LD_INT 1
28785: ARRAY
28786: PUSH
28787: LD_EXP 32
28791: PUSH
28792: LD_INT 2
28794: ARRAY
28795: PUSH
28796: LD_EXP 32
28800: PUSH
28801: LD_INT 3
28803: ARRAY
28804: PUSH
28805: LD_EXP 32
28809: PUSH
28810: LD_INT 4
28812: ARRAY
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28820: LD_ADDR_OWVAR 35
28824: PUSH
28825: LD_EXP 33
28829: ST_TO_ADDR
// un = CreateHuman ;
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: CALL_OW 44
28839: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28840: LD_VAR 0 3
28844: PPUSH
28845: LD_INT 27
28847: PPUSH
28848: LD_INT 0
28850: PPUSH
28851: CALL_OW 49
// end ;
28855: GO 28746
28857: POP
28858: POP
// for i := 1 to animalsAmount [ 2 ] do
28859: LD_ADDR_VAR 0 2
28863: PUSH
28864: DOUBLE
28865: LD_INT 1
28867: DEC
28868: ST_TO_ADDR
28869: LD_EXP 31
28873: PUSH
28874: LD_INT 2
28876: ARRAY
28877: PUSH
28878: FOR_TO
28879: IFFALSE 28989
// begin uc_side = 0 ;
28881: LD_ADDR_OWVAR 20
28885: PUSH
28886: LD_INT 0
28888: ST_TO_ADDR
// uc_nation = nation_nature ;
28889: LD_ADDR_OWVAR 21
28893: PUSH
28894: LD_INT 0
28896: ST_TO_ADDR
// hc_class = class_phororhacos ;
28897: LD_ADDR_OWVAR 28
28901: PUSH
28902: LD_INT 18
28904: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28905: LD_ADDR_OWVAR 31
28909: PUSH
28910: LD_EXP 32
28914: PUSH
28915: LD_INT 1
28917: ARRAY
28918: PUSH
28919: LD_EXP 32
28923: PUSH
28924: LD_INT 2
28926: ARRAY
28927: PUSH
28928: LD_EXP 32
28932: PUSH
28933: LD_INT 3
28935: ARRAY
28936: PUSH
28937: LD_EXP 32
28941: PUSH
28942: LD_INT 4
28944: ARRAY
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28952: LD_ADDR_OWVAR 35
28956: PUSH
28957: LD_EXP 33
28961: ST_TO_ADDR
// un = CreateHuman ;
28962: LD_ADDR_VAR 0 3
28966: PUSH
28967: CALL_OW 44
28971: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28972: LD_VAR 0 3
28976: PPUSH
28977: LD_INT 27
28979: PPUSH
28980: LD_INT 0
28982: PPUSH
28983: CALL_OW 49
// end ;
28987: GO 28878
28989: POP
28990: POP
// for i := 1 to animalsAmount [ 3 ] do
28991: LD_ADDR_VAR 0 2
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_EXP 31
29005: PUSH
29006: LD_INT 3
29008: ARRAY
29009: PUSH
29010: FOR_TO
29011: IFFALSE 29121
// begin uc_side = 0 ;
29013: LD_ADDR_OWVAR 20
29017: PUSH
29018: LD_INT 0
29020: ST_TO_ADDR
// uc_nation = nation_nature ;
29021: LD_ADDR_OWVAR 21
29025: PUSH
29026: LD_INT 0
29028: ST_TO_ADDR
// hc_class = class_tiger ;
29029: LD_ADDR_OWVAR 28
29033: PUSH
29034: LD_INT 14
29036: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
29037: LD_ADDR_OWVAR 31
29041: PUSH
29042: LD_EXP 32
29046: PUSH
29047: LD_INT 1
29049: ARRAY
29050: PUSH
29051: LD_EXP 32
29055: PUSH
29056: LD_INT 2
29058: ARRAY
29059: PUSH
29060: LD_EXP 32
29064: PUSH
29065: LD_INT 3
29067: ARRAY
29068: PUSH
29069: LD_EXP 32
29073: PUSH
29074: LD_INT 4
29076: ARRAY
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
29084: LD_ADDR_OWVAR 35
29088: PUSH
29089: LD_EXP 33
29093: ST_TO_ADDR
// un = CreateHuman ;
29094: LD_ADDR_VAR 0 3
29098: PUSH
29099: CALL_OW 44
29103: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
29104: LD_VAR 0 3
29108: PPUSH
29109: LD_INT 27
29111: PPUSH
29112: LD_INT 0
29114: PPUSH
29115: CALL_OW 49
// end ;
29119: GO 29010
29121: POP
29122: POP
// for i := 1 to animalsAmount [ 4 ] do
29123: LD_ADDR_VAR 0 2
29127: PUSH
29128: DOUBLE
29129: LD_INT 1
29131: DEC
29132: ST_TO_ADDR
29133: LD_EXP 31
29137: PUSH
29138: LD_INT 4
29140: ARRAY
29141: PUSH
29142: FOR_TO
29143: IFFALSE 29253
// begin uc_side = 0 ;
29145: LD_ADDR_OWVAR 20
29149: PUSH
29150: LD_INT 0
29152: ST_TO_ADDR
// uc_nation = nation_nature ;
29153: LD_ADDR_OWVAR 21
29157: PUSH
29158: LD_INT 0
29160: ST_TO_ADDR
// hc_class = 21 ;
29161: LD_ADDR_OWVAR 28
29165: PUSH
29166: LD_INT 21
29168: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
29169: LD_ADDR_OWVAR 31
29173: PUSH
29174: LD_EXP 32
29178: PUSH
29179: LD_INT 1
29181: ARRAY
29182: PUSH
29183: LD_EXP 32
29187: PUSH
29188: LD_INT 2
29190: ARRAY
29191: PUSH
29192: LD_EXP 32
29196: PUSH
29197: LD_INT 3
29199: ARRAY
29200: PUSH
29201: LD_EXP 32
29205: PUSH
29206: LD_INT 4
29208: ARRAY
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
29216: LD_ADDR_OWVAR 35
29220: PUSH
29221: LD_EXP 33
29225: ST_TO_ADDR
// un = CreateHuman ;
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: CALL_OW 44
29235: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
29236: LD_VAR 0 3
29240: PPUSH
29241: LD_INT 27
29243: PPUSH
29244: LD_INT 0
29246: PPUSH
29247: CALL_OW 49
// end ;
29251: GO 29142
29253: POP
29254: POP
// for i := 1 to animalsAmount [ 5 ] do
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: DOUBLE
29261: LD_INT 1
29263: DEC
29264: ST_TO_ADDR
29265: LD_EXP 31
29269: PUSH
29270: LD_INT 5
29272: ARRAY
29273: PUSH
29274: FOR_TO
29275: IFFALSE 29336
// begin uc_side = 0 ;
29277: LD_ADDR_OWVAR 20
29281: PUSH
29282: LD_INT 0
29284: ST_TO_ADDR
// uc_nation = nation_nature ;
29285: LD_ADDR_OWVAR 21
29289: PUSH
29290: LD_INT 0
29292: ST_TO_ADDR
// vc_chassis := 31 ;
29293: LD_ADDR_OWVAR 37
29297: PUSH
29298: LD_INT 31
29300: ST_TO_ADDR
// vc_control := control_rider ;
29301: LD_ADDR_OWVAR 38
29305: PUSH
29306: LD_INT 4
29308: ST_TO_ADDR
// un := CreateVehicle ;
29309: LD_ADDR_VAR 0 3
29313: PUSH
29314: CALL_OW 45
29318: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
29319: LD_VAR 0 3
29323: PPUSH
29324: LD_INT 27
29326: PPUSH
29327: LD_INT 0
29329: PPUSH
29330: CALL_OW 49
// end ;
29334: GO 29274
29336: POP
29337: POP
// end ; end_of_file
29338: LD_VAR 0 1
29342: RET
// every 1 trigger scholtzeSaved do
29343: LD_EXP 7
29347: IFFALSE 29359
29349: GO 29351
29351: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
29352: LD_STRING ACH_PROFESSOR
29354: PPUSH
29355: CALL_OW 543
29359: END
// every 1 trigger IsDead ( Sikorski ) do
29360: LD_INT 290
29362: PPUSH
29363: CALL_OW 301
29367: IFFALSE 29379
29369: GO 29371
29371: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
29372: LD_STRING ACH_SIKORSKI
29374: PPUSH
29375: CALL_OW 543
29379: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
29380: LD_EXP 12
29384: NOT
29385: PUSH
29386: LD_EXP 24
29390: NOT
29391: AND
29392: IFFALSE 29404
29394: GO 29396
29396: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
29397: LD_STRING ACH_REINFORCE
29399: PPUSH
29400: CALL_OW 543
29404: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
29405: LD_INT 0
29407: PPUSH
// ru_radar := 98 ;
29408: LD_ADDR_EXP 89
29412: PUSH
29413: LD_INT 98
29415: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29416: LD_ADDR_EXP 90
29420: PUSH
29421: LD_INT 89
29423: ST_TO_ADDR
// us_hack := 99 ;
29424: LD_ADDR_EXP 91
29428: PUSH
29429: LD_INT 99
29431: ST_TO_ADDR
// us_artillery := 97 ;
29432: LD_ADDR_EXP 92
29436: PUSH
29437: LD_INT 97
29439: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29440: LD_ADDR_EXP 93
29444: PUSH
29445: LD_INT 91
29447: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29448: LD_ADDR_EXP 94
29452: PUSH
29453: LD_INT 92
29455: ST_TO_ADDR
// tech_Artillery := 80 ;
29456: LD_ADDR_EXP 95
29460: PUSH
29461: LD_INT 80
29463: ST_TO_ADDR
// tech_RadMat := 81 ;
29464: LD_ADDR_EXP 96
29468: PUSH
29469: LD_INT 81
29471: ST_TO_ADDR
// tech_BasicTools := 82 ;
29472: LD_ADDR_EXP 97
29476: PUSH
29477: LD_INT 82
29479: ST_TO_ADDR
// tech_Cargo := 83 ;
29480: LD_ADDR_EXP 98
29484: PUSH
29485: LD_INT 83
29487: ST_TO_ADDR
// tech_Track := 84 ;
29488: LD_ADDR_EXP 99
29492: PUSH
29493: LD_INT 84
29495: ST_TO_ADDR
// tech_Crane := 85 ;
29496: LD_ADDR_EXP 100
29500: PUSH
29501: LD_INT 85
29503: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29504: LD_ADDR_EXP 101
29508: PUSH
29509: LD_INT 86
29511: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29512: LD_ADDR_EXP 102
29516: PUSH
29517: LD_INT 87
29519: ST_TO_ADDR
// end ;
29520: LD_VAR 0 1
29524: RET
// every 1 do
29525: GO 29527
29527: DISABLE
// InitGlobalVariables ; end_of_file
29528: CALL 29405 0 0
29532: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29533: LD_INT 0
29535: PPUSH
29536: PPUSH
// if exist_mode then
29537: LD_VAR 0 2
29541: IFFALSE 29566
// unit := CreateCharacter ( prefix & ident ) else
29543: LD_ADDR_VAR 0 5
29547: PUSH
29548: LD_VAR 0 3
29552: PUSH
29553: LD_VAR 0 1
29557: STR
29558: PPUSH
29559: CALL_OW 34
29563: ST_TO_ADDR
29564: GO 29581
// unit := NewCharacter ( ident ) ;
29566: LD_ADDR_VAR 0 5
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 25
29580: ST_TO_ADDR
// result := unit ;
29581: LD_ADDR_VAR 0 4
29585: PUSH
29586: LD_VAR 0 5
29590: ST_TO_ADDR
// end ;
29591: LD_VAR 0 4
29595: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29596: LD_INT 0
29598: PPUSH
29599: PPUSH
// if not side or not nation then
29600: LD_VAR 0 1
29604: NOT
29605: PUSH
29606: LD_VAR 0 2
29610: NOT
29611: OR
29612: IFFALSE 29616
// exit ;
29614: GO 30380
// case nation of nation_american :
29616: LD_VAR 0 2
29620: PUSH
29621: LD_INT 1
29623: DOUBLE
29624: EQUAL
29625: IFTRUE 29629
29627: GO 29843
29629: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29630: LD_ADDR_VAR 0 4
29634: PUSH
29635: LD_INT 35
29637: PUSH
29638: LD_INT 45
29640: PUSH
29641: LD_INT 46
29643: PUSH
29644: LD_INT 47
29646: PUSH
29647: LD_INT 82
29649: PUSH
29650: LD_INT 83
29652: PUSH
29653: LD_INT 84
29655: PUSH
29656: LD_INT 85
29658: PUSH
29659: LD_INT 86
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 6
29670: PUSH
29671: LD_INT 15
29673: PUSH
29674: LD_INT 16
29676: PUSH
29677: LD_INT 7
29679: PUSH
29680: LD_INT 12
29682: PUSH
29683: LD_INT 13
29685: PUSH
29686: LD_INT 10
29688: PUSH
29689: LD_INT 14
29691: PUSH
29692: LD_INT 20
29694: PUSH
29695: LD_INT 21
29697: PUSH
29698: LD_INT 22
29700: PUSH
29701: LD_INT 25
29703: PUSH
29704: LD_INT 32
29706: PUSH
29707: LD_INT 27
29709: PUSH
29710: LD_INT 36
29712: PUSH
29713: LD_INT 69
29715: PUSH
29716: LD_INT 39
29718: PUSH
29719: LD_INT 34
29721: PUSH
29722: LD_INT 40
29724: PUSH
29725: LD_INT 48
29727: PUSH
29728: LD_INT 49
29730: PUSH
29731: LD_INT 50
29733: PUSH
29734: LD_INT 51
29736: PUSH
29737: LD_INT 52
29739: PUSH
29740: LD_INT 53
29742: PUSH
29743: LD_INT 54
29745: PUSH
29746: LD_INT 55
29748: PUSH
29749: LD_INT 56
29751: PUSH
29752: LD_INT 57
29754: PUSH
29755: LD_INT 58
29757: PUSH
29758: LD_INT 59
29760: PUSH
29761: LD_INT 60
29763: PUSH
29764: LD_INT 61
29766: PUSH
29767: LD_INT 62
29769: PUSH
29770: LD_INT 80
29772: PUSH
29773: LD_INT 82
29775: PUSH
29776: LD_INT 83
29778: PUSH
29779: LD_INT 84
29781: PUSH
29782: LD_INT 85
29784: PUSH
29785: LD_INT 86
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: ST_TO_ADDR
29841: GO 30304
29843: LD_INT 2
29845: DOUBLE
29846: EQUAL
29847: IFTRUE 29851
29849: GO 30073
29851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29852: LD_ADDR_VAR 0 4
29856: PUSH
29857: LD_INT 35
29859: PUSH
29860: LD_INT 45
29862: PUSH
29863: LD_INT 46
29865: PUSH
29866: LD_INT 47
29868: PUSH
29869: LD_INT 82
29871: PUSH
29872: LD_INT 83
29874: PUSH
29875: LD_INT 84
29877: PUSH
29878: LD_INT 85
29880: PUSH
29881: LD_INT 87
29883: PUSH
29884: LD_INT 70
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 11
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 5
29901: PUSH
29902: LD_INT 6
29904: PUSH
29905: LD_INT 15
29907: PUSH
29908: LD_INT 18
29910: PUSH
29911: LD_INT 7
29913: PUSH
29914: LD_INT 17
29916: PUSH
29917: LD_INT 8
29919: PUSH
29920: LD_INT 20
29922: PUSH
29923: LD_INT 21
29925: PUSH
29926: LD_INT 22
29928: PUSH
29929: LD_INT 72
29931: PUSH
29932: LD_INT 26
29934: PUSH
29935: LD_INT 69
29937: PUSH
29938: LD_INT 39
29940: PUSH
29941: LD_INT 40
29943: PUSH
29944: LD_INT 41
29946: PUSH
29947: LD_INT 42
29949: PUSH
29950: LD_INT 43
29952: PUSH
29953: LD_INT 48
29955: PUSH
29956: LD_INT 49
29958: PUSH
29959: LD_INT 50
29961: PUSH
29962: LD_INT 51
29964: PUSH
29965: LD_INT 52
29967: PUSH
29968: LD_INT 53
29970: PUSH
29971: LD_INT 54
29973: PUSH
29974: LD_INT 55
29976: PUSH
29977: LD_INT 56
29979: PUSH
29980: LD_INT 60
29982: PUSH
29983: LD_INT 61
29985: PUSH
29986: LD_INT 62
29988: PUSH
29989: LD_INT 66
29991: PUSH
29992: LD_INT 67
29994: PUSH
29995: LD_INT 68
29997: PUSH
29998: LD_INT 81
30000: PUSH
30001: LD_INT 82
30003: PUSH
30004: LD_INT 83
30006: PUSH
30007: LD_INT 84
30009: PUSH
30010: LD_INT 85
30012: PUSH
30013: LD_INT 87
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
30071: GO 30304
30073: LD_INT 3
30075: DOUBLE
30076: EQUAL
30077: IFTRUE 30081
30079: GO 30303
30081: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_INT 46
30089: PUSH
30090: LD_INT 47
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: LD_INT 82
30101: PUSH
30102: LD_INT 83
30104: PUSH
30105: LD_INT 84
30107: PUSH
30108: LD_INT 85
30110: PUSH
30111: LD_INT 86
30113: PUSH
30114: LD_INT 11
30116: PUSH
30117: LD_INT 9
30119: PUSH
30120: LD_INT 20
30122: PUSH
30123: LD_INT 19
30125: PUSH
30126: LD_INT 21
30128: PUSH
30129: LD_INT 24
30131: PUSH
30132: LD_INT 22
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 28
30140: PUSH
30141: LD_INT 29
30143: PUSH
30144: LD_INT 30
30146: PUSH
30147: LD_INT 31
30149: PUSH
30150: LD_INT 37
30152: PUSH
30153: LD_INT 38
30155: PUSH
30156: LD_INT 32
30158: PUSH
30159: LD_INT 27
30161: PUSH
30162: LD_INT 33
30164: PUSH
30165: LD_INT 69
30167: PUSH
30168: LD_INT 39
30170: PUSH
30171: LD_INT 34
30173: PUSH
30174: LD_INT 40
30176: PUSH
30177: LD_INT 71
30179: PUSH
30180: LD_INT 23
30182: PUSH
30183: LD_INT 44
30185: PUSH
30186: LD_INT 48
30188: PUSH
30189: LD_INT 49
30191: PUSH
30192: LD_INT 50
30194: PUSH
30195: LD_INT 51
30197: PUSH
30198: LD_INT 52
30200: PUSH
30201: LD_INT 53
30203: PUSH
30204: LD_INT 54
30206: PUSH
30207: LD_INT 55
30209: PUSH
30210: LD_INT 56
30212: PUSH
30213: LD_INT 57
30215: PUSH
30216: LD_INT 58
30218: PUSH
30219: LD_INT 59
30221: PUSH
30222: LD_INT 63
30224: PUSH
30225: LD_INT 64
30227: PUSH
30228: LD_INT 65
30230: PUSH
30231: LD_INT 82
30233: PUSH
30234: LD_INT 83
30236: PUSH
30237: LD_INT 84
30239: PUSH
30240: LD_INT 85
30242: PUSH
30243: LD_INT 86
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: ST_TO_ADDR
30301: GO 30304
30303: POP
// if state > - 1 and state < 3 then
30304: LD_VAR 0 3
30308: PUSH
30309: LD_INT 1
30311: NEG
30312: GREATER
30313: PUSH
30314: LD_VAR 0 3
30318: PUSH
30319: LD_INT 3
30321: LESS
30322: AND
30323: IFFALSE 30380
// for i in result do
30325: LD_ADDR_VAR 0 5
30329: PUSH
30330: LD_VAR 0 4
30334: PUSH
30335: FOR_IN
30336: IFFALSE 30378
// if GetTech ( i , side ) <> state then
30338: LD_VAR 0 5
30342: PPUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 321
30352: PUSH
30353: LD_VAR 0 3
30357: NONEQUAL
30358: IFFALSE 30376
// result := result diff i ;
30360: LD_ADDR_VAR 0 4
30364: PUSH
30365: LD_VAR 0 4
30369: PUSH
30370: LD_VAR 0 5
30374: DIFF
30375: ST_TO_ADDR
30376: GO 30335
30378: POP
30379: POP
// end ;
30380: LD_VAR 0 4
30384: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30385: LD_INT 0
30387: PPUSH
30388: PPUSH
30389: PPUSH
// result := true ;
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: LD_INT 1
30397: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30398: LD_ADDR_VAR 0 5
30402: PUSH
30403: LD_VAR 0 2
30407: PPUSH
30408: CALL_OW 480
30412: ST_TO_ADDR
// if not tmp then
30413: LD_VAR 0 5
30417: NOT
30418: IFFALSE 30422
// exit ;
30420: GO 30471
// for i in tmp do
30422: LD_ADDR_VAR 0 4
30426: PUSH
30427: LD_VAR 0 5
30431: PUSH
30432: FOR_IN
30433: IFFALSE 30469
// if GetTech ( i , side ) <> state_researched then
30435: LD_VAR 0 4
30439: PPUSH
30440: LD_VAR 0 1
30444: PPUSH
30445: CALL_OW 321
30449: PUSH
30450: LD_INT 2
30452: NONEQUAL
30453: IFFALSE 30467
// begin result := false ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_INT 0
30462: ST_TO_ADDR
// exit ;
30463: POP
30464: POP
30465: GO 30471
// end ;
30467: GO 30432
30469: POP
30470: POP
// end ;
30471: LD_VAR 0 3
30475: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
30487: PPUSH
30488: PPUSH
30489: PPUSH
30490: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30491: LD_VAR 0 1
30495: NOT
30496: PUSH
30497: LD_VAR 0 1
30501: PPUSH
30502: CALL_OW 257
30506: PUSH
30507: LD_INT 9
30509: NONEQUAL
30510: OR
30511: IFFALSE 30515
// exit ;
30513: GO 31088
// side := GetSide ( unit ) ;
30515: LD_ADDR_VAR 0 9
30519: PUSH
30520: LD_VAR 0 1
30524: PPUSH
30525: CALL_OW 255
30529: ST_TO_ADDR
// tech_space := tech_spacanom ;
30530: LD_ADDR_VAR 0 12
30534: PUSH
30535: LD_INT 29
30537: ST_TO_ADDR
// tech_time := tech_taurad ;
30538: LD_ADDR_VAR 0 13
30542: PUSH
30543: LD_INT 28
30545: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30546: LD_ADDR_VAR 0 11
30550: PUSH
30551: LD_VAR 0 1
30555: PPUSH
30556: CALL_OW 310
30560: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30561: LD_VAR 0 11
30565: PPUSH
30566: CALL_OW 247
30570: PUSH
30571: LD_INT 2
30573: EQUAL
30574: IFFALSE 30578
// exit ;
30576: GO 31088
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30578: LD_ADDR_VAR 0 8
30582: PUSH
30583: LD_INT 81
30585: PUSH
30586: LD_VAR 0 9
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 21
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PPUSH
30616: CALL_OW 69
30620: ST_TO_ADDR
// if not tmp then
30621: LD_VAR 0 8
30625: NOT
30626: IFFALSE 30630
// exit ;
30628: GO 31088
// if in_unit then
30630: LD_VAR 0 11
30634: IFFALSE 30658
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30636: LD_ADDR_VAR 0 10
30640: PUSH
30641: LD_VAR 0 8
30645: PPUSH
30646: LD_VAR 0 11
30650: PPUSH
30651: CALL_OW 74
30655: ST_TO_ADDR
30656: GO 30678
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30658: LD_ADDR_VAR 0 10
30662: PUSH
30663: LD_VAR 0 8
30667: PPUSH
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 74
30677: ST_TO_ADDR
// if not enemy then
30678: LD_VAR 0 10
30682: NOT
30683: IFFALSE 30687
// exit ;
30685: GO 31088
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30687: LD_VAR 0 11
30691: PUSH
30692: LD_VAR 0 11
30696: PPUSH
30697: LD_VAR 0 10
30701: PPUSH
30702: CALL_OW 296
30706: PUSH
30707: LD_INT 13
30709: GREATER
30710: AND
30711: PUSH
30712: LD_VAR 0 1
30716: PPUSH
30717: LD_VAR 0 10
30721: PPUSH
30722: CALL_OW 296
30726: PUSH
30727: LD_INT 12
30729: GREATER
30730: OR
30731: IFFALSE 30735
// exit ;
30733: GO 31088
// missile := [ 1 ] ;
30735: LD_ADDR_VAR 0 14
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30746: LD_VAR 0 9
30750: PPUSH
30751: LD_VAR 0 12
30755: PPUSH
30756: CALL_OW 325
30760: IFFALSE 30789
// missile := Insert ( missile , missile + 1 , 2 ) ;
30762: LD_ADDR_VAR 0 14
30766: PUSH
30767: LD_VAR 0 14
30771: PPUSH
30772: LD_VAR 0 14
30776: PUSH
30777: LD_INT 1
30779: PLUS
30780: PPUSH
30781: LD_INT 2
30783: PPUSH
30784: CALL_OW 2
30788: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30789: LD_VAR 0 9
30793: PPUSH
30794: LD_VAR 0 13
30798: PPUSH
30799: CALL_OW 325
30803: PUSH
30804: LD_VAR 0 10
30808: PPUSH
30809: CALL_OW 255
30813: PPUSH
30814: LD_VAR 0 13
30818: PPUSH
30819: CALL_OW 325
30823: NOT
30824: AND
30825: IFFALSE 30854
// missile := Insert ( missile , missile + 1 , 3 ) ;
30827: LD_ADDR_VAR 0 14
30831: PUSH
30832: LD_VAR 0 14
30836: PPUSH
30837: LD_VAR 0 14
30841: PUSH
30842: LD_INT 1
30844: PLUS
30845: PPUSH
30846: LD_INT 3
30848: PPUSH
30849: CALL_OW 2
30853: ST_TO_ADDR
// if missile < 2 then
30854: LD_VAR 0 14
30858: PUSH
30859: LD_INT 2
30861: LESS
30862: IFFALSE 30866
// exit ;
30864: GO 31088
// x := GetX ( enemy ) ;
30866: LD_ADDR_VAR 0 4
30870: PUSH
30871: LD_VAR 0 10
30875: PPUSH
30876: CALL_OW 250
30880: ST_TO_ADDR
// y := GetY ( enemy ) ;
30881: LD_ADDR_VAR 0 5
30885: PUSH
30886: LD_VAR 0 10
30890: PPUSH
30891: CALL_OW 251
30895: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30896: LD_ADDR_VAR 0 6
30900: PUSH
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PPUSH
30910: LD_INT 1
30912: PPUSH
30913: CALL_OW 12
30917: PLUS
30918: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30919: LD_ADDR_VAR 0 7
30923: PUSH
30924: LD_VAR 0 5
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PPUSH
30933: LD_INT 1
30935: PPUSH
30936: CALL_OW 12
30940: PLUS
30941: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30942: LD_VAR 0 6
30946: PPUSH
30947: LD_VAR 0 7
30951: PPUSH
30952: CALL_OW 488
30956: NOT
30957: IFFALSE 30979
// begin _x := x ;
30959: LD_ADDR_VAR 0 6
30963: PUSH
30964: LD_VAR 0 4
30968: ST_TO_ADDR
// _y := y ;
30969: LD_ADDR_VAR 0 7
30973: PUSH
30974: LD_VAR 0 5
30978: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30979: LD_ADDR_VAR 0 3
30983: PUSH
30984: LD_INT 1
30986: PPUSH
30987: LD_VAR 0 14
30991: PPUSH
30992: CALL_OW 12
30996: ST_TO_ADDR
// case i of 1 :
30997: LD_VAR 0 3
31001: PUSH
31002: LD_INT 1
31004: DOUBLE
31005: EQUAL
31006: IFTRUE 31010
31008: GO 31027
31010: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31011: LD_VAR 0 1
31015: PPUSH
31016: LD_VAR 0 10
31020: PPUSH
31021: CALL_OW 115
31025: GO 31088
31027: LD_INT 2
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31057
31035: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31036: LD_VAR 0 1
31040: PPUSH
31041: LD_VAR 0 6
31045: PPUSH
31046: LD_VAR 0 7
31050: PPUSH
31051: CALL_OW 153
31055: GO 31088
31057: LD_INT 3
31059: DOUBLE
31060: EQUAL
31061: IFTRUE 31065
31063: GO 31087
31065: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31066: LD_VAR 0 1
31070: PPUSH
31071: LD_VAR 0 6
31075: PPUSH
31076: LD_VAR 0 7
31080: PPUSH
31081: CALL_OW 154
31085: GO 31088
31087: POP
// end ;
31088: LD_VAR 0 2
31092: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31093: LD_INT 0
31095: PPUSH
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
31100: PPUSH
// if not unit or not building then
31101: LD_VAR 0 1
31105: NOT
31106: PUSH
31107: LD_VAR 0 2
31111: NOT
31112: OR
31113: IFFALSE 31117
// exit ;
31115: GO 31275
// x := GetX ( building ) ;
31117: LD_ADDR_VAR 0 5
31121: PUSH
31122: LD_VAR 0 2
31126: PPUSH
31127: CALL_OW 250
31131: ST_TO_ADDR
// y := GetY ( building ) ;
31132: LD_ADDR_VAR 0 6
31136: PUSH
31137: LD_VAR 0 2
31141: PPUSH
31142: CALL_OW 251
31146: ST_TO_ADDR
// for i = 0 to 5 do
31147: LD_ADDR_VAR 0 4
31151: PUSH
31152: DOUBLE
31153: LD_INT 0
31155: DEC
31156: ST_TO_ADDR
31157: LD_INT 5
31159: PUSH
31160: FOR_TO
31161: IFFALSE 31273
// begin _x := ShiftX ( x , i , 3 ) ;
31163: LD_ADDR_VAR 0 7
31167: PUSH
31168: LD_VAR 0 5
31172: PPUSH
31173: LD_VAR 0 4
31177: PPUSH
31178: LD_INT 3
31180: PPUSH
31181: CALL_OW 272
31185: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31186: LD_ADDR_VAR 0 8
31190: PUSH
31191: LD_VAR 0 6
31195: PPUSH
31196: LD_VAR 0 4
31200: PPUSH
31201: LD_INT 3
31203: PPUSH
31204: CALL_OW 273
31208: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31209: LD_VAR 0 7
31213: PPUSH
31214: LD_VAR 0 8
31218: PPUSH
31219: CALL_OW 488
31223: NOT
31224: IFFALSE 31228
// continue ;
31226: GO 31160
// if HexInfo ( _x , _y ) = 0 then
31228: LD_VAR 0 7
31232: PPUSH
31233: LD_VAR 0 8
31237: PPUSH
31238: CALL_OW 428
31242: PUSH
31243: LD_INT 0
31245: EQUAL
31246: IFFALSE 31271
// begin ComMoveXY ( unit , _x , _y ) ;
31248: LD_VAR 0 1
31252: PPUSH
31253: LD_VAR 0 7
31257: PPUSH
31258: LD_VAR 0 8
31262: PPUSH
31263: CALL_OW 111
// exit ;
31267: POP
31268: POP
31269: GO 31275
// end ; end ;
31271: GO 31160
31273: POP
31274: POP
// end ;
31275: LD_VAR 0 3
31279: RET
// export function ScanBase ( side , base_area ) ; begin
31280: LD_INT 0
31282: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31283: LD_ADDR_VAR 0 3
31287: PUSH
31288: LD_VAR 0 2
31292: PPUSH
31293: LD_INT 81
31295: PUSH
31296: LD_VAR 0 1
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PPUSH
31305: CALL_OW 70
31309: ST_TO_ADDR
// end ;
31310: LD_VAR 0 3
31314: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31315: LD_INT 0
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
// result := false ;
31321: LD_ADDR_VAR 0 2
31325: PUSH
31326: LD_INT 0
31328: ST_TO_ADDR
// side := GetSide ( unit ) ;
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_VAR 0 1
31338: PPUSH
31339: CALL_OW 255
31343: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31344: LD_ADDR_VAR 0 4
31348: PUSH
31349: LD_VAR 0 1
31353: PPUSH
31354: CALL_OW 248
31358: ST_TO_ADDR
// case nat of 1 :
31359: LD_VAR 0 4
31363: PUSH
31364: LD_INT 1
31366: DOUBLE
31367: EQUAL
31368: IFTRUE 31372
31370: GO 31383
31372: POP
// tech := tech_lassight ; 2 :
31373: LD_ADDR_VAR 0 5
31377: PUSH
31378: LD_INT 12
31380: ST_TO_ADDR
31381: GO 31422
31383: LD_INT 2
31385: DOUBLE
31386: EQUAL
31387: IFTRUE 31391
31389: GO 31402
31391: POP
// tech := tech_mortar ; 3 :
31392: LD_ADDR_VAR 0 5
31396: PUSH
31397: LD_INT 41
31399: ST_TO_ADDR
31400: GO 31422
31402: LD_INT 3
31404: DOUBLE
31405: EQUAL
31406: IFTRUE 31410
31408: GO 31421
31410: POP
// tech := tech_bazooka ; end ;
31411: LD_ADDR_VAR 0 5
31415: PUSH
31416: LD_INT 44
31418: ST_TO_ADDR
31419: GO 31422
31421: POP
// if Researched ( side , tech ) then
31422: LD_VAR 0 3
31426: PPUSH
31427: LD_VAR 0 5
31431: PPUSH
31432: CALL_OW 325
31436: IFFALSE 31463
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31438: LD_ADDR_VAR 0 2
31442: PUSH
31443: LD_INT 5
31445: PUSH
31446: LD_INT 8
31448: PUSH
31449: LD_INT 9
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: PUSH
31457: LD_VAR 0 4
31461: ARRAY
31462: ST_TO_ADDR
// end ;
31463: LD_VAR 0 2
31467: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
31472: PPUSH
// if not mines then
31473: LD_VAR 0 2
31477: NOT
31478: IFFALSE 31482
// exit ;
31480: GO 31626
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31482: LD_ADDR_VAR 0 5
31486: PUSH
31487: LD_INT 81
31489: PUSH
31490: LD_VAR 0 1
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 3
31501: PUSH
31502: LD_INT 21
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PPUSH
31520: CALL_OW 69
31524: ST_TO_ADDR
// for i in mines do
31525: LD_ADDR_VAR 0 4
31529: PUSH
31530: LD_VAR 0 2
31534: PUSH
31535: FOR_IN
31536: IFFALSE 31624
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31538: LD_VAR 0 4
31542: PUSH
31543: LD_INT 1
31545: ARRAY
31546: PPUSH
31547: LD_VAR 0 4
31551: PUSH
31552: LD_INT 2
31554: ARRAY
31555: PPUSH
31556: CALL_OW 458
31560: NOT
31561: IFFALSE 31565
// continue ;
31563: GO 31535
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31565: LD_VAR 0 4
31569: PUSH
31570: LD_INT 1
31572: ARRAY
31573: PPUSH
31574: LD_VAR 0 4
31578: PUSH
31579: LD_INT 2
31581: ARRAY
31582: PPUSH
31583: CALL_OW 428
31587: PUSH
31588: LD_VAR 0 5
31592: IN
31593: IFFALSE 31622
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31595: LD_VAR 0 4
31599: PUSH
31600: LD_INT 1
31602: ARRAY
31603: PPUSH
31604: LD_VAR 0 4
31608: PUSH
31609: LD_INT 2
31611: ARRAY
31612: PPUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 456
// end ;
31622: GO 31535
31624: POP
31625: POP
// end ;
31626: LD_VAR 0 3
31630: RET
// export function Count ( array ) ; var i ; begin
31631: LD_INT 0
31633: PPUSH
31634: PPUSH
// result := 0 ;
31635: LD_ADDR_VAR 0 2
31639: PUSH
31640: LD_INT 0
31642: ST_TO_ADDR
// for i in array do
31643: LD_ADDR_VAR 0 3
31647: PUSH
31648: LD_VAR 0 1
31652: PUSH
31653: FOR_IN
31654: IFFALSE 31678
// if i then
31656: LD_VAR 0 3
31660: IFFALSE 31676
// result := result + 1 ;
31662: LD_ADDR_VAR 0 2
31666: PUSH
31667: LD_VAR 0 2
31671: PUSH
31672: LD_INT 1
31674: PLUS
31675: ST_TO_ADDR
31676: GO 31653
31678: POP
31679: POP
// end ;
31680: LD_VAR 0 2
31684: RET
// export function IsEmpty ( building ) ; begin
31685: LD_INT 0
31687: PPUSH
// if not building then
31688: LD_VAR 0 1
31692: NOT
31693: IFFALSE 31697
// exit ;
31695: GO 31740
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31697: LD_ADDR_VAR 0 2
31701: PUSH
31702: LD_VAR 0 1
31706: PUSH
31707: LD_INT 22
31709: PUSH
31710: LD_VAR 0 1
31714: PPUSH
31715: CALL_OW 255
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 58
31726: PUSH
31727: EMPTY
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PPUSH
31734: CALL_OW 69
31738: IN
31739: ST_TO_ADDR
// end ;
31740: LD_VAR 0 2
31744: RET
// export function IsNotFull ( building ) ; begin
31745: LD_INT 0
31747: PPUSH
// if not building then
31748: LD_VAR 0 1
31752: NOT
31753: IFFALSE 31757
// exit ;
31755: GO 31776
// result := UnitsInside ( building ) < 6 ;
31757: LD_ADDR_VAR 0 2
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 313
31771: PUSH
31772: LD_INT 6
31774: LESS
31775: ST_TO_ADDR
// end ;
31776: LD_VAR 0 2
31780: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31781: LD_INT 0
31783: PPUSH
31784: PPUSH
31785: PPUSH
31786: PPUSH
// tmp := [ ] ;
31787: LD_ADDR_VAR 0 3
31791: PUSH
31792: EMPTY
31793: ST_TO_ADDR
// list := [ ] ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: EMPTY
31800: ST_TO_ADDR
// for i = 16 to 25 do
31801: LD_ADDR_VAR 0 4
31805: PUSH
31806: DOUBLE
31807: LD_INT 16
31809: DEC
31810: ST_TO_ADDR
31811: LD_INT 25
31813: PUSH
31814: FOR_TO
31815: IFFALSE 31888
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_VAR 0 3
31826: PUSH
31827: LD_INT 22
31829: PUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: CALL_OW 255
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 91
31846: PUSH
31847: LD_VAR 0 1
31851: PUSH
31852: LD_INT 6
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 30
31862: PUSH
31863: LD_VAR 0 4
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: ADD
31885: ST_TO_ADDR
31886: GO 31814
31888: POP
31889: POP
// for i = 1 to tmp do
31890: LD_ADDR_VAR 0 4
31894: PUSH
31895: DOUBLE
31896: LD_INT 1
31898: DEC
31899: ST_TO_ADDR
31900: LD_VAR 0 3
31904: PUSH
31905: FOR_TO
31906: IFFALSE 31994
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31908: LD_ADDR_VAR 0 5
31912: PUSH
31913: LD_VAR 0 5
31917: PUSH
31918: LD_VAR 0 3
31922: PUSH
31923: LD_VAR 0 4
31927: ARRAY
31928: PPUSH
31929: CALL_OW 266
31933: PUSH
31934: LD_VAR 0 3
31938: PUSH
31939: LD_VAR 0 4
31943: ARRAY
31944: PPUSH
31945: CALL_OW 250
31949: PUSH
31950: LD_VAR 0 3
31954: PUSH
31955: LD_VAR 0 4
31959: ARRAY
31960: PPUSH
31961: CALL_OW 251
31965: PUSH
31966: LD_VAR 0 3
31970: PUSH
31971: LD_VAR 0 4
31975: ARRAY
31976: PPUSH
31977: CALL_OW 254
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: PUSH
31988: EMPTY
31989: LIST
31990: ADD
31991: ST_TO_ADDR
31992: GO 31905
31994: POP
31995: POP
// result := list ;
31996: LD_ADDR_VAR 0 2
32000: PUSH
32001: LD_VAR 0 5
32005: ST_TO_ADDR
// end ;
32006: LD_VAR 0 2
32010: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32011: LD_INT 0
32013: PPUSH
32014: PPUSH
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
32019: PPUSH
// if not factory then
32020: LD_VAR 0 1
32024: NOT
32025: IFFALSE 32029
// exit ;
32027: GO 32622
// if control = control_apeman then
32029: LD_VAR 0 4
32033: PUSH
32034: LD_INT 5
32036: EQUAL
32037: IFFALSE 32146
// begin tmp := UnitsInside ( factory ) ;
32039: LD_ADDR_VAR 0 8
32043: PUSH
32044: LD_VAR 0 1
32048: PPUSH
32049: CALL_OW 313
32053: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32054: LD_VAR 0 8
32058: PPUSH
32059: LD_INT 25
32061: PUSH
32062: LD_INT 12
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PPUSH
32069: CALL_OW 72
32073: NOT
32074: IFFALSE 32084
// control := control_manual ;
32076: LD_ADDR_VAR 0 4
32080: PUSH
32081: LD_INT 1
32083: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32084: LD_ADDR_VAR 0 8
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: CALL 31781 0 1
32098: ST_TO_ADDR
// if tmp then
32099: LD_VAR 0 8
32103: IFFALSE 32146
// begin for i in tmp do
32105: LD_ADDR_VAR 0 7
32109: PUSH
32110: LD_VAR 0 8
32114: PUSH
32115: FOR_IN
32116: IFFALSE 32144
// if i [ 1 ] = b_ext_radio then
32118: LD_VAR 0 7
32122: PUSH
32123: LD_INT 1
32125: ARRAY
32126: PUSH
32127: LD_INT 22
32129: EQUAL
32130: IFFALSE 32142
// begin control := control_remote ;
32132: LD_ADDR_VAR 0 4
32136: PUSH
32137: LD_INT 2
32139: ST_TO_ADDR
// break ;
32140: GO 32144
// end ;
32142: GO 32115
32144: POP
32145: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32146: LD_VAR 0 1
32150: PPUSH
32151: LD_VAR 0 2
32155: PPUSH
32156: LD_VAR 0 3
32160: PPUSH
32161: LD_VAR 0 4
32165: PPUSH
32166: LD_VAR 0 5
32170: PPUSH
32171: CALL_OW 448
32175: IFFALSE 32210
// begin result := [ chassis , engine , control , weapon ] ;
32177: LD_ADDR_VAR 0 6
32181: PUSH
32182: LD_VAR 0 2
32186: PUSH
32187: LD_VAR 0 3
32191: PUSH
32192: LD_VAR 0 4
32196: PUSH
32197: LD_VAR 0 5
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: ST_TO_ADDR
// exit ;
32208: GO 32622
// end ; _chassis := AvailableChassisList ( factory ) ;
32210: LD_ADDR_VAR 0 9
32214: PUSH
32215: LD_VAR 0 1
32219: PPUSH
32220: CALL_OW 475
32224: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32225: LD_ADDR_VAR 0 11
32229: PUSH
32230: LD_VAR 0 1
32234: PPUSH
32235: CALL_OW 476
32239: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32240: LD_ADDR_VAR 0 12
32244: PUSH
32245: LD_VAR 0 1
32249: PPUSH
32250: CALL_OW 477
32254: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32255: LD_ADDR_VAR 0 10
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: CALL_OW 478
32269: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32270: LD_VAR 0 9
32274: NOT
32275: PUSH
32276: LD_VAR 0 11
32280: NOT
32281: OR
32282: PUSH
32283: LD_VAR 0 12
32287: NOT
32288: OR
32289: PUSH
32290: LD_VAR 0 10
32294: NOT
32295: OR
32296: IFFALSE 32331
// begin result := [ chassis , engine , control , weapon ] ;
32298: LD_ADDR_VAR 0 6
32302: PUSH
32303: LD_VAR 0 2
32307: PUSH
32308: LD_VAR 0 3
32312: PUSH
32313: LD_VAR 0 4
32317: PUSH
32318: LD_VAR 0 5
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: ST_TO_ADDR
// exit ;
32329: GO 32622
// end ; if not chassis in _chassis then
32331: LD_VAR 0 2
32335: PUSH
32336: LD_VAR 0 9
32340: IN
32341: NOT
32342: IFFALSE 32368
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32344: LD_ADDR_VAR 0 2
32348: PUSH
32349: LD_VAR 0 9
32353: PUSH
32354: LD_INT 1
32356: PPUSH
32357: LD_VAR 0 9
32361: PPUSH
32362: CALL_OW 12
32366: ARRAY
32367: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32368: LD_VAR 0 2
32372: PPUSH
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL 32627 0 2
32382: NOT
32383: IFFALSE 32442
// repeat engine := _engine [ 1 ] ;
32385: LD_ADDR_VAR 0 3
32389: PUSH
32390: LD_VAR 0 11
32394: PUSH
32395: LD_INT 1
32397: ARRAY
32398: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32399: LD_ADDR_VAR 0 11
32403: PUSH
32404: LD_VAR 0 11
32408: PPUSH
32409: LD_INT 1
32411: PPUSH
32412: CALL_OW 3
32416: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32417: LD_VAR 0 2
32421: PPUSH
32422: LD_VAR 0 3
32426: PPUSH
32427: CALL 32627 0 2
32431: PUSH
32432: LD_VAR 0 11
32436: PUSH
32437: EMPTY
32438: EQUAL
32439: OR
32440: IFFALSE 32385
// if not control in _control then
32442: LD_VAR 0 4
32446: PUSH
32447: LD_VAR 0 12
32451: IN
32452: NOT
32453: IFFALSE 32479
// control := _control [ rand ( 1 , _control ) ] ;
32455: LD_ADDR_VAR 0 4
32459: PUSH
32460: LD_VAR 0 12
32464: PUSH
32465: LD_INT 1
32467: PPUSH
32468: LD_VAR 0 12
32472: PPUSH
32473: CALL_OW 12
32477: ARRAY
32478: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32479: LD_VAR 0 2
32483: PPUSH
32484: LD_VAR 0 5
32488: PPUSH
32489: CALL 32847 0 2
32493: NOT
32494: IFFALSE 32553
// repeat weapon := _weapon [ 1 ] ;
32496: LD_ADDR_VAR 0 5
32500: PUSH
32501: LD_VAR 0 10
32505: PUSH
32506: LD_INT 1
32508: ARRAY
32509: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32510: LD_ADDR_VAR 0 10
32514: PUSH
32515: LD_VAR 0 10
32519: PPUSH
32520: LD_INT 1
32522: PPUSH
32523: CALL_OW 3
32527: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32528: LD_VAR 0 2
32532: PPUSH
32533: LD_VAR 0 5
32537: PPUSH
32538: CALL 32847 0 2
32542: PUSH
32543: LD_VAR 0 10
32547: PUSH
32548: EMPTY
32549: EQUAL
32550: OR
32551: IFFALSE 32496
// result := [ ] ;
32553: LD_ADDR_VAR 0 6
32557: PUSH
32558: EMPTY
32559: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32560: LD_VAR 0 1
32564: PPUSH
32565: LD_VAR 0 2
32569: PPUSH
32570: LD_VAR 0 3
32574: PPUSH
32575: LD_VAR 0 4
32579: PPUSH
32580: LD_VAR 0 5
32584: PPUSH
32585: CALL_OW 448
32589: IFFALSE 32622
// result := [ chassis , engine , control , weapon ] ;
32591: LD_ADDR_VAR 0 6
32595: PUSH
32596: LD_VAR 0 2
32600: PUSH
32601: LD_VAR 0 3
32605: PUSH
32606: LD_VAR 0 4
32610: PUSH
32611: LD_VAR 0 5
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// end ;
32622: LD_VAR 0 6
32626: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32627: LD_INT 0
32629: PPUSH
// if not chassis or not engine then
32630: LD_VAR 0 1
32634: NOT
32635: PUSH
32636: LD_VAR 0 2
32640: NOT
32641: OR
32642: IFFALSE 32646
// exit ;
32644: GO 32842
// case engine of engine_solar :
32646: LD_VAR 0 2
32650: PUSH
32651: LD_INT 2
32653: DOUBLE
32654: EQUAL
32655: IFTRUE 32659
32657: GO 32697
32659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32660: LD_ADDR_VAR 0 3
32664: PUSH
32665: LD_INT 11
32667: PUSH
32668: LD_INT 12
32670: PUSH
32671: LD_INT 13
32673: PUSH
32674: LD_INT 14
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 3
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: ST_TO_ADDR
32695: GO 32826
32697: LD_INT 1
32699: DOUBLE
32700: EQUAL
32701: IFTRUE 32705
32703: GO 32767
32705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32706: LD_ADDR_VAR 0 3
32710: PUSH
32711: LD_INT 11
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: LD_INT 13
32719: PUSH
32720: LD_INT 14
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: LD_INT 3
32731: PUSH
32732: LD_INT 4
32734: PUSH
32735: LD_INT 5
32737: PUSH
32738: LD_INT 21
32740: PUSH
32741: LD_INT 23
32743: PUSH
32744: LD_INT 22
32746: PUSH
32747: LD_INT 24
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: ST_TO_ADDR
32765: GO 32826
32767: LD_INT 3
32769: DOUBLE
32770: EQUAL
32771: IFTRUE 32775
32773: GO 32825
32775: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32776: LD_ADDR_VAR 0 3
32780: PUSH
32781: LD_INT 13
32783: PUSH
32784: LD_INT 14
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: LD_INT 21
32801: PUSH
32802: LD_INT 22
32804: PUSH
32805: LD_INT 23
32807: PUSH
32808: LD_INT 24
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: ST_TO_ADDR
32823: GO 32826
32825: POP
// result := ( chassis in result ) ;
32826: LD_ADDR_VAR 0 3
32830: PUSH
32831: LD_VAR 0 1
32835: PUSH
32836: LD_VAR 0 3
32840: IN
32841: ST_TO_ADDR
// end ;
32842: LD_VAR 0 3
32846: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32847: LD_INT 0
32849: PPUSH
// if not chassis or not weapon then
32850: LD_VAR 0 1
32854: NOT
32855: PUSH
32856: LD_VAR 0 2
32860: NOT
32861: OR
32862: IFFALSE 32866
// exit ;
32864: GO 33892
// case weapon of us_machine_gun :
32866: LD_VAR 0 2
32870: PUSH
32871: LD_INT 2
32873: DOUBLE
32874: EQUAL
32875: IFTRUE 32879
32877: GO 32909
32879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32880: LD_ADDR_VAR 0 3
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: LD_INT 4
32896: PUSH
32897: LD_INT 5
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
32907: GO 33876
32909: LD_INT 3
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32947
32917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32918: LD_ADDR_VAR 0 3
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: LD_INT 5
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: ST_TO_ADDR
32945: GO 33876
32947: LD_INT 11
32949: DOUBLE
32950: EQUAL
32951: IFTRUE 32955
32953: GO 32985
32955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32956: LD_ADDR_VAR 0 3
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 3
32969: PUSH
32970: LD_INT 4
32972: PUSH
32973: LD_INT 5
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: ST_TO_ADDR
32983: GO 33876
32985: LD_INT 4
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33019
32993: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32994: LD_ADDR_VAR 0 3
32998: PUSH
32999: LD_INT 2
33001: PUSH
33002: LD_INT 3
33004: PUSH
33005: LD_INT 4
33007: PUSH
33008: LD_INT 5
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: ST_TO_ADDR
33017: GO 33876
33019: LD_INT 5
33021: DOUBLE
33022: EQUAL
33023: IFTRUE 33027
33025: GO 33053
33027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33028: LD_ADDR_VAR 0 3
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: LD_INT 4
33041: PUSH
33042: LD_INT 5
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: ST_TO_ADDR
33051: GO 33876
33053: LD_INT 9
33055: DOUBLE
33056: EQUAL
33057: IFTRUE 33061
33059: GO 33087
33061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33062: LD_ADDR_VAR 0 3
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: LD_INT 4
33075: PUSH
33076: LD_INT 5
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: ST_TO_ADDR
33085: GO 33876
33087: LD_INT 7
33089: DOUBLE
33090: EQUAL
33091: IFTRUE 33095
33093: GO 33121
33095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33096: LD_ADDR_VAR 0 3
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: LD_INT 4
33109: PUSH
33110: LD_INT 5
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: ST_TO_ADDR
33119: GO 33876
33121: LD_INT 12
33123: DOUBLE
33124: EQUAL
33125: IFTRUE 33129
33127: GO 33155
33129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: LD_INT 2
33137: PUSH
33138: LD_INT 3
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: ST_TO_ADDR
33153: GO 33876
33155: LD_INT 13
33157: DOUBLE
33158: EQUAL
33159: IFTRUE 33163
33161: GO 33189
33163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33164: LD_ADDR_VAR 0 3
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: LD_INT 4
33177: PUSH
33178: LD_INT 5
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: ST_TO_ADDR
33187: GO 33876
33189: LD_INT 14
33191: DOUBLE
33192: EQUAL
33193: IFTRUE 33197
33195: GO 33215
33197: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 4
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 33876
33215: LD_INT 6
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33241
33223: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 4
33231: PUSH
33232: LD_INT 5
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: ST_TO_ADDR
33239: GO 33876
33241: LD_INT 10
33243: DOUBLE
33244: EQUAL
33245: IFTRUE 33249
33247: GO 33267
33249: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33250: LD_ADDR_VAR 0 3
33254: PUSH
33255: LD_INT 4
33257: PUSH
33258: LD_INT 5
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: ST_TO_ADDR
33265: GO 33876
33267: LD_INT 22
33269: DOUBLE
33270: EQUAL
33271: IFTRUE 33275
33273: GO 33301
33275: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33276: LD_ADDR_VAR 0 3
33280: PUSH
33281: LD_INT 11
33283: PUSH
33284: LD_INT 12
33286: PUSH
33287: LD_INT 13
33289: PUSH
33290: LD_INT 14
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: ST_TO_ADDR
33299: GO 33876
33301: LD_INT 23
33303: DOUBLE
33304: EQUAL
33305: IFTRUE 33309
33307: GO 33335
33309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: LD_INT 11
33317: PUSH
33318: LD_INT 12
33320: PUSH
33321: LD_INT 13
33323: PUSH
33324: LD_INT 14
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: ST_TO_ADDR
33333: GO 33876
33335: LD_INT 24
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33369
33343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33344: LD_ADDR_VAR 0 3
33348: PUSH
33349: LD_INT 11
33351: PUSH
33352: LD_INT 12
33354: PUSH
33355: LD_INT 13
33357: PUSH
33358: LD_INT 14
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: ST_TO_ADDR
33367: GO 33876
33369: LD_INT 30
33371: DOUBLE
33372: EQUAL
33373: IFTRUE 33377
33375: GO 33403
33377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_INT 11
33385: PUSH
33386: LD_INT 12
33388: PUSH
33389: LD_INT 13
33391: PUSH
33392: LD_INT 14
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
33401: GO 33876
33403: LD_INT 25
33405: DOUBLE
33406: EQUAL
33407: IFTRUE 33411
33409: GO 33429
33411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33412: LD_ADDR_VAR 0 3
33416: PUSH
33417: LD_INT 13
33419: PUSH
33420: LD_INT 14
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: ST_TO_ADDR
33427: GO 33876
33429: LD_INT 27
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33455
33437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 13
33445: PUSH
33446: LD_INT 14
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33876
33455: LD_INT 28
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33481
33463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 13
33471: PUSH
33472: LD_INT 14
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: ST_TO_ADDR
33479: GO 33876
33481: LD_INT 29
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33507
33489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_INT 13
33497: PUSH
33498: LD_INT 14
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: ST_TO_ADDR
33505: GO 33876
33507: LD_INT 31
33509: DOUBLE
33510: EQUAL
33511: IFTRUE 33515
33513: GO 33533
33515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33516: LD_ADDR_VAR 0 3
33520: PUSH
33521: LD_INT 13
33523: PUSH
33524: LD_INT 14
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: ST_TO_ADDR
33531: GO 33876
33533: LD_INT 26
33535: DOUBLE
33536: EQUAL
33537: IFTRUE 33541
33539: GO 33559
33541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33542: LD_ADDR_VAR 0 3
33546: PUSH
33547: LD_INT 13
33549: PUSH
33550: LD_INT 14
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: ST_TO_ADDR
33557: GO 33876
33559: LD_INT 42
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33593
33567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 21
33575: PUSH
33576: LD_INT 22
33578: PUSH
33579: LD_INT 23
33581: PUSH
33582: LD_INT 24
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: ST_TO_ADDR
33591: GO 33876
33593: LD_INT 43
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33627
33601: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33602: LD_ADDR_VAR 0 3
33606: PUSH
33607: LD_INT 21
33609: PUSH
33610: LD_INT 22
33612: PUSH
33613: LD_INT 23
33615: PUSH
33616: LD_INT 24
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: ST_TO_ADDR
33625: GO 33876
33627: LD_INT 44
33629: DOUBLE
33630: EQUAL
33631: IFTRUE 33635
33633: GO 33661
33635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33636: LD_ADDR_VAR 0 3
33640: PUSH
33641: LD_INT 21
33643: PUSH
33644: LD_INT 22
33646: PUSH
33647: LD_INT 23
33649: PUSH
33650: LD_INT 24
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
33659: GO 33876
33661: LD_INT 45
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33695
33669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_INT 21
33677: PUSH
33678: LD_INT 22
33680: PUSH
33681: LD_INT 23
33683: PUSH
33684: LD_INT 24
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: ST_TO_ADDR
33693: GO 33876
33695: LD_INT 49
33697: DOUBLE
33698: EQUAL
33699: IFTRUE 33703
33701: GO 33729
33703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33704: LD_ADDR_VAR 0 3
33708: PUSH
33709: LD_INT 21
33711: PUSH
33712: LD_INT 22
33714: PUSH
33715: LD_INT 23
33717: PUSH
33718: LD_INT 24
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: ST_TO_ADDR
33727: GO 33876
33729: LD_INT 51
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33737
33735: GO 33763
33737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: LD_INT 21
33745: PUSH
33746: LD_INT 22
33748: PUSH
33749: LD_INT 23
33751: PUSH
33752: LD_INT 24
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: ST_TO_ADDR
33761: GO 33876
33763: LD_INT 52
33765: DOUBLE
33766: EQUAL
33767: IFTRUE 33771
33769: GO 33797
33771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33772: LD_ADDR_VAR 0 3
33776: PUSH
33777: LD_INT 21
33779: PUSH
33780: LD_INT 22
33782: PUSH
33783: LD_INT 23
33785: PUSH
33786: LD_INT 24
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
33795: GO 33876
33797: LD_INT 53
33799: DOUBLE
33800: EQUAL
33801: IFTRUE 33805
33803: GO 33823
33805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33806: LD_ADDR_VAR 0 3
33810: PUSH
33811: LD_INT 23
33813: PUSH
33814: LD_INT 24
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: ST_TO_ADDR
33821: GO 33876
33823: LD_INT 46
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33849
33831: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_INT 23
33839: PUSH
33840: LD_INT 24
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: ST_TO_ADDR
33847: GO 33876
33849: LD_INT 47
33851: DOUBLE
33852: EQUAL
33853: IFTRUE 33857
33855: GO 33875
33857: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33858: LD_ADDR_VAR 0 3
33862: PUSH
33863: LD_INT 23
33865: PUSH
33866: LD_INT 24
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: ST_TO_ADDR
33873: GO 33876
33875: POP
// result := ( chassis in result ) ;
33876: LD_ADDR_VAR 0 3
33880: PUSH
33881: LD_VAR 0 1
33885: PUSH
33886: LD_VAR 0 3
33890: IN
33891: ST_TO_ADDR
// end ;
33892: LD_VAR 0 3
33896: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
// result := array ;
33906: LD_ADDR_VAR 0 5
33910: PUSH
33911: LD_VAR 0 1
33915: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33916: LD_VAR 0 1
33920: NOT
33921: PUSH
33922: LD_VAR 0 2
33926: NOT
33927: OR
33928: PUSH
33929: LD_VAR 0 3
33933: NOT
33934: OR
33935: PUSH
33936: LD_VAR 0 2
33940: PUSH
33941: LD_VAR 0 1
33945: GREATER
33946: OR
33947: PUSH
33948: LD_VAR 0 3
33952: PUSH
33953: LD_VAR 0 1
33957: GREATER
33958: OR
33959: IFFALSE 33963
// exit ;
33961: GO 34259
// if direction then
33963: LD_VAR 0 4
33967: IFFALSE 34031
// begin d := 1 ;
33969: LD_ADDR_VAR 0 9
33973: PUSH
33974: LD_INT 1
33976: ST_TO_ADDR
// if i_from > i_to then
33977: LD_VAR 0 2
33981: PUSH
33982: LD_VAR 0 3
33986: GREATER
33987: IFFALSE 34013
// length := ( array - i_from ) + i_to else
33989: LD_ADDR_VAR 0 11
33993: PUSH
33994: LD_VAR 0 1
33998: PUSH
33999: LD_VAR 0 2
34003: MINUS
34004: PUSH
34005: LD_VAR 0 3
34009: PLUS
34010: ST_TO_ADDR
34011: GO 34029
// length := i_to - i_from ;
34013: LD_ADDR_VAR 0 11
34017: PUSH
34018: LD_VAR 0 3
34022: PUSH
34023: LD_VAR 0 2
34027: MINUS
34028: ST_TO_ADDR
// end else
34029: GO 34092
// begin d := - 1 ;
34031: LD_ADDR_VAR 0 9
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: ST_TO_ADDR
// if i_from > i_to then
34040: LD_VAR 0 2
34044: PUSH
34045: LD_VAR 0 3
34049: GREATER
34050: IFFALSE 34070
// length := i_from - i_to else
34052: LD_ADDR_VAR 0 11
34056: PUSH
34057: LD_VAR 0 2
34061: PUSH
34062: LD_VAR 0 3
34066: MINUS
34067: ST_TO_ADDR
34068: GO 34092
// length := ( array - i_to ) + i_from ;
34070: LD_ADDR_VAR 0 11
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: LD_VAR 0 3
34084: MINUS
34085: PUSH
34086: LD_VAR 0 2
34090: PLUS
34091: ST_TO_ADDR
// end ; if not length then
34092: LD_VAR 0 11
34096: NOT
34097: IFFALSE 34101
// exit ;
34099: GO 34259
// tmp := array ;
34101: LD_ADDR_VAR 0 10
34105: PUSH
34106: LD_VAR 0 1
34110: ST_TO_ADDR
// for i = 1 to length do
34111: LD_ADDR_VAR 0 6
34115: PUSH
34116: DOUBLE
34117: LD_INT 1
34119: DEC
34120: ST_TO_ADDR
34121: LD_VAR 0 11
34125: PUSH
34126: FOR_TO
34127: IFFALSE 34247
// begin for j = 1 to array do
34129: LD_ADDR_VAR 0 7
34133: PUSH
34134: DOUBLE
34135: LD_INT 1
34137: DEC
34138: ST_TO_ADDR
34139: LD_VAR 0 1
34143: PUSH
34144: FOR_TO
34145: IFFALSE 34233
// begin k := j + d ;
34147: LD_ADDR_VAR 0 8
34151: PUSH
34152: LD_VAR 0 7
34156: PUSH
34157: LD_VAR 0 9
34161: PLUS
34162: ST_TO_ADDR
// if k > array then
34163: LD_VAR 0 8
34167: PUSH
34168: LD_VAR 0 1
34172: GREATER
34173: IFFALSE 34183
// k := 1 ;
34175: LD_ADDR_VAR 0 8
34179: PUSH
34180: LD_INT 1
34182: ST_TO_ADDR
// if not k then
34183: LD_VAR 0 8
34187: NOT
34188: IFFALSE 34200
// k := array ;
34190: LD_ADDR_VAR 0 8
34194: PUSH
34195: LD_VAR 0 1
34199: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34200: LD_ADDR_VAR 0 10
34204: PUSH
34205: LD_VAR 0 10
34209: PPUSH
34210: LD_VAR 0 8
34214: PPUSH
34215: LD_VAR 0 1
34219: PUSH
34220: LD_VAR 0 7
34224: ARRAY
34225: PPUSH
34226: CALL_OW 1
34230: ST_TO_ADDR
// end ;
34231: GO 34144
34233: POP
34234: POP
// array := tmp ;
34235: LD_ADDR_VAR 0 1
34239: PUSH
34240: LD_VAR 0 10
34244: ST_TO_ADDR
// end ;
34245: GO 34126
34247: POP
34248: POP
// result := array ;
34249: LD_ADDR_VAR 0 5
34253: PUSH
34254: LD_VAR 0 1
34258: ST_TO_ADDR
// end ;
34259: LD_VAR 0 5
34263: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34264: LD_INT 0
34266: PPUSH
34267: PPUSH
// result := 0 ;
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_INT 0
34275: ST_TO_ADDR
// if not array or not value in array then
34276: LD_VAR 0 1
34280: NOT
34281: PUSH
34282: LD_VAR 0 2
34286: PUSH
34287: LD_VAR 0 1
34291: IN
34292: NOT
34293: OR
34294: IFFALSE 34298
// exit ;
34296: GO 34352
// for i = 1 to array do
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: DOUBLE
34304: LD_INT 1
34306: DEC
34307: ST_TO_ADDR
34308: LD_VAR 0 1
34312: PUSH
34313: FOR_TO
34314: IFFALSE 34350
// if value = array [ i ] then
34316: LD_VAR 0 2
34320: PUSH
34321: LD_VAR 0 1
34325: PUSH
34326: LD_VAR 0 4
34330: ARRAY
34331: EQUAL
34332: IFFALSE 34348
// begin result := i ;
34334: LD_ADDR_VAR 0 3
34338: PUSH
34339: LD_VAR 0 4
34343: ST_TO_ADDR
// exit ;
34344: POP
34345: POP
34346: GO 34352
// end ;
34348: GO 34313
34350: POP
34351: POP
// end ;
34352: LD_VAR 0 3
34356: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34357: LD_INT 0
34359: PPUSH
// vc_chassis := chassis ;
34360: LD_ADDR_OWVAR 37
34364: PUSH
34365: LD_VAR 0 1
34369: ST_TO_ADDR
// vc_engine := engine ;
34370: LD_ADDR_OWVAR 39
34374: PUSH
34375: LD_VAR 0 2
34379: ST_TO_ADDR
// vc_control := control ;
34380: LD_ADDR_OWVAR 38
34384: PUSH
34385: LD_VAR 0 3
34389: ST_TO_ADDR
// vc_weapon := weapon ;
34390: LD_ADDR_OWVAR 40
34394: PUSH
34395: LD_VAR 0 4
34399: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34400: LD_ADDR_OWVAR 41
34404: PUSH
34405: LD_VAR 0 5
34409: ST_TO_ADDR
// end ;
34410: LD_VAR 0 6
34414: RET
// export function WantPlant ( unit ) ; var task ; begin
34415: LD_INT 0
34417: PPUSH
34418: PPUSH
// result := false ;
34419: LD_ADDR_VAR 0 2
34423: PUSH
34424: LD_INT 0
34426: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_VAR 0 1
34436: PPUSH
34437: CALL_OW 437
34441: ST_TO_ADDR
// if task then
34442: LD_VAR 0 3
34446: IFFALSE 34474
// if task [ 1 ] [ 1 ] = p then
34448: LD_VAR 0 3
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PUSH
34457: LD_INT 1
34459: ARRAY
34460: PUSH
34461: LD_STRING p
34463: EQUAL
34464: IFFALSE 34474
// result := true ;
34466: LD_ADDR_VAR 0 2
34470: PUSH
34471: LD_INT 1
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 2
34478: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34479: LD_INT 0
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
// if pos < 1 then
34485: LD_VAR 0 2
34489: PUSH
34490: LD_INT 1
34492: LESS
34493: IFFALSE 34497
// exit ;
34495: GO 34800
// if pos = 1 then
34497: LD_VAR 0 2
34501: PUSH
34502: LD_INT 1
34504: EQUAL
34505: IFFALSE 34538
// result := Replace ( arr , pos [ 1 ] , value ) else
34507: LD_ADDR_VAR 0 4
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: LD_VAR 0 2
34521: PUSH
34522: LD_INT 1
34524: ARRAY
34525: PPUSH
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
34536: GO 34800
// begin tmp := arr ;
34538: LD_ADDR_VAR 0 6
34542: PUSH
34543: LD_VAR 0 1
34547: ST_TO_ADDR
// s_arr := [ tmp ] ;
34548: LD_ADDR_VAR 0 7
34552: PUSH
34553: LD_VAR 0 6
34557: PUSH
34558: EMPTY
34559: LIST
34560: ST_TO_ADDR
// for i = 1 to pos - 1 do
34561: LD_ADDR_VAR 0 5
34565: PUSH
34566: DOUBLE
34567: LD_INT 1
34569: DEC
34570: ST_TO_ADDR
34571: LD_VAR 0 2
34575: PUSH
34576: LD_INT 1
34578: MINUS
34579: PUSH
34580: FOR_TO
34581: IFFALSE 34626
// begin tmp := tmp [ pos [ i ] ] ;
34583: LD_ADDR_VAR 0 6
34587: PUSH
34588: LD_VAR 0 6
34592: PUSH
34593: LD_VAR 0 2
34597: PUSH
34598: LD_VAR 0 5
34602: ARRAY
34603: ARRAY
34604: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34605: LD_ADDR_VAR 0 7
34609: PUSH
34610: LD_VAR 0 7
34614: PUSH
34615: LD_VAR 0 6
34619: PUSH
34620: EMPTY
34621: LIST
34622: ADD
34623: ST_TO_ADDR
// end ;
34624: GO 34580
34626: POP
34627: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34628: LD_ADDR_VAR 0 6
34632: PUSH
34633: LD_VAR 0 6
34637: PPUSH
34638: LD_VAR 0 2
34642: PUSH
34643: LD_VAR 0 2
34647: ARRAY
34648: PPUSH
34649: LD_VAR 0 3
34653: PPUSH
34654: CALL_OW 1
34658: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34659: LD_ADDR_VAR 0 7
34663: PUSH
34664: LD_VAR 0 7
34668: PPUSH
34669: LD_VAR 0 7
34673: PPUSH
34674: LD_VAR 0 6
34678: PPUSH
34679: CALL_OW 1
34683: ST_TO_ADDR
// for i = s_arr downto 2 do
34684: LD_ADDR_VAR 0 5
34688: PUSH
34689: DOUBLE
34690: LD_VAR 0 7
34694: INC
34695: ST_TO_ADDR
34696: LD_INT 2
34698: PUSH
34699: FOR_DOWNTO
34700: IFFALSE 34784
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34702: LD_ADDR_VAR 0 6
34706: PUSH
34707: LD_VAR 0 7
34711: PUSH
34712: LD_VAR 0 5
34716: PUSH
34717: LD_INT 1
34719: MINUS
34720: ARRAY
34721: PPUSH
34722: LD_VAR 0 2
34726: PUSH
34727: LD_VAR 0 5
34731: PUSH
34732: LD_INT 1
34734: MINUS
34735: ARRAY
34736: PPUSH
34737: LD_VAR 0 7
34741: PUSH
34742: LD_VAR 0 5
34746: ARRAY
34747: PPUSH
34748: CALL_OW 1
34752: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34753: LD_ADDR_VAR 0 7
34757: PUSH
34758: LD_VAR 0 7
34762: PPUSH
34763: LD_VAR 0 5
34767: PUSH
34768: LD_INT 1
34770: MINUS
34771: PPUSH
34772: LD_VAR 0 6
34776: PPUSH
34777: CALL_OW 1
34781: ST_TO_ADDR
// end ;
34782: GO 34699
34784: POP
34785: POP
// result := s_arr [ 1 ] ;
34786: LD_ADDR_VAR 0 4
34790: PUSH
34791: LD_VAR 0 7
34795: PUSH
34796: LD_INT 1
34798: ARRAY
34799: ST_TO_ADDR
// end ; end ;
34800: LD_VAR 0 4
34804: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34805: LD_INT 0
34807: PPUSH
34808: PPUSH
// if not list then
34809: LD_VAR 0 1
34813: NOT
34814: IFFALSE 34818
// exit ;
34816: GO 34909
// i := list [ pos1 ] ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_VAR 0 1
34827: PUSH
34828: LD_VAR 0 2
34832: ARRAY
34833: ST_TO_ADDR
// if not i then
34834: LD_VAR 0 5
34838: NOT
34839: IFFALSE 34843
// exit ;
34841: GO 34909
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34843: LD_ADDR_VAR 0 1
34847: PUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_VAR 0 2
34857: PPUSH
34858: LD_VAR 0 1
34862: PUSH
34863: LD_VAR 0 3
34867: ARRAY
34868: PPUSH
34869: CALL_OW 1
34873: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34874: LD_ADDR_VAR 0 1
34878: PUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: LD_VAR 0 3
34888: PPUSH
34889: LD_VAR 0 5
34893: PPUSH
34894: CALL_OW 1
34898: ST_TO_ADDR
// result := list ;
34899: LD_ADDR_VAR 0 4
34903: PUSH
34904: LD_VAR 0 1
34908: ST_TO_ADDR
// end ;
34909: LD_VAR 0 4
34913: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34914: LD_INT 0
34916: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34917: LD_ADDR_VAR 0 5
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 250
34931: PPUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 251
34941: PPUSH
34942: LD_VAR 0 2
34946: PPUSH
34947: LD_VAR 0 3
34951: PPUSH
34952: LD_VAR 0 4
34956: PPUSH
34957: CALL 34967 0 5
34961: ST_TO_ADDR
// end ;
34962: LD_VAR 0 5
34966: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34967: LD_INT 0
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
// if not list then
34973: LD_VAR 0 3
34977: NOT
34978: IFFALSE 34982
// exit ;
34980: GO 35370
// result := [ ] ;
34982: LD_ADDR_VAR 0 6
34986: PUSH
34987: EMPTY
34988: ST_TO_ADDR
// for i in list do
34989: LD_ADDR_VAR 0 7
34993: PUSH
34994: LD_VAR 0 3
34998: PUSH
34999: FOR_IN
35000: IFFALSE 35202
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: LD_VAR 0 7
35011: PPUSH
35012: LD_VAR 0 1
35016: PPUSH
35017: LD_VAR 0 2
35021: PPUSH
35022: CALL_OW 297
35026: ST_TO_ADDR
// if not result then
35027: LD_VAR 0 6
35031: NOT
35032: IFFALSE 35058
// result := [ [ i , tmp ] ] else
35034: LD_ADDR_VAR 0 6
35038: PUSH
35039: LD_VAR 0 7
35043: PUSH
35044: LD_VAR 0 9
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: ST_TO_ADDR
35056: GO 35200
// begin if result [ result ] [ 2 ] < tmp then
35058: LD_VAR 0 6
35062: PUSH
35063: LD_VAR 0 6
35067: ARRAY
35068: PUSH
35069: LD_INT 2
35071: ARRAY
35072: PUSH
35073: LD_VAR 0 9
35077: LESS
35078: IFFALSE 35120
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35080: LD_ADDR_VAR 0 6
35084: PUSH
35085: LD_VAR 0 6
35089: PPUSH
35090: LD_VAR 0 6
35094: PUSH
35095: LD_INT 1
35097: PLUS
35098: PPUSH
35099: LD_VAR 0 7
35103: PUSH
35104: LD_VAR 0 9
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PPUSH
35113: CALL_OW 2
35117: ST_TO_ADDR
35118: GO 35200
// for j = 1 to result do
35120: LD_ADDR_VAR 0 8
35124: PUSH
35125: DOUBLE
35126: LD_INT 1
35128: DEC
35129: ST_TO_ADDR
35130: LD_VAR 0 6
35134: PUSH
35135: FOR_TO
35136: IFFALSE 35198
// begin if tmp < result [ j ] [ 2 ] then
35138: LD_VAR 0 9
35142: PUSH
35143: LD_VAR 0 6
35147: PUSH
35148: LD_VAR 0 8
35152: ARRAY
35153: PUSH
35154: LD_INT 2
35156: ARRAY
35157: LESS
35158: IFFALSE 35196
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35160: LD_ADDR_VAR 0 6
35164: PUSH
35165: LD_VAR 0 6
35169: PPUSH
35170: LD_VAR 0 8
35174: PPUSH
35175: LD_VAR 0 7
35179: PUSH
35180: LD_VAR 0 9
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PPUSH
35189: CALL_OW 2
35193: ST_TO_ADDR
// break ;
35194: GO 35198
// end ; end ;
35196: GO 35135
35198: POP
35199: POP
// end ; end ;
35200: GO 34999
35202: POP
35203: POP
// if result and not asc then
35204: LD_VAR 0 6
35208: PUSH
35209: LD_VAR 0 4
35213: NOT
35214: AND
35215: IFFALSE 35290
// begin tmp := result ;
35217: LD_ADDR_VAR 0 9
35221: PUSH
35222: LD_VAR 0 6
35226: ST_TO_ADDR
// for i = tmp downto 1 do
35227: LD_ADDR_VAR 0 7
35231: PUSH
35232: DOUBLE
35233: LD_VAR 0 9
35237: INC
35238: ST_TO_ADDR
35239: LD_INT 1
35241: PUSH
35242: FOR_DOWNTO
35243: IFFALSE 35288
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_VAR 0 6
35254: PPUSH
35255: LD_VAR 0 9
35259: PUSH
35260: LD_VAR 0 7
35264: MINUS
35265: PUSH
35266: LD_INT 1
35268: PLUS
35269: PPUSH
35270: LD_VAR 0 9
35274: PUSH
35275: LD_VAR 0 7
35279: ARRAY
35280: PPUSH
35281: CALL_OW 1
35285: ST_TO_ADDR
35286: GO 35242
35288: POP
35289: POP
// end ; tmp := [ ] ;
35290: LD_ADDR_VAR 0 9
35294: PUSH
35295: EMPTY
35296: ST_TO_ADDR
// if mode then
35297: LD_VAR 0 5
35301: IFFALSE 35370
// begin for i = 1 to result do
35303: LD_ADDR_VAR 0 7
35307: PUSH
35308: DOUBLE
35309: LD_INT 1
35311: DEC
35312: ST_TO_ADDR
35313: LD_VAR 0 6
35317: PUSH
35318: FOR_TO
35319: IFFALSE 35358
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_VAR 0 9
35330: PPUSH
35331: LD_VAR 0 7
35335: PPUSH
35336: LD_VAR 0 6
35340: PUSH
35341: LD_VAR 0 7
35345: ARRAY
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: PPUSH
35351: CALL_OW 1
35355: ST_TO_ADDR
35356: GO 35318
35358: POP
35359: POP
// result := tmp ;
35360: LD_ADDR_VAR 0 6
35364: PUSH
35365: LD_VAR 0 9
35369: ST_TO_ADDR
// end ; end ;
35370: LD_VAR 0 6
35374: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35375: LD_INT 0
35377: PPUSH
35378: PPUSH
35379: PPUSH
35380: PPUSH
35381: PPUSH
35382: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35383: LD_ADDR_VAR 0 5
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: EMPTY
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// if not x or not y then
35405: LD_VAR 0 2
35409: NOT
35410: PUSH
35411: LD_VAR 0 3
35415: NOT
35416: OR
35417: IFFALSE 35421
// exit ;
35419: GO 37067
// if not range then
35421: LD_VAR 0 4
35425: NOT
35426: IFFALSE 35436
// range := 10 ;
35428: LD_ADDR_VAR 0 4
35432: PUSH
35433: LD_INT 10
35435: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35436: LD_ADDR_VAR 0 8
35440: PUSH
35441: LD_INT 81
35443: PUSH
35444: LD_VAR 0 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 92
35455: PUSH
35456: LD_VAR 0 2
35460: PUSH
35461: LD_VAR 0 3
35465: PUSH
35466: LD_VAR 0 4
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: LD_INT 21
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 69
35503: ST_TO_ADDR
// if not tmp then
35504: LD_VAR 0 8
35508: NOT
35509: IFFALSE 35513
// exit ;
35511: GO 37067
// for i in tmp do
35513: LD_ADDR_VAR 0 6
35517: PUSH
35518: LD_VAR 0 8
35522: PUSH
35523: FOR_IN
35524: IFFALSE 37042
// begin points := [ 0 , 0 , 0 ] ;
35526: LD_ADDR_VAR 0 9
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: LIST
35544: ST_TO_ADDR
// bpoints := 1 ;
35545: LD_ADDR_VAR 0 10
35549: PUSH
35550: LD_INT 1
35552: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35553: LD_VAR 0 6
35557: PPUSH
35558: CALL_OW 247
35562: PUSH
35563: LD_INT 1
35565: DOUBLE
35566: EQUAL
35567: IFTRUE 35571
35569: GO 36149
35571: POP
// begin if GetClass ( i ) = 1 then
35572: LD_VAR 0 6
35576: PPUSH
35577: CALL_OW 257
35581: PUSH
35582: LD_INT 1
35584: EQUAL
35585: IFFALSE 35606
// points := [ 10 , 5 , 3 ] ;
35587: LD_ADDR_VAR 0 9
35591: PUSH
35592: LD_INT 10
35594: PUSH
35595: LD_INT 5
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35606: LD_VAR 0 6
35610: PPUSH
35611: CALL_OW 257
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 3
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: IN
35630: IFFALSE 35651
// points := [ 3 , 2 , 1 ] ;
35632: LD_ADDR_VAR 0 9
35636: PUSH
35637: LD_INT 3
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35651: LD_VAR 0 6
35655: PPUSH
35656: CALL_OW 257
35660: PUSH
35661: LD_INT 5
35663: EQUAL
35664: IFFALSE 35685
// points := [ 130 , 5 , 2 ] ;
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_INT 130
35673: PUSH
35674: LD_INT 5
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35685: LD_VAR 0 6
35689: PPUSH
35690: CALL_OW 257
35694: PUSH
35695: LD_INT 8
35697: EQUAL
35698: IFFALSE 35719
// points := [ 35 , 35 , 30 ] ;
35700: LD_ADDR_VAR 0 9
35704: PUSH
35705: LD_INT 35
35707: PUSH
35708: LD_INT 35
35710: PUSH
35711: LD_INT 30
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35719: LD_VAR 0 6
35723: PPUSH
35724: CALL_OW 257
35728: PUSH
35729: LD_INT 9
35731: EQUAL
35732: IFFALSE 35753
// points := [ 20 , 55 , 40 ] ;
35734: LD_ADDR_VAR 0 9
35738: PUSH
35739: LD_INT 20
35741: PUSH
35742: LD_INT 55
35744: PUSH
35745: LD_INT 40
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35753: LD_VAR 0 6
35757: PPUSH
35758: CALL_OW 257
35762: PUSH
35763: LD_INT 12
35765: PUSH
35766: LD_INT 16
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: IN
35773: IFFALSE 35794
// points := [ 5 , 3 , 2 ] ;
35775: LD_ADDR_VAR 0 9
35779: PUSH
35780: LD_INT 5
35782: PUSH
35783: LD_INT 3
35785: PUSH
35786: LD_INT 2
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35794: LD_VAR 0 6
35798: PPUSH
35799: CALL_OW 257
35803: PUSH
35804: LD_INT 17
35806: EQUAL
35807: IFFALSE 35828
// points := [ 100 , 50 , 75 ] ;
35809: LD_ADDR_VAR 0 9
35813: PUSH
35814: LD_INT 100
35816: PUSH
35817: LD_INT 50
35819: PUSH
35820: LD_INT 75
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35828: LD_VAR 0 6
35832: PPUSH
35833: CALL_OW 257
35837: PUSH
35838: LD_INT 15
35840: EQUAL
35841: IFFALSE 35862
// points := [ 10 , 5 , 3 ] ;
35843: LD_ADDR_VAR 0 9
35847: PUSH
35848: LD_INT 10
35850: PUSH
35851: LD_INT 5
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35862: LD_VAR 0 6
35866: PPUSH
35867: CALL_OW 257
35871: PUSH
35872: LD_INT 14
35874: EQUAL
35875: IFFALSE 35896
// points := [ 10 , 0 , 0 ] ;
35877: LD_ADDR_VAR 0 9
35881: PUSH
35882: LD_INT 10
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35896: LD_VAR 0 6
35900: PPUSH
35901: CALL_OW 257
35905: PUSH
35906: LD_INT 11
35908: EQUAL
35909: IFFALSE 35930
// points := [ 30 , 10 , 5 ] ;
35911: LD_ADDR_VAR 0 9
35915: PUSH
35916: LD_INT 30
35918: PUSH
35919: LD_INT 10
35921: PUSH
35922: LD_INT 5
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35930: LD_VAR 0 1
35934: PPUSH
35935: LD_INT 5
35937: PPUSH
35938: CALL_OW 321
35942: PUSH
35943: LD_INT 2
35945: EQUAL
35946: IFFALSE 35963
// bpoints := bpoints * 1.8 ;
35948: LD_ADDR_VAR 0 10
35952: PUSH
35953: LD_VAR 0 10
35957: PUSH
35958: LD_REAL  1.80000000000000E+0000
35961: MUL
35962: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35963: LD_VAR 0 6
35967: PPUSH
35968: CALL_OW 257
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: LD_INT 4
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: IN
35991: PUSH
35992: LD_VAR 0 1
35996: PPUSH
35997: LD_INT 51
35999: PPUSH
36000: CALL_OW 321
36004: PUSH
36005: LD_INT 2
36007: EQUAL
36008: AND
36009: IFFALSE 36026
// bpoints := bpoints * 1.2 ;
36011: LD_ADDR_VAR 0 10
36015: PUSH
36016: LD_VAR 0 10
36020: PUSH
36021: LD_REAL  1.20000000000000E+0000
36024: MUL
36025: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36026: LD_VAR 0 6
36030: PPUSH
36031: CALL_OW 257
36035: PUSH
36036: LD_INT 5
36038: PUSH
36039: LD_INT 7
36041: PUSH
36042: LD_INT 9
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: LIST
36049: IN
36050: PUSH
36051: LD_VAR 0 1
36055: PPUSH
36056: LD_INT 52
36058: PPUSH
36059: CALL_OW 321
36063: PUSH
36064: LD_INT 2
36066: EQUAL
36067: AND
36068: IFFALSE 36085
// bpoints := bpoints * 1.5 ;
36070: LD_ADDR_VAR 0 10
36074: PUSH
36075: LD_VAR 0 10
36079: PUSH
36080: LD_REAL  1.50000000000000E+0000
36083: MUL
36084: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36085: LD_VAR 0 1
36089: PPUSH
36090: LD_INT 66
36092: PPUSH
36093: CALL_OW 321
36097: PUSH
36098: LD_INT 2
36100: EQUAL
36101: IFFALSE 36118
// bpoints := bpoints * 1.1 ;
36103: LD_ADDR_VAR 0 10
36107: PUSH
36108: LD_VAR 0 10
36112: PUSH
36113: LD_REAL  1.10000000000000E+0000
36116: MUL
36117: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36118: LD_ADDR_VAR 0 10
36122: PUSH
36123: LD_VAR 0 10
36127: PUSH
36128: LD_VAR 0 6
36132: PPUSH
36133: LD_INT 1
36135: PPUSH
36136: CALL_OW 259
36140: PUSH
36141: LD_REAL  1.15000000000000E+0000
36144: MUL
36145: MUL
36146: ST_TO_ADDR
// end ; unit_vehicle :
36147: GO 36971
36149: LD_INT 2
36151: DOUBLE
36152: EQUAL
36153: IFTRUE 36157
36155: GO 36959
36157: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36158: LD_VAR 0 6
36162: PPUSH
36163: CALL_OW 264
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 42
36173: PUSH
36174: LD_INT 24
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: LIST
36181: IN
36182: IFFALSE 36203
// points := [ 25 , 5 , 3 ] ;
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: LD_INT 25
36191: PUSH
36192: LD_INT 5
36194: PUSH
36195: LD_INT 3
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36203: LD_VAR 0 6
36207: PPUSH
36208: CALL_OW 264
36212: PUSH
36213: LD_INT 4
36215: PUSH
36216: LD_INT 43
36218: PUSH
36219: LD_INT 25
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: IN
36227: IFFALSE 36248
// points := [ 40 , 15 , 5 ] ;
36229: LD_ADDR_VAR 0 9
36233: PUSH
36234: LD_INT 40
36236: PUSH
36237: LD_INT 15
36239: PUSH
36240: LD_INT 5
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36248: LD_VAR 0 6
36252: PPUSH
36253: CALL_OW 264
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 23
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: IN
36268: IFFALSE 36289
// points := [ 7 , 25 , 8 ] ;
36270: LD_ADDR_VAR 0 9
36274: PUSH
36275: LD_INT 7
36277: PUSH
36278: LD_INT 25
36280: PUSH
36281: LD_INT 8
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36289: LD_VAR 0 6
36293: PPUSH
36294: CALL_OW 264
36298: PUSH
36299: LD_INT 5
36301: PUSH
36302: LD_INT 27
36304: PUSH
36305: LD_INT 44
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: LIST
36312: IN
36313: IFFALSE 36334
// points := [ 14 , 50 , 16 ] ;
36315: LD_ADDR_VAR 0 9
36319: PUSH
36320: LD_INT 14
36322: PUSH
36323: LD_INT 50
36325: PUSH
36326: LD_INT 16
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36334: LD_VAR 0 6
36338: PPUSH
36339: CALL_OW 264
36343: PUSH
36344: LD_INT 6
36346: PUSH
36347: LD_INT 46
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: IN
36354: IFFALSE 36375
// points := [ 32 , 120 , 70 ] ;
36356: LD_ADDR_VAR 0 9
36360: PUSH
36361: LD_INT 32
36363: PUSH
36364: LD_INT 120
36366: PUSH
36367: LD_INT 70
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: LIST
36374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36375: LD_VAR 0 6
36379: PPUSH
36380: CALL_OW 264
36384: PUSH
36385: LD_INT 7
36387: PUSH
36388: LD_INT 28
36390: PUSH
36391: LD_INT 45
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: IN
36399: IFFALSE 36420
// points := [ 35 , 20 , 45 ] ;
36401: LD_ADDR_VAR 0 9
36405: PUSH
36406: LD_INT 35
36408: PUSH
36409: LD_INT 20
36411: PUSH
36412: LD_INT 45
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36420: LD_VAR 0 6
36424: PPUSH
36425: CALL_OW 264
36429: PUSH
36430: LD_INT 47
36432: PUSH
36433: EMPTY
36434: LIST
36435: IN
36436: IFFALSE 36457
// points := [ 67 , 45 , 75 ] ;
36438: LD_ADDR_VAR 0 9
36442: PUSH
36443: LD_INT 67
36445: PUSH
36446: LD_INT 45
36448: PUSH
36449: LD_INT 75
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: LIST
36456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36457: LD_VAR 0 6
36461: PPUSH
36462: CALL_OW 264
36466: PUSH
36467: LD_INT 26
36469: PUSH
36470: EMPTY
36471: LIST
36472: IN
36473: IFFALSE 36494
// points := [ 120 , 30 , 80 ] ;
36475: LD_ADDR_VAR 0 9
36479: PUSH
36480: LD_INT 120
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: LD_INT 80
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36494: LD_VAR 0 6
36498: PPUSH
36499: CALL_OW 264
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: EMPTY
36508: LIST
36509: IN
36510: IFFALSE 36531
// points := [ 40 , 1 , 1 ] ;
36512: LD_ADDR_VAR 0 9
36516: PUSH
36517: LD_INT 40
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: LD_INT 1
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36531: LD_VAR 0 6
36535: PPUSH
36536: CALL_OW 264
36540: PUSH
36541: LD_INT 29
36543: PUSH
36544: EMPTY
36545: LIST
36546: IN
36547: IFFALSE 36568
// points := [ 70 , 200 , 400 ] ;
36549: LD_ADDR_VAR 0 9
36553: PUSH
36554: LD_INT 70
36556: PUSH
36557: LD_INT 200
36559: PUSH
36560: LD_INT 400
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36568: LD_VAR 0 6
36572: PPUSH
36573: CALL_OW 264
36577: PUSH
36578: LD_INT 14
36580: PUSH
36581: LD_INT 53
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: IN
36588: IFFALSE 36609
// points := [ 40 , 10 , 20 ] ;
36590: LD_ADDR_VAR 0 9
36594: PUSH
36595: LD_INT 40
36597: PUSH
36598: LD_INT 10
36600: PUSH
36601: LD_INT 20
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36609: LD_VAR 0 6
36613: PPUSH
36614: CALL_OW 264
36618: PUSH
36619: LD_INT 9
36621: PUSH
36622: EMPTY
36623: LIST
36624: IN
36625: IFFALSE 36646
// points := [ 5 , 70 , 20 ] ;
36627: LD_ADDR_VAR 0 9
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: LD_INT 70
36637: PUSH
36638: LD_INT 20
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36646: LD_VAR 0 6
36650: PPUSH
36651: CALL_OW 264
36655: PUSH
36656: LD_INT 10
36658: PUSH
36659: EMPTY
36660: LIST
36661: IN
36662: IFFALSE 36683
// points := [ 35 , 110 , 70 ] ;
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_INT 35
36671: PUSH
36672: LD_INT 110
36674: PUSH
36675: LD_INT 70
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36683: LD_VAR 0 6
36687: PPUSH
36688: CALL_OW 265
36692: PUSH
36693: LD_INT 25
36695: EQUAL
36696: IFFALSE 36717
// points := [ 80 , 65 , 100 ] ;
36698: LD_ADDR_VAR 0 9
36702: PUSH
36703: LD_INT 80
36705: PUSH
36706: LD_INT 65
36708: PUSH
36709: LD_INT 100
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36717: LD_VAR 0 6
36721: PPUSH
36722: CALL_OW 263
36726: PUSH
36727: LD_INT 1
36729: EQUAL
36730: IFFALSE 36765
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36732: LD_ADDR_VAR 0 10
36736: PUSH
36737: LD_VAR 0 10
36741: PUSH
36742: LD_VAR 0 6
36746: PPUSH
36747: CALL_OW 311
36751: PPUSH
36752: LD_INT 3
36754: PPUSH
36755: CALL_OW 259
36759: PUSH
36760: LD_INT 4
36762: MUL
36763: MUL
36764: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36765: LD_VAR 0 6
36769: PPUSH
36770: CALL_OW 263
36774: PUSH
36775: LD_INT 2
36777: EQUAL
36778: IFFALSE 36829
// begin j := IsControledBy ( i ) ;
36780: LD_ADDR_VAR 0 7
36784: PUSH
36785: LD_VAR 0 6
36789: PPUSH
36790: CALL_OW 312
36794: ST_TO_ADDR
// if j then
36795: LD_VAR 0 7
36799: IFFALSE 36829
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36801: LD_ADDR_VAR 0 10
36805: PUSH
36806: LD_VAR 0 10
36810: PUSH
36811: LD_VAR 0 7
36815: PPUSH
36816: LD_INT 3
36818: PPUSH
36819: CALL_OW 259
36823: PUSH
36824: LD_INT 3
36826: MUL
36827: MUL
36828: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36829: LD_VAR 0 6
36833: PPUSH
36834: CALL_OW 264
36838: PUSH
36839: LD_INT 5
36841: PUSH
36842: LD_INT 6
36844: PUSH
36845: LD_INT 46
36847: PUSH
36848: LD_INT 44
36850: PUSH
36851: LD_INT 47
36853: PUSH
36854: LD_INT 45
36856: PUSH
36857: LD_INT 28
36859: PUSH
36860: LD_INT 7
36862: PUSH
36863: LD_INT 27
36865: PUSH
36866: LD_INT 29
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: IN
36881: PUSH
36882: LD_VAR 0 1
36886: PPUSH
36887: LD_INT 52
36889: PPUSH
36890: CALL_OW 321
36894: PUSH
36895: LD_INT 2
36897: EQUAL
36898: AND
36899: IFFALSE 36916
// bpoints := bpoints * 1.2 ;
36901: LD_ADDR_VAR 0 10
36905: PUSH
36906: LD_VAR 0 10
36910: PUSH
36911: LD_REAL  1.20000000000000E+0000
36914: MUL
36915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36916: LD_VAR 0 6
36920: PPUSH
36921: CALL_OW 264
36925: PUSH
36926: LD_INT 6
36928: PUSH
36929: LD_INT 46
36931: PUSH
36932: LD_INT 47
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: IN
36940: IFFALSE 36957
// bpoints := bpoints * 1.2 ;
36942: LD_ADDR_VAR 0 10
36946: PUSH
36947: LD_VAR 0 10
36951: PUSH
36952: LD_REAL  1.20000000000000E+0000
36955: MUL
36956: ST_TO_ADDR
// end ; unit_building :
36957: GO 36971
36959: LD_INT 3
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36967
36965: GO 36970
36967: POP
// ; end ;
36968: GO 36971
36970: POP
// for j = 1 to 3 do
36971: LD_ADDR_VAR 0 7
36975: PUSH
36976: DOUBLE
36977: LD_INT 1
36979: DEC
36980: ST_TO_ADDR
36981: LD_INT 3
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37038
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36987: LD_ADDR_VAR 0 5
36991: PUSH
36992: LD_VAR 0 5
36996: PPUSH
36997: LD_VAR 0 7
37001: PPUSH
37002: LD_VAR 0 5
37006: PUSH
37007: LD_VAR 0 7
37011: ARRAY
37012: PUSH
37013: LD_VAR 0 9
37017: PUSH
37018: LD_VAR 0 7
37022: ARRAY
37023: PUSH
37024: LD_VAR 0 10
37028: MUL
37029: PLUS
37030: PPUSH
37031: CALL_OW 1
37035: ST_TO_ADDR
37036: GO 36984
37038: POP
37039: POP
// end ;
37040: GO 35523
37042: POP
37043: POP
// result := Replace ( result , 4 , tmp ) ;
37044: LD_ADDR_VAR 0 5
37048: PUSH
37049: LD_VAR 0 5
37053: PPUSH
37054: LD_INT 4
37056: PPUSH
37057: LD_VAR 0 8
37061: PPUSH
37062: CALL_OW 1
37066: ST_TO_ADDR
// end ;
37067: LD_VAR 0 5
37071: RET
// export function DangerAtRange ( unit , range ) ; begin
37072: LD_INT 0
37074: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 255
37089: PPUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 250
37099: PPUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 251
37109: PPUSH
37110: LD_VAR 0 2
37114: PPUSH
37115: CALL 35375 0 4
37119: ST_TO_ADDR
// end ;
37120: LD_VAR 0 3
37124: RET
// export function DangerInArea ( side , area ) ; begin
37125: LD_INT 0
37127: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37128: LD_ADDR_VAR 0 3
37132: PUSH
37133: LD_VAR 0 2
37137: PPUSH
37138: LD_INT 81
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PPUSH
37150: CALL_OW 70
37154: ST_TO_ADDR
// end ;
37155: LD_VAR 0 3
37159: RET
// export function IsExtension ( b ) ; begin
37160: LD_INT 0
37162: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37163: LD_ADDR_VAR 0 2
37167: PUSH
37168: LD_VAR 0 1
37172: PUSH
37173: LD_INT 23
37175: PUSH
37176: LD_INT 20
37178: PUSH
37179: LD_INT 22
37181: PUSH
37182: LD_INT 17
37184: PUSH
37185: LD_INT 24
37187: PUSH
37188: LD_INT 21
37190: PUSH
37191: LD_INT 19
37193: PUSH
37194: LD_INT 16
37196: PUSH
37197: LD_INT 25
37199: PUSH
37200: LD_INT 18
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: LIST
37207: LIST
37208: LIST
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: IN
37215: ST_TO_ADDR
// end ;
37216: LD_VAR 0 2
37220: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37221: LD_INT 0
37223: PPUSH
37224: PPUSH
37225: PPUSH
// result := [ ] ;
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: EMPTY
37232: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37233: LD_ADDR_VAR 0 4
37237: PUSH
37238: LD_VAR 0 2
37242: PPUSH
37243: LD_INT 21
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PPUSH
37253: CALL_OW 70
37257: ST_TO_ADDR
// if not tmp then
37258: LD_VAR 0 4
37262: NOT
37263: IFFALSE 37267
// exit ;
37265: GO 37325
// for i in tmp do
37267: LD_ADDR_VAR 0 5
37271: PUSH
37272: LD_VAR 0 4
37276: PUSH
37277: FOR_IN
37278: IFFALSE 37313
// if GetBase ( i ) <> base then
37280: LD_VAR 0 5
37284: PPUSH
37285: CALL_OW 274
37289: PUSH
37290: LD_VAR 0 1
37294: NONEQUAL
37295: IFFALSE 37311
// ComLinkToBase ( base , i ) ;
37297: LD_VAR 0 1
37301: PPUSH
37302: LD_VAR 0 5
37306: PPUSH
37307: CALL_OW 169
37311: GO 37277
37313: POP
37314: POP
// result := tmp ;
37315: LD_ADDR_VAR 0 3
37319: PUSH
37320: LD_VAR 0 4
37324: ST_TO_ADDR
// end ;
37325: LD_VAR 0 3
37329: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37330: LD_INT 0
37332: PPUSH
37333: PPUSH
// if BuildingStatus ( b ) = bs_build then
37334: LD_VAR 0 2
37338: PPUSH
37339: CALL_OW 461
37343: PUSH
37344: LD_INT 1
37346: EQUAL
37347: IFFALSE 37407
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37349: LD_VAR 0 1
37353: PPUSH
37354: LD_STRING h
37356: PUSH
37357: LD_VAR 0 2
37361: PPUSH
37362: CALL_OW 250
37366: PUSH
37367: LD_VAR 0 2
37371: PPUSH
37372: CALL_OW 251
37376: PUSH
37377: LD_VAR 0 2
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: PPUSH
37403: CALL_OW 446
// end ;
37407: LD_VAR 0 3
37411: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37412: LD_INT 0
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37420: LD_VAR 0 1
37424: NOT
37425: PUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 263
37435: PUSH
37436: LD_INT 2
37438: EQUAL
37439: NOT
37440: OR
37441: IFFALSE 37445
// exit ;
37443: GO 37761
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37445: LD_ADDR_VAR 0 6
37449: PUSH
37450: LD_INT 22
37452: PUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: LD_INT 30
37472: PUSH
37473: LD_INT 36
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 34
37482: PUSH
37483: LD_INT 31
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: LIST
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PPUSH
37499: CALL_OW 69
37503: ST_TO_ADDR
// if not tmp then
37504: LD_VAR 0 6
37508: NOT
37509: IFFALSE 37513
// exit ;
37511: GO 37761
// result := [ ] ;
37513: LD_ADDR_VAR 0 2
37517: PUSH
37518: EMPTY
37519: ST_TO_ADDR
// for i in tmp do
37520: LD_ADDR_VAR 0 3
37524: PUSH
37525: LD_VAR 0 6
37529: PUSH
37530: FOR_IN
37531: IFFALSE 37602
// begin t := UnitsInside ( i ) ;
37533: LD_ADDR_VAR 0 4
37537: PUSH
37538: LD_VAR 0 3
37542: PPUSH
37543: CALL_OW 313
37547: ST_TO_ADDR
// if t then
37548: LD_VAR 0 4
37552: IFFALSE 37600
// for j in t do
37554: LD_ADDR_VAR 0 7
37558: PUSH
37559: LD_VAR 0 4
37563: PUSH
37564: FOR_IN
37565: IFFALSE 37598
// result := Insert ( result , result + 1 , j ) ;
37567: LD_ADDR_VAR 0 2
37571: PUSH
37572: LD_VAR 0 2
37576: PPUSH
37577: LD_VAR 0 2
37581: PUSH
37582: LD_INT 1
37584: PLUS
37585: PPUSH
37586: LD_VAR 0 7
37590: PPUSH
37591: CALL_OW 2
37595: ST_TO_ADDR
37596: GO 37564
37598: POP
37599: POP
// end ;
37600: GO 37530
37602: POP
37603: POP
// if not result then
37604: LD_VAR 0 2
37608: NOT
37609: IFFALSE 37613
// exit ;
37611: GO 37761
// mech := result [ 1 ] ;
37613: LD_ADDR_VAR 0 5
37617: PUSH
37618: LD_VAR 0 2
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: ST_TO_ADDR
// if result > 1 then
37627: LD_VAR 0 2
37631: PUSH
37632: LD_INT 1
37634: GREATER
37635: IFFALSE 37747
// for i = 2 to result do
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: DOUBLE
37643: LD_INT 2
37645: DEC
37646: ST_TO_ADDR
37647: LD_VAR 0 2
37651: PUSH
37652: FOR_TO
37653: IFFALSE 37745
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37655: LD_ADDR_VAR 0 4
37659: PUSH
37660: LD_VAR 0 2
37664: PUSH
37665: LD_VAR 0 3
37669: ARRAY
37670: PPUSH
37671: LD_INT 3
37673: PPUSH
37674: CALL_OW 259
37678: PUSH
37679: LD_VAR 0 2
37683: PUSH
37684: LD_VAR 0 3
37688: ARRAY
37689: PPUSH
37690: CALL_OW 432
37694: MINUS
37695: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37696: LD_VAR 0 4
37700: PUSH
37701: LD_VAR 0 5
37705: PPUSH
37706: LD_INT 3
37708: PPUSH
37709: CALL_OW 259
37713: PUSH
37714: LD_VAR 0 5
37718: PPUSH
37719: CALL_OW 432
37723: MINUS
37724: GREATEREQUAL
37725: IFFALSE 37743
// mech := result [ i ] ;
37727: LD_ADDR_VAR 0 5
37731: PUSH
37732: LD_VAR 0 2
37736: PUSH
37737: LD_VAR 0 3
37741: ARRAY
37742: ST_TO_ADDR
// end ;
37743: GO 37652
37745: POP
37746: POP
// ComLinkTo ( vehicle , mech ) ;
37747: LD_VAR 0 1
37751: PPUSH
37752: LD_VAR 0 5
37756: PPUSH
37757: CALL_OW 135
// end ;
37761: LD_VAR 0 2
37765: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37766: LD_INT 0
37768: PPUSH
37769: PPUSH
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
// result := [ ] ;
37781: LD_ADDR_VAR 0 7
37785: PUSH
37786: EMPTY
37787: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37788: LD_VAR 0 1
37792: PPUSH
37793: CALL_OW 266
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: IN
37808: NOT
37809: IFFALSE 37813
// exit ;
37811: GO 39444
// if name then
37813: LD_VAR 0 3
37817: IFFALSE 37833
// SetBName ( base_dep , name ) ;
37819: LD_VAR 0 1
37823: PPUSH
37824: LD_VAR 0 3
37828: PPUSH
37829: CALL_OW 500
// base := GetBase ( base_dep ) ;
37833: LD_ADDR_VAR 0 15
37837: PUSH
37838: LD_VAR 0 1
37842: PPUSH
37843: CALL_OW 274
37847: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37848: LD_ADDR_VAR 0 16
37852: PUSH
37853: LD_VAR 0 1
37857: PPUSH
37858: CALL_OW 255
37862: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37863: LD_ADDR_VAR 0 17
37867: PUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 248
37877: ST_TO_ADDR
// if sources then
37878: LD_VAR 0 5
37882: IFFALSE 37929
// for i = 1 to 3 do
37884: LD_ADDR_VAR 0 8
37888: PUSH
37889: DOUBLE
37890: LD_INT 1
37892: DEC
37893: ST_TO_ADDR
37894: LD_INT 3
37896: PUSH
37897: FOR_TO
37898: IFFALSE 37927
// AddResourceType ( base , i , sources [ i ] ) ;
37900: LD_VAR 0 15
37904: PPUSH
37905: LD_VAR 0 8
37909: PPUSH
37910: LD_VAR 0 5
37914: PUSH
37915: LD_VAR 0 8
37919: ARRAY
37920: PPUSH
37921: CALL_OW 276
37925: GO 37897
37927: POP
37928: POP
// buildings := GetBaseBuildings ( base , area ) ;
37929: LD_ADDR_VAR 0 18
37933: PUSH
37934: LD_VAR 0 15
37938: PPUSH
37939: LD_VAR 0 2
37943: PPUSH
37944: CALL 37221 0 2
37948: ST_TO_ADDR
// InitHc ;
37949: CALL_OW 19
// InitUc ;
37953: CALL_OW 18
// uc_side := side ;
37957: LD_ADDR_OWVAR 20
37961: PUSH
37962: LD_VAR 0 16
37966: ST_TO_ADDR
// uc_nation := nation ;
37967: LD_ADDR_OWVAR 21
37971: PUSH
37972: LD_VAR 0 17
37976: ST_TO_ADDR
// if buildings then
37977: LD_VAR 0 18
37981: IFFALSE 39303
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37983: LD_ADDR_VAR 0 19
37987: PUSH
37988: LD_VAR 0 18
37992: PPUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 30
37998: PUSH
37999: LD_INT 29
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 30
38008: PUSH
38009: LD_INT 30
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 72
38025: ST_TO_ADDR
// if tmp then
38026: LD_VAR 0 19
38030: IFFALSE 38078
// for i in tmp do
38032: LD_ADDR_VAR 0 8
38036: PUSH
38037: LD_VAR 0 19
38041: PUSH
38042: FOR_IN
38043: IFFALSE 38076
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38045: LD_VAR 0 8
38049: PPUSH
38050: CALL_OW 250
38054: PPUSH
38055: LD_VAR 0 8
38059: PPUSH
38060: CALL_OW 251
38064: PPUSH
38065: LD_VAR 0 16
38069: PPUSH
38070: CALL_OW 441
38074: GO 38042
38076: POP
38077: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38078: LD_VAR 0 18
38082: PPUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 30
38088: PUSH
38089: LD_INT 32
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 30
38098: PUSH
38099: LD_INT 33
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PPUSH
38111: CALL_OW 72
38115: IFFALSE 38203
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38117: LD_ADDR_VAR 0 8
38121: PUSH
38122: LD_VAR 0 18
38126: PPUSH
38127: LD_INT 2
38129: PUSH
38130: LD_INT 30
38132: PUSH
38133: LD_INT 32
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 30
38142: PUSH
38143: LD_INT 33
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: LIST
38154: PPUSH
38155: CALL_OW 72
38159: PUSH
38160: FOR_IN
38161: IFFALSE 38201
// begin if not GetBWeapon ( i ) then
38163: LD_VAR 0 8
38167: PPUSH
38168: CALL_OW 269
38172: NOT
38173: IFFALSE 38199
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38175: LD_VAR 0 8
38179: PPUSH
38180: LD_VAR 0 8
38184: PPUSH
38185: LD_VAR 0 2
38189: PPUSH
38190: CALL 39449 0 2
38194: PPUSH
38195: CALL_OW 431
// end ;
38199: GO 38160
38201: POP
38202: POP
// end ; for i = 1 to personel do
38203: LD_ADDR_VAR 0 8
38207: PUSH
38208: DOUBLE
38209: LD_INT 1
38211: DEC
38212: ST_TO_ADDR
38213: LD_VAR 0 6
38217: PUSH
38218: FOR_TO
38219: IFFALSE 39283
// begin if i > 4 then
38221: LD_VAR 0 8
38225: PUSH
38226: LD_INT 4
38228: GREATER
38229: IFFALSE 38233
// break ;
38231: GO 39283
// case i of 1 :
38233: LD_VAR 0 8
38237: PUSH
38238: LD_INT 1
38240: DOUBLE
38241: EQUAL
38242: IFTRUE 38246
38244: GO 38326
38246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38247: LD_ADDR_VAR 0 12
38251: PUSH
38252: LD_VAR 0 18
38256: PPUSH
38257: LD_INT 22
38259: PUSH
38260: LD_VAR 0 16
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 58
38271: PUSH
38272: EMPTY
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: LD_INT 32
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 4
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 5
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: PPUSH
38319: CALL_OW 72
38323: ST_TO_ADDR
38324: GO 38548
38326: LD_INT 2
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38334
38332: GO 38396
38334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38335: LD_ADDR_VAR 0 12
38339: PUSH
38340: LD_VAR 0 18
38344: PPUSH
38345: LD_INT 22
38347: PUSH
38348: LD_VAR 0 16
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 30
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: LIST
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PPUSH
38389: CALL_OW 72
38393: ST_TO_ADDR
38394: GO 38548
38396: LD_INT 3
38398: DOUBLE
38399: EQUAL
38400: IFTRUE 38404
38402: GO 38466
38404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38405: LD_ADDR_VAR 0 12
38409: PUSH
38410: LD_VAR 0 18
38414: PPUSH
38415: LD_INT 22
38417: PUSH
38418: LD_VAR 0 16
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 30
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 30
38442: PUSH
38443: LD_INT 3
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PPUSH
38459: CALL_OW 72
38463: ST_TO_ADDR
38464: GO 38548
38466: LD_INT 4
38468: DOUBLE
38469: EQUAL
38470: IFTRUE 38474
38472: GO 38547
38474: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38475: LD_ADDR_VAR 0 12
38479: PUSH
38480: LD_VAR 0 18
38484: PPUSH
38485: LD_INT 22
38487: PUSH
38488: LD_VAR 0 16
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 30
38502: PUSH
38503: LD_INT 6
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 7
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 8
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PPUSH
38540: CALL_OW 72
38544: ST_TO_ADDR
38545: GO 38548
38547: POP
// if i = 1 then
38548: LD_VAR 0 8
38552: PUSH
38553: LD_INT 1
38555: EQUAL
38556: IFFALSE 38667
// begin tmp := [ ] ;
38558: LD_ADDR_VAR 0 19
38562: PUSH
38563: EMPTY
38564: ST_TO_ADDR
// for j in f do
38565: LD_ADDR_VAR 0 9
38569: PUSH
38570: LD_VAR 0 12
38574: PUSH
38575: FOR_IN
38576: IFFALSE 38649
// if GetBType ( j ) = b_bunker then
38578: LD_VAR 0 9
38582: PPUSH
38583: CALL_OW 266
38587: PUSH
38588: LD_INT 32
38590: EQUAL
38591: IFFALSE 38618
// tmp := Insert ( tmp , 1 , j ) else
38593: LD_ADDR_VAR 0 19
38597: PUSH
38598: LD_VAR 0 19
38602: PPUSH
38603: LD_INT 1
38605: PPUSH
38606: LD_VAR 0 9
38610: PPUSH
38611: CALL_OW 2
38615: ST_TO_ADDR
38616: GO 38647
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38618: LD_ADDR_VAR 0 19
38622: PUSH
38623: LD_VAR 0 19
38627: PPUSH
38628: LD_VAR 0 19
38632: PUSH
38633: LD_INT 1
38635: PLUS
38636: PPUSH
38637: LD_VAR 0 9
38641: PPUSH
38642: CALL_OW 2
38646: ST_TO_ADDR
38647: GO 38575
38649: POP
38650: POP
// if tmp then
38651: LD_VAR 0 19
38655: IFFALSE 38667
// f := tmp ;
38657: LD_ADDR_VAR 0 12
38661: PUSH
38662: LD_VAR 0 19
38666: ST_TO_ADDR
// end ; x := personel [ i ] ;
38667: LD_ADDR_VAR 0 13
38671: PUSH
38672: LD_VAR 0 6
38676: PUSH
38677: LD_VAR 0 8
38681: ARRAY
38682: ST_TO_ADDR
// if x = - 1 then
38683: LD_VAR 0 13
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: EQUAL
38692: IFFALSE 38901
// begin for j in f do
38694: LD_ADDR_VAR 0 9
38698: PUSH
38699: LD_VAR 0 12
38703: PUSH
38704: FOR_IN
38705: IFFALSE 38897
// repeat InitHc ;
38707: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38711: LD_VAR 0 9
38715: PPUSH
38716: CALL_OW 266
38720: PUSH
38721: LD_INT 5
38723: EQUAL
38724: IFFALSE 38794
// begin if UnitsInside ( j ) < 3 then
38726: LD_VAR 0 9
38730: PPUSH
38731: CALL_OW 313
38735: PUSH
38736: LD_INT 3
38738: LESS
38739: IFFALSE 38775
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38741: LD_INT 0
38743: PPUSH
38744: LD_INT 5
38746: PUSH
38747: LD_INT 8
38749: PUSH
38750: LD_INT 9
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: PUSH
38758: LD_VAR 0 17
38762: ARRAY
38763: PPUSH
38764: LD_VAR 0 4
38768: PPUSH
38769: CALL_OW 380
38773: GO 38792
// PrepareHuman ( false , i , skill ) ;
38775: LD_INT 0
38777: PPUSH
38778: LD_VAR 0 8
38782: PPUSH
38783: LD_VAR 0 4
38787: PPUSH
38788: CALL_OW 380
// end else
38792: GO 38811
// PrepareHuman ( false , i , skill ) ;
38794: LD_INT 0
38796: PPUSH
38797: LD_VAR 0 8
38801: PPUSH
38802: LD_VAR 0 4
38806: PPUSH
38807: CALL_OW 380
// un := CreateHuman ;
38811: LD_ADDR_VAR 0 14
38815: PUSH
38816: CALL_OW 44
38820: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38821: LD_ADDR_VAR 0 7
38825: PUSH
38826: LD_VAR 0 7
38830: PPUSH
38831: LD_INT 1
38833: PPUSH
38834: LD_VAR 0 14
38838: PPUSH
38839: CALL_OW 2
38843: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38844: LD_VAR 0 14
38848: PPUSH
38849: LD_VAR 0 9
38853: PPUSH
38854: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38858: LD_VAR 0 9
38862: PPUSH
38863: CALL_OW 313
38867: PUSH
38868: LD_INT 6
38870: EQUAL
38871: PUSH
38872: LD_VAR 0 9
38876: PPUSH
38877: CALL_OW 266
38881: PUSH
38882: LD_INT 32
38884: PUSH
38885: LD_INT 31
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: IN
38892: OR
38893: IFFALSE 38707
38895: GO 38704
38897: POP
38898: POP
// end else
38899: GO 39281
// for j = 1 to x do
38901: LD_ADDR_VAR 0 9
38905: PUSH
38906: DOUBLE
38907: LD_INT 1
38909: DEC
38910: ST_TO_ADDR
38911: LD_VAR 0 13
38915: PUSH
38916: FOR_TO
38917: IFFALSE 39279
// begin InitHc ;
38919: CALL_OW 19
// if not f then
38923: LD_VAR 0 12
38927: NOT
38928: IFFALSE 39017
// begin PrepareHuman ( false , i , skill ) ;
38930: LD_INT 0
38932: PPUSH
38933: LD_VAR 0 8
38937: PPUSH
38938: LD_VAR 0 4
38942: PPUSH
38943: CALL_OW 380
// un := CreateHuman ;
38947: LD_ADDR_VAR 0 14
38951: PUSH
38952: CALL_OW 44
38956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38957: LD_ADDR_VAR 0 7
38961: PUSH
38962: LD_VAR 0 7
38966: PPUSH
38967: LD_INT 1
38969: PPUSH
38970: LD_VAR 0 14
38974: PPUSH
38975: CALL_OW 2
38979: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38980: LD_VAR 0 14
38984: PPUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 250
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 251
39004: PPUSH
39005: LD_INT 10
39007: PPUSH
39008: LD_INT 0
39010: PPUSH
39011: CALL_OW 50
// continue ;
39015: GO 38916
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39017: LD_VAR 0 12
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: PPUSH
39026: CALL_OW 313
39030: PUSH
39031: LD_VAR 0 12
39035: PUSH
39036: LD_INT 1
39038: ARRAY
39039: PPUSH
39040: CALL_OW 266
39044: PUSH
39045: LD_INT 32
39047: PUSH
39048: LD_INT 31
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: IN
39055: AND
39056: PUSH
39057: LD_VAR 0 12
39061: PUSH
39062: LD_INT 1
39064: ARRAY
39065: PPUSH
39066: CALL_OW 313
39070: PUSH
39071: LD_INT 6
39073: EQUAL
39074: OR
39075: IFFALSE 39095
// f := Delete ( f , 1 ) ;
39077: LD_ADDR_VAR 0 12
39081: PUSH
39082: LD_VAR 0 12
39086: PPUSH
39087: LD_INT 1
39089: PPUSH
39090: CALL_OW 3
39094: ST_TO_ADDR
// if not f then
39095: LD_VAR 0 12
39099: NOT
39100: IFFALSE 39118
// begin x := x + 2 ;
39102: LD_ADDR_VAR 0 13
39106: PUSH
39107: LD_VAR 0 13
39111: PUSH
39112: LD_INT 2
39114: PLUS
39115: ST_TO_ADDR
// continue ;
39116: GO 38916
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39118: LD_VAR 0 12
39122: PUSH
39123: LD_INT 1
39125: ARRAY
39126: PPUSH
39127: CALL_OW 266
39131: PUSH
39132: LD_INT 5
39134: EQUAL
39135: IFFALSE 39209
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39137: LD_VAR 0 12
39141: PUSH
39142: LD_INT 1
39144: ARRAY
39145: PPUSH
39146: CALL_OW 313
39150: PUSH
39151: LD_INT 3
39153: LESS
39154: IFFALSE 39190
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39156: LD_INT 0
39158: PPUSH
39159: LD_INT 5
39161: PUSH
39162: LD_INT 8
39164: PUSH
39165: LD_INT 9
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: PUSH
39173: LD_VAR 0 17
39177: ARRAY
39178: PPUSH
39179: LD_VAR 0 4
39183: PPUSH
39184: CALL_OW 380
39188: GO 39207
// PrepareHuman ( false , i , skill ) ;
39190: LD_INT 0
39192: PPUSH
39193: LD_VAR 0 8
39197: PPUSH
39198: LD_VAR 0 4
39202: PPUSH
39203: CALL_OW 380
// end else
39207: GO 39226
// PrepareHuman ( false , i , skill ) ;
39209: LD_INT 0
39211: PPUSH
39212: LD_VAR 0 8
39216: PPUSH
39217: LD_VAR 0 4
39221: PPUSH
39222: CALL_OW 380
// un := CreateHuman ;
39226: LD_ADDR_VAR 0 14
39230: PUSH
39231: CALL_OW 44
39235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39236: LD_ADDR_VAR 0 7
39240: PUSH
39241: LD_VAR 0 7
39245: PPUSH
39246: LD_INT 1
39248: PPUSH
39249: LD_VAR 0 14
39253: PPUSH
39254: CALL_OW 2
39258: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39259: LD_VAR 0 14
39263: PPUSH
39264: LD_VAR 0 12
39268: PUSH
39269: LD_INT 1
39271: ARRAY
39272: PPUSH
39273: CALL_OW 52
// end ;
39277: GO 38916
39279: POP
39280: POP
// end ;
39281: GO 38218
39283: POP
39284: POP
// result := result ^ buildings ;
39285: LD_ADDR_VAR 0 7
39289: PUSH
39290: LD_VAR 0 7
39294: PUSH
39295: LD_VAR 0 18
39299: ADD
39300: ST_TO_ADDR
// end else
39301: GO 39444
// begin for i = 1 to personel do
39303: LD_ADDR_VAR 0 8
39307: PUSH
39308: DOUBLE
39309: LD_INT 1
39311: DEC
39312: ST_TO_ADDR
39313: LD_VAR 0 6
39317: PUSH
39318: FOR_TO
39319: IFFALSE 39442
// begin if i > 4 then
39321: LD_VAR 0 8
39325: PUSH
39326: LD_INT 4
39328: GREATER
39329: IFFALSE 39333
// break ;
39331: GO 39442
// x := personel [ i ] ;
39333: LD_ADDR_VAR 0 13
39337: PUSH
39338: LD_VAR 0 6
39342: PUSH
39343: LD_VAR 0 8
39347: ARRAY
39348: ST_TO_ADDR
// if x = - 1 then
39349: LD_VAR 0 13
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: EQUAL
39358: IFFALSE 39362
// continue ;
39360: GO 39318
// PrepareHuman ( false , i , skill ) ;
39362: LD_INT 0
39364: PPUSH
39365: LD_VAR 0 8
39369: PPUSH
39370: LD_VAR 0 4
39374: PPUSH
39375: CALL_OW 380
// un := CreateHuman ;
39379: LD_ADDR_VAR 0 14
39383: PUSH
39384: CALL_OW 44
39388: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39389: LD_VAR 0 14
39393: PPUSH
39394: LD_VAR 0 1
39398: PPUSH
39399: CALL_OW 250
39403: PPUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 251
39413: PPUSH
39414: LD_INT 10
39416: PPUSH
39417: LD_INT 0
39419: PPUSH
39420: CALL_OW 50
// result := result ^ un ;
39424: LD_ADDR_VAR 0 7
39428: PUSH
39429: LD_VAR 0 7
39433: PUSH
39434: LD_VAR 0 14
39438: ADD
39439: ST_TO_ADDR
// end ;
39440: GO 39318
39442: POP
39443: POP
// end ; end ;
39444: LD_VAR 0 7
39448: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39449: LD_INT 0
39451: PPUSH
39452: PPUSH
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
39457: PPUSH
39458: PPUSH
39459: PPUSH
39460: PPUSH
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
// result := false ;
39467: LD_ADDR_VAR 0 3
39471: PUSH
39472: LD_INT 0
39474: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39475: LD_VAR 0 1
39479: NOT
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: CALL_OW 266
39490: PUSH
39491: LD_INT 32
39493: PUSH
39494: LD_INT 33
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: IN
39501: NOT
39502: OR
39503: IFFALSE 39507
// exit ;
39505: GO 40643
// nat := GetNation ( tower ) ;
39507: LD_ADDR_VAR 0 12
39511: PUSH
39512: LD_VAR 0 1
39516: PPUSH
39517: CALL_OW 248
39521: ST_TO_ADDR
// side := GetSide ( tower ) ;
39522: LD_ADDR_VAR 0 16
39526: PUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 255
39536: ST_TO_ADDR
// x := GetX ( tower ) ;
39537: LD_ADDR_VAR 0 10
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 250
39551: ST_TO_ADDR
// y := GetY ( tower ) ;
39552: LD_ADDR_VAR 0 11
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 251
39566: ST_TO_ADDR
// if not x or not y then
39567: LD_VAR 0 10
39571: NOT
39572: PUSH
39573: LD_VAR 0 11
39577: NOT
39578: OR
39579: IFFALSE 39583
// exit ;
39581: GO 40643
// weapon := 0 ;
39583: LD_ADDR_VAR 0 18
39587: PUSH
39588: LD_INT 0
39590: ST_TO_ADDR
// fac_list := [ ] ;
39591: LD_ADDR_VAR 0 17
39595: PUSH
39596: EMPTY
39597: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39598: LD_ADDR_VAR 0 6
39602: PUSH
39603: LD_VAR 0 1
39607: PPUSH
39608: CALL_OW 274
39612: PPUSH
39613: LD_VAR 0 2
39617: PPUSH
39618: CALL 37221 0 2
39622: PPUSH
39623: LD_INT 30
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PPUSH
39633: CALL_OW 72
39637: ST_TO_ADDR
// if not factories then
39638: LD_VAR 0 6
39642: NOT
39643: IFFALSE 39647
// exit ;
39645: GO 40643
// for i in factories do
39647: LD_ADDR_VAR 0 8
39651: PUSH
39652: LD_VAR 0 6
39656: PUSH
39657: FOR_IN
39658: IFFALSE 39683
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39660: LD_ADDR_VAR 0 17
39664: PUSH
39665: LD_VAR 0 17
39669: PUSH
39670: LD_VAR 0 8
39674: PPUSH
39675: CALL_OW 478
39679: UNION
39680: ST_TO_ADDR
39681: GO 39657
39683: POP
39684: POP
// if not fac_list then
39685: LD_VAR 0 17
39689: NOT
39690: IFFALSE 39694
// exit ;
39692: GO 40643
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39694: LD_ADDR_VAR 0 5
39698: PUSH
39699: LD_INT 4
39701: PUSH
39702: LD_INT 5
39704: PUSH
39705: LD_INT 9
39707: PUSH
39708: LD_INT 10
39710: PUSH
39711: LD_INT 6
39713: PUSH
39714: LD_INT 7
39716: PUSH
39717: LD_INT 11
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 27
39731: PUSH
39732: LD_INT 28
39734: PUSH
39735: LD_INT 26
39737: PUSH
39738: LD_INT 30
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 43
39749: PUSH
39750: LD_INT 44
39752: PUSH
39753: LD_INT 46
39755: PUSH
39756: LD_INT 45
39758: PUSH
39759: LD_INT 47
39761: PUSH
39762: LD_INT 49
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_VAR 0 12
39782: ARRAY
39783: ST_TO_ADDR
// for i in list do
39784: LD_ADDR_VAR 0 8
39788: PUSH
39789: LD_VAR 0 5
39793: PUSH
39794: FOR_IN
39795: IFFALSE 39828
// if not i in fac_list then
39797: LD_VAR 0 8
39801: PUSH
39802: LD_VAR 0 17
39806: IN
39807: NOT
39808: IFFALSE 39826
// list := list diff i ;
39810: LD_ADDR_VAR 0 5
39814: PUSH
39815: LD_VAR 0 5
39819: PUSH
39820: LD_VAR 0 8
39824: DIFF
39825: ST_TO_ADDR
39826: GO 39794
39828: POP
39829: POP
// if not list then
39830: LD_VAR 0 5
39834: NOT
39835: IFFALSE 39839
// exit ;
39837: GO 40643
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39839: LD_VAR 0 12
39843: PUSH
39844: LD_INT 3
39846: EQUAL
39847: PUSH
39848: LD_INT 49
39850: PUSH
39851: LD_VAR 0 5
39855: IN
39856: AND
39857: PUSH
39858: LD_INT 31
39860: PPUSH
39861: LD_VAR 0 16
39865: PPUSH
39866: CALL_OW 321
39870: PUSH
39871: LD_INT 2
39873: EQUAL
39874: AND
39875: IFFALSE 39935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39877: LD_INT 22
39879: PUSH
39880: LD_VAR 0 16
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 35
39891: PUSH
39892: LD_INT 49
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 91
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_INT 10
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: LIST
39919: PPUSH
39920: CALL_OW 69
39924: NOT
39925: IFFALSE 39935
// weapon := ru_time_lapser ;
39927: LD_ADDR_VAR 0 18
39931: PUSH
39932: LD_INT 49
39934: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39935: LD_VAR 0 12
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: IN
39950: PUSH
39951: LD_INT 11
39953: PUSH
39954: LD_VAR 0 5
39958: IN
39959: PUSH
39960: LD_INT 30
39962: PUSH
39963: LD_VAR 0 5
39967: IN
39968: OR
39969: AND
39970: PUSH
39971: LD_INT 6
39973: PPUSH
39974: LD_VAR 0 16
39978: PPUSH
39979: CALL_OW 321
39983: PUSH
39984: LD_INT 2
39986: EQUAL
39987: AND
39988: IFFALSE 40153
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39990: LD_INT 22
39992: PUSH
39993: LD_VAR 0 16
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 35
40007: PUSH
40008: LD_INT 11
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 35
40017: PUSH
40018: LD_INT 30
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 91
40032: PUSH
40033: LD_VAR 0 1
40037: PUSH
40038: LD_INT 18
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: PPUSH
40051: CALL_OW 69
40055: NOT
40056: PUSH
40057: LD_INT 22
40059: PUSH
40060: LD_VAR 0 16
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: PUSH
40072: LD_INT 30
40074: PUSH
40075: LD_INT 32
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: LD_INT 33
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 91
40099: PUSH
40100: LD_VAR 0 1
40104: PUSH
40105: LD_INT 12
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: PPUSH
40121: CALL_OW 69
40125: PUSH
40126: LD_INT 2
40128: GREATER
40129: AND
40130: IFFALSE 40153
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40132: LD_ADDR_VAR 0 18
40136: PUSH
40137: LD_INT 11
40139: PUSH
40140: LD_INT 30
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_VAR 0 12
40151: ARRAY
40152: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40153: LD_VAR 0 18
40157: NOT
40158: PUSH
40159: LD_INT 40
40161: PPUSH
40162: LD_VAR 0 16
40166: PPUSH
40167: CALL_OW 321
40171: PUSH
40172: LD_INT 2
40174: EQUAL
40175: AND
40176: PUSH
40177: LD_INT 7
40179: PUSH
40180: LD_VAR 0 5
40184: IN
40185: PUSH
40186: LD_INT 28
40188: PUSH
40189: LD_VAR 0 5
40193: IN
40194: OR
40195: PUSH
40196: LD_INT 45
40198: PUSH
40199: LD_VAR 0 5
40203: IN
40204: OR
40205: AND
40206: IFFALSE 40460
// begin hex := GetHexInfo ( x , y ) ;
40208: LD_ADDR_VAR 0 4
40212: PUSH
40213: LD_VAR 0 10
40217: PPUSH
40218: LD_VAR 0 11
40222: PPUSH
40223: CALL_OW 546
40227: ST_TO_ADDR
// if hex [ 1 ] then
40228: LD_VAR 0 4
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: IFFALSE 40240
// exit ;
40238: GO 40643
// height := hex [ 2 ] ;
40240: LD_ADDR_VAR 0 15
40244: PUSH
40245: LD_VAR 0 4
40249: PUSH
40250: LD_INT 2
40252: ARRAY
40253: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40254: LD_ADDR_VAR 0 14
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 5
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: ST_TO_ADDR
// for i in tmp do
40277: LD_ADDR_VAR 0 8
40281: PUSH
40282: LD_VAR 0 14
40286: PUSH
40287: FOR_IN
40288: IFFALSE 40458
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40290: LD_ADDR_VAR 0 9
40294: PUSH
40295: LD_VAR 0 10
40299: PPUSH
40300: LD_VAR 0 8
40304: PPUSH
40305: LD_INT 5
40307: PPUSH
40308: CALL_OW 272
40312: PUSH
40313: LD_VAR 0 11
40317: PPUSH
40318: LD_VAR 0 8
40322: PPUSH
40323: LD_INT 5
40325: PPUSH
40326: CALL_OW 273
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40335: LD_VAR 0 9
40339: PUSH
40340: LD_INT 1
40342: ARRAY
40343: PPUSH
40344: LD_VAR 0 9
40348: PUSH
40349: LD_INT 2
40351: ARRAY
40352: PPUSH
40353: CALL_OW 488
40357: IFFALSE 40456
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40359: LD_ADDR_VAR 0 4
40363: PUSH
40364: LD_VAR 0 9
40368: PUSH
40369: LD_INT 1
40371: ARRAY
40372: PPUSH
40373: LD_VAR 0 9
40377: PUSH
40378: LD_INT 2
40380: ARRAY
40381: PPUSH
40382: CALL_OW 546
40386: ST_TO_ADDR
// if hex [ 1 ] then
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 1
40394: ARRAY
40395: IFFALSE 40399
// continue ;
40397: GO 40287
// h := hex [ 2 ] ;
40399: LD_ADDR_VAR 0 13
40403: PUSH
40404: LD_VAR 0 4
40408: PUSH
40409: LD_INT 2
40411: ARRAY
40412: ST_TO_ADDR
// if h + 7 < height then
40413: LD_VAR 0 13
40417: PUSH
40418: LD_INT 7
40420: PLUS
40421: PUSH
40422: LD_VAR 0 15
40426: LESS
40427: IFFALSE 40456
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40429: LD_ADDR_VAR 0 18
40433: PUSH
40434: LD_INT 7
40436: PUSH
40437: LD_INT 28
40439: PUSH
40440: LD_INT 45
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: LIST
40447: PUSH
40448: LD_VAR 0 12
40452: ARRAY
40453: ST_TO_ADDR
// break ;
40454: GO 40458
// end ; end ; end ;
40456: GO 40287
40458: POP
40459: POP
// end ; if not weapon then
40460: LD_VAR 0 18
40464: NOT
40465: IFFALSE 40525
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40467: LD_ADDR_VAR 0 5
40471: PUSH
40472: LD_VAR 0 5
40476: PUSH
40477: LD_INT 11
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: LD_INT 49
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: LIST
40490: DIFF
40491: ST_TO_ADDR
// if not list then
40492: LD_VAR 0 5
40496: NOT
40497: IFFALSE 40501
// exit ;
40499: GO 40643
// weapon := list [ rand ( 1 , list ) ] ;
40501: LD_ADDR_VAR 0 18
40505: PUSH
40506: LD_VAR 0 5
40510: PUSH
40511: LD_INT 1
40513: PPUSH
40514: LD_VAR 0 5
40518: PPUSH
40519: CALL_OW 12
40523: ARRAY
40524: ST_TO_ADDR
// end ; if weapon then
40525: LD_VAR 0 18
40529: IFFALSE 40643
// begin tmp := CostOfWeapon ( weapon ) ;
40531: LD_ADDR_VAR 0 14
40535: PUSH
40536: LD_VAR 0 18
40540: PPUSH
40541: CALL_OW 451
40545: ST_TO_ADDR
// j := GetBase ( tower ) ;
40546: LD_ADDR_VAR 0 9
40550: PUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL_OW 274
40560: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40561: LD_VAR 0 9
40565: PPUSH
40566: LD_INT 1
40568: PPUSH
40569: CALL_OW 275
40573: PUSH
40574: LD_VAR 0 14
40578: PUSH
40579: LD_INT 1
40581: ARRAY
40582: GREATEREQUAL
40583: PUSH
40584: LD_VAR 0 9
40588: PPUSH
40589: LD_INT 2
40591: PPUSH
40592: CALL_OW 275
40596: PUSH
40597: LD_VAR 0 14
40601: PUSH
40602: LD_INT 2
40604: ARRAY
40605: GREATEREQUAL
40606: AND
40607: PUSH
40608: LD_VAR 0 9
40612: PPUSH
40613: LD_INT 3
40615: PPUSH
40616: CALL_OW 275
40620: PUSH
40621: LD_VAR 0 14
40625: PUSH
40626: LD_INT 3
40628: ARRAY
40629: GREATEREQUAL
40630: AND
40631: IFFALSE 40643
// result := weapon ;
40633: LD_ADDR_VAR 0 3
40637: PUSH
40638: LD_VAR 0 18
40642: ST_TO_ADDR
// end ; end ;
40643: LD_VAR 0 3
40647: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40648: LD_INT 0
40650: PPUSH
40651: PPUSH
// result := true ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 1
40659: ST_TO_ADDR
// if array1 = array2 then
40660: LD_VAR 0 1
40664: PUSH
40665: LD_VAR 0 2
40669: EQUAL
40670: IFFALSE 40730
// begin for i = 1 to array1 do
40672: LD_ADDR_VAR 0 4
40676: PUSH
40677: DOUBLE
40678: LD_INT 1
40680: DEC
40681: ST_TO_ADDR
40682: LD_VAR 0 1
40686: PUSH
40687: FOR_TO
40688: IFFALSE 40726
// if array1 [ i ] <> array2 [ i ] then
40690: LD_VAR 0 1
40694: PUSH
40695: LD_VAR 0 4
40699: ARRAY
40700: PUSH
40701: LD_VAR 0 2
40705: PUSH
40706: LD_VAR 0 4
40710: ARRAY
40711: NONEQUAL
40712: IFFALSE 40724
// begin result := false ;
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_INT 0
40721: ST_TO_ADDR
// break ;
40722: GO 40726
// end ;
40724: GO 40687
40726: POP
40727: POP
// end else
40728: GO 40738
// result := false ;
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 0
40737: ST_TO_ADDR
// end ;
40738: LD_VAR 0 3
40742: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40743: LD_INT 0
40745: PPUSH
40746: PPUSH
40747: PPUSH
// pom := GetBase ( fac ) ;
40748: LD_ADDR_VAR 0 5
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 274
40762: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40763: LD_ADDR_VAR 0 4
40767: PUSH
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: PPUSH
40777: LD_VAR 0 2
40781: PUSH
40782: LD_INT 2
40784: ARRAY
40785: PPUSH
40786: LD_VAR 0 2
40790: PUSH
40791: LD_INT 3
40793: ARRAY
40794: PPUSH
40795: LD_VAR 0 2
40799: PUSH
40800: LD_INT 4
40802: ARRAY
40803: PPUSH
40804: CALL_OW 449
40808: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40809: LD_ADDR_VAR 0 3
40813: PUSH
40814: LD_VAR 0 5
40818: PPUSH
40819: LD_INT 1
40821: PPUSH
40822: CALL_OW 275
40826: PUSH
40827: LD_VAR 0 4
40831: PUSH
40832: LD_INT 1
40834: ARRAY
40835: GREATEREQUAL
40836: PUSH
40837: LD_VAR 0 5
40841: PPUSH
40842: LD_INT 2
40844: PPUSH
40845: CALL_OW 275
40849: PUSH
40850: LD_VAR 0 4
40854: PUSH
40855: LD_INT 2
40857: ARRAY
40858: GREATEREQUAL
40859: AND
40860: PUSH
40861: LD_VAR 0 5
40865: PPUSH
40866: LD_INT 3
40868: PPUSH
40869: CALL_OW 275
40873: PUSH
40874: LD_VAR 0 4
40878: PUSH
40879: LD_INT 3
40881: ARRAY
40882: GREATEREQUAL
40883: AND
40884: ST_TO_ADDR
// end ;
40885: LD_VAR 0 3
40889: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40890: LD_INT 0
40892: PPUSH
40893: PPUSH
40894: PPUSH
40895: PPUSH
// pom := GetBase ( building ) ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: CALL_OW 274
40910: ST_TO_ADDR
// if not pom then
40911: LD_VAR 0 3
40915: NOT
40916: IFFALSE 40920
// exit ;
40918: GO 41090
// btype := GetBType ( building ) ;
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 1
40929: PPUSH
40930: CALL_OW 266
40934: ST_TO_ADDR
// if btype = b_armoury then
40935: LD_VAR 0 5
40939: PUSH
40940: LD_INT 4
40942: EQUAL
40943: IFFALSE 40953
// btype := b_barracks ;
40945: LD_ADDR_VAR 0 5
40949: PUSH
40950: LD_INT 5
40952: ST_TO_ADDR
// if btype = b_depot then
40953: LD_VAR 0 5
40957: PUSH
40958: LD_INT 0
40960: EQUAL
40961: IFFALSE 40971
// btype := b_warehouse ;
40963: LD_ADDR_VAR 0 5
40967: PUSH
40968: LD_INT 1
40970: ST_TO_ADDR
// if btype = b_workshop then
40971: LD_VAR 0 5
40975: PUSH
40976: LD_INT 2
40978: EQUAL
40979: IFFALSE 40989
// btype := b_factory ;
40981: LD_ADDR_VAR 0 5
40985: PUSH
40986: LD_INT 3
40988: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40989: LD_ADDR_VAR 0 4
40993: PUSH
40994: LD_VAR 0 5
40998: PPUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 248
41008: PPUSH
41009: CALL_OW 450
41013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41014: LD_ADDR_VAR 0 2
41018: PUSH
41019: LD_VAR 0 3
41023: PPUSH
41024: LD_INT 1
41026: PPUSH
41027: CALL_OW 275
41031: PUSH
41032: LD_VAR 0 4
41036: PUSH
41037: LD_INT 1
41039: ARRAY
41040: GREATEREQUAL
41041: PUSH
41042: LD_VAR 0 3
41046: PPUSH
41047: LD_INT 2
41049: PPUSH
41050: CALL_OW 275
41054: PUSH
41055: LD_VAR 0 4
41059: PUSH
41060: LD_INT 2
41062: ARRAY
41063: GREATEREQUAL
41064: AND
41065: PUSH
41066: LD_VAR 0 3
41070: PPUSH
41071: LD_INT 3
41073: PPUSH
41074: CALL_OW 275
41078: PUSH
41079: LD_VAR 0 4
41083: PUSH
41084: LD_INT 3
41086: ARRAY
41087: GREATEREQUAL
41088: AND
41089: ST_TO_ADDR
// end ;
41090: LD_VAR 0 2
41094: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41095: LD_INT 0
41097: PPUSH
41098: PPUSH
41099: PPUSH
// pom := GetBase ( building ) ;
41100: LD_ADDR_VAR 0 4
41104: PUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: CALL_OW 274
41114: ST_TO_ADDR
// if not pom then
41115: LD_VAR 0 4
41119: NOT
41120: IFFALSE 41124
// exit ;
41122: GO 41225
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41124: LD_ADDR_VAR 0 5
41128: PUSH
41129: LD_VAR 0 2
41133: PPUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 248
41143: PPUSH
41144: CALL_OW 450
41148: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41149: LD_ADDR_VAR 0 3
41153: PUSH
41154: LD_VAR 0 4
41158: PPUSH
41159: LD_INT 1
41161: PPUSH
41162: CALL_OW 275
41166: PUSH
41167: LD_VAR 0 5
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: GREATEREQUAL
41176: PUSH
41177: LD_VAR 0 4
41181: PPUSH
41182: LD_INT 2
41184: PPUSH
41185: CALL_OW 275
41189: PUSH
41190: LD_VAR 0 5
41194: PUSH
41195: LD_INT 2
41197: ARRAY
41198: GREATEREQUAL
41199: AND
41200: PUSH
41201: LD_VAR 0 4
41205: PPUSH
41206: LD_INT 3
41208: PPUSH
41209: CALL_OW 275
41213: PUSH
41214: LD_VAR 0 5
41218: PUSH
41219: LD_INT 3
41221: ARRAY
41222: GREATEREQUAL
41223: AND
41224: ST_TO_ADDR
// end ;
41225: LD_VAR 0 3
41229: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41230: LD_INT 0
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
// result := false ;
41242: LD_ADDR_VAR 0 6
41246: PUSH
41247: LD_INT 0
41249: ST_TO_ADDR
// if not base or not btype or not x or not y then
41250: LD_VAR 0 1
41254: NOT
41255: PUSH
41256: LD_VAR 0 2
41260: NOT
41261: OR
41262: PUSH
41263: LD_VAR 0 3
41267: NOT
41268: OR
41269: PUSH
41270: LD_VAR 0 4
41274: NOT
41275: OR
41276: IFFALSE 41280
// exit ;
41278: GO 41889
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41280: LD_ADDR_VAR 0 12
41284: PUSH
41285: LD_VAR 0 2
41289: PPUSH
41290: LD_VAR 0 3
41294: PPUSH
41295: LD_VAR 0 4
41299: PPUSH
41300: LD_VAR 0 5
41304: PPUSH
41305: LD_VAR 0 1
41309: PUSH
41310: LD_INT 1
41312: ARRAY
41313: PPUSH
41314: CALL_OW 248
41318: PPUSH
41319: LD_INT 0
41321: PPUSH
41322: CALL 42726 0 6
41326: ST_TO_ADDR
// if not hexes then
41327: LD_VAR 0 12
41331: NOT
41332: IFFALSE 41336
// exit ;
41334: GO 41889
// for i = 1 to hexes do
41336: LD_ADDR_VAR 0 7
41340: PUSH
41341: DOUBLE
41342: LD_INT 1
41344: DEC
41345: ST_TO_ADDR
41346: LD_VAR 0 12
41350: PUSH
41351: FOR_TO
41352: IFFALSE 41887
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41354: LD_ADDR_VAR 0 11
41358: PUSH
41359: LD_VAR 0 12
41363: PUSH
41364: LD_VAR 0 7
41368: ARRAY
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PPUSH
41374: LD_VAR 0 12
41378: PUSH
41379: LD_VAR 0 7
41383: ARRAY
41384: PUSH
41385: LD_INT 2
41387: ARRAY
41388: PPUSH
41389: CALL_OW 428
41393: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41394: LD_VAR 0 12
41398: PUSH
41399: LD_VAR 0 7
41403: ARRAY
41404: PUSH
41405: LD_INT 1
41407: ARRAY
41408: PPUSH
41409: LD_VAR 0 12
41413: PUSH
41414: LD_VAR 0 7
41418: ARRAY
41419: PUSH
41420: LD_INT 2
41422: ARRAY
41423: PPUSH
41424: CALL_OW 351
41428: PUSH
41429: LD_VAR 0 12
41433: PUSH
41434: LD_VAR 0 7
41438: ARRAY
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PPUSH
41444: LD_VAR 0 12
41448: PUSH
41449: LD_VAR 0 7
41453: ARRAY
41454: PUSH
41455: LD_INT 2
41457: ARRAY
41458: PPUSH
41459: CALL_OW 488
41463: NOT
41464: OR
41465: PUSH
41466: LD_VAR 0 11
41470: PPUSH
41471: CALL_OW 247
41475: PUSH
41476: LD_INT 3
41478: EQUAL
41479: OR
41480: IFFALSE 41486
// exit ;
41482: POP
41483: POP
41484: GO 41889
// if not tmp or not tmp in base then
41486: LD_VAR 0 11
41490: NOT
41491: PUSH
41492: LD_VAR 0 11
41496: PUSH
41497: LD_VAR 0 1
41501: IN
41502: NOT
41503: OR
41504: IFFALSE 41508
// continue ;
41506: GO 41351
// result := true ;
41508: LD_ADDR_VAR 0 6
41512: PUSH
41513: LD_INT 1
41515: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41516: LD_ADDR_VAR 0 15
41520: PUSH
41521: LD_VAR 0 1
41525: PPUSH
41526: LD_INT 22
41528: PUSH
41529: LD_VAR 0 11
41533: PPUSH
41534: CALL_OW 255
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 30
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 30
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PPUSH
41575: CALL_OW 72
41579: ST_TO_ADDR
// if dep then
41580: LD_VAR 0 15
41584: IFFALSE 41720
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41586: LD_ADDR_VAR 0 14
41590: PUSH
41591: LD_VAR 0 15
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PPUSH
41600: CALL_OW 250
41604: PPUSH
41605: LD_VAR 0 15
41609: PUSH
41610: LD_INT 1
41612: ARRAY
41613: PPUSH
41614: CALL_OW 254
41618: PPUSH
41619: LD_INT 5
41621: PPUSH
41622: CALL_OW 272
41626: PUSH
41627: LD_VAR 0 15
41631: PUSH
41632: LD_INT 1
41634: ARRAY
41635: PPUSH
41636: CALL_OW 251
41640: PPUSH
41641: LD_VAR 0 15
41645: PUSH
41646: LD_INT 1
41648: ARRAY
41649: PPUSH
41650: CALL_OW 254
41654: PPUSH
41655: LD_INT 5
41657: PPUSH
41658: CALL_OW 273
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41667: LD_VAR 0 14
41671: PUSH
41672: LD_INT 1
41674: ARRAY
41675: PPUSH
41676: LD_VAR 0 14
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 488
41689: IFFALSE 41720
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41691: LD_VAR 0 11
41695: PPUSH
41696: LD_VAR 0 14
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PPUSH
41705: LD_VAR 0 14
41709: PUSH
41710: LD_INT 2
41712: ARRAY
41713: PPUSH
41714: CALL_OW 111
// continue ;
41718: GO 41351
// end ; end ; r := GetDir ( tmp ) ;
41720: LD_ADDR_VAR 0 13
41724: PUSH
41725: LD_VAR 0 11
41729: PPUSH
41730: CALL_OW 254
41734: ST_TO_ADDR
// if r = 5 then
41735: LD_VAR 0 13
41739: PUSH
41740: LD_INT 5
41742: EQUAL
41743: IFFALSE 41753
// r := 0 ;
41745: LD_ADDR_VAR 0 13
41749: PUSH
41750: LD_INT 0
41752: ST_TO_ADDR
// for j = r to 5 do
41753: LD_ADDR_VAR 0 8
41757: PUSH
41758: DOUBLE
41759: LD_VAR 0 13
41763: DEC
41764: ST_TO_ADDR
41765: LD_INT 5
41767: PUSH
41768: FOR_TO
41769: IFFALSE 41883
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41771: LD_ADDR_VAR 0 9
41775: PUSH
41776: LD_VAR 0 11
41780: PPUSH
41781: CALL_OW 250
41785: PPUSH
41786: LD_VAR 0 8
41790: PPUSH
41791: LD_INT 2
41793: PPUSH
41794: CALL_OW 272
41798: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41799: LD_ADDR_VAR 0 10
41803: PUSH
41804: LD_VAR 0 11
41808: PPUSH
41809: CALL_OW 251
41813: PPUSH
41814: LD_VAR 0 8
41818: PPUSH
41819: LD_INT 2
41821: PPUSH
41822: CALL_OW 273
41826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41827: LD_VAR 0 9
41831: PPUSH
41832: LD_VAR 0 10
41836: PPUSH
41837: CALL_OW 488
41841: PUSH
41842: LD_VAR 0 9
41846: PPUSH
41847: LD_VAR 0 10
41851: PPUSH
41852: CALL_OW 428
41856: NOT
41857: AND
41858: IFFALSE 41881
// begin ComMoveXY ( tmp , _x , _y ) ;
41860: LD_VAR 0 11
41864: PPUSH
41865: LD_VAR 0 9
41869: PPUSH
41870: LD_VAR 0 10
41874: PPUSH
41875: CALL_OW 111
// break ;
41879: GO 41883
// end ; end ;
41881: GO 41768
41883: POP
41884: POP
// end ;
41885: GO 41351
41887: POP
41888: POP
// end ;
41889: LD_VAR 0 6
41893: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41894: LD_INT 0
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
// result := false ;
41906: LD_ADDR_VAR 0 6
41910: PUSH
41911: LD_INT 0
41913: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41914: LD_VAR 0 1
41918: NOT
41919: PUSH
41920: LD_VAR 0 1
41924: PPUSH
41925: CALL_OW 266
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: IN
41940: NOT
41941: OR
41942: PUSH
41943: LD_VAR 0 2
41947: NOT
41948: OR
41949: PUSH
41950: LD_VAR 0 5
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 4
41969: PUSH
41970: LD_INT 5
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: IN
41981: NOT
41982: OR
41983: PUSH
41984: LD_VAR 0 3
41988: PPUSH
41989: LD_VAR 0 4
41993: PPUSH
41994: CALL_OW 488
41998: NOT
41999: OR
42000: IFFALSE 42004
// exit ;
42002: GO 42721
// pom := GetBase ( depot ) ;
42004: LD_ADDR_VAR 0 10
42008: PUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 274
42018: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42019: LD_ADDR_VAR 0 11
42023: PUSH
42024: LD_VAR 0 2
42028: PPUSH
42029: LD_VAR 0 1
42033: PPUSH
42034: CALL_OW 248
42038: PPUSH
42039: CALL_OW 450
42043: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42044: LD_VAR 0 10
42048: PPUSH
42049: LD_INT 1
42051: PPUSH
42052: CALL_OW 275
42056: PUSH
42057: LD_VAR 0 11
42061: PUSH
42062: LD_INT 1
42064: ARRAY
42065: GREATEREQUAL
42066: PUSH
42067: LD_VAR 0 10
42071: PPUSH
42072: LD_INT 2
42074: PPUSH
42075: CALL_OW 275
42079: PUSH
42080: LD_VAR 0 11
42084: PUSH
42085: LD_INT 2
42087: ARRAY
42088: GREATEREQUAL
42089: AND
42090: PUSH
42091: LD_VAR 0 10
42095: PPUSH
42096: LD_INT 3
42098: PPUSH
42099: CALL_OW 275
42103: PUSH
42104: LD_VAR 0 11
42108: PUSH
42109: LD_INT 3
42111: ARRAY
42112: GREATEREQUAL
42113: AND
42114: NOT
42115: IFFALSE 42119
// exit ;
42117: GO 42721
// if GetBType ( depot ) = b_depot then
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 266
42128: PUSH
42129: LD_INT 0
42131: EQUAL
42132: IFFALSE 42144
// dist := 28 else
42134: LD_ADDR_VAR 0 14
42138: PUSH
42139: LD_INT 28
42141: ST_TO_ADDR
42142: GO 42152
// dist := 36 ;
42144: LD_ADDR_VAR 0 14
42148: PUSH
42149: LD_INT 36
42151: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42152: LD_VAR 0 1
42156: PPUSH
42157: LD_VAR 0 3
42161: PPUSH
42162: LD_VAR 0 4
42166: PPUSH
42167: CALL_OW 297
42171: PUSH
42172: LD_VAR 0 14
42176: GREATER
42177: IFFALSE 42181
// exit ;
42179: GO 42721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42181: LD_ADDR_VAR 0 12
42185: PUSH
42186: LD_VAR 0 2
42190: PPUSH
42191: LD_VAR 0 3
42195: PPUSH
42196: LD_VAR 0 4
42200: PPUSH
42201: LD_VAR 0 5
42205: PPUSH
42206: LD_VAR 0 1
42210: PPUSH
42211: CALL_OW 248
42215: PPUSH
42216: LD_INT 0
42218: PPUSH
42219: CALL 42726 0 6
42223: ST_TO_ADDR
// if not hexes then
42224: LD_VAR 0 12
42228: NOT
42229: IFFALSE 42233
// exit ;
42231: GO 42721
// hex := GetHexInfo ( x , y ) ;
42233: LD_ADDR_VAR 0 15
42237: PUSH
42238: LD_VAR 0 3
42242: PPUSH
42243: LD_VAR 0 4
42247: PPUSH
42248: CALL_OW 546
42252: ST_TO_ADDR
// if hex [ 1 ] then
42253: LD_VAR 0 15
42257: PUSH
42258: LD_INT 1
42260: ARRAY
42261: IFFALSE 42265
// exit ;
42263: GO 42721
// height := hex [ 2 ] ;
42265: LD_ADDR_VAR 0 13
42269: PUSH
42270: LD_VAR 0 15
42274: PUSH
42275: LD_INT 2
42277: ARRAY
42278: ST_TO_ADDR
// for i = 1 to hexes do
42279: LD_ADDR_VAR 0 7
42283: PUSH
42284: DOUBLE
42285: LD_INT 1
42287: DEC
42288: ST_TO_ADDR
42289: LD_VAR 0 12
42293: PUSH
42294: FOR_TO
42295: IFFALSE 42625
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42297: LD_VAR 0 12
42301: PUSH
42302: LD_VAR 0 7
42306: ARRAY
42307: PUSH
42308: LD_INT 1
42310: ARRAY
42311: PPUSH
42312: LD_VAR 0 12
42316: PUSH
42317: LD_VAR 0 7
42321: ARRAY
42322: PUSH
42323: LD_INT 2
42325: ARRAY
42326: PPUSH
42327: CALL_OW 488
42331: NOT
42332: PUSH
42333: LD_VAR 0 12
42337: PUSH
42338: LD_VAR 0 7
42342: ARRAY
42343: PUSH
42344: LD_INT 1
42346: ARRAY
42347: PPUSH
42348: LD_VAR 0 12
42352: PUSH
42353: LD_VAR 0 7
42357: ARRAY
42358: PUSH
42359: LD_INT 2
42361: ARRAY
42362: PPUSH
42363: CALL_OW 428
42367: PUSH
42368: LD_INT 0
42370: GREATER
42371: OR
42372: PUSH
42373: LD_VAR 0 12
42377: PUSH
42378: LD_VAR 0 7
42382: ARRAY
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: PPUSH
42388: LD_VAR 0 12
42392: PUSH
42393: LD_VAR 0 7
42397: ARRAY
42398: PUSH
42399: LD_INT 2
42401: ARRAY
42402: PPUSH
42403: CALL_OW 351
42407: OR
42408: IFFALSE 42414
// exit ;
42410: POP
42411: POP
42412: GO 42721
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42414: LD_ADDR_VAR 0 8
42418: PUSH
42419: LD_VAR 0 12
42423: PUSH
42424: LD_VAR 0 7
42428: ARRAY
42429: PUSH
42430: LD_INT 1
42432: ARRAY
42433: PPUSH
42434: LD_VAR 0 12
42438: PUSH
42439: LD_VAR 0 7
42443: ARRAY
42444: PUSH
42445: LD_INT 2
42447: ARRAY
42448: PPUSH
42449: CALL_OW 546
42453: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42454: LD_VAR 0 8
42458: PUSH
42459: LD_INT 1
42461: ARRAY
42462: PUSH
42463: LD_VAR 0 8
42467: PUSH
42468: LD_INT 2
42470: ARRAY
42471: PUSH
42472: LD_VAR 0 13
42476: PUSH
42477: LD_INT 2
42479: PLUS
42480: GREATER
42481: OR
42482: PUSH
42483: LD_VAR 0 8
42487: PUSH
42488: LD_INT 2
42490: ARRAY
42491: PUSH
42492: LD_VAR 0 13
42496: PUSH
42497: LD_INT 2
42499: MINUS
42500: LESS
42501: OR
42502: PUSH
42503: LD_VAR 0 8
42507: PUSH
42508: LD_INT 3
42510: ARRAY
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 8
42517: PUSH
42518: LD_INT 9
42520: PUSH
42521: LD_INT 10
42523: PUSH
42524: LD_INT 11
42526: PUSH
42527: LD_INT 12
42529: PUSH
42530: LD_INT 13
42532: PUSH
42533: LD_INT 16
42535: PUSH
42536: LD_INT 17
42538: PUSH
42539: LD_INT 18
42541: PUSH
42542: LD_INT 19
42544: PUSH
42545: LD_INT 20
42547: PUSH
42548: LD_INT 21
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: IN
42566: NOT
42567: OR
42568: PUSH
42569: LD_VAR 0 8
42573: PUSH
42574: LD_INT 5
42576: ARRAY
42577: NOT
42578: OR
42579: PUSH
42580: LD_VAR 0 8
42584: PUSH
42585: LD_INT 6
42587: ARRAY
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: LD_INT 2
42594: PUSH
42595: LD_INT 7
42597: PUSH
42598: LD_INT 9
42600: PUSH
42601: LD_INT 10
42603: PUSH
42604: LD_INT 11
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: IN
42615: NOT
42616: OR
42617: IFFALSE 42623
// exit ;
42619: POP
42620: POP
42621: GO 42721
// end ;
42623: GO 42294
42625: POP
42626: POP
// side := GetSide ( depot ) ;
42627: LD_ADDR_VAR 0 9
42631: PUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: CALL_OW 255
42641: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42642: LD_VAR 0 9
42646: PPUSH
42647: LD_VAR 0 3
42651: PPUSH
42652: LD_VAR 0 4
42656: PPUSH
42657: LD_INT 20
42659: PPUSH
42660: CALL 35375 0 4
42664: PUSH
42665: LD_INT 4
42667: ARRAY
42668: IFFALSE 42672
// exit ;
42670: GO 42721
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42672: LD_VAR 0 2
42676: PUSH
42677: LD_INT 29
42679: PUSH
42680: LD_INT 30
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: IN
42687: PUSH
42688: LD_VAR 0 3
42692: PPUSH
42693: LD_VAR 0 4
42697: PPUSH
42698: LD_VAR 0 9
42702: PPUSH
42703: CALL_OW 440
42707: NOT
42708: AND
42709: IFFALSE 42713
// exit ;
42711: GO 42721
// result := true ;
42713: LD_ADDR_VAR 0 6
42717: PUSH
42718: LD_INT 1
42720: ST_TO_ADDR
// end ;
42721: LD_VAR 0 6
42725: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
42726: LD_INT 0
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
// result = [ ] ;
42786: LD_ADDR_VAR 0 7
42790: PUSH
42791: EMPTY
42792: ST_TO_ADDR
// temp_list = [ ] ;
42793: LD_ADDR_VAR 0 9
42797: PUSH
42798: EMPTY
42799: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42800: LD_VAR 0 4
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 1
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: LD_INT 4
42819: PUSH
42820: LD_INT 5
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: IN
42831: NOT
42832: PUSH
42833: LD_VAR 0 1
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: IN
42848: PUSH
42849: LD_VAR 0 5
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: LIST
42867: IN
42868: NOT
42869: AND
42870: OR
42871: IFFALSE 42875
// exit ;
42873: GO 61266
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42875: LD_VAR 0 1
42879: PUSH
42880: LD_INT 6
42882: PUSH
42883: LD_INT 7
42885: PUSH
42886: LD_INT 8
42888: PUSH
42889: LD_INT 13
42891: PUSH
42892: LD_INT 12
42894: PUSH
42895: LD_INT 15
42897: PUSH
42898: LD_INT 11
42900: PUSH
42901: LD_INT 14
42903: PUSH
42904: LD_INT 10
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: IN
42918: IFFALSE 42928
// btype = b_lab ;
42920: LD_ADDR_VAR 0 1
42924: PUSH
42925: LD_INT 6
42927: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42928: LD_VAR 0 6
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: IN
42947: NOT
42948: PUSH
42949: LD_VAR 0 1
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: LD_INT 3
42965: PUSH
42966: LD_INT 6
42968: PUSH
42969: LD_INT 36
42971: PUSH
42972: LD_INT 4
42974: PUSH
42975: LD_INT 5
42977: PUSH
42978: LD_INT 31
42980: PUSH
42981: LD_INT 32
42983: PUSH
42984: LD_INT 33
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: IN
43000: NOT
43001: PUSH
43002: LD_VAR 0 6
43006: PUSH
43007: LD_INT 1
43009: EQUAL
43010: AND
43011: OR
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 3
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: IN
43028: NOT
43029: PUSH
43030: LD_VAR 0 6
43034: PUSH
43035: LD_INT 2
43037: EQUAL
43038: AND
43039: OR
43040: IFFALSE 43050
// mode = 0 ;
43042: LD_ADDR_VAR 0 6
43046: PUSH
43047: LD_INT 0
43049: ST_TO_ADDR
// case mode of 0 :
43050: LD_VAR 0 6
43054: PUSH
43055: LD_INT 0
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 54516
43063: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43064: LD_ADDR_VAR 0 11
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43257: LD_ADDR_VAR 0 12
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 1
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43453: LD_ADDR_VAR 0 13
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 3
43612: NEG
43613: PUSH
43614: LD_INT 2
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43652: LD_ADDR_VAR 0 14
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43848: LD_ADDR_VAR 0 15
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 2
43971: NEG
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44041: LD_ADDR_VAR 0 16
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 3
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44234: LD_ADDR_VAR 0 17
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 0
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: NEG
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44464: LD_ADDR_VAR 0 18
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44694: LD_ADDR_VAR 0 19
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44924: LD_ADDR_VAR 0 20
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45154: LD_ADDR_VAR 0 21
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 1
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45384: LD_ADDR_VAR 0 22
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45614: LD_ADDR_VAR 0 23
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 3
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 3
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45894: LD_ADDR_VAR 0 24
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46170: LD_ADDR_VAR 0 25
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46444: LD_ADDR_VAR 0 26
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: LD_INT 3
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46720: LD_ADDR_VAR 0 27
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: NEG
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 2
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47000: LD_ADDR_VAR 0 28
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: LD_INT 0
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 2
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: LD_INT 2
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47282: LD_ADDR_VAR 0 29
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 2
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 3
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 3
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47561: LD_ADDR_VAR 0 30
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: LD_INT 1
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: NEG
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 2
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: LD_INT 2
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 3
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47839: LD_ADDR_VAR 0 31
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: LD_INT 1
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 1
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 2
48016: NEG
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48117: LD_ADDR_VAR 0 32
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 2
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: LD_INT 1
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 3
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48395: LD_ADDR_VAR 0 33
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 1
48415: NEG
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: LD_INT 0
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: NEG
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: LD_INT 3
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48674: LD_ADDR_VAR 0 34
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 1
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 3
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48954: LD_ADDR_VAR 0 35
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49066: LD_ADDR_VAR 0 36
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49178: LD_ADDR_VAR 0 37
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49290: LD_ADDR_VAR 0 38
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49402: LD_ADDR_VAR 0 39
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: LD_INT 1
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49514: LD_ADDR_VAR 0 40
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 1
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49626: LD_ADDR_VAR 0 41
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 2
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49976: LD_ADDR_VAR 0 42
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 2
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: LD_INT 3
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: LD_INT 2
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50326: LD_ADDR_VAR 0 43
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: LD_INT 2
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 2
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 3
50622: NEG
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 3
50633: NEG
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50674: LD_ADDR_VAR 0 44
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 2
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 3
50948: NEG
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51024: LD_ADDR_VAR 0 45
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 1
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 3
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 2
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 3
51333: NEG
51334: PUSH
51335: LD_INT 3
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51374: LD_ADDR_VAR 0 46
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 0
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 3
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 3
51578: NEG
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51722: LD_ADDR_VAR 0 47
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: NEG
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51873: LD_ADDR_VAR 0 48
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52020: LD_ADDR_VAR 0 49
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 0
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52164: LD_ADDR_VAR 0 50
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52308: LD_ADDR_VAR 0 51
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52455: LD_ADDR_VAR 0 52
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52606: LD_ADDR_VAR 0 53
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52836: LD_ADDR_VAR 0 54
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 2
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 55
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53296: LD_ADDR_VAR 0 56
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53526: LD_ADDR_VAR 0 57
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 2
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 0
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53756: LD_ADDR_VAR 0 58
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53986: LD_ADDR_VAR 0 59
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54074: LD_ADDR_VAR 0 60
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 0
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54162: LD_ADDR_VAR 0 61
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54250: LD_ADDR_VAR 0 62
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54338: LD_ADDR_VAR 0 63
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54426: LD_ADDR_VAR 0 64
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: LD_INT 1
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// end ; 1 :
54514: GO 60411
54516: LD_INT 1
54518: DOUBLE
54519: EQUAL
54520: IFTRUE 54524
54522: GO 57147
54524: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54525: LD_ADDR_VAR 0 11
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54569: LD_ADDR_VAR 0 12
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54610: LD_ADDR_VAR 0 13
54614: PUSH
54615: LD_INT 3
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 3
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54650: LD_ADDR_VAR 0 14
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: LD_INT 2
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54691: LD_ADDR_VAR 0 15
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54735: LD_ADDR_VAR 0 16
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 3
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 17
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 3
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54825: LD_ADDR_VAR 0 18
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54866: LD_ADDR_VAR 0 19
54870: PUSH
54871: LD_INT 3
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54906: LD_ADDR_VAR 0 20
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54947: LD_ADDR_VAR 0 21
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 3
54965: NEG
54966: PUSH
54967: LD_INT 0
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54991: LD_ADDR_VAR 0 22
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 3
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 3
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55037: LD_ADDR_VAR 0 23
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 3
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: PUSH
55068: LD_INT 3
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55081: LD_ADDR_VAR 0 24
55085: PUSH
55086: LD_INT 3
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 4
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55122: LD_ADDR_VAR 0 25
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 3
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 3
55149: PUSH
55150: LD_INT 4
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: LIST
55161: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55162: LD_ADDR_VAR 0 26
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: LD_INT 3
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 4
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55203: LD_ADDR_VAR 0 27
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: LD_INT 0
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55247: LD_ADDR_VAR 0 28
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: LD_INT 3
55258: NEG
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 3
55266: NEG
55267: PUSH
55268: LD_INT 4
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 4
55278: NEG
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55293: LD_ADDR_VAR 0 29
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 3
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: LD_INT 4
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 4
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: LD_INT 5
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 5
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 6
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 6
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 5
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55448: LD_ADDR_VAR 0 30
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 5
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 5
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 6
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 6
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55591: LD_ADDR_VAR 0 31
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 2
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: LD_INT 4
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 5
55668: PUSH
55669: LD_INT 5
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 4
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 6
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 6
55698: PUSH
55699: LD_INT 6
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 5
55708: PUSH
55709: LD_INT 6
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55730: LD_ADDR_VAR 0 32
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 3
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 5
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 4
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 6
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 6
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 5
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55873: LD_ADDR_VAR 0 33
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 3
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 4
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 4
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 4
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 5
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 5
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 6
55993: NEG
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 6
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56028: LD_ADDR_VAR 0 34
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: NEG
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: NEG
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: LD_INT 3
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 4
56095: NEG
56096: PUSH
56097: LD_INT 4
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 4
56107: NEG
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 5
56119: NEG
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 5
56143: NEG
56144: PUSH
56145: LD_INT 6
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 6
56155: NEG
56156: PUSH
56157: LD_INT 5
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 6
56167: NEG
56168: PUSH
56169: LD_INT 6
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56191: LD_ADDR_VAR 0 41
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56235: LD_ADDR_VAR 0 42
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 3
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56276: LD_ADDR_VAR 0 43
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 3
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: LD_INT 3
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56316: LD_ADDR_VAR 0 44
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 2
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 3
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56357: LD_ADDR_VAR 0 45
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 2
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 3
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56401: LD_ADDR_VAR 0 46
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: LD_INT 2
56412: NEG
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: NEG
56421: PUSH
56422: LD_INT 3
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56447: LD_ADDR_VAR 0 47
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 1
56466: NEG
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56480: LD_ADDR_VAR 0 48
56484: PUSH
56485: LD_INT 1
56487: PUSH
56488: LD_INT 2
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56511: LD_ADDR_VAR 0 49
56515: PUSH
56516: LD_INT 3
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56540: LD_ADDR_VAR 0 50
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56569: LD_ADDR_VAR 0 51
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 2
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56600: LD_ADDR_VAR 0 52
56604: PUSH
56605: LD_INT 3
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56633: LD_ADDR_VAR 0 53
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 3
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56677: LD_ADDR_VAR 0 54
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 3
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56718: LD_ADDR_VAR 0 55
56722: PUSH
56723: LD_INT 3
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: LD_INT 3
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 2
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56758: LD_ADDR_VAR 0 56
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56799: LD_ADDR_VAR 0 57
56803: PUSH
56804: LD_INT 2
56806: NEG
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56843: LD_ADDR_VAR 0 58
56847: PUSH
56848: LD_INT 2
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: LD_INT 2
56866: NEG
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: LD_INT 3
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56889: LD_ADDR_VAR 0 59
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 1
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56933: LD_ADDR_VAR 0 60
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 1
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56974: LD_ADDR_VAR 0 61
56978: PUSH
56979: LD_INT 2
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 2
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57014: LD_ADDR_VAR 0 62
57018: PUSH
57019: LD_INT 1
57021: PUSH
57022: LD_INT 2
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: LIST
57054: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57055: LD_ADDR_VAR 0 63
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57099: LD_ADDR_VAR 0 64
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// end ; 2 :
57145: GO 60411
57147: LD_INT 2
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57155
57153: GO 60410
57155: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57156: LD_ADDR_VAR 0 29
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 4
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 5
57184: PUSH
57185: LD_INT 0
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 5
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 3
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 4
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 4
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: LD_INT 4
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 4
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 5
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 4
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 3
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 4
57495: NEG
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: LD_INT 1
57510: NEG
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 4
57518: NEG
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: LD_INT 4
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 4
57553: NEG
57554: PUSH
57555: LD_INT 5
57557: NEG
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: LD_INT 4
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 4
57589: NEG
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 5
57601: NEG
57602: PUSH
57603: LD_INT 4
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: NEG
57614: PUSH
57615: LD_INT 5
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: NEG
57626: PUSH
57627: LD_INT 5
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 5
57637: NEG
57638: PUSH
57639: LD_INT 3
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57694: LD_ADDR_VAR 0 30
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: LD_INT 4
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 5
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 2
57863: PUSH
57864: LD_INT 4
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 4
57884: NEG
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 4
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: NEG
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 5
57940: NEG
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: NEG
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 5
57963: NEG
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: LD_INT 3
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: LD_INT 4
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: LD_INT 2
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 3
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 4
58046: NEG
58047: PUSH
58048: LD_INT 3
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: NEG
58059: PUSH
58060: LD_INT 4
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 4
58082: NEG
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: LD_INT 5
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 5
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: NEG
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58241: LD_ADDR_VAR 0 31
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 5
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 5
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 4
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: NEG
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: PUSH
58321: LD_INT 5
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 3
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 3
58386: NEG
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: NEG
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: NEG
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 4
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 4
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 4
58455: NEG
58456: PUSH
58457: LD_INT 5
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: NEG
58492: PUSH
58493: LD_INT 3
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PUSH
58505: LD_INT 4
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: LD_INT 5
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 5
58539: NEG
58540: PUSH
58541: LD_INT 3
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 3
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 4
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 3
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 4
58622: NEG
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 2
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: PUSH
58654: LD_INT 0
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 5
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: LD_INT 1
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 4
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 1
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: LD_INT 2
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 5
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58791: LD_ADDR_VAR 0 32
58795: PUSH
58796: LD_INT 4
58798: NEG
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 5
58854: NEG
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 5
58865: NEG
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 5
58877: NEG
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 3
58912: NEG
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: NEG
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 4
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 2
58984: NEG
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 4
58996: NEG
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 4
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 5
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 0
59052: PUSH
59053: LD_INT 3
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: LD_INT 4
59067: NEG
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 5
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 2
59098: NEG
59099: PUSH
59100: LD_INT 5
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: LD_INT 0
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 1
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 2
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 5
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 5
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 4
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: LD_INT 4
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 3
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59338: LD_ADDR_VAR 0 33
59342: PUSH
59343: LD_INT 4
59345: NEG
59346: PUSH
59347: LD_INT 4
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 4
59357: NEG
59358: PUSH
59359: LD_INT 5
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 4
59393: NEG
59394: PUSH
59395: LD_INT 3
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 5
59405: NEG
59406: PUSH
59407: LD_INT 4
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 5
59417: NEG
59418: PUSH
59419: LD_INT 5
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: LD_INT 5
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 5
59441: NEG
59442: PUSH
59443: LD_INT 3
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 3
59456: NEG
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 2
59543: NEG
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 4
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 5
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 5
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 4
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 3
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 5
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 3
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 2
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 4
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 4
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 3
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: LD_INT 4
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 5
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 5
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: NEG
59789: PUSH
59790: LD_INT 4
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: NEG
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 5
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: LD_INT 3
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59876: LD_ADDR_VAR 0 34
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 0
59894: PUSH
59895: LD_INT 5
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 4
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: LD_INT 3
59919: NEG
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: LD_INT 4
59942: NEG
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 1
59950: NEG
59951: PUSH
59952: LD_INT 5
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 3
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 2
59973: NEG
59974: PUSH
59975: LD_INT 5
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 4
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 5
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: LD_INT 5
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: LD_INT 5
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 4
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 3
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 5
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: LD_INT 5
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 3
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 4
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 4
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 4
60272: NEG
60273: PUSH
60274: LD_INT 1
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 4
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 5
60340: NEG
60341: PUSH
60342: LD_INT 2
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 3
60352: NEG
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// end ; end ;
60408: GO 60411
60410: POP
// case btype of b_depot , b_warehouse :
60411: LD_VAR 0 1
60415: PUSH
60416: LD_INT 0
60418: DOUBLE
60419: EQUAL
60420: IFTRUE 60430
60422: LD_INT 1
60424: DOUBLE
60425: EQUAL
60426: IFTRUE 60430
60428: GO 60631
60430: POP
// case nation of nation_american :
60431: LD_VAR 0 5
60435: PUSH
60436: LD_INT 1
60438: DOUBLE
60439: EQUAL
60440: IFTRUE 60444
60442: GO 60500
60444: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
60445: LD_ADDR_VAR 0 9
60449: PUSH
60450: LD_VAR 0 11
60454: PUSH
60455: LD_VAR 0 12
60459: PUSH
60460: LD_VAR 0 13
60464: PUSH
60465: LD_VAR 0 14
60469: PUSH
60470: LD_VAR 0 15
60474: PUSH
60475: LD_VAR 0 16
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: PUSH
60488: LD_VAR 0 4
60492: PUSH
60493: LD_INT 1
60495: PLUS
60496: ARRAY
60497: ST_TO_ADDR
60498: GO 60629
60500: LD_INT 2
60502: DOUBLE
60503: EQUAL
60504: IFTRUE 60508
60506: GO 60564
60508: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
60509: LD_ADDR_VAR 0 9
60513: PUSH
60514: LD_VAR 0 17
60518: PUSH
60519: LD_VAR 0 18
60523: PUSH
60524: LD_VAR 0 19
60528: PUSH
60529: LD_VAR 0 20
60533: PUSH
60534: LD_VAR 0 21
60538: PUSH
60539: LD_VAR 0 22
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: PUSH
60552: LD_VAR 0 4
60556: PUSH
60557: LD_INT 1
60559: PLUS
60560: ARRAY
60561: ST_TO_ADDR
60562: GO 60629
60564: LD_INT 3
60566: DOUBLE
60567: EQUAL
60568: IFTRUE 60572
60570: GO 60628
60572: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60573: LD_ADDR_VAR 0 9
60577: PUSH
60578: LD_VAR 0 23
60582: PUSH
60583: LD_VAR 0 24
60587: PUSH
60588: LD_VAR 0 25
60592: PUSH
60593: LD_VAR 0 26
60597: PUSH
60598: LD_VAR 0 27
60602: PUSH
60603: LD_VAR 0 28
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: PUSH
60616: LD_VAR 0 4
60620: PUSH
60621: LD_INT 1
60623: PLUS
60624: ARRAY
60625: ST_TO_ADDR
60626: GO 60629
60628: POP
60629: GO 61184
60631: LD_INT 2
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60645
60637: LD_INT 3
60639: DOUBLE
60640: EQUAL
60641: IFTRUE 60645
60643: GO 60701
60645: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60646: LD_ADDR_VAR 0 9
60650: PUSH
60651: LD_VAR 0 29
60655: PUSH
60656: LD_VAR 0 30
60660: PUSH
60661: LD_VAR 0 31
60665: PUSH
60666: LD_VAR 0 32
60670: PUSH
60671: LD_VAR 0 33
60675: PUSH
60676: LD_VAR 0 34
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: PUSH
60689: LD_VAR 0 4
60693: PUSH
60694: LD_INT 1
60696: PLUS
60697: ARRAY
60698: ST_TO_ADDR
60699: GO 61184
60701: LD_INT 16
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60763
60707: LD_INT 17
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60763
60713: LD_INT 18
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60763
60719: LD_INT 19
60721: DOUBLE
60722: EQUAL
60723: IFTRUE 60763
60725: LD_INT 22
60727: DOUBLE
60728: EQUAL
60729: IFTRUE 60763
60731: LD_INT 20
60733: DOUBLE
60734: EQUAL
60735: IFTRUE 60763
60737: LD_INT 21
60739: DOUBLE
60740: EQUAL
60741: IFTRUE 60763
60743: LD_INT 23
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60763
60749: LD_INT 24
60751: DOUBLE
60752: EQUAL
60753: IFTRUE 60763
60755: LD_INT 25
60757: DOUBLE
60758: EQUAL
60759: IFTRUE 60763
60761: GO 60819
60763: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60764: LD_ADDR_VAR 0 9
60768: PUSH
60769: LD_VAR 0 35
60773: PUSH
60774: LD_VAR 0 36
60778: PUSH
60779: LD_VAR 0 37
60783: PUSH
60784: LD_VAR 0 38
60788: PUSH
60789: LD_VAR 0 39
60793: PUSH
60794: LD_VAR 0 40
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 4
60811: PUSH
60812: LD_INT 1
60814: PLUS
60815: ARRAY
60816: ST_TO_ADDR
60817: GO 61184
60819: LD_INT 6
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60875
60825: LD_INT 7
60827: DOUBLE
60828: EQUAL
60829: IFTRUE 60875
60831: LD_INT 8
60833: DOUBLE
60834: EQUAL
60835: IFTRUE 60875
60837: LD_INT 13
60839: DOUBLE
60840: EQUAL
60841: IFTRUE 60875
60843: LD_INT 12
60845: DOUBLE
60846: EQUAL
60847: IFTRUE 60875
60849: LD_INT 15
60851: DOUBLE
60852: EQUAL
60853: IFTRUE 60875
60855: LD_INT 11
60857: DOUBLE
60858: EQUAL
60859: IFTRUE 60875
60861: LD_INT 14
60863: DOUBLE
60864: EQUAL
60865: IFTRUE 60875
60867: LD_INT 10
60869: DOUBLE
60870: EQUAL
60871: IFTRUE 60875
60873: GO 60931
60875: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
60876: LD_ADDR_VAR 0 9
60880: PUSH
60881: LD_VAR 0 41
60885: PUSH
60886: LD_VAR 0 42
60890: PUSH
60891: LD_VAR 0 43
60895: PUSH
60896: LD_VAR 0 44
60900: PUSH
60901: LD_VAR 0 45
60905: PUSH
60906: LD_VAR 0 46
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 4
60923: PUSH
60924: LD_INT 1
60926: PLUS
60927: ARRAY
60928: ST_TO_ADDR
60929: GO 61184
60931: LD_INT 36
60933: DOUBLE
60934: EQUAL
60935: IFTRUE 60939
60937: GO 60995
60939: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60940: LD_ADDR_VAR 0 9
60944: PUSH
60945: LD_VAR 0 47
60949: PUSH
60950: LD_VAR 0 48
60954: PUSH
60955: LD_VAR 0 49
60959: PUSH
60960: LD_VAR 0 50
60964: PUSH
60965: LD_VAR 0 51
60969: PUSH
60970: LD_VAR 0 52
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: LD_VAR 0 4
60987: PUSH
60988: LD_INT 1
60990: PLUS
60991: ARRAY
60992: ST_TO_ADDR
60993: GO 61184
60995: LD_INT 4
60997: DOUBLE
60998: EQUAL
60999: IFTRUE 61021
61001: LD_INT 5
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61021
61007: LD_INT 34
61009: DOUBLE
61010: EQUAL
61011: IFTRUE 61021
61013: LD_INT 37
61015: DOUBLE
61016: EQUAL
61017: IFTRUE 61021
61019: GO 61077
61021: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61022: LD_ADDR_VAR 0 9
61026: PUSH
61027: LD_VAR 0 53
61031: PUSH
61032: LD_VAR 0 54
61036: PUSH
61037: LD_VAR 0 55
61041: PUSH
61042: LD_VAR 0 56
61046: PUSH
61047: LD_VAR 0 57
61051: PUSH
61052: LD_VAR 0 58
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: PUSH
61065: LD_VAR 0 4
61069: PUSH
61070: LD_INT 1
61072: PLUS
61073: ARRAY
61074: ST_TO_ADDR
61075: GO 61184
61077: LD_INT 31
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61127
61083: LD_INT 32
61085: DOUBLE
61086: EQUAL
61087: IFTRUE 61127
61089: LD_INT 33
61091: DOUBLE
61092: EQUAL
61093: IFTRUE 61127
61095: LD_INT 27
61097: DOUBLE
61098: EQUAL
61099: IFTRUE 61127
61101: LD_INT 26
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61127
61107: LD_INT 28
61109: DOUBLE
61110: EQUAL
61111: IFTRUE 61127
61113: LD_INT 29
61115: DOUBLE
61116: EQUAL
61117: IFTRUE 61127
61119: LD_INT 30
61121: DOUBLE
61122: EQUAL
61123: IFTRUE 61127
61125: GO 61183
61127: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
61128: LD_ADDR_VAR 0 9
61132: PUSH
61133: LD_VAR 0 59
61137: PUSH
61138: LD_VAR 0 60
61142: PUSH
61143: LD_VAR 0 61
61147: PUSH
61148: LD_VAR 0 62
61152: PUSH
61153: LD_VAR 0 63
61157: PUSH
61158: LD_VAR 0 64
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: PUSH
61171: LD_VAR 0 4
61175: PUSH
61176: LD_INT 1
61178: PLUS
61179: ARRAY
61180: ST_TO_ADDR
61181: GO 61184
61183: POP
// temp_list2 = [ ] ;
61184: LD_ADDR_VAR 0 10
61188: PUSH
61189: EMPTY
61190: ST_TO_ADDR
// for i in temp_list do
61191: LD_ADDR_VAR 0 8
61195: PUSH
61196: LD_VAR 0 9
61200: PUSH
61201: FOR_IN
61202: IFFALSE 61254
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61204: LD_ADDR_VAR 0 10
61208: PUSH
61209: LD_VAR 0 10
61213: PUSH
61214: LD_VAR 0 8
61218: PUSH
61219: LD_INT 1
61221: ARRAY
61222: PUSH
61223: LD_VAR 0 2
61227: PLUS
61228: PUSH
61229: LD_VAR 0 8
61233: PUSH
61234: LD_INT 2
61236: ARRAY
61237: PUSH
61238: LD_VAR 0 3
61242: PLUS
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: EMPTY
61249: LIST
61250: ADD
61251: ST_TO_ADDR
61252: GO 61201
61254: POP
61255: POP
// result = temp_list2 ;
61256: LD_ADDR_VAR 0 7
61260: PUSH
61261: LD_VAR 0 10
61265: ST_TO_ADDR
// end ;
61266: LD_VAR 0 7
61270: RET
// export function EnemyInRange ( unit , dist ) ; begin
61271: LD_INT 0
61273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61274: LD_ADDR_VAR 0 3
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 255
61288: PPUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: CALL_OW 250
61298: PPUSH
61299: LD_VAR 0 1
61303: PPUSH
61304: CALL_OW 251
61308: PPUSH
61309: LD_VAR 0 2
61313: PPUSH
61314: CALL 35375 0 4
61318: PUSH
61319: LD_INT 4
61321: ARRAY
61322: ST_TO_ADDR
// end ;
61323: LD_VAR 0 3
61327: RET
// export function PlayerSeeMe ( unit ) ; begin
61328: LD_INT 0
61330: PPUSH
// result := See ( your_side , unit ) ;
61331: LD_ADDR_VAR 0 2
61335: PUSH
61336: LD_OWVAR 2
61340: PPUSH
61341: LD_VAR 0 1
61345: PPUSH
61346: CALL_OW 292
61350: ST_TO_ADDR
// end ;
61351: LD_VAR 0 2
61355: RET
// export function ReverseDir ( unit ) ; begin
61356: LD_INT 0
61358: PPUSH
// if not unit then
61359: LD_VAR 0 1
61363: NOT
61364: IFFALSE 61368
// exit ;
61366: GO 61391
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61368: LD_ADDR_VAR 0 2
61372: PUSH
61373: LD_VAR 0 1
61377: PPUSH
61378: CALL_OW 254
61382: PUSH
61383: LD_INT 3
61385: PLUS
61386: PUSH
61387: LD_INT 6
61389: MOD
61390: ST_TO_ADDR
// end ;
61391: LD_VAR 0 2
61395: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61396: LD_INT 0
61398: PPUSH
61399: PPUSH
61400: PPUSH
61401: PPUSH
61402: PPUSH
// if not hexes then
61403: LD_VAR 0 2
61407: NOT
61408: IFFALSE 61412
// exit ;
61410: GO 61560
// dist := 9999 ;
61412: LD_ADDR_VAR 0 5
61416: PUSH
61417: LD_INT 9999
61419: ST_TO_ADDR
// for i = 1 to hexes do
61420: LD_ADDR_VAR 0 4
61424: PUSH
61425: DOUBLE
61426: LD_INT 1
61428: DEC
61429: ST_TO_ADDR
61430: LD_VAR 0 2
61434: PUSH
61435: FOR_TO
61436: IFFALSE 61548
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61438: LD_VAR 0 1
61442: PPUSH
61443: LD_VAR 0 2
61447: PUSH
61448: LD_VAR 0 4
61452: ARRAY
61453: PUSH
61454: LD_INT 1
61456: ARRAY
61457: PPUSH
61458: LD_VAR 0 2
61462: PUSH
61463: LD_VAR 0 4
61467: ARRAY
61468: PUSH
61469: LD_INT 2
61471: ARRAY
61472: PPUSH
61473: CALL_OW 297
61477: PUSH
61478: LD_VAR 0 5
61482: LESS
61483: IFFALSE 61546
// begin hex := hexes [ i ] ;
61485: LD_ADDR_VAR 0 7
61489: PUSH
61490: LD_VAR 0 2
61494: PUSH
61495: LD_VAR 0 4
61499: ARRAY
61500: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61501: LD_ADDR_VAR 0 5
61505: PUSH
61506: LD_VAR 0 1
61510: PPUSH
61511: LD_VAR 0 2
61515: PUSH
61516: LD_VAR 0 4
61520: ARRAY
61521: PUSH
61522: LD_INT 1
61524: ARRAY
61525: PPUSH
61526: LD_VAR 0 2
61530: PUSH
61531: LD_VAR 0 4
61535: ARRAY
61536: PUSH
61537: LD_INT 2
61539: ARRAY
61540: PPUSH
61541: CALL_OW 297
61545: ST_TO_ADDR
// end ; end ;
61546: GO 61435
61548: POP
61549: POP
// result := hex ;
61550: LD_ADDR_VAR 0 3
61554: PUSH
61555: LD_VAR 0 7
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 3
61564: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61565: LD_INT 0
61567: PPUSH
61568: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61569: LD_VAR 0 1
61573: NOT
61574: PUSH
61575: LD_VAR 0 1
61579: PUSH
61580: LD_INT 21
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 23
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PPUSH
61604: CALL_OW 69
61608: IN
61609: NOT
61610: OR
61611: IFFALSE 61615
// exit ;
61613: GO 61662
// for i = 1 to 3 do
61615: LD_ADDR_VAR 0 3
61619: PUSH
61620: DOUBLE
61621: LD_INT 1
61623: DEC
61624: ST_TO_ADDR
61625: LD_INT 3
61627: PUSH
61628: FOR_TO
61629: IFFALSE 61660
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61631: LD_VAR 0 1
61635: PPUSH
61636: CALL_OW 250
61640: PPUSH
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 251
61650: PPUSH
61651: LD_INT 1
61653: PPUSH
61654: CALL_OW 453
61658: GO 61628
61660: POP
61661: POP
// end ;
61662: LD_VAR 0 2
61666: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61675: LD_VAR 0 1
61679: NOT
61680: PUSH
61681: LD_VAR 0 2
61685: NOT
61686: OR
61687: PUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL_OW 314
61697: OR
61698: IFFALSE 61702
// exit ;
61700: GO 62143
// x := GetX ( enemy_unit ) ;
61702: LD_ADDR_VAR 0 7
61706: PUSH
61707: LD_VAR 0 2
61711: PPUSH
61712: CALL_OW 250
61716: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61717: LD_ADDR_VAR 0 8
61721: PUSH
61722: LD_VAR 0 2
61726: PPUSH
61727: CALL_OW 251
61731: ST_TO_ADDR
// if not x or not y then
61732: LD_VAR 0 7
61736: NOT
61737: PUSH
61738: LD_VAR 0 8
61742: NOT
61743: OR
61744: IFFALSE 61748
// exit ;
61746: GO 62143
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61748: LD_ADDR_VAR 0 6
61752: PUSH
61753: LD_VAR 0 7
61757: PPUSH
61758: LD_INT 0
61760: PPUSH
61761: LD_INT 4
61763: PPUSH
61764: CALL_OW 272
61768: PUSH
61769: LD_VAR 0 8
61773: PPUSH
61774: LD_INT 0
61776: PPUSH
61777: LD_INT 4
61779: PPUSH
61780: CALL_OW 273
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_VAR 0 7
61793: PPUSH
61794: LD_INT 1
61796: PPUSH
61797: LD_INT 4
61799: PPUSH
61800: CALL_OW 272
61804: PUSH
61805: LD_VAR 0 8
61809: PPUSH
61810: LD_INT 1
61812: PPUSH
61813: LD_INT 4
61815: PPUSH
61816: CALL_OW 273
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_VAR 0 7
61829: PPUSH
61830: LD_INT 2
61832: PPUSH
61833: LD_INT 4
61835: PPUSH
61836: CALL_OW 272
61840: PUSH
61841: LD_VAR 0 8
61845: PPUSH
61846: LD_INT 2
61848: PPUSH
61849: LD_INT 4
61851: PPUSH
61852: CALL_OW 273
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_VAR 0 7
61865: PPUSH
61866: LD_INT 3
61868: PPUSH
61869: LD_INT 4
61871: PPUSH
61872: CALL_OW 272
61876: PUSH
61877: LD_VAR 0 8
61881: PPUSH
61882: LD_INT 3
61884: PPUSH
61885: LD_INT 4
61887: PPUSH
61888: CALL_OW 273
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_VAR 0 7
61901: PPUSH
61902: LD_INT 4
61904: PPUSH
61905: LD_INT 4
61907: PPUSH
61908: CALL_OW 272
61912: PUSH
61913: LD_VAR 0 8
61917: PPUSH
61918: LD_INT 4
61920: PPUSH
61921: LD_INT 4
61923: PPUSH
61924: CALL_OW 273
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_VAR 0 7
61937: PPUSH
61938: LD_INT 5
61940: PPUSH
61941: LD_INT 4
61943: PPUSH
61944: CALL_OW 272
61948: PUSH
61949: LD_VAR 0 8
61953: PPUSH
61954: LD_INT 5
61956: PPUSH
61957: LD_INT 4
61959: PPUSH
61960: CALL_OW 273
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: ST_TO_ADDR
// for i = tmp downto 1 do
61977: LD_ADDR_VAR 0 4
61981: PUSH
61982: DOUBLE
61983: LD_VAR 0 6
61987: INC
61988: ST_TO_ADDR
61989: LD_INT 1
61991: PUSH
61992: FOR_DOWNTO
61993: IFFALSE 62094
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61995: LD_VAR 0 6
61999: PUSH
62000: LD_VAR 0 4
62004: ARRAY
62005: PUSH
62006: LD_INT 1
62008: ARRAY
62009: PPUSH
62010: LD_VAR 0 6
62014: PUSH
62015: LD_VAR 0 4
62019: ARRAY
62020: PUSH
62021: LD_INT 2
62023: ARRAY
62024: PPUSH
62025: CALL_OW 488
62029: NOT
62030: PUSH
62031: LD_VAR 0 6
62035: PUSH
62036: LD_VAR 0 4
62040: ARRAY
62041: PUSH
62042: LD_INT 1
62044: ARRAY
62045: PPUSH
62046: LD_VAR 0 6
62050: PUSH
62051: LD_VAR 0 4
62055: ARRAY
62056: PUSH
62057: LD_INT 2
62059: ARRAY
62060: PPUSH
62061: CALL_OW 428
62065: PUSH
62066: LD_INT 0
62068: NONEQUAL
62069: OR
62070: IFFALSE 62092
// tmp := Delete ( tmp , i ) ;
62072: LD_ADDR_VAR 0 6
62076: PUSH
62077: LD_VAR 0 6
62081: PPUSH
62082: LD_VAR 0 4
62086: PPUSH
62087: CALL_OW 3
62091: ST_TO_ADDR
62092: GO 61992
62094: POP
62095: POP
// j := GetClosestHex ( unit , tmp ) ;
62096: LD_ADDR_VAR 0 5
62100: PUSH
62101: LD_VAR 0 1
62105: PPUSH
62106: LD_VAR 0 6
62110: PPUSH
62111: CALL 61396 0 2
62115: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_VAR 0 5
62125: PUSH
62126: LD_INT 1
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 5
62134: PUSH
62135: LD_INT 2
62137: ARRAY
62138: PPUSH
62139: CALL_OW 111
// end ;
62143: LD_VAR 0 3
62147: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62148: LD_INT 0
62150: PPUSH
62151: PPUSH
62152: PPUSH
// uc_side = 0 ;
62153: LD_ADDR_OWVAR 20
62157: PUSH
62158: LD_INT 0
62160: ST_TO_ADDR
// uc_nation = 0 ;
62161: LD_ADDR_OWVAR 21
62165: PUSH
62166: LD_INT 0
62168: ST_TO_ADDR
// InitHc ;
62169: CALL_OW 19
// InitVc ;
62173: CALL_OW 20
// if mastodonts then
62177: LD_VAR 0 6
62181: IFFALSE 62248
// for i = 1 to mastodonts do
62183: LD_ADDR_VAR 0 11
62187: PUSH
62188: DOUBLE
62189: LD_INT 1
62191: DEC
62192: ST_TO_ADDR
62193: LD_VAR 0 6
62197: PUSH
62198: FOR_TO
62199: IFFALSE 62246
// begin vc_chassis := 31 ;
62201: LD_ADDR_OWVAR 37
62205: PUSH
62206: LD_INT 31
62208: ST_TO_ADDR
// vc_control := control_rider ;
62209: LD_ADDR_OWVAR 38
62213: PUSH
62214: LD_INT 4
62216: ST_TO_ADDR
// animal := CreateVehicle ;
62217: LD_ADDR_VAR 0 12
62221: PUSH
62222: CALL_OW 45
62226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62227: LD_VAR 0 12
62231: PPUSH
62232: LD_VAR 0 8
62236: PPUSH
62237: LD_INT 0
62239: PPUSH
62240: CALL 64317 0 3
// end ;
62244: GO 62198
62246: POP
62247: POP
// if horses then
62248: LD_VAR 0 5
62252: IFFALSE 62319
// for i = 1 to horses do
62254: LD_ADDR_VAR 0 11
62258: PUSH
62259: DOUBLE
62260: LD_INT 1
62262: DEC
62263: ST_TO_ADDR
62264: LD_VAR 0 5
62268: PUSH
62269: FOR_TO
62270: IFFALSE 62317
// begin hc_class := 21 ;
62272: LD_ADDR_OWVAR 28
62276: PUSH
62277: LD_INT 21
62279: ST_TO_ADDR
// hc_gallery :=  ;
62280: LD_ADDR_OWVAR 33
62284: PUSH
62285: LD_STRING 
62287: ST_TO_ADDR
// animal := CreateHuman ;
62288: LD_ADDR_VAR 0 12
62292: PUSH
62293: CALL_OW 44
62297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62298: LD_VAR 0 12
62302: PPUSH
62303: LD_VAR 0 8
62307: PPUSH
62308: LD_INT 0
62310: PPUSH
62311: CALL 64317 0 3
// end ;
62315: GO 62269
62317: POP
62318: POP
// if birds then
62319: LD_VAR 0 1
62323: IFFALSE 62390
// for i = 1 to birds do
62325: LD_ADDR_VAR 0 11
62329: PUSH
62330: DOUBLE
62331: LD_INT 1
62333: DEC
62334: ST_TO_ADDR
62335: LD_VAR 0 1
62339: PUSH
62340: FOR_TO
62341: IFFALSE 62388
// begin hc_class = 18 ;
62343: LD_ADDR_OWVAR 28
62347: PUSH
62348: LD_INT 18
62350: ST_TO_ADDR
// hc_gallery =  ;
62351: LD_ADDR_OWVAR 33
62355: PUSH
62356: LD_STRING 
62358: ST_TO_ADDR
// animal := CreateHuman ;
62359: LD_ADDR_VAR 0 12
62363: PUSH
62364: CALL_OW 44
62368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62369: LD_VAR 0 12
62373: PPUSH
62374: LD_VAR 0 8
62378: PPUSH
62379: LD_INT 0
62381: PPUSH
62382: CALL 64317 0 3
// end ;
62386: GO 62340
62388: POP
62389: POP
// if tigers then
62390: LD_VAR 0 2
62394: IFFALSE 62478
// for i = 1 to tigers do
62396: LD_ADDR_VAR 0 11
62400: PUSH
62401: DOUBLE
62402: LD_INT 1
62404: DEC
62405: ST_TO_ADDR
62406: LD_VAR 0 2
62410: PUSH
62411: FOR_TO
62412: IFFALSE 62476
// begin hc_class = class_tiger ;
62414: LD_ADDR_OWVAR 28
62418: PUSH
62419: LD_INT 14
62421: ST_TO_ADDR
// hc_gallery =  ;
62422: LD_ADDR_OWVAR 33
62426: PUSH
62427: LD_STRING 
62429: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62430: LD_ADDR_OWVAR 35
62434: PUSH
62435: LD_INT 7
62437: NEG
62438: PPUSH
62439: LD_INT 7
62441: PPUSH
62442: CALL_OW 12
62446: ST_TO_ADDR
// animal := CreateHuman ;
62447: LD_ADDR_VAR 0 12
62451: PUSH
62452: CALL_OW 44
62456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62457: LD_VAR 0 12
62461: PPUSH
62462: LD_VAR 0 8
62466: PPUSH
62467: LD_INT 0
62469: PPUSH
62470: CALL 64317 0 3
// end ;
62474: GO 62411
62476: POP
62477: POP
// if apemans then
62478: LD_VAR 0 3
62482: IFFALSE 62605
// for i = 1 to apemans do
62484: LD_ADDR_VAR 0 11
62488: PUSH
62489: DOUBLE
62490: LD_INT 1
62492: DEC
62493: ST_TO_ADDR
62494: LD_VAR 0 3
62498: PUSH
62499: FOR_TO
62500: IFFALSE 62603
// begin hc_class = class_apeman ;
62502: LD_ADDR_OWVAR 28
62506: PUSH
62507: LD_INT 12
62509: ST_TO_ADDR
// hc_gallery =  ;
62510: LD_ADDR_OWVAR 33
62514: PUSH
62515: LD_STRING 
62517: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62518: LD_ADDR_OWVAR 35
62522: PUSH
62523: LD_INT 5
62525: NEG
62526: PPUSH
62527: LD_INT 5
62529: PPUSH
62530: CALL_OW 12
62534: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62535: LD_ADDR_OWVAR 31
62539: PUSH
62540: LD_INT 1
62542: PPUSH
62543: LD_INT 3
62545: PPUSH
62546: CALL_OW 12
62550: PUSH
62551: LD_INT 1
62553: PPUSH
62554: LD_INT 3
62556: PPUSH
62557: CALL_OW 12
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: ST_TO_ADDR
// animal := CreateHuman ;
62574: LD_ADDR_VAR 0 12
62578: PUSH
62579: CALL_OW 44
62583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62584: LD_VAR 0 12
62588: PPUSH
62589: LD_VAR 0 8
62593: PPUSH
62594: LD_INT 0
62596: PPUSH
62597: CALL 64317 0 3
// end ;
62601: GO 62499
62603: POP
62604: POP
// if enchidnas then
62605: LD_VAR 0 4
62609: IFFALSE 62676
// for i = 1 to enchidnas do
62611: LD_ADDR_VAR 0 11
62615: PUSH
62616: DOUBLE
62617: LD_INT 1
62619: DEC
62620: ST_TO_ADDR
62621: LD_VAR 0 4
62625: PUSH
62626: FOR_TO
62627: IFFALSE 62674
// begin hc_class = 13 ;
62629: LD_ADDR_OWVAR 28
62633: PUSH
62634: LD_INT 13
62636: ST_TO_ADDR
// hc_gallery =  ;
62637: LD_ADDR_OWVAR 33
62641: PUSH
62642: LD_STRING 
62644: ST_TO_ADDR
// animal := CreateHuman ;
62645: LD_ADDR_VAR 0 12
62649: PUSH
62650: CALL_OW 44
62654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62655: LD_VAR 0 12
62659: PPUSH
62660: LD_VAR 0 8
62664: PPUSH
62665: LD_INT 0
62667: PPUSH
62668: CALL 64317 0 3
// end ;
62672: GO 62626
62674: POP
62675: POP
// if fishes then
62676: LD_VAR 0 7
62680: IFFALSE 62747
// for i = 1 to fishes do
62682: LD_ADDR_VAR 0 11
62686: PUSH
62687: DOUBLE
62688: LD_INT 1
62690: DEC
62691: ST_TO_ADDR
62692: LD_VAR 0 7
62696: PUSH
62697: FOR_TO
62698: IFFALSE 62745
// begin hc_class = 20 ;
62700: LD_ADDR_OWVAR 28
62704: PUSH
62705: LD_INT 20
62707: ST_TO_ADDR
// hc_gallery =  ;
62708: LD_ADDR_OWVAR 33
62712: PUSH
62713: LD_STRING 
62715: ST_TO_ADDR
// animal := CreateHuman ;
62716: LD_ADDR_VAR 0 12
62720: PUSH
62721: CALL_OW 44
62725: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62726: LD_VAR 0 12
62730: PPUSH
62731: LD_VAR 0 9
62735: PPUSH
62736: LD_INT 0
62738: PPUSH
62739: CALL 64317 0 3
// end ;
62743: GO 62697
62745: POP
62746: POP
// end ;
62747: LD_VAR 0 10
62751: RET
// export function WantHeal ( sci , unit ) ; begin
62752: LD_INT 0
62754: PPUSH
// if GetTaskList ( sci ) > 0 then
62755: LD_VAR 0 1
62759: PPUSH
62760: CALL_OW 437
62764: PUSH
62765: LD_INT 0
62767: GREATER
62768: IFFALSE 62838
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62770: LD_VAR 0 1
62774: PPUSH
62775: CALL_OW 437
62779: PUSH
62780: LD_INT 1
62782: ARRAY
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PUSH
62788: LD_STRING l
62790: EQUAL
62791: PUSH
62792: LD_VAR 0 1
62796: PPUSH
62797: CALL_OW 437
62801: PUSH
62802: LD_INT 1
62804: ARRAY
62805: PUSH
62806: LD_INT 4
62808: ARRAY
62809: PUSH
62810: LD_VAR 0 2
62814: EQUAL
62815: AND
62816: IFFALSE 62828
// result := true else
62818: LD_ADDR_VAR 0 3
62822: PUSH
62823: LD_INT 1
62825: ST_TO_ADDR
62826: GO 62836
// result := false ;
62828: LD_ADDR_VAR 0 3
62832: PUSH
62833: LD_INT 0
62835: ST_TO_ADDR
// end else
62836: GO 62846
// result := false ;
62838: LD_ADDR_VAR 0 3
62842: PUSH
62843: LD_INT 0
62845: ST_TO_ADDR
// end ;
62846: LD_VAR 0 3
62850: RET
// export function HealTarget ( sci ) ; begin
62851: LD_INT 0
62853: PPUSH
// if not sci then
62854: LD_VAR 0 1
62858: NOT
62859: IFFALSE 62863
// exit ;
62861: GO 62928
// result := 0 ;
62863: LD_ADDR_VAR 0 2
62867: PUSH
62868: LD_INT 0
62870: ST_TO_ADDR
// if GetTaskList ( sci ) then
62871: LD_VAR 0 1
62875: PPUSH
62876: CALL_OW 437
62880: IFFALSE 62928
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62882: LD_VAR 0 1
62886: PPUSH
62887: CALL_OW 437
62891: PUSH
62892: LD_INT 1
62894: ARRAY
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PUSH
62900: LD_STRING l
62902: EQUAL
62903: IFFALSE 62928
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62905: LD_ADDR_VAR 0 2
62909: PUSH
62910: LD_VAR 0 1
62914: PPUSH
62915: CALL_OW 437
62919: PUSH
62920: LD_INT 1
62922: ARRAY
62923: PUSH
62924: LD_INT 4
62926: ARRAY
62927: ST_TO_ADDR
// end ;
62928: LD_VAR 0 2
62932: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62933: LD_INT 0
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
// if not base_units then
62939: LD_VAR 0 1
62943: NOT
62944: IFFALSE 62948
// exit ;
62946: GO 63035
// result := false ;
62948: LD_ADDR_VAR 0 2
62952: PUSH
62953: LD_INT 0
62955: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62956: LD_ADDR_VAR 0 5
62960: PUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_INT 21
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PPUSH
62976: CALL_OW 72
62980: ST_TO_ADDR
// if not tmp then
62981: LD_VAR 0 5
62985: NOT
62986: IFFALSE 62990
// exit ;
62988: GO 63035
// for i in tmp do
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_VAR 0 5
62999: PUSH
63000: FOR_IN
63001: IFFALSE 63033
// begin result := EnemyInRange ( i , 22 ) ;
63003: LD_ADDR_VAR 0 2
63007: PUSH
63008: LD_VAR 0 3
63012: PPUSH
63013: LD_INT 22
63015: PPUSH
63016: CALL 61271 0 2
63020: ST_TO_ADDR
// if result then
63021: LD_VAR 0 2
63025: IFFALSE 63031
// exit ;
63027: POP
63028: POP
63029: GO 63035
// end ;
63031: GO 63000
63033: POP
63034: POP
// end ;
63035: LD_VAR 0 2
63039: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63040: LD_INT 0
63042: PPUSH
63043: PPUSH
// if not units then
63044: LD_VAR 0 1
63048: NOT
63049: IFFALSE 63053
// exit ;
63051: GO 63123
// result := [ ] ;
63053: LD_ADDR_VAR 0 3
63057: PUSH
63058: EMPTY
63059: ST_TO_ADDR
// for i in units do
63060: LD_ADDR_VAR 0 4
63064: PUSH
63065: LD_VAR 0 1
63069: PUSH
63070: FOR_IN
63071: IFFALSE 63121
// if GetTag ( i ) = tag then
63073: LD_VAR 0 4
63077: PPUSH
63078: CALL_OW 110
63082: PUSH
63083: LD_VAR 0 2
63087: EQUAL
63088: IFFALSE 63119
// result := Insert ( result , result + 1 , i ) ;
63090: LD_ADDR_VAR 0 3
63094: PUSH
63095: LD_VAR 0 3
63099: PPUSH
63100: LD_VAR 0 3
63104: PUSH
63105: LD_INT 1
63107: PLUS
63108: PPUSH
63109: LD_VAR 0 4
63113: PPUSH
63114: CALL_OW 2
63118: ST_TO_ADDR
63119: GO 63070
63121: POP
63122: POP
// end ;
63123: LD_VAR 0 3
63127: RET
// export function IsDriver ( un ) ; begin
63128: LD_INT 0
63130: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63131: LD_ADDR_VAR 0 2
63135: PUSH
63136: LD_VAR 0 1
63140: PUSH
63141: LD_INT 55
63143: PUSH
63144: EMPTY
63145: LIST
63146: PPUSH
63147: CALL_OW 69
63151: IN
63152: ST_TO_ADDR
// end ;
63153: LD_VAR 0 2
63157: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63158: LD_INT 0
63160: PPUSH
63161: PPUSH
// list := [ ] ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: EMPTY
63168: ST_TO_ADDR
// case d of 0 :
63169: LD_VAR 0 3
63173: PUSH
63174: LD_INT 0
63176: DOUBLE
63177: EQUAL
63178: IFTRUE 63182
63180: GO 63315
63182: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63183: LD_ADDR_VAR 0 5
63187: PUSH
63188: LD_VAR 0 1
63192: PUSH
63193: LD_INT 4
63195: MINUS
63196: PUSH
63197: LD_VAR 0 2
63201: PUSH
63202: LD_INT 4
63204: MINUS
63205: PUSH
63206: LD_INT 2
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: LIST
63213: PUSH
63214: LD_VAR 0 1
63218: PUSH
63219: LD_INT 3
63221: MINUS
63222: PUSH
63223: LD_VAR 0 2
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: PUSH
63236: LD_VAR 0 1
63240: PUSH
63241: LD_INT 4
63243: PLUS
63244: PUSH
63245: LD_VAR 0 2
63249: PUSH
63250: LD_INT 4
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: PUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 3
63265: PLUS
63266: PUSH
63267: LD_VAR 0 2
63271: PUSH
63272: LD_INT 3
63274: PLUS
63275: PUSH
63276: LD_INT 5
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 1
63288: PUSH
63289: LD_VAR 0 2
63293: PUSH
63294: LD_INT 4
63296: PLUS
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: LIST
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// end ; 1 :
63313: GO 64013
63315: LD_INT 1
63317: DOUBLE
63318: EQUAL
63319: IFTRUE 63323
63321: GO 63456
63323: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63324: LD_ADDR_VAR 0 5
63328: PUSH
63329: LD_VAR 0 1
63333: PUSH
63334: LD_VAR 0 2
63338: PUSH
63339: LD_INT 4
63341: MINUS
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: LIST
63350: PUSH
63351: LD_VAR 0 1
63355: PUSH
63356: LD_INT 3
63358: MINUS
63359: PUSH
63360: LD_VAR 0 2
63364: PUSH
63365: LD_INT 3
63367: MINUS
63368: PUSH
63369: LD_INT 2
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: PUSH
63377: LD_VAR 0 1
63381: PUSH
63382: LD_INT 4
63384: MINUS
63385: PUSH
63386: LD_VAR 0 2
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: PUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_VAR 0 2
63408: PUSH
63409: LD_INT 3
63411: PLUS
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: PUSH
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 4
63428: PLUS
63429: PUSH
63430: LD_VAR 0 2
63434: PUSH
63435: LD_INT 4
63437: PLUS
63438: PUSH
63439: LD_INT 5
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: ST_TO_ADDR
// end ; 2 :
63454: GO 64013
63456: LD_INT 2
63458: DOUBLE
63459: EQUAL
63460: IFTRUE 63464
63462: GO 63593
63464: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63465: LD_ADDR_VAR 0 5
63469: PUSH
63470: LD_VAR 0 1
63474: PUSH
63475: LD_VAR 0 2
63479: PUSH
63480: LD_INT 3
63482: MINUS
63483: PUSH
63484: LD_INT 3
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: LIST
63491: PUSH
63492: LD_VAR 0 1
63496: PUSH
63497: LD_INT 4
63499: PLUS
63500: PUSH
63501: LD_VAR 0 2
63505: PUSH
63506: LD_INT 4
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: LIST
63513: PUSH
63514: LD_VAR 0 1
63518: PUSH
63519: LD_VAR 0 2
63523: PUSH
63524: LD_INT 4
63526: PLUS
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: PUSH
63536: LD_VAR 0 1
63540: PUSH
63541: LD_INT 3
63543: MINUS
63544: PUSH
63545: LD_VAR 0 2
63549: PUSH
63550: LD_INT 1
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: LIST
63557: PUSH
63558: LD_VAR 0 1
63562: PUSH
63563: LD_INT 4
63565: MINUS
63566: PUSH
63567: LD_VAR 0 2
63571: PUSH
63572: LD_INT 4
63574: MINUS
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: ST_TO_ADDR
// end ; 3 :
63591: GO 64013
63593: LD_INT 3
63595: DOUBLE
63596: EQUAL
63597: IFTRUE 63601
63599: GO 63734
63601: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63602: LD_ADDR_VAR 0 5
63606: PUSH
63607: LD_VAR 0 1
63611: PUSH
63612: LD_INT 3
63614: PLUS
63615: PUSH
63616: LD_VAR 0 2
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: PUSH
63629: LD_VAR 0 1
63633: PUSH
63634: LD_INT 4
63636: PLUS
63637: PUSH
63638: LD_VAR 0 2
63642: PUSH
63643: LD_INT 4
63645: PLUS
63646: PUSH
63647: LD_INT 5
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: LIST
63654: PUSH
63655: LD_VAR 0 1
63659: PUSH
63660: LD_INT 4
63662: MINUS
63663: PUSH
63664: LD_VAR 0 2
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: LIST
63676: PUSH
63677: LD_VAR 0 1
63681: PUSH
63682: LD_VAR 0 2
63686: PUSH
63687: LD_INT 4
63689: MINUS
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: LD_VAR 0 1
63703: PUSH
63704: LD_INT 3
63706: MINUS
63707: PUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_INT 3
63715: MINUS
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: ST_TO_ADDR
// end ; 4 :
63732: GO 64013
63734: LD_INT 4
63736: DOUBLE
63737: EQUAL
63738: IFTRUE 63742
63740: GO 63875
63742: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63743: LD_ADDR_VAR 0 5
63747: PUSH
63748: LD_VAR 0 1
63752: PUSH
63753: LD_VAR 0 2
63757: PUSH
63758: LD_INT 4
63760: PLUS
63761: PUSH
63762: LD_INT 0
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: LIST
63769: PUSH
63770: LD_VAR 0 1
63774: PUSH
63775: LD_INT 3
63777: PLUS
63778: PUSH
63779: LD_VAR 0 2
63783: PUSH
63784: LD_INT 3
63786: PLUS
63787: PUSH
63788: LD_INT 5
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: LD_VAR 0 1
63800: PUSH
63801: LD_INT 4
63803: PLUS
63804: PUSH
63805: LD_VAR 0 2
63809: PUSH
63810: LD_INT 4
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: LIST
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: LD_INT 3
63830: MINUS
63831: PUSH
63832: LD_INT 3
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: PUSH
63840: LD_VAR 0 1
63844: PUSH
63845: LD_INT 4
63847: MINUS
63848: PUSH
63849: LD_VAR 0 2
63853: PUSH
63854: LD_INT 4
63856: MINUS
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: ST_TO_ADDR
// end ; 5 :
63873: GO 64013
63875: LD_INT 5
63877: DOUBLE
63878: EQUAL
63879: IFTRUE 63883
63881: GO 64012
63883: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63884: LD_ADDR_VAR 0 5
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 4
63896: MINUS
63897: PUSH
63898: LD_VAR 0 2
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_INT 4
63923: MINUS
63924: PUSH
63925: LD_INT 3
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: PUSH
63933: LD_VAR 0 1
63937: PUSH
63938: LD_INT 4
63940: PLUS
63941: PUSH
63942: LD_VAR 0 2
63946: PUSH
63947: LD_INT 4
63949: PLUS
63950: PUSH
63951: LD_INT 5
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: LD_INT 3
63966: PLUS
63967: PUSH
63968: LD_VAR 0 2
63972: PUSH
63973: LD_INT 4
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: LIST
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_VAR 0 2
63990: PUSH
63991: LD_INT 3
63993: PLUS
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: ST_TO_ADDR
// end ; end ;
64010: GO 64013
64012: POP
// result := list ;
64013: LD_ADDR_VAR 0 4
64017: PUSH
64018: LD_VAR 0 5
64022: ST_TO_ADDR
// end ;
64023: LD_VAR 0 4
64027: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64028: LD_INT 0
64030: PPUSH
64031: PPUSH
64032: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64033: LD_VAR 0 1
64037: NOT
64038: PUSH
64039: LD_VAR 0 2
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: LD_INT 2
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: LD_INT 4
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: IN
64062: NOT
64063: OR
64064: IFFALSE 64068
// exit ;
64066: GO 64160
// tmp := [ ] ;
64068: LD_ADDR_VAR 0 5
64072: PUSH
64073: EMPTY
64074: ST_TO_ADDR
// for i in units do
64075: LD_ADDR_VAR 0 4
64079: PUSH
64080: LD_VAR 0 1
64084: PUSH
64085: FOR_IN
64086: IFFALSE 64129
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64088: LD_ADDR_VAR 0 5
64092: PUSH
64093: LD_VAR 0 5
64097: PPUSH
64098: LD_VAR 0 5
64102: PUSH
64103: LD_INT 1
64105: PLUS
64106: PPUSH
64107: LD_VAR 0 4
64111: PPUSH
64112: LD_VAR 0 2
64116: PPUSH
64117: CALL_OW 259
64121: PPUSH
64122: CALL_OW 2
64126: ST_TO_ADDR
64127: GO 64085
64129: POP
64130: POP
// if not tmp then
64131: LD_VAR 0 5
64135: NOT
64136: IFFALSE 64140
// exit ;
64138: GO 64160
// result := SortListByListDesc ( units , tmp ) ;
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_VAR 0 5
64154: PPUSH
64155: CALL_OW 77
64159: ST_TO_ADDR
// end ;
64160: LD_VAR 0 3
64164: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64165: LD_INT 0
64167: PPUSH
64168: PPUSH
64169: PPUSH
// x := GetX ( building ) ;
64170: LD_ADDR_VAR 0 4
64174: PUSH
64175: LD_VAR 0 2
64179: PPUSH
64180: CALL_OW 250
64184: ST_TO_ADDR
// y := GetY ( building ) ;
64185: LD_ADDR_VAR 0 5
64189: PUSH
64190: LD_VAR 0 2
64194: PPUSH
64195: CALL_OW 251
64199: ST_TO_ADDR
// if GetTaskList ( unit ) then
64200: LD_VAR 0 1
64204: PPUSH
64205: CALL_OW 437
64209: IFFALSE 64304
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64211: LD_STRING e
64213: PUSH
64214: LD_VAR 0 1
64218: PPUSH
64219: CALL_OW 437
64223: PUSH
64224: LD_INT 1
64226: ARRAY
64227: PUSH
64228: LD_INT 1
64230: ARRAY
64231: EQUAL
64232: PUSH
64233: LD_VAR 0 4
64237: PUSH
64238: LD_VAR 0 1
64242: PPUSH
64243: CALL_OW 437
64247: PUSH
64248: LD_INT 1
64250: ARRAY
64251: PUSH
64252: LD_INT 2
64254: ARRAY
64255: EQUAL
64256: AND
64257: PUSH
64258: LD_VAR 0 5
64262: PUSH
64263: LD_VAR 0 1
64267: PPUSH
64268: CALL_OW 437
64272: PUSH
64273: LD_INT 1
64275: ARRAY
64276: PUSH
64277: LD_INT 3
64279: ARRAY
64280: EQUAL
64281: AND
64282: IFFALSE 64294
// result := true else
64284: LD_ADDR_VAR 0 3
64288: PUSH
64289: LD_INT 1
64291: ST_TO_ADDR
64292: GO 64302
// result := false ;
64294: LD_ADDR_VAR 0 3
64298: PUSH
64299: LD_INT 0
64301: ST_TO_ADDR
// end else
64302: GO 64312
// result := false ;
64304: LD_ADDR_VAR 0 3
64308: PUSH
64309: LD_INT 0
64311: ST_TO_ADDR
// end ;
64312: LD_VAR 0 3
64316: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64317: LD_INT 0
64319: PPUSH
64320: PPUSH
64321: PPUSH
64322: PPUSH
// if not unit or not area then
64323: LD_VAR 0 1
64327: NOT
64328: PUSH
64329: LD_VAR 0 2
64333: NOT
64334: OR
64335: IFFALSE 64339
// exit ;
64337: GO 64503
// tmp := AreaToList ( area , i ) ;
64339: LD_ADDR_VAR 0 6
64343: PUSH
64344: LD_VAR 0 2
64348: PPUSH
64349: LD_VAR 0 5
64353: PPUSH
64354: CALL_OW 517
64358: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64359: LD_ADDR_VAR 0 5
64363: PUSH
64364: DOUBLE
64365: LD_INT 1
64367: DEC
64368: ST_TO_ADDR
64369: LD_VAR 0 6
64373: PUSH
64374: LD_INT 1
64376: ARRAY
64377: PUSH
64378: FOR_TO
64379: IFFALSE 64501
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64381: LD_ADDR_VAR 0 7
64385: PUSH
64386: LD_VAR 0 6
64390: PUSH
64391: LD_INT 1
64393: ARRAY
64394: PUSH
64395: LD_VAR 0 5
64399: ARRAY
64400: PUSH
64401: LD_VAR 0 6
64405: PUSH
64406: LD_INT 2
64408: ARRAY
64409: PUSH
64410: LD_VAR 0 5
64414: ARRAY
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64420: LD_VAR 0 7
64424: PUSH
64425: LD_INT 1
64427: ARRAY
64428: PPUSH
64429: LD_VAR 0 7
64433: PUSH
64434: LD_INT 2
64436: ARRAY
64437: PPUSH
64438: CALL_OW 428
64442: PUSH
64443: LD_INT 0
64445: EQUAL
64446: IFFALSE 64499
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64448: LD_VAR 0 1
64452: PPUSH
64453: LD_VAR 0 7
64457: PUSH
64458: LD_INT 1
64460: ARRAY
64461: PPUSH
64462: LD_VAR 0 7
64466: PUSH
64467: LD_INT 2
64469: ARRAY
64470: PPUSH
64471: LD_VAR 0 3
64475: PPUSH
64476: CALL_OW 48
// result := IsPlaced ( unit ) ;
64480: LD_ADDR_VAR 0 4
64484: PUSH
64485: LD_VAR 0 1
64489: PPUSH
64490: CALL_OW 305
64494: ST_TO_ADDR
// exit ;
64495: POP
64496: POP
64497: GO 64503
// end ; end ;
64499: GO 64378
64501: POP
64502: POP
// end ;
64503: LD_VAR 0 4
64507: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64508: LD_INT 0
64510: PPUSH
64511: PPUSH
64512: PPUSH
// if not side or side > 8 then
64513: LD_VAR 0 1
64517: NOT
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_INT 8
64526: GREATER
64527: OR
64528: IFFALSE 64532
// exit ;
64530: GO 64719
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64532: LD_ADDR_VAR 0 4
64536: PUSH
64537: LD_INT 22
64539: PUSH
64540: LD_VAR 0 1
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 21
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PPUSH
64563: CALL_OW 69
64567: ST_TO_ADDR
// if not tmp then
64568: LD_VAR 0 4
64572: NOT
64573: IFFALSE 64577
// exit ;
64575: GO 64719
// enable_addtolog := true ;
64577: LD_ADDR_OWVAR 81
64581: PUSH
64582: LD_INT 1
64584: ST_TO_ADDR
// AddToLog ( [ ) ;
64585: LD_STRING [
64587: PPUSH
64588: CALL_OW 561
// for i in tmp do
64592: LD_ADDR_VAR 0 3
64596: PUSH
64597: LD_VAR 0 4
64601: PUSH
64602: FOR_IN
64603: IFFALSE 64710
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64605: LD_STRING [
64607: PUSH
64608: LD_VAR 0 3
64612: PPUSH
64613: CALL_OW 266
64617: STR
64618: PUSH
64619: LD_STRING , 
64621: STR
64622: PUSH
64623: LD_VAR 0 3
64627: PPUSH
64628: CALL_OW 250
64632: STR
64633: PUSH
64634: LD_STRING , 
64636: STR
64637: PUSH
64638: LD_VAR 0 3
64642: PPUSH
64643: CALL_OW 251
64647: STR
64648: PUSH
64649: LD_STRING , 
64651: STR
64652: PUSH
64653: LD_VAR 0 3
64657: PPUSH
64658: CALL_OW 254
64662: STR
64663: PUSH
64664: LD_STRING , 
64666: STR
64667: PUSH
64668: LD_VAR 0 3
64672: PPUSH
64673: LD_INT 1
64675: PPUSH
64676: CALL_OW 268
64680: STR
64681: PUSH
64682: LD_STRING , 
64684: STR
64685: PUSH
64686: LD_VAR 0 3
64690: PPUSH
64691: LD_INT 2
64693: PPUSH
64694: CALL_OW 268
64698: STR
64699: PUSH
64700: LD_STRING ],
64702: STR
64703: PPUSH
64704: CALL_OW 561
// end ;
64708: GO 64602
64710: POP
64711: POP
// AddToLog ( ]; ) ;
64712: LD_STRING ];
64714: PPUSH
64715: CALL_OW 561
// end ;
64719: LD_VAR 0 2
64723: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64724: LD_INT 0
64726: PPUSH
64727: PPUSH
64728: PPUSH
64729: PPUSH
64730: PPUSH
// if not area or not rate or not max then
64731: LD_VAR 0 1
64735: NOT
64736: PUSH
64737: LD_VAR 0 2
64741: NOT
64742: OR
64743: PUSH
64744: LD_VAR 0 4
64748: NOT
64749: OR
64750: IFFALSE 64754
// exit ;
64752: GO 64946
// while 1 do
64754: LD_INT 1
64756: IFFALSE 64946
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64758: LD_ADDR_VAR 0 9
64762: PUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: LD_INT 1
64770: PPUSH
64771: CALL_OW 287
64775: PUSH
64776: LD_INT 10
64778: MUL
64779: ST_TO_ADDR
// r := rate / 10 ;
64780: LD_ADDR_VAR 0 7
64784: PUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_INT 10
64792: DIVREAL
64793: ST_TO_ADDR
// time := 1 1$00 ;
64794: LD_ADDR_VAR 0 8
64798: PUSH
64799: LD_INT 2100
64801: ST_TO_ADDR
// if amount < min then
64802: LD_VAR 0 9
64806: PUSH
64807: LD_VAR 0 3
64811: LESS
64812: IFFALSE 64830
// r := r * 2 else
64814: LD_ADDR_VAR 0 7
64818: PUSH
64819: LD_VAR 0 7
64823: PUSH
64824: LD_INT 2
64826: MUL
64827: ST_TO_ADDR
64828: GO 64856
// if amount > max then
64830: LD_VAR 0 9
64834: PUSH
64835: LD_VAR 0 4
64839: GREATER
64840: IFFALSE 64856
// r := r / 2 ;
64842: LD_ADDR_VAR 0 7
64846: PUSH
64847: LD_VAR 0 7
64851: PUSH
64852: LD_INT 2
64854: DIVREAL
64855: ST_TO_ADDR
// time := time / r ;
64856: LD_ADDR_VAR 0 8
64860: PUSH
64861: LD_VAR 0 8
64865: PUSH
64866: LD_VAR 0 7
64870: DIVREAL
64871: ST_TO_ADDR
// if time < 0 then
64872: LD_VAR 0 8
64876: PUSH
64877: LD_INT 0
64879: LESS
64880: IFFALSE 64897
// time := time * - 1 ;
64882: LD_ADDR_VAR 0 8
64886: PUSH
64887: LD_VAR 0 8
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: MUL
64896: ST_TO_ADDR
// wait ( time ) ;
64897: LD_VAR 0 8
64901: PPUSH
64902: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64906: LD_INT 35
64908: PPUSH
64909: LD_INT 875
64911: PPUSH
64912: CALL_OW 12
64916: PPUSH
64917: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64921: LD_INT 1
64923: PPUSH
64924: LD_INT 5
64926: PPUSH
64927: CALL_OW 12
64931: PPUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: LD_INT 1
64939: PPUSH
64940: CALL_OW 55
// end ;
64944: GO 64754
// end ;
64946: LD_VAR 0 5
64950: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64951: LD_INT 0
64953: PPUSH
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
64958: PPUSH
64959: PPUSH
64960: PPUSH
// if not turrets or not factories then
64961: LD_VAR 0 1
64965: NOT
64966: PUSH
64967: LD_VAR 0 2
64971: NOT
64972: OR
64973: IFFALSE 64977
// exit ;
64975: GO 65284
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64977: LD_ADDR_VAR 0 10
64981: PUSH
64982: LD_INT 5
64984: PUSH
64985: LD_INT 6
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 2
64994: PUSH
64995: LD_INT 4
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 3
65004: PUSH
65005: LD_INT 5
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 24
65019: PUSH
65020: LD_INT 25
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 23
65029: PUSH
65030: LD_INT 27
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 42
65043: PUSH
65044: LD_INT 43
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 44
65053: PUSH
65054: LD_INT 46
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 45
65063: PUSH
65064: LD_INT 47
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: LIST
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: ST_TO_ADDR
// result := [ ] ;
65081: LD_ADDR_VAR 0 3
65085: PUSH
65086: EMPTY
65087: ST_TO_ADDR
// for i in turrets do
65088: LD_ADDR_VAR 0 4
65092: PUSH
65093: LD_VAR 0 1
65097: PUSH
65098: FOR_IN
65099: IFFALSE 65282
// begin nat := GetNation ( i ) ;
65101: LD_ADDR_VAR 0 7
65105: PUSH
65106: LD_VAR 0 4
65110: PPUSH
65111: CALL_OW 248
65115: ST_TO_ADDR
// weapon := 0 ;
65116: LD_ADDR_VAR 0 8
65120: PUSH
65121: LD_INT 0
65123: ST_TO_ADDR
// if not nat then
65124: LD_VAR 0 7
65128: NOT
65129: IFFALSE 65133
// continue ;
65131: GO 65098
// for j in list [ nat ] do
65133: LD_ADDR_VAR 0 5
65137: PUSH
65138: LD_VAR 0 10
65142: PUSH
65143: LD_VAR 0 7
65147: ARRAY
65148: PUSH
65149: FOR_IN
65150: IFFALSE 65191
// if GetBWeapon ( i ) = j [ 1 ] then
65152: LD_VAR 0 4
65156: PPUSH
65157: CALL_OW 269
65161: PUSH
65162: LD_VAR 0 5
65166: PUSH
65167: LD_INT 1
65169: ARRAY
65170: EQUAL
65171: IFFALSE 65189
// begin weapon := j [ 2 ] ;
65173: LD_ADDR_VAR 0 8
65177: PUSH
65178: LD_VAR 0 5
65182: PUSH
65183: LD_INT 2
65185: ARRAY
65186: ST_TO_ADDR
// break ;
65187: GO 65191
// end ;
65189: GO 65149
65191: POP
65192: POP
// if not weapon then
65193: LD_VAR 0 8
65197: NOT
65198: IFFALSE 65202
// continue ;
65200: GO 65098
// for k in factories do
65202: LD_ADDR_VAR 0 6
65206: PUSH
65207: LD_VAR 0 2
65211: PUSH
65212: FOR_IN
65213: IFFALSE 65278
// begin weapons := AvailableWeaponList ( k ) ;
65215: LD_ADDR_VAR 0 9
65219: PUSH
65220: LD_VAR 0 6
65224: PPUSH
65225: CALL_OW 478
65229: ST_TO_ADDR
// if not weapons then
65230: LD_VAR 0 9
65234: NOT
65235: IFFALSE 65239
// continue ;
65237: GO 65212
// if weapon in weapons then
65239: LD_VAR 0 8
65243: PUSH
65244: LD_VAR 0 9
65248: IN
65249: IFFALSE 65276
// begin result := [ i , weapon ] ;
65251: LD_ADDR_VAR 0 3
65255: PUSH
65256: LD_VAR 0 4
65260: PUSH
65261: LD_VAR 0 8
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: ST_TO_ADDR
// exit ;
65270: POP
65271: POP
65272: POP
65273: POP
65274: GO 65284
// end ; end ;
65276: GO 65212
65278: POP
65279: POP
// end ;
65280: GO 65098
65282: POP
65283: POP
// end ;
65284: LD_VAR 0 3
65288: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65289: LD_INT 0
65291: PPUSH
// if not side or side > 8 then
65292: LD_VAR 0 3
65296: NOT
65297: PUSH
65298: LD_VAR 0 3
65302: PUSH
65303: LD_INT 8
65305: GREATER
65306: OR
65307: IFFALSE 65311
// exit ;
65309: GO 65370
// if not range then
65311: LD_VAR 0 4
65315: NOT
65316: IFFALSE 65327
// range := - 12 ;
65318: LD_ADDR_VAR 0 4
65322: PUSH
65323: LD_INT 12
65325: NEG
65326: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65327: LD_VAR 0 1
65331: PPUSH
65332: LD_VAR 0 2
65336: PPUSH
65337: LD_VAR 0 3
65341: PPUSH
65342: LD_VAR 0 4
65346: PPUSH
65347: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65351: LD_VAR 0 1
65355: PPUSH
65356: LD_VAR 0 2
65360: PPUSH
65361: LD_VAR 0 3
65365: PPUSH
65366: CALL_OW 331
// end ;
65370: LD_VAR 0 5
65374: RET
// export function Video ( mode ) ; begin
65375: LD_INT 0
65377: PPUSH
// ingame_video = mode ;
65378: LD_ADDR_OWVAR 52
65382: PUSH
65383: LD_VAR 0 1
65387: ST_TO_ADDR
// interface_hidden = mode ;
65388: LD_ADDR_OWVAR 54
65392: PUSH
65393: LD_VAR 0 1
65397: ST_TO_ADDR
// end ;
65398: LD_VAR 0 2
65402: RET
// export function Join ( array , element ) ; begin
65403: LD_INT 0
65405: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65406: LD_ADDR_VAR 0 3
65410: PUSH
65411: LD_VAR 0 1
65415: PPUSH
65416: LD_VAR 0 1
65420: PUSH
65421: LD_INT 1
65423: PLUS
65424: PPUSH
65425: LD_VAR 0 2
65429: PPUSH
65430: CALL_OW 1
65434: ST_TO_ADDR
// end ;
65435: LD_VAR 0 3
65439: RET
// export function JoinUnion ( array , element ) ; begin
65440: LD_INT 0
65442: PPUSH
// result := array union element ;
65443: LD_ADDR_VAR 0 3
65447: PUSH
65448: LD_VAR 0 1
65452: PUSH
65453: LD_VAR 0 2
65457: UNION
65458: ST_TO_ADDR
// end ;
65459: LD_VAR 0 3
65463: RET
// export function GetBehemoths ( side ) ; begin
65464: LD_INT 0
65466: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65467: LD_ADDR_VAR 0 2
65471: PUSH
65472: LD_INT 22
65474: PUSH
65475: LD_VAR 0 1
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 31
65486: PUSH
65487: LD_INT 25
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PPUSH
65498: CALL_OW 69
65502: ST_TO_ADDR
// end ;
65503: LD_VAR 0 2
65507: RET
// export function Shuffle ( array ) ; var i , index ; begin
65508: LD_INT 0
65510: PPUSH
65511: PPUSH
65512: PPUSH
// result := [ ] ;
65513: LD_ADDR_VAR 0 2
65517: PUSH
65518: EMPTY
65519: ST_TO_ADDR
// if not array then
65520: LD_VAR 0 1
65524: NOT
65525: IFFALSE 65529
// exit ;
65527: GO 65628
// Randomize ;
65529: CALL_OW 10
// for i = array downto 1 do
65533: LD_ADDR_VAR 0 3
65537: PUSH
65538: DOUBLE
65539: LD_VAR 0 1
65543: INC
65544: ST_TO_ADDR
65545: LD_INT 1
65547: PUSH
65548: FOR_DOWNTO
65549: IFFALSE 65626
// begin index := rand ( 1 , array ) ;
65551: LD_ADDR_VAR 0 4
65555: PUSH
65556: LD_INT 1
65558: PPUSH
65559: LD_VAR 0 1
65563: PPUSH
65564: CALL_OW 12
65568: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65569: LD_ADDR_VAR 0 2
65573: PUSH
65574: LD_VAR 0 2
65578: PPUSH
65579: LD_VAR 0 2
65583: PUSH
65584: LD_INT 1
65586: PLUS
65587: PPUSH
65588: LD_VAR 0 1
65592: PUSH
65593: LD_VAR 0 4
65597: ARRAY
65598: PPUSH
65599: CALL_OW 2
65603: ST_TO_ADDR
// array := Delete ( array , index ) ;
65604: LD_ADDR_VAR 0 1
65608: PUSH
65609: LD_VAR 0 1
65613: PPUSH
65614: LD_VAR 0 4
65618: PPUSH
65619: CALL_OW 3
65623: ST_TO_ADDR
// end ;
65624: GO 65548
65626: POP
65627: POP
// end ;
65628: LD_VAR 0 2
65632: RET
// export function GetBaseMaterials ( base ) ; begin
65633: LD_INT 0
65635: PPUSH
// result := [ 0 , 0 , 0 ] ;
65636: LD_ADDR_VAR 0 2
65640: PUSH
65641: LD_INT 0
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: LIST
65654: ST_TO_ADDR
// if not base then
65655: LD_VAR 0 1
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 65713
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65664: LD_ADDR_VAR 0 2
65668: PUSH
65669: LD_VAR 0 1
65673: PPUSH
65674: LD_INT 1
65676: PPUSH
65677: CALL_OW 275
65681: PUSH
65682: LD_VAR 0 1
65686: PPUSH
65687: LD_INT 2
65689: PPUSH
65690: CALL_OW 275
65694: PUSH
65695: LD_VAR 0 1
65699: PPUSH
65700: LD_INT 3
65702: PPUSH
65703: CALL_OW 275
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// end ;
65713: LD_VAR 0 2
65717: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65718: LD_INT 0
65720: PPUSH
65721: PPUSH
// result := array ;
65722: LD_ADDR_VAR 0 3
65726: PUSH
65727: LD_VAR 0 1
65731: ST_TO_ADDR
// if size > 0 then
65732: LD_VAR 0 2
65736: PUSH
65737: LD_INT 0
65739: GREATER
65740: IFFALSE 65786
// for i := array downto size do
65742: LD_ADDR_VAR 0 4
65746: PUSH
65747: DOUBLE
65748: LD_VAR 0 1
65752: INC
65753: ST_TO_ADDR
65754: LD_VAR 0 2
65758: PUSH
65759: FOR_DOWNTO
65760: IFFALSE 65784
// result := Delete ( result , result ) ;
65762: LD_ADDR_VAR 0 3
65766: PUSH
65767: LD_VAR 0 3
65771: PPUSH
65772: LD_VAR 0 3
65776: PPUSH
65777: CALL_OW 3
65781: ST_TO_ADDR
65782: GO 65759
65784: POP
65785: POP
// end ;
65786: LD_VAR 0 3
65790: RET
// export function ComExit ( unit ) ; var tmp ; begin
65791: LD_INT 0
65793: PPUSH
65794: PPUSH
// if not IsInUnit ( unit ) then
65795: LD_VAR 0 1
65799: PPUSH
65800: CALL_OW 310
65804: NOT
65805: IFFALSE 65809
// exit ;
65807: GO 65869
// tmp := IsInUnit ( unit ) ;
65809: LD_ADDR_VAR 0 3
65813: PUSH
65814: LD_VAR 0 1
65818: PPUSH
65819: CALL_OW 310
65823: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65824: LD_VAR 0 3
65828: PPUSH
65829: CALL_OW 247
65833: PUSH
65834: LD_INT 2
65836: EQUAL
65837: IFFALSE 65850
// ComExitVehicle ( unit ) else
65839: LD_VAR 0 1
65843: PPUSH
65844: CALL_OW 121
65848: GO 65859
// ComExitBuilding ( unit ) ;
65850: LD_VAR 0 1
65854: PPUSH
65855: CALL_OW 122
// result := tmp ;
65859: LD_ADDR_VAR 0 2
65863: PUSH
65864: LD_VAR 0 3
65868: ST_TO_ADDR
// end ;
65869: LD_VAR 0 2
65873: RET
// export function ResetHc ; begin
65874: LD_INT 0
65876: PPUSH
// InitHc ;
65877: CALL_OW 19
// hc_importance := 0 ;
65881: LD_ADDR_OWVAR 32
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// end ;
65889: LD_VAR 0 1
65893: RET
