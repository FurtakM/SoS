// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 37746 0 9
// if debug then
  43: LD_EXP 1
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2135 0 0
// PrepareRussians ;
  60: CALL 126 0 0
// MissionIntro ;
  64: CALL 3335 0 0
// end ;
  68: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 2
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 3
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 ] [ Difficulty ] ;
  96: LD_ADDR_EXP 39
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: LD_INT 3
 106: PUSH
 107: LD_INT 4
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: LIST
 114: PUSH
 115: LD_OWVAR 67
 119: ARRAY
 120: ST_TO_ADDR
// end ; end_of_file
 121: LD_VAR 0 1
 125: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export Scholtze ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export Grishko , Gaydar , Bukov ; export burlakTeam , kirovBarracks ; export function PrepareRussians ; var un ; begin
 126: LD_INT 0
 128: PPUSH
 129: PPUSH
// PrepareHeroes ;
 130: CALL 147 0 0
// PrepareBeriaBase ;
 134: CALL 850 0 0
// PrepareKirovBase ;
 138: CALL 1083 0 0
// end ;
 142: LD_VAR 0 1
 146: RET
// function PrepareHeroes ; var un ; begin
 147: LD_INT 0
 149: PPUSH
 150: PPUSH
// uc_side := 6 ;
 151: LD_ADDR_OWVAR 20
 155: PUSH
 156: LD_INT 6
 158: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 159: LD_ADDR_EXP 49
 163: PUSH
 164: LD_STRING 02_burlakTeam
 166: PPUSH
 167: CALL_OW 31
 171: ST_TO_ADDR
// uc_side := 3 ;
 172: LD_ADDR_OWVAR 20
 176: PUSH
 177: LD_INT 3
 179: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 180: LD_ADDR_EXP 40
 184: PUSH
 185: LD_STRING Burlak
 187: PPUSH
 188: LD_EXP 1
 192: NOT
 193: PPUSH
 194: LD_EXP 2
 198: PPUSH
 199: CALL 4383 0 3
 203: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 204: LD_ADDR_EXP 41
 208: PUSH
 209: LD_STRING Gnyevko
 211: PPUSH
 212: LD_EXP 1
 216: NOT
 217: PPUSH
 218: LD_EXP 2
 222: PPUSH
 223: CALL 4383 0 3
 227: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 228: LD_ADDR_EXP 43
 232: PUSH
 233: LD_STRING Kovalyuk
 235: PPUSH
 236: LD_EXP 1
 240: NOT
 241: PPUSH
 242: LD_EXP 2
 246: PPUSH
 247: CALL 4383 0 3
 251: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 252: LD_ADDR_EXP 42
 256: PUSH
 257: LD_STRING Kirilenkova
 259: PPUSH
 260: LD_EXP 1
 264: NOT
 265: PPUSH
 266: LD_EXP 2
 270: PPUSH
 271: CALL 4383 0 3
 275: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 276: LD_ADDR_EXP 44
 280: PUSH
 281: LD_STRING Belkov
 283: PPUSH
 284: LD_EXP 1
 288: NOT
 289: PPUSH
 290: LD_EXP 2
 294: PPUSH
 295: CALL 4383 0 3
 299: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 300: LD_ADDR_EXP 46
 304: PUSH
 305: LD_STRING Benko
 307: PPUSH
 308: LD_EXP 1
 312: NOT
 313: PPUSH
 314: LD_EXP 2
 318: PPUSH
 319: CALL 4383 0 3
 323: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 324: LD_ADDR_EXP 47
 328: PUSH
 329: LD_STRING Kuklajs
 331: PPUSH
 332: LD_EXP 1
 336: NOT
 337: PPUSH
 338: LD_EXP 2
 342: PPUSH
 343: CALL 4383 0 3
 347: ST_TO_ADDR
// uc_side := 6 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 6
 355: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 356: LD_ADDR_EXP 52
 360: PUSH
 361: LD_STRING Kurin
 363: PPUSH
 364: CALL_OW 25
 368: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 369: LD_ADDR_EXP 53
 373: PUSH
 374: LD_STRING Popov
 376: PPUSH
 377: CALL_OW 25
 381: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 382: LD_ADDR_EXP 58
 386: PUSH
 387: LD_STRING Grishko
 389: PPUSH
 390: CALL_OW 25
 394: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 395: LD_ADDR_EXP 59
 399: PUSH
 400: LD_STRING Gaydar
 402: PPUSH
 403: CALL_OW 25
 407: ST_TO_ADDR
// Bukov := NewCharacter ( SBukov ) ;
 408: LD_ADDR_EXP 60
 412: PUSH
 413: LD_STRING SBukov
 415: PPUSH
 416: CALL_OW 25
 420: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 421: LD_EXP 40
 425: PUSH
 426: LD_EXP 41
 430: PUSH
 431: LD_EXP 43
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: LIST
 440: PPUSH
 441: LD_INT 3
 443: PPUSH
 444: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 448: LD_EXP 42
 452: PPUSH
 453: LD_INT 4
 455: PPUSH
 456: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 460: LD_EXP 52
 464: PPUSH
 465: LD_INT 153
 467: PPUSH
 468: LD_INT 103
 470: PPUSH
 471: LD_INT 0
 473: PPUSH
 474: CALL_OW 48
// AddComHold ( Kurin ) ;
 478: LD_EXP 52
 482: PPUSH
 483: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 487: LD_EXP 52
 491: PPUSH
 492: LD_INT 155
 494: PPUSH
 495: LD_INT 106
 497: PPUSH
 498: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 502: LD_EXP 53
 506: PPUSH
 507: LD_INT 131
 509: PPUSH
 510: LD_INT 49
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 48
// AddComHold ( Popov ) ;
 520: LD_EXP 53
 524: PPUSH
 525: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 529: LD_EXP 53
 533: PPUSH
 534: LD_INT 131
 536: PPUSH
 537: LD_INT 31
 539: PPUSH
 540: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 544: LD_EXP 59
 548: PPUSH
 549: LD_INT 91
 551: PPUSH
 552: LD_INT 15
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 48
// AddComHold ( Gaydar ) ;
 562: LD_EXP 59
 566: PPUSH
 567: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 571: LD_EXP 59
 575: PPUSH
 576: LD_INT 131
 578: PPUSH
 579: LD_INT 31
 581: PPUSH
 582: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 586: LD_EXP 60
 590: PPUSH
 591: LD_INT 86
 593: PPUSH
 594: LD_INT 17
 596: PPUSH
 597: LD_INT 0
 599: PPUSH
 600: CALL_OW 48
// AddComHold ( Bukov ) ;
 604: LD_EXP 60
 608: PPUSH
 609: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 613: LD_EXP 60
 617: PPUSH
 618: LD_INT 94
 620: PPUSH
 621: LD_INT 32
 623: PPUSH
 624: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 628: LD_EXP 44
 632: PPUSH
 633: LD_INT 155
 635: PPUSH
 636: LD_INT 106
 638: PPUSH
 639: LD_INT 0
 641: PPUSH
 642: CALL_OW 48
// AddComHold ( Belkov ) ;
 646: LD_EXP 44
 650: PPUSH
 651: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 655: LD_EXP 44
 659: PPUSH
 660: LD_EXP 52
 664: PPUSH
 665: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 669: LD_EXP 40
 673: PPUSH
 674: LD_INT 154
 676: PPUSH
 677: LD_INT 106
 679: PPUSH
 680: LD_INT 0
 682: PPUSH
 683: CALL_OW 48
// AddComHold ( Burlak ) ;
 687: LD_EXP 40
 691: PPUSH
 692: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 696: LD_EXP 40
 700: PPUSH
 701: LD_EXP 52
 705: PPUSH
 706: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 710: LD_ADDR_EXP 61
 714: PUSH
 715: LD_EXP 41
 719: PUSH
 720: LD_EXP 43
 724: PUSH
 725: LD_EXP 42
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: ST_TO_ADDR
// for un in otherBeriaUnits do
 735: LD_ADDR_VAR 0 2
 739: PUSH
 740: LD_EXP 49
 744: PUSH
 745: FOR_IN
 746: IFFALSE 788
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 748: LD_VAR 0 2
 752: PPUSH
 753: LD_INT 4
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL_OW 49
// AddComHold ( un ) ;
 763: LD_VAR 0 2
 767: PPUSH
 768: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 772: LD_VAR 0 2
 776: PPUSH
 777: LD_EXP 52
 781: PPUSH
 782: CALL_OW 179
// end ;
 786: GO 745
 788: POP
 789: POP
// for un in BurlakTeam do
 790: LD_ADDR_VAR 0 2
 794: PUSH
 795: LD_EXP 61
 799: PUSH
 800: FOR_IN
 801: IFFALSE 843
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 803: LD_VAR 0 2
 807: PPUSH
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// AddComHold ( un ) ;
 818: LD_VAR 0 2
 822: PPUSH
 823: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 827: LD_VAR 0 2
 831: PPUSH
 832: LD_EXP 52
 836: PPUSH
 837: CALL_OW 179
// end ;
 841: GO 800
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 1
 849: RET
// export function PrepareBeriaBase ; var i , bonusResources , beriaDepot ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
 855: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 856: LD_ADDR_EXP 50
 860: PUSH
 861: LD_STRING 02_Beria
 863: PPUSH
 864: EMPTY
 865: PPUSH
 866: CALL_OW 30
 870: ST_TO_ADDR
// uc_side := 3 ;
 871: LD_ADDR_OWVAR 20
 875: PUSH
 876: LD_INT 3
 878: ST_TO_ADDR
// uc_nation := 3 ;
 879: LD_ADDR_OWVAR 21
 883: PUSH
 884: LD_INT 3
 886: ST_TO_ADDR
// for i := 1 to beriaBase do
 887: LD_ADDR_VAR 0 2
 891: PUSH
 892: DOUBLE
 893: LD_INT 1
 895: DEC
 896: ST_TO_ADDR
 897: LD_EXP 50
 901: PUSH
 902: FOR_TO
 903: IFFALSE 1026
// begin bc_type := beriaBase [ i ] [ 1 ] ;
 905: LD_ADDR_OWVAR 42
 909: PUSH
 910: LD_EXP 50
 914: PUSH
 915: LD_VAR 0 2
 919: ARRAY
 920: PUSH
 921: LD_INT 1
 923: ARRAY
 924: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
 925: LD_ADDR_OWVAR 43
 929: PUSH
 930: LD_EXP 50
 934: PUSH
 935: LD_VAR 0 2
 939: ARRAY
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: ST_TO_ADDR
// if bc_type = b_lab then
 945: LD_OWVAR 42
 949: PUSH
 950: LD_INT 6
 952: EQUAL
 953: IFFALSE 971
// begin bc_kind1 := b_lab_basic ;
 955: LD_ADDR_OWVAR 44
 959: PUSH
 960: LD_INT 9
 962: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
 963: LD_ADDR_OWVAR 45
 967: PUSH
 968: LD_INT 9
 970: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
 971: LD_EXP 50
 975: PUSH
 976: LD_VAR 0 2
 980: ARRAY
 981: PUSH
 982: LD_INT 3
 984: ARRAY
 985: PUSH
 986: LD_INT 46
 988: PLUS
 989: PPUSH
 990: LD_EXP 50
 994: PUSH
 995: LD_VAR 0 2
 999: ARRAY
1000: PUSH
1001: LD_INT 4
1003: ARRAY
1004: PPUSH
1005: LD_EXP 50
1009: PUSH
1010: LD_VAR 0 2
1014: ARRAY
1015: PUSH
1016: LD_INT 5
1018: ARRAY
1019: PPUSH
1020: CALL_OW 47
// end ;
1024: GO 902
1026: POP
1027: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1028: LD_ADDR_VAR 0 4
1032: PUSH
1033: LD_INT 22
1035: PUSH
1036: LD_INT 3
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PUSH
1043: LD_INT 30
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 69
1061: PUSH
1062: LD_INT 1
1064: ARRAY
1065: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1066: LD_VAR 0 4
1070: PPUSH
1071: LD_STRING beria
1073: PPUSH
1074: CALL_OW 500
// end ;
1078: LD_VAR 0 1
1082: RET
// export function PrepareKirovBase ; var i , tmp , buildings , x , b , bonusResources , kirovDepot ; begin
1083: LD_INT 0
1085: PPUSH
1086: PPUSH
1087: PPUSH
1088: PPUSH
1089: PPUSH
1090: PPUSH
1091: PPUSH
1092: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1093: LD_ADDR_EXP 55
1097: PUSH
1098: LD_STRING 02_Kirov
1100: PPUSH
1101: EMPTY
1102: PPUSH
1103: CALL_OW 30
1107: ST_TO_ADDR
// uc_side := 6 ;
1108: LD_ADDR_OWVAR 20
1112: PUSH
1113: LD_INT 6
1115: ST_TO_ADDR
// uc_nation := 3 ;
1116: LD_ADDR_OWVAR 21
1120: PUSH
1121: LD_INT 3
1123: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1124: LD_ADDR_EXP 54
1128: PUSH
1129: LD_STRING 02_kirovTeam
1131: PPUSH
1132: CALL_OW 31
1136: ST_TO_ADDR
// for i := 1 to kirovBase do
1137: LD_ADDR_VAR 0 2
1141: PUSH
1142: DOUBLE
1143: LD_INT 1
1145: DEC
1146: ST_TO_ADDR
1147: LD_EXP 55
1151: PUSH
1152: FOR_TO
1153: IFFALSE 1302
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1155: LD_ADDR_OWVAR 42
1159: PUSH
1160: LD_EXP 55
1164: PUSH
1165: LD_VAR 0 2
1169: ARRAY
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1175: LD_ADDR_OWVAR 43
1179: PUSH
1180: LD_EXP 55
1184: PUSH
1185: LD_VAR 0 2
1189: ARRAY
1190: PUSH
1191: LD_INT 2
1193: ARRAY
1194: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_EXP 55
1204: PUSH
1205: LD_VAR 0 2
1209: ARRAY
1210: PUSH
1211: LD_INT 3
1213: ARRAY
1214: PUSH
1215: LD_INT 46
1217: PLUS
1218: ST_TO_ADDR
// if x < 140 then
1219: LD_VAR 0 5
1223: PUSH
1224: LD_INT 140
1226: LESS
1227: IFFALSE 1239
// uc_side := 3 else
1229: LD_ADDR_OWVAR 20
1233: PUSH
1234: LD_INT 3
1236: ST_TO_ADDR
1237: GO 1247
// uc_side := 6 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 6
1246: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1247: LD_EXP 55
1251: PUSH
1252: LD_VAR 0 2
1256: ARRAY
1257: PUSH
1258: LD_INT 3
1260: ARRAY
1261: PUSH
1262: LD_INT 46
1264: PLUS
1265: PPUSH
1266: LD_EXP 55
1270: PUSH
1271: LD_VAR 0 2
1275: ARRAY
1276: PUSH
1277: LD_INT 4
1279: ARRAY
1280: PPUSH
1281: LD_EXP 55
1285: PUSH
1286: LD_VAR 0 2
1290: ARRAY
1291: PUSH
1292: LD_INT 5
1294: ARRAY
1295: PPUSH
1296: CALL_OW 47
// end ;
1300: GO 1152
1302: POP
1303: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1304: LD_ADDR_VAR 0 8
1308: PUSH
1309: LD_INT 22
1311: PUSH
1312: LD_INT 6
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 30
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PPUSH
1333: CALL_OW 69
1337: PUSH
1338: LD_INT 1
1340: ARRAY
1341: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1342: LD_VAR 0 8
1346: PPUSH
1347: LD_STRING kirov
1349: PPUSH
1350: CALL_OW 500
// for i := 1 to 2 do
1354: LD_ADDR_VAR 0 2
1358: PUSH
1359: DOUBLE
1360: LD_INT 1
1362: DEC
1363: ST_TO_ADDR
1364: LD_INT 2
1366: PUSH
1367: FOR_TO
1368: IFFALSE 1394
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1370: LD_VAR 0 8
1374: PPUSH
1375: CALL_OW 274
1379: PPUSH
1380: LD_VAR 0 2
1384: PPUSH
1385: LD_INT 500
1387: PPUSH
1388: CALL_OW 277
1392: GO 1367
1394: POP
1395: POP
// tmp := otherKirovUnits ;
1396: LD_ADDR_VAR 0 3
1400: PUSH
1401: LD_EXP 54
1405: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1406: LD_ADDR_VAR 0 4
1410: PUSH
1411: LD_INT 22
1413: PUSH
1414: LD_INT 6
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 21
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PUSH
1431: LD_INT 3
1433: PUSH
1434: LD_INT 30
1436: PUSH
1437: LD_INT 31
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: LIST
1452: PPUSH
1453: CALL_OW 69
1457: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1458: LD_ADDR_VAR 0 6
1462: PUSH
1463: LD_VAR 0 4
1467: PUSH
1468: LD_INT 1
1470: ARRAY
1471: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1472: LD_VAR 0 3
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: LD_VAR 0 6
1485: PPUSH
1486: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: LD_VAR 0 3
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: CALL_OW 3
1507: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1508: LD_VAR 0 6
1512: PPUSH
1513: CALL_OW 313
1517: PUSH
1518: LD_INT 3
1520: EQUAL
1521: IFFALSE 1541
// buildings := Delete ( buildings , 1 ) ;
1523: LD_ADDR_VAR 0 4
1527: PUSH
1528: LD_VAR 0 4
1532: PPUSH
1533: LD_INT 1
1535: PPUSH
1536: CALL_OW 3
1540: ST_TO_ADDR
// until not buildings or not tmp ;
1541: LD_VAR 0 4
1545: NOT
1546: PUSH
1547: LD_VAR 0 3
1551: NOT
1552: OR
1553: IFFALSE 1458
// if tmp then
1555: LD_VAR 0 3
1559: IFFALSE 1599
// begin for i in tmp do
1561: LD_ADDR_VAR 0 2
1565: PUSH
1566: LD_VAR 0 3
1570: PUSH
1571: FOR_IN
1572: IFFALSE 1597
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1574: LD_VAR 0 2
1578: PPUSH
1579: LD_INT 164
1581: PPUSH
1582: LD_INT 109
1584: PPUSH
1585: LD_INT 4
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 50
1595: GO 1571
1597: POP
1598: POP
// end ; end ;
1599: LD_VAR 0 1
1603: RET
// export function UpgradeKirovBase ; var i , kirovEngs , kirovBuildingArray ; begin
1604: LD_INT 0
1606: PPUSH
1607: PPUSH
1608: PPUSH
1609: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1610: LD_ADDR_VAR 0 4
1614: PUSH
1615: LD_INT 32
1617: PUSH
1618: LD_INT 146
1620: PUSH
1621: LD_INT 106
1623: PUSH
1624: LD_INT 1
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 32
1635: PUSH
1636: LD_INT 175
1638: PUSH
1639: LD_INT 123
1641: PUSH
1642: LD_INT 5
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 32
1653: PUSH
1654: LD_INT 170
1656: PUSH
1657: LD_INT 101
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 32
1671: PUSH
1672: LD_INT 172
1674: PUSH
1675: LD_INT 104
1677: PUSH
1678: LD_INT 4
1680: PUSH
1681: EMPTY
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 32
1689: PUSH
1690: LD_INT 179
1692: PUSH
1693: LD_INT 118
1695: PUSH
1696: LD_INT 4
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 26
1707: PUSH
1708: LD_INT 159
1710: PUSH
1711: LD_INT 96
1713: PUSH
1714: LD_INT 3
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
1731: LD_ADDR_VAR 0 3
1735: PUSH
1736: LD_INT 22
1738: PUSH
1739: LD_INT 6
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 21
1748: PUSH
1749: LD_INT 1
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 25
1758: PUSH
1759: LD_INT 2
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: CALL_OW 69
1775: ST_TO_ADDR
// for i in kirovBuildingArray do
1776: LD_ADDR_VAR 0 2
1780: PUSH
1781: LD_VAR 0 4
1785: PUSH
1786: FOR_IN
1787: IFFALSE 1836
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_VAR 0 2
1798: PUSH
1799: LD_INT 1
1801: ARRAY
1802: PPUSH
1803: LD_VAR 0 2
1807: PUSH
1808: LD_INT 2
1810: ARRAY
1811: PPUSH
1812: LD_VAR 0 2
1816: PUSH
1817: LD_INT 3
1819: ARRAY
1820: PPUSH
1821: LD_VAR 0 2
1825: PUSH
1826: LD_INT 4
1828: ARRAY
1829: PPUSH
1830: CALL_OW 205
1834: GO 1786
1836: POP
1837: POP
// end ; end_of_file
1838: LD_VAR 0 1
1842: RET
// export omicronSquad , Omikron ; export amIntroUnits ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
1843: LD_INT 0
1845: PPUSH
1846: PPUSH
1847: PPUSH
1848: PPUSH
// amIntroUnits = [ ] ;
1849: LD_ADDR_EXP 65
1853: PUSH
1854: EMPTY
1855: ST_TO_ADDR
// uc_side = 1 ;
1856: LD_ADDR_OWVAR 20
1860: PUSH
1861: LD_INT 1
1863: ST_TO_ADDR
// uc_nation = nation_american ;
1864: LD_ADDR_OWVAR 21
1868: PUSH
1869: LD_INT 1
1871: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1872: LD_ADDR_OWVAR 37
1876: PUSH
1877: LD_INT 3
1879: ST_TO_ADDR
// vc_control = control_manual ;
1880: LD_ADDR_OWVAR 38
1884: PUSH
1885: LD_INT 1
1887: ST_TO_ADDR
// vc_engine = engine_combustion ;
1888: LD_ADDR_OWVAR 39
1892: PUSH
1893: LD_INT 1
1895: ST_TO_ADDR
// vc_weapon = us_light_gun ;
1896: LD_ADDR_OWVAR 40
1900: PUSH
1901: LD_INT 3
1903: ST_TO_ADDR
// vc_fuel_battery = 100 ;
1904: LD_ADDR_OWVAR 41
1908: PUSH
1909: LD_INT 100
1911: ST_TO_ADDR
// veh = CreateVehicle ;
1912: LD_ADDR_VAR 0 3
1916: PUSH
1917: CALL_OW 45
1921: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1922: LD_VAR 0 3
1926: PPUSH
1927: LD_INT 4
1929: PPUSH
1930: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
1934: LD_ADDR_EXP 65
1938: PUSH
1939: LD_EXP 65
1943: PUSH
1944: LD_VAR 0 3
1948: ADD
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
1950: LD_VAR 0 3
1954: PPUSH
1955: LD_INT 7
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// for i := 1 to 3 do
1965: LD_ADDR_VAR 0 2
1969: PUSH
1970: DOUBLE
1971: LD_INT 1
1973: DEC
1974: ST_TO_ADDR
1975: LD_INT 3
1977: PUSH
1978: FOR_TO
1979: IFFALSE 2100
// begin hc_name :=  ;
1981: LD_ADDR_OWVAR 26
1985: PUSH
1986: LD_STRING 
1988: ST_TO_ADDR
// hc_gallery :=  ;
1989: LD_ADDR_OWVAR 33
1993: PUSH
1994: LD_STRING 
1996: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
1997: LD_INT 0
1999: PPUSH
2000: LD_EXP 39
2004: PPUSH
2005: CALL_OW 381
// human = CreateHuman ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 44
2018: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2019: LD_ADDR_EXP 65
2023: PUSH
2024: LD_EXP 65
2028: PUSH
2029: LD_VAR 0 4
2033: ADD
2034: ST_TO_ADDR
// if i < 3 then
2035: LD_VAR 0 2
2039: PUSH
2040: LD_INT 3
2042: LESS
2043: IFFALSE 2062
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2045: LD_VAR 0 4
2049: PPUSH
2050: LD_INT 7
2052: PPUSH
2053: LD_INT 0
2055: PPUSH
2056: CALL_OW 49
2060: GO 2098
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2062: LD_INT 0
2064: PPUSH
2065: LD_EXP 39
2069: PPUSH
2070: CALL_OW 383
// human = CreateHuman ;
2074: LD_ADDR_VAR 0 4
2078: PUSH
2079: CALL_OW 44
2083: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2084: LD_VAR 0 4
2088: PPUSH
2089: LD_VAR 0 3
2093: PPUSH
2094: CALL_OW 52
// end ; end ;
2098: GO 1978
2100: POP
2101: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2102: LD_INT 120
2104: PPUSH
2105: LD_INT 36
2107: PPUSH
2108: LD_INT 3
2110: PPUSH
2111: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2115: LD_EXP 65
2119: PPUSH
2120: LD_INT 26
2122: PPUSH
2123: LD_INT 34
2125: PPUSH
2126: CALL_OW 111
// end ;
2130: LD_VAR 0 1
2134: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omikronDepot , omiBuildingArray ; begin
2135: LD_INT 0
2137: PPUSH
2138: PPUSH
2139: PPUSH
2140: PPUSH
2141: PPUSH
2142: PPUSH
2143: PPUSH
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
2144: LD_ADDR_VAR 0 7
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: LD_INT 20
2154: PUSH
2155: LD_INT 33
2157: PUSH
2158: LD_INT 2
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 29
2169: PUSH
2170: LD_INT 38
2172: PUSH
2173: LD_INT 30
2175: PUSH
2176: LD_INT 5
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 5
2187: PUSH
2188: LD_INT 34
2190: PUSH
2191: LD_INT 25
2193: PUSH
2194: LD_INT 4
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 5
2205: PUSH
2206: LD_INT 35
2208: PUSH
2209: LD_INT 45
2211: PUSH
2212: LD_INT 4
2214: PUSH
2215: EMPTY
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 6
2223: PUSH
2224: LD_INT 27
2226: PUSH
2227: LD_INT 27
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 31
2241: PUSH
2242: LD_INT 25
2244: PUSH
2245: LD_INT 8
2247: PUSH
2248: LD_INT 5
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: LD_INT 32
2259: PUSH
2260: LD_INT 37
2262: PUSH
2263: LD_INT 35
2265: PUSH
2266: LD_INT 4
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 32
2277: PUSH
2278: LD_INT 42
2280: PUSH
2281: LD_INT 45
2283: PUSH
2284: LD_INT 4
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 32
2295: PUSH
2296: LD_INT 29
2298: PUSH
2299: LD_INT 17
2301: PUSH
2302: LD_INT 4
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 32
2313: PUSH
2314: LD_INT 30
2316: PUSH
2317: LD_INT 53
2319: PUSH
2320: LD_INT 0
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 32
2331: PUSH
2332: LD_INT 42
2334: PUSH
2335: LD_INT 56
2337: PUSH
2338: LD_INT 4
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: PUSH
2347: LD_INT 32
2349: PUSH
2350: LD_INT 30
2352: PUSH
2353: LD_INT 20
2355: PUSH
2356: LD_INT 4
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PUSH
2365: LD_INT 27
2367: PUSH
2368: LD_INT 7
2370: PUSH
2371: LD_INT 8
2373: PUSH
2374: LD_INT 1
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 27
2385: PUSH
2386: LD_INT 10
2388: PUSH
2389: LD_INT 8
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: PUSH
2401: LD_INT 27
2403: PUSH
2404: LD_INT 13
2406: PUSH
2407: LD_INT 8
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 26
2421: PUSH
2422: LD_INT 23
2424: PUSH
2425: LD_INT 42
2427: PUSH
2428: LD_INT 4
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 3
2439: PUSH
2440: LD_INT 13
2442: PUSH
2443: LD_INT 14
2445: PUSH
2446: LD_INT 1
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 19
2457: PUSH
2458: LD_INT 10
2460: PUSH
2461: LD_INT 11
2463: PUSH
2464: LD_INT 2
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 17
2475: PUSH
2476: LD_INT 9
2478: PUSH
2479: LD_INT 14
2481: PUSH
2482: LD_INT 1
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_INT 16
2493: PUSH
2494: LD_INT 13
2496: PUSH
2497: LD_INT 17
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: ST_TO_ADDR
// for i in omiBuildingArray do
2531: LD_ADDR_VAR 0 2
2535: PUSH
2536: LD_VAR 0 7
2540: PUSH
2541: FOR_IN
2542: IFFALSE 2598
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
2544: LD_INT 1
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 5
2552: PPUSH
2553: LD_VAR 0 2
2557: PUSH
2558: LD_INT 1
2560: ARRAY
2561: PPUSH
2562: LD_VAR 0 2
2566: PUSH
2567: LD_INT 2
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 2
2575: PUSH
2576: LD_INT 3
2578: ARRAY
2579: PPUSH
2580: LD_VAR 0 2
2584: PUSH
2585: LD_INT 4
2587: ARRAY
2588: PPUSH
2589: LD_INT 0
2591: PPUSH
2592: CALL 44803 0 8
2596: GO 2541
2598: POP
2599: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2600: LD_ADDR_VAR 0 6
2604: PUSH
2605: LD_INT 22
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: LD_INT 30
2617: PUSH
2618: LD_INT 1
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: PUSH
2634: LD_INT 1
2636: ARRAY
2637: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
2638: LD_VAR 0 6
2642: PPUSH
2643: LD_STRING omikron
2645: PPUSH
2646: CALL_OW 500
// for i := 1 to 2 do
2650: LD_ADDR_VAR 0 2
2654: PUSH
2655: DOUBLE
2656: LD_INT 1
2658: DEC
2659: ST_TO_ADDR
2660: LD_INT 2
2662: PUSH
2663: FOR_TO
2664: IFFALSE 2690
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
2666: LD_VAR 0 6
2670: PPUSH
2671: CALL_OW 274
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 500
2683: PPUSH
2684: CALL_OW 277
2688: GO 2663
2690: POP
2691: POP
// uc_side := 1 ;
2692: LD_ADDR_OWVAR 20
2696: PUSH
2697: LD_INT 1
2699: ST_TO_ADDR
// uc_nation := 1 ;
2700: LD_ADDR_OWVAR 21
2704: PUSH
2705: LD_INT 1
2707: ST_TO_ADDR
// omicronSquad := [ ] ;
2708: LD_ADDR_EXP 63
2712: PUSH
2713: EMPTY
2714: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: LD_INT 22
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 2
2732: PUSH
2733: LD_INT 30
2735: PUSH
2736: LD_INT 32
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 31
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PPUSH
2762: CALL_OW 69
2766: PUSH
2767: FOR_IN
2768: IFFALSE 2887
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
2770: LD_INT 1
2772: PPUSH
2773: LD_INT 1
2775: PPUSH
2776: LD_INT 3
2778: PUSH
2779: LD_INT 4
2781: PUSH
2782: LD_INT 5
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: LD_OWVAR 67
2794: ARRAY
2795: PPUSH
2796: CALL_OW 380
// un := CreateHuman ;
2800: LD_ADDR_VAR 0 3
2804: PUSH
2805: CALL_OW 44
2809: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
2810: LD_ADDR_EXP 63
2814: PUSH
2815: LD_EXP 63
2819: PUSH
2820: LD_VAR 0 3
2824: UNION
2825: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
2826: LD_VAR 0 3
2830: PPUSH
2831: LD_VAR 0 2
2835: PPUSH
2836: CALL_OW 254
2840: PUSH
2841: LD_INT 3
2843: MINUS
2844: PPUSH
2845: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2849: LD_VAR 0 3
2853: PPUSH
2854: LD_VAR 0 2
2858: PPUSH
2859: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_VAR 0 2
2872: PPUSH
2873: LD_INT 8
2875: PPUSH
2876: CALL 14379 0 2
2880: PPUSH
2881: CALL_OW 431
// end ;
2885: GO 2767
2887: POP
2888: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2889: LD_ADDR_VAR 0 2
2893: PUSH
2894: DOUBLE
2895: LD_INT 1
2897: DEC
2898: ST_TO_ADDR
2899: LD_INT 3
2901: PUSH
2902: LD_INT 4
2904: PUSH
2905: LD_INT 5
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_OWVAR 67
2917: ARRAY
2918: PUSH
2919: FOR_TO
2920: IFFALSE 2977
// begin PrepareHuman ( false , 2 , 2 ) ;
2922: LD_INT 0
2924: PPUSH
2925: LD_INT 2
2927: PPUSH
2928: LD_INT 2
2930: PPUSH
2931: CALL_OW 380
// un := CreateHuman ;
2935: LD_ADDR_VAR 0 3
2939: PUSH
2940: CALL_OW 44
2944: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
2945: LD_ADDR_EXP 63
2949: PUSH
2950: LD_EXP 63
2954: PUSH
2955: LD_VAR 0 3
2959: UNION
2960: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
2961: LD_VAR 0 3
2965: PPUSH
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 52
// end ;
2975: GO 2919
2977: POP
2978: POP
// for i := 1 to 2 do
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: DOUBLE
2985: LD_INT 1
2987: DEC
2988: ST_TO_ADDR
2989: LD_INT 2
2991: PUSH
2992: FOR_TO
2993: IFFALSE 3159
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
2995: LD_INT 2
2997: PUSH
2998: LD_INT 3
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: PUSH
3005: LD_VAR 0 2
3009: ARRAY
3010: PPUSH
3011: LD_INT 2
3013: PPUSH
3014: LD_INT 1
3016: PPUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 4
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_VAR 0 2
3031: ARRAY
3032: PPUSH
3033: LD_INT 100
3035: PPUSH
3036: CALL 9247 0 5
// veh := CreateVehicle ;
3040: LD_ADDR_VAR 0 5
3044: PUSH
3045: CALL_OW 45
3049: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
3050: LD_VAR 0 5
3054: PPUSH
3055: LD_INT 28
3057: PPUSH
3058: LD_INT 37
3060: PPUSH
3061: LD_INT 6
3063: PPUSH
3064: LD_INT 0
3066: PPUSH
3067: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
3071: LD_INT 0
3073: PPUSH
3074: LD_INT 3
3076: PPUSH
3077: LD_INT 2
3079: PPUSH
3080: CALL_OW 380
// un := CreateHuman ;
3084: LD_ADDR_VAR 0 3
3088: PUSH
3089: CALL_OW 44
3093: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3094: LD_ADDR_EXP 63
3098: PUSH
3099: LD_EXP 63
3103: PUSH
3104: LD_VAR 0 3
3108: UNION
3109: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3110: LD_VAR 0 3
3114: PPUSH
3115: LD_VAR 0 5
3119: PPUSH
3120: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
3124: LD_VAR 0 3
3128: PPUSH
3129: LD_VAR 0 3
3133: PPUSH
3134: CALL_OW 250
3138: PUSH
3139: LD_INT 3
3141: PLUS
3142: PPUSH
3143: LD_VAR 0 3
3147: PPUSH
3148: CALL_OW 251
3152: PPUSH
3153: CALL_OW 111
// end ;
3157: GO 2992
3159: POP
3160: POP
// end ; end_of_file end_of_file
3161: LD_VAR 0 1
3165: RET
// on BuildingComplete ( building ) do var un , bunkers , sols ;
3166: LD_INT 0
3168: PPUSH
3169: PPUSH
3170: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
3171: LD_VAR 0 1
3175: PPUSH
3176: CALL_OW 255
3180: PUSH
3181: LD_INT 6
3183: EQUAL
3184: PUSH
3185: LD_VAR 0 1
3189: PPUSH
3190: CALL_OW 266
3194: PUSH
3195: LD_INT 32
3197: EQUAL
3198: PUSH
3199: LD_VAR 0 1
3203: PPUSH
3204: CALL_OW 266
3208: PUSH
3209: LD_INT 4
3211: EQUAL
3212: OR
3213: AND
3214: IFFALSE 3332
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
3216: LD_ADDR_VAR 0 4
3220: PUSH
3221: LD_INT 22
3223: PUSH
3224: LD_INT 6
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 21
3233: PUSH
3234: LD_INT 1
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: PUSH
3241: LD_INT 25
3243: PUSH
3244: LD_INT 1
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PUSH
3251: LD_INT 54
3253: PUSH
3254: EMPTY
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PPUSH
3263: CALL_OW 69
3267: ST_TO_ADDR
// for un in sols do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: LD_VAR 0 4
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3330
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
3281: LD_VAR 0 2
3285: PPUSH
3286: CALL_OW 310
3290: PPUSH
3291: CALL_OW 266
3295: PUSH
3296: LD_INT 32
3298: EQUAL
3299: IFFALSE 3303
// continue ;
3301: GO 3278
// ComExit ( un ) ;
3303: LD_VAR 0 2
3307: PPUSH
3308: CALL 41452 0 1
// AddComEnterUnit ( un , building ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_VAR 0 1
3321: PPUSH
3322: CALL_OW 180
// break ;
3326: GO 3330
// end ;
3328: GO 3278
3330: POP
3331: POP
// end ; end ; end_of_file
3332: PPOPN 4
3334: END
// export currentTeam , kirovBaseUnits ; export function MissionIntro ; var un , selectedPeople ; begin
3335: LD_INT 0
3337: PPUSH
3338: PPUSH
3339: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
3340: LD_EXP 40
3344: PUSH
3345: LD_EXP 52
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: PPUSH
3354: CALL_OW 87
// if not Belkov then
3358: LD_EXP 44
3362: NOT
3363: IFFALSE 3439
// begin Say ( Kurin , D1a-Kur-1 ) ;
3365: LD_EXP 52
3369: PPUSH
3370: LD_STRING D1a-Kur-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
3377: LD_EXP 40
3381: PPUSH
3382: LD_STRING D1a-Bur-1
3384: PPUSH
3385: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
3389: LD_EXP 52
3393: PPUSH
3394: LD_STRING D1a-Kur-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
3401: LD_EXP 52
3405: PPUSH
3406: LD_STRING D1a-Kur-2a
3408: PPUSH
3409: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
3413: LD_EXP 52
3417: PPUSH
3418: LD_STRING D1a-Kur-2b
3420: PPUSH
3421: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
3425: LD_EXP 40
3429: PPUSH
3430: LD_STRING D1a-Bur-2
3432: PPUSH
3433: CALL_OW 88
// end else
3437: GO 3475
// begin Say ( Kurin , D1b-Kur-1 ) ;
3439: LD_EXP 52
3443: PPUSH
3444: LD_STRING D1b-Kur-1
3446: PPUSH
3447: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
3451: LD_EXP 44
3455: PPUSH
3456: LD_STRING D1b-Bel-1
3458: PPUSH
3459: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
3463: LD_EXP 52
3467: PPUSH
3468: LD_STRING D1b-Kur-2
3470: PPUSH
3471: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
3475: LD_EXP 52
3479: PPUSH
3480: LD_STRING D2-Kur-1
3482: PPUSH
3483: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
3487: LD_EXP 40
3491: PPUSH
3492: LD_STRING D2-Bur-1
3494: PPUSH
3495: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
3499: LD_EXP 52
3503: PPUSH
3504: LD_STRING D2-Kur-2
3506: PPUSH
3507: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
3511: LD_EXP 40
3515: PPUSH
3516: LD_STRING D2-Bur-2
3518: PPUSH
3519: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
3523: LD_EXP 52
3527: PPUSH
3528: LD_STRING D2-Kur-3
3530: PPUSH
3531: CALL_OW 88
// PrepareAmericansMissionIntro ;
3535: CALL 1843 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
3539: LD_INT 1
3541: PPUSH
3542: LD_INT 6
3544: PPUSH
3545: LD_INT 1
3547: PPUSH
3548: LD_INT 1
3550: PPUSH
3551: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
3555: LD_INT 3
3557: PPUSH
3558: LD_INT 5
3560: PPUSH
3561: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
3565: LD_EXP 53
3569: PUSH
3570: LD_EXP 59
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PPUSH
3579: CALL_OW 87
// wait ( 0 0$3 ) ;
3583: LD_INT 105
3585: PPUSH
3586: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
3590: LD_EXP 53
3594: PPUSH
3595: LD_STRING D2-Pop-3
3597: PPUSH
3598: CALL_OW 94
// wait ( 0 0$0.3 ) ;
3602: LD_INT 10
3604: PPUSH
3605: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
3609: LD_EXP 40
3613: PUSH
3614: LD_EXP 52
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PPUSH
3623: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
3627: LD_EXP 52
3631: PPUSH
3632: LD_STRING D2-Kur-4
3634: PPUSH
3635: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
3639: LD_EXP 40
3643: PPUSH
3644: LD_STRING D2-Bur-4
3646: PPUSH
3647: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
3651: LD_EXP 52
3655: PPUSH
3656: LD_STRING D2-Kur-5
3658: PPUSH
3659: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
3663: LD_EXP 40
3667: PPUSH
3668: LD_STRING D2-Bur-5
3670: PPUSH
3671: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
3675: LD_EXP 52
3679: PPUSH
3680: LD_STRING D2-Kur-6
3682: PPUSH
3683: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
3687: LD_EXP 40
3691: PPUSH
3692: LD_STRING D2-Bur-4
3694: PPUSH
3695: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
3699: LD_ADDR_EXP 67
3703: PUSH
3704: LD_EXP 54
3708: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
3709: LD_ADDR_EXP 67
3713: PUSH
3714: LD_EXP 67
3718: PUSH
3719: LD_EXP 49
3723: ADD
3724: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: LD_STRING text
3732: PPUSH
3733: LD_INT 6
3735: PPUSH
3736: LD_INT 6
3738: PPUSH
3739: LD_INT -5
3741: PUSH
3742: LD_EXP 40
3746: PUSH
3747: LD_EXP 41
3751: PUSH
3752: LD_EXP 43
3756: PUSH
3757: LD_EXP 42
3761: PUSH
3762: LD_EXP 44
3766: PUSH
3767: LD_INT -6
3769: PUSH
3770: LD_INT -2
3772: PUSH
3773: LD_INT -3
3775: PUSH
3776: LD_INT -5
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: PUSH
3791: LD_EXP 67
3795: ADD
3796: PUSH
3797: LD_INT -6
3799: PUSH
3800: LD_INT -4
3802: PUSH
3803: LD_EXP 52
3807: PUSH
3808: LD_EXP 53
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: ADD
3819: PPUSH
3820: LD_INT 1
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: LD_INT 2
3828: PUSH
3829: LD_INT 1
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: LD_INT 4
3838: PUSH
3839: LD_INT 1
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 42
3856: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
3857: LD_EXP 67
3861: PPUSH
3862: LD_INT 6
3864: PPUSH
3865: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 3
3876: PPUSH
3877: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
3881: LD_EXP 53
3885: PPUSH
3886: LD_INT 135
3888: PPUSH
3889: LD_INT 67
3891: PPUSH
3892: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
3896: LD_EXP 59
3900: PPUSH
3901: LD_INT 209
3903: PPUSH
3904: LD_INT 164
3906: PPUSH
3907: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
3911: LD_ADDR_EXP 62
3915: PUSH
3916: LD_INT 22
3918: PUSH
3919: LD_INT 6
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PUSH
3926: LD_INT 30
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PPUSH
3940: CALL_OW 69
3944: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
3945: LD_ADDR_EXP 67
3949: PUSH
3950: LD_EXP 67
3954: PUSH
3955: LD_VAR 0 3
3959: DIFF
3960: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
3961: LD_EXP 67
3965: PUSH
3966: LD_INT 1
3968: ARRAY
3969: PPUSH
3970: LD_INT 2
3972: PPUSH
3973: CALL_OW 336
// for un in selectedPeople do
3977: LD_ADDR_VAR 0 2
3981: PUSH
3982: LD_VAR 0 3
3986: PUSH
3987: FOR_IN
3988: IFFALSE 4001
// ComExitBuilding ( un ) ;
3990: LD_VAR 0 2
3994: PPUSH
3995: CALL_OW 122
3999: GO 3987
4001: POP
4002: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
4003: LD_ADDR_EXP 66
4007: PUSH
4008: LD_VAR 0 3
4012: PUSH
4013: LD_EXP 40
4017: PUSH
4018: LD_EXP 41
4022: PUSH
4023: LD_EXP 43
4027: PUSH
4028: LD_EXP 44
4032: PUSH
4033: LD_EXP 42
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: UNION
4045: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
4046: LD_EXP 66
4050: PPUSH
4051: LD_INT 113
4053: PPUSH
4054: LD_INT 97
4056: PPUSH
4057: CALL_OW 171
// for un in kirovBaseUnits do
4061: LD_ADDR_VAR 0 2
4065: PUSH
4066: LD_EXP 67
4070: PUSH
4071: FOR_IN
4072: IFFALSE 4109
// begin if IsInUnit ( un ) = 0 then
4074: LD_VAR 0 2
4078: PPUSH
4079: CALL_OW 310
4083: PUSH
4084: LD_INT 0
4086: EQUAL
4087: IFFALSE 4107
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
4089: LD_VAR 0 2
4093: PPUSH
4094: LD_EXP 62
4098: PUSH
4099: LD_INT 1
4101: ARRAY
4102: PPUSH
4103: CALL_OW 120
// end ;
4107: GO 4071
4109: POP
4110: POP
// ChangeMissionObjectives ( M1 ) ;
4111: LD_STRING M1
4113: PPUSH
4114: CALL_OW 337
// Query ( QReadyInfo ) ;
4118: LD_STRING QReadyInfo
4120: PPUSH
4121: CALL_OW 97
// wait ( 0 0$5 ) ;
4125: LD_INT 175
4127: PPUSH
4128: CALL_OW 67
// for un in kirovBaseUnits do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: LD_EXP 67
4141: PUSH
4142: FOR_IN
4143: IFFALSE 4196
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
4145: LD_VAR 0 2
4149: PPUSH
4150: CALL_OW 310
4154: PUSH
4155: LD_INT 0
4157: EQUAL
4158: PUSH
4159: LD_VAR 0 2
4163: PPUSH
4164: CALL_OW 257
4168: PUSH
4169: LD_INT 2
4171: EQUAL
4172: NOT
4173: AND
4174: IFFALSE 4194
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
4176: LD_VAR 0 2
4180: PPUSH
4181: LD_EXP 62
4185: PUSH
4186: LD_INT 2
4188: ARRAY
4189: PPUSH
4190: CALL_OW 120
// end ;
4194: GO 4142
4196: POP
4197: POP
// UpgradeKirovBase ;
4198: CALL 1604 0 0
// end ; end_of_file
4202: LD_VAR 0 1
4206: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4207: LD_INT 0
4209: PPUSH
// ar_miner := 81 ;
4210: LD_ADDR_EXP 75
4214: PUSH
4215: LD_INT 81
4217: ST_TO_ADDR
// ar_crane := 88 ;
4218: LD_ADDR_EXP 74
4222: PUSH
4223: LD_INT 88
4225: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4226: LD_ADDR_EXP 69
4230: PUSH
4231: LD_INT 89
4233: ST_TO_ADDR
// us_hack := 99 ;
4234: LD_ADDR_EXP 70
4238: PUSH
4239: LD_INT 99
4241: ST_TO_ADDR
// us_artillery := 97 ;
4242: LD_ADDR_EXP 71
4246: PUSH
4247: LD_INT 97
4249: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4250: LD_ADDR_EXP 72
4254: PUSH
4255: LD_INT 91
4257: ST_TO_ADDR
// ar_mortar := 92 ;
4258: LD_ADDR_EXP 73
4262: PUSH
4263: LD_INT 92
4265: ST_TO_ADDR
// ru_flamethrower := 93 ;
4266: LD_ADDR_EXP 76
4270: PUSH
4271: LD_INT 93
4273: ST_TO_ADDR
// ru_radar := 98 ;
4274: LD_ADDR_EXP 68
4278: PUSH
4279: LD_INT 98
4281: ST_TO_ADDR
// tech_Artillery := 80 ;
4282: LD_ADDR_EXP 77
4286: PUSH
4287: LD_INT 80
4289: ST_TO_ADDR
// tech_RadMat := 81 ;
4290: LD_ADDR_EXP 78
4294: PUSH
4295: LD_INT 81
4297: ST_TO_ADDR
// tech_BasicTools := 82 ;
4298: LD_ADDR_EXP 79
4302: PUSH
4303: LD_INT 82
4305: ST_TO_ADDR
// tech_Cargo := 83 ;
4306: LD_ADDR_EXP 80
4310: PUSH
4311: LD_INT 83
4313: ST_TO_ADDR
// tech_Track := 84 ;
4314: LD_ADDR_EXP 81
4318: PUSH
4319: LD_INT 84
4321: ST_TO_ADDR
// tech_Crane := 85 ;
4322: LD_ADDR_EXP 82
4326: PUSH
4327: LD_INT 85
4329: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4330: LD_ADDR_EXP 83
4334: PUSH
4335: LD_INT 86
4337: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4338: LD_ADDR_EXP 84
4342: PUSH
4343: LD_INT 87
4345: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4346: LD_ADDR_EXP 85
4350: PUSH
4351: LD_INT 88
4353: ST_TO_ADDR
// class_mastodont := 31 ;
4354: LD_ADDR_EXP 86
4358: PUSH
4359: LD_INT 31
4361: ST_TO_ADDR
// class_horse := 21 ;
4362: LD_ADDR_EXP 87
4366: PUSH
4367: LD_INT 21
4369: ST_TO_ADDR
// end ;
4370: LD_VAR 0 1
4374: RET
// every 1 do
4375: GO 4377
4377: DISABLE
// InitGlobalVariables ; end_of_file
4378: CALL 4207 0 0
4382: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4383: LD_INT 0
4385: PPUSH
4386: PPUSH
// if exist_mode then
4387: LD_VAR 0 2
4391: IFFALSE 4416
// unit := CreateCharacter ( prefix & ident ) else
4393: LD_ADDR_VAR 0 5
4397: PUSH
4398: LD_VAR 0 3
4402: PUSH
4403: LD_VAR 0 1
4407: STR
4408: PPUSH
4409: CALL_OW 34
4413: ST_TO_ADDR
4414: GO 4431
// unit := NewCharacter ( ident ) ;
4416: LD_ADDR_VAR 0 5
4420: PUSH
4421: LD_VAR 0 1
4425: PPUSH
4426: CALL_OW 25
4430: ST_TO_ADDR
// result := unit ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_VAR 0 5
4440: ST_TO_ADDR
// end ;
4441: LD_VAR 0 4
4445: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4446: LD_INT 0
4448: PPUSH
4449: PPUSH
// if not side or not nation then
4450: LD_VAR 0 1
4454: NOT
4455: PUSH
4456: LD_VAR 0 2
4460: NOT
4461: OR
4462: IFFALSE 4466
// exit ;
4464: GO 5234
// case nation of nation_american :
4466: LD_VAR 0 2
4470: PUSH
4471: LD_INT 1
4473: DOUBLE
4474: EQUAL
4475: IFTRUE 4479
4477: GO 4693
4479: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4480: LD_ADDR_VAR 0 4
4484: PUSH
4485: LD_INT 35
4487: PUSH
4488: LD_INT 45
4490: PUSH
4491: LD_INT 46
4493: PUSH
4494: LD_INT 47
4496: PUSH
4497: LD_INT 82
4499: PUSH
4500: LD_INT 83
4502: PUSH
4503: LD_INT 84
4505: PUSH
4506: LD_INT 85
4508: PUSH
4509: LD_INT 86
4511: PUSH
4512: LD_INT 1
4514: PUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 6
4520: PUSH
4521: LD_INT 15
4523: PUSH
4524: LD_INT 16
4526: PUSH
4527: LD_INT 7
4529: PUSH
4530: LD_INT 12
4532: PUSH
4533: LD_INT 13
4535: PUSH
4536: LD_INT 10
4538: PUSH
4539: LD_INT 14
4541: PUSH
4542: LD_INT 20
4544: PUSH
4545: LD_INT 21
4547: PUSH
4548: LD_INT 22
4550: PUSH
4551: LD_INT 25
4553: PUSH
4554: LD_INT 32
4556: PUSH
4557: LD_INT 27
4559: PUSH
4560: LD_INT 36
4562: PUSH
4563: LD_INT 69
4565: PUSH
4566: LD_INT 39
4568: PUSH
4569: LD_INT 34
4571: PUSH
4572: LD_INT 40
4574: PUSH
4575: LD_INT 48
4577: PUSH
4578: LD_INT 49
4580: PUSH
4581: LD_INT 50
4583: PUSH
4584: LD_INT 51
4586: PUSH
4587: LD_INT 52
4589: PUSH
4590: LD_INT 53
4592: PUSH
4593: LD_INT 54
4595: PUSH
4596: LD_INT 55
4598: PUSH
4599: LD_INT 56
4601: PUSH
4602: LD_INT 57
4604: PUSH
4605: LD_INT 58
4607: PUSH
4608: LD_INT 59
4610: PUSH
4611: LD_INT 60
4613: PUSH
4614: LD_INT 61
4616: PUSH
4617: LD_INT 62
4619: PUSH
4620: LD_INT 80
4622: PUSH
4623: LD_INT 82
4625: PUSH
4626: LD_INT 83
4628: PUSH
4629: LD_INT 84
4631: PUSH
4632: LD_INT 85
4634: PUSH
4635: LD_INT 86
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: ST_TO_ADDR
4691: GO 5158
4693: LD_INT 2
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 4927
4701: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4702: LD_ADDR_VAR 0 4
4706: PUSH
4707: LD_INT 35
4709: PUSH
4710: LD_INT 45
4712: PUSH
4713: LD_INT 46
4715: PUSH
4716: LD_INT 47
4718: PUSH
4719: LD_INT 82
4721: PUSH
4722: LD_INT 83
4724: PUSH
4725: LD_INT 84
4727: PUSH
4728: LD_INT 85
4730: PUSH
4731: LD_INT 87
4733: PUSH
4734: LD_INT 70
4736: PUSH
4737: LD_INT 1
4739: PUSH
4740: LD_INT 11
4742: PUSH
4743: LD_INT 3
4745: PUSH
4746: LD_INT 4
4748: PUSH
4749: LD_INT 5
4751: PUSH
4752: LD_INT 6
4754: PUSH
4755: LD_INT 15
4757: PUSH
4758: LD_INT 18
4760: PUSH
4761: LD_INT 7
4763: PUSH
4764: LD_INT 17
4766: PUSH
4767: LD_INT 8
4769: PUSH
4770: LD_INT 20
4772: PUSH
4773: LD_INT 21
4775: PUSH
4776: LD_INT 22
4778: PUSH
4779: LD_INT 72
4781: PUSH
4782: LD_INT 26
4784: PUSH
4785: LD_INT 69
4787: PUSH
4788: LD_INT 39
4790: PUSH
4791: LD_INT 40
4793: PUSH
4794: LD_INT 41
4796: PUSH
4797: LD_INT 42
4799: PUSH
4800: LD_INT 43
4802: PUSH
4803: LD_INT 48
4805: PUSH
4806: LD_INT 49
4808: PUSH
4809: LD_INT 50
4811: PUSH
4812: LD_INT 51
4814: PUSH
4815: LD_INT 52
4817: PUSH
4818: LD_INT 53
4820: PUSH
4821: LD_INT 54
4823: PUSH
4824: LD_INT 55
4826: PUSH
4827: LD_INT 56
4829: PUSH
4830: LD_INT 60
4832: PUSH
4833: LD_INT 61
4835: PUSH
4836: LD_INT 62
4838: PUSH
4839: LD_INT 66
4841: PUSH
4842: LD_INT 67
4844: PUSH
4845: LD_INT 68
4847: PUSH
4848: LD_INT 81
4850: PUSH
4851: LD_INT 82
4853: PUSH
4854: LD_INT 83
4856: PUSH
4857: LD_INT 84
4859: PUSH
4860: LD_INT 85
4862: PUSH
4863: LD_INT 87
4865: PUSH
4866: LD_INT 88
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: ST_TO_ADDR
4925: GO 5158
4927: LD_INT 3
4929: DOUBLE
4930: EQUAL
4931: IFTRUE 4935
4933: GO 5157
4935: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4936: LD_ADDR_VAR 0 4
4940: PUSH
4941: LD_INT 46
4943: PUSH
4944: LD_INT 47
4946: PUSH
4947: LD_INT 1
4949: PUSH
4950: LD_INT 2
4952: PUSH
4953: LD_INT 82
4955: PUSH
4956: LD_INT 83
4958: PUSH
4959: LD_INT 84
4961: PUSH
4962: LD_INT 85
4964: PUSH
4965: LD_INT 86
4967: PUSH
4968: LD_INT 11
4970: PUSH
4971: LD_INT 9
4973: PUSH
4974: LD_INT 20
4976: PUSH
4977: LD_INT 19
4979: PUSH
4980: LD_INT 21
4982: PUSH
4983: LD_INT 24
4985: PUSH
4986: LD_INT 22
4988: PUSH
4989: LD_INT 25
4991: PUSH
4992: LD_INT 28
4994: PUSH
4995: LD_INT 29
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 31
5003: PUSH
5004: LD_INT 37
5006: PUSH
5007: LD_INT 38
5009: PUSH
5010: LD_INT 32
5012: PUSH
5013: LD_INT 27
5015: PUSH
5016: LD_INT 33
5018: PUSH
5019: LD_INT 69
5021: PUSH
5022: LD_INT 39
5024: PUSH
5025: LD_INT 34
5027: PUSH
5028: LD_INT 40
5030: PUSH
5031: LD_INT 71
5033: PUSH
5034: LD_INT 23
5036: PUSH
5037: LD_INT 44
5039: PUSH
5040: LD_INT 48
5042: PUSH
5043: LD_INT 49
5045: PUSH
5046: LD_INT 50
5048: PUSH
5049: LD_INT 51
5051: PUSH
5052: LD_INT 52
5054: PUSH
5055: LD_INT 53
5057: PUSH
5058: LD_INT 54
5060: PUSH
5061: LD_INT 55
5063: PUSH
5064: LD_INT 56
5066: PUSH
5067: LD_INT 57
5069: PUSH
5070: LD_INT 58
5072: PUSH
5073: LD_INT 59
5075: PUSH
5076: LD_INT 63
5078: PUSH
5079: LD_INT 64
5081: PUSH
5082: LD_INT 65
5084: PUSH
5085: LD_INT 82
5087: PUSH
5088: LD_INT 83
5090: PUSH
5091: LD_INT 84
5093: PUSH
5094: LD_INT 85
5096: PUSH
5097: LD_INT 86
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: ST_TO_ADDR
5155: GO 5158
5157: POP
// if state > - 1 and state < 3 then
5158: LD_VAR 0 3
5162: PUSH
5163: LD_INT 1
5165: NEG
5166: GREATER
5167: PUSH
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 3
5175: LESS
5176: AND
5177: IFFALSE 5234
// for i in result do
5179: LD_ADDR_VAR 0 5
5183: PUSH
5184: LD_VAR 0 4
5188: PUSH
5189: FOR_IN
5190: IFFALSE 5232
// if GetTech ( i , side ) <> state then
5192: LD_VAR 0 5
5196: PPUSH
5197: LD_VAR 0 1
5201: PPUSH
5202: CALL_OW 321
5206: PUSH
5207: LD_VAR 0 3
5211: NONEQUAL
5212: IFFALSE 5230
// result := result diff i ;
5214: LD_ADDR_VAR 0 4
5218: PUSH
5219: LD_VAR 0 4
5223: PUSH
5224: LD_VAR 0 5
5228: DIFF
5229: ST_TO_ADDR
5230: GO 5189
5232: POP
5233: POP
// end ;
5234: LD_VAR 0 4
5238: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5239: LD_INT 0
5241: PPUSH
5242: PPUSH
5243: PPUSH
// result := true ;
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: LD_INT 1
5251: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5252: LD_ADDR_VAR 0 5
5256: PUSH
5257: LD_VAR 0 2
5261: PPUSH
5262: CALL_OW 480
5266: ST_TO_ADDR
// if not tmp then
5267: LD_VAR 0 5
5271: NOT
5272: IFFALSE 5276
// exit ;
5274: GO 5325
// for i in tmp do
5276: LD_ADDR_VAR 0 4
5280: PUSH
5281: LD_VAR 0 5
5285: PUSH
5286: FOR_IN
5287: IFFALSE 5323
// if GetTech ( i , side ) <> state_researched then
5289: LD_VAR 0 4
5293: PPUSH
5294: LD_VAR 0 1
5298: PPUSH
5299: CALL_OW 321
5303: PUSH
5304: LD_INT 2
5306: NONEQUAL
5307: IFFALSE 5321
// begin result := false ;
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: LD_INT 0
5316: ST_TO_ADDR
// exit ;
5317: POP
5318: POP
5319: GO 5325
// end ;
5321: GO 5286
5323: POP
5324: POP
// end ;
5325: LD_VAR 0 3
5329: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5330: LD_INT 0
5332: PPUSH
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
5338: PPUSH
5339: PPUSH
5340: PPUSH
5341: PPUSH
5342: PPUSH
5343: PPUSH
5344: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5345: LD_VAR 0 1
5349: NOT
5350: PUSH
5351: LD_VAR 0 1
5355: PPUSH
5356: CALL_OW 257
5360: PUSH
5361: LD_INT 9
5363: NONEQUAL
5364: OR
5365: IFFALSE 5369
// exit ;
5367: GO 5942
// side := GetSide ( unit ) ;
5369: LD_ADDR_VAR 0 9
5373: PUSH
5374: LD_VAR 0 1
5378: PPUSH
5379: CALL_OW 255
5383: ST_TO_ADDR
// tech_space := tech_spacanom ;
5384: LD_ADDR_VAR 0 12
5388: PUSH
5389: LD_INT 29
5391: ST_TO_ADDR
// tech_time := tech_taurad ;
5392: LD_ADDR_VAR 0 13
5396: PUSH
5397: LD_INT 28
5399: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5400: LD_ADDR_VAR 0 11
5404: PUSH
5405: LD_VAR 0 1
5409: PPUSH
5410: CALL_OW 310
5414: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5415: LD_VAR 0 11
5419: PPUSH
5420: CALL_OW 247
5424: PUSH
5425: LD_INT 2
5427: EQUAL
5428: IFFALSE 5432
// exit ;
5430: GO 5942
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5432: LD_ADDR_VAR 0 8
5436: PUSH
5437: LD_INT 81
5439: PUSH
5440: LD_VAR 0 9
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 3
5451: PUSH
5452: LD_INT 21
5454: PUSH
5455: LD_INT 3
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 69
5474: ST_TO_ADDR
// if not tmp then
5475: LD_VAR 0 8
5479: NOT
5480: IFFALSE 5484
// exit ;
5482: GO 5942
// if in_unit then
5484: LD_VAR 0 11
5488: IFFALSE 5512
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5490: LD_ADDR_VAR 0 10
5494: PUSH
5495: LD_VAR 0 8
5499: PPUSH
5500: LD_VAR 0 11
5504: PPUSH
5505: CALL_OW 74
5509: ST_TO_ADDR
5510: GO 5532
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5512: LD_ADDR_VAR 0 10
5516: PUSH
5517: LD_VAR 0 8
5521: PPUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 74
5531: ST_TO_ADDR
// if not enemy then
5532: LD_VAR 0 10
5536: NOT
5537: IFFALSE 5541
// exit ;
5539: GO 5942
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5541: LD_VAR 0 11
5545: PUSH
5546: LD_VAR 0 11
5550: PPUSH
5551: LD_VAR 0 10
5555: PPUSH
5556: CALL_OW 296
5560: PUSH
5561: LD_INT 13
5563: GREATER
5564: AND
5565: PUSH
5566: LD_VAR 0 1
5570: PPUSH
5571: LD_VAR 0 10
5575: PPUSH
5576: CALL_OW 296
5580: PUSH
5581: LD_INT 12
5583: GREATER
5584: OR
5585: IFFALSE 5589
// exit ;
5587: GO 5942
// missile := [ 1 ] ;
5589: LD_ADDR_VAR 0 14
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: EMPTY
5598: LIST
5599: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5600: LD_VAR 0 9
5604: PPUSH
5605: LD_VAR 0 12
5609: PPUSH
5610: CALL_OW 325
5614: IFFALSE 5643
// missile := Replace ( missile , missile + 1 , 2 ) ;
5616: LD_ADDR_VAR 0 14
5620: PUSH
5621: LD_VAR 0 14
5625: PPUSH
5626: LD_VAR 0 14
5630: PUSH
5631: LD_INT 1
5633: PLUS
5634: PPUSH
5635: LD_INT 2
5637: PPUSH
5638: CALL_OW 1
5642: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5643: LD_VAR 0 9
5647: PPUSH
5648: LD_VAR 0 13
5652: PPUSH
5653: CALL_OW 325
5657: PUSH
5658: LD_VAR 0 10
5662: PPUSH
5663: CALL_OW 255
5667: PPUSH
5668: LD_VAR 0 13
5672: PPUSH
5673: CALL_OW 325
5677: NOT
5678: AND
5679: IFFALSE 5708
// missile := Replace ( missile , missile + 1 , 3 ) ;
5681: LD_ADDR_VAR 0 14
5685: PUSH
5686: LD_VAR 0 14
5690: PPUSH
5691: LD_VAR 0 14
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: PPUSH
5700: LD_INT 3
5702: PPUSH
5703: CALL_OW 1
5707: ST_TO_ADDR
// if missile < 2 then
5708: LD_VAR 0 14
5712: PUSH
5713: LD_INT 2
5715: LESS
5716: IFFALSE 5720
// exit ;
5718: GO 5942
// x := GetX ( enemy ) ;
5720: LD_ADDR_VAR 0 4
5724: PUSH
5725: LD_VAR 0 10
5729: PPUSH
5730: CALL_OW 250
5734: ST_TO_ADDR
// y := GetY ( enemy ) ;
5735: LD_ADDR_VAR 0 5
5739: PUSH
5740: LD_VAR 0 10
5744: PPUSH
5745: CALL_OW 251
5749: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5750: LD_ADDR_VAR 0 6
5754: PUSH
5755: LD_VAR 0 4
5759: PUSH
5760: LD_INT 1
5762: NEG
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: CALL_OW 12
5771: PLUS
5772: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5773: LD_ADDR_VAR 0 7
5777: PUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 1
5785: NEG
5786: PPUSH
5787: LD_INT 1
5789: PPUSH
5790: CALL_OW 12
5794: PLUS
5795: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5796: LD_VAR 0 6
5800: PPUSH
5801: LD_VAR 0 7
5805: PPUSH
5806: CALL_OW 488
5810: NOT
5811: IFFALSE 5833
// begin _x := x ;
5813: LD_ADDR_VAR 0 6
5817: PUSH
5818: LD_VAR 0 4
5822: ST_TO_ADDR
// _y := y ;
5823: LD_ADDR_VAR 0 7
5827: PUSH
5828: LD_VAR 0 5
5832: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: LD_INT 1
5840: PPUSH
5841: LD_VAR 0 14
5845: PPUSH
5846: CALL_OW 12
5850: ST_TO_ADDR
// case i of 1 :
5851: LD_VAR 0 3
5855: PUSH
5856: LD_INT 1
5858: DOUBLE
5859: EQUAL
5860: IFTRUE 5864
5862: GO 5881
5864: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5865: LD_VAR 0 1
5869: PPUSH
5870: LD_VAR 0 10
5874: PPUSH
5875: CALL_OW 115
5879: GO 5942
5881: LD_INT 2
5883: DOUBLE
5884: EQUAL
5885: IFTRUE 5889
5887: GO 5911
5889: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5890: LD_VAR 0 1
5894: PPUSH
5895: LD_VAR 0 6
5899: PPUSH
5900: LD_VAR 0 7
5904: PPUSH
5905: CALL_OW 153
5909: GO 5942
5911: LD_INT 3
5913: DOUBLE
5914: EQUAL
5915: IFTRUE 5919
5917: GO 5941
5919: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_VAR 0 6
5929: PPUSH
5930: LD_VAR 0 7
5934: PPUSH
5935: CALL_OW 154
5939: GO 5942
5941: POP
// end ;
5942: LD_VAR 0 2
5946: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5947: LD_INT 0
5949: PPUSH
5950: PPUSH
5951: PPUSH
5952: PPUSH
5953: PPUSH
5954: PPUSH
// if not unit or not building then
5955: LD_VAR 0 1
5959: NOT
5960: PUSH
5961: LD_VAR 0 2
5965: NOT
5966: OR
5967: IFFALSE 5971
// exit ;
5969: GO 6129
// x := GetX ( building ) ;
5971: LD_ADDR_VAR 0 5
5975: PUSH
5976: LD_VAR 0 2
5980: PPUSH
5981: CALL_OW 250
5985: ST_TO_ADDR
// y := GetY ( building ) ;
5986: LD_ADDR_VAR 0 6
5990: PUSH
5991: LD_VAR 0 2
5995: PPUSH
5996: CALL_OW 251
6000: ST_TO_ADDR
// for i = 0 to 5 do
6001: LD_ADDR_VAR 0 4
6005: PUSH
6006: DOUBLE
6007: LD_INT 0
6009: DEC
6010: ST_TO_ADDR
6011: LD_INT 5
6013: PUSH
6014: FOR_TO
6015: IFFALSE 6127
// begin _x := ShiftX ( x , i , 3 ) ;
6017: LD_ADDR_VAR 0 7
6021: PUSH
6022: LD_VAR 0 5
6026: PPUSH
6027: LD_VAR 0 4
6031: PPUSH
6032: LD_INT 3
6034: PPUSH
6035: CALL_OW 272
6039: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
6040: LD_ADDR_VAR 0 8
6044: PUSH
6045: LD_VAR 0 6
6049: PPUSH
6050: LD_VAR 0 4
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: CALL_OW 273
6062: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
6063: LD_VAR 0 7
6067: PPUSH
6068: LD_VAR 0 8
6072: PPUSH
6073: CALL_OW 488
6077: NOT
6078: IFFALSE 6082
// continue ;
6080: GO 6014
// if HexInfo ( _x , _y ) = 0 then
6082: LD_VAR 0 7
6086: PPUSH
6087: LD_VAR 0 8
6091: PPUSH
6092: CALL_OW 428
6096: PUSH
6097: LD_INT 0
6099: EQUAL
6100: IFFALSE 6125
// begin ComMoveXY ( unit , _x , _y ) ;
6102: LD_VAR 0 1
6106: PPUSH
6107: LD_VAR 0 7
6111: PPUSH
6112: LD_VAR 0 8
6116: PPUSH
6117: CALL_OW 111
// exit ;
6121: POP
6122: POP
6123: GO 6129
// end ; end ;
6125: GO 6014
6127: POP
6128: POP
// end ;
6129: LD_VAR 0 3
6133: RET
// export function ScanBase ( side , base_area ) ; begin
6134: LD_INT 0
6136: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_VAR 0 2
6146: PPUSH
6147: LD_INT 81
6149: PUSH
6150: LD_VAR 0 1
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PPUSH
6159: CALL_OW 70
6163: ST_TO_ADDR
// end ;
6164: LD_VAR 0 3
6168: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
6173: PPUSH
6174: PPUSH
// result := false ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 0
6182: ST_TO_ADDR
// side := GetSide ( unit ) ;
6183: LD_ADDR_VAR 0 3
6187: PUSH
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL_OW 255
6197: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6198: LD_ADDR_VAR 0 4
6202: PUSH
6203: LD_VAR 0 1
6207: PPUSH
6208: CALL_OW 248
6212: ST_TO_ADDR
// case nat of 1 :
6213: LD_VAR 0 4
6217: PUSH
6218: LD_INT 1
6220: DOUBLE
6221: EQUAL
6222: IFTRUE 6226
6224: GO 6237
6226: POP
// tech := tech_lassight ; 2 :
6227: LD_ADDR_VAR 0 5
6231: PUSH
6232: LD_INT 12
6234: ST_TO_ADDR
6235: GO 6276
6237: LD_INT 2
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6256
6245: POP
// tech := tech_mortar ; 3 :
6246: LD_ADDR_VAR 0 5
6250: PUSH
6251: LD_INT 41
6253: ST_TO_ADDR
6254: GO 6276
6256: LD_INT 3
6258: DOUBLE
6259: EQUAL
6260: IFTRUE 6264
6262: GO 6275
6264: POP
// tech := tech_bazooka ; end ;
6265: LD_ADDR_VAR 0 5
6269: PUSH
6270: LD_INT 44
6272: ST_TO_ADDR
6273: GO 6276
6275: POP
// if Researched ( side , tech ) then
6276: LD_VAR 0 3
6280: PPUSH
6281: LD_VAR 0 5
6285: PPUSH
6286: CALL_OW 325
6290: IFFALSE 6317
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6292: LD_ADDR_VAR 0 2
6296: PUSH
6297: LD_INT 5
6299: PUSH
6300: LD_INT 8
6302: PUSH
6303: LD_INT 9
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_VAR 0 4
6315: ARRAY
6316: ST_TO_ADDR
// end ;
6317: LD_VAR 0 2
6321: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6322: LD_INT 0
6324: PPUSH
6325: PPUSH
6326: PPUSH
// if not mines then
6327: LD_VAR 0 2
6331: NOT
6332: IFFALSE 6336
// exit ;
6334: GO 6480
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6336: LD_ADDR_VAR 0 5
6340: PUSH
6341: LD_INT 81
6343: PUSH
6344: LD_VAR 0 1
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 3
6355: PUSH
6356: LD_INT 21
6358: PUSH
6359: LD_INT 3
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: ST_TO_ADDR
// for i in mines do
6379: LD_ADDR_VAR 0 4
6383: PUSH
6384: LD_VAR 0 2
6388: PUSH
6389: FOR_IN
6390: IFFALSE 6478
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6392: LD_VAR 0 4
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PPUSH
6401: LD_VAR 0 4
6405: PUSH
6406: LD_INT 2
6408: ARRAY
6409: PPUSH
6410: CALL_OW 458
6414: NOT
6415: IFFALSE 6419
// continue ;
6417: GO 6389
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6419: LD_VAR 0 4
6423: PUSH
6424: LD_INT 1
6426: ARRAY
6427: PPUSH
6428: LD_VAR 0 4
6432: PUSH
6433: LD_INT 2
6435: ARRAY
6436: PPUSH
6437: CALL_OW 428
6441: PUSH
6442: LD_VAR 0 5
6446: IN
6447: IFFALSE 6476
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6449: LD_VAR 0 4
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: PPUSH
6458: LD_VAR 0 4
6462: PUSH
6463: LD_INT 2
6465: ARRAY
6466: PPUSH
6467: LD_VAR 0 1
6471: PPUSH
6472: CALL_OW 456
// end ;
6476: GO 6389
6478: POP
6479: POP
// end ;
6480: LD_VAR 0 3
6484: RET
// export function Count ( array ) ; var i ; begin
6485: LD_INT 0
6487: PPUSH
6488: PPUSH
// result := 0 ;
6489: LD_ADDR_VAR 0 2
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
// for i in array do
6497: LD_ADDR_VAR 0 3
6501: PUSH
6502: LD_VAR 0 1
6506: PUSH
6507: FOR_IN
6508: IFFALSE 6532
// if i then
6510: LD_VAR 0 3
6514: IFFALSE 6530
// result := result + 1 ;
6516: LD_ADDR_VAR 0 2
6520: PUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: PLUS
6529: ST_TO_ADDR
6530: GO 6507
6532: POP
6533: POP
// end ;
6534: LD_VAR 0 2
6538: RET
// export function IsEmpty ( building ) ; begin
6539: LD_INT 0
6541: PPUSH
// if not building then
6542: LD_VAR 0 1
6546: NOT
6547: IFFALSE 6551
// exit ;
6549: GO 6594
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6551: LD_ADDR_VAR 0 2
6555: PUSH
6556: LD_VAR 0 1
6560: PUSH
6561: LD_INT 22
6563: PUSH
6564: LD_VAR 0 1
6568: PPUSH
6569: CALL_OW 255
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 58
6580: PUSH
6581: EMPTY
6582: LIST
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PPUSH
6588: CALL_OW 69
6592: IN
6593: ST_TO_ADDR
// end ;
6594: LD_VAR 0 2
6598: RET
// export function IsNotFull ( building ) ; begin
6599: LD_INT 0
6601: PPUSH
// if not building then
6602: LD_VAR 0 1
6606: NOT
6607: IFFALSE 6611
// exit ;
6609: GO 6630
// result := UnitsInside ( building ) < 6 ;
6611: LD_ADDR_VAR 0 2
6615: PUSH
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 313
6625: PUSH
6626: LD_INT 6
6628: LESS
6629: ST_TO_ADDR
// end ;
6630: LD_VAR 0 2
6634: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6635: LD_INT 0
6637: PPUSH
6638: PPUSH
6639: PPUSH
6640: PPUSH
// tmp := [ ] ;
6641: LD_ADDR_VAR 0 3
6645: PUSH
6646: EMPTY
6647: ST_TO_ADDR
// list := [ ] ;
6648: LD_ADDR_VAR 0 5
6652: PUSH
6653: EMPTY
6654: ST_TO_ADDR
// for i = 16 to 25 do
6655: LD_ADDR_VAR 0 4
6659: PUSH
6660: DOUBLE
6661: LD_INT 16
6663: DEC
6664: ST_TO_ADDR
6665: LD_INT 25
6667: PUSH
6668: FOR_TO
6669: IFFALSE 6742
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6671: LD_ADDR_VAR 0 3
6675: PUSH
6676: LD_VAR 0 3
6680: PUSH
6681: LD_INT 22
6683: PUSH
6684: LD_VAR 0 1
6688: PPUSH
6689: CALL_OW 255
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 91
6700: PUSH
6701: LD_VAR 0 1
6705: PUSH
6706: LD_INT 6
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 30
6716: PUSH
6717: LD_VAR 0 4
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: PPUSH
6734: CALL_OW 69
6738: ADD
6739: ST_TO_ADDR
6740: GO 6668
6742: POP
6743: POP
// for i = 1 to tmp do
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: DOUBLE
6750: LD_INT 1
6752: DEC
6753: ST_TO_ADDR
6754: LD_VAR 0 3
6758: PUSH
6759: FOR_TO
6760: IFFALSE 6848
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6762: LD_ADDR_VAR 0 5
6766: PUSH
6767: LD_VAR 0 5
6771: PUSH
6772: LD_VAR 0 3
6776: PUSH
6777: LD_VAR 0 4
6781: ARRAY
6782: PPUSH
6783: CALL_OW 266
6787: PUSH
6788: LD_VAR 0 3
6792: PUSH
6793: LD_VAR 0 4
6797: ARRAY
6798: PPUSH
6799: CALL_OW 250
6803: PUSH
6804: LD_VAR 0 3
6808: PUSH
6809: LD_VAR 0 4
6813: ARRAY
6814: PPUSH
6815: CALL_OW 251
6819: PUSH
6820: LD_VAR 0 3
6824: PUSH
6825: LD_VAR 0 4
6829: ARRAY
6830: PPUSH
6831: CALL_OW 254
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: PUSH
6842: EMPTY
6843: LIST
6844: ADD
6845: ST_TO_ADDR
6846: GO 6759
6848: POP
6849: POP
// result := list ;
6850: LD_ADDR_VAR 0 2
6854: PUSH
6855: LD_VAR 0 5
6859: ST_TO_ADDR
// end ;
6860: LD_VAR 0 2
6864: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6865: LD_INT 0
6867: PPUSH
6868: PPUSH
6869: PPUSH
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
// if not factory then
6874: LD_VAR 0 1
6878: NOT
6879: IFFALSE 6883
// exit ;
6881: GO 7476
// if control = control_apeman then
6883: LD_VAR 0 4
6887: PUSH
6888: LD_INT 5
6890: EQUAL
6891: IFFALSE 7000
// begin tmp := UnitsInside ( factory ) ;
6893: LD_ADDR_VAR 0 8
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 313
6907: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6908: LD_VAR 0 8
6912: PPUSH
6913: LD_INT 25
6915: PUSH
6916: LD_INT 12
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PPUSH
6923: CALL_OW 72
6927: NOT
6928: IFFALSE 6938
// control := control_manual ;
6930: LD_ADDR_VAR 0 4
6934: PUSH
6935: LD_INT 1
6937: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6938: LD_ADDR_VAR 0 8
6942: PUSH
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL 6635 0 1
6952: ST_TO_ADDR
// if tmp then
6953: LD_VAR 0 8
6957: IFFALSE 7000
// begin for i in tmp do
6959: LD_ADDR_VAR 0 7
6963: PUSH
6964: LD_VAR 0 8
6968: PUSH
6969: FOR_IN
6970: IFFALSE 6998
// if i [ 1 ] = b_ext_radio then
6972: LD_VAR 0 7
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PUSH
6981: LD_INT 22
6983: EQUAL
6984: IFFALSE 6996
// begin control := control_remote ;
6986: LD_ADDR_VAR 0 4
6990: PUSH
6991: LD_INT 2
6993: ST_TO_ADDR
// break ;
6994: GO 6998
// end ;
6996: GO 6969
6998: POP
6999: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7000: LD_VAR 0 1
7004: PPUSH
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_VAR 0 3
7014: PPUSH
7015: LD_VAR 0 4
7019: PPUSH
7020: LD_VAR 0 5
7024: PPUSH
7025: CALL_OW 448
7029: IFFALSE 7064
// begin result := [ chassis , engine , control , weapon ] ;
7031: LD_ADDR_VAR 0 6
7035: PUSH
7036: LD_VAR 0 2
7040: PUSH
7041: LD_VAR 0 3
7045: PUSH
7046: LD_VAR 0 4
7050: PUSH
7051: LD_VAR 0 5
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: ST_TO_ADDR
// exit ;
7062: GO 7476
// end ; _chassis := AvailableChassisList ( factory ) ;
7064: LD_ADDR_VAR 0 9
7068: PUSH
7069: LD_VAR 0 1
7073: PPUSH
7074: CALL_OW 475
7078: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7079: LD_ADDR_VAR 0 11
7083: PUSH
7084: LD_VAR 0 1
7088: PPUSH
7089: CALL_OW 476
7093: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7094: LD_ADDR_VAR 0 12
7098: PUSH
7099: LD_VAR 0 1
7103: PPUSH
7104: CALL_OW 477
7108: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7109: LD_ADDR_VAR 0 10
7113: PUSH
7114: LD_VAR 0 1
7118: PPUSH
7119: CALL_OW 478
7123: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7124: LD_VAR 0 9
7128: NOT
7129: PUSH
7130: LD_VAR 0 11
7134: NOT
7135: OR
7136: PUSH
7137: LD_VAR 0 12
7141: NOT
7142: OR
7143: PUSH
7144: LD_VAR 0 10
7148: NOT
7149: OR
7150: IFFALSE 7185
// begin result := [ chassis , engine , control , weapon ] ;
7152: LD_ADDR_VAR 0 6
7156: PUSH
7157: LD_VAR 0 2
7161: PUSH
7162: LD_VAR 0 3
7166: PUSH
7167: LD_VAR 0 4
7171: PUSH
7172: LD_VAR 0 5
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: ST_TO_ADDR
// exit ;
7183: GO 7476
// end ; if not chassis in _chassis then
7185: LD_VAR 0 2
7189: PUSH
7190: LD_VAR 0 9
7194: IN
7195: NOT
7196: IFFALSE 7222
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7198: LD_ADDR_VAR 0 2
7202: PUSH
7203: LD_VAR 0 9
7207: PUSH
7208: LD_INT 1
7210: PPUSH
7211: LD_VAR 0 9
7215: PPUSH
7216: CALL_OW 12
7220: ARRAY
7221: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7222: LD_VAR 0 2
7226: PPUSH
7227: LD_VAR 0 3
7231: PPUSH
7232: CALL 7481 0 2
7236: NOT
7237: IFFALSE 7296
// repeat engine := _engine [ 1 ] ;
7239: LD_ADDR_VAR 0 3
7243: PUSH
7244: LD_VAR 0 11
7248: PUSH
7249: LD_INT 1
7251: ARRAY
7252: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7253: LD_ADDR_VAR 0 11
7257: PUSH
7258: LD_VAR 0 11
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: CALL_OW 3
7270: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7271: LD_VAR 0 2
7275: PPUSH
7276: LD_VAR 0 3
7280: PPUSH
7281: CALL 7481 0 2
7285: PUSH
7286: LD_VAR 0 11
7290: PUSH
7291: EMPTY
7292: EQUAL
7293: OR
7294: IFFALSE 7239
// if not control in _control then
7296: LD_VAR 0 4
7300: PUSH
7301: LD_VAR 0 12
7305: IN
7306: NOT
7307: IFFALSE 7333
// control := _control [ rand ( 1 , _control ) ] ;
7309: LD_ADDR_VAR 0 4
7313: PUSH
7314: LD_VAR 0 12
7318: PUSH
7319: LD_INT 1
7321: PPUSH
7322: LD_VAR 0 12
7326: PPUSH
7327: CALL_OW 12
7331: ARRAY
7332: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7333: LD_VAR 0 2
7337: PPUSH
7338: LD_VAR 0 5
7342: PPUSH
7343: CALL 7701 0 2
7347: NOT
7348: IFFALSE 7407
// repeat weapon := _weapon [ 1 ] ;
7350: LD_ADDR_VAR 0 5
7354: PUSH
7355: LD_VAR 0 10
7359: PUSH
7360: LD_INT 1
7362: ARRAY
7363: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7364: LD_ADDR_VAR 0 10
7368: PUSH
7369: LD_VAR 0 10
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: CALL_OW 3
7381: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7382: LD_VAR 0 2
7386: PPUSH
7387: LD_VAR 0 5
7391: PPUSH
7392: CALL 7701 0 2
7396: PUSH
7397: LD_VAR 0 10
7401: PUSH
7402: EMPTY
7403: EQUAL
7404: OR
7405: IFFALSE 7350
// result := [ ] ;
7407: LD_ADDR_VAR 0 6
7411: PUSH
7412: EMPTY
7413: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7414: LD_VAR 0 1
7418: PPUSH
7419: LD_VAR 0 2
7423: PPUSH
7424: LD_VAR 0 3
7428: PPUSH
7429: LD_VAR 0 4
7433: PPUSH
7434: LD_VAR 0 5
7438: PPUSH
7439: CALL_OW 448
7443: IFFALSE 7476
// result := [ chassis , engine , control , weapon ] ;
7445: LD_ADDR_VAR 0 6
7449: PUSH
7450: LD_VAR 0 2
7454: PUSH
7455: LD_VAR 0 3
7459: PUSH
7460: LD_VAR 0 4
7464: PUSH
7465: LD_VAR 0 5
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: ST_TO_ADDR
// end ;
7476: LD_VAR 0 6
7480: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7481: LD_INT 0
7483: PPUSH
// if not chassis or not engine then
7484: LD_VAR 0 1
7488: NOT
7489: PUSH
7490: LD_VAR 0 2
7494: NOT
7495: OR
7496: IFFALSE 7500
// exit ;
7498: GO 7696
// case engine of engine_solar :
7500: LD_VAR 0 2
7504: PUSH
7505: LD_INT 2
7507: DOUBLE
7508: EQUAL
7509: IFTRUE 7513
7511: GO 7551
7513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7514: LD_ADDR_VAR 0 3
7518: PUSH
7519: LD_INT 11
7521: PUSH
7522: LD_INT 12
7524: PUSH
7525: LD_INT 13
7527: PUSH
7528: LD_INT 14
7530: PUSH
7531: LD_INT 1
7533: PUSH
7534: LD_INT 2
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: ST_TO_ADDR
7549: GO 7680
7551: LD_INT 1
7553: DOUBLE
7554: EQUAL
7555: IFTRUE 7559
7557: GO 7621
7559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7560: LD_ADDR_VAR 0 3
7564: PUSH
7565: LD_INT 11
7567: PUSH
7568: LD_INT 12
7570: PUSH
7571: LD_INT 13
7573: PUSH
7574: LD_INT 14
7576: PUSH
7577: LD_INT 1
7579: PUSH
7580: LD_INT 2
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 4
7588: PUSH
7589: LD_INT 5
7591: PUSH
7592: LD_INT 21
7594: PUSH
7595: LD_INT 23
7597: PUSH
7598: LD_INT 22
7600: PUSH
7601: LD_INT 24
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: ST_TO_ADDR
7619: GO 7680
7621: LD_INT 3
7623: DOUBLE
7624: EQUAL
7625: IFTRUE 7629
7627: GO 7679
7629: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7630: LD_ADDR_VAR 0 3
7634: PUSH
7635: LD_INT 13
7637: PUSH
7638: LD_INT 14
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: LD_INT 3
7646: PUSH
7647: LD_INT 4
7649: PUSH
7650: LD_INT 5
7652: PUSH
7653: LD_INT 21
7655: PUSH
7656: LD_INT 22
7658: PUSH
7659: LD_INT 23
7661: PUSH
7662: LD_INT 24
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
7677: GO 7680
7679: POP
// result := ( chassis in result ) ;
7680: LD_ADDR_VAR 0 3
7684: PUSH
7685: LD_VAR 0 1
7689: PUSH
7690: LD_VAR 0 3
7694: IN
7695: ST_TO_ADDR
// end ;
7696: LD_VAR 0 3
7700: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7701: LD_INT 0
7703: PPUSH
// if not chassis or not weapon then
7704: LD_VAR 0 1
7708: NOT
7709: PUSH
7710: LD_VAR 0 2
7714: NOT
7715: OR
7716: IFFALSE 7720
// exit ;
7718: GO 8782
// case weapon of us_machine_gun :
7720: LD_VAR 0 2
7724: PUSH
7725: LD_INT 2
7727: DOUBLE
7728: EQUAL
7729: IFTRUE 7733
7731: GO 7763
7733: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7734: LD_ADDR_VAR 0 3
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: LD_INT 4
7750: PUSH
7751: LD_INT 5
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: ST_TO_ADDR
7761: GO 8766
7763: LD_INT 3
7765: DOUBLE
7766: EQUAL
7767: IFTRUE 7771
7769: GO 7801
7771: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7772: LD_ADDR_VAR 0 3
7776: PUSH
7777: LD_INT 1
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: LD_INT 4
7788: PUSH
7789: LD_INT 5
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: ST_TO_ADDR
7799: GO 8766
7801: LD_INT 11
7803: DOUBLE
7804: EQUAL
7805: IFTRUE 7809
7807: GO 7839
7809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7810: LD_ADDR_VAR 0 3
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: LD_INT 2
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 4
7826: PUSH
7827: LD_INT 5
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: ST_TO_ADDR
7837: GO 8766
7839: LD_INT 4
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7873
7847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7848: LD_ADDR_VAR 0 3
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 4
7861: PUSH
7862: LD_INT 5
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: ST_TO_ADDR
7871: GO 8766
7873: LD_INT 5
7875: DOUBLE
7876: EQUAL
7877: IFTRUE 7881
7879: GO 7907
7881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7882: LD_ADDR_VAR 0 3
7886: PUSH
7887: LD_INT 2
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: LD_INT 4
7895: PUSH
7896: LD_INT 5
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: ST_TO_ADDR
7905: GO 8766
7907: LD_INT 9
7909: DOUBLE
7910: EQUAL
7911: IFTRUE 7915
7913: GO 7941
7915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7916: LD_ADDR_VAR 0 3
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 4
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
7939: GO 8766
7941: LD_INT 7
7943: DOUBLE
7944: EQUAL
7945: IFTRUE 7949
7947: GO 7975
7949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7950: LD_ADDR_VAR 0 3
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 3
7960: PUSH
7961: LD_INT 4
7963: PUSH
7964: LD_INT 5
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: ST_TO_ADDR
7973: GO 8766
7975: LD_INT 12
7977: DOUBLE
7978: EQUAL
7979: IFTRUE 7983
7981: GO 8009
7983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7984: LD_ADDR_VAR 0 3
7988: PUSH
7989: LD_INT 2
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: LD_INT 4
7997: PUSH
7998: LD_INT 5
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: ST_TO_ADDR
8007: GO 8766
8009: LD_INT 13
8011: DOUBLE
8012: EQUAL
8013: IFTRUE 8017
8015: GO 8043
8017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8018: LD_ADDR_VAR 0 3
8022: PUSH
8023: LD_INT 2
8025: PUSH
8026: LD_INT 3
8028: PUSH
8029: LD_INT 4
8031: PUSH
8032: LD_INT 5
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: ST_TO_ADDR
8041: GO 8766
8043: LD_INT 14
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8069
8051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8052: LD_ADDR_VAR 0 3
8056: PUSH
8057: LD_INT 4
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: ST_TO_ADDR
8067: GO 8766
8069: LD_INT 6
8071: DOUBLE
8072: EQUAL
8073: IFTRUE 8077
8075: GO 8095
8077: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8078: LD_ADDR_VAR 0 3
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 5
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: ST_TO_ADDR
8093: GO 8766
8095: LD_INT 10
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8121
8103: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8104: LD_ADDR_VAR 0 3
8108: PUSH
8109: LD_INT 4
8111: PUSH
8112: LD_INT 5
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: ST_TO_ADDR
8119: GO 8766
8121: LD_INT 22
8123: DOUBLE
8124: EQUAL
8125: IFTRUE 8129
8127: GO 8155
8129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_INT 11
8137: PUSH
8138: LD_INT 12
8140: PUSH
8141: LD_INT 13
8143: PUSH
8144: LD_INT 14
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: ST_TO_ADDR
8153: GO 8766
8155: LD_INT 23
8157: DOUBLE
8158: EQUAL
8159: IFTRUE 8163
8161: GO 8189
8163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8164: LD_ADDR_VAR 0 3
8168: PUSH
8169: LD_INT 11
8171: PUSH
8172: LD_INT 12
8174: PUSH
8175: LD_INT 13
8177: PUSH
8178: LD_INT 14
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: ST_TO_ADDR
8187: GO 8766
8189: LD_INT 24
8191: DOUBLE
8192: EQUAL
8193: IFTRUE 8197
8195: GO 8223
8197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8198: LD_ADDR_VAR 0 3
8202: PUSH
8203: LD_INT 11
8205: PUSH
8206: LD_INT 12
8208: PUSH
8209: LD_INT 13
8211: PUSH
8212: LD_INT 14
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: ST_TO_ADDR
8221: GO 8766
8223: LD_INT 30
8225: DOUBLE
8226: EQUAL
8227: IFTRUE 8231
8229: GO 8257
8231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8232: LD_ADDR_VAR 0 3
8236: PUSH
8237: LD_INT 11
8239: PUSH
8240: LD_INT 12
8242: PUSH
8243: LD_INT 13
8245: PUSH
8246: LD_INT 14
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: ST_TO_ADDR
8255: GO 8766
8257: LD_INT 25
8259: DOUBLE
8260: EQUAL
8261: IFTRUE 8265
8263: GO 8283
8265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8266: LD_ADDR_VAR 0 3
8270: PUSH
8271: LD_INT 13
8273: PUSH
8274: LD_INT 14
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: ST_TO_ADDR
8281: GO 8766
8283: LD_INT 27
8285: DOUBLE
8286: EQUAL
8287: IFTRUE 8291
8289: GO 8309
8291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8292: LD_ADDR_VAR 0 3
8296: PUSH
8297: LD_INT 13
8299: PUSH
8300: LD_INT 14
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: ST_TO_ADDR
8307: GO 8766
8309: LD_EXP 73
8313: DOUBLE
8314: EQUAL
8315: IFTRUE 8319
8317: GO 8345
8319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: LD_INT 11
8327: PUSH
8328: LD_INT 12
8330: PUSH
8331: LD_INT 13
8333: PUSH
8334: LD_INT 14
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
8343: GO 8766
8345: LD_INT 28
8347: DOUBLE
8348: EQUAL
8349: IFTRUE 8353
8351: GO 8371
8353: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8354: LD_ADDR_VAR 0 3
8358: PUSH
8359: LD_INT 13
8361: PUSH
8362: LD_INT 14
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: ST_TO_ADDR
8369: GO 8766
8371: LD_INT 29
8373: DOUBLE
8374: EQUAL
8375: IFTRUE 8379
8377: GO 8397
8379: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8380: LD_ADDR_VAR 0 3
8384: PUSH
8385: LD_INT 13
8387: PUSH
8388: LD_INT 14
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: ST_TO_ADDR
8395: GO 8766
8397: LD_INT 31
8399: DOUBLE
8400: EQUAL
8401: IFTRUE 8405
8403: GO 8423
8405: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8406: LD_ADDR_VAR 0 3
8410: PUSH
8411: LD_INT 13
8413: PUSH
8414: LD_INT 14
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: ST_TO_ADDR
8421: GO 8766
8423: LD_INT 26
8425: DOUBLE
8426: EQUAL
8427: IFTRUE 8431
8429: GO 8449
8431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8432: LD_ADDR_VAR 0 3
8436: PUSH
8437: LD_INT 13
8439: PUSH
8440: LD_INT 14
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
8447: GO 8766
8449: LD_INT 42
8451: DOUBLE
8452: EQUAL
8453: IFTRUE 8457
8455: GO 8483
8457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8458: LD_ADDR_VAR 0 3
8462: PUSH
8463: LD_INT 21
8465: PUSH
8466: LD_INT 22
8468: PUSH
8469: LD_INT 23
8471: PUSH
8472: LD_INT 24
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: ST_TO_ADDR
8481: GO 8766
8483: LD_INT 43
8485: DOUBLE
8486: EQUAL
8487: IFTRUE 8491
8489: GO 8517
8491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8492: LD_ADDR_VAR 0 3
8496: PUSH
8497: LD_INT 21
8499: PUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 23
8505: PUSH
8506: LD_INT 24
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: ST_TO_ADDR
8515: GO 8766
8517: LD_INT 44
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8551
8525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_INT 21
8533: PUSH
8534: LD_INT 22
8536: PUSH
8537: LD_INT 23
8539: PUSH
8540: LD_INT 24
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: ST_TO_ADDR
8549: GO 8766
8551: LD_INT 45
8553: DOUBLE
8554: EQUAL
8555: IFTRUE 8559
8557: GO 8585
8559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_INT 21
8567: PUSH
8568: LD_INT 22
8570: PUSH
8571: LD_INT 23
8573: PUSH
8574: LD_INT 24
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: ST_TO_ADDR
8583: GO 8766
8585: LD_INT 49
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8619
8593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8594: LD_ADDR_VAR 0 3
8598: PUSH
8599: LD_INT 21
8601: PUSH
8602: LD_INT 22
8604: PUSH
8605: LD_INT 23
8607: PUSH
8608: LD_INT 24
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: ST_TO_ADDR
8617: GO 8766
8619: LD_INT 51
8621: DOUBLE
8622: EQUAL
8623: IFTRUE 8627
8625: GO 8653
8627: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8628: LD_ADDR_VAR 0 3
8632: PUSH
8633: LD_INT 21
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_INT 23
8641: PUSH
8642: LD_INT 24
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: ST_TO_ADDR
8651: GO 8766
8653: LD_INT 52
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8687
8661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8662: LD_ADDR_VAR 0 3
8666: PUSH
8667: LD_INT 21
8669: PUSH
8670: LD_INT 22
8672: PUSH
8673: LD_INT 23
8675: PUSH
8676: LD_INT 24
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: ST_TO_ADDR
8685: GO 8766
8687: LD_INT 53
8689: DOUBLE
8690: EQUAL
8691: IFTRUE 8695
8693: GO 8713
8695: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_INT 23
8703: PUSH
8704: LD_INT 24
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: ST_TO_ADDR
8711: GO 8766
8713: LD_INT 46
8715: DOUBLE
8716: EQUAL
8717: IFTRUE 8721
8719: GO 8739
8721: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: LD_INT 23
8729: PUSH
8730: LD_INT 24
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: ST_TO_ADDR
8737: GO 8766
8739: LD_INT 47
8741: DOUBLE
8742: EQUAL
8743: IFTRUE 8747
8745: GO 8765
8747: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8748: LD_ADDR_VAR 0 3
8752: PUSH
8753: LD_INT 23
8755: PUSH
8756: LD_INT 24
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: ST_TO_ADDR
8763: GO 8766
8765: POP
// result := ( chassis in result ) ;
8766: LD_ADDR_VAR 0 3
8770: PUSH
8771: LD_VAR 0 1
8775: PUSH
8776: LD_VAR 0 3
8780: IN
8781: ST_TO_ADDR
// end ;
8782: LD_VAR 0 3
8786: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8787: LD_INT 0
8789: PPUSH
8790: PPUSH
8791: PPUSH
8792: PPUSH
8793: PPUSH
8794: PPUSH
8795: PPUSH
// result := array ;
8796: LD_ADDR_VAR 0 5
8800: PUSH
8801: LD_VAR 0 1
8805: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8806: LD_VAR 0 1
8810: NOT
8811: PUSH
8812: LD_VAR 0 2
8816: NOT
8817: OR
8818: PUSH
8819: LD_VAR 0 3
8823: NOT
8824: OR
8825: PUSH
8826: LD_VAR 0 2
8830: PUSH
8831: LD_VAR 0 1
8835: GREATER
8836: OR
8837: PUSH
8838: LD_VAR 0 3
8842: PUSH
8843: LD_VAR 0 1
8847: GREATER
8848: OR
8849: IFFALSE 8853
// exit ;
8851: GO 9149
// if direction then
8853: LD_VAR 0 4
8857: IFFALSE 8921
// begin d := 1 ;
8859: LD_ADDR_VAR 0 9
8863: PUSH
8864: LD_INT 1
8866: ST_TO_ADDR
// if i_from > i_to then
8867: LD_VAR 0 2
8871: PUSH
8872: LD_VAR 0 3
8876: GREATER
8877: IFFALSE 8903
// length := ( array - i_from ) + i_to else
8879: LD_ADDR_VAR 0 11
8883: PUSH
8884: LD_VAR 0 1
8888: PUSH
8889: LD_VAR 0 2
8893: MINUS
8894: PUSH
8895: LD_VAR 0 3
8899: PLUS
8900: ST_TO_ADDR
8901: GO 8919
// length := i_to - i_from ;
8903: LD_ADDR_VAR 0 11
8907: PUSH
8908: LD_VAR 0 3
8912: PUSH
8913: LD_VAR 0 2
8917: MINUS
8918: ST_TO_ADDR
// end else
8919: GO 8982
// begin d := - 1 ;
8921: LD_ADDR_VAR 0 9
8925: PUSH
8926: LD_INT 1
8928: NEG
8929: ST_TO_ADDR
// if i_from > i_to then
8930: LD_VAR 0 2
8934: PUSH
8935: LD_VAR 0 3
8939: GREATER
8940: IFFALSE 8960
// length := i_from - i_to else
8942: LD_ADDR_VAR 0 11
8946: PUSH
8947: LD_VAR 0 2
8951: PUSH
8952: LD_VAR 0 3
8956: MINUS
8957: ST_TO_ADDR
8958: GO 8982
// length := ( array - i_to ) + i_from ;
8960: LD_ADDR_VAR 0 11
8964: PUSH
8965: LD_VAR 0 1
8969: PUSH
8970: LD_VAR 0 3
8974: MINUS
8975: PUSH
8976: LD_VAR 0 2
8980: PLUS
8981: ST_TO_ADDR
// end ; if not length then
8982: LD_VAR 0 11
8986: NOT
8987: IFFALSE 8991
// exit ;
8989: GO 9149
// tmp := array ;
8991: LD_ADDR_VAR 0 10
8995: PUSH
8996: LD_VAR 0 1
9000: ST_TO_ADDR
// for i = 1 to length do
9001: LD_ADDR_VAR 0 6
9005: PUSH
9006: DOUBLE
9007: LD_INT 1
9009: DEC
9010: ST_TO_ADDR
9011: LD_VAR 0 11
9015: PUSH
9016: FOR_TO
9017: IFFALSE 9137
// begin for j = 1 to array do
9019: LD_ADDR_VAR 0 7
9023: PUSH
9024: DOUBLE
9025: LD_INT 1
9027: DEC
9028: ST_TO_ADDR
9029: LD_VAR 0 1
9033: PUSH
9034: FOR_TO
9035: IFFALSE 9123
// begin k := j + d ;
9037: LD_ADDR_VAR 0 8
9041: PUSH
9042: LD_VAR 0 7
9046: PUSH
9047: LD_VAR 0 9
9051: PLUS
9052: ST_TO_ADDR
// if k > array then
9053: LD_VAR 0 8
9057: PUSH
9058: LD_VAR 0 1
9062: GREATER
9063: IFFALSE 9073
// k := 1 ;
9065: LD_ADDR_VAR 0 8
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// if not k then
9073: LD_VAR 0 8
9077: NOT
9078: IFFALSE 9090
// k := array ;
9080: LD_ADDR_VAR 0 8
9084: PUSH
9085: LD_VAR 0 1
9089: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9090: LD_ADDR_VAR 0 10
9094: PUSH
9095: LD_VAR 0 10
9099: PPUSH
9100: LD_VAR 0 8
9104: PPUSH
9105: LD_VAR 0 1
9109: PUSH
9110: LD_VAR 0 7
9114: ARRAY
9115: PPUSH
9116: CALL_OW 1
9120: ST_TO_ADDR
// end ;
9121: GO 9034
9123: POP
9124: POP
// array := tmp ;
9125: LD_ADDR_VAR 0 1
9129: PUSH
9130: LD_VAR 0 10
9134: ST_TO_ADDR
// end ;
9135: GO 9016
9137: POP
9138: POP
// result := array ;
9139: LD_ADDR_VAR 0 5
9143: PUSH
9144: LD_VAR 0 1
9148: ST_TO_ADDR
// end ;
9149: LD_VAR 0 5
9153: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
// result := 0 ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_INT 0
9165: ST_TO_ADDR
// if not array or not value in array then
9166: LD_VAR 0 1
9170: NOT
9171: PUSH
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: IN
9182: NOT
9183: OR
9184: IFFALSE 9188
// exit ;
9186: GO 9242
// for i = 1 to array do
9188: LD_ADDR_VAR 0 4
9192: PUSH
9193: DOUBLE
9194: LD_INT 1
9196: DEC
9197: ST_TO_ADDR
9198: LD_VAR 0 1
9202: PUSH
9203: FOR_TO
9204: IFFALSE 9240
// if value = array [ i ] then
9206: LD_VAR 0 2
9210: PUSH
9211: LD_VAR 0 1
9215: PUSH
9216: LD_VAR 0 4
9220: ARRAY
9221: EQUAL
9222: IFFALSE 9238
// begin result := i ;
9224: LD_ADDR_VAR 0 3
9228: PUSH
9229: LD_VAR 0 4
9233: ST_TO_ADDR
// exit ;
9234: POP
9235: POP
9236: GO 9242
// end ;
9238: GO 9203
9240: POP
9241: POP
// end ;
9242: LD_VAR 0 3
9246: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9247: LD_INT 0
9249: PPUSH
// vc_chassis := chassis ;
9250: LD_ADDR_OWVAR 37
9254: PUSH
9255: LD_VAR 0 1
9259: ST_TO_ADDR
// vc_engine := engine ;
9260: LD_ADDR_OWVAR 39
9264: PUSH
9265: LD_VAR 0 2
9269: ST_TO_ADDR
// vc_control := control ;
9270: LD_ADDR_OWVAR 38
9274: PUSH
9275: LD_VAR 0 3
9279: ST_TO_ADDR
// vc_weapon := weapon ;
9280: LD_ADDR_OWVAR 40
9284: PUSH
9285: LD_VAR 0 4
9289: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9290: LD_ADDR_OWVAR 41
9294: PUSH
9295: LD_VAR 0 5
9299: ST_TO_ADDR
// end ;
9300: LD_VAR 0 6
9304: RET
// export function WantPlant ( unit ) ; var task ; begin
9305: LD_INT 0
9307: PPUSH
9308: PPUSH
// result := false ;
9309: LD_ADDR_VAR 0 2
9313: PUSH
9314: LD_INT 0
9316: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9317: LD_ADDR_VAR 0 3
9321: PUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 437
9331: ST_TO_ADDR
// if task then
9332: LD_VAR 0 3
9336: IFFALSE 9364
// if task [ 1 ] [ 1 ] = p then
9338: LD_VAR 0 3
9342: PUSH
9343: LD_INT 1
9345: ARRAY
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PUSH
9351: LD_STRING p
9353: EQUAL
9354: IFFALSE 9364
// result := true ;
9356: LD_ADDR_VAR 0 2
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// end ;
9364: LD_VAR 0 2
9368: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9369: LD_INT 0
9371: PPUSH
9372: PPUSH
9373: PPUSH
9374: PPUSH
// if pos < 1 then
9375: LD_VAR 0 2
9379: PUSH
9380: LD_INT 1
9382: LESS
9383: IFFALSE 9387
// exit ;
9385: GO 9690
// if pos = 1 then
9387: LD_VAR 0 2
9391: PUSH
9392: LD_INT 1
9394: EQUAL
9395: IFFALSE 9428
// result := Replace ( arr , pos [ 1 ] , value ) else
9397: LD_ADDR_VAR 0 4
9401: PUSH
9402: LD_VAR 0 1
9406: PPUSH
9407: LD_VAR 0 2
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: LD_VAR 0 3
9420: PPUSH
9421: CALL_OW 1
9425: ST_TO_ADDR
9426: GO 9690
// begin tmp := arr ;
9428: LD_ADDR_VAR 0 6
9432: PUSH
9433: LD_VAR 0 1
9437: ST_TO_ADDR
// s_arr := [ tmp ] ;
9438: LD_ADDR_VAR 0 7
9442: PUSH
9443: LD_VAR 0 6
9447: PUSH
9448: EMPTY
9449: LIST
9450: ST_TO_ADDR
// for i = 1 to pos - 1 do
9451: LD_ADDR_VAR 0 5
9455: PUSH
9456: DOUBLE
9457: LD_INT 1
9459: DEC
9460: ST_TO_ADDR
9461: LD_VAR 0 2
9465: PUSH
9466: LD_INT 1
9468: MINUS
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin tmp := tmp [ pos [ i ] ] ;
9473: LD_ADDR_VAR 0 6
9477: PUSH
9478: LD_VAR 0 6
9482: PUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 5
9492: ARRAY
9493: ARRAY
9494: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9495: LD_ADDR_VAR 0 7
9499: PUSH
9500: LD_VAR 0 7
9504: PUSH
9505: LD_VAR 0 6
9509: PUSH
9510: EMPTY
9511: LIST
9512: ADD
9513: ST_TO_ADDR
// end ;
9514: GO 9470
9516: POP
9517: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9518: LD_ADDR_VAR 0 6
9522: PUSH
9523: LD_VAR 0 6
9527: PPUSH
9528: LD_VAR 0 2
9532: PUSH
9533: LD_VAR 0 2
9537: ARRAY
9538: PPUSH
9539: LD_VAR 0 3
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9549: LD_ADDR_VAR 0 7
9553: PUSH
9554: LD_VAR 0 7
9558: PPUSH
9559: LD_VAR 0 7
9563: PPUSH
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 1
9573: ST_TO_ADDR
// for i = s_arr downto 2 do
9574: LD_ADDR_VAR 0 5
9578: PUSH
9579: DOUBLE
9580: LD_VAR 0 7
9584: INC
9585: ST_TO_ADDR
9586: LD_INT 2
9588: PUSH
9589: FOR_DOWNTO
9590: IFFALSE 9674
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9592: LD_ADDR_VAR 0 6
9596: PUSH
9597: LD_VAR 0 7
9601: PUSH
9602: LD_VAR 0 5
9606: PUSH
9607: LD_INT 1
9609: MINUS
9610: ARRAY
9611: PPUSH
9612: LD_VAR 0 2
9616: PUSH
9617: LD_VAR 0 5
9621: PUSH
9622: LD_INT 1
9624: MINUS
9625: ARRAY
9626: PPUSH
9627: LD_VAR 0 7
9631: PUSH
9632: LD_VAR 0 5
9636: ARRAY
9637: PPUSH
9638: CALL_OW 1
9642: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9643: LD_ADDR_VAR 0 7
9647: PUSH
9648: LD_VAR 0 7
9652: PPUSH
9653: LD_VAR 0 5
9657: PUSH
9658: LD_INT 1
9660: MINUS
9661: PPUSH
9662: LD_VAR 0 6
9666: PPUSH
9667: CALL_OW 1
9671: ST_TO_ADDR
// end ;
9672: GO 9589
9674: POP
9675: POP
// result := s_arr [ 1 ] ;
9676: LD_ADDR_VAR 0 4
9680: PUSH
9681: LD_VAR 0 7
9685: PUSH
9686: LD_INT 1
9688: ARRAY
9689: ST_TO_ADDR
// end ; end ;
9690: LD_VAR 0 4
9694: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9695: LD_INT 0
9697: PPUSH
9698: PPUSH
// if not list then
9699: LD_VAR 0 1
9703: NOT
9704: IFFALSE 9708
// exit ;
9706: GO 9799
// i := list [ pos1 ] ;
9708: LD_ADDR_VAR 0 5
9712: PUSH
9713: LD_VAR 0 1
9717: PUSH
9718: LD_VAR 0 2
9722: ARRAY
9723: ST_TO_ADDR
// if not i then
9724: LD_VAR 0 5
9728: NOT
9729: IFFALSE 9733
// exit ;
9731: GO 9799
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9733: LD_ADDR_VAR 0 1
9737: PUSH
9738: LD_VAR 0 1
9742: PPUSH
9743: LD_VAR 0 2
9747: PPUSH
9748: LD_VAR 0 1
9752: PUSH
9753: LD_VAR 0 3
9757: ARRAY
9758: PPUSH
9759: CALL_OW 1
9763: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: LD_VAR 0 1
9773: PPUSH
9774: LD_VAR 0 3
9778: PPUSH
9779: LD_VAR 0 5
9783: PPUSH
9784: CALL_OW 1
9788: ST_TO_ADDR
// result := list ;
9789: LD_ADDR_VAR 0 4
9793: PUSH
9794: LD_VAR 0 1
9798: ST_TO_ADDR
// end ;
9799: LD_VAR 0 4
9803: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9804: LD_INT 0
9806: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9807: LD_ADDR_VAR 0 5
9811: PUSH
9812: LD_VAR 0 1
9816: PPUSH
9817: CALL_OW 250
9821: PPUSH
9822: LD_VAR 0 1
9826: PPUSH
9827: CALL_OW 251
9831: PPUSH
9832: LD_VAR 0 2
9836: PPUSH
9837: LD_VAR 0 3
9841: PPUSH
9842: LD_VAR 0 4
9846: PPUSH
9847: CALL 9857 0 5
9851: ST_TO_ADDR
// end ;
9852: LD_VAR 0 5
9856: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9857: LD_INT 0
9859: PPUSH
9860: PPUSH
9861: PPUSH
9862: PPUSH
// if not list then
9863: LD_VAR 0 3
9867: NOT
9868: IFFALSE 9872
// exit ;
9870: GO 10260
// result := [ ] ;
9872: LD_ADDR_VAR 0 6
9876: PUSH
9877: EMPTY
9878: ST_TO_ADDR
// for i in list do
9879: LD_ADDR_VAR 0 7
9883: PUSH
9884: LD_VAR 0 3
9888: PUSH
9889: FOR_IN
9890: IFFALSE 10092
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9892: LD_ADDR_VAR 0 9
9896: PUSH
9897: LD_VAR 0 7
9901: PPUSH
9902: LD_VAR 0 1
9906: PPUSH
9907: LD_VAR 0 2
9911: PPUSH
9912: CALL_OW 297
9916: ST_TO_ADDR
// if not result then
9917: LD_VAR 0 6
9921: NOT
9922: IFFALSE 9948
// result := [ [ i , tmp ] ] else
9924: LD_ADDR_VAR 0 6
9928: PUSH
9929: LD_VAR 0 7
9933: PUSH
9934: LD_VAR 0 9
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: ST_TO_ADDR
9946: GO 10090
// begin if result [ result ] [ 2 ] < tmp then
9948: LD_VAR 0 6
9952: PUSH
9953: LD_VAR 0 6
9957: ARRAY
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: PUSH
9963: LD_VAR 0 9
9967: LESS
9968: IFFALSE 10010
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9970: LD_ADDR_VAR 0 6
9974: PUSH
9975: LD_VAR 0 6
9979: PPUSH
9980: LD_VAR 0 6
9984: PUSH
9985: LD_INT 1
9987: PLUS
9988: PPUSH
9989: LD_VAR 0 7
9993: PUSH
9994: LD_VAR 0 9
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 2
10007: ST_TO_ADDR
10008: GO 10090
// for j = 1 to result do
10010: LD_ADDR_VAR 0 8
10014: PUSH
10015: DOUBLE
10016: LD_INT 1
10018: DEC
10019: ST_TO_ADDR
10020: LD_VAR 0 6
10024: PUSH
10025: FOR_TO
10026: IFFALSE 10088
// begin if tmp < result [ j ] [ 2 ] then
10028: LD_VAR 0 9
10032: PUSH
10033: LD_VAR 0 6
10037: PUSH
10038: LD_VAR 0 8
10042: ARRAY
10043: PUSH
10044: LD_INT 2
10046: ARRAY
10047: LESS
10048: IFFALSE 10086
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10050: LD_ADDR_VAR 0 6
10054: PUSH
10055: LD_VAR 0 6
10059: PPUSH
10060: LD_VAR 0 8
10064: PPUSH
10065: LD_VAR 0 7
10069: PUSH
10070: LD_VAR 0 9
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PPUSH
10079: CALL_OW 2
10083: ST_TO_ADDR
// break ;
10084: GO 10088
// end ; end ;
10086: GO 10025
10088: POP
10089: POP
// end ; end ;
10090: GO 9889
10092: POP
10093: POP
// if result and not asc then
10094: LD_VAR 0 6
10098: PUSH
10099: LD_VAR 0 4
10103: NOT
10104: AND
10105: IFFALSE 10180
// begin tmp := result ;
10107: LD_ADDR_VAR 0 9
10111: PUSH
10112: LD_VAR 0 6
10116: ST_TO_ADDR
// for i = tmp downto 1 do
10117: LD_ADDR_VAR 0 7
10121: PUSH
10122: DOUBLE
10123: LD_VAR 0 9
10127: INC
10128: ST_TO_ADDR
10129: LD_INT 1
10131: PUSH
10132: FOR_DOWNTO
10133: IFFALSE 10178
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10135: LD_ADDR_VAR 0 6
10139: PUSH
10140: LD_VAR 0 6
10144: PPUSH
10145: LD_VAR 0 9
10149: PUSH
10150: LD_VAR 0 7
10154: MINUS
10155: PUSH
10156: LD_INT 1
10158: PLUS
10159: PPUSH
10160: LD_VAR 0 9
10164: PUSH
10165: LD_VAR 0 7
10169: ARRAY
10170: PPUSH
10171: CALL_OW 1
10175: ST_TO_ADDR
10176: GO 10132
10178: POP
10179: POP
// end ; tmp := [ ] ;
10180: LD_ADDR_VAR 0 9
10184: PUSH
10185: EMPTY
10186: ST_TO_ADDR
// if mode then
10187: LD_VAR 0 5
10191: IFFALSE 10260
// begin for i = 1 to result do
10193: LD_ADDR_VAR 0 7
10197: PUSH
10198: DOUBLE
10199: LD_INT 1
10201: DEC
10202: ST_TO_ADDR
10203: LD_VAR 0 6
10207: PUSH
10208: FOR_TO
10209: IFFALSE 10248
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10211: LD_ADDR_VAR 0 9
10215: PUSH
10216: LD_VAR 0 9
10220: PPUSH
10221: LD_VAR 0 7
10225: PPUSH
10226: LD_VAR 0 6
10230: PUSH
10231: LD_VAR 0 7
10235: ARRAY
10236: PUSH
10237: LD_INT 1
10239: ARRAY
10240: PPUSH
10241: CALL_OW 1
10245: ST_TO_ADDR
10246: GO 10208
10248: POP
10249: POP
// result := tmp ;
10250: LD_ADDR_VAR 0 6
10254: PUSH
10255: LD_VAR 0 9
10259: ST_TO_ADDR
// end ; end ;
10260: LD_VAR 0 6
10264: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10265: LD_INT 0
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
10272: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10273: LD_ADDR_VAR 0 5
10277: PUSH
10278: LD_INT 0
10280: PUSH
10281: LD_INT 0
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: EMPTY
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
// if not x or not y then
10295: LD_VAR 0 2
10299: NOT
10300: PUSH
10301: LD_VAR 0 3
10305: NOT
10306: OR
10307: IFFALSE 10311
// exit ;
10309: GO 11963
// if not range then
10311: LD_VAR 0 4
10315: NOT
10316: IFFALSE 10326
// range := 10 ;
10318: LD_ADDR_VAR 0 4
10322: PUSH
10323: LD_INT 10
10325: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10326: LD_ADDR_VAR 0 8
10330: PUSH
10331: LD_INT 81
10333: PUSH
10334: LD_VAR 0 1
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 92
10345: PUSH
10346: LD_VAR 0 2
10350: PUSH
10351: LD_VAR 0 3
10355: PUSH
10356: LD_VAR 0 4
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 3
10369: PUSH
10370: LD_INT 21
10372: PUSH
10373: LD_INT 3
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: PPUSH
10389: CALL_OW 69
10393: ST_TO_ADDR
// if not tmp then
10394: LD_VAR 0 8
10398: NOT
10399: IFFALSE 10403
// exit ;
10401: GO 11963
// for i in tmp do
10403: LD_ADDR_VAR 0 6
10407: PUSH
10408: LD_VAR 0 8
10412: PUSH
10413: FOR_IN
10414: IFFALSE 11938
// begin points := [ 0 , 0 , 0 ] ;
10416: LD_ADDR_VAR 0 9
10420: PUSH
10421: LD_INT 0
10423: PUSH
10424: LD_INT 0
10426: PUSH
10427: LD_INT 0
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: ST_TO_ADDR
// bpoints := 1 ;
10435: LD_ADDR_VAR 0 10
10439: PUSH
10440: LD_INT 1
10442: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10443: LD_VAR 0 6
10447: PPUSH
10448: CALL_OW 247
10452: PUSH
10453: LD_INT 1
10455: DOUBLE
10456: EQUAL
10457: IFTRUE 10461
10459: GO 11039
10461: POP
// begin if GetClass ( i ) = 1 then
10462: LD_VAR 0 6
10466: PPUSH
10467: CALL_OW 257
10471: PUSH
10472: LD_INT 1
10474: EQUAL
10475: IFFALSE 10496
// points := [ 10 , 5 , 3 ] ;
10477: LD_ADDR_VAR 0 9
10481: PUSH
10482: LD_INT 10
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: LD_INT 3
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10496: LD_VAR 0 6
10500: PPUSH
10501: CALL_OW 257
10505: PUSH
10506: LD_INT 2
10508: PUSH
10509: LD_INT 3
10511: PUSH
10512: LD_INT 4
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: IN
10520: IFFALSE 10541
// points := [ 3 , 2 , 1 ] ;
10522: LD_ADDR_VAR 0 9
10526: PUSH
10527: LD_INT 3
10529: PUSH
10530: LD_INT 2
10532: PUSH
10533: LD_INT 1
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: LIST
10540: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10541: LD_VAR 0 6
10545: PPUSH
10546: CALL_OW 257
10550: PUSH
10551: LD_INT 5
10553: EQUAL
10554: IFFALSE 10575
// points := [ 130 , 5 , 2 ] ;
10556: LD_ADDR_VAR 0 9
10560: PUSH
10561: LD_INT 130
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: LD_INT 2
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10575: LD_VAR 0 6
10579: PPUSH
10580: CALL_OW 257
10584: PUSH
10585: LD_INT 8
10587: EQUAL
10588: IFFALSE 10609
// points := [ 35 , 35 , 30 ] ;
10590: LD_ADDR_VAR 0 9
10594: PUSH
10595: LD_INT 35
10597: PUSH
10598: LD_INT 35
10600: PUSH
10601: LD_INT 30
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10609: LD_VAR 0 6
10613: PPUSH
10614: CALL_OW 257
10618: PUSH
10619: LD_INT 9
10621: EQUAL
10622: IFFALSE 10643
// points := [ 20 , 55 , 40 ] ;
10624: LD_ADDR_VAR 0 9
10628: PUSH
10629: LD_INT 20
10631: PUSH
10632: LD_INT 55
10634: PUSH
10635: LD_INT 40
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10643: LD_VAR 0 6
10647: PPUSH
10648: CALL_OW 257
10652: PUSH
10653: LD_INT 12
10655: PUSH
10656: LD_INT 16
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: IN
10663: IFFALSE 10684
// points := [ 5 , 3 , 2 ] ;
10665: LD_ADDR_VAR 0 9
10669: PUSH
10670: LD_INT 5
10672: PUSH
10673: LD_INT 3
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10684: LD_VAR 0 6
10688: PPUSH
10689: CALL_OW 257
10693: PUSH
10694: LD_INT 17
10696: EQUAL
10697: IFFALSE 10718
// points := [ 100 , 50 , 75 ] ;
10699: LD_ADDR_VAR 0 9
10703: PUSH
10704: LD_INT 100
10706: PUSH
10707: LD_INT 50
10709: PUSH
10710: LD_INT 75
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10718: LD_VAR 0 6
10722: PPUSH
10723: CALL_OW 257
10727: PUSH
10728: LD_INT 15
10730: EQUAL
10731: IFFALSE 10752
// points := [ 10 , 5 , 3 ] ;
10733: LD_ADDR_VAR 0 9
10737: PUSH
10738: LD_INT 10
10740: PUSH
10741: LD_INT 5
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10752: LD_VAR 0 6
10756: PPUSH
10757: CALL_OW 257
10761: PUSH
10762: LD_INT 14
10764: EQUAL
10765: IFFALSE 10786
// points := [ 10 , 0 , 0 ] ;
10767: LD_ADDR_VAR 0 9
10771: PUSH
10772: LD_INT 10
10774: PUSH
10775: LD_INT 0
10777: PUSH
10778: LD_INT 0
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10786: LD_VAR 0 6
10790: PPUSH
10791: CALL_OW 257
10795: PUSH
10796: LD_INT 11
10798: EQUAL
10799: IFFALSE 10820
// points := [ 30 , 10 , 5 ] ;
10801: LD_ADDR_VAR 0 9
10805: PUSH
10806: LD_INT 30
10808: PUSH
10809: LD_INT 10
10811: PUSH
10812: LD_INT 5
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10820: LD_VAR 0 1
10824: PPUSH
10825: LD_INT 5
10827: PPUSH
10828: CALL_OW 321
10832: PUSH
10833: LD_INT 2
10835: EQUAL
10836: IFFALSE 10853
// bpoints := bpoints * 1.8 ;
10838: LD_ADDR_VAR 0 10
10842: PUSH
10843: LD_VAR 0 10
10847: PUSH
10848: LD_REAL  1.80000000000000E+0000
10851: MUL
10852: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10853: LD_VAR 0 6
10857: PPUSH
10858: CALL_OW 257
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: LD_INT 2
10868: PUSH
10869: LD_INT 3
10871: PUSH
10872: LD_INT 4
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: IN
10881: PUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 51
10889: PPUSH
10890: CALL_OW 321
10894: PUSH
10895: LD_INT 2
10897: EQUAL
10898: AND
10899: IFFALSE 10916
// bpoints := bpoints * 1.2 ;
10901: LD_ADDR_VAR 0 10
10905: PUSH
10906: LD_VAR 0 10
10910: PUSH
10911: LD_REAL  1.20000000000000E+0000
10914: MUL
10915: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10916: LD_VAR 0 6
10920: PPUSH
10921: CALL_OW 257
10925: PUSH
10926: LD_INT 5
10928: PUSH
10929: LD_INT 7
10931: PUSH
10932: LD_INT 9
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: IN
10940: PUSH
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_INT 52
10948: PPUSH
10949: CALL_OW 321
10953: PUSH
10954: LD_INT 2
10956: EQUAL
10957: AND
10958: IFFALSE 10975
// bpoints := bpoints * 1.5 ;
10960: LD_ADDR_VAR 0 10
10964: PUSH
10965: LD_VAR 0 10
10969: PUSH
10970: LD_REAL  1.50000000000000E+0000
10973: MUL
10974: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10975: LD_VAR 0 1
10979: PPUSH
10980: LD_INT 66
10982: PPUSH
10983: CALL_OW 321
10987: PUSH
10988: LD_INT 2
10990: EQUAL
10991: IFFALSE 11008
// bpoints := bpoints * 1.1 ;
10993: LD_ADDR_VAR 0 10
10997: PUSH
10998: LD_VAR 0 10
11002: PUSH
11003: LD_REAL  1.10000000000000E+0000
11006: MUL
11007: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11008: LD_ADDR_VAR 0 10
11012: PUSH
11013: LD_VAR 0 10
11017: PUSH
11018: LD_VAR 0 6
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 259
11030: PUSH
11031: LD_REAL  1.15000000000000E+0000
11034: MUL
11035: MUL
11036: ST_TO_ADDR
// end ; unit_vehicle :
11037: GO 11867
11039: LD_INT 2
11041: DOUBLE
11042: EQUAL
11043: IFTRUE 11047
11045: GO 11855
11047: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11048: LD_VAR 0 6
11052: PPUSH
11053: CALL_OW 264
11057: PUSH
11058: LD_INT 2
11060: PUSH
11061: LD_INT 42
11063: PUSH
11064: LD_INT 24
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: LIST
11071: IN
11072: IFFALSE 11093
// points := [ 25 , 5 , 3 ] ;
11074: LD_ADDR_VAR 0 9
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 5
11084: PUSH
11085: LD_INT 3
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11093: LD_VAR 0 6
11097: PPUSH
11098: CALL_OW 264
11102: PUSH
11103: LD_INT 4
11105: PUSH
11106: LD_INT 43
11108: PUSH
11109: LD_INT 25
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: IN
11117: IFFALSE 11138
// points := [ 40 , 15 , 5 ] ;
11119: LD_ADDR_VAR 0 9
11123: PUSH
11124: LD_INT 40
11126: PUSH
11127: LD_INT 15
11129: PUSH
11130: LD_INT 5
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: LIST
11137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11138: LD_VAR 0 6
11142: PPUSH
11143: CALL_OW 264
11147: PUSH
11148: LD_INT 3
11150: PUSH
11151: LD_INT 23
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: IN
11158: IFFALSE 11179
// points := [ 7 , 25 , 8 ] ;
11160: LD_ADDR_VAR 0 9
11164: PUSH
11165: LD_INT 7
11167: PUSH
11168: LD_INT 25
11170: PUSH
11171: LD_INT 8
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: LIST
11178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11179: LD_VAR 0 6
11183: PPUSH
11184: CALL_OW 264
11188: PUSH
11189: LD_INT 5
11191: PUSH
11192: LD_INT 27
11194: PUSH
11195: LD_INT 44
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: IN
11203: IFFALSE 11224
// points := [ 14 , 50 , 16 ] ;
11205: LD_ADDR_VAR 0 9
11209: PUSH
11210: LD_INT 14
11212: PUSH
11213: LD_INT 50
11215: PUSH
11216: LD_INT 16
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11224: LD_VAR 0 6
11228: PPUSH
11229: CALL_OW 264
11233: PUSH
11234: LD_INT 6
11236: PUSH
11237: LD_INT 46
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: IN
11244: IFFALSE 11265
// points := [ 32 , 120 , 70 ] ;
11246: LD_ADDR_VAR 0 9
11250: PUSH
11251: LD_INT 32
11253: PUSH
11254: LD_INT 120
11256: PUSH
11257: LD_INT 70
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: LIST
11264: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11265: LD_VAR 0 6
11269: PPUSH
11270: CALL_OW 264
11274: PUSH
11275: LD_INT 7
11277: PUSH
11278: LD_INT 28
11280: PUSH
11281: LD_INT 45
11283: PUSH
11284: LD_EXP 73
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: IN
11295: IFFALSE 11316
// points := [ 35 , 20 , 45 ] ;
11297: LD_ADDR_VAR 0 9
11301: PUSH
11302: LD_INT 35
11304: PUSH
11305: LD_INT 20
11307: PUSH
11308: LD_INT 45
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11316: LD_VAR 0 6
11320: PPUSH
11321: CALL_OW 264
11325: PUSH
11326: LD_INT 47
11328: PUSH
11329: EMPTY
11330: LIST
11331: IN
11332: IFFALSE 11353
// points := [ 67 , 45 , 75 ] ;
11334: LD_ADDR_VAR 0 9
11338: PUSH
11339: LD_INT 67
11341: PUSH
11342: LD_INT 45
11344: PUSH
11345: LD_INT 75
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 264
11362: PUSH
11363: LD_INT 26
11365: PUSH
11366: EMPTY
11367: LIST
11368: IN
11369: IFFALSE 11390
// points := [ 120 , 30 , 80 ] ;
11371: LD_ADDR_VAR 0 9
11375: PUSH
11376: LD_INT 120
11378: PUSH
11379: LD_INT 30
11381: PUSH
11382: LD_INT 80
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11390: LD_VAR 0 6
11394: PPUSH
11395: CALL_OW 264
11399: PUSH
11400: LD_INT 22
11402: PUSH
11403: EMPTY
11404: LIST
11405: IN
11406: IFFALSE 11427
// points := [ 40 , 1 , 1 ] ;
11408: LD_ADDR_VAR 0 9
11412: PUSH
11413: LD_INT 40
11415: PUSH
11416: LD_INT 1
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11427: LD_VAR 0 6
11431: PPUSH
11432: CALL_OW 264
11436: PUSH
11437: LD_INT 29
11439: PUSH
11440: EMPTY
11441: LIST
11442: IN
11443: IFFALSE 11464
// points := [ 70 , 200 , 400 ] ;
11445: LD_ADDR_VAR 0 9
11449: PUSH
11450: LD_INT 70
11452: PUSH
11453: LD_INT 200
11455: PUSH
11456: LD_INT 400
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11464: LD_VAR 0 6
11468: PPUSH
11469: CALL_OW 264
11473: PUSH
11474: LD_INT 14
11476: PUSH
11477: LD_INT 53
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: IN
11484: IFFALSE 11505
// points := [ 40 , 10 , 20 ] ;
11486: LD_ADDR_VAR 0 9
11490: PUSH
11491: LD_INT 40
11493: PUSH
11494: LD_INT 10
11496: PUSH
11497: LD_INT 20
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11505: LD_VAR 0 6
11509: PPUSH
11510: CALL_OW 264
11514: PUSH
11515: LD_INT 9
11517: PUSH
11518: EMPTY
11519: LIST
11520: IN
11521: IFFALSE 11542
// points := [ 5 , 70 , 20 ] ;
11523: LD_ADDR_VAR 0 9
11527: PUSH
11528: LD_INT 5
11530: PUSH
11531: LD_INT 70
11533: PUSH
11534: LD_INT 20
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11542: LD_VAR 0 6
11546: PPUSH
11547: CALL_OW 264
11551: PUSH
11552: LD_INT 10
11554: PUSH
11555: EMPTY
11556: LIST
11557: IN
11558: IFFALSE 11579
// points := [ 35 , 110 , 70 ] ;
11560: LD_ADDR_VAR 0 9
11564: PUSH
11565: LD_INT 35
11567: PUSH
11568: LD_INT 110
11570: PUSH
11571: LD_INT 70
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11579: LD_VAR 0 6
11583: PPUSH
11584: CALL_OW 265
11588: PUSH
11589: LD_INT 25
11591: EQUAL
11592: IFFALSE 11613
// points := [ 80 , 65 , 100 ] ;
11594: LD_ADDR_VAR 0 9
11598: PUSH
11599: LD_INT 80
11601: PUSH
11602: LD_INT 65
11604: PUSH
11605: LD_INT 100
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: LIST
11612: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11613: LD_VAR 0 6
11617: PPUSH
11618: CALL_OW 263
11622: PUSH
11623: LD_INT 1
11625: EQUAL
11626: IFFALSE 11661
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11628: LD_ADDR_VAR 0 10
11632: PUSH
11633: LD_VAR 0 10
11637: PUSH
11638: LD_VAR 0 6
11642: PPUSH
11643: CALL_OW 311
11647: PPUSH
11648: LD_INT 3
11650: PPUSH
11651: CALL_OW 259
11655: PUSH
11656: LD_INT 4
11658: MUL
11659: MUL
11660: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11661: LD_VAR 0 6
11665: PPUSH
11666: CALL_OW 263
11670: PUSH
11671: LD_INT 2
11673: EQUAL
11674: IFFALSE 11725
// begin j := IsControledBy ( i ) ;
11676: LD_ADDR_VAR 0 7
11680: PUSH
11681: LD_VAR 0 6
11685: PPUSH
11686: CALL_OW 312
11690: ST_TO_ADDR
// if j then
11691: LD_VAR 0 7
11695: IFFALSE 11725
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11697: LD_ADDR_VAR 0 10
11701: PUSH
11702: LD_VAR 0 10
11706: PUSH
11707: LD_VAR 0 7
11711: PPUSH
11712: LD_INT 3
11714: PPUSH
11715: CALL_OW 259
11719: PUSH
11720: LD_INT 3
11722: MUL
11723: MUL
11724: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11725: LD_VAR 0 6
11729: PPUSH
11730: CALL_OW 264
11734: PUSH
11735: LD_INT 5
11737: PUSH
11738: LD_INT 6
11740: PUSH
11741: LD_INT 46
11743: PUSH
11744: LD_INT 44
11746: PUSH
11747: LD_INT 47
11749: PUSH
11750: LD_INT 45
11752: PUSH
11753: LD_INT 28
11755: PUSH
11756: LD_INT 7
11758: PUSH
11759: LD_INT 27
11761: PUSH
11762: LD_INT 29
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: IN
11777: PUSH
11778: LD_VAR 0 1
11782: PPUSH
11783: LD_INT 52
11785: PPUSH
11786: CALL_OW 321
11790: PUSH
11791: LD_INT 2
11793: EQUAL
11794: AND
11795: IFFALSE 11812
// bpoints := bpoints * 1.2 ;
11797: LD_ADDR_VAR 0 10
11801: PUSH
11802: LD_VAR 0 10
11806: PUSH
11807: LD_REAL  1.20000000000000E+0000
11810: MUL
11811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11812: LD_VAR 0 6
11816: PPUSH
11817: CALL_OW 264
11821: PUSH
11822: LD_INT 6
11824: PUSH
11825: LD_INT 46
11827: PUSH
11828: LD_INT 47
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: LIST
11835: IN
11836: IFFALSE 11853
// bpoints := bpoints * 1.2 ;
11838: LD_ADDR_VAR 0 10
11842: PUSH
11843: LD_VAR 0 10
11847: PUSH
11848: LD_REAL  1.20000000000000E+0000
11851: MUL
11852: ST_TO_ADDR
// end ; unit_building :
11853: GO 11867
11855: LD_INT 3
11857: DOUBLE
11858: EQUAL
11859: IFTRUE 11863
11861: GO 11866
11863: POP
// ; end ;
11864: GO 11867
11866: POP
// for j = 1 to 3 do
11867: LD_ADDR_VAR 0 7
11871: PUSH
11872: DOUBLE
11873: LD_INT 1
11875: DEC
11876: ST_TO_ADDR
11877: LD_INT 3
11879: PUSH
11880: FOR_TO
11881: IFFALSE 11934
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11883: LD_ADDR_VAR 0 5
11887: PUSH
11888: LD_VAR 0 5
11892: PPUSH
11893: LD_VAR 0 7
11897: PPUSH
11898: LD_VAR 0 5
11902: PUSH
11903: LD_VAR 0 7
11907: ARRAY
11908: PUSH
11909: LD_VAR 0 9
11913: PUSH
11914: LD_VAR 0 7
11918: ARRAY
11919: PUSH
11920: LD_VAR 0 10
11924: MUL
11925: PLUS
11926: PPUSH
11927: CALL_OW 1
11931: ST_TO_ADDR
11932: GO 11880
11934: POP
11935: POP
// end ;
11936: GO 10413
11938: POP
11939: POP
// result := Replace ( result , 4 , tmp ) ;
11940: LD_ADDR_VAR 0 5
11944: PUSH
11945: LD_VAR 0 5
11949: PPUSH
11950: LD_INT 4
11952: PPUSH
11953: LD_VAR 0 8
11957: PPUSH
11958: CALL_OW 1
11962: ST_TO_ADDR
// end ;
11963: LD_VAR 0 5
11967: RET
// export function DangerAtRange ( unit , range ) ; begin
11968: LD_INT 0
11970: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11971: LD_ADDR_VAR 0 3
11975: PUSH
11976: LD_VAR 0 1
11980: PPUSH
11981: CALL_OW 255
11985: PPUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: CALL_OW 250
11995: PPUSH
11996: LD_VAR 0 1
12000: PPUSH
12001: CALL_OW 251
12005: PPUSH
12006: LD_VAR 0 2
12010: PPUSH
12011: CALL 10265 0 4
12015: ST_TO_ADDR
// end ;
12016: LD_VAR 0 3
12020: RET
// export function DangerInArea ( side , area ) ; begin
12021: LD_INT 0
12023: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12024: LD_ADDR_VAR 0 3
12028: PUSH
12029: LD_VAR 0 2
12033: PPUSH
12034: LD_INT 81
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PPUSH
12046: CALL_OW 70
12050: ST_TO_ADDR
// end ;
12051: LD_VAR 0 3
12055: RET
// export function IsExtension ( b ) ; begin
12056: LD_INT 0
12058: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_VAR 0 1
12068: PUSH
12069: LD_INT 23
12071: PUSH
12072: LD_INT 20
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_INT 17
12080: PUSH
12081: LD_INT 24
12083: PUSH
12084: LD_INT 21
12086: PUSH
12087: LD_INT 19
12089: PUSH
12090: LD_INT 16
12092: PUSH
12093: LD_INT 25
12095: PUSH
12096: LD_INT 18
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: IN
12111: ST_TO_ADDR
// end ;
12112: LD_VAR 0 2
12116: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12117: LD_INT 0
12119: PPUSH
12120: PPUSH
12121: PPUSH
// result := [ ] ;
12122: LD_ADDR_VAR 0 4
12126: PUSH
12127: EMPTY
12128: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12129: LD_ADDR_VAR 0 5
12133: PUSH
12134: LD_VAR 0 2
12138: PPUSH
12139: LD_INT 21
12141: PUSH
12142: LD_INT 3
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 70
12153: ST_TO_ADDR
// if not tmp then
12154: LD_VAR 0 5
12158: NOT
12159: IFFALSE 12163
// exit ;
12161: GO 12227
// if checkLink then
12163: LD_VAR 0 3
12167: IFFALSE 12217
// begin for i in tmp do
12169: LD_ADDR_VAR 0 6
12173: PUSH
12174: LD_VAR 0 5
12178: PUSH
12179: FOR_IN
12180: IFFALSE 12215
// if GetBase ( i ) <> base then
12182: LD_VAR 0 6
12186: PPUSH
12187: CALL_OW 274
12191: PUSH
12192: LD_VAR 0 1
12196: NONEQUAL
12197: IFFALSE 12213
// ComLinkToBase ( base , i ) ;
12199: LD_VAR 0 1
12203: PPUSH
12204: LD_VAR 0 6
12208: PPUSH
12209: CALL_OW 169
12213: GO 12179
12215: POP
12216: POP
// end ; result := tmp ;
12217: LD_ADDR_VAR 0 4
12221: PUSH
12222: LD_VAR 0 5
12226: ST_TO_ADDR
// end ;
12227: LD_VAR 0 4
12231: RET
// export function ComComplete ( units , b ) ; var i ; begin
12232: LD_INT 0
12234: PPUSH
12235: PPUSH
// if not units then
12236: LD_VAR 0 1
12240: NOT
12241: IFFALSE 12245
// exit ;
12243: GO 12335
// for i in units do
12245: LD_ADDR_VAR 0 4
12249: PUSH
12250: LD_VAR 0 1
12254: PUSH
12255: FOR_IN
12256: IFFALSE 12333
// if BuildingStatus ( b ) = bs_build then
12258: LD_VAR 0 2
12262: PPUSH
12263: CALL_OW 461
12267: PUSH
12268: LD_INT 1
12270: EQUAL
12271: IFFALSE 12331
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12273: LD_VAR 0 4
12277: PPUSH
12278: LD_STRING h
12280: PUSH
12281: LD_VAR 0 2
12285: PPUSH
12286: CALL_OW 250
12290: PUSH
12291: LD_VAR 0 2
12295: PPUSH
12296: CALL_OW 251
12300: PUSH
12301: LD_VAR 0 2
12305: PUSH
12306: LD_INT 0
12308: PUSH
12309: LD_INT 0
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: PPUSH
12327: CALL_OW 446
12331: GO 12255
12333: POP
12334: POP
// end ;
12335: LD_VAR 0 3
12339: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12340: LD_INT 0
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12348: LD_VAR 0 1
12352: NOT
12353: PUSH
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 263
12363: PUSH
12364: LD_INT 2
12366: NONEQUAL
12367: OR
12368: IFFALSE 12372
// exit ;
12370: GO 12688
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12372: LD_ADDR_VAR 0 6
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 255
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: LD_INT 30
12399: PUSH
12400: LD_INT 36
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 34
12409: PUSH
12410: LD_INT 31
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PPUSH
12426: CALL_OW 69
12430: ST_TO_ADDR
// if not tmp then
12431: LD_VAR 0 6
12435: NOT
12436: IFFALSE 12440
// exit ;
12438: GO 12688
// result := [ ] ;
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: EMPTY
12446: ST_TO_ADDR
// for i in tmp do
12447: LD_ADDR_VAR 0 3
12451: PUSH
12452: LD_VAR 0 6
12456: PUSH
12457: FOR_IN
12458: IFFALSE 12529
// begin t := UnitsInside ( i ) ;
12460: LD_ADDR_VAR 0 4
12464: PUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: CALL_OW 313
12474: ST_TO_ADDR
// if t then
12475: LD_VAR 0 4
12479: IFFALSE 12527
// for j in t do
12481: LD_ADDR_VAR 0 7
12485: PUSH
12486: LD_VAR 0 4
12490: PUSH
12491: FOR_IN
12492: IFFALSE 12525
// result := Replace ( result , result + 1 , j ) ;
12494: LD_ADDR_VAR 0 2
12498: PUSH
12499: LD_VAR 0 2
12503: PPUSH
12504: LD_VAR 0 2
12508: PUSH
12509: LD_INT 1
12511: PLUS
12512: PPUSH
12513: LD_VAR 0 7
12517: PPUSH
12518: CALL_OW 1
12522: ST_TO_ADDR
12523: GO 12491
12525: POP
12526: POP
// end ;
12527: GO 12457
12529: POP
12530: POP
// if not result then
12531: LD_VAR 0 2
12535: NOT
12536: IFFALSE 12540
// exit ;
12538: GO 12688
// mech := result [ 1 ] ;
12540: LD_ADDR_VAR 0 5
12544: PUSH
12545: LD_VAR 0 2
12549: PUSH
12550: LD_INT 1
12552: ARRAY
12553: ST_TO_ADDR
// if result > 1 then
12554: LD_VAR 0 2
12558: PUSH
12559: LD_INT 1
12561: GREATER
12562: IFFALSE 12674
// begin for i = 2 to result do
12564: LD_ADDR_VAR 0 3
12568: PUSH
12569: DOUBLE
12570: LD_INT 2
12572: DEC
12573: ST_TO_ADDR
12574: LD_VAR 0 2
12578: PUSH
12579: FOR_TO
12580: IFFALSE 12672
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12582: LD_ADDR_VAR 0 4
12586: PUSH
12587: LD_VAR 0 2
12591: PUSH
12592: LD_VAR 0 3
12596: ARRAY
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: CALL_OW 259
12605: PUSH
12606: LD_VAR 0 2
12610: PUSH
12611: LD_VAR 0 3
12615: ARRAY
12616: PPUSH
12617: CALL_OW 432
12621: MINUS
12622: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12623: LD_VAR 0 4
12627: PUSH
12628: LD_VAR 0 5
12632: PPUSH
12633: LD_INT 3
12635: PPUSH
12636: CALL_OW 259
12640: PUSH
12641: LD_VAR 0 5
12645: PPUSH
12646: CALL_OW 432
12650: MINUS
12651: GREATEREQUAL
12652: IFFALSE 12670
// mech := result [ i ] ;
12654: LD_ADDR_VAR 0 5
12658: PUSH
12659: LD_VAR 0 2
12663: PUSH
12664: LD_VAR 0 3
12668: ARRAY
12669: ST_TO_ADDR
// end ;
12670: GO 12579
12672: POP
12673: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12674: LD_VAR 0 1
12678: PPUSH
12679: LD_VAR 0 5
12683: PPUSH
12684: CALL_OW 135
// end ;
12688: LD_VAR 0 2
12692: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12693: LD_INT 0
12695: PPUSH
12696: PPUSH
12697: PPUSH
12698: PPUSH
12699: PPUSH
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
12704: PPUSH
12705: PPUSH
12706: PPUSH
12707: PPUSH
// result := [ ] ;
12708: LD_ADDR_VAR 0 7
12712: PUSH
12713: EMPTY
12714: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 266
12724: PUSH
12725: LD_INT 0
12727: PUSH
12728: LD_INT 1
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: IN
12735: NOT
12736: IFFALSE 12740
// exit ;
12738: GO 14374
// if name then
12740: LD_VAR 0 3
12744: IFFALSE 12760
// SetBName ( base_dep , name ) ;
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_VAR 0 3
12755: PPUSH
12756: CALL_OW 500
// base := GetBase ( base_dep ) ;
12760: LD_ADDR_VAR 0 15
12764: PUSH
12765: LD_VAR 0 1
12769: PPUSH
12770: CALL_OW 274
12774: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12775: LD_ADDR_VAR 0 16
12779: PUSH
12780: LD_VAR 0 1
12784: PPUSH
12785: CALL_OW 255
12789: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12790: LD_ADDR_VAR 0 17
12794: PUSH
12795: LD_VAR 0 1
12799: PPUSH
12800: CALL_OW 248
12804: ST_TO_ADDR
// if sources then
12805: LD_VAR 0 5
12809: IFFALSE 12856
// for i = 1 to 3 do
12811: LD_ADDR_VAR 0 8
12815: PUSH
12816: DOUBLE
12817: LD_INT 1
12819: DEC
12820: ST_TO_ADDR
12821: LD_INT 3
12823: PUSH
12824: FOR_TO
12825: IFFALSE 12854
// AddResourceType ( base , i , sources [ i ] ) ;
12827: LD_VAR 0 15
12831: PPUSH
12832: LD_VAR 0 8
12836: PPUSH
12837: LD_VAR 0 5
12841: PUSH
12842: LD_VAR 0 8
12846: ARRAY
12847: PPUSH
12848: CALL_OW 276
12852: GO 12824
12854: POP
12855: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12856: LD_ADDR_VAR 0 18
12860: PUSH
12861: LD_VAR 0 15
12865: PPUSH
12866: LD_VAR 0 2
12870: PPUSH
12871: LD_INT 1
12873: PPUSH
12874: CALL 12117 0 3
12878: ST_TO_ADDR
// InitHc ;
12879: CALL_OW 19
// InitUc ;
12883: CALL_OW 18
// uc_side := side ;
12887: LD_ADDR_OWVAR 20
12891: PUSH
12892: LD_VAR 0 16
12896: ST_TO_ADDR
// uc_nation := nation ;
12897: LD_ADDR_OWVAR 21
12901: PUSH
12902: LD_VAR 0 17
12906: ST_TO_ADDR
// if buildings then
12907: LD_VAR 0 18
12911: IFFALSE 14233
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12913: LD_ADDR_VAR 0 19
12917: PUSH
12918: LD_VAR 0 18
12922: PPUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 29
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 30
12938: PUSH
12939: LD_INT 30
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 72
12955: ST_TO_ADDR
// if tmp then
12956: LD_VAR 0 19
12960: IFFALSE 13008
// for i in tmp do
12962: LD_ADDR_VAR 0 8
12966: PUSH
12967: LD_VAR 0 19
12971: PUSH
12972: FOR_IN
12973: IFFALSE 13006
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12975: LD_VAR 0 8
12979: PPUSH
12980: CALL_OW 250
12984: PPUSH
12985: LD_VAR 0 8
12989: PPUSH
12990: CALL_OW 251
12994: PPUSH
12995: LD_VAR 0 16
12999: PPUSH
13000: CALL_OW 441
13004: GO 12972
13006: POP
13007: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13008: LD_VAR 0 18
13012: PPUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 30
13018: PUSH
13019: LD_INT 32
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 30
13028: PUSH
13029: LD_INT 33
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 72
13045: IFFALSE 13133
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13047: LD_ADDR_VAR 0 8
13051: PUSH
13052: LD_VAR 0 18
13056: PPUSH
13057: LD_INT 2
13059: PUSH
13060: LD_INT 30
13062: PUSH
13063: LD_INT 32
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 30
13072: PUSH
13073: LD_INT 33
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: PPUSH
13085: CALL_OW 72
13089: PUSH
13090: FOR_IN
13091: IFFALSE 13131
// begin if not GetBWeapon ( i ) then
13093: LD_VAR 0 8
13097: PPUSH
13098: CALL_OW 269
13102: NOT
13103: IFFALSE 13129
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13105: LD_VAR 0 8
13109: PPUSH
13110: LD_VAR 0 8
13114: PPUSH
13115: LD_VAR 0 2
13119: PPUSH
13120: CALL 14379 0 2
13124: PPUSH
13125: CALL_OW 431
// end ;
13129: GO 13090
13131: POP
13132: POP
// end ; for i = 1 to personel do
13133: LD_ADDR_VAR 0 8
13137: PUSH
13138: DOUBLE
13139: LD_INT 1
13141: DEC
13142: ST_TO_ADDR
13143: LD_VAR 0 6
13147: PUSH
13148: FOR_TO
13149: IFFALSE 14213
// begin if i > 4 then
13151: LD_VAR 0 8
13155: PUSH
13156: LD_INT 4
13158: GREATER
13159: IFFALSE 13163
// break ;
13161: GO 14213
// case i of 1 :
13163: LD_VAR 0 8
13167: PUSH
13168: LD_INT 1
13170: DOUBLE
13171: EQUAL
13172: IFTRUE 13176
13174: GO 13256
13176: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13177: LD_ADDR_VAR 0 12
13181: PUSH
13182: LD_VAR 0 18
13186: PPUSH
13187: LD_INT 22
13189: PUSH
13190: LD_VAR 0 16
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 58
13201: PUSH
13202: EMPTY
13203: LIST
13204: PUSH
13205: LD_INT 2
13207: PUSH
13208: LD_INT 30
13210: PUSH
13211: LD_INT 32
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 30
13220: PUSH
13221: LD_INT 4
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 30
13230: PUSH
13231: LD_INT 5
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 72
13253: ST_TO_ADDR
13254: GO 13478
13256: LD_INT 2
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13326
13264: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13265: LD_ADDR_VAR 0 12
13269: PUSH
13270: LD_VAR 0 18
13274: PPUSH
13275: LD_INT 22
13277: PUSH
13278: LD_VAR 0 16
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 2
13289: PUSH
13290: LD_INT 30
13292: PUSH
13293: LD_INT 0
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 72
13323: ST_TO_ADDR
13324: GO 13478
13326: LD_INT 3
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13396
13334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13335: LD_ADDR_VAR 0 12
13339: PUSH
13340: LD_VAR 0 18
13344: PPUSH
13345: LD_INT 22
13347: PUSH
13348: LD_VAR 0 16
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 30
13362: PUSH
13363: LD_INT 2
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 3
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 72
13393: ST_TO_ADDR
13394: GO 13478
13396: LD_INT 4
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13477
13404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13405: LD_ADDR_VAR 0 12
13409: PUSH
13410: LD_VAR 0 18
13414: PPUSH
13415: LD_INT 22
13417: PUSH
13418: LD_VAR 0 16
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 2
13429: PUSH
13430: LD_INT 30
13432: PUSH
13433: LD_INT 6
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 30
13442: PUSH
13443: LD_INT 7
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 30
13452: PUSH
13453: LD_INT 8
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PPUSH
13470: CALL_OW 72
13474: ST_TO_ADDR
13475: GO 13478
13477: POP
// if i = 1 then
13478: LD_VAR 0 8
13482: PUSH
13483: LD_INT 1
13485: EQUAL
13486: IFFALSE 13597
// begin tmp := [ ] ;
13488: LD_ADDR_VAR 0 19
13492: PUSH
13493: EMPTY
13494: ST_TO_ADDR
// for j in f do
13495: LD_ADDR_VAR 0 9
13499: PUSH
13500: LD_VAR 0 12
13504: PUSH
13505: FOR_IN
13506: IFFALSE 13579
// if GetBType ( j ) = b_bunker then
13508: LD_VAR 0 9
13512: PPUSH
13513: CALL_OW 266
13517: PUSH
13518: LD_INT 32
13520: EQUAL
13521: IFFALSE 13548
// tmp := Insert ( tmp , 1 , j ) else
13523: LD_ADDR_VAR 0 19
13527: PUSH
13528: LD_VAR 0 19
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_VAR 0 9
13540: PPUSH
13541: CALL_OW 2
13545: ST_TO_ADDR
13546: GO 13577
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13548: LD_ADDR_VAR 0 19
13552: PUSH
13553: LD_VAR 0 19
13557: PPUSH
13558: LD_VAR 0 19
13562: PUSH
13563: LD_INT 1
13565: PLUS
13566: PPUSH
13567: LD_VAR 0 9
13571: PPUSH
13572: CALL_OW 2
13576: ST_TO_ADDR
13577: GO 13505
13579: POP
13580: POP
// if tmp then
13581: LD_VAR 0 19
13585: IFFALSE 13597
// f := tmp ;
13587: LD_ADDR_VAR 0 12
13591: PUSH
13592: LD_VAR 0 19
13596: ST_TO_ADDR
// end ; x := personel [ i ] ;
13597: LD_ADDR_VAR 0 13
13601: PUSH
13602: LD_VAR 0 6
13606: PUSH
13607: LD_VAR 0 8
13611: ARRAY
13612: ST_TO_ADDR
// if x = - 1 then
13613: LD_VAR 0 13
13617: PUSH
13618: LD_INT 1
13620: NEG
13621: EQUAL
13622: IFFALSE 13831
// begin for j in f do
13624: LD_ADDR_VAR 0 9
13628: PUSH
13629: LD_VAR 0 12
13633: PUSH
13634: FOR_IN
13635: IFFALSE 13827
// repeat InitHc ;
13637: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13641: LD_VAR 0 9
13645: PPUSH
13646: CALL_OW 266
13650: PUSH
13651: LD_INT 5
13653: EQUAL
13654: IFFALSE 13724
// begin if UnitsInside ( j ) < 3 then
13656: LD_VAR 0 9
13660: PPUSH
13661: CALL_OW 313
13665: PUSH
13666: LD_INT 3
13668: LESS
13669: IFFALSE 13705
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13671: LD_INT 0
13673: PPUSH
13674: LD_INT 5
13676: PUSH
13677: LD_INT 8
13679: PUSH
13680: LD_INT 9
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_VAR 0 17
13692: ARRAY
13693: PPUSH
13694: LD_VAR 0 4
13698: PPUSH
13699: CALL_OW 380
13703: GO 13722
// PrepareHuman ( false , i , skill ) ;
13705: LD_INT 0
13707: PPUSH
13708: LD_VAR 0 8
13712: PPUSH
13713: LD_VAR 0 4
13717: PPUSH
13718: CALL_OW 380
// end else
13722: GO 13741
// PrepareHuman ( false , i , skill ) ;
13724: LD_INT 0
13726: PPUSH
13727: LD_VAR 0 8
13731: PPUSH
13732: LD_VAR 0 4
13736: PPUSH
13737: CALL_OW 380
// un := CreateHuman ;
13741: LD_ADDR_VAR 0 14
13745: PUSH
13746: CALL_OW 44
13750: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13751: LD_ADDR_VAR 0 7
13755: PUSH
13756: LD_VAR 0 7
13760: PPUSH
13761: LD_INT 1
13763: PPUSH
13764: LD_VAR 0 14
13768: PPUSH
13769: CALL_OW 2
13773: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13774: LD_VAR 0 14
13778: PPUSH
13779: LD_VAR 0 9
13783: PPUSH
13784: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13788: LD_VAR 0 9
13792: PPUSH
13793: CALL_OW 313
13797: PUSH
13798: LD_INT 6
13800: EQUAL
13801: PUSH
13802: LD_VAR 0 9
13806: PPUSH
13807: CALL_OW 266
13811: PUSH
13812: LD_INT 32
13814: PUSH
13815: LD_INT 31
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: IN
13822: OR
13823: IFFALSE 13637
13825: GO 13634
13827: POP
13828: POP
// end else
13829: GO 14211
// for j = 1 to x do
13831: LD_ADDR_VAR 0 9
13835: PUSH
13836: DOUBLE
13837: LD_INT 1
13839: DEC
13840: ST_TO_ADDR
13841: LD_VAR 0 13
13845: PUSH
13846: FOR_TO
13847: IFFALSE 14209
// begin InitHc ;
13849: CALL_OW 19
// if not f then
13853: LD_VAR 0 12
13857: NOT
13858: IFFALSE 13947
// begin PrepareHuman ( false , i , skill ) ;
13860: LD_INT 0
13862: PPUSH
13863: LD_VAR 0 8
13867: PPUSH
13868: LD_VAR 0 4
13872: PPUSH
13873: CALL_OW 380
// un := CreateHuman ;
13877: LD_ADDR_VAR 0 14
13881: PUSH
13882: CALL_OW 44
13886: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13887: LD_ADDR_VAR 0 7
13891: PUSH
13892: LD_VAR 0 7
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: LD_VAR 0 14
13904: PPUSH
13905: CALL_OW 2
13909: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13910: LD_VAR 0 14
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 250
13924: PPUSH
13925: LD_VAR 0 1
13929: PPUSH
13930: CALL_OW 251
13934: PPUSH
13935: LD_INT 10
13937: PPUSH
13938: LD_INT 0
13940: PPUSH
13941: CALL_OW 50
// continue ;
13945: GO 13846
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13947: LD_VAR 0 12
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: PPUSH
13956: CALL_OW 313
13960: PUSH
13961: LD_VAR 0 12
13965: PUSH
13966: LD_INT 1
13968: ARRAY
13969: PPUSH
13970: CALL_OW 266
13974: PUSH
13975: LD_INT 32
13977: PUSH
13978: LD_INT 31
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: IN
13985: AND
13986: PUSH
13987: LD_VAR 0 12
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: CALL_OW 313
14000: PUSH
14001: LD_INT 6
14003: EQUAL
14004: OR
14005: IFFALSE 14025
// f := Delete ( f , 1 ) ;
14007: LD_ADDR_VAR 0 12
14011: PUSH
14012: LD_VAR 0 12
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 3
14024: ST_TO_ADDR
// if not f then
14025: LD_VAR 0 12
14029: NOT
14030: IFFALSE 14048
// begin x := x + 2 ;
14032: LD_ADDR_VAR 0 13
14036: PUSH
14037: LD_VAR 0 13
14041: PUSH
14042: LD_INT 2
14044: PLUS
14045: ST_TO_ADDR
// continue ;
14046: GO 13846
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14048: LD_VAR 0 12
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: CALL_OW 266
14061: PUSH
14062: LD_INT 5
14064: EQUAL
14065: IFFALSE 14139
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14067: LD_VAR 0 12
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PPUSH
14076: CALL_OW 313
14080: PUSH
14081: LD_INT 3
14083: LESS
14084: IFFALSE 14120
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14086: LD_INT 0
14088: PPUSH
14089: LD_INT 5
14091: PUSH
14092: LD_INT 8
14094: PUSH
14095: LD_INT 9
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PUSH
14103: LD_VAR 0 17
14107: ARRAY
14108: PPUSH
14109: LD_VAR 0 4
14113: PPUSH
14114: CALL_OW 380
14118: GO 14137
// PrepareHuman ( false , i , skill ) ;
14120: LD_INT 0
14122: PPUSH
14123: LD_VAR 0 8
14127: PPUSH
14128: LD_VAR 0 4
14132: PPUSH
14133: CALL_OW 380
// end else
14137: GO 14156
// PrepareHuman ( false , i , skill ) ;
14139: LD_INT 0
14141: PPUSH
14142: LD_VAR 0 8
14146: PPUSH
14147: LD_VAR 0 4
14151: PPUSH
14152: CALL_OW 380
// un := CreateHuman ;
14156: LD_ADDR_VAR 0 14
14160: PUSH
14161: CALL_OW 44
14165: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14166: LD_ADDR_VAR 0 7
14170: PUSH
14171: LD_VAR 0 7
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: LD_VAR 0 14
14183: PPUSH
14184: CALL_OW 2
14188: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14189: LD_VAR 0 14
14193: PPUSH
14194: LD_VAR 0 12
14198: PUSH
14199: LD_INT 1
14201: ARRAY
14202: PPUSH
14203: CALL_OW 52
// end ;
14207: GO 13846
14209: POP
14210: POP
// end ;
14211: GO 13148
14213: POP
14214: POP
// result := result ^ buildings ;
14215: LD_ADDR_VAR 0 7
14219: PUSH
14220: LD_VAR 0 7
14224: PUSH
14225: LD_VAR 0 18
14229: ADD
14230: ST_TO_ADDR
// end else
14231: GO 14374
// begin for i = 1 to personel do
14233: LD_ADDR_VAR 0 8
14237: PUSH
14238: DOUBLE
14239: LD_INT 1
14241: DEC
14242: ST_TO_ADDR
14243: LD_VAR 0 6
14247: PUSH
14248: FOR_TO
14249: IFFALSE 14372
// begin if i > 4 then
14251: LD_VAR 0 8
14255: PUSH
14256: LD_INT 4
14258: GREATER
14259: IFFALSE 14263
// break ;
14261: GO 14372
// x := personel [ i ] ;
14263: LD_ADDR_VAR 0 13
14267: PUSH
14268: LD_VAR 0 6
14272: PUSH
14273: LD_VAR 0 8
14277: ARRAY
14278: ST_TO_ADDR
// if x = - 1 then
14279: LD_VAR 0 13
14283: PUSH
14284: LD_INT 1
14286: NEG
14287: EQUAL
14288: IFFALSE 14292
// continue ;
14290: GO 14248
// PrepareHuman ( false , i , skill ) ;
14292: LD_INT 0
14294: PPUSH
14295: LD_VAR 0 8
14299: PPUSH
14300: LD_VAR 0 4
14304: PPUSH
14305: CALL_OW 380
// un := CreateHuman ;
14309: LD_ADDR_VAR 0 14
14313: PUSH
14314: CALL_OW 44
14318: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14319: LD_VAR 0 14
14323: PPUSH
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 250
14333: PPUSH
14334: LD_VAR 0 1
14338: PPUSH
14339: CALL_OW 251
14343: PPUSH
14344: LD_INT 10
14346: PPUSH
14347: LD_INT 0
14349: PPUSH
14350: CALL_OW 50
// result := result ^ un ;
14354: LD_ADDR_VAR 0 7
14358: PUSH
14359: LD_VAR 0 7
14363: PUSH
14364: LD_VAR 0 14
14368: ADD
14369: ST_TO_ADDR
// end ;
14370: GO 14248
14372: POP
14373: POP
// end ; end ;
14374: LD_VAR 0 7
14378: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14379: LD_INT 0
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
14387: PPUSH
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
14394: PPUSH
14395: PPUSH
14396: PPUSH
// result := false ;
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14405: LD_VAR 0 1
14409: NOT
14410: PUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 266
14420: PUSH
14421: LD_INT 32
14423: PUSH
14424: LD_INT 33
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: IN
14431: NOT
14432: OR
14433: IFFALSE 14437
// exit ;
14435: GO 15546
// nat := GetNation ( tower ) ;
14437: LD_ADDR_VAR 0 12
14441: PUSH
14442: LD_VAR 0 1
14446: PPUSH
14447: CALL_OW 248
14451: ST_TO_ADDR
// side := GetSide ( tower ) ;
14452: LD_ADDR_VAR 0 16
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 255
14466: ST_TO_ADDR
// x := GetX ( tower ) ;
14467: LD_ADDR_VAR 0 10
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 250
14481: ST_TO_ADDR
// y := GetY ( tower ) ;
14482: LD_ADDR_VAR 0 11
14486: PUSH
14487: LD_VAR 0 1
14491: PPUSH
14492: CALL_OW 251
14496: ST_TO_ADDR
// if not x or not y then
14497: LD_VAR 0 10
14501: NOT
14502: PUSH
14503: LD_VAR 0 11
14507: NOT
14508: OR
14509: IFFALSE 14513
// exit ;
14511: GO 15546
// weapon := 0 ;
14513: LD_ADDR_VAR 0 18
14517: PUSH
14518: LD_INT 0
14520: ST_TO_ADDR
// fac_list := [ ] ;
14521: LD_ADDR_VAR 0 17
14525: PUSH
14526: EMPTY
14527: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14528: LD_ADDR_VAR 0 6
14532: PUSH
14533: LD_VAR 0 1
14537: PPUSH
14538: CALL_OW 274
14542: PPUSH
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL 12117 0 3
14555: PPUSH
14556: LD_INT 30
14558: PUSH
14559: LD_INT 3
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PPUSH
14566: CALL_OW 72
14570: ST_TO_ADDR
// if not factories then
14571: LD_VAR 0 6
14575: NOT
14576: IFFALSE 14580
// exit ;
14578: GO 15546
// for i in factories do
14580: LD_ADDR_VAR 0 8
14584: PUSH
14585: LD_VAR 0 6
14589: PUSH
14590: FOR_IN
14591: IFFALSE 14616
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14593: LD_ADDR_VAR 0 17
14597: PUSH
14598: LD_VAR 0 17
14602: PUSH
14603: LD_VAR 0 8
14607: PPUSH
14608: CALL_OW 478
14612: UNION
14613: ST_TO_ADDR
14614: GO 14590
14616: POP
14617: POP
// if not fac_list then
14618: LD_VAR 0 17
14622: NOT
14623: IFFALSE 14627
// exit ;
14625: GO 15546
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14627: LD_ADDR_VAR 0 5
14631: PUSH
14632: LD_INT 4
14634: PUSH
14635: LD_INT 5
14637: PUSH
14638: LD_INT 9
14640: PUSH
14641: LD_INT 10
14643: PUSH
14644: LD_INT 6
14646: PUSH
14647: LD_INT 7
14649: PUSH
14650: LD_INT 11
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 27
14664: PUSH
14665: LD_INT 28
14667: PUSH
14668: LD_INT 26
14670: PUSH
14671: LD_INT 30
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 43
14682: PUSH
14683: LD_INT 44
14685: PUSH
14686: LD_INT 46
14688: PUSH
14689: LD_INT 45
14691: PUSH
14692: LD_INT 47
14694: PUSH
14695: LD_INT 49
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: LD_VAR 0 12
14715: ARRAY
14716: ST_TO_ADDR
// list := list isect fac_list ;
14717: LD_ADDR_VAR 0 5
14721: PUSH
14722: LD_VAR 0 5
14726: PUSH
14727: LD_VAR 0 17
14731: ISECT
14732: ST_TO_ADDR
// if not list then
14733: LD_VAR 0 5
14737: NOT
14738: IFFALSE 14742
// exit ;
14740: GO 15546
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14742: LD_VAR 0 12
14746: PUSH
14747: LD_INT 3
14749: EQUAL
14750: PUSH
14751: LD_INT 49
14753: PUSH
14754: LD_VAR 0 5
14758: IN
14759: AND
14760: PUSH
14761: LD_INT 31
14763: PPUSH
14764: LD_VAR 0 16
14768: PPUSH
14769: CALL_OW 321
14773: PUSH
14774: LD_INT 2
14776: EQUAL
14777: AND
14778: IFFALSE 14838
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14780: LD_INT 22
14782: PUSH
14783: LD_VAR 0 16
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 35
14794: PUSH
14795: LD_INT 49
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 91
14804: PUSH
14805: LD_VAR 0 1
14809: PUSH
14810: LD_INT 10
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 69
14827: NOT
14828: IFFALSE 14838
// weapon := ru_time_lapser ;
14830: LD_ADDR_VAR 0 18
14834: PUSH
14835: LD_INT 49
14837: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14838: LD_VAR 0 12
14842: PUSH
14843: LD_INT 1
14845: PUSH
14846: LD_INT 2
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: IN
14853: PUSH
14854: LD_INT 11
14856: PUSH
14857: LD_VAR 0 5
14861: IN
14862: PUSH
14863: LD_INT 30
14865: PUSH
14866: LD_VAR 0 5
14870: IN
14871: OR
14872: AND
14873: PUSH
14874: LD_INT 6
14876: PPUSH
14877: LD_VAR 0 16
14881: PPUSH
14882: CALL_OW 321
14886: PUSH
14887: LD_INT 2
14889: EQUAL
14890: AND
14891: IFFALSE 15056
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14893: LD_INT 22
14895: PUSH
14896: LD_VAR 0 16
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 2
14907: PUSH
14908: LD_INT 35
14910: PUSH
14911: LD_INT 11
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 35
14920: PUSH
14921: LD_INT 30
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 91
14935: PUSH
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 18
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: LIST
14953: PPUSH
14954: CALL_OW 69
14958: NOT
14959: PUSH
14960: LD_INT 22
14962: PUSH
14963: LD_VAR 0 16
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 2
14974: PUSH
14975: LD_INT 30
14977: PUSH
14978: LD_INT 32
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 30
14987: PUSH
14988: LD_INT 33
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 91
15002: PUSH
15003: LD_VAR 0 1
15007: PUSH
15008: LD_INT 12
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: PPUSH
15024: CALL_OW 69
15028: PUSH
15029: LD_INT 2
15031: GREATER
15032: AND
15033: IFFALSE 15056
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15035: LD_ADDR_VAR 0 18
15039: PUSH
15040: LD_INT 11
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_VAR 0 12
15054: ARRAY
15055: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15056: LD_VAR 0 18
15060: NOT
15061: PUSH
15062: LD_INT 40
15064: PPUSH
15065: LD_VAR 0 16
15069: PPUSH
15070: CALL_OW 321
15074: PUSH
15075: LD_INT 2
15077: EQUAL
15078: AND
15079: PUSH
15080: LD_INT 7
15082: PUSH
15083: LD_VAR 0 5
15087: IN
15088: PUSH
15089: LD_INT 28
15091: PUSH
15092: LD_VAR 0 5
15096: IN
15097: OR
15098: PUSH
15099: LD_INT 45
15101: PUSH
15102: LD_VAR 0 5
15106: IN
15107: OR
15108: AND
15109: IFFALSE 15363
// begin hex := GetHexInfo ( x , y ) ;
15111: LD_ADDR_VAR 0 4
15115: PUSH
15116: LD_VAR 0 10
15120: PPUSH
15121: LD_VAR 0 11
15125: PPUSH
15126: CALL_OW 546
15130: ST_TO_ADDR
// if hex [ 1 ] then
15131: LD_VAR 0 4
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: IFFALSE 15143
// exit ;
15141: GO 15546
// height := hex [ 2 ] ;
15143: LD_ADDR_VAR 0 15
15147: PUSH
15148: LD_VAR 0 4
15152: PUSH
15153: LD_INT 2
15155: ARRAY
15156: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15157: LD_ADDR_VAR 0 14
15161: PUSH
15162: LD_INT 0
15164: PUSH
15165: LD_INT 2
15167: PUSH
15168: LD_INT 3
15170: PUSH
15171: LD_INT 5
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: ST_TO_ADDR
// for i in tmp do
15180: LD_ADDR_VAR 0 8
15184: PUSH
15185: LD_VAR 0 14
15189: PUSH
15190: FOR_IN
15191: IFFALSE 15361
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15193: LD_ADDR_VAR 0 9
15197: PUSH
15198: LD_VAR 0 10
15202: PPUSH
15203: LD_VAR 0 8
15207: PPUSH
15208: LD_INT 5
15210: PPUSH
15211: CALL_OW 272
15215: PUSH
15216: LD_VAR 0 11
15220: PPUSH
15221: LD_VAR 0 8
15225: PPUSH
15226: LD_INT 5
15228: PPUSH
15229: CALL_OW 273
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15238: LD_VAR 0 9
15242: PUSH
15243: LD_INT 1
15245: ARRAY
15246: PPUSH
15247: LD_VAR 0 9
15251: PUSH
15252: LD_INT 2
15254: ARRAY
15255: PPUSH
15256: CALL_OW 488
15260: IFFALSE 15359
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15262: LD_ADDR_VAR 0 4
15266: PUSH
15267: LD_VAR 0 9
15271: PUSH
15272: LD_INT 1
15274: ARRAY
15275: PPUSH
15276: LD_VAR 0 9
15280: PUSH
15281: LD_INT 2
15283: ARRAY
15284: PPUSH
15285: CALL_OW 546
15289: ST_TO_ADDR
// if hex [ 1 ] then
15290: LD_VAR 0 4
15294: PUSH
15295: LD_INT 1
15297: ARRAY
15298: IFFALSE 15302
// continue ;
15300: GO 15190
// h := hex [ 2 ] ;
15302: LD_ADDR_VAR 0 13
15306: PUSH
15307: LD_VAR 0 4
15311: PUSH
15312: LD_INT 2
15314: ARRAY
15315: ST_TO_ADDR
// if h + 7 < height then
15316: LD_VAR 0 13
15320: PUSH
15321: LD_INT 7
15323: PLUS
15324: PUSH
15325: LD_VAR 0 15
15329: LESS
15330: IFFALSE 15359
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15332: LD_ADDR_VAR 0 18
15336: PUSH
15337: LD_INT 7
15339: PUSH
15340: LD_INT 28
15342: PUSH
15343: LD_INT 45
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PUSH
15351: LD_VAR 0 12
15355: ARRAY
15356: ST_TO_ADDR
// break ;
15357: GO 15361
// end ; end ; end ;
15359: GO 15190
15361: POP
15362: POP
// end ; if not weapon then
15363: LD_VAR 0 18
15367: NOT
15368: IFFALSE 15428
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15370: LD_ADDR_VAR 0 5
15374: PUSH
15375: LD_VAR 0 5
15379: PUSH
15380: LD_INT 11
15382: PUSH
15383: LD_INT 30
15385: PUSH
15386: LD_INT 49
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: DIFF
15394: ST_TO_ADDR
// if not list then
15395: LD_VAR 0 5
15399: NOT
15400: IFFALSE 15404
// exit ;
15402: GO 15546
// weapon := list [ rand ( 1 , list ) ] ;
15404: LD_ADDR_VAR 0 18
15408: PUSH
15409: LD_VAR 0 5
15413: PUSH
15414: LD_INT 1
15416: PPUSH
15417: LD_VAR 0 5
15421: PPUSH
15422: CALL_OW 12
15426: ARRAY
15427: ST_TO_ADDR
// end ; if weapon then
15428: LD_VAR 0 18
15432: IFFALSE 15546
// begin tmp := CostOfWeapon ( weapon ) ;
15434: LD_ADDR_VAR 0 14
15438: PUSH
15439: LD_VAR 0 18
15443: PPUSH
15444: CALL_OW 451
15448: ST_TO_ADDR
// j := GetBase ( tower ) ;
15449: LD_ADDR_VAR 0 9
15453: PUSH
15454: LD_VAR 0 1
15458: PPUSH
15459: CALL_OW 274
15463: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15464: LD_VAR 0 9
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 275
15476: PUSH
15477: LD_VAR 0 14
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: GREATEREQUAL
15486: PUSH
15487: LD_VAR 0 9
15491: PPUSH
15492: LD_INT 2
15494: PPUSH
15495: CALL_OW 275
15499: PUSH
15500: LD_VAR 0 14
15504: PUSH
15505: LD_INT 2
15507: ARRAY
15508: GREATEREQUAL
15509: AND
15510: PUSH
15511: LD_VAR 0 9
15515: PPUSH
15516: LD_INT 3
15518: PPUSH
15519: CALL_OW 275
15523: PUSH
15524: LD_VAR 0 14
15528: PUSH
15529: LD_INT 3
15531: ARRAY
15532: GREATEREQUAL
15533: AND
15534: IFFALSE 15546
// result := weapon ;
15536: LD_ADDR_VAR 0 3
15540: PUSH
15541: LD_VAR 0 18
15545: ST_TO_ADDR
// end ; end ;
15546: LD_VAR 0 3
15550: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15551: LD_INT 0
15553: PPUSH
15554: PPUSH
// result := true ;
15555: LD_ADDR_VAR 0 3
15559: PUSH
15560: LD_INT 1
15562: ST_TO_ADDR
// if array1 = array2 then
15563: LD_VAR 0 1
15567: PUSH
15568: LD_VAR 0 2
15572: EQUAL
15573: IFFALSE 15633
// begin for i = 1 to array1 do
15575: LD_ADDR_VAR 0 4
15579: PUSH
15580: DOUBLE
15581: LD_INT 1
15583: DEC
15584: ST_TO_ADDR
15585: LD_VAR 0 1
15589: PUSH
15590: FOR_TO
15591: IFFALSE 15629
// if array1 [ i ] <> array2 [ i ] then
15593: LD_VAR 0 1
15597: PUSH
15598: LD_VAR 0 4
15602: ARRAY
15603: PUSH
15604: LD_VAR 0 2
15608: PUSH
15609: LD_VAR 0 4
15613: ARRAY
15614: NONEQUAL
15615: IFFALSE 15627
// begin result := false ;
15617: LD_ADDR_VAR 0 3
15621: PUSH
15622: LD_INT 0
15624: ST_TO_ADDR
// break ;
15625: GO 15629
// end ;
15627: GO 15590
15629: POP
15630: POP
// end else
15631: GO 15641
// result := false ;
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: LD_INT 0
15640: ST_TO_ADDR
// end ;
15641: LD_VAR 0 3
15645: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15646: LD_INT 0
15648: PPUSH
15649: PPUSH
// if not array1 or not array2 then
15650: LD_VAR 0 1
15654: NOT
15655: PUSH
15656: LD_VAR 0 2
15660: NOT
15661: OR
15662: IFFALSE 15666
// exit ;
15664: GO 15730
// result := true ;
15666: LD_ADDR_VAR 0 3
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// for i = 1 to array1 do
15674: LD_ADDR_VAR 0 4
15678: PUSH
15679: DOUBLE
15680: LD_INT 1
15682: DEC
15683: ST_TO_ADDR
15684: LD_VAR 0 1
15688: PUSH
15689: FOR_TO
15690: IFFALSE 15728
// if array1 [ i ] <> array2 [ i ] then
15692: LD_VAR 0 1
15696: PUSH
15697: LD_VAR 0 4
15701: ARRAY
15702: PUSH
15703: LD_VAR 0 2
15707: PUSH
15708: LD_VAR 0 4
15712: ARRAY
15713: NONEQUAL
15714: IFFALSE 15726
// begin result := false ;
15716: LD_ADDR_VAR 0 3
15720: PUSH
15721: LD_INT 0
15723: ST_TO_ADDR
// break ;
15724: GO 15728
// end ;
15726: GO 15689
15728: POP
15729: POP
// end ;
15730: LD_VAR 0 3
15734: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
// pom := GetBase ( fac ) ;
15740: LD_ADDR_VAR 0 5
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 274
15754: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15755: LD_ADDR_VAR 0 4
15759: PUSH
15760: LD_VAR 0 2
15764: PUSH
15765: LD_INT 1
15767: ARRAY
15768: PPUSH
15769: LD_VAR 0 2
15773: PUSH
15774: LD_INT 2
15776: ARRAY
15777: PPUSH
15778: LD_VAR 0 2
15782: PUSH
15783: LD_INT 3
15785: ARRAY
15786: PPUSH
15787: LD_VAR 0 2
15791: PUSH
15792: LD_INT 4
15794: ARRAY
15795: PPUSH
15796: CALL_OW 449
15800: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 275
15818: PUSH
15819: LD_VAR 0 4
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: GREATEREQUAL
15828: PUSH
15829: LD_VAR 0 5
15833: PPUSH
15834: LD_INT 2
15836: PPUSH
15837: CALL_OW 275
15841: PUSH
15842: LD_VAR 0 4
15846: PUSH
15847: LD_INT 2
15849: ARRAY
15850: GREATEREQUAL
15851: AND
15852: PUSH
15853: LD_VAR 0 5
15857: PPUSH
15858: LD_INT 3
15860: PPUSH
15861: CALL_OW 275
15865: PUSH
15866: LD_VAR 0 4
15870: PUSH
15871: LD_INT 3
15873: ARRAY
15874: GREATEREQUAL
15875: AND
15876: ST_TO_ADDR
// end ;
15877: LD_VAR 0 3
15881: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15882: LD_INT 0
15884: PPUSH
15885: PPUSH
15886: PPUSH
15887: PPUSH
// pom := GetBase ( building ) ;
15888: LD_ADDR_VAR 0 3
15892: PUSH
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL_OW 274
15902: ST_TO_ADDR
// if not pom then
15903: LD_VAR 0 3
15907: NOT
15908: IFFALSE 15912
// exit ;
15910: GO 16082
// btype := GetBType ( building ) ;
15912: LD_ADDR_VAR 0 5
15916: PUSH
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 266
15926: ST_TO_ADDR
// if btype = b_armoury then
15927: LD_VAR 0 5
15931: PUSH
15932: LD_INT 4
15934: EQUAL
15935: IFFALSE 15945
// btype := b_barracks ;
15937: LD_ADDR_VAR 0 5
15941: PUSH
15942: LD_INT 5
15944: ST_TO_ADDR
// if btype = b_depot then
15945: LD_VAR 0 5
15949: PUSH
15950: LD_INT 0
15952: EQUAL
15953: IFFALSE 15963
// btype := b_warehouse ;
15955: LD_ADDR_VAR 0 5
15959: PUSH
15960: LD_INT 1
15962: ST_TO_ADDR
// if btype = b_workshop then
15963: LD_VAR 0 5
15967: PUSH
15968: LD_INT 2
15970: EQUAL
15971: IFFALSE 15981
// btype := b_factory ;
15973: LD_ADDR_VAR 0 5
15977: PUSH
15978: LD_INT 3
15980: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15981: LD_ADDR_VAR 0 4
15985: PUSH
15986: LD_VAR 0 5
15990: PPUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 248
16000: PPUSH
16001: CALL_OW 450
16005: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16006: LD_ADDR_VAR 0 2
16010: PUSH
16011: LD_VAR 0 3
16015: PPUSH
16016: LD_INT 1
16018: PPUSH
16019: CALL_OW 275
16023: PUSH
16024: LD_VAR 0 4
16028: PUSH
16029: LD_INT 1
16031: ARRAY
16032: GREATEREQUAL
16033: PUSH
16034: LD_VAR 0 3
16038: PPUSH
16039: LD_INT 2
16041: PPUSH
16042: CALL_OW 275
16046: PUSH
16047: LD_VAR 0 4
16051: PUSH
16052: LD_INT 2
16054: ARRAY
16055: GREATEREQUAL
16056: AND
16057: PUSH
16058: LD_VAR 0 3
16062: PPUSH
16063: LD_INT 3
16065: PPUSH
16066: CALL_OW 275
16070: PUSH
16071: LD_VAR 0 4
16075: PUSH
16076: LD_INT 3
16078: ARRAY
16079: GREATEREQUAL
16080: AND
16081: ST_TO_ADDR
// end ;
16082: LD_VAR 0 2
16086: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16087: LD_INT 0
16089: PPUSH
16090: PPUSH
16091: PPUSH
// pom := GetBase ( building ) ;
16092: LD_ADDR_VAR 0 4
16096: PUSH
16097: LD_VAR 0 1
16101: PPUSH
16102: CALL_OW 274
16106: ST_TO_ADDR
// if not pom then
16107: LD_VAR 0 4
16111: NOT
16112: IFFALSE 16116
// exit ;
16114: GO 16217
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16116: LD_ADDR_VAR 0 5
16120: PUSH
16121: LD_VAR 0 2
16125: PPUSH
16126: LD_VAR 0 1
16130: PPUSH
16131: CALL_OW 248
16135: PPUSH
16136: CALL_OW 450
16140: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16141: LD_ADDR_VAR 0 3
16145: PUSH
16146: LD_VAR 0 4
16150: PPUSH
16151: LD_INT 1
16153: PPUSH
16154: CALL_OW 275
16158: PUSH
16159: LD_VAR 0 5
16163: PUSH
16164: LD_INT 1
16166: ARRAY
16167: GREATEREQUAL
16168: PUSH
16169: LD_VAR 0 4
16173: PPUSH
16174: LD_INT 2
16176: PPUSH
16177: CALL_OW 275
16181: PUSH
16182: LD_VAR 0 5
16186: PUSH
16187: LD_INT 2
16189: ARRAY
16190: GREATEREQUAL
16191: AND
16192: PUSH
16193: LD_VAR 0 4
16197: PPUSH
16198: LD_INT 3
16200: PPUSH
16201: CALL_OW 275
16205: PUSH
16206: LD_VAR 0 5
16210: PUSH
16211: LD_INT 3
16213: ARRAY
16214: GREATEREQUAL
16215: AND
16216: ST_TO_ADDR
// end ;
16217: LD_VAR 0 3
16221: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16222: LD_INT 0
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
16228: PPUSH
16229: PPUSH
16230: PPUSH
16231: PPUSH
16232: PPUSH
16233: PPUSH
16234: PPUSH
// result := false ;
16235: LD_ADDR_VAR 0 8
16239: PUSH
16240: LD_INT 0
16242: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16243: LD_VAR 0 5
16247: NOT
16248: PUSH
16249: LD_VAR 0 1
16253: NOT
16254: OR
16255: PUSH
16256: LD_VAR 0 2
16260: NOT
16261: OR
16262: PUSH
16263: LD_VAR 0 3
16267: NOT
16268: OR
16269: IFFALSE 16273
// exit ;
16271: GO 17087
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16273: LD_ADDR_VAR 0 14
16277: PUSH
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: LD_VAR 0 4
16297: PPUSH
16298: LD_VAR 0 5
16302: PUSH
16303: LD_INT 1
16305: ARRAY
16306: PPUSH
16307: CALL_OW 248
16311: PPUSH
16312: LD_INT 0
16314: PPUSH
16315: CALL 18324 0 6
16319: ST_TO_ADDR
// if not hexes then
16320: LD_VAR 0 14
16324: NOT
16325: IFFALSE 16329
// exit ;
16327: GO 17087
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16329: LD_ADDR_VAR 0 17
16333: PUSH
16334: LD_VAR 0 5
16338: PPUSH
16339: LD_INT 22
16341: PUSH
16342: LD_VAR 0 13
16346: PPUSH
16347: CALL_OW 255
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: LD_INT 2
16358: PUSH
16359: LD_INT 30
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 30
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: PUSH
16384: EMPTY
16385: LIST
16386: LIST
16387: PPUSH
16388: CALL_OW 72
16392: ST_TO_ADDR
// for i = 1 to hexes do
16393: LD_ADDR_VAR 0 9
16397: PUSH
16398: DOUBLE
16399: LD_INT 1
16401: DEC
16402: ST_TO_ADDR
16403: LD_VAR 0 14
16407: PUSH
16408: FOR_TO
16409: IFFALSE 17085
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16411: LD_ADDR_VAR 0 13
16415: PUSH
16416: LD_VAR 0 14
16420: PUSH
16421: LD_VAR 0 9
16425: ARRAY
16426: PUSH
16427: LD_INT 1
16429: ARRAY
16430: PPUSH
16431: LD_VAR 0 14
16435: PUSH
16436: LD_VAR 0 9
16440: ARRAY
16441: PUSH
16442: LD_INT 2
16444: ARRAY
16445: PPUSH
16446: CALL_OW 428
16450: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16451: LD_VAR 0 14
16455: PUSH
16456: LD_VAR 0 9
16460: ARRAY
16461: PUSH
16462: LD_INT 1
16464: ARRAY
16465: PPUSH
16466: LD_VAR 0 14
16470: PUSH
16471: LD_VAR 0 9
16475: ARRAY
16476: PUSH
16477: LD_INT 2
16479: ARRAY
16480: PPUSH
16481: CALL_OW 351
16485: PUSH
16486: LD_VAR 0 14
16490: PUSH
16491: LD_VAR 0 9
16495: ARRAY
16496: PUSH
16497: LD_INT 1
16499: ARRAY
16500: PPUSH
16501: LD_VAR 0 14
16505: PUSH
16506: LD_VAR 0 9
16510: ARRAY
16511: PUSH
16512: LD_INT 2
16514: ARRAY
16515: PPUSH
16516: CALL_OW 488
16520: NOT
16521: OR
16522: PUSH
16523: LD_VAR 0 13
16527: PPUSH
16528: CALL_OW 247
16532: PUSH
16533: LD_INT 3
16535: EQUAL
16536: OR
16537: IFFALSE 16543
// exit ;
16539: POP
16540: POP
16541: GO 17087
// if not tmp then
16543: LD_VAR 0 13
16547: NOT
16548: IFFALSE 16552
// continue ;
16550: GO 16408
// result := true ;
16552: LD_ADDR_VAR 0 8
16556: PUSH
16557: LD_INT 1
16559: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16560: LD_VAR 0 6
16564: PUSH
16565: LD_VAR 0 13
16569: PPUSH
16570: CALL_OW 247
16574: PUSH
16575: LD_INT 2
16577: EQUAL
16578: AND
16579: PUSH
16580: LD_VAR 0 13
16584: PPUSH
16585: CALL_OW 263
16589: PUSH
16590: LD_INT 1
16592: EQUAL
16593: AND
16594: IFFALSE 16758
// begin if IsDrivenBy ( tmp ) then
16596: LD_VAR 0 13
16600: PPUSH
16601: CALL_OW 311
16605: IFFALSE 16609
// continue ;
16607: GO 16408
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16609: LD_VAR 0 6
16613: PPUSH
16614: LD_INT 3
16616: PUSH
16617: LD_INT 60
16619: PUSH
16620: EMPTY
16621: LIST
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: LD_INT 55
16632: PUSH
16633: EMPTY
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PPUSH
16644: CALL_OW 72
16648: IFFALSE 16756
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16650: LD_ADDR_VAR 0 18
16654: PUSH
16655: LD_VAR 0 6
16659: PPUSH
16660: LD_INT 3
16662: PUSH
16663: LD_INT 60
16665: PUSH
16666: EMPTY
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 3
16675: PUSH
16676: LD_INT 55
16678: PUSH
16679: EMPTY
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 72
16694: PUSH
16695: LD_INT 1
16697: ARRAY
16698: ST_TO_ADDR
// if IsInUnit ( driver ) then
16699: LD_VAR 0 18
16703: PPUSH
16704: CALL_OW 310
16708: IFFALSE 16719
// ComExit ( driver ) ;
16710: LD_VAR 0 18
16714: PPUSH
16715: CALL 41452 0 1
// AddComEnterUnit ( driver , tmp ) ;
16719: LD_VAR 0 18
16723: PPUSH
16724: LD_VAR 0 13
16728: PPUSH
16729: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16733: LD_VAR 0 18
16737: PPUSH
16738: LD_VAR 0 7
16742: PPUSH
16743: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16747: LD_VAR 0 18
16751: PPUSH
16752: CALL_OW 181
// end ; continue ;
16756: GO 16408
// end ; if not cleaners or not tmp in cleaners then
16758: LD_VAR 0 6
16762: NOT
16763: PUSH
16764: LD_VAR 0 13
16768: PUSH
16769: LD_VAR 0 6
16773: IN
16774: NOT
16775: OR
16776: IFFALSE 17083
// begin if dep then
16778: LD_VAR 0 17
16782: IFFALSE 16918
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16784: LD_ADDR_VAR 0 16
16788: PUSH
16789: LD_VAR 0 17
16793: PUSH
16794: LD_INT 1
16796: ARRAY
16797: PPUSH
16798: CALL_OW 250
16802: PPUSH
16803: LD_VAR 0 17
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: CALL_OW 254
16816: PPUSH
16817: LD_INT 5
16819: PPUSH
16820: CALL_OW 272
16824: PUSH
16825: LD_VAR 0 17
16829: PUSH
16830: LD_INT 1
16832: ARRAY
16833: PPUSH
16834: CALL_OW 251
16838: PPUSH
16839: LD_VAR 0 17
16843: PUSH
16844: LD_INT 1
16846: ARRAY
16847: PPUSH
16848: CALL_OW 254
16852: PPUSH
16853: LD_INT 5
16855: PPUSH
16856: CALL_OW 273
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16865: LD_VAR 0 16
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: PPUSH
16874: LD_VAR 0 16
16878: PUSH
16879: LD_INT 2
16881: ARRAY
16882: PPUSH
16883: CALL_OW 488
16887: IFFALSE 16918
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16889: LD_VAR 0 13
16893: PPUSH
16894: LD_VAR 0 16
16898: PUSH
16899: LD_INT 1
16901: ARRAY
16902: PPUSH
16903: LD_VAR 0 16
16907: PUSH
16908: LD_INT 2
16910: ARRAY
16911: PPUSH
16912: CALL_OW 111
// continue ;
16916: GO 16408
// end ; end ; r := GetDir ( tmp ) ;
16918: LD_ADDR_VAR 0 15
16922: PUSH
16923: LD_VAR 0 13
16927: PPUSH
16928: CALL_OW 254
16932: ST_TO_ADDR
// if r = 5 then
16933: LD_VAR 0 15
16937: PUSH
16938: LD_INT 5
16940: EQUAL
16941: IFFALSE 16951
// r := 0 ;
16943: LD_ADDR_VAR 0 15
16947: PUSH
16948: LD_INT 0
16950: ST_TO_ADDR
// for j = r to 5 do
16951: LD_ADDR_VAR 0 10
16955: PUSH
16956: DOUBLE
16957: LD_VAR 0 15
16961: DEC
16962: ST_TO_ADDR
16963: LD_INT 5
16965: PUSH
16966: FOR_TO
16967: IFFALSE 17081
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16969: LD_ADDR_VAR 0 11
16973: PUSH
16974: LD_VAR 0 13
16978: PPUSH
16979: CALL_OW 250
16983: PPUSH
16984: LD_VAR 0 10
16988: PPUSH
16989: LD_INT 2
16991: PPUSH
16992: CALL_OW 272
16996: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16997: LD_ADDR_VAR 0 12
17001: PUSH
17002: LD_VAR 0 13
17006: PPUSH
17007: CALL_OW 251
17011: PPUSH
17012: LD_VAR 0 10
17016: PPUSH
17017: LD_INT 2
17019: PPUSH
17020: CALL_OW 273
17024: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17025: LD_VAR 0 11
17029: PPUSH
17030: LD_VAR 0 12
17034: PPUSH
17035: CALL_OW 488
17039: PUSH
17040: LD_VAR 0 11
17044: PPUSH
17045: LD_VAR 0 12
17049: PPUSH
17050: CALL_OW 428
17054: NOT
17055: AND
17056: IFFALSE 17079
// begin ComMoveXY ( tmp , _x , _y ) ;
17058: LD_VAR 0 13
17062: PPUSH
17063: LD_VAR 0 11
17067: PPUSH
17068: LD_VAR 0 12
17072: PPUSH
17073: CALL_OW 111
// break ;
17077: GO 17081
// end ; end ;
17079: GO 16966
17081: POP
17082: POP
// end ; end ;
17083: GO 16408
17085: POP
17086: POP
// end ;
17087: LD_VAR 0 8
17091: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17092: LD_INT 0
17094: PPUSH
// result := true ;
17095: LD_ADDR_VAR 0 3
17099: PUSH
17100: LD_INT 1
17102: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17103: LD_VAR 0 2
17107: PUSH
17108: LD_INT 24
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17122
17114: LD_INT 33
17116: DOUBLE
17117: EQUAL
17118: IFTRUE 17122
17120: GO 17147
17122: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17123: LD_ADDR_VAR 0 3
17127: PUSH
17128: LD_INT 32
17130: PPUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 321
17140: PUSH
17141: LD_INT 2
17143: EQUAL
17144: ST_TO_ADDR
17145: GO 17467
17147: LD_INT 20
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17180
17155: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17156: LD_ADDR_VAR 0 3
17160: PUSH
17161: LD_INT 6
17163: PPUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 321
17173: PUSH
17174: LD_INT 2
17176: EQUAL
17177: ST_TO_ADDR
17178: GO 17467
17180: LD_INT 22
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17194
17186: LD_INT 36
17188: DOUBLE
17189: EQUAL
17190: IFTRUE 17194
17192: GO 17219
17194: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17195: LD_ADDR_VAR 0 3
17199: PUSH
17200: LD_INT 15
17202: PPUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL_OW 321
17212: PUSH
17213: LD_INT 2
17215: EQUAL
17216: ST_TO_ADDR
17217: GO 17467
17219: LD_INT 30
17221: DOUBLE
17222: EQUAL
17223: IFTRUE 17227
17225: GO 17252
17227: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17228: LD_ADDR_VAR 0 3
17232: PUSH
17233: LD_INT 20
17235: PPUSH
17236: LD_VAR 0 1
17240: PPUSH
17241: CALL_OW 321
17245: PUSH
17246: LD_INT 2
17248: EQUAL
17249: ST_TO_ADDR
17250: GO 17467
17252: LD_INT 28
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17266
17258: LD_INT 21
17260: DOUBLE
17261: EQUAL
17262: IFTRUE 17266
17264: GO 17291
17266: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17267: LD_ADDR_VAR 0 3
17271: PUSH
17272: LD_INT 21
17274: PPUSH
17275: LD_VAR 0 1
17279: PPUSH
17280: CALL_OW 321
17284: PUSH
17285: LD_INT 2
17287: EQUAL
17288: ST_TO_ADDR
17289: GO 17467
17291: LD_INT 16
17293: DOUBLE
17294: EQUAL
17295: IFTRUE 17299
17297: GO 17326
17299: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17300: LD_ADDR_VAR 0 3
17304: PUSH
17305: LD_EXP 81
17309: PPUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: CALL_OW 321
17319: PUSH
17320: LD_INT 2
17322: EQUAL
17323: ST_TO_ADDR
17324: GO 17467
17326: LD_INT 19
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17340
17332: LD_INT 23
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17367
17340: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17341: LD_ADDR_VAR 0 3
17345: PUSH
17346: LD_EXP 80
17350: PPUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 321
17360: PUSH
17361: LD_INT 2
17363: EQUAL
17364: ST_TO_ADDR
17365: GO 17467
17367: LD_INT 17
17369: DOUBLE
17370: EQUAL
17371: IFTRUE 17375
17373: GO 17400
17375: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_INT 39
17383: PPUSH
17384: LD_VAR 0 1
17388: PPUSH
17389: CALL_OW 321
17393: PUSH
17394: LD_INT 2
17396: EQUAL
17397: ST_TO_ADDR
17398: GO 17467
17400: LD_INT 18
17402: DOUBLE
17403: EQUAL
17404: IFTRUE 17408
17406: GO 17433
17408: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17409: LD_ADDR_VAR 0 3
17413: PUSH
17414: LD_INT 40
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 321
17426: PUSH
17427: LD_INT 2
17429: EQUAL
17430: ST_TO_ADDR
17431: GO 17467
17433: LD_INT 27
17435: DOUBLE
17436: EQUAL
17437: IFTRUE 17441
17439: GO 17466
17441: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17442: LD_ADDR_VAR 0 3
17446: PUSH
17447: LD_INT 35
17449: PPUSH
17450: LD_VAR 0 1
17454: PPUSH
17455: CALL_OW 321
17459: PUSH
17460: LD_INT 2
17462: EQUAL
17463: ST_TO_ADDR
17464: GO 17467
17466: POP
// end ;
17467: LD_VAR 0 3
17471: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17472: LD_INT 0
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
// result := false ;
17485: LD_ADDR_VAR 0 6
17489: PUSH
17490: LD_INT 0
17492: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17493: LD_VAR 0 1
17497: NOT
17498: PUSH
17499: LD_VAR 0 1
17503: PPUSH
17504: CALL_OW 266
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: IN
17519: NOT
17520: OR
17521: PUSH
17522: LD_VAR 0 2
17526: NOT
17527: OR
17528: PUSH
17529: LD_VAR 0 5
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 3
17545: PUSH
17546: LD_INT 4
17548: PUSH
17549: LD_INT 5
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: IN
17560: NOT
17561: OR
17562: PUSH
17563: LD_VAR 0 3
17567: PPUSH
17568: LD_VAR 0 4
17572: PPUSH
17573: CALL_OW 488
17577: NOT
17578: OR
17579: IFFALSE 17583
// exit ;
17581: GO 18319
// side := GetSide ( depot ) ;
17583: LD_ADDR_VAR 0 9
17587: PUSH
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 255
17597: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17598: LD_VAR 0 9
17602: PPUSH
17603: LD_VAR 0 2
17607: PPUSH
17608: CALL 17092 0 2
17612: NOT
17613: IFFALSE 17617
// exit ;
17615: GO 18319
// pom := GetBase ( depot ) ;
17617: LD_ADDR_VAR 0 10
17621: PUSH
17622: LD_VAR 0 1
17626: PPUSH
17627: CALL_OW 274
17631: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17632: LD_ADDR_VAR 0 11
17636: PUSH
17637: LD_VAR 0 2
17641: PPUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 248
17651: PPUSH
17652: CALL_OW 450
17656: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17657: LD_VAR 0 10
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: CALL_OW 275
17669: PUSH
17670: LD_VAR 0 11
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: GREATEREQUAL
17679: PUSH
17680: LD_VAR 0 10
17684: PPUSH
17685: LD_INT 2
17687: PPUSH
17688: CALL_OW 275
17692: PUSH
17693: LD_VAR 0 11
17697: PUSH
17698: LD_INT 2
17700: ARRAY
17701: GREATEREQUAL
17702: AND
17703: PUSH
17704: LD_VAR 0 10
17708: PPUSH
17709: LD_INT 3
17711: PPUSH
17712: CALL_OW 275
17716: PUSH
17717: LD_VAR 0 11
17721: PUSH
17722: LD_INT 3
17724: ARRAY
17725: GREATEREQUAL
17726: AND
17727: NOT
17728: IFFALSE 17732
// exit ;
17730: GO 18319
// if GetBType ( depot ) = b_depot then
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 0
17744: EQUAL
17745: IFFALSE 17757
// dist := 28 else
17747: LD_ADDR_VAR 0 14
17751: PUSH
17752: LD_INT 28
17754: ST_TO_ADDR
17755: GO 17765
// dist := 36 ;
17757: LD_ADDR_VAR 0 14
17761: PUSH
17762: LD_INT 36
17764: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17765: LD_VAR 0 1
17769: PPUSH
17770: LD_VAR 0 3
17774: PPUSH
17775: LD_VAR 0 4
17779: PPUSH
17780: CALL_OW 297
17784: PUSH
17785: LD_VAR 0 14
17789: GREATER
17790: IFFALSE 17794
// exit ;
17792: GO 18319
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17794: LD_ADDR_VAR 0 12
17798: PUSH
17799: LD_VAR 0 2
17803: PPUSH
17804: LD_VAR 0 3
17808: PPUSH
17809: LD_VAR 0 4
17813: PPUSH
17814: LD_VAR 0 5
17818: PPUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 248
17828: PPUSH
17829: LD_INT 0
17831: PPUSH
17832: CALL 18324 0 6
17836: ST_TO_ADDR
// if not hexes then
17837: LD_VAR 0 12
17841: NOT
17842: IFFALSE 17846
// exit ;
17844: GO 18319
// hex := GetHexInfo ( x , y ) ;
17846: LD_ADDR_VAR 0 15
17850: PUSH
17851: LD_VAR 0 3
17855: PPUSH
17856: LD_VAR 0 4
17860: PPUSH
17861: CALL_OW 546
17865: ST_TO_ADDR
// if hex [ 1 ] then
17866: LD_VAR 0 15
17870: PUSH
17871: LD_INT 1
17873: ARRAY
17874: IFFALSE 17878
// exit ;
17876: GO 18319
// height := hex [ 2 ] ;
17878: LD_ADDR_VAR 0 13
17882: PUSH
17883: LD_VAR 0 15
17887: PUSH
17888: LD_INT 2
17890: ARRAY
17891: ST_TO_ADDR
// for i = 1 to hexes do
17892: LD_ADDR_VAR 0 7
17896: PUSH
17897: DOUBLE
17898: LD_INT 1
17900: DEC
17901: ST_TO_ADDR
17902: LD_VAR 0 12
17906: PUSH
17907: FOR_TO
17908: IFFALSE 18238
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17910: LD_VAR 0 12
17914: PUSH
17915: LD_VAR 0 7
17919: ARRAY
17920: PUSH
17921: LD_INT 1
17923: ARRAY
17924: PPUSH
17925: LD_VAR 0 12
17929: PUSH
17930: LD_VAR 0 7
17934: ARRAY
17935: PUSH
17936: LD_INT 2
17938: ARRAY
17939: PPUSH
17940: CALL_OW 488
17944: NOT
17945: PUSH
17946: LD_VAR 0 12
17950: PUSH
17951: LD_VAR 0 7
17955: ARRAY
17956: PUSH
17957: LD_INT 1
17959: ARRAY
17960: PPUSH
17961: LD_VAR 0 12
17965: PUSH
17966: LD_VAR 0 7
17970: ARRAY
17971: PUSH
17972: LD_INT 2
17974: ARRAY
17975: PPUSH
17976: CALL_OW 428
17980: PUSH
17981: LD_INT 0
17983: GREATER
17984: OR
17985: PUSH
17986: LD_VAR 0 12
17990: PUSH
17991: LD_VAR 0 7
17995: ARRAY
17996: PUSH
17997: LD_INT 1
17999: ARRAY
18000: PPUSH
18001: LD_VAR 0 12
18005: PUSH
18006: LD_VAR 0 7
18010: ARRAY
18011: PUSH
18012: LD_INT 2
18014: ARRAY
18015: PPUSH
18016: CALL_OW 351
18020: OR
18021: IFFALSE 18027
// exit ;
18023: POP
18024: POP
18025: GO 18319
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18027: LD_ADDR_VAR 0 8
18031: PUSH
18032: LD_VAR 0 12
18036: PUSH
18037: LD_VAR 0 7
18041: ARRAY
18042: PUSH
18043: LD_INT 1
18045: ARRAY
18046: PPUSH
18047: LD_VAR 0 12
18051: PUSH
18052: LD_VAR 0 7
18056: ARRAY
18057: PUSH
18058: LD_INT 2
18060: ARRAY
18061: PPUSH
18062: CALL_OW 546
18066: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18067: LD_VAR 0 8
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PUSH
18076: LD_VAR 0 8
18080: PUSH
18081: LD_INT 2
18083: ARRAY
18084: PUSH
18085: LD_VAR 0 13
18089: PUSH
18090: LD_INT 2
18092: PLUS
18093: GREATER
18094: OR
18095: PUSH
18096: LD_VAR 0 8
18100: PUSH
18101: LD_INT 2
18103: ARRAY
18104: PUSH
18105: LD_VAR 0 13
18109: PUSH
18110: LD_INT 2
18112: MINUS
18113: LESS
18114: OR
18115: PUSH
18116: LD_VAR 0 8
18120: PUSH
18121: LD_INT 3
18123: ARRAY
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: LD_INT 8
18130: PUSH
18131: LD_INT 9
18133: PUSH
18134: LD_INT 10
18136: PUSH
18137: LD_INT 11
18139: PUSH
18140: LD_INT 12
18142: PUSH
18143: LD_INT 13
18145: PUSH
18146: LD_INT 16
18148: PUSH
18149: LD_INT 17
18151: PUSH
18152: LD_INT 18
18154: PUSH
18155: LD_INT 19
18157: PUSH
18158: LD_INT 20
18160: PUSH
18161: LD_INT 21
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: IN
18179: NOT
18180: OR
18181: PUSH
18182: LD_VAR 0 8
18186: PUSH
18187: LD_INT 5
18189: ARRAY
18190: NOT
18191: OR
18192: PUSH
18193: LD_VAR 0 8
18197: PUSH
18198: LD_INT 6
18200: ARRAY
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: LD_INT 2
18207: PUSH
18208: LD_INT 7
18210: PUSH
18211: LD_INT 9
18213: PUSH
18214: LD_INT 10
18216: PUSH
18217: LD_INT 11
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: IN
18228: NOT
18229: OR
18230: IFFALSE 18236
// exit ;
18232: POP
18233: POP
18234: GO 18319
// end ;
18236: GO 17907
18238: POP
18239: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18240: LD_VAR 0 9
18244: PPUSH
18245: LD_VAR 0 3
18249: PPUSH
18250: LD_VAR 0 4
18254: PPUSH
18255: LD_INT 20
18257: PPUSH
18258: CALL 10265 0 4
18262: PUSH
18263: LD_INT 4
18265: ARRAY
18266: IFFALSE 18270
// exit ;
18268: GO 18319
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18270: LD_VAR 0 2
18274: PUSH
18275: LD_INT 29
18277: PUSH
18278: LD_INT 30
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: IN
18285: PUSH
18286: LD_VAR 0 3
18290: PPUSH
18291: LD_VAR 0 4
18295: PPUSH
18296: LD_VAR 0 9
18300: PPUSH
18301: CALL_OW 440
18305: NOT
18306: AND
18307: IFFALSE 18311
// exit ;
18309: GO 18319
// result := true ;
18311: LD_ADDR_VAR 0 6
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// end ;
18319: LD_VAR 0 6
18323: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
18336: PPUSH
18337: PPUSH
18338: PPUSH
18339: PPUSH
18340: PPUSH
18341: PPUSH
18342: PPUSH
18343: PPUSH
18344: PPUSH
18345: PPUSH
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
18353: PPUSH
18354: PPUSH
18355: PPUSH
18356: PPUSH
18357: PPUSH
18358: PPUSH
18359: PPUSH
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
// result = [ ] ;
18384: LD_ADDR_VAR 0 7
18388: PUSH
18389: EMPTY
18390: ST_TO_ADDR
// temp_list = [ ] ;
18391: LD_ADDR_VAR 0 9
18395: PUSH
18396: EMPTY
18397: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18398: LD_VAR 0 4
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: LD_INT 3
18414: PUSH
18415: LD_INT 4
18417: PUSH
18418: LD_INT 5
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: IN
18429: NOT
18430: PUSH
18431: LD_VAR 0 1
18435: PUSH
18436: LD_INT 0
18438: PUSH
18439: LD_INT 1
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: IN
18446: PUSH
18447: LD_VAR 0 5
18451: PUSH
18452: LD_INT 1
18454: PUSH
18455: LD_INT 2
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: IN
18466: NOT
18467: AND
18468: OR
18469: IFFALSE 18473
// exit ;
18471: GO 36864
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18473: LD_VAR 0 1
18477: PUSH
18478: LD_INT 6
18480: PUSH
18481: LD_INT 7
18483: PUSH
18484: LD_INT 8
18486: PUSH
18487: LD_INT 13
18489: PUSH
18490: LD_INT 12
18492: PUSH
18493: LD_INT 15
18495: PUSH
18496: LD_INT 11
18498: PUSH
18499: LD_INT 14
18501: PUSH
18502: LD_INT 10
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: IN
18516: IFFALSE 18526
// btype = b_lab ;
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_INT 6
18525: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18526: LD_VAR 0 6
18530: PUSH
18531: LD_INT 0
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: IN
18545: NOT
18546: PUSH
18547: LD_VAR 0 1
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: LD_INT 6
18566: PUSH
18567: LD_INT 36
18569: PUSH
18570: LD_INT 4
18572: PUSH
18573: LD_INT 5
18575: PUSH
18576: LD_INT 31
18578: PUSH
18579: LD_INT 32
18581: PUSH
18582: LD_INT 33
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: IN
18598: NOT
18599: PUSH
18600: LD_VAR 0 6
18604: PUSH
18605: LD_INT 1
18607: EQUAL
18608: AND
18609: OR
18610: PUSH
18611: LD_VAR 0 1
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 3
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: IN
18626: NOT
18627: PUSH
18628: LD_VAR 0 6
18632: PUSH
18633: LD_INT 2
18635: EQUAL
18636: AND
18637: OR
18638: IFFALSE 18648
// mode = 0 ;
18640: LD_ADDR_VAR 0 6
18644: PUSH
18645: LD_INT 0
18647: ST_TO_ADDR
// case mode of 0 :
18648: LD_VAR 0 6
18652: PUSH
18653: LD_INT 0
18655: DOUBLE
18656: EQUAL
18657: IFTRUE 18661
18659: GO 30114
18661: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18662: LD_ADDR_VAR 0 11
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: LD_INT 0
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 1
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: NEG
18721: PUSH
18722: LD_INT 0
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: NEG
18732: PUSH
18733: LD_INT 1
18735: NEG
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 2
18747: NEG
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: LD_INT 2
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: PUSH
18767: LD_INT 1
18769: NEG
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 1
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: LD_INT 2
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18855: LD_ADDR_VAR 0 12
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: LD_INT 0
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 0
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: NEG
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 1
18924: NEG
18925: PUSH
18926: LD_INT 1
18928: NEG
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: LD_INT 1
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: NEG
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 2
18978: NEG
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 2
18989: NEG
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 2
19001: NEG
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 3
19012: NEG
19013: PUSH
19014: LD_INT 0
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 3
19023: NEG
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19051: LD_ADDR_VAR 0 13
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: NEG
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 1
19132: NEG
19133: PUSH
19134: LD_INT 2
19136: NEG
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: LD_INT 1
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: LD_INT 2
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 1
19164: PUSH
19165: LD_INT 2
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: NEG
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: NEG
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 2
19198: NEG
19199: PUSH
19200: LD_INT 3
19202: NEG
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 3
19210: NEG
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 3
19222: NEG
19223: PUSH
19224: LD_INT 3
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19250: LD_ADDR_VAR 0 14
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 0
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 1
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 0
19298: PUSH
19299: LD_INT 1
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: NEG
19309: PUSH
19310: LD_INT 0
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: LD_INT 1
19323: NEG
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PUSH
19333: LD_INT 2
19335: NEG
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: LD_INT 2
19346: NEG
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 1
19354: PUSH
19355: LD_INT 1
19357: NEG
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 3
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 0
19408: PUSH
19409: LD_INT 3
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: PUSH
19420: LD_INT 2
19422: NEG
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19446: LD_ADDR_VAR 0 15
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: LD_INT 1
19466: NEG
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: NEG
19505: PUSH
19506: LD_INT 0
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 1
19519: NEG
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: LD_INT 1
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PUSH
19567: LD_INT 2
19569: NEG
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 2
19580: NEG
19581: PUSH
19582: LD_INT 1
19584: NEG
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: LD_INT 1
19595: NEG
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: LD_INT 0
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 3
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19639: LD_ADDR_VAR 0 16
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 0
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 0
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 0
19687: PUSH
19688: LD_INT 1
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: NEG
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: NEG
19709: PUSH
19710: LD_INT 1
19712: NEG
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 1
19720: NEG
19721: PUSH
19722: LD_INT 2
19724: NEG
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 2
19732: PUSH
19733: LD_INT 1
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: NEG
19763: PUSH
19764: LD_INT 1
19766: NEG
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: LD_INT 2
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 3
19786: PUSH
19787: LD_INT 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 3
19796: PUSH
19797: LD_INT 3
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: LD_INT 3
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19832: LD_ADDR_VAR 0 17
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: LD_INT 1
19852: NEG
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 1
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: LD_INT 1
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: LD_INT 0
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 1
19901: NEG
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 1
19913: NEG
19914: PUSH
19915: LD_INT 2
19917: NEG
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 2
19928: NEG
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 2
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 1
19977: PUSH
19978: LD_INT 2
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 0
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: LD_INT 1
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: NEG
20009: PUSH
20010: LD_INT 0
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 2
20019: NEG
20020: PUSH
20021: LD_INT 1
20023: NEG
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 2
20031: NEG
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20062: LD_ADDR_VAR 0 18
20066: PUSH
20067: LD_INT 0
20069: PUSH
20070: LD_INT 0
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 0
20079: PUSH
20080: LD_INT 1
20082: NEG
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 1
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 1
20100: PUSH
20101: LD_INT 1
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: LD_INT 1
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: LD_INT 1
20131: NEG
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 1
20143: NEG
20144: PUSH
20145: LD_INT 2
20147: NEG
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 0
20155: PUSH
20156: LD_INT 2
20158: NEG
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 2
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: LD_INT 1
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 2
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 0
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 1
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 2
20238: NEG
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 2
20249: NEG
20250: PUSH
20251: LD_INT 1
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 2
20261: NEG
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20292: LD_ADDR_VAR 0 19
20296: PUSH
20297: LD_INT 0
20299: PUSH
20300: LD_INT 0
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 0
20309: PUSH
20310: LD_INT 1
20312: NEG
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: LD_INT 1
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: LD_INT 1
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: LD_INT 0
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: PUSH
20359: LD_INT 1
20361: NEG
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: NEG
20374: PUSH
20375: LD_INT 2
20377: NEG
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 0
20385: PUSH
20386: LD_INT 2
20388: NEG
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: LD_INT 1
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 1
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: NEG
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 0
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 2
20479: NEG
20480: PUSH
20481: LD_INT 1
20483: NEG
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: LD_INT 2
20495: NEG
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20522: LD_ADDR_VAR 0 20
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 0
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 0
20539: PUSH
20540: LD_INT 1
20542: NEG
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 1
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: PUSH
20589: LD_INT 1
20591: NEG
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 1
20603: NEG
20604: PUSH
20605: LD_INT 2
20607: NEG
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 0
20615: PUSH
20616: LD_INT 2
20618: NEG
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: LD_INT 2
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 0
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: NEG
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: NEG
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: EMPTY
20704: LIST
20705: LIST
20706: PUSH
20707: LD_INT 2
20709: NEG
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: LD_INT 2
20721: NEG
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20752: LD_ADDR_VAR 0 21
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 0
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 1
20833: NEG
20834: PUSH
20835: LD_INT 2
20837: NEG
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 0
20845: PUSH
20846: LD_INT 2
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 2
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: LD_INT 1
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 0
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 2
20928: NEG
20929: PUSH
20930: LD_INT 0
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 2
20939: NEG
20940: PUSH
20941: LD_INT 1
20943: NEG
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 2
20951: NEG
20952: PUSH
20953: LD_INT 2
20955: NEG
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20982: LD_ADDR_VAR 0 22
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: LD_INT 0
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 1
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 1
21051: NEG
21052: PUSH
21053: LD_INT 1
21055: NEG
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: LD_INT 2
21067: NEG
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 0
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 2
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: LD_INT 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 0
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 2
21158: NEG
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: LD_INT 2
21185: NEG
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21212: LD_ADDR_VAR 0 23
21216: PUSH
21217: LD_INT 0
21219: PUSH
21220: LD_INT 0
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 0
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: LD_INT 1
21285: NEG
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 1
21293: NEG
21294: PUSH
21295: LD_INT 2
21297: NEG
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: LD_INT 2
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 1
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: LD_INT 2
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: NEG
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 2
21388: NEG
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 2
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: NEG
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 2
21411: NEG
21412: PUSH
21413: LD_INT 2
21415: NEG
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 2
21423: NEG
21424: PUSH
21425: LD_INT 3
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 3
21439: NEG
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: LD_INT 2
21450: NEG
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21492: LD_ADDR_VAR 0 24
21496: PUSH
21497: LD_INT 0
21499: PUSH
21500: LD_INT 0
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 1
21512: NEG
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: LD_INT 0
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 0
21540: PUSH
21541: LD_INT 1
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 0
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 1
21561: NEG
21562: PUSH
21563: LD_INT 1
21565: NEG
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: NEG
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 0
21585: PUSH
21586: LD_INT 2
21588: NEG
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: LD_INT 1
21596: PUSH
21597: LD_INT 1
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: LD_INT 1
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 2
21668: NEG
21669: PUSH
21670: LD_INT 0
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 2
21679: NEG
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 2
21691: NEG
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: LD_INT 2
21706: NEG
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 2
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PUSH
21723: LD_INT 3
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 3
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21768: LD_ADDR_VAR 0 25
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: LD_INT 1
21788: NEG
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 1
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: LD_INT 1
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: NEG
21838: PUSH
21839: LD_INT 1
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: LD_INT 2
21853: NEG
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: LD_INT 2
21864: NEG
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 2
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 2
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 0
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: NEG
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: LD_INT 2
21944: NEG
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PUSH
21953: LD_INT 2
21955: NEG
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 2
21967: NEG
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 3
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 3
21989: PUSH
21990: LD_INT 2
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 3
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 1
22009: PUSH
22010: LD_INT 3
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22042: LD_ADDR_VAR 0 26
22046: PUSH
22047: LD_INT 0
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 0
22059: PUSH
22060: LD_INT 1
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 1
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 0
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: NEG
22101: PUSH
22102: LD_INT 0
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: NEG
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: LD_INT 2
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 0
22135: PUSH
22136: LD_INT 2
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 2
22157: PUSH
22158: LD_INT 0
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 1
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 0
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: NEG
22208: PUSH
22209: LD_INT 1
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: NEG
22219: PUSH
22220: LD_INT 0
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 2
22241: NEG
22242: PUSH
22243: LD_INT 2
22245: NEG
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: LD_INT 3
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 1
22263: PUSH
22264: LD_INT 3
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: LD_INT 1
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22318: LD_ADDR_VAR 0 27
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: LD_INT 1
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: LD_INT 0
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: LD_INT 1
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 0
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: NEG
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 1
22387: NEG
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: LD_INT 2
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 0
22411: PUSH
22412: LD_INT 2
22414: NEG
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 0
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 1
22463: PUSH
22464: LD_INT 2
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 0
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 2
22494: NEG
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 2
22505: NEG
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: LD_INT 2
22521: NEG
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 2
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 2
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 3
22551: NEG
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 3
22563: NEG
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22598: LD_ADDR_VAR 0 28
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: LD_INT 2
22683: NEG
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: LD_INT 0
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 2
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: NEG
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 2
22774: NEG
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 2
22785: NEG
22786: PUSH
22787: LD_INT 1
22789: NEG
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 2
22797: NEG
22798: PUSH
22799: LD_INT 2
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: LD_INT 3
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 1
22821: NEG
22822: PUSH
22823: LD_INT 3
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: LD_INT 1
22837: NEG
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 3
22845: NEG
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22880: LD_ADDR_VAR 0 29
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 0
22897: PUSH
22898: LD_INT 1
22900: NEG
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: LD_INT 0
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 0
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: NEG
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: LD_INT 1
22953: NEG
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: LD_INT 2
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: LD_INT 2
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 1
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 2
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: LD_INT 1
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: LD_INT 2
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: NEG
23047: PUSH
23048: LD_INT 1
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 2
23058: NEG
23059: PUSH
23060: LD_INT 2
23062: NEG
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 2
23070: NEG
23071: PUSH
23072: LD_INT 3
23074: NEG
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: LD_INT 1
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_INT 3
23124: NEG
23125: PUSH
23126: LD_INT 2
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23159: LD_ADDR_VAR 0 30
23163: PUSH
23164: LD_INT 0
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 0
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: PUSH
23198: LD_INT 1
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: LD_INT 0
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: LD_INT 1
23228: NEG
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 2
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 2
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: NEG
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 3
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: LD_INT 2
23363: NEG
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 3
23371: PUSH
23372: LD_INT 2
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: LD_INT 3
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 2
23391: NEG
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 3
23402: NEG
23403: PUSH
23404: LD_INT 1
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23437: LD_ADDR_VAR 0 31
23441: PUSH
23442: LD_INT 0
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 0
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 1
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: NEG
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 1
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 2
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: LD_INT 2
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: NEG
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 2
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 2
23626: NEG
23627: PUSH
23628: LD_INT 3
23630: NEG
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 3
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 3
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 3
23680: NEG
23681: PUSH
23682: LD_INT 2
23684: NEG
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23715: LD_ADDR_VAR 0 32
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 1
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 1
23743: PUSH
23744: LD_INT 0
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 0
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: LD_INT 0
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: LD_INT 2
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: LD_INT 1
23822: NEG
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 2
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 2
23840: PUSH
23841: LD_INT 2
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 2
23881: NEG
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 1
23904: NEG
23905: PUSH
23906: LD_INT 3
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 2
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 3
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 3
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: NEG
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 3
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23993: LD_ADDR_VAR 0 33
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: LD_INT 1
24013: NEG
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 1
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: LD_INT 1
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: NEG
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 1
24062: NEG
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: LD_INT 2
24078: NEG
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 1
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 1
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: NEG
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 2
24148: NEG
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 2
24159: NEG
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: NEG
24184: PUSH
24185: LD_INT 3
24187: NEG
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: LD_INT 1
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 3
24206: PUSH
24207: LD_INT 1
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 1
24216: PUSH
24217: LD_INT 3
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 3
24237: NEG
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24272: LD_ADDR_VAR 0 34
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 0
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 1
24330: NEG
24331: PUSH
24332: LD_INT 0
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 1
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: LD_INT 2
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 0
24365: PUSH
24366: LD_INT 2
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: LD_INT 1
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 2
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 1
24417: NEG
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 2
24428: NEG
24429: PUSH
24430: LD_INT 0
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 2
24439: NEG
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: LD_INT 2
24451: NEG
24452: PUSH
24453: LD_INT 2
24455: NEG
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: LD_INT 3
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: LD_INT 2
24478: NEG
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 3
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 2
24496: PUSH
24497: LD_INT 3
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: NEG
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 3
24517: NEG
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24552: LD_ADDR_VAR 0 35
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 1
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 0
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 1
24621: NEG
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: NEG
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24664: LD_ADDR_VAR 0 36
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 1
24702: PUSH
24703: LD_INT 1
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 0
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: LD_INT 1
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: LD_INT 2
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 2
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24776: LD_ADDR_VAR 0 37
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: LD_INT 0
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 0
24824: PUSH
24825: LD_INT 1
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: LD_INT 1
24849: NEG
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24888: LD_ADDR_VAR 0 38
24892: PUSH
24893: LD_INT 0
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: LD_INT 1
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: NEG
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25000: LD_ADDR_VAR 0 39
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: LD_INT 0
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: LD_INT 1
25073: NEG
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: LD_INT 2
25085: NEG
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 1
25093: PUSH
25094: LD_INT 2
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25112: LD_ADDR_VAR 0 40
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 1
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: LD_INT 1
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: NEG
25171: PUSH
25172: LD_INT 0
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 1
25204: NEG
25205: PUSH
25206: LD_INT 1
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25224: LD_ADDR_VAR 0 41
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 0
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 1
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 1
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: NEG
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 1
25293: NEG
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 2
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 1
25320: NEG
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 2
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 2
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 2
25390: NEG
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: LD_INT 2
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: NEG
25415: PUSH
25416: LD_INT 3
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: PUSH
25468: LD_INT 3
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 2
25477: PUSH
25478: LD_INT 3
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 3
25509: NEG
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 3
25521: NEG
25522: PUSH
25523: LD_INT 2
25525: NEG
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 3
25533: NEG
25534: PUSH
25535: LD_INT 3
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25574: LD_ADDR_VAR 0 42
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: NEG
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: NEG
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 1
25655: NEG
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 2
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: NEG
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: LD_INT 3
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: LD_INT 3
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: LD_INT 3
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 3
25810: PUSH
25811: LD_INT 2
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 3
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: LD_INT 3
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: PUSH
25841: LD_INT 3
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 3
25871: NEG
25872: PUSH
25873: LD_INT 2
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 3
25883: NEG
25884: PUSH
25885: LD_INT 3
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25924: LD_ADDR_VAR 0 43
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 0
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 0
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: NEG
25983: PUSH
25984: LD_INT 0
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 2
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 1
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 2
26090: NEG
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 2
26101: NEG
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: LD_INT 3
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 3
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: LD_INT 2
26139: NEG
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 3
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 3
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: LD_INT 3
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 2
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 3
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 3
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26272: LD_ADDR_VAR 0 44
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: LD_INT 2
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 2
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: LD_INT 2
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 2
26438: NEG
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 2
26450: NEG
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 2
26462: NEG
26463: PUSH
26464: LD_INT 3
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 2
26474: PUSH
26475: LD_INT 1
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 3
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: LD_INT 3
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 3
26546: NEG
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 3
26581: NEG
26582: PUSH
26583: LD_INT 3
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26622: LD_ADDR_VAR 0 45
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 2
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: LD_INT 2
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: NEG
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: NEG
26789: PUSH
26790: LD_INT 1
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 2
26812: NEG
26813: PUSH
26814: LD_INT 3
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 3
26828: NEG
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 3
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: LD_INT 2
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: LD_INT 3
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: LD_INT 3
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 3
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 3
26919: NEG
26920: PUSH
26921: LD_INT 2
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: NEG
26932: PUSH
26933: LD_INT 3
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26972: LD_ADDR_VAR 0 46
26976: PUSH
26977: LD_INT 0
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 3
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 3
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 2
27187: NEG
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 2
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 3
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 3
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 3
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: NEG
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 3
27268: NEG
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 3
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27320: LD_ADDR_VAR 0 47
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: LD_INT 1
27340: NEG
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 2
27405: NEG
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27471: LD_ADDR_VAR 0 48
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: LD_INT 0
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: LD_INT 1
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 1
27509: PUSH
27510: LD_INT 1
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 0
27564: PUSH
27565: LD_INT 2
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 1
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 2
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27618: LD_ADDR_VAR 0 49
27622: PUSH
27623: LD_INT 0
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 0
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27762: LD_ADDR_VAR 0 50
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: LD_INT 1
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: NEG
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: NEG
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 2
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27906: LD_ADDR_VAR 0 51
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: NEG
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28053: LD_ADDR_VAR 0 52
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 0
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: NEG
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PUSH
28136: LD_INT 2
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 2
28157: NEG
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 2
28168: NEG
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: NEG
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28204: LD_ADDR_VAR 0 53
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: LD_INT 2
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 2
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28434: LD_ADDR_VAR 0 54
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 1
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 2
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: NEG
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28664: LD_ADDR_VAR 0 55
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28894: LD_ADDR_VAR 0 56
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29124: LD_ADDR_VAR 0 57
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29354: LD_ADDR_VAR 0 58
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: NEG
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 2
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29584: LD_ADDR_VAR 0 59
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29672: LD_ADDR_VAR 0 60
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 0
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: NEG
29731: PUSH
29732: LD_INT 0
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 1
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29760: LD_ADDR_VAR 0 61
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 0
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 1
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29848: LD_ADDR_VAR 0 62
29852: PUSH
29853: LD_INT 0
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: NEG
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29936: LD_ADDR_VAR 0 63
29940: PUSH
29941: LD_INT 0
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: LD_INT 1
30009: NEG
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30024: LD_ADDR_VAR 0 64
30028: PUSH
30029: LD_INT 0
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: ST_TO_ADDR
// end ; 1 :
30112: GO 36009
30114: LD_INT 1
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 32745
30122: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30123: LD_ADDR_VAR 0 11
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: LD_INT 3
30145: NEG
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: LIST
30166: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30167: LD_ADDR_VAR 0 12
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30208: LD_ADDR_VAR 0 13
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 3
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30248: LD_ADDR_VAR 0 14
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: LD_INT 3
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30289: LD_ADDR_VAR 0 15
30293: PUSH
30294: LD_INT 2
30296: NEG
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 3
30307: NEG
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 3
30318: NEG
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30333: LD_ADDR_VAR 0 16
30337: PUSH
30338: LD_INT 2
30340: NEG
30341: PUSH
30342: LD_INT 3
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: NEG
30353: PUSH
30354: LD_INT 2
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 3
30364: NEG
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: LIST
30378: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30379: LD_ADDR_VAR 0 17
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 3
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30423: LD_ADDR_VAR 0 18
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 3
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 3
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30464: LD_ADDR_VAR 0 19
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: LD_INT 3
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: PUSH
30492: LD_INT 3
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30504: LD_ADDR_VAR 0 20
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 0
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30545: LD_ADDR_VAR 0 21
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30589: LD_ADDR_VAR 0 22
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: LD_INT 3
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: LD_INT 2
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30635: LD_ADDR_VAR 0 23
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 3
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 4
30657: NEG
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: PUSH
30666: LD_INT 3
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30679: LD_ADDR_VAR 0 24
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 4
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30720: LD_ADDR_VAR 0 25
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: LD_INT 3
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 4
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30760: LD_ADDR_VAR 0 26
30764: PUSH
30765: LD_INT 0
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: LD_INT 4
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 1
30787: NEG
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: LIST
30800: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30801: LD_ADDR_VAR 0 27
30805: PUSH
30806: LD_INT 3
30808: NEG
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 3
30819: NEG
30820: PUSH
30821: LD_INT 1
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 4
30830: NEG
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30845: LD_ADDR_VAR 0 28
30849: PUSH
30850: LD_INT 3
30852: NEG
30853: PUSH
30854: LD_INT 3
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 3
30864: NEG
30865: PUSH
30866: LD_INT 4
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: LD_INT 3
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30891: LD_ADDR_VAR 0 29
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: LD_INT 3
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 1
30932: NEG
30933: PUSH
30934: LD_INT 4
30936: NEG
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 4
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 3
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 5
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: LD_INT 5
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: LD_INT 6
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 6
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: LD_INT 5
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31046: LD_ADDR_VAR 0 30
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 4
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 5
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 6
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 6
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31189: LD_ADDR_VAR 0 31
31193: PUSH
31194: LD_INT 3
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 3
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 2
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 4
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 4
31236: PUSH
31237: LD_INT 4
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 4
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 5
31256: PUSH
31257: LD_INT 4
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 5
31266: PUSH
31267: LD_INT 5
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 4
31276: PUSH
31277: LD_INT 5
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 6
31286: PUSH
31287: LD_INT 5
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 6
31296: PUSH
31297: LD_INT 6
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 5
31306: PUSH
31307: LD_INT 6
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31328: LD_ADDR_VAR 0 32
31332: PUSH
31333: LD_INT 1
31335: PUSH
31336: LD_INT 3
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 3
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 4
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 4
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: LD_INT 3
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 5
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 5
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 6
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: LD_INT 6
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 5
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31471: LD_ADDR_VAR 0 33
31475: PUSH
31476: LD_INT 2
31478: NEG
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 3
31489: NEG
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 4
31523: NEG
31524: PUSH
31525: LD_INT 0
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 4
31534: NEG
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 4
31546: NEG
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 5
31557: NEG
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 5
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 5
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 6
31591: NEG
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 6
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31626: LD_ADDR_VAR 0 34
31630: PUSH
31631: LD_INT 2
31633: NEG
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: NEG
31646: PUSH
31647: LD_INT 2
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 3
31657: NEG
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 3
31669: NEG
31670: PUSH
31671: LD_INT 4
31673: NEG
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 4
31681: NEG
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 4
31693: NEG
31694: PUSH
31695: LD_INT 4
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 4
31705: NEG
31706: PUSH
31707: LD_INT 5
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 5
31717: NEG
31718: PUSH
31719: LD_INT 4
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 5
31729: NEG
31730: PUSH
31731: LD_INT 5
31733: NEG
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 5
31741: NEG
31742: PUSH
31743: LD_INT 6
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 6
31753: NEG
31754: PUSH
31755: LD_INT 5
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 6
31765: NEG
31766: PUSH
31767: LD_INT 6
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31789: LD_ADDR_VAR 0 41
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: LD_INT 2
31799: NEG
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31833: LD_ADDR_VAR 0 42
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: LIST
31873: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31874: LD_ADDR_VAR 0 43
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: LIST
31913: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31914: LD_ADDR_VAR 0 44
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 3
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: LIST
31954: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31955: LD_ADDR_VAR 0 45
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: NEG
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31999: LD_ADDR_VAR 0 46
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 3
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32045: LD_ADDR_VAR 0 47
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: LD_INT 3
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32078: LD_ADDR_VAR 0 48
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 2
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32109: LD_ADDR_VAR 0 49
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32138: LD_ADDR_VAR 0 50
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: LD_INT 3
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32167: LD_ADDR_VAR 0 51
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 2
32185: NEG
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32198: LD_ADDR_VAR 0 52
32202: PUSH
32203: LD_INT 3
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 3
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32231: LD_ADDR_VAR 0 53
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 3
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 3
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32275: LD_ADDR_VAR 0 54
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 3
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32316: LD_ADDR_VAR 0 55
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: LD_INT 2
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: PUSH
32334: LD_INT 3
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32356: LD_ADDR_VAR 0 56
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 3
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 2
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: LIST
32396: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32397: LD_ADDR_VAR 0 57
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 3
32415: NEG
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 3
32426: NEG
32427: PUSH
32428: LD_INT 1
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: LIST
32440: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32441: LD_ADDR_VAR 0 58
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 3
32460: NEG
32461: PUSH
32462: LD_INT 2
32464: NEG
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: LD_INT 3
32476: NEG
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: LIST
32486: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32487: LD_ADDR_VAR 0 59
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32531: LD_ADDR_VAR 0 60
32535: PUSH
32536: LD_INT 1
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32572: LD_ADDR_VAR 0 61
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 2
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32612: LD_ADDR_VAR 0 62
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32653: LD_ADDR_VAR 0 63
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: LIST
32696: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32697: LD_ADDR_VAR 0 64
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 2
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: ST_TO_ADDR
// end ; 2 :
32743: GO 36009
32745: LD_INT 2
32747: DOUBLE
32748: EQUAL
32749: IFTRUE 32753
32751: GO 36008
32753: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32754: LD_ADDR_VAR 0 29
32758: PUSH
32759: LD_INT 4
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 4
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 5
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 5
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 4
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 3
32812: PUSH
32813: LD_INT 0
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 3
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: LD_INT 2
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 5
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 3
32854: PUSH
32855: LD_INT 3
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 4
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: PUSH
32885: LD_INT 4
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: LD_INT 3
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: LD_INT 2
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 4
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: LD_INT 4
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 4
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 1
32974: PUSH
32975: LD_INT 5
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 5
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 4
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 5
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 3
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 3
33037: NEG
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 3
33048: NEG
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: LD_INT 1
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 3
33082: NEG
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 4
33104: NEG
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 4
33116: NEG
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: NEG
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 4
33139: NEG
33140: PUSH
33141: LD_INT 4
33143: NEG
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 4
33151: NEG
33152: PUSH
33153: LD_INT 5
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 3
33163: NEG
33164: PUSH
33165: LD_INT 4
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: LD_INT 3
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 4
33187: NEG
33188: PUSH
33189: LD_INT 3
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 5
33199: NEG
33200: PUSH
33201: LD_INT 4
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 5
33211: NEG
33212: PUSH
33213: LD_INT 5
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 3
33223: NEG
33224: PUSH
33225: LD_INT 5
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 5
33235: NEG
33236: PUSH
33237: LD_INT 3
33239: NEG
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33292: LD_ADDR_VAR 0 30
33296: PUSH
33297: LD_INT 4
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 3
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 5
33319: PUSH
33320: LD_INT 4
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 5
33329: PUSH
33330: LD_INT 5
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: LD_INT 5
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: LD_INT 4
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 3
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: LD_INT 3
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 2
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: LD_INT 4
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 4
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: LD_INT 3
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 2
33461: PUSH
33462: LD_INT 4
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 4
33482: NEG
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 4
33493: NEG
33494: PUSH
33495: LD_INT 1
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 3
33505: NEG
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 3
33516: NEG
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 4
33527: NEG
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 5
33538: NEG
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 5
33549: NEG
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 5
33561: NEG
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 3
33573: NEG
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: NEG
33585: PUSH
33586: LD_INT 3
33588: NEG
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 3
33596: NEG
33597: PUSH
33598: LD_INT 4
33600: NEG
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: LD_INT 3
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 2
33620: NEG
33621: PUSH
33622: LD_INT 2
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 3
33632: NEG
33633: PUSH
33634: LD_INT 2
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 4
33644: NEG
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 4
33656: NEG
33657: PUSH
33658: LD_INT 4
33660: NEG
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 2
33668: NEG
33669: PUSH
33670: LD_INT 4
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 4
33680: NEG
33681: PUSH
33682: LD_INT 2
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 4
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 5
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 4
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: LD_INT 3
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 3
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: LD_INT 4
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: LD_INT 5
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 3
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: LD_INT 5
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33839: LD_ADDR_VAR 0 31
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 4
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: LD_INT 3
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: PUSH
33867: LD_INT 4
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: PUSH
33877: LD_INT 5
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: LD_INT 5
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: NEG
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 3
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: LD_INT 5
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 2
33928: NEG
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 3
33950: NEG
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 3
33984: NEG
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 4
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 4
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 4
34018: NEG
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 4
34041: NEG
34042: PUSH
34043: LD_INT 4
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 4
34053: NEG
34054: PUSH
34055: LD_INT 5
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 3
34065: NEG
34066: PUSH
34067: LD_INT 4
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 3
34077: NEG
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 4
34089: NEG
34090: PUSH
34091: LD_INT 3
34093: NEG
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 5
34101: NEG
34102: PUSH
34103: LD_INT 4
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 5
34113: NEG
34114: PUSH
34115: LD_INT 5
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 3
34125: NEG
34126: PUSH
34127: LD_INT 5
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 5
34137: NEG
34138: PUSH
34139: LD_INT 3
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: LD_INT 4
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: LD_INT 3
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 2
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: LD_INT 3
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 4
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: LD_INT 4
34243: NEG
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 4
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 4
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 5
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 5
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 4
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 3
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 3
34312: PUSH
34313: LD_INT 1
34315: NEG
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 3
34323: PUSH
34324: LD_INT 2
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 5
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34389: LD_ADDR_VAR 0 32
34393: PUSH
34394: LD_INT 4
34396: NEG
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 4
34407: NEG
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 3
34419: NEG
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 3
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: NEG
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 5
34452: NEG
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 5
34463: NEG
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 5
34475: NEG
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 3
34487: NEG
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 3
34498: NEG
34499: PUSH
34500: LD_INT 3
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 3
34510: NEG
34511: PUSH
34512: LD_INT 4
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 2
34534: NEG
34535: PUSH
34536: LD_INT 2
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 3
34546: NEG
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 4
34558: NEG
34559: PUSH
34560: LD_INT 3
34562: NEG
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 4
34570: NEG
34571: PUSH
34572: LD_INT 4
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: LD_INT 4
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 4
34594: NEG
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: LD_INT 4
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 5
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 4
34631: NEG
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: LD_INT 3
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 3
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: LD_INT 4
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 5
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 3
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 5
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 3
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 4
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 4
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 3
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 4
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 4
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 4
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 5
34821: PUSH
34822: LD_INT 4
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 5
34831: PUSH
34832: LD_INT 5
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 5
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 4
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 3
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 5
34871: PUSH
34872: LD_INT 3
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34936: LD_ADDR_VAR 0 33
34940: PUSH
34941: LD_INT 4
34943: NEG
34944: PUSH
34945: LD_INT 4
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 4
34955: NEG
34956: PUSH
34957: LD_INT 5
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 3
34967: NEG
34968: PUSH
34969: LD_INT 4
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 3
34979: NEG
34980: PUSH
34981: LD_INT 3
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 4
34991: NEG
34992: PUSH
34993: LD_INT 3
34995: NEG
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 5
35003: NEG
35004: PUSH
35005: LD_INT 4
35007: NEG
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 5
35015: NEG
35016: PUSH
35017: LD_INT 5
35019: NEG
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 3
35027: NEG
35028: PUSH
35029: LD_INT 5
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 5
35039: NEG
35040: PUSH
35041: LD_INT 3
35043: NEG
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 4
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 3
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: LD_INT 2
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 0
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 3
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: LD_INT 4
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 4
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 4
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 4
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 5
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 5
35184: PUSH
35185: LD_INT 1
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 4
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 3
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 3
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 5
35236: PUSH
35237: LD_INT 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 3
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 3
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 4
35266: PUSH
35267: LD_INT 3
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 4
35276: PUSH
35277: LD_INT 4
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: LD_INT 4
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: LD_INT 3
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 4
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 4
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 0
35336: PUSH
35337: LD_INT 4
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: LD_INT 4
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 5
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 5
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: LD_INT 4
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: LD_INT 3
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: LD_INT 5
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 2
35418: NEG
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35474: LD_ADDR_VAR 0 34
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: LD_INT 4
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 5
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 4
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 1
35514: PUSH
35515: LD_INT 3
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 3
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: LD_INT 4
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 5
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: LD_INT 3
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 5
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 3
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 4
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 4
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 3
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: LD_INT 2
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 4
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 4
35676: PUSH
35677: LD_INT 4
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 4
35686: PUSH
35687: LD_INT 3
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 5
35696: PUSH
35697: LD_INT 4
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 5
35706: PUSH
35707: LD_INT 5
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 4
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 3
35726: PUSH
35727: LD_INT 4
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: LD_INT 3
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: LD_INT 3
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 3
35756: PUSH
35757: LD_INT 5
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 3
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 4
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 4
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 3
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 4
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 2
35848: NEG
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 4
35859: NEG
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 4
35870: NEG
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 3
35882: NEG
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 3
35893: NEG
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 4
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 5
35915: NEG
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 5
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 5
35938: NEG
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: ST_TO_ADDR
// end ; end ;
36006: GO 36009
36008: POP
// case btype of b_depot , b_warehouse :
36009: LD_VAR 0 1
36013: PUSH
36014: LD_INT 0
36016: DOUBLE
36017: EQUAL
36018: IFTRUE 36028
36020: LD_INT 1
36022: DOUBLE
36023: EQUAL
36024: IFTRUE 36028
36026: GO 36229
36028: POP
// case nation of nation_american :
36029: LD_VAR 0 5
36033: PUSH
36034: LD_INT 1
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36042
36040: GO 36098
36042: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36043: LD_ADDR_VAR 0 9
36047: PUSH
36048: LD_VAR 0 11
36052: PUSH
36053: LD_VAR 0 12
36057: PUSH
36058: LD_VAR 0 13
36062: PUSH
36063: LD_VAR 0 14
36067: PUSH
36068: LD_VAR 0 15
36072: PUSH
36073: LD_VAR 0 16
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: PUSH
36086: LD_VAR 0 4
36090: PUSH
36091: LD_INT 1
36093: PLUS
36094: ARRAY
36095: ST_TO_ADDR
36096: GO 36227
36098: LD_INT 2
36100: DOUBLE
36101: EQUAL
36102: IFTRUE 36106
36104: GO 36162
36106: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_VAR 0 17
36116: PUSH
36117: LD_VAR 0 18
36121: PUSH
36122: LD_VAR 0 19
36126: PUSH
36127: LD_VAR 0 20
36131: PUSH
36132: LD_VAR 0 21
36136: PUSH
36137: LD_VAR 0 22
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: PUSH
36150: LD_VAR 0 4
36154: PUSH
36155: LD_INT 1
36157: PLUS
36158: ARRAY
36159: ST_TO_ADDR
36160: GO 36227
36162: LD_INT 3
36164: DOUBLE
36165: EQUAL
36166: IFTRUE 36170
36168: GO 36226
36170: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36171: LD_ADDR_VAR 0 9
36175: PUSH
36176: LD_VAR 0 23
36180: PUSH
36181: LD_VAR 0 24
36185: PUSH
36186: LD_VAR 0 25
36190: PUSH
36191: LD_VAR 0 26
36195: PUSH
36196: LD_VAR 0 27
36200: PUSH
36201: LD_VAR 0 28
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: PUSH
36214: LD_VAR 0 4
36218: PUSH
36219: LD_INT 1
36221: PLUS
36222: ARRAY
36223: ST_TO_ADDR
36224: GO 36227
36226: POP
36227: GO 36782
36229: LD_INT 2
36231: DOUBLE
36232: EQUAL
36233: IFTRUE 36243
36235: LD_INT 3
36237: DOUBLE
36238: EQUAL
36239: IFTRUE 36243
36241: GO 36299
36243: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36244: LD_ADDR_VAR 0 9
36248: PUSH
36249: LD_VAR 0 29
36253: PUSH
36254: LD_VAR 0 30
36258: PUSH
36259: LD_VAR 0 31
36263: PUSH
36264: LD_VAR 0 32
36268: PUSH
36269: LD_VAR 0 33
36273: PUSH
36274: LD_VAR 0 34
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: PUSH
36287: LD_VAR 0 4
36291: PUSH
36292: LD_INT 1
36294: PLUS
36295: ARRAY
36296: ST_TO_ADDR
36297: GO 36782
36299: LD_INT 16
36301: DOUBLE
36302: EQUAL
36303: IFTRUE 36361
36305: LD_INT 17
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36361
36311: LD_INT 18
36313: DOUBLE
36314: EQUAL
36315: IFTRUE 36361
36317: LD_INT 19
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36361
36323: LD_INT 22
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36361
36329: LD_INT 20
36331: DOUBLE
36332: EQUAL
36333: IFTRUE 36361
36335: LD_INT 21
36337: DOUBLE
36338: EQUAL
36339: IFTRUE 36361
36341: LD_INT 23
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36361
36347: LD_INT 24
36349: DOUBLE
36350: EQUAL
36351: IFTRUE 36361
36353: LD_INT 25
36355: DOUBLE
36356: EQUAL
36357: IFTRUE 36361
36359: GO 36417
36361: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_VAR 0 35
36371: PUSH
36372: LD_VAR 0 36
36376: PUSH
36377: LD_VAR 0 37
36381: PUSH
36382: LD_VAR 0 38
36386: PUSH
36387: LD_VAR 0 39
36391: PUSH
36392: LD_VAR 0 40
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: PUSH
36405: LD_VAR 0 4
36409: PUSH
36410: LD_INT 1
36412: PLUS
36413: ARRAY
36414: ST_TO_ADDR
36415: GO 36782
36417: LD_INT 6
36419: DOUBLE
36420: EQUAL
36421: IFTRUE 36473
36423: LD_INT 7
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36473
36429: LD_INT 8
36431: DOUBLE
36432: EQUAL
36433: IFTRUE 36473
36435: LD_INT 13
36437: DOUBLE
36438: EQUAL
36439: IFTRUE 36473
36441: LD_INT 12
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36473
36447: LD_INT 15
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36473
36453: LD_INT 11
36455: DOUBLE
36456: EQUAL
36457: IFTRUE 36473
36459: LD_INT 14
36461: DOUBLE
36462: EQUAL
36463: IFTRUE 36473
36465: LD_INT 10
36467: DOUBLE
36468: EQUAL
36469: IFTRUE 36473
36471: GO 36529
36473: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36474: LD_ADDR_VAR 0 9
36478: PUSH
36479: LD_VAR 0 41
36483: PUSH
36484: LD_VAR 0 42
36488: PUSH
36489: LD_VAR 0 43
36493: PUSH
36494: LD_VAR 0 44
36498: PUSH
36499: LD_VAR 0 45
36503: PUSH
36504: LD_VAR 0 46
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: PUSH
36517: LD_VAR 0 4
36521: PUSH
36522: LD_INT 1
36524: PLUS
36525: ARRAY
36526: ST_TO_ADDR
36527: GO 36782
36529: LD_INT 36
36531: DOUBLE
36532: EQUAL
36533: IFTRUE 36537
36535: GO 36593
36537: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36538: LD_ADDR_VAR 0 9
36542: PUSH
36543: LD_VAR 0 47
36547: PUSH
36548: LD_VAR 0 48
36552: PUSH
36553: LD_VAR 0 49
36557: PUSH
36558: LD_VAR 0 50
36562: PUSH
36563: LD_VAR 0 51
36567: PUSH
36568: LD_VAR 0 52
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: PUSH
36581: LD_VAR 0 4
36585: PUSH
36586: LD_INT 1
36588: PLUS
36589: ARRAY
36590: ST_TO_ADDR
36591: GO 36782
36593: LD_INT 4
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36619
36599: LD_INT 5
36601: DOUBLE
36602: EQUAL
36603: IFTRUE 36619
36605: LD_INT 34
36607: DOUBLE
36608: EQUAL
36609: IFTRUE 36619
36611: LD_INT 37
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36675
36619: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 53
36629: PUSH
36630: LD_VAR 0 54
36634: PUSH
36635: LD_VAR 0 55
36639: PUSH
36640: LD_VAR 0 56
36644: PUSH
36645: LD_VAR 0 57
36649: PUSH
36650: LD_VAR 0 58
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: PUSH
36663: LD_VAR 0 4
36667: PUSH
36668: LD_INT 1
36670: PLUS
36671: ARRAY
36672: ST_TO_ADDR
36673: GO 36782
36675: LD_INT 31
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36725
36681: LD_INT 32
36683: DOUBLE
36684: EQUAL
36685: IFTRUE 36725
36687: LD_INT 33
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36725
36693: LD_INT 27
36695: DOUBLE
36696: EQUAL
36697: IFTRUE 36725
36699: LD_INT 26
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36725
36705: LD_INT 28
36707: DOUBLE
36708: EQUAL
36709: IFTRUE 36725
36711: LD_INT 29
36713: DOUBLE
36714: EQUAL
36715: IFTRUE 36725
36717: LD_INT 30
36719: DOUBLE
36720: EQUAL
36721: IFTRUE 36725
36723: GO 36781
36725: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36726: LD_ADDR_VAR 0 9
36730: PUSH
36731: LD_VAR 0 59
36735: PUSH
36736: LD_VAR 0 60
36740: PUSH
36741: LD_VAR 0 61
36745: PUSH
36746: LD_VAR 0 62
36750: PUSH
36751: LD_VAR 0 63
36755: PUSH
36756: LD_VAR 0 64
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: PUSH
36769: LD_VAR 0 4
36773: PUSH
36774: LD_INT 1
36776: PLUS
36777: ARRAY
36778: ST_TO_ADDR
36779: GO 36782
36781: POP
// temp_list2 = [ ] ;
36782: LD_ADDR_VAR 0 10
36786: PUSH
36787: EMPTY
36788: ST_TO_ADDR
// for i in temp_list do
36789: LD_ADDR_VAR 0 8
36793: PUSH
36794: LD_VAR 0 9
36798: PUSH
36799: FOR_IN
36800: IFFALSE 36852
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36802: LD_ADDR_VAR 0 10
36806: PUSH
36807: LD_VAR 0 10
36811: PUSH
36812: LD_VAR 0 8
36816: PUSH
36817: LD_INT 1
36819: ARRAY
36820: PUSH
36821: LD_VAR 0 2
36825: PLUS
36826: PUSH
36827: LD_VAR 0 8
36831: PUSH
36832: LD_INT 2
36834: ARRAY
36835: PUSH
36836: LD_VAR 0 3
36840: PLUS
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: EMPTY
36847: LIST
36848: ADD
36849: ST_TO_ADDR
36850: GO 36799
36852: POP
36853: POP
// result = temp_list2 ;
36854: LD_ADDR_VAR 0 7
36858: PUSH
36859: LD_VAR 0 10
36863: ST_TO_ADDR
// end ;
36864: LD_VAR 0 7
36868: RET
// export function EnemyInRange ( unit , dist ) ; begin
36869: LD_INT 0
36871: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36872: LD_ADDR_VAR 0 3
36876: PUSH
36877: LD_VAR 0 1
36881: PPUSH
36882: CALL_OW 255
36886: PPUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 250
36896: PPUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 251
36906: PPUSH
36907: LD_VAR 0 2
36911: PPUSH
36912: CALL 10265 0 4
36916: PUSH
36917: LD_INT 4
36919: ARRAY
36920: ST_TO_ADDR
// end ;
36921: LD_VAR 0 3
36925: RET
// export function PlayerSeeMe ( unit ) ; begin
36926: LD_INT 0
36928: PPUSH
// result := See ( your_side , unit ) ;
36929: LD_ADDR_VAR 0 2
36933: PUSH
36934: LD_OWVAR 2
36938: PPUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 292
36948: ST_TO_ADDR
// end ;
36949: LD_VAR 0 2
36953: RET
// export function ReverseDir ( unit ) ; begin
36954: LD_INT 0
36956: PPUSH
// if not unit then
36957: LD_VAR 0 1
36961: NOT
36962: IFFALSE 36966
// exit ;
36964: GO 36989
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36966: LD_ADDR_VAR 0 2
36970: PUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 254
36980: PUSH
36981: LD_INT 3
36983: PLUS
36984: PUSH
36985: LD_INT 6
36987: MOD
36988: ST_TO_ADDR
// end ;
36989: LD_VAR 0 2
36993: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36994: LD_INT 0
36996: PPUSH
36997: PPUSH
36998: PPUSH
36999: PPUSH
37000: PPUSH
// if not hexes then
37001: LD_VAR 0 2
37005: NOT
37006: IFFALSE 37010
// exit ;
37008: GO 37158
// dist := 9999 ;
37010: LD_ADDR_VAR 0 5
37014: PUSH
37015: LD_INT 9999
37017: ST_TO_ADDR
// for i = 1 to hexes do
37018: LD_ADDR_VAR 0 4
37022: PUSH
37023: DOUBLE
37024: LD_INT 1
37026: DEC
37027: ST_TO_ADDR
37028: LD_VAR 0 2
37032: PUSH
37033: FOR_TO
37034: IFFALSE 37146
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
37036: LD_VAR 0 1
37040: PPUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_VAR 0 4
37050: ARRAY
37051: PUSH
37052: LD_INT 1
37054: ARRAY
37055: PPUSH
37056: LD_VAR 0 2
37060: PUSH
37061: LD_VAR 0 4
37065: ARRAY
37066: PUSH
37067: LD_INT 2
37069: ARRAY
37070: PPUSH
37071: CALL_OW 297
37075: PUSH
37076: LD_VAR 0 5
37080: LESS
37081: IFFALSE 37144
// begin hex := hexes [ i ] ;
37083: LD_ADDR_VAR 0 7
37087: PUSH
37088: LD_VAR 0 2
37092: PUSH
37093: LD_VAR 0 4
37097: ARRAY
37098: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37099: LD_ADDR_VAR 0 5
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_VAR 0 2
37113: PUSH
37114: LD_VAR 0 4
37118: ARRAY
37119: PUSH
37120: LD_INT 1
37122: ARRAY
37123: PPUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_VAR 0 4
37133: ARRAY
37134: PUSH
37135: LD_INT 2
37137: ARRAY
37138: PPUSH
37139: CALL_OW 297
37143: ST_TO_ADDR
// end ; end ;
37144: GO 37033
37146: POP
37147: POP
// result := hex ;
37148: LD_ADDR_VAR 0 3
37152: PUSH
37153: LD_VAR 0 7
37157: ST_TO_ADDR
// end ;
37158: LD_VAR 0 3
37162: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37163: LD_INT 0
37165: PPUSH
37166: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37167: LD_VAR 0 1
37171: NOT
37172: PUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_INT 21
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 23
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PPUSH
37202: CALL_OW 69
37206: IN
37207: NOT
37208: OR
37209: IFFALSE 37213
// exit ;
37211: GO 37260
// for i = 1 to 3 do
37213: LD_ADDR_VAR 0 3
37217: PUSH
37218: DOUBLE
37219: LD_INT 1
37221: DEC
37222: ST_TO_ADDR
37223: LD_INT 3
37225: PUSH
37226: FOR_TO
37227: IFFALSE 37258
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37229: LD_VAR 0 1
37233: PPUSH
37234: CALL_OW 250
37238: PPUSH
37239: LD_VAR 0 1
37243: PPUSH
37244: CALL_OW 251
37248: PPUSH
37249: LD_INT 1
37251: PPUSH
37252: CALL_OW 453
37256: GO 37226
37258: POP
37259: POP
// end ;
37260: LD_VAR 0 2
37264: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37265: LD_INT 0
37267: PPUSH
37268: PPUSH
37269: PPUSH
37270: PPUSH
37271: PPUSH
37272: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37273: LD_VAR 0 1
37277: NOT
37278: PUSH
37279: LD_VAR 0 2
37283: NOT
37284: OR
37285: PUSH
37286: LD_VAR 0 1
37290: PPUSH
37291: CALL_OW 314
37295: OR
37296: IFFALSE 37300
// exit ;
37298: GO 37741
// x := GetX ( enemy_unit ) ;
37300: LD_ADDR_VAR 0 7
37304: PUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: CALL_OW 250
37314: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37315: LD_ADDR_VAR 0 8
37319: PUSH
37320: LD_VAR 0 2
37324: PPUSH
37325: CALL_OW 251
37329: ST_TO_ADDR
// if not x or not y then
37330: LD_VAR 0 7
37334: NOT
37335: PUSH
37336: LD_VAR 0 8
37340: NOT
37341: OR
37342: IFFALSE 37346
// exit ;
37344: GO 37741
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37346: LD_ADDR_VAR 0 6
37350: PUSH
37351: LD_VAR 0 7
37355: PPUSH
37356: LD_INT 0
37358: PPUSH
37359: LD_INT 4
37361: PPUSH
37362: CALL_OW 272
37366: PUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_INT 0
37374: PPUSH
37375: LD_INT 4
37377: PPUSH
37378: CALL_OW 273
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_VAR 0 7
37391: PPUSH
37392: LD_INT 1
37394: PPUSH
37395: LD_INT 4
37397: PPUSH
37398: CALL_OW 272
37402: PUSH
37403: LD_VAR 0 8
37407: PPUSH
37408: LD_INT 1
37410: PPUSH
37411: LD_INT 4
37413: PPUSH
37414: CALL_OW 273
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_VAR 0 7
37427: PPUSH
37428: LD_INT 2
37430: PPUSH
37431: LD_INT 4
37433: PPUSH
37434: CALL_OW 272
37438: PUSH
37439: LD_VAR 0 8
37443: PPUSH
37444: LD_INT 2
37446: PPUSH
37447: LD_INT 4
37449: PPUSH
37450: CALL_OW 273
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_VAR 0 7
37463: PPUSH
37464: LD_INT 3
37466: PPUSH
37467: LD_INT 4
37469: PPUSH
37470: CALL_OW 272
37474: PUSH
37475: LD_VAR 0 8
37479: PPUSH
37480: LD_INT 3
37482: PPUSH
37483: LD_INT 4
37485: PPUSH
37486: CALL_OW 273
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_VAR 0 7
37499: PPUSH
37500: LD_INT 4
37502: PPUSH
37503: LD_INT 4
37505: PPUSH
37506: CALL_OW 272
37510: PUSH
37511: LD_VAR 0 8
37515: PPUSH
37516: LD_INT 4
37518: PPUSH
37519: LD_INT 4
37521: PPUSH
37522: CALL_OW 273
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_VAR 0 7
37535: PPUSH
37536: LD_INT 5
37538: PPUSH
37539: LD_INT 4
37541: PPUSH
37542: CALL_OW 272
37546: PUSH
37547: LD_VAR 0 8
37551: PPUSH
37552: LD_INT 5
37554: PPUSH
37555: LD_INT 4
37557: PPUSH
37558: CALL_OW 273
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// for i = tmp downto 1 do
37575: LD_ADDR_VAR 0 4
37579: PUSH
37580: DOUBLE
37581: LD_VAR 0 6
37585: INC
37586: ST_TO_ADDR
37587: LD_INT 1
37589: PUSH
37590: FOR_DOWNTO
37591: IFFALSE 37692
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37593: LD_VAR 0 6
37597: PUSH
37598: LD_VAR 0 4
37602: ARRAY
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PPUSH
37608: LD_VAR 0 6
37612: PUSH
37613: LD_VAR 0 4
37617: ARRAY
37618: PUSH
37619: LD_INT 2
37621: ARRAY
37622: PPUSH
37623: CALL_OW 488
37627: NOT
37628: PUSH
37629: LD_VAR 0 6
37633: PUSH
37634: LD_VAR 0 4
37638: ARRAY
37639: PUSH
37640: LD_INT 1
37642: ARRAY
37643: PPUSH
37644: LD_VAR 0 6
37648: PUSH
37649: LD_VAR 0 4
37653: ARRAY
37654: PUSH
37655: LD_INT 2
37657: ARRAY
37658: PPUSH
37659: CALL_OW 428
37663: PUSH
37664: LD_INT 0
37666: NONEQUAL
37667: OR
37668: IFFALSE 37690
// tmp := Delete ( tmp , i ) ;
37670: LD_ADDR_VAR 0 6
37674: PUSH
37675: LD_VAR 0 6
37679: PPUSH
37680: LD_VAR 0 4
37684: PPUSH
37685: CALL_OW 3
37689: ST_TO_ADDR
37690: GO 37590
37692: POP
37693: POP
// j := GetClosestHex ( unit , tmp ) ;
37694: LD_ADDR_VAR 0 5
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: LD_VAR 0 6
37708: PPUSH
37709: CALL 36994 0 2
37713: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37714: LD_VAR 0 1
37718: PPUSH
37719: LD_VAR 0 5
37723: PUSH
37724: LD_INT 1
37726: ARRAY
37727: PPUSH
37728: LD_VAR 0 5
37732: PUSH
37733: LD_INT 2
37735: ARRAY
37736: PPUSH
37737: CALL_OW 111
// end ;
37741: LD_VAR 0 3
37745: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
// uc_side = 0 ;
37751: LD_ADDR_OWVAR 20
37755: PUSH
37756: LD_INT 0
37758: ST_TO_ADDR
// uc_nation = 0 ;
37759: LD_ADDR_OWVAR 21
37763: PUSH
37764: LD_INT 0
37766: ST_TO_ADDR
// InitHc_All ( ) ;
37767: CALL_OW 584
// InitVc ;
37771: CALL_OW 20
// if mastodonts then
37775: LD_VAR 0 6
37779: IFFALSE 37846
// for i = 1 to mastodonts do
37781: LD_ADDR_VAR 0 11
37785: PUSH
37786: DOUBLE
37787: LD_INT 1
37789: DEC
37790: ST_TO_ADDR
37791: LD_VAR 0 6
37795: PUSH
37796: FOR_TO
37797: IFFALSE 37844
// begin vc_chassis := 31 ;
37799: LD_ADDR_OWVAR 37
37803: PUSH
37804: LD_INT 31
37806: ST_TO_ADDR
// vc_control := control_rider ;
37807: LD_ADDR_OWVAR 38
37811: PUSH
37812: LD_INT 4
37814: ST_TO_ADDR
// animal := CreateVehicle ;
37815: LD_ADDR_VAR 0 12
37819: PUSH
37820: CALL_OW 45
37824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37825: LD_VAR 0 12
37829: PPUSH
37830: LD_VAR 0 8
37834: PPUSH
37835: LD_INT 0
37837: PPUSH
37838: CALL 39981 0 3
// end ;
37842: GO 37796
37844: POP
37845: POP
// if horses then
37846: LD_VAR 0 5
37850: IFFALSE 37917
// for i = 1 to horses do
37852: LD_ADDR_VAR 0 11
37856: PUSH
37857: DOUBLE
37858: LD_INT 1
37860: DEC
37861: ST_TO_ADDR
37862: LD_VAR 0 5
37866: PUSH
37867: FOR_TO
37868: IFFALSE 37915
// begin hc_class := 21 ;
37870: LD_ADDR_OWVAR 28
37874: PUSH
37875: LD_INT 21
37877: ST_TO_ADDR
// hc_gallery :=  ;
37878: LD_ADDR_OWVAR 33
37882: PUSH
37883: LD_STRING 
37885: ST_TO_ADDR
// animal := CreateHuman ;
37886: LD_ADDR_VAR 0 12
37890: PUSH
37891: CALL_OW 44
37895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37896: LD_VAR 0 12
37900: PPUSH
37901: LD_VAR 0 8
37905: PPUSH
37906: LD_INT 0
37908: PPUSH
37909: CALL 39981 0 3
// end ;
37913: GO 37867
37915: POP
37916: POP
// if birds then
37917: LD_VAR 0 1
37921: IFFALSE 37988
// for i = 1 to birds do
37923: LD_ADDR_VAR 0 11
37927: PUSH
37928: DOUBLE
37929: LD_INT 1
37931: DEC
37932: ST_TO_ADDR
37933: LD_VAR 0 1
37937: PUSH
37938: FOR_TO
37939: IFFALSE 37986
// begin hc_class = 18 ;
37941: LD_ADDR_OWVAR 28
37945: PUSH
37946: LD_INT 18
37948: ST_TO_ADDR
// hc_gallery =  ;
37949: LD_ADDR_OWVAR 33
37953: PUSH
37954: LD_STRING 
37956: ST_TO_ADDR
// animal := CreateHuman ;
37957: LD_ADDR_VAR 0 12
37961: PUSH
37962: CALL_OW 44
37966: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37967: LD_VAR 0 12
37971: PPUSH
37972: LD_VAR 0 8
37976: PPUSH
37977: LD_INT 0
37979: PPUSH
37980: CALL 39981 0 3
// end ;
37984: GO 37938
37986: POP
37987: POP
// if tigers then
37988: LD_VAR 0 2
37992: IFFALSE 38076
// for i = 1 to tigers do
37994: LD_ADDR_VAR 0 11
37998: PUSH
37999: DOUBLE
38000: LD_INT 1
38002: DEC
38003: ST_TO_ADDR
38004: LD_VAR 0 2
38008: PUSH
38009: FOR_TO
38010: IFFALSE 38074
// begin hc_class = class_tiger ;
38012: LD_ADDR_OWVAR 28
38016: PUSH
38017: LD_INT 14
38019: ST_TO_ADDR
// hc_gallery =  ;
38020: LD_ADDR_OWVAR 33
38024: PUSH
38025: LD_STRING 
38027: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38028: LD_ADDR_OWVAR 35
38032: PUSH
38033: LD_INT 7
38035: NEG
38036: PPUSH
38037: LD_INT 7
38039: PPUSH
38040: CALL_OW 12
38044: ST_TO_ADDR
// animal := CreateHuman ;
38045: LD_ADDR_VAR 0 12
38049: PUSH
38050: CALL_OW 44
38054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38055: LD_VAR 0 12
38059: PPUSH
38060: LD_VAR 0 8
38064: PPUSH
38065: LD_INT 0
38067: PPUSH
38068: CALL 39981 0 3
// end ;
38072: GO 38009
38074: POP
38075: POP
// if apemans then
38076: LD_VAR 0 3
38080: IFFALSE 38203
// for i = 1 to apemans do
38082: LD_ADDR_VAR 0 11
38086: PUSH
38087: DOUBLE
38088: LD_INT 1
38090: DEC
38091: ST_TO_ADDR
38092: LD_VAR 0 3
38096: PUSH
38097: FOR_TO
38098: IFFALSE 38201
// begin hc_class = class_apeman ;
38100: LD_ADDR_OWVAR 28
38104: PUSH
38105: LD_INT 12
38107: ST_TO_ADDR
// hc_gallery =  ;
38108: LD_ADDR_OWVAR 33
38112: PUSH
38113: LD_STRING 
38115: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38116: LD_ADDR_OWVAR 35
38120: PUSH
38121: LD_INT 2
38123: NEG
38124: PPUSH
38125: LD_INT 2
38127: PPUSH
38128: CALL_OW 12
38132: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38133: LD_ADDR_OWVAR 31
38137: PUSH
38138: LD_INT 1
38140: PPUSH
38141: LD_INT 3
38143: PPUSH
38144: CALL_OW 12
38148: PUSH
38149: LD_INT 1
38151: PPUSH
38152: LD_INT 3
38154: PPUSH
38155: CALL_OW 12
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// animal := CreateHuman ;
38172: LD_ADDR_VAR 0 12
38176: PUSH
38177: CALL_OW 44
38181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38182: LD_VAR 0 12
38186: PPUSH
38187: LD_VAR 0 8
38191: PPUSH
38192: LD_INT 0
38194: PPUSH
38195: CALL 39981 0 3
// end ;
38199: GO 38097
38201: POP
38202: POP
// if enchidnas then
38203: LD_VAR 0 4
38207: IFFALSE 38274
// for i = 1 to enchidnas do
38209: LD_ADDR_VAR 0 11
38213: PUSH
38214: DOUBLE
38215: LD_INT 1
38217: DEC
38218: ST_TO_ADDR
38219: LD_VAR 0 4
38223: PUSH
38224: FOR_TO
38225: IFFALSE 38272
// begin hc_class = 13 ;
38227: LD_ADDR_OWVAR 28
38231: PUSH
38232: LD_INT 13
38234: ST_TO_ADDR
// hc_gallery =  ;
38235: LD_ADDR_OWVAR 33
38239: PUSH
38240: LD_STRING 
38242: ST_TO_ADDR
// animal := CreateHuman ;
38243: LD_ADDR_VAR 0 12
38247: PUSH
38248: CALL_OW 44
38252: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38253: LD_VAR 0 12
38257: PPUSH
38258: LD_VAR 0 8
38262: PPUSH
38263: LD_INT 0
38265: PPUSH
38266: CALL 39981 0 3
// end ;
38270: GO 38224
38272: POP
38273: POP
// if fishes then
38274: LD_VAR 0 7
38278: IFFALSE 38345
// for i = 1 to fishes do
38280: LD_ADDR_VAR 0 11
38284: PUSH
38285: DOUBLE
38286: LD_INT 1
38288: DEC
38289: ST_TO_ADDR
38290: LD_VAR 0 7
38294: PUSH
38295: FOR_TO
38296: IFFALSE 38343
// begin hc_class = 20 ;
38298: LD_ADDR_OWVAR 28
38302: PUSH
38303: LD_INT 20
38305: ST_TO_ADDR
// hc_gallery =  ;
38306: LD_ADDR_OWVAR 33
38310: PUSH
38311: LD_STRING 
38313: ST_TO_ADDR
// animal := CreateHuman ;
38314: LD_ADDR_VAR 0 12
38318: PUSH
38319: CALL_OW 44
38323: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38324: LD_VAR 0 12
38328: PPUSH
38329: LD_VAR 0 9
38333: PPUSH
38334: LD_INT 0
38336: PPUSH
38337: CALL 39981 0 3
// end ;
38341: GO 38295
38343: POP
38344: POP
// end ;
38345: LD_VAR 0 10
38349: RET
// export function WantHeal ( sci , unit ) ; begin
38350: LD_INT 0
38352: PPUSH
// if GetTaskList ( sci ) > 0 then
38353: LD_VAR 0 1
38357: PPUSH
38358: CALL_OW 437
38362: PUSH
38363: LD_INT 0
38365: GREATER
38366: IFFALSE 38436
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38368: LD_VAR 0 1
38372: PPUSH
38373: CALL_OW 437
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PUSH
38386: LD_STRING l
38388: EQUAL
38389: PUSH
38390: LD_VAR 0 1
38394: PPUSH
38395: CALL_OW 437
38399: PUSH
38400: LD_INT 1
38402: ARRAY
38403: PUSH
38404: LD_INT 4
38406: ARRAY
38407: PUSH
38408: LD_VAR 0 2
38412: EQUAL
38413: AND
38414: IFFALSE 38426
// result := true else
38416: LD_ADDR_VAR 0 3
38420: PUSH
38421: LD_INT 1
38423: ST_TO_ADDR
38424: GO 38434
// result := false ;
38426: LD_ADDR_VAR 0 3
38430: PUSH
38431: LD_INT 0
38433: ST_TO_ADDR
// end else
38434: GO 38444
// result := false ;
38436: LD_ADDR_VAR 0 3
38440: PUSH
38441: LD_INT 0
38443: ST_TO_ADDR
// end ;
38444: LD_VAR 0 3
38448: RET
// export function HealTarget ( sci ) ; begin
38449: LD_INT 0
38451: PPUSH
// if not sci then
38452: LD_VAR 0 1
38456: NOT
38457: IFFALSE 38461
// exit ;
38459: GO 38526
// result := 0 ;
38461: LD_ADDR_VAR 0 2
38465: PUSH
38466: LD_INT 0
38468: ST_TO_ADDR
// if GetTaskList ( sci ) then
38469: LD_VAR 0 1
38473: PPUSH
38474: CALL_OW 437
38478: IFFALSE 38526
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 437
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PUSH
38494: LD_INT 1
38496: ARRAY
38497: PUSH
38498: LD_STRING l
38500: EQUAL
38501: IFFALSE 38526
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38503: LD_ADDR_VAR 0 2
38507: PUSH
38508: LD_VAR 0 1
38512: PPUSH
38513: CALL_OW 437
38517: PUSH
38518: LD_INT 1
38520: ARRAY
38521: PUSH
38522: LD_INT 4
38524: ARRAY
38525: ST_TO_ADDR
// end ;
38526: LD_VAR 0 2
38530: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38531: LD_INT 0
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
// if not base_units then
38537: LD_VAR 0 1
38541: NOT
38542: IFFALSE 38546
// exit ;
38544: GO 38633
// result := false ;
38546: LD_ADDR_VAR 0 2
38550: PUSH
38551: LD_INT 0
38553: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38554: LD_ADDR_VAR 0 5
38558: PUSH
38559: LD_VAR 0 1
38563: PPUSH
38564: LD_INT 21
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PPUSH
38574: CALL_OW 72
38578: ST_TO_ADDR
// if not tmp then
38579: LD_VAR 0 5
38583: NOT
38584: IFFALSE 38588
// exit ;
38586: GO 38633
// for i in tmp do
38588: LD_ADDR_VAR 0 3
38592: PUSH
38593: LD_VAR 0 5
38597: PUSH
38598: FOR_IN
38599: IFFALSE 38631
// begin result := EnemyInRange ( i , 22 ) ;
38601: LD_ADDR_VAR 0 2
38605: PUSH
38606: LD_VAR 0 3
38610: PPUSH
38611: LD_INT 22
38613: PPUSH
38614: CALL 36869 0 2
38618: ST_TO_ADDR
// if result then
38619: LD_VAR 0 2
38623: IFFALSE 38629
// exit ;
38625: POP
38626: POP
38627: GO 38633
// end ;
38629: GO 38598
38631: POP
38632: POP
// end ;
38633: LD_VAR 0 2
38637: RET
// export function FilterByTag ( units , tag ) ; begin
38638: LD_INT 0
38640: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38641: LD_ADDR_VAR 0 3
38645: PUSH
38646: LD_VAR 0 1
38650: PPUSH
38651: LD_INT 120
38653: PUSH
38654: LD_VAR 0 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PPUSH
38663: CALL_OW 72
38667: ST_TO_ADDR
// end ;
38668: LD_VAR 0 3
38672: RET
// export function IsDriver ( un ) ; begin
38673: LD_INT 0
38675: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38676: LD_ADDR_VAR 0 2
38680: PUSH
38681: LD_VAR 0 1
38685: PUSH
38686: LD_INT 55
38688: PUSH
38689: EMPTY
38690: LIST
38691: PPUSH
38692: CALL_OW 69
38696: IN
38697: ST_TO_ADDR
// end ;
38698: LD_VAR 0 2
38702: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38703: LD_INT 0
38705: PPUSH
38706: PPUSH
// list := [ ] ;
38707: LD_ADDR_VAR 0 5
38711: PUSH
38712: EMPTY
38713: ST_TO_ADDR
// case d of 0 :
38714: LD_VAR 0 3
38718: PUSH
38719: LD_INT 0
38721: DOUBLE
38722: EQUAL
38723: IFTRUE 38727
38725: GO 38860
38727: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38728: LD_ADDR_VAR 0 5
38732: PUSH
38733: LD_VAR 0 1
38737: PUSH
38738: LD_INT 4
38740: MINUS
38741: PUSH
38742: LD_VAR 0 2
38746: PUSH
38747: LD_INT 4
38749: MINUS
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: PUSH
38759: LD_VAR 0 1
38763: PUSH
38764: LD_INT 3
38766: MINUS
38767: PUSH
38768: LD_VAR 0 2
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: LD_VAR 0 1
38785: PUSH
38786: LD_INT 4
38788: PLUS
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 4
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PUSH
38803: LD_VAR 0 1
38807: PUSH
38808: LD_INT 3
38810: PLUS
38811: PUSH
38812: LD_VAR 0 2
38816: PUSH
38817: LD_INT 3
38819: PLUS
38820: PUSH
38821: LD_INT 5
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: PUSH
38829: LD_VAR 0 1
38833: PUSH
38834: LD_VAR 0 2
38838: PUSH
38839: LD_INT 4
38841: PLUS
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// end ; 1 :
38858: GO 39558
38860: LD_INT 1
38862: DOUBLE
38863: EQUAL
38864: IFTRUE 38868
38866: GO 39001
38868: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38869: LD_ADDR_VAR 0 5
38873: PUSH
38874: LD_VAR 0 1
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_INT 4
38886: MINUS
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: LIST
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_INT 3
38903: MINUS
38904: PUSH
38905: LD_VAR 0 2
38909: PUSH
38910: LD_INT 3
38912: MINUS
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_INT 4
38929: MINUS
38930: PUSH
38931: LD_VAR 0 2
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: PUSH
38944: LD_VAR 0 1
38948: PUSH
38949: LD_VAR 0 2
38953: PUSH
38954: LD_INT 3
38956: PLUS
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: LD_VAR 0 1
38970: PUSH
38971: LD_INT 4
38973: PLUS
38974: PUSH
38975: LD_VAR 0 2
38979: PUSH
38980: LD_INT 4
38982: PLUS
38983: PUSH
38984: LD_INT 5
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: LIST
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// end ; 2 :
38999: GO 39558
39001: LD_INT 2
39003: DOUBLE
39004: EQUAL
39005: IFTRUE 39009
39007: GO 39138
39009: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39010: LD_ADDR_VAR 0 5
39014: PUSH
39015: LD_VAR 0 1
39019: PUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 3
39027: MINUS
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: PUSH
39037: LD_VAR 0 1
39041: PUSH
39042: LD_INT 4
39044: PLUS
39045: PUSH
39046: LD_VAR 0 2
39050: PUSH
39051: LD_INT 4
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: PUSH
39059: LD_VAR 0 1
39063: PUSH
39064: LD_VAR 0 2
39068: PUSH
39069: LD_INT 4
39071: PLUS
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: PUSH
39081: LD_VAR 0 1
39085: PUSH
39086: LD_INT 3
39088: MINUS
39089: PUSH
39090: LD_VAR 0 2
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: PUSH
39103: LD_VAR 0 1
39107: PUSH
39108: LD_INT 4
39110: MINUS
39111: PUSH
39112: LD_VAR 0 2
39116: PUSH
39117: LD_INT 4
39119: MINUS
39120: PUSH
39121: LD_INT 2
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// end ; 3 :
39136: GO 39558
39138: LD_INT 3
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39279
39146: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39147: LD_ADDR_VAR 0 5
39151: PUSH
39152: LD_VAR 0 1
39156: PUSH
39157: LD_INT 3
39159: PLUS
39160: PUSH
39161: LD_VAR 0 2
39165: PUSH
39166: LD_INT 4
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: PUSH
39174: LD_VAR 0 1
39178: PUSH
39179: LD_INT 4
39181: PLUS
39182: PUSH
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 4
39190: PLUS
39191: PUSH
39192: LD_INT 5
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: PUSH
39200: LD_VAR 0 1
39204: PUSH
39205: LD_INT 4
39207: MINUS
39208: PUSH
39209: LD_VAR 0 2
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: PUSH
39222: LD_VAR 0 1
39226: PUSH
39227: LD_VAR 0 2
39231: PUSH
39232: LD_INT 4
39234: MINUS
39235: PUSH
39236: LD_INT 3
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: PUSH
39244: LD_VAR 0 1
39248: PUSH
39249: LD_INT 3
39251: MINUS
39252: PUSH
39253: LD_VAR 0 2
39257: PUSH
39258: LD_INT 3
39260: MINUS
39261: PUSH
39262: LD_INT 2
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// end ; 4 :
39277: GO 39558
39279: LD_INT 4
39281: DOUBLE
39282: EQUAL
39283: IFTRUE 39287
39285: GO 39420
39287: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39288: LD_ADDR_VAR 0 5
39292: PUSH
39293: LD_VAR 0 1
39297: PUSH
39298: LD_VAR 0 2
39302: PUSH
39303: LD_INT 4
39305: PLUS
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: PUSH
39315: LD_VAR 0 1
39319: PUSH
39320: LD_INT 3
39322: PLUS
39323: PUSH
39324: LD_VAR 0 2
39328: PUSH
39329: LD_INT 3
39331: PLUS
39332: PUSH
39333: LD_INT 5
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: PUSH
39341: LD_VAR 0 1
39345: PUSH
39346: LD_INT 4
39348: PLUS
39349: PUSH
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 4
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: PUSH
39363: LD_VAR 0 1
39367: PUSH
39368: LD_VAR 0 2
39372: PUSH
39373: LD_INT 3
39375: MINUS
39376: PUSH
39377: LD_INT 3
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: LD_INT 4
39392: MINUS
39393: PUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_INT 4
39401: MINUS
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
// end ; 5 :
39418: GO 39558
39420: LD_INT 5
39422: DOUBLE
39423: EQUAL
39424: IFTRUE 39428
39426: GO 39557
39428: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39429: LD_ADDR_VAR 0 5
39433: PUSH
39434: LD_VAR 0 1
39438: PUSH
39439: LD_INT 4
39441: MINUS
39442: PUSH
39443: LD_VAR 0 2
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: PUSH
39456: LD_VAR 0 1
39460: PUSH
39461: LD_VAR 0 2
39465: PUSH
39466: LD_INT 4
39468: MINUS
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: PUSH
39478: LD_VAR 0 1
39482: PUSH
39483: LD_INT 4
39485: PLUS
39486: PUSH
39487: LD_VAR 0 2
39491: PUSH
39492: LD_INT 4
39494: PLUS
39495: PUSH
39496: LD_INT 5
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: PUSH
39504: LD_VAR 0 1
39508: PUSH
39509: LD_INT 3
39511: PLUS
39512: PUSH
39513: LD_VAR 0 2
39517: PUSH
39518: LD_INT 4
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: PUSH
39526: LD_VAR 0 1
39530: PUSH
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 3
39538: PLUS
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// end ; end ;
39555: GO 39558
39557: POP
// result := list ;
39558: LD_ADDR_VAR 0 4
39562: PUSH
39563: LD_VAR 0 5
39567: ST_TO_ADDR
// end ;
39568: LD_VAR 0 4
39572: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39573: LD_INT 0
39575: PPUSH
39576: PPUSH
39577: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39578: LD_VAR 0 1
39582: NOT
39583: PUSH
39584: LD_VAR 0 2
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: LD_INT 3
39597: PUSH
39598: LD_INT 4
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: IN
39607: NOT
39608: OR
39609: IFFALSE 39613
// exit ;
39611: GO 39705
// tmp := [ ] ;
39613: LD_ADDR_VAR 0 5
39617: PUSH
39618: EMPTY
39619: ST_TO_ADDR
// for i in units do
39620: LD_ADDR_VAR 0 4
39624: PUSH
39625: LD_VAR 0 1
39629: PUSH
39630: FOR_IN
39631: IFFALSE 39674
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39633: LD_ADDR_VAR 0 5
39637: PUSH
39638: LD_VAR 0 5
39642: PPUSH
39643: LD_VAR 0 5
39647: PUSH
39648: LD_INT 1
39650: PLUS
39651: PPUSH
39652: LD_VAR 0 4
39656: PPUSH
39657: LD_VAR 0 2
39661: PPUSH
39662: CALL_OW 259
39666: PPUSH
39667: CALL_OW 2
39671: ST_TO_ADDR
39672: GO 39630
39674: POP
39675: POP
// if not tmp then
39676: LD_VAR 0 5
39680: NOT
39681: IFFALSE 39685
// exit ;
39683: GO 39705
// result := SortListByListDesc ( units , tmp ) ;
39685: LD_ADDR_VAR 0 3
39689: PUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: LD_VAR 0 5
39699: PPUSH
39700: CALL_OW 77
39704: ST_TO_ADDR
// end ;
39705: LD_VAR 0 3
39709: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39710: LD_INT 0
39712: PPUSH
39713: PPUSH
39714: PPUSH
// result := false ;
39715: LD_ADDR_VAR 0 3
39719: PUSH
39720: LD_INT 0
39722: ST_TO_ADDR
// x := GetX ( building ) ;
39723: LD_ADDR_VAR 0 4
39727: PUSH
39728: LD_VAR 0 2
39732: PPUSH
39733: CALL_OW 250
39737: ST_TO_ADDR
// y := GetY ( building ) ;
39738: LD_ADDR_VAR 0 5
39742: PUSH
39743: LD_VAR 0 2
39747: PPUSH
39748: CALL_OW 251
39752: ST_TO_ADDR
// if not building or not x or not y then
39753: LD_VAR 0 2
39757: NOT
39758: PUSH
39759: LD_VAR 0 4
39763: NOT
39764: OR
39765: PUSH
39766: LD_VAR 0 5
39770: NOT
39771: OR
39772: IFFALSE 39776
// exit ;
39774: GO 39868
// if GetTaskList ( unit ) then
39776: LD_VAR 0 1
39780: PPUSH
39781: CALL_OW 437
39785: IFFALSE 39868
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39787: LD_STRING e
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: CALL_OW 437
39799: PUSH
39800: LD_INT 1
39802: ARRAY
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: EQUAL
39808: PUSH
39809: LD_VAR 0 4
39813: PUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 437
39823: PUSH
39824: LD_INT 1
39826: ARRAY
39827: PUSH
39828: LD_INT 2
39830: ARRAY
39831: EQUAL
39832: AND
39833: PUSH
39834: LD_VAR 0 5
39838: PUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 437
39848: PUSH
39849: LD_INT 1
39851: ARRAY
39852: PUSH
39853: LD_INT 3
39855: ARRAY
39856: EQUAL
39857: AND
39858: IFFALSE 39868
// result := true end ;
39860: LD_ADDR_VAR 0 3
39864: PUSH
39865: LD_INT 1
39867: ST_TO_ADDR
// end ;
39868: LD_VAR 0 3
39872: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39873: LD_INT 0
39875: PPUSH
// result := false ;
39876: LD_ADDR_VAR 0 4
39880: PUSH
39881: LD_INT 0
39883: ST_TO_ADDR
// if GetTaskList ( unit ) then
39884: LD_VAR 0 1
39888: PPUSH
39889: CALL_OW 437
39893: IFFALSE 39976
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39895: LD_STRING M
39897: PUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 437
39907: PUSH
39908: LD_INT 1
39910: ARRAY
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: EQUAL
39916: PUSH
39917: LD_VAR 0 2
39921: PUSH
39922: LD_VAR 0 1
39926: PPUSH
39927: CALL_OW 437
39931: PUSH
39932: LD_INT 1
39934: ARRAY
39935: PUSH
39936: LD_INT 2
39938: ARRAY
39939: EQUAL
39940: AND
39941: PUSH
39942: LD_VAR 0 3
39946: PUSH
39947: LD_VAR 0 1
39951: PPUSH
39952: CALL_OW 437
39956: PUSH
39957: LD_INT 1
39959: ARRAY
39960: PUSH
39961: LD_INT 3
39963: ARRAY
39964: EQUAL
39965: AND
39966: IFFALSE 39976
// result := true ;
39968: LD_ADDR_VAR 0 4
39972: PUSH
39973: LD_INT 1
39975: ST_TO_ADDR
// end ; end ;
39976: LD_VAR 0 4
39980: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39981: LD_INT 0
39983: PPUSH
39984: PPUSH
39985: PPUSH
39986: PPUSH
// if not unit or not area then
39987: LD_VAR 0 1
39991: NOT
39992: PUSH
39993: LD_VAR 0 2
39997: NOT
39998: OR
39999: IFFALSE 40003
// exit ;
40001: GO 40167
// tmp := AreaToList ( area , i ) ;
40003: LD_ADDR_VAR 0 6
40007: PUSH
40008: LD_VAR 0 2
40012: PPUSH
40013: LD_VAR 0 5
40017: PPUSH
40018: CALL_OW 517
40022: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40023: LD_ADDR_VAR 0 5
40027: PUSH
40028: DOUBLE
40029: LD_INT 1
40031: DEC
40032: ST_TO_ADDR
40033: LD_VAR 0 6
40037: PUSH
40038: LD_INT 1
40040: ARRAY
40041: PUSH
40042: FOR_TO
40043: IFFALSE 40165
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40045: LD_ADDR_VAR 0 7
40049: PUSH
40050: LD_VAR 0 6
40054: PUSH
40055: LD_INT 1
40057: ARRAY
40058: PUSH
40059: LD_VAR 0 5
40063: ARRAY
40064: PUSH
40065: LD_VAR 0 6
40069: PUSH
40070: LD_INT 2
40072: ARRAY
40073: PUSH
40074: LD_VAR 0 5
40078: ARRAY
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40084: LD_VAR 0 7
40088: PUSH
40089: LD_INT 1
40091: ARRAY
40092: PPUSH
40093: LD_VAR 0 7
40097: PUSH
40098: LD_INT 2
40100: ARRAY
40101: PPUSH
40102: CALL_OW 428
40106: PUSH
40107: LD_INT 0
40109: EQUAL
40110: IFFALSE 40163
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40112: LD_VAR 0 1
40116: PPUSH
40117: LD_VAR 0 7
40121: PUSH
40122: LD_INT 1
40124: ARRAY
40125: PPUSH
40126: LD_VAR 0 7
40130: PUSH
40131: LD_INT 2
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 3
40139: PPUSH
40140: CALL_OW 48
// result := IsPlaced ( unit ) ;
40144: LD_ADDR_VAR 0 4
40148: PUSH
40149: LD_VAR 0 1
40153: PPUSH
40154: CALL_OW 305
40158: ST_TO_ADDR
// exit ;
40159: POP
40160: POP
40161: GO 40167
// end ; end ;
40163: GO 40042
40165: POP
40166: POP
// end ;
40167: LD_VAR 0 4
40171: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40172: LD_INT 0
40174: PPUSH
40175: PPUSH
40176: PPUSH
// if not side or side > 8 then
40177: LD_VAR 0 1
40181: NOT
40182: PUSH
40183: LD_VAR 0 1
40187: PUSH
40188: LD_INT 8
40190: GREATER
40191: OR
40192: IFFALSE 40196
// exit ;
40194: GO 40383
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40196: LD_ADDR_VAR 0 4
40200: PUSH
40201: LD_INT 22
40203: PUSH
40204: LD_VAR 0 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 21
40215: PUSH
40216: LD_INT 3
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PPUSH
40227: CALL_OW 69
40231: ST_TO_ADDR
// if not tmp then
40232: LD_VAR 0 4
40236: NOT
40237: IFFALSE 40241
// exit ;
40239: GO 40383
// enable_addtolog := true ;
40241: LD_ADDR_OWVAR 81
40245: PUSH
40246: LD_INT 1
40248: ST_TO_ADDR
// AddToLog ( [ ) ;
40249: LD_STRING [
40251: PPUSH
40252: CALL_OW 561
// for i in tmp do
40256: LD_ADDR_VAR 0 3
40260: PUSH
40261: LD_VAR 0 4
40265: PUSH
40266: FOR_IN
40267: IFFALSE 40374
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40269: LD_STRING [
40271: PUSH
40272: LD_VAR 0 3
40276: PPUSH
40277: CALL_OW 266
40281: STR
40282: PUSH
40283: LD_STRING , 
40285: STR
40286: PUSH
40287: LD_VAR 0 3
40291: PPUSH
40292: CALL_OW 250
40296: STR
40297: PUSH
40298: LD_STRING , 
40300: STR
40301: PUSH
40302: LD_VAR 0 3
40306: PPUSH
40307: CALL_OW 251
40311: STR
40312: PUSH
40313: LD_STRING , 
40315: STR
40316: PUSH
40317: LD_VAR 0 3
40321: PPUSH
40322: CALL_OW 254
40326: STR
40327: PUSH
40328: LD_STRING , 
40330: STR
40331: PUSH
40332: LD_VAR 0 3
40336: PPUSH
40337: LD_INT 1
40339: PPUSH
40340: CALL_OW 268
40344: STR
40345: PUSH
40346: LD_STRING , 
40348: STR
40349: PUSH
40350: LD_VAR 0 3
40354: PPUSH
40355: LD_INT 2
40357: PPUSH
40358: CALL_OW 268
40362: STR
40363: PUSH
40364: LD_STRING ],
40366: STR
40367: PPUSH
40368: CALL_OW 561
// end ;
40372: GO 40266
40374: POP
40375: POP
// AddToLog ( ]; ) ;
40376: LD_STRING ];
40378: PPUSH
40379: CALL_OW 561
// end ;
40383: LD_VAR 0 2
40387: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40388: LD_INT 0
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
40394: PPUSH
// if not area or not rate or not max then
40395: LD_VAR 0 1
40399: NOT
40400: PUSH
40401: LD_VAR 0 2
40405: NOT
40406: OR
40407: PUSH
40408: LD_VAR 0 4
40412: NOT
40413: OR
40414: IFFALSE 40418
// exit ;
40416: GO 40607
// while 1 do
40418: LD_INT 1
40420: IFFALSE 40607
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40422: LD_ADDR_VAR 0 9
40426: PUSH
40427: LD_VAR 0 1
40431: PPUSH
40432: LD_INT 1
40434: PPUSH
40435: CALL_OW 287
40439: PUSH
40440: LD_INT 10
40442: MUL
40443: ST_TO_ADDR
// r := rate / 10 ;
40444: LD_ADDR_VAR 0 7
40448: PUSH
40449: LD_VAR 0 2
40453: PUSH
40454: LD_INT 10
40456: DIVREAL
40457: ST_TO_ADDR
// time := 1 1$00 ;
40458: LD_ADDR_VAR 0 8
40462: PUSH
40463: LD_INT 2100
40465: ST_TO_ADDR
// if amount < min then
40466: LD_VAR 0 9
40470: PUSH
40471: LD_VAR 0 3
40475: LESS
40476: IFFALSE 40494
// r := r * 2 else
40478: LD_ADDR_VAR 0 7
40482: PUSH
40483: LD_VAR 0 7
40487: PUSH
40488: LD_INT 2
40490: MUL
40491: ST_TO_ADDR
40492: GO 40520
// if amount > max then
40494: LD_VAR 0 9
40498: PUSH
40499: LD_VAR 0 4
40503: GREATER
40504: IFFALSE 40520
// r := r / 2 ;
40506: LD_ADDR_VAR 0 7
40510: PUSH
40511: LD_VAR 0 7
40515: PUSH
40516: LD_INT 2
40518: DIVREAL
40519: ST_TO_ADDR
// time := time / r ;
40520: LD_ADDR_VAR 0 8
40524: PUSH
40525: LD_VAR 0 8
40529: PUSH
40530: LD_VAR 0 7
40534: DIVREAL
40535: ST_TO_ADDR
// if time < 0 then
40536: LD_VAR 0 8
40540: PUSH
40541: LD_INT 0
40543: LESS
40544: IFFALSE 40561
// time := time * - 1 ;
40546: LD_ADDR_VAR 0 8
40550: PUSH
40551: LD_VAR 0 8
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: MUL
40560: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40561: LD_VAR 0 8
40565: PUSH
40566: LD_INT 35
40568: PPUSH
40569: LD_INT 875
40571: PPUSH
40572: CALL_OW 12
40576: PLUS
40577: PPUSH
40578: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40582: LD_INT 1
40584: PPUSH
40585: LD_INT 5
40587: PPUSH
40588: CALL_OW 12
40592: PPUSH
40593: LD_VAR 0 1
40597: PPUSH
40598: LD_INT 1
40600: PPUSH
40601: CALL_OW 55
// end ;
40605: GO 40418
// end ;
40607: LD_VAR 0 5
40611: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40612: LD_INT 0
40614: PPUSH
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
// if not turrets or not factories then
40622: LD_VAR 0 1
40626: NOT
40627: PUSH
40628: LD_VAR 0 2
40632: NOT
40633: OR
40634: IFFALSE 40638
// exit ;
40636: GO 40945
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40638: LD_ADDR_VAR 0 10
40642: PUSH
40643: LD_INT 5
40645: PUSH
40646: LD_INT 6
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 4
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: LD_INT 5
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 24
40680: PUSH
40681: LD_INT 25
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 23
40690: PUSH
40691: LD_INT 27
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 42
40704: PUSH
40705: LD_INT 43
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 44
40714: PUSH
40715: LD_INT 46
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 45
40724: PUSH
40725: LD_INT 47
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: ST_TO_ADDR
// result := [ ] ;
40742: LD_ADDR_VAR 0 3
40746: PUSH
40747: EMPTY
40748: ST_TO_ADDR
// for i in turrets do
40749: LD_ADDR_VAR 0 4
40753: PUSH
40754: LD_VAR 0 1
40758: PUSH
40759: FOR_IN
40760: IFFALSE 40943
// begin nat := GetNation ( i ) ;
40762: LD_ADDR_VAR 0 7
40766: PUSH
40767: LD_VAR 0 4
40771: PPUSH
40772: CALL_OW 248
40776: ST_TO_ADDR
// weapon := 0 ;
40777: LD_ADDR_VAR 0 8
40781: PUSH
40782: LD_INT 0
40784: ST_TO_ADDR
// if not nat then
40785: LD_VAR 0 7
40789: NOT
40790: IFFALSE 40794
// continue ;
40792: GO 40759
// for j in list [ nat ] do
40794: LD_ADDR_VAR 0 5
40798: PUSH
40799: LD_VAR 0 10
40803: PUSH
40804: LD_VAR 0 7
40808: ARRAY
40809: PUSH
40810: FOR_IN
40811: IFFALSE 40852
// if GetBWeapon ( i ) = j [ 1 ] then
40813: LD_VAR 0 4
40817: PPUSH
40818: CALL_OW 269
40822: PUSH
40823: LD_VAR 0 5
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: EQUAL
40832: IFFALSE 40850
// begin weapon := j [ 2 ] ;
40834: LD_ADDR_VAR 0 8
40838: PUSH
40839: LD_VAR 0 5
40843: PUSH
40844: LD_INT 2
40846: ARRAY
40847: ST_TO_ADDR
// break ;
40848: GO 40852
// end ;
40850: GO 40810
40852: POP
40853: POP
// if not weapon then
40854: LD_VAR 0 8
40858: NOT
40859: IFFALSE 40863
// continue ;
40861: GO 40759
// for k in factories do
40863: LD_ADDR_VAR 0 6
40867: PUSH
40868: LD_VAR 0 2
40872: PUSH
40873: FOR_IN
40874: IFFALSE 40939
// begin weapons := AvailableWeaponList ( k ) ;
40876: LD_ADDR_VAR 0 9
40880: PUSH
40881: LD_VAR 0 6
40885: PPUSH
40886: CALL_OW 478
40890: ST_TO_ADDR
// if not weapons then
40891: LD_VAR 0 9
40895: NOT
40896: IFFALSE 40900
// continue ;
40898: GO 40873
// if weapon in weapons then
40900: LD_VAR 0 8
40904: PUSH
40905: LD_VAR 0 9
40909: IN
40910: IFFALSE 40937
// begin result := [ i , weapon ] ;
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_VAR 0 4
40921: PUSH
40922: LD_VAR 0 8
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: ST_TO_ADDR
// exit ;
40931: POP
40932: POP
40933: POP
40934: POP
40935: GO 40945
// end ; end ;
40937: GO 40873
40939: POP
40940: POP
// end ;
40941: GO 40759
40943: POP
40944: POP
// end ;
40945: LD_VAR 0 3
40949: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40950: LD_INT 0
40952: PPUSH
// if not side or side > 8 then
40953: LD_VAR 0 3
40957: NOT
40958: PUSH
40959: LD_VAR 0 3
40963: PUSH
40964: LD_INT 8
40966: GREATER
40967: OR
40968: IFFALSE 40972
// exit ;
40970: GO 41031
// if not range then
40972: LD_VAR 0 4
40976: NOT
40977: IFFALSE 40988
// range := - 12 ;
40979: LD_ADDR_VAR 0 4
40983: PUSH
40984: LD_INT 12
40986: NEG
40987: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40988: LD_VAR 0 1
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: LD_VAR 0 4
41007: PPUSH
41008: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41012: LD_VAR 0 1
41016: PPUSH
41017: LD_VAR 0 2
41021: PPUSH
41022: LD_VAR 0 3
41026: PPUSH
41027: CALL_OW 331
// end ;
41031: LD_VAR 0 5
41035: RET
// export function Video ( mode ) ; begin
41036: LD_INT 0
41038: PPUSH
// ingame_video = mode ;
41039: LD_ADDR_OWVAR 52
41043: PUSH
41044: LD_VAR 0 1
41048: ST_TO_ADDR
// interface_hidden = mode ;
41049: LD_ADDR_OWVAR 54
41053: PUSH
41054: LD_VAR 0 1
41058: ST_TO_ADDR
// end ;
41059: LD_VAR 0 2
41063: RET
// export function Join ( array , element ) ; begin
41064: LD_INT 0
41066: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41067: LD_ADDR_VAR 0 3
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: LD_VAR 0 1
41081: PUSH
41082: LD_INT 1
41084: PLUS
41085: PPUSH
41086: LD_VAR 0 2
41090: PPUSH
41091: CALL_OW 1
41095: ST_TO_ADDR
// end ;
41096: LD_VAR 0 3
41100: RET
// export function JoinUnion ( array , element ) ; begin
41101: LD_INT 0
41103: PPUSH
// result := array union element ;
41104: LD_ADDR_VAR 0 3
41108: PUSH
41109: LD_VAR 0 1
41113: PUSH
41114: LD_VAR 0 2
41118: UNION
41119: ST_TO_ADDR
// end ;
41120: LD_VAR 0 3
41124: RET
// export function GetBehemoths ( side ) ; begin
41125: LD_INT 0
41127: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
41128: LD_ADDR_VAR 0 2
41132: PUSH
41133: LD_INT 22
41135: PUSH
41136: LD_VAR 0 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 31
41147: PUSH
41148: LD_INT 25
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: CALL_OW 69
41163: ST_TO_ADDR
// end ;
41164: LD_VAR 0 2
41168: RET
// export function Shuffle ( array ) ; var i , index ; begin
41169: LD_INT 0
41171: PPUSH
41172: PPUSH
41173: PPUSH
// result := [ ] ;
41174: LD_ADDR_VAR 0 2
41178: PUSH
41179: EMPTY
41180: ST_TO_ADDR
// if not array then
41181: LD_VAR 0 1
41185: NOT
41186: IFFALSE 41190
// exit ;
41188: GO 41289
// Randomize ;
41190: CALL_OW 10
// for i = array downto 1 do
41194: LD_ADDR_VAR 0 3
41198: PUSH
41199: DOUBLE
41200: LD_VAR 0 1
41204: INC
41205: ST_TO_ADDR
41206: LD_INT 1
41208: PUSH
41209: FOR_DOWNTO
41210: IFFALSE 41287
// begin index := rand ( 1 , array ) ;
41212: LD_ADDR_VAR 0 4
41216: PUSH
41217: LD_INT 1
41219: PPUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: CALL_OW 12
41229: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41230: LD_ADDR_VAR 0 2
41234: PUSH
41235: LD_VAR 0 2
41239: PPUSH
41240: LD_VAR 0 2
41244: PUSH
41245: LD_INT 1
41247: PLUS
41248: PPUSH
41249: LD_VAR 0 1
41253: PUSH
41254: LD_VAR 0 4
41258: ARRAY
41259: PPUSH
41260: CALL_OW 2
41264: ST_TO_ADDR
// array := Delete ( array , index ) ;
41265: LD_ADDR_VAR 0 1
41269: PUSH
41270: LD_VAR 0 1
41274: PPUSH
41275: LD_VAR 0 4
41279: PPUSH
41280: CALL_OW 3
41284: ST_TO_ADDR
// end ;
41285: GO 41209
41287: POP
41288: POP
// end ;
41289: LD_VAR 0 2
41293: RET
// export function GetBaseMaterials ( base ) ; begin
41294: LD_INT 0
41296: PPUSH
// result := [ 0 , 0 , 0 ] ;
41297: LD_ADDR_VAR 0 2
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: LIST
41315: ST_TO_ADDR
// if not base then
41316: LD_VAR 0 1
41320: NOT
41321: IFFALSE 41325
// exit ;
41323: GO 41374
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41325: LD_ADDR_VAR 0 2
41329: PUSH
41330: LD_VAR 0 1
41334: PPUSH
41335: LD_INT 1
41337: PPUSH
41338: CALL_OW 275
41342: PUSH
41343: LD_VAR 0 1
41347: PPUSH
41348: LD_INT 2
41350: PPUSH
41351: CALL_OW 275
41355: PUSH
41356: LD_VAR 0 1
41360: PPUSH
41361: LD_INT 3
41363: PPUSH
41364: CALL_OW 275
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: ST_TO_ADDR
// end ;
41374: LD_VAR 0 2
41378: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41379: LD_INT 0
41381: PPUSH
41382: PPUSH
// result := array ;
41383: LD_ADDR_VAR 0 3
41387: PUSH
41388: LD_VAR 0 1
41392: ST_TO_ADDR
// if size > 0 then
41393: LD_VAR 0 2
41397: PUSH
41398: LD_INT 0
41400: GREATER
41401: IFFALSE 41447
// for i := array downto size do
41403: LD_ADDR_VAR 0 4
41407: PUSH
41408: DOUBLE
41409: LD_VAR 0 1
41413: INC
41414: ST_TO_ADDR
41415: LD_VAR 0 2
41419: PUSH
41420: FOR_DOWNTO
41421: IFFALSE 41445
// result := Delete ( result , result ) ;
41423: LD_ADDR_VAR 0 3
41427: PUSH
41428: LD_VAR 0 3
41432: PPUSH
41433: LD_VAR 0 3
41437: PPUSH
41438: CALL_OW 3
41442: ST_TO_ADDR
41443: GO 41420
41445: POP
41446: POP
// end ;
41447: LD_VAR 0 3
41451: RET
// export function ComExit ( unit ) ; var tmp ; begin
41452: LD_INT 0
41454: PPUSH
41455: PPUSH
// if not IsInUnit ( unit ) then
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 310
41465: NOT
41466: IFFALSE 41470
// exit ;
41468: GO 41530
// tmp := IsInUnit ( unit ) ;
41470: LD_ADDR_VAR 0 3
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: CALL_OW 310
41484: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41485: LD_VAR 0 3
41489: PPUSH
41490: CALL_OW 247
41494: PUSH
41495: LD_INT 2
41497: EQUAL
41498: IFFALSE 41511
// ComExitVehicle ( unit ) else
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 121
41509: GO 41520
// ComExitBuilding ( unit ) ;
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 122
// result := tmp ;
41520: LD_ADDR_VAR 0 2
41524: PUSH
41525: LD_VAR 0 3
41529: ST_TO_ADDR
// end ;
41530: LD_VAR 0 2
41534: RET
// export function ComExitAll ( units ) ; var i ; begin
41535: LD_INT 0
41537: PPUSH
41538: PPUSH
// if not units then
41539: LD_VAR 0 1
41543: NOT
41544: IFFALSE 41548
// exit ;
41546: GO 41574
// for i in units do
41548: LD_ADDR_VAR 0 3
41552: PUSH
41553: LD_VAR 0 1
41557: PUSH
41558: FOR_IN
41559: IFFALSE 41572
// ComExit ( i ) ;
41561: LD_VAR 0 3
41565: PPUSH
41566: CALL 41452 0 1
41570: GO 41558
41572: POP
41573: POP
// end ;
41574: LD_VAR 0 2
41578: RET
// export function ResetHc ; begin
41579: LD_INT 0
41581: PPUSH
// InitHc ;
41582: CALL_OW 19
// hc_importance := 0 ;
41586: LD_ADDR_OWVAR 32
41590: PUSH
41591: LD_INT 0
41593: ST_TO_ADDR
// end ;
41594: LD_VAR 0 1
41598: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41599: LD_INT 0
41601: PPUSH
41602: PPUSH
41603: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41604: LD_ADDR_VAR 0 6
41608: PUSH
41609: LD_VAR 0 1
41613: PUSH
41614: LD_VAR 0 3
41618: PLUS
41619: PUSH
41620: LD_INT 2
41622: DIV
41623: ST_TO_ADDR
// if _x < 0 then
41624: LD_VAR 0 6
41628: PUSH
41629: LD_INT 0
41631: LESS
41632: IFFALSE 41649
// _x := _x * - 1 ;
41634: LD_ADDR_VAR 0 6
41638: PUSH
41639: LD_VAR 0 6
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: MUL
41648: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41649: LD_ADDR_VAR 0 7
41653: PUSH
41654: LD_VAR 0 2
41658: PUSH
41659: LD_VAR 0 4
41663: PLUS
41664: PUSH
41665: LD_INT 2
41667: DIV
41668: ST_TO_ADDR
// if _y < 0 then
41669: LD_VAR 0 7
41673: PUSH
41674: LD_INT 0
41676: LESS
41677: IFFALSE 41694
// _y := _y * - 1 ;
41679: LD_ADDR_VAR 0 7
41683: PUSH
41684: LD_VAR 0 7
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: MUL
41693: ST_TO_ADDR
// result := [ _x , _y ] ;
41694: LD_ADDR_VAR 0 5
41698: PUSH
41699: LD_VAR 0 6
41703: PUSH
41704: LD_VAR 0 7
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: ST_TO_ADDR
// end ;
41713: LD_VAR 0 5
41717: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41718: LD_INT 0
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
// task := GetTaskList ( unit ) ;
41724: LD_ADDR_VAR 0 7
41728: PUSH
41729: LD_VAR 0 1
41733: PPUSH
41734: CALL_OW 437
41738: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41739: LD_VAR 0 7
41743: NOT
41744: PUSH
41745: LD_VAR 0 1
41749: PPUSH
41750: LD_VAR 0 2
41754: PPUSH
41755: CALL_OW 308
41759: NOT
41760: AND
41761: IFFALSE 41765
// exit ;
41763: GO 41883
// if IsInArea ( unit , area ) then
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 2
41774: PPUSH
41775: CALL_OW 308
41779: IFFALSE 41797
// begin ComMoveToArea ( unit , goAway ) ;
41781: LD_VAR 0 1
41785: PPUSH
41786: LD_VAR 0 3
41790: PPUSH
41791: CALL_OW 113
// exit ;
41795: GO 41883
// end ; if task [ 1 ] [ 1 ] <> M then
41797: LD_VAR 0 7
41801: PUSH
41802: LD_INT 1
41804: ARRAY
41805: PUSH
41806: LD_INT 1
41808: ARRAY
41809: PUSH
41810: LD_STRING M
41812: NONEQUAL
41813: IFFALSE 41817
// exit ;
41815: GO 41883
// x := task [ 1 ] [ 2 ] ;
41817: LD_ADDR_VAR 0 5
41821: PUSH
41822: LD_VAR 0 7
41826: PUSH
41827: LD_INT 1
41829: ARRAY
41830: PUSH
41831: LD_INT 2
41833: ARRAY
41834: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41835: LD_ADDR_VAR 0 6
41839: PUSH
41840: LD_VAR 0 7
41844: PUSH
41845: LD_INT 1
41847: ARRAY
41848: PUSH
41849: LD_INT 3
41851: ARRAY
41852: ST_TO_ADDR
// if InArea ( x , y , area ) then
41853: LD_VAR 0 5
41857: PPUSH
41858: LD_VAR 0 6
41862: PPUSH
41863: LD_VAR 0 2
41867: PPUSH
41868: CALL_OW 309
41872: IFFALSE 41883
// ComStop ( unit ) ;
41874: LD_VAR 0 1
41878: PPUSH
41879: CALL_OW 141
// end ;
41883: LD_VAR 0 4
41887: RET
// export function Abs ( value ) ; begin
41888: LD_INT 0
41890: PPUSH
// result := value ;
41891: LD_ADDR_VAR 0 2
41895: PUSH
41896: LD_VAR 0 1
41900: ST_TO_ADDR
// if value < 0 then
41901: LD_VAR 0 1
41905: PUSH
41906: LD_INT 0
41908: LESS
41909: IFFALSE 41926
// result := value * - 1 ;
41911: LD_ADDR_VAR 0 2
41915: PUSH
41916: LD_VAR 0 1
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: MUL
41925: ST_TO_ADDR
// end ;
41926: LD_VAR 0 2
41930: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41931: LD_INT 0
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
// if not unit or not building then
41941: LD_VAR 0 1
41945: NOT
41946: PUSH
41947: LD_VAR 0 2
41951: NOT
41952: OR
41953: IFFALSE 41957
// exit ;
41955: GO 42183
// x := GetX ( building ) ;
41957: LD_ADDR_VAR 0 4
41961: PUSH
41962: LD_VAR 0 2
41966: PPUSH
41967: CALL_OW 250
41971: ST_TO_ADDR
// y := GetY ( building ) ;
41972: LD_ADDR_VAR 0 6
41976: PUSH
41977: LD_VAR 0 2
41981: PPUSH
41982: CALL_OW 251
41986: ST_TO_ADDR
// d := GetDir ( building ) ;
41987: LD_ADDR_VAR 0 8
41991: PUSH
41992: LD_VAR 0 2
41996: PPUSH
41997: CALL_OW 254
42001: ST_TO_ADDR
// r := 4 ;
42002: LD_ADDR_VAR 0 9
42006: PUSH
42007: LD_INT 4
42009: ST_TO_ADDR
// for i := 1 to 5 do
42010: LD_ADDR_VAR 0 10
42014: PUSH
42015: DOUBLE
42016: LD_INT 1
42018: DEC
42019: ST_TO_ADDR
42020: LD_INT 5
42022: PUSH
42023: FOR_TO
42024: IFFALSE 42181
// begin _x := ShiftX ( x , d , r + i ) ;
42026: LD_ADDR_VAR 0 5
42030: PUSH
42031: LD_VAR 0 4
42035: PPUSH
42036: LD_VAR 0 8
42040: PPUSH
42041: LD_VAR 0 9
42045: PUSH
42046: LD_VAR 0 10
42050: PLUS
42051: PPUSH
42052: CALL_OW 272
42056: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42057: LD_ADDR_VAR 0 7
42061: PUSH
42062: LD_VAR 0 6
42066: PPUSH
42067: LD_VAR 0 8
42071: PPUSH
42072: LD_VAR 0 9
42076: PUSH
42077: LD_VAR 0 10
42081: PLUS
42082: PPUSH
42083: CALL_OW 273
42087: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42088: LD_VAR 0 5
42092: PPUSH
42093: LD_VAR 0 7
42097: PPUSH
42098: CALL_OW 488
42102: PUSH
42103: LD_VAR 0 5
42107: PPUSH
42108: LD_VAR 0 7
42112: PPUSH
42113: CALL_OW 428
42117: PPUSH
42118: CALL_OW 247
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: IN
42133: NOT
42134: AND
42135: IFFALSE 42179
// begin ComMoveXY ( unit , _x , _y ) ;
42137: LD_VAR 0 1
42141: PPUSH
42142: LD_VAR 0 5
42146: PPUSH
42147: LD_VAR 0 7
42151: PPUSH
42152: CALL_OW 111
// result := [ _x , _y ] ;
42156: LD_ADDR_VAR 0 3
42160: PUSH
42161: LD_VAR 0 5
42165: PUSH
42166: LD_VAR 0 7
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: ST_TO_ADDR
// exit ;
42175: POP
42176: POP
42177: GO 42183
// end ; end ;
42179: GO 42023
42181: POP
42182: POP
// end ;
42183: LD_VAR 0 3
42187: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42188: LD_INT 0
42190: PPUSH
42191: PPUSH
42192: PPUSH
// result := 0 ;
42193: LD_ADDR_VAR 0 3
42197: PUSH
42198: LD_INT 0
42200: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42201: LD_VAR 0 1
42205: PUSH
42206: LD_INT 0
42208: LESS
42209: PUSH
42210: LD_VAR 0 1
42214: PUSH
42215: LD_INT 8
42217: GREATER
42218: OR
42219: PUSH
42220: LD_VAR 0 2
42224: PUSH
42225: LD_INT 0
42227: LESS
42228: OR
42229: PUSH
42230: LD_VAR 0 2
42234: PUSH
42235: LD_INT 8
42237: GREATER
42238: OR
42239: IFFALSE 42243
// exit ;
42241: GO 42318
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42243: LD_ADDR_VAR 0 4
42247: PUSH
42248: LD_INT 22
42250: PUSH
42251: LD_VAR 0 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PPUSH
42260: CALL_OW 69
42264: PUSH
42265: FOR_IN
42266: IFFALSE 42316
// begin un := UnitShoot ( i ) ;
42268: LD_ADDR_VAR 0 5
42272: PUSH
42273: LD_VAR 0 4
42277: PPUSH
42278: CALL_OW 504
42282: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42283: LD_VAR 0 5
42287: PPUSH
42288: CALL_OW 255
42292: PUSH
42293: LD_VAR 0 1
42297: EQUAL
42298: IFFALSE 42314
// begin result := un ;
42300: LD_ADDR_VAR 0 3
42304: PUSH
42305: LD_VAR 0 5
42309: ST_TO_ADDR
// exit ;
42310: POP
42311: POP
42312: GO 42318
// end ; end ;
42314: GO 42265
42316: POP
42317: POP
// end ;
42318: LD_VAR 0 3
42322: RET
// export function GetCargoBay ( units ) ; begin
42323: LD_INT 0
42325: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42326: LD_ADDR_VAR 0 2
42330: PUSH
42331: LD_VAR 0 1
42335: PPUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 34
42341: PUSH
42342: LD_INT 12
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 34
42351: PUSH
42352: LD_INT 51
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 34
42361: PUSH
42362: LD_INT 32
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 34
42371: PUSH
42372: LD_EXP 69
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: PPUSH
42388: CALL_OW 72
42392: ST_TO_ADDR
// end ;
42393: LD_VAR 0 2
42397: RET
// export function Negate ( value ) ; begin
42398: LD_INT 0
42400: PPUSH
// result := not value ;
42401: LD_ADDR_VAR 0 2
42405: PUSH
42406: LD_VAR 0 1
42410: NOT
42411: ST_TO_ADDR
// end ;
42412: LD_VAR 0 2
42416: RET
// export function Inc ( value ) ; begin
42417: LD_INT 0
42419: PPUSH
// result := value + 1 ;
42420: LD_ADDR_VAR 0 2
42424: PUSH
42425: LD_VAR 0 1
42429: PUSH
42430: LD_INT 1
42432: PLUS
42433: ST_TO_ADDR
// end ;
42434: LD_VAR 0 2
42438: RET
// export function Dec ( value ) ; begin
42439: LD_INT 0
42441: PPUSH
// result := value - 1 ;
42442: LD_ADDR_VAR 0 2
42446: PUSH
42447: LD_VAR 0 1
42451: PUSH
42452: LD_INT 1
42454: MINUS
42455: ST_TO_ADDR
// end ;
42456: LD_VAR 0 2
42460: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42461: LD_INT 0
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42471: LD_VAR 0 1
42475: PPUSH
42476: LD_VAR 0 2
42480: PPUSH
42481: CALL_OW 488
42485: NOT
42486: PUSH
42487: LD_VAR 0 3
42491: PPUSH
42492: LD_VAR 0 4
42496: PPUSH
42497: CALL_OW 488
42501: NOT
42502: OR
42503: IFFALSE 42516
// begin result := - 1 ;
42505: LD_ADDR_VAR 0 5
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: ST_TO_ADDR
// exit ;
42514: GO 42751
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42516: LD_ADDR_VAR 0 12
42520: PUSH
42521: LD_VAR 0 1
42525: PPUSH
42526: LD_VAR 0 2
42530: PPUSH
42531: LD_VAR 0 3
42535: PPUSH
42536: LD_VAR 0 4
42540: PPUSH
42541: CALL 41599 0 4
42545: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42546: LD_ADDR_VAR 0 11
42550: PUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: LD_VAR 0 2
42560: PPUSH
42561: LD_VAR 0 12
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PPUSH
42570: LD_VAR 0 12
42574: PUSH
42575: LD_INT 2
42577: ARRAY
42578: PPUSH
42579: CALL_OW 298
42583: ST_TO_ADDR
// distance := 9999 ;
42584: LD_ADDR_VAR 0 10
42588: PUSH
42589: LD_INT 9999
42591: ST_TO_ADDR
// for i := 0 to 5 do
42592: LD_ADDR_VAR 0 6
42596: PUSH
42597: DOUBLE
42598: LD_INT 0
42600: DEC
42601: ST_TO_ADDR
42602: LD_INT 5
42604: PUSH
42605: FOR_TO
42606: IFFALSE 42749
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42608: LD_ADDR_VAR 0 7
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: LD_VAR 0 6
42622: PPUSH
42623: LD_VAR 0 11
42627: PPUSH
42628: CALL_OW 272
42632: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42633: LD_ADDR_VAR 0 8
42637: PUSH
42638: LD_VAR 0 2
42642: PPUSH
42643: LD_VAR 0 6
42647: PPUSH
42648: LD_VAR 0 11
42652: PPUSH
42653: CALL_OW 273
42657: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42658: LD_VAR 0 7
42662: PPUSH
42663: LD_VAR 0 8
42667: PPUSH
42668: CALL_OW 488
42672: NOT
42673: IFFALSE 42677
// continue ;
42675: GO 42605
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42677: LD_ADDR_VAR 0 9
42681: PUSH
42682: LD_VAR 0 12
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: PPUSH
42691: LD_VAR 0 12
42695: PUSH
42696: LD_INT 2
42698: ARRAY
42699: PPUSH
42700: LD_VAR 0 7
42704: PPUSH
42705: LD_VAR 0 8
42709: PPUSH
42710: CALL_OW 298
42714: ST_TO_ADDR
// if tmp < distance then
42715: LD_VAR 0 9
42719: PUSH
42720: LD_VAR 0 10
42724: LESS
42725: IFFALSE 42747
// begin result := i ;
42727: LD_ADDR_VAR 0 5
42731: PUSH
42732: LD_VAR 0 6
42736: ST_TO_ADDR
// distance := tmp ;
42737: LD_ADDR_VAR 0 10
42741: PUSH
42742: LD_VAR 0 9
42746: ST_TO_ADDR
// end ; end ;
42747: GO 42605
42749: POP
42750: POP
// end ;
42751: LD_VAR 0 5
42755: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42756: LD_INT 0
42758: PPUSH
42759: PPUSH
// if not driver or not IsInUnit ( driver ) then
42760: LD_VAR 0 1
42764: NOT
42765: PUSH
42766: LD_VAR 0 1
42770: PPUSH
42771: CALL_OW 310
42775: NOT
42776: OR
42777: IFFALSE 42781
// exit ;
42779: GO 42871
// vehicle := IsInUnit ( driver ) ;
42781: LD_ADDR_VAR 0 3
42785: PUSH
42786: LD_VAR 0 1
42790: PPUSH
42791: CALL_OW 310
42795: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42796: LD_VAR 0 1
42800: PPUSH
42801: LD_STRING \
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: PUSH
42831: LD_STRING E
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_VAR 0 3
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PPUSH
42867: CALL_OW 446
// end ;
42871: LD_VAR 0 2
42875: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42876: LD_INT 0
42878: PPUSH
42879: PPUSH
// if not driver or not IsInUnit ( driver ) then
42880: LD_VAR 0 1
42884: NOT
42885: PUSH
42886: LD_VAR 0 1
42890: PPUSH
42891: CALL_OW 310
42895: NOT
42896: OR
42897: IFFALSE 42901
// exit ;
42899: GO 42991
// vehicle := IsInUnit ( driver ) ;
42901: LD_ADDR_VAR 0 3
42905: PUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: CALL_OW 310
42915: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42916: LD_VAR 0 1
42920: PPUSH
42921: LD_STRING \
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: LD_STRING E
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_VAR 0 3
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PPUSH
42987: CALL_OW 447
// end ;
42991: LD_VAR 0 2
42995: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42996: LD_INT 0
42998: PPUSH
42999: PPUSH
43000: PPUSH
// tmp := [ ] ;
43001: LD_ADDR_VAR 0 5
43005: PUSH
43006: EMPTY
43007: ST_TO_ADDR
// for i in units do
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: FOR_IN
43019: IFFALSE 43057
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43021: LD_ADDR_VAR 0 5
43025: PUSH
43026: LD_VAR 0 5
43030: PPUSH
43031: LD_VAR 0 5
43035: PUSH
43036: LD_INT 1
43038: PLUS
43039: PPUSH
43040: LD_VAR 0 4
43044: PPUSH
43045: CALL_OW 256
43049: PPUSH
43050: CALL_OW 2
43054: ST_TO_ADDR
43055: GO 43018
43057: POP
43058: POP
// if not tmp then
43059: LD_VAR 0 5
43063: NOT
43064: IFFALSE 43068
// exit ;
43066: GO 43116
// if asc then
43068: LD_VAR 0 2
43072: IFFALSE 43096
// result := SortListByListAsc ( units , tmp ) else
43074: LD_ADDR_VAR 0 3
43078: PUSH
43079: LD_VAR 0 1
43083: PPUSH
43084: LD_VAR 0 5
43088: PPUSH
43089: CALL_OW 76
43093: ST_TO_ADDR
43094: GO 43116
// result := SortListByListDesc ( units , tmp ) ;
43096: LD_ADDR_VAR 0 3
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: LD_VAR 0 5
43110: PPUSH
43111: CALL_OW 77
43115: ST_TO_ADDR
// end ;
43116: LD_VAR 0 3
43120: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43121: LD_INT 0
43123: PPUSH
43124: PPUSH
// task := GetTaskList ( mech ) ;
43125: LD_ADDR_VAR 0 4
43129: PUSH
43130: LD_VAR 0 1
43134: PPUSH
43135: CALL_OW 437
43139: ST_TO_ADDR
// if not task then
43140: LD_VAR 0 4
43144: NOT
43145: IFFALSE 43149
// exit ;
43147: GO 43191
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_VAR 0 4
43158: PUSH
43159: LD_INT 1
43161: ARRAY
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PUSH
43167: LD_STRING r
43169: EQUAL
43170: PUSH
43171: LD_VAR 0 4
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PUSH
43180: LD_INT 4
43182: ARRAY
43183: PUSH
43184: LD_VAR 0 2
43188: EQUAL
43189: AND
43190: ST_TO_ADDR
// end ;
43191: LD_VAR 0 3
43195: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43196: LD_INT 0
43198: PPUSH
// SetDir ( unit , d ) ;
43199: LD_VAR 0 1
43203: PPUSH
43204: LD_VAR 0 4
43208: PPUSH
43209: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43213: LD_VAR 0 1
43217: PPUSH
43218: LD_VAR 0 2
43222: PPUSH
43223: LD_VAR 0 3
43227: PPUSH
43228: LD_VAR 0 5
43232: PPUSH
43233: CALL_OW 48
// end ;
43237: LD_VAR 0 6
43241: RET
// export function ToNaturalNumber ( number ) ; begin
43242: LD_INT 0
43244: PPUSH
// result := number div 1 ;
43245: LD_ADDR_VAR 0 2
43249: PUSH
43250: LD_VAR 0 1
43254: PUSH
43255: LD_INT 1
43257: DIV
43258: ST_TO_ADDR
// if number < 0 then
43259: LD_VAR 0 1
43263: PUSH
43264: LD_INT 0
43266: LESS
43267: IFFALSE 43277
// result := 0 ;
43269: LD_ADDR_VAR 0 2
43273: PUSH
43274: LD_INT 0
43276: ST_TO_ADDR
// end ;
43277: LD_VAR 0 2
43281: RET
// export function SortByClass ( units , class ) ; var un ; begin
43282: LD_INT 0
43284: PPUSH
43285: PPUSH
// if not units or not class then
43286: LD_VAR 0 1
43290: NOT
43291: PUSH
43292: LD_VAR 0 2
43296: NOT
43297: OR
43298: IFFALSE 43302
// exit ;
43300: GO 43397
// result := [ ] ;
43302: LD_ADDR_VAR 0 3
43306: PUSH
43307: EMPTY
43308: ST_TO_ADDR
// for un in units do
43309: LD_ADDR_VAR 0 4
43313: PUSH
43314: LD_VAR 0 1
43318: PUSH
43319: FOR_IN
43320: IFFALSE 43395
// if GetClass ( un ) = class then
43322: LD_VAR 0 4
43326: PPUSH
43327: CALL_OW 257
43331: PUSH
43332: LD_VAR 0 2
43336: EQUAL
43337: IFFALSE 43364
// result := Insert ( result , 1 , un ) else
43339: LD_ADDR_VAR 0 3
43343: PUSH
43344: LD_VAR 0 3
43348: PPUSH
43349: LD_INT 1
43351: PPUSH
43352: LD_VAR 0 4
43356: PPUSH
43357: CALL_OW 2
43361: ST_TO_ADDR
43362: GO 43393
// result := Replace ( result , result + 1 , un ) ;
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_VAR 0 3
43373: PPUSH
43374: LD_VAR 0 3
43378: PUSH
43379: LD_INT 1
43381: PLUS
43382: PPUSH
43383: LD_VAR 0 4
43387: PPUSH
43388: CALL_OW 1
43392: ST_TO_ADDR
43393: GO 43319
43395: POP
43396: POP
// end ;
43397: LD_VAR 0 3
43401: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43402: LD_INT 0
43404: PPUSH
43405: PPUSH
43406: PPUSH
43407: PPUSH
43408: PPUSH
43409: PPUSH
43410: PPUSH
// result := [ ] ;
43411: LD_ADDR_VAR 0 4
43415: PUSH
43416: EMPTY
43417: ST_TO_ADDR
// if x - r < 0 then
43418: LD_VAR 0 1
43422: PUSH
43423: LD_VAR 0 3
43427: MINUS
43428: PUSH
43429: LD_INT 0
43431: LESS
43432: IFFALSE 43444
// min_x := 0 else
43434: LD_ADDR_VAR 0 8
43438: PUSH
43439: LD_INT 0
43441: ST_TO_ADDR
43442: GO 43460
// min_x := x - r ;
43444: LD_ADDR_VAR 0 8
43448: PUSH
43449: LD_VAR 0 1
43453: PUSH
43454: LD_VAR 0 3
43458: MINUS
43459: ST_TO_ADDR
// if y - r < 0 then
43460: LD_VAR 0 2
43464: PUSH
43465: LD_VAR 0 3
43469: MINUS
43470: PUSH
43471: LD_INT 0
43473: LESS
43474: IFFALSE 43486
// min_y := 0 else
43476: LD_ADDR_VAR 0 7
43480: PUSH
43481: LD_INT 0
43483: ST_TO_ADDR
43484: GO 43502
// min_y := y - r ;
43486: LD_ADDR_VAR 0 7
43490: PUSH
43491: LD_VAR 0 2
43495: PUSH
43496: LD_VAR 0 3
43500: MINUS
43501: ST_TO_ADDR
// max_x := x + r ;
43502: LD_ADDR_VAR 0 9
43506: PUSH
43507: LD_VAR 0 1
43511: PUSH
43512: LD_VAR 0 3
43516: PLUS
43517: ST_TO_ADDR
// max_y := y + r ;
43518: LD_ADDR_VAR 0 10
43522: PUSH
43523: LD_VAR 0 2
43527: PUSH
43528: LD_VAR 0 3
43532: PLUS
43533: ST_TO_ADDR
// for _x = min_x to max_x do
43534: LD_ADDR_VAR 0 5
43538: PUSH
43539: DOUBLE
43540: LD_VAR 0 8
43544: DEC
43545: ST_TO_ADDR
43546: LD_VAR 0 9
43550: PUSH
43551: FOR_TO
43552: IFFALSE 43653
// for _y = min_y to max_y do
43554: LD_ADDR_VAR 0 6
43558: PUSH
43559: DOUBLE
43560: LD_VAR 0 7
43564: DEC
43565: ST_TO_ADDR
43566: LD_VAR 0 10
43570: PUSH
43571: FOR_TO
43572: IFFALSE 43649
// begin if not ValidHex ( _x , _y ) then
43574: LD_VAR 0 5
43578: PPUSH
43579: LD_VAR 0 6
43583: PPUSH
43584: CALL_OW 488
43588: NOT
43589: IFFALSE 43593
// continue ;
43591: GO 43571
// if GetResourceTypeXY ( _x , _y ) then
43593: LD_VAR 0 5
43597: PPUSH
43598: LD_VAR 0 6
43602: PPUSH
43603: CALL_OW 283
43607: IFFALSE 43647
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43609: LD_ADDR_VAR 0 4
43613: PUSH
43614: LD_VAR 0 4
43618: PPUSH
43619: LD_VAR 0 4
43623: PUSH
43624: LD_INT 1
43626: PLUS
43627: PPUSH
43628: LD_VAR 0 5
43632: PUSH
43633: LD_VAR 0 6
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PPUSH
43642: CALL_OW 1
43646: ST_TO_ADDR
// end ;
43647: GO 43571
43649: POP
43650: POP
43651: GO 43551
43653: POP
43654: POP
// end ;
43655: LD_VAR 0 4
43659: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43660: LD_INT 0
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
// if not units then
43670: LD_VAR 0 1
43674: NOT
43675: IFFALSE 43679
// exit ;
43677: GO 44190
// result := UnitFilter ( units , [ f_ok ] ) ;
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_VAR 0 1
43688: PPUSH
43689: LD_INT 50
43691: PUSH
43692: EMPTY
43693: LIST
43694: PPUSH
43695: CALL_OW 72
43699: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43700: LD_ADDR_VAR 0 8
43704: PUSH
43705: LD_VAR 0 1
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PPUSH
43714: CALL_OW 255
43718: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43719: LD_ADDR_VAR 0 10
43723: PUSH
43724: LD_INT 29
43726: PUSH
43727: LD_EXP 72
43731: PUSH
43732: LD_INT 49
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: ST_TO_ADDR
// if not result then
43740: LD_VAR 0 3
43744: NOT
43745: IFFALSE 43749
// exit ;
43747: GO 44190
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43749: LD_ADDR_VAR 0 5
43753: PUSH
43754: LD_INT 81
43756: PUSH
43757: LD_VAR 0 8
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PPUSH
43766: CALL_OW 69
43770: ST_TO_ADDR
// for i in result do
43771: LD_ADDR_VAR 0 4
43775: PUSH
43776: LD_VAR 0 3
43780: PUSH
43781: FOR_IN
43782: IFFALSE 44188
// begin tag := GetTag ( i ) + 1 ;
43784: LD_ADDR_VAR 0 9
43788: PUSH
43789: LD_VAR 0 4
43793: PPUSH
43794: CALL_OW 110
43798: PUSH
43799: LD_INT 1
43801: PLUS
43802: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43803: LD_ADDR_VAR 0 7
43807: PUSH
43808: LD_VAR 0 4
43812: PPUSH
43813: CALL_OW 250
43817: PPUSH
43818: LD_VAR 0 4
43822: PPUSH
43823: CALL_OW 251
43827: PPUSH
43828: LD_INT 6
43830: PPUSH
43831: CALL 43402 0 3
43835: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43836: LD_VAR 0 7
43840: PUSH
43841: LD_VAR 0 4
43845: PPUSH
43846: CALL_OW 264
43850: PUSH
43851: LD_VAR 0 10
43855: IN
43856: NOT
43857: AND
43858: IFFALSE 43897
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43860: LD_VAR 0 4
43864: PPUSH
43865: LD_VAR 0 7
43869: PUSH
43870: LD_INT 1
43872: ARRAY
43873: PUSH
43874: LD_INT 1
43876: ARRAY
43877: PPUSH
43878: LD_VAR 0 7
43882: PUSH
43883: LD_INT 1
43885: ARRAY
43886: PUSH
43887: LD_INT 2
43889: ARRAY
43890: PPUSH
43891: CALL_OW 116
43895: GO 44186
// if path > tag then
43897: LD_VAR 0 2
43901: PUSH
43902: LD_VAR 0 9
43906: GREATER
43907: IFFALSE 44115
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
43909: LD_ADDR_VAR 0 6
43913: PUSH
43914: LD_VAR 0 5
43918: PPUSH
43919: LD_INT 91
43921: PUSH
43922: LD_VAR 0 4
43926: PUSH
43927: LD_INT 12
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: LIST
43934: PPUSH
43935: CALL_OW 72
43939: ST_TO_ADDR
// if nearEnemy then
43940: LD_VAR 0 6
43944: IFFALSE 44013
// begin if GetWeapon ( i ) = ru_time_lapser then
43946: LD_VAR 0 4
43950: PPUSH
43951: CALL_OW 264
43955: PUSH
43956: LD_INT 49
43958: EQUAL
43959: IFFALSE 43987
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43961: LD_VAR 0 4
43965: PPUSH
43966: LD_VAR 0 6
43970: PPUSH
43971: LD_VAR 0 4
43975: PPUSH
43976: CALL_OW 74
43980: PPUSH
43981: CALL_OW 112
43985: GO 44011
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43987: LD_VAR 0 4
43991: PPUSH
43992: LD_VAR 0 6
43996: PPUSH
43997: LD_VAR 0 4
44001: PPUSH
44002: CALL_OW 74
44006: PPUSH
44007: CALL_OW 115
// end else
44011: GO 44113
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44013: LD_VAR 0 4
44017: PPUSH
44018: LD_VAR 0 2
44022: PUSH
44023: LD_VAR 0 9
44027: ARRAY
44028: PUSH
44029: LD_INT 1
44031: ARRAY
44032: PPUSH
44033: LD_VAR 0 2
44037: PUSH
44038: LD_VAR 0 9
44042: ARRAY
44043: PUSH
44044: LD_INT 2
44046: ARRAY
44047: PPUSH
44048: CALL_OW 297
44052: PUSH
44053: LD_INT 6
44055: GREATER
44056: IFFALSE 44099
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44058: LD_VAR 0 4
44062: PPUSH
44063: LD_VAR 0 2
44067: PUSH
44068: LD_VAR 0 9
44072: ARRAY
44073: PUSH
44074: LD_INT 1
44076: ARRAY
44077: PPUSH
44078: LD_VAR 0 2
44082: PUSH
44083: LD_VAR 0 9
44087: ARRAY
44088: PUSH
44089: LD_INT 2
44091: ARRAY
44092: PPUSH
44093: CALL_OW 114
44097: GO 44113
// SetTag ( i , tag ) ;
44099: LD_VAR 0 4
44103: PPUSH
44104: LD_VAR 0 9
44108: PPUSH
44109: CALL_OW 109
// end else
44113: GO 44186
// if enemy then
44115: LD_VAR 0 5
44119: IFFALSE 44186
// begin if GetWeapon ( i ) = ru_time_lapser then
44121: LD_VAR 0 4
44125: PPUSH
44126: CALL_OW 264
44130: PUSH
44131: LD_INT 49
44133: EQUAL
44134: IFFALSE 44162
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44136: LD_VAR 0 4
44140: PPUSH
44141: LD_VAR 0 5
44145: PPUSH
44146: LD_VAR 0 4
44150: PPUSH
44151: CALL_OW 74
44155: PPUSH
44156: CALL_OW 112
44160: GO 44186
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44162: LD_VAR 0 4
44166: PPUSH
44167: LD_VAR 0 5
44171: PPUSH
44172: LD_VAR 0 4
44176: PPUSH
44177: CALL_OW 74
44181: PPUSH
44182: CALL_OW 115
// end ; end ;
44186: GO 43781
44188: POP
44189: POP
// end ;
44190: LD_VAR 0 3
44194: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44195: LD_INT 0
44197: PPUSH
44198: PPUSH
44199: PPUSH
// if not unit or IsInUnit ( unit ) then
44200: LD_VAR 0 1
44204: NOT
44205: PUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: CALL_OW 310
44215: OR
44216: IFFALSE 44220
// exit ;
44218: GO 44311
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44220: LD_ADDR_VAR 0 4
44224: PUSH
44225: LD_VAR 0 1
44229: PPUSH
44230: CALL_OW 250
44234: PPUSH
44235: LD_VAR 0 2
44239: PPUSH
44240: LD_INT 1
44242: PPUSH
44243: CALL_OW 272
44247: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44248: LD_ADDR_VAR 0 5
44252: PUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 251
44262: PPUSH
44263: LD_VAR 0 2
44267: PPUSH
44268: LD_INT 1
44270: PPUSH
44271: CALL_OW 273
44275: ST_TO_ADDR
// if ValidHex ( x , y ) then
44276: LD_VAR 0 4
44280: PPUSH
44281: LD_VAR 0 5
44285: PPUSH
44286: CALL_OW 488
44290: IFFALSE 44311
// ComTurnXY ( unit , x , y ) ;
44292: LD_VAR 0 1
44296: PPUSH
44297: LD_VAR 0 4
44301: PPUSH
44302: LD_VAR 0 5
44306: PPUSH
44307: CALL_OW 118
// end ;
44311: LD_VAR 0 3
44315: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44316: LD_INT 0
44318: PPUSH
44319: PPUSH
// result := false ;
44320: LD_ADDR_VAR 0 3
44324: PUSH
44325: LD_INT 0
44327: ST_TO_ADDR
// if not units then
44328: LD_VAR 0 2
44332: NOT
44333: IFFALSE 44337
// exit ;
44335: GO 44382
// for i in units do
44337: LD_ADDR_VAR 0 4
44341: PUSH
44342: LD_VAR 0 2
44346: PUSH
44347: FOR_IN
44348: IFFALSE 44380
// if See ( side , i ) then
44350: LD_VAR 0 1
44354: PPUSH
44355: LD_VAR 0 4
44359: PPUSH
44360: CALL_OW 292
44364: IFFALSE 44378
// begin result := true ;
44366: LD_ADDR_VAR 0 3
44370: PUSH
44371: LD_INT 1
44373: ST_TO_ADDR
// exit ;
44374: POP
44375: POP
44376: GO 44382
// end ;
44378: GO 44347
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 3
44386: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44387: LD_INT 0
44389: PPUSH
44390: PPUSH
44391: PPUSH
44392: PPUSH
// if not unit or not points then
44393: LD_VAR 0 1
44397: NOT
44398: PUSH
44399: LD_VAR 0 2
44403: NOT
44404: OR
44405: IFFALSE 44409
// exit ;
44407: GO 44499
// dist := 99999 ;
44409: LD_ADDR_VAR 0 5
44413: PUSH
44414: LD_INT 99999
44416: ST_TO_ADDR
// for i in points do
44417: LD_ADDR_VAR 0 4
44421: PUSH
44422: LD_VAR 0 2
44426: PUSH
44427: FOR_IN
44428: IFFALSE 44497
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44430: LD_ADDR_VAR 0 6
44434: PUSH
44435: LD_VAR 0 1
44439: PPUSH
44440: LD_VAR 0 4
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PPUSH
44449: LD_VAR 0 4
44453: PUSH
44454: LD_INT 2
44456: ARRAY
44457: PPUSH
44458: CALL_OW 297
44462: ST_TO_ADDR
// if tmpDist < dist then
44463: LD_VAR 0 6
44467: PUSH
44468: LD_VAR 0 5
44472: LESS
44473: IFFALSE 44495
// begin result := i ;
44475: LD_ADDR_VAR 0 3
44479: PUSH
44480: LD_VAR 0 4
44484: ST_TO_ADDR
// dist := tmpDist ;
44485: LD_ADDR_VAR 0 5
44489: PUSH
44490: LD_VAR 0 6
44494: ST_TO_ADDR
// end ; end ;
44495: GO 44427
44497: POP
44498: POP
// end ;
44499: LD_VAR 0 3
44503: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44504: LD_INT 0
44506: PPUSH
// uc_side := side ;
44507: LD_ADDR_OWVAR 20
44511: PUSH
44512: LD_VAR 0 1
44516: ST_TO_ADDR
// uc_nation := 3 ;
44517: LD_ADDR_OWVAR 21
44521: PUSH
44522: LD_INT 3
44524: ST_TO_ADDR
// vc_chassis := 25 ;
44525: LD_ADDR_OWVAR 37
44529: PUSH
44530: LD_INT 25
44532: ST_TO_ADDR
// vc_engine := engine_siberite ;
44533: LD_ADDR_OWVAR 39
44537: PUSH
44538: LD_INT 3
44540: ST_TO_ADDR
// vc_control := control_computer ;
44541: LD_ADDR_OWVAR 38
44545: PUSH
44546: LD_INT 3
44548: ST_TO_ADDR
// vc_weapon := 59 ;
44549: LD_ADDR_OWVAR 40
44553: PUSH
44554: LD_INT 59
44556: ST_TO_ADDR
// result := CreateVehicle ;
44557: LD_ADDR_VAR 0 5
44561: PUSH
44562: CALL_OW 45
44566: ST_TO_ADDR
// SetDir ( result , d ) ;
44567: LD_VAR 0 5
44571: PPUSH
44572: LD_VAR 0 4
44576: PPUSH
44577: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44581: LD_VAR 0 5
44585: PPUSH
44586: LD_VAR 0 2
44590: PPUSH
44591: LD_VAR 0 3
44595: PPUSH
44596: LD_INT 0
44598: PPUSH
44599: CALL_OW 48
// end ;
44603: LD_VAR 0 5
44607: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44608: LD_INT 0
44610: PPUSH
44611: PPUSH
44612: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44613: LD_ADDR_VAR 0 2
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44636: LD_VAR 0 1
44640: NOT
44641: PUSH
44642: LD_VAR 0 1
44646: PPUSH
44647: CALL_OW 264
44651: PUSH
44652: LD_INT 12
44654: PUSH
44655: LD_INT 51
44657: PUSH
44658: LD_INT 32
44660: PUSH
44661: LD_EXP 69
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: IN
44672: NOT
44673: OR
44674: IFFALSE 44678
// exit ;
44676: GO 44776
// for i := 1 to 3 do
44678: LD_ADDR_VAR 0 3
44682: PUSH
44683: DOUBLE
44684: LD_INT 1
44686: DEC
44687: ST_TO_ADDR
44688: LD_INT 3
44690: PUSH
44691: FOR_TO
44692: IFFALSE 44774
// begin tmp := GetCargo ( cargo , i ) ;
44694: LD_ADDR_VAR 0 4
44698: PUSH
44699: LD_VAR 0 1
44703: PPUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: CALL_OW 289
44713: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44714: LD_ADDR_VAR 0 2
44718: PUSH
44719: LD_VAR 0 2
44723: PPUSH
44724: LD_VAR 0 3
44728: PPUSH
44729: LD_VAR 0 4
44733: PPUSH
44734: CALL_OW 1
44738: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44739: LD_ADDR_VAR 0 2
44743: PUSH
44744: LD_VAR 0 2
44748: PPUSH
44749: LD_INT 4
44751: PPUSH
44752: LD_VAR 0 2
44756: PUSH
44757: LD_INT 4
44759: ARRAY
44760: PUSH
44761: LD_VAR 0 4
44765: PLUS
44766: PPUSH
44767: CALL_OW 1
44771: ST_TO_ADDR
// end ;
44772: GO 44691
44774: POP
44775: POP
// end ;
44776: LD_VAR 0 2
44780: RET
// export function Length ( array ) ; begin
44781: LD_INT 0
44783: PPUSH
// result := array + 0 ;
44784: LD_ADDR_VAR 0 2
44788: PUSH
44789: LD_VAR 0 1
44793: PUSH
44794: LD_INT 0
44796: PLUS
44797: ST_TO_ADDR
// end ;
44798: LD_VAR 0 2
44802: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
44803: LD_INT 0
44805: PPUSH
// uc_side := side ;
44806: LD_ADDR_OWVAR 20
44810: PUSH
44811: LD_VAR 0 1
44815: ST_TO_ADDR
// uc_nation := nation ;
44816: LD_ADDR_OWVAR 21
44820: PUSH
44821: LD_VAR 0 2
44825: ST_TO_ADDR
// bc_level := level ;
44826: LD_ADDR_OWVAR 43
44830: PUSH
44831: LD_VAR 0 3
44835: ST_TO_ADDR
// bc_type := typ ;
44836: LD_ADDR_OWVAR 42
44840: PUSH
44841: LD_VAR 0 4
44845: ST_TO_ADDR
// bc_kind1 := - 1 ;
44846: LD_ADDR_OWVAR 44
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: ST_TO_ADDR
// bc_kind2 := - 1 ;
44855: LD_ADDR_OWVAR 45
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
44864: LD_ADDR_VAR 0 9
44868: PUSH
44869: LD_VAR 0 5
44873: PPUSH
44874: LD_VAR 0 6
44878: PPUSH
44879: LD_VAR 0 7
44883: PPUSH
44884: CALL_OW 47
44888: ST_TO_ADDR
// if isInBuildingStage then
44889: LD_VAR 0 8
44893: IFFALSE 44904
// SetBuildingStage ( result ) ;
44895: LD_VAR 0 9
44899: PPUSH
44900: CALL_OW 593
// end ; end_of_file
44904: LD_VAR 0 9
44908: RET
// every 0 0$1 do
44909: GO 44911
44911: DISABLE
// begin enable ;
44912: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44913: LD_STRING updateTimer(
44915: PUSH
44916: LD_OWVAR 1
44920: STR
44921: PUSH
44922: LD_STRING );
44924: STR
44925: PPUSH
44926: CALL_OW 559
// end ;
44930: END
// export function SOS_MapStart ( ) ; begin
44931: LD_INT 0
44933: PPUSH
// if streamModeActive then
44934: LD_EXP 88
44938: IFFALSE 44947
// DefineStreamItems ( true ) ;
44940: LD_INT 1
44942: PPUSH
44943: CALL 46597 0 1
// UpdateFactoryWaypoints ( ) ;
44947: CALL 60181 0 0
// end ;
44951: LD_VAR 0 1
44955: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44956: LD_INT 0
44958: PPUSH
// if p2 = 100 then
44959: LD_VAR 0 2
44963: PUSH
44964: LD_INT 100
44966: EQUAL
44967: IFFALSE 45970
// begin if not StreamModeActive then
44969: LD_EXP 88
44973: NOT
44974: IFFALSE 44984
// StreamModeActive := true ;
44976: LD_ADDR_EXP 88
44980: PUSH
44981: LD_INT 1
44983: ST_TO_ADDR
// if p3 = 0 then
44984: LD_VAR 0 3
44988: PUSH
44989: LD_INT 0
44991: EQUAL
44992: IFFALSE 44998
// InitStreamMode ;
44994: CALL 46133 0 0
// if p3 = 1 then
44998: LD_VAR 0 3
45002: PUSH
45003: LD_INT 1
45005: EQUAL
45006: IFFALSE 45016
// sRocket := true ;
45008: LD_ADDR_EXP 93
45012: PUSH
45013: LD_INT 1
45015: ST_TO_ADDR
// if p3 = 2 then
45016: LD_VAR 0 3
45020: PUSH
45021: LD_INT 2
45023: EQUAL
45024: IFFALSE 45034
// sSpeed := true ;
45026: LD_ADDR_EXP 92
45030: PUSH
45031: LD_INT 1
45033: ST_TO_ADDR
// if p3 = 3 then
45034: LD_VAR 0 3
45038: PUSH
45039: LD_INT 3
45041: EQUAL
45042: IFFALSE 45052
// sEngine := true ;
45044: LD_ADDR_EXP 94
45048: PUSH
45049: LD_INT 1
45051: ST_TO_ADDR
// if p3 = 4 then
45052: LD_VAR 0 3
45056: PUSH
45057: LD_INT 4
45059: EQUAL
45060: IFFALSE 45070
// sSpec := true ;
45062: LD_ADDR_EXP 91
45066: PUSH
45067: LD_INT 1
45069: ST_TO_ADDR
// if p3 = 5 then
45070: LD_VAR 0 3
45074: PUSH
45075: LD_INT 5
45077: EQUAL
45078: IFFALSE 45088
// sLevel := true ;
45080: LD_ADDR_EXP 95
45084: PUSH
45085: LD_INT 1
45087: ST_TO_ADDR
// if p3 = 6 then
45088: LD_VAR 0 3
45092: PUSH
45093: LD_INT 6
45095: EQUAL
45096: IFFALSE 45106
// sArmoury := true ;
45098: LD_ADDR_EXP 96
45102: PUSH
45103: LD_INT 1
45105: ST_TO_ADDR
// if p3 = 7 then
45106: LD_VAR 0 3
45110: PUSH
45111: LD_INT 7
45113: EQUAL
45114: IFFALSE 45124
// sRadar := true ;
45116: LD_ADDR_EXP 97
45120: PUSH
45121: LD_INT 1
45123: ST_TO_ADDR
// if p3 = 8 then
45124: LD_VAR 0 3
45128: PUSH
45129: LD_INT 8
45131: EQUAL
45132: IFFALSE 45142
// sBunker := true ;
45134: LD_ADDR_EXP 98
45138: PUSH
45139: LD_INT 1
45141: ST_TO_ADDR
// if p3 = 9 then
45142: LD_VAR 0 3
45146: PUSH
45147: LD_INT 9
45149: EQUAL
45150: IFFALSE 45160
// sHack := true ;
45152: LD_ADDR_EXP 99
45156: PUSH
45157: LD_INT 1
45159: ST_TO_ADDR
// if p3 = 10 then
45160: LD_VAR 0 3
45164: PUSH
45165: LD_INT 10
45167: EQUAL
45168: IFFALSE 45178
// sFire := true ;
45170: LD_ADDR_EXP 100
45174: PUSH
45175: LD_INT 1
45177: ST_TO_ADDR
// if p3 = 11 then
45178: LD_VAR 0 3
45182: PUSH
45183: LD_INT 11
45185: EQUAL
45186: IFFALSE 45196
// sRefresh := true ;
45188: LD_ADDR_EXP 101
45192: PUSH
45193: LD_INT 1
45195: ST_TO_ADDR
// if p3 = 12 then
45196: LD_VAR 0 3
45200: PUSH
45201: LD_INT 12
45203: EQUAL
45204: IFFALSE 45214
// sExp := true ;
45206: LD_ADDR_EXP 102
45210: PUSH
45211: LD_INT 1
45213: ST_TO_ADDR
// if p3 = 13 then
45214: LD_VAR 0 3
45218: PUSH
45219: LD_INT 13
45221: EQUAL
45222: IFFALSE 45232
// sDepot := true ;
45224: LD_ADDR_EXP 103
45228: PUSH
45229: LD_INT 1
45231: ST_TO_ADDR
// if p3 = 14 then
45232: LD_VAR 0 3
45236: PUSH
45237: LD_INT 14
45239: EQUAL
45240: IFFALSE 45250
// sFlag := true ;
45242: LD_ADDR_EXP 104
45246: PUSH
45247: LD_INT 1
45249: ST_TO_ADDR
// if p3 = 15 then
45250: LD_VAR 0 3
45254: PUSH
45255: LD_INT 15
45257: EQUAL
45258: IFFALSE 45268
// sKamikadze := true ;
45260: LD_ADDR_EXP 112
45264: PUSH
45265: LD_INT 1
45267: ST_TO_ADDR
// if p3 = 16 then
45268: LD_VAR 0 3
45272: PUSH
45273: LD_INT 16
45275: EQUAL
45276: IFFALSE 45286
// sTroll := true ;
45278: LD_ADDR_EXP 113
45282: PUSH
45283: LD_INT 1
45285: ST_TO_ADDR
// if p3 = 17 then
45286: LD_VAR 0 3
45290: PUSH
45291: LD_INT 17
45293: EQUAL
45294: IFFALSE 45304
// sSlow := true ;
45296: LD_ADDR_EXP 114
45300: PUSH
45301: LD_INT 1
45303: ST_TO_ADDR
// if p3 = 18 then
45304: LD_VAR 0 3
45308: PUSH
45309: LD_INT 18
45311: EQUAL
45312: IFFALSE 45322
// sLack := true ;
45314: LD_ADDR_EXP 115
45318: PUSH
45319: LD_INT 1
45321: ST_TO_ADDR
// if p3 = 19 then
45322: LD_VAR 0 3
45326: PUSH
45327: LD_INT 19
45329: EQUAL
45330: IFFALSE 45340
// sTank := true ;
45332: LD_ADDR_EXP 117
45336: PUSH
45337: LD_INT 1
45339: ST_TO_ADDR
// if p3 = 20 then
45340: LD_VAR 0 3
45344: PUSH
45345: LD_INT 20
45347: EQUAL
45348: IFFALSE 45358
// sRemote := true ;
45350: LD_ADDR_EXP 118
45354: PUSH
45355: LD_INT 1
45357: ST_TO_ADDR
// if p3 = 21 then
45358: LD_VAR 0 3
45362: PUSH
45363: LD_INT 21
45365: EQUAL
45366: IFFALSE 45376
// sPowell := true ;
45368: LD_ADDR_EXP 119
45372: PUSH
45373: LD_INT 1
45375: ST_TO_ADDR
// if p3 = 22 then
45376: LD_VAR 0 3
45380: PUSH
45381: LD_INT 22
45383: EQUAL
45384: IFFALSE 45394
// sTeleport := true ;
45386: LD_ADDR_EXP 122
45390: PUSH
45391: LD_INT 1
45393: ST_TO_ADDR
// if p3 = 23 then
45394: LD_VAR 0 3
45398: PUSH
45399: LD_INT 23
45401: EQUAL
45402: IFFALSE 45412
// sOilTower := true ;
45404: LD_ADDR_EXP 124
45408: PUSH
45409: LD_INT 1
45411: ST_TO_ADDR
// if p3 = 24 then
45412: LD_VAR 0 3
45416: PUSH
45417: LD_INT 24
45419: EQUAL
45420: IFFALSE 45430
// sShovel := true ;
45422: LD_ADDR_EXP 125
45426: PUSH
45427: LD_INT 1
45429: ST_TO_ADDR
// if p3 = 25 then
45430: LD_VAR 0 3
45434: PUSH
45435: LD_INT 25
45437: EQUAL
45438: IFFALSE 45448
// sSheik := true ;
45440: LD_ADDR_EXP 126
45444: PUSH
45445: LD_INT 1
45447: ST_TO_ADDR
// if p3 = 26 then
45448: LD_VAR 0 3
45452: PUSH
45453: LD_INT 26
45455: EQUAL
45456: IFFALSE 45466
// sEarthquake := true ;
45458: LD_ADDR_EXP 128
45462: PUSH
45463: LD_INT 1
45465: ST_TO_ADDR
// if p3 = 27 then
45466: LD_VAR 0 3
45470: PUSH
45471: LD_INT 27
45473: EQUAL
45474: IFFALSE 45484
// sAI := true ;
45476: LD_ADDR_EXP 129
45480: PUSH
45481: LD_INT 1
45483: ST_TO_ADDR
// if p3 = 28 then
45484: LD_VAR 0 3
45488: PUSH
45489: LD_INT 28
45491: EQUAL
45492: IFFALSE 45502
// sCargo := true ;
45494: LD_ADDR_EXP 132
45498: PUSH
45499: LD_INT 1
45501: ST_TO_ADDR
// if p3 = 29 then
45502: LD_VAR 0 3
45506: PUSH
45507: LD_INT 29
45509: EQUAL
45510: IFFALSE 45520
// sDLaser := true ;
45512: LD_ADDR_EXP 133
45516: PUSH
45517: LD_INT 1
45519: ST_TO_ADDR
// if p3 = 30 then
45520: LD_VAR 0 3
45524: PUSH
45525: LD_INT 30
45527: EQUAL
45528: IFFALSE 45538
// sExchange := true ;
45530: LD_ADDR_EXP 134
45534: PUSH
45535: LD_INT 1
45537: ST_TO_ADDR
// if p3 = 31 then
45538: LD_VAR 0 3
45542: PUSH
45543: LD_INT 31
45545: EQUAL
45546: IFFALSE 45556
// sFac := true ;
45548: LD_ADDR_EXP 135
45552: PUSH
45553: LD_INT 1
45555: ST_TO_ADDR
// if p3 = 32 then
45556: LD_VAR 0 3
45560: PUSH
45561: LD_INT 32
45563: EQUAL
45564: IFFALSE 45574
// sPower := true ;
45566: LD_ADDR_EXP 136
45570: PUSH
45571: LD_INT 1
45573: ST_TO_ADDR
// if p3 = 33 then
45574: LD_VAR 0 3
45578: PUSH
45579: LD_INT 33
45581: EQUAL
45582: IFFALSE 45592
// sRandom := true ;
45584: LD_ADDR_EXP 137
45588: PUSH
45589: LD_INT 1
45591: ST_TO_ADDR
// if p3 = 34 then
45592: LD_VAR 0 3
45596: PUSH
45597: LD_INT 34
45599: EQUAL
45600: IFFALSE 45610
// sShield := true ;
45602: LD_ADDR_EXP 138
45606: PUSH
45607: LD_INT 1
45609: ST_TO_ADDR
// if p3 = 35 then
45610: LD_VAR 0 3
45614: PUSH
45615: LD_INT 35
45617: EQUAL
45618: IFFALSE 45628
// sTime := true ;
45620: LD_ADDR_EXP 139
45624: PUSH
45625: LD_INT 1
45627: ST_TO_ADDR
// if p3 = 36 then
45628: LD_VAR 0 3
45632: PUSH
45633: LD_INT 36
45635: EQUAL
45636: IFFALSE 45646
// sTools := true ;
45638: LD_ADDR_EXP 140
45642: PUSH
45643: LD_INT 1
45645: ST_TO_ADDR
// if p3 = 101 then
45646: LD_VAR 0 3
45650: PUSH
45651: LD_INT 101
45653: EQUAL
45654: IFFALSE 45664
// sSold := true ;
45656: LD_ADDR_EXP 105
45660: PUSH
45661: LD_INT 1
45663: ST_TO_ADDR
// if p3 = 102 then
45664: LD_VAR 0 3
45668: PUSH
45669: LD_INT 102
45671: EQUAL
45672: IFFALSE 45682
// sDiff := true ;
45674: LD_ADDR_EXP 106
45678: PUSH
45679: LD_INT 1
45681: ST_TO_ADDR
// if p3 = 103 then
45682: LD_VAR 0 3
45686: PUSH
45687: LD_INT 103
45689: EQUAL
45690: IFFALSE 45700
// sFog := true ;
45692: LD_ADDR_EXP 109
45696: PUSH
45697: LD_INT 1
45699: ST_TO_ADDR
// if p3 = 104 then
45700: LD_VAR 0 3
45704: PUSH
45705: LD_INT 104
45707: EQUAL
45708: IFFALSE 45718
// sReset := true ;
45710: LD_ADDR_EXP 110
45714: PUSH
45715: LD_INT 1
45717: ST_TO_ADDR
// if p3 = 105 then
45718: LD_VAR 0 3
45722: PUSH
45723: LD_INT 105
45725: EQUAL
45726: IFFALSE 45736
// sSun := true ;
45728: LD_ADDR_EXP 111
45732: PUSH
45733: LD_INT 1
45735: ST_TO_ADDR
// if p3 = 106 then
45736: LD_VAR 0 3
45740: PUSH
45741: LD_INT 106
45743: EQUAL
45744: IFFALSE 45754
// sTiger := true ;
45746: LD_ADDR_EXP 107
45750: PUSH
45751: LD_INT 1
45753: ST_TO_ADDR
// if p3 = 107 then
45754: LD_VAR 0 3
45758: PUSH
45759: LD_INT 107
45761: EQUAL
45762: IFFALSE 45772
// sBomb := true ;
45764: LD_ADDR_EXP 108
45768: PUSH
45769: LD_INT 1
45771: ST_TO_ADDR
// if p3 = 108 then
45772: LD_VAR 0 3
45776: PUSH
45777: LD_INT 108
45779: EQUAL
45780: IFFALSE 45790
// sWound := true ;
45782: LD_ADDR_EXP 116
45786: PUSH
45787: LD_INT 1
45789: ST_TO_ADDR
// if p3 = 109 then
45790: LD_VAR 0 3
45794: PUSH
45795: LD_INT 109
45797: EQUAL
45798: IFFALSE 45808
// sBetray := true ;
45800: LD_ADDR_EXP 120
45804: PUSH
45805: LD_INT 1
45807: ST_TO_ADDR
// if p3 = 110 then
45808: LD_VAR 0 3
45812: PUSH
45813: LD_INT 110
45815: EQUAL
45816: IFFALSE 45826
// sContamin := true ;
45818: LD_ADDR_EXP 121
45822: PUSH
45823: LD_INT 1
45825: ST_TO_ADDR
// if p3 = 111 then
45826: LD_VAR 0 3
45830: PUSH
45831: LD_INT 111
45833: EQUAL
45834: IFFALSE 45844
// sOil := true ;
45836: LD_ADDR_EXP 123
45840: PUSH
45841: LD_INT 1
45843: ST_TO_ADDR
// if p3 = 112 then
45844: LD_VAR 0 3
45848: PUSH
45849: LD_INT 112
45851: EQUAL
45852: IFFALSE 45862
// sStu := true ;
45854: LD_ADDR_EXP 127
45858: PUSH
45859: LD_INT 1
45861: ST_TO_ADDR
// if p3 = 113 then
45862: LD_VAR 0 3
45866: PUSH
45867: LD_INT 113
45869: EQUAL
45870: IFFALSE 45880
// sBazooka := true ;
45872: LD_ADDR_EXP 130
45876: PUSH
45877: LD_INT 1
45879: ST_TO_ADDR
// if p3 = 114 then
45880: LD_VAR 0 3
45884: PUSH
45885: LD_INT 114
45887: EQUAL
45888: IFFALSE 45898
// sMortar := true ;
45890: LD_ADDR_EXP 131
45894: PUSH
45895: LD_INT 1
45897: ST_TO_ADDR
// if p3 = 115 then
45898: LD_VAR 0 3
45902: PUSH
45903: LD_INT 115
45905: EQUAL
45906: IFFALSE 45916
// sRanger := true ;
45908: LD_ADDR_EXP 141
45912: PUSH
45913: LD_INT 1
45915: ST_TO_ADDR
// if p3 = 116 then
45916: LD_VAR 0 3
45920: PUSH
45921: LD_INT 116
45923: EQUAL
45924: IFFALSE 45934
// sComputer := true ;
45926: LD_ADDR_EXP 142
45930: PUSH
45931: LD_INT 1
45933: ST_TO_ADDR
// if p3 = 117 then
45934: LD_VAR 0 3
45938: PUSH
45939: LD_INT 117
45941: EQUAL
45942: IFFALSE 45952
// s30 := true ;
45944: LD_ADDR_EXP 143
45948: PUSH
45949: LD_INT 1
45951: ST_TO_ADDR
// if p3 = 118 then
45952: LD_VAR 0 3
45956: PUSH
45957: LD_INT 118
45959: EQUAL
45960: IFFALSE 45970
// s60 := true ;
45962: LD_ADDR_EXP 144
45966: PUSH
45967: LD_INT 1
45969: ST_TO_ADDR
// end ; if p2 = 101 then
45970: LD_VAR 0 2
45974: PUSH
45975: LD_INT 101
45977: EQUAL
45978: IFFALSE 46106
// begin case p3 of 1 :
45980: LD_VAR 0 3
45984: PUSH
45985: LD_INT 1
45987: DOUBLE
45988: EQUAL
45989: IFTRUE 45993
45991: GO 46000
45993: POP
// hHackUnlimitedResources ; 2 :
45994: CALL 58204 0 0
45998: GO 46106
46000: LD_INT 2
46002: DOUBLE
46003: EQUAL
46004: IFTRUE 46008
46006: GO 46015
46008: POP
// hHackSetLevel10 ; 3 :
46009: CALL 58337 0 0
46013: GO 46106
46015: LD_INT 3
46017: DOUBLE
46018: EQUAL
46019: IFTRUE 46023
46021: GO 46030
46023: POP
// hHackSetLevel10YourUnits ; 4 :
46024: CALL 58422 0 0
46028: GO 46106
46030: LD_INT 4
46032: DOUBLE
46033: EQUAL
46034: IFTRUE 46038
46036: GO 46045
46038: POP
// hHackInvincible ; 5 :
46039: CALL 58870 0 0
46043: GO 46106
46045: LD_INT 5
46047: DOUBLE
46048: EQUAL
46049: IFTRUE 46053
46051: GO 46060
46053: POP
// hHackInvisible ; 6 :
46054: CALL 58981 0 0
46058: GO 46106
46060: LD_INT 6
46062: DOUBLE
46063: EQUAL
46064: IFTRUE 46068
46066: GO 46075
46068: POP
// hHackChangeYourSide ; 7 :
46069: CALL 59038 0 0
46073: GO 46106
46075: LD_INT 7
46077: DOUBLE
46078: EQUAL
46079: IFTRUE 46083
46081: GO 46090
46083: POP
// hHackChangeUnitSide ; 8 :
46084: CALL 59080 0 0
46088: GO 46106
46090: LD_INT 8
46092: DOUBLE
46093: EQUAL
46094: IFTRUE 46098
46096: GO 46105
46098: POP
// hHackFog ; end ;
46099: CALL 59181 0 0
46103: GO 46106
46105: POP
// end ; end ;
46106: LD_VAR 0 7
46110: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
46111: GO 46113
46113: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46114: LD_STRING initStreamRollete();
46116: PPUSH
46117: CALL_OW 559
// InitStreamMode ;
46121: CALL 46133 0 0
// DefineStreamItems ( false ) ;
46125: LD_INT 0
46127: PPUSH
46128: CALL 46597 0 1
// end ;
46132: END
// function InitStreamMode ; begin
46133: LD_INT 0
46135: PPUSH
// streamModeActive := false ;
46136: LD_ADDR_EXP 88
46140: PUSH
46141: LD_INT 0
46143: ST_TO_ADDR
// normalCounter := 36 ;
46144: LD_ADDR_EXP 89
46148: PUSH
46149: LD_INT 36
46151: ST_TO_ADDR
// hardcoreCounter := 18 ;
46152: LD_ADDR_EXP 90
46156: PUSH
46157: LD_INT 18
46159: ST_TO_ADDR
// sRocket := false ;
46160: LD_ADDR_EXP 93
46164: PUSH
46165: LD_INT 0
46167: ST_TO_ADDR
// sSpeed := false ;
46168: LD_ADDR_EXP 92
46172: PUSH
46173: LD_INT 0
46175: ST_TO_ADDR
// sEngine := false ;
46176: LD_ADDR_EXP 94
46180: PUSH
46181: LD_INT 0
46183: ST_TO_ADDR
// sSpec := false ;
46184: LD_ADDR_EXP 91
46188: PUSH
46189: LD_INT 0
46191: ST_TO_ADDR
// sLevel := false ;
46192: LD_ADDR_EXP 95
46196: PUSH
46197: LD_INT 0
46199: ST_TO_ADDR
// sArmoury := false ;
46200: LD_ADDR_EXP 96
46204: PUSH
46205: LD_INT 0
46207: ST_TO_ADDR
// sRadar := false ;
46208: LD_ADDR_EXP 97
46212: PUSH
46213: LD_INT 0
46215: ST_TO_ADDR
// sBunker := false ;
46216: LD_ADDR_EXP 98
46220: PUSH
46221: LD_INT 0
46223: ST_TO_ADDR
// sHack := false ;
46224: LD_ADDR_EXP 99
46228: PUSH
46229: LD_INT 0
46231: ST_TO_ADDR
// sFire := false ;
46232: LD_ADDR_EXP 100
46236: PUSH
46237: LD_INT 0
46239: ST_TO_ADDR
// sRefresh := false ;
46240: LD_ADDR_EXP 101
46244: PUSH
46245: LD_INT 0
46247: ST_TO_ADDR
// sExp := false ;
46248: LD_ADDR_EXP 102
46252: PUSH
46253: LD_INT 0
46255: ST_TO_ADDR
// sDepot := false ;
46256: LD_ADDR_EXP 103
46260: PUSH
46261: LD_INT 0
46263: ST_TO_ADDR
// sFlag := false ;
46264: LD_ADDR_EXP 104
46268: PUSH
46269: LD_INT 0
46271: ST_TO_ADDR
// sKamikadze := false ;
46272: LD_ADDR_EXP 112
46276: PUSH
46277: LD_INT 0
46279: ST_TO_ADDR
// sTroll := false ;
46280: LD_ADDR_EXP 113
46284: PUSH
46285: LD_INT 0
46287: ST_TO_ADDR
// sSlow := false ;
46288: LD_ADDR_EXP 114
46292: PUSH
46293: LD_INT 0
46295: ST_TO_ADDR
// sLack := false ;
46296: LD_ADDR_EXP 115
46300: PUSH
46301: LD_INT 0
46303: ST_TO_ADDR
// sTank := false ;
46304: LD_ADDR_EXP 117
46308: PUSH
46309: LD_INT 0
46311: ST_TO_ADDR
// sRemote := false ;
46312: LD_ADDR_EXP 118
46316: PUSH
46317: LD_INT 0
46319: ST_TO_ADDR
// sPowell := false ;
46320: LD_ADDR_EXP 119
46324: PUSH
46325: LD_INT 0
46327: ST_TO_ADDR
// sTeleport := false ;
46328: LD_ADDR_EXP 122
46332: PUSH
46333: LD_INT 0
46335: ST_TO_ADDR
// sOilTower := false ;
46336: LD_ADDR_EXP 124
46340: PUSH
46341: LD_INT 0
46343: ST_TO_ADDR
// sShovel := false ;
46344: LD_ADDR_EXP 125
46348: PUSH
46349: LD_INT 0
46351: ST_TO_ADDR
// sSheik := false ;
46352: LD_ADDR_EXP 126
46356: PUSH
46357: LD_INT 0
46359: ST_TO_ADDR
// sEarthquake := false ;
46360: LD_ADDR_EXP 128
46364: PUSH
46365: LD_INT 0
46367: ST_TO_ADDR
// sAI := false ;
46368: LD_ADDR_EXP 129
46372: PUSH
46373: LD_INT 0
46375: ST_TO_ADDR
// sCargo := false ;
46376: LD_ADDR_EXP 132
46380: PUSH
46381: LD_INT 0
46383: ST_TO_ADDR
// sDLaser := false ;
46384: LD_ADDR_EXP 133
46388: PUSH
46389: LD_INT 0
46391: ST_TO_ADDR
// sExchange := false ;
46392: LD_ADDR_EXP 134
46396: PUSH
46397: LD_INT 0
46399: ST_TO_ADDR
// sFac := false ;
46400: LD_ADDR_EXP 135
46404: PUSH
46405: LD_INT 0
46407: ST_TO_ADDR
// sPower := false ;
46408: LD_ADDR_EXP 136
46412: PUSH
46413: LD_INT 0
46415: ST_TO_ADDR
// sRandom := false ;
46416: LD_ADDR_EXP 137
46420: PUSH
46421: LD_INT 0
46423: ST_TO_ADDR
// sShield := false ;
46424: LD_ADDR_EXP 138
46428: PUSH
46429: LD_INT 0
46431: ST_TO_ADDR
// sTime := false ;
46432: LD_ADDR_EXP 139
46436: PUSH
46437: LD_INT 0
46439: ST_TO_ADDR
// sTools := false ;
46440: LD_ADDR_EXP 140
46444: PUSH
46445: LD_INT 0
46447: ST_TO_ADDR
// sSold := false ;
46448: LD_ADDR_EXP 105
46452: PUSH
46453: LD_INT 0
46455: ST_TO_ADDR
// sDiff := false ;
46456: LD_ADDR_EXP 106
46460: PUSH
46461: LD_INT 0
46463: ST_TO_ADDR
// sFog := false ;
46464: LD_ADDR_EXP 109
46468: PUSH
46469: LD_INT 0
46471: ST_TO_ADDR
// sReset := false ;
46472: LD_ADDR_EXP 110
46476: PUSH
46477: LD_INT 0
46479: ST_TO_ADDR
// sSun := false ;
46480: LD_ADDR_EXP 111
46484: PUSH
46485: LD_INT 0
46487: ST_TO_ADDR
// sTiger := false ;
46488: LD_ADDR_EXP 107
46492: PUSH
46493: LD_INT 0
46495: ST_TO_ADDR
// sBomb := false ;
46496: LD_ADDR_EXP 108
46500: PUSH
46501: LD_INT 0
46503: ST_TO_ADDR
// sWound := false ;
46504: LD_ADDR_EXP 116
46508: PUSH
46509: LD_INT 0
46511: ST_TO_ADDR
// sBetray := false ;
46512: LD_ADDR_EXP 120
46516: PUSH
46517: LD_INT 0
46519: ST_TO_ADDR
// sContamin := false ;
46520: LD_ADDR_EXP 121
46524: PUSH
46525: LD_INT 0
46527: ST_TO_ADDR
// sOil := false ;
46528: LD_ADDR_EXP 123
46532: PUSH
46533: LD_INT 0
46535: ST_TO_ADDR
// sStu := false ;
46536: LD_ADDR_EXP 127
46540: PUSH
46541: LD_INT 0
46543: ST_TO_ADDR
// sBazooka := false ;
46544: LD_ADDR_EXP 130
46548: PUSH
46549: LD_INT 0
46551: ST_TO_ADDR
// sMortar := false ;
46552: LD_ADDR_EXP 131
46556: PUSH
46557: LD_INT 0
46559: ST_TO_ADDR
// sRanger := false ;
46560: LD_ADDR_EXP 141
46564: PUSH
46565: LD_INT 0
46567: ST_TO_ADDR
// sComputer := false ;
46568: LD_ADDR_EXP 142
46572: PUSH
46573: LD_INT 0
46575: ST_TO_ADDR
// s30 := false ;
46576: LD_ADDR_EXP 143
46580: PUSH
46581: LD_INT 0
46583: ST_TO_ADDR
// s60 := false ;
46584: LD_ADDR_EXP 144
46588: PUSH
46589: LD_INT 0
46591: ST_TO_ADDR
// end ;
46592: LD_VAR 0 1
46596: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
46597: LD_INT 0
46599: PPUSH
46600: PPUSH
46601: PPUSH
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
// result := [ ] ;
46606: LD_ADDR_VAR 0 2
46610: PUSH
46611: EMPTY
46612: ST_TO_ADDR
// if campaign_id = 1 then
46613: LD_OWVAR 69
46617: PUSH
46618: LD_INT 1
46620: EQUAL
46621: IFFALSE 49787
// begin case mission_number of 1 :
46623: LD_OWVAR 70
46627: PUSH
46628: LD_INT 1
46630: DOUBLE
46631: EQUAL
46632: IFTRUE 46636
46634: GO 46712
46636: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
46637: LD_ADDR_VAR 0 2
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 4
46647: PUSH
46648: LD_INT 11
46650: PUSH
46651: LD_INT 12
46653: PUSH
46654: LD_INT 15
46656: PUSH
46657: LD_INT 16
46659: PUSH
46660: LD_INT 22
46662: PUSH
46663: LD_INT 23
46665: PUSH
46666: LD_INT 26
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 101
46682: PUSH
46683: LD_INT 102
46685: PUSH
46686: LD_INT 106
46688: PUSH
46689: LD_INT 116
46691: PUSH
46692: LD_INT 117
46694: PUSH
46695: LD_INT 118
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: ST_TO_ADDR
46710: GO 49785
46712: LD_INT 2
46714: DOUBLE
46715: EQUAL
46716: IFTRUE 46720
46718: GO 46804
46720: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
46721: LD_ADDR_VAR 0 2
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: LD_INT 11
46734: PUSH
46735: LD_INT 12
46737: PUSH
46738: LD_INT 15
46740: PUSH
46741: LD_INT 16
46743: PUSH
46744: LD_INT 22
46746: PUSH
46747: LD_INT 23
46749: PUSH
46750: LD_INT 26
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 101
46766: PUSH
46767: LD_INT 102
46769: PUSH
46770: LD_INT 105
46772: PUSH
46773: LD_INT 106
46775: PUSH
46776: LD_INT 108
46778: PUSH
46779: LD_INT 116
46781: PUSH
46782: LD_INT 117
46784: PUSH
46785: LD_INT 118
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: ST_TO_ADDR
46802: GO 49785
46804: LD_INT 3
46806: DOUBLE
46807: EQUAL
46808: IFTRUE 46812
46810: GO 46900
46812: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
46813: LD_ADDR_VAR 0 2
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 4
46823: PUSH
46824: LD_INT 5
46826: PUSH
46827: LD_INT 11
46829: PUSH
46830: LD_INT 12
46832: PUSH
46833: LD_INT 15
46835: PUSH
46836: LD_INT 16
46838: PUSH
46839: LD_INT 22
46841: PUSH
46842: LD_INT 26
46844: PUSH
46845: LD_INT 36
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 101
46862: PUSH
46863: LD_INT 102
46865: PUSH
46866: LD_INT 105
46868: PUSH
46869: LD_INT 106
46871: PUSH
46872: LD_INT 108
46874: PUSH
46875: LD_INT 116
46877: PUSH
46878: LD_INT 117
46880: PUSH
46881: LD_INT 118
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: ST_TO_ADDR
46898: GO 49785
46900: LD_INT 4
46902: DOUBLE
46903: EQUAL
46904: IFTRUE 46908
46906: GO 47004
46908: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46909: LD_ADDR_VAR 0 2
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 4
46919: PUSH
46920: LD_INT 5
46922: PUSH
46923: LD_INT 8
46925: PUSH
46926: LD_INT 11
46928: PUSH
46929: LD_INT 12
46931: PUSH
46932: LD_INT 15
46934: PUSH
46935: LD_INT 16
46937: PUSH
46938: LD_INT 22
46940: PUSH
46941: LD_INT 23
46943: PUSH
46944: LD_INT 26
46946: PUSH
46947: LD_INT 36
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 101
46966: PUSH
46967: LD_INT 102
46969: PUSH
46970: LD_INT 105
46972: PUSH
46973: LD_INT 106
46975: PUSH
46976: LD_INT 108
46978: PUSH
46979: LD_INT 116
46981: PUSH
46982: LD_INT 117
46984: PUSH
46985: LD_INT 118
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: ST_TO_ADDR
47002: GO 49785
47004: LD_INT 5
47006: DOUBLE
47007: EQUAL
47008: IFTRUE 47012
47010: GO 47124
47012: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47013: LD_ADDR_VAR 0 2
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 4
47023: PUSH
47024: LD_INT 5
47026: PUSH
47027: LD_INT 6
47029: PUSH
47030: LD_INT 8
47032: PUSH
47033: LD_INT 11
47035: PUSH
47036: LD_INT 12
47038: PUSH
47039: LD_INT 15
47041: PUSH
47042: LD_INT 16
47044: PUSH
47045: LD_INT 22
47047: PUSH
47048: LD_INT 23
47050: PUSH
47051: LD_INT 25
47053: PUSH
47054: LD_INT 26
47056: PUSH
47057: LD_INT 36
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 101
47078: PUSH
47079: LD_INT 102
47081: PUSH
47082: LD_INT 105
47084: PUSH
47085: LD_INT 106
47087: PUSH
47088: LD_INT 108
47090: PUSH
47091: LD_INT 109
47093: PUSH
47094: LD_INT 112
47096: PUSH
47097: LD_INT 116
47099: PUSH
47100: LD_INT 117
47102: PUSH
47103: LD_INT 118
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: ST_TO_ADDR
47122: GO 49785
47124: LD_INT 6
47126: DOUBLE
47127: EQUAL
47128: IFTRUE 47132
47130: GO 47264
47132: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47133: LD_ADDR_VAR 0 2
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 4
47143: PUSH
47144: LD_INT 5
47146: PUSH
47147: LD_INT 6
47149: PUSH
47150: LD_INT 8
47152: PUSH
47153: LD_INT 11
47155: PUSH
47156: LD_INT 12
47158: PUSH
47159: LD_INT 15
47161: PUSH
47162: LD_INT 16
47164: PUSH
47165: LD_INT 20
47167: PUSH
47168: LD_INT 21
47170: PUSH
47171: LD_INT 22
47173: PUSH
47174: LD_INT 23
47176: PUSH
47177: LD_INT 25
47179: PUSH
47180: LD_INT 26
47182: PUSH
47183: LD_INT 30
47185: PUSH
47186: LD_INT 31
47188: PUSH
47189: LD_INT 32
47191: PUSH
47192: LD_INT 36
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 101
47218: PUSH
47219: LD_INT 102
47221: PUSH
47222: LD_INT 105
47224: PUSH
47225: LD_INT 106
47227: PUSH
47228: LD_INT 108
47230: PUSH
47231: LD_INT 109
47233: PUSH
47234: LD_INT 112
47236: PUSH
47237: LD_INT 116
47239: PUSH
47240: LD_INT 117
47242: PUSH
47243: LD_INT 118
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: ST_TO_ADDR
47262: GO 49785
47264: LD_INT 7
47266: DOUBLE
47267: EQUAL
47268: IFTRUE 47272
47270: GO 47384
47272: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47273: LD_ADDR_VAR 0 2
47277: PUSH
47278: LD_INT 2
47280: PUSH
47281: LD_INT 4
47283: PUSH
47284: LD_INT 5
47286: PUSH
47287: LD_INT 7
47289: PUSH
47290: LD_INT 11
47292: PUSH
47293: LD_INT 12
47295: PUSH
47296: LD_INT 15
47298: PUSH
47299: LD_INT 16
47301: PUSH
47302: LD_INT 20
47304: PUSH
47305: LD_INT 21
47307: PUSH
47308: LD_INT 22
47310: PUSH
47311: LD_INT 23
47313: PUSH
47314: LD_INT 25
47316: PUSH
47317: LD_INT 26
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 101
47338: PUSH
47339: LD_INT 102
47341: PUSH
47342: LD_INT 103
47344: PUSH
47345: LD_INT 105
47347: PUSH
47348: LD_INT 106
47350: PUSH
47351: LD_INT 108
47353: PUSH
47354: LD_INT 112
47356: PUSH
47357: LD_INT 116
47359: PUSH
47360: LD_INT 117
47362: PUSH
47363: LD_INT 118
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: ST_TO_ADDR
47382: GO 49785
47384: LD_INT 8
47386: DOUBLE
47387: EQUAL
47388: IFTRUE 47392
47390: GO 47532
47392: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47393: LD_ADDR_VAR 0 2
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 4
47403: PUSH
47404: LD_INT 5
47406: PUSH
47407: LD_INT 6
47409: PUSH
47410: LD_INT 7
47412: PUSH
47413: LD_INT 8
47415: PUSH
47416: LD_INT 11
47418: PUSH
47419: LD_INT 12
47421: PUSH
47422: LD_INT 15
47424: PUSH
47425: LD_INT 16
47427: PUSH
47428: LD_INT 20
47430: PUSH
47431: LD_INT 21
47433: PUSH
47434: LD_INT 22
47436: PUSH
47437: LD_INT 23
47439: PUSH
47440: LD_INT 25
47442: PUSH
47443: LD_INT 26
47445: PUSH
47446: LD_INT 30
47448: PUSH
47449: LD_INT 31
47451: PUSH
47452: LD_INT 32
47454: PUSH
47455: LD_INT 36
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 101
47482: PUSH
47483: LD_INT 102
47485: PUSH
47486: LD_INT 103
47488: PUSH
47489: LD_INT 105
47491: PUSH
47492: LD_INT 106
47494: PUSH
47495: LD_INT 108
47497: PUSH
47498: LD_INT 109
47500: PUSH
47501: LD_INT 112
47503: PUSH
47504: LD_INT 116
47506: PUSH
47507: LD_INT 117
47509: PUSH
47510: LD_INT 118
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: ST_TO_ADDR
47530: GO 49785
47532: LD_INT 9
47534: DOUBLE
47535: EQUAL
47536: IFTRUE 47540
47538: GO 47688
47540: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
47541: LD_ADDR_VAR 0 2
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 4
47551: PUSH
47552: LD_INT 5
47554: PUSH
47555: LD_INT 6
47557: PUSH
47558: LD_INT 7
47560: PUSH
47561: LD_INT 8
47563: PUSH
47564: LD_INT 11
47566: PUSH
47567: LD_INT 12
47569: PUSH
47570: LD_INT 15
47572: PUSH
47573: LD_INT 16
47575: PUSH
47576: LD_INT 20
47578: PUSH
47579: LD_INT 21
47581: PUSH
47582: LD_INT 22
47584: PUSH
47585: LD_INT 23
47587: PUSH
47588: LD_INT 25
47590: PUSH
47591: LD_INT 26
47593: PUSH
47594: LD_INT 28
47596: PUSH
47597: LD_INT 30
47599: PUSH
47600: LD_INT 31
47602: PUSH
47603: LD_INT 32
47605: PUSH
47606: LD_INT 36
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 101
47634: PUSH
47635: LD_INT 102
47637: PUSH
47638: LD_INT 103
47640: PUSH
47641: LD_INT 105
47643: PUSH
47644: LD_INT 106
47646: PUSH
47647: LD_INT 108
47649: PUSH
47650: LD_INT 109
47652: PUSH
47653: LD_INT 112
47655: PUSH
47656: LD_INT 114
47658: PUSH
47659: LD_INT 116
47661: PUSH
47662: LD_INT 117
47664: PUSH
47665: LD_INT 118
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: ST_TO_ADDR
47686: GO 49785
47688: LD_INT 10
47690: DOUBLE
47691: EQUAL
47692: IFTRUE 47696
47694: GO 47892
47696: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
47697: LD_ADDR_VAR 0 2
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 4
47707: PUSH
47708: LD_INT 5
47710: PUSH
47711: LD_INT 6
47713: PUSH
47714: LD_INT 7
47716: PUSH
47717: LD_INT 8
47719: PUSH
47720: LD_INT 9
47722: PUSH
47723: LD_INT 10
47725: PUSH
47726: LD_INT 11
47728: PUSH
47729: LD_INT 12
47731: PUSH
47732: LD_INT 13
47734: PUSH
47735: LD_INT 14
47737: PUSH
47738: LD_INT 15
47740: PUSH
47741: LD_INT 16
47743: PUSH
47744: LD_INT 17
47746: PUSH
47747: LD_INT 18
47749: PUSH
47750: LD_INT 19
47752: PUSH
47753: LD_INT 20
47755: PUSH
47756: LD_INT 21
47758: PUSH
47759: LD_INT 22
47761: PUSH
47762: LD_INT 23
47764: PUSH
47765: LD_INT 24
47767: PUSH
47768: LD_INT 25
47770: PUSH
47771: LD_INT 26
47773: PUSH
47774: LD_INT 28
47776: PUSH
47777: LD_INT 30
47779: PUSH
47780: LD_INT 31
47782: PUSH
47783: LD_INT 32
47785: PUSH
47786: LD_INT 36
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 101
47822: PUSH
47823: LD_INT 102
47825: PUSH
47826: LD_INT 103
47828: PUSH
47829: LD_INT 104
47831: PUSH
47832: LD_INT 105
47834: PUSH
47835: LD_INT 106
47837: PUSH
47838: LD_INT 107
47840: PUSH
47841: LD_INT 108
47843: PUSH
47844: LD_INT 109
47846: PUSH
47847: LD_INT 110
47849: PUSH
47850: LD_INT 111
47852: PUSH
47853: LD_INT 112
47855: PUSH
47856: LD_INT 114
47858: PUSH
47859: LD_INT 116
47861: PUSH
47862: LD_INT 117
47864: PUSH
47865: LD_INT 118
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: ST_TO_ADDR
47890: GO 49785
47892: LD_INT 11
47894: DOUBLE
47895: EQUAL
47896: IFTRUE 47900
47898: GO 48104
47900: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47901: LD_ADDR_VAR 0 2
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 3
47911: PUSH
47912: LD_INT 4
47914: PUSH
47915: LD_INT 5
47917: PUSH
47918: LD_INT 6
47920: PUSH
47921: LD_INT 7
47923: PUSH
47924: LD_INT 8
47926: PUSH
47927: LD_INT 9
47929: PUSH
47930: LD_INT 10
47932: PUSH
47933: LD_INT 11
47935: PUSH
47936: LD_INT 12
47938: PUSH
47939: LD_INT 13
47941: PUSH
47942: LD_INT 14
47944: PUSH
47945: LD_INT 15
47947: PUSH
47948: LD_INT 16
47950: PUSH
47951: LD_INT 17
47953: PUSH
47954: LD_INT 18
47956: PUSH
47957: LD_INT 19
47959: PUSH
47960: LD_INT 20
47962: PUSH
47963: LD_INT 21
47965: PUSH
47966: LD_INT 22
47968: PUSH
47969: LD_INT 23
47971: PUSH
47972: LD_INT 24
47974: PUSH
47975: LD_INT 25
47977: PUSH
47978: LD_INT 26
47980: PUSH
47981: LD_INT 28
47983: PUSH
47984: LD_INT 30
47986: PUSH
47987: LD_INT 31
47989: PUSH
47990: LD_INT 32
47992: PUSH
47993: LD_INT 34
47995: PUSH
47996: LD_INT 36
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 101
48034: PUSH
48035: LD_INT 102
48037: PUSH
48038: LD_INT 103
48040: PUSH
48041: LD_INT 104
48043: PUSH
48044: LD_INT 105
48046: PUSH
48047: LD_INT 106
48049: PUSH
48050: LD_INT 107
48052: PUSH
48053: LD_INT 108
48055: PUSH
48056: LD_INT 109
48058: PUSH
48059: LD_INT 110
48061: PUSH
48062: LD_INT 111
48064: PUSH
48065: LD_INT 112
48067: PUSH
48068: LD_INT 114
48070: PUSH
48071: LD_INT 116
48073: PUSH
48074: LD_INT 117
48076: PUSH
48077: LD_INT 118
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: ST_TO_ADDR
48102: GO 49785
48104: LD_INT 12
48106: DOUBLE
48107: EQUAL
48108: IFTRUE 48112
48110: GO 48332
48112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48113: LD_ADDR_VAR 0 2
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: LD_INT 3
48126: PUSH
48127: LD_INT 4
48129: PUSH
48130: LD_INT 5
48132: PUSH
48133: LD_INT 6
48135: PUSH
48136: LD_INT 7
48138: PUSH
48139: LD_INT 8
48141: PUSH
48142: LD_INT 9
48144: PUSH
48145: LD_INT 10
48147: PUSH
48148: LD_INT 11
48150: PUSH
48151: LD_INT 12
48153: PUSH
48154: LD_INT 13
48156: PUSH
48157: LD_INT 14
48159: PUSH
48160: LD_INT 15
48162: PUSH
48163: LD_INT 16
48165: PUSH
48166: LD_INT 17
48168: PUSH
48169: LD_INT 18
48171: PUSH
48172: LD_INT 19
48174: PUSH
48175: LD_INT 20
48177: PUSH
48178: LD_INT 21
48180: PUSH
48181: LD_INT 22
48183: PUSH
48184: LD_INT 23
48186: PUSH
48187: LD_INT 24
48189: PUSH
48190: LD_INT 25
48192: PUSH
48193: LD_INT 26
48195: PUSH
48196: LD_INT 27
48198: PUSH
48199: LD_INT 28
48201: PUSH
48202: LD_INT 30
48204: PUSH
48205: LD_INT 31
48207: PUSH
48208: LD_INT 32
48210: PUSH
48211: LD_INT 33
48213: PUSH
48214: LD_INT 34
48216: PUSH
48217: LD_INT 36
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 101
48258: PUSH
48259: LD_INT 102
48261: PUSH
48262: LD_INT 103
48264: PUSH
48265: LD_INT 104
48267: PUSH
48268: LD_INT 105
48270: PUSH
48271: LD_INT 106
48273: PUSH
48274: LD_INT 107
48276: PUSH
48277: LD_INT 108
48279: PUSH
48280: LD_INT 109
48282: PUSH
48283: LD_INT 110
48285: PUSH
48286: LD_INT 111
48288: PUSH
48289: LD_INT 112
48291: PUSH
48292: LD_INT 113
48294: PUSH
48295: LD_INT 114
48297: PUSH
48298: LD_INT 116
48300: PUSH
48301: LD_INT 117
48303: PUSH
48304: LD_INT 118
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: ST_TO_ADDR
48330: GO 49785
48332: LD_INT 13
48334: DOUBLE
48335: EQUAL
48336: IFTRUE 48340
48338: GO 48548
48340: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48341: LD_ADDR_VAR 0 2
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: LD_INT 4
48357: PUSH
48358: LD_INT 5
48360: PUSH
48361: LD_INT 8
48363: PUSH
48364: LD_INT 9
48366: PUSH
48367: LD_INT 10
48369: PUSH
48370: LD_INT 11
48372: PUSH
48373: LD_INT 12
48375: PUSH
48376: LD_INT 14
48378: PUSH
48379: LD_INT 15
48381: PUSH
48382: LD_INT 16
48384: PUSH
48385: LD_INT 17
48387: PUSH
48388: LD_INT 18
48390: PUSH
48391: LD_INT 19
48393: PUSH
48394: LD_INT 20
48396: PUSH
48397: LD_INT 21
48399: PUSH
48400: LD_INT 22
48402: PUSH
48403: LD_INT 23
48405: PUSH
48406: LD_INT 24
48408: PUSH
48409: LD_INT 25
48411: PUSH
48412: LD_INT 26
48414: PUSH
48415: LD_INT 27
48417: PUSH
48418: LD_INT 28
48420: PUSH
48421: LD_INT 30
48423: PUSH
48424: LD_INT 31
48426: PUSH
48427: LD_INT 32
48429: PUSH
48430: LD_INT 33
48432: PUSH
48433: LD_INT 34
48435: PUSH
48436: LD_INT 36
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 101
48474: PUSH
48475: LD_INT 102
48477: PUSH
48478: LD_INT 103
48480: PUSH
48481: LD_INT 104
48483: PUSH
48484: LD_INT 105
48486: PUSH
48487: LD_INT 106
48489: PUSH
48490: LD_INT 107
48492: PUSH
48493: LD_INT 108
48495: PUSH
48496: LD_INT 109
48498: PUSH
48499: LD_INT 110
48501: PUSH
48502: LD_INT 111
48504: PUSH
48505: LD_INT 112
48507: PUSH
48508: LD_INT 113
48510: PUSH
48511: LD_INT 114
48513: PUSH
48514: LD_INT 116
48516: PUSH
48517: LD_INT 117
48519: PUSH
48520: LD_INT 118
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: ST_TO_ADDR
48546: GO 49785
48548: LD_INT 14
48550: DOUBLE
48551: EQUAL
48552: IFTRUE 48556
48554: GO 48780
48556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
48557: LD_ADDR_VAR 0 2
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 3
48570: PUSH
48571: LD_INT 4
48573: PUSH
48574: LD_INT 5
48576: PUSH
48577: LD_INT 6
48579: PUSH
48580: LD_INT 7
48582: PUSH
48583: LD_INT 8
48585: PUSH
48586: LD_INT 9
48588: PUSH
48589: LD_INT 10
48591: PUSH
48592: LD_INT 11
48594: PUSH
48595: LD_INT 12
48597: PUSH
48598: LD_INT 13
48600: PUSH
48601: LD_INT 14
48603: PUSH
48604: LD_INT 15
48606: PUSH
48607: LD_INT 16
48609: PUSH
48610: LD_INT 17
48612: PUSH
48613: LD_INT 18
48615: PUSH
48616: LD_INT 19
48618: PUSH
48619: LD_INT 20
48621: PUSH
48622: LD_INT 21
48624: PUSH
48625: LD_INT 22
48627: PUSH
48628: LD_INT 23
48630: PUSH
48631: LD_INT 24
48633: PUSH
48634: LD_INT 25
48636: PUSH
48637: LD_INT 26
48639: PUSH
48640: LD_INT 27
48642: PUSH
48643: LD_INT 28
48645: PUSH
48646: LD_INT 29
48648: PUSH
48649: LD_INT 30
48651: PUSH
48652: LD_INT 31
48654: PUSH
48655: LD_INT 32
48657: PUSH
48658: LD_INT 33
48660: PUSH
48661: LD_INT 34
48663: PUSH
48664: LD_INT 36
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 101
48706: PUSH
48707: LD_INT 102
48709: PUSH
48710: LD_INT 103
48712: PUSH
48713: LD_INT 104
48715: PUSH
48716: LD_INT 105
48718: PUSH
48719: LD_INT 106
48721: PUSH
48722: LD_INT 107
48724: PUSH
48725: LD_INT 108
48727: PUSH
48728: LD_INT 109
48730: PUSH
48731: LD_INT 110
48733: PUSH
48734: LD_INT 111
48736: PUSH
48737: LD_INT 112
48739: PUSH
48740: LD_INT 113
48742: PUSH
48743: LD_INT 114
48745: PUSH
48746: LD_INT 116
48748: PUSH
48749: LD_INT 117
48751: PUSH
48752: LD_INT 118
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: ST_TO_ADDR
48778: GO 49785
48780: LD_INT 15
48782: DOUBLE
48783: EQUAL
48784: IFTRUE 48788
48786: GO 49012
48788: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
48789: LD_ADDR_VAR 0 2
48793: PUSH
48794: LD_INT 1
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 4
48805: PUSH
48806: LD_INT 5
48808: PUSH
48809: LD_INT 6
48811: PUSH
48812: LD_INT 7
48814: PUSH
48815: LD_INT 8
48817: PUSH
48818: LD_INT 9
48820: PUSH
48821: LD_INT 10
48823: PUSH
48824: LD_INT 11
48826: PUSH
48827: LD_INT 12
48829: PUSH
48830: LD_INT 13
48832: PUSH
48833: LD_INT 14
48835: PUSH
48836: LD_INT 15
48838: PUSH
48839: LD_INT 16
48841: PUSH
48842: LD_INT 17
48844: PUSH
48845: LD_INT 18
48847: PUSH
48848: LD_INT 19
48850: PUSH
48851: LD_INT 20
48853: PUSH
48854: LD_INT 21
48856: PUSH
48857: LD_INT 22
48859: PUSH
48860: LD_INT 23
48862: PUSH
48863: LD_INT 24
48865: PUSH
48866: LD_INT 25
48868: PUSH
48869: LD_INT 26
48871: PUSH
48872: LD_INT 27
48874: PUSH
48875: LD_INT 28
48877: PUSH
48878: LD_INT 29
48880: PUSH
48881: LD_INT 30
48883: PUSH
48884: LD_INT 31
48886: PUSH
48887: LD_INT 32
48889: PUSH
48890: LD_INT 33
48892: PUSH
48893: LD_INT 34
48895: PUSH
48896: LD_INT 36
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 101
48938: PUSH
48939: LD_INT 102
48941: PUSH
48942: LD_INT 103
48944: PUSH
48945: LD_INT 104
48947: PUSH
48948: LD_INT 105
48950: PUSH
48951: LD_INT 106
48953: PUSH
48954: LD_INT 107
48956: PUSH
48957: LD_INT 108
48959: PUSH
48960: LD_INT 109
48962: PUSH
48963: LD_INT 110
48965: PUSH
48966: LD_INT 111
48968: PUSH
48969: LD_INT 112
48971: PUSH
48972: LD_INT 113
48974: PUSH
48975: LD_INT 114
48977: PUSH
48978: LD_INT 116
48980: PUSH
48981: LD_INT 117
48983: PUSH
48984: LD_INT 118
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: ST_TO_ADDR
49010: GO 49785
49012: LD_INT 16
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49020
49018: GO 49156
49020: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49021: LD_ADDR_VAR 0 2
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 4
49031: PUSH
49032: LD_INT 5
49034: PUSH
49035: LD_INT 7
49037: PUSH
49038: LD_INT 11
49040: PUSH
49041: LD_INT 12
49043: PUSH
49044: LD_INT 15
49046: PUSH
49047: LD_INT 16
49049: PUSH
49050: LD_INT 20
49052: PUSH
49053: LD_INT 21
49055: PUSH
49056: LD_INT 22
49058: PUSH
49059: LD_INT 23
49061: PUSH
49062: LD_INT 25
49064: PUSH
49065: LD_INT 26
49067: PUSH
49068: LD_INT 30
49070: PUSH
49071: LD_INT 31
49073: PUSH
49074: LD_INT 32
49076: PUSH
49077: LD_INT 33
49079: PUSH
49080: LD_INT 34
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 101
49106: PUSH
49107: LD_INT 102
49109: PUSH
49110: LD_INT 103
49112: PUSH
49113: LD_INT 106
49115: PUSH
49116: LD_INT 108
49118: PUSH
49119: LD_INT 112
49121: PUSH
49122: LD_INT 113
49124: PUSH
49125: LD_INT 114
49127: PUSH
49128: LD_INT 116
49130: PUSH
49131: LD_INT 117
49133: PUSH
49134: LD_INT 118
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: ST_TO_ADDR
49154: GO 49785
49156: LD_INT 17
49158: DOUBLE
49159: EQUAL
49160: IFTRUE 49164
49162: GO 49388
49164: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49165: LD_ADDR_VAR 0 2
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 3
49178: PUSH
49179: LD_INT 4
49181: PUSH
49182: LD_INT 5
49184: PUSH
49185: LD_INT 6
49187: PUSH
49188: LD_INT 7
49190: PUSH
49191: LD_INT 8
49193: PUSH
49194: LD_INT 9
49196: PUSH
49197: LD_INT 10
49199: PUSH
49200: LD_INT 11
49202: PUSH
49203: LD_INT 12
49205: PUSH
49206: LD_INT 13
49208: PUSH
49209: LD_INT 14
49211: PUSH
49212: LD_INT 15
49214: PUSH
49215: LD_INT 16
49217: PUSH
49218: LD_INT 17
49220: PUSH
49221: LD_INT 18
49223: PUSH
49224: LD_INT 19
49226: PUSH
49227: LD_INT 20
49229: PUSH
49230: LD_INT 21
49232: PUSH
49233: LD_INT 22
49235: PUSH
49236: LD_INT 23
49238: PUSH
49239: LD_INT 24
49241: PUSH
49242: LD_INT 25
49244: PUSH
49245: LD_INT 26
49247: PUSH
49248: LD_INT 27
49250: PUSH
49251: LD_INT 28
49253: PUSH
49254: LD_INT 29
49256: PUSH
49257: LD_INT 30
49259: PUSH
49260: LD_INT 31
49262: PUSH
49263: LD_INT 32
49265: PUSH
49266: LD_INT 33
49268: PUSH
49269: LD_INT 34
49271: PUSH
49272: LD_INT 36
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 101
49314: PUSH
49315: LD_INT 102
49317: PUSH
49318: LD_INT 103
49320: PUSH
49321: LD_INT 104
49323: PUSH
49324: LD_INT 105
49326: PUSH
49327: LD_INT 106
49329: PUSH
49330: LD_INT 107
49332: PUSH
49333: LD_INT 108
49335: PUSH
49336: LD_INT 109
49338: PUSH
49339: LD_INT 110
49341: PUSH
49342: LD_INT 111
49344: PUSH
49345: LD_INT 112
49347: PUSH
49348: LD_INT 113
49350: PUSH
49351: LD_INT 114
49353: PUSH
49354: LD_INT 116
49356: PUSH
49357: LD_INT 117
49359: PUSH
49360: LD_INT 118
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: ST_TO_ADDR
49386: GO 49785
49388: LD_INT 18
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49396
49394: GO 49544
49396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49397: LD_ADDR_VAR 0 2
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: LD_INT 4
49407: PUSH
49408: LD_INT 5
49410: PUSH
49411: LD_INT 7
49413: PUSH
49414: LD_INT 11
49416: PUSH
49417: LD_INT 12
49419: PUSH
49420: LD_INT 15
49422: PUSH
49423: LD_INT 16
49425: PUSH
49426: LD_INT 20
49428: PUSH
49429: LD_INT 21
49431: PUSH
49432: LD_INT 22
49434: PUSH
49435: LD_INT 23
49437: PUSH
49438: LD_INT 25
49440: PUSH
49441: LD_INT 26
49443: PUSH
49444: LD_INT 30
49446: PUSH
49447: LD_INT 31
49449: PUSH
49450: LD_INT 32
49452: PUSH
49453: LD_INT 33
49455: PUSH
49456: LD_INT 34
49458: PUSH
49459: LD_INT 35
49461: PUSH
49462: LD_INT 36
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 101
49490: PUSH
49491: LD_INT 102
49493: PUSH
49494: LD_INT 103
49496: PUSH
49497: LD_INT 106
49499: PUSH
49500: LD_INT 108
49502: PUSH
49503: LD_INT 112
49505: PUSH
49506: LD_INT 113
49508: PUSH
49509: LD_INT 114
49511: PUSH
49512: LD_INT 115
49514: PUSH
49515: LD_INT 116
49517: PUSH
49518: LD_INT 117
49520: PUSH
49521: LD_INT 118
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: ST_TO_ADDR
49542: GO 49785
49544: LD_INT 19
49546: DOUBLE
49547: EQUAL
49548: IFTRUE 49552
49550: GO 49784
49552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
49553: LD_ADDR_VAR 0 2
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 4
49569: PUSH
49570: LD_INT 5
49572: PUSH
49573: LD_INT 6
49575: PUSH
49576: LD_INT 7
49578: PUSH
49579: LD_INT 8
49581: PUSH
49582: LD_INT 9
49584: PUSH
49585: LD_INT 10
49587: PUSH
49588: LD_INT 11
49590: PUSH
49591: LD_INT 12
49593: PUSH
49594: LD_INT 13
49596: PUSH
49597: LD_INT 14
49599: PUSH
49600: LD_INT 15
49602: PUSH
49603: LD_INT 16
49605: PUSH
49606: LD_INT 17
49608: PUSH
49609: LD_INT 18
49611: PUSH
49612: LD_INT 19
49614: PUSH
49615: LD_INT 20
49617: PUSH
49618: LD_INT 21
49620: PUSH
49621: LD_INT 22
49623: PUSH
49624: LD_INT 23
49626: PUSH
49627: LD_INT 24
49629: PUSH
49630: LD_INT 25
49632: PUSH
49633: LD_INT 26
49635: PUSH
49636: LD_INT 27
49638: PUSH
49639: LD_INT 28
49641: PUSH
49642: LD_INT 29
49644: PUSH
49645: LD_INT 30
49647: PUSH
49648: LD_INT 31
49650: PUSH
49651: LD_INT 32
49653: PUSH
49654: LD_INT 33
49656: PUSH
49657: LD_INT 34
49659: PUSH
49660: LD_INT 35
49662: PUSH
49663: LD_INT 36
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 101
49706: PUSH
49707: LD_INT 102
49709: PUSH
49710: LD_INT 103
49712: PUSH
49713: LD_INT 104
49715: PUSH
49716: LD_INT 105
49718: PUSH
49719: LD_INT 106
49721: PUSH
49722: LD_INT 107
49724: PUSH
49725: LD_INT 108
49727: PUSH
49728: LD_INT 109
49730: PUSH
49731: LD_INT 110
49733: PUSH
49734: LD_INT 111
49736: PUSH
49737: LD_INT 112
49739: PUSH
49740: LD_INT 113
49742: PUSH
49743: LD_INT 114
49745: PUSH
49746: LD_INT 115
49748: PUSH
49749: LD_INT 116
49751: PUSH
49752: LD_INT 117
49754: PUSH
49755: LD_INT 118
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: ST_TO_ADDR
49782: GO 49785
49784: POP
// end else
49785: GO 50016
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
49787: LD_ADDR_VAR 0 2
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 4
49803: PUSH
49804: LD_INT 5
49806: PUSH
49807: LD_INT 6
49809: PUSH
49810: LD_INT 7
49812: PUSH
49813: LD_INT 8
49815: PUSH
49816: LD_INT 9
49818: PUSH
49819: LD_INT 10
49821: PUSH
49822: LD_INT 11
49824: PUSH
49825: LD_INT 12
49827: PUSH
49828: LD_INT 13
49830: PUSH
49831: LD_INT 14
49833: PUSH
49834: LD_INT 15
49836: PUSH
49837: LD_INT 16
49839: PUSH
49840: LD_INT 17
49842: PUSH
49843: LD_INT 18
49845: PUSH
49846: LD_INT 19
49848: PUSH
49849: LD_INT 20
49851: PUSH
49852: LD_INT 21
49854: PUSH
49855: LD_INT 22
49857: PUSH
49858: LD_INT 23
49860: PUSH
49861: LD_INT 24
49863: PUSH
49864: LD_INT 25
49866: PUSH
49867: LD_INT 26
49869: PUSH
49870: LD_INT 27
49872: PUSH
49873: LD_INT 28
49875: PUSH
49876: LD_INT 29
49878: PUSH
49879: LD_INT 30
49881: PUSH
49882: LD_INT 31
49884: PUSH
49885: LD_INT 32
49887: PUSH
49888: LD_INT 33
49890: PUSH
49891: LD_INT 34
49893: PUSH
49894: LD_INT 35
49896: PUSH
49897: LD_INT 36
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 101
49940: PUSH
49941: LD_INT 102
49943: PUSH
49944: LD_INT 103
49946: PUSH
49947: LD_INT 104
49949: PUSH
49950: LD_INT 105
49952: PUSH
49953: LD_INT 106
49955: PUSH
49956: LD_INT 107
49958: PUSH
49959: LD_INT 108
49961: PUSH
49962: LD_INT 109
49964: PUSH
49965: LD_INT 110
49967: PUSH
49968: LD_INT 111
49970: PUSH
49971: LD_INT 112
49973: PUSH
49974: LD_INT 113
49976: PUSH
49977: LD_INT 114
49979: PUSH
49980: LD_INT 115
49982: PUSH
49983: LD_INT 116
49985: PUSH
49986: LD_INT 117
49988: PUSH
49989: LD_INT 118
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// if result then
50016: LD_VAR 0 2
50020: IFFALSE 50806
// begin normal :=  ;
50022: LD_ADDR_VAR 0 5
50026: PUSH
50027: LD_STRING 
50029: ST_TO_ADDR
// hardcore :=  ;
50030: LD_ADDR_VAR 0 6
50034: PUSH
50035: LD_STRING 
50037: ST_TO_ADDR
// active :=  ;
50038: LD_ADDR_VAR 0 7
50042: PUSH
50043: LD_STRING 
50045: ST_TO_ADDR
// for i = 1 to normalCounter do
50046: LD_ADDR_VAR 0 8
50050: PUSH
50051: DOUBLE
50052: LD_INT 1
50054: DEC
50055: ST_TO_ADDR
50056: LD_EXP 89
50060: PUSH
50061: FOR_TO
50062: IFFALSE 50163
// begin tmp := 0 ;
50064: LD_ADDR_VAR 0 3
50068: PUSH
50069: LD_STRING 0
50071: ST_TO_ADDR
// if result [ 1 ] then
50072: LD_VAR 0 2
50076: PUSH
50077: LD_INT 1
50079: ARRAY
50080: IFFALSE 50145
// if result [ 1 ] [ 1 ] = i then
50082: LD_VAR 0 2
50086: PUSH
50087: LD_INT 1
50089: ARRAY
50090: PUSH
50091: LD_INT 1
50093: ARRAY
50094: PUSH
50095: LD_VAR 0 8
50099: EQUAL
50100: IFFALSE 50145
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50102: LD_ADDR_VAR 0 2
50106: PUSH
50107: LD_VAR 0 2
50111: PPUSH
50112: LD_INT 1
50114: PPUSH
50115: LD_VAR 0 2
50119: PUSH
50120: LD_INT 1
50122: ARRAY
50123: PPUSH
50124: LD_INT 1
50126: PPUSH
50127: CALL_OW 3
50131: PPUSH
50132: CALL_OW 1
50136: ST_TO_ADDR
// tmp := 1 ;
50137: LD_ADDR_VAR 0 3
50141: PUSH
50142: LD_STRING 1
50144: ST_TO_ADDR
// end ; normal := normal & tmp ;
50145: LD_ADDR_VAR 0 5
50149: PUSH
50150: LD_VAR 0 5
50154: PUSH
50155: LD_VAR 0 3
50159: STR
50160: ST_TO_ADDR
// end ;
50161: GO 50061
50163: POP
50164: POP
// for i = 1 to hardcoreCounter do
50165: LD_ADDR_VAR 0 8
50169: PUSH
50170: DOUBLE
50171: LD_INT 1
50173: DEC
50174: ST_TO_ADDR
50175: LD_EXP 90
50179: PUSH
50180: FOR_TO
50181: IFFALSE 50286
// begin tmp := 0 ;
50183: LD_ADDR_VAR 0 3
50187: PUSH
50188: LD_STRING 0
50190: ST_TO_ADDR
// if result [ 2 ] then
50191: LD_VAR 0 2
50195: PUSH
50196: LD_INT 2
50198: ARRAY
50199: IFFALSE 50268
// if result [ 2 ] [ 1 ] = 100 + i then
50201: LD_VAR 0 2
50205: PUSH
50206: LD_INT 2
50208: ARRAY
50209: PUSH
50210: LD_INT 1
50212: ARRAY
50213: PUSH
50214: LD_INT 100
50216: PUSH
50217: LD_VAR 0 8
50221: PLUS
50222: EQUAL
50223: IFFALSE 50268
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50225: LD_ADDR_VAR 0 2
50229: PUSH
50230: LD_VAR 0 2
50234: PPUSH
50235: LD_INT 2
50237: PPUSH
50238: LD_VAR 0 2
50242: PUSH
50243: LD_INT 2
50245: ARRAY
50246: PPUSH
50247: LD_INT 1
50249: PPUSH
50250: CALL_OW 3
50254: PPUSH
50255: CALL_OW 1
50259: ST_TO_ADDR
// tmp := 1 ;
50260: LD_ADDR_VAR 0 3
50264: PUSH
50265: LD_STRING 1
50267: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50268: LD_ADDR_VAR 0 6
50272: PUSH
50273: LD_VAR 0 6
50277: PUSH
50278: LD_VAR 0 3
50282: STR
50283: ST_TO_ADDR
// end ;
50284: GO 50180
50286: POP
50287: POP
// if isGameLoad then
50288: LD_VAR 0 1
50292: IFFALSE 50767
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50294: LD_ADDR_VAR 0 4
50298: PUSH
50299: LD_EXP 93
50303: PUSH
50304: LD_EXP 92
50308: PUSH
50309: LD_EXP 94
50313: PUSH
50314: LD_EXP 91
50318: PUSH
50319: LD_EXP 95
50323: PUSH
50324: LD_EXP 96
50328: PUSH
50329: LD_EXP 97
50333: PUSH
50334: LD_EXP 98
50338: PUSH
50339: LD_EXP 99
50343: PUSH
50344: LD_EXP 100
50348: PUSH
50349: LD_EXP 101
50353: PUSH
50354: LD_EXP 102
50358: PUSH
50359: LD_EXP 103
50363: PUSH
50364: LD_EXP 104
50368: PUSH
50369: LD_EXP 112
50373: PUSH
50374: LD_EXP 113
50378: PUSH
50379: LD_EXP 114
50383: PUSH
50384: LD_EXP 115
50388: PUSH
50389: LD_EXP 117
50393: PUSH
50394: LD_EXP 118
50398: PUSH
50399: LD_EXP 119
50403: PUSH
50404: LD_EXP 122
50408: PUSH
50409: LD_EXP 124
50413: PUSH
50414: LD_EXP 125
50418: PUSH
50419: LD_EXP 126
50423: PUSH
50424: LD_EXP 128
50428: PUSH
50429: LD_EXP 129
50433: PUSH
50434: LD_EXP 132
50438: PUSH
50439: LD_EXP 133
50443: PUSH
50444: LD_EXP 134
50448: PUSH
50449: LD_EXP 135
50453: PUSH
50454: LD_EXP 136
50458: PUSH
50459: LD_EXP 137
50463: PUSH
50464: LD_EXP 138
50468: PUSH
50469: LD_EXP 139
50473: PUSH
50474: LD_EXP 140
50478: PUSH
50479: LD_EXP 105
50483: PUSH
50484: LD_EXP 106
50488: PUSH
50489: LD_EXP 109
50493: PUSH
50494: LD_EXP 110
50498: PUSH
50499: LD_EXP 111
50503: PUSH
50504: LD_EXP 107
50508: PUSH
50509: LD_EXP 108
50513: PUSH
50514: LD_EXP 116
50518: PUSH
50519: LD_EXP 120
50523: PUSH
50524: LD_EXP 121
50528: PUSH
50529: LD_EXP 123
50533: PUSH
50534: LD_EXP 127
50538: PUSH
50539: LD_EXP 130
50543: PUSH
50544: LD_EXP 131
50548: PUSH
50549: LD_EXP 141
50553: PUSH
50554: LD_EXP 142
50558: PUSH
50559: LD_EXP 143
50563: PUSH
50564: LD_EXP 144
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: ST_TO_ADDR
// tmp :=  ;
50625: LD_ADDR_VAR 0 3
50629: PUSH
50630: LD_STRING 
50632: ST_TO_ADDR
// for i = 1 to normalCounter do
50633: LD_ADDR_VAR 0 8
50637: PUSH
50638: DOUBLE
50639: LD_INT 1
50641: DEC
50642: ST_TO_ADDR
50643: LD_EXP 89
50647: PUSH
50648: FOR_TO
50649: IFFALSE 50685
// begin if flags [ i ] then
50651: LD_VAR 0 4
50655: PUSH
50656: LD_VAR 0 8
50660: ARRAY
50661: IFFALSE 50683
// tmp := tmp & i & ; ;
50663: LD_ADDR_VAR 0 3
50667: PUSH
50668: LD_VAR 0 3
50672: PUSH
50673: LD_VAR 0 8
50677: STR
50678: PUSH
50679: LD_STRING ;
50681: STR
50682: ST_TO_ADDR
// end ;
50683: GO 50648
50685: POP
50686: POP
// for i = 1 to hardcoreCounter do
50687: LD_ADDR_VAR 0 8
50691: PUSH
50692: DOUBLE
50693: LD_INT 1
50695: DEC
50696: ST_TO_ADDR
50697: LD_EXP 90
50701: PUSH
50702: FOR_TO
50703: IFFALSE 50749
// begin if flags [ normalCounter + i ] then
50705: LD_VAR 0 4
50709: PUSH
50710: LD_EXP 89
50714: PUSH
50715: LD_VAR 0 8
50719: PLUS
50720: ARRAY
50721: IFFALSE 50747
// tmp := tmp & ( 100 + i ) & ; ;
50723: LD_ADDR_VAR 0 3
50727: PUSH
50728: LD_VAR 0 3
50732: PUSH
50733: LD_INT 100
50735: PUSH
50736: LD_VAR 0 8
50740: PLUS
50741: STR
50742: PUSH
50743: LD_STRING ;
50745: STR
50746: ST_TO_ADDR
// end ;
50747: GO 50702
50749: POP
50750: POP
// if tmp then
50751: LD_VAR 0 3
50755: IFFALSE 50767
// active := tmp ;
50757: LD_ADDR_VAR 0 7
50761: PUSH
50762: LD_VAR 0 3
50766: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
50767: LD_STRING getStreamItemsFromMission("
50769: PUSH
50770: LD_VAR 0 5
50774: STR
50775: PUSH
50776: LD_STRING ","
50778: STR
50779: PUSH
50780: LD_VAR 0 6
50784: STR
50785: PUSH
50786: LD_STRING ","
50788: STR
50789: PUSH
50790: LD_VAR 0 7
50794: STR
50795: PUSH
50796: LD_STRING ")
50798: STR
50799: PPUSH
50800: CALL_OW 559
// end else
50804: GO 50813
// ToLua ( getStreamItemsFromMission("","","") ) ;
50806: LD_STRING getStreamItemsFromMission("","","")
50808: PPUSH
50809: CALL_OW 559
// end ;
50813: LD_VAR 0 2
50817: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
50818: LD_EXP 88
50822: PUSH
50823: LD_EXP 93
50827: AND
50828: IFFALSE 50952
50830: GO 50832
50832: DISABLE
50833: LD_INT 0
50835: PPUSH
50836: PPUSH
// begin enable ;
50837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
50838: LD_ADDR_VAR 0 2
50842: PUSH
50843: LD_INT 22
50845: PUSH
50846: LD_OWVAR 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 34
50860: PUSH
50861: LD_INT 7
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 34
50870: PUSH
50871: LD_INT 45
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 34
50880: PUSH
50881: LD_INT 28
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 34
50890: PUSH
50891: LD_INT 47
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PPUSH
50909: CALL_OW 69
50913: ST_TO_ADDR
// if not tmp then
50914: LD_VAR 0 2
50918: NOT
50919: IFFALSE 50923
// exit ;
50921: GO 50952
// for i in tmp do
50923: LD_ADDR_VAR 0 1
50927: PUSH
50928: LD_VAR 0 2
50932: PUSH
50933: FOR_IN
50934: IFFALSE 50950
// begin SetLives ( i , 0 ) ;
50936: LD_VAR 0 1
50940: PPUSH
50941: LD_INT 0
50943: PPUSH
50944: CALL_OW 234
// end ;
50948: GO 50933
50950: POP
50951: POP
// end ;
50952: PPOPN 2
50954: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50955: LD_EXP 88
50959: PUSH
50960: LD_EXP 94
50964: AND
50965: IFFALSE 51049
50967: GO 50969
50969: DISABLE
50970: LD_INT 0
50972: PPUSH
50973: PPUSH
// begin enable ;
50974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50975: LD_ADDR_VAR 0 2
50979: PUSH
50980: LD_INT 22
50982: PUSH
50983: LD_OWVAR 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 32
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PPUSH
51006: CALL_OW 69
51010: ST_TO_ADDR
// if not tmp then
51011: LD_VAR 0 2
51015: NOT
51016: IFFALSE 51020
// exit ;
51018: GO 51049
// for i in tmp do
51020: LD_ADDR_VAR 0 1
51024: PUSH
51025: LD_VAR 0 2
51029: PUSH
51030: FOR_IN
51031: IFFALSE 51047
// begin SetLives ( i , 0 ) ;
51033: LD_VAR 0 1
51037: PPUSH
51038: LD_INT 0
51040: PPUSH
51041: CALL_OW 234
// end ;
51045: GO 51030
51047: POP
51048: POP
// end ;
51049: PPOPN 2
51051: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51052: LD_EXP 88
51056: PUSH
51057: LD_EXP 91
51061: AND
51062: IFFALSE 51155
51064: GO 51066
51066: DISABLE
51067: LD_INT 0
51069: PPUSH
// begin enable ;
51070: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51071: LD_ADDR_VAR 0 1
51075: PUSH
51076: LD_INT 22
51078: PUSH
51079: LD_OWVAR 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: PUSH
51091: LD_INT 25
51093: PUSH
51094: LD_INT 5
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 25
51103: PUSH
51104: LD_INT 9
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 25
51113: PUSH
51114: LD_INT 8
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PPUSH
51131: CALL_OW 69
51135: PUSH
51136: FOR_IN
51137: IFFALSE 51153
// begin SetClass ( i , 1 ) ;
51139: LD_VAR 0 1
51143: PPUSH
51144: LD_INT 1
51146: PPUSH
51147: CALL_OW 336
// end ;
51151: GO 51136
51153: POP
51154: POP
// end ;
51155: PPOPN 1
51157: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51158: LD_EXP 88
51162: PUSH
51163: LD_EXP 92
51167: AND
51168: PUSH
51169: LD_OWVAR 65
51173: PUSH
51174: LD_INT 7
51176: LESS
51177: AND
51178: IFFALSE 51192
51180: GO 51182
51182: DISABLE
// begin enable ;
51183: ENABLE
// game_speed := 7 ;
51184: LD_ADDR_OWVAR 65
51188: PUSH
51189: LD_INT 7
51191: ST_TO_ADDR
// end ;
51192: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51193: LD_EXP 88
51197: PUSH
51198: LD_EXP 95
51202: AND
51203: IFFALSE 51405
51205: GO 51207
51207: DISABLE
51208: LD_INT 0
51210: PPUSH
51211: PPUSH
51212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51213: LD_ADDR_VAR 0 3
51217: PUSH
51218: LD_INT 81
51220: PUSH
51221: LD_OWVAR 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 21
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PPUSH
51244: CALL_OW 69
51248: ST_TO_ADDR
// if not tmp then
51249: LD_VAR 0 3
51253: NOT
51254: IFFALSE 51258
// exit ;
51256: GO 51405
// if tmp > 5 then
51258: LD_VAR 0 3
51262: PUSH
51263: LD_INT 5
51265: GREATER
51266: IFFALSE 51278
// k := 5 else
51268: LD_ADDR_VAR 0 2
51272: PUSH
51273: LD_INT 5
51275: ST_TO_ADDR
51276: GO 51288
// k := tmp ;
51278: LD_ADDR_VAR 0 2
51282: PUSH
51283: LD_VAR 0 3
51287: ST_TO_ADDR
// for i := 1 to k do
51288: LD_ADDR_VAR 0 1
51292: PUSH
51293: DOUBLE
51294: LD_INT 1
51296: DEC
51297: ST_TO_ADDR
51298: LD_VAR 0 2
51302: PUSH
51303: FOR_TO
51304: IFFALSE 51403
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51306: LD_VAR 0 3
51310: PUSH
51311: LD_VAR 0 1
51315: ARRAY
51316: PPUSH
51317: LD_VAR 0 1
51321: PUSH
51322: LD_INT 4
51324: MOD
51325: PUSH
51326: LD_INT 1
51328: PLUS
51329: PPUSH
51330: CALL_OW 259
51334: PUSH
51335: LD_INT 10
51337: LESS
51338: IFFALSE 51401
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51340: LD_VAR 0 3
51344: PUSH
51345: LD_VAR 0 1
51349: ARRAY
51350: PPUSH
51351: LD_VAR 0 1
51355: PUSH
51356: LD_INT 4
51358: MOD
51359: PUSH
51360: LD_INT 1
51362: PLUS
51363: PPUSH
51364: LD_VAR 0 3
51368: PUSH
51369: LD_VAR 0 1
51373: ARRAY
51374: PPUSH
51375: LD_VAR 0 1
51379: PUSH
51380: LD_INT 4
51382: MOD
51383: PUSH
51384: LD_INT 1
51386: PLUS
51387: PPUSH
51388: CALL_OW 259
51392: PUSH
51393: LD_INT 1
51395: PLUS
51396: PPUSH
51397: CALL_OW 237
51401: GO 51303
51403: POP
51404: POP
// end ;
51405: PPOPN 3
51407: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51408: LD_EXP 88
51412: PUSH
51413: LD_EXP 96
51417: AND
51418: IFFALSE 51438
51420: GO 51422
51422: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51423: LD_INT 4
51425: PPUSH
51426: LD_OWVAR 2
51430: PPUSH
51431: LD_INT 0
51433: PPUSH
51434: CALL_OW 324
51438: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51439: LD_EXP 88
51443: PUSH
51444: LD_EXP 125
51448: AND
51449: IFFALSE 51469
51451: GO 51453
51453: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51454: LD_INT 19
51456: PPUSH
51457: LD_OWVAR 2
51461: PPUSH
51462: LD_INT 0
51464: PPUSH
51465: CALL_OW 324
51469: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51470: LD_EXP 88
51474: PUSH
51475: LD_EXP 97
51479: AND
51480: IFFALSE 51582
51482: GO 51484
51484: DISABLE
51485: LD_INT 0
51487: PPUSH
51488: PPUSH
// begin enable ;
51489: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
51490: LD_ADDR_VAR 0 2
51494: PUSH
51495: LD_INT 22
51497: PUSH
51498: LD_OWVAR 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: LD_INT 34
51512: PUSH
51513: LD_INT 11
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 34
51522: PUSH
51523: LD_INT 30
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PPUSH
51539: CALL_OW 69
51543: ST_TO_ADDR
// if not tmp then
51544: LD_VAR 0 2
51548: NOT
51549: IFFALSE 51553
// exit ;
51551: GO 51582
// for i in tmp do
51553: LD_ADDR_VAR 0 1
51557: PUSH
51558: LD_VAR 0 2
51562: PUSH
51563: FOR_IN
51564: IFFALSE 51580
// begin SetLives ( i , 0 ) ;
51566: LD_VAR 0 1
51570: PPUSH
51571: LD_INT 0
51573: PPUSH
51574: CALL_OW 234
// end ;
51578: GO 51563
51580: POP
51581: POP
// end ;
51582: PPOPN 2
51584: END
// every 0 0$1 trigger StreamModeActive and sBunker do
51585: LD_EXP 88
51589: PUSH
51590: LD_EXP 98
51594: AND
51595: IFFALSE 51615
51597: GO 51599
51599: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
51600: LD_INT 32
51602: PPUSH
51603: LD_OWVAR 2
51607: PPUSH
51608: LD_INT 0
51610: PPUSH
51611: CALL_OW 324
51615: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
51616: LD_EXP 88
51620: PUSH
51621: LD_EXP 99
51625: AND
51626: IFFALSE 51807
51628: GO 51630
51630: DISABLE
51631: LD_INT 0
51633: PPUSH
51634: PPUSH
51635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
51636: LD_ADDR_VAR 0 2
51640: PUSH
51641: LD_INT 22
51643: PUSH
51644: LD_OWVAR 2
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 33
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PPUSH
51667: CALL_OW 69
51671: ST_TO_ADDR
// if not tmp then
51672: LD_VAR 0 2
51676: NOT
51677: IFFALSE 51681
// exit ;
51679: GO 51807
// side := 0 ;
51681: LD_ADDR_VAR 0 3
51685: PUSH
51686: LD_INT 0
51688: ST_TO_ADDR
// for i := 1 to 8 do
51689: LD_ADDR_VAR 0 1
51693: PUSH
51694: DOUBLE
51695: LD_INT 1
51697: DEC
51698: ST_TO_ADDR
51699: LD_INT 8
51701: PUSH
51702: FOR_TO
51703: IFFALSE 51751
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
51705: LD_OWVAR 2
51709: PUSH
51710: LD_VAR 0 1
51714: NONEQUAL
51715: PUSH
51716: LD_OWVAR 2
51720: PPUSH
51721: LD_VAR 0 1
51725: PPUSH
51726: CALL_OW 81
51730: PUSH
51731: LD_INT 2
51733: EQUAL
51734: AND
51735: IFFALSE 51749
// begin side := i ;
51737: LD_ADDR_VAR 0 3
51741: PUSH
51742: LD_VAR 0 1
51746: ST_TO_ADDR
// break ;
51747: GO 51751
// end ;
51749: GO 51702
51751: POP
51752: POP
// if not side then
51753: LD_VAR 0 3
51757: NOT
51758: IFFALSE 51762
// exit ;
51760: GO 51807
// for i := 1 to tmp do
51762: LD_ADDR_VAR 0 1
51766: PUSH
51767: DOUBLE
51768: LD_INT 1
51770: DEC
51771: ST_TO_ADDR
51772: LD_VAR 0 2
51776: PUSH
51777: FOR_TO
51778: IFFALSE 51805
// if Prob ( 60 ) then
51780: LD_INT 60
51782: PPUSH
51783: CALL_OW 13
51787: IFFALSE 51803
// SetSide ( i , side ) ;
51789: LD_VAR 0 1
51793: PPUSH
51794: LD_VAR 0 3
51798: PPUSH
51799: CALL_OW 235
51803: GO 51777
51805: POP
51806: POP
// end ;
51807: PPOPN 3
51809: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
51810: LD_EXP 88
51814: PUSH
51815: LD_EXP 101
51819: AND
51820: IFFALSE 51939
51822: GO 51824
51824: DISABLE
51825: LD_INT 0
51827: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
51828: LD_ADDR_VAR 0 1
51832: PUSH
51833: LD_INT 22
51835: PUSH
51836: LD_OWVAR 2
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 21
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: LD_INT 23
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: PPUSH
51877: CALL_OW 69
51881: PUSH
51882: FOR_IN
51883: IFFALSE 51937
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51885: LD_VAR 0 1
51889: PPUSH
51890: CALL_OW 257
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: LD_INT 4
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: IN
51913: IFFALSE 51935
// SetClass ( un , rand ( 1 , 4 ) ) ;
51915: LD_VAR 0 1
51919: PPUSH
51920: LD_INT 1
51922: PPUSH
51923: LD_INT 4
51925: PPUSH
51926: CALL_OW 12
51930: PPUSH
51931: CALL_OW 336
51935: GO 51882
51937: POP
51938: POP
// end ;
51939: PPOPN 1
51941: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51942: LD_EXP 88
51946: PUSH
51947: LD_EXP 100
51951: AND
51952: IFFALSE 52031
51954: GO 51956
51956: DISABLE
51957: LD_INT 0
51959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51960: LD_ADDR_VAR 0 1
51964: PUSH
51965: LD_INT 22
51967: PUSH
51968: LD_OWVAR 2
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 21
51979: PUSH
51980: LD_INT 3
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PPUSH
51991: CALL_OW 69
51995: ST_TO_ADDR
// if not tmp then
51996: LD_VAR 0 1
52000: NOT
52001: IFFALSE 52005
// exit ;
52003: GO 52031
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52005: LD_VAR 0 1
52009: PUSH
52010: LD_INT 1
52012: PPUSH
52013: LD_VAR 0 1
52017: PPUSH
52018: CALL_OW 12
52022: ARRAY
52023: PPUSH
52024: LD_INT 100
52026: PPUSH
52027: CALL_OW 234
// end ;
52031: PPOPN 1
52033: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52034: LD_EXP 88
52038: PUSH
52039: LD_EXP 102
52043: AND
52044: IFFALSE 52142
52046: GO 52048
52048: DISABLE
52049: LD_INT 0
52051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52052: LD_ADDR_VAR 0 1
52056: PUSH
52057: LD_INT 22
52059: PUSH
52060: LD_OWVAR 2
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 21
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PPUSH
52083: CALL_OW 69
52087: ST_TO_ADDR
// if not tmp then
52088: LD_VAR 0 1
52092: NOT
52093: IFFALSE 52097
// exit ;
52095: GO 52142
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52097: LD_VAR 0 1
52101: PUSH
52102: LD_INT 1
52104: PPUSH
52105: LD_VAR 0 1
52109: PPUSH
52110: CALL_OW 12
52114: ARRAY
52115: PPUSH
52116: LD_INT 1
52118: PPUSH
52119: LD_INT 4
52121: PPUSH
52122: CALL_OW 12
52126: PPUSH
52127: LD_INT 3000
52129: PPUSH
52130: LD_INT 9000
52132: PPUSH
52133: CALL_OW 12
52137: PPUSH
52138: CALL_OW 492
// end ;
52142: PPOPN 1
52144: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52145: LD_EXP 88
52149: PUSH
52150: LD_EXP 103
52154: AND
52155: IFFALSE 52175
52157: GO 52159
52159: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52160: LD_INT 1
52162: PPUSH
52163: LD_OWVAR 2
52167: PPUSH
52168: LD_INT 0
52170: PPUSH
52171: CALL_OW 324
52175: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52176: LD_EXP 88
52180: PUSH
52181: LD_EXP 104
52185: AND
52186: IFFALSE 52269
52188: GO 52190
52190: DISABLE
52191: LD_INT 0
52193: PPUSH
52194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52195: LD_ADDR_VAR 0 2
52199: PUSH
52200: LD_INT 22
52202: PUSH
52203: LD_OWVAR 2
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 21
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PPUSH
52226: CALL_OW 69
52230: ST_TO_ADDR
// if not tmp then
52231: LD_VAR 0 2
52235: NOT
52236: IFFALSE 52240
// exit ;
52238: GO 52269
// for i in tmp do
52240: LD_ADDR_VAR 0 1
52244: PUSH
52245: LD_VAR 0 2
52249: PUSH
52250: FOR_IN
52251: IFFALSE 52267
// SetBLevel ( i , 10 ) ;
52253: LD_VAR 0 1
52257: PPUSH
52258: LD_INT 10
52260: PPUSH
52261: CALL_OW 241
52265: GO 52250
52267: POP
52268: POP
// end ;
52269: PPOPN 2
52271: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52272: LD_EXP 88
52276: PUSH
52277: LD_EXP 105
52281: AND
52282: IFFALSE 52393
52284: GO 52286
52286: DISABLE
52287: LD_INT 0
52289: PPUSH
52290: PPUSH
52291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52292: LD_ADDR_VAR 0 3
52296: PUSH
52297: LD_INT 22
52299: PUSH
52300: LD_OWVAR 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 25
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PPUSH
52323: CALL_OW 69
52327: ST_TO_ADDR
// if not tmp then
52328: LD_VAR 0 3
52332: NOT
52333: IFFALSE 52337
// exit ;
52335: GO 52393
// un := tmp [ rand ( 1 , tmp ) ] ;
52337: LD_ADDR_VAR 0 2
52341: PUSH
52342: LD_VAR 0 3
52346: PUSH
52347: LD_INT 1
52349: PPUSH
52350: LD_VAR 0 3
52354: PPUSH
52355: CALL_OW 12
52359: ARRAY
52360: ST_TO_ADDR
// if Crawls ( un ) then
52361: LD_VAR 0 2
52365: PPUSH
52366: CALL_OW 318
52370: IFFALSE 52381
// ComWalk ( un ) ;
52372: LD_VAR 0 2
52376: PPUSH
52377: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52381: LD_VAR 0 2
52385: PPUSH
52386: LD_INT 5
52388: PPUSH
52389: CALL_OW 336
// end ;
52393: PPOPN 3
52395: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52396: LD_EXP 88
52400: PUSH
52401: LD_EXP 106
52405: AND
52406: PUSH
52407: LD_OWVAR 67
52411: PUSH
52412: LD_INT 4
52414: LESS
52415: AND
52416: IFFALSE 52435
52418: GO 52420
52420: DISABLE
// begin Difficulty := Difficulty + 1 ;
52421: LD_ADDR_OWVAR 67
52425: PUSH
52426: LD_OWVAR 67
52430: PUSH
52431: LD_INT 1
52433: PLUS
52434: ST_TO_ADDR
// end ;
52435: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52436: LD_EXP 88
52440: PUSH
52441: LD_EXP 107
52445: AND
52446: IFFALSE 52549
52448: GO 52450
52450: DISABLE
52451: LD_INT 0
52453: PPUSH
// begin for i := 1 to 5 do
52454: LD_ADDR_VAR 0 1
52458: PUSH
52459: DOUBLE
52460: LD_INT 1
52462: DEC
52463: ST_TO_ADDR
52464: LD_INT 5
52466: PUSH
52467: FOR_TO
52468: IFFALSE 52547
// begin uc_nation := nation_nature ;
52470: LD_ADDR_OWVAR 21
52474: PUSH
52475: LD_INT 0
52477: ST_TO_ADDR
// uc_side := 0 ;
52478: LD_ADDR_OWVAR 20
52482: PUSH
52483: LD_INT 0
52485: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52486: LD_ADDR_OWVAR 29
52490: PUSH
52491: LD_INT 12
52493: PUSH
52494: LD_INT 12
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// hc_agressivity := 20 ;
52501: LD_ADDR_OWVAR 35
52505: PUSH
52506: LD_INT 20
52508: ST_TO_ADDR
// hc_class := class_tiger ;
52509: LD_ADDR_OWVAR 28
52513: PUSH
52514: LD_INT 14
52516: ST_TO_ADDR
// hc_gallery :=  ;
52517: LD_ADDR_OWVAR 33
52521: PUSH
52522: LD_STRING 
52524: ST_TO_ADDR
// hc_name :=  ;
52525: LD_ADDR_OWVAR 26
52529: PUSH
52530: LD_STRING 
52532: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
52533: CALL_OW 44
52537: PPUSH
52538: LD_INT 0
52540: PPUSH
52541: CALL_OW 51
// end ;
52545: GO 52467
52547: POP
52548: POP
// end ;
52549: PPOPN 1
52551: END
// every 0 0$1 trigger StreamModeActive and sBomb do
52552: LD_EXP 88
52556: PUSH
52557: LD_EXP 108
52561: AND
52562: IFFALSE 52571
52564: GO 52566
52566: DISABLE
// StreamSibBomb ;
52567: CALL 52572 0 0
52571: END
// export function StreamSibBomb ; var i , x , y ; begin
52572: LD_INT 0
52574: PPUSH
52575: PPUSH
52576: PPUSH
52577: PPUSH
// result := false ;
52578: LD_ADDR_VAR 0 1
52582: PUSH
52583: LD_INT 0
52585: ST_TO_ADDR
// for i := 1 to 16 do
52586: LD_ADDR_VAR 0 2
52590: PUSH
52591: DOUBLE
52592: LD_INT 1
52594: DEC
52595: ST_TO_ADDR
52596: LD_INT 16
52598: PUSH
52599: FOR_TO
52600: IFFALSE 52799
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52602: LD_ADDR_VAR 0 3
52606: PUSH
52607: LD_INT 10
52609: PUSH
52610: LD_INT 20
52612: PUSH
52613: LD_INT 30
52615: PUSH
52616: LD_INT 40
52618: PUSH
52619: LD_INT 50
52621: PUSH
52622: LD_INT 60
52624: PUSH
52625: LD_INT 70
52627: PUSH
52628: LD_INT 80
52630: PUSH
52631: LD_INT 90
52633: PUSH
52634: LD_INT 100
52636: PUSH
52637: LD_INT 110
52639: PUSH
52640: LD_INT 120
52642: PUSH
52643: LD_INT 130
52645: PUSH
52646: LD_INT 140
52648: PUSH
52649: LD_INT 150
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PPUSH
52672: LD_INT 15
52674: PPUSH
52675: CALL_OW 12
52679: ARRAY
52680: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
52681: LD_ADDR_VAR 0 4
52685: PUSH
52686: LD_INT 10
52688: PUSH
52689: LD_INT 20
52691: PUSH
52692: LD_INT 30
52694: PUSH
52695: LD_INT 40
52697: PUSH
52698: LD_INT 50
52700: PUSH
52701: LD_INT 60
52703: PUSH
52704: LD_INT 70
52706: PUSH
52707: LD_INT 80
52709: PUSH
52710: LD_INT 90
52712: PUSH
52713: LD_INT 100
52715: PUSH
52716: LD_INT 110
52718: PUSH
52719: LD_INT 120
52721: PUSH
52722: LD_INT 130
52724: PUSH
52725: LD_INT 140
52727: PUSH
52728: LD_INT 150
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PPUSH
52751: LD_INT 15
52753: PPUSH
52754: CALL_OW 12
52758: ARRAY
52759: ST_TO_ADDR
// if ValidHex ( x , y ) then
52760: LD_VAR 0 3
52764: PPUSH
52765: LD_VAR 0 4
52769: PPUSH
52770: CALL_OW 488
52774: IFFALSE 52797
// begin result := [ x , y ] ;
52776: LD_ADDR_VAR 0 1
52780: PUSH
52781: LD_VAR 0 3
52785: PUSH
52786: LD_VAR 0 4
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: ST_TO_ADDR
// break ;
52795: GO 52799
// end ; end ;
52797: GO 52599
52799: POP
52800: POP
// if result then
52801: LD_VAR 0 1
52805: IFFALSE 52865
// begin ToLua ( playSibBomb() ) ;
52807: LD_STRING playSibBomb()
52809: PPUSH
52810: CALL_OW 559
// wait ( 0 0$14 ) ;
52814: LD_INT 490
52816: PPUSH
52817: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
52821: LD_VAR 0 1
52825: PUSH
52826: LD_INT 1
52828: ARRAY
52829: PPUSH
52830: LD_VAR 0 1
52834: PUSH
52835: LD_INT 2
52837: ARRAY
52838: PPUSH
52839: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52843: LD_VAR 0 1
52847: PUSH
52848: LD_INT 1
52850: ARRAY
52851: PPUSH
52852: LD_VAR 0 1
52856: PUSH
52857: LD_INT 2
52859: ARRAY
52860: PPUSH
52861: CALL_OW 429
// end ; end ;
52865: LD_VAR 0 1
52869: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52870: LD_EXP 88
52874: PUSH
52875: LD_EXP 110
52879: AND
52880: IFFALSE 52892
52882: GO 52884
52884: DISABLE
// YouLost (  ) ;
52885: LD_STRING 
52887: PPUSH
52888: CALL_OW 104
52892: END
// every 0 0$1 trigger StreamModeActive and sFog do
52893: LD_EXP 88
52897: PUSH
52898: LD_EXP 109
52902: AND
52903: IFFALSE 52917
52905: GO 52907
52907: DISABLE
// FogOff ( your_side ) ;
52908: LD_OWVAR 2
52912: PPUSH
52913: CALL_OW 344
52917: END
// every 0 0$1 trigger StreamModeActive and sSun do
52918: LD_EXP 88
52922: PUSH
52923: LD_EXP 111
52927: AND
52928: IFFALSE 52956
52930: GO 52932
52932: DISABLE
// begin solar_recharge_percent := 0 ;
52933: LD_ADDR_OWVAR 79
52937: PUSH
52938: LD_INT 0
52940: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52941: LD_INT 10500
52943: PPUSH
52944: CALL_OW 67
// solar_recharge_percent := 100 ;
52948: LD_ADDR_OWVAR 79
52952: PUSH
52953: LD_INT 100
52955: ST_TO_ADDR
// end ;
52956: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52957: LD_EXP 88
52961: PUSH
52962: LD_EXP 112
52966: AND
52967: IFFALSE 53206
52969: GO 52971
52971: DISABLE
52972: LD_INT 0
52974: PPUSH
52975: PPUSH
52976: PPUSH
// begin tmp := [ ] ;
52977: LD_ADDR_VAR 0 3
52981: PUSH
52982: EMPTY
52983: ST_TO_ADDR
// for i := 1 to 6 do
52984: LD_ADDR_VAR 0 1
52988: PUSH
52989: DOUBLE
52990: LD_INT 1
52992: DEC
52993: ST_TO_ADDR
52994: LD_INT 6
52996: PUSH
52997: FOR_TO
52998: IFFALSE 53103
// begin uc_nation := nation_nature ;
53000: LD_ADDR_OWVAR 21
53004: PUSH
53005: LD_INT 0
53007: ST_TO_ADDR
// uc_side := 0 ;
53008: LD_ADDR_OWVAR 20
53012: PUSH
53013: LD_INT 0
53015: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53016: LD_ADDR_OWVAR 29
53020: PUSH
53021: LD_INT 12
53023: PUSH
53024: LD_INT 12
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// hc_agressivity := 20 ;
53031: LD_ADDR_OWVAR 35
53035: PUSH
53036: LD_INT 20
53038: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53039: LD_ADDR_OWVAR 28
53043: PUSH
53044: LD_INT 17
53046: ST_TO_ADDR
// hc_gallery :=  ;
53047: LD_ADDR_OWVAR 33
53051: PUSH
53052: LD_STRING 
53054: ST_TO_ADDR
// hc_name :=  ;
53055: LD_ADDR_OWVAR 26
53059: PUSH
53060: LD_STRING 
53062: ST_TO_ADDR
// un := CreateHuman ;
53063: LD_ADDR_VAR 0 2
53067: PUSH
53068: CALL_OW 44
53072: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53073: LD_VAR 0 2
53077: PPUSH
53078: LD_INT 1
53080: PPUSH
53081: CALL_OW 51
// tmp := tmp ^ un ;
53085: LD_ADDR_VAR 0 3
53089: PUSH
53090: LD_VAR 0 3
53094: PUSH
53095: LD_VAR 0 2
53099: ADD
53100: ST_TO_ADDR
// end ;
53101: GO 52997
53103: POP
53104: POP
// repeat wait ( 0 0$1 ) ;
53105: LD_INT 35
53107: PPUSH
53108: CALL_OW 67
// for un in tmp do
53112: LD_ADDR_VAR 0 2
53116: PUSH
53117: LD_VAR 0 3
53121: PUSH
53122: FOR_IN
53123: IFFALSE 53197
// begin if IsDead ( un ) then
53125: LD_VAR 0 2
53129: PPUSH
53130: CALL_OW 301
53134: IFFALSE 53154
// begin tmp := tmp diff un ;
53136: LD_ADDR_VAR 0 3
53140: PUSH
53141: LD_VAR 0 3
53145: PUSH
53146: LD_VAR 0 2
53150: DIFF
53151: ST_TO_ADDR
// continue ;
53152: GO 53122
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53154: LD_VAR 0 2
53158: PPUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 22
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PPUSH
53176: CALL_OW 69
53180: PPUSH
53181: LD_VAR 0 2
53185: PPUSH
53186: CALL_OW 74
53190: PPUSH
53191: CALL_OW 115
// end ;
53195: GO 53122
53197: POP
53198: POP
// until not tmp ;
53199: LD_VAR 0 3
53203: NOT
53204: IFFALSE 53105
// end ;
53206: PPOPN 3
53208: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53209: LD_EXP 88
53213: PUSH
53214: LD_EXP 113
53218: AND
53219: IFFALSE 53273
53221: GO 53223
53223: DISABLE
// begin ToLua ( displayTroll(); ) ;
53224: LD_STRING displayTroll();
53226: PPUSH
53227: CALL_OW 559
// wait ( 3 3$00 ) ;
53231: LD_INT 6300
53233: PPUSH
53234: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53238: LD_STRING hideTroll();
53240: PPUSH
53241: CALL_OW 559
// wait ( 1 1$00 ) ;
53245: LD_INT 2100
53247: PPUSH
53248: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53252: LD_STRING displayTroll();
53254: PPUSH
53255: CALL_OW 559
// wait ( 1 1$00 ) ;
53259: LD_INT 2100
53261: PPUSH
53262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53266: LD_STRING hideTroll();
53268: PPUSH
53269: CALL_OW 559
// end ;
53273: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53274: LD_EXP 88
53278: PUSH
53279: LD_EXP 114
53283: AND
53284: IFFALSE 53347
53286: GO 53288
53288: DISABLE
53289: LD_INT 0
53291: PPUSH
// begin p := 0 ;
53292: LD_ADDR_VAR 0 1
53296: PUSH
53297: LD_INT 0
53299: ST_TO_ADDR
// repeat game_speed := 1 ;
53300: LD_ADDR_OWVAR 65
53304: PUSH
53305: LD_INT 1
53307: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53308: LD_INT 35
53310: PPUSH
53311: CALL_OW 67
// p := p + 1 ;
53315: LD_ADDR_VAR 0 1
53319: PUSH
53320: LD_VAR 0 1
53324: PUSH
53325: LD_INT 1
53327: PLUS
53328: ST_TO_ADDR
// until p >= 60 ;
53329: LD_VAR 0 1
53333: PUSH
53334: LD_INT 60
53336: GREATEREQUAL
53337: IFFALSE 53300
// game_speed := 4 ;
53339: LD_ADDR_OWVAR 65
53343: PUSH
53344: LD_INT 4
53346: ST_TO_ADDR
// end ;
53347: PPOPN 1
53349: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53350: LD_EXP 88
53354: PUSH
53355: LD_EXP 115
53359: AND
53360: IFFALSE 53506
53362: GO 53364
53364: DISABLE
53365: LD_INT 0
53367: PPUSH
53368: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53369: LD_ADDR_VAR 0 1
53373: PUSH
53374: LD_INT 22
53376: PUSH
53377: LD_OWVAR 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: LD_INT 30
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 30
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PPUSH
53418: CALL_OW 69
53422: ST_TO_ADDR
// if not depot then
53423: LD_VAR 0 1
53427: NOT
53428: IFFALSE 53432
// exit ;
53430: GO 53506
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53432: LD_ADDR_VAR 0 2
53436: PUSH
53437: LD_VAR 0 1
53441: PUSH
53442: LD_INT 1
53444: PPUSH
53445: LD_VAR 0 1
53449: PPUSH
53450: CALL_OW 12
53454: ARRAY
53455: PPUSH
53456: CALL_OW 274
53460: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53461: LD_VAR 0 2
53465: PPUSH
53466: LD_INT 1
53468: PPUSH
53469: LD_INT 0
53471: PPUSH
53472: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53476: LD_VAR 0 2
53480: PPUSH
53481: LD_INT 2
53483: PPUSH
53484: LD_INT 0
53486: PPUSH
53487: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
53491: LD_VAR 0 2
53495: PPUSH
53496: LD_INT 3
53498: PPUSH
53499: LD_INT 0
53501: PPUSH
53502: CALL_OW 277
// end ;
53506: PPOPN 2
53508: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
53509: LD_EXP 88
53513: PUSH
53514: LD_EXP 116
53518: AND
53519: IFFALSE 53616
53521: GO 53523
53523: DISABLE
53524: LD_INT 0
53526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53527: LD_ADDR_VAR 0 1
53531: PUSH
53532: LD_INT 22
53534: PUSH
53535: LD_OWVAR 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 21
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: LD_INT 23
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: LIST
53575: PPUSH
53576: CALL_OW 69
53580: ST_TO_ADDR
// if not tmp then
53581: LD_VAR 0 1
53585: NOT
53586: IFFALSE 53590
// exit ;
53588: GO 53616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
53590: LD_VAR 0 1
53594: PUSH
53595: LD_INT 1
53597: PPUSH
53598: LD_VAR 0 1
53602: PPUSH
53603: CALL_OW 12
53607: ARRAY
53608: PPUSH
53609: LD_INT 200
53611: PPUSH
53612: CALL_OW 234
// end ;
53616: PPOPN 1
53618: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
53619: LD_EXP 88
53623: PUSH
53624: LD_EXP 117
53628: AND
53629: IFFALSE 53708
53631: GO 53633
53633: DISABLE
53634: LD_INT 0
53636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
53637: LD_ADDR_VAR 0 1
53641: PUSH
53642: LD_INT 22
53644: PUSH
53645: LD_OWVAR 2
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 21
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PPUSH
53668: CALL_OW 69
53672: ST_TO_ADDR
// if not tmp then
53673: LD_VAR 0 1
53677: NOT
53678: IFFALSE 53682
// exit ;
53680: GO 53708
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
53682: LD_VAR 0 1
53686: PUSH
53687: LD_INT 1
53689: PPUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: CALL_OW 12
53699: ARRAY
53700: PPUSH
53701: LD_INT 60
53703: PPUSH
53704: CALL_OW 234
// end ;
53708: PPOPN 1
53710: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
53711: LD_EXP 88
53715: PUSH
53716: LD_EXP 118
53720: AND
53721: IFFALSE 53820
53723: GO 53725
53725: DISABLE
53726: LD_INT 0
53728: PPUSH
53729: PPUSH
// begin enable ;
53730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
53731: LD_ADDR_VAR 0 1
53735: PUSH
53736: LD_INT 22
53738: PUSH
53739: LD_OWVAR 2
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 61
53750: PUSH
53751: EMPTY
53752: LIST
53753: PUSH
53754: LD_INT 33
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: LIST
53768: PPUSH
53769: CALL_OW 69
53773: ST_TO_ADDR
// if not tmp then
53774: LD_VAR 0 1
53778: NOT
53779: IFFALSE 53783
// exit ;
53781: GO 53820
// for i in tmp do
53783: LD_ADDR_VAR 0 2
53787: PUSH
53788: LD_VAR 0 1
53792: PUSH
53793: FOR_IN
53794: IFFALSE 53818
// if IsControledBy ( i ) then
53796: LD_VAR 0 2
53800: PPUSH
53801: CALL_OW 312
53805: IFFALSE 53816
// ComUnlink ( i ) ;
53807: LD_VAR 0 2
53811: PPUSH
53812: CALL_OW 136
53816: GO 53793
53818: POP
53819: POP
// end ;
53820: PPOPN 2
53822: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
53823: LD_EXP 88
53827: PUSH
53828: LD_EXP 119
53832: AND
53833: IFFALSE 53973
53835: GO 53837
53837: DISABLE
53838: LD_INT 0
53840: PPUSH
53841: PPUSH
// begin ToLua ( displayPowell(); ) ;
53842: LD_STRING displayPowell();
53844: PPUSH
53845: CALL_OW 559
// uc_side := 0 ;
53849: LD_ADDR_OWVAR 20
53853: PUSH
53854: LD_INT 0
53856: ST_TO_ADDR
// uc_nation := 2 ;
53857: LD_ADDR_OWVAR 21
53861: PUSH
53862: LD_INT 2
53864: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53865: LD_ADDR_OWVAR 37
53869: PUSH
53870: LD_INT 14
53872: ST_TO_ADDR
// vc_engine := engine_siberite ;
53873: LD_ADDR_OWVAR 39
53877: PUSH
53878: LD_INT 3
53880: ST_TO_ADDR
// vc_control := control_apeman ;
53881: LD_ADDR_OWVAR 38
53885: PUSH
53886: LD_INT 5
53888: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53889: LD_ADDR_OWVAR 40
53893: PUSH
53894: LD_INT 29
53896: ST_TO_ADDR
// un := CreateVehicle ;
53897: LD_ADDR_VAR 0 2
53901: PUSH
53902: CALL_OW 45
53906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53907: LD_VAR 0 2
53911: PPUSH
53912: LD_INT 1
53914: PPUSH
53915: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53919: LD_INT 35
53921: PPUSH
53922: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53926: LD_VAR 0 2
53930: PPUSH
53931: LD_INT 22
53933: PUSH
53934: LD_OWVAR 2
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PPUSH
53943: CALL_OW 69
53947: PPUSH
53948: LD_VAR 0 2
53952: PPUSH
53953: CALL_OW 74
53957: PPUSH
53958: CALL_OW 115
// until IsDead ( un ) ;
53962: LD_VAR 0 2
53966: PPUSH
53967: CALL_OW 301
53971: IFFALSE 53919
// end ;
53973: PPOPN 2
53975: END
// every 0 0$1 trigger StreamModeActive and sStu do
53976: LD_EXP 88
53980: PUSH
53981: LD_EXP 127
53985: AND
53986: IFFALSE 54002
53988: GO 53990
53990: DISABLE
// begin ToLua ( displayStucuk(); ) ;
53991: LD_STRING displayStucuk();
53993: PPUSH
53994: CALL_OW 559
// ResetFog ;
53998: CALL_OW 335
// end ;
54002: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54003: LD_EXP 88
54007: PUSH
54008: LD_EXP 120
54012: AND
54013: IFFALSE 54154
54015: GO 54017
54017: DISABLE
54018: LD_INT 0
54020: PPUSH
54021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54022: LD_ADDR_VAR 0 2
54026: PUSH
54027: LD_INT 22
54029: PUSH
54030: LD_OWVAR 2
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 21
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PPUSH
54053: CALL_OW 69
54057: ST_TO_ADDR
// if not tmp then
54058: LD_VAR 0 2
54062: NOT
54063: IFFALSE 54067
// exit ;
54065: GO 54154
// un := tmp [ rand ( 1 , tmp ) ] ;
54067: LD_ADDR_VAR 0 1
54071: PUSH
54072: LD_VAR 0 2
54076: PUSH
54077: LD_INT 1
54079: PPUSH
54080: LD_VAR 0 2
54084: PPUSH
54085: CALL_OW 12
54089: ARRAY
54090: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54091: LD_VAR 0 1
54095: PPUSH
54096: LD_INT 0
54098: PPUSH
54099: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54103: LD_VAR 0 1
54107: PPUSH
54108: LD_OWVAR 3
54112: PUSH
54113: LD_VAR 0 1
54117: DIFF
54118: PPUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: CALL_OW 74
54128: PPUSH
54129: CALL_OW 115
// wait ( 0 0$20 ) ;
54133: LD_INT 700
54135: PPUSH
54136: CALL_OW 67
// SetSide ( un , your_side ) ;
54140: LD_VAR 0 1
54144: PPUSH
54145: LD_OWVAR 2
54149: PPUSH
54150: CALL_OW 235
// end ;
54154: PPOPN 2
54156: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54157: LD_EXP 88
54161: PUSH
54162: LD_EXP 121
54166: AND
54167: IFFALSE 54273
54169: GO 54171
54171: DISABLE
54172: LD_INT 0
54174: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54175: LD_ADDR_VAR 0 1
54179: PUSH
54180: LD_INT 22
54182: PUSH
54183: LD_OWVAR 2
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 30
54197: PUSH
54198: LD_INT 0
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 30
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PPUSH
54224: CALL_OW 69
54228: ST_TO_ADDR
// if not depot then
54229: LD_VAR 0 1
54233: NOT
54234: IFFALSE 54238
// exit ;
54236: GO 54273
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54238: LD_VAR 0 1
54242: PUSH
54243: LD_INT 1
54245: ARRAY
54246: PPUSH
54247: CALL_OW 250
54251: PPUSH
54252: LD_VAR 0 1
54256: PUSH
54257: LD_INT 1
54259: ARRAY
54260: PPUSH
54261: CALL_OW 251
54265: PPUSH
54266: LD_INT 70
54268: PPUSH
54269: CALL_OW 495
// end ;
54273: PPOPN 1
54275: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54276: LD_EXP 88
54280: PUSH
54281: LD_EXP 122
54285: AND
54286: IFFALSE 54497
54288: GO 54290
54290: DISABLE
54291: LD_INT 0
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54298: LD_ADDR_VAR 0 5
54302: PUSH
54303: LD_INT 22
54305: PUSH
54306: LD_OWVAR 2
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 21
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PPUSH
54329: CALL_OW 69
54333: ST_TO_ADDR
// if not tmp then
54334: LD_VAR 0 5
54338: NOT
54339: IFFALSE 54343
// exit ;
54341: GO 54497
// for i in tmp do
54343: LD_ADDR_VAR 0 1
54347: PUSH
54348: LD_VAR 0 5
54352: PUSH
54353: FOR_IN
54354: IFFALSE 54495
// begin d := rand ( 0 , 5 ) ;
54356: LD_ADDR_VAR 0 4
54360: PUSH
54361: LD_INT 0
54363: PPUSH
54364: LD_INT 5
54366: PPUSH
54367: CALL_OW 12
54371: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54372: LD_ADDR_VAR 0 2
54376: PUSH
54377: LD_VAR 0 1
54381: PPUSH
54382: CALL_OW 250
54386: PPUSH
54387: LD_VAR 0 4
54391: PPUSH
54392: LD_INT 3
54394: PPUSH
54395: LD_INT 12
54397: PPUSH
54398: CALL_OW 12
54402: PPUSH
54403: CALL_OW 272
54407: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54408: LD_ADDR_VAR 0 3
54412: PUSH
54413: LD_VAR 0 1
54417: PPUSH
54418: CALL_OW 251
54422: PPUSH
54423: LD_VAR 0 4
54427: PPUSH
54428: LD_INT 3
54430: PPUSH
54431: LD_INT 12
54433: PPUSH
54434: CALL_OW 12
54438: PPUSH
54439: CALL_OW 273
54443: ST_TO_ADDR
// if ValidHex ( x , y ) then
54444: LD_VAR 0 2
54448: PPUSH
54449: LD_VAR 0 3
54453: PPUSH
54454: CALL_OW 488
54458: IFFALSE 54493
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54460: LD_VAR 0 1
54464: PPUSH
54465: LD_VAR 0 2
54469: PPUSH
54470: LD_VAR 0 3
54474: PPUSH
54475: LD_INT 3
54477: PPUSH
54478: LD_INT 6
54480: PPUSH
54481: CALL_OW 12
54485: PPUSH
54486: LD_INT 1
54488: PPUSH
54489: CALL_OW 483
// end ;
54493: GO 54353
54495: POP
54496: POP
// end ;
54497: PPOPN 5
54499: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
54500: LD_EXP 88
54504: PUSH
54505: LD_EXP 123
54509: AND
54510: IFFALSE 54604
54512: GO 54514
54514: DISABLE
54515: LD_INT 0
54517: PPUSH
54518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
54519: LD_ADDR_VAR 0 2
54523: PUSH
54524: LD_INT 22
54526: PUSH
54527: LD_OWVAR 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 32
54538: PUSH
54539: LD_INT 1
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 21
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: LIST
54560: PPUSH
54561: CALL_OW 69
54565: ST_TO_ADDR
// if not tmp then
54566: LD_VAR 0 2
54570: NOT
54571: IFFALSE 54575
// exit ;
54573: GO 54604
// for i in tmp do
54575: LD_ADDR_VAR 0 1
54579: PUSH
54580: LD_VAR 0 2
54584: PUSH
54585: FOR_IN
54586: IFFALSE 54602
// SetFuel ( i , 0 ) ;
54588: LD_VAR 0 1
54592: PPUSH
54593: LD_INT 0
54595: PPUSH
54596: CALL_OW 240
54600: GO 54585
54602: POP
54603: POP
// end ;
54604: PPOPN 2
54606: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
54607: LD_EXP 88
54611: PUSH
54612: LD_EXP 124
54616: AND
54617: IFFALSE 54683
54619: GO 54621
54621: DISABLE
54622: LD_INT 0
54624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54625: LD_ADDR_VAR 0 1
54629: PUSH
54630: LD_INT 22
54632: PUSH
54633: LD_OWVAR 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 30
54644: PUSH
54645: LD_INT 29
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PPUSH
54656: CALL_OW 69
54660: ST_TO_ADDR
// if not tmp then
54661: LD_VAR 0 1
54665: NOT
54666: IFFALSE 54670
// exit ;
54668: GO 54683
// DestroyUnit ( tmp [ 1 ] ) ;
54670: LD_VAR 0 1
54674: PUSH
54675: LD_INT 1
54677: ARRAY
54678: PPUSH
54679: CALL_OW 65
// end ;
54683: PPOPN 1
54685: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
54686: LD_EXP 88
54690: PUSH
54691: LD_EXP 126
54695: AND
54696: IFFALSE 54825
54698: GO 54700
54700: DISABLE
54701: LD_INT 0
54703: PPUSH
// begin uc_side := 0 ;
54704: LD_ADDR_OWVAR 20
54708: PUSH
54709: LD_INT 0
54711: ST_TO_ADDR
// uc_nation := nation_arabian ;
54712: LD_ADDR_OWVAR 21
54716: PUSH
54717: LD_INT 2
54719: ST_TO_ADDR
// hc_gallery :=  ;
54720: LD_ADDR_OWVAR 33
54724: PUSH
54725: LD_STRING 
54727: ST_TO_ADDR
// hc_name :=  ;
54728: LD_ADDR_OWVAR 26
54732: PUSH
54733: LD_STRING 
54735: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
54736: LD_INT 1
54738: PPUSH
54739: LD_INT 11
54741: PPUSH
54742: LD_INT 10
54744: PPUSH
54745: CALL_OW 380
// un := CreateHuman ;
54749: LD_ADDR_VAR 0 1
54753: PUSH
54754: CALL_OW 44
54758: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54759: LD_VAR 0 1
54763: PPUSH
54764: LD_INT 1
54766: PPUSH
54767: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54771: LD_INT 35
54773: PPUSH
54774: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54778: LD_VAR 0 1
54782: PPUSH
54783: LD_INT 22
54785: PUSH
54786: LD_OWVAR 2
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PPUSH
54795: CALL_OW 69
54799: PPUSH
54800: LD_VAR 0 1
54804: PPUSH
54805: CALL_OW 74
54809: PPUSH
54810: CALL_OW 115
// until IsDead ( un ) ;
54814: LD_VAR 0 1
54818: PPUSH
54819: CALL_OW 301
54823: IFFALSE 54771
// end ;
54825: PPOPN 1
54827: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
54828: LD_EXP 88
54832: PUSH
54833: LD_EXP 128
54837: AND
54838: IFFALSE 54850
54840: GO 54842
54842: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54843: LD_STRING earthquake(getX(game), 0, 32)
54845: PPUSH
54846: CALL_OW 559
54850: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54851: LD_EXP 88
54855: PUSH
54856: LD_EXP 129
54860: AND
54861: IFFALSE 54952
54863: GO 54865
54865: DISABLE
54866: LD_INT 0
54868: PPUSH
// begin enable ;
54869: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54870: LD_ADDR_VAR 0 1
54874: PUSH
54875: LD_INT 22
54877: PUSH
54878: LD_OWVAR 2
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 21
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 33
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: PPUSH
54912: CALL_OW 69
54916: ST_TO_ADDR
// if not tmp then
54917: LD_VAR 0 1
54921: NOT
54922: IFFALSE 54926
// exit ;
54924: GO 54952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54926: LD_VAR 0 1
54930: PUSH
54931: LD_INT 1
54933: PPUSH
54934: LD_VAR 0 1
54938: PPUSH
54939: CALL_OW 12
54943: ARRAY
54944: PPUSH
54945: LD_INT 1
54947: PPUSH
54948: CALL_OW 234
// end ;
54952: PPOPN 1
54954: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54955: LD_EXP 88
54959: PUSH
54960: LD_EXP 130
54964: AND
54965: IFFALSE 55106
54967: GO 54969
54969: DISABLE
54970: LD_INT 0
54972: PPUSH
54973: PPUSH
54974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54975: LD_ADDR_VAR 0 3
54979: PUSH
54980: LD_INT 22
54982: PUSH
54983: LD_OWVAR 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 25
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PPUSH
55006: CALL_OW 69
55010: ST_TO_ADDR
// if not tmp then
55011: LD_VAR 0 3
55015: NOT
55016: IFFALSE 55020
// exit ;
55018: GO 55106
// un := tmp [ rand ( 1 , tmp ) ] ;
55020: LD_ADDR_VAR 0 2
55024: PUSH
55025: LD_VAR 0 3
55029: PUSH
55030: LD_INT 1
55032: PPUSH
55033: LD_VAR 0 3
55037: PPUSH
55038: CALL_OW 12
55042: ARRAY
55043: ST_TO_ADDR
// if Crawls ( un ) then
55044: LD_VAR 0 2
55048: PPUSH
55049: CALL_OW 318
55053: IFFALSE 55064
// ComWalk ( un ) ;
55055: LD_VAR 0 2
55059: PPUSH
55060: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55064: LD_VAR 0 2
55068: PPUSH
55069: LD_INT 9
55071: PPUSH
55072: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55076: LD_INT 28
55078: PPUSH
55079: LD_OWVAR 2
55083: PPUSH
55084: LD_INT 2
55086: PPUSH
55087: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55091: LD_INT 29
55093: PPUSH
55094: LD_OWVAR 2
55098: PPUSH
55099: LD_INT 2
55101: PPUSH
55102: CALL_OW 322
// end ;
55106: PPOPN 3
55108: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55109: LD_EXP 88
55113: PUSH
55114: LD_EXP 131
55118: AND
55119: IFFALSE 55230
55121: GO 55123
55123: DISABLE
55124: LD_INT 0
55126: PPUSH
55127: PPUSH
55128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55129: LD_ADDR_VAR 0 3
55133: PUSH
55134: LD_INT 22
55136: PUSH
55137: LD_OWVAR 2
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 25
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PPUSH
55160: CALL_OW 69
55164: ST_TO_ADDR
// if not tmp then
55165: LD_VAR 0 3
55169: NOT
55170: IFFALSE 55174
// exit ;
55172: GO 55230
// un := tmp [ rand ( 1 , tmp ) ] ;
55174: LD_ADDR_VAR 0 2
55178: PUSH
55179: LD_VAR 0 3
55183: PUSH
55184: LD_INT 1
55186: PPUSH
55187: LD_VAR 0 3
55191: PPUSH
55192: CALL_OW 12
55196: ARRAY
55197: ST_TO_ADDR
// if Crawls ( un ) then
55198: LD_VAR 0 2
55202: PPUSH
55203: CALL_OW 318
55207: IFFALSE 55218
// ComWalk ( un ) ;
55209: LD_VAR 0 2
55213: PPUSH
55214: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55218: LD_VAR 0 2
55222: PPUSH
55223: LD_INT 8
55225: PPUSH
55226: CALL_OW 336
// end ;
55230: PPOPN 3
55232: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55233: LD_EXP 88
55237: PUSH
55238: LD_EXP 132
55242: AND
55243: IFFALSE 55387
55245: GO 55247
55247: DISABLE
55248: LD_INT 0
55250: PPUSH
55251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55252: LD_ADDR_VAR 0 2
55256: PUSH
55257: LD_INT 22
55259: PUSH
55260: LD_OWVAR 2
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 21
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 34
55284: PUSH
55285: LD_INT 12
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 34
55294: PUSH
55295: LD_INT 51
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 34
55304: PUSH
55305: LD_INT 32
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: PPUSH
55323: CALL_OW 69
55327: ST_TO_ADDR
// if not tmp then
55328: LD_VAR 0 2
55332: NOT
55333: IFFALSE 55337
// exit ;
55335: GO 55387
// for i in tmp do
55337: LD_ADDR_VAR 0 1
55341: PUSH
55342: LD_VAR 0 2
55346: PUSH
55347: FOR_IN
55348: IFFALSE 55385
// if GetCargo ( i , mat_artifact ) = 0 then
55350: LD_VAR 0 1
55354: PPUSH
55355: LD_INT 4
55357: PPUSH
55358: CALL_OW 289
55362: PUSH
55363: LD_INT 0
55365: EQUAL
55366: IFFALSE 55383
// SetCargo ( i , mat_siberit , 100 ) ;
55368: LD_VAR 0 1
55372: PPUSH
55373: LD_INT 3
55375: PPUSH
55376: LD_INT 100
55378: PPUSH
55379: CALL_OW 290
55383: GO 55347
55385: POP
55386: POP
// end ;
55387: PPOPN 2
55389: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55390: LD_EXP 88
55394: PUSH
55395: LD_EXP 133
55399: AND
55400: IFFALSE 55583
55402: GO 55404
55404: DISABLE
55405: LD_INT 0
55407: PPUSH
55408: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55409: LD_ADDR_VAR 0 2
55413: PUSH
55414: LD_INT 22
55416: PUSH
55417: LD_OWVAR 2
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PPUSH
55426: CALL_OW 69
55430: ST_TO_ADDR
// if not tmp then
55431: LD_VAR 0 2
55435: NOT
55436: IFFALSE 55440
// exit ;
55438: GO 55583
// for i := 1 to 2 do
55440: LD_ADDR_VAR 0 1
55444: PUSH
55445: DOUBLE
55446: LD_INT 1
55448: DEC
55449: ST_TO_ADDR
55450: LD_INT 2
55452: PUSH
55453: FOR_TO
55454: IFFALSE 55581
// begin uc_side := your_side ;
55456: LD_ADDR_OWVAR 20
55460: PUSH
55461: LD_OWVAR 2
55465: ST_TO_ADDR
// uc_nation := nation_american ;
55466: LD_ADDR_OWVAR 21
55470: PUSH
55471: LD_INT 1
55473: ST_TO_ADDR
// vc_chassis := us_morphling ;
55474: LD_ADDR_OWVAR 37
55478: PUSH
55479: LD_INT 5
55481: ST_TO_ADDR
// vc_engine := engine_siberite ;
55482: LD_ADDR_OWVAR 39
55486: PUSH
55487: LD_INT 3
55489: ST_TO_ADDR
// vc_control := control_computer ;
55490: LD_ADDR_OWVAR 38
55494: PUSH
55495: LD_INT 3
55497: ST_TO_ADDR
// vc_weapon := us_double_laser ;
55498: LD_ADDR_OWVAR 40
55502: PUSH
55503: LD_INT 10
55505: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
55506: LD_VAR 0 2
55510: PUSH
55511: LD_INT 1
55513: ARRAY
55514: PPUSH
55515: CALL_OW 310
55519: NOT
55520: IFFALSE 55567
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
55522: CALL_OW 45
55526: PPUSH
55527: LD_VAR 0 2
55531: PUSH
55532: LD_INT 1
55534: ARRAY
55535: PPUSH
55536: CALL_OW 250
55540: PPUSH
55541: LD_VAR 0 2
55545: PUSH
55546: LD_INT 1
55548: ARRAY
55549: PPUSH
55550: CALL_OW 251
55554: PPUSH
55555: LD_INT 12
55557: PPUSH
55558: LD_INT 1
55560: PPUSH
55561: CALL_OW 50
55565: GO 55579
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
55567: CALL_OW 45
55571: PPUSH
55572: LD_INT 1
55574: PPUSH
55575: CALL_OW 51
// end ;
55579: GO 55453
55581: POP
55582: POP
// end ;
55583: PPOPN 2
55585: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
55586: LD_EXP 88
55590: PUSH
55591: LD_EXP 134
55595: AND
55596: IFFALSE 55818
55598: GO 55600
55600: DISABLE
55601: LD_INT 0
55603: PPUSH
55604: PPUSH
55605: PPUSH
55606: PPUSH
55607: PPUSH
55608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55609: LD_ADDR_VAR 0 6
55613: PUSH
55614: LD_INT 22
55616: PUSH
55617: LD_OWVAR 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 21
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 3
55638: PUSH
55639: LD_INT 23
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: PPUSH
55658: CALL_OW 69
55662: ST_TO_ADDR
// if not tmp then
55663: LD_VAR 0 6
55667: NOT
55668: IFFALSE 55672
// exit ;
55670: GO 55818
// s1 := rand ( 1 , 4 ) ;
55672: LD_ADDR_VAR 0 2
55676: PUSH
55677: LD_INT 1
55679: PPUSH
55680: LD_INT 4
55682: PPUSH
55683: CALL_OW 12
55687: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
55688: LD_ADDR_VAR 0 4
55692: PUSH
55693: LD_VAR 0 6
55697: PUSH
55698: LD_INT 1
55700: ARRAY
55701: PPUSH
55702: LD_VAR 0 2
55706: PPUSH
55707: CALL_OW 259
55711: ST_TO_ADDR
// if s1 = 1 then
55712: LD_VAR 0 2
55716: PUSH
55717: LD_INT 1
55719: EQUAL
55720: IFFALSE 55740
// s2 := rand ( 2 , 4 ) else
55722: LD_ADDR_VAR 0 3
55726: PUSH
55727: LD_INT 2
55729: PPUSH
55730: LD_INT 4
55732: PPUSH
55733: CALL_OW 12
55737: ST_TO_ADDR
55738: GO 55748
// s2 := 1 ;
55740: LD_ADDR_VAR 0 3
55744: PUSH
55745: LD_INT 1
55747: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
55748: LD_ADDR_VAR 0 5
55752: PUSH
55753: LD_VAR 0 6
55757: PUSH
55758: LD_INT 1
55760: ARRAY
55761: PPUSH
55762: LD_VAR 0 3
55766: PPUSH
55767: CALL_OW 259
55771: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
55772: LD_VAR 0 6
55776: PUSH
55777: LD_INT 1
55779: ARRAY
55780: PPUSH
55781: LD_VAR 0 2
55785: PPUSH
55786: LD_VAR 0 5
55790: PPUSH
55791: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
55795: LD_VAR 0 6
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PPUSH
55804: LD_VAR 0 3
55808: PPUSH
55809: LD_VAR 0 4
55813: PPUSH
55814: CALL_OW 237
// end ;
55818: PPOPN 6
55820: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
55821: LD_EXP 88
55825: PUSH
55826: LD_EXP 135
55830: AND
55831: IFFALSE 55910
55833: GO 55835
55835: DISABLE
55836: LD_INT 0
55838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
55839: LD_ADDR_VAR 0 1
55843: PUSH
55844: LD_INT 22
55846: PUSH
55847: LD_OWVAR 2
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 30
55858: PUSH
55859: LD_INT 3
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PPUSH
55870: CALL_OW 69
55874: ST_TO_ADDR
// if not tmp then
55875: LD_VAR 0 1
55879: NOT
55880: IFFALSE 55884
// exit ;
55882: GO 55910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55884: LD_VAR 0 1
55888: PUSH
55889: LD_INT 1
55891: PPUSH
55892: LD_VAR 0 1
55896: PPUSH
55897: CALL_OW 12
55901: ARRAY
55902: PPUSH
55903: LD_INT 1
55905: PPUSH
55906: CALL_OW 234
// end ;
55910: PPOPN 1
55912: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55913: LD_EXP 88
55917: PUSH
55918: LD_EXP 136
55922: AND
55923: IFFALSE 56035
55925: GO 55927
55927: DISABLE
55928: LD_INT 0
55930: PPUSH
55931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55932: LD_ADDR_VAR 0 2
55936: PUSH
55937: LD_INT 22
55939: PUSH
55940: LD_OWVAR 2
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: LD_INT 30
55954: PUSH
55955: LD_INT 27
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 30
55964: PUSH
55965: LD_INT 26
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 30
55974: PUSH
55975: LD_INT 28
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PPUSH
55992: CALL_OW 69
55996: ST_TO_ADDR
// if not tmp then
55997: LD_VAR 0 2
56001: NOT
56002: IFFALSE 56006
// exit ;
56004: GO 56035
// for i in tmp do
56006: LD_ADDR_VAR 0 1
56010: PUSH
56011: LD_VAR 0 2
56015: PUSH
56016: FOR_IN
56017: IFFALSE 56033
// SetLives ( i , 1 ) ;
56019: LD_VAR 0 1
56023: PPUSH
56024: LD_INT 1
56026: PPUSH
56027: CALL_OW 234
56031: GO 56016
56033: POP
56034: POP
// end ;
56035: PPOPN 2
56037: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56038: LD_EXP 88
56042: PUSH
56043: LD_EXP 137
56047: AND
56048: IFFALSE 56335
56050: GO 56052
56052: DISABLE
56053: LD_INT 0
56055: PPUSH
56056: PPUSH
56057: PPUSH
// begin i := rand ( 1 , 7 ) ;
56058: LD_ADDR_VAR 0 1
56062: PUSH
56063: LD_INT 1
56065: PPUSH
56066: LD_INT 7
56068: PPUSH
56069: CALL_OW 12
56073: ST_TO_ADDR
// case i of 1 :
56074: LD_VAR 0 1
56078: PUSH
56079: LD_INT 1
56081: DOUBLE
56082: EQUAL
56083: IFTRUE 56087
56085: GO 56097
56087: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56088: LD_STRING earthquake(getX(game), 0, 32)
56090: PPUSH
56091: CALL_OW 559
56095: GO 56335
56097: LD_INT 2
56099: DOUBLE
56100: EQUAL
56101: IFTRUE 56105
56103: GO 56119
56105: POP
// begin ToLua ( displayStucuk(); ) ;
56106: LD_STRING displayStucuk();
56108: PPUSH
56109: CALL_OW 559
// ResetFog ;
56113: CALL_OW 335
// end ; 3 :
56117: GO 56335
56119: LD_INT 3
56121: DOUBLE
56122: EQUAL
56123: IFTRUE 56127
56125: GO 56231
56127: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56128: LD_ADDR_VAR 0 2
56132: PUSH
56133: LD_INT 22
56135: PUSH
56136: LD_OWVAR 2
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 25
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PPUSH
56159: CALL_OW 69
56163: ST_TO_ADDR
// if not tmp then
56164: LD_VAR 0 2
56168: NOT
56169: IFFALSE 56173
// exit ;
56171: GO 56335
// un := tmp [ rand ( 1 , tmp ) ] ;
56173: LD_ADDR_VAR 0 3
56177: PUSH
56178: LD_VAR 0 2
56182: PUSH
56183: LD_INT 1
56185: PPUSH
56186: LD_VAR 0 2
56190: PPUSH
56191: CALL_OW 12
56195: ARRAY
56196: ST_TO_ADDR
// if Crawls ( un ) then
56197: LD_VAR 0 3
56201: PPUSH
56202: CALL_OW 318
56206: IFFALSE 56217
// ComWalk ( un ) ;
56208: LD_VAR 0 3
56212: PPUSH
56213: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56217: LD_VAR 0 3
56221: PPUSH
56222: LD_INT 8
56224: PPUSH
56225: CALL_OW 336
// end ; 4 :
56229: GO 56335
56231: LD_INT 4
56233: DOUBLE
56234: EQUAL
56235: IFTRUE 56239
56237: GO 56313
56239: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56240: LD_ADDR_VAR 0 2
56244: PUSH
56245: LD_INT 22
56247: PUSH
56248: LD_OWVAR 2
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 30
56259: PUSH
56260: LD_INT 29
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PPUSH
56271: CALL_OW 69
56275: ST_TO_ADDR
// if not tmp then
56276: LD_VAR 0 2
56280: NOT
56281: IFFALSE 56285
// exit ;
56283: GO 56335
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56285: LD_VAR 0 2
56289: PUSH
56290: LD_INT 1
56292: ARRAY
56293: PPUSH
56294: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56298: LD_VAR 0 2
56302: PUSH
56303: LD_INT 1
56305: ARRAY
56306: PPUSH
56307: CALL_OW 65
// end ; 5 .. 7 :
56311: GO 56335
56313: LD_INT 5
56315: DOUBLE
56316: GREATEREQUAL
56317: IFFALSE 56325
56319: LD_INT 7
56321: DOUBLE
56322: LESSEQUAL
56323: IFTRUE 56327
56325: GO 56334
56327: POP
// StreamSibBomb ; end ;
56328: CALL 52572 0 0
56332: GO 56335
56334: POP
// end ;
56335: PPOPN 3
56337: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56338: LD_EXP 88
56342: PUSH
56343: LD_EXP 138
56347: AND
56348: IFFALSE 56504
56350: GO 56352
56352: DISABLE
56353: LD_INT 0
56355: PPUSH
56356: PPUSH
56357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56358: LD_ADDR_VAR 0 2
56362: PUSH
56363: LD_INT 81
56365: PUSH
56366: LD_OWVAR 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 21
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 21
56390: PUSH
56391: LD_INT 2
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PPUSH
56407: CALL_OW 69
56411: ST_TO_ADDR
// if not tmp then
56412: LD_VAR 0 2
56416: NOT
56417: IFFALSE 56421
// exit ;
56419: GO 56504
// p := 0 ;
56421: LD_ADDR_VAR 0 3
56425: PUSH
56426: LD_INT 0
56428: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56429: LD_INT 35
56431: PPUSH
56432: CALL_OW 67
// p := p + 1 ;
56436: LD_ADDR_VAR 0 3
56440: PUSH
56441: LD_VAR 0 3
56445: PUSH
56446: LD_INT 1
56448: PLUS
56449: ST_TO_ADDR
// for i in tmp do
56450: LD_ADDR_VAR 0 1
56454: PUSH
56455: LD_VAR 0 2
56459: PUSH
56460: FOR_IN
56461: IFFALSE 56492
// if GetLives ( i ) < 1000 then
56463: LD_VAR 0 1
56467: PPUSH
56468: CALL_OW 256
56472: PUSH
56473: LD_INT 1000
56475: LESS
56476: IFFALSE 56490
// SetLives ( i , 1000 ) ;
56478: LD_VAR 0 1
56482: PPUSH
56483: LD_INT 1000
56485: PPUSH
56486: CALL_OW 234
56490: GO 56460
56492: POP
56493: POP
// until p > 20 ;
56494: LD_VAR 0 3
56498: PUSH
56499: LD_INT 20
56501: GREATER
56502: IFFALSE 56429
// end ;
56504: PPOPN 3
56506: END
// every 0 0$1 trigger StreamModeActive and sTime do
56507: LD_EXP 88
56511: PUSH
56512: LD_EXP 139
56516: AND
56517: IFFALSE 56552
56519: GO 56521
56521: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
56522: LD_INT 28
56524: PPUSH
56525: LD_OWVAR 2
56529: PPUSH
56530: LD_INT 2
56532: PPUSH
56533: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
56537: LD_INT 30
56539: PPUSH
56540: LD_OWVAR 2
56544: PPUSH
56545: LD_INT 2
56547: PPUSH
56548: CALL_OW 322
// end ;
56552: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
56553: LD_EXP 88
56557: PUSH
56558: LD_EXP 140
56562: AND
56563: IFFALSE 56684
56565: GO 56567
56567: DISABLE
56568: LD_INT 0
56570: PPUSH
56571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56572: LD_ADDR_VAR 0 2
56576: PUSH
56577: LD_INT 22
56579: PUSH
56580: LD_OWVAR 2
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 21
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 23
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: LIST
56620: PPUSH
56621: CALL_OW 69
56625: ST_TO_ADDR
// if not tmp then
56626: LD_VAR 0 2
56630: NOT
56631: IFFALSE 56635
// exit ;
56633: GO 56684
// for i in tmp do
56635: LD_ADDR_VAR 0 1
56639: PUSH
56640: LD_VAR 0 2
56644: PUSH
56645: FOR_IN
56646: IFFALSE 56682
// begin if Crawls ( i ) then
56648: LD_VAR 0 1
56652: PPUSH
56653: CALL_OW 318
56657: IFFALSE 56668
// ComWalk ( i ) ;
56659: LD_VAR 0 1
56663: PPUSH
56664: CALL_OW 138
// SetClass ( i , 2 ) ;
56668: LD_VAR 0 1
56672: PPUSH
56673: LD_INT 2
56675: PPUSH
56676: CALL_OW 336
// end ;
56680: GO 56645
56682: POP
56683: POP
// end ;
56684: PPOPN 2
56686: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
56687: LD_EXP 88
56691: PUSH
56692: LD_EXP 141
56696: AND
56697: IFFALSE 56985
56699: GO 56701
56701: DISABLE
56702: LD_INT 0
56704: PPUSH
56705: PPUSH
56706: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
56707: LD_OWVAR 2
56711: PPUSH
56712: LD_INT 9
56714: PPUSH
56715: LD_INT 1
56717: PPUSH
56718: LD_INT 1
56720: PPUSH
56721: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
56725: LD_INT 9
56727: PPUSH
56728: LD_OWVAR 2
56732: PPUSH
56733: CALL_OW 343
// uc_side := 9 ;
56737: LD_ADDR_OWVAR 20
56741: PUSH
56742: LD_INT 9
56744: ST_TO_ADDR
// uc_nation := 2 ;
56745: LD_ADDR_OWVAR 21
56749: PUSH
56750: LD_INT 2
56752: ST_TO_ADDR
// hc_name := Dark Warrior ;
56753: LD_ADDR_OWVAR 26
56757: PUSH
56758: LD_STRING Dark Warrior
56760: ST_TO_ADDR
// hc_gallery :=  ;
56761: LD_ADDR_OWVAR 33
56765: PUSH
56766: LD_STRING 
56768: ST_TO_ADDR
// hc_noskilllimit := true ;
56769: LD_ADDR_OWVAR 76
56773: PUSH
56774: LD_INT 1
56776: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
56777: LD_ADDR_OWVAR 31
56781: PUSH
56782: LD_INT 30
56784: PUSH
56785: LD_INT 30
56787: PUSH
56788: LD_INT 30
56790: PUSH
56791: LD_INT 30
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// un := CreateHuman ;
56800: LD_ADDR_VAR 0 3
56804: PUSH
56805: CALL_OW 44
56809: ST_TO_ADDR
// hc_noskilllimit := false ;
56810: LD_ADDR_OWVAR 76
56814: PUSH
56815: LD_INT 0
56817: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56818: LD_VAR 0 3
56822: PPUSH
56823: LD_INT 1
56825: PPUSH
56826: CALL_OW 51
// ToLua ( playRanger() ) ;
56830: LD_STRING playRanger()
56832: PPUSH
56833: CALL_OW 559
// p := 0 ;
56837: LD_ADDR_VAR 0 2
56841: PUSH
56842: LD_INT 0
56844: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56845: LD_INT 35
56847: PPUSH
56848: CALL_OW 67
// p := p + 1 ;
56852: LD_ADDR_VAR 0 2
56856: PUSH
56857: LD_VAR 0 2
56861: PUSH
56862: LD_INT 1
56864: PLUS
56865: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56866: LD_VAR 0 3
56870: PPUSH
56871: CALL_OW 256
56875: PUSH
56876: LD_INT 1000
56878: LESS
56879: IFFALSE 56893
// SetLives ( un , 1000 ) ;
56881: LD_VAR 0 3
56885: PPUSH
56886: LD_INT 1000
56888: PPUSH
56889: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56893: LD_VAR 0 3
56897: PPUSH
56898: LD_INT 81
56900: PUSH
56901: LD_OWVAR 2
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 91
56912: PUSH
56913: LD_VAR 0 3
56917: PUSH
56918: LD_INT 30
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PPUSH
56930: CALL_OW 69
56934: PPUSH
56935: LD_VAR 0 3
56939: PPUSH
56940: CALL_OW 74
56944: PPUSH
56945: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56949: LD_VAR 0 2
56953: PUSH
56954: LD_INT 80
56956: GREATER
56957: PUSH
56958: LD_VAR 0 3
56962: PPUSH
56963: CALL_OW 301
56967: OR
56968: IFFALSE 56845
// if un then
56970: LD_VAR 0 3
56974: IFFALSE 56985
// RemoveUnit ( un ) ;
56976: LD_VAR 0 3
56980: PPUSH
56981: CALL_OW 64
// end ;
56985: PPOPN 3
56987: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56988: LD_EXP 142
56992: IFFALSE 57108
56994: GO 56996
56996: DISABLE
56997: LD_INT 0
56999: PPUSH
57000: PPUSH
57001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57002: LD_ADDR_VAR 0 2
57006: PUSH
57007: LD_INT 81
57009: PUSH
57010: LD_OWVAR 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 21
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PPUSH
57033: CALL_OW 69
57037: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57038: LD_STRING playComputer()
57040: PPUSH
57041: CALL_OW 559
// if not tmp then
57045: LD_VAR 0 2
57049: NOT
57050: IFFALSE 57054
// exit ;
57052: GO 57108
// for i in tmp do
57054: LD_ADDR_VAR 0 1
57058: PUSH
57059: LD_VAR 0 2
57063: PUSH
57064: FOR_IN
57065: IFFALSE 57106
// for j := 1 to 4 do
57067: LD_ADDR_VAR 0 3
57071: PUSH
57072: DOUBLE
57073: LD_INT 1
57075: DEC
57076: ST_TO_ADDR
57077: LD_INT 4
57079: PUSH
57080: FOR_TO
57081: IFFALSE 57102
// SetSkill ( i , j , 10 ) ;
57083: LD_VAR 0 1
57087: PPUSH
57088: LD_VAR 0 3
57092: PPUSH
57093: LD_INT 10
57095: PPUSH
57096: CALL_OW 237
57100: GO 57080
57102: POP
57103: POP
57104: GO 57064
57106: POP
57107: POP
// end ;
57108: PPOPN 3
57110: END
// every 0 0$1 trigger s30 do var i , tmp ;
57111: LD_EXP 143
57115: IFFALSE 57184
57117: GO 57119
57119: DISABLE
57120: LD_INT 0
57122: PPUSH
57123: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57124: LD_ADDR_VAR 0 2
57128: PUSH
57129: LD_INT 22
57131: PUSH
57132: LD_OWVAR 2
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PPUSH
57141: CALL_OW 69
57145: ST_TO_ADDR
// if not tmp then
57146: LD_VAR 0 2
57150: NOT
57151: IFFALSE 57155
// exit ;
57153: GO 57184
// for i in tmp do
57155: LD_ADDR_VAR 0 1
57159: PUSH
57160: LD_VAR 0 2
57164: PUSH
57165: FOR_IN
57166: IFFALSE 57182
// SetLives ( i , 300 ) ;
57168: LD_VAR 0 1
57172: PPUSH
57173: LD_INT 300
57175: PPUSH
57176: CALL_OW 234
57180: GO 57165
57182: POP
57183: POP
// end ;
57184: PPOPN 2
57186: END
// every 0 0$1 trigger s60 do var i , tmp ;
57187: LD_EXP 144
57191: IFFALSE 57260
57193: GO 57195
57195: DISABLE
57196: LD_INT 0
57198: PPUSH
57199: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57200: LD_ADDR_VAR 0 2
57204: PUSH
57205: LD_INT 22
57207: PUSH
57208: LD_OWVAR 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PPUSH
57217: CALL_OW 69
57221: ST_TO_ADDR
// if not tmp then
57222: LD_VAR 0 2
57226: NOT
57227: IFFALSE 57231
// exit ;
57229: GO 57260
// for i in tmp do
57231: LD_ADDR_VAR 0 1
57235: PUSH
57236: LD_VAR 0 2
57240: PUSH
57241: FOR_IN
57242: IFFALSE 57258
// SetLives ( i , 600 ) ;
57244: LD_VAR 0 1
57248: PPUSH
57249: LD_INT 600
57251: PPUSH
57252: CALL_OW 234
57256: GO 57241
57258: POP
57259: POP
// end ;
57260: PPOPN 2
57262: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57263: LD_INT 0
57265: PPUSH
// case cmd of 301 :
57266: LD_VAR 0 1
57270: PUSH
57271: LD_INT 301
57273: DOUBLE
57274: EQUAL
57275: IFTRUE 57279
57277: GO 57311
57279: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57280: LD_VAR 0 6
57284: PPUSH
57285: LD_VAR 0 7
57289: PPUSH
57290: LD_VAR 0 8
57294: PPUSH
57295: LD_VAR 0 4
57299: PPUSH
57300: LD_VAR 0 5
57304: PPUSH
57305: CALL 58512 0 5
57309: GO 57432
57311: LD_INT 302
57313: DOUBLE
57314: EQUAL
57315: IFTRUE 57319
57317: GO 57356
57319: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57320: LD_VAR 0 6
57324: PPUSH
57325: LD_VAR 0 7
57329: PPUSH
57330: LD_VAR 0 8
57334: PPUSH
57335: LD_VAR 0 9
57339: PPUSH
57340: LD_VAR 0 4
57344: PPUSH
57345: LD_VAR 0 5
57349: PPUSH
57350: CALL 58603 0 6
57354: GO 57432
57356: LD_INT 303
57358: DOUBLE
57359: EQUAL
57360: IFTRUE 57364
57362: GO 57401
57364: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57365: LD_VAR 0 6
57369: PPUSH
57370: LD_VAR 0 7
57374: PPUSH
57375: LD_VAR 0 8
57379: PPUSH
57380: LD_VAR 0 9
57384: PPUSH
57385: LD_VAR 0 4
57389: PPUSH
57390: LD_VAR 0 5
57394: PPUSH
57395: CALL 57437 0 6
57399: GO 57432
57401: LD_INT 304
57403: DOUBLE
57404: EQUAL
57405: IFTRUE 57409
57407: GO 57431
57409: POP
// hHackTeleport ( unit , x , y ) ; end ;
57410: LD_VAR 0 2
57414: PPUSH
57415: LD_VAR 0 4
57419: PPUSH
57420: LD_VAR 0 5
57424: PPUSH
57425: CALL 59196 0 3
57429: GO 57432
57431: POP
// end ;
57432: LD_VAR 0 12
57436: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57437: LD_INT 0
57439: PPUSH
57440: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57441: LD_VAR 0 1
57445: PUSH
57446: LD_INT 1
57448: LESS
57449: PUSH
57450: LD_VAR 0 1
57454: PUSH
57455: LD_INT 3
57457: GREATER
57458: OR
57459: PUSH
57460: LD_VAR 0 5
57464: PPUSH
57465: LD_VAR 0 6
57469: PPUSH
57470: CALL_OW 428
57474: OR
57475: IFFALSE 57479
// exit ;
57477: GO 58199
// uc_side := your_side ;
57479: LD_ADDR_OWVAR 20
57483: PUSH
57484: LD_OWVAR 2
57488: ST_TO_ADDR
// uc_nation := nation ;
57489: LD_ADDR_OWVAR 21
57493: PUSH
57494: LD_VAR 0 1
57498: ST_TO_ADDR
// bc_level = 1 ;
57499: LD_ADDR_OWVAR 43
57503: PUSH
57504: LD_INT 1
57506: ST_TO_ADDR
// case btype of 1 :
57507: LD_VAR 0 2
57511: PUSH
57512: LD_INT 1
57514: DOUBLE
57515: EQUAL
57516: IFTRUE 57520
57518: GO 57531
57520: POP
// bc_type := b_depot ; 2 :
57521: LD_ADDR_OWVAR 42
57525: PUSH
57526: LD_INT 0
57528: ST_TO_ADDR
57529: GO 58143
57531: LD_INT 2
57533: DOUBLE
57534: EQUAL
57535: IFTRUE 57539
57537: GO 57550
57539: POP
// bc_type := b_warehouse ; 3 :
57540: LD_ADDR_OWVAR 42
57544: PUSH
57545: LD_INT 1
57547: ST_TO_ADDR
57548: GO 58143
57550: LD_INT 3
57552: DOUBLE
57553: EQUAL
57554: IFTRUE 57558
57556: GO 57569
57558: POP
// bc_type := b_lab ; 4 .. 9 :
57559: LD_ADDR_OWVAR 42
57563: PUSH
57564: LD_INT 6
57566: ST_TO_ADDR
57567: GO 58143
57569: LD_INT 4
57571: DOUBLE
57572: GREATEREQUAL
57573: IFFALSE 57581
57575: LD_INT 9
57577: DOUBLE
57578: LESSEQUAL
57579: IFTRUE 57583
57581: GO 57635
57583: POP
// begin bc_type := b_lab_half ;
57584: LD_ADDR_OWVAR 42
57588: PUSH
57589: LD_INT 7
57591: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
57592: LD_ADDR_OWVAR 44
57596: PUSH
57597: LD_INT 10
57599: PUSH
57600: LD_INT 11
57602: PUSH
57603: LD_INT 12
57605: PUSH
57606: LD_INT 15
57608: PUSH
57609: LD_INT 14
57611: PUSH
57612: LD_INT 13
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: PUSH
57623: LD_VAR 0 2
57627: PUSH
57628: LD_INT 3
57630: MINUS
57631: ARRAY
57632: ST_TO_ADDR
// end ; 10 .. 13 :
57633: GO 58143
57635: LD_INT 10
57637: DOUBLE
57638: GREATEREQUAL
57639: IFFALSE 57647
57641: LD_INT 13
57643: DOUBLE
57644: LESSEQUAL
57645: IFTRUE 57649
57647: GO 57726
57649: POP
// begin bc_type := b_lab_full ;
57650: LD_ADDR_OWVAR 42
57654: PUSH
57655: LD_INT 8
57657: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
57658: LD_ADDR_OWVAR 44
57662: PUSH
57663: LD_INT 10
57665: PUSH
57666: LD_INT 12
57668: PUSH
57669: LD_INT 14
57671: PUSH
57672: LD_INT 13
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: PUSH
57681: LD_VAR 0 2
57685: PUSH
57686: LD_INT 9
57688: MINUS
57689: ARRAY
57690: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
57691: LD_ADDR_OWVAR 45
57695: PUSH
57696: LD_INT 11
57698: PUSH
57699: LD_INT 15
57701: PUSH
57702: LD_INT 12
57704: PUSH
57705: LD_INT 15
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: PUSH
57714: LD_VAR 0 2
57718: PUSH
57719: LD_INT 9
57721: MINUS
57722: ARRAY
57723: ST_TO_ADDR
// end ; 14 :
57724: GO 58143
57726: LD_INT 14
57728: DOUBLE
57729: EQUAL
57730: IFTRUE 57734
57732: GO 57745
57734: POP
// bc_type := b_workshop ; 15 :
57735: LD_ADDR_OWVAR 42
57739: PUSH
57740: LD_INT 2
57742: ST_TO_ADDR
57743: GO 58143
57745: LD_INT 15
57747: DOUBLE
57748: EQUAL
57749: IFTRUE 57753
57751: GO 57764
57753: POP
// bc_type := b_factory ; 16 :
57754: LD_ADDR_OWVAR 42
57758: PUSH
57759: LD_INT 3
57761: ST_TO_ADDR
57762: GO 58143
57764: LD_INT 16
57766: DOUBLE
57767: EQUAL
57768: IFTRUE 57772
57770: GO 57783
57772: POP
// bc_type := b_ext_gun ; 17 :
57773: LD_ADDR_OWVAR 42
57777: PUSH
57778: LD_INT 17
57780: ST_TO_ADDR
57781: GO 58143
57783: LD_INT 17
57785: DOUBLE
57786: EQUAL
57787: IFTRUE 57791
57789: GO 57819
57791: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
57792: LD_ADDR_OWVAR 42
57796: PUSH
57797: LD_INT 19
57799: PUSH
57800: LD_INT 23
57802: PUSH
57803: LD_INT 19
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: LIST
57810: PUSH
57811: LD_VAR 0 1
57815: ARRAY
57816: ST_TO_ADDR
57817: GO 58143
57819: LD_INT 18
57821: DOUBLE
57822: EQUAL
57823: IFTRUE 57827
57825: GO 57838
57827: POP
// bc_type := b_ext_radar ; 19 :
57828: LD_ADDR_OWVAR 42
57832: PUSH
57833: LD_INT 20
57835: ST_TO_ADDR
57836: GO 58143
57838: LD_INT 19
57840: DOUBLE
57841: EQUAL
57842: IFTRUE 57846
57844: GO 57857
57846: POP
// bc_type := b_ext_radio ; 20 :
57847: LD_ADDR_OWVAR 42
57851: PUSH
57852: LD_INT 22
57854: ST_TO_ADDR
57855: GO 58143
57857: LD_INT 20
57859: DOUBLE
57860: EQUAL
57861: IFTRUE 57865
57863: GO 57876
57865: POP
// bc_type := b_ext_siberium ; 21 :
57866: LD_ADDR_OWVAR 42
57870: PUSH
57871: LD_INT 21
57873: ST_TO_ADDR
57874: GO 58143
57876: LD_INT 21
57878: DOUBLE
57879: EQUAL
57880: IFTRUE 57884
57882: GO 57895
57884: POP
// bc_type := b_ext_computer ; 22 :
57885: LD_ADDR_OWVAR 42
57889: PUSH
57890: LD_INT 24
57892: ST_TO_ADDR
57893: GO 58143
57895: LD_INT 22
57897: DOUBLE
57898: EQUAL
57899: IFTRUE 57903
57901: GO 57914
57903: POP
// bc_type := b_ext_track ; 23 :
57904: LD_ADDR_OWVAR 42
57908: PUSH
57909: LD_INT 16
57911: ST_TO_ADDR
57912: GO 58143
57914: LD_INT 23
57916: DOUBLE
57917: EQUAL
57918: IFTRUE 57922
57920: GO 57933
57922: POP
// bc_type := b_ext_laser ; 24 :
57923: LD_ADDR_OWVAR 42
57927: PUSH
57928: LD_INT 25
57930: ST_TO_ADDR
57931: GO 58143
57933: LD_INT 24
57935: DOUBLE
57936: EQUAL
57937: IFTRUE 57941
57939: GO 57952
57941: POP
// bc_type := b_control_tower ; 25 :
57942: LD_ADDR_OWVAR 42
57946: PUSH
57947: LD_INT 36
57949: ST_TO_ADDR
57950: GO 58143
57952: LD_INT 25
57954: DOUBLE
57955: EQUAL
57956: IFTRUE 57960
57958: GO 57971
57960: POP
// bc_type := b_breastwork ; 26 :
57961: LD_ADDR_OWVAR 42
57965: PUSH
57966: LD_INT 31
57968: ST_TO_ADDR
57969: GO 58143
57971: LD_INT 26
57973: DOUBLE
57974: EQUAL
57975: IFTRUE 57979
57977: GO 57990
57979: POP
// bc_type := b_bunker ; 27 :
57980: LD_ADDR_OWVAR 42
57984: PUSH
57985: LD_INT 32
57987: ST_TO_ADDR
57988: GO 58143
57990: LD_INT 27
57992: DOUBLE
57993: EQUAL
57994: IFTRUE 57998
57996: GO 58009
57998: POP
// bc_type := b_turret ; 28 :
57999: LD_ADDR_OWVAR 42
58003: PUSH
58004: LD_INT 33
58006: ST_TO_ADDR
58007: GO 58143
58009: LD_INT 28
58011: DOUBLE
58012: EQUAL
58013: IFTRUE 58017
58015: GO 58028
58017: POP
// bc_type := b_armoury ; 29 :
58018: LD_ADDR_OWVAR 42
58022: PUSH
58023: LD_INT 4
58025: ST_TO_ADDR
58026: GO 58143
58028: LD_INT 29
58030: DOUBLE
58031: EQUAL
58032: IFTRUE 58036
58034: GO 58047
58036: POP
// bc_type := b_barracks ; 30 :
58037: LD_ADDR_OWVAR 42
58041: PUSH
58042: LD_INT 5
58044: ST_TO_ADDR
58045: GO 58143
58047: LD_INT 30
58049: DOUBLE
58050: EQUAL
58051: IFTRUE 58055
58053: GO 58066
58055: POP
// bc_type := b_solar_power ; 31 :
58056: LD_ADDR_OWVAR 42
58060: PUSH
58061: LD_INT 27
58063: ST_TO_ADDR
58064: GO 58143
58066: LD_INT 31
58068: DOUBLE
58069: EQUAL
58070: IFTRUE 58074
58072: GO 58085
58074: POP
// bc_type := b_oil_power ; 32 :
58075: LD_ADDR_OWVAR 42
58079: PUSH
58080: LD_INT 26
58082: ST_TO_ADDR
58083: GO 58143
58085: LD_INT 32
58087: DOUBLE
58088: EQUAL
58089: IFTRUE 58093
58091: GO 58104
58093: POP
// bc_type := b_siberite_power ; 33 :
58094: LD_ADDR_OWVAR 42
58098: PUSH
58099: LD_INT 28
58101: ST_TO_ADDR
58102: GO 58143
58104: LD_INT 33
58106: DOUBLE
58107: EQUAL
58108: IFTRUE 58112
58110: GO 58123
58112: POP
// bc_type := b_oil_mine ; 34 :
58113: LD_ADDR_OWVAR 42
58117: PUSH
58118: LD_INT 29
58120: ST_TO_ADDR
58121: GO 58143
58123: LD_INT 34
58125: DOUBLE
58126: EQUAL
58127: IFTRUE 58131
58129: GO 58142
58131: POP
// bc_type := b_siberite_mine ; end ;
58132: LD_ADDR_OWVAR 42
58136: PUSH
58137: LD_INT 30
58139: ST_TO_ADDR
58140: GO 58143
58142: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58143: LD_ADDR_VAR 0 8
58147: PUSH
58148: LD_VAR 0 5
58152: PPUSH
58153: LD_VAR 0 6
58157: PPUSH
58158: LD_VAR 0 3
58162: PPUSH
58163: CALL_OW 47
58167: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58168: LD_OWVAR 42
58172: PUSH
58173: LD_INT 32
58175: PUSH
58176: LD_INT 33
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: IN
58183: IFFALSE 58199
// PlaceWeaponTurret ( b , weapon ) ;
58185: LD_VAR 0 8
58189: PPUSH
58190: LD_VAR 0 4
58194: PPUSH
58195: CALL_OW 431
// end ;
58199: LD_VAR 0 7
58203: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58204: LD_INT 0
58206: PPUSH
58207: PPUSH
58208: PPUSH
58209: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58210: LD_ADDR_VAR 0 4
58214: PUSH
58215: LD_INT 22
58217: PUSH
58218: LD_OWVAR 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: PUSH
58230: LD_INT 30
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 30
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PPUSH
58259: CALL_OW 69
58263: ST_TO_ADDR
// if not tmp then
58264: LD_VAR 0 4
58268: NOT
58269: IFFALSE 58273
// exit ;
58271: GO 58332
// for i in tmp do
58273: LD_ADDR_VAR 0 2
58277: PUSH
58278: LD_VAR 0 4
58282: PUSH
58283: FOR_IN
58284: IFFALSE 58330
// for j = 1 to 3 do
58286: LD_ADDR_VAR 0 3
58290: PUSH
58291: DOUBLE
58292: LD_INT 1
58294: DEC
58295: ST_TO_ADDR
58296: LD_INT 3
58298: PUSH
58299: FOR_TO
58300: IFFALSE 58326
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58302: LD_VAR 0 2
58306: PPUSH
58307: CALL_OW 274
58311: PPUSH
58312: LD_VAR 0 3
58316: PPUSH
58317: LD_INT 99999
58319: PPUSH
58320: CALL_OW 277
58324: GO 58299
58326: POP
58327: POP
58328: GO 58283
58330: POP
58331: POP
// end ;
58332: LD_VAR 0 1
58336: RET
// export function hHackSetLevel10 ; var i , j ; begin
58337: LD_INT 0
58339: PPUSH
58340: PPUSH
58341: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58342: LD_ADDR_VAR 0 2
58346: PUSH
58347: LD_INT 21
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PPUSH
58357: CALL_OW 69
58361: PUSH
58362: FOR_IN
58363: IFFALSE 58415
// if IsSelected ( i ) then
58365: LD_VAR 0 2
58369: PPUSH
58370: CALL_OW 306
58374: IFFALSE 58413
// begin for j := 1 to 4 do
58376: LD_ADDR_VAR 0 3
58380: PUSH
58381: DOUBLE
58382: LD_INT 1
58384: DEC
58385: ST_TO_ADDR
58386: LD_INT 4
58388: PUSH
58389: FOR_TO
58390: IFFALSE 58411
// SetSkill ( i , j , 10 ) ;
58392: LD_VAR 0 2
58396: PPUSH
58397: LD_VAR 0 3
58401: PPUSH
58402: LD_INT 10
58404: PPUSH
58405: CALL_OW 237
58409: GO 58389
58411: POP
58412: POP
// end ;
58413: GO 58362
58415: POP
58416: POP
// end ;
58417: LD_VAR 0 1
58421: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58422: LD_INT 0
58424: PPUSH
58425: PPUSH
58426: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58427: LD_ADDR_VAR 0 2
58431: PUSH
58432: LD_INT 22
58434: PUSH
58435: LD_OWVAR 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 21
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PPUSH
58458: CALL_OW 69
58462: PUSH
58463: FOR_IN
58464: IFFALSE 58505
// begin for j := 1 to 4 do
58466: LD_ADDR_VAR 0 3
58470: PUSH
58471: DOUBLE
58472: LD_INT 1
58474: DEC
58475: ST_TO_ADDR
58476: LD_INT 4
58478: PUSH
58479: FOR_TO
58480: IFFALSE 58501
// SetSkill ( i , j , 10 ) ;
58482: LD_VAR 0 2
58486: PPUSH
58487: LD_VAR 0 3
58491: PPUSH
58492: LD_INT 10
58494: PPUSH
58495: CALL_OW 237
58499: GO 58479
58501: POP
58502: POP
// end ;
58503: GO 58463
58505: POP
58506: POP
// end ;
58507: LD_VAR 0 1
58511: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
58512: LD_INT 0
58514: PPUSH
// uc_side := your_side ;
58515: LD_ADDR_OWVAR 20
58519: PUSH
58520: LD_OWVAR 2
58524: ST_TO_ADDR
// uc_nation := nation ;
58525: LD_ADDR_OWVAR 21
58529: PUSH
58530: LD_VAR 0 1
58534: ST_TO_ADDR
// InitHc ;
58535: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
58539: LD_INT 0
58541: PPUSH
58542: LD_VAR 0 2
58546: PPUSH
58547: LD_VAR 0 3
58551: PPUSH
58552: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
58556: LD_VAR 0 4
58560: PPUSH
58561: LD_VAR 0 5
58565: PPUSH
58566: CALL_OW 428
58570: PUSH
58571: LD_INT 0
58573: EQUAL
58574: IFFALSE 58598
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
58576: CALL_OW 44
58580: PPUSH
58581: LD_VAR 0 4
58585: PPUSH
58586: LD_VAR 0 5
58590: PPUSH
58591: LD_INT 1
58593: PPUSH
58594: CALL_OW 48
// end ;
58598: LD_VAR 0 6
58602: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
58603: LD_INT 0
58605: PPUSH
58606: PPUSH
// uc_side := your_side ;
58607: LD_ADDR_OWVAR 20
58611: PUSH
58612: LD_OWVAR 2
58616: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
58617: LD_VAR 0 1
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 3
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: LD_INT 5
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: IN
58644: IFFALSE 58656
// uc_nation := nation_american else
58646: LD_ADDR_OWVAR 21
58650: PUSH
58651: LD_INT 1
58653: ST_TO_ADDR
58654: GO 58699
// if chassis in [ 11 , 12 , 13 , 14 ] then
58656: LD_VAR 0 1
58660: PUSH
58661: LD_INT 11
58663: PUSH
58664: LD_INT 12
58666: PUSH
58667: LD_INT 13
58669: PUSH
58670: LD_INT 14
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: IN
58679: IFFALSE 58691
// uc_nation := nation_arabian else
58681: LD_ADDR_OWVAR 21
58685: PUSH
58686: LD_INT 2
58688: ST_TO_ADDR
58689: GO 58699
// uc_nation := nation_russian ;
58691: LD_ADDR_OWVAR 21
58695: PUSH
58696: LD_INT 3
58698: ST_TO_ADDR
// vc_chassis := chassis ;
58699: LD_ADDR_OWVAR 37
58703: PUSH
58704: LD_VAR 0 1
58708: ST_TO_ADDR
// vc_engine := engine ;
58709: LD_ADDR_OWVAR 39
58713: PUSH
58714: LD_VAR 0 2
58718: ST_TO_ADDR
// vc_control := control ;
58719: LD_ADDR_OWVAR 38
58723: PUSH
58724: LD_VAR 0 3
58728: ST_TO_ADDR
// vc_weapon := weapon ;
58729: LD_ADDR_OWVAR 40
58733: PUSH
58734: LD_VAR 0 4
58738: ST_TO_ADDR
// un := CreateVehicle ;
58739: LD_ADDR_VAR 0 8
58743: PUSH
58744: CALL_OW 45
58748: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
58749: LD_VAR 0 8
58753: PPUSH
58754: LD_INT 0
58756: PPUSH
58757: LD_INT 5
58759: PPUSH
58760: CALL_OW 12
58764: PPUSH
58765: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
58769: LD_VAR 0 8
58773: PPUSH
58774: LD_VAR 0 5
58778: PPUSH
58779: LD_VAR 0 6
58783: PPUSH
58784: LD_INT 1
58786: PPUSH
58787: CALL_OW 48
// end ;
58791: LD_VAR 0 7
58795: RET
// export hInvincible ; every 1 do
58796: GO 58798
58798: DISABLE
// hInvincible := [ ] ;
58799: LD_ADDR_EXP 145
58803: PUSH
58804: EMPTY
58805: ST_TO_ADDR
58806: END
// every 10 do var i ;
58807: GO 58809
58809: DISABLE
58810: LD_INT 0
58812: PPUSH
// begin enable ;
58813: ENABLE
// if not hInvincible then
58814: LD_EXP 145
58818: NOT
58819: IFFALSE 58823
// exit ;
58821: GO 58867
// for i in hInvincible do
58823: LD_ADDR_VAR 0 1
58827: PUSH
58828: LD_EXP 145
58832: PUSH
58833: FOR_IN
58834: IFFALSE 58865
// if GetLives ( i ) < 1000 then
58836: LD_VAR 0 1
58840: PPUSH
58841: CALL_OW 256
58845: PUSH
58846: LD_INT 1000
58848: LESS
58849: IFFALSE 58863
// SetLives ( i , 1000 ) ;
58851: LD_VAR 0 1
58855: PPUSH
58856: LD_INT 1000
58858: PPUSH
58859: CALL_OW 234
58863: GO 58833
58865: POP
58866: POP
// end ;
58867: PPOPN 1
58869: END
// export function hHackInvincible ; var i ; begin
58870: LD_INT 0
58872: PPUSH
58873: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58874: LD_ADDR_VAR 0 2
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: LD_INT 21
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 21
58894: PUSH
58895: LD_INT 2
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: PPUSH
58907: CALL_OW 69
58911: PUSH
58912: FOR_IN
58913: IFFALSE 58974
// if IsSelected ( i ) then
58915: LD_VAR 0 2
58919: PPUSH
58920: CALL_OW 306
58924: IFFALSE 58972
// begin if i in hInvincible then
58926: LD_VAR 0 2
58930: PUSH
58931: LD_EXP 145
58935: IN
58936: IFFALSE 58956
// hInvincible := hInvincible diff i else
58938: LD_ADDR_EXP 145
58942: PUSH
58943: LD_EXP 145
58947: PUSH
58948: LD_VAR 0 2
58952: DIFF
58953: ST_TO_ADDR
58954: GO 58972
// hInvincible := hInvincible union i ;
58956: LD_ADDR_EXP 145
58960: PUSH
58961: LD_EXP 145
58965: PUSH
58966: LD_VAR 0 2
58970: UNION
58971: ST_TO_ADDR
// end ;
58972: GO 58912
58974: POP
58975: POP
// end ;
58976: LD_VAR 0 1
58980: RET
// export function hHackInvisible ; var i , j ; begin
58981: LD_INT 0
58983: PPUSH
58984: PPUSH
58985: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58986: LD_ADDR_VAR 0 2
58990: PUSH
58991: LD_INT 21
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PPUSH
59001: CALL_OW 69
59005: PUSH
59006: FOR_IN
59007: IFFALSE 59031
// if IsSelected ( i ) then
59009: LD_VAR 0 2
59013: PPUSH
59014: CALL_OW 306
59018: IFFALSE 59029
// ComForceInvisible ( i ) ;
59020: LD_VAR 0 2
59024: PPUSH
59025: CALL_OW 496
59029: GO 59006
59031: POP
59032: POP
// end ;
59033: LD_VAR 0 1
59037: RET
// export function hHackChangeYourSide ; begin
59038: LD_INT 0
59040: PPUSH
// if your_side = 8 then
59041: LD_OWVAR 2
59045: PUSH
59046: LD_INT 8
59048: EQUAL
59049: IFFALSE 59061
// your_side := 0 else
59051: LD_ADDR_OWVAR 2
59055: PUSH
59056: LD_INT 0
59058: ST_TO_ADDR
59059: GO 59075
// your_side := your_side + 1 ;
59061: LD_ADDR_OWVAR 2
59065: PUSH
59066: LD_OWVAR 2
59070: PUSH
59071: LD_INT 1
59073: PLUS
59074: ST_TO_ADDR
// end ;
59075: LD_VAR 0 1
59079: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59080: LD_INT 0
59082: PPUSH
59083: PPUSH
59084: PPUSH
// for i in all_units do
59085: LD_ADDR_VAR 0 2
59089: PUSH
59090: LD_OWVAR 3
59094: PUSH
59095: FOR_IN
59096: IFFALSE 59174
// if IsSelected ( i ) then
59098: LD_VAR 0 2
59102: PPUSH
59103: CALL_OW 306
59107: IFFALSE 59172
// begin j := GetSide ( i ) ;
59109: LD_ADDR_VAR 0 3
59113: PUSH
59114: LD_VAR 0 2
59118: PPUSH
59119: CALL_OW 255
59123: ST_TO_ADDR
// if j = 8 then
59124: LD_VAR 0 3
59128: PUSH
59129: LD_INT 8
59131: EQUAL
59132: IFFALSE 59144
// j := 0 else
59134: LD_ADDR_VAR 0 3
59138: PUSH
59139: LD_INT 0
59141: ST_TO_ADDR
59142: GO 59158
// j := j + 1 ;
59144: LD_ADDR_VAR 0 3
59148: PUSH
59149: LD_VAR 0 3
59153: PUSH
59154: LD_INT 1
59156: PLUS
59157: ST_TO_ADDR
// SetSide ( i , j ) ;
59158: LD_VAR 0 2
59162: PPUSH
59163: LD_VAR 0 3
59167: PPUSH
59168: CALL_OW 235
// end ;
59172: GO 59095
59174: POP
59175: POP
// end ;
59176: LD_VAR 0 1
59180: RET
// export function hHackFog ; begin
59181: LD_INT 0
59183: PPUSH
// FogOff ( true ) ;
59184: LD_INT 1
59186: PPUSH
59187: CALL_OW 344
// end ;
59191: LD_VAR 0 1
59195: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59196: LD_INT 0
59198: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59199: LD_VAR 0 1
59203: PPUSH
59204: LD_VAR 0 2
59208: PPUSH
59209: LD_VAR 0 3
59213: PPUSH
59214: LD_INT 1
59216: PPUSH
59217: LD_INT 1
59219: PPUSH
59220: CALL_OW 483
// CenterOnXY ( x , y ) ;
59224: LD_VAR 0 2
59228: PPUSH
59229: LD_VAR 0 3
59233: PPUSH
59234: CALL_OW 84
// end ; end_of_file
59238: LD_VAR 0 4
59242: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59243: LD_INT 0
59245: PPUSH
59246: PPUSH
59247: PPUSH
59248: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 264
59258: PUSH
59259: LD_EXP 72
59263: EQUAL
59264: IFFALSE 59336
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59266: LD_INT 68
59268: PPUSH
59269: LD_VAR 0 1
59273: PPUSH
59274: CALL_OW 255
59278: PPUSH
59279: CALL_OW 321
59283: PUSH
59284: LD_INT 2
59286: EQUAL
59287: IFFALSE 59299
// eff := 70 else
59289: LD_ADDR_VAR 0 4
59293: PUSH
59294: LD_INT 70
59296: ST_TO_ADDR
59297: GO 59307
// eff := 30 ;
59299: LD_ADDR_VAR 0 4
59303: PUSH
59304: LD_INT 30
59306: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59307: LD_VAR 0 1
59311: PPUSH
59312: CALL_OW 250
59316: PPUSH
59317: LD_VAR 0 1
59321: PPUSH
59322: CALL_OW 251
59326: PPUSH
59327: LD_VAR 0 4
59331: PPUSH
59332: CALL_OW 495
// end ; end ;
59336: LD_VAR 0 2
59340: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59341: LD_INT 0
59343: PPUSH
// end ;
59344: LD_VAR 0 4
59348: RET
// export function SOS_Command ( cmd ) ; begin
59349: LD_INT 0
59351: PPUSH
// end ;
59352: LD_VAR 0 2
59356: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59357: LD_INT 0
59359: PPUSH
// end ;
59360: LD_VAR 0 6
59364: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59365: LD_INT 0
59367: PPUSH
59368: PPUSH
// if not vehicle or not factory then
59369: LD_VAR 0 1
59373: NOT
59374: PUSH
59375: LD_VAR 0 2
59379: NOT
59380: OR
59381: IFFALSE 59385
// exit ;
59383: GO 59616
// if factoryWaypoints >= factory then
59385: LD_EXP 146
59389: PUSH
59390: LD_VAR 0 2
59394: GREATEREQUAL
59395: IFFALSE 59616
// if factoryWaypoints [ factory ] then
59397: LD_EXP 146
59401: PUSH
59402: LD_VAR 0 2
59406: ARRAY
59407: IFFALSE 59616
// begin if GetControl ( vehicle ) = control_manual then
59409: LD_VAR 0 1
59413: PPUSH
59414: CALL_OW 263
59418: PUSH
59419: LD_INT 1
59421: EQUAL
59422: IFFALSE 59503
// begin driver := IsDrivenBy ( vehicle ) ;
59424: LD_ADDR_VAR 0 4
59428: PUSH
59429: LD_VAR 0 1
59433: PPUSH
59434: CALL_OW 311
59438: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59439: LD_VAR 0 4
59443: PPUSH
59444: LD_EXP 146
59448: PUSH
59449: LD_VAR 0 2
59453: ARRAY
59454: PUSH
59455: LD_INT 3
59457: ARRAY
59458: PPUSH
59459: LD_EXP 146
59463: PUSH
59464: LD_VAR 0 2
59468: ARRAY
59469: PUSH
59470: LD_INT 4
59472: ARRAY
59473: PPUSH
59474: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59478: LD_VAR 0 4
59482: PPUSH
59483: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59487: LD_VAR 0 4
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL_OW 180
// end else
59501: GO 59616
// if GetControl ( vehicle ) = control_remote then
59503: LD_VAR 0 1
59507: PPUSH
59508: CALL_OW 263
59512: PUSH
59513: LD_INT 2
59515: EQUAL
59516: IFFALSE 59577
// begin wait ( 0 0$2 ) ;
59518: LD_INT 70
59520: PPUSH
59521: CALL_OW 67
// if Connect ( vehicle ) then
59525: LD_VAR 0 1
59529: PPUSH
59530: CALL 12340 0 1
59534: IFFALSE 59575
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59536: LD_VAR 0 1
59540: PPUSH
59541: LD_EXP 146
59545: PUSH
59546: LD_VAR 0 2
59550: ARRAY
59551: PUSH
59552: LD_INT 3
59554: ARRAY
59555: PPUSH
59556: LD_EXP 146
59560: PUSH
59561: LD_VAR 0 2
59565: ARRAY
59566: PUSH
59567: LD_INT 4
59569: ARRAY
59570: PPUSH
59571: CALL_OW 171
// end else
59575: GO 59616
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59577: LD_VAR 0 1
59581: PPUSH
59582: LD_EXP 146
59586: PUSH
59587: LD_VAR 0 2
59591: ARRAY
59592: PUSH
59593: LD_INT 3
59595: ARRAY
59596: PPUSH
59597: LD_EXP 146
59601: PUSH
59602: LD_VAR 0 2
59606: ARRAY
59607: PUSH
59608: LD_INT 4
59610: ARRAY
59611: PPUSH
59612: CALL_OW 171
// end ; end ;
59616: LD_VAR 0 3
59620: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59621: LD_INT 0
59623: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59624: LD_VAR 0 1
59628: PUSH
59629: LD_INT 250
59631: EQUAL
59632: PUSH
59633: LD_VAR 0 2
59637: PPUSH
59638: CALL_OW 264
59642: PUSH
59643: LD_EXP 75
59647: EQUAL
59648: AND
59649: IFFALSE 59670
// MinerPlaceMine ( unit , x , y ) ;
59651: LD_VAR 0 2
59655: PPUSH
59656: LD_VAR 0 4
59660: PPUSH
59661: LD_VAR 0 5
59665: PPUSH
59666: CALL 62398 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59670: LD_VAR 0 1
59674: PUSH
59675: LD_INT 251
59677: EQUAL
59678: PUSH
59679: LD_VAR 0 2
59683: PPUSH
59684: CALL_OW 264
59688: PUSH
59689: LD_EXP 75
59693: EQUAL
59694: AND
59695: IFFALSE 59716
// MinerDetonateMine ( unit , x , y ) ;
59697: LD_VAR 0 2
59701: PPUSH
59702: LD_VAR 0 4
59706: PPUSH
59707: LD_VAR 0 5
59711: PPUSH
59712: CALL 62675 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59716: LD_VAR 0 1
59720: PUSH
59721: LD_INT 252
59723: EQUAL
59724: PUSH
59725: LD_VAR 0 2
59729: PPUSH
59730: CALL_OW 264
59734: PUSH
59735: LD_EXP 75
59739: EQUAL
59740: AND
59741: IFFALSE 59762
// MinerCreateMinefield ( unit , x , y ) ;
59743: LD_VAR 0 2
59747: PPUSH
59748: LD_VAR 0 4
59752: PPUSH
59753: LD_VAR 0 5
59757: PPUSH
59758: CALL 63092 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59762: LD_VAR 0 1
59766: PUSH
59767: LD_INT 253
59769: EQUAL
59770: PUSH
59771: LD_VAR 0 2
59775: PPUSH
59776: CALL_OW 257
59780: PUSH
59781: LD_INT 5
59783: EQUAL
59784: AND
59785: IFFALSE 59806
// ComBinocular ( unit , x , y ) ;
59787: LD_VAR 0 2
59791: PPUSH
59792: LD_VAR 0 4
59796: PPUSH
59797: LD_VAR 0 5
59801: PPUSH
59802: CALL 63463 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59806: LD_VAR 0 1
59810: PUSH
59811: LD_INT 254
59813: EQUAL
59814: PUSH
59815: LD_VAR 0 2
59819: PPUSH
59820: CALL_OW 264
59824: PUSH
59825: LD_EXP 70
59829: EQUAL
59830: AND
59831: PUSH
59832: LD_VAR 0 3
59836: PPUSH
59837: CALL_OW 263
59841: PUSH
59842: LD_INT 3
59844: EQUAL
59845: AND
59846: IFFALSE 59862
// HackDestroyVehicle ( unit , selectedUnit ) ;
59848: LD_VAR 0 2
59852: PPUSH
59853: LD_VAR 0 3
59857: PPUSH
59858: CALL 61758 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59862: LD_VAR 0 1
59866: PUSH
59867: LD_INT 255
59869: EQUAL
59870: PUSH
59871: LD_VAR 0 2
59875: PPUSH
59876: CALL_OW 264
59880: PUSH
59881: LD_INT 14
59883: PUSH
59884: LD_INT 53
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: IN
59891: AND
59892: PUSH
59893: LD_VAR 0 4
59897: PPUSH
59898: LD_VAR 0 5
59902: PPUSH
59903: CALL_OW 488
59907: AND
59908: IFFALSE 59932
// CutTreeXYR ( unit , x , y , 12 ) ;
59910: LD_VAR 0 2
59914: PPUSH
59915: LD_VAR 0 4
59919: PPUSH
59920: LD_VAR 0 5
59924: PPUSH
59925: LD_INT 12
59927: PPUSH
59928: CALL 60324 0 4
// if cmd = 256 then
59932: LD_VAR 0 1
59936: PUSH
59937: LD_INT 256
59939: EQUAL
59940: IFFALSE 59961
// SetFactoryWaypoint ( unit , x , y ) ;
59942: LD_VAR 0 2
59946: PPUSH
59947: LD_VAR 0 4
59951: PPUSH
59952: LD_VAR 0 5
59956: PPUSH
59957: CALL 59966 0 3
// end ;
59961: LD_VAR 0 6
59965: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59966: LD_INT 0
59968: PPUSH
59969: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59970: LD_VAR 0 1
59974: NOT
59975: PUSH
59976: LD_VAR 0 2
59980: PPUSH
59981: LD_VAR 0 3
59985: PPUSH
59986: CALL_OW 488
59990: NOT
59991: OR
59992: PUSH
59993: LD_VAR 0 1
59997: PPUSH
59998: CALL_OW 266
60002: PUSH
60003: LD_INT 3
60005: NONEQUAL
60006: PUSH
60007: LD_VAR 0 1
60011: PPUSH
60012: CALL_OW 247
60016: PUSH
60017: LD_INT 1
60019: EQUAL
60020: NOT
60021: AND
60022: OR
60023: IFFALSE 60027
// exit ;
60025: GO 60176
// if GetType ( factory ) = unit_human then
60027: LD_VAR 0 1
60031: PPUSH
60032: CALL_OW 247
60036: PUSH
60037: LD_INT 1
60039: EQUAL
60040: IFFALSE 60057
// factory := IsInUnit ( factory ) ;
60042: LD_ADDR_VAR 0 1
60046: PUSH
60047: LD_VAR 0 1
60051: PPUSH
60052: CALL_OW 310
60056: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
60057: LD_VAR 0 1
60061: PPUSH
60062: CALL_OW 266
60066: PUSH
60067: LD_INT 3
60069: NONEQUAL
60070: IFFALSE 60074
// exit ;
60072: GO 60176
// if HexInfo ( x , y ) = factory then
60074: LD_VAR 0 2
60078: PPUSH
60079: LD_VAR 0 3
60083: PPUSH
60084: CALL_OW 428
60088: PUSH
60089: LD_VAR 0 1
60093: EQUAL
60094: IFFALSE 60121
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
60096: LD_ADDR_EXP 146
60100: PUSH
60101: LD_EXP 146
60105: PPUSH
60106: LD_VAR 0 1
60110: PPUSH
60111: LD_INT 0
60113: PPUSH
60114: CALL_OW 1
60118: ST_TO_ADDR
60119: GO 60172
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
60121: LD_ADDR_EXP 146
60125: PUSH
60126: LD_EXP 146
60130: PPUSH
60131: LD_VAR 0 1
60135: PPUSH
60136: LD_VAR 0 1
60140: PPUSH
60141: CALL_OW 255
60145: PUSH
60146: LD_VAR 0 1
60150: PUSH
60151: LD_VAR 0 2
60155: PUSH
60156: LD_VAR 0 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: PPUSH
60167: CALL_OW 1
60171: ST_TO_ADDR
// UpdateFactoryWaypoints ;
60172: CALL 60181 0 0
// end ;
60176: LD_VAR 0 4
60180: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
60181: LD_INT 0
60183: PPUSH
60184: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
60185: LD_STRING resetFactoryWaypoint();
60187: PPUSH
60188: CALL_OW 559
// if factoryWaypoints then
60192: LD_EXP 146
60196: IFFALSE 60319
// begin for i := 1 to factoryWaypoints do
60198: LD_ADDR_VAR 0 2
60202: PUSH
60203: DOUBLE
60204: LD_INT 1
60206: DEC
60207: ST_TO_ADDR
60208: LD_EXP 146
60212: PUSH
60213: FOR_TO
60214: IFFALSE 60317
// if factoryWaypoints [ i ] then
60216: LD_EXP 146
60220: PUSH
60221: LD_VAR 0 2
60225: ARRAY
60226: IFFALSE 60315
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
60228: LD_STRING setFactoryWaypointXY(
60230: PUSH
60231: LD_EXP 146
60235: PUSH
60236: LD_VAR 0 2
60240: ARRAY
60241: PUSH
60242: LD_INT 1
60244: ARRAY
60245: STR
60246: PUSH
60247: LD_STRING ,
60249: STR
60250: PUSH
60251: LD_EXP 146
60255: PUSH
60256: LD_VAR 0 2
60260: ARRAY
60261: PUSH
60262: LD_INT 2
60264: ARRAY
60265: STR
60266: PUSH
60267: LD_STRING ,
60269: STR
60270: PUSH
60271: LD_EXP 146
60275: PUSH
60276: LD_VAR 0 2
60280: ARRAY
60281: PUSH
60282: LD_INT 3
60284: ARRAY
60285: STR
60286: PUSH
60287: LD_STRING ,
60289: STR
60290: PUSH
60291: LD_EXP 146
60295: PUSH
60296: LD_VAR 0 2
60300: ARRAY
60301: PUSH
60302: LD_INT 4
60304: ARRAY
60305: STR
60306: PUSH
60307: LD_STRING )
60309: STR
60310: PPUSH
60311: CALL_OW 559
60315: GO 60213
60317: POP
60318: POP
// end ; end ;
60319: LD_VAR 0 1
60323: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60324: LD_INT 0
60326: PPUSH
60327: PPUSH
60328: PPUSH
60329: PPUSH
60330: PPUSH
60331: PPUSH
60332: PPUSH
60333: PPUSH
60334: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
60335: LD_VAR 0 1
60339: NOT
60340: PUSH
60341: LD_VAR 0 2
60345: PPUSH
60346: LD_VAR 0 3
60350: PPUSH
60351: CALL_OW 488
60355: NOT
60356: OR
60357: PUSH
60358: LD_VAR 0 4
60362: NOT
60363: OR
60364: IFFALSE 60368
// exit ;
60366: GO 60708
// list := [ ] ;
60368: LD_ADDR_VAR 0 13
60372: PUSH
60373: EMPTY
60374: ST_TO_ADDR
// if x - r < 0 then
60375: LD_VAR 0 2
60379: PUSH
60380: LD_VAR 0 4
60384: MINUS
60385: PUSH
60386: LD_INT 0
60388: LESS
60389: IFFALSE 60401
// min_x := 0 else
60391: LD_ADDR_VAR 0 7
60395: PUSH
60396: LD_INT 0
60398: ST_TO_ADDR
60399: GO 60417
// min_x := x - r ;
60401: LD_ADDR_VAR 0 7
60405: PUSH
60406: LD_VAR 0 2
60410: PUSH
60411: LD_VAR 0 4
60415: MINUS
60416: ST_TO_ADDR
// if y - r < 0 then
60417: LD_VAR 0 3
60421: PUSH
60422: LD_VAR 0 4
60426: MINUS
60427: PUSH
60428: LD_INT 0
60430: LESS
60431: IFFALSE 60443
// min_y := 0 else
60433: LD_ADDR_VAR 0 8
60437: PUSH
60438: LD_INT 0
60440: ST_TO_ADDR
60441: GO 60459
// min_y := y - r ;
60443: LD_ADDR_VAR 0 8
60447: PUSH
60448: LD_VAR 0 3
60452: PUSH
60453: LD_VAR 0 4
60457: MINUS
60458: ST_TO_ADDR
// max_x := x + r ;
60459: LD_ADDR_VAR 0 9
60463: PUSH
60464: LD_VAR 0 2
60468: PUSH
60469: LD_VAR 0 4
60473: PLUS
60474: ST_TO_ADDR
// max_y := y + r ;
60475: LD_ADDR_VAR 0 10
60479: PUSH
60480: LD_VAR 0 3
60484: PUSH
60485: LD_VAR 0 4
60489: PLUS
60490: ST_TO_ADDR
// for _x = min_x to max_x do
60491: LD_ADDR_VAR 0 11
60495: PUSH
60496: DOUBLE
60497: LD_VAR 0 7
60501: DEC
60502: ST_TO_ADDR
60503: LD_VAR 0 9
60507: PUSH
60508: FOR_TO
60509: IFFALSE 60626
// for _y = min_y to max_y do
60511: LD_ADDR_VAR 0 12
60515: PUSH
60516: DOUBLE
60517: LD_VAR 0 8
60521: DEC
60522: ST_TO_ADDR
60523: LD_VAR 0 10
60527: PUSH
60528: FOR_TO
60529: IFFALSE 60622
// begin if not ValidHex ( _x , _y ) then
60531: LD_VAR 0 11
60535: PPUSH
60536: LD_VAR 0 12
60540: PPUSH
60541: CALL_OW 488
60545: NOT
60546: IFFALSE 60550
// continue ;
60548: GO 60528
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60550: LD_VAR 0 11
60554: PPUSH
60555: LD_VAR 0 12
60559: PPUSH
60560: CALL_OW 351
60564: PUSH
60565: LD_VAR 0 11
60569: PPUSH
60570: LD_VAR 0 12
60574: PPUSH
60575: CALL_OW 554
60579: AND
60580: IFFALSE 60620
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60582: LD_ADDR_VAR 0 13
60586: PUSH
60587: LD_VAR 0 13
60591: PPUSH
60592: LD_VAR 0 13
60596: PUSH
60597: LD_INT 1
60599: PLUS
60600: PPUSH
60601: LD_VAR 0 11
60605: PUSH
60606: LD_VAR 0 12
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PPUSH
60615: CALL_OW 2
60619: ST_TO_ADDR
// end ;
60620: GO 60528
60622: POP
60623: POP
60624: GO 60508
60626: POP
60627: POP
// if not list then
60628: LD_VAR 0 13
60632: NOT
60633: IFFALSE 60637
// exit ;
60635: GO 60708
// for i in list do
60637: LD_ADDR_VAR 0 6
60641: PUSH
60642: LD_VAR 0 13
60646: PUSH
60647: FOR_IN
60648: IFFALSE 60706
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60650: LD_VAR 0 1
60654: PPUSH
60655: LD_STRING M
60657: PUSH
60658: LD_VAR 0 6
60662: PUSH
60663: LD_INT 1
60665: ARRAY
60666: PUSH
60667: LD_VAR 0 6
60671: PUSH
60672: LD_INT 2
60674: ARRAY
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: PPUSH
60700: CALL_OW 447
60704: GO 60647
60706: POP
60707: POP
// end ;
60708: LD_VAR 0 5
60712: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
60713: LD_EXP 147
60717: NOT
60718: IFFALSE 60768
60720: GO 60722
60722: DISABLE
// begin initHack := true ;
60723: LD_ADDR_EXP 147
60727: PUSH
60728: LD_INT 1
60730: ST_TO_ADDR
// hackTanks := [ ] ;
60731: LD_ADDR_EXP 148
60735: PUSH
60736: EMPTY
60737: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
60738: LD_ADDR_EXP 149
60742: PUSH
60743: EMPTY
60744: ST_TO_ADDR
// hackLimit := 3 ;
60745: LD_ADDR_EXP 150
60749: PUSH
60750: LD_INT 3
60752: ST_TO_ADDR
// hackDist := 12 ;
60753: LD_ADDR_EXP 151
60757: PUSH
60758: LD_INT 12
60760: ST_TO_ADDR
// hackCounter := [ ] ;
60761: LD_ADDR_EXP 152
60765: PUSH
60766: EMPTY
60767: ST_TO_ADDR
// end ;
60768: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
60769: LD_EXP 147
60773: PUSH
60774: LD_INT 34
60776: PUSH
60777: LD_EXP 70
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PPUSH
60786: CALL_OW 69
60790: AND
60791: IFFALSE 61046
60793: GO 60795
60795: DISABLE
60796: LD_INT 0
60798: PPUSH
60799: PPUSH
// begin enable ;
60800: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
60801: LD_ADDR_VAR 0 1
60805: PUSH
60806: LD_INT 34
60808: PUSH
60809: LD_EXP 70
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PPUSH
60818: CALL_OW 69
60822: PUSH
60823: FOR_IN
60824: IFFALSE 61044
// begin if not i in hackTanks then
60826: LD_VAR 0 1
60830: PUSH
60831: LD_EXP 148
60835: IN
60836: NOT
60837: IFFALSE 60920
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
60839: LD_ADDR_EXP 148
60843: PUSH
60844: LD_EXP 148
60848: PPUSH
60849: LD_EXP 148
60853: PUSH
60854: LD_INT 1
60856: PLUS
60857: PPUSH
60858: LD_VAR 0 1
60862: PPUSH
60863: CALL_OW 1
60867: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
60868: LD_ADDR_EXP 149
60872: PUSH
60873: LD_EXP 149
60877: PPUSH
60878: LD_EXP 149
60882: PUSH
60883: LD_INT 1
60885: PLUS
60886: PPUSH
60887: EMPTY
60888: PPUSH
60889: CALL_OW 1
60893: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
60894: LD_ADDR_EXP 152
60898: PUSH
60899: LD_EXP 152
60903: PPUSH
60904: LD_EXP 152
60908: PUSH
60909: LD_INT 1
60911: PLUS
60912: PPUSH
60913: EMPTY
60914: PPUSH
60915: CALL_OW 1
60919: ST_TO_ADDR
// end ; if not IsOk ( i ) then
60920: LD_VAR 0 1
60924: PPUSH
60925: CALL_OW 302
60929: NOT
60930: IFFALSE 60943
// begin HackUnlinkAll ( i ) ;
60932: LD_VAR 0 1
60936: PPUSH
60937: CALL 61049 0 1
// continue ;
60941: GO 60823
// end ; HackCheckCapturedStatus ( i ) ;
60943: LD_VAR 0 1
60947: PPUSH
60948: CALL 61492 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
60952: LD_ADDR_VAR 0 2
60956: PUSH
60957: LD_INT 81
60959: PUSH
60960: LD_VAR 0 1
60964: PPUSH
60965: CALL_OW 255
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 33
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 91
60986: PUSH
60987: LD_VAR 0 1
60991: PUSH
60992: LD_EXP 151
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 50
61004: PUSH
61005: EMPTY
61006: LIST
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: PPUSH
61014: CALL_OW 69
61018: ST_TO_ADDR
// if not tmp then
61019: LD_VAR 0 2
61023: NOT
61024: IFFALSE 61028
// continue ;
61026: GO 60823
// HackLink ( i , tmp ) ;
61028: LD_VAR 0 1
61032: PPUSH
61033: LD_VAR 0 2
61037: PPUSH
61038: CALL 61185 0 2
// end ;
61042: GO 60823
61044: POP
61045: POP
// end ;
61046: PPOPN 2
61048: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61049: LD_INT 0
61051: PPUSH
61052: PPUSH
61053: PPUSH
// if not hack in hackTanks then
61054: LD_VAR 0 1
61058: PUSH
61059: LD_EXP 148
61063: IN
61064: NOT
61065: IFFALSE 61069
// exit ;
61067: GO 61180
// index := GetElementIndex ( hackTanks , hack ) ;
61069: LD_ADDR_VAR 0 4
61073: PUSH
61074: LD_EXP 148
61078: PPUSH
61079: LD_VAR 0 1
61083: PPUSH
61084: CALL 9154 0 2
61088: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61089: LD_EXP 149
61093: PUSH
61094: LD_VAR 0 4
61098: ARRAY
61099: IFFALSE 61180
// begin for i in hackTanksCaptured [ index ] do
61101: LD_ADDR_VAR 0 3
61105: PUSH
61106: LD_EXP 149
61110: PUSH
61111: LD_VAR 0 4
61115: ARRAY
61116: PUSH
61117: FOR_IN
61118: IFFALSE 61144
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61120: LD_VAR 0 3
61124: PUSH
61125: LD_INT 1
61127: ARRAY
61128: PPUSH
61129: LD_VAR 0 3
61133: PUSH
61134: LD_INT 2
61136: ARRAY
61137: PPUSH
61138: CALL_OW 235
61142: GO 61117
61144: POP
61145: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61146: LD_ADDR_EXP 149
61150: PUSH
61151: LD_EXP 149
61155: PPUSH
61156: LD_VAR 0 4
61160: PPUSH
61161: EMPTY
61162: PPUSH
61163: CALL_OW 1
61167: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61168: LD_VAR 0 1
61172: PPUSH
61173: LD_INT 0
61175: PPUSH
61176: CALL_OW 505
// end ; end ;
61180: LD_VAR 0 2
61184: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61185: LD_INT 0
61187: PPUSH
61188: PPUSH
61189: PPUSH
// if not hack in hackTanks or not vehicles then
61190: LD_VAR 0 1
61194: PUSH
61195: LD_EXP 148
61199: IN
61200: NOT
61201: PUSH
61202: LD_VAR 0 2
61206: NOT
61207: OR
61208: IFFALSE 61212
// exit ;
61210: GO 61487
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61212: LD_ADDR_VAR 0 2
61216: PUSH
61217: LD_VAR 0 1
61221: PPUSH
61222: LD_VAR 0 2
61226: PPUSH
61227: LD_INT 1
61229: PPUSH
61230: LD_INT 1
61232: PPUSH
61233: CALL 9804 0 4
61237: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61238: LD_ADDR_VAR 0 5
61242: PUSH
61243: LD_EXP 148
61247: PPUSH
61248: LD_VAR 0 1
61252: PPUSH
61253: CALL 9154 0 2
61257: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61258: LD_EXP 149
61262: PUSH
61263: LD_VAR 0 5
61267: ARRAY
61268: PUSH
61269: LD_EXP 150
61273: LESS
61274: IFFALSE 61463
// begin for i := 1 to vehicles do
61276: LD_ADDR_VAR 0 4
61280: PUSH
61281: DOUBLE
61282: LD_INT 1
61284: DEC
61285: ST_TO_ADDR
61286: LD_VAR 0 2
61290: PUSH
61291: FOR_TO
61292: IFFALSE 61461
// begin if hackTanksCaptured [ index ] = hackLimit then
61294: LD_EXP 149
61298: PUSH
61299: LD_VAR 0 5
61303: ARRAY
61304: PUSH
61305: LD_EXP 150
61309: EQUAL
61310: IFFALSE 61314
// break ;
61312: GO 61461
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61314: LD_ADDR_EXP 152
61318: PUSH
61319: LD_EXP 152
61323: PPUSH
61324: LD_VAR 0 5
61328: PPUSH
61329: LD_EXP 152
61333: PUSH
61334: LD_VAR 0 5
61338: ARRAY
61339: PUSH
61340: LD_INT 1
61342: PLUS
61343: PPUSH
61344: CALL_OW 1
61348: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61349: LD_ADDR_EXP 149
61353: PUSH
61354: LD_EXP 149
61358: PPUSH
61359: LD_VAR 0 5
61363: PUSH
61364: LD_EXP 149
61368: PUSH
61369: LD_VAR 0 5
61373: ARRAY
61374: PUSH
61375: LD_INT 1
61377: PLUS
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PPUSH
61383: LD_VAR 0 2
61387: PUSH
61388: LD_VAR 0 4
61392: ARRAY
61393: PUSH
61394: LD_VAR 0 2
61398: PUSH
61399: LD_VAR 0 4
61403: ARRAY
61404: PPUSH
61405: CALL_OW 255
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PPUSH
61414: CALL 9369 0 3
61418: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61419: LD_VAR 0 2
61423: PUSH
61424: LD_VAR 0 4
61428: ARRAY
61429: PPUSH
61430: LD_VAR 0 1
61434: PPUSH
61435: CALL_OW 255
61439: PPUSH
61440: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61444: LD_VAR 0 2
61448: PUSH
61449: LD_VAR 0 4
61453: ARRAY
61454: PPUSH
61455: CALL_OW 141
// end ;
61459: GO 61291
61461: POP
61462: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61463: LD_VAR 0 1
61467: PPUSH
61468: LD_EXP 149
61472: PUSH
61473: LD_VAR 0 5
61477: ARRAY
61478: PUSH
61479: LD_INT 0
61481: PLUS
61482: PPUSH
61483: CALL_OW 505
// end ;
61487: LD_VAR 0 3
61491: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61492: LD_INT 0
61494: PPUSH
61495: PPUSH
61496: PPUSH
61497: PPUSH
// if not hack in hackTanks then
61498: LD_VAR 0 1
61502: PUSH
61503: LD_EXP 148
61507: IN
61508: NOT
61509: IFFALSE 61513
// exit ;
61511: GO 61753
// index := GetElementIndex ( hackTanks , hack ) ;
61513: LD_ADDR_VAR 0 4
61517: PUSH
61518: LD_EXP 148
61522: PPUSH
61523: LD_VAR 0 1
61527: PPUSH
61528: CALL 9154 0 2
61532: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61533: LD_ADDR_VAR 0 3
61537: PUSH
61538: DOUBLE
61539: LD_EXP 149
61543: PUSH
61544: LD_VAR 0 4
61548: ARRAY
61549: INC
61550: ST_TO_ADDR
61551: LD_INT 1
61553: PUSH
61554: FOR_DOWNTO
61555: IFFALSE 61727
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61557: LD_ADDR_VAR 0 5
61561: PUSH
61562: LD_EXP 149
61566: PUSH
61567: LD_VAR 0 4
61571: ARRAY
61572: PUSH
61573: LD_VAR 0 3
61577: ARRAY
61578: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61579: LD_VAR 0 5
61583: PUSH
61584: LD_INT 1
61586: ARRAY
61587: PPUSH
61588: CALL_OW 302
61592: NOT
61593: PUSH
61594: LD_VAR 0 5
61598: PUSH
61599: LD_INT 1
61601: ARRAY
61602: PPUSH
61603: CALL_OW 255
61607: PUSH
61608: LD_VAR 0 1
61612: PPUSH
61613: CALL_OW 255
61617: NONEQUAL
61618: OR
61619: IFFALSE 61725
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61621: LD_VAR 0 5
61625: PUSH
61626: LD_INT 1
61628: ARRAY
61629: PPUSH
61630: CALL_OW 305
61634: PUSH
61635: LD_VAR 0 5
61639: PUSH
61640: LD_INT 1
61642: ARRAY
61643: PPUSH
61644: CALL_OW 255
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: CALL_OW 255
61658: EQUAL
61659: AND
61660: IFFALSE 61684
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61662: LD_VAR 0 5
61666: PUSH
61667: LD_INT 1
61669: ARRAY
61670: PPUSH
61671: LD_VAR 0 5
61675: PUSH
61676: LD_INT 2
61678: ARRAY
61679: PPUSH
61680: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61684: LD_ADDR_EXP 149
61688: PUSH
61689: LD_EXP 149
61693: PPUSH
61694: LD_VAR 0 4
61698: PPUSH
61699: LD_EXP 149
61703: PUSH
61704: LD_VAR 0 4
61708: ARRAY
61709: PPUSH
61710: LD_VAR 0 3
61714: PPUSH
61715: CALL_OW 3
61719: PPUSH
61720: CALL_OW 1
61724: ST_TO_ADDR
// end ; end ;
61725: GO 61554
61727: POP
61728: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61729: LD_VAR 0 1
61733: PPUSH
61734: LD_EXP 149
61738: PUSH
61739: LD_VAR 0 4
61743: ARRAY
61744: PUSH
61745: LD_INT 0
61747: PLUS
61748: PPUSH
61749: CALL_OW 505
// end ;
61753: LD_VAR 0 2
61757: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
61758: LD_INT 0
61760: PPUSH
61761: PPUSH
61762: PPUSH
61763: PPUSH
// if not hack in hackTanks then
61764: LD_VAR 0 1
61768: PUSH
61769: LD_EXP 148
61773: IN
61774: NOT
61775: IFFALSE 61779
// exit ;
61777: GO 61864
// index := GetElementIndex ( hackTanks , hack ) ;
61779: LD_ADDR_VAR 0 5
61783: PUSH
61784: LD_EXP 148
61788: PPUSH
61789: LD_VAR 0 1
61793: PPUSH
61794: CALL 9154 0 2
61798: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
61799: LD_ADDR_VAR 0 4
61803: PUSH
61804: DOUBLE
61805: LD_INT 1
61807: DEC
61808: ST_TO_ADDR
61809: LD_EXP 149
61813: PUSH
61814: LD_VAR 0 5
61818: ARRAY
61819: PUSH
61820: FOR_TO
61821: IFFALSE 61862
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
61823: LD_EXP 149
61827: PUSH
61828: LD_VAR 0 5
61832: ARRAY
61833: PUSH
61834: LD_VAR 0 4
61838: ARRAY
61839: PUSH
61840: LD_INT 1
61842: ARRAY
61843: PUSH
61844: LD_VAR 0 2
61848: EQUAL
61849: IFFALSE 61860
// KillUnit ( vehicle ) ;
61851: LD_VAR 0 2
61855: PPUSH
61856: CALL_OW 66
61860: GO 61820
61862: POP
61863: POP
// end ;
61864: LD_VAR 0 3
61868: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
61869: LD_EXP 153
61873: NOT
61874: IFFALSE 61909
61876: GO 61878
61878: DISABLE
// begin initMiner := true ;
61879: LD_ADDR_EXP 153
61883: PUSH
61884: LD_INT 1
61886: ST_TO_ADDR
// minersList := [ ] ;
61887: LD_ADDR_EXP 154
61891: PUSH
61892: EMPTY
61893: ST_TO_ADDR
// minerMinesList := [ ] ;
61894: LD_ADDR_EXP 155
61898: PUSH
61899: EMPTY
61900: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
61901: LD_ADDR_EXP 156
61905: PUSH
61906: LD_INT 5
61908: ST_TO_ADDR
// end ;
61909: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
61910: LD_EXP 153
61914: PUSH
61915: LD_INT 34
61917: PUSH
61918: LD_EXP 75
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PPUSH
61927: CALL_OW 69
61931: AND
61932: IFFALSE 62395
61934: GO 61936
61936: DISABLE
61937: LD_INT 0
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
// begin enable ;
61943: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
61944: LD_ADDR_VAR 0 1
61948: PUSH
61949: LD_INT 34
61951: PUSH
61952: LD_EXP 75
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PPUSH
61961: CALL_OW 69
61965: PUSH
61966: FOR_IN
61967: IFFALSE 62039
// begin if not i in minersList then
61969: LD_VAR 0 1
61973: PUSH
61974: LD_EXP 154
61978: IN
61979: NOT
61980: IFFALSE 62037
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
61982: LD_ADDR_EXP 154
61986: PUSH
61987: LD_EXP 154
61991: PPUSH
61992: LD_EXP 154
61996: PUSH
61997: LD_INT 1
61999: PLUS
62000: PPUSH
62001: LD_VAR 0 1
62005: PPUSH
62006: CALL_OW 1
62010: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62011: LD_ADDR_EXP 155
62015: PUSH
62016: LD_EXP 155
62020: PPUSH
62021: LD_EXP 155
62025: PUSH
62026: LD_INT 1
62028: PLUS
62029: PPUSH
62030: EMPTY
62031: PPUSH
62032: CALL_OW 1
62036: ST_TO_ADDR
// end end ;
62037: GO 61966
62039: POP
62040: POP
// for i := minerMinesList downto 1 do
62041: LD_ADDR_VAR 0 1
62045: PUSH
62046: DOUBLE
62047: LD_EXP 155
62051: INC
62052: ST_TO_ADDR
62053: LD_INT 1
62055: PUSH
62056: FOR_DOWNTO
62057: IFFALSE 62393
// begin if IsLive ( minersList [ i ] ) then
62059: LD_EXP 154
62063: PUSH
62064: LD_VAR 0 1
62068: ARRAY
62069: PPUSH
62070: CALL_OW 300
62074: IFFALSE 62102
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62076: LD_EXP 154
62080: PUSH
62081: LD_VAR 0 1
62085: ARRAY
62086: PPUSH
62087: LD_EXP 155
62091: PUSH
62092: LD_VAR 0 1
62096: ARRAY
62097: PPUSH
62098: CALL_OW 505
// if not minerMinesList [ i ] then
62102: LD_EXP 155
62106: PUSH
62107: LD_VAR 0 1
62111: ARRAY
62112: NOT
62113: IFFALSE 62117
// continue ;
62115: GO 62056
// for j := minerMinesList [ i ] downto 1 do
62117: LD_ADDR_VAR 0 2
62121: PUSH
62122: DOUBLE
62123: LD_EXP 155
62127: PUSH
62128: LD_VAR 0 1
62132: ARRAY
62133: INC
62134: ST_TO_ADDR
62135: LD_INT 1
62137: PUSH
62138: FOR_DOWNTO
62139: IFFALSE 62389
// begin side := GetSide ( minersList [ i ] ) ;
62141: LD_ADDR_VAR 0 3
62145: PUSH
62146: LD_EXP 154
62150: PUSH
62151: LD_VAR 0 1
62155: ARRAY
62156: PPUSH
62157: CALL_OW 255
62161: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62162: LD_ADDR_VAR 0 4
62166: PUSH
62167: LD_EXP 155
62171: PUSH
62172: LD_VAR 0 1
62176: ARRAY
62177: PUSH
62178: LD_VAR 0 2
62182: ARRAY
62183: PUSH
62184: LD_INT 1
62186: ARRAY
62187: PPUSH
62188: LD_EXP 155
62192: PUSH
62193: LD_VAR 0 1
62197: ARRAY
62198: PUSH
62199: LD_VAR 0 2
62203: ARRAY
62204: PUSH
62205: LD_INT 2
62207: ARRAY
62208: PPUSH
62209: CALL_OW 428
62213: ST_TO_ADDR
// if not tmp then
62214: LD_VAR 0 4
62218: NOT
62219: IFFALSE 62223
// continue ;
62221: GO 62138
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62223: LD_VAR 0 4
62227: PUSH
62228: LD_INT 81
62230: PUSH
62231: LD_VAR 0 3
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PPUSH
62240: CALL_OW 69
62244: IN
62245: PUSH
62246: LD_EXP 155
62250: PUSH
62251: LD_VAR 0 1
62255: ARRAY
62256: PUSH
62257: LD_VAR 0 2
62261: ARRAY
62262: PUSH
62263: LD_INT 1
62265: ARRAY
62266: PPUSH
62267: LD_EXP 155
62271: PUSH
62272: LD_VAR 0 1
62276: ARRAY
62277: PUSH
62278: LD_VAR 0 2
62282: ARRAY
62283: PUSH
62284: LD_INT 2
62286: ARRAY
62287: PPUSH
62288: CALL_OW 458
62292: AND
62293: IFFALSE 62387
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62295: LD_EXP 155
62299: PUSH
62300: LD_VAR 0 1
62304: ARRAY
62305: PUSH
62306: LD_VAR 0 2
62310: ARRAY
62311: PUSH
62312: LD_INT 1
62314: ARRAY
62315: PPUSH
62316: LD_EXP 155
62320: PUSH
62321: LD_VAR 0 1
62325: ARRAY
62326: PUSH
62327: LD_VAR 0 2
62331: ARRAY
62332: PUSH
62333: LD_INT 2
62335: ARRAY
62336: PPUSH
62337: LD_VAR 0 3
62341: PPUSH
62342: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62346: LD_ADDR_EXP 155
62350: PUSH
62351: LD_EXP 155
62355: PPUSH
62356: LD_VAR 0 1
62360: PPUSH
62361: LD_EXP 155
62365: PUSH
62366: LD_VAR 0 1
62370: ARRAY
62371: PPUSH
62372: LD_VAR 0 2
62376: PPUSH
62377: CALL_OW 3
62381: PPUSH
62382: CALL_OW 1
62386: ST_TO_ADDR
// end ; end ;
62387: GO 62138
62389: POP
62390: POP
// end ;
62391: GO 62056
62393: POP
62394: POP
// end ;
62395: PPOPN 4
62397: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62398: LD_INT 0
62400: PPUSH
62401: PPUSH
// result := false ;
62402: LD_ADDR_VAR 0 4
62406: PUSH
62407: LD_INT 0
62409: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62410: LD_VAR 0 1
62414: PPUSH
62415: CALL_OW 264
62419: PUSH
62420: LD_EXP 75
62424: EQUAL
62425: NOT
62426: IFFALSE 62430
// exit ;
62428: GO 62670
// index := GetElementIndex ( minersList , unit ) ;
62430: LD_ADDR_VAR 0 5
62434: PUSH
62435: LD_EXP 154
62439: PPUSH
62440: LD_VAR 0 1
62444: PPUSH
62445: CALL 9154 0 2
62449: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62450: LD_EXP 155
62454: PUSH
62455: LD_VAR 0 5
62459: ARRAY
62460: PUSH
62461: LD_EXP 156
62465: GREATEREQUAL
62466: IFFALSE 62470
// exit ;
62468: GO 62670
// ComMoveXY ( unit , x , y ) ;
62470: LD_VAR 0 1
62474: PPUSH
62475: LD_VAR 0 2
62479: PPUSH
62480: LD_VAR 0 3
62484: PPUSH
62485: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62489: LD_INT 35
62491: PPUSH
62492: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62496: LD_VAR 0 1
62500: PPUSH
62501: LD_VAR 0 2
62505: PPUSH
62506: LD_VAR 0 3
62510: PPUSH
62511: CALL 39873 0 3
62515: NOT
62516: PUSH
62517: LD_VAR 0 1
62521: PPUSH
62522: CALL_OW 314
62526: AND
62527: IFFALSE 62531
// exit ;
62529: GO 62670
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62531: LD_VAR 0 2
62535: PPUSH
62536: LD_VAR 0 3
62540: PPUSH
62541: CALL_OW 428
62545: PUSH
62546: LD_VAR 0 1
62550: EQUAL
62551: PUSH
62552: LD_VAR 0 1
62556: PPUSH
62557: CALL_OW 314
62561: NOT
62562: AND
62563: IFFALSE 62489
// PlaySoundXY ( x , y , PlantMine ) ;
62565: LD_VAR 0 2
62569: PPUSH
62570: LD_VAR 0 3
62574: PPUSH
62575: LD_STRING PlantMine
62577: PPUSH
62578: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62582: LD_VAR 0 2
62586: PPUSH
62587: LD_VAR 0 3
62591: PPUSH
62592: LD_VAR 0 1
62596: PPUSH
62597: CALL_OW 255
62601: PPUSH
62602: LD_INT 0
62604: PPUSH
62605: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62609: LD_ADDR_EXP 155
62613: PUSH
62614: LD_EXP 155
62618: PPUSH
62619: LD_VAR 0 5
62623: PUSH
62624: LD_EXP 155
62628: PUSH
62629: LD_VAR 0 5
62633: ARRAY
62634: PUSH
62635: LD_INT 1
62637: PLUS
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PPUSH
62643: LD_VAR 0 2
62647: PUSH
62648: LD_VAR 0 3
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PPUSH
62657: CALL 9369 0 3
62661: ST_TO_ADDR
// result := true ;
62662: LD_ADDR_VAR 0 4
62666: PUSH
62667: LD_INT 1
62669: ST_TO_ADDR
// end ;
62670: LD_VAR 0 4
62674: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62675: LD_INT 0
62677: PPUSH
62678: PPUSH
62679: PPUSH
// if not unit in minersList then
62680: LD_VAR 0 1
62684: PUSH
62685: LD_EXP 154
62689: IN
62690: NOT
62691: IFFALSE 62695
// exit ;
62693: GO 63087
// index := GetElementIndex ( minersList , unit ) ;
62695: LD_ADDR_VAR 0 6
62699: PUSH
62700: LD_EXP 154
62704: PPUSH
62705: LD_VAR 0 1
62709: PPUSH
62710: CALL 9154 0 2
62714: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
62715: LD_ADDR_VAR 0 5
62719: PUSH
62720: DOUBLE
62721: LD_EXP 155
62725: PUSH
62726: LD_VAR 0 6
62730: ARRAY
62731: INC
62732: ST_TO_ADDR
62733: LD_INT 1
62735: PUSH
62736: FOR_DOWNTO
62737: IFFALSE 62898
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
62739: LD_EXP 155
62743: PUSH
62744: LD_VAR 0 6
62748: ARRAY
62749: PUSH
62750: LD_VAR 0 5
62754: ARRAY
62755: PUSH
62756: LD_INT 1
62758: ARRAY
62759: PUSH
62760: LD_VAR 0 2
62764: EQUAL
62765: PUSH
62766: LD_EXP 155
62770: PUSH
62771: LD_VAR 0 6
62775: ARRAY
62776: PUSH
62777: LD_VAR 0 5
62781: ARRAY
62782: PUSH
62783: LD_INT 2
62785: ARRAY
62786: PUSH
62787: LD_VAR 0 3
62791: EQUAL
62792: AND
62793: IFFALSE 62896
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62795: LD_EXP 155
62799: PUSH
62800: LD_VAR 0 6
62804: ARRAY
62805: PUSH
62806: LD_VAR 0 5
62810: ARRAY
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PPUSH
62816: LD_EXP 155
62820: PUSH
62821: LD_VAR 0 6
62825: ARRAY
62826: PUSH
62827: LD_VAR 0 5
62831: ARRAY
62832: PUSH
62833: LD_INT 2
62835: ARRAY
62836: PPUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 255
62846: PPUSH
62847: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
62851: LD_ADDR_EXP 155
62855: PUSH
62856: LD_EXP 155
62860: PPUSH
62861: LD_VAR 0 6
62865: PPUSH
62866: LD_EXP 155
62870: PUSH
62871: LD_VAR 0 6
62875: ARRAY
62876: PPUSH
62877: LD_VAR 0 5
62881: PPUSH
62882: CALL_OW 3
62886: PPUSH
62887: CALL_OW 1
62891: ST_TO_ADDR
// exit ;
62892: POP
62893: POP
62894: GO 63087
// end ; end ;
62896: GO 62736
62898: POP
62899: POP
// for i := minerMinesList [ index ] downto 1 do
62900: LD_ADDR_VAR 0 5
62904: PUSH
62905: DOUBLE
62906: LD_EXP 155
62910: PUSH
62911: LD_VAR 0 6
62915: ARRAY
62916: INC
62917: ST_TO_ADDR
62918: LD_INT 1
62920: PUSH
62921: FOR_DOWNTO
62922: IFFALSE 63085
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
62924: LD_EXP 155
62928: PUSH
62929: LD_VAR 0 6
62933: ARRAY
62934: PUSH
62935: LD_VAR 0 5
62939: ARRAY
62940: PUSH
62941: LD_INT 1
62943: ARRAY
62944: PPUSH
62945: LD_EXP 155
62949: PUSH
62950: LD_VAR 0 6
62954: ARRAY
62955: PUSH
62956: LD_VAR 0 5
62960: ARRAY
62961: PUSH
62962: LD_INT 2
62964: ARRAY
62965: PPUSH
62966: LD_VAR 0 2
62970: PPUSH
62971: LD_VAR 0 3
62975: PPUSH
62976: CALL_OW 298
62980: PUSH
62981: LD_INT 6
62983: LESS
62984: IFFALSE 63083
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
62986: LD_EXP 155
62990: PUSH
62991: LD_VAR 0 6
62995: ARRAY
62996: PUSH
62997: LD_VAR 0 5
63001: ARRAY
63002: PUSH
63003: LD_INT 1
63005: ARRAY
63006: PPUSH
63007: LD_EXP 155
63011: PUSH
63012: LD_VAR 0 6
63016: ARRAY
63017: PUSH
63018: LD_VAR 0 5
63022: ARRAY
63023: PUSH
63024: LD_INT 2
63026: ARRAY
63027: PPUSH
63028: LD_VAR 0 1
63032: PPUSH
63033: CALL_OW 255
63037: PPUSH
63038: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63042: LD_ADDR_EXP 155
63046: PUSH
63047: LD_EXP 155
63051: PPUSH
63052: LD_VAR 0 6
63056: PPUSH
63057: LD_EXP 155
63061: PUSH
63062: LD_VAR 0 6
63066: ARRAY
63067: PPUSH
63068: LD_VAR 0 5
63072: PPUSH
63073: CALL_OW 3
63077: PPUSH
63078: CALL_OW 1
63082: ST_TO_ADDR
// end ; end ;
63083: GO 62921
63085: POP
63086: POP
// end ;
63087: LD_VAR 0 4
63091: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63092: LD_INT 0
63094: PPUSH
63095: PPUSH
63096: PPUSH
63097: PPUSH
63098: PPUSH
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63103: LD_VAR 0 1
63107: PPUSH
63108: CALL_OW 264
63112: PUSH
63113: LD_EXP 75
63117: EQUAL
63118: NOT
63119: PUSH
63120: LD_VAR 0 1
63124: PUSH
63125: LD_EXP 154
63129: IN
63130: NOT
63131: OR
63132: IFFALSE 63136
// exit ;
63134: GO 63458
// index := GetElementIndex ( minersList , unit ) ;
63136: LD_ADDR_VAR 0 6
63140: PUSH
63141: LD_EXP 154
63145: PPUSH
63146: LD_VAR 0 1
63150: PPUSH
63151: CALL 9154 0 2
63155: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63156: LD_ADDR_VAR 0 8
63160: PUSH
63161: LD_EXP 156
63165: PUSH
63166: LD_EXP 155
63170: PUSH
63171: LD_VAR 0 6
63175: ARRAY
63176: MINUS
63177: ST_TO_ADDR
// if not minesFreeAmount then
63178: LD_VAR 0 8
63182: NOT
63183: IFFALSE 63187
// exit ;
63185: GO 63458
// tmp := [ ] ;
63187: LD_ADDR_VAR 0 7
63191: PUSH
63192: EMPTY
63193: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63194: LD_ADDR_VAR 0 5
63198: PUSH
63199: DOUBLE
63200: LD_INT 1
63202: DEC
63203: ST_TO_ADDR
63204: LD_VAR 0 8
63208: PUSH
63209: FOR_TO
63210: IFFALSE 63405
// begin _d := rand ( 0 , 5 ) ;
63212: LD_ADDR_VAR 0 11
63216: PUSH
63217: LD_INT 0
63219: PPUSH
63220: LD_INT 5
63222: PPUSH
63223: CALL_OW 12
63227: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63228: LD_ADDR_VAR 0 12
63232: PUSH
63233: LD_INT 2
63235: PPUSH
63236: LD_INT 6
63238: PPUSH
63239: CALL_OW 12
63243: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63244: LD_ADDR_VAR 0 9
63248: PUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: LD_VAR 0 11
63258: PPUSH
63259: LD_VAR 0 12
63263: PPUSH
63264: CALL_OW 272
63268: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63269: LD_ADDR_VAR 0 10
63273: PUSH
63274: LD_VAR 0 3
63278: PPUSH
63279: LD_VAR 0 11
63283: PPUSH
63284: LD_VAR 0 12
63288: PPUSH
63289: CALL_OW 273
63293: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63294: LD_VAR 0 9
63298: PPUSH
63299: LD_VAR 0 10
63303: PPUSH
63304: CALL_OW 488
63308: PUSH
63309: LD_VAR 0 9
63313: PUSH
63314: LD_VAR 0 10
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_VAR 0 7
63327: IN
63328: NOT
63329: AND
63330: PUSH
63331: LD_VAR 0 9
63335: PPUSH
63336: LD_VAR 0 10
63340: PPUSH
63341: CALL_OW 458
63345: NOT
63346: AND
63347: IFFALSE 63389
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63349: LD_ADDR_VAR 0 7
63353: PUSH
63354: LD_VAR 0 7
63358: PPUSH
63359: LD_VAR 0 7
63363: PUSH
63364: LD_INT 1
63366: PLUS
63367: PPUSH
63368: LD_VAR 0 9
63372: PUSH
63373: LD_VAR 0 10
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PPUSH
63382: CALL_OW 1
63386: ST_TO_ADDR
63387: GO 63403
// i := i - 1 ;
63389: LD_ADDR_VAR 0 5
63393: PUSH
63394: LD_VAR 0 5
63398: PUSH
63399: LD_INT 1
63401: MINUS
63402: ST_TO_ADDR
// end ;
63403: GO 63209
63405: POP
63406: POP
// for i in tmp do
63407: LD_ADDR_VAR 0 5
63411: PUSH
63412: LD_VAR 0 7
63416: PUSH
63417: FOR_IN
63418: IFFALSE 63456
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63420: LD_VAR 0 1
63424: PPUSH
63425: LD_VAR 0 5
63429: PUSH
63430: LD_INT 1
63432: ARRAY
63433: PPUSH
63434: LD_VAR 0 5
63438: PUSH
63439: LD_INT 2
63441: ARRAY
63442: PPUSH
63443: CALL 62398 0 3
63447: NOT
63448: IFFALSE 63454
// exit ;
63450: POP
63451: POP
63452: GO 63458
63454: GO 63417
63456: POP
63457: POP
// end ;
63458: LD_VAR 0 4
63462: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63463: LD_INT 0
63465: PPUSH
63466: PPUSH
63467: PPUSH
63468: PPUSH
63469: PPUSH
63470: PPUSH
63471: PPUSH
// if not GetClass ( unit ) = class_sniper then
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 257
63481: PUSH
63482: LD_INT 5
63484: EQUAL
63485: NOT
63486: IFFALSE 63490
// exit ;
63488: GO 63878
// dist := 8 ;
63490: LD_ADDR_VAR 0 5
63494: PUSH
63495: LD_INT 8
63497: ST_TO_ADDR
// viewRange := 12 ;
63498: LD_ADDR_VAR 0 7
63502: PUSH
63503: LD_INT 12
63505: ST_TO_ADDR
// side := GetSide ( unit ) ;
63506: LD_ADDR_VAR 0 6
63510: PUSH
63511: LD_VAR 0 1
63515: PPUSH
63516: CALL_OW 255
63520: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63521: LD_INT 61
63523: PPUSH
63524: LD_VAR 0 6
63528: PPUSH
63529: CALL_OW 321
63533: PUSH
63534: LD_INT 2
63536: EQUAL
63537: IFFALSE 63547
// viewRange := 16 ;
63539: LD_ADDR_VAR 0 7
63543: PUSH
63544: LD_INT 16
63546: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63547: LD_VAR 0 1
63551: PPUSH
63552: LD_VAR 0 2
63556: PPUSH
63557: LD_VAR 0 3
63561: PPUSH
63562: CALL_OW 297
63566: PUSH
63567: LD_VAR 0 5
63571: GREATER
63572: IFFALSE 63651
// begin ComMoveXY ( unit , x , y ) ;
63574: LD_VAR 0 1
63578: PPUSH
63579: LD_VAR 0 2
63583: PPUSH
63584: LD_VAR 0 3
63588: PPUSH
63589: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63593: LD_INT 35
63595: PPUSH
63596: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL 39873 0 3
63619: NOT
63620: IFFALSE 63624
// exit ;
63622: GO 63878
// until GetDistUnitXY ( unit , x , y ) < dist ;
63624: LD_VAR 0 1
63628: PPUSH
63629: LD_VAR 0 2
63633: PPUSH
63634: LD_VAR 0 3
63638: PPUSH
63639: CALL_OW 297
63643: PUSH
63644: LD_VAR 0 5
63648: LESS
63649: IFFALSE 63593
// end ; ComTurnXY ( unit , x , y ) ;
63651: LD_VAR 0 1
63655: PPUSH
63656: LD_VAR 0 2
63660: PPUSH
63661: LD_VAR 0 3
63665: PPUSH
63666: CALL_OW 118
// wait ( 5 ) ;
63670: LD_INT 5
63672: PPUSH
63673: CALL_OW 67
// _d := GetDir ( unit ) ;
63677: LD_ADDR_VAR 0 10
63681: PUSH
63682: LD_VAR 0 1
63686: PPUSH
63687: CALL_OW 254
63691: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63692: LD_ADDR_VAR 0 8
63696: PUSH
63697: LD_VAR 0 1
63701: PPUSH
63702: CALL_OW 250
63706: PPUSH
63707: LD_VAR 0 10
63711: PPUSH
63712: LD_VAR 0 5
63716: PPUSH
63717: CALL_OW 272
63721: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
63722: LD_ADDR_VAR 0 9
63726: PUSH
63727: LD_VAR 0 1
63731: PPUSH
63732: CALL_OW 251
63736: PPUSH
63737: LD_VAR 0 10
63741: PPUSH
63742: LD_VAR 0 5
63746: PPUSH
63747: CALL_OW 273
63751: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63752: LD_VAR 0 8
63756: PPUSH
63757: LD_VAR 0 9
63761: PPUSH
63762: CALL_OW 488
63766: NOT
63767: IFFALSE 63771
// exit ;
63769: GO 63878
// ComAnimCustom ( unit , 1 ) ;
63771: LD_VAR 0 1
63775: PPUSH
63776: LD_INT 1
63778: PPUSH
63779: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
63783: LD_VAR 0 8
63787: PPUSH
63788: LD_VAR 0 9
63792: PPUSH
63793: LD_VAR 0 6
63797: PPUSH
63798: LD_VAR 0 7
63802: PPUSH
63803: CALL_OW 330
// repeat wait ( 1 ) ;
63807: LD_INT 1
63809: PPUSH
63810: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
63814: LD_VAR 0 1
63818: PPUSH
63819: CALL_OW 316
63823: PUSH
63824: LD_VAR 0 1
63828: PPUSH
63829: CALL_OW 314
63833: OR
63834: PUSH
63835: LD_VAR 0 1
63839: PPUSH
63840: CALL_OW 302
63844: NOT
63845: OR
63846: PUSH
63847: LD_VAR 0 1
63851: PPUSH
63852: CALL_OW 301
63856: OR
63857: IFFALSE 63807
// RemoveSeeing ( _x , _y , side ) ;
63859: LD_VAR 0 8
63863: PPUSH
63864: LD_VAR 0 9
63868: PPUSH
63869: LD_VAR 0 6
63873: PPUSH
63874: CALL_OW 331
// end ; end_of_file
63878: LD_VAR 0 4
63882: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63883: LD_VAR 0 1
63887: PUSH
63888: LD_INT 200
63890: DOUBLE
63891: GREATEREQUAL
63892: IFFALSE 63900
63894: LD_INT 299
63896: DOUBLE
63897: LESSEQUAL
63898: IFTRUE 63902
63900: GO 63934
63902: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63903: LD_VAR 0 1
63907: PPUSH
63908: LD_VAR 0 2
63912: PPUSH
63913: LD_VAR 0 3
63917: PPUSH
63918: LD_VAR 0 4
63922: PPUSH
63923: LD_VAR 0 5
63927: PPUSH
63928: CALL 59621 0 5
63932: GO 64011
63934: LD_INT 300
63936: DOUBLE
63937: GREATEREQUAL
63938: IFFALSE 63946
63940: LD_INT 399
63942: DOUBLE
63943: LESSEQUAL
63944: IFTRUE 63948
63946: GO 64010
63948: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63949: LD_VAR 0 1
63953: PPUSH
63954: LD_VAR 0 2
63958: PPUSH
63959: LD_VAR 0 3
63963: PPUSH
63964: LD_VAR 0 4
63968: PPUSH
63969: LD_VAR 0 5
63973: PPUSH
63974: LD_VAR 0 6
63978: PPUSH
63979: LD_VAR 0 7
63983: PPUSH
63984: LD_VAR 0 8
63988: PPUSH
63989: LD_VAR 0 9
63993: PPUSH
63994: LD_VAR 0 10
63998: PPUSH
63999: LD_VAR 0 11
64003: PPUSH
64004: CALL 57263 0 11
64008: GO 64011
64010: POP
// end ;
64011: PPOPN 11
64013: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64014: LD_VAR 0 1
64018: PPUSH
64019: LD_VAR 0 2
64023: PPUSH
64024: LD_VAR 0 3
64028: PPUSH
64029: LD_VAR 0 4
64033: PPUSH
64034: LD_VAR 0 5
64038: PPUSH
64039: CALL 59357 0 5
// end ;
64043: PPOPN 5
64045: END
