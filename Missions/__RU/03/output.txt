// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// LoadBuildingsFromPrevMission ;
   8: CALL 12637 0 0
// PrepareRussian ;
  12: CALL 377 0 0
// PrepareAmerican ;
  16: CALL 4117 0 0
// Action ;
  20: CALL 18618 0 0
// end ;
  24: END
// export debug , prevMissionPrefix , currentMissionPrefix , wasSelfish , hasProblem , belkovSaved , gameStart , arabAttackActive , allianceAttacked , foundOil , hasScholtze , hasKagan , allowedToAttackOmicron , hasOilTower , dickensKilled , canSearchForScholtze , youTookCratesFromKirov , retreat , hasFactory , kurinWaitForVehiclesTime , requiredVehiclesAmount , canCaptureKirovVehs , timeToAttackOnOmicron , retreatToKirovAllowed , convoysCounter , americanRetreat , omicronRetreatCounter , joinToOmicronCounter ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 02_
  57: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  58: LD_ADDR_EXP 3
  62: PUSH
  63: LD_STRING 03_
  65: ST_TO_ADDR
// belkovSaved := LoadVariable ( 02_belkovSaved , false ) ;
  66: LD_ADDR_EXP 6
  70: PUSH
  71: LD_STRING 02_belkovSaved
  73: PPUSH
  74: LD_INT 0
  76: PPUSH
  77: CALL_OW 30
  81: ST_TO_ADDR
// wasSelfish := LoadVariable ( 02_Selfish , false ) ;
  82: LD_ADDR_EXP 4
  86: PUSH
  87: LD_STRING 02_Selfish
  89: PPUSH
  90: LD_INT 0
  92: PPUSH
  93: CALL_OW 30
  97: ST_TO_ADDR
// dickensKilled := LoadVariable ( 02_DickensKilled , false ) ;
  98: LD_ADDR_EXP 15
 102: PUSH
 103: LD_STRING 02_DickensKilled
 105: PPUSH
 106: LD_INT 0
 108: PPUSH
 109: CALL_OW 30
 113: ST_TO_ADDR
// hasProblem := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gameStart := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// arabAttackActive := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// allianceAttacked := false ;
 138: LD_ADDR_EXP 9
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// youTookCratesFromKirov := 0 ;
 146: LD_ADDR_EXP 17
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// foundOil := false ;
 154: LD_ADDR_EXP 10
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// hasScholtze := false ;
 162: LD_ADDR_EXP 11
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hasKagan := false ;
 170: LD_ADDR_EXP 12
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// allowedToAttackOmicron := false ;
 178: LD_ADDR_EXP 13
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canCaptureKirovVehs := false ;
 186: LD_ADDR_EXP 22
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// hasOilTower := false ;
 194: LD_ADDR_EXP 14
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// hasFactory := false ;
 202: LD_ADDR_EXP 19
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// canSearchForScholtze := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// retreat := false ;
 218: LD_ADDR_EXP 18
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// kurinWaitForVehiclesTime := [ 30 30$0 , 28 28$0 , 26 26$0 , 24 24$0 ] [ Difficulty ] ;
 226: LD_ADDR_EXP 20
 230: PUSH
 231: LD_INT 63000
 233: PUSH
 234: LD_INT 58800
 236: PUSH
 237: LD_INT 54600
 239: PUSH
 240: LD_INT 50400
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: PUSH
 249: LD_OWVAR 67
 253: ARRAY
 254: ST_TO_ADDR
// requiredVehiclesAmount := [ 3 , 3 , 4 , 4 ] [ Difficulty ] ;
 255: LD_ADDR_EXP 21
 259: PUSH
 260: LD_INT 3
 262: PUSH
 263: LD_INT 3
 265: PUSH
 266: LD_INT 4
 268: PUSH
 269: LD_INT 4
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: LIST
 276: LIST
 277: PUSH
 278: LD_OWVAR 67
 282: ARRAY
 283: ST_TO_ADDR
// timeToAttackOnOmicron := 0 0$00 ;
 284: LD_ADDR_EXP 23
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// retreatToKirovAllowed := true ;
 292: LD_ADDR_EXP 24
 296: PUSH
 297: LD_INT 1
 299: ST_TO_ADDR
// convoysCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 300: LD_ADDR_EXP 25
 304: PUSH
 305: LD_INT 4
 307: PUSH
 308: LD_INT 5
 310: PUSH
 311: LD_INT 6
 313: PUSH
 314: LD_INT 6
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: PUSH
 323: LD_OWVAR 67
 327: ARRAY
 328: ST_TO_ADDR
// americanRetreat := false ;
 329: LD_ADDR_EXP 26
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// omicronRetreatCounter := 0 ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// joinToOmicronCounter := [ ] ;
 345: LD_ADDR_EXP 28
 349: PUSH
 350: EMPTY
 351: ST_TO_ADDR
// arForces := [ ] ;
 352: LD_ADDR_EXP 64
 356: PUSH
 357: EMPTY
 358: ST_TO_ADDR
// if debug then
 359: LD_EXP 1
 363: IFFALSE 372
// FogOff ( 3 ) ;
 365: LD_INT 3
 367: PPUSH
 368: CALL_OW 344
// end ; end_of_file
 372: LD_VAR 0 1
 376: RET
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Popov , Scholtze , Grishko ; export kirovBaseSquad , beriaBaseSquad , grishkoTeam , burlakTeam , kirovTeam , beriaTeam , popovTeam , kirovDepot , beriaDepot , kaganDepot , mainRuCharacters , kirovVehicles , kirovAttackVehicles , kirovTechs , kirovBuildingsToBuild , kirovConstructList , ruCargos , ruGuards ; export function PrepareRussian ; var i , vehiclesAmount , veh , tmp ; begin
 377: LD_INT 0
 379: PPUSH
 380: PPUSH
 381: PPUSH
 382: PPUSH
 383: PPUSH
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 3000 ) ;
 384: LD_EXP 45
 388: PPUSH
 389: CALL_OW 274
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: LD_INT 3000
 399: PPUSH
 400: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 600 ) ;
 404: LD_EXP 45
 408: PPUSH
 409: CALL_OW 274
 413: PPUSH
 414: LD_INT 2
 416: PPUSH
 417: LD_INT 600
 419: PPUSH
 420: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_siberit , 5 ) ;
 424: LD_EXP 45
 428: PPUSH
 429: CALL_OW 274
 433: PPUSH
 434: LD_INT 3
 436: PPUSH
 437: LD_INT 5
 439: PPUSH
 440: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , [ 350 , 280 , 210 , 150 ] [ Difficulty ] ) ;
 444: LD_EXP 46
 448: PPUSH
 449: CALL_OW 274
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: LD_INT 350
 459: PUSH
 460: LD_INT 280
 462: PUSH
 463: LD_INT 210
 465: PUSH
 466: LD_INT 150
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: LIST
 474: PUSH
 475: LD_OWVAR 67
 479: ARRAY
 480: PPUSH
 481: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , [ 60 , 40 , 20 , 0 ] [ Difficulty ] ) ;
 485: LD_EXP 46
 489: PPUSH
 490: CALL_OW 274
 494: PPUSH
 495: LD_INT 2
 497: PPUSH
 498: LD_INT 60
 500: PUSH
 501: LD_INT 40
 503: PUSH
 504: LD_INT 20
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_OWVAR 67
 520: ARRAY
 521: PPUSH
 522: CALL_OW 277
// uc_side := 3 ;
 526: LD_ADDR_OWVAR 20
 530: PUSH
 531: LD_INT 3
 533: ST_TO_ADDR
// uc_nation := 3 ;
 534: LD_ADDR_OWVAR 21
 538: PUSH
 539: LD_INT 3
 541: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 542: LD_ADDR_EXP 29
 546: PUSH
 547: LD_STRING Burlak
 549: PPUSH
 550: LD_EXP 1
 554: NOT
 555: PPUSH
 556: LD_EXP 2
 560: PPUSH
 561: CALL 28653 0 3
 565: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
 566: LD_ADDR_EXP 39
 570: PUSH
 571: EMPTY
 572: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
 573: LD_ADDR_EXP 38
 577: PUSH
 578: EMPTY
 579: ST_TO_ADDR
// popovTeam := [ ] ;
 580: LD_ADDR_EXP 44
 584: PUSH
 585: EMPTY
 586: ST_TO_ADDR
// grishkoTeam := [ ] ;
 587: LD_ADDR_EXP 40
 591: PUSH
 592: EMPTY
 593: ST_TO_ADDR
// uc_side := 5 ;
 594: LD_ADDR_OWVAR 20
 598: PUSH
 599: LD_INT 5
 601: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
 602: LD_ADDR_EXP 36
 606: PUSH
 607: LD_STRING Scholtze
 609: PPUSH
 610: CALL_OW 25
 614: ST_TO_ADDR
// uc_side := 6 ;
 615: LD_ADDR_OWVAR 20
 619: PUSH
 620: LD_INT 6
 622: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 623: LD_ADDR_EXP 30
 627: PUSH
 628: LD_STRING Gnyevko
 630: PPUSH
 631: LD_EXP 1
 635: NOT
 636: PPUSH
 637: LD_EXP 2
 641: PPUSH
 642: CALL 28653 0 3
 646: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 647: LD_ADDR_EXP 32
 651: PUSH
 652: LD_STRING Kirilenkova
 654: PPUSH
 655: LD_EXP 1
 659: NOT
 660: PPUSH
 661: LD_EXP 2
 665: PPUSH
 666: CALL 28653 0 3
 670: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 671: LD_ADDR_EXP 34
 675: PUSH
 676: LD_STRING Kovalyuk
 678: PPUSH
 679: LD_EXP 1
 683: NOT
 684: PPUSH
 685: LD_EXP 2
 689: PPUSH
 690: CALL 28653 0 3
 694: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 695: LD_ADDR_EXP 31
 699: PUSH
 700: LD_STRING Belkov
 702: PPUSH
 703: LD_EXP 1
 707: NOT
 708: PPUSH
 709: LD_EXP 2
 713: PPUSH
 714: CALL 28653 0 3
 718: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 719: LD_ADDR_EXP 33
 723: PUSH
 724: LD_STRING Kurin
 726: PPUSH
 727: CALL_OW 25
 731: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 732: LD_ADDR_EXP 35
 736: PUSH
 737: LD_STRING Popov
 739: PPUSH
 740: CALL_OW 25
 744: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 745: LD_ADDR_EXP 37
 749: PUSH
 750: LD_STRING Grishko
 752: PPUSH
 753: CALL_OW 25
 757: ST_TO_ADDR
// burlakTeam := CreateCharacterSet ( prevMissionPrefix & burlakTeam ) ;
 758: LD_ADDR_EXP 41
 762: PUSH
 763: LD_EXP 2
 767: PUSH
 768: LD_STRING burlakTeam
 770: STR
 771: PPUSH
 772: CALL_OW 31
 776: ST_TO_ADDR
// kirovTeam := CreateCharacterSet ( prevMissionPrefix & kirovTeam ) ;
 777: LD_ADDR_EXP 42
 781: PUSH
 782: LD_EXP 2
 786: PUSH
 787: LD_STRING kirovTeam
 789: STR
 790: PPUSH
 791: CALL_OW 31
 795: ST_TO_ADDR
// if kirovTeam < 15 then
 796: LD_EXP 42
 800: PUSH
 801: LD_INT 15
 803: LESS
 804: IFFALSE 876
// for i := Count ( kirovTeam ) to 22 do
 806: LD_ADDR_VAR 0 2
 810: PUSH
 811: DOUBLE
 812: LD_EXP 42
 816: PPUSH
 817: CALL 30877 0 1
 821: DEC
 822: ST_TO_ADDR
 823: LD_INT 22
 825: PUSH
 826: FOR_TO
 827: IFFALSE 874
// begin PrepareHuman ( false , i mod 4 + 1 , 2 ) ;
 829: LD_INT 0
 831: PPUSH
 832: LD_VAR 0 2
 836: PUSH
 837: LD_INT 4
 839: MOD
 840: PUSH
 841: LD_INT 1
 843: PLUS
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: CALL_OW 380
// kirovTeam := Join ( kirovTeam , CreateHuman ) ;
 852: LD_ADDR_EXP 42
 856: PUSH
 857: LD_EXP 42
 861: PPUSH
 862: CALL_OW 44
 866: PPUSH
 867: CALL 66853 0 2
 871: ST_TO_ADDR
// end ;
 872: GO 826
 874: POP
 875: POP
// for i in kirovTeam union burlakTeam do
 876: LD_ADDR_VAR 0 2
 880: PUSH
 881: LD_EXP 42
 885: PUSH
 886: LD_EXP 41
 890: UNION
 891: PUSH
 892: FOR_IN
 893: IFFALSE 1138
// begin case GetClass ( i ) of class_soldier , class_engineer :
 895: LD_VAR 0 2
 899: PPUSH
 900: CALL_OW 257
 904: PUSH
 905: LD_INT 1
 907: DOUBLE
 908: EQUAL
 909: IFTRUE 919
 911: LD_INT 2
 913: DOUBLE
 914: EQUAL
 915: IFTRUE 919
 917: GO 970
 919: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_armoury ] ] ) ; class_scientistic :
 920: LD_ADDR_VAR 0 5
 924: PUSH
 925: LD_INT 22
 927: PUSH
 928: LD_INT 6
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 62
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 4
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: ST_TO_ADDR
 968: GO 1089
 970: LD_INT 4
 972: DOUBLE
 973: EQUAL
 974: IFTRUE 978
 976: GO 1029
 978: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_lab ] ] ) ; class_mechanic :
 979: LD_ADDR_VAR 0 5
 983: PUSH
 984: LD_INT 22
 986: PUSH
 987: LD_INT 6
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 62
 999: PUSH
1000: EMPTY
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 6
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: LIST
1021: PPUSH
1022: CALL_OW 69
1026: ST_TO_ADDR
1027: GO 1089
1029: LD_INT 3
1031: DOUBLE
1032: EQUAL
1033: IFTRUE 1037
1035: GO 1088
1037: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_not , [ f_full ] ] , [ f_btype , b_workshop ] ] ) ; end ;
1038: LD_ADDR_VAR 0 5
1042: PUSH
1043: LD_INT 22
1045: PUSH
1046: LD_INT 6
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: PUSH
1053: LD_INT 3
1055: PUSH
1056: LD_INT 62
1058: PUSH
1059: EMPTY
1060: LIST
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 30
1068: PUSH
1069: LD_INT 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 69
1085: ST_TO_ADDR
1086: GO 1089
1088: POP
// if tmp then
1089: LD_VAR 0 5
1093: IFFALSE 1115
// PlaceHumanInUnit ( i , tmp [ 1 ] ) else
1095: LD_VAR 0 2
1099: PPUSH
1100: LD_VAR 0 5
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PPUSH
1109: CALL_OW 52
1113: GO 1136
// PlaceUnitXYR ( i , 158 , 106 , 3 , false ) ;
1115: LD_VAR 0 2
1119: PPUSH
1120: LD_INT 158
1122: PPUSH
1123: LD_INT 106
1125: PPUSH
1126: LD_INT 3
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL_OW 50
// end ;
1136: GO 892
1138: POP
1139: POP
// for i := 1 to 2 do
1140: LD_ADDR_VAR 0 2
1144: PUSH
1145: DOUBLE
1146: LD_INT 1
1148: DEC
1149: ST_TO_ADDR
1150: LD_INT 2
1152: PUSH
1153: FOR_TO
1154: IFFALSE 1188
// begin PrepareSoldier ( sex_male , 2 ) ;
1156: LD_INT 1
1158: PPUSH
1159: LD_INT 2
1161: PPUSH
1162: CALL_OW 381
// grishkoTeam := Join ( grishkoTeam , CreateHuman ) ;
1166: LD_ADDR_EXP 40
1170: PUSH
1171: LD_EXP 40
1175: PPUSH
1176: CALL_OW 44
1180: PPUSH
1181: CALL 66853 0 2
1185: ST_TO_ADDR
// end ;
1186: GO 1153
1188: POP
1189: POP
// grishkoTeam := Join ( grishkoTeam , Grishko ) ;
1190: LD_ADDR_EXP 40
1194: PUSH
1195: LD_EXP 40
1199: PPUSH
1200: LD_EXP 37
1204: PPUSH
1205: CALL 66853 0 2
1209: ST_TO_ADDR
// vehiclesAmount := LoadVariable ( 02_VehiclesCount , 2 ) ;
1210: LD_ADDR_VAR 0 3
1214: PUSH
1215: LD_STRING 02_VehiclesCount
1217: PPUSH
1218: LD_INT 2
1220: PPUSH
1221: CALL_OW 30
1225: ST_TO_ADDR
// if vehiclesAmount > 4 then
1226: LD_VAR 0 3
1230: PUSH
1231: LD_INT 4
1233: GREATER
1234: IFFALSE 1244
// vehiclesAmount := 4 ;
1236: LD_ADDR_VAR 0 3
1240: PUSH
1241: LD_INT 4
1243: ST_TO_ADDR
// if Difficulty > 2 and vehiclesAmount > 2 then
1244: LD_OWVAR 67
1248: PUSH
1249: LD_INT 2
1251: GREATER
1252: IFFALSE 1264
1254: PUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_INT 2
1262: GREATER
1263: AND
1264: IFFALSE 1274
// vehiclesAmount := 2 ;
1266: LD_ADDR_VAR 0 3
1270: PUSH
1271: LD_INT 2
1273: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1274: LD_ADDR_VAR 0 2
1278: PUSH
1279: DOUBLE
1280: LD_INT 1
1282: DEC
1283: ST_TO_ADDR
1284: LD_VAR 0 3
1288: PUSH
1289: FOR_TO
1290: IFFALSE 1372
// begin uc_side := 3 ;
1292: LD_ADDR_OWVAR 20
1296: PUSH
1297: LD_INT 3
1299: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1300: LD_INT 21
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: LD_INT 1
1308: PPUSH
1309: LD_INT 42
1311: PPUSH
1312: LD_INT 80
1314: PPUSH
1315: CALL 33673 0 5
// veh := CreateVehicle ;
1319: LD_ADDR_VAR 0 4
1323: PUSH
1324: CALL_OW 45
1328: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1329: LD_VAR 0 4
1333: PPUSH
1334: LD_INT 0
1336: PPUSH
1337: LD_INT 5
1339: PPUSH
1340: CALL_OW 12
1344: PPUSH
1345: CALL_OW 233
// PlaceUnitXYR ( veh , 112 , 98 , 12 , false ) ;
1349: LD_VAR 0 4
1353: PPUSH
1354: LD_INT 112
1356: PPUSH
1357: LD_INT 98
1359: PPUSH
1360: LD_INT 12
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 50
// end ;
1370: GO 1289
1372: POP
1373: POP
// vehiclesAmount := LoadVariable ( 02_KirovVehiclesCount , 1 ) ;
1374: LD_ADDR_VAR 0 3
1378: PUSH
1379: LD_STRING 02_KirovVehiclesCount
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: CALL_OW 30
1389: ST_TO_ADDR
// if vehiclesAmount > 4 then
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: GREATER
1398: IFFALSE 1408
// vehiclesAmount := 4 ;
1400: LD_ADDR_VAR 0 3
1404: PUSH
1405: LD_INT 4
1407: ST_TO_ADDR
// for i := 1 to vehiclesAmount do
1408: LD_ADDR_VAR 0 2
1412: PUSH
1413: DOUBLE
1414: LD_INT 1
1416: DEC
1417: ST_TO_ADDR
1418: LD_VAR 0 3
1422: PUSH
1423: FOR_TO
1424: IFFALSE 1506
// begin uc_side := 6 ;
1426: LD_ADDR_OWVAR 20
1430: PUSH
1431: LD_INT 6
1433: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
1434: LD_INT 21
1436: PPUSH
1437: LD_INT 1
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: LD_INT 42
1445: PPUSH
1446: LD_INT 80
1448: PPUSH
1449: CALL 33673 0 5
// veh := CreateVehicle ;
1453: LD_ADDR_VAR 0 4
1457: PUSH
1458: CALL_OW 45
1462: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1463: LD_VAR 0 4
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: LD_INT 5
1473: PPUSH
1474: CALL_OW 12
1478: PPUSH
1479: CALL_OW 233
// PlaceUnitXYR ( veh , 157 , 106 , 12 , false ) ;
1483: LD_VAR 0 4
1487: PPUSH
1488: LD_INT 157
1490: PPUSH
1491: LD_INT 106
1493: PPUSH
1494: LD_INT 12
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 50
// end ;
1504: GO 1423
1506: POP
1507: POP
// mainRuCharacters := [ Burlak , Kovalyuk , Gnyevko , Belkov , Scholtze , Kirilenkova ] ;
1508: LD_ADDR_EXP 48
1512: PUSH
1513: LD_EXP 29
1517: PUSH
1518: LD_EXP 34
1522: PUSH
1523: LD_EXP 30
1527: PUSH
1528: LD_EXP 31
1532: PUSH
1533: LD_EXP 36
1537: PUSH
1538: LD_EXP 32
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// kirovVehicles := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1551: LD_ADDR_EXP 49
1555: PUSH
1556: LD_INT 22
1558: PUSH
1559: LD_INT 6
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 21
1568: PUSH
1569: LD_INT 2
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PPUSH
1580: CALL_OW 69
1584: ST_TO_ADDR
// kirovAttackVehicles := [ ] ;
1585: LD_ADDR_EXP 50
1589: PUSH
1590: EMPTY
1591: ST_TO_ADDR
// kirovTechs := GetTechNation ( 6 , nation_russian , state_enabled ) ;
1592: LD_ADDR_EXP 51
1596: PUSH
1597: LD_INT 6
1599: PPUSH
1600: LD_INT 3
1602: PPUSH
1603: LD_INT 1
1605: PPUSH
1606: CALL 28800 0 3
1610: ST_TO_ADDR
// kirovConstructList := [ ] ;
1611: LD_ADDR_EXP 53
1615: PUSH
1616: EMPTY
1617: ST_TO_ADDR
// kirovBuildingsToBuild := [ [ b_warehouse , 163 , 104 , 3 ] , [ b_factory , 159 , 113 , 0 ] , [ b_lab_half , 153 , 99 , 3 , b_lab_weapon ] , [ b_lab_full , 153 , 99 , 3 , b_lab_siberium ] , [ b_barracks , 151 , 108 , 0 ] , [ b_barracks , 166 , 116 , 0 ] , [ b_bunker , 144 , 98 , 1 ] , [ b_oil_power , 155 , 94 , 0 ] , [ b_oil_power , 158 , 96 , 2 ] , [ b_ext_gun , 162 , 116 , 5 ] , [ b_bunker , 169 , 101 , 3 ] , [ b_bunker , 171 , 119 , 5 ] , [ b_bunker , 144 , 106 , 1 ] , [ b_bunker , 173 , 105 , 3 ] , [ b_bunker , 169 , 111 , 5 ] ] ;
1618: LD_ADDR_EXP 52
1622: PUSH
1623: LD_INT 1
1625: PUSH
1626: LD_INT 163
1628: PUSH
1629: LD_INT 104
1631: PUSH
1632: LD_INT 3
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 3
1643: PUSH
1644: LD_INT 159
1646: PUSH
1647: LD_INT 113
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 7
1661: PUSH
1662: LD_INT 153
1664: PUSH
1665: LD_INT 99
1667: PUSH
1668: LD_INT 3
1670: PUSH
1671: LD_INT 10
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 8
1683: PUSH
1684: LD_INT 153
1686: PUSH
1687: LD_INT 99
1689: PUSH
1690: LD_INT 3
1692: PUSH
1693: LD_INT 11
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 5
1705: PUSH
1706: LD_INT 151
1708: PUSH
1709: LD_INT 108
1711: PUSH
1712: LD_INT 0
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 5
1723: PUSH
1724: LD_INT 166
1726: PUSH
1727: LD_INT 116
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: PUSH
1739: LD_INT 32
1741: PUSH
1742: LD_INT 144
1744: PUSH
1745: LD_INT 98
1747: PUSH
1748: LD_INT 1
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 26
1759: PUSH
1760: LD_INT 155
1762: PUSH
1763: LD_INT 94
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 26
1777: PUSH
1778: LD_INT 158
1780: PUSH
1781: LD_INT 96
1783: PUSH
1784: LD_INT 2
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 17
1795: PUSH
1796: LD_INT 162
1798: PUSH
1799: LD_INT 116
1801: PUSH
1802: LD_INT 5
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 32
1813: PUSH
1814: LD_INT 169
1816: PUSH
1817: LD_INT 101
1819: PUSH
1820: LD_INT 3
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 32
1831: PUSH
1832: LD_INT 171
1834: PUSH
1835: LD_INT 119
1837: PUSH
1838: LD_INT 5
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: LIST
1846: PUSH
1847: LD_INT 32
1849: PUSH
1850: LD_INT 144
1852: PUSH
1853: LD_INT 106
1855: PUSH
1856: LD_INT 1
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PUSH
1865: LD_INT 32
1867: PUSH
1868: LD_INT 173
1870: PUSH
1871: LD_INT 105
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 32
1885: PUSH
1886: LD_INT 169
1888: PUSH
1889: LD_INT 111
1891: PUSH
1892: LD_INT 5
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: ST_TO_ADDR
// end ;
1918: LD_VAR 0 1
1922: RET
// every 0 0$1 trigger gameStart do
1923: LD_EXP 7
1927: IFFALSE 2007
1929: GO 1931
1931: DISABLE
// begin enable ;
1932: ENABLE
// BaseScript ( 6 , kirovBaseArea , kirovCratesArea , kirovBaseInnerArea , kirovBaseOuterArea , kirovBaseSquad , kirovVehicles , kirovTechs , kirovConstructList , kirovBuildingsToBuild , [ 153 , 103 ] , [ 144 , 102 ] , [ 122 , 49 ] ) ;
1933: LD_INT 6
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 13
1941: PPUSH
1942: LD_INT 12
1944: PPUSH
1945: LD_INT 11
1947: PPUSH
1948: LD_EXP 38
1952: PPUSH
1953: LD_EXP 49
1957: PPUSH
1958: LD_EXP 51
1962: PPUSH
1963: LD_EXP 53
1967: PPUSH
1968: LD_EXP 52
1972: PPUSH
1973: LD_INT 153
1975: PUSH
1976: LD_INT 103
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PPUSH
1983: LD_INT 144
1985: PUSH
1986: LD_INT 102
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PPUSH
1993: LD_INT 122
1995: PUSH
1996: LD_INT 49
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: PPUSH
2003: CALL 13480 0 13
// end ;
2007: END
// every 0 0$10 + 4 4$00 trigger gameStart do var i ;
2008: LD_EXP 7
2012: IFFALSE 2243
2014: GO 2016
2016: DISABLE
2017: LD_INT 0
2019: PPUSH
// begin for i in grishkoTeam do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: LD_EXP 40
2029: PUSH
2030: FOR_IN
2031: IFFALSE 2144
// begin PlaceUnitArea ( i , grishkoTeamSpawnArea , false ) ;
2033: LD_VAR 0 1
2037: PPUSH
2038: LD_INT 15
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// ComMoveXY ( i , 142 , 135 ) ;
2048: LD_VAR 0 1
2052: PPUSH
2053: LD_INT 142
2055: PPUSH
2056: LD_INT 135
2058: PPUSH
2059: CALL_OW 111
// AddComWait ( i , 0 0$12 - ( i * 0 0$2 ) ) ;
2063: LD_VAR 0 1
2067: PPUSH
2068: LD_INT 420
2070: PUSH
2071: LD_VAR 0 1
2075: PUSH
2076: LD_INT 70
2078: MUL
2079: MINUS
2080: PPUSH
2081: CALL_OW 202
// AddComMoveXY ( i , 176 , 131 ) ;
2085: LD_VAR 0 1
2089: PPUSH
2090: LD_INT 176
2092: PPUSH
2093: LD_INT 131
2095: PPUSH
2096: CALL_OW 171
// AddComWait ( i , 0 0$6 ) ;
2100: LD_VAR 0 1
2104: PPUSH
2105: LD_INT 210
2107: PPUSH
2108: CALL_OW 202
// AddComMoveXY ( i , 199 , 105 ) ;
2112: LD_VAR 0 1
2116: PPUSH
2117: LD_INT 199
2119: PPUSH
2120: LD_INT 105
2122: PPUSH
2123: CALL_OW 171
// wait ( rand ( 0 0$1 , 0 0$3 ) ) ;
2127: LD_INT 35
2129: PPUSH
2130: LD_INT 105
2132: PPUSH
2133: CALL_OW 12
2137: PPUSH
2138: CALL_OW 67
// end ;
2142: GO 2030
2144: POP
2145: POP
// repeat wait ( 0 0$1 ) ;
2146: LD_INT 35
2148: PPUSH
2149: CALL_OW 67
// for i in grishkoTeam do
2153: LD_ADDR_VAR 0 1
2157: PUSH
2158: LD_EXP 40
2162: PUSH
2163: FOR_IN
2164: IFFALSE 2223
// if IsAt ( i , 199 , 105 ) then
2166: LD_VAR 0 1
2170: PPUSH
2171: LD_INT 199
2173: PPUSH
2174: LD_INT 105
2176: PPUSH
2177: CALL_OW 307
2181: IFFALSE 2194
// RemoveUnit ( i ) else
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 64
2192: GO 2221
// if not HasTask ( i ) then
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 314
2203: NOT
2204: IFFALSE 2221
// ComMoveXY ( i , 199 , 105 ) ;
2206: LD_VAR 0 1
2210: PPUSH
2211: LD_INT 199
2213: PPUSH
2214: LD_INT 105
2216: PPUSH
2217: CALL_OW 111
2221: GO 2163
2223: POP
2224: POP
// until not UnitFilter ( grishkoTeam , [ f_ok ] ) ;
2225: LD_EXP 40
2229: PPUSH
2230: LD_INT 50
2232: PUSH
2233: EMPTY
2234: LIST
2235: PPUSH
2236: CALL_OW 72
2240: NOT
2241: IFFALSE 2146
// end ;
2243: PPOPN 1
2245: END
// export function SendCargoWithOil ; var i , p , tmp , un , veh ; begin
2246: LD_INT 0
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
// ruCargos := [ ] ;
2254: LD_ADDR_EXP 54
2258: PUSH
2259: EMPTY
2260: ST_TO_ADDR
// ruGuards := [ ] ;
2261: LD_ADDR_EXP 55
2265: PUSH
2266: EMPTY
2267: ST_TO_ADDR
// for i := 1 to 3 do
2268: LD_ADDR_VAR 0 2
2272: PUSH
2273: DOUBLE
2274: LD_INT 1
2276: DEC
2277: ST_TO_ADDR
2278: LD_INT 3
2280: PUSH
2281: FOR_TO
2282: IFFALSE 2298
// EraseResourceArea ( i , southSpawnEraseArea ) ;
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_INT 17
2291: PPUSH
2292: CALL_OW 286
2296: GO 2281
2298: POP
2299: POP
// tmp := FilterAllUnits ( [ f_distxy , 207 , 162 , 6 ] ) ;
2300: LD_ADDR_VAR 0 4
2304: PUSH
2305: LD_INT 92
2307: PUSH
2308: LD_INT 207
2310: PUSH
2311: LD_INT 162
2313: PUSH
2314: LD_INT 6
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: ST_TO_ADDR
// if tmp then
2328: LD_VAR 0 4
2332: IFFALSE 2411
// begin if UnitFilter ( tmp , [ f_type , unit_building ] ) then
2334: LD_VAR 0 4
2338: PPUSH
2339: LD_INT 21
2341: PUSH
2342: LD_INT 3
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PPUSH
2349: CALL_OW 72
2353: IFFALSE 2396
// begin for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: LD_VAR 0 4
2364: PPUSH
2365: LD_INT 21
2367: PUSH
2368: LD_INT 3
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 72
2379: PUSH
2380: FOR_IN
2381: IFFALSE 2394
// RemoveUnit ( i ) ;
2383: LD_VAR 0 2
2387: PPUSH
2388: CALL_OW 64
2392: GO 2380
2394: POP
2395: POP
// end ; ComMoveXY ( tmp , 200 , 147 ) ;
2396: LD_VAR 0 4
2400: PPUSH
2401: LD_INT 200
2403: PPUSH
2404: LD_INT 147
2406: PPUSH
2407: CALL_OW 111
// end ; tmp := [ ] ;
2411: LD_ADDR_VAR 0 4
2415: PUSH
2416: EMPTY
2417: ST_TO_ADDR
// for i := 1 to 3 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 3
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2648
// begin uc_side := 6 ;
2434: LD_ADDR_OWVAR 20
2438: PUSH
2439: LD_INT 6
2441: ST_TO_ADDR
// uc_nation := nation_russian ;
2442: LD_ADDR_OWVAR 21
2446: PUSH
2447: LD_INT 3
2449: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 90 ) ;
2450: LD_INT 21
2452: PPUSH
2453: LD_INT 1
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: LD_INT 51
2461: PPUSH
2462: LD_INT 90
2464: PPUSH
2465: CALL 33673 0 5
// veh := CreateVehicle ;
2469: LD_ADDR_VAR 0 6
2473: PUSH
2474: CALL_OW 45
2478: ST_TO_ADDR
// ruCargos := Join ( ruCargos , veh ) ;
2479: LD_ADDR_EXP 54
2483: PUSH
2484: LD_EXP 54
2488: PPUSH
2489: LD_VAR 0 6
2493: PPUSH
2494: CALL 66853 0 2
2498: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 ) ;
2499: LD_VAR 0 6
2503: PPUSH
2504: LD_INT 2
2506: PPUSH
2507: LD_INT 100
2509: PPUSH
2510: CALL_OW 290
// repeat wait ( 0 0$1 ) ;
2514: LD_INT 35
2516: PPUSH
2517: CALL_OW 67
// until PlaceUnitArea ( veh , southRoadSpawnArea , false ) ;
2521: LD_VAR 0 6
2525: PPUSH
2526: LD_INT 14
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL_OW 49
2536: IFFALSE 2514
// PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 3 ) ;
2538: LD_INT 0
2540: PPUSH
2541: LD_INT 1
2543: PUSH
2544: LD_INT 4
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_VAR 0 2
2555: PUSH
2556: LD_INT 2
2558: MOD
2559: PUSH
2560: LD_INT 1
2562: PLUS
2563: ARRAY
2564: PPUSH
2565: LD_INT 3
2567: PPUSH
2568: CALL_OW 380
// un := CreateHuman ;
2572: LD_ADDR_VAR 0 5
2576: PUSH
2577: CALL_OW 44
2581: ST_TO_ADDR
// ruGuards := Join ( ruGuards , un ) ;
2582: LD_ADDR_EXP 55
2586: PUSH
2587: LD_EXP 55
2591: PPUSH
2592: LD_VAR 0 5
2596: PPUSH
2597: CALL 66853 0 2
2601: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2602: LD_VAR 0 5
2606: PPUSH
2607: LD_VAR 0 6
2611: PPUSH
2612: CALL_OW 52
// ComMoveXY ( veh , 105 , 47 ) ;
2616: LD_VAR 0 6
2620: PPUSH
2621: LD_INT 105
2623: PPUSH
2624: LD_INT 47
2626: PPUSH
2627: CALL_OW 111
// AddComMoveXY ( veh , 71 , 29 ) ;
2631: LD_VAR 0 6
2635: PPUSH
2636: LD_INT 71
2638: PPUSH
2639: LD_INT 29
2641: PPUSH
2642: CALL_OW 171
// end ;
2646: GO 2431
2648: POP
2649: POP
// p := 0 ;
2650: LD_ADDR_VAR 0 3
2654: PUSH
2655: LD_INT 0
2657: ST_TO_ADDR
// repeat wait ( 0 0$3 ) ;
2658: LD_INT 105
2660: PPUSH
2661: CALL_OW 67
// p := Inc ( p ) ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: LD_VAR 0 3
2674: PPUSH
2675: CALL 68226 0 1
2679: ST_TO_ADDR
// for i in ruCargos do
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_EXP 54
2689: PUSH
2690: FOR_IN
2691: IFFALSE 2722
// if not HasTask ( i ) then
2693: LD_VAR 0 2
2697: PPUSH
2698: CALL_OW 314
2702: NOT
2703: IFFALSE 2720
// ComMoveXY ( i , 71 , 29 ) ;
2705: LD_VAR 0 2
2709: PPUSH
2710: LD_INT 71
2712: PPUSH
2713: LD_INT 29
2715: PPUSH
2716: CALL_OW 111
2720: GO 2690
2722: POP
2723: POP
// until UnitFilter ( ruCargos , [ f_distxy , 71 , 29 , 8 ] ) >= 2 or p > 20 ;
2724: LD_EXP 54
2728: PPUSH
2729: LD_INT 92
2731: PUSH
2732: LD_INT 71
2734: PUSH
2735: LD_INT 29
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 72
2751: PUSH
2752: LD_INT 2
2754: GREATEREQUAL
2755: IFTRUE 2767
2757: PUSH
2758: LD_VAR 0 3
2762: PUSH
2763: LD_INT 20
2765: GREATER
2766: OR
2767: IFFALSE 2658
// for i in ruGuards do
2769: LD_ADDR_VAR 0 2
2773: PUSH
2774: LD_EXP 55
2778: PUSH
2779: FOR_IN
2780: IFFALSE 2815
// begin ComExitVehicle ( i ) ;
2782: LD_VAR 0 2
2786: PPUSH
2787: CALL_OW 121
// wait ( 0 0$1 ) ;
2791: LD_INT 35
2793: PPUSH
2794: CALL_OW 67
// ComAgressiveMove ( i , 63 , 47 ) ;
2798: LD_VAR 0 2
2802: PPUSH
2803: LD_INT 63
2805: PPUSH
2806: LD_INT 47
2808: PPUSH
2809: CALL_OW 114
// end ;
2813: GO 2779
2815: POP
2816: POP
// end ;
2817: LD_VAR 0 1
2821: RET
// every 0 0$1 trigger hasFactory and tick > 15 15$00 and Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) > 2 do
2822: LD_EXP 19
2826: IFFALSE 2838
2828: PUSH
2829: LD_OWVAR 1
2833: PUSH
2834: LD_INT 31500
2836: GREATER
2837: AND
2838: IFFALSE 2897
2840: PUSH
2841: LD_INT 22
2843: PUSH
2844: LD_INT 3
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 21
2853: PUSH
2854: LD_INT 2
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 50
2863: PUSH
2864: EMPTY
2865: LIST
2866: PUSH
2867: LD_INT 23
2869: PUSH
2870: LD_INT 3
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: PPUSH
2883: CALL_OW 69
2887: PPUSH
2888: CALL 30877 0 1
2892: PUSH
2893: LD_INT 2
2895: GREATER
2896: AND
2897: IFFALSE 2935
2899: GO 2901
2901: DISABLE
// kirovConstructList := Join ( kirovConstructList , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ) ;
2902: LD_ADDR_EXP 53
2906: PUSH
2907: LD_EXP 53
2911: PPUSH
2912: LD_INT 21
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: LD_INT 43
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PPUSH
2930: CALL 66853 0 2
2934: ST_TO_ADDR
2935: END
// every 0 0$1 trigger hasFactory and tick > 15 15$00 and Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) > 6 do
2936: LD_EXP 19
2940: IFFALSE 2952
2942: PUSH
2943: LD_OWVAR 1
2947: PUSH
2948: LD_INT 31500
2950: GREATER
2951: AND
2952: IFFALSE 3011
2954: PUSH
2955: LD_INT 22
2957: PUSH
2958: LD_INT 3
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: PUSH
2965: LD_INT 21
2967: PUSH
2968: LD_INT 2
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: PUSH
2975: LD_INT 50
2977: PUSH
2978: EMPTY
2979: LIST
2980: PUSH
2981: LD_INT 23
2983: PUSH
2984: LD_INT 3
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PPUSH
2997: CALL_OW 69
3001: PPUSH
3002: CALL 30877 0 1
3006: PUSH
3007: LD_INT 6
3009: GREATER
3010: AND
3011: IFFALSE 3049
3013: GO 3015
3015: DISABLE
// kirovConstructList := Join ( kirovConstructList , [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun ] ) ;
3016: LD_ADDR_EXP 53
3020: PUSH
3021: LD_EXP 53
3025: PPUSH
3026: LD_INT 21
3028: PUSH
3029: LD_INT 1
3031: PUSH
3032: LD_INT 1
3034: PUSH
3035: LD_INT 44
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: LIST
3042: LIST
3043: PPUSH
3044: CALL 66853 0 2
3048: ST_TO_ADDR
3049: END
// every 0 0$1 trigger GetLives ( Popov ) < 500 and IsInArea ( Popov , easternHillArea ) and GetDistUnitXY ( Popov , 146 , 67 ) > 3 do
3050: LD_EXP 35
3054: PPUSH
3055: CALL_OW 256
3059: PUSH
3060: LD_INT 500
3062: LESS
3063: IFFALSE 3079
3065: PUSH
3066: LD_EXP 35
3070: PPUSH
3071: LD_INT 3
3073: PPUSH
3074: CALL_OW 308
3078: AND
3079: IFFALSE 3102
3081: PUSH
3082: LD_EXP 35
3086: PPUSH
3087: LD_INT 146
3089: PPUSH
3090: LD_INT 67
3092: PPUSH
3093: CALL_OW 297
3097: PUSH
3098: LD_INT 3
3100: GREATER
3101: AND
3102: IFFALSE 3123
3104: GO 3106
3106: DISABLE
// begin enable ;
3107: ENABLE
// ComMoveXY ( Popov , 146 , 67 ) ;
3108: LD_EXP 35
3112: PPUSH
3113: LD_INT 146
3115: PPUSH
3116: LD_INT 67
3118: PPUSH
3119: CALL_OW 111
// end ;
3123: END
// every 0 0$1 trigger not americanRetreat and ( ( not IsInArea ( Popov , easternHillArea ) and not HasTask ( Popov ) ) or GetDistUnitXY ( Popov , 146 , 67 ) > 30 ) do
3124: LD_EXP 26
3128: NOT
3129: IFFALSE 3183
3131: PUSH
3132: LD_EXP 35
3136: PPUSH
3137: LD_INT 3
3139: PPUSH
3140: CALL_OW 308
3144: NOT
3145: IFFALSE 3159
3147: PUSH
3148: LD_EXP 35
3152: PPUSH
3153: CALL_OW 314
3157: NOT
3158: AND
3159: IFTRUE 3182
3161: PUSH
3162: LD_EXP 35
3166: PPUSH
3167: LD_INT 146
3169: PPUSH
3170: LD_INT 67
3172: PPUSH
3173: CALL_OW 297
3177: PUSH
3178: LD_INT 30
3180: GREATER
3181: OR
3182: AND
3183: IFFALSE 3204
3185: GO 3187
3187: DISABLE
// begin enable ;
3188: ENABLE
// ComMoveXY ( Popov , 146 , 67 ) ;
3189: LD_EXP 35
3193: PPUSH
3194: LD_INT 146
3196: PPUSH
3197: LD_INT 67
3199: PPUSH
3200: CALL_OW 111
// end ;
3204: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_engine , engine_combustion ] ] ) do var i ;
3205: LD_INT 22
3207: PUSH
3208: LD_INT 6
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 32
3217: PUSH
3218: LD_INT 1
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PPUSH
3229: CALL_OW 69
3233: IFFALSE 3310
3235: GO 3237
3237: DISABLE
3238: LD_INT 0
3240: PPUSH
// begin enable ;
3241: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_engine , engine_combustion ] ] ) do
3242: LD_ADDR_VAR 0 1
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 6
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 32
3259: PUSH
3260: LD_INT 1
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: PUSH
3276: FOR_IN
3277: IFFALSE 3308
// if GetFuel ( i ) < 3 then
3279: LD_VAR 0 1
3283: PPUSH
3284: CALL_OW 261
3288: PUSH
3289: LD_INT 3
3291: LESS
3292: IFFALSE 3306
// SetFuel ( i , 3 ) ;
3294: LD_VAR 0 1
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: CALL_OW 240
3306: GO 3276
3308: POP
3309: POP
// end ;
3310: PPOPN 1
3312: END
// every 0 0$1 trigger IsInArea ( Popov , easternHillArea ) do var sol ;
3313: LD_EXP 35
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: CALL_OW 308
3325: IFFALSE 3523
3327: GO 3329
3329: DISABLE
3330: LD_INT 0
3332: PPUSH
// begin sol := UnitFilter ( kirovBaseSquad , [ f_class , class_soldier ] ) ;
3333: LD_ADDR_VAR 0 1
3337: PUSH
3338: LD_EXP 38
3342: PPUSH
3343: LD_INT 25
3345: PUSH
3346: LD_INT 1
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PPUSH
3353: CALL_OW 72
3357: ST_TO_ADDR
// if not sol then
3358: LD_VAR 0 1
3362: NOT
3363: IFFALSE 3367
// exit ;
3365: GO 3523
// sol := sol [ 1 ] ;
3367: LD_ADDR_VAR 0 1
3371: PUSH
3372: LD_VAR 0 1
3376: PUSH
3377: LD_INT 1
3379: ARRAY
3380: ST_TO_ADDR
// kirovBaseSquad := kirovBaseSquad diff sol ;
3381: LD_ADDR_EXP 38
3385: PUSH
3386: LD_EXP 38
3390: PUSH
3391: LD_VAR 0 1
3395: DIFF
3396: ST_TO_ADDR
// ComExitBuilding ( sol ) ;
3397: LD_VAR 0 1
3401: PPUSH
3402: CALL_OW 122
// AddComMoveXY ( sol , 174 , 151 ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: LD_INT 174
3413: PPUSH
3414: LD_INT 151
3416: PPUSH
3417: CALL_OW 171
// AddComMoveXY ( sol , 219 , 154 ) ;
3421: LD_VAR 0 1
3425: PPUSH
3426: LD_INT 219
3428: PPUSH
3429: LD_INT 154
3431: PPUSH
3432: CALL_OW 171
// repeat AddComAgressiveMove ( sol , 163 , 56 ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: LD_INT 163
3443: PPUSH
3444: LD_INT 56
3446: PPUSH
3447: CALL_OW 174
// AddComAgressiveMove ( sol , 173 , 85 ) ;
3451: LD_VAR 0 1
3455: PPUSH
3456: LD_INT 173
3458: PPUSH
3459: LD_INT 85
3461: PPUSH
3462: CALL_OW 174
// AddComAgressiveMove ( sol , 216 , 151 ) ;
3466: LD_VAR 0 1
3470: PPUSH
3471: LD_INT 216
3473: PPUSH
3474: LD_INT 151
3476: PPUSH
3477: CALL_OW 174
// wait ( 3 3$30 ) ;
3481: LD_INT 7350
3483: PPUSH
3484: CALL_OW 67
// until not IsOk ( sol ) or americanRetreat ;
3488: LD_VAR 0 1
3492: PPUSH
3493: CALL_OW 302
3497: NOT
3498: IFTRUE 3506
3500: PUSH
3501: LD_EXP 26
3505: OR
3506: IFFALSE 3436
// ComMoveXY ( sol , 192 , 113 ) ;
3508: LD_VAR 0 1
3512: PPUSH
3513: LD_INT 192
3515: PPUSH
3516: LD_INT 113
3518: PPUSH
3519: CALL_OW 111
// end ;
3523: PPOPN 1
3525: END
// every 0 0$1 trigger allowedToAttackOmicron and kirovAttackVehicles and not retreat do var i , filter , tmp , enemy , x , points , point ;
3526: LD_EXP 13
3530: IFFALSE 3538
3532: PUSH
3533: LD_EXP 50
3537: AND
3538: IFFALSE 3547
3540: PUSH
3541: LD_EXP 18
3545: NOT
3546: AND
3547: IFFALSE 4114
3549: GO 3551
3551: DISABLE
3552: LD_INT 0
3554: PPUSH
3555: PPUSH
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// begin enable ;
3561: ENABLE
// filter := UnitFilter ( kirovAttackVehicles , [ f_type , unit_vehicle ] ) ;
3562: LD_ADDR_VAR 0 2
3566: PUSH
3567: LD_EXP 50
3571: PPUSH
3572: LD_INT 21
3574: PUSH
3575: LD_INT 2
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: PPUSH
3582: CALL_OW 72
3586: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
3587: LD_ADDR_VAR 0 4
3591: PUSH
3592: LD_INT 22
3594: PUSH
3595: LD_INT 1
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PPUSH
3602: CALL_OW 69
3606: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
3607: LD_ADDR_VAR 0 6
3611: PUSH
3612: LD_INT 44
3614: PUSH
3615: LD_INT 15
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 54
3624: PUSH
3625: LD_INT 39
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: ST_TO_ADDR
// for i in filter do
3636: LD_ADDR_VAR 0 1
3640: PUSH
3641: LD_VAR 0 2
3645: PUSH
3646: FOR_IN
3647: IFFALSE 4112
// begin tmp := IsDrivenBy ( i ) ;
3649: LD_ADDR_VAR 0 3
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 311
3663: ST_TO_ADDR
// if not tmp then
3664: LD_VAR 0 3
3668: NOT
3669: IFFALSE 3673
// continue ;
3671: GO 3646
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
3673: LD_VAR 0 1
3677: PPUSH
3678: CALL_OW 261
3682: PUSH
3683: LD_INT 90
3685: GREATER
3686: IFFALSE 3703
3688: PUSH
3689: LD_VAR 0 1
3693: PPUSH
3694: CALL_OW 110
3698: PUSH
3699: LD_INT 2
3701: EQUAL
3702: AND
3703: IFFALSE 3719
// SetTag ( i , 0 ) else
3705: LD_VAR 0 1
3709: PPUSH
3710: LD_INT 0
3712: PPUSH
3713: CALL_OW 109
3717: GO 3789
// if GetTag ( i ) = 2 and UnitFilter ( ruCargos , [ f_ok ] ) then
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 110
3728: PUSH
3729: LD_INT 2
3731: EQUAL
3732: IFFALSE 3751
3734: PUSH
3735: LD_EXP 54
3739: PPUSH
3740: LD_INT 50
3742: PUSH
3743: EMPTY
3744: LIST
3745: PPUSH
3746: CALL_OW 72
3750: AND
3751: IFFALSE 3789
// begin x := rand ( 1 , 2 ) ;
3753: LD_ADDR_VAR 0 5
3757: PUSH
3758: LD_INT 1
3760: PPUSH
3761: LD_INT 2
3763: PPUSH
3764: CALL_OW 12
3768: ST_TO_ADDR
// AddComMoveUnit ( i , ruCargos [ x ] ) ;
3769: LD_VAR 0 1
3773: PPUSH
3774: LD_EXP 54
3778: PUSH
3779: LD_VAR 0 5
3783: ARRAY
3784: PPUSH
3785: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
3789: LD_VAR 0 1
3793: PPUSH
3794: CALL_OW 256
3798: PUSH
3799: LD_INT 600
3801: GREATEREQUAL
3802: IFFALSE 3816
3804: PUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: CALL_OW 110
3814: NOT
3815: AND
3816: IFFALSE 3842
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
3818: LD_VAR 0 1
3822: PPUSH
3823: LD_VAR 0 4
3827: PPUSH
3828: LD_VAR 0 1
3832: PPUSH
3833: CALL_OW 74
3837: PPUSH
3838: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
3842: LD_VAR 0 1
3846: PPUSH
3847: CALL_OW 256
3851: PUSH
3852: LD_INT 600
3854: LESS
3855: IFFALSE 3869
3857: PUSH
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 110
3867: NOT
3868: AND
3869: IFFALSE 3945
// begin SetTag ( i , 1 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_INT 1
3878: PPUSH
3879: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
3883: LD_ADDR_VAR 0 7
3887: PUSH
3888: LD_VAR 0 1
3892: PPUSH
3893: LD_VAR 0 6
3897: PPUSH
3898: CALL 70369 0 2
3902: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
3903: LD_VAR 0 1
3907: PPUSH
3908: LD_VAR 0 7
3912: PUSH
3913: LD_INT 1
3915: ARRAY
3916: PPUSH
3917: LD_VAR 0 7
3921: PUSH
3922: LD_INT 2
3924: ARRAY
3925: PPUSH
3926: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
3930: LD_VAR 0 1
3934: PPUSH
3935: LD_INT 71
3937: PPUSH
3938: LD_INT 29
3940: PPUSH
3941: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
3945: LD_VAR 0 1
3949: PPUSH
3950: CALL_OW 110
3954: PUSH
3955: LD_INT 1
3957: EQUAL
3958: IFFALSE 3981
3960: PUSH
3961: LD_VAR 0 1
3965: PPUSH
3966: LD_INT 71
3968: PPUSH
3969: LD_INT 29
3971: PPUSH
3972: CALL_OW 297
3976: PUSH
3977: LD_INT 9
3979: LESS
3980: AND
3981: IFFALSE 3989
3983: PUSH
3984: LD_VAR 0 3
3988: AND
3989: IFFALSE 4110
// begin ComExitVehicle ( tmp ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4000: LD_VAR 0 3
4004: PPUSH
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4014: LD_INT 35
4016: PPUSH
4017: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4021: LD_VAR 0 1
4025: PPUSH
4026: CALL_OW 256
4030: PUSH
4031: LD_INT 1000
4033: EQUAL
4034: IFFALSE 4014
// ComEnterUnit ( tmp , i ) ;
4036: LD_VAR 0 3
4040: PPUSH
4041: LD_VAR 0 1
4045: PPUSH
4046: CALL_OW 120
// if GetFuel ( i ) <= 90 and UnitFilter ( ruCargos , [ f_ok ] ) then
4050: LD_VAR 0 1
4054: PPUSH
4055: CALL_OW 261
4059: PUSH
4060: LD_INT 90
4062: LESSEQUAL
4063: IFFALSE 4082
4065: PUSH
4066: LD_EXP 54
4070: PPUSH
4071: LD_INT 50
4073: PUSH
4074: EMPTY
4075: LIST
4076: PPUSH
4077: CALL_OW 72
4081: AND
4082: IFFALSE 4098
// SetTag ( i , 2 ) else
4084: LD_VAR 0 1
4088: PPUSH
4089: LD_INT 2
4091: PPUSH
4092: CALL_OW 109
4096: GO 4110
// SetTag ( i , 0 ) ;
4098: LD_VAR 0 1
4102: PPUSH
4103: LD_INT 0
4105: PPUSH
4106: CALL_OW 109
// end ; end ;
4110: GO 3646
4112: POP
4113: POP
// end ; end_of_file
4114: PPOPN 7
4116: END
// export Sikorski , omicronTroops , americanReinforcementsTroops , omicronVehicles , omicronAttackVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild ; export function PrepareAmerican ; var i , un , limit ; begin
4117: LD_INT 0
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
// uc_side := omicronSide ;
4123: LD_ADDR_OWVAR 20
4127: PUSH
4128: LD_INT 1
4130: ST_TO_ADDR
// uc_nation := nation_american ;
4131: LD_ADDR_OWVAR 21
4135: PUSH
4136: LD_INT 1
4138: ST_TO_ADDR
// americanReinforcementsTroops := [ ] ;
4139: LD_ADDR_EXP 58
4143: PUSH
4144: EMPTY
4145: ST_TO_ADDR
// omicronTroops := [ ] ;
4146: LD_ADDR_EXP 57
4150: PUSH
4151: EMPTY
4152: ST_TO_ADDR
// omicronVehicles := [ ] ;
4153: LD_ADDR_EXP 59
4157: PUSH
4158: EMPTY
4159: ST_TO_ADDR
// omicronAttackVehicles := [ ] ;
4160: LD_ADDR_EXP 60
4164: PUSH
4165: EMPTY
4166: ST_TO_ADDR
// omicronTechs := GetTechNation ( omicronSide , nation_american , state_enabled ) ;
4167: LD_ADDR_EXP 61
4171: PUSH
4172: LD_INT 1
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: LD_INT 1
4180: PPUSH
4181: CALL 28800 0 3
4185: ST_TO_ADDR
// omicronBuildingsToBuild := [ ] ;
4186: LD_ADDR_EXP 63
4190: PUSH
4191: EMPTY
4192: ST_TO_ADDR
// omicronConstructList := [ ] ;
4193: LD_ADDR_EXP 62
4197: PUSH
4198: EMPTY
4199: ST_TO_ADDR
// SetResourceType ( GetBase ( usDep ) , mat_cans , 1000 ) ;
4200: LD_INT 290
4202: PPUSH
4203: CALL_OW 274
4207: PPUSH
4208: LD_INT 1
4210: PPUSH
4211: LD_INT 1000
4213: PPUSH
4214: CALL_OW 277
// SetResourceType ( GetBase ( usDep ) , mat_oil , 100 ) ;
4218: LD_INT 290
4220: PPUSH
4221: CALL_OW 274
4225: PPUSH
4226: LD_INT 2
4228: PPUSH
4229: LD_INT 100
4231: PPUSH
4232: CALL_OW 277
// SetBName ( usDep , omikron ) ;
4236: LD_INT 290
4238: PPUSH
4239: LD_STRING omikron
4241: PPUSH
4242: CALL_OW 500
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
4246: LD_ADDR_VAR 0 2
4250: PUSH
4251: LD_INT 22
4253: PUSH
4254: LD_INT 1
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 21
4263: PUSH
4264: LD_INT 3
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: EMPTY
4272: LIST
4273: LIST
4274: PPUSH
4275: CALL_OW 69
4279: PUSH
4280: FOR_IN
4281: IFFALSE 4303
// SetBLevel ( i , 1 + Difficulty ) ;
4283: LD_VAR 0 2
4287: PPUSH
4288: LD_INT 1
4290: PUSH
4291: LD_OWVAR 67
4295: PLUS
4296: PPUSH
4297: CALL_OW 241
4301: GO 4280
4303: POP
4304: POP
// limit := [ 10 , 12 , 13 , 14 ] [ Difficulty ] ;
4305: LD_ADDR_VAR 0 4
4309: PUSH
4310: LD_INT 10
4312: PUSH
4313: LD_INT 12
4315: PUSH
4316: LD_INT 13
4318: PUSH
4319: LD_INT 14
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_OWVAR 67
4332: ARRAY
4333: ST_TO_ADDR
// Sikorski := NewCharacter ( Sikorski ) ;
4334: LD_ADDR_EXP 56
4338: PUSH
4339: LD_STRING Sikorski
4341: PPUSH
4342: CALL_OW 25
4346: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , usDep ) ;
4347: LD_EXP 56
4351: PPUSH
4352: LD_INT 290
4354: PPUSH
4355: CALL_OW 52
// for i := 1 to limit - 5 do
4359: LD_ADDR_VAR 0 2
4363: PUSH
4364: DOUBLE
4365: LD_INT 1
4367: DEC
4368: ST_TO_ADDR
4369: LD_VAR 0 4
4373: PUSH
4374: LD_INT 5
4376: MINUS
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4465
// begin PrepareSoldier ( false , [ 2 , 2 , 3 , 4 ] [ Difficulty ] ) ;
4381: LD_INT 0
4383: PPUSH
4384: LD_INT 2
4386: PUSH
4387: LD_INT 2
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: LD_INT 4
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_OWVAR 67
4406: ARRAY
4407: PPUSH
4408: CALL_OW 381
// un := CreateHuman ;
4412: LD_ADDR_VAR 0 3
4416: PUSH
4417: CALL_OW 44
4421: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
4422: LD_ADDR_EXP 57
4426: PUSH
4427: LD_EXP 57
4431: PPUSH
4432: LD_VAR 0 3
4436: PPUSH
4437: CALL 66853 0 2
4441: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
4442: LD_VAR 0 3
4446: PPUSH
4447: LD_INT 27
4449: PPUSH
4450: LD_INT 36
4452: PPUSH
4453: LD_INT 5
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 50
// end ;
4463: GO 4378
4465: POP
4466: POP
// limit := limit - 5 ;
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_VAR 0 4
4476: PUSH
4477: LD_INT 5
4479: MINUS
4480: ST_TO_ADDR
// for i := 1 to limit do
4481: LD_ADDR_VAR 0 2
4485: PUSH
4486: DOUBLE
4487: LD_INT 1
4489: DEC
4490: ST_TO_ADDR
4491: LD_VAR 0 4
4495: PUSH
4496: FOR_TO
4497: IFFALSE 4575
// begin PrepareHuman ( false , i mod 3 + 2 , 3 ) ;
4499: LD_INT 0
4501: PPUSH
4502: LD_VAR 0 2
4506: PUSH
4507: LD_INT 3
4509: MOD
4510: PUSH
4511: LD_INT 2
4513: PLUS
4514: PPUSH
4515: LD_INT 3
4517: PPUSH
4518: CALL_OW 380
// un := CreateHuman ;
4522: LD_ADDR_VAR 0 3
4526: PUSH
4527: CALL_OW 44
4531: ST_TO_ADDR
// omicronTroops := Join ( omicronTroops , un ) ;
4532: LD_ADDR_EXP 57
4536: PUSH
4537: LD_EXP 57
4541: PPUSH
4542: LD_VAR 0 3
4546: PPUSH
4547: CALL 66853 0 2
4551: ST_TO_ADDR
// PlaceUnitXYR ( un , 27 , 36 , 5 , false ) ;
4552: LD_VAR 0 3
4556: PPUSH
4557: LD_INT 27
4559: PPUSH
4560: LD_INT 36
4562: PPUSH
4563: LD_INT 5
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 50
// end ;
4573: GO 4496
4575: POP
4576: POP
// uc_side := reinforcementsSide ;
4577: LD_ADDR_OWVAR 20
4581: PUSH
4582: LD_INT 4
4584: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4585: LD_INT 0
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: CALL_OW 381
// un := CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// americanReinforcementsTroops := Join ( americanReinforcementsTroops , un ) ;
4605: LD_ADDR_EXP 58
4609: PUSH
4610: LD_EXP 58
4614: PPUSH
4615: LD_VAR 0 3
4619: PPUSH
4620: CALL 66853 0 2
4624: ST_TO_ADDR
// PlaceUnitXYR ( un , 71 , 102 , 3 , false ) ;
4625: LD_VAR 0 3
4629: PPUSH
4630: LD_INT 71
4632: PPUSH
4633: LD_INT 102
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: LD_INT 0
4641: PPUSH
4642: CALL_OW 50
// end ;
4646: LD_VAR 0 1
4650: RET
// every 0 0$1 trigger gameStart do
4651: LD_EXP 7
4655: IFFALSE 4727
4657: GO 4659
4659: DISABLE
// begin BaseScript ( omicronSide , omicronBaseArea , omicronBaseArea , omicronBaseInnerArea , omicronBaseOuterArea , omicronTroops , omicronVehicles , omicronTechs , omicronConstructList , omicronBuildingsToBuild , [ 27 , 32 ] , [ 19 , 14 ] , [ ] ) ;
4660: LD_INT 1
4662: PPUSH
4663: LD_INT 18
4665: PPUSH
4666: LD_INT 18
4668: PPUSH
4669: LD_INT 19
4671: PPUSH
4672: LD_INT 20
4674: PPUSH
4675: LD_EXP 57
4679: PPUSH
4680: LD_EXP 59
4684: PPUSH
4685: LD_EXP 61
4689: PPUSH
4690: LD_EXP 62
4694: PPUSH
4695: LD_EXP 63
4699: PPUSH
4700: LD_INT 27
4702: PUSH
4703: LD_INT 32
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PPUSH
4710: LD_INT 19
4712: PUSH
4713: LD_INT 14
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: PPUSH
4720: EMPTY
4721: PPUSH
4722: CALL 13480 0 13
// enable ;
4726: ENABLE
// end ;
4727: END
// every 0 0$1 + 1 1$00 trigger gameStart and hasOilTower do var i , time ;
4728: LD_EXP 7
4732: IFFALSE 4740
4734: PUSH
4735: LD_EXP 14
4739: AND
4740: IFFALSE 4832
4742: GO 4744
4744: DISABLE
4745: LD_INT 0
4747: PPUSH
4748: PPUSH
// begin time := [ 4 4$30 , 4 4$00 , 3 3$40 , 3 3$20 ] [ Difficulty ] ;
4749: LD_ADDR_VAR 0 2
4753: PUSH
4754: LD_INT 9450
4756: PUSH
4757: LD_INT 8400
4759: PUSH
4760: LD_INT 7700
4762: PUSH
4763: LD_INT 7000
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: PUSH
4772: LD_OWVAR 67
4776: ARRAY
4777: ST_TO_ADDR
// repeat wait ( time + rand ( - 0 0$20 , 0 0$40 ) ) ;
4778: LD_VAR 0 2
4782: PUSH
4783: LD_INT 700
4785: NEG
4786: PPUSH
4787: LD_INT 1400
4789: PPUSH
4790: CALL_OW 12
4794: PLUS
4795: PPUSH
4796: CALL_OW 67
// RaiseSailEvent ( eventConvoy ) ;
4800: LD_INT 2
4802: PPUSH
4803: CALL_OW 427
// convoysCounter := Dec ( convoysCounter ) ;
4807: LD_ADDR_EXP 25
4811: PUSH
4812: LD_EXP 25
4816: PPUSH
4817: CALL 68248 0 1
4821: ST_TO_ADDR
// until convoysCounter = 0 ;
4822: LD_EXP 25
4826: PUSH
4827: LD_INT 0
4829: EQUAL
4830: IFFALSE 4778
// end ;
4832: PPOPN 2
4834: END
// export function SendConvoy ; var i , j , tmp , path , strength , parts , points , skill , un , veh , coords , tag , hurt , emptyVeh , driver , cr , nearbyUnits ; begin
4835: LD_INT 0
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
// path := rand ( 1 , 5 ) ;
4855: LD_ADDR_VAR 0 5
4859: PUSH
4860: LD_INT 1
4862: PPUSH
4863: LD_INT 5
4865: PPUSH
4866: CALL_OW 12
4870: ST_TO_ADDR
// coords := [ [ [ 102 , 22 ] , [ 99 , 43 ] , [ 71 , 36 ] , [ 56 , 14 ] , [ 21 , 19 ] ] , [ [ 123 , 41 ] , [ 102 , 42 ] , [ 81 , 40 ] , [ 56 , 14 ] , [ 21 , 19 ] ] , [ [ 98 , 128 ] , [ 92 , 117 ] , [ 89 , 111 ] , [ 86 , 105 ] , [ 82 , 95 ] , [ 69 , 70 ] , [ 49 , 46 ] , [ 28 , 38 ] ] , [ [ 119 , 145 ] , [ 98 , 128 ] , [ 92 , 117 ] , [ 89 , 111 ] , [ 86 , 105 ] , [ 82 , 95 ] , [ 69 , 70 ] , [ 49 , 46 ] , [ 28 , 38 ] ] , [ [ 62 , 118 ] , [ 56 , 96 ] , [ 33 , 38 ] ] ] [ path ] ;
4871: LD_ADDR_VAR 0 12
4875: PUSH
4876: LD_INT 102
4878: PUSH
4879: LD_INT 22
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 99
4888: PUSH
4889: LD_INT 43
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 71
4898: PUSH
4899: LD_INT 36
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 56
4908: PUSH
4909: LD_INT 14
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 21
4918: PUSH
4919: LD_INT 19
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 123
4935: PUSH
4936: LD_INT 41
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 102
4945: PUSH
4946: LD_INT 42
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 81
4955: PUSH
4956: LD_INT 40
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 56
4965: PUSH
4966: LD_INT 14
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 21
4975: PUSH
4976: LD_INT 19
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 98
4992: PUSH
4993: LD_INT 128
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 92
5002: PUSH
5003: LD_INT 117
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 89
5012: PUSH
5013: LD_INT 111
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 86
5022: PUSH
5023: LD_INT 105
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 82
5032: PUSH
5033: LD_INT 95
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 69
5042: PUSH
5043: LD_INT 70
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 49
5052: PUSH
5053: LD_INT 46
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 28
5062: PUSH
5063: LD_INT 38
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 119
5082: PUSH
5083: LD_INT 145
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: LD_INT 98
5092: PUSH
5093: LD_INT 128
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: PUSH
5100: LD_INT 92
5102: PUSH
5103: LD_INT 117
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 89
5112: PUSH
5113: LD_INT 111
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 86
5122: PUSH
5123: LD_INT 105
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 82
5132: PUSH
5133: LD_INT 95
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 69
5142: PUSH
5143: LD_INT 70
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 49
5152: PUSH
5153: LD_INT 46
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 28
5162: PUSH
5163: LD_INT 38
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 62
5183: PUSH
5184: LD_INT 118
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 56
5193: PUSH
5194: LD_INT 96
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 33
5203: PUSH
5204: LD_INT 38
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 5
5227: ARRAY
5228: ST_TO_ADDR
// strength := [ 5 , 7 , 9 , 11 , 13 , 15 ] [ 7 - convoysCounter ] * Difficulty ;
5229: LD_ADDR_VAR 0 6
5233: PUSH
5234: LD_INT 5
5236: PUSH
5237: LD_INT 7
5239: PUSH
5240: LD_INT 9
5242: PUSH
5243: LD_INT 11
5245: PUSH
5246: LD_INT 13
5248: PUSH
5249: LD_INT 15
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 7
5262: PUSH
5263: LD_EXP 25
5267: MINUS
5268: ARRAY
5269: PUSH
5270: LD_OWVAR 67
5274: MUL
5275: ST_TO_ADDR
// tmp := [ ] ;
5276: LD_ADDR_VAR 0 4
5280: PUSH
5281: EMPTY
5282: ST_TO_ADDR
// parts := [ 3 , 3 , 4 , 5 , 15 , 15 , 20 , 25 ] ;
5283: LD_ADDR_VAR 0 7
5287: PUSH
5288: LD_INT 3
5290: PUSH
5291: LD_INT 3
5293: PUSH
5294: LD_INT 4
5296: PUSH
5297: LD_INT 5
5299: PUSH
5300: LD_INT 15
5302: PUSH
5303: LD_INT 15
5305: PUSH
5306: LD_INT 20
5308: PUSH
5309: LD_INT 25
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: ST_TO_ADDR
// skill := [ 2 , 2 , 3 , 4 ] [ Difficulty ] ;
5322: LD_ADDR_VAR 0 9
5326: PUSH
5327: LD_INT 2
5329: PUSH
5330: LD_INT 2
5332: PUSH
5333: LD_INT 3
5335: PUSH
5336: LD_INT 4
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: LD_OWVAR 67
5349: ARRAY
5350: ST_TO_ADDR
// repeat points := parts [ rand ( 1 , Count ( parts ) ) ] ;
5351: LD_ADDR_VAR 0 8
5355: PUSH
5356: LD_VAR 0 7
5360: PUSH
5361: LD_INT 1
5363: PPUSH
5364: LD_VAR 0 7
5368: PPUSH
5369: CALL 30877 0 1
5373: PPUSH
5374: CALL_OW 12
5378: ARRAY
5379: ST_TO_ADDR
// if points > strength then
5380: LD_VAR 0 8
5384: PUSH
5385: LD_VAR 0 6
5389: GREATER
5390: IFFALSE 5394
// continue ;
5392: GO 5351
// strength := strength - points ;
5394: LD_ADDR_VAR 0 6
5398: PUSH
5399: LD_VAR 0 6
5403: PUSH
5404: LD_VAR 0 8
5408: MINUS
5409: ST_TO_ADDR
// uc_side := 4 ;
5410: LD_ADDR_OWVAR 20
5414: PUSH
5415: LD_INT 4
5417: ST_TO_ADDR
// uc_nation := nation_american ;
5418: LD_ADDR_OWVAR 21
5422: PUSH
5423: LD_INT 1
5425: ST_TO_ADDR
// case points of 3 :
5426: LD_VAR 0 8
5430: PUSH
5431: LD_INT 3
5433: DOUBLE
5434: EQUAL
5435: IFTRUE 5439
5437: GO 5474
5439: POP
// begin PrepareSoldier ( false , skill ) ;
5440: LD_INT 0
5442: PPUSH
5443: LD_VAR 0 9
5447: PPUSH
5448: CALL_OW 381
// tmp := Join ( tmp , CreateHuman ) ;
5452: LD_ADDR_VAR 0 4
5456: PUSH
5457: LD_VAR 0 4
5461: PPUSH
5462: CALL_OW 44
5466: PPUSH
5467: CALL 66853 0 2
5471: ST_TO_ADDR
// end ; 4 :
5472: GO 5989
5474: LD_INT 4
5476: DOUBLE
5477: EQUAL
5478: IFTRUE 5482
5480: GO 5517
5482: POP
// begin PrepareScientist ( false , skill ) ;
5483: LD_INT 0
5485: PPUSH
5486: LD_VAR 0 9
5490: PPUSH
5491: CALL_OW 384
// tmp := Join ( tmp , CreateHuman ) ;
5495: LD_ADDR_VAR 0 4
5499: PUSH
5500: LD_VAR 0 4
5504: PPUSH
5505: CALL_OW 44
5509: PPUSH
5510: CALL 66853 0 2
5514: ST_TO_ADDR
// end ; 5 :
5515: GO 5989
5517: LD_INT 5
5519: DOUBLE
5520: EQUAL
5521: IFTRUE 5525
5523: GO 5560
5525: POP
// begin PrepareEngineer ( false , skill ) ;
5526: LD_INT 0
5528: PPUSH
5529: LD_VAR 0 9
5533: PPUSH
5534: CALL_OW 382
// tmp := Join ( tmp , CreateHuman ) ;
5538: LD_ADDR_VAR 0 4
5542: PUSH
5543: LD_VAR 0 4
5547: PPUSH
5548: CALL_OW 44
5552: PPUSH
5553: CALL 66853 0 2
5557: ST_TO_ADDR
// end ; 15 :
5558: GO 5989
5560: LD_INT 15
5562: DOUBLE
5563: EQUAL
5564: IFTRUE 5568
5566: GO 5704
5568: POP
// begin PrepareVehicle ( [ us_light_wheeled , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 3 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_machine_gun , 100 ) ;
5569: LD_INT 1
5571: PUSH
5572: LD_INT 3
5574: PUSH
5575: LD_INT 2
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_INT 3
5588: PPUSH
5589: CALL_OW 12
5593: ARRAY
5594: PPUSH
5595: LD_INT 2
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 1
5607: PPUSH
5608: LD_INT 2
5610: PPUSH
5611: CALL_OW 12
5615: ARRAY
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: LD_INT 100
5625: PPUSH
5626: CALL 33673 0 5
// veh := CreateVehicle ;
5630: LD_ADDR_VAR 0 11
5634: PUSH
5635: CALL_OW 45
5639: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
5640: LD_ADDR_VAR 0 4
5644: PUSH
5645: LD_VAR 0 4
5649: PPUSH
5650: LD_VAR 0 11
5654: PPUSH
5655: CALL 66853 0 2
5659: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5660: LD_INT 0
5662: PPUSH
5663: LD_VAR 0 9
5667: PPUSH
5668: CALL_OW 383
// un := CreateHuman ;
5672: LD_ADDR_VAR 0 10
5676: PUSH
5677: CALL_OW 44
5681: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
5682: LD_ADDR_VAR 0 4
5686: PUSH
5687: LD_VAR 0 4
5691: PPUSH
5692: LD_VAR 0 10
5696: PPUSH
5697: CALL 66853 0 2
5701: ST_TO_ADDR
// end ; 20 :
5702: GO 5989
5704: LD_INT 20
5706: DOUBLE
5707: EQUAL
5708: IFTRUE 5712
5710: GO 5844
5712: POP
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_gatling_gun , 100 ) ;
5713: LD_INT 3
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_INT 2
5728: PPUSH
5729: CALL_OW 12
5733: ARRAY
5734: PPUSH
5735: LD_INT 2
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 1
5747: PPUSH
5748: LD_INT 2
5750: PPUSH
5751: CALL_OW 12
5755: ARRAY
5756: PPUSH
5757: LD_INT 1
5759: PPUSH
5760: LD_INT 4
5762: PPUSH
5763: LD_INT 100
5765: PPUSH
5766: CALL 33673 0 5
// veh := CreateVehicle ;
5770: LD_ADDR_VAR 0 11
5774: PUSH
5775: CALL_OW 45
5779: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
5780: LD_ADDR_VAR 0 4
5784: PUSH
5785: LD_VAR 0 4
5789: PPUSH
5790: LD_VAR 0 11
5794: PPUSH
5795: CALL 66853 0 2
5799: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5800: LD_INT 0
5802: PPUSH
5803: LD_VAR 0 9
5807: PPUSH
5808: CALL_OW 383
// un := CreateHuman ;
5812: LD_ADDR_VAR 0 10
5816: PUSH
5817: CALL_OW 44
5821: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
5822: LD_ADDR_VAR 0 4
5826: PUSH
5827: LD_VAR 0 4
5831: PPUSH
5832: LD_VAR 0 10
5836: PPUSH
5837: CALL 66853 0 2
5841: ST_TO_ADDR
// end ; 25 :
5842: GO 5989
5844: LD_INT 25
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5988
5852: POP
// begin PrepareVehicle ( [ us_light_wheeled , us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 3 ) ] , [ engine_solar , engine_combustion ] [ rand ( 1 , 2 ) ] , control_manual , us_light_gun , 80 ) ;
5853: LD_INT 1
5855: PUSH
5856: LD_INT 3
5858: PUSH
5859: LD_INT 2
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 1
5869: PPUSH
5870: LD_INT 3
5872: PPUSH
5873: CALL_OW 12
5877: ARRAY
5878: PPUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 1
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: LD_INT 1
5891: PPUSH
5892: LD_INT 2
5894: PPUSH
5895: CALL_OW 12
5899: ARRAY
5900: PPUSH
5901: LD_INT 1
5903: PPUSH
5904: LD_INT 3
5906: PPUSH
5907: LD_INT 80
5909: PPUSH
5910: CALL 33673 0 5
// veh := CreateVehicle ;
5914: LD_ADDR_VAR 0 11
5918: PUSH
5919: CALL_OW 45
5923: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
5924: LD_ADDR_VAR 0 4
5928: PUSH
5929: LD_VAR 0 4
5933: PPUSH
5934: LD_VAR 0 11
5938: PPUSH
5939: CALL 66853 0 2
5943: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
5944: LD_INT 0
5946: PPUSH
5947: LD_VAR 0 9
5951: PPUSH
5952: CALL_OW 383
// un := CreateHuman ;
5956: LD_ADDR_VAR 0 10
5960: PUSH
5961: CALL_OW 44
5965: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
5966: LD_ADDR_VAR 0 4
5970: PUSH
5971: LD_VAR 0 4
5975: PPUSH
5976: LD_VAR 0 10
5980: PPUSH
5981: CALL 66853 0 2
5985: ST_TO_ADDR
// end ; end ;
5986: GO 5989
5988: POP
// until strength < 3 ;
5989: LD_VAR 0 6
5993: PUSH
5994: LD_INT 3
5996: LESS
5997: IFFALSE 5351
// if not tmp then
5999: LD_VAR 0 4
6003: NOT
6004: IFFALSE 6008
// exit ;
6006: GO 8242
// americanReinforcementsTroops := americanReinforcementsTroops union tmp ;
6008: LD_ADDR_EXP 58
6012: PUSH
6013: LD_EXP 58
6017: PUSH
6018: LD_VAR 0 4
6022: UNION
6023: ST_TO_ADDR
// case path of 1 :
6024: LD_VAR 0 5
6028: PUSH
6029: LD_INT 1
6031: DOUBLE
6032: EQUAL
6033: IFTRUE 6037
6035: GO 6203
6037: POP
// begin for i in tmp do
6038: LD_ADDR_VAR 0 2
6042: PUSH
6043: LD_VAR 0 4
6047: PUSH
6048: FOR_IN
6049: IFFALSE 6199
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
6051: LD_ADDR_VAR 0 15
6055: PUSH
6056: LD_EXP 58
6060: PPUSH
6061: LD_INT 21
6063: PUSH
6064: LD_INT 2
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 50
6073: PUSH
6074: EMPTY
6075: LIST
6076: PUSH
6077: LD_INT 58
6079: PUSH
6080: EMPTY
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 72
6092: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
6093: LD_VAR 0 2
6097: PPUSH
6098: CALL_OW 257
6102: PUSH
6103: LD_INT 3
6105: EQUAL
6106: IFFALSE 6134
// begin if emptyVeh then
6108: LD_VAR 0 15
6112: IFFALSE 6134
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
6114: LD_VAR 0 2
6118: PPUSH
6119: LD_VAR 0 15
6123: PUSH
6124: LD_INT 1
6126: ARRAY
6127: PPUSH
6128: CALL_OW 52
// continue ;
6132: GO 6048
// end ; end ; SetDir ( i , 3 ) ;
6134: LD_VAR 0 2
6138: PPUSH
6139: LD_INT 3
6141: PPUSH
6142: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
6146: LD_INT 10
6148: PPUSH
6149: CALL_OW 67
// until PlaceUnitArea ( i , omicronNorthRefSpawnArea , false ) ;
6153: LD_VAR 0 2
6157: PPUSH
6158: LD_INT 31
6160: PPUSH
6161: LD_INT 0
6163: PPUSH
6164: CALL_OW 49
6168: IFFALSE 6146
// ComMoveXY ( i , 111 , 13 ) ;
6170: LD_VAR 0 2
6174: PPUSH
6175: LD_INT 111
6177: PPUSH
6178: LD_INT 13
6180: PPUSH
6181: CALL_OW 111
// SetTag ( i , 1 ) ;
6185: LD_VAR 0 2
6189: PPUSH
6190: LD_INT 1
6192: PPUSH
6193: CALL_OW 109
// end ;
6197: GO 6048
6199: POP
6200: POP
// end ; 2 :
6201: GO 6900
6203: LD_INT 2
6205: DOUBLE
6206: EQUAL
6207: IFTRUE 6211
6209: GO 6377
6211: POP
// begin for i in tmp do
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 4
6221: PUSH
6222: FOR_IN
6223: IFFALSE 6373
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
6225: LD_ADDR_VAR 0 15
6229: PUSH
6230: LD_EXP 58
6234: PPUSH
6235: LD_INT 21
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: LD_INT 50
6247: PUSH
6248: EMPTY
6249: LIST
6250: PUSH
6251: LD_INT 58
6253: PUSH
6254: EMPTY
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 72
6266: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
6267: LD_VAR 0 2
6271: PPUSH
6272: CALL_OW 257
6276: PUSH
6277: LD_INT 3
6279: EQUAL
6280: IFFALSE 6308
// begin if emptyVeh then
6282: LD_VAR 0 15
6286: IFFALSE 6308
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
6288: LD_VAR 0 2
6292: PPUSH
6293: LD_VAR 0 15
6297: PUSH
6298: LD_INT 1
6300: ARRAY
6301: PPUSH
6302: CALL_OW 52
// continue ;
6306: GO 6222
// end ; end ; SetDir ( i , 4 ) ;
6308: LD_VAR 0 2
6312: PPUSH
6313: LD_INT 4
6315: PPUSH
6316: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
6320: LD_INT 10
6322: PPUSH
6323: CALL_OW 67
// until PlaceUnitArea ( i , omicronEastRefSpawnArea , false ) ;
6327: LD_VAR 0 2
6331: PPUSH
6332: LD_INT 22
6334: PPUSH
6335: LD_INT 0
6337: PPUSH
6338: CALL_OW 49
6342: IFFALSE 6320
// ComMoveXY ( i , 136 , 20 ) ;
6344: LD_VAR 0 2
6348: PPUSH
6349: LD_INT 136
6351: PPUSH
6352: LD_INT 20
6354: PPUSH
6355: CALL_OW 111
// SetTag ( i , 1 ) ;
6359: LD_VAR 0 2
6363: PPUSH
6364: LD_INT 1
6366: PPUSH
6367: CALL_OW 109
// end ;
6371: GO 6222
6373: POP
6374: POP
// end ; 3 :
6375: GO 6900
6377: LD_INT 3
6379: DOUBLE
6380: EQUAL
6381: IFTRUE 6385
6383: GO 6551
6385: POP
// begin for i in tmp do
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_VAR 0 4
6395: PUSH
6396: FOR_IN
6397: IFFALSE 6547
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
6399: LD_ADDR_VAR 0 15
6403: PUSH
6404: LD_EXP 58
6408: PPUSH
6409: LD_INT 21
6411: PUSH
6412: LD_INT 2
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 50
6421: PUSH
6422: EMPTY
6423: LIST
6424: PUSH
6425: LD_INT 58
6427: PUSH
6428: EMPTY
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: PPUSH
6436: CALL_OW 72
6440: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
6441: LD_VAR 0 2
6445: PPUSH
6446: CALL_OW 257
6450: PUSH
6451: LD_INT 3
6453: EQUAL
6454: IFFALSE 6482
// begin if emptyVeh then
6456: LD_VAR 0 15
6460: IFFALSE 6482
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
6462: LD_VAR 0 2
6466: PPUSH
6467: LD_VAR 0 15
6471: PUSH
6472: LD_INT 1
6474: ARRAY
6475: PPUSH
6476: CALL_OW 52
// continue ;
6480: GO 6396
// end ; end ; SetDir ( i , 0 ) ;
6482: LD_VAR 0 2
6486: PPUSH
6487: LD_INT 0
6489: PPUSH
6490: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
6494: LD_INT 10
6496: PPUSH
6497: CALL_OW 67
// until PlaceUnitArea ( i , omicronWestRefSpawnArea , false ) ;
6501: LD_VAR 0 2
6505: PPUSH
6506: LD_INT 21
6508: PPUSH
6509: LD_INT 0
6511: PPUSH
6512: CALL_OW 49
6516: IFFALSE 6494
// ComMoveXY ( i , 95 , 143 ) ;
6518: LD_VAR 0 2
6522: PPUSH
6523: LD_INT 95
6525: PPUSH
6526: LD_INT 143
6528: PPUSH
6529: CALL_OW 111
// SetTag ( i , 1 ) ;
6533: LD_VAR 0 2
6537: PPUSH
6538: LD_INT 1
6540: PPUSH
6541: CALL_OW 109
// end ;
6545: GO 6396
6547: POP
6548: POP
// end ; 4 :
6549: GO 6900
6551: LD_INT 4
6553: DOUBLE
6554: EQUAL
6555: IFTRUE 6559
6557: GO 6725
6559: POP
// begin for i in tmp do
6560: LD_ADDR_VAR 0 2
6564: PUSH
6565: LD_VAR 0 4
6569: PUSH
6570: FOR_IN
6571: IFFALSE 6721
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
6573: LD_ADDR_VAR 0 15
6577: PUSH
6578: LD_EXP 58
6582: PPUSH
6583: LD_INT 21
6585: PUSH
6586: LD_INT 2
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 50
6595: PUSH
6596: EMPTY
6597: LIST
6598: PUSH
6599: LD_INT 58
6601: PUSH
6602: EMPTY
6603: LIST
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 72
6614: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
6615: LD_VAR 0 2
6619: PPUSH
6620: CALL_OW 257
6624: PUSH
6625: LD_INT 3
6627: EQUAL
6628: IFFALSE 6656
// begin if emptyVeh then
6630: LD_VAR 0 15
6634: IFFALSE 6656
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
6636: LD_VAR 0 2
6640: PPUSH
6641: LD_VAR 0 15
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: PPUSH
6650: CALL_OW 52
// continue ;
6654: GO 6570
// end ; end ; SetDir ( i , 0 ) ;
6656: LD_VAR 0 2
6660: PPUSH
6661: LD_INT 0
6663: PPUSH
6664: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
6668: LD_INT 10
6670: PPUSH
6671: CALL_OW 67
// until PlaceUnitArea ( i , omicronSouthRefSpawnArea , false ) ;
6675: LD_VAR 0 2
6679: PPUSH
6680: LD_INT 32
6682: PPUSH
6683: LD_INT 0
6685: PPUSH
6686: CALL_OW 49
6690: IFFALSE 6668
// ComMoveXY ( i , 120 , 153 ) ;
6692: LD_VAR 0 2
6696: PPUSH
6697: LD_INT 120
6699: PPUSH
6700: LD_INT 153
6702: PPUSH
6703: CALL_OW 111
// SetTag ( i , 1 ) ;
6707: LD_VAR 0 2
6711: PPUSH
6712: LD_INT 1
6714: PPUSH
6715: CALL_OW 109
// end ;
6719: GO 6570
6721: POP
6722: POP
// end ; 5 :
6723: GO 6900
6725: LD_INT 5
6727: DOUBLE
6728: EQUAL
6729: IFTRUE 6733
6731: GO 6899
6733: POP
// begin for i in tmp do
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_VAR 0 4
6743: PUSH
6744: FOR_IN
6745: IFFALSE 6895
// begin emptyVeh := UnitFilter ( americanReinforcementsTroops , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_empty ] ] ) ;
6747: LD_ADDR_VAR 0 15
6751: PUSH
6752: LD_EXP 58
6756: PPUSH
6757: LD_INT 21
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 50
6769: PUSH
6770: EMPTY
6771: LIST
6772: PUSH
6773: LD_INT 58
6775: PUSH
6776: EMPTY
6777: LIST
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: LIST
6783: PPUSH
6784: CALL_OW 72
6788: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
6789: LD_VAR 0 2
6793: PPUSH
6794: CALL_OW 257
6798: PUSH
6799: LD_INT 3
6801: EQUAL
6802: IFFALSE 6830
// begin if emptyVeh then
6804: LD_VAR 0 15
6808: IFFALSE 6830
// begin PlaceHumanInUnit ( i , emptyVeh [ 1 ] ) ;
6810: LD_VAR 0 2
6814: PPUSH
6815: LD_VAR 0 15
6819: PUSH
6820: LD_INT 1
6822: ARRAY
6823: PPUSH
6824: CALL_OW 52
// continue ;
6828: GO 6744
// end ; end ; SetDir ( i , 0 ) ;
6830: LD_VAR 0 2
6834: PPUSH
6835: LD_INT 0
6837: PPUSH
6838: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
6842: LD_INT 10
6844: PPUSH
6845: CALL_OW 67
// until PlaceUnitArea ( i , omicronWest2RefSpawnArea , false ) ;
6849: LD_VAR 0 2
6853: PPUSH
6854: LD_INT 33
6856: PPUSH
6857: LD_INT 0
6859: PPUSH
6860: CALL_OW 49
6864: IFFALSE 6842
// ComMoveXY ( i , 63 , 120 ) ;
6866: LD_VAR 0 2
6870: PPUSH
6871: LD_INT 63
6873: PPUSH
6874: LD_INT 120
6876: PPUSH
6877: CALL_OW 111
// SetTag ( i , 1 ) ;
6881: LD_VAR 0 2
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: CALL_OW 109
// end ;
6893: GO 6744
6895: POP
6896: POP
// end ; end ;
6897: GO 6900
6899: POP
// repeat wait ( 0 0$1 ) ;
6900: LD_INT 35
6902: PPUSH
6903: CALL_OW 67
// for i in tmp do
6907: LD_ADDR_VAR 0 2
6911: PUSH
6912: LD_VAR 0 4
6916: PUSH
6917: FOR_IN
6918: IFFALSE 8233
// begin tag := GetTag ( i ) ;
6920: LD_ADDR_VAR 0 13
6924: PUSH
6925: LD_VAR 0 2
6929: PPUSH
6930: CALL_OW 110
6934: ST_TO_ADDR
// if IsInArea ( i , omicronBaseArea ) then
6935: LD_VAR 0 2
6939: PPUSH
6940: LD_INT 18
6942: PPUSH
6943: CALL_OW 308
6947: IFFALSE 7339
// begin americanReinforcementsTroops := americanReinforcementsTroops diff i ;
6949: LD_ADDR_EXP 58
6953: PUSH
6954: LD_EXP 58
6958: PUSH
6959: LD_VAR 0 2
6963: DIFF
6964: ST_TO_ADDR
// tmp := tmp diff i ;
6965: LD_ADDR_VAR 0 4
6969: PUSH
6970: LD_VAR 0 4
6974: PUSH
6975: LD_VAR 0 2
6979: DIFF
6980: ST_TO_ADDR
// SetSide ( i , 1 ) ;
6981: LD_VAR 0 2
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: CALL_OW 235
// if GetType ( i ) = unit_human then
6993: LD_VAR 0 2
6997: PPUSH
6998: CALL_OW 247
7002: PUSH
7003: LD_INT 1
7005: EQUAL
7006: IFFALSE 7212
// begin SetLives ( i , 1000 ) ;
7008: LD_VAR 0 2
7012: PPUSH
7013: LD_INT 1000
7015: PPUSH
7016: CALL_OW 234
// if GetClass ( i ) = class_engineer then
7020: LD_VAR 0 2
7024: PPUSH
7025: CALL_OW 257
7029: PUSH
7030: LD_INT 2
7032: EQUAL
7033: IFFALSE 7072
// if UnitFilter ( omicronTroops , [ f_class , class_engineer ] ) > 4 then
7035: LD_EXP 57
7039: PPUSH
7040: LD_INT 25
7042: PUSH
7043: LD_INT 2
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PPUSH
7050: CALL_OW 72
7054: PUSH
7055: LD_INT 4
7057: GREATER
7058: IFFALSE 7072
// SetClass ( i , class_soldier ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: LD_INT 1
7067: PPUSH
7068: CALL_OW 336
// if GetClass ( i ) = class_scientistic then
7072: LD_VAR 0 2
7076: PPUSH
7077: CALL_OW 257
7081: PUSH
7082: LD_INT 4
7084: EQUAL
7085: IFFALSE 7124
// if UnitFilter ( omicronTroops , [ f_class , class_scientistic ] ) > 3 then
7087: LD_EXP 57
7091: PPUSH
7092: LD_INT 25
7094: PUSH
7095: LD_INT 4
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PPUSH
7102: CALL_OW 72
7106: PUSH
7107: LD_INT 3
7109: GREATER
7110: IFFALSE 7124
// SetClass ( i , class_soldier ) ;
7112: LD_VAR 0 2
7116: PPUSH
7117: LD_INT 1
7119: PPUSH
7120: CALL_OW 336
// if GetClass ( i ) = class_mechanic then
7124: LD_VAR 0 2
7128: PPUSH
7129: CALL_OW 257
7133: PUSH
7134: LD_INT 3
7136: EQUAL
7137: IFFALSE 7178
// begin if IsInUnit ( i ) then
7139: LD_VAR 0 2
7143: PPUSH
7144: CALL_OW 310
7148: IFFALSE 7164
// SetTag ( i , tMech ) else
7150: LD_VAR 0 2
7154: PPUSH
7155: LD_INT 7
7157: PPUSH
7158: CALL_OW 109
7162: GO 7176
// SetTag ( i , 0 ) end else
7164: LD_VAR 0 2
7168: PPUSH
7169: LD_INT 0
7171: PPUSH
7172: CALL_OW 109
7176: GO 7190
// SetTag ( i , 0 ) ;
7178: LD_VAR 0 2
7182: PPUSH
7183: LD_INT 0
7185: PPUSH
7186: CALL_OW 109
// omicronTroops := Join ( omicronTroops , i ) ;
7190: LD_ADDR_EXP 57
7194: PUSH
7195: LD_EXP 57
7199: PPUSH
7200: LD_VAR 0 2
7204: PPUSH
7205: CALL 66853 0 2
7209: ST_TO_ADDR
// end else
7210: GO 7317
// if omicronVehicles < 3 then
7212: LD_EXP 59
7216: PUSH
7217: LD_INT 3
7219: LESS
7220: IFFALSE 7285
// begin omicronVehicles := Join ( omicronVehicles , i ) ;
7222: LD_ADDR_EXP 59
7226: PUSH
7227: LD_EXP 59
7231: PPUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: CALL 66853 0 2
7241: ST_TO_ADDR
// if GetLives ( i ) < 1000 then
7242: LD_VAR 0 2
7246: PPUSH
7247: CALL_OW 256
7251: PUSH
7252: LD_INT 1000
7254: LESS
7255: IFFALSE 7271
// SetTag ( i , tVehRepair ) else
7257: LD_VAR 0 2
7261: PPUSH
7262: LD_INT 9
7264: PPUSH
7265: CALL_OW 109
7269: GO 7283
// SetTag ( i , 0 ) ;
7271: LD_VAR 0 2
7275: PPUSH
7276: LD_INT 0
7278: PPUSH
7279: CALL_OW 109
// end else
7283: GO 7317
// begin omicronAttackVehicles := Join ( omicronAttackVehicles , i ) ;
7285: LD_ADDR_EXP 60
7289: PUSH
7290: LD_EXP 60
7294: PPUSH
7295: LD_VAR 0 2
7299: PPUSH
7300: CALL 66853 0 2
7304: ST_TO_ADDR
// SetTag ( i , 0 ) ;
7305: LD_VAR 0 2
7309: PPUSH
7310: LD_INT 0
7312: PPUSH
7313: CALL_OW 109
// end ; joinToOmicronCounter := Join ( joinToOmicronCounter , i ) ;
7317: LD_ADDR_EXP 28
7321: PUSH
7322: LD_EXP 28
7326: PPUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: CALL 66853 0 2
7336: ST_TO_ADDR
// continue ;
7337: GO 6917
// end ; if IsDead ( i ) then
7339: LD_VAR 0 2
7343: PPUSH
7344: CALL_OW 301
7348: IFFALSE 7368
// begin tmp := tmp diff i ;
7350: LD_ADDR_VAR 0 4
7354: PUSH
7355: LD_VAR 0 4
7359: PUSH
7360: LD_VAR 0 2
7364: DIFF
7365: ST_TO_ADDR
// continue ;
7366: GO 6917
// end ; if GetDistUnitXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) < 6 then
7368: LD_VAR 0 2
7372: PPUSH
7373: LD_VAR 0 12
7377: PUSH
7378: LD_VAR 0 13
7382: ARRAY
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: LD_VAR 0 12
7392: PUSH
7393: LD_VAR 0 13
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: PPUSH
7403: CALL_OW 297
7407: PUSH
7408: LD_INT 6
7410: LESS
7411: IFFALSE 7431
// SetTag ( i , tag + 1 ) ;
7413: LD_VAR 0 2
7417: PPUSH
7418: LD_VAR 0 13
7422: PUSH
7423: LD_INT 1
7425: PLUS
7426: PPUSH
7427: CALL_OW 109
// if GetClass ( i ) = class_soldier then
7431: LD_VAR 0 2
7435: PPUSH
7436: CALL_OW 257
7440: PUSH
7441: LD_INT 1
7443: EQUAL
7444: IFFALSE 7543
// begin if GetLives ( i ) < 500 then
7446: LD_VAR 0 2
7450: PPUSH
7451: CALL_OW 256
7455: PUSH
7456: LD_INT 500
7458: LESS
7459: IFFALSE 7502
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
7461: LD_VAR 0 2
7465: PPUSH
7466: LD_VAR 0 12
7470: PUSH
7471: LD_VAR 0 13
7475: ARRAY
7476: PUSH
7477: LD_INT 1
7479: ARRAY
7480: PPUSH
7481: LD_VAR 0 12
7485: PUSH
7486: LD_VAR 0 13
7490: ARRAY
7491: PUSH
7492: LD_INT 2
7494: ARRAY
7495: PPUSH
7496: CALL_OW 111
// continue ;
7500: GO 6917
// end ; ComAgressiveMove ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
7502: LD_VAR 0 2
7506: PPUSH
7507: LD_VAR 0 12
7511: PUSH
7512: LD_VAR 0 13
7516: ARRAY
7517: PUSH
7518: LD_INT 1
7520: ARRAY
7521: PPUSH
7522: LD_VAR 0 12
7526: PUSH
7527: LD_VAR 0 13
7531: ARRAY
7532: PUSH
7533: LD_INT 2
7535: ARRAY
7536: PPUSH
7537: CALL_OW 114
// continue ;
7541: GO 6917
// end ; if GetClass ( i ) = class_scientistic then
7543: LD_VAR 0 2
7547: PPUSH
7548: CALL_OW 257
7552: PUSH
7553: LD_INT 4
7555: EQUAL
7556: IFFALSE 7756
// begin if GetLives ( i ) < 500 then
7558: LD_VAR 0 2
7562: PPUSH
7563: CALL_OW 256
7567: PUSH
7568: LD_INT 500
7570: LESS
7571: IFFALSE 7614
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
7573: LD_VAR 0 2
7577: PPUSH
7578: LD_VAR 0 12
7582: PUSH
7583: LD_VAR 0 13
7587: ARRAY
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PPUSH
7593: LD_VAR 0 12
7597: PUSH
7598: LD_VAR 0 13
7602: ARRAY
7603: PUSH
7604: LD_INT 2
7606: ARRAY
7607: PPUSH
7608: CALL_OW 111
// continue ;
7612: GO 6917
// end ; hurt := UnitFilter ( tmp , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] , [ f_dist , i , 8 ] , [ f_not , [ f_driving ] ] ] ) ;
7614: LD_ADDR_VAR 0 14
7618: PUSH
7619: LD_VAR 0 4
7623: PPUSH
7624: LD_INT 21
7626: PUSH
7627: LD_INT 1
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_INT 3
7636: PUSH
7637: LD_INT 24
7639: PUSH
7640: LD_INT 1000
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 91
7653: PUSH
7654: LD_VAR 0 2
7658: PUSH
7659: LD_INT 8
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: LD_INT 55
7672: PUSH
7673: EMPTY
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PPUSH
7686: CALL_OW 72
7690: ST_TO_ADDR
// if hurt then
7691: LD_VAR 0 14
7695: IFFALSE 7717
// begin ComHeal ( i , hurt [ 1 ] ) ;
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_VAR 0 14
7706: PUSH
7707: LD_INT 1
7709: ARRAY
7710: PPUSH
7711: CALL_OW 128
// continue ;
7715: GO 6917
// end ; ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
7717: LD_VAR 0 2
7721: PPUSH
7722: LD_VAR 0 12
7726: PUSH
7727: LD_VAR 0 13
7731: ARRAY
7732: PUSH
7733: LD_INT 1
7735: ARRAY
7736: PPUSH
7737: LD_VAR 0 12
7741: PUSH
7742: LD_VAR 0 13
7746: ARRAY
7747: PUSH
7748: LD_INT 2
7750: ARRAY
7751: PPUSH
7752: CALL_OW 111
// end ; if GetClass ( i ) = class_engineer then
7756: LD_VAR 0 2
7760: PPUSH
7761: CALL_OW 257
7765: PUSH
7766: LD_INT 2
7768: EQUAL
7769: IFFALSE 7812
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_VAR 0 12
7780: PUSH
7781: LD_VAR 0 13
7785: ARRAY
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_VAR 0 12
7795: PUSH
7796: LD_VAR 0 13
7800: ARRAY
7801: PUSH
7802: LD_INT 2
7804: ARRAY
7805: PPUSH
7806: CALL_OW 111
// continue ;
7810: GO 6917
// end ; if GetClass ( i ) = class_mechanic then
7812: LD_VAR 0 2
7816: PPUSH
7817: CALL_OW 257
7821: PUSH
7822: LD_INT 3
7824: EQUAL
7825: IFFALSE 7857
// begin if IsInUnit ( i ) then
7827: LD_VAR 0 2
7831: PPUSH
7832: CALL_OW 310
7836: IFFALSE 7840
// continue ;
7838: GO 6917
// ComMoveXY ( i , 30 , 38 ) ;
7840: LD_VAR 0 2
7844: PPUSH
7845: LD_INT 30
7847: PPUSH
7848: LD_INT 38
7850: PPUSH
7851: CALL_OW 111
// continue ;
7855: GO 6917
// end ; if GetType ( i ) = unit_vehicle then
7857: LD_VAR 0 2
7861: PPUSH
7862: CALL_OW 247
7866: PUSH
7867: LD_INT 2
7869: EQUAL
7870: IFFALSE 8231
// begin if GetLives ( i ) < 500 then
7872: LD_VAR 0 2
7876: PPUSH
7877: CALL_OW 256
7881: PUSH
7882: LD_INT 500
7884: LESS
7885: IFFALSE 7928
// begin ComMoveXY ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
7887: LD_VAR 0 2
7891: PPUSH
7892: LD_VAR 0 12
7896: PUSH
7897: LD_VAR 0 13
7901: ARRAY
7902: PUSH
7903: LD_INT 1
7905: ARRAY
7906: PPUSH
7907: LD_VAR 0 12
7911: PUSH
7912: LD_VAR 0 13
7916: ARRAY
7917: PUSH
7918: LD_INT 2
7920: ARRAY
7921: PPUSH
7922: CALL_OW 111
// continue ;
7926: GO 6917
// end ; cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 9 ) ;
7928: LD_ADDR_VAR 0 17
7932: PUSH
7933: LD_VAR 0 2
7937: PPUSH
7938: CALL_OW 250
7942: PPUSH
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL_OW 251
7952: PPUSH
7953: LD_INT 9
7955: PPUSH
7956: CALL 69361 0 3
7960: ST_TO_ADDR
// if cr then
7961: LD_VAR 0 17
7965: IFFALSE 8048
// for j := cr downto 1 do
7967: LD_ADDR_VAR 0 3
7971: PUSH
7972: DOUBLE
7973: LD_VAR 0 17
7977: INC
7978: ST_TO_ADDR
7979: LD_INT 1
7981: PUSH
7982: FOR_DOWNTO
7983: IFFALSE 8046
// if InArea ( cr [ j ] [ 1 ] , cr [ j ] [ 2 ] , ignoreCratesArea ) then
7985: LD_VAR 0 17
7989: PUSH
7990: LD_VAR 0 3
7994: ARRAY
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PPUSH
8000: LD_VAR 0 17
8004: PUSH
8005: LD_VAR 0 3
8009: ARRAY
8010: PUSH
8011: LD_INT 2
8013: ARRAY
8014: PPUSH
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 309
8022: IFFALSE 8044
// cr := Delete ( cr , j ) ;
8024: LD_ADDR_VAR 0 17
8028: PUSH
8029: LD_VAR 0 17
8033: PPUSH
8034: LD_VAR 0 3
8038: PPUSH
8039: CALL_OW 3
8043: ST_TO_ADDR
8044: GO 7982
8046: POP
8047: POP
// nearbyUnits := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 9 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) ;
8048: LD_ADDR_VAR 0 18
8052: PUSH
8053: LD_INT 22
8055: PUSH
8056: LD_INT 3
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 91
8065: PUSH
8066: LD_VAR 0 2
8070: PUSH
8071: LD_INT 9
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 2
8081: PUSH
8082: LD_INT 21
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 21
8094: PUSH
8095: LD_INT 3
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: PPUSH
8112: CALL_OW 69
8116: ST_TO_ADDR
// if cr then
8117: LD_VAR 0 17
8121: IFFALSE 8160
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
8123: LD_VAR 0 2
8127: PPUSH
8128: LD_VAR 0 17
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: PUSH
8137: LD_INT 1
8139: ARRAY
8140: PPUSH
8141: LD_VAR 0 17
8145: PUSH
8146: LD_INT 1
8148: ARRAY
8149: PUSH
8150: LD_INT 2
8152: ARRAY
8153: PPUSH
8154: CALL_OW 116
8158: GO 8231
// if nearbyUnits then
8160: LD_VAR 0 18
8164: IFFALSE 8192
// ComAttackUnit ( i , NearestUnitToUnit ( nearbyUnits , i ) ) else
8166: LD_VAR 0 2
8170: PPUSH
8171: LD_VAR 0 18
8175: PPUSH
8176: LD_VAR 0 2
8180: PPUSH
8181: CALL_OW 74
8185: PPUSH
8186: CALL_OW 115
8190: GO 8231
// ComAgressiveMove ( i , coords [ tag ] [ 1 ] , coords [ tag ] [ 2 ] ) ;
8192: LD_VAR 0 2
8196: PPUSH
8197: LD_VAR 0 12
8201: PUSH
8202: LD_VAR 0 13
8206: ARRAY
8207: PUSH
8208: LD_INT 1
8210: ARRAY
8211: PPUSH
8212: LD_VAR 0 12
8216: PUSH
8217: LD_VAR 0 13
8221: ARRAY
8222: PUSH
8223: LD_INT 2
8225: ARRAY
8226: PPUSH
8227: CALL_OW 114
// end ; end ;
8231: GO 6917
8233: POP
8234: POP
// until not tmp ;
8235: LD_VAR 0 4
8239: NOT
8240: IFFALSE 6900
// end ;
8242: LD_VAR 0 1
8246: RET
// every 0 0$10 trigger not americanRetreat and IsOk ( usFac ) and not omicronConstructList and UnitsInside ( usFac ) and BuildingStatus ( usFac ) = bs_idle and GetSide ( usFac ) = 1 do var chassis , weapon ;
8247: LD_EXP 26
8251: NOT
8252: IFFALSE 8263
8254: PUSH
8255: LD_INT 291
8257: PPUSH
8258: CALL_OW 302
8262: AND
8263: IFFALSE 8272
8265: PUSH
8266: LD_EXP 62
8270: NOT
8271: AND
8272: IFFALSE 8283
8274: PUSH
8275: LD_INT 291
8277: PPUSH
8278: CALL_OW 313
8282: AND
8283: IFFALSE 8298
8285: PUSH
8286: LD_INT 291
8288: PPUSH
8289: CALL_OW 461
8293: PUSH
8294: LD_INT 2
8296: EQUAL
8297: AND
8298: IFFALSE 8313
8300: PUSH
8301: LD_INT 291
8303: PPUSH
8304: CALL_OW 255
8308: PUSH
8309: LD_INT 1
8311: EQUAL
8312: AND
8313: IFFALSE 8458
8315: GO 8317
8317: DISABLE
8318: LD_INT 0
8320: PPUSH
8321: PPUSH
// begin chassis := [ us_medium_tracked , us_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
8322: LD_ADDR_VAR 0 1
8326: PUSH
8327: LD_INT 3
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 1
8339: PPUSH
8340: LD_INT 2
8342: PPUSH
8343: CALL_OW 12
8347: ARRAY
8348: ST_TO_ADDR
// if Difficulty > 2 then
8349: LD_OWVAR 67
8353: PUSH
8354: LD_INT 2
8356: GREATER
8357: IFFALSE 8396
// weapon := [ us_light_gun , us_gatling_gun , us_machine_gun , us_double_gun ] [ rand ( 1 , 4 ) ] else
8359: LD_ADDR_VAR 0 2
8363: PUSH
8364: LD_INT 3
8366: PUSH
8367: LD_INT 4
8369: PUSH
8370: LD_INT 2
8372: PUSH
8373: LD_INT 5
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 1
8384: PPUSH
8385: LD_INT 4
8387: PPUSH
8388: CALL_OW 12
8392: ARRAY
8393: ST_TO_ADDR
8394: GO 8427
// weapon := [ us_light_gun , us_gatling_gun , us_machine_gun ] [ rand ( 1 , 3 ) ] ;
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_INT 3
8403: PUSH
8404: LD_INT 4
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 1
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: CALL_OW 12
8425: ARRAY
8426: ST_TO_ADDR
// omicronConstructList := [ [ chassis , engine_combustion , control_manual , weapon ] ] ;
8427: LD_ADDR_EXP 62
8431: PUSH
8432: LD_VAR 0 1
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: LD_INT 1
8442: PUSH
8443: LD_VAR 0 2
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: EMPTY
8455: LIST
8456: ST_TO_ADDR
// enable ;
8457: ENABLE
// end ;
8458: PPOPN 2
8460: END
// every 0 0$2 trigger americanRetreat do var i , tmp ;
8461: LD_EXP 26
8465: IFFALSE 8692
8467: GO 8469
8469: DISABLE
8470: LD_INT 0
8472: PPUSH
8473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8474: LD_ADDR_VAR 0 2
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: LD_INT 22
8484: PUSH
8485: LD_INT 1
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_INT 22
8494: PUSH
8495: LD_INT 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 21
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 50
8519: PUSH
8520: EMPTY
8521: LIST
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: LIST
8527: PPUSH
8528: CALL_OW 69
8532: ST_TO_ADDR
// if not tmp then
8533: LD_VAR 0 2
8537: NOT
8538: IFFALSE 8542
// exit ;
8540: GO 8692
// repeat for i in tmp do
8542: LD_ADDR_VAR 0 1
8546: PUSH
8547: LD_VAR 0 2
8551: PUSH
8552: FOR_IN
8553: IFFALSE 8617
// begin if IsInUnit ( i ) then
8555: LD_VAR 0 1
8559: PPUSH
8560: CALL_OW 310
8564: IFFALSE 8577
// ComExit ( i ) else
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL 67251 0 1
8575: GO 8615
// if not IsInArea ( i , americanRetreatArea ) then
8577: LD_VAR 0 1
8581: PPUSH
8582: LD_INT 26
8584: PPUSH
8585: CALL_OW 308
8589: NOT
8590: IFFALSE 8606
// ComMoveToArea ( i , americanRetreatArea ) else
8592: LD_VAR 0 1
8596: PPUSH
8597: LD_INT 26
8599: PPUSH
8600: CALL_OW 113
8604: GO 8615
// RemoveUnit ( i ) ;
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 64
// end ;
8615: GO 8552
8617: POP
8618: POP
// tmp := FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8619: LD_ADDR_VAR 0 2
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: LD_INT 22
8629: PUSH
8630: LD_INT 1
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 22
8639: PUSH
8640: LD_INT 4
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 1
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 50
8664: PUSH
8665: EMPTY
8666: LIST
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: PPUSH
8673: CALL_OW 69
8677: ST_TO_ADDR
// wait ( 0 0$1 ) ;
8678: LD_INT 35
8680: PPUSH
8681: CALL_OW 67
// until not tmp ;
8685: LD_VAR 0 2
8689: NOT
8690: IFFALSE 8542
// end ;
8692: PPOPN 2
8694: END
// every 0 0$1 trigger omicronAttackVehicles do var i , mech , enemy ;
8695: LD_EXP 60
8699: IFFALSE 9262
8701: GO 8703
8703: DISABLE
8704: LD_INT 0
8706: PPUSH
8707: PPUSH
8708: PPUSH
// begin enable ;
8709: ENABLE
// if not omicronAttackVehicles then
8710: LD_EXP 60
8714: NOT
8715: IFFALSE 8719
// exit ;
8717: GO 9262
// for i in omicronAttackVehicles do
8719: LD_ADDR_VAR 0 1
8723: PUSH
8724: LD_EXP 60
8728: PUSH
8729: FOR_IN
8730: IFFALSE 9260
// begin if not IsOk ( i ) or GetSide ( i ) <> 1 then
8732: LD_VAR 0 1
8736: PPUSH
8737: CALL_OW 302
8741: NOT
8742: IFTRUE 8759
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 255
8754: PUSH
8755: LD_INT 1
8757: NONEQUAL
8758: OR
8759: IFFALSE 8779
// begin omicronAttackVehicles := omicronAttackVehicles diff i ;
8761: LD_ADDR_EXP 60
8765: PUSH
8766: LD_EXP 60
8770: PUSH
8771: LD_VAR 0 1
8775: DIFF
8776: ST_TO_ADDR
// continue ;
8777: GO 8729
// end ; if GetTag ( i ) = 300 then
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 110
8788: PUSH
8789: LD_INT 300
8791: EQUAL
8792: IFFALSE 8907
// begin if GetFuel ( i ) < 50 then
8794: LD_VAR 0 1
8798: PPUSH
8799: CALL_OW 261
8803: PUSH
8804: LD_INT 50
8806: LESS
8807: IFFALSE 8866
// begin ComMoveXY ( i , 24 , 36 ) ;
8809: LD_VAR 0 1
8813: PPUSH
8814: LD_INT 24
8816: PPUSH
8817: LD_INT 36
8819: PPUSH
8820: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
8831: LD_VAR 0 1
8835: PPUSH
8836: LD_INT 24
8838: PPUSH
8839: LD_INT 36
8841: PPUSH
8842: CALL_OW 297
8846: PUSH
8847: LD_INT 4
8849: LESS
8850: IFFALSE 8824
// SetFuel ( i , 100 ) ;
8852: LD_VAR 0 1
8856: PPUSH
8857: LD_INT 100
8859: PPUSH
8860: CALL_OW 240
// end else
8864: GO 8907
// if not IsInArea ( i , omicronParkingArea ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: LD_INT 28
8873: PPUSH
8874: CALL_OW 308
8878: NOT
8879: IFFALSE 8895
// ComMoveToArea ( i , omicronParkingArea ) else
8881: LD_VAR 0 1
8885: PPUSH
8886: LD_INT 28
8888: PPUSH
8889: CALL_OW 113
8893: GO 8907
// SetTag ( i , 301 ) ;
8895: LD_VAR 0 1
8899: PPUSH
8900: LD_INT 301
8902: PPUSH
8903: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
8907: LD_VAR 0 1
8911: PPUSH
8912: CALL_OW 110
8916: PUSH
8917: LD_INT 301
8919: EQUAL
8920: IFFALSE 9062
// begin if GetLives ( i ) < 1000 then
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL_OW 256
8931: PUSH
8932: LD_INT 1000
8934: LESS
8935: IFFALSE 9039
// begin if not IsDrivenBy ( i ) then
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 311
8946: NOT
8947: IFFALSE 8951
// continue ;
8949: GO 8729
// mech := IsDrivenBy ( i ) ;
8951: LD_ADDR_VAR 0 2
8955: PUSH
8956: LD_VAR 0 1
8960: PPUSH
8961: CALL_OW 311
8965: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
8975: LD_VAR 0 2
8979: PPUSH
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8989: LD_INT 35
8991: PPUSH
8992: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8996: LD_VAR 0 1
9000: PPUSH
9001: CALL_OW 256
9005: PUSH
9006: LD_INT 1000
9008: EQUAL
9009: IFFALSE 8989
// SetLives ( mech , 1000 ) ;
9011: LD_VAR 0 2
9015: PPUSH
9016: LD_INT 1000
9018: PPUSH
9019: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
9023: LD_VAR 0 2
9027: PPUSH
9028: LD_VAR 0 1
9032: PPUSH
9033: CALL_OW 120
// end else
9037: GO 9062
// if IsDrivenBy ( i ) then
9039: LD_VAR 0 1
9043: PPUSH
9044: CALL_OW 311
9048: IFFALSE 9062
// SetTag ( i , 0 ) ;
9050: LD_VAR 0 1
9054: PPUSH
9055: LD_INT 0
9057: PPUSH
9058: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL_OW 110
9071: PUSH
9072: LD_INT 300
9074: LESS
9075: IFFALSE 9258
// begin enemy := FilterUnitsInArea ( omicronBaseArea , [ f_enemy , 1 ] ) ;
9077: LD_ADDR_VAR 0 3
9081: PUSH
9082: LD_INT 18
9084: PPUSH
9085: LD_INT 81
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 70
9099: ST_TO_ADDR
// if GetLives ( i ) < 650 then
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 256
9109: PUSH
9110: LD_INT 650
9112: LESS
9113: IFFALSE 9138
// begin ComStop ( i ) ;
9115: LD_VAR 0 1
9119: PPUSH
9120: CALL_OW 141
// SetTag ( i , 300 ) ;
9124: LD_VAR 0 1
9128: PPUSH
9129: LD_INT 300
9131: PPUSH
9132: CALL_OW 109
// continue ;
9136: GO 8729
// end ; if enemy then
9138: LD_VAR 0 3
9142: IFFALSE 9182
// begin if not HasTask ( i ) then
9144: LD_VAR 0 1
9148: PPUSH
9149: CALL_OW 314
9153: NOT
9154: IFFALSE 9180
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9156: LD_VAR 0 1
9160: PPUSH
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_VAR 0 1
9170: PPUSH
9171: CALL_OW 74
9175: PPUSH
9176: CALL_OW 115
// end else
9180: GO 9258
// if omicronAttackVehicles then
9182: LD_EXP 60
9186: IFFALSE 9258
// begin enemy := FilterAllUnits ( [ f_enemy , 1 ] ) ;
9188: LD_ADDR_VAR 0 3
9192: PUSH
9193: LD_INT 81
9195: PUSH
9196: LD_INT 1
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: ST_TO_ADDR
// if enemy then
9208: LD_VAR 0 3
9212: IFFALSE 9258
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_INT 49
9221: PUSH
9222: LD_INT 43
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: PUSH
9229: LD_INT 63
9231: PUSH
9232: LD_INT 56
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: LD_INT 72
9241: PUSH
9242: LD_INT 67
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: LIST
9253: PPUSH
9254: CALL 69619 0 2
// end ; end ; end ;
9258: GO 8729
9260: POP
9261: POP
// end ;
9262: PPOPN 3
9264: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do var i ;
9265: LD_INT 22
9267: PUSH
9268: LD_INT 1
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 32
9277: PUSH
9278: LD_INT 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: IFFALSE 9370
9295: GO 9297
9297: DISABLE
9298: LD_INT 0
9300: PPUSH
// begin enable ;
9301: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_engine , engine_combustion ] ] ) do
9302: LD_ADDR_VAR 0 1
9306: PUSH
9307: LD_INT 22
9309: PUSH
9310: LD_INT 1
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 32
9319: PUSH
9320: LD_INT 1
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: EMPTY
9328: LIST
9329: LIST
9330: PPUSH
9331: CALL_OW 69
9335: PUSH
9336: FOR_IN
9337: IFFALSE 9368
// if GetFuel ( i ) < 3 then
9339: LD_VAR 0 1
9343: PPUSH
9344: CALL_OW 261
9348: PUSH
9349: LD_INT 3
9351: LESS
9352: IFFALSE 9366
// SetFuel ( i , 3 ) ;
9354: LD_VAR 0 1
9358: PPUSH
9359: LD_INT 3
9361: PPUSH
9362: CALL_OW 240
9366: GO 9336
9368: POP
9369: POP
// end ;
9370: PPOPN 1
9372: END
// every 0 0$2 trigger joinToOmicronCounter > 2 do
9373: LD_EXP 28
9377: PUSH
9378: LD_INT 2
9380: GREATER
9381: IFFALSE 9418
9383: GO 9385
9385: DISABLE
// omicronBuildingsToBuild := omicronBuildingsToBuild ^ [ [ b_breastwork , 23 , 5 , 4 ] ] ;
9386: LD_ADDR_EXP 63
9390: PUSH
9391: LD_EXP 63
9395: PUSH
9396: LD_INT 31
9398: PUSH
9399: LD_INT 23
9401: PUSH
9402: LD_INT 5
9404: PUSH
9405: LD_INT 4
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: ADD
9417: ST_TO_ADDR
9418: END
// every 0 0$2 trigger joinToOmicronCounter > 6 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_soldier ] ] ) > 12 do
9419: LD_EXP 28
9423: PUSH
9424: LD_INT 6
9426: GREATER
9427: IFFALSE 9463
9429: PUSH
9430: LD_INT 22
9432: PUSH
9433: LD_INT 1
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: LD_INT 25
9442: PUSH
9443: LD_INT 1
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 69
9458: PUSH
9459: LD_INT 12
9461: GREATER
9462: AND
9463: IFFALSE 9500
9465: GO 9467
9467: DISABLE
// omicronBuildingsToBuild := omicronBuildingsToBuild ^ [ [ b_armoury , 22 , 14 , 3 ] ] ; end_of_file
9468: LD_ADDR_EXP 63
9472: PUSH
9473: LD_EXP 63
9477: PUSH
9478: LD_INT 4
9480: PUSH
9481: LD_INT 22
9483: PUSH
9484: LD_INT 14
9486: PUSH
9487: LD_INT 3
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: ADD
9499: ST_TO_ADDR
9500: END
// export arForces ; export function SpawnArabAttack ; var i , un , veh ; begin
9501: LD_INT 0
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
// for i := 1 to 8 do
9507: LD_ADDR_VAR 0 2
9511: PUSH
9512: DOUBLE
9513: LD_INT 1
9515: DEC
9516: ST_TO_ADDR
9517: LD_INT 8
9519: PUSH
9520: FOR_TO
9521: IFFALSE 9637
// begin uc_side := 2 ;
9523: LD_ADDR_OWVAR 20
9527: PUSH
9528: LD_INT 2
9530: ST_TO_ADDR
// uc_nation := nation_arabian ;
9531: LD_ADDR_OWVAR 21
9535: PUSH
9536: LD_INT 2
9538: ST_TO_ADDR
// PrepareSoldier ( false , 6 ) ;
9539: LD_INT 0
9541: PPUSH
9542: LD_INT 6
9544: PPUSH
9545: CALL_OW 381
// un := CreateHuman ;
9549: LD_ADDR_VAR 0 3
9553: PUSH
9554: CALL_OW 44
9558: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
9559: LD_ADDR_EXP 64
9563: PUSH
9564: LD_EXP 64
9568: PPUSH
9569: LD_VAR 0 3
9573: PPUSH
9574: CALL 66853 0 2
9578: ST_TO_ADDR
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
9579: LD_VAR 0 3
9583: PPUSH
9584: LD_INT 30
9586: PPUSH
9587: LD_INT 0
9589: PPUSH
9590: CALL_OW 49
// ComAgressiveMove ( un , 164 , 108 ) ;
9594: LD_VAR 0 3
9598: PPUSH
9599: LD_INT 164
9601: PPUSH
9602: LD_INT 108
9604: PPUSH
9605: CALL_OW 114
// if i mod 2 = 0 then
9609: LD_VAR 0 2
9613: PUSH
9614: LD_INT 2
9616: MOD
9617: PUSH
9618: LD_INT 0
9620: EQUAL
9621: IFFALSE 9635
// SetTag ( i , tMine ) ;
9623: LD_VAR 0 2
9627: PPUSH
9628: LD_INT 6
9630: PPUSH
9631: CALL_OW 109
// end ;
9635: GO 9520
9637: POP
9638: POP
// wait ( 0 0$3 ) ;
9639: LD_INT 105
9641: PPUSH
9642: CALL_OW 67
// for i := 1 to 6 do
9646: LD_ADDR_VAR 0 2
9650: PUSH
9651: DOUBLE
9652: LD_INT 1
9654: DEC
9655: ST_TO_ADDR
9656: LD_INT 6
9658: PUSH
9659: FOR_TO
9660: IFFALSE 9834
// begin uc_side := 2 ;
9662: LD_ADDR_OWVAR 20
9666: PUSH
9667: LD_INT 2
9669: ST_TO_ADDR
// uc_nation := nation_arabian ;
9670: LD_ADDR_OWVAR 21
9674: PUSH
9675: LD_INT 2
9677: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
9678: LD_INT 14
9680: PPUSH
9681: LD_INT 1
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: LD_INT 26
9689: PPUSH
9690: LD_INT 100
9692: PPUSH
9693: CALL 33673 0 5
// veh := CreateVehicle ;
9697: LD_ADDR_VAR 0 4
9701: PUSH
9702: CALL_OW 45
9706: ST_TO_ADDR
// arForces := Join ( arForces , veh ) ;
9707: LD_ADDR_EXP 64
9711: PUSH
9712: LD_EXP 64
9716: PPUSH
9717: LD_VAR 0 4
9721: PPUSH
9722: CALL 66853 0 2
9726: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9727: LD_VAR 0 4
9731: PPUSH
9732: LD_INT 4
9734: PPUSH
9735: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
9739: LD_INT 10
9741: PPUSH
9742: CALL_OW 67
// until PlaceUnitArea ( veh , arabSpawnArea , false ) ;
9746: LD_VAR 0 4
9750: PPUSH
9751: LD_INT 29
9753: PPUSH
9754: LD_INT 0
9756: PPUSH
9757: CALL_OW 49
9761: IFFALSE 9739
// PrepareMechanic ( false , 6 ) ;
9763: LD_INT 0
9765: PPUSH
9766: LD_INT 6
9768: PPUSH
9769: CALL_OW 383
// un := CreateHuman ;
9773: LD_ADDR_VAR 0 3
9777: PUSH
9778: CALL_OW 44
9782: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
9783: LD_ADDR_EXP 64
9787: PUSH
9788: LD_EXP 64
9792: PPUSH
9793: LD_VAR 0 3
9797: PPUSH
9798: CALL 66853 0 2
9802: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_VAR 0 4
9812: PPUSH
9813: CALL_OW 52
// ComAgressiveMove ( veh , 164 , 108 ) ;
9817: LD_VAR 0 4
9821: PPUSH
9822: LD_INT 164
9824: PPUSH
9825: LD_INT 108
9827: PPUSH
9828: CALL_OW 114
// end ;
9832: GO 9659
9834: POP
9835: POP
// for i := 1 to 6 do
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: DOUBLE
9842: LD_INT 1
9844: DEC
9845: ST_TO_ADDR
9846: LD_INT 6
9848: PUSH
9849: FOR_TO
9850: IFFALSE 10043
// begin uc_side := 2 ;
9852: LD_ADDR_OWVAR 20
9856: PUSH
9857: LD_INT 2
9859: ST_TO_ADDR
// uc_nation := nation_arabian ;
9860: LD_ADDR_OWVAR 21
9864: PUSH
9865: LD_INT 2
9867: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9868: LD_INT 13
9870: PPUSH
9871: LD_INT 1
9873: PPUSH
9874: LD_INT 1
9876: PPUSH
9877: LD_INT 27
9879: PUSH
9880: LD_INT 25
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: PUSH
9887: LD_INT 1
9889: PPUSH
9890: LD_INT 2
9892: PPUSH
9893: CALL_OW 12
9897: ARRAY
9898: PPUSH
9899: LD_INT 100
9901: PPUSH
9902: CALL 33673 0 5
// veh := CreateVehicle ;
9906: LD_ADDR_VAR 0 4
9910: PUSH
9911: CALL_OW 45
9915: ST_TO_ADDR
// arForces := Join ( arForces , veh ) ;
9916: LD_ADDR_EXP 64
9920: PUSH
9921: LD_EXP 64
9925: PPUSH
9926: LD_VAR 0 4
9930: PPUSH
9931: CALL 66853 0 2
9935: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9936: LD_VAR 0 4
9940: PPUSH
9941: LD_INT 4
9943: PPUSH
9944: CALL_OW 233
// repeat wait ( 0 0$0.3 ) ;
9948: LD_INT 10
9950: PPUSH
9951: CALL_OW 67
// until PlaceUnitArea ( veh , arabSpawnArea , false ) ;
9955: LD_VAR 0 4
9959: PPUSH
9960: LD_INT 29
9962: PPUSH
9963: LD_INT 0
9965: PPUSH
9966: CALL_OW 49
9970: IFFALSE 9948
// PrepareMechanic ( false , 6 ) ;
9972: LD_INT 0
9974: PPUSH
9975: LD_INT 6
9977: PPUSH
9978: CALL_OW 383
// un := CreateHuman ;
9982: LD_ADDR_VAR 0 3
9986: PUSH
9987: CALL_OW 44
9991: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
9992: LD_ADDR_EXP 64
9996: PUSH
9997: LD_EXP 64
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: CALL 66853 0 2
10011: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10012: LD_VAR 0 3
10016: PPUSH
10017: LD_VAR 0 4
10021: PPUSH
10022: CALL_OW 52
// ComAgressiveMove ( veh , 164 , 108 ) ;
10026: LD_VAR 0 4
10030: PPUSH
10031: LD_INT 164
10033: PPUSH
10034: LD_INT 108
10036: PPUSH
10037: CALL_OW 114
// end ;
10041: GO 9849
10043: POP
10044: POP
// for i := 1 to 3 do
10045: LD_ADDR_VAR 0 2
10049: PUSH
10050: DOUBLE
10051: LD_INT 1
10053: DEC
10054: ST_TO_ADDR
10055: LD_INT 3
10057: PUSH
10058: FOR_TO
10059: IFFALSE 10149
// begin uc_side := 2 ;
10061: LD_ADDR_OWVAR 20
10065: PUSH
10066: LD_INT 2
10068: ST_TO_ADDR
// uc_nation := nation_arabian ;
10069: LD_ADDR_OWVAR 21
10073: PUSH
10074: LD_INT 2
10076: ST_TO_ADDR
// PrepareScientist ( false , 6 ) ;
10077: LD_INT 0
10079: PPUSH
10080: LD_INT 6
10082: PPUSH
10083: CALL_OW 384
// un := CreateHuman ;
10087: LD_ADDR_VAR 0 3
10091: PUSH
10092: CALL_OW 44
10096: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
10097: LD_ADDR_EXP 64
10101: PUSH
10102: LD_EXP 64
10106: PPUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: CALL 66853 0 2
10116: ST_TO_ADDR
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
10117: LD_VAR 0 3
10121: PPUSH
10122: LD_INT 30
10124: PPUSH
10125: LD_INT 0
10127: PPUSH
10128: CALL_OW 49
// ComMoveXY ( un , 175 , 132 ) ;
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_INT 175
10139: PPUSH
10140: LD_INT 132
10142: PPUSH
10143: CALL_OW 111
// end ;
10147: GO 10058
10149: POP
10150: POP
// end ;
10151: LD_VAR 0 1
10155: RET
// every 0 0$1 trigger arabAttackActive do var i , tag , enemy ;
10156: LD_EXP 8
10160: IFFALSE 11298
10162: GO 10164
10164: DISABLE
10165: LD_INT 0
10167: PPUSH
10168: PPUSH
10169: PPUSH
// begin repeat wait ( 0 0$1 ) ;
10170: LD_INT 35
10172: PPUSH
10173: CALL_OW 67
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_side , 6 ] ) ;
10177: LD_ADDR_VAR 0 3
10181: PUSH
10182: LD_INT 10
10184: PPUSH
10185: LD_INT 22
10187: PUSH
10188: LD_INT 6
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: PPUSH
10195: CALL_OW 70
10199: ST_TO_ADDR
// for i in arForces do
10200: LD_ADDR_VAR 0 1
10204: PUSH
10205: LD_EXP 64
10209: PUSH
10210: FOR_IN
10211: IFFALSE 10696
// begin if IsDead ( i ) then
10213: LD_VAR 0 1
10217: PPUSH
10218: CALL_OW 301
10222: IFFALSE 10242
// begin arForces := arForces diff i ;
10224: LD_ADDR_EXP 64
10228: PUSH
10229: LD_EXP 64
10233: PUSH
10234: LD_VAR 0 1
10238: DIFF
10239: ST_TO_ADDR
// continue ;
10240: GO 10210
// end ; if GetClass ( i ) = class_scientistic then
10242: LD_VAR 0 1
10246: PPUSH
10247: CALL_OW 257
10251: PUSH
10252: LD_INT 4
10254: EQUAL
10255: IFFALSE 10349
// begin if GetDistUnitXY ( i , 176 , 135 ) > 10 then
10257: LD_VAR 0 1
10261: PPUSH
10262: LD_INT 176
10264: PPUSH
10265: LD_INT 135
10267: PPUSH
10268: CALL_OW 297
10272: PUSH
10273: LD_INT 10
10275: GREATER
10276: IFFALSE 10295
// ComMoveXY ( i , 176 , 135 ) else
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_INT 176
10285: PPUSH
10286: LD_INT 135
10288: PPUSH
10289: CALL_OW 111
10293: GO 10349
// if UnitFilter ( arForces , [ f_tag , tHeal ] ) then
10295: LD_EXP 64
10299: PPUSH
10300: LD_INT 120
10302: PUSH
10303: LD_INT 1
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 72
10314: IFFALSE 10349
// ComHeal ( i , UnitFilter ( arForces , [ f_tag , tHeal ] ) [ 1 ] ) ;
10316: LD_VAR 0 1
10320: PPUSH
10321: LD_EXP 64
10325: PPUSH
10326: LD_INT 120
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PPUSH
10336: CALL_OW 72
10340: PUSH
10341: LD_INT 1
10343: ARRAY
10344: PPUSH
10345: CALL_OW 128
// end ; if GetClass ( i ) = class_soldier then
10349: LD_VAR 0 1
10353: PPUSH
10354: CALL_OW 257
10358: PUSH
10359: LD_INT 1
10361: EQUAL
10362: IFFALSE 10559
// begin tag := GetTag ( i ) ;
10364: LD_ADDR_VAR 0 2
10368: PUSH
10369: LD_VAR 0 1
10373: PPUSH
10374: CALL_OW 110
10378: ST_TO_ADDR
// if GetLives ( i ) < 650 and tag <> tHeal then
10379: LD_VAR 0 1
10383: PPUSH
10384: CALL_OW 256
10388: PUSH
10389: LD_INT 650
10391: LESS
10392: IFFALSE 10404
10394: PUSH
10395: LD_VAR 0 2
10399: PUSH
10400: LD_INT 1
10402: NONEQUAL
10403: AND
10404: IFFALSE 10435
// begin SetTag ( i , tHeal ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 109
// ComMoveXY ( i , 176 , 135 ) ;
10418: LD_VAR 0 1
10422: PPUSH
10423: LD_INT 176
10425: PPUSH
10426: LD_INT 135
10428: PPUSH
10429: CALL_OW 111
// continue ;
10433: GO 10210
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10435: LD_VAR 0 1
10439: PPUSH
10440: CALL_OW 256
10444: PUSH
10445: LD_INT 1000
10447: EQUAL
10448: IFFALSE 10460
10450: PUSH
10451: LD_VAR 0 2
10455: PUSH
10456: LD_INT 1
10458: EQUAL
10459: AND
10460: IFFALSE 10474
// SetTag ( i , 0 ) ;
10462: LD_VAR 0 1
10466: PPUSH
10467: LD_INT 0
10469: PPUSH
10470: CALL_OW 109
// if not tag then
10474: LD_VAR 0 2
10478: NOT
10479: IFFALSE 10507
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
10481: LD_VAR 0 1
10485: PPUSH
10486: LD_VAR 0 3
10490: PPUSH
10491: LD_VAR 0 1
10495: PPUSH
10496: CALL_OW 74
10500: PPUSH
10501: CALL_OW 115
10505: GO 10559
// if tag = tMine then
10507: LD_VAR 0 2
10511: PUSH
10512: LD_INT 6
10514: EQUAL
10515: IFFALSE 10559
// begin ComPlaceDelayedCharge ( i , 0 , 0 , NearestUnitToUnit ( enemy , i ) ) ;
10517: LD_VAR 0 1
10521: PPUSH
10522: LD_INT 0
10524: PPUSH
10525: LD_INT 0
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_VAR 0 1
10537: PPUSH
10538: CALL_OW 74
10542: PPUSH
10543: CALL_OW 132
// SetTag ( i , tMined ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: LD_INT 11
10554: PPUSH
10555: CALL_OW 109
// end ; end ; if GetClass ( i ) = class_mechanic then
10559: LD_VAR 0 1
10563: PPUSH
10564: CALL_OW 257
10568: PUSH
10569: LD_INT 3
10571: EQUAL
10572: IFFALSE 10643
// begin if IsInUnit ( i ) then
10574: LD_VAR 0 1
10578: PPUSH
10579: CALL_OW 310
10583: IFFALSE 10587
// continue ;
10585: GO 10210
// if not IsInArea ( i , arabSpawnArea ) then
10587: LD_VAR 0 1
10591: PPUSH
10592: LD_INT 29
10594: PPUSH
10595: CALL_OW 308
10599: NOT
10600: IFFALSE 10616
// ComMoveToArea ( i , arabSpawnArea ) else
10602: LD_VAR 0 1
10606: PPUSH
10607: LD_INT 29
10609: PPUSH
10610: CALL_OW 113
10614: GO 10643
// begin RemoveUnit ( i ) ;
10616: LD_VAR 0 1
10620: PPUSH
10621: CALL_OW 64
// arForces := arForces diff i ;
10625: LD_ADDR_EXP 64
10629: PUSH
10630: LD_EXP 64
10634: PUSH
10635: LD_VAR 0 1
10639: DIFF
10640: ST_TO_ADDR
// continue ;
10641: GO 10210
// end ; end ; if GetType ( i ) = unit_vehicle then
10643: LD_VAR 0 1
10647: PPUSH
10648: CALL_OW 247
10652: PUSH
10653: LD_INT 2
10655: EQUAL
10656: IFFALSE 10694
// begin if not HasTask ( i ) then
10658: LD_VAR 0 1
10662: PPUSH
10663: CALL_OW 314
10667: NOT
10668: IFFALSE 10694
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10670: LD_VAR 0 1
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 74
10689: PPUSH
10690: CALL_OW 115
// end ; end ;
10694: GO 10210
10696: POP
10697: POP
// until not enemy ;
10698: LD_VAR 0 3
10702: NOT
10703: IFFALSE 10170
// for i in arForces do
10705: LD_ADDR_VAR 0 1
10709: PUSH
10710: LD_EXP 64
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10747
// if not See ( 3 , i ) then
10718: LD_INT 3
10720: PPUSH
10721: LD_VAR 0 1
10725: PPUSH
10726: CALL_OW 292
10730: NOT
10731: IFFALSE 10745
// SetLives ( i , 1000 ) ;
10733: LD_VAR 0 1
10737: PPUSH
10738: LD_INT 1000
10740: PPUSH
10741: CALL_OW 234
10745: GO 10715
10747: POP
10748: POP
// wait ( 2 2$00 - ( 0 0$10 * Difficulty ) ) ;
10749: LD_INT 4200
10751: PUSH
10752: LD_INT 350
10754: PUSH
10755: LD_OWVAR 67
10759: MUL
10760: MINUS
10761: PPUSH
10762: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10766: LD_INT 35
10768: PPUSH
10769: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 2 ] ) ;
10773: LD_ADDR_VAR 0 3
10777: PUSH
10778: LD_INT 81
10780: PUSH
10781: LD_INT 2
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: ST_TO_ADDR
// for i in arForces do
10793: LD_ADDR_VAR 0 1
10797: PUSH
10798: LD_EXP 64
10802: PUSH
10803: FOR_IN
10804: IFFALSE 11289
// begin if IsDead ( i ) then
10806: LD_VAR 0 1
10810: PPUSH
10811: CALL_OW 301
10815: IFFALSE 10835
// begin arForces := arForces diff i ;
10817: LD_ADDR_EXP 64
10821: PUSH
10822: LD_EXP 64
10826: PUSH
10827: LD_VAR 0 1
10831: DIFF
10832: ST_TO_ADDR
// continue ;
10833: GO 10803
// end ; if GetClass ( i ) = class_scientistic then
10835: LD_VAR 0 1
10839: PPUSH
10840: CALL_OW 257
10844: PUSH
10845: LD_INT 4
10847: EQUAL
10848: IFFALSE 10942
// begin if GetDistUnitXY ( i , 176 , 135 ) > 10 then
10850: LD_VAR 0 1
10854: PPUSH
10855: LD_INT 176
10857: PPUSH
10858: LD_INT 135
10860: PPUSH
10861: CALL_OW 297
10865: PUSH
10866: LD_INT 10
10868: GREATER
10869: IFFALSE 10888
// ComMoveXY ( i , 176 , 135 ) else
10871: LD_VAR 0 1
10875: PPUSH
10876: LD_INT 176
10878: PPUSH
10879: LD_INT 135
10881: PPUSH
10882: CALL_OW 111
10886: GO 10942
// if UnitFilter ( arForces , [ f_tag , tHeal ] ) then
10888: LD_EXP 64
10892: PPUSH
10893: LD_INT 120
10895: PUSH
10896: LD_INT 1
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 72
10907: IFFALSE 10942
// ComHeal ( i , UnitFilter ( arForces , [ f_tag , tHeal ] ) [ 1 ] ) ;
10909: LD_VAR 0 1
10913: PPUSH
10914: LD_EXP 64
10918: PPUSH
10919: LD_INT 120
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: PPUSH
10929: CALL_OW 72
10933: PUSH
10934: LD_INT 1
10936: ARRAY
10937: PPUSH
10938: CALL_OW 128
// end ; if GetClass ( i ) = class_soldier then
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL_OW 257
10951: PUSH
10952: LD_INT 1
10954: EQUAL
10955: IFFALSE 11152
// begin tag := GetTag ( i ) ;
10957: LD_ADDR_VAR 0 2
10961: PUSH
10962: LD_VAR 0 1
10966: PPUSH
10967: CALL_OW 110
10971: ST_TO_ADDR
// if GetLives ( i ) < 650 and tag <> tHeal then
10972: LD_VAR 0 1
10976: PPUSH
10977: CALL_OW 256
10981: PUSH
10982: LD_INT 650
10984: LESS
10985: IFFALSE 10997
10987: PUSH
10988: LD_VAR 0 2
10992: PUSH
10993: LD_INT 1
10995: NONEQUAL
10996: AND
10997: IFFALSE 11028
// begin SetTag ( i , tHeal ) ;
10999: LD_VAR 0 1
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 109
// ComMoveXY ( i , 176 , 135 ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: LD_INT 176
11018: PPUSH
11019: LD_INT 135
11021: PPUSH
11022: CALL_OW 111
// continue ;
11026: GO 10803
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11028: LD_VAR 0 1
11032: PPUSH
11033: CALL_OW 256
11037: PUSH
11038: LD_INT 1000
11040: EQUAL
11041: IFFALSE 11053
11043: PUSH
11044: LD_VAR 0 2
11048: PUSH
11049: LD_INT 1
11051: EQUAL
11052: AND
11053: IFFALSE 11067
// SetTag ( i , 0 ) ;
11055: LD_VAR 0 1
11059: PPUSH
11060: LD_INT 0
11062: PPUSH
11063: CALL_OW 109
// if not tag then
11067: LD_VAR 0 2
11071: NOT
11072: IFFALSE 11100
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11074: LD_VAR 0 1
11078: PPUSH
11079: LD_VAR 0 3
11083: PPUSH
11084: LD_VAR 0 1
11088: PPUSH
11089: CALL_OW 74
11093: PPUSH
11094: CALL_OW 115
11098: GO 11152
// if tag = tMine then
11100: LD_VAR 0 2
11104: PUSH
11105: LD_INT 6
11107: EQUAL
11108: IFFALSE 11152
// begin ComPlaceDelayedCharge ( i , 0 , 0 , NearestUnitToUnit ( enemy , i ) ) ;
11110: LD_VAR 0 1
11114: PPUSH
11115: LD_INT 0
11117: PPUSH
11118: LD_INT 0
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_VAR 0 1
11130: PPUSH
11131: CALL_OW 74
11135: PPUSH
11136: CALL_OW 132
// SetTag ( i , tMined ) ;
11140: LD_VAR 0 1
11144: PPUSH
11145: LD_INT 11
11147: PPUSH
11148: CALL_OW 109
// end ; end ; if GetClass ( i ) = class_mechanic then
11152: LD_VAR 0 1
11156: PPUSH
11157: CALL_OW 257
11161: PUSH
11162: LD_INT 3
11164: EQUAL
11165: IFFALSE 11236
// begin if IsInUnit ( i ) then
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 310
11176: IFFALSE 11180
// continue ;
11178: GO 10803
// if not IsInArea ( i , arabSpawnArea ) then
11180: LD_VAR 0 1
11184: PPUSH
11185: LD_INT 29
11187: PPUSH
11188: CALL_OW 308
11192: NOT
11193: IFFALSE 11209
// ComMoveToArea ( i , arabSpawnArea ) else
11195: LD_VAR 0 1
11199: PPUSH
11200: LD_INT 29
11202: PPUSH
11203: CALL_OW 113
11207: GO 11236
// begin RemoveUnit ( i ) ;
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 64
// arForces := arForces diff i ;
11218: LD_ADDR_EXP 64
11222: PUSH
11223: LD_EXP 64
11227: PUSH
11228: LD_VAR 0 1
11232: DIFF
11233: ST_TO_ADDR
// continue ;
11234: GO 10803
// end ; end ; if GetType ( i ) = unit_vehicle then
11236: LD_VAR 0 1
11240: PPUSH
11241: CALL_OW 247
11245: PUSH
11246: LD_INT 2
11248: EQUAL
11249: IFFALSE 11287
// begin if not HasTask ( i ) then
11251: LD_VAR 0 1
11255: PPUSH
11256: CALL_OW 314
11260: NOT
11261: IFFALSE 11287
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11263: LD_VAR 0 1
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_VAR 0 1
11277: PPUSH
11278: CALL_OW 74
11282: PPUSH
11283: CALL_OW 115
// end ; end ;
11287: GO 10803
11289: POP
11290: POP
// until not enemy ;
11291: LD_VAR 0 3
11295: NOT
11296: IFFALSE 10766
// end ; end_of_file
11298: PPOPN 3
11300: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11301: LD_VAR 0 1
11305: PPUSH
11306: CALL 88293 0 1
// if un in kirovVehicles then
11310: LD_VAR 0 1
11314: PUSH
11315: LD_EXP 49
11319: IN
11320: IFFALSE 11338
// kirovVehicles := kirovVehicles diff un ;
11322: LD_ADDR_EXP 49
11326: PUSH
11327: LD_EXP 49
11331: PUSH
11332: LD_VAR 0 1
11336: DIFF
11337: ST_TO_ADDR
// if un = Burlak then
11338: LD_VAR 0 1
11342: PUSH
11343: LD_EXP 29
11347: EQUAL
11348: IFFALSE 11357
// YouLost ( Burlak ) ;
11350: LD_STRING Burlak
11352: PPUSH
11353: CALL_OW 104
// if un = Popov then
11357: LD_VAR 0 1
11361: PUSH
11362: LD_EXP 35
11366: EQUAL
11367: IFFALSE 11376
// YouLost ( Popov ) ;
11369: LD_STRING Popov
11371: PPUSH
11372: CALL_OW 104
// if un = Kurin and not arabAttackActive then
11376: LD_VAR 0 1
11380: PUSH
11381: LD_EXP 33
11385: EQUAL
11386: IFFALSE 11395
11388: PUSH
11389: LD_EXP 8
11393: NOT
11394: AND
11395: IFFALSE 11404
// YouLost ( Kurin ) ;
11397: LD_STRING Kurin
11399: PPUSH
11400: CALL_OW 104
// if un = beriaDepot and not arabAttackActive then
11404: LD_VAR 0 1
11408: PUSH
11409: LD_EXP 46
11413: EQUAL
11414: IFFALSE 11423
11416: PUSH
11417: LD_EXP 8
11421: NOT
11422: AND
11423: IFFALSE 11432
// YouLost ( Beria ) ;
11425: LD_STRING Beria
11427: PPUSH
11428: CALL_OW 104
// if un = kaganDepot and not arabAttackActive then
11432: LD_VAR 0 1
11436: PUSH
11437: LD_EXP 47
11441: EQUAL
11442: IFFALSE 11451
11444: PUSH
11445: LD_EXP 8
11449: NOT
11450: AND
11451: IFFALSE 11460
// YouLost ( Kagan ) ;
11453: LD_STRING Kagan
11455: PPUSH
11456: CALL_OW 104
// if un = Sikorski then
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 56
11469: EQUAL
11470: IFFALSE 11479
// SetAchievement ( ACH_SIKORSKI ) ;
11472: LD_STRING ACH_SIKORSKI
11474: PPUSH
11475: CALL_OW 543
// end ;
11479: PPOPN 1
11481: END
// on VehicleConstructed ( vehicle , factory ) do var side , driver ;
11482: LD_INT 0
11484: PPUSH
11485: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
11486: LD_VAR 0 1
11490: PPUSH
11491: LD_VAR 0 2
11495: PPUSH
11496: CALL 88351 0 2
// side := GetSide ( vehicle ) ;
11500: LD_ADDR_VAR 0 3
11504: PUSH
11505: LD_VAR 0 1
11509: PPUSH
11510: CALL_OW 255
11514: ST_TO_ADDR
// if side = 6 then
11515: LD_VAR 0 3
11519: PUSH
11520: LD_INT 6
11522: EQUAL
11523: IFFALSE 11590
// begin driver := IsDrivenBy ( vehicle ) ;
11525: LD_ADDR_VAR 0 4
11529: PUSH
11530: LD_VAR 0 1
11534: PPUSH
11535: CALL_OW 311
11539: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , vehicle ) ;
11540: LD_ADDR_EXP 49
11544: PUSH
11545: LD_EXP 49
11549: PPUSH
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL 66853 0 2
11559: ST_TO_ADDR
// SetTag ( driver , tMech ) ;
11560: LD_VAR 0 4
11564: PPUSH
11565: LD_INT 7
11567: PPUSH
11568: CALL_OW 109
// kirovConstructList := Delete ( kirovConstructList , 1 ) ;
11572: LD_ADDR_EXP 53
11576: PUSH
11577: LD_EXP 53
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 3
11589: ST_TO_ADDR
// end ; if side = 1 then
11590: LD_VAR 0 3
11594: PUSH
11595: LD_INT 1
11597: EQUAL
11598: IFFALSE 11732
// begin driver := IsDrivenBy ( vehicle ) ;
11600: LD_ADDR_VAR 0 4
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: CALL_OW 311
11614: ST_TO_ADDR
// if driver then
11615: LD_VAR 0 4
11619: IFFALSE 11633
// SetTag ( driver , tMech ) ;
11621: LD_VAR 0 4
11625: PPUSH
11626: LD_INT 7
11628: PPUSH
11629: CALL_OW 109
// if Count ( omicronVehicles ) < 3 or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
11633: LD_EXP 59
11637: PPUSH
11638: CALL 30877 0 1
11642: PUSH
11643: LD_INT 3
11645: LESS
11646: IFTRUE 11670
11648: PUSH
11649: LD_VAR 0 1
11653: PPUSH
11654: CALL_OW 266
11658: PUSH
11659: LD_INT 12
11661: PUSH
11662: LD_INT 13
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: IN
11669: OR
11670: IFFALSE 11694
// omicronVehicles := Join ( omicronVehicles , vehicle ) else
11672: LD_ADDR_EXP 59
11676: PUSH
11677: LD_EXP 59
11681: PPUSH
11682: LD_VAR 0 1
11686: PPUSH
11687: CALL 66853 0 2
11691: ST_TO_ADDR
11692: GO 11714
// omicronAttackVehicles := Join ( omicronAttackVehicles , vehicle ) ;
11694: LD_ADDR_EXP 60
11698: PUSH
11699: LD_EXP 60
11703: PPUSH
11704: LD_VAR 0 1
11708: PPUSH
11709: CALL 66853 0 2
11713: ST_TO_ADDR
// omicronConstructList := Delete ( omicronConstructList , 1 ) ;
11714: LD_ADDR_EXP 62
11718: PUSH
11719: LD_EXP 62
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 3
11731: ST_TO_ADDR
// end ; end ;
11732: PPOPN 4
11734: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 110
11744: PUSH
11745: LD_INT 7
11747: EQUAL
11748: IFFALSE 11762
// SetTag ( driver , 0 ) ;
11750: LD_VAR 0 1
11754: PPUSH
11755: LD_INT 0
11757: PPUSH
11758: CALL_OW 109
// if GetSide ( driver ) = 1 and IsOk ( usFac ) then
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 255
11771: PUSH
11772: LD_INT 1
11774: EQUAL
11775: IFFALSE 11786
11777: PUSH
11778: LD_INT 291
11780: PPUSH
11781: CALL_OW 302
11785: AND
11786: IFFALSE 11800
// ComEnterUnit ( driver , usFac ) ;
11788: LD_VAR 0 1
11792: PPUSH
11793: LD_INT 291
11795: PPUSH
11796: CALL_OW 120
// end ;
11800: PPOPN 4
11802: END
// on UpgradeComplete ( b ) do var side , btype ;
11803: LD_INT 0
11805: PPUSH
11806: PPUSH
// begin side := GetSide ( b ) ;
11807: LD_ADDR_VAR 0 2
11811: PUSH
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 255
11821: ST_TO_ADDR
// btype := GetBType ( b ) ;
11822: LD_ADDR_VAR 0 3
11826: PUSH
11827: LD_VAR 0 1
11831: PPUSH
11832: CALL_OW 266
11836: ST_TO_ADDR
// if side = 6 then
11837: LD_VAR 0 2
11841: PUSH
11842: LD_INT 6
11844: EQUAL
11845: IFFALSE 11975
// begin if GetBType ( b ) = b_warehouse then
11847: LD_VAR 0 1
11851: PPUSH
11852: CALL_OW 266
11856: PUSH
11857: LD_INT 1
11859: EQUAL
11860: IFFALSE 11957
// begin ComMoveXY ( Kurin , 186 , 127 ) ;
11862: LD_EXP 33
11866: PPUSH
11867: LD_INT 186
11869: PPUSH
11870: LD_INT 127
11872: PPUSH
11873: CALL_OW 111
// AddComWait ( Kurin , 0 0$8 ) ;
11877: LD_EXP 33
11881: PPUSH
11882: LD_INT 280
11884: PPUSH
11885: CALL_OW 202
// AddComMoveXY ( Kurin , 186 , 109 ) ;
11889: LD_EXP 33
11893: PPUSH
11894: LD_INT 186
11896: PPUSH
11897: LD_INT 109
11899: PPUSH
11900: CALL_OW 171
// AddComWait ( Kurin , 0 0$8 ) ;
11904: LD_EXP 33
11908: PPUSH
11909: LD_INT 280
11911: PPUSH
11912: CALL_OW 202
// AddComMoveXY ( Kurin , 179 , 93 ) ;
11916: LD_EXP 33
11920: PPUSH
11921: LD_INT 179
11923: PPUSH
11924: LD_INT 93
11926: PPUSH
11927: CALL_OW 171
// AddComWait ( Kurin , 0 0$4 ) ;
11931: LD_EXP 33
11935: PPUSH
11936: LD_INT 140
11938: PPUSH
11939: CALL_OW 202
// AddComEnterUnit ( Kurin , b ) ;
11943: LD_EXP 33
11947: PPUSH
11948: LD_VAR 0 1
11952: PPUSH
11953: CALL_OW 180
// end ; kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
11957: LD_ADDR_EXP 52
11961: PUSH
11962: LD_EXP 52
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: CALL_OW 3
11974: ST_TO_ADDR
// end ; if side = 1 then
11975: LD_VAR 0 2
11979: PUSH
11980: LD_INT 1
11982: EQUAL
11983: IFFALSE 12003
// omicronBuildingsToBuild := Delete ( omicronBuildingsToBuild , 1 ) ;
11985: LD_ADDR_EXP 63
11989: PUSH
11990: LD_EXP 63
11994: PPUSH
11995: LD_INT 1
11997: PPUSH
11998: CALL_OW 3
12002: ST_TO_ADDR
// if side = 3 then
12003: LD_VAR 0 2
12007: PUSH
12008: LD_INT 3
12010: EQUAL
12011: IFFALSE 12036
// begin if GetBType ( b ) = b_factory then
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 266
12022: PUSH
12023: LD_INT 3
12025: EQUAL
12026: IFFALSE 12036
// hasFactory := true ;
12028: LD_ADDR_EXP 19
12032: PUSH
12033: LD_INT 1
12035: ST_TO_ADDR
// end ; end ;
12036: PPOPN 3
12038: END
// on ResearchComplete ( tech , lab ) do var side ;
12039: LD_INT 0
12041: PPUSH
// begin side := GetSide ( lab ) ;
12042: LD_ADDR_VAR 0 3
12046: PUSH
12047: LD_VAR 0 2
12051: PPUSH
12052: CALL_OW 255
12056: ST_TO_ADDR
// if side = 6 then
12057: LD_VAR 0 3
12061: PUSH
12062: LD_INT 6
12064: EQUAL
12065: IFFALSE 12083
// begin kirovTechs := kirovTechs diff tech ;
12067: LD_ADDR_EXP 51
12071: PUSH
12072: LD_EXP 51
12076: PUSH
12077: LD_VAR 0 1
12081: DIFF
12082: ST_TO_ADDR
// end ; if side = 1 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 1
12090: EQUAL
12091: IFFALSE 12109
// omicronTechs := omicronTechs diff tech ;
12093: LD_ADDR_EXP 61
12097: PUSH
12098: LD_EXP 61
12102: PUSH
12103: LD_VAR 0 1
12107: DIFF
12108: ST_TO_ADDR
// end ;
12109: PPOPN 3
12111: END
// on BuildingComplete ( b ) do var side , btype ;
12112: LD_INT 0
12114: PPUSH
12115: PPUSH
// begin side := GetSide ( b ) ;
12116: LD_ADDR_VAR 0 2
12120: PUSH
12121: LD_VAR 0 1
12125: PPUSH
12126: CALL_OW 255
12130: ST_TO_ADDR
// btype := GetBType ( b ) ;
12131: LD_ADDR_VAR 0 3
12135: PUSH
12136: LD_VAR 0 1
12140: PPUSH
12141: CALL_OW 266
12145: ST_TO_ADDR
// if side = 3 then
12146: LD_VAR 0 2
12150: PUSH
12151: LD_INT 3
12153: EQUAL
12154: IFFALSE 12244
// begin if btype = b_oil_mine then
12156: LD_VAR 0 3
12160: PUSH
12161: LD_INT 29
12163: EQUAL
12164: IFFALSE 12174
// hasOilTower := true ;
12166: LD_ADDR_EXP 14
12170: PUSH
12171: LD_INT 1
12173: ST_TO_ADDR
// if btype = b_depot then
12174: LD_VAR 0 3
12178: PUSH
12179: LD_INT 0
12181: EQUAL
12182: IFFALSE 12244
// if GetDistUnitXY ( b , 78 , 112 ) < depotRangeDist and not hasKagan then
12184: LD_VAR 0 1
12188: PPUSH
12189: LD_INT 78
12191: PPUSH
12192: LD_INT 112
12194: PPUSH
12195: CALL_OW 297
12199: PUSH
12200: LD_INT 28
12202: LESS
12203: IFFALSE 12212
12205: PUSH
12206: LD_EXP 12
12210: NOT
12211: AND
12212: IFFALSE 12244
// begin hasKagan := true ;
12214: LD_ADDR_EXP 12
12218: PUSH
12219: LD_INT 1
12221: ST_TO_ADDR
// kaganDepot := b ;
12222: LD_ADDR_EXP 47
12226: PUSH
12227: LD_VAR 0 1
12231: ST_TO_ADDR
// SetBName ( b , kagan ) ;
12232: LD_VAR 0 1
12236: PPUSH
12237: LD_STRING kagan
12239: PPUSH
12240: CALL_OW 500
// end ; end ; if side = 1 then
12244: LD_VAR 0 2
12248: PUSH
12249: LD_INT 1
12251: EQUAL
12252: IFFALSE 12272
// omicronBuildingsToBuild := Delete ( omicronBuildingsToBuild , 1 ) ;
12254: LD_ADDR_EXP 63
12258: PUSH
12259: LD_EXP 63
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 3
12271: ST_TO_ADDR
// if side = 6 then
12272: LD_VAR 0 2
12276: PUSH
12277: LD_INT 6
12279: EQUAL
12280: IFFALSE 12300
// kirovBuildingsToBuild := Delete ( kirovBuildingsToBuild , 1 ) ;
12282: LD_ADDR_EXP 52
12286: PUSH
12287: LD_EXP 52
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 3
12299: ST_TO_ADDR
// end ;
12300: PPOPN 3
12302: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
12303: LD_VAR 0 1
12307: PUSH
12308: LD_INT 3
12310: EQUAL
12311: IFFALSE 12323
12313: PUSH
12314: LD_VAR 0 2
12318: PUSH
12319: LD_INT 6
12321: EQUAL
12322: AND
12323: IFFALSE 12333
// allianceAttacked := true ;
12325: LD_ADDR_EXP 9
12329: PUSH
12330: LD_INT 1
12332: ST_TO_ADDR
// end ;
12333: PPOPN 2
12335: END
// on TakeMaterials ( unit , building ) do begin if GetSide ( building ) = 6 and GetSide ( unit ) = 3 then
12336: LD_VAR 0 2
12340: PPUSH
12341: CALL_OW 255
12345: PUSH
12346: LD_INT 6
12348: EQUAL
12349: IFFALSE 12366
12351: PUSH
12352: LD_VAR 0 1
12356: PPUSH
12357: CALL_OW 255
12361: PUSH
12362: LD_INT 3
12364: EQUAL
12365: AND
12366: IFFALSE 12383
// youTookCratesFromKirov := Inc ( youTookCratesFromKirov ) ;
12368: LD_ADDR_EXP 17
12372: PUSH
12373: LD_EXP 17
12377: PPUSH
12378: CALL 68226 0 1
12382: ST_TO_ADDR
// end ;
12383: PPOPN 2
12385: END
// on VehicleCaptured ( newId , oldId , oldSide , driver ) do begin if canCaptureKirovVehs then
12386: LD_EXP 22
12390: IFFALSE 12394
// exit ;
12392: GO 12511
// if oldSide = 6 then
12394: LD_VAR 0 3
12398: PUSH
12399: LD_INT 6
12401: EQUAL
12402: IFFALSE 12511
// begin ComExit ( driver ) ;
12404: LD_VAR 0 4
12408: PPUSH
12409: CALL 67251 0 1
// SetSide ( newId , 6 ) ;
12413: LD_VAR 0 1
12417: PPUSH
12418: LD_INT 6
12420: PPUSH
12421: CALL_OW 235
// if oldId in kirovVehicles then
12425: LD_VAR 0 2
12429: PUSH
12430: LD_EXP 49
12434: IN
12435: IFFALSE 12475
// begin kirovVehicles := kirovVehicles diff oldId ;
12437: LD_ADDR_EXP 49
12441: PUSH
12442: LD_EXP 49
12446: PUSH
12447: LD_VAR 0 2
12451: DIFF
12452: ST_TO_ADDR
// kirovVehicles := Join ( kirovVehicles , newId ) ;
12453: LD_ADDR_EXP 49
12457: PUSH
12458: LD_EXP 49
12462: PPUSH
12463: LD_VAR 0 1
12467: PPUSH
12468: CALL 66853 0 2
12472: ST_TO_ADDR
// end else
12473: GO 12511
// begin kirovAttackVehicles := kirovAttackVehicles diff oldId ;
12475: LD_ADDR_EXP 50
12479: PUSH
12480: LD_EXP 50
12484: PUSH
12485: LD_VAR 0 2
12489: DIFF
12490: ST_TO_ADDR
// kirovAttackVehicles := Join ( kirovAttackVehicles , newId ) ;
12491: LD_ADDR_EXP 50
12495: PUSH
12496: LD_EXP 50
12500: PPUSH
12501: LD_VAR 0 1
12505: PPUSH
12506: CALL 66853 0 2
12510: ST_TO_ADDR
// end ; end ; end ;
12511: PPOPN 4
12513: END
// on ClassChanged ( un , oldClass , newClass ) do var tag ;
12514: LD_INT 0
12516: PPUSH
// begin tag := GetTag ( un ) ;
12517: LD_ADDR_VAR 0 4
12521: PUSH
12522: LD_VAR 0 1
12526: PPUSH
12527: CALL_OW 110
12531: ST_TO_ADDR
// if tag in [ tWannaBeMech , tWannaBeSol ] then
12532: LD_VAR 0 4
12536: PUSH
12537: LD_INT 14
12539: PUSH
12540: LD_INT 16
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: IN
12547: IFFALSE 12561
// SetTag ( un , 0 ) ;
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: CALL_OW 109
// end ;
12561: PPOPN 4
12563: END
// on SailEvent ( event ) do begin if event = eventCargo then
12564: LD_VAR 0 1
12568: PUSH
12569: LD_INT 1
12571: EQUAL
12572: IFFALSE 12578
// SendCargoWithOil ;
12574: CALL 2246 0 0
// if event = eventConvoy then
12578: LD_VAR 0 1
12582: PUSH
12583: LD_INT 2
12585: EQUAL
12586: IFFALSE 12592
// SendConvoy ;
12588: CALL 4835 0 0
// end ;
12592: PPOPN 1
12594: END
// on EnterBuilding ( b , un ) do begin if b = usFac and GetSide ( un ) = 1 then
12595: LD_VAR 0 1
12599: PUSH
12600: LD_INT 291
12602: EQUAL
12603: IFFALSE 12620
12605: PUSH
12606: LD_VAR 0 2
12610: PPUSH
12611: CALL_OW 255
12615: PUSH
12616: LD_INT 1
12618: EQUAL
12619: AND
12620: IFFALSE 12634
// SetLives ( un , 1000 ) ;
12622: LD_VAR 0 2
12626: PPUSH
12627: LD_INT 1000
12629: PPUSH
12630: CALL_OW 234
// end ; end_of_file
12634: PPOPN 2
12636: END
// export function LoadBuildingsFromPrevMission ; var i , tmp ; begin
12637: LD_INT 0
12639: PPUSH
12640: PPUSH
12641: PPUSH
// tmp := LoadVariable ( 02_Beria , [ [ 31 , 3 , 3 , 63 , 86 , 3 ] , [ 31 , 3 , 3 , 74 , 94 , 4 ] , [ 31 , 3 , 3 , 77 , 103 , 4 ] , [ 0 , 3 , 3 , 66 , 104 , 0 ] , [ 0 , 1 , 2 , 103 , 67 , 4 ] , [ 31 , 1 , 2 , 89 , 66 , 1 ] ] ) ;
12642: LD_ADDR_VAR 0 3
12646: PUSH
12647: LD_STRING 02_Beria
12649: PPUSH
12650: LD_INT 31
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: LD_INT 3
12658: PUSH
12659: LD_INT 63
12661: PUSH
12662: LD_INT 86
12664: PUSH
12665: LD_INT 3
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 31
12678: PUSH
12679: LD_INT 3
12681: PUSH
12682: LD_INT 3
12684: PUSH
12685: LD_INT 74
12687: PUSH
12688: LD_INT 94
12690: PUSH
12691: LD_INT 4
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 31
12704: PUSH
12705: LD_INT 3
12707: PUSH
12708: LD_INT 3
12710: PUSH
12711: LD_INT 77
12713: PUSH
12714: LD_INT 103
12716: PUSH
12717: LD_INT 4
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 0
12730: PUSH
12731: LD_INT 3
12733: PUSH
12734: LD_INT 3
12736: PUSH
12737: LD_INT 66
12739: PUSH
12740: LD_INT 104
12742: PUSH
12743: LD_INT 0
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 0
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: LD_INT 2
12762: PUSH
12763: LD_INT 103
12765: PUSH
12766: LD_INT 67
12768: PUSH
12769: LD_INT 4
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 31
12782: PUSH
12783: LD_INT 1
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: LD_INT 89
12791: PUSH
12792: LD_INT 66
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: PPUSH
12814: CALL_OW 30
12818: ST_TO_ADDR
// uc_side := 3 ;
12819: LD_ADDR_OWVAR 20
12823: PUSH
12824: LD_INT 3
12826: ST_TO_ADDR
// for i in tmp do
12827: LD_ADDR_VAR 0 2
12831: PUSH
12832: LD_VAR 0 3
12836: PUSH
12837: FOR_IN
12838: IFFALSE 12935
// begin uc_nation := i [ 2 ] ;
12840: LD_ADDR_OWVAR 21
12844: PUSH
12845: LD_VAR 0 2
12849: PUSH
12850: LD_INT 2
12852: ARRAY
12853: ST_TO_ADDR
// bc_type := i [ 1 ] ;
12854: LD_ADDR_OWVAR 42
12858: PUSH
12859: LD_VAR 0 2
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: ST_TO_ADDR
// bc_level := i [ 3 ] ;
12868: LD_ADDR_OWVAR 43
12872: PUSH
12873: LD_VAR 0 2
12877: PUSH
12878: LD_INT 3
12880: ARRAY
12881: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
12882: LD_ADDR_OWVAR 44
12886: PUSH
12887: LD_INT 9
12889: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
12890: LD_ADDR_OWVAR 45
12894: PUSH
12895: LD_INT 9
12897: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
12898: LD_VAR 0 2
12902: PUSH
12903: LD_INT 4
12905: ARRAY
12906: PUSH
12907: LD_INT 46
12909: PLUS
12910: PPUSH
12911: LD_VAR 0 2
12915: PUSH
12916: LD_INT 5
12918: ARRAY
12919: PPUSH
12920: LD_VAR 0 2
12924: PUSH
12925: LD_INT 6
12927: ARRAY
12928: PPUSH
12929: CALL_OW 47
// end ;
12933: GO 12837
12935: POP
12936: POP
// tmp := LoadVariable ( 02_Kirov , [ [ 31 , 3 , 3 , 98 , 98 , 1 ] , [ 6 , 3 , 3 , 107 , 99 , 3 ] , [ 0 , 3 , 3 , 117 , 104 , 3 ] , [ 4 , 3 , 3 , 105 , 108 , 0 ] , [ 4 , 3 , 3 , 120 , 116 , 0 ] , [ 2 , 3 , 3 , 113 , 113 , 0 ] , [ 26 , 3 , 3 , 116 , 98 , 0 ] ] ) ;
12937: LD_ADDR_VAR 0 3
12941: PUSH
12942: LD_STRING 02_Kirov
12944: PPUSH
12945: LD_INT 31
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 3
12953: PUSH
12954: LD_INT 98
12956: PUSH
12957: LD_INT 98
12959: PUSH
12960: LD_INT 1
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 6
12973: PUSH
12974: LD_INT 3
12976: PUSH
12977: LD_INT 3
12979: PUSH
12980: LD_INT 107
12982: PUSH
12983: LD_INT 99
12985: PUSH
12986: LD_INT 3
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 0
12999: PUSH
13000: LD_INT 3
13002: PUSH
13003: LD_INT 3
13005: PUSH
13006: LD_INT 117
13008: PUSH
13009: LD_INT 104
13011: PUSH
13012: LD_INT 3
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: LD_INT 3
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: LD_INT 105
13034: PUSH
13035: LD_INT 108
13037: PUSH
13038: LD_INT 0
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 4
13051: PUSH
13052: LD_INT 3
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: LD_INT 120
13060: PUSH
13061: LD_INT 116
13063: PUSH
13064: LD_INT 0
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 2
13077: PUSH
13078: LD_INT 3
13080: PUSH
13081: LD_INT 3
13083: PUSH
13084: LD_INT 113
13086: PUSH
13087: LD_INT 113
13089: PUSH
13090: LD_INT 0
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 26
13103: PUSH
13104: LD_INT 3
13106: PUSH
13107: LD_INT 3
13109: PUSH
13110: LD_INT 116
13112: PUSH
13113: LD_INT 98
13115: PUSH
13116: LD_INT 0
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: PPUSH
13136: CALL_OW 30
13140: ST_TO_ADDR
// uc_side := 6 ;
13141: LD_ADDR_OWVAR 20
13145: PUSH
13146: LD_INT 6
13148: ST_TO_ADDR
// for i in tmp do
13149: LD_ADDR_VAR 0 2
13153: PUSH
13154: LD_VAR 0 3
13158: PUSH
13159: FOR_IN
13160: IFFALSE 13257
// begin uc_nation := i [ 2 ] ;
13162: LD_ADDR_OWVAR 21
13166: PUSH
13167: LD_VAR 0 2
13171: PUSH
13172: LD_INT 2
13174: ARRAY
13175: ST_TO_ADDR
// bc_type := i [ 1 ] ;
13176: LD_ADDR_OWVAR 42
13180: PUSH
13181: LD_VAR 0 2
13185: PUSH
13186: LD_INT 1
13188: ARRAY
13189: ST_TO_ADDR
// bc_level := i [ 3 ] ;
13190: LD_ADDR_OWVAR 43
13194: PUSH
13195: LD_VAR 0 2
13199: PUSH
13200: LD_INT 3
13202: ARRAY
13203: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
13204: LD_ADDR_OWVAR 44
13208: PUSH
13209: LD_INT 9
13211: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
13212: LD_ADDR_OWVAR 45
13216: PUSH
13217: LD_INT 9
13219: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 4 ] + 46 , i [ 5 ] , i [ 6 ] ) ;
13220: LD_VAR 0 2
13224: PUSH
13225: LD_INT 4
13227: ARRAY
13228: PUSH
13229: LD_INT 46
13231: PLUS
13232: PPUSH
13233: LD_VAR 0 2
13237: PUSH
13238: LD_INT 5
13240: ARRAY
13241: PPUSH
13242: LD_VAR 0 2
13246: PUSH
13247: LD_INT 6
13249: ARRAY
13250: PPUSH
13251: CALL_OW 47
// end ;
13255: GO 13159
13257: POP
13258: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , easternHillArea ] , [ f_type , unit_building ] ] ) ;
13259: LD_ADDR_VAR 0 3
13263: PUSH
13264: LD_INT 22
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 95
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 21
13286: PUSH
13287: LD_INT 3
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: PPUSH
13299: CALL_OW 69
13303: ST_TO_ADDR
// if tmp then
13304: LD_VAR 0 3
13308: IFFALSE 13339
// for i in tmp do
13310: LD_ADDR_VAR 0 2
13314: PUSH
13315: LD_VAR 0 3
13319: PUSH
13320: FOR_IN
13321: IFFALSE 13337
// SetSide ( i , 6 ) ;
13323: LD_VAR 0 2
13327: PPUSH
13328: LD_INT 6
13330: PPUSH
13331: CALL_OW 235
13335: GO 13320
13337: POP
13338: POP
// kirovDepot := HexInfo ( 163 , 104 ) ;
13339: LD_ADDR_EXP 45
13343: PUSH
13344: LD_INT 163
13346: PPUSH
13347: LD_INT 104
13349: PPUSH
13350: CALL_OW 428
13354: ST_TO_ADDR
// beriaDepot := HexInfo ( 112 , 104 ) ;
13355: LD_ADDR_EXP 46
13359: PUSH
13360: LD_INT 112
13362: PPUSH
13363: LD_INT 104
13365: PPUSH
13366: CALL_OW 428
13370: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
13371: LD_EXP 46
13375: PPUSH
13376: LD_STRING beria
13378: PPUSH
13379: CALL_OW 500
// SetBName ( kirovDepot , kirov ) ;
13383: LD_EXP 45
13387: PPUSH
13388: LD_STRING kirov
13390: PPUSH
13391: CALL_OW 500
// end ;
13395: LD_VAR 0 1
13399: RET
// export function SaveTech ( side , saveId ) ; var i ; begin
13400: LD_INT 0
13402: PPUSH
13403: PPUSH
// result := [ ] ;
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: EMPTY
13410: ST_TO_ADDR
// for i := 1 to 100 do
13411: LD_ADDR_VAR 0 4
13415: PUSH
13416: DOUBLE
13417: LD_INT 1
13419: DEC
13420: ST_TO_ADDR
13421: LD_INT 100
13423: PUSH
13424: FOR_TO
13425: IFFALSE 13459
// result := Join ( result , GetTech ( i , side ) ) ;
13427: LD_ADDR_VAR 0 3
13431: PUSH
13432: LD_VAR 0 3
13436: PPUSH
13437: LD_VAR 0 4
13441: PPUSH
13442: LD_VAR 0 1
13446: PPUSH
13447: CALL_OW 321
13451: PPUSH
13452: CALL 66853 0 2
13456: ST_TO_ADDR
13457: GO 13424
13459: POP
13460: POP
// SaveVariable ( result , saveId ) ;
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_VAR 0 2
13470: PPUSH
13471: CALL_OW 39
// end ;
13475: LD_VAR 0 3
13479: RET
// export function BaseScript ( side , area , cratesArea , innerArea , outerArea , forces , vehicles , techs , constructList , buildingsToBuild , healPoint , parkingPoint , allowToPatrol ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , drivers , hurtUnits , enemy , enemyInBase , enemyOuterBase , empty , fac , emptyTowers , weapon , depot , enemySide ; begin
13480: LD_INT 0
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
13488: PPUSH
13489: PPUSH
13490: PPUSH
13491: PPUSH
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
13501: PPUSH
13502: PPUSH
13503: PPUSH
13504: PPUSH
// enable ;
13505: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
13506: LD_ADDR_VAR 0 16
13510: PUSH
13511: LD_INT 81
13513: PUSH
13514: LD_VAR 0 1
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PPUSH
13523: CALL_OW 69
13527: ST_TO_ADDR
// if tmp then
13528: LD_VAR 0 16
13532: IFFALSE 13553
// enemySide := GetSide ( tmp [ 1 ] ) ;
13534: LD_ADDR_VAR 0 36
13538: PUSH
13539: LD_VAR 0 16
13543: PUSH
13544: LD_INT 1
13546: ARRAY
13547: PPUSH
13548: CALL_OW 255
13552: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( innerArea , [ f_enemy , side ] ) ;
13553: LD_ADDR_VAR 0 29
13557: PUSH
13558: LD_VAR 0 4
13562: PPUSH
13563: LD_INT 81
13565: PUSH
13566: LD_VAR 0 1
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PPUSH
13575: CALL_OW 70
13579: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
13580: LD_ADDR_VAR 0 30
13584: PUSH
13585: LD_VAR 0 5
13589: PPUSH
13590: LD_INT 81
13592: PUSH
13593: LD_VAR 0 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PPUSH
13602: CALL_OW 70
13606: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13607: LD_ADDR_VAR 0 35
13611: PUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_INT 22
13619: PUSH
13620: LD_VAR 0 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 2
13631: PUSH
13632: LD_INT 30
13634: PUSH
13635: LD_INT 0
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 30
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PPUSH
13661: CALL_OW 70
13665: ST_TO_ADDR
// if depot then
13666: LD_VAR 0 35
13670: IFFALSE 13686
// depot := depot [ 1 ] ;
13672: LD_ADDR_VAR 0 35
13676: PUSH
13677: LD_VAR 0 35
13681: PUSH
13682: LD_INT 1
13684: ARRAY
13685: ST_TO_ADDR
// fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
13686: LD_ADDR_VAR 0 32
13690: PUSH
13691: LD_VAR 0 2
13695: PPUSH
13696: LD_INT 22
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 30
13710: PUSH
13711: LD_INT 3
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 50
13720: PUSH
13721: EMPTY
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: PPUSH
13729: CALL_OW 70
13733: ST_TO_ADDR
// if Count ( techs ) then
13734: LD_VAR 0 8
13738: PPUSH
13739: CALL 30877 0 1
13743: IFFALSE 13904
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13745: LD_ADDR_VAR 0 18
13749: PUSH
13750: LD_VAR 0 2
13754: PPUSH
13755: LD_INT 22
13757: PUSH
13758: LD_VAR 0 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 50
13769: PUSH
13770: EMPTY
13771: LIST
13772: PUSH
13773: LD_INT 2
13775: PUSH
13776: LD_INT 30
13778: PUSH
13779: LD_INT 6
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 30
13788: PUSH
13789: LD_INT 7
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 8
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 70
13821: ST_TO_ADDR
// if lab then
13822: LD_VAR 0 18
13826: IFFALSE 13902
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13828: LD_VAR 0 18
13832: PUSH
13833: LD_INT 1
13835: ARRAY
13836: PPUSH
13837: CALL_OW 461
13841: PUSH
13842: LD_INT 2
13844: EQUAL
13845: IFFALSE 13902
// begin for i in techs do
13847: LD_ADDR_VAR 0 15
13851: PUSH
13852: LD_VAR 0 8
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13900
// if CanBeResearched ( lab [ 1 ] , i ) then
13860: LD_VAR 0 18
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: LD_VAR 0 15
13873: PPUSH
13874: CALL_OW 430
13878: IFFALSE 13898
// begin AddComResearch ( lab [ 1 ] , i ) ;
13880: LD_VAR 0 18
13884: PUSH
13885: LD_INT 1
13887: ARRAY
13888: PPUSH
13889: LD_VAR 0 15
13893: PPUSH
13894: CALL_OW 184
// end ;
13898: GO 13857
13900: POP
13901: POP
// end ; end ; end else
13902: GO 14225
// if UnitFilter ( fac , [ f_not , [ f_full ] ] ) and Count ( UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ) > 2 then
13904: LD_VAR 0 32
13908: PPUSH
13909: LD_INT 3
13911: PUSH
13912: LD_INT 62
13914: PUSH
13915: EMPTY
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PPUSH
13922: CALL_OW 72
13926: IFFALSE 13993
13928: PUSH
13929: LD_VAR 0 6
13933: PPUSH
13934: LD_INT 3
13936: PUSH
13937: LD_INT 60
13939: PUSH
13940: EMPTY
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 3
13949: PUSH
13950: LD_INT 120
13952: PUSH
13953: LD_INT 14
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 25
13966: PUSH
13967: LD_INT 4
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 72
13983: PPUSH
13984: CALL 30877 0 1
13988: PUSH
13989: LD_INT 2
13991: GREATER
13992: AND
13993: IFFALSE 14225
// begin tmp := UnitFilter ( forces , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_class , 4 ] ] ) ;
13995: LD_ADDR_VAR 0 16
13999: PUSH
14000: LD_VAR 0 6
14004: PPUSH
14005: LD_INT 3
14007: PUSH
14008: LD_INT 60
14010: PUSH
14011: EMPTY
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 120
14023: PUSH
14024: LD_INT 14
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 25
14037: PUSH
14038: LD_INT 4
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 72
14054: ST_TO_ADDR
// for i := tmp downto 2 do
14055: LD_ADDR_VAR 0 15
14059: PUSH
14060: DOUBLE
14061: LD_VAR 0 16
14065: INC
14066: ST_TO_ADDR
14067: LD_INT 2
14069: PUSH
14070: FOR_DOWNTO
14071: IFFALSE 14223
// begin if Count ( UnitsInside ( fac [ 1 ] ) ) + Count ( UnitFilter ( forces , [ f_tag , tWannaBeMech ] ) ) = 6 then
14073: LD_VAR 0 32
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 313
14086: PPUSH
14087: CALL 30877 0 1
14091: PUSH
14092: LD_VAR 0 6
14096: PPUSH
14097: LD_INT 120
14099: PUSH
14100: LD_INT 14
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 72
14111: PPUSH
14112: CALL 30877 0 1
14116: PLUS
14117: PUSH
14118: LD_INT 6
14120: EQUAL
14121: IFFALSE 14143
// begin SetTag ( tmp [ i ] , tWannaBeSol ) ;
14123: LD_VAR 0 16
14127: PUSH
14128: LD_VAR 0 15
14132: ARRAY
14133: PPUSH
14134: LD_INT 16
14136: PPUSH
14137: CALL_OW 109
// break ;
14141: GO 14223
// end ; sci := tmp [ i ] ;
14143: LD_ADDR_VAR 0 24
14147: PUSH
14148: LD_VAR 0 16
14152: PUSH
14153: LD_VAR 0 15
14157: ARRAY
14158: ST_TO_ADDR
// SetTag ( sci , tWannaBeMech ) ;
14159: LD_VAR 0 24
14163: PPUSH
14164: LD_INT 14
14166: PPUSH
14167: CALL_OW 109
// if IsInUnit ( sci ) then
14171: LD_VAR 0 24
14175: PPUSH
14176: CALL_OW 310
14180: IFFALSE 14191
// ComExitBuilding ( sci ) ;
14182: LD_VAR 0 24
14186: PPUSH
14187: CALL_OW 122
// AddComEnterUnit ( sci , fac [ 1 ] ) ;
14191: LD_VAR 0 24
14195: PPUSH
14196: LD_VAR 0 32
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PPUSH
14205: CALL_OW 180
// AddComChangeProfession ( sci , class_mechanic ) ;
14209: LD_VAR 0 24
14213: PPUSH
14214: LD_INT 3
14216: PPUSH
14217: CALL_OW 183
// end ;
14221: GO 14070
14223: POP
14224: POP
// end ; if fac then
14225: LD_VAR 0 32
14229: IFFALSE 14544
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14231: LD_VAR 0 32
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: PPUSH
14240: CALL_OW 461
14244: PUSH
14245: LD_INT 2
14247: EQUAL
14248: IFFALSE 14544
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14250: LD_ADDR_VAR 0 33
14254: PUSH
14255: LD_VAR 0 2
14259: PPUSH
14260: LD_INT 2
14262: PUSH
14263: LD_INT 30
14265: PUSH
14266: LD_INT 32
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 33
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 35
14290: PUSH
14291: LD_INT 0
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 70
14306: ST_TO_ADDR
// if emptyTowers then
14307: LD_VAR 0 33
14311: IFFALSE 14361
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
14313: LD_ADDR_VAR 0 34
14317: PUSH
14318: LD_VAR 0 33
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PPUSH
14327: LD_VAR 0 2
14331: PPUSH
14332: CALL 39202 0 2
14336: ST_TO_ADDR
// if weapon then
14337: LD_VAR 0 34
14341: IFFALSE 14361
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14343: LD_VAR 0 33
14347: PUSH
14348: LD_INT 1
14350: ARRAY
14351: PPUSH
14352: LD_VAR 0 34
14356: PPUSH
14357: CALL_OW 148
// end ; if constructList then
14361: LD_VAR 0 9
14365: IFFALSE 14544
// for i := 1 to Count ( constructList ) do
14367: LD_ADDR_VAR 0 15
14371: PUSH
14372: DOUBLE
14373: LD_INT 1
14375: DEC
14376: ST_TO_ADDR
14377: LD_VAR 0 9
14381: PPUSH
14382: CALL 30877 0 1
14386: PUSH
14387: FOR_TO
14388: IFFALSE 14542
// begin if CanBeConstructed ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) then
14390: LD_VAR 0 32
14394: PUSH
14395: LD_INT 1
14397: ARRAY
14398: PPUSH
14399: LD_VAR 0 9
14403: PUSH
14404: LD_VAR 0 15
14408: ARRAY
14409: PUSH
14410: LD_INT 1
14412: ARRAY
14413: PPUSH
14414: LD_VAR 0 9
14418: PUSH
14419: LD_VAR 0 15
14423: ARRAY
14424: PUSH
14425: LD_INT 2
14427: ARRAY
14428: PPUSH
14429: LD_VAR 0 9
14433: PUSH
14434: LD_VAR 0 15
14438: ARRAY
14439: PUSH
14440: LD_INT 3
14442: ARRAY
14443: PPUSH
14444: LD_VAR 0 9
14448: PUSH
14449: LD_VAR 0 15
14453: ARRAY
14454: PUSH
14455: LD_INT 4
14457: ARRAY
14458: PPUSH
14459: CALL_OW 448
14463: IFFALSE 14540
// begin ComConstruct ( fac [ 1 ] , constructList [ i ] [ 1 ] , constructList [ i ] [ 2 ] , constructList [ i ] [ 3 ] , constructList [ i ] [ 4 ] ) ;
14465: LD_VAR 0 32
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_VAR 0 9
14478: PUSH
14479: LD_VAR 0 15
14483: ARRAY
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PPUSH
14489: LD_VAR 0 9
14493: PUSH
14494: LD_VAR 0 15
14498: ARRAY
14499: PUSH
14500: LD_INT 2
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 9
14508: PUSH
14509: LD_VAR 0 15
14513: ARRAY
14514: PUSH
14515: LD_INT 3
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 9
14523: PUSH
14524: LD_VAR 0 15
14528: ARRAY
14529: PUSH
14530: LD_INT 4
14532: ARRAY
14533: PPUSH
14534: CALL_OW 125
// break ;
14538: GO 14542
// end ; end ;
14540: GO 14387
14542: POP
14543: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14544: LD_ADDR_VAR 0 16
14548: PUSH
14549: LD_VAR 0 2
14553: PPUSH
14554: LD_INT 22
14556: PUSH
14557: LD_VAR 0 1
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 3
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 3
14578: PUSH
14579: LD_INT 57
14581: PUSH
14582: EMPTY
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 3
14591: PUSH
14592: LD_INT 24
14594: PUSH
14595: LD_INT 1000
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 70
14616: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
14617: LD_ADDR_VAR 0 20
14621: PUSH
14622: LD_VAR 0 6
14626: PPUSH
14627: LD_INT 25
14629: PUSH
14630: LD_INT 3
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 50
14639: PUSH
14640: EMPTY
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 72
14651: ST_TO_ADDR
// if fac then
14652: LD_VAR 0 32
14656: IFFALSE 14777
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
14658: LD_VAR 0 20
14662: PPUSH
14663: LD_INT 3
14665: PUSH
14666: LD_INT 120
14668: PUSH
14669: LD_INT 7
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 3
14682: PUSH
14683: LD_INT 54
14685: PUSH
14686: EMPTY
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PPUSH
14697: CALL_OW 72
14701: IFFALSE 14718
14703: PUSH
14704: LD_VAR 0 32
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: PPUSH
14713: CALL_OW 302
14717: AND
14718: IFFALSE 14777
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
14720: LD_VAR 0 20
14724: PPUSH
14725: LD_INT 3
14727: PUSH
14728: LD_INT 120
14730: PUSH
14731: LD_INT 7
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: LD_INT 54
14747: PUSH
14748: EMPTY
14749: LIST
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 72
14763: PPUSH
14764: LD_VAR 0 32
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_not , [ f_tag , tWannaBeMech ] ] , [ f_ok ] ] ) ;
14777: LD_ADDR_VAR 0 24
14781: PUSH
14782: LD_VAR 0 6
14786: PPUSH
14787: LD_INT 25
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: LD_INT 120
14802: PUSH
14803: LD_INT 14
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 50
14816: PUSH
14817: EMPTY
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 72
14829: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14830: LD_ADDR_VAR 0 18
14834: PUSH
14835: LD_VAR 0 2
14839: PPUSH
14840: LD_INT 2
14842: PUSH
14843: LD_INT 30
14845: PUSH
14846: LD_INT 6
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 30
14855: PUSH
14856: LD_INT 7
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 30
14865: PUSH
14866: LD_INT 8
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 70
14883: ST_TO_ADDR
// if sci then
14884: LD_VAR 0 24
14888: IFFALSE 15245
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_not , [ f_lives , 1000 ] ] , [ f_tag , tHeal ] ] ) ;
14890: LD_ADDR_VAR 0 27
14894: PUSH
14895: LD_VAR 0 6
14899: PPUSH
14900: LD_INT 95
14902: PUSH
14903: LD_VAR 0 2
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: LD_INT 24
14917: PUSH
14918: LD_INT 1000
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 120
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: PPUSH
14944: CALL_OW 72
14948: ST_TO_ADDR
// if hurtUnits then
14949: LD_VAR 0 27
14953: IFFALSE 15014
// begin for i in sci do
14955: LD_ADDR_VAR 0 15
14959: PUSH
14960: LD_VAR 0 24
14964: PUSH
14965: FOR_IN
14966: IFFALSE 15010
// if IsInUnit ( i ) then
14968: LD_VAR 0 15
14972: PPUSH
14973: CALL_OW 310
14977: IFFALSE 14990
// ComExitBuilding ( i ) else
14979: LD_VAR 0 15
14983: PPUSH
14984: CALL_OW 122
14988: GO 15008
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14990: LD_VAR 0 15
14994: PPUSH
14995: LD_VAR 0 27
14999: PUSH
15000: LD_INT 1
15002: ARRAY
15003: PPUSH
15004: CALL_OW 128
15008: GO 14965
15010: POP
15011: POP
// end else
15012: GO 15245
// if lab then
15014: LD_VAR 0 18
15018: IFFALSE 15245
// begin for i in sci do
15020: LD_ADDR_VAR 0 15
15024: PUSH
15025: LD_VAR 0 24
15029: PUSH
15030: FOR_IN
15031: IFFALSE 15243
// begin tag := GetTag ( i ) ;
15033: LD_ADDR_VAR 0 21
15037: PUSH
15038: LD_VAR 0 15
15042: PPUSH
15043: CALL_OW 110
15047: ST_TO_ADDR
// empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
15048: LD_ADDR_VAR 0 31
15052: PUSH
15053: LD_VAR 0 2
15057: PPUSH
15058: LD_INT 3
15060: PUSH
15061: LD_INT 62
15063: PUSH
15064: EMPTY
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 3
15073: PUSH
15074: LD_INT 57
15076: PUSH
15077: EMPTY
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 50
15086: PUSH
15087: EMPTY
15088: LIST
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: LD_INT 30
15095: PUSH
15096: LD_INT 4
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 5
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: PPUSH
15124: CALL_OW 70
15128: ST_TO_ADDR
// if tag = tWannaBeSol and empty then
15129: LD_VAR 0 21
15133: PUSH
15134: LD_INT 16
15136: EQUAL
15137: IFFALSE 15145
15139: PUSH
15140: LD_VAR 0 31
15144: AND
15145: IFFALSE 15199
// begin if IsInUnit ( i ) then
15147: LD_VAR 0 15
15151: PPUSH
15152: CALL_OW 310
15156: IFFALSE 15167
// ComExitBuilding ( i ) ;
15158: LD_VAR 0 15
15162: PPUSH
15163: CALL_OW 122
// AddComEnterUnit ( i , empty [ 1 ] ) ;
15167: LD_VAR 0 15
15171: PPUSH
15172: LD_VAR 0 31
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: CALL_OW 180
// AddComChangeProfession ( i , class_soldier ) ;
15185: LD_VAR 0 15
15189: PPUSH
15190: LD_INT 1
15192: PPUSH
15193: CALL_OW 183
// continue ;
15197: GO 15030
// end ; if not IsInUnit ( i ) and tag <> tWannaBeSol then
15199: LD_VAR 0 15
15203: PPUSH
15204: CALL_OW 310
15208: NOT
15209: IFFALSE 15221
15211: PUSH
15212: LD_VAR 0 21
15216: PUSH
15217: LD_INT 16
15219: NONEQUAL
15220: AND
15221: IFFALSE 15241
// ComEnterUnit ( i , lab [ 1 ] ) ;
15223: LD_VAR 0 15
15227: PPUSH
15228: LD_VAR 0 18
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: CALL_OW 120
// end ;
15241: GO 15030
15243: POP
15244: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
15245: LD_ADDR_VAR 0 19
15249: PUSH
15250: LD_VAR 0 6
15254: PPUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 2
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PPUSH
15265: CALL_OW 72
15269: ST_TO_ADDR
// if eng then
15270: LD_VAR 0 19
15274: IFFALSE 16615
// begin for i in eng do
15276: LD_ADDR_VAR 0 15
15280: PUSH
15281: LD_VAR 0 19
15285: PUSH
15286: FOR_IN
15287: IFFALSE 16613
// begin cr := GetListOfCratesInArea ( area ) ;
15289: LD_ADDR_VAR 0 23
15293: PUSH
15294: LD_VAR 0 2
15298: PPUSH
15299: CALL_OW 435
15303: ST_TO_ADDR
// if cratesArea then
15304: LD_VAR 0 3
15308: IFFALSE 15331
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
15310: LD_ADDR_VAR 0 23
15314: PUSH
15315: LD_VAR 0 23
15319: PUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: CALL_OW 435
15329: UNION
15330: ST_TO_ADDR
// tag := GetTag ( i ) ;
15331: LD_ADDR_VAR 0 21
15335: PUSH
15336: LD_VAR 0 15
15340: PPUSH
15341: CALL_OW 110
15345: ST_TO_ADDR
// if IsInArea ( i , outerArea ) and not tCrates then
15346: LD_VAR 0 15
15350: PPUSH
15351: LD_VAR 0 5
15355: PPUSH
15356: CALL_OW 308
15360: IFFALSE 15367
15362: PUSH
15363: LD_INT 2
15365: NOT
15366: AND
15367: IFFALSE 15398
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
15369: LD_VAR 0 15
15373: PPUSH
15374: LD_VAR 0 12
15378: PUSH
15379: LD_INT 1
15381: ARRAY
15382: PPUSH
15383: LD_VAR 0 12
15387: PUSH
15388: LD_INT 2
15390: ARRAY
15391: PPUSH
15392: CALL_OW 111
// continue ;
15396: GO 15286
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
15398: LD_VAR 0 15
15402: PPUSH
15403: CALL_OW 256
15407: PUSH
15408: LD_INT 800
15410: LESS
15411: IFFALSE 15423
15413: PUSH
15414: LD_VAR 0 21
15418: PUSH
15419: LD_INT 1
15421: NONEQUAL
15422: AND
15423: IFFALSE 15473
// begin SetTag ( i , tHeal ) ;
15425: LD_VAR 0 15
15429: PPUSH
15430: LD_INT 1
15432: PPUSH
15433: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
15437: LD_VAR 0 15
15441: PPUSH
15442: LD_VAR 0 11
15446: PUSH
15447: LD_INT 1
15449: ARRAY
15450: PPUSH
15451: LD_VAR 0 11
15455: PUSH
15456: LD_INT 2
15458: ARRAY
15459: PPUSH
15460: CALL_OW 111
// AddComHold ( i ) ;
15464: LD_VAR 0 15
15468: PPUSH
15469: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15473: LD_VAR 0 21
15477: PUSH
15478: LD_INT 1
15480: EQUAL
15481: IFFALSE 15498
15483: PUSH
15484: LD_VAR 0 15
15488: PPUSH
15489: CALL_OW 256
15493: PUSH
15494: LD_INT 1000
15496: EQUAL
15497: AND
15498: IFFALSE 15512
// SetTag ( i , 0 ) ;
15500: LD_VAR 0 15
15504: PPUSH
15505: LD_INT 0
15507: PPUSH
15508: CALL_OW 109
// if not tag then
15512: LD_VAR 0 21
15516: NOT
15517: IFFALSE 15688
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
15519: LD_ADDR_VAR 0 17
15523: PUSH
15524: LD_VAR 0 2
15528: PPUSH
15529: LD_INT 57
15531: PUSH
15532: EMPTY
15533: LIST
15534: PPUSH
15535: CALL_OW 70
15539: ST_TO_ADDR
// if undone then
15540: LD_VAR 0 17
15544: IFFALSE 15566
// begin ComComplete ( i , undone [ 1 ] ) ;
15546: LD_VAR 0 15
15550: PPUSH
15551: LD_VAR 0 17
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: PPUSH
15560: CALL 37047 0 2
// continue ;
15564: GO 15286
// end ; if cr or tmp or buildingsToBuild then
15566: LD_VAR 0 23
15570: IFTRUE 15578
15572: PUSH
15573: LD_VAR 0 16
15577: OR
15578: IFTRUE 15586
15580: PUSH
15581: LD_VAR 0 10
15585: OR
15586: IFFALSE 15662
// begin if IsInUnit ( i ) then
15588: LD_VAR 0 15
15592: PPUSH
15593: CALL_OW 310
15597: IFFALSE 15608
// ComExitBuilding ( i ) ;
15599: LD_VAR 0 15
15603: PPUSH
15604: CALL_OW 122
// if tmp then
15608: LD_VAR 0 16
15612: IFFALSE 15628
// SetTag ( i , tRepair ) else
15614: LD_VAR 0 15
15618: PPUSH
15619: LD_INT 3
15621: PPUSH
15622: CALL_OW 109
15626: GO 15660
// if cr then
15628: LD_VAR 0 23
15632: IFFALSE 15648
// SetTag ( i , tCrates ) else
15634: LD_VAR 0 15
15638: PPUSH
15639: LD_INT 2
15641: PPUSH
15642: CALL_OW 109
15646: GO 15660
// SetTag ( i , tBuild ) ;
15648: LD_VAR 0 15
15652: PPUSH
15653: LD_INT 5
15655: PPUSH
15656: CALL_OW 109
// end else
15660: GO 15688
// if not IsInUnit ( i ) then
15662: LD_VAR 0 15
15666: PPUSH
15667: CALL_OW 310
15671: NOT
15672: IFFALSE 15688
// ComEnterUnit ( i , depot ) ;
15674: LD_VAR 0 15
15678: PPUSH
15679: LD_VAR 0 35
15683: PPUSH
15684: CALL_OW 120
// end ; if tag = tRepair then
15688: LD_VAR 0 21
15692: PUSH
15693: LD_INT 3
15695: EQUAL
15696: IFFALSE 15802
// begin if IsInUnit ( i ) then
15698: LD_VAR 0 15
15702: PPUSH
15703: CALL_OW 310
15707: IFFALSE 15720
// begin ComExitBuilding ( i ) ;
15709: LD_VAR 0 15
15713: PPUSH
15714: CALL_OW 122
// continue ;
15718: GO 15286
// end ; if not tmp then
15720: LD_VAR 0 16
15724: NOT
15725: IFFALSE 15741
// begin SetTag ( i , 0 ) ;
15727: LD_VAR 0 15
15731: PPUSH
15732: LD_INT 0
15734: PPUSH
15735: CALL_OW 109
// continue ;
15739: GO 15286
// end ; if not HasTask ( i ) then
15741: LD_VAR 0 15
15745: PPUSH
15746: CALL_OW 314
15750: NOT
15751: IFFALSE 15771
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15753: LD_VAR 0 15
15757: PPUSH
15758: LD_VAR 0 16
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PPUSH
15767: CALL_OW 130
// if not IsInarea ( i , area ) then
15771: LD_VAR 0 15
15775: PPUSH
15776: LD_VAR 0 2
15780: PPUSH
15781: CALL_OW 308
15785: NOT
15786: IFFALSE 15802
// ComMoveToArea ( i , area ) ;
15788: LD_VAR 0 15
15792: PPUSH
15793: LD_VAR 0 2
15797: PPUSH
15798: CALL_OW 113
// end ; if tag = tBuild then
15802: LD_VAR 0 21
15806: PUSH
15807: LD_INT 5
15809: EQUAL
15810: IFFALSE 16388
// begin if IsInUnit ( i ) then
15812: LD_VAR 0 15
15816: PPUSH
15817: CALL_OW 310
15821: IFFALSE 15834
// begin ComExitBuilding ( i ) ;
15823: LD_VAR 0 15
15827: PPUSH
15828: CALL_OW 122
// continue ;
15832: GO 15286
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
15834: LD_VAR 0 10
15838: NOT
15839: IFTRUE 15847
15841: PUSH
15842: LD_VAR 0 29
15846: OR
15847: IFTRUE 15855
15849: PUSH
15850: LD_VAR 0 30
15854: OR
15855: IFFALSE 15873
// begin SetTag ( i , 0 ) ;
15857: LD_VAR 0 15
15861: PPUSH
15862: LD_INT 0
15864: PPUSH
15865: CALL_OW 109
// continue ;
15869: GO 15286
// end else
15871: GO 15912
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
15873: LD_VAR 0 35
15877: PPUSH
15878: LD_VAR 0 10
15882: PUSH
15883: LD_INT 1
15885: ARRAY
15886: PUSH
15887: LD_INT 1
15889: ARRAY
15890: PPUSH
15891: CALL 70948 0 2
15895: NOT
15896: IFFALSE 15912
// begin SetTag ( i , 0 ) ;
15898: LD_VAR 0 15
15902: PPUSH
15903: LD_INT 0
15905: PPUSH
15906: CALL_OW 109
// continue ;
15910: GO 15286
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
15912: LD_ADDR_VAR 0 17
15916: PUSH
15917: LD_VAR 0 2
15921: PPUSH
15922: LD_INT 57
15924: PUSH
15925: EMPTY
15926: LIST
15927: PPUSH
15928: CALL_OW 70
15932: ST_TO_ADDR
// if undone then
15933: LD_VAR 0 17
15937: IFFALSE 15959
// begin ComComplete ( i , undone [ 1 ] ) ;
15939: LD_VAR 0 15
15943: PPUSH
15944: LD_VAR 0 17
15948: PUSH
15949: LD_INT 1
15951: ARRAY
15952: PPUSH
15953: CALL 37047 0 2
// continue ;
15957: GO 15286
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_factory , b_barracks , b_warehouse ] then
15959: LD_VAR 0 10
15963: PUSH
15964: LD_INT 1
15966: ARRAY
15967: PUSH
15968: LD_INT 1
15970: ARRAY
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: LD_INT 5
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: IN
15986: IFFALSE 16083
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
15988: LD_VAR 0 10
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PUSH
15997: LD_INT 2
15999: ARRAY
16000: PPUSH
16001: LD_VAR 0 10
16005: PUSH
16006: LD_INT 1
16008: ARRAY
16009: PUSH
16010: LD_INT 3
16012: ARRAY
16013: PPUSH
16014: CALL_OW 428
16018: IFFALSE 16044
16020: PUSH
16021: LD_VAR 0 35
16025: PPUSH
16026: LD_VAR 0 10
16030: PUSH
16031: LD_INT 1
16033: ARRAY
16034: PUSH
16035: LD_INT 1
16037: ARRAY
16038: PPUSH
16039: CALL 70948 0 2
16043: AND
16044: IFFALSE 16081
// begin ComUpgrade ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
16046: LD_VAR 0 10
16050: PUSH
16051: LD_INT 1
16053: ARRAY
16054: PUSH
16055: LD_INT 2
16057: ARRAY
16058: PPUSH
16059: LD_VAR 0 10
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: PUSH
16068: LD_INT 3
16070: ARRAY
16071: PPUSH
16072: CALL_OW 428
16076: PPUSH
16077: CALL_OW 146
// end ; continue ;
16081: GO 15286
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_lab_half , b_lab_full ] then
16083: LD_VAR 0 10
16087: PUSH
16088: LD_INT 1
16090: ARRAY
16091: PUSH
16092: LD_INT 1
16094: ARRAY
16095: PUSH
16096: LD_INT 7
16098: PUSH
16099: LD_INT 8
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: IN
16106: IFFALSE 16216
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) and CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
16108: LD_VAR 0 10
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: PUSH
16117: LD_INT 2
16119: ARRAY
16120: PPUSH
16121: LD_VAR 0 10
16125: PUSH
16126: LD_INT 1
16128: ARRAY
16129: PUSH
16130: LD_INT 3
16132: ARRAY
16133: PPUSH
16134: CALL_OW 428
16138: IFFALSE 16164
16140: PUSH
16141: LD_VAR 0 35
16145: PPUSH
16146: LD_VAR 0 10
16150: PUSH
16151: LD_INT 1
16153: ARRAY
16154: PUSH
16155: LD_INT 1
16157: ARRAY
16158: PPUSH
16159: CALL 70948 0 2
16163: AND
16164: IFFALSE 16214
// begin ComUpgradeLab ( HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) , buildingsToBuild [ 1 ] [ 5 ] ) ;
16166: LD_VAR 0 10
16170: PUSH
16171: LD_INT 1
16173: ARRAY
16174: PUSH
16175: LD_INT 2
16177: ARRAY
16178: PPUSH
16179: LD_VAR 0 10
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PUSH
16188: LD_INT 3
16190: ARRAY
16191: PPUSH
16192: CALL_OW 428
16196: PPUSH
16197: LD_VAR 0 10
16201: PUSH
16202: LD_INT 1
16204: ARRAY
16205: PUSH
16206: LD_INT 5
16208: ARRAY
16209: PPUSH
16210: CALL_OW 147
// end ; continue ;
16214: GO 15286
// end ; if buildingsToBuild [ 1 ] [ 1 ] in [ b_bunker , b_turret ] then
16216: LD_VAR 0 10
16220: PUSH
16221: LD_INT 1
16223: ARRAY
16224: PUSH
16225: LD_INT 1
16227: ARRAY
16228: PUSH
16229: LD_INT 32
16231: PUSH
16232: LD_INT 33
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: IN
16239: IFFALSE 16315
// begin if HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) then
16241: LD_VAR 0 10
16245: PUSH
16246: LD_INT 1
16248: ARRAY
16249: PUSH
16250: LD_INT 2
16252: ARRAY
16253: PPUSH
16254: LD_VAR 0 10
16258: PUSH
16259: LD_INT 1
16261: ARRAY
16262: PUSH
16263: LD_INT 3
16265: ARRAY
16266: PPUSH
16267: CALL_OW 428
16271: IFFALSE 16315
// begin ComDismantle ( i , HexInfo ( buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] ) ) ;
16273: LD_VAR 0 15
16277: PPUSH
16278: LD_VAR 0 10
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: PUSH
16287: LD_INT 2
16289: ARRAY
16290: PPUSH
16291: LD_VAR 0 10
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: PUSH
16300: LD_INT 3
16302: ARRAY
16303: PPUSH
16304: CALL_OW 428
16308: PPUSH
16309: CALL_OW 167
// continue ;
16313: GO 15286
// end ; end ; if not HasTask ( i ) then
16315: LD_VAR 0 15
16319: PPUSH
16320: CALL_OW 314
16324: NOT
16325: IFFALSE 16388
// ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
16327: LD_VAR 0 15
16331: PPUSH
16332: LD_VAR 0 10
16336: PUSH
16337: LD_INT 1
16339: ARRAY
16340: PUSH
16341: LD_INT 1
16343: ARRAY
16344: PPUSH
16345: LD_VAR 0 10
16349: PUSH
16350: LD_INT 1
16352: ARRAY
16353: PUSH
16354: LD_INT 2
16356: ARRAY
16357: PPUSH
16358: LD_VAR 0 10
16362: PUSH
16363: LD_INT 1
16365: ARRAY
16366: PUSH
16367: LD_INT 3
16369: ARRAY
16370: PPUSH
16371: LD_VAR 0 10
16375: PUSH
16376: LD_INT 1
16378: ARRAY
16379: PUSH
16380: LD_INT 4
16382: ARRAY
16383: PPUSH
16384: CALL_OW 145
// end ; if tag = tCrates then
16388: LD_VAR 0 21
16392: PUSH
16393: LD_INT 2
16395: EQUAL
16396: IFFALSE 16611
// begin cr := GetListOfCratesInArea ( area ) ;
16398: LD_ADDR_VAR 0 23
16402: PUSH
16403: LD_VAR 0 2
16407: PPUSH
16408: CALL_OW 435
16412: ST_TO_ADDR
// if cratesArea then
16413: LD_VAR 0 3
16417: IFFALSE 16440
// cr := cr union GetListOfCratesInArea ( cratesArea ) ;
16419: LD_ADDR_VAR 0 23
16423: PUSH
16424: LD_VAR 0 23
16428: PUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: CALL_OW 435
16438: UNION
16439: ST_TO_ADDR
// if IsInUnit ( i ) then
16440: LD_VAR 0 15
16444: PPUSH
16445: CALL_OW 310
16449: IFFALSE 16462
// begin ComExitBuilding ( i ) ;
16451: LD_VAR 0 15
16455: PPUSH
16456: CALL_OW 122
// continue ;
16460: GO 15286
// end ; if not cr then
16462: LD_VAR 0 23
16466: NOT
16467: IFFALSE 16483
// begin SetTag ( i , 0 ) ;
16469: LD_VAR 0 15
16473: PPUSH
16474: LD_INT 0
16476: PPUSH
16477: CALL_OW 109
// continue ;
16481: GO 15286
// end ; if cr and not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) and ValidHex ( cr [ 1 ] , cr [ 2 ] ) then
16483: LD_VAR 0 23
16487: IFFALSE 16501
16489: PUSH
16490: LD_VAR 0 15
16494: PPUSH
16495: CALL_OW 314
16499: NOT
16500: AND
16501: IFFALSE 16556
16503: PUSH
16504: LD_INT 81
16506: PUSH
16507: LD_VAR 0 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 92
16518: PUSH
16519: LD_VAR 0 23
16523: PUSH
16524: LD_INT 1
16526: ARRAY
16527: PUSH
16528: LD_VAR 0 23
16532: PUSH
16533: LD_INT 2
16535: ARRAY
16536: PUSH
16537: LD_INT 12
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PPUSH
16550: CALL_OW 69
16554: NOT
16555: AND
16556: IFFALSE 16582
16558: PUSH
16559: LD_VAR 0 23
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: PPUSH
16568: LD_VAR 0 23
16572: PUSH
16573: LD_INT 2
16575: ARRAY
16576: PPUSH
16577: CALL_OW 488
16581: AND
16582: IFFALSE 16611
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
16584: LD_VAR 0 15
16588: PPUSH
16589: LD_VAR 0 23
16593: PUSH
16594: LD_INT 1
16596: ARRAY
16597: PPUSH
16598: LD_VAR 0 23
16602: PUSH
16603: LD_INT 2
16605: ARRAY
16606: PPUSH
16607: CALL_OW 117
// end ; end ;
16611: GO 15286
16613: POP
16614: POP
// end ; if vehicles then
16615: LD_VAR 0 7
16619: IFFALSE 17708
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
16621: LD_ADDR_VAR 0 7
16625: PUSH
16626: LD_VAR 0 7
16630: PPUSH
16631: LD_INT 3
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: LD_INT 34
16639: PUSH
16640: LD_INT 52
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 34
16649: PUSH
16650: LD_INT 51
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 34
16659: PUSH
16660: LD_INT 13
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 34
16669: PUSH
16670: LD_INT 12
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 50
16690: PUSH
16691: EMPTY
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 72
16702: ST_TO_ADDR
// if vehicles then
16703: LD_VAR 0 7
16707: IFFALSE 17708
// begin for i in vehicles do
16709: LD_ADDR_VAR 0 15
16713: PUSH
16714: LD_VAR 0 7
16718: PUSH
16719: FOR_IN
16720: IFFALSE 17706
// begin tag := GetTag ( i ) ;
16722: LD_ADDR_VAR 0 21
16726: PUSH
16727: LD_VAR 0 15
16731: PPUSH
16732: CALL_OW 110
16736: ST_TO_ADDR
// if not tag then
16737: LD_VAR 0 21
16741: NOT
16742: IFFALSE 16879
// begin if GetControl ( i ) = control_manual then
16744: LD_VAR 0 15
16748: PPUSH
16749: CALL_OW 263
16753: PUSH
16754: LD_INT 1
16756: EQUAL
16757: IFFALSE 16865
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
16759: LD_ADDR_VAR 0 26
16763: PUSH
16764: LD_VAR 0 20
16768: PPUSH
16769: LD_INT 120
16771: PUSH
16772: LD_INT 7
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PPUSH
16779: CALL_OW 72
16783: ST_TO_ADDR
// if not drivers then
16784: LD_VAR 0 26
16788: NOT
16789: IFFALSE 16845
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
16791: LD_ADDR_VAR 0 26
16795: PUSH
16796: LD_VAR 0 20
16800: PPUSH
16801: LD_INT 3
16803: PUSH
16804: LD_INT 120
16806: PUSH
16807: LD_INT 7
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PPUSH
16818: CALL_OW 72
16822: ST_TO_ADDR
// if drivers then
16823: LD_VAR 0 26
16827: IFFALSE 16845
// begin SetTag ( drivers [ 1 ] , tMech ) ;
16829: LD_VAR 0 26
16833: PUSH
16834: LD_INT 1
16836: ARRAY
16837: PPUSH
16838: LD_INT 7
16840: PPUSH
16841: CALL_OW 109
// end ; end ; if drivers then
16845: LD_VAR 0 26
16849: IFFALSE 16863
// SetTag ( i , tBusy ) ;
16851: LD_VAR 0 15
16855: PPUSH
16856: LD_INT 8
16858: PPUSH
16859: CALL_OW 109
// continue ;
16863: GO 16719
// end ; SetTag ( i , tBusy ) ;
16865: LD_VAR 0 15
16869: PPUSH
16870: LD_INT 8
16872: PPUSH
16873: CALL_OW 109
// end else
16877: GO 17704
// if tag = tBusy then
16879: LD_VAR 0 21
16883: PUSH
16884: LD_INT 8
16886: EQUAL
16887: IFFALSE 17169
// begin if GetLives ( i ) = 1000 then
16889: LD_VAR 0 15
16893: PPUSH
16894: CALL_OW 256
16898: PUSH
16899: LD_INT 1000
16901: EQUAL
16902: IFFALSE 17167
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
16904: LD_VAR 0 15
16908: PPUSH
16909: CALL_OW 263
16913: PUSH
16914: LD_INT 1
16916: EQUAL
16917: IFFALSE 16931
16919: PUSH
16920: LD_VAR 0 15
16924: PPUSH
16925: CALL_OW 311
16929: NOT
16930: AND
16931: IFFALSE 17108
// begin drivers := UnitFilter ( mech , [ f_tag , tMech ] ) ;
16933: LD_ADDR_VAR 0 26
16937: PUSH
16938: LD_VAR 0 20
16942: PPUSH
16943: LD_INT 120
16945: PUSH
16946: LD_INT 7
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 72
16957: ST_TO_ADDR
// if not drivers then
16958: LD_VAR 0 26
16962: NOT
16963: IFFALSE 16979
// begin SetTag ( i , 0 ) ;
16965: LD_VAR 0 15
16969: PPUSH
16970: LD_INT 0
16972: PPUSH
16973: CALL_OW 109
// continue ;
16977: GO 16719
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
16979: LD_VAR 0 26
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 310
16992: IFFALSE 17010
16994: PUSH
16995: LD_VAR 0 26
16999: PUSH
17000: LD_INT 1
17002: ARRAY
17003: PPUSH
17004: CALL 64433 0 1
17008: NOT
17009: AND
17010: IFFALSE 17025
// ComExitBuilding ( drivers [ 1 ] ) ;
17012: LD_VAR 0 26
17016: PUSH
17017: LD_INT 1
17019: ARRAY
17020: PPUSH
17021: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
17025: LD_VAR 0 7
17029: PPUSH
17030: LD_INT 120
17032: PUSH
17033: LD_INT 3
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: PPUSH
17040: CALL_OW 72
17044: IFFALSE 17062
17046: PUSH
17047: LD_VAR 0 26
17051: PUSH
17052: LD_INT 1
17054: ARRAY
17055: PPUSH
17056: CALL_OW 314
17060: NOT
17061: AND
17062: IFTRUE 17086
17064: PUSH
17065: LD_VAR 0 7
17069: PPUSH
17070: LD_INT 120
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PPUSH
17080: CALL_OW 72
17084: NOT
17085: OR
17086: IFFALSE 17106
// ComEnterUnit ( drivers [ 1 ] , i ) ;
17088: LD_VAR 0 26
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: PPUSH
17097: LD_VAR 0 15
17101: PPUSH
17102: CALL_OW 120
// continue ;
17106: GO 16719
// end ; if allowToPatrol and UnitFilter ( vehicles , [ f_tag , tPatrol ] ) < 2 then
17108: LD_VAR 0 13
17112: IFFALSE 17139
17114: PUSH
17115: LD_VAR 0 7
17119: PPUSH
17120: LD_INT 120
17122: PUSH
17123: LD_INT 15
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PPUSH
17130: CALL_OW 72
17134: PUSH
17135: LD_INT 2
17137: LESS
17138: AND
17139: IFFALSE 17155
// SetTag ( i , tPatrol ) else
17141: LD_VAR 0 15
17145: PPUSH
17146: LD_INT 15
17148: PPUSH
17149: CALL_OW 109
17153: GO 17167
// SetTag ( i , tAttack ) ;
17155: LD_VAR 0 15
17159: PPUSH
17160: LD_INT 13
17162: PPUSH
17163: CALL_OW 109
// end ; end else
17167: GO 17704
// if tag = tPatrol then
17169: LD_VAR 0 21
17173: PUSH
17174: LD_INT 15
17176: EQUAL
17177: IFFALSE 17371
// begin if GetLives ( i ) < 650 then
17179: LD_VAR 0 15
17183: PPUSH
17184: CALL_OW 256
17188: PUSH
17189: LD_INT 650
17191: LESS
17192: IFFALSE 17235
// begin SetTag ( i , tVehRepair ) ;
17194: LD_VAR 0 15
17198: PPUSH
17199: LD_INT 9
17201: PPUSH
17202: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
17206: LD_VAR 0 15
17210: PPUSH
17211: LD_VAR 0 12
17215: PUSH
17216: LD_INT 1
17218: ARRAY
17219: PPUSH
17220: LD_VAR 0 12
17224: PUSH
17225: LD_INT 2
17227: ARRAY
17228: PPUSH
17229: CALL_OW 111
// continue ;
17233: GO 16719
// end ; if GetEngine ( i ) = engine_combustion then
17235: LD_VAR 0 15
17239: PPUSH
17240: CALL_OW 262
17244: PUSH
17245: LD_INT 1
17247: EQUAL
17248: IFFALSE 17295
// if GetFuel ( i ) < 30 then
17250: LD_VAR 0 15
17254: PPUSH
17255: CALL_OW 261
17259: PUSH
17260: LD_INT 30
17262: LESS
17263: IFFALSE 17295
// begin ComMoveUnit ( i , depot ) ;
17265: LD_VAR 0 15
17269: PPUSH
17270: LD_VAR 0 35
17274: PPUSH
17275: CALL_OW 112
// AddComRefuel ( i , depot ) ;
17279: LD_VAR 0 15
17283: PPUSH
17284: LD_VAR 0 35
17288: PPUSH
17289: CALL_OW 210
// continue ;
17293: GO 16719
// end ; if GetDistUnitXY ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) > 12 and not HasTask ( i ) then
17295: LD_VAR 0 15
17299: PPUSH
17300: LD_VAR 0 13
17304: PUSH
17305: LD_INT 1
17307: ARRAY
17308: PPUSH
17309: LD_VAR 0 13
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: PPUSH
17318: CALL_OW 297
17322: PUSH
17323: LD_INT 12
17325: GREATER
17326: IFFALSE 17340
17328: PUSH
17329: LD_VAR 0 15
17333: PPUSH
17334: CALL_OW 314
17338: NOT
17339: AND
17340: IFFALSE 17369
// ComAgressiveMove ( i , allowToPatrol [ 1 ] , allowToPatrol [ 2 ] ) ;
17342: LD_VAR 0 15
17346: PPUSH
17347: LD_VAR 0 13
17351: PUSH
17352: LD_INT 1
17354: ARRAY
17355: PPUSH
17356: LD_VAR 0 13
17360: PUSH
17361: LD_INT 2
17363: ARRAY
17364: PPUSH
17365: CALL_OW 114
// end else
17369: GO 17704
// if tag = tAttack then
17371: LD_VAR 0 21
17375: PUSH
17376: LD_INT 13
17378: EQUAL
17379: IFFALSE 17561
// begin enemy := enemyInBase ;
17381: LD_ADDR_VAR 0 28
17385: PUSH
17386: LD_VAR 0 29
17390: ST_TO_ADDR
// if not enemy then
17391: LD_VAR 0 28
17395: NOT
17396: IFFALSE 17408
// enemy := enemyOuterBase ;
17398: LD_ADDR_VAR 0 28
17402: PUSH
17403: LD_VAR 0 30
17407: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
17408: LD_VAR 0 28
17412: NOT
17413: IFFALSE 17448
17415: PUSH
17416: LD_VAR 0 15
17420: PPUSH
17421: LD_VAR 0 12
17425: PUSH
17426: LD_INT 1
17428: ARRAY
17429: PPUSH
17430: LD_VAR 0 12
17434: PUSH
17435: LD_INT 2
17437: ARRAY
17438: PPUSH
17439: CALL_OW 297
17443: PUSH
17444: LD_INT 10
17446: GREATER
17447: AND
17448: IFFALSE 17479
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
17450: LD_VAR 0 15
17454: PPUSH
17455: LD_VAR 0 12
17459: PUSH
17460: LD_INT 1
17462: ARRAY
17463: PPUSH
17464: LD_VAR 0 12
17468: PUSH
17469: LD_INT 2
17471: ARRAY
17472: PPUSH
17473: CALL_OW 111
// continue ;
17477: GO 16719
// end ; if GetLives ( i ) < 650 then
17479: LD_VAR 0 15
17483: PPUSH
17484: CALL_OW 256
17488: PUSH
17489: LD_INT 650
17491: LESS
17492: IFFALSE 17535
// begin SetTag ( i , tVehRepair ) ;
17494: LD_VAR 0 15
17498: PPUSH
17499: LD_INT 9
17501: PPUSH
17502: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
17506: LD_VAR 0 15
17510: PPUSH
17511: LD_VAR 0 12
17515: PUSH
17516: LD_INT 1
17518: ARRAY
17519: PPUSH
17520: LD_VAR 0 12
17524: PUSH
17525: LD_INT 2
17527: ARRAY
17528: PPUSH
17529: CALL_OW 111
// continue ;
17533: GO 16719
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
17535: LD_VAR 0 15
17539: PPUSH
17540: LD_VAR 0 28
17544: PPUSH
17545: LD_VAR 0 15
17549: PPUSH
17550: CALL_OW 74
17554: PPUSH
17555: CALL_OW 115
// end else
17559: GO 17704
// if tag = tVehRepair then
17561: LD_VAR 0 21
17565: PUSH
17566: LD_INT 9
17568: EQUAL
17569: IFFALSE 17704
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
17571: LD_VAR 0 15
17575: PPUSH
17576: LD_VAR 0 12
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: LD_VAR 0 12
17589: PUSH
17590: LD_INT 2
17592: ARRAY
17593: PPUSH
17594: CALL_OW 297
17598: PUSH
17599: LD_INT 10
17601: GREATER
17602: IFFALSE 17633
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
17604: LD_VAR 0 15
17608: PPUSH
17609: LD_VAR 0 12
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: LD_VAR 0 12
17622: PUSH
17623: LD_INT 2
17625: ARRAY
17626: PPUSH
17627: CALL_OW 111
// continue ;
17631: GO 16719
// end ; if GetLives ( i ) = 1000 then
17633: LD_VAR 0 15
17637: PPUSH
17638: CALL_OW 256
17642: PUSH
17643: LD_INT 1000
17645: EQUAL
17646: IFFALSE 17662
// begin SetTag ( i , tBusy ) ;
17648: LD_VAR 0 15
17652: PPUSH
17653: LD_INT 8
17655: PPUSH
17656: CALL_OW 109
// continue ;
17660: GO 16719
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
17662: LD_VAR 0 15
17666: PPUSH
17667: CALL_OW 263
17671: PUSH
17672: LD_INT 1
17674: EQUAL
17675: IFFALSE 17688
17677: PUSH
17678: LD_VAR 0 15
17682: PPUSH
17683: CALL_OW 311
17687: AND
17688: IFFALSE 17704
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
17690: LD_VAR 0 15
17694: PPUSH
17695: CALL_OW 311
17699: PPUSH
17700: CALL 68567 0 1
// end ; end ;
17704: GO 16719
17706: POP
17707: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
17708: LD_ADDR_VAR 0 25
17712: PUSH
17713: LD_VAR 0 6
17717: PPUSH
17718: LD_INT 2
17720: PUSH
17721: LD_INT 25
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 25
17733: PUSH
17734: LD_INT 8
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 25
17743: PUSH
17744: LD_INT 5
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 25
17753: PUSH
17754: LD_INT 9
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 50
17770: PUSH
17771: EMPTY
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// if sol then
17783: LD_VAR 0 25
17787: IFFALSE 18613
// begin if enemyInBase then
17789: LD_VAR 0 29
17793: IFFALSE 17972
// begin for i in sol do
17795: LD_ADDR_VAR 0 15
17799: PUSH
17800: LD_VAR 0 25
17804: PUSH
17805: FOR_IN
17806: IFFALSE 17968
// begin tw := IsInUnit ( i ) ;
17808: LD_ADDR_VAR 0 22
17812: PUSH
17813: LD_VAR 0 15
17817: PPUSH
17818: CALL_OW 310
17822: ST_TO_ADDR
// if tw then
17823: LD_VAR 0 22
17827: IFFALSE 17910
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
17829: LD_VAR 0 22
17833: PUSH
17834: LD_INT 22
17836: PUSH
17837: LD_VAR 0 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 101
17848: PUSH
17849: LD_VAR 0 36
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 30
17863: PUSH
17864: LD_INT 32
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 30
17873: PUSH
17874: LD_INT 31
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: IN
17896: NOT
17897: IFFALSE 17908
// ComExitBuilding ( i ) ;
17899: LD_VAR 0 15
17903: PPUSH
17904: CALL_OW 122
// end else
17908: GO 17966
// if IsInArea ( i , area ) then
17910: LD_VAR 0 15
17914: PPUSH
17915: LD_VAR 0 2
17919: PPUSH
17920: CALL_OW 308
17924: IFFALSE 17952
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
17926: LD_VAR 0 15
17930: PPUSH
17931: LD_VAR 0 29
17935: PPUSH
17936: LD_VAR 0 15
17940: PPUSH
17941: CALL_OW 74
17945: PPUSH
17946: CALL_OW 115
17950: GO 17966
// ComMoveToArea ( i , area ) ;
17952: LD_VAR 0 15
17956: PPUSH
17957: LD_VAR 0 2
17961: PPUSH
17962: CALL_OW 113
// end ;
17966: GO 17805
17968: POP
17969: POP
// end else
17970: GO 18613
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
17972: LD_ADDR_VAR 0 31
17976: PUSH
17977: LD_VAR 0 2
17981: PPUSH
17982: LD_INT 3
17984: PUSH
17985: LD_INT 62
17987: PUSH
17988: EMPTY
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: LD_INT 3
17997: PUSH
17998: LD_INT 57
18000: PUSH
18001: EMPTY
18002: LIST
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 50
18010: PUSH
18011: EMPTY
18012: LIST
18013: PUSH
18014: LD_INT 2
18016: PUSH
18017: LD_INT 30
18019: PUSH
18020: LD_INT 32
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 30
18029: PUSH
18030: LD_INT 4
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 30
18039: PUSH
18040: LD_INT 5
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 30
18049: PUSH
18050: LD_INT 31
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 70
18074: ST_TO_ADDR
// emptyTowers := [ ] ;
18075: LD_ADDR_VAR 0 33
18079: PUSH
18080: EMPTY
18081: ST_TO_ADDR
// if empty then
18082: LD_VAR 0 31
18086: IFFALSE 18159
// emptyTowers := UnitFilter ( empty , [ [ f_not , [ f_tag , tTower ] ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
18088: LD_ADDR_VAR 0 33
18092: PUSH
18093: LD_VAR 0 31
18097: PPUSH
18098: LD_INT 3
18100: PUSH
18101: LD_INT 120
18103: PUSH
18104: LD_INT 10
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 50
18117: PUSH
18118: EMPTY
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: LD_INT 30
18126: PUSH
18127: LD_INT 32
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 30
18136: PUSH
18137: LD_INT 33
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 72
18158: ST_TO_ADDR
// for i in sol do
18159: LD_ADDR_VAR 0 15
18163: PUSH
18164: LD_VAR 0 25
18168: PUSH
18169: FOR_IN
18170: IFFALSE 18611
// begin tag := GetTag ( i ) ;
18172: LD_ADDR_VAR 0 21
18176: PUSH
18177: LD_VAR 0 15
18181: PPUSH
18182: CALL_OW 110
18186: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
18187: LD_VAR 0 15
18191: PPUSH
18192: CALL_OW 256
18196: PUSH
18197: LD_INT 1000
18199: LESS
18200: IFFALSE 18212
18202: PUSH
18203: LD_VAR 0 21
18207: PUSH
18208: LD_INT 1
18210: NONEQUAL
18211: AND
18212: IFFALSE 18264
// begin SetTag ( i , tHeal ) ;
18214: LD_VAR 0 15
18218: PPUSH
18219: LD_INT 1
18221: PPUSH
18222: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
18226: LD_VAR 0 15
18230: PPUSH
18231: LD_VAR 0 11
18235: PUSH
18236: LD_INT 1
18238: ARRAY
18239: PPUSH
18240: LD_VAR 0 11
18244: PUSH
18245: LD_INT 2
18247: ARRAY
18248: PPUSH
18249: CALL_OW 111
// AddComHold ( i ) ;
18253: LD_VAR 0 15
18257: PPUSH
18258: CALL_OW 200
// continue ;
18262: GO 18169
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18264: LD_VAR 0 15
18268: PPUSH
18269: CALL_OW 256
18273: PUSH
18274: LD_INT 1000
18276: EQUAL
18277: IFFALSE 18289
18279: PUSH
18280: LD_VAR 0 21
18284: PUSH
18285: LD_INT 1
18287: EQUAL
18288: AND
18289: IFFALSE 18305
// begin SetTag ( i , 0 ) ;
18291: LD_VAR 0 15
18295: PPUSH
18296: LD_INT 0
18298: PPUSH
18299: CALL_OW 109
// continue ;
18303: GO 18169
// end ; if HasTask ( i ) then
18305: LD_VAR 0 15
18309: PPUSH
18310: CALL_OW 314
18314: IFFALSE 18318
// continue ;
18316: GO 18169
// if not IsInUnit ( i ) and not tag and empty then
18318: LD_VAR 0 15
18322: PPUSH
18323: CALL_OW 310
18327: NOT
18328: IFFALSE 18337
18330: PUSH
18331: LD_VAR 0 21
18335: NOT
18336: AND
18337: IFFALSE 18345
18339: PUSH
18340: LD_VAR 0 31
18344: AND
18345: IFFALSE 18385
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18347: LD_VAR 0 15
18351: PPUSH
18352: LD_VAR 0 31
18356: PUSH
18357: LD_INT 1
18359: ARRAY
18360: PPUSH
18361: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
18365: LD_ADDR_VAR 0 31
18369: PUSH
18370: LD_VAR 0 31
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 3
18382: ST_TO_ADDR
// continue ;
18383: GO 18169
// end ; if IsInUnit ( i ) and not tag and emptyTowers then
18385: LD_VAR 0 15
18389: PPUSH
18390: CALL_OW 310
18394: IFFALSE 18403
18396: PUSH
18397: LD_VAR 0 21
18401: NOT
18402: AND
18403: IFFALSE 18411
18405: PUSH
18406: LD_VAR 0 33
18410: AND
18411: IFFALSE 18609
// begin if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
18413: LD_VAR 0 15
18417: PPUSH
18418: CALL_OW 310
18422: PPUSH
18423: CALL_OW 266
18427: PUSH
18428: LD_INT 32
18430: PUSH
18431: LD_INT 31
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: IN
18438: IFFALSE 18442
// continue ;
18440: GO 18169
// SetTag ( i , tTower ) ;
18442: LD_VAR 0 15
18446: PPUSH
18447: LD_INT 10
18449: PPUSH
18450: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , tTower ) ;
18454: LD_VAR 0 33
18458: PUSH
18459: LD_INT 1
18461: ARRAY
18462: PPUSH
18463: LD_INT 10
18465: PPUSH
18466: CALL_OW 109
// ComExit ( i ) ;
18470: LD_VAR 0 15
18474: PPUSH
18475: CALL 67251 0 1
// AddComEnterUnit ( i , emptyTowers [ 1 ] ) ;
18479: LD_VAR 0 15
18483: PPUSH
18484: LD_VAR 0 33
18488: PUSH
18489: LD_INT 1
18491: ARRAY
18492: PPUSH
18493: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
18497: LD_INT 35
18499: PPUSH
18500: CALL_OW 67
// if not HasTask ( i ) then
18504: LD_VAR 0 15
18508: PPUSH
18509: CALL_OW 314
18513: NOT
18514: IFFALSE 18534
// ComEnterUnit ( i , emptyTowers [ 1 ] ) ;
18516: LD_VAR 0 15
18520: PPUSH
18521: LD_VAR 0 33
18525: PUSH
18526: LD_INT 1
18528: ARRAY
18529: PPUSH
18530: CALL_OW 120
// if not IsEmpty ( emptyTowers [ 1 ] ) then
18534: LD_VAR 0 33
18538: PUSH
18539: LD_INT 1
18541: ARRAY
18542: PPUSH
18543: CALL 30899 0 1
18547: NOT
18548: IFFALSE 18552
// break ;
18550: GO 18577
// until IsInUnit ( i ) or not IsOk ( i ) ;
18552: LD_VAR 0 15
18556: PPUSH
18557: CALL_OW 310
18561: IFTRUE 18575
18563: PUSH
18564: LD_VAR 0 15
18568: PPUSH
18569: CALL_OW 302
18573: NOT
18574: OR
18575: IFFALSE 18497
// SetTag ( i , 0 ) ;
18577: LD_VAR 0 15
18581: PPUSH
18582: LD_INT 0
18584: PPUSH
18585: CALL_OW 109
// SetTag ( emptyTowers [ 1 ] , 0 ) ;
18589: LD_VAR 0 33
18593: PUSH
18594: LD_INT 1
18596: ARRAY
18597: PPUSH
18598: LD_INT 0
18600: PPUSH
18601: CALL_OW 109
// exit ;
18605: POP
18606: POP
18607: GO 18613
// end ; end ;
18609: GO 18169
18611: POP
18612: POP
// end ; end ; end ; end_of_file
18613: LD_VAR 0 14
18617: RET
// export function Action ; var i , j , c , tmp ; begin
18618: LD_INT 0
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
// InGameOn ;
18625: CALL_OW 8
// RevealFogArea ( 3 , prevMissionFogArea ) ;
18629: LD_INT 3
18631: PPUSH
18632: LD_INT 5
18634: PPUSH
18635: CALL_OW 332
// PlaceHumanInUnit ( Kurin , kirovDepot ) ;
18639: LD_EXP 33
18643: PPUSH
18644: LD_EXP 45
18648: PPUSH
18649: CALL_OW 52
// PlaceHumanInUnit ( Burlak , kirovDepot ) ;
18653: LD_EXP 29
18657: PPUSH
18658: LD_EXP 45
18662: PPUSH
18663: CALL_OW 52
// if Belkov then
18667: LD_EXP 31
18671: IFFALSE 18687
// PlaceHumanInUnit ( Belkov , kirovDepot ) ;
18673: LD_EXP 31
18677: PPUSH
18678: LD_EXP 45
18682: PPUSH
18683: CALL_OW 52
// PlaceHumanInUnit ( Popov , kirovDepot ) ;
18687: LD_EXP 35
18691: PPUSH
18692: LD_EXP 45
18696: PPUSH
18697: CALL_OW 52
// CenterNowOnXY ( 159 , 103 ) ;
18701: LD_INT 159
18703: PPUSH
18704: LD_INT 103
18706: PPUSH
18707: CALL_OW 86
// wait ( 0 0$0.3 ) ;
18711: LD_INT 10
18713: PPUSH
18714: CALL_OW 67
// if not Belkov then
18718: LD_EXP 31
18722: NOT
18723: IFFALSE 18820
// begin Say ( Kurin , D1a-Kur-1 ) ;
18725: LD_EXP 33
18729: PPUSH
18730: LD_STRING D1a-Kur-1
18732: PPUSH
18733: CALL_OW 88
// if not belkovSaved then
18737: LD_EXP 6
18741: NOT
18742: IFFALSE 18768
// begin Say ( Burlak , D1a-Bur-1 ) ;
18744: LD_EXP 29
18748: PPUSH
18749: LD_STRING D1a-Bur-1
18751: PPUSH
18752: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
18756: LD_EXP 33
18760: PPUSH
18761: LD_STRING D1a-Kur-2
18763: PPUSH
18764: CALL_OW 88
// end ; if wasSelfish then
18768: LD_EXP 4
18772: IFFALSE 18786
// Say ( Kurin , D1a-Kur-2a ) ;
18774: LD_EXP 33
18778: PPUSH
18779: LD_STRING D1a-Kur-2a
18781: PPUSH
18782: CALL_OW 88
// hasProblem := true ;
18786: LD_ADDR_EXP 5
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// Say ( Kurin , D1a-Kur-2b ) ;
18794: LD_EXP 33
18798: PPUSH
18799: LD_STRING D1a-Kur-2b
18801: PPUSH
18802: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
18806: LD_EXP 29
18810: PPUSH
18811: LD_STRING D1a-Bur-2
18813: PPUSH
18814: CALL_OW 88
// end else
18818: GO 18856
// begin Say ( Kurin , D1b-Kur-1 ) ;
18820: LD_EXP 33
18824: PPUSH
18825: LD_STRING D1b-Kur-1
18827: PPUSH
18828: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
18832: LD_EXP 31
18836: PPUSH
18837: LD_STRING D1b-Bel-1
18839: PPUSH
18840: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
18844: LD_EXP 33
18848: PPUSH
18849: LD_STRING D1b-Kur-2
18851: PPUSH
18852: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
18856: LD_EXP 33
18860: PPUSH
18861: LD_STRING D2-Kur-1
18863: PPUSH
18864: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
18868: LD_EXP 29
18872: PPUSH
18873: LD_STRING D2-Bur-1
18875: PPUSH
18876: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
18880: LD_EXP 33
18884: PPUSH
18885: LD_STRING D2-Kur-2
18887: PPUSH
18888: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
18892: LD_EXP 29
18896: PPUSH
18897: LD_STRING D2-Bur-2
18899: PPUSH
18900: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
18904: LD_EXP 33
18908: PPUSH
18909: LD_STRING D2-Kur-3
18911: PPUSH
18912: CALL_OW 88
// wait ( 0 0$0.5 ) ;
18916: LD_INT 18
18918: PPUSH
18919: CALL_OW 67
// Say ( Popov , D2-Pop-3 ) ;
18923: LD_EXP 35
18927: PPUSH
18928: LD_STRING D2-Pop-3
18930: PPUSH
18931: CALL_OW 88
// Say ( Kurin , D2-Kur-4 ) ;
18935: LD_EXP 33
18939: PPUSH
18940: LD_STRING D2-Kur-4
18942: PPUSH
18943: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
18947: LD_EXP 29
18951: PPUSH
18952: LD_STRING D2-Bur-4
18954: PPUSH
18955: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
18959: LD_EXP 33
18963: PPUSH
18964: LD_STRING D2-Kur-5
18966: PPUSH
18967: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
18971: LD_EXP 29
18975: PPUSH
18976: LD_STRING D2-Bur-5
18978: PPUSH
18979: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
18983: LD_EXP 33
18987: PPUSH
18988: LD_STRING D2-Kur-6
18990: PPUSH
18991: CALL_OW 88
// beriaBaseSquad := CharacterSelection ( 1 , [ 7 , 6 , 6 , 5 ] [ Difficulty ] , [ 9 , 8 , 8 , 7 ] [ Difficulty ] , [ sel_change_class , Burlak , sel_changeable , sel_change_class ] ^ Belkov ^ Gnyevko ^ Kirilenkova ^ Kovalyuk ^ beriaTeam ^ burlakTeam ^ [ sel_not_hired , sel_not_changeable , sel_dont_change_class , Kurin , Popov ] ^ [ sel_changeable , sel_change_class ] ^ kirovTeam , [ [ class_engineer , 1 ] , [ class_scientistic , 1 ] , [ class_mechanic , 0 ] , [ class_soldier , 2 ] ] ) ;
18995: LD_ADDR_EXP 39
18999: PUSH
19000: LD_STRING 1
19002: PPUSH
19003: LD_INT 7
19005: PUSH
19006: LD_INT 6
19008: PUSH
19009: LD_INT 6
19011: PUSH
19012: LD_INT 5
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: PUSH
19021: LD_OWVAR 67
19025: ARRAY
19026: PPUSH
19027: LD_INT 9
19029: PUSH
19030: LD_INT 8
19032: PUSH
19033: LD_INT 8
19035: PUSH
19036: LD_INT 7
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: PUSH
19045: LD_OWVAR 67
19049: ARRAY
19050: PPUSH
19051: LD_INT -5
19053: PUSH
19054: LD_EXP 29
19058: PUSH
19059: LD_INT -3
19061: PUSH
19062: LD_INT -5
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: PUSH
19071: LD_EXP 31
19075: ADD
19076: PUSH
19077: LD_EXP 30
19081: ADD
19082: PUSH
19083: LD_EXP 32
19087: ADD
19088: PUSH
19089: LD_EXP 34
19093: ADD
19094: PUSH
19095: LD_EXP 43
19099: ADD
19100: PUSH
19101: LD_EXP 41
19105: ADD
19106: PUSH
19107: LD_INT -2
19109: PUSH
19110: LD_INT -4
19112: PUSH
19113: LD_INT -6
19115: PUSH
19116: LD_EXP 33
19120: PUSH
19121: LD_EXP 35
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: ADD
19133: PUSH
19134: LD_INT -3
19136: PUSH
19137: LD_INT -5
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: ADD
19144: PUSH
19145: LD_EXP 42
19149: ADD
19150: PPUSH
19151: LD_INT 2
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 4
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 3
19173: PUSH
19174: LD_INT 0
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: PPUSH
19197: CALL_OW 42
19201: ST_TO_ADDR
// stop_talking := true ;
19202: LD_ADDR_OWVAR 56
19206: PUSH
19207: LD_INT 1
19209: ST_TO_ADDR
// ComExitBuilding ( Burlak ) ;
19210: LD_EXP 29
19214: PPUSH
19215: CALL_OW 122
// AddComMoveXY ( Burlak , 123 , 98 ) ;
19219: LD_EXP 29
19223: PPUSH
19224: LD_INT 123
19226: PPUSH
19227: LD_INT 98
19229: PPUSH
19230: CALL_OW 171
// for i in beriaBaseSquad do
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_EXP 39
19243: PUSH
19244: FOR_IN
19245: IFFALSE 19320
// begin SetSide ( i , 3 ) ;
19247: LD_VAR 0 2
19251: PPUSH
19252: LD_INT 3
19254: PPUSH
19255: CALL_OW 235
// if not IsPlaced ( i ) then
19259: LD_VAR 0 2
19263: PPUSH
19264: CALL_OW 305
19268: NOT
19269: IFFALSE 19294
// PlaceUnitXYR ( i , 112 , 98 , 3 , false ) else
19271: LD_VAR 0 2
19275: PPUSH
19276: LD_INT 112
19278: PPUSH
19279: LD_INT 98
19281: PPUSH
19282: LD_INT 3
19284: PPUSH
19285: LD_INT 0
19287: PPUSH
19288: CALL_OW 50
19292: GO 19318
// begin ComExit ( i ) ;
19294: LD_VAR 0 2
19298: PPUSH
19299: CALL 67251 0 1
// AddComMoveXY ( i , 123 , 98 ) ;
19303: LD_VAR 0 2
19307: PPUSH
19308: LD_INT 123
19310: PPUSH
19311: LD_INT 98
19313: PPUSH
19314: CALL_OW 171
// end ; end ;
19318: GO 19244
19320: POP
19321: POP
// stop_talking := false ;
19322: LD_ADDR_OWVAR 56
19326: PUSH
19327: LD_INT 0
19329: ST_TO_ADDR
// wait ( 0 0$2 ) ;
19330: LD_INT 70
19332: PPUSH
19333: CALL_OW 67
// CenterOnXY ( 110 , 97 ) ;
19337: LD_INT 110
19339: PPUSH
19340: LD_INT 97
19342: PPUSH
19343: CALL_OW 84
// if Belkov and not Belkov in beriaBaseSquad then
19347: LD_EXP 31
19351: IFFALSE 19366
19353: PUSH
19354: LD_EXP 31
19358: PUSH
19359: LD_EXP 39
19363: IN
19364: NOT
19365: AND
19366: IFFALSE 19388
// popovTeam := Join ( popovTeam , Belkov ) ;
19368: LD_ADDR_EXP 44
19372: PUSH
19373: LD_EXP 44
19377: PPUSH
19378: LD_EXP 31
19382: PPUSH
19383: CALL 66853 0 2
19387: ST_TO_ADDR
// if Gnyevko and not Gnyevko in beriaBaseSquad then
19388: LD_EXP 30
19392: IFFALSE 19407
19394: PUSH
19395: LD_EXP 30
19399: PUSH
19400: LD_EXP 39
19404: IN
19405: NOT
19406: AND
19407: IFFALSE 19429
// popovTeam := Join ( popovTeam , Gnyevko ) ;
19409: LD_ADDR_EXP 44
19413: PUSH
19414: LD_EXP 44
19418: PPUSH
19419: LD_EXP 30
19423: PPUSH
19424: CALL 66853 0 2
19428: ST_TO_ADDR
// if Kirilenkova and not Kirilenkova in beriaBaseSquad then
19429: LD_EXP 32
19433: IFFALSE 19448
19435: PUSH
19436: LD_EXP 32
19440: PUSH
19441: LD_EXP 39
19445: IN
19446: NOT
19447: AND
19448: IFFALSE 19470
// popovTeam := Join ( popovTeam , Kirilenkova ) ;
19450: LD_ADDR_EXP 44
19454: PUSH
19455: LD_EXP 44
19459: PPUSH
19460: LD_EXP 32
19464: PPUSH
19465: CALL 66853 0 2
19469: ST_TO_ADDR
// if Kovalyuk and not Kovalyuk in beriaBaseSquad then
19470: LD_EXP 34
19474: IFFALSE 19489
19476: PUSH
19477: LD_EXP 34
19481: PUSH
19482: LD_EXP 39
19486: IN
19487: NOT
19488: AND
19489: IFFALSE 19511
// popovTeam := Join ( popovTeam , Kovalyuk ) ;
19491: LD_ADDR_EXP 44
19495: PUSH
19496: LD_EXP 44
19500: PPUSH
19501: LD_EXP 34
19505: PPUSH
19506: CALL 66853 0 2
19510: ST_TO_ADDR
// for i in beriaTeam union burlakTeam do
19511: LD_ADDR_VAR 0 2
19515: PUSH
19516: LD_EXP 43
19520: PUSH
19521: LD_EXP 41
19525: UNION
19526: PUSH
19527: FOR_IN
19528: IFFALSE 19565
// if not i in beriaBaseSquad then
19530: LD_VAR 0 2
19534: PUSH
19535: LD_EXP 39
19539: IN
19540: NOT
19541: IFFALSE 19563
// popovTeam := Join ( popovTeam , i ) ;
19543: LD_ADDR_EXP 44
19547: PUSH
19548: LD_EXP 44
19552: PPUSH
19553: LD_VAR 0 2
19557: PPUSH
19558: CALL 66853 0 2
19562: ST_TO_ADDR
19563: GO 19527
19565: POP
19566: POP
// if popovTeam < 3 then
19567: LD_EXP 44
19571: PUSH
19572: LD_INT 3
19574: LESS
19575: IFFALSE 19653
// for i := Count ( popovTeam ) to 3 do
19577: LD_ADDR_VAR 0 2
19581: PUSH
19582: DOUBLE
19583: LD_EXP 44
19587: PPUSH
19588: CALL 30877 0 1
19592: DEC
19593: ST_TO_ADDR
19594: LD_INT 3
19596: PUSH
19597: FOR_TO
19598: IFFALSE 19651
// begin uc_side := 6 ;
19600: LD_ADDR_OWVAR 20
19604: PUSH
19605: LD_INT 6
19607: ST_TO_ADDR
// uc_nation := nation_russian ;
19608: LD_ADDR_OWVAR 21
19612: PUSH
19613: LD_INT 3
19615: ST_TO_ADDR
// PrepareHuman ( false , class_soldier , 2 ) ;
19616: LD_INT 0
19618: PPUSH
19619: LD_INT 1
19621: PPUSH
19622: LD_INT 2
19624: PPUSH
19625: CALL_OW 380
// popovTeam := Join ( popovTeam , CreateHuman ) ;
19629: LD_ADDR_EXP 44
19633: PUSH
19634: LD_EXP 44
19638: PPUSH
19639: CALL_OW 44
19643: PPUSH
19644: CALL 66853 0 2
19648: ST_TO_ADDR
// end ;
19649: GO 19597
19651: POP
19652: POP
// if not UnitFilter ( popovTeam , [ f_class , 4 ] ) then
19653: LD_EXP 44
19657: PPUSH
19658: LD_INT 25
19660: PUSH
19661: LD_INT 4
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PPUSH
19668: CALL_OW 72
19672: NOT
19673: IFFALSE 19691
// SetClass ( popovTeam [ 1 ] , 4 ) ;
19675: LD_EXP 44
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: LD_INT 4
19686: PPUSH
19687: CALL_OW 336
// for i in popovTeam do
19691: LD_ADDR_VAR 0 2
19695: PUSH
19696: LD_EXP 44
19700: PUSH
19701: FOR_IN
19702: IFFALSE 19805
// begin if not GetClass ( i ) in [ 1 , 4 ] then
19704: LD_VAR 0 2
19708: PPUSH
19709: CALL_OW 257
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: LD_INT 4
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: IN
19724: NOT
19725: IFFALSE 19739
// SetClass ( i , class_soldier ) ;
19727: LD_VAR 0 2
19731: PPUSH
19732: LD_INT 1
19734: PPUSH
19735: CALL_OW 336
// if not IsPlaced ( i ) then
19739: LD_VAR 0 2
19743: PPUSH
19744: CALL_OW 305
19748: NOT
19749: IFFALSE 19774
// PlaceUnitXYR ( i , 161 , 107 , 3 , false ) else
19751: LD_VAR 0 2
19755: PPUSH
19756: LD_INT 161
19758: PPUSH
19759: LD_INT 107
19761: PPUSH
19762: LD_INT 3
19764: PPUSH
19765: LD_INT 0
19767: PPUSH
19768: CALL_OW 50
19772: GO 19794
// if IsInUnit ( i ) then
19774: LD_VAR 0 2
19778: PPUSH
19779: CALL_OW 310
19783: IFFALSE 19794
// ComExitBuilding ( i ) ;
19785: LD_VAR 0 2
19789: PPUSH
19790: CALL_OW 122
// AddComHold ( i ) ;
19794: LD_VAR 0 2
19798: PPUSH
19799: CALL_OW 200
// end ;
19803: GO 19701
19805: POP
19806: POP
// kirovBaseSquad := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff ( [ Kurin , Popov ] ^ popovTeam ) ;
19807: LD_ADDR_EXP 38
19811: PUSH
19812: LD_INT 22
19814: PUSH
19815: LD_INT 6
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 21
19824: PUSH
19825: LD_INT 1
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PPUSH
19836: CALL_OW 69
19840: PUSH
19841: LD_EXP 33
19845: PUSH
19846: LD_EXP 35
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_EXP 44
19859: ADD
19860: DIFF
19861: ST_TO_ADDR
// for i in kirovBaseSquad do
19862: LD_ADDR_VAR 0 2
19866: PUSH
19867: LD_EXP 38
19871: PUSH
19872: FOR_IN
19873: IFFALSE 20004
// begin tmp := IsInUnit ( i ) ;
19875: LD_ADDR_VAR 0 5
19879: PUSH
19880: LD_VAR 0 2
19884: PPUSH
19885: CALL_OW 310
19889: ST_TO_ADDR
// if not tmp then
19890: LD_VAR 0 5
19894: NOT
19895: IFFALSE 19899
// continue ;
19897: GO 19872
// case GetBType ( tmp ) of b_workshop :
19899: LD_VAR 0 5
19903: PPUSH
19904: CALL_OW 266
19908: PUSH
19909: LD_INT 2
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 19932
19917: POP
// SetClass ( i , class_mechanic ) ; b_lab :
19918: LD_VAR 0 2
19922: PPUSH
19923: LD_INT 3
19925: PPUSH
19926: CALL_OW 336
19930: GO 20002
19932: LD_INT 6
19934: DOUBLE
19935: EQUAL
19936: IFTRUE 19940
19938: GO 19955
19940: POP
// SetClass ( i , class_scientistic ) ; b_armoury :
19941: LD_VAR 0 2
19945: PPUSH
19946: LD_INT 4
19948: PPUSH
19949: CALL_OW 336
19953: GO 20002
19955: LD_INT 4
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 19978
19963: POP
// SetClass ( i , class_soldier ) ; b_depot :
19964: LD_VAR 0 2
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL_OW 336
19976: GO 20002
19978: LD_INT 0
19980: DOUBLE
19981: EQUAL
19982: IFTRUE 19986
19984: GO 20001
19986: POP
// SetClass ( i , class_engineer ) ; end ;
19987: LD_VAR 0 2
19991: PPUSH
19992: LD_INT 2
19994: PPUSH
19995: CALL_OW 336
19999: GO 20002
20001: POP
// end ;
20002: GO 19872
20004: POP
20005: POP
// for c := 1 to 4 do
20006: LD_ADDR_VAR 0 4
20010: PUSH
20011: DOUBLE
20012: LD_INT 1
20014: DEC
20015: ST_TO_ADDR
20016: LD_INT 4
20018: PUSH
20019: FOR_TO
20020: IFFALSE 20111
// if UnitFilter ( kirovBaseSquad , [ f_class , c ] ) < 2 then
20022: LD_EXP 38
20026: PPUSH
20027: LD_INT 25
20029: PUSH
20030: LD_VAR 0 4
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PPUSH
20039: CALL_OW 72
20043: PUSH
20044: LD_INT 2
20046: LESS
20047: IFFALSE 20109
// begin tmp := SortBySkill ( kirovBaseSquad , c ) ;
20049: LD_ADDR_VAR 0 5
20053: PUSH
20054: LD_EXP 38
20058: PPUSH
20059: LD_VAR 0 4
20063: PPUSH
20064: CALL 65333 0 2
20068: ST_TO_ADDR
// for i := 1 to 2 do
20069: LD_ADDR_VAR 0 2
20073: PUSH
20074: DOUBLE
20075: LD_INT 1
20077: DEC
20078: ST_TO_ADDR
20079: LD_INT 2
20081: PUSH
20082: FOR_TO
20083: IFFALSE 20107
// SetClass ( tmp [ i ] , c ) ;
20085: LD_VAR 0 5
20089: PUSH
20090: LD_VAR 0 2
20094: ARRAY
20095: PPUSH
20096: LD_VAR 0 4
20100: PPUSH
20101: CALL_OW 336
20105: GO 20082
20107: POP
20108: POP
// end ;
20109: GO 20019
20111: POP
20112: POP
// wait ( 0 0$3 ) ;
20113: LD_INT 105
20115: PPUSH
20116: CALL_OW 67
// InGameOff ;
20120: CALL_OW 9
// gameStart := true ;
20124: LD_ADDR_EXP 7
20128: PUSH
20129: LD_INT 1
20131: ST_TO_ADDR
// Query ( QBriefing ) ;
20132: LD_STRING QBriefing
20134: PPUSH
20135: CALL_OW 97
// ChangeMissionObjectives ( M1 ) ;
20139: LD_STRING M1
20141: PPUSH
20142: CALL_OW 337
// SaveForQuickRestart ;
20146: CALL_OW 22
// wait ( 0 0$5 ) ;
20150: LD_INT 175
20152: PPUSH
20153: CALL_OW 67
// ComExitBuilding ( Popov ) ;
20157: LD_EXP 35
20161: PPUSH
20162: CALL_OW 122
// AddComMoveXY ( Popov , 142 , 64 ) ;
20166: LD_EXP 35
20170: PPUSH
20171: LD_INT 142
20173: PPUSH
20174: LD_INT 64
20176: PPUSH
20177: CALL_OW 171
// AddComMoveXY ( popovTeam , 142 , 64 ) ;
20181: LD_EXP 44
20185: PPUSH
20186: LD_INT 142
20188: PPUSH
20189: LD_INT 64
20191: PPUSH
20192: CALL_OW 171
// AddComFree ( popovTeam ) ;
20196: LD_EXP 44
20200: PPUSH
20201: CALL_OW 199
// tmp := UnitFilter ( popovTeam , [ f_class , class_soldier ] ) ;
20205: LD_ADDR_VAR 0 5
20209: PUSH
20210: LD_EXP 44
20214: PPUSH
20215: LD_INT 25
20217: PUSH
20218: LD_INT 1
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 72
20229: ST_TO_ADDR
// if tmp then
20230: LD_VAR 0 5
20234: IFFALSE 20333
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_inarea , easternHillArea ] , [ f_btype , b_breastwork ] ] ) do
20236: LD_ADDR_VAR 0 2
20240: PUSH
20241: LD_INT 22
20243: PUSH
20244: LD_INT 6
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 95
20253: PUSH
20254: LD_INT 3
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 30
20263: PUSH
20264: LD_INT 31
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PPUSH
20276: CALL_OW 69
20280: PUSH
20281: FOR_IN
20282: IFFALSE 20331
// begin if not tmp then
20284: LD_VAR 0 5
20288: NOT
20289: IFFALSE 20293
// break ;
20291: GO 20331
// ComEnterUnit ( tmp [ 1 ] , i ) ;
20293: LD_VAR 0 5
20297: PUSH
20298: LD_INT 1
20300: ARRAY
20301: PPUSH
20302: LD_VAR 0 2
20306: PPUSH
20307: CALL_OW 120
// tmp := Delete ( tmp , 1 ) ;
20311: LD_ADDR_VAR 0 5
20315: PUSH
20316: LD_VAR 0 5
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 3
20328: ST_TO_ADDR
// end ;
20329: GO 20281
20331: POP
20332: POP
// wait ( 1 1$00 ) ;
20333: LD_INT 2100
20335: PPUSH
20336: CALL_OW 67
// if not UnitFilter ( americanReinforcementsTroops , [ f_ok ] ) then
20340: LD_EXP 58
20344: PPUSH
20345: LD_INT 50
20347: PUSH
20348: EMPTY
20349: LIST
20350: PPUSH
20351: CALL_OW 72
20355: NOT
20356: IFFALSE 20360
// exit ;
20358: GO 20522
// ComMoveXY ( americanReinforcementsTroops , 27 , 36 ) ;
20360: LD_EXP 58
20364: PPUSH
20365: LD_INT 27
20367: PPUSH
20368: LD_INT 36
20370: PPUSH
20371: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20375: LD_INT 35
20377: PPUSH
20378: CALL_OW 67
// if not UnitFilter ( americanReinforcementsTroops , [ f_ok ] ) then
20382: LD_EXP 58
20386: PPUSH
20387: LD_INT 50
20389: PUSH
20390: EMPTY
20391: LIST
20392: PPUSH
20393: CALL_OW 72
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20522
// until IsInArea ( americanReinforcementsTroops [ 1 ] , omicronBaseArea ) ;
20402: LD_EXP 58
20406: PUSH
20407: LD_INT 1
20409: ARRAY
20410: PPUSH
20411: LD_INT 18
20413: PPUSH
20414: CALL_OW 308
20418: IFFALSE 20375
// SetSide ( americanReinforcementsTroops [ 1 ] , 1 ) ;
20420: LD_EXP 58
20424: PUSH
20425: LD_INT 1
20427: ARRAY
20428: PPUSH
20429: LD_INT 1
20431: PPUSH
20432: CALL_OW 235
// omicronTroops := omicronTroops union americanReinforcementsTroops [ 1 ] ;
20436: LD_ADDR_EXP 57
20440: PUSH
20441: LD_EXP 57
20445: PUSH
20446: LD_EXP 58
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: UNION
20455: ST_TO_ADDR
// if HexInfo ( 30 , 53 ) and UnitsInside ( HexInfo ( 30 , 53 ) ) = 0 then
20456: LD_INT 30
20458: PPUSH
20459: LD_INT 53
20461: PPUSH
20462: CALL_OW 428
20466: IFFALSE 20489
20468: PUSH
20469: LD_INT 30
20471: PPUSH
20472: LD_INT 53
20474: PPUSH
20475: CALL_OW 428
20479: PPUSH
20480: CALL_OW 313
20484: PUSH
20485: LD_INT 0
20487: EQUAL
20488: AND
20489: IFFALSE 20515
// ComEnterUnit ( americanReinforcementsTroops [ 1 ] , HexInfo ( 30 , 53 ) ) ;
20491: LD_EXP 58
20495: PUSH
20496: LD_INT 1
20498: ARRAY
20499: PPUSH
20500: LD_INT 30
20502: PPUSH
20503: LD_INT 53
20505: PPUSH
20506: CALL_OW 428
20510: PPUSH
20511: CALL_OW 120
// americanReinforcementsTroops := [ ] ;
20515: LD_ADDR_EXP 58
20519: PUSH
20520: EMPTY
20521: ST_TO_ADDR
// end ;
20522: LD_VAR 0 1
20526: RET
// every 0 0$2 trigger allianceAttacked do
20527: LD_EXP 9
20531: IFFALSE 20570
20533: GO 20535
20535: DISABLE
// begin DialogueOn ;
20536: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
20540: LD_EXP 33
20544: PPUSH
20545: LD_STRING DArestKur
20547: PPUSH
20548: CALL_OW 88
// dwait ( 0 0$1 ) ;
20552: LD_INT 35
20554: PPUSH
20555: CALL_OW 68
// YouLost ( SelfAttack ) ;
20559: LD_STRING SelfAttack
20561: PPUSH
20562: CALL_OW 104
// DialogueOff ;
20566: CALL_OW 7
// end ;
20570: END
// every 0 0$2 trigger youTookCratesFromKirov do
20571: LD_EXP 17
20575: IFFALSE 20638
20577: GO 20579
20579: DISABLE
// begin Query ( QTookCrates ) ;
20580: LD_STRING QTookCrates
20582: PPUSH
20583: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
20587: LD_INT 35
20589: PPUSH
20590: CALL_OW 67
// until youTookCratesFromKirov >= 3 ;
20594: LD_EXP 17
20598: PUSH
20599: LD_INT 3
20601: GREATEREQUAL
20602: IFFALSE 20587
// DialogueOn ;
20604: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
20608: LD_EXP 33
20612: PPUSH
20613: LD_STRING DArestKur
20615: PPUSH
20616: CALL_OW 88
// dwait ( 0 0$1 ) ;
20620: LD_INT 35
20622: PPUSH
20623: CALL_OW 68
// YouLost ( TookCrates ) ;
20627: LD_STRING TookCrates
20629: PPUSH
20630: CALL_OW 104
// DialogueOff ;
20634: CALL_OW 7
// end ;
20638: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
20639: LD_INT 78
20641: PPUSH
20642: LD_INT 112
20644: PPUSH
20645: LD_INT 3
20647: PPUSH
20648: CALL_OW 440
20652: IFFALSE 20711
20654: GO 20656
20656: DISABLE
// begin foundOil := true ;
20657: LD_ADDR_EXP 10
20661: PUSH
20662: LD_INT 1
20664: ST_TO_ADDR
// if not IsOk ( Burlak ) then
20665: LD_EXP 29
20669: PPUSH
20670: CALL_OW 302
20674: NOT
20675: IFFALSE 20679
// exit ;
20677: GO 20711
// DialogueOn ;
20679: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
20683: LD_EXP 29
20687: PPUSH
20688: LD_STRING D2a-Bur-1
20690: PPUSH
20691: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
20695: LD_EXP 33
20699: PPUSH
20700: LD_STRING D2a-Kur-1
20702: PPUSH
20703: CALL_OW 94
// DialogueOff ;
20707: CALL_OW 7
// end ;
20711: END
// every 0 0$1 trigger hasKagan and hasOilTower do
20712: LD_EXP 12
20716: IFFALSE 20724
20718: PUSH
20719: LD_EXP 14
20723: AND
20724: IFFALSE 20736
20726: GO 20728
20728: DISABLE
// begin ChangeMissionObjectives ( M2 ) ;
20729: LD_STRING M2
20731: PPUSH
20732: CALL_OW 337
// end ;
20736: END
// every 0 0$1 trigger ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_not , [ f_constructed ] ] ] ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] , [ f_not , [ f_constructed ] ] ] ) ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) and IsOk ( Burlak ) do var sci ;
20737: LD_INT 22
20739: PUSH
20740: LD_INT 3
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 30
20749: PUSH
20750: LD_INT 3
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 3
20759: PUSH
20760: LD_INT 57
20762: PUSH
20763: EMPTY
20764: LIST
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: IFTRUE 20825
20781: PUSH
20782: LD_INT 22
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 7
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 3
20804: PUSH
20805: LD_INT 57
20807: PUSH
20808: EMPTY
20809: LIST
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 69
20824: OR
20825: IFFALSE 20858
20827: PUSH
20828: LD_INT 22
20830: PUSH
20831: LD_INT 3
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 30
20840: PUSH
20841: LD_INT 26
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PPUSH
20852: CALL_OW 69
20856: NOT
20857: AND
20858: IFFALSE 20871
20860: PUSH
20861: LD_EXP 29
20865: PPUSH
20866: CALL_OW 302
20870: AND
20871: IFFALSE 21065
20873: GO 20875
20875: DISABLE
20876: LD_INT 0
20878: PPUSH
// begin DialogueOn ;
20879: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
20883: LD_EXP 29
20887: PPUSH
20888: LD_STRING D3aa-Bur-1
20890: PPUSH
20891: CALL_OW 88
// if hasScholtze and IsOk ( Scholtze ) then
20895: LD_EXP 11
20899: IFFALSE 20912
20901: PUSH
20902: LD_EXP 36
20906: PPUSH
20907: CALL_OW 302
20911: AND
20912: IFFALSE 20938
// begin sci := Scholtze ;
20914: LD_ADDR_VAR 0 1
20918: PUSH
20919: LD_EXP 36
20923: ST_TO_ADDR
// Say ( Scholtze , D3aa-Sch-1 ) ;
20924: LD_EXP 36
20928: PPUSH
20929: LD_STRING D3aa-Sch-1
20931: PPUSH
20932: CALL_OW 88
// end else
20936: GO 21043
// begin sci := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
20938: LD_ADDR_VAR 0 1
20942: PUSH
20943: LD_INT 22
20945: PUSH
20946: LD_INT 3
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 50
20955: PUSH
20956: EMPTY
20957: LIST
20958: PUSH
20959: LD_INT 25
20961: PUSH
20962: LD_INT 4
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 26
20971: PUSH
20972: LD_INT 1
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: PPUSH
20985: CALL_OW 69
20989: PUSH
20990: LD_EXP 48
20994: DIFF
20995: ST_TO_ADDR
// if sci then
20996: LD_VAR 0 1
21000: IFFALSE 21043
// begin sci := sci [ rand ( 1 , Count ( sci ) ) ] ;
21002: LD_ADDR_VAR 0 1
21006: PUSH
21007: LD_VAR 0 1
21011: PUSH
21012: LD_INT 1
21014: PPUSH
21015: LD_VAR 0 1
21019: PPUSH
21020: CALL 30877 0 1
21024: PPUSH
21025: CALL_OW 12
21029: ARRAY
21030: ST_TO_ADDR
// Say ( sci , D3aa-Sci1-1 ) ;
21031: LD_VAR 0 1
21035: PPUSH
21036: LD_STRING D3aa-Sci1-1
21038: PPUSH
21039: CALL_OW 88
// end ; end ; if sci then
21043: LD_VAR 0 1
21047: IFFALSE 21061
// Say ( Burlak , D3aa-Bur-2 ) ;
21049: LD_EXP 29
21053: PPUSH
21054: LD_STRING D3aa-Bur-2
21056: PPUSH
21057: CALL_OW 88
// DialogueOff ;
21061: CALL_OW 7
// end ;
21065: PPOPN 1
21067: END
// every 0 0$1 trigger UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) and IsOk ( Burlak ) and not allowedToAttackOmicron do var sol , tmp ;
21068: LD_EXP 58
21072: PPUSH
21073: LD_INT 101
21075: PUSH
21076: LD_INT 3
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 72
21087: IFFALSE 21100
21089: PUSH
21090: LD_EXP 29
21094: PPUSH
21095: CALL_OW 302
21099: AND
21100: IFFALSE 21109
21102: PUSH
21103: LD_EXP 13
21107: NOT
21108: AND
21109: IFFALSE 21423
21111: GO 21113
21113: DISABLE
21114: LD_INT 0
21116: PPUSH
21117: PPUSH
// begin tmp := UnitFilter ( americanReinforcementsTroops , [ f_see , 3 ] ) ;
21118: LD_ADDR_VAR 0 2
21122: PUSH
21123: LD_EXP 58
21127: PPUSH
21128: LD_INT 101
21130: PUSH
21131: LD_INT 3
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 72
21142: ST_TO_ADDR
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
21143: LD_ADDR_VAR 0 1
21147: PUSH
21148: LD_INT 22
21150: PUSH
21151: LD_INT 3
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 50
21160: PUSH
21161: EMPTY
21162: LIST
21163: PUSH
21164: LD_INT 26
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: PPUSH
21179: CALL_OW 69
21183: PUSH
21184: LD_EXP 48
21188: DIFF
21189: ST_TO_ADDR
// if not sol then
21190: LD_VAR 0 1
21194: NOT
21195: IFFALSE 21199
// exit ;
21197: GO 21423
// sol := sol [ rand ( 1 , Count ( sol ) ) ] ;
21199: LD_ADDR_VAR 0 1
21203: PUSH
21204: LD_VAR 0 1
21208: PUSH
21209: LD_INT 1
21211: PPUSH
21212: LD_VAR 0 1
21216: PPUSH
21217: CALL 30877 0 1
21221: PPUSH
21222: CALL_OW 12
21226: ARRAY
21227: ST_TO_ADDR
// DialogueOn ;
21228: CALL_OW 6
// CenterNowOnUnits ( NearestUnitToUnit ( tmp , Burlak ) ) ;
21232: LD_VAR 0 2
21236: PPUSH
21237: LD_EXP 29
21241: PPUSH
21242: CALL_OW 74
21246: PPUSH
21247: CALL_OW 87
// if not hasKagan then
21251: LD_EXP 12
21255: NOT
21256: IFFALSE 21284
// begin Say ( sol , D3a-RSol1-1 ) ;
21258: LD_VAR 0 1
21262: PPUSH
21263: LD_STRING D3a-RSol1-1
21265: PPUSH
21266: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
21270: LD_EXP 29
21274: PPUSH
21275: LD_STRING D3a-Bur-1
21277: PPUSH
21278: CALL_OW 88
// end else
21282: GO 21419
// begin Say ( sol , [ D3a-RSol1-1 , D3b-RSol1-1 ] [ sol mod 2 + 1 ] ) ;
21284: LD_VAR 0 1
21288: PPUSH
21289: LD_STRING D3a-RSol1-1
21291: PUSH
21292: LD_STRING D3b-RSol1-1
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_VAR 0 1
21303: PUSH
21304: LD_INT 2
21306: MOD
21307: PUSH
21308: LD_INT 1
21310: PLUS
21311: ARRAY
21312: PPUSH
21313: CALL_OW 88
// if IsOk ( Gnyevko ) and Gnyevko in beriaBaseSquad then
21317: LD_EXP 30
21321: PPUSH
21322: CALL_OW 302
21326: IFFALSE 21340
21328: PUSH
21329: LD_EXP 30
21333: PUSH
21334: LD_EXP 39
21338: IN
21339: AND
21340: IFFALSE 21356
// Say ( Gnyevko , D3b-Gny-1 ) else
21342: LD_EXP 30
21346: PPUSH
21347: LD_STRING D3b-Gny-1
21349: PPUSH
21350: CALL_OW 88
21354: GO 21407
// if IsOk ( Kovalyuk ) and Kovalyuk in beriaBaseSquad then
21356: LD_EXP 34
21360: PPUSH
21361: CALL_OW 302
21365: IFFALSE 21379
21367: PUSH
21368: LD_EXP 34
21372: PUSH
21373: LD_EXP 39
21377: IN
21378: AND
21379: IFFALSE 21395
// Say ( Kovalyuk , D3b-Kov-1 ) else
21381: LD_EXP 34
21385: PPUSH
21386: LD_STRING D3b-Kov-1
21388: PPUSH
21389: CALL_OW 88
21393: GO 21407
// Say ( sol , D3b-RSol1-2 ) ;
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_STRING D3b-RSol1-2
21402: PPUSH
21403: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
21407: LD_EXP 29
21411: PPUSH
21412: LD_STRING D3b-Bur-1
21414: PPUSH
21415: CALL_OW 88
// end ; DialogueOff ;
21419: CALL_OW 7
// end ;
21423: PPOPN 2
21425: END
// every 0 0$2 trigger foundOil do var fake , x , y , scholtzeArea , Dickens , DickensFriend ;
21426: LD_EXP 10
21430: IFFALSE 22567
21432: GO 21434
21434: DISABLE
21435: LD_INT 0
21437: PPUSH
21438: PPUSH
21439: PPUSH
21440: PPUSH
21441: PPUSH
21442: PPUSH
// begin wait ( 0 0$30 + rand ( 0 0$10 , 1 1$00 ) ) ;
21443: LD_INT 1050
21445: PUSH
21446: LD_INT 350
21448: PPUSH
21449: LD_INT 2100
21451: PPUSH
21452: CALL_OW 12
21456: PLUS
21457: PPUSH
21458: CALL_OW 67
// case Difficulty of 1 :
21462: LD_OWVAR 67
21466: PUSH
21467: LD_INT 1
21469: DOUBLE
21470: EQUAL
21471: IFTRUE 21475
21473: GO 21486
21475: POP
// scholtzeArea := scholtzeSpawn3Area ; 2 :
21476: LD_ADDR_VAR 0 4
21480: PUSH
21481: LD_INT 8
21483: ST_TO_ADDR
21484: GO 21613
21486: LD_INT 2
21488: DOUBLE
21489: EQUAL
21490: IFTRUE 21494
21492: GO 21528
21494: POP
// scholtzeArea := [ scholtzeSpawn3Area , scholtzeSpawn2Area , scholtzeSpawn2Area ] [ rand ( 1 , 3 ) ] ; 3 :
21495: LD_ADDR_VAR 0 4
21499: PUSH
21500: LD_INT 8
21502: PUSH
21503: LD_INT 7
21505: PUSH
21506: LD_INT 7
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 1
21516: PPUSH
21517: LD_INT 3
21519: PPUSH
21520: CALL_OW 12
21524: ARRAY
21525: ST_TO_ADDR
21526: GO 21613
21528: LD_INT 3
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21570
21536: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn2Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; 4 :
21537: LD_ADDR_VAR 0 4
21541: PUSH
21542: LD_INT 7
21544: PUSH
21545: LD_INT 7
21547: PUSH
21548: LD_INT 6
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PPUSH
21559: LD_INT 3
21561: PPUSH
21562: CALL_OW 12
21566: ARRAY
21567: ST_TO_ADDR
21568: GO 21613
21570: LD_INT 4
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21612
21578: POP
// scholtzeArea := [ scholtzeSpawn2Area , scholtzeSpawn1Area , scholtzeSpawn1Area ] [ rand ( 1 , 3 ) ] ; end ;
21579: LD_ADDR_VAR 0 4
21583: PUSH
21584: LD_INT 7
21586: PUSH
21587: LD_INT 6
21589: PUSH
21590: LD_INT 6
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 1
21600: PPUSH
21601: LD_INT 3
21603: PPUSH
21604: CALL_OW 12
21608: ARRAY
21609: ST_TO_ADDR
21610: GO 21613
21612: POP
// PlaceUnitArea ( Scholtze , scholtzeArea , true ) ;
21613: LD_EXP 36
21617: PPUSH
21618: LD_VAR 0 4
21622: PPUSH
21623: LD_INT 1
21625: PPUSH
21626: CALL_OW 49
// ComHold ( Scholtze ) ;
21630: LD_EXP 36
21634: PPUSH
21635: CALL_OW 140
// wait ( 0 0$4 ) ;
21639: LD_INT 140
21641: PPUSH
21642: CALL_OW 67
// if See ( 3 , Scholtze ) then
21646: LD_INT 3
21648: PPUSH
21649: LD_EXP 36
21653: PPUSH
21654: CALL_OW 292
21658: IFFALSE 21742
// begin hasScholtze := true ;
21660: LD_ADDR_EXP 11
21664: PUSH
21665: LD_INT 1
21667: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
21668: LD_EXP 36
21672: PPUSH
21673: LD_INT 3
21675: PPUSH
21676: CALL_OW 235
// ComFree ( Scholtze ) ;
21680: LD_EXP 36
21684: PPUSH
21685: CALL_OW 139
// CenterNowOnUnits ( Scholtze ) ;
21689: LD_EXP 36
21693: PPUSH
21694: CALL_OW 87
// DialogueOn ;
21698: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
21702: LD_EXP 36
21706: PPUSH
21707: LD_STRING D4a-Sch-1
21709: PPUSH
21710: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
21714: LD_EXP 29
21718: PPUSH
21719: LD_STRING D4a-Bur-1
21721: PPUSH
21722: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
21726: LD_EXP 36
21730: PPUSH
21731: LD_STRING D4a-Sch-2
21733: PPUSH
21734: CALL_OW 88
// DialogueOff ;
21738: CALL_OW 7
// end ; x := GetX ( Scholtze ) ;
21742: LD_ADDR_VAR 0 2
21746: PUSH
21747: LD_EXP 36
21751: PPUSH
21752: CALL_OW 250
21756: ST_TO_ADDR
// y := GetY ( Scholtze ) ;
21757: LD_ADDR_VAR 0 3
21761: PUSH
21762: LD_EXP 36
21766: PPUSH
21767: CALL_OW 251
21771: ST_TO_ADDR
// uc_side := 6 ;
21772: LD_ADDR_OWVAR 20
21776: PUSH
21777: LD_INT 6
21779: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 1 ) ;
21780: LD_INT 1
21782: PPUSH
21783: LD_INT 1
21785: PPUSH
21786: LD_INT 1
21788: PPUSH
21789: CALL_OW 380
// fake := CreateHuman ;
21793: LD_ADDR_VAR 0 1
21797: PUSH
21798: CALL_OW 44
21802: ST_TO_ADDR
// InGameOn ;
21803: CALL_OW 8
// DialogueOn ;
21807: CALL_OW 6
// SayRadioNoFaceNoName ( fake , D4-Sch-1 ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: LD_STRING D4-Sch-1
21818: PPUSH
21819: CALL 71098 0 2
// Say ( Burlak , D4-Bur-1 ) ;
21823: LD_EXP 29
21827: PPUSH
21828: LD_STRING D4-Bur-1
21830: PPUSH
21831: CALL_OW 88
// DialogueOff ;
21835: CALL_OW 7
// InGameOff ;
21839: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
21843: LD_STRING M4
21845: PPUSH
21846: CALL_OW 337
// canSearchForScholtze := true ;
21850: LD_ADDR_EXP 16
21854: PUSH
21855: LD_INT 1
21857: ST_TO_ADDR
// if dickensKilled then
21858: LD_EXP 15
21862: IFFALSE 21866
// exit ;
21864: GO 22567
// wait ( 2 2$00 - ( 0 0$20 * Difficulty ) ) ;
21866: LD_INT 4200
21868: PUSH
21869: LD_INT 700
21871: PUSH
21872: LD_OWVAR 67
21876: MUL
21877: MINUS
21878: PPUSH
21879: CALL_OW 67
// uc_side := 1 ;
21883: LD_ADDR_OWVAR 20
21887: PUSH
21888: LD_INT 1
21890: ST_TO_ADDR
// uc_nation := nation_american ;
21891: LD_ADDR_OWVAR 21
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
21899: LD_ADDR_VAR 0 5
21903: PUSH
21904: LD_STRING Dickens
21906: PPUSH
21907: CALL_OW 25
21911: ST_TO_ADDR
// SetSkill ( Dickens , skill_combat , Difficulty ) ;
21912: LD_VAR 0 5
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: LD_OWVAR 67
21924: PPUSH
21925: CALL_OW 237
// PrepareSoldier ( sex_male , Difficulty ) ;
21929: LD_INT 1
21931: PPUSH
21932: LD_OWVAR 67
21936: PPUSH
21937: CALL_OW 381
// hc_attr := [ 10 , 10 ] ;
21941: LD_ADDR_OWVAR 29
21945: PUSH
21946: LD_INT 10
21948: PUSH
21949: LD_INT 10
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: ST_TO_ADDR
// DickensFriend := CreateHuman ;
21956: LD_ADDR_VAR 0 6
21960: PUSH
21961: CALL_OW 44
21965: ST_TO_ADDR
// PlaceUnitXYR ( Dickens , 22 , 17 , 3 , false ) ;
21966: LD_VAR 0 5
21970: PPUSH
21971: LD_INT 22
21973: PPUSH
21974: LD_INT 17
21976: PPUSH
21977: LD_INT 3
21979: PPUSH
21980: LD_INT 0
21982: PPUSH
21983: CALL_OW 50
// PlaceUnitXYR ( DickensFriend , 22 , 17 , 3 , false ) ;
21987: LD_VAR 0 6
21991: PPUSH
21992: LD_INT 22
21994: PPUSH
21995: LD_INT 17
21997: PPUSH
21998: LD_INT 3
22000: PPUSH
22001: LD_INT 0
22003: PPUSH
22004: CALL_OW 50
// ComAgressiveMove ( [ Dickens , DickensFriend ] , x , y ) ;
22008: LD_VAR 0 5
22012: PUSH
22013: LD_VAR 0 6
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PPUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: LD_VAR 0 3
22031: PPUSH
22032: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
22036: LD_INT 35
22038: PPUSH
22039: CALL_OW 67
// if not IsOk ( Dickens ) then
22043: LD_VAR 0 5
22047: PPUSH
22048: CALL_OW 302
22052: NOT
22053: IFFALSE 22100
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
22055: LD_VAR 0 6
22059: PPUSH
22060: LD_INT 31
22062: PPUSH
22063: LD_INT 39
22065: PPUSH
22066: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
22070: LD_VAR 0 6
22074: PPUSH
22075: LD_INT 297
22077: PPUSH
22078: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
22082: LD_ADDR_EXP 57
22086: PUSH
22087: LD_EXP 57
22091: PUSH
22092: LD_VAR 0 6
22096: UNION
22097: ST_TO_ADDR
// exit ;
22098: GO 22567
// end ; if not IsOk ( DickensFriend ) then
22100: LD_VAR 0 6
22104: PPUSH
22105: CALL_OW 302
22109: NOT
22110: IFFALSE 22157
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
22112: LD_VAR 0 5
22116: PPUSH
22117: LD_INT 31
22119: PPUSH
22120: LD_INT 39
22122: PPUSH
22123: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
22127: LD_VAR 0 5
22131: PPUSH
22132: LD_INT 297
22134: PPUSH
22135: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
22139: LD_ADDR_EXP 57
22143: PUSH
22144: LD_EXP 57
22148: PUSH
22149: LD_VAR 0 5
22153: UNION
22154: ST_TO_ADDR
// exit ;
22155: GO 22567
// end ; if GetSide ( Scholtze ) = 3 then
22157: LD_EXP 36
22161: PPUSH
22162: CALL_OW 255
22166: PUSH
22167: LD_INT 3
22169: EQUAL
22170: IFFALSE 22289
// begin wait ( 0 0$10 ) ;
22172: LD_INT 350
22174: PPUSH
22175: CALL_OW 67
// if IsOk ( Dickens ) then
22179: LD_VAR 0 5
22183: PPUSH
22184: CALL_OW 302
22188: IFFALSE 22233
// begin ComMoveXY ( DickensFriend , 31 , 39 ) ;
22190: LD_VAR 0 6
22194: PPUSH
22195: LD_INT 31
22197: PPUSH
22198: LD_INT 39
22200: PPUSH
22201: CALL_OW 111
// AddComEnterUnit ( DickensFriend , usArm1 ) ;
22205: LD_VAR 0 6
22209: PPUSH
22210: LD_INT 297
22212: PPUSH
22213: CALL_OW 180
// omicronTroops := omicronTroops union DickensFriend ;
22217: LD_ADDR_EXP 57
22221: PUSH
22222: LD_EXP 57
22226: PUSH
22227: LD_VAR 0 6
22231: UNION
22232: ST_TO_ADDR
// end ; if IsOk ( DickensFriend ) then
22233: LD_VAR 0 6
22237: PPUSH
22238: CALL_OW 302
22242: IFFALSE 22287
// begin ComMoveXY ( Dickens , 31 , 39 ) ;
22244: LD_VAR 0 5
22248: PPUSH
22249: LD_INT 31
22251: PPUSH
22252: LD_INT 39
22254: PPUSH
22255: CALL_OW 111
// AddComEnterUnit ( Dickens , usArm1 ) ;
22259: LD_VAR 0 5
22263: PPUSH
22264: LD_INT 297
22266: PPUSH
22267: CALL_OW 180
// omicronTroops := omicronTroops union Dickens ;
22271: LD_ADDR_EXP 57
22275: PUSH
22276: LD_EXP 57
22280: PUSH
22281: LD_VAR 0 5
22285: UNION
22286: ST_TO_ADDR
// end ; exit ;
22287: GO 22567
// end ; until See ( 1 , Scholtze ) and GetLives ( Scholtze ) < 1000 and not hasScholtze ;
22289: LD_INT 1
22291: PPUSH
22292: LD_EXP 36
22296: PPUSH
22297: CALL_OW 292
22301: IFFALSE 22318
22303: PUSH
22304: LD_EXP 36
22308: PPUSH
22309: CALL_OW 256
22313: PUSH
22314: LD_INT 1000
22316: LESS
22317: AND
22318: IFFALSE 22327
22320: PUSH
22321: LD_EXP 11
22325: NOT
22326: AND
22327: IFFALSE 22036
// canSearchForScholtze := false ;
22329: LD_ADDR_EXP 16
22333: PUSH
22334: LD_INT 0
22336: ST_TO_ADDR
// ComAttackUnit ( [ Dickens , DickensFriend ] , Scholtze ) ;
22337: LD_VAR 0 5
22341: PUSH
22342: LD_VAR 0 6
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PPUSH
22351: LD_EXP 36
22355: PPUSH
22356: CALL_OW 115
// wait ( 0 0$0.3 ) ;
22360: LD_INT 10
22362: PPUSH
22363: CALL_OW 67
// InGameOn ;
22367: CALL_OW 8
// DialogueOn ;
22371: CALL_OW 6
// PlaceSeeing ( x , y , 3 , - 10 ) ;
22375: LD_VAR 0 2
22379: PPUSH
22380: LD_VAR 0 3
22384: PPUSH
22385: LD_INT 3
22387: PPUSH
22388: LD_INT 10
22390: NEG
22391: PPUSH
22392: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
22396: LD_VAR 0 2
22400: PPUSH
22401: LD_VAR 0 3
22405: PPUSH
22406: CALL_OW 86
// Say ( Scholtze , D4b-Sch-1 ) ;
22410: LD_EXP 36
22414: PPUSH
22415: LD_STRING D4b-Sch-1
22417: PPUSH
22418: CALL_OW 88
// Say ( DickensFriend , D4b-Sol1-1 ) ;
22422: LD_VAR 0 6
22426: PPUSH
22427: LD_STRING D4b-Sol1-1
22429: PPUSH
22430: CALL_OW 88
// Say ( Dickens , D4b-Sol2-1 ) ;
22434: LD_VAR 0 5
22438: PPUSH
22439: LD_STRING D4b-Sol2-1
22441: PPUSH
22442: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
22446: LD_EXP 36
22450: PPUSH
22451: LD_STRING D4b-Sch-2
22453: PPUSH
22454: CALL_OW 88
// DialogueOff ;
22458: CALL_OW 7
// wait ( 0 0$0.3 ) ;
22462: LD_INT 10
22464: PPUSH
22465: CALL_OW 67
// RemoveSeeing ( x , y , 3 ) ;
22469: LD_VAR 0 2
22473: PPUSH
22474: LD_VAR 0 3
22478: PPUSH
22479: LD_INT 3
22481: PPUSH
22482: CALL_OW 331
// Say ( Burlak , D4b-Bur-2 ) ;
22486: LD_EXP 29
22490: PPUSH
22491: LD_STRING D4b-Bur-2
22493: PPUSH
22494: CALL_OW 88
// InGameOff ;
22498: CALL_OW 9
// ChangeMissionObjectives ( MScholtzeDel ) ;
22502: LD_STRING MScholtzeDel
22504: PPUSH
22505: CALL_OW 337
// KillUnit ( Scholtze ) ;
22509: LD_EXP 36
22513: PPUSH
22514: CALL_OW 66
// ComMoveXY ( [ Dickens , DickensFriend ] , 25 , 31 ) ;
22518: LD_VAR 0 5
22522: PUSH
22523: LD_VAR 0 6
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PPUSH
22532: LD_INT 25
22534: PPUSH
22535: LD_INT 31
22537: PPUSH
22538: CALL_OW 111
// omicronTroops := omicronTroops union [ Dickens , DickensFriend ] ;
22542: LD_ADDR_EXP 57
22546: PUSH
22547: LD_EXP 57
22551: PUSH
22552: LD_VAR 0 5
22556: PUSH
22557: LD_VAR 0 6
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: UNION
22566: ST_TO_ADDR
// end ;
22567: PPOPN 6
22569: END
// every 0 0$2 trigger See ( 3 , Scholtze ) and canSearchForScholtze and not hasScholtze do
22570: LD_INT 3
22572: PPUSH
22573: LD_EXP 36
22577: PPUSH
22578: CALL_OW 292
22582: IFFALSE 22590
22584: PUSH
22585: LD_EXP 16
22589: AND
22590: IFFALSE 22599
22592: PUSH
22593: LD_EXP 11
22597: NOT
22598: AND
22599: IFFALSE 22691
22601: GO 22603
22603: DISABLE
// begin hasScholtze := true ;
22604: LD_ADDR_EXP 11
22608: PUSH
22609: LD_INT 1
22611: ST_TO_ADDR
// SetSide ( Scholtze , 3 ) ;
22612: LD_EXP 36
22616: PPUSH
22617: LD_INT 3
22619: PPUSH
22620: CALL_OW 235
// CenterNowOnUnits ( Scholtze ) ;
22624: LD_EXP 36
22628: PPUSH
22629: CALL_OW 87
// DialogueOn ;
22633: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
22637: LD_EXP 36
22641: PPUSH
22642: LD_STRING D4a-Sch-1
22644: PPUSH
22645: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
22649: LD_EXP 29
22653: PPUSH
22654: LD_STRING D4a-Bur-1
22656: PPUSH
22657: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
22661: LD_EXP 36
22665: PPUSH
22666: LD_STRING D4a-Sch-2
22668: PPUSH
22669: CALL_OW 88
// DialogueOff ;
22673: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
22677: LD_STRING MScholtzeOut
22679: PPUSH
22680: CALL_OW 337
// SetAchievement ( ACH_PROFESSOR ) ;
22684: LD_STRING ACH_PROFESSOR
22686: PPUSH
22687: CALL_OW 543
// end ;
22691: END
// every 0 0$2 trigger FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) do
22692: LD_INT 3
22694: PPUSH
22695: LD_INT 22
22697: PUSH
22698: LD_INT 6
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 21
22707: PUSH
22708: LD_INT 1
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 70
22723: IFFALSE 22798
22725: GO 22727
22727: DISABLE
// begin PlaceSeeing ( 131 , 50 , 3 , 12 ) ;
22728: LD_INT 131
22730: PPUSH
22731: LD_INT 50
22733: PPUSH
22734: LD_INT 3
22736: PPUSH
22737: LD_INT 12
22739: PPUSH
22740: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
22744: LD_INT 35
22746: PPUSH
22747: CALL_OW 67
// until not FilterUnitsInArea ( easternHillArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
22751: LD_INT 3
22753: PPUSH
22754: LD_INT 22
22756: PUSH
22757: LD_INT 6
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 21
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PPUSH
22778: CALL_OW 70
22782: NOT
22783: IFFALSE 22744
// RemoveSeeing ( 131 , 50 , 3 ) ;
22785: LD_INT 131
22787: PPUSH
22788: LD_INT 50
22790: PPUSH
22791: LD_INT 3
22793: PPUSH
22794: CALL_OW 331
// end ;
22798: END
// every 0 0$1 trigger not retreat and FilterUnitsInArea ( hillArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_chassis , ru_medium_wheeled ] ] ) and IsOk ( Burlak ) do
22799: LD_EXP 18
22803: NOT
22804: IFFALSE 22850
22806: PUSH
22807: LD_INT 9
22809: PPUSH
22810: LD_INT 22
22812: PUSH
22813: LD_INT 3
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 21
22822: PUSH
22823: LD_INT 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 31
22832: PUSH
22833: LD_INT 21
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: LIST
22844: PPUSH
22845: CALL_OW 70
22849: AND
22850: IFFALSE 22863
22852: PUSH
22853: LD_EXP 29
22857: PPUSH
22858: CALL_OW 302
22862: AND
22863: IFFALSE 22914
22865: GO 22867
22867: DISABLE
// begin DialogueOn ;
22868: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22872: LD_EXP 29
22876: PPUSH
22877: LD_STRING D5a-Bur-1
22879: PPUSH
22880: CALL_OW 88
// DialogueOff ;
22884: CALL_OW 7
// SetTech ( tech_Track , 3 , state_enabled ) ;
22888: LD_INT 84
22890: PPUSH
22891: LD_INT 3
22893: PPUSH
22894: LD_INT 1
22896: PPUSH
22897: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22901: LD_INT 16
22903: PPUSH
22904: LD_INT 3
22906: PPUSH
22907: LD_INT 1
22909: PPUSH
22910: CALL_OW 324
// end ;
22914: END
// every 0 0$1 trigger hasFactory and hasOilTower do var i , un , tmp , vehicles , vehiclesOwned , q , pepCount , points , sendMechanics ;
22915: LD_EXP 19
22919: IFFALSE 22927
22921: PUSH
22922: LD_EXP 14
22926: AND
22927: IFFALSE 24740
22929: GO 22931
22931: DISABLE
22932: LD_INT 0
22934: PPUSH
22935: PPUSH
22936: PPUSH
22937: PPUSH
22938: PPUSH
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
// begin ChangeMissionObjectives ( M3 ) ;
22943: LD_STRING M3
22945: PPUSH
22946: CALL_OW 337
// sendMechanics := false ;
22950: LD_ADDR_VAR 0 9
22954: PUSH
22955: LD_INT 0
22957: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22958: LD_INT 35
22960: PPUSH
22961: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
22965: LD_ADDR_VAR 0 5
22969: PUSH
22970: LD_INT 22
22972: PUSH
22973: LD_INT 3
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 2
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 50
22992: PUSH
22993: EMPTY
22994: LIST
22995: PUSH
22996: LD_INT 23
22998: PUSH
22999: LD_INT 3
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 69
23016: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
23017: LD_ADDR_VAR 0 7
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 21
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 23
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: PPUSH
23057: CALL_OW 69
23061: PPUSH
23062: CALL 30877 0 1
23066: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
23067: LD_VAR 0 5
23071: PUSH
23072: LD_VAR 0 7
23076: PUSH
23077: LD_EXP 21
23081: PLUS
23082: LESS
23083: IFFALSE 23126
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned , #Ru03-6 , kurinWaitForVehiclesTime ] else
23085: LD_ADDR_OWVAR 47
23089: PUSH
23090: LD_STRING #Ru03-5
23092: PUSH
23093: LD_VAR 0 7
23097: PUSH
23098: LD_EXP 21
23102: PLUS
23103: PUSH
23104: LD_VAR 0 5
23108: MINUS
23109: PUSH
23110: LD_STRING #Ru03-6
23112: PUSH
23113: LD_EXP 20
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: ST_TO_ADDR
23124: GO 23147
// display_strings := [ #Ru03-5a , #Ru03-6 , kurinWaitForVehiclesTime ] ;
23126: LD_ADDR_OWVAR 47
23130: PUSH
23131: LD_STRING #Ru03-5a
23133: PUSH
23134: LD_STRING #Ru03-6
23136: PUSH
23137: LD_EXP 20
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
23147: LD_ADDR_EXP 20
23151: PUSH
23152: LD_EXP 20
23156: PUSH
23157: LD_INT 35
23159: MINUS
23160: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
23161: LD_EXP 20
23165: PUSH
23166: LD_INT 0
23168: EQUAL
23169: IFFALSE 22958
// if vehiclesOwned >= ( pepCount + requiredVehiclesAmount ) then
23171: LD_VAR 0 5
23175: PUSH
23176: LD_VAR 0 7
23180: PUSH
23181: LD_EXP 21
23185: PLUS
23186: GREATEREQUAL
23187: IFFALSE 23220
// begin AddMedal ( Surplus , 1 ) ;
23189: LD_STRING Surplus
23191: PPUSH
23192: LD_INT 1
23194: PPUSH
23195: CALL_OW 101
// points := [ 1 , 2 , 3 ] ;
23199: LD_ADDR_VAR 0 8
23203: PUSH
23204: LD_INT 1
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: ST_TO_ADDR
// end else
23218: GO 23282
// if vehiclesOwned >= pepCount then
23220: LD_VAR 0 5
23224: PUSH
23225: LD_VAR 0 7
23229: GREATEREQUAL
23230: IFFALSE 23260
// begin AddMedal ( Surplus , - 1 ) ;
23232: LD_STRING Surplus
23234: PPUSH
23235: LD_INT 1
23237: NEG
23238: PPUSH
23239: CALL_OW 101
// points := [ 2 , 3 ] ;
23243: LD_ADDR_VAR 0 8
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
// end else
23258: GO 23282
// begin AddMedal ( Surplus , - 2 ) ;
23260: LD_STRING Surplus
23262: PPUSH
23263: LD_INT 2
23265: NEG
23266: PPUSH
23267: CALL_OW 101
// points := [ 3 ] ;
23271: LD_ADDR_VAR 0 8
23275: PUSH
23276: LD_INT 3
23278: PUSH
23279: EMPTY
23280: LIST
23281: ST_TO_ADDR
// end ; InGameOn ;
23282: CALL_OW 8
// DialogueOn ;
23286: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
23290: LD_EXP 33
23294: PPUSH
23295: LD_STRING D5-Kur-1
23297: PPUSH
23298: CALL_OW 94
// q := SelectiveQuery ( QVehicles , points ) ;
23302: LD_ADDR_VAR 0 6
23306: PUSH
23307: LD_STRING QVehicles
23309: PPUSH
23310: LD_VAR 0 8
23314: PPUSH
23315: CALL_OW 98
23319: ST_TO_ADDR
// case q of 1 :
23320: LD_VAR 0 6
23324: PUSH
23325: LD_INT 1
23327: DOUBLE
23328: EQUAL
23329: IFTRUE 23333
23331: GO 23376
23333: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
23334: LD_EXP 29
23338: PPUSH
23339: LD_STRING D6a-Bur-1
23341: PPUSH
23342: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
23346: LD_EXP 33
23350: PPUSH
23351: LD_STRING D6a-Kur-1
23353: PPUSH
23354: CALL_OW 94
// timeToAttackOnOmicron := 2 2$00 ;
23358: LD_ADDR_EXP 23
23362: PUSH
23363: LD_INT 4200
23365: ST_TO_ADDR
// sendMechanics := true ;
23366: LD_ADDR_VAR 0 9
23370: PUSH
23371: LD_INT 1
23373: ST_TO_ADDR
// end ; 2 :
23374: GO 23463
23376: LD_INT 2
23378: DOUBLE
23379: EQUAL
23380: IFTRUE 23384
23382: GO 23419
23384: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
23385: LD_EXP 29
23389: PPUSH
23390: LD_STRING D6b-Bur-1
23392: PPUSH
23393: CALL_OW 88
// SayRadio ( Kurin , D6b-Kur-1 ) ;
23397: LD_EXP 33
23401: PPUSH
23402: LD_STRING D6b-Kur-1
23404: PPUSH
23405: CALL_OW 94
// timeToAttackOnOmicron := 3 3$00 ;
23409: LD_ADDR_EXP 23
23413: PUSH
23414: LD_INT 6300
23416: ST_TO_ADDR
// end ; 3 :
23417: GO 23463
23419: LD_INT 3
23421: DOUBLE
23422: EQUAL
23423: IFTRUE 23427
23425: GO 23462
23427: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
23428: LD_EXP 29
23432: PPUSH
23433: LD_STRING D6c-Bur-1
23435: PPUSH
23436: CALL_OW 88
// SayRadio ( Kurin , D6c-Kur-1 ) ;
23440: LD_EXP 33
23444: PPUSH
23445: LD_STRING D6c-Kur-1
23447: PPUSH
23448: CALL_OW 94
// kurinWaitForVehiclesTime := 7 7$00 ;
23452: LD_ADDR_EXP 20
23456: PUSH
23457: LD_INT 14700
23459: ST_TO_ADDR
// end ; end ;
23460: GO 23463
23462: POP
// DialogueOff ;
23463: CALL_OW 7
// InGameOff ;
23467: CALL_OW 9
// if q = 3 then
23471: LD_VAR 0 6
23475: PUSH
23476: LD_INT 3
23478: EQUAL
23479: IFFALSE 23771
// begin repeat wait ( 0 0$1 ) ;
23481: LD_INT 35
23483: PPUSH
23484: CALL_OW 67
// vehiclesOwned := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ;
23488: LD_ADDR_VAR 0 5
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 21
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 50
23515: PUSH
23516: EMPTY
23517: LIST
23518: PUSH
23519: LD_INT 23
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 69
23539: ST_TO_ADDR
// pepCount := Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
23540: LD_ADDR_VAR 0 7
23544: PUSH
23545: LD_INT 22
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 21
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 23
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: PPUSH
23580: CALL_OW 69
23584: PPUSH
23585: CALL 30877 0 1
23589: ST_TO_ADDR
// if vehiclesOwned < ( pepCount + requiredVehiclesAmount ) then
23590: LD_VAR 0 5
23594: PUSH
23595: LD_VAR 0 7
23599: PUSH
23600: LD_EXP 21
23604: PLUS
23605: LESS
23606: IFFALSE 23649
// display_strings := [ #Ru03-5 , ( pepCount + requiredVehiclesAmount ) - vehiclesOwned , #Ru03-6 , kurinWaitForVehiclesTime ] else
23608: LD_ADDR_OWVAR 47
23612: PUSH
23613: LD_STRING #Ru03-5
23615: PUSH
23616: LD_VAR 0 7
23620: PUSH
23621: LD_EXP 21
23625: PLUS
23626: PUSH
23627: LD_VAR 0 5
23631: MINUS
23632: PUSH
23633: LD_STRING #Ru03-6
23635: PUSH
23636: LD_EXP 20
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: ST_TO_ADDR
23647: GO 23670
// display_strings := [ #Ru03-5a , #Ru03-6 , kurinWaitForVehiclesTime ] ;
23649: LD_ADDR_OWVAR 47
23653: PUSH
23654: LD_STRING #Ru03-5a
23656: PUSH
23657: LD_STRING #Ru03-6
23659: PUSH
23660: LD_EXP 20
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: ST_TO_ADDR
// kurinWaitForVehiclesTime := kurinWaitForVehiclesTime - 0 0$1 ;
23670: LD_ADDR_EXP 20
23674: PUSH
23675: LD_EXP 20
23679: PUSH
23680: LD_INT 35
23682: MINUS
23683: ST_TO_ADDR
// until kurinWaitForVehiclesTime = 0 0$0 ;
23684: LD_EXP 20
23688: PUSH
23689: LD_INT 0
23691: EQUAL
23692: IFFALSE 23481
// if vehiclesOwned < requiredVehiclesAmount then
23694: LD_VAR 0 5
23698: PUSH
23699: LD_EXP 21
23703: LESS
23704: IFFALSE 23735
// begin DialogueOn ;
23706: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
23710: LD_EXP 33
23714: PPUSH
23715: LD_STRING D6d-Kur-1
23717: PPUSH
23718: CALL_OW 94
// YouLost ( Vehicles ) ;
23722: LD_STRING Vehicles
23724: PPUSH
23725: CALL_OW 104
// DialogueOff ;
23729: CALL_OW 7
// exit ;
23733: GO 24740
// end ; DialogueOn ;
23735: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
23739: LD_EXP 33
23743: PPUSH
23744: LD_STRING D6c-Kur-2
23746: PPUSH
23747: CALL_OW 94
// DialogueOff ;
23751: CALL_OW 7
// sendMechanics := true ;
23755: LD_ADDR_VAR 0 9
23759: PUSH
23760: LD_INT 1
23762: ST_TO_ADDR
// timeToAttackOnOmicron := 2 2$00 ;
23763: LD_ADDR_EXP 23
23767: PUSH
23768: LD_INT 4200
23770: ST_TO_ADDR
// end ; display_strings := [ ] ;
23771: LD_ADDR_OWVAR 47
23775: PUSH
23776: EMPTY
23777: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
23778: LD_STRING M3a
23780: PPUSH
23781: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
23785: LD_STRING M5
23787: PPUSH
23788: CALL_OW 337
// if sendMechanics then
23792: LD_VAR 0 9
23796: IFFALSE 24347
// begin tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
23798: LD_ADDR_VAR 0 3
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_INT 6
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 21
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 3
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 3
23835: PUSH
23836: LD_INT 120
23838: PUSH
23839: LD_INT 7
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 69
23860: ST_TO_ADDR
// if Count ( tmp ) < requiredVehiclesAmount then
23861: LD_VAR 0 3
23865: PPUSH
23866: CALL 30877 0 1
23870: PUSH
23871: LD_EXP 21
23875: LESS
23876: IFFALSE 24067
// begin for i := Count ( tmp ) to requiredVehiclesAmount do
23878: LD_ADDR_VAR 0 1
23882: PUSH
23883: DOUBLE
23884: LD_VAR 0 3
23888: PPUSH
23889: CALL 30877 0 1
23893: DEC
23894: ST_TO_ADDR
23895: LD_EXP 21
23899: PUSH
23900: FOR_TO
23901: IFFALSE 24002
// begin uc_side := 6 ;
23903: LD_ADDR_OWVAR 20
23907: PUSH
23908: LD_INT 6
23910: ST_TO_ADDR
// uc_nation := nation_russian ;
23911: LD_ADDR_OWVAR 21
23915: PUSH
23916: LD_INT 3
23918: ST_TO_ADDR
// PrepareMechanic ( false , 3 ) ;
23919: LD_INT 0
23921: PPUSH
23922: LD_INT 3
23924: PPUSH
23925: CALL_OW 383
// un := CreateHuman ;
23929: LD_ADDR_VAR 0 2
23933: PUSH
23934: CALL_OW 44
23938: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23939: LD_INT 35
23941: PPUSH
23942: CALL_OW 67
// until PlaceUnitArea ( un , southRoadSpawnArea , false ) ;
23946: LD_VAR 0 2
23950: PPUSH
23951: LD_INT 14
23953: PPUSH
23954: LD_INT 0
23956: PPUSH
23957: CALL_OW 49
23961: IFFALSE 23939
// ComMoveXY ( un , 193 , 135 ) ;
23963: LD_VAR 0 2
23967: PPUSH
23968: LD_INT 193
23970: PPUSH
23971: LD_INT 135
23973: PPUSH
23974: CALL_OW 111
// AddComMoveXY ( un , 159 , 106 ) ;
23978: LD_VAR 0 2
23982: PPUSH
23983: LD_INT 159
23985: PPUSH
23986: LD_INT 106
23988: PPUSH
23989: CALL_OW 171
// wait ( 0 0$1 ) ;
23993: LD_INT 35
23995: PPUSH
23996: CALL_OW 67
// end ;
24000: GO 23900
24002: POP
24003: POP
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
24004: LD_ADDR_VAR 0 3
24008: PUSH
24009: LD_INT 22
24011: PUSH
24012: LD_INT 6
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 21
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 25
24031: PUSH
24032: LD_INT 3
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 3
24041: PUSH
24042: LD_INT 120
24044: PUSH
24045: LD_INT 7
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL_OW 69
24066: ST_TO_ADDR
// end ; kirovBaseSquad := kirovBaseSquad diff tmp ;
24067: LD_ADDR_EXP 38
24071: PUSH
24072: LD_EXP 38
24076: PUSH
24077: LD_VAR 0 3
24081: DIFF
24082: ST_TO_ADDR
// vehicles := [ ] ;
24083: LD_ADDR_VAR 0 4
24087: PUSH
24088: EMPTY
24089: ST_TO_ADDR
// vehiclesOwned := [ ] ;
24090: LD_ADDR_VAR 0 5
24094: PUSH
24095: EMPTY
24096: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) do
24097: LD_ADDR_VAR 0 1
24101: PUSH
24102: LD_INT 22
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 21
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 50
24124: PUSH
24125: EMPTY
24126: LIST
24127: PUSH
24128: LD_INT 23
24130: PUSH
24131: LD_INT 3
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: PPUSH
24144: CALL_OW 69
24148: PUSH
24149: FOR_IN
24150: IFFALSE 24221
// begin if GetChassis ( i ) in [ ru_medium_tracked , ru_medium_wheeled ] then
24152: LD_VAR 0 1
24156: PPUSH
24157: CALL_OW 265
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_INT 21
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: IN
24172: IFFALSE 24196
// vehiclesOwned := Join ( vehiclesOwned , i ) else
24174: LD_ADDR_VAR 0 5
24178: PUSH
24179: LD_VAR 0 5
24183: PPUSH
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL 66853 0 2
24193: ST_TO_ADDR
24194: GO 24219
// vehiclesOwned := Insert ( vehiclesOwned , 1 , i ) ;
24196: LD_ADDR_VAR 0 5
24200: PUSH
24201: LD_VAR 0 5
24205: PPUSH
24206: LD_INT 1
24208: PPUSH
24209: LD_VAR 0 1
24213: PPUSH
24214: CALL_OW 2
24218: ST_TO_ADDR
// end ;
24219: GO 24149
24221: POP
24222: POP
// vehiclesOwned := vehiclesOwned diff 0 ;
24223: LD_ADDR_VAR 0 5
24227: PUSH
24228: LD_VAR 0 5
24232: PUSH
24233: LD_INT 0
24235: DIFF
24236: ST_TO_ADDR
// for i := 1 to requiredVehiclesAmount do
24237: LD_ADDR_VAR 0 1
24241: PUSH
24242: DOUBLE
24243: LD_INT 1
24245: DEC
24246: ST_TO_ADDR
24247: LD_EXP 21
24251: PUSH
24252: FOR_TO
24253: IFFALSE 24336
// begin ComExit ( IsDrivenBy ( vehiclesOwned [ i ] ) ) ;
24255: LD_VAR 0 5
24259: PUSH
24260: LD_VAR 0 1
24264: ARRAY
24265: PPUSH
24266: CALL_OW 311
24270: PPUSH
24271: CALL 67251 0 1
// SetSide ( vehiclesOwned [ i ] , 6 ) ;
24275: LD_VAR 0 5
24279: PUSH
24280: LD_VAR 0 1
24284: ARRAY
24285: PPUSH
24286: LD_INT 6
24288: PPUSH
24289: CALL_OW 235
// vehicles := Join ( vehicles , vehiclesOwned [ i ] ) ;
24293: LD_ADDR_VAR 0 4
24297: PUSH
24298: LD_VAR 0 4
24302: PPUSH
24303: LD_VAR 0 5
24307: PUSH
24308: LD_VAR 0 1
24312: ARRAY
24313: PPUSH
24314: CALL 66853 0 2
24318: ST_TO_ADDR
// ComExit ( tmp [ i ] ) ;
24319: LD_VAR 0 3
24323: PUSH
24324: LD_VAR 0 1
24328: ARRAY
24329: PPUSH
24330: CALL 67251 0 1
// end ;
24334: GO 24252
24336: POP
24337: POP
// if not vehicles then
24338: LD_VAR 0 4
24342: NOT
24343: IFFALSE 24347
// exit ;
24345: GO 24740
// end ; kirovAttackVehicles := kirovVehicles ;
24347: LD_ADDR_EXP 50
24351: PUSH
24352: LD_EXP 49
24356: ST_TO_ADDR
// if vehicles then
24357: LD_VAR 0 4
24361: IFFALSE 24379
// kirovAttackVehicles := kirovAttackVehicles union vehicles ;
24363: LD_ADDR_EXP 50
24367: PUSH
24368: LD_EXP 50
24372: PUSH
24373: LD_VAR 0 4
24377: UNION
24378: ST_TO_ADDR
// kirovVehicles := [ ] ;
24379: LD_ADDR_EXP 49
24383: PUSH
24384: EMPTY
24385: ST_TO_ADDR
// for i in kirovAttackVehicles do
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_EXP 50
24395: PUSH
24396: FOR_IN
24397: IFFALSE 24413
// SetTag ( i , 0 ) ;
24399: LD_VAR 0 1
24403: PPUSH
24404: LD_INT 0
24406: PPUSH
24407: CALL_OW 109
24411: GO 24396
24413: POP
24414: POP
// if sendMechanics then
24415: LD_VAR 0 9
24419: IFFALSE 24740
// begin repeat wait ( 0 0$3 ) ;
24421: LD_INT 105
24423: PPUSH
24424: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] , [ f_not , [ f_driving ] ] , [ f_not , [ f_tag , tMech ] ] ] ) ;
24428: LD_ADDR_VAR 0 3
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_INT 6
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 21
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 25
24455: PUSH
24456: LD_INT 3
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 55
24468: PUSH
24469: EMPTY
24470: LIST
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 3
24478: PUSH
24479: LD_INT 120
24481: PUSH
24482: LD_INT 7
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: ST_TO_ADDR
// vehicles := UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
24505: LD_ADDR_VAR 0 4
24509: PUSH
24510: LD_EXP 50
24514: PPUSH
24515: LD_INT 58
24517: PUSH
24518: EMPTY
24519: LIST
24520: PPUSH
24521: CALL_OW 72
24525: ST_TO_ADDR
// for i := 1 to Count ( vehicles ) do
24526: LD_ADDR_VAR 0 1
24530: PUSH
24531: DOUBLE
24532: LD_INT 1
24534: DEC
24535: ST_TO_ADDR
24536: LD_VAR 0 4
24540: PPUSH
24541: CALL 30877 0 1
24545: PUSH
24546: FOR_TO
24547: IFFALSE 24589
// if i <= tmp then
24549: LD_VAR 0 1
24553: PUSH
24554: LD_VAR 0 3
24558: LESSEQUAL
24559: IFFALSE 24587
// ComEnterUnit ( tmp [ i ] , vehicles [ i ] ) ;
24561: LD_VAR 0 3
24565: PUSH
24566: LD_VAR 0 1
24570: ARRAY
24571: PPUSH
24572: LD_VAR 0 4
24576: PUSH
24577: LD_VAR 0 1
24581: ARRAY
24582: PPUSH
24583: CALL_OW 120
24587: GO 24546
24589: POP
24590: POP
// until not UnitFilter ( kirovAttackVehicles , [ f_empty ] ) ;
24591: LD_EXP 50
24595: PPUSH
24596: LD_INT 58
24598: PUSH
24599: EMPTY
24600: LIST
24601: PPUSH
24602: CALL_OW 72
24606: NOT
24607: IFFALSE 24421
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] , [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_driving ] ] ] ) ;
24609: LD_ADDR_VAR 0 3
24613: PUSH
24614: LD_INT 22
24616: PUSH
24617: LD_INT 6
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 25
24626: PUSH
24627: LD_INT 3
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 3
24636: PUSH
24637: LD_INT 120
24639: PUSH
24640: LD_INT 7
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 3
24653: PUSH
24654: LD_INT 55
24656: PUSH
24657: EMPTY
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PPUSH
24670: CALL_OW 69
24674: ST_TO_ADDR
// for i in tmp do
24675: LD_ADDR_VAR 0 1
24679: PUSH
24680: LD_VAR 0 3
24684: PUSH
24685: FOR_IN
24686: IFFALSE 24723
// if not i in kirovBaseSquad then
24688: LD_VAR 0 1
24692: PUSH
24693: LD_EXP 38
24697: IN
24698: NOT
24699: IFFALSE 24721
// kirovBaseSquad := Join ( kirovBaseSquad , i ) ;
24701: LD_ADDR_EXP 38
24705: PUSH
24706: LD_EXP 38
24710: PPUSH
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL 66853 0 2
24720: ST_TO_ADDR
24721: GO 24685
24723: POP
24724: POP
// ComMoveXY ( kirovAttackVehicles , 71 , 36 ) ;
24725: LD_EXP 50
24729: PPUSH
24730: LD_INT 71
24732: PPUSH
24733: LD_INT 36
24735: PPUSH
24736: CALL_OW 111
// end ; end ;
24740: PPOPN 9
24742: END
// every 0 0$1 trigger timeToAttackOnOmicron do
24743: LD_EXP 23
24747: IFFALSE 25181
24749: GO 24751
24751: DISABLE
// begin SetAreaMapShow ( omicronGatheringArea , 1 ) ;
24752: LD_INT 16
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: CALL_OW 424
// RaiseSailEvent ( eventCargo ) ;
24762: LD_INT 1
24764: PPUSH
24765: CALL_OW 427
// repeat wait ( 0 0$1 ) ;
24769: LD_INT 35
24771: PPUSH
24772: CALL_OW 67
// display_strings := [ #Ru03-1 , timeToAttackOnOmicron ] ;
24776: LD_ADDR_OWVAR 47
24780: PUSH
24781: LD_STRING #Ru03-1
24783: PUSH
24784: LD_EXP 23
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
24793: LD_ADDR_EXP 23
24797: PUSH
24798: LD_EXP 23
24802: PUSH
24803: LD_INT 35
24805: MINUS
24806: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
24807: LD_EXP 23
24811: PUSH
24812: LD_INT 0
24814: EQUAL
24815: IFFALSE 24769
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
24817: LD_INT 16
24819: PPUSH
24820: LD_INT 22
24822: PUSH
24823: LD_INT 3
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 21
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 3
24842: PUSH
24843: LD_INT 58
24845: PUSH
24846: EMPTY
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: LIST
24857: PPUSH
24858: CALL_OW 71
24862: IFTRUE 24911
24864: PUSH
24865: LD_INT 16
24867: PPUSH
24868: LD_INT 22
24870: PUSH
24871: LD_INT 3
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 21
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 3
24890: PUSH
24891: LD_INT 55
24893: PUSH
24894: EMPTY
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: PPUSH
24906: CALL_OW 71
24910: OR
24911: IFFALSE 25094
// begin DialogueOn ;
24913: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
24917: LD_EXP 33
24921: PPUSH
24922: LD_STRING D7a-Kur-1
24924: PPUSH
24925: CALL_OW 94
// DialogueOff ;
24929: CALL_OW 7
// timeToAttackOnOmicron := 2 2$00 ;
24933: LD_ADDR_EXP 23
24937: PUSH
24938: LD_INT 4200
24940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24941: LD_INT 35
24943: PPUSH
24944: CALL_OW 67
// display_strings := [ #Ru03-2 , timeToAttackOnOmicron ] ;
24948: LD_ADDR_OWVAR 47
24952: PUSH
24953: LD_STRING #Ru03-2
24955: PUSH
24956: LD_EXP 23
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: ST_TO_ADDR
// timeToAttackOnOmicron := timeToAttackOnOmicron - 0 0$1 ;
24965: LD_ADDR_EXP 23
24969: PUSH
24970: LD_EXP 23
24974: PUSH
24975: LD_INT 35
24977: MINUS
24978: ST_TO_ADDR
// until timeToAttackOnOmicron = 0 0$0 ;
24979: LD_EXP 23
24983: PUSH
24984: LD_INT 0
24986: EQUAL
24987: IFFALSE 24941
// if FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) or FilterUnitsExceptArea ( omicronGatheringArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_driving ] ] ] ) then
24989: LD_INT 16
24991: PPUSH
24992: LD_INT 22
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 21
25004: PUSH
25005: LD_INT 2
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 3
25014: PUSH
25015: LD_INT 58
25017: PUSH
25018: EMPTY
25019: LIST
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: LIST
25029: PPUSH
25030: CALL_OW 71
25034: IFTRUE 25083
25036: PUSH
25037: LD_INT 16
25039: PPUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 21
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 3
25062: PUSH
25063: LD_INT 55
25065: PUSH
25066: EMPTY
25067: LIST
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 71
25082: OR
25083: IFFALSE 25094
// begin YouLost ( Delay ) ;
25085: LD_STRING Delay
25087: PPUSH
25088: CALL_OW 104
// exit ;
25092: GO 25181
// end ; end ; display_strings := [ ] ;
25094: LD_ADDR_OWVAR 47
25098: PUSH
25099: EMPTY
25100: ST_TO_ADDR
// allowedToAttackOmicron := true ;
25101: LD_ADDR_EXP 13
25105: PUSH
25106: LD_INT 1
25108: ST_TO_ADDR
// canCaptureKirovVehs := true ;
25109: LD_ADDR_EXP 22
25113: PUSH
25114: LD_INT 1
25116: ST_TO_ADDR
// retreatToKirovAllowed := false ;
25117: LD_ADDR_EXP 24
25121: PUSH
25122: LD_INT 0
25124: ST_TO_ADDR
// SetAreaMapShow ( omicronGatheringArea , 0 ) ;
25125: LD_INT 16
25127: PPUSH
25128: LD_INT 0
25130: PPUSH
25131: CALL_OW 424
// DialogueOn ;
25135: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
25139: LD_EXP 29
25143: PPUSH
25144: LD_STRING D7-Bur-1
25146: PPUSH
25147: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
25151: LD_EXP 33
25155: PPUSH
25156: LD_STRING D7-Kur-1
25158: PPUSH
25159: CALL_OW 94
// DialogueOff ;
25163: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25167: LD_STRING M5a
25169: PPUSH
25170: CALL_OW 337
// Query ( QRefuel ) ;
25174: LD_STRING QRefuel
25176: PPUSH
25177: CALL_OW 97
// end ;
25181: END
// every 0 0$2 trigger not retreatToKirovAllowed and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) do var i , tmp ;
25182: LD_EXP 24
25186: NOT
25187: IFFALSE 25275
25189: PUSH
25190: LD_INT 22
25192: PUSH
25193: LD_INT 3
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 91
25202: PUSH
25203: LD_EXP 45
25207: PUSH
25208: LD_INT 16
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 3
25218: PUSH
25219: LD_INT 1
25221: PUSH
25222: LD_INT 21
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 58
25234: PUSH
25235: EMPTY
25236: LIST
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 3
25249: PUSH
25250: LD_INT 21
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: AND
25275: IFFALSE 25426
25277: GO 25279
25279: DISABLE
25280: LD_INT 0
25282: PPUSH
25283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirovDepot , 16 ] , [ f_not , [ f_and , [ f_type , unit_vehicle ] , [ f_empty ] ] ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_INT 22
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 91
25301: PUSH
25302: LD_EXP 45
25306: PUSH
25307: LD_INT 16
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 3
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: LD_INT 21
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 58
25333: PUSH
25334: EMPTY
25335: LIST
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 3
25348: PUSH
25349: LD_INT 21
25351: PUSH
25352: LD_INT 3
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: PPUSH
25369: CALL_OW 69
25373: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
25374: LD_VAR 0 2
25378: PPUSH
25379: CALL_OW 87
// InGameOn ;
25383: CALL_OW 8
// ComMoveXY ( tmp , 70 , 33 ) ;
25387: LD_VAR 0 2
25391: PPUSH
25392: LD_INT 70
25394: PPUSH
25395: LD_INT 33
25397: PPUSH
25398: CALL_OW 111
// SayRadio ( Kurin , D12-Kur-1 ) ;
25402: LD_EXP 33
25406: PPUSH
25407: LD_STRING D12-Kur-1
25409: PPUSH
25410: CALL_OW 94
// InGameOff ;
25414: CALL_OW 9
// wait ( 0 0$2 ) ;
25418: LD_INT 70
25420: PPUSH
25421: CALL_OW 67
// enable ;
25425: ENABLE
// end ;
25426: PPOPN 2
25428: END
// every 0 0$2 trigger not allowedToAttackOmicron and ( FilterUnitsInArea ( omicronBaseOuterArea , [ f_side , 3 ] ) or FilterUnitsInArea ( omicronBaseArea , [ f_side , 3 ] ) ) do var i , p ;
25429: LD_EXP 13
25433: NOT
25434: IFFALSE 25476
25436: PUSH
25437: LD_INT 20
25439: PPUSH
25440: LD_INT 22
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: PPUSH
25450: CALL_OW 70
25454: IFTRUE 25475
25456: PUSH
25457: LD_INT 18
25459: PPUSH
25460: LD_INT 22
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PPUSH
25470: CALL_OW 70
25474: OR
25475: AND
25476: IFFALSE 25748
25478: GO 25480
25480: DISABLE
25481: LD_INT 0
25483: PPUSH
25484: PPUSH
// begin if IsOk ( Gnyevko ) and omicronRetreatCounter = 0 then
25485: LD_EXP 30
25489: PPUSH
25490: CALL_OW 302
25494: IFFALSE 25506
25496: PUSH
25497: LD_EXP 27
25501: PUSH
25502: LD_INT 0
25504: EQUAL
25505: AND
25506: IFFALSE 25542
// begin DialogueOn ;
25508: CALL_OW 6
// Say ( Gnyevko , D11-Gny-1 ) ;
25512: LD_EXP 30
25516: PPUSH
25517: LD_STRING D11-Gny-1
25519: PPUSH
25520: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
25524: LD_EXP 29
25528: PPUSH
25529: LD_STRING D11-Bur-1
25531: PPUSH
25532: CALL_OW 88
// DialogueOff ;
25536: CALL_OW 7
// end else
25540: GO 25562
// begin DialogueOn ;
25542: CALL_OW 6
// SayRadio ( Kurin , D11-Kur-1 ) ;
25546: LD_EXP 33
25550: PPUSH
25551: LD_STRING D11-Kur-1
25553: PPUSH
25554: CALL_OW 94
// DialogueOff ;
25558: CALL_OW 7
// end ; omicronRetreatCounter := Inc ( omicronRetreatCounter ) ;
25562: LD_ADDR_EXP 27
25566: PUSH
25567: LD_EXP 27
25571: PPUSH
25572: CALL 68226 0 1
25576: ST_TO_ADDR
// p := 0 ;
25577: LD_ADDR_VAR 0 2
25581: PUSH
25582: LD_INT 0
25584: ST_TO_ADDR
// InGameOn ;
25585: CALL_OW 8
// repeat for i in FilterAllUnits ( [ [ f_or , [ f_inarea , omicronBaseOuterArea ] , [ f_inarea , omicronBaseArea ] ] , [ f_side , 3 ] ] ) do
25589: LD_ADDR_VAR 0 1
25593: PUSH
25594: LD_INT 2
25596: PUSH
25597: LD_INT 95
25599: PUSH
25600: LD_INT 20
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 95
25609: PUSH
25610: LD_INT 18
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 22
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PPUSH
25636: CALL_OW 69
25640: PUSH
25641: FOR_IN
25642: IFFALSE 25658
// ComMoveToArea ( i , omicronRetreatArea ) ;
25644: LD_VAR 0 1
25648: PPUSH
25649: LD_INT 27
25651: PPUSH
25652: CALL_OW 113
25656: GO 25641
25658: POP
25659: POP
// wait ( 0 0$01 ) ;
25660: LD_INT 35
25662: PPUSH
25663: CALL_OW 67
// p := Inc ( p ) ;
25667: LD_ADDR_VAR 0 2
25671: PUSH
25672: LD_VAR 0 2
25676: PPUSH
25677: CALL 68226 0 1
25681: ST_TO_ADDR
// until p > 10 or not FilterAllUnits ( [ [ f_or , [ f_inarea , omicronBaseOuterArea ] , [ f_inarea , omicronBaseArea ] ] , [ f_side , 3 ] ] ) ;
25682: LD_VAR 0 2
25686: PUSH
25687: LD_INT 10
25689: GREATER
25690: IFTRUE 25741
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: LD_INT 95
25698: PUSH
25699: LD_INT 20
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 95
25708: PUSH
25709: LD_INT 18
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 22
25723: PUSH
25724: LD_INT 3
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PPUSH
25735: CALL_OW 69
25739: NOT
25740: OR
25741: IFFALSE 25589
// InGameOff ;
25743: CALL_OW 9
// enable ;
25747: ENABLE
// end ;
25748: PPOPN 2
25750: END
// every 0 0$2 trigger ( FilterUnitsInArea ( omicronBaseInnerArea , [ f_enemy , 1 ] ) > 2 or GetLives ( usDep ) < 500 ) and allowedToAttackOmicron do var i , tmp , random , sol , nearest ;
25751: LD_INT 19
25753: PPUSH
25754: LD_INT 81
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PPUSH
25764: CALL_OW 70
25768: PUSH
25769: LD_INT 2
25771: GREATER
25772: IFTRUE 25787
25774: PUSH
25775: LD_INT 290
25777: PPUSH
25778: CALL_OW 256
25782: PUSH
25783: LD_INT 500
25785: LESS
25786: OR
25787: IFFALSE 25795
25789: PUSH
25790: LD_EXP 13
25794: AND
25795: IFFALSE 27461
25797: GO 25799
25799: DISABLE
25800: LD_INT 0
25802: PPUSH
25803: PPUSH
25804: PPUSH
25805: PPUSH
25806: PPUSH
// begin uc_side := 1 ;
25807: LD_ADDR_OWVAR 20
25811: PUSH
25812: LD_INT 1
25814: ST_TO_ADDR
// uc_nation := nation_american ;
25815: LD_ADDR_OWVAR 21
25819: PUSH
25820: LD_INT 1
25822: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
25823: LD_INT 1
25825: PPUSH
25826: LD_INT 1
25828: PPUSH
25829: CALL_OW 381
// random := CreateHuman ;
25833: LD_ADDR_VAR 0 3
25837: PUSH
25838: CALL_OW 44
25842: ST_TO_ADDR
// SayRadioNoFaceNoName ( random , D8-Sol1-1 ) ;
25843: LD_VAR 0 3
25847: PPUSH
25848: LD_STRING D8-Sol1-1
25850: PPUSH
25851: CALL 71098 0 2
// sol := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_sex , sex_male ] ] ) diff mainRuCharacters ;
25855: LD_ADDR_VAR 0 4
25859: PUSH
25860: LD_INT 22
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 50
25872: PUSH
25873: EMPTY
25874: LIST
25875: PUSH
25876: LD_INT 26
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: PPUSH
25891: CALL_OW 69
25895: PUSH
25896: LD_EXP 48
25900: DIFF
25901: ST_TO_ADDR
// if sol then
25902: LD_VAR 0 4
25906: IFFALSE 25924
// Say ( sol [ 1 ] , D8-RSol1-1 ) ;
25908: LD_VAR 0 4
25912: PUSH
25913: LD_INT 1
25915: ARRAY
25916: PPUSH
25917: LD_STRING D8-RSol1-1
25919: PPUSH
25920: CALL_OW 88
// if IsOk ( Kovalyuk ) then
25924: LD_EXP 34
25928: PPUSH
25929: CALL_OW 302
25933: IFFALSE 25947
// Say ( Kovalyuk , D8-Kov-1 ) ;
25935: LD_EXP 34
25939: PPUSH
25940: LD_STRING D8-Kov-1
25942: PPUSH
25943: CALL_OW 88
// americanRetreat := true ;
25947: LD_ADDR_EXP 26
25951: PUSH
25952: LD_INT 1
25954: ST_TO_ADDR
// wait ( 0 0$4 ) ;
25955: LD_INT 140
25957: PPUSH
25958: CALL_OW 67
// if Count ( sol ) > 1 then
25962: LD_VAR 0 4
25966: PPUSH
25967: CALL 30877 0 1
25971: PUSH
25972: LD_INT 1
25974: GREATER
25975: IFFALSE 25995
// Say ( sol [ 2 ] , D8-RSol2-1 ) else
25977: LD_VAR 0 4
25981: PUSH
25982: LD_INT 2
25984: ARRAY
25985: PPUSH
25986: LD_STRING D8-RSol2-1
25988: PPUSH
25989: CALL_OW 88
25993: GO 26018
// if IsOk ( Gnyevko ) then
25995: LD_EXP 30
25999: PPUSH
26000: CALL_OW 302
26004: IFFALSE 26018
// Say ( Gnyevko , D8-Gny-1 ) ;
26006: LD_EXP 30
26010: PPUSH
26011: LD_STRING D8-Gny-1
26013: PPUSH
26014: CALL_OW 88
// wait ( 0 0$4 ) ;
26018: LD_INT 140
26020: PPUSH
26021: CALL_OW 67
// DialogueOn ;
26025: CALL_OW 6
// CenterNowOnXY ( 161 , 108 ) ;
26029: LD_INT 161
26031: PPUSH
26032: LD_INT 108
26034: PPUSH
26035: CALL_OW 86
// SayRadio ( Grishko , D9-Gri-1 ) ;
26039: LD_EXP 37
26043: PPUSH
26044: LD_STRING D9-Gri-1
26046: PPUSH
26047: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
26051: LD_EXP 33
26055: PPUSH
26056: LD_STRING D9-Kur-1
26058: PPUSH
26059: CALL_OW 94
// SayRadio ( Grishko , D9-Gri-2 ) ;
26063: LD_EXP 37
26067: PPUSH
26068: LD_STRING D9-Gri-2
26070: PPUSH
26071: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
26075: LD_EXP 33
26079: PPUSH
26080: LD_STRING D9-Kur-2
26082: PPUSH
26083: CALL_OW 94
// dwait ( 0 0$2 ) ;
26087: LD_INT 70
26089: PPUSH
26090: CALL_OW 68
// SayRadio ( Grishko , D9-Gri-3 ) ;
26094: LD_EXP 37
26098: PPUSH
26099: LD_STRING D9-Gri-3
26101: PPUSH
26102: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
26106: LD_EXP 33
26110: PPUSH
26111: LD_STRING D9-Kur-3
26113: PPUSH
26114: CALL_OW 94
// DialogueOff ;
26118: CALL_OW 7
// arabAttackActive := true ;
26122: LD_ADDR_EXP 8
26126: PUSH
26127: LD_INT 1
26129: ST_TO_ADDR
// if IsInUnit ( Burlak ) then
26130: LD_EXP 29
26134: PPUSH
26135: CALL_OW 310
26139: IFFALSE 26157
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
26141: LD_EXP 29
26145: PPUSH
26146: CALL_OW 310
26150: PPUSH
26151: CALL_OW 87
26155: GO 26166
// CenterNowOnUnits ( Burlak ) ;
26157: LD_EXP 29
26161: PPUSH
26162: CALL_OW 87
// wait ( 0 0$5 ) ;
26166: LD_INT 175
26168: PPUSH
26169: CALL_OW 67
// SpawnArabAttack ;
26173: CALL 9501 0 0
// repeat wait ( 0 0$1 ) ;
26177: LD_INT 35
26179: PPUSH
26180: CALL_OW 67
// until FilterUnitsInArea ( kirovBaseOuterArea , [ f_side , 2 ] ) ;
26184: LD_INT 11
26186: PPUSH
26187: LD_INT 22
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PPUSH
26197: CALL_OW 70
26201: IFFALSE 26177
// InGameOn ;
26203: CALL_OW 8
// CenterNowOnXY ( 160 , 107 ) ;
26207: LD_INT 160
26209: PPUSH
26210: LD_INT 107
26212: PPUSH
26213: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff popovTeam do
26217: LD_ADDR_VAR 0 1
26221: PUSH
26222: LD_INT 22
26224: PUSH
26225: LD_INT 6
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 25
26237: PUSH
26238: LD_INT 2
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 25
26247: PUSH
26248: LD_INT 4
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 69
26268: PUSH
26269: LD_EXP 44
26273: DIFF
26274: PUSH
26275: FOR_IN
26276: IFFALSE 26320
// begin kirovBaseSquad := kirovBaseSquad diff i ;
26278: LD_ADDR_EXP 38
26282: PUSH
26283: LD_EXP 38
26287: PUSH
26288: LD_VAR 0 1
26292: DIFF
26293: ST_TO_ADDR
// ComExitBuilding ( i ) ;
26294: LD_VAR 0 1
26298: PPUSH
26299: CALL_OW 122
// AddComMoveXY ( i , 56 , 94 ) ;
26303: LD_VAR 0 1
26307: PPUSH
26308: LD_INT 56
26310: PPUSH
26311: LD_INT 94
26313: PPUSH
26314: CALL_OW 171
// end ;
26318: GO 26275
26320: POP
26321: POP
// SayRadio ( Kurin , D9a-Kur-1 ) ;
26322: LD_EXP 33
26326: PPUSH
26327: LD_STRING D9a-Kur-1
26329: PPUSH
26330: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
26334: LD_EXP 29
26338: PPUSH
26339: LD_STRING D9a-Bur-1
26341: PPUSH
26342: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
26346: LD_EXP 33
26350: PPUSH
26351: LD_STRING D9a-Kur-2
26353: PPUSH
26354: CALL_OW 94
// ComExitBuilding ( Kurin ) ;
26358: LD_EXP 33
26362: PPUSH
26363: CALL_OW 122
// wait ( 0 0$2 ) ;
26367: LD_INT 70
26369: PPUSH
26370: CALL_OW 67
// InGameOff ;
26374: CALL_OW 9
// if IsInUnit ( Burlak ) then
26378: LD_EXP 29
26382: PPUSH
26383: CALL_OW 310
26387: IFFALSE 26405
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
26389: LD_EXP 29
26393: PPUSH
26394: CALL_OW 310
26398: PPUSH
26399: CALL_OW 87
26403: GO 26414
// CenterNowOnUnits ( Burlak ) ;
26405: LD_EXP 29
26409: PPUSH
26410: CALL_OW 87
// ChangeMissionObjectives ( M6a ) ;
26414: LD_STRING M6a
26416: PPUSH
26417: CALL_OW 337
// for i in popovTeam do
26421: LD_ADDR_VAR 0 1
26425: PUSH
26426: LD_EXP 44
26430: PUSH
26431: FOR_IN
26432: IFFALSE 26445
// ComExitBuilding ( i ) ;
26434: LD_VAR 0 1
26438: PPUSH
26439: CALL_OW 122
26443: GO 26431
26445: POP
26446: POP
// wait ( 0 0$1 ) ;
26447: LD_INT 35
26449: PPUSH
26450: CALL_OW 67
// ComMoveXY ( Popov union popovTeam , 121 , 43 ) ;
26454: LD_EXP 35
26458: PUSH
26459: LD_EXP 44
26463: UNION
26464: PPUSH
26465: LD_INT 121
26467: PPUSH
26468: LD_INT 43
26470: PPUSH
26471: CALL_OW 111
// AddComMoveXY ( Popov union popovTeam , 90 , 60 ) ;
26475: LD_EXP 35
26479: PUSH
26480: LD_EXP 44
26484: UNION
26485: PPUSH
26486: LD_INT 90
26488: PPUSH
26489: LD_INT 60
26491: PPUSH
26492: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
26496: LD_INT 35
26498: PPUSH
26499: CALL_OW 67
// nearest := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_nation , 3 ] , [ f_ok ] ] ) diff [ Belkov , Gnyevko , Kovalyuk , Scholtze ] ;
26503: LD_ADDR_VAR 0 5
26507: PUSH
26508: LD_INT 22
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 21
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 26
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 23
26540: PUSH
26541: LD_INT 3
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 50
26550: PUSH
26551: EMPTY
26552: LIST
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: PPUSH
26561: CALL_OW 69
26565: PUSH
26566: LD_EXP 31
26570: PUSH
26571: LD_EXP 30
26575: PUSH
26576: LD_EXP 34
26580: PUSH
26581: LD_EXP 36
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: DIFF
26592: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , Popov , 7 ] , [ f_not , [ f_empty ] ] ] ) ;
26593: LD_ADDR_VAR 0 2
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_INT 3
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 21
26610: PUSH
26611: LD_INT 2
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 91
26620: PUSH
26621: LD_EXP 35
26625: PUSH
26626: LD_INT 7
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 3
26636: PUSH
26637: LD_INT 58
26639: PUSH
26640: EMPTY
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: ST_TO_ADDR
// if nearest then
26658: LD_VAR 0 5
26662: IFFALSE 26686
// nearest := NearestUnitToUnit ( nearest , Popov ) else
26664: LD_ADDR_VAR 0 5
26668: PUSH
26669: LD_VAR 0 5
26673: PPUSH
26674: LD_EXP 35
26678: PPUSH
26679: CALL_OW 74
26683: ST_TO_ADDR
26684: GO 26723
// if tmp then
26686: LD_VAR 0 2
26690: IFFALSE 26723
// begin for i in tmp do
26692: LD_ADDR_VAR 0 1
26696: PUSH
26697: LD_VAR 0 2
26701: PUSH
26702: FOR_IN
26703: IFFALSE 26721
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 311
26714: PPUSH
26715: CALL_OW 121
26719: GO 26702
26721: POP
26722: POP
// end ; until nearest and GetDistUnits ( nearest , Popov ) < 8 ;
26723: LD_VAR 0 5
26727: IFFALSE 26749
26729: PUSH
26730: LD_VAR 0 5
26734: PPUSH
26735: LD_EXP 35
26739: PPUSH
26740: CALL_OW 296
26744: PUSH
26745: LD_INT 8
26747: LESS
26748: AND
26749: IFFALSE 26496
// retreat := true ;
26751: LD_ADDR_EXP 18
26755: PUSH
26756: LD_INT 1
26758: ST_TO_ADDR
// for i in kirovAttackVehicles do
26759: LD_ADDR_VAR 0 1
26763: PUSH
26764: LD_EXP 50
26768: PUSH
26769: FOR_IN
26770: IFFALSE 26789
// ComMoveXY ( i , 78 , 38 ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_INT 78
26779: PPUSH
26780: LD_INT 38
26782: PPUSH
26783: CALL_OW 111
26787: GO 26769
26789: POP
26790: POP
// if nearest = Burlak then
26791: LD_VAR 0 5
26795: PUSH
26796: LD_EXP 29
26800: EQUAL
26801: IFFALSE 27055
// begin InGameOn ;
26803: CALL_OW 8
// CenterOnUnits ( Popov ) ;
26807: LD_EXP 35
26811: PPUSH
26812: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
26816: LD_ADDR_VAR 0 1
26820: PUSH
26821: LD_INT 22
26823: PUSH
26824: LD_INT 3
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 21
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PPUSH
26845: CALL_OW 69
26849: PUSH
26850: FOR_IN
26851: IFFALSE 26870
// ComMoveXY ( i , 83 , 49 ) ;
26853: LD_VAR 0 1
26857: PPUSH
26858: LD_INT 83
26860: PPUSH
26861: LD_INT 49
26863: PPUSH
26864: CALL_OW 111
26868: GO 26850
26870: POP
26871: POP
// ComMoveUnit ( Burlak , Popov ) ;
26872: LD_EXP 29
26876: PPUSH
26877: LD_EXP 35
26881: PPUSH
26882: CALL_OW 112
// ComTurnUnit ( Popov , Burlak ) ;
26886: LD_EXP 35
26890: PPUSH
26891: LD_EXP 29
26895: PPUSH
26896: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
26900: LD_EXP 29
26904: PPUSH
26905: LD_STRING D10a-Bur-1
26907: PPUSH
26908: CALL_OW 88
// ComTurnUnit ( Burlak , Popov ) ;
26912: LD_EXP 29
26916: PPUSH
26917: LD_EXP 35
26921: PPUSH
26922: CALL_OW 119
// Say ( Popov , D10a-Pop-1 ) ;
26926: LD_EXP 35
26930: PPUSH
26931: LD_STRING D10a-Pop-1
26933: PPUSH
26934: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
26938: LD_EXP 29
26942: PPUSH
26943: LD_STRING D10a-Bur-2
26945: PPUSH
26946: CALL_OW 88
// CenterOnXY ( 159 , 107 ) ;
26950: LD_INT 159
26952: PPUSH
26953: LD_INT 107
26955: PPUSH
26956: CALL_OW 84
// Say ( Popov , D10a-Pop-2 ) ;
26960: LD_EXP 35
26964: PPUSH
26965: LD_STRING D10a-Pop-2
26967: PPUSH
26968: CALL_OW 88
// CenterNowOnUnits ( Popov ) ;
26972: LD_EXP 35
26976: PPUSH
26977: CALL_OW 87
// Say ( Burlak , D10a-Bur-3 ) ;
26981: LD_EXP 29
26985: PPUSH
26986: LD_STRING D10a-Bur-3
26988: PPUSH
26989: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
26993: LD_EXP 35
26997: PPUSH
26998: LD_STRING D10a-Pop-3
27000: PPUSH
27001: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
27005: LD_EXP 29
27009: PPUSH
27010: LD_STRING D10a-Bur-4
27012: PPUSH
27013: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
27017: LD_EXP 35
27021: PPUSH
27022: LD_STRING D10a-Pop-4
27024: PPUSH
27025: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
27029: LD_EXP 29
27033: PPUSH
27034: LD_STRING D10a-Bur-5
27036: PPUSH
27037: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
27041: LD_EXP 35
27045: PPUSH
27046: LD_STRING D10a-Pop-5
27048: PPUSH
27049: CALL_OW 88
// end else
27053: GO 27280
// begin InGameOn ;
27055: CALL_OW 8
// CenterOnUnits ( Popov ) ;
27059: LD_EXP 35
27063: PPUSH
27064: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
27068: LD_ADDR_VAR 0 1
27072: PUSH
27073: LD_INT 22
27075: PUSH
27076: LD_INT 3
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 21
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PPUSH
27097: CALL_OW 69
27101: PUSH
27102: FOR_IN
27103: IFFALSE 27116
// ComHold ( i ) ;
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 140
27114: GO 27102
27116: POP
27117: POP
// ComMoveUnit ( nearest , Popov ) ;
27118: LD_VAR 0 5
27122: PPUSH
27123: LD_EXP 35
27127: PPUSH
27128: CALL_OW 112
// ComTurnUnit ( Popov , nearest ) ;
27132: LD_EXP 35
27136: PPUSH
27137: LD_VAR 0 5
27141: PPUSH
27142: CALL_OW 119
// Say ( nearest , D10b-RSol1-1 ) ;
27146: LD_VAR 0 5
27150: PPUSH
27151: LD_STRING D10b-RSol1-1
27153: PPUSH
27154: CALL_OW 88
// ComTurnUnit ( nearest , Popov ) ;
27158: LD_VAR 0 5
27162: PPUSH
27163: LD_EXP 35
27167: PPUSH
27168: CALL_OW 119
// Say ( Popov , D10b-Pop-1 ) ;
27172: LD_EXP 35
27176: PPUSH
27177: LD_STRING D10b-Pop-1
27179: PPUSH
27180: CALL_OW 88
// Say ( nearest , D10b-RSol1-2 ) ;
27184: LD_VAR 0 5
27188: PPUSH
27189: LD_STRING D10b-RSol1-2
27191: PPUSH
27192: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-2 ) ;
27196: LD_EXP 35
27200: PPUSH
27201: LD_STRING D10b-Pop-2
27203: PPUSH
27204: CALL_OW 94
// Say ( Burlak , D10b-Bur-2 ) ;
27208: LD_EXP 29
27212: PPUSH
27213: LD_STRING D10b-Bur-2
27215: PPUSH
27216: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-3 ) ;
27220: LD_EXP 35
27224: PPUSH
27225: LD_STRING D10b-Pop-3
27227: PPUSH
27228: CALL_OW 94
// Say ( Burlak , D10b-Bur-3 ) ;
27232: LD_EXP 29
27236: PPUSH
27237: LD_STRING D10b-Bur-3
27239: PPUSH
27240: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-4 ) ;
27244: LD_EXP 35
27248: PPUSH
27249: LD_STRING D10b-Pop-4
27251: PPUSH
27252: CALL_OW 94
// Say ( Burlak , D10b-Bur-4 ) ;
27256: LD_EXP 29
27260: PPUSH
27261: LD_STRING D10b-Bur-4
27263: PPUSH
27264: CALL_OW 88
// SayRadio ( Popov , D10b-Pop-5 ) ;
27268: LD_EXP 35
27272: PPUSH
27273: LD_STRING D10b-Pop-5
27275: PPUSH
27276: CALL_OW 94
// end ; InGameOff ;
27280: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
27284: LD_STRING M6
27286: PPUSH
27287: CALL_OW 337
// SetAreaMapShow ( retreatArea , 1 ) ;
27291: LD_INT 34
27293: PPUSH
27294: LD_INT 1
27296: PPUSH
27297: CALL_OW 424
// ComMoveXY ( Popov ^ popovTeam ^ UnitFilter ( kirovVehicles , [ f_ok ] ) , 67 , 127 ) ;
27301: LD_EXP 35
27305: PUSH
27306: LD_EXP 44
27310: ADD
27311: PUSH
27312: LD_EXP 49
27316: PPUSH
27317: LD_INT 50
27319: PUSH
27320: EMPTY
27321: LIST
27322: PPUSH
27323: CALL_OW 72
27327: ADD
27328: PPUSH
27329: LD_INT 67
27331: PPUSH
27332: LD_INT 127
27334: PPUSH
27335: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27339: LD_INT 35
27341: PPUSH
27342: CALL_OW 67
// ComMoveXY ( Popov ^ popovTeam , 67 , 127 ) ;
27346: LD_EXP 35
27350: PUSH
27351: LD_EXP 44
27355: ADD
27356: PPUSH
27357: LD_INT 67
27359: PPUSH
27360: LD_INT 127
27362: PPUSH
27363: CALL_OW 111
// until FilterUnitsExceptArea ( retreatArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterUnitsExceptArea ( retreatArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
27367: LD_INT 34
27369: PPUSH
27370: LD_INT 22
27372: PUSH
27373: LD_INT 3
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 21
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PPUSH
27394: CALL_OW 71
27398: PUSH
27399: LD_INT 0
27401: EQUAL
27402: IFFALSE 27455
27404: PUSH
27405: LD_INT 34
27407: PPUSH
27408: LD_INT 22
27410: PUSH
27411: LD_INT 3
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 21
27420: PUSH
27421: LD_INT 2
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 3
27430: PUSH
27431: LD_INT 58
27433: PUSH
27434: EMPTY
27435: LIST
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: LIST
27445: PPUSH
27446: CALL_OW 71
27450: PUSH
27451: LD_INT 0
27453: EQUAL
27454: AND
27455: IFFALSE 27339
// FinishMission ;
27457: CALL 27464 0 0
// end ;
27461: PPOPN 5
27463: END
// function FinishMission ; var i , saveVehicles ; begin
27464: LD_INT 0
27466: PPUSH
27467: PPUSH
27468: PPUSH
// if not joinToOmicronCounter then
27469: LD_EXP 28
27473: NOT
27474: IFFALSE 27483
// SetAchievement ( ACH_REINFORCE ) ;
27476: LD_STRING ACH_REINFORCE
27478: PPUSH
27479: CALL_OW 543
// if Count ( joinToOmicronCounter ) > [ 12 , 10 , 8 , 6 ] [ Difficulty ] then
27483: LD_EXP 28
27487: PPUSH
27488: CALL 30877 0 1
27492: PUSH
27493: LD_INT 12
27495: PUSH
27496: LD_INT 10
27498: PUSH
27499: LD_INT 8
27501: PUSH
27502: LD_INT 6
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: PUSH
27511: LD_OWVAR 67
27515: ARRAY
27516: GREATER
27517: IFFALSE 27532
// AddMedal ( PreventReinforcements , - 1 ) else
27519: LD_STRING PreventReinforcements
27521: PPUSH
27522: LD_INT 1
27524: NEG
27525: PPUSH
27526: CALL_OW 101
27530: GO 27542
// AddMedal ( PreventReinforcements , 1 ) ;
27532: LD_STRING PreventReinforcements
27534: PPUSH
27535: LD_INT 1
27537: PPUSH
27538: CALL_OW 101
// if IsLive ( Scholtze ) then
27542: LD_EXP 36
27546: PPUSH
27547: CALL_OW 300
27551: IFFALSE 27565
// AddMedal ( Scholtze , 1 ) else
27553: LD_STRING Scholtze
27555: PPUSH
27556: LD_INT 1
27558: PPUSH
27559: CALL_OW 101
27563: GO 27595
// if hasScholtze then
27565: LD_EXP 11
27569: IFFALSE 27584
// AddMedal ( Scholtze , - 2 ) else
27571: LD_STRING Scholtze
27573: PPUSH
27574: LD_INT 2
27576: NEG
27577: PPUSH
27578: CALL_OW 101
27582: GO 27595
// AddMedal ( Scholtze , - 1 ) ;
27584: LD_STRING Scholtze
27586: PPUSH
27587: LD_INT 1
27589: NEG
27590: PPUSH
27591: CALL_OW 101
// GiveMedals ( MAIN ) ;
27595: LD_STRING MAIN
27597: PPUSH
27598: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) ) ;
27602: LD_INT 22
27604: PUSH
27605: LD_INT 3
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 21
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 23
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: PPUSH
27637: CALL_OW 69
27641: PPUSH
27642: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
27646: LD_EXP 29
27650: PPUSH
27651: LD_EXP 3
27655: PUSH
27656: LD_STRING Burlak
27658: STR
27659: PPUSH
27660: CALL_OW 38
// SaveCharacters ( Popov , currentMissionPrefix & Popov ) ;
27664: LD_EXP 35
27668: PPUSH
27669: LD_EXP 3
27673: PUSH
27674: LD_STRING Popov
27676: STR
27677: PPUSH
27678: CALL_OW 38
// if IsLive ( Gnyevko ) then
27682: LD_EXP 30
27686: PPUSH
27687: CALL_OW 300
27691: IFFALSE 27711
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
27693: LD_EXP 30
27697: PPUSH
27698: LD_EXP 3
27702: PUSH
27703: LD_STRING Gnyevko
27705: STR
27706: PPUSH
27707: CALL_OW 38
// if IsLive ( Kovalyuk ) then
27711: LD_EXP 34
27715: PPUSH
27716: CALL_OW 300
27720: IFFALSE 27740
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
27722: LD_EXP 34
27726: PPUSH
27727: LD_EXP 3
27731: PUSH
27732: LD_STRING Kovalyuk
27734: STR
27735: PPUSH
27736: CALL_OW 38
// if IsLive ( Belkov ) then
27740: LD_EXP 31
27744: PPUSH
27745: CALL_OW 300
27749: IFFALSE 27769
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
27751: LD_EXP 31
27755: PPUSH
27756: LD_EXP 3
27760: PUSH
27761: LD_STRING Belkov
27763: STR
27764: PPUSH
27765: CALL_OW 38
// if IsLive ( Kirilenkova ) then
27769: LD_EXP 32
27773: PPUSH
27774: CALL_OW 300
27778: IFFALSE 27798
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
27780: LD_EXP 32
27784: PPUSH
27785: LD_EXP 3
27789: PUSH
27790: LD_STRING Kirilenkova
27792: STR
27793: PPUSH
27794: CALL_OW 38
// if IsLive ( Scholtze ) and hasScholtze then
27798: LD_EXP 36
27802: PPUSH
27803: CALL_OW 300
27807: IFFALSE 27815
27809: PUSH
27810: LD_EXP 11
27814: AND
27815: IFFALSE 27835
// SaveCharacters ( Scholtze , currentMissionPrefix & Scholtze ) ;
27817: LD_EXP 36
27821: PPUSH
27822: LD_EXP 3
27826: PUSH
27827: LD_STRING Scholtze
27829: STR
27830: PPUSH
27831: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova , Scholtze , Popov ] , currentMissionPrefix & burlakTeam ) ;
27835: LD_INT 22
27837: PUSH
27838: LD_INT 3
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 23
27847: PUSH
27848: LD_INT 3
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 21
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: PPUSH
27870: CALL_OW 69
27874: PUSH
27875: LD_EXP 29
27879: PUSH
27880: LD_EXP 30
27884: PUSH
27885: LD_EXP 34
27889: PUSH
27890: LD_EXP 31
27894: PUSH
27895: LD_EXP 32
27899: PUSH
27900: LD_EXP 36
27904: PUSH
27905: LD_EXP 35
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: DIFF
27919: PPUSH
27920: LD_EXP 3
27924: PUSH
27925: LD_STRING burlakTeam
27927: STR
27928: PPUSH
27929: CALL_OW 38
// SaveCharacters ( FilterUnitsInArea ( retreatArea , [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Gnyevko , Kovalyuk , Belkov , Kirilenkova , Popov , Kurin , Scholtze ] , currentMissionPrefix & popovTeam ) ;
27933: LD_INT 34
27935: PPUSH
27936: LD_INT 22
27938: PUSH
27939: LD_INT 6
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 23
27948: PUSH
27949: LD_INT 3
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 50
27958: PUSH
27959: EMPTY
27960: LIST
27961: PUSH
27962: LD_INT 21
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: PPUSH
27978: CALL_OW 70
27982: PUSH
27983: LD_EXP 30
27987: PUSH
27988: LD_EXP 34
27992: PUSH
27993: LD_EXP 31
27997: PUSH
27998: LD_EXP 32
28002: PUSH
28003: LD_EXP 35
28007: PUSH
28008: LD_EXP 33
28012: PUSH
28013: LD_EXP 36
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: DIFF
28027: PPUSH
28028: LD_EXP 3
28032: PUSH
28033: LD_STRING popovTeam
28035: STR
28036: PPUSH
28037: CALL_OW 38
// SaveTech ( 3 , currentMissionPrefix & Techs ) ;
28041: LD_INT 3
28043: PPUSH
28044: LD_EXP 3
28048: PUSH
28049: LD_STRING Techs
28051: STR
28052: PPUSH
28053: CALL 13400 0 2
// saveVehicles := [ ] ;
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: EMPTY
28063: ST_TO_ADDR
// for i in FilterUnitsInArea ( retreatArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] , [ f_ok ] ] ) do
28064: LD_ADDR_VAR 0 2
28068: PUSH
28069: LD_INT 34
28071: PPUSH
28072: LD_INT 22
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 21
28084: PUSH
28085: LD_INT 2
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 3
28094: PUSH
28095: LD_INT 58
28097: PUSH
28098: EMPTY
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 50
28107: PUSH
28108: EMPTY
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: PPUSH
28117: CALL_OW 70
28121: PUSH
28122: FOR_IN
28123: IFFALSE 28199
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) ] ) ;
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_VAR 0 3
28134: PPUSH
28135: LD_VAR 0 2
28139: PPUSH
28140: CALL_OW 265
28144: PUSH
28145: LD_VAR 0 2
28149: PPUSH
28150: CALL_OW 262
28154: PUSH
28155: LD_VAR 0 2
28159: PPUSH
28160: CALL_OW 263
28164: PUSH
28165: LD_VAR 0 2
28169: PPUSH
28170: CALL_OW 264
28174: PUSH
28175: LD_VAR 0 2
28179: PPUSH
28180: CALL_OW 248
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: PPUSH
28192: CALL 66853 0 2
28196: ST_TO_ADDR
28197: GO 28122
28199: POP
28200: POP
// if saveVehicles then
28201: LD_VAR 0 3
28205: IFFALSE 28225
// SaveVariable ( saveVehicles , currentMissionPrefix & Vehicles ) ;
28207: LD_VAR 0 3
28211: PPUSH
28212: LD_EXP 3
28216: PUSH
28217: LD_STRING Vehicles
28219: STR
28220: PPUSH
28221: CALL_OW 39
// YouWin ;
28225: CALL_OW 103
// end ; end_of_file
28229: LD_VAR 0 1
28233: RET
// every 3 3$00 + 0 0$20 trigger not arabAttackActive do
28234: LD_EXP 8
28238: NOT
28239: IFFALSE 28266
28241: GO 28243
28243: DISABLE
// begin enable ;
28244: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , kirovCratesArea , true ) ;
28245: LD_INT 1
28247: PPUSH
28248: LD_INT 5
28250: PPUSH
28251: CALL_OW 12
28255: PPUSH
28256: LD_INT 13
28258: PPUSH
28259: LD_INT 1
28261: PPUSH
28262: CALL_OW 55
// end ;
28266: END
// every 2 2$30 trigger not allowedToAttackOmicron and GetResourceArea ( omicronBaseArea , mat_cans ) < 6 do
28267: LD_EXP 13
28271: NOT
28272: IFFALSE 28290
28274: PUSH
28275: LD_INT 18
28277: PPUSH
28278: LD_INT 1
28280: PPUSH
28281: CALL_OW 287
28285: PUSH
28286: LD_INT 6
28288: LESS
28289: AND
28290: IFFALSE 28317
28292: GO 28294
28294: DISABLE
// begin enable ;
28295: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , omicronBaseArea , true ) ;
28296: LD_INT 1
28298: PPUSH
28299: LD_INT 5
28301: PPUSH
28302: CALL_OW 12
28306: PPUSH
28307: LD_INT 18
28309: PPUSH
28310: LD_INT 1
28312: PPUSH
28313: CALL_OW 55
// end ;
28317: END
// every 0 0$20 do var i , time , area ;
28318: GO 28320
28320: DISABLE
28321: LD_INT 0
28323: PPUSH
28324: PPUSH
28325: PPUSH
// begin for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] + rand ( 0 , 1 ) do
28326: LD_ADDR_VAR 0 1
28330: PUSH
28331: DOUBLE
28332: LD_INT 1
28334: DEC
28335: ST_TO_ADDR
28336: LD_INT 3
28338: PUSH
28339: LD_INT 3
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: PUSH
28354: LD_OWVAR 67
28358: ARRAY
28359: PUSH
28360: LD_INT 0
28362: PPUSH
28363: LD_INT 1
28365: PPUSH
28366: CALL_OW 12
28370: PLUS
28371: PUSH
28372: FOR_TO
28373: IFFALSE 28411
// begin CreateCratesXYR ( rand ( 1 , 5 ) , 110 , 97 , 12 , true ) ;
28375: LD_INT 1
28377: PPUSH
28378: LD_INT 5
28380: PPUSH
28381: CALL_OW 12
28385: PPUSH
28386: LD_INT 110
28388: PPUSH
28389: LD_INT 97
28391: PPUSH
28392: LD_INT 12
28394: PPUSH
28395: LD_INT 1
28397: PPUSH
28398: CALL_OW 56
// wait ( 0 0$15 ) ;
28402: LD_INT 525
28404: PPUSH
28405: CALL_OW 67
// end ;
28409: GO 28372
28411: POP
28412: POP
// for i := 1 to 6 do
28413: LD_ADDR_VAR 0 1
28417: PUSH
28418: DOUBLE
28419: LD_INT 1
28421: DEC
28422: ST_TO_ADDR
28423: LD_INT 6
28425: PUSH
28426: FOR_TO
28427: IFFALSE 28459
// begin CreateCratesArea ( rand ( 3 , 5 ) , beriaCrates1Area , true ) ;
28429: LD_INT 3
28431: PPUSH
28432: LD_INT 5
28434: PPUSH
28435: CALL_OW 12
28439: PPUSH
28440: LD_INT 23
28442: PPUSH
28443: LD_INT 1
28445: PPUSH
28446: CALL_OW 55
// wait ( 0 0$25 ) ;
28450: LD_INT 875
28452: PPUSH
28453: CALL_OW 67
// end ;
28457: GO 28426
28459: POP
28460: POP
// CreateCratesXYR ( 5 , 76 , 117 , 5 , true ) ;
28461: LD_INT 5
28463: PPUSH
28464: LD_INT 76
28466: PPUSH
28467: LD_INT 117
28469: PPUSH
28470: LD_INT 5
28472: PPUSH
28473: LD_INT 1
28475: PPUSH
28476: CALL_OW 56
// repeat wait ( 0 0$1 ) ;
28480: LD_INT 35
28482: PPUSH
28483: CALL_OW 67
// until hasOilTower ;
28487: LD_EXP 14
28491: IFFALSE 28480
// repeat wait ( 0 0$45 ) ;
28493: LD_INT 1575
28495: PPUSH
28496: CALL_OW 67
// area := 0 ;
28500: LD_ADDR_VAR 0 3
28504: PUSH
28505: LD_INT 0
28507: ST_TO_ADDR
// case rand ( 0 , 10 ) of 1 .. 2 :
28508: LD_INT 0
28510: PPUSH
28511: LD_INT 10
28513: PPUSH
28514: CALL_OW 12
28518: PUSH
28519: LD_INT 1
28521: DOUBLE
28522: GREATEREQUAL
28523: IFFALSE 28531
28525: LD_INT 2
28527: DOUBLE
28528: LESSEQUAL
28529: IFTRUE 28533
28531: GO 28544
28533: POP
// area := beriaCrates1Area ; 3 .. 7 :
28534: LD_ADDR_VAR 0 3
28538: PUSH
28539: LD_INT 23
28541: ST_TO_ADDR
28542: GO 28595
28544: LD_INT 3
28546: DOUBLE
28547: GREATEREQUAL
28548: IFFALSE 28556
28550: LD_INT 7
28552: DOUBLE
28553: LESSEQUAL
28554: IFTRUE 28558
28556: GO 28569
28558: POP
// area := beriaCrates2Area ; 8 .. 10 :
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_INT 24
28566: ST_TO_ADDR
28567: GO 28595
28569: LD_INT 8
28571: DOUBLE
28572: GREATEREQUAL
28573: IFFALSE 28581
28575: LD_INT 10
28577: DOUBLE
28578: LESSEQUAL
28579: IFTRUE 28583
28581: GO 28594
28583: POP
// area := beriaCrates3Area ; end ;
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 25
28591: ST_TO_ADDR
28592: GO 28595
28594: POP
// if area and GetResourceArea ( area , mat_cans ) < 6 then
28595: LD_VAR 0 3
28599: IFFALSE 28619
28601: PUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: LD_INT 1
28609: PPUSH
28610: CALL_OW 287
28614: PUSH
28615: LD_INT 6
28617: LESS
28618: AND
28619: IFFALSE 28644
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
28621: LD_INT 1
28623: PPUSH
28624: LD_INT 5
28626: PPUSH
28627: CALL_OW 12
28631: PPUSH
28632: LD_VAR 0 3
28636: PPUSH
28637: LD_INT 1
28639: PPUSH
28640: CALL_OW 55
// until arabAttackActive ;
28644: LD_EXP 8
28648: IFFALSE 28493
// end ; end_of_file
28650: PPOPN 3
28652: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
// if exist_mode then
28657: LD_VAR 0 2
28661: IFFALSE 28707
// begin unit := CreateCharacter ( prefix & ident ) ;
28663: LD_ADDR_VAR 0 5
28667: PUSH
28668: LD_VAR 0 3
28672: PUSH
28673: LD_VAR 0 1
28677: STR
28678: PPUSH
28679: CALL_OW 34
28683: ST_TO_ADDR
// if unit then
28684: LD_VAR 0 5
28688: IFFALSE 28705
// DeleteCharacters ( prefix & ident ) ;
28690: LD_VAR 0 3
28694: PUSH
28695: LD_VAR 0 1
28699: STR
28700: PPUSH
28701: CALL_OW 40
// end else
28705: GO 28722
// unit := NewCharacter ( ident ) ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 25
28721: ST_TO_ADDR
// result := unit ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_VAR 0 5
28731: ST_TO_ADDR
// end ;
28732: LD_VAR 0 4
28736: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
// if exist_mode then
28741: LD_VAR 0 2
28745: IFFALSE 28770
// unit := CreateCharacter ( prefix & ident ) else
28747: LD_ADDR_VAR 0 5
28751: PUSH
28752: LD_VAR 0 3
28756: PUSH
28757: LD_VAR 0 1
28761: STR
28762: PPUSH
28763: CALL_OW 34
28767: ST_TO_ADDR
28768: GO 28785
// unit := NewCharacter ( ident ) ;
28770: LD_ADDR_VAR 0 5
28774: PUSH
28775: LD_VAR 0 1
28779: PPUSH
28780: CALL_OW 25
28784: ST_TO_ADDR
// result := unit ;
28785: LD_ADDR_VAR 0 4
28789: PUSH
28790: LD_VAR 0 5
28794: ST_TO_ADDR
// end ;
28795: LD_VAR 0 4
28799: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28800: LD_INT 0
28802: PPUSH
28803: PPUSH
// if not side or not nation then
28804: LD_VAR 0 1
28808: NOT
28809: IFTRUE 28818
28811: PUSH
28812: LD_VAR 0 2
28816: NOT
28817: OR
28818: IFFALSE 28822
// exit ;
28820: GO 29616
// case nation of nation_american :
28822: LD_VAR 0 2
28826: PUSH
28827: LD_INT 1
28829: DOUBLE
28830: EQUAL
28831: IFTRUE 28835
28833: GO 29057
28835: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
28836: LD_ADDR_VAR 0 4
28840: PUSH
28841: LD_INT 35
28843: PUSH
28844: LD_INT 45
28846: PUSH
28847: LD_INT 46
28849: PUSH
28850: LD_INT 47
28852: PUSH
28853: LD_INT 82
28855: PUSH
28856: LD_INT 83
28858: PUSH
28859: LD_INT 84
28861: PUSH
28862: LD_INT 85
28864: PUSH
28865: LD_INT 86
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 6
28876: PUSH
28877: LD_INT 15
28879: PUSH
28880: LD_INT 16
28882: PUSH
28883: LD_INT 7
28885: PUSH
28886: LD_INT 12
28888: PUSH
28889: LD_INT 13
28891: PUSH
28892: LD_INT 10
28894: PUSH
28895: LD_INT 14
28897: PUSH
28898: LD_INT 20
28900: PUSH
28901: LD_INT 21
28903: PUSH
28904: LD_INT 22
28906: PUSH
28907: LD_INT 25
28909: PUSH
28910: LD_INT 32
28912: PUSH
28913: LD_INT 27
28915: PUSH
28916: LD_INT 36
28918: PUSH
28919: LD_INT 69
28921: PUSH
28922: LD_INT 39
28924: PUSH
28925: LD_INT 34
28927: PUSH
28928: LD_INT 40
28930: PUSH
28931: LD_INT 48
28933: PUSH
28934: LD_INT 49
28936: PUSH
28937: LD_INT 50
28939: PUSH
28940: LD_INT 51
28942: PUSH
28943: LD_INT 52
28945: PUSH
28946: LD_INT 53
28948: PUSH
28949: LD_INT 54
28951: PUSH
28952: LD_INT 55
28954: PUSH
28955: LD_INT 56
28957: PUSH
28958: LD_INT 57
28960: PUSH
28961: LD_INT 58
28963: PUSH
28964: LD_INT 59
28966: PUSH
28967: LD_INT 60
28969: PUSH
28970: LD_INT 61
28972: PUSH
28973: LD_INT 62
28975: PUSH
28976: LD_INT 80
28978: PUSH
28979: LD_INT 82
28981: PUSH
28982: LD_INT 83
28984: PUSH
28985: LD_INT 84
28987: PUSH
28988: LD_INT 85
28990: PUSH
28991: LD_INT 86
28993: PUSH
28994: LD_INT 90
28996: PUSH
28997: LD_INT 93
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
29055: GO 29538
29057: LD_INT 2
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29299
29065: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
29066: LD_ADDR_VAR 0 4
29070: PUSH
29071: LD_INT 35
29073: PUSH
29074: LD_INT 45
29076: PUSH
29077: LD_INT 46
29079: PUSH
29080: LD_INT 47
29082: PUSH
29083: LD_INT 82
29085: PUSH
29086: LD_INT 83
29088: PUSH
29089: LD_INT 84
29091: PUSH
29092: LD_INT 85
29094: PUSH
29095: LD_INT 87
29097: PUSH
29098: LD_INT 70
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 11
29106: PUSH
29107: LD_INT 3
29109: PUSH
29110: LD_INT 4
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: LD_INT 6
29118: PUSH
29119: LD_INT 15
29121: PUSH
29122: LD_INT 18
29124: PUSH
29125: LD_INT 7
29127: PUSH
29128: LD_INT 17
29130: PUSH
29131: LD_INT 8
29133: PUSH
29134: LD_INT 20
29136: PUSH
29137: LD_INT 21
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_INT 72
29145: PUSH
29146: LD_INT 26
29148: PUSH
29149: LD_INT 69
29151: PUSH
29152: LD_INT 39
29154: PUSH
29155: LD_INT 40
29157: PUSH
29158: LD_INT 41
29160: PUSH
29161: LD_INT 42
29163: PUSH
29164: LD_INT 43
29166: PUSH
29167: LD_INT 48
29169: PUSH
29170: LD_INT 49
29172: PUSH
29173: LD_INT 50
29175: PUSH
29176: LD_INT 51
29178: PUSH
29179: LD_INT 52
29181: PUSH
29182: LD_INT 53
29184: PUSH
29185: LD_INT 54
29187: PUSH
29188: LD_INT 55
29190: PUSH
29191: LD_INT 56
29193: PUSH
29194: LD_INT 60
29196: PUSH
29197: LD_INT 61
29199: PUSH
29200: LD_INT 62
29202: PUSH
29203: LD_INT 66
29205: PUSH
29206: LD_INT 67
29208: PUSH
29209: LD_INT 68
29211: PUSH
29212: LD_INT 81
29214: PUSH
29215: LD_INT 82
29217: PUSH
29218: LD_INT 83
29220: PUSH
29221: LD_INT 84
29223: PUSH
29224: LD_INT 85
29226: PUSH
29227: LD_INT 87
29229: PUSH
29230: LD_INT 88
29232: PUSH
29233: LD_INT 92
29235: PUSH
29236: LD_INT 94
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: ST_TO_ADDR
29297: GO 29538
29299: LD_INT 3
29301: DOUBLE
29302: EQUAL
29303: IFTRUE 29307
29305: GO 29537
29307: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
29308: LD_ADDR_VAR 0 4
29312: PUSH
29313: LD_INT 46
29315: PUSH
29316: LD_INT 47
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 82
29327: PUSH
29328: LD_INT 83
29330: PUSH
29331: LD_INT 84
29333: PUSH
29334: LD_INT 85
29336: PUSH
29337: LD_INT 86
29339: PUSH
29340: LD_INT 11
29342: PUSH
29343: LD_INT 9
29345: PUSH
29346: LD_INT 20
29348: PUSH
29349: LD_INT 19
29351: PUSH
29352: LD_INT 21
29354: PUSH
29355: LD_INT 24
29357: PUSH
29358: LD_INT 22
29360: PUSH
29361: LD_INT 25
29363: PUSH
29364: LD_INT 28
29366: PUSH
29367: LD_INT 29
29369: PUSH
29370: LD_INT 30
29372: PUSH
29373: LD_INT 31
29375: PUSH
29376: LD_INT 37
29378: PUSH
29379: LD_INT 38
29381: PUSH
29382: LD_INT 32
29384: PUSH
29385: LD_INT 27
29387: PUSH
29388: LD_INT 33
29390: PUSH
29391: LD_INT 69
29393: PUSH
29394: LD_INT 39
29396: PUSH
29397: LD_INT 34
29399: PUSH
29400: LD_INT 40
29402: PUSH
29403: LD_INT 71
29405: PUSH
29406: LD_INT 23
29408: PUSH
29409: LD_INT 44
29411: PUSH
29412: LD_INT 48
29414: PUSH
29415: LD_INT 49
29417: PUSH
29418: LD_INT 50
29420: PUSH
29421: LD_INT 51
29423: PUSH
29424: LD_INT 52
29426: PUSH
29427: LD_INT 53
29429: PUSH
29430: LD_INT 54
29432: PUSH
29433: LD_INT 55
29435: PUSH
29436: LD_INT 56
29438: PUSH
29439: LD_INT 57
29441: PUSH
29442: LD_INT 58
29444: PUSH
29445: LD_INT 59
29447: PUSH
29448: LD_INT 63
29450: PUSH
29451: LD_INT 64
29453: PUSH
29454: LD_INT 65
29456: PUSH
29457: LD_INT 82
29459: PUSH
29460: LD_INT 83
29462: PUSH
29463: LD_INT 84
29465: PUSH
29466: LD_INT 85
29468: PUSH
29469: LD_INT 86
29471: PUSH
29472: LD_INT 89
29474: PUSH
29475: LD_INT 91
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: ST_TO_ADDR
29535: GO 29538
29537: POP
// if state > - 1 and state < 3 then
29538: LD_VAR 0 3
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: GREATER
29547: IFFALSE 29559
29549: PUSH
29550: LD_VAR 0 3
29554: PUSH
29555: LD_INT 3
29557: LESS
29558: AND
29559: IFFALSE 29616
// for i in result do
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_VAR 0 4
29570: PUSH
29571: FOR_IN
29572: IFFALSE 29614
// if GetTech ( i , side ) <> state then
29574: LD_VAR 0 5
29578: PPUSH
29579: LD_VAR 0 1
29583: PPUSH
29584: CALL_OW 321
29588: PUSH
29589: LD_VAR 0 3
29593: NONEQUAL
29594: IFFALSE 29612
// result := result diff i ;
29596: LD_ADDR_VAR 0 4
29600: PUSH
29601: LD_VAR 0 4
29605: PUSH
29606: LD_VAR 0 5
29610: DIFF
29611: ST_TO_ADDR
29612: GO 29571
29614: POP
29615: POP
// end ;
29616: LD_VAR 0 4
29620: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29621: LD_INT 0
29623: PPUSH
29624: PPUSH
29625: PPUSH
// result := true ;
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_INT 1
29633: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29634: LD_ADDR_VAR 0 5
29638: PUSH
29639: LD_VAR 0 2
29643: PPUSH
29644: CALL_OW 480
29648: ST_TO_ADDR
// if not tmp then
29649: LD_VAR 0 5
29653: NOT
29654: IFFALSE 29658
// exit ;
29656: GO 29707
// for i in tmp do
29658: LD_ADDR_VAR 0 4
29662: PUSH
29663: LD_VAR 0 5
29667: PUSH
29668: FOR_IN
29669: IFFALSE 29705
// if GetTech ( i , side ) <> state_researched then
29671: LD_VAR 0 4
29675: PPUSH
29676: LD_VAR 0 1
29680: PPUSH
29681: CALL_OW 321
29685: PUSH
29686: LD_INT 2
29688: NONEQUAL
29689: IFFALSE 29703
// begin result := false ;
29691: LD_ADDR_VAR 0 3
29695: PUSH
29696: LD_INT 0
29698: ST_TO_ADDR
// exit ;
29699: POP
29700: POP
29701: GO 29707
// end ;
29703: GO 29668
29705: POP
29706: POP
// end ;
29707: LD_VAR 0 3
29711: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29712: LD_INT 0
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
29726: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29727: LD_VAR 0 1
29731: NOT
29732: IFTRUE 29749
29734: PUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: CALL_OW 257
29744: PUSH
29745: LD_INT 9
29747: NONEQUAL
29748: OR
29749: IFFALSE 29753
// exit ;
29751: GO 30332
// side := GetSide ( unit ) ;
29753: LD_ADDR_VAR 0 9
29757: PUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 255
29767: ST_TO_ADDR
// tech_space := tech_spacanom ;
29768: LD_ADDR_VAR 0 12
29772: PUSH
29773: LD_INT 29
29775: ST_TO_ADDR
// tech_time := tech_taurad ;
29776: LD_ADDR_VAR 0 13
29780: PUSH
29781: LD_INT 28
29783: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29784: LD_ADDR_VAR 0 11
29788: PUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 310
29798: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29799: LD_VAR 0 11
29803: PPUSH
29804: CALL_OW 247
29808: PUSH
29809: LD_INT 2
29811: EQUAL
29812: IFFALSE 29816
// exit ;
29814: GO 30332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29816: LD_ADDR_VAR 0 8
29820: PUSH
29821: LD_INT 81
29823: PUSH
29824: LD_VAR 0 9
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: LD_INT 21
29838: PUSH
29839: LD_INT 3
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PPUSH
29854: CALL_OW 69
29858: ST_TO_ADDR
// if not tmp then
29859: LD_VAR 0 8
29863: NOT
29864: IFFALSE 29868
// exit ;
29866: GO 30332
// if in_unit then
29868: LD_VAR 0 11
29872: IFFALSE 29896
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29874: LD_ADDR_VAR 0 10
29878: PUSH
29879: LD_VAR 0 8
29883: PPUSH
29884: LD_VAR 0 11
29888: PPUSH
29889: CALL_OW 74
29893: ST_TO_ADDR
29894: GO 29916
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29896: LD_ADDR_VAR 0 10
29900: PUSH
29901: LD_VAR 0 8
29905: PPUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: CALL_OW 74
29915: ST_TO_ADDR
// if not enemy then
29916: LD_VAR 0 10
29920: NOT
29921: IFFALSE 29925
// exit ;
29923: GO 30332
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29925: LD_VAR 0 11
29929: IFFALSE 29951
29931: PUSH
29932: LD_VAR 0 11
29936: PPUSH
29937: LD_VAR 0 10
29941: PPUSH
29942: CALL_OW 296
29946: PUSH
29947: LD_INT 13
29949: GREATER
29950: AND
29951: IFTRUE 29973
29953: PUSH
29954: LD_VAR 0 1
29958: PPUSH
29959: LD_VAR 0 10
29963: PPUSH
29964: CALL_OW 296
29968: PUSH
29969: LD_INT 12
29971: GREATER
29972: OR
29973: IFFALSE 29977
// exit ;
29975: GO 30332
// missile := [ 1 ] ;
29977: LD_ADDR_VAR 0 14
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29988: LD_VAR 0 9
29992: PPUSH
29993: LD_VAR 0 12
29997: PPUSH
29998: CALL_OW 325
30002: IFFALSE 30031
// missile := Replace ( missile , missile + 1 , 2 ) ;
30004: LD_ADDR_VAR 0 14
30008: PUSH
30009: LD_VAR 0 14
30013: PPUSH
30014: LD_VAR 0 14
30018: PUSH
30019: LD_INT 1
30021: PLUS
30022: PPUSH
30023: LD_INT 2
30025: PPUSH
30026: CALL_OW 1
30030: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30031: LD_VAR 0 9
30035: PPUSH
30036: LD_VAR 0 13
30040: PPUSH
30041: CALL_OW 325
30045: IFFALSE 30069
30047: PUSH
30048: LD_VAR 0 10
30052: PPUSH
30053: CALL_OW 255
30057: PPUSH
30058: LD_VAR 0 13
30062: PPUSH
30063: CALL_OW 325
30067: NOT
30068: AND
30069: IFFALSE 30098
// missile := Replace ( missile , missile + 1 , 3 ) ;
30071: LD_ADDR_VAR 0 14
30075: PUSH
30076: LD_VAR 0 14
30080: PPUSH
30081: LD_VAR 0 14
30085: PUSH
30086: LD_INT 1
30088: PLUS
30089: PPUSH
30090: LD_INT 3
30092: PPUSH
30093: CALL_OW 1
30097: ST_TO_ADDR
// if missile < 2 then
30098: LD_VAR 0 14
30102: PUSH
30103: LD_INT 2
30105: LESS
30106: IFFALSE 30110
// exit ;
30108: GO 30332
// x := GetX ( enemy ) ;
30110: LD_ADDR_VAR 0 4
30114: PUSH
30115: LD_VAR 0 10
30119: PPUSH
30120: CALL_OW 250
30124: ST_TO_ADDR
// y := GetY ( enemy ) ;
30125: LD_ADDR_VAR 0 5
30129: PUSH
30130: LD_VAR 0 10
30134: PPUSH
30135: CALL_OW 251
30139: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30140: LD_ADDR_VAR 0 6
30144: PUSH
30145: LD_VAR 0 4
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PPUSH
30154: LD_INT 1
30156: PPUSH
30157: CALL_OW 12
30161: PLUS
30162: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: LD_VAR 0 5
30172: PUSH
30173: LD_INT 1
30175: NEG
30176: PPUSH
30177: LD_INT 1
30179: PPUSH
30180: CALL_OW 12
30184: PLUS
30185: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30186: LD_VAR 0 6
30190: PPUSH
30191: LD_VAR 0 7
30195: PPUSH
30196: CALL_OW 488
30200: NOT
30201: IFFALSE 30223
// begin _x := x ;
30203: LD_ADDR_VAR 0 6
30207: PUSH
30208: LD_VAR 0 4
30212: ST_TO_ADDR
// _y := y ;
30213: LD_ADDR_VAR 0 7
30217: PUSH
30218: LD_VAR 0 5
30222: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30223: LD_ADDR_VAR 0 3
30227: PUSH
30228: LD_INT 1
30230: PPUSH
30231: LD_VAR 0 14
30235: PPUSH
30236: CALL_OW 12
30240: ST_TO_ADDR
// case i of 1 :
30241: LD_VAR 0 3
30245: PUSH
30246: LD_INT 1
30248: DOUBLE
30249: EQUAL
30250: IFTRUE 30254
30252: GO 30271
30254: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30255: LD_VAR 0 1
30259: PPUSH
30260: LD_VAR 0 10
30264: PPUSH
30265: CALL_OW 115
30269: GO 30332
30271: LD_INT 2
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30301
30279: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30280: LD_VAR 0 1
30284: PPUSH
30285: LD_VAR 0 6
30289: PPUSH
30290: LD_VAR 0 7
30294: PPUSH
30295: CALL_OW 153
30299: GO 30332
30301: LD_INT 3
30303: DOUBLE
30304: EQUAL
30305: IFTRUE 30309
30307: GO 30331
30309: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30310: LD_VAR 0 1
30314: PPUSH
30315: LD_VAR 0 6
30319: PPUSH
30320: LD_VAR 0 7
30324: PPUSH
30325: CALL_OW 154
30329: GO 30332
30331: POP
// end ;
30332: LD_VAR 0 2
30336: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30337: LD_INT 0
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
// if not unit or not building then
30345: LD_VAR 0 1
30349: NOT
30350: IFTRUE 30359
30352: PUSH
30353: LD_VAR 0 2
30357: NOT
30358: OR
30359: IFFALSE 30363
// exit ;
30361: GO 30521
// x := GetX ( building ) ;
30363: LD_ADDR_VAR 0 5
30367: PUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: CALL_OW 250
30377: ST_TO_ADDR
// y := GetY ( building ) ;
30378: LD_ADDR_VAR 0 6
30382: PUSH
30383: LD_VAR 0 2
30387: PPUSH
30388: CALL_OW 251
30392: ST_TO_ADDR
// for i := 0 to 5 do
30393: LD_ADDR_VAR 0 4
30397: PUSH
30398: DOUBLE
30399: LD_INT 0
30401: DEC
30402: ST_TO_ADDR
30403: LD_INT 5
30405: PUSH
30406: FOR_TO
30407: IFFALSE 30519
// begin _x := ShiftX ( x , i , 3 ) ;
30409: LD_ADDR_VAR 0 7
30413: PUSH
30414: LD_VAR 0 5
30418: PPUSH
30419: LD_VAR 0 4
30423: PPUSH
30424: LD_INT 3
30426: PPUSH
30427: CALL_OW 272
30431: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30432: LD_ADDR_VAR 0 8
30436: PUSH
30437: LD_VAR 0 6
30441: PPUSH
30442: LD_VAR 0 4
30446: PPUSH
30447: LD_INT 3
30449: PPUSH
30450: CALL_OW 273
30454: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30455: LD_VAR 0 7
30459: PPUSH
30460: LD_VAR 0 8
30464: PPUSH
30465: CALL_OW 488
30469: NOT
30470: IFFALSE 30474
// continue ;
30472: GO 30406
// if HexInfo ( _x , _y ) = 0 then
30474: LD_VAR 0 7
30478: PPUSH
30479: LD_VAR 0 8
30483: PPUSH
30484: CALL_OW 428
30488: PUSH
30489: LD_INT 0
30491: EQUAL
30492: IFFALSE 30517
// begin ComMoveXY ( unit , _x , _y ) ;
30494: LD_VAR 0 1
30498: PPUSH
30499: LD_VAR 0 7
30503: PPUSH
30504: LD_VAR 0 8
30508: PPUSH
30509: CALL_OW 111
// exit ;
30513: POP
30514: POP
30515: GO 30521
// end ; end ;
30517: GO 30406
30519: POP
30520: POP
// end ;
30521: LD_VAR 0 3
30525: RET
// export function ScanBase ( side , base_area ) ; begin
30526: LD_INT 0
30528: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_VAR 0 2
30538: PPUSH
30539: LD_INT 81
30541: PUSH
30542: LD_VAR 0 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PPUSH
30551: CALL_OW 70
30555: ST_TO_ADDR
// end ;
30556: LD_VAR 0 3
30560: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30561: LD_INT 0
30563: PPUSH
30564: PPUSH
30565: PPUSH
30566: PPUSH
// result := false ;
30567: LD_ADDR_VAR 0 2
30571: PUSH
30572: LD_INT 0
30574: ST_TO_ADDR
// side := GetSide ( unit ) ;
30575: LD_ADDR_VAR 0 3
30579: PUSH
30580: LD_VAR 0 1
30584: PPUSH
30585: CALL_OW 255
30589: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30590: LD_ADDR_VAR 0 4
30594: PUSH
30595: LD_VAR 0 1
30599: PPUSH
30600: CALL_OW 248
30604: ST_TO_ADDR
// case nat of 1 :
30605: LD_VAR 0 4
30609: PUSH
30610: LD_INT 1
30612: DOUBLE
30613: EQUAL
30614: IFTRUE 30618
30616: GO 30629
30618: POP
// tech := tech_lassight ; 2 :
30619: LD_ADDR_VAR 0 5
30623: PUSH
30624: LD_INT 12
30626: ST_TO_ADDR
30627: GO 30668
30629: LD_INT 2
30631: DOUBLE
30632: EQUAL
30633: IFTRUE 30637
30635: GO 30648
30637: POP
// tech := tech_mortar ; 3 :
30638: LD_ADDR_VAR 0 5
30642: PUSH
30643: LD_INT 41
30645: ST_TO_ADDR
30646: GO 30668
30648: LD_INT 3
30650: DOUBLE
30651: EQUAL
30652: IFTRUE 30656
30654: GO 30667
30656: POP
// tech := tech_bazooka ; end ;
30657: LD_ADDR_VAR 0 5
30661: PUSH
30662: LD_INT 44
30664: ST_TO_ADDR
30665: GO 30668
30667: POP
// if Researched ( side , tech ) then
30668: LD_VAR 0 3
30672: PPUSH
30673: LD_VAR 0 5
30677: PPUSH
30678: CALL_OW 325
30682: IFFALSE 30709
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30684: LD_ADDR_VAR 0 2
30688: PUSH
30689: LD_INT 5
30691: PUSH
30692: LD_INT 8
30694: PUSH
30695: LD_INT 9
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: LIST
30702: PUSH
30703: LD_VAR 0 4
30707: ARRAY
30708: ST_TO_ADDR
// end ;
30709: LD_VAR 0 2
30713: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30714: LD_INT 0
30716: PPUSH
30717: PPUSH
30718: PPUSH
// if not mines then
30719: LD_VAR 0 2
30723: NOT
30724: IFFALSE 30728
// exit ;
30726: GO 30872
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30728: LD_ADDR_VAR 0 5
30732: PUSH
30733: LD_INT 81
30735: PUSH
30736: LD_VAR 0 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 21
30750: PUSH
30751: LD_INT 3
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PPUSH
30766: CALL_OW 69
30770: ST_TO_ADDR
// for i in mines do
30771: LD_ADDR_VAR 0 4
30775: PUSH
30776: LD_VAR 0 2
30780: PUSH
30781: FOR_IN
30782: IFFALSE 30870
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30784: LD_VAR 0 4
30788: PUSH
30789: LD_INT 1
30791: ARRAY
30792: PPUSH
30793: LD_VAR 0 4
30797: PUSH
30798: LD_INT 2
30800: ARRAY
30801: PPUSH
30802: CALL_OW 458
30806: NOT
30807: IFFALSE 30811
// continue ;
30809: GO 30781
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30811: LD_VAR 0 4
30815: PUSH
30816: LD_INT 1
30818: ARRAY
30819: PPUSH
30820: LD_VAR 0 4
30824: PUSH
30825: LD_INT 2
30827: ARRAY
30828: PPUSH
30829: CALL_OW 428
30833: PUSH
30834: LD_VAR 0 5
30838: IN
30839: IFFALSE 30868
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30841: LD_VAR 0 4
30845: PUSH
30846: LD_INT 1
30848: ARRAY
30849: PPUSH
30850: LD_VAR 0 4
30854: PUSH
30855: LD_INT 2
30857: ARRAY
30858: PPUSH
30859: LD_VAR 0 1
30863: PPUSH
30864: CALL_OW 456
// end ;
30868: GO 30781
30870: POP
30871: POP
// end ;
30872: LD_VAR 0 3
30876: RET
// export function Count ( array ) ; begin
30877: LD_INT 0
30879: PPUSH
// result := array + 0 ;
30880: LD_ADDR_VAR 0 2
30884: PUSH
30885: LD_VAR 0 1
30889: PUSH
30890: LD_INT 0
30892: PLUS
30893: ST_TO_ADDR
// end ;
30894: LD_VAR 0 2
30898: RET
// export function IsEmpty ( building ) ; begin
30899: LD_INT 0
30901: PPUSH
// if not building then
30902: LD_VAR 0 1
30906: NOT
30907: IFFALSE 30911
// exit ;
30909: GO 30954
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30911: LD_ADDR_VAR 0 2
30915: PUSH
30916: LD_VAR 0 1
30920: PUSH
30921: LD_INT 22
30923: PUSH
30924: LD_VAR 0 1
30928: PPUSH
30929: CALL_OW 255
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 58
30940: PUSH
30941: EMPTY
30942: LIST
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PPUSH
30948: CALL_OW 69
30952: IN
30953: ST_TO_ADDR
// end ;
30954: LD_VAR 0 2
30958: RET
// export function IsNotFull ( building ) ; var places ; begin
30959: LD_INT 0
30961: PPUSH
30962: PPUSH
// if not building then
30963: LD_VAR 0 1
30967: NOT
30968: IFFALSE 30972
// exit ;
30970: GO 31000
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30972: LD_ADDR_VAR 0 2
30976: PUSH
30977: LD_VAR 0 1
30981: PPUSH
30982: LD_INT 3
30984: PUSH
30985: LD_INT 62
30987: PUSH
30988: EMPTY
30989: LIST
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PPUSH
30995: CALL_OW 72
30999: ST_TO_ADDR
// end ;
31000: LD_VAR 0 2
31004: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31005: LD_INT 0
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
// tmp := [ ] ;
31011: LD_ADDR_VAR 0 3
31015: PUSH
31016: EMPTY
31017: ST_TO_ADDR
// list := [ ] ;
31018: LD_ADDR_VAR 0 5
31022: PUSH
31023: EMPTY
31024: ST_TO_ADDR
// for i = 16 to 25 do
31025: LD_ADDR_VAR 0 4
31029: PUSH
31030: DOUBLE
31031: LD_INT 16
31033: DEC
31034: ST_TO_ADDR
31035: LD_INT 25
31037: PUSH
31038: FOR_TO
31039: IFFALSE 31112
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31041: LD_ADDR_VAR 0 3
31045: PUSH
31046: LD_VAR 0 3
31050: PUSH
31051: LD_INT 22
31053: PUSH
31054: LD_VAR 0 1
31058: PPUSH
31059: CALL_OW 255
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 91
31070: PUSH
31071: LD_VAR 0 1
31075: PUSH
31076: LD_INT 6
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 30
31086: PUSH
31087: LD_VAR 0 4
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: LIST
31100: PUSH
31101: EMPTY
31102: LIST
31103: PPUSH
31104: CALL_OW 69
31108: ADD
31109: ST_TO_ADDR
31110: GO 31038
31112: POP
31113: POP
// for i = 1 to tmp do
31114: LD_ADDR_VAR 0 4
31118: PUSH
31119: DOUBLE
31120: LD_INT 1
31122: DEC
31123: ST_TO_ADDR
31124: LD_VAR 0 3
31128: PUSH
31129: FOR_TO
31130: IFFALSE 31218
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31132: LD_ADDR_VAR 0 5
31136: PUSH
31137: LD_VAR 0 5
31141: PUSH
31142: LD_VAR 0 3
31146: PUSH
31147: LD_VAR 0 4
31151: ARRAY
31152: PPUSH
31153: CALL_OW 266
31157: PUSH
31158: LD_VAR 0 3
31162: PUSH
31163: LD_VAR 0 4
31167: ARRAY
31168: PPUSH
31169: CALL_OW 250
31173: PUSH
31174: LD_VAR 0 3
31178: PUSH
31179: LD_VAR 0 4
31183: ARRAY
31184: PPUSH
31185: CALL_OW 251
31189: PUSH
31190: LD_VAR 0 3
31194: PUSH
31195: LD_VAR 0 4
31199: ARRAY
31200: PPUSH
31201: CALL_OW 254
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: PUSH
31212: EMPTY
31213: LIST
31214: ADD
31215: ST_TO_ADDR
31216: GO 31129
31218: POP
31219: POP
// result := list ;
31220: LD_ADDR_VAR 0 2
31224: PUSH
31225: LD_VAR 0 5
31229: ST_TO_ADDR
// end ;
31230: LD_VAR 0 2
31234: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31235: LD_INT 0
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
// if not factory then
31244: LD_VAR 0 1
31248: NOT
31249: IFFALSE 31253
// exit ;
31251: GO 31856
// if control = control_apeman then
31253: LD_VAR 0 4
31257: PUSH
31258: LD_INT 5
31260: EQUAL
31261: IFFALSE 31370
// begin tmp := UnitsInside ( factory ) ;
31263: LD_ADDR_VAR 0 8
31267: PUSH
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 313
31277: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31278: LD_VAR 0 8
31282: PPUSH
31283: LD_INT 25
31285: PUSH
31286: LD_INT 12
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PPUSH
31293: CALL_OW 72
31297: NOT
31298: IFFALSE 31308
// control := control_manual ;
31300: LD_ADDR_VAR 0 4
31304: PUSH
31305: LD_INT 1
31307: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31308: LD_ADDR_VAR 0 8
31312: PUSH
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL 31005 0 1
31322: ST_TO_ADDR
// if tmp then
31323: LD_VAR 0 8
31327: IFFALSE 31370
// begin for i in tmp do
31329: LD_ADDR_VAR 0 7
31333: PUSH
31334: LD_VAR 0 8
31338: PUSH
31339: FOR_IN
31340: IFFALSE 31368
// if i [ 1 ] = b_ext_radio then
31342: LD_VAR 0 7
31346: PUSH
31347: LD_INT 1
31349: ARRAY
31350: PUSH
31351: LD_INT 22
31353: EQUAL
31354: IFFALSE 31366
// begin control := control_remote ;
31356: LD_ADDR_VAR 0 4
31360: PUSH
31361: LD_INT 2
31363: ST_TO_ADDR
// break ;
31364: GO 31368
// end ;
31366: GO 31339
31368: POP
31369: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31370: LD_VAR 0 1
31374: PPUSH
31375: LD_VAR 0 2
31379: PPUSH
31380: LD_VAR 0 3
31384: PPUSH
31385: LD_VAR 0 4
31389: PPUSH
31390: LD_VAR 0 5
31394: PPUSH
31395: CALL_OW 448
31399: IFFALSE 31434
// begin result := [ chassis , engine , control , weapon ] ;
31401: LD_ADDR_VAR 0 6
31405: PUSH
31406: LD_VAR 0 2
31410: PUSH
31411: LD_VAR 0 3
31415: PUSH
31416: LD_VAR 0 4
31420: PUSH
31421: LD_VAR 0 5
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: ST_TO_ADDR
// exit ;
31432: GO 31856
// end ; _chassis := AvailableChassisList ( factory ) ;
31434: LD_ADDR_VAR 0 9
31438: PUSH
31439: LD_VAR 0 1
31443: PPUSH
31444: CALL_OW 475
31448: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31449: LD_ADDR_VAR 0 11
31453: PUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 476
31463: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31464: LD_ADDR_VAR 0 12
31468: PUSH
31469: LD_VAR 0 1
31473: PPUSH
31474: CALL_OW 477
31478: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31479: LD_ADDR_VAR 0 10
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 478
31493: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31494: LD_VAR 0 9
31498: NOT
31499: IFTRUE 31508
31501: PUSH
31502: LD_VAR 0 11
31506: NOT
31507: OR
31508: IFTRUE 31517
31510: PUSH
31511: LD_VAR 0 12
31515: NOT
31516: OR
31517: IFTRUE 31526
31519: PUSH
31520: LD_VAR 0 10
31524: NOT
31525: OR
31526: IFFALSE 31561
// begin result := [ chassis , engine , control , weapon ] ;
31528: LD_ADDR_VAR 0 6
31532: PUSH
31533: LD_VAR 0 2
31537: PUSH
31538: LD_VAR 0 3
31542: PUSH
31543: LD_VAR 0 4
31547: PUSH
31548: LD_VAR 0 5
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: ST_TO_ADDR
// exit ;
31559: GO 31856
// end ; if not chassis in _chassis then
31561: LD_VAR 0 2
31565: PUSH
31566: LD_VAR 0 9
31570: IN
31571: NOT
31572: IFFALSE 31598
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31574: LD_ADDR_VAR 0 2
31578: PUSH
31579: LD_VAR 0 9
31583: PUSH
31584: LD_INT 1
31586: PPUSH
31587: LD_VAR 0 9
31591: PPUSH
31592: CALL_OW 12
31596: ARRAY
31597: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31598: LD_VAR 0 2
31602: PPUSH
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL 31861 0 2
31612: NOT
31613: IFFALSE 31674
// repeat engine := _engine [ 1 ] ;
31615: LD_ADDR_VAR 0 3
31619: PUSH
31620: LD_VAR 0 11
31624: PUSH
31625: LD_INT 1
31627: ARRAY
31628: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31629: LD_ADDR_VAR 0 11
31633: PUSH
31634: LD_VAR 0 11
31638: PPUSH
31639: LD_INT 1
31641: PPUSH
31642: CALL_OW 3
31646: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31647: LD_VAR 0 2
31651: PPUSH
31652: LD_VAR 0 3
31656: PPUSH
31657: CALL 31861 0 2
31661: IFTRUE 31672
31663: PUSH
31664: LD_VAR 0 11
31668: PUSH
31669: EMPTY
31670: EQUAL
31671: OR
31672: IFFALSE 31615
// if not control in _control then
31674: LD_VAR 0 4
31678: PUSH
31679: LD_VAR 0 12
31683: IN
31684: NOT
31685: IFFALSE 31711
// control := _control [ rand ( 1 , _control ) ] ;
31687: LD_ADDR_VAR 0 4
31691: PUSH
31692: LD_VAR 0 12
31696: PUSH
31697: LD_INT 1
31699: PPUSH
31700: LD_VAR 0 12
31704: PPUSH
31705: CALL_OW 12
31709: ARRAY
31710: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31711: LD_VAR 0 2
31715: PPUSH
31716: LD_VAR 0 5
31720: PPUSH
31721: CALL 32083 0 2
31725: NOT
31726: IFFALSE 31787
// repeat weapon := _weapon [ 1 ] ;
31728: LD_ADDR_VAR 0 5
31732: PUSH
31733: LD_VAR 0 10
31737: PUSH
31738: LD_INT 1
31740: ARRAY
31741: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31742: LD_ADDR_VAR 0 10
31746: PUSH
31747: LD_VAR 0 10
31751: PPUSH
31752: LD_INT 1
31754: PPUSH
31755: CALL_OW 3
31759: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31760: LD_VAR 0 2
31764: PPUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: CALL 32083 0 2
31774: IFTRUE 31785
31776: PUSH
31777: LD_VAR 0 10
31781: PUSH
31782: EMPTY
31783: EQUAL
31784: OR
31785: IFFALSE 31728
// result := [ ] ;
31787: LD_ADDR_VAR 0 6
31791: PUSH
31792: EMPTY
31793: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31794: LD_VAR 0 1
31798: PPUSH
31799: LD_VAR 0 2
31803: PPUSH
31804: LD_VAR 0 3
31808: PPUSH
31809: LD_VAR 0 4
31813: PPUSH
31814: LD_VAR 0 5
31818: PPUSH
31819: CALL_OW 448
31823: IFFALSE 31856
// result := [ chassis , engine , control , weapon ] ;
31825: LD_ADDR_VAR 0 6
31829: PUSH
31830: LD_VAR 0 2
31834: PUSH
31835: LD_VAR 0 3
31839: PUSH
31840: LD_VAR 0 4
31844: PUSH
31845: LD_VAR 0 5
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// end ;
31856: LD_VAR 0 6
31860: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31861: LD_INT 0
31863: PPUSH
// if not chassis or not engine then
31864: LD_VAR 0 1
31868: NOT
31869: IFTRUE 31878
31871: PUSH
31872: LD_VAR 0 2
31876: NOT
31877: OR
31878: IFFALSE 31882
// exit ;
31880: GO 32078
// case engine of engine_solar :
31882: LD_VAR 0 2
31886: PUSH
31887: LD_INT 2
31889: DOUBLE
31890: EQUAL
31891: IFTRUE 31895
31893: GO 31933
31895: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31896: LD_ADDR_VAR 0 3
31900: PUSH
31901: LD_INT 11
31903: PUSH
31904: LD_INT 12
31906: PUSH
31907: LD_INT 13
31909: PUSH
31910: LD_INT 14
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 3
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
31931: GO 32062
31933: LD_INT 1
31935: DOUBLE
31936: EQUAL
31937: IFTRUE 31941
31939: GO 32003
31941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31942: LD_ADDR_VAR 0 3
31946: PUSH
31947: LD_INT 11
31949: PUSH
31950: LD_INT 12
31952: PUSH
31953: LD_INT 13
31955: PUSH
31956: LD_INT 14
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: LD_INT 3
31967: PUSH
31968: LD_INT 4
31970: PUSH
31971: LD_INT 5
31973: PUSH
31974: LD_INT 21
31976: PUSH
31977: LD_INT 23
31979: PUSH
31980: LD_INT 22
31982: PUSH
31983: LD_INT 24
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
32001: GO 32062
32003: LD_INT 3
32005: DOUBLE
32006: EQUAL
32007: IFTRUE 32011
32009: GO 32061
32011: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_INT 13
32019: PUSH
32020: LD_INT 14
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: LD_INT 4
32031: PUSH
32032: LD_INT 5
32034: PUSH
32035: LD_INT 21
32037: PUSH
32038: LD_INT 22
32040: PUSH
32041: LD_INT 23
32043: PUSH
32044: LD_INT 24
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: ST_TO_ADDR
32059: GO 32062
32061: POP
// result := ( chassis in result ) ;
32062: LD_ADDR_VAR 0 3
32066: PUSH
32067: LD_VAR 0 1
32071: PUSH
32072: LD_VAR 0 3
32076: IN
32077: ST_TO_ADDR
// end ;
32078: LD_VAR 0 3
32082: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32083: LD_INT 0
32085: PPUSH
// if not chassis or not weapon then
32086: LD_VAR 0 1
32090: NOT
32091: IFTRUE 32100
32093: PUSH
32094: LD_VAR 0 2
32098: NOT
32099: OR
32100: IFFALSE 32104
// exit ;
32102: GO 33198
// case weapon of us_machine_gun :
32104: LD_VAR 0 2
32108: PUSH
32109: LD_INT 2
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32147
32117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: LD_INT 4
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
32145: GO 33182
32147: LD_INT 3
32149: DOUBLE
32150: EQUAL
32151: IFTRUE 32155
32153: GO 32185
32155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: LD_INT 3
32169: PUSH
32170: LD_INT 4
32172: PUSH
32173: LD_INT 5
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
32183: GO 33182
32185: LD_INT 11
32187: DOUBLE
32188: EQUAL
32189: IFTRUE 32193
32191: GO 32223
32193: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32194: LD_ADDR_VAR 0 3
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 3
32207: PUSH
32208: LD_INT 4
32210: PUSH
32211: LD_INT 5
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
32221: GO 33182
32223: LD_INT 4
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32257
32231: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32232: LD_ADDR_VAR 0 3
32236: PUSH
32237: LD_INT 2
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: LD_INT 4
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: ST_TO_ADDR
32255: GO 33182
32257: LD_INT 5
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32291
32265: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32266: LD_ADDR_VAR 0 3
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: LD_INT 3
32276: PUSH
32277: LD_INT 4
32279: PUSH
32280: LD_INT 5
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: ST_TO_ADDR
32289: GO 33182
32291: LD_INT 9
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32325
32299: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32300: LD_ADDR_VAR 0 3
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 3
32310: PUSH
32311: LD_INT 4
32313: PUSH
32314: LD_INT 5
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: ST_TO_ADDR
32323: GO 33182
32325: LD_INT 7
32327: DOUBLE
32328: EQUAL
32329: IFTRUE 32333
32331: GO 32359
32333: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32334: LD_ADDR_VAR 0 3
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: LD_INT 4
32347: PUSH
32348: LD_INT 5
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: ST_TO_ADDR
32357: GO 33182
32359: LD_INT 12
32361: DOUBLE
32362: EQUAL
32363: IFTRUE 32367
32365: GO 32393
32367: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32368: LD_ADDR_VAR 0 3
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: LD_INT 3
32378: PUSH
32379: LD_INT 4
32381: PUSH
32382: LD_INT 5
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 33182
32393: LD_INT 13
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32427
32401: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 3
32412: PUSH
32413: LD_INT 4
32415: PUSH
32416: LD_INT 5
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
32425: GO 33182
32427: LD_INT 14
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32453
32435: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 4
32443: PUSH
32444: LD_INT 5
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: ST_TO_ADDR
32451: GO 33182
32453: LD_INT 6
32455: DOUBLE
32456: EQUAL
32457: IFTRUE 32461
32459: GO 32479
32461: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32462: LD_ADDR_VAR 0 3
32466: PUSH
32467: LD_INT 4
32469: PUSH
32470: LD_INT 5
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: ST_TO_ADDR
32477: GO 33182
32479: LD_INT 10
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32505
32487: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32488: LD_ADDR_VAR 0 3
32492: PUSH
32493: LD_INT 4
32495: PUSH
32496: LD_INT 5
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: ST_TO_ADDR
32503: GO 33182
32505: LD_INT 22
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32539
32513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32514: LD_ADDR_VAR 0 3
32518: PUSH
32519: LD_INT 11
32521: PUSH
32522: LD_INT 12
32524: PUSH
32525: LD_INT 13
32527: PUSH
32528: LD_INT 14
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: ST_TO_ADDR
32537: GO 33182
32539: LD_INT 23
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32573
32547: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_INT 11
32555: PUSH
32556: LD_INT 12
32558: PUSH
32559: LD_INT 13
32561: PUSH
32562: LD_INT 14
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: ST_TO_ADDR
32571: GO 33182
32573: LD_INT 24
32575: DOUBLE
32576: EQUAL
32577: IFTRUE 32581
32579: GO 32607
32581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_INT 11
32589: PUSH
32590: LD_INT 12
32592: PUSH
32593: LD_INT 13
32595: PUSH
32596: LD_INT 14
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: ST_TO_ADDR
32605: GO 33182
32607: LD_INT 30
32609: DOUBLE
32610: EQUAL
32611: IFTRUE 32615
32613: GO 32641
32615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32616: LD_ADDR_VAR 0 3
32620: PUSH
32621: LD_INT 11
32623: PUSH
32624: LD_INT 12
32626: PUSH
32627: LD_INT 13
32629: PUSH
32630: LD_INT 14
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: ST_TO_ADDR
32639: GO 33182
32641: LD_INT 25
32643: DOUBLE
32644: EQUAL
32645: IFTRUE 32649
32647: GO 32667
32649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32650: LD_ADDR_VAR 0 3
32654: PUSH
32655: LD_INT 13
32657: PUSH
32658: LD_INT 14
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33182
32667: LD_INT 27
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32693
32675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 13
32683: PUSH
32684: LD_INT 14
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: ST_TO_ADDR
32691: GO 33182
32693: LD_INT 92
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32727
32701: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: LD_INT 11
32709: PUSH
32710: LD_INT 12
32712: PUSH
32713: LD_INT 13
32715: PUSH
32716: LD_INT 14
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: ST_TO_ADDR
32725: GO 33182
32727: LD_INT 28
32729: DOUBLE
32730: EQUAL
32731: IFTRUE 32735
32733: GO 32753
32735: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32736: LD_ADDR_VAR 0 3
32740: PUSH
32741: LD_INT 13
32743: PUSH
32744: LD_INT 14
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: ST_TO_ADDR
32751: GO 33182
32753: LD_INT 29
32755: DOUBLE
32756: EQUAL
32757: IFTRUE 32761
32759: GO 32779
32761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32762: LD_ADDR_VAR 0 3
32766: PUSH
32767: LD_INT 13
32769: PUSH
32770: LD_INT 14
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: ST_TO_ADDR
32777: GO 33182
32779: LD_INT 31
32781: DOUBLE
32782: EQUAL
32783: IFTRUE 32787
32785: GO 32805
32787: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_INT 13
32795: PUSH
32796: LD_INT 14
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: ST_TO_ADDR
32803: GO 33182
32805: LD_INT 26
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32813
32811: GO 32831
32813: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32814: LD_ADDR_VAR 0 3
32818: PUSH
32819: LD_INT 13
32821: PUSH
32822: LD_INT 14
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: ST_TO_ADDR
32829: GO 33182
32831: LD_INT 42
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32839
32837: GO 32865
32839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32840: LD_ADDR_VAR 0 3
32844: PUSH
32845: LD_INT 21
32847: PUSH
32848: LD_INT 22
32850: PUSH
32851: LD_INT 23
32853: PUSH
32854: LD_INT 24
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
32863: GO 33182
32865: LD_INT 43
32867: DOUBLE
32868: EQUAL
32869: IFTRUE 32873
32871: GO 32899
32873: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32874: LD_ADDR_VAR 0 3
32878: PUSH
32879: LD_INT 21
32881: PUSH
32882: LD_INT 22
32884: PUSH
32885: LD_INT 23
32887: PUSH
32888: LD_INT 24
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: ST_TO_ADDR
32897: GO 33182
32899: LD_INT 44
32901: DOUBLE
32902: EQUAL
32903: IFTRUE 32907
32905: GO 32933
32907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: LD_INT 21
32915: PUSH
32916: LD_INT 22
32918: PUSH
32919: LD_INT 23
32921: PUSH
32922: LD_INT 24
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: ST_TO_ADDR
32931: GO 33182
32933: LD_INT 45
32935: DOUBLE
32936: EQUAL
32937: IFTRUE 32941
32939: GO 32967
32941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_INT 21
32949: PUSH
32950: LD_INT 22
32952: PUSH
32953: LD_INT 23
32955: PUSH
32956: LD_INT 24
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: ST_TO_ADDR
32965: GO 33182
32967: LD_INT 49
32969: DOUBLE
32970: EQUAL
32971: IFTRUE 32975
32973: GO 33001
32975: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: LD_INT 21
32983: PUSH
32984: LD_INT 22
32986: PUSH
32987: LD_INT 23
32989: PUSH
32990: LD_INT 24
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
32999: GO 33182
33001: LD_INT 51
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33009
33007: GO 33035
33009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 21
33017: PUSH
33018: LD_INT 22
33020: PUSH
33021: LD_INT 23
33023: PUSH
33024: LD_INT 24
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: ST_TO_ADDR
33033: GO 33182
33035: LD_INT 52
33037: DOUBLE
33038: EQUAL
33039: IFTRUE 33043
33041: GO 33069
33043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33044: LD_ADDR_VAR 0 3
33048: PUSH
33049: LD_INT 21
33051: PUSH
33052: LD_INT 22
33054: PUSH
33055: LD_INT 23
33057: PUSH
33058: LD_INT 24
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: ST_TO_ADDR
33067: GO 33182
33069: LD_INT 53
33071: DOUBLE
33072: EQUAL
33073: IFTRUE 33077
33075: GO 33095
33077: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33078: LD_ADDR_VAR 0 3
33082: PUSH
33083: LD_INT 23
33085: PUSH
33086: LD_INT 24
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: ST_TO_ADDR
33093: GO 33182
33095: LD_INT 46
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33103
33101: GO 33121
33103: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33104: LD_ADDR_VAR 0 3
33108: PUSH
33109: LD_INT 23
33111: PUSH
33112: LD_INT 24
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: ST_TO_ADDR
33119: GO 33182
33121: LD_INT 47
33123: DOUBLE
33124: EQUAL
33125: IFTRUE 33129
33127: GO 33147
33129: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
33130: LD_ADDR_VAR 0 3
33134: PUSH
33135: LD_INT 23
33137: PUSH
33138: LD_INT 24
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: ST_TO_ADDR
33145: GO 33182
33147: LD_INT 98
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33181
33155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_INT 21
33163: PUSH
33164: LD_INT 22
33166: PUSH
33167: LD_INT 23
33169: PUSH
33170: LD_INT 24
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
33179: GO 33182
33181: POP
// result := ( chassis in result ) ;
33182: LD_ADDR_VAR 0 3
33186: PUSH
33187: LD_VAR 0 1
33191: PUSH
33192: LD_VAR 0 3
33196: IN
33197: ST_TO_ADDR
// end ;
33198: LD_VAR 0 3
33202: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33203: LD_INT 0
33205: PPUSH
33206: PPUSH
33207: PPUSH
33208: PPUSH
33209: PPUSH
33210: PPUSH
33211: PPUSH
// result := array ;
33212: LD_ADDR_VAR 0 5
33216: PUSH
33217: LD_VAR 0 1
33221: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33222: LD_VAR 0 1
33226: NOT
33227: IFTRUE 33236
33229: PUSH
33230: LD_VAR 0 2
33234: NOT
33235: OR
33236: IFTRUE 33245
33238: PUSH
33239: LD_VAR 0 3
33243: NOT
33244: OR
33245: IFTRUE 33259
33247: PUSH
33248: LD_VAR 0 2
33252: PUSH
33253: LD_VAR 0 1
33257: GREATER
33258: OR
33259: IFTRUE 33273
33261: PUSH
33262: LD_VAR 0 3
33266: PUSH
33267: LD_VAR 0 1
33271: GREATER
33272: OR
33273: IFFALSE 33277
// exit ;
33275: GO 33573
// if direction then
33277: LD_VAR 0 4
33281: IFFALSE 33345
// begin d := 1 ;
33283: LD_ADDR_VAR 0 9
33287: PUSH
33288: LD_INT 1
33290: ST_TO_ADDR
// if i_from > i_to then
33291: LD_VAR 0 2
33295: PUSH
33296: LD_VAR 0 3
33300: GREATER
33301: IFFALSE 33327
// length := ( array - i_from ) + i_to else
33303: LD_ADDR_VAR 0 11
33307: PUSH
33308: LD_VAR 0 1
33312: PUSH
33313: LD_VAR 0 2
33317: MINUS
33318: PUSH
33319: LD_VAR 0 3
33323: PLUS
33324: ST_TO_ADDR
33325: GO 33343
// length := i_to - i_from ;
33327: LD_ADDR_VAR 0 11
33331: PUSH
33332: LD_VAR 0 3
33336: PUSH
33337: LD_VAR 0 2
33341: MINUS
33342: ST_TO_ADDR
// end else
33343: GO 33406
// begin d := - 1 ;
33345: LD_ADDR_VAR 0 9
33349: PUSH
33350: LD_INT 1
33352: NEG
33353: ST_TO_ADDR
// if i_from > i_to then
33354: LD_VAR 0 2
33358: PUSH
33359: LD_VAR 0 3
33363: GREATER
33364: IFFALSE 33384
// length := i_from - i_to else
33366: LD_ADDR_VAR 0 11
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: LD_VAR 0 3
33380: MINUS
33381: ST_TO_ADDR
33382: GO 33406
// length := ( array - i_to ) + i_from ;
33384: LD_ADDR_VAR 0 11
33388: PUSH
33389: LD_VAR 0 1
33393: PUSH
33394: LD_VAR 0 3
33398: MINUS
33399: PUSH
33400: LD_VAR 0 2
33404: PLUS
33405: ST_TO_ADDR
// end ; if not length then
33406: LD_VAR 0 11
33410: NOT
33411: IFFALSE 33415
// exit ;
33413: GO 33573
// tmp := array ;
33415: LD_ADDR_VAR 0 10
33419: PUSH
33420: LD_VAR 0 1
33424: ST_TO_ADDR
// for i = 1 to length do
33425: LD_ADDR_VAR 0 6
33429: PUSH
33430: DOUBLE
33431: LD_INT 1
33433: DEC
33434: ST_TO_ADDR
33435: LD_VAR 0 11
33439: PUSH
33440: FOR_TO
33441: IFFALSE 33561
// begin for j = 1 to array do
33443: LD_ADDR_VAR 0 7
33447: PUSH
33448: DOUBLE
33449: LD_INT 1
33451: DEC
33452: ST_TO_ADDR
33453: LD_VAR 0 1
33457: PUSH
33458: FOR_TO
33459: IFFALSE 33547
// begin k := j + d ;
33461: LD_ADDR_VAR 0 8
33465: PUSH
33466: LD_VAR 0 7
33470: PUSH
33471: LD_VAR 0 9
33475: PLUS
33476: ST_TO_ADDR
// if k > array then
33477: LD_VAR 0 8
33481: PUSH
33482: LD_VAR 0 1
33486: GREATER
33487: IFFALSE 33497
// k := 1 ;
33489: LD_ADDR_VAR 0 8
33493: PUSH
33494: LD_INT 1
33496: ST_TO_ADDR
// if not k then
33497: LD_VAR 0 8
33501: NOT
33502: IFFALSE 33514
// k := array ;
33504: LD_ADDR_VAR 0 8
33508: PUSH
33509: LD_VAR 0 1
33513: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33514: LD_ADDR_VAR 0 10
33518: PUSH
33519: LD_VAR 0 10
33523: PPUSH
33524: LD_VAR 0 8
33528: PPUSH
33529: LD_VAR 0 1
33533: PUSH
33534: LD_VAR 0 7
33538: ARRAY
33539: PPUSH
33540: CALL_OW 1
33544: ST_TO_ADDR
// end ;
33545: GO 33458
33547: POP
33548: POP
// array := tmp ;
33549: LD_ADDR_VAR 0 1
33553: PUSH
33554: LD_VAR 0 10
33558: ST_TO_ADDR
// end ;
33559: GO 33440
33561: POP
33562: POP
// result := array ;
33563: LD_ADDR_VAR 0 5
33567: PUSH
33568: LD_VAR 0 1
33572: ST_TO_ADDR
// end ;
33573: LD_VAR 0 5
33577: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33578: LD_INT 0
33580: PPUSH
33581: PPUSH
// result := 0 ;
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 0
33589: ST_TO_ADDR
// if not array or not value in array then
33590: LD_VAR 0 1
33594: NOT
33595: IFTRUE 33610
33597: PUSH
33598: LD_VAR 0 2
33602: PUSH
33603: LD_VAR 0 1
33607: IN
33608: NOT
33609: OR
33610: IFFALSE 33614
// exit ;
33612: GO 33668
// for i = 1 to array do
33614: LD_ADDR_VAR 0 4
33618: PUSH
33619: DOUBLE
33620: LD_INT 1
33622: DEC
33623: ST_TO_ADDR
33624: LD_VAR 0 1
33628: PUSH
33629: FOR_TO
33630: IFFALSE 33666
// if value = array [ i ] then
33632: LD_VAR 0 2
33636: PUSH
33637: LD_VAR 0 1
33641: PUSH
33642: LD_VAR 0 4
33646: ARRAY
33647: EQUAL
33648: IFFALSE 33664
// begin result := i ;
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_VAR 0 4
33659: ST_TO_ADDR
// exit ;
33660: POP
33661: POP
33662: GO 33668
// end ;
33664: GO 33629
33666: POP
33667: POP
// end ;
33668: LD_VAR 0 3
33672: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33673: LD_INT 0
33675: PPUSH
// vc_chassis := chassis ;
33676: LD_ADDR_OWVAR 37
33680: PUSH
33681: LD_VAR 0 1
33685: ST_TO_ADDR
// vc_engine := engine ;
33686: LD_ADDR_OWVAR 39
33690: PUSH
33691: LD_VAR 0 2
33695: ST_TO_ADDR
// vc_control := control ;
33696: LD_ADDR_OWVAR 38
33700: PUSH
33701: LD_VAR 0 3
33705: ST_TO_ADDR
// vc_weapon := weapon ;
33706: LD_ADDR_OWVAR 40
33710: PUSH
33711: LD_VAR 0 4
33715: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33716: LD_ADDR_OWVAR 41
33720: PUSH
33721: LD_VAR 0 5
33725: ST_TO_ADDR
// end ;
33726: LD_VAR 0 6
33730: RET
// export function WantPlant ( unit ) ; var task ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
// result := false ;
33735: LD_ADDR_VAR 0 2
33739: PUSH
33740: LD_INT 0
33742: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33743: LD_ADDR_VAR 0 3
33747: PUSH
33748: LD_VAR 0 1
33752: PPUSH
33753: CALL_OW 437
33757: ST_TO_ADDR
// if task then
33758: LD_VAR 0 3
33762: IFFALSE 33790
// if task [ 1 ] [ 1 ] = p then
33764: LD_VAR 0 3
33768: PUSH
33769: LD_INT 1
33771: ARRAY
33772: PUSH
33773: LD_INT 1
33775: ARRAY
33776: PUSH
33777: LD_STRING p
33779: EQUAL
33780: IFFALSE 33790
// result := true ;
33782: LD_ADDR_VAR 0 2
33786: PUSH
33787: LD_INT 1
33789: ST_TO_ADDR
// end ;
33790: LD_VAR 0 2
33794: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33795: LD_INT 0
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
// if pos < 1 then
33801: LD_VAR 0 2
33805: PUSH
33806: LD_INT 1
33808: LESS
33809: IFFALSE 33813
// exit ;
33811: GO 34116
// if pos = 1 then
33813: LD_VAR 0 2
33817: PUSH
33818: LD_INT 1
33820: EQUAL
33821: IFFALSE 33854
// result := Replace ( arr , pos [ 1 ] , value ) else
33823: LD_ADDR_VAR 0 4
33827: PUSH
33828: LD_VAR 0 1
33832: PPUSH
33833: LD_VAR 0 2
33837: PUSH
33838: LD_INT 1
33840: ARRAY
33841: PPUSH
33842: LD_VAR 0 3
33846: PPUSH
33847: CALL_OW 1
33851: ST_TO_ADDR
33852: GO 34116
// begin tmp := arr ;
33854: LD_ADDR_VAR 0 6
33858: PUSH
33859: LD_VAR 0 1
33863: ST_TO_ADDR
// s_arr := [ tmp ] ;
33864: LD_ADDR_VAR 0 7
33868: PUSH
33869: LD_VAR 0 6
33873: PUSH
33874: EMPTY
33875: LIST
33876: ST_TO_ADDR
// for i = 1 to pos - 1 do
33877: LD_ADDR_VAR 0 5
33881: PUSH
33882: DOUBLE
33883: LD_INT 1
33885: DEC
33886: ST_TO_ADDR
33887: LD_VAR 0 2
33891: PUSH
33892: LD_INT 1
33894: MINUS
33895: PUSH
33896: FOR_TO
33897: IFFALSE 33942
// begin tmp := tmp [ pos [ i ] ] ;
33899: LD_ADDR_VAR 0 6
33903: PUSH
33904: LD_VAR 0 6
33908: PUSH
33909: LD_VAR 0 2
33913: PUSH
33914: LD_VAR 0 5
33918: ARRAY
33919: ARRAY
33920: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33921: LD_ADDR_VAR 0 7
33925: PUSH
33926: LD_VAR 0 7
33930: PUSH
33931: LD_VAR 0 6
33935: PUSH
33936: EMPTY
33937: LIST
33938: ADD
33939: ST_TO_ADDR
// end ;
33940: GO 33896
33942: POP
33943: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33944: LD_ADDR_VAR 0 6
33948: PUSH
33949: LD_VAR 0 6
33953: PPUSH
33954: LD_VAR 0 2
33958: PUSH
33959: LD_VAR 0 2
33963: ARRAY
33964: PPUSH
33965: LD_VAR 0 3
33969: PPUSH
33970: CALL_OW 1
33974: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33975: LD_ADDR_VAR 0 7
33979: PUSH
33980: LD_VAR 0 7
33984: PPUSH
33985: LD_VAR 0 7
33989: PPUSH
33990: LD_VAR 0 6
33994: PPUSH
33995: CALL_OW 1
33999: ST_TO_ADDR
// for i = s_arr downto 2 do
34000: LD_ADDR_VAR 0 5
34004: PUSH
34005: DOUBLE
34006: LD_VAR 0 7
34010: INC
34011: ST_TO_ADDR
34012: LD_INT 2
34014: PUSH
34015: FOR_DOWNTO
34016: IFFALSE 34100
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34018: LD_ADDR_VAR 0 6
34022: PUSH
34023: LD_VAR 0 7
34027: PUSH
34028: LD_VAR 0 5
34032: PUSH
34033: LD_INT 1
34035: MINUS
34036: ARRAY
34037: PPUSH
34038: LD_VAR 0 2
34042: PUSH
34043: LD_VAR 0 5
34047: PUSH
34048: LD_INT 1
34050: MINUS
34051: ARRAY
34052: PPUSH
34053: LD_VAR 0 7
34057: PUSH
34058: LD_VAR 0 5
34062: ARRAY
34063: PPUSH
34064: CALL_OW 1
34068: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34069: LD_ADDR_VAR 0 7
34073: PUSH
34074: LD_VAR 0 7
34078: PPUSH
34079: LD_VAR 0 5
34083: PUSH
34084: LD_INT 1
34086: MINUS
34087: PPUSH
34088: LD_VAR 0 6
34092: PPUSH
34093: CALL_OW 1
34097: ST_TO_ADDR
// end ;
34098: GO 34015
34100: POP
34101: POP
// result := s_arr [ 1 ] ;
34102: LD_ADDR_VAR 0 4
34106: PUSH
34107: LD_VAR 0 7
34111: PUSH
34112: LD_INT 1
34114: ARRAY
34115: ST_TO_ADDR
// end ; end ;
34116: LD_VAR 0 4
34120: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34121: LD_INT 0
34123: PPUSH
34124: PPUSH
// if not list then
34125: LD_VAR 0 1
34129: NOT
34130: IFFALSE 34134
// exit ;
34132: GO 34225
// i := list [ pos1 ] ;
34134: LD_ADDR_VAR 0 5
34138: PUSH
34139: LD_VAR 0 1
34143: PUSH
34144: LD_VAR 0 2
34148: ARRAY
34149: ST_TO_ADDR
// if not i then
34150: LD_VAR 0 5
34154: NOT
34155: IFFALSE 34159
// exit ;
34157: GO 34225
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34159: LD_ADDR_VAR 0 1
34163: PUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: LD_VAR 0 2
34173: PPUSH
34174: LD_VAR 0 1
34178: PUSH
34179: LD_VAR 0 3
34183: ARRAY
34184: PPUSH
34185: CALL_OW 1
34189: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34190: LD_ADDR_VAR 0 1
34194: PUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: LD_VAR 0 3
34204: PPUSH
34205: LD_VAR 0 5
34209: PPUSH
34210: CALL_OW 1
34214: ST_TO_ADDR
// result := list ;
34215: LD_ADDR_VAR 0 4
34219: PUSH
34220: LD_VAR 0 1
34224: ST_TO_ADDR
// end ;
34225: LD_VAR 0 4
34229: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34230: LD_INT 0
34232: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34233: LD_ADDR_VAR 0 5
34237: PUSH
34238: LD_VAR 0 1
34242: PPUSH
34243: CALL_OW 250
34247: PPUSH
34248: LD_VAR 0 1
34252: PPUSH
34253: CALL_OW 251
34257: PPUSH
34258: LD_VAR 0 2
34262: PPUSH
34263: LD_VAR 0 3
34267: PPUSH
34268: LD_VAR 0 4
34272: PPUSH
34273: CALL 34655 0 5
34277: ST_TO_ADDR
// end ;
34278: LD_VAR 0 5
34282: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34283: LD_INT 0
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
// if not list or not unit then
34289: LD_VAR 0 2
34293: NOT
34294: IFTRUE 34303
34296: PUSH
34297: LD_VAR 0 1
34301: NOT
34302: OR
34303: IFFALSE 34307
// exit ;
34305: GO 34650
// result := [ ] ;
34307: LD_ADDR_VAR 0 5
34311: PUSH
34312: EMPTY
34313: ST_TO_ADDR
// for i in list do
34314: LD_ADDR_VAR 0 6
34318: PUSH
34319: LD_VAR 0 2
34323: PUSH
34324: FOR_IN
34325: IFFALSE 34543
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34327: LD_ADDR_VAR 0 8
34331: PUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: LD_VAR 0 6
34341: PUSH
34342: LD_INT 1
34344: ARRAY
34345: PPUSH
34346: LD_VAR 0 6
34350: PUSH
34351: LD_INT 2
34353: ARRAY
34354: PPUSH
34355: CALL_OW 297
34359: ST_TO_ADDR
// if not Count ( result ) then
34360: LD_VAR 0 5
34364: PPUSH
34365: CALL 30877 0 1
34369: NOT
34370: IFFALSE 34403
// begin result := Join ( result , [ i , tmp ] ) ;
34372: LD_ADDR_VAR 0 5
34376: PUSH
34377: LD_VAR 0 5
34381: PPUSH
34382: LD_VAR 0 6
34386: PUSH
34387: LD_VAR 0 8
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PPUSH
34396: CALL 66853 0 2
34400: ST_TO_ADDR
// continue ;
34401: GO 34324
// end ; if result [ result ] [ 2 ] <= tmp then
34403: LD_VAR 0 5
34407: PUSH
34408: LD_VAR 0 5
34412: ARRAY
34413: PUSH
34414: LD_INT 2
34416: ARRAY
34417: PUSH
34418: LD_VAR 0 8
34422: LESSEQUAL
34423: IFFALSE 34456
// result := Join ( result , [ i , tmp ] ) else
34425: LD_ADDR_VAR 0 5
34429: PUSH
34430: LD_VAR 0 5
34434: PPUSH
34435: LD_VAR 0 6
34439: PUSH
34440: LD_VAR 0 8
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PPUSH
34449: CALL 66853 0 2
34453: ST_TO_ADDR
34454: GO 34541
// begin for j := 1 to Count ( result ) do
34456: LD_ADDR_VAR 0 7
34460: PUSH
34461: DOUBLE
34462: LD_INT 1
34464: DEC
34465: ST_TO_ADDR
34466: LD_VAR 0 5
34470: PPUSH
34471: CALL 30877 0 1
34475: PUSH
34476: FOR_TO
34477: IFFALSE 34539
// begin if tmp < result [ j ] [ 2 ] then
34479: LD_VAR 0 8
34483: PUSH
34484: LD_VAR 0 5
34488: PUSH
34489: LD_VAR 0 7
34493: ARRAY
34494: PUSH
34495: LD_INT 2
34497: ARRAY
34498: LESS
34499: IFFALSE 34537
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34501: LD_ADDR_VAR 0 5
34505: PUSH
34506: LD_VAR 0 5
34510: PPUSH
34511: LD_VAR 0 7
34515: PPUSH
34516: LD_VAR 0 6
34520: PUSH
34521: LD_VAR 0 8
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PPUSH
34530: CALL_OW 2
34534: ST_TO_ADDR
// break ;
34535: GO 34539
// end ; end ;
34537: GO 34476
34539: POP
34540: POP
// end ; end ;
34541: GO 34324
34543: POP
34544: POP
// if result and not asc then
34545: LD_VAR 0 5
34549: IFFALSE 34558
34551: PUSH
34552: LD_VAR 0 3
34556: NOT
34557: AND
34558: IFFALSE 34575
// result := ReverseArray ( result ) ;
34560: LD_ADDR_VAR 0 5
34564: PUSH
34565: LD_VAR 0 5
34569: PPUSH
34570: CALL 61933 0 1
34574: ST_TO_ADDR
// tmp := [ ] ;
34575: LD_ADDR_VAR 0 8
34579: PUSH
34580: EMPTY
34581: ST_TO_ADDR
// if mode then
34582: LD_VAR 0 4
34586: IFFALSE 34650
// begin for i := 1 to result do
34588: LD_ADDR_VAR 0 6
34592: PUSH
34593: DOUBLE
34594: LD_INT 1
34596: DEC
34597: ST_TO_ADDR
34598: LD_VAR 0 5
34602: PUSH
34603: FOR_TO
34604: IFFALSE 34638
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34606: LD_ADDR_VAR 0 8
34610: PUSH
34611: LD_VAR 0 8
34615: PPUSH
34616: LD_VAR 0 5
34620: PUSH
34621: LD_VAR 0 6
34625: ARRAY
34626: PUSH
34627: LD_INT 1
34629: ARRAY
34630: PPUSH
34631: CALL 66853 0 2
34635: ST_TO_ADDR
34636: GO 34603
34638: POP
34639: POP
// result := tmp ;
34640: LD_ADDR_VAR 0 5
34644: PUSH
34645: LD_VAR 0 8
34649: ST_TO_ADDR
// end ; end ;
34650: LD_VAR 0 5
34654: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34655: LD_INT 0
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
// if not list then
34661: LD_VAR 0 3
34665: NOT
34666: IFFALSE 34670
// exit ;
34668: GO 35060
// result := [ ] ;
34670: LD_ADDR_VAR 0 6
34674: PUSH
34675: EMPTY
34676: ST_TO_ADDR
// for i in list do
34677: LD_ADDR_VAR 0 7
34681: PUSH
34682: LD_VAR 0 3
34686: PUSH
34687: FOR_IN
34688: IFFALSE 34890
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34690: LD_ADDR_VAR 0 9
34694: PUSH
34695: LD_VAR 0 7
34699: PPUSH
34700: LD_VAR 0 1
34704: PPUSH
34705: LD_VAR 0 2
34709: PPUSH
34710: CALL_OW 297
34714: ST_TO_ADDR
// if not result then
34715: LD_VAR 0 6
34719: NOT
34720: IFFALSE 34746
// result := [ [ i , tmp ] ] else
34722: LD_ADDR_VAR 0 6
34726: PUSH
34727: LD_VAR 0 7
34731: PUSH
34732: LD_VAR 0 9
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: EMPTY
34742: LIST
34743: ST_TO_ADDR
34744: GO 34888
// begin if result [ result ] [ 2 ] <= tmp then
34746: LD_VAR 0 6
34750: PUSH
34751: LD_VAR 0 6
34755: ARRAY
34756: PUSH
34757: LD_INT 2
34759: ARRAY
34760: PUSH
34761: LD_VAR 0 9
34765: LESSEQUAL
34766: IFFALSE 34808
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34768: LD_ADDR_VAR 0 6
34772: PUSH
34773: LD_VAR 0 6
34777: PPUSH
34778: LD_VAR 0 6
34782: PUSH
34783: LD_INT 1
34785: PLUS
34786: PPUSH
34787: LD_VAR 0 7
34791: PUSH
34792: LD_VAR 0 9
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PPUSH
34801: CALL_OW 2
34805: ST_TO_ADDR
34806: GO 34888
// for j := 1 to result do
34808: LD_ADDR_VAR 0 8
34812: PUSH
34813: DOUBLE
34814: LD_INT 1
34816: DEC
34817: ST_TO_ADDR
34818: LD_VAR 0 6
34822: PUSH
34823: FOR_TO
34824: IFFALSE 34886
// begin if tmp < result [ j ] [ 2 ] then
34826: LD_VAR 0 9
34830: PUSH
34831: LD_VAR 0 6
34835: PUSH
34836: LD_VAR 0 8
34840: ARRAY
34841: PUSH
34842: LD_INT 2
34844: ARRAY
34845: LESS
34846: IFFALSE 34884
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34848: LD_ADDR_VAR 0 6
34852: PUSH
34853: LD_VAR 0 6
34857: PPUSH
34858: LD_VAR 0 8
34862: PPUSH
34863: LD_VAR 0 7
34867: PUSH
34868: LD_VAR 0 9
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PPUSH
34877: CALL_OW 2
34881: ST_TO_ADDR
// break ;
34882: GO 34886
// end ; end ;
34884: GO 34823
34886: POP
34887: POP
// end ; end ;
34888: GO 34687
34890: POP
34891: POP
// if result and not asc then
34892: LD_VAR 0 6
34896: IFFALSE 34905
34898: PUSH
34899: LD_VAR 0 4
34903: NOT
34904: AND
34905: IFFALSE 34980
// begin tmp := result ;
34907: LD_ADDR_VAR 0 9
34911: PUSH
34912: LD_VAR 0 6
34916: ST_TO_ADDR
// for i = tmp downto 1 do
34917: LD_ADDR_VAR 0 7
34921: PUSH
34922: DOUBLE
34923: LD_VAR 0 9
34927: INC
34928: ST_TO_ADDR
34929: LD_INT 1
34931: PUSH
34932: FOR_DOWNTO
34933: IFFALSE 34978
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34935: LD_ADDR_VAR 0 6
34939: PUSH
34940: LD_VAR 0 6
34944: PPUSH
34945: LD_VAR 0 9
34949: PUSH
34950: LD_VAR 0 7
34954: MINUS
34955: PUSH
34956: LD_INT 1
34958: PLUS
34959: PPUSH
34960: LD_VAR 0 9
34964: PUSH
34965: LD_VAR 0 7
34969: ARRAY
34970: PPUSH
34971: CALL_OW 1
34975: ST_TO_ADDR
34976: GO 34932
34978: POP
34979: POP
// end ; tmp := [ ] ;
34980: LD_ADDR_VAR 0 9
34984: PUSH
34985: EMPTY
34986: ST_TO_ADDR
// if mode then
34987: LD_VAR 0 5
34991: IFFALSE 35060
// begin for i = 1 to result do
34993: LD_ADDR_VAR 0 7
34997: PUSH
34998: DOUBLE
34999: LD_INT 1
35001: DEC
35002: ST_TO_ADDR
35003: LD_VAR 0 6
35007: PUSH
35008: FOR_TO
35009: IFFALSE 35048
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35011: LD_ADDR_VAR 0 9
35015: PUSH
35016: LD_VAR 0 9
35020: PPUSH
35021: LD_VAR 0 7
35025: PPUSH
35026: LD_VAR 0 6
35030: PUSH
35031: LD_VAR 0 7
35035: ARRAY
35036: PUSH
35037: LD_INT 1
35039: ARRAY
35040: PPUSH
35041: CALL_OW 1
35045: ST_TO_ADDR
35046: GO 35008
35048: POP
35049: POP
// result := tmp ;
35050: LD_ADDR_VAR 0 6
35054: PUSH
35055: LD_VAR 0 9
35059: ST_TO_ADDR
// end ; end ;
35060: LD_VAR 0 6
35064: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35065: LD_INT 0
35067: PPUSH
35068: PPUSH
35069: PPUSH
35070: PPUSH
35071: PPUSH
35072: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: ST_TO_ADDR
// if not x or not y then
35095: LD_VAR 0 2
35099: NOT
35100: IFTRUE 35109
35102: PUSH
35103: LD_VAR 0 3
35107: NOT
35108: OR
35109: IFFALSE 35113
// exit ;
35111: GO 36769
// if not range then
35113: LD_VAR 0 4
35117: NOT
35118: IFFALSE 35128
// range := 10 ;
35120: LD_ADDR_VAR 0 4
35124: PUSH
35125: LD_INT 10
35127: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35128: LD_ADDR_VAR 0 8
35132: PUSH
35133: LD_INT 81
35135: PUSH
35136: LD_VAR 0 1
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 92
35147: PUSH
35148: LD_VAR 0 2
35152: PUSH
35153: LD_VAR 0 3
35157: PUSH
35158: LD_VAR 0 4
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: LD_INT 21
35174: PUSH
35175: LD_INT 3
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: LIST
35190: PPUSH
35191: CALL_OW 69
35195: ST_TO_ADDR
// if not tmp then
35196: LD_VAR 0 8
35200: NOT
35201: IFFALSE 35205
// exit ;
35203: GO 36769
// for i in tmp do
35205: LD_ADDR_VAR 0 6
35209: PUSH
35210: LD_VAR 0 8
35214: PUSH
35215: FOR_IN
35216: IFFALSE 36744
// begin points := [ 0 , 0 , 0 ] ;
35218: LD_ADDR_VAR 0 9
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 0
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: LIST
35236: ST_TO_ADDR
// bpoints := 1 ;
35237: LD_ADDR_VAR 0 10
35241: PUSH
35242: LD_INT 1
35244: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35245: LD_VAR 0 6
35249: PPUSH
35250: CALL_OW 247
35254: PUSH
35255: LD_INT 1
35257: DOUBLE
35258: EQUAL
35259: IFTRUE 35263
35261: GO 35845
35263: POP
// begin if GetClass ( i ) = 1 then
35264: LD_VAR 0 6
35268: PPUSH
35269: CALL_OW 257
35273: PUSH
35274: LD_INT 1
35276: EQUAL
35277: IFFALSE 35298
// points := [ 10 , 5 , 3 ] ;
35279: LD_ADDR_VAR 0 9
35283: PUSH
35284: LD_INT 10
35286: PUSH
35287: LD_INT 5
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35298: LD_VAR 0 6
35302: PPUSH
35303: CALL_OW 257
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: LD_INT 4
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: LIST
35321: IN
35322: IFFALSE 35343
// points := [ 3 , 2 , 1 ] ;
35324: LD_ADDR_VAR 0 9
35328: PUSH
35329: LD_INT 3
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35343: LD_VAR 0 6
35347: PPUSH
35348: CALL_OW 257
35352: PUSH
35353: LD_INT 5
35355: EQUAL
35356: IFFALSE 35377
// points := [ 130 , 5 , 2 ] ;
35358: LD_ADDR_VAR 0 9
35362: PUSH
35363: LD_INT 130
35365: PUSH
35366: LD_INT 5
35368: PUSH
35369: LD_INT 2
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: LIST
35376: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35377: LD_VAR 0 6
35381: PPUSH
35382: CALL_OW 257
35386: PUSH
35387: LD_INT 8
35389: EQUAL
35390: IFFALSE 35411
// points := [ 35 , 35 , 30 ] ;
35392: LD_ADDR_VAR 0 9
35396: PUSH
35397: LD_INT 35
35399: PUSH
35400: LD_INT 35
35402: PUSH
35403: LD_INT 30
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35411: LD_VAR 0 6
35415: PPUSH
35416: CALL_OW 257
35420: PUSH
35421: LD_INT 9
35423: EQUAL
35424: IFFALSE 35445
// points := [ 20 , 55 , 40 ] ;
35426: LD_ADDR_VAR 0 9
35430: PUSH
35431: LD_INT 20
35433: PUSH
35434: LD_INT 55
35436: PUSH
35437: LD_INT 40
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35445: LD_VAR 0 6
35449: PPUSH
35450: CALL_OW 257
35454: PUSH
35455: LD_INT 12
35457: PUSH
35458: LD_INT 16
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: IN
35465: IFFALSE 35486
// points := [ 5 , 3 , 2 ] ;
35467: LD_ADDR_VAR 0 9
35471: PUSH
35472: LD_INT 5
35474: PUSH
35475: LD_INT 3
35477: PUSH
35478: LD_INT 2
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35486: LD_VAR 0 6
35490: PPUSH
35491: CALL_OW 257
35495: PUSH
35496: LD_INT 17
35498: EQUAL
35499: IFFALSE 35520
// points := [ 100 , 50 , 75 ] ;
35501: LD_ADDR_VAR 0 9
35505: PUSH
35506: LD_INT 100
35508: PUSH
35509: LD_INT 50
35511: PUSH
35512: LD_INT 75
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35520: LD_VAR 0 6
35524: PPUSH
35525: CALL_OW 257
35529: PUSH
35530: LD_INT 15
35532: EQUAL
35533: IFFALSE 35554
// points := [ 10 , 5 , 3 ] ;
35535: LD_ADDR_VAR 0 9
35539: PUSH
35540: LD_INT 10
35542: PUSH
35543: LD_INT 5
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35554: LD_VAR 0 6
35558: PPUSH
35559: CALL_OW 257
35563: PUSH
35564: LD_INT 14
35566: EQUAL
35567: IFFALSE 35588
// points := [ 10 , 0 , 0 ] ;
35569: LD_ADDR_VAR 0 9
35573: PUSH
35574: LD_INT 10
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35588: LD_VAR 0 6
35592: PPUSH
35593: CALL_OW 257
35597: PUSH
35598: LD_INT 11
35600: EQUAL
35601: IFFALSE 35622
// points := [ 30 , 10 , 5 ] ;
35603: LD_ADDR_VAR 0 9
35607: PUSH
35608: LD_INT 30
35610: PUSH
35611: LD_INT 10
35613: PUSH
35614: LD_INT 5
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35622: LD_VAR 0 1
35626: PPUSH
35627: LD_INT 5
35629: PPUSH
35630: CALL_OW 321
35634: PUSH
35635: LD_INT 2
35637: EQUAL
35638: IFFALSE 35655
// bpoints := bpoints * 1.8 ;
35640: LD_ADDR_VAR 0 10
35644: PUSH
35645: LD_VAR 0 10
35649: PUSH
35650: LD_REAL  1.80000000000000E+0000
35653: MUL
35654: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35655: LD_VAR 0 6
35659: PPUSH
35660: CALL_OW 257
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 3
35673: PUSH
35674: LD_INT 4
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: IN
35683: IFFALSE 35703
35685: PUSH
35686: LD_VAR 0 1
35690: PPUSH
35691: LD_INT 51
35693: PPUSH
35694: CALL_OW 321
35698: PUSH
35699: LD_INT 2
35701: EQUAL
35702: AND
35703: IFFALSE 35720
// bpoints := bpoints * 1.2 ;
35705: LD_ADDR_VAR 0 10
35709: PUSH
35710: LD_VAR 0 10
35714: PUSH
35715: LD_REAL  1.20000000000000E+0000
35718: MUL
35719: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35720: LD_VAR 0 6
35724: PPUSH
35725: CALL_OW 257
35729: PUSH
35730: LD_INT 5
35732: PUSH
35733: LD_INT 7
35735: PUSH
35736: LD_INT 9
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: IN
35744: IFFALSE 35764
35746: PUSH
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_INT 52
35754: PPUSH
35755: CALL_OW 321
35759: PUSH
35760: LD_INT 2
35762: EQUAL
35763: AND
35764: IFFALSE 35781
// bpoints := bpoints * 1.5 ;
35766: LD_ADDR_VAR 0 10
35770: PUSH
35771: LD_VAR 0 10
35775: PUSH
35776: LD_REAL  1.50000000000000E+0000
35779: MUL
35780: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35781: LD_VAR 0 1
35785: PPUSH
35786: LD_INT 66
35788: PPUSH
35789: CALL_OW 321
35793: PUSH
35794: LD_INT 2
35796: EQUAL
35797: IFFALSE 35814
// bpoints := bpoints * 1.1 ;
35799: LD_ADDR_VAR 0 10
35803: PUSH
35804: LD_VAR 0 10
35808: PUSH
35809: LD_REAL  1.10000000000000E+0000
35812: MUL
35813: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35814: LD_ADDR_VAR 0 10
35818: PUSH
35819: LD_VAR 0 10
35823: PUSH
35824: LD_VAR 0 6
35828: PPUSH
35829: LD_INT 1
35831: PPUSH
35832: CALL_OW 259
35836: PUSH
35837: LD_REAL  1.15000000000000E+0000
35840: MUL
35841: MUL
35842: ST_TO_ADDR
// end ; unit_vehicle :
35843: GO 36673
35845: LD_INT 2
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 36661
35853: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35854: LD_VAR 0 6
35858: PPUSH
35859: CALL_OW 264
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 42
35869: PUSH
35870: LD_INT 24
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: IN
35878: IFFALSE 35899
// points := [ 25 , 5 , 3 ] ;
35880: LD_ADDR_VAR 0 9
35884: PUSH
35885: LD_INT 25
35887: PUSH
35888: LD_INT 5
35890: PUSH
35891: LD_INT 3
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35899: LD_VAR 0 6
35903: PPUSH
35904: CALL_OW 264
35908: PUSH
35909: LD_INT 4
35911: PUSH
35912: LD_INT 43
35914: PUSH
35915: LD_INT 25
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: IN
35923: IFFALSE 35944
// points := [ 40 , 15 , 5 ] ;
35925: LD_ADDR_VAR 0 9
35929: PUSH
35930: LD_INT 40
35932: PUSH
35933: LD_INT 15
35935: PUSH
35936: LD_INT 5
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35944: LD_VAR 0 6
35948: PPUSH
35949: CALL_OW 264
35953: PUSH
35954: LD_INT 3
35956: PUSH
35957: LD_INT 23
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: IN
35964: IFFALSE 35985
// points := [ 7 , 25 , 8 ] ;
35966: LD_ADDR_VAR 0 9
35970: PUSH
35971: LD_INT 7
35973: PUSH
35974: LD_INT 25
35976: PUSH
35977: LD_INT 8
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35985: LD_VAR 0 6
35989: PPUSH
35990: CALL_OW 264
35994: PUSH
35995: LD_INT 5
35997: PUSH
35998: LD_INT 27
36000: PUSH
36001: LD_INT 44
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: IN
36009: IFFALSE 36030
// points := [ 14 , 50 , 16 ] ;
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: LD_INT 14
36018: PUSH
36019: LD_INT 50
36021: PUSH
36022: LD_INT 16
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36030: LD_VAR 0 6
36034: PPUSH
36035: CALL_OW 264
36039: PUSH
36040: LD_INT 6
36042: PUSH
36043: LD_INT 46
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: IN
36050: IFFALSE 36071
// points := [ 32 , 120 , 70 ] ;
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_INT 32
36059: PUSH
36060: LD_INT 120
36062: PUSH
36063: LD_INT 70
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36071: LD_VAR 0 6
36075: PPUSH
36076: CALL_OW 264
36080: PUSH
36081: LD_INT 7
36083: PUSH
36084: LD_INT 28
36086: PUSH
36087: LD_INT 45
36089: PUSH
36090: LD_INT 92
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: IN
36099: IFFALSE 36120
// points := [ 35 , 20 , 45 ] ;
36101: LD_ADDR_VAR 0 9
36105: PUSH
36106: LD_INT 35
36108: PUSH
36109: LD_INT 20
36111: PUSH
36112: LD_INT 45
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: LIST
36119: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36120: LD_VAR 0 6
36124: PPUSH
36125: CALL_OW 264
36129: PUSH
36130: LD_INT 47
36132: PUSH
36133: EMPTY
36134: LIST
36135: IN
36136: IFFALSE 36157
// points := [ 67 , 45 , 75 ] ;
36138: LD_ADDR_VAR 0 9
36142: PUSH
36143: LD_INT 67
36145: PUSH
36146: LD_INT 45
36148: PUSH
36149: LD_INT 75
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36157: LD_VAR 0 6
36161: PPUSH
36162: CALL_OW 264
36166: PUSH
36167: LD_INT 26
36169: PUSH
36170: EMPTY
36171: LIST
36172: IN
36173: IFFALSE 36194
// points := [ 120 , 30 , 80 ] ;
36175: LD_ADDR_VAR 0 9
36179: PUSH
36180: LD_INT 120
36182: PUSH
36183: LD_INT 30
36185: PUSH
36186: LD_INT 80
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36194: LD_VAR 0 6
36198: PPUSH
36199: CALL_OW 264
36203: PUSH
36204: LD_INT 22
36206: PUSH
36207: EMPTY
36208: LIST
36209: IN
36210: IFFALSE 36231
// points := [ 40 , 1 , 1 ] ;
36212: LD_ADDR_VAR 0 9
36216: PUSH
36217: LD_INT 40
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36231: LD_VAR 0 6
36235: PPUSH
36236: CALL_OW 264
36240: PUSH
36241: LD_INT 29
36243: PUSH
36244: EMPTY
36245: LIST
36246: IN
36247: IFFALSE 36268
// points := [ 70 , 200 , 400 ] ;
36249: LD_ADDR_VAR 0 9
36253: PUSH
36254: LD_INT 70
36256: PUSH
36257: LD_INT 200
36259: PUSH
36260: LD_INT 400
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: LIST
36267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 264
36277: PUSH
36278: LD_INT 14
36280: PUSH
36281: LD_INT 53
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: IN
36288: IFFALSE 36309
// points := [ 40 , 10 , 20 ] ;
36290: LD_ADDR_VAR 0 9
36294: PUSH
36295: LD_INT 40
36297: PUSH
36298: LD_INT 10
36300: PUSH
36301: LD_INT 20
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36309: LD_VAR 0 6
36313: PPUSH
36314: CALL_OW 264
36318: PUSH
36319: LD_INT 9
36321: PUSH
36322: EMPTY
36323: LIST
36324: IN
36325: IFFALSE 36346
// points := [ 5 , 70 , 20 ] ;
36327: LD_ADDR_VAR 0 9
36331: PUSH
36332: LD_INT 5
36334: PUSH
36335: LD_INT 70
36337: PUSH
36338: LD_INT 20
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36346: LD_VAR 0 6
36350: PPUSH
36351: CALL_OW 264
36355: PUSH
36356: LD_INT 10
36358: PUSH
36359: EMPTY
36360: LIST
36361: IN
36362: IFFALSE 36383
// points := [ 35 , 110 , 70 ] ;
36364: LD_ADDR_VAR 0 9
36368: PUSH
36369: LD_INT 35
36371: PUSH
36372: LD_INT 110
36374: PUSH
36375: LD_INT 70
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: LIST
36382: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36383: LD_VAR 0 6
36387: PPUSH
36388: CALL_OW 265
36392: PUSH
36393: LD_INT 25
36395: EQUAL
36396: IFFALSE 36417
// points := [ 80 , 65 , 100 ] ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: LD_INT 80
36405: PUSH
36406: LD_INT 65
36408: PUSH
36409: LD_INT 100
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36417: LD_VAR 0 6
36421: PPUSH
36422: CALL_OW 263
36426: PUSH
36427: LD_INT 1
36429: EQUAL
36430: IFFALSE 36465
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36432: LD_ADDR_VAR 0 10
36436: PUSH
36437: LD_VAR 0 10
36441: PUSH
36442: LD_VAR 0 6
36446: PPUSH
36447: CALL_OW 311
36451: PPUSH
36452: LD_INT 3
36454: PPUSH
36455: CALL_OW 259
36459: PUSH
36460: LD_INT 4
36462: MUL
36463: MUL
36464: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36465: LD_VAR 0 6
36469: PPUSH
36470: CALL_OW 263
36474: PUSH
36475: LD_INT 2
36477: EQUAL
36478: IFFALSE 36529
// begin j := IsControledBy ( i ) ;
36480: LD_ADDR_VAR 0 7
36484: PUSH
36485: LD_VAR 0 6
36489: PPUSH
36490: CALL_OW 312
36494: ST_TO_ADDR
// if j then
36495: LD_VAR 0 7
36499: IFFALSE 36529
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36501: LD_ADDR_VAR 0 10
36505: PUSH
36506: LD_VAR 0 10
36510: PUSH
36511: LD_VAR 0 7
36515: PPUSH
36516: LD_INT 3
36518: PPUSH
36519: CALL_OW 259
36523: PUSH
36524: LD_INT 3
36526: MUL
36527: MUL
36528: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36529: LD_VAR 0 6
36533: PPUSH
36534: CALL_OW 264
36538: PUSH
36539: LD_INT 5
36541: PUSH
36542: LD_INT 6
36544: PUSH
36545: LD_INT 46
36547: PUSH
36548: LD_INT 44
36550: PUSH
36551: LD_INT 47
36553: PUSH
36554: LD_INT 45
36556: PUSH
36557: LD_INT 28
36559: PUSH
36560: LD_INT 7
36562: PUSH
36563: LD_INT 27
36565: PUSH
36566: LD_INT 29
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: IN
36581: IFFALSE 36601
36583: PUSH
36584: LD_VAR 0 1
36588: PPUSH
36589: LD_INT 52
36591: PPUSH
36592: CALL_OW 321
36596: PUSH
36597: LD_INT 2
36599: EQUAL
36600: AND
36601: IFFALSE 36618
// bpoints := bpoints * 1.2 ;
36603: LD_ADDR_VAR 0 10
36607: PUSH
36608: LD_VAR 0 10
36612: PUSH
36613: LD_REAL  1.20000000000000E+0000
36616: MUL
36617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36618: LD_VAR 0 6
36622: PPUSH
36623: CALL_OW 264
36627: PUSH
36628: LD_INT 6
36630: PUSH
36631: LD_INT 46
36633: PUSH
36634: LD_INT 47
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: IN
36642: IFFALSE 36659
// bpoints := bpoints * 1.2 ;
36644: LD_ADDR_VAR 0 10
36648: PUSH
36649: LD_VAR 0 10
36653: PUSH
36654: LD_REAL  1.20000000000000E+0000
36657: MUL
36658: ST_TO_ADDR
// end ; unit_building :
36659: GO 36673
36661: LD_INT 3
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36669
36667: GO 36672
36669: POP
// ; end ;
36670: GO 36673
36672: POP
// for j = 1 to 3 do
36673: LD_ADDR_VAR 0 7
36677: PUSH
36678: DOUBLE
36679: LD_INT 1
36681: DEC
36682: ST_TO_ADDR
36683: LD_INT 3
36685: PUSH
36686: FOR_TO
36687: IFFALSE 36740
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36689: LD_ADDR_VAR 0 5
36693: PUSH
36694: LD_VAR 0 5
36698: PPUSH
36699: LD_VAR 0 7
36703: PPUSH
36704: LD_VAR 0 5
36708: PUSH
36709: LD_VAR 0 7
36713: ARRAY
36714: PUSH
36715: LD_VAR 0 9
36719: PUSH
36720: LD_VAR 0 7
36724: ARRAY
36725: PUSH
36726: LD_VAR 0 10
36730: MUL
36731: PLUS
36732: PPUSH
36733: CALL_OW 1
36737: ST_TO_ADDR
36738: GO 36686
36740: POP
36741: POP
// end ;
36742: GO 35215
36744: POP
36745: POP
// result := Replace ( result , 4 , tmp ) ;
36746: LD_ADDR_VAR 0 5
36750: PUSH
36751: LD_VAR 0 5
36755: PPUSH
36756: LD_INT 4
36758: PPUSH
36759: LD_VAR 0 8
36763: PPUSH
36764: CALL_OW 1
36768: ST_TO_ADDR
// end ;
36769: LD_VAR 0 5
36773: RET
// export function DangerAtRange ( unit , range ) ; begin
36774: LD_INT 0
36776: PPUSH
// if not unit then
36777: LD_VAR 0 1
36781: NOT
36782: IFFALSE 36786
// exit ;
36784: GO 36831
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36786: LD_ADDR_VAR 0 3
36790: PUSH
36791: LD_VAR 0 1
36795: PPUSH
36796: CALL_OW 255
36800: PPUSH
36801: LD_VAR 0 1
36805: PPUSH
36806: CALL_OW 250
36810: PPUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 251
36820: PPUSH
36821: LD_VAR 0 2
36825: PPUSH
36826: CALL 35065 0 4
36830: ST_TO_ADDR
// end ;
36831: LD_VAR 0 3
36835: RET
// export function DangerInArea ( side , area ) ; begin
36836: LD_INT 0
36838: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36839: LD_ADDR_VAR 0 3
36843: PUSH
36844: LD_VAR 0 2
36848: PPUSH
36849: LD_INT 81
36851: PUSH
36852: LD_VAR 0 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PPUSH
36861: CALL_OW 70
36865: ST_TO_ADDR
// end ;
36866: LD_VAR 0 3
36870: RET
// export function IsExtension ( b ) ; begin
36871: LD_INT 0
36873: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36874: LD_ADDR_VAR 0 2
36878: PUSH
36879: LD_VAR 0 1
36883: PUSH
36884: LD_INT 23
36886: PUSH
36887: LD_INT 20
36889: PUSH
36890: LD_INT 22
36892: PUSH
36893: LD_INT 17
36895: PUSH
36896: LD_INT 24
36898: PUSH
36899: LD_INT 21
36901: PUSH
36902: LD_INT 19
36904: PUSH
36905: LD_INT 16
36907: PUSH
36908: LD_INT 25
36910: PUSH
36911: LD_INT 18
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: IN
36926: ST_TO_ADDR
// end ;
36927: LD_VAR 0 2
36931: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36932: LD_INT 0
36934: PPUSH
36935: PPUSH
36936: PPUSH
// result := [ ] ;
36937: LD_ADDR_VAR 0 4
36941: PUSH
36942: EMPTY
36943: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36944: LD_ADDR_VAR 0 5
36948: PUSH
36949: LD_VAR 0 2
36953: PPUSH
36954: LD_INT 21
36956: PUSH
36957: LD_INT 3
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PPUSH
36964: CALL_OW 70
36968: ST_TO_ADDR
// if not tmp then
36969: LD_VAR 0 5
36973: NOT
36974: IFFALSE 36978
// exit ;
36976: GO 37042
// if checkLink then
36978: LD_VAR 0 3
36982: IFFALSE 37032
// begin for i in tmp do
36984: LD_ADDR_VAR 0 6
36988: PUSH
36989: LD_VAR 0 5
36993: PUSH
36994: FOR_IN
36995: IFFALSE 37030
// if GetBase ( i ) <> base then
36997: LD_VAR 0 6
37001: PPUSH
37002: CALL_OW 274
37006: PUSH
37007: LD_VAR 0 1
37011: NONEQUAL
37012: IFFALSE 37028
// ComLinkToBase ( base , i ) ;
37014: LD_VAR 0 1
37018: PPUSH
37019: LD_VAR 0 6
37023: PPUSH
37024: CALL_OW 169
37028: GO 36994
37030: POP
37031: POP
// end ; result := tmp ;
37032: LD_ADDR_VAR 0 4
37036: PUSH
37037: LD_VAR 0 5
37041: ST_TO_ADDR
// end ;
37042: LD_VAR 0 4
37046: RET
// export function ComComplete ( units , b ) ; var i ; begin
37047: LD_INT 0
37049: PPUSH
37050: PPUSH
// if not units then
37051: LD_VAR 0 1
37055: NOT
37056: IFFALSE 37060
// exit ;
37058: GO 37150
// for i in units do
37060: LD_ADDR_VAR 0 4
37064: PUSH
37065: LD_VAR 0 1
37069: PUSH
37070: FOR_IN
37071: IFFALSE 37148
// if BuildingStatus ( b ) = bs_build then
37073: LD_VAR 0 2
37077: PPUSH
37078: CALL_OW 461
37082: PUSH
37083: LD_INT 1
37085: EQUAL
37086: IFFALSE 37146
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37088: LD_VAR 0 4
37092: PPUSH
37093: LD_STRING h
37095: PUSH
37096: LD_VAR 0 2
37100: PPUSH
37101: CALL_OW 250
37105: PUSH
37106: LD_VAR 0 2
37110: PPUSH
37111: CALL_OW 251
37115: PUSH
37116: LD_VAR 0 2
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: PPUSH
37142: CALL_OW 446
37146: GO 37070
37148: POP
37149: POP
// end ;
37150: LD_VAR 0 3
37154: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37155: LD_INT 0
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
37162: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37163: LD_VAR 0 1
37167: NOT
37168: IFTRUE 37185
37170: PUSH
37171: LD_VAR 0 1
37175: PPUSH
37176: CALL_OW 263
37180: PUSH
37181: LD_INT 2
37183: NONEQUAL
37184: OR
37185: IFFALSE 37189
// exit ;
37187: GO 37505
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37189: LD_ADDR_VAR 0 6
37193: PUSH
37194: LD_INT 22
37196: PUSH
37197: LD_VAR 0 1
37201: PPUSH
37202: CALL_OW 255
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 30
37216: PUSH
37217: LD_INT 36
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 34
37226: PUSH
37227: LD_INT 31
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PPUSH
37243: CALL_OW 69
37247: ST_TO_ADDR
// if not tmp then
37248: LD_VAR 0 6
37252: NOT
37253: IFFALSE 37257
// exit ;
37255: GO 37505
// result := [ ] ;
37257: LD_ADDR_VAR 0 2
37261: PUSH
37262: EMPTY
37263: ST_TO_ADDR
// for i in tmp do
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_VAR 0 6
37273: PUSH
37274: FOR_IN
37275: IFFALSE 37346
// begin t := UnitsInside ( i ) ;
37277: LD_ADDR_VAR 0 4
37281: PUSH
37282: LD_VAR 0 3
37286: PPUSH
37287: CALL_OW 313
37291: ST_TO_ADDR
// if t then
37292: LD_VAR 0 4
37296: IFFALSE 37344
// for j in t do
37298: LD_ADDR_VAR 0 7
37302: PUSH
37303: LD_VAR 0 4
37307: PUSH
37308: FOR_IN
37309: IFFALSE 37342
// result := Replace ( result , result + 1 , j ) ;
37311: LD_ADDR_VAR 0 2
37315: PUSH
37316: LD_VAR 0 2
37320: PPUSH
37321: LD_VAR 0 2
37325: PUSH
37326: LD_INT 1
37328: PLUS
37329: PPUSH
37330: LD_VAR 0 7
37334: PPUSH
37335: CALL_OW 1
37339: ST_TO_ADDR
37340: GO 37308
37342: POP
37343: POP
// end ;
37344: GO 37274
37346: POP
37347: POP
// if not result then
37348: LD_VAR 0 2
37352: NOT
37353: IFFALSE 37357
// exit ;
37355: GO 37505
// mech := result [ 1 ] ;
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: LD_VAR 0 2
37366: PUSH
37367: LD_INT 1
37369: ARRAY
37370: ST_TO_ADDR
// if result > 1 then
37371: LD_VAR 0 2
37375: PUSH
37376: LD_INT 1
37378: GREATER
37379: IFFALSE 37491
// begin for i = 2 to result do
37381: LD_ADDR_VAR 0 3
37385: PUSH
37386: DOUBLE
37387: LD_INT 2
37389: DEC
37390: ST_TO_ADDR
37391: LD_VAR 0 2
37395: PUSH
37396: FOR_TO
37397: IFFALSE 37489
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37399: LD_ADDR_VAR 0 4
37403: PUSH
37404: LD_VAR 0 2
37408: PUSH
37409: LD_VAR 0 3
37413: ARRAY
37414: PPUSH
37415: LD_INT 3
37417: PPUSH
37418: CALL_OW 259
37422: PUSH
37423: LD_VAR 0 2
37427: PUSH
37428: LD_VAR 0 3
37432: ARRAY
37433: PPUSH
37434: CALL_OW 432
37438: MINUS
37439: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37440: LD_VAR 0 4
37444: PUSH
37445: LD_VAR 0 5
37449: PPUSH
37450: LD_INT 3
37452: PPUSH
37453: CALL_OW 259
37457: PUSH
37458: LD_VAR 0 5
37462: PPUSH
37463: CALL_OW 432
37467: MINUS
37468: GREATEREQUAL
37469: IFFALSE 37487
// mech := result [ i ] ;
37471: LD_ADDR_VAR 0 5
37475: PUSH
37476: LD_VAR 0 2
37480: PUSH
37481: LD_VAR 0 3
37485: ARRAY
37486: ST_TO_ADDR
// end ;
37487: GO 37396
37489: POP
37490: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37491: LD_VAR 0 1
37495: PPUSH
37496: LD_VAR 0 5
37500: PPUSH
37501: CALL_OW 135
// end ;
37505: LD_VAR 0 2
37509: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37510: LD_INT 0
37512: PPUSH
37513: PPUSH
37514: PPUSH
37515: PPUSH
37516: PPUSH
37517: PPUSH
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
37522: PPUSH
37523: PPUSH
37524: PPUSH
// result := [ ] ;
37525: LD_ADDR_VAR 0 7
37529: PUSH
37530: EMPTY
37531: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37532: LD_VAR 0 1
37536: PPUSH
37537: CALL_OW 266
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: IN
37552: NOT
37553: IFFALSE 37557
// exit ;
37555: GO 39197
// if name then
37557: LD_VAR 0 3
37561: IFFALSE 37577
// SetBName ( base_dep , name ) ;
37563: LD_VAR 0 1
37567: PPUSH
37568: LD_VAR 0 3
37572: PPUSH
37573: CALL_OW 500
// base := GetBase ( base_dep ) ;
37577: LD_ADDR_VAR 0 15
37581: PUSH
37582: LD_VAR 0 1
37586: PPUSH
37587: CALL_OW 274
37591: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37592: LD_ADDR_VAR 0 16
37596: PUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 255
37606: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37607: LD_ADDR_VAR 0 17
37611: PUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 248
37621: ST_TO_ADDR
// if sources then
37622: LD_VAR 0 5
37626: IFFALSE 37673
// for i = 1 to 3 do
37628: LD_ADDR_VAR 0 8
37632: PUSH
37633: DOUBLE
37634: LD_INT 1
37636: DEC
37637: ST_TO_ADDR
37638: LD_INT 3
37640: PUSH
37641: FOR_TO
37642: IFFALSE 37671
// AddResourceType ( base , i , sources [ i ] ) ;
37644: LD_VAR 0 15
37648: PPUSH
37649: LD_VAR 0 8
37653: PPUSH
37654: LD_VAR 0 5
37658: PUSH
37659: LD_VAR 0 8
37663: ARRAY
37664: PPUSH
37665: CALL_OW 276
37669: GO 37641
37671: POP
37672: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37673: LD_ADDR_VAR 0 18
37677: PUSH
37678: LD_VAR 0 15
37682: PPUSH
37683: LD_VAR 0 2
37687: PPUSH
37688: LD_INT 1
37690: PPUSH
37691: CALL 36932 0 3
37695: ST_TO_ADDR
// InitHc ;
37696: CALL_OW 19
// InitUc ;
37700: CALL_OW 18
// uc_side := side ;
37704: LD_ADDR_OWVAR 20
37708: PUSH
37709: LD_VAR 0 16
37713: ST_TO_ADDR
// uc_nation := nation ;
37714: LD_ADDR_OWVAR 21
37718: PUSH
37719: LD_VAR 0 17
37723: ST_TO_ADDR
// if buildings then
37724: LD_VAR 0 18
37728: IFFALSE 39056
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37730: LD_ADDR_VAR 0 19
37734: PUSH
37735: LD_VAR 0 18
37739: PPUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 30
37745: PUSH
37746: LD_INT 29
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 30
37755: PUSH
37756: LD_INT 30
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: PPUSH
37768: CALL_OW 72
37772: ST_TO_ADDR
// if tmp then
37773: LD_VAR 0 19
37777: IFFALSE 37825
// for i in tmp do
37779: LD_ADDR_VAR 0 8
37783: PUSH
37784: LD_VAR 0 19
37788: PUSH
37789: FOR_IN
37790: IFFALSE 37823
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37792: LD_VAR 0 8
37796: PPUSH
37797: CALL_OW 250
37801: PPUSH
37802: LD_VAR 0 8
37806: PPUSH
37807: CALL_OW 251
37811: PPUSH
37812: LD_VAR 0 16
37816: PPUSH
37817: CALL_OW 441
37821: GO 37789
37823: POP
37824: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37825: LD_VAR 0 18
37829: PPUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 30
37835: PUSH
37836: LD_INT 32
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 30
37845: PUSH
37846: LD_INT 33
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PPUSH
37858: CALL_OW 72
37862: IFFALSE 37950
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37864: LD_ADDR_VAR 0 8
37868: PUSH
37869: LD_VAR 0 18
37873: PPUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 30
37879: PUSH
37880: LD_INT 32
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 30
37889: PUSH
37890: LD_INT 33
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: PPUSH
37902: CALL_OW 72
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37948
// begin if not GetBWeapon ( i ) then
37910: LD_VAR 0 8
37914: PPUSH
37915: CALL_OW 269
37919: NOT
37920: IFFALSE 37946
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37922: LD_VAR 0 8
37926: PPUSH
37927: LD_VAR 0 8
37931: PPUSH
37932: LD_VAR 0 2
37936: PPUSH
37937: CALL 39202 0 2
37941: PPUSH
37942: CALL_OW 431
// end ;
37946: GO 37907
37948: POP
37949: POP
// end ; for i = 1 to personel do
37950: LD_ADDR_VAR 0 8
37954: PUSH
37955: DOUBLE
37956: LD_INT 1
37958: DEC
37959: ST_TO_ADDR
37960: LD_VAR 0 6
37964: PUSH
37965: FOR_TO
37966: IFFALSE 39036
// begin if i > 4 then
37968: LD_VAR 0 8
37972: PUSH
37973: LD_INT 4
37975: GREATER
37976: IFFALSE 37980
// break ;
37978: GO 39036
// case i of 1 :
37980: LD_VAR 0 8
37984: PUSH
37985: LD_INT 1
37987: DOUBLE
37988: EQUAL
37989: IFTRUE 37993
37991: GO 38073
37993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37994: LD_ADDR_VAR 0 12
37998: PUSH
37999: LD_VAR 0 18
38003: PPUSH
38004: LD_INT 22
38006: PUSH
38007: LD_VAR 0 16
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 58
38018: PUSH
38019: EMPTY
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: PUSH
38025: LD_INT 30
38027: PUSH
38028: LD_INT 32
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 30
38037: PUSH
38038: LD_INT 4
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 30
38047: PUSH
38048: LD_INT 5
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: PPUSH
38066: CALL_OW 72
38070: ST_TO_ADDR
38071: GO 38295
38073: LD_INT 2
38075: DOUBLE
38076: EQUAL
38077: IFTRUE 38081
38079: GO 38143
38081: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38082: LD_ADDR_VAR 0 12
38086: PUSH
38087: LD_VAR 0 18
38091: PPUSH
38092: LD_INT 22
38094: PUSH
38095: LD_VAR 0 16
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: LD_INT 30
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 30
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PPUSH
38136: CALL_OW 72
38140: ST_TO_ADDR
38141: GO 38295
38143: LD_INT 3
38145: DOUBLE
38146: EQUAL
38147: IFTRUE 38151
38149: GO 38213
38151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38152: LD_ADDR_VAR 0 12
38156: PUSH
38157: LD_VAR 0 18
38161: PPUSH
38162: LD_INT 22
38164: PUSH
38165: LD_VAR 0 16
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 30
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 30
38189: PUSH
38190: LD_INT 3
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PPUSH
38206: CALL_OW 72
38210: ST_TO_ADDR
38211: GO 38295
38213: LD_INT 4
38215: DOUBLE
38216: EQUAL
38217: IFTRUE 38221
38219: GO 38294
38221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38222: LD_ADDR_VAR 0 12
38226: PUSH
38227: LD_VAR 0 18
38231: PPUSH
38232: LD_INT 22
38234: PUSH
38235: LD_VAR 0 16
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 30
38249: PUSH
38250: LD_INT 6
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 30
38259: PUSH
38260: LD_INT 7
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 30
38269: PUSH
38270: LD_INT 8
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PPUSH
38287: CALL_OW 72
38291: ST_TO_ADDR
38292: GO 38295
38294: POP
// if i = 1 then
38295: LD_VAR 0 8
38299: PUSH
38300: LD_INT 1
38302: EQUAL
38303: IFFALSE 38414
// begin tmp := [ ] ;
38305: LD_ADDR_VAR 0 19
38309: PUSH
38310: EMPTY
38311: ST_TO_ADDR
// for j in f do
38312: LD_ADDR_VAR 0 9
38316: PUSH
38317: LD_VAR 0 12
38321: PUSH
38322: FOR_IN
38323: IFFALSE 38396
// if GetBType ( j ) = b_bunker then
38325: LD_VAR 0 9
38329: PPUSH
38330: CALL_OW 266
38334: PUSH
38335: LD_INT 32
38337: EQUAL
38338: IFFALSE 38365
// tmp := Insert ( tmp , 1 , j ) else
38340: LD_ADDR_VAR 0 19
38344: PUSH
38345: LD_VAR 0 19
38349: PPUSH
38350: LD_INT 1
38352: PPUSH
38353: LD_VAR 0 9
38357: PPUSH
38358: CALL_OW 2
38362: ST_TO_ADDR
38363: GO 38394
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38365: LD_ADDR_VAR 0 19
38369: PUSH
38370: LD_VAR 0 19
38374: PPUSH
38375: LD_VAR 0 19
38379: PUSH
38380: LD_INT 1
38382: PLUS
38383: PPUSH
38384: LD_VAR 0 9
38388: PPUSH
38389: CALL_OW 2
38393: ST_TO_ADDR
38394: GO 38322
38396: POP
38397: POP
// if tmp then
38398: LD_VAR 0 19
38402: IFFALSE 38414
// f := tmp ;
38404: LD_ADDR_VAR 0 12
38408: PUSH
38409: LD_VAR 0 19
38413: ST_TO_ADDR
// end ; x := personel [ i ] ;
38414: LD_ADDR_VAR 0 13
38418: PUSH
38419: LD_VAR 0 6
38423: PUSH
38424: LD_VAR 0 8
38428: ARRAY
38429: ST_TO_ADDR
// if x = - 1 then
38430: LD_VAR 0 13
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: EQUAL
38439: IFFALSE 38650
// begin for j in f do
38441: LD_ADDR_VAR 0 9
38445: PUSH
38446: LD_VAR 0 12
38450: PUSH
38451: FOR_IN
38452: IFFALSE 38646
// repeat InitHc ;
38454: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38458: LD_VAR 0 9
38462: PPUSH
38463: CALL_OW 266
38467: PUSH
38468: LD_INT 5
38470: EQUAL
38471: IFFALSE 38541
// begin if UnitsInside ( j ) < 3 then
38473: LD_VAR 0 9
38477: PPUSH
38478: CALL_OW 313
38482: PUSH
38483: LD_INT 3
38485: LESS
38486: IFFALSE 38522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38488: LD_INT 0
38490: PPUSH
38491: LD_INT 5
38493: PUSH
38494: LD_INT 8
38496: PUSH
38497: LD_INT 9
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: PUSH
38505: LD_VAR 0 17
38509: ARRAY
38510: PPUSH
38511: LD_VAR 0 4
38515: PPUSH
38516: CALL_OW 380
38520: GO 38539
// PrepareHuman ( false , i , skill ) ;
38522: LD_INT 0
38524: PPUSH
38525: LD_VAR 0 8
38529: PPUSH
38530: LD_VAR 0 4
38534: PPUSH
38535: CALL_OW 380
// end else
38539: GO 38558
// PrepareHuman ( false , i , skill ) ;
38541: LD_INT 0
38543: PPUSH
38544: LD_VAR 0 8
38548: PPUSH
38549: LD_VAR 0 4
38553: PPUSH
38554: CALL_OW 380
// un := CreateHuman ;
38558: LD_ADDR_VAR 0 14
38562: PUSH
38563: CALL_OW 44
38567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38568: LD_ADDR_VAR 0 7
38572: PUSH
38573: LD_VAR 0 7
38577: PPUSH
38578: LD_INT 1
38580: PPUSH
38581: LD_VAR 0 14
38585: PPUSH
38586: CALL_OW 2
38590: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38591: LD_VAR 0 14
38595: PPUSH
38596: LD_VAR 0 9
38600: PPUSH
38601: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38605: LD_VAR 0 9
38609: PPUSH
38610: CALL_OW 313
38614: PUSH
38615: LD_INT 6
38617: EQUAL
38618: IFTRUE 38642
38620: PUSH
38621: LD_VAR 0 9
38625: PPUSH
38626: CALL_OW 266
38630: PUSH
38631: LD_INT 32
38633: PUSH
38634: LD_INT 31
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: IN
38641: OR
38642: IFFALSE 38454
38644: GO 38451
38646: POP
38647: POP
// end else
38648: GO 39034
// for j = 1 to x do
38650: LD_ADDR_VAR 0 9
38654: PUSH
38655: DOUBLE
38656: LD_INT 1
38658: DEC
38659: ST_TO_ADDR
38660: LD_VAR 0 13
38664: PUSH
38665: FOR_TO
38666: IFFALSE 39032
// begin InitHc ;
38668: CALL_OW 19
// if not f then
38672: LD_VAR 0 12
38676: NOT
38677: IFFALSE 38766
// begin PrepareHuman ( false , i , skill ) ;
38679: LD_INT 0
38681: PPUSH
38682: LD_VAR 0 8
38686: PPUSH
38687: LD_VAR 0 4
38691: PPUSH
38692: CALL_OW 380
// un := CreateHuman ;
38696: LD_ADDR_VAR 0 14
38700: PUSH
38701: CALL_OW 44
38705: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38706: LD_ADDR_VAR 0 7
38710: PUSH
38711: LD_VAR 0 7
38715: PPUSH
38716: LD_INT 1
38718: PPUSH
38719: LD_VAR 0 14
38723: PPUSH
38724: CALL_OW 2
38728: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38729: LD_VAR 0 14
38733: PPUSH
38734: LD_VAR 0 1
38738: PPUSH
38739: CALL_OW 250
38743: PPUSH
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 251
38753: PPUSH
38754: LD_INT 10
38756: PPUSH
38757: LD_INT 0
38759: PPUSH
38760: CALL_OW 50
// continue ;
38764: GO 38665
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38766: LD_VAR 0 12
38770: PUSH
38771: LD_INT 1
38773: ARRAY
38774: PPUSH
38775: CALL_OW 313
38779: IFFALSE 38807
38781: PUSH
38782: LD_VAR 0 12
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PPUSH
38791: CALL_OW 266
38795: PUSH
38796: LD_INT 32
38798: PUSH
38799: LD_INT 31
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: IN
38806: AND
38807: IFTRUE 38828
38809: PUSH
38810: LD_VAR 0 12
38814: PUSH
38815: LD_INT 1
38817: ARRAY
38818: PPUSH
38819: CALL_OW 313
38823: PUSH
38824: LD_INT 6
38826: EQUAL
38827: OR
38828: IFFALSE 38848
// f := Delete ( f , 1 ) ;
38830: LD_ADDR_VAR 0 12
38834: PUSH
38835: LD_VAR 0 12
38839: PPUSH
38840: LD_INT 1
38842: PPUSH
38843: CALL_OW 3
38847: ST_TO_ADDR
// if not f then
38848: LD_VAR 0 12
38852: NOT
38853: IFFALSE 38871
// begin x := x + 2 ;
38855: LD_ADDR_VAR 0 13
38859: PUSH
38860: LD_VAR 0 13
38864: PUSH
38865: LD_INT 2
38867: PLUS
38868: ST_TO_ADDR
// continue ;
38869: GO 38665
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38871: LD_VAR 0 12
38875: PUSH
38876: LD_INT 1
38878: ARRAY
38879: PPUSH
38880: CALL_OW 266
38884: PUSH
38885: LD_INT 5
38887: EQUAL
38888: IFFALSE 38962
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38890: LD_VAR 0 12
38894: PUSH
38895: LD_INT 1
38897: ARRAY
38898: PPUSH
38899: CALL_OW 313
38903: PUSH
38904: LD_INT 3
38906: LESS
38907: IFFALSE 38943
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38909: LD_INT 0
38911: PPUSH
38912: LD_INT 5
38914: PUSH
38915: LD_INT 8
38917: PUSH
38918: LD_INT 9
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_VAR 0 17
38930: ARRAY
38931: PPUSH
38932: LD_VAR 0 4
38936: PPUSH
38937: CALL_OW 380
38941: GO 38960
// PrepareHuman ( false , i , skill ) ;
38943: LD_INT 0
38945: PPUSH
38946: LD_VAR 0 8
38950: PPUSH
38951: LD_VAR 0 4
38955: PPUSH
38956: CALL_OW 380
// end else
38960: GO 38979
// PrepareHuman ( false , i , skill ) ;
38962: LD_INT 0
38964: PPUSH
38965: LD_VAR 0 8
38969: PPUSH
38970: LD_VAR 0 4
38974: PPUSH
38975: CALL_OW 380
// un := CreateHuman ;
38979: LD_ADDR_VAR 0 14
38983: PUSH
38984: CALL_OW 44
38988: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38989: LD_ADDR_VAR 0 7
38993: PUSH
38994: LD_VAR 0 7
38998: PPUSH
38999: LD_INT 1
39001: PPUSH
39002: LD_VAR 0 14
39006: PPUSH
39007: CALL_OW 2
39011: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39012: LD_VAR 0 14
39016: PPUSH
39017: LD_VAR 0 12
39021: PUSH
39022: LD_INT 1
39024: ARRAY
39025: PPUSH
39026: CALL_OW 52
// end ;
39030: GO 38665
39032: POP
39033: POP
// end ;
39034: GO 37965
39036: POP
39037: POP
// result := result ^ buildings ;
39038: LD_ADDR_VAR 0 7
39042: PUSH
39043: LD_VAR 0 7
39047: PUSH
39048: LD_VAR 0 18
39052: ADD
39053: ST_TO_ADDR
// end else
39054: GO 39197
// begin for i = 1 to personel do
39056: LD_ADDR_VAR 0 8
39060: PUSH
39061: DOUBLE
39062: LD_INT 1
39064: DEC
39065: ST_TO_ADDR
39066: LD_VAR 0 6
39070: PUSH
39071: FOR_TO
39072: IFFALSE 39195
// begin if i > 4 then
39074: LD_VAR 0 8
39078: PUSH
39079: LD_INT 4
39081: GREATER
39082: IFFALSE 39086
// break ;
39084: GO 39195
// x := personel [ i ] ;
39086: LD_ADDR_VAR 0 13
39090: PUSH
39091: LD_VAR 0 6
39095: PUSH
39096: LD_VAR 0 8
39100: ARRAY
39101: ST_TO_ADDR
// if x = - 1 then
39102: LD_VAR 0 13
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: EQUAL
39111: IFFALSE 39115
// continue ;
39113: GO 39071
// PrepareHuman ( false , i , skill ) ;
39115: LD_INT 0
39117: PPUSH
39118: LD_VAR 0 8
39122: PPUSH
39123: LD_VAR 0 4
39127: PPUSH
39128: CALL_OW 380
// un := CreateHuman ;
39132: LD_ADDR_VAR 0 14
39136: PUSH
39137: CALL_OW 44
39141: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39142: LD_VAR 0 14
39146: PPUSH
39147: LD_VAR 0 1
39151: PPUSH
39152: CALL_OW 250
39156: PPUSH
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL_OW 251
39166: PPUSH
39167: LD_INT 10
39169: PPUSH
39170: LD_INT 0
39172: PPUSH
39173: CALL_OW 50
// result := result ^ un ;
39177: LD_ADDR_VAR 0 7
39181: PUSH
39182: LD_VAR 0 7
39186: PUSH
39187: LD_VAR 0 14
39191: ADD
39192: ST_TO_ADDR
// end ;
39193: GO 39071
39195: POP
39196: POP
// end ; end ;
39197: LD_VAR 0 7
39201: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39202: LD_INT 0
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
39219: PPUSH
// result := false ;
39220: LD_ADDR_VAR 0 3
39224: PUSH
39225: LD_INT 0
39227: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39228: LD_VAR 0 1
39232: NOT
39233: IFTRUE 39258
39235: PUSH
39236: LD_VAR 0 1
39240: PPUSH
39241: CALL_OW 266
39245: PUSH
39246: LD_INT 32
39248: PUSH
39249: LD_INT 33
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: IN
39256: NOT
39257: OR
39258: IFFALSE 39262
// exit ;
39260: GO 40397
// nat := GetNation ( tower ) ;
39262: LD_ADDR_VAR 0 12
39266: PUSH
39267: LD_VAR 0 1
39271: PPUSH
39272: CALL_OW 248
39276: ST_TO_ADDR
// side := GetSide ( tower ) ;
39277: LD_ADDR_VAR 0 16
39281: PUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 255
39291: ST_TO_ADDR
// x := GetX ( tower ) ;
39292: LD_ADDR_VAR 0 10
39296: PUSH
39297: LD_VAR 0 1
39301: PPUSH
39302: CALL_OW 250
39306: ST_TO_ADDR
// y := GetY ( tower ) ;
39307: LD_ADDR_VAR 0 11
39311: PUSH
39312: LD_VAR 0 1
39316: PPUSH
39317: CALL_OW 251
39321: ST_TO_ADDR
// if not x or not y then
39322: LD_VAR 0 10
39326: NOT
39327: IFTRUE 39336
39329: PUSH
39330: LD_VAR 0 11
39334: NOT
39335: OR
39336: IFFALSE 39340
// exit ;
39338: GO 40397
// weapon := 0 ;
39340: LD_ADDR_VAR 0 18
39344: PUSH
39345: LD_INT 0
39347: ST_TO_ADDR
// fac_list := [ ] ;
39348: LD_ADDR_VAR 0 17
39352: PUSH
39353: EMPTY
39354: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39355: LD_ADDR_VAR 0 6
39359: PUSH
39360: LD_VAR 0 1
39364: PPUSH
39365: CALL_OW 274
39369: PPUSH
39370: LD_VAR 0 2
39374: PPUSH
39375: LD_INT 0
39377: PPUSH
39378: CALL 36932 0 3
39382: PPUSH
39383: LD_INT 30
39385: PUSH
39386: LD_INT 3
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 72
39397: ST_TO_ADDR
// if not factories then
39398: LD_VAR 0 6
39402: NOT
39403: IFFALSE 39407
// exit ;
39405: GO 40397
// for i in factories do
39407: LD_ADDR_VAR 0 8
39411: PUSH
39412: LD_VAR 0 6
39416: PUSH
39417: FOR_IN
39418: IFFALSE 39443
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39420: LD_ADDR_VAR 0 17
39424: PUSH
39425: LD_VAR 0 17
39429: PUSH
39430: LD_VAR 0 8
39434: PPUSH
39435: CALL_OW 478
39439: UNION
39440: ST_TO_ADDR
39441: GO 39417
39443: POP
39444: POP
// if not fac_list then
39445: LD_VAR 0 17
39449: NOT
39450: IFFALSE 39454
// exit ;
39452: GO 40397
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39454: LD_ADDR_VAR 0 5
39458: PUSH
39459: LD_INT 4
39461: PUSH
39462: LD_INT 5
39464: PUSH
39465: LD_INT 9
39467: PUSH
39468: LD_INT 10
39470: PUSH
39471: LD_INT 6
39473: PUSH
39474: LD_INT 7
39476: PUSH
39477: LD_INT 11
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 27
39491: PUSH
39492: LD_INT 28
39494: PUSH
39495: LD_INT 26
39497: PUSH
39498: LD_INT 30
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 43
39509: PUSH
39510: LD_INT 44
39512: PUSH
39513: LD_INT 46
39515: PUSH
39516: LD_INT 45
39518: PUSH
39519: LD_INT 47
39521: PUSH
39522: LD_INT 49
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: LIST
39537: PUSH
39538: LD_VAR 0 12
39542: ARRAY
39543: ST_TO_ADDR
// list := list isect fac_list ;
39544: LD_ADDR_VAR 0 5
39548: PUSH
39549: LD_VAR 0 5
39553: PUSH
39554: LD_VAR 0 17
39558: ISECT
39559: ST_TO_ADDR
// if not list then
39560: LD_VAR 0 5
39564: NOT
39565: IFFALSE 39569
// exit ;
39567: GO 40397
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39569: LD_VAR 0 12
39573: PUSH
39574: LD_INT 3
39576: EQUAL
39577: IFFALSE 39589
39579: PUSH
39580: LD_INT 49
39582: PUSH
39583: LD_VAR 0 5
39587: IN
39588: AND
39589: IFFALSE 39609
39591: PUSH
39592: LD_INT 31
39594: PPUSH
39595: LD_VAR 0 16
39599: PPUSH
39600: CALL_OW 321
39604: PUSH
39605: LD_INT 2
39607: EQUAL
39608: AND
39609: IFFALSE 39669
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39611: LD_INT 22
39613: PUSH
39614: LD_VAR 0 16
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 35
39625: PUSH
39626: LD_INT 49
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 91
39635: PUSH
39636: LD_VAR 0 1
39640: PUSH
39641: LD_INT 10
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: PPUSH
39654: CALL_OW 69
39658: NOT
39659: IFFALSE 39669
// weapon := ru_time_lapser ;
39661: LD_ADDR_VAR 0 18
39665: PUSH
39666: LD_INT 49
39668: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39669: LD_VAR 0 12
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: IN
39684: IFFALSE 39708
39686: PUSH
39687: LD_INT 11
39689: PUSH
39690: LD_VAR 0 5
39694: IN
39695: IFTRUE 39707
39697: PUSH
39698: LD_INT 30
39700: PUSH
39701: LD_VAR 0 5
39705: IN
39706: OR
39707: AND
39708: IFFALSE 39728
39710: PUSH
39711: LD_INT 6
39713: PPUSH
39714: LD_VAR 0 16
39718: PPUSH
39719: CALL_OW 321
39723: PUSH
39724: LD_INT 2
39726: EQUAL
39727: AND
39728: IFFALSE 39895
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39730: LD_INT 22
39732: PUSH
39733: LD_VAR 0 16
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 35
39747: PUSH
39748: LD_INT 11
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 35
39757: PUSH
39758: LD_INT 30
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 91
39772: PUSH
39773: LD_VAR 0 1
39777: PUSH
39778: LD_INT 18
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: PPUSH
39791: CALL_OW 69
39795: NOT
39796: IFFALSE 39872
39798: PUSH
39799: LD_INT 22
39801: PUSH
39802: LD_VAR 0 16
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 30
39816: PUSH
39817: LD_INT 32
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 30
39826: PUSH
39827: LD_INT 33
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 91
39841: PUSH
39842: LD_VAR 0 1
39846: PUSH
39847: LD_INT 12
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: PUSH
39860: EMPTY
39861: LIST
39862: PPUSH
39863: CALL_OW 69
39867: PUSH
39868: LD_INT 2
39870: GREATER
39871: AND
39872: IFFALSE 39895
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39874: LD_ADDR_VAR 0 18
39878: PUSH
39879: LD_INT 11
39881: PUSH
39882: LD_INT 30
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_VAR 0 12
39893: ARRAY
39894: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39895: LD_VAR 0 18
39899: NOT
39900: IFFALSE 39920
39902: PUSH
39903: LD_INT 40
39905: PPUSH
39906: LD_VAR 0 16
39910: PPUSH
39911: CALL_OW 321
39915: PUSH
39916: LD_INT 2
39918: EQUAL
39919: AND
39920: IFFALSE 39956
39922: PUSH
39923: LD_INT 7
39925: PUSH
39926: LD_VAR 0 5
39930: IN
39931: IFTRUE 39943
39933: PUSH
39934: LD_INT 28
39936: PUSH
39937: LD_VAR 0 5
39941: IN
39942: OR
39943: IFTRUE 39955
39945: PUSH
39946: LD_INT 45
39948: PUSH
39949: LD_VAR 0 5
39953: IN
39954: OR
39955: AND
39956: IFFALSE 40210
// begin hex := GetHexInfo ( x , y ) ;
39958: LD_ADDR_VAR 0 4
39962: PUSH
39963: LD_VAR 0 10
39967: PPUSH
39968: LD_VAR 0 11
39972: PPUSH
39973: CALL_OW 546
39977: ST_TO_ADDR
// if hex [ 1 ] then
39978: LD_VAR 0 4
39982: PUSH
39983: LD_INT 1
39985: ARRAY
39986: IFFALSE 39990
// exit ;
39988: GO 40397
// height := hex [ 2 ] ;
39990: LD_ADDR_VAR 0 15
39994: PUSH
39995: LD_VAR 0 4
39999: PUSH
40000: LD_INT 2
40002: ARRAY
40003: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40004: LD_ADDR_VAR 0 14
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 3
40017: PUSH
40018: LD_INT 5
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: ST_TO_ADDR
// for i in tmp do
40027: LD_ADDR_VAR 0 8
40031: PUSH
40032: LD_VAR 0 14
40036: PUSH
40037: FOR_IN
40038: IFFALSE 40208
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40040: LD_ADDR_VAR 0 9
40044: PUSH
40045: LD_VAR 0 10
40049: PPUSH
40050: LD_VAR 0 8
40054: PPUSH
40055: LD_INT 5
40057: PPUSH
40058: CALL_OW 272
40062: PUSH
40063: LD_VAR 0 11
40067: PPUSH
40068: LD_VAR 0 8
40072: PPUSH
40073: LD_INT 5
40075: PPUSH
40076: CALL_OW 273
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40085: LD_VAR 0 9
40089: PUSH
40090: LD_INT 1
40092: ARRAY
40093: PPUSH
40094: LD_VAR 0 9
40098: PUSH
40099: LD_INT 2
40101: ARRAY
40102: PPUSH
40103: CALL_OW 488
40107: IFFALSE 40206
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40109: LD_ADDR_VAR 0 4
40113: PUSH
40114: LD_VAR 0 9
40118: PUSH
40119: LD_INT 1
40121: ARRAY
40122: PPUSH
40123: LD_VAR 0 9
40127: PUSH
40128: LD_INT 2
40130: ARRAY
40131: PPUSH
40132: CALL_OW 546
40136: ST_TO_ADDR
// if hex [ 1 ] then
40137: LD_VAR 0 4
40141: PUSH
40142: LD_INT 1
40144: ARRAY
40145: IFFALSE 40149
// continue ;
40147: GO 40037
// h := hex [ 2 ] ;
40149: LD_ADDR_VAR 0 13
40153: PUSH
40154: LD_VAR 0 4
40158: PUSH
40159: LD_INT 2
40161: ARRAY
40162: ST_TO_ADDR
// if h + 7 < height then
40163: LD_VAR 0 13
40167: PUSH
40168: LD_INT 7
40170: PLUS
40171: PUSH
40172: LD_VAR 0 15
40176: LESS
40177: IFFALSE 40206
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40179: LD_ADDR_VAR 0 18
40183: PUSH
40184: LD_INT 7
40186: PUSH
40187: LD_INT 28
40189: PUSH
40190: LD_INT 45
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: LIST
40197: PUSH
40198: LD_VAR 0 12
40202: ARRAY
40203: ST_TO_ADDR
// break ;
40204: GO 40208
// end ; end ; end ;
40206: GO 40037
40208: POP
40209: POP
// end ; if not weapon then
40210: LD_VAR 0 18
40214: NOT
40215: IFFALSE 40275
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40217: LD_ADDR_VAR 0 5
40221: PUSH
40222: LD_VAR 0 5
40226: PUSH
40227: LD_INT 11
40229: PUSH
40230: LD_INT 30
40232: PUSH
40233: LD_INT 49
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: DIFF
40241: ST_TO_ADDR
// if not list then
40242: LD_VAR 0 5
40246: NOT
40247: IFFALSE 40251
// exit ;
40249: GO 40397
// weapon := list [ rand ( 1 , list ) ] ;
40251: LD_ADDR_VAR 0 18
40255: PUSH
40256: LD_VAR 0 5
40260: PUSH
40261: LD_INT 1
40263: PPUSH
40264: LD_VAR 0 5
40268: PPUSH
40269: CALL_OW 12
40273: ARRAY
40274: ST_TO_ADDR
// end ; if weapon then
40275: LD_VAR 0 18
40279: IFFALSE 40397
// begin tmp := CostOfWeapon ( weapon ) ;
40281: LD_ADDR_VAR 0 14
40285: PUSH
40286: LD_VAR 0 18
40290: PPUSH
40291: CALL_OW 451
40295: ST_TO_ADDR
// j := GetBase ( tower ) ;
40296: LD_ADDR_VAR 0 9
40300: PUSH
40301: LD_VAR 0 1
40305: PPUSH
40306: CALL_OW 274
40310: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40311: LD_VAR 0 9
40315: PPUSH
40316: LD_INT 1
40318: PPUSH
40319: CALL_OW 275
40323: PUSH
40324: LD_VAR 0 14
40328: PUSH
40329: LD_INT 1
40331: ARRAY
40332: GREATEREQUAL
40333: IFFALSE 40359
40335: PUSH
40336: LD_VAR 0 9
40340: PPUSH
40341: LD_INT 2
40343: PPUSH
40344: CALL_OW 275
40348: PUSH
40349: LD_VAR 0 14
40353: PUSH
40354: LD_INT 2
40356: ARRAY
40357: GREATEREQUAL
40358: AND
40359: IFFALSE 40385
40361: PUSH
40362: LD_VAR 0 9
40366: PPUSH
40367: LD_INT 3
40369: PPUSH
40370: CALL_OW 275
40374: PUSH
40375: LD_VAR 0 14
40379: PUSH
40380: LD_INT 3
40382: ARRAY
40383: GREATEREQUAL
40384: AND
40385: IFFALSE 40397
// result := weapon ;
40387: LD_ADDR_VAR 0 3
40391: PUSH
40392: LD_VAR 0 18
40396: ST_TO_ADDR
// end ; end ;
40397: LD_VAR 0 3
40401: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40402: LD_INT 0
40404: PPUSH
40405: PPUSH
// result := true ;
40406: LD_ADDR_VAR 0 3
40410: PUSH
40411: LD_INT 1
40413: ST_TO_ADDR
// if array1 = array2 then
40414: LD_VAR 0 1
40418: PUSH
40419: LD_VAR 0 2
40423: EQUAL
40424: IFFALSE 40484
// begin for i = 1 to array1 do
40426: LD_ADDR_VAR 0 4
40430: PUSH
40431: DOUBLE
40432: LD_INT 1
40434: DEC
40435: ST_TO_ADDR
40436: LD_VAR 0 1
40440: PUSH
40441: FOR_TO
40442: IFFALSE 40480
// if array1 [ i ] <> array2 [ i ] then
40444: LD_VAR 0 1
40448: PUSH
40449: LD_VAR 0 4
40453: ARRAY
40454: PUSH
40455: LD_VAR 0 2
40459: PUSH
40460: LD_VAR 0 4
40464: ARRAY
40465: NONEQUAL
40466: IFFALSE 40478
// begin result := false ;
40468: LD_ADDR_VAR 0 3
40472: PUSH
40473: LD_INT 0
40475: ST_TO_ADDR
// break ;
40476: GO 40480
// end ;
40478: GO 40441
40480: POP
40481: POP
// end else
40482: GO 40492
// result := false ;
40484: LD_ADDR_VAR 0 3
40488: PUSH
40489: LD_INT 0
40491: ST_TO_ADDR
// end ;
40492: LD_VAR 0 3
40496: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40497: LD_INT 0
40499: PPUSH
40500: PPUSH
// if not array1 or not array2 then
40501: LD_VAR 0 1
40505: NOT
40506: IFTRUE 40515
40508: PUSH
40509: LD_VAR 0 2
40513: NOT
40514: OR
40515: IFFALSE 40519
// exit ;
40517: GO 40583
// result := true ;
40519: LD_ADDR_VAR 0 3
40523: PUSH
40524: LD_INT 1
40526: ST_TO_ADDR
// for i = 1 to array1 do
40527: LD_ADDR_VAR 0 4
40531: PUSH
40532: DOUBLE
40533: LD_INT 1
40535: DEC
40536: ST_TO_ADDR
40537: LD_VAR 0 1
40541: PUSH
40542: FOR_TO
40543: IFFALSE 40581
// if array1 [ i ] <> array2 [ i ] then
40545: LD_VAR 0 1
40549: PUSH
40550: LD_VAR 0 4
40554: ARRAY
40555: PUSH
40556: LD_VAR 0 2
40560: PUSH
40561: LD_VAR 0 4
40565: ARRAY
40566: NONEQUAL
40567: IFFALSE 40579
// begin result := false ;
40569: LD_ADDR_VAR 0 3
40573: PUSH
40574: LD_INT 0
40576: ST_TO_ADDR
// break ;
40577: GO 40581
// end ;
40579: GO 40542
40581: POP
40582: POP
// end ;
40583: LD_VAR 0 3
40587: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
40592: PPUSH
// pom := GetBase ( fac ) ;
40593: LD_ADDR_VAR 0 5
40597: PUSH
40598: LD_VAR 0 1
40602: PPUSH
40603: CALL_OW 274
40607: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40608: LD_ADDR_VAR 0 4
40612: PUSH
40613: LD_VAR 0 2
40617: PUSH
40618: LD_INT 1
40620: ARRAY
40621: PPUSH
40622: LD_VAR 0 2
40626: PUSH
40627: LD_INT 2
40629: ARRAY
40630: PPUSH
40631: LD_VAR 0 2
40635: PUSH
40636: LD_INT 3
40638: ARRAY
40639: PPUSH
40640: LD_VAR 0 2
40644: PUSH
40645: LD_INT 4
40647: ARRAY
40648: PPUSH
40649: CALL_OW 449
40653: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40654: LD_ADDR_VAR 0 3
40658: PUSH
40659: LD_VAR 0 5
40663: PPUSH
40664: LD_INT 1
40666: PPUSH
40667: CALL_OW 275
40671: PUSH
40672: LD_VAR 0 4
40676: PUSH
40677: LD_INT 1
40679: ARRAY
40680: GREATEREQUAL
40681: IFFALSE 40707
40683: PUSH
40684: LD_VAR 0 5
40688: PPUSH
40689: LD_INT 2
40691: PPUSH
40692: CALL_OW 275
40696: PUSH
40697: LD_VAR 0 4
40701: PUSH
40702: LD_INT 2
40704: ARRAY
40705: GREATEREQUAL
40706: AND
40707: IFFALSE 40733
40709: PUSH
40710: LD_VAR 0 5
40714: PPUSH
40715: LD_INT 3
40717: PPUSH
40718: CALL_OW 275
40722: PUSH
40723: LD_VAR 0 4
40727: PUSH
40728: LD_INT 3
40730: ARRAY
40731: GREATEREQUAL
40732: AND
40733: ST_TO_ADDR
// end ;
40734: LD_VAR 0 3
40738: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40739: LD_INT 0
40741: PPUSH
40742: PPUSH
40743: PPUSH
40744: PPUSH
// pom := GetBase ( building ) ;
40745: LD_ADDR_VAR 0 3
40749: PUSH
40750: LD_VAR 0 1
40754: PPUSH
40755: CALL_OW 274
40759: ST_TO_ADDR
// if not pom then
40760: LD_VAR 0 3
40764: NOT
40765: IFFALSE 40769
// exit ;
40767: GO 40943
// btype := GetBType ( building ) ;
40769: LD_ADDR_VAR 0 5
40773: PUSH
40774: LD_VAR 0 1
40778: PPUSH
40779: CALL_OW 266
40783: ST_TO_ADDR
// if btype = b_armoury then
40784: LD_VAR 0 5
40788: PUSH
40789: LD_INT 4
40791: EQUAL
40792: IFFALSE 40802
// btype := b_barracks ;
40794: LD_ADDR_VAR 0 5
40798: PUSH
40799: LD_INT 5
40801: ST_TO_ADDR
// if btype = b_depot then
40802: LD_VAR 0 5
40806: PUSH
40807: LD_INT 0
40809: EQUAL
40810: IFFALSE 40820
// btype := b_warehouse ;
40812: LD_ADDR_VAR 0 5
40816: PUSH
40817: LD_INT 1
40819: ST_TO_ADDR
// if btype = b_workshop then
40820: LD_VAR 0 5
40824: PUSH
40825: LD_INT 2
40827: EQUAL
40828: IFFALSE 40838
// btype := b_factory ;
40830: LD_ADDR_VAR 0 5
40834: PUSH
40835: LD_INT 3
40837: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40838: LD_ADDR_VAR 0 4
40842: PUSH
40843: LD_VAR 0 5
40847: PPUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL_OW 248
40857: PPUSH
40858: CALL_OW 450
40862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40863: LD_ADDR_VAR 0 2
40867: PUSH
40868: LD_VAR 0 3
40872: PPUSH
40873: LD_INT 1
40875: PPUSH
40876: CALL_OW 275
40880: PUSH
40881: LD_VAR 0 4
40885: PUSH
40886: LD_INT 1
40888: ARRAY
40889: GREATEREQUAL
40890: IFFALSE 40916
40892: PUSH
40893: LD_VAR 0 3
40897: PPUSH
40898: LD_INT 2
40900: PPUSH
40901: CALL_OW 275
40905: PUSH
40906: LD_VAR 0 4
40910: PUSH
40911: LD_INT 2
40913: ARRAY
40914: GREATEREQUAL
40915: AND
40916: IFFALSE 40942
40918: PUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: LD_INT 3
40926: PPUSH
40927: CALL_OW 275
40931: PUSH
40932: LD_VAR 0 4
40936: PUSH
40937: LD_INT 3
40939: ARRAY
40940: GREATEREQUAL
40941: AND
40942: ST_TO_ADDR
// end ;
40943: LD_VAR 0 2
40947: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40948: LD_INT 0
40950: PPUSH
40951: PPUSH
40952: PPUSH
// pom := GetBase ( building ) ;
40953: LD_ADDR_VAR 0 4
40957: PUSH
40958: LD_VAR 0 1
40962: PPUSH
40963: CALL_OW 274
40967: ST_TO_ADDR
// if not pom then
40968: LD_VAR 0 4
40972: NOT
40973: IFFALSE 40977
// exit ;
40975: GO 41082
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40977: LD_ADDR_VAR 0 5
40981: PUSH
40982: LD_VAR 0 2
40986: PPUSH
40987: LD_VAR 0 1
40991: PPUSH
40992: CALL_OW 248
40996: PPUSH
40997: CALL_OW 450
41001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41002: LD_ADDR_VAR 0 3
41006: PUSH
41007: LD_VAR 0 4
41011: PPUSH
41012: LD_INT 1
41014: PPUSH
41015: CALL_OW 275
41019: PUSH
41020: LD_VAR 0 5
41024: PUSH
41025: LD_INT 1
41027: ARRAY
41028: GREATEREQUAL
41029: IFFALSE 41055
41031: PUSH
41032: LD_VAR 0 4
41036: PPUSH
41037: LD_INT 2
41039: PPUSH
41040: CALL_OW 275
41044: PUSH
41045: LD_VAR 0 5
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: GREATEREQUAL
41054: AND
41055: IFFALSE 41081
41057: PUSH
41058: LD_VAR 0 4
41062: PPUSH
41063: LD_INT 3
41065: PPUSH
41066: CALL_OW 275
41070: PUSH
41071: LD_VAR 0 5
41075: PUSH
41076: LD_INT 3
41078: ARRAY
41079: GREATEREQUAL
41080: AND
41081: ST_TO_ADDR
// end ;
41082: LD_VAR 0 3
41086: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41087: LD_INT 0
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
// result := false ;
41100: LD_ADDR_VAR 0 8
41104: PUSH
41105: LD_INT 0
41107: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41108: LD_VAR 0 5
41112: NOT
41113: IFTRUE 41122
41115: PUSH
41116: LD_VAR 0 1
41120: NOT
41121: OR
41122: IFTRUE 41131
41124: PUSH
41125: LD_VAR 0 2
41129: NOT
41130: OR
41131: IFTRUE 41140
41133: PUSH
41134: LD_VAR 0 3
41138: NOT
41139: OR
41140: IFFALSE 41144
// exit ;
41142: GO 41970
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41144: LD_ADDR_VAR 0 14
41148: PUSH
41149: LD_VAR 0 1
41153: PPUSH
41154: LD_VAR 0 2
41158: PPUSH
41159: LD_VAR 0 3
41163: PPUSH
41164: LD_VAR 0 4
41168: PPUSH
41169: LD_VAR 0 5
41173: PUSH
41174: LD_INT 1
41176: ARRAY
41177: PPUSH
41178: CALL_OW 248
41182: PPUSH
41183: LD_INT 0
41185: PPUSH
41186: CALL 43251 0 6
41190: ST_TO_ADDR
// if not hexes then
41191: LD_VAR 0 14
41195: NOT
41196: IFFALSE 41200
// exit ;
41198: GO 41970
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41200: LD_ADDR_VAR 0 17
41204: PUSH
41205: LD_VAR 0 5
41209: PPUSH
41210: LD_INT 22
41212: PUSH
41213: LD_VAR 0 13
41217: PPUSH
41218: CALL_OW 255
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 30
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 30
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PPUSH
41259: CALL_OW 72
41263: ST_TO_ADDR
// for i = 1 to hexes do
41264: LD_ADDR_VAR 0 9
41268: PUSH
41269: DOUBLE
41270: LD_INT 1
41272: DEC
41273: ST_TO_ADDR
41274: LD_VAR 0 14
41278: PUSH
41279: FOR_TO
41280: IFFALSE 41968
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41282: LD_ADDR_VAR 0 13
41286: PUSH
41287: LD_VAR 0 14
41291: PUSH
41292: LD_VAR 0 9
41296: ARRAY
41297: PUSH
41298: LD_INT 1
41300: ARRAY
41301: PPUSH
41302: LD_VAR 0 14
41306: PUSH
41307: LD_VAR 0 9
41311: ARRAY
41312: PUSH
41313: LD_INT 2
41315: ARRAY
41316: PPUSH
41317: CALL_OW 428
41321: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41322: LD_VAR 0 14
41326: PUSH
41327: LD_VAR 0 9
41331: ARRAY
41332: PUSH
41333: LD_INT 1
41335: ARRAY
41336: PPUSH
41337: LD_VAR 0 14
41341: PUSH
41342: LD_VAR 0 9
41346: ARRAY
41347: PUSH
41348: LD_INT 2
41350: ARRAY
41351: PPUSH
41352: CALL_OW 351
41356: IFTRUE 41395
41358: PUSH
41359: LD_VAR 0 14
41363: PUSH
41364: LD_VAR 0 9
41368: ARRAY
41369: PUSH
41370: LD_INT 1
41372: ARRAY
41373: PPUSH
41374: LD_VAR 0 14
41378: PUSH
41379: LD_VAR 0 9
41383: ARRAY
41384: PUSH
41385: LD_INT 2
41387: ARRAY
41388: PPUSH
41389: CALL_OW 488
41393: NOT
41394: OR
41395: IFTRUE 41412
41397: PUSH
41398: LD_VAR 0 13
41402: PPUSH
41403: CALL_OW 247
41407: PUSH
41408: LD_INT 3
41410: EQUAL
41411: OR
41412: IFFALSE 41418
// exit ;
41414: POP
41415: POP
41416: GO 41970
// if not tmp then
41418: LD_VAR 0 13
41422: NOT
41423: IFFALSE 41427
// continue ;
41425: GO 41279
// result := true ;
41427: LD_ADDR_VAR 0 8
41431: PUSH
41432: LD_INT 1
41434: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41435: LD_VAR 0 6
41439: IFFALSE 41456
41441: PUSH
41442: LD_VAR 0 13
41446: PPUSH
41447: CALL_OW 247
41451: PUSH
41452: LD_INT 2
41454: EQUAL
41455: AND
41456: IFFALSE 41473
41458: PUSH
41459: LD_VAR 0 13
41463: PPUSH
41464: CALL_OW 263
41468: PUSH
41469: LD_INT 1
41471: EQUAL
41472: AND
41473: IFFALSE 41637
// begin if IsDrivenBy ( tmp ) then
41475: LD_VAR 0 13
41479: PPUSH
41480: CALL_OW 311
41484: IFFALSE 41488
// continue ;
41486: GO 41279
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41488: LD_VAR 0 6
41492: PPUSH
41493: LD_INT 3
41495: PUSH
41496: LD_INT 60
41498: PUSH
41499: EMPTY
41500: LIST
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 3
41508: PUSH
41509: LD_INT 55
41511: PUSH
41512: EMPTY
41513: LIST
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PPUSH
41523: CALL_OW 72
41527: IFFALSE 41635
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41529: LD_ADDR_VAR 0 18
41533: PUSH
41534: LD_VAR 0 6
41538: PPUSH
41539: LD_INT 3
41541: PUSH
41542: LD_INT 60
41544: PUSH
41545: EMPTY
41546: LIST
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 3
41554: PUSH
41555: LD_INT 55
41557: PUSH
41558: EMPTY
41559: LIST
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PPUSH
41569: CALL_OW 72
41573: PUSH
41574: LD_INT 1
41576: ARRAY
41577: ST_TO_ADDR
// if IsInUnit ( driver ) then
41578: LD_VAR 0 18
41582: PPUSH
41583: CALL_OW 310
41587: IFFALSE 41598
// ComExit ( driver ) ;
41589: LD_VAR 0 18
41593: PPUSH
41594: CALL 67251 0 1
// AddComEnterUnit ( driver , tmp ) ;
41598: LD_VAR 0 18
41602: PPUSH
41603: LD_VAR 0 13
41607: PPUSH
41608: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41612: LD_VAR 0 18
41616: PPUSH
41617: LD_VAR 0 7
41621: PPUSH
41622: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41626: LD_VAR 0 18
41630: PPUSH
41631: CALL_OW 181
// end ; continue ;
41635: GO 41279
// end ; if not cleaners or not tmp in cleaners then
41637: LD_VAR 0 6
41641: NOT
41642: IFTRUE 41657
41644: PUSH
41645: LD_VAR 0 13
41649: PUSH
41650: LD_VAR 0 6
41654: IN
41655: NOT
41656: OR
41657: IFFALSE 41966
// begin if dep then
41659: LD_VAR 0 17
41663: IFFALSE 41799
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41665: LD_ADDR_VAR 0 16
41669: PUSH
41670: LD_VAR 0 17
41674: PUSH
41675: LD_INT 1
41677: ARRAY
41678: PPUSH
41679: CALL_OW 250
41683: PPUSH
41684: LD_VAR 0 17
41688: PUSH
41689: LD_INT 1
41691: ARRAY
41692: PPUSH
41693: CALL_OW 254
41697: PPUSH
41698: LD_INT 5
41700: PPUSH
41701: CALL_OW 272
41705: PUSH
41706: LD_VAR 0 17
41710: PUSH
41711: LD_INT 1
41713: ARRAY
41714: PPUSH
41715: CALL_OW 251
41719: PPUSH
41720: LD_VAR 0 17
41724: PUSH
41725: LD_INT 1
41727: ARRAY
41728: PPUSH
41729: CALL_OW 254
41733: PPUSH
41734: LD_INT 5
41736: PPUSH
41737: CALL_OW 273
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41746: LD_VAR 0 16
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: PPUSH
41755: LD_VAR 0 16
41759: PUSH
41760: LD_INT 2
41762: ARRAY
41763: PPUSH
41764: CALL_OW 488
41768: IFFALSE 41799
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41770: LD_VAR 0 13
41774: PPUSH
41775: LD_VAR 0 16
41779: PUSH
41780: LD_INT 1
41782: ARRAY
41783: PPUSH
41784: LD_VAR 0 16
41788: PUSH
41789: LD_INT 2
41791: ARRAY
41792: PPUSH
41793: CALL_OW 111
// continue ;
41797: GO 41279
// end ; end ; r := GetDir ( tmp ) ;
41799: LD_ADDR_VAR 0 15
41803: PUSH
41804: LD_VAR 0 13
41808: PPUSH
41809: CALL_OW 254
41813: ST_TO_ADDR
// if r = 5 then
41814: LD_VAR 0 15
41818: PUSH
41819: LD_INT 5
41821: EQUAL
41822: IFFALSE 41832
// r := 0 ;
41824: LD_ADDR_VAR 0 15
41828: PUSH
41829: LD_INT 0
41831: ST_TO_ADDR
// for j = r to 5 do
41832: LD_ADDR_VAR 0 10
41836: PUSH
41837: DOUBLE
41838: LD_VAR 0 15
41842: DEC
41843: ST_TO_ADDR
41844: LD_INT 5
41846: PUSH
41847: FOR_TO
41848: IFFALSE 41964
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41850: LD_ADDR_VAR 0 11
41854: PUSH
41855: LD_VAR 0 13
41859: PPUSH
41860: CALL_OW 250
41864: PPUSH
41865: LD_VAR 0 10
41869: PPUSH
41870: LD_INT 2
41872: PPUSH
41873: CALL_OW 272
41877: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41878: LD_ADDR_VAR 0 12
41882: PUSH
41883: LD_VAR 0 13
41887: PPUSH
41888: CALL_OW 251
41892: PPUSH
41893: LD_VAR 0 10
41897: PPUSH
41898: LD_INT 2
41900: PPUSH
41901: CALL_OW 273
41905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41906: LD_VAR 0 11
41910: PPUSH
41911: LD_VAR 0 12
41915: PPUSH
41916: CALL_OW 488
41920: IFFALSE 41939
41922: PUSH
41923: LD_VAR 0 11
41927: PPUSH
41928: LD_VAR 0 12
41932: PPUSH
41933: CALL_OW 428
41937: NOT
41938: AND
41939: IFFALSE 41962
// begin ComMoveXY ( tmp , _x , _y ) ;
41941: LD_VAR 0 13
41945: PPUSH
41946: LD_VAR 0 11
41950: PPUSH
41951: LD_VAR 0 12
41955: PPUSH
41956: CALL_OW 111
// break ;
41960: GO 41964
// end ; end ;
41962: GO 41847
41964: POP
41965: POP
// end ; end ;
41966: GO 41279
41968: POP
41969: POP
// end ;
41970: LD_VAR 0 8
41974: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41975: LD_INT 0
41977: PPUSH
// result := true ;
41978: LD_ADDR_VAR 0 3
41982: PUSH
41983: LD_INT 1
41985: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41986: LD_VAR 0 2
41990: PUSH
41991: LD_INT 24
41993: DOUBLE
41994: EQUAL
41995: IFTRUE 42005
41997: LD_INT 33
41999: DOUBLE
42000: EQUAL
42001: IFTRUE 42005
42003: GO 42030
42005: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42006: LD_ADDR_VAR 0 3
42010: PUSH
42011: LD_INT 32
42013: PPUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: CALL_OW 321
42023: PUSH
42024: LD_INT 2
42026: EQUAL
42027: ST_TO_ADDR
42028: GO 42346
42030: LD_INT 20
42032: DOUBLE
42033: EQUAL
42034: IFTRUE 42038
42036: GO 42063
42038: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42039: LD_ADDR_VAR 0 3
42043: PUSH
42044: LD_INT 6
42046: PPUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 321
42056: PUSH
42057: LD_INT 2
42059: EQUAL
42060: ST_TO_ADDR
42061: GO 42346
42063: LD_INT 22
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42077
42069: LD_INT 36
42071: DOUBLE
42072: EQUAL
42073: IFTRUE 42077
42075: GO 42102
42077: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42078: LD_ADDR_VAR 0 3
42082: PUSH
42083: LD_INT 15
42085: PPUSH
42086: LD_VAR 0 1
42090: PPUSH
42091: CALL_OW 321
42095: PUSH
42096: LD_INT 2
42098: EQUAL
42099: ST_TO_ADDR
42100: GO 42346
42102: LD_INT 30
42104: DOUBLE
42105: EQUAL
42106: IFTRUE 42110
42108: GO 42135
42110: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42111: LD_ADDR_VAR 0 3
42115: PUSH
42116: LD_INT 20
42118: PPUSH
42119: LD_VAR 0 1
42123: PPUSH
42124: CALL_OW 321
42128: PUSH
42129: LD_INT 2
42131: EQUAL
42132: ST_TO_ADDR
42133: GO 42346
42135: LD_INT 28
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42149
42141: LD_INT 21
42143: DOUBLE
42144: EQUAL
42145: IFTRUE 42149
42147: GO 42174
42149: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42150: LD_ADDR_VAR 0 3
42154: PUSH
42155: LD_INT 21
42157: PPUSH
42158: LD_VAR 0 1
42162: PPUSH
42163: CALL_OW 321
42167: PUSH
42168: LD_INT 2
42170: EQUAL
42171: ST_TO_ADDR
42172: GO 42346
42174: LD_INT 16
42176: DOUBLE
42177: EQUAL
42178: IFTRUE 42182
42180: GO 42207
42182: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42183: LD_ADDR_VAR 0 3
42187: PUSH
42188: LD_INT 84
42190: PPUSH
42191: LD_VAR 0 1
42195: PPUSH
42196: CALL_OW 321
42200: PUSH
42201: LD_INT 2
42203: EQUAL
42204: ST_TO_ADDR
42205: GO 42346
42207: LD_INT 19
42209: DOUBLE
42210: EQUAL
42211: IFTRUE 42221
42213: LD_INT 23
42215: DOUBLE
42216: EQUAL
42217: IFTRUE 42221
42219: GO 42246
42221: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42222: LD_ADDR_VAR 0 3
42226: PUSH
42227: LD_INT 83
42229: PPUSH
42230: LD_VAR 0 1
42234: PPUSH
42235: CALL_OW 321
42239: PUSH
42240: LD_INT 2
42242: EQUAL
42243: ST_TO_ADDR
42244: GO 42346
42246: LD_INT 17
42248: DOUBLE
42249: EQUAL
42250: IFTRUE 42254
42252: GO 42279
42254: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: LD_INT 39
42262: PPUSH
42263: LD_VAR 0 1
42267: PPUSH
42268: CALL_OW 321
42272: PUSH
42273: LD_INT 2
42275: EQUAL
42276: ST_TO_ADDR
42277: GO 42346
42279: LD_INT 18
42281: DOUBLE
42282: EQUAL
42283: IFTRUE 42287
42285: GO 42312
42287: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42288: LD_ADDR_VAR 0 3
42292: PUSH
42293: LD_INT 40
42295: PPUSH
42296: LD_VAR 0 1
42300: PPUSH
42301: CALL_OW 321
42305: PUSH
42306: LD_INT 2
42308: EQUAL
42309: ST_TO_ADDR
42310: GO 42346
42312: LD_INT 27
42314: DOUBLE
42315: EQUAL
42316: IFTRUE 42320
42318: GO 42345
42320: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_INT 35
42328: PPUSH
42329: LD_VAR 0 1
42333: PPUSH
42334: CALL_OW 321
42338: PUSH
42339: LD_INT 2
42341: EQUAL
42342: ST_TO_ADDR
42343: GO 42346
42345: POP
// end ;
42346: LD_VAR 0 3
42350: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42351: LD_INT 0
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
// result := false ;
42364: LD_ADDR_VAR 0 6
42368: PUSH
42369: LD_INT 0
42371: ST_TO_ADDR
// if btype = b_depot then
42372: LD_VAR 0 2
42376: PUSH
42377: LD_INT 0
42379: EQUAL
42380: IFFALSE 42392
// begin result := true ;
42382: LD_ADDR_VAR 0 6
42386: PUSH
42387: LD_INT 1
42389: ST_TO_ADDR
// exit ;
42390: GO 43246
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42392: LD_VAR 0 1
42396: NOT
42397: IFTRUE 42422
42399: PUSH
42400: LD_VAR 0 1
42404: PPUSH
42405: CALL_OW 266
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: IN
42420: NOT
42421: OR
42422: IFTRUE 42431
42424: PUSH
42425: LD_VAR 0 2
42429: NOT
42430: OR
42431: IFTRUE 42467
42433: PUSH
42434: LD_VAR 0 5
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 1
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: LD_INT 3
42450: PUSH
42451: LD_INT 4
42453: PUSH
42454: LD_INT 5
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: IN
42465: NOT
42466: OR
42467: IFTRUE 42486
42469: PUSH
42470: LD_VAR 0 3
42474: PPUSH
42475: LD_VAR 0 4
42479: PPUSH
42480: CALL_OW 488
42484: NOT
42485: OR
42486: IFFALSE 42490
// exit ;
42488: GO 43246
// side := GetSide ( depot ) ;
42490: LD_ADDR_VAR 0 9
42494: PUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: CALL_OW 255
42504: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42505: LD_VAR 0 9
42509: PPUSH
42510: LD_VAR 0 2
42514: PPUSH
42515: CALL 41975 0 2
42519: NOT
42520: IFFALSE 42524
// exit ;
42522: GO 43246
// pom := GetBase ( depot ) ;
42524: LD_ADDR_VAR 0 10
42528: PUSH
42529: LD_VAR 0 1
42533: PPUSH
42534: CALL_OW 274
42538: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42539: LD_ADDR_VAR 0 11
42543: PUSH
42544: LD_VAR 0 2
42548: PPUSH
42549: LD_VAR 0 1
42553: PPUSH
42554: CALL_OW 248
42558: PPUSH
42559: CALL_OW 450
42563: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42564: LD_VAR 0 10
42568: PPUSH
42569: LD_INT 1
42571: PPUSH
42572: CALL_OW 275
42576: PUSH
42577: LD_VAR 0 11
42581: PUSH
42582: LD_INT 1
42584: ARRAY
42585: GREATEREQUAL
42586: IFFALSE 42612
42588: PUSH
42589: LD_VAR 0 10
42593: PPUSH
42594: LD_INT 2
42596: PPUSH
42597: CALL_OW 275
42601: PUSH
42602: LD_VAR 0 11
42606: PUSH
42607: LD_INT 2
42609: ARRAY
42610: GREATEREQUAL
42611: AND
42612: IFFALSE 42638
42614: PUSH
42615: LD_VAR 0 10
42619: PPUSH
42620: LD_INT 3
42622: PPUSH
42623: CALL_OW 275
42627: PUSH
42628: LD_VAR 0 11
42632: PUSH
42633: LD_INT 3
42635: ARRAY
42636: GREATEREQUAL
42637: AND
42638: NOT
42639: IFFALSE 42643
// exit ;
42641: GO 43246
// if GetBType ( depot ) = b_depot then
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL_OW 266
42652: PUSH
42653: LD_INT 0
42655: EQUAL
42656: IFFALSE 42668
// dist := 28 else
42658: LD_ADDR_VAR 0 14
42662: PUSH
42663: LD_INT 28
42665: ST_TO_ADDR
42666: GO 42676
// dist := 36 ;
42668: LD_ADDR_VAR 0 14
42672: PUSH
42673: LD_INT 36
42675: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42676: LD_VAR 0 1
42680: PPUSH
42681: LD_VAR 0 3
42685: PPUSH
42686: LD_VAR 0 4
42690: PPUSH
42691: CALL_OW 297
42695: PUSH
42696: LD_VAR 0 14
42700: GREATER
42701: IFFALSE 42705
// exit ;
42703: GO 43246
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42705: LD_ADDR_VAR 0 12
42709: PUSH
42710: LD_VAR 0 2
42714: PPUSH
42715: LD_VAR 0 3
42719: PPUSH
42720: LD_VAR 0 4
42724: PPUSH
42725: LD_VAR 0 5
42729: PPUSH
42730: LD_VAR 0 1
42734: PPUSH
42735: CALL_OW 248
42739: PPUSH
42740: LD_INT 0
42742: PPUSH
42743: CALL 43251 0 6
42747: ST_TO_ADDR
// if not hexes then
42748: LD_VAR 0 12
42752: NOT
42753: IFFALSE 42757
// exit ;
42755: GO 43246
// hex := GetHexInfo ( x , y ) ;
42757: LD_ADDR_VAR 0 15
42761: PUSH
42762: LD_VAR 0 3
42766: PPUSH
42767: LD_VAR 0 4
42771: PPUSH
42772: CALL_OW 546
42776: ST_TO_ADDR
// if hex [ 1 ] then
42777: LD_VAR 0 15
42781: PUSH
42782: LD_INT 1
42784: ARRAY
42785: IFFALSE 42789
// exit ;
42787: GO 43246
// height := hex [ 2 ] ;
42789: LD_ADDR_VAR 0 13
42793: PUSH
42794: LD_VAR 0 15
42798: PUSH
42799: LD_INT 2
42801: ARRAY
42802: ST_TO_ADDR
// for i = 1 to hexes do
42803: LD_ADDR_VAR 0 7
42807: PUSH
42808: DOUBLE
42809: LD_INT 1
42811: DEC
42812: ST_TO_ADDR
42813: LD_VAR 0 12
42817: PUSH
42818: FOR_TO
42819: IFFALSE 43163
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42821: LD_VAR 0 12
42825: PUSH
42826: LD_VAR 0 7
42830: ARRAY
42831: PUSH
42832: LD_INT 1
42834: ARRAY
42835: PPUSH
42836: LD_VAR 0 12
42840: PUSH
42841: LD_VAR 0 7
42845: ARRAY
42846: PUSH
42847: LD_INT 2
42849: ARRAY
42850: PPUSH
42851: CALL_OW 488
42855: NOT
42856: IFTRUE 42898
42858: PUSH
42859: LD_VAR 0 12
42863: PUSH
42864: LD_VAR 0 7
42868: ARRAY
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PPUSH
42874: LD_VAR 0 12
42878: PUSH
42879: LD_VAR 0 7
42883: ARRAY
42884: PUSH
42885: LD_INT 2
42887: ARRAY
42888: PPUSH
42889: CALL_OW 428
42893: PUSH
42894: LD_INT 0
42896: GREATER
42897: OR
42898: IFTRUE 42936
42900: PUSH
42901: LD_VAR 0 12
42905: PUSH
42906: LD_VAR 0 7
42910: ARRAY
42911: PUSH
42912: LD_INT 1
42914: ARRAY
42915: PPUSH
42916: LD_VAR 0 12
42920: PUSH
42921: LD_VAR 0 7
42925: ARRAY
42926: PUSH
42927: LD_INT 2
42929: ARRAY
42930: PPUSH
42931: CALL_OW 351
42935: OR
42936: IFFALSE 42942
// exit ;
42938: POP
42939: POP
42940: GO 43246
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42942: LD_ADDR_VAR 0 8
42946: PUSH
42947: LD_VAR 0 12
42951: PUSH
42952: LD_VAR 0 7
42956: ARRAY
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PPUSH
42962: LD_VAR 0 12
42966: PUSH
42967: LD_VAR 0 7
42971: ARRAY
42972: PUSH
42973: LD_INT 2
42975: ARRAY
42976: PPUSH
42977: CALL_OW 546
42981: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42982: LD_VAR 0 8
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: IFTRUE 43012
42992: PUSH
42993: LD_VAR 0 8
42997: PUSH
42998: LD_INT 2
43000: ARRAY
43001: PUSH
43002: LD_VAR 0 13
43006: PUSH
43007: LD_INT 2
43009: PLUS
43010: GREATER
43011: OR
43012: IFTRUE 43034
43014: PUSH
43015: LD_VAR 0 8
43019: PUSH
43020: LD_INT 2
43022: ARRAY
43023: PUSH
43024: LD_VAR 0 13
43028: PUSH
43029: LD_INT 2
43031: MINUS
43032: LESS
43033: OR
43034: IFTRUE 43102
43036: PUSH
43037: LD_VAR 0 8
43041: PUSH
43042: LD_INT 3
43044: ARRAY
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 8
43051: PUSH
43052: LD_INT 9
43054: PUSH
43055: LD_INT 10
43057: PUSH
43058: LD_INT 11
43060: PUSH
43061: LD_INT 12
43063: PUSH
43064: LD_INT 13
43066: PUSH
43067: LD_INT 16
43069: PUSH
43070: LD_INT 17
43072: PUSH
43073: LD_INT 18
43075: PUSH
43076: LD_INT 19
43078: PUSH
43079: LD_INT 20
43081: PUSH
43082: LD_INT 21
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: IN
43100: NOT
43101: OR
43102: IFTRUE 43115
43104: PUSH
43105: LD_VAR 0 8
43109: PUSH
43110: LD_INT 5
43112: ARRAY
43113: NOT
43114: OR
43115: IFTRUE 43155
43117: PUSH
43118: LD_VAR 0 8
43122: PUSH
43123: LD_INT 6
43125: ARRAY
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 7
43135: PUSH
43136: LD_INT 9
43138: PUSH
43139: LD_INT 10
43141: PUSH
43142: LD_INT 11
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: IN
43153: NOT
43154: OR
43155: IFFALSE 43161
// exit ;
43157: POP
43158: POP
43159: GO 43246
// end ;
43161: GO 42818
43163: POP
43164: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43165: LD_VAR 0 9
43169: PPUSH
43170: LD_VAR 0 3
43174: PPUSH
43175: LD_VAR 0 4
43179: PPUSH
43180: LD_INT 20
43182: PPUSH
43183: CALL 35065 0 4
43187: PUSH
43188: LD_INT 4
43190: ARRAY
43191: IFFALSE 43195
// exit ;
43193: GO 43246
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43195: LD_VAR 0 2
43199: PUSH
43200: LD_INT 29
43202: PUSH
43203: LD_INT 30
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: IN
43210: IFFALSE 43234
43212: PUSH
43213: LD_VAR 0 3
43217: PPUSH
43218: LD_VAR 0 4
43222: PPUSH
43223: LD_VAR 0 9
43227: PPUSH
43228: CALL_OW 440
43232: NOT
43233: AND
43234: IFFALSE 43238
// exit ;
43236: GO 43246
// result := true ;
43238: LD_ADDR_VAR 0 6
43242: PUSH
43243: LD_INT 1
43245: ST_TO_ADDR
// end ;
43246: LD_VAR 0 6
43250: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43251: LD_INT 0
43253: PPUSH
43254: PPUSH
43255: PPUSH
43256: PPUSH
43257: PPUSH
43258: PPUSH
43259: PPUSH
43260: PPUSH
43261: PPUSH
43262: PPUSH
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
43304: PPUSH
43305: PPUSH
43306: PPUSH
43307: PPUSH
43308: PPUSH
43309: PPUSH
43310: PPUSH
// result = [ ] ;
43311: LD_ADDR_VAR 0 7
43315: PUSH
43316: EMPTY
43317: ST_TO_ADDR
// temp_list = [ ] ;
43318: LD_ADDR_VAR 0 9
43322: PUSH
43323: EMPTY
43324: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43325: LD_VAR 0 4
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 4
43344: PUSH
43345: LD_INT 5
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: IN
43356: NOT
43357: IFTRUE 43400
43359: PUSH
43360: LD_VAR 0 1
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: IN
43375: IFFALSE 43399
43377: PUSH
43378: LD_VAR 0 5
43382: PUSH
43383: LD_INT 1
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: IN
43397: NOT
43398: AND
43399: OR
43400: IFFALSE 43404
// exit ;
43402: GO 61803
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43404: LD_VAR 0 1
43408: PUSH
43409: LD_INT 6
43411: PUSH
43412: LD_INT 7
43414: PUSH
43415: LD_INT 8
43417: PUSH
43418: LD_INT 13
43420: PUSH
43421: LD_INT 12
43423: PUSH
43424: LD_INT 15
43426: PUSH
43427: LD_INT 11
43429: PUSH
43430: LD_INT 14
43432: PUSH
43433: LD_INT 10
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: IN
43447: IFFALSE 43457
// btype = b_lab ;
43449: LD_ADDR_VAR 0 1
43453: PUSH
43454: LD_INT 6
43456: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43457: LD_VAR 0 6
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: IN
43476: NOT
43477: IFTRUE 43545
43479: PUSH
43480: LD_VAR 0 1
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: LD_INT 3
43496: PUSH
43497: LD_INT 6
43499: PUSH
43500: LD_INT 36
43502: PUSH
43503: LD_INT 4
43505: PUSH
43506: LD_INT 5
43508: PUSH
43509: LD_INT 31
43511: PUSH
43512: LD_INT 32
43514: PUSH
43515: LD_INT 33
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: IN
43531: NOT
43532: IFFALSE 43544
43534: PUSH
43535: LD_VAR 0 6
43539: PUSH
43540: LD_INT 1
43542: EQUAL
43543: AND
43544: OR
43545: IFTRUE 43577
43547: PUSH
43548: LD_VAR 0 1
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: IN
43563: NOT
43564: IFFALSE 43576
43566: PUSH
43567: LD_VAR 0 6
43571: PUSH
43572: LD_INT 2
43574: EQUAL
43575: AND
43576: OR
43577: IFFALSE 43587
// mode = 0 ;
43579: LD_ADDR_VAR 0 6
43583: PUSH
43584: LD_INT 0
43586: ST_TO_ADDR
// case mode of 0 :
43587: LD_VAR 0 6
43591: PUSH
43592: LD_INT 0
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 55053
43600: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43601: LD_ADDR_VAR 0 11
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43794: LD_ADDR_VAR 0 12
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 1
43906: NEG
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 3
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43990: LD_ADDR_VAR 0 13
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 3
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 3
44149: NEG
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 3
44161: NEG
44162: PUSH
44163: LD_INT 3
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44189: LD_ADDR_VAR 0 14
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 3
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44385: LD_ADDR_VAR 0 15
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44578: LD_ADDR_VAR 0 16
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 3
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44771: LD_ADDR_VAR 0 17
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 2
44958: NEG
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45001: LD_ADDR_VAR 0 18
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 0
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45231: LD_ADDR_VAR 0 19
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45461: LD_ADDR_VAR 0 20
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 2
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 2
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: NEG
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45691: LD_ADDR_VAR 0 21
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 2
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 2
45826: PUSH
45827: LD_INT 2
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 2
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 0
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: NEG
45891: PUSH
45892: LD_INT 2
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45921: LD_ADDR_VAR 0 22
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: LD_INT 2
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 1
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46151: LD_ADDR_VAR 0 23
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 2
46327: NEG
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 3
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46431: LD_ADDR_VAR 0 24
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: LD_INT 1
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46707: LD_ADDR_VAR 0 25
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46981: LD_ADDR_VAR 0 26
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47257: LD_ADDR_VAR 0 27
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 2
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 0
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47537: LD_ADDR_VAR 0 28
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: NEG
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 3
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 3
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: NEG
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47819: LD_ADDR_VAR 0 29
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48098: LD_ADDR_VAR 0 30
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 2
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 3
48291: NEG
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 3
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 3
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48376: LD_ADDR_VAR 0 31
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 0
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48654: LD_ADDR_VAR 0 32
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 3
48866: PUSH
48867: LD_INT 2
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 3
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48932: LD_ADDR_VAR 0 33
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 3
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 1
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 3
49176: NEG
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49211: LD_ADDR_VAR 0 34
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: NEG
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: LD_INT 2
49296: NEG
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 2
49390: NEG
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 3
49456: NEG
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49491: LD_ADDR_VAR 0 35
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 2
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49603: LD_ADDR_VAR 0 36
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49715: LD_ADDR_VAR 0 37
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49827: LD_ADDR_VAR 0 38
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49939: LD_ADDR_VAR 0 39
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50051: LD_ADDR_VAR 0 40
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 1
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50163: LD_ADDR_VAR 0 41
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50513: LD_ADDR_VAR 0 42
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: LD_INT 1
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 0
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 3
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50863: LD_ADDR_VAR 0 43
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 3
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 3
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51211: LD_ADDR_VAR 0 44
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 3
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 3
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: LD_INT 2
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 3
51520: NEG
51521: PUSH
51522: LD_INT 3
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51561: LD_ADDR_VAR 0 45
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: NEG
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 3
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: LD_INT 3
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 3
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 0
51837: PUSH
51838: LD_INT 3
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: NEG
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51911: LD_ADDR_VAR 0 46
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 2
51996: NEG
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 2
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 3
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 3
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 3
52207: NEG
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52259: LD_ADDR_VAR 0 47
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52410: LD_ADDR_VAR 0 48
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52557: LD_ADDR_VAR 0 49
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52701: LD_ADDR_VAR 0 50
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52845: LD_ADDR_VAR 0 51
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 0
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 2
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52992: LD_ADDR_VAR 0 52
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53143: LD_ADDR_VAR 0 53
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: NEG
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 2
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53373: LD_ADDR_VAR 0 54
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 2
53469: NEG
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 2
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53603: LD_ADDR_VAR 0 55
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 2
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: NEG
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53833: LD_ADDR_VAR 0 56
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 0
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 2
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: NEG
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54063: LD_ADDR_VAR 0 57
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 2
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 1
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54293: LD_ADDR_VAR 0 58
54297: PUSH
54298: LD_INT 0
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 1
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 1
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 2
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 0
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54523: LD_ADDR_VAR 0 59
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54611: LD_ADDR_VAR 0 60
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 1
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54699: LD_ADDR_VAR 0 61
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54787: LD_ADDR_VAR 0 62
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54875: LD_ADDR_VAR 0 63
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54963: LD_ADDR_VAR 0 64
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 0
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: LD_INT 0
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: ST_TO_ADDR
// end ; 1 :
55051: GO 60948
55053: LD_INT 1
55055: DOUBLE
55056: EQUAL
55057: IFTRUE 55061
55059: GO 57684
55061: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55062: LD_ADDR_VAR 0 11
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: LD_INT 3
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 2
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55106: LD_ADDR_VAR 0 12
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55147: LD_ADDR_VAR 0 13
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 3
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55187: LD_ADDR_VAR 0 14
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 3
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 3
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55228: LD_ADDR_VAR 0 15
55232: PUSH
55233: LD_INT 2
55235: NEG
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: LD_INT 0
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55272: LD_ADDR_VAR 0 16
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: LD_INT 3
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: NEG
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55318: LD_ADDR_VAR 0 17
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 3
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55362: LD_ADDR_VAR 0 18
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 1
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55403: LD_ADDR_VAR 0 19
55407: PUSH
55408: LD_INT 3
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 3
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55443: LD_ADDR_VAR 0 20
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 3
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 3
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55484: LD_ADDR_VAR 0 21
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55528: LD_ADDR_VAR 0 22
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: NEG
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55574: LD_ADDR_VAR 0 23
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: LIST
55617: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55618: LD_ADDR_VAR 0 24
55622: PUSH
55623: LD_INT 3
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 3
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 4
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55659: LD_ADDR_VAR 0 25
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: LD_INT 4
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55699: LD_ADDR_VAR 0 26
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 3
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: LD_INT 4
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55740: LD_ADDR_VAR 0 27
55744: PUSH
55745: LD_INT 3
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 3
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 4
55769: NEG
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55784: LD_ADDR_VAR 0 28
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: LD_INT 4
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 4
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55830: LD_ADDR_VAR 0 29
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: LD_INT 3
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 3
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: LD_INT 2
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 4
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 3
55897: NEG
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 5
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 5
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 6
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 6
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 5
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55985: LD_ADDR_VAR 0 30
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: PUSH
56014: LD_INT 1
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 4
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 4
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 5
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 5
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 6
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 6
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56128: LD_ADDR_VAR 0 31
56132: PUSH
56133: LD_INT 3
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 3
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 4
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 4
56175: PUSH
56176: LD_INT 4
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: LD_INT 4
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 5
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 5
56205: PUSH
56206: LD_INT 5
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: LD_INT 5
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 6
56225: PUSH
56226: LD_INT 5
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 6
56235: PUSH
56236: LD_INT 6
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 5
56245: PUSH
56246: LD_INT 6
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56267: LD_ADDR_VAR 0 32
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 4
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: LD_INT 5
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 5
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 6
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 6
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56410: LD_ADDR_VAR 0 33
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 3
56428: NEG
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 3
56439: NEG
56440: PUSH
56441: LD_INT 1
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 4
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 4
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 5
56496: NEG
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 5
56507: NEG
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 5
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 6
56530: NEG
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 6
56541: NEG
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56565: LD_ADDR_VAR 0 34
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: NEG
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: LD_INT 4
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 4
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 4
56632: NEG
56633: PUSH
56634: LD_INT 4
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 4
56644: NEG
56645: PUSH
56646: LD_INT 5
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 5
56656: NEG
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: LD_INT 5
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 5
56680: NEG
56681: PUSH
56682: LD_INT 6
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 6
56692: NEG
56693: PUSH
56694: LD_INT 5
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 6
56704: NEG
56705: PUSH
56706: LD_INT 6
56708: NEG
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56728: LD_ADDR_VAR 0 41
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 2
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56772: LD_ADDR_VAR 0 42
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 2
56789: PUSH
56790: LD_INT 1
56792: NEG
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 3
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: LIST
56812: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56813: LD_ADDR_VAR 0 43
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56853: LD_ADDR_VAR 0 44
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 1
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 1
56880: NEG
56881: PUSH
56882: LD_INT 2
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: LIST
56893: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56894: LD_ADDR_VAR 0 45
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: LIST
56937: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56938: LD_ADDR_VAR 0 46
56942: PUSH
56943: LD_INT 2
56945: NEG
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: LD_INT 3
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56984: LD_ADDR_VAR 0 47
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 3
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 3
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57017: LD_ADDR_VAR 0 48
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57048: LD_ADDR_VAR 0 49
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 3
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57077: LD_ADDR_VAR 0 50
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57106: LD_ADDR_VAR 0 51
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57137: LD_ADDR_VAR 0 52
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 2
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57170: LD_ADDR_VAR 0 53
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57214: LD_ADDR_VAR 0 54
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57255: LD_ADDR_VAR 0 55
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: LD_INT 3
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 3
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57295: LD_ADDR_VAR 0 56
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 3
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57336: LD_ADDR_VAR 0 57
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57380: LD_ADDR_VAR 0 58
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 3
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57426: LD_ADDR_VAR 0 59
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: LIST
57469: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57470: LD_ADDR_VAR 0 60
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 2
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57511: LD_ADDR_VAR 0 61
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57551: LD_ADDR_VAR 0 62
57555: PUSH
57556: LD_INT 1
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57592: LD_ADDR_VAR 0 63
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57636: LD_ADDR_VAR 0 64
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: LD_INT 1
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: LD_INT 2
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: ST_TO_ADDR
// end ; 2 :
57682: GO 60948
57684: LD_INT 2
57686: DOUBLE
57687: EQUAL
57688: IFTRUE 57692
57690: GO 60947
57692: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57693: LD_ADDR_VAR 0 29
57697: PUSH
57698: LD_INT 4
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 4
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 5
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 4
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 3
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 4
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 4
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: LD_INT 4
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: LD_INT 5
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: LD_INT 5
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 4
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: PUSH
57956: LD_INT 5
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 0
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: LD_INT 1
57991: NEG
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 2
57999: NEG
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: LD_INT 2
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 2
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 4
58078: NEG
58079: PUSH
58080: LD_INT 4
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 4
58090: NEG
58091: PUSH
58092: LD_INT 5
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: LD_INT 4
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: LD_INT 3
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 4
58126: NEG
58127: PUSH
58128: LD_INT 3
58130: NEG
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 5
58138: NEG
58139: PUSH
58140: LD_INT 4
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 5
58150: NEG
58151: PUSH
58152: LD_INT 5
58154: NEG
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 3
58162: NEG
58163: PUSH
58164: LD_INT 5
58166: NEG
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 5
58174: NEG
58175: PUSH
58176: LD_INT 3
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58231: LD_ADDR_VAR 0 30
58235: PUSH
58236: LD_INT 4
58238: PUSH
58239: LD_INT 4
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 3
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 5
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 5
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 4
58278: PUSH
58279: LD_INT 5
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: LD_INT 4
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 3
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 5
58308: PUSH
58309: LD_INT 3
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 5
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 3
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 4
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 4
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 4
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 4
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 4
58466: NEG
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 5
58477: NEG
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 5
58500: NEG
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 4
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: NEG
58548: PUSH
58549: LD_INT 3
58551: NEG
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 3
58571: NEG
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: NEG
58584: PUSH
58585: LD_INT 3
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 4
58595: NEG
58596: PUSH
58597: LD_INT 4
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: LD_INT 4
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 4
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 4
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 5
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 4
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 3
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: LD_INT 4
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 5
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 2
58721: NEG
58722: PUSH
58723: LD_INT 5
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58778: LD_ADDR_VAR 0 31
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 4
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 3
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 0
58825: PUSH
58826: LD_INT 5
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 4
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 3
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 5
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 2
58867: NEG
58868: PUSH
58869: LD_INT 3
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: NEG
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: NEG
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: NEG
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 4
58934: NEG
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 4
58945: NEG
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 4
58957: NEG
58958: PUSH
58959: LD_INT 2
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 2
58969: NEG
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: LD_INT 4
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: NEG
58993: PUSH
58994: LD_INT 5
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: LD_INT 4
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: NEG
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 5
59040: NEG
59041: PUSH
59042: LD_INT 4
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 5
59052: NEG
59053: PUSH
59054: LD_INT 5
59056: NEG
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: NEG
59065: PUSH
59066: LD_INT 5
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 5
59076: NEG
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 3
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: LD_INT 4
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 3
59147: NEG
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: LD_INT 4
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 4
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 4
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 1
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 5
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 5
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 3
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 5
59273: PUSH
59274: LD_INT 2
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59328: LD_ADDR_VAR 0 32
59332: PUSH
59333: LD_INT 4
59335: NEG
59336: PUSH
59337: LD_INT 0
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 4
59346: NEG
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: NEG
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 4
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 5
59391: NEG
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 5
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 5
59414: NEG
59415: PUSH
59416: LD_INT 2
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 3
59426: NEG
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 3
59437: NEG
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: NEG
59450: PUSH
59451: LD_INT 4
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 3
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 2
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 3
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 4
59497: NEG
59498: PUSH
59499: LD_INT 3
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 4
59509: NEG
59510: PUSH
59511: LD_INT 4
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 2
59521: NEG
59522: PUSH
59523: LD_INT 4
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 4
59533: NEG
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 5
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: LD_INT 4
59604: NEG
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: LD_INT 5
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 2
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: LD_INT 5
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 3
59657: PUSH
59658: LD_INT 1
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: LD_INT 1
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 2
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 4
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 3
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 5
59760: PUSH
59761: LD_INT 4
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 5
59770: PUSH
59771: LD_INT 5
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: LD_INT 5
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 4
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 5
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: PUSH
59821: LD_INT 5
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59875: LD_ADDR_VAR 0 33
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 4
59894: NEG
59895: PUSH
59896: LD_INT 5
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 4
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 4
59930: NEG
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 5
59942: NEG
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 5
59954: NEG
59955: PUSH
59956: LD_INT 5
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 3
59966: NEG
59967: PUSH
59968: LD_INT 5
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 5
59978: NEG
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: LD_INT 3
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 4
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 3
60015: NEG
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 2
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: NEG
60058: PUSH
60059: LD_INT 4
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 2
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 2
60080: NEG
60081: PUSH
60082: LD_INT 4
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 4
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 4
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 4
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 3
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 5
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 4
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: LD_INT 4
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 4
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 4
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 4
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: LD_INT 5
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 5
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 1
60325: NEG
60326: PUSH
60327: LD_INT 4
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: PUSH
60348: LD_INT 5
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 2
60357: NEG
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60413: LD_ADDR_VAR 0 34
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: LD_INT 4
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: LD_INT 5
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: LD_INT 4
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: PUSH
60454: LD_INT 3
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 3
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: LD_INT 4
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: NEG
60488: PUSH
60489: LD_INT 5
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 2
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: NEG
60511: PUSH
60512: LD_INT 5
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 4
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 4
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 3
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: PUSH
60595: LD_INT 2
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 4
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 4
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 5
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 5
60645: PUSH
60646: LD_INT 5
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: PUSH
60656: LD_INT 5
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: PUSH
60666: LD_INT 4
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 3
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 5
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: LD_INT 5
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 4
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: NEG
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 3
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 5
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 5
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// end ; end ;
60945: GO 60948
60947: POP
// case btype of b_depot , b_warehouse :
60948: LD_VAR 0 1
60952: PUSH
60953: LD_INT 0
60955: DOUBLE
60956: EQUAL
60957: IFTRUE 60967
60959: LD_INT 1
60961: DOUBLE
60962: EQUAL
60963: IFTRUE 60967
60965: GO 61168
60967: POP
// case nation of nation_american :
60968: LD_VAR 0 5
60972: PUSH
60973: LD_INT 1
60975: DOUBLE
60976: EQUAL
60977: IFTRUE 60981
60979: GO 61037
60981: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60982: LD_ADDR_VAR 0 9
60986: PUSH
60987: LD_VAR 0 11
60991: PUSH
60992: LD_VAR 0 12
60996: PUSH
60997: LD_VAR 0 13
61001: PUSH
61002: LD_VAR 0 14
61006: PUSH
61007: LD_VAR 0 15
61011: PUSH
61012: LD_VAR 0 16
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: LD_VAR 0 4
61029: PUSH
61030: LD_INT 1
61032: PLUS
61033: ARRAY
61034: ST_TO_ADDR
61035: GO 61166
61037: LD_INT 2
61039: DOUBLE
61040: EQUAL
61041: IFTRUE 61045
61043: GO 61101
61045: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61046: LD_ADDR_VAR 0 9
61050: PUSH
61051: LD_VAR 0 17
61055: PUSH
61056: LD_VAR 0 18
61060: PUSH
61061: LD_VAR 0 19
61065: PUSH
61066: LD_VAR 0 20
61070: PUSH
61071: LD_VAR 0 21
61075: PUSH
61076: LD_VAR 0 22
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: PUSH
61089: LD_VAR 0 4
61093: PUSH
61094: LD_INT 1
61096: PLUS
61097: ARRAY
61098: ST_TO_ADDR
61099: GO 61166
61101: LD_INT 3
61103: DOUBLE
61104: EQUAL
61105: IFTRUE 61109
61107: GO 61165
61109: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61110: LD_ADDR_VAR 0 9
61114: PUSH
61115: LD_VAR 0 23
61119: PUSH
61120: LD_VAR 0 24
61124: PUSH
61125: LD_VAR 0 25
61129: PUSH
61130: LD_VAR 0 26
61134: PUSH
61135: LD_VAR 0 27
61139: PUSH
61140: LD_VAR 0 28
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: LD_VAR 0 4
61157: PUSH
61158: LD_INT 1
61160: PLUS
61161: ARRAY
61162: ST_TO_ADDR
61163: GO 61166
61165: POP
61166: GO 61721
61168: LD_INT 2
61170: DOUBLE
61171: EQUAL
61172: IFTRUE 61182
61174: LD_INT 3
61176: DOUBLE
61177: EQUAL
61178: IFTRUE 61182
61180: GO 61238
61182: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61183: LD_ADDR_VAR 0 9
61187: PUSH
61188: LD_VAR 0 29
61192: PUSH
61193: LD_VAR 0 30
61197: PUSH
61198: LD_VAR 0 31
61202: PUSH
61203: LD_VAR 0 32
61207: PUSH
61208: LD_VAR 0 33
61212: PUSH
61213: LD_VAR 0 34
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: PUSH
61226: LD_VAR 0 4
61230: PUSH
61231: LD_INT 1
61233: PLUS
61234: ARRAY
61235: ST_TO_ADDR
61236: GO 61721
61238: LD_INT 16
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61300
61244: LD_INT 17
61246: DOUBLE
61247: EQUAL
61248: IFTRUE 61300
61250: LD_INT 18
61252: DOUBLE
61253: EQUAL
61254: IFTRUE 61300
61256: LD_INT 19
61258: DOUBLE
61259: EQUAL
61260: IFTRUE 61300
61262: LD_INT 22
61264: DOUBLE
61265: EQUAL
61266: IFTRUE 61300
61268: LD_INT 20
61270: DOUBLE
61271: EQUAL
61272: IFTRUE 61300
61274: LD_INT 21
61276: DOUBLE
61277: EQUAL
61278: IFTRUE 61300
61280: LD_INT 23
61282: DOUBLE
61283: EQUAL
61284: IFTRUE 61300
61286: LD_INT 24
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61300
61292: LD_INT 25
61294: DOUBLE
61295: EQUAL
61296: IFTRUE 61300
61298: GO 61356
61300: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61301: LD_ADDR_VAR 0 9
61305: PUSH
61306: LD_VAR 0 35
61310: PUSH
61311: LD_VAR 0 36
61315: PUSH
61316: LD_VAR 0 37
61320: PUSH
61321: LD_VAR 0 38
61325: PUSH
61326: LD_VAR 0 39
61330: PUSH
61331: LD_VAR 0 40
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: PUSH
61344: LD_VAR 0 4
61348: PUSH
61349: LD_INT 1
61351: PLUS
61352: ARRAY
61353: ST_TO_ADDR
61354: GO 61721
61356: LD_INT 6
61358: DOUBLE
61359: EQUAL
61360: IFTRUE 61412
61362: LD_INT 7
61364: DOUBLE
61365: EQUAL
61366: IFTRUE 61412
61368: LD_INT 8
61370: DOUBLE
61371: EQUAL
61372: IFTRUE 61412
61374: LD_INT 13
61376: DOUBLE
61377: EQUAL
61378: IFTRUE 61412
61380: LD_INT 12
61382: DOUBLE
61383: EQUAL
61384: IFTRUE 61412
61386: LD_INT 15
61388: DOUBLE
61389: EQUAL
61390: IFTRUE 61412
61392: LD_INT 11
61394: DOUBLE
61395: EQUAL
61396: IFTRUE 61412
61398: LD_INT 14
61400: DOUBLE
61401: EQUAL
61402: IFTRUE 61412
61404: LD_INT 10
61406: DOUBLE
61407: EQUAL
61408: IFTRUE 61412
61410: GO 61468
61412: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61413: LD_ADDR_VAR 0 9
61417: PUSH
61418: LD_VAR 0 41
61422: PUSH
61423: LD_VAR 0 42
61427: PUSH
61428: LD_VAR 0 43
61432: PUSH
61433: LD_VAR 0 44
61437: PUSH
61438: LD_VAR 0 45
61442: PUSH
61443: LD_VAR 0 46
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: PUSH
61456: LD_VAR 0 4
61460: PUSH
61461: LD_INT 1
61463: PLUS
61464: ARRAY
61465: ST_TO_ADDR
61466: GO 61721
61468: LD_INT 36
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61476
61474: GO 61532
61476: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61477: LD_ADDR_VAR 0 9
61481: PUSH
61482: LD_VAR 0 47
61486: PUSH
61487: LD_VAR 0 48
61491: PUSH
61492: LD_VAR 0 49
61496: PUSH
61497: LD_VAR 0 50
61501: PUSH
61502: LD_VAR 0 51
61506: PUSH
61507: LD_VAR 0 52
61511: PUSH
61512: EMPTY
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: PUSH
61520: LD_VAR 0 4
61524: PUSH
61525: LD_INT 1
61527: PLUS
61528: ARRAY
61529: ST_TO_ADDR
61530: GO 61721
61532: LD_INT 4
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61558
61538: LD_INT 5
61540: DOUBLE
61541: EQUAL
61542: IFTRUE 61558
61544: LD_INT 34
61546: DOUBLE
61547: EQUAL
61548: IFTRUE 61558
61550: LD_INT 37
61552: DOUBLE
61553: EQUAL
61554: IFTRUE 61558
61556: GO 61614
61558: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61559: LD_ADDR_VAR 0 9
61563: PUSH
61564: LD_VAR 0 53
61568: PUSH
61569: LD_VAR 0 54
61573: PUSH
61574: LD_VAR 0 55
61578: PUSH
61579: LD_VAR 0 56
61583: PUSH
61584: LD_VAR 0 57
61588: PUSH
61589: LD_VAR 0 58
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: PUSH
61602: LD_VAR 0 4
61606: PUSH
61607: LD_INT 1
61609: PLUS
61610: ARRAY
61611: ST_TO_ADDR
61612: GO 61721
61614: LD_INT 31
61616: DOUBLE
61617: EQUAL
61618: IFTRUE 61664
61620: LD_INT 32
61622: DOUBLE
61623: EQUAL
61624: IFTRUE 61664
61626: LD_INT 33
61628: DOUBLE
61629: EQUAL
61630: IFTRUE 61664
61632: LD_INT 27
61634: DOUBLE
61635: EQUAL
61636: IFTRUE 61664
61638: LD_INT 26
61640: DOUBLE
61641: EQUAL
61642: IFTRUE 61664
61644: LD_INT 28
61646: DOUBLE
61647: EQUAL
61648: IFTRUE 61664
61650: LD_INT 29
61652: DOUBLE
61653: EQUAL
61654: IFTRUE 61664
61656: LD_INT 30
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61664
61662: GO 61720
61664: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61665: LD_ADDR_VAR 0 9
61669: PUSH
61670: LD_VAR 0 59
61674: PUSH
61675: LD_VAR 0 60
61679: PUSH
61680: LD_VAR 0 61
61684: PUSH
61685: LD_VAR 0 62
61689: PUSH
61690: LD_VAR 0 63
61694: PUSH
61695: LD_VAR 0 64
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: PUSH
61708: LD_VAR 0 4
61712: PUSH
61713: LD_INT 1
61715: PLUS
61716: ARRAY
61717: ST_TO_ADDR
61718: GO 61721
61720: POP
// temp_list2 = [ ] ;
61721: LD_ADDR_VAR 0 10
61725: PUSH
61726: EMPTY
61727: ST_TO_ADDR
// for i in temp_list do
61728: LD_ADDR_VAR 0 8
61732: PUSH
61733: LD_VAR 0 9
61737: PUSH
61738: FOR_IN
61739: IFFALSE 61791
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61741: LD_ADDR_VAR 0 10
61745: PUSH
61746: LD_VAR 0 10
61750: PUSH
61751: LD_VAR 0 8
61755: PUSH
61756: LD_INT 1
61758: ARRAY
61759: PUSH
61760: LD_VAR 0 2
61764: PLUS
61765: PUSH
61766: LD_VAR 0 8
61770: PUSH
61771: LD_INT 2
61773: ARRAY
61774: PUSH
61775: LD_VAR 0 3
61779: PLUS
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: ADD
61788: ST_TO_ADDR
61789: GO 61738
61791: POP
61792: POP
// result = temp_list2 ;
61793: LD_ADDR_VAR 0 7
61797: PUSH
61798: LD_VAR 0 10
61802: ST_TO_ADDR
// end ;
61803: LD_VAR 0 7
61807: RET
// export function EnemyInRange ( unit , dist ) ; begin
61808: LD_INT 0
61810: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61811: LD_ADDR_VAR 0 3
61815: PUSH
61816: LD_VAR 0 1
61820: PPUSH
61821: CALL_OW 255
61825: PPUSH
61826: LD_VAR 0 1
61830: PPUSH
61831: CALL_OW 250
61835: PPUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 251
61845: PPUSH
61846: LD_VAR 0 2
61850: PPUSH
61851: CALL 35065 0 4
61855: PUSH
61856: LD_INT 4
61858: ARRAY
61859: ST_TO_ADDR
// end ;
61860: LD_VAR 0 3
61864: RET
// export function PlayerSeeMe ( unit ) ; begin
61865: LD_INT 0
61867: PPUSH
// result := See ( your_side , unit ) ;
61868: LD_ADDR_VAR 0 2
61872: PUSH
61873: LD_OWVAR 2
61877: PPUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 292
61887: ST_TO_ADDR
// end ;
61888: LD_VAR 0 2
61892: RET
// export function ReverseDir ( unit ) ; begin
61893: LD_INT 0
61895: PPUSH
// if not unit then
61896: LD_VAR 0 1
61900: NOT
61901: IFFALSE 61905
// exit ;
61903: GO 61928
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61905: LD_ADDR_VAR 0 2
61909: PUSH
61910: LD_VAR 0 1
61914: PPUSH
61915: CALL_OW 254
61919: PUSH
61920: LD_INT 3
61922: PLUS
61923: PUSH
61924: LD_INT 6
61926: MOD
61927: ST_TO_ADDR
// end ;
61928: LD_VAR 0 2
61932: RET
// export function ReverseArray ( array ) ; var i ; begin
61933: LD_INT 0
61935: PPUSH
61936: PPUSH
// if not array then
61937: LD_VAR 0 1
61941: NOT
61942: IFFALSE 61946
// exit ;
61944: GO 62001
// result := [ ] ;
61946: LD_ADDR_VAR 0 2
61950: PUSH
61951: EMPTY
61952: ST_TO_ADDR
// for i := array downto 1 do
61953: LD_ADDR_VAR 0 3
61957: PUSH
61958: DOUBLE
61959: LD_VAR 0 1
61963: INC
61964: ST_TO_ADDR
61965: LD_INT 1
61967: PUSH
61968: FOR_DOWNTO
61969: IFFALSE 61999
// result := Join ( result , array [ i ] ) ;
61971: LD_ADDR_VAR 0 2
61975: PUSH
61976: LD_VAR 0 2
61980: PPUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_VAR 0 3
61990: ARRAY
61991: PPUSH
61992: CALL 66853 0 2
61996: ST_TO_ADDR
61997: GO 61968
61999: POP
62000: POP
// end ;
62001: LD_VAR 0 2
62005: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62006: LD_INT 0
62008: PPUSH
62009: PPUSH
62010: PPUSH
62011: PPUSH
62012: PPUSH
62013: PPUSH
// if not unit or not hexes then
62014: LD_VAR 0 1
62018: NOT
62019: IFTRUE 62028
62021: PUSH
62022: LD_VAR 0 2
62026: NOT
62027: OR
62028: IFFALSE 62032
// exit ;
62030: GO 62155
// dist := 9999 ;
62032: LD_ADDR_VAR 0 5
62036: PUSH
62037: LD_INT 9999
62039: ST_TO_ADDR
// for i = 1 to hexes do
62040: LD_ADDR_VAR 0 4
62044: PUSH
62045: DOUBLE
62046: LD_INT 1
62048: DEC
62049: ST_TO_ADDR
62050: LD_VAR 0 2
62054: PUSH
62055: FOR_TO
62056: IFFALSE 62143
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62058: LD_ADDR_VAR 0 6
62062: PUSH
62063: LD_VAR 0 1
62067: PPUSH
62068: LD_VAR 0 2
62072: PUSH
62073: LD_VAR 0 4
62077: ARRAY
62078: PUSH
62079: LD_INT 1
62081: ARRAY
62082: PPUSH
62083: LD_VAR 0 2
62087: PUSH
62088: LD_VAR 0 4
62092: ARRAY
62093: PUSH
62094: LD_INT 2
62096: ARRAY
62097: PPUSH
62098: CALL_OW 297
62102: ST_TO_ADDR
// if tdist < dist then
62103: LD_VAR 0 6
62107: PUSH
62108: LD_VAR 0 5
62112: LESS
62113: IFFALSE 62141
// begin hex := hexes [ i ] ;
62115: LD_ADDR_VAR 0 8
62119: PUSH
62120: LD_VAR 0 2
62124: PUSH
62125: LD_VAR 0 4
62129: ARRAY
62130: ST_TO_ADDR
// dist := tdist ;
62131: LD_ADDR_VAR 0 5
62135: PUSH
62136: LD_VAR 0 6
62140: ST_TO_ADDR
// end ; end ;
62141: GO 62055
62143: POP
62144: POP
// result := hex ;
62145: LD_ADDR_VAR 0 3
62149: PUSH
62150: LD_VAR 0 8
62154: ST_TO_ADDR
// end ;
62155: LD_VAR 0 3
62159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62160: LD_INT 0
62162: PPUSH
62163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62164: LD_VAR 0 1
62168: NOT
62169: IFTRUE 62208
62171: PUSH
62172: LD_VAR 0 1
62176: PUSH
62177: LD_INT 21
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 23
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PPUSH
62201: CALL_OW 69
62205: IN
62206: NOT
62207: OR
62208: IFFALSE 62212
// exit ;
62210: GO 62259
// for i = 1 to 3 do
62212: LD_ADDR_VAR 0 3
62216: PUSH
62217: DOUBLE
62218: LD_INT 1
62220: DEC
62221: ST_TO_ADDR
62222: LD_INT 3
62224: PUSH
62225: FOR_TO
62226: IFFALSE 62257
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62228: LD_VAR 0 1
62232: PPUSH
62233: CALL_OW 250
62237: PPUSH
62238: LD_VAR 0 1
62242: PPUSH
62243: CALL_OW 251
62247: PPUSH
62248: LD_INT 1
62250: PPUSH
62251: CALL_OW 453
62255: GO 62225
62257: POP
62258: POP
// end ;
62259: LD_VAR 0 2
62263: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62264: LD_INT 0
62266: PPUSH
62267: PPUSH
62268: PPUSH
62269: PPUSH
62270: PPUSH
62271: PPUSH
// if not unit or not enemy_unit then
62272: LD_VAR 0 1
62276: NOT
62277: IFTRUE 62286
62279: PUSH
62280: LD_VAR 0 2
62284: NOT
62285: OR
62286: IFFALSE 62290
// exit ;
62288: GO 62771
// if GetLives ( i ) < 250 then
62290: LD_VAR 0 4
62294: PPUSH
62295: CALL_OW 256
62299: PUSH
62300: LD_INT 250
62302: LESS
62303: IFFALSE 62316
// begin ComAutodestruct ( i ) ;
62305: LD_VAR 0 4
62309: PPUSH
62310: CALL 62160 0 1
// exit ;
62314: GO 62771
// end ; x := GetX ( enemy_unit ) ;
62316: LD_ADDR_VAR 0 7
62320: PUSH
62321: LD_VAR 0 2
62325: PPUSH
62326: CALL_OW 250
62330: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62331: LD_ADDR_VAR 0 8
62335: PUSH
62336: LD_VAR 0 2
62340: PPUSH
62341: CALL_OW 251
62345: ST_TO_ADDR
// if not x or not y then
62346: LD_VAR 0 7
62350: NOT
62351: IFTRUE 62360
62353: PUSH
62354: LD_VAR 0 8
62358: NOT
62359: OR
62360: IFFALSE 62364
// exit ;
62362: GO 62771
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62364: LD_ADDR_VAR 0 6
62368: PUSH
62369: LD_VAR 0 7
62373: PPUSH
62374: LD_INT 0
62376: PPUSH
62377: LD_INT 4
62379: PPUSH
62380: CALL_OW 272
62384: PUSH
62385: LD_VAR 0 8
62389: PPUSH
62390: LD_INT 0
62392: PPUSH
62393: LD_INT 4
62395: PPUSH
62396: CALL_OW 273
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_VAR 0 7
62409: PPUSH
62410: LD_INT 1
62412: PPUSH
62413: LD_INT 4
62415: PPUSH
62416: CALL_OW 272
62420: PUSH
62421: LD_VAR 0 8
62425: PPUSH
62426: LD_INT 1
62428: PPUSH
62429: LD_INT 4
62431: PPUSH
62432: CALL_OW 273
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_VAR 0 7
62445: PPUSH
62446: LD_INT 2
62448: PPUSH
62449: LD_INT 4
62451: PPUSH
62452: CALL_OW 272
62456: PUSH
62457: LD_VAR 0 8
62461: PPUSH
62462: LD_INT 2
62464: PPUSH
62465: LD_INT 4
62467: PPUSH
62468: CALL_OW 273
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_VAR 0 7
62481: PPUSH
62482: LD_INT 3
62484: PPUSH
62485: LD_INT 4
62487: PPUSH
62488: CALL_OW 272
62492: PUSH
62493: LD_VAR 0 8
62497: PPUSH
62498: LD_INT 3
62500: PPUSH
62501: LD_INT 4
62503: PPUSH
62504: CALL_OW 273
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_VAR 0 7
62517: PPUSH
62518: LD_INT 4
62520: PPUSH
62521: LD_INT 4
62523: PPUSH
62524: CALL_OW 272
62528: PUSH
62529: LD_VAR 0 8
62533: PPUSH
62534: LD_INT 4
62536: PPUSH
62537: LD_INT 4
62539: PPUSH
62540: CALL_OW 273
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_VAR 0 7
62553: PPUSH
62554: LD_INT 5
62556: PPUSH
62557: LD_INT 4
62559: PPUSH
62560: CALL_OW 272
62564: PUSH
62565: LD_VAR 0 8
62569: PPUSH
62570: LD_INT 5
62572: PPUSH
62573: LD_INT 4
62575: PPUSH
62576: CALL_OW 273
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: ST_TO_ADDR
// for i = tmp downto 1 do
62593: LD_ADDR_VAR 0 4
62597: PUSH
62598: DOUBLE
62599: LD_VAR 0 6
62603: INC
62604: ST_TO_ADDR
62605: LD_INT 1
62607: PUSH
62608: FOR_DOWNTO
62609: IFFALSE 62712
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62611: LD_VAR 0 6
62615: PUSH
62616: LD_VAR 0 4
62620: ARRAY
62621: PUSH
62622: LD_INT 1
62624: ARRAY
62625: PPUSH
62626: LD_VAR 0 6
62630: PUSH
62631: LD_VAR 0 4
62635: ARRAY
62636: PUSH
62637: LD_INT 2
62639: ARRAY
62640: PPUSH
62641: CALL_OW 488
62645: NOT
62646: IFTRUE 62688
62648: PUSH
62649: LD_VAR 0 6
62653: PUSH
62654: LD_VAR 0 4
62658: ARRAY
62659: PUSH
62660: LD_INT 1
62662: ARRAY
62663: PPUSH
62664: LD_VAR 0 6
62668: PUSH
62669: LD_VAR 0 4
62673: ARRAY
62674: PUSH
62675: LD_INT 2
62677: ARRAY
62678: PPUSH
62679: CALL_OW 428
62683: PUSH
62684: LD_INT 0
62686: NONEQUAL
62687: OR
62688: IFFALSE 62710
// tmp := Delete ( tmp , i ) ;
62690: LD_ADDR_VAR 0 6
62694: PUSH
62695: LD_VAR 0 6
62699: PPUSH
62700: LD_VAR 0 4
62704: PPUSH
62705: CALL_OW 3
62709: ST_TO_ADDR
62710: GO 62608
62712: POP
62713: POP
// j := GetClosestHex ( unit , tmp ) ;
62714: LD_ADDR_VAR 0 5
62718: PUSH
62719: LD_VAR 0 1
62723: PPUSH
62724: LD_VAR 0 6
62728: PPUSH
62729: CALL 62006 0 2
62733: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62734: LD_VAR 0 1
62738: PPUSH
62739: LD_VAR 0 5
62743: PUSH
62744: LD_INT 1
62746: ARRAY
62747: PPUSH
62748: LD_VAR 0 5
62752: PUSH
62753: LD_INT 2
62755: ARRAY
62756: PPUSH
62757: CALL_OW 111
// result := j ;
62761: LD_ADDR_VAR 0 3
62765: PUSH
62766: LD_VAR 0 5
62770: ST_TO_ADDR
// end ;
62771: LD_VAR 0 3
62775: RET
// export function PrepareApemanSoldier ( ) ; begin
62776: LD_INT 0
62778: PPUSH
// uc_nation := 0 ;
62779: LD_ADDR_OWVAR 21
62783: PUSH
62784: LD_INT 0
62786: ST_TO_ADDR
// hc_sex := sex_male ;
62787: LD_ADDR_OWVAR 27
62791: PUSH
62792: LD_INT 1
62794: ST_TO_ADDR
// hc_name :=  ;
62795: LD_ADDR_OWVAR 26
62799: PUSH
62800: LD_STRING 
62802: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62803: LD_ADDR_OWVAR 28
62807: PUSH
62808: LD_INT 15
62810: ST_TO_ADDR
// hc_gallery :=  ;
62811: LD_ADDR_OWVAR 33
62815: PUSH
62816: LD_STRING 
62818: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62819: LD_ADDR_OWVAR 31
62823: PUSH
62824: LD_INT 0
62826: PPUSH
62827: LD_INT 3
62829: PPUSH
62830: CALL_OW 12
62834: PUSH
62835: LD_INT 0
62837: PPUSH
62838: LD_INT 3
62840: PPUSH
62841: CALL_OW 12
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62858: LD_ADDR_OWVAR 29
62862: PUSH
62863: LD_INT 10
62865: PUSH
62866: LD_INT 12
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// end ;
62873: LD_VAR 0 1
62877: RET
// export function PrepareApemanEngineer ( ) ; begin
62878: LD_INT 0
62880: PPUSH
// uc_nation := 0 ;
62881: LD_ADDR_OWVAR 21
62885: PUSH
62886: LD_INT 0
62888: ST_TO_ADDR
// hc_sex := sex_male ;
62889: LD_ADDR_OWVAR 27
62893: PUSH
62894: LD_INT 1
62896: ST_TO_ADDR
// hc_name :=  ;
62897: LD_ADDR_OWVAR 26
62901: PUSH
62902: LD_STRING 
62904: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62905: LD_ADDR_OWVAR 28
62909: PUSH
62910: LD_INT 16
62912: ST_TO_ADDR
// hc_gallery :=  ;
62913: LD_ADDR_OWVAR 33
62917: PUSH
62918: LD_STRING 
62920: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62921: LD_ADDR_OWVAR 31
62925: PUSH
62926: LD_INT 0
62928: PPUSH
62929: LD_INT 3
62931: PPUSH
62932: CALL_OW 12
62936: PUSH
62937: LD_INT 0
62939: PPUSH
62940: LD_INT 3
62942: PPUSH
62943: CALL_OW 12
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
62960: LD_ADDR_OWVAR 29
62964: PUSH
62965: LD_INT 10
62967: PUSH
62968: LD_INT 12
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: ST_TO_ADDR
// end ;
62975: LD_VAR 0 1
62979: RET
// export function PrepareApeman ( agressivity ) ; begin
62980: LD_INT 0
62982: PPUSH
// uc_side := 0 ;
62983: LD_ADDR_OWVAR 20
62987: PUSH
62988: LD_INT 0
62990: ST_TO_ADDR
// uc_nation := 0 ;
62991: LD_ADDR_OWVAR 21
62995: PUSH
62996: LD_INT 0
62998: ST_TO_ADDR
// hc_sex := sex_male ;
62999: LD_ADDR_OWVAR 27
63003: PUSH
63004: LD_INT 1
63006: ST_TO_ADDR
// hc_class := class_apeman ;
63007: LD_ADDR_OWVAR 28
63011: PUSH
63012: LD_INT 12
63014: ST_TO_ADDR
// hc_gallery :=  ;
63015: LD_ADDR_OWVAR 33
63019: PUSH
63020: LD_STRING 
63022: ST_TO_ADDR
// hc_name :=  ;
63023: LD_ADDR_OWVAR 26
63027: PUSH
63028: LD_STRING 
63030: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
63031: LD_ADDR_OWVAR 29
63035: PUSH
63036: LD_INT 10
63038: PUSH
63039: LD_INT 12
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: ST_TO_ADDR
// if agressivity = 0 then
63046: LD_VAR 0 1
63050: PUSH
63051: LD_INT 0
63053: EQUAL
63054: IFFALSE 63066
// hc_agressivity := 0 else
63056: LD_ADDR_OWVAR 35
63060: PUSH
63061: LD_INT 0
63063: ST_TO_ADDR
63064: GO 63087
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63066: LD_ADDR_OWVAR 35
63070: PUSH
63071: LD_VAR 0 1
63075: NEG
63076: PPUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: CALL_OW 12
63086: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63087: LD_ADDR_OWVAR 31
63091: PUSH
63092: LD_INT 0
63094: PPUSH
63095: LD_INT 3
63097: PPUSH
63098: CALL_OW 12
63102: PUSH
63103: LD_INT 0
63105: PPUSH
63106: LD_INT 3
63108: PPUSH
63109: CALL_OW 12
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 0
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: ST_TO_ADDR
// end ;
63126: LD_VAR 0 2
63130: RET
// export function PrepareTiger ( agressivity ) ; begin
63131: LD_INT 0
63133: PPUSH
// uc_side := 0 ;
63134: LD_ADDR_OWVAR 20
63138: PUSH
63139: LD_INT 0
63141: ST_TO_ADDR
// uc_nation := 0 ;
63142: LD_ADDR_OWVAR 21
63146: PUSH
63147: LD_INT 0
63149: ST_TO_ADDR
// InitHc ;
63150: CALL_OW 19
// hc_class := class_tiger ;
63154: LD_ADDR_OWVAR 28
63158: PUSH
63159: LD_INT 14
63161: ST_TO_ADDR
// hc_gallery :=  ;
63162: LD_ADDR_OWVAR 33
63166: PUSH
63167: LD_STRING 
63169: ST_TO_ADDR
// hc_name :=  ;
63170: LD_ADDR_OWVAR 26
63174: PUSH
63175: LD_STRING 
63177: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63178: LD_ADDR_OWVAR 35
63182: PUSH
63183: LD_VAR 0 1
63187: NEG
63188: PPUSH
63189: LD_VAR 0 1
63193: PPUSH
63194: CALL_OW 12
63198: ST_TO_ADDR
// end ;
63199: LD_VAR 0 2
63203: RET
// export function PrepareEnchidna ( ) ; begin
63204: LD_INT 0
63206: PPUSH
// uc_side := 0 ;
63207: LD_ADDR_OWVAR 20
63211: PUSH
63212: LD_INT 0
63214: ST_TO_ADDR
// uc_nation := 0 ;
63215: LD_ADDR_OWVAR 21
63219: PUSH
63220: LD_INT 0
63222: ST_TO_ADDR
// InitHc ;
63223: CALL_OW 19
// hc_class := class_baggie ;
63227: LD_ADDR_OWVAR 28
63231: PUSH
63232: LD_INT 13
63234: ST_TO_ADDR
// hc_gallery :=  ;
63235: LD_ADDR_OWVAR 33
63239: PUSH
63240: LD_STRING 
63242: ST_TO_ADDR
// hc_name :=  ;
63243: LD_ADDR_OWVAR 26
63247: PUSH
63248: LD_STRING 
63250: ST_TO_ADDR
// end ;
63251: LD_VAR 0 1
63255: RET
// export function PrepareFrog ( ) ; begin
63256: LD_INT 0
63258: PPUSH
// uc_side := 0 ;
63259: LD_ADDR_OWVAR 20
63263: PUSH
63264: LD_INT 0
63266: ST_TO_ADDR
// uc_nation := 0 ;
63267: LD_ADDR_OWVAR 21
63271: PUSH
63272: LD_INT 0
63274: ST_TO_ADDR
// InitHc ;
63275: CALL_OW 19
// hc_class := class_frog ;
63279: LD_ADDR_OWVAR 28
63283: PUSH
63284: LD_INT 19
63286: ST_TO_ADDR
// hc_gallery :=  ;
63287: LD_ADDR_OWVAR 33
63291: PUSH
63292: LD_STRING 
63294: ST_TO_ADDR
// hc_name :=  ;
63295: LD_ADDR_OWVAR 26
63299: PUSH
63300: LD_STRING 
63302: ST_TO_ADDR
// end ;
63303: LD_VAR 0 1
63307: RET
// export function PrepareFish ( ) ; begin
63308: LD_INT 0
63310: PPUSH
// uc_side := 0 ;
63311: LD_ADDR_OWVAR 20
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// uc_nation := 0 ;
63319: LD_ADDR_OWVAR 21
63323: PUSH
63324: LD_INT 0
63326: ST_TO_ADDR
// InitHc ;
63327: CALL_OW 19
// hc_class := class_fish ;
63331: LD_ADDR_OWVAR 28
63335: PUSH
63336: LD_INT 20
63338: ST_TO_ADDR
// hc_gallery :=  ;
63339: LD_ADDR_OWVAR 33
63343: PUSH
63344: LD_STRING 
63346: ST_TO_ADDR
// hc_name :=  ;
63347: LD_ADDR_OWVAR 26
63351: PUSH
63352: LD_STRING 
63354: ST_TO_ADDR
// end ;
63355: LD_VAR 0 1
63359: RET
// export function PrepareBird ( ) ; begin
63360: LD_INT 0
63362: PPUSH
// uc_side := 0 ;
63363: LD_ADDR_OWVAR 20
63367: PUSH
63368: LD_INT 0
63370: ST_TO_ADDR
// uc_nation := 0 ;
63371: LD_ADDR_OWVAR 21
63375: PUSH
63376: LD_INT 0
63378: ST_TO_ADDR
// InitHc ;
63379: CALL_OW 19
// hc_class := class_phororhacos ;
63383: LD_ADDR_OWVAR 28
63387: PUSH
63388: LD_INT 18
63390: ST_TO_ADDR
// hc_gallery :=  ;
63391: LD_ADDR_OWVAR 33
63395: PUSH
63396: LD_STRING 
63398: ST_TO_ADDR
// hc_name :=  ;
63399: LD_ADDR_OWVAR 26
63403: PUSH
63404: LD_STRING 
63406: ST_TO_ADDR
// end ;
63407: LD_VAR 0 1
63411: RET
// export function PrepareHorse ( ) ; begin
63412: LD_INT 0
63414: PPUSH
// uc_side := 0 ;
63415: LD_ADDR_OWVAR 20
63419: PUSH
63420: LD_INT 0
63422: ST_TO_ADDR
// uc_nation := 0 ;
63423: LD_ADDR_OWVAR 21
63427: PUSH
63428: LD_INT 0
63430: ST_TO_ADDR
// InitHc ;
63431: CALL_OW 19
// hc_class := class_horse ;
63435: LD_ADDR_OWVAR 28
63439: PUSH
63440: LD_INT 21
63442: ST_TO_ADDR
// hc_gallery :=  ;
63443: LD_ADDR_OWVAR 33
63447: PUSH
63448: LD_STRING 
63450: ST_TO_ADDR
// hc_name :=  ;
63451: LD_ADDR_OWVAR 26
63455: PUSH
63456: LD_STRING 
63458: ST_TO_ADDR
// end ;
63459: LD_VAR 0 1
63463: RET
// export function PrepareMastodont ( ) ; begin
63464: LD_INT 0
63466: PPUSH
// uc_side := 0 ;
63467: LD_ADDR_OWVAR 20
63471: PUSH
63472: LD_INT 0
63474: ST_TO_ADDR
// uc_nation := 0 ;
63475: LD_ADDR_OWVAR 21
63479: PUSH
63480: LD_INT 0
63482: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63483: LD_ADDR_OWVAR 37
63487: PUSH
63488: LD_INT 31
63490: ST_TO_ADDR
// vc_control := control_rider ;
63491: LD_ADDR_OWVAR 38
63495: PUSH
63496: LD_INT 4
63498: ST_TO_ADDR
// end ;
63499: LD_VAR 0 1
63503: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63504: LD_INT 0
63506: PPUSH
63507: PPUSH
63508: PPUSH
// uc_side = 0 ;
63509: LD_ADDR_OWVAR 20
63513: PUSH
63514: LD_INT 0
63516: ST_TO_ADDR
// uc_nation = 0 ;
63517: LD_ADDR_OWVAR 21
63521: PUSH
63522: LD_INT 0
63524: ST_TO_ADDR
// InitHc_All ( ) ;
63525: CALL_OW 584
// InitVc ;
63529: CALL_OW 20
// if mastodonts then
63533: LD_VAR 0 6
63537: IFFALSE 63604
// for i = 1 to mastodonts do
63539: LD_ADDR_VAR 0 11
63543: PUSH
63544: DOUBLE
63545: LD_INT 1
63547: DEC
63548: ST_TO_ADDR
63549: LD_VAR 0 6
63553: PUSH
63554: FOR_TO
63555: IFFALSE 63602
// begin vc_chassis := 31 ;
63557: LD_ADDR_OWVAR 37
63561: PUSH
63562: LD_INT 31
63564: ST_TO_ADDR
// vc_control := control_rider ;
63565: LD_ADDR_OWVAR 38
63569: PUSH
63570: LD_INT 4
63572: ST_TO_ADDR
// animal := CreateVehicle ;
63573: LD_ADDR_VAR 0 12
63577: PUSH
63578: CALL_OW 45
63582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63583: LD_VAR 0 12
63587: PPUSH
63588: LD_VAR 0 8
63592: PPUSH
63593: LD_INT 0
63595: PPUSH
63596: CALL 65746 0 3
// end ;
63600: GO 63554
63602: POP
63603: POP
// if horses then
63604: LD_VAR 0 5
63608: IFFALSE 63675
// for i = 1 to horses do
63610: LD_ADDR_VAR 0 11
63614: PUSH
63615: DOUBLE
63616: LD_INT 1
63618: DEC
63619: ST_TO_ADDR
63620: LD_VAR 0 5
63624: PUSH
63625: FOR_TO
63626: IFFALSE 63673
// begin hc_class := 21 ;
63628: LD_ADDR_OWVAR 28
63632: PUSH
63633: LD_INT 21
63635: ST_TO_ADDR
// hc_gallery :=  ;
63636: LD_ADDR_OWVAR 33
63640: PUSH
63641: LD_STRING 
63643: ST_TO_ADDR
// animal := CreateHuman ;
63644: LD_ADDR_VAR 0 12
63648: PUSH
63649: CALL_OW 44
63653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63654: LD_VAR 0 12
63658: PPUSH
63659: LD_VAR 0 8
63663: PPUSH
63664: LD_INT 0
63666: PPUSH
63667: CALL 65746 0 3
// end ;
63671: GO 63625
63673: POP
63674: POP
// if birds then
63675: LD_VAR 0 1
63679: IFFALSE 63746
// for i = 1 to birds do
63681: LD_ADDR_VAR 0 11
63685: PUSH
63686: DOUBLE
63687: LD_INT 1
63689: DEC
63690: ST_TO_ADDR
63691: LD_VAR 0 1
63695: PUSH
63696: FOR_TO
63697: IFFALSE 63744
// begin hc_class := 18 ;
63699: LD_ADDR_OWVAR 28
63703: PUSH
63704: LD_INT 18
63706: ST_TO_ADDR
// hc_gallery =  ;
63707: LD_ADDR_OWVAR 33
63711: PUSH
63712: LD_STRING 
63714: ST_TO_ADDR
// animal := CreateHuman ;
63715: LD_ADDR_VAR 0 12
63719: PUSH
63720: CALL_OW 44
63724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63725: LD_VAR 0 12
63729: PPUSH
63730: LD_VAR 0 8
63734: PPUSH
63735: LD_INT 0
63737: PPUSH
63738: CALL 65746 0 3
// end ;
63742: GO 63696
63744: POP
63745: POP
// if tigers then
63746: LD_VAR 0 2
63750: IFFALSE 63834
// for i = 1 to tigers do
63752: LD_ADDR_VAR 0 11
63756: PUSH
63757: DOUBLE
63758: LD_INT 1
63760: DEC
63761: ST_TO_ADDR
63762: LD_VAR 0 2
63766: PUSH
63767: FOR_TO
63768: IFFALSE 63832
// begin hc_class = class_tiger ;
63770: LD_ADDR_OWVAR 28
63774: PUSH
63775: LD_INT 14
63777: ST_TO_ADDR
// hc_gallery =  ;
63778: LD_ADDR_OWVAR 33
63782: PUSH
63783: LD_STRING 
63785: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63786: LD_ADDR_OWVAR 35
63790: PUSH
63791: LD_INT 7
63793: NEG
63794: PPUSH
63795: LD_INT 7
63797: PPUSH
63798: CALL_OW 12
63802: ST_TO_ADDR
// animal := CreateHuman ;
63803: LD_ADDR_VAR 0 12
63807: PUSH
63808: CALL_OW 44
63812: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63813: LD_VAR 0 12
63817: PPUSH
63818: LD_VAR 0 8
63822: PPUSH
63823: LD_INT 0
63825: PPUSH
63826: CALL 65746 0 3
// end ;
63830: GO 63767
63832: POP
63833: POP
// if apemans then
63834: LD_VAR 0 3
63838: IFFALSE 63961
// for i = 1 to apemans do
63840: LD_ADDR_VAR 0 11
63844: PUSH
63845: DOUBLE
63846: LD_INT 1
63848: DEC
63849: ST_TO_ADDR
63850: LD_VAR 0 3
63854: PUSH
63855: FOR_TO
63856: IFFALSE 63959
// begin hc_class = class_apeman ;
63858: LD_ADDR_OWVAR 28
63862: PUSH
63863: LD_INT 12
63865: ST_TO_ADDR
// hc_gallery =  ;
63866: LD_ADDR_OWVAR 33
63870: PUSH
63871: LD_STRING 
63873: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63874: LD_ADDR_OWVAR 35
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PPUSH
63883: LD_INT 2
63885: PPUSH
63886: CALL_OW 12
63890: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63891: LD_ADDR_OWVAR 31
63895: PUSH
63896: LD_INT 1
63898: PPUSH
63899: LD_INT 3
63901: PPUSH
63902: CALL_OW 12
63906: PUSH
63907: LD_INT 1
63909: PPUSH
63910: LD_INT 3
63912: PPUSH
63913: CALL_OW 12
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: ST_TO_ADDR
// animal := CreateHuman ;
63930: LD_ADDR_VAR 0 12
63934: PUSH
63935: CALL_OW 44
63939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63940: LD_VAR 0 12
63944: PPUSH
63945: LD_VAR 0 8
63949: PPUSH
63950: LD_INT 0
63952: PPUSH
63953: CALL 65746 0 3
// end ;
63957: GO 63855
63959: POP
63960: POP
// if enchidnas then
63961: LD_VAR 0 4
63965: IFFALSE 64032
// for i = 1 to enchidnas do
63967: LD_ADDR_VAR 0 11
63971: PUSH
63972: DOUBLE
63973: LD_INT 1
63975: DEC
63976: ST_TO_ADDR
63977: LD_VAR 0 4
63981: PUSH
63982: FOR_TO
63983: IFFALSE 64030
// begin hc_class = 13 ;
63985: LD_ADDR_OWVAR 28
63989: PUSH
63990: LD_INT 13
63992: ST_TO_ADDR
// hc_gallery =  ;
63993: LD_ADDR_OWVAR 33
63997: PUSH
63998: LD_STRING 
64000: ST_TO_ADDR
// animal := CreateHuman ;
64001: LD_ADDR_VAR 0 12
64005: PUSH
64006: CALL_OW 44
64010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64011: LD_VAR 0 12
64015: PPUSH
64016: LD_VAR 0 8
64020: PPUSH
64021: LD_INT 0
64023: PPUSH
64024: CALL 65746 0 3
// end ;
64028: GO 63982
64030: POP
64031: POP
// if fishes then
64032: LD_VAR 0 7
64036: IFFALSE 64103
// for i = 1 to fishes do
64038: LD_ADDR_VAR 0 11
64042: PUSH
64043: DOUBLE
64044: LD_INT 1
64046: DEC
64047: ST_TO_ADDR
64048: LD_VAR 0 7
64052: PUSH
64053: FOR_TO
64054: IFFALSE 64101
// begin hc_class = 20 ;
64056: LD_ADDR_OWVAR 28
64060: PUSH
64061: LD_INT 20
64063: ST_TO_ADDR
// hc_gallery =  ;
64064: LD_ADDR_OWVAR 33
64068: PUSH
64069: LD_STRING 
64071: ST_TO_ADDR
// animal := CreateHuman ;
64072: LD_ADDR_VAR 0 12
64076: PUSH
64077: CALL_OW 44
64081: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64082: LD_VAR 0 12
64086: PPUSH
64087: LD_VAR 0 9
64091: PPUSH
64092: LD_INT 0
64094: PPUSH
64095: CALL 65746 0 3
// end ;
64099: GO 64053
64101: POP
64102: POP
// end ;
64103: LD_VAR 0 10
64107: RET
// export function WantHeal ( sci , unit ) ; begin
64108: LD_INT 0
64110: PPUSH
// if GetTaskList ( sci ) > 0 then
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 437
64120: PUSH
64121: LD_INT 0
64123: GREATER
64124: IFFALSE 64196
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64126: LD_VAR 0 1
64130: PPUSH
64131: CALL_OW 437
64135: PUSH
64136: LD_INT 1
64138: ARRAY
64139: PUSH
64140: LD_INT 1
64142: ARRAY
64143: PUSH
64144: LD_STRING l
64146: EQUAL
64147: IFFALSE 64174
64149: PUSH
64150: LD_VAR 0 1
64154: PPUSH
64155: CALL_OW 437
64159: PUSH
64160: LD_INT 1
64162: ARRAY
64163: PUSH
64164: LD_INT 4
64166: ARRAY
64167: PUSH
64168: LD_VAR 0 2
64172: EQUAL
64173: AND
64174: IFFALSE 64186
// result := true else
64176: LD_ADDR_VAR 0 3
64180: PUSH
64181: LD_INT 1
64183: ST_TO_ADDR
64184: GO 64194
// result := false ;
64186: LD_ADDR_VAR 0 3
64190: PUSH
64191: LD_INT 0
64193: ST_TO_ADDR
// end else
64194: GO 64204
// result := false ;
64196: LD_ADDR_VAR 0 3
64200: PUSH
64201: LD_INT 0
64203: ST_TO_ADDR
// end ;
64204: LD_VAR 0 3
64208: RET
// export function HealTarget ( sci ) ; begin
64209: LD_INT 0
64211: PPUSH
// if not sci then
64212: LD_VAR 0 1
64216: NOT
64217: IFFALSE 64221
// exit ;
64219: GO 64286
// result := 0 ;
64221: LD_ADDR_VAR 0 2
64225: PUSH
64226: LD_INT 0
64228: ST_TO_ADDR
// if GetTaskList ( sci ) then
64229: LD_VAR 0 1
64233: PPUSH
64234: CALL_OW 437
64238: IFFALSE 64286
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64240: LD_VAR 0 1
64244: PPUSH
64245: CALL_OW 437
64249: PUSH
64250: LD_INT 1
64252: ARRAY
64253: PUSH
64254: LD_INT 1
64256: ARRAY
64257: PUSH
64258: LD_STRING l
64260: EQUAL
64261: IFFALSE 64286
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64263: LD_ADDR_VAR 0 2
64267: PUSH
64268: LD_VAR 0 1
64272: PPUSH
64273: CALL_OW 437
64277: PUSH
64278: LD_INT 1
64280: ARRAY
64281: PUSH
64282: LD_INT 4
64284: ARRAY
64285: ST_TO_ADDR
// end ;
64286: LD_VAR 0 2
64290: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64291: LD_INT 0
64293: PPUSH
64294: PPUSH
64295: PPUSH
64296: PPUSH
// if not base_units then
64297: LD_VAR 0 1
64301: NOT
64302: IFFALSE 64306
// exit ;
64304: GO 64393
// result := false ;
64306: LD_ADDR_VAR 0 2
64310: PUSH
64311: LD_INT 0
64313: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64314: LD_ADDR_VAR 0 5
64318: PUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: LD_INT 21
64326: PUSH
64327: LD_INT 3
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PPUSH
64334: CALL_OW 72
64338: ST_TO_ADDR
// if not tmp then
64339: LD_VAR 0 5
64343: NOT
64344: IFFALSE 64348
// exit ;
64346: GO 64393
// for i in tmp do
64348: LD_ADDR_VAR 0 3
64352: PUSH
64353: LD_VAR 0 5
64357: PUSH
64358: FOR_IN
64359: IFFALSE 64391
// begin result := EnemyInRange ( i , 22 ) ;
64361: LD_ADDR_VAR 0 2
64365: PUSH
64366: LD_VAR 0 3
64370: PPUSH
64371: LD_INT 22
64373: PPUSH
64374: CALL 61808 0 2
64378: ST_TO_ADDR
// if result then
64379: LD_VAR 0 2
64383: IFFALSE 64389
// exit ;
64385: POP
64386: POP
64387: GO 64393
// end ;
64389: GO 64358
64391: POP
64392: POP
// end ;
64393: LD_VAR 0 2
64397: RET
// export function FilterByTag ( units , tag ) ; begin
64398: LD_INT 0
64400: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64401: LD_ADDR_VAR 0 3
64405: PUSH
64406: LD_VAR 0 1
64410: PPUSH
64411: LD_INT 120
64413: PUSH
64414: LD_VAR 0 2
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PPUSH
64423: CALL_OW 72
64427: ST_TO_ADDR
// end ;
64428: LD_VAR 0 3
64432: RET
// export function IsDriver ( un ) ; begin
64433: LD_INT 0
64435: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64436: LD_ADDR_VAR 0 2
64440: PUSH
64441: LD_VAR 0 1
64445: PUSH
64446: LD_INT 55
64448: PUSH
64449: EMPTY
64450: LIST
64451: PPUSH
64452: CALL_OW 69
64456: IN
64457: ST_TO_ADDR
// end ;
64458: LD_VAR 0 2
64462: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64463: LD_INT 0
64465: PPUSH
64466: PPUSH
// list := [ ] ;
64467: LD_ADDR_VAR 0 5
64471: PUSH
64472: EMPTY
64473: ST_TO_ADDR
// case d of 0 :
64474: LD_VAR 0 3
64478: PUSH
64479: LD_INT 0
64481: DOUBLE
64482: EQUAL
64483: IFTRUE 64487
64485: GO 64620
64487: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64488: LD_ADDR_VAR 0 5
64492: PUSH
64493: LD_VAR 0 1
64497: PUSH
64498: LD_INT 4
64500: MINUS
64501: PUSH
64502: LD_VAR 0 2
64506: PUSH
64507: LD_INT 4
64509: MINUS
64510: PUSH
64511: LD_INT 2
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: PUSH
64519: LD_VAR 0 1
64523: PUSH
64524: LD_INT 3
64526: MINUS
64527: PUSH
64528: LD_VAR 0 2
64532: PUSH
64533: LD_INT 1
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: PUSH
64541: LD_VAR 0 1
64545: PUSH
64546: LD_INT 4
64548: PLUS
64549: PUSH
64550: LD_VAR 0 2
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: PUSH
64563: LD_VAR 0 1
64567: PUSH
64568: LD_INT 3
64570: PLUS
64571: PUSH
64572: LD_VAR 0 2
64576: PUSH
64577: LD_INT 3
64579: PLUS
64580: PUSH
64581: LD_INT 5
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: PUSH
64589: LD_VAR 0 1
64593: PUSH
64594: LD_VAR 0 2
64598: PUSH
64599: LD_INT 4
64601: PLUS
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: ST_TO_ADDR
// end ; 1 :
64618: GO 65318
64620: LD_INT 1
64622: DOUBLE
64623: EQUAL
64624: IFTRUE 64628
64626: GO 64761
64628: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64629: LD_ADDR_VAR 0 5
64633: PUSH
64634: LD_VAR 0 1
64638: PUSH
64639: LD_VAR 0 2
64643: PUSH
64644: LD_INT 4
64646: MINUS
64647: PUSH
64648: LD_INT 3
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: LIST
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: LD_INT 3
64663: MINUS
64664: PUSH
64665: LD_VAR 0 2
64669: PUSH
64670: LD_INT 3
64672: MINUS
64673: PUSH
64674: LD_INT 2
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: PUSH
64682: LD_VAR 0 1
64686: PUSH
64687: LD_INT 4
64689: MINUS
64690: PUSH
64691: LD_VAR 0 2
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: PUSH
64704: LD_VAR 0 1
64708: PUSH
64709: LD_VAR 0 2
64713: PUSH
64714: LD_INT 3
64716: PLUS
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: LIST
64725: PUSH
64726: LD_VAR 0 1
64730: PUSH
64731: LD_INT 4
64733: PLUS
64734: PUSH
64735: LD_VAR 0 2
64739: PUSH
64740: LD_INT 4
64742: PLUS
64743: PUSH
64744: LD_INT 5
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: LIST
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: ST_TO_ADDR
// end ; 2 :
64759: GO 65318
64761: LD_INT 2
64763: DOUBLE
64764: EQUAL
64765: IFTRUE 64769
64767: GO 64898
64769: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64770: LD_ADDR_VAR 0 5
64774: PUSH
64775: LD_VAR 0 1
64779: PUSH
64780: LD_VAR 0 2
64784: PUSH
64785: LD_INT 3
64787: MINUS
64788: PUSH
64789: LD_INT 3
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: LIST
64796: PUSH
64797: LD_VAR 0 1
64801: PUSH
64802: LD_INT 4
64804: PLUS
64805: PUSH
64806: LD_VAR 0 2
64810: PUSH
64811: LD_INT 4
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: LIST
64818: PUSH
64819: LD_VAR 0 1
64823: PUSH
64824: LD_VAR 0 2
64828: PUSH
64829: LD_INT 4
64831: PLUS
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: LIST
64840: PUSH
64841: LD_VAR 0 1
64845: PUSH
64846: LD_INT 3
64848: MINUS
64849: PUSH
64850: LD_VAR 0 2
64854: PUSH
64855: LD_INT 1
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: PUSH
64863: LD_VAR 0 1
64867: PUSH
64868: LD_INT 4
64870: MINUS
64871: PUSH
64872: LD_VAR 0 2
64876: PUSH
64877: LD_INT 4
64879: MINUS
64880: PUSH
64881: LD_INT 2
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: LIST
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: ST_TO_ADDR
// end ; 3 :
64896: GO 65318
64898: LD_INT 3
64900: DOUBLE
64901: EQUAL
64902: IFTRUE 64906
64904: GO 65039
64906: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64907: LD_ADDR_VAR 0 5
64911: PUSH
64912: LD_VAR 0 1
64916: PUSH
64917: LD_INT 3
64919: PLUS
64920: PUSH
64921: LD_VAR 0 2
64925: PUSH
64926: LD_INT 4
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: LIST
64933: PUSH
64934: LD_VAR 0 1
64938: PUSH
64939: LD_INT 4
64941: PLUS
64942: PUSH
64943: LD_VAR 0 2
64947: PUSH
64948: LD_INT 4
64950: PLUS
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: PUSH
64960: LD_VAR 0 1
64964: PUSH
64965: LD_INT 4
64967: MINUS
64968: PUSH
64969: LD_VAR 0 2
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: LIST
64981: PUSH
64982: LD_VAR 0 1
64986: PUSH
64987: LD_VAR 0 2
64991: PUSH
64992: LD_INT 4
64994: MINUS
64995: PUSH
64996: LD_INT 3
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: LIST
65003: PUSH
65004: LD_VAR 0 1
65008: PUSH
65009: LD_INT 3
65011: MINUS
65012: PUSH
65013: LD_VAR 0 2
65017: PUSH
65018: LD_INT 3
65020: MINUS
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: LIST
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: ST_TO_ADDR
// end ; 4 :
65037: GO 65318
65039: LD_INT 4
65041: DOUBLE
65042: EQUAL
65043: IFTRUE 65047
65045: GO 65180
65047: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65048: LD_ADDR_VAR 0 5
65052: PUSH
65053: LD_VAR 0 1
65057: PUSH
65058: LD_VAR 0 2
65062: PUSH
65063: LD_INT 4
65065: PLUS
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: LIST
65074: PUSH
65075: LD_VAR 0 1
65079: PUSH
65080: LD_INT 3
65082: PLUS
65083: PUSH
65084: LD_VAR 0 2
65088: PUSH
65089: LD_INT 3
65091: PLUS
65092: PUSH
65093: LD_INT 5
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: LIST
65100: PUSH
65101: LD_VAR 0 1
65105: PUSH
65106: LD_INT 4
65108: PLUS
65109: PUSH
65110: LD_VAR 0 2
65114: PUSH
65115: LD_INT 4
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: PUSH
65123: LD_VAR 0 1
65127: PUSH
65128: LD_VAR 0 2
65132: PUSH
65133: LD_INT 3
65135: MINUS
65136: PUSH
65137: LD_INT 3
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: PUSH
65145: LD_VAR 0 1
65149: PUSH
65150: LD_INT 4
65152: MINUS
65153: PUSH
65154: LD_VAR 0 2
65158: PUSH
65159: LD_INT 4
65161: MINUS
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: LIST
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: ST_TO_ADDR
// end ; 5 :
65178: GO 65318
65180: LD_INT 5
65182: DOUBLE
65183: EQUAL
65184: IFTRUE 65188
65186: GO 65317
65188: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65189: LD_ADDR_VAR 0 5
65193: PUSH
65194: LD_VAR 0 1
65198: PUSH
65199: LD_INT 4
65201: MINUS
65202: PUSH
65203: LD_VAR 0 2
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: PUSH
65216: LD_VAR 0 1
65220: PUSH
65221: LD_VAR 0 2
65225: PUSH
65226: LD_INT 4
65228: MINUS
65229: PUSH
65230: LD_INT 3
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: LIST
65237: PUSH
65238: LD_VAR 0 1
65242: PUSH
65243: LD_INT 4
65245: PLUS
65246: PUSH
65247: LD_VAR 0 2
65251: PUSH
65252: LD_INT 4
65254: PLUS
65255: PUSH
65256: LD_INT 5
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: LD_INT 3
65271: PLUS
65272: PUSH
65273: LD_VAR 0 2
65277: PUSH
65278: LD_INT 4
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: PUSH
65286: LD_VAR 0 1
65290: PUSH
65291: LD_VAR 0 2
65295: PUSH
65296: LD_INT 3
65298: PLUS
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: ST_TO_ADDR
// end ; end ;
65315: GO 65318
65317: POP
// result := list ;
65318: LD_ADDR_VAR 0 4
65322: PUSH
65323: LD_VAR 0 5
65327: ST_TO_ADDR
// end ;
65328: LD_VAR 0 4
65332: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65333: LD_INT 0
65335: PPUSH
65336: PPUSH
65337: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65338: LD_VAR 0 1
65342: NOT
65343: IFTRUE 65371
65345: PUSH
65346: LD_VAR 0 2
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: LD_INT 4
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: IN
65369: NOT
65370: OR
65371: IFFALSE 65375
// exit ;
65373: GO 65458
// tmp := [ ] ;
65375: LD_ADDR_VAR 0 5
65379: PUSH
65380: EMPTY
65381: ST_TO_ADDR
// for i in units do
65382: LD_ADDR_VAR 0 4
65386: PUSH
65387: LD_VAR 0 1
65391: PUSH
65392: FOR_IN
65393: IFFALSE 65427
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65395: LD_ADDR_VAR 0 5
65399: PUSH
65400: LD_VAR 0 5
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: LD_VAR 0 2
65414: PPUSH
65415: CALL_OW 259
65419: PPUSH
65420: CALL 66853 0 2
65424: ST_TO_ADDR
65425: GO 65392
65427: POP
65428: POP
// if not tmp then
65429: LD_VAR 0 5
65433: NOT
65434: IFFALSE 65438
// exit ;
65436: GO 65458
// result := SortListByListDesc ( units , tmp ) ;
65438: LD_ADDR_VAR 0 3
65442: PUSH
65443: LD_VAR 0 1
65447: PPUSH
65448: LD_VAR 0 5
65452: PPUSH
65453: CALL_OW 77
65457: ST_TO_ADDR
// end ;
65458: LD_VAR 0 3
65462: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65463: LD_INT 0
65465: PPUSH
65466: PPUSH
65467: PPUSH
// result := false ;
65468: LD_ADDR_VAR 0 3
65472: PUSH
65473: LD_INT 0
65475: ST_TO_ADDR
// if not building then
65476: LD_VAR 0 2
65480: NOT
65481: IFFALSE 65485
// exit ;
65483: GO 65629
// x := GetX ( building ) ;
65485: LD_ADDR_VAR 0 4
65489: PUSH
65490: LD_VAR 0 2
65494: PPUSH
65495: CALL_OW 250
65499: ST_TO_ADDR
// y := GetY ( building ) ;
65500: LD_ADDR_VAR 0 5
65504: PUSH
65505: LD_VAR 0 2
65509: PPUSH
65510: CALL_OW 251
65514: ST_TO_ADDR
// if not x or not y then
65515: LD_VAR 0 4
65519: NOT
65520: IFTRUE 65529
65522: PUSH
65523: LD_VAR 0 5
65527: NOT
65528: OR
65529: IFFALSE 65533
// exit ;
65531: GO 65629
// if GetTaskList ( unit ) then
65533: LD_VAR 0 1
65537: PPUSH
65538: CALL_OW 437
65542: IFFALSE 65629
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65544: LD_STRING e
65546: PUSH
65547: LD_VAR 0 1
65551: PPUSH
65552: CALL_OW 437
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PUSH
65561: LD_INT 1
65563: ARRAY
65564: EQUAL
65565: IFFALSE 65592
65567: PUSH
65568: LD_VAR 0 4
65572: PUSH
65573: LD_VAR 0 1
65577: PPUSH
65578: CALL_OW 437
65582: PUSH
65583: LD_INT 1
65585: ARRAY
65586: PUSH
65587: LD_INT 2
65589: ARRAY
65590: EQUAL
65591: AND
65592: IFFALSE 65619
65594: PUSH
65595: LD_VAR 0 5
65599: PUSH
65600: LD_VAR 0 1
65604: PPUSH
65605: CALL_OW 437
65609: PUSH
65610: LD_INT 1
65612: ARRAY
65613: PUSH
65614: LD_INT 3
65616: ARRAY
65617: EQUAL
65618: AND
65619: IFFALSE 65629
// result := true end ;
65621: LD_ADDR_VAR 0 3
65625: PUSH
65626: LD_INT 1
65628: ST_TO_ADDR
// end ;
65629: LD_VAR 0 3
65633: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65634: LD_INT 0
65636: PPUSH
// result := false ;
65637: LD_ADDR_VAR 0 4
65641: PUSH
65642: LD_INT 0
65644: ST_TO_ADDR
// if GetTaskList ( unit ) then
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 437
65654: IFFALSE 65741
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65656: LD_STRING M
65658: PUSH
65659: LD_VAR 0 1
65663: PPUSH
65664: CALL_OW 437
65668: PUSH
65669: LD_INT 1
65671: ARRAY
65672: PUSH
65673: LD_INT 1
65675: ARRAY
65676: EQUAL
65677: IFFALSE 65704
65679: PUSH
65680: LD_VAR 0 2
65684: PUSH
65685: LD_VAR 0 1
65689: PPUSH
65690: CALL_OW 437
65694: PUSH
65695: LD_INT 1
65697: ARRAY
65698: PUSH
65699: LD_INT 2
65701: ARRAY
65702: EQUAL
65703: AND
65704: IFFALSE 65731
65706: PUSH
65707: LD_VAR 0 3
65711: PUSH
65712: LD_VAR 0 1
65716: PPUSH
65717: CALL_OW 437
65721: PUSH
65722: LD_INT 1
65724: ARRAY
65725: PUSH
65726: LD_INT 3
65728: ARRAY
65729: EQUAL
65730: AND
65731: IFFALSE 65741
// result := true ;
65733: LD_ADDR_VAR 0 4
65737: PUSH
65738: LD_INT 1
65740: ST_TO_ADDR
// end ; end ;
65741: LD_VAR 0 4
65745: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65746: LD_INT 0
65748: PPUSH
65749: PPUSH
65750: PPUSH
65751: PPUSH
// if not unit or not area then
65752: LD_VAR 0 1
65756: NOT
65757: IFTRUE 65766
65759: PUSH
65760: LD_VAR 0 2
65764: NOT
65765: OR
65766: IFFALSE 65770
// exit ;
65768: GO 65946
// tmp := AreaToList ( area , i ) ;
65770: LD_ADDR_VAR 0 6
65774: PUSH
65775: LD_VAR 0 2
65779: PPUSH
65780: LD_VAR 0 5
65784: PPUSH
65785: CALL_OW 517
65789: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65790: LD_ADDR_VAR 0 5
65794: PUSH
65795: DOUBLE
65796: LD_INT 1
65798: DEC
65799: ST_TO_ADDR
65800: LD_VAR 0 6
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PUSH
65809: FOR_TO
65810: IFFALSE 65944
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65812: LD_ADDR_VAR 0 7
65816: PUSH
65817: LD_VAR 0 6
65821: PUSH
65822: LD_INT 1
65824: ARRAY
65825: PUSH
65826: LD_VAR 0 5
65830: ARRAY
65831: PUSH
65832: LD_VAR 0 6
65836: PUSH
65837: LD_INT 2
65839: ARRAY
65840: PUSH
65841: LD_VAR 0 5
65845: ARRAY
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65851: LD_INT 92
65853: PUSH
65854: LD_VAR 0 7
65858: PUSH
65859: LD_INT 1
65861: ARRAY
65862: PUSH
65863: LD_VAR 0 7
65867: PUSH
65868: LD_INT 2
65870: ARRAY
65871: PUSH
65872: LD_INT 2
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: PPUSH
65881: CALL_OW 69
65885: PUSH
65886: LD_INT 0
65888: EQUAL
65889: IFFALSE 65942
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65891: LD_VAR 0 1
65895: PPUSH
65896: LD_VAR 0 7
65900: PUSH
65901: LD_INT 1
65903: ARRAY
65904: PPUSH
65905: LD_VAR 0 7
65909: PUSH
65910: LD_INT 2
65912: ARRAY
65913: PPUSH
65914: LD_VAR 0 3
65918: PPUSH
65919: CALL_OW 48
// result := IsPlaced ( unit ) ;
65923: LD_ADDR_VAR 0 4
65927: PUSH
65928: LD_VAR 0 1
65932: PPUSH
65933: CALL_OW 305
65937: ST_TO_ADDR
// exit ;
65938: POP
65939: POP
65940: GO 65946
// end ; end ;
65942: GO 65809
65944: POP
65945: POP
// end ;
65946: LD_VAR 0 4
65950: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65951: LD_INT 0
65953: PPUSH
65954: PPUSH
65955: PPUSH
// if not side or side > 8 then
65956: LD_VAR 0 1
65960: NOT
65961: IFTRUE 65973
65963: PUSH
65964: LD_VAR 0 1
65968: PUSH
65969: LD_INT 8
65971: GREATER
65972: OR
65973: IFFALSE 65977
// exit ;
65975: GO 66164
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65977: LD_ADDR_VAR 0 4
65981: PUSH
65982: LD_INT 22
65984: PUSH
65985: LD_VAR 0 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 21
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PPUSH
66008: CALL_OW 69
66012: ST_TO_ADDR
// if not tmp then
66013: LD_VAR 0 4
66017: NOT
66018: IFFALSE 66022
// exit ;
66020: GO 66164
// enable_addtolog := true ;
66022: LD_ADDR_OWVAR 81
66026: PUSH
66027: LD_INT 1
66029: ST_TO_ADDR
// AddToLog ( [ ) ;
66030: LD_STRING [
66032: PPUSH
66033: CALL_OW 561
// for i in tmp do
66037: LD_ADDR_VAR 0 3
66041: PUSH
66042: LD_VAR 0 4
66046: PUSH
66047: FOR_IN
66048: IFFALSE 66155
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66050: LD_STRING [
66052: PUSH
66053: LD_VAR 0 3
66057: PPUSH
66058: CALL_OW 266
66062: STR
66063: PUSH
66064: LD_STRING , 
66066: STR
66067: PUSH
66068: LD_VAR 0 3
66072: PPUSH
66073: CALL_OW 250
66077: STR
66078: PUSH
66079: LD_STRING , 
66081: STR
66082: PUSH
66083: LD_VAR 0 3
66087: PPUSH
66088: CALL_OW 251
66092: STR
66093: PUSH
66094: LD_STRING , 
66096: STR
66097: PUSH
66098: LD_VAR 0 3
66102: PPUSH
66103: CALL_OW 254
66107: STR
66108: PUSH
66109: LD_STRING , 
66111: STR
66112: PUSH
66113: LD_VAR 0 3
66117: PPUSH
66118: LD_INT 1
66120: PPUSH
66121: CALL_OW 268
66125: STR
66126: PUSH
66127: LD_STRING , 
66129: STR
66130: PUSH
66131: LD_VAR 0 3
66135: PPUSH
66136: LD_INT 2
66138: PPUSH
66139: CALL_OW 268
66143: STR
66144: PUSH
66145: LD_STRING ],
66147: STR
66148: PPUSH
66149: CALL_OW 561
// end ;
66153: GO 66047
66155: POP
66156: POP
// AddToLog ( ]; ) ;
66157: LD_STRING ];
66159: PPUSH
66160: CALL_OW 561
// end ;
66164: LD_VAR 0 2
66168: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66169: LD_INT 0
66171: PPUSH
66172: PPUSH
66173: PPUSH
66174: PPUSH
66175: PPUSH
// if not area or not rate or not max then
66176: LD_VAR 0 1
66180: NOT
66181: IFTRUE 66190
66183: PUSH
66184: LD_VAR 0 2
66188: NOT
66189: OR
66190: IFTRUE 66199
66192: PUSH
66193: LD_VAR 0 4
66197: NOT
66198: OR
66199: IFFALSE 66203
// exit ;
66201: GO 66392
// while 1 do
66203: LD_INT 1
66205: IFFALSE 66392
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66207: LD_ADDR_VAR 0 9
66211: PUSH
66212: LD_VAR 0 1
66216: PPUSH
66217: LD_INT 1
66219: PPUSH
66220: CALL_OW 287
66224: PUSH
66225: LD_INT 10
66227: MUL
66228: ST_TO_ADDR
// r := rate / 10 ;
66229: LD_ADDR_VAR 0 7
66233: PUSH
66234: LD_VAR 0 2
66238: PUSH
66239: LD_INT 10
66241: DIVREAL
66242: ST_TO_ADDR
// time := 1 1$00 ;
66243: LD_ADDR_VAR 0 8
66247: PUSH
66248: LD_INT 2100
66250: ST_TO_ADDR
// if amount < min then
66251: LD_VAR 0 9
66255: PUSH
66256: LD_VAR 0 3
66260: LESS
66261: IFFALSE 66279
// r := r * 2 else
66263: LD_ADDR_VAR 0 7
66267: PUSH
66268: LD_VAR 0 7
66272: PUSH
66273: LD_INT 2
66275: MUL
66276: ST_TO_ADDR
66277: GO 66305
// if amount > max then
66279: LD_VAR 0 9
66283: PUSH
66284: LD_VAR 0 4
66288: GREATER
66289: IFFALSE 66305
// r := r / 2 ;
66291: LD_ADDR_VAR 0 7
66295: PUSH
66296: LD_VAR 0 7
66300: PUSH
66301: LD_INT 2
66303: DIVREAL
66304: ST_TO_ADDR
// time := time / r ;
66305: LD_ADDR_VAR 0 8
66309: PUSH
66310: LD_VAR 0 8
66314: PUSH
66315: LD_VAR 0 7
66319: DIVREAL
66320: ST_TO_ADDR
// if time < 0 then
66321: LD_VAR 0 8
66325: PUSH
66326: LD_INT 0
66328: LESS
66329: IFFALSE 66346
// time := time * - 1 ;
66331: LD_ADDR_VAR 0 8
66335: PUSH
66336: LD_VAR 0 8
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: MUL
66345: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66346: LD_VAR 0 8
66350: PUSH
66351: LD_INT 35
66353: PPUSH
66354: LD_INT 875
66356: PPUSH
66357: CALL_OW 12
66361: PLUS
66362: PPUSH
66363: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66367: LD_INT 1
66369: PPUSH
66370: LD_INT 5
66372: PPUSH
66373: CALL_OW 12
66377: PPUSH
66378: LD_VAR 0 1
66382: PPUSH
66383: LD_INT 1
66385: PPUSH
66386: CALL_OW 55
// end ;
66390: GO 66203
// end ;
66392: LD_VAR 0 5
66396: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66397: LD_INT 0
66399: PPUSH
66400: PPUSH
66401: PPUSH
66402: PPUSH
66403: PPUSH
66404: PPUSH
66405: PPUSH
66406: PPUSH
// if not turrets or not factories then
66407: LD_VAR 0 1
66411: NOT
66412: IFTRUE 66421
66414: PUSH
66415: LD_VAR 0 2
66419: NOT
66420: OR
66421: IFFALSE 66425
// exit ;
66423: GO 66732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66425: LD_ADDR_VAR 0 10
66429: PUSH
66430: LD_INT 5
66432: PUSH
66433: LD_INT 6
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 4
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: PUSH
66450: LD_INT 3
66452: PUSH
66453: LD_INT 5
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 24
66467: PUSH
66468: LD_INT 25
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 23
66477: PUSH
66478: LD_INT 27
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 42
66491: PUSH
66492: LD_INT 43
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 44
66501: PUSH
66502: LD_INT 46
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 45
66511: PUSH
66512: LD_INT 47
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: LIST
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: ST_TO_ADDR
// result := [ ] ;
66529: LD_ADDR_VAR 0 3
66533: PUSH
66534: EMPTY
66535: ST_TO_ADDR
// for i in turrets do
66536: LD_ADDR_VAR 0 4
66540: PUSH
66541: LD_VAR 0 1
66545: PUSH
66546: FOR_IN
66547: IFFALSE 66730
// begin nat := GetNation ( i ) ;
66549: LD_ADDR_VAR 0 7
66553: PUSH
66554: LD_VAR 0 4
66558: PPUSH
66559: CALL_OW 248
66563: ST_TO_ADDR
// weapon := 0 ;
66564: LD_ADDR_VAR 0 8
66568: PUSH
66569: LD_INT 0
66571: ST_TO_ADDR
// if not nat then
66572: LD_VAR 0 7
66576: NOT
66577: IFFALSE 66581
// continue ;
66579: GO 66546
// for j in list [ nat ] do
66581: LD_ADDR_VAR 0 5
66585: PUSH
66586: LD_VAR 0 10
66590: PUSH
66591: LD_VAR 0 7
66595: ARRAY
66596: PUSH
66597: FOR_IN
66598: IFFALSE 66639
// if GetBWeapon ( i ) = j [ 1 ] then
66600: LD_VAR 0 4
66604: PPUSH
66605: CALL_OW 269
66609: PUSH
66610: LD_VAR 0 5
66614: PUSH
66615: LD_INT 1
66617: ARRAY
66618: EQUAL
66619: IFFALSE 66637
// begin weapon := j [ 2 ] ;
66621: LD_ADDR_VAR 0 8
66625: PUSH
66626: LD_VAR 0 5
66630: PUSH
66631: LD_INT 2
66633: ARRAY
66634: ST_TO_ADDR
// break ;
66635: GO 66639
// end ;
66637: GO 66597
66639: POP
66640: POP
// if not weapon then
66641: LD_VAR 0 8
66645: NOT
66646: IFFALSE 66650
// continue ;
66648: GO 66546
// for k in factories do
66650: LD_ADDR_VAR 0 6
66654: PUSH
66655: LD_VAR 0 2
66659: PUSH
66660: FOR_IN
66661: IFFALSE 66726
// begin weapons := AvailableWeaponList ( k ) ;
66663: LD_ADDR_VAR 0 9
66667: PUSH
66668: LD_VAR 0 6
66672: PPUSH
66673: CALL_OW 478
66677: ST_TO_ADDR
// if not weapons then
66678: LD_VAR 0 9
66682: NOT
66683: IFFALSE 66687
// continue ;
66685: GO 66660
// if weapon in weapons then
66687: LD_VAR 0 8
66691: PUSH
66692: LD_VAR 0 9
66696: IN
66697: IFFALSE 66724
// begin result := [ i , weapon ] ;
66699: LD_ADDR_VAR 0 3
66703: PUSH
66704: LD_VAR 0 4
66708: PUSH
66709: LD_VAR 0 8
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: ST_TO_ADDR
// exit ;
66718: POP
66719: POP
66720: POP
66721: POP
66722: GO 66732
// end ; end ;
66724: GO 66660
66726: POP
66727: POP
// end ;
66728: GO 66546
66730: POP
66731: POP
// end ;
66732: LD_VAR 0 3
66736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66737: LD_INT 0
66739: PPUSH
// if not side or side > 8 then
66740: LD_VAR 0 3
66744: NOT
66745: IFTRUE 66757
66747: PUSH
66748: LD_VAR 0 3
66752: PUSH
66753: LD_INT 8
66755: GREATER
66756: OR
66757: IFFALSE 66761
// exit ;
66759: GO 66820
// if not range then
66761: LD_VAR 0 4
66765: NOT
66766: IFFALSE 66777
// range := - 12 ;
66768: LD_ADDR_VAR 0 4
66772: PUSH
66773: LD_INT 12
66775: NEG
66776: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66777: LD_VAR 0 1
66781: PPUSH
66782: LD_VAR 0 2
66786: PPUSH
66787: LD_VAR 0 3
66791: PPUSH
66792: LD_VAR 0 4
66796: PPUSH
66797: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66801: LD_VAR 0 1
66805: PPUSH
66806: LD_VAR 0 2
66810: PPUSH
66811: LD_VAR 0 3
66815: PPUSH
66816: CALL_OW 331
// end ;
66820: LD_VAR 0 5
66824: RET
// export function Video ( mode ) ; begin
66825: LD_INT 0
66827: PPUSH
// ingame_video = mode ;
66828: LD_ADDR_OWVAR 52
66832: PUSH
66833: LD_VAR 0 1
66837: ST_TO_ADDR
// interface_hidden = mode ;
66838: LD_ADDR_OWVAR 54
66842: PUSH
66843: LD_VAR 0 1
66847: ST_TO_ADDR
// end ;
66848: LD_VAR 0 2
66852: RET
// export function Join ( array , element ) ; begin
66853: LD_INT 0
66855: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66856: LD_ADDR_VAR 0 3
66860: PUSH
66861: LD_VAR 0 1
66865: PPUSH
66866: LD_VAR 0 1
66870: PUSH
66871: LD_INT 1
66873: PLUS
66874: PPUSH
66875: LD_VAR 0 2
66879: PPUSH
66880: CALL_OW 1
66884: ST_TO_ADDR
// end ;
66885: LD_VAR 0 3
66889: RET
// export function JoinUnion ( array , element ) ; begin
66890: LD_INT 0
66892: PPUSH
// result := array union element ;
66893: LD_ADDR_VAR 0 3
66897: PUSH
66898: LD_VAR 0 1
66902: PUSH
66903: LD_VAR 0 2
66907: UNION
66908: ST_TO_ADDR
// end ;
66909: LD_VAR 0 3
66913: RET
// export function GetBehemoths ( side ) ; begin
66914: LD_INT 0
66916: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66917: LD_ADDR_VAR 0 2
66921: PUSH
66922: LD_INT 22
66924: PUSH
66925: LD_VAR 0 1
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: LD_INT 31
66936: PUSH
66937: LD_INT 25
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PPUSH
66948: CALL_OW 69
66952: ST_TO_ADDR
// end ;
66953: LD_VAR 0 2
66957: RET
// export function Shuffle ( array ) ; var i , index ; begin
66958: LD_INT 0
66960: PPUSH
66961: PPUSH
66962: PPUSH
// result := [ ] ;
66963: LD_ADDR_VAR 0 2
66967: PUSH
66968: EMPTY
66969: ST_TO_ADDR
// if not array then
66970: LD_VAR 0 1
66974: NOT
66975: IFFALSE 66979
// exit ;
66977: GO 67078
// Randomize ;
66979: CALL_OW 10
// for i = array downto 1 do
66983: LD_ADDR_VAR 0 3
66987: PUSH
66988: DOUBLE
66989: LD_VAR 0 1
66993: INC
66994: ST_TO_ADDR
66995: LD_INT 1
66997: PUSH
66998: FOR_DOWNTO
66999: IFFALSE 67076
// begin index := rand ( 1 , array ) ;
67001: LD_ADDR_VAR 0 4
67005: PUSH
67006: LD_INT 1
67008: PPUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: CALL_OW 12
67018: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67019: LD_ADDR_VAR 0 2
67023: PUSH
67024: LD_VAR 0 2
67028: PPUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_INT 1
67036: PLUS
67037: PPUSH
67038: LD_VAR 0 1
67042: PUSH
67043: LD_VAR 0 4
67047: ARRAY
67048: PPUSH
67049: CALL_OW 2
67053: ST_TO_ADDR
// array := Delete ( array , index ) ;
67054: LD_ADDR_VAR 0 1
67058: PUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: LD_VAR 0 4
67068: PPUSH
67069: CALL_OW 3
67073: ST_TO_ADDR
// end ;
67074: GO 66998
67076: POP
67077: POP
// end ;
67078: LD_VAR 0 2
67082: RET
// export function GetBaseMaterials ( base ) ; begin
67083: LD_INT 0
67085: PPUSH
// result := [ 0 , 0 , 0 ] ;
67086: LD_ADDR_VAR 0 2
67090: PUSH
67091: LD_INT 0
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: ST_TO_ADDR
// if not base then
67105: LD_VAR 0 1
67109: NOT
67110: IFFALSE 67114
// exit ;
67112: GO 67163
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67114: LD_ADDR_VAR 0 2
67118: PUSH
67119: LD_VAR 0 1
67123: PPUSH
67124: LD_INT 1
67126: PPUSH
67127: CALL_OW 275
67131: PUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: LD_INT 2
67139: PPUSH
67140: CALL_OW 275
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: LD_INT 3
67152: PPUSH
67153: CALL_OW 275
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: ST_TO_ADDR
// end ;
67163: LD_VAR 0 2
67167: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67168: LD_INT 0
67170: PPUSH
67171: PPUSH
// result := array ;
67172: LD_ADDR_VAR 0 3
67176: PUSH
67177: LD_VAR 0 1
67181: ST_TO_ADDR
// if size >= result then
67182: LD_VAR 0 2
67186: PUSH
67187: LD_VAR 0 3
67191: GREATEREQUAL
67192: IFFALSE 67196
// exit ;
67194: GO 67246
// if size then
67196: LD_VAR 0 2
67200: IFFALSE 67246
// for i := array downto size do
67202: LD_ADDR_VAR 0 4
67206: PUSH
67207: DOUBLE
67208: LD_VAR 0 1
67212: INC
67213: ST_TO_ADDR
67214: LD_VAR 0 2
67218: PUSH
67219: FOR_DOWNTO
67220: IFFALSE 67244
// result := Delete ( result , result ) ;
67222: LD_ADDR_VAR 0 3
67226: PUSH
67227: LD_VAR 0 3
67231: PPUSH
67232: LD_VAR 0 3
67236: PPUSH
67237: CALL_OW 3
67241: ST_TO_ADDR
67242: GO 67219
67244: POP
67245: POP
// end ;
67246: LD_VAR 0 3
67250: RET
// export function ComExit ( unit ) ; var tmp ; begin
67251: LD_INT 0
67253: PPUSH
67254: PPUSH
// if not IsInUnit ( unit ) then
67255: LD_VAR 0 1
67259: PPUSH
67260: CALL_OW 310
67264: NOT
67265: IFFALSE 67269
// exit ;
67267: GO 67329
// tmp := IsInUnit ( unit ) ;
67269: LD_ADDR_VAR 0 3
67273: PUSH
67274: LD_VAR 0 1
67278: PPUSH
67279: CALL_OW 310
67283: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67284: LD_VAR 0 3
67288: PPUSH
67289: CALL_OW 247
67293: PUSH
67294: LD_INT 2
67296: EQUAL
67297: IFFALSE 67310
// ComExitVehicle ( unit ) else
67299: LD_VAR 0 1
67303: PPUSH
67304: CALL_OW 121
67308: GO 67319
// ComExitBuilding ( unit ) ;
67310: LD_VAR 0 1
67314: PPUSH
67315: CALL_OW 122
// result := tmp ;
67319: LD_ADDR_VAR 0 2
67323: PUSH
67324: LD_VAR 0 3
67328: ST_TO_ADDR
// end ;
67329: LD_VAR 0 2
67333: RET
// export function ComExitAll ( units ) ; var i ; begin
67334: LD_INT 0
67336: PPUSH
67337: PPUSH
// if not units then
67338: LD_VAR 0 1
67342: NOT
67343: IFFALSE 67347
// exit ;
67345: GO 67373
// for i in units do
67347: LD_ADDR_VAR 0 3
67351: PUSH
67352: LD_VAR 0 1
67356: PUSH
67357: FOR_IN
67358: IFFALSE 67371
// ComExit ( i ) ;
67360: LD_VAR 0 3
67364: PPUSH
67365: CALL 67251 0 1
67369: GO 67357
67371: POP
67372: POP
// end ;
67373: LD_VAR 0 2
67377: RET
// export function ResetHc ; begin
67378: LD_INT 0
67380: PPUSH
// InitHc ;
67381: CALL_OW 19
// hc_importance := 0 ;
67385: LD_ADDR_OWVAR 32
67389: PUSH
67390: LD_INT 0
67392: ST_TO_ADDR
// end ;
67393: LD_VAR 0 1
67397: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67398: LD_INT 0
67400: PPUSH
67401: PPUSH
67402: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67403: LD_ADDR_VAR 0 6
67407: PUSH
67408: LD_VAR 0 1
67412: PUSH
67413: LD_VAR 0 3
67417: PLUS
67418: PUSH
67419: LD_INT 2
67421: DIV
67422: ST_TO_ADDR
// if _x < 0 then
67423: LD_VAR 0 6
67427: PUSH
67428: LD_INT 0
67430: LESS
67431: IFFALSE 67448
// _x := _x * - 1 ;
67433: LD_ADDR_VAR 0 6
67437: PUSH
67438: LD_VAR 0 6
67442: PUSH
67443: LD_INT 1
67445: NEG
67446: MUL
67447: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67448: LD_ADDR_VAR 0 7
67452: PUSH
67453: LD_VAR 0 2
67457: PUSH
67458: LD_VAR 0 4
67462: PLUS
67463: PUSH
67464: LD_INT 2
67466: DIV
67467: ST_TO_ADDR
// if _y < 0 then
67468: LD_VAR 0 7
67472: PUSH
67473: LD_INT 0
67475: LESS
67476: IFFALSE 67493
// _y := _y * - 1 ;
67478: LD_ADDR_VAR 0 7
67482: PUSH
67483: LD_VAR 0 7
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: MUL
67492: ST_TO_ADDR
// result := [ _x , _y ] ;
67493: LD_ADDR_VAR 0 5
67497: PUSH
67498: LD_VAR 0 6
67502: PUSH
67503: LD_VAR 0 7
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: ST_TO_ADDR
// end ;
67512: LD_VAR 0 5
67516: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67517: LD_INT 0
67519: PPUSH
67520: PPUSH
67521: PPUSH
67522: PPUSH
// task := GetTaskList ( unit ) ;
67523: LD_ADDR_VAR 0 7
67527: PUSH
67528: LD_VAR 0 1
67532: PPUSH
67533: CALL_OW 437
67537: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67538: LD_VAR 0 7
67542: NOT
67543: IFFALSE 67562
67545: PUSH
67546: LD_VAR 0 1
67550: PPUSH
67551: LD_VAR 0 2
67555: PPUSH
67556: CALL_OW 308
67560: NOT
67561: AND
67562: IFFALSE 67566
// exit ;
67564: GO 67684
// if IsInArea ( unit , area ) then
67566: LD_VAR 0 1
67570: PPUSH
67571: LD_VAR 0 2
67575: PPUSH
67576: CALL_OW 308
67580: IFFALSE 67598
// begin ComMoveToArea ( unit , goAway ) ;
67582: LD_VAR 0 1
67586: PPUSH
67587: LD_VAR 0 3
67591: PPUSH
67592: CALL_OW 113
// exit ;
67596: GO 67684
// end ; if task [ 1 ] [ 1 ] <> M then
67598: LD_VAR 0 7
67602: PUSH
67603: LD_INT 1
67605: ARRAY
67606: PUSH
67607: LD_INT 1
67609: ARRAY
67610: PUSH
67611: LD_STRING M
67613: NONEQUAL
67614: IFFALSE 67618
// exit ;
67616: GO 67684
// x := task [ 1 ] [ 2 ] ;
67618: LD_ADDR_VAR 0 5
67622: PUSH
67623: LD_VAR 0 7
67627: PUSH
67628: LD_INT 1
67630: ARRAY
67631: PUSH
67632: LD_INT 2
67634: ARRAY
67635: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67636: LD_ADDR_VAR 0 6
67640: PUSH
67641: LD_VAR 0 7
67645: PUSH
67646: LD_INT 1
67648: ARRAY
67649: PUSH
67650: LD_INT 3
67652: ARRAY
67653: ST_TO_ADDR
// if InArea ( x , y , area ) then
67654: LD_VAR 0 5
67658: PPUSH
67659: LD_VAR 0 6
67663: PPUSH
67664: LD_VAR 0 2
67668: PPUSH
67669: CALL_OW 309
67673: IFFALSE 67684
// ComStop ( unit ) ;
67675: LD_VAR 0 1
67679: PPUSH
67680: CALL_OW 141
// end ;
67684: LD_VAR 0 4
67688: RET
// export function Abs ( value ) ; begin
67689: LD_INT 0
67691: PPUSH
// result := value ;
67692: LD_ADDR_VAR 0 2
67696: PUSH
67697: LD_VAR 0 1
67701: ST_TO_ADDR
// if value < 0 then
67702: LD_VAR 0 1
67706: PUSH
67707: LD_INT 0
67709: LESS
67710: IFFALSE 67727
// result := value * - 1 ;
67712: LD_ADDR_VAR 0 2
67716: PUSH
67717: LD_VAR 0 1
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: MUL
67726: ST_TO_ADDR
// end ;
67727: LD_VAR 0 2
67731: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67732: LD_INT 0
67734: PPUSH
67735: PPUSH
67736: PPUSH
67737: PPUSH
67738: PPUSH
67739: PPUSH
67740: PPUSH
67741: PPUSH
// if not unit or not building then
67742: LD_VAR 0 1
67746: NOT
67747: IFTRUE 67756
67749: PUSH
67750: LD_VAR 0 2
67754: NOT
67755: OR
67756: IFFALSE 67760
// exit ;
67758: GO 67988
// x := GetX ( building ) ;
67760: LD_ADDR_VAR 0 4
67764: PUSH
67765: LD_VAR 0 2
67769: PPUSH
67770: CALL_OW 250
67774: ST_TO_ADDR
// y := GetY ( building ) ;
67775: LD_ADDR_VAR 0 6
67779: PUSH
67780: LD_VAR 0 2
67784: PPUSH
67785: CALL_OW 251
67789: ST_TO_ADDR
// d := GetDir ( building ) ;
67790: LD_ADDR_VAR 0 8
67794: PUSH
67795: LD_VAR 0 2
67799: PPUSH
67800: CALL_OW 254
67804: ST_TO_ADDR
// r := 4 ;
67805: LD_ADDR_VAR 0 9
67809: PUSH
67810: LD_INT 4
67812: ST_TO_ADDR
// for i := 1 to 5 do
67813: LD_ADDR_VAR 0 10
67817: PUSH
67818: DOUBLE
67819: LD_INT 1
67821: DEC
67822: ST_TO_ADDR
67823: LD_INT 5
67825: PUSH
67826: FOR_TO
67827: IFFALSE 67986
// begin _x := ShiftX ( x , d , r + i ) ;
67829: LD_ADDR_VAR 0 5
67833: PUSH
67834: LD_VAR 0 4
67838: PPUSH
67839: LD_VAR 0 8
67843: PPUSH
67844: LD_VAR 0 9
67848: PUSH
67849: LD_VAR 0 10
67853: PLUS
67854: PPUSH
67855: CALL_OW 272
67859: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67860: LD_ADDR_VAR 0 7
67864: PUSH
67865: LD_VAR 0 6
67869: PPUSH
67870: LD_VAR 0 8
67874: PPUSH
67875: LD_VAR 0 9
67879: PUSH
67880: LD_VAR 0 10
67884: PLUS
67885: PPUSH
67886: CALL_OW 273
67890: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67891: LD_VAR 0 5
67895: PPUSH
67896: LD_VAR 0 7
67900: PPUSH
67901: CALL_OW 488
67905: IFFALSE 67940
67907: PUSH
67908: LD_VAR 0 5
67912: PPUSH
67913: LD_VAR 0 7
67917: PPUSH
67918: CALL_OW 428
67922: PPUSH
67923: CALL_OW 247
67927: PUSH
67928: LD_INT 3
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: IN
67938: NOT
67939: AND
67940: IFFALSE 67984
// begin ComMoveXY ( unit , _x , _y ) ;
67942: LD_VAR 0 1
67946: PPUSH
67947: LD_VAR 0 5
67951: PPUSH
67952: LD_VAR 0 7
67956: PPUSH
67957: CALL_OW 111
// result := [ _x , _y ] ;
67961: LD_ADDR_VAR 0 3
67965: PUSH
67966: LD_VAR 0 5
67970: PUSH
67971: LD_VAR 0 7
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: ST_TO_ADDR
// exit ;
67980: POP
67981: POP
67982: GO 67988
// end ; end ;
67984: GO 67826
67986: POP
67987: POP
// end ;
67988: LD_VAR 0 3
67992: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67993: LD_INT 0
67995: PPUSH
67996: PPUSH
67997: PPUSH
// result := 0 ;
67998: LD_ADDR_VAR 0 3
68002: PUSH
68003: LD_INT 0
68005: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68006: LD_VAR 0 1
68010: PUSH
68011: LD_INT 0
68013: LESS
68014: IFTRUE 68026
68016: PUSH
68017: LD_VAR 0 1
68021: PUSH
68022: LD_INT 8
68024: GREATER
68025: OR
68026: IFTRUE 68038
68028: PUSH
68029: LD_VAR 0 2
68033: PUSH
68034: LD_INT 0
68036: LESS
68037: OR
68038: IFTRUE 68050
68040: PUSH
68041: LD_VAR 0 2
68045: PUSH
68046: LD_INT 8
68048: GREATER
68049: OR
68050: IFFALSE 68054
// exit ;
68052: GO 68129
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68054: LD_ADDR_VAR 0 4
68058: PUSH
68059: LD_INT 22
68061: PUSH
68062: LD_VAR 0 2
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PPUSH
68071: CALL_OW 69
68075: PUSH
68076: FOR_IN
68077: IFFALSE 68127
// begin un := UnitShoot ( i ) ;
68079: LD_ADDR_VAR 0 5
68083: PUSH
68084: LD_VAR 0 4
68088: PPUSH
68089: CALL_OW 504
68093: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68094: LD_VAR 0 5
68098: PPUSH
68099: CALL_OW 255
68103: PUSH
68104: LD_VAR 0 1
68108: EQUAL
68109: IFFALSE 68125
// begin result := un ;
68111: LD_ADDR_VAR 0 3
68115: PUSH
68116: LD_VAR 0 5
68120: ST_TO_ADDR
// exit ;
68121: POP
68122: POP
68123: GO 68129
// end ; end ;
68125: GO 68076
68127: POP
68128: POP
// end ;
68129: LD_VAR 0 3
68133: RET
// export function GetCargoBay ( units ) ; begin
68134: LD_INT 0
68136: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68137: LD_ADDR_VAR 0 2
68141: PUSH
68142: LD_VAR 0 1
68146: PPUSH
68147: LD_INT 2
68149: PUSH
68150: LD_INT 34
68152: PUSH
68153: LD_INT 12
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 34
68162: PUSH
68163: LD_INT 51
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 34
68172: PUSH
68173: LD_INT 32
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 34
68182: PUSH
68183: LD_INT 89
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: PPUSH
68197: CALL_OW 72
68201: ST_TO_ADDR
// end ;
68202: LD_VAR 0 2
68206: RET
// export function Negate ( value ) ; begin
68207: LD_INT 0
68209: PPUSH
// result := not value ;
68210: LD_ADDR_VAR 0 2
68214: PUSH
68215: LD_VAR 0 1
68219: NOT
68220: ST_TO_ADDR
// end ;
68221: LD_VAR 0 2
68225: RET
// export function Inc ( value ) ; begin
68226: LD_INT 0
68228: PPUSH
// result := value + 1 ;
68229: LD_ADDR_VAR 0 2
68233: PUSH
68234: LD_VAR 0 1
68238: PUSH
68239: LD_INT 1
68241: PLUS
68242: ST_TO_ADDR
// end ;
68243: LD_VAR 0 2
68247: RET
// export function Dec ( value ) ; begin
68248: LD_INT 0
68250: PPUSH
// result := value - 1 ;
68251: LD_ADDR_VAR 0 2
68255: PUSH
68256: LD_VAR 0 1
68260: PUSH
68261: LD_INT 1
68263: MINUS
68264: ST_TO_ADDR
// end ;
68265: LD_VAR 0 2
68269: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68270: LD_INT 0
68272: PPUSH
68273: PPUSH
68274: PPUSH
68275: PPUSH
68276: PPUSH
68277: PPUSH
68278: PPUSH
68279: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68280: LD_VAR 0 1
68284: PPUSH
68285: LD_VAR 0 2
68289: PPUSH
68290: CALL_OW 488
68294: NOT
68295: IFTRUE 68314
68297: PUSH
68298: LD_VAR 0 3
68302: PPUSH
68303: LD_VAR 0 4
68307: PPUSH
68308: CALL_OW 488
68312: NOT
68313: OR
68314: IFFALSE 68327
// begin result := - 1 ;
68316: LD_ADDR_VAR 0 5
68320: PUSH
68321: LD_INT 1
68323: NEG
68324: ST_TO_ADDR
// exit ;
68325: GO 68562
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68327: LD_ADDR_VAR 0 12
68331: PUSH
68332: LD_VAR 0 1
68336: PPUSH
68337: LD_VAR 0 2
68341: PPUSH
68342: LD_VAR 0 3
68346: PPUSH
68347: LD_VAR 0 4
68351: PPUSH
68352: CALL 67398 0 4
68356: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68357: LD_ADDR_VAR 0 11
68361: PUSH
68362: LD_VAR 0 1
68366: PPUSH
68367: LD_VAR 0 2
68371: PPUSH
68372: LD_VAR 0 12
68376: PUSH
68377: LD_INT 1
68379: ARRAY
68380: PPUSH
68381: LD_VAR 0 12
68385: PUSH
68386: LD_INT 2
68388: ARRAY
68389: PPUSH
68390: CALL_OW 298
68394: ST_TO_ADDR
// distance := 9999 ;
68395: LD_ADDR_VAR 0 10
68399: PUSH
68400: LD_INT 9999
68402: ST_TO_ADDR
// for i := 0 to 5 do
68403: LD_ADDR_VAR 0 6
68407: PUSH
68408: DOUBLE
68409: LD_INT 0
68411: DEC
68412: ST_TO_ADDR
68413: LD_INT 5
68415: PUSH
68416: FOR_TO
68417: IFFALSE 68560
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68419: LD_ADDR_VAR 0 7
68423: PUSH
68424: LD_VAR 0 1
68428: PPUSH
68429: LD_VAR 0 6
68433: PPUSH
68434: LD_VAR 0 11
68438: PPUSH
68439: CALL_OW 272
68443: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68444: LD_ADDR_VAR 0 8
68448: PUSH
68449: LD_VAR 0 2
68453: PPUSH
68454: LD_VAR 0 6
68458: PPUSH
68459: LD_VAR 0 11
68463: PPUSH
68464: CALL_OW 273
68468: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68469: LD_VAR 0 7
68473: PPUSH
68474: LD_VAR 0 8
68478: PPUSH
68479: CALL_OW 488
68483: NOT
68484: IFFALSE 68488
// continue ;
68486: GO 68416
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68488: LD_ADDR_VAR 0 9
68492: PUSH
68493: LD_VAR 0 12
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PPUSH
68502: LD_VAR 0 12
68506: PUSH
68507: LD_INT 2
68509: ARRAY
68510: PPUSH
68511: LD_VAR 0 7
68515: PPUSH
68516: LD_VAR 0 8
68520: PPUSH
68521: CALL_OW 298
68525: ST_TO_ADDR
// if tmp < distance then
68526: LD_VAR 0 9
68530: PUSH
68531: LD_VAR 0 10
68535: LESS
68536: IFFALSE 68558
// begin result := i ;
68538: LD_ADDR_VAR 0 5
68542: PUSH
68543: LD_VAR 0 6
68547: ST_TO_ADDR
// distance := tmp ;
68548: LD_ADDR_VAR 0 10
68552: PUSH
68553: LD_VAR 0 9
68557: ST_TO_ADDR
// end ; end ;
68558: GO 68416
68560: POP
68561: POP
// end ;
68562: LD_VAR 0 5
68566: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68567: LD_INT 0
68569: PPUSH
68570: PPUSH
// if not driver or not IsInUnit ( driver ) then
68571: LD_VAR 0 1
68575: NOT
68576: IFTRUE 68590
68578: PUSH
68579: LD_VAR 0 1
68583: PPUSH
68584: CALL_OW 310
68588: NOT
68589: OR
68590: IFFALSE 68594
// exit ;
68592: GO 68684
// vehicle := IsInUnit ( driver ) ;
68594: LD_ADDR_VAR 0 3
68598: PUSH
68599: LD_VAR 0 1
68603: PPUSH
68604: CALL_OW 310
68608: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68609: LD_VAR 0 1
68613: PPUSH
68614: LD_STRING \
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: LD_INT 0
68622: PUSH
68623: LD_INT 0
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 0
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: PUSH
68644: LD_STRING E
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: LD_INT 0
68652: PUSH
68653: LD_VAR 0 3
68657: PUSH
68658: LD_INT 0
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: LD_INT 0
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PPUSH
68680: CALL_OW 446
// end ;
68684: LD_VAR 0 2
68688: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68689: LD_INT 0
68691: PPUSH
68692: PPUSH
// if not driver or not IsInUnit ( driver ) then
68693: LD_VAR 0 1
68697: NOT
68698: IFTRUE 68712
68700: PUSH
68701: LD_VAR 0 1
68705: PPUSH
68706: CALL_OW 310
68710: NOT
68711: OR
68712: IFFALSE 68716
// exit ;
68714: GO 68806
// vehicle := IsInUnit ( driver ) ;
68716: LD_ADDR_VAR 0 3
68720: PUSH
68721: LD_VAR 0 1
68725: PPUSH
68726: CALL_OW 310
68730: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68731: LD_VAR 0 1
68735: PPUSH
68736: LD_STRING \
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: LD_INT 0
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: PUSH
68766: LD_STRING E
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: LD_VAR 0 3
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_INT 0
68785: PUSH
68786: LD_INT 0
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PPUSH
68802: CALL_OW 447
// end ;
68806: LD_VAR 0 2
68810: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68811: LD_INT 0
68813: PPUSH
68814: PPUSH
68815: PPUSH
// tmp := [ ] ;
68816: LD_ADDR_VAR 0 5
68820: PUSH
68821: EMPTY
68822: ST_TO_ADDR
// for i in units do
68823: LD_ADDR_VAR 0 4
68827: PUSH
68828: LD_VAR 0 1
68832: PUSH
68833: FOR_IN
68834: IFFALSE 68872
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68836: LD_ADDR_VAR 0 5
68840: PUSH
68841: LD_VAR 0 5
68845: PPUSH
68846: LD_VAR 0 5
68850: PUSH
68851: LD_INT 1
68853: PLUS
68854: PPUSH
68855: LD_VAR 0 4
68859: PPUSH
68860: CALL_OW 256
68864: PPUSH
68865: CALL_OW 2
68869: ST_TO_ADDR
68870: GO 68833
68872: POP
68873: POP
// if not tmp then
68874: LD_VAR 0 5
68878: NOT
68879: IFFALSE 68883
// exit ;
68881: GO 68931
// if asc then
68883: LD_VAR 0 2
68887: IFFALSE 68911
// result := SortListByListAsc ( units , tmp ) else
68889: LD_ADDR_VAR 0 3
68893: PUSH
68894: LD_VAR 0 1
68898: PPUSH
68899: LD_VAR 0 5
68903: PPUSH
68904: CALL_OW 76
68908: ST_TO_ADDR
68909: GO 68931
// result := SortListByListDesc ( units , tmp ) ;
68911: LD_ADDR_VAR 0 3
68915: PUSH
68916: LD_VAR 0 1
68920: PPUSH
68921: LD_VAR 0 5
68925: PPUSH
68926: CALL_OW 77
68930: ST_TO_ADDR
// end ;
68931: LD_VAR 0 3
68935: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68936: LD_INT 0
68938: PPUSH
68939: PPUSH
// task := GetTaskList ( mech ) ;
68940: LD_ADDR_VAR 0 4
68944: PUSH
68945: LD_VAR 0 1
68949: PPUSH
68950: CALL_OW 437
68954: ST_TO_ADDR
// if not task then
68955: LD_VAR 0 4
68959: NOT
68960: IFFALSE 68964
// exit ;
68962: GO 69008
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68964: LD_ADDR_VAR 0 3
68968: PUSH
68969: LD_VAR 0 4
68973: PUSH
68974: LD_INT 1
68976: ARRAY
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PUSH
68982: LD_STRING r
68984: EQUAL
68985: IFFALSE 69007
68987: PUSH
68988: LD_VAR 0 4
68992: PUSH
68993: LD_INT 1
68995: ARRAY
68996: PUSH
68997: LD_INT 4
68999: ARRAY
69000: PUSH
69001: LD_VAR 0 2
69005: EQUAL
69006: AND
69007: ST_TO_ADDR
// end ;
69008: LD_VAR 0 3
69012: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69013: LD_INT 0
69015: PPUSH
// SetDir ( unit , d ) ;
69016: LD_VAR 0 1
69020: PPUSH
69021: LD_VAR 0 4
69025: PPUSH
69026: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
69030: LD_ADDR_VAR 0 6
69034: PUSH
69035: LD_VAR 0 1
69039: PPUSH
69040: LD_VAR 0 2
69044: PPUSH
69045: LD_VAR 0 3
69049: PPUSH
69050: LD_VAR 0 5
69054: PPUSH
69055: CALL_OW 48
69059: ST_TO_ADDR
// end ;
69060: LD_VAR 0 6
69064: RET
// export function ToNaturalNumber ( number ) ; begin
69065: LD_INT 0
69067: PPUSH
// result := number div 1 ;
69068: LD_ADDR_VAR 0 2
69072: PUSH
69073: LD_VAR 0 1
69077: PUSH
69078: LD_INT 1
69080: DIV
69081: ST_TO_ADDR
// if number < 0 then
69082: LD_VAR 0 1
69086: PUSH
69087: LD_INT 0
69089: LESS
69090: IFFALSE 69100
// result := 0 ;
69092: LD_ADDR_VAR 0 2
69096: PUSH
69097: LD_INT 0
69099: ST_TO_ADDR
// end ;
69100: LD_VAR 0 2
69104: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
69105: LD_INT 0
69107: PPUSH
69108: PPUSH
69109: PPUSH
// if not buildings then
69110: LD_VAR 0 1
69114: NOT
69115: IFFALSE 69119
// exit ;
69117: GO 69234
// tmp := [ ] ;
69119: LD_ADDR_VAR 0 5
69123: PUSH
69124: EMPTY
69125: ST_TO_ADDR
// for b in buildings do
69126: LD_ADDR_VAR 0 4
69130: PUSH
69131: LD_VAR 0 1
69135: PUSH
69136: FOR_IN
69137: IFFALSE 69175
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
69139: LD_ADDR_VAR 0 5
69143: PUSH
69144: LD_VAR 0 5
69148: PPUSH
69149: LD_VAR 0 5
69153: PUSH
69154: LD_INT 1
69156: PLUS
69157: PPUSH
69158: LD_VAR 0 4
69162: PPUSH
69163: CALL_OW 266
69167: PPUSH
69168: CALL_OW 1
69172: ST_TO_ADDR
69173: GO 69136
69175: POP
69176: POP
// if not tmp then
69177: LD_VAR 0 5
69181: NOT
69182: IFFALSE 69186
// exit ;
69184: GO 69234
// if asc then
69186: LD_VAR 0 2
69190: IFFALSE 69214
// result := SortListByListAsc ( buildings , tmp ) else
69192: LD_ADDR_VAR 0 3
69196: PUSH
69197: LD_VAR 0 1
69201: PPUSH
69202: LD_VAR 0 5
69206: PPUSH
69207: CALL_OW 76
69211: ST_TO_ADDR
69212: GO 69234
// result := SortListByListDesc ( buildings , tmp ) ;
69214: LD_ADDR_VAR 0 3
69218: PUSH
69219: LD_VAR 0 1
69223: PPUSH
69224: LD_VAR 0 5
69228: PPUSH
69229: CALL_OW 77
69233: ST_TO_ADDR
// end ;
69234: LD_VAR 0 3
69238: RET
// export function SortByClass ( units , class ) ; var un ; begin
69239: LD_INT 0
69241: PPUSH
69242: PPUSH
// if not units or not class then
69243: LD_VAR 0 1
69247: NOT
69248: IFTRUE 69257
69250: PUSH
69251: LD_VAR 0 2
69255: NOT
69256: OR
69257: IFFALSE 69261
// exit ;
69259: GO 69356
// result := [ ] ;
69261: LD_ADDR_VAR 0 3
69265: PUSH
69266: EMPTY
69267: ST_TO_ADDR
// for un in units do
69268: LD_ADDR_VAR 0 4
69272: PUSH
69273: LD_VAR 0 1
69277: PUSH
69278: FOR_IN
69279: IFFALSE 69354
// if GetClass ( un ) = class then
69281: LD_VAR 0 4
69285: PPUSH
69286: CALL_OW 257
69290: PUSH
69291: LD_VAR 0 2
69295: EQUAL
69296: IFFALSE 69323
// result := Insert ( result , 1 , un ) else
69298: LD_ADDR_VAR 0 3
69302: PUSH
69303: LD_VAR 0 3
69307: PPUSH
69308: LD_INT 1
69310: PPUSH
69311: LD_VAR 0 4
69315: PPUSH
69316: CALL_OW 2
69320: ST_TO_ADDR
69321: GO 69352
// result := Replace ( result , result + 1 , un ) ;
69323: LD_ADDR_VAR 0 3
69327: PUSH
69328: LD_VAR 0 3
69332: PPUSH
69333: LD_VAR 0 3
69337: PUSH
69338: LD_INT 1
69340: PLUS
69341: PPUSH
69342: LD_VAR 0 4
69346: PPUSH
69347: CALL_OW 1
69351: ST_TO_ADDR
69352: GO 69278
69354: POP
69355: POP
// end ;
69356: LD_VAR 0 3
69360: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69361: LD_INT 0
69363: PPUSH
69364: PPUSH
69365: PPUSH
69366: PPUSH
69367: PPUSH
69368: PPUSH
69369: PPUSH
// result := [ ] ;
69370: LD_ADDR_VAR 0 4
69374: PUSH
69375: EMPTY
69376: ST_TO_ADDR
// if x - r < 0 then
69377: LD_VAR 0 1
69381: PUSH
69382: LD_VAR 0 3
69386: MINUS
69387: PUSH
69388: LD_INT 0
69390: LESS
69391: IFFALSE 69403
// min_x := 0 else
69393: LD_ADDR_VAR 0 8
69397: PUSH
69398: LD_INT 0
69400: ST_TO_ADDR
69401: GO 69419
// min_x := x - r ;
69403: LD_ADDR_VAR 0 8
69407: PUSH
69408: LD_VAR 0 1
69412: PUSH
69413: LD_VAR 0 3
69417: MINUS
69418: ST_TO_ADDR
// if y - r < 0 then
69419: LD_VAR 0 2
69423: PUSH
69424: LD_VAR 0 3
69428: MINUS
69429: PUSH
69430: LD_INT 0
69432: LESS
69433: IFFALSE 69445
// min_y := 0 else
69435: LD_ADDR_VAR 0 7
69439: PUSH
69440: LD_INT 0
69442: ST_TO_ADDR
69443: GO 69461
// min_y := y - r ;
69445: LD_ADDR_VAR 0 7
69449: PUSH
69450: LD_VAR 0 2
69454: PUSH
69455: LD_VAR 0 3
69459: MINUS
69460: ST_TO_ADDR
// max_x := x + r ;
69461: LD_ADDR_VAR 0 9
69465: PUSH
69466: LD_VAR 0 1
69470: PUSH
69471: LD_VAR 0 3
69475: PLUS
69476: ST_TO_ADDR
// max_y := y + r ;
69477: LD_ADDR_VAR 0 10
69481: PUSH
69482: LD_VAR 0 2
69486: PUSH
69487: LD_VAR 0 3
69491: PLUS
69492: ST_TO_ADDR
// for _x = min_x to max_x do
69493: LD_ADDR_VAR 0 5
69497: PUSH
69498: DOUBLE
69499: LD_VAR 0 8
69503: DEC
69504: ST_TO_ADDR
69505: LD_VAR 0 9
69509: PUSH
69510: FOR_TO
69511: IFFALSE 69612
// for _y = min_y to max_y do
69513: LD_ADDR_VAR 0 6
69517: PUSH
69518: DOUBLE
69519: LD_VAR 0 7
69523: DEC
69524: ST_TO_ADDR
69525: LD_VAR 0 10
69529: PUSH
69530: FOR_TO
69531: IFFALSE 69608
// begin if not ValidHex ( _x , _y ) then
69533: LD_VAR 0 5
69537: PPUSH
69538: LD_VAR 0 6
69542: PPUSH
69543: CALL_OW 488
69547: NOT
69548: IFFALSE 69552
// continue ;
69550: GO 69530
// if GetResourceTypeXY ( _x , _y ) then
69552: LD_VAR 0 5
69556: PPUSH
69557: LD_VAR 0 6
69561: PPUSH
69562: CALL_OW 283
69566: IFFALSE 69606
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69568: LD_ADDR_VAR 0 4
69572: PUSH
69573: LD_VAR 0 4
69577: PPUSH
69578: LD_VAR 0 4
69582: PUSH
69583: LD_INT 1
69585: PLUS
69586: PPUSH
69587: LD_VAR 0 5
69591: PUSH
69592: LD_VAR 0 6
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PPUSH
69601: CALL_OW 1
69605: ST_TO_ADDR
// end ;
69606: GO 69530
69608: POP
69609: POP
69610: GO 69510
69612: POP
69613: POP
// end ;
69614: LD_VAR 0 4
69618: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69619: LD_INT 0
69621: PPUSH
69622: PPUSH
69623: PPUSH
69624: PPUSH
69625: PPUSH
69626: PPUSH
69627: PPUSH
69628: PPUSH
// if not units then
69629: LD_VAR 0 1
69633: NOT
69634: IFFALSE 69638
// exit ;
69636: GO 70170
// result := UnitFilter ( units , [ f_ok ] ) ;
69638: LD_ADDR_VAR 0 3
69642: PUSH
69643: LD_VAR 0 1
69647: PPUSH
69648: LD_INT 50
69650: PUSH
69651: EMPTY
69652: LIST
69653: PPUSH
69654: CALL_OW 72
69658: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69659: LD_ADDR_VAR 0 8
69663: PUSH
69664: LD_VAR 0 1
69668: PUSH
69669: LD_INT 1
69671: ARRAY
69672: PPUSH
69673: CALL_OW 255
69677: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69678: LD_ADDR_VAR 0 10
69682: PUSH
69683: LD_INT 29
69685: PUSH
69686: LD_INT 91
69688: PUSH
69689: LD_INT 49
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: LIST
69696: ST_TO_ADDR
// if not result then
69697: LD_VAR 0 3
69701: NOT
69702: IFFALSE 69706
// exit ;
69704: GO 70170
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69706: LD_ADDR_VAR 0 5
69710: PUSH
69711: LD_INT 81
69713: PUSH
69714: LD_VAR 0 8
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PPUSH
69723: CALL_OW 69
69727: ST_TO_ADDR
// for i in result do
69728: LD_ADDR_VAR 0 4
69732: PUSH
69733: LD_VAR 0 3
69737: PUSH
69738: FOR_IN
69739: IFFALSE 70168
// begin tag := GetTag ( i ) + 1 ;
69741: LD_ADDR_VAR 0 9
69745: PUSH
69746: LD_VAR 0 4
69750: PPUSH
69751: CALL_OW 110
69755: PUSH
69756: LD_INT 1
69758: PLUS
69759: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69760: LD_ADDR_VAR 0 7
69764: PUSH
69765: LD_VAR 0 4
69769: PPUSH
69770: CALL_OW 250
69774: PPUSH
69775: LD_VAR 0 4
69779: PPUSH
69780: CALL_OW 251
69784: PPUSH
69785: LD_INT 4
69787: PPUSH
69788: CALL 69361 0 3
69792: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69793: LD_VAR 0 4
69797: PPUSH
69798: CALL_OW 247
69802: PUSH
69803: LD_INT 2
69805: EQUAL
69806: IFFALSE 69818
69808: PUSH
69809: LD_VAR 0 7
69813: PUSH
69814: LD_INT 2
69816: GREATER
69817: AND
69818: IFFALSE 69838
69820: PUSH
69821: LD_VAR 0 4
69825: PPUSH
69826: CALL_OW 264
69830: PUSH
69831: LD_VAR 0 10
69835: IN
69836: NOT
69837: AND
69838: IFFALSE 69877
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69840: LD_VAR 0 4
69844: PPUSH
69845: LD_VAR 0 7
69849: PUSH
69850: LD_INT 1
69852: ARRAY
69853: PUSH
69854: LD_INT 1
69856: ARRAY
69857: PPUSH
69858: LD_VAR 0 7
69862: PUSH
69863: LD_INT 1
69865: ARRAY
69866: PUSH
69867: LD_INT 2
69869: ARRAY
69870: PPUSH
69871: CALL_OW 116
69875: GO 70166
// if path > tag then
69877: LD_VAR 0 2
69881: PUSH
69882: LD_VAR 0 9
69886: GREATER
69887: IFFALSE 70095
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69889: LD_ADDR_VAR 0 6
69893: PUSH
69894: LD_VAR 0 5
69898: PPUSH
69899: LD_INT 91
69901: PUSH
69902: LD_VAR 0 4
69906: PUSH
69907: LD_INT 8
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: LIST
69914: PPUSH
69915: CALL_OW 72
69919: ST_TO_ADDR
// if nearEnemy then
69920: LD_VAR 0 6
69924: IFFALSE 69993
// begin if GetWeapon ( i ) = ru_time_lapser then
69926: LD_VAR 0 4
69930: PPUSH
69931: CALL_OW 264
69935: PUSH
69936: LD_INT 49
69938: EQUAL
69939: IFFALSE 69967
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69941: LD_VAR 0 4
69945: PPUSH
69946: LD_VAR 0 6
69950: PPUSH
69951: LD_VAR 0 4
69955: PPUSH
69956: CALL_OW 74
69960: PPUSH
69961: CALL_OW 112
69965: GO 69991
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69967: LD_VAR 0 4
69971: PPUSH
69972: LD_VAR 0 6
69976: PPUSH
69977: LD_VAR 0 4
69981: PPUSH
69982: CALL_OW 74
69986: PPUSH
69987: CALL 71251 0 2
// end else
69991: GO 70093
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69993: LD_VAR 0 4
69997: PPUSH
69998: LD_VAR 0 2
70002: PUSH
70003: LD_VAR 0 9
70007: ARRAY
70008: PUSH
70009: LD_INT 1
70011: ARRAY
70012: PPUSH
70013: LD_VAR 0 2
70017: PUSH
70018: LD_VAR 0 9
70022: ARRAY
70023: PUSH
70024: LD_INT 2
70026: ARRAY
70027: PPUSH
70028: CALL_OW 297
70032: PUSH
70033: LD_INT 6
70035: GREATER
70036: IFFALSE 70079
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70038: LD_VAR 0 4
70042: PPUSH
70043: LD_VAR 0 2
70047: PUSH
70048: LD_VAR 0 9
70052: ARRAY
70053: PUSH
70054: LD_INT 1
70056: ARRAY
70057: PPUSH
70058: LD_VAR 0 2
70062: PUSH
70063: LD_VAR 0 9
70067: ARRAY
70068: PUSH
70069: LD_INT 2
70071: ARRAY
70072: PPUSH
70073: CALL_OW 114
70077: GO 70093
// SetTag ( i , tag ) ;
70079: LD_VAR 0 4
70083: PPUSH
70084: LD_VAR 0 9
70088: PPUSH
70089: CALL_OW 109
// end else
70093: GO 70166
// if enemy then
70095: LD_VAR 0 5
70099: IFFALSE 70166
// begin if GetWeapon ( i ) = ru_time_lapser then
70101: LD_VAR 0 4
70105: PPUSH
70106: CALL_OW 264
70110: PUSH
70111: LD_INT 49
70113: EQUAL
70114: IFFALSE 70142
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70116: LD_VAR 0 4
70120: PPUSH
70121: LD_VAR 0 5
70125: PPUSH
70126: LD_VAR 0 4
70130: PPUSH
70131: CALL_OW 74
70135: PPUSH
70136: CALL_OW 112
70140: GO 70166
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70142: LD_VAR 0 4
70146: PPUSH
70147: LD_VAR 0 5
70151: PPUSH
70152: LD_VAR 0 4
70156: PPUSH
70157: CALL_OW 74
70161: PPUSH
70162: CALL 71251 0 2
// end ; end ;
70166: GO 69738
70168: POP
70169: POP
// end ;
70170: LD_VAR 0 3
70174: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70175: LD_INT 0
70177: PPUSH
70178: PPUSH
70179: PPUSH
// if not unit or IsInUnit ( unit ) then
70180: LD_VAR 0 1
70184: NOT
70185: IFTRUE 70198
70187: PUSH
70188: LD_VAR 0 1
70192: PPUSH
70193: CALL_OW 310
70197: OR
70198: IFFALSE 70202
// exit ;
70200: GO 70293
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70202: LD_ADDR_VAR 0 4
70206: PUSH
70207: LD_VAR 0 1
70211: PPUSH
70212: CALL_OW 250
70216: PPUSH
70217: LD_VAR 0 2
70221: PPUSH
70222: LD_INT 1
70224: PPUSH
70225: CALL_OW 272
70229: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70230: LD_ADDR_VAR 0 5
70234: PUSH
70235: LD_VAR 0 1
70239: PPUSH
70240: CALL_OW 251
70244: PPUSH
70245: LD_VAR 0 2
70249: PPUSH
70250: LD_INT 1
70252: PPUSH
70253: CALL_OW 273
70257: ST_TO_ADDR
// if ValidHex ( x , y ) then
70258: LD_VAR 0 4
70262: PPUSH
70263: LD_VAR 0 5
70267: PPUSH
70268: CALL_OW 488
70272: IFFALSE 70293
// ComTurnXY ( unit , x , y ) ;
70274: LD_VAR 0 1
70278: PPUSH
70279: LD_VAR 0 4
70283: PPUSH
70284: LD_VAR 0 5
70288: PPUSH
70289: CALL_OW 118
// end ;
70293: LD_VAR 0 3
70297: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70298: LD_INT 0
70300: PPUSH
70301: PPUSH
// result := false ;
70302: LD_ADDR_VAR 0 3
70306: PUSH
70307: LD_INT 0
70309: ST_TO_ADDR
// if not units then
70310: LD_VAR 0 2
70314: NOT
70315: IFFALSE 70319
// exit ;
70317: GO 70364
// for i in units do
70319: LD_ADDR_VAR 0 4
70323: PUSH
70324: LD_VAR 0 2
70328: PUSH
70329: FOR_IN
70330: IFFALSE 70362
// if See ( side , i ) then
70332: LD_VAR 0 1
70336: PPUSH
70337: LD_VAR 0 4
70341: PPUSH
70342: CALL_OW 292
70346: IFFALSE 70360
// begin result := true ;
70348: LD_ADDR_VAR 0 3
70352: PUSH
70353: LD_INT 1
70355: ST_TO_ADDR
// exit ;
70356: POP
70357: POP
70358: GO 70364
// end ;
70360: GO 70329
70362: POP
70363: POP
// end ;
70364: LD_VAR 0 3
70368: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70369: LD_INT 0
70371: PPUSH
70372: PPUSH
70373: PPUSH
70374: PPUSH
// if not unit or not points then
70375: LD_VAR 0 1
70379: NOT
70380: IFTRUE 70389
70382: PUSH
70383: LD_VAR 0 2
70387: NOT
70388: OR
70389: IFFALSE 70393
// exit ;
70391: GO 70483
// dist := 99999 ;
70393: LD_ADDR_VAR 0 5
70397: PUSH
70398: LD_INT 99999
70400: ST_TO_ADDR
// for i in points do
70401: LD_ADDR_VAR 0 4
70405: PUSH
70406: LD_VAR 0 2
70410: PUSH
70411: FOR_IN
70412: IFFALSE 70481
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70414: LD_ADDR_VAR 0 6
70418: PUSH
70419: LD_VAR 0 1
70423: PPUSH
70424: LD_VAR 0 4
70428: PUSH
70429: LD_INT 1
70431: ARRAY
70432: PPUSH
70433: LD_VAR 0 4
70437: PUSH
70438: LD_INT 2
70440: ARRAY
70441: PPUSH
70442: CALL_OW 297
70446: ST_TO_ADDR
// if tmpDist < dist then
70447: LD_VAR 0 6
70451: PUSH
70452: LD_VAR 0 5
70456: LESS
70457: IFFALSE 70479
// begin result := i ;
70459: LD_ADDR_VAR 0 3
70463: PUSH
70464: LD_VAR 0 4
70468: ST_TO_ADDR
// dist := tmpDist ;
70469: LD_ADDR_VAR 0 5
70473: PUSH
70474: LD_VAR 0 6
70478: ST_TO_ADDR
// end ; end ;
70479: GO 70411
70481: POP
70482: POP
// end ;
70483: LD_VAR 0 3
70487: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70488: LD_INT 0
70490: PPUSH
// uc_side := side ;
70491: LD_ADDR_OWVAR 20
70495: PUSH
70496: LD_VAR 0 1
70500: ST_TO_ADDR
// uc_nation := 3 ;
70501: LD_ADDR_OWVAR 21
70505: PUSH
70506: LD_INT 3
70508: ST_TO_ADDR
// vc_chassis := 25 ;
70509: LD_ADDR_OWVAR 37
70513: PUSH
70514: LD_INT 25
70516: ST_TO_ADDR
// vc_engine := engine_siberite ;
70517: LD_ADDR_OWVAR 39
70521: PUSH
70522: LD_INT 3
70524: ST_TO_ADDR
// vc_control := control_computer ;
70525: LD_ADDR_OWVAR 38
70529: PUSH
70530: LD_INT 3
70532: ST_TO_ADDR
// vc_weapon := 59 ;
70533: LD_ADDR_OWVAR 40
70537: PUSH
70538: LD_INT 59
70540: ST_TO_ADDR
// result := CreateVehicle ;
70541: LD_ADDR_VAR 0 5
70545: PUSH
70546: CALL_OW 45
70550: ST_TO_ADDR
// SetDir ( result , d ) ;
70551: LD_VAR 0 5
70555: PPUSH
70556: LD_VAR 0 4
70560: PPUSH
70561: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70565: LD_VAR 0 5
70569: PPUSH
70570: LD_VAR 0 2
70574: PPUSH
70575: LD_VAR 0 3
70579: PPUSH
70580: LD_INT 0
70582: PPUSH
70583: CALL_OW 48
// end ;
70587: LD_VAR 0 5
70591: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70592: LD_INT 0
70594: PPUSH
70595: PPUSH
70596: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70597: LD_ADDR_VAR 0 2
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: LD_INT 0
70607: PUSH
70608: LD_INT 0
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70620: LD_VAR 0 1
70624: NOT
70625: IFTRUE 70658
70627: PUSH
70628: LD_VAR 0 1
70632: PPUSH
70633: CALL_OW 264
70637: PUSH
70638: LD_INT 12
70640: PUSH
70641: LD_INT 51
70643: PUSH
70644: LD_INT 32
70646: PUSH
70647: LD_INT 89
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: IN
70656: NOT
70657: OR
70658: IFFALSE 70662
// exit ;
70660: GO 70760
// for i := 1 to 3 do
70662: LD_ADDR_VAR 0 3
70666: PUSH
70667: DOUBLE
70668: LD_INT 1
70670: DEC
70671: ST_TO_ADDR
70672: LD_INT 3
70674: PUSH
70675: FOR_TO
70676: IFFALSE 70758
// begin tmp := GetCargo ( cargo , i ) ;
70678: LD_ADDR_VAR 0 4
70682: PUSH
70683: LD_VAR 0 1
70687: PPUSH
70688: LD_VAR 0 3
70692: PPUSH
70693: CALL_OW 289
70697: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70698: LD_ADDR_VAR 0 2
70702: PUSH
70703: LD_VAR 0 2
70707: PPUSH
70708: LD_VAR 0 3
70712: PPUSH
70713: LD_VAR 0 4
70717: PPUSH
70718: CALL_OW 1
70722: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70723: LD_ADDR_VAR 0 2
70727: PUSH
70728: LD_VAR 0 2
70732: PPUSH
70733: LD_INT 4
70735: PPUSH
70736: LD_VAR 0 2
70740: PUSH
70741: LD_INT 4
70743: ARRAY
70744: PUSH
70745: LD_VAR 0 4
70749: PLUS
70750: PPUSH
70751: CALL_OW 1
70755: ST_TO_ADDR
// end ;
70756: GO 70675
70758: POP
70759: POP
// end ;
70760: LD_VAR 0 2
70764: RET
// export function Length ( array ) ; begin
70765: LD_INT 0
70767: PPUSH
// result := array + 0 ;
70768: LD_ADDR_VAR 0 2
70772: PUSH
70773: LD_VAR 0 1
70777: PUSH
70778: LD_INT 0
70780: PLUS
70781: ST_TO_ADDR
// end ;
70782: LD_VAR 0 2
70786: RET
// export function PrepareArray ( array ) ; begin
70787: LD_INT 0
70789: PPUSH
// result := array diff 0 ;
70790: LD_ADDR_VAR 0 2
70794: PUSH
70795: LD_VAR 0 1
70799: PUSH
70800: LD_INT 0
70802: DIFF
70803: ST_TO_ADDR
// if not result [ 1 ] then
70804: LD_VAR 0 2
70808: PUSH
70809: LD_INT 1
70811: ARRAY
70812: NOT
70813: IFFALSE 70833
// result := Delete ( result , 1 ) ;
70815: LD_ADDR_VAR 0 2
70819: PUSH
70820: LD_VAR 0 2
70824: PPUSH
70825: LD_INT 1
70827: PPUSH
70828: CALL_OW 3
70832: ST_TO_ADDR
// end ;
70833: LD_VAR 0 2
70837: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70838: LD_INT 0
70840: PPUSH
70841: PPUSH
70842: PPUSH
70843: PPUSH
// sibRocketRange := 25 ;
70844: LD_ADDR_VAR 0 6
70848: PUSH
70849: LD_INT 25
70851: ST_TO_ADDR
// result := false ;
70852: LD_ADDR_VAR 0 4
70856: PUSH
70857: LD_INT 0
70859: ST_TO_ADDR
// for i := 0 to 5 do
70860: LD_ADDR_VAR 0 5
70864: PUSH
70865: DOUBLE
70866: LD_INT 0
70868: DEC
70869: ST_TO_ADDR
70870: LD_INT 5
70872: PUSH
70873: FOR_TO
70874: IFFALSE 70941
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70876: LD_VAR 0 1
70880: PPUSH
70881: LD_VAR 0 5
70885: PPUSH
70886: LD_VAR 0 6
70890: PPUSH
70891: CALL_OW 272
70895: PPUSH
70896: LD_VAR 0 2
70900: PPUSH
70901: LD_VAR 0 5
70905: PPUSH
70906: LD_VAR 0 6
70910: PPUSH
70911: CALL_OW 273
70915: PPUSH
70916: LD_VAR 0 3
70920: PPUSH
70921: CALL_OW 309
70925: IFFALSE 70939
// begin result := true ;
70927: LD_ADDR_VAR 0 4
70931: PUSH
70932: LD_INT 1
70934: ST_TO_ADDR
// exit ;
70935: POP
70936: POP
70937: GO 70943
// end ;
70939: GO 70873
70941: POP
70942: POP
// end ;
70943: LD_VAR 0 4
70947: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70948: LD_INT 0
70950: PPUSH
70951: PPUSH
70952: PPUSH
// if btype = b_depot then
70953: LD_VAR 0 2
70957: PUSH
70958: LD_INT 0
70960: EQUAL
70961: IFFALSE 70973
// begin result := true ;
70963: LD_ADDR_VAR 0 3
70967: PUSH
70968: LD_INT 1
70970: ST_TO_ADDR
// exit ;
70971: GO 71093
// end ; pom := GetBase ( depot ) ;
70973: LD_ADDR_VAR 0 4
70977: PUSH
70978: LD_VAR 0 1
70982: PPUSH
70983: CALL_OW 274
70987: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70988: LD_ADDR_VAR 0 5
70992: PUSH
70993: LD_VAR 0 2
70997: PPUSH
70998: LD_VAR 0 1
71002: PPUSH
71003: CALL_OW 248
71007: PPUSH
71008: CALL_OW 450
71012: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71013: LD_ADDR_VAR 0 3
71017: PUSH
71018: LD_VAR 0 4
71022: PPUSH
71023: LD_INT 1
71025: PPUSH
71026: CALL_OW 275
71030: PUSH
71031: LD_VAR 0 5
71035: PUSH
71036: LD_INT 1
71038: ARRAY
71039: GREATEREQUAL
71040: IFFALSE 71066
71042: PUSH
71043: LD_VAR 0 4
71047: PPUSH
71048: LD_INT 2
71050: PPUSH
71051: CALL_OW 275
71055: PUSH
71056: LD_VAR 0 5
71060: PUSH
71061: LD_INT 2
71063: ARRAY
71064: GREATEREQUAL
71065: AND
71066: IFFALSE 71092
71068: PUSH
71069: LD_VAR 0 4
71073: PPUSH
71074: LD_INT 3
71076: PPUSH
71077: CALL_OW 275
71081: PUSH
71082: LD_VAR 0 5
71086: PUSH
71087: LD_INT 3
71089: ARRAY
71090: GREATEREQUAL
71091: AND
71092: ST_TO_ADDR
// end ;
71093: LD_VAR 0 3
71097: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71098: LD_INT 0
71100: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71101: LD_VAR 0 1
71105: PPUSH
71106: LD_VAR 0 2
71110: PPUSH
71111: LD_INT 0
71113: PPUSH
71114: LD_INT 0
71116: PPUSH
71117: LD_INT 1
71119: PPUSH
71120: LD_INT 0
71122: PPUSH
71123: CALL_OW 587
// end ;
71127: LD_VAR 0 3
71131: RET
// export function CenterOnNow ( unit ) ; begin
71132: LD_INT 0
71134: PPUSH
// result := IsInUnit ( unit ) ;
71135: LD_ADDR_VAR 0 2
71139: PUSH
71140: LD_VAR 0 1
71144: PPUSH
71145: CALL_OW 310
71149: ST_TO_ADDR
// if not result then
71150: LD_VAR 0 2
71154: NOT
71155: IFFALSE 71167
// result := unit ;
71157: LD_ADDR_VAR 0 2
71161: PUSH
71162: LD_VAR 0 1
71166: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71167: LD_VAR 0 1
71171: PPUSH
71172: CALL_OW 87
// end ;
71176: LD_VAR 0 2
71180: RET
// export function ComMoveHex ( unit , hex ) ; begin
71181: LD_INT 0
71183: PPUSH
// if not hex then
71184: LD_VAR 0 2
71188: NOT
71189: IFFALSE 71193
// exit ;
71191: GO 71246
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 1
71200: ARRAY
71201: PPUSH
71202: LD_VAR 0 2
71206: PUSH
71207: LD_INT 2
71209: ARRAY
71210: PPUSH
71211: CALL_OW 428
71215: IFFALSE 71219
// exit ;
71217: GO 71246
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71219: LD_VAR 0 1
71223: PPUSH
71224: LD_VAR 0 2
71228: PUSH
71229: LD_INT 1
71231: ARRAY
71232: PPUSH
71233: LD_VAR 0 2
71237: PUSH
71238: LD_INT 2
71240: ARRAY
71241: PPUSH
71242: CALL_OW 111
// end ;
71246: LD_VAR 0 3
71250: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71251: LD_INT 0
71253: PPUSH
71254: PPUSH
71255: PPUSH
// if not unit or not enemy then
71256: LD_VAR 0 1
71260: NOT
71261: IFTRUE 71270
71263: PUSH
71264: LD_VAR 0 2
71268: NOT
71269: OR
71270: IFFALSE 71274
// exit ;
71272: GO 71400
// x := GetX ( enemy ) ;
71274: LD_ADDR_VAR 0 4
71278: PUSH
71279: LD_VAR 0 2
71283: PPUSH
71284: CALL_OW 250
71288: ST_TO_ADDR
// y := GetY ( enemy ) ;
71289: LD_ADDR_VAR 0 5
71293: PUSH
71294: LD_VAR 0 2
71298: PPUSH
71299: CALL_OW 251
71303: ST_TO_ADDR
// if ValidHex ( x , y ) then
71304: LD_VAR 0 4
71308: PPUSH
71309: LD_VAR 0 5
71313: PPUSH
71314: CALL_OW 488
71318: IFFALSE 71400
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71320: LD_VAR 0 2
71324: PPUSH
71325: CALL_OW 247
71329: PUSH
71330: LD_INT 3
71332: PUSH
71333: LD_INT 2
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: IN
71340: IFTRUE 71363
71342: PUSH
71343: LD_VAR 0 1
71347: PPUSH
71348: CALL_OW 255
71352: PPUSH
71353: LD_VAR 0 2
71357: PPUSH
71358: CALL_OW 292
71362: OR
71363: IFFALSE 71381
// ComAttackUnit ( unit , enemy ) else
71365: LD_VAR 0 1
71369: PPUSH
71370: LD_VAR 0 2
71374: PPUSH
71375: CALL_OW 115
71379: GO 71400
// ComAgressiveMove ( unit , x , y ) ;
71381: LD_VAR 0 1
71385: PPUSH
71386: LD_VAR 0 4
71390: PPUSH
71391: LD_VAR 0 5
71395: PPUSH
71396: CALL_OW 114
// end ;
71400: LD_VAR 0 3
71404: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71405: LD_INT 0
71407: PPUSH
71408: PPUSH
71409: PPUSH
// list := AreaToList ( area , 0 ) ;
71410: LD_ADDR_VAR 0 5
71414: PUSH
71415: LD_VAR 0 1
71419: PPUSH
71420: LD_INT 0
71422: PPUSH
71423: CALL_OW 517
71427: ST_TO_ADDR
// if not list then
71428: LD_VAR 0 5
71432: NOT
71433: IFFALSE 71437
// exit ;
71435: GO 71567
// if all then
71437: LD_VAR 0 2
71441: IFFALSE 71529
// begin for i := 1 to list [ 1 ] do
71443: LD_ADDR_VAR 0 4
71447: PUSH
71448: DOUBLE
71449: LD_INT 1
71451: DEC
71452: ST_TO_ADDR
71453: LD_VAR 0 5
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PUSH
71462: FOR_TO
71463: IFFALSE 71525
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71465: LD_ADDR_VAR 0 3
71469: PUSH
71470: LD_VAR 0 3
71474: PPUSH
71475: LD_VAR 0 3
71479: PUSH
71480: LD_INT 1
71482: PLUS
71483: PPUSH
71484: LD_VAR 0 5
71488: PUSH
71489: LD_INT 1
71491: ARRAY
71492: PUSH
71493: LD_VAR 0 4
71497: ARRAY
71498: PUSH
71499: LD_VAR 0 5
71503: PUSH
71504: LD_INT 2
71506: ARRAY
71507: PUSH
71508: LD_VAR 0 4
71512: ARRAY
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PPUSH
71518: CALL_OW 1
71522: ST_TO_ADDR
71523: GO 71462
71525: POP
71526: POP
// exit ;
71527: GO 71567
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71529: LD_ADDR_VAR 0 3
71533: PUSH
71534: LD_VAR 0 5
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: PUSH
71543: LD_INT 1
71545: ARRAY
71546: PUSH
71547: LD_VAR 0 5
71551: PUSH
71552: LD_INT 2
71554: ARRAY
71555: PUSH
71556: LD_INT 1
71558: ARRAY
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: EMPTY
71565: LIST
71566: ST_TO_ADDR
// end ;
71567: LD_VAR 0 3
71571: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71572: LD_INT 0
71574: PPUSH
71575: PPUSH
// list := AreaToList ( area , 0 ) ;
71576: LD_ADDR_VAR 0 4
71580: PUSH
71581: LD_VAR 0 1
71585: PPUSH
71586: LD_INT 0
71588: PPUSH
71589: CALL_OW 517
71593: ST_TO_ADDR
// if not list then
71594: LD_VAR 0 4
71598: NOT
71599: IFFALSE 71603
// exit ;
71601: GO 71644
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71603: LD_ADDR_VAR 0 3
71607: PUSH
71608: LD_VAR 0 4
71612: PUSH
71613: LD_INT 1
71615: ARRAY
71616: PUSH
71617: LD_INT 1
71619: ARRAY
71620: PUSH
71621: LD_VAR 0 4
71625: PUSH
71626: LD_INT 2
71628: ARRAY
71629: PUSH
71630: LD_INT 1
71632: ARRAY
71633: PUSH
71634: LD_VAR 0 2
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: ST_TO_ADDR
// end ;
71644: LD_VAR 0 3
71648: RET
// export function First ( array ) ; begin
71649: LD_INT 0
71651: PPUSH
// if not array then
71652: LD_VAR 0 1
71656: NOT
71657: IFFALSE 71661
// exit ;
71659: GO 71675
// result := array [ 1 ] ;
71661: LD_ADDR_VAR 0 2
71665: PUSH
71666: LD_VAR 0 1
71670: PUSH
71671: LD_INT 1
71673: ARRAY
71674: ST_TO_ADDR
// end ;
71675: LD_VAR 0 2
71679: RET
// export function Last ( array ) ; begin
71680: LD_INT 0
71682: PPUSH
// if not array then
71683: LD_VAR 0 1
71687: NOT
71688: IFFALSE 71692
// exit ;
71690: GO 71708
// result := array [ array ] ;
71692: LD_ADDR_VAR 0 2
71696: PUSH
71697: LD_VAR 0 1
71701: PUSH
71702: LD_VAR 0 1
71706: ARRAY
71707: ST_TO_ADDR
// end ;
71708: LD_VAR 0 2
71712: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71713: LD_INT 0
71715: PPUSH
71716: PPUSH
// result := [ ] ;
71717: LD_ADDR_VAR 0 5
71721: PUSH
71722: EMPTY
71723: ST_TO_ADDR
// if not array then
71724: LD_VAR 0 1
71728: NOT
71729: IFFALSE 71733
// exit ;
71731: GO 71845
// for i := 1 to array do
71733: LD_ADDR_VAR 0 6
71737: PUSH
71738: DOUBLE
71739: LD_INT 1
71741: DEC
71742: ST_TO_ADDR
71743: LD_VAR 0 1
71747: PUSH
71748: FOR_TO
71749: IFFALSE 71843
// if array [ i ] [ index ] = value then
71751: LD_VAR 0 1
71755: PUSH
71756: LD_VAR 0 6
71760: ARRAY
71761: PUSH
71762: LD_VAR 0 2
71766: ARRAY
71767: PUSH
71768: LD_VAR 0 3
71772: EQUAL
71773: IFFALSE 71841
// begin if indexColumn then
71775: LD_VAR 0 4
71779: IFFALSE 71815
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71781: LD_ADDR_VAR 0 5
71785: PUSH
71786: LD_VAR 0 5
71790: PPUSH
71791: LD_VAR 0 1
71795: PUSH
71796: LD_VAR 0 6
71800: ARRAY
71801: PUSH
71802: LD_VAR 0 4
71806: ARRAY
71807: PPUSH
71808: CALL 66853 0 2
71812: ST_TO_ADDR
71813: GO 71841
// result := Join ( result , array [ i ] ) ;
71815: LD_ADDR_VAR 0 5
71819: PUSH
71820: LD_VAR 0 5
71824: PPUSH
71825: LD_VAR 0 1
71829: PUSH
71830: LD_VAR 0 6
71834: ARRAY
71835: PPUSH
71836: CALL 66853 0 2
71840: ST_TO_ADDR
// end ;
71841: GO 71748
71843: POP
71844: POP
// end ;
71845: LD_VAR 0 5
71849: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71850: LD_INT 0
71852: PPUSH
// if not vehicles or not parkingPoint then
71853: LD_VAR 0 1
71857: NOT
71858: IFTRUE 71867
71860: PUSH
71861: LD_VAR 0 2
71865: NOT
71866: OR
71867: IFFALSE 71871
// exit ;
71869: GO 71969
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71871: LD_ADDR_VAR 0 1
71875: PUSH
71876: LD_VAR 0 1
71880: PPUSH
71881: LD_INT 50
71883: PUSH
71884: EMPTY
71885: LIST
71886: PUSH
71887: LD_INT 3
71889: PUSH
71890: LD_INT 92
71892: PUSH
71893: LD_VAR 0 2
71897: PUSH
71898: LD_INT 1
71900: ARRAY
71901: PUSH
71902: LD_VAR 0 2
71906: PUSH
71907: LD_INT 2
71909: ARRAY
71910: PUSH
71911: LD_INT 8
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PPUSH
71928: CALL_OW 72
71932: ST_TO_ADDR
// if not vehicles then
71933: LD_VAR 0 1
71937: NOT
71938: IFFALSE 71942
// exit ;
71940: GO 71969
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71942: LD_VAR 0 1
71946: PPUSH
71947: LD_VAR 0 2
71951: PUSH
71952: LD_INT 1
71954: ARRAY
71955: PPUSH
71956: LD_VAR 0 2
71960: PUSH
71961: LD_INT 2
71963: ARRAY
71964: PPUSH
71965: CALL_OW 111
// end ;
71969: LD_VAR 0 3
71973: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71974: LD_INT 0
71976: PPUSH
71977: PPUSH
71978: PPUSH
// if not side or not area then
71979: LD_VAR 0 1
71983: NOT
71984: IFTRUE 71993
71986: PUSH
71987: LD_VAR 0 2
71991: NOT
71992: OR
71993: IFFALSE 71997
// exit ;
71995: GO 72116
// tmp := AreaToList ( area , 0 ) ;
71997: LD_ADDR_VAR 0 5
72001: PUSH
72002: LD_VAR 0 2
72006: PPUSH
72007: LD_INT 0
72009: PPUSH
72010: CALL_OW 517
72014: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72015: LD_ADDR_VAR 0 4
72019: PUSH
72020: DOUBLE
72021: LD_INT 1
72023: DEC
72024: ST_TO_ADDR
72025: LD_VAR 0 5
72029: PUSH
72030: LD_INT 1
72032: ARRAY
72033: PUSH
72034: FOR_TO
72035: IFFALSE 72114
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72037: LD_VAR 0 5
72041: PUSH
72042: LD_INT 1
72044: ARRAY
72045: PUSH
72046: LD_VAR 0 4
72050: ARRAY
72051: PPUSH
72052: LD_VAR 0 5
72056: PUSH
72057: LD_INT 2
72059: ARRAY
72060: PUSH
72061: LD_VAR 0 4
72065: ARRAY
72066: PPUSH
72067: CALL_OW 351
72071: IFFALSE 72112
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72073: LD_VAR 0 5
72077: PUSH
72078: LD_INT 1
72080: ARRAY
72081: PUSH
72082: LD_VAR 0 4
72086: ARRAY
72087: PPUSH
72088: LD_VAR 0 5
72092: PUSH
72093: LD_INT 2
72095: ARRAY
72096: PUSH
72097: LD_VAR 0 4
72101: ARRAY
72102: PPUSH
72103: LD_VAR 0 1
72107: PPUSH
72108: CALL_OW 244
// end ;
72112: GO 72034
72114: POP
72115: POP
// end ;
72116: LD_VAR 0 3
72120: RET
// export function UniqueArray ( array ) ; var i ; begin
72121: LD_INT 0
72123: PPUSH
72124: PPUSH
// result := [ ] ;
72125: LD_ADDR_VAR 0 2
72129: PUSH
72130: EMPTY
72131: ST_TO_ADDR
// if not array then
72132: LD_VAR 0 1
72136: NOT
72137: IFFALSE 72141
// exit ;
72139: GO 72202
// for i := 1 to array do
72141: LD_ADDR_VAR 0 3
72145: PUSH
72146: DOUBLE
72147: LD_INT 1
72149: DEC
72150: ST_TO_ADDR
72151: LD_VAR 0 1
72155: PUSH
72156: FOR_TO
72157: IFFALSE 72200
// if not array [ i ] in result then
72159: LD_VAR 0 1
72163: PUSH
72164: LD_VAR 0 3
72168: ARRAY
72169: PUSH
72170: LD_VAR 0 2
72174: IN
72175: NOT
72176: IFFALSE 72198
// result := Join ( result , i ) ;
72178: LD_ADDR_VAR 0 2
72182: PUSH
72183: LD_VAR 0 2
72187: PPUSH
72188: LD_VAR 0 3
72192: PPUSH
72193: CALL 66853 0 2
72197: ST_TO_ADDR
72198: GO 72156
72200: POP
72201: POP
// end ; end_of_file
72202: LD_VAR 0 2
72206: RET
// export globalGameSaveCounter ; every 0 0$1 do
72207: GO 72209
72209: DISABLE
// begin enable ;
72210: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72211: LD_STRING updateTimer(
72213: PUSH
72214: LD_OWVAR 1
72218: STR
72219: PUSH
72220: LD_STRING );
72222: STR
72223: PPUSH
72224: CALL_OW 559
// end ;
72228: END
// every 0 0$1 do
72229: GO 72231
72231: DISABLE
// begin globalGameSaveCounter := 0 ;
72232: LD_ADDR_EXP 65
72236: PUSH
72237: LD_INT 0
72239: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72240: LD_STRING setGameSaveCounter(0)
72242: PPUSH
72243: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72247: LD_STRING initStreamRollete();
72249: PPUSH
72250: CALL_OW 559
// InitStreamMode ;
72254: CALL 73606 0 0
// DefineStreamItems ( false ) ;
72258: LD_INT 0
72260: PPUSH
72261: CALL 74070 0 1
// end ;
72265: END
// export function SOS_MapStart ( ) ; begin
72266: LD_INT 0
72268: PPUSH
// if streamModeActive then
72269: LD_EXP 66
72273: IFFALSE 72282
// DefineStreamItems ( true ) ;
72275: LD_INT 1
72277: PPUSH
72278: CALL 74070 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
72282: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
72284: PPUSH
72285: CALL_OW 559
// UpdateLuaVariables ( ) ;
72289: CALL 72306 0 0
// UpdateFactoryWaypoints ( ) ;
72293: CALL 87192 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72297: CALL 87444 0 0
// end ;
72301: LD_VAR 0 1
72305: RET
// function UpdateLuaVariables ( ) ; begin
72306: LD_INT 0
72308: PPUSH
// if globalGameSaveCounter then
72309: LD_EXP 65
72313: IFFALSE 72347
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72315: LD_ADDR_EXP 65
72319: PUSH
72320: LD_EXP 65
72324: PPUSH
72325: CALL 68226 0 1
72329: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72330: LD_STRING setGameSaveCounter(
72332: PUSH
72333: LD_EXP 65
72337: STR
72338: PUSH
72339: LD_STRING )
72341: STR
72342: PPUSH
72343: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72347: LD_STRING setGameDifficulty(
72349: PUSH
72350: LD_OWVAR 67
72354: STR
72355: PUSH
72356: LD_STRING )
72358: STR
72359: PPUSH
72360: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72364: LD_STRING displayDifficulty(
72366: PUSH
72367: LD_OWVAR 67
72371: STR
72372: PUSH
72373: LD_STRING )
72375: STR
72376: PPUSH
72377: CALL_OW 559
// end ;
72381: LD_VAR 0 1
72385: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72386: LD_INT 0
72388: PPUSH
// if p2 = stream_mode then
72389: LD_VAR 0 2
72393: PUSH
72394: LD_INT 100
72396: EQUAL
72397: IFFALSE 73400
// begin if not StreamModeActive then
72399: LD_EXP 66
72403: NOT
72404: IFFALSE 72414
// StreamModeActive := true ;
72406: LD_ADDR_EXP 66
72410: PUSH
72411: LD_INT 1
72413: ST_TO_ADDR
// if p3 = 0 then
72414: LD_VAR 0 3
72418: PUSH
72419: LD_INT 0
72421: EQUAL
72422: IFFALSE 72428
// InitStreamMode ;
72424: CALL 73606 0 0
// if p3 = 1 then
72428: LD_VAR 0 3
72432: PUSH
72433: LD_INT 1
72435: EQUAL
72436: IFFALSE 72446
// sRocket := true ;
72438: LD_ADDR_EXP 71
72442: PUSH
72443: LD_INT 1
72445: ST_TO_ADDR
// if p3 = 2 then
72446: LD_VAR 0 3
72450: PUSH
72451: LD_INT 2
72453: EQUAL
72454: IFFALSE 72464
// sSpeed := true ;
72456: LD_ADDR_EXP 70
72460: PUSH
72461: LD_INT 1
72463: ST_TO_ADDR
// if p3 = 3 then
72464: LD_VAR 0 3
72468: PUSH
72469: LD_INT 3
72471: EQUAL
72472: IFFALSE 72482
// sEngine := true ;
72474: LD_ADDR_EXP 72
72478: PUSH
72479: LD_INT 1
72481: ST_TO_ADDR
// if p3 = 4 then
72482: LD_VAR 0 3
72486: PUSH
72487: LD_INT 4
72489: EQUAL
72490: IFFALSE 72500
// sSpec := true ;
72492: LD_ADDR_EXP 69
72496: PUSH
72497: LD_INT 1
72499: ST_TO_ADDR
// if p3 = 5 then
72500: LD_VAR 0 3
72504: PUSH
72505: LD_INT 5
72507: EQUAL
72508: IFFALSE 72518
// sLevel := true ;
72510: LD_ADDR_EXP 73
72514: PUSH
72515: LD_INT 1
72517: ST_TO_ADDR
// if p3 = 6 then
72518: LD_VAR 0 3
72522: PUSH
72523: LD_INT 6
72525: EQUAL
72526: IFFALSE 72536
// sArmoury := true ;
72528: LD_ADDR_EXP 74
72532: PUSH
72533: LD_INT 1
72535: ST_TO_ADDR
// if p3 = 7 then
72536: LD_VAR 0 3
72540: PUSH
72541: LD_INT 7
72543: EQUAL
72544: IFFALSE 72554
// sRadar := true ;
72546: LD_ADDR_EXP 75
72550: PUSH
72551: LD_INT 1
72553: ST_TO_ADDR
// if p3 = 8 then
72554: LD_VAR 0 3
72558: PUSH
72559: LD_INT 8
72561: EQUAL
72562: IFFALSE 72572
// sBunker := true ;
72564: LD_ADDR_EXP 76
72568: PUSH
72569: LD_INT 1
72571: ST_TO_ADDR
// if p3 = 9 then
72572: LD_VAR 0 3
72576: PUSH
72577: LD_INT 9
72579: EQUAL
72580: IFFALSE 72590
// sHack := true ;
72582: LD_ADDR_EXP 77
72586: PUSH
72587: LD_INT 1
72589: ST_TO_ADDR
// if p3 = 10 then
72590: LD_VAR 0 3
72594: PUSH
72595: LD_INT 10
72597: EQUAL
72598: IFFALSE 72608
// sFire := true ;
72600: LD_ADDR_EXP 78
72604: PUSH
72605: LD_INT 1
72607: ST_TO_ADDR
// if p3 = 11 then
72608: LD_VAR 0 3
72612: PUSH
72613: LD_INT 11
72615: EQUAL
72616: IFFALSE 72626
// sRefresh := true ;
72618: LD_ADDR_EXP 79
72622: PUSH
72623: LD_INT 1
72625: ST_TO_ADDR
// if p3 = 12 then
72626: LD_VAR 0 3
72630: PUSH
72631: LD_INT 12
72633: EQUAL
72634: IFFALSE 72644
// sExp := true ;
72636: LD_ADDR_EXP 80
72640: PUSH
72641: LD_INT 1
72643: ST_TO_ADDR
// if p3 = 13 then
72644: LD_VAR 0 3
72648: PUSH
72649: LD_INT 13
72651: EQUAL
72652: IFFALSE 72662
// sDepot := true ;
72654: LD_ADDR_EXP 81
72658: PUSH
72659: LD_INT 1
72661: ST_TO_ADDR
// if p3 = 14 then
72662: LD_VAR 0 3
72666: PUSH
72667: LD_INT 14
72669: EQUAL
72670: IFFALSE 72680
// sFlag := true ;
72672: LD_ADDR_EXP 82
72676: PUSH
72677: LD_INT 1
72679: ST_TO_ADDR
// if p3 = 15 then
72680: LD_VAR 0 3
72684: PUSH
72685: LD_INT 15
72687: EQUAL
72688: IFFALSE 72698
// sKamikadze := true ;
72690: LD_ADDR_EXP 90
72694: PUSH
72695: LD_INT 1
72697: ST_TO_ADDR
// if p3 = 16 then
72698: LD_VAR 0 3
72702: PUSH
72703: LD_INT 16
72705: EQUAL
72706: IFFALSE 72716
// sTroll := true ;
72708: LD_ADDR_EXP 91
72712: PUSH
72713: LD_INT 1
72715: ST_TO_ADDR
// if p3 = 17 then
72716: LD_VAR 0 3
72720: PUSH
72721: LD_INT 17
72723: EQUAL
72724: IFFALSE 72734
// sSlow := true ;
72726: LD_ADDR_EXP 92
72730: PUSH
72731: LD_INT 1
72733: ST_TO_ADDR
// if p3 = 18 then
72734: LD_VAR 0 3
72738: PUSH
72739: LD_INT 18
72741: EQUAL
72742: IFFALSE 72752
// sLack := true ;
72744: LD_ADDR_EXP 93
72748: PUSH
72749: LD_INT 1
72751: ST_TO_ADDR
// if p3 = 19 then
72752: LD_VAR 0 3
72756: PUSH
72757: LD_INT 19
72759: EQUAL
72760: IFFALSE 72770
// sTank := true ;
72762: LD_ADDR_EXP 95
72766: PUSH
72767: LD_INT 1
72769: ST_TO_ADDR
// if p3 = 20 then
72770: LD_VAR 0 3
72774: PUSH
72775: LD_INT 20
72777: EQUAL
72778: IFFALSE 72788
// sRemote := true ;
72780: LD_ADDR_EXP 96
72784: PUSH
72785: LD_INT 1
72787: ST_TO_ADDR
// if p3 = 21 then
72788: LD_VAR 0 3
72792: PUSH
72793: LD_INT 21
72795: EQUAL
72796: IFFALSE 72806
// sPowell := true ;
72798: LD_ADDR_EXP 97
72802: PUSH
72803: LD_INT 1
72805: ST_TO_ADDR
// if p3 = 22 then
72806: LD_VAR 0 3
72810: PUSH
72811: LD_INT 22
72813: EQUAL
72814: IFFALSE 72824
// sTeleport := true ;
72816: LD_ADDR_EXP 100
72820: PUSH
72821: LD_INT 1
72823: ST_TO_ADDR
// if p3 = 23 then
72824: LD_VAR 0 3
72828: PUSH
72829: LD_INT 23
72831: EQUAL
72832: IFFALSE 72842
// sOilTower := true ;
72834: LD_ADDR_EXP 102
72838: PUSH
72839: LD_INT 1
72841: ST_TO_ADDR
// if p3 = 24 then
72842: LD_VAR 0 3
72846: PUSH
72847: LD_INT 24
72849: EQUAL
72850: IFFALSE 72860
// sShovel := true ;
72852: LD_ADDR_EXP 103
72856: PUSH
72857: LD_INT 1
72859: ST_TO_ADDR
// if p3 = 25 then
72860: LD_VAR 0 3
72864: PUSH
72865: LD_INT 25
72867: EQUAL
72868: IFFALSE 72878
// sSheik := true ;
72870: LD_ADDR_EXP 104
72874: PUSH
72875: LD_INT 1
72877: ST_TO_ADDR
// if p3 = 26 then
72878: LD_VAR 0 3
72882: PUSH
72883: LD_INT 26
72885: EQUAL
72886: IFFALSE 72896
// sEarthquake := true ;
72888: LD_ADDR_EXP 106
72892: PUSH
72893: LD_INT 1
72895: ST_TO_ADDR
// if p3 = 27 then
72896: LD_VAR 0 3
72900: PUSH
72901: LD_INT 27
72903: EQUAL
72904: IFFALSE 72914
// sAI := true ;
72906: LD_ADDR_EXP 107
72910: PUSH
72911: LD_INT 1
72913: ST_TO_ADDR
// if p3 = 28 then
72914: LD_VAR 0 3
72918: PUSH
72919: LD_INT 28
72921: EQUAL
72922: IFFALSE 72932
// sCargo := true ;
72924: LD_ADDR_EXP 110
72928: PUSH
72929: LD_INT 1
72931: ST_TO_ADDR
// if p3 = 29 then
72932: LD_VAR 0 3
72936: PUSH
72937: LD_INT 29
72939: EQUAL
72940: IFFALSE 72950
// sDLaser := true ;
72942: LD_ADDR_EXP 111
72946: PUSH
72947: LD_INT 1
72949: ST_TO_ADDR
// if p3 = 30 then
72950: LD_VAR 0 3
72954: PUSH
72955: LD_INT 30
72957: EQUAL
72958: IFFALSE 72968
// sExchange := true ;
72960: LD_ADDR_EXP 112
72964: PUSH
72965: LD_INT 1
72967: ST_TO_ADDR
// if p3 = 31 then
72968: LD_VAR 0 3
72972: PUSH
72973: LD_INT 31
72975: EQUAL
72976: IFFALSE 72986
// sFac := true ;
72978: LD_ADDR_EXP 113
72982: PUSH
72983: LD_INT 1
72985: ST_TO_ADDR
// if p3 = 32 then
72986: LD_VAR 0 3
72990: PUSH
72991: LD_INT 32
72993: EQUAL
72994: IFFALSE 73004
// sPower := true ;
72996: LD_ADDR_EXP 114
73000: PUSH
73001: LD_INT 1
73003: ST_TO_ADDR
// if p3 = 33 then
73004: LD_VAR 0 3
73008: PUSH
73009: LD_INT 33
73011: EQUAL
73012: IFFALSE 73022
// sRandom := true ;
73014: LD_ADDR_EXP 115
73018: PUSH
73019: LD_INT 1
73021: ST_TO_ADDR
// if p3 = 34 then
73022: LD_VAR 0 3
73026: PUSH
73027: LD_INT 34
73029: EQUAL
73030: IFFALSE 73040
// sShield := true ;
73032: LD_ADDR_EXP 116
73036: PUSH
73037: LD_INT 1
73039: ST_TO_ADDR
// if p3 = 35 then
73040: LD_VAR 0 3
73044: PUSH
73045: LD_INT 35
73047: EQUAL
73048: IFFALSE 73058
// sTime := true ;
73050: LD_ADDR_EXP 117
73054: PUSH
73055: LD_INT 1
73057: ST_TO_ADDR
// if p3 = 36 then
73058: LD_VAR 0 3
73062: PUSH
73063: LD_INT 36
73065: EQUAL
73066: IFFALSE 73076
// sTools := true ;
73068: LD_ADDR_EXP 118
73072: PUSH
73073: LD_INT 1
73075: ST_TO_ADDR
// if p3 = 101 then
73076: LD_VAR 0 3
73080: PUSH
73081: LD_INT 101
73083: EQUAL
73084: IFFALSE 73094
// sSold := true ;
73086: LD_ADDR_EXP 83
73090: PUSH
73091: LD_INT 1
73093: ST_TO_ADDR
// if p3 = 102 then
73094: LD_VAR 0 3
73098: PUSH
73099: LD_INT 102
73101: EQUAL
73102: IFFALSE 73112
// sDiff := true ;
73104: LD_ADDR_EXP 84
73108: PUSH
73109: LD_INT 1
73111: ST_TO_ADDR
// if p3 = 103 then
73112: LD_VAR 0 3
73116: PUSH
73117: LD_INT 103
73119: EQUAL
73120: IFFALSE 73130
// sFog := true ;
73122: LD_ADDR_EXP 87
73126: PUSH
73127: LD_INT 1
73129: ST_TO_ADDR
// if p3 = 104 then
73130: LD_VAR 0 3
73134: PUSH
73135: LD_INT 104
73137: EQUAL
73138: IFFALSE 73148
// sReset := true ;
73140: LD_ADDR_EXP 88
73144: PUSH
73145: LD_INT 1
73147: ST_TO_ADDR
// if p3 = 105 then
73148: LD_VAR 0 3
73152: PUSH
73153: LD_INT 105
73155: EQUAL
73156: IFFALSE 73166
// sSun := true ;
73158: LD_ADDR_EXP 89
73162: PUSH
73163: LD_INT 1
73165: ST_TO_ADDR
// if p3 = 106 then
73166: LD_VAR 0 3
73170: PUSH
73171: LD_INT 106
73173: EQUAL
73174: IFFALSE 73184
// sTiger := true ;
73176: LD_ADDR_EXP 85
73180: PUSH
73181: LD_INT 1
73183: ST_TO_ADDR
// if p3 = 107 then
73184: LD_VAR 0 3
73188: PUSH
73189: LD_INT 107
73191: EQUAL
73192: IFFALSE 73202
// sBomb := true ;
73194: LD_ADDR_EXP 86
73198: PUSH
73199: LD_INT 1
73201: ST_TO_ADDR
// if p3 = 108 then
73202: LD_VAR 0 3
73206: PUSH
73207: LD_INT 108
73209: EQUAL
73210: IFFALSE 73220
// sWound := true ;
73212: LD_ADDR_EXP 94
73216: PUSH
73217: LD_INT 1
73219: ST_TO_ADDR
// if p3 = 109 then
73220: LD_VAR 0 3
73224: PUSH
73225: LD_INT 109
73227: EQUAL
73228: IFFALSE 73238
// sBetray := true ;
73230: LD_ADDR_EXP 98
73234: PUSH
73235: LD_INT 1
73237: ST_TO_ADDR
// if p3 = 110 then
73238: LD_VAR 0 3
73242: PUSH
73243: LD_INT 110
73245: EQUAL
73246: IFFALSE 73256
// sContamin := true ;
73248: LD_ADDR_EXP 99
73252: PUSH
73253: LD_INT 1
73255: ST_TO_ADDR
// if p3 = 111 then
73256: LD_VAR 0 3
73260: PUSH
73261: LD_INT 111
73263: EQUAL
73264: IFFALSE 73274
// sOil := true ;
73266: LD_ADDR_EXP 101
73270: PUSH
73271: LD_INT 1
73273: ST_TO_ADDR
// if p3 = 112 then
73274: LD_VAR 0 3
73278: PUSH
73279: LD_INT 112
73281: EQUAL
73282: IFFALSE 73292
// sStu := true ;
73284: LD_ADDR_EXP 105
73288: PUSH
73289: LD_INT 1
73291: ST_TO_ADDR
// if p3 = 113 then
73292: LD_VAR 0 3
73296: PUSH
73297: LD_INT 113
73299: EQUAL
73300: IFFALSE 73310
// sBazooka := true ;
73302: LD_ADDR_EXP 108
73306: PUSH
73307: LD_INT 1
73309: ST_TO_ADDR
// if p3 = 114 then
73310: LD_VAR 0 3
73314: PUSH
73315: LD_INT 114
73317: EQUAL
73318: IFFALSE 73328
// sMortar := true ;
73320: LD_ADDR_EXP 109
73324: PUSH
73325: LD_INT 1
73327: ST_TO_ADDR
// if p3 = 115 then
73328: LD_VAR 0 3
73332: PUSH
73333: LD_INT 115
73335: EQUAL
73336: IFFALSE 73346
// sRanger := true ;
73338: LD_ADDR_EXP 119
73342: PUSH
73343: LD_INT 1
73345: ST_TO_ADDR
// if p3 = 116 then
73346: LD_VAR 0 3
73350: PUSH
73351: LD_INT 116
73353: EQUAL
73354: IFFALSE 73364
// sComputer := true ;
73356: LD_ADDR_EXP 120
73360: PUSH
73361: LD_INT 1
73363: ST_TO_ADDR
// if p3 = 117 then
73364: LD_VAR 0 3
73368: PUSH
73369: LD_INT 117
73371: EQUAL
73372: IFFALSE 73382
// s30 := true ;
73374: LD_ADDR_EXP 121
73378: PUSH
73379: LD_INT 1
73381: ST_TO_ADDR
// if p3 = 118 then
73382: LD_VAR 0 3
73386: PUSH
73387: LD_INT 118
73389: EQUAL
73390: IFFALSE 73400
// s60 := true ;
73392: LD_ADDR_EXP 122
73396: PUSH
73397: LD_INT 1
73399: ST_TO_ADDR
// end ; if p2 = hack_mode then
73400: LD_VAR 0 2
73404: PUSH
73405: LD_INT 101
73407: EQUAL
73408: IFFALSE 73536
// begin case p3 of 1 :
73410: LD_VAR 0 3
73414: PUSH
73415: LD_INT 1
73417: DOUBLE
73418: EQUAL
73419: IFTRUE 73423
73421: GO 73430
73423: POP
// hHackUnlimitedResources ; 2 :
73424: CALL 85799 0 0
73428: GO 73536
73430: LD_INT 2
73432: DOUBLE
73433: EQUAL
73434: IFTRUE 73438
73436: GO 73445
73438: POP
// hHackSetLevel10 ; 3 :
73439: CALL 85932 0 0
73443: GO 73536
73445: LD_INT 3
73447: DOUBLE
73448: EQUAL
73449: IFTRUE 73453
73451: GO 73460
73453: POP
// hHackSetLevel10YourUnits ; 4 :
73454: CALL 86017 0 0
73458: GO 73536
73460: LD_INT 4
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73468
73466: GO 73475
73468: POP
// hHackInvincible ; 5 :
73469: CALL 86465 0 0
73473: GO 73536
73475: LD_INT 5
73477: DOUBLE
73478: EQUAL
73479: IFTRUE 73483
73481: GO 73490
73483: POP
// hHackInvisible ; 6 :
73484: CALL 86576 0 0
73488: GO 73536
73490: LD_INT 6
73492: DOUBLE
73493: EQUAL
73494: IFTRUE 73498
73496: GO 73505
73498: POP
// hHackChangeYourSide ; 7 :
73499: CALL 86633 0 0
73503: GO 73536
73505: LD_INT 7
73507: DOUBLE
73508: EQUAL
73509: IFTRUE 73513
73511: GO 73520
73513: POP
// hHackChangeUnitSide ; 8 :
73514: CALL 86675 0 0
73518: GO 73536
73520: LD_INT 8
73522: DOUBLE
73523: EQUAL
73524: IFTRUE 73528
73526: GO 73535
73528: POP
// hHackFog ; end ;
73529: CALL 86776 0 0
73533: GO 73536
73535: POP
// end ; if p2 = game_save_mode then
73536: LD_VAR 0 2
73540: PUSH
73541: LD_INT 102
73543: EQUAL
73544: IFFALSE 73601
// begin if p3 = 1 then
73546: LD_VAR 0 3
73550: PUSH
73551: LD_INT 1
73553: EQUAL
73554: IFFALSE 73566
// globalGameSaveCounter := p4 ;
73556: LD_ADDR_EXP 65
73560: PUSH
73561: LD_VAR 0 4
73565: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73566: LD_VAR 0 3
73570: PUSH
73571: LD_INT 2
73573: EQUAL
73574: IFFALSE 73582
73576: PUSH
73577: LD_EXP 65
73581: AND
73582: IFFALSE 73601
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73584: LD_STRING setGameSaveCounter(
73586: PUSH
73587: LD_EXP 65
73591: STR
73592: PUSH
73593: LD_STRING )
73595: STR
73596: PPUSH
73597: CALL_OW 559
// end ; end ;
73601: LD_VAR 0 7
73605: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73606: LD_INT 0
73608: PPUSH
// streamModeActive := false ;
73609: LD_ADDR_EXP 66
73613: PUSH
73614: LD_INT 0
73616: ST_TO_ADDR
// normalCounter := 36 ;
73617: LD_ADDR_EXP 67
73621: PUSH
73622: LD_INT 36
73624: ST_TO_ADDR
// hardcoreCounter := 18 ;
73625: LD_ADDR_EXP 68
73629: PUSH
73630: LD_INT 18
73632: ST_TO_ADDR
// sRocket := false ;
73633: LD_ADDR_EXP 71
73637: PUSH
73638: LD_INT 0
73640: ST_TO_ADDR
// sSpeed := false ;
73641: LD_ADDR_EXP 70
73645: PUSH
73646: LD_INT 0
73648: ST_TO_ADDR
// sEngine := false ;
73649: LD_ADDR_EXP 72
73653: PUSH
73654: LD_INT 0
73656: ST_TO_ADDR
// sSpec := false ;
73657: LD_ADDR_EXP 69
73661: PUSH
73662: LD_INT 0
73664: ST_TO_ADDR
// sLevel := false ;
73665: LD_ADDR_EXP 73
73669: PUSH
73670: LD_INT 0
73672: ST_TO_ADDR
// sArmoury := false ;
73673: LD_ADDR_EXP 74
73677: PUSH
73678: LD_INT 0
73680: ST_TO_ADDR
// sRadar := false ;
73681: LD_ADDR_EXP 75
73685: PUSH
73686: LD_INT 0
73688: ST_TO_ADDR
// sBunker := false ;
73689: LD_ADDR_EXP 76
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// sHack := false ;
73697: LD_ADDR_EXP 77
73701: PUSH
73702: LD_INT 0
73704: ST_TO_ADDR
// sFire := false ;
73705: LD_ADDR_EXP 78
73709: PUSH
73710: LD_INT 0
73712: ST_TO_ADDR
// sRefresh := false ;
73713: LD_ADDR_EXP 79
73717: PUSH
73718: LD_INT 0
73720: ST_TO_ADDR
// sExp := false ;
73721: LD_ADDR_EXP 80
73725: PUSH
73726: LD_INT 0
73728: ST_TO_ADDR
// sDepot := false ;
73729: LD_ADDR_EXP 81
73733: PUSH
73734: LD_INT 0
73736: ST_TO_ADDR
// sFlag := false ;
73737: LD_ADDR_EXP 82
73741: PUSH
73742: LD_INT 0
73744: ST_TO_ADDR
// sKamikadze := false ;
73745: LD_ADDR_EXP 90
73749: PUSH
73750: LD_INT 0
73752: ST_TO_ADDR
// sTroll := false ;
73753: LD_ADDR_EXP 91
73757: PUSH
73758: LD_INT 0
73760: ST_TO_ADDR
// sSlow := false ;
73761: LD_ADDR_EXP 92
73765: PUSH
73766: LD_INT 0
73768: ST_TO_ADDR
// sLack := false ;
73769: LD_ADDR_EXP 93
73773: PUSH
73774: LD_INT 0
73776: ST_TO_ADDR
// sTank := false ;
73777: LD_ADDR_EXP 95
73781: PUSH
73782: LD_INT 0
73784: ST_TO_ADDR
// sRemote := false ;
73785: LD_ADDR_EXP 96
73789: PUSH
73790: LD_INT 0
73792: ST_TO_ADDR
// sPowell := false ;
73793: LD_ADDR_EXP 97
73797: PUSH
73798: LD_INT 0
73800: ST_TO_ADDR
// sTeleport := false ;
73801: LD_ADDR_EXP 100
73805: PUSH
73806: LD_INT 0
73808: ST_TO_ADDR
// sOilTower := false ;
73809: LD_ADDR_EXP 102
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
// sShovel := false ;
73817: LD_ADDR_EXP 103
73821: PUSH
73822: LD_INT 0
73824: ST_TO_ADDR
// sSheik := false ;
73825: LD_ADDR_EXP 104
73829: PUSH
73830: LD_INT 0
73832: ST_TO_ADDR
// sEarthquake := false ;
73833: LD_ADDR_EXP 106
73837: PUSH
73838: LD_INT 0
73840: ST_TO_ADDR
// sAI := false ;
73841: LD_ADDR_EXP 107
73845: PUSH
73846: LD_INT 0
73848: ST_TO_ADDR
// sCargo := false ;
73849: LD_ADDR_EXP 110
73853: PUSH
73854: LD_INT 0
73856: ST_TO_ADDR
// sDLaser := false ;
73857: LD_ADDR_EXP 111
73861: PUSH
73862: LD_INT 0
73864: ST_TO_ADDR
// sExchange := false ;
73865: LD_ADDR_EXP 112
73869: PUSH
73870: LD_INT 0
73872: ST_TO_ADDR
// sFac := false ;
73873: LD_ADDR_EXP 113
73877: PUSH
73878: LD_INT 0
73880: ST_TO_ADDR
// sPower := false ;
73881: LD_ADDR_EXP 114
73885: PUSH
73886: LD_INT 0
73888: ST_TO_ADDR
// sRandom := false ;
73889: LD_ADDR_EXP 115
73893: PUSH
73894: LD_INT 0
73896: ST_TO_ADDR
// sShield := false ;
73897: LD_ADDR_EXP 116
73901: PUSH
73902: LD_INT 0
73904: ST_TO_ADDR
// sTime := false ;
73905: LD_ADDR_EXP 117
73909: PUSH
73910: LD_INT 0
73912: ST_TO_ADDR
// sTools := false ;
73913: LD_ADDR_EXP 118
73917: PUSH
73918: LD_INT 0
73920: ST_TO_ADDR
// sSold := false ;
73921: LD_ADDR_EXP 83
73925: PUSH
73926: LD_INT 0
73928: ST_TO_ADDR
// sDiff := false ;
73929: LD_ADDR_EXP 84
73933: PUSH
73934: LD_INT 0
73936: ST_TO_ADDR
// sFog := false ;
73937: LD_ADDR_EXP 87
73941: PUSH
73942: LD_INT 0
73944: ST_TO_ADDR
// sReset := false ;
73945: LD_ADDR_EXP 88
73949: PUSH
73950: LD_INT 0
73952: ST_TO_ADDR
// sSun := false ;
73953: LD_ADDR_EXP 89
73957: PUSH
73958: LD_INT 0
73960: ST_TO_ADDR
// sTiger := false ;
73961: LD_ADDR_EXP 85
73965: PUSH
73966: LD_INT 0
73968: ST_TO_ADDR
// sBomb := false ;
73969: LD_ADDR_EXP 86
73973: PUSH
73974: LD_INT 0
73976: ST_TO_ADDR
// sWound := false ;
73977: LD_ADDR_EXP 94
73981: PUSH
73982: LD_INT 0
73984: ST_TO_ADDR
// sBetray := false ;
73985: LD_ADDR_EXP 98
73989: PUSH
73990: LD_INT 0
73992: ST_TO_ADDR
// sContamin := false ;
73993: LD_ADDR_EXP 99
73997: PUSH
73998: LD_INT 0
74000: ST_TO_ADDR
// sOil := false ;
74001: LD_ADDR_EXP 101
74005: PUSH
74006: LD_INT 0
74008: ST_TO_ADDR
// sStu := false ;
74009: LD_ADDR_EXP 105
74013: PUSH
74014: LD_INT 0
74016: ST_TO_ADDR
// sBazooka := false ;
74017: LD_ADDR_EXP 108
74021: PUSH
74022: LD_INT 0
74024: ST_TO_ADDR
// sMortar := false ;
74025: LD_ADDR_EXP 109
74029: PUSH
74030: LD_INT 0
74032: ST_TO_ADDR
// sRanger := false ;
74033: LD_ADDR_EXP 119
74037: PUSH
74038: LD_INT 0
74040: ST_TO_ADDR
// sComputer := false ;
74041: LD_ADDR_EXP 120
74045: PUSH
74046: LD_INT 0
74048: ST_TO_ADDR
// s30 := false ;
74049: LD_ADDR_EXP 121
74053: PUSH
74054: LD_INT 0
74056: ST_TO_ADDR
// s60 := false ;
74057: LD_ADDR_EXP 122
74061: PUSH
74062: LD_INT 0
74064: ST_TO_ADDR
// end ;
74065: LD_VAR 0 1
74069: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
74070: LD_INT 0
74072: PPUSH
74073: PPUSH
74074: PPUSH
74075: PPUSH
74076: PPUSH
74077: PPUSH
74078: PPUSH
// result := [ ] ;
74079: LD_ADDR_VAR 0 2
74083: PUSH
74084: EMPTY
74085: ST_TO_ADDR
// if campaign_id = 1 then
74086: LD_OWVAR 69
74090: PUSH
74091: LD_INT 1
74093: EQUAL
74094: IFFALSE 77260
// begin case mission_number of 1 :
74096: LD_OWVAR 70
74100: PUSH
74101: LD_INT 1
74103: DOUBLE
74104: EQUAL
74105: IFTRUE 74109
74107: GO 74185
74109: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
74110: LD_ADDR_VAR 0 2
74114: PUSH
74115: LD_INT 2
74117: PUSH
74118: LD_INT 4
74120: PUSH
74121: LD_INT 11
74123: PUSH
74124: LD_INT 12
74126: PUSH
74127: LD_INT 15
74129: PUSH
74130: LD_INT 16
74132: PUSH
74133: LD_INT 22
74135: PUSH
74136: LD_INT 23
74138: PUSH
74139: LD_INT 26
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: PUSH
74153: LD_INT 101
74155: PUSH
74156: LD_INT 102
74158: PUSH
74159: LD_INT 106
74161: PUSH
74162: LD_INT 116
74164: PUSH
74165: LD_INT 117
74167: PUSH
74168: LD_INT 118
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: LIST
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: ST_TO_ADDR
74183: GO 77258
74185: LD_INT 2
74187: DOUBLE
74188: EQUAL
74189: IFTRUE 74193
74191: GO 74277
74193: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74194: LD_ADDR_VAR 0 2
74198: PUSH
74199: LD_INT 2
74201: PUSH
74202: LD_INT 4
74204: PUSH
74205: LD_INT 11
74207: PUSH
74208: LD_INT 12
74210: PUSH
74211: LD_INT 15
74213: PUSH
74214: LD_INT 16
74216: PUSH
74217: LD_INT 22
74219: PUSH
74220: LD_INT 23
74222: PUSH
74223: LD_INT 26
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 101
74239: PUSH
74240: LD_INT 102
74242: PUSH
74243: LD_INT 105
74245: PUSH
74246: LD_INT 106
74248: PUSH
74249: LD_INT 108
74251: PUSH
74252: LD_INT 116
74254: PUSH
74255: LD_INT 117
74257: PUSH
74258: LD_INT 118
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: ST_TO_ADDR
74275: GO 77258
74277: LD_INT 3
74279: DOUBLE
74280: EQUAL
74281: IFTRUE 74285
74283: GO 74373
74285: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74286: LD_ADDR_VAR 0 2
74290: PUSH
74291: LD_INT 2
74293: PUSH
74294: LD_INT 4
74296: PUSH
74297: LD_INT 5
74299: PUSH
74300: LD_INT 11
74302: PUSH
74303: LD_INT 12
74305: PUSH
74306: LD_INT 15
74308: PUSH
74309: LD_INT 16
74311: PUSH
74312: LD_INT 22
74314: PUSH
74315: LD_INT 26
74317: PUSH
74318: LD_INT 36
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 101
74335: PUSH
74336: LD_INT 102
74338: PUSH
74339: LD_INT 105
74341: PUSH
74342: LD_INT 106
74344: PUSH
74345: LD_INT 108
74347: PUSH
74348: LD_INT 116
74350: PUSH
74351: LD_INT 117
74353: PUSH
74354: LD_INT 118
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: ST_TO_ADDR
74371: GO 77258
74373: LD_INT 4
74375: DOUBLE
74376: EQUAL
74377: IFTRUE 74381
74379: GO 74477
74381: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74382: LD_ADDR_VAR 0 2
74386: PUSH
74387: LD_INT 2
74389: PUSH
74390: LD_INT 4
74392: PUSH
74393: LD_INT 5
74395: PUSH
74396: LD_INT 8
74398: PUSH
74399: LD_INT 11
74401: PUSH
74402: LD_INT 12
74404: PUSH
74405: LD_INT 15
74407: PUSH
74408: LD_INT 16
74410: PUSH
74411: LD_INT 22
74413: PUSH
74414: LD_INT 23
74416: PUSH
74417: LD_INT 26
74419: PUSH
74420: LD_INT 36
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: LIST
74427: LIST
74428: LIST
74429: LIST
74430: LIST
74431: LIST
74432: LIST
74433: LIST
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 101
74439: PUSH
74440: LD_INT 102
74442: PUSH
74443: LD_INT 105
74445: PUSH
74446: LD_INT 106
74448: PUSH
74449: LD_INT 108
74451: PUSH
74452: LD_INT 116
74454: PUSH
74455: LD_INT 117
74457: PUSH
74458: LD_INT 118
74460: PUSH
74461: EMPTY
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: PUSH
74471: EMPTY
74472: LIST
74473: LIST
74474: ST_TO_ADDR
74475: GO 77258
74477: LD_INT 5
74479: DOUBLE
74480: EQUAL
74481: IFTRUE 74485
74483: GO 74597
74485: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74486: LD_ADDR_VAR 0 2
74490: PUSH
74491: LD_INT 2
74493: PUSH
74494: LD_INT 4
74496: PUSH
74497: LD_INT 5
74499: PUSH
74500: LD_INT 6
74502: PUSH
74503: LD_INT 8
74505: PUSH
74506: LD_INT 11
74508: PUSH
74509: LD_INT 12
74511: PUSH
74512: LD_INT 15
74514: PUSH
74515: LD_INT 16
74517: PUSH
74518: LD_INT 22
74520: PUSH
74521: LD_INT 23
74523: PUSH
74524: LD_INT 25
74526: PUSH
74527: LD_INT 26
74529: PUSH
74530: LD_INT 36
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 101
74551: PUSH
74552: LD_INT 102
74554: PUSH
74555: LD_INT 105
74557: PUSH
74558: LD_INT 106
74560: PUSH
74561: LD_INT 108
74563: PUSH
74564: LD_INT 109
74566: PUSH
74567: LD_INT 112
74569: PUSH
74570: LD_INT 116
74572: PUSH
74573: LD_INT 117
74575: PUSH
74576: LD_INT 118
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: ST_TO_ADDR
74595: GO 77258
74597: LD_INT 6
74599: DOUBLE
74600: EQUAL
74601: IFTRUE 74605
74603: GO 74737
74605: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74606: LD_ADDR_VAR 0 2
74610: PUSH
74611: LD_INT 2
74613: PUSH
74614: LD_INT 4
74616: PUSH
74617: LD_INT 5
74619: PUSH
74620: LD_INT 6
74622: PUSH
74623: LD_INT 8
74625: PUSH
74626: LD_INT 11
74628: PUSH
74629: LD_INT 12
74631: PUSH
74632: LD_INT 15
74634: PUSH
74635: LD_INT 16
74637: PUSH
74638: LD_INT 20
74640: PUSH
74641: LD_INT 21
74643: PUSH
74644: LD_INT 22
74646: PUSH
74647: LD_INT 23
74649: PUSH
74650: LD_INT 25
74652: PUSH
74653: LD_INT 26
74655: PUSH
74656: LD_INT 30
74658: PUSH
74659: LD_INT 31
74661: PUSH
74662: LD_INT 32
74664: PUSH
74665: LD_INT 36
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 101
74691: PUSH
74692: LD_INT 102
74694: PUSH
74695: LD_INT 105
74697: PUSH
74698: LD_INT 106
74700: PUSH
74701: LD_INT 108
74703: PUSH
74704: LD_INT 109
74706: PUSH
74707: LD_INT 112
74709: PUSH
74710: LD_INT 116
74712: PUSH
74713: LD_INT 117
74715: PUSH
74716: LD_INT 118
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: ST_TO_ADDR
74735: GO 77258
74737: LD_INT 7
74739: DOUBLE
74740: EQUAL
74741: IFTRUE 74745
74743: GO 74857
74745: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74746: LD_ADDR_VAR 0 2
74750: PUSH
74751: LD_INT 2
74753: PUSH
74754: LD_INT 4
74756: PUSH
74757: LD_INT 5
74759: PUSH
74760: LD_INT 7
74762: PUSH
74763: LD_INT 11
74765: PUSH
74766: LD_INT 12
74768: PUSH
74769: LD_INT 15
74771: PUSH
74772: LD_INT 16
74774: PUSH
74775: LD_INT 20
74777: PUSH
74778: LD_INT 21
74780: PUSH
74781: LD_INT 22
74783: PUSH
74784: LD_INT 23
74786: PUSH
74787: LD_INT 25
74789: PUSH
74790: LD_INT 26
74792: PUSH
74793: EMPTY
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 101
74811: PUSH
74812: LD_INT 102
74814: PUSH
74815: LD_INT 103
74817: PUSH
74818: LD_INT 105
74820: PUSH
74821: LD_INT 106
74823: PUSH
74824: LD_INT 108
74826: PUSH
74827: LD_INT 112
74829: PUSH
74830: LD_INT 116
74832: PUSH
74833: LD_INT 117
74835: PUSH
74836: LD_INT 118
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: ST_TO_ADDR
74855: GO 77258
74857: LD_INT 8
74859: DOUBLE
74860: EQUAL
74861: IFTRUE 74865
74863: GO 75005
74865: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74866: LD_ADDR_VAR 0 2
74870: PUSH
74871: LD_INT 2
74873: PUSH
74874: LD_INT 4
74876: PUSH
74877: LD_INT 5
74879: PUSH
74880: LD_INT 6
74882: PUSH
74883: LD_INT 7
74885: PUSH
74886: LD_INT 8
74888: PUSH
74889: LD_INT 11
74891: PUSH
74892: LD_INT 12
74894: PUSH
74895: LD_INT 15
74897: PUSH
74898: LD_INT 16
74900: PUSH
74901: LD_INT 20
74903: PUSH
74904: LD_INT 21
74906: PUSH
74907: LD_INT 22
74909: PUSH
74910: LD_INT 23
74912: PUSH
74913: LD_INT 25
74915: PUSH
74916: LD_INT 26
74918: PUSH
74919: LD_INT 30
74921: PUSH
74922: LD_INT 31
74924: PUSH
74925: LD_INT 32
74927: PUSH
74928: LD_INT 36
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 101
74955: PUSH
74956: LD_INT 102
74958: PUSH
74959: LD_INT 103
74961: PUSH
74962: LD_INT 105
74964: PUSH
74965: LD_INT 106
74967: PUSH
74968: LD_INT 108
74970: PUSH
74971: LD_INT 109
74973: PUSH
74974: LD_INT 112
74976: PUSH
74977: LD_INT 116
74979: PUSH
74980: LD_INT 117
74982: PUSH
74983: LD_INT 118
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: ST_TO_ADDR
75003: GO 77258
75005: LD_INT 9
75007: DOUBLE
75008: EQUAL
75009: IFTRUE 75013
75011: GO 75161
75013: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
75014: LD_ADDR_VAR 0 2
75018: PUSH
75019: LD_INT 2
75021: PUSH
75022: LD_INT 4
75024: PUSH
75025: LD_INT 5
75027: PUSH
75028: LD_INT 6
75030: PUSH
75031: LD_INT 7
75033: PUSH
75034: LD_INT 8
75036: PUSH
75037: LD_INT 11
75039: PUSH
75040: LD_INT 12
75042: PUSH
75043: LD_INT 15
75045: PUSH
75046: LD_INT 16
75048: PUSH
75049: LD_INT 20
75051: PUSH
75052: LD_INT 21
75054: PUSH
75055: LD_INT 22
75057: PUSH
75058: LD_INT 23
75060: PUSH
75061: LD_INT 25
75063: PUSH
75064: LD_INT 26
75066: PUSH
75067: LD_INT 28
75069: PUSH
75070: LD_INT 30
75072: PUSH
75073: LD_INT 31
75075: PUSH
75076: LD_INT 32
75078: PUSH
75079: LD_INT 36
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: LIST
75088: LIST
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: PUSH
75105: LD_INT 101
75107: PUSH
75108: LD_INT 102
75110: PUSH
75111: LD_INT 103
75113: PUSH
75114: LD_INT 105
75116: PUSH
75117: LD_INT 106
75119: PUSH
75120: LD_INT 108
75122: PUSH
75123: LD_INT 109
75125: PUSH
75126: LD_INT 112
75128: PUSH
75129: LD_INT 114
75131: PUSH
75132: LD_INT 116
75134: PUSH
75135: LD_INT 117
75137: PUSH
75138: LD_INT 118
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: ST_TO_ADDR
75159: GO 77258
75161: LD_INT 10
75163: DOUBLE
75164: EQUAL
75165: IFTRUE 75169
75167: GO 75365
75169: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75170: LD_ADDR_VAR 0 2
75174: PUSH
75175: LD_INT 2
75177: PUSH
75178: LD_INT 4
75180: PUSH
75181: LD_INT 5
75183: PUSH
75184: LD_INT 6
75186: PUSH
75187: LD_INT 7
75189: PUSH
75190: LD_INT 8
75192: PUSH
75193: LD_INT 9
75195: PUSH
75196: LD_INT 10
75198: PUSH
75199: LD_INT 11
75201: PUSH
75202: LD_INT 12
75204: PUSH
75205: LD_INT 13
75207: PUSH
75208: LD_INT 14
75210: PUSH
75211: LD_INT 15
75213: PUSH
75214: LD_INT 16
75216: PUSH
75217: LD_INT 17
75219: PUSH
75220: LD_INT 18
75222: PUSH
75223: LD_INT 19
75225: PUSH
75226: LD_INT 20
75228: PUSH
75229: LD_INT 21
75231: PUSH
75232: LD_INT 22
75234: PUSH
75235: LD_INT 23
75237: PUSH
75238: LD_INT 24
75240: PUSH
75241: LD_INT 25
75243: PUSH
75244: LD_INT 26
75246: PUSH
75247: LD_INT 28
75249: PUSH
75250: LD_INT 30
75252: PUSH
75253: LD_INT 31
75255: PUSH
75256: LD_INT 32
75258: PUSH
75259: LD_INT 36
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: LIST
75279: LIST
75280: LIST
75281: LIST
75282: LIST
75283: LIST
75284: LIST
75285: LIST
75286: LIST
75287: LIST
75288: LIST
75289: LIST
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 101
75295: PUSH
75296: LD_INT 102
75298: PUSH
75299: LD_INT 103
75301: PUSH
75302: LD_INT 104
75304: PUSH
75305: LD_INT 105
75307: PUSH
75308: LD_INT 106
75310: PUSH
75311: LD_INT 107
75313: PUSH
75314: LD_INT 108
75316: PUSH
75317: LD_INT 109
75319: PUSH
75320: LD_INT 110
75322: PUSH
75323: LD_INT 111
75325: PUSH
75326: LD_INT 112
75328: PUSH
75329: LD_INT 114
75331: PUSH
75332: LD_INT 116
75334: PUSH
75335: LD_INT 117
75337: PUSH
75338: LD_INT 118
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: ST_TO_ADDR
75363: GO 77258
75365: LD_INT 11
75367: DOUBLE
75368: EQUAL
75369: IFTRUE 75373
75371: GO 75577
75373: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75374: LD_ADDR_VAR 0 2
75378: PUSH
75379: LD_INT 2
75381: PUSH
75382: LD_INT 3
75384: PUSH
75385: LD_INT 4
75387: PUSH
75388: LD_INT 5
75390: PUSH
75391: LD_INT 6
75393: PUSH
75394: LD_INT 7
75396: PUSH
75397: LD_INT 8
75399: PUSH
75400: LD_INT 9
75402: PUSH
75403: LD_INT 10
75405: PUSH
75406: LD_INT 11
75408: PUSH
75409: LD_INT 12
75411: PUSH
75412: LD_INT 13
75414: PUSH
75415: LD_INT 14
75417: PUSH
75418: LD_INT 15
75420: PUSH
75421: LD_INT 16
75423: PUSH
75424: LD_INT 17
75426: PUSH
75427: LD_INT 18
75429: PUSH
75430: LD_INT 19
75432: PUSH
75433: LD_INT 20
75435: PUSH
75436: LD_INT 21
75438: PUSH
75439: LD_INT 22
75441: PUSH
75442: LD_INT 23
75444: PUSH
75445: LD_INT 24
75447: PUSH
75448: LD_INT 25
75450: PUSH
75451: LD_INT 26
75453: PUSH
75454: LD_INT 28
75456: PUSH
75457: LD_INT 30
75459: PUSH
75460: LD_INT 31
75462: PUSH
75463: LD_INT 32
75465: PUSH
75466: LD_INT 34
75468: PUSH
75469: LD_INT 36
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 101
75507: PUSH
75508: LD_INT 102
75510: PUSH
75511: LD_INT 103
75513: PUSH
75514: LD_INT 104
75516: PUSH
75517: LD_INT 105
75519: PUSH
75520: LD_INT 106
75522: PUSH
75523: LD_INT 107
75525: PUSH
75526: LD_INT 108
75528: PUSH
75529: LD_INT 109
75531: PUSH
75532: LD_INT 110
75534: PUSH
75535: LD_INT 111
75537: PUSH
75538: LD_INT 112
75540: PUSH
75541: LD_INT 114
75543: PUSH
75544: LD_INT 116
75546: PUSH
75547: LD_INT 117
75549: PUSH
75550: LD_INT 118
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: ST_TO_ADDR
75575: GO 77258
75577: LD_INT 12
75579: DOUBLE
75580: EQUAL
75581: IFTRUE 75585
75583: GO 75805
75585: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75586: LD_ADDR_VAR 0 2
75590: PUSH
75591: LD_INT 1
75593: PUSH
75594: LD_INT 2
75596: PUSH
75597: LD_INT 3
75599: PUSH
75600: LD_INT 4
75602: PUSH
75603: LD_INT 5
75605: PUSH
75606: LD_INT 6
75608: PUSH
75609: LD_INT 7
75611: PUSH
75612: LD_INT 8
75614: PUSH
75615: LD_INT 9
75617: PUSH
75618: LD_INT 10
75620: PUSH
75621: LD_INT 11
75623: PUSH
75624: LD_INT 12
75626: PUSH
75627: LD_INT 13
75629: PUSH
75630: LD_INT 14
75632: PUSH
75633: LD_INT 15
75635: PUSH
75636: LD_INT 16
75638: PUSH
75639: LD_INT 17
75641: PUSH
75642: LD_INT 18
75644: PUSH
75645: LD_INT 19
75647: PUSH
75648: LD_INT 20
75650: PUSH
75651: LD_INT 21
75653: PUSH
75654: LD_INT 22
75656: PUSH
75657: LD_INT 23
75659: PUSH
75660: LD_INT 24
75662: PUSH
75663: LD_INT 25
75665: PUSH
75666: LD_INT 26
75668: PUSH
75669: LD_INT 27
75671: PUSH
75672: LD_INT 28
75674: PUSH
75675: LD_INT 30
75677: PUSH
75678: LD_INT 31
75680: PUSH
75681: LD_INT 32
75683: PUSH
75684: LD_INT 33
75686: PUSH
75687: LD_INT 34
75689: PUSH
75690: LD_INT 36
75692: PUSH
75693: EMPTY
75694: LIST
75695: LIST
75696: LIST
75697: LIST
75698: LIST
75699: LIST
75700: LIST
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: LIST
75722: LIST
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 101
75731: PUSH
75732: LD_INT 102
75734: PUSH
75735: LD_INT 103
75737: PUSH
75738: LD_INT 104
75740: PUSH
75741: LD_INT 105
75743: PUSH
75744: LD_INT 106
75746: PUSH
75747: LD_INT 107
75749: PUSH
75750: LD_INT 108
75752: PUSH
75753: LD_INT 109
75755: PUSH
75756: LD_INT 110
75758: PUSH
75759: LD_INT 111
75761: PUSH
75762: LD_INT 112
75764: PUSH
75765: LD_INT 113
75767: PUSH
75768: LD_INT 114
75770: PUSH
75771: LD_INT 116
75773: PUSH
75774: LD_INT 117
75776: PUSH
75777: LD_INT 118
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: PUSH
75799: EMPTY
75800: LIST
75801: LIST
75802: ST_TO_ADDR
75803: GO 77258
75805: LD_INT 13
75807: DOUBLE
75808: EQUAL
75809: IFTRUE 75813
75811: GO 76021
75813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75814: LD_ADDR_VAR 0 2
75818: PUSH
75819: LD_INT 1
75821: PUSH
75822: LD_INT 2
75824: PUSH
75825: LD_INT 3
75827: PUSH
75828: LD_INT 4
75830: PUSH
75831: LD_INT 5
75833: PUSH
75834: LD_INT 8
75836: PUSH
75837: LD_INT 9
75839: PUSH
75840: LD_INT 10
75842: PUSH
75843: LD_INT 11
75845: PUSH
75846: LD_INT 12
75848: PUSH
75849: LD_INT 14
75851: PUSH
75852: LD_INT 15
75854: PUSH
75855: LD_INT 16
75857: PUSH
75858: LD_INT 17
75860: PUSH
75861: LD_INT 18
75863: PUSH
75864: LD_INT 19
75866: PUSH
75867: LD_INT 20
75869: PUSH
75870: LD_INT 21
75872: PUSH
75873: LD_INT 22
75875: PUSH
75876: LD_INT 23
75878: PUSH
75879: LD_INT 24
75881: PUSH
75882: LD_INT 25
75884: PUSH
75885: LD_INT 26
75887: PUSH
75888: LD_INT 27
75890: PUSH
75891: LD_INT 28
75893: PUSH
75894: LD_INT 30
75896: PUSH
75897: LD_INT 31
75899: PUSH
75900: LD_INT 32
75902: PUSH
75903: LD_INT 33
75905: PUSH
75906: LD_INT 34
75908: PUSH
75909: LD_INT 36
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: LIST
75926: LIST
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 101
75947: PUSH
75948: LD_INT 102
75950: PUSH
75951: LD_INT 103
75953: PUSH
75954: LD_INT 104
75956: PUSH
75957: LD_INT 105
75959: PUSH
75960: LD_INT 106
75962: PUSH
75963: LD_INT 107
75965: PUSH
75966: LD_INT 108
75968: PUSH
75969: LD_INT 109
75971: PUSH
75972: LD_INT 110
75974: PUSH
75975: LD_INT 111
75977: PUSH
75978: LD_INT 112
75980: PUSH
75981: LD_INT 113
75983: PUSH
75984: LD_INT 114
75986: PUSH
75987: LD_INT 116
75989: PUSH
75990: LD_INT 117
75992: PUSH
75993: LD_INT 118
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: ST_TO_ADDR
76019: GO 77258
76021: LD_INT 14
76023: DOUBLE
76024: EQUAL
76025: IFTRUE 76029
76027: GO 76253
76029: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
76030: LD_ADDR_VAR 0 2
76034: PUSH
76035: LD_INT 1
76037: PUSH
76038: LD_INT 2
76040: PUSH
76041: LD_INT 3
76043: PUSH
76044: LD_INT 4
76046: PUSH
76047: LD_INT 5
76049: PUSH
76050: LD_INT 6
76052: PUSH
76053: LD_INT 7
76055: PUSH
76056: LD_INT 8
76058: PUSH
76059: LD_INT 9
76061: PUSH
76062: LD_INT 10
76064: PUSH
76065: LD_INT 11
76067: PUSH
76068: LD_INT 12
76070: PUSH
76071: LD_INT 13
76073: PUSH
76074: LD_INT 14
76076: PUSH
76077: LD_INT 15
76079: PUSH
76080: LD_INT 16
76082: PUSH
76083: LD_INT 17
76085: PUSH
76086: LD_INT 18
76088: PUSH
76089: LD_INT 19
76091: PUSH
76092: LD_INT 20
76094: PUSH
76095: LD_INT 21
76097: PUSH
76098: LD_INT 22
76100: PUSH
76101: LD_INT 23
76103: PUSH
76104: LD_INT 24
76106: PUSH
76107: LD_INT 25
76109: PUSH
76110: LD_INT 26
76112: PUSH
76113: LD_INT 27
76115: PUSH
76116: LD_INT 28
76118: PUSH
76119: LD_INT 29
76121: PUSH
76122: LD_INT 30
76124: PUSH
76125: LD_INT 31
76127: PUSH
76128: LD_INT 32
76130: PUSH
76131: LD_INT 33
76133: PUSH
76134: LD_INT 34
76136: PUSH
76137: LD_INT 36
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: LIST
76175: LIST
76176: PUSH
76177: LD_INT 101
76179: PUSH
76180: LD_INT 102
76182: PUSH
76183: LD_INT 103
76185: PUSH
76186: LD_INT 104
76188: PUSH
76189: LD_INT 105
76191: PUSH
76192: LD_INT 106
76194: PUSH
76195: LD_INT 107
76197: PUSH
76198: LD_INT 108
76200: PUSH
76201: LD_INT 109
76203: PUSH
76204: LD_INT 110
76206: PUSH
76207: LD_INT 111
76209: PUSH
76210: LD_INT 112
76212: PUSH
76213: LD_INT 113
76215: PUSH
76216: LD_INT 114
76218: PUSH
76219: LD_INT 116
76221: PUSH
76222: LD_INT 117
76224: PUSH
76225: LD_INT 118
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: ST_TO_ADDR
76251: GO 77258
76253: LD_INT 15
76255: DOUBLE
76256: EQUAL
76257: IFTRUE 76261
76259: GO 76485
76261: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76262: LD_ADDR_VAR 0 2
76266: PUSH
76267: LD_INT 1
76269: PUSH
76270: LD_INT 2
76272: PUSH
76273: LD_INT 3
76275: PUSH
76276: LD_INT 4
76278: PUSH
76279: LD_INT 5
76281: PUSH
76282: LD_INT 6
76284: PUSH
76285: LD_INT 7
76287: PUSH
76288: LD_INT 8
76290: PUSH
76291: LD_INT 9
76293: PUSH
76294: LD_INT 10
76296: PUSH
76297: LD_INT 11
76299: PUSH
76300: LD_INT 12
76302: PUSH
76303: LD_INT 13
76305: PUSH
76306: LD_INT 14
76308: PUSH
76309: LD_INT 15
76311: PUSH
76312: LD_INT 16
76314: PUSH
76315: LD_INT 17
76317: PUSH
76318: LD_INT 18
76320: PUSH
76321: LD_INT 19
76323: PUSH
76324: LD_INT 20
76326: PUSH
76327: LD_INT 21
76329: PUSH
76330: LD_INT 22
76332: PUSH
76333: LD_INT 23
76335: PUSH
76336: LD_INT 24
76338: PUSH
76339: LD_INT 25
76341: PUSH
76342: LD_INT 26
76344: PUSH
76345: LD_INT 27
76347: PUSH
76348: LD_INT 28
76350: PUSH
76351: LD_INT 29
76353: PUSH
76354: LD_INT 30
76356: PUSH
76357: LD_INT 31
76359: PUSH
76360: LD_INT 32
76362: PUSH
76363: LD_INT 33
76365: PUSH
76366: LD_INT 34
76368: PUSH
76369: LD_INT 36
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: PUSH
76409: LD_INT 101
76411: PUSH
76412: LD_INT 102
76414: PUSH
76415: LD_INT 103
76417: PUSH
76418: LD_INT 104
76420: PUSH
76421: LD_INT 105
76423: PUSH
76424: LD_INT 106
76426: PUSH
76427: LD_INT 107
76429: PUSH
76430: LD_INT 108
76432: PUSH
76433: LD_INT 109
76435: PUSH
76436: LD_INT 110
76438: PUSH
76439: LD_INT 111
76441: PUSH
76442: LD_INT 112
76444: PUSH
76445: LD_INT 113
76447: PUSH
76448: LD_INT 114
76450: PUSH
76451: LD_INT 116
76453: PUSH
76454: LD_INT 117
76456: PUSH
76457: LD_INT 118
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: PUSH
76479: EMPTY
76480: LIST
76481: LIST
76482: ST_TO_ADDR
76483: GO 77258
76485: LD_INT 16
76487: DOUBLE
76488: EQUAL
76489: IFTRUE 76493
76491: GO 76629
76493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76494: LD_ADDR_VAR 0 2
76498: PUSH
76499: LD_INT 2
76501: PUSH
76502: LD_INT 4
76504: PUSH
76505: LD_INT 5
76507: PUSH
76508: LD_INT 7
76510: PUSH
76511: LD_INT 11
76513: PUSH
76514: LD_INT 12
76516: PUSH
76517: LD_INT 15
76519: PUSH
76520: LD_INT 16
76522: PUSH
76523: LD_INT 20
76525: PUSH
76526: LD_INT 21
76528: PUSH
76529: LD_INT 22
76531: PUSH
76532: LD_INT 23
76534: PUSH
76535: LD_INT 25
76537: PUSH
76538: LD_INT 26
76540: PUSH
76541: LD_INT 30
76543: PUSH
76544: LD_INT 31
76546: PUSH
76547: LD_INT 32
76549: PUSH
76550: LD_INT 33
76552: PUSH
76553: LD_INT 34
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: LIST
76564: LIST
76565: LIST
76566: LIST
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: PUSH
76577: LD_INT 101
76579: PUSH
76580: LD_INT 102
76582: PUSH
76583: LD_INT 103
76585: PUSH
76586: LD_INT 106
76588: PUSH
76589: LD_INT 108
76591: PUSH
76592: LD_INT 112
76594: PUSH
76595: LD_INT 113
76597: PUSH
76598: LD_INT 114
76600: PUSH
76601: LD_INT 116
76603: PUSH
76604: LD_INT 117
76606: PUSH
76607: LD_INT 118
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: ST_TO_ADDR
76627: GO 77258
76629: LD_INT 17
76631: DOUBLE
76632: EQUAL
76633: IFTRUE 76637
76635: GO 76861
76637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76638: LD_ADDR_VAR 0 2
76642: PUSH
76643: LD_INT 1
76645: PUSH
76646: LD_INT 2
76648: PUSH
76649: LD_INT 3
76651: PUSH
76652: LD_INT 4
76654: PUSH
76655: LD_INT 5
76657: PUSH
76658: LD_INT 6
76660: PUSH
76661: LD_INT 7
76663: PUSH
76664: LD_INT 8
76666: PUSH
76667: LD_INT 9
76669: PUSH
76670: LD_INT 10
76672: PUSH
76673: LD_INT 11
76675: PUSH
76676: LD_INT 12
76678: PUSH
76679: LD_INT 13
76681: PUSH
76682: LD_INT 14
76684: PUSH
76685: LD_INT 15
76687: PUSH
76688: LD_INT 16
76690: PUSH
76691: LD_INT 17
76693: PUSH
76694: LD_INT 18
76696: PUSH
76697: LD_INT 19
76699: PUSH
76700: LD_INT 20
76702: PUSH
76703: LD_INT 21
76705: PUSH
76706: LD_INT 22
76708: PUSH
76709: LD_INT 23
76711: PUSH
76712: LD_INT 24
76714: PUSH
76715: LD_INT 25
76717: PUSH
76718: LD_INT 26
76720: PUSH
76721: LD_INT 27
76723: PUSH
76724: LD_INT 28
76726: PUSH
76727: LD_INT 29
76729: PUSH
76730: LD_INT 30
76732: PUSH
76733: LD_INT 31
76735: PUSH
76736: LD_INT 32
76738: PUSH
76739: LD_INT 33
76741: PUSH
76742: LD_INT 34
76744: PUSH
76745: LD_INT 36
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: LIST
76780: LIST
76781: LIST
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 101
76787: PUSH
76788: LD_INT 102
76790: PUSH
76791: LD_INT 103
76793: PUSH
76794: LD_INT 104
76796: PUSH
76797: LD_INT 105
76799: PUSH
76800: LD_INT 106
76802: PUSH
76803: LD_INT 107
76805: PUSH
76806: LD_INT 108
76808: PUSH
76809: LD_INT 109
76811: PUSH
76812: LD_INT 110
76814: PUSH
76815: LD_INT 111
76817: PUSH
76818: LD_INT 112
76820: PUSH
76821: LD_INT 113
76823: PUSH
76824: LD_INT 114
76826: PUSH
76827: LD_INT 116
76829: PUSH
76830: LD_INT 117
76832: PUSH
76833: LD_INT 118
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: ST_TO_ADDR
76859: GO 77258
76861: LD_INT 18
76863: DOUBLE
76864: EQUAL
76865: IFTRUE 76869
76867: GO 77017
76869: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76870: LD_ADDR_VAR 0 2
76874: PUSH
76875: LD_INT 2
76877: PUSH
76878: LD_INT 4
76880: PUSH
76881: LD_INT 5
76883: PUSH
76884: LD_INT 7
76886: PUSH
76887: LD_INT 11
76889: PUSH
76890: LD_INT 12
76892: PUSH
76893: LD_INT 15
76895: PUSH
76896: LD_INT 16
76898: PUSH
76899: LD_INT 20
76901: PUSH
76902: LD_INT 21
76904: PUSH
76905: LD_INT 22
76907: PUSH
76908: LD_INT 23
76910: PUSH
76911: LD_INT 25
76913: PUSH
76914: LD_INT 26
76916: PUSH
76917: LD_INT 30
76919: PUSH
76920: LD_INT 31
76922: PUSH
76923: LD_INT 32
76925: PUSH
76926: LD_INT 33
76928: PUSH
76929: LD_INT 34
76931: PUSH
76932: LD_INT 35
76934: PUSH
76935: LD_INT 36
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: LIST
76948: LIST
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: LIST
76956: LIST
76957: LIST
76958: LIST
76959: LIST
76960: PUSH
76961: LD_INT 101
76963: PUSH
76964: LD_INT 102
76966: PUSH
76967: LD_INT 103
76969: PUSH
76970: LD_INT 106
76972: PUSH
76973: LD_INT 108
76975: PUSH
76976: LD_INT 112
76978: PUSH
76979: LD_INT 113
76981: PUSH
76982: LD_INT 114
76984: PUSH
76985: LD_INT 115
76987: PUSH
76988: LD_INT 116
76990: PUSH
76991: LD_INT 117
76993: PUSH
76994: LD_INT 118
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: ST_TO_ADDR
77015: GO 77258
77017: LD_INT 19
77019: DOUBLE
77020: EQUAL
77021: IFTRUE 77025
77023: GO 77257
77025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
77026: LD_ADDR_VAR 0 2
77030: PUSH
77031: LD_INT 1
77033: PUSH
77034: LD_INT 2
77036: PUSH
77037: LD_INT 3
77039: PUSH
77040: LD_INT 4
77042: PUSH
77043: LD_INT 5
77045: PUSH
77046: LD_INT 6
77048: PUSH
77049: LD_INT 7
77051: PUSH
77052: LD_INT 8
77054: PUSH
77055: LD_INT 9
77057: PUSH
77058: LD_INT 10
77060: PUSH
77061: LD_INT 11
77063: PUSH
77064: LD_INT 12
77066: PUSH
77067: LD_INT 13
77069: PUSH
77070: LD_INT 14
77072: PUSH
77073: LD_INT 15
77075: PUSH
77076: LD_INT 16
77078: PUSH
77079: LD_INT 17
77081: PUSH
77082: LD_INT 18
77084: PUSH
77085: LD_INT 19
77087: PUSH
77088: LD_INT 20
77090: PUSH
77091: LD_INT 21
77093: PUSH
77094: LD_INT 22
77096: PUSH
77097: LD_INT 23
77099: PUSH
77100: LD_INT 24
77102: PUSH
77103: LD_INT 25
77105: PUSH
77106: LD_INT 26
77108: PUSH
77109: LD_INT 27
77111: PUSH
77112: LD_INT 28
77114: PUSH
77115: LD_INT 29
77117: PUSH
77118: LD_INT 30
77120: PUSH
77121: LD_INT 31
77123: PUSH
77124: LD_INT 32
77126: PUSH
77127: LD_INT 33
77129: PUSH
77130: LD_INT 34
77132: PUSH
77133: LD_INT 35
77135: PUSH
77136: LD_INT 36
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: LIST
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: LIST
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: PUSH
77177: LD_INT 101
77179: PUSH
77180: LD_INT 102
77182: PUSH
77183: LD_INT 103
77185: PUSH
77186: LD_INT 104
77188: PUSH
77189: LD_INT 105
77191: PUSH
77192: LD_INT 106
77194: PUSH
77195: LD_INT 107
77197: PUSH
77198: LD_INT 108
77200: PUSH
77201: LD_INT 109
77203: PUSH
77204: LD_INT 110
77206: PUSH
77207: LD_INT 111
77209: PUSH
77210: LD_INT 112
77212: PUSH
77213: LD_INT 113
77215: PUSH
77216: LD_INT 114
77218: PUSH
77219: LD_INT 115
77221: PUSH
77222: LD_INT 116
77224: PUSH
77225: LD_INT 117
77227: PUSH
77228: LD_INT 118
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: LIST
77235: LIST
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: LIST
77249: LIST
77250: PUSH
77251: EMPTY
77252: LIST
77253: LIST
77254: ST_TO_ADDR
77255: GO 77258
77257: POP
// end else
77258: GO 77489
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77260: LD_ADDR_VAR 0 2
77264: PUSH
77265: LD_INT 1
77267: PUSH
77268: LD_INT 2
77270: PUSH
77271: LD_INT 3
77273: PUSH
77274: LD_INT 4
77276: PUSH
77277: LD_INT 5
77279: PUSH
77280: LD_INT 6
77282: PUSH
77283: LD_INT 7
77285: PUSH
77286: LD_INT 8
77288: PUSH
77289: LD_INT 9
77291: PUSH
77292: LD_INT 10
77294: PUSH
77295: LD_INT 11
77297: PUSH
77298: LD_INT 12
77300: PUSH
77301: LD_INT 13
77303: PUSH
77304: LD_INT 14
77306: PUSH
77307: LD_INT 15
77309: PUSH
77310: LD_INT 16
77312: PUSH
77313: LD_INT 17
77315: PUSH
77316: LD_INT 18
77318: PUSH
77319: LD_INT 19
77321: PUSH
77322: LD_INT 20
77324: PUSH
77325: LD_INT 21
77327: PUSH
77328: LD_INT 22
77330: PUSH
77331: LD_INT 23
77333: PUSH
77334: LD_INT 24
77336: PUSH
77337: LD_INT 25
77339: PUSH
77340: LD_INT 26
77342: PUSH
77343: LD_INT 27
77345: PUSH
77346: LD_INT 28
77348: PUSH
77349: LD_INT 29
77351: PUSH
77352: LD_INT 30
77354: PUSH
77355: LD_INT 31
77357: PUSH
77358: LD_INT 32
77360: PUSH
77361: LD_INT 33
77363: PUSH
77364: LD_INT 34
77366: PUSH
77367: LD_INT 35
77369: PUSH
77370: LD_INT 36
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: LIST
77410: PUSH
77411: LD_INT 101
77413: PUSH
77414: LD_INT 102
77416: PUSH
77417: LD_INT 103
77419: PUSH
77420: LD_INT 104
77422: PUSH
77423: LD_INT 105
77425: PUSH
77426: LD_INT 106
77428: PUSH
77429: LD_INT 107
77431: PUSH
77432: LD_INT 108
77434: PUSH
77435: LD_INT 109
77437: PUSH
77438: LD_INT 110
77440: PUSH
77441: LD_INT 111
77443: PUSH
77444: LD_INT 112
77446: PUSH
77447: LD_INT 113
77449: PUSH
77450: LD_INT 114
77452: PUSH
77453: LD_INT 115
77455: PUSH
77456: LD_INT 116
77458: PUSH
77459: LD_INT 117
77461: PUSH
77462: LD_INT 118
77464: PUSH
77465: EMPTY
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: ST_TO_ADDR
// if result then
77489: LD_VAR 0 2
77493: IFFALSE 78279
// begin normal :=  ;
77495: LD_ADDR_VAR 0 5
77499: PUSH
77500: LD_STRING 
77502: ST_TO_ADDR
// hardcore :=  ;
77503: LD_ADDR_VAR 0 6
77507: PUSH
77508: LD_STRING 
77510: ST_TO_ADDR
// active :=  ;
77511: LD_ADDR_VAR 0 7
77515: PUSH
77516: LD_STRING 
77518: ST_TO_ADDR
// for i = 1 to normalCounter do
77519: LD_ADDR_VAR 0 8
77523: PUSH
77524: DOUBLE
77525: LD_INT 1
77527: DEC
77528: ST_TO_ADDR
77529: LD_EXP 67
77533: PUSH
77534: FOR_TO
77535: IFFALSE 77636
// begin tmp := 0 ;
77537: LD_ADDR_VAR 0 3
77541: PUSH
77542: LD_STRING 0
77544: ST_TO_ADDR
// if result [ 1 ] then
77545: LD_VAR 0 2
77549: PUSH
77550: LD_INT 1
77552: ARRAY
77553: IFFALSE 77618
// if result [ 1 ] [ 1 ] = i then
77555: LD_VAR 0 2
77559: PUSH
77560: LD_INT 1
77562: ARRAY
77563: PUSH
77564: LD_INT 1
77566: ARRAY
77567: PUSH
77568: LD_VAR 0 8
77572: EQUAL
77573: IFFALSE 77618
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77575: LD_ADDR_VAR 0 2
77579: PUSH
77580: LD_VAR 0 2
77584: PPUSH
77585: LD_INT 1
77587: PPUSH
77588: LD_VAR 0 2
77592: PUSH
77593: LD_INT 1
77595: ARRAY
77596: PPUSH
77597: LD_INT 1
77599: PPUSH
77600: CALL_OW 3
77604: PPUSH
77605: CALL_OW 1
77609: ST_TO_ADDR
// tmp := 1 ;
77610: LD_ADDR_VAR 0 3
77614: PUSH
77615: LD_STRING 1
77617: ST_TO_ADDR
// end ; normal := normal & tmp ;
77618: LD_ADDR_VAR 0 5
77622: PUSH
77623: LD_VAR 0 5
77627: PUSH
77628: LD_VAR 0 3
77632: STR
77633: ST_TO_ADDR
// end ;
77634: GO 77534
77636: POP
77637: POP
// for i = 1 to hardcoreCounter do
77638: LD_ADDR_VAR 0 8
77642: PUSH
77643: DOUBLE
77644: LD_INT 1
77646: DEC
77647: ST_TO_ADDR
77648: LD_EXP 68
77652: PUSH
77653: FOR_TO
77654: IFFALSE 77759
// begin tmp := 0 ;
77656: LD_ADDR_VAR 0 3
77660: PUSH
77661: LD_STRING 0
77663: ST_TO_ADDR
// if result [ 2 ] then
77664: LD_VAR 0 2
77668: PUSH
77669: LD_INT 2
77671: ARRAY
77672: IFFALSE 77741
// if result [ 2 ] [ 1 ] = 100 + i then
77674: LD_VAR 0 2
77678: PUSH
77679: LD_INT 2
77681: ARRAY
77682: PUSH
77683: LD_INT 1
77685: ARRAY
77686: PUSH
77687: LD_INT 100
77689: PUSH
77690: LD_VAR 0 8
77694: PLUS
77695: EQUAL
77696: IFFALSE 77741
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77698: LD_ADDR_VAR 0 2
77702: PUSH
77703: LD_VAR 0 2
77707: PPUSH
77708: LD_INT 2
77710: PPUSH
77711: LD_VAR 0 2
77715: PUSH
77716: LD_INT 2
77718: ARRAY
77719: PPUSH
77720: LD_INT 1
77722: PPUSH
77723: CALL_OW 3
77727: PPUSH
77728: CALL_OW 1
77732: ST_TO_ADDR
// tmp := 1 ;
77733: LD_ADDR_VAR 0 3
77737: PUSH
77738: LD_STRING 1
77740: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77741: LD_ADDR_VAR 0 6
77745: PUSH
77746: LD_VAR 0 6
77750: PUSH
77751: LD_VAR 0 3
77755: STR
77756: ST_TO_ADDR
// end ;
77757: GO 77653
77759: POP
77760: POP
// if isGameLoad then
77761: LD_VAR 0 1
77765: IFFALSE 78240
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77767: LD_ADDR_VAR 0 4
77771: PUSH
77772: LD_EXP 71
77776: PUSH
77777: LD_EXP 70
77781: PUSH
77782: LD_EXP 72
77786: PUSH
77787: LD_EXP 69
77791: PUSH
77792: LD_EXP 73
77796: PUSH
77797: LD_EXP 74
77801: PUSH
77802: LD_EXP 75
77806: PUSH
77807: LD_EXP 76
77811: PUSH
77812: LD_EXP 77
77816: PUSH
77817: LD_EXP 78
77821: PUSH
77822: LD_EXP 79
77826: PUSH
77827: LD_EXP 80
77831: PUSH
77832: LD_EXP 81
77836: PUSH
77837: LD_EXP 82
77841: PUSH
77842: LD_EXP 90
77846: PUSH
77847: LD_EXP 91
77851: PUSH
77852: LD_EXP 92
77856: PUSH
77857: LD_EXP 93
77861: PUSH
77862: LD_EXP 95
77866: PUSH
77867: LD_EXP 96
77871: PUSH
77872: LD_EXP 97
77876: PUSH
77877: LD_EXP 100
77881: PUSH
77882: LD_EXP 102
77886: PUSH
77887: LD_EXP 103
77891: PUSH
77892: LD_EXP 104
77896: PUSH
77897: LD_EXP 106
77901: PUSH
77902: LD_EXP 107
77906: PUSH
77907: LD_EXP 110
77911: PUSH
77912: LD_EXP 111
77916: PUSH
77917: LD_EXP 112
77921: PUSH
77922: LD_EXP 113
77926: PUSH
77927: LD_EXP 114
77931: PUSH
77932: LD_EXP 115
77936: PUSH
77937: LD_EXP 116
77941: PUSH
77942: LD_EXP 117
77946: PUSH
77947: LD_EXP 118
77951: PUSH
77952: LD_EXP 83
77956: PUSH
77957: LD_EXP 84
77961: PUSH
77962: LD_EXP 87
77966: PUSH
77967: LD_EXP 88
77971: PUSH
77972: LD_EXP 89
77976: PUSH
77977: LD_EXP 85
77981: PUSH
77982: LD_EXP 86
77986: PUSH
77987: LD_EXP 94
77991: PUSH
77992: LD_EXP 98
77996: PUSH
77997: LD_EXP 99
78001: PUSH
78002: LD_EXP 101
78006: PUSH
78007: LD_EXP 105
78011: PUSH
78012: LD_EXP 108
78016: PUSH
78017: LD_EXP 109
78021: PUSH
78022: LD_EXP 119
78026: PUSH
78027: LD_EXP 120
78031: PUSH
78032: LD_EXP 121
78036: PUSH
78037: LD_EXP 122
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: LIST
78046: LIST
78047: LIST
78048: LIST
78049: LIST
78050: LIST
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: LIST
78078: LIST
78079: LIST
78080: LIST
78081: LIST
78082: LIST
78083: LIST
78084: LIST
78085: LIST
78086: LIST
78087: LIST
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: ST_TO_ADDR
// tmp :=  ;
78098: LD_ADDR_VAR 0 3
78102: PUSH
78103: LD_STRING 
78105: ST_TO_ADDR
// for i = 1 to normalCounter do
78106: LD_ADDR_VAR 0 8
78110: PUSH
78111: DOUBLE
78112: LD_INT 1
78114: DEC
78115: ST_TO_ADDR
78116: LD_EXP 67
78120: PUSH
78121: FOR_TO
78122: IFFALSE 78158
// begin if flags [ i ] then
78124: LD_VAR 0 4
78128: PUSH
78129: LD_VAR 0 8
78133: ARRAY
78134: IFFALSE 78156
// tmp := tmp & i & ; ;
78136: LD_ADDR_VAR 0 3
78140: PUSH
78141: LD_VAR 0 3
78145: PUSH
78146: LD_VAR 0 8
78150: STR
78151: PUSH
78152: LD_STRING ;
78154: STR
78155: ST_TO_ADDR
// end ;
78156: GO 78121
78158: POP
78159: POP
// for i = 1 to hardcoreCounter do
78160: LD_ADDR_VAR 0 8
78164: PUSH
78165: DOUBLE
78166: LD_INT 1
78168: DEC
78169: ST_TO_ADDR
78170: LD_EXP 68
78174: PUSH
78175: FOR_TO
78176: IFFALSE 78222
// begin if flags [ normalCounter + i ] then
78178: LD_VAR 0 4
78182: PUSH
78183: LD_EXP 67
78187: PUSH
78188: LD_VAR 0 8
78192: PLUS
78193: ARRAY
78194: IFFALSE 78220
// tmp := tmp & ( 100 + i ) & ; ;
78196: LD_ADDR_VAR 0 3
78200: PUSH
78201: LD_VAR 0 3
78205: PUSH
78206: LD_INT 100
78208: PUSH
78209: LD_VAR 0 8
78213: PLUS
78214: STR
78215: PUSH
78216: LD_STRING ;
78218: STR
78219: ST_TO_ADDR
// end ;
78220: GO 78175
78222: POP
78223: POP
// if tmp then
78224: LD_VAR 0 3
78228: IFFALSE 78240
// active := tmp ;
78230: LD_ADDR_VAR 0 7
78234: PUSH
78235: LD_VAR 0 3
78239: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78240: LD_STRING getStreamItemsFromMission("
78242: PUSH
78243: LD_VAR 0 5
78247: STR
78248: PUSH
78249: LD_STRING ","
78251: STR
78252: PUSH
78253: LD_VAR 0 6
78257: STR
78258: PUSH
78259: LD_STRING ","
78261: STR
78262: PUSH
78263: LD_VAR 0 7
78267: STR
78268: PUSH
78269: LD_STRING ")
78271: STR
78272: PPUSH
78273: CALL_OW 559
// end else
78277: GO 78286
// ToLua ( getStreamItemsFromMission("","","") ) ;
78279: LD_STRING getStreamItemsFromMission("","","")
78281: PPUSH
78282: CALL_OW 559
// end ;
78286: LD_VAR 0 2
78290: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78291: LD_EXP 66
78295: IFFALSE 78303
78297: PUSH
78298: LD_EXP 71
78302: AND
78303: IFFALSE 78427
78305: GO 78307
78307: DISABLE
78308: LD_INT 0
78310: PPUSH
78311: PPUSH
// begin enable ;
78312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78313: LD_ADDR_VAR 0 2
78317: PUSH
78318: LD_INT 22
78320: PUSH
78321: LD_OWVAR 2
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PUSH
78330: LD_INT 2
78332: PUSH
78333: LD_INT 34
78335: PUSH
78336: LD_INT 7
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: LD_INT 34
78345: PUSH
78346: LD_INT 45
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: LD_INT 34
78355: PUSH
78356: LD_INT 28
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PUSH
78363: LD_INT 34
78365: PUSH
78366: LD_INT 47
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PPUSH
78384: CALL_OW 69
78388: ST_TO_ADDR
// if not tmp then
78389: LD_VAR 0 2
78393: NOT
78394: IFFALSE 78398
// exit ;
78396: GO 78427
// for i in tmp do
78398: LD_ADDR_VAR 0 1
78402: PUSH
78403: LD_VAR 0 2
78407: PUSH
78408: FOR_IN
78409: IFFALSE 78425
// begin SetLives ( i , 0 ) ;
78411: LD_VAR 0 1
78415: PPUSH
78416: LD_INT 0
78418: PPUSH
78419: CALL_OW 234
// end ;
78423: GO 78408
78425: POP
78426: POP
// end ;
78427: PPOPN 2
78429: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78430: LD_EXP 66
78434: IFFALSE 78442
78436: PUSH
78437: LD_EXP 72
78441: AND
78442: IFFALSE 78526
78444: GO 78446
78446: DISABLE
78447: LD_INT 0
78449: PPUSH
78450: PPUSH
// begin enable ;
78451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78452: LD_ADDR_VAR 0 2
78456: PUSH
78457: LD_INT 22
78459: PUSH
78460: LD_OWVAR 2
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PUSH
78469: LD_INT 32
78471: PUSH
78472: LD_INT 3
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: PPUSH
78483: CALL_OW 69
78487: ST_TO_ADDR
// if not tmp then
78488: LD_VAR 0 2
78492: NOT
78493: IFFALSE 78497
// exit ;
78495: GO 78526
// for i in tmp do
78497: LD_ADDR_VAR 0 1
78501: PUSH
78502: LD_VAR 0 2
78506: PUSH
78507: FOR_IN
78508: IFFALSE 78524
// begin SetLives ( i , 0 ) ;
78510: LD_VAR 0 1
78514: PPUSH
78515: LD_INT 0
78517: PPUSH
78518: CALL_OW 234
// end ;
78522: GO 78507
78524: POP
78525: POP
// end ;
78526: PPOPN 2
78528: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78529: LD_EXP 66
78533: IFFALSE 78541
78535: PUSH
78536: LD_EXP 69
78540: AND
78541: IFFALSE 78634
78543: GO 78545
78545: DISABLE
78546: LD_INT 0
78548: PPUSH
// begin enable ;
78549: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78550: LD_ADDR_VAR 0 1
78554: PUSH
78555: LD_INT 22
78557: PUSH
78558: LD_OWVAR 2
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 2
78569: PUSH
78570: LD_INT 25
78572: PUSH
78573: LD_INT 5
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 25
78582: PUSH
78583: LD_INT 9
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: LD_INT 25
78592: PUSH
78593: LD_INT 8
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: LIST
78604: LIST
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PPUSH
78610: CALL_OW 69
78614: PUSH
78615: FOR_IN
78616: IFFALSE 78632
// begin SetClass ( i , 1 ) ;
78618: LD_VAR 0 1
78622: PPUSH
78623: LD_INT 1
78625: PPUSH
78626: CALL_OW 336
// end ;
78630: GO 78615
78632: POP
78633: POP
// end ;
78634: PPOPN 1
78636: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78637: LD_EXP 66
78641: IFFALSE 78649
78643: PUSH
78644: LD_EXP 70
78648: AND
78649: IFFALSE 78661
78651: PUSH
78652: LD_OWVAR 65
78656: PUSH
78657: LD_INT 7
78659: LESS
78660: AND
78661: IFFALSE 78675
78663: GO 78665
78665: DISABLE
// begin enable ;
78666: ENABLE
// game_speed := 7 ;
78667: LD_ADDR_OWVAR 65
78671: PUSH
78672: LD_INT 7
78674: ST_TO_ADDR
// end ;
78675: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78676: LD_EXP 66
78680: IFFALSE 78688
78682: PUSH
78683: LD_EXP 73
78687: AND
78688: IFFALSE 78890
78690: GO 78692
78692: DISABLE
78693: LD_INT 0
78695: PPUSH
78696: PPUSH
78697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78698: LD_ADDR_VAR 0 3
78702: PUSH
78703: LD_INT 81
78705: PUSH
78706: LD_OWVAR 2
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: PUSH
78715: LD_INT 21
78717: PUSH
78718: LD_INT 1
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PPUSH
78729: CALL_OW 69
78733: ST_TO_ADDR
// if not tmp then
78734: LD_VAR 0 3
78738: NOT
78739: IFFALSE 78743
// exit ;
78741: GO 78890
// if tmp > 5 then
78743: LD_VAR 0 3
78747: PUSH
78748: LD_INT 5
78750: GREATER
78751: IFFALSE 78763
// k := 5 else
78753: LD_ADDR_VAR 0 2
78757: PUSH
78758: LD_INT 5
78760: ST_TO_ADDR
78761: GO 78773
// k := tmp ;
78763: LD_ADDR_VAR 0 2
78767: PUSH
78768: LD_VAR 0 3
78772: ST_TO_ADDR
// for i := 1 to k do
78773: LD_ADDR_VAR 0 1
78777: PUSH
78778: DOUBLE
78779: LD_INT 1
78781: DEC
78782: ST_TO_ADDR
78783: LD_VAR 0 2
78787: PUSH
78788: FOR_TO
78789: IFFALSE 78888
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78791: LD_VAR 0 3
78795: PUSH
78796: LD_VAR 0 1
78800: ARRAY
78801: PPUSH
78802: LD_VAR 0 1
78806: PUSH
78807: LD_INT 4
78809: MOD
78810: PUSH
78811: LD_INT 1
78813: PLUS
78814: PPUSH
78815: CALL_OW 259
78819: PUSH
78820: LD_INT 10
78822: LESS
78823: IFFALSE 78886
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78825: LD_VAR 0 3
78829: PUSH
78830: LD_VAR 0 1
78834: ARRAY
78835: PPUSH
78836: LD_VAR 0 1
78840: PUSH
78841: LD_INT 4
78843: MOD
78844: PUSH
78845: LD_INT 1
78847: PLUS
78848: PPUSH
78849: LD_VAR 0 3
78853: PUSH
78854: LD_VAR 0 1
78858: ARRAY
78859: PPUSH
78860: LD_VAR 0 1
78864: PUSH
78865: LD_INT 4
78867: MOD
78868: PUSH
78869: LD_INT 1
78871: PLUS
78872: PPUSH
78873: CALL_OW 259
78877: PUSH
78878: LD_INT 1
78880: PLUS
78881: PPUSH
78882: CALL_OW 237
78886: GO 78788
78888: POP
78889: POP
// end ;
78890: PPOPN 3
78892: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78893: LD_EXP 66
78897: IFFALSE 78905
78899: PUSH
78900: LD_EXP 74
78904: AND
78905: IFFALSE 78925
78907: GO 78909
78909: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78910: LD_INT 4
78912: PPUSH
78913: LD_OWVAR 2
78917: PPUSH
78918: LD_INT 0
78920: PPUSH
78921: CALL_OW 324
78925: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78926: LD_EXP 66
78930: IFFALSE 78938
78932: PUSH
78933: LD_EXP 103
78937: AND
78938: IFFALSE 78958
78940: GO 78942
78942: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78943: LD_INT 19
78945: PPUSH
78946: LD_OWVAR 2
78950: PPUSH
78951: LD_INT 0
78953: PPUSH
78954: CALL_OW 324
78958: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78959: LD_EXP 66
78963: IFFALSE 78971
78965: PUSH
78966: LD_EXP 75
78970: AND
78971: IFFALSE 79073
78973: GO 78975
78975: DISABLE
78976: LD_INT 0
78978: PPUSH
78979: PPUSH
// begin enable ;
78980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78981: LD_ADDR_VAR 0 2
78985: PUSH
78986: LD_INT 22
78988: PUSH
78989: LD_OWVAR 2
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: PUSH
78998: LD_INT 2
79000: PUSH
79001: LD_INT 34
79003: PUSH
79004: LD_INT 11
79006: PUSH
79007: EMPTY
79008: LIST
79009: LIST
79010: PUSH
79011: LD_INT 34
79013: PUSH
79014: LD_INT 30
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: PUSH
79021: EMPTY
79022: LIST
79023: LIST
79024: LIST
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PPUSH
79030: CALL_OW 69
79034: ST_TO_ADDR
// if not tmp then
79035: LD_VAR 0 2
79039: NOT
79040: IFFALSE 79044
// exit ;
79042: GO 79073
// for i in tmp do
79044: LD_ADDR_VAR 0 1
79048: PUSH
79049: LD_VAR 0 2
79053: PUSH
79054: FOR_IN
79055: IFFALSE 79071
// begin SetLives ( i , 0 ) ;
79057: LD_VAR 0 1
79061: PPUSH
79062: LD_INT 0
79064: PPUSH
79065: CALL_OW 234
// end ;
79069: GO 79054
79071: POP
79072: POP
// end ;
79073: PPOPN 2
79075: END
// every 0 0$1 trigger StreamModeActive and sBunker do
79076: LD_EXP 66
79080: IFFALSE 79088
79082: PUSH
79083: LD_EXP 76
79087: AND
79088: IFFALSE 79108
79090: GO 79092
79092: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
79093: LD_INT 32
79095: PPUSH
79096: LD_OWVAR 2
79100: PPUSH
79101: LD_INT 0
79103: PPUSH
79104: CALL_OW 324
79108: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
79109: LD_EXP 66
79113: IFFALSE 79121
79115: PUSH
79116: LD_EXP 77
79120: AND
79121: IFFALSE 79304
79123: GO 79125
79125: DISABLE
79126: LD_INT 0
79128: PPUSH
79129: PPUSH
79130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
79131: LD_ADDR_VAR 0 2
79135: PUSH
79136: LD_INT 22
79138: PUSH
79139: LD_OWVAR 2
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: PUSH
79148: LD_INT 33
79150: PUSH
79151: LD_INT 3
79153: PUSH
79154: EMPTY
79155: LIST
79156: LIST
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PPUSH
79162: CALL_OW 69
79166: ST_TO_ADDR
// if not tmp then
79167: LD_VAR 0 2
79171: NOT
79172: IFFALSE 79176
// exit ;
79174: GO 79304
// side := 0 ;
79176: LD_ADDR_VAR 0 3
79180: PUSH
79181: LD_INT 0
79183: ST_TO_ADDR
// for i := 1 to 8 do
79184: LD_ADDR_VAR 0 1
79188: PUSH
79189: DOUBLE
79190: LD_INT 1
79192: DEC
79193: ST_TO_ADDR
79194: LD_INT 8
79196: PUSH
79197: FOR_TO
79198: IFFALSE 79248
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79200: LD_OWVAR 2
79204: PUSH
79205: LD_VAR 0 1
79209: NONEQUAL
79210: IFFALSE 79232
79212: PUSH
79213: LD_OWVAR 2
79217: PPUSH
79218: LD_VAR 0 1
79222: PPUSH
79223: CALL_OW 81
79227: PUSH
79228: LD_INT 2
79230: EQUAL
79231: AND
79232: IFFALSE 79246
// begin side := i ;
79234: LD_ADDR_VAR 0 3
79238: PUSH
79239: LD_VAR 0 1
79243: ST_TO_ADDR
// break ;
79244: GO 79248
// end ;
79246: GO 79197
79248: POP
79249: POP
// if not side then
79250: LD_VAR 0 3
79254: NOT
79255: IFFALSE 79259
// exit ;
79257: GO 79304
// for i := 1 to tmp do
79259: LD_ADDR_VAR 0 1
79263: PUSH
79264: DOUBLE
79265: LD_INT 1
79267: DEC
79268: ST_TO_ADDR
79269: LD_VAR 0 2
79273: PUSH
79274: FOR_TO
79275: IFFALSE 79302
// if Prob ( 60 ) then
79277: LD_INT 60
79279: PPUSH
79280: CALL_OW 13
79284: IFFALSE 79300
// SetSide ( i , side ) ;
79286: LD_VAR 0 1
79290: PPUSH
79291: LD_VAR 0 3
79295: PPUSH
79296: CALL_OW 235
79300: GO 79274
79302: POP
79303: POP
// end ;
79304: PPOPN 3
79306: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79307: LD_EXP 66
79311: IFFALSE 79319
79313: PUSH
79314: LD_EXP 79
79318: AND
79319: IFFALSE 79438
79321: GO 79323
79323: DISABLE
79324: LD_INT 0
79326: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79327: LD_ADDR_VAR 0 1
79331: PUSH
79332: LD_INT 22
79334: PUSH
79335: LD_OWVAR 2
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: PUSH
79344: LD_INT 21
79346: PUSH
79347: LD_INT 1
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PUSH
79354: LD_INT 3
79356: PUSH
79357: LD_INT 23
79359: PUSH
79360: LD_INT 0
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: LIST
79375: PPUSH
79376: CALL_OW 69
79380: PUSH
79381: FOR_IN
79382: IFFALSE 79436
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79384: LD_VAR 0 1
79388: PPUSH
79389: CALL_OW 257
79393: PUSH
79394: LD_INT 1
79396: PUSH
79397: LD_INT 2
79399: PUSH
79400: LD_INT 3
79402: PUSH
79403: LD_INT 4
79405: PUSH
79406: EMPTY
79407: LIST
79408: LIST
79409: LIST
79410: LIST
79411: IN
79412: IFFALSE 79434
// SetClass ( un , rand ( 1 , 4 ) ) ;
79414: LD_VAR 0 1
79418: PPUSH
79419: LD_INT 1
79421: PPUSH
79422: LD_INT 4
79424: PPUSH
79425: CALL_OW 12
79429: PPUSH
79430: CALL_OW 336
79434: GO 79381
79436: POP
79437: POP
// end ;
79438: PPOPN 1
79440: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79441: LD_EXP 66
79445: IFFALSE 79453
79447: PUSH
79448: LD_EXP 78
79452: AND
79453: IFFALSE 79532
79455: GO 79457
79457: DISABLE
79458: LD_INT 0
79460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79461: LD_ADDR_VAR 0 1
79465: PUSH
79466: LD_INT 22
79468: PUSH
79469: LD_OWVAR 2
79473: PUSH
79474: EMPTY
79475: LIST
79476: LIST
79477: PUSH
79478: LD_INT 21
79480: PUSH
79481: LD_INT 3
79483: PUSH
79484: EMPTY
79485: LIST
79486: LIST
79487: PUSH
79488: EMPTY
79489: LIST
79490: LIST
79491: PPUSH
79492: CALL_OW 69
79496: ST_TO_ADDR
// if not tmp then
79497: LD_VAR 0 1
79501: NOT
79502: IFFALSE 79506
// exit ;
79504: GO 79532
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79506: LD_VAR 0 1
79510: PUSH
79511: LD_INT 1
79513: PPUSH
79514: LD_VAR 0 1
79518: PPUSH
79519: CALL_OW 12
79523: ARRAY
79524: PPUSH
79525: LD_INT 100
79527: PPUSH
79528: CALL_OW 234
// end ;
79532: PPOPN 1
79534: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79535: LD_EXP 66
79539: IFFALSE 79547
79541: PUSH
79542: LD_EXP 80
79546: AND
79547: IFFALSE 79645
79549: GO 79551
79551: DISABLE
79552: LD_INT 0
79554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79555: LD_ADDR_VAR 0 1
79559: PUSH
79560: LD_INT 22
79562: PUSH
79563: LD_OWVAR 2
79567: PUSH
79568: EMPTY
79569: LIST
79570: LIST
79571: PUSH
79572: LD_INT 21
79574: PUSH
79575: LD_INT 1
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PPUSH
79586: CALL_OW 69
79590: ST_TO_ADDR
// if not tmp then
79591: LD_VAR 0 1
79595: NOT
79596: IFFALSE 79600
// exit ;
79598: GO 79645
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79600: LD_VAR 0 1
79604: PUSH
79605: LD_INT 1
79607: PPUSH
79608: LD_VAR 0 1
79612: PPUSH
79613: CALL_OW 12
79617: ARRAY
79618: PPUSH
79619: LD_INT 1
79621: PPUSH
79622: LD_INT 4
79624: PPUSH
79625: CALL_OW 12
79629: PPUSH
79630: LD_INT 3000
79632: PPUSH
79633: LD_INT 9000
79635: PPUSH
79636: CALL_OW 12
79640: PPUSH
79641: CALL_OW 492
// end ;
79645: PPOPN 1
79647: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79648: LD_EXP 66
79652: IFFALSE 79660
79654: PUSH
79655: LD_EXP 81
79659: AND
79660: IFFALSE 79680
79662: GO 79664
79664: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79665: LD_INT 1
79667: PPUSH
79668: LD_OWVAR 2
79672: PPUSH
79673: LD_INT 0
79675: PPUSH
79676: CALL_OW 324
79680: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79681: LD_EXP 66
79685: IFFALSE 79693
79687: PUSH
79688: LD_EXP 82
79692: AND
79693: IFFALSE 79776
79695: GO 79697
79697: DISABLE
79698: LD_INT 0
79700: PPUSH
79701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79702: LD_ADDR_VAR 0 2
79706: PUSH
79707: LD_INT 22
79709: PUSH
79710: LD_OWVAR 2
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 21
79721: PUSH
79722: LD_INT 3
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: EMPTY
79730: LIST
79731: LIST
79732: PPUSH
79733: CALL_OW 69
79737: ST_TO_ADDR
// if not tmp then
79738: LD_VAR 0 2
79742: NOT
79743: IFFALSE 79747
// exit ;
79745: GO 79776
// for i in tmp do
79747: LD_ADDR_VAR 0 1
79751: PUSH
79752: LD_VAR 0 2
79756: PUSH
79757: FOR_IN
79758: IFFALSE 79774
// SetBLevel ( i , 10 ) ;
79760: LD_VAR 0 1
79764: PPUSH
79765: LD_INT 10
79767: PPUSH
79768: CALL_OW 241
79772: GO 79757
79774: POP
79775: POP
// end ;
79776: PPOPN 2
79778: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79779: LD_EXP 66
79783: IFFALSE 79791
79785: PUSH
79786: LD_EXP 83
79790: AND
79791: IFFALSE 79902
79793: GO 79795
79795: DISABLE
79796: LD_INT 0
79798: PPUSH
79799: PPUSH
79800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79801: LD_ADDR_VAR 0 3
79805: PUSH
79806: LD_INT 22
79808: PUSH
79809: LD_OWVAR 2
79813: PUSH
79814: EMPTY
79815: LIST
79816: LIST
79817: PUSH
79818: LD_INT 25
79820: PUSH
79821: LD_INT 1
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: PUSH
79828: EMPTY
79829: LIST
79830: LIST
79831: PPUSH
79832: CALL_OW 69
79836: ST_TO_ADDR
// if not tmp then
79837: LD_VAR 0 3
79841: NOT
79842: IFFALSE 79846
// exit ;
79844: GO 79902
// un := tmp [ rand ( 1 , tmp ) ] ;
79846: LD_ADDR_VAR 0 2
79850: PUSH
79851: LD_VAR 0 3
79855: PUSH
79856: LD_INT 1
79858: PPUSH
79859: LD_VAR 0 3
79863: PPUSH
79864: CALL_OW 12
79868: ARRAY
79869: ST_TO_ADDR
// if Crawls ( un ) then
79870: LD_VAR 0 2
79874: PPUSH
79875: CALL_OW 318
79879: IFFALSE 79890
// ComWalk ( un ) ;
79881: LD_VAR 0 2
79885: PPUSH
79886: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79890: LD_VAR 0 2
79894: PPUSH
79895: LD_INT 5
79897: PPUSH
79898: CALL_OW 336
// end ;
79902: PPOPN 3
79904: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79905: LD_EXP 66
79909: IFFALSE 79917
79911: PUSH
79912: LD_EXP 84
79916: AND
79917: IFFALSE 79929
79919: PUSH
79920: LD_OWVAR 67
79924: PUSH
79925: LD_INT 4
79927: LESS
79928: AND
79929: IFFALSE 79948
79931: GO 79933
79933: DISABLE
// begin Difficulty := Difficulty + 1 ;
79934: LD_ADDR_OWVAR 67
79938: PUSH
79939: LD_OWVAR 67
79943: PUSH
79944: LD_INT 1
79946: PLUS
79947: ST_TO_ADDR
// end ;
79948: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79949: LD_EXP 66
79953: IFFALSE 79961
79955: PUSH
79956: LD_EXP 85
79960: AND
79961: IFFALSE 80064
79963: GO 79965
79965: DISABLE
79966: LD_INT 0
79968: PPUSH
// begin for i := 1 to 5 do
79969: LD_ADDR_VAR 0 1
79973: PUSH
79974: DOUBLE
79975: LD_INT 1
79977: DEC
79978: ST_TO_ADDR
79979: LD_INT 5
79981: PUSH
79982: FOR_TO
79983: IFFALSE 80062
// begin uc_nation := nation_nature ;
79985: LD_ADDR_OWVAR 21
79989: PUSH
79990: LD_INT 0
79992: ST_TO_ADDR
// uc_side := 0 ;
79993: LD_ADDR_OWVAR 20
79997: PUSH
79998: LD_INT 0
80000: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80001: LD_ADDR_OWVAR 29
80005: PUSH
80006: LD_INT 12
80008: PUSH
80009: LD_INT 12
80011: PUSH
80012: EMPTY
80013: LIST
80014: LIST
80015: ST_TO_ADDR
// hc_agressivity := 20 ;
80016: LD_ADDR_OWVAR 35
80020: PUSH
80021: LD_INT 20
80023: ST_TO_ADDR
// hc_class := class_tiger ;
80024: LD_ADDR_OWVAR 28
80028: PUSH
80029: LD_INT 14
80031: ST_TO_ADDR
// hc_gallery :=  ;
80032: LD_ADDR_OWVAR 33
80036: PUSH
80037: LD_STRING 
80039: ST_TO_ADDR
// hc_name :=  ;
80040: LD_ADDR_OWVAR 26
80044: PUSH
80045: LD_STRING 
80047: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
80048: CALL_OW 44
80052: PPUSH
80053: LD_INT 0
80055: PPUSH
80056: CALL_OW 51
// end ;
80060: GO 79982
80062: POP
80063: POP
// end ;
80064: PPOPN 1
80066: END
// every 0 0$1 trigger StreamModeActive and sBomb do
80067: LD_EXP 66
80071: IFFALSE 80079
80073: PUSH
80074: LD_EXP 86
80078: AND
80079: IFFALSE 80088
80081: GO 80083
80083: DISABLE
// StreamSibBomb ;
80084: CALL 80089 0 0
80088: END
// export function StreamSibBomb ; var i , x , y ; begin
80089: LD_INT 0
80091: PPUSH
80092: PPUSH
80093: PPUSH
80094: PPUSH
// result := false ;
80095: LD_ADDR_VAR 0 1
80099: PUSH
80100: LD_INT 0
80102: ST_TO_ADDR
// for i := 1 to 16 do
80103: LD_ADDR_VAR 0 2
80107: PUSH
80108: DOUBLE
80109: LD_INT 1
80111: DEC
80112: ST_TO_ADDR
80113: LD_INT 16
80115: PUSH
80116: FOR_TO
80117: IFFALSE 80316
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80119: LD_ADDR_VAR 0 3
80123: PUSH
80124: LD_INT 10
80126: PUSH
80127: LD_INT 20
80129: PUSH
80130: LD_INT 30
80132: PUSH
80133: LD_INT 40
80135: PUSH
80136: LD_INT 50
80138: PUSH
80139: LD_INT 60
80141: PUSH
80142: LD_INT 70
80144: PUSH
80145: LD_INT 80
80147: PUSH
80148: LD_INT 90
80150: PUSH
80151: LD_INT 100
80153: PUSH
80154: LD_INT 110
80156: PUSH
80157: LD_INT 120
80159: PUSH
80160: LD_INT 130
80162: PUSH
80163: LD_INT 140
80165: PUSH
80166: LD_INT 150
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: PUSH
80186: LD_INT 1
80188: PPUSH
80189: LD_INT 15
80191: PPUSH
80192: CALL_OW 12
80196: ARRAY
80197: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80198: LD_ADDR_VAR 0 4
80202: PUSH
80203: LD_INT 10
80205: PUSH
80206: LD_INT 20
80208: PUSH
80209: LD_INT 30
80211: PUSH
80212: LD_INT 40
80214: PUSH
80215: LD_INT 50
80217: PUSH
80218: LD_INT 60
80220: PUSH
80221: LD_INT 70
80223: PUSH
80224: LD_INT 80
80226: PUSH
80227: LD_INT 90
80229: PUSH
80230: LD_INT 100
80232: PUSH
80233: LD_INT 110
80235: PUSH
80236: LD_INT 120
80238: PUSH
80239: LD_INT 130
80241: PUSH
80242: LD_INT 140
80244: PUSH
80245: LD_INT 150
80247: PUSH
80248: EMPTY
80249: LIST
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: LIST
80264: PUSH
80265: LD_INT 1
80267: PPUSH
80268: LD_INT 15
80270: PPUSH
80271: CALL_OW 12
80275: ARRAY
80276: ST_TO_ADDR
// if ValidHex ( x , y ) then
80277: LD_VAR 0 3
80281: PPUSH
80282: LD_VAR 0 4
80286: PPUSH
80287: CALL_OW 488
80291: IFFALSE 80314
// begin result := [ x , y ] ;
80293: LD_ADDR_VAR 0 1
80297: PUSH
80298: LD_VAR 0 3
80302: PUSH
80303: LD_VAR 0 4
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: ST_TO_ADDR
// break ;
80312: GO 80316
// end ; end ;
80314: GO 80116
80316: POP
80317: POP
// if result then
80318: LD_VAR 0 1
80322: IFFALSE 80382
// begin ToLua ( playSibBomb() ) ;
80324: LD_STRING playSibBomb()
80326: PPUSH
80327: CALL_OW 559
// wait ( 0 0$14 ) ;
80331: LD_INT 490
80333: PPUSH
80334: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80338: LD_VAR 0 1
80342: PUSH
80343: LD_INT 1
80345: ARRAY
80346: PPUSH
80347: LD_VAR 0 1
80351: PUSH
80352: LD_INT 2
80354: ARRAY
80355: PPUSH
80356: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80360: LD_VAR 0 1
80364: PUSH
80365: LD_INT 1
80367: ARRAY
80368: PPUSH
80369: LD_VAR 0 1
80373: PUSH
80374: LD_INT 2
80376: ARRAY
80377: PPUSH
80378: CALL_OW 429
// end ; end ;
80382: LD_VAR 0 1
80386: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80387: LD_EXP 66
80391: IFFALSE 80399
80393: PUSH
80394: LD_EXP 88
80398: AND
80399: IFFALSE 80411
80401: GO 80403
80403: DISABLE
// YouLost (  ) ;
80404: LD_STRING 
80406: PPUSH
80407: CALL_OW 104
80411: END
// every 0 0$1 trigger StreamModeActive and sFog do
80412: LD_EXP 66
80416: IFFALSE 80424
80418: PUSH
80419: LD_EXP 87
80423: AND
80424: IFFALSE 80438
80426: GO 80428
80428: DISABLE
// FogOff ( your_side ) ;
80429: LD_OWVAR 2
80433: PPUSH
80434: CALL_OW 344
80438: END
// every 0 0$1 trigger StreamModeActive and sSun do
80439: LD_EXP 66
80443: IFFALSE 80451
80445: PUSH
80446: LD_EXP 89
80450: AND
80451: IFFALSE 80479
80453: GO 80455
80455: DISABLE
// begin solar_recharge_percent := 0 ;
80456: LD_ADDR_OWVAR 79
80460: PUSH
80461: LD_INT 0
80463: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80464: LD_INT 10500
80466: PPUSH
80467: CALL_OW 67
// solar_recharge_percent := 100 ;
80471: LD_ADDR_OWVAR 79
80475: PUSH
80476: LD_INT 100
80478: ST_TO_ADDR
// end ;
80479: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80480: LD_EXP 66
80484: IFFALSE 80492
80486: PUSH
80487: LD_EXP 90
80491: AND
80492: IFFALSE 80731
80494: GO 80496
80496: DISABLE
80497: LD_INT 0
80499: PPUSH
80500: PPUSH
80501: PPUSH
// begin tmp := [ ] ;
80502: LD_ADDR_VAR 0 3
80506: PUSH
80507: EMPTY
80508: ST_TO_ADDR
// for i := 1 to 6 do
80509: LD_ADDR_VAR 0 1
80513: PUSH
80514: DOUBLE
80515: LD_INT 1
80517: DEC
80518: ST_TO_ADDR
80519: LD_INT 6
80521: PUSH
80522: FOR_TO
80523: IFFALSE 80628
// begin uc_nation := nation_nature ;
80525: LD_ADDR_OWVAR 21
80529: PUSH
80530: LD_INT 0
80532: ST_TO_ADDR
// uc_side := 0 ;
80533: LD_ADDR_OWVAR 20
80537: PUSH
80538: LD_INT 0
80540: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80541: LD_ADDR_OWVAR 29
80545: PUSH
80546: LD_INT 12
80548: PUSH
80549: LD_INT 12
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: ST_TO_ADDR
// hc_agressivity := 20 ;
80556: LD_ADDR_OWVAR 35
80560: PUSH
80561: LD_INT 20
80563: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80564: LD_ADDR_OWVAR 28
80568: PUSH
80569: LD_INT 17
80571: ST_TO_ADDR
// hc_gallery :=  ;
80572: LD_ADDR_OWVAR 33
80576: PUSH
80577: LD_STRING 
80579: ST_TO_ADDR
// hc_name :=  ;
80580: LD_ADDR_OWVAR 26
80584: PUSH
80585: LD_STRING 
80587: ST_TO_ADDR
// un := CreateHuman ;
80588: LD_ADDR_VAR 0 2
80592: PUSH
80593: CALL_OW 44
80597: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80598: LD_VAR 0 2
80602: PPUSH
80603: LD_INT 1
80605: PPUSH
80606: CALL_OW 51
// tmp := tmp ^ un ;
80610: LD_ADDR_VAR 0 3
80614: PUSH
80615: LD_VAR 0 3
80619: PUSH
80620: LD_VAR 0 2
80624: ADD
80625: ST_TO_ADDR
// end ;
80626: GO 80522
80628: POP
80629: POP
// repeat wait ( 0 0$1 ) ;
80630: LD_INT 35
80632: PPUSH
80633: CALL_OW 67
// for un in tmp do
80637: LD_ADDR_VAR 0 2
80641: PUSH
80642: LD_VAR 0 3
80646: PUSH
80647: FOR_IN
80648: IFFALSE 80722
// begin if IsDead ( un ) then
80650: LD_VAR 0 2
80654: PPUSH
80655: CALL_OW 301
80659: IFFALSE 80679
// begin tmp := tmp diff un ;
80661: LD_ADDR_VAR 0 3
80665: PUSH
80666: LD_VAR 0 3
80670: PUSH
80671: LD_VAR 0 2
80675: DIFF
80676: ST_TO_ADDR
// continue ;
80677: GO 80647
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80679: LD_VAR 0 2
80683: PPUSH
80684: LD_INT 3
80686: PUSH
80687: LD_INT 22
80689: PUSH
80690: LD_INT 0
80692: PUSH
80693: EMPTY
80694: LIST
80695: LIST
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: PPUSH
80701: CALL_OW 69
80705: PPUSH
80706: LD_VAR 0 2
80710: PPUSH
80711: CALL_OW 74
80715: PPUSH
80716: CALL_OW 115
// end ;
80720: GO 80647
80722: POP
80723: POP
// until not tmp ;
80724: LD_VAR 0 3
80728: NOT
80729: IFFALSE 80630
// end ;
80731: PPOPN 3
80733: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80734: LD_EXP 66
80738: IFFALSE 80746
80740: PUSH
80741: LD_EXP 91
80745: AND
80746: IFFALSE 80800
80748: GO 80750
80750: DISABLE
// begin ToLua ( displayTroll(); ) ;
80751: LD_STRING displayTroll();
80753: PPUSH
80754: CALL_OW 559
// wait ( 3 3$00 ) ;
80758: LD_INT 6300
80760: PPUSH
80761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80765: LD_STRING hideTroll();
80767: PPUSH
80768: CALL_OW 559
// wait ( 1 1$00 ) ;
80772: LD_INT 2100
80774: PPUSH
80775: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80779: LD_STRING displayTroll();
80781: PPUSH
80782: CALL_OW 559
// wait ( 1 1$00 ) ;
80786: LD_INT 2100
80788: PPUSH
80789: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80793: LD_STRING hideTroll();
80795: PPUSH
80796: CALL_OW 559
// end ;
80800: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80801: LD_EXP 66
80805: IFFALSE 80813
80807: PUSH
80808: LD_EXP 92
80812: AND
80813: IFFALSE 80876
80815: GO 80817
80817: DISABLE
80818: LD_INT 0
80820: PPUSH
// begin p := 0 ;
80821: LD_ADDR_VAR 0 1
80825: PUSH
80826: LD_INT 0
80828: ST_TO_ADDR
// repeat game_speed := 1 ;
80829: LD_ADDR_OWVAR 65
80833: PUSH
80834: LD_INT 1
80836: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80837: LD_INT 35
80839: PPUSH
80840: CALL_OW 67
// p := p + 1 ;
80844: LD_ADDR_VAR 0 1
80848: PUSH
80849: LD_VAR 0 1
80853: PUSH
80854: LD_INT 1
80856: PLUS
80857: ST_TO_ADDR
// until p >= 60 ;
80858: LD_VAR 0 1
80862: PUSH
80863: LD_INT 60
80865: GREATEREQUAL
80866: IFFALSE 80829
// game_speed := 4 ;
80868: LD_ADDR_OWVAR 65
80872: PUSH
80873: LD_INT 4
80875: ST_TO_ADDR
// end ;
80876: PPOPN 1
80878: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80879: LD_EXP 66
80883: IFFALSE 80891
80885: PUSH
80886: LD_EXP 93
80890: AND
80891: IFFALSE 81037
80893: GO 80895
80895: DISABLE
80896: LD_INT 0
80898: PPUSH
80899: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80900: LD_ADDR_VAR 0 1
80904: PUSH
80905: LD_INT 22
80907: PUSH
80908: LD_OWVAR 2
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: LD_INT 2
80919: PUSH
80920: LD_INT 30
80922: PUSH
80923: LD_INT 0
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PUSH
80930: LD_INT 30
80932: PUSH
80933: LD_INT 1
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: EMPTY
80941: LIST
80942: LIST
80943: LIST
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PPUSH
80949: CALL_OW 69
80953: ST_TO_ADDR
// if not depot then
80954: LD_VAR 0 1
80958: NOT
80959: IFFALSE 80963
// exit ;
80961: GO 81037
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80963: LD_ADDR_VAR 0 2
80967: PUSH
80968: LD_VAR 0 1
80972: PUSH
80973: LD_INT 1
80975: PPUSH
80976: LD_VAR 0 1
80980: PPUSH
80981: CALL_OW 12
80985: ARRAY
80986: PPUSH
80987: CALL_OW 274
80991: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80992: LD_VAR 0 2
80996: PPUSH
80997: LD_INT 1
80999: PPUSH
81000: LD_INT 0
81002: PPUSH
81003: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
81007: LD_VAR 0 2
81011: PPUSH
81012: LD_INT 2
81014: PPUSH
81015: LD_INT 0
81017: PPUSH
81018: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
81022: LD_VAR 0 2
81026: PPUSH
81027: LD_INT 3
81029: PPUSH
81030: LD_INT 0
81032: PPUSH
81033: CALL_OW 277
// end ;
81037: PPOPN 2
81039: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
81040: LD_EXP 66
81044: IFFALSE 81052
81046: PUSH
81047: LD_EXP 94
81051: AND
81052: IFFALSE 81149
81054: GO 81056
81056: DISABLE
81057: LD_INT 0
81059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81060: LD_ADDR_VAR 0 1
81064: PUSH
81065: LD_INT 22
81067: PUSH
81068: LD_OWVAR 2
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 21
81079: PUSH
81080: LD_INT 1
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PUSH
81087: LD_INT 3
81089: PUSH
81090: LD_INT 23
81092: PUSH
81093: LD_INT 0
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: PUSH
81104: EMPTY
81105: LIST
81106: LIST
81107: LIST
81108: PPUSH
81109: CALL_OW 69
81113: ST_TO_ADDR
// if not tmp then
81114: LD_VAR 0 1
81118: NOT
81119: IFFALSE 81123
// exit ;
81121: GO 81149
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
81123: LD_VAR 0 1
81127: PUSH
81128: LD_INT 1
81130: PPUSH
81131: LD_VAR 0 1
81135: PPUSH
81136: CALL_OW 12
81140: ARRAY
81141: PPUSH
81142: LD_INT 200
81144: PPUSH
81145: CALL_OW 234
// end ;
81149: PPOPN 1
81151: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
81152: LD_EXP 66
81156: IFFALSE 81164
81158: PUSH
81159: LD_EXP 95
81163: AND
81164: IFFALSE 81243
81166: GO 81168
81168: DISABLE
81169: LD_INT 0
81171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
81172: LD_ADDR_VAR 0 1
81176: PUSH
81177: LD_INT 22
81179: PUSH
81180: LD_OWVAR 2
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: PUSH
81189: LD_INT 21
81191: PUSH
81192: LD_INT 2
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: PUSH
81199: EMPTY
81200: LIST
81201: LIST
81202: PPUSH
81203: CALL_OW 69
81207: ST_TO_ADDR
// if not tmp then
81208: LD_VAR 0 1
81212: NOT
81213: IFFALSE 81217
// exit ;
81215: GO 81243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81217: LD_VAR 0 1
81221: PUSH
81222: LD_INT 1
81224: PPUSH
81225: LD_VAR 0 1
81229: PPUSH
81230: CALL_OW 12
81234: ARRAY
81235: PPUSH
81236: LD_INT 60
81238: PPUSH
81239: CALL_OW 234
// end ;
81243: PPOPN 1
81245: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81246: LD_EXP 66
81250: IFFALSE 81258
81252: PUSH
81253: LD_EXP 96
81257: AND
81258: IFFALSE 81357
81260: GO 81262
81262: DISABLE
81263: LD_INT 0
81265: PPUSH
81266: PPUSH
// begin enable ;
81267: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81268: LD_ADDR_VAR 0 1
81272: PUSH
81273: LD_INT 22
81275: PUSH
81276: LD_OWVAR 2
81280: PUSH
81281: EMPTY
81282: LIST
81283: LIST
81284: PUSH
81285: LD_INT 61
81287: PUSH
81288: EMPTY
81289: LIST
81290: PUSH
81291: LD_INT 33
81293: PUSH
81294: LD_INT 2
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: PUSH
81301: EMPTY
81302: LIST
81303: LIST
81304: LIST
81305: PPUSH
81306: CALL_OW 69
81310: ST_TO_ADDR
// if not tmp then
81311: LD_VAR 0 1
81315: NOT
81316: IFFALSE 81320
// exit ;
81318: GO 81357
// for i in tmp do
81320: LD_ADDR_VAR 0 2
81324: PUSH
81325: LD_VAR 0 1
81329: PUSH
81330: FOR_IN
81331: IFFALSE 81355
// if IsControledBy ( i ) then
81333: LD_VAR 0 2
81337: PPUSH
81338: CALL_OW 312
81342: IFFALSE 81353
// ComUnlink ( i ) ;
81344: LD_VAR 0 2
81348: PPUSH
81349: CALL_OW 136
81353: GO 81330
81355: POP
81356: POP
// end ;
81357: PPOPN 2
81359: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81360: LD_EXP 66
81364: IFFALSE 81372
81366: PUSH
81367: LD_EXP 97
81371: AND
81372: IFFALSE 81512
81374: GO 81376
81376: DISABLE
81377: LD_INT 0
81379: PPUSH
81380: PPUSH
// begin ToLua ( displayPowell(); ) ;
81381: LD_STRING displayPowell();
81383: PPUSH
81384: CALL_OW 559
// uc_side := 0 ;
81388: LD_ADDR_OWVAR 20
81392: PUSH
81393: LD_INT 0
81395: ST_TO_ADDR
// uc_nation := 2 ;
81396: LD_ADDR_OWVAR 21
81400: PUSH
81401: LD_INT 2
81403: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81404: LD_ADDR_OWVAR 37
81408: PUSH
81409: LD_INT 14
81411: ST_TO_ADDR
// vc_engine := engine_siberite ;
81412: LD_ADDR_OWVAR 39
81416: PUSH
81417: LD_INT 3
81419: ST_TO_ADDR
// vc_control := control_apeman ;
81420: LD_ADDR_OWVAR 38
81424: PUSH
81425: LD_INT 5
81427: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81428: LD_ADDR_OWVAR 40
81432: PUSH
81433: LD_INT 29
81435: ST_TO_ADDR
// un := CreateVehicle ;
81436: LD_ADDR_VAR 0 2
81440: PUSH
81441: CALL_OW 45
81445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81446: LD_VAR 0 2
81450: PPUSH
81451: LD_INT 1
81453: PPUSH
81454: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81458: LD_INT 35
81460: PPUSH
81461: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81465: LD_VAR 0 2
81469: PPUSH
81470: LD_INT 22
81472: PUSH
81473: LD_OWVAR 2
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PPUSH
81482: CALL_OW 69
81486: PPUSH
81487: LD_VAR 0 2
81491: PPUSH
81492: CALL_OW 74
81496: PPUSH
81497: CALL_OW 115
// until IsDead ( un ) ;
81501: LD_VAR 0 2
81505: PPUSH
81506: CALL_OW 301
81510: IFFALSE 81458
// end ;
81512: PPOPN 2
81514: END
// every 0 0$1 trigger StreamModeActive and sStu do
81515: LD_EXP 66
81519: IFFALSE 81527
81521: PUSH
81522: LD_EXP 105
81526: AND
81527: IFFALSE 81543
81529: GO 81531
81531: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81532: LD_STRING displayStucuk();
81534: PPUSH
81535: CALL_OW 559
// ResetFog ;
81539: CALL_OW 335
// end ;
81543: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81544: LD_EXP 66
81548: IFFALSE 81556
81550: PUSH
81551: LD_EXP 98
81555: AND
81556: IFFALSE 81697
81558: GO 81560
81560: DISABLE
81561: LD_INT 0
81563: PPUSH
81564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81565: LD_ADDR_VAR 0 2
81569: PUSH
81570: LD_INT 22
81572: PUSH
81573: LD_OWVAR 2
81577: PUSH
81578: EMPTY
81579: LIST
81580: LIST
81581: PUSH
81582: LD_INT 21
81584: PUSH
81585: LD_INT 1
81587: PUSH
81588: EMPTY
81589: LIST
81590: LIST
81591: PUSH
81592: EMPTY
81593: LIST
81594: LIST
81595: PPUSH
81596: CALL_OW 69
81600: ST_TO_ADDR
// if not tmp then
81601: LD_VAR 0 2
81605: NOT
81606: IFFALSE 81610
// exit ;
81608: GO 81697
// un := tmp [ rand ( 1 , tmp ) ] ;
81610: LD_ADDR_VAR 0 1
81614: PUSH
81615: LD_VAR 0 2
81619: PUSH
81620: LD_INT 1
81622: PPUSH
81623: LD_VAR 0 2
81627: PPUSH
81628: CALL_OW 12
81632: ARRAY
81633: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81634: LD_VAR 0 1
81638: PPUSH
81639: LD_INT 0
81641: PPUSH
81642: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81646: LD_VAR 0 1
81650: PPUSH
81651: LD_OWVAR 3
81655: PUSH
81656: LD_VAR 0 1
81660: DIFF
81661: PPUSH
81662: LD_VAR 0 1
81666: PPUSH
81667: CALL_OW 74
81671: PPUSH
81672: CALL_OW 115
// wait ( 0 0$20 ) ;
81676: LD_INT 700
81678: PPUSH
81679: CALL_OW 67
// SetSide ( un , your_side ) ;
81683: LD_VAR 0 1
81687: PPUSH
81688: LD_OWVAR 2
81692: PPUSH
81693: CALL_OW 235
// end ;
81697: PPOPN 2
81699: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81700: LD_EXP 66
81704: IFFALSE 81712
81706: PUSH
81707: LD_EXP 99
81711: AND
81712: IFFALSE 81818
81714: GO 81716
81716: DISABLE
81717: LD_INT 0
81719: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81720: LD_ADDR_VAR 0 1
81724: PUSH
81725: LD_INT 22
81727: PUSH
81728: LD_OWVAR 2
81732: PUSH
81733: EMPTY
81734: LIST
81735: LIST
81736: PUSH
81737: LD_INT 2
81739: PUSH
81740: LD_INT 30
81742: PUSH
81743: LD_INT 0
81745: PUSH
81746: EMPTY
81747: LIST
81748: LIST
81749: PUSH
81750: LD_INT 30
81752: PUSH
81753: LD_INT 1
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: PUSH
81760: EMPTY
81761: LIST
81762: LIST
81763: LIST
81764: PUSH
81765: EMPTY
81766: LIST
81767: LIST
81768: PPUSH
81769: CALL_OW 69
81773: ST_TO_ADDR
// if not depot then
81774: LD_VAR 0 1
81778: NOT
81779: IFFALSE 81783
// exit ;
81781: GO 81818
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81783: LD_VAR 0 1
81787: PUSH
81788: LD_INT 1
81790: ARRAY
81791: PPUSH
81792: CALL_OW 250
81796: PPUSH
81797: LD_VAR 0 1
81801: PUSH
81802: LD_INT 1
81804: ARRAY
81805: PPUSH
81806: CALL_OW 251
81810: PPUSH
81811: LD_INT 70
81813: PPUSH
81814: CALL_OW 495
// end ;
81818: PPOPN 1
81820: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81821: LD_EXP 66
81825: IFFALSE 81833
81827: PUSH
81828: LD_EXP 100
81832: AND
81833: IFFALSE 82044
81835: GO 81837
81837: DISABLE
81838: LD_INT 0
81840: PPUSH
81841: PPUSH
81842: PPUSH
81843: PPUSH
81844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81845: LD_ADDR_VAR 0 5
81849: PUSH
81850: LD_INT 22
81852: PUSH
81853: LD_OWVAR 2
81857: PUSH
81858: EMPTY
81859: LIST
81860: LIST
81861: PUSH
81862: LD_INT 21
81864: PUSH
81865: LD_INT 1
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: PUSH
81872: EMPTY
81873: LIST
81874: LIST
81875: PPUSH
81876: CALL_OW 69
81880: ST_TO_ADDR
// if not tmp then
81881: LD_VAR 0 5
81885: NOT
81886: IFFALSE 81890
// exit ;
81888: GO 82044
// for i in tmp do
81890: LD_ADDR_VAR 0 1
81894: PUSH
81895: LD_VAR 0 5
81899: PUSH
81900: FOR_IN
81901: IFFALSE 82042
// begin d := rand ( 0 , 5 ) ;
81903: LD_ADDR_VAR 0 4
81907: PUSH
81908: LD_INT 0
81910: PPUSH
81911: LD_INT 5
81913: PPUSH
81914: CALL_OW 12
81918: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81919: LD_ADDR_VAR 0 2
81923: PUSH
81924: LD_VAR 0 1
81928: PPUSH
81929: CALL_OW 250
81933: PPUSH
81934: LD_VAR 0 4
81938: PPUSH
81939: LD_INT 3
81941: PPUSH
81942: LD_INT 12
81944: PPUSH
81945: CALL_OW 12
81949: PPUSH
81950: CALL_OW 272
81954: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81955: LD_ADDR_VAR 0 3
81959: PUSH
81960: LD_VAR 0 1
81964: PPUSH
81965: CALL_OW 251
81969: PPUSH
81970: LD_VAR 0 4
81974: PPUSH
81975: LD_INT 3
81977: PPUSH
81978: LD_INT 12
81980: PPUSH
81981: CALL_OW 12
81985: PPUSH
81986: CALL_OW 273
81990: ST_TO_ADDR
// if ValidHex ( x , y ) then
81991: LD_VAR 0 2
81995: PPUSH
81996: LD_VAR 0 3
82000: PPUSH
82001: CALL_OW 488
82005: IFFALSE 82040
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
82007: LD_VAR 0 1
82011: PPUSH
82012: LD_VAR 0 2
82016: PPUSH
82017: LD_VAR 0 3
82021: PPUSH
82022: LD_INT 3
82024: PPUSH
82025: LD_INT 6
82027: PPUSH
82028: CALL_OW 12
82032: PPUSH
82033: LD_INT 1
82035: PPUSH
82036: CALL_OW 483
// end ;
82040: GO 81900
82042: POP
82043: POP
// end ;
82044: PPOPN 5
82046: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
82047: LD_EXP 66
82051: IFFALSE 82059
82053: PUSH
82054: LD_EXP 101
82058: AND
82059: IFFALSE 82153
82061: GO 82063
82063: DISABLE
82064: LD_INT 0
82066: PPUSH
82067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
82068: LD_ADDR_VAR 0 2
82072: PUSH
82073: LD_INT 22
82075: PUSH
82076: LD_OWVAR 2
82080: PUSH
82081: EMPTY
82082: LIST
82083: LIST
82084: PUSH
82085: LD_INT 32
82087: PUSH
82088: LD_INT 1
82090: PUSH
82091: EMPTY
82092: LIST
82093: LIST
82094: PUSH
82095: LD_INT 21
82097: PUSH
82098: LD_INT 2
82100: PUSH
82101: EMPTY
82102: LIST
82103: LIST
82104: PUSH
82105: EMPTY
82106: LIST
82107: LIST
82108: LIST
82109: PPUSH
82110: CALL_OW 69
82114: ST_TO_ADDR
// if not tmp then
82115: LD_VAR 0 2
82119: NOT
82120: IFFALSE 82124
// exit ;
82122: GO 82153
// for i in tmp do
82124: LD_ADDR_VAR 0 1
82128: PUSH
82129: LD_VAR 0 2
82133: PUSH
82134: FOR_IN
82135: IFFALSE 82151
// SetFuel ( i , 0 ) ;
82137: LD_VAR 0 1
82141: PPUSH
82142: LD_INT 0
82144: PPUSH
82145: CALL_OW 240
82149: GO 82134
82151: POP
82152: POP
// end ;
82153: PPOPN 2
82155: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
82156: LD_EXP 66
82160: IFFALSE 82168
82162: PUSH
82163: LD_EXP 102
82167: AND
82168: IFFALSE 82234
82170: GO 82172
82172: DISABLE
82173: LD_INT 0
82175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82176: LD_ADDR_VAR 0 1
82180: PUSH
82181: LD_INT 22
82183: PUSH
82184: LD_OWVAR 2
82188: PUSH
82189: EMPTY
82190: LIST
82191: LIST
82192: PUSH
82193: LD_INT 30
82195: PUSH
82196: LD_INT 29
82198: PUSH
82199: EMPTY
82200: LIST
82201: LIST
82202: PUSH
82203: EMPTY
82204: LIST
82205: LIST
82206: PPUSH
82207: CALL_OW 69
82211: ST_TO_ADDR
// if not tmp then
82212: LD_VAR 0 1
82216: NOT
82217: IFFALSE 82221
// exit ;
82219: GO 82234
// DestroyUnit ( tmp [ 1 ] ) ;
82221: LD_VAR 0 1
82225: PUSH
82226: LD_INT 1
82228: ARRAY
82229: PPUSH
82230: CALL_OW 65
// end ;
82234: PPOPN 1
82236: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82237: LD_EXP 66
82241: IFFALSE 82249
82243: PUSH
82244: LD_EXP 104
82248: AND
82249: IFFALSE 82378
82251: GO 82253
82253: DISABLE
82254: LD_INT 0
82256: PPUSH
// begin uc_side := 0 ;
82257: LD_ADDR_OWVAR 20
82261: PUSH
82262: LD_INT 0
82264: ST_TO_ADDR
// uc_nation := nation_arabian ;
82265: LD_ADDR_OWVAR 21
82269: PUSH
82270: LD_INT 2
82272: ST_TO_ADDR
// hc_gallery :=  ;
82273: LD_ADDR_OWVAR 33
82277: PUSH
82278: LD_STRING 
82280: ST_TO_ADDR
// hc_name :=  ;
82281: LD_ADDR_OWVAR 26
82285: PUSH
82286: LD_STRING 
82288: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82289: LD_INT 1
82291: PPUSH
82292: LD_INT 11
82294: PPUSH
82295: LD_INT 10
82297: PPUSH
82298: CALL_OW 380
// un := CreateHuman ;
82302: LD_ADDR_VAR 0 1
82306: PUSH
82307: CALL_OW 44
82311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82312: LD_VAR 0 1
82316: PPUSH
82317: LD_INT 1
82319: PPUSH
82320: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82324: LD_INT 35
82326: PPUSH
82327: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82331: LD_VAR 0 1
82335: PPUSH
82336: LD_INT 22
82338: PUSH
82339: LD_OWVAR 2
82343: PUSH
82344: EMPTY
82345: LIST
82346: LIST
82347: PPUSH
82348: CALL_OW 69
82352: PPUSH
82353: LD_VAR 0 1
82357: PPUSH
82358: CALL_OW 74
82362: PPUSH
82363: CALL_OW 115
// until IsDead ( un ) ;
82367: LD_VAR 0 1
82371: PPUSH
82372: CALL_OW 301
82376: IFFALSE 82324
// end ;
82378: PPOPN 1
82380: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82381: LD_EXP 66
82385: IFFALSE 82393
82387: PUSH
82388: LD_EXP 106
82392: AND
82393: IFFALSE 82405
82395: GO 82397
82397: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82398: LD_STRING earthquake(getX(game), 0, 32)
82400: PPUSH
82401: CALL_OW 559
82405: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82406: LD_EXP 66
82410: IFFALSE 82418
82412: PUSH
82413: LD_EXP 107
82417: AND
82418: IFFALSE 82509
82420: GO 82422
82422: DISABLE
82423: LD_INT 0
82425: PPUSH
// begin enable ;
82426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82427: LD_ADDR_VAR 0 1
82431: PUSH
82432: LD_INT 22
82434: PUSH
82435: LD_OWVAR 2
82439: PUSH
82440: EMPTY
82441: LIST
82442: LIST
82443: PUSH
82444: LD_INT 21
82446: PUSH
82447: LD_INT 2
82449: PUSH
82450: EMPTY
82451: LIST
82452: LIST
82453: PUSH
82454: LD_INT 33
82456: PUSH
82457: LD_INT 3
82459: PUSH
82460: EMPTY
82461: LIST
82462: LIST
82463: PUSH
82464: EMPTY
82465: LIST
82466: LIST
82467: LIST
82468: PPUSH
82469: CALL_OW 69
82473: ST_TO_ADDR
// if not tmp then
82474: LD_VAR 0 1
82478: NOT
82479: IFFALSE 82483
// exit ;
82481: GO 82509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82483: LD_VAR 0 1
82487: PUSH
82488: LD_INT 1
82490: PPUSH
82491: LD_VAR 0 1
82495: PPUSH
82496: CALL_OW 12
82500: ARRAY
82501: PPUSH
82502: LD_INT 1
82504: PPUSH
82505: CALL_OW 234
// end ;
82509: PPOPN 1
82511: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82512: LD_EXP 66
82516: IFFALSE 82524
82518: PUSH
82519: LD_EXP 108
82523: AND
82524: IFFALSE 82665
82526: GO 82528
82528: DISABLE
82529: LD_INT 0
82531: PPUSH
82532: PPUSH
82533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82534: LD_ADDR_VAR 0 3
82538: PUSH
82539: LD_INT 22
82541: PUSH
82542: LD_OWVAR 2
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: PUSH
82551: LD_INT 25
82553: PUSH
82554: LD_INT 1
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: PPUSH
82565: CALL_OW 69
82569: ST_TO_ADDR
// if not tmp then
82570: LD_VAR 0 3
82574: NOT
82575: IFFALSE 82579
// exit ;
82577: GO 82665
// un := tmp [ rand ( 1 , tmp ) ] ;
82579: LD_ADDR_VAR 0 2
82583: PUSH
82584: LD_VAR 0 3
82588: PUSH
82589: LD_INT 1
82591: PPUSH
82592: LD_VAR 0 3
82596: PPUSH
82597: CALL_OW 12
82601: ARRAY
82602: ST_TO_ADDR
// if Crawls ( un ) then
82603: LD_VAR 0 2
82607: PPUSH
82608: CALL_OW 318
82612: IFFALSE 82623
// ComWalk ( un ) ;
82614: LD_VAR 0 2
82618: PPUSH
82619: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82623: LD_VAR 0 2
82627: PPUSH
82628: LD_INT 9
82630: PPUSH
82631: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82635: LD_INT 28
82637: PPUSH
82638: LD_OWVAR 2
82642: PPUSH
82643: LD_INT 2
82645: PPUSH
82646: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82650: LD_INT 29
82652: PPUSH
82653: LD_OWVAR 2
82657: PPUSH
82658: LD_INT 2
82660: PPUSH
82661: CALL_OW 322
// end ;
82665: PPOPN 3
82667: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82668: LD_EXP 66
82672: IFFALSE 82680
82674: PUSH
82675: LD_EXP 109
82679: AND
82680: IFFALSE 82791
82682: GO 82684
82684: DISABLE
82685: LD_INT 0
82687: PPUSH
82688: PPUSH
82689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82690: LD_ADDR_VAR 0 3
82694: PUSH
82695: LD_INT 22
82697: PUSH
82698: LD_OWVAR 2
82702: PUSH
82703: EMPTY
82704: LIST
82705: LIST
82706: PUSH
82707: LD_INT 25
82709: PUSH
82710: LD_INT 1
82712: PUSH
82713: EMPTY
82714: LIST
82715: LIST
82716: PUSH
82717: EMPTY
82718: LIST
82719: LIST
82720: PPUSH
82721: CALL_OW 69
82725: ST_TO_ADDR
// if not tmp then
82726: LD_VAR 0 3
82730: NOT
82731: IFFALSE 82735
// exit ;
82733: GO 82791
// un := tmp [ rand ( 1 , tmp ) ] ;
82735: LD_ADDR_VAR 0 2
82739: PUSH
82740: LD_VAR 0 3
82744: PUSH
82745: LD_INT 1
82747: PPUSH
82748: LD_VAR 0 3
82752: PPUSH
82753: CALL_OW 12
82757: ARRAY
82758: ST_TO_ADDR
// if Crawls ( un ) then
82759: LD_VAR 0 2
82763: PPUSH
82764: CALL_OW 318
82768: IFFALSE 82779
// ComWalk ( un ) ;
82770: LD_VAR 0 2
82774: PPUSH
82775: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82779: LD_VAR 0 2
82783: PPUSH
82784: LD_INT 8
82786: PPUSH
82787: CALL_OW 336
// end ;
82791: PPOPN 3
82793: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82794: LD_EXP 66
82798: IFFALSE 82806
82800: PUSH
82801: LD_EXP 110
82805: AND
82806: IFFALSE 82950
82808: GO 82810
82810: DISABLE
82811: LD_INT 0
82813: PPUSH
82814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82815: LD_ADDR_VAR 0 2
82819: PUSH
82820: LD_INT 22
82822: PUSH
82823: LD_OWVAR 2
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: PUSH
82832: LD_INT 21
82834: PUSH
82835: LD_INT 2
82837: PUSH
82838: EMPTY
82839: LIST
82840: LIST
82841: PUSH
82842: LD_INT 2
82844: PUSH
82845: LD_INT 34
82847: PUSH
82848: LD_INT 12
82850: PUSH
82851: EMPTY
82852: LIST
82853: LIST
82854: PUSH
82855: LD_INT 34
82857: PUSH
82858: LD_INT 51
82860: PUSH
82861: EMPTY
82862: LIST
82863: LIST
82864: PUSH
82865: LD_INT 34
82867: PUSH
82868: LD_INT 32
82870: PUSH
82871: EMPTY
82872: LIST
82873: LIST
82874: PUSH
82875: EMPTY
82876: LIST
82877: LIST
82878: LIST
82879: LIST
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: LIST
82885: PPUSH
82886: CALL_OW 69
82890: ST_TO_ADDR
// if not tmp then
82891: LD_VAR 0 2
82895: NOT
82896: IFFALSE 82900
// exit ;
82898: GO 82950
// for i in tmp do
82900: LD_ADDR_VAR 0 1
82904: PUSH
82905: LD_VAR 0 2
82909: PUSH
82910: FOR_IN
82911: IFFALSE 82948
// if GetCargo ( i , mat_artifact ) = 0 then
82913: LD_VAR 0 1
82917: PPUSH
82918: LD_INT 4
82920: PPUSH
82921: CALL_OW 289
82925: PUSH
82926: LD_INT 0
82928: EQUAL
82929: IFFALSE 82946
// SetCargo ( i , mat_siberit , 100 ) ;
82931: LD_VAR 0 1
82935: PPUSH
82936: LD_INT 3
82938: PPUSH
82939: LD_INT 100
82941: PPUSH
82942: CALL_OW 290
82946: GO 82910
82948: POP
82949: POP
// end ;
82950: PPOPN 2
82952: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82953: LD_EXP 66
82957: IFFALSE 82965
82959: PUSH
82960: LD_EXP 111
82964: AND
82965: IFFALSE 83148
82967: GO 82969
82969: DISABLE
82970: LD_INT 0
82972: PPUSH
82973: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82974: LD_ADDR_VAR 0 2
82978: PUSH
82979: LD_INT 22
82981: PUSH
82982: LD_OWVAR 2
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: PPUSH
82991: CALL_OW 69
82995: ST_TO_ADDR
// if not tmp then
82996: LD_VAR 0 2
83000: NOT
83001: IFFALSE 83005
// exit ;
83003: GO 83148
// for i := 1 to 2 do
83005: LD_ADDR_VAR 0 1
83009: PUSH
83010: DOUBLE
83011: LD_INT 1
83013: DEC
83014: ST_TO_ADDR
83015: LD_INT 2
83017: PUSH
83018: FOR_TO
83019: IFFALSE 83146
// begin uc_side := your_side ;
83021: LD_ADDR_OWVAR 20
83025: PUSH
83026: LD_OWVAR 2
83030: ST_TO_ADDR
// uc_nation := nation_american ;
83031: LD_ADDR_OWVAR 21
83035: PUSH
83036: LD_INT 1
83038: ST_TO_ADDR
// vc_chassis := us_morphling ;
83039: LD_ADDR_OWVAR 37
83043: PUSH
83044: LD_INT 5
83046: ST_TO_ADDR
// vc_engine := engine_siberite ;
83047: LD_ADDR_OWVAR 39
83051: PUSH
83052: LD_INT 3
83054: ST_TO_ADDR
// vc_control := control_computer ;
83055: LD_ADDR_OWVAR 38
83059: PUSH
83060: LD_INT 3
83062: ST_TO_ADDR
// vc_weapon := us_double_laser ;
83063: LD_ADDR_OWVAR 40
83067: PUSH
83068: LD_INT 10
83070: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
83071: LD_VAR 0 2
83075: PUSH
83076: LD_INT 1
83078: ARRAY
83079: PPUSH
83080: CALL_OW 310
83084: NOT
83085: IFFALSE 83132
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
83087: CALL_OW 45
83091: PPUSH
83092: LD_VAR 0 2
83096: PUSH
83097: LD_INT 1
83099: ARRAY
83100: PPUSH
83101: CALL_OW 250
83105: PPUSH
83106: LD_VAR 0 2
83110: PUSH
83111: LD_INT 1
83113: ARRAY
83114: PPUSH
83115: CALL_OW 251
83119: PPUSH
83120: LD_INT 12
83122: PPUSH
83123: LD_INT 1
83125: PPUSH
83126: CALL_OW 50
83130: GO 83144
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
83132: CALL_OW 45
83136: PPUSH
83137: LD_INT 1
83139: PPUSH
83140: CALL_OW 51
// end ;
83144: GO 83018
83146: POP
83147: POP
// end ;
83148: PPOPN 2
83150: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
83151: LD_EXP 66
83155: IFFALSE 83163
83157: PUSH
83158: LD_EXP 112
83162: AND
83163: IFFALSE 83385
83165: GO 83167
83167: DISABLE
83168: LD_INT 0
83170: PPUSH
83171: PPUSH
83172: PPUSH
83173: PPUSH
83174: PPUSH
83175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83176: LD_ADDR_VAR 0 6
83180: PUSH
83181: LD_INT 22
83183: PUSH
83184: LD_OWVAR 2
83188: PUSH
83189: EMPTY
83190: LIST
83191: LIST
83192: PUSH
83193: LD_INT 21
83195: PUSH
83196: LD_INT 1
83198: PUSH
83199: EMPTY
83200: LIST
83201: LIST
83202: PUSH
83203: LD_INT 3
83205: PUSH
83206: LD_INT 23
83208: PUSH
83209: LD_INT 0
83211: PUSH
83212: EMPTY
83213: LIST
83214: LIST
83215: PUSH
83216: EMPTY
83217: LIST
83218: LIST
83219: PUSH
83220: EMPTY
83221: LIST
83222: LIST
83223: LIST
83224: PPUSH
83225: CALL_OW 69
83229: ST_TO_ADDR
// if not tmp then
83230: LD_VAR 0 6
83234: NOT
83235: IFFALSE 83239
// exit ;
83237: GO 83385
// s1 := rand ( 1 , 4 ) ;
83239: LD_ADDR_VAR 0 2
83243: PUSH
83244: LD_INT 1
83246: PPUSH
83247: LD_INT 4
83249: PPUSH
83250: CALL_OW 12
83254: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83255: LD_ADDR_VAR 0 4
83259: PUSH
83260: LD_VAR 0 6
83264: PUSH
83265: LD_INT 1
83267: ARRAY
83268: PPUSH
83269: LD_VAR 0 2
83273: PPUSH
83274: CALL_OW 259
83278: ST_TO_ADDR
// if s1 = 1 then
83279: LD_VAR 0 2
83283: PUSH
83284: LD_INT 1
83286: EQUAL
83287: IFFALSE 83307
// s2 := rand ( 2 , 4 ) else
83289: LD_ADDR_VAR 0 3
83293: PUSH
83294: LD_INT 2
83296: PPUSH
83297: LD_INT 4
83299: PPUSH
83300: CALL_OW 12
83304: ST_TO_ADDR
83305: GO 83315
// s2 := 1 ;
83307: LD_ADDR_VAR 0 3
83311: PUSH
83312: LD_INT 1
83314: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83315: LD_ADDR_VAR 0 5
83319: PUSH
83320: LD_VAR 0 6
83324: PUSH
83325: LD_INT 1
83327: ARRAY
83328: PPUSH
83329: LD_VAR 0 3
83333: PPUSH
83334: CALL_OW 259
83338: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83339: LD_VAR 0 6
83343: PUSH
83344: LD_INT 1
83346: ARRAY
83347: PPUSH
83348: LD_VAR 0 2
83352: PPUSH
83353: LD_VAR 0 5
83357: PPUSH
83358: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83362: LD_VAR 0 6
83366: PUSH
83367: LD_INT 1
83369: ARRAY
83370: PPUSH
83371: LD_VAR 0 3
83375: PPUSH
83376: LD_VAR 0 4
83380: PPUSH
83381: CALL_OW 237
// end ;
83385: PPOPN 6
83387: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83388: LD_EXP 66
83392: IFFALSE 83400
83394: PUSH
83395: LD_EXP 113
83399: AND
83400: IFFALSE 83479
83402: GO 83404
83404: DISABLE
83405: LD_INT 0
83407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83408: LD_ADDR_VAR 0 1
83412: PUSH
83413: LD_INT 22
83415: PUSH
83416: LD_OWVAR 2
83420: PUSH
83421: EMPTY
83422: LIST
83423: LIST
83424: PUSH
83425: LD_INT 30
83427: PUSH
83428: LD_INT 3
83430: PUSH
83431: EMPTY
83432: LIST
83433: LIST
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PPUSH
83439: CALL_OW 69
83443: ST_TO_ADDR
// if not tmp then
83444: LD_VAR 0 1
83448: NOT
83449: IFFALSE 83453
// exit ;
83451: GO 83479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83453: LD_VAR 0 1
83457: PUSH
83458: LD_INT 1
83460: PPUSH
83461: LD_VAR 0 1
83465: PPUSH
83466: CALL_OW 12
83470: ARRAY
83471: PPUSH
83472: LD_INT 1
83474: PPUSH
83475: CALL_OW 234
// end ;
83479: PPOPN 1
83481: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83482: LD_EXP 66
83486: IFFALSE 83494
83488: PUSH
83489: LD_EXP 114
83493: AND
83494: IFFALSE 83606
83496: GO 83498
83498: DISABLE
83499: LD_INT 0
83501: PPUSH
83502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83503: LD_ADDR_VAR 0 2
83507: PUSH
83508: LD_INT 22
83510: PUSH
83511: LD_OWVAR 2
83515: PUSH
83516: EMPTY
83517: LIST
83518: LIST
83519: PUSH
83520: LD_INT 2
83522: PUSH
83523: LD_INT 30
83525: PUSH
83526: LD_INT 27
83528: PUSH
83529: EMPTY
83530: LIST
83531: LIST
83532: PUSH
83533: LD_INT 30
83535: PUSH
83536: LD_INT 26
83538: PUSH
83539: EMPTY
83540: LIST
83541: LIST
83542: PUSH
83543: LD_INT 30
83545: PUSH
83546: LD_INT 28
83548: PUSH
83549: EMPTY
83550: LIST
83551: LIST
83552: PUSH
83553: EMPTY
83554: LIST
83555: LIST
83556: LIST
83557: LIST
83558: PUSH
83559: EMPTY
83560: LIST
83561: LIST
83562: PPUSH
83563: CALL_OW 69
83567: ST_TO_ADDR
// if not tmp then
83568: LD_VAR 0 2
83572: NOT
83573: IFFALSE 83577
// exit ;
83575: GO 83606
// for i in tmp do
83577: LD_ADDR_VAR 0 1
83581: PUSH
83582: LD_VAR 0 2
83586: PUSH
83587: FOR_IN
83588: IFFALSE 83604
// SetLives ( i , 1 ) ;
83590: LD_VAR 0 1
83594: PPUSH
83595: LD_INT 1
83597: PPUSH
83598: CALL_OW 234
83602: GO 83587
83604: POP
83605: POP
// end ;
83606: PPOPN 2
83608: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83609: LD_EXP 66
83613: IFFALSE 83621
83615: PUSH
83616: LD_EXP 115
83620: AND
83621: IFFALSE 83908
83623: GO 83625
83625: DISABLE
83626: LD_INT 0
83628: PPUSH
83629: PPUSH
83630: PPUSH
// begin i := rand ( 1 , 7 ) ;
83631: LD_ADDR_VAR 0 1
83635: PUSH
83636: LD_INT 1
83638: PPUSH
83639: LD_INT 7
83641: PPUSH
83642: CALL_OW 12
83646: ST_TO_ADDR
// case i of 1 :
83647: LD_VAR 0 1
83651: PUSH
83652: LD_INT 1
83654: DOUBLE
83655: EQUAL
83656: IFTRUE 83660
83658: GO 83670
83660: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83661: LD_STRING earthquake(getX(game), 0, 32)
83663: PPUSH
83664: CALL_OW 559
83668: GO 83908
83670: LD_INT 2
83672: DOUBLE
83673: EQUAL
83674: IFTRUE 83678
83676: GO 83692
83678: POP
// begin ToLua ( displayStucuk(); ) ;
83679: LD_STRING displayStucuk();
83681: PPUSH
83682: CALL_OW 559
// ResetFog ;
83686: CALL_OW 335
// end ; 3 :
83690: GO 83908
83692: LD_INT 3
83694: DOUBLE
83695: EQUAL
83696: IFTRUE 83700
83698: GO 83804
83700: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83701: LD_ADDR_VAR 0 2
83705: PUSH
83706: LD_INT 22
83708: PUSH
83709: LD_OWVAR 2
83713: PUSH
83714: EMPTY
83715: LIST
83716: LIST
83717: PUSH
83718: LD_INT 25
83720: PUSH
83721: LD_INT 1
83723: PUSH
83724: EMPTY
83725: LIST
83726: LIST
83727: PUSH
83728: EMPTY
83729: LIST
83730: LIST
83731: PPUSH
83732: CALL_OW 69
83736: ST_TO_ADDR
// if not tmp then
83737: LD_VAR 0 2
83741: NOT
83742: IFFALSE 83746
// exit ;
83744: GO 83908
// un := tmp [ rand ( 1 , tmp ) ] ;
83746: LD_ADDR_VAR 0 3
83750: PUSH
83751: LD_VAR 0 2
83755: PUSH
83756: LD_INT 1
83758: PPUSH
83759: LD_VAR 0 2
83763: PPUSH
83764: CALL_OW 12
83768: ARRAY
83769: ST_TO_ADDR
// if Crawls ( un ) then
83770: LD_VAR 0 3
83774: PPUSH
83775: CALL_OW 318
83779: IFFALSE 83790
// ComWalk ( un ) ;
83781: LD_VAR 0 3
83785: PPUSH
83786: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83790: LD_VAR 0 3
83794: PPUSH
83795: LD_INT 8
83797: PPUSH
83798: CALL_OW 336
// end ; 4 :
83802: GO 83908
83804: LD_INT 4
83806: DOUBLE
83807: EQUAL
83808: IFTRUE 83812
83810: GO 83886
83812: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83813: LD_ADDR_VAR 0 2
83817: PUSH
83818: LD_INT 22
83820: PUSH
83821: LD_OWVAR 2
83825: PUSH
83826: EMPTY
83827: LIST
83828: LIST
83829: PUSH
83830: LD_INT 30
83832: PUSH
83833: LD_INT 29
83835: PUSH
83836: EMPTY
83837: LIST
83838: LIST
83839: PUSH
83840: EMPTY
83841: LIST
83842: LIST
83843: PPUSH
83844: CALL_OW 69
83848: ST_TO_ADDR
// if not tmp then
83849: LD_VAR 0 2
83853: NOT
83854: IFFALSE 83858
// exit ;
83856: GO 83908
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83858: LD_VAR 0 2
83862: PUSH
83863: LD_INT 1
83865: ARRAY
83866: PPUSH
83867: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83871: LD_VAR 0 2
83875: PUSH
83876: LD_INT 1
83878: ARRAY
83879: PPUSH
83880: CALL_OW 65
// end ; 5 .. 7 :
83884: GO 83908
83886: LD_INT 5
83888: DOUBLE
83889: GREATEREQUAL
83890: IFFALSE 83898
83892: LD_INT 7
83894: DOUBLE
83895: LESSEQUAL
83896: IFTRUE 83900
83898: GO 83907
83900: POP
// StreamSibBomb ; end ;
83901: CALL 80089 0 0
83905: GO 83908
83907: POP
// end ;
83908: PPOPN 3
83910: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83911: LD_EXP 66
83915: IFFALSE 83923
83917: PUSH
83918: LD_EXP 116
83922: AND
83923: IFFALSE 84079
83925: GO 83927
83927: DISABLE
83928: LD_INT 0
83930: PPUSH
83931: PPUSH
83932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83933: LD_ADDR_VAR 0 2
83937: PUSH
83938: LD_INT 81
83940: PUSH
83941: LD_OWVAR 2
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: PUSH
83950: LD_INT 2
83952: PUSH
83953: LD_INT 21
83955: PUSH
83956: LD_INT 1
83958: PUSH
83959: EMPTY
83960: LIST
83961: LIST
83962: PUSH
83963: LD_INT 21
83965: PUSH
83966: LD_INT 2
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: PUSH
83973: EMPTY
83974: LIST
83975: LIST
83976: LIST
83977: PUSH
83978: EMPTY
83979: LIST
83980: LIST
83981: PPUSH
83982: CALL_OW 69
83986: ST_TO_ADDR
// if not tmp then
83987: LD_VAR 0 2
83991: NOT
83992: IFFALSE 83996
// exit ;
83994: GO 84079
// p := 0 ;
83996: LD_ADDR_VAR 0 3
84000: PUSH
84001: LD_INT 0
84003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84004: LD_INT 35
84006: PPUSH
84007: CALL_OW 67
// p := p + 1 ;
84011: LD_ADDR_VAR 0 3
84015: PUSH
84016: LD_VAR 0 3
84020: PUSH
84021: LD_INT 1
84023: PLUS
84024: ST_TO_ADDR
// for i in tmp do
84025: LD_ADDR_VAR 0 1
84029: PUSH
84030: LD_VAR 0 2
84034: PUSH
84035: FOR_IN
84036: IFFALSE 84067
// if GetLives ( i ) < 1000 then
84038: LD_VAR 0 1
84042: PPUSH
84043: CALL_OW 256
84047: PUSH
84048: LD_INT 1000
84050: LESS
84051: IFFALSE 84065
// SetLives ( i , 1000 ) ;
84053: LD_VAR 0 1
84057: PPUSH
84058: LD_INT 1000
84060: PPUSH
84061: CALL_OW 234
84065: GO 84035
84067: POP
84068: POP
// until p > 20 ;
84069: LD_VAR 0 3
84073: PUSH
84074: LD_INT 20
84076: GREATER
84077: IFFALSE 84004
// end ;
84079: PPOPN 3
84081: END
// every 0 0$1 trigger StreamModeActive and sTime do
84082: LD_EXP 66
84086: IFFALSE 84094
84088: PUSH
84089: LD_EXP 117
84093: AND
84094: IFFALSE 84129
84096: GO 84098
84098: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
84099: LD_INT 28
84101: PPUSH
84102: LD_OWVAR 2
84106: PPUSH
84107: LD_INT 2
84109: PPUSH
84110: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
84114: LD_INT 30
84116: PPUSH
84117: LD_OWVAR 2
84121: PPUSH
84122: LD_INT 2
84124: PPUSH
84125: CALL_OW 322
// end ;
84129: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
84130: LD_EXP 66
84134: IFFALSE 84142
84136: PUSH
84137: LD_EXP 118
84141: AND
84142: IFFALSE 84263
84144: GO 84146
84146: DISABLE
84147: LD_INT 0
84149: PPUSH
84150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84151: LD_ADDR_VAR 0 2
84155: PUSH
84156: LD_INT 22
84158: PUSH
84159: LD_OWVAR 2
84163: PUSH
84164: EMPTY
84165: LIST
84166: LIST
84167: PUSH
84168: LD_INT 21
84170: PUSH
84171: LD_INT 1
84173: PUSH
84174: EMPTY
84175: LIST
84176: LIST
84177: PUSH
84178: LD_INT 3
84180: PUSH
84181: LD_INT 23
84183: PUSH
84184: LD_INT 0
84186: PUSH
84187: EMPTY
84188: LIST
84189: LIST
84190: PUSH
84191: EMPTY
84192: LIST
84193: LIST
84194: PUSH
84195: EMPTY
84196: LIST
84197: LIST
84198: LIST
84199: PPUSH
84200: CALL_OW 69
84204: ST_TO_ADDR
// if not tmp then
84205: LD_VAR 0 2
84209: NOT
84210: IFFALSE 84214
// exit ;
84212: GO 84263
// for i in tmp do
84214: LD_ADDR_VAR 0 1
84218: PUSH
84219: LD_VAR 0 2
84223: PUSH
84224: FOR_IN
84225: IFFALSE 84261
// begin if Crawls ( i ) then
84227: LD_VAR 0 1
84231: PPUSH
84232: CALL_OW 318
84236: IFFALSE 84247
// ComWalk ( i ) ;
84238: LD_VAR 0 1
84242: PPUSH
84243: CALL_OW 138
// SetClass ( i , 2 ) ;
84247: LD_VAR 0 1
84251: PPUSH
84252: LD_INT 2
84254: PPUSH
84255: CALL_OW 336
// end ;
84259: GO 84224
84261: POP
84262: POP
// end ;
84263: PPOPN 2
84265: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84266: LD_EXP 66
84270: IFFALSE 84278
84272: PUSH
84273: LD_EXP 119
84277: AND
84278: IFFALSE 84568
84280: GO 84282
84282: DISABLE
84283: LD_INT 0
84285: PPUSH
84286: PPUSH
84287: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84288: LD_OWVAR 2
84292: PPUSH
84293: LD_INT 9
84295: PPUSH
84296: LD_INT 1
84298: PPUSH
84299: LD_INT 1
84301: PPUSH
84302: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84306: LD_INT 9
84308: PPUSH
84309: LD_OWVAR 2
84313: PPUSH
84314: CALL_OW 343
// uc_side := 9 ;
84318: LD_ADDR_OWVAR 20
84322: PUSH
84323: LD_INT 9
84325: ST_TO_ADDR
// uc_nation := 2 ;
84326: LD_ADDR_OWVAR 21
84330: PUSH
84331: LD_INT 2
84333: ST_TO_ADDR
// hc_name := Dark Warrior ;
84334: LD_ADDR_OWVAR 26
84338: PUSH
84339: LD_STRING Dark Warrior
84341: ST_TO_ADDR
// hc_gallery :=  ;
84342: LD_ADDR_OWVAR 33
84346: PUSH
84347: LD_STRING 
84349: ST_TO_ADDR
// hc_noskilllimit := true ;
84350: LD_ADDR_OWVAR 76
84354: PUSH
84355: LD_INT 1
84357: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84358: LD_ADDR_OWVAR 31
84362: PUSH
84363: LD_INT 30
84365: PUSH
84366: LD_INT 30
84368: PUSH
84369: LD_INT 30
84371: PUSH
84372: LD_INT 30
84374: PUSH
84375: EMPTY
84376: LIST
84377: LIST
84378: LIST
84379: LIST
84380: ST_TO_ADDR
// un := CreateHuman ;
84381: LD_ADDR_VAR 0 3
84385: PUSH
84386: CALL_OW 44
84390: ST_TO_ADDR
// hc_noskilllimit := false ;
84391: LD_ADDR_OWVAR 76
84395: PUSH
84396: LD_INT 0
84398: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84399: LD_VAR 0 3
84403: PPUSH
84404: LD_INT 1
84406: PPUSH
84407: CALL_OW 51
// ToLua ( playRanger() ) ;
84411: LD_STRING playRanger()
84413: PPUSH
84414: CALL_OW 559
// p := 0 ;
84418: LD_ADDR_VAR 0 2
84422: PUSH
84423: LD_INT 0
84425: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84426: LD_INT 35
84428: PPUSH
84429: CALL_OW 67
// p := p + 1 ;
84433: LD_ADDR_VAR 0 2
84437: PUSH
84438: LD_VAR 0 2
84442: PUSH
84443: LD_INT 1
84445: PLUS
84446: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84447: LD_VAR 0 3
84451: PPUSH
84452: CALL_OW 256
84456: PUSH
84457: LD_INT 1000
84459: LESS
84460: IFFALSE 84474
// SetLives ( un , 1000 ) ;
84462: LD_VAR 0 3
84466: PPUSH
84467: LD_INT 1000
84469: PPUSH
84470: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84474: LD_VAR 0 3
84478: PPUSH
84479: LD_INT 81
84481: PUSH
84482: LD_OWVAR 2
84486: PUSH
84487: EMPTY
84488: LIST
84489: LIST
84490: PUSH
84491: LD_INT 91
84493: PUSH
84494: LD_VAR 0 3
84498: PUSH
84499: LD_INT 30
84501: PUSH
84502: EMPTY
84503: LIST
84504: LIST
84505: LIST
84506: PUSH
84507: EMPTY
84508: LIST
84509: LIST
84510: PPUSH
84511: CALL_OW 69
84515: PPUSH
84516: LD_VAR 0 3
84520: PPUSH
84521: CALL_OW 74
84525: PPUSH
84526: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84530: LD_VAR 0 2
84534: PUSH
84535: LD_INT 80
84537: GREATER
84538: IFTRUE 84551
84540: PUSH
84541: LD_VAR 0 3
84545: PPUSH
84546: CALL_OW 301
84550: OR
84551: IFFALSE 84426
// if un then
84553: LD_VAR 0 3
84557: IFFALSE 84568
// RemoveUnit ( un ) ;
84559: LD_VAR 0 3
84563: PPUSH
84564: CALL_OW 64
// end ;
84568: PPOPN 3
84570: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84571: LD_EXP 120
84575: IFFALSE 84691
84577: GO 84579
84579: DISABLE
84580: LD_INT 0
84582: PPUSH
84583: PPUSH
84584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84585: LD_ADDR_VAR 0 2
84589: PUSH
84590: LD_INT 81
84592: PUSH
84593: LD_OWVAR 2
84597: PUSH
84598: EMPTY
84599: LIST
84600: LIST
84601: PUSH
84602: LD_INT 21
84604: PUSH
84605: LD_INT 1
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: PUSH
84612: EMPTY
84613: LIST
84614: LIST
84615: PPUSH
84616: CALL_OW 69
84620: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84621: LD_STRING playComputer()
84623: PPUSH
84624: CALL_OW 559
// if not tmp then
84628: LD_VAR 0 2
84632: NOT
84633: IFFALSE 84637
// exit ;
84635: GO 84691
// for i in tmp do
84637: LD_ADDR_VAR 0 1
84641: PUSH
84642: LD_VAR 0 2
84646: PUSH
84647: FOR_IN
84648: IFFALSE 84689
// for j := 1 to 4 do
84650: LD_ADDR_VAR 0 3
84654: PUSH
84655: DOUBLE
84656: LD_INT 1
84658: DEC
84659: ST_TO_ADDR
84660: LD_INT 4
84662: PUSH
84663: FOR_TO
84664: IFFALSE 84685
// SetSkill ( i , j , 10 ) ;
84666: LD_VAR 0 1
84670: PPUSH
84671: LD_VAR 0 3
84675: PPUSH
84676: LD_INT 10
84678: PPUSH
84679: CALL_OW 237
84683: GO 84663
84685: POP
84686: POP
84687: GO 84647
84689: POP
84690: POP
// end ;
84691: PPOPN 3
84693: END
// every 0 0$1 trigger s30 do var i , tmp ;
84694: LD_EXP 121
84698: IFFALSE 84767
84700: GO 84702
84702: DISABLE
84703: LD_INT 0
84705: PPUSH
84706: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84707: LD_ADDR_VAR 0 2
84711: PUSH
84712: LD_INT 22
84714: PUSH
84715: LD_OWVAR 2
84719: PUSH
84720: EMPTY
84721: LIST
84722: LIST
84723: PPUSH
84724: CALL_OW 69
84728: ST_TO_ADDR
// if not tmp then
84729: LD_VAR 0 2
84733: NOT
84734: IFFALSE 84738
// exit ;
84736: GO 84767
// for i in tmp do
84738: LD_ADDR_VAR 0 1
84742: PUSH
84743: LD_VAR 0 2
84747: PUSH
84748: FOR_IN
84749: IFFALSE 84765
// SetLives ( i , 300 ) ;
84751: LD_VAR 0 1
84755: PPUSH
84756: LD_INT 300
84758: PPUSH
84759: CALL_OW 234
84763: GO 84748
84765: POP
84766: POP
// end ;
84767: PPOPN 2
84769: END
// every 0 0$1 trigger s60 do var i , tmp ;
84770: LD_EXP 122
84774: IFFALSE 84843
84776: GO 84778
84778: DISABLE
84779: LD_INT 0
84781: PPUSH
84782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84783: LD_ADDR_VAR 0 2
84787: PUSH
84788: LD_INT 22
84790: PUSH
84791: LD_OWVAR 2
84795: PUSH
84796: EMPTY
84797: LIST
84798: LIST
84799: PPUSH
84800: CALL_OW 69
84804: ST_TO_ADDR
// if not tmp then
84805: LD_VAR 0 2
84809: NOT
84810: IFFALSE 84814
// exit ;
84812: GO 84843
// for i in tmp do
84814: LD_ADDR_VAR 0 1
84818: PUSH
84819: LD_VAR 0 2
84823: PUSH
84824: FOR_IN
84825: IFFALSE 84841
// SetLives ( i , 600 ) ;
84827: LD_VAR 0 1
84831: PPUSH
84832: LD_INT 600
84834: PPUSH
84835: CALL_OW 234
84839: GO 84824
84841: POP
84842: POP
// end ;
84843: PPOPN 2
84845: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84846: LD_INT 0
84848: PPUSH
// case cmd of 301 :
84849: LD_VAR 0 1
84853: PUSH
84854: LD_INT 301
84856: DOUBLE
84857: EQUAL
84858: IFTRUE 84862
84860: GO 84894
84862: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84863: LD_VAR 0 6
84867: PPUSH
84868: LD_VAR 0 7
84872: PPUSH
84873: LD_VAR 0 8
84877: PPUSH
84878: LD_VAR 0 4
84882: PPUSH
84883: LD_VAR 0 5
84887: PPUSH
84888: CALL 86107 0 5
84892: GO 85015
84894: LD_INT 302
84896: DOUBLE
84897: EQUAL
84898: IFTRUE 84902
84900: GO 84939
84902: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84903: LD_VAR 0 6
84907: PPUSH
84908: LD_VAR 0 7
84912: PPUSH
84913: LD_VAR 0 8
84917: PPUSH
84918: LD_VAR 0 9
84922: PPUSH
84923: LD_VAR 0 4
84927: PPUSH
84928: LD_VAR 0 5
84932: PPUSH
84933: CALL 86198 0 6
84937: GO 85015
84939: LD_INT 303
84941: DOUBLE
84942: EQUAL
84943: IFTRUE 84947
84945: GO 84984
84947: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84948: LD_VAR 0 6
84952: PPUSH
84953: LD_VAR 0 7
84957: PPUSH
84958: LD_VAR 0 8
84962: PPUSH
84963: LD_VAR 0 9
84967: PPUSH
84968: LD_VAR 0 4
84972: PPUSH
84973: LD_VAR 0 5
84977: PPUSH
84978: CALL 85020 0 6
84982: GO 85015
84984: LD_INT 304
84986: DOUBLE
84987: EQUAL
84988: IFTRUE 84992
84990: GO 85014
84992: POP
// hHackTeleport ( unit , x , y ) ; end ;
84993: LD_VAR 0 2
84997: PPUSH
84998: LD_VAR 0 4
85002: PPUSH
85003: LD_VAR 0 5
85007: PPUSH
85008: CALL 86791 0 3
85012: GO 85015
85014: POP
// end ;
85015: LD_VAR 0 12
85019: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
85020: LD_INT 0
85022: PPUSH
85023: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
85024: LD_VAR 0 1
85028: PUSH
85029: LD_INT 1
85031: LESS
85032: IFTRUE 85044
85034: PUSH
85035: LD_VAR 0 1
85039: PUSH
85040: LD_INT 3
85042: GREATER
85043: OR
85044: IFTRUE 85062
85046: PUSH
85047: LD_VAR 0 5
85051: PPUSH
85052: LD_VAR 0 6
85056: PPUSH
85057: CALL_OW 428
85061: OR
85062: IFFALSE 85066
// exit ;
85064: GO 85794
// uc_side := your_side ;
85066: LD_ADDR_OWVAR 20
85070: PUSH
85071: LD_OWVAR 2
85075: ST_TO_ADDR
// uc_nation := nation ;
85076: LD_ADDR_OWVAR 21
85080: PUSH
85081: LD_VAR 0 1
85085: ST_TO_ADDR
// bc_level = 1 ;
85086: LD_ADDR_OWVAR 43
85090: PUSH
85091: LD_INT 1
85093: ST_TO_ADDR
// case btype of 1 :
85094: LD_VAR 0 2
85098: PUSH
85099: LD_INT 1
85101: DOUBLE
85102: EQUAL
85103: IFTRUE 85107
85105: GO 85118
85107: POP
// bc_type := b_depot ; 2 :
85108: LD_ADDR_OWVAR 42
85112: PUSH
85113: LD_INT 0
85115: ST_TO_ADDR
85116: GO 85738
85118: LD_INT 2
85120: DOUBLE
85121: EQUAL
85122: IFTRUE 85126
85124: GO 85137
85126: POP
// bc_type := b_warehouse ; 3 :
85127: LD_ADDR_OWVAR 42
85131: PUSH
85132: LD_INT 1
85134: ST_TO_ADDR
85135: GO 85738
85137: LD_INT 3
85139: DOUBLE
85140: EQUAL
85141: IFTRUE 85145
85143: GO 85156
85145: POP
// bc_type := b_lab ; 4 .. 9 :
85146: LD_ADDR_OWVAR 42
85150: PUSH
85151: LD_INT 6
85153: ST_TO_ADDR
85154: GO 85738
85156: LD_INT 4
85158: DOUBLE
85159: GREATEREQUAL
85160: IFFALSE 85168
85162: LD_INT 9
85164: DOUBLE
85165: LESSEQUAL
85166: IFTRUE 85170
85168: GO 85230
85170: POP
// begin bc_type := b_lab_half ;
85171: LD_ADDR_OWVAR 42
85175: PUSH
85176: LD_INT 7
85178: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
85179: LD_ADDR_OWVAR 44
85183: PUSH
85184: LD_INT 10
85186: PUSH
85187: LD_INT 11
85189: PUSH
85190: LD_INT 12
85192: PUSH
85193: LD_INT 15
85195: PUSH
85196: LD_INT 14
85198: PUSH
85199: LD_INT 13
85201: PUSH
85202: EMPTY
85203: LIST
85204: LIST
85205: LIST
85206: LIST
85207: LIST
85208: LIST
85209: PUSH
85210: LD_VAR 0 2
85214: PUSH
85215: LD_INT 3
85217: MINUS
85218: ARRAY
85219: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
85220: LD_ADDR_OWVAR 45
85224: PUSH
85225: LD_INT 9
85227: ST_TO_ADDR
// end ; 10 .. 13 :
85228: GO 85738
85230: LD_INT 10
85232: DOUBLE
85233: GREATEREQUAL
85234: IFFALSE 85242
85236: LD_INT 13
85238: DOUBLE
85239: LESSEQUAL
85240: IFTRUE 85244
85242: GO 85321
85244: POP
// begin bc_type := b_lab_full ;
85245: LD_ADDR_OWVAR 42
85249: PUSH
85250: LD_INT 8
85252: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85253: LD_ADDR_OWVAR 44
85257: PUSH
85258: LD_INT 10
85260: PUSH
85261: LD_INT 12
85263: PUSH
85264: LD_INT 14
85266: PUSH
85267: LD_INT 13
85269: PUSH
85270: EMPTY
85271: LIST
85272: LIST
85273: LIST
85274: LIST
85275: PUSH
85276: LD_VAR 0 2
85280: PUSH
85281: LD_INT 9
85283: MINUS
85284: ARRAY
85285: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85286: LD_ADDR_OWVAR 45
85290: PUSH
85291: LD_INT 11
85293: PUSH
85294: LD_INT 15
85296: PUSH
85297: LD_INT 12
85299: PUSH
85300: LD_INT 15
85302: PUSH
85303: EMPTY
85304: LIST
85305: LIST
85306: LIST
85307: LIST
85308: PUSH
85309: LD_VAR 0 2
85313: PUSH
85314: LD_INT 9
85316: MINUS
85317: ARRAY
85318: ST_TO_ADDR
// end ; 14 :
85319: GO 85738
85321: LD_INT 14
85323: DOUBLE
85324: EQUAL
85325: IFTRUE 85329
85327: GO 85340
85329: POP
// bc_type := b_workshop ; 15 :
85330: LD_ADDR_OWVAR 42
85334: PUSH
85335: LD_INT 2
85337: ST_TO_ADDR
85338: GO 85738
85340: LD_INT 15
85342: DOUBLE
85343: EQUAL
85344: IFTRUE 85348
85346: GO 85359
85348: POP
// bc_type := b_factory ; 16 :
85349: LD_ADDR_OWVAR 42
85353: PUSH
85354: LD_INT 3
85356: ST_TO_ADDR
85357: GO 85738
85359: LD_INT 16
85361: DOUBLE
85362: EQUAL
85363: IFTRUE 85367
85365: GO 85378
85367: POP
// bc_type := b_ext_gun ; 17 :
85368: LD_ADDR_OWVAR 42
85372: PUSH
85373: LD_INT 17
85375: ST_TO_ADDR
85376: GO 85738
85378: LD_INT 17
85380: DOUBLE
85381: EQUAL
85382: IFTRUE 85386
85384: GO 85414
85386: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85387: LD_ADDR_OWVAR 42
85391: PUSH
85392: LD_INT 19
85394: PUSH
85395: LD_INT 23
85397: PUSH
85398: LD_INT 19
85400: PUSH
85401: EMPTY
85402: LIST
85403: LIST
85404: LIST
85405: PUSH
85406: LD_VAR 0 1
85410: ARRAY
85411: ST_TO_ADDR
85412: GO 85738
85414: LD_INT 18
85416: DOUBLE
85417: EQUAL
85418: IFTRUE 85422
85420: GO 85433
85422: POP
// bc_type := b_ext_radar ; 19 :
85423: LD_ADDR_OWVAR 42
85427: PUSH
85428: LD_INT 20
85430: ST_TO_ADDR
85431: GO 85738
85433: LD_INT 19
85435: DOUBLE
85436: EQUAL
85437: IFTRUE 85441
85439: GO 85452
85441: POP
// bc_type := b_ext_radio ; 20 :
85442: LD_ADDR_OWVAR 42
85446: PUSH
85447: LD_INT 22
85449: ST_TO_ADDR
85450: GO 85738
85452: LD_INT 20
85454: DOUBLE
85455: EQUAL
85456: IFTRUE 85460
85458: GO 85471
85460: POP
// bc_type := b_ext_siberium ; 21 :
85461: LD_ADDR_OWVAR 42
85465: PUSH
85466: LD_INT 21
85468: ST_TO_ADDR
85469: GO 85738
85471: LD_INT 21
85473: DOUBLE
85474: EQUAL
85475: IFTRUE 85479
85477: GO 85490
85479: POP
// bc_type := b_ext_computer ; 22 :
85480: LD_ADDR_OWVAR 42
85484: PUSH
85485: LD_INT 24
85487: ST_TO_ADDR
85488: GO 85738
85490: LD_INT 22
85492: DOUBLE
85493: EQUAL
85494: IFTRUE 85498
85496: GO 85509
85498: POP
// bc_type := b_ext_track ; 23 :
85499: LD_ADDR_OWVAR 42
85503: PUSH
85504: LD_INT 16
85506: ST_TO_ADDR
85507: GO 85738
85509: LD_INT 23
85511: DOUBLE
85512: EQUAL
85513: IFTRUE 85517
85515: GO 85528
85517: POP
// bc_type := b_ext_laser ; 24 :
85518: LD_ADDR_OWVAR 42
85522: PUSH
85523: LD_INT 25
85525: ST_TO_ADDR
85526: GO 85738
85528: LD_INT 24
85530: DOUBLE
85531: EQUAL
85532: IFTRUE 85536
85534: GO 85547
85536: POP
// bc_type := b_control_tower ; 25 :
85537: LD_ADDR_OWVAR 42
85541: PUSH
85542: LD_INT 36
85544: ST_TO_ADDR
85545: GO 85738
85547: LD_INT 25
85549: DOUBLE
85550: EQUAL
85551: IFTRUE 85555
85553: GO 85566
85555: POP
// bc_type := b_breastwork ; 26 :
85556: LD_ADDR_OWVAR 42
85560: PUSH
85561: LD_INT 31
85563: ST_TO_ADDR
85564: GO 85738
85566: LD_INT 26
85568: DOUBLE
85569: EQUAL
85570: IFTRUE 85574
85572: GO 85585
85574: POP
// bc_type := b_bunker ; 27 :
85575: LD_ADDR_OWVAR 42
85579: PUSH
85580: LD_INT 32
85582: ST_TO_ADDR
85583: GO 85738
85585: LD_INT 27
85587: DOUBLE
85588: EQUAL
85589: IFTRUE 85593
85591: GO 85604
85593: POP
// bc_type := b_turret ; 28 :
85594: LD_ADDR_OWVAR 42
85598: PUSH
85599: LD_INT 33
85601: ST_TO_ADDR
85602: GO 85738
85604: LD_INT 28
85606: DOUBLE
85607: EQUAL
85608: IFTRUE 85612
85610: GO 85623
85612: POP
// bc_type := b_armoury ; 29 :
85613: LD_ADDR_OWVAR 42
85617: PUSH
85618: LD_INT 4
85620: ST_TO_ADDR
85621: GO 85738
85623: LD_INT 29
85625: DOUBLE
85626: EQUAL
85627: IFTRUE 85631
85629: GO 85642
85631: POP
// bc_type := b_barracks ; 30 :
85632: LD_ADDR_OWVAR 42
85636: PUSH
85637: LD_INT 5
85639: ST_TO_ADDR
85640: GO 85738
85642: LD_INT 30
85644: DOUBLE
85645: EQUAL
85646: IFTRUE 85650
85648: GO 85661
85650: POP
// bc_type := b_solar_power ; 31 :
85651: LD_ADDR_OWVAR 42
85655: PUSH
85656: LD_INT 27
85658: ST_TO_ADDR
85659: GO 85738
85661: LD_INT 31
85663: DOUBLE
85664: EQUAL
85665: IFTRUE 85669
85667: GO 85680
85669: POP
// bc_type := b_oil_power ; 32 :
85670: LD_ADDR_OWVAR 42
85674: PUSH
85675: LD_INT 26
85677: ST_TO_ADDR
85678: GO 85738
85680: LD_INT 32
85682: DOUBLE
85683: EQUAL
85684: IFTRUE 85688
85686: GO 85699
85688: POP
// bc_type := b_siberite_power ; 33 :
85689: LD_ADDR_OWVAR 42
85693: PUSH
85694: LD_INT 28
85696: ST_TO_ADDR
85697: GO 85738
85699: LD_INT 33
85701: DOUBLE
85702: EQUAL
85703: IFTRUE 85707
85705: GO 85718
85707: POP
// bc_type := b_oil_mine ; 34 :
85708: LD_ADDR_OWVAR 42
85712: PUSH
85713: LD_INT 29
85715: ST_TO_ADDR
85716: GO 85738
85718: LD_INT 34
85720: DOUBLE
85721: EQUAL
85722: IFTRUE 85726
85724: GO 85737
85726: POP
// bc_type := b_siberite_mine ; end ;
85727: LD_ADDR_OWVAR 42
85731: PUSH
85732: LD_INT 30
85734: ST_TO_ADDR
85735: GO 85738
85737: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85738: LD_ADDR_VAR 0 8
85742: PUSH
85743: LD_VAR 0 5
85747: PPUSH
85748: LD_VAR 0 6
85752: PPUSH
85753: LD_VAR 0 3
85757: PPUSH
85758: CALL_OW 47
85762: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85763: LD_OWVAR 42
85767: PUSH
85768: LD_INT 32
85770: PUSH
85771: LD_INT 33
85773: PUSH
85774: EMPTY
85775: LIST
85776: LIST
85777: IN
85778: IFFALSE 85794
// PlaceWeaponTurret ( b , weapon ) ;
85780: LD_VAR 0 8
85784: PPUSH
85785: LD_VAR 0 4
85789: PPUSH
85790: CALL_OW 431
// end ;
85794: LD_VAR 0 7
85798: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85799: LD_INT 0
85801: PPUSH
85802: PPUSH
85803: PPUSH
85804: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85805: LD_ADDR_VAR 0 4
85809: PUSH
85810: LD_INT 22
85812: PUSH
85813: LD_OWVAR 2
85817: PUSH
85818: EMPTY
85819: LIST
85820: LIST
85821: PUSH
85822: LD_INT 2
85824: PUSH
85825: LD_INT 30
85827: PUSH
85828: LD_INT 0
85830: PUSH
85831: EMPTY
85832: LIST
85833: LIST
85834: PUSH
85835: LD_INT 30
85837: PUSH
85838: LD_INT 1
85840: PUSH
85841: EMPTY
85842: LIST
85843: LIST
85844: PUSH
85845: EMPTY
85846: LIST
85847: LIST
85848: LIST
85849: PUSH
85850: EMPTY
85851: LIST
85852: LIST
85853: PPUSH
85854: CALL_OW 69
85858: ST_TO_ADDR
// if not tmp then
85859: LD_VAR 0 4
85863: NOT
85864: IFFALSE 85868
// exit ;
85866: GO 85927
// for i in tmp do
85868: LD_ADDR_VAR 0 2
85872: PUSH
85873: LD_VAR 0 4
85877: PUSH
85878: FOR_IN
85879: IFFALSE 85925
// for j = 1 to 3 do
85881: LD_ADDR_VAR 0 3
85885: PUSH
85886: DOUBLE
85887: LD_INT 1
85889: DEC
85890: ST_TO_ADDR
85891: LD_INT 3
85893: PUSH
85894: FOR_TO
85895: IFFALSE 85921
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85897: LD_VAR 0 2
85901: PPUSH
85902: CALL_OW 274
85906: PPUSH
85907: LD_VAR 0 3
85911: PPUSH
85912: LD_INT 99999
85914: PPUSH
85915: CALL_OW 277
85919: GO 85894
85921: POP
85922: POP
85923: GO 85878
85925: POP
85926: POP
// end ;
85927: LD_VAR 0 1
85931: RET
// export function hHackSetLevel10 ; var i , j ; begin
85932: LD_INT 0
85934: PPUSH
85935: PPUSH
85936: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85937: LD_ADDR_VAR 0 2
85941: PUSH
85942: LD_INT 21
85944: PUSH
85945: LD_INT 1
85947: PUSH
85948: EMPTY
85949: LIST
85950: LIST
85951: PPUSH
85952: CALL_OW 69
85956: PUSH
85957: FOR_IN
85958: IFFALSE 86010
// if IsSelected ( i ) then
85960: LD_VAR 0 2
85964: PPUSH
85965: CALL_OW 306
85969: IFFALSE 86008
// begin for j := 1 to 4 do
85971: LD_ADDR_VAR 0 3
85975: PUSH
85976: DOUBLE
85977: LD_INT 1
85979: DEC
85980: ST_TO_ADDR
85981: LD_INT 4
85983: PUSH
85984: FOR_TO
85985: IFFALSE 86006
// SetSkill ( i , j , 10 ) ;
85987: LD_VAR 0 2
85991: PPUSH
85992: LD_VAR 0 3
85996: PPUSH
85997: LD_INT 10
85999: PPUSH
86000: CALL_OW 237
86004: GO 85984
86006: POP
86007: POP
// end ;
86008: GO 85957
86010: POP
86011: POP
// end ;
86012: LD_VAR 0 1
86016: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
86017: LD_INT 0
86019: PPUSH
86020: PPUSH
86021: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
86022: LD_ADDR_VAR 0 2
86026: PUSH
86027: LD_INT 22
86029: PUSH
86030: LD_OWVAR 2
86034: PUSH
86035: EMPTY
86036: LIST
86037: LIST
86038: PUSH
86039: LD_INT 21
86041: PUSH
86042: LD_INT 1
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: PUSH
86049: EMPTY
86050: LIST
86051: LIST
86052: PPUSH
86053: CALL_OW 69
86057: PUSH
86058: FOR_IN
86059: IFFALSE 86100
// begin for j := 1 to 4 do
86061: LD_ADDR_VAR 0 3
86065: PUSH
86066: DOUBLE
86067: LD_INT 1
86069: DEC
86070: ST_TO_ADDR
86071: LD_INT 4
86073: PUSH
86074: FOR_TO
86075: IFFALSE 86096
// SetSkill ( i , j , 10 ) ;
86077: LD_VAR 0 2
86081: PPUSH
86082: LD_VAR 0 3
86086: PPUSH
86087: LD_INT 10
86089: PPUSH
86090: CALL_OW 237
86094: GO 86074
86096: POP
86097: POP
// end ;
86098: GO 86058
86100: POP
86101: POP
// end ;
86102: LD_VAR 0 1
86106: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
86107: LD_INT 0
86109: PPUSH
// uc_side := your_side ;
86110: LD_ADDR_OWVAR 20
86114: PUSH
86115: LD_OWVAR 2
86119: ST_TO_ADDR
// uc_nation := nation ;
86120: LD_ADDR_OWVAR 21
86124: PUSH
86125: LD_VAR 0 1
86129: ST_TO_ADDR
// InitHc ;
86130: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
86134: LD_INT 0
86136: PPUSH
86137: LD_VAR 0 2
86141: PPUSH
86142: LD_VAR 0 3
86146: PPUSH
86147: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
86151: LD_VAR 0 4
86155: PPUSH
86156: LD_VAR 0 5
86160: PPUSH
86161: CALL_OW 428
86165: PUSH
86166: LD_INT 0
86168: EQUAL
86169: IFFALSE 86193
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
86171: CALL_OW 44
86175: PPUSH
86176: LD_VAR 0 4
86180: PPUSH
86181: LD_VAR 0 5
86185: PPUSH
86186: LD_INT 1
86188: PPUSH
86189: CALL_OW 48
// end ;
86193: LD_VAR 0 6
86197: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
86198: LD_INT 0
86200: PPUSH
86201: PPUSH
// uc_side := your_side ;
86202: LD_ADDR_OWVAR 20
86206: PUSH
86207: LD_OWVAR 2
86211: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
86212: LD_VAR 0 1
86216: PUSH
86217: LD_INT 1
86219: PUSH
86220: LD_INT 2
86222: PUSH
86223: LD_INT 3
86225: PUSH
86226: LD_INT 4
86228: PUSH
86229: LD_INT 5
86231: PUSH
86232: EMPTY
86233: LIST
86234: LIST
86235: LIST
86236: LIST
86237: LIST
86238: IN
86239: IFFALSE 86251
// uc_nation := nation_american else
86241: LD_ADDR_OWVAR 21
86245: PUSH
86246: LD_INT 1
86248: ST_TO_ADDR
86249: GO 86294
// if chassis in [ 11 , 12 , 13 , 14 ] then
86251: LD_VAR 0 1
86255: PUSH
86256: LD_INT 11
86258: PUSH
86259: LD_INT 12
86261: PUSH
86262: LD_INT 13
86264: PUSH
86265: LD_INT 14
86267: PUSH
86268: EMPTY
86269: LIST
86270: LIST
86271: LIST
86272: LIST
86273: IN
86274: IFFALSE 86286
// uc_nation := nation_arabian else
86276: LD_ADDR_OWVAR 21
86280: PUSH
86281: LD_INT 2
86283: ST_TO_ADDR
86284: GO 86294
// uc_nation := nation_russian ;
86286: LD_ADDR_OWVAR 21
86290: PUSH
86291: LD_INT 3
86293: ST_TO_ADDR
// vc_chassis := chassis ;
86294: LD_ADDR_OWVAR 37
86298: PUSH
86299: LD_VAR 0 1
86303: ST_TO_ADDR
// vc_engine := engine ;
86304: LD_ADDR_OWVAR 39
86308: PUSH
86309: LD_VAR 0 2
86313: ST_TO_ADDR
// vc_control := control ;
86314: LD_ADDR_OWVAR 38
86318: PUSH
86319: LD_VAR 0 3
86323: ST_TO_ADDR
// vc_weapon := weapon ;
86324: LD_ADDR_OWVAR 40
86328: PUSH
86329: LD_VAR 0 4
86333: ST_TO_ADDR
// un := CreateVehicle ;
86334: LD_ADDR_VAR 0 8
86338: PUSH
86339: CALL_OW 45
86343: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86344: LD_VAR 0 8
86348: PPUSH
86349: LD_INT 0
86351: PPUSH
86352: LD_INT 5
86354: PPUSH
86355: CALL_OW 12
86359: PPUSH
86360: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86364: LD_VAR 0 8
86368: PPUSH
86369: LD_VAR 0 5
86373: PPUSH
86374: LD_VAR 0 6
86378: PPUSH
86379: LD_INT 1
86381: PPUSH
86382: CALL_OW 48
// end ;
86386: LD_VAR 0 7
86390: RET
// export hInvincible ; every 1 do
86391: GO 86393
86393: DISABLE
// hInvincible := [ ] ;
86394: LD_ADDR_EXP 123
86398: PUSH
86399: EMPTY
86400: ST_TO_ADDR
86401: END
// every 10 do var i ;
86402: GO 86404
86404: DISABLE
86405: LD_INT 0
86407: PPUSH
// begin enable ;
86408: ENABLE
// if not hInvincible then
86409: LD_EXP 123
86413: NOT
86414: IFFALSE 86418
// exit ;
86416: GO 86462
// for i in hInvincible do
86418: LD_ADDR_VAR 0 1
86422: PUSH
86423: LD_EXP 123
86427: PUSH
86428: FOR_IN
86429: IFFALSE 86460
// if GetLives ( i ) < 1000 then
86431: LD_VAR 0 1
86435: PPUSH
86436: CALL_OW 256
86440: PUSH
86441: LD_INT 1000
86443: LESS
86444: IFFALSE 86458
// SetLives ( i , 1000 ) ;
86446: LD_VAR 0 1
86450: PPUSH
86451: LD_INT 1000
86453: PPUSH
86454: CALL_OW 234
86458: GO 86428
86460: POP
86461: POP
// end ;
86462: PPOPN 1
86464: END
// export function hHackInvincible ; var i ; begin
86465: LD_INT 0
86467: PPUSH
86468: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86469: LD_ADDR_VAR 0 2
86473: PUSH
86474: LD_INT 2
86476: PUSH
86477: LD_INT 21
86479: PUSH
86480: LD_INT 1
86482: PUSH
86483: EMPTY
86484: LIST
86485: LIST
86486: PUSH
86487: LD_INT 21
86489: PUSH
86490: LD_INT 2
86492: PUSH
86493: EMPTY
86494: LIST
86495: LIST
86496: PUSH
86497: EMPTY
86498: LIST
86499: LIST
86500: LIST
86501: PPUSH
86502: CALL_OW 69
86506: PUSH
86507: FOR_IN
86508: IFFALSE 86569
// if IsSelected ( i ) then
86510: LD_VAR 0 2
86514: PPUSH
86515: CALL_OW 306
86519: IFFALSE 86567
// begin if i in hInvincible then
86521: LD_VAR 0 2
86525: PUSH
86526: LD_EXP 123
86530: IN
86531: IFFALSE 86551
// hInvincible := hInvincible diff i else
86533: LD_ADDR_EXP 123
86537: PUSH
86538: LD_EXP 123
86542: PUSH
86543: LD_VAR 0 2
86547: DIFF
86548: ST_TO_ADDR
86549: GO 86567
// hInvincible := hInvincible union i ;
86551: LD_ADDR_EXP 123
86555: PUSH
86556: LD_EXP 123
86560: PUSH
86561: LD_VAR 0 2
86565: UNION
86566: ST_TO_ADDR
// end ;
86567: GO 86507
86569: POP
86570: POP
// end ;
86571: LD_VAR 0 1
86575: RET
// export function hHackInvisible ; var i , j ; begin
86576: LD_INT 0
86578: PPUSH
86579: PPUSH
86580: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86581: LD_ADDR_VAR 0 2
86585: PUSH
86586: LD_INT 21
86588: PUSH
86589: LD_INT 1
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: PPUSH
86596: CALL_OW 69
86600: PUSH
86601: FOR_IN
86602: IFFALSE 86626
// if IsSelected ( i ) then
86604: LD_VAR 0 2
86608: PPUSH
86609: CALL_OW 306
86613: IFFALSE 86624
// ComForceInvisible ( i ) ;
86615: LD_VAR 0 2
86619: PPUSH
86620: CALL_OW 496
86624: GO 86601
86626: POP
86627: POP
// end ;
86628: LD_VAR 0 1
86632: RET
// export function hHackChangeYourSide ; begin
86633: LD_INT 0
86635: PPUSH
// if your_side = 8 then
86636: LD_OWVAR 2
86640: PUSH
86641: LD_INT 8
86643: EQUAL
86644: IFFALSE 86656
// your_side := 0 else
86646: LD_ADDR_OWVAR 2
86650: PUSH
86651: LD_INT 0
86653: ST_TO_ADDR
86654: GO 86670
// your_side := your_side + 1 ;
86656: LD_ADDR_OWVAR 2
86660: PUSH
86661: LD_OWVAR 2
86665: PUSH
86666: LD_INT 1
86668: PLUS
86669: ST_TO_ADDR
// end ;
86670: LD_VAR 0 1
86674: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86675: LD_INT 0
86677: PPUSH
86678: PPUSH
86679: PPUSH
// for i in all_units do
86680: LD_ADDR_VAR 0 2
86684: PUSH
86685: LD_OWVAR 3
86689: PUSH
86690: FOR_IN
86691: IFFALSE 86769
// if IsSelected ( i ) then
86693: LD_VAR 0 2
86697: PPUSH
86698: CALL_OW 306
86702: IFFALSE 86767
// begin j := GetSide ( i ) ;
86704: LD_ADDR_VAR 0 3
86708: PUSH
86709: LD_VAR 0 2
86713: PPUSH
86714: CALL_OW 255
86718: ST_TO_ADDR
// if j = 8 then
86719: LD_VAR 0 3
86723: PUSH
86724: LD_INT 8
86726: EQUAL
86727: IFFALSE 86739
// j := 0 else
86729: LD_ADDR_VAR 0 3
86733: PUSH
86734: LD_INT 0
86736: ST_TO_ADDR
86737: GO 86753
// j := j + 1 ;
86739: LD_ADDR_VAR 0 3
86743: PUSH
86744: LD_VAR 0 3
86748: PUSH
86749: LD_INT 1
86751: PLUS
86752: ST_TO_ADDR
// SetSide ( i , j ) ;
86753: LD_VAR 0 2
86757: PPUSH
86758: LD_VAR 0 3
86762: PPUSH
86763: CALL_OW 235
// end ;
86767: GO 86690
86769: POP
86770: POP
// end ;
86771: LD_VAR 0 1
86775: RET
// export function hHackFog ; begin
86776: LD_INT 0
86778: PPUSH
// FogOff ( true ) ;
86779: LD_INT 1
86781: PPUSH
86782: CALL_OW 344
// end ;
86786: LD_VAR 0 1
86790: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86791: LD_INT 0
86793: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86794: LD_VAR 0 1
86798: PPUSH
86799: LD_VAR 0 2
86803: PPUSH
86804: LD_VAR 0 3
86808: PPUSH
86809: LD_INT 1
86811: PPUSH
86812: LD_INT 1
86814: PPUSH
86815: CALL_OW 483
// CenterOnXY ( x , y ) ;
86819: LD_VAR 0 2
86823: PPUSH
86824: LD_VAR 0 3
86828: PPUSH
86829: CALL_OW 84
// end ;
86833: LD_VAR 0 4
86837: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86838: LD_INT 0
86840: PPUSH
86841: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86842: LD_VAR 0 1
86846: NOT
86847: IFTRUE 86866
86849: PUSH
86850: LD_VAR 0 2
86854: PPUSH
86855: LD_VAR 0 3
86859: PPUSH
86860: CALL_OW 488
86864: NOT
86865: OR
86866: IFTRUE 86901
86868: PUSH
86869: LD_VAR 0 1
86873: PPUSH
86874: CALL_OW 266
86878: PUSH
86879: LD_INT 3
86881: NONEQUAL
86882: IFFALSE 86900
86884: PUSH
86885: LD_VAR 0 1
86889: PPUSH
86890: CALL_OW 247
86894: PUSH
86895: LD_INT 1
86897: EQUAL
86898: NOT
86899: AND
86900: OR
86901: IFFALSE 86905
// exit ;
86903: GO 87187
// if GetType ( factory ) = unit_human then
86905: LD_VAR 0 1
86909: PPUSH
86910: CALL_OW 247
86914: PUSH
86915: LD_INT 1
86917: EQUAL
86918: IFFALSE 86935
// factory := IsInUnit ( factory ) ;
86920: LD_ADDR_VAR 0 1
86924: PUSH
86925: LD_VAR 0 1
86929: PPUSH
86930: CALL_OW 310
86934: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86935: LD_VAR 0 1
86939: PPUSH
86940: CALL_OW 266
86944: PUSH
86945: LD_INT 3
86947: NONEQUAL
86948: IFFALSE 86952
// exit ;
86950: GO 87187
// for i := 1 to Count ( factoryWaypoints ) do
86952: LD_ADDR_VAR 0 5
86956: PUSH
86957: DOUBLE
86958: LD_INT 1
86960: DEC
86961: ST_TO_ADDR
86962: LD_EXP 124
86966: PPUSH
86967: CALL 30877 0 1
86971: PUSH
86972: FOR_TO
86973: IFFALSE 87135
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
86975: LD_VAR 0 2
86979: PPUSH
86980: LD_VAR 0 3
86984: PPUSH
86985: CALL_OW 428
86989: PUSH
86990: LD_EXP 124
86994: PUSH
86995: LD_VAR 0 5
86999: ARRAY
87000: PUSH
87001: LD_INT 2
87003: ARRAY
87004: EQUAL
87005: IFFALSE 87037
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
87007: LD_ADDR_EXP 124
87011: PUSH
87012: LD_EXP 124
87016: PPUSH
87017: LD_VAR 0 5
87021: PPUSH
87022: CALL_OW 3
87026: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87027: CALL 87192 0 0
// exit ;
87031: POP
87032: POP
87033: GO 87187
// end else
87035: GO 87133
// if factory = factoryWaypoints [ i ] [ 2 ] then
87037: LD_VAR 0 1
87041: PUSH
87042: LD_EXP 124
87046: PUSH
87047: LD_VAR 0 5
87051: ARRAY
87052: PUSH
87053: LD_INT 2
87055: ARRAY
87056: EQUAL
87057: IFFALSE 87133
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
87059: LD_ADDR_EXP 124
87063: PUSH
87064: LD_EXP 124
87068: PPUSH
87069: LD_VAR 0 5
87073: PPUSH
87074: CALL_OW 3
87078: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87079: LD_ADDR_EXP 124
87083: PUSH
87084: LD_EXP 124
87088: PPUSH
87089: LD_VAR 0 1
87093: PPUSH
87094: CALL_OW 255
87098: PUSH
87099: LD_VAR 0 1
87103: PUSH
87104: LD_VAR 0 2
87108: PUSH
87109: LD_VAR 0 3
87113: PUSH
87114: EMPTY
87115: LIST
87116: LIST
87117: LIST
87118: LIST
87119: PPUSH
87120: CALL 66853 0 2
87124: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87125: CALL 87192 0 0
// exit ;
87129: POP
87130: POP
87131: GO 87187
// end ; end ;
87133: GO 86972
87135: POP
87136: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87137: LD_ADDR_EXP 124
87141: PUSH
87142: LD_EXP 124
87146: PPUSH
87147: LD_VAR 0 1
87151: PPUSH
87152: CALL_OW 255
87156: PUSH
87157: LD_VAR 0 1
87161: PUSH
87162: LD_VAR 0 2
87166: PUSH
87167: LD_VAR 0 3
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: PPUSH
87178: CALL 66853 0 2
87182: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87183: CALL 87192 0 0
// end ;
87187: LD_VAR 0 4
87191: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
87192: LD_INT 0
87194: PPUSH
87195: PPUSH
87196: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
87197: LD_STRING resetFactoryWaypoint();
87199: PPUSH
87200: CALL_OW 559
// if factoryWaypoints then
87204: LD_EXP 124
87208: IFFALSE 87329
// begin list := factoryWaypoints ;
87210: LD_ADDR_VAR 0 3
87214: PUSH
87215: LD_EXP 124
87219: ST_TO_ADDR
// for i := 1 to list do
87220: LD_ADDR_VAR 0 2
87224: PUSH
87225: DOUBLE
87226: LD_INT 1
87228: DEC
87229: ST_TO_ADDR
87230: LD_VAR 0 3
87234: PUSH
87235: FOR_TO
87236: IFFALSE 87327
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87238: LD_STRING setFactoryWaypointXY(
87240: PUSH
87241: LD_VAR 0 3
87245: PUSH
87246: LD_VAR 0 2
87250: ARRAY
87251: PUSH
87252: LD_INT 1
87254: ARRAY
87255: STR
87256: PUSH
87257: LD_STRING ,
87259: STR
87260: PUSH
87261: LD_VAR 0 3
87265: PUSH
87266: LD_VAR 0 2
87270: ARRAY
87271: PUSH
87272: LD_INT 2
87274: ARRAY
87275: STR
87276: PUSH
87277: LD_STRING ,
87279: STR
87280: PUSH
87281: LD_VAR 0 3
87285: PUSH
87286: LD_VAR 0 2
87290: ARRAY
87291: PUSH
87292: LD_INT 3
87294: ARRAY
87295: STR
87296: PUSH
87297: LD_STRING ,
87299: STR
87300: PUSH
87301: LD_VAR 0 3
87305: PUSH
87306: LD_VAR 0 2
87310: ARRAY
87311: PUSH
87312: LD_INT 4
87314: ARRAY
87315: STR
87316: PUSH
87317: LD_STRING )
87319: STR
87320: PPUSH
87321: CALL_OW 559
87325: GO 87235
87327: POP
87328: POP
// end ; end ;
87329: LD_VAR 0 1
87333: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
87334: LD_INT 0
87336: PPUSH
// if HexInfo ( x , y ) = warehouse then
87337: LD_VAR 0 2
87341: PPUSH
87342: LD_VAR 0 3
87346: PPUSH
87347: CALL_OW 428
87351: PUSH
87352: LD_VAR 0 1
87356: EQUAL
87357: IFFALSE 87384
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
87359: LD_ADDR_EXP 126
87363: PUSH
87364: LD_EXP 126
87368: PPUSH
87369: LD_VAR 0 1
87373: PPUSH
87374: LD_INT 0
87376: PPUSH
87377: CALL_OW 1
87381: ST_TO_ADDR
87382: GO 87435
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
87384: LD_ADDR_EXP 126
87388: PUSH
87389: LD_EXP 126
87393: PPUSH
87394: LD_VAR 0 1
87398: PPUSH
87399: LD_VAR 0 1
87403: PPUSH
87404: CALL_OW 255
87408: PUSH
87409: LD_VAR 0 1
87413: PUSH
87414: LD_VAR 0 2
87418: PUSH
87419: LD_VAR 0 3
87423: PUSH
87424: EMPTY
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: PPUSH
87430: CALL_OW 1
87434: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87435: CALL 87444 0 0
// end ;
87439: LD_VAR 0 4
87443: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87444: LD_INT 0
87446: PPUSH
87447: PPUSH
87448: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87449: LD_STRING resetWarehouseGatheringPoints();
87451: PPUSH
87452: CALL_OW 559
// if warehouseGatheringPoints then
87456: LD_EXP 126
87460: IFFALSE 87586
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87462: LD_ADDR_VAR 0 3
87466: PUSH
87467: LD_EXP 126
87471: PPUSH
87472: CALL 70787 0 1
87476: ST_TO_ADDR
// for i := 1 to list do
87477: LD_ADDR_VAR 0 2
87481: PUSH
87482: DOUBLE
87483: LD_INT 1
87485: DEC
87486: ST_TO_ADDR
87487: LD_VAR 0 3
87491: PUSH
87492: FOR_TO
87493: IFFALSE 87584
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87495: LD_STRING setWarehouseGatheringPointXY(
87497: PUSH
87498: LD_VAR 0 3
87502: PUSH
87503: LD_VAR 0 2
87507: ARRAY
87508: PUSH
87509: LD_INT 1
87511: ARRAY
87512: STR
87513: PUSH
87514: LD_STRING ,
87516: STR
87517: PUSH
87518: LD_VAR 0 3
87522: PUSH
87523: LD_VAR 0 2
87527: ARRAY
87528: PUSH
87529: LD_INT 2
87531: ARRAY
87532: STR
87533: PUSH
87534: LD_STRING ,
87536: STR
87537: PUSH
87538: LD_VAR 0 3
87542: PUSH
87543: LD_VAR 0 2
87547: ARRAY
87548: PUSH
87549: LD_INT 3
87551: ARRAY
87552: STR
87553: PUSH
87554: LD_STRING ,
87556: STR
87557: PUSH
87558: LD_VAR 0 3
87562: PUSH
87563: LD_VAR 0 2
87567: ARRAY
87568: PUSH
87569: LD_INT 4
87571: ARRAY
87572: STR
87573: PUSH
87574: LD_STRING )
87576: STR
87577: PPUSH
87578: CALL_OW 559
87582: GO 87492
87584: POP
87585: POP
// end ; end ;
87586: LD_VAR 0 1
87590: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87591: LD_EXP 126
87595: IFFALSE 88290
87597: GO 87599
87599: DISABLE
87600: LD_INT 0
87602: PPUSH
87603: PPUSH
87604: PPUSH
87605: PPUSH
87606: PPUSH
87607: PPUSH
87608: PPUSH
87609: PPUSH
87610: PPUSH
// begin enable ;
87611: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87612: LD_ADDR_VAR 0 3
87616: PUSH
87617: LD_EXP 126
87621: PPUSH
87622: CALL 70787 0 1
87626: ST_TO_ADDR
// if not list then
87627: LD_VAR 0 3
87631: NOT
87632: IFFALSE 87636
// exit ;
87634: GO 88290
// for i := 1 to list do
87636: LD_ADDR_VAR 0 1
87640: PUSH
87641: DOUBLE
87642: LD_INT 1
87644: DEC
87645: ST_TO_ADDR
87646: LD_VAR 0 3
87650: PUSH
87651: FOR_TO
87652: IFFALSE 88288
// begin depot := list [ i ] [ 2 ] ;
87654: LD_ADDR_VAR 0 8
87658: PUSH
87659: LD_VAR 0 3
87663: PUSH
87664: LD_VAR 0 1
87668: ARRAY
87669: PUSH
87670: LD_INT 2
87672: ARRAY
87673: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87674: LD_ADDR_VAR 0 5
87678: PUSH
87679: LD_VAR 0 3
87683: PUSH
87684: LD_VAR 0 1
87688: ARRAY
87689: PUSH
87690: LD_INT 1
87692: ARRAY
87693: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87694: LD_VAR 0 8
87698: PPUSH
87699: CALL_OW 301
87703: IFTRUE 87722
87705: PUSH
87706: LD_VAR 0 5
87710: PUSH
87711: LD_VAR 0 8
87715: PPUSH
87716: CALL_OW 255
87720: NONEQUAL
87721: OR
87722: IFFALSE 87751
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87724: LD_ADDR_EXP 126
87728: PUSH
87729: LD_EXP 126
87733: PPUSH
87734: LD_VAR 0 8
87738: PPUSH
87739: LD_INT 0
87741: PPUSH
87742: CALL_OW 1
87746: ST_TO_ADDR
// exit ;
87747: POP
87748: POP
87749: GO 88290
// end ; x := list [ i ] [ 3 ] ;
87751: LD_ADDR_VAR 0 6
87755: PUSH
87756: LD_VAR 0 3
87760: PUSH
87761: LD_VAR 0 1
87765: ARRAY
87766: PUSH
87767: LD_INT 3
87769: ARRAY
87770: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87771: LD_ADDR_VAR 0 7
87775: PUSH
87776: LD_VAR 0 3
87780: PUSH
87781: LD_VAR 0 1
87785: ARRAY
87786: PUSH
87787: LD_INT 4
87789: ARRAY
87790: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87791: LD_ADDR_VAR 0 9
87795: PUSH
87796: LD_VAR 0 6
87800: PPUSH
87801: LD_VAR 0 7
87805: PPUSH
87806: LD_INT 16
87808: PPUSH
87809: CALL 69361 0 3
87813: ST_TO_ADDR
// if not cratesNearbyPoint then
87814: LD_VAR 0 9
87818: NOT
87819: IFFALSE 87825
// exit ;
87821: POP
87822: POP
87823: GO 88290
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87825: LD_ADDR_VAR 0 4
87829: PUSH
87830: LD_INT 22
87832: PUSH
87833: LD_VAR 0 5
87837: PUSH
87838: EMPTY
87839: LIST
87840: LIST
87841: PUSH
87842: LD_INT 3
87844: PUSH
87845: LD_INT 60
87847: PUSH
87848: EMPTY
87849: LIST
87850: PUSH
87851: EMPTY
87852: LIST
87853: LIST
87854: PUSH
87855: LD_INT 91
87857: PUSH
87858: LD_VAR 0 8
87862: PUSH
87863: LD_INT 6
87865: PUSH
87866: EMPTY
87867: LIST
87868: LIST
87869: LIST
87870: PUSH
87871: LD_INT 2
87873: PUSH
87874: LD_INT 25
87876: PUSH
87877: LD_INT 2
87879: PUSH
87880: EMPTY
87881: LIST
87882: LIST
87883: PUSH
87884: LD_INT 25
87886: PUSH
87887: LD_INT 16
87889: PUSH
87890: EMPTY
87891: LIST
87892: LIST
87893: PUSH
87894: EMPTY
87895: LIST
87896: LIST
87897: LIST
87898: PUSH
87899: EMPTY
87900: LIST
87901: LIST
87902: LIST
87903: LIST
87904: PPUSH
87905: CALL_OW 69
87909: PUSH
87910: LD_VAR 0 8
87914: PPUSH
87915: CALL_OW 313
87919: PPUSH
87920: LD_INT 3
87922: PUSH
87923: LD_INT 60
87925: PUSH
87926: EMPTY
87927: LIST
87928: PUSH
87929: EMPTY
87930: LIST
87931: LIST
87932: PUSH
87933: LD_INT 2
87935: PUSH
87936: LD_INT 25
87938: PUSH
87939: LD_INT 2
87941: PUSH
87942: EMPTY
87943: LIST
87944: LIST
87945: PUSH
87946: LD_INT 25
87948: PUSH
87949: LD_INT 16
87951: PUSH
87952: EMPTY
87953: LIST
87954: LIST
87955: PUSH
87956: EMPTY
87957: LIST
87958: LIST
87959: LIST
87960: PUSH
87961: EMPTY
87962: LIST
87963: LIST
87964: PPUSH
87965: CALL_OW 72
87969: UNION
87970: ST_TO_ADDR
// if tmp then
87971: LD_VAR 0 4
87975: IFFALSE 88055
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87977: LD_ADDR_VAR 0 4
87981: PUSH
87982: LD_VAR 0 4
87986: PPUSH
87987: LD_INT 3
87989: PPUSH
87990: CALL 67168 0 2
87994: ST_TO_ADDR
// for j in tmp do
87995: LD_ADDR_VAR 0 2
87999: PUSH
88000: LD_VAR 0 4
88004: PUSH
88005: FOR_IN
88006: IFFALSE 88049
// begin if IsInUnit ( j ) then
88008: LD_VAR 0 2
88012: PPUSH
88013: CALL_OW 310
88017: IFFALSE 88028
// ComExit ( j ) ;
88019: LD_VAR 0 2
88023: PPUSH
88024: CALL 67251 0 1
// AddComCollect ( j , x , y ) ;
88028: LD_VAR 0 2
88032: PPUSH
88033: LD_VAR 0 6
88037: PPUSH
88038: LD_VAR 0 7
88042: PPUSH
88043: CALL_OW 177
// end ;
88047: GO 88005
88049: POP
88050: POP
// exit ;
88051: POP
88052: POP
88053: GO 88290
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
88055: LD_ADDR_VAR 0 4
88059: PUSH
88060: LD_INT 22
88062: PUSH
88063: LD_VAR 0 5
88067: PUSH
88068: EMPTY
88069: LIST
88070: LIST
88071: PUSH
88072: LD_INT 91
88074: PUSH
88075: LD_VAR 0 8
88079: PUSH
88080: LD_INT 8
88082: PUSH
88083: EMPTY
88084: LIST
88085: LIST
88086: LIST
88087: PUSH
88088: LD_INT 2
88090: PUSH
88091: LD_INT 34
88093: PUSH
88094: LD_INT 12
88096: PUSH
88097: EMPTY
88098: LIST
88099: LIST
88100: PUSH
88101: LD_INT 34
88103: PUSH
88104: LD_INT 51
88106: PUSH
88107: EMPTY
88108: LIST
88109: LIST
88110: PUSH
88111: LD_INT 34
88113: PUSH
88114: LD_INT 32
88116: PUSH
88117: EMPTY
88118: LIST
88119: LIST
88120: PUSH
88121: LD_INT 34
88123: PUSH
88124: LD_INT 89
88126: PUSH
88127: EMPTY
88128: LIST
88129: LIST
88130: PUSH
88131: EMPTY
88132: LIST
88133: LIST
88134: LIST
88135: LIST
88136: LIST
88137: PUSH
88138: EMPTY
88139: LIST
88140: LIST
88141: LIST
88142: PPUSH
88143: CALL_OW 69
88147: ST_TO_ADDR
// if tmp then
88148: LD_VAR 0 4
88152: IFFALSE 88286
// begin for j in tmp do
88154: LD_ADDR_VAR 0 2
88158: PUSH
88159: LD_VAR 0 4
88163: PUSH
88164: FOR_IN
88165: IFFALSE 88284
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
88167: LD_VAR 0 2
88171: PPUSH
88172: CALL_OW 262
88176: PUSH
88177: LD_INT 3
88179: EQUAL
88180: IFTRUE 88197
88182: PUSH
88183: LD_VAR 0 2
88187: PPUSH
88188: CALL_OW 261
88192: PUSH
88193: LD_INT 20
88195: GREATER
88196: OR
88197: IFFALSE 88211
88199: PUSH
88200: LD_VAR 0 2
88204: PPUSH
88205: CALL_OW 314
88209: NOT
88210: AND
88211: IFFALSE 88241
88213: PUSH
88214: LD_VAR 0 2
88218: PPUSH
88219: CALL_OW 263
88223: PUSH
88224: LD_INT 1
88226: NONEQUAL
88227: IFTRUE 88240
88229: PUSH
88230: LD_VAR 0 2
88234: PPUSH
88235: CALL_OW 311
88239: OR
88240: AND
88241: IFFALSE 88282
// begin ComCollect ( j , x , y ) ;
88243: LD_VAR 0 2
88247: PPUSH
88248: LD_VAR 0 6
88252: PPUSH
88253: LD_VAR 0 7
88257: PPUSH
88258: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
88262: LD_VAR 0 2
88266: PPUSH
88267: LD_VAR 0 8
88271: PPUSH
88272: CALL_OW 172
// exit ;
88276: POP
88277: POP
88278: POP
88279: POP
88280: GO 88290
// end ;
88282: GO 88164
88284: POP
88285: POP
// end ; end ;
88286: GO 87651
88288: POP
88289: POP
// end ; end_of_file
88290: PPOPN 9
88292: END
// export function SOS_UnitDestroyed ( un ) ; begin
88293: LD_INT 0
88295: PPUSH
// ComRadiation ( un ) ;
88296: LD_VAR 0 1
88300: PPUSH
88301: CALL 89463 0 1
// end ;
88305: LD_VAR 0 2
88309: RET
// export function SOS_UnitKamikazed ( un ) ; begin
88310: LD_INT 0
88312: PPUSH
// ComRadiation ( un ) ;
88313: LD_VAR 0 1
88317: PPUSH
88318: CALL 89463 0 1
// end ;
88322: LD_VAR 0 2
88326: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88327: LD_INT 0
88329: PPUSH
// end ;
88330: LD_VAR 0 4
88334: RET
// export function SOS_Command ( cmd ) ; begin
88335: LD_INT 0
88337: PPUSH
// end ;
88338: LD_VAR 0 2
88342: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88343: LD_INT 0
88345: PPUSH
// end ;
88346: LD_VAR 0 6
88350: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
88351: LD_INT 0
88353: PPUSH
88354: PPUSH
88355: PPUSH
88356: PPUSH
88357: PPUSH
// if not vehicle or not factory then
88358: LD_VAR 0 1
88362: NOT
88363: IFTRUE 88372
88365: PUSH
88366: LD_VAR 0 2
88370: NOT
88371: OR
88372: IFFALSE 88376
// exit ;
88374: GO 89038
// weapon := GetWeapon ( vehicle ) ;
88376: LD_ADDR_VAR 0 7
88380: PUSH
88381: LD_VAR 0 1
88385: PPUSH
88386: CALL_OW 264
88390: ST_TO_ADDR
// if weapon = ar_miner then
88391: LD_VAR 0 7
88395: PUSH
88396: LD_INT 81
88398: EQUAL
88399: IFFALSE 88456
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
88401: LD_ADDR_EXP 135
88405: PUSH
88406: LD_EXP 135
88410: PPUSH
88411: LD_EXP 135
88415: PUSH
88416: LD_INT 1
88418: PLUS
88419: PPUSH
88420: LD_VAR 0 1
88424: PPUSH
88425: CALL_OW 1
88429: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
88430: LD_ADDR_EXP 136
88434: PUSH
88435: LD_EXP 136
88439: PPUSH
88440: LD_EXP 136
88444: PUSH
88445: LD_INT 1
88447: PLUS
88448: PPUSH
88449: EMPTY
88450: PPUSH
88451: CALL_OW 1
88455: ST_TO_ADDR
// end ; if not factoryWaypoints then
88456: LD_EXP 124
88460: NOT
88461: IFFALSE 88465
// exit ;
88463: GO 89038
// for i := 1 to Count ( factoryWaypoints ) do
88465: LD_ADDR_VAR 0 4
88469: PUSH
88470: DOUBLE
88471: LD_INT 1
88473: DEC
88474: ST_TO_ADDR
88475: LD_EXP 124
88479: PPUSH
88480: CALL 30877 0 1
88484: PUSH
88485: FOR_TO
88486: IFFALSE 89036
// if factoryWaypoints [ i ] [ 2 ] = factory then
88488: LD_EXP 124
88492: PUSH
88493: LD_VAR 0 4
88497: ARRAY
88498: PUSH
88499: LD_INT 2
88501: ARRAY
88502: PUSH
88503: LD_VAR 0 2
88507: EQUAL
88508: IFFALSE 89034
// begin if GetControl ( vehicle ) = control_manual then
88510: LD_VAR 0 1
88514: PPUSH
88515: CALL_OW 263
88519: PUSH
88520: LD_INT 1
88522: EQUAL
88523: IFFALSE 88887
// begin driver := IsDrivenBy ( vehicle ) ;
88525: LD_ADDR_VAR 0 5
88529: PUSH
88530: LD_VAR 0 1
88534: PPUSH
88535: CALL_OW 311
88539: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
88540: LD_VAR 0 5
88544: PUSH
88545: LD_EXP 125
88549: IN
88550: IFTRUE 88564
88552: PUSH
88553: LD_VAR 0 1
88557: PUSH
88558: LD_EXP 125
88562: IN
88563: OR
88564: IFFALSE 88570
// exit ;
88566: POP
88567: POP
88568: GO 89038
// if not HasTask ( driver ) then
88570: LD_VAR 0 5
88574: PPUSH
88575: CALL_OW 314
88579: NOT
88580: IFFALSE 88885
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
88582: LD_ADDR_EXP 125
88586: PUSH
88587: LD_EXP 125
88591: PPUSH
88592: LD_VAR 0 5
88596: PPUSH
88597: CALL 66853 0 2
88601: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
88602: LD_ADDR_EXP 125
88606: PUSH
88607: LD_EXP 125
88611: PPUSH
88612: LD_VAR 0 1
88616: PPUSH
88617: CALL 66853 0 2
88621: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88622: LD_ADDR_VAR 0 6
88626: PUSH
88627: LD_EXP 124
88631: PUSH
88632: LD_VAR 0 4
88636: ARRAY
88637: PUSH
88638: LD_INT 3
88640: ARRAY
88641: PPUSH
88642: LD_EXP 124
88646: PUSH
88647: LD_VAR 0 4
88651: ARRAY
88652: PUSH
88653: LD_INT 4
88655: ARRAY
88656: PPUSH
88657: CALL_OW 428
88661: ST_TO_ADDR
// if hex then
88662: LD_VAR 0 6
88666: IFFALSE 88684
// ComMoveUnit ( driver , hex ) else
88668: LD_VAR 0 5
88672: PPUSH
88673: LD_VAR 0 6
88677: PPUSH
88678: CALL_OW 112
88682: GO 88768
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
88684: LD_VAR 0 1
88688: PPUSH
88689: LD_EXP 124
88693: PUSH
88694: LD_VAR 0 4
88698: ARRAY
88699: PUSH
88700: LD_INT 3
88702: ARRAY
88703: PPUSH
88704: LD_EXP 124
88708: PUSH
88709: LD_VAR 0 4
88713: ARRAY
88714: PUSH
88715: LD_INT 4
88717: ARRAY
88718: PPUSH
88719: CALL_OW 297
88723: PUSH
88724: LD_INT 0
88726: GREATER
88727: IFFALSE 88768
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88729: LD_VAR 0 5
88733: PPUSH
88734: LD_EXP 124
88738: PUSH
88739: LD_VAR 0 4
88743: ARRAY
88744: PUSH
88745: LD_INT 3
88747: ARRAY
88748: PPUSH
88749: LD_EXP 124
88753: PUSH
88754: LD_VAR 0 4
88758: ARRAY
88759: PUSH
88760: LD_INT 4
88762: ARRAY
88763: PPUSH
88764: CALL_OW 111
// AddComExitVehicle ( driver ) ;
88768: LD_VAR 0 5
88772: PPUSH
88773: CALL_OW 181
// if Multiplayer then
88777: LD_OWVAR 4
88781: IFFALSE 88830
// begin repeat wait ( 10 ) ;
88783: LD_INT 10
88785: PPUSH
88786: CALL_OW 67
// until not IsInUnit ( driver ) ;
88790: LD_VAR 0 5
88794: PPUSH
88795: CALL_OW 310
88799: NOT
88800: IFFALSE 88783
// if not HasTask ( driver ) then
88802: LD_VAR 0 5
88806: PPUSH
88807: CALL_OW 314
88811: NOT
88812: IFFALSE 88828
// ComEnterUnit ( driver , factory ) ;
88814: LD_VAR 0 5
88818: PPUSH
88819: LD_VAR 0 2
88823: PPUSH
88824: CALL_OW 120
// end else
88828: GO 88844
// AddComEnterUnit ( driver , factory ) ;
88830: LD_VAR 0 5
88834: PPUSH
88835: LD_VAR 0 2
88839: PPUSH
88840: CALL_OW 180
// wait ( 0 0$1 ) ;
88844: LD_INT 35
88846: PPUSH
88847: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
88851: LD_ADDR_EXP 125
88855: PUSH
88856: LD_EXP 125
88860: PUSH
88861: LD_VAR 0 5
88865: DIFF
88866: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
88867: LD_ADDR_EXP 125
88871: PUSH
88872: LD_EXP 125
88876: PUSH
88877: LD_VAR 0 1
88881: DIFF
88882: ST_TO_ADDR
// break ;
88883: GO 89036
// end ; end else
88885: GO 89034
// if GetControl ( vehicle ) = control_remote then
88887: LD_VAR 0 1
88891: PPUSH
88892: CALL_OW 263
88896: PUSH
88897: LD_INT 2
88899: EQUAL
88900: IFFALSE 88986
// begin wait ( 0 0$2 ) ;
88902: LD_INT 70
88904: PPUSH
88905: CALL_OW 67
// repeat wait ( 10 ) ;
88909: LD_INT 10
88911: PPUSH
88912: CALL_OW 67
// Connect ( vehicle ) ;
88916: LD_VAR 0 1
88920: PPUSH
88921: CALL 37155 0 1
// until IsControledBy ( vehicle ) ;
88925: LD_VAR 0 1
88929: PPUSH
88930: CALL_OW 312
88934: IFFALSE 88909
// wait ( 10 ) ;
88936: LD_INT 10
88938: PPUSH
88939: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88943: LD_VAR 0 1
88947: PPUSH
88948: LD_EXP 124
88952: PUSH
88953: LD_VAR 0 4
88957: ARRAY
88958: PUSH
88959: LD_INT 3
88961: ARRAY
88962: PPUSH
88963: LD_EXP 124
88967: PUSH
88968: LD_VAR 0 4
88972: ARRAY
88973: PUSH
88974: LD_INT 4
88976: ARRAY
88977: PPUSH
88978: CALL_OW 111
// break ;
88982: GO 89036
// end else
88984: GO 89034
// begin wait ( 0 0$3 ) ;
88986: LD_INT 105
88988: PPUSH
88989: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88993: LD_VAR 0 1
88997: PPUSH
88998: LD_EXP 124
89002: PUSH
89003: LD_VAR 0 4
89007: ARRAY
89008: PUSH
89009: LD_INT 3
89011: ARRAY
89012: PPUSH
89013: LD_EXP 124
89017: PUSH
89018: LD_VAR 0 4
89022: ARRAY
89023: PUSH
89024: LD_INT 4
89026: ARRAY
89027: PPUSH
89028: CALL_OW 111
// break ;
89032: GO 89036
// end ; end ;
89034: GO 88485
89036: POP
89037: POP
// end ;
89038: LD_VAR 0 3
89042: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
89043: LD_INT 0
89045: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
89046: LD_VAR 0 1
89050: PUSH
89051: LD_INT 250
89053: EQUAL
89054: IFFALSE 89071
89056: PUSH
89057: LD_VAR 0 2
89061: PPUSH
89062: CALL_OW 264
89066: PUSH
89067: LD_INT 81
89069: EQUAL
89070: AND
89071: IFFALSE 89092
// MinerPlaceMine ( unit , x , y ) ;
89073: LD_VAR 0 2
89077: PPUSH
89078: LD_VAR 0 4
89082: PPUSH
89083: LD_VAR 0 5
89087: PPUSH
89088: CALL 92438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
89092: LD_VAR 0 1
89096: PUSH
89097: LD_INT 251
89099: EQUAL
89100: IFFALSE 89117
89102: PUSH
89103: LD_VAR 0 2
89107: PPUSH
89108: CALL_OW 264
89112: PUSH
89113: LD_INT 81
89115: EQUAL
89116: AND
89117: IFFALSE 89138
// MinerDetonateMine ( unit , x , y ) ;
89119: LD_VAR 0 2
89123: PPUSH
89124: LD_VAR 0 4
89128: PPUSH
89129: LD_VAR 0 5
89133: PPUSH
89134: CALL 92845 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
89138: LD_VAR 0 1
89142: PUSH
89143: LD_INT 252
89145: EQUAL
89146: IFFALSE 89163
89148: PUSH
89149: LD_VAR 0 2
89153: PPUSH
89154: CALL_OW 264
89158: PUSH
89159: LD_INT 81
89161: EQUAL
89162: AND
89163: IFFALSE 89184
// MinerCreateMinefield ( unit , x , y ) ;
89165: LD_VAR 0 2
89169: PPUSH
89170: LD_VAR 0 4
89174: PPUSH
89175: LD_VAR 0 5
89179: PPUSH
89180: CALL 93077 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
89184: LD_VAR 0 1
89188: PUSH
89189: LD_INT 253
89191: EQUAL
89192: IFFALSE 89209
89194: PUSH
89195: LD_VAR 0 2
89199: PPUSH
89200: CALL_OW 257
89204: PUSH
89205: LD_INT 5
89207: EQUAL
89208: AND
89209: IFFALSE 89230
// ComBinocular ( unit , x , y ) ;
89211: LD_VAR 0 2
89215: PPUSH
89216: LD_VAR 0 4
89220: PPUSH
89221: LD_VAR 0 5
89225: PPUSH
89226: CALL 93452 0 3
// if selectedUnit then
89230: LD_VAR 0 3
89234: IFFALSE 89294
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
89236: LD_VAR 0 1
89240: PUSH
89241: LD_INT 254
89243: EQUAL
89244: IFFALSE 89261
89246: PUSH
89247: LD_VAR 0 2
89251: PPUSH
89252: CALL_OW 264
89256: PUSH
89257: LD_INT 99
89259: EQUAL
89260: AND
89261: IFFALSE 89278
89263: PUSH
89264: LD_VAR 0 3
89268: PPUSH
89269: CALL_OW 263
89273: PUSH
89274: LD_INT 3
89276: EQUAL
89277: AND
89278: IFFALSE 89294
// HackDestroyVehicle ( unit , selectedUnit ) ;
89280: LD_VAR 0 2
89284: PPUSH
89285: LD_VAR 0 3
89289: PPUSH
89290: CALL 91628 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
89294: LD_VAR 0 1
89298: PUSH
89299: LD_INT 255
89301: EQUAL
89302: IFFALSE 89326
89304: PUSH
89305: LD_VAR 0 2
89309: PPUSH
89310: CALL_OW 264
89314: PUSH
89315: LD_INT 14
89317: PUSH
89318: LD_INT 53
89320: PUSH
89321: EMPTY
89322: LIST
89323: LIST
89324: IN
89325: AND
89326: IFFALSE 89344
89328: PUSH
89329: LD_VAR 0 4
89333: PPUSH
89334: LD_VAR 0 5
89338: PPUSH
89339: CALL_OW 488
89343: AND
89344: IFFALSE 89368
// CutTreeXYR ( unit , x , y , 12 ) ;
89346: LD_VAR 0 2
89350: PPUSH
89351: LD_VAR 0 4
89355: PPUSH
89356: LD_VAR 0 5
89360: PPUSH
89361: LD_INT 12
89363: PPUSH
89364: CALL 89559 0 4
// if cmd = 256 then
89368: LD_VAR 0 1
89372: PUSH
89373: LD_INT 256
89375: EQUAL
89376: IFFALSE 89397
// SetFactoryWaypoint ( unit , x , y ) ;
89378: LD_VAR 0 2
89382: PPUSH
89383: LD_VAR 0 4
89387: PPUSH
89388: LD_VAR 0 5
89392: PPUSH
89393: CALL 86838 0 3
// if cmd = 257 then
89397: LD_VAR 0 1
89401: PUSH
89402: LD_INT 257
89404: EQUAL
89405: IFFALSE 89426
// SetWarehouseGatheringPoint ( unit , x , y ) ;
89407: LD_VAR 0 2
89411: PPUSH
89412: LD_VAR 0 4
89416: PPUSH
89417: LD_VAR 0 5
89421: PPUSH
89422: CALL 87334 0 3
// if cmd = 258 then
89426: LD_VAR 0 1
89430: PUSH
89431: LD_INT 258
89433: EQUAL
89434: IFFALSE 89458
// BurnTreeXYR ( unit , x , y , 8 ) ;
89436: LD_VAR 0 2
89440: PPUSH
89441: LD_VAR 0 4
89445: PPUSH
89446: LD_VAR 0 5
89450: PPUSH
89451: LD_INT 8
89453: PPUSH
89454: CALL 89981 0 4
// end ;
89458: LD_VAR 0 6
89462: RET
// export function ComRadiation ( un ) ; var eff ; begin
89463: LD_INT 0
89465: PPUSH
89466: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
89467: LD_VAR 0 1
89471: PPUSH
89472: CALL_OW 264
89476: PUSH
89477: LD_INT 91
89479: NONEQUAL
89480: IFFALSE 89484
// exit ;
89482: GO 89554
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89484: LD_INT 68
89486: PPUSH
89487: LD_VAR 0 1
89491: PPUSH
89492: CALL_OW 255
89496: PPUSH
89497: CALL_OW 321
89501: PUSH
89502: LD_INT 2
89504: EQUAL
89505: IFFALSE 89517
// eff := 50 else
89507: LD_ADDR_VAR 0 3
89511: PUSH
89512: LD_INT 50
89514: ST_TO_ADDR
89515: GO 89525
// eff := 25 ;
89517: LD_ADDR_VAR 0 3
89521: PUSH
89522: LD_INT 25
89524: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89525: LD_VAR 0 1
89529: PPUSH
89530: CALL_OW 250
89534: PPUSH
89535: LD_VAR 0 1
89539: PPUSH
89540: CALL_OW 251
89544: PPUSH
89545: LD_VAR 0 3
89549: PPUSH
89550: CALL_OW 495
// end ;
89554: LD_VAR 0 2
89558: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89559: LD_INT 0
89561: PPUSH
89562: PPUSH
89563: PPUSH
89564: PPUSH
89565: PPUSH
89566: PPUSH
89567: PPUSH
89568: PPUSH
89569: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
89570: LD_VAR 0 1
89574: PPUSH
89575: CALL_OW 302
89579: NOT
89580: IFTRUE 89599
89582: PUSH
89583: LD_VAR 0 2
89587: PPUSH
89588: LD_VAR 0 3
89592: PPUSH
89593: CALL_OW 488
89597: NOT
89598: OR
89599: IFTRUE 89608
89601: PUSH
89602: LD_VAR 0 4
89606: NOT
89607: OR
89608: IFFALSE 89612
// exit ;
89610: GO 89976
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
89612: LD_VAR 0 1
89616: PPUSH
89617: CALL_OW 437
89621: PPUSH
89622: CALL 30877 0 1
89626: PUSH
89627: LD_INT 10
89629: GREATER
89630: IFFALSE 89634
// exit ;
89632: GO 89976
// list := [ ] ;
89634: LD_ADDR_VAR 0 13
89638: PUSH
89639: EMPTY
89640: ST_TO_ADDR
// if x - r < 0 then
89641: LD_VAR 0 2
89645: PUSH
89646: LD_VAR 0 4
89650: MINUS
89651: PUSH
89652: LD_INT 0
89654: LESS
89655: IFFALSE 89667
// min_x := 0 else
89657: LD_ADDR_VAR 0 7
89661: PUSH
89662: LD_INT 0
89664: ST_TO_ADDR
89665: GO 89683
// min_x := x - r ;
89667: LD_ADDR_VAR 0 7
89671: PUSH
89672: LD_VAR 0 2
89676: PUSH
89677: LD_VAR 0 4
89681: MINUS
89682: ST_TO_ADDR
// if y - r < 0 then
89683: LD_VAR 0 3
89687: PUSH
89688: LD_VAR 0 4
89692: MINUS
89693: PUSH
89694: LD_INT 0
89696: LESS
89697: IFFALSE 89709
// min_y := 0 else
89699: LD_ADDR_VAR 0 8
89703: PUSH
89704: LD_INT 0
89706: ST_TO_ADDR
89707: GO 89725
// min_y := y - r ;
89709: LD_ADDR_VAR 0 8
89713: PUSH
89714: LD_VAR 0 3
89718: PUSH
89719: LD_VAR 0 4
89723: MINUS
89724: ST_TO_ADDR
// max_x := x + r ;
89725: LD_ADDR_VAR 0 9
89729: PUSH
89730: LD_VAR 0 2
89734: PUSH
89735: LD_VAR 0 4
89739: PLUS
89740: ST_TO_ADDR
// max_y := y + r ;
89741: LD_ADDR_VAR 0 10
89745: PUSH
89746: LD_VAR 0 3
89750: PUSH
89751: LD_VAR 0 4
89755: PLUS
89756: ST_TO_ADDR
// for _x = min_x to max_x do
89757: LD_ADDR_VAR 0 11
89761: PUSH
89762: DOUBLE
89763: LD_VAR 0 7
89767: DEC
89768: ST_TO_ADDR
89769: LD_VAR 0 9
89773: PUSH
89774: FOR_TO
89775: IFFALSE 89894
// for _y = min_y to max_y do
89777: LD_ADDR_VAR 0 12
89781: PUSH
89782: DOUBLE
89783: LD_VAR 0 8
89787: DEC
89788: ST_TO_ADDR
89789: LD_VAR 0 10
89793: PUSH
89794: FOR_TO
89795: IFFALSE 89890
// begin if not ValidHex ( _x , _y ) then
89797: LD_VAR 0 11
89801: PPUSH
89802: LD_VAR 0 12
89806: PPUSH
89807: CALL_OW 488
89811: NOT
89812: IFFALSE 89816
// continue ;
89814: GO 89794
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89816: LD_VAR 0 11
89820: PPUSH
89821: LD_VAR 0 12
89825: PPUSH
89826: CALL_OW 351
89830: IFFALSE 89848
89832: PUSH
89833: LD_VAR 0 11
89837: PPUSH
89838: LD_VAR 0 12
89842: PPUSH
89843: CALL_OW 554
89847: AND
89848: IFFALSE 89888
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89850: LD_ADDR_VAR 0 13
89854: PUSH
89855: LD_VAR 0 13
89859: PPUSH
89860: LD_VAR 0 13
89864: PUSH
89865: LD_INT 1
89867: PLUS
89868: PPUSH
89869: LD_VAR 0 11
89873: PUSH
89874: LD_VAR 0 12
89878: PUSH
89879: EMPTY
89880: LIST
89881: LIST
89882: PPUSH
89883: CALL_OW 2
89887: ST_TO_ADDR
// end ;
89888: GO 89794
89890: POP
89891: POP
89892: GO 89774
89894: POP
89895: POP
// if not list then
89896: LD_VAR 0 13
89900: NOT
89901: IFFALSE 89905
// exit ;
89903: GO 89976
// for i in list do
89905: LD_ADDR_VAR 0 6
89909: PUSH
89910: LD_VAR 0 13
89914: PUSH
89915: FOR_IN
89916: IFFALSE 89974
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89918: LD_VAR 0 1
89922: PPUSH
89923: LD_STRING M
89925: PUSH
89926: LD_VAR 0 6
89930: PUSH
89931: LD_INT 1
89933: ARRAY
89934: PUSH
89935: LD_VAR 0 6
89939: PUSH
89940: LD_INT 2
89942: ARRAY
89943: PUSH
89944: LD_INT 0
89946: PUSH
89947: LD_INT 0
89949: PUSH
89950: LD_INT 0
89952: PUSH
89953: LD_INT 0
89955: PUSH
89956: EMPTY
89957: LIST
89958: LIST
89959: LIST
89960: LIST
89961: LIST
89962: LIST
89963: LIST
89964: PUSH
89965: EMPTY
89966: LIST
89967: PPUSH
89968: CALL_OW 447
89972: GO 89915
89974: POP
89975: POP
// end ;
89976: LD_VAR 0 5
89980: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89981: LD_INT 0
89983: PPUSH
89984: PPUSH
89985: PPUSH
89986: PPUSH
89987: PPUSH
89988: PPUSH
89989: PPUSH
89990: PPUSH
89991: PPUSH
89992: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89993: LD_VAR 0 1
89997: PPUSH
89998: CALL_OW 302
90002: NOT
90003: IFTRUE 90022
90005: PUSH
90006: LD_VAR 0 2
90010: PPUSH
90011: LD_VAR 0 3
90015: PPUSH
90016: CALL_OW 488
90020: NOT
90021: OR
90022: IFTRUE 90031
90024: PUSH
90025: LD_VAR 0 4
90029: NOT
90030: OR
90031: IFFALSE 90035
// exit ;
90033: GO 90574
// if Count ( GetTaskList ( flame ) ) > 10 then
90035: LD_VAR 0 1
90039: PPUSH
90040: CALL_OW 437
90044: PPUSH
90045: CALL 30877 0 1
90049: PUSH
90050: LD_INT 10
90052: GREATER
90053: IFFALSE 90057
// exit ;
90055: GO 90574
// list := [ ] ;
90057: LD_ADDR_VAR 0 13
90061: PUSH
90062: EMPTY
90063: ST_TO_ADDR
// if x - r < 0 then
90064: LD_VAR 0 2
90068: PUSH
90069: LD_VAR 0 4
90073: MINUS
90074: PUSH
90075: LD_INT 0
90077: LESS
90078: IFFALSE 90090
// min_x := 0 else
90080: LD_ADDR_VAR 0 7
90084: PUSH
90085: LD_INT 0
90087: ST_TO_ADDR
90088: GO 90106
// min_x := x - r ;
90090: LD_ADDR_VAR 0 7
90094: PUSH
90095: LD_VAR 0 2
90099: PUSH
90100: LD_VAR 0 4
90104: MINUS
90105: ST_TO_ADDR
// if y - r < 0 then
90106: LD_VAR 0 3
90110: PUSH
90111: LD_VAR 0 4
90115: MINUS
90116: PUSH
90117: LD_INT 0
90119: LESS
90120: IFFALSE 90132
// min_y := 0 else
90122: LD_ADDR_VAR 0 8
90126: PUSH
90127: LD_INT 0
90129: ST_TO_ADDR
90130: GO 90148
// min_y := y - r ;
90132: LD_ADDR_VAR 0 8
90136: PUSH
90137: LD_VAR 0 3
90141: PUSH
90142: LD_VAR 0 4
90146: MINUS
90147: ST_TO_ADDR
// max_x := x + r ;
90148: LD_ADDR_VAR 0 9
90152: PUSH
90153: LD_VAR 0 2
90157: PUSH
90158: LD_VAR 0 4
90162: PLUS
90163: ST_TO_ADDR
// max_y := y + r ;
90164: LD_ADDR_VAR 0 10
90168: PUSH
90169: LD_VAR 0 3
90173: PUSH
90174: LD_VAR 0 4
90178: PLUS
90179: ST_TO_ADDR
// for _x = min_x to max_x do
90180: LD_ADDR_VAR 0 11
90184: PUSH
90185: DOUBLE
90186: LD_VAR 0 7
90190: DEC
90191: ST_TO_ADDR
90192: LD_VAR 0 9
90196: PUSH
90197: FOR_TO
90198: IFFALSE 90317
// for _y = min_y to max_y do
90200: LD_ADDR_VAR 0 12
90204: PUSH
90205: DOUBLE
90206: LD_VAR 0 8
90210: DEC
90211: ST_TO_ADDR
90212: LD_VAR 0 10
90216: PUSH
90217: FOR_TO
90218: IFFALSE 90313
// begin if not ValidHex ( _x , _y ) then
90220: LD_VAR 0 11
90224: PPUSH
90225: LD_VAR 0 12
90229: PPUSH
90230: CALL_OW 488
90234: NOT
90235: IFFALSE 90239
// continue ;
90237: GO 90217
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90239: LD_VAR 0 11
90243: PPUSH
90244: LD_VAR 0 12
90248: PPUSH
90249: CALL_OW 351
90253: IFFALSE 90271
90255: PUSH
90256: LD_VAR 0 11
90260: PPUSH
90261: LD_VAR 0 12
90265: PPUSH
90266: CALL_OW 554
90270: AND
90271: IFFALSE 90311
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90273: LD_ADDR_VAR 0 13
90277: PUSH
90278: LD_VAR 0 13
90282: PPUSH
90283: LD_VAR 0 13
90287: PUSH
90288: LD_INT 1
90290: PLUS
90291: PPUSH
90292: LD_VAR 0 11
90296: PUSH
90297: LD_VAR 0 12
90301: PUSH
90302: EMPTY
90303: LIST
90304: LIST
90305: PPUSH
90306: CALL_OW 2
90310: ST_TO_ADDR
// end ;
90311: GO 90217
90313: POP
90314: POP
90315: GO 90197
90317: POP
90318: POP
// if not list then
90319: LD_VAR 0 13
90323: NOT
90324: IFFALSE 90328
// exit ;
90326: GO 90574
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
90328: LD_ADDR_VAR 0 13
90332: PUSH
90333: LD_VAR 0 1
90337: PPUSH
90338: LD_VAR 0 13
90342: PPUSH
90343: LD_INT 1
90345: PPUSH
90346: LD_INT 1
90348: PPUSH
90349: CALL 34283 0 4
90353: ST_TO_ADDR
// ComStop ( flame ) ;
90354: LD_VAR 0 1
90358: PPUSH
90359: CALL_OW 141
// for i in list do
90363: LD_ADDR_VAR 0 6
90367: PUSH
90368: LD_VAR 0 13
90372: PUSH
90373: FOR_IN
90374: IFFALSE 90405
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
90376: LD_VAR 0 1
90380: PPUSH
90381: LD_VAR 0 6
90385: PUSH
90386: LD_INT 1
90388: ARRAY
90389: PPUSH
90390: LD_VAR 0 6
90394: PUSH
90395: LD_INT 2
90397: ARRAY
90398: PPUSH
90399: CALL_OW 176
90403: GO 90373
90405: POP
90406: POP
// repeat wait ( 0 0$1 ) ;
90407: LD_INT 35
90409: PPUSH
90410: CALL_OW 67
// task := GetTaskList ( flame ) ;
90414: LD_ADDR_VAR 0 14
90418: PUSH
90419: LD_VAR 0 1
90423: PPUSH
90424: CALL_OW 437
90428: ST_TO_ADDR
// if not task then
90429: LD_VAR 0 14
90433: NOT
90434: IFFALSE 90438
// exit ;
90436: GO 90574
// if task [ 1 ] [ 1 ] <> | then
90438: LD_VAR 0 14
90442: PUSH
90443: LD_INT 1
90445: ARRAY
90446: PUSH
90447: LD_INT 1
90449: ARRAY
90450: PUSH
90451: LD_STRING |
90453: NONEQUAL
90454: IFFALSE 90458
// exit ;
90456: GO 90574
// _x := task [ 1 ] [ 2 ] ;
90458: LD_ADDR_VAR 0 11
90462: PUSH
90463: LD_VAR 0 14
90467: PUSH
90468: LD_INT 1
90470: ARRAY
90471: PUSH
90472: LD_INT 2
90474: ARRAY
90475: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
90476: LD_ADDR_VAR 0 12
90480: PUSH
90481: LD_VAR 0 14
90485: PUSH
90486: LD_INT 1
90488: ARRAY
90489: PUSH
90490: LD_INT 3
90492: ARRAY
90493: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
90494: LD_VAR 0 11
90498: PPUSH
90499: LD_VAR 0 12
90503: PPUSH
90504: CALL_OW 351
90508: NOT
90509: IFTRUE 90528
90511: PUSH
90512: LD_VAR 0 11
90516: PPUSH
90517: LD_VAR 0 12
90521: PPUSH
90522: CALL_OW 554
90526: NOT
90527: OR
90528: IFFALSE 90562
// begin task := Delete ( task , 1 ) ;
90530: LD_ADDR_VAR 0 14
90534: PUSH
90535: LD_VAR 0 14
90539: PPUSH
90540: LD_INT 1
90542: PPUSH
90543: CALL_OW 3
90547: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
90548: LD_VAR 0 1
90552: PPUSH
90553: LD_VAR 0 14
90557: PPUSH
90558: CALL_OW 446
// end ; until not HasTask ( flame ) ;
90562: LD_VAR 0 1
90566: PPUSH
90567: CALL_OW 314
90571: NOT
90572: IFFALSE 90407
// end ;
90574: LD_VAR 0 5
90578: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
90579: LD_EXP 128
90583: NOT
90584: IFFALSE 90634
90586: GO 90588
90588: DISABLE
// begin initHack := true ;
90589: LD_ADDR_EXP 128
90593: PUSH
90594: LD_INT 1
90596: ST_TO_ADDR
// hackTanks := [ ] ;
90597: LD_ADDR_EXP 129
90601: PUSH
90602: EMPTY
90603: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
90604: LD_ADDR_EXP 130
90608: PUSH
90609: EMPTY
90610: ST_TO_ADDR
// hackLimit := 3 ;
90611: LD_ADDR_EXP 131
90615: PUSH
90616: LD_INT 3
90618: ST_TO_ADDR
// hackDist := 12 ;
90619: LD_ADDR_EXP 132
90623: PUSH
90624: LD_INT 12
90626: ST_TO_ADDR
// hackCounter := [ ] ;
90627: LD_ADDR_EXP 133
90631: PUSH
90632: EMPTY
90633: ST_TO_ADDR
// end ;
90634: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
90635: LD_EXP 128
90639: IFFALSE 90657
90641: PUSH
90642: LD_INT 34
90644: PUSH
90645: LD_INT 99
90647: PUSH
90648: EMPTY
90649: LIST
90650: LIST
90651: PPUSH
90652: CALL_OW 69
90656: AND
90657: IFFALSE 90910
90659: GO 90661
90661: DISABLE
90662: LD_INT 0
90664: PPUSH
90665: PPUSH
// begin enable ;
90666: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
90667: LD_ADDR_VAR 0 1
90671: PUSH
90672: LD_INT 34
90674: PUSH
90675: LD_INT 99
90677: PUSH
90678: EMPTY
90679: LIST
90680: LIST
90681: PPUSH
90682: CALL_OW 69
90686: PUSH
90687: FOR_IN
90688: IFFALSE 90908
// begin if not i in hackTanks then
90690: LD_VAR 0 1
90694: PUSH
90695: LD_EXP 129
90699: IN
90700: NOT
90701: IFFALSE 90784
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
90703: LD_ADDR_EXP 129
90707: PUSH
90708: LD_EXP 129
90712: PPUSH
90713: LD_EXP 129
90717: PUSH
90718: LD_INT 1
90720: PLUS
90721: PPUSH
90722: LD_VAR 0 1
90726: PPUSH
90727: CALL_OW 1
90731: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
90732: LD_ADDR_EXP 130
90736: PUSH
90737: LD_EXP 130
90741: PPUSH
90742: LD_EXP 130
90746: PUSH
90747: LD_INT 1
90749: PLUS
90750: PPUSH
90751: EMPTY
90752: PPUSH
90753: CALL_OW 1
90757: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
90758: LD_ADDR_EXP 133
90762: PUSH
90763: LD_EXP 133
90767: PPUSH
90768: LD_EXP 133
90772: PUSH
90773: LD_INT 1
90775: PLUS
90776: PPUSH
90777: EMPTY
90778: PPUSH
90779: CALL_OW 1
90783: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90784: LD_VAR 0 1
90788: PPUSH
90789: CALL_OW 302
90793: NOT
90794: IFFALSE 90807
// begin HackUnlinkAll ( i ) ;
90796: LD_VAR 0 1
90800: PPUSH
90801: CALL 90913 0 1
// continue ;
90805: GO 90687
// end ; HackCheckCapturedStatus ( i ) ;
90807: LD_VAR 0 1
90811: PPUSH
90812: CALL 91358 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90816: LD_ADDR_VAR 0 2
90820: PUSH
90821: LD_INT 81
90823: PUSH
90824: LD_VAR 0 1
90828: PPUSH
90829: CALL_OW 255
90833: PUSH
90834: EMPTY
90835: LIST
90836: LIST
90837: PUSH
90838: LD_INT 33
90840: PUSH
90841: LD_INT 3
90843: PUSH
90844: EMPTY
90845: LIST
90846: LIST
90847: PUSH
90848: LD_INT 91
90850: PUSH
90851: LD_VAR 0 1
90855: PUSH
90856: LD_EXP 132
90860: PUSH
90861: EMPTY
90862: LIST
90863: LIST
90864: LIST
90865: PUSH
90866: LD_INT 50
90868: PUSH
90869: EMPTY
90870: LIST
90871: PUSH
90872: EMPTY
90873: LIST
90874: LIST
90875: LIST
90876: LIST
90877: PPUSH
90878: CALL_OW 69
90882: ST_TO_ADDR
// if not tmp then
90883: LD_VAR 0 2
90887: NOT
90888: IFFALSE 90892
// continue ;
90890: GO 90687
// HackLink ( i , tmp ) ;
90892: LD_VAR 0 1
90896: PPUSH
90897: LD_VAR 0 2
90901: PPUSH
90902: CALL 91049 0 2
// end ;
90906: GO 90687
90908: POP
90909: POP
// end ;
90910: PPOPN 2
90912: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90913: LD_INT 0
90915: PPUSH
90916: PPUSH
90917: PPUSH
// if not hack in hackTanks then
90918: LD_VAR 0 1
90922: PUSH
90923: LD_EXP 129
90927: IN
90928: NOT
90929: IFFALSE 90933
// exit ;
90931: GO 91044
// index := GetElementIndex ( hackTanks , hack ) ;
90933: LD_ADDR_VAR 0 4
90937: PUSH
90938: LD_EXP 129
90942: PPUSH
90943: LD_VAR 0 1
90947: PPUSH
90948: CALL 33578 0 2
90952: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90953: LD_EXP 130
90957: PUSH
90958: LD_VAR 0 4
90962: ARRAY
90963: IFFALSE 91044
// begin for i in hackTanksCaptured [ index ] do
90965: LD_ADDR_VAR 0 3
90969: PUSH
90970: LD_EXP 130
90974: PUSH
90975: LD_VAR 0 4
90979: ARRAY
90980: PUSH
90981: FOR_IN
90982: IFFALSE 91008
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90984: LD_VAR 0 3
90988: PUSH
90989: LD_INT 1
90991: ARRAY
90992: PPUSH
90993: LD_VAR 0 3
90997: PUSH
90998: LD_INT 2
91000: ARRAY
91001: PPUSH
91002: CALL_OW 235
91006: GO 90981
91008: POP
91009: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
91010: LD_ADDR_EXP 130
91014: PUSH
91015: LD_EXP 130
91019: PPUSH
91020: LD_VAR 0 4
91024: PPUSH
91025: EMPTY
91026: PPUSH
91027: CALL_OW 1
91031: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
91032: LD_VAR 0 1
91036: PPUSH
91037: LD_INT 0
91039: PPUSH
91040: CALL_OW 505
// end ; end ;
91044: LD_VAR 0 2
91048: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
91049: LD_INT 0
91051: PPUSH
91052: PPUSH
91053: PPUSH
// if not hack in hackTanks or not vehicles then
91054: LD_VAR 0 1
91058: PUSH
91059: LD_EXP 129
91063: IN
91064: NOT
91065: IFTRUE 91074
91067: PUSH
91068: LD_VAR 0 2
91072: NOT
91073: OR
91074: IFFALSE 91078
// exit ;
91076: GO 91353
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
91078: LD_ADDR_VAR 0 2
91082: PUSH
91083: LD_VAR 0 1
91087: PPUSH
91088: LD_VAR 0 2
91092: PPUSH
91093: LD_INT 1
91095: PPUSH
91096: LD_INT 1
91098: PPUSH
91099: CALL 34230 0 4
91103: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
91104: LD_ADDR_VAR 0 5
91108: PUSH
91109: LD_EXP 129
91113: PPUSH
91114: LD_VAR 0 1
91118: PPUSH
91119: CALL 33578 0 2
91123: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
91124: LD_EXP 130
91128: PUSH
91129: LD_VAR 0 5
91133: ARRAY
91134: PUSH
91135: LD_EXP 131
91139: LESS
91140: IFFALSE 91329
// begin for i := 1 to vehicles do
91142: LD_ADDR_VAR 0 4
91146: PUSH
91147: DOUBLE
91148: LD_INT 1
91150: DEC
91151: ST_TO_ADDR
91152: LD_VAR 0 2
91156: PUSH
91157: FOR_TO
91158: IFFALSE 91327
// begin if hackTanksCaptured [ index ] = hackLimit then
91160: LD_EXP 130
91164: PUSH
91165: LD_VAR 0 5
91169: ARRAY
91170: PUSH
91171: LD_EXP 131
91175: EQUAL
91176: IFFALSE 91180
// break ;
91178: GO 91327
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
91180: LD_ADDR_EXP 133
91184: PUSH
91185: LD_EXP 133
91189: PPUSH
91190: LD_VAR 0 5
91194: PPUSH
91195: LD_EXP 133
91199: PUSH
91200: LD_VAR 0 5
91204: ARRAY
91205: PUSH
91206: LD_INT 1
91208: PLUS
91209: PPUSH
91210: CALL_OW 1
91214: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
91215: LD_ADDR_EXP 130
91219: PUSH
91220: LD_EXP 130
91224: PPUSH
91225: LD_VAR 0 5
91229: PUSH
91230: LD_EXP 130
91234: PUSH
91235: LD_VAR 0 5
91239: ARRAY
91240: PUSH
91241: LD_INT 1
91243: PLUS
91244: PUSH
91245: EMPTY
91246: LIST
91247: LIST
91248: PPUSH
91249: LD_VAR 0 2
91253: PUSH
91254: LD_VAR 0 4
91258: ARRAY
91259: PUSH
91260: LD_VAR 0 2
91264: PUSH
91265: LD_VAR 0 4
91269: ARRAY
91270: PPUSH
91271: CALL_OW 255
91275: PUSH
91276: EMPTY
91277: LIST
91278: LIST
91279: PPUSH
91280: CALL 33795 0 3
91284: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
91285: LD_VAR 0 2
91289: PUSH
91290: LD_VAR 0 4
91294: ARRAY
91295: PPUSH
91296: LD_VAR 0 1
91300: PPUSH
91301: CALL_OW 255
91305: PPUSH
91306: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
91310: LD_VAR 0 2
91314: PUSH
91315: LD_VAR 0 4
91319: ARRAY
91320: PPUSH
91321: CALL_OW 141
// end ;
91325: GO 91157
91327: POP
91328: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91329: LD_VAR 0 1
91333: PPUSH
91334: LD_EXP 130
91338: PUSH
91339: LD_VAR 0 5
91343: ARRAY
91344: PUSH
91345: LD_INT 0
91347: PLUS
91348: PPUSH
91349: CALL_OW 505
// end ;
91353: LD_VAR 0 3
91357: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
91358: LD_INT 0
91360: PPUSH
91361: PPUSH
91362: PPUSH
91363: PPUSH
// if not hack in hackTanks then
91364: LD_VAR 0 1
91368: PUSH
91369: LD_EXP 129
91373: IN
91374: NOT
91375: IFFALSE 91379
// exit ;
91377: GO 91623
// index := GetElementIndex ( hackTanks , hack ) ;
91379: LD_ADDR_VAR 0 4
91383: PUSH
91384: LD_EXP 129
91388: PPUSH
91389: LD_VAR 0 1
91393: PPUSH
91394: CALL 33578 0 2
91398: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
91399: LD_ADDR_VAR 0 3
91403: PUSH
91404: DOUBLE
91405: LD_EXP 130
91409: PUSH
91410: LD_VAR 0 4
91414: ARRAY
91415: INC
91416: ST_TO_ADDR
91417: LD_INT 1
91419: PUSH
91420: FOR_DOWNTO
91421: IFFALSE 91597
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
91423: LD_ADDR_VAR 0 5
91427: PUSH
91428: LD_EXP 130
91432: PUSH
91433: LD_VAR 0 4
91437: ARRAY
91438: PUSH
91439: LD_VAR 0 3
91443: ARRAY
91444: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
91445: LD_VAR 0 5
91449: PUSH
91450: LD_INT 1
91452: ARRAY
91453: PPUSH
91454: CALL_OW 302
91458: NOT
91459: IFTRUE 91487
91461: PUSH
91462: LD_VAR 0 5
91466: PUSH
91467: LD_INT 1
91469: ARRAY
91470: PPUSH
91471: CALL_OW 255
91475: PUSH
91476: LD_VAR 0 1
91480: PPUSH
91481: CALL_OW 255
91485: NONEQUAL
91486: OR
91487: IFFALSE 91595
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
91489: LD_VAR 0 5
91493: PUSH
91494: LD_INT 1
91496: ARRAY
91497: PPUSH
91498: CALL_OW 305
91502: IFFALSE 91530
91504: PUSH
91505: LD_VAR 0 5
91509: PUSH
91510: LD_INT 1
91512: ARRAY
91513: PPUSH
91514: CALL_OW 255
91518: PUSH
91519: LD_VAR 0 1
91523: PPUSH
91524: CALL_OW 255
91528: EQUAL
91529: AND
91530: IFFALSE 91554
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
91532: LD_VAR 0 5
91536: PUSH
91537: LD_INT 1
91539: ARRAY
91540: PPUSH
91541: LD_VAR 0 5
91545: PUSH
91546: LD_INT 2
91548: ARRAY
91549: PPUSH
91550: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
91554: LD_ADDR_EXP 130
91558: PUSH
91559: LD_EXP 130
91563: PPUSH
91564: LD_VAR 0 4
91568: PPUSH
91569: LD_EXP 130
91573: PUSH
91574: LD_VAR 0 4
91578: ARRAY
91579: PPUSH
91580: LD_VAR 0 3
91584: PPUSH
91585: CALL_OW 3
91589: PPUSH
91590: CALL_OW 1
91594: ST_TO_ADDR
// end ; end ;
91595: GO 91420
91597: POP
91598: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91599: LD_VAR 0 1
91603: PPUSH
91604: LD_EXP 130
91608: PUSH
91609: LD_VAR 0 4
91613: ARRAY
91614: PUSH
91615: LD_INT 0
91617: PLUS
91618: PPUSH
91619: CALL_OW 505
// end ;
91623: LD_VAR 0 2
91627: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
91628: LD_INT 0
91630: PPUSH
91631: PPUSH
91632: PPUSH
91633: PPUSH
// if not hack in hackTanks then
91634: LD_VAR 0 1
91638: PUSH
91639: LD_EXP 129
91643: IN
91644: NOT
91645: IFFALSE 91649
// exit ;
91647: GO 91734
// index := GetElementIndex ( hackTanks , hack ) ;
91649: LD_ADDR_VAR 0 5
91653: PUSH
91654: LD_EXP 129
91658: PPUSH
91659: LD_VAR 0 1
91663: PPUSH
91664: CALL 33578 0 2
91668: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
91669: LD_ADDR_VAR 0 4
91673: PUSH
91674: DOUBLE
91675: LD_INT 1
91677: DEC
91678: ST_TO_ADDR
91679: LD_EXP 130
91683: PUSH
91684: LD_VAR 0 5
91688: ARRAY
91689: PUSH
91690: FOR_TO
91691: IFFALSE 91732
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
91693: LD_EXP 130
91697: PUSH
91698: LD_VAR 0 5
91702: ARRAY
91703: PUSH
91704: LD_VAR 0 4
91708: ARRAY
91709: PUSH
91710: LD_INT 1
91712: ARRAY
91713: PUSH
91714: LD_VAR 0 2
91718: EQUAL
91719: IFFALSE 91730
// KillUnit ( vehicle ) ;
91721: LD_VAR 0 2
91725: PPUSH
91726: CALL_OW 66
91730: GO 91690
91732: POP
91733: POP
// end ;
91734: LD_VAR 0 3
91738: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
91739: LD_EXP 134
91743: NOT
91744: IFFALSE 91877
91746: GO 91748
91748: DISABLE
91749: LD_INT 0
91751: PPUSH
// begin initMiner := true ;
91752: LD_ADDR_EXP 134
91756: PUSH
91757: LD_INT 1
91759: ST_TO_ADDR
// minersList := [ ] ;
91760: LD_ADDR_EXP 135
91764: PUSH
91765: EMPTY
91766: ST_TO_ADDR
// minerMinesList := [ ] ;
91767: LD_ADDR_EXP 136
91771: PUSH
91772: EMPTY
91773: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
91774: LD_ADDR_EXP 137
91778: PUSH
91779: LD_INT 10
91781: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91782: LD_ADDR_VAR 0 1
91786: PUSH
91787: LD_INT 34
91789: PUSH
91790: LD_INT 81
91792: PUSH
91793: EMPTY
91794: LIST
91795: LIST
91796: PPUSH
91797: CALL_OW 69
91801: PUSH
91802: FOR_IN
91803: IFFALSE 91875
// begin if not i in minersList then
91805: LD_VAR 0 1
91809: PUSH
91810: LD_EXP 135
91814: IN
91815: NOT
91816: IFFALSE 91873
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91818: LD_ADDR_EXP 135
91822: PUSH
91823: LD_EXP 135
91827: PPUSH
91828: LD_EXP 135
91832: PUSH
91833: LD_INT 1
91835: PLUS
91836: PPUSH
91837: LD_VAR 0 1
91841: PPUSH
91842: CALL_OW 1
91846: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91847: LD_ADDR_EXP 136
91851: PUSH
91852: LD_EXP 136
91856: PPUSH
91857: LD_EXP 136
91861: PUSH
91862: LD_INT 1
91864: PLUS
91865: PPUSH
91866: EMPTY
91867: PPUSH
91868: CALL_OW 1
91872: ST_TO_ADDR
// end end ;
91873: GO 91802
91875: POP
91876: POP
// end ;
91877: PPOPN 1
91879: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
91880: LD_EXP 134
91884: IFFALSE 91915
91886: PUSH
91887: LD_EXP 136
91891: PPUSH
91892: CALL 30877 0 1
91896: IFTRUE 91914
91898: PUSH
91899: LD_INT 34
91901: PUSH
91902: LD_INT 81
91904: PUSH
91905: EMPTY
91906: LIST
91907: LIST
91908: PPUSH
91909: CALL_OW 69
91913: OR
91914: AND
91915: IFFALSE 92435
91917: GO 91919
91919: DISABLE
91920: LD_INT 0
91922: PPUSH
91923: PPUSH
91924: PPUSH
91925: PPUSH
// begin enable ;
91926: ENABLE
// for i := minerMinesList downto 1 do
91927: LD_ADDR_VAR 0 1
91931: PUSH
91932: DOUBLE
91933: LD_EXP 136
91937: INC
91938: ST_TO_ADDR
91939: LD_INT 1
91941: PUSH
91942: FOR_DOWNTO
91943: IFFALSE 92433
// begin side := GetSide ( minersList [ i ] ) ;
91945: LD_ADDR_VAR 0 3
91949: PUSH
91950: LD_EXP 135
91954: PUSH
91955: LD_VAR 0 1
91959: ARRAY
91960: PPUSH
91961: CALL_OW 255
91965: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
91966: LD_EXP 135
91970: PUSH
91971: LD_VAR 0 1
91975: ARRAY
91976: PPUSH
91977: CALL_OW 300
91981: IFFALSE 92002
91983: PUSH
91984: LD_VAR 0 3
91988: PUSH
91989: LD_OWVAR 2
91993: PUSH
91994: LD_INT 9
91996: PUSH
91997: EMPTY
91998: LIST
91999: LIST
92000: IN
92001: AND
92002: IFFALSE 92035
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
92004: LD_EXP 135
92008: PUSH
92009: LD_VAR 0 1
92013: ARRAY
92014: PPUSH
92015: LD_EXP 136
92019: PUSH
92020: LD_VAR 0 1
92024: ARRAY
92025: PPUSH
92026: CALL 30877 0 1
92030: PPUSH
92031: CALL_OW 505
// if not minerMinesList [ i ] then
92035: LD_EXP 136
92039: PUSH
92040: LD_VAR 0 1
92044: ARRAY
92045: NOT
92046: IFFALSE 92050
// continue ;
92048: GO 91942
// for j := minerMinesList [ i ] downto 1 do
92050: LD_ADDR_VAR 0 2
92054: PUSH
92055: DOUBLE
92056: LD_EXP 136
92060: PUSH
92061: LD_VAR 0 1
92065: ARRAY
92066: INC
92067: ST_TO_ADDR
92068: LD_INT 1
92070: PUSH
92071: FOR_DOWNTO
92072: IFFALSE 92429
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
92074: LD_EXP 135
92078: PUSH
92079: LD_VAR 0 1
92083: ARRAY
92084: PPUSH
92085: CALL_OW 301
92089: IFTRUE 92109
92091: PUSH
92092: LD_EXP 135
92096: PUSH
92097: LD_VAR 0 1
92101: ARRAY
92102: PPUSH
92103: CALL_OW 305
92107: NOT
92108: OR
92109: IFFALSE 92200
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
92111: LD_EXP 136
92115: PUSH
92116: LD_VAR 0 1
92120: ARRAY
92121: PUSH
92122: LD_VAR 0 2
92126: ARRAY
92127: PUSH
92128: LD_INT 1
92130: ARRAY
92131: PPUSH
92132: LD_EXP 136
92136: PUSH
92137: LD_VAR 0 1
92141: ARRAY
92142: PUSH
92143: LD_VAR 0 2
92147: ARRAY
92148: PUSH
92149: LD_INT 2
92151: ARRAY
92152: PPUSH
92153: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
92157: LD_ADDR_EXP 136
92161: PUSH
92162: LD_EXP 136
92166: PPUSH
92167: LD_VAR 0 1
92171: PPUSH
92172: LD_EXP 136
92176: PUSH
92177: LD_VAR 0 1
92181: ARRAY
92182: PPUSH
92183: LD_VAR 0 2
92187: PPUSH
92188: CALL_OW 3
92192: PPUSH
92193: CALL_OW 1
92197: ST_TO_ADDR
// continue ;
92198: GO 92071
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
92200: LD_ADDR_VAR 0 4
92204: PUSH
92205: LD_EXP 136
92209: PUSH
92210: LD_VAR 0 1
92214: ARRAY
92215: PUSH
92216: LD_VAR 0 2
92220: ARRAY
92221: PUSH
92222: LD_INT 1
92224: ARRAY
92225: PPUSH
92226: LD_EXP 136
92230: PUSH
92231: LD_VAR 0 1
92235: ARRAY
92236: PUSH
92237: LD_VAR 0 2
92241: ARRAY
92242: PUSH
92243: LD_INT 2
92245: ARRAY
92246: PPUSH
92247: CALL_OW 428
92251: ST_TO_ADDR
// if not tmp then
92252: LD_VAR 0 4
92256: NOT
92257: IFFALSE 92261
// continue ;
92259: GO 92071
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
92261: LD_VAR 0 4
92265: PUSH
92266: LD_INT 81
92268: PUSH
92269: LD_VAR 0 3
92273: PUSH
92274: EMPTY
92275: LIST
92276: LIST
92277: PPUSH
92278: CALL_OW 69
92282: IN
92283: IFFALSE 92333
92285: PUSH
92286: LD_EXP 136
92290: PUSH
92291: LD_VAR 0 1
92295: ARRAY
92296: PUSH
92297: LD_VAR 0 2
92301: ARRAY
92302: PUSH
92303: LD_INT 1
92305: ARRAY
92306: PPUSH
92307: LD_EXP 136
92311: PUSH
92312: LD_VAR 0 1
92316: ARRAY
92317: PUSH
92318: LD_VAR 0 2
92322: ARRAY
92323: PUSH
92324: LD_INT 2
92326: ARRAY
92327: PPUSH
92328: CALL_OW 458
92332: AND
92333: IFFALSE 92427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
92335: LD_EXP 136
92339: PUSH
92340: LD_VAR 0 1
92344: ARRAY
92345: PUSH
92346: LD_VAR 0 2
92350: ARRAY
92351: PUSH
92352: LD_INT 1
92354: ARRAY
92355: PPUSH
92356: LD_EXP 136
92360: PUSH
92361: LD_VAR 0 1
92365: ARRAY
92366: PUSH
92367: LD_VAR 0 2
92371: ARRAY
92372: PUSH
92373: LD_INT 2
92375: ARRAY
92376: PPUSH
92377: LD_VAR 0 3
92381: PPUSH
92382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
92386: LD_ADDR_EXP 136
92390: PUSH
92391: LD_EXP 136
92395: PPUSH
92396: LD_VAR 0 1
92400: PPUSH
92401: LD_EXP 136
92405: PUSH
92406: LD_VAR 0 1
92410: ARRAY
92411: PPUSH
92412: LD_VAR 0 2
92416: PPUSH
92417: CALL_OW 3
92421: PPUSH
92422: CALL_OW 1
92426: ST_TO_ADDR
// end ; end ;
92427: GO 92071
92429: POP
92430: POP
// end ;
92431: GO 91942
92433: POP
92434: POP
// end ;
92435: PPOPN 4
92437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
92438: LD_INT 0
92440: PPUSH
92441: PPUSH
92442: PPUSH
92443: PPUSH
// result := false ;
92444: LD_ADDR_VAR 0 4
92448: PUSH
92449: LD_INT 0
92451: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
92452: LD_VAR 0 1
92456: PPUSH
92457: CALL_OW 264
92461: PUSH
92462: LD_INT 81
92464: EQUAL
92465: NOT
92466: IFFALSE 92470
// exit ;
92468: GO 92840
// side := GetSide ( unit ) ;
92470: LD_ADDR_VAR 0 6
92474: PUSH
92475: LD_VAR 0 1
92479: PPUSH
92480: CALL_OW 255
92484: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
92485: LD_ADDR_VAR 0 5
92489: PUSH
92490: LD_EXP 135
92494: PPUSH
92495: LD_VAR 0 1
92499: PPUSH
92500: CALL 33578 0 2
92504: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
92505: LD_EXP 136
92509: PUSH
92510: LD_VAR 0 5
92514: ARRAY
92515: PUSH
92516: LD_EXP 137
92520: GREATEREQUAL
92521: IFFALSE 92525
// exit ;
92523: GO 92840
// ComMoveXY ( unit , x , y ) ;
92525: LD_VAR 0 1
92529: PPUSH
92530: LD_VAR 0 2
92534: PPUSH
92535: LD_VAR 0 3
92539: PPUSH
92540: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92544: LD_INT 35
92546: PPUSH
92547: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
92551: LD_VAR 0 1
92555: PPUSH
92556: LD_VAR 0 2
92560: PPUSH
92561: LD_VAR 0 3
92565: PPUSH
92566: CALL 65634 0 3
92570: NOT
92571: IFFALSE 92584
92573: PUSH
92574: LD_VAR 0 1
92578: PPUSH
92579: CALL_OW 314
92583: AND
92584: IFFALSE 92588
// exit ;
92586: GO 92840
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
92588: LD_VAR 0 2
92592: PPUSH
92593: LD_VAR 0 3
92597: PPUSH
92598: CALL_OW 428
92602: PUSH
92603: LD_VAR 0 1
92607: EQUAL
92608: IFFALSE 92622
92610: PUSH
92611: LD_VAR 0 1
92615: PPUSH
92616: CALL_OW 314
92620: NOT
92621: AND
92622: IFFALSE 92544
// if MineAtPos ( x , y ) then
92624: LD_VAR 0 2
92628: PPUSH
92629: LD_VAR 0 3
92633: PPUSH
92634: CALL_OW 458
92638: IFFALSE 92642
// exit ;
92640: GO 92840
// if your_side = side then
92642: LD_OWVAR 2
92646: PUSH
92647: LD_VAR 0 6
92651: EQUAL
92652: IFFALSE 92671
// PlaySoundXY ( x , y , PlantMine ) ;
92654: LD_VAR 0 2
92658: PPUSH
92659: LD_VAR 0 3
92663: PPUSH
92664: LD_STRING PlantMine
92666: PPUSH
92667: CALL_OW 366
// repeat wait ( 1 ) ;
92671: LD_INT 1
92673: PPUSH
92674: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
92678: LD_VAR 0 2
92682: PPUSH
92683: LD_VAR 0 3
92687: PPUSH
92688: LD_VAR 0 6
92692: PPUSH
92693: LD_INT 0
92695: PPUSH
92696: CALL_OW 454
92700: IFFALSE 92671
// if MineAtPos ( x , y ) then
92702: LD_VAR 0 2
92706: PPUSH
92707: LD_VAR 0 3
92711: PPUSH
92712: CALL_OW 458
92716: IFFALSE 92832
// begin for i in minerMinesList [ index ] do
92718: LD_ADDR_VAR 0 7
92722: PUSH
92723: LD_EXP 136
92727: PUSH
92728: LD_VAR 0 5
92732: ARRAY
92733: PUSH
92734: FOR_IN
92735: IFFALSE 92777
// if i [ 1 ] = x and i [ 2 ] = y then
92737: LD_VAR 0 7
92741: PUSH
92742: LD_INT 1
92744: ARRAY
92745: PUSH
92746: LD_VAR 0 2
92750: EQUAL
92751: IFFALSE 92769
92753: PUSH
92754: LD_VAR 0 7
92758: PUSH
92759: LD_INT 2
92761: ARRAY
92762: PUSH
92763: LD_VAR 0 3
92767: EQUAL
92768: AND
92769: IFFALSE 92775
// exit ;
92771: POP
92772: POP
92773: GO 92840
92775: GO 92734
92777: POP
92778: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
92779: LD_ADDR_EXP 136
92783: PUSH
92784: LD_EXP 136
92788: PPUSH
92789: LD_VAR 0 5
92793: PUSH
92794: LD_EXP 136
92798: PUSH
92799: LD_VAR 0 5
92803: ARRAY
92804: PUSH
92805: LD_INT 1
92807: PLUS
92808: PUSH
92809: EMPTY
92810: LIST
92811: LIST
92812: PPUSH
92813: LD_VAR 0 2
92817: PUSH
92818: LD_VAR 0 3
92822: PUSH
92823: EMPTY
92824: LIST
92825: LIST
92826: PPUSH
92827: CALL 33795 0 3
92831: ST_TO_ADDR
// end ; result := true ;
92832: LD_ADDR_VAR 0 4
92836: PUSH
92837: LD_INT 1
92839: ST_TO_ADDR
// end ;
92840: LD_VAR 0 4
92844: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
92845: LD_INT 0
92847: PPUSH
92848: PPUSH
92849: PPUSH
// if not unit in minersList then
92850: LD_VAR 0 1
92854: PUSH
92855: LD_EXP 135
92859: IN
92860: NOT
92861: IFFALSE 92865
// exit ;
92863: GO 93072
// index := GetElementIndex ( minersList , unit ) ;
92865: LD_ADDR_VAR 0 6
92869: PUSH
92870: LD_EXP 135
92874: PPUSH
92875: LD_VAR 0 1
92879: PPUSH
92880: CALL 33578 0 2
92884: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
92885: LD_ADDR_VAR 0 5
92889: PUSH
92890: DOUBLE
92891: LD_EXP 136
92895: PUSH
92896: LD_VAR 0 6
92900: ARRAY
92901: INC
92902: ST_TO_ADDR
92903: LD_INT 1
92905: PUSH
92906: FOR_DOWNTO
92907: IFFALSE 93070
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
92909: LD_EXP 136
92913: PUSH
92914: LD_VAR 0 6
92918: ARRAY
92919: PUSH
92920: LD_VAR 0 5
92924: ARRAY
92925: PUSH
92926: LD_INT 1
92928: ARRAY
92929: PPUSH
92930: LD_EXP 136
92934: PUSH
92935: LD_VAR 0 6
92939: ARRAY
92940: PUSH
92941: LD_VAR 0 5
92945: ARRAY
92946: PUSH
92947: LD_INT 2
92949: ARRAY
92950: PPUSH
92951: LD_VAR 0 2
92955: PPUSH
92956: LD_VAR 0 3
92960: PPUSH
92961: CALL_OW 298
92965: PUSH
92966: LD_INT 6
92968: LESS
92969: IFFALSE 93068
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92971: LD_EXP 136
92975: PUSH
92976: LD_VAR 0 6
92980: ARRAY
92981: PUSH
92982: LD_VAR 0 5
92986: ARRAY
92987: PUSH
92988: LD_INT 1
92990: ARRAY
92991: PPUSH
92992: LD_EXP 136
92996: PUSH
92997: LD_VAR 0 6
93001: ARRAY
93002: PUSH
93003: LD_VAR 0 5
93007: ARRAY
93008: PUSH
93009: LD_INT 2
93011: ARRAY
93012: PPUSH
93013: LD_VAR 0 1
93017: PPUSH
93018: CALL_OW 255
93022: PPUSH
93023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
93027: LD_ADDR_EXP 136
93031: PUSH
93032: LD_EXP 136
93036: PPUSH
93037: LD_VAR 0 6
93041: PPUSH
93042: LD_EXP 136
93046: PUSH
93047: LD_VAR 0 6
93051: ARRAY
93052: PPUSH
93053: LD_VAR 0 5
93057: PPUSH
93058: CALL_OW 3
93062: PPUSH
93063: CALL_OW 1
93067: ST_TO_ADDR
// end ; end ;
93068: GO 92906
93070: POP
93071: POP
// end ;
93072: LD_VAR 0 4
93076: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
93077: LD_INT 0
93079: PPUSH
93080: PPUSH
93081: PPUSH
93082: PPUSH
93083: PPUSH
93084: PPUSH
93085: PPUSH
93086: PPUSH
93087: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
93088: LD_VAR 0 1
93092: PPUSH
93093: CALL_OW 264
93097: PUSH
93098: LD_INT 81
93100: EQUAL
93101: NOT
93102: IFTRUE 93117
93104: PUSH
93105: LD_VAR 0 1
93109: PUSH
93110: LD_EXP 135
93114: IN
93115: NOT
93116: OR
93117: IFFALSE 93121
// exit ;
93119: GO 93447
// index := GetElementIndex ( minersList , unit ) ;
93121: LD_ADDR_VAR 0 6
93125: PUSH
93126: LD_EXP 135
93130: PPUSH
93131: LD_VAR 0 1
93135: PPUSH
93136: CALL 33578 0 2
93140: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
93141: LD_ADDR_VAR 0 8
93145: PUSH
93146: LD_EXP 137
93150: PUSH
93151: LD_EXP 136
93155: PUSH
93156: LD_VAR 0 6
93160: ARRAY
93161: MINUS
93162: ST_TO_ADDR
// if not minesFreeAmount then
93163: LD_VAR 0 8
93167: NOT
93168: IFFALSE 93172
// exit ;
93170: GO 93447
// tmp := [ ] ;
93172: LD_ADDR_VAR 0 7
93176: PUSH
93177: EMPTY
93178: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
93179: LD_ADDR_VAR 0 5
93183: PUSH
93184: DOUBLE
93185: LD_INT 1
93187: DEC
93188: ST_TO_ADDR
93189: LD_VAR 0 8
93193: PUSH
93194: FOR_TO
93195: IFFALSE 93394
// begin _d := rand ( 0 , 5 ) ;
93197: LD_ADDR_VAR 0 11
93201: PUSH
93202: LD_INT 0
93204: PPUSH
93205: LD_INT 5
93207: PPUSH
93208: CALL_OW 12
93212: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
93213: LD_ADDR_VAR 0 12
93217: PUSH
93218: LD_INT 2
93220: PPUSH
93221: LD_INT 6
93223: PPUSH
93224: CALL_OW 12
93228: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
93229: LD_ADDR_VAR 0 9
93233: PUSH
93234: LD_VAR 0 2
93238: PPUSH
93239: LD_VAR 0 11
93243: PPUSH
93244: LD_VAR 0 12
93248: PPUSH
93249: CALL_OW 272
93253: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
93254: LD_ADDR_VAR 0 10
93258: PUSH
93259: LD_VAR 0 3
93263: PPUSH
93264: LD_VAR 0 11
93268: PPUSH
93269: LD_VAR 0 12
93273: PPUSH
93274: CALL_OW 273
93278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
93279: LD_VAR 0 9
93283: PPUSH
93284: LD_VAR 0 10
93288: PPUSH
93289: CALL_OW 488
93293: IFFALSE 93317
93295: PUSH
93296: LD_VAR 0 9
93300: PUSH
93301: LD_VAR 0 10
93305: PUSH
93306: EMPTY
93307: LIST
93308: LIST
93309: PUSH
93310: LD_VAR 0 7
93314: IN
93315: NOT
93316: AND
93317: IFFALSE 93336
93319: PUSH
93320: LD_VAR 0 9
93324: PPUSH
93325: LD_VAR 0 10
93329: PPUSH
93330: CALL_OW 458
93334: NOT
93335: AND
93336: IFFALSE 93378
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
93338: LD_ADDR_VAR 0 7
93342: PUSH
93343: LD_VAR 0 7
93347: PPUSH
93348: LD_VAR 0 7
93352: PUSH
93353: LD_INT 1
93355: PLUS
93356: PPUSH
93357: LD_VAR 0 9
93361: PUSH
93362: LD_VAR 0 10
93366: PUSH
93367: EMPTY
93368: LIST
93369: LIST
93370: PPUSH
93371: CALL_OW 1
93375: ST_TO_ADDR
93376: GO 93392
// i := i - 1 ;
93378: LD_ADDR_VAR 0 5
93382: PUSH
93383: LD_VAR 0 5
93387: PUSH
93388: LD_INT 1
93390: MINUS
93391: ST_TO_ADDR
// end ;
93392: GO 93194
93394: POP
93395: POP
// for i in tmp do
93396: LD_ADDR_VAR 0 5
93400: PUSH
93401: LD_VAR 0 7
93405: PUSH
93406: FOR_IN
93407: IFFALSE 93445
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
93409: LD_VAR 0 1
93413: PPUSH
93414: LD_VAR 0 5
93418: PUSH
93419: LD_INT 1
93421: ARRAY
93422: PPUSH
93423: LD_VAR 0 5
93427: PUSH
93428: LD_INT 2
93430: ARRAY
93431: PPUSH
93432: CALL 92438 0 3
93436: NOT
93437: IFFALSE 93443
// exit ;
93439: POP
93440: POP
93441: GO 93447
93443: GO 93406
93445: POP
93446: POP
// end ;
93447: LD_VAR 0 4
93451: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
93452: LD_INT 0
93454: PPUSH
93455: PPUSH
93456: PPUSH
93457: PPUSH
93458: PPUSH
93459: PPUSH
93460: PPUSH
93461: PPUSH
93462: PPUSH
// if GetClass ( unit ) <> class_sniper then
93463: LD_VAR 0 1
93467: PPUSH
93468: CALL_OW 257
93472: PUSH
93473: LD_INT 5
93475: NONEQUAL
93476: IFFALSE 93480
// exit ;
93478: GO 93950
// dist := 8 ;
93480: LD_ADDR_VAR 0 5
93484: PUSH
93485: LD_INT 8
93487: ST_TO_ADDR
// viewRange := 12 ;
93488: LD_ADDR_VAR 0 8
93492: PUSH
93493: LD_INT 12
93495: ST_TO_ADDR
// side := GetSide ( unit ) ;
93496: LD_ADDR_VAR 0 6
93500: PUSH
93501: LD_VAR 0 1
93505: PPUSH
93506: CALL_OW 255
93510: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
93511: LD_INT 61
93513: PPUSH
93514: LD_VAR 0 6
93518: PPUSH
93519: CALL_OW 321
93523: PUSH
93524: LD_INT 2
93526: EQUAL
93527: IFFALSE 93537
// viewRange := 16 ;
93529: LD_ADDR_VAR 0 8
93533: PUSH
93534: LD_INT 16
93536: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
93537: LD_VAR 0 1
93541: PPUSH
93542: LD_VAR 0 2
93546: PPUSH
93547: LD_VAR 0 3
93551: PPUSH
93552: CALL_OW 297
93556: PUSH
93557: LD_VAR 0 5
93561: GREATER
93562: IFFALSE 93641
// begin ComMoveXY ( unit , x , y ) ;
93564: LD_VAR 0 1
93568: PPUSH
93569: LD_VAR 0 2
93573: PPUSH
93574: LD_VAR 0 3
93578: PPUSH
93579: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93583: LD_INT 35
93585: PPUSH
93586: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
93590: LD_VAR 0 1
93594: PPUSH
93595: LD_VAR 0 2
93599: PPUSH
93600: LD_VAR 0 3
93604: PPUSH
93605: CALL 65634 0 3
93609: NOT
93610: IFFALSE 93614
// exit ;
93612: GO 93950
// until GetDistUnitXY ( unit , x , y ) < dist ;
93614: LD_VAR 0 1
93618: PPUSH
93619: LD_VAR 0 2
93623: PPUSH
93624: LD_VAR 0 3
93628: PPUSH
93629: CALL_OW 297
93633: PUSH
93634: LD_VAR 0 5
93638: LESS
93639: IFFALSE 93583
// end ; ComTurnXY ( unit , x , y ) ;
93641: LD_VAR 0 1
93645: PPUSH
93646: LD_VAR 0 2
93650: PPUSH
93651: LD_VAR 0 3
93655: PPUSH
93656: CALL_OW 118
// repeat if Multiplayer then
93660: LD_OWVAR 4
93664: IFFALSE 93675
// wait ( 35 ) else
93666: LD_INT 35
93668: PPUSH
93669: CALL_OW 67
93673: GO 93682
// wait ( 5 ) ;
93675: LD_INT 5
93677: PPUSH
93678: CALL_OW 67
// _d := GetDir ( unit ) ;
93682: LD_ADDR_VAR 0 11
93686: PUSH
93687: LD_VAR 0 1
93691: PPUSH
93692: CALL_OW 254
93696: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
93697: LD_ADDR_VAR 0 7
93701: PUSH
93702: LD_VAR 0 1
93706: PPUSH
93707: CALL_OW 250
93711: PPUSH
93712: LD_VAR 0 1
93716: PPUSH
93717: CALL_OW 251
93721: PPUSH
93722: LD_VAR 0 2
93726: PPUSH
93727: LD_VAR 0 3
93731: PPUSH
93732: CALL 68270 0 4
93736: ST_TO_ADDR
// until dir = _d ;
93737: LD_VAR 0 7
93741: PUSH
93742: LD_VAR 0 11
93746: EQUAL
93747: IFFALSE 93660
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
93749: LD_ADDR_VAR 0 9
93753: PUSH
93754: LD_VAR 0 1
93758: PPUSH
93759: CALL_OW 250
93763: PPUSH
93764: LD_VAR 0 7
93768: PPUSH
93769: LD_VAR 0 5
93773: PPUSH
93774: CALL_OW 272
93778: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
93779: LD_ADDR_VAR 0 10
93783: PUSH
93784: LD_VAR 0 1
93788: PPUSH
93789: CALL_OW 251
93793: PPUSH
93794: LD_VAR 0 7
93798: PPUSH
93799: LD_VAR 0 5
93803: PPUSH
93804: CALL_OW 273
93808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93809: LD_VAR 0 9
93813: PPUSH
93814: LD_VAR 0 10
93818: PPUSH
93819: CALL_OW 488
93823: NOT
93824: IFFALSE 93828
// exit ;
93826: GO 93950
// ComAnimCustom ( unit , 1 ) ;
93828: LD_VAR 0 1
93832: PPUSH
93833: LD_INT 1
93835: PPUSH
93836: CALL_OW 592
// p := 0 ;
93840: LD_ADDR_VAR 0 12
93844: PUSH
93845: LD_INT 0
93847: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
93848: LD_VAR 0 9
93852: PPUSH
93853: LD_VAR 0 10
93857: PPUSH
93858: LD_VAR 0 6
93862: PPUSH
93863: LD_VAR 0 8
93867: PPUSH
93868: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
93872: LD_INT 35
93874: PPUSH
93875: CALL_OW 67
// p := Inc ( p ) ;
93879: LD_ADDR_VAR 0 12
93883: PUSH
93884: LD_VAR 0 12
93888: PPUSH
93889: CALL 68226 0 1
93893: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
93894: LD_VAR 0 12
93898: PUSH
93899: LD_INT 3
93901: EQUAL
93902: IFTRUE 93916
93904: PUSH
93905: LD_VAR 0 1
93909: PPUSH
93910: CALL_OW 302
93914: NOT
93915: OR
93916: IFTRUE 93929
93918: PUSH
93919: LD_VAR 0 1
93923: PPUSH
93924: CALL_OW 301
93928: OR
93929: IFFALSE 93872
// RemoveSeeing ( _x , _y , side ) ;
93931: LD_VAR 0 9
93935: PPUSH
93936: LD_VAR 0 10
93940: PPUSH
93941: LD_VAR 0 6
93945: PPUSH
93946: CALL_OW 331
// end ;
93950: LD_VAR 0 4
93954: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
93955: LD_INT 0
93957: PPUSH
93958: PPUSH
93959: PPUSH
93960: PPUSH
93961: PPUSH
93962: PPUSH
93963: PPUSH
93964: PPUSH
93965: PPUSH
93966: PPUSH
93967: PPUSH
// if not unit then
93968: LD_VAR 0 1
93972: NOT
93973: IFFALSE 93977
// exit ;
93975: GO 94248
// side := GetSide ( unit ) ;
93977: LD_ADDR_VAR 0 3
93981: PUSH
93982: LD_VAR 0 1
93986: PPUSH
93987: CALL_OW 255
93991: ST_TO_ADDR
// x := GetX ( unit ) ;
93992: LD_ADDR_VAR 0 5
93996: PUSH
93997: LD_VAR 0 1
94001: PPUSH
94002: CALL_OW 250
94006: ST_TO_ADDR
// y := GetY ( unit ) ;
94007: LD_ADDR_VAR 0 6
94011: PUSH
94012: LD_VAR 0 1
94016: PPUSH
94017: CALL_OW 251
94021: ST_TO_ADDR
// r := 8 ;
94022: LD_ADDR_VAR 0 4
94026: PUSH
94027: LD_INT 8
94029: ST_TO_ADDR
// if x - r < 0 then
94030: LD_VAR 0 5
94034: PUSH
94035: LD_VAR 0 4
94039: MINUS
94040: PUSH
94041: LD_INT 0
94043: LESS
94044: IFFALSE 94056
// min_x := 0 else
94046: LD_ADDR_VAR 0 7
94050: PUSH
94051: LD_INT 0
94053: ST_TO_ADDR
94054: GO 94072
// min_x := x - r ;
94056: LD_ADDR_VAR 0 7
94060: PUSH
94061: LD_VAR 0 5
94065: PUSH
94066: LD_VAR 0 4
94070: MINUS
94071: ST_TO_ADDR
// if y - r < 0 then
94072: LD_VAR 0 6
94076: PUSH
94077: LD_VAR 0 4
94081: MINUS
94082: PUSH
94083: LD_INT 0
94085: LESS
94086: IFFALSE 94098
// min_y := 0 else
94088: LD_ADDR_VAR 0 8
94092: PUSH
94093: LD_INT 0
94095: ST_TO_ADDR
94096: GO 94114
// min_y := y - r ;
94098: LD_ADDR_VAR 0 8
94102: PUSH
94103: LD_VAR 0 6
94107: PUSH
94108: LD_VAR 0 4
94112: MINUS
94113: ST_TO_ADDR
// max_x := x + r ;
94114: LD_ADDR_VAR 0 9
94118: PUSH
94119: LD_VAR 0 5
94123: PUSH
94124: LD_VAR 0 4
94128: PLUS
94129: ST_TO_ADDR
// max_y := y + r ;
94130: LD_ADDR_VAR 0 10
94134: PUSH
94135: LD_VAR 0 6
94139: PUSH
94140: LD_VAR 0 4
94144: PLUS
94145: ST_TO_ADDR
// for _x = min_x to max_x do
94146: LD_ADDR_VAR 0 11
94150: PUSH
94151: DOUBLE
94152: LD_VAR 0 7
94156: DEC
94157: ST_TO_ADDR
94158: LD_VAR 0 9
94162: PUSH
94163: FOR_TO
94164: IFFALSE 94246
// for _y = min_y to max_y do
94166: LD_ADDR_VAR 0 12
94170: PUSH
94171: DOUBLE
94172: LD_VAR 0 8
94176: DEC
94177: ST_TO_ADDR
94178: LD_VAR 0 10
94182: PUSH
94183: FOR_TO
94184: IFFALSE 94242
// begin if not ValidHex ( _x , _y ) then
94186: LD_VAR 0 11
94190: PPUSH
94191: LD_VAR 0 12
94195: PPUSH
94196: CALL_OW 488
94200: NOT
94201: IFFALSE 94205
// continue ;
94203: GO 94183
// if MineAtPos ( _x , _y ) then
94205: LD_VAR 0 11
94209: PPUSH
94210: LD_VAR 0 12
94214: PPUSH
94215: CALL_OW 458
94219: IFFALSE 94240
// ViewMineAtPos ( _x , _y , side ) ;
94221: LD_VAR 0 11
94225: PPUSH
94226: LD_VAR 0 12
94230: PPUSH
94231: LD_VAR 0 3
94235: PPUSH
94236: CALL_OW 457
// end ;
94240: GO 94183
94242: POP
94243: POP
94244: GO 94163
94246: POP
94247: POP
// end ;
94248: LD_VAR 0 2
94252: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
94253: LD_INT 0
94255: PPUSH
94256: PPUSH
94257: PPUSH
94258: PPUSH
94259: PPUSH
94260: PPUSH
94261: PPUSH
// if not units then
94262: LD_VAR 0 1
94266: NOT
94267: IFFALSE 94271
// exit ;
94269: GO 94735
// scaners := [ ] ;
94271: LD_ADDR_VAR 0 6
94275: PUSH
94276: EMPTY
94277: ST_TO_ADDR
// for i in units do
94278: LD_ADDR_VAR 0 3
94282: PUSH
94283: LD_VAR 0 1
94287: PUSH
94288: FOR_IN
94289: IFFALSE 94446
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
94291: LD_VAR 0 3
94295: PPUSH
94296: CALL_OW 264
94300: PUSH
94301: LD_INT 11
94303: NONEQUAL
94304: IFTRUE 94318
94306: PUSH
94307: LD_VAR 0 3
94311: PPUSH
94312: CALL_OW 302
94316: NOT
94317: OR
94318: IFTRUE 94335
94320: PUSH
94321: LD_VAR 0 3
94325: PPUSH
94326: CALL_OW 110
94330: PUSH
94331: LD_INT 502
94333: EQUAL
94334: OR
94335: IFFALSE 94339
// continue ;
94337: GO 94288
// ComStop ( i ) ;
94339: LD_VAR 0 3
94343: PPUSH
94344: CALL_OW 141
// x := GetX ( i ) ;
94348: LD_ADDR_VAR 0 4
94352: PUSH
94353: LD_VAR 0 3
94357: PPUSH
94358: CALL_OW 250
94362: ST_TO_ADDR
// y := GetY ( i ) ;
94363: LD_ADDR_VAR 0 5
94367: PUSH
94368: LD_VAR 0 3
94372: PPUSH
94373: CALL_OW 251
94377: ST_TO_ADDR
// if GetSide ( i ) = your_side then
94378: LD_VAR 0 3
94382: PPUSH
94383: CALL_OW 255
94387: PUSH
94388: LD_OWVAR 2
94392: EQUAL
94393: IFFALSE 94412
// PlaySoundXY ( x , y , mineDetector ) ;
94395: LD_VAR 0 4
94399: PPUSH
94400: LD_VAR 0 5
94404: PPUSH
94405: LD_STRING mineDetector
94407: PPUSH
94408: CALL_OW 366
// scaners := Join ( scaners , i ) ;
94412: LD_ADDR_VAR 0 6
94416: PUSH
94417: LD_VAR 0 6
94421: PPUSH
94422: LD_VAR 0 3
94426: PPUSH
94427: CALL 66853 0 2
94431: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
94432: LD_VAR 0 3
94436: PPUSH
94437: LD_INT 502
94439: PPUSH
94440: CALL_OW 109
// end ;
94444: GO 94288
94446: POP
94447: POP
// if not scaners then
94448: LD_VAR 0 6
94452: NOT
94453: IFFALSE 94457
// exit ;
94455: GO 94735
// wait ( 3 ) ;
94457: LD_INT 3
94459: PPUSH
94460: CALL_OW 67
// timer := 6 ;
94464: LD_ADDR_VAR 0 7
94468: PUSH
94469: LD_INT 6
94471: ST_TO_ADDR
// repeat for i in scaners do
94472: LD_ADDR_VAR 0 3
94476: PUSH
94477: LD_VAR 0 6
94481: PUSH
94482: FOR_IN
94483: IFFALSE 94633
// begin side := GetSide ( i ) ;
94485: LD_ADDR_VAR 0 8
94489: PUSH
94490: LD_VAR 0 3
94494: PPUSH
94495: CALL_OW 255
94499: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
94500: LD_VAR 0 3
94504: PPUSH
94505: CALL_OW 302
94509: NOT
94510: IFTRUE 94523
94512: PUSH
94513: LD_VAR 0 3
94517: PPUSH
94518: CALL_OW 314
94522: OR
94523: IFTRUE 94554
94525: PUSH
94526: LD_VAR 0 3
94530: PPUSH
94531: CALL_OW 263
94535: PUSH
94536: LD_INT 1
94538: EQUAL
94539: IFFALSE 94553
94541: PUSH
94542: LD_VAR 0 3
94546: PPUSH
94547: CALL_OW 311
94551: NOT
94552: AND
94553: OR
94554: IFFALSE 94598
// begin SetUnitDisplayNumber ( i , 0 ) ;
94556: LD_VAR 0 3
94560: PPUSH
94561: LD_INT 0
94563: PPUSH
94564: CALL_OW 505
// SetTag ( i , 0 ) ;
94568: LD_VAR 0 3
94572: PPUSH
94573: LD_INT 0
94575: PPUSH
94576: CALL_OW 109
// scaners := scaners diff i ;
94580: LD_ADDR_VAR 0 6
94584: PUSH
94585: LD_VAR 0 6
94589: PUSH
94590: LD_VAR 0 3
94594: DIFF
94595: ST_TO_ADDR
// continue ;
94596: GO 94482
// end ; if side in [ your_side , 9 ] then
94598: LD_VAR 0 8
94602: PUSH
94603: LD_OWVAR 2
94607: PUSH
94608: LD_INT 9
94610: PUSH
94611: EMPTY
94612: LIST
94613: LIST
94614: IN
94615: IFFALSE 94631
// SetUnitDisplayNumber ( i , timer ) ;
94617: LD_VAR 0 3
94621: PPUSH
94622: LD_VAR 0 7
94626: PPUSH
94627: CALL_OW 505
// end ;
94631: GO 94482
94633: POP
94634: POP
// if not scaners then
94635: LD_VAR 0 6
94639: NOT
94640: IFFALSE 94644
// exit ;
94642: GO 94735
// timer := Dec ( timer ) ;
94644: LD_ADDR_VAR 0 7
94648: PUSH
94649: LD_VAR 0 7
94653: PPUSH
94654: CALL 68248 0 1
94658: ST_TO_ADDR
// wait ( 0 0$1 ) ;
94659: LD_INT 35
94661: PPUSH
94662: CALL_OW 67
// until timer = 0 ;
94666: LD_VAR 0 7
94670: PUSH
94671: LD_INT 0
94673: EQUAL
94674: IFFALSE 94472
// if not scaners then
94676: LD_VAR 0 6
94680: NOT
94681: IFFALSE 94685
// exit ;
94683: GO 94735
// for i in scaners do
94685: LD_ADDR_VAR 0 3
94689: PUSH
94690: LD_VAR 0 6
94694: PUSH
94695: FOR_IN
94696: IFFALSE 94733
// begin SetUnitDisplayNumber ( i , 0 ) ;
94698: LD_VAR 0 3
94702: PPUSH
94703: LD_INT 0
94705: PPUSH
94706: CALL_OW 505
// SetTag ( i , 0 ) ;
94710: LD_VAR 0 3
94714: PPUSH
94715: LD_INT 0
94717: PPUSH
94718: CALL_OW 109
// RevealDetectorMine ( i ) ;
94722: LD_VAR 0 3
94726: PPUSH
94727: CALL 93955 0 1
// end ;
94731: GO 94695
94733: POP
94734: POP
// end ;
94735: LD_VAR 0 2
94739: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
94740: LD_INT 0
94742: PPUSH
// if p1 = mine_detector_mode then
94743: LD_VAR 0 2
94747: PUSH
94748: LD_INT 103
94750: EQUAL
94751: IFFALSE 94762
// DetectMine ( units ) ;
94753: LD_VAR 0 1
94757: PPUSH
94758: CALL 94253 0 1
// end ; end_of_file
94762: LD_VAR 0 7
94766: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
94767: LD_VAR 0 1
94771: PUSH
94772: LD_INT 200
94774: DOUBLE
94775: GREATEREQUAL
94776: IFFALSE 94784
94778: LD_INT 299
94780: DOUBLE
94781: LESSEQUAL
94782: IFTRUE 94786
94784: GO 94818
94786: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
94787: LD_VAR 0 1
94791: PPUSH
94792: LD_VAR 0 2
94796: PPUSH
94797: LD_VAR 0 3
94801: PPUSH
94802: LD_VAR 0 4
94806: PPUSH
94807: LD_VAR 0 5
94811: PPUSH
94812: CALL 89043 0 5
94816: GO 94895
94818: LD_INT 300
94820: DOUBLE
94821: GREATEREQUAL
94822: IFFALSE 94830
94824: LD_INT 399
94826: DOUBLE
94827: LESSEQUAL
94828: IFTRUE 94832
94830: GO 94894
94832: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
94833: LD_VAR 0 1
94837: PPUSH
94838: LD_VAR 0 2
94842: PPUSH
94843: LD_VAR 0 3
94847: PPUSH
94848: LD_VAR 0 4
94852: PPUSH
94853: LD_VAR 0 5
94857: PPUSH
94858: LD_VAR 0 6
94862: PPUSH
94863: LD_VAR 0 7
94867: PPUSH
94868: LD_VAR 0 8
94872: PPUSH
94873: LD_VAR 0 9
94877: PPUSH
94878: LD_VAR 0 10
94882: PPUSH
94883: LD_VAR 0 11
94887: PPUSH
94888: CALL 84846 0 11
94892: GO 94895
94894: POP
// end ;
94895: PPOPN 11
94897: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
94898: LD_VAR 0 1
94902: PPUSH
94903: LD_VAR 0 2
94907: PPUSH
94908: LD_VAR 0 3
94912: PPUSH
94913: LD_VAR 0 4
94917: PPUSH
94918: LD_VAR 0 5
94922: PPUSH
94923: CALL 88343 0 5
// end ; end_of_file
94927: PPOPN 5
94929: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
94930: LD_VAR 0 1
94934: PPUSH
94935: LD_VAR 0 2
94939: PPUSH
94940: LD_VAR 0 3
94944: PPUSH
94945: LD_VAR 0 4
94949: PPUSH
94950: LD_VAR 0 5
94954: PPUSH
94955: LD_VAR 0 6
94959: PPUSH
94960: CALL 72386 0 6
// end ;
94964: PPOPN 6
94966: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
94967: LD_INT 0
94969: PPUSH
// begin if not units then
94970: LD_VAR 0 1
94974: NOT
94975: IFFALSE 94979
// exit ;
94977: GO 95013
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
94979: LD_VAR 0 1
94983: PPUSH
94984: LD_VAR 0 2
94988: PPUSH
94989: LD_VAR 0 3
94993: PPUSH
94994: LD_VAR 0 4
94998: PPUSH
94999: LD_VAR 0 5
95003: PPUSH
95004: LD_VAR 0 6
95008: PPUSH
95009: CALL 94740 0 6
// end ;
95013: PPOPN 7
95015: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
95016: CALL 72266 0 0
// end ;
95020: PPOPN 1
95022: END
