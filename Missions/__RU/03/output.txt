// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 309 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 87
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 257: LD_ADDR_EXP 30
 261: PUSH
 262: EMPTY
 263: ST_TO_ADDR
// kirovFactory = 0 ;
 264: LD_ADDR_EXP 21
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// kirovCompleteFactory = false ;
 272: LD_ADDR_EXP 22
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// enableOmicronAI = true ;
 280: LD_ADDR_EXP 29
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// PrepareRussians ;
 288: CALL 932 0 0
// PrepareAmericans ;
 292: CALL 5401 0 0
// Nef_PrepareNature ;
 296: CALL 28732 0 0
// MissionIntro ;
 300: CALL 21192 0 0
// end ; end_of_file
 304: LD_VAR 0 1
 308: RET
// export function InitMapConfig ; begin
 309: LD_INT 0
 311: PPUSH
// BaseMapConfig ;
 312: CALL 325 0 0
// MissionMapConfig ;
 316: CALL 427 0 0
// end ;
 320: LD_VAR 0 1
 324: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 325: LD_INT 0
 327: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 328: LD_ADDR_EXP 31
 332: PUSH
 333: LD_INT 8
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: LD_INT 6
 341: PUSH
 342: LD_INT 6
 344: PUSH
 345: LD_INT 3
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 355: LD_ADDR_EXP 32
 359: PUSH
 360: LD_INT 2
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: LIST
 376: LIST
 377: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 378: LD_ADDR_EXP 33
 382: PUSH
 383: LD_INT 5
 385: NEG
 386: PPUSH
 387: LD_INT 5
 389: PPUSH
 390: CALL_OW 12
 394: PUSH
 395: EMPTY
 396: LIST
 397: ST_TO_ADDR
// debugMode = 0 ;
 398: LD_ADDR_EXP 36
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// missionPrefix = 03_ ;
 406: LD_ADDR_EXP 34
 410: PUSH
 411: LD_STRING 03_
 413: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 02_
 421: ST_TO_ADDR
// end ;
 422: LD_VAR 0 1
 426: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 427: LD_INT 0
 429: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 430: LD_ADDR_EXP 37
 434: PUSH
 435: LD_INT 7
 437: PUSH
 438: LD_INT 6
 440: PUSH
 441: LD_INT 6
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: LD_OWVAR 67
 453: ARRAY
 454: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 455: LD_ADDR_EXP 39
 459: PUSH
 460: LD_INT 84000
 462: PUSH
 463: LD_INT 73500
 465: PUSH
 466: LD_INT 63000
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: LD_OWVAR 67
 478: ARRAY
 479: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 480: LD_ADDR_EXP 40
 484: PUSH
 485: LD_INT 150
 487: PUSH
 488: LD_INT 100
 490: PUSH
 491: LD_INT 50
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: LD_OWVAR 67
 503: ARRAY
 504: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 505: LD_ADDR_EXP 41
 509: PUSH
 510: LD_INT 100
 512: PUSH
 513: LD_INT 50
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: LIST
 523: PUSH
 524: LD_OWVAR 67
 528: ARRAY
 529: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 530: LD_ADDR_EXP 42
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: LD_INT 2
 540: PUSH
 541: LD_INT 2
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 45
 559: PUSH
 560: LD_INT 8
 562: PUSH
 563: LD_INT 6
 565: PUSH
 566: LD_INT 5
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 46
 584: PUSH
 585: LD_INT 17850
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 15750
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// end ;
 605: LD_VAR 0 1
 609: RET
// every 0 0$1 trigger debugMode do var i ;
 610: LD_EXP 36
 614: IFFALSE 929
 616: GO 618
 618: DISABLE
 619: LD_INT 0
 621: PPUSH
// begin enable ;
 622: ENABLE
// FogOff ( your_side ) ;
 623: LD_OWVAR 2
 627: PPUSH
 628: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 632: LD_ADDR_VAR 0 1
 636: PUSH
 637: LD_INT 22
 639: PUSH
 640: LD_OWVAR 2
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 21
 664: PUSH
 665: LD_INT 2
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PPUSH
 681: CALL_OW 69
 685: PUSH
 686: FOR_IN
 687: IFFALSE 703
// SetLives ( i , 1000 ) ;
 689: LD_VAR 0 1
 693: PPUSH
 694: LD_INT 1000
 696: PPUSH
 697: CALL_OW 234
 701: GO 686
 703: POP
 704: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 705: LD_ADDR_VAR 0 1
 709: PUSH
 710: LD_INT 22
 712: PUSH
 713: LD_OWVAR 2
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 21
 724: PUSH
 725: LD_INT 1
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PPUSH
 736: CALL_OW 69
 740: PUSH
 741: FOR_IN
 742: IFFALSE 806
// begin SetSkill ( i , skill_combat , 10 ) ;
 744: LD_VAR 0 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 10
 754: PPUSH
 755: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 759: LD_VAR 0 1
 763: PPUSH
 764: LD_INT 2
 766: PPUSH
 767: LD_INT 10
 769: PPUSH
 770: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 774: LD_VAR 0 1
 778: PPUSH
 779: LD_INT 3
 781: PPUSH
 782: LD_INT 10
 784: PPUSH
 785: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 789: LD_VAR 0 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: LD_INT 10
 799: PPUSH
 800: CALL_OW 237
// end ;
 804: GO 741
 806: POP
 807: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 808: LD_ADDR_VAR 0 1
 812: PUSH
 813: LD_INT 22
 815: PUSH
 816: LD_OWVAR 2
 820: PUSH
 821: EMPTY
 822: LIST
 823: LIST
 824: PUSH
 825: LD_INT 2
 827: PUSH
 828: LD_INT 30
 830: PUSH
 831: LD_INT 0
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: PUSH
 838: LD_INT 30
 840: PUSH
 841: LD_INT 1
 843: PUSH
 844: EMPTY
 845: LIST
 846: LIST
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: LIST
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PPUSH
 857: CALL_OW 69
 861: PUSH
 862: FOR_IN
 863: IFFALSE 927
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 865: LD_VAR 0 1
 869: PPUSH
 870: CALL_OW 274
 874: PPUSH
 875: LD_INT 1
 877: PPUSH
 878: LD_INT 9999
 880: PPUSH
 881: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: CALL_OW 274
 894: PPUSH
 895: LD_INT 2
 897: PPUSH
 898: LD_INT 9999
 900: PPUSH
 901: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 905: LD_VAR 0 1
 909: PPUSH
 910: CALL_OW 274
 914: PPUSH
 915: LD_INT 3
 917: PPUSH
 918: LD_INT 9999
 920: PPUSH
 921: CALL_OW 277
// end ;
 925: GO 862
 927: POP
 928: POP
// end ; end_of_file
 929: PPOPN 1
 931: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 932: LD_INT 0
 934: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 935: LD_ADDR_EXP 79
 939: PUSH
 940: LD_INT 0
 942: PUSH
 943: LD_INT 0
 945: PUSH
 946: LD_INT 0
 948: PUSH
 949: LD_INT 0
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 958: LD_ADDR_EXP 73
 962: PUSH
 963: EMPTY
 964: ST_TO_ADDR
// PrepareKirovBase ;
 965: CALL 2021 0 0
// PrepareHeroes ;
 969: CALL 1002 0 0
// PrepareKirovPersonel ;
 973: CALL 2786 0 0
// PrepareBeriaBase ;
 977: CALL 1423 0 0
// PrepareSecondBaseTeam ;
 981: CALL 3929 0 0
// PrepareGrishko ;
 985: CALL 3114 0 0
// PrepareOtherBuildings ;
 989: CALL 3363 0 0
// PrepareVehicles ;
 993: CALL 3187 0 0
// end ;
 997: LD_VAR 0 1
1001: RET
// function PrepareHeroes ; begin
1002: LD_INT 0
1004: PPUSH
// uc_side = 3 ;
1005: LD_ADDR_OWVAR 20
1009: PUSH
1010: LD_INT 3
1012: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1013: LD_ADDR_EXP 47
1017: PUSH
1018: LD_STRING Burlak
1020: PPUSH
1021: LD_INT 1
1023: PPUSH
1024: CALL 6905 0 2
1028: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1029: LD_ADDR_EXP 48
1033: PUSH
1034: LD_STRING Gnyevko
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: CALL 6905 0 2
1044: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1045: LD_ADDR_EXP 50
1049: PUSH
1050: LD_STRING Kovalyuk
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: CALL 6905 0 2
1060: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1061: LD_ADDR_EXP 49
1065: PUSH
1066: LD_STRING Kirilenkova
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL 6905 0 2
1076: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1077: LD_EXP 47
1081: PUSH
1082: LD_EXP 48
1086: PUSH
1087: LD_EXP 50
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: LIST
1096: PPUSH
1097: LD_INT 3
1099: PPUSH
1100: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1104: LD_EXP 49
1108: PPUSH
1109: LD_INT 4
1111: PPUSH
1112: CALL_OW 336
// uc_side = 6 ;
1116: LD_ADDR_OWVAR 20
1120: PUSH
1121: LD_INT 6
1123: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1124: LD_EXP 1
1128: NOT
1129: PUSH
1130: LD_STRING 02_Belkov
1132: PPUSH
1133: CALL_OW 28
1137: AND
1138: IFFALSE 1239
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1140: LD_ADDR_EXP 51
1144: PUSH
1145: LD_STRING Belkov
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: CALL 6905 0 2
1155: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1156: LD_STRING 02_Belkov2
1158: PPUSH
1159: CALL_OW 28
1163: IFFALSE 1202
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1165: LD_ADDR_EXP 52
1169: PUSH
1170: LD_STRING Belkov2
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL 6905 0 2
1180: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1181: LD_EXP 52
1185: PPUSH
1186: LD_INT 159
1188: PPUSH
1189: LD_INT 107
1191: PPUSH
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1202: LD_ADDR_EXP 61
1206: PUSH
1207: LD_EXP 51
1211: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1212: LD_EXP 51
1216: PPUSH
1217: LD_INT 165
1219: PPUSH
1220: LD_INT 110
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL_OW 48
// ComHold ( Belkov ) ;
1230: LD_EXP 51
1234: PPUSH
1235: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1239: LD_EXP 1
1243: PUSH
1244: LD_STRING 02_Belkov2
1246: PPUSH
1247: CALL_OW 28
1251: AND
1252: IFFALSE 1307
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1254: LD_ADDR_EXP 52
1258: PUSH
1259: LD_STRING Belkov2
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: CALL 6905 0 2
1269: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1270: LD_ADDR_EXP 61
1274: PUSH
1275: LD_EXP 52
1279: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1280: LD_EXP 52
1284: PPUSH
1285: LD_INT 165
1287: PPUSH
1288: LD_INT 110
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: CALL_OW 48
// ComHold ( Belkov2 ) ;
1298: LD_EXP 52
1302: PPUSH
1303: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1307: LD_EXP 51
1311: PUSH
1312: LD_EXP 52
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: LD_INT 1
1323: PPUSH
1324: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1328: LD_EXP 47
1332: PPUSH
1333: LD_INT 164
1335: PPUSH
1336: LD_INT 108
1338: PPUSH
1339: LD_INT 0
1341: PPUSH
1342: CALL_OW 48
// ComHold ( Burlak ) ;
1346: LD_EXP 47
1350: PPUSH
1351: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1355: LD_EXP 48
1359: PPUSH
1360: LD_INT 159
1362: PPUSH
1363: LD_INT 107
1365: PPUSH
1366: LD_INT 5
1368: PPUSH
1369: LD_INT 0
1371: PPUSH
1372: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1376: LD_EXP 50
1380: PPUSH
1381: LD_INT 159
1383: PPUSH
1384: LD_INT 107
1386: PPUSH
1387: LD_INT 5
1389: PPUSH
1390: LD_INT 0
1392: PPUSH
1393: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1397: LD_EXP 49
1401: PPUSH
1402: LD_INT 159
1404: PPUSH
1405: LD_INT 107
1407: PPUSH
1408: LD_INT 5
1410: PPUSH
1411: LD_INT 0
1413: PPUSH
1414: CALL_OW 50
// end ;
1418: LD_VAR 0 1
1422: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1423: LD_INT 0
1425: PPUSH
1426: PPUSH
1427: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1428: LD_ADDR_EXP 57
1432: PUSH
1433: LD_STRING 02_BeriaBase_2
1435: PPUSH
1436: EMPTY
1437: PPUSH
1438: CALL_OW 30
1442: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1443: LD_ADDR_EXP 56
1447: PUSH
1448: LD_STRING 02_other_beria
1450: PPUSH
1451: CALL_OW 31
1455: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1456: LD_ADDR_EXP 54
1460: PUSH
1461: LD_STRING 02_other_survivors
1463: PPUSH
1464: CALL_OW 31
1468: ST_TO_ADDR
// uc_side = 3 ;
1469: LD_ADDR_OWVAR 20
1473: PUSH
1474: LD_INT 3
1476: ST_TO_ADDR
// uc_nation = 3 ;
1477: LD_ADDR_OWVAR 21
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// for i := 1 to beriaBase do
1485: LD_ADDR_VAR 0 2
1489: PUSH
1490: DOUBLE
1491: LD_INT 1
1493: DEC
1494: ST_TO_ADDR
1495: LD_EXP 57
1499: PUSH
1500: FOR_TO
1501: IFFALSE 1754
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1503: LD_ADDR_OWVAR 42
1507: PUSH
1508: LD_EXP 57
1512: PUSH
1513: LD_VAR 0 2
1517: ARRAY
1518: PUSH
1519: LD_INT 1
1521: ARRAY
1522: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1523: LD_ADDR_OWVAR 43
1527: PUSH
1528: LD_EXP 57
1532: PUSH
1533: LD_VAR 0 2
1537: ARRAY
1538: PUSH
1539: LD_INT 5
1541: ARRAY
1542: ST_TO_ADDR
// if bc_type = b_lab then
1543: LD_OWVAR 42
1547: PUSH
1548: LD_INT 6
1550: EQUAL
1551: IFFALSE 1569
// begin bc_kind1 = b_lab_basic ;
1553: LD_ADDR_OWVAR 44
1557: PUSH
1558: LD_INT 9
1560: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1561: LD_ADDR_OWVAR 45
1565: PUSH
1566: LD_INT 9
1568: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1569: LD_OWVAR 42
1573: PUSH
1574: LD_INT 7
1576: EQUAL
1577: PUSH
1578: LD_OWVAR 42
1582: PUSH
1583: LD_INT 8
1585: EQUAL
1586: OR
1587: IFFALSE 1703
// begin if beriaBase [ i ] [ 7 ] then
1589: LD_EXP 57
1593: PUSH
1594: LD_VAR 0 2
1598: ARRAY
1599: PUSH
1600: LD_INT 7
1602: ARRAY
1603: IFFALSE 1625
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1605: LD_ADDR_OWVAR 44
1609: PUSH
1610: LD_EXP 57
1614: PUSH
1615: LD_VAR 0 2
1619: ARRAY
1620: PUSH
1621: LD_INT 7
1623: ARRAY
1624: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1625: LD_EXP 57
1629: PUSH
1630: LD_VAR 0 2
1634: ARRAY
1635: PUSH
1636: LD_INT 8
1638: ARRAY
1639: IFFALSE 1661
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1641: LD_ADDR_OWVAR 45
1645: PUSH
1646: LD_EXP 57
1650: PUSH
1651: LD_VAR 0 2
1655: ARRAY
1656: PUSH
1657: LD_INT 8
1659: ARRAY
1660: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1661: LD_EXP 57
1665: PUSH
1666: LD_VAR 0 2
1670: ARRAY
1671: PUSH
1672: LD_INT 7
1674: ARRAY
1675: NOT
1676: PUSH
1677: LD_EXP 57
1681: PUSH
1682: LD_VAR 0 2
1686: ARRAY
1687: PUSH
1688: LD_INT 8
1690: ARRAY
1691: NOT
1692: AND
1693: IFFALSE 1703
// bc_type := b_lab ;
1695: LD_ADDR_OWVAR 42
1699: PUSH
1700: LD_INT 6
1702: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1703: LD_EXP 57
1707: PUSH
1708: LD_VAR 0 2
1712: ARRAY
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PPUSH
1718: LD_EXP 57
1722: PUSH
1723: LD_VAR 0 2
1727: ARRAY
1728: PUSH
1729: LD_INT 3
1731: ARRAY
1732: PPUSH
1733: LD_EXP 57
1737: PUSH
1738: LD_VAR 0 2
1742: ARRAY
1743: PUSH
1744: LD_INT 4
1746: ARRAY
1747: PPUSH
1748: CALL_OW 47
// end ;
1752: GO 1500
1754: POP
1755: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1756: LD_ADDR_EXP 58
1760: PUSH
1761: LD_INT 22
1763: PUSH
1764: LD_INT 3
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 30
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PPUSH
1785: CALL_OW 69
1789: PUSH
1790: LD_INT 1
1792: ARRAY
1793: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1794: LD_EXP 58
1798: PPUSH
1799: LD_STRING beria
1801: PPUSH
1802: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1806: LD_EXP 58
1810: PPUSH
1811: CALL_OW 274
1815: PPUSH
1816: LD_INT 1
1818: PPUSH
1819: LD_EXP 2
1823: PPUSH
1824: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1828: LD_EXP 58
1832: PPUSH
1833: CALL_OW 274
1837: PPUSH
1838: LD_INT 2
1840: PPUSH
1841: LD_EXP 3
1845: PPUSH
1846: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1850: LD_EXP 58
1854: PPUSH
1855: CALL_OW 274
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_EXP 58
1867: PPUSH
1868: CALL_OW 274
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: CALL_OW 275
1880: PUSH
1881: LD_EXP 40
1885: PLUS
1886: PPUSH
1887: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1891: LD_EXP 58
1895: PPUSH
1896: CALL_OW 274
1900: PPUSH
1901: LD_INT 2
1903: PPUSH
1904: LD_EXP 58
1908: PPUSH
1909: CALL_OW 274
1913: PPUSH
1914: LD_INT 2
1916: PPUSH
1917: CALL_OW 275
1921: PUSH
1922: LD_EXP 41
1926: PLUS
1927: PPUSH
1928: CALL_OW 277
// uc_side = 6 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 6
1939: ST_TO_ADDR
// for i in otherBeriaUnits do
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: LD_EXP 56
1949: PUSH
1950: FOR_IN
1951: IFFALSE 1976
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1953: LD_VAR 0 2
1957: PPUSH
1958: LD_INT 159
1960: PPUSH
1961: LD_INT 107
1963: PPUSH
1964: LD_INT 10
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 50
1974: GO 1950
1976: POP
1977: POP
// for i in other_survivors do
1978: LD_ADDR_VAR 0 2
1982: PUSH
1983: LD_EXP 54
1987: PUSH
1988: FOR_IN
1989: IFFALSE 2014
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1991: LD_VAR 0 2
1995: PPUSH
1996: LD_INT 159
1998: PPUSH
1999: LD_INT 107
2001: PPUSH
2002: LD_INT 10
2004: PPUSH
2005: LD_INT 0
2007: PPUSH
2008: CALL_OW 50
2012: GO 1988
2014: POP
2015: POP
// end ;
2016: LD_VAR 0 1
2020: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2021: LD_INT 0
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2027: LD_ADDR_EXP 64
2031: PUSH
2032: LD_STRING 02_KirovBase_3
2034: PPUSH
2035: EMPTY
2036: PPUSH
2037: CALL_OW 30
2041: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2042: LD_ADDR_EXP 63
2046: PUSH
2047: LD_STRING 02_other_kirov
2049: PPUSH
2050: CALL_OW 31
2054: ST_TO_ADDR
// uc_side = 6 ;
2055: LD_ADDR_OWVAR 20
2059: PUSH
2060: LD_INT 6
2062: ST_TO_ADDR
// uc_nation = 3 ;
2063: LD_ADDR_OWVAR 21
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2071: LD_ADDR_EXP 59
2075: PUSH
2076: LD_STRING Kurin
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: CALL 6905 0 2
2086: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2087: LD_EXP 59
2091: PPUSH
2092: LD_INT 166
2094: PPUSH
2095: LD_INT 109
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: CALL_OW 48
// ComHold ( Kurin ) ;
2105: LD_EXP 59
2109: PPUSH
2110: CALL_OW 140
// for i := 1 to kirovBase do
2114: LD_ADDR_VAR 0 2
2118: PUSH
2119: DOUBLE
2120: LD_INT 1
2122: DEC
2123: ST_TO_ADDR
2124: LD_EXP 64
2128: PUSH
2129: FOR_TO
2130: IFFALSE 2568
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2132: LD_ADDR_OWVAR 42
2136: PUSH
2137: LD_EXP 64
2141: PUSH
2142: LD_VAR 0 2
2146: ARRAY
2147: PUSH
2148: LD_INT 1
2150: ARRAY
2151: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2152: LD_ADDR_OWVAR 43
2156: PUSH
2157: LD_EXP 64
2161: PUSH
2162: LD_VAR 0 2
2166: ARRAY
2167: PUSH
2168: LD_INT 5
2170: ARRAY
2171: ST_TO_ADDR
// if bc_type = b_depot then
2172: LD_OWVAR 42
2176: PUSH
2177: LD_INT 0
2179: EQUAL
2180: IFFALSE 2190
// bc_type = b_warehouse ;
2182: LD_ADDR_OWVAR 42
2186: PUSH
2187: LD_INT 1
2189: ST_TO_ADDR
// if bc_type = b_armoury then
2190: LD_OWVAR 42
2194: PUSH
2195: LD_INT 4
2197: EQUAL
2198: IFFALSE 2208
// bc_type = b_barracks ;
2200: LD_ADDR_OWVAR 42
2204: PUSH
2205: LD_INT 5
2207: ST_TO_ADDR
// if bc_type = b_lab then
2208: LD_OWVAR 42
2212: PUSH
2213: LD_INT 6
2215: EQUAL
2216: IFFALSE 2234
// begin bc_kind1 = b_lab_weapon ;
2218: LD_ADDR_OWVAR 44
2222: PUSH
2223: LD_INT 10
2225: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2226: LD_ADDR_OWVAR 45
2230: PUSH
2231: LD_INT 9
2233: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2234: LD_OWVAR 42
2238: PUSH
2239: LD_INT 2
2241: EQUAL
2242: IFFALSE 2252
// bc_type = b_factory ;
2244: LD_ADDR_OWVAR 42
2248: PUSH
2249: LD_INT 3
2251: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2252: LD_OWVAR 42
2256: PUSH
2257: LD_INT 7
2259: EQUAL
2260: PUSH
2261: LD_OWVAR 42
2265: PUSH
2266: LD_INT 8
2268: EQUAL
2269: OR
2270: IFFALSE 2386
// begin if kirovBase [ i ] [ 7 ] then
2272: LD_EXP 64
2276: PUSH
2277: LD_VAR 0 2
2281: ARRAY
2282: PUSH
2283: LD_INT 7
2285: ARRAY
2286: IFFALSE 2308
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2288: LD_ADDR_OWVAR 44
2292: PUSH
2293: LD_EXP 64
2297: PUSH
2298: LD_VAR 0 2
2302: ARRAY
2303: PUSH
2304: LD_INT 7
2306: ARRAY
2307: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2308: LD_EXP 64
2312: PUSH
2313: LD_VAR 0 2
2317: ARRAY
2318: PUSH
2319: LD_INT 8
2321: ARRAY
2322: IFFALSE 2344
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2324: LD_ADDR_OWVAR 45
2328: PUSH
2329: LD_EXP 64
2333: PUSH
2334: LD_VAR 0 2
2338: ARRAY
2339: PUSH
2340: LD_INT 8
2342: ARRAY
2343: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2344: LD_EXP 64
2348: PUSH
2349: LD_VAR 0 2
2353: ARRAY
2354: PUSH
2355: LD_INT 7
2357: ARRAY
2358: NOT
2359: PUSH
2360: LD_EXP 64
2364: PUSH
2365: LD_VAR 0 2
2369: ARRAY
2370: PUSH
2371: LD_INT 8
2373: ARRAY
2374: NOT
2375: AND
2376: IFFALSE 2386
// bc_type := b_lab ;
2378: LD_ADDR_OWVAR 42
2382: PUSH
2383: LD_INT 6
2385: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2386: LD_OWVAR 42
2390: PUSH
2391: LD_INT 31
2393: EQUAL
2394: IFFALSE 2418
// begin bc_type = b_bunker ;
2396: LD_ADDR_OWVAR 42
2400: PUSH
2401: LD_INT 32
2403: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2404: LD_ADDR_EXP 75
2408: PUSH
2409: LD_EXP 75
2413: PUSH
2414: LD_INT 1
2416: PLUS
2417: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2418: LD_ADDR_VAR 0 4
2422: PUSH
2423: LD_EXP 64
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: PUSH
2434: LD_INT 2
2436: ARRAY
2437: PPUSH
2438: LD_EXP 64
2442: PUSH
2443: LD_VAR 0 2
2447: ARRAY
2448: PUSH
2449: LD_INT 3
2451: ARRAY
2452: PPUSH
2453: LD_EXP 64
2457: PUSH
2458: LD_VAR 0 2
2462: ARRAY
2463: PUSH
2464: LD_INT 4
2466: ARRAY
2467: PPUSH
2468: CALL_OW 47
2472: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2473: LD_VAR 0 3
2477: PUSH
2478: LD_INT 4
2480: LESS
2481: PUSH
2482: LD_OWVAR 42
2486: PUSH
2487: LD_INT 32
2489: EQUAL
2490: AND
2491: IFFALSE 2540
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2493: LD_VAR 0 4
2497: PPUSH
2498: LD_INT 42
2500: PUSH
2501: LD_INT 43
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 1
2510: PPUSH
2511: LD_INT 2
2513: PPUSH
2514: CALL_OW 12
2518: ARRAY
2519: PPUSH
2520: CALL_OW 431
// tmp = tmp + 1 ;
2524: LD_ADDR_VAR 0 3
2528: PUSH
2529: LD_VAR 0 3
2533: PUSH
2534: LD_INT 1
2536: PLUS
2537: ST_TO_ADDR
// end else
2538: GO 2566
// if bc_type = b_bunker then
2540: LD_OWVAR 42
2544: PUSH
2545: LD_INT 32
2547: EQUAL
2548: IFFALSE 2566
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2550: LD_ADDR_EXP 70
2554: PUSH
2555: LD_EXP 70
2559: PUSH
2560: LD_VAR 0 4
2564: ADD
2565: ST_TO_ADDR
// end ;
2566: GO 2129
2568: POP
2569: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2570: LD_ADDR_EXP 65
2574: PUSH
2575: LD_INT 22
2577: PUSH
2578: LD_INT 6
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: LD_INT 30
2587: PUSH
2588: LD_INT 1
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: PPUSH
2599: CALL_OW 69
2603: PUSH
2604: LD_INT 1
2606: ARRAY
2607: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2608: LD_EXP 65
2612: PPUSH
2613: LD_STRING kirov
2615: PPUSH
2616: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2620: LD_EXP 65
2624: PPUSH
2625: CALL_OW 274
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_INT 5000
2635: PPUSH
2636: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2640: LD_EXP 65
2644: PPUSH
2645: CALL_OW 274
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: LD_INT 2000
2655: PPUSH
2656: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2660: LD_ADDR_EXP 67
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 6
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 21
2677: PUSH
2678: LD_INT 3
2680: PUSH
2681: EMPTY
2682: LIST
2683: LIST
2684: PUSH
2685: LD_INT 30
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: PPUSH
2700: CALL_OW 69
2704: PPUSH
2705: LD_INT 145
2707: PPUSH
2708: LD_INT 102
2710: PPUSH
2711: CALL_OW 73
2715: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2716: LD_ADDR_EXP 68
2720: PUSH
2721: LD_INT 22
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 21
2733: PUSH
2734: LD_INT 3
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: PUSH
2741: LD_INT 30
2743: PUSH
2744: LD_INT 5
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: PUSH
2761: LD_EXP 67
2765: DIFF
2766: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2767: LD_ADDR_EXP 68
2771: PUSH
2772: LD_EXP 68
2776: PUSH
2777: LD_INT 1
2779: ARRAY
2780: ST_TO_ADDR
// end ;
2781: LD_VAR 0 1
2785: RET
// export function PrepareKirovPersonel ; var i ; begin
2786: LD_INT 0
2788: PPUSH
2789: PPUSH
// PrepareEngineer ( false , 7 ) ;
2790: LD_INT 0
2792: PPUSH
2793: LD_INT 7
2795: PPUSH
2796: CALL_OW 382
// kirovEng = CreateHuman ;
2800: LD_ADDR_EXP 69
2804: PUSH
2805: CALL_OW 44
2809: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2810: LD_EXP 69
2814: PPUSH
2815: LD_INT 159
2817: PPUSH
2818: LD_INT 107
2820: PPUSH
2821: LD_INT 10
2823: PPUSH
2824: LD_INT 0
2826: PPUSH
2827: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2831: LD_ADDR_EXP 60
2835: PUSH
2836: LD_STRING Popov
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: CALL 6905 0 2
2846: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2847: LD_EXP 60
2851: PPUSH
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2862: LD_EXP 60
2866: PPUSH
2867: LD_INT 98
2869: PPUSH
2870: LD_INT 36
2872: PPUSH
2873: CALL_OW 118
// hc_name :=  ;
2877: LD_ADDR_OWVAR 26
2881: PUSH
2882: LD_STRING 
2884: ST_TO_ADDR
// hc_gallery :=  ;
2885: LD_ADDR_OWVAR 33
2889: PUSH
2890: LD_STRING 
2892: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2893: LD_INT 0
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: CALL_OW 381
// ruScout = CreateHuman ;
2903: LD_ADDR_EXP 62
2907: PUSH
2908: CALL_OW 44
2912: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2913: LD_EXP 62
2917: PPUSH
2918: LD_INT 3
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 49
// ComCrawl ( ruScout ) ;
2928: LD_EXP 62
2932: PPUSH
2933: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2937: LD_EXP 62
2941: PPUSH
2942: LD_INT 98
2944: PPUSH
2945: LD_INT 36
2947: PPUSH
2948: CALL_OW 178
// uc_side = 6 ;
2952: LD_ADDR_OWVAR 20
2956: PUSH
2957: LD_INT 6
2959: ST_TO_ADDR
// for i in otherKirovUnits do
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: LD_EXP 63
2969: PUSH
2970: FOR_IN
2971: IFFALSE 3107
// begin SetSide ( i , 6 ) ;
2973: LD_VAR 0 2
2977: PPUSH
2978: LD_INT 6
2980: PPUSH
2981: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2985: LD_VAR 0 2
2989: PPUSH
2990: CALL_OW 257
2994: PUSH
2995: LD_INT 1
2997: EQUAL
2998: PUSH
2999: LD_EXP 75
3003: PUSH
3004: LD_INT 0
3006: GREATER
3007: AND
3008: IFFALSE 3084
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3010: LD_VAR 0 2
3014: PPUSH
3015: LD_INT 18
3017: PPUSH
3018: LD_INT 22
3020: PUSH
3021: LD_INT 6
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 21
3030: PUSH
3031: LD_INT 3
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 30
3040: PUSH
3041: LD_INT 32
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 70
3057: PUSH
3058: LD_EXP 75
3062: ARRAY
3063: PPUSH
3064: CALL 8349 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3068: LD_ADDR_EXP 75
3072: PUSH
3073: LD_EXP 75
3077: PUSH
3078: LD_INT 1
3080: MINUS
3081: ST_TO_ADDR
// end else
3082: GO 3105
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3084: LD_VAR 0 2
3088: PPUSH
3089: LD_INT 159
3091: PPUSH
3092: LD_INT 107
3094: PPUSH
3095: LD_INT 10
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 50
// end ; end ;
3105: GO 2970
3107: POP
3108: POP
// end ;
3109: LD_VAR 0 1
3113: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
3119: PPUSH
// uc_side = 6 ;
3120: LD_ADDR_OWVAR 20
3124: PUSH
3125: LD_INT 6
3127: ST_TO_ADDR
// uc_nation = 3 ;
3128: LD_ADDR_OWVAR 21
3132: PUSH
3133: LD_INT 3
3135: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3136: LD_ADDR_EXP 80
3140: PUSH
3141: LD_STRING Grishko
3143: PPUSH
3144: LD_INT 0
3146: PPUSH
3147: CALL 6905 0 2
3151: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3152: LD_EXP 80
3156: PPUSH
3157: LD_INT 218
3159: PPUSH
3160: LD_INT 108
3162: PPUSH
3163: LD_INT 3
3165: PPUSH
3166: LD_INT 0
3168: PPUSH
3169: CALL_OW 50
// ComHold ( Grishko ) ;
3173: LD_EXP 80
3177: PPUSH
3178: CALL_OW 140
// end ;
3182: LD_VAR 0 1
3186: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3187: LD_INT 0
3189: PPUSH
3190: PPUSH
3191: PPUSH
// uc_side = 3 ;
3192: LD_ADDR_OWVAR 20
3196: PUSH
3197: LD_INT 3
3199: ST_TO_ADDR
// uc_nation = 3 ;
3200: LD_ADDR_OWVAR 21
3204: PUSH
3205: LD_INT 3
3207: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3208: LD_ADDR_VAR 0 2
3212: PUSH
3213: DOUBLE
3214: LD_INT 1
3216: DEC
3217: ST_TO_ADDR
3218: LD_EXP 4
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3356
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3226: LD_EXP 4
3230: PUSH
3231: LD_VAR 0 2
3235: ARRAY
3236: PUSH
3237: LD_INT 1
3239: ARRAY
3240: PPUSH
3241: LD_EXP 4
3245: PUSH
3246: LD_VAR 0 2
3250: ARRAY
3251: PUSH
3252: LD_INT 2
3254: ARRAY
3255: PPUSH
3256: LD_EXP 4
3260: PUSH
3261: LD_VAR 0 2
3265: ARRAY
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PPUSH
3271: LD_EXP 4
3275: PUSH
3276: LD_VAR 0 2
3280: ARRAY
3281: PUSH
3282: LD_INT 4
3284: ARRAY
3285: PPUSH
3286: LD_EXP 4
3290: PUSH
3291: LD_VAR 0 2
3295: ARRAY
3296: PUSH
3297: LD_INT 5
3299: ARRAY
3300: PPUSH
3301: CALL 34367 0 5
// vehicle = CreateVehicle ;
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: CALL_OW 45
3314: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_INT 25
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3330: LD_VAR 0 3
3334: PPUSH
3335: LD_EXP 4
3339: PUSH
3340: LD_VAR 0 2
3344: ARRAY
3345: PUSH
3346: LD_INT 6
3348: ARRAY
3349: PPUSH
3350: CALL_OW 234
// end ;
3354: GO 3223
3356: POP
3357: POP
// end ;
3358: LD_VAR 0 1
3362: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3363: LD_INT 0
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3369: LD_ADDR_VAR 0 3
3373: PUSH
3374: LD_STRING 02_OtherBuildings_4
3376: PPUSH
3377: EMPTY
3378: PPUSH
3379: CALL_OW 30
3383: ST_TO_ADDR
// uc_side = 3 ;
3384: LD_ADDR_OWVAR 20
3388: PUSH
3389: LD_INT 3
3391: ST_TO_ADDR
// for i := 1 to otherBuildings do
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_VAR 0 3
3406: PUSH
3407: FOR_TO
3408: IFFALSE 3669
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3410: LD_ADDR_OWVAR 21
3414: PUSH
3415: LD_VAR 0 3
3419: PUSH
3420: LD_VAR 0 2
3424: ARRAY
3425: PUSH
3426: LD_INT 6
3428: ARRAY
3429: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3430: LD_ADDR_OWVAR 42
3434: PUSH
3435: LD_VAR 0 3
3439: PUSH
3440: LD_VAR 0 2
3444: ARRAY
3445: PUSH
3446: LD_INT 1
3448: ARRAY
3449: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3450: LD_ADDR_OWVAR 43
3454: PUSH
3455: LD_VAR 0 3
3459: PUSH
3460: LD_VAR 0 2
3464: ARRAY
3465: PUSH
3466: LD_INT 5
3468: ARRAY
3469: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3470: LD_ADDR_VAR 0 4
3474: PUSH
3475: LD_VAR 0 3
3479: PUSH
3480: LD_VAR 0 2
3484: ARRAY
3485: PUSH
3486: LD_INT 2
3488: ARRAY
3489: PPUSH
3490: LD_VAR 0 3
3494: PUSH
3495: LD_VAR 0 2
3499: ARRAY
3500: PUSH
3501: LD_INT 3
3503: ARRAY
3504: PPUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_VAR 0 2
3514: ARRAY
3515: PUSH
3516: LD_INT 4
3518: ARRAY
3519: PPUSH
3520: CALL_OW 47
3524: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3525: LD_VAR 0 4
3529: PPUSH
3530: LD_VAR 0 3
3534: PUSH
3535: LD_VAR 0 2
3539: ARRAY
3540: PUSH
3541: LD_INT 7
3543: ARRAY
3544: PPUSH
3545: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3549: LD_VAR 0 4
3553: PPUSH
3554: CALL_OW 266
3558: PUSH
3559: LD_INT 0
3561: PUSH
3562: LD_INT 1
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: IN
3569: IFFALSE 3667
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 274
3580: PPUSH
3581: LD_INT 1
3583: PPUSH
3584: LD_VAR 0 3
3588: PUSH
3589: LD_VAR 0 2
3593: ARRAY
3594: PUSH
3595: LD_INT 8
3597: ARRAY
3598: PPUSH
3599: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3603: LD_VAR 0 4
3607: PPUSH
3608: CALL_OW 274
3612: PPUSH
3613: LD_INT 1
3615: PPUSH
3616: LD_VAR 0 3
3620: PUSH
3621: LD_VAR 0 2
3625: ARRAY
3626: PUSH
3627: LD_INT 9
3629: ARRAY
3630: PPUSH
3631: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3635: LD_VAR 0 4
3639: PPUSH
3640: CALL_OW 274
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_VAR 0 3
3652: PUSH
3653: LD_VAR 0 2
3657: ARRAY
3658: PUSH
3659: LD_INT 10
3661: ARRAY
3662: PPUSH
3663: CALL_OW 277
// end ; end ;
3667: GO 3407
3669: POP
3670: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3671: LD_ADDR_VAR 0 3
3675: PUSH
3676: LD_STRING 02_AmericanBuildings_5
3678: PPUSH
3679: EMPTY
3680: PPUSH
3681: CALL_OW 30
3685: ST_TO_ADDR
// uc_side = 1 ;
3686: LD_ADDR_OWVAR 20
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// uc_nation = 1 ;
3694: LD_ADDR_OWVAR 21
3698: PUSH
3699: LD_INT 1
3701: ST_TO_ADDR
// for i := 1 to otherBuildings do
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_VAR 0 3
3716: PUSH
3717: FOR_TO
3718: IFFALSE 3922
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3720: LD_ADDR_OWVAR 42
3724: PUSH
3725: LD_VAR 0 3
3729: PUSH
3730: LD_VAR 0 2
3734: ARRAY
3735: PUSH
3736: LD_INT 1
3738: ARRAY
3739: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3740: LD_ADDR_OWVAR 43
3744: PUSH
3745: LD_VAR 0 3
3749: PUSH
3750: LD_VAR 0 2
3754: ARRAY
3755: PUSH
3756: LD_INT 5
3758: ARRAY
3759: ST_TO_ADDR
// if bc_type = b_breastwork then
3760: LD_OWVAR 42
3764: PUSH
3765: LD_INT 31
3767: EQUAL
3768: IFFALSE 3841
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3770: LD_ADDR_VAR 0 4
3774: PUSH
3775: LD_VAR 0 3
3779: PUSH
3780: LD_VAR 0 2
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: PPUSH
3790: LD_VAR 0 3
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PUSH
3801: LD_INT 3
3803: ARRAY
3804: PPUSH
3805: LD_VAR 0 3
3809: PUSH
3810: LD_VAR 0 2
3814: ARRAY
3815: PUSH
3816: LD_INT 4
3818: ARRAY
3819: PPUSH
3820: CALL_OW 47
3824: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3825: LD_EXP 42
3829: PPUSH
3830: LD_VAR 0 4
3834: PPUSH
3835: CALL 8439 0 2
// end else
3839: GO 3896
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3841: LD_ADDR_VAR 0 4
3845: PUSH
3846: LD_VAR 0 3
3850: PUSH
3851: LD_VAR 0 2
3855: ARRAY
3856: PUSH
3857: LD_INT 2
3859: ARRAY
3860: PPUSH
3861: LD_VAR 0 3
3865: PUSH
3866: LD_VAR 0 2
3870: ARRAY
3871: PUSH
3872: LD_INT 3
3874: ARRAY
3875: PPUSH
3876: LD_VAR 0 3
3880: PUSH
3881: LD_VAR 0 2
3885: ARRAY
3886: PUSH
3887: LD_INT 4
3889: ARRAY
3890: PPUSH
3891: CALL_OW 47
3895: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3896: LD_VAR 0 4
3900: PPUSH
3901: LD_VAR 0 3
3905: PUSH
3906: LD_VAR 0 2
3910: ARRAY
3911: PUSH
3912: LD_INT 7
3914: ARRAY
3915: PPUSH
3916: CALL_OW 234
// end ;
3920: GO 3717
3922: POP
3923: POP
// end ;
3924: LD_VAR 0 1
3928: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3929: LD_INT 0
3931: PPUSH
3932: PPUSH
// secondBaseTeam = [ ] ;
3933: LD_ADDR_EXP 76
3937: PUSH
3938: EMPTY
3939: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3940: LD_INT 226
3942: PPUSH
3943: LD_INT 109
3945: PPUSH
3946: LD_INT 6
3948: PPUSH
3949: CALL_OW 441
// uc_side = 6 ;
3953: LD_ADDR_OWVAR 20
3957: PUSH
3958: LD_INT 6
3960: ST_TO_ADDR
// uc_nation = 3 ;
3961: LD_ADDR_OWVAR 21
3965: PUSH
3966: LD_INT 3
3968: ST_TO_ADDR
// hc_name =  ;
3969: LD_ADDR_OWVAR 26
3973: PUSH
3974: LD_STRING 
3976: ST_TO_ADDR
// hc_gallery =  ;
3977: LD_ADDR_OWVAR 33
3981: PUSH
3982: LD_STRING 
3984: ST_TO_ADDR
// for i := 1 to 3 do
3985: LD_ADDR_VAR 0 2
3989: PUSH
3990: DOUBLE
3991: LD_INT 1
3993: DEC
3994: ST_TO_ADDR
3995: LD_INT 3
3997: PUSH
3998: FOR_TO
3999: IFFALSE 4052
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4001: LD_INT 0
4003: PPUSH
4004: LD_EXP 42
4008: PPUSH
4009: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4013: LD_ADDR_EXP 76
4017: PUSH
4018: LD_EXP 76
4022: PUSH
4023: CALL_OW 44
4027: ADD
4028: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4029: LD_EXP 76
4033: PUSH
4034: LD_VAR 0 2
4038: ARRAY
4039: PPUSH
4040: LD_INT 19
4042: PPUSH
4043: LD_INT 0
4045: PPUSH
4046: CALL_OW 49
// end ;
4050: GO 3998
4052: POP
4053: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4054: LD_INT 0
4056: PPUSH
4057: LD_EXP 42
4061: PPUSH
4062: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4066: LD_ADDR_EXP 76
4070: PUSH
4071: LD_EXP 76
4075: PUSH
4076: CALL_OW 44
4080: ADD
4081: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4082: LD_EXP 76
4086: PUSH
4087: LD_INT 4
4089: ARRAY
4090: PPUSH
4091: LD_INT 19
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4101: LD_INT 0
4103: PPUSH
4104: LD_EXP 42
4108: PPUSH
4109: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4113: LD_ADDR_EXP 76
4117: PUSH
4118: LD_EXP 76
4122: PUSH
4123: CALL_OW 44
4127: ADD
4128: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4129: LD_EXP 76
4133: PUSH
4134: LD_INT 5
4136: ARRAY
4137: PPUSH
4138: LD_INT 19
4140: PPUSH
4141: LD_INT 0
4143: PPUSH
4144: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4148: LD_EXP 76
4152: PPUSH
4153: LD_INT 214
4155: PPUSH
4156: LD_INT 105
4158: PPUSH
4159: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4163: LD_EXP 76
4167: PPUSH
4168: LD_INT 25
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 72
4182: PPUSH
4183: LD_INT 0
4185: PPUSH
4186: LD_INT 222
4188: PPUSH
4189: LD_INT 115
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4199: LD_EXP 76
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 2
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 224
4221: PPUSH
4222: LD_INT 107
4224: PPUSH
4225: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4229: LD_EXP 76
4233: PPUSH
4234: LD_INT 25
4236: PUSH
4237: LD_INT 2
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 72
4248: PPUSH
4249: LD_INT 228
4251: PPUSH
4252: LD_INT 110
4254: PPUSH
4255: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4259: LD_EXP 76
4263: PPUSH
4264: LD_INT 25
4266: PUSH
4267: LD_INT 2
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PPUSH
4274: CALL_OW 72
4278: PPUSH
4279: LD_INT 29
4281: PPUSH
4282: LD_INT 226
4284: PPUSH
4285: LD_INT 109
4287: PPUSH
4288: LD_INT 3
4290: PPUSH
4291: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4295: LD_EXP 76
4299: PPUSH
4300: LD_INT 25
4302: PUSH
4303: LD_INT 2
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 72
4314: PPUSH
4315: LD_INT 4
4317: PPUSH
4318: LD_INT 216
4320: PPUSH
4321: LD_INT 114
4323: PPUSH
4324: LD_INT 0
4326: PPUSH
4327: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4331: LD_EXP 76
4335: PPUSH
4336: LD_INT 25
4338: PUSH
4339: LD_INT 2
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PPUSH
4346: CALL_OW 72
4350: PPUSH
4351: LD_INT 31
4353: PPUSH
4354: LD_INT 215
4356: PPUSH
4357: LD_INT 103
4359: PPUSH
4360: LD_INT 3
4362: PPUSH
4363: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4367: LD_EXP 76
4371: PPUSH
4372: LD_INT 25
4374: PUSH
4375: LD_INT 2
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 72
4386: PPUSH
4387: LD_INT 31
4389: PPUSH
4390: LD_INT 227
4392: PPUSH
4393: LD_INT 116
4395: PPUSH
4396: LD_INT 5
4398: PPUSH
4399: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4403: LD_EXP 76
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: PPUSH
4423: LD_INT 208
4425: PPUSH
4426: LD_INT 106
4428: PPUSH
4429: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4433: LD_EXP 76
4437: PPUSH
4438: LD_INT 25
4440: PUSH
4441: LD_INT 2
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: PPUSH
4448: CALL_OW 72
4452: PPUSH
4453: LD_INT 209
4455: PPUSH
4456: LD_INT 105
4458: PPUSH
4459: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4463: LD_EXP 76
4467: PUSH
4468: LD_INT 5
4470: ARRAY
4471: PPUSH
4472: LD_INT 209
4474: PPUSH
4475: LD_INT 105
4477: PPUSH
4478: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4482: LD_EXP 76
4486: PUSH
4487: LD_INT 5
4489: ARRAY
4490: PPUSH
4491: LD_INT 208
4493: PPUSH
4494: LD_INT 106
4496: PPUSH
4497: CALL_OW 178
// end ;
4501: LD_VAR 0 1
4505: RET
// export function SpawnKirovSupport ; var i , un ; begin
4506: LD_INT 0
4508: PPUSH
4509: PPUSH
4510: PPUSH
// uc_side = 6 ;
4511: LD_ADDR_OWVAR 20
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
// uc_nation = 3 ;
4519: LD_ADDR_OWVAR 21
4523: PUSH
4524: LD_INT 3
4526: ST_TO_ADDR
// hc_name =  ;
4527: LD_ADDR_OWVAR 26
4531: PUSH
4532: LD_STRING 
4534: ST_TO_ADDR
// hc_gallery :=  ;
4535: LD_ADDR_OWVAR 33
4539: PUSH
4540: LD_STRING 
4542: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4543: LD_ADDR_VAR 0 2
4547: PUSH
4548: DOUBLE
4549: LD_INT 1
4551: DEC
4552: ST_TO_ADDR
4553: LD_EXP 78
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4647
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 1
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: CALL_OW 12
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: LD_INT 2
4580: PPUSH
4581: CALL_OW 12
4585: PPUSH
4586: CALL_OW 380
// un = CreateHuman ;
4590: LD_ADDR_VAR 0 3
4594: PUSH
4595: CALL_OW 44
4599: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4600: LD_ADDR_EXP 77
4604: PUSH
4605: LD_EXP 77
4609: PUSH
4610: LD_VAR 0 3
4614: ADD
4615: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_INT 19
4623: PPUSH
4624: LD_INT 0
4626: PPUSH
4627: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_EXP 67
4640: PPUSH
4641: CALL_OW 120
// end ;
4645: GO 4558
4647: POP
4648: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4649: LD_ADDR_VAR 0 2
4653: PUSH
4654: DOUBLE
4655: LD_INT 1
4657: DEC
4658: ST_TO_ADDR
4659: LD_EXP 79
4663: PUSH
4664: LD_INT 1
4666: ARRAY
4667: PUSH
4668: LD_INT 4
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4771
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_INT 1
4683: PPUSH
4684: LD_INT 3
4686: PPUSH
4687: CALL_OW 12
4691: PPUSH
4692: CALL_OW 380
// un = CreateHuman ;
4696: LD_ADDR_VAR 0 3
4700: PUSH
4701: CALL_OW 44
4705: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: LD_INT 19
4713: PPUSH
4714: LD_INT 0
4716: PPUSH
4717: CALL_OW 49
// if i > kirovBunkersToOccupy then
4721: LD_VAR 0 2
4725: PUSH
4726: LD_EXP 71
4730: GREATER
4731: IFFALSE 4749
// ComEnterUnit ( un , ru2_bar2 ) else
4733: LD_VAR 0 3
4737: PPUSH
4738: LD_EXP 68
4742: PPUSH
4743: CALL_OW 120
4747: GO 4769
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4749: LD_VAR 0 3
4753: PPUSH
4754: LD_EXP 71
4758: PUSH
4759: LD_VAR 0 2
4763: ARRAY
4764: PPUSH
4765: CALL_OW 120
// end ;
4769: GO 4672
4771: POP
4772: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_EXP 79
4787: PUSH
4788: LD_INT 3
4790: ARRAY
4791: PUSH
4792: FOR_TO
4793: IFFALSE 4896
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4795: LD_INT 0
4797: PPUSH
4798: LD_INT 3
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: LD_INT 3
4806: PPUSH
4807: CALL_OW 12
4811: PPUSH
4812: CALL_OW 380
// un = CreateHuman ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: CALL_OW 44
4825: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4826: LD_VAR 0 3
4830: PPUSH
4831: LD_INT 19
4833: PPUSH
4834: LD_INT 0
4836: PPUSH
4837: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4841: LD_VAR 0 3
4845: PPUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 6
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 21
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 30
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: PPUSH
4881: CALL_OW 69
4885: PUSH
4886: LD_INT 1
4888: ARRAY
4889: PPUSH
4890: CALL_OW 120
// end ;
4894: GO 4792
4896: POP
4897: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4898: LD_ADDR_VAR 0 2
4902: PUSH
4903: DOUBLE
4904: LD_INT 1
4906: DEC
4907: ST_TO_ADDR
4908: LD_EXP 79
4912: PUSH
4913: LD_INT 4
4915: ARRAY
4916: PUSH
4917: LD_INT 2
4919: PLUS
4920: PUSH
4921: FOR_TO
4922: IFFALSE 5028
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_INT 4
4929: PPUSH
4930: LD_INT 1
4932: PPUSH
4933: LD_INT 3
4935: PPUSH
4936: CALL_OW 12
4940: PPUSH
4941: CALL_OW 380
// un = CreateHuman ;
4945: LD_ADDR_VAR 0 3
4949: PUSH
4950: CALL_OW 44
4954: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4955: LD_VAR 0 3
4959: PPUSH
4960: LD_INT 19
4962: PPUSH
4963: LD_INT 0
4965: PPUSH
4966: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4970: LD_VAR 0 3
4974: PPUSH
4975: LD_INT 18
4977: PPUSH
4978: LD_INT 22
4980: PUSH
4981: LD_INT 6
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 21
4990: PUSH
4991: LD_INT 3
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 70
5017: PUSH
5018: LD_INT 1
5020: ARRAY
5021: PPUSH
5022: CALL_OW 120
// end ;
5026: GO 4921
5028: POP
5029: POP
// end ;
5030: LD_VAR 0 1
5034: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5035: LD_INT 0
5037: PPUSH
5038: PPUSH
5039: PPUSH
// survivorsArabianAttack = [ ] ;
5040: LD_ADDR_EXP 77
5044: PUSH
5045: EMPTY
5046: ST_TO_ADDR
// limit = 9 ;
5047: LD_ADDR_VAR 0 2
5051: PUSH
5052: LD_INT 9
5054: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5055: LD_ADDR_EXP 77
5059: PUSH
5060: LD_EXP 77
5064: PUSH
5065: LD_EXP 60
5069: ADD
5070: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5071: LD_EXP 51
5075: PPUSH
5076: CALL_OW 302
5080: PUSH
5081: LD_EXP 51
5085: PPUSH
5086: CALL_OW 255
5090: PUSH
5091: LD_INT 6
5093: EQUAL
5094: AND
5095: IFFALSE 5127
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5097: LD_ADDR_EXP 77
5101: PUSH
5102: LD_EXP 77
5106: PUSH
5107: LD_EXP 51
5111: ADD
5112: ST_TO_ADDR
// limit = limit - 1 ;
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: LD_VAR 0 2
5122: PUSH
5123: LD_INT 1
5125: MINUS
5126: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5127: LD_EXP 52
5131: PPUSH
5132: CALL_OW 302
5136: PUSH
5137: LD_EXP 52
5141: PPUSH
5142: CALL_OW 255
5146: PUSH
5147: LD_INT 6
5149: EQUAL
5150: AND
5151: IFFALSE 5183
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5153: LD_ADDR_EXP 77
5157: PUSH
5158: LD_EXP 77
5162: PUSH
5163: LD_EXP 52
5167: ADD
5168: ST_TO_ADDR
// limit = limit - 1 ;
5169: LD_ADDR_VAR 0 2
5173: PUSH
5174: LD_VAR 0 2
5178: PUSH
5179: LD_INT 1
5181: MINUS
5182: ST_TO_ADDR
// end ; for unit in other_survivors do
5183: LD_ADDR_VAR 0 3
5187: PUSH
5188: LD_EXP 54
5192: PUSH
5193: FOR_IN
5194: IFFALSE 5254
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5196: LD_VAR 0 3
5200: PPUSH
5201: CALL_OW 302
5205: PUSH
5206: LD_VAR 0 3
5210: PPUSH
5211: CALL_OW 255
5215: PUSH
5216: LD_INT 6
5218: EQUAL
5219: AND
5220: IFFALSE 5252
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5222: LD_ADDR_EXP 77
5226: PUSH
5227: LD_EXP 77
5231: PUSH
5232: LD_VAR 0 3
5236: ADD
5237: ST_TO_ADDR
// limit = limit - 1 ;
5238: LD_ADDR_VAR 0 2
5242: PUSH
5243: LD_VAR 0 2
5247: PUSH
5248: LD_INT 1
5250: MINUS
5251: ST_TO_ADDR
// end ; end ;
5252: GO 5193
5254: POP
5255: POP
// for unit in otherBeriaUnits do
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: LD_EXP 56
5265: PUSH
5266: FOR_IN
5267: IFFALSE 5327
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL_OW 302
5278: PUSH
5279: LD_VAR 0 3
5283: PPUSH
5284: CALL_OW 255
5288: PUSH
5289: LD_INT 6
5291: EQUAL
5292: AND
5293: IFFALSE 5325
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5295: LD_ADDR_EXP 77
5299: PUSH
5300: LD_EXP 77
5304: PUSH
5305: LD_VAR 0 3
5309: ADD
5310: ST_TO_ADDR
// limit = limit - 1 ;
5311: LD_ADDR_VAR 0 2
5315: PUSH
5316: LD_VAR 0 2
5320: PUSH
5321: LD_INT 1
5323: MINUS
5324: ST_TO_ADDR
// end ; end ;
5325: GO 5266
5327: POP
5328: POP
// if limit > 0 then
5329: LD_VAR 0 2
5333: PUSH
5334: LD_INT 0
5336: GREATER
5337: IFFALSE 5349
// survivorsToSpawn = limit ;
5339: LD_ADDR_EXP 78
5343: PUSH
5344: LD_VAR 0 2
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 1
5353: RET
// export function PrepareScholtze ; begin
5354: LD_INT 0
5356: PPUSH
// uc_side = 8 ;
5357: LD_ADDR_OWVAR 20
5361: PUSH
5362: LD_INT 8
5364: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5365: LD_ADDR_EXP 53
5369: PUSH
5370: LD_STRING Scholtze
5372: PPUSH
5373: LD_INT 0
5375: PPUSH
5376: CALL 6905 0 2
5380: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5381: LD_EXP 53
5385: PPUSH
5386: LD_INT 30
5388: PPUSH
5389: LD_INT 1
5391: PPUSH
5392: CALL_OW 49
// end ; end_of_file
5396: LD_VAR 0 1
5400: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5401: LD_INT 0
5403: PPUSH
// amSupportTroops = [ ] ;
5404: LD_ADDR_EXP 82
5408: PUSH
5409: EMPTY
5410: ST_TO_ADDR
// PrepareOmicronBase ;
5411: CALL 5420 0 0
// end ;
5415: LD_VAR 0 1
5419: RET
// function PrepareOmicronBase ; var base ; begin
5420: LD_INT 0
5422: PPUSH
5423: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5424: LD_ADDR_EXP 84
5428: PUSH
5429: LD_INT 64
5431: PPUSH
5432: LD_INT 13
5434: PPUSH
5435: LD_STRING omikron
5437: PPUSH
5438: LD_INT 1
5440: PUSH
5441: LD_INT 2
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_OWVAR 67
5456: ARRAY
5457: PPUSH
5458: LD_INT 3000
5460: PUSH
5461: LD_INT 3000
5463: PUSH
5464: LD_INT 0
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: PPUSH
5472: LD_INT 7
5474: PUSH
5475: LD_INT 3
5477: PUSH
5478: LD_INT 4
5480: PUSH
5481: LD_INT 2
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL 37776 0 6
5494: ST_TO_ADDR
// case Difficulty of 2 :
5495: LD_OWVAR 67
5499: PUSH
5500: LD_INT 2
5502: DOUBLE
5503: EQUAL
5504: IFTRUE 5508
5506: GO 5524
5508: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5509: LD_INT 51
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: LD_INT 1
5517: PPUSH
5518: CALL_OW 322
// end ; 3 :
5522: GO 5562
5524: LD_INT 3
5526: DOUBLE
5527: EQUAL
5528: IFTRUE 5532
5530: GO 5561
5532: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5533: LD_INT 49
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5546: LD_INT 51
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: LD_INT 1
5554: PPUSH
5555: CALL_OW 322
// end ; end ;
5559: GO 5562
5561: POP
// end ;
5562: LD_VAR 0 1
5566: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// amIntroUnits = [ ] ;
5573: LD_ADDR_EXP 81
5577: PUSH
5578: EMPTY
5579: ST_TO_ADDR
// uc_side = 1 ;
5580: LD_ADDR_OWVAR 20
5584: PUSH
5585: LD_INT 1
5587: ST_TO_ADDR
// uc_nation = nation_american ;
5588: LD_ADDR_OWVAR 21
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5596: LD_ADDR_OWVAR 37
5600: PUSH
5601: LD_INT 3
5603: ST_TO_ADDR
// vc_control = control_manual ;
5604: LD_ADDR_OWVAR 38
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// vc_engine = engine_combustion ;
5612: LD_ADDR_OWVAR 39
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5620: LD_ADDR_OWVAR 40
5624: PUSH
5625: LD_INT 5
5627: ST_TO_ADDR
// veh = CreateVehicle ;
5628: LD_ADDR_VAR 0 3
5632: PUSH
5633: CALL_OW 45
5637: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5638: LD_VAR 0 3
5642: PPUSH
5643: LD_INT 4
5645: PPUSH
5646: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5650: LD_ADDR_EXP 81
5654: PUSH
5655: LD_EXP 81
5659: PUSH
5660: LD_VAR 0 3
5664: ADD
5665: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5666: LD_VAR 0 3
5670: PPUSH
5671: LD_INT 5
5673: PPUSH
5674: LD_INT 0
5676: PPUSH
5677: CALL_OW 49
// for i := 1 to 5 do
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: DOUBLE
5687: LD_INT 1
5689: DEC
5690: ST_TO_ADDR
5691: LD_INT 5
5693: PUSH
5694: FOR_TO
5695: IFFALSE 5792
// begin hc_name :=  ;
5697: LD_ADDR_OWVAR 26
5701: PUSH
5702: LD_STRING 
5704: ST_TO_ADDR
// hc_gallery :=  ;
5705: LD_ADDR_OWVAR 33
5709: PUSH
5710: LD_STRING 
5712: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 1
5718: PPUSH
5719: CALL_OW 381
// human = CreateHuman ;
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: CALL_OW 44
5732: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5733: LD_ADDR_EXP 81
5737: PUSH
5738: LD_EXP 81
5742: PUSH
5743: LD_VAR 0 4
5747: ADD
5748: ST_TO_ADDR
// if i < 5 then
5749: LD_VAR 0 2
5753: PUSH
5754: LD_INT 5
5756: LESS
5757: IFFALSE 5776
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5759: LD_VAR 0 4
5763: PPUSH
5764: LD_INT 5
5766: PPUSH
5767: LD_INT 0
5769: PPUSH
5770: CALL_OW 49
5774: GO 5790
// begin PlaceHumanInUnit ( human , veh ) ;
5776: LD_VAR 0 4
5780: PPUSH
5781: LD_VAR 0 3
5785: PPUSH
5786: CALL_OW 52
// end ; end ;
5790: GO 5694
5792: POP
5793: POP
// end ;
5794: LD_VAR 0 1
5798: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5799: LD_INT 0
5801: PPUSH
5802: PPUSH
5803: PPUSH
5804: PPUSH
5805: PPUSH
// uc_side := 1 ;
5806: LD_ADDR_OWVAR 20
5810: PUSH
5811: LD_INT 1
5813: ST_TO_ADDR
// uc_nation := 1 ;
5814: LD_ADDR_OWVAR 21
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// hc_name :=  ;
5822: LD_ADDR_OWVAR 26
5826: PUSH
5827: LD_STRING 
5829: ST_TO_ADDR
// hc_gallery :=  ;
5830: LD_ADDR_OWVAR 33
5834: PUSH
5835: LD_STRING 
5837: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5838: LD_ADDR_VAR 0 6
5842: PUSH
5843: DOUBLE
5844: LD_INT 1
5846: DEC
5847: ST_TO_ADDR
5848: LD_VAR 0 1
5852: PUSH
5853: FOR_TO
5854: IFFALSE 5913
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5856: LD_INT 0
5858: PPUSH
5859: LD_EXP 42
5863: PPUSH
5864: CALL_OW 381
// un = CreateHuman ;
5868: LD_ADDR_VAR 0 7
5872: PUSH
5873: CALL_OW 44
5877: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5878: LD_ADDR_EXP 82
5882: PUSH
5883: LD_EXP 82
5887: PUSH
5888: LD_VAR 0 7
5892: ADD
5893: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5894: LD_VAR 0 7
5898: PPUSH
5899: LD_VAR 0 4
5903: PPUSH
5904: LD_INT 0
5906: PPUSH
5907: CALL_OW 49
// end ;
5911: GO 5853
5913: POP
5914: POP
// for i := 1 to scientistsAmount do
5915: LD_ADDR_VAR 0 6
5919: PUSH
5920: DOUBLE
5921: LD_INT 1
5923: DEC
5924: ST_TO_ADDR
5925: LD_VAR 0 2
5929: PUSH
5930: FOR_TO
5931: IFFALSE 5990
// begin PrepareScientist ( false , enemySkillLevel ) ;
5933: LD_INT 0
5935: PPUSH
5936: LD_EXP 42
5940: PPUSH
5941: CALL_OW 384
// un = CreateHuman ;
5945: LD_ADDR_VAR 0 7
5949: PUSH
5950: CALL_OW 44
5954: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5955: LD_ADDR_EXP 82
5959: PUSH
5960: LD_EXP 82
5964: PUSH
5965: LD_VAR 0 7
5969: ADD
5970: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5971: LD_VAR 0 7
5975: PPUSH
5976: LD_VAR 0 4
5980: PPUSH
5981: LD_INT 0
5983: PPUSH
5984: CALL_OW 49
// end ;
5988: GO 5930
5990: POP
5991: POP
// for i := 1 to vehiclesAmount do
5992: LD_ADDR_VAR 0 6
5996: PUSH
5997: DOUBLE
5998: LD_INT 1
6000: DEC
6001: ST_TO_ADDR
6002: LD_VAR 0 3
6006: PUSH
6007: FOR_TO
6008: IFFALSE 6174
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6010: LD_ADDR_OWVAR 40
6014: PUSH
6015: LD_INT 2
6017: PUSH
6018: LD_INT 4
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_INT 1
6031: PPUSH
6032: LD_INT 3
6034: PPUSH
6035: CALL_OW 12
6039: ARRAY
6040: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6041: LD_ADDR_OWVAR 37
6045: PUSH
6046: LD_INT 3
6048: ST_TO_ADDR
// vc_control = control_manual ;
6049: LD_ADDR_OWVAR 38
6053: PUSH
6054: LD_INT 1
6056: ST_TO_ADDR
// vc_engine = engine_combustion ;
6057: LD_ADDR_OWVAR 39
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// veh = CreateVehicle ;
6065: LD_ADDR_VAR 0 8
6069: PUSH
6070: CALL_OW 45
6074: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6075: LD_ADDR_EXP 82
6079: PUSH
6080: LD_EXP 82
6084: PUSH
6085: LD_VAR 0 8
6089: ADD
6090: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6091: LD_VAR 0 8
6095: PPUSH
6096: LD_VAR 0 4
6100: PPUSH
6101: LD_INT 0
6103: PPUSH
6104: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6108: LD_INT 0
6110: PPUSH
6111: LD_EXP 42
6115: PPUSH
6116: CALL_OW 383
// un = CreateHuman ;
6120: LD_ADDR_VAR 0 7
6124: PUSH
6125: CALL_OW 44
6129: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6130: LD_ADDR_EXP 82
6134: PUSH
6135: LD_EXP 82
6139: PUSH
6140: LD_VAR 0 7
6144: ADD
6145: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6146: LD_VAR 0 7
6150: PPUSH
6151: LD_VAR 0 8
6155: PPUSH
6156: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6160: LD_VAR 0 8
6164: PPUSH
6165: LD_INT 100
6167: PPUSH
6168: CALL_OW 240
// end ;
6172: GO 6007
6174: POP
6175: POP
// case area of NorthAmericanSpawnArea :
6176: LD_VAR 0 4
6180: PUSH
6181: LD_INT 7
6183: DOUBLE
6184: EQUAL
6185: IFTRUE 6189
6187: GO 6200
6189: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6190: LD_ADDR_VAR 0 9
6194: PUSH
6195: LD_INT 10
6197: ST_TO_ADDR
6198: GO 6239
6200: LD_INT 9
6202: DOUBLE
6203: EQUAL
6204: IFTRUE 6208
6206: GO 6219
6208: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6209: LD_ADDR_VAR 0 9
6213: PUSH
6214: LD_INT 11
6216: ST_TO_ADDR
6217: GO 6239
6219: LD_INT 8
6221: DOUBLE
6222: EQUAL
6223: IFTRUE 6227
6225: GO 6238
6227: POP
// road = SouthRoadArea2 ; end ;
6228: LD_ADDR_VAR 0 9
6232: PUSH
6233: LD_INT 12
6235: ST_TO_ADDR
6236: GO 6239
6238: POP
// MoveToBase ( amSupportTroops , road ) ;
6239: LD_EXP 82
6243: PPUSH
6244: LD_VAR 0 9
6248: PPUSH
6249: CALL 18364 0 2
// end ;
6253: LD_VAR 0 5
6257: RET
// export function PrepareAmericanPatrol ; var un ; begin
6258: LD_INT 0
6260: PPUSH
6261: PPUSH
// amPatrol = [ ] ;
6262: LD_ADDR_EXP 83
6266: PUSH
6267: EMPTY
6268: ST_TO_ADDR
// uc_side = 1 ;
6269: LD_ADDR_OWVAR 20
6273: PUSH
6274: LD_INT 1
6276: ST_TO_ADDR
// uc_nation = 1 ;
6277: LD_ADDR_OWVAR 21
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6285: LD_ADDR_VAR 0 2
6289: PUSH
6290: LD_STRING Campell
6292: PPUSH
6293: LD_INT 0
6295: PPUSH
6296: CALL 6905 0 2
6300: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6301: LD_ADDR_EXP 83
6305: PUSH
6306: LD_EXP 83
6310: PUSH
6311: LD_VAR 0 2
6315: ADD
6316: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 14
6324: PPUSH
6325: LD_INT 0
6327: PPUSH
6328: CALL_OW 49
// SetClass ( un , 1 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 1
6339: PPUSH
6340: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6344: LD_INT 1
6346: PPUSH
6347: LD_EXP 42
6351: PPUSH
6352: CALL_OW 381
// un = CreateHuman ;
6356: LD_ADDR_VAR 0 2
6360: PUSH
6361: CALL_OW 44
6365: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6366: LD_ADDR_EXP 83
6370: PUSH
6371: LD_EXP 83
6375: PUSH
6376: LD_VAR 0 2
6380: ADD
6381: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_INT 14
6389: PPUSH
6390: LD_INT 0
6392: PPUSH
6393: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6397: LD_EXP 83
6401: PPUSH
6402: LD_EXP 53
6406: PPUSH
6407: CALL_OW 115
// end ; end_of_file
6411: LD_VAR 0 1
6415: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6416: LD_INT 0
6418: PPUSH
6419: PPUSH
6420: PPUSH
6421: PPUSH
// northGroup = [ ] ;
6422: LD_ADDR_EXP 85
6426: PUSH
6427: EMPTY
6428: ST_TO_ADDR
// southGroup = [ ] ;
6429: LD_ADDR_EXP 86
6433: PUSH
6434: EMPTY
6435: ST_TO_ADDR
// uc_side = 2 ;
6436: LD_ADDR_OWVAR 20
6440: PUSH
6441: LD_INT 2
6443: ST_TO_ADDR
// uc_nation = 2 ;
6444: LD_ADDR_OWVAR 21
6448: PUSH
6449: LD_INT 2
6451: ST_TO_ADDR
// hc_name :=  ;
6452: LD_ADDR_OWVAR 26
6456: PUSH
6457: LD_STRING 
6459: ST_TO_ADDR
// hc_gallery :=  ;
6460: LD_ADDR_OWVAR 33
6464: PUSH
6465: LD_STRING 
6467: ST_TO_ADDR
// for i := 1 to 10 do
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: DOUBLE
6474: LD_INT 1
6476: DEC
6477: ST_TO_ADDR
6478: LD_INT 10
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6596
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6484: LD_INT 13
6486: PPUSH
6487: LD_INT 1
6489: PPUSH
6490: LD_INT 1
6492: PPUSH
6493: LD_INT 26
6495: PPUSH
6496: LD_INT 100
6498: PPUSH
6499: CALL 34367 0 5
// veh = CreateVehicle ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: CALL_OW 45
6512: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6513: LD_ADDR_EXP 86
6517: PUSH
6518: LD_EXP 86
6522: PUSH
6523: LD_VAR 0 4
6527: ADD
6528: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6529: LD_VAR 0 4
6533: PPUSH
6534: LD_INT 23
6536: PPUSH
6537: LD_INT 0
6539: PPUSH
6540: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6544: LD_INT 0
6546: PPUSH
6547: LD_INT 8
6549: PPUSH
6550: CALL_OW 383
// un = CreateHuman ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: CALL_OW 44
6563: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6564: LD_ADDR_EXP 86
6568: PUSH
6569: LD_EXP 86
6573: PUSH
6574: LD_VAR 0 3
6578: ADD
6579: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 52
// end ;
6594: GO 6481
6596: POP
6597: POP
// for i := 1 to 20 do
6598: LD_ADDR_VAR 0 2
6602: PUSH
6603: DOUBLE
6604: LD_INT 1
6606: DEC
6607: ST_TO_ADDR
6608: LD_INT 20
6610: PUSH
6611: FOR_TO
6612: IFFALSE 6667
// begin PrepareSoldier ( false , 8 ) ;
6614: LD_INT 0
6616: PPUSH
6617: LD_INT 8
6619: PPUSH
6620: CALL_OW 381
// un = CreateHuman ;
6624: LD_ADDR_VAR 0 3
6628: PUSH
6629: CALL_OW 44
6633: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6634: LD_ADDR_EXP 86
6638: PUSH
6639: LD_EXP 86
6643: PUSH
6644: LD_VAR 0 3
6648: ADD
6649: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6650: LD_VAR 0 3
6654: PPUSH
6655: LD_INT 23
6657: PPUSH
6658: LD_INT 0
6660: PPUSH
6661: CALL_OW 49
// end ;
6665: GO 6611
6667: POP
6668: POP
// for i := 1 to 20 do
6669: LD_ADDR_VAR 0 2
6673: PUSH
6674: DOUBLE
6675: LD_INT 1
6677: DEC
6678: ST_TO_ADDR
6679: LD_INT 20
6681: PUSH
6682: FOR_TO
6683: IFFALSE 6741
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6685: LD_INT 0
6687: PPUSH
6688: LD_INT 8
6690: PPUSH
6691: LD_INT 8
6693: PPUSH
6694: CALL_OW 380
// un = CreateHuman ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: CALL_OW 44
6707: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6708: LD_ADDR_EXP 86
6712: PUSH
6713: LD_EXP 86
6717: PUSH
6718: LD_VAR 0 3
6722: ADD
6723: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6724: LD_VAR 0 3
6728: PPUSH
6729: LD_INT 23
6731: PPUSH
6732: LD_INT 0
6734: PPUSH
6735: CALL_OW 49
// end ;
6739: GO 6682
6741: POP
6742: POP
// for i := 1 to 10 do
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_INT 10
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6898
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6759: LD_INT 13
6761: PPUSH
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: LD_INT 25
6770: PUSH
6771: LD_INT 27
6773: PUSH
6774: LD_INT 23
6776: PUSH
6777: LD_INT 26
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 1
6788: PPUSH
6789: LD_INT 4
6791: PPUSH
6792: CALL_OW 12
6796: ARRAY
6797: PPUSH
6798: LD_INT 100
6800: PPUSH
6801: CALL 34367 0 5
// veh = CreateVehicle ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: CALL_OW 45
6814: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6815: LD_ADDR_EXP 85
6819: PUSH
6820: LD_EXP 85
6824: PUSH
6825: LD_VAR 0 4
6829: ADD
6830: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6831: LD_VAR 0 4
6835: PPUSH
6836: LD_INT 22
6838: PPUSH
6839: LD_INT 0
6841: PPUSH
6842: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6846: LD_INT 0
6848: PPUSH
6849: LD_INT 8
6851: PPUSH
6852: CALL_OW 383
// un = CreateHuman ;
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: CALL_OW 44
6865: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6866: LD_ADDR_EXP 85
6870: PUSH
6871: LD_EXP 85
6875: PUSH
6876: LD_VAR 0 3
6880: ADD
6881: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6882: LD_VAR 0 3
6886: PPUSH
6887: LD_VAR 0 4
6891: PPUSH
6892: CALL_OW 52
// end ;
6896: GO 6756
6898: POP
6899: POP
// end ; end_of_file
6900: LD_VAR 0 1
6904: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6905: LD_INT 0
6907: PPUSH
6908: PPUSH
// if exist_mode then
6909: LD_VAR 0 2
6913: IFFALSE 6938
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6915: LD_ADDR_VAR 0 4
6919: PUSH
6920: LD_EXP 35
6924: PUSH
6925: LD_VAR 0 1
6929: STR
6930: PPUSH
6931: CALL_OW 34
6935: ST_TO_ADDR
6936: GO 6953
// unit := NewCharacter ( ident ) ;
6938: LD_ADDR_VAR 0 4
6942: PUSH
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL_OW 25
6952: ST_TO_ADDR
// result := unit ;
6953: LD_ADDR_VAR 0 3
6957: PUSH
6958: LD_VAR 0 4
6962: ST_TO_ADDR
// end ;
6963: LD_VAR 0 3
6967: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6968: LD_INT 0
6970: PPUSH
6971: PPUSH
6972: PPUSH
6973: PPUSH
// units = characters ;
6974: LD_ADDR_VAR 0 9
6978: PUSH
6979: LD_VAR 0 1
6983: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6984: LD_ADDR_VAR 0 9
6988: PUSH
6989: LD_VAR 0 9
6993: PUSH
6994: LD_EXP 47
6998: PUSH
6999: LD_EXP 48
7003: PUSH
7004: LD_EXP 49
7008: PUSH
7009: LD_EXP 50
7013: PUSH
7014: LD_EXP 51
7018: PUSH
7019: LD_EXP 52
7023: PUSH
7024: LD_EXP 53
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: DIFF
7038: ST_TO_ADDR
// if not units and not canTalkHero then
7039: LD_VAR 0 9
7043: NOT
7044: PUSH
7045: LD_VAR 0 5
7049: NOT
7050: AND
7051: IFFALSE 7055
// exit ;
7053: GO 7228
// if not units then
7055: LD_VAR 0 9
7059: NOT
7060: IFFALSE 7081
// units = characters diff [ Burlak ] ;
7062: LD_ADDR_VAR 0 9
7066: PUSH
7067: LD_VAR 0 1
7071: PUSH
7072: LD_EXP 47
7076: PUSH
7077: EMPTY
7078: LIST
7079: DIFF
7080: ST_TO_ADDR
// if not units and canTalkHero then
7081: LD_VAR 0 9
7085: NOT
7086: PUSH
7087: LD_VAR 0 5
7091: AND
7092: IFFALSE 7096
// exit ;
7094: GO 7228
// speaker := units [ rand ( 1 , units ) ] ;
7096: LD_ADDR_VAR 0 8
7100: PUSH
7101: LD_VAR 0 9
7105: PUSH
7106: LD_INT 1
7108: PPUSH
7109: LD_VAR 0 9
7113: PPUSH
7114: CALL_OW 12
7118: ARRAY
7119: ST_TO_ADDR
// if radio then
7120: LD_VAR 0 4
7124: IFFALSE 7173
// begin if GetSex ( speaker ) = sex_male then
7126: LD_VAR 0 8
7130: PPUSH
7131: CALL_OW 258
7135: PUSH
7136: LD_INT 1
7138: EQUAL
7139: IFFALSE 7157
// SayRadio ( speaker , dialogMID ) else
7141: LD_VAR 0 8
7145: PPUSH
7146: LD_VAR 0 2
7150: PPUSH
7151: CALL_OW 94
7155: GO 7171
// SayRadio ( speaker , dialogFID ) ;
7157: LD_VAR 0 8
7161: PPUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: CALL_OW 94
// end else
7171: GO 7218
// begin if GetSex ( speaker ) = sex_male then
7173: LD_VAR 0 8
7177: PPUSH
7178: CALL_OW 258
7182: PUSH
7183: LD_INT 1
7185: EQUAL
7186: IFFALSE 7204
// Say ( speaker , dialogMID ) else
7188: LD_VAR 0 8
7192: PPUSH
7193: LD_VAR 0 2
7197: PPUSH
7198: CALL_OW 88
7202: GO 7218
// Say ( speaker , dialogFID ) ;
7204: LD_VAR 0 8
7208: PPUSH
7209: LD_VAR 0 3
7213: PPUSH
7214: CALL_OW 88
// end ; result := speaker ;
7218: LD_ADDR_VAR 0 6
7222: PUSH
7223: LD_VAR 0 8
7227: ST_TO_ADDR
// end ;
7228: LD_VAR 0 6
7232: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7233: LD_INT 0
7235: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 255
7245: PUSH
7246: LD_VAR 0 3
7250: EQUAL
7251: PUSH
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 302
7261: AND
7262: IFFALSE 7284
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7264: LD_VAR 0 1
7268: PPUSH
7269: LD_EXP 34
7273: PUSH
7274: LD_VAR 0 2
7278: STR
7279: PPUSH
7280: CALL_OW 38
// end ;
7284: LD_VAR 0 4
7288: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
7293: PPUSH
// resultCharactersToSave = [ ] ;
7294: LD_ADDR_VAR 0 6
7298: PUSH
7299: EMPTY
7300: ST_TO_ADDR
// for unit in characters do
7301: LD_ADDR_VAR 0 5
7305: PUSH
7306: LD_VAR 0 1
7310: PUSH
7311: FOR_IN
7312: IFFALSE 7360
// if GetSide ( unit ) = side and IsOK ( unit ) then
7314: LD_VAR 0 5
7318: PPUSH
7319: CALL_OW 255
7323: PUSH
7324: LD_VAR 0 3
7328: EQUAL
7329: PUSH
7330: LD_VAR 0 5
7334: PPUSH
7335: CALL_OW 302
7339: AND
7340: IFFALSE 7358
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7342: LD_ADDR_VAR 0 6
7346: PUSH
7347: LD_VAR 0 6
7351: PUSH
7352: LD_VAR 0 5
7356: ADD
7357: ST_TO_ADDR
7358: GO 7311
7360: POP
7361: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7362: LD_VAR 0 6
7366: PPUSH
7367: LD_EXP 34
7371: PUSH
7372: LD_VAR 0 2
7376: STR
7377: PPUSH
7378: CALL_OW 38
// end ;
7382: LD_VAR 0 4
7386: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7387: LD_INT 0
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
// charsToChoose = otherKirovUnits ;
7393: LD_ADDR_VAR 0 4
7397: PUSH
7398: LD_EXP 63
7402: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7403: LD_ADDR_VAR 0 4
7407: PUSH
7408: LD_VAR 0 4
7412: PUSH
7413: LD_EXP 56
7417: ADD
7418: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_VAR 0 4
7428: PUSH
7429: LD_EXP 54
7433: ADD
7434: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7435: LD_ADDR_VAR 0 4
7439: PUSH
7440: LD_VAR 0 4
7444: PUSH
7445: LD_EXP 51
7449: ADD
7450: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7451: LD_ADDR_VAR 0 4
7455: PUSH
7456: LD_VAR 0 4
7460: PUSH
7461: LD_EXP 52
7465: ADD
7466: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7467: LD_ADDR_VAR 0 5
7471: PUSH
7472: LD_STRING text
7474: PPUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: LD_VAR 0 1
7484: PPUSH
7485: LD_INT -5
7487: PUSH
7488: LD_EXP 47
7492: PUSH
7493: LD_EXP 48
7497: PUSH
7498: LD_EXP 50
7502: PUSH
7503: LD_EXP 49
7507: PUSH
7508: LD_INT -6
7510: PUSH
7511: LD_INT -2
7513: PUSH
7514: LD_INT -3
7516: PUSH
7517: LD_INT -5
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_VAR 0 4
7535: ADD
7536: PUSH
7537: LD_INT -6
7539: PUSH
7540: LD_INT -4
7542: PUSH
7543: LD_EXP 59
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: ADD
7553: PPUSH
7554: LD_INT 1
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: LD_INT 1
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 4
7572: PUSH
7573: LD_INT 1
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: PPUSH
7586: CALL_OW 42
7590: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7591: LD_VAR 0 4
7595: PPUSH
7596: LD_INT 6
7598: PPUSH
7599: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7603: LD_VAR 0 5
7607: PPUSH
7608: LD_INT 3
7610: PPUSH
7611: CALL_OW 235
// SetSurvivorsArabianAttack ;
7615: CALL 5035 0 0
// MoveKurinUnitsToBuildings ;
7619: CALL 9057 0 0
// end ;
7623: LD_VAR 0 2
7627: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7628: LD_INT 0
7630: PPUSH
7631: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7632: LD_ADDR_VAR 0 5
7636: PUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: LD_INT 22
7644: PUSH
7645: LD_VAR 0 2
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 21
7656: PUSH
7657: LD_INT 3
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 30
7666: PUSH
7667: LD_VAR 0 3
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 70
7685: PUSH
7686: FOR_IN
7687: IFFALSE 7720
// begin if UnitsInside ( building ) < 6 then
7689: LD_VAR 0 5
7693: PPUSH
7694: CALL_OW 313
7698: PUSH
7699: LD_INT 6
7701: LESS
7702: IFFALSE 7718
// begin result = building ;
7704: LD_ADDR_VAR 0 4
7708: PUSH
7709: LD_VAR 0 5
7713: ST_TO_ADDR
// exit ;
7714: POP
7715: POP
7716: GO 7730
// end ; end ;
7718: GO 7686
7720: POP
7721: POP
// result = 0 ;
7722: LD_ADDR_VAR 0 4
7726: PUSH
7727: LD_INT 0
7729: ST_TO_ADDR
// end ;
7730: LD_VAR 0 4
7734: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7735: LD_INT 0
7737: PPUSH
7738: PPUSH
7739: PPUSH
7740: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7741: LD_ADDR_VAR 0 6
7745: PUSH
7746: LD_INT 34
7748: PUSH
7749: LD_INT 71
7751: PUSH
7752: LD_INT 70
7754: PUSH
7755: LD_INT 69
7757: PUSH
7758: LD_INT 39
7760: PUSH
7761: LD_INT 31
7763: PUSH
7764: LD_INT 14
7766: PUSH
7767: LD_INT 10
7769: PUSH
7770: LD_INT 40
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: ST_TO_ADDR
// resultWeapons = [ ] ;
7784: LD_ADDR_VAR 0 5
7788: PUSH
7789: EMPTY
7790: ST_TO_ADDR
// for i := 1 to weaponTechs do
7791: LD_ADDR_VAR 0 4
7795: PUSH
7796: DOUBLE
7797: LD_INT 1
7799: DEC
7800: ST_TO_ADDR
7801: LD_VAR 0 6
7805: PUSH
7806: FOR_TO
7807: IFFALSE 7994
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7809: LD_VAR 0 6
7813: PUSH
7814: LD_VAR 0 4
7818: ARRAY
7819: PPUSH
7820: LD_VAR 0 2
7824: PPUSH
7825: CALL_OW 482
7829: PUSH
7830: LD_VAR 0 6
7834: PUSH
7835: LD_VAR 0 4
7839: ARRAY
7840: PPUSH
7841: LD_VAR 0 1
7845: PPUSH
7846: CALL_OW 321
7850: PUSH
7851: LD_INT 2
7853: EQUAL
7854: AND
7855: IFFALSE 7992
// case nation of nation_american :
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 1
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 7905
7870: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7871: LD_ADDR_VAR 0 5
7875: PUSH
7876: LD_VAR 0 5
7880: PUSH
7881: LD_VAR 0 6
7885: PUSH
7886: LD_VAR 0 4
7890: ARRAY
7891: PPUSH
7892: LD_VAR 0 2
7896: PPUSH
7897: CALL 8011 0 2
7901: ADD
7902: ST_TO_ADDR
7903: GO 7992
7905: LD_INT 2
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7948
7913: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7914: LD_ADDR_VAR 0 5
7918: PUSH
7919: LD_VAR 0 5
7923: PUSH
7924: LD_VAR 0 6
7928: PUSH
7929: LD_VAR 0 4
7933: ARRAY
7934: PPUSH
7935: LD_VAR 0 2
7939: PPUSH
7940: CALL 8011 0 2
7944: ADD
7945: ST_TO_ADDR
7946: GO 7992
7948: LD_INT 3
7950: DOUBLE
7951: EQUAL
7952: IFTRUE 7956
7954: GO 7991
7956: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7957: LD_ADDR_VAR 0 5
7961: PUSH
7962: LD_VAR 0 5
7966: PUSH
7967: LD_VAR 0 6
7971: PUSH
7972: LD_VAR 0 4
7976: ARRAY
7977: PPUSH
7978: LD_VAR 0 2
7982: PPUSH
7983: CALL 8011 0 2
7987: ADD
7988: ST_TO_ADDR
7989: GO 7992
7991: POP
// end ;
7992: GO 7806
7994: POP
7995: POP
// result = resultWeapons ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: LD_VAR 0 5
8005: ST_TO_ADDR
// end ;
8006: LD_VAR 0 3
8010: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8011: LD_INT 0
8013: PPUSH
// case tech of tech_AdvMet :
8014: LD_VAR 0 1
8018: PUSH
8019: LD_INT 34
8021: DOUBLE
8022: EQUAL
8023: IFTRUE 8027
8025: GO 8055
8027: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8028: LD_ADDR_VAR 0 3
8032: PUSH
8033: LD_INT 6
8035: PUSH
8036: LD_STRING 
8038: PUSH
8039: LD_INT 46
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: LD_VAR 0 2
8051: ARRAY
8052: ST_TO_ADDR
8053: GO 8344
8055: LD_INT 71
8057: DOUBLE
8058: EQUAL
8059: IFTRUE 8063
8061: GO 8091
8063: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_STRING 
8071: PUSH
8072: LD_STRING 
8074: PUSH
8075: LD_INT 47
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: LIST
8082: PUSH
8083: LD_VAR 0 2
8087: ARRAY
8088: ST_TO_ADDR
8089: GO 8344
8091: LD_INT 70
8093: DOUBLE
8094: EQUAL
8095: IFTRUE 8099
8097: GO 8127
8099: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: LD_STRING 
8107: PUSH
8108: LD_INT 26
8110: PUSH
8111: LD_STRING 
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: LD_VAR 0 2
8123: ARRAY
8124: ST_TO_ADDR
8125: GO 8344
8127: LD_INT 69
8129: DOUBLE
8130: EQUAL
8131: IFTRUE 8135
8133: GO 8163
8135: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8136: LD_ADDR_VAR 0 3
8140: PUSH
8141: LD_INT 4
8143: PUSH
8144: LD_INT 25
8146: PUSH
8147: LD_INT 43
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_VAR 0 2
8159: ARRAY
8160: ST_TO_ADDR
8161: GO 8344
8163: LD_INT 39
8165: DOUBLE
8166: EQUAL
8167: IFTRUE 8171
8169: GO 8199
8171: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8172: LD_ADDR_VAR 0 3
8176: PUSH
8177: LD_INT 5
8179: PUSH
8180: LD_INT 27
8182: PUSH
8183: LD_INT 44
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: ST_TO_ADDR
8197: GO 8344
8199: LD_INT 31
8201: DOUBLE
8202: EQUAL
8203: IFTRUE 8207
8205: GO 8235
8207: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8208: LD_ADDR_VAR 0 3
8212: PUSH
8213: LD_STRING 
8215: PUSH
8216: LD_STRING 
8218: PUSH
8219: LD_INT 49
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: LIST
8226: PUSH
8227: LD_VAR 0 2
8231: ARRAY
8232: ST_TO_ADDR
8233: GO 8344
8235: LD_INT 14
8237: DOUBLE
8238: EQUAL
8239: IFTRUE 8243
8241: GO 8271
8243: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_INT 10
8251: PUSH
8252: LD_STRING 
8254: PUSH
8255: LD_STRING 
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_VAR 0 2
8267: ARRAY
8268: ST_TO_ADDR
8269: GO 8344
8271: LD_INT 10
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8307
8279: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_INT 9
8287: PUSH
8288: LD_STRING 
8290: PUSH
8291: LD_STRING 
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: PUSH
8299: LD_VAR 0 2
8303: ARRAY
8304: ST_TO_ADDR
8305: GO 8344
8307: LD_INT 40
8309: DOUBLE
8310: EQUAL
8311: IFTRUE 8315
8313: GO 8343
8315: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8316: LD_ADDR_VAR 0 3
8320: PUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 28
8326: PUSH
8327: LD_INT 45
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PUSH
8335: LD_VAR 0 2
8339: ARRAY
8340: ST_TO_ADDR
8341: GO 8344
8343: POP
// end ;
8344: LD_VAR 0 3
8348: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8349: LD_INT 0
8351: PPUSH
8352: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8353: LD_ADDR_VAR 0 4
8357: PUSH
8358: LD_VAR 0 2
8362: PPUSH
8363: CALL_OW 254
8367: PUSH
8368: LD_INT 3
8370: MINUS
8371: ST_TO_ADDR
// if dir < 0 then
8372: LD_VAR 0 4
8376: PUSH
8377: LD_INT 0
8379: LESS
8380: IFFALSE 8396
// dir := 6 + dir ;
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: LD_INT 6
8389: PUSH
8390: LD_VAR 0 4
8394: PLUS
8395: ST_TO_ADDR
// SetDir ( un , dir ) ;
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_VAR 0 4
8405: PPUSH
8406: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8410: LD_VAR 0 1
8414: PPUSH
8415: LD_VAR 0 2
8419: PPUSH
8420: CALL_OW 52
// result = un ;
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_VAR 0 1
8433: ST_TO_ADDR
// end ;
8434: LD_VAR 0 3
8438: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
8443: PPUSH
// uc_side := GetSide ( b ) ;
8444: LD_ADDR_OWVAR 20
8448: PUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: CALL_OW 255
8458: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8459: LD_ADDR_OWVAR 21
8463: PUSH
8464: LD_VAR 0 2
8468: PPUSH
8469: CALL_OW 248
8473: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8474: LD_INT 0
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 380
// un = CreateHuman ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: CALL_OW 44
8498: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8499: LD_ADDR_VAR 0 5
8503: PUSH
8504: LD_VAR 0 2
8508: PPUSH
8509: CALL_OW 254
8513: PUSH
8514: LD_INT 3
8516: MINUS
8517: ST_TO_ADDR
// if dir < 0 then
8518: LD_VAR 0 5
8522: PUSH
8523: LD_INT 0
8525: LESS
8526: IFFALSE 8542
// dir := 6 + dir ;
8528: LD_ADDR_VAR 0 5
8532: PUSH
8533: LD_INT 6
8535: PUSH
8536: LD_VAR 0 5
8540: PLUS
8541: ST_TO_ADDR
// SetDir ( un , dir ) ;
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_VAR 0 5
8551: PPUSH
8552: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8556: LD_VAR 0 4
8560: PPUSH
8561: LD_VAR 0 2
8565: PPUSH
8566: CALL_OW 52
// result = un ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_VAR 0 4
8579: ST_TO_ADDR
// end ;
8580: LD_VAR 0 3
8584: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8585: LD_INT 0
8587: PPUSH
8588: PPUSH
8589: PPUSH
8590: PPUSH
8591: PPUSH
// for building in buildings do
8592: LD_ADDR_VAR 0 5
8596: PUSH
8597: LD_VAR 0 2
8601: PUSH
8602: FOR_IN
8603: IFFALSE 8695
// begin x = GetX ( building ) ;
8605: LD_ADDR_VAR 0 6
8609: PUSH
8610: LD_VAR 0 5
8614: PPUSH
8615: CALL_OW 250
8619: ST_TO_ADDR
// y = GetY ( building ) ;
8620: LD_ADDR_VAR 0 7
8624: PUSH
8625: LD_VAR 0 5
8629: PPUSH
8630: CALL_OW 251
8634: ST_TO_ADDR
// dir = GetDir ( building ) ;
8635: LD_ADDR_VAR 0 8
8639: PUSH
8640: LD_VAR 0 5
8644: PPUSH
8645: CALL_OW 254
8649: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 5
8659: PPUSH
8660: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8664: LD_VAR 0 1
8668: PPUSH
8669: LD_VAR 0 3
8673: PPUSH
8674: LD_VAR 0 6
8678: PPUSH
8679: LD_VAR 0 7
8683: PPUSH
8684: LD_VAR 0 8
8688: PPUSH
8689: CALL_OW 205
// end ;
8693: GO 8602
8695: POP
8696: POP
// end ;
8697: LD_VAR 0 4
8701: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
8707: PPUSH
8708: PPUSH
8709: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8710: LD_ADDR_VAR 0 8
8714: PUSH
8715: LD_INT 48
8717: PUSH
8718: LD_INT 49
8720: PUSH
8721: LD_INT 50
8723: PUSH
8724: LD_INT 20
8726: PUSH
8727: LD_INT 1
8729: PUSH
8730: LD_INT 51
8732: PUSH
8733: LD_INT 52
8735: PUSH
8736: LD_INT 69
8738: PUSH
8739: LD_INT 39
8741: PUSH
8742: LD_INT 34
8744: PUSH
8745: LD_INT 40
8747: PUSH
8748: LD_INT 53
8750: PUSH
8751: LD_INT 71
8753: PUSH
8754: LD_INT 57
8756: PUSH
8757: LD_INT 58
8759: PUSH
8760: LD_INT 44
8762: PUSH
8763: LD_INT 32
8765: PUSH
8766: LD_INT 27
8768: PUSH
8769: LD_INT 23
8771: PUSH
8772: LD_INT 33
8774: PUSH
8775: LD_INT 59
8777: PUSH
8778: LD_INT 54
8780: PUSH
8781: LD_INT 55
8783: PUSH
8784: LD_INT 56
8786: PUSH
8787: LD_INT 63
8789: PUSH
8790: LD_INT 64
8792: PUSH
8793: LD_INT 65
8795: PUSH
8796: LD_INT 30
8798: PUSH
8799: LD_INT 31
8801: PUSH
8802: LD_INT 21
8804: PUSH
8805: LD_INT 22
8807: PUSH
8808: LD_INT 25
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8845: LD_ADDR_VAR 0 9
8849: PUSH
8850: LD_INT 1
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL 29606 0 3
8863: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8864: LD_ADDR_VAR 0 5
8868: PUSH
8869: DOUBLE
8870: LD_INT 1
8872: DEC
8873: ST_TO_ADDR
8874: LD_VAR 0 8
8878: PUSH
8879: FOR_TO
8880: IFFALSE 8956
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8882: LD_VAR 0 8
8886: PUSH
8887: LD_VAR 0 5
8891: ARRAY
8892: PPUSH
8893: LD_VAR 0 1
8897: PPUSH
8898: CALL_OW 321
8902: PUSH
8903: LD_INT 1
8905: EQUAL
8906: PUSH
8907: LD_VAR 0 8
8911: PUSH
8912: LD_VAR 0 5
8916: ARRAY
8917: PPUSH
8918: LD_VAR 0 3
8922: PPUSH
8923: CALL_OW 482
8927: PUSH
8928: LD_INT 1
8930: EQUAL
8931: AND
8932: IFFALSE 8954
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8934: LD_VAR 0 2
8938: PPUSH
8939: LD_VAR 0 8
8943: PUSH
8944: LD_VAR 0 5
8948: ARRAY
8949: PPUSH
8950: CALL_OW 184
8954: GO 8879
8956: POP
8957: POP
// for i = 1 to am_tech_list do
8958: LD_ADDR_VAR 0 5
8962: PUSH
8963: DOUBLE
8964: LD_INT 1
8966: DEC
8967: ST_TO_ADDR
8968: LD_VAR 0 9
8972: PUSH
8973: FOR_TO
8974: IFFALSE 9050
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
8976: LD_VAR 0 9
8980: PUSH
8981: LD_VAR 0 5
8985: ARRAY
8986: PPUSH
8987: LD_VAR 0 1
8991: PPUSH
8992: CALL_OW 321
8996: PUSH
8997: LD_INT 1
8999: EQUAL
9000: PUSH
9001: LD_VAR 0 9
9005: PUSH
9006: LD_VAR 0 5
9010: ARRAY
9011: PPUSH
9012: LD_VAR 0 3
9016: PPUSH
9017: CALL_OW 482
9021: PUSH
9022: LD_INT 1
9024: EQUAL
9025: AND
9026: IFFALSE 9048
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9028: LD_VAR 0 2
9032: PPUSH
9033: LD_VAR 0 9
9037: PUSH
9038: LD_VAR 0 5
9042: ARRAY
9043: PPUSH
9044: CALL_OW 184
9048: GO 8973
9050: POP
9051: POP
// end ;
9052: LD_VAR 0 4
9056: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9057: LD_INT 0
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
9067: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9068: LD_ADDR_VAR 0 3
9072: PUSH
9073: LD_INT 22
9075: PUSH
9076: LD_INT 6
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 21
9085: PUSH
9086: LD_INT 3
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 6
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: LIST
9107: PPUSH
9108: CALL_OW 69
9112: PUSH
9113: LD_INT 1
9115: ARRAY
9116: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9117: LD_ADDR_VAR 0 4
9121: PUSH
9122: LD_INT 22
9124: PUSH
9125: LD_INT 6
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 21
9134: PUSH
9135: LD_INT 3
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: LD_INT 30
9144: PUSH
9145: LD_INT 3
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 69
9161: PUSH
9162: LD_INT 1
9164: ARRAY
9165: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9166: LD_ADDR_VAR 0 9
9170: PUSH
9171: LD_VAR 0 9
9175: PUSH
9176: LD_EXP 59
9180: ADD
9181: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9182: LD_ADDR_VAR 0 9
9186: PUSH
9187: LD_VAR 0 9
9191: PUSH
9192: LD_EXP 77
9196: ADD
9197: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9198: LD_ADDR_VAR 0 9
9202: PUSH
9203: LD_VAR 0 9
9207: PUSH
9208: LD_EXP 69
9212: ADD
9213: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9214: LD_ADDR_VAR 0 8
9218: PUSH
9219: LD_INT 18
9221: PPUSH
9222: LD_INT 22
9224: PUSH
9225: LD_INT 6
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 21
9234: PUSH
9235: LD_INT 1
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: LD_INT 60
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: LIST
9259: PPUSH
9260: CALL_OW 70
9264: PUSH
9265: LD_VAR 0 9
9269: DIFF
9270: ST_TO_ADDR
// if not canTakeUnits then
9271: LD_VAR 0 8
9275: NOT
9276: IFFALSE 9309
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9278: LD_ADDR_EXP 79
9282: PUSH
9283: LD_EXP 79
9287: PPUSH
9288: LD_INT 4
9290: PPUSH
9291: LD_EXP 79
9295: PUSH
9296: LD_INT 3
9298: ARRAY
9299: PUSH
9300: LD_INT 2
9302: PLUS
9303: PPUSH
9304: CALL_OW 1
9308: ST_TO_ADDR
// if canTakeUnits > 2 then
9309: LD_VAR 0 8
9313: PUSH
9314: LD_INT 2
9316: GREATER
9317: IFFALSE 9387
// begin for i := 1 to rand ( 1 , 2 ) do
9319: LD_ADDR_VAR 0 2
9323: PUSH
9324: DOUBLE
9325: LD_INT 1
9327: DEC
9328: ST_TO_ADDR
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 2
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: FOR_TO
9341: IFFALSE 9383
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9343: LD_VAR 0 8
9347: PUSH
9348: LD_VAR 0 2
9352: ARRAY
9353: PPUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9363: LD_VAR 0 8
9367: PUSH
9368: LD_VAR 0 2
9372: ARRAY
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 183
// end ;
9381: GO 9340
9383: POP
9384: POP
// end else
9385: GO 9455
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9387: LD_ADDR_VAR 0 2
9391: PUSH
9392: DOUBLE
9393: LD_INT 1
9395: DEC
9396: ST_TO_ADDR
9397: LD_INT 1
9399: PPUSH
9400: LD_VAR 0 8
9404: PPUSH
9405: CALL_OW 12
9409: PUSH
9410: FOR_TO
9411: IFFALSE 9453
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9413: LD_VAR 0 8
9417: PUSH
9418: LD_VAR 0 2
9422: ARRAY
9423: PPUSH
9424: LD_VAR 0 3
9428: PPUSH
9429: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9433: LD_VAR 0 8
9437: PUSH
9438: LD_VAR 0 2
9442: ARRAY
9443: PPUSH
9444: LD_INT 4
9446: PPUSH
9447: CALL_OW 183
// end ;
9451: GO 9410
9453: POP
9454: POP
// end ; wait ( 0 0$01 ) ;
9455: LD_INT 35
9457: PPUSH
9458: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9462: LD_ADDR_VAR 0 8
9466: PUSH
9467: LD_INT 18
9469: PPUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 6
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 21
9482: PUSH
9483: LD_INT 1
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: LD_INT 60
9495: PUSH
9496: EMPTY
9497: LIST
9498: PUSH
9499: EMPTY
9500: LIST
9501: LIST
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 70
9512: PUSH
9513: LD_VAR 0 9
9517: DIFF
9518: ST_TO_ADDR
// pom = 6 ;
9519: LD_ADDR_VAR 0 7
9523: PUSH
9524: LD_INT 6
9526: ST_TO_ADDR
// if canTakeUnits then
9527: LD_VAR 0 8
9531: IFFALSE 9648
// for i = 1 to canTakeUnits do
9533: LD_ADDR_VAR 0 2
9537: PUSH
9538: DOUBLE
9539: LD_INT 1
9541: DEC
9542: ST_TO_ADDR
9543: LD_VAR 0 8
9547: PUSH
9548: FOR_TO
9549: IFFALSE 9646
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9551: LD_VAR 0 8
9555: PUSH
9556: LD_VAR 0 2
9560: ARRAY
9561: PPUSH
9562: CALL_OW 257
9566: PUSH
9567: LD_INT 3
9569: NONEQUAL
9570: IFFALSE 9610
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9572: LD_VAR 0 8
9576: PUSH
9577: LD_VAR 0 2
9581: ARRAY
9582: PPUSH
9583: LD_VAR 0 4
9587: PPUSH
9588: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9592: LD_VAR 0 8
9596: PUSH
9597: LD_VAR 0 2
9601: ARRAY
9602: PPUSH
9603: LD_INT 3
9605: PPUSH
9606: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9610: LD_VAR 0 8
9614: PUSH
9615: LD_VAR 0 2
9619: ARRAY
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL_OW 120
// pom = pom - 1 ;
9630: LD_ADDR_VAR 0 7
9634: PUSH
9635: LD_VAR 0 7
9639: PUSH
9640: LD_INT 1
9642: MINUS
9643: ST_TO_ADDR
// end ;
9644: GO 9548
9646: POP
9647: POP
// if pom > 0 then
9648: LD_VAR 0 7
9652: PUSH
9653: LD_INT 0
9655: GREATER
9656: IFFALSE 9681
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9658: LD_ADDR_EXP 79
9662: PUSH
9663: LD_EXP 79
9667: PPUSH
9668: LD_INT 3
9670: PPUSH
9671: LD_VAR 0 7
9675: PPUSH
9676: CALL_OW 1
9680: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9681: LD_INT 35
9683: PPUSH
9684: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9688: LD_ADDR_VAR 0 5
9692: PUSH
9693: LD_INT 22
9695: PUSH
9696: LD_INT 6
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 3
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 30
9715: PUSH
9716: LD_INT 32
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 3
9725: PUSH
9726: LD_INT 59
9728: PUSH
9729: EMPTY
9730: LIST
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: PPUSH
9742: CALL_OW 69
9746: PUSH
9747: FOR_IN
9748: IFFALSE 9994
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9750: LD_ADDR_VAR 0 8
9754: PUSH
9755: LD_INT 18
9757: PPUSH
9758: LD_INT 22
9760: PUSH
9761: LD_INT 6
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 21
9770: PUSH
9771: LD_INT 1
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 3
9780: PUSH
9781: LD_INT 60
9783: PUSH
9784: EMPTY
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 70
9800: PUSH
9801: LD_VAR 0 9
9805: DIFF
9806: ST_TO_ADDR
// if canTakeUnits then
9807: LD_VAR 0 8
9811: IFFALSE 9945
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9813: LD_VAR 0 8
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: CALL_OW 257
9826: PUSH
9827: LD_INT 1
9829: NONEQUAL
9830: IFFALSE 9925
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9832: LD_VAR 0 8
9836: PUSH
9837: LD_INT 1
9839: ARRAY
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 6
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 21
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 5
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 69
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PPUSH
9885: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9889: LD_VAR 0 8
9893: PUSH
9894: LD_INT 1
9896: ARRAY
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9905: LD_VAR 0 8
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: CALL_OW 182
// wait ( 0 0$1 ) ;
9918: LD_INT 35
9920: PPUSH
9921: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9925: LD_VAR 0 8
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: PPUSH
9934: LD_VAR 0 5
9938: PPUSH
9939: CALL_OW 120
// end else
9943: GO 9992
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9945: LD_ADDR_EXP 71
9949: PUSH
9950: LD_EXP 71
9954: PUSH
9955: LD_VAR 0 5
9959: ADD
9960: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9961: LD_ADDR_EXP 79
9965: PUSH
9966: LD_EXP 79
9970: PPUSH
9971: LD_INT 1
9973: PPUSH
9974: LD_EXP 79
9978: PUSH
9979: LD_INT 1
9981: ARRAY
9982: PUSH
9983: LD_INT 1
9985: PLUS
9986: PPUSH
9987: CALL_OW 1
9991: ST_TO_ADDR
// end ; end ;
9992: GO 9747
9994: POP
9995: POP
// end ;
9996: LD_VAR 0 1
10000: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10001: LD_INT 0
10003: PPUSH
10004: PPUSH
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
10013: PPUSH
10014: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10015: LD_VAR 0 1
10019: PPUSH
10020: CALL_OW 302
10024: NOT
10025: PUSH
10026: LD_VAR 0 4
10030: PUSH
10031: LD_INT 1
10033: EQUAL
10034: OR
10035: PUSH
10036: LD_VAR 0 2
10040: PPUSH
10041: LD_VAR 0 3
10045: PPUSH
10046: CALL_OW 488
10050: NOT
10051: OR
10052: PUSH
10053: LD_VAR 0 1
10057: PPUSH
10058: LD_VAR 0 2
10062: PPUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: CALL_OW 297
10072: PUSH
10073: LD_VAR 0 4
10077: GREATEREQUAL
10078: OR
10079: PUSH
10080: LD_VAR 0 5
10084: PUSH
10085: LD_INT 1
10087: PUSH
10088: LD_INT 0
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: IN
10095: NOT
10096: OR
10097: IFFALSE 10101
// exit ;
10099: GO 11658
// attempts = 0 ;
10101: LD_ADDR_VAR 0 17
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10109: LD_ADDR_VAR 0 7
10113: PUSH
10114: EMPTY
10115: ST_TO_ADDR
// list_coords = [ ] ;
10116: LD_ADDR_VAR 0 8
10120: PUSH
10121: EMPTY
10122: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10123: LD_ADDR_VAR 0 9
10127: PUSH
10128: LD_VAR 0 2
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: LD_VAR 0 1
10142: PPUSH
10143: CALL_OW 250
10147: PPUSH
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 251
10157: PPUSH
10158: CALL 11663 0 4
10162: ST_TO_ADDR
// if attempts = 0 then
10163: LD_VAR 0 17
10167: PUSH
10168: LD_INT 0
10170: EQUAL
10171: IFFALSE 10279
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10173: LD_ADDR_VAR 0 10
10177: PUSH
10178: LD_VAR 0 9
10182: PUSH
10183: LD_VAR 0 9
10187: PUSH
10188: LD_INT 1
10190: PLUS
10191: PUSH
10192: LD_VAR 0 9
10196: PUSH
10197: LD_INT 1
10199: MINUS
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10206: LD_VAR 0 10
10210: PUSH
10211: LD_INT 2
10213: ARRAY
10214: PUSH
10215: LD_INT 6
10217: EQUAL
10218: IFFALSE 10241
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10220: LD_ADDR_VAR 0 10
10224: PUSH
10225: LD_VAR 0 10
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: LD_INT 0
10235: PPUSH
10236: CALL_OW 1
10240: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10241: LD_VAR 0 10
10245: PUSH
10246: LD_INT 3
10248: ARRAY
10249: PUSH
10250: LD_INT 1
10252: NEG
10253: EQUAL
10254: IFFALSE 10277
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10256: LD_ADDR_VAR 0 10
10260: PUSH
10261: LD_VAR 0 10
10265: PPUSH
10266: LD_INT 3
10268: PPUSH
10269: LD_INT 5
10271: PPUSH
10272: CALL_OW 1
10276: ST_TO_ADDR
// end else
10277: GO 10316
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10279: LD_ADDR_VAR 0 10
10283: PUSH
10284: LD_INT 0
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: LD_INT 4
10298: PUSH
10299: LD_INT 5
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: LD_VAR 0 9
10314: DIFF
10315: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10316: LD_ADDR_VAR 0 14
10320: PUSH
10321: DOUBLE
10322: LD_INT 1
10324: DEC
10325: ST_TO_ADDR
10326: LD_VAR 0 10
10330: PUSH
10331: LD_INT 0
10333: PLUS
10334: PUSH
10335: FOR_TO
10336: IFFALSE 10658
// case dir_list [ c ] of 0 :
10338: LD_VAR 0 10
10342: PUSH
10343: LD_VAR 0 14
10347: ARRAY
10348: PUSH
10349: LD_INT 0
10351: DOUBLE
10352: EQUAL
10353: IFTRUE 10357
10355: GO 10398
10357: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10358: LD_ADDR_VAR 0 8
10362: PUSH
10363: LD_VAR 0 8
10367: PPUSH
10368: LD_INT 1
10370: PPUSH
10371: LD_VAR 0 2
10375: PUSH
10376: LD_VAR 0 3
10380: PUSH
10381: LD_VAR 0 4
10385: MINUS
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PPUSH
10391: CALL_OW 2
10395: ST_TO_ADDR
10396: GO 10656
10398: LD_INT 1
10400: DOUBLE
10401: EQUAL
10402: IFTRUE 10406
10404: GO 10447
10406: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10407: LD_ADDR_VAR 0 8
10411: PUSH
10412: LD_VAR 0 8
10416: PPUSH
10417: LD_INT 1
10419: PPUSH
10420: LD_VAR 0 2
10424: PUSH
10425: LD_VAR 0 4
10429: PLUS
10430: PUSH
10431: LD_VAR 0 3
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PPUSH
10440: CALL_OW 2
10444: ST_TO_ADDR
10445: GO 10656
10447: LD_INT 2
10449: DOUBLE
10450: EQUAL
10451: IFTRUE 10455
10453: GO 10502
10455: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10456: LD_ADDR_VAR 0 8
10460: PUSH
10461: LD_VAR 0 8
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: LD_VAR 0 2
10473: PUSH
10474: LD_VAR 0 4
10478: PLUS
10479: PUSH
10480: LD_VAR 0 3
10484: PUSH
10485: LD_VAR 0 4
10489: PLUS
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PPUSH
10495: CALL_OW 2
10499: ST_TO_ADDR
10500: GO 10656
10502: LD_INT 3
10504: DOUBLE
10505: EQUAL
10506: IFTRUE 10510
10508: GO 10551
10510: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10511: LD_ADDR_VAR 0 8
10515: PUSH
10516: LD_VAR 0 8
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: LD_VAR 0 2
10528: PUSH
10529: LD_VAR 0 3
10533: PUSH
10534: LD_VAR 0 4
10538: PLUS
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PPUSH
10544: CALL_OW 2
10548: ST_TO_ADDR
10549: GO 10656
10551: LD_INT 4
10553: DOUBLE
10554: EQUAL
10555: IFTRUE 10559
10557: GO 10600
10559: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10560: LD_ADDR_VAR 0 8
10564: PUSH
10565: LD_VAR 0 8
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: LD_VAR 0 2
10577: PUSH
10578: LD_VAR 0 4
10582: MINUS
10583: PUSH
10584: LD_VAR 0 3
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PPUSH
10593: CALL_OW 2
10597: ST_TO_ADDR
10598: GO 10656
10600: LD_INT 5
10602: DOUBLE
10603: EQUAL
10604: IFTRUE 10608
10606: GO 10655
10608: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10609: LD_ADDR_VAR 0 8
10613: PUSH
10614: LD_VAR 0 8
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: LD_VAR 0 2
10626: PUSH
10627: LD_VAR 0 4
10631: MINUS
10632: PUSH
10633: LD_VAR 0 3
10637: PUSH
10638: LD_VAR 0 4
10642: MINUS
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PPUSH
10648: CALL_OW 2
10652: ST_TO_ADDR
10653: GO 10656
10655: POP
10656: GO 10335
10658: POP
10659: POP
// if dist < 30 then
10660: LD_VAR 0 4
10664: PUSH
10665: LD_INT 30
10667: LESS
10668: IFFALSE 10680
// c = 1 else
10670: LD_ADDR_VAR 0 14
10674: PUSH
10675: LD_INT 1
10677: ST_TO_ADDR
10678: GO 10688
// c = 2 ;
10680: LD_ADDR_VAR 0 14
10684: PUSH
10685: LD_INT 2
10687: ST_TO_ADDR
// b = 1 ;
10688: LD_ADDR_VAR 0 11
10692: PUSH
10693: LD_INT 1
10695: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10696: LD_VAR 0 11
10700: PUSH
10701: LD_VAR 0 4
10705: PUSH
10706: LD_INT 1
10708: MINUS
10709: LESSEQUAL
10710: IFFALSE 11138
// begin if 0 in dir_list and 1 in dir_list then
10712: LD_INT 0
10714: PUSH
10715: LD_VAR 0 10
10719: IN
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: LD_VAR 0 10
10728: IN
10729: AND
10730: IFFALSE 10782
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10732: LD_ADDR_VAR 0 8
10736: PUSH
10737: LD_VAR 0 8
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_VAR 0 11
10754: PLUS
10755: PUSH
10756: LD_VAR 0 3
10760: PUSH
10761: LD_VAR 0 4
10765: MINUS
10766: PUSH
10767: LD_VAR 0 11
10771: PLUS
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 2
10781: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10782: LD_INT 1
10784: PUSH
10785: LD_VAR 0 10
10789: IN
10790: PUSH
10791: LD_INT 2
10793: PUSH
10794: LD_VAR 0 10
10798: IN
10799: AND
10800: IFFALSE 10846
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10802: LD_ADDR_VAR 0 8
10806: PUSH
10807: LD_VAR 0 8
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_VAR 0 2
10819: PUSH
10820: LD_VAR 0 4
10824: PLUS
10825: PUSH
10826: LD_VAR 0 3
10830: PUSH
10831: LD_VAR 0 11
10835: PLUS
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PPUSH
10841: CALL_OW 2
10845: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10846: LD_INT 2
10848: PUSH
10849: LD_VAR 0 10
10853: IN
10854: PUSH
10855: LD_INT 3
10857: PUSH
10858: LD_VAR 0 10
10862: IN
10863: AND
10864: IFFALSE 10916
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10866: LD_ADDR_VAR 0 8
10870: PUSH
10871: LD_VAR 0 8
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: LD_VAR 0 2
10883: PUSH
10884: LD_VAR 0 4
10888: PLUS
10889: PUSH
10890: LD_VAR 0 11
10894: MINUS
10895: PUSH
10896: LD_VAR 0 3
10900: PUSH
10901: LD_VAR 0 4
10905: PLUS
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 2
10915: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10916: LD_INT 3
10918: PUSH
10919: LD_VAR 0 10
10923: IN
10924: PUSH
10925: LD_INT 4
10927: PUSH
10928: LD_VAR 0 10
10932: IN
10933: AND
10934: IFFALSE 10986
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10936: LD_ADDR_VAR 0 8
10940: PUSH
10941: LD_VAR 0 8
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: LD_VAR 0 2
10953: PUSH
10954: LD_VAR 0 11
10958: MINUS
10959: PUSH
10960: LD_VAR 0 3
10964: PUSH
10965: LD_VAR 0 4
10969: PLUS
10970: PUSH
10971: LD_VAR 0 11
10975: MINUS
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 2
10985: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10986: LD_INT 4
10988: PUSH
10989: LD_VAR 0 10
10993: IN
10994: PUSH
10995: LD_INT 5
10997: PUSH
10998: LD_VAR 0 10
11002: IN
11003: AND
11004: IFFALSE 11050
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11006: LD_ADDR_VAR 0 8
11010: PUSH
11011: LD_VAR 0 8
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 4
11028: MINUS
11029: PUSH
11030: LD_VAR 0 3
11034: PUSH
11035: LD_VAR 0 11
11039: MINUS
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PPUSH
11045: CALL_OW 2
11049: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11050: LD_INT 5
11052: PUSH
11053: LD_VAR 0 10
11057: IN
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_VAR 0 10
11066: IN
11067: AND
11068: IFFALSE 11120
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11070: LD_ADDR_VAR 0 8
11074: PUSH
11075: LD_VAR 0 8
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: LD_VAR 0 2
11087: PUSH
11088: LD_VAR 0 4
11092: MINUS
11093: PUSH
11094: LD_VAR 0 11
11098: PLUS
11099: PUSH
11100: LD_VAR 0 3
11104: PUSH
11105: LD_VAR 0 4
11109: MINUS
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PPUSH
11115: CALL_OW 2
11119: ST_TO_ADDR
// b = b + c end ;
11120: LD_ADDR_VAR 0 11
11124: PUSH
11125: LD_VAR 0 11
11129: PUSH
11130: LD_VAR 0 14
11134: PLUS
11135: ST_TO_ADDR
11136: GO 10696
// if list_coords = 0 then
11138: LD_VAR 0 8
11142: PUSH
11143: LD_INT 0
11145: EQUAL
11146: IFFALSE 11150
// exit ;
11148: GO 11658
// repeat min_dist = 5000 ;
11150: LD_ADDR_VAR 0 12
11154: PUSH
11155: LD_INT 5000
11157: ST_TO_ADDR
// for b in list_coords do
11158: LD_ADDR_VAR 0 11
11162: PUSH
11163: LD_VAR 0 8
11167: PUSH
11168: FOR_IN
11169: IFFALSE 11228
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11171: LD_ADDR_VAR 0 13
11175: PUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: LD_VAR 0 11
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: PPUSH
11190: LD_VAR 0 11
11194: PUSH
11195: LD_INT 2
11197: ARRAY
11198: PPUSH
11199: CALL_OW 297
11203: ST_TO_ADDR
// if temp_dist < min_dist then
11204: LD_VAR 0 13
11208: PUSH
11209: LD_VAR 0 12
11213: LESS
11214: IFFALSE 11226
// min_dist = temp_dist ;
11216: LD_ADDR_VAR 0 12
11220: PUSH
11221: LD_VAR 0 13
11225: ST_TO_ADDR
// end ;
11226: GO 11168
11228: POP
11229: POP
// c = 0 ;
11230: LD_ADDR_VAR 0 14
11234: PUSH
11235: LD_INT 0
11237: ST_TO_ADDR
// repeat c = c + 1 ;
11238: LD_ADDR_VAR 0 14
11242: PUSH
11243: LD_VAR 0 14
11247: PUSH
11248: LD_INT 1
11250: PLUS
11251: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_VAR 0 8
11261: PUSH
11262: LD_VAR 0 14
11266: ARRAY
11267: PUSH
11268: LD_INT 1
11270: ARRAY
11271: PPUSH
11272: LD_VAR 0 8
11276: PUSH
11277: LD_VAR 0 14
11281: ARRAY
11282: PUSH
11283: LD_INT 2
11285: ARRAY
11286: PPUSH
11287: CALL_OW 297
11291: PUSH
11292: LD_VAR 0 12
11296: EQUAL
11297: IFFALSE 11362
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11299: LD_ADDR_VAR 0 7
11303: PUSH
11304: LD_VAR 0 7
11308: PPUSH
11309: LD_INT 1
11311: PPUSH
11312: LD_VAR 0 8
11316: PUSH
11317: LD_VAR 0 14
11321: ARRAY
11322: PPUSH
11323: CALL_OW 2
11327: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11328: LD_ADDR_VAR 0 8
11332: PUSH
11333: LD_VAR 0 8
11337: PPUSH
11338: LD_VAR 0 14
11342: PPUSH
11343: CALL_OW 3
11347: ST_TO_ADDR
// c = c - 1 ;
11348: LD_ADDR_VAR 0 14
11352: PUSH
11353: LD_VAR 0 14
11357: PUSH
11358: LD_INT 1
11360: MINUS
11361: ST_TO_ADDR
// end ; until c = list_coords ;
11362: LD_VAR 0 14
11366: PUSH
11367: LD_VAR 0 8
11371: EQUAL
11372: IFFALSE 11238
// c = 0 ;
11374: LD_ADDR_VAR 0 14
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// if list_nearest > 0 then
11382: LD_VAR 0 7
11386: PUSH
11387: LD_INT 0
11389: GREATER
11390: IFFALSE 11532
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11392: LD_ADDR_VAR 0 15
11396: PUSH
11397: LD_INT 1
11399: PPUSH
11400: LD_VAR 0 7
11404: PPUSH
11405: CALL_OW 12
11409: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11410: LD_ADDR_VAR 0 16
11414: PUSH
11415: LD_VAR 0 7
11419: PUSH
11420: LD_VAR 0 15
11424: ARRAY
11425: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11426: LD_VAR 0 16
11430: PUSH
11431: LD_INT 1
11433: ARRAY
11434: PPUSH
11435: LD_VAR 0 16
11439: PUSH
11440: LD_INT 2
11442: ARRAY
11443: PPUSH
11444: CALL_OW 488
11448: PUSH
11449: LD_INT 0
11451: GREATER
11452: PUSH
11453: LD_VAR 0 16
11457: PUSH
11458: LD_INT 1
11460: ARRAY
11461: PPUSH
11462: LD_VAR 0 16
11466: PUSH
11467: LD_INT 2
11469: ARRAY
11470: PPUSH
11471: CALL_OW 428
11475: PUSH
11476: LD_INT 0
11478: EQUAL
11479: AND
11480: IFFALSE 11492
// c = 1 else
11482: LD_ADDR_VAR 0 14
11486: PUSH
11487: LD_INT 1
11489: ST_TO_ADDR
11490: GO 11512
// list_nearest = Delete ( list_nearest , rand_num ) ;
11492: LD_ADDR_VAR 0 7
11496: PUSH
11497: LD_VAR 0 7
11501: PPUSH
11502: LD_VAR 0 15
11506: PPUSH
11507: CALL_OW 3
11511: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11512: LD_VAR 0 14
11516: PUSH
11517: LD_INT 1
11519: EQUAL
11520: PUSH
11521: LD_VAR 0 7
11525: PUSH
11526: LD_INT 0
11528: EQUAL
11529: OR
11530: IFFALSE 11392
// end ; until c = 1 or list_coords = 0 ;
11532: LD_VAR 0 14
11536: PUSH
11537: LD_INT 1
11539: EQUAL
11540: PUSH
11541: LD_VAR 0 8
11545: PUSH
11546: LD_INT 0
11548: EQUAL
11549: OR
11550: IFFALSE 11150
// attempts = attempts + 1 ;
11552: LD_ADDR_VAR 0 17
11556: PUSH
11557: LD_VAR 0 17
11561: PUSH
11562: LD_INT 1
11564: PLUS
11565: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11566: LD_VAR 0 14
11570: PUSH
11571: LD_INT 1
11573: EQUAL
11574: PUSH
11575: LD_VAR 0 17
11579: PUSH
11580: LD_INT 1
11582: GREATER
11583: OR
11584: IFFALSE 10109
// if c = 1 then
11586: LD_VAR 0 14
11590: PUSH
11591: LD_INT 1
11593: EQUAL
11594: IFFALSE 11658
// if add then
11596: LD_VAR 0 5
11600: IFFALSE 11631
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_VAR 0 16
11611: PUSH
11612: LD_INT 1
11614: ARRAY
11615: PPUSH
11616: LD_VAR 0 16
11620: PUSH
11621: LD_INT 2
11623: ARRAY
11624: PPUSH
11625: CALL_OW 171
11629: GO 11658
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11631: LD_VAR 0 1
11635: PPUSH
11636: LD_VAR 0 16
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 16
11649: PUSH
11650: LD_INT 2
11652: ARRAY
11653: PPUSH
11654: CALL_OW 111
// end ;
11658: LD_VAR 0 6
11662: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11663: LD_INT 0
11665: PPUSH
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11671: LD_VAR 0 1
11675: PPUSH
11676: LD_VAR 0 2
11680: PPUSH
11681: CALL_OW 488
11685: NOT
11686: PUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: LD_VAR 0 4
11696: PPUSH
11697: CALL_OW 488
11701: NOT
11702: OR
11703: IFFALSE 11716
// begin result = - 1 ;
11705: LD_ADDR_VAR 0 5
11709: PUSH
11710: LD_INT 1
11712: NEG
11713: ST_TO_ADDR
// exit ;
11714: GO 11876
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11716: LD_ADDR_VAR 0 6
11720: PUSH
11721: LD_VAR 0 1
11725: PPUSH
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_VAR 0 4
11740: PPUSH
11741: CALL_OW 298
11745: ST_TO_ADDR
// dist_2 = 99999 ;
11746: LD_ADDR_VAR 0 7
11750: PUSH
11751: LD_INT 99999
11753: ST_TO_ADDR
// for b = 0 to 5 do
11754: LD_ADDR_VAR 0 8
11758: PUSH
11759: DOUBLE
11760: LD_INT 0
11762: DEC
11763: ST_TO_ADDR
11764: LD_INT 5
11766: PUSH
11767: FOR_TO
11768: IFFALSE 11864
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11770: LD_ADDR_VAR 0 9
11774: PUSH
11775: LD_VAR 0 1
11779: PPUSH
11780: LD_VAR 0 8
11784: PPUSH
11785: LD_VAR 0 6
11789: PPUSH
11790: CALL_OW 272
11794: PPUSH
11795: LD_VAR 0 2
11799: PPUSH
11800: LD_VAR 0 8
11804: PPUSH
11805: LD_VAR 0 6
11809: PPUSH
11810: CALL_OW 273
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_VAR 0 4
11824: PPUSH
11825: CALL_OW 298
11829: ST_TO_ADDR
// if temp_dist < dist_2 then
11830: LD_VAR 0 9
11834: PUSH
11835: LD_VAR 0 7
11839: LESS
11840: IFFALSE 11862
// begin dist_2 = temp_dist ;
11842: LD_ADDR_VAR 0 7
11846: PUSH
11847: LD_VAR 0 9
11851: ST_TO_ADDR
// dir = b ;
11852: LD_ADDR_VAR 0 10
11856: PUSH
11857: LD_VAR 0 8
11861: ST_TO_ADDR
// end ; end ;
11862: GO 11767
11864: POP
11865: POP
// result = dir ;
11866: LD_ADDR_VAR 0 5
11870: PUSH
11871: LD_VAR 0 10
11875: ST_TO_ADDR
// end ; end_of_file
11876: LD_VAR 0 5
11880: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
11881: LD_INT 0
11883: PPUSH
11884: PPUSH
11885: PPUSH
11886: PPUSH
11887: PPUSH
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
11902: PPUSH
11903: PPUSH
11904: PPUSH
11905: PPUSH
11906: PPUSH
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
// personel = [ ] ;
11911: LD_ADDR_VAR 0 18
11915: PUSH
11916: EMPTY
11917: ST_TO_ADDR
// vehicles = [ ] ;
11918: LD_ADDR_VAR 0 24
11922: PUSH
11923: EMPTY
11924: ST_TO_ADDR
// for unit in basePersonel do
11925: LD_ADDR_VAR 0 17
11929: PUSH
11930: LD_VAR 0 3
11934: PUSH
11935: FOR_IN
11936: IFFALSE 11984
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11938: LD_ADDR_VAR 0 18
11942: PUSH
11943: LD_VAR 0 18
11947: PUSH
11948: LD_VAR 0 17
11952: PUSH
11953: LD_VAR 0 17
11957: PPUSH
11958: CALL_OW 310
11962: PUSH
11963: LD_VAR 0 17
11967: PPUSH
11968: CALL_OW 302
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: ADD
11981: ST_TO_ADDR
11982: GO 11935
11984: POP
11985: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
11986: LD_ADDR_VAR 0 23
11990: PUSH
11991: LD_VAR 0 4
11995: PPUSH
11996: LD_INT 22
11998: PUSH
11999: LD_VAR 0 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 21
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 50
12020: PUSH
12021: EMPTY
12022: LIST
12023: PUSH
12024: LD_INT 3
12026: PUSH
12027: LD_INT 2
12029: PUSH
12030: LD_INT 34
12032: PUSH
12033: LD_INT 12
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 34
12042: PUSH
12043: LD_INT 51
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 34
12052: PUSH
12053: LD_INT 32
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: PPUSH
12076: CALL_OW 70
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12130
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12084: LD_ADDR_VAR 0 24
12088: PUSH
12089: LD_VAR 0 24
12093: PUSH
12094: LD_VAR 0 23
12098: PUSH
12099: LD_VAR 0 23
12103: PPUSH
12104: CALL_OW 310
12108: PUSH
12109: LD_VAR 0 23
12113: PPUSH
12114: CALL_OW 302
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: ADD
12127: ST_TO_ADDR
12128: GO 12081
12130: POP
12131: POP
// repeat soldiers = [ ] ;
12132: LD_ADDR_VAR 0 19
12136: PUSH
12137: EMPTY
12138: ST_TO_ADDR
// engineers = [ ] ;
12139: LD_ADDR_VAR 0 20
12143: PUSH
12144: EMPTY
12145: ST_TO_ADDR
// mechanics = [ ] ;
12146: LD_ADDR_VAR 0 21
12150: PUSH
12151: EMPTY
12152: ST_TO_ADDR
// scientists = [ ] ;
12153: LD_ADDR_VAR 0 22
12157: PUSH
12158: EMPTY
12159: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12160: LD_ADDR_VAR 0 29
12164: PUSH
12165: LD_VAR 0 4
12169: PPUSH
12170: LD_INT 22
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 3
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 50
12194: PUSH
12195: EMPTY
12196: LIST
12197: PUSH
12198: LD_INT 2
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 70
12236: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12237: LD_ADDR_VAR 0 30
12241: PUSH
12242: LD_VAR 0 4
12246: PPUSH
12247: LD_INT 22
12249: PUSH
12250: LD_VAR 0 1
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 21
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 50
12271: PUSH
12272: EMPTY
12273: LIST
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 30
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 30
12290: PUSH
12291: LD_INT 3
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: PPUSH
12309: CALL_OW 70
12313: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12314: LD_ADDR_VAR 0 31
12318: PUSH
12319: LD_VAR 0 4
12323: PPUSH
12324: LD_INT 22
12326: PUSH
12327: LD_VAR 0 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 3
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 50
12348: PUSH
12349: EMPTY
12350: LIST
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: LD_INT 30
12357: PUSH
12358: LD_INT 6
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 30
12367: PUSH
12368: LD_INT 7
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 8
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: PPUSH
12397: CALL_OW 70
12401: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12402: LD_ADDR_VAR 0 32
12406: PUSH
12407: LD_VAR 0 4
12411: PPUSH
12412: LD_INT 22
12414: PUSH
12415: LD_VAR 0 1
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 21
12426: PUSH
12427: LD_INT 3
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 50
12436: PUSH
12437: EMPTY
12438: LIST
12439: PUSH
12440: LD_INT 2
12442: PUSH
12443: LD_INT 30
12445: PUSH
12446: LD_INT 31
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 30
12455: PUSH
12456: LD_INT 32
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 70
12478: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12479: LD_ADDR_VAR 0 33
12483: PUSH
12484: LD_VAR 0 4
12488: PPUSH
12489: LD_INT 22
12491: PUSH
12492: LD_VAR 0 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 21
12503: PUSH
12504: LD_INT 3
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 50
12513: PUSH
12514: EMPTY
12515: LIST
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: LD_INT 30
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 30
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 70
12555: ST_TO_ADDR
// for i := 1 to personel do
12556: LD_ADDR_VAR 0 13
12560: PUSH
12561: DOUBLE
12562: LD_INT 1
12564: DEC
12565: ST_TO_ADDR
12566: LD_VAR 0 18
12570: PUSH
12571: FOR_TO
12572: IFFALSE 12782
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12574: LD_VAR 0 18
12578: PUSH
12579: LD_VAR 0 13
12583: ARRAY
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 256
12593: PUSH
12594: LD_INT 1000
12596: EQUAL
12597: IFFALSE 12639
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12599: LD_ADDR_VAR 0 18
12603: PUSH
12604: LD_VAR 0 18
12608: PPUSH
12609: LD_VAR 0 13
12613: PUSH
12614: LD_VAR 0 18
12618: PUSH
12619: LD_VAR 0 13
12623: ARRAY
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL 34489 0 3
12636: ST_TO_ADDR
// end else
12637: GO 12730
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12639: LD_VAR 0 18
12643: PUSH
12644: LD_VAR 0 13
12648: ARRAY
12649: PUSH
12650: LD_INT 1
12652: ARRAY
12653: PPUSH
12654: CALL_OW 256
12658: PUSH
12659: LD_INT 950
12661: LESSEQUAL
12662: IFFALSE 12730
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12664: LD_ADDR_VAR 0 18
12668: PUSH
12669: LD_VAR 0 18
12673: PPUSH
12674: LD_VAR 0 13
12678: PUSH
12679: LD_VAR 0 18
12683: PUSH
12684: LD_VAR 0 13
12688: ARRAY
12689: PUSH
12690: LD_INT 1
12692: MINUS
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: LD_INT 0
12700: PPUSH
12701: CALL 34489 0 3
12705: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12706: LD_VAR 0 18
12710: PUSH
12711: LD_VAR 0 13
12715: ARRAY
12716: PUSH
12717: LD_INT 1
12719: ARRAY
12720: PPUSH
12721: LD_VAR 0 5
12725: PPUSH
12726: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12730: LD_VAR 0 18
12734: PUSH
12735: LD_VAR 0 13
12739: ARRAY
12740: PUSH
12741: LD_INT 1
12743: ARRAY
12744: PPUSH
12745: CALL_OW 256
12749: PUSH
12750: LD_INT 250
12752: LESS
12753: IFFALSE 12780
// personel = personel diff [ personel [ i ] ] ;
12755: LD_ADDR_VAR 0 18
12759: PUSH
12760: LD_VAR 0 18
12764: PUSH
12765: LD_VAR 0 18
12769: PUSH
12770: LD_VAR 0 13
12774: ARRAY
12775: PUSH
12776: EMPTY
12777: LIST
12778: DIFF
12779: ST_TO_ADDR
// end ;
12780: GO 12571
12782: POP
12783: POP
// for i := 1 to vehicles do
12784: LD_ADDR_VAR 0 13
12788: PUSH
12789: DOUBLE
12790: LD_INT 1
12792: DEC
12793: ST_TO_ADDR
12794: LD_VAR 0 24
12798: PUSH
12799: FOR_TO
12800: IFFALSE 13139
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12802: LD_VAR 0 24
12806: PUSH
12807: LD_VAR 0 13
12811: ARRAY
12812: PUSH
12813: LD_INT 1
12815: ARRAY
12816: PPUSH
12817: CALL_OW 256
12821: PUSH
12822: LD_INT 1000
12824: EQUAL
12825: IFFALSE 13000
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12827: LD_VAR 0 24
12831: PUSH
12832: LD_VAR 0 13
12836: ARRAY
12837: PUSH
12838: LD_INT 1
12840: ARRAY
12841: PPUSH
12842: CALL_OW 263
12846: PUSH
12847: LD_INT 1
12849: EQUAL
12850: IFFALSE 12908
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12852: LD_VAR 0 24
12856: PUSH
12857: LD_VAR 0 13
12861: ARRAY
12862: PUSH
12863: LD_INT 2
12865: ARRAY
12866: PPUSH
12867: CALL_OW 310
12871: NOT
12872: IFFALSE 12908
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12874: LD_VAR 0 24
12878: PUSH
12879: LD_VAR 0 13
12883: ARRAY
12884: PUSH
12885: LD_INT 2
12887: ARRAY
12888: PPUSH
12889: LD_VAR 0 24
12893: PUSH
12894: LD_VAR 0 13
12898: ARRAY
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PPUSH
12904: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
12908: LD_VAR 0 24
12912: PUSH
12913: LD_VAR 0 10
12917: LESS
12918: IFFALSE 12960
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
12920: LD_ADDR_VAR 0 24
12924: PUSH
12925: LD_VAR 0 24
12929: PPUSH
12930: LD_VAR 0 13
12934: PUSH
12935: LD_VAR 0 24
12939: PUSH
12940: LD_VAR 0 13
12944: ARRAY
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PPUSH
12950: LD_INT 1
12952: PPUSH
12953: CALL 34489 0 3
12957: ST_TO_ADDR
12958: GO 12998
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12960: LD_ADDR_VAR 0 24
12964: PUSH
12965: LD_VAR 0 24
12969: PPUSH
12970: LD_VAR 0 13
12974: PUSH
12975: LD_VAR 0 24
12979: PUSH
12980: LD_VAR 0 13
12984: ARRAY
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PPUSH
12990: LD_INT 2
12992: PPUSH
12993: CALL 34489 0 3
12997: ST_TO_ADDR
// end else
12998: GO 13087
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13000: LD_VAR 0 24
13004: PUSH
13005: LD_VAR 0 13
13009: ARRAY
13010: PUSH
13011: LD_INT 1
13013: ARRAY
13014: PPUSH
13015: CALL_OW 256
13019: PUSH
13020: LD_INT 650
13022: LESSEQUAL
13023: IFFALSE 13087
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13025: LD_ADDR_VAR 0 24
13029: PUSH
13030: LD_VAR 0 24
13034: PPUSH
13035: LD_VAR 0 13
13039: PUSH
13040: LD_VAR 0 24
13044: PUSH
13045: LD_VAR 0 13
13049: ARRAY
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PPUSH
13055: LD_INT 0
13057: PPUSH
13058: CALL 34489 0 3
13062: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13063: LD_VAR 0 24
13067: PUSH
13068: LD_VAR 0 13
13072: ARRAY
13073: PUSH
13074: LD_INT 1
13076: ARRAY
13077: PPUSH
13078: LD_VAR 0 6
13082: PPUSH
13083: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13087: LD_VAR 0 24
13091: PUSH
13092: LD_VAR 0 13
13096: ARRAY
13097: PUSH
13098: LD_INT 1
13100: ARRAY
13101: PPUSH
13102: CALL_OW 256
13106: PUSH
13107: LD_INT 250
13109: LESS
13110: IFFALSE 13137
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13112: LD_ADDR_VAR 0 24
13116: PUSH
13117: LD_VAR 0 24
13121: PUSH
13122: LD_VAR 0 24
13126: PUSH
13127: LD_VAR 0 13
13131: ARRAY
13132: PUSH
13133: EMPTY
13134: LIST
13135: DIFF
13136: ST_TO_ADDR
// end ;
13137: GO 12799
13139: POP
13140: POP
// for i := 1 to personel do
13141: LD_ADDR_VAR 0 13
13145: PUSH
13146: DOUBLE
13147: LD_INT 1
13149: DEC
13150: ST_TO_ADDR
13151: LD_VAR 0 18
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13198
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13159: LD_ADDR_VAR 0 19
13163: PUSH
13164: LD_VAR 0 19
13168: PUSH
13169: LD_VAR 0 18
13173: PUSH
13174: LD_VAR 0 13
13178: ARRAY
13179: PPUSH
13180: LD_INT 25
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 72
13194: ADD
13195: ST_TO_ADDR
13196: GO 13156
13198: POP
13199: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13200: LD_VAR 0 19
13204: PUSH
13205: LD_VAR 0 32
13209: PPUSH
13210: LD_INT 3
13212: PUSH
13213: LD_INT 59
13215: PUSH
13216: EMPTY
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PPUSH
13223: CALL_OW 72
13227: AND
13228: IFFALSE 13516
// begin for i := 1 to personel do
13230: LD_ADDR_VAR 0 13
13234: PUSH
13235: DOUBLE
13236: LD_INT 1
13238: DEC
13239: ST_TO_ADDR
13240: LD_VAR 0 18
13244: PUSH
13245: FOR_TO
13246: IFFALSE 13512
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13248: LD_VAR 0 18
13252: PUSH
13253: LD_VAR 0 13
13257: ARRAY
13258: PUSH
13259: LD_INT 1
13261: ARRAY
13262: PPUSH
13263: CALL_OW 257
13267: PUSH
13268: LD_INT 1
13270: EQUAL
13271: PUSH
13272: LD_VAR 0 18
13276: PUSH
13277: LD_VAR 0 13
13281: ARRAY
13282: PUSH
13283: LD_INT 3
13285: ARRAY
13286: PUSH
13287: LD_INT 1
13289: EQUAL
13290: AND
13291: IFFALSE 13510
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13293: LD_VAR 0 18
13297: PUSH
13298: LD_VAR 0 13
13302: ARRAY
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PPUSH
13308: CALL_OW 437
13312: IFFALSE 13413
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13314: LD_VAR 0 18
13318: PUSH
13319: LD_VAR 0 13
13323: ARRAY
13324: PUSH
13325: LD_INT 1
13327: ARRAY
13328: PPUSH
13329: CALL_OW 437
13333: PUSH
13334: LD_INT 1
13336: ARRAY
13337: PUSH
13338: LD_INT 1
13340: ARRAY
13341: PUSH
13342: LD_STRING e
13344: EQUAL
13345: PUSH
13346: LD_VAR 0 18
13350: PUSH
13351: LD_VAR 0 13
13355: ARRAY
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 437
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PUSH
13370: LD_INT 4
13372: ARRAY
13373: PPUSH
13374: CALL_OW 266
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: LD_INT 5
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: IN
13389: AND
13390: IFFALSE 13413
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13392: LD_VAR 0 18
13396: PUSH
13397: LD_VAR 0 13
13401: ARRAY
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: EMPTY
13408: PPUSH
13409: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13413: LD_ADDR_VAR 0 36
13417: PUSH
13418: LD_VAR 0 32
13422: PPUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 59
13428: PUSH
13429: EMPTY
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PPUSH
13436: CALL_OW 72
13440: PUSH
13441: FOR_IN
13442: IFFALSE 13508
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13444: LD_VAR 0 18
13448: PUSH
13449: LD_VAR 0 13
13453: ARRAY
13454: PUSH
13455: LD_INT 1
13457: ARRAY
13458: PPUSH
13459: CALL_OW 310
13463: PPUSH
13464: CALL_OW 266
13468: PUSH
13469: LD_INT 31
13471: PUSH
13472: LD_INT 32
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: IN
13479: NOT
13480: IFFALSE 13506
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13482: LD_VAR 0 18
13486: PUSH
13487: LD_VAR 0 13
13491: ARRAY
13492: PUSH
13493: LD_INT 1
13495: ARRAY
13496: PPUSH
13497: LD_VAR 0 36
13501: PPUSH
13502: CALL_OW 120
13506: GO 13441
13508: POP
13509: POP
// end ; end ;
13510: GO 13245
13512: POP
13513: POP
// end else
13514: GO 13731
// if soldiers and barracks then
13516: LD_VAR 0 19
13520: PUSH
13521: LD_VAR 0 33
13525: AND
13526: IFFALSE 13731
// for i := 1 to personel do
13528: LD_ADDR_VAR 0 13
13532: PUSH
13533: DOUBLE
13534: LD_INT 1
13536: DEC
13537: ST_TO_ADDR
13538: LD_VAR 0 18
13542: PUSH
13543: FOR_TO
13544: IFFALSE 13729
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13546: LD_VAR 0 18
13550: PUSH
13551: LD_VAR 0 13
13555: ARRAY
13556: PUSH
13557: LD_INT 1
13559: ARRAY
13560: PPUSH
13561: CALL_OW 257
13565: PUSH
13566: LD_INT 1
13568: EQUAL
13569: PUSH
13570: LD_VAR 0 18
13574: PUSH
13575: LD_VAR 0 13
13579: ARRAY
13580: PUSH
13581: LD_INT 3
13583: ARRAY
13584: PUSH
13585: LD_INT 1
13587: EQUAL
13588: AND
13589: PUSH
13590: LD_VAR 0 18
13594: PUSH
13595: LD_VAR 0 13
13599: ARRAY
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_INT 56
13607: PUSH
13608: EMPTY
13609: LIST
13610: PPUSH
13611: CALL_OW 72
13615: AND
13616: IFFALSE 13727
// begin if not personel [ i ] [ 2 ] then
13618: LD_VAR 0 18
13622: PUSH
13623: LD_VAR 0 13
13627: ARRAY
13628: PUSH
13629: LD_INT 2
13631: ARRAY
13632: NOT
13633: IFFALSE 13693
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13635: LD_ADDR_VAR 0 18
13639: PUSH
13640: LD_VAR 0 18
13644: PPUSH
13645: LD_VAR 0 13
13649: PUSH
13650: LD_VAR 0 18
13654: PUSH
13655: LD_VAR 0 13
13659: ARRAY
13660: PUSH
13661: LD_INT 1
13663: MINUS
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PPUSH
13669: LD_VAR 0 33
13673: PUSH
13674: LD_INT 1
13676: PPUSH
13677: LD_VAR 0 33
13681: PPUSH
13682: CALL_OW 12
13686: ARRAY
13687: PPUSH
13688: CALL 34489 0 3
13692: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13693: LD_VAR 0 18
13697: PUSH
13698: LD_VAR 0 13
13702: ARRAY
13703: PUSH
13704: LD_INT 1
13706: ARRAY
13707: PPUSH
13708: LD_VAR 0 18
13712: PUSH
13713: LD_VAR 0 13
13717: ARRAY
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: CALL_OW 120
// end ;
13727: GO 13543
13729: POP
13730: POP
// for i := 1 to personel do
13731: LD_ADDR_VAR 0 13
13735: PUSH
13736: DOUBLE
13737: LD_INT 1
13739: DEC
13740: ST_TO_ADDR
13741: LD_VAR 0 18
13745: PUSH
13746: FOR_TO
13747: IFFALSE 13788
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13749: LD_ADDR_VAR 0 20
13753: PUSH
13754: LD_VAR 0 20
13758: PUSH
13759: LD_VAR 0 18
13763: PUSH
13764: LD_VAR 0 13
13768: ARRAY
13769: PPUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 2
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 72
13784: ADD
13785: ST_TO_ADDR
13786: GO 13746
13788: POP
13789: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13790: LD_VAR 0 20
13794: PUSH
13795: LD_VAR 0 4
13799: PPUSH
13800: LD_INT 22
13802: PUSH
13803: LD_VAR 0 1
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 21
13814: PUSH
13815: LD_INT 3
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: LD_INT 24
13827: PUSH
13828: LD_INT 1000
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 70
13848: AND
13849: IFFALSE 14125
// begin for i := 1 to personel do
13851: LD_ADDR_VAR 0 13
13855: PUSH
13856: DOUBLE
13857: LD_INT 1
13859: DEC
13860: ST_TO_ADDR
13861: LD_VAR 0 18
13865: PUSH
13866: FOR_TO
13867: IFFALSE 14121
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13869: LD_VAR 0 18
13873: PUSH
13874: LD_VAR 0 13
13878: ARRAY
13879: PUSH
13880: LD_INT 1
13882: ARRAY
13883: PPUSH
13884: CALL_OW 257
13888: PUSH
13889: LD_INT 2
13891: EQUAL
13892: PUSH
13893: LD_VAR 0 18
13897: PUSH
13898: LD_VAR 0 13
13902: ARRAY
13903: PUSH
13904: LD_INT 3
13906: ARRAY
13907: PUSH
13908: LD_INT 1
13910: EQUAL
13911: AND
13912: IFFALSE 14119
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13914: LD_VAR 0 18
13918: PUSH
13919: LD_VAR 0 13
13923: ARRAY
13924: PUSH
13925: LD_INT 1
13927: ARRAY
13928: PPUSH
13929: CALL_OW 437
13933: IFFALSE 13989
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13935: LD_VAR 0 18
13939: PUSH
13940: LD_VAR 0 13
13944: ARRAY
13945: PUSH
13946: LD_INT 1
13948: ARRAY
13949: PPUSH
13950: CALL_OW 437
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: PUSH
13959: LD_INT 1
13961: ARRAY
13962: PUSH
13963: LD_STRING e
13965: EQUAL
13966: IFFALSE 13989
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13968: LD_VAR 0 18
13972: PUSH
13973: LD_VAR 0 13
13977: ARRAY
13978: PUSH
13979: LD_INT 1
13981: ARRAY
13982: PPUSH
13983: EMPTY
13984: PPUSH
13985: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13989: LD_VAR 0 18
13993: PUSH
13994: LD_VAR 0 13
13998: ARRAY
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: CALL_OW 310
14008: IFFALSE 14029
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14010: LD_VAR 0 18
14014: PUSH
14015: LD_VAR 0 13
14019: ARRAY
14020: PUSH
14021: LD_INT 1
14023: ARRAY
14024: PPUSH
14025: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14029: LD_ADDR_VAR 0 34
14033: PUSH
14034: LD_VAR 0 4
14038: PPUSH
14039: LD_INT 22
14041: PUSH
14042: LD_VAR 0 1
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 21
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: LD_INT 24
14066: PUSH
14067: LD_INT 1000
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 70
14087: PUSH
14088: FOR_IN
14089: IFFALSE 14117
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14091: LD_VAR 0 18
14095: PUSH
14096: LD_VAR 0 13
14100: ARRAY
14101: PUSH
14102: LD_INT 1
14104: ARRAY
14105: PPUSH
14106: LD_VAR 0 34
14110: PPUSH
14111: CALL_OW 190
14115: GO 14088
14117: POP
14118: POP
// end ;
14119: GO 13866
14121: POP
14122: POP
// end else
14123: GO 14387
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14125: LD_VAR 0 20
14129: PUSH
14130: LD_VAR 0 20
14134: PPUSH
14135: LD_INT 56
14137: PUSH
14138: EMPTY
14139: LIST
14140: PPUSH
14141: CALL_OW 72
14145: AND
14146: PUSH
14147: LD_VAR 0 29
14151: AND
14152: IFFALSE 14387
// for i := 1 to personel do
14154: LD_ADDR_VAR 0 13
14158: PUSH
14159: DOUBLE
14160: LD_INT 1
14162: DEC
14163: ST_TO_ADDR
14164: LD_VAR 0 18
14168: PUSH
14169: FOR_TO
14170: IFFALSE 14385
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14172: LD_VAR 0 18
14176: PUSH
14177: LD_VAR 0 13
14181: ARRAY
14182: PUSH
14183: LD_INT 1
14185: ARRAY
14186: PPUSH
14187: CALL_OW 257
14191: PUSH
14192: LD_INT 2
14194: EQUAL
14195: PUSH
14196: LD_VAR 0 18
14200: PUSH
14201: LD_VAR 0 13
14205: ARRAY
14206: PUSH
14207: LD_INT 3
14209: ARRAY
14210: PUSH
14211: LD_INT 1
14213: EQUAL
14214: AND
14215: IFFALSE 14383
// begin if not personel [ i ] [ 2 ] then
14217: LD_VAR 0 18
14221: PUSH
14222: LD_VAR 0 13
14226: ARRAY
14227: PUSH
14228: LD_INT 2
14230: ARRAY
14231: NOT
14232: IFFALSE 14349
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14234: LD_ADDR_VAR 0 18
14238: PUSH
14239: LD_VAR 0 18
14243: PPUSH
14244: LD_VAR 0 13
14248: PUSH
14249: LD_VAR 0 18
14253: PUSH
14254: LD_VAR 0 13
14258: ARRAY
14259: PUSH
14260: LD_INT 1
14262: MINUS
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: LD_VAR 0 4
14272: PPUSH
14273: LD_INT 22
14275: PUSH
14276: LD_VAR 0 1
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 21
14287: PUSH
14288: LD_INT 3
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 50
14297: PUSH
14298: EMPTY
14299: LIST
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: LD_INT 30
14306: PUSH
14307: LD_INT 0
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 30
14316: PUSH
14317: LD_INT 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 70
14339: PUSH
14340: LD_INT 1
14342: ARRAY
14343: PPUSH
14344: CALL 34489 0 3
14348: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14349: LD_VAR 0 18
14353: PUSH
14354: LD_VAR 0 13
14358: ARRAY
14359: PUSH
14360: LD_INT 1
14362: ARRAY
14363: PPUSH
14364: LD_VAR 0 18
14368: PUSH
14369: LD_VAR 0 13
14373: ARRAY
14374: PUSH
14375: LD_INT 2
14377: ARRAY
14378: PPUSH
14379: CALL_OW 120
// end ; end ;
14383: GO 14169
14385: POP
14386: POP
// for i := 1 to personel do
14387: LD_ADDR_VAR 0 13
14391: PUSH
14392: DOUBLE
14393: LD_INT 1
14395: DEC
14396: ST_TO_ADDR
14397: LD_VAR 0 18
14401: PUSH
14402: FOR_TO
14403: IFFALSE 14444
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14405: LD_ADDR_VAR 0 21
14409: PUSH
14410: LD_VAR 0 21
14414: PUSH
14415: LD_VAR 0 18
14419: PUSH
14420: LD_VAR 0 13
14424: ARRAY
14425: PPUSH
14426: LD_INT 25
14428: PUSH
14429: LD_INT 3
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PPUSH
14436: CALL_OW 72
14440: ADD
14441: ST_TO_ADDR
14442: GO 14402
14444: POP
14445: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14446: LD_VAR 0 21
14450: PUSH
14451: LD_VAR 0 4
14455: PPUSH
14456: LD_INT 22
14458: PUSH
14459: LD_VAR 0 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 21
14470: PUSH
14471: LD_INT 2
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PUSH
14478: LD_INT 3
14480: PUSH
14481: LD_INT 24
14483: PUSH
14484: LD_INT 1000
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 70
14504: AND
14505: IFFALSE 15109
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14507: LD_ADDR_VAR 0 35
14511: PUSH
14512: LD_VAR 0 4
14516: PPUSH
14517: LD_INT 22
14519: PUSH
14520: LD_VAR 0 1
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 21
14531: PUSH
14532: LD_INT 2
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 3
14541: PUSH
14542: LD_INT 24
14544: PUSH
14545: LD_INT 1000
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: PPUSH
14561: CALL_OW 70
14565: PUSH
14566: FOR_IN
14567: IFFALSE 15105
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14569: LD_VAR 0 35
14573: PPUSH
14574: LD_VAR 0 6
14578: PPUSH
14579: CALL_OW 299
14583: PUSH
14584: LD_INT 5
14586: LESS
14587: IFFALSE 14882
// begin for i := 1 to vehicles do
14589: LD_ADDR_VAR 0 13
14593: PUSH
14594: DOUBLE
14595: LD_INT 1
14597: DEC
14598: ST_TO_ADDR
14599: LD_VAR 0 24
14603: PUSH
14604: FOR_TO
14605: IFFALSE 14674
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14607: LD_VAR 0 24
14611: PUSH
14612: LD_VAR 0 13
14616: ARRAY
14617: PUSH
14618: LD_INT 1
14620: ARRAY
14621: PUSH
14622: LD_VAR 0 35
14626: EQUAL
14627: IFFALSE 14648
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14629: LD_VAR 0 24
14633: PUSH
14634: LD_VAR 0 13
14638: ARRAY
14639: PUSH
14640: LD_INT 2
14642: ARRAY
14643: PPUSH
14644: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14648: LD_VAR 0 24
14652: PUSH
14653: LD_VAR 0 13
14657: ARRAY
14658: PUSH
14659: LD_INT 2
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 35
14667: PPUSH
14668: CALL_OW 189
// end ;
14672: GO 14604
14674: POP
14675: POP
// for i := 1 to personel do
14676: LD_ADDR_VAR 0 13
14680: PUSH
14681: DOUBLE
14682: LD_INT 1
14684: DEC
14685: ST_TO_ADDR
14686: LD_VAR 0 18
14690: PUSH
14691: FOR_TO
14692: IFFALSE 14880
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14694: LD_VAR 0 18
14698: PUSH
14699: LD_VAR 0 13
14703: ARRAY
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PPUSH
14709: CALL_OW 257
14713: PUSH
14714: LD_INT 3
14716: EQUAL
14717: PUSH
14718: LD_VAR 0 18
14722: PUSH
14723: LD_VAR 0 13
14727: ARRAY
14728: PUSH
14729: LD_INT 3
14731: ARRAY
14732: PUSH
14733: LD_INT 1
14735: EQUAL
14736: AND
14737: IFFALSE 14878
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14739: LD_VAR 0 18
14743: PUSH
14744: LD_VAR 0 13
14748: ARRAY
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: PPUSH
14754: CALL_OW 437
14758: IFFALSE 14814
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14760: LD_VAR 0 18
14764: PUSH
14765: LD_VAR 0 13
14769: ARRAY
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: CALL_OW 437
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PUSH
14784: LD_INT 1
14786: ARRAY
14787: PUSH
14788: LD_STRING e
14790: EQUAL
14791: IFFALSE 14814
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14793: LD_VAR 0 18
14797: PUSH
14798: LD_VAR 0 13
14802: ARRAY
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: EMPTY
14809: PPUSH
14810: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14814: LD_VAR 0 18
14818: PUSH
14819: LD_VAR 0 13
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PPUSH
14829: CALL_OW 310
14833: IFFALSE 14854
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14835: LD_VAR 0 18
14839: PUSH
14840: LD_VAR 0 13
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PPUSH
14850: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14854: LD_VAR 0 18
14858: PUSH
14859: LD_VAR 0 13
14863: ARRAY
14864: PUSH
14865: LD_INT 1
14867: ARRAY
14868: PPUSH
14869: LD_VAR 0 35
14873: PPUSH
14874: CALL_OW 189
// end ;
14878: GO 14691
14880: POP
14881: POP
// end ; if GetLives ( damageUnit ) < 250 then
14882: LD_VAR 0 35
14886: PPUSH
14887: CALL_OW 256
14891: PUSH
14892: LD_INT 250
14894: LESS
14895: IFFALSE 15103
// for i := 1 to personel do
14897: LD_ADDR_VAR 0 13
14901: PUSH
14902: DOUBLE
14903: LD_INT 1
14905: DEC
14906: ST_TO_ADDR
14907: LD_VAR 0 18
14911: PUSH
14912: FOR_TO
14913: IFFALSE 15101
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14915: LD_VAR 0 18
14919: PUSH
14920: LD_VAR 0 13
14924: ARRAY
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 257
14934: PUSH
14935: LD_INT 3
14937: EQUAL
14938: PUSH
14939: LD_VAR 0 18
14943: PUSH
14944: LD_VAR 0 13
14948: ARRAY
14949: PUSH
14950: LD_INT 3
14952: ARRAY
14953: PUSH
14954: LD_INT 1
14956: EQUAL
14957: AND
14958: IFFALSE 15099
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14960: LD_VAR 0 18
14964: PUSH
14965: LD_VAR 0 13
14969: ARRAY
14970: PUSH
14971: LD_INT 1
14973: ARRAY
14974: PPUSH
14975: CALL_OW 437
14979: IFFALSE 15035
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14981: LD_VAR 0 18
14985: PUSH
14986: LD_VAR 0 13
14990: ARRAY
14991: PUSH
14992: LD_INT 1
14994: ARRAY
14995: PPUSH
14996: CALL_OW 437
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PUSH
15005: LD_INT 1
15007: ARRAY
15008: PUSH
15009: LD_STRING e
15011: EQUAL
15012: IFFALSE 15035
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15014: LD_VAR 0 18
15018: PUSH
15019: LD_VAR 0 13
15023: ARRAY
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: PPUSH
15029: EMPTY
15030: PPUSH
15031: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15035: LD_VAR 0 18
15039: PUSH
15040: LD_VAR 0 13
15044: ARRAY
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: CALL_OW 310
15054: IFFALSE 15075
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15056: LD_VAR 0 18
15060: PUSH
15061: LD_VAR 0 13
15065: ARRAY
15066: PUSH
15067: LD_INT 1
15069: ARRAY
15070: PPUSH
15071: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15075: LD_VAR 0 18
15079: PUSH
15080: LD_VAR 0 13
15084: ARRAY
15085: PUSH
15086: LD_INT 1
15088: ARRAY
15089: PPUSH
15090: LD_VAR 0 35
15094: PPUSH
15095: CALL_OW 189
// end ;
15099: GO 14912
15101: POP
15102: POP
// end ;
15103: GO 14566
15105: POP
15106: POP
// end else
15107: GO 15314
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15109: LD_VAR 0 21
15113: PUSH
15114: LD_VAR 0 21
15118: PPUSH
15119: LD_INT 56
15121: PUSH
15122: EMPTY
15123: LIST
15124: PPUSH
15125: CALL_OW 72
15129: AND
15130: PUSH
15131: LD_VAR 0 30
15135: AND
15136: IFFALSE 15314
// for i := 1 to personel do
15138: LD_ADDR_VAR 0 13
15142: PUSH
15143: DOUBLE
15144: LD_INT 1
15146: DEC
15147: ST_TO_ADDR
15148: LD_VAR 0 18
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15312
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15156: LD_VAR 0 18
15160: PUSH
15161: LD_VAR 0 13
15165: ARRAY
15166: PUSH
15167: LD_INT 1
15169: ARRAY
15170: PPUSH
15171: CALL_OW 257
15175: PUSH
15176: LD_INT 3
15178: EQUAL
15179: PUSH
15180: LD_VAR 0 18
15184: PUSH
15185: LD_VAR 0 13
15189: ARRAY
15190: PUSH
15191: LD_INT 3
15193: ARRAY
15194: PUSH
15195: LD_INT 1
15197: EQUAL
15198: AND
15199: IFFALSE 15310
// begin if not personel [ i ] [ 2 ] then
15201: LD_VAR 0 18
15205: PUSH
15206: LD_VAR 0 13
15210: ARRAY
15211: PUSH
15212: LD_INT 2
15214: ARRAY
15215: NOT
15216: IFFALSE 15276
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15218: LD_ADDR_VAR 0 18
15222: PUSH
15223: LD_VAR 0 18
15227: PPUSH
15228: LD_VAR 0 13
15232: PUSH
15233: LD_VAR 0 18
15237: PUSH
15238: LD_VAR 0 13
15242: ARRAY
15243: PUSH
15244: LD_INT 1
15246: MINUS
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PPUSH
15252: LD_VAR 0 30
15256: PUSH
15257: LD_INT 1
15259: PPUSH
15260: LD_VAR 0 30
15264: PPUSH
15265: CALL_OW 12
15269: ARRAY
15270: PPUSH
15271: CALL 34489 0 3
15275: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15276: LD_VAR 0 18
15280: PUSH
15281: LD_VAR 0 13
15285: ARRAY
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_VAR 0 18
15295: PUSH
15296: LD_VAR 0 13
15300: ARRAY
15301: PUSH
15302: LD_INT 2
15304: ARRAY
15305: PPUSH
15306: CALL_OW 120
// end ;
15310: GO 15153
15312: POP
15313: POP
// for i := 1 to personel do
15314: LD_ADDR_VAR 0 13
15318: PUSH
15319: DOUBLE
15320: LD_INT 1
15322: DEC
15323: ST_TO_ADDR
15324: LD_VAR 0 18
15328: PUSH
15329: FOR_TO
15330: IFFALSE 15371
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15332: LD_ADDR_VAR 0 22
15336: PUSH
15337: LD_VAR 0 22
15341: PUSH
15342: LD_VAR 0 18
15346: PUSH
15347: LD_VAR 0 13
15351: ARRAY
15352: PPUSH
15353: LD_INT 25
15355: PUSH
15356: LD_INT 4
15358: PUSH
15359: EMPTY
15360: LIST
15361: LIST
15362: PPUSH
15363: CALL_OW 72
15367: ADD
15368: ST_TO_ADDR
15369: GO 15329
15371: POP
15372: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15373: LD_VAR 0 22
15377: PUSH
15378: LD_VAR 0 4
15382: PPUSH
15383: LD_INT 22
15385: PUSH
15386: LD_VAR 0 1
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 3
15407: PUSH
15408: LD_INT 24
15410: PUSH
15411: LD_INT 1000
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: PPUSH
15427: CALL_OW 70
15431: AND
15432: IFFALSE 15949
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15434: LD_ADDR_VAR 0 35
15438: PUSH
15439: LD_VAR 0 4
15443: PPUSH
15444: LD_INT 22
15446: PUSH
15447: LD_VAR 0 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 21
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 3
15468: PUSH
15469: LD_INT 24
15471: PUSH
15472: LD_INT 1000
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: PPUSH
15488: CALL_OW 70
15492: PUSH
15493: FOR_IN
15494: IFFALSE 15945
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15496: LD_VAR 0 35
15500: PPUSH
15501: LD_VAR 0 5
15505: PPUSH
15506: CALL_OW 299
15510: PUSH
15511: LD_INT 5
15513: LESS
15514: IFFALSE 15722
// for i := 1 to personel do
15516: LD_ADDR_VAR 0 13
15520: PUSH
15521: DOUBLE
15522: LD_INT 1
15524: DEC
15525: ST_TO_ADDR
15526: LD_VAR 0 18
15530: PUSH
15531: FOR_TO
15532: IFFALSE 15720
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15534: LD_VAR 0 18
15538: PUSH
15539: LD_VAR 0 13
15543: ARRAY
15544: PUSH
15545: LD_INT 1
15547: ARRAY
15548: PPUSH
15549: CALL_OW 257
15553: PUSH
15554: LD_INT 4
15556: EQUAL
15557: PUSH
15558: LD_VAR 0 18
15562: PUSH
15563: LD_VAR 0 13
15567: ARRAY
15568: PUSH
15569: LD_INT 3
15571: ARRAY
15572: PUSH
15573: LD_INT 1
15575: EQUAL
15576: AND
15577: IFFALSE 15718
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15579: LD_VAR 0 18
15583: PUSH
15584: LD_VAR 0 13
15588: ARRAY
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PPUSH
15594: CALL_OW 437
15598: IFFALSE 15654
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15600: LD_VAR 0 18
15604: PUSH
15605: LD_VAR 0 13
15609: ARRAY
15610: PUSH
15611: LD_INT 1
15613: ARRAY
15614: PPUSH
15615: CALL_OW 437
15619: PUSH
15620: LD_INT 1
15622: ARRAY
15623: PUSH
15624: LD_INT 1
15626: ARRAY
15627: PUSH
15628: LD_STRING e
15630: EQUAL
15631: IFFALSE 15654
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15633: LD_VAR 0 18
15637: PUSH
15638: LD_VAR 0 13
15642: ARRAY
15643: PUSH
15644: LD_INT 1
15646: ARRAY
15647: PPUSH
15648: EMPTY
15649: PPUSH
15650: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15654: LD_VAR 0 18
15658: PUSH
15659: LD_VAR 0 13
15663: ARRAY
15664: PUSH
15665: LD_INT 1
15667: ARRAY
15668: PPUSH
15669: CALL_OW 310
15673: IFFALSE 15694
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15675: LD_VAR 0 18
15679: PUSH
15680: LD_VAR 0 13
15684: ARRAY
15685: PUSH
15686: LD_INT 1
15688: ARRAY
15689: PPUSH
15690: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15694: LD_VAR 0 18
15698: PUSH
15699: LD_VAR 0 13
15703: ARRAY
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: PPUSH
15709: LD_VAR 0 35
15713: PPUSH
15714: CALL_OW 188
// end ;
15718: GO 15531
15720: POP
15721: POP
// if GetLives ( damageUnit ) < 250 then
15722: LD_VAR 0 35
15726: PPUSH
15727: CALL_OW 256
15731: PUSH
15732: LD_INT 250
15734: LESS
15735: IFFALSE 15943
// for i := 1 to personel do
15737: LD_ADDR_VAR 0 13
15741: PUSH
15742: DOUBLE
15743: LD_INT 1
15745: DEC
15746: ST_TO_ADDR
15747: LD_VAR 0 18
15751: PUSH
15752: FOR_TO
15753: IFFALSE 15941
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15755: LD_VAR 0 18
15759: PUSH
15760: LD_VAR 0 13
15764: ARRAY
15765: PUSH
15766: LD_INT 1
15768: ARRAY
15769: PPUSH
15770: CALL_OW 257
15774: PUSH
15775: LD_INT 4
15777: EQUAL
15778: PUSH
15779: LD_VAR 0 18
15783: PUSH
15784: LD_VAR 0 13
15788: ARRAY
15789: PUSH
15790: LD_INT 3
15792: ARRAY
15793: PUSH
15794: LD_INT 1
15796: EQUAL
15797: AND
15798: IFFALSE 15939
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15800: LD_VAR 0 18
15804: PUSH
15805: LD_VAR 0 13
15809: ARRAY
15810: PUSH
15811: LD_INT 1
15813: ARRAY
15814: PPUSH
15815: CALL_OW 437
15819: IFFALSE 15875
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15821: LD_VAR 0 18
15825: PUSH
15826: LD_VAR 0 13
15830: ARRAY
15831: PUSH
15832: LD_INT 1
15834: ARRAY
15835: PPUSH
15836: CALL_OW 437
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: PUSH
15845: LD_INT 1
15847: ARRAY
15848: PUSH
15849: LD_STRING e
15851: EQUAL
15852: IFFALSE 15875
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15854: LD_VAR 0 18
15858: PUSH
15859: LD_VAR 0 13
15863: ARRAY
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: PPUSH
15869: EMPTY
15870: PPUSH
15871: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15875: LD_VAR 0 18
15879: PUSH
15880: LD_VAR 0 13
15884: ARRAY
15885: PUSH
15886: LD_INT 1
15888: ARRAY
15889: PPUSH
15890: CALL_OW 310
15894: IFFALSE 15915
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15896: LD_VAR 0 18
15900: PUSH
15901: LD_VAR 0 13
15905: ARRAY
15906: PUSH
15907: LD_INT 1
15909: ARRAY
15910: PPUSH
15911: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15915: LD_VAR 0 18
15919: PUSH
15920: LD_VAR 0 13
15924: ARRAY
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: PPUSH
15930: LD_VAR 0 35
15934: PPUSH
15935: CALL_OW 188
// end ;
15939: GO 15752
15941: POP
15942: POP
// end ;
15943: GO 15493
15945: POP
15946: POP
// end else
15947: GO 16154
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
15949: LD_VAR 0 22
15953: PUSH
15954: LD_VAR 0 22
15958: PPUSH
15959: LD_INT 56
15961: PUSH
15962: EMPTY
15963: LIST
15964: PPUSH
15965: CALL_OW 72
15969: AND
15970: PUSH
15971: LD_VAR 0 31
15975: AND
15976: IFFALSE 16154
// for i := 1 to personel do
15978: LD_ADDR_VAR 0 13
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_VAR 0 18
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16152
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15996: LD_VAR 0 18
16000: PUSH
16001: LD_VAR 0 13
16005: ARRAY
16006: PUSH
16007: LD_INT 1
16009: ARRAY
16010: PPUSH
16011: CALL_OW 257
16015: PUSH
16016: LD_INT 4
16018: EQUAL
16019: PUSH
16020: LD_VAR 0 18
16024: PUSH
16025: LD_VAR 0 13
16029: ARRAY
16030: PUSH
16031: LD_INT 3
16033: ARRAY
16034: PUSH
16035: LD_INT 1
16037: EQUAL
16038: AND
16039: IFFALSE 16150
// begin if not personel [ i ] [ 2 ] then
16041: LD_VAR 0 18
16045: PUSH
16046: LD_VAR 0 13
16050: ARRAY
16051: PUSH
16052: LD_INT 2
16054: ARRAY
16055: NOT
16056: IFFALSE 16116
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16058: LD_ADDR_VAR 0 18
16062: PUSH
16063: LD_VAR 0 18
16067: PPUSH
16068: LD_VAR 0 13
16072: PUSH
16073: LD_VAR 0 18
16077: PUSH
16078: LD_VAR 0 13
16082: ARRAY
16083: PUSH
16084: LD_INT 1
16086: MINUS
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: LD_VAR 0 31
16096: PUSH
16097: LD_INT 1
16099: PPUSH
16100: LD_VAR 0 31
16104: PPUSH
16105: CALL_OW 12
16109: ARRAY
16110: PPUSH
16111: CALL 34489 0 3
16115: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16116: LD_VAR 0 18
16120: PUSH
16121: LD_VAR 0 13
16125: ARRAY
16126: PUSH
16127: LD_INT 1
16129: ARRAY
16130: PPUSH
16131: LD_VAR 0 18
16135: PUSH
16136: LD_VAR 0 13
16140: ARRAY
16141: PUSH
16142: LD_INT 2
16144: ARRAY
16145: PPUSH
16146: CALL_OW 120
// end ;
16150: GO 15993
16152: POP
16153: POP
// wait ( 0 0$01 ) ;
16154: LD_INT 35
16156: PPUSH
16157: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16161: LD_VAR 0 24
16165: PUSH
16166: LD_VAR 0 8
16170: LESS
16171: PUSH
16172: LD_VAR 0 30
16176: AND
16177: IFFALSE 16427
// begin tmp = vehiclesAmount - vehicles ;
16179: LD_ADDR_VAR 0 15
16183: PUSH
16184: LD_VAR 0 8
16188: PUSH
16189: LD_VAR 0 24
16193: MINUS
16194: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16195: LD_ADDR_VAR 0 27
16199: PUSH
16200: LD_VAR 0 1
16204: PPUSH
16205: LD_VAR 0 2
16209: PPUSH
16210: CALL 7735 0 2
16214: ST_TO_ADDR
// for i := 1 to tmp do
16215: LD_ADDR_VAR 0 13
16219: PUSH
16220: DOUBLE
16221: LD_INT 1
16223: DEC
16224: ST_TO_ADDR
16225: LD_VAR 0 15
16229: PUSH
16230: FOR_TO
16231: IFFALSE 16423
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16233: LD_ADDR_VAR 0 15
16237: PUSH
16238: LD_VAR 0 27
16242: PUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_VAR 0 27
16250: PPUSH
16251: CALL_OW 12
16255: ARRAY
16256: ST_TO_ADDR
// if tmp then
16257: LD_VAR 0 15
16261: IFFALSE 16421
// begin if tmp in [ 34 , 14 , 71 ] then
16263: LD_VAR 0 15
16267: PUSH
16268: LD_INT 34
16270: PUSH
16271: LD_INT 14
16273: PUSH
16274: LD_INT 71
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: IN
16282: IFFALSE 16320
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16284: LD_ADDR_VAR 0 28
16288: PUSH
16289: LD_INT 4
16291: PUSH
16292: EMPTY
16293: LIST
16294: PUSH
16295: LD_INT 14
16297: PUSH
16298: EMPTY
16299: LIST
16300: PUSH
16301: LD_INT 24
16303: PUSH
16304: EMPTY
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: PUSH
16312: LD_VAR 0 2
16316: ARRAY
16317: ST_TO_ADDR
16318: GO 16378
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16320: LD_ADDR_VAR 0 28
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: LD_INT 4
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 13
16341: PUSH
16342: LD_INT 14
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 21
16351: PUSH
16352: LD_INT 23
16354: PUSH
16355: LD_INT 24
16357: PUSH
16358: LD_INT 22
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: LIST
16371: PUSH
16372: LD_VAR 0 2
16376: ARRAY
16377: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16378: LD_VAR 0 30
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_VAR 0 28
16391: PUSH
16392: LD_INT 1
16394: PPUSH
16395: LD_VAR 0 28
16399: PPUSH
16400: CALL_OW 12
16404: ARRAY
16405: PPUSH
16406: LD_INT 1
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: LD_VAR 0 15
16416: PPUSH
16417: CALL_OW 185
// end ; end ;
16421: GO 16230
16423: POP
16424: POP
// end else
16425: GO 16440
// ComCancel ( factory [ 1 ] ) ;
16427: LD_VAR 0 30
16431: PUSH
16432: LD_INT 1
16434: ARRAY
16435: PPUSH
16436: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16440: LD_ADDR_VAR 0 23
16444: PUSH
16445: LD_VAR 0 4
16449: PPUSH
16450: LD_INT 22
16452: PUSH
16453: LD_VAR 0 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 21
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PPUSH
16476: CALL_OW 70
16480: PUSH
16481: FOR_IN
16482: IFFALSE 16652
// begin vehicleInList = false ;
16484: LD_ADDR_VAR 0 25
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// for i := 1 to vehicles do
16492: LD_ADDR_VAR 0 13
16496: PUSH
16497: DOUBLE
16498: LD_INT 1
16500: DEC
16501: ST_TO_ADDR
16502: LD_VAR 0 24
16506: PUSH
16507: FOR_TO
16508: IFFALSE 16538
// begin if vehicle in vehicles [ i ] then
16510: LD_VAR 0 23
16514: PUSH
16515: LD_VAR 0 24
16519: PUSH
16520: LD_VAR 0 13
16524: ARRAY
16525: IN
16526: IFFALSE 16536
// vehicleInList = true ;
16528: LD_ADDR_VAR 0 25
16532: PUSH
16533: LD_INT 1
16535: ST_TO_ADDR
// end ;
16536: GO 16507
16538: POP
16539: POP
// if not vehicleInList then
16540: LD_VAR 0 25
16544: NOT
16545: IFFALSE 16650
// if vehicles < vehiclesToAttackAmount then
16547: LD_VAR 0 24
16551: PUSH
16552: LD_VAR 0 10
16556: LESS
16557: IFFALSE 16609
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16559: LD_ADDR_VAR 0 24
16563: PUSH
16564: LD_VAR 0 24
16568: PUSH
16569: LD_VAR 0 23
16573: PUSH
16574: LD_VAR 0 23
16578: PPUSH
16579: CALL_OW 313
16583: PUSH
16584: LD_INT 1
16586: ARRAY
16587: PUSH
16588: LD_VAR 0 23
16592: PPUSH
16593: CALL_OW 302
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: ADD
16606: ST_TO_ADDR
16607: GO 16650
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16609: LD_ADDR_VAR 0 24
16613: PUSH
16614: LD_VAR 0 24
16618: PUSH
16619: LD_VAR 0 23
16623: PUSH
16624: LD_VAR 0 23
16628: PPUSH
16629: CALL_OW 313
16633: PUSH
16634: LD_INT 1
16636: ARRAY
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: PUSH
16646: EMPTY
16647: LIST
16648: ADD
16649: ST_TO_ADDR
// end ;
16650: GO 16481
16652: POP
16653: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16654: LD_ADDR_VAR 0 37
16658: PUSH
16659: LD_VAR 0 7
16663: PPUSH
16664: LD_INT 81
16666: PUSH
16667: LD_VAR 0 1
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 70
16680: PUSH
16681: FOR_IN
16682: IFFALSE 16861
// begin defenceUnits = [ ] ;
16684: LD_ADDR_VAR 0 26
16688: PUSH
16689: EMPTY
16690: ST_TO_ADDR
// for i := 1 to personel do
16691: LD_ADDR_VAR 0 13
16695: PUSH
16696: DOUBLE
16697: LD_INT 1
16699: DEC
16700: ST_TO_ADDR
16701: LD_VAR 0 18
16705: PUSH
16706: FOR_TO
16707: IFFALSE 16757
// if personel [ i ] [ 3 ] = 2 then
16709: LD_VAR 0 18
16713: PUSH
16714: LD_VAR 0 13
16718: ARRAY
16719: PUSH
16720: LD_INT 3
16722: ARRAY
16723: PUSH
16724: LD_INT 2
16726: EQUAL
16727: IFFALSE 16755
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16729: LD_ADDR_VAR 0 26
16733: PUSH
16734: LD_VAR 0 26
16738: PUSH
16739: LD_VAR 0 18
16743: PUSH
16744: LD_VAR 0 13
16748: ARRAY
16749: PUSH
16750: LD_INT 1
16752: ARRAY
16753: ADD
16754: ST_TO_ADDR
16755: GO 16706
16757: POP
16758: POP
// for i := 1 to vehicles do
16759: LD_ADDR_VAR 0 13
16763: PUSH
16764: DOUBLE
16765: LD_INT 1
16767: DEC
16768: ST_TO_ADDR
16769: LD_VAR 0 24
16773: PUSH
16774: FOR_TO
16775: IFFALSE 16825
// if vehicles [ i ] [ 3 ] = 2 then
16777: LD_VAR 0 24
16781: PUSH
16782: LD_VAR 0 13
16786: ARRAY
16787: PUSH
16788: LD_INT 3
16790: ARRAY
16791: PUSH
16792: LD_INT 2
16794: EQUAL
16795: IFFALSE 16823
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16797: LD_ADDR_VAR 0 26
16801: PUSH
16802: LD_VAR 0 26
16806: PUSH
16807: LD_VAR 0 24
16811: PUSH
16812: LD_VAR 0 13
16816: ARRAY
16817: PUSH
16818: LD_INT 1
16820: ARRAY
16821: ADD
16822: ST_TO_ADDR
16823: GO 16774
16825: POP
16826: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16827: LD_VAR 0 26
16831: PPUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 60
16837: PUSH
16838: EMPTY
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: PPUSH
16845: CALL_OW 72
16849: PPUSH
16850: LD_VAR 0 37
16854: PPUSH
16855: CALL_OW 175
// end ;
16859: GO 16681
16861: POP
16862: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16863: LD_ADDR_VAR 0 38
16867: PUSH
16868: LD_INT 22
16870: PUSH
16871: LD_VAR 0 1
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: LD_INT 30
16885: PUSH
16886: LD_INT 31
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 30
16895: PUSH
16896: LD_INT 32
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 33
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 30
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 30
16925: PUSH
16926: LD_INT 5
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PPUSH
16945: CALL_OW 69
16949: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16950: LD_ADDR_VAR 0 39
16954: PUSH
16955: LD_INT 81
16957: PUSH
16958: LD_VAR 0 1
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 21
16969: PUSH
16970: LD_INT 3
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 58
16979: PUSH
16980: EMPTY
16981: LIST
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: PPUSH
16988: CALL_OW 69
16992: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16993: LD_VAR 0 38
16997: PUSH
16998: LD_VAR 0 39
17002: AND
17003: IFFALSE 17073
// for i in attackBuildings do
17005: LD_ADDR_VAR 0 13
17009: PUSH
17010: LD_VAR 0 38
17014: PUSH
17015: FOR_IN
17016: IFFALSE 17071
// for j in enemyBuildings do
17018: LD_ADDR_VAR 0 14
17022: PUSH
17023: LD_VAR 0 39
17027: PUSH
17028: FOR_IN
17029: IFFALSE 17067
// if GetDistUnits ( i , j ) < 12 then
17031: LD_VAR 0 13
17035: PPUSH
17036: LD_VAR 0 14
17040: PPUSH
17041: CALL_OW 296
17045: PUSH
17046: LD_INT 12
17048: LESS
17049: IFFALSE 17065
// ComAttackUnit ( i , j ) ;
17051: LD_VAR 0 13
17055: PPUSH
17056: LD_VAR 0 14
17060: PPUSH
17061: CALL_OW 115
17065: GO 17028
17067: POP
17068: POP
17069: GO 17015
17071: POP
17072: POP
// until not personel or not enableOmicronAI ;
17073: LD_VAR 0 18
17077: NOT
17078: PUSH
17079: LD_EXP 29
17083: NOT
17084: OR
17085: IFFALSE 12132
// end ;
17087: LD_VAR 0 12
17091: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17092: LD_INT 0
17094: PPUSH
17095: PPUSH
17096: PPUSH
// weapons = [ ru_gun ] ;
17097: LD_ADDR_VAR 0 3
17101: PUSH
17102: LD_INT 44
17104: PUSH
17105: EMPTY
17106: LIST
17107: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_EXP 70
17117: PUSH
17118: FOR_IN
17119: IFFALSE 17151
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17121: LD_VAR 0 2
17125: PPUSH
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 1
17133: PPUSH
17134: LD_VAR 0 3
17138: PPUSH
17139: CALL_OW 12
17143: ARRAY
17144: PPUSH
17145: CALL_OW 208
17149: GO 17118
17151: POP
17152: POP
// end ;
17153: LD_VAR 0 1
17157: RET
// export function KirovProduceVehicles ( factory ) ; begin
17158: LD_INT 0
17160: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17161: LD_VAR 0 1
17165: PPUSH
17166: LD_INT 21
17168: PPUSH
17169: LD_INT 1
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: LD_INT 51
17177: PPUSH
17178: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17182: LD_VAR 0 1
17186: PPUSH
17187: LD_INT 21
17189: PPUSH
17190: LD_INT 1
17192: PPUSH
17193: LD_INT 1
17195: PPUSH
17196: LD_INT 51
17198: PPUSH
17199: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17203: LD_VAR 0 1
17207: PPUSH
17208: LD_INT 21
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: LD_INT 1
17216: PPUSH
17217: LD_INT 51
17219: PPUSH
17220: CALL_OW 185
// case Difficulty of 1 :
17224: LD_OWVAR 67
17228: PUSH
17229: LD_INT 1
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17360
17237: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17238: LD_VAR 0 1
17242: PPUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 23
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 1
17255: PPUSH
17256: LD_INT 2
17258: PPUSH
17259: CALL_OW 12
17263: ARRAY
17264: PPUSH
17265: LD_INT 1
17267: PPUSH
17268: LD_INT 1
17270: PPUSH
17271: LD_INT 43
17273: PPUSH
17274: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17278: LD_VAR 0 1
17282: PPUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 23
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 1
17295: PPUSH
17296: LD_INT 2
17298: PPUSH
17299: CALL_OW 12
17303: ARRAY
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: LD_INT 43
17313: PPUSH
17314: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17318: LD_VAR 0 1
17322: PPUSH
17323: LD_INT 21
17325: PUSH
17326: LD_INT 23
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 2
17338: PPUSH
17339: CALL_OW 12
17343: ARRAY
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: LD_INT 1
17350: PPUSH
17351: LD_INT 44
17353: PPUSH
17354: CALL_OW 185
// end ; 2 :
17358: GO 17623
17360: LD_INT 2
17362: DOUBLE
17363: EQUAL
17364: IFTRUE 17368
17366: GO 17491
17368: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_INT 21
17376: PUSH
17377: LD_INT 23
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PPUSH
17387: LD_INT 2
17389: PPUSH
17390: CALL_OW 12
17394: ARRAY
17395: PPUSH
17396: LD_INT 1
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_INT 42
17404: PPUSH
17405: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17409: LD_VAR 0 1
17413: PPUSH
17414: LD_INT 21
17416: PUSH
17417: LD_INT 23
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: PPUSH
17427: LD_INT 2
17429: PPUSH
17430: CALL_OW 12
17434: ARRAY
17435: PPUSH
17436: LD_INT 1
17438: PPUSH
17439: LD_INT 1
17441: PPUSH
17442: LD_INT 43
17444: PPUSH
17445: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17449: LD_VAR 0 1
17453: PPUSH
17454: LD_INT 21
17456: PUSH
17457: LD_INT 23
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 1
17466: PPUSH
17467: LD_INT 2
17469: PPUSH
17470: CALL_OW 12
17474: ARRAY
17475: PPUSH
17476: LD_INT 1
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 44
17484: PPUSH
17485: CALL_OW 185
// end ; 3 :
17489: GO 17623
17491: LD_INT 3
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17622
17499: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17500: LD_VAR 0 1
17504: PPUSH
17505: LD_INT 21
17507: PUSH
17508: LD_INT 23
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: PPUSH
17518: LD_INT 2
17520: PPUSH
17521: CALL_OW 12
17525: ARRAY
17526: PPUSH
17527: LD_INT 1
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: LD_INT 42
17535: PPUSH
17536: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 23
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 1
17557: PPUSH
17558: LD_INT 2
17560: PPUSH
17561: CALL_OW 12
17565: ARRAY
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: LD_INT 42
17575: PPUSH
17576: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17580: LD_VAR 0 1
17584: PPUSH
17585: LD_INT 21
17587: PUSH
17588: LD_INT 23
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 2
17600: PPUSH
17601: CALL_OW 12
17605: ARRAY
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_INT 44
17615: PPUSH
17616: CALL_OW 185
// end ; end ;
17620: GO 17623
17622: POP
// end ;
17623: LD_VAR 0 2
17627: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
// vehicles = [ ] ;
17635: LD_ADDR_VAR 0 3
17639: PUSH
17640: EMPTY
17641: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17642: LD_ADDR_VAR 0 4
17646: PUSH
17647: LD_EXP 74
17651: PUSH
17652: FOR_IN
17653: IFFALSE 17702
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17655: LD_ADDR_VAR 0 3
17659: PUSH
17660: LD_VAR 0 3
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: LD_VAR 0 4
17672: PUSH
17673: LD_VAR 0 4
17677: PPUSH
17678: CALL_OW 313
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: PPUSH
17695: CALL_OW 2
17699: ST_TO_ADDR
17700: GO 17652
17702: POP
17703: POP
// repeat for i := 1 to vehicles do
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: DOUBLE
17710: LD_INT 1
17712: DEC
17713: ST_TO_ADDR
17714: LD_VAR 0 3
17718: PUSH
17719: FOR_TO
17720: IFFALSE 17758
// if vehicles [ i ] [ 3 ] = 1 then
17722: LD_VAR 0 3
17726: PUSH
17727: LD_VAR 0 2
17731: ARRAY
17732: PUSH
17733: LD_INT 3
17735: ARRAY
17736: PUSH
17737: LD_INT 1
17739: EQUAL
17740: IFFALSE 17756
// goodVehs = goodVehs + 1 ;
17742: LD_ADDR_VAR 0 5
17746: PUSH
17747: LD_VAR 0 5
17751: PUSH
17752: LD_INT 1
17754: PLUS
17755: ST_TO_ADDR
17756: GO 17719
17758: POP
17759: POP
// if goodVehs = vehicles then
17760: LD_VAR 0 5
17764: PUSH
17765: LD_VAR 0 3
17769: EQUAL
17770: IFFALSE 17819
// for i := 1 to vehicles do
17772: LD_ADDR_VAR 0 2
17776: PUSH
17777: DOUBLE
17778: LD_INT 1
17780: DEC
17781: ST_TO_ADDR
17782: LD_VAR 0 3
17786: PUSH
17787: FOR_TO
17788: IFFALSE 17817
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
17790: LD_VAR 0 3
17794: PUSH
17795: LD_VAR 0 2
17799: ARRAY
17800: PUSH
17801: LD_INT 1
17803: ARRAY
17804: PPUSH
17805: LD_INT 26
17807: PPUSH
17808: LD_INT 35
17810: PPUSH
17811: CALL_OW 114
17815: GO 17787
17817: POP
17818: POP
// goodVehs = 0 ;
17819: LD_ADDR_VAR 0 5
17823: PUSH
17824: LD_INT 0
17826: ST_TO_ADDR
// for i := 1 to vehicles do
17827: LD_ADDR_VAR 0 2
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_VAR 0 3
17841: PUSH
17842: FOR_TO
17843: IFFALSE 18344
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17845: LD_VAR 0 3
17849: PUSH
17850: LD_VAR 0 2
17854: ARRAY
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: PPUSH
17860: CALL_OW 256
17864: PUSH
17865: LD_INT 500
17867: LESS
17868: PUSH
17869: LD_VAR 0 3
17873: PUSH
17874: LD_VAR 0 2
17878: ARRAY
17879: PUSH
17880: LD_INT 1
17882: ARRAY
17883: PPUSH
17884: LD_INT 78
17886: PPUSH
17887: LD_INT 39
17889: PPUSH
17890: CALL_OW 297
17894: PUSH
17895: LD_INT 9
17897: LESS
17898: NOT
17899: AND
17900: IFFALSE 17965
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
17902: LD_ADDR_VAR 0 3
17906: PUSH
17907: LD_VAR 0 3
17911: PPUSH
17912: LD_VAR 0 2
17916: PUSH
17917: LD_VAR 0 3
17921: PUSH
17922: LD_VAR 0 2
17926: ARRAY
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PPUSH
17932: LD_INT 2
17934: PPUSH
17935: CALL 34489 0 3
17939: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
17940: LD_VAR 0 3
17944: PUSH
17945: LD_VAR 0 2
17949: ARRAY
17950: PUSH
17951: LD_INT 1
17953: ARRAY
17954: PPUSH
17955: LD_INT 78
17957: PPUSH
17958: LD_INT 39
17960: PPUSH
17961: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17965: LD_VAR 0 3
17969: PUSH
17970: LD_VAR 0 2
17974: ARRAY
17975: PUSH
17976: LD_INT 1
17978: ARRAY
17979: PPUSH
17980: CALL_OW 256
17984: PUSH
17985: LD_INT 500
17987: LESS
17988: PUSH
17989: LD_VAR 0 3
17993: PUSH
17994: LD_VAR 0 2
17998: ARRAY
17999: PUSH
18000: LD_INT 1
18002: ARRAY
18003: PPUSH
18004: LD_INT 78
18006: PPUSH
18007: LD_INT 39
18009: PPUSH
18010: CALL_OW 297
18014: PUSH
18015: LD_INT 9
18017: LESS
18018: AND
18019: IFFALSE 18074
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18021: LD_VAR 0 3
18025: PUSH
18026: LD_VAR 0 2
18030: ARRAY
18031: PUSH
18032: LD_INT 2
18034: ARRAY
18035: PPUSH
18036: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18040: LD_VAR 0 3
18044: PUSH
18045: LD_VAR 0 2
18049: ARRAY
18050: PUSH
18051: LD_INT 2
18053: ARRAY
18054: PPUSH
18055: LD_VAR 0 3
18059: PUSH
18060: LD_VAR 0 2
18064: ARRAY
18065: PUSH
18066: LD_INT 1
18068: ARRAY
18069: PPUSH
18070: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18074: LD_VAR 0 3
18078: PUSH
18079: LD_VAR 0 2
18083: ARRAY
18084: PUSH
18085: LD_INT 1
18087: ARRAY
18088: PPUSH
18089: CALL_OW 256
18093: PUSH
18094: LD_INT 1000
18096: EQUAL
18097: PUSH
18098: LD_VAR 0 3
18102: PUSH
18103: LD_VAR 0 2
18107: ARRAY
18108: PUSH
18109: LD_INT 3
18111: ARRAY
18112: PUSH
18113: LD_INT 2
18115: EQUAL
18116: AND
18117: IFFALSE 18191
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_VAR 0 3
18128: PPUSH
18129: LD_VAR 0 2
18133: PUSH
18134: LD_VAR 0 3
18138: PUSH
18139: LD_VAR 0 2
18143: ARRAY
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL 34489 0 3
18156: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18157: LD_VAR 0 3
18161: PUSH
18162: LD_VAR 0 2
18166: ARRAY
18167: PUSH
18168: LD_INT 2
18170: ARRAY
18171: PPUSH
18172: LD_VAR 0 3
18176: PUSH
18177: LD_VAR 0 2
18181: ARRAY
18182: PUSH
18183: LD_INT 1
18185: ARRAY
18186: PPUSH
18187: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18191: LD_VAR 0 3
18195: PUSH
18196: LD_VAR 0 2
18200: ARRAY
18201: PUSH
18202: LD_INT 1
18204: ARRAY
18205: PPUSH
18206: CALL_OW 256
18210: PUSH
18211: LD_INT 250
18213: LESS
18214: IFFALSE 18241
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18216: LD_ADDR_VAR 0 3
18220: PUSH
18221: LD_VAR 0 3
18225: PUSH
18226: LD_VAR 0 3
18230: PUSH
18231: LD_VAR 0 2
18235: ARRAY
18236: PUSH
18237: EMPTY
18238: LIST
18239: DIFF
18240: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18241: LD_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: ARRAY
18251: PUSH
18252: LD_INT 2
18254: ARRAY
18255: PPUSH
18256: CALL_OW 256
18260: PUSH
18261: LD_INT 250
18263: LESS
18264: PUSH
18265: LD_VAR 0 3
18269: PUSH
18270: LD_VAR 0 2
18274: ARRAY
18275: PUSH
18276: LD_INT 1
18278: ARRAY
18279: PPUSH
18280: CALL_OW 256
18284: PUSH
18285: LD_INT 250
18287: GREATER
18288: AND
18289: IFFALSE 18342
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18291: LD_ADDR_EXP 30
18295: PUSH
18296: LD_EXP 30
18300: PUSH
18301: LD_VAR 0 3
18305: PUSH
18306: LD_VAR 0 2
18310: ARRAY
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: ADD
18316: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18317: LD_ADDR_VAR 0 3
18321: PUSH
18322: LD_VAR 0 3
18326: PUSH
18327: LD_VAR 0 3
18331: PUSH
18332: LD_VAR 0 2
18336: ARRAY
18337: PUSH
18338: EMPTY
18339: LIST
18340: DIFF
18341: ST_TO_ADDR
// end ; end ;
18342: GO 17842
18344: POP
18345: POP
// wait ( 0 0$1 ) ;
18346: LD_INT 35
18348: PPUSH
18349: CALL_OW 67
// until omicronSurrender ;
18353: LD_EXP 23
18357: IFFALSE 17704
// end ;
18359: LD_VAR 0 1
18363: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18364: LD_INT 0
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
// inBase = false ;
18380: LD_ADDR_VAR 0 15
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18388: LD_ADDR_VAR 0 8
18392: PUSH
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_INT 22
18400: PUSH
18401: LD_INT 3
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: EMPTY
18409: LIST
18410: PPUSH
18411: CALL_OW 70
18415: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18416: LD_ADDR_VAR 0 9
18420: PUSH
18421: LD_VAR 0 2
18425: PPUSH
18426: CALL_OW 435
18430: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18431: LD_ADDR_VAR 0 12
18435: PUSH
18436: LD_VAR 0 1
18440: PPUSH
18441: LD_INT 50
18443: PUSH
18444: EMPTY
18445: LIST
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 25
18452: PUSH
18453: LD_INT 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 25
18462: PUSH
18463: LD_INT 3
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 21
18472: PUSH
18473: LD_INT 2
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PPUSH
18490: CALL_OW 72
18494: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18495: LD_ADDR_VAR 0 13
18499: PUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: LD_INT 50
18507: PUSH
18508: EMPTY
18509: LIST
18510: PUSH
18511: LD_INT 25
18513: PUSH
18514: LD_INT 4
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PPUSH
18525: CALL_OW 72
18529: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18530: LD_ADDR_VAR 0 14
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: LD_INT 3
18542: PUSH
18543: LD_INT 24
18545: PUSH
18546: LD_INT 1000
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 72
18561: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18562: LD_ADDR_VAR 0 6
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: PPUSH
18580: CALL_OW 69
18584: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18585: LD_ADDR_VAR 0 5
18589: PUSH
18590: LD_VAR 0 1
18594: PPUSH
18595: LD_INT 50
18597: PUSH
18598: EMPTY
18599: LIST
18600: PUSH
18601: EMPTY
18602: LIST
18603: PPUSH
18604: CALL_OW 72
18608: PUSH
18609: FOR_IN
18610: IFFALSE 19328
// begin if attackUnits and medics then
18612: LD_VAR 0 12
18616: PUSH
18617: LD_VAR 0 13
18621: AND
18622: IFFALSE 18689
// begin if damageUnits then
18624: LD_VAR 0 14
18628: IFFALSE 18650
// ComHeal ( medics , damageUnits [ 1 ] ) else
18630: LD_VAR 0 13
18634: PPUSH
18635: LD_VAR 0 14
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PPUSH
18644: CALL_OW 128
18648: GO 18687
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18650: LD_VAR 0 13
18654: PPUSH
18655: LD_VAR 0 12
18659: PUSH
18660: LD_INT 1
18662: ARRAY
18663: PPUSH
18664: CALL_OW 250
18668: PPUSH
18669: LD_VAR 0 12
18673: PUSH
18674: LD_INT 1
18676: ARRAY
18677: PPUSH
18678: CALL_OW 251
18682: PPUSH
18683: CALL_OW 111
// end else
18687: GO 18718
// begin if not attackUnits and medics then
18689: LD_VAR 0 12
18693: NOT
18694: PUSH
18695: LD_VAR 0 13
18699: AND
18700: IFFALSE 18718
// attackUnits = attackUnits ^ medics ;
18702: LD_ADDR_VAR 0 12
18706: PUSH
18707: LD_VAR 0 12
18711: PUSH
18712: LD_VAR 0 13
18716: ADD
18717: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
18718: LD_ADDR_VAR 0 4
18722: PUSH
18723: DOUBLE
18724: LD_INT 1
18726: DEC
18727: ST_TO_ADDR
18728: LD_VAR 0 9
18732: PUSH
18733: LD_INT 2
18735: DIVREAL
18736: PUSH
18737: FOR_TO
18738: IFFALSE 18777
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
18740: LD_VAR 0 12
18744: PPUSH
18745: LD_VAR 0 9
18749: PUSH
18750: LD_VAR 0 4
18754: ARRAY
18755: PPUSH
18756: LD_VAR 0 9
18760: PUSH
18761: LD_VAR 0 4
18765: PUSH
18766: LD_INT 1
18768: PLUS
18769: ARRAY
18770: PPUSH
18771: CALL_OW 176
18775: GO 18737
18777: POP
18778: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
18779: LD_VAR 0 12
18783: PPUSH
18784: LD_INT 21
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 3
18796: PUSH
18797: LD_INT 60
18799: PUSH
18800: EMPTY
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PPUSH
18811: CALL_OW 72
18815: PPUSH
18816: LD_INT 27
18818: PPUSH
18819: LD_INT 34
18821: PPUSH
18822: CALL_OW 111
// wait ( 0 0$01 ) ;
18826: LD_INT 35
18828: PPUSH
18829: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
18833: LD_VAR 0 8
18837: PUSH
18838: LD_VAR 0 12
18842: PPUSH
18843: LD_INT 21
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 60
18858: PUSH
18859: EMPTY
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL_OW 72
18874: AND
18875: IFFALSE 19058
// begin for playerUnit in playerUnits do
18877: LD_ADDR_VAR 0 7
18881: PUSH
18882: LD_VAR 0 6
18886: PUSH
18887: FOR_IN
18888: IFFALSE 19054
// begin if Attacks ( playerUnit ) then
18890: LD_VAR 0 7
18894: PPUSH
18895: CALL_OW 320
18899: IFFALSE 18986
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
18901: LD_VAR 0 7
18905: PPUSH
18906: CALL_OW 320
18910: PUSH
18911: LD_VAR 0 1
18915: IN
18916: PUSH
18917: LD_VAR 0 7
18921: PPUSH
18922: LD_VAR 0 5
18926: PPUSH
18927: CALL_OW 296
18931: PUSH
18932: LD_INT 13
18934: LESS
18935: AND
18936: IFFALSE 18984
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
18938: LD_VAR 0 12
18942: PPUSH
18943: LD_INT 21
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 3
18955: PUSH
18956: LD_INT 60
18958: PUSH
18959: EMPTY
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 72
18974: PPUSH
18975: LD_VAR 0 7
18979: PPUSH
18980: CALL_OW 115
18984: GO 19052
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
18986: LD_ADDR_VAR 0 10
18990: PUSH
18991: LD_VAR 0 8
18995: PPUSH
18996: LD_VAR 0 5
19000: PPUSH
19001: CALL_OW 74
19005: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19006: LD_VAR 0 12
19010: PPUSH
19011: LD_INT 21
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 3
19023: PUSH
19024: LD_INT 60
19026: PUSH
19027: EMPTY
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 72
19042: PPUSH
19043: LD_VAR 0 10
19047: PPUSH
19048: CALL_OW 115
// end ; end ;
19052: GO 18887
19054: POP
19055: POP
// end else
19056: GO 19105
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19058: LD_VAR 0 12
19062: PPUSH
19063: LD_INT 21
19065: PUSH
19066: LD_INT 1
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: LD_INT 60
19078: PUSH
19079: EMPTY
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 72
19094: PPUSH
19095: LD_INT 27
19097: PPUSH
19098: LD_INT 34
19100: PPUSH
19101: CALL_OW 111
// if enemyUnitsOnRoad then
19105: LD_VAR 0 8
19109: IFFALSE 19264
// begin for playerUnit in playerUnits do
19111: LD_ADDR_VAR 0 7
19115: PUSH
19116: LD_VAR 0 6
19120: PUSH
19121: FOR_IN
19122: IFFALSE 19260
// begin if Attacks ( playerUnit ) then
19124: LD_VAR 0 7
19128: PPUSH
19129: CALL_OW 320
19133: IFFALSE 19206
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19135: LD_VAR 0 7
19139: PPUSH
19140: CALL_OW 320
19144: PUSH
19145: LD_VAR 0 1
19149: IN
19150: PUSH
19151: LD_VAR 0 7
19155: PPUSH
19156: LD_VAR 0 5
19160: PPUSH
19161: CALL_OW 296
19165: PUSH
19166: LD_INT 13
19168: LESS
19169: AND
19170: IFFALSE 19204
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19172: LD_VAR 0 12
19176: PPUSH
19177: LD_INT 21
19179: PUSH
19180: LD_INT 2
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: PPUSH
19190: CALL_OW 72
19194: PPUSH
19195: LD_VAR 0 7
19199: PPUSH
19200: CALL_OW 115
19204: GO 19258
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19206: LD_ADDR_VAR 0 10
19210: PUSH
19211: LD_VAR 0 8
19215: PPUSH
19216: LD_VAR 0 5
19220: PPUSH
19221: CALL_OW 74
19225: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19226: LD_VAR 0 12
19230: PPUSH
19231: LD_INT 21
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: EMPTY
19242: LIST
19243: PPUSH
19244: CALL_OW 72
19248: PPUSH
19249: LD_VAR 0 10
19253: PPUSH
19254: CALL_OW 115
// end ; end ;
19258: GO 19121
19260: POP
19261: POP
// end else
19262: GO 19297
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19264: LD_VAR 0 12
19268: PPUSH
19269: LD_INT 21
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: PPUSH
19282: CALL_OW 72
19286: PPUSH
19287: LD_INT 27
19289: PPUSH
19290: LD_INT 34
19292: PPUSH
19293: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19297: LD_VAR 0 5
19301: PPUSH
19302: LD_INT 27
19304: PPUSH
19305: LD_INT 34
19307: PPUSH
19308: CALL_OW 297
19312: PUSH
19313: LD_INT 5
19315: LESS
19316: IFFALSE 19326
// inBase = true ;
19318: LD_ADDR_VAR 0 15
19322: PUSH
19323: LD_INT 1
19325: ST_TO_ADDR
// end ;
19326: GO 18609
19328: POP
19329: POP
// wait ( 0 0$1 ) ;
19330: LD_INT 35
19332: PPUSH
19333: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19337: LD_VAR 0 1
19341: PPUSH
19342: LD_INT 50
19344: PUSH
19345: EMPTY
19346: LIST
19347: PPUSH
19348: CALL_OW 72
19352: PUSH
19353: LD_INT 0
19355: EQUAL
19356: PUSH
19357: LD_VAR 0 15
19361: OR
19362: IFFALSE 18388
// ComMoveXY ( units , 27 , 34 ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_INT 27
19371: PPUSH
19372: LD_INT 34
19374: PPUSH
19375: CALL_OW 111
// for i := 1 to units do
19379: LD_ADDR_VAR 0 4
19383: PUSH
19384: DOUBLE
19385: LD_INT 1
19387: DEC
19388: ST_TO_ADDR
19389: LD_VAR 0 1
19393: PUSH
19394: FOR_TO
19395: IFFALSE 19430
// if IsOk ( units [ i ] ) then
19397: LD_VAR 0 1
19401: PUSH
19402: LD_VAR 0 4
19406: ARRAY
19407: PPUSH
19408: CALL_OW 302
19412: IFFALSE 19428
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
19414: LD_ADDR_EXP 12
19418: PUSH
19419: LD_EXP 12
19423: PUSH
19424: LD_INT 1
19426: PLUS
19427: ST_TO_ADDR
19428: GO 19394
19430: POP
19431: POP
// amSupportTroops = amSupportTroops diff units ;
19432: LD_ADDR_EXP 82
19436: PUSH
19437: LD_EXP 82
19441: PUSH
19442: LD_VAR 0 1
19446: DIFF
19447: ST_TO_ADDR
// newBase = amBase ;
19448: LD_ADDR_VAR 0 16
19452: PUSH
19453: LD_EXP 84
19457: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
19458: LD_ADDR_VAR 0 16
19462: PUSH
19463: LD_VAR 0 16
19467: PUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 50
19475: PUSH
19476: EMPTY
19477: LIST
19478: PPUSH
19479: CALL_OW 72
19483: ADD
19484: ST_TO_ADDR
// amBase = newBase ;
19485: LD_ADDR_EXP 84
19489: PUSH
19490: LD_VAR 0 16
19494: ST_TO_ADDR
// end ; end_of_file
19495: LD_VAR 0 3
19499: RET
// export function Lose_Burlak ; begin
19500: LD_INT 0
19502: PPUSH
// YouLost ( Burlak ) ;
19503: LD_STRING Burlak
19505: PPUSH
19506: CALL_OW 104
// end ;
19510: LD_VAR 0 1
19514: RET
// export function Lose_Omicron ; begin
19515: LD_INT 0
19517: PPUSH
// YouLost ( Omicron ) ;
19518: LD_STRING Omicron
19520: PPUSH
19521: CALL_OW 104
// end ;
19525: LD_VAR 0 1
19529: RET
// export function Lose_Vehicles ; begin
19530: LD_INT 0
19532: PPUSH
// YouLost ( Vehicles ) ;
19533: LD_STRING Vehicles
19535: PPUSH
19536: CALL_OW 104
// end ;
19540: LD_VAR 0 1
19544: RET
// export function Lose_SelfAttack ; begin
19545: LD_INT 0
19547: PPUSH
// YouLost ( SelfAttack ) ;
19548: LD_STRING SelfAttack
19550: PPUSH
19551: CALL_OW 104
// end ;
19555: LD_VAR 0 1
19559: RET
// export function Lose_Delay ; begin
19560: LD_INT 0
19562: PPUSH
// YouLost ( Delay ) ;
19563: LD_STRING Delay
19565: PPUSH
19566: CALL_OW 104
// end ; end_of_file
19570: LD_VAR 0 1
19574: RET
// export function FinishMission ; begin
19575: LD_INT 0
19577: PPUSH
// SetRewards ;
19578: CALL 19599 0 0
// SavePlayerCharacters ;
19582: CALL 19813 0 0
// SaveGlobalVariables ;
19586: CALL 20142 0 0
// YouWin ;
19590: CALL_OW 103
// end ;
19594: LD_VAR 0 1
19598: RET
// function SetRewards ; var unitsToReward ; begin
19599: LD_INT 0
19601: PPUSH
19602: PPUSH
// if produceMoreVehicles then
19603: LD_EXP 16
19607: IFFALSE 19621
// AddMedal ( Surplus , 1 ) else
19609: LD_STRING Surplus
19611: PPUSH
19612: LD_INT 1
19614: PPUSH
19615: CALL_OW 101
19619: GO 19651
// if produceOnlyForYou then
19621: LD_EXP 17
19625: IFFALSE 19640
// AddMedal ( Surplus , - 1 ) else
19627: LD_STRING Surplus
19629: PPUSH
19630: LD_INT 1
19632: NEG
19633: PPUSH
19634: CALL_OW 101
19638: GO 19651
// AddMedal ( Surplus , - 2 ) ;
19640: LD_STRING Surplus
19642: PPUSH
19643: LD_INT 2
19645: NEG
19646: PPUSH
19647: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
19651: LD_EXP 12
19655: PUSH
19656: LD_EXP 45
19660: LESS
19661: IFFALSE 19675
// AddMedal ( PreventReinforcements , 1 ) else
19663: LD_STRING PreventReinforcements
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 101
19673: GO 19686
// AddMedal ( PreventReinforcements , - 1 ) ;
19675: LD_STRING PreventReinforcements
19677: PPUSH
19678: LD_INT 1
19680: NEG
19681: PPUSH
19682: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
19686: LD_EXP 7
19690: PUSH
19691: LD_EXP 53
19695: PPUSH
19696: CALL_OW 302
19700: AND
19701: IFFALSE 19715
// AddMedal ( Scholtze , 1 ) else
19703: LD_STRING Scholtze
19705: PPUSH
19706: LD_INT 1
19708: PPUSH
19709: CALL_OW 101
19713: GO 19726
// AddMedal ( Scholtze , - 1 ) ;
19715: LD_STRING Scholtze
19717: PPUSH
19718: LD_INT 1
19720: NEG
19721: PPUSH
19722: CALL_OW 101
// GiveMedals ( Main ) ;
19726: LD_STRING Main
19728: PPUSH
19729: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
19733: LD_ADDR_VAR 0 2
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_INT 3
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 21
19750: PUSH
19751: LD_INT 1
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PPUSH
19762: CALL_OW 69
19766: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
19767: LD_ADDR_VAR 0 2
19771: PUSH
19772: LD_VAR 0 2
19776: PUSH
19777: LD_EXP 77
19781: ADD
19782: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
19783: LD_ADDR_VAR 0 2
19787: PUSH
19788: LD_VAR 0 2
19792: PUSH
19793: LD_EXP 60
19797: DIFF
19798: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
19799: LD_VAR 0 2
19803: PPUSH
19804: CALL_OW 43
// end ;
19808: LD_VAR 0 1
19812: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
19813: LD_INT 0
19815: PPUSH
19816: PPUSH
19817: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19818: LD_EXP 47
19822: PPUSH
19823: LD_STRING Burlak
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: CALL 7233 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19833: LD_EXP 48
19837: PPUSH
19838: LD_STRING Gnyevko
19840: PPUSH
19841: LD_INT 3
19843: PPUSH
19844: CALL 7233 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19848: LD_EXP 50
19852: PPUSH
19853: LD_STRING Kovalyuk
19855: PPUSH
19856: LD_INT 3
19858: PPUSH
19859: CALL 7233 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19863: LD_EXP 49
19867: PPUSH
19868: LD_STRING Kirilenkova
19870: PPUSH
19871: LD_INT 3
19873: PPUSH
19874: CALL 7233 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
19878: LD_EXP 53
19882: PPUSH
19883: LD_STRING Scholtze
19885: PPUSH
19886: LD_INT 3
19888: PPUSH
19889: CALL 7233 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19893: LD_EXP 51
19897: PPUSH
19898: LD_STRING Belkov
19900: PPUSH
19901: LD_INT 3
19903: PPUSH
19904: CALL 7233 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19908: LD_EXP 52
19912: PPUSH
19913: LD_STRING Belkov2
19915: PPUSH
19916: LD_INT 3
19918: PPUSH
19919: CALL 7233 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
19923: LD_EXP 51
19927: PPUSH
19928: LD_STRING Belkov
19930: PPUSH
19931: LD_INT 6
19933: PPUSH
19934: CALL 7233 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
19938: LD_EXP 52
19942: PPUSH
19943: LD_STRING Belkov2
19945: PPUSH
19946: LD_INT 6
19948: PPUSH
19949: CALL 7233 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
19953: LD_ADDR_VAR 0 2
19957: PUSH
19958: LD_INT 22
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 21
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 50
19980: PUSH
19981: EMPTY
19982: LIST
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: PPUSH
19989: CALL_OW 69
19993: PUSH
19994: LD_EXP 47
19998: PUSH
19999: LD_EXP 48
20003: PUSH
20004: LD_EXP 51
20008: PUSH
20009: LD_EXP 52
20013: PUSH
20014: LD_EXP 50
20018: PUSH
20019: LD_EXP 49
20023: PUSH
20024: LD_EXP 53
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: DIFF
20038: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20039: LD_VAR 0 2
20043: PPUSH
20044: LD_STRING other_survivors
20046: PPUSH
20047: LD_INT 3
20049: PPUSH
20050: CALL 7289 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20054: LD_ADDR_VAR 0 3
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_INT 6
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 21
20071: PUSH
20072: LD_INT 1
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 50
20081: PUSH
20082: EMPTY
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: LIST
20089: PPUSH
20090: CALL_OW 69
20094: PUSH
20095: LD_EXP 59
20099: PUSH
20100: LD_EXP 60
20104: PUSH
20105: LD_EXP 51
20109: PUSH
20110: LD_EXP 52
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: DIFF
20121: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20122: LD_VAR 0 3
20126: PPUSH
20127: LD_STRING other_kirov
20129: PPUSH
20130: LD_INT 6
20132: PPUSH
20133: CALL 7289 0 3
// end ;
20137: LD_VAR 0 1
20141: RET
// function SaveGlobalVariables ; begin
20142: LD_INT 0
20144: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20145: LD_EXP 26
20149: PPUSH
20150: LD_STRING 03_KurinOpinion_1
20152: PPUSH
20153: CALL_OW 39
// end ; end_of_file
20157: LD_VAR 0 1
20161: RET
// export function CustomEvent ( event ) ; begin
20162: LD_INT 0
20164: PPUSH
// end ;
20165: LD_VAR 0 2
20169: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20170: LD_INT 0
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
20176: PPUSH
20177: PPUSH
20178: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20179: LD_ADDR_VAR 0 2
20183: PUSH
20184: LD_INT 22
20186: PUSH
20187: LD_INT 3
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: LD_INT 21
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PPUSH
20208: CALL_OW 69
20212: PUSH
20213: FOR_IN
20214: IFFALSE 20411
// if GetTaskList ( i ) > 0 then
20216: LD_VAR 0 2
20220: PPUSH
20221: CALL_OW 437
20225: PUSH
20226: LD_INT 0
20228: GREATER
20229: IFFALSE 20409
// for j = 1 to GetTaskList ( i ) do
20231: LD_ADDR_VAR 0 3
20235: PUSH
20236: DOUBLE
20237: LD_INT 1
20239: DEC
20240: ST_TO_ADDR
20241: LD_VAR 0 2
20245: PPUSH
20246: CALL_OW 437
20250: PUSH
20251: FOR_TO
20252: IFFALSE 20407
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20254: LD_ADDR_VAR 0 4
20258: PUSH
20259: LD_VAR 0 2
20263: PPUSH
20264: CALL_OW 437
20268: PUSH
20269: LD_VAR 0 3
20273: ARRAY
20274: PUSH
20275: LD_INT 4
20277: ARRAY
20278: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20279: LD_ADDR_VAR 0 8
20283: PUSH
20284: LD_VAR 0 2
20288: PPUSH
20289: CALL_OW 437
20293: PUSH
20294: LD_VAR 0 3
20298: ARRAY
20299: PUSH
20300: LD_INT 5
20302: ARRAY
20303: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20304: LD_ADDR_VAR 0 6
20308: PUSH
20309: LD_VAR 0 2
20313: PPUSH
20314: CALL_OW 437
20318: PUSH
20319: LD_VAR 0 3
20323: ARRAY
20324: PUSH
20325: LD_INT 2
20327: ARRAY
20328: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 2
20338: PPUSH
20339: CALL_OW 437
20343: PUSH
20344: LD_VAR 0 3
20348: ARRAY
20349: PUSH
20350: LD_INT 3
20352: ARRAY
20353: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20354: LD_VAR 0 4
20358: PPUSH
20359: CALL_OW 255
20363: PUSH
20364: LD_INT 6
20366: EQUAL
20367: PUSH
20368: LD_VAR 0 2
20372: PPUSH
20373: CALL_OW 437
20377: PUSH
20378: LD_VAR 0 3
20382: ARRAY
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: PUSH
20388: LD_STRING <
20390: EQUAL
20391: AND
20392: IFFALSE 20405
// SetTaskList ( i , [ ] ) ;
20394: LD_VAR 0 2
20398: PPUSH
20399: EMPTY
20400: PPUSH
20401: CALL_OW 446
// end ;
20405: GO 20251
20407: POP
20408: POP
20409: GO 20213
20411: POP
20412: POP
// end ;
20413: PPOPN 8
20415: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
20416: LD_VAR 0 2
20420: PUSH
20421: LD_INT 6
20423: EQUAL
20424: IFFALSE 20438
// SetSide ( building , 6 ) ;
20426: LD_VAR 0 1
20430: PPUSH
20431: LD_INT 6
20433: PPUSH
20434: CALL_OW 235
// end ;
20438: PPOPN 3
20440: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
20441: LD_INT 0
20443: PPUSH
20444: PPUSH
// begin diffUnits = [ ] ;
20445: LD_ADDR_VAR 0 2
20449: PUSH
20450: EMPTY
20451: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 255
20461: PUSH
20462: LD_INT 3
20464: EQUAL
20465: PUSH
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 266
20475: PUSH
20476: LD_INT 0
20478: EQUAL
20479: AND
20480: PUSH
20481: LD_VAR 0 1
20485: PPUSH
20486: LD_INT 21
20488: PPUSH
20489: CALL_OW 308
20493: AND
20494: IFFALSE 20508
// SetBName ( building , kagan ) ;
20496: LD_VAR 0 1
20500: PPUSH
20501: LD_STRING kagan
20503: PPUSH
20504: CALL_OW 500
// if GetSide ( building ) = 6 then
20508: LD_VAR 0 1
20512: PPUSH
20513: CALL_OW 255
20517: PUSH
20518: LD_INT 6
20520: EQUAL
20521: IFFALSE 20702
// begin if GetBType ( building ) = b_ext_noncombat then
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL_OW 266
20532: PUSH
20533: LD_INT 19
20535: EQUAL
20536: IFFALSE 20542
// begin SpawnKirovSupport ;
20538: CALL 4506 0 0
// end ; if GetBType ( building ) = b_depot then
20542: LD_VAR 0 1
20546: PPUSH
20547: CALL_OW 266
20551: PUSH
20552: LD_INT 0
20554: EQUAL
20555: IFFALSE 20601
// begin kirovOilDepot = building ;
20557: LD_ADDR_EXP 66
20561: PUSH
20562: LD_VAR 0 1
20566: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
20567: LD_EXP 66
20571: PPUSH
20572: CALL_OW 274
20576: PPUSH
20577: LD_INT 2
20579: PPUSH
20580: LD_INT 3000
20582: PPUSH
20583: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
20587: LD_EXP 80
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 266
20610: PUSH
20611: LD_INT 31
20613: EQUAL
20614: PUSH
20615: LD_VAR 0 1
20619: PPUSH
20620: CALL_OW 266
20624: PUSH
20625: LD_INT 4
20627: EQUAL
20628: OR
20629: PUSH
20630: LD_VAR 0 1
20634: PPUSH
20635: LD_INT 20
20637: PPUSH
20638: CALL_OW 308
20642: AND
20643: IFFALSE 20702
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
20645: LD_EXP 76
20649: PPUSH
20650: LD_INT 25
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 56
20662: PUSH
20663: EMPTY
20664: LIST
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: LD_INT 60
20671: PUSH
20672: EMPTY
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: PPUSH
20684: CALL_OW 72
20688: PUSH
20689: LD_INT 1
20691: ARRAY
20692: PPUSH
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL_OW 120
// end ; end ;
20702: PPOPN 3
20704: END
// on UpgradeComplete ( building ) do var i , tmp ;
20705: LD_INT 0
20707: PPUSH
20708: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 255
20718: PUSH
20719: LD_INT 3
20721: EQUAL
20722: PUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 266
20732: PUSH
20733: LD_INT 3
20735: EQUAL
20736: AND
20737: PUSH
20738: LD_EXP 8
20742: NOT
20743: AND
20744: IFFALSE 20755
// Dial_UpgradeWorkshop ( building ) ;
20746: LD_VAR 0 1
20750: PPUSH
20751: CALL 23689 0 1
// end ;
20755: PPOPN 3
20757: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
20758: LD_VAR 0 1
20762: PUSH
20763: LD_EXP 47
20767: EQUAL
20768: IFFALSE 20774
// Lose_Burlak ;
20770: CALL 19500 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
20774: LD_VAR 0 1
20778: PUSH
20779: LD_EXP 58
20783: EQUAL
20784: PUSH
20785: LD_EXP 28
20789: NOT
20790: AND
20791: IFFALSE 20797
// Lose_Omicron ;
20793: CALL 19515 0 0
// end ;
20797: PPOPN 1
20799: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
20800: LD_VAR 0 1
20804: PUSH
20805: LD_INT 3
20807: EQUAL
20808: PUSH
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 6
20816: EQUAL
20817: AND
20818: IFFALSE 20824
// Lose_SelfAttack ;
20820: CALL 19545 0 0
// end ;
20824: PPOPN 2
20826: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 255
20836: PUSH
20837: LD_INT 6
20839: EQUAL
20840: IFFALSE 21005
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 264
20851: PUSH
20852: LD_INT 51
20854: EQUAL
20855: PUSH
20856: LD_EXP 72
20860: NOT
20861: AND
20862: IFFALSE 20876
// kirovTransportCargo = vehicle else
20864: LD_ADDR_EXP 72
20868: PUSH
20869: LD_VAR 0 1
20873: ST_TO_ADDR
20874: GO 20948
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
20876: LD_VAR 0 1
20880: PPUSH
20881: CALL_OW 264
20885: PUSH
20886: LD_INT 51
20888: EQUAL
20889: IFFALSE 20948
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_EXP 66
20900: PPUSH
20901: LD_INT 2
20903: PPUSH
20904: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
20908: LD_VAR 0 1
20912: PPUSH
20913: LD_INT 137
20915: PPUSH
20916: LD_INT 99
20918: PPUSH
20919: CALL_OW 171
// AddComHold ( vehicle ) ;
20923: LD_VAR 0 1
20927: PPUSH
20928: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
20932: LD_ADDR_EXP 73
20936: PUSH
20937: LD_EXP 73
20941: PUSH
20942: LD_VAR 0 1
20946: ADD
20947: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 264
20957: PUSH
20958: LD_INT 42
20960: PUSH
20961: LD_INT 43
20963: PUSH
20964: LD_INT 44
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: IN
20972: IFFALSE 21005
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
20974: LD_ADDR_EXP 74
20978: PUSH
20979: LD_EXP 74
20983: PUSH
20984: LD_VAR 0 1
20988: ADD
20989: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
20990: LD_VAR 0 1
20994: PPUSH
20995: LD_INT 137
20997: PPUSH
20998: LD_INT 99
21000: PPUSH
21001: CALL_OW 111
// end ; end ; end ;
21005: PPOPN 2
21007: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21008: LD_VAR 0 3
21012: PUSH
21013: LD_INT 6
21015: EQUAL
21016: PUSH
21017: LD_VAR 0 2
21021: PUSH
21022: LD_EXP 30
21026: IN
21027: NOT
21028: AND
21029: IFFALSE 21052
// begin ComExitVehicle ( capturing_unit ) ;
21031: LD_VAR 0 4
21035: PPUSH
21036: CALL_OW 121
// SetSide ( new , 6 ) ;
21040: LD_VAR 0 1
21044: PPUSH
21045: LD_INT 6
21047: PPUSH
21048: CALL_OW 235
// end ; end ;
21052: PPOPN 4
21054: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 255
21064: PUSH
21065: LD_INT 6
21067: EQUAL
21068: PUSH
21069: LD_EXP 19
21073: AND
21074: IFFALSE 21102
// begin wait ( 0 0$2 ) ;
21076: LD_INT 70
21078: PPUSH
21079: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21083: LD_VAR 0 1
21087: PPUSH
21088: LD_INT 78
21090: PPUSH
21091: LD_INT 39
21093: PPUSH
21094: CALL_OW 174
// KirovAttackOmicron ;
21098: CALL 17628 0 0
// end ; end ;
21102: PPOPN 2
21104: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21105: LD_VAR 0 2
21109: PPUSH
21110: CALL_OW 255
21114: PUSH
21115: LD_INT 6
21117: EQUAL
21118: PUSH
21119: LD_VAR 0 1
21123: PUSH
21124: LD_INT 39
21126: EQUAL
21127: AND
21128: IFFALSE 21189
// begin MountWeaponTurrent ;
21130: CALL 17092 0 0
// wait ( 3 3$30 ) ;
21134: LD_INT 7350
21136: PPUSH
21137: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21141: LD_INT 22
21143: PUSH
21144: LD_INT 6
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 21
21153: PUSH
21154: LD_INT 3
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: PPUSH
21176: CALL_OW 69
21180: PUSH
21181: LD_INT 1
21183: ARRAY
21184: PPUSH
21185: CALL 17158 0 1
// end ; end ; end_of_file
21189: PPOPN 2
21191: END
// export function MissionIntro ; var unit ; begin
21192: LD_INT 0
21194: PPUSH
21195: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21196: LD_EXP 47
21200: PUSH
21201: LD_EXP 59
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21214: LD_EXP 47
21218: PUSH
21219: LD_EXP 61
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PPUSH
21228: LD_EXP 59
21232: PPUSH
21233: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21237: LD_EXP 59
21241: PPUSH
21242: LD_EXP 47
21246: PPUSH
21247: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21251: LD_INT 3
21253: PPUSH
21254: LD_INT 24
21256: PPUSH
21257: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21261: LD_EXP 51
21265: PPUSH
21266: CALL_OW 305
21270: NOT
21271: PUSH
21272: LD_EXP 52
21276: PPUSH
21277: CALL_OW 305
21281: NOT
21282: AND
21283: IFFALSE 21371
// begin Say ( Kurin , D1a-Kur-1 ) ;
21285: LD_EXP 59
21289: PPUSH
21290: LD_STRING D1a-Kur-1
21292: PPUSH
21293: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21297: LD_EXP 47
21301: PPUSH
21302: LD_STRING D1a-Bur-1
21304: PPUSH
21305: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21309: LD_EXP 59
21313: PPUSH
21314: LD_STRING D1a-Kur-2
21316: PPUSH
21317: CALL_OW 88
// if platonovOpinion <= 1 then
21321: LD_EXP 27
21325: PUSH
21326: LD_INT 1
21328: LESSEQUAL
21329: IFFALSE 21345
// Say ( Kurin , D1a-Kur-2a ) else
21331: LD_EXP 59
21335: PPUSH
21336: LD_STRING D1a-Kur-2a
21338: PPUSH
21339: CALL_OW 88
21343: GO 21357
// Say ( Kurin , D1a-Kur-2b ) ;
21345: LD_EXP 59
21349: PPUSH
21350: LD_STRING D1a-Kur-2b
21352: PPUSH
21353: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21357: LD_EXP 47
21361: PPUSH
21362: LD_STRING D1a-Bur-2
21364: PPUSH
21365: CALL_OW 88
// end else
21369: GO 21407
// begin Say ( Kurin , D1b-Kur-1 ) ;
21371: LD_EXP 59
21375: PPUSH
21376: LD_STRING D1b-Kur-1
21378: PPUSH
21379: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21383: LD_EXP 61
21387: PPUSH
21388: LD_STRING D1b-Bel-1
21390: PPUSH
21391: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
21395: LD_EXP 59
21399: PPUSH
21400: LD_STRING D1b-Kur-2
21402: PPUSH
21403: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
21407: LD_EXP 59
21411: PPUSH
21412: LD_STRING D2-Kur-1
21414: PPUSH
21415: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
21419: LD_EXP 47
21423: PPUSH
21424: LD_STRING D2-Bur-1
21426: PPUSH
21427: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
21431: LD_EXP 59
21435: PPUSH
21436: LD_STRING D2-Kur-2
21438: PPUSH
21439: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING D2-Bur-2
21450: PPUSH
21451: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
21455: LD_EXP 59
21459: PPUSH
21460: LD_STRING D2-Kur-3
21462: PPUSH
21463: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21467: LD_INT 1
21469: PPUSH
21470: LD_INT 6
21472: PPUSH
21473: LD_INT 1
21475: PPUSH
21476: LD_INT 1
21478: PPUSH
21479: CALL_OW 80
// PrepareAmericansMissionIntro ;
21483: CALL 5567 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
21487: LD_EXP 81
21491: PPUSH
21492: LD_INT 28
21494: PPUSH
21495: LD_INT 35
21497: PPUSH
21498: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
21502: LD_INT 93
21504: PPUSH
21505: LD_INT 36
21507: PPUSH
21508: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
21512: LD_INT 93
21514: PPUSH
21515: LD_INT 36
21517: PPUSH
21518: LD_INT 3
21520: PPUSH
21521: LD_INT 9
21523: NEG
21524: PPUSH
21525: CALL_OW 330
// wait ( 0 0$6 ) ;
21529: LD_INT 210
21531: PPUSH
21532: CALL_OW 67
// CenterOnUnits ( Popov ) ;
21536: LD_EXP 60
21540: PPUSH
21541: CALL_OW 85
// wait ( 0 0$1 ) ;
21545: LD_INT 35
21547: PPUSH
21548: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
21552: LD_EXP 60
21556: PPUSH
21557: LD_STRING D2-Pop-3
21559: PPUSH
21560: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21564: LD_EXP 47
21568: PUSH
21569: LD_EXP 59
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PPUSH
21578: CALL_OW 87
// wait ( 0 0$1 ) ;
21582: LD_INT 35
21584: PPUSH
21585: CALL_OW 67
// for unit in amIntroUnits do
21589: LD_ADDR_VAR 0 2
21593: PUSH
21594: LD_EXP 81
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21613
// RemoveUnit ( unit ) ;
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 64
21611: GO 21599
21613: POP
21614: POP
// Say ( Kurin , D2-Kur-4 ) ;
21615: LD_EXP 59
21619: PPUSH
21620: LD_STRING D2-Kur-4
21622: PPUSH
21623: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
21627: LD_EXP 47
21631: PPUSH
21632: LD_STRING D2-Bur-4
21634: PPUSH
21635: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
21639: LD_EXP 59
21643: PPUSH
21644: LD_STRING D2-Kur-5
21646: PPUSH
21647: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
21651: LD_EXP 47
21655: PPUSH
21656: LD_STRING D2-Bur-5
21658: PPUSH
21659: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
21663: LD_EXP 59
21667: PPUSH
21668: LD_STRING D2-Kur-6
21670: PPUSH
21671: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
21675: LD_EXP 48
21679: PPUSH
21680: CALL_OW 305
21684: IFFALSE 21700
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21686: LD_ADDR_EXP 37
21690: PUSH
21691: LD_EXP 37
21695: PUSH
21696: LD_INT 1
21698: MINUS
21699: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
21700: LD_EXP 50
21704: PPUSH
21705: CALL_OW 305
21709: IFFALSE 21725
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21711: LD_ADDR_EXP 37
21715: PUSH
21716: LD_EXP 37
21720: PUSH
21721: LD_INT 1
21723: MINUS
21724: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
21725: LD_EXP 49
21729: PPUSH
21730: CALL_OW 305
21734: IFFALSE 21750
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21736: LD_ADDR_EXP 37
21740: PUSH
21741: LD_EXP 37
21745: PUSH
21746: LD_INT 1
21748: MINUS
21749: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
21750: LD_EXP 37
21754: PPUSH
21755: CALL 7387 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
21759: LD_INT 93
21761: PPUSH
21762: LD_INT 36
21764: PPUSH
21765: LD_INT 3
21767: PPUSH
21768: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21772: LD_INT 3
21774: PPUSH
21775: LD_INT 24
21777: PPUSH
21778: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21782: LD_INT 22
21784: PUSH
21785: LD_INT 3
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 21
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PPUSH
21806: CALL_OW 69
21810: PPUSH
21811: CALL_OW 122
// wait ( 0 0$1 ) ;
21815: LD_INT 35
21817: PPUSH
21818: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
21822: LD_INT 22
21824: PUSH
21825: LD_INT 3
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 21
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PPUSH
21846: CALL_OW 69
21850: PPUSH
21851: LD_EXP 58
21855: PPUSH
21856: CALL_OW 250
21860: PPUSH
21861: LD_EXP 58
21865: PPUSH
21866: CALL_OW 251
21870: PPUSH
21871: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
21875: LD_INT 35
21877: PPUSH
21878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
21882: LD_EXP 47
21886: PPUSH
21887: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
21891: LD_EXP 47
21895: PPUSH
21896: LD_EXP 58
21900: PPUSH
21901: CALL_OW 296
21905: PUSH
21906: LD_INT 6
21908: LESS
21909: IFFALSE 21875
// InGameOff ;
21911: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
21915: LD_STRING M1
21917: PPUSH
21918: CALL_OW 337
// SaveForQuickRestart ;
21922: CALL_OW 22
// counterEnable = true ;
21926: LD_ADDR_EXP 87
21930: PUSH
21931: LD_INT 1
21933: ST_TO_ADDR
// counterIndex = 1 ;
21934: LD_ADDR_EXP 88
21938: PUSH
21939: LD_INT 1
21941: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21942: LD_INT 3
21944: PPUSH
21945: LD_INT 24
21947: PPUSH
21948: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
21952: LD_INT 6
21954: PPUSH
21955: LD_INT 22
21957: PUSH
21958: LD_INT 6
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 21
21967: PUSH
21968: LD_INT 3
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 30
21977: PUSH
21978: LD_INT 6
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: LIST
21989: PPUSH
21990: CALL_OW 69
21994: PUSH
21995: LD_INT 1
21997: ARRAY
21998: PPUSH
21999: LD_INT 3
22001: PPUSH
22002: CALL 8702 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22006: LD_INT 1
22008: PPUSH
22009: LD_INT 22
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 21
22021: PUSH
22022: LD_INT 3
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 30
22031: PUSH
22032: LD_INT 7
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 69
22048: PUSH
22049: LD_INT 1
22051: ARRAY
22052: PPUSH
22053: LD_INT 1
22055: PPUSH
22056: CALL 8702 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22060: LD_INT 18
22062: PPUSH
22063: LD_INT 22
22065: PUSH
22066: LD_INT 6
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 21
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 25
22085: PUSH
22086: LD_INT 2
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 70
22102: PPUSH
22103: LD_INT 17
22105: PPUSH
22106: LD_INT 159
22108: PPUSH
22109: LD_INT 116
22111: PPUSH
22112: LD_INT 0
22114: PPUSH
22115: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22119: LD_INT 18
22121: PPUSH
22122: LD_INT 22
22124: PUSH
22125: LD_INT 6
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 21
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 25
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: PPUSH
22157: CALL_OW 70
22161: PPUSH
22162: LD_INT 19
22164: PPUSH
22165: LD_INT 161
22167: PPUSH
22168: LD_INT 115
22170: PPUSH
22171: LD_INT 5
22173: PPUSH
22174: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22178: LD_INT 18
22180: PPUSH
22181: LD_INT 22
22183: PUSH
22184: LD_INT 6
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 21
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 25
22203: PUSH
22204: LD_INT 2
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: PPUSH
22216: CALL_OW 70
22220: PPUSH
22221: LD_EXP 65
22225: PPUSH
22226: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22230: LD_EXP 77
22234: PPUSH
22235: CALL_OW 139
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22239: LD_EXP 77
22243: PUSH
22244: LD_EXP 60
22248: DIFF
22249: PPUSH
22250: LD_EXP 67
22254: PPUSH
22255: CALL_OW 180
// ComWalk ( ruScout ) ;
22259: LD_EXP 62
22263: PPUSH
22264: CALL_OW 138
// wait ( 0 0$1 ) ;
22268: LD_INT 35
22270: PPUSH
22271: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
22275: LD_EXP 62
22279: PUSH
22280: LD_EXP 60
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: LD_INT 99
22291: PPUSH
22292: LD_INT 37
22294: PPUSH
22295: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
22299: LD_EXP 62
22303: PUSH
22304: LD_EXP 60
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PPUSH
22313: LD_INT 88
22315: PPUSH
22316: LD_INT 60
22318: PPUSH
22319: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
22323: LD_EXP 62
22327: PUSH
22328: LD_EXP 60
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PPUSH
22337: LD_INT 129
22339: PPUSH
22340: LD_INT 99
22342: PPUSH
22343: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
22347: LD_EXP 60
22351: PUSH
22352: LD_EXP 62
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PPUSH
22361: LD_EXP 65
22365: PPUSH
22366: CALL_OW 180
// end ;
22370: LD_VAR 0 1
22374: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
22375: LD_EXP 22
22379: IFFALSE 22651
22381: GO 22383
22383: DISABLE
22384: LD_INT 0
22386: PPUSH
22387: PPUSH
22388: PPUSH
22389: PPUSH
22390: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
22391: LD_ADDR_VAR 0 4
22395: PUSH
22396: LD_VAR 0 4
22400: PUSH
22401: LD_EXP 59
22405: ADD
22406: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
22407: LD_ADDR_VAR 0 4
22411: PUSH
22412: LD_VAR 0 4
22416: PUSH
22417: LD_EXP 77
22421: ADD
22422: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
22423: LD_ADDR_VAR 0 4
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: LD_EXP 69
22437: ADD
22438: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
22439: LD_ADDR_VAR 0 5
22443: PUSH
22444: LD_INT 18
22446: PPUSH
22447: LD_INT 22
22449: PUSH
22450: LD_INT 6
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 21
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PPUSH
22471: CALL_OW 70
22475: PUSH
22476: LD_VAR 0 4
22480: DIFF
22481: ST_TO_ADDR
// pom = 6 ;
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_INT 6
22489: ST_TO_ADDR
// if canTakeUnits then
22490: LD_VAR 0 5
22494: IFFALSE 22618
// for i = 1 to canTakeUnits do
22496: LD_ADDR_VAR 0 1
22500: PUSH
22501: DOUBLE
22502: LD_INT 1
22504: DEC
22505: ST_TO_ADDR
22506: LD_VAR 0 5
22510: PUSH
22511: FOR_TO
22512: IFFALSE 22616
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
22514: LD_VAR 0 5
22518: PUSH
22519: LD_VAR 0 1
22523: ARRAY
22524: PPUSH
22525: CALL_OW 257
22529: PUSH
22530: LD_INT 3
22532: NONEQUAL
22533: IFFALSE 22580
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
22535: LD_VAR 0 5
22539: PUSH
22540: LD_VAR 0 1
22544: ARRAY
22545: PPUSH
22546: LD_EXP 21
22550: PPUSH
22551: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
22555: LD_VAR 0 5
22559: PUSH
22560: LD_VAR 0 1
22564: ARRAY
22565: PPUSH
22566: LD_INT 1
22568: PPUSH
22569: CALL_OW 183
// wait ( 0 0$1 ) ;
22573: LD_INT 35
22575: PPUSH
22576: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
22580: LD_VAR 0 5
22584: PUSH
22585: LD_VAR 0 1
22589: ARRAY
22590: PPUSH
22591: LD_EXP 21
22595: PPUSH
22596: CALL_OW 120
// pom = pom - 1 ;
22600: LD_ADDR_VAR 0 3
22604: PUSH
22605: LD_VAR 0 3
22609: PUSH
22610: LD_INT 1
22612: MINUS
22613: ST_TO_ADDR
// end ;
22614: GO 22511
22616: POP
22617: POP
// if pom > 0 then
22618: LD_VAR 0 3
22622: PUSH
22623: LD_INT 0
22625: GREATER
22626: IFFALSE 22651
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
22628: LD_ADDR_EXP 79
22632: PUSH
22633: LD_EXP 79
22637: PPUSH
22638: LD_INT 3
22640: PPUSH
22641: LD_VAR 0 3
22645: PPUSH
22646: CALL_OW 1
22650: ST_TO_ADDR
// end ;
22651: PPOPN 5
22653: END
// every 0 0$1 trigger kirovTransportCargo do
22654: LD_EXP 72
22658: IFFALSE 22707
22660: GO 22662
22662: DISABLE
// begin enable ;
22663: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
22664: LD_EXP 72
22668: PPUSH
22669: LD_EXP 66
22673: PPUSH
22674: LD_INT 2
22676: PPUSH
22677: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
22681: LD_EXP 72
22685: PPUSH
22686: LD_EXP 65
22690: PPUSH
22691: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
22695: LD_EXP 72
22699: PPUSH
22700: LD_INT 100
22702: PPUSH
22703: CALL_OW 240
// end ;
22707: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
22708: LD_INT 78
22710: PPUSH
22711: LD_INT 112
22713: PPUSH
22714: LD_INT 3
22716: PPUSH
22717: CALL_OW 440
22721: IFFALSE 22775
22723: GO 22725
22725: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
22726: LD_INT 78
22728: PPUSH
22729: LD_INT 112
22731: PPUSH
22732: CALL_OW 84
// DialogueOn ;
22736: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
22740: LD_EXP 47
22744: PPUSH
22745: LD_STRING D2a-Bur-1
22747: PPUSH
22748: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
22752: LD_EXP 59
22756: PPUSH
22757: LD_STRING D2a-Kur-1
22759: PPUSH
22760: CALL_OW 94
// DialogueOff ;
22764: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
22768: LD_STRING M2
22770: PPUSH
22771: CALL_OW 337
// end ;
22775: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
22776: LD_EXP 10
22780: NOT
22781: IFFALSE 22989
22783: GO 22785
22785: DISABLE
22786: LD_INT 0
22788: PPUSH
// begin enable ;
22789: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
22790: LD_ADDR_VAR 0 1
22794: PUSH
22795: LD_INT 22
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 21
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 23
22817: PUSH
22818: LD_INT 3
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: LD_INT 31
22830: PUSH
22831: LD_INT 21
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 31
22840: PUSH
22841: LD_INT 23
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: PPUSH
22859: CALL_OW 69
22863: PUSH
22864: FOR_IN
22865: IFFALSE 22987
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
22867: LD_VAR 0 1
22871: PPUSH
22872: LD_INT 48
22874: PPUSH
22875: LD_INT 81
22877: PPUSH
22878: CALL_OW 297
22882: PUSH
22883: LD_INT 7
22885: LESS
22886: IFFALSE 22985
// begin dialog_track = true ;
22888: LD_ADDR_EXP 10
22892: PUSH
22893: LD_INT 1
22895: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
22896: LD_INT 48
22898: PPUSH
22899: LD_INT 81
22901: PPUSH
22902: CALL_OW 86
// DialogueOn ;
22906: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22910: LD_EXP 47
22914: PPUSH
22915: LD_STRING D5a-Bur-1
22917: PPUSH
22918: CALL_OW 88
// DialogueOff ;
22922: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
22926: LD_INT 82
22928: PPUSH
22929: LD_INT 3
22931: PPUSH
22932: CALL_OW 321
22936: PUSH
22937: LD_INT 0
22939: EQUAL
22940: IFFALSE 22955
// SetTech ( 82 , 3 , state_enabled ) ;
22942: LD_INT 82
22944: PPUSH
22945: LD_INT 3
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
22955: LD_INT 84
22957: PPUSH
22958: LD_INT 3
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22968: LD_INT 16
22970: PPUSH
22971: LD_INT 3
22973: PPUSH
22974: LD_INT 1
22976: PPUSH
22977: CALL_OW 324
// exit ;
22981: POP
22982: POP
22983: GO 22989
// end ;
22985: GO 22864
22987: POP
22988: POP
// end ;
22989: PPOPN 1
22991: END
// every 5 5$30 do
22992: GO 22994
22994: DISABLE
// begin PrepareScholtze ;
22995: CALL 5354 0 0
// wait ( 0 0$2 ) ;
22999: LD_INT 70
23001: PPUSH
23002: CALL_OW 67
// DialogueOn ;
23006: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23010: LD_EXP 53
23014: PPUSH
23015: LD_STRING D4-Sch-1
23017: PPUSH
23018: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23022: LD_EXP 47
23026: PPUSH
23027: LD_STRING D4-Bur-1
23029: PPUSH
23030: CALL_OW 88
// DialogueOff ;
23034: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23038: LD_STRING M4
23040: PPUSH
23041: CALL_OW 337
// ComHold ( Scholtze ) ;
23045: LD_EXP 53
23049: PPUSH
23050: CALL_OW 140
// scholtzeSpawned = true ;
23054: LD_ADDR_EXP 6
23058: PUSH
23059: LD_INT 1
23061: ST_TO_ADDR
// end ;
23062: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23063: LD_INT 3
23065: PPUSH
23066: LD_EXP 53
23070: PPUSH
23071: CALL_OW 292
23075: PUSH
23076: LD_EXP 6
23080: AND
23081: PUSH
23082: LD_EXP 7
23086: NOT
23087: AND
23088: IFFALSE 23269
23090: GO 23092
23092: DISABLE
// begin scholtzeSaved = true ;
23093: LD_ADDR_EXP 7
23097: PUSH
23098: LD_INT 1
23100: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23101: LD_EXP 53
23105: PPUSH
23106: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23110: LD_EXP 53
23114: PPUSH
23115: LD_INT 3
23117: PPUSH
23118: CALL_OW 235
// DialogueOn ;
23122: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23126: LD_EXP 53
23130: PPUSH
23131: LD_STRING D4a-Sch-1
23133: PPUSH
23134: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23138: LD_EXP 47
23142: PPUSH
23143: LD_STRING D4a-Bur-1
23145: PPUSH
23146: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23150: LD_EXP 53
23154: PPUSH
23155: LD_STRING D4a-Sch-2
23157: PPUSH
23158: CALL_OW 88
// DialogueOff ;
23162: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
23166: LD_EXP 83
23170: PPUSH
23171: LD_INT 28
23173: PPUSH
23174: LD_INT 36
23176: PPUSH
23177: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
23181: LD_STRING MScholtzeOut
23183: PPUSH
23184: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
23188: LD_INT 49
23190: PPUSH
23191: LD_INT 3
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
23201: LD_INT 51
23203: PPUSH
23204: LD_INT 3
23206: PPUSH
23207: LD_INT 1
23209: PPUSH
23210: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
23214: LD_INT 82
23216: PPUSH
23217: LD_INT 3
23219: PPUSH
23220: CALL_OW 321
23224: PUSH
23225: LD_INT 0
23227: EQUAL
23228: IFFALSE 23243
// SetTech ( 82 , 3 , state_enabled ) ;
23230: LD_INT 82
23232: PPUSH
23233: LD_INT 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
23243: LD_INT 83
23245: PPUSH
23246: LD_INT 3
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
23256: LD_INT 19
23258: PPUSH
23259: LD_INT 3
23261: PPUSH
23262: LD_INT 1
23264: PPUSH
23265: CALL_OW 324
// end ;
23269: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
23270: LD_EXP 53
23274: PPUSH
23275: CALL_OW 305
23279: PUSH
23280: LD_EXP 7
23284: NOT
23285: AND
23286: IFFALSE 23295
23288: GO 23290
23290: DISABLE
// PrepareAmericanPatrol ;
23291: CALL 6258 0 0
23295: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
23296: LD_EXP 53
23300: PPUSH
23301: CALL_OW 305
23305: PUSH
23306: LD_EXP 53
23310: PPUSH
23311: CALL_OW 255
23315: PUSH
23316: LD_INT 8
23318: EQUAL
23319: AND
23320: PUSH
23321: LD_EXP 46
23325: PUSH
23326: LD_INT 35
23328: GREATER
23329: AND
23330: IFFALSE 23506
23332: GO 23334
23334: DISABLE
23335: LD_INT 0
23337: PPUSH
23338: PPUSH
// begin enable ;
23339: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
23340: LD_ADDR_EXP 46
23344: PUSH
23345: LD_EXP 46
23349: PUSH
23350: LD_INT 35
23352: MINUS
23353: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
23354: LD_ADDR_VAR 0 1
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_INT 0
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: LD_INT 25
23371: PUSH
23372: LD_INT 12
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PPUSH
23383: CALL_OW 69
23387: PUSH
23388: FOR_IN
23389: IFFALSE 23428
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_EXP 53
23400: PPUSH
23401: CALL_OW 250
23405: PPUSH
23406: LD_EXP 53
23410: PPUSH
23411: CALL_OW 251
23415: PPUSH
23416: LD_INT 12
23418: PPUSH
23419: LD_INT 0
23421: PPUSH
23422: CALL 10001 0 5
23426: GO 23388
23428: POP
23429: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_INT 22
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 25
23447: PUSH
23448: LD_INT 14
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PPUSH
23459: CALL_OW 69
23463: PUSH
23464: FOR_IN
23465: IFFALSE 23504
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
23467: LD_VAR 0 2
23471: PPUSH
23472: LD_EXP 53
23476: PPUSH
23477: CALL_OW 250
23481: PPUSH
23482: LD_EXP 53
23486: PPUSH
23487: CALL_OW 251
23491: PPUSH
23492: LD_INT 12
23494: PPUSH
23495: LD_INT 0
23497: PPUSH
23498: CALL 10001 0 5
23502: GO 23464
23504: POP
23505: POP
// end ;
23506: PPOPN 2
23508: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
23509: LD_INT 1
23511: PPUSH
23512: LD_EXP 53
23516: PPUSH
23517: CALL_OW 292
23521: PUSH
23522: LD_EXP 83
23526: AND
23527: PUSH
23528: LD_EXP 7
23532: NOT
23533: AND
23534: IFFALSE 23688
23536: GO 23538
23538: DISABLE
// begin enable ;
23539: ENABLE
// if not IsPlaced ( Scholtze ) then
23540: LD_EXP 53
23544: PPUSH
23545: CALL_OW 305
23549: NOT
23550: IFFALSE 23554
// exit ;
23552: GO 23688
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
23554: LD_EXP 83
23558: PUSH
23559: LD_INT 1
23561: ARRAY
23562: PPUSH
23563: CALL_OW 320
23567: PUSH
23568: LD_EXP 53
23572: EQUAL
23573: PUSH
23574: LD_EXP 83
23578: PUSH
23579: LD_INT 2
23581: ARRAY
23582: PPUSH
23583: CALL_OW 320
23587: PUSH
23588: LD_EXP 53
23592: EQUAL
23593: OR
23594: IFFALSE 23688
// begin DialogueOn ;
23596: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
23600: LD_EXP 53
23604: PPUSH
23605: LD_STRING D4b-Sch-1
23607: PPUSH
23608: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
23612: LD_EXP 83
23616: PUSH
23617: LD_INT 2
23619: ARRAY
23620: PPUSH
23621: LD_STRING D4b-Sol1-1
23623: PPUSH
23624: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
23628: LD_EXP 83
23632: PUSH
23633: LD_INT 1
23635: ARRAY
23636: PPUSH
23637: LD_STRING D4b-Sol2-1
23639: PPUSH
23640: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
23644: LD_EXP 53
23648: PPUSH
23649: LD_STRING D4b-Sch-2
23651: PPUSH
23652: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
23656: LD_EXP 47
23660: PPUSH
23661: LD_STRING D4b-Bur-2
23663: PPUSH
23664: CALL_OW 88
// DialogueOff ;
23668: CALL_OW 7
// Killunit ( Scholtze ) ;
23672: LD_EXP 53
23676: PPUSH
23677: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
23681: LD_STRING MScholtzeDel
23683: PPUSH
23684: CALL_OW 337
// end ; end ;
23688: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
23689: LD_INT 0
23691: PPUSH
23692: PPUSH
23693: PPUSH
// dialog_workshop = true ;
23694: LD_ADDR_EXP 8
23698: PUSH
23699: LD_INT 1
23701: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
23702: LD_INT 22
23704: PUSH
23705: LD_INT 3
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 30
23714: PUSH
23715: LD_INT 26
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: NOT
23731: IFFALSE 24120
// begin CenterNowOnUnits ( building ) ;
23733: LD_VAR 0 1
23737: PPUSH
23738: CALL_OW 87
// DialogueOn ;
23742: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
23746: LD_EXP 47
23750: PPUSH
23751: LD_STRING D3aa-Bur-1
23753: PPUSH
23754: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
23758: LD_EXP 53
23762: PPUSH
23763: CALL_OW 302
23767: PUSH
23768: LD_EXP 53
23772: PPUSH
23773: CALL_OW 255
23777: PUSH
23778: LD_INT 3
23780: EQUAL
23781: AND
23782: IFFALSE 23798
// Say ( Scholtze , D3aa-Sch-1 ) else
23784: LD_EXP 53
23788: PPUSH
23789: LD_STRING D3aa-Sch-1
23791: PPUSH
23792: CALL_OW 88
23796: GO 24104
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23798: LD_ADDR_VAR 0 3
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_INT 3
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 21
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 26
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 50
23845: PUSH
23846: EMPTY
23847: LIST
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: PPUSH
23856: CALL_OW 69
23860: PUSH
23861: LD_EXP 47
23865: PUSH
23866: LD_EXP 48
23870: PUSH
23871: LD_EXP 50
23875: PUSH
23876: LD_EXP 51
23880: PUSH
23881: LD_EXP 52
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: DIFF
23893: ST_TO_ADDR
// if maleSci then
23894: LD_VAR 0 3
23898: IFFALSE 23918
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
23900: LD_VAR 0 3
23904: PUSH
23905: LD_INT 1
23907: ARRAY
23908: PPUSH
23909: LD_STRING D3aa-Sci1-1
23911: PPUSH
23912: CALL_OW 88
23916: GO 24104
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23918: LD_ADDR_VAR 0 4
23922: PUSH
23923: LD_INT 22
23925: PUSH
23926: LD_INT 3
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 21
23935: PUSH
23936: LD_INT 1
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 26
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 50
23955: PUSH
23956: EMPTY
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 69
23969: PUSH
23970: LD_EXP 47
23974: PUSH
23975: LD_EXP 48
23979: PUSH
23980: LD_EXP 50
23984: PUSH
23985: LD_EXP 51
23989: PUSH
23990: LD_EXP 52
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: DIFF
24002: ST_TO_ADDR
// if maleOthers then
24003: LD_VAR 0 4
24007: IFFALSE 24027
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24009: LD_VAR 0 4
24013: PUSH
24014: LD_INT 1
24016: ARRAY
24017: PPUSH
24018: LD_STRING D3aa-Sci1-1
24020: PPUSH
24021: CALL_OW 88
24025: GO 24104
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: LD_INT 22
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 21
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: PUSH
24052: LD_INT 26
24054: PUSH
24055: LD_INT 1
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 50
24064: PUSH
24065: EMPTY
24066: LIST
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: PPUSH
24074: CALL_OW 69
24078: PUSH
24079: LD_EXP 47
24083: PUSH
24084: EMPTY
24085: LIST
24086: DIFF
24087: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24088: LD_VAR 0 4
24092: PUSH
24093: LD_INT 1
24095: ARRAY
24096: PPUSH
24097: LD_STRING D3aa-Sci1-1
24099: PPUSH
24100: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24104: LD_EXP 47
24108: PPUSH
24109: LD_STRING D3aa-Bur-2
24111: PPUSH
24112: CALL_OW 88
// DialogueOff ;
24116: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24120: LD_STRING M3
24122: PPUSH
24123: CALL_OW 337
// end ;
24127: LD_VAR 0 2
24131: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24132: LD_EXP 9
24136: NOT
24137: IFFALSE 24475
24139: GO 24141
24141: DISABLE
24142: LD_INT 0
24144: PPUSH
24145: PPUSH
// begin enable ;
24146: ENABLE
// for amUnit in amSupportTroops do
24147: LD_ADDR_VAR 0 1
24151: PUSH
24152: LD_EXP 82
24156: PUSH
24157: FOR_IN
24158: IFFALSE 24473
// begin if See ( 3 , amUnit ) then
24160: LD_INT 3
24162: PPUSH
24163: LD_VAR 0 1
24167: PPUSH
24168: CALL_OW 292
24172: IFFALSE 24471
// begin dialog_amSupportTroops = true ;
24174: LD_ADDR_EXP 9
24178: PUSH
24179: LD_INT 1
24181: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 87
// DialogueOn ;
24191: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24195: LD_ADDR_VAR 0 2
24199: PUSH
24200: LD_INT 22
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 21
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 26
24222: PUSH
24223: LD_INT 1
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 50
24232: PUSH
24233: EMPTY
24234: LIST
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: PPUSH
24242: CALL_OW 69
24246: PUSH
24247: LD_EXP 47
24251: PUSH
24252: LD_EXP 48
24256: PUSH
24257: LD_EXP 50
24261: PUSH
24262: LD_EXP 51
24266: PUSH
24267: LD_EXP 52
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: DIFF
24279: ST_TO_ADDR
// if randomMale then
24280: LD_VAR 0 2
24284: IFFALSE 24351
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
24286: LD_INT 22
24288: PUSH
24289: LD_INT 3
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 21
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 26
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 50
24318: PUSH
24319: EMPTY
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: PPUSH
24328: CALL_OW 69
24332: PPUSH
24333: LD_STRING D3b-RSol1-1
24335: PPUSH
24336: LD_STRING 
24338: PPUSH
24339: LD_INT 0
24341: PPUSH
24342: LD_INT 1
24344: PPUSH
24345: CALL 6968 0 5
24349: GO 24428
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24351: LD_ADDR_VAR 0 2
24355: PUSH
24356: LD_INT 22
24358: PUSH
24359: LD_INT 3
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 26
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 50
24388: PUSH
24389: EMPTY
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 69
24402: PUSH
24403: LD_EXP 47
24407: PUSH
24408: EMPTY
24409: LIST
24410: DIFF
24411: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
24412: LD_VAR 0 2
24416: PUSH
24417: LD_INT 1
24419: ARRAY
24420: PPUSH
24421: LD_STRING D3b-RSol1-1
24423: PPUSH
24424: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
24428: LD_EXP 48
24432: PPUSH
24433: CALL_OW 302
24437: IFFALSE 24451
// Say ( Gnyevko , D3b-Gny-1 ) ;
24439: LD_EXP 48
24443: PPUSH
24444: LD_STRING D3b-Gny-1
24446: PPUSH
24447: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
24451: LD_EXP 47
24455: PPUSH
24456: LD_STRING D3b-Bur-1
24458: PPUSH
24459: CALL_OW 88
// DialogueOff ;
24463: CALL_OW 7
// exit ;
24467: POP
24468: POP
24469: GO 24475
// end ; end ;
24471: GO 24157
24473: POP
24474: POP
// end ;
24475: PPOPN 2
24477: END
// every 2 2$0 trigger dialog_amSupportTroops do
24478: LD_EXP 9
24482: IFFALSE 24566
24484: GO 24486
24486: DISABLE
// begin if IsOK ( Kovalyuk ) then
24487: LD_EXP 50
24491: PPUSH
24492: CALL_OW 302
24496: IFFALSE 24510
// Say ( Kovalyuk , D3b-Kov-1 ) ;
24498: LD_EXP 50
24502: PPUSH
24503: LD_STRING D3b-Kov-1
24505: PPUSH
24506: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
24510: LD_INT 22
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 21
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 26
24532: PUSH
24533: LD_INT 1
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: LIST
24544: PPUSH
24545: CALL_OW 69
24549: PPUSH
24550: LD_STRING D3b-RSol1-2
24552: PPUSH
24553: LD_STRING 
24555: PPUSH
24556: LD_INT 0
24558: PPUSH
24559: LD_INT 0
24561: PPUSH
24562: CALL 6968 0 5
// end ;
24566: END
// every 0 0$1 trigger canExitBattlefield do
24567: LD_EXP 24
24571: IFFALSE 24589
24573: GO 24575
24575: DISABLE
// begin enable ;
24576: ENABLE
// SetLives ( Kurin , 1000 ) ;
24577: LD_EXP 59
24581: PPUSH
24582: LD_INT 1000
24584: PPUSH
24585: CALL_OW 234
// end ;
24589: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
24590: LD_EXP 39
24594: PUSH
24595: LD_INT 35
24597: LESS
24598: IFFALSE 24826
24600: GO 24602
24602: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
24603: LD_EXP 59
24607: PPUSH
24608: CALL_OW 87
// InGameOn ;
24612: CALL_OW 8
// DialogueOn ;
24616: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
24620: LD_EXP 59
24624: PPUSH
24625: LD_STRING D5-Kur-1
24627: PPUSH
24628: CALL_OW 94
// case Query ( QVehicles ) of 1 :
24632: LD_STRING QVehicles
24634: PPUSH
24635: CALL_OW 97
24639: PUSH
24640: LD_INT 1
24642: DOUBLE
24643: EQUAL
24644: IFTRUE 24648
24646: GO 24691
24648: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
24649: LD_EXP 47
24653: PPUSH
24654: LD_STRING D6a-Bur-1
24656: PPUSH
24657: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
24661: LD_EXP 59
24665: PPUSH
24666: LD_STRING D6a-Kur-1
24668: PPUSH
24669: CALL_OW 94
// meetNearOmicronBase = true ;
24673: LD_ADDR_EXP 19
24677: PUSH
24678: LD_INT 1
24680: ST_TO_ADDR
// kurinCheckVehicles = true ;
24681: LD_ADDR_EXP 18
24685: PUSH
24686: LD_INT 1
24688: ST_TO_ADDR
// end ; 2 :
24689: GO 24818
24691: LD_INT 2
24693: DOUBLE
24694: EQUAL
24695: IFTRUE 24699
24697: GO 24746
24699: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
24700: LD_EXP 47
24704: PPUSH
24705: LD_STRING D6b-Bur-1
24707: PPUSH
24708: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
24712: LD_EXP 59
24716: PPUSH
24717: LD_STRING D6b-Kur-1
24719: PPUSH
24720: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
24724: LD_EXP 47
24728: PPUSH
24729: LD_STRING D6b-Bur-2
24731: PPUSH
24732: CALL_OW 88
// meetNearOmicronBase = true ;
24736: LD_ADDR_EXP 19
24740: PUSH
24741: LD_INT 1
24743: ST_TO_ADDR
// end ; 3 :
24744: GO 24818
24746: LD_INT 3
24748: DOUBLE
24749: EQUAL
24750: IFTRUE 24754
24752: GO 24817
24754: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
24755: LD_EXP 47
24759: PPUSH
24760: LD_STRING D6c-Bur-1
24762: PPUSH
24763: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
24767: LD_EXP 59
24771: PPUSH
24772: LD_STRING D6c-Kur-1
24774: PPUSH
24775: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
24779: LD_EXP 47
24783: PPUSH
24784: LD_STRING D6c-Bur-2
24786: PPUSH
24787: CALL_OW 88
// kurinGiveMoreTime = true ;
24791: LD_ADDR_EXP 13
24795: PUSH
24796: LD_INT 1
24798: ST_TO_ADDR
// kurinOpinion = 0 ;
24799: LD_ADDR_EXP 26
24803: PUSH
24804: LD_INT 0
24806: ST_TO_ADDR
// counterIndex = 4 ;
24807: LD_ADDR_EXP 88
24811: PUSH
24812: LD_INT 4
24814: ST_TO_ADDR
// end ; end ;
24815: GO 24818
24817: POP
// InGameOff ;
24818: CALL_OW 9
// DialogueOff ;
24822: CALL_OW 7
// end ;
24826: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
24827: LD_EXP 14
24831: PUSH
24832: LD_INT 35
24834: LESS
24835: PUSH
24836: LD_EXP 13
24840: AND
24841: IFFALSE 24874
24843: GO 24845
24845: DISABLE
// begin DialogueOn ;
24846: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
24850: LD_EXP 59
24854: PPUSH
24855: LD_STRING D6c-Kur-2
24857: PPUSH
24858: CALL_OW 94
// DialogueOff ;
24862: CALL_OW 7
// meetNearOmicronBase = true ;
24866: LD_ADDR_EXP 19
24870: PUSH
24871: LD_INT 1
24873: ST_TO_ADDR
// end ;
24874: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
24875: LD_EXP 19
24879: IFFALSE 25534
24881: GO 24883
24883: DISABLE
24884: LD_INT 0
24886: PPUSH
24887: PPUSH
24888: PPUSH
24889: PPUSH
24890: PPUSH
// begin mechs = [ ] ;
24891: LD_ADDR_VAR 0 3
24895: PUSH
24896: EMPTY
24897: ST_TO_ADDR
// vehs = [ ] ;
24898: LD_ADDR_VAR 0 4
24902: PUSH
24903: EMPTY
24904: ST_TO_ADDR
// haveVehs = 0 ;
24905: LD_ADDR_VAR 0 5
24909: PUSH
24910: LD_INT 0
24912: ST_TO_ADDR
// uc_side = 6 ;
24913: LD_ADDR_OWVAR 20
24917: PUSH
24918: LD_INT 6
24920: ST_TO_ADDR
// uc_nation = 3 ;
24921: LD_ADDR_OWVAR 21
24925: PUSH
24926: LD_INT 3
24928: ST_TO_ADDR
// for i := 1 to 2 do
24929: LD_ADDR_VAR 0 1
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_INT 2
24941: PUSH
24942: FOR_TO
24943: IFFALSE 25042
// begin PrepareMechanic ( false , 2 ) ;
24945: LD_INT 0
24947: PPUSH
24948: LD_INT 2
24950: PPUSH
24951: CALL_OW 383
// mech = CreateHuman ;
24955: LD_ADDR_VAR 0 2
24959: PUSH
24960: CALL_OW 44
24964: ST_TO_ADDR
// mechs = mechs ^ mech ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_VAR 0 3
24974: PUSH
24975: LD_VAR 0 2
24979: ADD
24980: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
24981: LD_VAR 0 2
24985: PPUSH
24986: LD_EXP 65
24990: PPUSH
24991: CALL_OW 52
// ComExitBuilding ( mech ) ;
24995: LD_VAR 0 2
24999: PPUSH
25000: CALL_OW 122
// wait ( 0 0$1 ) ;
25004: LD_INT 35
25006: PPUSH
25007: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25011: LD_VAR 0 2
25015: PPUSH
25016: LD_EXP 58
25020: PPUSH
25021: CALL_OW 250
25025: PPUSH
25026: LD_EXP 58
25030: PPUSH
25031: CALL_OW 251
25035: PPUSH
25036: CALL_OW 171
// end ;
25040: GO 24942
25042: POP
25043: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25044: LD_INT 22
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 21
25056: PUSH
25057: LD_INT 2
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 23
25066: PUSH
25067: LD_INT 3
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 69
25083: PUSH
25084: LD_INT 22
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 21
25096: PUSH
25097: LD_INT 1
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PPUSH
25108: CALL_OW 69
25112: EQUAL
25113: IFFALSE 25123
// produceOnlyForYou = true ;
25115: LD_ADDR_EXP 17
25119: PUSH
25120: LD_INT 1
25122: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25123: LD_INT 700
25125: PPUSH
25126: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25130: LD_INT 22
25132: PUSH
25133: LD_INT 3
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 21
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 23
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 3
25162: PUSH
25163: LD_INT 34
25165: PUSH
25166: LD_INT 51
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PPUSH
25183: CALL_OW 69
25187: PUSH
25188: LD_INT 22
25190: PUSH
25191: LD_INT 3
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 21
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PPUSH
25212: CALL_OW 69
25216: PUSH
25217: LD_INT 2
25219: PLUS
25220: GREATEREQUAL
25221: IFFALSE 25504
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
25223: LD_ADDR_VAR 0 4
25227: PUSH
25228: LD_VAR 0 4
25232: PUSH
25233: LD_INT 22
25235: PUSH
25236: LD_INT 3
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 23
25255: PUSH
25256: LD_INT 3
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 3
25265: PUSH
25266: LD_INT 34
25268: PUSH
25269: LD_INT 51
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 3
25282: PUSH
25283: LD_INT 59
25285: PUSH
25286: EMPTY
25287: LIST
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: PPUSH
25300: CALL_OW 69
25304: PUSH
25305: LD_INT 1
25307: ARRAY
25308: ADD
25309: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
25310: LD_ADDR_VAR 0 4
25314: PUSH
25315: LD_VAR 0 4
25319: PUSH
25320: LD_INT 22
25322: PUSH
25323: LD_INT 3
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 21
25332: PUSH
25333: LD_INT 2
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 23
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: LD_INT 34
25355: PUSH
25356: LD_INT 51
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 3
25369: PUSH
25370: LD_INT 59
25372: PUSH
25373: EMPTY
25374: LIST
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: PPUSH
25387: CALL_OW 69
25391: PUSH
25392: LD_INT 2
25394: ARRAY
25395: ADD
25396: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
25397: LD_ADDR_EXP 74
25401: PUSH
25402: LD_EXP 74
25406: PUSH
25407: LD_VAR 0 4
25411: ADD
25412: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
25413: LD_VAR 0 4
25417: PPUSH
25418: LD_INT 6
25420: PPUSH
25421: CALL_OW 235
// produceMoreVehicles = true ;
25425: LD_ADDR_EXP 16
25429: PUSH
25430: LD_INT 1
25432: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
25433: LD_VAR 0 3
25437: PUSH
25438: LD_INT 1
25440: ARRAY
25441: PPUSH
25442: LD_VAR 0 4
25446: PUSH
25447: LD_INT 1
25449: ARRAY
25450: PPUSH
25451: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
25455: LD_VAR 0 3
25459: PUSH
25460: LD_INT 2
25462: ARRAY
25463: PPUSH
25464: LD_VAR 0 4
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PPUSH
25473: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
25477: LD_EXP 18
25481: PUSH
25482: LD_EXP 26
25486: PUSH
25487: LD_INT 0
25489: EQUAL
25490: NOT
25491: AND
25492: IFFALSE 25502
// kurinOpinion = 1 ;
25494: LD_ADDR_EXP 26
25498: PUSH
25499: LD_INT 1
25501: ST_TO_ADDR
// end else
25502: GO 25534
// begin if kurinCheckVehicles then
25504: LD_EXP 18
25508: IFFALSE 25534
// begin DialogueOn ;
25510: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
25514: LD_EXP 59
25518: PPUSH
25519: LD_STRING D6d-Kur-1
25521: PPUSH
25522: CALL_OW 94
// DialogueOff ;
25526: CALL_OW 7
// Lose_Vehicles ;
25530: CALL 19530 0 0
// end ; end ; end ;
25534: PPOPN 5
25536: END
// every 0 0$1 trigger meetNearOmicronBase do
25537: LD_EXP 19
25541: IFFALSE 25761
25543: GO 25545
25545: DISABLE
// begin spawnCrates = false ;
25546: LD_ADDR_EXP 5
25550: PUSH
25551: LD_INT 0
25553: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
25554: LD_INT 6
25556: PPUSH
25557: LD_INT 1
25559: PPUSH
25560: LD_INT 2
25562: PPUSH
25563: LD_INT 1
25565: PPUSH
25566: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
25570: LD_INT 0
25572: PPUSH
25573: LD_INT 3
25575: PPUSH
25576: LD_INT 0
25578: PPUSH
25579: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
25583: LD_STRING M3a
25585: PPUSH
25586: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
25590: LD_STRING M5
25592: PPUSH
25593: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
25597: LD_INT 15
25599: PPUSH
25600: LD_INT 1
25602: PPUSH
25603: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
25607: LD_EXP 74
25611: PPUSH
25612: LD_INT 75
25614: PPUSH
25615: LD_INT 38
25617: PPUSH
25618: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
25622: LD_EXP 73
25626: PPUSH
25627: LD_INT 75
25629: PPUSH
25630: LD_INT 38
25632: PPUSH
25633: CALL_OW 111
// counterIndex = 2 ;
25637: LD_ADDR_EXP 88
25641: PUSH
25642: LD_INT 2
25644: ST_TO_ADDR
// if not kurinOpinion = 0 then
25645: LD_EXP 26
25649: PUSH
25650: LD_INT 0
25652: EQUAL
25653: NOT
25654: IFFALSE 25664
// kurinOpinion = 1 ;
25656: LD_ADDR_EXP 26
25660: PUSH
25661: LD_INT 1
25663: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
25664: LD_INT 1
25666: PPUSH
25667: LD_INT 1
25669: PPUSH
25670: LD_INT 22
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 21
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PPUSH
25694: CALL_OW 69
25698: PPUSH
25699: LD_INT 13
25701: PPUSH
25702: LD_INT 28
25704: PPUSH
25705: LD_INT 17
25707: PPUSH
25708: LD_INT 29
25710: PPUSH
25711: LD_INT 2
25713: PUSH
25714: LD_INT 3
25716: PUSH
25717: LD_INT 4
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: PUSH
25725: LD_OWVAR 67
25729: ARRAY
25730: PPUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 3
25736: PUSH
25737: LD_INT 4
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: PUSH
25745: LD_OWVAR 67
25749: ARRAY
25750: PPUSH
25751: LD_INT 0
25753: PPUSH
25754: LD_INT 0
25756: PPUSH
25757: CALL 11881 0 11
// end ;
25761: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
25762: LD_EXP 15
25766: PUSH
25767: LD_INT 35
25769: LESS
25770: PUSH
25771: LD_EXP 88
25775: PUSH
25776: LD_INT 2
25778: EQUAL
25779: AND
25780: IFFALSE 25829
25782: GO 25784
25784: DISABLE
// begin DialogueOn ;
25785: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
25789: LD_EXP 59
25793: PPUSH
25794: LD_STRING D7a-Kur-1
25796: PPUSH
25797: CALL_OW 94
// DialogueOff ;
25801: CALL_OW 7
// counterIndex = 3 ;
25805: LD_ADDR_EXP 88
25809: PUSH
25810: LD_INT 3
25812: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
25813: LD_ADDR_EXP 15
25817: PUSH
25818: LD_INT 4200
25820: ST_TO_ADDR
// kurinOpinion = 0 ;
25821: LD_ADDR_EXP 26
25825: PUSH
25826: LD_INT 0
25828: ST_TO_ADDR
// end ;
25829: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
25830: LD_EXP 15
25834: PUSH
25835: LD_INT 35
25837: LESS
25838: PUSH
25839: LD_EXP 88
25843: PUSH
25844: LD_INT 3
25846: EQUAL
25847: AND
25848: IFFALSE 25857
25850: GO 25852
25852: DISABLE
// Lose_Delay ;
25853: CALL 19560 0 0
25857: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25858: LD_EXP 19
25862: PUSH
25863: LD_INT 15
25865: PPUSH
25866: LD_INT 22
25868: PUSH
25869: LD_INT 3
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 21
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PPUSH
25890: CALL_OW 71
25894: PUSH
25895: LD_INT 0
25897: EQUAL
25898: AND
25899: IFFALSE 25987
25901: GO 25903
25903: DISABLE
// begin counterEnable = false ;
25904: LD_ADDR_EXP 87
25908: PUSH
25909: LD_INT 0
25911: ST_TO_ADDR
// Display_strings = [ ] ;
25912: LD_ADDR_OWVAR 47
25916: PUSH
25917: EMPTY
25918: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
25919: LD_INT 15
25921: PPUSH
25922: LD_INT 0
25924: PPUSH
25925: CALL_OW 424
// canExitBattlefield = false ;
25929: LD_ADDR_EXP 24
25933: PUSH
25934: LD_INT 0
25936: ST_TO_ADDR
// DialogueOn ;
25937: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
25941: LD_EXP 47
25945: PPUSH
25946: LD_STRING D7-Bur-1
25948: PPUSH
25949: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
25953: LD_EXP 59
25957: PPUSH
25958: LD_STRING D7-Kur-1
25960: PPUSH
25961: CALL_OW 94
// DialogueOff ;
25965: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25969: LD_STRING M5a
25971: PPUSH
25972: CALL_OW 337
// Query ( QRefuel ) ;
25976: LD_STRING QRefuel
25978: PPUSH
25979: CALL_OW 97
// KirovAttackOmicron ;
25983: CALL 17628 0 0
// end ;
25987: END
// every 1 trigger not canExitBattlefield do var unit ;
25988: LD_EXP 24
25992: NOT
25993: IFFALSE 26162
25995: GO 25997
25997: DISABLE
25998: LD_INT 0
26000: PPUSH
// begin enable ;
26001: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26002: LD_ADDR_VAR 0 1
26006: PUSH
26007: LD_INT 22
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 21
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 21
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: CALL_OW 69
26053: PUSH
26054: FOR_IN
26055: IFFALSE 26160
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26057: LD_VAR 0 1
26061: PPUSH
26062: LD_INT 26
26064: PPUSH
26065: CALL_OW 308
26069: NOT
26070: PUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_INT 21
26078: PUSH
26079: LD_INT 1
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PPUSH
26086: CALL_OW 72
26090: PUSH
26091: LD_VAR 0 1
26095: PPUSH
26096: CALL_OW 313
26100: OR
26101: AND
26102: IFFALSE 26158
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26104: LD_VAR 0 1
26108: PPUSH
26109: LD_INT 26
26111: PPUSH
26112: CALL_OW 113
// if not dialog_stop then
26116: LD_EXP 11
26120: NOT
26121: IFFALSE 26158
// begin dialog_stop = true ;
26123: LD_ADDR_EXP 11
26127: PUSH
26128: LD_INT 1
26130: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26131: LD_EXP 59
26135: PPUSH
26136: LD_STRING D12-Kur-1
26138: PPUSH
26139: CALL_OW 88
// wait ( 0 0$5 ) ;
26143: LD_INT 175
26145: PPUSH
26146: CALL_OW 67
// dialog_stop = false ;
26150: LD_ADDR_EXP 11
26154: PUSH
26155: LD_INT 0
26157: ST_TO_ADDR
// end ; end ;
26158: GO 26054
26160: POP
26161: POP
// end ;
26162: PPOPN 1
26164: END
// every 1 do var unit ;
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
// begin enable ;
26171: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26172: LD_ADDR_VAR 0 1
26176: PUSH
26177: LD_INT 22
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 2
26189: PUSH
26190: LD_INT 21
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 21
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PPUSH
26219: CALL_OW 69
26223: PUSH
26224: FOR_IN
26225: IFFALSE 26300
// if IsInArea ( unit , SecondKurinBase ) then
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_INT 20
26234: PPUSH
26235: CALL_OW 308
26239: IFFALSE 26298
// begin ComMoveXY ( unit , 200 , 114 ) ;
26241: LD_VAR 0 1
26245: PPUSH
26246: LD_INT 200
26248: PPUSH
26249: LD_INT 114
26251: PPUSH
26252: CALL_OW 111
// if not dialog_stop then
26256: LD_EXP 11
26260: NOT
26261: IFFALSE 26298
// begin dialog_stop = true ;
26263: LD_ADDR_EXP 11
26267: PUSH
26268: LD_INT 1
26270: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26271: LD_EXP 59
26275: PPUSH
26276: LD_STRING D12-Kur-1
26278: PPUSH
26279: CALL_OW 88
// wait ( 0 0$5 ) ;
26283: LD_INT 175
26285: PPUSH
26286: CALL_OW 67
// dialog_stop = false ;
26290: LD_ADDR_EXP 11
26294: PUSH
26295: LD_INT 0
26297: ST_TO_ADDR
// end ; end ;
26298: GO 26224
26300: POP
26301: POP
// end ;
26302: PPOPN 1
26304: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
26305: LD_EXP 19
26309: NOT
26310: PUSH
26311: LD_INT 290
26313: PPUSH
26314: CALL_OW 302
26318: AND
26319: IFFALSE 26635
26321: GO 26323
26323: DISABLE
26324: LD_INT 0
26326: PPUSH
26327: PPUSH
// begin enable ;
26328: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
26329: LD_ADDR_VAR 0 1
26333: PUSH
26334: LD_INT 13
26336: PPUSH
26337: LD_INT 22
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 2
26349: PUSH
26350: LD_INT 21
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 21
26372: PUSH
26373: LD_INT 3
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 70
26394: PUSH
26395: FOR_IN
26396: IFFALSE 26633
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
26398: LD_VAR 0 1
26402: PPUSH
26403: LD_INT 22
26405: PUSH
26406: LD_INT 3
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: LD_INT 21
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 21
26428: PUSH
26429: LD_INT 2
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: LIST
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PPUSH
26445: CALL_OW 69
26449: PPUSH
26450: LD_VAR 0 1
26454: PPUSH
26455: CALL_OW 74
26459: PPUSH
26460: CALL_OW 296
26464: PUSH
26465: LD_INT 17
26467: LESS
26468: IFFALSE 26631
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
26470: LD_INT 22
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 21
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 69
26516: PPUSH
26517: LD_VAR 0 1
26521: PPUSH
26522: CALL_OW 74
26526: PPUSH
26527: LD_INT 69
26529: PPUSH
26530: LD_INT 85
26532: PPUSH
26533: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
26537: LD_ADDR_VAR 0 2
26541: PUSH
26542: LD_INT 1
26544: PPUSH
26545: LD_INT 2
26547: PPUSH
26548: CALL_OW 12
26552: ST_TO_ADDR
// if not dialog_stop then
26553: LD_EXP 11
26557: NOT
26558: IFFALSE 26631
// begin dialog_stop = true ;
26560: LD_ADDR_EXP 11
26564: PUSH
26565: LD_INT 1
26567: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
26568: LD_VAR 0 2
26572: PUSH
26573: LD_INT 1
26575: EQUAL
26576: PUSH
26577: LD_EXP 48
26581: PPUSH
26582: CALL_OW 302
26586: NOT
26587: OR
26588: IFFALSE 26604
// SayRadio ( Kurin , D11-Kur-1 ) else
26590: LD_EXP 59
26594: PPUSH
26595: LD_STRING D11-Kur-1
26597: PPUSH
26598: CALL_OW 94
26602: GO 26616
// Say ( Gnyevko , D11-Gny-1 ) ;
26604: LD_EXP 48
26608: PPUSH
26609: LD_STRING D11-Gny-1
26611: PPUSH
26612: CALL_OW 88
// wait ( 0 0$5 ) ;
26616: LD_INT 175
26618: PPUSH
26619: CALL_OW 67
// dialog_stop = false ;
26623: LD_ADDR_EXP 11
26627: PUSH
26628: LD_INT 0
26630: ST_TO_ADDR
// end ; end ;
26631: GO 26395
26633: POP
26634: POP
// end ;
26635: PPOPN 2
26637: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding ;
26638: LD_INT 290
26640: PPUSH
26641: CALL_OW 301
26645: PUSH
26646: LD_INT 22
26648: PUSH
26649: LD_INT 1
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 21
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PPUSH
26670: CALL_OW 69
26674: PUSH
26675: LD_INT 5
26677: LESS
26678: AND
26679: IFFALSE 28234
26681: GO 26683
26683: DISABLE
26684: LD_INT 0
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
// begin omicronSurrender = true ;
26692: LD_ADDR_EXP 23
26696: PUSH
26697: LD_INT 1
26699: ST_TO_ADDR
// canExitBattlefield = true ;
26700: LD_ADDR_EXP 24
26704: PUSH
26705: LD_INT 1
26707: ST_TO_ADDR
// enableOmicronAI = false ;
26708: LD_ADDR_EXP 29
26712: PUSH
26713: LD_INT 0
26715: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
26716: LD_INT 1
26718: PPUSH
26719: LD_INT 3
26721: PPUSH
26722: LD_INT 1
26724: PPUSH
26725: LD_INT 0
26727: PPUSH
26728: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
26732: LD_INT 2
26734: PPUSH
26735: LD_INT 3
26737: PPUSH
26738: LD_INT 1
26740: PPUSH
26741: LD_INT 1
26743: PPUSH
26744: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
26748: LD_EXP 47
26752: PPUSH
26753: CALL_OW 87
// uc_side = 1 ;
26757: LD_ADDR_OWVAR 20
26761: PUSH
26762: LD_INT 1
26764: ST_TO_ADDR
// uc_nation = 1 ;
26765: LD_ADDR_OWVAR 21
26769: PUSH
26770: LD_INT 1
26772: ST_TO_ADDR
// hc_name :=  ;
26773: LD_ADDR_OWVAR 26
26777: PUSH
26778: LD_STRING 
26780: ST_TO_ADDR
// hc_gallery =  ;
26781: LD_ADDR_OWVAR 33
26785: PUSH
26786: LD_STRING 
26788: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
26789: LD_INT 1
26791: PPUSH
26792: LD_INT 1
26794: PPUSH
26795: CALL_OW 381
// tmpUs = CreateHuman ;
26799: LD_ADDR_VAR 0 2
26803: PUSH
26804: CALL_OW 44
26808: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
26809: LD_INT 22
26811: PUSH
26812: LD_INT 3
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL_OW 69
26823: PPUSH
26824: CALL_OW 141
// InGameOn ;
26828: CALL_OW 8
// DialogueOn ;
26832: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
26836: LD_INT 26
26838: PPUSH
26839: LD_INT 33
26841: PPUSH
26842: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_STRING D8-Sol1-1
26853: PPUSH
26854: CALL_OW 94
// if IsOk ( Kovalyuk ) then
26858: LD_EXP 50
26862: PPUSH
26863: CALL_OW 302
26867: IFFALSE 26881
// Say ( Kovalyuk , D8-Kov-1 ) ;
26869: LD_EXP 50
26873: PPUSH
26874: LD_STRING D8-Kov-1
26876: PPUSH
26877: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
26881: LD_ADDR_VAR 0 3
26885: PUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 3
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 26
26908: PUSH
26909: LD_INT 1
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 69
26925: PPUSH
26926: LD_STRING D8-RSol1-1
26928: PPUSH
26929: LD_STRING 
26931: PPUSH
26932: LD_INT 0
26934: PPUSH
26935: LD_INT 0
26937: PPUSH
26938: CALL 6968 0 5
26942: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
26943: LD_EXP 48
26947: PPUSH
26948: CALL_OW 302
26952: IFFALSE 26966
// Say ( Gnyevko , D8-Gny-1 ) ;
26954: LD_EXP 48
26958: PPUSH
26959: LD_STRING D8-Gny-1
26961: PPUSH
26962: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
26966: LD_INT 22
26968: PUSH
26969: LD_INT 3
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 21
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 26
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 69
27005: PUSH
27006: LD_VAR 0 3
27010: DIFF
27011: PPUSH
27012: LD_STRING D8-RSol2-1
27014: PPUSH
27015: LD_STRING 
27017: PPUSH
27018: LD_INT 0
27020: PPUSH
27021: LD_INT 0
27023: PPUSH
27024: CALL 6968 0 5
// DialogueOff ;
27028: CALL_OW 7
// PrepareArabian ;
27032: CALL 6416 0 0
// CenterNowOnXY ( 234 , 122 ) ;
27036: LD_INT 234
27038: PPUSH
27039: LD_INT 122
27041: PPUSH
27042: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
27046: LD_EXP 85
27050: PPUSH
27051: LD_INT 221
27053: PPUSH
27054: LD_INT 110
27056: PPUSH
27057: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27061: LD_EXP 86
27065: PPUSH
27066: LD_INT 21
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PPUSH
27076: CALL_OW 72
27080: PPUSH
27081: LD_INT 221
27083: PPUSH
27084: LD_INT 110
27086: PPUSH
27087: CALL_OW 114
// wait ( 0 0$7 ) ;
27091: LD_INT 245
27093: PPUSH
27094: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
27098: LD_EXP 86
27102: PPUSH
27103: LD_INT 221
27105: PPUSH
27106: LD_INT 110
27108: PPUSH
27109: CALL_OW 174
// wait ( 0 0$8 ) ;
27113: LD_INT 280
27115: PPUSH
27116: CALL_OW 67
// music_nat = nation_arabian ;
27120: LD_ADDR_OWVAR 71
27124: PUSH
27125: LD_INT 2
27127: ST_TO_ADDR
// music_class = music_combat ;
27128: LD_ADDR_OWVAR 72
27132: PUSH
27133: LD_INT 1
27135: ST_TO_ADDR
// game_speed = 4 ;
27136: LD_ADDR_OWVAR 65
27140: PUSH
27141: LD_INT 4
27143: ST_TO_ADDR
// DialogueOn ;
27144: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
27148: LD_EXP 80
27152: PPUSH
27153: LD_STRING D9-Gri-1
27155: PPUSH
27156: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
27160: LD_EXP 59
27164: PPUSH
27165: LD_STRING D9-Kur-1
27167: PPUSH
27168: CALL_OW 94
// DialogueOff ;
27172: CALL_OW 7
// wait ( 0 0$2.5 ) ;
27176: LD_INT 88
27178: PPUSH
27179: CALL_OW 67
// DialogueOn ;
27183: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
27187: LD_EXP 80
27191: PPUSH
27192: LD_STRING D9-Gri-2
27194: PPUSH
27195: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
27199: LD_EXP 59
27203: PPUSH
27204: LD_STRING D9-Kur-2
27206: PPUSH
27207: CALL_OW 94
// DialogueOff ;
27211: CALL_OW 7
// repeat wait ( 1 ) ;
27215: LD_INT 1
27217: PPUSH
27218: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
27222: LD_EXP 80
27226: PPUSH
27227: CALL_OW 256
27231: PUSH
27232: LD_INT 1000
27234: LESS
27235: IFFALSE 27215
// DialogueOn ;
27237: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
27241: LD_EXP 80
27245: PPUSH
27246: LD_STRING D9-Gri-3
27248: PPUSH
27249: CALL_OW 94
// DialogueOff ;
27253: CALL_OW 7
// KillUnit ( Grishko ) ;
27257: LD_EXP 80
27261: PPUSH
27262: CALL_OW 66
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
27266: LD_EXP 76
27270: PPUSH
27271: LD_INT 25
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PPUSH
27281: CALL_OW 72
27285: PPUSH
27286: LD_INT 158
27288: PPUSH
27289: LD_INT 105
27291: PPUSH
27292: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
27296: LD_EXP 76
27300: PPUSH
27301: LD_INT 25
27303: PUSH
27304: LD_INT 4
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PPUSH
27311: CALL_OW 72
27315: PPUSH
27316: LD_INT 158
27318: PPUSH
27319: LD_INT 105
27321: PPUSH
27322: CALL_OW 111
// wait ( 0 0$12 ) ;
27326: LD_INT 420
27328: PPUSH
27329: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
27333: LD_EXP 59
27337: PPUSH
27338: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
27342: LD_EXP 59
27346: PPUSH
27347: LD_STRING D9-Kur-3
27349: PPUSH
27350: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
27354: LD_INT 176
27356: PPUSH
27357: LD_INT 110
27359: PPUSH
27360: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27364: LD_EXP 86
27368: PPUSH
27369: LD_INT 21
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 72
27383: PPUSH
27384: LD_INT 221
27386: PPUSH
27387: LD_INT 110
27389: PPUSH
27390: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
27394: LD_EXP 85
27398: PPUSH
27399: LD_INT 161
27401: PPUSH
27402: LD_INT 109
27404: PPUSH
27405: CALL_OW 114
// wait ( 0 0$7 ) ;
27409: LD_INT 245
27411: PPUSH
27412: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
27416: LD_EXP 86
27420: PPUSH
27421: LD_INT 161
27423: PPUSH
27424: LD_INT 109
27426: PPUSH
27427: CALL_OW 114
// wait ( 0 0$11 ) ;
27431: LD_INT 385
27433: PPUSH
27434: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
27438: LD_EXP 59
27442: PPUSH
27443: LD_EXP 65
27447: PPUSH
27448: CALL_OW 120
// DialogueOn ;
27452: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
27456: LD_EXP 59
27460: PPUSH
27461: LD_STRING D9a-Kur-1
27463: PPUSH
27464: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
27468: LD_EXP 47
27472: PPUSH
27473: LD_STRING D9a-Bur-1
27475: PPUSH
27476: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
27480: LD_EXP 59
27484: PPUSH
27485: LD_STRING D9a-Kur-2
27487: PPUSH
27488: CALL_OW 94
// DialogueOff ;
27492: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
27496: LD_EXP 77
27500: PPUSH
27501: CALL_OW 122
// wait ( 0 0$1 ) ;
27505: LD_INT 35
27507: PPUSH
27508: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
27512: LD_EXP 77
27516: PPUSH
27517: LD_EXP 58
27521: PPUSH
27522: CALL_OW 250
27526: PPUSH
27527: LD_EXP 58
27531: PPUSH
27532: CALL_OW 251
27536: PPUSH
27537: CALL_OW 111
// immortalSurvivors = true ;
27541: LD_ADDR_EXP 25
27545: PUSH
27546: LD_INT 1
27548: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
27549: LD_ADDR_VAR 0 2
27553: PUSH
27554: LD_INT 22
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 21
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 50
27576: PUSH
27577: EMPTY
27578: LIST
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: LIST
27584: PPUSH
27585: CALL_OW 69
27589: PUSH
27590: FOR_IN
27591: IFFALSE 27604
// RemoveUnit ( tmpUS ) ;
27593: LD_VAR 0 2
27597: PPUSH
27598: CALL_OW 64
27602: GO 27590
27604: POP
27605: POP
// wait ( 0 0$33 ) ;
27606: LD_INT 1155
27608: PPUSH
27609: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
27613: LD_INT 22
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 21
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PPUSH
27637: CALL_OW 69
27641: PPUSH
27642: CALL_OW 121
// wait ( 0 0$1 ) ;
27646: LD_INT 35
27648: PPUSH
27649: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
27653: LD_INT 22
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 21
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PPUSH
27677: CALL_OW 69
27681: PPUSH
27682: LD_EXP 60
27686: PPUSH
27687: CALL_OW 250
27691: PPUSH
27692: LD_EXP 60
27696: PPUSH
27697: CALL_OW 251
27701: PPUSH
27702: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
27706: LD_INT 22
27708: PUSH
27709: LD_INT 3
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 21
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PPUSH
27730: CALL_OW 69
27734: PPUSH
27735: LD_EXP 60
27739: PPUSH
27740: CALL_OW 250
27744: PPUSH
27745: LD_EXP 60
27749: PPUSH
27750: CALL_OW 251
27754: PPUSH
27755: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
27759: LD_EXP 47
27763: PPUSH
27764: CALL_OW 87
// wait ( 0 0$1 ) ;
27768: LD_INT 35
27770: PPUSH
27771: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
27775: LD_EXP 47
27779: PPUSH
27780: LD_EXP 60
27784: PPUSH
27785: CALL_OW 296
27789: PUSH
27790: LD_INT 6
27792: LESS
27793: IFFALSE 27706
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
27795: LD_EXP 47
27799: PUSH
27800: LD_EXP 60
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PPUSH
27809: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
27813: LD_EXP 47
27817: PPUSH
27818: LD_EXP 60
27822: PPUSH
27823: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
27827: LD_EXP 60
27831: PPUSH
27832: LD_EXP 47
27836: PPUSH
27837: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
27841: LD_EXP 47
27845: PPUSH
27846: LD_STRING D10a-Bur-1
27848: PPUSH
27849: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
27853: LD_EXP 60
27857: PPUSH
27858: LD_STRING D10a-Pop-1
27860: PPUSH
27861: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
27865: LD_EXP 47
27869: PPUSH
27870: LD_STRING D10a-Bur-2
27872: PPUSH
27873: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
27877: LD_EXP 60
27881: PPUSH
27882: LD_STRING D10a-Pop-2
27884: PPUSH
27885: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
27889: LD_EXP 47
27893: PPUSH
27894: LD_STRING D10a-Bur-3
27896: PPUSH
27897: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
27901: LD_EXP 60
27905: PPUSH
27906: LD_STRING D10a-Pop-3
27908: PPUSH
27909: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
27913: LD_EXP 47
27917: PPUSH
27918: LD_STRING D10a-Bur-4
27920: PPUSH
27921: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
27925: LD_EXP 60
27929: PPUSH
27930: LD_STRING D10a-Pop-4
27932: PPUSH
27933: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
27937: LD_EXP 47
27941: PPUSH
27942: LD_STRING D10a-Bur-5
27944: PPUSH
27945: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
27949: LD_EXP 60
27953: PPUSH
27954: LD_STRING D10a-Pop-5
27956: PPUSH
27957: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
27961: LD_INT 22
27963: PUSH
27964: LD_INT 3
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 21
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: PPUSH
27990: LD_INT 83
27992: PPUSH
27993: LD_INT 157
27995: PPUSH
27996: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
28000: LD_EXP 77
28004: PPUSH
28005: LD_INT 83
28007: PPUSH
28008: LD_INT 157
28010: PPUSH
28011: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
28015: LD_EXP 47
28019: PPUSH
28020: CALL_OW 87
// wait ( 0 0$1 ) ;
28024: LD_INT 35
28026: PPUSH
28027: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
28031: LD_EXP 47
28035: PPUSH
28036: LD_EXP 58
28040: PPUSH
28041: CALL_OW 296
28045: PUSH
28046: LD_INT 19
28048: GREATER
28049: IFFALSE 28015
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
28051: LD_INT 113
28053: PPUSH
28054: LD_INT 96
28056: PPUSH
28057: LD_INT 3
28059: PPUSH
28060: LD_INT 12
28062: NEG
28063: PPUSH
28064: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
28068: LD_INT 113
28070: PPUSH
28071: LD_INT 96
28073: PPUSH
28074: CALL_OW 86
// canDestroyBeriaBase = true ;
28078: LD_ADDR_EXP 28
28082: PUSH
28083: LD_INT 1
28085: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
28086: LD_ADDR_VAR 0 5
28090: PUSH
28091: LD_INT 25
28093: PPUSH
28094: LD_INT 22
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 21
28106: PUSH
28107: LD_INT 3
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PPUSH
28118: CALL_OW 70
28122: ST_TO_ADDR
// for i = 1 to beriaBuildings do
28123: LD_ADDR_VAR 0 1
28127: PUSH
28128: DOUBLE
28129: LD_INT 1
28131: DEC
28132: ST_TO_ADDR
28133: LD_VAR 0 5
28137: PUSH
28138: FOR_TO
28139: IFFALSE 28221
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
28141: LD_ADDR_VAR 0 6
28145: PUSH
28146: LD_VAR 0 5
28150: PPUSH
28151: LD_INT 22
28153: PUSH
28154: LD_INT 2
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PPUSH
28161: CALL_OW 69
28165: PUSH
28166: LD_INT 1
28168: ARRAY
28169: PPUSH
28170: CALL_OW 74
28174: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
28175: LD_ADDR_VAR 0 5
28179: PUSH
28180: LD_VAR 0 5
28184: PUSH
28185: LD_VAR 0 6
28189: DIFF
28190: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
28191: LD_EXP 85
28195: PPUSH
28196: LD_VAR 0 6
28200: PPUSH
28201: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
28205: LD_EXP 86
28209: PPUSH
28210: LD_VAR 0 6
28214: PPUSH
28215: CALL_OW 175
// end ;
28219: GO 28138
28221: POP
28222: POP
// wait ( 0 0$35 ) ;
28223: LD_INT 1225
28225: PPUSH
28226: CALL_OW 67
// FinishMission ;
28230: CALL 19575 0 0
// end ;
28234: PPOPN 6
28236: END
// every 1 trigger immortalSurvivors do var unit ;
28237: LD_EXP 25
28241: IFFALSE 28279
28243: GO 28245
28245: DISABLE
28246: LD_INT 0
28248: PPUSH
// begin enable ;
28249: ENABLE
// for unit in survivorsArabianAttack do
28250: LD_ADDR_VAR 0 1
28254: PUSH
28255: LD_EXP 77
28259: PUSH
28260: FOR_IN
28261: IFFALSE 28277
// SetLives ( unit , 1000 ) ;
28263: LD_VAR 0 1
28267: PPUSH
28268: LD_INT 1000
28270: PPUSH
28271: CALL_OW 234
28275: GO 28260
28277: POP
28278: POP
// end ; end_of_file
28279: PPOPN 1
28281: END
// every 0 0$30 do
28282: GO 28284
28284: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
28285: LD_INT 3
28287: PPUSH
28288: LD_INT 5
28290: PPUSH
28291: CALL_OW 12
28295: PPUSH
28296: LD_INT 76
28298: PPUSH
28299: LD_INT 111
28301: PPUSH
28302: LD_INT 5
28304: PPUSH
28305: LD_INT 1
28307: PPUSH
28308: CALL_OW 56
28312: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
28313: LD_EXP 5
28317: IFFALSE 28389
28319: GO 28321
28321: DISABLE
28322: LD_INT 0
28324: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
28325: LD_INT 50
28327: PPUSH
28328: LD_INT 4200
28330: PPUSH
28331: CALL_OW 12
28335: PPUSH
28336: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
28340: LD_VAR 0 1
28344: PUSH
28345: LD_INT 175
28347: MUL
28348: PPUSH
28349: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: LD_VAR 0 1
28362: PUSH
28363: LD_INT 1
28365: PLUS
28366: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
28367: LD_INT 3
28369: PPUSH
28370: LD_INT 5
28372: PPUSH
28373: CALL_OW 12
28377: PPUSH
28378: LD_INT 6
28380: PPUSH
28381: LD_INT 1
28383: PPUSH
28384: CALL_OW 55
// enable ;
28388: ENABLE
// end ; end_of_file
28389: PPOPN 1
28391: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
28392: LD_EXP 87
28396: IFFALSE 28559
28398: GO 28400
28400: DISABLE
// begin enable ;
28401: ENABLE
// case counterIndex of 1 :
28402: LD_EXP 88
28406: PUSH
28407: LD_INT 1
28409: DOUBLE
28410: EQUAL
28411: IFTRUE 28415
28413: GO 28432
28415: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
28416: LD_ADDR_EXP 39
28420: PUSH
28421: LD_EXP 39
28425: PUSH
28426: LD_INT 35
28428: MINUS
28429: ST_TO_ADDR
28430: GO 28559
28432: LD_INT 2
28434: DOUBLE
28435: EQUAL
28436: IFTRUE 28440
28438: GO 28474
28440: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
28441: LD_ADDR_OWVAR 47
28445: PUSH
28446: LD_STRING #Ru03-1
28448: PUSH
28449: LD_EXP 15
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
28458: LD_ADDR_EXP 15
28462: PUSH
28463: LD_EXP 15
28467: PUSH
28468: LD_INT 35
28470: MINUS
28471: ST_TO_ADDR
// end ; 3 :
28472: GO 28559
28474: LD_INT 3
28476: DOUBLE
28477: EQUAL
28478: IFTRUE 28482
28480: GO 28516
28482: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
28483: LD_ADDR_OWVAR 47
28487: PUSH
28488: LD_STRING #Ru03-2
28490: PUSH
28491: LD_EXP 15
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
28500: LD_ADDR_EXP 15
28504: PUSH
28505: LD_EXP 15
28509: PUSH
28510: LD_INT 35
28512: MINUS
28513: ST_TO_ADDR
// end ; 4 :
28514: GO 28559
28516: LD_INT 4
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28524
28522: GO 28558
28524: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
28525: LD_ADDR_OWVAR 47
28529: PUSH
28530: LD_STRING #Ru03-3
28532: PUSH
28533: LD_EXP 14
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
28542: LD_ADDR_EXP 14
28546: PUSH
28547: LD_EXP 14
28551: PUSH
28552: LD_INT 35
28554: MINUS
28555: ST_TO_ADDR
// end ; end ;
28556: GO 28559
28558: POP
// end ; end_of_file
28559: END
// every 7 7$0 do
28560: GO 28562
28562: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
28563: LD_INT 3
28565: PPUSH
28566: LD_INT 1
28568: PPUSH
28569: LD_INT 0
28571: PPUSH
28572: LD_INT 7
28574: PUSH
28575: LD_INT 9
28577: PUSH
28578: LD_INT 8
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 1
28588: PPUSH
28589: LD_INT 3
28591: PPUSH
28592: CALL_OW 12
28596: ARRAY
28597: PPUSH
28598: CALL 5799 0 4
28602: END
// every 12 12$0 do
28603: GO 28605
28605: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
28606: LD_INT 2
28608: PPUSH
28609: LD_INT 2
28611: PPUSH
28612: LD_INT 1
28614: PPUSH
28615: LD_INT 7
28617: PUSH
28618: LD_INT 9
28620: PUSH
28621: LD_INT 8
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PPUSH
28632: LD_INT 3
28634: PPUSH
28635: CALL_OW 12
28639: ARRAY
28640: PPUSH
28641: CALL 5799 0 4
28645: END
// every 20 20$0 do
28646: GO 28648
28648: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
28649: LD_INT 4
28651: PPUSH
28652: LD_INT 2
28654: PPUSH
28655: LD_INT 0
28657: PPUSH
28658: LD_INT 7
28660: PUSH
28661: LD_INT 9
28663: PUSH
28664: LD_INT 8
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 1
28674: PPUSH
28675: LD_INT 3
28677: PPUSH
28678: CALL_OW 12
28682: ARRAY
28683: PPUSH
28684: CALL 5799 0 4
28688: END
// every 23 23$0 do
28689: GO 28691
28691: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
28692: LD_INT 3
28694: PPUSH
28695: LD_INT 1
28697: PPUSH
28698: LD_INT 2
28700: PPUSH
28701: LD_INT 7
28703: PUSH
28704: LD_INT 9
28706: PUSH
28707: LD_INT 8
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: PUSH
28715: LD_INT 1
28717: PPUSH
28718: LD_INT 3
28720: PPUSH
28721: CALL_OW 12
28725: ARRAY
28726: PPUSH
28727: CALL 5799 0 4
28731: END
// export function Nef_PrepareNature ; var i , un ; begin
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
28736: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
28737: LD_ADDR_VAR 0 2
28741: PUSH
28742: DOUBLE
28743: LD_INT 1
28745: DEC
28746: ST_TO_ADDR
28747: LD_EXP 31
28751: PUSH
28752: LD_INT 1
28754: ARRAY
28755: PUSH
28756: FOR_TO
28757: IFFALSE 28867
// begin uc_side = 0 ;
28759: LD_ADDR_OWVAR 20
28763: PUSH
28764: LD_INT 0
28766: ST_TO_ADDR
// uc_nation = nation_nature ;
28767: LD_ADDR_OWVAR 21
28771: PUSH
28772: LD_INT 0
28774: ST_TO_ADDR
// hc_class = class_apeman ;
28775: LD_ADDR_OWVAR 28
28779: PUSH
28780: LD_INT 12
28782: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28783: LD_ADDR_OWVAR 31
28787: PUSH
28788: LD_EXP 32
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: PUSH
28797: LD_EXP 32
28801: PUSH
28802: LD_INT 2
28804: ARRAY
28805: PUSH
28806: LD_EXP 32
28810: PUSH
28811: LD_INT 3
28813: ARRAY
28814: PUSH
28815: LD_EXP 32
28819: PUSH
28820: LD_INT 4
28822: ARRAY
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28830: LD_ADDR_OWVAR 35
28834: PUSH
28835: LD_EXP 33
28839: ST_TO_ADDR
// un = CreateHuman ;
28840: LD_ADDR_VAR 0 3
28844: PUSH
28845: CALL_OW 44
28849: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28850: LD_VAR 0 3
28854: PPUSH
28855: LD_INT 27
28857: PPUSH
28858: LD_INT 0
28860: PPUSH
28861: CALL_OW 49
// end ;
28865: GO 28756
28867: POP
28868: POP
// for i := 1 to animalsAmount [ 2 ] do
28869: LD_ADDR_VAR 0 2
28873: PUSH
28874: DOUBLE
28875: LD_INT 1
28877: DEC
28878: ST_TO_ADDR
28879: LD_EXP 31
28883: PUSH
28884: LD_INT 2
28886: ARRAY
28887: PUSH
28888: FOR_TO
28889: IFFALSE 28999
// begin uc_side = 0 ;
28891: LD_ADDR_OWVAR 20
28895: PUSH
28896: LD_INT 0
28898: ST_TO_ADDR
// uc_nation = nation_nature ;
28899: LD_ADDR_OWVAR 21
28903: PUSH
28904: LD_INT 0
28906: ST_TO_ADDR
// hc_class = class_phororhacos ;
28907: LD_ADDR_OWVAR 28
28911: PUSH
28912: LD_INT 18
28914: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28915: LD_ADDR_OWVAR 31
28919: PUSH
28920: LD_EXP 32
28924: PUSH
28925: LD_INT 1
28927: ARRAY
28928: PUSH
28929: LD_EXP 32
28933: PUSH
28934: LD_INT 2
28936: ARRAY
28937: PUSH
28938: LD_EXP 32
28942: PUSH
28943: LD_INT 3
28945: ARRAY
28946: PUSH
28947: LD_EXP 32
28951: PUSH
28952: LD_INT 4
28954: ARRAY
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28962: LD_ADDR_OWVAR 35
28966: PUSH
28967: LD_EXP 33
28971: ST_TO_ADDR
// un = CreateHuman ;
28972: LD_ADDR_VAR 0 3
28976: PUSH
28977: CALL_OW 44
28981: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28982: LD_VAR 0 3
28986: PPUSH
28987: LD_INT 27
28989: PPUSH
28990: LD_INT 0
28992: PPUSH
28993: CALL_OW 49
// end ;
28997: GO 28888
28999: POP
29000: POP
// for i := 1 to animalsAmount [ 3 ] do
29001: LD_ADDR_VAR 0 2
29005: PUSH
29006: DOUBLE
29007: LD_INT 1
29009: DEC
29010: ST_TO_ADDR
29011: LD_EXP 31
29015: PUSH
29016: LD_INT 3
29018: ARRAY
29019: PUSH
29020: FOR_TO
29021: IFFALSE 29131
// begin uc_side = 0 ;
29023: LD_ADDR_OWVAR 20
29027: PUSH
29028: LD_INT 0
29030: ST_TO_ADDR
// uc_nation = nation_nature ;
29031: LD_ADDR_OWVAR 21
29035: PUSH
29036: LD_INT 0
29038: ST_TO_ADDR
// hc_class = class_tiger ;
29039: LD_ADDR_OWVAR 28
29043: PUSH
29044: LD_INT 14
29046: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
29047: LD_ADDR_OWVAR 31
29051: PUSH
29052: LD_EXP 32
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: PUSH
29061: LD_EXP 32
29065: PUSH
29066: LD_INT 2
29068: ARRAY
29069: PUSH
29070: LD_EXP 32
29074: PUSH
29075: LD_INT 3
29077: ARRAY
29078: PUSH
29079: LD_EXP 32
29083: PUSH
29084: LD_INT 4
29086: ARRAY
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
29094: LD_ADDR_OWVAR 35
29098: PUSH
29099: LD_EXP 33
29103: ST_TO_ADDR
// un = CreateHuman ;
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: CALL_OW 44
29113: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
29114: LD_VAR 0 3
29118: PPUSH
29119: LD_INT 27
29121: PPUSH
29122: LD_INT 0
29124: PPUSH
29125: CALL_OW 49
// end ;
29129: GO 29020
29131: POP
29132: POP
// for i := 1 to animalsAmount [ 4 ] do
29133: LD_ADDR_VAR 0 2
29137: PUSH
29138: DOUBLE
29139: LD_INT 1
29141: DEC
29142: ST_TO_ADDR
29143: LD_EXP 31
29147: PUSH
29148: LD_INT 4
29150: ARRAY
29151: PUSH
29152: FOR_TO
29153: IFFALSE 29263
// begin uc_side = 0 ;
29155: LD_ADDR_OWVAR 20
29159: PUSH
29160: LD_INT 0
29162: ST_TO_ADDR
// uc_nation = nation_nature ;
29163: LD_ADDR_OWVAR 21
29167: PUSH
29168: LD_INT 0
29170: ST_TO_ADDR
// hc_class = 21 ;
29171: LD_ADDR_OWVAR 28
29175: PUSH
29176: LD_INT 21
29178: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
29179: LD_ADDR_OWVAR 31
29183: PUSH
29184: LD_EXP 32
29188: PUSH
29189: LD_INT 1
29191: ARRAY
29192: PUSH
29193: LD_EXP 32
29197: PUSH
29198: LD_INT 2
29200: ARRAY
29201: PUSH
29202: LD_EXP 32
29206: PUSH
29207: LD_INT 3
29209: ARRAY
29210: PUSH
29211: LD_EXP 32
29215: PUSH
29216: LD_INT 4
29218: ARRAY
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
29226: LD_ADDR_OWVAR 35
29230: PUSH
29231: LD_EXP 33
29235: ST_TO_ADDR
// un = CreateHuman ;
29236: LD_ADDR_VAR 0 3
29240: PUSH
29241: CALL_OW 44
29245: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
29246: LD_VAR 0 3
29250: PPUSH
29251: LD_INT 27
29253: PPUSH
29254: LD_INT 0
29256: PPUSH
29257: CALL_OW 49
// end ;
29261: GO 29152
29263: POP
29264: POP
// for i := 1 to animalsAmount [ 5 ] do
29265: LD_ADDR_VAR 0 2
29269: PUSH
29270: DOUBLE
29271: LD_INT 1
29273: DEC
29274: ST_TO_ADDR
29275: LD_EXP 31
29279: PUSH
29280: LD_INT 5
29282: ARRAY
29283: PUSH
29284: FOR_TO
29285: IFFALSE 29346
// begin uc_side = 0 ;
29287: LD_ADDR_OWVAR 20
29291: PUSH
29292: LD_INT 0
29294: ST_TO_ADDR
// uc_nation = nation_nature ;
29295: LD_ADDR_OWVAR 21
29299: PUSH
29300: LD_INT 0
29302: ST_TO_ADDR
// vc_chassis := 31 ;
29303: LD_ADDR_OWVAR 37
29307: PUSH
29308: LD_INT 31
29310: ST_TO_ADDR
// vc_control := control_rider ;
29311: LD_ADDR_OWVAR 38
29315: PUSH
29316: LD_INT 4
29318: ST_TO_ADDR
// un := CreateVehicle ;
29319: LD_ADDR_VAR 0 3
29323: PUSH
29324: CALL_OW 45
29328: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
29329: LD_VAR 0 3
29333: PPUSH
29334: LD_INT 27
29336: PPUSH
29337: LD_INT 0
29339: PPUSH
29340: CALL_OW 49
// end ;
29344: GO 29284
29346: POP
29347: POP
// end ; end_of_file
29348: LD_VAR 0 1
29352: RET
// every 1 trigger scholtzeSaved do
29353: LD_EXP 7
29357: IFFALSE 29369
29359: GO 29361
29361: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
29362: LD_STRING ACH_PROFESSOR
29364: PPUSH
29365: CALL_OW 543
29369: END
// every 1 trigger IsDead ( Sikorski ) do
29370: LD_INT 290
29372: PPUSH
29373: CALL_OW 301
29377: IFFALSE 29389
29379: GO 29381
29381: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
29382: LD_STRING ACH_SIKORSKI
29384: PPUSH
29385: CALL_OW 543
29389: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
29390: LD_EXP 12
29394: NOT
29395: PUSH
29396: LD_EXP 24
29400: NOT
29401: AND
29402: IFFALSE 29414
29404: GO 29406
29406: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
29407: LD_STRING ACH_REINFORCE
29409: PPUSH
29410: CALL_OW 543
29414: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
29415: LD_INT 0
29417: PPUSH
// ru_radar := 98 ;
29418: LD_ADDR_EXP 89
29422: PUSH
29423: LD_INT 98
29425: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29426: LD_ADDR_EXP 90
29430: PUSH
29431: LD_INT 89
29433: ST_TO_ADDR
// us_hack := 99 ;
29434: LD_ADDR_EXP 91
29438: PUSH
29439: LD_INT 99
29441: ST_TO_ADDR
// us_artillery := 97 ;
29442: LD_ADDR_EXP 92
29446: PUSH
29447: LD_INT 97
29449: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29450: LD_ADDR_EXP 93
29454: PUSH
29455: LD_INT 91
29457: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29458: LD_ADDR_EXP 94
29462: PUSH
29463: LD_INT 92
29465: ST_TO_ADDR
// tech_Artillery := 80 ;
29466: LD_ADDR_EXP 95
29470: PUSH
29471: LD_INT 80
29473: ST_TO_ADDR
// tech_RadMat := 81 ;
29474: LD_ADDR_EXP 96
29478: PUSH
29479: LD_INT 81
29481: ST_TO_ADDR
// tech_BasicTools := 82 ;
29482: LD_ADDR_EXP 97
29486: PUSH
29487: LD_INT 82
29489: ST_TO_ADDR
// tech_Cargo := 83 ;
29490: LD_ADDR_EXP 98
29494: PUSH
29495: LD_INT 83
29497: ST_TO_ADDR
// tech_Track := 84 ;
29498: LD_ADDR_EXP 99
29502: PUSH
29503: LD_INT 84
29505: ST_TO_ADDR
// tech_Crane := 85 ;
29506: LD_ADDR_EXP 100
29510: PUSH
29511: LD_INT 85
29513: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29514: LD_ADDR_EXP 101
29518: PUSH
29519: LD_INT 86
29521: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29522: LD_ADDR_EXP 102
29526: PUSH
29527: LD_INT 87
29529: ST_TO_ADDR
// end ;
29530: LD_VAR 0 1
29534: RET
// every 1 do
29535: GO 29537
29537: DISABLE
// InitGlobalVariables ; end_of_file
29538: CALL 29415 0 0
29542: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
// if exist_mode then
29547: LD_VAR 0 2
29551: IFFALSE 29576
// unit := CreateCharacter ( prefix & ident ) else
29553: LD_ADDR_VAR 0 5
29557: PUSH
29558: LD_VAR 0 3
29562: PUSH
29563: LD_VAR 0 1
29567: STR
29568: PPUSH
29569: CALL_OW 34
29573: ST_TO_ADDR
29574: GO 29591
// unit := NewCharacter ( ident ) ;
29576: LD_ADDR_VAR 0 5
29580: PUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 25
29590: ST_TO_ADDR
// result := unit ;
29591: LD_ADDR_VAR 0 4
29595: PUSH
29596: LD_VAR 0 5
29600: ST_TO_ADDR
// end ;
29601: LD_VAR 0 4
29605: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
// if not side or not nation then
29610: LD_VAR 0 1
29614: NOT
29615: PUSH
29616: LD_VAR 0 2
29620: NOT
29621: OR
29622: IFFALSE 29626
// exit ;
29624: GO 30390
// case nation of nation_american :
29626: LD_VAR 0 2
29630: PUSH
29631: LD_INT 1
29633: DOUBLE
29634: EQUAL
29635: IFTRUE 29639
29637: GO 29853
29639: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29640: LD_ADDR_VAR 0 4
29644: PUSH
29645: LD_INT 35
29647: PUSH
29648: LD_INT 45
29650: PUSH
29651: LD_INT 46
29653: PUSH
29654: LD_INT 47
29656: PUSH
29657: LD_INT 82
29659: PUSH
29660: LD_INT 83
29662: PUSH
29663: LD_INT 84
29665: PUSH
29666: LD_INT 85
29668: PUSH
29669: LD_INT 86
29671: PUSH
29672: LD_INT 1
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 6
29680: PUSH
29681: LD_INT 15
29683: PUSH
29684: LD_INT 16
29686: PUSH
29687: LD_INT 7
29689: PUSH
29690: LD_INT 12
29692: PUSH
29693: LD_INT 13
29695: PUSH
29696: LD_INT 10
29698: PUSH
29699: LD_INT 14
29701: PUSH
29702: LD_INT 20
29704: PUSH
29705: LD_INT 21
29707: PUSH
29708: LD_INT 22
29710: PUSH
29711: LD_INT 25
29713: PUSH
29714: LD_INT 32
29716: PUSH
29717: LD_INT 27
29719: PUSH
29720: LD_INT 36
29722: PUSH
29723: LD_INT 69
29725: PUSH
29726: LD_INT 39
29728: PUSH
29729: LD_INT 34
29731: PUSH
29732: LD_INT 40
29734: PUSH
29735: LD_INT 48
29737: PUSH
29738: LD_INT 49
29740: PUSH
29741: LD_INT 50
29743: PUSH
29744: LD_INT 51
29746: PUSH
29747: LD_INT 52
29749: PUSH
29750: LD_INT 53
29752: PUSH
29753: LD_INT 54
29755: PUSH
29756: LD_INT 55
29758: PUSH
29759: LD_INT 56
29761: PUSH
29762: LD_INT 57
29764: PUSH
29765: LD_INT 58
29767: PUSH
29768: LD_INT 59
29770: PUSH
29771: LD_INT 60
29773: PUSH
29774: LD_INT 61
29776: PUSH
29777: LD_INT 62
29779: PUSH
29780: LD_INT 80
29782: PUSH
29783: LD_INT 82
29785: PUSH
29786: LD_INT 83
29788: PUSH
29789: LD_INT 84
29791: PUSH
29792: LD_INT 85
29794: PUSH
29795: LD_INT 86
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: ST_TO_ADDR
29851: GO 30314
29853: LD_INT 2
29855: DOUBLE
29856: EQUAL
29857: IFTRUE 29861
29859: GO 30083
29861: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29862: LD_ADDR_VAR 0 4
29866: PUSH
29867: LD_INT 35
29869: PUSH
29870: LD_INT 45
29872: PUSH
29873: LD_INT 46
29875: PUSH
29876: LD_INT 47
29878: PUSH
29879: LD_INT 82
29881: PUSH
29882: LD_INT 83
29884: PUSH
29885: LD_INT 84
29887: PUSH
29888: LD_INT 85
29890: PUSH
29891: LD_INT 87
29893: PUSH
29894: LD_INT 70
29896: PUSH
29897: LD_INT 1
29899: PUSH
29900: LD_INT 11
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: LD_INT 4
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: LD_INT 6
29914: PUSH
29915: LD_INT 15
29917: PUSH
29918: LD_INT 18
29920: PUSH
29921: LD_INT 7
29923: PUSH
29924: LD_INT 17
29926: PUSH
29927: LD_INT 8
29929: PUSH
29930: LD_INT 20
29932: PUSH
29933: LD_INT 21
29935: PUSH
29936: LD_INT 22
29938: PUSH
29939: LD_INT 72
29941: PUSH
29942: LD_INT 26
29944: PUSH
29945: LD_INT 69
29947: PUSH
29948: LD_INT 39
29950: PUSH
29951: LD_INT 40
29953: PUSH
29954: LD_INT 41
29956: PUSH
29957: LD_INT 42
29959: PUSH
29960: LD_INT 43
29962: PUSH
29963: LD_INT 48
29965: PUSH
29966: LD_INT 49
29968: PUSH
29969: LD_INT 50
29971: PUSH
29972: LD_INT 51
29974: PUSH
29975: LD_INT 52
29977: PUSH
29978: LD_INT 53
29980: PUSH
29981: LD_INT 54
29983: PUSH
29984: LD_INT 55
29986: PUSH
29987: LD_INT 56
29989: PUSH
29990: LD_INT 60
29992: PUSH
29993: LD_INT 61
29995: PUSH
29996: LD_INT 62
29998: PUSH
29999: LD_INT 66
30001: PUSH
30002: LD_INT 67
30004: PUSH
30005: LD_INT 68
30007: PUSH
30008: LD_INT 81
30010: PUSH
30011: LD_INT 82
30013: PUSH
30014: LD_INT 83
30016: PUSH
30017: LD_INT 84
30019: PUSH
30020: LD_INT 85
30022: PUSH
30023: LD_INT 87
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: ST_TO_ADDR
30081: GO 30314
30083: LD_INT 3
30085: DOUBLE
30086: EQUAL
30087: IFTRUE 30091
30089: GO 30313
30091: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30092: LD_ADDR_VAR 0 4
30096: PUSH
30097: LD_INT 46
30099: PUSH
30100: LD_INT 47
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: LD_INT 2
30108: PUSH
30109: LD_INT 82
30111: PUSH
30112: LD_INT 83
30114: PUSH
30115: LD_INT 84
30117: PUSH
30118: LD_INT 85
30120: PUSH
30121: LD_INT 86
30123: PUSH
30124: LD_INT 11
30126: PUSH
30127: LD_INT 9
30129: PUSH
30130: LD_INT 20
30132: PUSH
30133: LD_INT 19
30135: PUSH
30136: LD_INT 21
30138: PUSH
30139: LD_INT 24
30141: PUSH
30142: LD_INT 22
30144: PUSH
30145: LD_INT 25
30147: PUSH
30148: LD_INT 28
30150: PUSH
30151: LD_INT 29
30153: PUSH
30154: LD_INT 30
30156: PUSH
30157: LD_INT 31
30159: PUSH
30160: LD_INT 37
30162: PUSH
30163: LD_INT 38
30165: PUSH
30166: LD_INT 32
30168: PUSH
30169: LD_INT 27
30171: PUSH
30172: LD_INT 33
30174: PUSH
30175: LD_INT 69
30177: PUSH
30178: LD_INT 39
30180: PUSH
30181: LD_INT 34
30183: PUSH
30184: LD_INT 40
30186: PUSH
30187: LD_INT 71
30189: PUSH
30190: LD_INT 23
30192: PUSH
30193: LD_INT 44
30195: PUSH
30196: LD_INT 48
30198: PUSH
30199: LD_INT 49
30201: PUSH
30202: LD_INT 50
30204: PUSH
30205: LD_INT 51
30207: PUSH
30208: LD_INT 52
30210: PUSH
30211: LD_INT 53
30213: PUSH
30214: LD_INT 54
30216: PUSH
30217: LD_INT 55
30219: PUSH
30220: LD_INT 56
30222: PUSH
30223: LD_INT 57
30225: PUSH
30226: LD_INT 58
30228: PUSH
30229: LD_INT 59
30231: PUSH
30232: LD_INT 63
30234: PUSH
30235: LD_INT 64
30237: PUSH
30238: LD_INT 65
30240: PUSH
30241: LD_INT 82
30243: PUSH
30244: LD_INT 83
30246: PUSH
30247: LD_INT 84
30249: PUSH
30250: LD_INT 85
30252: PUSH
30253: LD_INT 86
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: ST_TO_ADDR
30311: GO 30314
30313: POP
// if state > - 1 and state < 3 then
30314: LD_VAR 0 3
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: GREATER
30323: PUSH
30324: LD_VAR 0 3
30328: PUSH
30329: LD_INT 3
30331: LESS
30332: AND
30333: IFFALSE 30390
// for i in result do
30335: LD_ADDR_VAR 0 5
30339: PUSH
30340: LD_VAR 0 4
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30388
// if GetTech ( i , side ) <> state then
30348: LD_VAR 0 5
30352: PPUSH
30353: LD_VAR 0 1
30357: PPUSH
30358: CALL_OW 321
30362: PUSH
30363: LD_VAR 0 3
30367: NONEQUAL
30368: IFFALSE 30386
// result := result diff i ;
30370: LD_ADDR_VAR 0 4
30374: PUSH
30375: LD_VAR 0 4
30379: PUSH
30380: LD_VAR 0 5
30384: DIFF
30385: ST_TO_ADDR
30386: GO 30345
30388: POP
30389: POP
// end ;
30390: LD_VAR 0 4
30394: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30395: LD_INT 0
30397: PPUSH
30398: PPUSH
30399: PPUSH
// result := true ;
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_INT 1
30407: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30408: LD_ADDR_VAR 0 5
30412: PUSH
30413: LD_VAR 0 2
30417: PPUSH
30418: CALL_OW 480
30422: ST_TO_ADDR
// if not tmp then
30423: LD_VAR 0 5
30427: NOT
30428: IFFALSE 30432
// exit ;
30430: GO 30481
// for i in tmp do
30432: LD_ADDR_VAR 0 4
30436: PUSH
30437: LD_VAR 0 5
30441: PUSH
30442: FOR_IN
30443: IFFALSE 30479
// if GetTech ( i , side ) <> state_researched then
30445: LD_VAR 0 4
30449: PPUSH
30450: LD_VAR 0 1
30454: PPUSH
30455: CALL_OW 321
30459: PUSH
30460: LD_INT 2
30462: NONEQUAL
30463: IFFALSE 30477
// begin result := false ;
30465: LD_ADDR_VAR 0 3
30469: PUSH
30470: LD_INT 0
30472: ST_TO_ADDR
// exit ;
30473: POP
30474: POP
30475: GO 30481
// end ;
30477: GO 30442
30479: POP
30480: POP
// end ;
30481: LD_VAR 0 3
30485: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30486: LD_INT 0
30488: PPUSH
30489: PPUSH
30490: PPUSH
30491: PPUSH
30492: PPUSH
30493: PPUSH
30494: PPUSH
30495: PPUSH
30496: PPUSH
30497: PPUSH
30498: PPUSH
30499: PPUSH
30500: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30501: LD_VAR 0 1
30505: NOT
30506: PUSH
30507: LD_VAR 0 1
30511: PPUSH
30512: CALL_OW 257
30516: PUSH
30517: LD_INT 9
30519: NONEQUAL
30520: OR
30521: IFFALSE 30525
// exit ;
30523: GO 31098
// side := GetSide ( unit ) ;
30525: LD_ADDR_VAR 0 9
30529: PUSH
30530: LD_VAR 0 1
30534: PPUSH
30535: CALL_OW 255
30539: ST_TO_ADDR
// tech_space := tech_spacanom ;
30540: LD_ADDR_VAR 0 12
30544: PUSH
30545: LD_INT 29
30547: ST_TO_ADDR
// tech_time := tech_taurad ;
30548: LD_ADDR_VAR 0 13
30552: PUSH
30553: LD_INT 28
30555: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30556: LD_ADDR_VAR 0 11
30560: PUSH
30561: LD_VAR 0 1
30565: PPUSH
30566: CALL_OW 310
30570: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30571: LD_VAR 0 11
30575: PPUSH
30576: CALL_OW 247
30580: PUSH
30581: LD_INT 2
30583: EQUAL
30584: IFFALSE 30588
// exit ;
30586: GO 31098
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30588: LD_ADDR_VAR 0 8
30592: PUSH
30593: LD_INT 81
30595: PUSH
30596: LD_VAR 0 9
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 3
30607: PUSH
30608: LD_INT 21
30610: PUSH
30611: LD_INT 3
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PPUSH
30626: CALL_OW 69
30630: ST_TO_ADDR
// if not tmp then
30631: LD_VAR 0 8
30635: NOT
30636: IFFALSE 30640
// exit ;
30638: GO 31098
// if in_unit then
30640: LD_VAR 0 11
30644: IFFALSE 30668
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30646: LD_ADDR_VAR 0 10
30650: PUSH
30651: LD_VAR 0 8
30655: PPUSH
30656: LD_VAR 0 11
30660: PPUSH
30661: CALL_OW 74
30665: ST_TO_ADDR
30666: GO 30688
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30668: LD_ADDR_VAR 0 10
30672: PUSH
30673: LD_VAR 0 8
30677: PPUSH
30678: LD_VAR 0 1
30682: PPUSH
30683: CALL_OW 74
30687: ST_TO_ADDR
// if not enemy then
30688: LD_VAR 0 10
30692: NOT
30693: IFFALSE 30697
// exit ;
30695: GO 31098
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30697: LD_VAR 0 11
30701: PUSH
30702: LD_VAR 0 11
30706: PPUSH
30707: LD_VAR 0 10
30711: PPUSH
30712: CALL_OW 296
30716: PUSH
30717: LD_INT 13
30719: GREATER
30720: AND
30721: PUSH
30722: LD_VAR 0 1
30726: PPUSH
30727: LD_VAR 0 10
30731: PPUSH
30732: CALL_OW 296
30736: PUSH
30737: LD_INT 12
30739: GREATER
30740: OR
30741: IFFALSE 30745
// exit ;
30743: GO 31098
// missile := [ 1 ] ;
30745: LD_ADDR_VAR 0 14
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30756: LD_VAR 0 9
30760: PPUSH
30761: LD_VAR 0 12
30765: PPUSH
30766: CALL_OW 325
30770: IFFALSE 30799
// missile := Insert ( missile , missile + 1 , 2 ) ;
30772: LD_ADDR_VAR 0 14
30776: PUSH
30777: LD_VAR 0 14
30781: PPUSH
30782: LD_VAR 0 14
30786: PUSH
30787: LD_INT 1
30789: PLUS
30790: PPUSH
30791: LD_INT 2
30793: PPUSH
30794: CALL_OW 2
30798: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30799: LD_VAR 0 9
30803: PPUSH
30804: LD_VAR 0 13
30808: PPUSH
30809: CALL_OW 325
30813: PUSH
30814: LD_VAR 0 10
30818: PPUSH
30819: CALL_OW 255
30823: PPUSH
30824: LD_VAR 0 13
30828: PPUSH
30829: CALL_OW 325
30833: NOT
30834: AND
30835: IFFALSE 30864
// missile := Insert ( missile , missile + 1 , 3 ) ;
30837: LD_ADDR_VAR 0 14
30841: PUSH
30842: LD_VAR 0 14
30846: PPUSH
30847: LD_VAR 0 14
30851: PUSH
30852: LD_INT 1
30854: PLUS
30855: PPUSH
30856: LD_INT 3
30858: PPUSH
30859: CALL_OW 2
30863: ST_TO_ADDR
// if missile < 2 then
30864: LD_VAR 0 14
30868: PUSH
30869: LD_INT 2
30871: LESS
30872: IFFALSE 30876
// exit ;
30874: GO 31098
// x := GetX ( enemy ) ;
30876: LD_ADDR_VAR 0 4
30880: PUSH
30881: LD_VAR 0 10
30885: PPUSH
30886: CALL_OW 250
30890: ST_TO_ADDR
// y := GetY ( enemy ) ;
30891: LD_ADDR_VAR 0 5
30895: PUSH
30896: LD_VAR 0 10
30900: PPUSH
30901: CALL_OW 251
30905: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30906: LD_ADDR_VAR 0 6
30910: PUSH
30911: LD_VAR 0 4
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PPUSH
30920: LD_INT 1
30922: PPUSH
30923: CALL_OW 12
30927: PLUS
30928: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30929: LD_ADDR_VAR 0 7
30933: PUSH
30934: LD_VAR 0 5
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PPUSH
30943: LD_INT 1
30945: PPUSH
30946: CALL_OW 12
30950: PLUS
30951: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30952: LD_VAR 0 6
30956: PPUSH
30957: LD_VAR 0 7
30961: PPUSH
30962: CALL_OW 488
30966: NOT
30967: IFFALSE 30989
// begin _x := x ;
30969: LD_ADDR_VAR 0 6
30973: PUSH
30974: LD_VAR 0 4
30978: ST_TO_ADDR
// _y := y ;
30979: LD_ADDR_VAR 0 7
30983: PUSH
30984: LD_VAR 0 5
30988: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30989: LD_ADDR_VAR 0 3
30993: PUSH
30994: LD_INT 1
30996: PPUSH
30997: LD_VAR 0 14
31001: PPUSH
31002: CALL_OW 12
31006: ST_TO_ADDR
// case i of 1 :
31007: LD_VAR 0 3
31011: PUSH
31012: LD_INT 1
31014: DOUBLE
31015: EQUAL
31016: IFTRUE 31020
31018: GO 31037
31020: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31021: LD_VAR 0 1
31025: PPUSH
31026: LD_VAR 0 10
31030: PPUSH
31031: CALL_OW 115
31035: GO 31098
31037: LD_INT 2
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31067
31045: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_VAR 0 6
31055: PPUSH
31056: LD_VAR 0 7
31060: PPUSH
31061: CALL_OW 153
31065: GO 31098
31067: LD_INT 3
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31075
31073: GO 31097
31075: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31076: LD_VAR 0 1
31080: PPUSH
31081: LD_VAR 0 6
31085: PPUSH
31086: LD_VAR 0 7
31090: PPUSH
31091: CALL_OW 154
31095: GO 31098
31097: POP
// end ;
31098: LD_VAR 0 2
31102: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31103: LD_INT 0
31105: PPUSH
31106: PPUSH
31107: PPUSH
31108: PPUSH
31109: PPUSH
31110: PPUSH
// if not unit or not building then
31111: LD_VAR 0 1
31115: NOT
31116: PUSH
31117: LD_VAR 0 2
31121: NOT
31122: OR
31123: IFFALSE 31127
// exit ;
31125: GO 31285
// x := GetX ( building ) ;
31127: LD_ADDR_VAR 0 5
31131: PUSH
31132: LD_VAR 0 2
31136: PPUSH
31137: CALL_OW 250
31141: ST_TO_ADDR
// y := GetY ( building ) ;
31142: LD_ADDR_VAR 0 6
31146: PUSH
31147: LD_VAR 0 2
31151: PPUSH
31152: CALL_OW 251
31156: ST_TO_ADDR
// for i = 0 to 5 do
31157: LD_ADDR_VAR 0 4
31161: PUSH
31162: DOUBLE
31163: LD_INT 0
31165: DEC
31166: ST_TO_ADDR
31167: LD_INT 5
31169: PUSH
31170: FOR_TO
31171: IFFALSE 31283
// begin _x := ShiftX ( x , i , 3 ) ;
31173: LD_ADDR_VAR 0 7
31177: PUSH
31178: LD_VAR 0 5
31182: PPUSH
31183: LD_VAR 0 4
31187: PPUSH
31188: LD_INT 3
31190: PPUSH
31191: CALL_OW 272
31195: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31196: LD_ADDR_VAR 0 8
31200: PUSH
31201: LD_VAR 0 6
31205: PPUSH
31206: LD_VAR 0 4
31210: PPUSH
31211: LD_INT 3
31213: PPUSH
31214: CALL_OW 273
31218: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31219: LD_VAR 0 7
31223: PPUSH
31224: LD_VAR 0 8
31228: PPUSH
31229: CALL_OW 488
31233: NOT
31234: IFFALSE 31238
// continue ;
31236: GO 31170
// if HexInfo ( _x , _y ) = 0 then
31238: LD_VAR 0 7
31242: PPUSH
31243: LD_VAR 0 8
31247: PPUSH
31248: CALL_OW 428
31252: PUSH
31253: LD_INT 0
31255: EQUAL
31256: IFFALSE 31281
// begin ComMoveXY ( unit , _x , _y ) ;
31258: LD_VAR 0 1
31262: PPUSH
31263: LD_VAR 0 7
31267: PPUSH
31268: LD_VAR 0 8
31272: PPUSH
31273: CALL_OW 111
// exit ;
31277: POP
31278: POP
31279: GO 31285
// end ; end ;
31281: GO 31170
31283: POP
31284: POP
// end ;
31285: LD_VAR 0 3
31289: RET
// export function ScanBase ( side , base_area ) ; begin
31290: LD_INT 0
31292: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31293: LD_ADDR_VAR 0 3
31297: PUSH
31298: LD_VAR 0 2
31302: PPUSH
31303: LD_INT 81
31305: PUSH
31306: LD_VAR 0 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PPUSH
31315: CALL_OW 70
31319: ST_TO_ADDR
// end ;
31320: LD_VAR 0 3
31324: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
// result := false ;
31331: LD_ADDR_VAR 0 2
31335: PUSH
31336: LD_INT 0
31338: ST_TO_ADDR
// side := GetSide ( unit ) ;
31339: LD_ADDR_VAR 0 3
31343: PUSH
31344: LD_VAR 0 1
31348: PPUSH
31349: CALL_OW 255
31353: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31354: LD_ADDR_VAR 0 4
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: CALL_OW 248
31368: ST_TO_ADDR
// case nat of 1 :
31369: LD_VAR 0 4
31373: PUSH
31374: LD_INT 1
31376: DOUBLE
31377: EQUAL
31378: IFTRUE 31382
31380: GO 31393
31382: POP
// tech := tech_lassight ; 2 :
31383: LD_ADDR_VAR 0 5
31387: PUSH
31388: LD_INT 12
31390: ST_TO_ADDR
31391: GO 31432
31393: LD_INT 2
31395: DOUBLE
31396: EQUAL
31397: IFTRUE 31401
31399: GO 31412
31401: POP
// tech := tech_mortar ; 3 :
31402: LD_ADDR_VAR 0 5
31406: PUSH
31407: LD_INT 41
31409: ST_TO_ADDR
31410: GO 31432
31412: LD_INT 3
31414: DOUBLE
31415: EQUAL
31416: IFTRUE 31420
31418: GO 31431
31420: POP
// tech := tech_bazooka ; end ;
31421: LD_ADDR_VAR 0 5
31425: PUSH
31426: LD_INT 44
31428: ST_TO_ADDR
31429: GO 31432
31431: POP
// if Researched ( side , tech ) then
31432: LD_VAR 0 3
31436: PPUSH
31437: LD_VAR 0 5
31441: PPUSH
31442: CALL_OW 325
31446: IFFALSE 31473
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31448: LD_ADDR_VAR 0 2
31452: PUSH
31453: LD_INT 5
31455: PUSH
31456: LD_INT 8
31458: PUSH
31459: LD_INT 9
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: PUSH
31467: LD_VAR 0 4
31471: ARRAY
31472: ST_TO_ADDR
// end ;
31473: LD_VAR 0 2
31477: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31478: LD_INT 0
31480: PPUSH
31481: PPUSH
31482: PPUSH
// if not mines then
31483: LD_VAR 0 2
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 31636
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31492: LD_ADDR_VAR 0 5
31496: PUSH
31497: LD_INT 81
31499: PUSH
31500: LD_VAR 0 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: LD_INT 21
31514: PUSH
31515: LD_INT 3
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PPUSH
31530: CALL_OW 69
31534: ST_TO_ADDR
// for i in mines do
31535: LD_ADDR_VAR 0 4
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: FOR_IN
31546: IFFALSE 31634
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31548: LD_VAR 0 4
31552: PUSH
31553: LD_INT 1
31555: ARRAY
31556: PPUSH
31557: LD_VAR 0 4
31561: PUSH
31562: LD_INT 2
31564: ARRAY
31565: PPUSH
31566: CALL_OW 458
31570: NOT
31571: IFFALSE 31575
// continue ;
31573: GO 31545
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31575: LD_VAR 0 4
31579: PUSH
31580: LD_INT 1
31582: ARRAY
31583: PPUSH
31584: LD_VAR 0 4
31588: PUSH
31589: LD_INT 2
31591: ARRAY
31592: PPUSH
31593: CALL_OW 428
31597: PUSH
31598: LD_VAR 0 5
31602: IN
31603: IFFALSE 31632
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31605: LD_VAR 0 4
31609: PUSH
31610: LD_INT 1
31612: ARRAY
31613: PPUSH
31614: LD_VAR 0 4
31618: PUSH
31619: LD_INT 2
31621: ARRAY
31622: PPUSH
31623: LD_VAR 0 1
31627: PPUSH
31628: CALL_OW 456
// end ;
31632: GO 31545
31634: POP
31635: POP
// end ;
31636: LD_VAR 0 3
31640: RET
// export function Count ( array ) ; var i ; begin
31641: LD_INT 0
31643: PPUSH
31644: PPUSH
// result := 0 ;
31645: LD_ADDR_VAR 0 2
31649: PUSH
31650: LD_INT 0
31652: ST_TO_ADDR
// for i in array do
31653: LD_ADDR_VAR 0 3
31657: PUSH
31658: LD_VAR 0 1
31662: PUSH
31663: FOR_IN
31664: IFFALSE 31688
// if i then
31666: LD_VAR 0 3
31670: IFFALSE 31686
// result := result + 1 ;
31672: LD_ADDR_VAR 0 2
31676: PUSH
31677: LD_VAR 0 2
31681: PUSH
31682: LD_INT 1
31684: PLUS
31685: ST_TO_ADDR
31686: GO 31663
31688: POP
31689: POP
// end ;
31690: LD_VAR 0 2
31694: RET
// export function IsEmpty ( building ) ; begin
31695: LD_INT 0
31697: PPUSH
// if not building then
31698: LD_VAR 0 1
31702: NOT
31703: IFFALSE 31707
// exit ;
31705: GO 31750
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31707: LD_ADDR_VAR 0 2
31711: PUSH
31712: LD_VAR 0 1
31716: PUSH
31717: LD_INT 22
31719: PUSH
31720: LD_VAR 0 1
31724: PPUSH
31725: CALL_OW 255
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 58
31736: PUSH
31737: EMPTY
31738: LIST
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PPUSH
31744: CALL_OW 69
31748: IN
31749: ST_TO_ADDR
// end ;
31750: LD_VAR 0 2
31754: RET
// export function IsNotFull ( building ) ; begin
31755: LD_INT 0
31757: PPUSH
// if not building then
31758: LD_VAR 0 1
31762: NOT
31763: IFFALSE 31767
// exit ;
31765: GO 31786
// result := UnitsInside ( building ) < 6 ;
31767: LD_ADDR_VAR 0 2
31771: PUSH
31772: LD_VAR 0 1
31776: PPUSH
31777: CALL_OW 313
31781: PUSH
31782: LD_INT 6
31784: LESS
31785: ST_TO_ADDR
// end ;
31786: LD_VAR 0 2
31790: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31791: LD_INT 0
31793: PPUSH
31794: PPUSH
31795: PPUSH
31796: PPUSH
// tmp := [ ] ;
31797: LD_ADDR_VAR 0 3
31801: PUSH
31802: EMPTY
31803: ST_TO_ADDR
// list := [ ] ;
31804: LD_ADDR_VAR 0 5
31808: PUSH
31809: EMPTY
31810: ST_TO_ADDR
// for i = 16 to 25 do
31811: LD_ADDR_VAR 0 4
31815: PUSH
31816: DOUBLE
31817: LD_INT 16
31819: DEC
31820: ST_TO_ADDR
31821: LD_INT 25
31823: PUSH
31824: FOR_TO
31825: IFFALSE 31898
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31827: LD_ADDR_VAR 0 3
31831: PUSH
31832: LD_VAR 0 3
31836: PUSH
31837: LD_INT 22
31839: PUSH
31840: LD_VAR 0 1
31844: PPUSH
31845: CALL_OW 255
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 91
31856: PUSH
31857: LD_VAR 0 1
31861: PUSH
31862: LD_INT 6
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 30
31872: PUSH
31873: LD_VAR 0 4
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: PPUSH
31890: CALL_OW 69
31894: ADD
31895: ST_TO_ADDR
31896: GO 31824
31898: POP
31899: POP
// for i = 1 to tmp do
31900: LD_ADDR_VAR 0 4
31904: PUSH
31905: DOUBLE
31906: LD_INT 1
31908: DEC
31909: ST_TO_ADDR
31910: LD_VAR 0 3
31914: PUSH
31915: FOR_TO
31916: IFFALSE 32004
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31918: LD_ADDR_VAR 0 5
31922: PUSH
31923: LD_VAR 0 5
31927: PUSH
31928: LD_VAR 0 3
31932: PUSH
31933: LD_VAR 0 4
31937: ARRAY
31938: PPUSH
31939: CALL_OW 266
31943: PUSH
31944: LD_VAR 0 3
31948: PUSH
31949: LD_VAR 0 4
31953: ARRAY
31954: PPUSH
31955: CALL_OW 250
31959: PUSH
31960: LD_VAR 0 3
31964: PUSH
31965: LD_VAR 0 4
31969: ARRAY
31970: PPUSH
31971: CALL_OW 251
31975: PUSH
31976: LD_VAR 0 3
31980: PUSH
31981: LD_VAR 0 4
31985: ARRAY
31986: PPUSH
31987: CALL_OW 254
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: ADD
32001: ST_TO_ADDR
32002: GO 31915
32004: POP
32005: POP
// result := list ;
32006: LD_ADDR_VAR 0 2
32010: PUSH
32011: LD_VAR 0 5
32015: ST_TO_ADDR
// end ;
32016: LD_VAR 0 2
32020: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32021: LD_INT 0
32023: PPUSH
32024: PPUSH
32025: PPUSH
32026: PPUSH
32027: PPUSH
32028: PPUSH
32029: PPUSH
// if not factory then
32030: LD_VAR 0 1
32034: NOT
32035: IFFALSE 32039
// exit ;
32037: GO 32632
// if control = control_apeman then
32039: LD_VAR 0 4
32043: PUSH
32044: LD_INT 5
32046: EQUAL
32047: IFFALSE 32156
// begin tmp := UnitsInside ( factory ) ;
32049: LD_ADDR_VAR 0 8
32053: PUSH
32054: LD_VAR 0 1
32058: PPUSH
32059: CALL_OW 313
32063: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32064: LD_VAR 0 8
32068: PPUSH
32069: LD_INT 25
32071: PUSH
32072: LD_INT 12
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PPUSH
32079: CALL_OW 72
32083: NOT
32084: IFFALSE 32094
// control := control_manual ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: LD_INT 1
32093: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32094: LD_ADDR_VAR 0 8
32098: PUSH
32099: LD_VAR 0 1
32103: PPUSH
32104: CALL 31791 0 1
32108: ST_TO_ADDR
// if tmp then
32109: LD_VAR 0 8
32113: IFFALSE 32156
// begin for i in tmp do
32115: LD_ADDR_VAR 0 7
32119: PUSH
32120: LD_VAR 0 8
32124: PUSH
32125: FOR_IN
32126: IFFALSE 32154
// if i [ 1 ] = b_ext_radio then
32128: LD_VAR 0 7
32132: PUSH
32133: LD_INT 1
32135: ARRAY
32136: PUSH
32137: LD_INT 22
32139: EQUAL
32140: IFFALSE 32152
// begin control := control_remote ;
32142: LD_ADDR_VAR 0 4
32146: PUSH
32147: LD_INT 2
32149: ST_TO_ADDR
// break ;
32150: GO 32154
// end ;
32152: GO 32125
32154: POP
32155: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32156: LD_VAR 0 1
32160: PPUSH
32161: LD_VAR 0 2
32165: PPUSH
32166: LD_VAR 0 3
32170: PPUSH
32171: LD_VAR 0 4
32175: PPUSH
32176: LD_VAR 0 5
32180: PPUSH
32181: CALL_OW 448
32185: IFFALSE 32220
// begin result := [ chassis , engine , control , weapon ] ;
32187: LD_ADDR_VAR 0 6
32191: PUSH
32192: LD_VAR 0 2
32196: PUSH
32197: LD_VAR 0 3
32201: PUSH
32202: LD_VAR 0 4
32206: PUSH
32207: LD_VAR 0 5
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// exit ;
32218: GO 32632
// end ; _chassis := AvailableChassisList ( factory ) ;
32220: LD_ADDR_VAR 0 9
32224: PUSH
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 475
32234: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32235: LD_ADDR_VAR 0 11
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 476
32249: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32250: LD_ADDR_VAR 0 12
32254: PUSH
32255: LD_VAR 0 1
32259: PPUSH
32260: CALL_OW 477
32264: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32265: LD_ADDR_VAR 0 10
32269: PUSH
32270: LD_VAR 0 1
32274: PPUSH
32275: CALL_OW 478
32279: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32280: LD_VAR 0 9
32284: NOT
32285: PUSH
32286: LD_VAR 0 11
32290: NOT
32291: OR
32292: PUSH
32293: LD_VAR 0 12
32297: NOT
32298: OR
32299: PUSH
32300: LD_VAR 0 10
32304: NOT
32305: OR
32306: IFFALSE 32341
// begin result := [ chassis , engine , control , weapon ] ;
32308: LD_ADDR_VAR 0 6
32312: PUSH
32313: LD_VAR 0 2
32317: PUSH
32318: LD_VAR 0 3
32322: PUSH
32323: LD_VAR 0 4
32327: PUSH
32328: LD_VAR 0 5
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: ST_TO_ADDR
// exit ;
32339: GO 32632
// end ; if not chassis in _chassis then
32341: LD_VAR 0 2
32345: PUSH
32346: LD_VAR 0 9
32350: IN
32351: NOT
32352: IFFALSE 32378
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32354: LD_ADDR_VAR 0 2
32358: PUSH
32359: LD_VAR 0 9
32363: PUSH
32364: LD_INT 1
32366: PPUSH
32367: LD_VAR 0 9
32371: PPUSH
32372: CALL_OW 12
32376: ARRAY
32377: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32378: LD_VAR 0 2
32382: PPUSH
32383: LD_VAR 0 3
32387: PPUSH
32388: CALL 32637 0 2
32392: NOT
32393: IFFALSE 32452
// repeat engine := _engine [ 1 ] ;
32395: LD_ADDR_VAR 0 3
32399: PUSH
32400: LD_VAR 0 11
32404: PUSH
32405: LD_INT 1
32407: ARRAY
32408: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32409: LD_ADDR_VAR 0 11
32413: PUSH
32414: LD_VAR 0 11
32418: PPUSH
32419: LD_INT 1
32421: PPUSH
32422: CALL_OW 3
32426: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32427: LD_VAR 0 2
32431: PPUSH
32432: LD_VAR 0 3
32436: PPUSH
32437: CALL 32637 0 2
32441: PUSH
32442: LD_VAR 0 11
32446: PUSH
32447: EMPTY
32448: EQUAL
32449: OR
32450: IFFALSE 32395
// if not control in _control then
32452: LD_VAR 0 4
32456: PUSH
32457: LD_VAR 0 12
32461: IN
32462: NOT
32463: IFFALSE 32489
// control := _control [ rand ( 1 , _control ) ] ;
32465: LD_ADDR_VAR 0 4
32469: PUSH
32470: LD_VAR 0 12
32474: PUSH
32475: LD_INT 1
32477: PPUSH
32478: LD_VAR 0 12
32482: PPUSH
32483: CALL_OW 12
32487: ARRAY
32488: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32489: LD_VAR 0 2
32493: PPUSH
32494: LD_VAR 0 5
32498: PPUSH
32499: CALL 32857 0 2
32503: NOT
32504: IFFALSE 32563
// repeat weapon := _weapon [ 1 ] ;
32506: LD_ADDR_VAR 0 5
32510: PUSH
32511: LD_VAR 0 10
32515: PUSH
32516: LD_INT 1
32518: ARRAY
32519: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32520: LD_ADDR_VAR 0 10
32524: PUSH
32525: LD_VAR 0 10
32529: PPUSH
32530: LD_INT 1
32532: PPUSH
32533: CALL_OW 3
32537: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32538: LD_VAR 0 2
32542: PPUSH
32543: LD_VAR 0 5
32547: PPUSH
32548: CALL 32857 0 2
32552: PUSH
32553: LD_VAR 0 10
32557: PUSH
32558: EMPTY
32559: EQUAL
32560: OR
32561: IFFALSE 32506
// result := [ ] ;
32563: LD_ADDR_VAR 0 6
32567: PUSH
32568: EMPTY
32569: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32570: LD_VAR 0 1
32574: PPUSH
32575: LD_VAR 0 2
32579: PPUSH
32580: LD_VAR 0 3
32584: PPUSH
32585: LD_VAR 0 4
32589: PPUSH
32590: LD_VAR 0 5
32594: PPUSH
32595: CALL_OW 448
32599: IFFALSE 32632
// result := [ chassis , engine , control , weapon ] ;
32601: LD_ADDR_VAR 0 6
32605: PUSH
32606: LD_VAR 0 2
32610: PUSH
32611: LD_VAR 0 3
32615: PUSH
32616: LD_VAR 0 4
32620: PUSH
32621: LD_VAR 0 5
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: ST_TO_ADDR
// end ;
32632: LD_VAR 0 6
32636: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32637: LD_INT 0
32639: PPUSH
// if not chassis or not engine then
32640: LD_VAR 0 1
32644: NOT
32645: PUSH
32646: LD_VAR 0 2
32650: NOT
32651: OR
32652: IFFALSE 32656
// exit ;
32654: GO 32852
// case engine of engine_solar :
32656: LD_VAR 0 2
32660: PUSH
32661: LD_INT 2
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32707
32669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32670: LD_ADDR_VAR 0 3
32674: PUSH
32675: LD_INT 11
32677: PUSH
32678: LD_INT 12
32680: PUSH
32681: LD_INT 13
32683: PUSH
32684: LD_INT 14
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 3
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: ST_TO_ADDR
32705: GO 32836
32707: LD_INT 1
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32715
32713: GO 32777
32715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32716: LD_ADDR_VAR 0 3
32720: PUSH
32721: LD_INT 11
32723: PUSH
32724: LD_INT 12
32726: PUSH
32727: LD_INT 13
32729: PUSH
32730: LD_INT 14
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: LD_INT 4
32744: PUSH
32745: LD_INT 5
32747: PUSH
32748: LD_INT 21
32750: PUSH
32751: LD_INT 23
32753: PUSH
32754: LD_INT 22
32756: PUSH
32757: LD_INT 24
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
32775: GO 32836
32777: LD_INT 3
32779: DOUBLE
32780: EQUAL
32781: IFTRUE 32785
32783: GO 32835
32785: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32786: LD_ADDR_VAR 0 3
32790: PUSH
32791: LD_INT 13
32793: PUSH
32794: LD_INT 14
32796: PUSH
32797: LD_INT 2
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: LD_INT 5
32808: PUSH
32809: LD_INT 21
32811: PUSH
32812: LD_INT 22
32814: PUSH
32815: LD_INT 23
32817: PUSH
32818: LD_INT 24
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
32833: GO 32836
32835: POP
// result := ( chassis in result ) ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 1
32845: PUSH
32846: LD_VAR 0 3
32850: IN
32851: ST_TO_ADDR
// end ;
32852: LD_VAR 0 3
32856: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32857: LD_INT 0
32859: PPUSH
// if not chassis or not weapon then
32860: LD_VAR 0 1
32864: NOT
32865: PUSH
32866: LD_VAR 0 2
32870: NOT
32871: OR
32872: IFFALSE 32876
// exit ;
32874: GO 33902
// case weapon of us_machine_gun :
32876: LD_VAR 0 2
32880: PUSH
32881: LD_INT 2
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 32919
32889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32890: LD_ADDR_VAR 0 3
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 3
32903: PUSH
32904: LD_INT 4
32906: PUSH
32907: LD_INT 5
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: ST_TO_ADDR
32917: GO 33886
32919: LD_INT 3
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 32957
32927: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32928: LD_ADDR_VAR 0 3
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: LD_INT 2
32938: PUSH
32939: LD_INT 3
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: LD_INT 5
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: ST_TO_ADDR
32955: GO 33886
32957: LD_INT 11
32959: DOUBLE
32960: EQUAL
32961: IFTRUE 32965
32963: GO 32995
32965: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32966: LD_ADDR_VAR 0 3
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 3
32979: PUSH
32980: LD_INT 4
32982: PUSH
32983: LD_INT 5
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
32993: GO 33886
32995: LD_INT 4
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33029
33003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 3
33014: PUSH
33015: LD_INT 4
33017: PUSH
33018: LD_INT 5
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: ST_TO_ADDR
33027: GO 33886
33029: LD_INT 5
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33063
33037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 4
33051: PUSH
33052: LD_INT 5
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: ST_TO_ADDR
33061: GO 33886
33063: LD_INT 9
33065: DOUBLE
33066: EQUAL
33067: IFTRUE 33071
33069: GO 33097
33071: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33072: LD_ADDR_VAR 0 3
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 3
33082: PUSH
33083: LD_INT 4
33085: PUSH
33086: LD_INT 5
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: ST_TO_ADDR
33095: GO 33886
33097: LD_INT 7
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33105
33103: GO 33131
33105: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33106: LD_ADDR_VAR 0 3
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: LD_INT 4
33119: PUSH
33120: LD_INT 5
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
33129: GO 33886
33131: LD_INT 12
33133: DOUBLE
33134: EQUAL
33135: IFTRUE 33139
33137: GO 33165
33139: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33140: LD_ADDR_VAR 0 3
33144: PUSH
33145: LD_INT 2
33147: PUSH
33148: LD_INT 3
33150: PUSH
33151: LD_INT 4
33153: PUSH
33154: LD_INT 5
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: ST_TO_ADDR
33163: GO 33886
33165: LD_INT 13
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33199
33173: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33174: LD_ADDR_VAR 0 3
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: LD_INT 4
33187: PUSH
33188: LD_INT 5
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: ST_TO_ADDR
33197: GO 33886
33199: LD_INT 14
33201: DOUBLE
33202: EQUAL
33203: IFTRUE 33207
33205: GO 33225
33207: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33208: LD_ADDR_VAR 0 3
33212: PUSH
33213: LD_INT 4
33215: PUSH
33216: LD_INT 5
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: ST_TO_ADDR
33223: GO 33886
33225: LD_INT 6
33227: DOUBLE
33228: EQUAL
33229: IFTRUE 33233
33231: GO 33251
33233: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33234: LD_ADDR_VAR 0 3
33238: PUSH
33239: LD_INT 4
33241: PUSH
33242: LD_INT 5
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: ST_TO_ADDR
33249: GO 33886
33251: LD_INT 10
33253: DOUBLE
33254: EQUAL
33255: IFTRUE 33259
33257: GO 33277
33259: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33260: LD_ADDR_VAR 0 3
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: LD_INT 5
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: ST_TO_ADDR
33275: GO 33886
33277: LD_INT 22
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33311
33285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33286: LD_ADDR_VAR 0 3
33290: PUSH
33291: LD_INT 11
33293: PUSH
33294: LD_INT 12
33296: PUSH
33297: LD_INT 13
33299: PUSH
33300: LD_INT 14
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: ST_TO_ADDR
33309: GO 33886
33311: LD_INT 23
33313: DOUBLE
33314: EQUAL
33315: IFTRUE 33319
33317: GO 33345
33319: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33320: LD_ADDR_VAR 0 3
33324: PUSH
33325: LD_INT 11
33327: PUSH
33328: LD_INT 12
33330: PUSH
33331: LD_INT 13
33333: PUSH
33334: LD_INT 14
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
33343: GO 33886
33345: LD_INT 24
33347: DOUBLE
33348: EQUAL
33349: IFTRUE 33353
33351: GO 33379
33353: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: LD_INT 11
33361: PUSH
33362: LD_INT 12
33364: PUSH
33365: LD_INT 13
33367: PUSH
33368: LD_INT 14
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: ST_TO_ADDR
33377: GO 33886
33379: LD_INT 30
33381: DOUBLE
33382: EQUAL
33383: IFTRUE 33387
33385: GO 33413
33387: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_INT 11
33395: PUSH
33396: LD_INT 12
33398: PUSH
33399: LD_INT 13
33401: PUSH
33402: LD_INT 14
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
33411: GO 33886
33413: LD_INT 25
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33439
33421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_INT 13
33429: PUSH
33430: LD_INT 14
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: ST_TO_ADDR
33437: GO 33886
33439: LD_INT 27
33441: DOUBLE
33442: EQUAL
33443: IFTRUE 33447
33445: GO 33465
33447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33448: LD_ADDR_VAR 0 3
33452: PUSH
33453: LD_INT 13
33455: PUSH
33456: LD_INT 14
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: ST_TO_ADDR
33463: GO 33886
33465: LD_INT 28
33467: DOUBLE
33468: EQUAL
33469: IFTRUE 33473
33471: GO 33491
33473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33474: LD_ADDR_VAR 0 3
33478: PUSH
33479: LD_INT 13
33481: PUSH
33482: LD_INT 14
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: ST_TO_ADDR
33489: GO 33886
33491: LD_INT 29
33493: DOUBLE
33494: EQUAL
33495: IFTRUE 33499
33497: GO 33517
33499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 13
33507: PUSH
33508: LD_INT 14
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: ST_TO_ADDR
33515: GO 33886
33517: LD_INT 31
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33543
33525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_INT 13
33533: PUSH
33534: LD_INT 14
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: ST_TO_ADDR
33541: GO 33886
33543: LD_INT 26
33545: DOUBLE
33546: EQUAL
33547: IFTRUE 33551
33549: GO 33569
33551: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33552: LD_ADDR_VAR 0 3
33556: PUSH
33557: LD_INT 13
33559: PUSH
33560: LD_INT 14
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: ST_TO_ADDR
33567: GO 33886
33569: LD_INT 42
33571: DOUBLE
33572: EQUAL
33573: IFTRUE 33577
33575: GO 33603
33577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33578: LD_ADDR_VAR 0 3
33582: PUSH
33583: LD_INT 21
33585: PUSH
33586: LD_INT 22
33588: PUSH
33589: LD_INT 23
33591: PUSH
33592: LD_INT 24
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 33886
33603: LD_INT 43
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33637
33611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 21
33619: PUSH
33620: LD_INT 22
33622: PUSH
33623: LD_INT 23
33625: PUSH
33626: LD_INT 24
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
33635: GO 33886
33637: LD_INT 44
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33671
33645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_INT 21
33653: PUSH
33654: LD_INT 22
33656: PUSH
33657: LD_INT 23
33659: PUSH
33660: LD_INT 24
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
33669: GO 33886
33671: LD_INT 45
33673: DOUBLE
33674: EQUAL
33675: IFTRUE 33679
33677: GO 33705
33679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33680: LD_ADDR_VAR 0 3
33684: PUSH
33685: LD_INT 21
33687: PUSH
33688: LD_INT 22
33690: PUSH
33691: LD_INT 23
33693: PUSH
33694: LD_INT 24
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
33703: GO 33886
33705: LD_INT 49
33707: DOUBLE
33708: EQUAL
33709: IFTRUE 33713
33711: GO 33739
33713: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33714: LD_ADDR_VAR 0 3
33718: PUSH
33719: LD_INT 21
33721: PUSH
33722: LD_INT 22
33724: PUSH
33725: LD_INT 23
33727: PUSH
33728: LD_INT 24
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
33737: GO 33886
33739: LD_INT 51
33741: DOUBLE
33742: EQUAL
33743: IFTRUE 33747
33745: GO 33773
33747: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33748: LD_ADDR_VAR 0 3
33752: PUSH
33753: LD_INT 21
33755: PUSH
33756: LD_INT 22
33758: PUSH
33759: LD_INT 23
33761: PUSH
33762: LD_INT 24
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
33771: GO 33886
33773: LD_INT 52
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 33807
33781: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33782: LD_ADDR_VAR 0 3
33786: PUSH
33787: LD_INT 21
33789: PUSH
33790: LD_INT 22
33792: PUSH
33793: LD_INT 23
33795: PUSH
33796: LD_INT 24
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: ST_TO_ADDR
33805: GO 33886
33807: LD_INT 53
33809: DOUBLE
33810: EQUAL
33811: IFTRUE 33815
33813: GO 33833
33815: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33816: LD_ADDR_VAR 0 3
33820: PUSH
33821: LD_INT 23
33823: PUSH
33824: LD_INT 24
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: ST_TO_ADDR
33831: GO 33886
33833: LD_INT 46
33835: DOUBLE
33836: EQUAL
33837: IFTRUE 33841
33839: GO 33859
33841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_INT 23
33849: PUSH
33850: LD_INT 24
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: ST_TO_ADDR
33857: GO 33886
33859: LD_INT 47
33861: DOUBLE
33862: EQUAL
33863: IFTRUE 33867
33865: GO 33885
33867: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33868: LD_ADDR_VAR 0 3
33872: PUSH
33873: LD_INT 23
33875: PUSH
33876: LD_INT 24
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: ST_TO_ADDR
33883: GO 33886
33885: POP
// result := ( chassis in result ) ;
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_VAR 0 1
33895: PUSH
33896: LD_VAR 0 3
33900: IN
33901: ST_TO_ADDR
// end ;
33902: LD_VAR 0 3
33906: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33907: LD_INT 0
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
// result := array ;
33916: LD_ADDR_VAR 0 5
33920: PUSH
33921: LD_VAR 0 1
33925: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33926: LD_VAR 0 1
33930: NOT
33931: PUSH
33932: LD_VAR 0 2
33936: NOT
33937: OR
33938: PUSH
33939: LD_VAR 0 3
33943: NOT
33944: OR
33945: PUSH
33946: LD_VAR 0 2
33950: PUSH
33951: LD_VAR 0 1
33955: GREATER
33956: OR
33957: PUSH
33958: LD_VAR 0 3
33962: PUSH
33963: LD_VAR 0 1
33967: GREATER
33968: OR
33969: IFFALSE 33973
// exit ;
33971: GO 34269
// if direction then
33973: LD_VAR 0 4
33977: IFFALSE 34041
// begin d := 1 ;
33979: LD_ADDR_VAR 0 9
33983: PUSH
33984: LD_INT 1
33986: ST_TO_ADDR
// if i_from > i_to then
33987: LD_VAR 0 2
33991: PUSH
33992: LD_VAR 0 3
33996: GREATER
33997: IFFALSE 34023
// length := ( array - i_from ) + i_to else
33999: LD_ADDR_VAR 0 11
34003: PUSH
34004: LD_VAR 0 1
34008: PUSH
34009: LD_VAR 0 2
34013: MINUS
34014: PUSH
34015: LD_VAR 0 3
34019: PLUS
34020: ST_TO_ADDR
34021: GO 34039
// length := i_to - i_from ;
34023: LD_ADDR_VAR 0 11
34027: PUSH
34028: LD_VAR 0 3
34032: PUSH
34033: LD_VAR 0 2
34037: MINUS
34038: ST_TO_ADDR
// end else
34039: GO 34102
// begin d := - 1 ;
34041: LD_ADDR_VAR 0 9
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: ST_TO_ADDR
// if i_from > i_to then
34050: LD_VAR 0 2
34054: PUSH
34055: LD_VAR 0 3
34059: GREATER
34060: IFFALSE 34080
// length := i_from - i_to else
34062: LD_ADDR_VAR 0 11
34066: PUSH
34067: LD_VAR 0 2
34071: PUSH
34072: LD_VAR 0 3
34076: MINUS
34077: ST_TO_ADDR
34078: GO 34102
// length := ( array - i_to ) + i_from ;
34080: LD_ADDR_VAR 0 11
34084: PUSH
34085: LD_VAR 0 1
34089: PUSH
34090: LD_VAR 0 3
34094: MINUS
34095: PUSH
34096: LD_VAR 0 2
34100: PLUS
34101: ST_TO_ADDR
// end ; if not length then
34102: LD_VAR 0 11
34106: NOT
34107: IFFALSE 34111
// exit ;
34109: GO 34269
// tmp := array ;
34111: LD_ADDR_VAR 0 10
34115: PUSH
34116: LD_VAR 0 1
34120: ST_TO_ADDR
// for i = 1 to length do
34121: LD_ADDR_VAR 0 6
34125: PUSH
34126: DOUBLE
34127: LD_INT 1
34129: DEC
34130: ST_TO_ADDR
34131: LD_VAR 0 11
34135: PUSH
34136: FOR_TO
34137: IFFALSE 34257
// begin for j = 1 to array do
34139: LD_ADDR_VAR 0 7
34143: PUSH
34144: DOUBLE
34145: LD_INT 1
34147: DEC
34148: ST_TO_ADDR
34149: LD_VAR 0 1
34153: PUSH
34154: FOR_TO
34155: IFFALSE 34243
// begin k := j + d ;
34157: LD_ADDR_VAR 0 8
34161: PUSH
34162: LD_VAR 0 7
34166: PUSH
34167: LD_VAR 0 9
34171: PLUS
34172: ST_TO_ADDR
// if k > array then
34173: LD_VAR 0 8
34177: PUSH
34178: LD_VAR 0 1
34182: GREATER
34183: IFFALSE 34193
// k := 1 ;
34185: LD_ADDR_VAR 0 8
34189: PUSH
34190: LD_INT 1
34192: ST_TO_ADDR
// if not k then
34193: LD_VAR 0 8
34197: NOT
34198: IFFALSE 34210
// k := array ;
34200: LD_ADDR_VAR 0 8
34204: PUSH
34205: LD_VAR 0 1
34209: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34210: LD_ADDR_VAR 0 10
34214: PUSH
34215: LD_VAR 0 10
34219: PPUSH
34220: LD_VAR 0 8
34224: PPUSH
34225: LD_VAR 0 1
34229: PUSH
34230: LD_VAR 0 7
34234: ARRAY
34235: PPUSH
34236: CALL_OW 1
34240: ST_TO_ADDR
// end ;
34241: GO 34154
34243: POP
34244: POP
// array := tmp ;
34245: LD_ADDR_VAR 0 1
34249: PUSH
34250: LD_VAR 0 10
34254: ST_TO_ADDR
// end ;
34255: GO 34136
34257: POP
34258: POP
// result := array ;
34259: LD_ADDR_VAR 0 5
34263: PUSH
34264: LD_VAR 0 1
34268: ST_TO_ADDR
// end ;
34269: LD_VAR 0 5
34273: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34274: LD_INT 0
34276: PPUSH
34277: PPUSH
// result := 0 ;
34278: LD_ADDR_VAR 0 3
34282: PUSH
34283: LD_INT 0
34285: ST_TO_ADDR
// if not array or not value in array then
34286: LD_VAR 0 1
34290: NOT
34291: PUSH
34292: LD_VAR 0 2
34296: PUSH
34297: LD_VAR 0 1
34301: IN
34302: NOT
34303: OR
34304: IFFALSE 34308
// exit ;
34306: GO 34362
// for i = 1 to array do
34308: LD_ADDR_VAR 0 4
34312: PUSH
34313: DOUBLE
34314: LD_INT 1
34316: DEC
34317: ST_TO_ADDR
34318: LD_VAR 0 1
34322: PUSH
34323: FOR_TO
34324: IFFALSE 34360
// if value = array [ i ] then
34326: LD_VAR 0 2
34330: PUSH
34331: LD_VAR 0 1
34335: PUSH
34336: LD_VAR 0 4
34340: ARRAY
34341: EQUAL
34342: IFFALSE 34358
// begin result := i ;
34344: LD_ADDR_VAR 0 3
34348: PUSH
34349: LD_VAR 0 4
34353: ST_TO_ADDR
// exit ;
34354: POP
34355: POP
34356: GO 34362
// end ;
34358: GO 34323
34360: POP
34361: POP
// end ;
34362: LD_VAR 0 3
34366: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34367: LD_INT 0
34369: PPUSH
// vc_chassis := chassis ;
34370: LD_ADDR_OWVAR 37
34374: PUSH
34375: LD_VAR 0 1
34379: ST_TO_ADDR
// vc_engine := engine ;
34380: LD_ADDR_OWVAR 39
34384: PUSH
34385: LD_VAR 0 2
34389: ST_TO_ADDR
// vc_control := control ;
34390: LD_ADDR_OWVAR 38
34394: PUSH
34395: LD_VAR 0 3
34399: ST_TO_ADDR
// vc_weapon := weapon ;
34400: LD_ADDR_OWVAR 40
34404: PUSH
34405: LD_VAR 0 4
34409: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34410: LD_ADDR_OWVAR 41
34414: PUSH
34415: LD_VAR 0 5
34419: ST_TO_ADDR
// end ;
34420: LD_VAR 0 6
34424: RET
// export function WantPlant ( unit ) ; var task ; begin
34425: LD_INT 0
34427: PPUSH
34428: PPUSH
// result := false ;
34429: LD_ADDR_VAR 0 2
34433: PUSH
34434: LD_INT 0
34436: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 437
34451: ST_TO_ADDR
// if task then
34452: LD_VAR 0 3
34456: IFFALSE 34484
// if task [ 1 ] [ 1 ] = p then
34458: LD_VAR 0 3
34462: PUSH
34463: LD_INT 1
34465: ARRAY
34466: PUSH
34467: LD_INT 1
34469: ARRAY
34470: PUSH
34471: LD_STRING p
34473: EQUAL
34474: IFFALSE 34484
// result := true ;
34476: LD_ADDR_VAR 0 2
34480: PUSH
34481: LD_INT 1
34483: ST_TO_ADDR
// end ;
34484: LD_VAR 0 2
34488: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34489: LD_INT 0
34491: PPUSH
34492: PPUSH
34493: PPUSH
34494: PPUSH
// if pos < 1 then
34495: LD_VAR 0 2
34499: PUSH
34500: LD_INT 1
34502: LESS
34503: IFFALSE 34507
// exit ;
34505: GO 34810
// if pos = 1 then
34507: LD_VAR 0 2
34511: PUSH
34512: LD_INT 1
34514: EQUAL
34515: IFFALSE 34548
// result := Replace ( arr , pos [ 1 ] , value ) else
34517: LD_ADDR_VAR 0 4
34521: PUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: LD_VAR 0 2
34531: PUSH
34532: LD_INT 1
34534: ARRAY
34535: PPUSH
34536: LD_VAR 0 3
34540: PPUSH
34541: CALL_OW 1
34545: ST_TO_ADDR
34546: GO 34810
// begin tmp := arr ;
34548: LD_ADDR_VAR 0 6
34552: PUSH
34553: LD_VAR 0 1
34557: ST_TO_ADDR
// s_arr := [ tmp ] ;
34558: LD_ADDR_VAR 0 7
34562: PUSH
34563: LD_VAR 0 6
34567: PUSH
34568: EMPTY
34569: LIST
34570: ST_TO_ADDR
// for i = 1 to pos - 1 do
34571: LD_ADDR_VAR 0 5
34575: PUSH
34576: DOUBLE
34577: LD_INT 1
34579: DEC
34580: ST_TO_ADDR
34581: LD_VAR 0 2
34585: PUSH
34586: LD_INT 1
34588: MINUS
34589: PUSH
34590: FOR_TO
34591: IFFALSE 34636
// begin tmp := tmp [ pos [ i ] ] ;
34593: LD_ADDR_VAR 0 6
34597: PUSH
34598: LD_VAR 0 6
34602: PUSH
34603: LD_VAR 0 2
34607: PUSH
34608: LD_VAR 0 5
34612: ARRAY
34613: ARRAY
34614: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34615: LD_ADDR_VAR 0 7
34619: PUSH
34620: LD_VAR 0 7
34624: PUSH
34625: LD_VAR 0 6
34629: PUSH
34630: EMPTY
34631: LIST
34632: ADD
34633: ST_TO_ADDR
// end ;
34634: GO 34590
34636: POP
34637: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34638: LD_ADDR_VAR 0 6
34642: PUSH
34643: LD_VAR 0 6
34647: PPUSH
34648: LD_VAR 0 2
34652: PUSH
34653: LD_VAR 0 2
34657: ARRAY
34658: PPUSH
34659: LD_VAR 0 3
34663: PPUSH
34664: CALL_OW 1
34668: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34669: LD_ADDR_VAR 0 7
34673: PUSH
34674: LD_VAR 0 7
34678: PPUSH
34679: LD_VAR 0 7
34683: PPUSH
34684: LD_VAR 0 6
34688: PPUSH
34689: CALL_OW 1
34693: ST_TO_ADDR
// for i = s_arr downto 2 do
34694: LD_ADDR_VAR 0 5
34698: PUSH
34699: DOUBLE
34700: LD_VAR 0 7
34704: INC
34705: ST_TO_ADDR
34706: LD_INT 2
34708: PUSH
34709: FOR_DOWNTO
34710: IFFALSE 34794
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34712: LD_ADDR_VAR 0 6
34716: PUSH
34717: LD_VAR 0 7
34721: PUSH
34722: LD_VAR 0 5
34726: PUSH
34727: LD_INT 1
34729: MINUS
34730: ARRAY
34731: PPUSH
34732: LD_VAR 0 2
34736: PUSH
34737: LD_VAR 0 5
34741: PUSH
34742: LD_INT 1
34744: MINUS
34745: ARRAY
34746: PPUSH
34747: LD_VAR 0 7
34751: PUSH
34752: LD_VAR 0 5
34756: ARRAY
34757: PPUSH
34758: CALL_OW 1
34762: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34763: LD_ADDR_VAR 0 7
34767: PUSH
34768: LD_VAR 0 7
34772: PPUSH
34773: LD_VAR 0 5
34777: PUSH
34778: LD_INT 1
34780: MINUS
34781: PPUSH
34782: LD_VAR 0 6
34786: PPUSH
34787: CALL_OW 1
34791: ST_TO_ADDR
// end ;
34792: GO 34709
34794: POP
34795: POP
// result := s_arr [ 1 ] ;
34796: LD_ADDR_VAR 0 4
34800: PUSH
34801: LD_VAR 0 7
34805: PUSH
34806: LD_INT 1
34808: ARRAY
34809: ST_TO_ADDR
// end ; end ;
34810: LD_VAR 0 4
34814: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34815: LD_INT 0
34817: PPUSH
34818: PPUSH
// if not list then
34819: LD_VAR 0 1
34823: NOT
34824: IFFALSE 34828
// exit ;
34826: GO 34919
// i := list [ pos1 ] ;
34828: LD_ADDR_VAR 0 5
34832: PUSH
34833: LD_VAR 0 1
34837: PUSH
34838: LD_VAR 0 2
34842: ARRAY
34843: ST_TO_ADDR
// if not i then
34844: LD_VAR 0 5
34848: NOT
34849: IFFALSE 34853
// exit ;
34851: GO 34919
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34853: LD_ADDR_VAR 0 1
34857: PUSH
34858: LD_VAR 0 1
34862: PPUSH
34863: LD_VAR 0 2
34867: PPUSH
34868: LD_VAR 0 1
34872: PUSH
34873: LD_VAR 0 3
34877: ARRAY
34878: PPUSH
34879: CALL_OW 1
34883: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34884: LD_ADDR_VAR 0 1
34888: PUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: LD_VAR 0 3
34898: PPUSH
34899: LD_VAR 0 5
34903: PPUSH
34904: CALL_OW 1
34908: ST_TO_ADDR
// result := list ;
34909: LD_ADDR_VAR 0 4
34913: PUSH
34914: LD_VAR 0 1
34918: ST_TO_ADDR
// end ;
34919: LD_VAR 0 4
34923: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34924: LD_INT 0
34926: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34927: LD_ADDR_VAR 0 5
34931: PUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 250
34941: PPUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 251
34951: PPUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: LD_VAR 0 4
34966: PPUSH
34967: CALL 34977 0 5
34971: ST_TO_ADDR
// end ;
34972: LD_VAR 0 5
34976: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34977: LD_INT 0
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
// if not list then
34983: LD_VAR 0 3
34987: NOT
34988: IFFALSE 34992
// exit ;
34990: GO 35380
// result := [ ] ;
34992: LD_ADDR_VAR 0 6
34996: PUSH
34997: EMPTY
34998: ST_TO_ADDR
// for i in list do
34999: LD_ADDR_VAR 0 7
35003: PUSH
35004: LD_VAR 0 3
35008: PUSH
35009: FOR_IN
35010: IFFALSE 35212
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_VAR 0 7
35021: PPUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: CALL_OW 297
35036: ST_TO_ADDR
// if not result then
35037: LD_VAR 0 6
35041: NOT
35042: IFFALSE 35068
// result := [ [ i , tmp ] ] else
35044: LD_ADDR_VAR 0 6
35048: PUSH
35049: LD_VAR 0 7
35053: PUSH
35054: LD_VAR 0 9
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: EMPTY
35064: LIST
35065: ST_TO_ADDR
35066: GO 35210
// begin if result [ result ] [ 2 ] < tmp then
35068: LD_VAR 0 6
35072: PUSH
35073: LD_VAR 0 6
35077: ARRAY
35078: PUSH
35079: LD_INT 2
35081: ARRAY
35082: PUSH
35083: LD_VAR 0 9
35087: LESS
35088: IFFALSE 35130
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35090: LD_ADDR_VAR 0 6
35094: PUSH
35095: LD_VAR 0 6
35099: PPUSH
35100: LD_VAR 0 6
35104: PUSH
35105: LD_INT 1
35107: PLUS
35108: PPUSH
35109: LD_VAR 0 7
35113: PUSH
35114: LD_VAR 0 9
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PPUSH
35123: CALL_OW 2
35127: ST_TO_ADDR
35128: GO 35210
// for j = 1 to result do
35130: LD_ADDR_VAR 0 8
35134: PUSH
35135: DOUBLE
35136: LD_INT 1
35138: DEC
35139: ST_TO_ADDR
35140: LD_VAR 0 6
35144: PUSH
35145: FOR_TO
35146: IFFALSE 35208
// begin if tmp < result [ j ] [ 2 ] then
35148: LD_VAR 0 9
35152: PUSH
35153: LD_VAR 0 6
35157: PUSH
35158: LD_VAR 0 8
35162: ARRAY
35163: PUSH
35164: LD_INT 2
35166: ARRAY
35167: LESS
35168: IFFALSE 35206
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35170: LD_ADDR_VAR 0 6
35174: PUSH
35175: LD_VAR 0 6
35179: PPUSH
35180: LD_VAR 0 8
35184: PPUSH
35185: LD_VAR 0 7
35189: PUSH
35190: LD_VAR 0 9
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PPUSH
35199: CALL_OW 2
35203: ST_TO_ADDR
// break ;
35204: GO 35208
// end ; end ;
35206: GO 35145
35208: POP
35209: POP
// end ; end ;
35210: GO 35009
35212: POP
35213: POP
// if result and not asc then
35214: LD_VAR 0 6
35218: PUSH
35219: LD_VAR 0 4
35223: NOT
35224: AND
35225: IFFALSE 35300
// begin tmp := result ;
35227: LD_ADDR_VAR 0 9
35231: PUSH
35232: LD_VAR 0 6
35236: ST_TO_ADDR
// for i = tmp downto 1 do
35237: LD_ADDR_VAR 0 7
35241: PUSH
35242: DOUBLE
35243: LD_VAR 0 9
35247: INC
35248: ST_TO_ADDR
35249: LD_INT 1
35251: PUSH
35252: FOR_DOWNTO
35253: IFFALSE 35298
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35255: LD_ADDR_VAR 0 6
35259: PUSH
35260: LD_VAR 0 6
35264: PPUSH
35265: LD_VAR 0 9
35269: PUSH
35270: LD_VAR 0 7
35274: MINUS
35275: PUSH
35276: LD_INT 1
35278: PLUS
35279: PPUSH
35280: LD_VAR 0 9
35284: PUSH
35285: LD_VAR 0 7
35289: ARRAY
35290: PPUSH
35291: CALL_OW 1
35295: ST_TO_ADDR
35296: GO 35252
35298: POP
35299: POP
// end ; tmp := [ ] ;
35300: LD_ADDR_VAR 0 9
35304: PUSH
35305: EMPTY
35306: ST_TO_ADDR
// if mode then
35307: LD_VAR 0 5
35311: IFFALSE 35380
// begin for i = 1 to result do
35313: LD_ADDR_VAR 0 7
35317: PUSH
35318: DOUBLE
35319: LD_INT 1
35321: DEC
35322: ST_TO_ADDR
35323: LD_VAR 0 6
35327: PUSH
35328: FOR_TO
35329: IFFALSE 35368
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35331: LD_ADDR_VAR 0 9
35335: PUSH
35336: LD_VAR 0 9
35340: PPUSH
35341: LD_VAR 0 7
35345: PPUSH
35346: LD_VAR 0 6
35350: PUSH
35351: LD_VAR 0 7
35355: ARRAY
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: PPUSH
35361: CALL_OW 1
35365: ST_TO_ADDR
35366: GO 35328
35368: POP
35369: POP
// result := tmp ;
35370: LD_ADDR_VAR 0 6
35374: PUSH
35375: LD_VAR 0 9
35379: ST_TO_ADDR
// end ; end ;
35380: LD_VAR 0 6
35384: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35385: LD_INT 0
35387: PPUSH
35388: PPUSH
35389: PPUSH
35390: PPUSH
35391: PPUSH
35392: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35393: LD_ADDR_VAR 0 5
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: ST_TO_ADDR
// if not x or not y then
35415: LD_VAR 0 2
35419: NOT
35420: PUSH
35421: LD_VAR 0 3
35425: NOT
35426: OR
35427: IFFALSE 35431
// exit ;
35429: GO 37077
// if not range then
35431: LD_VAR 0 4
35435: NOT
35436: IFFALSE 35446
// range := 10 ;
35438: LD_ADDR_VAR 0 4
35442: PUSH
35443: LD_INT 10
35445: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35446: LD_ADDR_VAR 0 8
35450: PUSH
35451: LD_INT 81
35453: PUSH
35454: LD_VAR 0 1
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: LD_INT 92
35465: PUSH
35466: LD_VAR 0 2
35470: PUSH
35471: LD_VAR 0 3
35475: PUSH
35476: LD_VAR 0 4
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: LD_INT 21
35492: PUSH
35493: LD_INT 3
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: PPUSH
35509: CALL_OW 69
35513: ST_TO_ADDR
// if not tmp then
35514: LD_VAR 0 8
35518: NOT
35519: IFFALSE 35523
// exit ;
35521: GO 37077
// for i in tmp do
35523: LD_ADDR_VAR 0 6
35527: PUSH
35528: LD_VAR 0 8
35532: PUSH
35533: FOR_IN
35534: IFFALSE 37052
// begin points := [ 0 , 0 , 0 ] ;
35536: LD_ADDR_VAR 0 9
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// bpoints := 1 ;
35555: LD_ADDR_VAR 0 10
35559: PUSH
35560: LD_INT 1
35562: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35563: LD_VAR 0 6
35567: PPUSH
35568: CALL_OW 247
35572: PUSH
35573: LD_INT 1
35575: DOUBLE
35576: EQUAL
35577: IFTRUE 35581
35579: GO 36159
35581: POP
// begin if GetClass ( i ) = 1 then
35582: LD_VAR 0 6
35586: PPUSH
35587: CALL_OW 257
35591: PUSH
35592: LD_INT 1
35594: EQUAL
35595: IFFALSE 35616
// points := [ 10 , 5 , 3 ] ;
35597: LD_ADDR_VAR 0 9
35601: PUSH
35602: LD_INT 10
35604: PUSH
35605: LD_INT 5
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: LIST
35615: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35616: LD_VAR 0 6
35620: PPUSH
35621: CALL_OW 257
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: LD_INT 3
35631: PUSH
35632: LD_INT 4
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: IN
35640: IFFALSE 35661
// points := [ 3 , 2 , 1 ] ;
35642: LD_ADDR_VAR 0 9
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35661: LD_VAR 0 6
35665: PPUSH
35666: CALL_OW 257
35670: PUSH
35671: LD_INT 5
35673: EQUAL
35674: IFFALSE 35695
// points := [ 130 , 5 , 2 ] ;
35676: LD_ADDR_VAR 0 9
35680: PUSH
35681: LD_INT 130
35683: PUSH
35684: LD_INT 5
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35695: LD_VAR 0 6
35699: PPUSH
35700: CALL_OW 257
35704: PUSH
35705: LD_INT 8
35707: EQUAL
35708: IFFALSE 35729
// points := [ 35 , 35 , 30 ] ;
35710: LD_ADDR_VAR 0 9
35714: PUSH
35715: LD_INT 35
35717: PUSH
35718: LD_INT 35
35720: PUSH
35721: LD_INT 30
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35729: LD_VAR 0 6
35733: PPUSH
35734: CALL_OW 257
35738: PUSH
35739: LD_INT 9
35741: EQUAL
35742: IFFALSE 35763
// points := [ 20 , 55 , 40 ] ;
35744: LD_ADDR_VAR 0 9
35748: PUSH
35749: LD_INT 20
35751: PUSH
35752: LD_INT 55
35754: PUSH
35755: LD_INT 40
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: LIST
35762: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35763: LD_VAR 0 6
35767: PPUSH
35768: CALL_OW 257
35772: PUSH
35773: LD_INT 12
35775: PUSH
35776: LD_INT 16
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: IN
35783: IFFALSE 35804
// points := [ 5 , 3 , 2 ] ;
35785: LD_ADDR_VAR 0 9
35789: PUSH
35790: LD_INT 5
35792: PUSH
35793: LD_INT 3
35795: PUSH
35796: LD_INT 2
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35804: LD_VAR 0 6
35808: PPUSH
35809: CALL_OW 257
35813: PUSH
35814: LD_INT 17
35816: EQUAL
35817: IFFALSE 35838
// points := [ 100 , 50 , 75 ] ;
35819: LD_ADDR_VAR 0 9
35823: PUSH
35824: LD_INT 100
35826: PUSH
35827: LD_INT 50
35829: PUSH
35830: LD_INT 75
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35838: LD_VAR 0 6
35842: PPUSH
35843: CALL_OW 257
35847: PUSH
35848: LD_INT 15
35850: EQUAL
35851: IFFALSE 35872
// points := [ 10 , 5 , 3 ] ;
35853: LD_ADDR_VAR 0 9
35857: PUSH
35858: LD_INT 10
35860: PUSH
35861: LD_INT 5
35863: PUSH
35864: LD_INT 3
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35872: LD_VAR 0 6
35876: PPUSH
35877: CALL_OW 257
35881: PUSH
35882: LD_INT 14
35884: EQUAL
35885: IFFALSE 35906
// points := [ 10 , 0 , 0 ] ;
35887: LD_ADDR_VAR 0 9
35891: PUSH
35892: LD_INT 10
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35906: LD_VAR 0 6
35910: PPUSH
35911: CALL_OW 257
35915: PUSH
35916: LD_INT 11
35918: EQUAL
35919: IFFALSE 35940
// points := [ 30 , 10 , 5 ] ;
35921: LD_ADDR_VAR 0 9
35925: PUSH
35926: LD_INT 30
35928: PUSH
35929: LD_INT 10
35931: PUSH
35932: LD_INT 5
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: LIST
35939: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35940: LD_VAR 0 1
35944: PPUSH
35945: LD_INT 5
35947: PPUSH
35948: CALL_OW 321
35952: PUSH
35953: LD_INT 2
35955: EQUAL
35956: IFFALSE 35973
// bpoints := bpoints * 1.8 ;
35958: LD_ADDR_VAR 0 10
35962: PUSH
35963: LD_VAR 0 10
35967: PUSH
35968: LD_REAL  1.80000000000000E+0000
35971: MUL
35972: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35973: LD_VAR 0 6
35977: PPUSH
35978: CALL_OW 257
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 3
35991: PUSH
35992: LD_INT 4
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: IN
36001: PUSH
36002: LD_VAR 0 1
36006: PPUSH
36007: LD_INT 51
36009: PPUSH
36010: CALL_OW 321
36014: PUSH
36015: LD_INT 2
36017: EQUAL
36018: AND
36019: IFFALSE 36036
// bpoints := bpoints * 1.2 ;
36021: LD_ADDR_VAR 0 10
36025: PUSH
36026: LD_VAR 0 10
36030: PUSH
36031: LD_REAL  1.20000000000000E+0000
36034: MUL
36035: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36036: LD_VAR 0 6
36040: PPUSH
36041: CALL_OW 257
36045: PUSH
36046: LD_INT 5
36048: PUSH
36049: LD_INT 7
36051: PUSH
36052: LD_INT 9
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: IN
36060: PUSH
36061: LD_VAR 0 1
36065: PPUSH
36066: LD_INT 52
36068: PPUSH
36069: CALL_OW 321
36073: PUSH
36074: LD_INT 2
36076: EQUAL
36077: AND
36078: IFFALSE 36095
// bpoints := bpoints * 1.5 ;
36080: LD_ADDR_VAR 0 10
36084: PUSH
36085: LD_VAR 0 10
36089: PUSH
36090: LD_REAL  1.50000000000000E+0000
36093: MUL
36094: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36095: LD_VAR 0 1
36099: PPUSH
36100: LD_INT 66
36102: PPUSH
36103: CALL_OW 321
36107: PUSH
36108: LD_INT 2
36110: EQUAL
36111: IFFALSE 36128
// bpoints := bpoints * 1.1 ;
36113: LD_ADDR_VAR 0 10
36117: PUSH
36118: LD_VAR 0 10
36122: PUSH
36123: LD_REAL  1.10000000000000E+0000
36126: MUL
36127: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36128: LD_ADDR_VAR 0 10
36132: PUSH
36133: LD_VAR 0 10
36137: PUSH
36138: LD_VAR 0 6
36142: PPUSH
36143: LD_INT 1
36145: PPUSH
36146: CALL_OW 259
36150: PUSH
36151: LD_REAL  1.15000000000000E+0000
36154: MUL
36155: MUL
36156: ST_TO_ADDR
// end ; unit_vehicle :
36157: GO 36981
36159: LD_INT 2
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36167
36165: GO 36969
36167: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36168: LD_VAR 0 6
36172: PPUSH
36173: CALL_OW 264
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 42
36183: PUSH
36184: LD_INT 24
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: IN
36192: IFFALSE 36213
// points := [ 25 , 5 , 3 ] ;
36194: LD_ADDR_VAR 0 9
36198: PUSH
36199: LD_INT 25
36201: PUSH
36202: LD_INT 5
36204: PUSH
36205: LD_INT 3
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36213: LD_VAR 0 6
36217: PPUSH
36218: CALL_OW 264
36222: PUSH
36223: LD_INT 4
36225: PUSH
36226: LD_INT 43
36228: PUSH
36229: LD_INT 25
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: LIST
36236: IN
36237: IFFALSE 36258
// points := [ 40 , 15 , 5 ] ;
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_INT 40
36246: PUSH
36247: LD_INT 15
36249: PUSH
36250: LD_INT 5
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36258: LD_VAR 0 6
36262: PPUSH
36263: CALL_OW 264
36267: PUSH
36268: LD_INT 3
36270: PUSH
36271: LD_INT 23
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: IN
36278: IFFALSE 36299
// points := [ 7 , 25 , 8 ] ;
36280: LD_ADDR_VAR 0 9
36284: PUSH
36285: LD_INT 7
36287: PUSH
36288: LD_INT 25
36290: PUSH
36291: LD_INT 8
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36299: LD_VAR 0 6
36303: PPUSH
36304: CALL_OW 264
36308: PUSH
36309: LD_INT 5
36311: PUSH
36312: LD_INT 27
36314: PUSH
36315: LD_INT 44
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: IN
36323: IFFALSE 36344
// points := [ 14 , 50 , 16 ] ;
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_INT 14
36332: PUSH
36333: LD_INT 50
36335: PUSH
36336: LD_INT 16
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: LIST
36343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36344: LD_VAR 0 6
36348: PPUSH
36349: CALL_OW 264
36353: PUSH
36354: LD_INT 6
36356: PUSH
36357: LD_INT 46
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: IN
36364: IFFALSE 36385
// points := [ 32 , 120 , 70 ] ;
36366: LD_ADDR_VAR 0 9
36370: PUSH
36371: LD_INT 32
36373: PUSH
36374: LD_INT 120
36376: PUSH
36377: LD_INT 70
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36385: LD_VAR 0 6
36389: PPUSH
36390: CALL_OW 264
36394: PUSH
36395: LD_INT 7
36397: PUSH
36398: LD_INT 28
36400: PUSH
36401: LD_INT 45
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: LIST
36408: IN
36409: IFFALSE 36430
// points := [ 35 , 20 , 45 ] ;
36411: LD_ADDR_VAR 0 9
36415: PUSH
36416: LD_INT 35
36418: PUSH
36419: LD_INT 20
36421: PUSH
36422: LD_INT 45
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36430: LD_VAR 0 6
36434: PPUSH
36435: CALL_OW 264
36439: PUSH
36440: LD_INT 47
36442: PUSH
36443: EMPTY
36444: LIST
36445: IN
36446: IFFALSE 36467
// points := [ 67 , 45 , 75 ] ;
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: LD_INT 67
36455: PUSH
36456: LD_INT 45
36458: PUSH
36459: LD_INT 75
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36467: LD_VAR 0 6
36471: PPUSH
36472: CALL_OW 264
36476: PUSH
36477: LD_INT 26
36479: PUSH
36480: EMPTY
36481: LIST
36482: IN
36483: IFFALSE 36504
// points := [ 120 , 30 , 80 ] ;
36485: LD_ADDR_VAR 0 9
36489: PUSH
36490: LD_INT 120
36492: PUSH
36493: LD_INT 30
36495: PUSH
36496: LD_INT 80
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36504: LD_VAR 0 6
36508: PPUSH
36509: CALL_OW 264
36513: PUSH
36514: LD_INT 22
36516: PUSH
36517: EMPTY
36518: LIST
36519: IN
36520: IFFALSE 36541
// points := [ 40 , 1 , 1 ] ;
36522: LD_ADDR_VAR 0 9
36526: PUSH
36527: LD_INT 40
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36541: LD_VAR 0 6
36545: PPUSH
36546: CALL_OW 264
36550: PUSH
36551: LD_INT 29
36553: PUSH
36554: EMPTY
36555: LIST
36556: IN
36557: IFFALSE 36578
// points := [ 70 , 200 , 400 ] ;
36559: LD_ADDR_VAR 0 9
36563: PUSH
36564: LD_INT 70
36566: PUSH
36567: LD_INT 200
36569: PUSH
36570: LD_INT 400
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36578: LD_VAR 0 6
36582: PPUSH
36583: CALL_OW 264
36587: PUSH
36588: LD_INT 14
36590: PUSH
36591: LD_INT 53
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: IN
36598: IFFALSE 36619
// points := [ 40 , 10 , 20 ] ;
36600: LD_ADDR_VAR 0 9
36604: PUSH
36605: LD_INT 40
36607: PUSH
36608: LD_INT 10
36610: PUSH
36611: LD_INT 20
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: LIST
36618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36619: LD_VAR 0 6
36623: PPUSH
36624: CALL_OW 264
36628: PUSH
36629: LD_INT 9
36631: PUSH
36632: EMPTY
36633: LIST
36634: IN
36635: IFFALSE 36656
// points := [ 5 , 70 , 20 ] ;
36637: LD_ADDR_VAR 0 9
36641: PUSH
36642: LD_INT 5
36644: PUSH
36645: LD_INT 70
36647: PUSH
36648: LD_INT 20
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: LIST
36655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36656: LD_VAR 0 6
36660: PPUSH
36661: CALL_OW 264
36665: PUSH
36666: LD_INT 10
36668: PUSH
36669: EMPTY
36670: LIST
36671: IN
36672: IFFALSE 36693
// points := [ 35 , 110 , 70 ] ;
36674: LD_ADDR_VAR 0 9
36678: PUSH
36679: LD_INT 35
36681: PUSH
36682: LD_INT 110
36684: PUSH
36685: LD_INT 70
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: LIST
36692: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36693: LD_VAR 0 6
36697: PPUSH
36698: CALL_OW 265
36702: PUSH
36703: LD_INT 25
36705: EQUAL
36706: IFFALSE 36727
// points := [ 80 , 65 , 100 ] ;
36708: LD_ADDR_VAR 0 9
36712: PUSH
36713: LD_INT 80
36715: PUSH
36716: LD_INT 65
36718: PUSH
36719: LD_INT 100
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36727: LD_VAR 0 6
36731: PPUSH
36732: CALL_OW 263
36736: PUSH
36737: LD_INT 1
36739: EQUAL
36740: IFFALSE 36775
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36742: LD_ADDR_VAR 0 10
36746: PUSH
36747: LD_VAR 0 10
36751: PUSH
36752: LD_VAR 0 6
36756: PPUSH
36757: CALL_OW 311
36761: PPUSH
36762: LD_INT 3
36764: PPUSH
36765: CALL_OW 259
36769: PUSH
36770: LD_INT 4
36772: MUL
36773: MUL
36774: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36775: LD_VAR 0 6
36779: PPUSH
36780: CALL_OW 263
36784: PUSH
36785: LD_INT 2
36787: EQUAL
36788: IFFALSE 36839
// begin j := IsControledBy ( i ) ;
36790: LD_ADDR_VAR 0 7
36794: PUSH
36795: LD_VAR 0 6
36799: PPUSH
36800: CALL_OW 312
36804: ST_TO_ADDR
// if j then
36805: LD_VAR 0 7
36809: IFFALSE 36839
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36811: LD_ADDR_VAR 0 10
36815: PUSH
36816: LD_VAR 0 10
36820: PUSH
36821: LD_VAR 0 7
36825: PPUSH
36826: LD_INT 3
36828: PPUSH
36829: CALL_OW 259
36833: PUSH
36834: LD_INT 3
36836: MUL
36837: MUL
36838: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36839: LD_VAR 0 6
36843: PPUSH
36844: CALL_OW 264
36848: PUSH
36849: LD_INT 5
36851: PUSH
36852: LD_INT 6
36854: PUSH
36855: LD_INT 46
36857: PUSH
36858: LD_INT 44
36860: PUSH
36861: LD_INT 47
36863: PUSH
36864: LD_INT 45
36866: PUSH
36867: LD_INT 28
36869: PUSH
36870: LD_INT 7
36872: PUSH
36873: LD_INT 27
36875: PUSH
36876: LD_INT 29
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: IN
36891: PUSH
36892: LD_VAR 0 1
36896: PPUSH
36897: LD_INT 52
36899: PPUSH
36900: CALL_OW 321
36904: PUSH
36905: LD_INT 2
36907: EQUAL
36908: AND
36909: IFFALSE 36926
// bpoints := bpoints * 1.2 ;
36911: LD_ADDR_VAR 0 10
36915: PUSH
36916: LD_VAR 0 10
36920: PUSH
36921: LD_REAL  1.20000000000000E+0000
36924: MUL
36925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36926: LD_VAR 0 6
36930: PPUSH
36931: CALL_OW 264
36935: PUSH
36936: LD_INT 6
36938: PUSH
36939: LD_INT 46
36941: PUSH
36942: LD_INT 47
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: LIST
36949: IN
36950: IFFALSE 36967
// bpoints := bpoints * 1.2 ;
36952: LD_ADDR_VAR 0 10
36956: PUSH
36957: LD_VAR 0 10
36961: PUSH
36962: LD_REAL  1.20000000000000E+0000
36965: MUL
36966: ST_TO_ADDR
// end ; unit_building :
36967: GO 36981
36969: LD_INT 3
36971: DOUBLE
36972: EQUAL
36973: IFTRUE 36977
36975: GO 36980
36977: POP
// ; end ;
36978: GO 36981
36980: POP
// for j = 1 to 3 do
36981: LD_ADDR_VAR 0 7
36985: PUSH
36986: DOUBLE
36987: LD_INT 1
36989: DEC
36990: ST_TO_ADDR
36991: LD_INT 3
36993: PUSH
36994: FOR_TO
36995: IFFALSE 37048
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36997: LD_ADDR_VAR 0 5
37001: PUSH
37002: LD_VAR 0 5
37006: PPUSH
37007: LD_VAR 0 7
37011: PPUSH
37012: LD_VAR 0 5
37016: PUSH
37017: LD_VAR 0 7
37021: ARRAY
37022: PUSH
37023: LD_VAR 0 9
37027: PUSH
37028: LD_VAR 0 7
37032: ARRAY
37033: PUSH
37034: LD_VAR 0 10
37038: MUL
37039: PLUS
37040: PPUSH
37041: CALL_OW 1
37045: ST_TO_ADDR
37046: GO 36994
37048: POP
37049: POP
// end ;
37050: GO 35533
37052: POP
37053: POP
// result := Replace ( result , 4 , tmp ) ;
37054: LD_ADDR_VAR 0 5
37058: PUSH
37059: LD_VAR 0 5
37063: PPUSH
37064: LD_INT 4
37066: PPUSH
37067: LD_VAR 0 8
37071: PPUSH
37072: CALL_OW 1
37076: ST_TO_ADDR
// end ;
37077: LD_VAR 0 5
37081: RET
// export function DangerAtRange ( unit , range ) ; begin
37082: LD_INT 0
37084: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37085: LD_ADDR_VAR 0 3
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 255
37099: PPUSH
37100: LD_VAR 0 1
37104: PPUSH
37105: CALL_OW 250
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 251
37119: PPUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: CALL 35385 0 4
37129: ST_TO_ADDR
// end ;
37130: LD_VAR 0 3
37134: RET
// export function DangerInArea ( side , area ) ; begin
37135: LD_INT 0
37137: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37138: LD_ADDR_VAR 0 3
37142: PUSH
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_INT 81
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PPUSH
37160: CALL_OW 70
37164: ST_TO_ADDR
// end ;
37165: LD_VAR 0 3
37169: RET
// export function IsExtension ( b ) ; begin
37170: LD_INT 0
37172: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37173: LD_ADDR_VAR 0 2
37177: PUSH
37178: LD_VAR 0 1
37182: PUSH
37183: LD_INT 23
37185: PUSH
37186: LD_INT 20
37188: PUSH
37189: LD_INT 22
37191: PUSH
37192: LD_INT 17
37194: PUSH
37195: LD_INT 24
37197: PUSH
37198: LD_INT 21
37200: PUSH
37201: LD_INT 19
37203: PUSH
37204: LD_INT 16
37206: PUSH
37207: LD_INT 25
37209: PUSH
37210: LD_INT 18
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: IN
37225: ST_TO_ADDR
// end ;
37226: LD_VAR 0 2
37230: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37231: LD_INT 0
37233: PPUSH
37234: PPUSH
37235: PPUSH
// result := [ ] ;
37236: LD_ADDR_VAR 0 3
37240: PUSH
37241: EMPTY
37242: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37243: LD_ADDR_VAR 0 4
37247: PUSH
37248: LD_VAR 0 2
37252: PPUSH
37253: LD_INT 21
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PPUSH
37263: CALL_OW 70
37267: ST_TO_ADDR
// if not tmp then
37268: LD_VAR 0 4
37272: NOT
37273: IFFALSE 37277
// exit ;
37275: GO 37335
// for i in tmp do
37277: LD_ADDR_VAR 0 5
37281: PUSH
37282: LD_VAR 0 4
37286: PUSH
37287: FOR_IN
37288: IFFALSE 37323
// if GetBase ( i ) <> base then
37290: LD_VAR 0 5
37294: PPUSH
37295: CALL_OW 274
37299: PUSH
37300: LD_VAR 0 1
37304: NONEQUAL
37305: IFFALSE 37321
// ComLinkToBase ( base , i ) ;
37307: LD_VAR 0 1
37311: PPUSH
37312: LD_VAR 0 5
37316: PPUSH
37317: CALL_OW 169
37321: GO 37287
37323: POP
37324: POP
// result := tmp ;
37325: LD_ADDR_VAR 0 3
37329: PUSH
37330: LD_VAR 0 4
37334: ST_TO_ADDR
// end ;
37335: LD_VAR 0 3
37339: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
// if BuildingStatus ( b ) = bs_build then
37344: LD_VAR 0 2
37348: PPUSH
37349: CALL_OW 461
37353: PUSH
37354: LD_INT 1
37356: EQUAL
37357: IFFALSE 37417
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37359: LD_VAR 0 1
37363: PPUSH
37364: LD_STRING h
37366: PUSH
37367: LD_VAR 0 2
37371: PPUSH
37372: CALL_OW 250
37376: PUSH
37377: LD_VAR 0 2
37381: PPUSH
37382: CALL_OW 251
37386: PUSH
37387: LD_VAR 0 2
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: PPUSH
37413: CALL_OW 446
// end ;
37417: LD_VAR 0 3
37421: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37422: LD_INT 0
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37430: LD_VAR 0 1
37434: NOT
37435: PUSH
37436: LD_VAR 0 1
37440: PPUSH
37441: CALL_OW 263
37445: PUSH
37446: LD_INT 2
37448: EQUAL
37449: NOT
37450: OR
37451: IFFALSE 37455
// exit ;
37453: GO 37771
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37455: LD_ADDR_VAR 0 6
37459: PUSH
37460: LD_INT 22
37462: PUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: CALL_OW 255
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 30
37482: PUSH
37483: LD_INT 36
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 34
37492: PUSH
37493: LD_INT 31
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PPUSH
37509: CALL_OW 69
37513: ST_TO_ADDR
// if not tmp then
37514: LD_VAR 0 6
37518: NOT
37519: IFFALSE 37523
// exit ;
37521: GO 37771
// result := [ ] ;
37523: LD_ADDR_VAR 0 2
37527: PUSH
37528: EMPTY
37529: ST_TO_ADDR
// for i in tmp do
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_VAR 0 6
37539: PUSH
37540: FOR_IN
37541: IFFALSE 37612
// begin t := UnitsInside ( i ) ;
37543: LD_ADDR_VAR 0 4
37547: PUSH
37548: LD_VAR 0 3
37552: PPUSH
37553: CALL_OW 313
37557: ST_TO_ADDR
// if t then
37558: LD_VAR 0 4
37562: IFFALSE 37610
// for j in t do
37564: LD_ADDR_VAR 0 7
37568: PUSH
37569: LD_VAR 0 4
37573: PUSH
37574: FOR_IN
37575: IFFALSE 37608
// result := Insert ( result , result + 1 , j ) ;
37577: LD_ADDR_VAR 0 2
37581: PUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 2
37591: PUSH
37592: LD_INT 1
37594: PLUS
37595: PPUSH
37596: LD_VAR 0 7
37600: PPUSH
37601: CALL_OW 2
37605: ST_TO_ADDR
37606: GO 37574
37608: POP
37609: POP
// end ;
37610: GO 37540
37612: POP
37613: POP
// if not result then
37614: LD_VAR 0 2
37618: NOT
37619: IFFALSE 37623
// exit ;
37621: GO 37771
// mech := result [ 1 ] ;
37623: LD_ADDR_VAR 0 5
37627: PUSH
37628: LD_VAR 0 2
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: ST_TO_ADDR
// if result > 1 then
37637: LD_VAR 0 2
37641: PUSH
37642: LD_INT 1
37644: GREATER
37645: IFFALSE 37757
// for i = 2 to result do
37647: LD_ADDR_VAR 0 3
37651: PUSH
37652: DOUBLE
37653: LD_INT 2
37655: DEC
37656: ST_TO_ADDR
37657: LD_VAR 0 2
37661: PUSH
37662: FOR_TO
37663: IFFALSE 37755
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37665: LD_ADDR_VAR 0 4
37669: PUSH
37670: LD_VAR 0 2
37674: PUSH
37675: LD_VAR 0 3
37679: ARRAY
37680: PPUSH
37681: LD_INT 3
37683: PPUSH
37684: CALL_OW 259
37688: PUSH
37689: LD_VAR 0 2
37693: PUSH
37694: LD_VAR 0 3
37698: ARRAY
37699: PPUSH
37700: CALL_OW 432
37704: MINUS
37705: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37706: LD_VAR 0 4
37710: PUSH
37711: LD_VAR 0 5
37715: PPUSH
37716: LD_INT 3
37718: PPUSH
37719: CALL_OW 259
37723: PUSH
37724: LD_VAR 0 5
37728: PPUSH
37729: CALL_OW 432
37733: MINUS
37734: GREATEREQUAL
37735: IFFALSE 37753
// mech := result [ i ] ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 2
37746: PUSH
37747: LD_VAR 0 3
37751: ARRAY
37752: ST_TO_ADDR
// end ;
37753: GO 37662
37755: POP
37756: POP
// ComLinkTo ( vehicle , mech ) ;
37757: LD_VAR 0 1
37761: PPUSH
37762: LD_VAR 0 5
37766: PPUSH
37767: CALL_OW 135
// end ;
37771: LD_VAR 0 2
37775: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37776: LD_INT 0
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
37785: PPUSH
37786: PPUSH
37787: PPUSH
37788: PPUSH
37789: PPUSH
37790: PPUSH
// result := [ ] ;
37791: LD_ADDR_VAR 0 7
37795: PUSH
37796: EMPTY
37797: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 266
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: IN
37818: NOT
37819: IFFALSE 37823
// exit ;
37821: GO 39454
// if name then
37823: LD_VAR 0 3
37827: IFFALSE 37843
// SetBName ( base_dep , name ) ;
37829: LD_VAR 0 1
37833: PPUSH
37834: LD_VAR 0 3
37838: PPUSH
37839: CALL_OW 500
// base := GetBase ( base_dep ) ;
37843: LD_ADDR_VAR 0 15
37847: PUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 274
37857: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37858: LD_ADDR_VAR 0 16
37862: PUSH
37863: LD_VAR 0 1
37867: PPUSH
37868: CALL_OW 255
37872: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37873: LD_ADDR_VAR 0 17
37877: PUSH
37878: LD_VAR 0 1
37882: PPUSH
37883: CALL_OW 248
37887: ST_TO_ADDR
// if sources then
37888: LD_VAR 0 5
37892: IFFALSE 37939
// for i = 1 to 3 do
37894: LD_ADDR_VAR 0 8
37898: PUSH
37899: DOUBLE
37900: LD_INT 1
37902: DEC
37903: ST_TO_ADDR
37904: LD_INT 3
37906: PUSH
37907: FOR_TO
37908: IFFALSE 37937
// AddResourceType ( base , i , sources [ i ] ) ;
37910: LD_VAR 0 15
37914: PPUSH
37915: LD_VAR 0 8
37919: PPUSH
37920: LD_VAR 0 5
37924: PUSH
37925: LD_VAR 0 8
37929: ARRAY
37930: PPUSH
37931: CALL_OW 276
37935: GO 37907
37937: POP
37938: POP
// buildings := GetBaseBuildings ( base , area ) ;
37939: LD_ADDR_VAR 0 18
37943: PUSH
37944: LD_VAR 0 15
37948: PPUSH
37949: LD_VAR 0 2
37953: PPUSH
37954: CALL 37231 0 2
37958: ST_TO_ADDR
// InitHc ;
37959: CALL_OW 19
// InitUc ;
37963: CALL_OW 18
// uc_side := side ;
37967: LD_ADDR_OWVAR 20
37971: PUSH
37972: LD_VAR 0 16
37976: ST_TO_ADDR
// uc_nation := nation ;
37977: LD_ADDR_OWVAR 21
37981: PUSH
37982: LD_VAR 0 17
37986: ST_TO_ADDR
// if buildings then
37987: LD_VAR 0 18
37991: IFFALSE 39313
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37993: LD_ADDR_VAR 0 19
37997: PUSH
37998: LD_VAR 0 18
38002: PPUSH
38003: LD_INT 2
38005: PUSH
38006: LD_INT 30
38008: PUSH
38009: LD_INT 29
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 30
38018: PUSH
38019: LD_INT 30
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: LIST
38030: PPUSH
38031: CALL_OW 72
38035: ST_TO_ADDR
// if tmp then
38036: LD_VAR 0 19
38040: IFFALSE 38088
// for i in tmp do
38042: LD_ADDR_VAR 0 8
38046: PUSH
38047: LD_VAR 0 19
38051: PUSH
38052: FOR_IN
38053: IFFALSE 38086
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38055: LD_VAR 0 8
38059: PPUSH
38060: CALL_OW 250
38064: PPUSH
38065: LD_VAR 0 8
38069: PPUSH
38070: CALL_OW 251
38074: PPUSH
38075: LD_VAR 0 16
38079: PPUSH
38080: CALL_OW 441
38084: GO 38052
38086: POP
38087: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38088: LD_VAR 0 18
38092: PPUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 30
38098: PUSH
38099: LD_INT 32
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 30
38108: PUSH
38109: LD_INT 33
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: PPUSH
38121: CALL_OW 72
38125: IFFALSE 38213
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38127: LD_ADDR_VAR 0 8
38131: PUSH
38132: LD_VAR 0 18
38136: PPUSH
38137: LD_INT 2
38139: PUSH
38140: LD_INT 30
38142: PUSH
38143: LD_INT 32
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 30
38152: PUSH
38153: LD_INT 33
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: PPUSH
38165: CALL_OW 72
38169: PUSH
38170: FOR_IN
38171: IFFALSE 38211
// begin if not GetBWeapon ( i ) then
38173: LD_VAR 0 8
38177: PPUSH
38178: CALL_OW 269
38182: NOT
38183: IFFALSE 38209
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38185: LD_VAR 0 8
38189: PPUSH
38190: LD_VAR 0 8
38194: PPUSH
38195: LD_VAR 0 2
38199: PPUSH
38200: CALL 39459 0 2
38204: PPUSH
38205: CALL_OW 431
// end ;
38209: GO 38170
38211: POP
38212: POP
// end ; for i = 1 to personel do
38213: LD_ADDR_VAR 0 8
38217: PUSH
38218: DOUBLE
38219: LD_INT 1
38221: DEC
38222: ST_TO_ADDR
38223: LD_VAR 0 6
38227: PUSH
38228: FOR_TO
38229: IFFALSE 39293
// begin if i > 4 then
38231: LD_VAR 0 8
38235: PUSH
38236: LD_INT 4
38238: GREATER
38239: IFFALSE 38243
// break ;
38241: GO 39293
// case i of 1 :
38243: LD_VAR 0 8
38247: PUSH
38248: LD_INT 1
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38336
38256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38257: LD_ADDR_VAR 0 12
38261: PUSH
38262: LD_VAR 0 18
38266: PPUSH
38267: LD_INT 22
38269: PUSH
38270: LD_VAR 0 16
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 58
38281: PUSH
38282: EMPTY
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: LD_INT 30
38290: PUSH
38291: LD_INT 32
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 4
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 30
38310: PUSH
38311: LD_INT 5
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: LIST
38328: PPUSH
38329: CALL_OW 72
38333: ST_TO_ADDR
38334: GO 38558
38336: LD_INT 2
38338: DOUBLE
38339: EQUAL
38340: IFTRUE 38344
38342: GO 38406
38344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38345: LD_ADDR_VAR 0 12
38349: PUSH
38350: LD_VAR 0 18
38354: PPUSH
38355: LD_INT 22
38357: PUSH
38358: LD_VAR 0 16
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 30
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: LIST
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PPUSH
38399: CALL_OW 72
38403: ST_TO_ADDR
38404: GO 38558
38406: LD_INT 3
38408: DOUBLE
38409: EQUAL
38410: IFTRUE 38414
38412: GO 38476
38414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38415: LD_ADDR_VAR 0 12
38419: PUSH
38420: LD_VAR 0 18
38424: PPUSH
38425: LD_INT 22
38427: PUSH
38428: LD_VAR 0 16
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: PUSH
38440: LD_INT 30
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 30
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PPUSH
38469: CALL_OW 72
38473: ST_TO_ADDR
38474: GO 38558
38476: LD_INT 4
38478: DOUBLE
38479: EQUAL
38480: IFTRUE 38484
38482: GO 38557
38484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38485: LD_ADDR_VAR 0 12
38489: PUSH
38490: LD_VAR 0 18
38494: PPUSH
38495: LD_INT 22
38497: PUSH
38498: LD_VAR 0 16
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 30
38512: PUSH
38513: LD_INT 6
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 30
38522: PUSH
38523: LD_INT 7
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 30
38532: PUSH
38533: LD_INT 8
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PPUSH
38550: CALL_OW 72
38554: ST_TO_ADDR
38555: GO 38558
38557: POP
// if i = 1 then
38558: LD_VAR 0 8
38562: PUSH
38563: LD_INT 1
38565: EQUAL
38566: IFFALSE 38677
// begin tmp := [ ] ;
38568: LD_ADDR_VAR 0 19
38572: PUSH
38573: EMPTY
38574: ST_TO_ADDR
// for j in f do
38575: LD_ADDR_VAR 0 9
38579: PUSH
38580: LD_VAR 0 12
38584: PUSH
38585: FOR_IN
38586: IFFALSE 38659
// if GetBType ( j ) = b_bunker then
38588: LD_VAR 0 9
38592: PPUSH
38593: CALL_OW 266
38597: PUSH
38598: LD_INT 32
38600: EQUAL
38601: IFFALSE 38628
// tmp := Insert ( tmp , 1 , j ) else
38603: LD_ADDR_VAR 0 19
38607: PUSH
38608: LD_VAR 0 19
38612: PPUSH
38613: LD_INT 1
38615: PPUSH
38616: LD_VAR 0 9
38620: PPUSH
38621: CALL_OW 2
38625: ST_TO_ADDR
38626: GO 38657
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38628: LD_ADDR_VAR 0 19
38632: PUSH
38633: LD_VAR 0 19
38637: PPUSH
38638: LD_VAR 0 19
38642: PUSH
38643: LD_INT 1
38645: PLUS
38646: PPUSH
38647: LD_VAR 0 9
38651: PPUSH
38652: CALL_OW 2
38656: ST_TO_ADDR
38657: GO 38585
38659: POP
38660: POP
// if tmp then
38661: LD_VAR 0 19
38665: IFFALSE 38677
// f := tmp ;
38667: LD_ADDR_VAR 0 12
38671: PUSH
38672: LD_VAR 0 19
38676: ST_TO_ADDR
// end ; x := personel [ i ] ;
38677: LD_ADDR_VAR 0 13
38681: PUSH
38682: LD_VAR 0 6
38686: PUSH
38687: LD_VAR 0 8
38691: ARRAY
38692: ST_TO_ADDR
// if x = - 1 then
38693: LD_VAR 0 13
38697: PUSH
38698: LD_INT 1
38700: NEG
38701: EQUAL
38702: IFFALSE 38911
// begin for j in f do
38704: LD_ADDR_VAR 0 9
38708: PUSH
38709: LD_VAR 0 12
38713: PUSH
38714: FOR_IN
38715: IFFALSE 38907
// repeat InitHc ;
38717: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38721: LD_VAR 0 9
38725: PPUSH
38726: CALL_OW 266
38730: PUSH
38731: LD_INT 5
38733: EQUAL
38734: IFFALSE 38804
// begin if UnitsInside ( j ) < 3 then
38736: LD_VAR 0 9
38740: PPUSH
38741: CALL_OW 313
38745: PUSH
38746: LD_INT 3
38748: LESS
38749: IFFALSE 38785
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38751: LD_INT 0
38753: PPUSH
38754: LD_INT 5
38756: PUSH
38757: LD_INT 8
38759: PUSH
38760: LD_INT 9
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: LIST
38767: PUSH
38768: LD_VAR 0 17
38772: ARRAY
38773: PPUSH
38774: LD_VAR 0 4
38778: PPUSH
38779: CALL_OW 380
38783: GO 38802
// PrepareHuman ( false , i , skill ) ;
38785: LD_INT 0
38787: PPUSH
38788: LD_VAR 0 8
38792: PPUSH
38793: LD_VAR 0 4
38797: PPUSH
38798: CALL_OW 380
// end else
38802: GO 38821
// PrepareHuman ( false , i , skill ) ;
38804: LD_INT 0
38806: PPUSH
38807: LD_VAR 0 8
38811: PPUSH
38812: LD_VAR 0 4
38816: PPUSH
38817: CALL_OW 380
// un := CreateHuman ;
38821: LD_ADDR_VAR 0 14
38825: PUSH
38826: CALL_OW 44
38830: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38831: LD_ADDR_VAR 0 7
38835: PUSH
38836: LD_VAR 0 7
38840: PPUSH
38841: LD_INT 1
38843: PPUSH
38844: LD_VAR 0 14
38848: PPUSH
38849: CALL_OW 2
38853: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38854: LD_VAR 0 14
38858: PPUSH
38859: LD_VAR 0 9
38863: PPUSH
38864: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38868: LD_VAR 0 9
38872: PPUSH
38873: CALL_OW 313
38877: PUSH
38878: LD_INT 6
38880: EQUAL
38881: PUSH
38882: LD_VAR 0 9
38886: PPUSH
38887: CALL_OW 266
38891: PUSH
38892: LD_INT 32
38894: PUSH
38895: LD_INT 31
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: IN
38902: OR
38903: IFFALSE 38717
38905: GO 38714
38907: POP
38908: POP
// end else
38909: GO 39291
// for j = 1 to x do
38911: LD_ADDR_VAR 0 9
38915: PUSH
38916: DOUBLE
38917: LD_INT 1
38919: DEC
38920: ST_TO_ADDR
38921: LD_VAR 0 13
38925: PUSH
38926: FOR_TO
38927: IFFALSE 39289
// begin InitHc ;
38929: CALL_OW 19
// if not f then
38933: LD_VAR 0 12
38937: NOT
38938: IFFALSE 39027
// begin PrepareHuman ( false , i , skill ) ;
38940: LD_INT 0
38942: PPUSH
38943: LD_VAR 0 8
38947: PPUSH
38948: LD_VAR 0 4
38952: PPUSH
38953: CALL_OW 380
// un := CreateHuman ;
38957: LD_ADDR_VAR 0 14
38961: PUSH
38962: CALL_OW 44
38966: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38967: LD_ADDR_VAR 0 7
38971: PUSH
38972: LD_VAR 0 7
38976: PPUSH
38977: LD_INT 1
38979: PPUSH
38980: LD_VAR 0 14
38984: PPUSH
38985: CALL_OW 2
38989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38990: LD_VAR 0 14
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 250
39004: PPUSH
39005: LD_VAR 0 1
39009: PPUSH
39010: CALL_OW 251
39014: PPUSH
39015: LD_INT 10
39017: PPUSH
39018: LD_INT 0
39020: PPUSH
39021: CALL_OW 50
// continue ;
39025: GO 38926
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39027: LD_VAR 0 12
39031: PUSH
39032: LD_INT 1
39034: ARRAY
39035: PPUSH
39036: CALL_OW 313
39040: PUSH
39041: LD_VAR 0 12
39045: PUSH
39046: LD_INT 1
39048: ARRAY
39049: PPUSH
39050: CALL_OW 266
39054: PUSH
39055: LD_INT 32
39057: PUSH
39058: LD_INT 31
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: IN
39065: AND
39066: PUSH
39067: LD_VAR 0 12
39071: PUSH
39072: LD_INT 1
39074: ARRAY
39075: PPUSH
39076: CALL_OW 313
39080: PUSH
39081: LD_INT 6
39083: EQUAL
39084: OR
39085: IFFALSE 39105
// f := Delete ( f , 1 ) ;
39087: LD_ADDR_VAR 0 12
39091: PUSH
39092: LD_VAR 0 12
39096: PPUSH
39097: LD_INT 1
39099: PPUSH
39100: CALL_OW 3
39104: ST_TO_ADDR
// if not f then
39105: LD_VAR 0 12
39109: NOT
39110: IFFALSE 39128
// begin x := x + 2 ;
39112: LD_ADDR_VAR 0 13
39116: PUSH
39117: LD_VAR 0 13
39121: PUSH
39122: LD_INT 2
39124: PLUS
39125: ST_TO_ADDR
// continue ;
39126: GO 38926
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39128: LD_VAR 0 12
39132: PUSH
39133: LD_INT 1
39135: ARRAY
39136: PPUSH
39137: CALL_OW 266
39141: PUSH
39142: LD_INT 5
39144: EQUAL
39145: IFFALSE 39219
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39147: LD_VAR 0 12
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PPUSH
39156: CALL_OW 313
39160: PUSH
39161: LD_INT 3
39163: LESS
39164: IFFALSE 39200
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39166: LD_INT 0
39168: PPUSH
39169: LD_INT 5
39171: PUSH
39172: LD_INT 8
39174: PUSH
39175: LD_INT 9
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: PUSH
39183: LD_VAR 0 17
39187: ARRAY
39188: PPUSH
39189: LD_VAR 0 4
39193: PPUSH
39194: CALL_OW 380
39198: GO 39217
// PrepareHuman ( false , i , skill ) ;
39200: LD_INT 0
39202: PPUSH
39203: LD_VAR 0 8
39207: PPUSH
39208: LD_VAR 0 4
39212: PPUSH
39213: CALL_OW 380
// end else
39217: GO 39236
// PrepareHuman ( false , i , skill ) ;
39219: LD_INT 0
39221: PPUSH
39222: LD_VAR 0 8
39226: PPUSH
39227: LD_VAR 0 4
39231: PPUSH
39232: CALL_OW 380
// un := CreateHuman ;
39236: LD_ADDR_VAR 0 14
39240: PUSH
39241: CALL_OW 44
39245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39246: LD_ADDR_VAR 0 7
39250: PUSH
39251: LD_VAR 0 7
39255: PPUSH
39256: LD_INT 1
39258: PPUSH
39259: LD_VAR 0 14
39263: PPUSH
39264: CALL_OW 2
39268: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39269: LD_VAR 0 14
39273: PPUSH
39274: LD_VAR 0 12
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: CALL_OW 52
// end ;
39287: GO 38926
39289: POP
39290: POP
// end ;
39291: GO 38228
39293: POP
39294: POP
// result := result ^ buildings ;
39295: LD_ADDR_VAR 0 7
39299: PUSH
39300: LD_VAR 0 7
39304: PUSH
39305: LD_VAR 0 18
39309: ADD
39310: ST_TO_ADDR
// end else
39311: GO 39454
// begin for i = 1 to personel do
39313: LD_ADDR_VAR 0 8
39317: PUSH
39318: DOUBLE
39319: LD_INT 1
39321: DEC
39322: ST_TO_ADDR
39323: LD_VAR 0 6
39327: PUSH
39328: FOR_TO
39329: IFFALSE 39452
// begin if i > 4 then
39331: LD_VAR 0 8
39335: PUSH
39336: LD_INT 4
39338: GREATER
39339: IFFALSE 39343
// break ;
39341: GO 39452
// x := personel [ i ] ;
39343: LD_ADDR_VAR 0 13
39347: PUSH
39348: LD_VAR 0 6
39352: PUSH
39353: LD_VAR 0 8
39357: ARRAY
39358: ST_TO_ADDR
// if x = - 1 then
39359: LD_VAR 0 13
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: EQUAL
39368: IFFALSE 39372
// continue ;
39370: GO 39328
// PrepareHuman ( false , i , skill ) ;
39372: LD_INT 0
39374: PPUSH
39375: LD_VAR 0 8
39379: PPUSH
39380: LD_VAR 0 4
39384: PPUSH
39385: CALL_OW 380
// un := CreateHuman ;
39389: LD_ADDR_VAR 0 14
39393: PUSH
39394: CALL_OW 44
39398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39399: LD_VAR 0 14
39403: PPUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 250
39413: PPUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 251
39423: PPUSH
39424: LD_INT 10
39426: PPUSH
39427: LD_INT 0
39429: PPUSH
39430: CALL_OW 50
// result := result ^ un ;
39434: LD_ADDR_VAR 0 7
39438: PUSH
39439: LD_VAR 0 7
39443: PUSH
39444: LD_VAR 0 14
39448: ADD
39449: ST_TO_ADDR
// end ;
39450: GO 39328
39452: POP
39453: POP
// end ; end ;
39454: LD_VAR 0 7
39458: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39459: LD_INT 0
39461: PPUSH
39462: PPUSH
39463: PPUSH
39464: PPUSH
39465: PPUSH
39466: PPUSH
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
// result := false ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_INT 0
39484: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39485: LD_VAR 0 1
39489: NOT
39490: PUSH
39491: LD_VAR 0 1
39495: PPUSH
39496: CALL_OW 266
39500: PUSH
39501: LD_INT 32
39503: PUSH
39504: LD_INT 33
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: IN
39511: NOT
39512: OR
39513: IFFALSE 39517
// exit ;
39515: GO 40653
// nat := GetNation ( tower ) ;
39517: LD_ADDR_VAR 0 12
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 248
39531: ST_TO_ADDR
// side := GetSide ( tower ) ;
39532: LD_ADDR_VAR 0 16
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 255
39546: ST_TO_ADDR
// x := GetX ( tower ) ;
39547: LD_ADDR_VAR 0 10
39551: PUSH
39552: LD_VAR 0 1
39556: PPUSH
39557: CALL_OW 250
39561: ST_TO_ADDR
// y := GetY ( tower ) ;
39562: LD_ADDR_VAR 0 11
39566: PUSH
39567: LD_VAR 0 1
39571: PPUSH
39572: CALL_OW 251
39576: ST_TO_ADDR
// if not x or not y then
39577: LD_VAR 0 10
39581: NOT
39582: PUSH
39583: LD_VAR 0 11
39587: NOT
39588: OR
39589: IFFALSE 39593
// exit ;
39591: GO 40653
// weapon := 0 ;
39593: LD_ADDR_VAR 0 18
39597: PUSH
39598: LD_INT 0
39600: ST_TO_ADDR
// fac_list := [ ] ;
39601: LD_ADDR_VAR 0 17
39605: PUSH
39606: EMPTY
39607: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39608: LD_ADDR_VAR 0 6
39612: PUSH
39613: LD_VAR 0 1
39617: PPUSH
39618: CALL_OW 274
39622: PPUSH
39623: LD_VAR 0 2
39627: PPUSH
39628: CALL 37231 0 2
39632: PPUSH
39633: LD_INT 30
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PPUSH
39643: CALL_OW 72
39647: ST_TO_ADDR
// if not factories then
39648: LD_VAR 0 6
39652: NOT
39653: IFFALSE 39657
// exit ;
39655: GO 40653
// for i in factories do
39657: LD_ADDR_VAR 0 8
39661: PUSH
39662: LD_VAR 0 6
39666: PUSH
39667: FOR_IN
39668: IFFALSE 39693
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39670: LD_ADDR_VAR 0 17
39674: PUSH
39675: LD_VAR 0 17
39679: PUSH
39680: LD_VAR 0 8
39684: PPUSH
39685: CALL_OW 478
39689: UNION
39690: ST_TO_ADDR
39691: GO 39667
39693: POP
39694: POP
// if not fac_list then
39695: LD_VAR 0 17
39699: NOT
39700: IFFALSE 39704
// exit ;
39702: GO 40653
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: LD_INT 4
39711: PUSH
39712: LD_INT 5
39714: PUSH
39715: LD_INT 9
39717: PUSH
39718: LD_INT 10
39720: PUSH
39721: LD_INT 6
39723: PUSH
39724: LD_INT 7
39726: PUSH
39727: LD_INT 11
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 27
39741: PUSH
39742: LD_INT 28
39744: PUSH
39745: LD_INT 26
39747: PUSH
39748: LD_INT 30
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 43
39759: PUSH
39760: LD_INT 44
39762: PUSH
39763: LD_INT 46
39765: PUSH
39766: LD_INT 45
39768: PUSH
39769: LD_INT 47
39771: PUSH
39772: LD_INT 49
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: LIST
39787: PUSH
39788: LD_VAR 0 12
39792: ARRAY
39793: ST_TO_ADDR
// for i in list do
39794: LD_ADDR_VAR 0 8
39798: PUSH
39799: LD_VAR 0 5
39803: PUSH
39804: FOR_IN
39805: IFFALSE 39838
// if not i in fac_list then
39807: LD_VAR 0 8
39811: PUSH
39812: LD_VAR 0 17
39816: IN
39817: NOT
39818: IFFALSE 39836
// list := list diff i ;
39820: LD_ADDR_VAR 0 5
39824: PUSH
39825: LD_VAR 0 5
39829: PUSH
39830: LD_VAR 0 8
39834: DIFF
39835: ST_TO_ADDR
39836: GO 39804
39838: POP
39839: POP
// if not list then
39840: LD_VAR 0 5
39844: NOT
39845: IFFALSE 39849
// exit ;
39847: GO 40653
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39849: LD_VAR 0 12
39853: PUSH
39854: LD_INT 3
39856: EQUAL
39857: PUSH
39858: LD_INT 49
39860: PUSH
39861: LD_VAR 0 5
39865: IN
39866: AND
39867: PUSH
39868: LD_INT 31
39870: PPUSH
39871: LD_VAR 0 16
39875: PPUSH
39876: CALL_OW 321
39880: PUSH
39881: LD_INT 2
39883: EQUAL
39884: AND
39885: IFFALSE 39945
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39887: LD_INT 22
39889: PUSH
39890: LD_VAR 0 16
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 35
39901: PUSH
39902: LD_INT 49
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 91
39911: PUSH
39912: LD_VAR 0 1
39916: PUSH
39917: LD_INT 10
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: LIST
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: PPUSH
39930: CALL_OW 69
39934: NOT
39935: IFFALSE 39945
// weapon := ru_time_lapser ;
39937: LD_ADDR_VAR 0 18
39941: PUSH
39942: LD_INT 49
39944: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39945: LD_VAR 0 12
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: IN
39960: PUSH
39961: LD_INT 11
39963: PUSH
39964: LD_VAR 0 5
39968: IN
39969: PUSH
39970: LD_INT 30
39972: PUSH
39973: LD_VAR 0 5
39977: IN
39978: OR
39979: AND
39980: PUSH
39981: LD_INT 6
39983: PPUSH
39984: LD_VAR 0 16
39988: PPUSH
39989: CALL_OW 321
39993: PUSH
39994: LD_INT 2
39996: EQUAL
39997: AND
39998: IFFALSE 40163
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40000: LD_INT 22
40002: PUSH
40003: LD_VAR 0 16
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 35
40017: PUSH
40018: LD_INT 11
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 35
40027: PUSH
40028: LD_INT 30
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 91
40042: PUSH
40043: LD_VAR 0 1
40047: PUSH
40048: LD_INT 18
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: LIST
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: LIST
40060: PPUSH
40061: CALL_OW 69
40065: NOT
40066: PUSH
40067: LD_INT 22
40069: PUSH
40070: LD_VAR 0 16
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 30
40084: PUSH
40085: LD_INT 32
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 30
40094: PUSH
40095: LD_INT 33
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 91
40109: PUSH
40110: LD_VAR 0 1
40114: PUSH
40115: LD_INT 12
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: PUSH
40128: EMPTY
40129: LIST
40130: PPUSH
40131: CALL_OW 69
40135: PUSH
40136: LD_INT 2
40138: GREATER
40139: AND
40140: IFFALSE 40163
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40142: LD_ADDR_VAR 0 18
40146: PUSH
40147: LD_INT 11
40149: PUSH
40150: LD_INT 30
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_VAR 0 12
40161: ARRAY
40162: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40163: LD_VAR 0 18
40167: NOT
40168: PUSH
40169: LD_INT 40
40171: PPUSH
40172: LD_VAR 0 16
40176: PPUSH
40177: CALL_OW 321
40181: PUSH
40182: LD_INT 2
40184: EQUAL
40185: AND
40186: PUSH
40187: LD_INT 7
40189: PUSH
40190: LD_VAR 0 5
40194: IN
40195: PUSH
40196: LD_INT 28
40198: PUSH
40199: LD_VAR 0 5
40203: IN
40204: OR
40205: PUSH
40206: LD_INT 45
40208: PUSH
40209: LD_VAR 0 5
40213: IN
40214: OR
40215: AND
40216: IFFALSE 40470
// begin hex := GetHexInfo ( x , y ) ;
40218: LD_ADDR_VAR 0 4
40222: PUSH
40223: LD_VAR 0 10
40227: PPUSH
40228: LD_VAR 0 11
40232: PPUSH
40233: CALL_OW 546
40237: ST_TO_ADDR
// if hex [ 1 ] then
40238: LD_VAR 0 4
40242: PUSH
40243: LD_INT 1
40245: ARRAY
40246: IFFALSE 40250
// exit ;
40248: GO 40653
// height := hex [ 2 ] ;
40250: LD_ADDR_VAR 0 15
40254: PUSH
40255: LD_VAR 0 4
40259: PUSH
40260: LD_INT 2
40262: ARRAY
40263: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40264: LD_ADDR_VAR 0 14
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: LD_INT 5
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: ST_TO_ADDR
// for i in tmp do
40287: LD_ADDR_VAR 0 8
40291: PUSH
40292: LD_VAR 0 14
40296: PUSH
40297: FOR_IN
40298: IFFALSE 40468
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40300: LD_ADDR_VAR 0 9
40304: PUSH
40305: LD_VAR 0 10
40309: PPUSH
40310: LD_VAR 0 8
40314: PPUSH
40315: LD_INT 5
40317: PPUSH
40318: CALL_OW 272
40322: PUSH
40323: LD_VAR 0 11
40327: PPUSH
40328: LD_VAR 0 8
40332: PPUSH
40333: LD_INT 5
40335: PPUSH
40336: CALL_OW 273
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40345: LD_VAR 0 9
40349: PUSH
40350: LD_INT 1
40352: ARRAY
40353: PPUSH
40354: LD_VAR 0 9
40358: PUSH
40359: LD_INT 2
40361: ARRAY
40362: PPUSH
40363: CALL_OW 488
40367: IFFALSE 40466
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40369: LD_ADDR_VAR 0 4
40373: PUSH
40374: LD_VAR 0 9
40378: PUSH
40379: LD_INT 1
40381: ARRAY
40382: PPUSH
40383: LD_VAR 0 9
40387: PUSH
40388: LD_INT 2
40390: ARRAY
40391: PPUSH
40392: CALL_OW 546
40396: ST_TO_ADDR
// if hex [ 1 ] then
40397: LD_VAR 0 4
40401: PUSH
40402: LD_INT 1
40404: ARRAY
40405: IFFALSE 40409
// continue ;
40407: GO 40297
// h := hex [ 2 ] ;
40409: LD_ADDR_VAR 0 13
40413: PUSH
40414: LD_VAR 0 4
40418: PUSH
40419: LD_INT 2
40421: ARRAY
40422: ST_TO_ADDR
// if h + 7 < height then
40423: LD_VAR 0 13
40427: PUSH
40428: LD_INT 7
40430: PLUS
40431: PUSH
40432: LD_VAR 0 15
40436: LESS
40437: IFFALSE 40466
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40439: LD_ADDR_VAR 0 18
40443: PUSH
40444: LD_INT 7
40446: PUSH
40447: LD_INT 28
40449: PUSH
40450: LD_INT 45
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: LIST
40457: PUSH
40458: LD_VAR 0 12
40462: ARRAY
40463: ST_TO_ADDR
// break ;
40464: GO 40468
// end ; end ; end ;
40466: GO 40297
40468: POP
40469: POP
// end ; if not weapon then
40470: LD_VAR 0 18
40474: NOT
40475: IFFALSE 40535
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40477: LD_ADDR_VAR 0 5
40481: PUSH
40482: LD_VAR 0 5
40486: PUSH
40487: LD_INT 11
40489: PUSH
40490: LD_INT 30
40492: PUSH
40493: LD_INT 49
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: LIST
40500: DIFF
40501: ST_TO_ADDR
// if not list then
40502: LD_VAR 0 5
40506: NOT
40507: IFFALSE 40511
// exit ;
40509: GO 40653
// weapon := list [ rand ( 1 , list ) ] ;
40511: LD_ADDR_VAR 0 18
40515: PUSH
40516: LD_VAR 0 5
40520: PUSH
40521: LD_INT 1
40523: PPUSH
40524: LD_VAR 0 5
40528: PPUSH
40529: CALL_OW 12
40533: ARRAY
40534: ST_TO_ADDR
// end ; if weapon then
40535: LD_VAR 0 18
40539: IFFALSE 40653
// begin tmp := CostOfWeapon ( weapon ) ;
40541: LD_ADDR_VAR 0 14
40545: PUSH
40546: LD_VAR 0 18
40550: PPUSH
40551: CALL_OW 451
40555: ST_TO_ADDR
// j := GetBase ( tower ) ;
40556: LD_ADDR_VAR 0 9
40560: PUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 274
40570: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40571: LD_VAR 0 9
40575: PPUSH
40576: LD_INT 1
40578: PPUSH
40579: CALL_OW 275
40583: PUSH
40584: LD_VAR 0 14
40588: PUSH
40589: LD_INT 1
40591: ARRAY
40592: GREATEREQUAL
40593: PUSH
40594: LD_VAR 0 9
40598: PPUSH
40599: LD_INT 2
40601: PPUSH
40602: CALL_OW 275
40606: PUSH
40607: LD_VAR 0 14
40611: PUSH
40612: LD_INT 2
40614: ARRAY
40615: GREATEREQUAL
40616: AND
40617: PUSH
40618: LD_VAR 0 9
40622: PPUSH
40623: LD_INT 3
40625: PPUSH
40626: CALL_OW 275
40630: PUSH
40631: LD_VAR 0 14
40635: PUSH
40636: LD_INT 3
40638: ARRAY
40639: GREATEREQUAL
40640: AND
40641: IFFALSE 40653
// result := weapon ;
40643: LD_ADDR_VAR 0 3
40647: PUSH
40648: LD_VAR 0 18
40652: ST_TO_ADDR
// end ; end ;
40653: LD_VAR 0 3
40657: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40658: LD_INT 0
40660: PPUSH
40661: PPUSH
// result := true ;
40662: LD_ADDR_VAR 0 3
40666: PUSH
40667: LD_INT 1
40669: ST_TO_ADDR
// if array1 = array2 then
40670: LD_VAR 0 1
40674: PUSH
40675: LD_VAR 0 2
40679: EQUAL
40680: IFFALSE 40740
// begin for i = 1 to array1 do
40682: LD_ADDR_VAR 0 4
40686: PUSH
40687: DOUBLE
40688: LD_INT 1
40690: DEC
40691: ST_TO_ADDR
40692: LD_VAR 0 1
40696: PUSH
40697: FOR_TO
40698: IFFALSE 40736
// if array1 [ i ] <> array2 [ i ] then
40700: LD_VAR 0 1
40704: PUSH
40705: LD_VAR 0 4
40709: ARRAY
40710: PUSH
40711: LD_VAR 0 2
40715: PUSH
40716: LD_VAR 0 4
40720: ARRAY
40721: NONEQUAL
40722: IFFALSE 40734
// begin result := false ;
40724: LD_ADDR_VAR 0 3
40728: PUSH
40729: LD_INT 0
40731: ST_TO_ADDR
// break ;
40732: GO 40736
// end ;
40734: GO 40697
40736: POP
40737: POP
// end else
40738: GO 40748
// result := false ;
40740: LD_ADDR_VAR 0 3
40744: PUSH
40745: LD_INT 0
40747: ST_TO_ADDR
// end ;
40748: LD_VAR 0 3
40752: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40753: LD_INT 0
40755: PPUSH
40756: PPUSH
40757: PPUSH
// pom := GetBase ( fac ) ;
40758: LD_ADDR_VAR 0 5
40762: PUSH
40763: LD_VAR 0 1
40767: PPUSH
40768: CALL_OW 274
40772: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40773: LD_ADDR_VAR 0 4
40777: PUSH
40778: LD_VAR 0 2
40782: PUSH
40783: LD_INT 1
40785: ARRAY
40786: PPUSH
40787: LD_VAR 0 2
40791: PUSH
40792: LD_INT 2
40794: ARRAY
40795: PPUSH
40796: LD_VAR 0 2
40800: PUSH
40801: LD_INT 3
40803: ARRAY
40804: PPUSH
40805: LD_VAR 0 2
40809: PUSH
40810: LD_INT 4
40812: ARRAY
40813: PPUSH
40814: CALL_OW 449
40818: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40819: LD_ADDR_VAR 0 3
40823: PUSH
40824: LD_VAR 0 5
40828: PPUSH
40829: LD_INT 1
40831: PPUSH
40832: CALL_OW 275
40836: PUSH
40837: LD_VAR 0 4
40841: PUSH
40842: LD_INT 1
40844: ARRAY
40845: GREATEREQUAL
40846: PUSH
40847: LD_VAR 0 5
40851: PPUSH
40852: LD_INT 2
40854: PPUSH
40855: CALL_OW 275
40859: PUSH
40860: LD_VAR 0 4
40864: PUSH
40865: LD_INT 2
40867: ARRAY
40868: GREATEREQUAL
40869: AND
40870: PUSH
40871: LD_VAR 0 5
40875: PPUSH
40876: LD_INT 3
40878: PPUSH
40879: CALL_OW 275
40883: PUSH
40884: LD_VAR 0 4
40888: PUSH
40889: LD_INT 3
40891: ARRAY
40892: GREATEREQUAL
40893: AND
40894: ST_TO_ADDR
// end ;
40895: LD_VAR 0 3
40899: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40900: LD_INT 0
40902: PPUSH
40903: PPUSH
40904: PPUSH
40905: PPUSH
// pom := GetBase ( building ) ;
40906: LD_ADDR_VAR 0 3
40910: PUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: CALL_OW 274
40920: ST_TO_ADDR
// if not pom then
40921: LD_VAR 0 3
40925: NOT
40926: IFFALSE 40930
// exit ;
40928: GO 41100
// btype := GetBType ( building ) ;
40930: LD_ADDR_VAR 0 5
40934: PUSH
40935: LD_VAR 0 1
40939: PPUSH
40940: CALL_OW 266
40944: ST_TO_ADDR
// if btype = b_armoury then
40945: LD_VAR 0 5
40949: PUSH
40950: LD_INT 4
40952: EQUAL
40953: IFFALSE 40963
// btype := b_barracks ;
40955: LD_ADDR_VAR 0 5
40959: PUSH
40960: LD_INT 5
40962: ST_TO_ADDR
// if btype = b_depot then
40963: LD_VAR 0 5
40967: PUSH
40968: LD_INT 0
40970: EQUAL
40971: IFFALSE 40981
// btype := b_warehouse ;
40973: LD_ADDR_VAR 0 5
40977: PUSH
40978: LD_INT 1
40980: ST_TO_ADDR
// if btype = b_workshop then
40981: LD_VAR 0 5
40985: PUSH
40986: LD_INT 2
40988: EQUAL
40989: IFFALSE 40999
// btype := b_factory ;
40991: LD_ADDR_VAR 0 5
40995: PUSH
40996: LD_INT 3
40998: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40999: LD_ADDR_VAR 0 4
41003: PUSH
41004: LD_VAR 0 5
41008: PPUSH
41009: LD_VAR 0 1
41013: PPUSH
41014: CALL_OW 248
41018: PPUSH
41019: CALL_OW 450
41023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41024: LD_ADDR_VAR 0 2
41028: PUSH
41029: LD_VAR 0 3
41033: PPUSH
41034: LD_INT 1
41036: PPUSH
41037: CALL_OW 275
41041: PUSH
41042: LD_VAR 0 4
41046: PUSH
41047: LD_INT 1
41049: ARRAY
41050: GREATEREQUAL
41051: PUSH
41052: LD_VAR 0 3
41056: PPUSH
41057: LD_INT 2
41059: PPUSH
41060: CALL_OW 275
41064: PUSH
41065: LD_VAR 0 4
41069: PUSH
41070: LD_INT 2
41072: ARRAY
41073: GREATEREQUAL
41074: AND
41075: PUSH
41076: LD_VAR 0 3
41080: PPUSH
41081: LD_INT 3
41083: PPUSH
41084: CALL_OW 275
41088: PUSH
41089: LD_VAR 0 4
41093: PUSH
41094: LD_INT 3
41096: ARRAY
41097: GREATEREQUAL
41098: AND
41099: ST_TO_ADDR
// end ;
41100: LD_VAR 0 2
41104: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41105: LD_INT 0
41107: PPUSH
41108: PPUSH
41109: PPUSH
// pom := GetBase ( building ) ;
41110: LD_ADDR_VAR 0 4
41114: PUSH
41115: LD_VAR 0 1
41119: PPUSH
41120: CALL_OW 274
41124: ST_TO_ADDR
// if not pom then
41125: LD_VAR 0 4
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 41235
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41134: LD_ADDR_VAR 0 5
41138: PUSH
41139: LD_VAR 0 2
41143: PPUSH
41144: LD_VAR 0 1
41148: PPUSH
41149: CALL_OW 248
41153: PPUSH
41154: CALL_OW 450
41158: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41159: LD_ADDR_VAR 0 3
41163: PUSH
41164: LD_VAR 0 4
41168: PPUSH
41169: LD_INT 1
41171: PPUSH
41172: CALL_OW 275
41176: PUSH
41177: LD_VAR 0 5
41181: PUSH
41182: LD_INT 1
41184: ARRAY
41185: GREATEREQUAL
41186: PUSH
41187: LD_VAR 0 4
41191: PPUSH
41192: LD_INT 2
41194: PPUSH
41195: CALL_OW 275
41199: PUSH
41200: LD_VAR 0 5
41204: PUSH
41205: LD_INT 2
41207: ARRAY
41208: GREATEREQUAL
41209: AND
41210: PUSH
41211: LD_VAR 0 4
41215: PPUSH
41216: LD_INT 3
41218: PPUSH
41219: CALL_OW 275
41223: PUSH
41224: LD_VAR 0 5
41228: PUSH
41229: LD_INT 3
41231: ARRAY
41232: GREATEREQUAL
41233: AND
41234: ST_TO_ADDR
// end ;
41235: LD_VAR 0 3
41239: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41240: LD_INT 0
41242: PPUSH
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
// result := false ;
41252: LD_ADDR_VAR 0 6
41256: PUSH
41257: LD_INT 0
41259: ST_TO_ADDR
// if not base or not btype or not x or not y then
41260: LD_VAR 0 1
41264: NOT
41265: PUSH
41266: LD_VAR 0 2
41270: NOT
41271: OR
41272: PUSH
41273: LD_VAR 0 3
41277: NOT
41278: OR
41279: PUSH
41280: LD_VAR 0 4
41284: NOT
41285: OR
41286: IFFALSE 41290
// exit ;
41288: GO 41899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41290: LD_ADDR_VAR 0 12
41294: PUSH
41295: LD_VAR 0 2
41299: PPUSH
41300: LD_VAR 0 3
41304: PPUSH
41305: LD_VAR 0 4
41309: PPUSH
41310: LD_VAR 0 5
41314: PPUSH
41315: LD_VAR 0 1
41319: PUSH
41320: LD_INT 1
41322: ARRAY
41323: PPUSH
41324: CALL_OW 248
41328: PPUSH
41329: LD_INT 0
41331: PPUSH
41332: CALL 42736 0 6
41336: ST_TO_ADDR
// if not hexes then
41337: LD_VAR 0 12
41341: NOT
41342: IFFALSE 41346
// exit ;
41344: GO 41899
// for i = 1 to hexes do
41346: LD_ADDR_VAR 0 7
41350: PUSH
41351: DOUBLE
41352: LD_INT 1
41354: DEC
41355: ST_TO_ADDR
41356: LD_VAR 0 12
41360: PUSH
41361: FOR_TO
41362: IFFALSE 41897
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41364: LD_ADDR_VAR 0 11
41368: PUSH
41369: LD_VAR 0 12
41373: PUSH
41374: LD_VAR 0 7
41378: ARRAY
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: PPUSH
41384: LD_VAR 0 12
41388: PUSH
41389: LD_VAR 0 7
41393: ARRAY
41394: PUSH
41395: LD_INT 2
41397: ARRAY
41398: PPUSH
41399: CALL_OW 428
41403: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41404: LD_VAR 0 12
41408: PUSH
41409: LD_VAR 0 7
41413: ARRAY
41414: PUSH
41415: LD_INT 1
41417: ARRAY
41418: PPUSH
41419: LD_VAR 0 12
41423: PUSH
41424: LD_VAR 0 7
41428: ARRAY
41429: PUSH
41430: LD_INT 2
41432: ARRAY
41433: PPUSH
41434: CALL_OW 351
41438: PUSH
41439: LD_VAR 0 12
41443: PUSH
41444: LD_VAR 0 7
41448: ARRAY
41449: PUSH
41450: LD_INT 1
41452: ARRAY
41453: PPUSH
41454: LD_VAR 0 12
41458: PUSH
41459: LD_VAR 0 7
41463: ARRAY
41464: PUSH
41465: LD_INT 2
41467: ARRAY
41468: PPUSH
41469: CALL_OW 488
41473: NOT
41474: OR
41475: PUSH
41476: LD_VAR 0 11
41480: PPUSH
41481: CALL_OW 247
41485: PUSH
41486: LD_INT 3
41488: EQUAL
41489: OR
41490: IFFALSE 41496
// exit ;
41492: POP
41493: POP
41494: GO 41899
// if not tmp or not tmp in base then
41496: LD_VAR 0 11
41500: NOT
41501: PUSH
41502: LD_VAR 0 11
41506: PUSH
41507: LD_VAR 0 1
41511: IN
41512: NOT
41513: OR
41514: IFFALSE 41518
// continue ;
41516: GO 41361
// result := true ;
41518: LD_ADDR_VAR 0 6
41522: PUSH
41523: LD_INT 1
41525: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41526: LD_ADDR_VAR 0 15
41530: PUSH
41531: LD_VAR 0 1
41535: PPUSH
41536: LD_INT 22
41538: PUSH
41539: LD_VAR 0 11
41543: PPUSH
41544: CALL_OW 255
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: LD_INT 30
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 30
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PPUSH
41585: CALL_OW 72
41589: ST_TO_ADDR
// if dep then
41590: LD_VAR 0 15
41594: IFFALSE 41730
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41596: LD_ADDR_VAR 0 14
41600: PUSH
41601: LD_VAR 0 15
41605: PUSH
41606: LD_INT 1
41608: ARRAY
41609: PPUSH
41610: CALL_OW 250
41614: PPUSH
41615: LD_VAR 0 15
41619: PUSH
41620: LD_INT 1
41622: ARRAY
41623: PPUSH
41624: CALL_OW 254
41628: PPUSH
41629: LD_INT 5
41631: PPUSH
41632: CALL_OW 272
41636: PUSH
41637: LD_VAR 0 15
41641: PUSH
41642: LD_INT 1
41644: ARRAY
41645: PPUSH
41646: CALL_OW 251
41650: PPUSH
41651: LD_VAR 0 15
41655: PUSH
41656: LD_INT 1
41658: ARRAY
41659: PPUSH
41660: CALL_OW 254
41664: PPUSH
41665: LD_INT 5
41667: PPUSH
41668: CALL_OW 273
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41677: LD_VAR 0 14
41681: PUSH
41682: LD_INT 1
41684: ARRAY
41685: PPUSH
41686: LD_VAR 0 14
41690: PUSH
41691: LD_INT 2
41693: ARRAY
41694: PPUSH
41695: CALL_OW 488
41699: IFFALSE 41730
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41701: LD_VAR 0 11
41705: PPUSH
41706: LD_VAR 0 14
41710: PUSH
41711: LD_INT 1
41713: ARRAY
41714: PPUSH
41715: LD_VAR 0 14
41719: PUSH
41720: LD_INT 2
41722: ARRAY
41723: PPUSH
41724: CALL_OW 111
// continue ;
41728: GO 41361
// end ; end ; r := GetDir ( tmp ) ;
41730: LD_ADDR_VAR 0 13
41734: PUSH
41735: LD_VAR 0 11
41739: PPUSH
41740: CALL_OW 254
41744: ST_TO_ADDR
// if r = 5 then
41745: LD_VAR 0 13
41749: PUSH
41750: LD_INT 5
41752: EQUAL
41753: IFFALSE 41763
// r := 0 ;
41755: LD_ADDR_VAR 0 13
41759: PUSH
41760: LD_INT 0
41762: ST_TO_ADDR
// for j = r to 5 do
41763: LD_ADDR_VAR 0 8
41767: PUSH
41768: DOUBLE
41769: LD_VAR 0 13
41773: DEC
41774: ST_TO_ADDR
41775: LD_INT 5
41777: PUSH
41778: FOR_TO
41779: IFFALSE 41893
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41781: LD_ADDR_VAR 0 9
41785: PUSH
41786: LD_VAR 0 11
41790: PPUSH
41791: CALL_OW 250
41795: PPUSH
41796: LD_VAR 0 8
41800: PPUSH
41801: LD_INT 2
41803: PPUSH
41804: CALL_OW 272
41808: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41809: LD_ADDR_VAR 0 10
41813: PUSH
41814: LD_VAR 0 11
41818: PPUSH
41819: CALL_OW 251
41823: PPUSH
41824: LD_VAR 0 8
41828: PPUSH
41829: LD_INT 2
41831: PPUSH
41832: CALL_OW 273
41836: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41837: LD_VAR 0 9
41841: PPUSH
41842: LD_VAR 0 10
41846: PPUSH
41847: CALL_OW 488
41851: PUSH
41852: LD_VAR 0 9
41856: PPUSH
41857: LD_VAR 0 10
41861: PPUSH
41862: CALL_OW 428
41866: NOT
41867: AND
41868: IFFALSE 41891
// begin ComMoveXY ( tmp , _x , _y ) ;
41870: LD_VAR 0 11
41874: PPUSH
41875: LD_VAR 0 9
41879: PPUSH
41880: LD_VAR 0 10
41884: PPUSH
41885: CALL_OW 111
// break ;
41889: GO 41893
// end ; end ;
41891: GO 41778
41893: POP
41894: POP
// end ;
41895: GO 41361
41897: POP
41898: POP
// end ;
41899: LD_VAR 0 6
41903: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41904: LD_INT 0
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
// result := false ;
41916: LD_ADDR_VAR 0 6
41920: PUSH
41921: LD_INT 0
41923: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41924: LD_VAR 0 1
41928: NOT
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: CALL_OW 266
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: IN
41950: NOT
41951: OR
41952: PUSH
41953: LD_VAR 0 2
41957: NOT
41958: OR
41959: PUSH
41960: LD_VAR 0 5
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 4
41979: PUSH
41980: LD_INT 5
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: IN
41991: NOT
41992: OR
41993: PUSH
41994: LD_VAR 0 3
41998: PPUSH
41999: LD_VAR 0 4
42003: PPUSH
42004: CALL_OW 488
42008: NOT
42009: OR
42010: IFFALSE 42014
// exit ;
42012: GO 42731
// pom := GetBase ( depot ) ;
42014: LD_ADDR_VAR 0 10
42018: PUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 274
42028: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42029: LD_ADDR_VAR 0 11
42033: PUSH
42034: LD_VAR 0 2
42038: PPUSH
42039: LD_VAR 0 1
42043: PPUSH
42044: CALL_OW 248
42048: PPUSH
42049: CALL_OW 450
42053: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42054: LD_VAR 0 10
42058: PPUSH
42059: LD_INT 1
42061: PPUSH
42062: CALL_OW 275
42066: PUSH
42067: LD_VAR 0 11
42071: PUSH
42072: LD_INT 1
42074: ARRAY
42075: GREATEREQUAL
42076: PUSH
42077: LD_VAR 0 10
42081: PPUSH
42082: LD_INT 2
42084: PPUSH
42085: CALL_OW 275
42089: PUSH
42090: LD_VAR 0 11
42094: PUSH
42095: LD_INT 2
42097: ARRAY
42098: GREATEREQUAL
42099: AND
42100: PUSH
42101: LD_VAR 0 10
42105: PPUSH
42106: LD_INT 3
42108: PPUSH
42109: CALL_OW 275
42113: PUSH
42114: LD_VAR 0 11
42118: PUSH
42119: LD_INT 3
42121: ARRAY
42122: GREATEREQUAL
42123: AND
42124: NOT
42125: IFFALSE 42129
// exit ;
42127: GO 42731
// if GetBType ( depot ) = b_depot then
42129: LD_VAR 0 1
42133: PPUSH
42134: CALL_OW 266
42138: PUSH
42139: LD_INT 0
42141: EQUAL
42142: IFFALSE 42154
// dist := 28 else
42144: LD_ADDR_VAR 0 14
42148: PUSH
42149: LD_INT 28
42151: ST_TO_ADDR
42152: GO 42162
// dist := 36 ;
42154: LD_ADDR_VAR 0 14
42158: PUSH
42159: LD_INT 36
42161: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42162: LD_VAR 0 1
42166: PPUSH
42167: LD_VAR 0 3
42171: PPUSH
42172: LD_VAR 0 4
42176: PPUSH
42177: CALL_OW 297
42181: PUSH
42182: LD_VAR 0 14
42186: GREATER
42187: IFFALSE 42191
// exit ;
42189: GO 42731
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42191: LD_ADDR_VAR 0 12
42195: PUSH
42196: LD_VAR 0 2
42200: PPUSH
42201: LD_VAR 0 3
42205: PPUSH
42206: LD_VAR 0 4
42210: PPUSH
42211: LD_VAR 0 5
42215: PPUSH
42216: LD_VAR 0 1
42220: PPUSH
42221: CALL_OW 248
42225: PPUSH
42226: LD_INT 0
42228: PPUSH
42229: CALL 42736 0 6
42233: ST_TO_ADDR
// if not hexes then
42234: LD_VAR 0 12
42238: NOT
42239: IFFALSE 42243
// exit ;
42241: GO 42731
// hex := GetHexInfo ( x , y ) ;
42243: LD_ADDR_VAR 0 15
42247: PUSH
42248: LD_VAR 0 3
42252: PPUSH
42253: LD_VAR 0 4
42257: PPUSH
42258: CALL_OW 546
42262: ST_TO_ADDR
// if hex [ 1 ] then
42263: LD_VAR 0 15
42267: PUSH
42268: LD_INT 1
42270: ARRAY
42271: IFFALSE 42275
// exit ;
42273: GO 42731
// height := hex [ 2 ] ;
42275: LD_ADDR_VAR 0 13
42279: PUSH
42280: LD_VAR 0 15
42284: PUSH
42285: LD_INT 2
42287: ARRAY
42288: ST_TO_ADDR
// for i = 1 to hexes do
42289: LD_ADDR_VAR 0 7
42293: PUSH
42294: DOUBLE
42295: LD_INT 1
42297: DEC
42298: ST_TO_ADDR
42299: LD_VAR 0 12
42303: PUSH
42304: FOR_TO
42305: IFFALSE 42635
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42307: LD_VAR 0 12
42311: PUSH
42312: LD_VAR 0 7
42316: ARRAY
42317: PUSH
42318: LD_INT 1
42320: ARRAY
42321: PPUSH
42322: LD_VAR 0 12
42326: PUSH
42327: LD_VAR 0 7
42331: ARRAY
42332: PUSH
42333: LD_INT 2
42335: ARRAY
42336: PPUSH
42337: CALL_OW 488
42341: NOT
42342: PUSH
42343: LD_VAR 0 12
42347: PUSH
42348: LD_VAR 0 7
42352: ARRAY
42353: PUSH
42354: LD_INT 1
42356: ARRAY
42357: PPUSH
42358: LD_VAR 0 12
42362: PUSH
42363: LD_VAR 0 7
42367: ARRAY
42368: PUSH
42369: LD_INT 2
42371: ARRAY
42372: PPUSH
42373: CALL_OW 428
42377: PUSH
42378: LD_INT 0
42380: GREATER
42381: OR
42382: PUSH
42383: LD_VAR 0 12
42387: PUSH
42388: LD_VAR 0 7
42392: ARRAY
42393: PUSH
42394: LD_INT 1
42396: ARRAY
42397: PPUSH
42398: LD_VAR 0 12
42402: PUSH
42403: LD_VAR 0 7
42407: ARRAY
42408: PUSH
42409: LD_INT 2
42411: ARRAY
42412: PPUSH
42413: CALL_OW 351
42417: OR
42418: IFFALSE 42424
// exit ;
42420: POP
42421: POP
42422: GO 42731
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42424: LD_ADDR_VAR 0 8
42428: PUSH
42429: LD_VAR 0 12
42433: PUSH
42434: LD_VAR 0 7
42438: ARRAY
42439: PUSH
42440: LD_INT 1
42442: ARRAY
42443: PPUSH
42444: LD_VAR 0 12
42448: PUSH
42449: LD_VAR 0 7
42453: ARRAY
42454: PUSH
42455: LD_INT 2
42457: ARRAY
42458: PPUSH
42459: CALL_OW 546
42463: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42464: LD_VAR 0 8
42468: PUSH
42469: LD_INT 1
42471: ARRAY
42472: PUSH
42473: LD_VAR 0 8
42477: PUSH
42478: LD_INT 2
42480: ARRAY
42481: PUSH
42482: LD_VAR 0 13
42486: PUSH
42487: LD_INT 2
42489: PLUS
42490: GREATER
42491: OR
42492: PUSH
42493: LD_VAR 0 8
42497: PUSH
42498: LD_INT 2
42500: ARRAY
42501: PUSH
42502: LD_VAR 0 13
42506: PUSH
42507: LD_INT 2
42509: MINUS
42510: LESS
42511: OR
42512: PUSH
42513: LD_VAR 0 8
42517: PUSH
42518: LD_INT 3
42520: ARRAY
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 8
42527: PUSH
42528: LD_INT 9
42530: PUSH
42531: LD_INT 10
42533: PUSH
42534: LD_INT 11
42536: PUSH
42537: LD_INT 12
42539: PUSH
42540: LD_INT 13
42542: PUSH
42543: LD_INT 16
42545: PUSH
42546: LD_INT 17
42548: PUSH
42549: LD_INT 18
42551: PUSH
42552: LD_INT 19
42554: PUSH
42555: LD_INT 20
42557: PUSH
42558: LD_INT 21
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: IN
42576: NOT
42577: OR
42578: PUSH
42579: LD_VAR 0 8
42583: PUSH
42584: LD_INT 5
42586: ARRAY
42587: NOT
42588: OR
42589: PUSH
42590: LD_VAR 0 8
42594: PUSH
42595: LD_INT 6
42597: ARRAY
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: LD_INT 7
42607: PUSH
42608: LD_INT 9
42610: PUSH
42611: LD_INT 10
42613: PUSH
42614: LD_INT 11
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: IN
42625: NOT
42626: OR
42627: IFFALSE 42633
// exit ;
42629: POP
42630: POP
42631: GO 42731
// end ;
42633: GO 42304
42635: POP
42636: POP
// side := GetSide ( depot ) ;
42637: LD_ADDR_VAR 0 9
42641: PUSH
42642: LD_VAR 0 1
42646: PPUSH
42647: CALL_OW 255
42651: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42652: LD_VAR 0 9
42656: PPUSH
42657: LD_VAR 0 3
42661: PPUSH
42662: LD_VAR 0 4
42666: PPUSH
42667: LD_INT 20
42669: PPUSH
42670: CALL 35385 0 4
42674: PUSH
42675: LD_INT 4
42677: ARRAY
42678: IFFALSE 42682
// exit ;
42680: GO 42731
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42682: LD_VAR 0 2
42686: PUSH
42687: LD_INT 29
42689: PUSH
42690: LD_INT 30
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: IN
42697: PUSH
42698: LD_VAR 0 3
42702: PPUSH
42703: LD_VAR 0 4
42707: PPUSH
42708: LD_VAR 0 9
42712: PPUSH
42713: CALL_OW 440
42717: NOT
42718: AND
42719: IFFALSE 42723
// exit ;
42721: GO 42731
// result := true ;
42723: LD_ADDR_VAR 0 6
42727: PUSH
42728: LD_INT 1
42730: ST_TO_ADDR
// end ;
42731: LD_VAR 0 6
42735: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
42736: LD_INT 0
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
42766: PPUSH
42767: PPUSH
42768: PPUSH
42769: PPUSH
42770: PPUSH
42771: PPUSH
42772: PPUSH
42773: PPUSH
42774: PPUSH
42775: PPUSH
42776: PPUSH
42777: PPUSH
42778: PPUSH
42779: PPUSH
42780: PPUSH
42781: PPUSH
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
42795: PPUSH
// result = [ ] ;
42796: LD_ADDR_VAR 0 7
42800: PUSH
42801: EMPTY
42802: ST_TO_ADDR
// temp_list = [ ] ;
42803: LD_ADDR_VAR 0 9
42807: PUSH
42808: EMPTY
42809: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42810: LD_VAR 0 4
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: LD_INT 4
42829: PUSH
42830: LD_INT 5
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: IN
42841: NOT
42842: PUSH
42843: LD_VAR 0 1
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: IN
42858: PUSH
42859: LD_VAR 0 5
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: IN
42878: NOT
42879: AND
42880: OR
42881: IFFALSE 42885
// exit ;
42883: GO 61276
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42885: LD_VAR 0 1
42889: PUSH
42890: LD_INT 6
42892: PUSH
42893: LD_INT 7
42895: PUSH
42896: LD_INT 8
42898: PUSH
42899: LD_INT 13
42901: PUSH
42902: LD_INT 12
42904: PUSH
42905: LD_INT 15
42907: PUSH
42908: LD_INT 11
42910: PUSH
42911: LD_INT 14
42913: PUSH
42914: LD_INT 10
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: IN
42928: IFFALSE 42938
// btype = b_lab ;
42930: LD_ADDR_VAR 0 1
42934: PUSH
42935: LD_INT 6
42937: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42938: LD_VAR 0 6
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: IN
42957: NOT
42958: PUSH
42959: LD_VAR 0 1
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 6
42978: PUSH
42979: LD_INT 36
42981: PUSH
42982: LD_INT 4
42984: PUSH
42985: LD_INT 5
42987: PUSH
42988: LD_INT 31
42990: PUSH
42991: LD_INT 32
42993: PUSH
42994: LD_INT 33
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: IN
43010: NOT
43011: PUSH
43012: LD_VAR 0 6
43016: PUSH
43017: LD_INT 1
43019: EQUAL
43020: AND
43021: OR
43022: PUSH
43023: LD_VAR 0 1
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: LD_INT 3
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: IN
43038: NOT
43039: PUSH
43040: LD_VAR 0 6
43044: PUSH
43045: LD_INT 2
43047: EQUAL
43048: AND
43049: OR
43050: IFFALSE 43060
// mode = 0 ;
43052: LD_ADDR_VAR 0 6
43056: PUSH
43057: LD_INT 0
43059: ST_TO_ADDR
// case mode of 0 :
43060: LD_VAR 0 6
43064: PUSH
43065: LD_INT 0
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43073
43071: GO 54526
43073: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43074: LD_ADDR_VAR 0 11
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43267: LD_ADDR_VAR 0 12
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: NEG
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 3
43435: NEG
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43463: LD_ADDR_VAR 0 13
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: LD_INT 3
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 3
43634: NEG
43635: PUSH
43636: LD_INT 3
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43662: LD_ADDR_VAR 0 14
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: LD_INT 3
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 3
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43858: LD_ADDR_VAR 0 15
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 2
43992: NEG
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 3
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 3
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44051: LD_ADDR_VAR 0 16
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: LD_INT 2
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: LD_INT 1
44178: NEG
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44244: LD_ADDR_VAR 0 17
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 1
44264: NEG
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 1
44313: NEG
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: LD_INT 2
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 2
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 2
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 2
44443: NEG
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44474: LD_ADDR_VAR 0 18
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: LD_INT 2
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: NEG
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: NEG
44662: PUSH
44663: LD_INT 1
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44704: LD_ADDR_VAR 0 19
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 2
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: PUSH
44840: LD_INT 2
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: LD_INT 2
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 2
44891: NEG
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44934: LD_ADDR_VAR 0 20
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 1
44954: NEG
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 1
45041: NEG
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 2
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: NEG
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: LD_INT 2
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45164: LD_ADDR_VAR 0 21
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 0
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 2
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 2
45299: PUSH
45300: LD_INT 2
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: LD_INT 2
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45394: LD_ADDR_VAR 0 22
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45624: LD_ADDR_VAR 0 23
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45904: LD_ADDR_VAR 0 24
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46180: LD_ADDR_VAR 0 25
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 0
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: NEG
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: LD_INT 2
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 3
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 3
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46454: LD_ADDR_VAR 0 26
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 2
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: LD_INT 1
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46730: LD_ADDR_VAR 0 27
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: LD_INT 1
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: NEG
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47010: LD_ADDR_VAR 0 28
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 0
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 1
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: LD_INT 2
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 1
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: NEG
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: NEG
47234: PUSH
47235: LD_INT 3
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 3
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47292: LD_ADDR_VAR 0 29
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: LD_INT 3
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 3
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: PUSH
47516: LD_INT 3
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 2
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 3
47536: NEG
47537: PUSH
47538: LD_INT 2
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47571: LD_ADDR_VAR 0 30
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 3
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 3
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47849: LD_ADDR_VAR 0 31
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: LD_INT 2
48030: NEG
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: NEG
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48127: LD_ADDR_VAR 0 32
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 2
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: NEG
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48405: LD_ADDR_VAR 0 33
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 3
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48684: LD_ADDR_VAR 0 34
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 3
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48964: LD_ADDR_VAR 0 35
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49076: LD_ADDR_VAR 0 36
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49188: LD_ADDR_VAR 0 37
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49300: LD_ADDR_VAR 0 38
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49412: LD_ADDR_VAR 0 39
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: LD_INT 2
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49524: LD_ADDR_VAR 0 40
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49636: LD_ADDR_VAR 0 41
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 2
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: PUSH
49880: LD_INT 3
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 3
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: LD_INT 0
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: NEG
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 3
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49986: LD_ADDR_VAR 0 42
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 3
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 3
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 3
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 3
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 2
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50336: LD_ADDR_VAR 0 43
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 2
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 3
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 3
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 3
50632: NEG
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50684: LD_ADDR_VAR 0 44
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 1
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 2
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: LD_INT 3
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51034: LD_ADDR_VAR 0 45
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: NEG
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 3
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 3
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 3
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51384: LD_ADDR_VAR 0 46
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 1
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 3
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: NEG
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51732: LD_ADDR_VAR 0 47
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 1
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51883: LD_ADDR_VAR 0 48
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52030: LD_ADDR_VAR 0 49
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52174: LD_ADDR_VAR 0 50
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52318: LD_ADDR_VAR 0 51
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52465: LD_ADDR_VAR 0 52
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 0
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 1
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52616: LD_ADDR_VAR 0 53
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: LD_INT 1
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52846: LD_ADDR_VAR 0 54
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53076: LD_ADDR_VAR 0 55
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 0
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 1
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: LD_INT 0
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53306: LD_ADDR_VAR 0 56
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: NEG
53376: PUSH
53377: LD_INT 1
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 2
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 2
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 2
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53536: LD_ADDR_VAR 0 57
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: LD_INT 2
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 2
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 2
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53766: LD_ADDR_VAR 0 58
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 0
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53996: LD_ADDR_VAR 0 59
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54084: LD_ADDR_VAR 0 60
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54172: LD_ADDR_VAR 0 61
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54260: LD_ADDR_VAR 0 62
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54348: LD_ADDR_VAR 0 63
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54436: LD_ADDR_VAR 0 64
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: ST_TO_ADDR
// end ; 1 :
54524: GO 60421
54526: LD_INT 1
54528: DOUBLE
54529: EQUAL
54530: IFTRUE 54534
54532: GO 57157
54534: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54535: LD_ADDR_VAR 0 11
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54579: LD_ADDR_VAR 0 12
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54620: LD_ADDR_VAR 0 13
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: LD_INT 2
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54660: LD_ADDR_VAR 0 14
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54701: LD_ADDR_VAR 0 15
54705: PUSH
54706: LD_INT 2
54708: NEG
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54745: LD_ADDR_VAR 0 16
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 3
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54791: LD_ADDR_VAR 0 17
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 3
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 3
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54835: LD_ADDR_VAR 0 18
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54876: LD_ADDR_VAR 0 19
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: LIST
54915: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54916: LD_ADDR_VAR 0 20
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: LIST
54956: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54957: LD_ADDR_VAR 0 21
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: NEG
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55001: LD_ADDR_VAR 0 22
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: LD_INT 2
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 3
55032: NEG
55033: PUSH
55034: LD_INT 3
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55047: LD_ADDR_VAR 0 23
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 4
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 3
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55091: LD_ADDR_VAR 0 24
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55132: LD_ADDR_VAR 0 25
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: LD_INT 3
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 4
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: LD_INT 4
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: LIST
55171: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55172: LD_ADDR_VAR 0 26
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 3
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 4
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55213: LD_ADDR_VAR 0 27
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 4
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55257: LD_ADDR_VAR 0 28
55261: PUSH
55262: LD_INT 3
55264: NEG
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: NEG
55277: PUSH
55278: LD_INT 4
55280: NEG
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 4
55288: NEG
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: LIST
55302: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55303: LD_ADDR_VAR 0 29
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: NEG
55345: PUSH
55346: LD_INT 4
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 4
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 5
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 5
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 4
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: LD_INT 6
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 6
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 5
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55458: LD_ADDR_VAR 0 30
55462: PUSH
55463: LD_INT 2
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 3
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 4
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 5
55548: PUSH
55549: LD_INT 1
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 5
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 6
55569: PUSH
55570: LD_INT 0
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 6
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55601: LD_ADDR_VAR 0 31
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 2
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 4
55648: PUSH
55649: LD_INT 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 5
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 5
55678: PUSH
55679: LD_INT 5
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 4
55688: PUSH
55689: LD_INT 5
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 6
55698: PUSH
55699: LD_INT 5
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 6
55708: PUSH
55709: LD_INT 6
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: LD_INT 6
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55740: LD_ADDR_VAR 0 32
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 3
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 4
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: PUSH
55810: LD_INT 5
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 5
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 1
55840: PUSH
55841: LD_INT 6
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 6
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: LD_INT 5
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55883: LD_ADDR_VAR 0 33
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 3
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 4
55935: NEG
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 4
55946: NEG
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 4
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 5
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 5
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 5
55992: NEG
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 6
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 6
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56038: LD_ADDR_VAR 0 34
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 4
56093: NEG
56094: PUSH
56095: LD_INT 3
56097: NEG
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: LD_INT 4
56109: NEG
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: LD_INT 5
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 5
56129: NEG
56130: PUSH
56131: LD_INT 4
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 5
56141: NEG
56142: PUSH
56143: LD_INT 5
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 5
56153: NEG
56154: PUSH
56155: LD_INT 6
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 6
56165: NEG
56166: PUSH
56167: LD_INT 5
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 6
56177: NEG
56178: PUSH
56179: LD_INT 6
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56201: LD_ADDR_VAR 0 41
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: NEG
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56245: LD_ADDR_VAR 0 42
56249: PUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56286: LD_ADDR_VAR 0 43
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: LIST
56325: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56326: LD_ADDR_VAR 0 44
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 2
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56367: LD_ADDR_VAR 0 45
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56411: LD_ADDR_VAR 0 46
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: NEG
56431: PUSH
56432: LD_INT 3
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 3
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56457: LD_ADDR_VAR 0 47
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56490: LD_ADDR_VAR 0 48
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56521: LD_ADDR_VAR 0 49
56525: PUSH
56526: LD_INT 3
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 2
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56550: LD_ADDR_VAR 0 50
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 3
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56579: LD_ADDR_VAR 0 51
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 2
56597: NEG
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56610: LD_ADDR_VAR 0 52
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 3
56629: NEG
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56643: LD_ADDR_VAR 0 53
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 3
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 3
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56687: LD_ADDR_VAR 0 54
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56728: LD_ADDR_VAR 0 55
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 3
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: LIST
56767: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56768: LD_ADDR_VAR 0 56
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 1
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: LIST
56808: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56809: LD_ADDR_VAR 0 57
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56853: LD_ADDR_VAR 0 58
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 3
56872: NEG
56873: PUSH
56874: LD_INT 2
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 3
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: LIST
56898: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56899: LD_ADDR_VAR 0 59
56903: PUSH
56904: LD_INT 1
56906: NEG
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56943: LD_ADDR_VAR 0 60
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56984: LD_ADDR_VAR 0 61
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57024: LD_ADDR_VAR 0 62
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: LD_INT 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 0
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57065: LD_ADDR_VAR 0 63
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57109: LD_ADDR_VAR 0 64
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: LIST
57154: ST_TO_ADDR
// end ; 2 :
57155: GO 60421
57157: LD_INT 2
57159: DOUBLE
57160: EQUAL
57161: IFTRUE 57165
57163: GO 60420
57165: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57166: LD_ADDR_VAR 0 29
57170: PUSH
57171: LD_INT 4
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 4
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 5
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 4
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: LD_INT 2
57248: NEG
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 2
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: LD_INT 4
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 3
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 3
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 4
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 5
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 5
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 4
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: LD_INT 5
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 3
57449: NEG
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 4
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 4
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 4
57551: NEG
57552: PUSH
57553: LD_INT 4
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 4
57563: NEG
57564: PUSH
57565: LD_INT 5
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 4
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 5
57611: NEG
57612: PUSH
57613: LD_INT 4
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 5
57623: NEG
57624: PUSH
57625: LD_INT 5
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: LD_INT 5
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 5
57647: NEG
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57704: LD_ADDR_VAR 0 30
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: LD_INT 3
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 4
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 5
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: LD_INT 5
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: LD_INT 3
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 4
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 4
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 3
57928: NEG
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 5
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 5
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 3
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 3
57996: NEG
57997: PUSH
57998: LD_INT 3
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 3
58008: NEG
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 4
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: LD_INT 2
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 4
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 5
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 1
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 3
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: LD_INT 5
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 3
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: LD_INT 5
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58251: LD_ADDR_VAR 0 31
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 4
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 3
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 5
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: LD_INT 5
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 5
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 2
58340: NEG
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 2
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 3
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 4
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 4
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: NEG
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 4
58453: NEG
58454: PUSH
58455: LD_INT 4
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 4
58465: NEG
58466: PUSH
58467: LD_INT 5
58469: NEG
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 5
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 5
58525: NEG
58526: PUSH
58527: LD_INT 5
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: NEG
58538: PUSH
58539: LD_INT 5
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 5
58549: NEG
58550: PUSH
58551: LD_INT 3
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 4
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: LD_INT 2
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 1
58616: NEG
58617: PUSH
58618: LD_INT 3
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 4
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 4
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 5
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 5
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 4
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 0
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 3
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 5
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58801: LD_ADDR_VAR 0 32
58805: PUSH
58806: LD_INT 4
58808: NEG
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 4
58853: NEG
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 5
58864: NEG
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 5
58875: NEG
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 5
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: NEG
58911: PUSH
58912: LD_INT 3
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 3
58922: NEG
58923: PUSH
58924: LD_INT 4
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: LD_INT 3
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: NEG
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 3
58958: NEG
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 4
58970: NEG
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 4
58982: NEG
58983: PUSH
58984: LD_INT 4
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 2
58994: NEG
58995: PUSH
58996: LD_INT 4
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 5
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 3
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 4
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: LD_INT 5
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: LD_INT 3
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: LD_INT 5
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 4
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 3
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 4
59203: PUSH
59204: LD_INT 2
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 5
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 5
59243: PUSH
59244: LD_INT 5
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 4
59253: PUSH
59254: LD_INT 5
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 4
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 3
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 5
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 3
59293: PUSH
59294: LD_INT 5
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59348: LD_ADDR_VAR 0 33
59352: PUSH
59353: LD_INT 4
59355: NEG
59356: PUSH
59357: LD_INT 4
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: NEG
59368: PUSH
59369: LD_INT 5
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 3
59379: NEG
59380: PUSH
59381: LD_INT 4
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: NEG
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 5
59415: NEG
59416: PUSH
59417: LD_INT 4
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 5
59427: NEG
59428: PUSH
59429: LD_INT 5
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 5
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 5
59451: NEG
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 4
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 3
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: LD_INT 4
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 4
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 4
59575: PUSH
59576: LD_INT 1
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 5
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 5
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 3
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 5
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 2
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 4
59688: PUSH
59689: LD_INT 4
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 3
59698: PUSH
59699: LD_INT 4
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 3
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 4
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 4
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 4
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 5
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 0
59788: PUSH
59789: LD_INT 5
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: LD_INT 4
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: LD_INT 3
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 2
59820: PUSH
59821: LD_INT 5
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59886: LD_ADDR_VAR 0 34
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 4
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: LD_INT 5
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 4
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 3
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 4
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 5
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: LD_INT 5
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 4
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 4
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 4
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 5
60118: PUSH
60119: LD_INT 5
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 4
60128: PUSH
60129: LD_INT 5
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 4
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 3
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 5
60158: PUSH
60159: LD_INT 3
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 5
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 4
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 4
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 3
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 4
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 2
60260: NEG
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: NEG
60295: PUSH
60296: LD_INT 0
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 4
60316: NEG
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 5
60338: NEG
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: LD_INT 2
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: ST_TO_ADDR
// end ; end ;
60418: GO 60421
60420: POP
// case btype of b_depot , b_warehouse :
60421: LD_VAR 0 1
60425: PUSH
60426: LD_INT 0
60428: DOUBLE
60429: EQUAL
60430: IFTRUE 60440
60432: LD_INT 1
60434: DOUBLE
60435: EQUAL
60436: IFTRUE 60440
60438: GO 60641
60440: POP
// case nation of nation_american :
60441: LD_VAR 0 5
60445: PUSH
60446: LD_INT 1
60448: DOUBLE
60449: EQUAL
60450: IFTRUE 60454
60452: GO 60510
60454: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
60455: LD_ADDR_VAR 0 9
60459: PUSH
60460: LD_VAR 0 11
60464: PUSH
60465: LD_VAR 0 12
60469: PUSH
60470: LD_VAR 0 13
60474: PUSH
60475: LD_VAR 0 14
60479: PUSH
60480: LD_VAR 0 15
60484: PUSH
60485: LD_VAR 0 16
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: PUSH
60498: LD_VAR 0 4
60502: PUSH
60503: LD_INT 1
60505: PLUS
60506: ARRAY
60507: ST_TO_ADDR
60508: GO 60639
60510: LD_INT 2
60512: DOUBLE
60513: EQUAL
60514: IFTRUE 60518
60516: GO 60574
60518: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
60519: LD_ADDR_VAR 0 9
60523: PUSH
60524: LD_VAR 0 17
60528: PUSH
60529: LD_VAR 0 18
60533: PUSH
60534: LD_VAR 0 19
60538: PUSH
60539: LD_VAR 0 20
60543: PUSH
60544: LD_VAR 0 21
60548: PUSH
60549: LD_VAR 0 22
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: PUSH
60562: LD_VAR 0 4
60566: PUSH
60567: LD_INT 1
60569: PLUS
60570: ARRAY
60571: ST_TO_ADDR
60572: GO 60639
60574: LD_INT 3
60576: DOUBLE
60577: EQUAL
60578: IFTRUE 60582
60580: GO 60638
60582: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60583: LD_ADDR_VAR 0 9
60587: PUSH
60588: LD_VAR 0 23
60592: PUSH
60593: LD_VAR 0 24
60597: PUSH
60598: LD_VAR 0 25
60602: PUSH
60603: LD_VAR 0 26
60607: PUSH
60608: LD_VAR 0 27
60612: PUSH
60613: LD_VAR 0 28
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: PUSH
60626: LD_VAR 0 4
60630: PUSH
60631: LD_INT 1
60633: PLUS
60634: ARRAY
60635: ST_TO_ADDR
60636: GO 60639
60638: POP
60639: GO 61194
60641: LD_INT 2
60643: DOUBLE
60644: EQUAL
60645: IFTRUE 60655
60647: LD_INT 3
60649: DOUBLE
60650: EQUAL
60651: IFTRUE 60655
60653: GO 60711
60655: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60656: LD_ADDR_VAR 0 9
60660: PUSH
60661: LD_VAR 0 29
60665: PUSH
60666: LD_VAR 0 30
60670: PUSH
60671: LD_VAR 0 31
60675: PUSH
60676: LD_VAR 0 32
60680: PUSH
60681: LD_VAR 0 33
60685: PUSH
60686: LD_VAR 0 34
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: PUSH
60699: LD_VAR 0 4
60703: PUSH
60704: LD_INT 1
60706: PLUS
60707: ARRAY
60708: ST_TO_ADDR
60709: GO 61194
60711: LD_INT 16
60713: DOUBLE
60714: EQUAL
60715: IFTRUE 60773
60717: LD_INT 17
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60773
60723: LD_INT 18
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60773
60729: LD_INT 19
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60773
60735: LD_INT 22
60737: DOUBLE
60738: EQUAL
60739: IFTRUE 60773
60741: LD_INT 20
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60773
60747: LD_INT 21
60749: DOUBLE
60750: EQUAL
60751: IFTRUE 60773
60753: LD_INT 23
60755: DOUBLE
60756: EQUAL
60757: IFTRUE 60773
60759: LD_INT 24
60761: DOUBLE
60762: EQUAL
60763: IFTRUE 60773
60765: LD_INT 25
60767: DOUBLE
60768: EQUAL
60769: IFTRUE 60773
60771: GO 60829
60773: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60774: LD_ADDR_VAR 0 9
60778: PUSH
60779: LD_VAR 0 35
60783: PUSH
60784: LD_VAR 0 36
60788: PUSH
60789: LD_VAR 0 37
60793: PUSH
60794: LD_VAR 0 38
60798: PUSH
60799: LD_VAR 0 39
60803: PUSH
60804: LD_VAR 0 40
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: PUSH
60817: LD_VAR 0 4
60821: PUSH
60822: LD_INT 1
60824: PLUS
60825: ARRAY
60826: ST_TO_ADDR
60827: GO 61194
60829: LD_INT 6
60831: DOUBLE
60832: EQUAL
60833: IFTRUE 60885
60835: LD_INT 7
60837: DOUBLE
60838: EQUAL
60839: IFTRUE 60885
60841: LD_INT 8
60843: DOUBLE
60844: EQUAL
60845: IFTRUE 60885
60847: LD_INT 13
60849: DOUBLE
60850: EQUAL
60851: IFTRUE 60885
60853: LD_INT 12
60855: DOUBLE
60856: EQUAL
60857: IFTRUE 60885
60859: LD_INT 15
60861: DOUBLE
60862: EQUAL
60863: IFTRUE 60885
60865: LD_INT 11
60867: DOUBLE
60868: EQUAL
60869: IFTRUE 60885
60871: LD_INT 14
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60885
60877: LD_INT 10
60879: DOUBLE
60880: EQUAL
60881: IFTRUE 60885
60883: GO 60941
60885: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
60886: LD_ADDR_VAR 0 9
60890: PUSH
60891: LD_VAR 0 41
60895: PUSH
60896: LD_VAR 0 42
60900: PUSH
60901: LD_VAR 0 43
60905: PUSH
60906: LD_VAR 0 44
60910: PUSH
60911: LD_VAR 0 45
60915: PUSH
60916: LD_VAR 0 46
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: PUSH
60929: LD_VAR 0 4
60933: PUSH
60934: LD_INT 1
60936: PLUS
60937: ARRAY
60938: ST_TO_ADDR
60939: GO 61194
60941: LD_INT 36
60943: DOUBLE
60944: EQUAL
60945: IFTRUE 60949
60947: GO 61005
60949: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60950: LD_ADDR_VAR 0 9
60954: PUSH
60955: LD_VAR 0 47
60959: PUSH
60960: LD_VAR 0 48
60964: PUSH
60965: LD_VAR 0 49
60969: PUSH
60970: LD_VAR 0 50
60974: PUSH
60975: LD_VAR 0 51
60979: PUSH
60980: LD_VAR 0 52
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: PUSH
60993: LD_VAR 0 4
60997: PUSH
60998: LD_INT 1
61000: PLUS
61001: ARRAY
61002: ST_TO_ADDR
61003: GO 61194
61005: LD_INT 4
61007: DOUBLE
61008: EQUAL
61009: IFTRUE 61031
61011: LD_INT 5
61013: DOUBLE
61014: EQUAL
61015: IFTRUE 61031
61017: LD_INT 34
61019: DOUBLE
61020: EQUAL
61021: IFTRUE 61031
61023: LD_INT 37
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61031
61029: GO 61087
61031: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61032: LD_ADDR_VAR 0 9
61036: PUSH
61037: LD_VAR 0 53
61041: PUSH
61042: LD_VAR 0 54
61046: PUSH
61047: LD_VAR 0 55
61051: PUSH
61052: LD_VAR 0 56
61056: PUSH
61057: LD_VAR 0 57
61061: PUSH
61062: LD_VAR 0 58
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: PUSH
61075: LD_VAR 0 4
61079: PUSH
61080: LD_INT 1
61082: PLUS
61083: ARRAY
61084: ST_TO_ADDR
61085: GO 61194
61087: LD_INT 31
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61137
61093: LD_INT 32
61095: DOUBLE
61096: EQUAL
61097: IFTRUE 61137
61099: LD_INT 33
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61137
61105: LD_INT 27
61107: DOUBLE
61108: EQUAL
61109: IFTRUE 61137
61111: LD_INT 26
61113: DOUBLE
61114: EQUAL
61115: IFTRUE 61137
61117: LD_INT 28
61119: DOUBLE
61120: EQUAL
61121: IFTRUE 61137
61123: LD_INT 29
61125: DOUBLE
61126: EQUAL
61127: IFTRUE 61137
61129: LD_INT 30
61131: DOUBLE
61132: EQUAL
61133: IFTRUE 61137
61135: GO 61193
61137: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
61138: LD_ADDR_VAR 0 9
61142: PUSH
61143: LD_VAR 0 59
61147: PUSH
61148: LD_VAR 0 60
61152: PUSH
61153: LD_VAR 0 61
61157: PUSH
61158: LD_VAR 0 62
61162: PUSH
61163: LD_VAR 0 63
61167: PUSH
61168: LD_VAR 0 64
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: PUSH
61181: LD_VAR 0 4
61185: PUSH
61186: LD_INT 1
61188: PLUS
61189: ARRAY
61190: ST_TO_ADDR
61191: GO 61194
61193: POP
// temp_list2 = [ ] ;
61194: LD_ADDR_VAR 0 10
61198: PUSH
61199: EMPTY
61200: ST_TO_ADDR
// for i in temp_list do
61201: LD_ADDR_VAR 0 8
61205: PUSH
61206: LD_VAR 0 9
61210: PUSH
61211: FOR_IN
61212: IFFALSE 61264
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61214: LD_ADDR_VAR 0 10
61218: PUSH
61219: LD_VAR 0 10
61223: PUSH
61224: LD_VAR 0 8
61228: PUSH
61229: LD_INT 1
61231: ARRAY
61232: PUSH
61233: LD_VAR 0 2
61237: PLUS
61238: PUSH
61239: LD_VAR 0 8
61243: PUSH
61244: LD_INT 2
61246: ARRAY
61247: PUSH
61248: LD_VAR 0 3
61252: PLUS
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: ADD
61261: ST_TO_ADDR
61262: GO 61211
61264: POP
61265: POP
// result = temp_list2 ;
61266: LD_ADDR_VAR 0 7
61270: PUSH
61271: LD_VAR 0 10
61275: ST_TO_ADDR
// end ;
61276: LD_VAR 0 7
61280: RET
// export function EnemyInRange ( unit , dist ) ; begin
61281: LD_INT 0
61283: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: CALL_OW 255
61298: PPUSH
61299: LD_VAR 0 1
61303: PPUSH
61304: CALL_OW 250
61308: PPUSH
61309: LD_VAR 0 1
61313: PPUSH
61314: CALL_OW 251
61318: PPUSH
61319: LD_VAR 0 2
61323: PPUSH
61324: CALL 35385 0 4
61328: PUSH
61329: LD_INT 4
61331: ARRAY
61332: ST_TO_ADDR
// end ;
61333: LD_VAR 0 3
61337: RET
// export function PlayerSeeMe ( unit ) ; begin
61338: LD_INT 0
61340: PPUSH
// result := See ( your_side , unit ) ;
61341: LD_ADDR_VAR 0 2
61345: PUSH
61346: LD_OWVAR 2
61350: PPUSH
61351: LD_VAR 0 1
61355: PPUSH
61356: CALL_OW 292
61360: ST_TO_ADDR
// end ;
61361: LD_VAR 0 2
61365: RET
// export function ReverseDir ( unit ) ; begin
61366: LD_INT 0
61368: PPUSH
// if not unit then
61369: LD_VAR 0 1
61373: NOT
61374: IFFALSE 61378
// exit ;
61376: GO 61401
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61378: LD_ADDR_VAR 0 2
61382: PUSH
61383: LD_VAR 0 1
61387: PPUSH
61388: CALL_OW 254
61392: PUSH
61393: LD_INT 3
61395: PLUS
61396: PUSH
61397: LD_INT 6
61399: MOD
61400: ST_TO_ADDR
// end ;
61401: LD_VAR 0 2
61405: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61406: LD_INT 0
61408: PPUSH
61409: PPUSH
61410: PPUSH
61411: PPUSH
61412: PPUSH
// if not hexes then
61413: LD_VAR 0 2
61417: NOT
61418: IFFALSE 61422
// exit ;
61420: GO 61570
// dist := 9999 ;
61422: LD_ADDR_VAR 0 5
61426: PUSH
61427: LD_INT 9999
61429: ST_TO_ADDR
// for i = 1 to hexes do
61430: LD_ADDR_VAR 0 4
61434: PUSH
61435: DOUBLE
61436: LD_INT 1
61438: DEC
61439: ST_TO_ADDR
61440: LD_VAR 0 2
61444: PUSH
61445: FOR_TO
61446: IFFALSE 61558
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61448: LD_VAR 0 1
61452: PPUSH
61453: LD_VAR 0 2
61457: PUSH
61458: LD_VAR 0 4
61462: ARRAY
61463: PUSH
61464: LD_INT 1
61466: ARRAY
61467: PPUSH
61468: LD_VAR 0 2
61472: PUSH
61473: LD_VAR 0 4
61477: ARRAY
61478: PUSH
61479: LD_INT 2
61481: ARRAY
61482: PPUSH
61483: CALL_OW 297
61487: PUSH
61488: LD_VAR 0 5
61492: LESS
61493: IFFALSE 61556
// begin hex := hexes [ i ] ;
61495: LD_ADDR_VAR 0 7
61499: PUSH
61500: LD_VAR 0 2
61504: PUSH
61505: LD_VAR 0 4
61509: ARRAY
61510: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61511: LD_ADDR_VAR 0 5
61515: PUSH
61516: LD_VAR 0 1
61520: PPUSH
61521: LD_VAR 0 2
61525: PUSH
61526: LD_VAR 0 4
61530: ARRAY
61531: PUSH
61532: LD_INT 1
61534: ARRAY
61535: PPUSH
61536: LD_VAR 0 2
61540: PUSH
61541: LD_VAR 0 4
61545: ARRAY
61546: PUSH
61547: LD_INT 2
61549: ARRAY
61550: PPUSH
61551: CALL_OW 297
61555: ST_TO_ADDR
// end ; end ;
61556: GO 61445
61558: POP
61559: POP
// result := hex ;
61560: LD_ADDR_VAR 0 3
61564: PUSH
61565: LD_VAR 0 7
61569: ST_TO_ADDR
// end ;
61570: LD_VAR 0 3
61574: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61575: LD_INT 0
61577: PPUSH
61578: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61579: LD_VAR 0 1
61583: NOT
61584: PUSH
61585: LD_VAR 0 1
61589: PUSH
61590: LD_INT 21
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 23
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PPUSH
61614: CALL_OW 69
61618: IN
61619: NOT
61620: OR
61621: IFFALSE 61625
// exit ;
61623: GO 61672
// for i = 1 to 3 do
61625: LD_ADDR_VAR 0 3
61629: PUSH
61630: DOUBLE
61631: LD_INT 1
61633: DEC
61634: ST_TO_ADDR
61635: LD_INT 3
61637: PUSH
61638: FOR_TO
61639: IFFALSE 61670
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 250
61650: PPUSH
61651: LD_VAR 0 1
61655: PPUSH
61656: CALL_OW 251
61660: PPUSH
61661: LD_INT 1
61663: PPUSH
61664: CALL_OW 453
61668: GO 61638
61670: POP
61671: POP
// end ;
61672: LD_VAR 0 2
61676: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61677: LD_INT 0
61679: PPUSH
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
61684: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61685: LD_VAR 0 1
61689: NOT
61690: PUSH
61691: LD_VAR 0 2
61695: NOT
61696: OR
61697: PUSH
61698: LD_VAR 0 1
61702: PPUSH
61703: CALL_OW 314
61707: OR
61708: IFFALSE 61712
// exit ;
61710: GO 62153
// x := GetX ( enemy_unit ) ;
61712: LD_ADDR_VAR 0 7
61716: PUSH
61717: LD_VAR 0 2
61721: PPUSH
61722: CALL_OW 250
61726: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61727: LD_ADDR_VAR 0 8
61731: PUSH
61732: LD_VAR 0 2
61736: PPUSH
61737: CALL_OW 251
61741: ST_TO_ADDR
// if not x or not y then
61742: LD_VAR 0 7
61746: NOT
61747: PUSH
61748: LD_VAR 0 8
61752: NOT
61753: OR
61754: IFFALSE 61758
// exit ;
61756: GO 62153
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61758: LD_ADDR_VAR 0 6
61762: PUSH
61763: LD_VAR 0 7
61767: PPUSH
61768: LD_INT 0
61770: PPUSH
61771: LD_INT 4
61773: PPUSH
61774: CALL_OW 272
61778: PUSH
61779: LD_VAR 0 8
61783: PPUSH
61784: LD_INT 0
61786: PPUSH
61787: LD_INT 4
61789: PPUSH
61790: CALL_OW 273
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_VAR 0 7
61803: PPUSH
61804: LD_INT 1
61806: PPUSH
61807: LD_INT 4
61809: PPUSH
61810: CALL_OW 272
61814: PUSH
61815: LD_VAR 0 8
61819: PPUSH
61820: LD_INT 1
61822: PPUSH
61823: LD_INT 4
61825: PPUSH
61826: CALL_OW 273
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_VAR 0 7
61839: PPUSH
61840: LD_INT 2
61842: PPUSH
61843: LD_INT 4
61845: PPUSH
61846: CALL_OW 272
61850: PUSH
61851: LD_VAR 0 8
61855: PPUSH
61856: LD_INT 2
61858: PPUSH
61859: LD_INT 4
61861: PPUSH
61862: CALL_OW 273
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_VAR 0 7
61875: PPUSH
61876: LD_INT 3
61878: PPUSH
61879: LD_INT 4
61881: PPUSH
61882: CALL_OW 272
61886: PUSH
61887: LD_VAR 0 8
61891: PPUSH
61892: LD_INT 3
61894: PPUSH
61895: LD_INT 4
61897: PPUSH
61898: CALL_OW 273
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_VAR 0 7
61911: PPUSH
61912: LD_INT 4
61914: PPUSH
61915: LD_INT 4
61917: PPUSH
61918: CALL_OW 272
61922: PUSH
61923: LD_VAR 0 8
61927: PPUSH
61928: LD_INT 4
61930: PPUSH
61931: LD_INT 4
61933: PPUSH
61934: CALL_OW 273
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_VAR 0 7
61947: PPUSH
61948: LD_INT 5
61950: PPUSH
61951: LD_INT 4
61953: PPUSH
61954: CALL_OW 272
61958: PUSH
61959: LD_VAR 0 8
61963: PPUSH
61964: LD_INT 5
61966: PPUSH
61967: LD_INT 4
61969: PPUSH
61970: CALL_OW 273
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: ST_TO_ADDR
// for i = tmp downto 1 do
61987: LD_ADDR_VAR 0 4
61991: PUSH
61992: DOUBLE
61993: LD_VAR 0 6
61997: INC
61998: ST_TO_ADDR
61999: LD_INT 1
62001: PUSH
62002: FOR_DOWNTO
62003: IFFALSE 62104
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62005: LD_VAR 0 6
62009: PUSH
62010: LD_VAR 0 4
62014: ARRAY
62015: PUSH
62016: LD_INT 1
62018: ARRAY
62019: PPUSH
62020: LD_VAR 0 6
62024: PUSH
62025: LD_VAR 0 4
62029: ARRAY
62030: PUSH
62031: LD_INT 2
62033: ARRAY
62034: PPUSH
62035: CALL_OW 488
62039: NOT
62040: PUSH
62041: LD_VAR 0 6
62045: PUSH
62046: LD_VAR 0 4
62050: ARRAY
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PPUSH
62056: LD_VAR 0 6
62060: PUSH
62061: LD_VAR 0 4
62065: ARRAY
62066: PUSH
62067: LD_INT 2
62069: ARRAY
62070: PPUSH
62071: CALL_OW 428
62075: PUSH
62076: LD_INT 0
62078: NONEQUAL
62079: OR
62080: IFFALSE 62102
// tmp := Delete ( tmp , i ) ;
62082: LD_ADDR_VAR 0 6
62086: PUSH
62087: LD_VAR 0 6
62091: PPUSH
62092: LD_VAR 0 4
62096: PPUSH
62097: CALL_OW 3
62101: ST_TO_ADDR
62102: GO 62002
62104: POP
62105: POP
// j := GetClosestHex ( unit , tmp ) ;
62106: LD_ADDR_VAR 0 5
62110: PUSH
62111: LD_VAR 0 1
62115: PPUSH
62116: LD_VAR 0 6
62120: PPUSH
62121: CALL 61406 0 2
62125: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62126: LD_VAR 0 1
62130: PPUSH
62131: LD_VAR 0 5
62135: PUSH
62136: LD_INT 1
62138: ARRAY
62139: PPUSH
62140: LD_VAR 0 5
62144: PUSH
62145: LD_INT 2
62147: ARRAY
62148: PPUSH
62149: CALL_OW 111
// end ;
62153: LD_VAR 0 3
62157: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62158: LD_INT 0
62160: PPUSH
62161: PPUSH
62162: PPUSH
// uc_side = 0 ;
62163: LD_ADDR_OWVAR 20
62167: PUSH
62168: LD_INT 0
62170: ST_TO_ADDR
// uc_nation = 0 ;
62171: LD_ADDR_OWVAR 21
62175: PUSH
62176: LD_INT 0
62178: ST_TO_ADDR
// InitHc ;
62179: CALL_OW 19
// InitVc ;
62183: CALL_OW 20
// if mastodonts then
62187: LD_VAR 0 6
62191: IFFALSE 62258
// for i = 1 to mastodonts do
62193: LD_ADDR_VAR 0 11
62197: PUSH
62198: DOUBLE
62199: LD_INT 1
62201: DEC
62202: ST_TO_ADDR
62203: LD_VAR 0 6
62207: PUSH
62208: FOR_TO
62209: IFFALSE 62256
// begin vc_chassis := 31 ;
62211: LD_ADDR_OWVAR 37
62215: PUSH
62216: LD_INT 31
62218: ST_TO_ADDR
// vc_control := control_rider ;
62219: LD_ADDR_OWVAR 38
62223: PUSH
62224: LD_INT 4
62226: ST_TO_ADDR
// animal := CreateVehicle ;
62227: LD_ADDR_VAR 0 12
62231: PUSH
62232: CALL_OW 45
62236: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62237: LD_VAR 0 12
62241: PPUSH
62242: LD_VAR 0 8
62246: PPUSH
62247: LD_INT 0
62249: PPUSH
62250: CALL 64327 0 3
// end ;
62254: GO 62208
62256: POP
62257: POP
// if horses then
62258: LD_VAR 0 5
62262: IFFALSE 62329
// for i = 1 to horses do
62264: LD_ADDR_VAR 0 11
62268: PUSH
62269: DOUBLE
62270: LD_INT 1
62272: DEC
62273: ST_TO_ADDR
62274: LD_VAR 0 5
62278: PUSH
62279: FOR_TO
62280: IFFALSE 62327
// begin hc_class := 21 ;
62282: LD_ADDR_OWVAR 28
62286: PUSH
62287: LD_INT 21
62289: ST_TO_ADDR
// hc_gallery :=  ;
62290: LD_ADDR_OWVAR 33
62294: PUSH
62295: LD_STRING 
62297: ST_TO_ADDR
// animal := CreateHuman ;
62298: LD_ADDR_VAR 0 12
62302: PUSH
62303: CALL_OW 44
62307: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62308: LD_VAR 0 12
62312: PPUSH
62313: LD_VAR 0 8
62317: PPUSH
62318: LD_INT 0
62320: PPUSH
62321: CALL 64327 0 3
// end ;
62325: GO 62279
62327: POP
62328: POP
// if birds then
62329: LD_VAR 0 1
62333: IFFALSE 62400
// for i = 1 to birds do
62335: LD_ADDR_VAR 0 11
62339: PUSH
62340: DOUBLE
62341: LD_INT 1
62343: DEC
62344: ST_TO_ADDR
62345: LD_VAR 0 1
62349: PUSH
62350: FOR_TO
62351: IFFALSE 62398
// begin hc_class = 18 ;
62353: LD_ADDR_OWVAR 28
62357: PUSH
62358: LD_INT 18
62360: ST_TO_ADDR
// hc_gallery =  ;
62361: LD_ADDR_OWVAR 33
62365: PUSH
62366: LD_STRING 
62368: ST_TO_ADDR
// animal := CreateHuman ;
62369: LD_ADDR_VAR 0 12
62373: PUSH
62374: CALL_OW 44
62378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62379: LD_VAR 0 12
62383: PPUSH
62384: LD_VAR 0 8
62388: PPUSH
62389: LD_INT 0
62391: PPUSH
62392: CALL 64327 0 3
// end ;
62396: GO 62350
62398: POP
62399: POP
// if tigers then
62400: LD_VAR 0 2
62404: IFFALSE 62488
// for i = 1 to tigers do
62406: LD_ADDR_VAR 0 11
62410: PUSH
62411: DOUBLE
62412: LD_INT 1
62414: DEC
62415: ST_TO_ADDR
62416: LD_VAR 0 2
62420: PUSH
62421: FOR_TO
62422: IFFALSE 62486
// begin hc_class = class_tiger ;
62424: LD_ADDR_OWVAR 28
62428: PUSH
62429: LD_INT 14
62431: ST_TO_ADDR
// hc_gallery =  ;
62432: LD_ADDR_OWVAR 33
62436: PUSH
62437: LD_STRING 
62439: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62440: LD_ADDR_OWVAR 35
62444: PUSH
62445: LD_INT 7
62447: NEG
62448: PPUSH
62449: LD_INT 7
62451: PPUSH
62452: CALL_OW 12
62456: ST_TO_ADDR
// animal := CreateHuman ;
62457: LD_ADDR_VAR 0 12
62461: PUSH
62462: CALL_OW 44
62466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62467: LD_VAR 0 12
62471: PPUSH
62472: LD_VAR 0 8
62476: PPUSH
62477: LD_INT 0
62479: PPUSH
62480: CALL 64327 0 3
// end ;
62484: GO 62421
62486: POP
62487: POP
// if apemans then
62488: LD_VAR 0 3
62492: IFFALSE 62615
// for i = 1 to apemans do
62494: LD_ADDR_VAR 0 11
62498: PUSH
62499: DOUBLE
62500: LD_INT 1
62502: DEC
62503: ST_TO_ADDR
62504: LD_VAR 0 3
62508: PUSH
62509: FOR_TO
62510: IFFALSE 62613
// begin hc_class = class_apeman ;
62512: LD_ADDR_OWVAR 28
62516: PUSH
62517: LD_INT 12
62519: ST_TO_ADDR
// hc_gallery =  ;
62520: LD_ADDR_OWVAR 33
62524: PUSH
62525: LD_STRING 
62527: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62528: LD_ADDR_OWVAR 35
62532: PUSH
62533: LD_INT 5
62535: NEG
62536: PPUSH
62537: LD_INT 5
62539: PPUSH
62540: CALL_OW 12
62544: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62545: LD_ADDR_OWVAR 31
62549: PUSH
62550: LD_INT 1
62552: PPUSH
62553: LD_INT 3
62555: PPUSH
62556: CALL_OW 12
62560: PUSH
62561: LD_INT 1
62563: PPUSH
62564: LD_INT 3
62566: PPUSH
62567: CALL_OW 12
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// animal := CreateHuman ;
62584: LD_ADDR_VAR 0 12
62588: PUSH
62589: CALL_OW 44
62593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62594: LD_VAR 0 12
62598: PPUSH
62599: LD_VAR 0 8
62603: PPUSH
62604: LD_INT 0
62606: PPUSH
62607: CALL 64327 0 3
// end ;
62611: GO 62509
62613: POP
62614: POP
// if enchidnas then
62615: LD_VAR 0 4
62619: IFFALSE 62686
// for i = 1 to enchidnas do
62621: LD_ADDR_VAR 0 11
62625: PUSH
62626: DOUBLE
62627: LD_INT 1
62629: DEC
62630: ST_TO_ADDR
62631: LD_VAR 0 4
62635: PUSH
62636: FOR_TO
62637: IFFALSE 62684
// begin hc_class = 13 ;
62639: LD_ADDR_OWVAR 28
62643: PUSH
62644: LD_INT 13
62646: ST_TO_ADDR
// hc_gallery =  ;
62647: LD_ADDR_OWVAR 33
62651: PUSH
62652: LD_STRING 
62654: ST_TO_ADDR
// animal := CreateHuman ;
62655: LD_ADDR_VAR 0 12
62659: PUSH
62660: CALL_OW 44
62664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62665: LD_VAR 0 12
62669: PPUSH
62670: LD_VAR 0 8
62674: PPUSH
62675: LD_INT 0
62677: PPUSH
62678: CALL 64327 0 3
// end ;
62682: GO 62636
62684: POP
62685: POP
// if fishes then
62686: LD_VAR 0 7
62690: IFFALSE 62757
// for i = 1 to fishes do
62692: LD_ADDR_VAR 0 11
62696: PUSH
62697: DOUBLE
62698: LD_INT 1
62700: DEC
62701: ST_TO_ADDR
62702: LD_VAR 0 7
62706: PUSH
62707: FOR_TO
62708: IFFALSE 62755
// begin hc_class = 20 ;
62710: LD_ADDR_OWVAR 28
62714: PUSH
62715: LD_INT 20
62717: ST_TO_ADDR
// hc_gallery =  ;
62718: LD_ADDR_OWVAR 33
62722: PUSH
62723: LD_STRING 
62725: ST_TO_ADDR
// animal := CreateHuman ;
62726: LD_ADDR_VAR 0 12
62730: PUSH
62731: CALL_OW 44
62735: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62736: LD_VAR 0 12
62740: PPUSH
62741: LD_VAR 0 9
62745: PPUSH
62746: LD_INT 0
62748: PPUSH
62749: CALL 64327 0 3
// end ;
62753: GO 62707
62755: POP
62756: POP
// end ;
62757: LD_VAR 0 10
62761: RET
// export function WantHeal ( sci , unit ) ; begin
62762: LD_INT 0
62764: PPUSH
// if GetTaskList ( sci ) > 0 then
62765: LD_VAR 0 1
62769: PPUSH
62770: CALL_OW 437
62774: PUSH
62775: LD_INT 0
62777: GREATER
62778: IFFALSE 62848
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 437
62789: PUSH
62790: LD_INT 1
62792: ARRAY
62793: PUSH
62794: LD_INT 1
62796: ARRAY
62797: PUSH
62798: LD_STRING l
62800: EQUAL
62801: PUSH
62802: LD_VAR 0 1
62806: PPUSH
62807: CALL_OW 437
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_INT 4
62818: ARRAY
62819: PUSH
62820: LD_VAR 0 2
62824: EQUAL
62825: AND
62826: IFFALSE 62838
// result := true else
62828: LD_ADDR_VAR 0 3
62832: PUSH
62833: LD_INT 1
62835: ST_TO_ADDR
62836: GO 62846
// result := false ;
62838: LD_ADDR_VAR 0 3
62842: PUSH
62843: LD_INT 0
62845: ST_TO_ADDR
// end else
62846: GO 62856
// result := false ;
62848: LD_ADDR_VAR 0 3
62852: PUSH
62853: LD_INT 0
62855: ST_TO_ADDR
// end ;
62856: LD_VAR 0 3
62860: RET
// export function HealTarget ( sci ) ; begin
62861: LD_INT 0
62863: PPUSH
// if not sci then
62864: LD_VAR 0 1
62868: NOT
62869: IFFALSE 62873
// exit ;
62871: GO 62938
// result := 0 ;
62873: LD_ADDR_VAR 0 2
62877: PUSH
62878: LD_INT 0
62880: ST_TO_ADDR
// if GetTaskList ( sci ) then
62881: LD_VAR 0 1
62885: PPUSH
62886: CALL_OW 437
62890: IFFALSE 62938
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62892: LD_VAR 0 1
62896: PPUSH
62897: CALL_OW 437
62901: PUSH
62902: LD_INT 1
62904: ARRAY
62905: PUSH
62906: LD_INT 1
62908: ARRAY
62909: PUSH
62910: LD_STRING l
62912: EQUAL
62913: IFFALSE 62938
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62915: LD_ADDR_VAR 0 2
62919: PUSH
62920: LD_VAR 0 1
62924: PPUSH
62925: CALL_OW 437
62929: PUSH
62930: LD_INT 1
62932: ARRAY
62933: PUSH
62934: LD_INT 4
62936: ARRAY
62937: ST_TO_ADDR
// end ;
62938: LD_VAR 0 2
62942: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62943: LD_INT 0
62945: PPUSH
62946: PPUSH
62947: PPUSH
62948: PPUSH
// if not base_units then
62949: LD_VAR 0 1
62953: NOT
62954: IFFALSE 62958
// exit ;
62956: GO 63045
// result := false ;
62958: LD_ADDR_VAR 0 2
62962: PUSH
62963: LD_INT 0
62965: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62966: LD_ADDR_VAR 0 5
62970: PUSH
62971: LD_VAR 0 1
62975: PPUSH
62976: LD_INT 21
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PPUSH
62986: CALL_OW 72
62990: ST_TO_ADDR
// if not tmp then
62991: LD_VAR 0 5
62995: NOT
62996: IFFALSE 63000
// exit ;
62998: GO 63045
// for i in tmp do
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: LD_VAR 0 5
63009: PUSH
63010: FOR_IN
63011: IFFALSE 63043
// begin result := EnemyInRange ( i , 22 ) ;
63013: LD_ADDR_VAR 0 2
63017: PUSH
63018: LD_VAR 0 3
63022: PPUSH
63023: LD_INT 22
63025: PPUSH
63026: CALL 61281 0 2
63030: ST_TO_ADDR
// if result then
63031: LD_VAR 0 2
63035: IFFALSE 63041
// exit ;
63037: POP
63038: POP
63039: GO 63045
// end ;
63041: GO 63010
63043: POP
63044: POP
// end ;
63045: LD_VAR 0 2
63049: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63050: LD_INT 0
63052: PPUSH
63053: PPUSH
// if not units then
63054: LD_VAR 0 1
63058: NOT
63059: IFFALSE 63063
// exit ;
63061: GO 63133
// result := [ ] ;
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: EMPTY
63069: ST_TO_ADDR
// for i in units do
63070: LD_ADDR_VAR 0 4
63074: PUSH
63075: LD_VAR 0 1
63079: PUSH
63080: FOR_IN
63081: IFFALSE 63131
// if GetTag ( i ) = tag then
63083: LD_VAR 0 4
63087: PPUSH
63088: CALL_OW 110
63092: PUSH
63093: LD_VAR 0 2
63097: EQUAL
63098: IFFALSE 63129
// result := Insert ( result , result + 1 , i ) ;
63100: LD_ADDR_VAR 0 3
63104: PUSH
63105: LD_VAR 0 3
63109: PPUSH
63110: LD_VAR 0 3
63114: PUSH
63115: LD_INT 1
63117: PLUS
63118: PPUSH
63119: LD_VAR 0 4
63123: PPUSH
63124: CALL_OW 2
63128: ST_TO_ADDR
63129: GO 63080
63131: POP
63132: POP
// end ;
63133: LD_VAR 0 3
63137: RET
// export function IsDriver ( un ) ; begin
63138: LD_INT 0
63140: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63141: LD_ADDR_VAR 0 2
63145: PUSH
63146: LD_VAR 0 1
63150: PUSH
63151: LD_INT 55
63153: PUSH
63154: EMPTY
63155: LIST
63156: PPUSH
63157: CALL_OW 69
63161: IN
63162: ST_TO_ADDR
// end ;
63163: LD_VAR 0 2
63167: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63168: LD_INT 0
63170: PPUSH
63171: PPUSH
// list := [ ] ;
63172: LD_ADDR_VAR 0 5
63176: PUSH
63177: EMPTY
63178: ST_TO_ADDR
// case d of 0 :
63179: LD_VAR 0 3
63183: PUSH
63184: LD_INT 0
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63192
63190: GO 63325
63192: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63193: LD_ADDR_VAR 0 5
63197: PUSH
63198: LD_VAR 0 1
63202: PUSH
63203: LD_INT 4
63205: MINUS
63206: PUSH
63207: LD_VAR 0 2
63211: PUSH
63212: LD_INT 4
63214: MINUS
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: PUSH
63224: LD_VAR 0 1
63228: PUSH
63229: LD_INT 3
63231: MINUS
63232: PUSH
63233: LD_VAR 0 2
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: PUSH
63246: LD_VAR 0 1
63250: PUSH
63251: LD_INT 4
63253: PLUS
63254: PUSH
63255: LD_VAR 0 2
63259: PUSH
63260: LD_INT 4
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: PUSH
63268: LD_VAR 0 1
63272: PUSH
63273: LD_INT 3
63275: PLUS
63276: PUSH
63277: LD_VAR 0 2
63281: PUSH
63282: LD_INT 3
63284: PLUS
63285: PUSH
63286: LD_INT 5
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: PUSH
63294: LD_VAR 0 1
63298: PUSH
63299: LD_VAR 0 2
63303: PUSH
63304: LD_INT 4
63306: PLUS
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: LIST
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// end ; 1 :
63323: GO 64023
63325: LD_INT 1
63327: DOUBLE
63328: EQUAL
63329: IFTRUE 63333
63331: GO 63466
63333: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63334: LD_ADDR_VAR 0 5
63338: PUSH
63339: LD_VAR 0 1
63343: PUSH
63344: LD_VAR 0 2
63348: PUSH
63349: LD_INT 4
63351: MINUS
63352: PUSH
63353: LD_INT 3
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: LD_INT 3
63368: MINUS
63369: PUSH
63370: LD_VAR 0 2
63374: PUSH
63375: LD_INT 3
63377: MINUS
63378: PUSH
63379: LD_INT 2
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: LIST
63386: PUSH
63387: LD_VAR 0 1
63391: PUSH
63392: LD_INT 4
63394: MINUS
63395: PUSH
63396: LD_VAR 0 2
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: PUSH
63409: LD_VAR 0 1
63413: PUSH
63414: LD_VAR 0 2
63418: PUSH
63419: LD_INT 3
63421: PLUS
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: LIST
63430: PUSH
63431: LD_VAR 0 1
63435: PUSH
63436: LD_INT 4
63438: PLUS
63439: PUSH
63440: LD_VAR 0 2
63444: PUSH
63445: LD_INT 4
63447: PLUS
63448: PUSH
63449: LD_INT 5
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: ST_TO_ADDR
// end ; 2 :
63464: GO 64023
63466: LD_INT 2
63468: DOUBLE
63469: EQUAL
63470: IFTRUE 63474
63472: GO 63603
63474: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63475: LD_ADDR_VAR 0 5
63479: PUSH
63480: LD_VAR 0 1
63484: PUSH
63485: LD_VAR 0 2
63489: PUSH
63490: LD_INT 3
63492: MINUS
63493: PUSH
63494: LD_INT 3
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: PUSH
63502: LD_VAR 0 1
63506: PUSH
63507: LD_INT 4
63509: PLUS
63510: PUSH
63511: LD_VAR 0 2
63515: PUSH
63516: LD_INT 4
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: PUSH
63524: LD_VAR 0 1
63528: PUSH
63529: LD_VAR 0 2
63533: PUSH
63534: LD_INT 4
63536: PLUS
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: PUSH
63546: LD_VAR 0 1
63550: PUSH
63551: LD_INT 3
63553: MINUS
63554: PUSH
63555: LD_VAR 0 2
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: PUSH
63568: LD_VAR 0 1
63572: PUSH
63573: LD_INT 4
63575: MINUS
63576: PUSH
63577: LD_VAR 0 2
63581: PUSH
63582: LD_INT 4
63584: MINUS
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: LIST
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: ST_TO_ADDR
// end ; 3 :
63601: GO 64023
63603: LD_INT 3
63605: DOUBLE
63606: EQUAL
63607: IFTRUE 63611
63609: GO 63744
63611: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63612: LD_ADDR_VAR 0 5
63616: PUSH
63617: LD_VAR 0 1
63621: PUSH
63622: LD_INT 3
63624: PLUS
63625: PUSH
63626: LD_VAR 0 2
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: PUSH
63639: LD_VAR 0 1
63643: PUSH
63644: LD_INT 4
63646: PLUS
63647: PUSH
63648: LD_VAR 0 2
63652: PUSH
63653: LD_INT 4
63655: PLUS
63656: PUSH
63657: LD_INT 5
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: LIST
63664: PUSH
63665: LD_VAR 0 1
63669: PUSH
63670: LD_INT 4
63672: MINUS
63673: PUSH
63674: LD_VAR 0 2
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: PUSH
63687: LD_VAR 0 1
63691: PUSH
63692: LD_VAR 0 2
63696: PUSH
63697: LD_INT 4
63699: MINUS
63700: PUSH
63701: LD_INT 3
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: LIST
63708: PUSH
63709: LD_VAR 0 1
63713: PUSH
63714: LD_INT 3
63716: MINUS
63717: PUSH
63718: LD_VAR 0 2
63722: PUSH
63723: LD_INT 3
63725: MINUS
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: ST_TO_ADDR
// end ; 4 :
63742: GO 64023
63744: LD_INT 4
63746: DOUBLE
63747: EQUAL
63748: IFTRUE 63752
63750: GO 63885
63752: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63753: LD_ADDR_VAR 0 5
63757: PUSH
63758: LD_VAR 0 1
63762: PUSH
63763: LD_VAR 0 2
63767: PUSH
63768: LD_INT 4
63770: PLUS
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: PUSH
63780: LD_VAR 0 1
63784: PUSH
63785: LD_INT 3
63787: PLUS
63788: PUSH
63789: LD_VAR 0 2
63793: PUSH
63794: LD_INT 3
63796: PLUS
63797: PUSH
63798: LD_INT 5
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: LIST
63805: PUSH
63806: LD_VAR 0 1
63810: PUSH
63811: LD_INT 4
63813: PLUS
63814: PUSH
63815: LD_VAR 0 2
63819: PUSH
63820: LD_INT 4
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: PUSH
63828: LD_VAR 0 1
63832: PUSH
63833: LD_VAR 0 2
63837: PUSH
63838: LD_INT 3
63840: MINUS
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: PUSH
63850: LD_VAR 0 1
63854: PUSH
63855: LD_INT 4
63857: MINUS
63858: PUSH
63859: LD_VAR 0 2
63863: PUSH
63864: LD_INT 4
63866: MINUS
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: ST_TO_ADDR
// end ; 5 :
63883: GO 64023
63885: LD_INT 5
63887: DOUBLE
63888: EQUAL
63889: IFTRUE 63893
63891: GO 64022
63893: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63894: LD_ADDR_VAR 0 5
63898: PUSH
63899: LD_VAR 0 1
63903: PUSH
63904: LD_INT 4
63906: MINUS
63907: PUSH
63908: LD_VAR 0 2
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: PUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_VAR 0 2
63930: PUSH
63931: LD_INT 4
63933: MINUS
63934: PUSH
63935: LD_INT 3
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: PUSH
63943: LD_VAR 0 1
63947: PUSH
63948: LD_INT 4
63950: PLUS
63951: PUSH
63952: LD_VAR 0 2
63956: PUSH
63957: LD_INT 4
63959: PLUS
63960: PUSH
63961: LD_INT 5
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: PUSH
63969: LD_VAR 0 1
63973: PUSH
63974: LD_INT 3
63976: PLUS
63977: PUSH
63978: LD_VAR 0 2
63982: PUSH
63983: LD_INT 4
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: PUSH
63991: LD_VAR 0 1
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: LD_INT 3
64003: PLUS
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: ST_TO_ADDR
// end ; end ;
64020: GO 64023
64022: POP
// result := list ;
64023: LD_ADDR_VAR 0 4
64027: PUSH
64028: LD_VAR 0 5
64032: ST_TO_ADDR
// end ;
64033: LD_VAR 0 4
64037: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64038: LD_INT 0
64040: PPUSH
64041: PPUSH
64042: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64043: LD_VAR 0 1
64047: NOT
64048: PUSH
64049: LD_VAR 0 2
64053: PUSH
64054: LD_INT 1
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: LD_INT 4
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: IN
64072: NOT
64073: OR
64074: IFFALSE 64078
// exit ;
64076: GO 64170
// tmp := [ ] ;
64078: LD_ADDR_VAR 0 5
64082: PUSH
64083: EMPTY
64084: ST_TO_ADDR
// for i in units do
64085: LD_ADDR_VAR 0 4
64089: PUSH
64090: LD_VAR 0 1
64094: PUSH
64095: FOR_IN
64096: IFFALSE 64139
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64098: LD_ADDR_VAR 0 5
64102: PUSH
64103: LD_VAR 0 5
64107: PPUSH
64108: LD_VAR 0 5
64112: PUSH
64113: LD_INT 1
64115: PLUS
64116: PPUSH
64117: LD_VAR 0 4
64121: PPUSH
64122: LD_VAR 0 2
64126: PPUSH
64127: CALL_OW 259
64131: PPUSH
64132: CALL_OW 2
64136: ST_TO_ADDR
64137: GO 64095
64139: POP
64140: POP
// if not tmp then
64141: LD_VAR 0 5
64145: NOT
64146: IFFALSE 64150
// exit ;
64148: GO 64170
// result := SortListByListDesc ( units , tmp ) ;
64150: LD_ADDR_VAR 0 3
64154: PUSH
64155: LD_VAR 0 1
64159: PPUSH
64160: LD_VAR 0 5
64164: PPUSH
64165: CALL_OW 77
64169: ST_TO_ADDR
// end ;
64170: LD_VAR 0 3
64174: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64175: LD_INT 0
64177: PPUSH
64178: PPUSH
64179: PPUSH
// x := GetX ( building ) ;
64180: LD_ADDR_VAR 0 4
64184: PUSH
64185: LD_VAR 0 2
64189: PPUSH
64190: CALL_OW 250
64194: ST_TO_ADDR
// y := GetY ( building ) ;
64195: LD_ADDR_VAR 0 5
64199: PUSH
64200: LD_VAR 0 2
64204: PPUSH
64205: CALL_OW 251
64209: ST_TO_ADDR
// if GetTaskList ( unit ) then
64210: LD_VAR 0 1
64214: PPUSH
64215: CALL_OW 437
64219: IFFALSE 64314
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64221: LD_STRING e
64223: PUSH
64224: LD_VAR 0 1
64228: PPUSH
64229: CALL_OW 437
64233: PUSH
64234: LD_INT 1
64236: ARRAY
64237: PUSH
64238: LD_INT 1
64240: ARRAY
64241: EQUAL
64242: PUSH
64243: LD_VAR 0 4
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 437
64257: PUSH
64258: LD_INT 1
64260: ARRAY
64261: PUSH
64262: LD_INT 2
64264: ARRAY
64265: EQUAL
64266: AND
64267: PUSH
64268: LD_VAR 0 5
64272: PUSH
64273: LD_VAR 0 1
64277: PPUSH
64278: CALL_OW 437
64282: PUSH
64283: LD_INT 1
64285: ARRAY
64286: PUSH
64287: LD_INT 3
64289: ARRAY
64290: EQUAL
64291: AND
64292: IFFALSE 64304
// result := true else
64294: LD_ADDR_VAR 0 3
64298: PUSH
64299: LD_INT 1
64301: ST_TO_ADDR
64302: GO 64312
// result := false ;
64304: LD_ADDR_VAR 0 3
64308: PUSH
64309: LD_INT 0
64311: ST_TO_ADDR
// end else
64312: GO 64322
// result := false ;
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_INT 0
64321: ST_TO_ADDR
// end ;
64322: LD_VAR 0 3
64326: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64327: LD_INT 0
64329: PPUSH
64330: PPUSH
64331: PPUSH
64332: PPUSH
// if not unit or not area then
64333: LD_VAR 0 1
64337: NOT
64338: PUSH
64339: LD_VAR 0 2
64343: NOT
64344: OR
64345: IFFALSE 64349
// exit ;
64347: GO 64513
// tmp := AreaToList ( area , i ) ;
64349: LD_ADDR_VAR 0 6
64353: PUSH
64354: LD_VAR 0 2
64358: PPUSH
64359: LD_VAR 0 5
64363: PPUSH
64364: CALL_OW 517
64368: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64369: LD_ADDR_VAR 0 5
64373: PUSH
64374: DOUBLE
64375: LD_INT 1
64377: DEC
64378: ST_TO_ADDR
64379: LD_VAR 0 6
64383: PUSH
64384: LD_INT 1
64386: ARRAY
64387: PUSH
64388: FOR_TO
64389: IFFALSE 64511
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64391: LD_ADDR_VAR 0 7
64395: PUSH
64396: LD_VAR 0 6
64400: PUSH
64401: LD_INT 1
64403: ARRAY
64404: PUSH
64405: LD_VAR 0 5
64409: ARRAY
64410: PUSH
64411: LD_VAR 0 6
64415: PUSH
64416: LD_INT 2
64418: ARRAY
64419: PUSH
64420: LD_VAR 0 5
64424: ARRAY
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64430: LD_VAR 0 7
64434: PUSH
64435: LD_INT 1
64437: ARRAY
64438: PPUSH
64439: LD_VAR 0 7
64443: PUSH
64444: LD_INT 2
64446: ARRAY
64447: PPUSH
64448: CALL_OW 428
64452: PUSH
64453: LD_INT 0
64455: EQUAL
64456: IFFALSE 64509
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64458: LD_VAR 0 1
64462: PPUSH
64463: LD_VAR 0 7
64467: PUSH
64468: LD_INT 1
64470: ARRAY
64471: PPUSH
64472: LD_VAR 0 7
64476: PUSH
64477: LD_INT 2
64479: ARRAY
64480: PPUSH
64481: LD_VAR 0 3
64485: PPUSH
64486: CALL_OW 48
// result := IsPlaced ( unit ) ;
64490: LD_ADDR_VAR 0 4
64494: PUSH
64495: LD_VAR 0 1
64499: PPUSH
64500: CALL_OW 305
64504: ST_TO_ADDR
// exit ;
64505: POP
64506: POP
64507: GO 64513
// end ; end ;
64509: GO 64388
64511: POP
64512: POP
// end ;
64513: LD_VAR 0 4
64517: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64518: LD_INT 0
64520: PPUSH
64521: PPUSH
64522: PPUSH
// if not side or side > 8 then
64523: LD_VAR 0 1
64527: NOT
64528: PUSH
64529: LD_VAR 0 1
64533: PUSH
64534: LD_INT 8
64536: GREATER
64537: OR
64538: IFFALSE 64542
// exit ;
64540: GO 64729
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64542: LD_ADDR_VAR 0 4
64546: PUSH
64547: LD_INT 22
64549: PUSH
64550: LD_VAR 0 1
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 21
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PPUSH
64573: CALL_OW 69
64577: ST_TO_ADDR
// if not tmp then
64578: LD_VAR 0 4
64582: NOT
64583: IFFALSE 64587
// exit ;
64585: GO 64729
// enable_addtolog := true ;
64587: LD_ADDR_OWVAR 81
64591: PUSH
64592: LD_INT 1
64594: ST_TO_ADDR
// AddToLog ( [ ) ;
64595: LD_STRING [
64597: PPUSH
64598: CALL_OW 561
// for i in tmp do
64602: LD_ADDR_VAR 0 3
64606: PUSH
64607: LD_VAR 0 4
64611: PUSH
64612: FOR_IN
64613: IFFALSE 64720
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64615: LD_STRING [
64617: PUSH
64618: LD_VAR 0 3
64622: PPUSH
64623: CALL_OW 266
64627: STR
64628: PUSH
64629: LD_STRING , 
64631: STR
64632: PUSH
64633: LD_VAR 0 3
64637: PPUSH
64638: CALL_OW 250
64642: STR
64643: PUSH
64644: LD_STRING , 
64646: STR
64647: PUSH
64648: LD_VAR 0 3
64652: PPUSH
64653: CALL_OW 251
64657: STR
64658: PUSH
64659: LD_STRING , 
64661: STR
64662: PUSH
64663: LD_VAR 0 3
64667: PPUSH
64668: CALL_OW 254
64672: STR
64673: PUSH
64674: LD_STRING , 
64676: STR
64677: PUSH
64678: LD_VAR 0 3
64682: PPUSH
64683: LD_INT 1
64685: PPUSH
64686: CALL_OW 268
64690: STR
64691: PUSH
64692: LD_STRING , 
64694: STR
64695: PUSH
64696: LD_VAR 0 3
64700: PPUSH
64701: LD_INT 2
64703: PPUSH
64704: CALL_OW 268
64708: STR
64709: PUSH
64710: LD_STRING ],
64712: STR
64713: PPUSH
64714: CALL_OW 561
// end ;
64718: GO 64612
64720: POP
64721: POP
// AddToLog ( ]; ) ;
64722: LD_STRING ];
64724: PPUSH
64725: CALL_OW 561
// end ;
64729: LD_VAR 0 2
64733: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64734: LD_INT 0
64736: PPUSH
64737: PPUSH
64738: PPUSH
64739: PPUSH
64740: PPUSH
// if not area or not rate or not max then
64741: LD_VAR 0 1
64745: NOT
64746: PUSH
64747: LD_VAR 0 2
64751: NOT
64752: OR
64753: PUSH
64754: LD_VAR 0 4
64758: NOT
64759: OR
64760: IFFALSE 64764
// exit ;
64762: GO 64956
// while 1 do
64764: LD_INT 1
64766: IFFALSE 64956
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64768: LD_ADDR_VAR 0 9
64772: PUSH
64773: LD_VAR 0 1
64777: PPUSH
64778: LD_INT 1
64780: PPUSH
64781: CALL_OW 287
64785: PUSH
64786: LD_INT 10
64788: MUL
64789: ST_TO_ADDR
// r := rate / 10 ;
64790: LD_ADDR_VAR 0 7
64794: PUSH
64795: LD_VAR 0 2
64799: PUSH
64800: LD_INT 10
64802: DIVREAL
64803: ST_TO_ADDR
// time := 1 1$00 ;
64804: LD_ADDR_VAR 0 8
64808: PUSH
64809: LD_INT 2100
64811: ST_TO_ADDR
// if amount < min then
64812: LD_VAR 0 9
64816: PUSH
64817: LD_VAR 0 3
64821: LESS
64822: IFFALSE 64840
// r := r * 2 else
64824: LD_ADDR_VAR 0 7
64828: PUSH
64829: LD_VAR 0 7
64833: PUSH
64834: LD_INT 2
64836: MUL
64837: ST_TO_ADDR
64838: GO 64866
// if amount > max then
64840: LD_VAR 0 9
64844: PUSH
64845: LD_VAR 0 4
64849: GREATER
64850: IFFALSE 64866
// r := r / 2 ;
64852: LD_ADDR_VAR 0 7
64856: PUSH
64857: LD_VAR 0 7
64861: PUSH
64862: LD_INT 2
64864: DIVREAL
64865: ST_TO_ADDR
// time := time / r ;
64866: LD_ADDR_VAR 0 8
64870: PUSH
64871: LD_VAR 0 8
64875: PUSH
64876: LD_VAR 0 7
64880: DIVREAL
64881: ST_TO_ADDR
// if time < 0 then
64882: LD_VAR 0 8
64886: PUSH
64887: LD_INT 0
64889: LESS
64890: IFFALSE 64907
// time := time * - 1 ;
64892: LD_ADDR_VAR 0 8
64896: PUSH
64897: LD_VAR 0 8
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: MUL
64906: ST_TO_ADDR
// wait ( time ) ;
64907: LD_VAR 0 8
64911: PPUSH
64912: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64916: LD_INT 35
64918: PPUSH
64919: LD_INT 875
64921: PPUSH
64922: CALL_OW 12
64926: PPUSH
64927: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64931: LD_INT 1
64933: PPUSH
64934: LD_INT 5
64936: PPUSH
64937: CALL_OW 12
64941: PPUSH
64942: LD_VAR 0 1
64946: PPUSH
64947: LD_INT 1
64949: PPUSH
64950: CALL_OW 55
// end ;
64954: GO 64764
// end ;
64956: LD_VAR 0 5
64960: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64961: LD_INT 0
64963: PPUSH
64964: PPUSH
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
// if not turrets or not factories then
64971: LD_VAR 0 1
64975: NOT
64976: PUSH
64977: LD_VAR 0 2
64981: NOT
64982: OR
64983: IFFALSE 64987
// exit ;
64985: GO 65294
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64987: LD_ADDR_VAR 0 10
64991: PUSH
64992: LD_INT 5
64994: PUSH
64995: LD_INT 6
64997: PUSH
64998: EMPTY
64999: LIST
65000: LIST
65001: PUSH
65002: LD_INT 2
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: LD_INT 5
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 24
65029: PUSH
65030: LD_INT 25
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 23
65039: PUSH
65040: LD_INT 27
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 42
65053: PUSH
65054: LD_INT 43
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 44
65063: PUSH
65064: LD_INT 46
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 45
65073: PUSH
65074: LD_INT 47
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: ST_TO_ADDR
// result := [ ] ;
65091: LD_ADDR_VAR 0 3
65095: PUSH
65096: EMPTY
65097: ST_TO_ADDR
// for i in turrets do
65098: LD_ADDR_VAR 0 4
65102: PUSH
65103: LD_VAR 0 1
65107: PUSH
65108: FOR_IN
65109: IFFALSE 65292
// begin nat := GetNation ( i ) ;
65111: LD_ADDR_VAR 0 7
65115: PUSH
65116: LD_VAR 0 4
65120: PPUSH
65121: CALL_OW 248
65125: ST_TO_ADDR
// weapon := 0 ;
65126: LD_ADDR_VAR 0 8
65130: PUSH
65131: LD_INT 0
65133: ST_TO_ADDR
// if not nat then
65134: LD_VAR 0 7
65138: NOT
65139: IFFALSE 65143
// continue ;
65141: GO 65108
// for j in list [ nat ] do
65143: LD_ADDR_VAR 0 5
65147: PUSH
65148: LD_VAR 0 10
65152: PUSH
65153: LD_VAR 0 7
65157: ARRAY
65158: PUSH
65159: FOR_IN
65160: IFFALSE 65201
// if GetBWeapon ( i ) = j [ 1 ] then
65162: LD_VAR 0 4
65166: PPUSH
65167: CALL_OW 269
65171: PUSH
65172: LD_VAR 0 5
65176: PUSH
65177: LD_INT 1
65179: ARRAY
65180: EQUAL
65181: IFFALSE 65199
// begin weapon := j [ 2 ] ;
65183: LD_ADDR_VAR 0 8
65187: PUSH
65188: LD_VAR 0 5
65192: PUSH
65193: LD_INT 2
65195: ARRAY
65196: ST_TO_ADDR
// break ;
65197: GO 65201
// end ;
65199: GO 65159
65201: POP
65202: POP
// if not weapon then
65203: LD_VAR 0 8
65207: NOT
65208: IFFALSE 65212
// continue ;
65210: GO 65108
// for k in factories do
65212: LD_ADDR_VAR 0 6
65216: PUSH
65217: LD_VAR 0 2
65221: PUSH
65222: FOR_IN
65223: IFFALSE 65288
// begin weapons := AvailableWeaponList ( k ) ;
65225: LD_ADDR_VAR 0 9
65229: PUSH
65230: LD_VAR 0 6
65234: PPUSH
65235: CALL_OW 478
65239: ST_TO_ADDR
// if not weapons then
65240: LD_VAR 0 9
65244: NOT
65245: IFFALSE 65249
// continue ;
65247: GO 65222
// if weapon in weapons then
65249: LD_VAR 0 8
65253: PUSH
65254: LD_VAR 0 9
65258: IN
65259: IFFALSE 65286
// begin result := [ i , weapon ] ;
65261: LD_ADDR_VAR 0 3
65265: PUSH
65266: LD_VAR 0 4
65270: PUSH
65271: LD_VAR 0 8
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: ST_TO_ADDR
// exit ;
65280: POP
65281: POP
65282: POP
65283: POP
65284: GO 65294
// end ; end ;
65286: GO 65222
65288: POP
65289: POP
// end ;
65290: GO 65108
65292: POP
65293: POP
// end ;
65294: LD_VAR 0 3
65298: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65299: LD_INT 0
65301: PPUSH
// if not side or side > 8 then
65302: LD_VAR 0 3
65306: NOT
65307: PUSH
65308: LD_VAR 0 3
65312: PUSH
65313: LD_INT 8
65315: GREATER
65316: OR
65317: IFFALSE 65321
// exit ;
65319: GO 65380
// if not range then
65321: LD_VAR 0 4
65325: NOT
65326: IFFALSE 65337
// range := - 12 ;
65328: LD_ADDR_VAR 0 4
65332: PUSH
65333: LD_INT 12
65335: NEG
65336: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65337: LD_VAR 0 1
65341: PPUSH
65342: LD_VAR 0 2
65346: PPUSH
65347: LD_VAR 0 3
65351: PPUSH
65352: LD_VAR 0 4
65356: PPUSH
65357: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65361: LD_VAR 0 1
65365: PPUSH
65366: LD_VAR 0 2
65370: PPUSH
65371: LD_VAR 0 3
65375: PPUSH
65376: CALL_OW 331
// end ;
65380: LD_VAR 0 5
65384: RET
// export function Video ( mode ) ; begin
65385: LD_INT 0
65387: PPUSH
// ingame_video = mode ;
65388: LD_ADDR_OWVAR 52
65392: PUSH
65393: LD_VAR 0 1
65397: ST_TO_ADDR
// interface_hidden = mode ;
65398: LD_ADDR_OWVAR 54
65402: PUSH
65403: LD_VAR 0 1
65407: ST_TO_ADDR
// end ;
65408: LD_VAR 0 2
65412: RET
// export function Join ( array , element ) ; begin
65413: LD_INT 0
65415: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65416: LD_ADDR_VAR 0 3
65420: PUSH
65421: LD_VAR 0 1
65425: PPUSH
65426: LD_VAR 0 1
65430: PUSH
65431: LD_INT 1
65433: PLUS
65434: PPUSH
65435: LD_VAR 0 2
65439: PPUSH
65440: CALL_OW 1
65444: ST_TO_ADDR
// end ;
65445: LD_VAR 0 3
65449: RET
// export function JoinUnion ( array , element ) ; begin
65450: LD_INT 0
65452: PPUSH
// result := array union element ;
65453: LD_ADDR_VAR 0 3
65457: PUSH
65458: LD_VAR 0 1
65462: PUSH
65463: LD_VAR 0 2
65467: UNION
65468: ST_TO_ADDR
// end ;
65469: LD_VAR 0 3
65473: RET
// export function GetBehemoths ( side ) ; begin
65474: LD_INT 0
65476: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65477: LD_ADDR_VAR 0 2
65481: PUSH
65482: LD_INT 22
65484: PUSH
65485: LD_VAR 0 1
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: LD_INT 31
65496: PUSH
65497: LD_INT 25
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PPUSH
65508: CALL_OW 69
65512: ST_TO_ADDR
// end ;
65513: LD_VAR 0 2
65517: RET
// export function Shuffle ( array ) ; var i , index ; begin
65518: LD_INT 0
65520: PPUSH
65521: PPUSH
65522: PPUSH
// result := [ ] ;
65523: LD_ADDR_VAR 0 2
65527: PUSH
65528: EMPTY
65529: ST_TO_ADDR
// if not array then
65530: LD_VAR 0 1
65534: NOT
65535: IFFALSE 65539
// exit ;
65537: GO 65638
// Randomize ;
65539: CALL_OW 10
// for i = array downto 1 do
65543: LD_ADDR_VAR 0 3
65547: PUSH
65548: DOUBLE
65549: LD_VAR 0 1
65553: INC
65554: ST_TO_ADDR
65555: LD_INT 1
65557: PUSH
65558: FOR_DOWNTO
65559: IFFALSE 65636
// begin index := rand ( 1 , array ) ;
65561: LD_ADDR_VAR 0 4
65565: PUSH
65566: LD_INT 1
65568: PPUSH
65569: LD_VAR 0 1
65573: PPUSH
65574: CALL_OW 12
65578: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65579: LD_ADDR_VAR 0 2
65583: PUSH
65584: LD_VAR 0 2
65588: PPUSH
65589: LD_VAR 0 2
65593: PUSH
65594: LD_INT 1
65596: PLUS
65597: PPUSH
65598: LD_VAR 0 1
65602: PUSH
65603: LD_VAR 0 4
65607: ARRAY
65608: PPUSH
65609: CALL_OW 2
65613: ST_TO_ADDR
// array := Delete ( array , index ) ;
65614: LD_ADDR_VAR 0 1
65618: PUSH
65619: LD_VAR 0 1
65623: PPUSH
65624: LD_VAR 0 4
65628: PPUSH
65629: CALL_OW 3
65633: ST_TO_ADDR
// end ;
65634: GO 65558
65636: POP
65637: POP
// end ;
65638: LD_VAR 0 2
65642: RET
// export function GetBaseMaterials ( base ) ; begin
65643: LD_INT 0
65645: PPUSH
// result := [ 0 , 0 , 0 ] ;
65646: LD_ADDR_VAR 0 2
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// if not base then
65665: LD_VAR 0 1
65669: NOT
65670: IFFALSE 65674
// exit ;
65672: GO 65723
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65674: LD_ADDR_VAR 0 2
65678: PUSH
65679: LD_VAR 0 1
65683: PPUSH
65684: LD_INT 1
65686: PPUSH
65687: CALL_OW 275
65691: PUSH
65692: LD_VAR 0 1
65696: PPUSH
65697: LD_INT 2
65699: PPUSH
65700: CALL_OW 275
65704: PUSH
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_INT 3
65712: PPUSH
65713: CALL_OW 275
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// end ;
65723: LD_VAR 0 2
65727: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65728: LD_INT 0
65730: PPUSH
65731: PPUSH
// result := array ;
65732: LD_ADDR_VAR 0 3
65736: PUSH
65737: LD_VAR 0 1
65741: ST_TO_ADDR
// if size > 0 then
65742: LD_VAR 0 2
65746: PUSH
65747: LD_INT 0
65749: GREATER
65750: IFFALSE 65796
// for i := array downto size do
65752: LD_ADDR_VAR 0 4
65756: PUSH
65757: DOUBLE
65758: LD_VAR 0 1
65762: INC
65763: ST_TO_ADDR
65764: LD_VAR 0 2
65768: PUSH
65769: FOR_DOWNTO
65770: IFFALSE 65794
// result := Delete ( result , result ) ;
65772: LD_ADDR_VAR 0 3
65776: PUSH
65777: LD_VAR 0 3
65781: PPUSH
65782: LD_VAR 0 3
65786: PPUSH
65787: CALL_OW 3
65791: ST_TO_ADDR
65792: GO 65769
65794: POP
65795: POP
// end ;
65796: LD_VAR 0 3
65800: RET
// export function ComExit ( unit ) ; var tmp ; begin
65801: LD_INT 0
65803: PPUSH
65804: PPUSH
// if not IsInUnit ( unit ) then
65805: LD_VAR 0 1
65809: PPUSH
65810: CALL_OW 310
65814: NOT
65815: IFFALSE 65819
// exit ;
65817: GO 65879
// tmp := IsInUnit ( unit ) ;
65819: LD_ADDR_VAR 0 3
65823: PUSH
65824: LD_VAR 0 1
65828: PPUSH
65829: CALL_OW 310
65833: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65834: LD_VAR 0 3
65838: PPUSH
65839: CALL_OW 247
65843: PUSH
65844: LD_INT 2
65846: EQUAL
65847: IFFALSE 65860
// ComExitVehicle ( unit ) else
65849: LD_VAR 0 1
65853: PPUSH
65854: CALL_OW 121
65858: GO 65869
// ComExitBuilding ( unit ) ;
65860: LD_VAR 0 1
65864: PPUSH
65865: CALL_OW 122
// result := tmp ;
65869: LD_ADDR_VAR 0 2
65873: PUSH
65874: LD_VAR 0 3
65878: ST_TO_ADDR
// end ;
65879: LD_VAR 0 2
65883: RET
// export function ResetHc ; begin
65884: LD_INT 0
65886: PPUSH
// InitHc ;
65887: CALL_OW 19
// hc_importance := 0 ;
65891: LD_ADDR_OWVAR 32
65895: PUSH
65896: LD_INT 0
65898: ST_TO_ADDR
// end ;
65899: LD_VAR 0 1
65903: RET
