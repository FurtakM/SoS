// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 41837 0 9
// if debug then
  43: LD_EXP 3
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2743 0 0
// PrepareRussians ;
  60: CALL 225 0 0
// MissionIntro ;
  64: CALL 5912 0 0
// end ;
  68: END
// export comArrayTmp ; export comArray ; export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 3
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 4
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 5
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 85
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 104: LD_ADDR_EXP 34
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: LD_INT 4
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: PUSH
 127: LD_OWVAR 67
 131: ARRAY
 132: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 133: LD_ADDR_EXP 88
 137: PUSH
 138: LD_INT 105000
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 63000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 162: LD_ADDR_EXP 89
 166: PUSH
 167: LD_INT 168000
 169: PUSH
 170: LD_INT 147000
 172: PUSH
 173: LD_INT 126000
 175: PUSH
 176: LD_INT 105000
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_OWVAR 67
 189: ARRAY
 190: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 191: LD_ADDR_EXP 42
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 4
 204: PUSH
 205: LD_INT 5
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_OWVAR 67
 218: ARRAY
 219: ST_TO_ADDR
// end ; end_of_file
 220: LD_VAR 0 1
 224: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot , kirovLab , kirovBarracks , kirovWorkshop ; export Grishko , Gaydar , Bukov , Scholtze , Scholtze2 ; export burlakTeam , kirovEngs ; export function PrepareRussians ; var un ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
// PrepareHeroes ;
 229: CALL 246 0 0
// PrepareBeriaBase ;
 233: CALL 949 0 0
// PrepareKirovBase ;
 237: CALL 1312 0 0
// end ;
 241: LD_VAR 0 1
 245: RET
// function PrepareHeroes ; var un ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
// uc_side := 6 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 6
 257: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 258: LD_ADDR_EXP 51
 262: PUSH
 263: LD_STRING 02_burlakTeam
 265: PPUSH
 266: CALL_OW 31
 270: ST_TO_ADDR
// uc_side := 3 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 3
 278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 279: LD_ADDR_EXP 43
 283: PUSH
 284: LD_STRING Burlak
 286: PPUSH
 287: LD_EXP 3
 291: NOT
 292: PPUSH
 293: LD_EXP 4
 297: PPUSH
 298: CALL 8366 0 3
 302: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 303: LD_ADDR_EXP 44
 307: PUSH
 308: LD_STRING Gnyevko
 310: PPUSH
 311: LD_EXP 3
 315: NOT
 316: PPUSH
 317: LD_EXP 4
 321: PPUSH
 322: CALL 8366 0 3
 326: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 327: LD_ADDR_EXP 46
 331: PUSH
 332: LD_STRING Kovalyuk
 334: PPUSH
 335: LD_EXP 3
 339: NOT
 340: PPUSH
 341: LD_EXP 4
 345: PPUSH
 346: CALL 8366 0 3
 350: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 351: LD_ADDR_EXP 45
 355: PUSH
 356: LD_STRING Kirilenkova
 358: PPUSH
 359: LD_EXP 3
 363: NOT
 364: PPUSH
 365: LD_EXP 4
 369: PPUSH
 370: CALL 8366 0 3
 374: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 375: LD_ADDR_EXP 47
 379: PUSH
 380: LD_STRING Belkov
 382: PPUSH
 383: LD_EXP 3
 387: NOT
 388: PPUSH
 389: LD_EXP 4
 393: PPUSH
 394: CALL 8366 0 3
 398: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 399: LD_ADDR_EXP 49
 403: PUSH
 404: LD_STRING Benko
 406: PPUSH
 407: LD_EXP 3
 411: NOT
 412: PPUSH
 413: LD_EXP 4
 417: PPUSH
 418: CALL 8366 0 3
 422: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 423: LD_ADDR_EXP 50
 427: PUSH
 428: LD_STRING Kuklajs
 430: PPUSH
 431: LD_EXP 3
 435: NOT
 436: PPUSH
 437: LD_EXP 4
 441: PPUSH
 442: CALL 8366 0 3
 446: ST_TO_ADDR
// uc_side := 6 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 6
 454: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 455: LD_ADDR_EXP 55
 459: PUSH
 460: LD_STRING Kurin
 462: PPUSH
 463: CALL_OW 25
 467: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 468: LD_ADDR_EXP 56
 472: PUSH
 473: LD_STRING Popov
 475: PPUSH
 476: CALL_OW 25
 480: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 481: LD_ADDR_EXP 64
 485: PUSH
 486: LD_STRING Grishko
 488: PPUSH
 489: CALL_OW 25
 493: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 494: LD_ADDR_EXP 65
 498: PUSH
 499: LD_STRING Gaydar
 501: PPUSH
 502: CALL_OW 25
 506: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 507: LD_ADDR_EXP 66
 511: PUSH
 512: LD_STRING Bukov
 514: PPUSH
 515: CALL_OW 25
 519: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 520: LD_EXP 43
 524: PUSH
 525: LD_EXP 44
 529: PUSH
 530: LD_EXP 46
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 547: LD_EXP 45
 551: PPUSH
 552: LD_INT 4
 554: PPUSH
 555: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 559: LD_EXP 55
 563: PPUSH
 564: LD_INT 153
 566: PPUSH
 567: LD_INT 103
 569: PPUSH
 570: LD_INT 0
 572: PPUSH
 573: CALL_OW 48
// AddComHold ( Kurin ) ;
 577: LD_EXP 55
 581: PPUSH
 582: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 586: LD_EXP 55
 590: PPUSH
 591: LD_INT 155
 593: PPUSH
 594: LD_INT 106
 596: PPUSH
 597: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 601: LD_EXP 56
 605: PPUSH
 606: LD_INT 131
 608: PPUSH
 609: LD_INT 49
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 48
// AddComHold ( Popov ) ;
 619: LD_EXP 56
 623: PPUSH
 624: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 628: LD_EXP 56
 632: PPUSH
 633: LD_INT 131
 635: PPUSH
 636: LD_INT 31
 638: PPUSH
 639: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 643: LD_EXP 65
 647: PPUSH
 648: LD_INT 91
 650: PPUSH
 651: LD_INT 15
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 48
// AddComHold ( Gaydar ) ;
 661: LD_EXP 65
 665: PPUSH
 666: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 670: LD_EXP 65
 674: PPUSH
 675: LD_INT 131
 677: PPUSH
 678: LD_INT 31
 680: PPUSH
 681: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 685: LD_EXP 66
 689: PPUSH
 690: LD_INT 86
 692: PPUSH
 693: LD_INT 17
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 48
// AddComHold ( Bukov ) ;
 703: LD_EXP 66
 707: PPUSH
 708: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 712: LD_EXP 66
 716: PPUSH
 717: LD_INT 94
 719: PPUSH
 720: LD_INT 32
 722: PPUSH
 723: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 727: LD_EXP 47
 731: PPUSH
 732: LD_INT 155
 734: PPUSH
 735: LD_INT 106
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// AddComHold ( Belkov ) ;
 745: LD_EXP 47
 749: PPUSH
 750: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 754: LD_EXP 47
 758: PPUSH
 759: LD_EXP 55
 763: PPUSH
 764: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 768: LD_EXP 43
 772: PPUSH
 773: LD_INT 154
 775: PPUSH
 776: LD_INT 106
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 48
// AddComHold ( Burlak ) ;
 786: LD_EXP 43
 790: PPUSH
 791: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 795: LD_EXP 43
 799: PPUSH
 800: LD_EXP 55
 804: PPUSH
 805: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 809: LD_ADDR_EXP 69
 813: PUSH
 814: LD_EXP 44
 818: PUSH
 819: LD_EXP 46
 823: PUSH
 824: LD_EXP 45
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// for un in otherBeriaUnits do
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_EXP 51
 843: PUSH
 844: FOR_IN
 845: IFFALSE 887
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 847: LD_VAR 0 2
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// AddComHold ( un ) ;
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 871: LD_VAR 0 2
 875: PPUSH
 876: LD_EXP 55
 880: PPUSH
 881: CALL_OW 179
// end ;
 885: GO 844
 887: POP
 888: POP
// for un in BurlakTeam do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: LD_EXP 69
 898: PUSH
 899: FOR_IN
 900: IFFALSE 942
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 902: LD_VAR 0 2
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// AddComHold ( un ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 926: LD_VAR 0 2
 930: PPUSH
 931: LD_EXP 55
 935: PPUSH
 936: CALL_OW 179
// end ;
 940: GO 899
 942: POP
 943: POP
// end ;
 944: LD_VAR 0 1
 948: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 949: LD_INT 0
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 956: LD_ADDR_EXP 52
 960: PUSH
 961: LD_STRING 02_Beria
 963: PPUSH
 964: EMPTY
 965: PPUSH
 966: CALL_OW 30
 970: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 971: LD_ADDR_EXP 54
 975: PUSH
 976: LD_STRING 02_VehiclesCount
 978: PPUSH
 979: EMPTY
 980: PPUSH
 981: CALL_OW 30
 985: ST_TO_ADDR
// uc_side := 3 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// uc_nation := 3 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1002: LD_ADDR_OWVAR 37
1006: PUSH
1007: LD_INT 21
1009: ST_TO_ADDR
// vc_control = control_manual ;
1010: LD_ADDR_OWVAR 38
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// vc_engine = engine_combustion ;
1018: LD_ADDR_OWVAR 39
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1026: LD_ADDR_OWVAR 40
1030: PUSH
1031: LD_INT 42
1033: ST_TO_ADDR
// for i := 1 to beriaBase do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 52
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1173
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1052: LD_ADDR_OWVAR 42
1056: PUSH
1057: LD_EXP 52
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PUSH
1068: LD_INT 1
1070: ARRAY
1071: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1072: LD_ADDR_OWVAR 43
1076: PUSH
1077: LD_EXP 52
1081: PUSH
1082: LD_VAR 0 2
1086: ARRAY
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: ST_TO_ADDR
// if bc_type = b_lab then
1092: LD_OWVAR 42
1096: PUSH
1097: LD_INT 6
1099: EQUAL
1100: IFFALSE 1118
// begin bc_kind1 := b_lab_basic ;
1102: LD_ADDR_OWVAR 44
1106: PUSH
1107: LD_INT 9
1109: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1110: LD_ADDR_OWVAR 45
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1118: LD_EXP 52
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 3
1131: ARRAY
1132: PUSH
1133: LD_INT 46
1135: PLUS
1136: PPUSH
1137: LD_EXP 52
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 4
1150: ARRAY
1151: PPUSH
1152: LD_EXP 52
1156: PUSH
1157: LD_VAR 0 2
1161: ARRAY
1162: PUSH
1163: LD_INT 5
1165: ARRAY
1166: PPUSH
1167: CALL_OW 47
// end ;
1171: GO 1049
1173: POP
1174: POP
// for i := 1 to beriaVehs do
1175: LD_ADDR_VAR 0 2
1179: PUSH
1180: DOUBLE
1181: LD_INT 1
1183: DEC
1184: ST_TO_ADDR
1185: LD_EXP 54
1189: PUSH
1190: FOR_TO
1191: IFFALSE 1255
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_INT 20
1200: PUSH
1201: LD_INT 35
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_INT 4
1221: PPUSH
1222: CALL_OW 12
1226: ARRAY
1227: ST_TO_ADDR
// veh = CreateVehicle ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1238: LD_VAR 0 3
1242: PPUSH
1243: LD_INT 11
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end ;
1253: GO 1190
1255: POP
1256: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_INT 22
1264: PUSH
1265: LD_INT 3
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 30
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 1
1293: ARRAY
1294: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1295: LD_VAR 0 5
1299: PPUSH
1300: LD_STRING beria
1302: PPUSH
1303: CALL_OW 500
// end ;
1307: LD_VAR 0 1
1311: RET
// export function PrepareKirovBase ; var i , un , tmp , buildings , x , b , bonusResources ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1322: LD_ADDR_EXP 58
1326: PUSH
1327: LD_STRING 02_Kirov
1329: PPUSH
1330: EMPTY
1331: PPUSH
1332: CALL_OW 30
1336: ST_TO_ADDR
// uc_side := 6 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 6
1344: ST_TO_ADDR
// uc_nation := 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1353: LD_ADDR_EXP 57
1357: PUSH
1358: LD_STRING 02_kirovTeam
1360: PPUSH
1361: CALL_OW 31
1365: ST_TO_ADDR
// for i := 1 to kirovBase do
1366: LD_ADDR_VAR 0 2
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 58
1380: PUSH
1381: FOR_TO
1382: IFFALSE 1531
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1384: LD_ADDR_OWVAR 42
1388: PUSH
1389: LD_EXP 58
1393: PUSH
1394: LD_VAR 0 2
1398: ARRAY
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1404: LD_ADDR_OWVAR 43
1408: PUSH
1409: LD_EXP 58
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: PUSH
1420: LD_INT 2
1422: ARRAY
1423: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1424: LD_ADDR_VAR 0 6
1428: PUSH
1429: LD_EXP 58
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 3
1442: ARRAY
1443: PUSH
1444: LD_INT 46
1446: PLUS
1447: ST_TO_ADDR
// if x < 140 then
1448: LD_VAR 0 6
1452: PUSH
1453: LD_INT 140
1455: LESS
1456: IFFALSE 1468
// uc_side := 3 else
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 3
1465: ST_TO_ADDR
1466: GO 1476
// uc_side := 6 ;
1468: LD_ADDR_OWVAR 20
1472: PUSH
1473: LD_INT 6
1475: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1476: LD_EXP 58
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PUSH
1487: LD_INT 3
1489: ARRAY
1490: PUSH
1491: LD_INT 46
1493: PLUS
1494: PPUSH
1495: LD_EXP 58
1499: PUSH
1500: LD_VAR 0 2
1504: ARRAY
1505: PUSH
1506: LD_INT 4
1508: ARRAY
1509: PPUSH
1510: LD_EXP 58
1514: PUSH
1515: LD_VAR 0 2
1519: ARRAY
1520: PUSH
1521: LD_INT 5
1523: ARRAY
1524: PPUSH
1525: CALL_OW 47
// end ;
1529: GO 1381
1531: POP
1532: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1533: LD_ADDR_EXP 59
1537: PUSH
1538: LD_INT 22
1540: PUSH
1541: LD_INT 6
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: PUSH
1567: LD_INT 1
1569: ARRAY
1570: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1571: LD_EXP 59
1575: PPUSH
1576: LD_STRING kirov
1578: PPUSH
1579: CALL_OW 500
// for i := 1 to 2 do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_INT 2
1595: PUSH
1596: FOR_TO
1597: IFFALSE 1623
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1599: LD_EXP 59
1603: PPUSH
1604: CALL_OW 274
1608: PPUSH
1609: LD_VAR 0 2
1613: PPUSH
1614: LD_INT 500
1616: PPUSH
1617: CALL_OW 277
1621: GO 1596
1623: POP
1624: POP
// tmp := otherKirovUnits ;
1625: LD_ADDR_VAR 0 4
1629: PUSH
1630: LD_EXP 57
1634: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1635: LD_ADDR_VAR 0 5
1639: PUSH
1640: LD_INT 22
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 21
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 30
1665: PUSH
1666: LD_INT 31
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1687: LD_ADDR_VAR 0 7
1691: PUSH
1692: LD_VAR 0 5
1696: PUSH
1697: LD_INT 1
1699: ARRAY
1700: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1701: LD_VAR 0 4
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 7
1714: PPUSH
1715: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1719: LD_ADDR_VAR 0 4
1723: PUSH
1724: LD_VAR 0 4
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: CALL_OW 3
1736: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1737: LD_VAR 0 7
1741: PPUSH
1742: CALL_OW 313
1746: PUSH
1747: LD_INT 3
1749: EQUAL
1750: IFFALSE 1770
// buildings := Delete ( buildings , 1 ) ;
1752: LD_ADDR_VAR 0 5
1756: PUSH
1757: LD_VAR 0 5
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: CALL_OW 3
1769: ST_TO_ADDR
// until not buildings or not tmp ;
1770: LD_VAR 0 5
1774: NOT
1775: PUSH
1776: LD_VAR 0 4
1780: NOT
1781: OR
1782: IFFALSE 1687
// if tmp then
1784: LD_VAR 0 4
1788: IFFALSE 1828
// begin for i in tmp do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_VAR 0 4
1799: PUSH
1800: FOR_IN
1801: IFFALSE 1826
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 164
1810: PPUSH
1811: LD_INT 109
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 50
1824: GO 1800
1826: POP
1827: POP
// end ; end ;
1828: LD_VAR 0 1
1832: RET
// export function UpgradeKirovBase ; var i , un , kirovBuildingArray ; begin
1833: LD_INT 0
1835: PPUSH
1836: PPUSH
1837: PPUSH
1838: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_INT 32
1846: PUSH
1847: LD_INT 146
1849: PUSH
1850: LD_INT 106
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 32
1864: PUSH
1865: LD_INT 175
1867: PUSH
1868: LD_INT 123
1870: PUSH
1871: LD_INT 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 32
1882: PUSH
1883: LD_INT 170
1885: PUSH
1886: LD_INT 101
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 32
1900: PUSH
1901: LD_INT 172
1903: PUSH
1904: LD_INT 104
1906: PUSH
1907: LD_INT 4
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 32
1918: PUSH
1919: LD_INT 179
1921: PUSH
1922: LD_INT 118
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 26
1936: PUSH
1937: LD_INT 159
1939: PUSH
1940: LD_INT 96
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
1960: LD_ADDR_EXP 70
1964: PUSH
1965: LD_INT 22
1967: PUSH
1968: LD_INT 6
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 25
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: ST_TO_ADDR
// kirovLab := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
2005: LD_ADDR_EXP 61
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 3
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 6
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL_OW 69
2049: PUSH
2050: LD_INT 1
2052: ARRAY
2053: ST_TO_ADDR
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_armoury ] ] ) ;
2054: LD_ADDR_EXP 62
2058: PUSH
2059: LD_INT 22
2061: PUSH
2062: LD_INT 6
2064: PUSH
2065: EMPTY
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 21
2071: PUSH
2072: LD_INT 3
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 30
2081: PUSH
2082: LD_INT 4
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: ST_TO_ADDR
// kirovWorkshop := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_workshop ] ] ) [ 1 ] ;
2099: LD_ADDR_EXP 63
2103: PUSH
2104: LD_INT 22
2106: PUSH
2107: LD_INT 6
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 21
2116: PUSH
2117: LD_INT 3
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 2
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: ST_TO_ADDR
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_mechanic ] ] ) ;
2148: LD_ADDR_VAR 0 3
2152: PUSH
2153: LD_INT 22
2155: PUSH
2156: LD_INT 6
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 21
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 25
2175: PUSH
2176: LD_INT 3
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PPUSH
2188: CALL_OW 69
2192: ST_TO_ADDR
// ComExitBuilding ( un ) ;
2193: LD_VAR 0 3
2197: PPUSH
2198: CALL_OW 122
// AddComEnterUnit ( un , kirovWorkshop ) ;
2202: LD_VAR 0 3
2206: PPUSH
2207: LD_EXP 63
2211: PPUSH
2212: CALL_OW 180
// wait ( 0 0$1 ) ;
2216: LD_INT 35
2218: PPUSH
2219: CALL_OW 67
// un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] ] ) ;
2223: LD_ADDR_VAR 0 3
2227: PUSH
2228: LD_INT 22
2230: PUSH
2231: LD_INT 6
2233: PUSH
2234: EMPTY
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 25
2250: PUSH
2251: LD_INT 4
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 69
2267: ST_TO_ADDR
// AddComEnterUnit ( un , kirovLab ) ;
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_EXP 61
2277: PPUSH
2278: CALL_OW 180
// for i in kirovBuildingArray do
2282: LD_ADDR_VAR 0 2
2286: PUSH
2287: LD_VAR 0 4
2291: PUSH
2292: FOR_IN
2293: IFFALSE 2342
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2295: LD_EXP 70
2299: PPUSH
2300: LD_VAR 0 2
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PPUSH
2309: LD_VAR 0 2
2313: PUSH
2314: LD_INT 2
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 2
2322: PUSH
2323: LD_INT 3
2325: ARRAY
2326: PPUSH
2327: LD_VAR 0 2
2331: PUSH
2332: LD_INT 4
2334: ARRAY
2335: PPUSH
2336: CALL_OW 205
2340: GO 2292
2342: POP
2343: POP
// comArray := [ kirovLab , kirovBarracks [ 1 ] , kirovBarracks [ 2 ] , kirovDepot , kirovWorkshop ] ;
2344: LD_ADDR_EXP 2
2348: PUSH
2349: LD_EXP 61
2353: PUSH
2354: LD_EXP 62
2358: PUSH
2359: LD_INT 1
2361: ARRAY
2362: PUSH
2363: LD_EXP 62
2367: PUSH
2368: LD_INT 2
2370: ARRAY
2371: PUSH
2372: LD_EXP 59
2376: PUSH
2377: LD_EXP 63
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: ST_TO_ADDR
// end ;
2389: LD_VAR 0 1
2393: RET
// export function PrepareScholtze ; begin
2394: LD_INT 0
2396: PPUSH
// uc_side := 5 ;
2397: LD_ADDR_OWVAR 20
2401: PUSH
2402: LD_INT 5
2404: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
2405: LD_ADDR_EXP 67
2409: PUSH
2410: LD_STRING Scholtze
2412: PPUSH
2413: CALL_OW 25
2417: ST_TO_ADDR
// Scholtze2 := NewCharacter ( Scholtze ) ;
2418: LD_ADDR_EXP 68
2422: PUSH
2423: LD_STRING Scholtze
2425: PPUSH
2426: CALL_OW 25
2430: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
2431: LD_EXP 67
2435: PPUSH
2436: LD_INT 12
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 49
// end ; end_of_file
2446: LD_VAR 0 1
2450: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2451: LD_INT 0
2453: PPUSH
2454: PPUSH
2455: PPUSH
2456: PPUSH
// amIntroUnits = [ ] ;
2457: LD_ADDR_EXP 74
2461: PUSH
2462: EMPTY
2463: ST_TO_ADDR
// uc_side = 1 ;
2464: LD_ADDR_OWVAR 20
2468: PUSH
2469: LD_INT 1
2471: ST_TO_ADDR
// uc_nation = nation_american ;
2472: LD_ADDR_OWVAR 21
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2480: LD_ADDR_OWVAR 37
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// vc_control = control_manual ;
2488: LD_ADDR_OWVAR 38
2492: PUSH
2493: LD_INT 1
2495: ST_TO_ADDR
// vc_engine = engine_combustion ;
2496: LD_ADDR_OWVAR 39
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2504: LD_ADDR_OWVAR 40
2508: PUSH
2509: LD_INT 3
2511: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2512: LD_ADDR_OWVAR 41
2516: PUSH
2517: LD_INT 100
2519: ST_TO_ADDR
// veh = CreateVehicle ;
2520: LD_ADDR_VAR 0 3
2524: PUSH
2525: CALL_OW 45
2529: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2530: LD_VAR 0 3
2534: PPUSH
2535: LD_INT 4
2537: PPUSH
2538: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2542: LD_ADDR_EXP 74
2546: PUSH
2547: LD_EXP 74
2551: PUSH
2552: LD_VAR 0 3
2556: ADD
2557: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2558: LD_VAR 0 3
2562: PPUSH
2563: LD_INT 7
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 49
// for i := 1 to 3 do
2573: LD_ADDR_VAR 0 2
2577: PUSH
2578: DOUBLE
2579: LD_INT 1
2581: DEC
2582: ST_TO_ADDR
2583: LD_INT 3
2585: PUSH
2586: FOR_TO
2587: IFFALSE 2708
// begin hc_name :=  ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING 
2596: ST_TO_ADDR
// hc_gallery :=  ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING 
2604: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2605: LD_INT 0
2607: PPUSH
2608: LD_EXP 42
2612: PPUSH
2613: CALL_OW 381
// human = CreateHuman ;
2617: LD_ADDR_VAR 0 4
2621: PUSH
2622: CALL_OW 44
2626: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2627: LD_ADDR_EXP 74
2631: PUSH
2632: LD_EXP 74
2636: PUSH
2637: LD_VAR 0 4
2641: ADD
2642: ST_TO_ADDR
// if i < 3 then
2643: LD_VAR 0 2
2647: PUSH
2648: LD_INT 3
2650: LESS
2651: IFFALSE 2670
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2653: LD_VAR 0 4
2657: PPUSH
2658: LD_INT 7
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
2668: GO 2706
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2670: LD_INT 0
2672: PPUSH
2673: LD_EXP 42
2677: PPUSH
2678: CALL_OW 383
// human = CreateHuman ;
2682: LD_ADDR_VAR 0 4
2686: PUSH
2687: CALL_OW 44
2691: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2692: LD_VAR 0 4
2696: PPUSH
2697: LD_VAR 0 3
2701: PPUSH
2702: CALL_OW 52
// end ; end ;
2706: GO 2586
2708: POP
2709: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2710: LD_INT 120
2712: PPUSH
2713: LD_INT 36
2715: PPUSH
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2723: LD_EXP 74
2727: PPUSH
2728: LD_INT 26
2730: PPUSH
2731: LD_INT 34
2733: PPUSH
2734: CALL_OW 111
// end ;
2738: LD_VAR 0 1
2742: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2743: LD_INT 0
2745: PPUSH
2746: PPUSH
2747: PPUSH
2748: PPUSH
2749: PPUSH
2750: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2751: LD_ADDR_EXP 75
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: LD_INT 2
2761: PUSH
2762: LD_INT 3
2764: PUSH
2765: LD_INT 5
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: PUSH
2774: LD_OWVAR 67
2778: ARRAY
2779: PUSH
2780: LD_INT 0
2782: PUSH
2783: LD_INT 0
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: LD_INT 1
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: LD_OWVAR 67
2802: ARRAY
2803: PUSH
2804: LD_INT 1
2806: PUSH
2807: LD_INT 1
2809: PUSH
2810: LD_INT 2
2812: PUSH
2813: LD_INT 2
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: LIST
2820: LIST
2821: PUSH
2822: LD_OWVAR 67
2826: ARRAY
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: LD_INT 1
2833: PUSH
2834: LD_INT 1
2836: PUSH
2837: LD_INT 2
2839: PUSH
2840: EMPTY
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 1
2857: PUSH
2858: LD_INT 1
2860: PUSH
2861: LD_INT 2
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: PUSH
2870: LD_OWVAR 67
2874: ARRAY
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: PUSH
2883: LD_INT 3
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: LD_INT 5
2891: PUSH
2892: LD_INT 6
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: PUSH
2901: LD_OWVAR 67
2905: ARRAY
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: LD_INT 1
2912: PUSH
2913: LD_INT 1
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: PUSH
2925: LD_OWVAR 67
2929: ARRAY
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: LD_INT 1
2936: PUSH
2937: LD_INT 2
2939: PUSH
2940: LD_INT 3
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: LIST
2947: LIST
2948: PUSH
2949: LD_OWVAR 67
2953: ARRAY
2954: PUSH
2955: LD_INT 1
2957: PUSH
2958: LD_INT 1
2960: PUSH
2961: LD_INT 2
2963: PUSH
2964: LD_INT 3
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: PUSH
2979: LD_INT 1
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: LD_INT 2
2987: PUSH
2988: LD_INT 3
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: LD_OWVAR 67
3001: ARRAY
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 1
3012: PUSH
3013: LD_INT 2
3015: PUSH
3016: LD_INT 3
3018: PUSH
3019: LD_INT 4
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: LIST
3026: LIST
3027: PUSH
3028: LD_OWVAR 67
3032: ARRAY
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: LD_INT 2
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: LIST
3051: PUSH
3052: LD_OWVAR 67
3056: ARRAY
3057: PUSH
3058: LD_INT 1
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_OWVAR 67
3080: ARRAY
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: LD_INT 1
3090: PUSH
3091: LD_INT 2
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_OWVAR 67
3104: ARRAY
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: LD_INT 1
3111: PUSH
3112: LD_INT 1
3114: PUSH
3115: LD_INT 2
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: PUSH
3124: LD_OWVAR 67
3128: ARRAY
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 3
3139: PUSH
3140: LD_INT 4
3142: PUSH
3143: LD_INT 6
3145: PUSH
3146: LD_INT 7
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: LD_OWVAR 67
3159: ARRAY
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 2
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_OWVAR 67
3183: ARRAY
3184: PUSH
3185: LD_INT 1
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: LD_INT 2
3193: PUSH
3194: LD_INT 3
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_OWVAR 67
3207: ARRAY
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: LD_INT 1
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 3
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: PUSH
3227: LD_OWVAR 67
3231: ARRAY
3232: PUSH
3233: LD_INT 1
3235: PUSH
3236: LD_INT 1
3238: PUSH
3239: LD_INT 1
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: LD_OWVAR 67
3255: ARRAY
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
3270: LD_ADDR_VAR 0 6
3274: PUSH
3275: LD_INT 1
3277: PUSH
3278: LD_INT 20
3280: PUSH
3281: LD_INT 33
3283: PUSH
3284: LD_INT 2
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 29
3295: PUSH
3296: LD_INT 38
3298: PUSH
3299: LD_INT 30
3301: PUSH
3302: LD_INT 5
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 5
3313: PUSH
3314: LD_INT 34
3316: PUSH
3317: LD_INT 25
3319: PUSH
3320: LD_INT 4
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 5
3331: PUSH
3332: LD_INT 35
3334: PUSH
3335: LD_INT 45
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 6
3349: PUSH
3350: LD_INT 27
3352: PUSH
3353: LD_INT 27
3355: PUSH
3356: LD_INT 3
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: PUSH
3365: LD_INT 6
3367: PUSH
3368: LD_INT 15
3370: PUSH
3371: LD_INT 23
3373: PUSH
3374: LD_INT 1
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 31
3385: PUSH
3386: LD_INT 25
3388: PUSH
3389: LD_INT 8
3391: PUSH
3392: LD_INT 5
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 32
3403: PUSH
3404: LD_INT 37
3406: PUSH
3407: LD_INT 35
3409: PUSH
3410: LD_INT 4
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: PUSH
3419: LD_INT 32
3421: PUSH
3422: LD_INT 42
3424: PUSH
3425: LD_INT 45
3427: PUSH
3428: LD_INT 4
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 32
3439: PUSH
3440: LD_INT 29
3442: PUSH
3443: LD_INT 17
3445: PUSH
3446: LD_INT 4
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 32
3457: PUSH
3458: LD_INT 30
3460: PUSH
3461: LD_INT 53
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 32
3475: PUSH
3476: LD_INT 42
3478: PUSH
3479: LD_INT 56
3481: PUSH
3482: LD_INT 4
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: PUSH
3491: LD_INT 32
3493: PUSH
3494: LD_INT 30
3496: PUSH
3497: LD_INT 20
3499: PUSH
3500: LD_INT 4
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 27
3511: PUSH
3512: LD_INT 7
3514: PUSH
3515: LD_INT 8
3517: PUSH
3518: LD_INT 1
3520: PUSH
3521: EMPTY
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 27
3529: PUSH
3530: LD_INT 10
3532: PUSH
3533: LD_INT 8
3535: PUSH
3536: LD_INT 1
3538: PUSH
3539: EMPTY
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: PUSH
3545: LD_INT 27
3547: PUSH
3548: LD_INT 13
3550: PUSH
3551: LD_INT 8
3553: PUSH
3554: LD_INT 1
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 26
3565: PUSH
3566: LD_INT 23
3568: PUSH
3569: LD_INT 42
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_INT 3
3583: PUSH
3584: LD_INT 13
3586: PUSH
3587: LD_INT 14
3589: PUSH
3590: LD_INT 1
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 19
3601: PUSH
3602: LD_INT 10
3604: PUSH
3605: LD_INT 11
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: LD_INT 17
3619: PUSH
3620: LD_INT 9
3622: PUSH
3623: LD_INT 14
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 16
3637: PUSH
3638: LD_INT 13
3640: PUSH
3641: LD_INT 17
3643: PUSH
3644: LD_INT 0
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: PUSH
3653: EMPTY
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// for i in omiBuildingArray do
3676: LD_ADDR_VAR 0 2
3680: PUSH
3681: LD_VAR 0 6
3685: PUSH
3686: FOR_IN
3687: IFFALSE 3743
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3689: LD_INT 1
3691: PPUSH
3692: LD_INT 1
3694: PPUSH
3695: LD_INT 5
3697: PPUSH
3698: LD_VAR 0 2
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: LD_VAR 0 2
3711: PUSH
3712: LD_INT 2
3714: ARRAY
3715: PPUSH
3716: LD_VAR 0 2
3720: PUSH
3721: LD_INT 3
3723: ARRAY
3724: PPUSH
3725: LD_VAR 0 2
3729: PUSH
3730: LD_INT 4
3732: ARRAY
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL 48894 0 8
3741: GO 3686
3743: POP
3744: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3745: LD_ADDR_EXP 73
3749: PUSH
3750: LD_INT 22
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 30
3762: PUSH
3763: LD_INT 1
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: PUSH
3779: LD_INT 1
3781: ARRAY
3782: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3783: LD_EXP 73
3787: PPUSH
3788: LD_STRING omikron
3790: PPUSH
3791: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3795: LD_ADDR_EXP 77
3799: PUSH
3800: LD_INT 22
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 30
3812: PUSH
3813: LD_INT 5
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: PPUSH
3824: CALL_OW 69
3828: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3829: LD_ADDR_EXP 76
3833: PUSH
3834: LD_INT 22
3836: PUSH
3837: LD_INT 1
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 30
3846: PUSH
3847: LD_INT 6
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: EMPTY
3855: LIST
3856: LIST
3857: PPUSH
3858: CALL_OW 69
3862: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3863: LD_ADDR_EXP 78
3867: PUSH
3868: LD_INT 22
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: PUSH
3878: LD_INT 30
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PPUSH
3892: CALL_OW 69
3896: PUSH
3897: LD_INT 1
3899: ARRAY
3900: ST_TO_ADDR
// for i := 1 to 2 do
3901: LD_ADDR_VAR 0 2
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 2
3913: PUSH
3914: FOR_TO
3915: IFFALSE 3941
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
3917: LD_EXP 73
3921: PPUSH
3922: CALL_OW 274
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 500
3934: PPUSH
3935: CALL_OW 277
3939: GO 3914
3941: POP
3942: POP
// uc_side := 1 ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_INT 1
3950: ST_TO_ADDR
// uc_nation := 1 ;
3951: LD_ADDR_OWVAR 21
3955: PUSH
3956: LD_INT 1
3958: ST_TO_ADDR
// omicronSquad := [ ] ;
3959: LD_ADDR_EXP 71
3963: PUSH
3964: EMPTY
3965: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: LD_INT 22
3973: PUSH
3974: LD_INT 1
3976: PUSH
3977: EMPTY
3978: LIST
3979: LIST
3980: PUSH
3981: LD_INT 2
3983: PUSH
3984: LD_INT 30
3986: PUSH
3987: LD_INT 32
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 30
3996: PUSH
3997: LD_INT 31
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PPUSH
4013: CALL_OW 69
4017: PUSH
4018: FOR_IN
4019: IFFALSE 4138
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4021: LD_INT 1
4023: PPUSH
4024: LD_INT 1
4026: PPUSH
4027: LD_INT 3
4029: PUSH
4030: LD_INT 4
4032: PUSH
4033: LD_INT 5
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: PUSH
4041: LD_OWVAR 67
4045: ARRAY
4046: PPUSH
4047: CALL_OW 380
// un := CreateHuman ;
4051: LD_ADDR_VAR 0 3
4055: PUSH
4056: CALL_OW 44
4060: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4061: LD_ADDR_EXP 71
4065: PUSH
4066: LD_EXP 71
4070: PUSH
4071: LD_VAR 0 3
4075: UNION
4076: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
4077: LD_VAR 0 3
4081: PPUSH
4082: LD_VAR 0 2
4086: PPUSH
4087: CALL_OW 254
4091: PUSH
4092: LD_INT 3
4094: MINUS
4095: PPUSH
4096: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
4100: LD_VAR 0 3
4104: PPUSH
4105: LD_VAR 0 2
4109: PPUSH
4110: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
4114: LD_VAR 0 2
4118: PPUSH
4119: LD_VAR 0 2
4123: PPUSH
4124: LD_INT 8
4126: PPUSH
4127: CALL 18470 0 2
4131: PPUSH
4132: CALL_OW 431
// end ;
4136: GO 4018
4138: POP
4139: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 3
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: LD_INT 5
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4228
// begin PrepareHuman ( false , 2 , 2 ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 2
4178: PPUSH
4179: LD_INT 2
4181: PPUSH
4182: CALL_OW 380
// un := CreateHuman ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 44
4195: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4196: LD_ADDR_EXP 71
4200: PUSH
4201: LD_EXP 71
4205: PUSH
4206: LD_VAR 0 3
4210: UNION
4211: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
4212: LD_VAR 0 3
4216: PPUSH
4217: LD_EXP 73
4221: PPUSH
4222: CALL_OW 52
// end ;
4226: GO 4170
4228: POP
4229: POP
// for i := 1 to 2 do
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: DOUBLE
4236: LD_INT 1
4238: DEC
4239: ST_TO_ADDR
4240: LD_INT 2
4242: PUSH
4243: FOR_TO
4244: IFFALSE 4410
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
4246: LD_INT 2
4248: PUSH
4249: LD_INT 3
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_VAR 0 2
4260: ARRAY
4261: PPUSH
4262: LD_INT 2
4264: PPUSH
4265: LD_INT 1
4267: PPUSH
4268: LD_INT 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_VAR 0 2
4282: ARRAY
4283: PPUSH
4284: LD_INT 100
4286: PPUSH
4287: CALL 13230 0 5
// veh := CreateVehicle ;
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: CALL_OW 45
4300: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 28
4308: PPUSH
4309: LD_INT 37
4311: PPUSH
4312: LD_INT 6
4314: PPUSH
4315: LD_INT 0
4317: PPUSH
4318: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
4322: LD_INT 0
4324: PPUSH
4325: LD_INT 3
4327: PPUSH
4328: LD_INT 2
4330: PPUSH
4331: CALL_OW 380
// un := CreateHuman ;
4335: LD_ADDR_VAR 0 3
4339: PUSH
4340: CALL_OW 44
4344: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
4345: LD_ADDR_EXP 71
4349: PUSH
4350: LD_EXP 71
4354: PUSH
4355: LD_VAR 0 3
4359: UNION
4360: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4361: LD_VAR 0 3
4365: PPUSH
4366: LD_VAR 0 5
4370: PPUSH
4371: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
4375: LD_VAR 0 3
4379: PPUSH
4380: LD_VAR 0 3
4384: PPUSH
4385: CALL_OW 250
4389: PUSH
4390: LD_INT 3
4392: PLUS
4393: PPUSH
4394: LD_VAR 0 3
4398: PPUSH
4399: CALL_OW 251
4403: PPUSH
4404: CALL_OW 111
// end ;
4408: GO 4243
4410: POP
4411: POP
// end ;
4412: LD_VAR 0 1
4416: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4417: LD_INT 0
4419: PPUSH
4420: PPUSH
4421: PPUSH
4422: PPUSH
4423: PPUSH
4424: PPUSH
4425: PPUSH
4426: PPUSH
4427: PPUSH
4428: PPUSH
// uc_side := 1 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// hc_name :=  ;
4445: LD_ADDR_OWVAR 26
4449: PUSH
4450: LD_STRING 
4452: ST_TO_ADDR
// hc_gallery :=  ;
4453: LD_ADDR_OWVAR 33
4457: PUSH
4458: LD_STRING 
4460: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4461: LD_ADDR_VAR 0 8
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_VAR 0 1
4475: PUSH
4476: FOR_TO
4477: IFFALSE 4552
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4479: LD_INT 0
4481: PPUSH
4482: LD_EXP 42
4486: PPUSH
4487: CALL_OW 381
// un = CreateHuman ;
4491: LD_ADDR_VAR 0 9
4495: PUSH
4496: CALL_OW 44
4500: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4501: LD_ADDR_EXP 80
4505: PUSH
4506: LD_EXP 80
4510: PUSH
4511: LD_VAR 0 9
4515: ADD
4516: ST_TO_ADDR
// sols := sols ^ un ;
4517: LD_ADDR_VAR 0 12
4521: PUSH
4522: LD_VAR 0 12
4526: PUSH
4527: LD_VAR 0 9
4531: ADD
4532: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4533: LD_VAR 0 9
4537: PPUSH
4538: LD_VAR 0 6
4542: PPUSH
4543: LD_INT 0
4545: PPUSH
4546: CALL_OW 49
// end ;
4550: GO 4476
4552: POP
4553: POP
// for i := 1 to engsAmount do
4554: LD_ADDR_VAR 0 8
4558: PUSH
4559: DOUBLE
4560: LD_INT 1
4562: DEC
4563: ST_TO_ADDR
4564: LD_VAR 0 2
4568: PUSH
4569: FOR_TO
4570: IFFALSE 4645
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_EXP 42
4579: PPUSH
4580: CALL_OW 382
// un = CreateHuman ;
4584: LD_ADDR_VAR 0 9
4588: PUSH
4589: CALL_OW 44
4593: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4594: LD_ADDR_EXP 80
4598: PUSH
4599: LD_EXP 80
4603: PUSH
4604: LD_VAR 0 9
4608: ADD
4609: ST_TO_ADDR
// engs := engs ^ un ;
4610: LD_ADDR_VAR 0 13
4614: PUSH
4615: LD_VAR 0 13
4619: PUSH
4620: LD_VAR 0 9
4624: ADD
4625: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4626: LD_VAR 0 9
4630: PPUSH
4631: LD_VAR 0 6
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: CALL_OW 49
// end ;
4643: GO 4569
4645: POP
4646: POP
// for i := 1 to mechsAmount do
4647: LD_ADDR_VAR 0 8
4651: PUSH
4652: DOUBLE
4653: LD_INT 1
4655: DEC
4656: ST_TO_ADDR
4657: LD_VAR 0 3
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4738
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4665: LD_INT 0
4667: PPUSH
4668: LD_EXP 42
4672: PPUSH
4673: CALL_OW 383
// un = CreateHuman ;
4677: LD_ADDR_VAR 0 9
4681: PUSH
4682: CALL_OW 44
4686: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4687: LD_ADDR_EXP 80
4691: PUSH
4692: LD_EXP 80
4696: PUSH
4697: LD_VAR 0 9
4701: ADD
4702: ST_TO_ADDR
// mechs := mechs ^ un ;
4703: LD_ADDR_VAR 0 14
4707: PUSH
4708: LD_VAR 0 14
4712: PUSH
4713: LD_VAR 0 9
4717: ADD
4718: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4719: LD_VAR 0 9
4723: PPUSH
4724: LD_VAR 0 6
4728: PPUSH
4729: LD_INT 0
4731: PPUSH
4732: CALL_OW 49
// end ;
4736: GO 4662
4738: POP
4739: POP
// for i := 1 to scientistsAmount do
4740: LD_ADDR_VAR 0 8
4744: PUSH
4745: DOUBLE
4746: LD_INT 1
4748: DEC
4749: ST_TO_ADDR
4750: LD_VAR 0 4
4754: PUSH
4755: FOR_TO
4756: IFFALSE 4831
// begin PrepareScientist ( false , enemySkillLevel ) ;
4758: LD_INT 0
4760: PPUSH
4761: LD_EXP 42
4765: PPUSH
4766: CALL_OW 384
// un = CreateHuman ;
4770: LD_ADDR_VAR 0 9
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4780: LD_ADDR_EXP 80
4784: PUSH
4785: LD_EXP 80
4789: PUSH
4790: LD_VAR 0 9
4794: ADD
4795: ST_TO_ADDR
// scis := scis ^ un ;
4796: LD_ADDR_VAR 0 15
4800: PUSH
4801: LD_VAR 0 15
4805: PUSH
4806: LD_VAR 0 9
4810: ADD
4811: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4812: LD_VAR 0 9
4816: PPUSH
4817: LD_VAR 0 6
4821: PPUSH
4822: LD_INT 0
4824: PPUSH
4825: CALL_OW 49
// end ;
4829: GO 4755
4831: POP
4832: POP
// for i := 1 to vehiclesAmount do
4833: LD_ADDR_VAR 0 8
4837: PUSH
4838: DOUBLE
4839: LD_INT 1
4841: DEC
4842: ST_TO_ADDR
4843: LD_VAR 0 5
4847: PUSH
4848: FOR_TO
4849: IFFALSE 5031
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4851: LD_ADDR_OWVAR 40
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 4
4861: PUSH
4862: LD_INT 3
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PUSH
4870: LD_INT 1
4872: PPUSH
4873: LD_INT 3
4875: PPUSH
4876: CALL_OW 12
4880: ARRAY
4881: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
4882: LD_ADDR_OWVAR 37
4886: PUSH
4887: LD_INT 3
4889: ST_TO_ADDR
// vc_control = control_manual ;
4890: LD_ADDR_OWVAR 38
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// vc_engine = engine_combustion ;
4898: LD_ADDR_OWVAR 39
4902: PUSH
4903: LD_INT 1
4905: ST_TO_ADDR
// veh = CreateVehicle ;
4906: LD_ADDR_VAR 0 10
4910: PUSH
4911: CALL_OW 45
4915: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
4916: LD_ADDR_EXP 80
4920: PUSH
4921: LD_EXP 80
4925: PUSH
4926: LD_VAR 0 10
4930: ADD
4931: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4932: LD_VAR 0 10
4936: PPUSH
4937: LD_VAR 0 6
4941: PPUSH
4942: LD_INT 0
4944: PPUSH
4945: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4949: LD_INT 0
4951: PPUSH
4952: LD_EXP 42
4956: PPUSH
4957: CALL_OW 383
// un = CreateHuman ;
4961: LD_ADDR_VAR 0 9
4965: PUSH
4966: CALL_OW 44
4970: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
4971: LD_ADDR_EXP 80
4975: PUSH
4976: LD_EXP 80
4980: PUSH
4981: LD_VAR 0 9
4985: ADD
4986: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
4987: LD_ADDR_EXP 79
4991: PUSH
4992: LD_EXP 79
4996: PUSH
4997: LD_VAR 0 10
5001: ADD
5002: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5003: LD_VAR 0 9
5007: PPUSH
5008: LD_VAR 0 10
5012: PPUSH
5013: CALL_OW 52
// SetFuel ( veh , 100 ) ;
5017: LD_VAR 0 10
5021: PPUSH
5022: LD_INT 100
5024: PPUSH
5025: CALL_OW 240
// end ;
5029: GO 4848
5031: POP
5032: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
5033: LD_EXP 80
5037: PPUSH
5038: LD_INT 25
5040: PPUSH
5041: LD_INT 31
5043: PPUSH
5044: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
5048: LD_EXP 79
5052: PPUSH
5053: LD_INT 95
5055: PUSH
5056: LD_INT 44
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: PPUSH
5066: CALL 47751 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5070: LD_VAR 0 12
5074: PPUSH
5075: LD_EXP 77
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PUSH
5084: LD_EXP 77
5088: PUSH
5089: LD_INT 2
5091: ARRAY
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: LD_INT 1
5099: PPUSH
5100: LD_INT 2
5102: PPUSH
5103: CALL_OW 12
5107: ARRAY
5108: PPUSH
5109: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
5113: LD_VAR 0 13
5117: PPUSH
5118: LD_EXP 73
5122: PPUSH
5123: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
5127: LD_VAR 0 14
5131: PPUSH
5132: LD_EXP 78
5136: PPUSH
5137: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
5141: LD_VAR 0 15
5145: PPUSH
5146: LD_EXP 76
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PUSH
5155: LD_EXP 76
5159: PUSH
5160: LD_INT 2
5162: ARRAY
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 1
5170: PPUSH
5171: LD_INT 2
5173: PPUSH
5174: CALL_OW 12
5178: ARRAY
5179: PPUSH
5180: CALL_OW 180
// amConvoyTroops :=  ;
5184: LD_ADDR_EXP 80
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// sols :=  ;
5192: LD_ADDR_VAR 0 12
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// engs :=  ;
5200: LD_ADDR_VAR 0 13
5204: PUSH
5205: LD_STRING 
5207: ST_TO_ADDR
// mechs :=  ;
5208: LD_ADDR_VAR 0 14
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// scis :=  ;
5216: LD_ADDR_VAR 0 15
5220: PUSH
5221: LD_STRING 
5223: ST_TO_ADDR
// end ;
5224: LD_VAR 0 7
5228: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
5229: LD_INT 0
5231: PPUSH
5232: PPUSH
// for i := 1 to amVehs do
5233: LD_ADDR_VAR 0 2
5237: PUSH
5238: DOUBLE
5239: LD_INT 1
5241: DEC
5242: ST_TO_ADDR
5243: LD_EXP 79
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5292
// begin if GetType ( i ) = unit_vehicle then
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 247
5260: PUSH
5261: LD_INT 2
5263: EQUAL
5264: IFFALSE 5278
// SetFuel ( i , 100 ) ;
5266: LD_VAR 0 2
5270: PPUSH
5271: LD_INT 100
5273: PPUSH
5274: CALL_OW 240
// SetLives ( i , 100 ) ;
5278: LD_VAR 0 2
5282: PPUSH
5283: LD_INT 100
5285: PPUSH
5286: CALL_OW 234
// end ;
5290: GO 5248
5292: POP
5293: POP
// for i := 1 to amIntroUnits do
5294: LD_ADDR_VAR 0 2
5298: PUSH
5299: DOUBLE
5300: LD_INT 1
5302: DEC
5303: ST_TO_ADDR
5304: LD_EXP 74
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5353
// begin if GetType ( i ) = unit_vehicle then
5312: LD_VAR 0 2
5316: PPUSH
5317: CALL_OW 247
5321: PUSH
5322: LD_INT 2
5324: EQUAL
5325: IFFALSE 5339
// SetFuel ( i , 100 ) ;
5327: LD_VAR 0 2
5331: PPUSH
5332: LD_INT 100
5334: PPUSH
5335: CALL_OW 240
// SetLives ( i , 100 ) ;
5339: LD_VAR 0 2
5343: PPUSH
5344: LD_INT 100
5346: PPUSH
5347: CALL_OW 234
// end ;
5351: GO 5309
5353: POP
5354: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
5355: LD_EXP 74
5359: PPUSH
5360: LD_INT 65
5362: PUSH
5363: LD_INT 91
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 116
5372: PUSH
5373: LD_INT 97
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL 47751 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5388: LD_EXP 79
5392: PPUSH
5393: LD_INT 65
5395: PUSH
5396: LD_INT 91
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 109
5405: PUSH
5406: LD_INT 97
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL 47751 0 2
// end ; end_of_file end_of_file
5421: LD_VAR 0 1
5425: RET
// on BuildingComplete ( building ) do var un , i , bunkers , sols , labT1 ;
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5433: LD_VAR 0 1
5437: PPUSH
5438: CALL_OW 255
5442: PUSH
5443: LD_INT 6
5445: EQUAL
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 266
5456: PUSH
5457: LD_INT 32
5459: EQUAL
5460: PUSH
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 266
5470: PUSH
5471: LD_INT 4
5473: EQUAL
5474: OR
5475: AND
5476: IFFALSE 5624
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 6
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 21
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PUSH
5503: LD_INT 25
5505: PUSH
5506: LD_INT 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 54
5515: PUSH
5516: EMPTY
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: PPUSH
5525: CALL_OW 69
5529: ST_TO_ADDR
// for un in sols do
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: LD_VAR 0 5
5539: PUSH
5540: FOR_IN
5541: IFFALSE 5592
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 310
5552: PPUSH
5553: CALL_OW 266
5557: PUSH
5558: LD_INT 32
5560: EQUAL
5561: IFFALSE 5565
// continue ;
5563: GO 5540
// ComExit ( un ) ;
5565: LD_VAR 0 2
5569: PPUSH
5570: CALL 45543 0 1
// AddComEnterUnit ( un , building ) ;
5574: LD_VAR 0 2
5578: PPUSH
5579: LD_VAR 0 1
5583: PPUSH
5584: CALL_OW 180
// break ;
5588: GO 5592
// end ;
5590: GO 5540
5592: POP
5593: POP
// if labT1 = false then
5594: LD_VAR 0 6
5598: PUSH
5599: LD_INT 0
5601: EQUAL
5602: IFFALSE 5624
// begin labT1 = true ;
5604: LD_ADDR_VAR 0 6
5608: PUSH
5609: LD_INT 1
5611: ST_TO_ADDR
// AddComUpgradeLab ( kirovLab , b_lab_weapon ) ;
5612: LD_EXP 61
5616: PPUSH
5617: LD_INT 10
5619: PPUSH
5620: CALL_OW 207
// end ; end ; end ;
5624: PPOPN 6
5626: END
// on UpgradeComplete ( building ) do var i , un , weapon ;
5627: LD_INT 0
5629: PPUSH
5630: PPUSH
5631: PPUSH
// begin if GetSide ( building ) = 6 and Length ( comArray ) > 0 then
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 255
5641: PUSH
5642: LD_INT 6
5644: EQUAL
5645: PUSH
5646: LD_EXP 2
5650: PPUSH
5651: CALL 48872 0 1
5655: PUSH
5656: LD_INT 0
5658: GREATER
5659: AND
5660: IFFALSE 5750
// begin if comArray [ 1 ] = kirovLab then
5662: LD_EXP 2
5666: PUSH
5667: LD_INT 1
5669: ARRAY
5670: PUSH
5671: LD_EXP 61
5675: EQUAL
5676: IFFALSE 5696
// AddComUpgradeLab ( comArray [ 1 ] , b_lab_weapon ) else
5678: LD_EXP 2
5682: PUSH
5683: LD_INT 1
5685: ARRAY
5686: PPUSH
5687: LD_INT 10
5689: PPUSH
5690: CALL_OW 207
5694: GO 5709
// AddComUpgrade ( comArray [ 1 ] ) ;
5696: LD_EXP 2
5700: PUSH
5701: LD_INT 1
5703: ARRAY
5704: PPUSH
5705: CALL_OW 206
// comArray := comArray diff comArray [ 1 ] ;
5709: LD_ADDR_EXP 2
5713: PUSH
5714: LD_EXP 2
5718: PUSH
5719: LD_EXP 2
5723: PUSH
5724: LD_INT 1
5726: ARRAY
5727: DIFF
5728: ST_TO_ADDR
// wait ( 0 0$1 ) ;
5729: LD_INT 35
5731: PPUSH
5732: CALL_OW 67
// AddComComplete ( kirovEngs , building ) ;
5736: LD_EXP 70
5740: PPUSH
5741: LD_VAR 0 1
5745: PPUSH
5746: CALL 16323 0 2
// end ; if GetSide ( building ) = 6 and GetBType ( building ) = b_factory or GetBType ( building ) = b_workshop then
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 255
5759: PUSH
5760: LD_INT 6
5762: EQUAL
5763: PUSH
5764: LD_VAR 0 1
5768: PPUSH
5769: CALL_OW 266
5773: PUSH
5774: LD_INT 3
5776: EQUAL
5777: AND
5778: PUSH
5779: LD_VAR 0 1
5783: PPUSH
5784: CALL_OW 266
5788: PUSH
5789: LD_INT 2
5791: EQUAL
5792: OR
5793: IFFALSE 5888
// begin un := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_INT 22
5802: PUSH
5803: LD_INT 6
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 21
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 30
5822: PUSH
5823: LD_INT 32
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: PPUSH
5835: CALL_OW 69
5839: ST_TO_ADDR
// for i in un do
5840: LD_ADDR_VAR 0 2
5844: PUSH
5845: LD_VAR 0 3
5849: PUSH
5850: FOR_IN
5851: IFFALSE 5886
// AddComPlaceWeapon ( i , [ ru_heavy_machine_gun , ru_gatling_gun ] [ Rand ( 1 , 2 ) ] ) ;
5853: LD_VAR 0 2
5857: PPUSH
5858: LD_INT 42
5860: PUSH
5861: LD_INT 43
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PUSH
5868: LD_INT 1
5870: PPUSH
5871: LD_INT 2
5873: PPUSH
5874: CALL_OW 12
5878: ARRAY
5879: PPUSH
5880: CALL_OW 208
5884: GO 5850
5886: POP
5887: POP
// end ; end ;
5888: PPOPN 4
5890: END
// on BuildingStarted ( building , hum ) do var un , i ;
5891: LD_INT 0
5893: PPUSH
5894: PPUSH
// begin AddComComplete ( kirovEngs , building ) ;
5895: LD_EXP 70
5899: PPUSH
5900: LD_VAR 0 1
5904: PPUSH
5905: CALL 16323 0 2
// end ; end_of_file
5909: PPOPN 4
5911: END
// export currentTeam , kirovBaseUnits , bukovMsg ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export function MissionIntro ; var i , un , selectedPeople ; begin
5912: LD_INT 0
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
5918: LD_EXP 43
5922: PUSH
5923: LD_EXP 55
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PPUSH
5932: CALL_OW 87
// convoyTime := [ 0 0$10 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
5936: LD_ADDR_EXP 87
5940: PUSH
5941: LD_INT 350
5943: PUSH
5944: LD_INT 31500
5946: PUSH
5947: LD_INT 42000
5949: PUSH
5950: LD_INT 52500
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: ST_TO_ADDR
// bukovMsg := [ D3a-RSol1-1 , D3b-RSol1-1 ] ;
5959: LD_ADDR_EXP 83
5963: PUSH
5964: LD_STRING D3a-RSol1-1
5966: PUSH
5967: LD_STRING D3b-RSol1-1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: ST_TO_ADDR
// if not Belkov then
5974: LD_EXP 47
5978: NOT
5979: IFFALSE 6055
// begin Say ( Kurin , D1a-Kur-1 ) ;
5981: LD_EXP 55
5985: PPUSH
5986: LD_STRING D1a-Kur-1
5988: PPUSH
5989: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
5993: LD_EXP 43
5997: PPUSH
5998: LD_STRING D1a-Bur-1
6000: PPUSH
6001: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
6005: LD_EXP 55
6009: PPUSH
6010: LD_STRING D1a-Kur-2
6012: PPUSH
6013: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
6017: LD_EXP 55
6021: PPUSH
6022: LD_STRING D1a-Kur-2a
6024: PPUSH
6025: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
6029: LD_EXP 55
6033: PPUSH
6034: LD_STRING D1a-Kur-2b
6036: PPUSH
6037: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
6041: LD_EXP 43
6045: PPUSH
6046: LD_STRING D1a-Bur-2
6048: PPUSH
6049: CALL_OW 88
// end else
6053: GO 6091
// begin Say ( Kurin , D1b-Kur-1 ) ;
6055: LD_EXP 55
6059: PPUSH
6060: LD_STRING D1b-Kur-1
6062: PPUSH
6063: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
6067: LD_EXP 47
6071: PPUSH
6072: LD_STRING D1b-Bel-1
6074: PPUSH
6075: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
6079: LD_EXP 55
6083: PPUSH
6084: LD_STRING D1b-Kur-2
6086: PPUSH
6087: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
6091: LD_EXP 55
6095: PPUSH
6096: LD_STRING D2-Kur-1
6098: PPUSH
6099: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
6103: LD_EXP 43
6107: PPUSH
6108: LD_STRING D2-Bur-1
6110: PPUSH
6111: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
6115: LD_EXP 55
6119: PPUSH
6120: LD_STRING D2-Kur-2
6122: PPUSH
6123: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
6127: LD_EXP 43
6131: PPUSH
6132: LD_STRING D2-Bur-2
6134: PPUSH
6135: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
6139: LD_EXP 55
6143: PPUSH
6144: LD_STRING D2-Kur-3
6146: PPUSH
6147: CALL_OW 88
// PrepareAmericansMissionIntro ;
6151: CALL 2451 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
6155: LD_INT 1
6157: PPUSH
6158: LD_INT 6
6160: PPUSH
6161: LD_INT 1
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
6171: LD_INT 3
6173: PPUSH
6174: LD_INT 5
6176: PPUSH
6177: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
6181: LD_EXP 56
6185: PUSH
6186: LD_EXP 65
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 87
// wait ( 0 0$3 ) ;
6199: LD_INT 105
6201: PPUSH
6202: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
6206: LD_EXP 56
6210: PPUSH
6211: LD_STRING D2-Pop-3
6213: PPUSH
6214: CALL_OW 94
// wait ( 0 0$0.3 ) ;
6218: LD_INT 10
6220: PPUSH
6221: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6225: LD_EXP 43
6229: PUSH
6230: LD_EXP 55
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
6243: LD_EXP 55
6247: PPUSH
6248: LD_STRING D2-Kur-4
6250: PPUSH
6251: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6255: LD_EXP 43
6259: PPUSH
6260: LD_STRING D2-Bur-4
6262: PPUSH
6263: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
6267: LD_EXP 55
6271: PPUSH
6272: LD_STRING D2-Kur-5
6274: PPUSH
6275: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
6279: LD_EXP 43
6283: PPUSH
6284: LD_STRING D2-Bur-5
6286: PPUSH
6287: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
6291: LD_EXP 55
6295: PPUSH
6296: LD_STRING D2-Kur-6
6298: PPUSH
6299: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
6303: LD_EXP 43
6307: PPUSH
6308: LD_STRING D2-Bur-4
6310: PPUSH
6311: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
6315: LD_ADDR_EXP 82
6319: PUSH
6320: LD_EXP 57
6324: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
6325: LD_ADDR_EXP 82
6329: PUSH
6330: LD_EXP 82
6334: PUSH
6335: LD_EXP 51
6339: ADD
6340: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
6341: LD_ADDR_VAR 0 4
6345: PUSH
6346: LD_STRING text
6348: PPUSH
6349: LD_INT 6
6351: PPUSH
6352: LD_INT 6
6354: PPUSH
6355: LD_INT -5
6357: PUSH
6358: LD_EXP 43
6362: PUSH
6363: LD_EXP 44
6367: PUSH
6368: LD_EXP 46
6372: PUSH
6373: LD_EXP 45
6377: PUSH
6378: LD_EXP 47
6382: PUSH
6383: LD_INT -6
6385: PUSH
6386: LD_INT -2
6388: PUSH
6389: LD_INT -3
6391: PUSH
6392: LD_INT -5
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_EXP 82
6411: ADD
6412: PUSH
6413: LD_INT -6
6415: PUSH
6416: LD_INT -4
6418: PUSH
6419: LD_EXP 55
6423: PUSH
6424: LD_EXP 56
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ADD
6435: PPUSH
6436: LD_INT 1
6438: PUSH
6439: LD_INT 3
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 1
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 4
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 42
6472: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
6473: LD_EXP 82
6477: PPUSH
6478: LD_INT 6
6480: PPUSH
6481: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
6485: LD_VAR 0 4
6489: PPUSH
6490: LD_INT 3
6492: PPUSH
6493: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
6497: LD_EXP 56
6501: PPUSH
6502: LD_INT 135
6504: PPUSH
6505: LD_INT 67
6507: PPUSH
6508: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
6512: LD_EXP 65
6516: PPUSH
6517: LD_INT 209
6519: PPUSH
6520: LD_INT 164
6522: PPUSH
6523: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
6527: LD_ADDR_EXP 62
6531: PUSH
6532: LD_INT 22
6534: PUSH
6535: LD_INT 6
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 30
6544: PUSH
6545: LD_INT 4
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 69
6560: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
6561: LD_ADDR_EXP 82
6565: PUSH
6566: LD_EXP 82
6570: PUSH
6571: LD_VAR 0 4
6575: DIFF
6576: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
6577: LD_EXP 82
6581: PUSH
6582: LD_INT 1
6584: ARRAY
6585: PPUSH
6586: LD_INT 2
6588: PPUSH
6589: CALL_OW 336
// for i := 2 to 3 do
6593: LD_ADDR_VAR 0 2
6597: PUSH
6598: DOUBLE
6599: LD_INT 2
6601: DEC
6602: ST_TO_ADDR
6603: LD_INT 3
6605: PUSH
6606: FOR_TO
6607: IFFALSE 6629
// SetClass ( kirovBaseUnits [ i ] , 3 ) ;
6609: LD_EXP 82
6613: PUSH
6614: LD_VAR 0 2
6618: ARRAY
6619: PPUSH
6620: LD_INT 3
6622: PPUSH
6623: CALL_OW 336
6627: GO 6606
6629: POP
6630: POP
// for un in selectedPeople do
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_VAR 0 4
6640: PUSH
6641: FOR_IN
6642: IFFALSE 6655
// ComExitBuilding ( un ) ;
6644: LD_VAR 0 3
6648: PPUSH
6649: CALL_OW 122
6653: GO 6641
6655: POP
6656: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
6657: LD_ADDR_EXP 81
6661: PUSH
6662: LD_VAR 0 4
6666: PUSH
6667: LD_EXP 43
6671: PUSH
6672: LD_EXP 44
6676: PUSH
6677: LD_EXP 46
6681: PUSH
6682: LD_EXP 47
6686: PUSH
6687: LD_EXP 45
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: UNION
6699: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
6700: LD_EXP 81
6704: PPUSH
6705: LD_INT 113
6707: PPUSH
6708: LD_INT 97
6710: PPUSH
6711: CALL_OW 171
// for un in kirovBaseUnits do
6715: LD_ADDR_VAR 0 3
6719: PUSH
6720: LD_EXP 82
6724: PUSH
6725: FOR_IN
6726: IFFALSE 6763
// begin if IsInUnit ( un ) = 0 then
6728: LD_VAR 0 3
6732: PPUSH
6733: CALL_OW 310
6737: PUSH
6738: LD_INT 0
6740: EQUAL
6741: IFFALSE 6761
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
6743: LD_VAR 0 3
6747: PPUSH
6748: LD_EXP 62
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: CALL_OW 120
// end ;
6761: GO 6725
6763: POP
6764: POP
// ChangeMissionObjectives ( M1 ) ;
6765: LD_STRING M1
6767: PPUSH
6768: CALL_OW 337
// Query ( QReadyInfo ) ;
6772: LD_STRING QReadyInfo
6774: PPUSH
6775: CALL_OW 97
// counterEnable := true ;
6779: LD_ADDR_EXP 84
6783: PUSH
6784: LD_INT 1
6786: ST_TO_ADDR
// SaveForQuickRestart ;
6787: CALL_OW 22
// wait ( 0 0$5 ) ;
6791: LD_INT 175
6793: PPUSH
6794: CALL_OW 67
// for un in kirovBaseUnits do
6798: LD_ADDR_VAR 0 3
6802: PUSH
6803: LD_EXP 82
6807: PUSH
6808: FOR_IN
6809: IFFALSE 6862
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
6811: LD_VAR 0 3
6815: PPUSH
6816: CALL_OW 310
6820: PUSH
6821: LD_INT 0
6823: EQUAL
6824: PUSH
6825: LD_VAR 0 3
6829: PPUSH
6830: CALL_OW 257
6834: PUSH
6835: LD_INT 2
6837: EQUAL
6838: NOT
6839: AND
6840: IFFALSE 6860
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
6842: LD_VAR 0 3
6846: PPUSH
6847: LD_EXP 62
6851: PUSH
6852: LD_INT 2
6854: ARRAY
6855: PPUSH
6856: CALL_OW 120
// end ;
6860: GO 6808
6862: POP
6863: POP
// UpgradeKirovBase ;
6864: CALL 1833 0 0
// end ;
6868: LD_VAR 0 1
6872: RET
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
6873: LD_EXP 84
6877: IFFALSE 7520
6879: GO 6881
6881: DISABLE
6882: LD_INT 0
6884: PPUSH
6885: PPUSH
6886: PPUSH
// begin enable ;
6887: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
6888: LD_ADDR_VAR 0 1
6892: PUSH
6893: LD_INT 22
6895: PUSH
6896: LD_INT 3
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 21
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 34
6918: PUSH
6919: LD_INT 51
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 69
6939: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
6940: LD_ADDR_VAR 0 2
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PPUSH
6969: CALL_OW 69
6973: PUSH
6974: LD_EXP 34
6978: PLUS
6979: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
6980: LD_ADDR_EXP 86
6984: PUSH
6985: LD_EXP 86
6989: PUSH
6990: LD_INT 35
6992: PLUS
6993: ST_TO_ADDR
// VehNeeded = hum - veh ;
6994: LD_ADDR_EXP 39
6998: PUSH
6999: LD_VAR 0 2
7003: PUSH
7004: LD_VAR 0 1
7008: MINUS
7009: ST_TO_ADDR
// timeToArabAttack = timeToArabAttack - 0 0$01 ;
7010: LD_ADDR_EXP 89
7014: PUSH
7015: LD_EXP 89
7019: PUSH
7020: LD_INT 35
7022: MINUS
7023: ST_TO_ADDR
// case counterIndex of 1 :
7024: LD_EXP 85
7028: PUSH
7029: LD_INT 1
7031: DOUBLE
7032: EQUAL
7033: IFTRUE 7037
7035: GO 7120
7037: POP
// begin if VehNeeded <= 0 then
7038: LD_EXP 39
7042: PUSH
7043: LD_INT 0
7045: LESSEQUAL
7046: IFFALSE 7074
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
7048: LD_ADDR_OWVAR 47
7052: PUSH
7053: LD_STRING #Ru03-5a
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: LD_STRING #Ru03-4
7061: PUSH
7062: LD_EXP 88
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: ADD
7071: ST_TO_ADDR
7072: GO 7104
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
7074: LD_ADDR_OWVAR 47
7078: PUSH
7079: LD_STRING #Ru03-5
7081: PUSH
7082: LD_EXP 39
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_STRING #Ru03-4
7093: PUSH
7094: LD_EXP 88
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: ADD
7103: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
7104: LD_ADDR_EXP 88
7108: PUSH
7109: LD_EXP 88
7113: PUSH
7114: LD_INT 35
7116: MINUS
7117: ST_TO_ADDR
// end ; 2 :
7118: GO 7247
7120: LD_INT 2
7122: DOUBLE
7123: EQUAL
7124: IFTRUE 7128
7126: GO 7162
7128: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
7129: LD_ADDR_OWVAR 47
7133: PUSH
7134: LD_STRING #Ru03-1
7136: PUSH
7137: LD_EXP 23
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7146: LD_ADDR_EXP 23
7150: PUSH
7151: LD_EXP 23
7155: PUSH
7156: LD_INT 35
7158: MINUS
7159: ST_TO_ADDR
// end ; 3 :
7160: GO 7247
7162: LD_INT 3
7164: DOUBLE
7165: EQUAL
7166: IFTRUE 7170
7168: GO 7204
7170: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
7171: LD_ADDR_OWVAR 47
7175: PUSH
7176: LD_STRING #Ru03-2
7178: PUSH
7179: LD_EXP 23
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
7188: LD_ADDR_EXP 23
7192: PUSH
7193: LD_EXP 23
7197: PUSH
7198: LD_INT 35
7200: MINUS
7201: ST_TO_ADDR
// end ; 4 :
7202: GO 7247
7204: LD_INT 4
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7246
7212: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
7213: LD_ADDR_OWVAR 47
7217: PUSH
7218: LD_STRING #Ru03-3
7220: PUSH
7221: LD_EXP 22
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
7230: LD_ADDR_EXP 22
7234: PUSH
7235: LD_EXP 22
7239: PUSH
7240: LD_INT 35
7242: MINUS
7243: ST_TO_ADDR
// end ; end ;
7244: GO 7247
7246: POP
// if ticks = convoyTime [ 1 ] then
7247: LD_EXP 86
7251: PUSH
7252: LD_EXP 87
7256: PUSH
7257: LD_INT 1
7259: ARRAY
7260: EQUAL
7261: IFFALSE 7520
// begin SayRadio ( Bukov , bukovMsg [ 1 ] ) ;
7263: LD_EXP 66
7267: PPUSH
7268: LD_EXP 83
7272: PUSH
7273: LD_INT 1
7275: ARRAY
7276: PPUSH
7277: CALL_OW 94
// if bukovMsg [ 1 ] = D3a-RSol1-1 then
7281: LD_EXP 83
7285: PUSH
7286: LD_INT 1
7288: ARRAY
7289: PUSH
7290: LD_STRING D3a-RSol1-1
7292: EQUAL
7293: IFFALSE 7397
// begin SayRadio ( Burlak , D3a-Bur-1 ) ;
7295: LD_EXP 43
7299: PPUSH
7300: LD_STRING D3a-Bur-1
7302: PPUSH
7303: CALL_OW 94
// if IsOk ( Gnyevko ) then
7307: LD_EXP 44
7311: PPUSH
7312: CALL_OW 302
7316: IFFALSE 7330
// Say ( Gnyevko , D3b-Gny-1 ) ;
7318: LD_EXP 44
7322: PPUSH
7323: LD_STRING D3b-Gny-1
7325: PPUSH
7326: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
7330: LD_EXP 43
7334: PPUSH
7335: LD_STRING D3b-Bur-1
7337: PPUSH
7338: CALL_OW 88
// if IsOK ( Kovalyuk ) then
7342: LD_EXP 46
7346: PPUSH
7347: CALL_OW 302
7351: IFFALSE 7365
// Say ( Kovalyuk , D3b-Kov-1 ) ;
7353: LD_EXP 46
7357: PPUSH
7358: LD_STRING D3b-Kov-1
7360: PPUSH
7361: CALL_OW 88
// Say ( Bukov , D3b-Rsol1-2 ) ;
7365: LD_EXP 66
7369: PPUSH
7370: LD_STRING D3b-Rsol1-2
7372: PPUSH
7373: CALL_OW 88
// bukovMsg := bukovMsg diff bukovMsg [ 1 ] ;
7377: LD_ADDR_EXP 83
7381: PUSH
7382: LD_EXP 83
7386: PUSH
7387: LD_EXP 83
7391: PUSH
7392: LD_INT 1
7394: ARRAY
7395: DIFF
7396: ST_TO_ADDR
// end ; PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
7397: LD_EXP 75
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PUSH
7406: LD_INT 1
7408: ARRAY
7409: PPUSH
7410: LD_EXP 75
7414: PUSH
7415: LD_INT 1
7417: ARRAY
7418: PUSH
7419: LD_INT 2
7421: ARRAY
7422: PPUSH
7423: LD_EXP 75
7427: PUSH
7428: LD_INT 1
7430: ARRAY
7431: PUSH
7432: LD_INT 3
7434: ARRAY
7435: PPUSH
7436: LD_EXP 75
7440: PUSH
7441: LD_INT 1
7443: ARRAY
7444: PUSH
7445: LD_INT 4
7447: ARRAY
7448: PPUSH
7449: LD_EXP 75
7453: PUSH
7454: LD_INT 1
7456: ARRAY
7457: PUSH
7458: LD_INT 5
7460: ARRAY
7461: PPUSH
7462: LD_INT 6
7464: PPUSH
7465: CALL 4417 0 6
// PrepareAttackOnRus ( ) ;
7469: CALL 5229 0 0
// wait ( 0 0$1 ) ;
7473: LD_INT 35
7475: PPUSH
7476: CALL_OW 67
// amConvoyGroups := amConvoyGroups diff amConvoyGroups [ 1 ] ;
7480: LD_ADDR_EXP 75
7484: PUSH
7485: LD_EXP 75
7489: PUSH
7490: LD_EXP 75
7494: PUSH
7495: LD_INT 1
7497: ARRAY
7498: DIFF
7499: ST_TO_ADDR
// convoyTime := convoyTime diff convoyTime [ 1 ] ;
7500: LD_ADDR_EXP 87
7504: PUSH
7505: LD_EXP 87
7509: PUSH
7510: LD_EXP 87
7514: PUSH
7515: LD_INT 1
7517: ARRAY
7518: DIFF
7519: ST_TO_ADDR
// end ; end ;
7520: PPOPN 3
7522: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
7523: LD_EXP 79
7527: PPUSH
7528: LD_INT 3
7530: PUSH
7531: LD_INT 24
7533: PUSH
7534: LD_INT 700
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PPUSH
7545: CALL_OW 72
7549: PUSH
7550: LD_EXP 74
7554: PPUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 24
7560: PUSH
7561: LD_INT 700
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PPUSH
7572: CALL_OW 72
7576: OR
7577: IFFALSE 7708
7579: GO 7581
7581: DISABLE
7582: LD_INT 0
7584: PPUSH
// begin enable ;
7585: ENABLE
// for i := 1 to amVehs do
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: DOUBLE
7592: LD_INT 1
7594: DEC
7595: ST_TO_ADDR
7596: LD_EXP 79
7600: PUSH
7601: FOR_TO
7602: IFFALSE 7645
// begin if GetLives ( amVehs [ i ] ) <= 700 then
7604: LD_EXP 79
7608: PUSH
7609: LD_VAR 0 1
7613: ARRAY
7614: PPUSH
7615: CALL_OW 256
7619: PUSH
7620: LD_INT 700
7622: LESSEQUAL
7623: IFFALSE 7643
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
7625: LD_EXP 79
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_INT 10
7638: PPUSH
7639: CALL_OW 113
// end ;
7643: GO 7601
7645: POP
7646: POP
// for i := 1 to amIntroUnits do
7647: LD_ADDR_VAR 0 1
7651: PUSH
7652: DOUBLE
7653: LD_INT 1
7655: DEC
7656: ST_TO_ADDR
7657: LD_EXP 74
7661: PUSH
7662: FOR_TO
7663: IFFALSE 7706
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
7665: LD_EXP 74
7669: PUSH
7670: LD_VAR 0 1
7674: ARRAY
7675: PPUSH
7676: CALL_OW 256
7680: PUSH
7681: LD_INT 700
7683: LESSEQUAL
7684: IFFALSE 7704
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
7686: LD_EXP 74
7690: PUSH
7691: LD_VAR 0 1
7695: ARRAY
7696: PPUSH
7697: LD_INT 10
7699: PPUSH
7700: CALL_OW 113
// end ;
7704: GO 7662
7706: POP
7707: POP
// end ;
7708: PPOPN 1
7710: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
7711: LD_EXP 18
7715: NOT
7716: IFFALSE 7924
7718: GO 7720
7720: DISABLE
7721: LD_INT 0
7723: PPUSH
// begin enable ;
7724: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
7725: LD_ADDR_VAR 0 1
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_INT 3
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: LD_INT 21
7742: PUSH
7743: LD_INT 2
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 23
7752: PUSH
7753: LD_INT 3
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 2
7762: PUSH
7763: LD_INT 31
7765: PUSH
7766: LD_INT 21
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 31
7775: PUSH
7776: LD_INT 23
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 69
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7922
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 48
7809: PPUSH
7810: LD_INT 81
7812: PPUSH
7813: CALL_OW 297
7817: PUSH
7818: LD_INT 7
7820: LESS
7821: IFFALSE 7920
// begin dialog_track = true ;
7823: LD_ADDR_EXP 18
7827: PUSH
7828: LD_INT 1
7830: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
7831: LD_INT 48
7833: PPUSH
7834: LD_INT 81
7836: PPUSH
7837: CALL_OW 86
// DialogueOn ;
7841: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7845: LD_EXP 43
7849: PPUSH
7850: LD_STRING D5a-Bur-1
7852: PPUSH
7853: CALL_OW 88
// DialogueOff ;
7857: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
7861: LD_INT 82
7863: PPUSH
7864: LD_INT 3
7866: PPUSH
7867: CALL_OW 321
7871: PUSH
7872: LD_INT 0
7874: EQUAL
7875: IFFALSE 7890
// SetTech ( 82 , 3 , state_enabled ) ;
7877: LD_INT 82
7879: PPUSH
7880: LD_INT 3
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
7890: LD_INT 84
7892: PPUSH
7893: LD_INT 3
7895: PPUSH
7896: LD_INT 1
7898: PPUSH
7899: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
7903: LD_INT 16
7905: PPUSH
7906: LD_INT 3
7908: PPUSH
7909: LD_INT 1
7911: PPUSH
7912: CALL_OW 324
// exit ;
7916: POP
7917: POP
7918: GO 7924
// end ;
7920: GO 7799
7922: POP
7923: POP
// end ;
7924: PPOPN 1
7926: END
// every 5 5$30 do
7927: GO 7929
7929: DISABLE
// begin PrepareScholtze ;
7930: CALL 2394 0 0
// wait ( 0 0$2 ) ;
7934: LD_INT 70
7936: PPUSH
7937: CALL_OW 67
// DialogueOn ;
7941: CALL_OW 6
// SayNoFaceRadio ( Scholtze2 , D4-Sch-1 ) ;
7945: LD_EXP 68
7949: PPUSH
7950: LD_STRING D4-Sch-1
7952: PPUSH
7953: CALL 49000 0 2
// SayRadio ( Burlak , D4-Bur-1 ) ;
7957: LD_EXP 43
7961: PPUSH
7962: LD_STRING D4-Bur-1
7964: PPUSH
7965: CALL_OW 94
// DialogueOff ;
7969: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
7973: LD_STRING M4
7975: PPUSH
7976: CALL_OW 337
// ComHold ( Scholtze ) ;
7980: LD_EXP 67
7984: PPUSH
7985: CALL_OW 140
// scholtzeSpawned = true ;
7989: LD_ADDR_EXP 14
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// end ;
7997: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
7998: LD_INT 3
8000: PPUSH
8001: LD_EXP 67
8005: PPUSH
8006: CALL_OW 292
8010: PUSH
8011: LD_EXP 14
8015: AND
8016: PUSH
8017: LD_EXP 15
8021: NOT
8022: AND
8023: IFFALSE 8189
8025: GO 8027
8027: DISABLE
// begin scholtzeSaved = true ;
8028: LD_ADDR_EXP 15
8032: PUSH
8033: LD_INT 1
8035: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
8036: LD_EXP 67
8040: PPUSH
8041: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
8045: LD_EXP 67
8049: PPUSH
8050: LD_INT 3
8052: PPUSH
8053: CALL_OW 235
// DialogueOn ;
8057: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
8061: LD_EXP 67
8065: PPUSH
8066: LD_STRING D4a-Sch-1
8068: PPUSH
8069: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
8073: LD_EXP 43
8077: PPUSH
8078: LD_STRING D4a-Bur-1
8080: PPUSH
8081: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
8085: LD_EXP 67
8089: PPUSH
8090: LD_STRING D4a-Sch-2
8092: PPUSH
8093: CALL_OW 88
// DialogueOff ;
8097: CALL_OW 7
// ChangeMissionObjectives ( MScholtzeOut ) ;
8101: LD_STRING MScholtzeOut
8103: PPUSH
8104: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
8108: LD_INT 49
8110: PPUSH
8111: LD_INT 3
8113: PPUSH
8114: LD_INT 1
8116: PPUSH
8117: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
8121: LD_INT 51
8123: PPUSH
8124: LD_INT 3
8126: PPUSH
8127: LD_INT 1
8129: PPUSH
8130: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
8134: LD_INT 82
8136: PPUSH
8137: LD_INT 3
8139: PPUSH
8140: CALL_OW 321
8144: PUSH
8145: LD_INT 0
8147: EQUAL
8148: IFFALSE 8163
// SetTech ( 82 , 3 , state_enabled ) ;
8150: LD_INT 82
8152: PPUSH
8153: LD_INT 3
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
8163: LD_INT 83
8165: PPUSH
8166: LD_INT 3
8168: PPUSH
8169: LD_INT 1
8171: PPUSH
8172: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
8176: LD_INT 19
8178: PPUSH
8179: LD_INT 3
8181: PPUSH
8182: LD_INT 1
8184: PPUSH
8185: CALL_OW 324
// end ; end_of_file
8189: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8190: LD_INT 0
8192: PPUSH
// ar_miner := 81 ;
8193: LD_ADDR_EXP 97
8197: PUSH
8198: LD_INT 81
8200: ST_TO_ADDR
// ar_crane := 88 ;
8201: LD_ADDR_EXP 96
8205: PUSH
8206: LD_INT 88
8208: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8209: LD_ADDR_EXP 91
8213: PUSH
8214: LD_INT 89
8216: ST_TO_ADDR
// us_hack := 99 ;
8217: LD_ADDR_EXP 92
8221: PUSH
8222: LD_INT 99
8224: ST_TO_ADDR
// us_artillery := 97 ;
8225: LD_ADDR_EXP 93
8229: PUSH
8230: LD_INT 97
8232: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8233: LD_ADDR_EXP 94
8237: PUSH
8238: LD_INT 91
8240: ST_TO_ADDR
// ar_mortar := 92 ;
8241: LD_ADDR_EXP 95
8245: PUSH
8246: LD_INT 92
8248: ST_TO_ADDR
// ru_flamethrower := 93 ;
8249: LD_ADDR_EXP 98
8253: PUSH
8254: LD_INT 93
8256: ST_TO_ADDR
// ru_radar := 98 ;
8257: LD_ADDR_EXP 90
8261: PUSH
8262: LD_INT 98
8264: ST_TO_ADDR
// tech_Artillery := 80 ;
8265: LD_ADDR_EXP 99
8269: PUSH
8270: LD_INT 80
8272: ST_TO_ADDR
// tech_RadMat := 81 ;
8273: LD_ADDR_EXP 100
8277: PUSH
8278: LD_INT 81
8280: ST_TO_ADDR
// tech_BasicTools := 82 ;
8281: LD_ADDR_EXP 101
8285: PUSH
8286: LD_INT 82
8288: ST_TO_ADDR
// tech_Cargo := 83 ;
8289: LD_ADDR_EXP 102
8293: PUSH
8294: LD_INT 83
8296: ST_TO_ADDR
// tech_Track := 84 ;
8297: LD_ADDR_EXP 103
8301: PUSH
8302: LD_INT 84
8304: ST_TO_ADDR
// tech_Crane := 85 ;
8305: LD_ADDR_EXP 104
8309: PUSH
8310: LD_INT 85
8312: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8313: LD_ADDR_EXP 105
8317: PUSH
8318: LD_INT 86
8320: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8321: LD_ADDR_EXP 106
8325: PUSH
8326: LD_INT 87
8328: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8329: LD_ADDR_EXP 107
8333: PUSH
8334: LD_INT 88
8336: ST_TO_ADDR
// class_mastodont := 31 ;
8337: LD_ADDR_EXP 108
8341: PUSH
8342: LD_INT 31
8344: ST_TO_ADDR
// class_horse := 21 ;
8345: LD_ADDR_EXP 109
8349: PUSH
8350: LD_INT 21
8352: ST_TO_ADDR
// end ;
8353: LD_VAR 0 1
8357: RET
// every 1 do
8358: GO 8360
8360: DISABLE
// InitGlobalVariables ; end_of_file
8361: CALL 8190 0 0
8365: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8366: LD_INT 0
8368: PPUSH
8369: PPUSH
// if exist_mode then
8370: LD_VAR 0 2
8374: IFFALSE 8399
// unit := CreateCharacter ( prefix & ident ) else
8376: LD_ADDR_VAR 0 5
8380: PUSH
8381: LD_VAR 0 3
8385: PUSH
8386: LD_VAR 0 1
8390: STR
8391: PPUSH
8392: CALL_OW 34
8396: ST_TO_ADDR
8397: GO 8414
// unit := NewCharacter ( ident ) ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_VAR 0 1
8408: PPUSH
8409: CALL_OW 25
8413: ST_TO_ADDR
// result := unit ;
8414: LD_ADDR_VAR 0 4
8418: PUSH
8419: LD_VAR 0 5
8423: ST_TO_ADDR
// end ;
8424: LD_VAR 0 4
8428: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
// if not side or not nation then
8433: LD_VAR 0 1
8437: NOT
8438: PUSH
8439: LD_VAR 0 2
8443: NOT
8444: OR
8445: IFFALSE 8449
// exit ;
8447: GO 9217
// case nation of nation_american :
8449: LD_VAR 0 2
8453: PUSH
8454: LD_INT 1
8456: DOUBLE
8457: EQUAL
8458: IFTRUE 8462
8460: GO 8676
8462: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8463: LD_ADDR_VAR 0 4
8467: PUSH
8468: LD_INT 35
8470: PUSH
8471: LD_INT 45
8473: PUSH
8474: LD_INT 46
8476: PUSH
8477: LD_INT 47
8479: PUSH
8480: LD_INT 82
8482: PUSH
8483: LD_INT 83
8485: PUSH
8486: LD_INT 84
8488: PUSH
8489: LD_INT 85
8491: PUSH
8492: LD_INT 86
8494: PUSH
8495: LD_INT 1
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: LD_INT 6
8503: PUSH
8504: LD_INT 15
8506: PUSH
8507: LD_INT 16
8509: PUSH
8510: LD_INT 7
8512: PUSH
8513: LD_INT 12
8515: PUSH
8516: LD_INT 13
8518: PUSH
8519: LD_INT 10
8521: PUSH
8522: LD_INT 14
8524: PUSH
8525: LD_INT 20
8527: PUSH
8528: LD_INT 21
8530: PUSH
8531: LD_INT 22
8533: PUSH
8534: LD_INT 25
8536: PUSH
8537: LD_INT 32
8539: PUSH
8540: LD_INT 27
8542: PUSH
8543: LD_INT 36
8545: PUSH
8546: LD_INT 69
8548: PUSH
8549: LD_INT 39
8551: PUSH
8552: LD_INT 34
8554: PUSH
8555: LD_INT 40
8557: PUSH
8558: LD_INT 48
8560: PUSH
8561: LD_INT 49
8563: PUSH
8564: LD_INT 50
8566: PUSH
8567: LD_INT 51
8569: PUSH
8570: LD_INT 52
8572: PUSH
8573: LD_INT 53
8575: PUSH
8576: LD_INT 54
8578: PUSH
8579: LD_INT 55
8581: PUSH
8582: LD_INT 56
8584: PUSH
8585: LD_INT 57
8587: PUSH
8588: LD_INT 58
8590: PUSH
8591: LD_INT 59
8593: PUSH
8594: LD_INT 60
8596: PUSH
8597: LD_INT 61
8599: PUSH
8600: LD_INT 62
8602: PUSH
8603: LD_INT 80
8605: PUSH
8606: LD_INT 82
8608: PUSH
8609: LD_INT 83
8611: PUSH
8612: LD_INT 84
8614: PUSH
8615: LD_INT 85
8617: PUSH
8618: LD_INT 86
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
8674: GO 9141
8676: LD_INT 2
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8910
8684: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8685: LD_ADDR_VAR 0 4
8689: PUSH
8690: LD_INT 35
8692: PUSH
8693: LD_INT 45
8695: PUSH
8696: LD_INT 46
8698: PUSH
8699: LD_INT 47
8701: PUSH
8702: LD_INT 82
8704: PUSH
8705: LD_INT 83
8707: PUSH
8708: LD_INT 84
8710: PUSH
8711: LD_INT 85
8713: PUSH
8714: LD_INT 87
8716: PUSH
8717: LD_INT 70
8719: PUSH
8720: LD_INT 1
8722: PUSH
8723: LD_INT 11
8725: PUSH
8726: LD_INT 3
8728: PUSH
8729: LD_INT 4
8731: PUSH
8732: LD_INT 5
8734: PUSH
8735: LD_INT 6
8737: PUSH
8738: LD_INT 15
8740: PUSH
8741: LD_INT 18
8743: PUSH
8744: LD_INT 7
8746: PUSH
8747: LD_INT 17
8749: PUSH
8750: LD_INT 8
8752: PUSH
8753: LD_INT 20
8755: PUSH
8756: LD_INT 21
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_INT 72
8764: PUSH
8765: LD_INT 26
8767: PUSH
8768: LD_INT 69
8770: PUSH
8771: LD_INT 39
8773: PUSH
8774: LD_INT 40
8776: PUSH
8777: LD_INT 41
8779: PUSH
8780: LD_INT 42
8782: PUSH
8783: LD_INT 43
8785: PUSH
8786: LD_INT 48
8788: PUSH
8789: LD_INT 49
8791: PUSH
8792: LD_INT 50
8794: PUSH
8795: LD_INT 51
8797: PUSH
8798: LD_INT 52
8800: PUSH
8801: LD_INT 53
8803: PUSH
8804: LD_INT 54
8806: PUSH
8807: LD_INT 55
8809: PUSH
8810: LD_INT 56
8812: PUSH
8813: LD_INT 60
8815: PUSH
8816: LD_INT 61
8818: PUSH
8819: LD_INT 62
8821: PUSH
8822: LD_INT 66
8824: PUSH
8825: LD_INT 67
8827: PUSH
8828: LD_INT 68
8830: PUSH
8831: LD_INT 81
8833: PUSH
8834: LD_INT 82
8836: PUSH
8837: LD_INT 83
8839: PUSH
8840: LD_INT 84
8842: PUSH
8843: LD_INT 85
8845: PUSH
8846: LD_INT 87
8848: PUSH
8849: LD_INT 88
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: ST_TO_ADDR
8908: GO 9141
8910: LD_INT 3
8912: DOUBLE
8913: EQUAL
8914: IFTRUE 8918
8916: GO 9140
8918: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8919: LD_ADDR_VAR 0 4
8923: PUSH
8924: LD_INT 46
8926: PUSH
8927: LD_INT 47
8929: PUSH
8930: LD_INT 1
8932: PUSH
8933: LD_INT 2
8935: PUSH
8936: LD_INT 82
8938: PUSH
8939: LD_INT 83
8941: PUSH
8942: LD_INT 84
8944: PUSH
8945: LD_INT 85
8947: PUSH
8948: LD_INT 86
8950: PUSH
8951: LD_INT 11
8953: PUSH
8954: LD_INT 9
8956: PUSH
8957: LD_INT 20
8959: PUSH
8960: LD_INT 19
8962: PUSH
8963: LD_INT 21
8965: PUSH
8966: LD_INT 24
8968: PUSH
8969: LD_INT 22
8971: PUSH
8972: LD_INT 25
8974: PUSH
8975: LD_INT 28
8977: PUSH
8978: LD_INT 29
8980: PUSH
8981: LD_INT 30
8983: PUSH
8984: LD_INT 31
8986: PUSH
8987: LD_INT 37
8989: PUSH
8990: LD_INT 38
8992: PUSH
8993: LD_INT 32
8995: PUSH
8996: LD_INT 27
8998: PUSH
8999: LD_INT 33
9001: PUSH
9002: LD_INT 69
9004: PUSH
9005: LD_INT 39
9007: PUSH
9008: LD_INT 34
9010: PUSH
9011: LD_INT 40
9013: PUSH
9014: LD_INT 71
9016: PUSH
9017: LD_INT 23
9019: PUSH
9020: LD_INT 44
9022: PUSH
9023: LD_INT 48
9025: PUSH
9026: LD_INT 49
9028: PUSH
9029: LD_INT 50
9031: PUSH
9032: LD_INT 51
9034: PUSH
9035: LD_INT 52
9037: PUSH
9038: LD_INT 53
9040: PUSH
9041: LD_INT 54
9043: PUSH
9044: LD_INT 55
9046: PUSH
9047: LD_INT 56
9049: PUSH
9050: LD_INT 57
9052: PUSH
9053: LD_INT 58
9055: PUSH
9056: LD_INT 59
9058: PUSH
9059: LD_INT 63
9061: PUSH
9062: LD_INT 64
9064: PUSH
9065: LD_INT 65
9067: PUSH
9068: LD_INT 82
9070: PUSH
9071: LD_INT 83
9073: PUSH
9074: LD_INT 84
9076: PUSH
9077: LD_INT 85
9079: PUSH
9080: LD_INT 86
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: ST_TO_ADDR
9138: GO 9141
9140: POP
// if state > - 1 and state < 3 then
9141: LD_VAR 0 3
9145: PUSH
9146: LD_INT 1
9148: NEG
9149: GREATER
9150: PUSH
9151: LD_VAR 0 3
9155: PUSH
9156: LD_INT 3
9158: LESS
9159: AND
9160: IFFALSE 9217
// for i in result do
9162: LD_ADDR_VAR 0 5
9166: PUSH
9167: LD_VAR 0 4
9171: PUSH
9172: FOR_IN
9173: IFFALSE 9215
// if GetTech ( i , side ) <> state then
9175: LD_VAR 0 5
9179: PPUSH
9180: LD_VAR 0 1
9184: PPUSH
9185: CALL_OW 321
9189: PUSH
9190: LD_VAR 0 3
9194: NONEQUAL
9195: IFFALSE 9213
// result := result diff i ;
9197: LD_ADDR_VAR 0 4
9201: PUSH
9202: LD_VAR 0 4
9206: PUSH
9207: LD_VAR 0 5
9211: DIFF
9212: ST_TO_ADDR
9213: GO 9172
9215: POP
9216: POP
// end ;
9217: LD_VAR 0 4
9221: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9222: LD_INT 0
9224: PPUSH
9225: PPUSH
9226: PPUSH
// result := true ;
9227: LD_ADDR_VAR 0 3
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9235: LD_ADDR_VAR 0 5
9239: PUSH
9240: LD_VAR 0 2
9244: PPUSH
9245: CALL_OW 480
9249: ST_TO_ADDR
// if not tmp then
9250: LD_VAR 0 5
9254: NOT
9255: IFFALSE 9259
// exit ;
9257: GO 9308
// for i in tmp do
9259: LD_ADDR_VAR 0 4
9263: PUSH
9264: LD_VAR 0 5
9268: PUSH
9269: FOR_IN
9270: IFFALSE 9306
// if GetTech ( i , side ) <> state_researched then
9272: LD_VAR 0 4
9276: PPUSH
9277: LD_VAR 0 1
9281: PPUSH
9282: CALL_OW 321
9286: PUSH
9287: LD_INT 2
9289: NONEQUAL
9290: IFFALSE 9304
// begin result := false ;
9292: LD_ADDR_VAR 0 3
9296: PUSH
9297: LD_INT 0
9299: ST_TO_ADDR
// exit ;
9300: POP
9301: POP
9302: GO 9308
// end ;
9304: GO 9269
9306: POP
9307: POP
// end ;
9308: LD_VAR 0 3
9312: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9313: LD_INT 0
9315: PPUSH
9316: PPUSH
9317: PPUSH
9318: PPUSH
9319: PPUSH
9320: PPUSH
9321: PPUSH
9322: PPUSH
9323: PPUSH
9324: PPUSH
9325: PPUSH
9326: PPUSH
9327: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9328: LD_VAR 0 1
9332: NOT
9333: PUSH
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL_OW 257
9343: PUSH
9344: LD_INT 9
9346: NONEQUAL
9347: OR
9348: IFFALSE 9352
// exit ;
9350: GO 9925
// side := GetSide ( unit ) ;
9352: LD_ADDR_VAR 0 9
9356: PUSH
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL_OW 255
9366: ST_TO_ADDR
// tech_space := tech_spacanom ;
9367: LD_ADDR_VAR 0 12
9371: PUSH
9372: LD_INT 29
9374: ST_TO_ADDR
// tech_time := tech_taurad ;
9375: LD_ADDR_VAR 0 13
9379: PUSH
9380: LD_INT 28
9382: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9383: LD_ADDR_VAR 0 11
9387: PUSH
9388: LD_VAR 0 1
9392: PPUSH
9393: CALL_OW 310
9397: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9398: LD_VAR 0 11
9402: PPUSH
9403: CALL_OW 247
9407: PUSH
9408: LD_INT 2
9410: EQUAL
9411: IFFALSE 9415
// exit ;
9413: GO 9925
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9415: LD_ADDR_VAR 0 8
9419: PUSH
9420: LD_INT 81
9422: PUSH
9423: LD_VAR 0 9
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 3
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 3
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 69
9457: ST_TO_ADDR
// if not tmp then
9458: LD_VAR 0 8
9462: NOT
9463: IFFALSE 9467
// exit ;
9465: GO 9925
// if in_unit then
9467: LD_VAR 0 11
9471: IFFALSE 9495
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9473: LD_ADDR_VAR 0 10
9477: PUSH
9478: LD_VAR 0 8
9482: PPUSH
9483: LD_VAR 0 11
9487: PPUSH
9488: CALL_OW 74
9492: ST_TO_ADDR
9493: GO 9515
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9495: LD_ADDR_VAR 0 10
9499: PUSH
9500: LD_VAR 0 8
9504: PPUSH
9505: LD_VAR 0 1
9509: PPUSH
9510: CALL_OW 74
9514: ST_TO_ADDR
// if not enemy then
9515: LD_VAR 0 10
9519: NOT
9520: IFFALSE 9524
// exit ;
9522: GO 9925
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9524: LD_VAR 0 11
9528: PUSH
9529: LD_VAR 0 11
9533: PPUSH
9534: LD_VAR 0 10
9538: PPUSH
9539: CALL_OW 296
9543: PUSH
9544: LD_INT 13
9546: GREATER
9547: AND
9548: PUSH
9549: LD_VAR 0 1
9553: PPUSH
9554: LD_VAR 0 10
9558: PPUSH
9559: CALL_OW 296
9563: PUSH
9564: LD_INT 12
9566: GREATER
9567: OR
9568: IFFALSE 9572
// exit ;
9570: GO 9925
// missile := [ 1 ] ;
9572: LD_ADDR_VAR 0 14
9576: PUSH
9577: LD_INT 1
9579: PUSH
9580: EMPTY
9581: LIST
9582: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9583: LD_VAR 0 9
9587: PPUSH
9588: LD_VAR 0 12
9592: PPUSH
9593: CALL_OW 325
9597: IFFALSE 9626
// missile := Replace ( missile , missile + 1 , 2 ) ;
9599: LD_ADDR_VAR 0 14
9603: PUSH
9604: LD_VAR 0 14
9608: PPUSH
9609: LD_VAR 0 14
9613: PUSH
9614: LD_INT 1
9616: PLUS
9617: PPUSH
9618: LD_INT 2
9620: PPUSH
9621: CALL_OW 1
9625: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9626: LD_VAR 0 9
9630: PPUSH
9631: LD_VAR 0 13
9635: PPUSH
9636: CALL_OW 325
9640: PUSH
9641: LD_VAR 0 10
9645: PPUSH
9646: CALL_OW 255
9650: PPUSH
9651: LD_VAR 0 13
9655: PPUSH
9656: CALL_OW 325
9660: NOT
9661: AND
9662: IFFALSE 9691
// missile := Replace ( missile , missile + 1 , 3 ) ;
9664: LD_ADDR_VAR 0 14
9668: PUSH
9669: LD_VAR 0 14
9673: PPUSH
9674: LD_VAR 0 14
9678: PUSH
9679: LD_INT 1
9681: PLUS
9682: PPUSH
9683: LD_INT 3
9685: PPUSH
9686: CALL_OW 1
9690: ST_TO_ADDR
// if missile < 2 then
9691: LD_VAR 0 14
9695: PUSH
9696: LD_INT 2
9698: LESS
9699: IFFALSE 9703
// exit ;
9701: GO 9925
// x := GetX ( enemy ) ;
9703: LD_ADDR_VAR 0 4
9707: PUSH
9708: LD_VAR 0 10
9712: PPUSH
9713: CALL_OW 250
9717: ST_TO_ADDR
// y := GetY ( enemy ) ;
9718: LD_ADDR_VAR 0 5
9722: PUSH
9723: LD_VAR 0 10
9727: PPUSH
9728: CALL_OW 251
9732: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9733: LD_ADDR_VAR 0 6
9737: PUSH
9738: LD_VAR 0 4
9742: PUSH
9743: LD_INT 1
9745: NEG
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: CALL_OW 12
9754: PLUS
9755: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9756: LD_ADDR_VAR 0 7
9760: PUSH
9761: LD_VAR 0 5
9765: PUSH
9766: LD_INT 1
9768: NEG
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: CALL_OW 12
9777: PLUS
9778: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9779: LD_VAR 0 6
9783: PPUSH
9784: LD_VAR 0 7
9788: PPUSH
9789: CALL_OW 488
9793: NOT
9794: IFFALSE 9816
// begin _x := x ;
9796: LD_ADDR_VAR 0 6
9800: PUSH
9801: LD_VAR 0 4
9805: ST_TO_ADDR
// _y := y ;
9806: LD_ADDR_VAR 0 7
9810: PUSH
9811: LD_VAR 0 5
9815: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: LD_INT 1
9823: PPUSH
9824: LD_VAR 0 14
9828: PPUSH
9829: CALL_OW 12
9833: ST_TO_ADDR
// case i of 1 :
9834: LD_VAR 0 3
9838: PUSH
9839: LD_INT 1
9841: DOUBLE
9842: EQUAL
9843: IFTRUE 9847
9845: GO 9864
9847: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_VAR 0 10
9857: PPUSH
9858: CALL_OW 115
9862: GO 9925
9864: LD_INT 2
9866: DOUBLE
9867: EQUAL
9868: IFTRUE 9872
9870: GO 9894
9872: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9873: LD_VAR 0 1
9877: PPUSH
9878: LD_VAR 0 6
9882: PPUSH
9883: LD_VAR 0 7
9887: PPUSH
9888: CALL_OW 153
9892: GO 9925
9894: LD_INT 3
9896: DOUBLE
9897: EQUAL
9898: IFTRUE 9902
9900: GO 9924
9902: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9903: LD_VAR 0 1
9907: PPUSH
9908: LD_VAR 0 6
9912: PPUSH
9913: LD_VAR 0 7
9917: PPUSH
9918: CALL_OW 154
9922: GO 9925
9924: POP
// end ;
9925: LD_VAR 0 2
9929: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9930: LD_INT 0
9932: PPUSH
9933: PPUSH
9934: PPUSH
9935: PPUSH
9936: PPUSH
9937: PPUSH
// if not unit or not building then
9938: LD_VAR 0 1
9942: NOT
9943: PUSH
9944: LD_VAR 0 2
9948: NOT
9949: OR
9950: IFFALSE 9954
// exit ;
9952: GO 10112
// x := GetX ( building ) ;
9954: LD_ADDR_VAR 0 5
9958: PUSH
9959: LD_VAR 0 2
9963: PPUSH
9964: CALL_OW 250
9968: ST_TO_ADDR
// y := GetY ( building ) ;
9969: LD_ADDR_VAR 0 6
9973: PUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: CALL_OW 251
9983: ST_TO_ADDR
// for i = 0 to 5 do
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: DOUBLE
9990: LD_INT 0
9992: DEC
9993: ST_TO_ADDR
9994: LD_INT 5
9996: PUSH
9997: FOR_TO
9998: IFFALSE 10110
// begin _x := ShiftX ( x , i , 3 ) ;
10000: LD_ADDR_VAR 0 7
10004: PUSH
10005: LD_VAR 0 5
10009: PPUSH
10010: LD_VAR 0 4
10014: PPUSH
10015: LD_INT 3
10017: PPUSH
10018: CALL_OW 272
10022: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10023: LD_ADDR_VAR 0 8
10027: PUSH
10028: LD_VAR 0 6
10032: PPUSH
10033: LD_VAR 0 4
10037: PPUSH
10038: LD_INT 3
10040: PPUSH
10041: CALL_OW 273
10045: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10046: LD_VAR 0 7
10050: PPUSH
10051: LD_VAR 0 8
10055: PPUSH
10056: CALL_OW 488
10060: NOT
10061: IFFALSE 10065
// continue ;
10063: GO 9997
// if HexInfo ( _x , _y ) = 0 then
10065: LD_VAR 0 7
10069: PPUSH
10070: LD_VAR 0 8
10074: PPUSH
10075: CALL_OW 428
10079: PUSH
10080: LD_INT 0
10082: EQUAL
10083: IFFALSE 10108
// begin ComMoveXY ( unit , _x , _y ) ;
10085: LD_VAR 0 1
10089: PPUSH
10090: LD_VAR 0 7
10094: PPUSH
10095: LD_VAR 0 8
10099: PPUSH
10100: CALL_OW 111
// exit ;
10104: POP
10105: POP
10106: GO 10112
// end ; end ;
10108: GO 9997
10110: POP
10111: POP
// end ;
10112: LD_VAR 0 3
10116: RET
// export function ScanBase ( side , base_area ) ; begin
10117: LD_INT 0
10119: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10120: LD_ADDR_VAR 0 3
10124: PUSH
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 81
10132: PUSH
10133: LD_VAR 0 1
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 70
10146: ST_TO_ADDR
// end ;
10147: LD_VAR 0 3
10151: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10152: LD_INT 0
10154: PPUSH
10155: PPUSH
10156: PPUSH
10157: PPUSH
// result := false ;
10158: LD_ADDR_VAR 0 2
10162: PUSH
10163: LD_INT 0
10165: ST_TO_ADDR
// side := GetSide ( unit ) ;
10166: LD_ADDR_VAR 0 3
10170: PUSH
10171: LD_VAR 0 1
10175: PPUSH
10176: CALL_OW 255
10180: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10181: LD_ADDR_VAR 0 4
10185: PUSH
10186: LD_VAR 0 1
10190: PPUSH
10191: CALL_OW 248
10195: ST_TO_ADDR
// case nat of 1 :
10196: LD_VAR 0 4
10200: PUSH
10201: LD_INT 1
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 10220
10209: POP
// tech := tech_lassight ; 2 :
10210: LD_ADDR_VAR 0 5
10214: PUSH
10215: LD_INT 12
10217: ST_TO_ADDR
10218: GO 10259
10220: LD_INT 2
10222: DOUBLE
10223: EQUAL
10224: IFTRUE 10228
10226: GO 10239
10228: POP
// tech := tech_mortar ; 3 :
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: LD_INT 41
10236: ST_TO_ADDR
10237: GO 10259
10239: LD_INT 3
10241: DOUBLE
10242: EQUAL
10243: IFTRUE 10247
10245: GO 10258
10247: POP
// tech := tech_bazooka ; end ;
10248: LD_ADDR_VAR 0 5
10252: PUSH
10253: LD_INT 44
10255: ST_TO_ADDR
10256: GO 10259
10258: POP
// if Researched ( side , tech ) then
10259: LD_VAR 0 3
10263: PPUSH
10264: LD_VAR 0 5
10268: PPUSH
10269: CALL_OW 325
10273: IFFALSE 10300
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10275: LD_ADDR_VAR 0 2
10279: PUSH
10280: LD_INT 5
10282: PUSH
10283: LD_INT 8
10285: PUSH
10286: LD_INT 9
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_VAR 0 4
10298: ARRAY
10299: ST_TO_ADDR
// end ;
10300: LD_VAR 0 2
10304: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10305: LD_INT 0
10307: PPUSH
10308: PPUSH
10309: PPUSH
// if not mines then
10310: LD_VAR 0 2
10314: NOT
10315: IFFALSE 10319
// exit ;
10317: GO 10463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10319: LD_ADDR_VAR 0 5
10323: PUSH
10324: LD_INT 81
10326: PUSH
10327: LD_VAR 0 1
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 3
10338: PUSH
10339: LD_INT 21
10341: PUSH
10342: LD_INT 3
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PPUSH
10357: CALL_OW 69
10361: ST_TO_ADDR
// for i in mines do
10362: LD_ADDR_VAR 0 4
10366: PUSH
10367: LD_VAR 0 2
10371: PUSH
10372: FOR_IN
10373: IFFALSE 10461
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10375: LD_VAR 0 4
10379: PUSH
10380: LD_INT 1
10382: ARRAY
10383: PPUSH
10384: LD_VAR 0 4
10388: PUSH
10389: LD_INT 2
10391: ARRAY
10392: PPUSH
10393: CALL_OW 458
10397: NOT
10398: IFFALSE 10402
// continue ;
10400: GO 10372
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10402: LD_VAR 0 4
10406: PUSH
10407: LD_INT 1
10409: ARRAY
10410: PPUSH
10411: LD_VAR 0 4
10415: PUSH
10416: LD_INT 2
10418: ARRAY
10419: PPUSH
10420: CALL_OW 428
10424: PUSH
10425: LD_VAR 0 5
10429: IN
10430: IFFALSE 10459
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10432: LD_VAR 0 4
10436: PUSH
10437: LD_INT 1
10439: ARRAY
10440: PPUSH
10441: LD_VAR 0 4
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PPUSH
10450: LD_VAR 0 1
10454: PPUSH
10455: CALL_OW 456
// end ;
10459: GO 10372
10461: POP
10462: POP
// end ;
10463: LD_VAR 0 3
10467: RET
// export function Count ( array ) ; var i ; begin
10468: LD_INT 0
10470: PPUSH
10471: PPUSH
// result := 0 ;
10472: LD_ADDR_VAR 0 2
10476: PUSH
10477: LD_INT 0
10479: ST_TO_ADDR
// for i in array do
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_VAR 0 1
10489: PUSH
10490: FOR_IN
10491: IFFALSE 10515
// if i then
10493: LD_VAR 0 3
10497: IFFALSE 10513
// result := result + 1 ;
10499: LD_ADDR_VAR 0 2
10503: PUSH
10504: LD_VAR 0 2
10508: PUSH
10509: LD_INT 1
10511: PLUS
10512: ST_TO_ADDR
10513: GO 10490
10515: POP
10516: POP
// end ;
10517: LD_VAR 0 2
10521: RET
// export function IsEmpty ( building ) ; begin
10522: LD_INT 0
10524: PPUSH
// if not building then
10525: LD_VAR 0 1
10529: NOT
10530: IFFALSE 10534
// exit ;
10532: GO 10577
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10534: LD_ADDR_VAR 0 2
10538: PUSH
10539: LD_VAR 0 1
10543: PUSH
10544: LD_INT 22
10546: PUSH
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 255
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 58
10563: PUSH
10564: EMPTY
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 69
10575: IN
10576: ST_TO_ADDR
// end ;
10577: LD_VAR 0 2
10581: RET
// export function IsNotFull ( building ) ; begin
10582: LD_INT 0
10584: PPUSH
// if not building then
10585: LD_VAR 0 1
10589: NOT
10590: IFFALSE 10594
// exit ;
10592: GO 10613
// result := UnitsInside ( building ) < 6 ;
10594: LD_ADDR_VAR 0 2
10598: PUSH
10599: LD_VAR 0 1
10603: PPUSH
10604: CALL_OW 313
10608: PUSH
10609: LD_INT 6
10611: LESS
10612: ST_TO_ADDR
// end ;
10613: LD_VAR 0 2
10617: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10618: LD_INT 0
10620: PPUSH
10621: PPUSH
10622: PPUSH
10623: PPUSH
// tmp := [ ] ;
10624: LD_ADDR_VAR 0 3
10628: PUSH
10629: EMPTY
10630: ST_TO_ADDR
// list := [ ] ;
10631: LD_ADDR_VAR 0 5
10635: PUSH
10636: EMPTY
10637: ST_TO_ADDR
// for i = 16 to 25 do
10638: LD_ADDR_VAR 0 4
10642: PUSH
10643: DOUBLE
10644: LD_INT 16
10646: DEC
10647: ST_TO_ADDR
10648: LD_INT 25
10650: PUSH
10651: FOR_TO
10652: IFFALSE 10725
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10654: LD_ADDR_VAR 0 3
10658: PUSH
10659: LD_VAR 0 3
10663: PUSH
10664: LD_INT 22
10666: PUSH
10667: LD_VAR 0 1
10671: PPUSH
10672: CALL_OW 255
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 91
10683: PUSH
10684: LD_VAR 0 1
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 30
10699: PUSH
10700: LD_VAR 0 4
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: PPUSH
10717: CALL_OW 69
10721: ADD
10722: ST_TO_ADDR
10723: GO 10651
10725: POP
10726: POP
// for i = 1 to tmp do
10727: LD_ADDR_VAR 0 4
10731: PUSH
10732: DOUBLE
10733: LD_INT 1
10735: DEC
10736: ST_TO_ADDR
10737: LD_VAR 0 3
10741: PUSH
10742: FOR_TO
10743: IFFALSE 10831
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10745: LD_ADDR_VAR 0 5
10749: PUSH
10750: LD_VAR 0 5
10754: PUSH
10755: LD_VAR 0 3
10759: PUSH
10760: LD_VAR 0 4
10764: ARRAY
10765: PPUSH
10766: CALL_OW 266
10770: PUSH
10771: LD_VAR 0 3
10775: PUSH
10776: LD_VAR 0 4
10780: ARRAY
10781: PPUSH
10782: CALL_OW 250
10786: PUSH
10787: LD_VAR 0 3
10791: PUSH
10792: LD_VAR 0 4
10796: ARRAY
10797: PPUSH
10798: CALL_OW 251
10802: PUSH
10803: LD_VAR 0 3
10807: PUSH
10808: LD_VAR 0 4
10812: ARRAY
10813: PPUSH
10814: CALL_OW 254
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: EMPTY
10826: LIST
10827: ADD
10828: ST_TO_ADDR
10829: GO 10742
10831: POP
10832: POP
// result := list ;
10833: LD_ADDR_VAR 0 2
10837: PUSH
10838: LD_VAR 0 5
10842: ST_TO_ADDR
// end ;
10843: LD_VAR 0 2
10847: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10848: LD_INT 0
10850: PPUSH
10851: PPUSH
10852: PPUSH
10853: PPUSH
10854: PPUSH
10855: PPUSH
10856: PPUSH
// if not factory then
10857: LD_VAR 0 1
10861: NOT
10862: IFFALSE 10866
// exit ;
10864: GO 11459
// if control = control_apeman then
10866: LD_VAR 0 4
10870: PUSH
10871: LD_INT 5
10873: EQUAL
10874: IFFALSE 10983
// begin tmp := UnitsInside ( factory ) ;
10876: LD_ADDR_VAR 0 8
10880: PUSH
10881: LD_VAR 0 1
10885: PPUSH
10886: CALL_OW 313
10890: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10891: LD_VAR 0 8
10895: PPUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 12
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PPUSH
10906: CALL_OW 72
10910: NOT
10911: IFFALSE 10921
// control := control_manual ;
10913: LD_ADDR_VAR 0 4
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10921: LD_ADDR_VAR 0 8
10925: PUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL 10618 0 1
10935: ST_TO_ADDR
// if tmp then
10936: LD_VAR 0 8
10940: IFFALSE 10983
// begin for i in tmp do
10942: LD_ADDR_VAR 0 7
10946: PUSH
10947: LD_VAR 0 8
10951: PUSH
10952: FOR_IN
10953: IFFALSE 10981
// if i [ 1 ] = b_ext_radio then
10955: LD_VAR 0 7
10959: PUSH
10960: LD_INT 1
10962: ARRAY
10963: PUSH
10964: LD_INT 22
10966: EQUAL
10967: IFFALSE 10979
// begin control := control_remote ;
10969: LD_ADDR_VAR 0 4
10973: PUSH
10974: LD_INT 2
10976: ST_TO_ADDR
// break ;
10977: GO 10981
// end ;
10979: GO 10952
10981: POP
10982: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10983: LD_VAR 0 1
10987: PPUSH
10988: LD_VAR 0 2
10992: PPUSH
10993: LD_VAR 0 3
10997: PPUSH
10998: LD_VAR 0 4
11002: PPUSH
11003: LD_VAR 0 5
11007: PPUSH
11008: CALL_OW 448
11012: IFFALSE 11047
// begin result := [ chassis , engine , control , weapon ] ;
11014: LD_ADDR_VAR 0 6
11018: PUSH
11019: LD_VAR 0 2
11023: PUSH
11024: LD_VAR 0 3
11028: PUSH
11029: LD_VAR 0 4
11033: PUSH
11034: LD_VAR 0 5
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: ST_TO_ADDR
// exit ;
11045: GO 11459
// end ; _chassis := AvailableChassisList ( factory ) ;
11047: LD_ADDR_VAR 0 9
11051: PUSH
11052: LD_VAR 0 1
11056: PPUSH
11057: CALL_OW 475
11061: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11062: LD_ADDR_VAR 0 11
11066: PUSH
11067: LD_VAR 0 1
11071: PPUSH
11072: CALL_OW 476
11076: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11077: LD_ADDR_VAR 0 12
11081: PUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: CALL_OW 477
11091: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11092: LD_ADDR_VAR 0 10
11096: PUSH
11097: LD_VAR 0 1
11101: PPUSH
11102: CALL_OW 478
11106: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11107: LD_VAR 0 9
11111: NOT
11112: PUSH
11113: LD_VAR 0 11
11117: NOT
11118: OR
11119: PUSH
11120: LD_VAR 0 12
11124: NOT
11125: OR
11126: PUSH
11127: LD_VAR 0 10
11131: NOT
11132: OR
11133: IFFALSE 11168
// begin result := [ chassis , engine , control , weapon ] ;
11135: LD_ADDR_VAR 0 6
11139: PUSH
11140: LD_VAR 0 2
11144: PUSH
11145: LD_VAR 0 3
11149: PUSH
11150: LD_VAR 0 4
11154: PUSH
11155: LD_VAR 0 5
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: ST_TO_ADDR
// exit ;
11166: GO 11459
// end ; if not chassis in _chassis then
11168: LD_VAR 0 2
11172: PUSH
11173: LD_VAR 0 9
11177: IN
11178: NOT
11179: IFFALSE 11205
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11181: LD_ADDR_VAR 0 2
11185: PUSH
11186: LD_VAR 0 9
11190: PUSH
11191: LD_INT 1
11193: PPUSH
11194: LD_VAR 0 9
11198: PPUSH
11199: CALL_OW 12
11203: ARRAY
11204: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11205: LD_VAR 0 2
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: CALL 11464 0 2
11219: NOT
11220: IFFALSE 11279
// repeat engine := _engine [ 1 ] ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: LD_VAR 0 11
11231: PUSH
11232: LD_INT 1
11234: ARRAY
11235: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11236: LD_ADDR_VAR 0 11
11240: PUSH
11241: LD_VAR 0 11
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 3
11253: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11254: LD_VAR 0 2
11258: PPUSH
11259: LD_VAR 0 3
11263: PPUSH
11264: CALL 11464 0 2
11268: PUSH
11269: LD_VAR 0 11
11273: PUSH
11274: EMPTY
11275: EQUAL
11276: OR
11277: IFFALSE 11222
// if not control in _control then
11279: LD_VAR 0 4
11283: PUSH
11284: LD_VAR 0 12
11288: IN
11289: NOT
11290: IFFALSE 11316
// control := _control [ rand ( 1 , _control ) ] ;
11292: LD_ADDR_VAR 0 4
11296: PUSH
11297: LD_VAR 0 12
11301: PUSH
11302: LD_INT 1
11304: PPUSH
11305: LD_VAR 0 12
11309: PPUSH
11310: CALL_OW 12
11314: ARRAY
11315: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11316: LD_VAR 0 2
11320: PPUSH
11321: LD_VAR 0 5
11325: PPUSH
11326: CALL 11684 0 2
11330: NOT
11331: IFFALSE 11390
// repeat weapon := _weapon [ 1 ] ;
11333: LD_ADDR_VAR 0 5
11337: PUSH
11338: LD_VAR 0 10
11342: PUSH
11343: LD_INT 1
11345: ARRAY
11346: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11347: LD_ADDR_VAR 0 10
11351: PUSH
11352: LD_VAR 0 10
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 3
11364: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11365: LD_VAR 0 2
11369: PPUSH
11370: LD_VAR 0 5
11374: PPUSH
11375: CALL 11684 0 2
11379: PUSH
11380: LD_VAR 0 10
11384: PUSH
11385: EMPTY
11386: EQUAL
11387: OR
11388: IFFALSE 11333
// result := [ ] ;
11390: LD_ADDR_VAR 0 6
11394: PUSH
11395: EMPTY
11396: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11397: LD_VAR 0 1
11401: PPUSH
11402: LD_VAR 0 2
11406: PPUSH
11407: LD_VAR 0 3
11411: PPUSH
11412: LD_VAR 0 4
11416: PPUSH
11417: LD_VAR 0 5
11421: PPUSH
11422: CALL_OW 448
11426: IFFALSE 11459
// result := [ chassis , engine , control , weapon ] ;
11428: LD_ADDR_VAR 0 6
11432: PUSH
11433: LD_VAR 0 2
11437: PUSH
11438: LD_VAR 0 3
11442: PUSH
11443: LD_VAR 0 4
11447: PUSH
11448: LD_VAR 0 5
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: ST_TO_ADDR
// end ;
11459: LD_VAR 0 6
11463: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11464: LD_INT 0
11466: PPUSH
// if not chassis or not engine then
11467: LD_VAR 0 1
11471: NOT
11472: PUSH
11473: LD_VAR 0 2
11477: NOT
11478: OR
11479: IFFALSE 11483
// exit ;
11481: GO 11679
// case engine of engine_solar :
11483: LD_VAR 0 2
11487: PUSH
11488: LD_INT 2
11490: DOUBLE
11491: EQUAL
11492: IFTRUE 11496
11494: GO 11534
11496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_INT 11
11504: PUSH
11505: LD_INT 12
11507: PUSH
11508: LD_INT 13
11510: PUSH
11511: LD_INT 14
11513: PUSH
11514: LD_INT 1
11516: PUSH
11517: LD_INT 2
11519: PUSH
11520: LD_INT 3
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: ST_TO_ADDR
11532: GO 11663
11534: LD_INT 1
11536: DOUBLE
11537: EQUAL
11538: IFTRUE 11542
11540: GO 11604
11542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11543: LD_ADDR_VAR 0 3
11547: PUSH
11548: LD_INT 11
11550: PUSH
11551: LD_INT 12
11553: PUSH
11554: LD_INT 13
11556: PUSH
11557: LD_INT 14
11559: PUSH
11560: LD_INT 1
11562: PUSH
11563: LD_INT 2
11565: PUSH
11566: LD_INT 3
11568: PUSH
11569: LD_INT 4
11571: PUSH
11572: LD_INT 5
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 23
11580: PUSH
11581: LD_INT 22
11583: PUSH
11584: LD_INT 24
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: ST_TO_ADDR
11602: GO 11663
11604: LD_INT 3
11606: DOUBLE
11607: EQUAL
11608: IFTRUE 11612
11610: GO 11662
11612: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11613: LD_ADDR_VAR 0 3
11617: PUSH
11618: LD_INT 13
11620: PUSH
11621: LD_INT 14
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: LD_INT 3
11629: PUSH
11630: LD_INT 4
11632: PUSH
11633: LD_INT 5
11635: PUSH
11636: LD_INT 21
11638: PUSH
11639: LD_INT 22
11641: PUSH
11642: LD_INT 23
11644: PUSH
11645: LD_INT 24
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: ST_TO_ADDR
11660: GO 11663
11662: POP
// result := ( chassis in result ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_VAR 0 1
11672: PUSH
11673: LD_VAR 0 3
11677: IN
11678: ST_TO_ADDR
// end ;
11679: LD_VAR 0 3
11683: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11684: LD_INT 0
11686: PPUSH
// if not chassis or not weapon then
11687: LD_VAR 0 1
11691: NOT
11692: PUSH
11693: LD_VAR 0 2
11697: NOT
11698: OR
11699: IFFALSE 11703
// exit ;
11701: GO 12765
// case weapon of us_machine_gun :
11703: LD_VAR 0 2
11707: PUSH
11708: LD_INT 2
11710: DOUBLE
11711: EQUAL
11712: IFTRUE 11716
11714: GO 11746
11716: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11717: LD_ADDR_VAR 0 3
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 3
11730: PUSH
11731: LD_INT 4
11733: PUSH
11734: LD_INT 5
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: ST_TO_ADDR
11744: GO 12749
11746: LD_INT 3
11748: DOUBLE
11749: EQUAL
11750: IFTRUE 11754
11752: GO 11784
11754: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11755: LD_ADDR_VAR 0 3
11759: PUSH
11760: LD_INT 1
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: LD_INT 3
11768: PUSH
11769: LD_INT 4
11771: PUSH
11772: LD_INT 5
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: ST_TO_ADDR
11782: GO 12749
11784: LD_INT 11
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11822
11792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11793: LD_ADDR_VAR 0 3
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: LD_INT 2
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: LD_INT 4
11809: PUSH
11810: LD_INT 5
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: ST_TO_ADDR
11820: GO 12749
11822: LD_INT 4
11824: DOUBLE
11825: EQUAL
11826: IFTRUE 11830
11828: GO 11856
11830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_INT 2
11838: PUSH
11839: LD_INT 3
11841: PUSH
11842: LD_INT 4
11844: PUSH
11845: LD_INT 5
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: ST_TO_ADDR
11854: GO 12749
11856: LD_INT 5
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 11890
11864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11865: LD_ADDR_VAR 0 3
11869: PUSH
11870: LD_INT 2
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: LD_INT 4
11878: PUSH
11879: LD_INT 5
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: ST_TO_ADDR
11888: GO 12749
11890: LD_INT 9
11892: DOUBLE
11893: EQUAL
11894: IFTRUE 11898
11896: GO 11924
11898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11899: LD_ADDR_VAR 0 3
11903: PUSH
11904: LD_INT 2
11906: PUSH
11907: LD_INT 3
11909: PUSH
11910: LD_INT 4
11912: PUSH
11913: LD_INT 5
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: ST_TO_ADDR
11922: GO 12749
11924: LD_INT 7
11926: DOUBLE
11927: EQUAL
11928: IFTRUE 11932
11930: GO 11958
11932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11933: LD_ADDR_VAR 0 3
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 3
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: ST_TO_ADDR
11956: GO 12749
11958: LD_INT 12
11960: DOUBLE
11961: EQUAL
11962: IFTRUE 11966
11964: GO 11992
11966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11967: LD_ADDR_VAR 0 3
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: LD_INT 3
11977: PUSH
11978: LD_INT 4
11980: PUSH
11981: LD_INT 5
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: ST_TO_ADDR
11990: GO 12749
11992: LD_INT 13
11994: DOUBLE
11995: EQUAL
11996: IFTRUE 12000
11998: GO 12026
12000: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12001: LD_ADDR_VAR 0 3
12005: PUSH
12006: LD_INT 2
12008: PUSH
12009: LD_INT 3
12011: PUSH
12012: LD_INT 4
12014: PUSH
12015: LD_INT 5
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: ST_TO_ADDR
12024: GO 12749
12026: LD_INT 14
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12052
12034: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12035: LD_ADDR_VAR 0 3
12039: PUSH
12040: LD_INT 4
12042: PUSH
12043: LD_INT 5
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: ST_TO_ADDR
12050: GO 12749
12052: LD_INT 6
12054: DOUBLE
12055: EQUAL
12056: IFTRUE 12060
12058: GO 12078
12060: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12061: LD_ADDR_VAR 0 3
12065: PUSH
12066: LD_INT 4
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: ST_TO_ADDR
12076: GO 12749
12078: LD_INT 10
12080: DOUBLE
12081: EQUAL
12082: IFTRUE 12086
12084: GO 12104
12086: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12087: LD_ADDR_VAR 0 3
12091: PUSH
12092: LD_INT 4
12094: PUSH
12095: LD_INT 5
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: ST_TO_ADDR
12102: GO 12749
12104: LD_INT 22
12106: DOUBLE
12107: EQUAL
12108: IFTRUE 12112
12110: GO 12138
12112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12113: LD_ADDR_VAR 0 3
12117: PUSH
12118: LD_INT 11
12120: PUSH
12121: LD_INT 12
12123: PUSH
12124: LD_INT 13
12126: PUSH
12127: LD_INT 14
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: ST_TO_ADDR
12136: GO 12749
12138: LD_INT 23
12140: DOUBLE
12141: EQUAL
12142: IFTRUE 12146
12144: GO 12172
12146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12147: LD_ADDR_VAR 0 3
12151: PUSH
12152: LD_INT 11
12154: PUSH
12155: LD_INT 12
12157: PUSH
12158: LD_INT 13
12160: PUSH
12161: LD_INT 14
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: ST_TO_ADDR
12170: GO 12749
12172: LD_INT 24
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12206
12180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12181: LD_ADDR_VAR 0 3
12185: PUSH
12186: LD_INT 11
12188: PUSH
12189: LD_INT 12
12191: PUSH
12192: LD_INT 13
12194: PUSH
12195: LD_INT 14
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: ST_TO_ADDR
12204: GO 12749
12206: LD_INT 30
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12240
12214: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12215: LD_ADDR_VAR 0 3
12219: PUSH
12220: LD_INT 11
12222: PUSH
12223: LD_INT 12
12225: PUSH
12226: LD_INT 13
12228: PUSH
12229: LD_INT 14
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: ST_TO_ADDR
12238: GO 12749
12240: LD_INT 25
12242: DOUBLE
12243: EQUAL
12244: IFTRUE 12248
12246: GO 12266
12248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12249: LD_ADDR_VAR 0 3
12253: PUSH
12254: LD_INT 13
12256: PUSH
12257: LD_INT 14
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: ST_TO_ADDR
12264: GO 12749
12266: LD_INT 27
12268: DOUBLE
12269: EQUAL
12270: IFTRUE 12274
12272: GO 12292
12274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12275: LD_ADDR_VAR 0 3
12279: PUSH
12280: LD_INT 13
12282: PUSH
12283: LD_INT 14
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: ST_TO_ADDR
12290: GO 12749
12292: LD_EXP 95
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12328
12302: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12303: LD_ADDR_VAR 0 3
12307: PUSH
12308: LD_INT 11
12310: PUSH
12311: LD_INT 12
12313: PUSH
12314: LD_INT 13
12316: PUSH
12317: LD_INT 14
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: ST_TO_ADDR
12326: GO 12749
12328: LD_INT 28
12330: DOUBLE
12331: EQUAL
12332: IFTRUE 12336
12334: GO 12354
12336: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12337: LD_ADDR_VAR 0 3
12341: PUSH
12342: LD_INT 13
12344: PUSH
12345: LD_INT 14
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: ST_TO_ADDR
12352: GO 12749
12354: LD_INT 29
12356: DOUBLE
12357: EQUAL
12358: IFTRUE 12362
12360: GO 12380
12362: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12363: LD_ADDR_VAR 0 3
12367: PUSH
12368: LD_INT 13
12370: PUSH
12371: LD_INT 14
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: ST_TO_ADDR
12378: GO 12749
12380: LD_INT 31
12382: DOUBLE
12383: EQUAL
12384: IFTRUE 12388
12386: GO 12406
12388: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12389: LD_ADDR_VAR 0 3
12393: PUSH
12394: LD_INT 13
12396: PUSH
12397: LD_INT 14
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: ST_TO_ADDR
12404: GO 12749
12406: LD_INT 26
12408: DOUBLE
12409: EQUAL
12410: IFTRUE 12414
12412: GO 12432
12414: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12415: LD_ADDR_VAR 0 3
12419: PUSH
12420: LD_INT 13
12422: PUSH
12423: LD_INT 14
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: ST_TO_ADDR
12430: GO 12749
12432: LD_INT 42
12434: DOUBLE
12435: EQUAL
12436: IFTRUE 12440
12438: GO 12466
12440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_INT 21
12448: PUSH
12449: LD_INT 22
12451: PUSH
12452: LD_INT 23
12454: PUSH
12455: LD_INT 24
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: ST_TO_ADDR
12464: GO 12749
12466: LD_INT 43
12468: DOUBLE
12469: EQUAL
12470: IFTRUE 12474
12472: GO 12500
12474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12475: LD_ADDR_VAR 0 3
12479: PUSH
12480: LD_INT 21
12482: PUSH
12483: LD_INT 22
12485: PUSH
12486: LD_INT 23
12488: PUSH
12489: LD_INT 24
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: ST_TO_ADDR
12498: GO 12749
12500: LD_INT 44
12502: DOUBLE
12503: EQUAL
12504: IFTRUE 12508
12506: GO 12534
12508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12509: LD_ADDR_VAR 0 3
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_INT 23
12522: PUSH
12523: LD_INT 24
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: ST_TO_ADDR
12532: GO 12749
12534: LD_INT 45
12536: DOUBLE
12537: EQUAL
12538: IFTRUE 12542
12540: GO 12568
12542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12543: LD_ADDR_VAR 0 3
12547: PUSH
12548: LD_INT 21
12550: PUSH
12551: LD_INT 22
12553: PUSH
12554: LD_INT 23
12556: PUSH
12557: LD_INT 24
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: ST_TO_ADDR
12566: GO 12749
12568: LD_INT 49
12570: DOUBLE
12571: EQUAL
12572: IFTRUE 12576
12574: GO 12602
12576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: LD_INT 21
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_INT 23
12590: PUSH
12591: LD_INT 24
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: ST_TO_ADDR
12600: GO 12749
12602: LD_INT 51
12604: DOUBLE
12605: EQUAL
12606: IFTRUE 12610
12608: GO 12636
12610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12611: LD_ADDR_VAR 0 3
12615: PUSH
12616: LD_INT 21
12618: PUSH
12619: LD_INT 22
12621: PUSH
12622: LD_INT 23
12624: PUSH
12625: LD_INT 24
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: ST_TO_ADDR
12634: GO 12749
12636: LD_INT 52
12638: DOUBLE
12639: EQUAL
12640: IFTRUE 12644
12642: GO 12670
12644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12645: LD_ADDR_VAR 0 3
12649: PUSH
12650: LD_INT 21
12652: PUSH
12653: LD_INT 22
12655: PUSH
12656: LD_INT 23
12658: PUSH
12659: LD_INT 24
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: ST_TO_ADDR
12668: GO 12749
12670: LD_INT 53
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12696
12678: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12679: LD_ADDR_VAR 0 3
12683: PUSH
12684: LD_INT 23
12686: PUSH
12687: LD_INT 24
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: ST_TO_ADDR
12694: GO 12749
12696: LD_INT 46
12698: DOUBLE
12699: EQUAL
12700: IFTRUE 12704
12702: GO 12722
12704: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12705: LD_ADDR_VAR 0 3
12709: PUSH
12710: LD_INT 23
12712: PUSH
12713: LD_INT 24
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: ST_TO_ADDR
12720: GO 12749
12722: LD_INT 47
12724: DOUBLE
12725: EQUAL
12726: IFTRUE 12730
12728: GO 12748
12730: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: LD_INT 23
12738: PUSH
12739: LD_INT 24
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: ST_TO_ADDR
12746: GO 12749
12748: POP
// result := ( chassis in result ) ;
12749: LD_ADDR_VAR 0 3
12753: PUSH
12754: LD_VAR 0 1
12758: PUSH
12759: LD_VAR 0 3
12763: IN
12764: ST_TO_ADDR
// end ;
12765: LD_VAR 0 3
12769: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12770: LD_INT 0
12772: PPUSH
12773: PPUSH
12774: PPUSH
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
// result := array ;
12779: LD_ADDR_VAR 0 5
12783: PUSH
12784: LD_VAR 0 1
12788: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12789: LD_VAR 0 1
12793: NOT
12794: PUSH
12795: LD_VAR 0 2
12799: NOT
12800: OR
12801: PUSH
12802: LD_VAR 0 3
12806: NOT
12807: OR
12808: PUSH
12809: LD_VAR 0 2
12813: PUSH
12814: LD_VAR 0 1
12818: GREATER
12819: OR
12820: PUSH
12821: LD_VAR 0 3
12825: PUSH
12826: LD_VAR 0 1
12830: GREATER
12831: OR
12832: IFFALSE 12836
// exit ;
12834: GO 13132
// if direction then
12836: LD_VAR 0 4
12840: IFFALSE 12904
// begin d := 1 ;
12842: LD_ADDR_VAR 0 9
12846: PUSH
12847: LD_INT 1
12849: ST_TO_ADDR
// if i_from > i_to then
12850: LD_VAR 0 2
12854: PUSH
12855: LD_VAR 0 3
12859: GREATER
12860: IFFALSE 12886
// length := ( array - i_from ) + i_to else
12862: LD_ADDR_VAR 0 11
12866: PUSH
12867: LD_VAR 0 1
12871: PUSH
12872: LD_VAR 0 2
12876: MINUS
12877: PUSH
12878: LD_VAR 0 3
12882: PLUS
12883: ST_TO_ADDR
12884: GO 12902
// length := i_to - i_from ;
12886: LD_ADDR_VAR 0 11
12890: PUSH
12891: LD_VAR 0 3
12895: PUSH
12896: LD_VAR 0 2
12900: MINUS
12901: ST_TO_ADDR
// end else
12902: GO 12965
// begin d := - 1 ;
12904: LD_ADDR_VAR 0 9
12908: PUSH
12909: LD_INT 1
12911: NEG
12912: ST_TO_ADDR
// if i_from > i_to then
12913: LD_VAR 0 2
12917: PUSH
12918: LD_VAR 0 3
12922: GREATER
12923: IFFALSE 12943
// length := i_from - i_to else
12925: LD_ADDR_VAR 0 11
12929: PUSH
12930: LD_VAR 0 2
12934: PUSH
12935: LD_VAR 0 3
12939: MINUS
12940: ST_TO_ADDR
12941: GO 12965
// length := ( array - i_to ) + i_from ;
12943: LD_ADDR_VAR 0 11
12947: PUSH
12948: LD_VAR 0 1
12952: PUSH
12953: LD_VAR 0 3
12957: MINUS
12958: PUSH
12959: LD_VAR 0 2
12963: PLUS
12964: ST_TO_ADDR
// end ; if not length then
12965: LD_VAR 0 11
12969: NOT
12970: IFFALSE 12974
// exit ;
12972: GO 13132
// tmp := array ;
12974: LD_ADDR_VAR 0 10
12978: PUSH
12979: LD_VAR 0 1
12983: ST_TO_ADDR
// for i = 1 to length do
12984: LD_ADDR_VAR 0 6
12988: PUSH
12989: DOUBLE
12990: LD_INT 1
12992: DEC
12993: ST_TO_ADDR
12994: LD_VAR 0 11
12998: PUSH
12999: FOR_TO
13000: IFFALSE 13120
// begin for j = 1 to array do
13002: LD_ADDR_VAR 0 7
13006: PUSH
13007: DOUBLE
13008: LD_INT 1
13010: DEC
13011: ST_TO_ADDR
13012: LD_VAR 0 1
13016: PUSH
13017: FOR_TO
13018: IFFALSE 13106
// begin k := j + d ;
13020: LD_ADDR_VAR 0 8
13024: PUSH
13025: LD_VAR 0 7
13029: PUSH
13030: LD_VAR 0 9
13034: PLUS
13035: ST_TO_ADDR
// if k > array then
13036: LD_VAR 0 8
13040: PUSH
13041: LD_VAR 0 1
13045: GREATER
13046: IFFALSE 13056
// k := 1 ;
13048: LD_ADDR_VAR 0 8
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// if not k then
13056: LD_VAR 0 8
13060: NOT
13061: IFFALSE 13073
// k := array ;
13063: LD_ADDR_VAR 0 8
13067: PUSH
13068: LD_VAR 0 1
13072: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13073: LD_ADDR_VAR 0 10
13077: PUSH
13078: LD_VAR 0 10
13082: PPUSH
13083: LD_VAR 0 8
13087: PPUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 7
13097: ARRAY
13098: PPUSH
13099: CALL_OW 1
13103: ST_TO_ADDR
// end ;
13104: GO 13017
13106: POP
13107: POP
// array := tmp ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_VAR 0 10
13117: ST_TO_ADDR
// end ;
13118: GO 12999
13120: POP
13121: POP
// result := array ;
13122: LD_ADDR_VAR 0 5
13126: PUSH
13127: LD_VAR 0 1
13131: ST_TO_ADDR
// end ;
13132: LD_VAR 0 5
13136: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13137: LD_INT 0
13139: PPUSH
13140: PPUSH
// result := 0 ;
13141: LD_ADDR_VAR 0 3
13145: PUSH
13146: LD_INT 0
13148: ST_TO_ADDR
// if not array or not value in array then
13149: LD_VAR 0 1
13153: NOT
13154: PUSH
13155: LD_VAR 0 2
13159: PUSH
13160: LD_VAR 0 1
13164: IN
13165: NOT
13166: OR
13167: IFFALSE 13171
// exit ;
13169: GO 13225
// for i = 1 to array do
13171: LD_ADDR_VAR 0 4
13175: PUSH
13176: DOUBLE
13177: LD_INT 1
13179: DEC
13180: ST_TO_ADDR
13181: LD_VAR 0 1
13185: PUSH
13186: FOR_TO
13187: IFFALSE 13223
// if value = array [ i ] then
13189: LD_VAR 0 2
13193: PUSH
13194: LD_VAR 0 1
13198: PUSH
13199: LD_VAR 0 4
13203: ARRAY
13204: EQUAL
13205: IFFALSE 13221
// begin result := i ;
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_VAR 0 4
13216: ST_TO_ADDR
// exit ;
13217: POP
13218: POP
13219: GO 13225
// end ;
13221: GO 13186
13223: POP
13224: POP
// end ;
13225: LD_VAR 0 3
13229: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13230: LD_INT 0
13232: PPUSH
// vc_chassis := chassis ;
13233: LD_ADDR_OWVAR 37
13237: PUSH
13238: LD_VAR 0 1
13242: ST_TO_ADDR
// vc_engine := engine ;
13243: LD_ADDR_OWVAR 39
13247: PUSH
13248: LD_VAR 0 2
13252: ST_TO_ADDR
// vc_control := control ;
13253: LD_ADDR_OWVAR 38
13257: PUSH
13258: LD_VAR 0 3
13262: ST_TO_ADDR
// vc_weapon := weapon ;
13263: LD_ADDR_OWVAR 40
13267: PUSH
13268: LD_VAR 0 4
13272: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13273: LD_ADDR_OWVAR 41
13277: PUSH
13278: LD_VAR 0 5
13282: ST_TO_ADDR
// end ;
13283: LD_VAR 0 6
13287: RET
// export function WantPlant ( unit ) ; var task ; begin
13288: LD_INT 0
13290: PPUSH
13291: PPUSH
// result := false ;
13292: LD_ADDR_VAR 0 2
13296: PUSH
13297: LD_INT 0
13299: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13300: LD_ADDR_VAR 0 3
13304: PUSH
13305: LD_VAR 0 1
13309: PPUSH
13310: CALL_OW 437
13314: ST_TO_ADDR
// if task then
13315: LD_VAR 0 3
13319: IFFALSE 13347
// if task [ 1 ] [ 1 ] = p then
13321: LD_VAR 0 3
13325: PUSH
13326: LD_INT 1
13328: ARRAY
13329: PUSH
13330: LD_INT 1
13332: ARRAY
13333: PUSH
13334: LD_STRING p
13336: EQUAL
13337: IFFALSE 13347
// result := true ;
13339: LD_ADDR_VAR 0 2
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// end ;
13347: LD_VAR 0 2
13351: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13352: LD_INT 0
13354: PPUSH
13355: PPUSH
13356: PPUSH
13357: PPUSH
// if pos < 1 then
13358: LD_VAR 0 2
13362: PUSH
13363: LD_INT 1
13365: LESS
13366: IFFALSE 13370
// exit ;
13368: GO 13673
// if pos = 1 then
13370: LD_VAR 0 2
13374: PUSH
13375: LD_INT 1
13377: EQUAL
13378: IFFALSE 13411
// result := Replace ( arr , pos [ 1 ] , value ) else
13380: LD_ADDR_VAR 0 4
13384: PUSH
13385: LD_VAR 0 1
13389: PPUSH
13390: LD_VAR 0 2
13394: PUSH
13395: LD_INT 1
13397: ARRAY
13398: PPUSH
13399: LD_VAR 0 3
13403: PPUSH
13404: CALL_OW 1
13408: ST_TO_ADDR
13409: GO 13673
// begin tmp := arr ;
13411: LD_ADDR_VAR 0 6
13415: PUSH
13416: LD_VAR 0 1
13420: ST_TO_ADDR
// s_arr := [ tmp ] ;
13421: LD_ADDR_VAR 0 7
13425: PUSH
13426: LD_VAR 0 6
13430: PUSH
13431: EMPTY
13432: LIST
13433: ST_TO_ADDR
// for i = 1 to pos - 1 do
13434: LD_ADDR_VAR 0 5
13438: PUSH
13439: DOUBLE
13440: LD_INT 1
13442: DEC
13443: ST_TO_ADDR
13444: LD_VAR 0 2
13448: PUSH
13449: LD_INT 1
13451: MINUS
13452: PUSH
13453: FOR_TO
13454: IFFALSE 13499
// begin tmp := tmp [ pos [ i ] ] ;
13456: LD_ADDR_VAR 0 6
13460: PUSH
13461: LD_VAR 0 6
13465: PUSH
13466: LD_VAR 0 2
13470: PUSH
13471: LD_VAR 0 5
13475: ARRAY
13476: ARRAY
13477: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13478: LD_ADDR_VAR 0 7
13482: PUSH
13483: LD_VAR 0 7
13487: PUSH
13488: LD_VAR 0 6
13492: PUSH
13493: EMPTY
13494: LIST
13495: ADD
13496: ST_TO_ADDR
// end ;
13497: GO 13453
13499: POP
13500: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13501: LD_ADDR_VAR 0 6
13505: PUSH
13506: LD_VAR 0 6
13510: PPUSH
13511: LD_VAR 0 2
13515: PUSH
13516: LD_VAR 0 2
13520: ARRAY
13521: PPUSH
13522: LD_VAR 0 3
13526: PPUSH
13527: CALL_OW 1
13531: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13532: LD_ADDR_VAR 0 7
13536: PUSH
13537: LD_VAR 0 7
13541: PPUSH
13542: LD_VAR 0 7
13546: PPUSH
13547: LD_VAR 0 6
13551: PPUSH
13552: CALL_OW 1
13556: ST_TO_ADDR
// for i = s_arr downto 2 do
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: DOUBLE
13563: LD_VAR 0 7
13567: INC
13568: ST_TO_ADDR
13569: LD_INT 2
13571: PUSH
13572: FOR_DOWNTO
13573: IFFALSE 13657
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13575: LD_ADDR_VAR 0 6
13579: PUSH
13580: LD_VAR 0 7
13584: PUSH
13585: LD_VAR 0 5
13589: PUSH
13590: LD_INT 1
13592: MINUS
13593: ARRAY
13594: PPUSH
13595: LD_VAR 0 2
13599: PUSH
13600: LD_VAR 0 5
13604: PUSH
13605: LD_INT 1
13607: MINUS
13608: ARRAY
13609: PPUSH
13610: LD_VAR 0 7
13614: PUSH
13615: LD_VAR 0 5
13619: ARRAY
13620: PPUSH
13621: CALL_OW 1
13625: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13626: LD_ADDR_VAR 0 7
13630: PUSH
13631: LD_VAR 0 7
13635: PPUSH
13636: LD_VAR 0 5
13640: PUSH
13641: LD_INT 1
13643: MINUS
13644: PPUSH
13645: LD_VAR 0 6
13649: PPUSH
13650: CALL_OW 1
13654: ST_TO_ADDR
// end ;
13655: GO 13572
13657: POP
13658: POP
// result := s_arr [ 1 ] ;
13659: LD_ADDR_VAR 0 4
13663: PUSH
13664: LD_VAR 0 7
13668: PUSH
13669: LD_INT 1
13671: ARRAY
13672: ST_TO_ADDR
// end ; end ;
13673: LD_VAR 0 4
13677: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13678: LD_INT 0
13680: PPUSH
13681: PPUSH
// if not list then
13682: LD_VAR 0 1
13686: NOT
13687: IFFALSE 13691
// exit ;
13689: GO 13782
// i := list [ pos1 ] ;
13691: LD_ADDR_VAR 0 5
13695: PUSH
13696: LD_VAR 0 1
13700: PUSH
13701: LD_VAR 0 2
13705: ARRAY
13706: ST_TO_ADDR
// if not i then
13707: LD_VAR 0 5
13711: NOT
13712: IFFALSE 13716
// exit ;
13714: GO 13782
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13716: LD_ADDR_VAR 0 1
13720: PUSH
13721: LD_VAR 0 1
13725: PPUSH
13726: LD_VAR 0 2
13730: PPUSH
13731: LD_VAR 0 1
13735: PUSH
13736: LD_VAR 0 3
13740: ARRAY
13741: PPUSH
13742: CALL_OW 1
13746: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13747: LD_ADDR_VAR 0 1
13751: PUSH
13752: LD_VAR 0 1
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_VAR 0 5
13766: PPUSH
13767: CALL_OW 1
13771: ST_TO_ADDR
// result := list ;
13772: LD_ADDR_VAR 0 4
13776: PUSH
13777: LD_VAR 0 1
13781: ST_TO_ADDR
// end ;
13782: LD_VAR 0 4
13786: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13787: LD_INT 0
13789: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13790: LD_ADDR_VAR 0 5
13794: PUSH
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 250
13804: PPUSH
13805: LD_VAR 0 1
13809: PPUSH
13810: CALL_OW 251
13814: PPUSH
13815: LD_VAR 0 2
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_VAR 0 4
13829: PPUSH
13830: CALL 13840 0 5
13834: ST_TO_ADDR
// end ;
13835: LD_VAR 0 5
13839: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13840: LD_INT 0
13842: PPUSH
13843: PPUSH
13844: PPUSH
13845: PPUSH
// if not list then
13846: LD_VAR 0 3
13850: NOT
13851: IFFALSE 13855
// exit ;
13853: GO 14243
// result := [ ] ;
13855: LD_ADDR_VAR 0 6
13859: PUSH
13860: EMPTY
13861: ST_TO_ADDR
// for i in list do
13862: LD_ADDR_VAR 0 7
13866: PUSH
13867: LD_VAR 0 3
13871: PUSH
13872: FOR_IN
13873: IFFALSE 14075
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13875: LD_ADDR_VAR 0 9
13879: PUSH
13880: LD_VAR 0 7
13884: PPUSH
13885: LD_VAR 0 1
13889: PPUSH
13890: LD_VAR 0 2
13894: PPUSH
13895: CALL_OW 297
13899: ST_TO_ADDR
// if not result then
13900: LD_VAR 0 6
13904: NOT
13905: IFFALSE 13931
// result := [ [ i , tmp ] ] else
13907: LD_ADDR_VAR 0 6
13911: PUSH
13912: LD_VAR 0 7
13916: PUSH
13917: LD_VAR 0 9
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: ST_TO_ADDR
13929: GO 14073
// begin if result [ result ] [ 2 ] < tmp then
13931: LD_VAR 0 6
13935: PUSH
13936: LD_VAR 0 6
13940: ARRAY
13941: PUSH
13942: LD_INT 2
13944: ARRAY
13945: PUSH
13946: LD_VAR 0 9
13950: LESS
13951: IFFALSE 13993
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13953: LD_ADDR_VAR 0 6
13957: PUSH
13958: LD_VAR 0 6
13962: PPUSH
13963: LD_VAR 0 6
13967: PUSH
13968: LD_INT 1
13970: PLUS
13971: PPUSH
13972: LD_VAR 0 7
13976: PUSH
13977: LD_VAR 0 9
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 2
13990: ST_TO_ADDR
13991: GO 14073
// for j = 1 to result do
13993: LD_ADDR_VAR 0 8
13997: PUSH
13998: DOUBLE
13999: LD_INT 1
14001: DEC
14002: ST_TO_ADDR
14003: LD_VAR 0 6
14007: PUSH
14008: FOR_TO
14009: IFFALSE 14071
// begin if tmp < result [ j ] [ 2 ] then
14011: LD_VAR 0 9
14015: PUSH
14016: LD_VAR 0 6
14020: PUSH
14021: LD_VAR 0 8
14025: ARRAY
14026: PUSH
14027: LD_INT 2
14029: ARRAY
14030: LESS
14031: IFFALSE 14069
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14033: LD_ADDR_VAR 0 6
14037: PUSH
14038: LD_VAR 0 6
14042: PPUSH
14043: LD_VAR 0 8
14047: PPUSH
14048: LD_VAR 0 7
14052: PUSH
14053: LD_VAR 0 9
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PPUSH
14062: CALL_OW 2
14066: ST_TO_ADDR
// break ;
14067: GO 14071
// end ; end ;
14069: GO 14008
14071: POP
14072: POP
// end ; end ;
14073: GO 13872
14075: POP
14076: POP
// if result and not asc then
14077: LD_VAR 0 6
14081: PUSH
14082: LD_VAR 0 4
14086: NOT
14087: AND
14088: IFFALSE 14163
// begin tmp := result ;
14090: LD_ADDR_VAR 0 9
14094: PUSH
14095: LD_VAR 0 6
14099: ST_TO_ADDR
// for i = tmp downto 1 do
14100: LD_ADDR_VAR 0 7
14104: PUSH
14105: DOUBLE
14106: LD_VAR 0 9
14110: INC
14111: ST_TO_ADDR
14112: LD_INT 1
14114: PUSH
14115: FOR_DOWNTO
14116: IFFALSE 14161
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14118: LD_ADDR_VAR 0 6
14122: PUSH
14123: LD_VAR 0 6
14127: PPUSH
14128: LD_VAR 0 9
14132: PUSH
14133: LD_VAR 0 7
14137: MINUS
14138: PUSH
14139: LD_INT 1
14141: PLUS
14142: PPUSH
14143: LD_VAR 0 9
14147: PUSH
14148: LD_VAR 0 7
14152: ARRAY
14153: PPUSH
14154: CALL_OW 1
14158: ST_TO_ADDR
14159: GO 14115
14161: POP
14162: POP
// end ; tmp := [ ] ;
14163: LD_ADDR_VAR 0 9
14167: PUSH
14168: EMPTY
14169: ST_TO_ADDR
// if mode then
14170: LD_VAR 0 5
14174: IFFALSE 14243
// begin for i = 1 to result do
14176: LD_ADDR_VAR 0 7
14180: PUSH
14181: DOUBLE
14182: LD_INT 1
14184: DEC
14185: ST_TO_ADDR
14186: LD_VAR 0 6
14190: PUSH
14191: FOR_TO
14192: IFFALSE 14231
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14194: LD_ADDR_VAR 0 9
14198: PUSH
14199: LD_VAR 0 9
14203: PPUSH
14204: LD_VAR 0 7
14208: PPUSH
14209: LD_VAR 0 6
14213: PUSH
14214: LD_VAR 0 7
14218: ARRAY
14219: PUSH
14220: LD_INT 1
14222: ARRAY
14223: PPUSH
14224: CALL_OW 1
14228: ST_TO_ADDR
14229: GO 14191
14231: POP
14232: POP
// result := tmp ;
14233: LD_ADDR_VAR 0 6
14237: PUSH
14238: LD_VAR 0 9
14242: ST_TO_ADDR
// end ; end ;
14243: LD_VAR 0 6
14247: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14248: LD_INT 0
14250: PPUSH
14251: PPUSH
14252: PPUSH
14253: PPUSH
14254: PPUSH
14255: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14256: LD_ADDR_VAR 0 5
14260: PUSH
14261: LD_INT 0
14263: PUSH
14264: LD_INT 0
14266: PUSH
14267: LD_INT 0
14269: PUSH
14270: EMPTY
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: ST_TO_ADDR
// if not x or not y then
14278: LD_VAR 0 2
14282: NOT
14283: PUSH
14284: LD_VAR 0 3
14288: NOT
14289: OR
14290: IFFALSE 14294
// exit ;
14292: GO 15946
// if not range then
14294: LD_VAR 0 4
14298: NOT
14299: IFFALSE 14309
// range := 10 ;
14301: LD_ADDR_VAR 0 4
14305: PUSH
14306: LD_INT 10
14308: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14309: LD_ADDR_VAR 0 8
14313: PUSH
14314: LD_INT 81
14316: PUSH
14317: LD_VAR 0 1
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 92
14328: PUSH
14329: LD_VAR 0 2
14333: PUSH
14334: LD_VAR 0 3
14338: PUSH
14339: LD_VAR 0 4
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 3
14352: PUSH
14353: LD_INT 21
14355: PUSH
14356: LD_INT 3
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: ST_TO_ADDR
// if not tmp then
14377: LD_VAR 0 8
14381: NOT
14382: IFFALSE 14386
// exit ;
14384: GO 15946
// for i in tmp do
14386: LD_ADDR_VAR 0 6
14390: PUSH
14391: LD_VAR 0 8
14395: PUSH
14396: FOR_IN
14397: IFFALSE 15921
// begin points := [ 0 , 0 , 0 ] ;
14399: LD_ADDR_VAR 0 9
14403: PUSH
14404: LD_INT 0
14406: PUSH
14407: LD_INT 0
14409: PUSH
14410: LD_INT 0
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: ST_TO_ADDR
// bpoints := 1 ;
14418: LD_ADDR_VAR 0 10
14422: PUSH
14423: LD_INT 1
14425: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14426: LD_VAR 0 6
14430: PPUSH
14431: CALL_OW 247
14435: PUSH
14436: LD_INT 1
14438: DOUBLE
14439: EQUAL
14440: IFTRUE 14444
14442: GO 15022
14444: POP
// begin if GetClass ( i ) = 1 then
14445: LD_VAR 0 6
14449: PPUSH
14450: CALL_OW 257
14454: PUSH
14455: LD_INT 1
14457: EQUAL
14458: IFFALSE 14479
// points := [ 10 , 5 , 3 ] ;
14460: LD_ADDR_VAR 0 9
14464: PUSH
14465: LD_INT 10
14467: PUSH
14468: LD_INT 5
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14479: LD_VAR 0 6
14483: PPUSH
14484: CALL_OW 257
14488: PUSH
14489: LD_INT 2
14491: PUSH
14492: LD_INT 3
14494: PUSH
14495: LD_INT 4
14497: PUSH
14498: EMPTY
14499: LIST
14500: LIST
14501: LIST
14502: IN
14503: IFFALSE 14524
// points := [ 3 , 2 , 1 ] ;
14505: LD_ADDR_VAR 0 9
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14524: LD_VAR 0 6
14528: PPUSH
14529: CALL_OW 257
14533: PUSH
14534: LD_INT 5
14536: EQUAL
14537: IFFALSE 14558
// points := [ 130 , 5 , 2 ] ;
14539: LD_ADDR_VAR 0 9
14543: PUSH
14544: LD_INT 130
14546: PUSH
14547: LD_INT 5
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14558: LD_VAR 0 6
14562: PPUSH
14563: CALL_OW 257
14567: PUSH
14568: LD_INT 8
14570: EQUAL
14571: IFFALSE 14592
// points := [ 35 , 35 , 30 ] ;
14573: LD_ADDR_VAR 0 9
14577: PUSH
14578: LD_INT 35
14580: PUSH
14581: LD_INT 35
14583: PUSH
14584: LD_INT 30
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14592: LD_VAR 0 6
14596: PPUSH
14597: CALL_OW 257
14601: PUSH
14602: LD_INT 9
14604: EQUAL
14605: IFFALSE 14626
// points := [ 20 , 55 , 40 ] ;
14607: LD_ADDR_VAR 0 9
14611: PUSH
14612: LD_INT 20
14614: PUSH
14615: LD_INT 55
14617: PUSH
14618: LD_INT 40
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14626: LD_VAR 0 6
14630: PPUSH
14631: CALL_OW 257
14635: PUSH
14636: LD_INT 12
14638: PUSH
14639: LD_INT 16
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: IN
14646: IFFALSE 14667
// points := [ 5 , 3 , 2 ] ;
14648: LD_ADDR_VAR 0 9
14652: PUSH
14653: LD_INT 5
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: LD_INT 2
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14667: LD_VAR 0 6
14671: PPUSH
14672: CALL_OW 257
14676: PUSH
14677: LD_INT 17
14679: EQUAL
14680: IFFALSE 14701
// points := [ 100 , 50 , 75 ] ;
14682: LD_ADDR_VAR 0 9
14686: PUSH
14687: LD_INT 100
14689: PUSH
14690: LD_INT 50
14692: PUSH
14693: LD_INT 75
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14701: LD_VAR 0 6
14705: PPUSH
14706: CALL_OW 257
14710: PUSH
14711: LD_INT 15
14713: EQUAL
14714: IFFALSE 14735
// points := [ 10 , 5 , 3 ] ;
14716: LD_ADDR_VAR 0 9
14720: PUSH
14721: LD_INT 10
14723: PUSH
14724: LD_INT 5
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14735: LD_VAR 0 6
14739: PPUSH
14740: CALL_OW 257
14744: PUSH
14745: LD_INT 14
14747: EQUAL
14748: IFFALSE 14769
// points := [ 10 , 0 , 0 ] ;
14750: LD_ADDR_VAR 0 9
14754: PUSH
14755: LD_INT 10
14757: PUSH
14758: LD_INT 0
14760: PUSH
14761: LD_INT 0
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14769: LD_VAR 0 6
14773: PPUSH
14774: CALL_OW 257
14778: PUSH
14779: LD_INT 11
14781: EQUAL
14782: IFFALSE 14803
// points := [ 30 , 10 , 5 ] ;
14784: LD_ADDR_VAR 0 9
14788: PUSH
14789: LD_INT 30
14791: PUSH
14792: LD_INT 10
14794: PUSH
14795: LD_INT 5
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: LIST
14802: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14803: LD_VAR 0 1
14807: PPUSH
14808: LD_INT 5
14810: PPUSH
14811: CALL_OW 321
14815: PUSH
14816: LD_INT 2
14818: EQUAL
14819: IFFALSE 14836
// bpoints := bpoints * 1.8 ;
14821: LD_ADDR_VAR 0 10
14825: PUSH
14826: LD_VAR 0 10
14830: PUSH
14831: LD_REAL  1.80000000000000E+0000
14834: MUL
14835: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14836: LD_VAR 0 6
14840: PPUSH
14841: CALL_OW 257
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: LD_INT 4
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: IN
14864: PUSH
14865: LD_VAR 0 1
14869: PPUSH
14870: LD_INT 51
14872: PPUSH
14873: CALL_OW 321
14877: PUSH
14878: LD_INT 2
14880: EQUAL
14881: AND
14882: IFFALSE 14899
// bpoints := bpoints * 1.2 ;
14884: LD_ADDR_VAR 0 10
14888: PUSH
14889: LD_VAR 0 10
14893: PUSH
14894: LD_REAL  1.20000000000000E+0000
14897: MUL
14898: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14899: LD_VAR 0 6
14903: PPUSH
14904: CALL_OW 257
14908: PUSH
14909: LD_INT 5
14911: PUSH
14912: LD_INT 7
14914: PUSH
14915: LD_INT 9
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: LIST
14922: IN
14923: PUSH
14924: LD_VAR 0 1
14928: PPUSH
14929: LD_INT 52
14931: PPUSH
14932: CALL_OW 321
14936: PUSH
14937: LD_INT 2
14939: EQUAL
14940: AND
14941: IFFALSE 14958
// bpoints := bpoints * 1.5 ;
14943: LD_ADDR_VAR 0 10
14947: PUSH
14948: LD_VAR 0 10
14952: PUSH
14953: LD_REAL  1.50000000000000E+0000
14956: MUL
14957: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14958: LD_VAR 0 1
14962: PPUSH
14963: LD_INT 66
14965: PPUSH
14966: CALL_OW 321
14970: PUSH
14971: LD_INT 2
14973: EQUAL
14974: IFFALSE 14991
// bpoints := bpoints * 1.1 ;
14976: LD_ADDR_VAR 0 10
14980: PUSH
14981: LD_VAR 0 10
14985: PUSH
14986: LD_REAL  1.10000000000000E+0000
14989: MUL
14990: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14991: LD_ADDR_VAR 0 10
14995: PUSH
14996: LD_VAR 0 10
15000: PUSH
15001: LD_VAR 0 6
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 259
15013: PUSH
15014: LD_REAL  1.15000000000000E+0000
15017: MUL
15018: MUL
15019: ST_TO_ADDR
// end ; unit_vehicle :
15020: GO 15850
15022: LD_INT 2
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15838
15030: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15031: LD_VAR 0 6
15035: PPUSH
15036: CALL_OW 264
15040: PUSH
15041: LD_INT 2
15043: PUSH
15044: LD_INT 42
15046: PUSH
15047: LD_INT 24
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: IN
15055: IFFALSE 15076
// points := [ 25 , 5 , 3 ] ;
15057: LD_ADDR_VAR 0 9
15061: PUSH
15062: LD_INT 25
15064: PUSH
15065: LD_INT 5
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15076: LD_VAR 0 6
15080: PPUSH
15081: CALL_OW 264
15085: PUSH
15086: LD_INT 4
15088: PUSH
15089: LD_INT 43
15091: PUSH
15092: LD_INT 25
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: LIST
15099: IN
15100: IFFALSE 15121
// points := [ 40 , 15 , 5 ] ;
15102: LD_ADDR_VAR 0 9
15106: PUSH
15107: LD_INT 40
15109: PUSH
15110: LD_INT 15
15112: PUSH
15113: LD_INT 5
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15121: LD_VAR 0 6
15125: PPUSH
15126: CALL_OW 264
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: LD_INT 23
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: IN
15141: IFFALSE 15162
// points := [ 7 , 25 , 8 ] ;
15143: LD_ADDR_VAR 0 9
15147: PUSH
15148: LD_INT 7
15150: PUSH
15151: LD_INT 25
15153: PUSH
15154: LD_INT 8
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: LIST
15161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15162: LD_VAR 0 6
15166: PPUSH
15167: CALL_OW 264
15171: PUSH
15172: LD_INT 5
15174: PUSH
15175: LD_INT 27
15177: PUSH
15178: LD_INT 44
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: LIST
15185: IN
15186: IFFALSE 15207
// points := [ 14 , 50 , 16 ] ;
15188: LD_ADDR_VAR 0 9
15192: PUSH
15193: LD_INT 14
15195: PUSH
15196: LD_INT 50
15198: PUSH
15199: LD_INT 16
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15207: LD_VAR 0 6
15211: PPUSH
15212: CALL_OW 264
15216: PUSH
15217: LD_INT 6
15219: PUSH
15220: LD_INT 46
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: IN
15227: IFFALSE 15248
// points := [ 32 , 120 , 70 ] ;
15229: LD_ADDR_VAR 0 9
15233: PUSH
15234: LD_INT 32
15236: PUSH
15237: LD_INT 120
15239: PUSH
15240: LD_INT 70
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15248: LD_VAR 0 6
15252: PPUSH
15253: CALL_OW 264
15257: PUSH
15258: LD_INT 7
15260: PUSH
15261: LD_INT 28
15263: PUSH
15264: LD_INT 45
15266: PUSH
15267: LD_EXP 95
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: IN
15278: IFFALSE 15299
// points := [ 35 , 20 , 45 ] ;
15280: LD_ADDR_VAR 0 9
15284: PUSH
15285: LD_INT 35
15287: PUSH
15288: LD_INT 20
15290: PUSH
15291: LD_INT 45
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15299: LD_VAR 0 6
15303: PPUSH
15304: CALL_OW 264
15308: PUSH
15309: LD_INT 47
15311: PUSH
15312: EMPTY
15313: LIST
15314: IN
15315: IFFALSE 15336
// points := [ 67 , 45 , 75 ] ;
15317: LD_ADDR_VAR 0 9
15321: PUSH
15322: LD_INT 67
15324: PUSH
15325: LD_INT 45
15327: PUSH
15328: LD_INT 75
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15336: LD_VAR 0 6
15340: PPUSH
15341: CALL_OW 264
15345: PUSH
15346: LD_INT 26
15348: PUSH
15349: EMPTY
15350: LIST
15351: IN
15352: IFFALSE 15373
// points := [ 120 , 30 , 80 ] ;
15354: LD_ADDR_VAR 0 9
15358: PUSH
15359: LD_INT 120
15361: PUSH
15362: LD_INT 30
15364: PUSH
15365: LD_INT 80
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: LIST
15372: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15373: LD_VAR 0 6
15377: PPUSH
15378: CALL_OW 264
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: EMPTY
15387: LIST
15388: IN
15389: IFFALSE 15410
// points := [ 40 , 1 , 1 ] ;
15391: LD_ADDR_VAR 0 9
15395: PUSH
15396: LD_INT 40
15398: PUSH
15399: LD_INT 1
15401: PUSH
15402: LD_INT 1
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15410: LD_VAR 0 6
15414: PPUSH
15415: CALL_OW 264
15419: PUSH
15420: LD_INT 29
15422: PUSH
15423: EMPTY
15424: LIST
15425: IN
15426: IFFALSE 15447
// points := [ 70 , 200 , 400 ] ;
15428: LD_ADDR_VAR 0 9
15432: PUSH
15433: LD_INT 70
15435: PUSH
15436: LD_INT 200
15438: PUSH
15439: LD_INT 400
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15447: LD_VAR 0 6
15451: PPUSH
15452: CALL_OW 264
15456: PUSH
15457: LD_INT 14
15459: PUSH
15460: LD_INT 53
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: IN
15467: IFFALSE 15488
// points := [ 40 , 10 , 20 ] ;
15469: LD_ADDR_VAR 0 9
15473: PUSH
15474: LD_INT 40
15476: PUSH
15477: LD_INT 10
15479: PUSH
15480: LD_INT 20
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15488: LD_VAR 0 6
15492: PPUSH
15493: CALL_OW 264
15497: PUSH
15498: LD_INT 9
15500: PUSH
15501: EMPTY
15502: LIST
15503: IN
15504: IFFALSE 15525
// points := [ 5 , 70 , 20 ] ;
15506: LD_ADDR_VAR 0 9
15510: PUSH
15511: LD_INT 5
15513: PUSH
15514: LD_INT 70
15516: PUSH
15517: LD_INT 20
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15525: LD_VAR 0 6
15529: PPUSH
15530: CALL_OW 264
15534: PUSH
15535: LD_INT 10
15537: PUSH
15538: EMPTY
15539: LIST
15540: IN
15541: IFFALSE 15562
// points := [ 35 , 110 , 70 ] ;
15543: LD_ADDR_VAR 0 9
15547: PUSH
15548: LD_INT 35
15550: PUSH
15551: LD_INT 110
15553: PUSH
15554: LD_INT 70
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15562: LD_VAR 0 6
15566: PPUSH
15567: CALL_OW 265
15571: PUSH
15572: LD_INT 25
15574: EQUAL
15575: IFFALSE 15596
// points := [ 80 , 65 , 100 ] ;
15577: LD_ADDR_VAR 0 9
15581: PUSH
15582: LD_INT 80
15584: PUSH
15585: LD_INT 65
15587: PUSH
15588: LD_INT 100
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15596: LD_VAR 0 6
15600: PPUSH
15601: CALL_OW 263
15605: PUSH
15606: LD_INT 1
15608: EQUAL
15609: IFFALSE 15644
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15611: LD_ADDR_VAR 0 10
15615: PUSH
15616: LD_VAR 0 10
15620: PUSH
15621: LD_VAR 0 6
15625: PPUSH
15626: CALL_OW 311
15630: PPUSH
15631: LD_INT 3
15633: PPUSH
15634: CALL_OW 259
15638: PUSH
15639: LD_INT 4
15641: MUL
15642: MUL
15643: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15644: LD_VAR 0 6
15648: PPUSH
15649: CALL_OW 263
15653: PUSH
15654: LD_INT 2
15656: EQUAL
15657: IFFALSE 15708
// begin j := IsControledBy ( i ) ;
15659: LD_ADDR_VAR 0 7
15663: PUSH
15664: LD_VAR 0 6
15668: PPUSH
15669: CALL_OW 312
15673: ST_TO_ADDR
// if j then
15674: LD_VAR 0 7
15678: IFFALSE 15708
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15680: LD_ADDR_VAR 0 10
15684: PUSH
15685: LD_VAR 0 10
15689: PUSH
15690: LD_VAR 0 7
15694: PPUSH
15695: LD_INT 3
15697: PPUSH
15698: CALL_OW 259
15702: PUSH
15703: LD_INT 3
15705: MUL
15706: MUL
15707: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15708: LD_VAR 0 6
15712: PPUSH
15713: CALL_OW 264
15717: PUSH
15718: LD_INT 5
15720: PUSH
15721: LD_INT 6
15723: PUSH
15724: LD_INT 46
15726: PUSH
15727: LD_INT 44
15729: PUSH
15730: LD_INT 47
15732: PUSH
15733: LD_INT 45
15735: PUSH
15736: LD_INT 28
15738: PUSH
15739: LD_INT 7
15741: PUSH
15742: LD_INT 27
15744: PUSH
15745: LD_INT 29
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: IN
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 52
15768: PPUSH
15769: CALL_OW 321
15773: PUSH
15774: LD_INT 2
15776: EQUAL
15777: AND
15778: IFFALSE 15795
// bpoints := bpoints * 1.2 ;
15780: LD_ADDR_VAR 0 10
15784: PUSH
15785: LD_VAR 0 10
15789: PUSH
15790: LD_REAL  1.20000000000000E+0000
15793: MUL
15794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15795: LD_VAR 0 6
15799: PPUSH
15800: CALL_OW 264
15804: PUSH
15805: LD_INT 6
15807: PUSH
15808: LD_INT 46
15810: PUSH
15811: LD_INT 47
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: IN
15819: IFFALSE 15836
// bpoints := bpoints * 1.2 ;
15821: LD_ADDR_VAR 0 10
15825: PUSH
15826: LD_VAR 0 10
15830: PUSH
15831: LD_REAL  1.20000000000000E+0000
15834: MUL
15835: ST_TO_ADDR
// end ; unit_building :
15836: GO 15850
15838: LD_INT 3
15840: DOUBLE
15841: EQUAL
15842: IFTRUE 15846
15844: GO 15849
15846: POP
// ; end ;
15847: GO 15850
15849: POP
// for j = 1 to 3 do
15850: LD_ADDR_VAR 0 7
15854: PUSH
15855: DOUBLE
15856: LD_INT 1
15858: DEC
15859: ST_TO_ADDR
15860: LD_INT 3
15862: PUSH
15863: FOR_TO
15864: IFFALSE 15917
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15866: LD_ADDR_VAR 0 5
15870: PUSH
15871: LD_VAR 0 5
15875: PPUSH
15876: LD_VAR 0 7
15880: PPUSH
15881: LD_VAR 0 5
15885: PUSH
15886: LD_VAR 0 7
15890: ARRAY
15891: PUSH
15892: LD_VAR 0 9
15896: PUSH
15897: LD_VAR 0 7
15901: ARRAY
15902: PUSH
15903: LD_VAR 0 10
15907: MUL
15908: PLUS
15909: PPUSH
15910: CALL_OW 1
15914: ST_TO_ADDR
15915: GO 15863
15917: POP
15918: POP
// end ;
15919: GO 14396
15921: POP
15922: POP
// result := Replace ( result , 4 , tmp ) ;
15923: LD_ADDR_VAR 0 5
15927: PUSH
15928: LD_VAR 0 5
15932: PPUSH
15933: LD_INT 4
15935: PPUSH
15936: LD_VAR 0 8
15940: PPUSH
15941: CALL_OW 1
15945: ST_TO_ADDR
// end ;
15946: LD_VAR 0 5
15950: RET
// export function DangerAtRange ( unit , range ) ; begin
15951: LD_INT 0
15953: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15954: LD_ADDR_VAR 0 3
15958: PUSH
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 255
15968: PPUSH
15969: LD_VAR 0 1
15973: PPUSH
15974: CALL_OW 250
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 251
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: CALL 14248 0 4
15998: ST_TO_ADDR
// end ;
15999: LD_VAR 0 3
16003: RET
// export function DangerInArea ( side , area ) ; begin
16004: LD_INT 0
16006: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16007: LD_ADDR_VAR 0 3
16011: PUSH
16012: LD_VAR 0 2
16016: PPUSH
16017: LD_INT 81
16019: PUSH
16020: LD_VAR 0 1
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PPUSH
16029: CALL_OW 70
16033: ST_TO_ADDR
// end ;
16034: LD_VAR 0 3
16038: RET
// export function IsExtension ( b ) ; begin
16039: LD_INT 0
16041: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16042: LD_ADDR_VAR 0 2
16046: PUSH
16047: LD_VAR 0 1
16051: PUSH
16052: LD_INT 23
16054: PUSH
16055: LD_INT 20
16057: PUSH
16058: LD_INT 22
16060: PUSH
16061: LD_INT 17
16063: PUSH
16064: LD_INT 24
16066: PUSH
16067: LD_INT 21
16069: PUSH
16070: LD_INT 19
16072: PUSH
16073: LD_INT 16
16075: PUSH
16076: LD_INT 25
16078: PUSH
16079: LD_INT 18
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: IN
16094: ST_TO_ADDR
// end ;
16095: LD_VAR 0 2
16099: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16100: LD_INT 0
16102: PPUSH
16103: PPUSH
16104: PPUSH
// result := [ ] ;
16105: LD_ADDR_VAR 0 4
16109: PUSH
16110: EMPTY
16111: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16112: LD_ADDR_VAR 0 5
16116: PUSH
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_INT 21
16124: PUSH
16125: LD_INT 3
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 70
16136: ST_TO_ADDR
// if not tmp then
16137: LD_VAR 0 5
16141: NOT
16142: IFFALSE 16146
// exit ;
16144: GO 16210
// if checkLink then
16146: LD_VAR 0 3
16150: IFFALSE 16200
// begin for i in tmp do
16152: LD_ADDR_VAR 0 6
16156: PUSH
16157: LD_VAR 0 5
16161: PUSH
16162: FOR_IN
16163: IFFALSE 16198
// if GetBase ( i ) <> base then
16165: LD_VAR 0 6
16169: PPUSH
16170: CALL_OW 274
16174: PUSH
16175: LD_VAR 0 1
16179: NONEQUAL
16180: IFFALSE 16196
// ComLinkToBase ( base , i ) ;
16182: LD_VAR 0 1
16186: PPUSH
16187: LD_VAR 0 6
16191: PPUSH
16192: CALL_OW 169
16196: GO 16162
16198: POP
16199: POP
// end ; result := tmp ;
16200: LD_ADDR_VAR 0 4
16204: PUSH
16205: LD_VAR 0 5
16209: ST_TO_ADDR
// end ;
16210: LD_VAR 0 4
16214: RET
// export function ComComplete ( units , b ) ; var i ; begin
16215: LD_INT 0
16217: PPUSH
16218: PPUSH
// if not units then
16219: LD_VAR 0 1
16223: NOT
16224: IFFALSE 16228
// exit ;
16226: GO 16318
// for i in units do
16228: LD_ADDR_VAR 0 4
16232: PUSH
16233: LD_VAR 0 1
16237: PUSH
16238: FOR_IN
16239: IFFALSE 16316
// if BuildingStatus ( b ) = bs_build then
16241: LD_VAR 0 2
16245: PPUSH
16246: CALL_OW 461
16250: PUSH
16251: LD_INT 1
16253: EQUAL
16254: IFFALSE 16314
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16256: LD_VAR 0 4
16260: PPUSH
16261: LD_STRING h
16263: PUSH
16264: LD_VAR 0 2
16268: PPUSH
16269: CALL_OW 250
16273: PUSH
16274: LD_VAR 0 2
16278: PPUSH
16279: CALL_OW 251
16283: PUSH
16284: LD_VAR 0 2
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 0
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: PUSH
16307: EMPTY
16308: LIST
16309: PPUSH
16310: CALL_OW 446
16314: GO 16238
16316: POP
16317: POP
// end ;
16318: LD_VAR 0 3
16322: RET
// export function AddComComplete ( units , b ) ; var i ; begin
16323: LD_INT 0
16325: PPUSH
16326: PPUSH
// if not units then
16327: LD_VAR 0 1
16331: NOT
16332: IFFALSE 16336
// exit ;
16334: GO 16426
// for i in units do
16336: LD_ADDR_VAR 0 4
16340: PUSH
16341: LD_VAR 0 1
16345: PUSH
16346: FOR_IN
16347: IFFALSE 16424
// if BuildingStatus ( b ) = bs_build then
16349: LD_VAR 0 2
16353: PPUSH
16354: CALL_OW 461
16358: PUSH
16359: LD_INT 1
16361: EQUAL
16362: IFFALSE 16422
// AddTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16364: LD_VAR 0 4
16368: PPUSH
16369: LD_STRING h
16371: PUSH
16372: LD_VAR 0 2
16376: PPUSH
16377: CALL_OW 250
16381: PUSH
16382: LD_VAR 0 2
16386: PPUSH
16387: CALL_OW 251
16391: PUSH
16392: LD_VAR 0 2
16396: PUSH
16397: LD_INT 0
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: LD_INT 0
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: PPUSH
16418: CALL_OW 447
16422: GO 16346
16424: POP
16425: POP
// end ;
16426: LD_VAR 0 3
16430: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16439: LD_VAR 0 1
16443: NOT
16444: PUSH
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 263
16454: PUSH
16455: LD_INT 2
16457: NONEQUAL
16458: OR
16459: IFFALSE 16463
// exit ;
16461: GO 16779
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16463: LD_ADDR_VAR 0 6
16467: PUSH
16468: LD_INT 22
16470: PUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 255
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 2
16487: PUSH
16488: LD_INT 30
16490: PUSH
16491: LD_INT 36
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 34
16500: PUSH
16501: LD_INT 31
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PPUSH
16517: CALL_OW 69
16521: ST_TO_ADDR
// if not tmp then
16522: LD_VAR 0 6
16526: NOT
16527: IFFALSE 16531
// exit ;
16529: GO 16779
// result := [ ] ;
16531: LD_ADDR_VAR 0 2
16535: PUSH
16536: EMPTY
16537: ST_TO_ADDR
// for i in tmp do
16538: LD_ADDR_VAR 0 3
16542: PUSH
16543: LD_VAR 0 6
16547: PUSH
16548: FOR_IN
16549: IFFALSE 16620
// begin t := UnitsInside ( i ) ;
16551: LD_ADDR_VAR 0 4
16555: PUSH
16556: LD_VAR 0 3
16560: PPUSH
16561: CALL_OW 313
16565: ST_TO_ADDR
// if t then
16566: LD_VAR 0 4
16570: IFFALSE 16618
// for j in t do
16572: LD_ADDR_VAR 0 7
16576: PUSH
16577: LD_VAR 0 4
16581: PUSH
16582: FOR_IN
16583: IFFALSE 16616
// result := Replace ( result , result + 1 , j ) ;
16585: LD_ADDR_VAR 0 2
16589: PUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: LD_VAR 0 2
16599: PUSH
16600: LD_INT 1
16602: PLUS
16603: PPUSH
16604: LD_VAR 0 7
16608: PPUSH
16609: CALL_OW 1
16613: ST_TO_ADDR
16614: GO 16582
16616: POP
16617: POP
// end ;
16618: GO 16548
16620: POP
16621: POP
// if not result then
16622: LD_VAR 0 2
16626: NOT
16627: IFFALSE 16631
// exit ;
16629: GO 16779
// mech := result [ 1 ] ;
16631: LD_ADDR_VAR 0 5
16635: PUSH
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 1
16643: ARRAY
16644: ST_TO_ADDR
// if result > 1 then
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 1
16652: GREATER
16653: IFFALSE 16765
// begin for i = 2 to result do
16655: LD_ADDR_VAR 0 3
16659: PUSH
16660: DOUBLE
16661: LD_INT 2
16663: DEC
16664: ST_TO_ADDR
16665: LD_VAR 0 2
16669: PUSH
16670: FOR_TO
16671: IFFALSE 16763
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16673: LD_ADDR_VAR 0 4
16677: PUSH
16678: LD_VAR 0 2
16682: PUSH
16683: LD_VAR 0 3
16687: ARRAY
16688: PPUSH
16689: LD_INT 3
16691: PPUSH
16692: CALL_OW 259
16696: PUSH
16697: LD_VAR 0 2
16701: PUSH
16702: LD_VAR 0 3
16706: ARRAY
16707: PPUSH
16708: CALL_OW 432
16712: MINUS
16713: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16714: LD_VAR 0 4
16718: PUSH
16719: LD_VAR 0 5
16723: PPUSH
16724: LD_INT 3
16726: PPUSH
16727: CALL_OW 259
16731: PUSH
16732: LD_VAR 0 5
16736: PPUSH
16737: CALL_OW 432
16741: MINUS
16742: GREATEREQUAL
16743: IFFALSE 16761
// mech := result [ i ] ;
16745: LD_ADDR_VAR 0 5
16749: PUSH
16750: LD_VAR 0 2
16754: PUSH
16755: LD_VAR 0 3
16759: ARRAY
16760: ST_TO_ADDR
// end ;
16761: GO 16670
16763: POP
16764: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_VAR 0 5
16774: PPUSH
16775: CALL_OW 135
// end ;
16779: LD_VAR 0 2
16783: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
16791: PPUSH
16792: PPUSH
16793: PPUSH
16794: PPUSH
16795: PPUSH
16796: PPUSH
16797: PPUSH
16798: PPUSH
// result := [ ] ;
16799: LD_ADDR_VAR 0 7
16803: PUSH
16804: EMPTY
16805: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16806: LD_VAR 0 1
16810: PPUSH
16811: CALL_OW 266
16815: PUSH
16816: LD_INT 0
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: IN
16826: NOT
16827: IFFALSE 16831
// exit ;
16829: GO 18465
// if name then
16831: LD_VAR 0 3
16835: IFFALSE 16851
// SetBName ( base_dep , name ) ;
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_VAR 0 3
16846: PPUSH
16847: CALL_OW 500
// base := GetBase ( base_dep ) ;
16851: LD_ADDR_VAR 0 15
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 274
16865: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16866: LD_ADDR_VAR 0 16
16870: PUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 255
16880: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16881: LD_ADDR_VAR 0 17
16885: PUSH
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 248
16895: ST_TO_ADDR
// if sources then
16896: LD_VAR 0 5
16900: IFFALSE 16947
// for i = 1 to 3 do
16902: LD_ADDR_VAR 0 8
16906: PUSH
16907: DOUBLE
16908: LD_INT 1
16910: DEC
16911: ST_TO_ADDR
16912: LD_INT 3
16914: PUSH
16915: FOR_TO
16916: IFFALSE 16945
// AddResourceType ( base , i , sources [ i ] ) ;
16918: LD_VAR 0 15
16922: PPUSH
16923: LD_VAR 0 8
16927: PPUSH
16928: LD_VAR 0 5
16932: PUSH
16933: LD_VAR 0 8
16937: ARRAY
16938: PPUSH
16939: CALL_OW 276
16943: GO 16915
16945: POP
16946: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16947: LD_ADDR_VAR 0 18
16951: PUSH
16952: LD_VAR 0 15
16956: PPUSH
16957: LD_VAR 0 2
16961: PPUSH
16962: LD_INT 1
16964: PPUSH
16965: CALL 16100 0 3
16969: ST_TO_ADDR
// InitHc ;
16970: CALL_OW 19
// InitUc ;
16974: CALL_OW 18
// uc_side := side ;
16978: LD_ADDR_OWVAR 20
16982: PUSH
16983: LD_VAR 0 16
16987: ST_TO_ADDR
// uc_nation := nation ;
16988: LD_ADDR_OWVAR 21
16992: PUSH
16993: LD_VAR 0 17
16997: ST_TO_ADDR
// if buildings then
16998: LD_VAR 0 18
17002: IFFALSE 18324
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17004: LD_ADDR_VAR 0 19
17008: PUSH
17009: LD_VAR 0 18
17013: PPUSH
17014: LD_INT 2
17016: PUSH
17017: LD_INT 30
17019: PUSH
17020: LD_INT 29
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 30
17029: PUSH
17030: LD_INT 30
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: PPUSH
17042: CALL_OW 72
17046: ST_TO_ADDR
// if tmp then
17047: LD_VAR 0 19
17051: IFFALSE 17099
// for i in tmp do
17053: LD_ADDR_VAR 0 8
17057: PUSH
17058: LD_VAR 0 19
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17097
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17066: LD_VAR 0 8
17070: PPUSH
17071: CALL_OW 250
17075: PPUSH
17076: LD_VAR 0 8
17080: PPUSH
17081: CALL_OW 251
17085: PPUSH
17086: LD_VAR 0 16
17090: PPUSH
17091: CALL_OW 441
17095: GO 17063
17097: POP
17098: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17099: LD_VAR 0 18
17103: PPUSH
17104: LD_INT 2
17106: PUSH
17107: LD_INT 30
17109: PUSH
17110: LD_INT 32
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: LD_INT 30
17119: PUSH
17120: LD_INT 33
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: PPUSH
17132: CALL_OW 72
17136: IFFALSE 17224
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17138: LD_ADDR_VAR 0 8
17142: PUSH
17143: LD_VAR 0 18
17147: PPUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: LD_INT 32
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 33
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: PPUSH
17176: CALL_OW 72
17180: PUSH
17181: FOR_IN
17182: IFFALSE 17222
// begin if not GetBWeapon ( i ) then
17184: LD_VAR 0 8
17188: PPUSH
17189: CALL_OW 269
17193: NOT
17194: IFFALSE 17220
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17196: LD_VAR 0 8
17200: PPUSH
17201: LD_VAR 0 8
17205: PPUSH
17206: LD_VAR 0 2
17210: PPUSH
17211: CALL 18470 0 2
17215: PPUSH
17216: CALL_OW 431
// end ;
17220: GO 17181
17222: POP
17223: POP
// end ; for i = 1 to personel do
17224: LD_ADDR_VAR 0 8
17228: PUSH
17229: DOUBLE
17230: LD_INT 1
17232: DEC
17233: ST_TO_ADDR
17234: LD_VAR 0 6
17238: PUSH
17239: FOR_TO
17240: IFFALSE 18304
// begin if i > 4 then
17242: LD_VAR 0 8
17246: PUSH
17247: LD_INT 4
17249: GREATER
17250: IFFALSE 17254
// break ;
17252: GO 18304
// case i of 1 :
17254: LD_VAR 0 8
17258: PUSH
17259: LD_INT 1
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17347
17267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17268: LD_ADDR_VAR 0 12
17272: PUSH
17273: LD_VAR 0 18
17277: PPUSH
17278: LD_INT 22
17280: PUSH
17281: LD_VAR 0 16
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PUSH
17290: LD_INT 58
17292: PUSH
17293: EMPTY
17294: LIST
17295: PUSH
17296: LD_INT 2
17298: PUSH
17299: LD_INT 30
17301: PUSH
17302: LD_INT 32
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 30
17311: PUSH
17312: LD_INT 4
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 30
17321: PUSH
17322: LD_INT 5
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: PPUSH
17340: CALL_OW 72
17344: ST_TO_ADDR
17345: GO 17569
17347: LD_INT 2
17349: DOUBLE
17350: EQUAL
17351: IFTRUE 17355
17353: GO 17417
17355: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17356: LD_ADDR_VAR 0 12
17360: PUSH
17361: LD_VAR 0 18
17365: PPUSH
17366: LD_INT 22
17368: PUSH
17369: LD_VAR 0 16
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 30
17383: PUSH
17384: LD_INT 0
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 30
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PPUSH
17410: CALL_OW 72
17414: ST_TO_ADDR
17415: GO 17569
17417: LD_INT 3
17419: DOUBLE
17420: EQUAL
17421: IFTRUE 17425
17423: GO 17487
17425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17426: LD_ADDR_VAR 0 12
17430: PUSH
17431: LD_VAR 0 18
17435: PPUSH
17436: LD_INT 22
17438: PUSH
17439: LD_VAR 0 16
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 2
17450: PUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 30
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PPUSH
17480: CALL_OW 72
17484: ST_TO_ADDR
17485: GO 17569
17487: LD_INT 4
17489: DOUBLE
17490: EQUAL
17491: IFTRUE 17495
17493: GO 17568
17495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17496: LD_ADDR_VAR 0 12
17500: PUSH
17501: LD_VAR 0 18
17505: PPUSH
17506: LD_INT 22
17508: PUSH
17509: LD_VAR 0 16
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: LD_INT 30
17523: PUSH
17524: LD_INT 6
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 30
17533: PUSH
17534: LD_INT 7
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 8
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PPUSH
17561: CALL_OW 72
17565: ST_TO_ADDR
17566: GO 17569
17568: POP
// if i = 1 then
17569: LD_VAR 0 8
17573: PUSH
17574: LD_INT 1
17576: EQUAL
17577: IFFALSE 17688
// begin tmp := [ ] ;
17579: LD_ADDR_VAR 0 19
17583: PUSH
17584: EMPTY
17585: ST_TO_ADDR
// for j in f do
17586: LD_ADDR_VAR 0 9
17590: PUSH
17591: LD_VAR 0 12
17595: PUSH
17596: FOR_IN
17597: IFFALSE 17670
// if GetBType ( j ) = b_bunker then
17599: LD_VAR 0 9
17603: PPUSH
17604: CALL_OW 266
17608: PUSH
17609: LD_INT 32
17611: EQUAL
17612: IFFALSE 17639
// tmp := Insert ( tmp , 1 , j ) else
17614: LD_ADDR_VAR 0 19
17618: PUSH
17619: LD_VAR 0 19
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: LD_VAR 0 9
17631: PPUSH
17632: CALL_OW 2
17636: ST_TO_ADDR
17637: GO 17668
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17639: LD_ADDR_VAR 0 19
17643: PUSH
17644: LD_VAR 0 19
17648: PPUSH
17649: LD_VAR 0 19
17653: PUSH
17654: LD_INT 1
17656: PLUS
17657: PPUSH
17658: LD_VAR 0 9
17662: PPUSH
17663: CALL_OW 2
17667: ST_TO_ADDR
17668: GO 17596
17670: POP
17671: POP
// if tmp then
17672: LD_VAR 0 19
17676: IFFALSE 17688
// f := tmp ;
17678: LD_ADDR_VAR 0 12
17682: PUSH
17683: LD_VAR 0 19
17687: ST_TO_ADDR
// end ; x := personel [ i ] ;
17688: LD_ADDR_VAR 0 13
17692: PUSH
17693: LD_VAR 0 6
17697: PUSH
17698: LD_VAR 0 8
17702: ARRAY
17703: ST_TO_ADDR
// if x = - 1 then
17704: LD_VAR 0 13
17708: PUSH
17709: LD_INT 1
17711: NEG
17712: EQUAL
17713: IFFALSE 17922
// begin for j in f do
17715: LD_ADDR_VAR 0 9
17719: PUSH
17720: LD_VAR 0 12
17724: PUSH
17725: FOR_IN
17726: IFFALSE 17918
// repeat InitHc ;
17728: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17732: LD_VAR 0 9
17736: PPUSH
17737: CALL_OW 266
17741: PUSH
17742: LD_INT 5
17744: EQUAL
17745: IFFALSE 17815
// begin if UnitsInside ( j ) < 3 then
17747: LD_VAR 0 9
17751: PPUSH
17752: CALL_OW 313
17756: PUSH
17757: LD_INT 3
17759: LESS
17760: IFFALSE 17796
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17762: LD_INT 0
17764: PPUSH
17765: LD_INT 5
17767: PUSH
17768: LD_INT 8
17770: PUSH
17771: LD_INT 9
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: PUSH
17779: LD_VAR 0 17
17783: ARRAY
17784: PPUSH
17785: LD_VAR 0 4
17789: PPUSH
17790: CALL_OW 380
17794: GO 17813
// PrepareHuman ( false , i , skill ) ;
17796: LD_INT 0
17798: PPUSH
17799: LD_VAR 0 8
17803: PPUSH
17804: LD_VAR 0 4
17808: PPUSH
17809: CALL_OW 380
// end else
17813: GO 17832
// PrepareHuman ( false , i , skill ) ;
17815: LD_INT 0
17817: PPUSH
17818: LD_VAR 0 8
17822: PPUSH
17823: LD_VAR 0 4
17827: PPUSH
17828: CALL_OW 380
// un := CreateHuman ;
17832: LD_ADDR_VAR 0 14
17836: PUSH
17837: CALL_OW 44
17841: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17842: LD_ADDR_VAR 0 7
17846: PUSH
17847: LD_VAR 0 7
17851: PPUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 14
17859: PPUSH
17860: CALL_OW 2
17864: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17865: LD_VAR 0 14
17869: PPUSH
17870: LD_VAR 0 9
17874: PPUSH
17875: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17879: LD_VAR 0 9
17883: PPUSH
17884: CALL_OW 313
17888: PUSH
17889: LD_INT 6
17891: EQUAL
17892: PUSH
17893: LD_VAR 0 9
17897: PPUSH
17898: CALL_OW 266
17902: PUSH
17903: LD_INT 32
17905: PUSH
17906: LD_INT 31
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: IN
17913: OR
17914: IFFALSE 17728
17916: GO 17725
17918: POP
17919: POP
// end else
17920: GO 18302
// for j = 1 to x do
17922: LD_ADDR_VAR 0 9
17926: PUSH
17927: DOUBLE
17928: LD_INT 1
17930: DEC
17931: ST_TO_ADDR
17932: LD_VAR 0 13
17936: PUSH
17937: FOR_TO
17938: IFFALSE 18300
// begin InitHc ;
17940: CALL_OW 19
// if not f then
17944: LD_VAR 0 12
17948: NOT
17949: IFFALSE 18038
// begin PrepareHuman ( false , i , skill ) ;
17951: LD_INT 0
17953: PPUSH
17954: LD_VAR 0 8
17958: PPUSH
17959: LD_VAR 0 4
17963: PPUSH
17964: CALL_OW 380
// un := CreateHuman ;
17968: LD_ADDR_VAR 0 14
17972: PUSH
17973: CALL_OW 44
17977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17978: LD_ADDR_VAR 0 7
17982: PUSH
17983: LD_VAR 0 7
17987: PPUSH
17988: LD_INT 1
17990: PPUSH
17991: LD_VAR 0 14
17995: PPUSH
17996: CALL_OW 2
18000: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18001: LD_VAR 0 14
18005: PPUSH
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 250
18015: PPUSH
18016: LD_VAR 0 1
18020: PPUSH
18021: CALL_OW 251
18025: PPUSH
18026: LD_INT 10
18028: PPUSH
18029: LD_INT 0
18031: PPUSH
18032: CALL_OW 50
// continue ;
18036: GO 17937
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18038: LD_VAR 0 12
18042: PUSH
18043: LD_INT 1
18045: ARRAY
18046: PPUSH
18047: CALL_OW 313
18051: PUSH
18052: LD_VAR 0 12
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: PPUSH
18061: CALL_OW 266
18065: PUSH
18066: LD_INT 32
18068: PUSH
18069: LD_INT 31
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: IN
18076: AND
18077: PUSH
18078: LD_VAR 0 12
18082: PUSH
18083: LD_INT 1
18085: ARRAY
18086: PPUSH
18087: CALL_OW 313
18091: PUSH
18092: LD_INT 6
18094: EQUAL
18095: OR
18096: IFFALSE 18116
// f := Delete ( f , 1 ) ;
18098: LD_ADDR_VAR 0 12
18102: PUSH
18103: LD_VAR 0 12
18107: PPUSH
18108: LD_INT 1
18110: PPUSH
18111: CALL_OW 3
18115: ST_TO_ADDR
// if not f then
18116: LD_VAR 0 12
18120: NOT
18121: IFFALSE 18139
// begin x := x + 2 ;
18123: LD_ADDR_VAR 0 13
18127: PUSH
18128: LD_VAR 0 13
18132: PUSH
18133: LD_INT 2
18135: PLUS
18136: ST_TO_ADDR
// continue ;
18137: GO 17937
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18139: LD_VAR 0 12
18143: PUSH
18144: LD_INT 1
18146: ARRAY
18147: PPUSH
18148: CALL_OW 266
18152: PUSH
18153: LD_INT 5
18155: EQUAL
18156: IFFALSE 18230
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18158: LD_VAR 0 12
18162: PUSH
18163: LD_INT 1
18165: ARRAY
18166: PPUSH
18167: CALL_OW 313
18171: PUSH
18172: LD_INT 3
18174: LESS
18175: IFFALSE 18211
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18177: LD_INT 0
18179: PPUSH
18180: LD_INT 5
18182: PUSH
18183: LD_INT 8
18185: PUSH
18186: LD_INT 9
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: LIST
18193: PUSH
18194: LD_VAR 0 17
18198: ARRAY
18199: PPUSH
18200: LD_VAR 0 4
18204: PPUSH
18205: CALL_OW 380
18209: GO 18228
// PrepareHuman ( false , i , skill ) ;
18211: LD_INT 0
18213: PPUSH
18214: LD_VAR 0 8
18218: PPUSH
18219: LD_VAR 0 4
18223: PPUSH
18224: CALL_OW 380
// end else
18228: GO 18247
// PrepareHuman ( false , i , skill ) ;
18230: LD_INT 0
18232: PPUSH
18233: LD_VAR 0 8
18237: PPUSH
18238: LD_VAR 0 4
18242: PPUSH
18243: CALL_OW 380
// un := CreateHuman ;
18247: LD_ADDR_VAR 0 14
18251: PUSH
18252: CALL_OW 44
18256: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18257: LD_ADDR_VAR 0 7
18261: PUSH
18262: LD_VAR 0 7
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: LD_VAR 0 14
18274: PPUSH
18275: CALL_OW 2
18279: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18280: LD_VAR 0 14
18284: PPUSH
18285: LD_VAR 0 12
18289: PUSH
18290: LD_INT 1
18292: ARRAY
18293: PPUSH
18294: CALL_OW 52
// end ;
18298: GO 17937
18300: POP
18301: POP
// end ;
18302: GO 17239
18304: POP
18305: POP
// result := result ^ buildings ;
18306: LD_ADDR_VAR 0 7
18310: PUSH
18311: LD_VAR 0 7
18315: PUSH
18316: LD_VAR 0 18
18320: ADD
18321: ST_TO_ADDR
// end else
18322: GO 18465
// begin for i = 1 to personel do
18324: LD_ADDR_VAR 0 8
18328: PUSH
18329: DOUBLE
18330: LD_INT 1
18332: DEC
18333: ST_TO_ADDR
18334: LD_VAR 0 6
18338: PUSH
18339: FOR_TO
18340: IFFALSE 18463
// begin if i > 4 then
18342: LD_VAR 0 8
18346: PUSH
18347: LD_INT 4
18349: GREATER
18350: IFFALSE 18354
// break ;
18352: GO 18463
// x := personel [ i ] ;
18354: LD_ADDR_VAR 0 13
18358: PUSH
18359: LD_VAR 0 6
18363: PUSH
18364: LD_VAR 0 8
18368: ARRAY
18369: ST_TO_ADDR
// if x = - 1 then
18370: LD_VAR 0 13
18374: PUSH
18375: LD_INT 1
18377: NEG
18378: EQUAL
18379: IFFALSE 18383
// continue ;
18381: GO 18339
// PrepareHuman ( false , i , skill ) ;
18383: LD_INT 0
18385: PPUSH
18386: LD_VAR 0 8
18390: PPUSH
18391: LD_VAR 0 4
18395: PPUSH
18396: CALL_OW 380
// un := CreateHuman ;
18400: LD_ADDR_VAR 0 14
18404: PUSH
18405: CALL_OW 44
18409: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18410: LD_VAR 0 14
18414: PPUSH
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL_OW 250
18424: PPUSH
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 251
18434: PPUSH
18435: LD_INT 10
18437: PPUSH
18438: LD_INT 0
18440: PPUSH
18441: CALL_OW 50
// result := result ^ un ;
18445: LD_ADDR_VAR 0 7
18449: PUSH
18450: LD_VAR 0 7
18454: PUSH
18455: LD_VAR 0 14
18459: ADD
18460: ST_TO_ADDR
// end ;
18461: GO 18339
18463: POP
18464: POP
// end ; end ;
18465: LD_VAR 0 7
18469: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18470: LD_INT 0
18472: PPUSH
18473: PPUSH
18474: PPUSH
18475: PPUSH
18476: PPUSH
18477: PPUSH
18478: PPUSH
18479: PPUSH
18480: PPUSH
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
// result := false ;
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_INT 0
18495: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18496: LD_VAR 0 1
18500: NOT
18501: PUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 266
18511: PUSH
18512: LD_INT 32
18514: PUSH
18515: LD_INT 33
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: IN
18522: NOT
18523: OR
18524: IFFALSE 18528
// exit ;
18526: GO 19637
// nat := GetNation ( tower ) ;
18528: LD_ADDR_VAR 0 12
18532: PUSH
18533: LD_VAR 0 1
18537: PPUSH
18538: CALL_OW 248
18542: ST_TO_ADDR
// side := GetSide ( tower ) ;
18543: LD_ADDR_VAR 0 16
18547: PUSH
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 255
18557: ST_TO_ADDR
// x := GetX ( tower ) ;
18558: LD_ADDR_VAR 0 10
18562: PUSH
18563: LD_VAR 0 1
18567: PPUSH
18568: CALL_OW 250
18572: ST_TO_ADDR
// y := GetY ( tower ) ;
18573: LD_ADDR_VAR 0 11
18577: PUSH
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 251
18587: ST_TO_ADDR
// if not x or not y then
18588: LD_VAR 0 10
18592: NOT
18593: PUSH
18594: LD_VAR 0 11
18598: NOT
18599: OR
18600: IFFALSE 18604
// exit ;
18602: GO 19637
// weapon := 0 ;
18604: LD_ADDR_VAR 0 18
18608: PUSH
18609: LD_INT 0
18611: ST_TO_ADDR
// fac_list := [ ] ;
18612: LD_ADDR_VAR 0 17
18616: PUSH
18617: EMPTY
18618: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18619: LD_ADDR_VAR 0 6
18623: PUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 274
18633: PPUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: LD_INT 0
18641: PPUSH
18642: CALL 16100 0 3
18646: PPUSH
18647: LD_INT 30
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PPUSH
18657: CALL_OW 72
18661: ST_TO_ADDR
// if not factories then
18662: LD_VAR 0 6
18666: NOT
18667: IFFALSE 18671
// exit ;
18669: GO 19637
// for i in factories do
18671: LD_ADDR_VAR 0 8
18675: PUSH
18676: LD_VAR 0 6
18680: PUSH
18681: FOR_IN
18682: IFFALSE 18707
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18684: LD_ADDR_VAR 0 17
18688: PUSH
18689: LD_VAR 0 17
18693: PUSH
18694: LD_VAR 0 8
18698: PPUSH
18699: CALL_OW 478
18703: UNION
18704: ST_TO_ADDR
18705: GO 18681
18707: POP
18708: POP
// if not fac_list then
18709: LD_VAR 0 17
18713: NOT
18714: IFFALSE 18718
// exit ;
18716: GO 19637
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18718: LD_ADDR_VAR 0 5
18722: PUSH
18723: LD_INT 4
18725: PUSH
18726: LD_INT 5
18728: PUSH
18729: LD_INT 9
18731: PUSH
18732: LD_INT 10
18734: PUSH
18735: LD_INT 6
18737: PUSH
18738: LD_INT 7
18740: PUSH
18741: LD_INT 11
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: LD_INT 27
18755: PUSH
18756: LD_INT 28
18758: PUSH
18759: LD_INT 26
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 43
18773: PUSH
18774: LD_INT 44
18776: PUSH
18777: LD_INT 46
18779: PUSH
18780: LD_INT 45
18782: PUSH
18783: LD_INT 47
18785: PUSH
18786: LD_INT 49
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: PUSH
18802: LD_VAR 0 12
18806: ARRAY
18807: ST_TO_ADDR
// list := list isect fac_list ;
18808: LD_ADDR_VAR 0 5
18812: PUSH
18813: LD_VAR 0 5
18817: PUSH
18818: LD_VAR 0 17
18822: ISECT
18823: ST_TO_ADDR
// if not list then
18824: LD_VAR 0 5
18828: NOT
18829: IFFALSE 18833
// exit ;
18831: GO 19637
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18833: LD_VAR 0 12
18837: PUSH
18838: LD_INT 3
18840: EQUAL
18841: PUSH
18842: LD_INT 49
18844: PUSH
18845: LD_VAR 0 5
18849: IN
18850: AND
18851: PUSH
18852: LD_INT 31
18854: PPUSH
18855: LD_VAR 0 16
18859: PPUSH
18860: CALL_OW 321
18864: PUSH
18865: LD_INT 2
18867: EQUAL
18868: AND
18869: IFFALSE 18929
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18871: LD_INT 22
18873: PUSH
18874: LD_VAR 0 16
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 35
18885: PUSH
18886: LD_INT 49
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 91
18895: PUSH
18896: LD_VAR 0 1
18900: PUSH
18901: LD_INT 10
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: PPUSH
18914: CALL_OW 69
18918: NOT
18919: IFFALSE 18929
// weapon := ru_time_lapser ;
18921: LD_ADDR_VAR 0 18
18925: PUSH
18926: LD_INT 49
18928: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18929: LD_VAR 0 12
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: IN
18944: PUSH
18945: LD_INT 11
18947: PUSH
18948: LD_VAR 0 5
18952: IN
18953: PUSH
18954: LD_INT 30
18956: PUSH
18957: LD_VAR 0 5
18961: IN
18962: OR
18963: AND
18964: PUSH
18965: LD_INT 6
18967: PPUSH
18968: LD_VAR 0 16
18972: PPUSH
18973: CALL_OW 321
18977: PUSH
18978: LD_INT 2
18980: EQUAL
18981: AND
18982: IFFALSE 19147
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18984: LD_INT 22
18986: PUSH
18987: LD_VAR 0 16
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: PUSH
18999: LD_INT 35
19001: PUSH
19002: LD_INT 11
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 35
19011: PUSH
19012: LD_INT 30
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 91
19026: PUSH
19027: LD_VAR 0 1
19031: PUSH
19032: LD_INT 18
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: PPUSH
19045: CALL_OW 69
19049: NOT
19050: PUSH
19051: LD_INT 22
19053: PUSH
19054: LD_VAR 0 16
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 32
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 30
19078: PUSH
19079: LD_INT 33
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 91
19093: PUSH
19094: LD_VAR 0 1
19098: PUSH
19099: LD_INT 12
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: PUSH
19112: EMPTY
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: PUSH
19120: LD_INT 2
19122: GREATER
19123: AND
19124: IFFALSE 19147
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19126: LD_ADDR_VAR 0 18
19130: PUSH
19131: LD_INT 11
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_VAR 0 12
19145: ARRAY
19146: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19147: LD_VAR 0 18
19151: NOT
19152: PUSH
19153: LD_INT 40
19155: PPUSH
19156: LD_VAR 0 16
19160: PPUSH
19161: CALL_OW 321
19165: PUSH
19166: LD_INT 2
19168: EQUAL
19169: AND
19170: PUSH
19171: LD_INT 7
19173: PUSH
19174: LD_VAR 0 5
19178: IN
19179: PUSH
19180: LD_INT 28
19182: PUSH
19183: LD_VAR 0 5
19187: IN
19188: OR
19189: PUSH
19190: LD_INT 45
19192: PUSH
19193: LD_VAR 0 5
19197: IN
19198: OR
19199: AND
19200: IFFALSE 19454
// begin hex := GetHexInfo ( x , y ) ;
19202: LD_ADDR_VAR 0 4
19206: PUSH
19207: LD_VAR 0 10
19211: PPUSH
19212: LD_VAR 0 11
19216: PPUSH
19217: CALL_OW 546
19221: ST_TO_ADDR
// if hex [ 1 ] then
19222: LD_VAR 0 4
19226: PUSH
19227: LD_INT 1
19229: ARRAY
19230: IFFALSE 19234
// exit ;
19232: GO 19637
// height := hex [ 2 ] ;
19234: LD_ADDR_VAR 0 15
19238: PUSH
19239: LD_VAR 0 4
19243: PUSH
19244: LD_INT 2
19246: ARRAY
19247: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19248: LD_ADDR_VAR 0 14
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: LD_INT 3
19261: PUSH
19262: LD_INT 5
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: ST_TO_ADDR
// for i in tmp do
19271: LD_ADDR_VAR 0 8
19275: PUSH
19276: LD_VAR 0 14
19280: PUSH
19281: FOR_IN
19282: IFFALSE 19452
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19284: LD_ADDR_VAR 0 9
19288: PUSH
19289: LD_VAR 0 10
19293: PPUSH
19294: LD_VAR 0 8
19298: PPUSH
19299: LD_INT 5
19301: PPUSH
19302: CALL_OW 272
19306: PUSH
19307: LD_VAR 0 11
19311: PPUSH
19312: LD_VAR 0 8
19316: PPUSH
19317: LD_INT 5
19319: PPUSH
19320: CALL_OW 273
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19329: LD_VAR 0 9
19333: PUSH
19334: LD_INT 1
19336: ARRAY
19337: PPUSH
19338: LD_VAR 0 9
19342: PUSH
19343: LD_INT 2
19345: ARRAY
19346: PPUSH
19347: CALL_OW 488
19351: IFFALSE 19450
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19353: LD_ADDR_VAR 0 4
19357: PUSH
19358: LD_VAR 0 9
19362: PUSH
19363: LD_INT 1
19365: ARRAY
19366: PPUSH
19367: LD_VAR 0 9
19371: PUSH
19372: LD_INT 2
19374: ARRAY
19375: PPUSH
19376: CALL_OW 546
19380: ST_TO_ADDR
// if hex [ 1 ] then
19381: LD_VAR 0 4
19385: PUSH
19386: LD_INT 1
19388: ARRAY
19389: IFFALSE 19393
// continue ;
19391: GO 19281
// h := hex [ 2 ] ;
19393: LD_ADDR_VAR 0 13
19397: PUSH
19398: LD_VAR 0 4
19402: PUSH
19403: LD_INT 2
19405: ARRAY
19406: ST_TO_ADDR
// if h + 7 < height then
19407: LD_VAR 0 13
19411: PUSH
19412: LD_INT 7
19414: PLUS
19415: PUSH
19416: LD_VAR 0 15
19420: LESS
19421: IFFALSE 19450
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19423: LD_ADDR_VAR 0 18
19427: PUSH
19428: LD_INT 7
19430: PUSH
19431: LD_INT 28
19433: PUSH
19434: LD_INT 45
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PUSH
19442: LD_VAR 0 12
19446: ARRAY
19447: ST_TO_ADDR
// break ;
19448: GO 19452
// end ; end ; end ;
19450: GO 19281
19452: POP
19453: POP
// end ; if not weapon then
19454: LD_VAR 0 18
19458: NOT
19459: IFFALSE 19519
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19461: LD_ADDR_VAR 0 5
19465: PUSH
19466: LD_VAR 0 5
19470: PUSH
19471: LD_INT 11
19473: PUSH
19474: LD_INT 30
19476: PUSH
19477: LD_INT 49
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: LIST
19484: DIFF
19485: ST_TO_ADDR
// if not list then
19486: LD_VAR 0 5
19490: NOT
19491: IFFALSE 19495
// exit ;
19493: GO 19637
// weapon := list [ rand ( 1 , list ) ] ;
19495: LD_ADDR_VAR 0 18
19499: PUSH
19500: LD_VAR 0 5
19504: PUSH
19505: LD_INT 1
19507: PPUSH
19508: LD_VAR 0 5
19512: PPUSH
19513: CALL_OW 12
19517: ARRAY
19518: ST_TO_ADDR
// end ; if weapon then
19519: LD_VAR 0 18
19523: IFFALSE 19637
// begin tmp := CostOfWeapon ( weapon ) ;
19525: LD_ADDR_VAR 0 14
19529: PUSH
19530: LD_VAR 0 18
19534: PPUSH
19535: CALL_OW 451
19539: ST_TO_ADDR
// j := GetBase ( tower ) ;
19540: LD_ADDR_VAR 0 9
19544: PUSH
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 274
19554: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19555: LD_VAR 0 9
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: CALL_OW 275
19567: PUSH
19568: LD_VAR 0 14
19572: PUSH
19573: LD_INT 1
19575: ARRAY
19576: GREATEREQUAL
19577: PUSH
19578: LD_VAR 0 9
19582: PPUSH
19583: LD_INT 2
19585: PPUSH
19586: CALL_OW 275
19590: PUSH
19591: LD_VAR 0 14
19595: PUSH
19596: LD_INT 2
19598: ARRAY
19599: GREATEREQUAL
19600: AND
19601: PUSH
19602: LD_VAR 0 9
19606: PPUSH
19607: LD_INT 3
19609: PPUSH
19610: CALL_OW 275
19614: PUSH
19615: LD_VAR 0 14
19619: PUSH
19620: LD_INT 3
19622: ARRAY
19623: GREATEREQUAL
19624: AND
19625: IFFALSE 19637
// result := weapon ;
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: LD_VAR 0 18
19636: ST_TO_ADDR
// end ; end ;
19637: LD_VAR 0 3
19641: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
// result := true ;
19646: LD_ADDR_VAR 0 3
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// if array1 = array2 then
19654: LD_VAR 0 1
19658: PUSH
19659: LD_VAR 0 2
19663: EQUAL
19664: IFFALSE 19724
// begin for i = 1 to array1 do
19666: LD_ADDR_VAR 0 4
19670: PUSH
19671: DOUBLE
19672: LD_INT 1
19674: DEC
19675: ST_TO_ADDR
19676: LD_VAR 0 1
19680: PUSH
19681: FOR_TO
19682: IFFALSE 19720
// if array1 [ i ] <> array2 [ i ] then
19684: LD_VAR 0 1
19688: PUSH
19689: LD_VAR 0 4
19693: ARRAY
19694: PUSH
19695: LD_VAR 0 2
19699: PUSH
19700: LD_VAR 0 4
19704: ARRAY
19705: NONEQUAL
19706: IFFALSE 19718
// begin result := false ;
19708: LD_ADDR_VAR 0 3
19712: PUSH
19713: LD_INT 0
19715: ST_TO_ADDR
// break ;
19716: GO 19720
// end ;
19718: GO 19681
19720: POP
19721: POP
// end else
19722: GO 19732
// result := false ;
19724: LD_ADDR_VAR 0 3
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// end ;
19732: LD_VAR 0 3
19736: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19737: LD_INT 0
19739: PPUSH
19740: PPUSH
// if not array1 or not array2 then
19741: LD_VAR 0 1
19745: NOT
19746: PUSH
19747: LD_VAR 0 2
19751: NOT
19752: OR
19753: IFFALSE 19757
// exit ;
19755: GO 19821
// result := true ;
19757: LD_ADDR_VAR 0 3
19761: PUSH
19762: LD_INT 1
19764: ST_TO_ADDR
// for i = 1 to array1 do
19765: LD_ADDR_VAR 0 4
19769: PUSH
19770: DOUBLE
19771: LD_INT 1
19773: DEC
19774: ST_TO_ADDR
19775: LD_VAR 0 1
19779: PUSH
19780: FOR_TO
19781: IFFALSE 19819
// if array1 [ i ] <> array2 [ i ] then
19783: LD_VAR 0 1
19787: PUSH
19788: LD_VAR 0 4
19792: ARRAY
19793: PUSH
19794: LD_VAR 0 2
19798: PUSH
19799: LD_VAR 0 4
19803: ARRAY
19804: NONEQUAL
19805: IFFALSE 19817
// begin result := false ;
19807: LD_ADDR_VAR 0 3
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// break ;
19815: GO 19819
// end ;
19817: GO 19780
19819: POP
19820: POP
// end ;
19821: LD_VAR 0 3
19825: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19826: LD_INT 0
19828: PPUSH
19829: PPUSH
19830: PPUSH
// pom := GetBase ( fac ) ;
19831: LD_ADDR_VAR 0 5
19835: PUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 274
19845: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19846: LD_ADDR_VAR 0 4
19850: PUSH
19851: LD_VAR 0 2
19855: PUSH
19856: LD_INT 1
19858: ARRAY
19859: PPUSH
19860: LD_VAR 0 2
19864: PUSH
19865: LD_INT 2
19867: ARRAY
19868: PPUSH
19869: LD_VAR 0 2
19873: PUSH
19874: LD_INT 3
19876: ARRAY
19877: PPUSH
19878: LD_VAR 0 2
19882: PUSH
19883: LD_INT 4
19885: ARRAY
19886: PPUSH
19887: CALL_OW 449
19891: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19892: LD_ADDR_VAR 0 3
19896: PUSH
19897: LD_VAR 0 5
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: CALL_OW 275
19909: PUSH
19910: LD_VAR 0 4
19914: PUSH
19915: LD_INT 1
19917: ARRAY
19918: GREATEREQUAL
19919: PUSH
19920: LD_VAR 0 5
19924: PPUSH
19925: LD_INT 2
19927: PPUSH
19928: CALL_OW 275
19932: PUSH
19933: LD_VAR 0 4
19937: PUSH
19938: LD_INT 2
19940: ARRAY
19941: GREATEREQUAL
19942: AND
19943: PUSH
19944: LD_VAR 0 5
19948: PPUSH
19949: LD_INT 3
19951: PPUSH
19952: CALL_OW 275
19956: PUSH
19957: LD_VAR 0 4
19961: PUSH
19962: LD_INT 3
19964: ARRAY
19965: GREATEREQUAL
19966: AND
19967: ST_TO_ADDR
// end ;
19968: LD_VAR 0 3
19972: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19973: LD_INT 0
19975: PPUSH
19976: PPUSH
19977: PPUSH
19978: PPUSH
// pom := GetBase ( building ) ;
19979: LD_ADDR_VAR 0 3
19983: PUSH
19984: LD_VAR 0 1
19988: PPUSH
19989: CALL_OW 274
19993: ST_TO_ADDR
// if not pom then
19994: LD_VAR 0 3
19998: NOT
19999: IFFALSE 20003
// exit ;
20001: GO 20173
// btype := GetBType ( building ) ;
20003: LD_ADDR_VAR 0 5
20007: PUSH
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 266
20017: ST_TO_ADDR
// if btype = b_armoury then
20018: LD_VAR 0 5
20022: PUSH
20023: LD_INT 4
20025: EQUAL
20026: IFFALSE 20036
// btype := b_barracks ;
20028: LD_ADDR_VAR 0 5
20032: PUSH
20033: LD_INT 5
20035: ST_TO_ADDR
// if btype = b_depot then
20036: LD_VAR 0 5
20040: PUSH
20041: LD_INT 0
20043: EQUAL
20044: IFFALSE 20054
// btype := b_warehouse ;
20046: LD_ADDR_VAR 0 5
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if btype = b_workshop then
20054: LD_VAR 0 5
20058: PUSH
20059: LD_INT 2
20061: EQUAL
20062: IFFALSE 20072
// btype := b_factory ;
20064: LD_ADDR_VAR 0 5
20068: PUSH
20069: LD_INT 3
20071: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20072: LD_ADDR_VAR 0 4
20076: PUSH
20077: LD_VAR 0 5
20081: PPUSH
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 248
20091: PPUSH
20092: CALL_OW 450
20096: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_VAR 0 3
20106: PPUSH
20107: LD_INT 1
20109: PPUSH
20110: CALL_OW 275
20114: PUSH
20115: LD_VAR 0 4
20119: PUSH
20120: LD_INT 1
20122: ARRAY
20123: GREATEREQUAL
20124: PUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: LD_INT 2
20132: PPUSH
20133: CALL_OW 275
20137: PUSH
20138: LD_VAR 0 4
20142: PUSH
20143: LD_INT 2
20145: ARRAY
20146: GREATEREQUAL
20147: AND
20148: PUSH
20149: LD_VAR 0 3
20153: PPUSH
20154: LD_INT 3
20156: PPUSH
20157: CALL_OW 275
20161: PUSH
20162: LD_VAR 0 4
20166: PUSH
20167: LD_INT 3
20169: ARRAY
20170: GREATEREQUAL
20171: AND
20172: ST_TO_ADDR
// end ;
20173: LD_VAR 0 2
20177: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20178: LD_INT 0
20180: PPUSH
20181: PPUSH
20182: PPUSH
// pom := GetBase ( building ) ;
20183: LD_ADDR_VAR 0 4
20187: PUSH
20188: LD_VAR 0 1
20192: PPUSH
20193: CALL_OW 274
20197: ST_TO_ADDR
// if not pom then
20198: LD_VAR 0 4
20202: NOT
20203: IFFALSE 20207
// exit ;
20205: GO 20308
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20207: LD_ADDR_VAR 0 5
20211: PUSH
20212: LD_VAR 0 2
20216: PPUSH
20217: LD_VAR 0 1
20221: PPUSH
20222: CALL_OW 248
20226: PPUSH
20227: CALL_OW 450
20231: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20232: LD_ADDR_VAR 0 3
20236: PUSH
20237: LD_VAR 0 4
20241: PPUSH
20242: LD_INT 1
20244: PPUSH
20245: CALL_OW 275
20249: PUSH
20250: LD_VAR 0 5
20254: PUSH
20255: LD_INT 1
20257: ARRAY
20258: GREATEREQUAL
20259: PUSH
20260: LD_VAR 0 4
20264: PPUSH
20265: LD_INT 2
20267: PPUSH
20268: CALL_OW 275
20272: PUSH
20273: LD_VAR 0 5
20277: PUSH
20278: LD_INT 2
20280: ARRAY
20281: GREATEREQUAL
20282: AND
20283: PUSH
20284: LD_VAR 0 4
20288: PPUSH
20289: LD_INT 3
20291: PPUSH
20292: CALL_OW 275
20296: PUSH
20297: LD_VAR 0 5
20301: PUSH
20302: LD_INT 3
20304: ARRAY
20305: GREATEREQUAL
20306: AND
20307: ST_TO_ADDR
// end ;
20308: LD_VAR 0 3
20312: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20313: LD_INT 0
20315: PPUSH
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
// result := false ;
20326: LD_ADDR_VAR 0 8
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20334: LD_VAR 0 5
20338: NOT
20339: PUSH
20340: LD_VAR 0 1
20344: NOT
20345: OR
20346: PUSH
20347: LD_VAR 0 2
20351: NOT
20352: OR
20353: PUSH
20354: LD_VAR 0 3
20358: NOT
20359: OR
20360: IFFALSE 20364
// exit ;
20362: GO 21178
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20364: LD_ADDR_VAR 0 14
20368: PUSH
20369: LD_VAR 0 1
20373: PPUSH
20374: LD_VAR 0 2
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: LD_VAR 0 4
20388: PPUSH
20389: LD_VAR 0 5
20393: PUSH
20394: LD_INT 1
20396: ARRAY
20397: PPUSH
20398: CALL_OW 248
20402: PPUSH
20403: LD_INT 0
20405: PPUSH
20406: CALL 22415 0 6
20410: ST_TO_ADDR
// if not hexes then
20411: LD_VAR 0 14
20415: NOT
20416: IFFALSE 20420
// exit ;
20418: GO 21178
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20420: LD_ADDR_VAR 0 17
20424: PUSH
20425: LD_VAR 0 5
20429: PPUSH
20430: LD_INT 22
20432: PUSH
20433: LD_VAR 0 13
20437: PPUSH
20438: CALL_OW 255
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: LD_INT 30
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 30
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PPUSH
20479: CALL_OW 72
20483: ST_TO_ADDR
// for i = 1 to hexes do
20484: LD_ADDR_VAR 0 9
20488: PUSH
20489: DOUBLE
20490: LD_INT 1
20492: DEC
20493: ST_TO_ADDR
20494: LD_VAR 0 14
20498: PUSH
20499: FOR_TO
20500: IFFALSE 21176
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20502: LD_ADDR_VAR 0 13
20506: PUSH
20507: LD_VAR 0 14
20511: PUSH
20512: LD_VAR 0 9
20516: ARRAY
20517: PUSH
20518: LD_INT 1
20520: ARRAY
20521: PPUSH
20522: LD_VAR 0 14
20526: PUSH
20527: LD_VAR 0 9
20531: ARRAY
20532: PUSH
20533: LD_INT 2
20535: ARRAY
20536: PPUSH
20537: CALL_OW 428
20541: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20542: LD_VAR 0 14
20546: PUSH
20547: LD_VAR 0 9
20551: ARRAY
20552: PUSH
20553: LD_INT 1
20555: ARRAY
20556: PPUSH
20557: LD_VAR 0 14
20561: PUSH
20562: LD_VAR 0 9
20566: ARRAY
20567: PUSH
20568: LD_INT 2
20570: ARRAY
20571: PPUSH
20572: CALL_OW 351
20576: PUSH
20577: LD_VAR 0 14
20581: PUSH
20582: LD_VAR 0 9
20586: ARRAY
20587: PUSH
20588: LD_INT 1
20590: ARRAY
20591: PPUSH
20592: LD_VAR 0 14
20596: PUSH
20597: LD_VAR 0 9
20601: ARRAY
20602: PUSH
20603: LD_INT 2
20605: ARRAY
20606: PPUSH
20607: CALL_OW 488
20611: NOT
20612: OR
20613: PUSH
20614: LD_VAR 0 13
20618: PPUSH
20619: CALL_OW 247
20623: PUSH
20624: LD_INT 3
20626: EQUAL
20627: OR
20628: IFFALSE 20634
// exit ;
20630: POP
20631: POP
20632: GO 21178
// if not tmp then
20634: LD_VAR 0 13
20638: NOT
20639: IFFALSE 20643
// continue ;
20641: GO 20499
// result := true ;
20643: LD_ADDR_VAR 0 8
20647: PUSH
20648: LD_INT 1
20650: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20651: LD_VAR 0 6
20655: PUSH
20656: LD_VAR 0 13
20660: PPUSH
20661: CALL_OW 247
20665: PUSH
20666: LD_INT 2
20668: EQUAL
20669: AND
20670: PUSH
20671: LD_VAR 0 13
20675: PPUSH
20676: CALL_OW 263
20680: PUSH
20681: LD_INT 1
20683: EQUAL
20684: AND
20685: IFFALSE 20849
// begin if IsDrivenBy ( tmp ) then
20687: LD_VAR 0 13
20691: PPUSH
20692: CALL_OW 311
20696: IFFALSE 20700
// continue ;
20698: GO 20499
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20700: LD_VAR 0 6
20704: PPUSH
20705: LD_INT 3
20707: PUSH
20708: LD_INT 60
20710: PUSH
20711: EMPTY
20712: LIST
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: LD_INT 55
20723: PUSH
20724: EMPTY
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PPUSH
20735: CALL_OW 72
20739: IFFALSE 20847
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20741: LD_ADDR_VAR 0 18
20745: PUSH
20746: LD_VAR 0 6
20750: PPUSH
20751: LD_INT 3
20753: PUSH
20754: LD_INT 60
20756: PUSH
20757: EMPTY
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: LD_INT 3
20766: PUSH
20767: LD_INT 55
20769: PUSH
20770: EMPTY
20771: LIST
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 72
20785: PUSH
20786: LD_INT 1
20788: ARRAY
20789: ST_TO_ADDR
// if IsInUnit ( driver ) then
20790: LD_VAR 0 18
20794: PPUSH
20795: CALL_OW 310
20799: IFFALSE 20810
// ComExit ( driver ) ;
20801: LD_VAR 0 18
20805: PPUSH
20806: CALL 45543 0 1
// AddComEnterUnit ( driver , tmp ) ;
20810: LD_VAR 0 18
20814: PPUSH
20815: LD_VAR 0 13
20819: PPUSH
20820: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20824: LD_VAR 0 18
20828: PPUSH
20829: LD_VAR 0 7
20833: PPUSH
20834: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20838: LD_VAR 0 18
20842: PPUSH
20843: CALL_OW 181
// end ; continue ;
20847: GO 20499
// end ; if not cleaners or not tmp in cleaners then
20849: LD_VAR 0 6
20853: NOT
20854: PUSH
20855: LD_VAR 0 13
20859: PUSH
20860: LD_VAR 0 6
20864: IN
20865: NOT
20866: OR
20867: IFFALSE 21174
// begin if dep then
20869: LD_VAR 0 17
20873: IFFALSE 21009
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20875: LD_ADDR_VAR 0 16
20879: PUSH
20880: LD_VAR 0 17
20884: PUSH
20885: LD_INT 1
20887: ARRAY
20888: PPUSH
20889: CALL_OW 250
20893: PPUSH
20894: LD_VAR 0 17
20898: PUSH
20899: LD_INT 1
20901: ARRAY
20902: PPUSH
20903: CALL_OW 254
20907: PPUSH
20908: LD_INT 5
20910: PPUSH
20911: CALL_OW 272
20915: PUSH
20916: LD_VAR 0 17
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: PPUSH
20925: CALL_OW 251
20929: PPUSH
20930: LD_VAR 0 17
20934: PUSH
20935: LD_INT 1
20937: ARRAY
20938: PPUSH
20939: CALL_OW 254
20943: PPUSH
20944: LD_INT 5
20946: PPUSH
20947: CALL_OW 273
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20956: LD_VAR 0 16
20960: PUSH
20961: LD_INT 1
20963: ARRAY
20964: PPUSH
20965: LD_VAR 0 16
20969: PUSH
20970: LD_INT 2
20972: ARRAY
20973: PPUSH
20974: CALL_OW 488
20978: IFFALSE 21009
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20980: LD_VAR 0 13
20984: PPUSH
20985: LD_VAR 0 16
20989: PUSH
20990: LD_INT 1
20992: ARRAY
20993: PPUSH
20994: LD_VAR 0 16
20998: PUSH
20999: LD_INT 2
21001: ARRAY
21002: PPUSH
21003: CALL_OW 111
// continue ;
21007: GO 20499
// end ; end ; r := GetDir ( tmp ) ;
21009: LD_ADDR_VAR 0 15
21013: PUSH
21014: LD_VAR 0 13
21018: PPUSH
21019: CALL_OW 254
21023: ST_TO_ADDR
// if r = 5 then
21024: LD_VAR 0 15
21028: PUSH
21029: LD_INT 5
21031: EQUAL
21032: IFFALSE 21042
// r := 0 ;
21034: LD_ADDR_VAR 0 15
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// for j = r to 5 do
21042: LD_ADDR_VAR 0 10
21046: PUSH
21047: DOUBLE
21048: LD_VAR 0 15
21052: DEC
21053: ST_TO_ADDR
21054: LD_INT 5
21056: PUSH
21057: FOR_TO
21058: IFFALSE 21172
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21060: LD_ADDR_VAR 0 11
21064: PUSH
21065: LD_VAR 0 13
21069: PPUSH
21070: CALL_OW 250
21074: PPUSH
21075: LD_VAR 0 10
21079: PPUSH
21080: LD_INT 2
21082: PPUSH
21083: CALL_OW 272
21087: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21088: LD_ADDR_VAR 0 12
21092: PUSH
21093: LD_VAR 0 13
21097: PPUSH
21098: CALL_OW 251
21102: PPUSH
21103: LD_VAR 0 10
21107: PPUSH
21108: LD_INT 2
21110: PPUSH
21111: CALL_OW 273
21115: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21116: LD_VAR 0 11
21120: PPUSH
21121: LD_VAR 0 12
21125: PPUSH
21126: CALL_OW 488
21130: PUSH
21131: LD_VAR 0 11
21135: PPUSH
21136: LD_VAR 0 12
21140: PPUSH
21141: CALL_OW 428
21145: NOT
21146: AND
21147: IFFALSE 21170
// begin ComMoveXY ( tmp , _x , _y ) ;
21149: LD_VAR 0 13
21153: PPUSH
21154: LD_VAR 0 11
21158: PPUSH
21159: LD_VAR 0 12
21163: PPUSH
21164: CALL_OW 111
// break ;
21168: GO 21172
// end ; end ;
21170: GO 21057
21172: POP
21173: POP
// end ; end ;
21174: GO 20499
21176: POP
21177: POP
// end ;
21178: LD_VAR 0 8
21182: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21183: LD_INT 0
21185: PPUSH
// result := true ;
21186: LD_ADDR_VAR 0 3
21190: PUSH
21191: LD_INT 1
21193: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21194: LD_VAR 0 2
21198: PUSH
21199: LD_INT 24
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21213
21205: LD_INT 33
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21238
21213: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21214: LD_ADDR_VAR 0 3
21218: PUSH
21219: LD_INT 32
21221: PPUSH
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 321
21231: PUSH
21232: LD_INT 2
21234: EQUAL
21235: ST_TO_ADDR
21236: GO 21558
21238: LD_INT 20
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21271
21246: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21247: LD_ADDR_VAR 0 3
21251: PUSH
21252: LD_INT 6
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 321
21264: PUSH
21265: LD_INT 2
21267: EQUAL
21268: ST_TO_ADDR
21269: GO 21558
21271: LD_INT 22
21273: DOUBLE
21274: EQUAL
21275: IFTRUE 21285
21277: LD_INT 36
21279: DOUBLE
21280: EQUAL
21281: IFTRUE 21285
21283: GO 21310
21285: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21286: LD_ADDR_VAR 0 3
21290: PUSH
21291: LD_INT 15
21293: PPUSH
21294: LD_VAR 0 1
21298: PPUSH
21299: CALL_OW 321
21303: PUSH
21304: LD_INT 2
21306: EQUAL
21307: ST_TO_ADDR
21308: GO 21558
21310: LD_INT 30
21312: DOUBLE
21313: EQUAL
21314: IFTRUE 21318
21316: GO 21343
21318: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21319: LD_ADDR_VAR 0 3
21323: PUSH
21324: LD_INT 20
21326: PPUSH
21327: LD_VAR 0 1
21331: PPUSH
21332: CALL_OW 321
21336: PUSH
21337: LD_INT 2
21339: EQUAL
21340: ST_TO_ADDR
21341: GO 21558
21343: LD_INT 28
21345: DOUBLE
21346: EQUAL
21347: IFTRUE 21357
21349: LD_INT 21
21351: DOUBLE
21352: EQUAL
21353: IFTRUE 21357
21355: GO 21382
21357: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_INT 21
21365: PPUSH
21366: LD_VAR 0 1
21370: PPUSH
21371: CALL_OW 321
21375: PUSH
21376: LD_INT 2
21378: EQUAL
21379: ST_TO_ADDR
21380: GO 21558
21382: LD_INT 16
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21417
21390: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21391: LD_ADDR_VAR 0 3
21395: PUSH
21396: LD_EXP 103
21400: PPUSH
21401: LD_VAR 0 1
21405: PPUSH
21406: CALL_OW 321
21410: PUSH
21411: LD_INT 2
21413: EQUAL
21414: ST_TO_ADDR
21415: GO 21558
21417: LD_INT 19
21419: DOUBLE
21420: EQUAL
21421: IFTRUE 21431
21423: LD_INT 23
21425: DOUBLE
21426: EQUAL
21427: IFTRUE 21431
21429: GO 21458
21431: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21432: LD_ADDR_VAR 0 3
21436: PUSH
21437: LD_EXP 102
21441: PPUSH
21442: LD_VAR 0 1
21446: PPUSH
21447: CALL_OW 321
21451: PUSH
21452: LD_INT 2
21454: EQUAL
21455: ST_TO_ADDR
21456: GO 21558
21458: LD_INT 17
21460: DOUBLE
21461: EQUAL
21462: IFTRUE 21466
21464: GO 21491
21466: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21467: LD_ADDR_VAR 0 3
21471: PUSH
21472: LD_INT 39
21474: PPUSH
21475: LD_VAR 0 1
21479: PPUSH
21480: CALL_OW 321
21484: PUSH
21485: LD_INT 2
21487: EQUAL
21488: ST_TO_ADDR
21489: GO 21558
21491: LD_INT 18
21493: DOUBLE
21494: EQUAL
21495: IFTRUE 21499
21497: GO 21524
21499: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21500: LD_ADDR_VAR 0 3
21504: PUSH
21505: LD_INT 40
21507: PPUSH
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 321
21517: PUSH
21518: LD_INT 2
21520: EQUAL
21521: ST_TO_ADDR
21522: GO 21558
21524: LD_INT 27
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 21557
21532: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21533: LD_ADDR_VAR 0 3
21537: PUSH
21538: LD_INT 35
21540: PPUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 321
21550: PUSH
21551: LD_INT 2
21553: EQUAL
21554: ST_TO_ADDR
21555: GO 21558
21557: POP
// end ;
21558: LD_VAR 0 3
21562: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21563: LD_INT 0
21565: PPUSH
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
21570: PPUSH
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
// result := false ;
21576: LD_ADDR_VAR 0 6
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21584: LD_VAR 0 1
21588: NOT
21589: PUSH
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 266
21599: PUSH
21600: LD_INT 0
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: IN
21610: NOT
21611: OR
21612: PUSH
21613: LD_VAR 0 2
21617: NOT
21618: OR
21619: PUSH
21620: LD_VAR 0 5
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: LD_INT 1
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 3
21636: PUSH
21637: LD_INT 4
21639: PUSH
21640: LD_INT 5
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: IN
21651: NOT
21652: OR
21653: PUSH
21654: LD_VAR 0 3
21658: PPUSH
21659: LD_VAR 0 4
21663: PPUSH
21664: CALL_OW 488
21668: NOT
21669: OR
21670: IFFALSE 21674
// exit ;
21672: GO 22410
// side := GetSide ( depot ) ;
21674: LD_ADDR_VAR 0 9
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 255
21688: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21689: LD_VAR 0 9
21693: PPUSH
21694: LD_VAR 0 2
21698: PPUSH
21699: CALL 21183 0 2
21703: NOT
21704: IFFALSE 21708
// exit ;
21706: GO 22410
// pom := GetBase ( depot ) ;
21708: LD_ADDR_VAR 0 10
21712: PUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 274
21722: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21723: LD_ADDR_VAR 0 11
21727: PUSH
21728: LD_VAR 0 2
21732: PPUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: CALL_OW 248
21742: PPUSH
21743: CALL_OW 450
21747: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21748: LD_VAR 0 10
21752: PPUSH
21753: LD_INT 1
21755: PPUSH
21756: CALL_OW 275
21760: PUSH
21761: LD_VAR 0 11
21765: PUSH
21766: LD_INT 1
21768: ARRAY
21769: GREATEREQUAL
21770: PUSH
21771: LD_VAR 0 10
21775: PPUSH
21776: LD_INT 2
21778: PPUSH
21779: CALL_OW 275
21783: PUSH
21784: LD_VAR 0 11
21788: PUSH
21789: LD_INT 2
21791: ARRAY
21792: GREATEREQUAL
21793: AND
21794: PUSH
21795: LD_VAR 0 10
21799: PPUSH
21800: LD_INT 3
21802: PPUSH
21803: CALL_OW 275
21807: PUSH
21808: LD_VAR 0 11
21812: PUSH
21813: LD_INT 3
21815: ARRAY
21816: GREATEREQUAL
21817: AND
21818: NOT
21819: IFFALSE 21823
// exit ;
21821: GO 22410
// if GetBType ( depot ) = b_depot then
21823: LD_VAR 0 1
21827: PPUSH
21828: CALL_OW 266
21832: PUSH
21833: LD_INT 0
21835: EQUAL
21836: IFFALSE 21848
// dist := 28 else
21838: LD_ADDR_VAR 0 14
21842: PUSH
21843: LD_INT 28
21845: ST_TO_ADDR
21846: GO 21856
// dist := 36 ;
21848: LD_ADDR_VAR 0 14
21852: PUSH
21853: LD_INT 36
21855: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21856: LD_VAR 0 1
21860: PPUSH
21861: LD_VAR 0 3
21865: PPUSH
21866: LD_VAR 0 4
21870: PPUSH
21871: CALL_OW 297
21875: PUSH
21876: LD_VAR 0 14
21880: GREATER
21881: IFFALSE 21885
// exit ;
21883: GO 22410
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21885: LD_ADDR_VAR 0 12
21889: PUSH
21890: LD_VAR 0 2
21894: PPUSH
21895: LD_VAR 0 3
21899: PPUSH
21900: LD_VAR 0 4
21904: PPUSH
21905: LD_VAR 0 5
21909: PPUSH
21910: LD_VAR 0 1
21914: PPUSH
21915: CALL_OW 248
21919: PPUSH
21920: LD_INT 0
21922: PPUSH
21923: CALL 22415 0 6
21927: ST_TO_ADDR
// if not hexes then
21928: LD_VAR 0 12
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 22410
// hex := GetHexInfo ( x , y ) ;
21937: LD_ADDR_VAR 0 15
21941: PUSH
21942: LD_VAR 0 3
21946: PPUSH
21947: LD_VAR 0 4
21951: PPUSH
21952: CALL_OW 546
21956: ST_TO_ADDR
// if hex [ 1 ] then
21957: LD_VAR 0 15
21961: PUSH
21962: LD_INT 1
21964: ARRAY
21965: IFFALSE 21969
// exit ;
21967: GO 22410
// height := hex [ 2 ] ;
21969: LD_ADDR_VAR 0 13
21973: PUSH
21974: LD_VAR 0 15
21978: PUSH
21979: LD_INT 2
21981: ARRAY
21982: ST_TO_ADDR
// for i = 1 to hexes do
21983: LD_ADDR_VAR 0 7
21987: PUSH
21988: DOUBLE
21989: LD_INT 1
21991: DEC
21992: ST_TO_ADDR
21993: LD_VAR 0 12
21997: PUSH
21998: FOR_TO
21999: IFFALSE 22329
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22001: LD_VAR 0 12
22005: PUSH
22006: LD_VAR 0 7
22010: ARRAY
22011: PUSH
22012: LD_INT 1
22014: ARRAY
22015: PPUSH
22016: LD_VAR 0 12
22020: PUSH
22021: LD_VAR 0 7
22025: ARRAY
22026: PUSH
22027: LD_INT 2
22029: ARRAY
22030: PPUSH
22031: CALL_OW 488
22035: NOT
22036: PUSH
22037: LD_VAR 0 12
22041: PUSH
22042: LD_VAR 0 7
22046: ARRAY
22047: PUSH
22048: LD_INT 1
22050: ARRAY
22051: PPUSH
22052: LD_VAR 0 12
22056: PUSH
22057: LD_VAR 0 7
22061: ARRAY
22062: PUSH
22063: LD_INT 2
22065: ARRAY
22066: PPUSH
22067: CALL_OW 428
22071: PUSH
22072: LD_INT 0
22074: GREATER
22075: OR
22076: PUSH
22077: LD_VAR 0 12
22081: PUSH
22082: LD_VAR 0 7
22086: ARRAY
22087: PUSH
22088: LD_INT 1
22090: ARRAY
22091: PPUSH
22092: LD_VAR 0 12
22096: PUSH
22097: LD_VAR 0 7
22101: ARRAY
22102: PUSH
22103: LD_INT 2
22105: ARRAY
22106: PPUSH
22107: CALL_OW 351
22111: OR
22112: IFFALSE 22118
// exit ;
22114: POP
22115: POP
22116: GO 22410
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22118: LD_ADDR_VAR 0 8
22122: PUSH
22123: LD_VAR 0 12
22127: PUSH
22128: LD_VAR 0 7
22132: ARRAY
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PPUSH
22138: LD_VAR 0 12
22142: PUSH
22143: LD_VAR 0 7
22147: ARRAY
22148: PUSH
22149: LD_INT 2
22151: ARRAY
22152: PPUSH
22153: CALL_OW 546
22157: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22158: LD_VAR 0 8
22162: PUSH
22163: LD_INT 1
22165: ARRAY
22166: PUSH
22167: LD_VAR 0 8
22171: PUSH
22172: LD_INT 2
22174: ARRAY
22175: PUSH
22176: LD_VAR 0 13
22180: PUSH
22181: LD_INT 2
22183: PLUS
22184: GREATER
22185: OR
22186: PUSH
22187: LD_VAR 0 8
22191: PUSH
22192: LD_INT 2
22194: ARRAY
22195: PUSH
22196: LD_VAR 0 13
22200: PUSH
22201: LD_INT 2
22203: MINUS
22204: LESS
22205: OR
22206: PUSH
22207: LD_VAR 0 8
22211: PUSH
22212: LD_INT 3
22214: ARRAY
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: LD_INT 8
22221: PUSH
22222: LD_INT 9
22224: PUSH
22225: LD_INT 10
22227: PUSH
22228: LD_INT 11
22230: PUSH
22231: LD_INT 12
22233: PUSH
22234: LD_INT 13
22236: PUSH
22237: LD_INT 16
22239: PUSH
22240: LD_INT 17
22242: PUSH
22243: LD_INT 18
22245: PUSH
22246: LD_INT 19
22248: PUSH
22249: LD_INT 20
22251: PUSH
22252: LD_INT 21
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: IN
22270: NOT
22271: OR
22272: PUSH
22273: LD_VAR 0 8
22277: PUSH
22278: LD_INT 5
22280: ARRAY
22281: NOT
22282: OR
22283: PUSH
22284: LD_VAR 0 8
22288: PUSH
22289: LD_INT 6
22291: ARRAY
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: LD_INT 7
22301: PUSH
22302: LD_INT 9
22304: PUSH
22305: LD_INT 10
22307: PUSH
22308: LD_INT 11
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: IN
22319: NOT
22320: OR
22321: IFFALSE 22327
// exit ;
22323: POP
22324: POP
22325: GO 22410
// end ;
22327: GO 21998
22329: POP
22330: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22331: LD_VAR 0 9
22335: PPUSH
22336: LD_VAR 0 3
22340: PPUSH
22341: LD_VAR 0 4
22345: PPUSH
22346: LD_INT 20
22348: PPUSH
22349: CALL 14248 0 4
22353: PUSH
22354: LD_INT 4
22356: ARRAY
22357: IFFALSE 22361
// exit ;
22359: GO 22410
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22361: LD_VAR 0 2
22365: PUSH
22366: LD_INT 29
22368: PUSH
22369: LD_INT 30
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: IN
22376: PUSH
22377: LD_VAR 0 3
22381: PPUSH
22382: LD_VAR 0 4
22386: PPUSH
22387: LD_VAR 0 9
22391: PPUSH
22392: CALL_OW 440
22396: NOT
22397: AND
22398: IFFALSE 22402
// exit ;
22400: GO 22410
// result := true ;
22402: LD_ADDR_VAR 0 6
22406: PUSH
22407: LD_INT 1
22409: ST_TO_ADDR
// end ;
22410: LD_VAR 0 6
22414: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22415: LD_INT 0
22417: PPUSH
22418: PPUSH
22419: PPUSH
22420: PPUSH
22421: PPUSH
22422: PPUSH
22423: PPUSH
22424: PPUSH
22425: PPUSH
22426: PPUSH
22427: PPUSH
22428: PPUSH
22429: PPUSH
22430: PPUSH
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
22444: PPUSH
22445: PPUSH
22446: PPUSH
22447: PPUSH
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
22459: PPUSH
22460: PPUSH
22461: PPUSH
22462: PPUSH
22463: PPUSH
22464: PPUSH
22465: PPUSH
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
22470: PPUSH
22471: PPUSH
22472: PPUSH
22473: PPUSH
22474: PPUSH
// result = [ ] ;
22475: LD_ADDR_VAR 0 7
22479: PUSH
22480: EMPTY
22481: ST_TO_ADDR
// temp_list = [ ] ;
22482: LD_ADDR_VAR 0 9
22486: PUSH
22487: EMPTY
22488: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22489: LD_VAR 0 4
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 2
22502: PUSH
22503: LD_INT 3
22505: PUSH
22506: LD_INT 4
22508: PUSH
22509: LD_INT 5
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: IN
22520: NOT
22521: PUSH
22522: LD_VAR 0 1
22526: PUSH
22527: LD_INT 0
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: IN
22537: PUSH
22538: LD_VAR 0 5
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 3
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: IN
22557: NOT
22558: AND
22559: OR
22560: IFFALSE 22564
// exit ;
22562: GO 40955
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22564: LD_VAR 0 1
22568: PUSH
22569: LD_INT 6
22571: PUSH
22572: LD_INT 7
22574: PUSH
22575: LD_INT 8
22577: PUSH
22578: LD_INT 13
22580: PUSH
22581: LD_INT 12
22583: PUSH
22584: LD_INT 15
22586: PUSH
22587: LD_INT 11
22589: PUSH
22590: LD_INT 14
22592: PUSH
22593: LD_INT 10
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: IN
22607: IFFALSE 22617
// btype = b_lab ;
22609: LD_ADDR_VAR 0 1
22613: PUSH
22614: LD_INT 6
22616: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22617: LD_VAR 0 6
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: IN
22636: NOT
22637: PUSH
22638: LD_VAR 0 1
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 3
22654: PUSH
22655: LD_INT 6
22657: PUSH
22658: LD_INT 36
22660: PUSH
22661: LD_INT 4
22663: PUSH
22664: LD_INT 5
22666: PUSH
22667: LD_INT 31
22669: PUSH
22670: LD_INT 32
22672: PUSH
22673: LD_INT 33
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: IN
22689: NOT
22690: PUSH
22691: LD_VAR 0 6
22695: PUSH
22696: LD_INT 1
22698: EQUAL
22699: AND
22700: OR
22701: PUSH
22702: LD_VAR 0 1
22706: PUSH
22707: LD_INT 2
22709: PUSH
22710: LD_INT 3
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: IN
22717: NOT
22718: PUSH
22719: LD_VAR 0 6
22723: PUSH
22724: LD_INT 2
22726: EQUAL
22727: AND
22728: OR
22729: IFFALSE 22739
// mode = 0 ;
22731: LD_ADDR_VAR 0 6
22735: PUSH
22736: LD_INT 0
22738: ST_TO_ADDR
// case mode of 0 :
22739: LD_VAR 0 6
22743: PUSH
22744: LD_INT 0
22746: DOUBLE
22747: EQUAL
22748: IFTRUE 22752
22750: GO 34205
22752: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22753: LD_ADDR_VAR 0 11
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 2
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: LD_INT 2
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 1
22888: NEG
22889: PUSH
22890: LD_INT 1
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 1
22899: PUSH
22900: LD_INT 3
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: LD_INT 3
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22946: LD_ADDR_VAR 0 12
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: LD_INT 0
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 1
22974: PUSH
22975: LD_INT 0
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 1
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 0
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: LD_INT 0
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 1
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 2
23092: NEG
23093: PUSH
23094: LD_INT 1
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 3
23103: NEG
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 3
23114: NEG
23115: PUSH
23116: LD_INT 1
23118: NEG
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23142: LD_ADDR_VAR 0 13
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: LD_INT 0
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 0
23159: PUSH
23160: LD_INT 1
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: LD_INT 0
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 0
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 1
23200: NEG
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: NEG
23212: PUSH
23213: LD_INT 1
23215: NEG
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: LD_INT 2
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: NEG
23266: PUSH
23267: LD_INT 1
23269: NEG
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: LD_INT 3
23293: NEG
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: LD_INT 3
23301: NEG
23302: PUSH
23303: LD_INT 2
23305: NEG
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 3
23313: NEG
23314: PUSH
23315: LD_INT 3
23317: NEG
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: LIST
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23341: LD_ADDR_VAR 0 14
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 0
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 0
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 1
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 0
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 1
23422: NEG
23423: PUSH
23424: LD_INT 2
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 0
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 2
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: LD_INT 3
23491: NEG
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: LD_INT 3
23502: NEG
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: LD_INT 2
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23537: LD_ADDR_VAR 0 15
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 0
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 0
23554: PUSH
23555: LD_INT 1
23557: NEG
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: PUSH
23563: LD_INT 1
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 1
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 0
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: NEG
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: LD_INT 1
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 2
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 2
23660: NEG
23661: PUSH
23662: LD_INT 0
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 2
23671: NEG
23672: PUSH
23673: LD_INT 1
23675: NEG
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 1
23686: NEG
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23730: LD_ADDR_VAR 0 16
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 1
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 0
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: LD_INT 0
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 2
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 2
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: LD_INT 1
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 2
23865: NEG
23866: PUSH
23867: LD_INT 2
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 3
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 3
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: LD_INT 3
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23923: LD_ADDR_VAR 0 17
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: LD_INT 0
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 1
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PUSH
23969: LD_INT 0
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: PUSH
23979: LD_INT 1
23981: NEG
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: LD_INT 1
23996: NEG
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 2
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 0
24016: PUSH
24017: LD_INT 2
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 1
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: LD_INT 0
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 2
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 1
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: NEG
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: LD_INT 2
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24153: LD_ADDR_VAR 0 18
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 2
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: NEG
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24383: LD_ADDR_VAR 0 19
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 0
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: LD_INT 0
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 1
24456: NEG
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 1
24464: NEG
24465: PUSH
24466: LD_INT 2
24468: NEG
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: LD_INT 2
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 0
24538: PUSH
24539: LD_INT 2
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24613: LD_ADDR_VAR 0 20
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: LD_INT 0
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: LD_INT 1
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 1
24671: NEG
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 1
24694: NEG
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: LD_INT 1
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 2
24728: PUSH
24729: LD_INT 0
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 2
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 1
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 1
24778: NEG
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: LD_INT 0
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: LD_INT 2
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24843: LD_ADDR_VAR 0 21
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 0
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: LD_INT 0
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: LD_INT 1
24916: NEG
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: LD_INT 2
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 2
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 2
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 2
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: LD_INT 2
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: NEG
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25073: LD_ADDR_VAR 0 22
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: LD_INT 0
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: NEG
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: LD_INT 2
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: LD_INT 1
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: LD_INT 0
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: PUSH
25199: LD_INT 1
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 2
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 1
25218: PUSH
25219: LD_INT 2
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: LD_INT 0
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 1
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 0
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: LD_INT 2
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25303: LD_ADDR_VAR 0 23
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: LD_INT 1
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 0
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 1
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: NEG
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 0
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 2
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: NEG
25469: PUSH
25470: LD_INT 1
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: LD_INT 2
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 2
25514: NEG
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 3
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: LD_INT 2
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 2
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25583: LD_ADDR_VAR 0 24
25587: PUSH
25588: LD_INT 0
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 1
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 1
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: NEG
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 2
25770: NEG
25771: PUSH
25772: LD_INT 1
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: LD_INT 2
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 2
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 1
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 3
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 3
25826: PUSH
25827: LD_INT 2
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25859: LD_ADDR_VAR 0 25
25863: PUSH
25864: LD_INT 0
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 1
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: NEG
25929: PUSH
25930: LD_INT 1
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: LD_INT 2
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: NEG
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: LD_INT 2
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 3
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: LD_INT 3
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: LD_INT 3
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26133: LD_ADDR_VAR 0 26
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: LD_INT 2
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26409: LD_ADDR_VAR 0 27
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 0
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: NEG
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 1
26490: NEG
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 2
26505: NEG
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 1
26516: NEG
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 0
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: NEG
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: NEG
26609: PUSH
26610: LD_INT 2
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: LD_INT 1
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 3
26642: NEG
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 3
26654: NEG
26655: PUSH
26656: LD_INT 2
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26689: LD_ADDR_VAR 0 28
26693: PUSH
26694: LD_INT 0
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: LD_INT 1
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 0
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: LD_INT 2
26774: NEG
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: LD_INT 1
26796: NEG
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 2
26824: PUSH
26825: LD_INT 2
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: LD_INT 2
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: LD_INT 2
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: LD_INT 1
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: NEG
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 2
26876: NEG
26877: PUSH
26878: LD_INT 1
26880: NEG
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: LD_INT 2
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: LD_INT 3
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 1
26912: NEG
26913: PUSH
26914: LD_INT 3
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 3
26924: NEG
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 3
26936: NEG
26937: PUSH
26938: LD_INT 2
26940: NEG
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26971: LD_ADDR_VAR 0 29
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 0
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 1
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: NEG
27053: PUSH
27054: LD_INT 2
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 2
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 0
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: NEG
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: NEG
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 2
27161: NEG
27162: PUSH
27163: LD_INT 3
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 2
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 3
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 3
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 3
27215: NEG
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27250: LD_ADDR_VAR 0 30
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: LD_INT 2
27335: NEG
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 0
27343: PUSH
27344: LD_INT 2
27346: NEG
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 1
27357: NEG
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 2
27365: PUSH
27366: LD_INT 0
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 1
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 3
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 2
27472: PUSH
27473: LD_INT 3
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 2
27482: NEG
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 3
27493: NEG
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27528: LD_ADDR_VAR 0 31
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: LD_INT 1
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 0
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 2
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 2
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: NEG
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: NEG
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 2
27717: NEG
27718: PUSH
27719: LD_INT 3
27721: NEG
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 3
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 3
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: LD_INT 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 3
27771: NEG
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27806: LD_ADDR_VAR 0 32
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 2
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: PUSH
27911: LD_INT 1
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 1
27961: NEG
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: NEG
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 2
27983: NEG
27984: PUSH
27985: LD_INT 1
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 3
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 2
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 3
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 3
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 3
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28084: LD_ADDR_VAR 0 33
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: PUSH
28113: LD_INT 0
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: LD_INT 1
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: LD_INT 1
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 2
28262: NEG
28263: PUSH
28264: LD_INT 2
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 2
28274: NEG
28275: PUSH
28276: LD_INT 3
28278: NEG
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: LD_INT 1
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 3
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: LD_INT 3
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 3
28328: NEG
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28363: LD_ADDR_VAR 0 34
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 0
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: LD_INT 1
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 2
28448: NEG
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: LD_INT 0
28456: PUSH
28457: LD_INT 2
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 2
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 1
28508: NEG
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 2
28519: NEG
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 2
28542: NEG
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: LD_INT 3
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 3
28608: NEG
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28643: LD_ADDR_VAR 0 35
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: LD_INT 0
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 0
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: NEG
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28755: LD_ADDR_VAR 0 36
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 0
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 1
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 1
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: NEG
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28867: LD_ADDR_VAR 0 37
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 0
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 1
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28979: LD_ADDR_VAR 0 38
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: LD_INT 0
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: NEG
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: LD_INT 1
29052: NEG
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 2
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29091: LD_ADDR_VAR 0 39
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 0
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: LD_INT 2
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29203: LD_ADDR_VAR 0 40
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: LD_INT 0
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29315: LD_ADDR_VAR 0 41
29319: PUSH
29320: LD_INT 0
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: NEG
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 1
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 1
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 2
29470: NEG
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: NEG
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 3
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 3
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 3
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 3
29558: PUSH
29559: LD_INT 3
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: PUSH
29569: LD_INT 3
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: NEG
29579: PUSH
29580: LD_INT 1
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 3
29589: NEG
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 3
29612: NEG
29613: PUSH
29614: LD_INT 2
29616: NEG
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 3
29624: NEG
29625: PUSH
29626: LD_INT 3
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29665: LD_ADDR_VAR 0 42
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: LD_INT 2
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: LD_INT 1
29772: NEG
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 2
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: LD_INT 1
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 2
29831: NEG
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: NEG
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 2
29855: NEG
29856: PUSH
29857: LD_INT 3
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: NEG
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 3
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 2
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 3
29911: PUSH
29912: LD_INT 3
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 2
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 3
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: LD_INT 3
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: NEG
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 3
29962: NEG
29963: PUSH
29964: LD_INT 2
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: NEG
29975: PUSH
29976: LD_INT 3
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30015: LD_ADDR_VAR 0 43
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: LD_INT 0
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 1
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: NEG
30074: PUSH
30075: LD_INT 0
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 2
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 2
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 1
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 1
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: NEG
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 1
30204: NEG
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 0
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 1
30241: NEG
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 3
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 3
30311: NEG
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: NEG
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30363: LD_ADDR_VAR 0 44
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 0
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: LD_INT 1
30383: NEG
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: LD_INT 2
30448: NEG
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 2
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 2
30518: NEG
30519: PUSH
30520: LD_INT 0
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: LD_INT 2
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: LD_INT 3
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 3
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 3
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 3
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 3
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 3
30637: NEG
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: NEG
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: NEG
30673: PUSH
30674: LD_INT 3
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30713: LD_ADDR_VAR 0 45
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 1
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: LD_INT 1
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 2
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 2
30903: NEG
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: LD_INT 3
30919: NEG
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 3
30959: PUSH
30960: LD_INT 3
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 3
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 3
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 3
31010: NEG
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 3
31022: NEG
31023: PUSH
31024: LD_INT 3
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31063: LD_ADDR_VAR 0 46
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: LD_INT 0
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: LD_INT 2
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: NEG
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 2
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 3
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 3
31359: NEG
31360: PUSH
31361: LD_INT 0
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31411: LD_ADDR_VAR 0 47
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 1
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: NEG
31493: PUSH
31494: LD_INT 2
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 1
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31562: LD_ADDR_VAR 0 48
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 0
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 1
31620: NEG
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 2
31647: NEG
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31709: LD_ADDR_VAR 0 49
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 0
31726: PUSH
31727: LD_INT 1
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: NEG
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 2
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 2
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 2
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: LD_INT 2
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31853: LD_ADDR_VAR 0 50
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31997: LD_ADDR_VAR 0 51
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 0
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: LD_INT 2
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: NEG
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: NEG
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 2
32120: NEG
32121: PUSH
32122: LD_INT 1
32124: NEG
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32144: LD_ADDR_VAR 0 52
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 0
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 0
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: NEG
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32295: LD_ADDR_VAR 0 53
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: LD_INT 2
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: LD_INT 1
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 2
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32525: LD_ADDR_VAR 0 54
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: LD_INT 1
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: LD_INT 1
32716: NEG
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32755: LD_ADDR_VAR 0 55
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 1
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 0
32803: PUSH
32804: LD_INT 1
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: NEG
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 2
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 2
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: NEG
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32985: LD_ADDR_VAR 0 56
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 2
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: LD_INT 2
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: NEG
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: LD_INT 2
33188: NEG
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33215: LD_ADDR_VAR 0 57
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: LD_INT 1
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 0
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 1
33273: NEG
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: LD_INT 2
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 2
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33445: LD_ADDR_VAR 0 58
33449: PUSH
33450: LD_INT 0
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 2
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33675: LD_ADDR_VAR 0 59
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: NEG
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33763: LD_ADDR_VAR 0 60
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: LD_INT 1
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 0
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33851: LD_ADDR_VAR 0 61
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 1
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 1
33920: NEG
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33939: LD_ADDR_VAR 0 62
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 0
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: LD_INT 1
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34027: LD_ADDR_VAR 0 63
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 0
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34115: LD_ADDR_VAR 0 64
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 1
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 1
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
// end ; 1 :
34203: GO 40100
34205: LD_INT 1
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 36836
34213: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34214: LD_ADDR_VAR 0 11
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34258: LD_ADDR_VAR 0 12
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 3
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34299: LD_ADDR_VAR 0 13
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 3
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 3
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34339: LD_ADDR_VAR 0 14
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 3
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 3
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34380: LD_ADDR_VAR 0 15
34384: PUSH
34385: LD_INT 2
34387: NEG
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 3
34398: NEG
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 3
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34424: LD_ADDR_VAR 0 16
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 3
34435: NEG
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: LD_INT 2
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 3
34455: NEG
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: LIST
34469: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34470: LD_ADDR_VAR 0 17
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: LD_INT 3
34481: NEG
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 0
34489: PUSH
34490: LD_INT 3
34492: NEG
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34514: LD_ADDR_VAR 0 18
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34555: LD_ADDR_VAR 0 19
34559: PUSH
34560: LD_INT 3
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 3
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 3
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34595: LD_ADDR_VAR 0 20
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 3
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: LIST
34635: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34636: LD_ADDR_VAR 0 21
34640: PUSH
34641: LD_INT 2
34643: NEG
34644: PUSH
34645: LD_INT 1
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 3
34654: NEG
34655: PUSH
34656: LD_INT 0
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 3
34665: NEG
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34680: LD_ADDR_VAR 0 22
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 3
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 3
34699: NEG
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 3
34711: NEG
34712: PUSH
34713: LD_INT 3
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34726: LD_ADDR_VAR 0 23
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: LD_INT 3
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: LD_INT 4
34748: NEG
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34770: LD_ADDR_VAR 0 24
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 3
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 4
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34811: LD_ADDR_VAR 0 25
34815: PUSH
34816: LD_INT 3
34818: PUSH
34819: LD_INT 3
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 4
34828: PUSH
34829: LD_INT 3
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34851: LD_ADDR_VAR 0 26
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 3
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: LIST
34891: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34892: LD_ADDR_VAR 0 27
34896: PUSH
34897: LD_INT 3
34899: NEG
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 3
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 4
34921: NEG
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34936: LD_ADDR_VAR 0 28
34940: PUSH
34941: LD_INT 3
34943: NEG
34944: PUSH
34945: LD_INT 3
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: LD_INT 4
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 4
34967: NEG
34968: PUSH
34969: LD_INT 3
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: LIST
34981: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34982: LD_ADDR_VAR 0 29
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 3
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 2
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 4
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 4
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 3
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 5
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 5
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 4
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 6
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 6
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 5
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35137: LD_ADDR_VAR 0 30
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 3
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 3
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 3
35175: PUSH
35176: LD_INT 1
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 4
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 4
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 4
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 5
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 5
35227: PUSH
35228: LD_INT 1
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 5
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 6
35248: PUSH
35249: LD_INT 0
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 6
35258: PUSH
35259: LD_INT 1
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35280: LD_ADDR_VAR 0 31
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 3
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 2
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 4
35317: PUSH
35318: LD_INT 3
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 4
35327: PUSH
35328: LD_INT 4
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: LD_INT 4
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 5
35347: PUSH
35348: LD_INT 4
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 5
35357: PUSH
35358: LD_INT 5
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 4
35367: PUSH
35368: LD_INT 5
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 6
35377: PUSH
35378: LD_INT 5
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 6
35387: PUSH
35388: LD_INT 6
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 5
35397: PUSH
35398: LD_INT 6
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35419: LD_ADDR_VAR 0 32
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: LD_INT 3
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: NEG
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 4
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 4
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 5
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 5
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: LD_INT 4
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 6
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 6
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 5
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35562: LD_ADDR_VAR 0 33
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: NEG
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 3
35591: NEG
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 4
35614: NEG
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 4
35625: NEG
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 4
35637: NEG
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 5
35648: NEG
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 5
35659: NEG
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 5
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 6
35682: NEG
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 6
35693: NEG
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35717: LD_ADDR_VAR 0 34
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 3
35736: NEG
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: LD_INT 3
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 3
35760: NEG
35761: PUSH
35762: LD_INT 4
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 4
35772: NEG
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 4
35784: NEG
35785: PUSH
35786: LD_INT 4
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 4
35796: NEG
35797: PUSH
35798: LD_INT 5
35800: NEG
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 5
35808: NEG
35809: PUSH
35810: LD_INT 4
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 5
35820: NEG
35821: PUSH
35822: LD_INT 5
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 5
35832: NEG
35833: PUSH
35834: LD_INT 6
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 6
35844: NEG
35845: PUSH
35846: LD_INT 5
35848: NEG
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 6
35856: NEG
35857: PUSH
35858: LD_INT 6
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35880: LD_ADDR_VAR 0 41
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: LD_INT 3
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35924: LD_ADDR_VAR 0 42
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35965: LD_ADDR_VAR 0 43
35969: PUSH
35970: LD_INT 2
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 3
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: LIST
36004: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36005: LD_ADDR_VAR 0 44
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 3
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: LD_INT 2
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: LIST
36045: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36046: LD_ADDR_VAR 0 45
36050: PUSH
36051: LD_INT 2
36053: NEG
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 3
36075: NEG
36076: PUSH
36077: LD_INT 1
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: LIST
36089: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36090: LD_ADDR_VAR 0 46
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: LD_INT 2
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: NEG
36110: PUSH
36111: LD_INT 3
36113: NEG
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 3
36121: NEG
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36136: LD_ADDR_VAR 0 47
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 3
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 3
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36169: LD_ADDR_VAR 0 48
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36200: LD_ADDR_VAR 0 49
36204: PUSH
36205: LD_INT 3
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 3
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36229: LD_ADDR_VAR 0 50
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: LD_INT 3
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36258: LD_ADDR_VAR 0 51
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36289: LD_ADDR_VAR 0 52
36293: PUSH
36294: LD_INT 3
36296: NEG
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 3
36308: NEG
36309: PUSH
36310: LD_INT 2
36312: NEG
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36322: LD_ADDR_VAR 0 53
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 3
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: LD_INT 3
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: LIST
36365: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36366: LD_ADDR_VAR 0 54
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 3
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36407: LD_ADDR_VAR 0 55
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 3
36424: PUSH
36425: LD_INT 3
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 3
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36447: LD_ADDR_VAR 0 56
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 2
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36488: LD_ADDR_VAR 0 57
36492: PUSH
36493: LD_INT 2
36495: NEG
36496: PUSH
36497: LD_INT 1
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 3
36506: NEG
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 3
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36532: LD_ADDR_VAR 0 58
36536: PUSH
36537: LD_INT 2
36539: NEG
36540: PUSH
36541: LD_INT 3
36543: NEG
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 3
36551: NEG
36552: PUSH
36553: LD_INT 2
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 3
36563: NEG
36564: PUSH
36565: LD_INT 3
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36578: LD_ADDR_VAR 0 59
36582: PUSH
36583: LD_INT 1
36585: NEG
36586: PUSH
36587: LD_INT 2
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36622: LD_ADDR_VAR 0 60
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36663: LD_ADDR_VAR 0 61
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36703: LD_ADDR_VAR 0 62
36707: PUSH
36708: LD_INT 1
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: LD_INT 2
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36744: LD_ADDR_VAR 0 63
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: NEG
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: NEG
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36788: LD_ADDR_VAR 0 64
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: NEG
36808: PUSH
36809: LD_INT 1
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 2
36819: NEG
36820: PUSH
36821: LD_INT 2
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// end ; 2 :
36834: GO 40100
36836: LD_INT 2
36838: DOUBLE
36839: EQUAL
36840: IFTRUE 36844
36842: GO 40099
36844: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36845: LD_ADDR_VAR 0 29
36849: PUSH
36850: LD_INT 4
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 4
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 5
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 5
36883: PUSH
36884: LD_INT 1
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 4
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 3
36913: PUSH
36914: LD_INT 1
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 3
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 5
36935: PUSH
36936: LD_INT 2
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: LD_INT 3
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 4
36965: PUSH
36966: LD_INT 3
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 4
36975: PUSH
36976: LD_INT 4
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 3
36985: PUSH
36986: LD_INT 4
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 3
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: LD_INT 2
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 4
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: LD_INT 4
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 4
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: LD_INT 4
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 5
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: LD_INT 5
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: NEG
37086: PUSH
37087: LD_INT 4
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 2
37107: PUSH
37108: LD_INT 5
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: LD_INT 3
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 3
37128: NEG
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 3
37139: NEG
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 3
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 4
37184: NEG
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 4
37195: NEG
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 4
37207: NEG
37208: PUSH
37209: LD_INT 2
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 4
37230: NEG
37231: PUSH
37232: LD_INT 4
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 4
37242: NEG
37243: PUSH
37244: LD_INT 5
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 3
37254: NEG
37255: PUSH
37256: LD_INT 4
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 3
37266: NEG
37267: PUSH
37268: LD_INT 3
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 4
37278: NEG
37279: PUSH
37280: LD_INT 3
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 5
37290: NEG
37291: PUSH
37292: LD_INT 4
37294: NEG
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 5
37302: NEG
37303: PUSH
37304: LD_INT 5
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: LD_INT 5
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 5
37326: NEG
37327: PUSH
37328: LD_INT 3
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37383: LD_ADDR_VAR 0 30
37387: PUSH
37388: LD_INT 4
37390: PUSH
37391: LD_INT 4
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 4
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: LD_INT 4
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: LD_INT 5
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: LD_INT 5
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 3
37440: PUSH
37441: LD_INT 4
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 3
37450: PUSH
37451: LD_INT 3
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 5
37460: PUSH
37461: LD_INT 3
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: LD_INT 5
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 4
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 4
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: NEG
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 2
37552: PUSH
37553: LD_INT 4
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 4
37573: NEG
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 4
37584: NEG
37585: PUSH
37586: LD_INT 1
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 3
37607: NEG
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 4
37618: NEG
37619: PUSH
37620: LD_INT 1
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 5
37629: NEG
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 5
37640: NEG
37641: PUSH
37642: LD_INT 1
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 5
37652: NEG
37653: PUSH
37654: LD_INT 2
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: NEG
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 3
37675: NEG
37676: PUSH
37677: LD_INT 3
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 3
37687: NEG
37688: PUSH
37689: LD_INT 4
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 2
37699: NEG
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: LD_INT 2
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 3
37723: NEG
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 4
37735: NEG
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 4
37747: NEG
37748: PUSH
37749: LD_INT 4
37751: NEG
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 2
37759: NEG
37760: PUSH
37761: LD_INT 4
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 4
37771: NEG
37772: PUSH
37773: LD_INT 2
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: LD_INT 4
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 5
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 4
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 3
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 4
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: LD_INT 5
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 5
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37930: LD_ADDR_VAR 0 31
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 4
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 3
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 4
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 5
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 5
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 4
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: LD_INT 5
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 2
38019: NEG
38020: PUSH
38021: LD_INT 3
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 3
38030: NEG
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 3
38041: NEG
38042: PUSH
38043: LD_INT 1
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: NEG
38054: PUSH
38055: LD_INT 0
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: LD_INT 1
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 3
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 4
38086: NEG
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 4
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 4
38109: NEG
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 2
38121: NEG
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 4
38132: NEG
38133: PUSH
38134: LD_INT 4
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 4
38144: NEG
38145: PUSH
38146: LD_INT 5
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: NEG
38157: PUSH
38158: LD_INT 4
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 3
38168: NEG
38169: PUSH
38170: LD_INT 3
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 4
38180: NEG
38181: PUSH
38182: LD_INT 3
38184: NEG
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 5
38192: NEG
38193: PUSH
38194: LD_INT 4
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 5
38204: NEG
38205: PUSH
38206: LD_INT 5
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 3
38216: NEG
38217: PUSH
38218: LD_INT 5
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 5
38228: NEG
38229: PUSH
38230: LD_INT 3
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: LD_INT 4
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 3
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 3
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 1
38307: NEG
38308: PUSH
38309: LD_INT 4
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: LD_INT 2
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 4
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 4
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 4
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 5
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 5
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 4
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 3
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 5
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38480: LD_ADDR_VAR 0 32
38484: PUSH
38485: LD_INT 4
38487: NEG
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 4
38498: NEG
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 4
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 5
38543: NEG
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 5
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 5
38566: NEG
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 3
38578: NEG
38579: PUSH
38580: LD_INT 2
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: LD_INT 4
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 3
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: LD_INT 2
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 4
38649: NEG
38650: PUSH
38651: LD_INT 3
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 4
38661: NEG
38662: PUSH
38663: LD_INT 4
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: LD_INT 4
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 4
38685: NEG
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 4
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 5
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 4
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 3
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 4
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 5
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: LD_INT 3
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: LD_INT 5
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 4
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 4
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: LD_INT 2
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 4
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 4
38892: PUSH
38893: LD_INT 4
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 4
38902: PUSH
38903: LD_INT 3
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 5
38912: PUSH
38913: LD_INT 4
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 5
38922: PUSH
38923: LD_INT 5
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 4
38932: PUSH
38933: LD_INT 5
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: LD_INT 4
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: LD_INT 3
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 5
38962: PUSH
38963: LD_INT 3
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: LD_INT 5
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39027: LD_ADDR_VAR 0 33
39031: PUSH
39032: LD_INT 4
39034: NEG
39035: PUSH
39036: LD_INT 4
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 4
39046: NEG
39047: PUSH
39048: LD_INT 5
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 3
39058: NEG
39059: PUSH
39060: LD_INT 4
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: NEG
39071: PUSH
39072: LD_INT 3
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 4
39082: NEG
39083: PUSH
39084: LD_INT 3
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 5
39094: NEG
39095: PUSH
39096: LD_INT 4
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 5
39106: NEG
39107: PUSH
39108: LD_INT 5
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 3
39118: NEG
39119: PUSH
39120: LD_INT 5
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 5
39130: NEG
39131: PUSH
39132: LD_INT 3
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 4
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 3
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 4
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 4
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 4
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 4
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 5
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 4
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 3
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 5
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 3
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 3
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 4
39357: PUSH
39358: LD_INT 3
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 4
39367: PUSH
39368: LD_INT 4
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: LD_INT 4
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: PUSH
39388: LD_INT 3
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 4
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: LD_INT 4
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: PUSH
39448: LD_INT 4
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: PUSH
39458: LD_INT 5
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 5
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: LD_INT 4
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 1
39488: NEG
39489: PUSH
39490: LD_INT 3
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 5
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 2
39509: NEG
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39565: LD_ADDR_VAR 0 34
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 4
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: LD_INT 5
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: LD_INT 4
39597: NEG
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: LD_INT 3
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 4
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 5
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 5
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 4
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 4
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 4
39767: PUSH
39768: LD_INT 4
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 4
39777: PUSH
39778: LD_INT 3
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 5
39787: PUSH
39788: LD_INT 4
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 5
39797: PUSH
39798: LD_INT 5
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 4
39807: PUSH
39808: LD_INT 5
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: LD_INT 4
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 5
39837: PUSH
39838: LD_INT 3
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: LD_INT 5
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 3
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 4
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 3
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 4
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 2
39939: NEG
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 4
39950: NEG
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 4
39961: NEG
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 3
39973: NEG
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 3
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 4
39995: NEG
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 5
40006: NEG
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 5
40017: NEG
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 5
40029: NEG
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: ST_TO_ADDR
// end ; end ;
40097: GO 40100
40099: POP
// case btype of b_depot , b_warehouse :
40100: LD_VAR 0 1
40104: PUSH
40105: LD_INT 0
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40119
40111: LD_INT 1
40113: DOUBLE
40114: EQUAL
40115: IFTRUE 40119
40117: GO 40320
40119: POP
// case nation of nation_american :
40120: LD_VAR 0 5
40124: PUSH
40125: LD_INT 1
40127: DOUBLE
40128: EQUAL
40129: IFTRUE 40133
40131: GO 40189
40133: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40134: LD_ADDR_VAR 0 9
40138: PUSH
40139: LD_VAR 0 11
40143: PUSH
40144: LD_VAR 0 12
40148: PUSH
40149: LD_VAR 0 13
40153: PUSH
40154: LD_VAR 0 14
40158: PUSH
40159: LD_VAR 0 15
40163: PUSH
40164: LD_VAR 0 16
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: PUSH
40177: LD_VAR 0 4
40181: PUSH
40182: LD_INT 1
40184: PLUS
40185: ARRAY
40186: ST_TO_ADDR
40187: GO 40318
40189: LD_INT 2
40191: DOUBLE
40192: EQUAL
40193: IFTRUE 40197
40195: GO 40253
40197: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40198: LD_ADDR_VAR 0 9
40202: PUSH
40203: LD_VAR 0 17
40207: PUSH
40208: LD_VAR 0 18
40212: PUSH
40213: LD_VAR 0 19
40217: PUSH
40218: LD_VAR 0 20
40222: PUSH
40223: LD_VAR 0 21
40227: PUSH
40228: LD_VAR 0 22
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: PUSH
40241: LD_VAR 0 4
40245: PUSH
40246: LD_INT 1
40248: PLUS
40249: ARRAY
40250: ST_TO_ADDR
40251: GO 40318
40253: LD_INT 3
40255: DOUBLE
40256: EQUAL
40257: IFTRUE 40261
40259: GO 40317
40261: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40262: LD_ADDR_VAR 0 9
40266: PUSH
40267: LD_VAR 0 23
40271: PUSH
40272: LD_VAR 0 24
40276: PUSH
40277: LD_VAR 0 25
40281: PUSH
40282: LD_VAR 0 26
40286: PUSH
40287: LD_VAR 0 27
40291: PUSH
40292: LD_VAR 0 28
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: PUSH
40305: LD_VAR 0 4
40309: PUSH
40310: LD_INT 1
40312: PLUS
40313: ARRAY
40314: ST_TO_ADDR
40315: GO 40318
40317: POP
40318: GO 40873
40320: LD_INT 2
40322: DOUBLE
40323: EQUAL
40324: IFTRUE 40334
40326: LD_INT 3
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40390
40334: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40335: LD_ADDR_VAR 0 9
40339: PUSH
40340: LD_VAR 0 29
40344: PUSH
40345: LD_VAR 0 30
40349: PUSH
40350: LD_VAR 0 31
40354: PUSH
40355: LD_VAR 0 32
40359: PUSH
40360: LD_VAR 0 33
40364: PUSH
40365: LD_VAR 0 34
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: PUSH
40378: LD_VAR 0 4
40382: PUSH
40383: LD_INT 1
40385: PLUS
40386: ARRAY
40387: ST_TO_ADDR
40388: GO 40873
40390: LD_INT 16
40392: DOUBLE
40393: EQUAL
40394: IFTRUE 40452
40396: LD_INT 17
40398: DOUBLE
40399: EQUAL
40400: IFTRUE 40452
40402: LD_INT 18
40404: DOUBLE
40405: EQUAL
40406: IFTRUE 40452
40408: LD_INT 19
40410: DOUBLE
40411: EQUAL
40412: IFTRUE 40452
40414: LD_INT 22
40416: DOUBLE
40417: EQUAL
40418: IFTRUE 40452
40420: LD_INT 20
40422: DOUBLE
40423: EQUAL
40424: IFTRUE 40452
40426: LD_INT 21
40428: DOUBLE
40429: EQUAL
40430: IFTRUE 40452
40432: LD_INT 23
40434: DOUBLE
40435: EQUAL
40436: IFTRUE 40452
40438: LD_INT 24
40440: DOUBLE
40441: EQUAL
40442: IFTRUE 40452
40444: LD_INT 25
40446: DOUBLE
40447: EQUAL
40448: IFTRUE 40452
40450: GO 40508
40452: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40453: LD_ADDR_VAR 0 9
40457: PUSH
40458: LD_VAR 0 35
40462: PUSH
40463: LD_VAR 0 36
40467: PUSH
40468: LD_VAR 0 37
40472: PUSH
40473: LD_VAR 0 38
40477: PUSH
40478: LD_VAR 0 39
40482: PUSH
40483: LD_VAR 0 40
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: PUSH
40496: LD_VAR 0 4
40500: PUSH
40501: LD_INT 1
40503: PLUS
40504: ARRAY
40505: ST_TO_ADDR
40506: GO 40873
40508: LD_INT 6
40510: DOUBLE
40511: EQUAL
40512: IFTRUE 40564
40514: LD_INT 7
40516: DOUBLE
40517: EQUAL
40518: IFTRUE 40564
40520: LD_INT 8
40522: DOUBLE
40523: EQUAL
40524: IFTRUE 40564
40526: LD_INT 13
40528: DOUBLE
40529: EQUAL
40530: IFTRUE 40564
40532: LD_INT 12
40534: DOUBLE
40535: EQUAL
40536: IFTRUE 40564
40538: LD_INT 15
40540: DOUBLE
40541: EQUAL
40542: IFTRUE 40564
40544: LD_INT 11
40546: DOUBLE
40547: EQUAL
40548: IFTRUE 40564
40550: LD_INT 14
40552: DOUBLE
40553: EQUAL
40554: IFTRUE 40564
40556: LD_INT 10
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40564
40562: GO 40620
40564: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40565: LD_ADDR_VAR 0 9
40569: PUSH
40570: LD_VAR 0 41
40574: PUSH
40575: LD_VAR 0 42
40579: PUSH
40580: LD_VAR 0 43
40584: PUSH
40585: LD_VAR 0 44
40589: PUSH
40590: LD_VAR 0 45
40594: PUSH
40595: LD_VAR 0 46
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: PUSH
40608: LD_VAR 0 4
40612: PUSH
40613: LD_INT 1
40615: PLUS
40616: ARRAY
40617: ST_TO_ADDR
40618: GO 40873
40620: LD_INT 36
40622: DOUBLE
40623: EQUAL
40624: IFTRUE 40628
40626: GO 40684
40628: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40629: LD_ADDR_VAR 0 9
40633: PUSH
40634: LD_VAR 0 47
40638: PUSH
40639: LD_VAR 0 48
40643: PUSH
40644: LD_VAR 0 49
40648: PUSH
40649: LD_VAR 0 50
40653: PUSH
40654: LD_VAR 0 51
40658: PUSH
40659: LD_VAR 0 52
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: PUSH
40672: LD_VAR 0 4
40676: PUSH
40677: LD_INT 1
40679: PLUS
40680: ARRAY
40681: ST_TO_ADDR
40682: GO 40873
40684: LD_INT 4
40686: DOUBLE
40687: EQUAL
40688: IFTRUE 40710
40690: LD_INT 5
40692: DOUBLE
40693: EQUAL
40694: IFTRUE 40710
40696: LD_INT 34
40698: DOUBLE
40699: EQUAL
40700: IFTRUE 40710
40702: LD_INT 37
40704: DOUBLE
40705: EQUAL
40706: IFTRUE 40710
40708: GO 40766
40710: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40711: LD_ADDR_VAR 0 9
40715: PUSH
40716: LD_VAR 0 53
40720: PUSH
40721: LD_VAR 0 54
40725: PUSH
40726: LD_VAR 0 55
40730: PUSH
40731: LD_VAR 0 56
40735: PUSH
40736: LD_VAR 0 57
40740: PUSH
40741: LD_VAR 0 58
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: PUSH
40754: LD_VAR 0 4
40758: PUSH
40759: LD_INT 1
40761: PLUS
40762: ARRAY
40763: ST_TO_ADDR
40764: GO 40873
40766: LD_INT 31
40768: DOUBLE
40769: EQUAL
40770: IFTRUE 40816
40772: LD_INT 32
40774: DOUBLE
40775: EQUAL
40776: IFTRUE 40816
40778: LD_INT 33
40780: DOUBLE
40781: EQUAL
40782: IFTRUE 40816
40784: LD_INT 27
40786: DOUBLE
40787: EQUAL
40788: IFTRUE 40816
40790: LD_INT 26
40792: DOUBLE
40793: EQUAL
40794: IFTRUE 40816
40796: LD_INT 28
40798: DOUBLE
40799: EQUAL
40800: IFTRUE 40816
40802: LD_INT 29
40804: DOUBLE
40805: EQUAL
40806: IFTRUE 40816
40808: LD_INT 30
40810: DOUBLE
40811: EQUAL
40812: IFTRUE 40816
40814: GO 40872
40816: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40817: LD_ADDR_VAR 0 9
40821: PUSH
40822: LD_VAR 0 59
40826: PUSH
40827: LD_VAR 0 60
40831: PUSH
40832: LD_VAR 0 61
40836: PUSH
40837: LD_VAR 0 62
40841: PUSH
40842: LD_VAR 0 63
40846: PUSH
40847: LD_VAR 0 64
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: PUSH
40860: LD_VAR 0 4
40864: PUSH
40865: LD_INT 1
40867: PLUS
40868: ARRAY
40869: ST_TO_ADDR
40870: GO 40873
40872: POP
// temp_list2 = [ ] ;
40873: LD_ADDR_VAR 0 10
40877: PUSH
40878: EMPTY
40879: ST_TO_ADDR
// for i in temp_list do
40880: LD_ADDR_VAR 0 8
40884: PUSH
40885: LD_VAR 0 9
40889: PUSH
40890: FOR_IN
40891: IFFALSE 40943
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40893: LD_ADDR_VAR 0 10
40897: PUSH
40898: LD_VAR 0 10
40902: PUSH
40903: LD_VAR 0 8
40907: PUSH
40908: LD_INT 1
40910: ARRAY
40911: PUSH
40912: LD_VAR 0 2
40916: PLUS
40917: PUSH
40918: LD_VAR 0 8
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: PUSH
40927: LD_VAR 0 3
40931: PLUS
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: EMPTY
40938: LIST
40939: ADD
40940: ST_TO_ADDR
40941: GO 40890
40943: POP
40944: POP
// result = temp_list2 ;
40945: LD_ADDR_VAR 0 7
40949: PUSH
40950: LD_VAR 0 10
40954: ST_TO_ADDR
// end ;
40955: LD_VAR 0 7
40959: RET
// export function EnemyInRange ( unit , dist ) ; begin
40960: LD_INT 0
40962: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40963: LD_ADDR_VAR 0 3
40967: PUSH
40968: LD_VAR 0 1
40972: PPUSH
40973: CALL_OW 255
40977: PPUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 250
40987: PPUSH
40988: LD_VAR 0 1
40992: PPUSH
40993: CALL_OW 251
40997: PPUSH
40998: LD_VAR 0 2
41002: PPUSH
41003: CALL 14248 0 4
41007: PUSH
41008: LD_INT 4
41010: ARRAY
41011: ST_TO_ADDR
// end ;
41012: LD_VAR 0 3
41016: RET
// export function PlayerSeeMe ( unit ) ; begin
41017: LD_INT 0
41019: PPUSH
// result := See ( your_side , unit ) ;
41020: LD_ADDR_VAR 0 2
41024: PUSH
41025: LD_OWVAR 2
41029: PPUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 292
41039: ST_TO_ADDR
// end ;
41040: LD_VAR 0 2
41044: RET
// export function ReverseDir ( unit ) ; begin
41045: LD_INT 0
41047: PPUSH
// if not unit then
41048: LD_VAR 0 1
41052: NOT
41053: IFFALSE 41057
// exit ;
41055: GO 41080
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41057: LD_ADDR_VAR 0 2
41061: PUSH
41062: LD_VAR 0 1
41066: PPUSH
41067: CALL_OW 254
41071: PUSH
41072: LD_INT 3
41074: PLUS
41075: PUSH
41076: LD_INT 6
41078: MOD
41079: ST_TO_ADDR
// end ;
41080: LD_VAR 0 2
41084: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41085: LD_INT 0
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
// if not hexes then
41092: LD_VAR 0 2
41096: NOT
41097: IFFALSE 41101
// exit ;
41099: GO 41249
// dist := 9999 ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: LD_INT 9999
41108: ST_TO_ADDR
// for i = 1 to hexes do
41109: LD_ADDR_VAR 0 4
41113: PUSH
41114: DOUBLE
41115: LD_INT 1
41117: DEC
41118: ST_TO_ADDR
41119: LD_VAR 0 2
41123: PUSH
41124: FOR_TO
41125: IFFALSE 41237
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
41127: LD_VAR 0 1
41131: PPUSH
41132: LD_VAR 0 2
41136: PUSH
41137: LD_VAR 0 4
41141: ARRAY
41142: PUSH
41143: LD_INT 1
41145: ARRAY
41146: PPUSH
41147: LD_VAR 0 2
41151: PUSH
41152: LD_VAR 0 4
41156: ARRAY
41157: PUSH
41158: LD_INT 2
41160: ARRAY
41161: PPUSH
41162: CALL_OW 297
41166: PUSH
41167: LD_VAR 0 5
41171: LESS
41172: IFFALSE 41235
// begin hex := hexes [ i ] ;
41174: LD_ADDR_VAR 0 7
41178: PUSH
41179: LD_VAR 0 2
41183: PUSH
41184: LD_VAR 0 4
41188: ARRAY
41189: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: LD_VAR 0 2
41204: PUSH
41205: LD_VAR 0 4
41209: ARRAY
41210: PUSH
41211: LD_INT 1
41213: ARRAY
41214: PPUSH
41215: LD_VAR 0 2
41219: PUSH
41220: LD_VAR 0 4
41224: ARRAY
41225: PUSH
41226: LD_INT 2
41228: ARRAY
41229: PPUSH
41230: CALL_OW 297
41234: ST_TO_ADDR
// end ; end ;
41235: GO 41124
41237: POP
41238: POP
// result := hex ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_VAR 0 7
41248: ST_TO_ADDR
// end ;
41249: LD_VAR 0 3
41253: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41254: LD_INT 0
41256: PPUSH
41257: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41258: LD_VAR 0 1
41262: NOT
41263: PUSH
41264: LD_VAR 0 1
41268: PUSH
41269: LD_INT 21
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 23
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PPUSH
41293: CALL_OW 69
41297: IN
41298: NOT
41299: OR
41300: IFFALSE 41304
// exit ;
41302: GO 41351
// for i = 1 to 3 do
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: DOUBLE
41310: LD_INT 1
41312: DEC
41313: ST_TO_ADDR
41314: LD_INT 3
41316: PUSH
41317: FOR_TO
41318: IFFALSE 41349
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41320: LD_VAR 0 1
41324: PPUSH
41325: CALL_OW 250
41329: PPUSH
41330: LD_VAR 0 1
41334: PPUSH
41335: CALL_OW 251
41339: PPUSH
41340: LD_INT 1
41342: PPUSH
41343: CALL_OW 453
41347: GO 41317
41349: POP
41350: POP
// end ;
41351: LD_VAR 0 2
41355: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41356: LD_INT 0
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41364: LD_VAR 0 1
41368: NOT
41369: PUSH
41370: LD_VAR 0 2
41374: NOT
41375: OR
41376: PUSH
41377: LD_VAR 0 1
41381: PPUSH
41382: CALL_OW 314
41386: OR
41387: IFFALSE 41391
// exit ;
41389: GO 41832
// x := GetX ( enemy_unit ) ;
41391: LD_ADDR_VAR 0 7
41395: PUSH
41396: LD_VAR 0 2
41400: PPUSH
41401: CALL_OW 250
41405: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41406: LD_ADDR_VAR 0 8
41410: PUSH
41411: LD_VAR 0 2
41415: PPUSH
41416: CALL_OW 251
41420: ST_TO_ADDR
// if not x or not y then
41421: LD_VAR 0 7
41425: NOT
41426: PUSH
41427: LD_VAR 0 8
41431: NOT
41432: OR
41433: IFFALSE 41437
// exit ;
41435: GO 41832
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41437: LD_ADDR_VAR 0 6
41441: PUSH
41442: LD_VAR 0 7
41446: PPUSH
41447: LD_INT 0
41449: PPUSH
41450: LD_INT 4
41452: PPUSH
41453: CALL_OW 272
41457: PUSH
41458: LD_VAR 0 8
41462: PPUSH
41463: LD_INT 0
41465: PPUSH
41466: LD_INT 4
41468: PPUSH
41469: CALL_OW 273
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_VAR 0 7
41482: PPUSH
41483: LD_INT 1
41485: PPUSH
41486: LD_INT 4
41488: PPUSH
41489: CALL_OW 272
41493: PUSH
41494: LD_VAR 0 8
41498: PPUSH
41499: LD_INT 1
41501: PPUSH
41502: LD_INT 4
41504: PPUSH
41505: CALL_OW 273
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_VAR 0 7
41518: PPUSH
41519: LD_INT 2
41521: PPUSH
41522: LD_INT 4
41524: PPUSH
41525: CALL_OW 272
41529: PUSH
41530: LD_VAR 0 8
41534: PPUSH
41535: LD_INT 2
41537: PPUSH
41538: LD_INT 4
41540: PPUSH
41541: CALL_OW 273
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_VAR 0 7
41554: PPUSH
41555: LD_INT 3
41557: PPUSH
41558: LD_INT 4
41560: PPUSH
41561: CALL_OW 272
41565: PUSH
41566: LD_VAR 0 8
41570: PPUSH
41571: LD_INT 3
41573: PPUSH
41574: LD_INT 4
41576: PPUSH
41577: CALL_OW 273
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_VAR 0 7
41590: PPUSH
41591: LD_INT 4
41593: PPUSH
41594: LD_INT 4
41596: PPUSH
41597: CALL_OW 272
41601: PUSH
41602: LD_VAR 0 8
41606: PPUSH
41607: LD_INT 4
41609: PPUSH
41610: LD_INT 4
41612: PPUSH
41613: CALL_OW 273
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_VAR 0 7
41626: PPUSH
41627: LD_INT 5
41629: PPUSH
41630: LD_INT 4
41632: PPUSH
41633: CALL_OW 272
41637: PUSH
41638: LD_VAR 0 8
41642: PPUSH
41643: LD_INT 5
41645: PPUSH
41646: LD_INT 4
41648: PPUSH
41649: CALL_OW 273
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// for i = tmp downto 1 do
41666: LD_ADDR_VAR 0 4
41670: PUSH
41671: DOUBLE
41672: LD_VAR 0 6
41676: INC
41677: ST_TO_ADDR
41678: LD_INT 1
41680: PUSH
41681: FOR_DOWNTO
41682: IFFALSE 41783
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41684: LD_VAR 0 6
41688: PUSH
41689: LD_VAR 0 4
41693: ARRAY
41694: PUSH
41695: LD_INT 1
41697: ARRAY
41698: PPUSH
41699: LD_VAR 0 6
41703: PUSH
41704: LD_VAR 0 4
41708: ARRAY
41709: PUSH
41710: LD_INT 2
41712: ARRAY
41713: PPUSH
41714: CALL_OW 488
41718: NOT
41719: PUSH
41720: LD_VAR 0 6
41724: PUSH
41725: LD_VAR 0 4
41729: ARRAY
41730: PUSH
41731: LD_INT 1
41733: ARRAY
41734: PPUSH
41735: LD_VAR 0 6
41739: PUSH
41740: LD_VAR 0 4
41744: ARRAY
41745: PUSH
41746: LD_INT 2
41748: ARRAY
41749: PPUSH
41750: CALL_OW 428
41754: PUSH
41755: LD_INT 0
41757: NONEQUAL
41758: OR
41759: IFFALSE 41781
// tmp := Delete ( tmp , i ) ;
41761: LD_ADDR_VAR 0 6
41765: PUSH
41766: LD_VAR 0 6
41770: PPUSH
41771: LD_VAR 0 4
41775: PPUSH
41776: CALL_OW 3
41780: ST_TO_ADDR
41781: GO 41681
41783: POP
41784: POP
// j := GetClosestHex ( unit , tmp ) ;
41785: LD_ADDR_VAR 0 5
41789: PUSH
41790: LD_VAR 0 1
41794: PPUSH
41795: LD_VAR 0 6
41799: PPUSH
41800: CALL 41085 0 2
41804: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41805: LD_VAR 0 1
41809: PPUSH
41810: LD_VAR 0 5
41814: PUSH
41815: LD_INT 1
41817: ARRAY
41818: PPUSH
41819: LD_VAR 0 5
41823: PUSH
41824: LD_INT 2
41826: ARRAY
41827: PPUSH
41828: CALL_OW 111
// end ;
41832: LD_VAR 0 3
41836: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41837: LD_INT 0
41839: PPUSH
41840: PPUSH
41841: PPUSH
// uc_side = 0 ;
41842: LD_ADDR_OWVAR 20
41846: PUSH
41847: LD_INT 0
41849: ST_TO_ADDR
// uc_nation = 0 ;
41850: LD_ADDR_OWVAR 21
41854: PUSH
41855: LD_INT 0
41857: ST_TO_ADDR
// InitHc_All ( ) ;
41858: CALL_OW 584
// InitVc ;
41862: CALL_OW 20
// if mastodonts then
41866: LD_VAR 0 6
41870: IFFALSE 41937
// for i = 1 to mastodonts do
41872: LD_ADDR_VAR 0 11
41876: PUSH
41877: DOUBLE
41878: LD_INT 1
41880: DEC
41881: ST_TO_ADDR
41882: LD_VAR 0 6
41886: PUSH
41887: FOR_TO
41888: IFFALSE 41935
// begin vc_chassis := 31 ;
41890: LD_ADDR_OWVAR 37
41894: PUSH
41895: LD_INT 31
41897: ST_TO_ADDR
// vc_control := control_rider ;
41898: LD_ADDR_OWVAR 38
41902: PUSH
41903: LD_INT 4
41905: ST_TO_ADDR
// animal := CreateVehicle ;
41906: LD_ADDR_VAR 0 12
41910: PUSH
41911: CALL_OW 45
41915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41916: LD_VAR 0 12
41920: PPUSH
41921: LD_VAR 0 8
41925: PPUSH
41926: LD_INT 0
41928: PPUSH
41929: CALL 44072 0 3
// end ;
41933: GO 41887
41935: POP
41936: POP
// if horses then
41937: LD_VAR 0 5
41941: IFFALSE 42008
// for i = 1 to horses do
41943: LD_ADDR_VAR 0 11
41947: PUSH
41948: DOUBLE
41949: LD_INT 1
41951: DEC
41952: ST_TO_ADDR
41953: LD_VAR 0 5
41957: PUSH
41958: FOR_TO
41959: IFFALSE 42006
// begin hc_class := 21 ;
41961: LD_ADDR_OWVAR 28
41965: PUSH
41966: LD_INT 21
41968: ST_TO_ADDR
// hc_gallery :=  ;
41969: LD_ADDR_OWVAR 33
41973: PUSH
41974: LD_STRING 
41976: ST_TO_ADDR
// animal := CreateHuman ;
41977: LD_ADDR_VAR 0 12
41981: PUSH
41982: CALL_OW 44
41986: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41987: LD_VAR 0 12
41991: PPUSH
41992: LD_VAR 0 8
41996: PPUSH
41997: LD_INT 0
41999: PPUSH
42000: CALL 44072 0 3
// end ;
42004: GO 41958
42006: POP
42007: POP
// if birds then
42008: LD_VAR 0 1
42012: IFFALSE 42079
// for i = 1 to birds do
42014: LD_ADDR_VAR 0 11
42018: PUSH
42019: DOUBLE
42020: LD_INT 1
42022: DEC
42023: ST_TO_ADDR
42024: LD_VAR 0 1
42028: PUSH
42029: FOR_TO
42030: IFFALSE 42077
// begin hc_class = 18 ;
42032: LD_ADDR_OWVAR 28
42036: PUSH
42037: LD_INT 18
42039: ST_TO_ADDR
// hc_gallery =  ;
42040: LD_ADDR_OWVAR 33
42044: PUSH
42045: LD_STRING 
42047: ST_TO_ADDR
// animal := CreateHuman ;
42048: LD_ADDR_VAR 0 12
42052: PUSH
42053: CALL_OW 44
42057: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42058: LD_VAR 0 12
42062: PPUSH
42063: LD_VAR 0 8
42067: PPUSH
42068: LD_INT 0
42070: PPUSH
42071: CALL 44072 0 3
// end ;
42075: GO 42029
42077: POP
42078: POP
// if tigers then
42079: LD_VAR 0 2
42083: IFFALSE 42167
// for i = 1 to tigers do
42085: LD_ADDR_VAR 0 11
42089: PUSH
42090: DOUBLE
42091: LD_INT 1
42093: DEC
42094: ST_TO_ADDR
42095: LD_VAR 0 2
42099: PUSH
42100: FOR_TO
42101: IFFALSE 42165
// begin hc_class = class_tiger ;
42103: LD_ADDR_OWVAR 28
42107: PUSH
42108: LD_INT 14
42110: ST_TO_ADDR
// hc_gallery =  ;
42111: LD_ADDR_OWVAR 33
42115: PUSH
42116: LD_STRING 
42118: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42119: LD_ADDR_OWVAR 35
42123: PUSH
42124: LD_INT 7
42126: NEG
42127: PPUSH
42128: LD_INT 7
42130: PPUSH
42131: CALL_OW 12
42135: ST_TO_ADDR
// animal := CreateHuman ;
42136: LD_ADDR_VAR 0 12
42140: PUSH
42141: CALL_OW 44
42145: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42146: LD_VAR 0 12
42150: PPUSH
42151: LD_VAR 0 8
42155: PPUSH
42156: LD_INT 0
42158: PPUSH
42159: CALL 44072 0 3
// end ;
42163: GO 42100
42165: POP
42166: POP
// if apemans then
42167: LD_VAR 0 3
42171: IFFALSE 42294
// for i = 1 to apemans do
42173: LD_ADDR_VAR 0 11
42177: PUSH
42178: DOUBLE
42179: LD_INT 1
42181: DEC
42182: ST_TO_ADDR
42183: LD_VAR 0 3
42187: PUSH
42188: FOR_TO
42189: IFFALSE 42292
// begin hc_class = class_apeman ;
42191: LD_ADDR_OWVAR 28
42195: PUSH
42196: LD_INT 12
42198: ST_TO_ADDR
// hc_gallery =  ;
42199: LD_ADDR_OWVAR 33
42203: PUSH
42204: LD_STRING 
42206: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42207: LD_ADDR_OWVAR 35
42211: PUSH
42212: LD_INT 2
42214: NEG
42215: PPUSH
42216: LD_INT 2
42218: PPUSH
42219: CALL_OW 12
42223: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42224: LD_ADDR_OWVAR 31
42228: PUSH
42229: LD_INT 1
42231: PPUSH
42232: LD_INT 3
42234: PPUSH
42235: CALL_OW 12
42239: PUSH
42240: LD_INT 1
42242: PPUSH
42243: LD_INT 3
42245: PPUSH
42246: CALL_OW 12
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: LD_INT 0
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: ST_TO_ADDR
// animal := CreateHuman ;
42263: LD_ADDR_VAR 0 12
42267: PUSH
42268: CALL_OW 44
42272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42273: LD_VAR 0 12
42277: PPUSH
42278: LD_VAR 0 8
42282: PPUSH
42283: LD_INT 0
42285: PPUSH
42286: CALL 44072 0 3
// end ;
42290: GO 42188
42292: POP
42293: POP
// if enchidnas then
42294: LD_VAR 0 4
42298: IFFALSE 42365
// for i = 1 to enchidnas do
42300: LD_ADDR_VAR 0 11
42304: PUSH
42305: DOUBLE
42306: LD_INT 1
42308: DEC
42309: ST_TO_ADDR
42310: LD_VAR 0 4
42314: PUSH
42315: FOR_TO
42316: IFFALSE 42363
// begin hc_class = 13 ;
42318: LD_ADDR_OWVAR 28
42322: PUSH
42323: LD_INT 13
42325: ST_TO_ADDR
// hc_gallery =  ;
42326: LD_ADDR_OWVAR 33
42330: PUSH
42331: LD_STRING 
42333: ST_TO_ADDR
// animal := CreateHuman ;
42334: LD_ADDR_VAR 0 12
42338: PUSH
42339: CALL_OW 44
42343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42344: LD_VAR 0 12
42348: PPUSH
42349: LD_VAR 0 8
42353: PPUSH
42354: LD_INT 0
42356: PPUSH
42357: CALL 44072 0 3
// end ;
42361: GO 42315
42363: POP
42364: POP
// if fishes then
42365: LD_VAR 0 7
42369: IFFALSE 42436
// for i = 1 to fishes do
42371: LD_ADDR_VAR 0 11
42375: PUSH
42376: DOUBLE
42377: LD_INT 1
42379: DEC
42380: ST_TO_ADDR
42381: LD_VAR 0 7
42385: PUSH
42386: FOR_TO
42387: IFFALSE 42434
// begin hc_class = 20 ;
42389: LD_ADDR_OWVAR 28
42393: PUSH
42394: LD_INT 20
42396: ST_TO_ADDR
// hc_gallery =  ;
42397: LD_ADDR_OWVAR 33
42401: PUSH
42402: LD_STRING 
42404: ST_TO_ADDR
// animal := CreateHuman ;
42405: LD_ADDR_VAR 0 12
42409: PUSH
42410: CALL_OW 44
42414: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42415: LD_VAR 0 12
42419: PPUSH
42420: LD_VAR 0 9
42424: PPUSH
42425: LD_INT 0
42427: PPUSH
42428: CALL 44072 0 3
// end ;
42432: GO 42386
42434: POP
42435: POP
// end ;
42436: LD_VAR 0 10
42440: RET
// export function WantHeal ( sci , unit ) ; begin
42441: LD_INT 0
42443: PPUSH
// if GetTaskList ( sci ) > 0 then
42444: LD_VAR 0 1
42448: PPUSH
42449: CALL_OW 437
42453: PUSH
42454: LD_INT 0
42456: GREATER
42457: IFFALSE 42527
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42459: LD_VAR 0 1
42463: PPUSH
42464: CALL_OW 437
42468: PUSH
42469: LD_INT 1
42471: ARRAY
42472: PUSH
42473: LD_INT 1
42475: ARRAY
42476: PUSH
42477: LD_STRING l
42479: EQUAL
42480: PUSH
42481: LD_VAR 0 1
42485: PPUSH
42486: CALL_OW 437
42490: PUSH
42491: LD_INT 1
42493: ARRAY
42494: PUSH
42495: LD_INT 4
42497: ARRAY
42498: PUSH
42499: LD_VAR 0 2
42503: EQUAL
42504: AND
42505: IFFALSE 42517
// result := true else
42507: LD_ADDR_VAR 0 3
42511: PUSH
42512: LD_INT 1
42514: ST_TO_ADDR
42515: GO 42525
// result := false ;
42517: LD_ADDR_VAR 0 3
42521: PUSH
42522: LD_INT 0
42524: ST_TO_ADDR
// end else
42525: GO 42535
// result := false ;
42527: LD_ADDR_VAR 0 3
42531: PUSH
42532: LD_INT 0
42534: ST_TO_ADDR
// end ;
42535: LD_VAR 0 3
42539: RET
// export function HealTarget ( sci ) ; begin
42540: LD_INT 0
42542: PPUSH
// if not sci then
42543: LD_VAR 0 1
42547: NOT
42548: IFFALSE 42552
// exit ;
42550: GO 42617
// result := 0 ;
42552: LD_ADDR_VAR 0 2
42556: PUSH
42557: LD_INT 0
42559: ST_TO_ADDR
// if GetTaskList ( sci ) then
42560: LD_VAR 0 1
42564: PPUSH
42565: CALL_OW 437
42569: IFFALSE 42617
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42571: LD_VAR 0 1
42575: PPUSH
42576: CALL_OW 437
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: PUSH
42585: LD_INT 1
42587: ARRAY
42588: PUSH
42589: LD_STRING l
42591: EQUAL
42592: IFFALSE 42617
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42594: LD_ADDR_VAR 0 2
42598: PUSH
42599: LD_VAR 0 1
42603: PPUSH
42604: CALL_OW 437
42608: PUSH
42609: LD_INT 1
42611: ARRAY
42612: PUSH
42613: LD_INT 4
42615: ARRAY
42616: ST_TO_ADDR
// end ;
42617: LD_VAR 0 2
42621: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42622: LD_INT 0
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
// if not base_units then
42628: LD_VAR 0 1
42632: NOT
42633: IFFALSE 42637
// exit ;
42635: GO 42724
// result := false ;
42637: LD_ADDR_VAR 0 2
42641: PUSH
42642: LD_INT 0
42644: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: LD_INT 21
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PPUSH
42665: CALL_OW 72
42669: ST_TO_ADDR
// if not tmp then
42670: LD_VAR 0 5
42674: NOT
42675: IFFALSE 42679
// exit ;
42677: GO 42724
// for i in tmp do
42679: LD_ADDR_VAR 0 3
42683: PUSH
42684: LD_VAR 0 5
42688: PUSH
42689: FOR_IN
42690: IFFALSE 42722
// begin result := EnemyInRange ( i , 22 ) ;
42692: LD_ADDR_VAR 0 2
42696: PUSH
42697: LD_VAR 0 3
42701: PPUSH
42702: LD_INT 22
42704: PPUSH
42705: CALL 40960 0 2
42709: ST_TO_ADDR
// if result then
42710: LD_VAR 0 2
42714: IFFALSE 42720
// exit ;
42716: POP
42717: POP
42718: GO 42724
// end ;
42720: GO 42689
42722: POP
42723: POP
// end ;
42724: LD_VAR 0 2
42728: RET
// export function FilterByTag ( units , tag ) ; begin
42729: LD_INT 0
42731: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42732: LD_ADDR_VAR 0 3
42736: PUSH
42737: LD_VAR 0 1
42741: PPUSH
42742: LD_INT 120
42744: PUSH
42745: LD_VAR 0 2
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PPUSH
42754: CALL_OW 72
42758: ST_TO_ADDR
// end ;
42759: LD_VAR 0 3
42763: RET
// export function IsDriver ( un ) ; begin
42764: LD_INT 0
42766: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42767: LD_ADDR_VAR 0 2
42771: PUSH
42772: LD_VAR 0 1
42776: PUSH
42777: LD_INT 55
42779: PUSH
42780: EMPTY
42781: LIST
42782: PPUSH
42783: CALL_OW 69
42787: IN
42788: ST_TO_ADDR
// end ;
42789: LD_VAR 0 2
42793: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42794: LD_INT 0
42796: PPUSH
42797: PPUSH
// list := [ ] ;
42798: LD_ADDR_VAR 0 5
42802: PUSH
42803: EMPTY
42804: ST_TO_ADDR
// case d of 0 :
42805: LD_VAR 0 3
42809: PUSH
42810: LD_INT 0
42812: DOUBLE
42813: EQUAL
42814: IFTRUE 42818
42816: GO 42951
42818: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42819: LD_ADDR_VAR 0 5
42823: PUSH
42824: LD_VAR 0 1
42828: PUSH
42829: LD_INT 4
42831: MINUS
42832: PUSH
42833: LD_VAR 0 2
42837: PUSH
42838: LD_INT 4
42840: MINUS
42841: PUSH
42842: LD_INT 2
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: PUSH
42850: LD_VAR 0 1
42854: PUSH
42855: LD_INT 3
42857: MINUS
42858: PUSH
42859: LD_VAR 0 2
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: PUSH
42872: LD_VAR 0 1
42876: PUSH
42877: LD_INT 4
42879: PLUS
42880: PUSH
42881: LD_VAR 0 2
42885: PUSH
42886: LD_INT 4
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: PUSH
42894: LD_VAR 0 1
42898: PUSH
42899: LD_INT 3
42901: PLUS
42902: PUSH
42903: LD_VAR 0 2
42907: PUSH
42908: LD_INT 3
42910: PLUS
42911: PUSH
42912: LD_INT 5
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: PUSH
42920: LD_VAR 0 1
42924: PUSH
42925: LD_VAR 0 2
42929: PUSH
42930: LD_INT 4
42932: PLUS
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: ST_TO_ADDR
// end ; 1 :
42949: GO 43649
42951: LD_INT 1
42953: DOUBLE
42954: EQUAL
42955: IFTRUE 42959
42957: GO 43092
42959: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42960: LD_ADDR_VAR 0 5
42964: PUSH
42965: LD_VAR 0 1
42969: PUSH
42970: LD_VAR 0 2
42974: PUSH
42975: LD_INT 4
42977: MINUS
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: PUSH
42987: LD_VAR 0 1
42991: PUSH
42992: LD_INT 3
42994: MINUS
42995: PUSH
42996: LD_VAR 0 2
43000: PUSH
43001: LD_INT 3
43003: MINUS
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 4
43020: MINUS
43021: PUSH
43022: LD_VAR 0 2
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: PUSH
43035: LD_VAR 0 1
43039: PUSH
43040: LD_VAR 0 2
43044: PUSH
43045: LD_INT 3
43047: PLUS
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: PUSH
43057: LD_VAR 0 1
43061: PUSH
43062: LD_INT 4
43064: PLUS
43065: PUSH
43066: LD_VAR 0 2
43070: PUSH
43071: LD_INT 4
43073: PLUS
43074: PUSH
43075: LD_INT 5
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
// end ; 2 :
43090: GO 43649
43092: LD_INT 2
43094: DOUBLE
43095: EQUAL
43096: IFTRUE 43100
43098: GO 43229
43100: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43101: LD_ADDR_VAR 0 5
43105: PUSH
43106: LD_VAR 0 1
43110: PUSH
43111: LD_VAR 0 2
43115: PUSH
43116: LD_INT 3
43118: MINUS
43119: PUSH
43120: LD_INT 3
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: LIST
43127: PUSH
43128: LD_VAR 0 1
43132: PUSH
43133: LD_INT 4
43135: PLUS
43136: PUSH
43137: LD_VAR 0 2
43141: PUSH
43142: LD_INT 4
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: PUSH
43150: LD_VAR 0 1
43154: PUSH
43155: LD_VAR 0 2
43159: PUSH
43160: LD_INT 4
43162: PLUS
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: PUSH
43172: LD_VAR 0 1
43176: PUSH
43177: LD_INT 3
43179: MINUS
43180: PUSH
43181: LD_VAR 0 2
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: PUSH
43194: LD_VAR 0 1
43198: PUSH
43199: LD_INT 4
43201: MINUS
43202: PUSH
43203: LD_VAR 0 2
43207: PUSH
43208: LD_INT 4
43210: MINUS
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// end ; 3 :
43227: GO 43649
43229: LD_INT 3
43231: DOUBLE
43232: EQUAL
43233: IFTRUE 43237
43235: GO 43370
43237: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43238: LD_ADDR_VAR 0 5
43242: PUSH
43243: LD_VAR 0 1
43247: PUSH
43248: LD_INT 3
43250: PLUS
43251: PUSH
43252: LD_VAR 0 2
43256: PUSH
43257: LD_INT 4
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: PUSH
43265: LD_VAR 0 1
43269: PUSH
43270: LD_INT 4
43272: PLUS
43273: PUSH
43274: LD_VAR 0 2
43278: PUSH
43279: LD_INT 4
43281: PLUS
43282: PUSH
43283: LD_INT 5
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: PUSH
43291: LD_VAR 0 1
43295: PUSH
43296: LD_INT 4
43298: MINUS
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: LD_INT 1
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: PUSH
43313: LD_VAR 0 1
43317: PUSH
43318: LD_VAR 0 2
43322: PUSH
43323: LD_INT 4
43325: MINUS
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: PUSH
43335: LD_VAR 0 1
43339: PUSH
43340: LD_INT 3
43342: MINUS
43343: PUSH
43344: LD_VAR 0 2
43348: PUSH
43349: LD_INT 3
43351: MINUS
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: ST_TO_ADDR
// end ; 4 :
43368: GO 43649
43370: LD_INT 4
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43511
43378: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: LD_VAR 0 1
43388: PUSH
43389: LD_VAR 0 2
43393: PUSH
43394: LD_INT 4
43396: PLUS
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: PUSH
43406: LD_VAR 0 1
43410: PUSH
43411: LD_INT 3
43413: PLUS
43414: PUSH
43415: LD_VAR 0 2
43419: PUSH
43420: LD_INT 3
43422: PLUS
43423: PUSH
43424: LD_INT 5
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: PUSH
43432: LD_VAR 0 1
43436: PUSH
43437: LD_INT 4
43439: PLUS
43440: PUSH
43441: LD_VAR 0 2
43445: PUSH
43446: LD_INT 4
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: LIST
43453: PUSH
43454: LD_VAR 0 1
43458: PUSH
43459: LD_VAR 0 2
43463: PUSH
43464: LD_INT 3
43466: MINUS
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: PUSH
43476: LD_VAR 0 1
43480: PUSH
43481: LD_INT 4
43483: MINUS
43484: PUSH
43485: LD_VAR 0 2
43489: PUSH
43490: LD_INT 4
43492: MINUS
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: LIST
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: ST_TO_ADDR
// end ; 5 :
43509: GO 43649
43511: LD_INT 5
43513: DOUBLE
43514: EQUAL
43515: IFTRUE 43519
43517: GO 43648
43519: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43520: LD_ADDR_VAR 0 5
43524: PUSH
43525: LD_VAR 0 1
43529: PUSH
43530: LD_INT 4
43532: MINUS
43533: PUSH
43534: LD_VAR 0 2
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: PUSH
43547: LD_VAR 0 1
43551: PUSH
43552: LD_VAR 0 2
43556: PUSH
43557: LD_INT 4
43559: MINUS
43560: PUSH
43561: LD_INT 3
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: PUSH
43569: LD_VAR 0 1
43573: PUSH
43574: LD_INT 4
43576: PLUS
43577: PUSH
43578: LD_VAR 0 2
43582: PUSH
43583: LD_INT 4
43585: PLUS
43586: PUSH
43587: LD_INT 5
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: PUSH
43595: LD_VAR 0 1
43599: PUSH
43600: LD_INT 3
43602: PLUS
43603: PUSH
43604: LD_VAR 0 2
43608: PUSH
43609: LD_INT 4
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: PUSH
43617: LD_VAR 0 1
43621: PUSH
43622: LD_VAR 0 2
43626: PUSH
43627: LD_INT 3
43629: PLUS
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: LIST
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// end ; end ;
43646: GO 43649
43648: POP
// result := list ;
43649: LD_ADDR_VAR 0 4
43653: PUSH
43654: LD_VAR 0 5
43658: ST_TO_ADDR
// end ;
43659: LD_VAR 0 4
43663: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43664: LD_INT 0
43666: PPUSH
43667: PPUSH
43668: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43669: LD_VAR 0 1
43673: NOT
43674: PUSH
43675: LD_VAR 0 2
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 4
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: IN
43698: NOT
43699: OR
43700: IFFALSE 43704
// exit ;
43702: GO 43796
// tmp := [ ] ;
43704: LD_ADDR_VAR 0 5
43708: PUSH
43709: EMPTY
43710: ST_TO_ADDR
// for i in units do
43711: LD_ADDR_VAR 0 4
43715: PUSH
43716: LD_VAR 0 1
43720: PUSH
43721: FOR_IN
43722: IFFALSE 43765
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43724: LD_ADDR_VAR 0 5
43728: PUSH
43729: LD_VAR 0 5
43733: PPUSH
43734: LD_VAR 0 5
43738: PUSH
43739: LD_INT 1
43741: PLUS
43742: PPUSH
43743: LD_VAR 0 4
43747: PPUSH
43748: LD_VAR 0 2
43752: PPUSH
43753: CALL_OW 259
43757: PPUSH
43758: CALL_OW 2
43762: ST_TO_ADDR
43763: GO 43721
43765: POP
43766: POP
// if not tmp then
43767: LD_VAR 0 5
43771: NOT
43772: IFFALSE 43776
// exit ;
43774: GO 43796
// result := SortListByListDesc ( units , tmp ) ;
43776: LD_ADDR_VAR 0 3
43780: PUSH
43781: LD_VAR 0 1
43785: PPUSH
43786: LD_VAR 0 5
43790: PPUSH
43791: CALL_OW 77
43795: ST_TO_ADDR
// end ;
43796: LD_VAR 0 3
43800: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43801: LD_INT 0
43803: PPUSH
43804: PPUSH
43805: PPUSH
// result := false ;
43806: LD_ADDR_VAR 0 3
43810: PUSH
43811: LD_INT 0
43813: ST_TO_ADDR
// x := GetX ( building ) ;
43814: LD_ADDR_VAR 0 4
43818: PUSH
43819: LD_VAR 0 2
43823: PPUSH
43824: CALL_OW 250
43828: ST_TO_ADDR
// y := GetY ( building ) ;
43829: LD_ADDR_VAR 0 5
43833: PUSH
43834: LD_VAR 0 2
43838: PPUSH
43839: CALL_OW 251
43843: ST_TO_ADDR
// if not building or not x or not y then
43844: LD_VAR 0 2
43848: NOT
43849: PUSH
43850: LD_VAR 0 4
43854: NOT
43855: OR
43856: PUSH
43857: LD_VAR 0 5
43861: NOT
43862: OR
43863: IFFALSE 43867
// exit ;
43865: GO 43959
// if GetTaskList ( unit ) then
43867: LD_VAR 0 1
43871: PPUSH
43872: CALL_OW 437
43876: IFFALSE 43959
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43878: LD_STRING e
43880: PUSH
43881: LD_VAR 0 1
43885: PPUSH
43886: CALL_OW 437
43890: PUSH
43891: LD_INT 1
43893: ARRAY
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: EQUAL
43899: PUSH
43900: LD_VAR 0 4
43904: PUSH
43905: LD_VAR 0 1
43909: PPUSH
43910: CALL_OW 437
43914: PUSH
43915: LD_INT 1
43917: ARRAY
43918: PUSH
43919: LD_INT 2
43921: ARRAY
43922: EQUAL
43923: AND
43924: PUSH
43925: LD_VAR 0 5
43929: PUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: CALL_OW 437
43939: PUSH
43940: LD_INT 1
43942: ARRAY
43943: PUSH
43944: LD_INT 3
43946: ARRAY
43947: EQUAL
43948: AND
43949: IFFALSE 43959
// result := true end ;
43951: LD_ADDR_VAR 0 3
43955: PUSH
43956: LD_INT 1
43958: ST_TO_ADDR
// end ;
43959: LD_VAR 0 3
43963: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43964: LD_INT 0
43966: PPUSH
// result := false ;
43967: LD_ADDR_VAR 0 4
43971: PUSH
43972: LD_INT 0
43974: ST_TO_ADDR
// if GetTaskList ( unit ) then
43975: LD_VAR 0 1
43979: PPUSH
43980: CALL_OW 437
43984: IFFALSE 44067
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43986: LD_STRING M
43988: PUSH
43989: LD_VAR 0 1
43993: PPUSH
43994: CALL_OW 437
43998: PUSH
43999: LD_INT 1
44001: ARRAY
44002: PUSH
44003: LD_INT 1
44005: ARRAY
44006: EQUAL
44007: PUSH
44008: LD_VAR 0 2
44012: PUSH
44013: LD_VAR 0 1
44017: PPUSH
44018: CALL_OW 437
44022: PUSH
44023: LD_INT 1
44025: ARRAY
44026: PUSH
44027: LD_INT 2
44029: ARRAY
44030: EQUAL
44031: AND
44032: PUSH
44033: LD_VAR 0 3
44037: PUSH
44038: LD_VAR 0 1
44042: PPUSH
44043: CALL_OW 437
44047: PUSH
44048: LD_INT 1
44050: ARRAY
44051: PUSH
44052: LD_INT 3
44054: ARRAY
44055: EQUAL
44056: AND
44057: IFFALSE 44067
// result := true ;
44059: LD_ADDR_VAR 0 4
44063: PUSH
44064: LD_INT 1
44066: ST_TO_ADDR
// end ; end ;
44067: LD_VAR 0 4
44071: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44072: LD_INT 0
44074: PPUSH
44075: PPUSH
44076: PPUSH
44077: PPUSH
// if not unit or not area then
44078: LD_VAR 0 1
44082: NOT
44083: PUSH
44084: LD_VAR 0 2
44088: NOT
44089: OR
44090: IFFALSE 44094
// exit ;
44092: GO 44258
// tmp := AreaToList ( area , i ) ;
44094: LD_ADDR_VAR 0 6
44098: PUSH
44099: LD_VAR 0 2
44103: PPUSH
44104: LD_VAR 0 5
44108: PPUSH
44109: CALL_OW 517
44113: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44114: LD_ADDR_VAR 0 5
44118: PUSH
44119: DOUBLE
44120: LD_INT 1
44122: DEC
44123: ST_TO_ADDR
44124: LD_VAR 0 6
44128: PUSH
44129: LD_INT 1
44131: ARRAY
44132: PUSH
44133: FOR_TO
44134: IFFALSE 44256
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44136: LD_ADDR_VAR 0 7
44140: PUSH
44141: LD_VAR 0 6
44145: PUSH
44146: LD_INT 1
44148: ARRAY
44149: PUSH
44150: LD_VAR 0 5
44154: ARRAY
44155: PUSH
44156: LD_VAR 0 6
44160: PUSH
44161: LD_INT 2
44163: ARRAY
44164: PUSH
44165: LD_VAR 0 5
44169: ARRAY
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44175: LD_VAR 0 7
44179: PUSH
44180: LD_INT 1
44182: ARRAY
44183: PPUSH
44184: LD_VAR 0 7
44188: PUSH
44189: LD_INT 2
44191: ARRAY
44192: PPUSH
44193: CALL_OW 428
44197: PUSH
44198: LD_INT 0
44200: EQUAL
44201: IFFALSE 44254
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44203: LD_VAR 0 1
44207: PPUSH
44208: LD_VAR 0 7
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: PPUSH
44217: LD_VAR 0 7
44221: PUSH
44222: LD_INT 2
44224: ARRAY
44225: PPUSH
44226: LD_VAR 0 3
44230: PPUSH
44231: CALL_OW 48
// result := IsPlaced ( unit ) ;
44235: LD_ADDR_VAR 0 4
44239: PUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 305
44249: ST_TO_ADDR
// exit ;
44250: POP
44251: POP
44252: GO 44258
// end ; end ;
44254: GO 44133
44256: POP
44257: POP
// end ;
44258: LD_VAR 0 4
44262: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44263: LD_INT 0
44265: PPUSH
44266: PPUSH
44267: PPUSH
// if not side or side > 8 then
44268: LD_VAR 0 1
44272: NOT
44273: PUSH
44274: LD_VAR 0 1
44278: PUSH
44279: LD_INT 8
44281: GREATER
44282: OR
44283: IFFALSE 44287
// exit ;
44285: GO 44474
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44287: LD_ADDR_VAR 0 4
44291: PUSH
44292: LD_INT 22
44294: PUSH
44295: LD_VAR 0 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 21
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PPUSH
44318: CALL_OW 69
44322: ST_TO_ADDR
// if not tmp then
44323: LD_VAR 0 4
44327: NOT
44328: IFFALSE 44332
// exit ;
44330: GO 44474
// enable_addtolog := true ;
44332: LD_ADDR_OWVAR 81
44336: PUSH
44337: LD_INT 1
44339: ST_TO_ADDR
// AddToLog ( [ ) ;
44340: LD_STRING [
44342: PPUSH
44343: CALL_OW 561
// for i in tmp do
44347: LD_ADDR_VAR 0 3
44351: PUSH
44352: LD_VAR 0 4
44356: PUSH
44357: FOR_IN
44358: IFFALSE 44465
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44360: LD_STRING [
44362: PUSH
44363: LD_VAR 0 3
44367: PPUSH
44368: CALL_OW 266
44372: STR
44373: PUSH
44374: LD_STRING , 
44376: STR
44377: PUSH
44378: LD_VAR 0 3
44382: PPUSH
44383: CALL_OW 250
44387: STR
44388: PUSH
44389: LD_STRING , 
44391: STR
44392: PUSH
44393: LD_VAR 0 3
44397: PPUSH
44398: CALL_OW 251
44402: STR
44403: PUSH
44404: LD_STRING , 
44406: STR
44407: PUSH
44408: LD_VAR 0 3
44412: PPUSH
44413: CALL_OW 254
44417: STR
44418: PUSH
44419: LD_STRING , 
44421: STR
44422: PUSH
44423: LD_VAR 0 3
44427: PPUSH
44428: LD_INT 1
44430: PPUSH
44431: CALL_OW 268
44435: STR
44436: PUSH
44437: LD_STRING , 
44439: STR
44440: PUSH
44441: LD_VAR 0 3
44445: PPUSH
44446: LD_INT 2
44448: PPUSH
44449: CALL_OW 268
44453: STR
44454: PUSH
44455: LD_STRING ],
44457: STR
44458: PPUSH
44459: CALL_OW 561
// end ;
44463: GO 44357
44465: POP
44466: POP
// AddToLog ( ]; ) ;
44467: LD_STRING ];
44469: PPUSH
44470: CALL_OW 561
// end ;
44474: LD_VAR 0 2
44478: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44479: LD_INT 0
44481: PPUSH
44482: PPUSH
44483: PPUSH
44484: PPUSH
44485: PPUSH
// if not area or not rate or not max then
44486: LD_VAR 0 1
44490: NOT
44491: PUSH
44492: LD_VAR 0 2
44496: NOT
44497: OR
44498: PUSH
44499: LD_VAR 0 4
44503: NOT
44504: OR
44505: IFFALSE 44509
// exit ;
44507: GO 44698
// while 1 do
44509: LD_INT 1
44511: IFFALSE 44698
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44513: LD_ADDR_VAR 0 9
44517: PUSH
44518: LD_VAR 0 1
44522: PPUSH
44523: LD_INT 1
44525: PPUSH
44526: CALL_OW 287
44530: PUSH
44531: LD_INT 10
44533: MUL
44534: ST_TO_ADDR
// r := rate / 10 ;
44535: LD_ADDR_VAR 0 7
44539: PUSH
44540: LD_VAR 0 2
44544: PUSH
44545: LD_INT 10
44547: DIVREAL
44548: ST_TO_ADDR
// time := 1 1$00 ;
44549: LD_ADDR_VAR 0 8
44553: PUSH
44554: LD_INT 2100
44556: ST_TO_ADDR
// if amount < min then
44557: LD_VAR 0 9
44561: PUSH
44562: LD_VAR 0 3
44566: LESS
44567: IFFALSE 44585
// r := r * 2 else
44569: LD_ADDR_VAR 0 7
44573: PUSH
44574: LD_VAR 0 7
44578: PUSH
44579: LD_INT 2
44581: MUL
44582: ST_TO_ADDR
44583: GO 44611
// if amount > max then
44585: LD_VAR 0 9
44589: PUSH
44590: LD_VAR 0 4
44594: GREATER
44595: IFFALSE 44611
// r := r / 2 ;
44597: LD_ADDR_VAR 0 7
44601: PUSH
44602: LD_VAR 0 7
44606: PUSH
44607: LD_INT 2
44609: DIVREAL
44610: ST_TO_ADDR
// time := time / r ;
44611: LD_ADDR_VAR 0 8
44615: PUSH
44616: LD_VAR 0 8
44620: PUSH
44621: LD_VAR 0 7
44625: DIVREAL
44626: ST_TO_ADDR
// if time < 0 then
44627: LD_VAR 0 8
44631: PUSH
44632: LD_INT 0
44634: LESS
44635: IFFALSE 44652
// time := time * - 1 ;
44637: LD_ADDR_VAR 0 8
44641: PUSH
44642: LD_VAR 0 8
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: MUL
44651: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44652: LD_VAR 0 8
44656: PUSH
44657: LD_INT 35
44659: PPUSH
44660: LD_INT 875
44662: PPUSH
44663: CALL_OW 12
44667: PLUS
44668: PPUSH
44669: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44673: LD_INT 1
44675: PPUSH
44676: LD_INT 5
44678: PPUSH
44679: CALL_OW 12
44683: PPUSH
44684: LD_VAR 0 1
44688: PPUSH
44689: LD_INT 1
44691: PPUSH
44692: CALL_OW 55
// end ;
44696: GO 44509
// end ;
44698: LD_VAR 0 5
44702: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44703: LD_INT 0
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
// if not turrets or not factories then
44713: LD_VAR 0 1
44717: NOT
44718: PUSH
44719: LD_VAR 0 2
44723: NOT
44724: OR
44725: IFFALSE 44729
// exit ;
44727: GO 45036
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44729: LD_ADDR_VAR 0 10
44733: PUSH
44734: LD_INT 5
44736: PUSH
44737: LD_INT 6
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 2
44746: PUSH
44747: LD_INT 4
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 5
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 24
44771: PUSH
44772: LD_INT 25
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 23
44781: PUSH
44782: LD_INT 27
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 42
44795: PUSH
44796: LD_INT 43
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 44
44805: PUSH
44806: LD_INT 46
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 45
44815: PUSH
44816: LD_INT 47
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// result := [ ] ;
44833: LD_ADDR_VAR 0 3
44837: PUSH
44838: EMPTY
44839: ST_TO_ADDR
// for i in turrets do
44840: LD_ADDR_VAR 0 4
44844: PUSH
44845: LD_VAR 0 1
44849: PUSH
44850: FOR_IN
44851: IFFALSE 45034
// begin nat := GetNation ( i ) ;
44853: LD_ADDR_VAR 0 7
44857: PUSH
44858: LD_VAR 0 4
44862: PPUSH
44863: CALL_OW 248
44867: ST_TO_ADDR
// weapon := 0 ;
44868: LD_ADDR_VAR 0 8
44872: PUSH
44873: LD_INT 0
44875: ST_TO_ADDR
// if not nat then
44876: LD_VAR 0 7
44880: NOT
44881: IFFALSE 44885
// continue ;
44883: GO 44850
// for j in list [ nat ] do
44885: LD_ADDR_VAR 0 5
44889: PUSH
44890: LD_VAR 0 10
44894: PUSH
44895: LD_VAR 0 7
44899: ARRAY
44900: PUSH
44901: FOR_IN
44902: IFFALSE 44943
// if GetBWeapon ( i ) = j [ 1 ] then
44904: LD_VAR 0 4
44908: PPUSH
44909: CALL_OW 269
44913: PUSH
44914: LD_VAR 0 5
44918: PUSH
44919: LD_INT 1
44921: ARRAY
44922: EQUAL
44923: IFFALSE 44941
// begin weapon := j [ 2 ] ;
44925: LD_ADDR_VAR 0 8
44929: PUSH
44930: LD_VAR 0 5
44934: PUSH
44935: LD_INT 2
44937: ARRAY
44938: ST_TO_ADDR
// break ;
44939: GO 44943
// end ;
44941: GO 44901
44943: POP
44944: POP
// if not weapon then
44945: LD_VAR 0 8
44949: NOT
44950: IFFALSE 44954
// continue ;
44952: GO 44850
// for k in factories do
44954: LD_ADDR_VAR 0 6
44958: PUSH
44959: LD_VAR 0 2
44963: PUSH
44964: FOR_IN
44965: IFFALSE 45030
// begin weapons := AvailableWeaponList ( k ) ;
44967: LD_ADDR_VAR 0 9
44971: PUSH
44972: LD_VAR 0 6
44976: PPUSH
44977: CALL_OW 478
44981: ST_TO_ADDR
// if not weapons then
44982: LD_VAR 0 9
44986: NOT
44987: IFFALSE 44991
// continue ;
44989: GO 44964
// if weapon in weapons then
44991: LD_VAR 0 8
44995: PUSH
44996: LD_VAR 0 9
45000: IN
45001: IFFALSE 45028
// begin result := [ i , weapon ] ;
45003: LD_ADDR_VAR 0 3
45007: PUSH
45008: LD_VAR 0 4
45012: PUSH
45013: LD_VAR 0 8
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: ST_TO_ADDR
// exit ;
45022: POP
45023: POP
45024: POP
45025: POP
45026: GO 45036
// end ; end ;
45028: GO 44964
45030: POP
45031: POP
// end ;
45032: GO 44850
45034: POP
45035: POP
// end ;
45036: LD_VAR 0 3
45040: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45041: LD_INT 0
45043: PPUSH
// if not side or side > 8 then
45044: LD_VAR 0 3
45048: NOT
45049: PUSH
45050: LD_VAR 0 3
45054: PUSH
45055: LD_INT 8
45057: GREATER
45058: OR
45059: IFFALSE 45063
// exit ;
45061: GO 45122
// if not range then
45063: LD_VAR 0 4
45067: NOT
45068: IFFALSE 45079
// range := - 12 ;
45070: LD_ADDR_VAR 0 4
45074: PUSH
45075: LD_INT 12
45077: NEG
45078: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45079: LD_VAR 0 1
45083: PPUSH
45084: LD_VAR 0 2
45088: PPUSH
45089: LD_VAR 0 3
45093: PPUSH
45094: LD_VAR 0 4
45098: PPUSH
45099: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45103: LD_VAR 0 1
45107: PPUSH
45108: LD_VAR 0 2
45112: PPUSH
45113: LD_VAR 0 3
45117: PPUSH
45118: CALL_OW 331
// end ;
45122: LD_VAR 0 5
45126: RET
// export function Video ( mode ) ; begin
45127: LD_INT 0
45129: PPUSH
// ingame_video = mode ;
45130: LD_ADDR_OWVAR 52
45134: PUSH
45135: LD_VAR 0 1
45139: ST_TO_ADDR
// interface_hidden = mode ;
45140: LD_ADDR_OWVAR 54
45144: PUSH
45145: LD_VAR 0 1
45149: ST_TO_ADDR
// end ;
45150: LD_VAR 0 2
45154: RET
// export function Join ( array , element ) ; begin
45155: LD_INT 0
45157: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45158: LD_ADDR_VAR 0 3
45162: PUSH
45163: LD_VAR 0 1
45167: PPUSH
45168: LD_VAR 0 1
45172: PUSH
45173: LD_INT 1
45175: PLUS
45176: PPUSH
45177: LD_VAR 0 2
45181: PPUSH
45182: CALL_OW 1
45186: ST_TO_ADDR
// end ;
45187: LD_VAR 0 3
45191: RET
// export function JoinUnion ( array , element ) ; begin
45192: LD_INT 0
45194: PPUSH
// result := array union element ;
45195: LD_ADDR_VAR 0 3
45199: PUSH
45200: LD_VAR 0 1
45204: PUSH
45205: LD_VAR 0 2
45209: UNION
45210: ST_TO_ADDR
// end ;
45211: LD_VAR 0 3
45215: RET
// export function GetBehemoths ( side ) ; begin
45216: LD_INT 0
45218: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
45219: LD_ADDR_VAR 0 2
45223: PUSH
45224: LD_INT 22
45226: PUSH
45227: LD_VAR 0 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 31
45238: PUSH
45239: LD_INT 25
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PPUSH
45250: CALL_OW 69
45254: ST_TO_ADDR
// end ;
45255: LD_VAR 0 2
45259: RET
// export function Shuffle ( array ) ; var i , index ; begin
45260: LD_INT 0
45262: PPUSH
45263: PPUSH
45264: PPUSH
// result := [ ] ;
45265: LD_ADDR_VAR 0 2
45269: PUSH
45270: EMPTY
45271: ST_TO_ADDR
// if not array then
45272: LD_VAR 0 1
45276: NOT
45277: IFFALSE 45281
// exit ;
45279: GO 45380
// Randomize ;
45281: CALL_OW 10
// for i = array downto 1 do
45285: LD_ADDR_VAR 0 3
45289: PUSH
45290: DOUBLE
45291: LD_VAR 0 1
45295: INC
45296: ST_TO_ADDR
45297: LD_INT 1
45299: PUSH
45300: FOR_DOWNTO
45301: IFFALSE 45378
// begin index := rand ( 1 , array ) ;
45303: LD_ADDR_VAR 0 4
45307: PUSH
45308: LD_INT 1
45310: PPUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: CALL_OW 12
45320: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45321: LD_ADDR_VAR 0 2
45325: PUSH
45326: LD_VAR 0 2
45330: PPUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_INT 1
45338: PLUS
45339: PPUSH
45340: LD_VAR 0 1
45344: PUSH
45345: LD_VAR 0 4
45349: ARRAY
45350: PPUSH
45351: CALL_OW 2
45355: ST_TO_ADDR
// array := Delete ( array , index ) ;
45356: LD_ADDR_VAR 0 1
45360: PUSH
45361: LD_VAR 0 1
45365: PPUSH
45366: LD_VAR 0 4
45370: PPUSH
45371: CALL_OW 3
45375: ST_TO_ADDR
// end ;
45376: GO 45300
45378: POP
45379: POP
// end ;
45380: LD_VAR 0 2
45384: RET
// export function GetBaseMaterials ( base ) ; begin
45385: LD_INT 0
45387: PPUSH
// result := [ 0 , 0 , 0 ] ;
45388: LD_ADDR_VAR 0 2
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: ST_TO_ADDR
// if not base then
45407: LD_VAR 0 1
45411: NOT
45412: IFFALSE 45416
// exit ;
45414: GO 45465
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45416: LD_ADDR_VAR 0 2
45420: PUSH
45421: LD_VAR 0 1
45425: PPUSH
45426: LD_INT 1
45428: PPUSH
45429: CALL_OW 275
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: LD_INT 2
45441: PPUSH
45442: CALL_OW 275
45446: PUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: LD_INT 3
45454: PPUSH
45455: CALL_OW 275
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: ST_TO_ADDR
// end ;
45465: LD_VAR 0 2
45469: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45470: LD_INT 0
45472: PPUSH
45473: PPUSH
// result := array ;
45474: LD_ADDR_VAR 0 3
45478: PUSH
45479: LD_VAR 0 1
45483: ST_TO_ADDR
// if size > 0 then
45484: LD_VAR 0 2
45488: PUSH
45489: LD_INT 0
45491: GREATER
45492: IFFALSE 45538
// for i := array downto size do
45494: LD_ADDR_VAR 0 4
45498: PUSH
45499: DOUBLE
45500: LD_VAR 0 1
45504: INC
45505: ST_TO_ADDR
45506: LD_VAR 0 2
45510: PUSH
45511: FOR_DOWNTO
45512: IFFALSE 45536
// result := Delete ( result , result ) ;
45514: LD_ADDR_VAR 0 3
45518: PUSH
45519: LD_VAR 0 3
45523: PPUSH
45524: LD_VAR 0 3
45528: PPUSH
45529: CALL_OW 3
45533: ST_TO_ADDR
45534: GO 45511
45536: POP
45537: POP
// end ;
45538: LD_VAR 0 3
45542: RET
// export function ComExit ( unit ) ; var tmp ; begin
45543: LD_INT 0
45545: PPUSH
45546: PPUSH
// if not IsInUnit ( unit ) then
45547: LD_VAR 0 1
45551: PPUSH
45552: CALL_OW 310
45556: NOT
45557: IFFALSE 45561
// exit ;
45559: GO 45621
// tmp := IsInUnit ( unit ) ;
45561: LD_ADDR_VAR 0 3
45565: PUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: CALL_OW 310
45575: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45576: LD_VAR 0 3
45580: PPUSH
45581: CALL_OW 247
45585: PUSH
45586: LD_INT 2
45588: EQUAL
45589: IFFALSE 45602
// ComExitVehicle ( unit ) else
45591: LD_VAR 0 1
45595: PPUSH
45596: CALL_OW 121
45600: GO 45611
// ComExitBuilding ( unit ) ;
45602: LD_VAR 0 1
45606: PPUSH
45607: CALL_OW 122
// result := tmp ;
45611: LD_ADDR_VAR 0 2
45615: PUSH
45616: LD_VAR 0 3
45620: ST_TO_ADDR
// end ;
45621: LD_VAR 0 2
45625: RET
// export function ComExitAll ( units ) ; var i ; begin
45626: LD_INT 0
45628: PPUSH
45629: PPUSH
// if not units then
45630: LD_VAR 0 1
45634: NOT
45635: IFFALSE 45639
// exit ;
45637: GO 45665
// for i in units do
45639: LD_ADDR_VAR 0 3
45643: PUSH
45644: LD_VAR 0 1
45648: PUSH
45649: FOR_IN
45650: IFFALSE 45663
// ComExit ( i ) ;
45652: LD_VAR 0 3
45656: PPUSH
45657: CALL 45543 0 1
45661: GO 45649
45663: POP
45664: POP
// end ;
45665: LD_VAR 0 2
45669: RET
// export function ResetHc ; begin
45670: LD_INT 0
45672: PPUSH
// InitHc ;
45673: CALL_OW 19
// hc_importance := 0 ;
45677: LD_ADDR_OWVAR 32
45681: PUSH
45682: LD_INT 0
45684: ST_TO_ADDR
// end ;
45685: LD_VAR 0 1
45689: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45690: LD_INT 0
45692: PPUSH
45693: PPUSH
45694: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45695: LD_ADDR_VAR 0 6
45699: PUSH
45700: LD_VAR 0 1
45704: PUSH
45705: LD_VAR 0 3
45709: PLUS
45710: PUSH
45711: LD_INT 2
45713: DIV
45714: ST_TO_ADDR
// if _x < 0 then
45715: LD_VAR 0 6
45719: PUSH
45720: LD_INT 0
45722: LESS
45723: IFFALSE 45740
// _x := _x * - 1 ;
45725: LD_ADDR_VAR 0 6
45729: PUSH
45730: LD_VAR 0 6
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: MUL
45739: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45740: LD_ADDR_VAR 0 7
45744: PUSH
45745: LD_VAR 0 2
45749: PUSH
45750: LD_VAR 0 4
45754: PLUS
45755: PUSH
45756: LD_INT 2
45758: DIV
45759: ST_TO_ADDR
// if _y < 0 then
45760: LD_VAR 0 7
45764: PUSH
45765: LD_INT 0
45767: LESS
45768: IFFALSE 45785
// _y := _y * - 1 ;
45770: LD_ADDR_VAR 0 7
45774: PUSH
45775: LD_VAR 0 7
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: MUL
45784: ST_TO_ADDR
// result := [ _x , _y ] ;
45785: LD_ADDR_VAR 0 5
45789: PUSH
45790: LD_VAR 0 6
45794: PUSH
45795: LD_VAR 0 7
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// end ;
45804: LD_VAR 0 5
45808: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45809: LD_INT 0
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
// task := GetTaskList ( unit ) ;
45815: LD_ADDR_VAR 0 7
45819: PUSH
45820: LD_VAR 0 1
45824: PPUSH
45825: CALL_OW 437
45829: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45830: LD_VAR 0 7
45834: NOT
45835: PUSH
45836: LD_VAR 0 1
45840: PPUSH
45841: LD_VAR 0 2
45845: PPUSH
45846: CALL_OW 308
45850: NOT
45851: AND
45852: IFFALSE 45856
// exit ;
45854: GO 45974
// if IsInArea ( unit , area ) then
45856: LD_VAR 0 1
45860: PPUSH
45861: LD_VAR 0 2
45865: PPUSH
45866: CALL_OW 308
45870: IFFALSE 45888
// begin ComMoveToArea ( unit , goAway ) ;
45872: LD_VAR 0 1
45876: PPUSH
45877: LD_VAR 0 3
45881: PPUSH
45882: CALL_OW 113
// exit ;
45886: GO 45974
// end ; if task [ 1 ] [ 1 ] <> M then
45888: LD_VAR 0 7
45892: PUSH
45893: LD_INT 1
45895: ARRAY
45896: PUSH
45897: LD_INT 1
45899: ARRAY
45900: PUSH
45901: LD_STRING M
45903: NONEQUAL
45904: IFFALSE 45908
// exit ;
45906: GO 45974
// x := task [ 1 ] [ 2 ] ;
45908: LD_ADDR_VAR 0 5
45912: PUSH
45913: LD_VAR 0 7
45917: PUSH
45918: LD_INT 1
45920: ARRAY
45921: PUSH
45922: LD_INT 2
45924: ARRAY
45925: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45926: LD_ADDR_VAR 0 6
45930: PUSH
45931: LD_VAR 0 7
45935: PUSH
45936: LD_INT 1
45938: ARRAY
45939: PUSH
45940: LD_INT 3
45942: ARRAY
45943: ST_TO_ADDR
// if InArea ( x , y , area ) then
45944: LD_VAR 0 5
45948: PPUSH
45949: LD_VAR 0 6
45953: PPUSH
45954: LD_VAR 0 2
45958: PPUSH
45959: CALL_OW 309
45963: IFFALSE 45974
// ComStop ( unit ) ;
45965: LD_VAR 0 1
45969: PPUSH
45970: CALL_OW 141
// end ;
45974: LD_VAR 0 4
45978: RET
// export function Abs ( value ) ; begin
45979: LD_INT 0
45981: PPUSH
// result := value ;
45982: LD_ADDR_VAR 0 2
45986: PUSH
45987: LD_VAR 0 1
45991: ST_TO_ADDR
// if value < 0 then
45992: LD_VAR 0 1
45996: PUSH
45997: LD_INT 0
45999: LESS
46000: IFFALSE 46017
// result := value * - 1 ;
46002: LD_ADDR_VAR 0 2
46006: PUSH
46007: LD_VAR 0 1
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: MUL
46016: ST_TO_ADDR
// end ;
46017: LD_VAR 0 2
46021: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46022: LD_INT 0
46024: PPUSH
46025: PPUSH
46026: PPUSH
46027: PPUSH
46028: PPUSH
46029: PPUSH
46030: PPUSH
46031: PPUSH
// if not unit or not building then
46032: LD_VAR 0 1
46036: NOT
46037: PUSH
46038: LD_VAR 0 2
46042: NOT
46043: OR
46044: IFFALSE 46048
// exit ;
46046: GO 46274
// x := GetX ( building ) ;
46048: LD_ADDR_VAR 0 4
46052: PUSH
46053: LD_VAR 0 2
46057: PPUSH
46058: CALL_OW 250
46062: ST_TO_ADDR
// y := GetY ( building ) ;
46063: LD_ADDR_VAR 0 6
46067: PUSH
46068: LD_VAR 0 2
46072: PPUSH
46073: CALL_OW 251
46077: ST_TO_ADDR
// d := GetDir ( building ) ;
46078: LD_ADDR_VAR 0 8
46082: PUSH
46083: LD_VAR 0 2
46087: PPUSH
46088: CALL_OW 254
46092: ST_TO_ADDR
// r := 4 ;
46093: LD_ADDR_VAR 0 9
46097: PUSH
46098: LD_INT 4
46100: ST_TO_ADDR
// for i := 1 to 5 do
46101: LD_ADDR_VAR 0 10
46105: PUSH
46106: DOUBLE
46107: LD_INT 1
46109: DEC
46110: ST_TO_ADDR
46111: LD_INT 5
46113: PUSH
46114: FOR_TO
46115: IFFALSE 46272
// begin _x := ShiftX ( x , d , r + i ) ;
46117: LD_ADDR_VAR 0 5
46121: PUSH
46122: LD_VAR 0 4
46126: PPUSH
46127: LD_VAR 0 8
46131: PPUSH
46132: LD_VAR 0 9
46136: PUSH
46137: LD_VAR 0 10
46141: PLUS
46142: PPUSH
46143: CALL_OW 272
46147: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46148: LD_ADDR_VAR 0 7
46152: PUSH
46153: LD_VAR 0 6
46157: PPUSH
46158: LD_VAR 0 8
46162: PPUSH
46163: LD_VAR 0 9
46167: PUSH
46168: LD_VAR 0 10
46172: PLUS
46173: PPUSH
46174: CALL_OW 273
46178: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46179: LD_VAR 0 5
46183: PPUSH
46184: LD_VAR 0 7
46188: PPUSH
46189: CALL_OW 488
46193: PUSH
46194: LD_VAR 0 5
46198: PPUSH
46199: LD_VAR 0 7
46203: PPUSH
46204: CALL_OW 428
46208: PPUSH
46209: CALL_OW 247
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: IN
46224: NOT
46225: AND
46226: IFFALSE 46270
// begin ComMoveXY ( unit , _x , _y ) ;
46228: LD_VAR 0 1
46232: PPUSH
46233: LD_VAR 0 5
46237: PPUSH
46238: LD_VAR 0 7
46242: PPUSH
46243: CALL_OW 111
// result := [ _x , _y ] ;
46247: LD_ADDR_VAR 0 3
46251: PUSH
46252: LD_VAR 0 5
46256: PUSH
46257: LD_VAR 0 7
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// exit ;
46266: POP
46267: POP
46268: GO 46274
// end ; end ;
46270: GO 46114
46272: POP
46273: POP
// end ;
46274: LD_VAR 0 3
46278: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
46283: PPUSH
// result := 0 ;
46284: LD_ADDR_VAR 0 3
46288: PUSH
46289: LD_INT 0
46291: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46292: LD_VAR 0 1
46296: PUSH
46297: LD_INT 0
46299: LESS
46300: PUSH
46301: LD_VAR 0 1
46305: PUSH
46306: LD_INT 8
46308: GREATER
46309: OR
46310: PUSH
46311: LD_VAR 0 2
46315: PUSH
46316: LD_INT 0
46318: LESS
46319: OR
46320: PUSH
46321: LD_VAR 0 2
46325: PUSH
46326: LD_INT 8
46328: GREATER
46329: OR
46330: IFFALSE 46334
// exit ;
46332: GO 46409
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46334: LD_ADDR_VAR 0 4
46338: PUSH
46339: LD_INT 22
46341: PUSH
46342: LD_VAR 0 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PPUSH
46351: CALL_OW 69
46355: PUSH
46356: FOR_IN
46357: IFFALSE 46407
// begin un := UnitShoot ( i ) ;
46359: LD_ADDR_VAR 0 5
46363: PUSH
46364: LD_VAR 0 4
46368: PPUSH
46369: CALL_OW 504
46373: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46374: LD_VAR 0 5
46378: PPUSH
46379: CALL_OW 255
46383: PUSH
46384: LD_VAR 0 1
46388: EQUAL
46389: IFFALSE 46405
// begin result := un ;
46391: LD_ADDR_VAR 0 3
46395: PUSH
46396: LD_VAR 0 5
46400: ST_TO_ADDR
// exit ;
46401: POP
46402: POP
46403: GO 46409
// end ; end ;
46405: GO 46356
46407: POP
46408: POP
// end ;
46409: LD_VAR 0 3
46413: RET
// export function GetCargoBay ( units ) ; begin
46414: LD_INT 0
46416: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46417: LD_ADDR_VAR 0 2
46421: PUSH
46422: LD_VAR 0 1
46426: PPUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 34
46432: PUSH
46433: LD_INT 12
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 34
46442: PUSH
46443: LD_INT 51
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 34
46452: PUSH
46453: LD_INT 32
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 34
46462: PUSH
46463: LD_EXP 91
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: PPUSH
46479: CALL_OW 72
46483: ST_TO_ADDR
// end ;
46484: LD_VAR 0 2
46488: RET
// export function Negate ( value ) ; begin
46489: LD_INT 0
46491: PPUSH
// result := not value ;
46492: LD_ADDR_VAR 0 2
46496: PUSH
46497: LD_VAR 0 1
46501: NOT
46502: ST_TO_ADDR
// end ;
46503: LD_VAR 0 2
46507: RET
// export function Inc ( value ) ; begin
46508: LD_INT 0
46510: PPUSH
// result := value + 1 ;
46511: LD_ADDR_VAR 0 2
46515: PUSH
46516: LD_VAR 0 1
46520: PUSH
46521: LD_INT 1
46523: PLUS
46524: ST_TO_ADDR
// end ;
46525: LD_VAR 0 2
46529: RET
// export function Dec ( value ) ; begin
46530: LD_INT 0
46532: PPUSH
// result := value - 1 ;
46533: LD_ADDR_VAR 0 2
46537: PUSH
46538: LD_VAR 0 1
46542: PUSH
46543: LD_INT 1
46545: MINUS
46546: ST_TO_ADDR
// end ;
46547: LD_VAR 0 2
46551: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46552: LD_INT 0
46554: PPUSH
46555: PPUSH
46556: PPUSH
46557: PPUSH
46558: PPUSH
46559: PPUSH
46560: PPUSH
46561: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46562: LD_VAR 0 1
46566: PPUSH
46567: LD_VAR 0 2
46571: PPUSH
46572: CALL_OW 488
46576: NOT
46577: PUSH
46578: LD_VAR 0 3
46582: PPUSH
46583: LD_VAR 0 4
46587: PPUSH
46588: CALL_OW 488
46592: NOT
46593: OR
46594: IFFALSE 46607
// begin result := - 1 ;
46596: LD_ADDR_VAR 0 5
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: ST_TO_ADDR
// exit ;
46605: GO 46842
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46607: LD_ADDR_VAR 0 12
46611: PUSH
46612: LD_VAR 0 1
46616: PPUSH
46617: LD_VAR 0 2
46621: PPUSH
46622: LD_VAR 0 3
46626: PPUSH
46627: LD_VAR 0 4
46631: PPUSH
46632: CALL 45690 0 4
46636: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46637: LD_ADDR_VAR 0 11
46641: PUSH
46642: LD_VAR 0 1
46646: PPUSH
46647: LD_VAR 0 2
46651: PPUSH
46652: LD_VAR 0 12
46656: PUSH
46657: LD_INT 1
46659: ARRAY
46660: PPUSH
46661: LD_VAR 0 12
46665: PUSH
46666: LD_INT 2
46668: ARRAY
46669: PPUSH
46670: CALL_OW 298
46674: ST_TO_ADDR
// distance := 9999 ;
46675: LD_ADDR_VAR 0 10
46679: PUSH
46680: LD_INT 9999
46682: ST_TO_ADDR
// for i := 0 to 5 do
46683: LD_ADDR_VAR 0 6
46687: PUSH
46688: DOUBLE
46689: LD_INT 0
46691: DEC
46692: ST_TO_ADDR
46693: LD_INT 5
46695: PUSH
46696: FOR_TO
46697: IFFALSE 46840
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46699: LD_ADDR_VAR 0 7
46703: PUSH
46704: LD_VAR 0 1
46708: PPUSH
46709: LD_VAR 0 6
46713: PPUSH
46714: LD_VAR 0 11
46718: PPUSH
46719: CALL_OW 272
46723: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46724: LD_ADDR_VAR 0 8
46728: PUSH
46729: LD_VAR 0 2
46733: PPUSH
46734: LD_VAR 0 6
46738: PPUSH
46739: LD_VAR 0 11
46743: PPUSH
46744: CALL_OW 273
46748: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46749: LD_VAR 0 7
46753: PPUSH
46754: LD_VAR 0 8
46758: PPUSH
46759: CALL_OW 488
46763: NOT
46764: IFFALSE 46768
// continue ;
46766: GO 46696
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46768: LD_ADDR_VAR 0 9
46772: PUSH
46773: LD_VAR 0 12
46777: PUSH
46778: LD_INT 1
46780: ARRAY
46781: PPUSH
46782: LD_VAR 0 12
46786: PUSH
46787: LD_INT 2
46789: ARRAY
46790: PPUSH
46791: LD_VAR 0 7
46795: PPUSH
46796: LD_VAR 0 8
46800: PPUSH
46801: CALL_OW 298
46805: ST_TO_ADDR
// if tmp < distance then
46806: LD_VAR 0 9
46810: PUSH
46811: LD_VAR 0 10
46815: LESS
46816: IFFALSE 46838
// begin result := i ;
46818: LD_ADDR_VAR 0 5
46822: PUSH
46823: LD_VAR 0 6
46827: ST_TO_ADDR
// distance := tmp ;
46828: LD_ADDR_VAR 0 10
46832: PUSH
46833: LD_VAR 0 9
46837: ST_TO_ADDR
// end ; end ;
46838: GO 46696
46840: POP
46841: POP
// end ;
46842: LD_VAR 0 5
46846: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46847: LD_INT 0
46849: PPUSH
46850: PPUSH
// if not driver or not IsInUnit ( driver ) then
46851: LD_VAR 0 1
46855: NOT
46856: PUSH
46857: LD_VAR 0 1
46861: PPUSH
46862: CALL_OW 310
46866: NOT
46867: OR
46868: IFFALSE 46872
// exit ;
46870: GO 46962
// vehicle := IsInUnit ( driver ) ;
46872: LD_ADDR_VAR 0 3
46876: PUSH
46877: LD_VAR 0 1
46881: PPUSH
46882: CALL_OW 310
46886: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46887: LD_VAR 0 1
46891: PPUSH
46892: LD_STRING \
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: LD_INT 0
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: PUSH
46922: LD_STRING E
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_VAR 0 3
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PPUSH
46958: CALL_OW 446
// end ;
46962: LD_VAR 0 2
46966: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46967: LD_INT 0
46969: PPUSH
46970: PPUSH
// if not driver or not IsInUnit ( driver ) then
46971: LD_VAR 0 1
46975: NOT
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: CALL_OW 310
46986: NOT
46987: OR
46988: IFFALSE 46992
// exit ;
46990: GO 47082
// vehicle := IsInUnit ( driver ) ;
46992: LD_ADDR_VAR 0 3
46996: PUSH
46997: LD_VAR 0 1
47001: PPUSH
47002: CALL_OW 310
47006: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47007: LD_VAR 0 1
47011: PPUSH
47012: LD_STRING \
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: PUSH
47042: LD_STRING E
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_VAR 0 3
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PPUSH
47078: CALL_OW 447
// end ;
47082: LD_VAR 0 2
47086: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47087: LD_INT 0
47089: PPUSH
47090: PPUSH
47091: PPUSH
// tmp := [ ] ;
47092: LD_ADDR_VAR 0 5
47096: PUSH
47097: EMPTY
47098: ST_TO_ADDR
// for i in units do
47099: LD_ADDR_VAR 0 4
47103: PUSH
47104: LD_VAR 0 1
47108: PUSH
47109: FOR_IN
47110: IFFALSE 47148
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47112: LD_ADDR_VAR 0 5
47116: PUSH
47117: LD_VAR 0 5
47121: PPUSH
47122: LD_VAR 0 5
47126: PUSH
47127: LD_INT 1
47129: PLUS
47130: PPUSH
47131: LD_VAR 0 4
47135: PPUSH
47136: CALL_OW 256
47140: PPUSH
47141: CALL_OW 2
47145: ST_TO_ADDR
47146: GO 47109
47148: POP
47149: POP
// if not tmp then
47150: LD_VAR 0 5
47154: NOT
47155: IFFALSE 47159
// exit ;
47157: GO 47207
// if asc then
47159: LD_VAR 0 2
47163: IFFALSE 47187
// result := SortListByListAsc ( units , tmp ) else
47165: LD_ADDR_VAR 0 3
47169: PUSH
47170: LD_VAR 0 1
47174: PPUSH
47175: LD_VAR 0 5
47179: PPUSH
47180: CALL_OW 76
47184: ST_TO_ADDR
47185: GO 47207
// result := SortListByListDesc ( units , tmp ) ;
47187: LD_ADDR_VAR 0 3
47191: PUSH
47192: LD_VAR 0 1
47196: PPUSH
47197: LD_VAR 0 5
47201: PPUSH
47202: CALL_OW 77
47206: ST_TO_ADDR
// end ;
47207: LD_VAR 0 3
47211: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47212: LD_INT 0
47214: PPUSH
47215: PPUSH
// task := GetTaskList ( mech ) ;
47216: LD_ADDR_VAR 0 4
47220: PUSH
47221: LD_VAR 0 1
47225: PPUSH
47226: CALL_OW 437
47230: ST_TO_ADDR
// if not task then
47231: LD_VAR 0 4
47235: NOT
47236: IFFALSE 47240
// exit ;
47238: GO 47282
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47240: LD_ADDR_VAR 0 3
47244: PUSH
47245: LD_VAR 0 4
47249: PUSH
47250: LD_INT 1
47252: ARRAY
47253: PUSH
47254: LD_INT 1
47256: ARRAY
47257: PUSH
47258: LD_STRING r
47260: EQUAL
47261: PUSH
47262: LD_VAR 0 4
47266: PUSH
47267: LD_INT 1
47269: ARRAY
47270: PUSH
47271: LD_INT 4
47273: ARRAY
47274: PUSH
47275: LD_VAR 0 2
47279: EQUAL
47280: AND
47281: ST_TO_ADDR
// end ;
47282: LD_VAR 0 3
47286: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47287: LD_INT 0
47289: PPUSH
// SetDir ( unit , d ) ;
47290: LD_VAR 0 1
47294: PPUSH
47295: LD_VAR 0 4
47299: PPUSH
47300: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47304: LD_VAR 0 1
47308: PPUSH
47309: LD_VAR 0 2
47313: PPUSH
47314: LD_VAR 0 3
47318: PPUSH
47319: LD_VAR 0 5
47323: PPUSH
47324: CALL_OW 48
// end ;
47328: LD_VAR 0 6
47332: RET
// export function ToNaturalNumber ( number ) ; begin
47333: LD_INT 0
47335: PPUSH
// result := number div 1 ;
47336: LD_ADDR_VAR 0 2
47340: PUSH
47341: LD_VAR 0 1
47345: PUSH
47346: LD_INT 1
47348: DIV
47349: ST_TO_ADDR
// if number < 0 then
47350: LD_VAR 0 1
47354: PUSH
47355: LD_INT 0
47357: LESS
47358: IFFALSE 47368
// result := 0 ;
47360: LD_ADDR_VAR 0 2
47364: PUSH
47365: LD_INT 0
47367: ST_TO_ADDR
// end ;
47368: LD_VAR 0 2
47372: RET
// export function SortByClass ( units , class ) ; var un ; begin
47373: LD_INT 0
47375: PPUSH
47376: PPUSH
// if not units or not class then
47377: LD_VAR 0 1
47381: NOT
47382: PUSH
47383: LD_VAR 0 2
47387: NOT
47388: OR
47389: IFFALSE 47393
// exit ;
47391: GO 47488
// result := [ ] ;
47393: LD_ADDR_VAR 0 3
47397: PUSH
47398: EMPTY
47399: ST_TO_ADDR
// for un in units do
47400: LD_ADDR_VAR 0 4
47404: PUSH
47405: LD_VAR 0 1
47409: PUSH
47410: FOR_IN
47411: IFFALSE 47486
// if GetClass ( un ) = class then
47413: LD_VAR 0 4
47417: PPUSH
47418: CALL_OW 257
47422: PUSH
47423: LD_VAR 0 2
47427: EQUAL
47428: IFFALSE 47455
// result := Insert ( result , 1 , un ) else
47430: LD_ADDR_VAR 0 3
47434: PUSH
47435: LD_VAR 0 3
47439: PPUSH
47440: LD_INT 1
47442: PPUSH
47443: LD_VAR 0 4
47447: PPUSH
47448: CALL_OW 2
47452: ST_TO_ADDR
47453: GO 47484
// result := Replace ( result , result + 1 , un ) ;
47455: LD_ADDR_VAR 0 3
47459: PUSH
47460: LD_VAR 0 3
47464: PPUSH
47465: LD_VAR 0 3
47469: PUSH
47470: LD_INT 1
47472: PLUS
47473: PPUSH
47474: LD_VAR 0 4
47478: PPUSH
47479: CALL_OW 1
47483: ST_TO_ADDR
47484: GO 47410
47486: POP
47487: POP
// end ;
47488: LD_VAR 0 3
47492: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47493: LD_INT 0
47495: PPUSH
47496: PPUSH
47497: PPUSH
47498: PPUSH
47499: PPUSH
47500: PPUSH
47501: PPUSH
// result := [ ] ;
47502: LD_ADDR_VAR 0 4
47506: PUSH
47507: EMPTY
47508: ST_TO_ADDR
// if x - r < 0 then
47509: LD_VAR 0 1
47513: PUSH
47514: LD_VAR 0 3
47518: MINUS
47519: PUSH
47520: LD_INT 0
47522: LESS
47523: IFFALSE 47535
// min_x := 0 else
47525: LD_ADDR_VAR 0 8
47529: PUSH
47530: LD_INT 0
47532: ST_TO_ADDR
47533: GO 47551
// min_x := x - r ;
47535: LD_ADDR_VAR 0 8
47539: PUSH
47540: LD_VAR 0 1
47544: PUSH
47545: LD_VAR 0 3
47549: MINUS
47550: ST_TO_ADDR
// if y - r < 0 then
47551: LD_VAR 0 2
47555: PUSH
47556: LD_VAR 0 3
47560: MINUS
47561: PUSH
47562: LD_INT 0
47564: LESS
47565: IFFALSE 47577
// min_y := 0 else
47567: LD_ADDR_VAR 0 7
47571: PUSH
47572: LD_INT 0
47574: ST_TO_ADDR
47575: GO 47593
// min_y := y - r ;
47577: LD_ADDR_VAR 0 7
47581: PUSH
47582: LD_VAR 0 2
47586: PUSH
47587: LD_VAR 0 3
47591: MINUS
47592: ST_TO_ADDR
// max_x := x + r ;
47593: LD_ADDR_VAR 0 9
47597: PUSH
47598: LD_VAR 0 1
47602: PUSH
47603: LD_VAR 0 3
47607: PLUS
47608: ST_TO_ADDR
// max_y := y + r ;
47609: LD_ADDR_VAR 0 10
47613: PUSH
47614: LD_VAR 0 2
47618: PUSH
47619: LD_VAR 0 3
47623: PLUS
47624: ST_TO_ADDR
// for _x = min_x to max_x do
47625: LD_ADDR_VAR 0 5
47629: PUSH
47630: DOUBLE
47631: LD_VAR 0 8
47635: DEC
47636: ST_TO_ADDR
47637: LD_VAR 0 9
47641: PUSH
47642: FOR_TO
47643: IFFALSE 47744
// for _y = min_y to max_y do
47645: LD_ADDR_VAR 0 6
47649: PUSH
47650: DOUBLE
47651: LD_VAR 0 7
47655: DEC
47656: ST_TO_ADDR
47657: LD_VAR 0 10
47661: PUSH
47662: FOR_TO
47663: IFFALSE 47740
// begin if not ValidHex ( _x , _y ) then
47665: LD_VAR 0 5
47669: PPUSH
47670: LD_VAR 0 6
47674: PPUSH
47675: CALL_OW 488
47679: NOT
47680: IFFALSE 47684
// continue ;
47682: GO 47662
// if GetResourceTypeXY ( _x , _y ) then
47684: LD_VAR 0 5
47688: PPUSH
47689: LD_VAR 0 6
47693: PPUSH
47694: CALL_OW 283
47698: IFFALSE 47738
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47700: LD_ADDR_VAR 0 4
47704: PUSH
47705: LD_VAR 0 4
47709: PPUSH
47710: LD_VAR 0 4
47714: PUSH
47715: LD_INT 1
47717: PLUS
47718: PPUSH
47719: LD_VAR 0 5
47723: PUSH
47724: LD_VAR 0 6
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PPUSH
47733: CALL_OW 1
47737: ST_TO_ADDR
// end ;
47738: GO 47662
47740: POP
47741: POP
47742: GO 47642
47744: POP
47745: POP
// end ;
47746: LD_VAR 0 4
47750: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47751: LD_INT 0
47753: PPUSH
47754: PPUSH
47755: PPUSH
47756: PPUSH
47757: PPUSH
47758: PPUSH
47759: PPUSH
47760: PPUSH
// if not units then
47761: LD_VAR 0 1
47765: NOT
47766: IFFALSE 47770
// exit ;
47768: GO 48281
// result := UnitFilter ( units , [ f_ok ] ) ;
47770: LD_ADDR_VAR 0 3
47774: PUSH
47775: LD_VAR 0 1
47779: PPUSH
47780: LD_INT 50
47782: PUSH
47783: EMPTY
47784: LIST
47785: PPUSH
47786: CALL_OW 72
47790: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47791: LD_ADDR_VAR 0 8
47795: PUSH
47796: LD_VAR 0 1
47800: PUSH
47801: LD_INT 1
47803: ARRAY
47804: PPUSH
47805: CALL_OW 255
47809: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47810: LD_ADDR_VAR 0 10
47814: PUSH
47815: LD_INT 29
47817: PUSH
47818: LD_EXP 94
47822: PUSH
47823: LD_INT 49
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: LIST
47830: ST_TO_ADDR
// if not result then
47831: LD_VAR 0 3
47835: NOT
47836: IFFALSE 47840
// exit ;
47838: GO 48281
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47840: LD_ADDR_VAR 0 5
47844: PUSH
47845: LD_INT 81
47847: PUSH
47848: LD_VAR 0 8
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PPUSH
47857: CALL_OW 69
47861: ST_TO_ADDR
// for i in result do
47862: LD_ADDR_VAR 0 4
47866: PUSH
47867: LD_VAR 0 3
47871: PUSH
47872: FOR_IN
47873: IFFALSE 48279
// begin tag := GetTag ( i ) + 1 ;
47875: LD_ADDR_VAR 0 9
47879: PUSH
47880: LD_VAR 0 4
47884: PPUSH
47885: CALL_OW 110
47889: PUSH
47890: LD_INT 1
47892: PLUS
47893: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47894: LD_ADDR_VAR 0 7
47898: PUSH
47899: LD_VAR 0 4
47903: PPUSH
47904: CALL_OW 250
47908: PPUSH
47909: LD_VAR 0 4
47913: PPUSH
47914: CALL_OW 251
47918: PPUSH
47919: LD_INT 6
47921: PPUSH
47922: CALL 47493 0 3
47926: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47927: LD_VAR 0 7
47931: PUSH
47932: LD_VAR 0 4
47936: PPUSH
47937: CALL_OW 264
47941: PUSH
47942: LD_VAR 0 10
47946: IN
47947: NOT
47948: AND
47949: IFFALSE 47988
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47951: LD_VAR 0 4
47955: PPUSH
47956: LD_VAR 0 7
47960: PUSH
47961: LD_INT 1
47963: ARRAY
47964: PUSH
47965: LD_INT 1
47967: ARRAY
47968: PPUSH
47969: LD_VAR 0 7
47973: PUSH
47974: LD_INT 1
47976: ARRAY
47977: PUSH
47978: LD_INT 2
47980: ARRAY
47981: PPUSH
47982: CALL_OW 116
47986: GO 48277
// if path > tag then
47988: LD_VAR 0 2
47992: PUSH
47993: LD_VAR 0 9
47997: GREATER
47998: IFFALSE 48206
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
48000: LD_ADDR_VAR 0 6
48004: PUSH
48005: LD_VAR 0 5
48009: PPUSH
48010: LD_INT 91
48012: PUSH
48013: LD_VAR 0 4
48017: PUSH
48018: LD_INT 12
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: PPUSH
48026: CALL_OW 72
48030: ST_TO_ADDR
// if nearEnemy then
48031: LD_VAR 0 6
48035: IFFALSE 48104
// begin if GetWeapon ( i ) = ru_time_lapser then
48037: LD_VAR 0 4
48041: PPUSH
48042: CALL_OW 264
48046: PUSH
48047: LD_INT 49
48049: EQUAL
48050: IFFALSE 48078
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48052: LD_VAR 0 4
48056: PPUSH
48057: LD_VAR 0 6
48061: PPUSH
48062: LD_VAR 0 4
48066: PPUSH
48067: CALL_OW 74
48071: PPUSH
48072: CALL_OW 112
48076: GO 48102
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
48078: LD_VAR 0 4
48082: PPUSH
48083: LD_VAR 0 6
48087: PPUSH
48088: LD_VAR 0 4
48092: PPUSH
48093: CALL_OW 74
48097: PPUSH
48098: CALL_OW 115
// end else
48102: GO 48204
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48104: LD_VAR 0 4
48108: PPUSH
48109: LD_VAR 0 2
48113: PUSH
48114: LD_VAR 0 9
48118: ARRAY
48119: PUSH
48120: LD_INT 1
48122: ARRAY
48123: PPUSH
48124: LD_VAR 0 2
48128: PUSH
48129: LD_VAR 0 9
48133: ARRAY
48134: PUSH
48135: LD_INT 2
48137: ARRAY
48138: PPUSH
48139: CALL_OW 297
48143: PUSH
48144: LD_INT 6
48146: GREATER
48147: IFFALSE 48190
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48149: LD_VAR 0 4
48153: PPUSH
48154: LD_VAR 0 2
48158: PUSH
48159: LD_VAR 0 9
48163: ARRAY
48164: PUSH
48165: LD_INT 1
48167: ARRAY
48168: PPUSH
48169: LD_VAR 0 2
48173: PUSH
48174: LD_VAR 0 9
48178: ARRAY
48179: PUSH
48180: LD_INT 2
48182: ARRAY
48183: PPUSH
48184: CALL_OW 114
48188: GO 48204
// SetTag ( i , tag ) ;
48190: LD_VAR 0 4
48194: PPUSH
48195: LD_VAR 0 9
48199: PPUSH
48200: CALL_OW 109
// end else
48204: GO 48277
// if enemy then
48206: LD_VAR 0 5
48210: IFFALSE 48277
// begin if GetWeapon ( i ) = ru_time_lapser then
48212: LD_VAR 0 4
48216: PPUSH
48217: CALL_OW 264
48221: PUSH
48222: LD_INT 49
48224: EQUAL
48225: IFFALSE 48253
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
48227: LD_VAR 0 4
48231: PPUSH
48232: LD_VAR 0 5
48236: PPUSH
48237: LD_VAR 0 4
48241: PPUSH
48242: CALL_OW 74
48246: PPUSH
48247: CALL_OW 112
48251: GO 48277
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48253: LD_VAR 0 4
48257: PPUSH
48258: LD_VAR 0 5
48262: PPUSH
48263: LD_VAR 0 4
48267: PPUSH
48268: CALL_OW 74
48272: PPUSH
48273: CALL_OW 115
// end ; end ;
48277: GO 47872
48279: POP
48280: POP
// end ;
48281: LD_VAR 0 3
48285: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48286: LD_INT 0
48288: PPUSH
48289: PPUSH
48290: PPUSH
// if not unit or IsInUnit ( unit ) then
48291: LD_VAR 0 1
48295: NOT
48296: PUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 310
48306: OR
48307: IFFALSE 48311
// exit ;
48309: GO 48402
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48311: LD_ADDR_VAR 0 4
48315: PUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: CALL_OW 250
48325: PPUSH
48326: LD_VAR 0 2
48330: PPUSH
48331: LD_INT 1
48333: PPUSH
48334: CALL_OW 272
48338: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48339: LD_ADDR_VAR 0 5
48343: PUSH
48344: LD_VAR 0 1
48348: PPUSH
48349: CALL_OW 251
48353: PPUSH
48354: LD_VAR 0 2
48358: PPUSH
48359: LD_INT 1
48361: PPUSH
48362: CALL_OW 273
48366: ST_TO_ADDR
// if ValidHex ( x , y ) then
48367: LD_VAR 0 4
48371: PPUSH
48372: LD_VAR 0 5
48376: PPUSH
48377: CALL_OW 488
48381: IFFALSE 48402
// ComTurnXY ( unit , x , y ) ;
48383: LD_VAR 0 1
48387: PPUSH
48388: LD_VAR 0 4
48392: PPUSH
48393: LD_VAR 0 5
48397: PPUSH
48398: CALL_OW 118
// end ;
48402: LD_VAR 0 3
48406: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48407: LD_INT 0
48409: PPUSH
48410: PPUSH
// result := false ;
48411: LD_ADDR_VAR 0 3
48415: PUSH
48416: LD_INT 0
48418: ST_TO_ADDR
// if not units then
48419: LD_VAR 0 2
48423: NOT
48424: IFFALSE 48428
// exit ;
48426: GO 48473
// for i in units do
48428: LD_ADDR_VAR 0 4
48432: PUSH
48433: LD_VAR 0 2
48437: PUSH
48438: FOR_IN
48439: IFFALSE 48471
// if See ( side , i ) then
48441: LD_VAR 0 1
48445: PPUSH
48446: LD_VAR 0 4
48450: PPUSH
48451: CALL_OW 292
48455: IFFALSE 48469
// begin result := true ;
48457: LD_ADDR_VAR 0 3
48461: PUSH
48462: LD_INT 1
48464: ST_TO_ADDR
// exit ;
48465: POP
48466: POP
48467: GO 48473
// end ;
48469: GO 48438
48471: POP
48472: POP
// end ;
48473: LD_VAR 0 3
48477: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48478: LD_INT 0
48480: PPUSH
48481: PPUSH
48482: PPUSH
48483: PPUSH
// if not unit or not points then
48484: LD_VAR 0 1
48488: NOT
48489: PUSH
48490: LD_VAR 0 2
48494: NOT
48495: OR
48496: IFFALSE 48500
// exit ;
48498: GO 48590
// dist := 99999 ;
48500: LD_ADDR_VAR 0 5
48504: PUSH
48505: LD_INT 99999
48507: ST_TO_ADDR
// for i in points do
48508: LD_ADDR_VAR 0 4
48512: PUSH
48513: LD_VAR 0 2
48517: PUSH
48518: FOR_IN
48519: IFFALSE 48588
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48521: LD_ADDR_VAR 0 6
48525: PUSH
48526: LD_VAR 0 1
48530: PPUSH
48531: LD_VAR 0 4
48535: PUSH
48536: LD_INT 1
48538: ARRAY
48539: PPUSH
48540: LD_VAR 0 4
48544: PUSH
48545: LD_INT 2
48547: ARRAY
48548: PPUSH
48549: CALL_OW 297
48553: ST_TO_ADDR
// if tmpDist < dist then
48554: LD_VAR 0 6
48558: PUSH
48559: LD_VAR 0 5
48563: LESS
48564: IFFALSE 48586
// begin result := i ;
48566: LD_ADDR_VAR 0 3
48570: PUSH
48571: LD_VAR 0 4
48575: ST_TO_ADDR
// dist := tmpDist ;
48576: LD_ADDR_VAR 0 5
48580: PUSH
48581: LD_VAR 0 6
48585: ST_TO_ADDR
// end ; end ;
48586: GO 48518
48588: POP
48589: POP
// end ;
48590: LD_VAR 0 3
48594: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48595: LD_INT 0
48597: PPUSH
// uc_side := side ;
48598: LD_ADDR_OWVAR 20
48602: PUSH
48603: LD_VAR 0 1
48607: ST_TO_ADDR
// uc_nation := 3 ;
48608: LD_ADDR_OWVAR 21
48612: PUSH
48613: LD_INT 3
48615: ST_TO_ADDR
// vc_chassis := 25 ;
48616: LD_ADDR_OWVAR 37
48620: PUSH
48621: LD_INT 25
48623: ST_TO_ADDR
// vc_engine := engine_siberite ;
48624: LD_ADDR_OWVAR 39
48628: PUSH
48629: LD_INT 3
48631: ST_TO_ADDR
// vc_control := control_computer ;
48632: LD_ADDR_OWVAR 38
48636: PUSH
48637: LD_INT 3
48639: ST_TO_ADDR
// vc_weapon := 59 ;
48640: LD_ADDR_OWVAR 40
48644: PUSH
48645: LD_INT 59
48647: ST_TO_ADDR
// result := CreateVehicle ;
48648: LD_ADDR_VAR 0 5
48652: PUSH
48653: CALL_OW 45
48657: ST_TO_ADDR
// SetDir ( result , d ) ;
48658: LD_VAR 0 5
48662: PPUSH
48663: LD_VAR 0 4
48667: PPUSH
48668: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48672: LD_VAR 0 5
48676: PPUSH
48677: LD_VAR 0 2
48681: PPUSH
48682: LD_VAR 0 3
48686: PPUSH
48687: LD_INT 0
48689: PPUSH
48690: CALL_OW 48
// end ;
48694: LD_VAR 0 5
48698: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48699: LD_INT 0
48701: PPUSH
48702: PPUSH
48703: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48704: LD_ADDR_VAR 0 2
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48727: LD_VAR 0 1
48731: NOT
48732: PUSH
48733: LD_VAR 0 1
48737: PPUSH
48738: CALL_OW 264
48742: PUSH
48743: LD_INT 12
48745: PUSH
48746: LD_INT 51
48748: PUSH
48749: LD_INT 32
48751: PUSH
48752: LD_EXP 91
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: IN
48763: NOT
48764: OR
48765: IFFALSE 48769
// exit ;
48767: GO 48867
// for i := 1 to 3 do
48769: LD_ADDR_VAR 0 3
48773: PUSH
48774: DOUBLE
48775: LD_INT 1
48777: DEC
48778: ST_TO_ADDR
48779: LD_INT 3
48781: PUSH
48782: FOR_TO
48783: IFFALSE 48865
// begin tmp := GetCargo ( cargo , i ) ;
48785: LD_ADDR_VAR 0 4
48789: PUSH
48790: LD_VAR 0 1
48794: PPUSH
48795: LD_VAR 0 3
48799: PPUSH
48800: CALL_OW 289
48804: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
48805: LD_ADDR_VAR 0 2
48809: PUSH
48810: LD_VAR 0 2
48814: PPUSH
48815: LD_VAR 0 3
48819: PPUSH
48820: LD_VAR 0 4
48824: PPUSH
48825: CALL_OW 1
48829: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
48830: LD_ADDR_VAR 0 2
48834: PUSH
48835: LD_VAR 0 2
48839: PPUSH
48840: LD_INT 4
48842: PPUSH
48843: LD_VAR 0 2
48847: PUSH
48848: LD_INT 4
48850: ARRAY
48851: PUSH
48852: LD_VAR 0 4
48856: PLUS
48857: PPUSH
48858: CALL_OW 1
48862: ST_TO_ADDR
// end ;
48863: GO 48782
48865: POP
48866: POP
// end ;
48867: LD_VAR 0 2
48871: RET
// export function Length ( array ) ; begin
48872: LD_INT 0
48874: PPUSH
// result := array + 0 ;
48875: LD_ADDR_VAR 0 2
48879: PUSH
48880: LD_VAR 0 1
48884: PUSH
48885: LD_INT 0
48887: PLUS
48888: ST_TO_ADDR
// end ;
48889: LD_VAR 0 2
48893: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
48894: LD_INT 0
48896: PPUSH
// uc_side := side ;
48897: LD_ADDR_OWVAR 20
48901: PUSH
48902: LD_VAR 0 1
48906: ST_TO_ADDR
// uc_nation := nation ;
48907: LD_ADDR_OWVAR 21
48911: PUSH
48912: LD_VAR 0 2
48916: ST_TO_ADDR
// bc_level := level ;
48917: LD_ADDR_OWVAR 43
48921: PUSH
48922: LD_VAR 0 3
48926: ST_TO_ADDR
// bc_type := typ ;
48927: LD_ADDR_OWVAR 42
48931: PUSH
48932: LD_VAR 0 4
48936: ST_TO_ADDR
// bc_kind1 := - 1 ;
48937: LD_ADDR_OWVAR 44
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: ST_TO_ADDR
// bc_kind2 := - 1 ;
48946: LD_ADDR_OWVAR 45
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
48955: LD_ADDR_VAR 0 9
48959: PUSH
48960: LD_VAR 0 5
48964: PPUSH
48965: LD_VAR 0 6
48969: PPUSH
48970: LD_VAR 0 7
48974: PPUSH
48975: CALL_OW 47
48979: ST_TO_ADDR
// if isInBuildingStage then
48980: LD_VAR 0 8
48984: IFFALSE 48995
// SetBuildingStage ( result ) ;
48986: LD_VAR 0 9
48990: PPUSH
48991: CALL_OW 593
// end ;
48995: LD_VAR 0 9
48999: RET
// export function SayNoFaceRadio ( un , ident ) ; begin
49000: LD_INT 0
49002: PPUSH
// SayEx ( un , ident , false , true , true , false ) ;
49003: LD_VAR 0 1
49007: PPUSH
49008: LD_VAR 0 2
49012: PPUSH
49013: LD_INT 0
49015: PPUSH
49016: LD_INT 1
49018: PPUSH
49019: LD_INT 1
49021: PPUSH
49022: LD_INT 0
49024: PPUSH
49025: CALL_OW 587
// end ; end_of_file
49029: LD_VAR 0 3
49033: RET
// every 0 0$1 do
49034: GO 49036
49036: DISABLE
// begin enable ;
49037: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49038: LD_STRING updateTimer(
49040: PUSH
49041: LD_OWVAR 1
49045: STR
49046: PUSH
49047: LD_STRING );
49049: STR
49050: PPUSH
49051: CALL_OW 559
// end ;
49055: END
// export function SOS_MapStart ( ) ; begin
49056: LD_INT 0
49058: PPUSH
// if streamModeActive then
49059: LD_EXP 110
49063: IFFALSE 49072
// DefineStreamItems ( true ) ;
49065: LD_INT 1
49067: PPUSH
49068: CALL 50722 0 1
// UpdateFactoryWaypoints ( ) ;
49072: CALL 64306 0 0
// end ;
49076: LD_VAR 0 1
49080: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49081: LD_INT 0
49083: PPUSH
// if p2 = 100 then
49084: LD_VAR 0 2
49088: PUSH
49089: LD_INT 100
49091: EQUAL
49092: IFFALSE 50095
// begin if not StreamModeActive then
49094: LD_EXP 110
49098: NOT
49099: IFFALSE 49109
// StreamModeActive := true ;
49101: LD_ADDR_EXP 110
49105: PUSH
49106: LD_INT 1
49108: ST_TO_ADDR
// if p3 = 0 then
49109: LD_VAR 0 3
49113: PUSH
49114: LD_INT 0
49116: EQUAL
49117: IFFALSE 49123
// InitStreamMode ;
49119: CALL 50258 0 0
// if p3 = 1 then
49123: LD_VAR 0 3
49127: PUSH
49128: LD_INT 1
49130: EQUAL
49131: IFFALSE 49141
// sRocket := true ;
49133: LD_ADDR_EXP 115
49137: PUSH
49138: LD_INT 1
49140: ST_TO_ADDR
// if p3 = 2 then
49141: LD_VAR 0 3
49145: PUSH
49146: LD_INT 2
49148: EQUAL
49149: IFFALSE 49159
// sSpeed := true ;
49151: LD_ADDR_EXP 114
49155: PUSH
49156: LD_INT 1
49158: ST_TO_ADDR
// if p3 = 3 then
49159: LD_VAR 0 3
49163: PUSH
49164: LD_INT 3
49166: EQUAL
49167: IFFALSE 49177
// sEngine := true ;
49169: LD_ADDR_EXP 116
49173: PUSH
49174: LD_INT 1
49176: ST_TO_ADDR
// if p3 = 4 then
49177: LD_VAR 0 3
49181: PUSH
49182: LD_INT 4
49184: EQUAL
49185: IFFALSE 49195
// sSpec := true ;
49187: LD_ADDR_EXP 113
49191: PUSH
49192: LD_INT 1
49194: ST_TO_ADDR
// if p3 = 5 then
49195: LD_VAR 0 3
49199: PUSH
49200: LD_INT 5
49202: EQUAL
49203: IFFALSE 49213
// sLevel := true ;
49205: LD_ADDR_EXP 117
49209: PUSH
49210: LD_INT 1
49212: ST_TO_ADDR
// if p3 = 6 then
49213: LD_VAR 0 3
49217: PUSH
49218: LD_INT 6
49220: EQUAL
49221: IFFALSE 49231
// sArmoury := true ;
49223: LD_ADDR_EXP 118
49227: PUSH
49228: LD_INT 1
49230: ST_TO_ADDR
// if p3 = 7 then
49231: LD_VAR 0 3
49235: PUSH
49236: LD_INT 7
49238: EQUAL
49239: IFFALSE 49249
// sRadar := true ;
49241: LD_ADDR_EXP 119
49245: PUSH
49246: LD_INT 1
49248: ST_TO_ADDR
// if p3 = 8 then
49249: LD_VAR 0 3
49253: PUSH
49254: LD_INT 8
49256: EQUAL
49257: IFFALSE 49267
// sBunker := true ;
49259: LD_ADDR_EXP 120
49263: PUSH
49264: LD_INT 1
49266: ST_TO_ADDR
// if p3 = 9 then
49267: LD_VAR 0 3
49271: PUSH
49272: LD_INT 9
49274: EQUAL
49275: IFFALSE 49285
// sHack := true ;
49277: LD_ADDR_EXP 121
49281: PUSH
49282: LD_INT 1
49284: ST_TO_ADDR
// if p3 = 10 then
49285: LD_VAR 0 3
49289: PUSH
49290: LD_INT 10
49292: EQUAL
49293: IFFALSE 49303
// sFire := true ;
49295: LD_ADDR_EXP 122
49299: PUSH
49300: LD_INT 1
49302: ST_TO_ADDR
// if p3 = 11 then
49303: LD_VAR 0 3
49307: PUSH
49308: LD_INT 11
49310: EQUAL
49311: IFFALSE 49321
// sRefresh := true ;
49313: LD_ADDR_EXP 123
49317: PUSH
49318: LD_INT 1
49320: ST_TO_ADDR
// if p3 = 12 then
49321: LD_VAR 0 3
49325: PUSH
49326: LD_INT 12
49328: EQUAL
49329: IFFALSE 49339
// sExp := true ;
49331: LD_ADDR_EXP 124
49335: PUSH
49336: LD_INT 1
49338: ST_TO_ADDR
// if p3 = 13 then
49339: LD_VAR 0 3
49343: PUSH
49344: LD_INT 13
49346: EQUAL
49347: IFFALSE 49357
// sDepot := true ;
49349: LD_ADDR_EXP 125
49353: PUSH
49354: LD_INT 1
49356: ST_TO_ADDR
// if p3 = 14 then
49357: LD_VAR 0 3
49361: PUSH
49362: LD_INT 14
49364: EQUAL
49365: IFFALSE 49375
// sFlag := true ;
49367: LD_ADDR_EXP 126
49371: PUSH
49372: LD_INT 1
49374: ST_TO_ADDR
// if p3 = 15 then
49375: LD_VAR 0 3
49379: PUSH
49380: LD_INT 15
49382: EQUAL
49383: IFFALSE 49393
// sKamikadze := true ;
49385: LD_ADDR_EXP 134
49389: PUSH
49390: LD_INT 1
49392: ST_TO_ADDR
// if p3 = 16 then
49393: LD_VAR 0 3
49397: PUSH
49398: LD_INT 16
49400: EQUAL
49401: IFFALSE 49411
// sTroll := true ;
49403: LD_ADDR_EXP 135
49407: PUSH
49408: LD_INT 1
49410: ST_TO_ADDR
// if p3 = 17 then
49411: LD_VAR 0 3
49415: PUSH
49416: LD_INT 17
49418: EQUAL
49419: IFFALSE 49429
// sSlow := true ;
49421: LD_ADDR_EXP 136
49425: PUSH
49426: LD_INT 1
49428: ST_TO_ADDR
// if p3 = 18 then
49429: LD_VAR 0 3
49433: PUSH
49434: LD_INT 18
49436: EQUAL
49437: IFFALSE 49447
// sLack := true ;
49439: LD_ADDR_EXP 137
49443: PUSH
49444: LD_INT 1
49446: ST_TO_ADDR
// if p3 = 19 then
49447: LD_VAR 0 3
49451: PUSH
49452: LD_INT 19
49454: EQUAL
49455: IFFALSE 49465
// sTank := true ;
49457: LD_ADDR_EXP 139
49461: PUSH
49462: LD_INT 1
49464: ST_TO_ADDR
// if p3 = 20 then
49465: LD_VAR 0 3
49469: PUSH
49470: LD_INT 20
49472: EQUAL
49473: IFFALSE 49483
// sRemote := true ;
49475: LD_ADDR_EXP 140
49479: PUSH
49480: LD_INT 1
49482: ST_TO_ADDR
// if p3 = 21 then
49483: LD_VAR 0 3
49487: PUSH
49488: LD_INT 21
49490: EQUAL
49491: IFFALSE 49501
// sPowell := true ;
49493: LD_ADDR_EXP 141
49497: PUSH
49498: LD_INT 1
49500: ST_TO_ADDR
// if p3 = 22 then
49501: LD_VAR 0 3
49505: PUSH
49506: LD_INT 22
49508: EQUAL
49509: IFFALSE 49519
// sTeleport := true ;
49511: LD_ADDR_EXP 144
49515: PUSH
49516: LD_INT 1
49518: ST_TO_ADDR
// if p3 = 23 then
49519: LD_VAR 0 3
49523: PUSH
49524: LD_INT 23
49526: EQUAL
49527: IFFALSE 49537
// sOilTower := true ;
49529: LD_ADDR_EXP 146
49533: PUSH
49534: LD_INT 1
49536: ST_TO_ADDR
// if p3 = 24 then
49537: LD_VAR 0 3
49541: PUSH
49542: LD_INT 24
49544: EQUAL
49545: IFFALSE 49555
// sShovel := true ;
49547: LD_ADDR_EXP 147
49551: PUSH
49552: LD_INT 1
49554: ST_TO_ADDR
// if p3 = 25 then
49555: LD_VAR 0 3
49559: PUSH
49560: LD_INT 25
49562: EQUAL
49563: IFFALSE 49573
// sSheik := true ;
49565: LD_ADDR_EXP 148
49569: PUSH
49570: LD_INT 1
49572: ST_TO_ADDR
// if p3 = 26 then
49573: LD_VAR 0 3
49577: PUSH
49578: LD_INT 26
49580: EQUAL
49581: IFFALSE 49591
// sEarthquake := true ;
49583: LD_ADDR_EXP 150
49587: PUSH
49588: LD_INT 1
49590: ST_TO_ADDR
// if p3 = 27 then
49591: LD_VAR 0 3
49595: PUSH
49596: LD_INT 27
49598: EQUAL
49599: IFFALSE 49609
// sAI := true ;
49601: LD_ADDR_EXP 151
49605: PUSH
49606: LD_INT 1
49608: ST_TO_ADDR
// if p3 = 28 then
49609: LD_VAR 0 3
49613: PUSH
49614: LD_INT 28
49616: EQUAL
49617: IFFALSE 49627
// sCargo := true ;
49619: LD_ADDR_EXP 154
49623: PUSH
49624: LD_INT 1
49626: ST_TO_ADDR
// if p3 = 29 then
49627: LD_VAR 0 3
49631: PUSH
49632: LD_INT 29
49634: EQUAL
49635: IFFALSE 49645
// sDLaser := true ;
49637: LD_ADDR_EXP 155
49641: PUSH
49642: LD_INT 1
49644: ST_TO_ADDR
// if p3 = 30 then
49645: LD_VAR 0 3
49649: PUSH
49650: LD_INT 30
49652: EQUAL
49653: IFFALSE 49663
// sExchange := true ;
49655: LD_ADDR_EXP 156
49659: PUSH
49660: LD_INT 1
49662: ST_TO_ADDR
// if p3 = 31 then
49663: LD_VAR 0 3
49667: PUSH
49668: LD_INT 31
49670: EQUAL
49671: IFFALSE 49681
// sFac := true ;
49673: LD_ADDR_EXP 157
49677: PUSH
49678: LD_INT 1
49680: ST_TO_ADDR
// if p3 = 32 then
49681: LD_VAR 0 3
49685: PUSH
49686: LD_INT 32
49688: EQUAL
49689: IFFALSE 49699
// sPower := true ;
49691: LD_ADDR_EXP 158
49695: PUSH
49696: LD_INT 1
49698: ST_TO_ADDR
// if p3 = 33 then
49699: LD_VAR 0 3
49703: PUSH
49704: LD_INT 33
49706: EQUAL
49707: IFFALSE 49717
// sRandom := true ;
49709: LD_ADDR_EXP 159
49713: PUSH
49714: LD_INT 1
49716: ST_TO_ADDR
// if p3 = 34 then
49717: LD_VAR 0 3
49721: PUSH
49722: LD_INT 34
49724: EQUAL
49725: IFFALSE 49735
// sShield := true ;
49727: LD_ADDR_EXP 160
49731: PUSH
49732: LD_INT 1
49734: ST_TO_ADDR
// if p3 = 35 then
49735: LD_VAR 0 3
49739: PUSH
49740: LD_INT 35
49742: EQUAL
49743: IFFALSE 49753
// sTime := true ;
49745: LD_ADDR_EXP 161
49749: PUSH
49750: LD_INT 1
49752: ST_TO_ADDR
// if p3 = 36 then
49753: LD_VAR 0 3
49757: PUSH
49758: LD_INT 36
49760: EQUAL
49761: IFFALSE 49771
// sTools := true ;
49763: LD_ADDR_EXP 162
49767: PUSH
49768: LD_INT 1
49770: ST_TO_ADDR
// if p3 = 101 then
49771: LD_VAR 0 3
49775: PUSH
49776: LD_INT 101
49778: EQUAL
49779: IFFALSE 49789
// sSold := true ;
49781: LD_ADDR_EXP 127
49785: PUSH
49786: LD_INT 1
49788: ST_TO_ADDR
// if p3 = 102 then
49789: LD_VAR 0 3
49793: PUSH
49794: LD_INT 102
49796: EQUAL
49797: IFFALSE 49807
// sDiff := true ;
49799: LD_ADDR_EXP 128
49803: PUSH
49804: LD_INT 1
49806: ST_TO_ADDR
// if p3 = 103 then
49807: LD_VAR 0 3
49811: PUSH
49812: LD_INT 103
49814: EQUAL
49815: IFFALSE 49825
// sFog := true ;
49817: LD_ADDR_EXP 131
49821: PUSH
49822: LD_INT 1
49824: ST_TO_ADDR
// if p3 = 104 then
49825: LD_VAR 0 3
49829: PUSH
49830: LD_INT 104
49832: EQUAL
49833: IFFALSE 49843
// sReset := true ;
49835: LD_ADDR_EXP 132
49839: PUSH
49840: LD_INT 1
49842: ST_TO_ADDR
// if p3 = 105 then
49843: LD_VAR 0 3
49847: PUSH
49848: LD_INT 105
49850: EQUAL
49851: IFFALSE 49861
// sSun := true ;
49853: LD_ADDR_EXP 133
49857: PUSH
49858: LD_INT 1
49860: ST_TO_ADDR
// if p3 = 106 then
49861: LD_VAR 0 3
49865: PUSH
49866: LD_INT 106
49868: EQUAL
49869: IFFALSE 49879
// sTiger := true ;
49871: LD_ADDR_EXP 129
49875: PUSH
49876: LD_INT 1
49878: ST_TO_ADDR
// if p3 = 107 then
49879: LD_VAR 0 3
49883: PUSH
49884: LD_INT 107
49886: EQUAL
49887: IFFALSE 49897
// sBomb := true ;
49889: LD_ADDR_EXP 130
49893: PUSH
49894: LD_INT 1
49896: ST_TO_ADDR
// if p3 = 108 then
49897: LD_VAR 0 3
49901: PUSH
49902: LD_INT 108
49904: EQUAL
49905: IFFALSE 49915
// sWound := true ;
49907: LD_ADDR_EXP 138
49911: PUSH
49912: LD_INT 1
49914: ST_TO_ADDR
// if p3 = 109 then
49915: LD_VAR 0 3
49919: PUSH
49920: LD_INT 109
49922: EQUAL
49923: IFFALSE 49933
// sBetray := true ;
49925: LD_ADDR_EXP 142
49929: PUSH
49930: LD_INT 1
49932: ST_TO_ADDR
// if p3 = 110 then
49933: LD_VAR 0 3
49937: PUSH
49938: LD_INT 110
49940: EQUAL
49941: IFFALSE 49951
// sContamin := true ;
49943: LD_ADDR_EXP 143
49947: PUSH
49948: LD_INT 1
49950: ST_TO_ADDR
// if p3 = 111 then
49951: LD_VAR 0 3
49955: PUSH
49956: LD_INT 111
49958: EQUAL
49959: IFFALSE 49969
// sOil := true ;
49961: LD_ADDR_EXP 145
49965: PUSH
49966: LD_INT 1
49968: ST_TO_ADDR
// if p3 = 112 then
49969: LD_VAR 0 3
49973: PUSH
49974: LD_INT 112
49976: EQUAL
49977: IFFALSE 49987
// sStu := true ;
49979: LD_ADDR_EXP 149
49983: PUSH
49984: LD_INT 1
49986: ST_TO_ADDR
// if p3 = 113 then
49987: LD_VAR 0 3
49991: PUSH
49992: LD_INT 113
49994: EQUAL
49995: IFFALSE 50005
// sBazooka := true ;
49997: LD_ADDR_EXP 152
50001: PUSH
50002: LD_INT 1
50004: ST_TO_ADDR
// if p3 = 114 then
50005: LD_VAR 0 3
50009: PUSH
50010: LD_INT 114
50012: EQUAL
50013: IFFALSE 50023
// sMortar := true ;
50015: LD_ADDR_EXP 153
50019: PUSH
50020: LD_INT 1
50022: ST_TO_ADDR
// if p3 = 115 then
50023: LD_VAR 0 3
50027: PUSH
50028: LD_INT 115
50030: EQUAL
50031: IFFALSE 50041
// sRanger := true ;
50033: LD_ADDR_EXP 163
50037: PUSH
50038: LD_INT 1
50040: ST_TO_ADDR
// if p3 = 116 then
50041: LD_VAR 0 3
50045: PUSH
50046: LD_INT 116
50048: EQUAL
50049: IFFALSE 50059
// sComputer := true ;
50051: LD_ADDR_EXP 164
50055: PUSH
50056: LD_INT 1
50058: ST_TO_ADDR
// if p3 = 117 then
50059: LD_VAR 0 3
50063: PUSH
50064: LD_INT 117
50066: EQUAL
50067: IFFALSE 50077
// s30 := true ;
50069: LD_ADDR_EXP 165
50073: PUSH
50074: LD_INT 1
50076: ST_TO_ADDR
// if p3 = 118 then
50077: LD_VAR 0 3
50081: PUSH
50082: LD_INT 118
50084: EQUAL
50085: IFFALSE 50095
// s60 := true ;
50087: LD_ADDR_EXP 166
50091: PUSH
50092: LD_INT 1
50094: ST_TO_ADDR
// end ; if p2 = 101 then
50095: LD_VAR 0 2
50099: PUSH
50100: LD_INT 101
50102: EQUAL
50103: IFFALSE 50231
// begin case p3 of 1 :
50105: LD_VAR 0 3
50109: PUSH
50110: LD_INT 1
50112: DOUBLE
50113: EQUAL
50114: IFTRUE 50118
50116: GO 50125
50118: POP
// hHackUnlimitedResources ; 2 :
50119: CALL 62329 0 0
50123: GO 50231
50125: LD_INT 2
50127: DOUBLE
50128: EQUAL
50129: IFTRUE 50133
50131: GO 50140
50133: POP
// hHackSetLevel10 ; 3 :
50134: CALL 62462 0 0
50138: GO 50231
50140: LD_INT 3
50142: DOUBLE
50143: EQUAL
50144: IFTRUE 50148
50146: GO 50155
50148: POP
// hHackSetLevel10YourUnits ; 4 :
50149: CALL 62547 0 0
50153: GO 50231
50155: LD_INT 4
50157: DOUBLE
50158: EQUAL
50159: IFTRUE 50163
50161: GO 50170
50163: POP
// hHackInvincible ; 5 :
50164: CALL 62995 0 0
50168: GO 50231
50170: LD_INT 5
50172: DOUBLE
50173: EQUAL
50174: IFTRUE 50178
50176: GO 50185
50178: POP
// hHackInvisible ; 6 :
50179: CALL 63106 0 0
50183: GO 50231
50185: LD_INT 6
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50193
50191: GO 50200
50193: POP
// hHackChangeYourSide ; 7 :
50194: CALL 63163 0 0
50198: GO 50231
50200: LD_INT 7
50202: DOUBLE
50203: EQUAL
50204: IFTRUE 50208
50206: GO 50215
50208: POP
// hHackChangeUnitSide ; 8 :
50209: CALL 63205 0 0
50213: GO 50231
50215: LD_INT 8
50217: DOUBLE
50218: EQUAL
50219: IFTRUE 50223
50221: GO 50230
50223: POP
// hHackFog ; end ;
50224: CALL 63306 0 0
50228: GO 50231
50230: POP
// end ; end ;
50231: LD_VAR 0 7
50235: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
50236: GO 50238
50238: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
50239: LD_STRING initStreamRollete();
50241: PPUSH
50242: CALL_OW 559
// InitStreamMode ;
50246: CALL 50258 0 0
// DefineStreamItems ( false ) ;
50250: LD_INT 0
50252: PPUSH
50253: CALL 50722 0 1
// end ;
50257: END
// function InitStreamMode ; begin
50258: LD_INT 0
50260: PPUSH
// streamModeActive := false ;
50261: LD_ADDR_EXP 110
50265: PUSH
50266: LD_INT 0
50268: ST_TO_ADDR
// normalCounter := 36 ;
50269: LD_ADDR_EXP 111
50273: PUSH
50274: LD_INT 36
50276: ST_TO_ADDR
// hardcoreCounter := 18 ;
50277: LD_ADDR_EXP 112
50281: PUSH
50282: LD_INT 18
50284: ST_TO_ADDR
// sRocket := false ;
50285: LD_ADDR_EXP 115
50289: PUSH
50290: LD_INT 0
50292: ST_TO_ADDR
// sSpeed := false ;
50293: LD_ADDR_EXP 114
50297: PUSH
50298: LD_INT 0
50300: ST_TO_ADDR
// sEngine := false ;
50301: LD_ADDR_EXP 116
50305: PUSH
50306: LD_INT 0
50308: ST_TO_ADDR
// sSpec := false ;
50309: LD_ADDR_EXP 113
50313: PUSH
50314: LD_INT 0
50316: ST_TO_ADDR
// sLevel := false ;
50317: LD_ADDR_EXP 117
50321: PUSH
50322: LD_INT 0
50324: ST_TO_ADDR
// sArmoury := false ;
50325: LD_ADDR_EXP 118
50329: PUSH
50330: LD_INT 0
50332: ST_TO_ADDR
// sRadar := false ;
50333: LD_ADDR_EXP 119
50337: PUSH
50338: LD_INT 0
50340: ST_TO_ADDR
// sBunker := false ;
50341: LD_ADDR_EXP 120
50345: PUSH
50346: LD_INT 0
50348: ST_TO_ADDR
// sHack := false ;
50349: LD_ADDR_EXP 121
50353: PUSH
50354: LD_INT 0
50356: ST_TO_ADDR
// sFire := false ;
50357: LD_ADDR_EXP 122
50361: PUSH
50362: LD_INT 0
50364: ST_TO_ADDR
// sRefresh := false ;
50365: LD_ADDR_EXP 123
50369: PUSH
50370: LD_INT 0
50372: ST_TO_ADDR
// sExp := false ;
50373: LD_ADDR_EXP 124
50377: PUSH
50378: LD_INT 0
50380: ST_TO_ADDR
// sDepot := false ;
50381: LD_ADDR_EXP 125
50385: PUSH
50386: LD_INT 0
50388: ST_TO_ADDR
// sFlag := false ;
50389: LD_ADDR_EXP 126
50393: PUSH
50394: LD_INT 0
50396: ST_TO_ADDR
// sKamikadze := false ;
50397: LD_ADDR_EXP 134
50401: PUSH
50402: LD_INT 0
50404: ST_TO_ADDR
// sTroll := false ;
50405: LD_ADDR_EXP 135
50409: PUSH
50410: LD_INT 0
50412: ST_TO_ADDR
// sSlow := false ;
50413: LD_ADDR_EXP 136
50417: PUSH
50418: LD_INT 0
50420: ST_TO_ADDR
// sLack := false ;
50421: LD_ADDR_EXP 137
50425: PUSH
50426: LD_INT 0
50428: ST_TO_ADDR
// sTank := false ;
50429: LD_ADDR_EXP 139
50433: PUSH
50434: LD_INT 0
50436: ST_TO_ADDR
// sRemote := false ;
50437: LD_ADDR_EXP 140
50441: PUSH
50442: LD_INT 0
50444: ST_TO_ADDR
// sPowell := false ;
50445: LD_ADDR_EXP 141
50449: PUSH
50450: LD_INT 0
50452: ST_TO_ADDR
// sTeleport := false ;
50453: LD_ADDR_EXP 144
50457: PUSH
50458: LD_INT 0
50460: ST_TO_ADDR
// sOilTower := false ;
50461: LD_ADDR_EXP 146
50465: PUSH
50466: LD_INT 0
50468: ST_TO_ADDR
// sShovel := false ;
50469: LD_ADDR_EXP 147
50473: PUSH
50474: LD_INT 0
50476: ST_TO_ADDR
// sSheik := false ;
50477: LD_ADDR_EXP 148
50481: PUSH
50482: LD_INT 0
50484: ST_TO_ADDR
// sEarthquake := false ;
50485: LD_ADDR_EXP 150
50489: PUSH
50490: LD_INT 0
50492: ST_TO_ADDR
// sAI := false ;
50493: LD_ADDR_EXP 151
50497: PUSH
50498: LD_INT 0
50500: ST_TO_ADDR
// sCargo := false ;
50501: LD_ADDR_EXP 154
50505: PUSH
50506: LD_INT 0
50508: ST_TO_ADDR
// sDLaser := false ;
50509: LD_ADDR_EXP 155
50513: PUSH
50514: LD_INT 0
50516: ST_TO_ADDR
// sExchange := false ;
50517: LD_ADDR_EXP 156
50521: PUSH
50522: LD_INT 0
50524: ST_TO_ADDR
// sFac := false ;
50525: LD_ADDR_EXP 157
50529: PUSH
50530: LD_INT 0
50532: ST_TO_ADDR
// sPower := false ;
50533: LD_ADDR_EXP 158
50537: PUSH
50538: LD_INT 0
50540: ST_TO_ADDR
// sRandom := false ;
50541: LD_ADDR_EXP 159
50545: PUSH
50546: LD_INT 0
50548: ST_TO_ADDR
// sShield := false ;
50549: LD_ADDR_EXP 160
50553: PUSH
50554: LD_INT 0
50556: ST_TO_ADDR
// sTime := false ;
50557: LD_ADDR_EXP 161
50561: PUSH
50562: LD_INT 0
50564: ST_TO_ADDR
// sTools := false ;
50565: LD_ADDR_EXP 162
50569: PUSH
50570: LD_INT 0
50572: ST_TO_ADDR
// sSold := false ;
50573: LD_ADDR_EXP 127
50577: PUSH
50578: LD_INT 0
50580: ST_TO_ADDR
// sDiff := false ;
50581: LD_ADDR_EXP 128
50585: PUSH
50586: LD_INT 0
50588: ST_TO_ADDR
// sFog := false ;
50589: LD_ADDR_EXP 131
50593: PUSH
50594: LD_INT 0
50596: ST_TO_ADDR
// sReset := false ;
50597: LD_ADDR_EXP 132
50601: PUSH
50602: LD_INT 0
50604: ST_TO_ADDR
// sSun := false ;
50605: LD_ADDR_EXP 133
50609: PUSH
50610: LD_INT 0
50612: ST_TO_ADDR
// sTiger := false ;
50613: LD_ADDR_EXP 129
50617: PUSH
50618: LD_INT 0
50620: ST_TO_ADDR
// sBomb := false ;
50621: LD_ADDR_EXP 130
50625: PUSH
50626: LD_INT 0
50628: ST_TO_ADDR
// sWound := false ;
50629: LD_ADDR_EXP 138
50633: PUSH
50634: LD_INT 0
50636: ST_TO_ADDR
// sBetray := false ;
50637: LD_ADDR_EXP 142
50641: PUSH
50642: LD_INT 0
50644: ST_TO_ADDR
// sContamin := false ;
50645: LD_ADDR_EXP 143
50649: PUSH
50650: LD_INT 0
50652: ST_TO_ADDR
// sOil := false ;
50653: LD_ADDR_EXP 145
50657: PUSH
50658: LD_INT 0
50660: ST_TO_ADDR
// sStu := false ;
50661: LD_ADDR_EXP 149
50665: PUSH
50666: LD_INT 0
50668: ST_TO_ADDR
// sBazooka := false ;
50669: LD_ADDR_EXP 152
50673: PUSH
50674: LD_INT 0
50676: ST_TO_ADDR
// sMortar := false ;
50677: LD_ADDR_EXP 153
50681: PUSH
50682: LD_INT 0
50684: ST_TO_ADDR
// sRanger := false ;
50685: LD_ADDR_EXP 163
50689: PUSH
50690: LD_INT 0
50692: ST_TO_ADDR
// sComputer := false ;
50693: LD_ADDR_EXP 164
50697: PUSH
50698: LD_INT 0
50700: ST_TO_ADDR
// s30 := false ;
50701: LD_ADDR_EXP 165
50705: PUSH
50706: LD_INT 0
50708: ST_TO_ADDR
// s60 := false ;
50709: LD_ADDR_EXP 166
50713: PUSH
50714: LD_INT 0
50716: ST_TO_ADDR
// end ;
50717: LD_VAR 0 1
50721: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50722: LD_INT 0
50724: PPUSH
50725: PPUSH
50726: PPUSH
50727: PPUSH
50728: PPUSH
50729: PPUSH
50730: PPUSH
// result := [ ] ;
50731: LD_ADDR_VAR 0 2
50735: PUSH
50736: EMPTY
50737: ST_TO_ADDR
// if campaign_id = 1 then
50738: LD_OWVAR 69
50742: PUSH
50743: LD_INT 1
50745: EQUAL
50746: IFFALSE 53912
// begin case mission_number of 1 :
50748: LD_OWVAR 70
50752: PUSH
50753: LD_INT 1
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50837
50761: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50762: LD_ADDR_VAR 0 2
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 4
50772: PUSH
50773: LD_INT 11
50775: PUSH
50776: LD_INT 12
50778: PUSH
50779: LD_INT 15
50781: PUSH
50782: LD_INT 16
50784: PUSH
50785: LD_INT 22
50787: PUSH
50788: LD_INT 23
50790: PUSH
50791: LD_INT 26
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 101
50807: PUSH
50808: LD_INT 102
50810: PUSH
50811: LD_INT 106
50813: PUSH
50814: LD_INT 116
50816: PUSH
50817: LD_INT 117
50819: PUSH
50820: LD_INT 118
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: ST_TO_ADDR
50835: GO 53910
50837: LD_INT 2
50839: DOUBLE
50840: EQUAL
50841: IFTRUE 50845
50843: GO 50929
50845: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50846: LD_ADDR_VAR 0 2
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: LD_INT 4
50856: PUSH
50857: LD_INT 11
50859: PUSH
50860: LD_INT 12
50862: PUSH
50863: LD_INT 15
50865: PUSH
50866: LD_INT 16
50868: PUSH
50869: LD_INT 22
50871: PUSH
50872: LD_INT 23
50874: PUSH
50875: LD_INT 26
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 101
50891: PUSH
50892: LD_INT 102
50894: PUSH
50895: LD_INT 105
50897: PUSH
50898: LD_INT 106
50900: PUSH
50901: LD_INT 108
50903: PUSH
50904: LD_INT 116
50906: PUSH
50907: LD_INT 117
50909: PUSH
50910: LD_INT 118
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: ST_TO_ADDR
50927: GO 53910
50929: LD_INT 3
50931: DOUBLE
50932: EQUAL
50933: IFTRUE 50937
50935: GO 51025
50937: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50938: LD_ADDR_VAR 0 2
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 4
50948: PUSH
50949: LD_INT 5
50951: PUSH
50952: LD_INT 11
50954: PUSH
50955: LD_INT 12
50957: PUSH
50958: LD_INT 15
50960: PUSH
50961: LD_INT 16
50963: PUSH
50964: LD_INT 22
50966: PUSH
50967: LD_INT 26
50969: PUSH
50970: LD_INT 36
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 101
50987: PUSH
50988: LD_INT 102
50990: PUSH
50991: LD_INT 105
50993: PUSH
50994: LD_INT 106
50996: PUSH
50997: LD_INT 108
50999: PUSH
51000: LD_INT 116
51002: PUSH
51003: LD_INT 117
51005: PUSH
51006: LD_INT 118
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: ST_TO_ADDR
51023: GO 53910
51025: LD_INT 4
51027: DOUBLE
51028: EQUAL
51029: IFTRUE 51033
51031: GO 51129
51033: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51034: LD_ADDR_VAR 0 2
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: LD_INT 4
51044: PUSH
51045: LD_INT 5
51047: PUSH
51048: LD_INT 8
51050: PUSH
51051: LD_INT 11
51053: PUSH
51054: LD_INT 12
51056: PUSH
51057: LD_INT 15
51059: PUSH
51060: LD_INT 16
51062: PUSH
51063: LD_INT 22
51065: PUSH
51066: LD_INT 23
51068: PUSH
51069: LD_INT 26
51071: PUSH
51072: LD_INT 36
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 101
51091: PUSH
51092: LD_INT 102
51094: PUSH
51095: LD_INT 105
51097: PUSH
51098: LD_INT 106
51100: PUSH
51101: LD_INT 108
51103: PUSH
51104: LD_INT 116
51106: PUSH
51107: LD_INT 117
51109: PUSH
51110: LD_INT 118
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: ST_TO_ADDR
51127: GO 53910
51129: LD_INT 5
51131: DOUBLE
51132: EQUAL
51133: IFTRUE 51137
51135: GO 51249
51137: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51138: LD_ADDR_VAR 0 2
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 4
51148: PUSH
51149: LD_INT 5
51151: PUSH
51152: LD_INT 6
51154: PUSH
51155: LD_INT 8
51157: PUSH
51158: LD_INT 11
51160: PUSH
51161: LD_INT 12
51163: PUSH
51164: LD_INT 15
51166: PUSH
51167: LD_INT 16
51169: PUSH
51170: LD_INT 22
51172: PUSH
51173: LD_INT 23
51175: PUSH
51176: LD_INT 25
51178: PUSH
51179: LD_INT 26
51181: PUSH
51182: LD_INT 36
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 101
51203: PUSH
51204: LD_INT 102
51206: PUSH
51207: LD_INT 105
51209: PUSH
51210: LD_INT 106
51212: PUSH
51213: LD_INT 108
51215: PUSH
51216: LD_INT 109
51218: PUSH
51219: LD_INT 112
51221: PUSH
51222: LD_INT 116
51224: PUSH
51225: LD_INT 117
51227: PUSH
51228: LD_INT 118
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: ST_TO_ADDR
51247: GO 53910
51249: LD_INT 6
51251: DOUBLE
51252: EQUAL
51253: IFTRUE 51257
51255: GO 51389
51257: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51258: LD_ADDR_VAR 0 2
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 4
51268: PUSH
51269: LD_INT 5
51271: PUSH
51272: LD_INT 6
51274: PUSH
51275: LD_INT 8
51277: PUSH
51278: LD_INT 11
51280: PUSH
51281: LD_INT 12
51283: PUSH
51284: LD_INT 15
51286: PUSH
51287: LD_INT 16
51289: PUSH
51290: LD_INT 20
51292: PUSH
51293: LD_INT 21
51295: PUSH
51296: LD_INT 22
51298: PUSH
51299: LD_INT 23
51301: PUSH
51302: LD_INT 25
51304: PUSH
51305: LD_INT 26
51307: PUSH
51308: LD_INT 30
51310: PUSH
51311: LD_INT 31
51313: PUSH
51314: LD_INT 32
51316: PUSH
51317: LD_INT 36
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 101
51343: PUSH
51344: LD_INT 102
51346: PUSH
51347: LD_INT 105
51349: PUSH
51350: LD_INT 106
51352: PUSH
51353: LD_INT 108
51355: PUSH
51356: LD_INT 109
51358: PUSH
51359: LD_INT 112
51361: PUSH
51362: LD_INT 116
51364: PUSH
51365: LD_INT 117
51367: PUSH
51368: LD_INT 118
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: ST_TO_ADDR
51387: GO 53910
51389: LD_INT 7
51391: DOUBLE
51392: EQUAL
51393: IFTRUE 51397
51395: GO 51509
51397: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51398: LD_ADDR_VAR 0 2
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: LD_INT 4
51408: PUSH
51409: LD_INT 5
51411: PUSH
51412: LD_INT 7
51414: PUSH
51415: LD_INT 11
51417: PUSH
51418: LD_INT 12
51420: PUSH
51421: LD_INT 15
51423: PUSH
51424: LD_INT 16
51426: PUSH
51427: LD_INT 20
51429: PUSH
51430: LD_INT 21
51432: PUSH
51433: LD_INT 22
51435: PUSH
51436: LD_INT 23
51438: PUSH
51439: LD_INT 25
51441: PUSH
51442: LD_INT 26
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 101
51463: PUSH
51464: LD_INT 102
51466: PUSH
51467: LD_INT 103
51469: PUSH
51470: LD_INT 105
51472: PUSH
51473: LD_INT 106
51475: PUSH
51476: LD_INT 108
51478: PUSH
51479: LD_INT 112
51481: PUSH
51482: LD_INT 116
51484: PUSH
51485: LD_INT 117
51487: PUSH
51488: LD_INT 118
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: ST_TO_ADDR
51507: GO 53910
51509: LD_INT 8
51511: DOUBLE
51512: EQUAL
51513: IFTRUE 51517
51515: GO 51657
51517: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51518: LD_ADDR_VAR 0 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 4
51528: PUSH
51529: LD_INT 5
51531: PUSH
51532: LD_INT 6
51534: PUSH
51535: LD_INT 7
51537: PUSH
51538: LD_INT 8
51540: PUSH
51541: LD_INT 11
51543: PUSH
51544: LD_INT 12
51546: PUSH
51547: LD_INT 15
51549: PUSH
51550: LD_INT 16
51552: PUSH
51553: LD_INT 20
51555: PUSH
51556: LD_INT 21
51558: PUSH
51559: LD_INT 22
51561: PUSH
51562: LD_INT 23
51564: PUSH
51565: LD_INT 25
51567: PUSH
51568: LD_INT 26
51570: PUSH
51571: LD_INT 30
51573: PUSH
51574: LD_INT 31
51576: PUSH
51577: LD_INT 32
51579: PUSH
51580: LD_INT 36
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 101
51607: PUSH
51608: LD_INT 102
51610: PUSH
51611: LD_INT 103
51613: PUSH
51614: LD_INT 105
51616: PUSH
51617: LD_INT 106
51619: PUSH
51620: LD_INT 108
51622: PUSH
51623: LD_INT 109
51625: PUSH
51626: LD_INT 112
51628: PUSH
51629: LD_INT 116
51631: PUSH
51632: LD_INT 117
51634: PUSH
51635: LD_INT 118
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: ST_TO_ADDR
51655: GO 53910
51657: LD_INT 9
51659: DOUBLE
51660: EQUAL
51661: IFTRUE 51665
51663: GO 51813
51665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51666: LD_ADDR_VAR 0 2
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: LD_INT 4
51676: PUSH
51677: LD_INT 5
51679: PUSH
51680: LD_INT 6
51682: PUSH
51683: LD_INT 7
51685: PUSH
51686: LD_INT 8
51688: PUSH
51689: LD_INT 11
51691: PUSH
51692: LD_INT 12
51694: PUSH
51695: LD_INT 15
51697: PUSH
51698: LD_INT 16
51700: PUSH
51701: LD_INT 20
51703: PUSH
51704: LD_INT 21
51706: PUSH
51707: LD_INT 22
51709: PUSH
51710: LD_INT 23
51712: PUSH
51713: LD_INT 25
51715: PUSH
51716: LD_INT 26
51718: PUSH
51719: LD_INT 28
51721: PUSH
51722: LD_INT 30
51724: PUSH
51725: LD_INT 31
51727: PUSH
51728: LD_INT 32
51730: PUSH
51731: LD_INT 36
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 101
51759: PUSH
51760: LD_INT 102
51762: PUSH
51763: LD_INT 103
51765: PUSH
51766: LD_INT 105
51768: PUSH
51769: LD_INT 106
51771: PUSH
51772: LD_INT 108
51774: PUSH
51775: LD_INT 109
51777: PUSH
51778: LD_INT 112
51780: PUSH
51781: LD_INT 114
51783: PUSH
51784: LD_INT 116
51786: PUSH
51787: LD_INT 117
51789: PUSH
51790: LD_INT 118
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: ST_TO_ADDR
51811: GO 53910
51813: LD_INT 10
51815: DOUBLE
51816: EQUAL
51817: IFTRUE 51821
51819: GO 52017
51821: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51822: LD_ADDR_VAR 0 2
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 4
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: LD_INT 6
51838: PUSH
51839: LD_INT 7
51841: PUSH
51842: LD_INT 8
51844: PUSH
51845: LD_INT 9
51847: PUSH
51848: LD_INT 10
51850: PUSH
51851: LD_INT 11
51853: PUSH
51854: LD_INT 12
51856: PUSH
51857: LD_INT 13
51859: PUSH
51860: LD_INT 14
51862: PUSH
51863: LD_INT 15
51865: PUSH
51866: LD_INT 16
51868: PUSH
51869: LD_INT 17
51871: PUSH
51872: LD_INT 18
51874: PUSH
51875: LD_INT 19
51877: PUSH
51878: LD_INT 20
51880: PUSH
51881: LD_INT 21
51883: PUSH
51884: LD_INT 22
51886: PUSH
51887: LD_INT 23
51889: PUSH
51890: LD_INT 24
51892: PUSH
51893: LD_INT 25
51895: PUSH
51896: LD_INT 26
51898: PUSH
51899: LD_INT 28
51901: PUSH
51902: LD_INT 30
51904: PUSH
51905: LD_INT 31
51907: PUSH
51908: LD_INT 32
51910: PUSH
51911: LD_INT 36
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 101
51947: PUSH
51948: LD_INT 102
51950: PUSH
51951: LD_INT 103
51953: PUSH
51954: LD_INT 104
51956: PUSH
51957: LD_INT 105
51959: PUSH
51960: LD_INT 106
51962: PUSH
51963: LD_INT 107
51965: PUSH
51966: LD_INT 108
51968: PUSH
51969: LD_INT 109
51971: PUSH
51972: LD_INT 110
51974: PUSH
51975: LD_INT 111
51977: PUSH
51978: LD_INT 112
51980: PUSH
51981: LD_INT 114
51983: PUSH
51984: LD_INT 116
51986: PUSH
51987: LD_INT 117
51989: PUSH
51990: LD_INT 118
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: ST_TO_ADDR
52015: GO 53910
52017: LD_INT 11
52019: DOUBLE
52020: EQUAL
52021: IFTRUE 52025
52023: GO 52229
52025: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52026: LD_ADDR_VAR 0 2
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: LD_INT 4
52039: PUSH
52040: LD_INT 5
52042: PUSH
52043: LD_INT 6
52045: PUSH
52046: LD_INT 7
52048: PUSH
52049: LD_INT 8
52051: PUSH
52052: LD_INT 9
52054: PUSH
52055: LD_INT 10
52057: PUSH
52058: LD_INT 11
52060: PUSH
52061: LD_INT 12
52063: PUSH
52064: LD_INT 13
52066: PUSH
52067: LD_INT 14
52069: PUSH
52070: LD_INT 15
52072: PUSH
52073: LD_INT 16
52075: PUSH
52076: LD_INT 17
52078: PUSH
52079: LD_INT 18
52081: PUSH
52082: LD_INT 19
52084: PUSH
52085: LD_INT 20
52087: PUSH
52088: LD_INT 21
52090: PUSH
52091: LD_INT 22
52093: PUSH
52094: LD_INT 23
52096: PUSH
52097: LD_INT 24
52099: PUSH
52100: LD_INT 25
52102: PUSH
52103: LD_INT 26
52105: PUSH
52106: LD_INT 28
52108: PUSH
52109: LD_INT 30
52111: PUSH
52112: LD_INT 31
52114: PUSH
52115: LD_INT 32
52117: PUSH
52118: LD_INT 34
52120: PUSH
52121: LD_INT 36
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 101
52159: PUSH
52160: LD_INT 102
52162: PUSH
52163: LD_INT 103
52165: PUSH
52166: LD_INT 104
52168: PUSH
52169: LD_INT 105
52171: PUSH
52172: LD_INT 106
52174: PUSH
52175: LD_INT 107
52177: PUSH
52178: LD_INT 108
52180: PUSH
52181: LD_INT 109
52183: PUSH
52184: LD_INT 110
52186: PUSH
52187: LD_INT 111
52189: PUSH
52190: LD_INT 112
52192: PUSH
52193: LD_INT 114
52195: PUSH
52196: LD_INT 116
52198: PUSH
52199: LD_INT 117
52201: PUSH
52202: LD_INT 118
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: ST_TO_ADDR
52227: GO 53910
52229: LD_INT 12
52231: DOUBLE
52232: EQUAL
52233: IFTRUE 52237
52235: GO 52457
52237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52238: LD_ADDR_VAR 0 2
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 3
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: LD_INT 5
52257: PUSH
52258: LD_INT 6
52260: PUSH
52261: LD_INT 7
52263: PUSH
52264: LD_INT 8
52266: PUSH
52267: LD_INT 9
52269: PUSH
52270: LD_INT 10
52272: PUSH
52273: LD_INT 11
52275: PUSH
52276: LD_INT 12
52278: PUSH
52279: LD_INT 13
52281: PUSH
52282: LD_INT 14
52284: PUSH
52285: LD_INT 15
52287: PUSH
52288: LD_INT 16
52290: PUSH
52291: LD_INT 17
52293: PUSH
52294: LD_INT 18
52296: PUSH
52297: LD_INT 19
52299: PUSH
52300: LD_INT 20
52302: PUSH
52303: LD_INT 21
52305: PUSH
52306: LD_INT 22
52308: PUSH
52309: LD_INT 23
52311: PUSH
52312: LD_INT 24
52314: PUSH
52315: LD_INT 25
52317: PUSH
52318: LD_INT 26
52320: PUSH
52321: LD_INT 27
52323: PUSH
52324: LD_INT 28
52326: PUSH
52327: LD_INT 30
52329: PUSH
52330: LD_INT 31
52332: PUSH
52333: LD_INT 32
52335: PUSH
52336: LD_INT 33
52338: PUSH
52339: LD_INT 34
52341: PUSH
52342: LD_INT 36
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 101
52383: PUSH
52384: LD_INT 102
52386: PUSH
52387: LD_INT 103
52389: PUSH
52390: LD_INT 104
52392: PUSH
52393: LD_INT 105
52395: PUSH
52396: LD_INT 106
52398: PUSH
52399: LD_INT 107
52401: PUSH
52402: LD_INT 108
52404: PUSH
52405: LD_INT 109
52407: PUSH
52408: LD_INT 110
52410: PUSH
52411: LD_INT 111
52413: PUSH
52414: LD_INT 112
52416: PUSH
52417: LD_INT 113
52419: PUSH
52420: LD_INT 114
52422: PUSH
52423: LD_INT 116
52425: PUSH
52426: LD_INT 117
52428: PUSH
52429: LD_INT 118
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: ST_TO_ADDR
52455: GO 53910
52457: LD_INT 13
52459: DOUBLE
52460: EQUAL
52461: IFTRUE 52465
52463: GO 52673
52465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52466: LD_ADDR_VAR 0 2
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: LD_INT 3
52479: PUSH
52480: LD_INT 4
52482: PUSH
52483: LD_INT 5
52485: PUSH
52486: LD_INT 8
52488: PUSH
52489: LD_INT 9
52491: PUSH
52492: LD_INT 10
52494: PUSH
52495: LD_INT 11
52497: PUSH
52498: LD_INT 12
52500: PUSH
52501: LD_INT 14
52503: PUSH
52504: LD_INT 15
52506: PUSH
52507: LD_INT 16
52509: PUSH
52510: LD_INT 17
52512: PUSH
52513: LD_INT 18
52515: PUSH
52516: LD_INT 19
52518: PUSH
52519: LD_INT 20
52521: PUSH
52522: LD_INT 21
52524: PUSH
52525: LD_INT 22
52527: PUSH
52528: LD_INT 23
52530: PUSH
52531: LD_INT 24
52533: PUSH
52534: LD_INT 25
52536: PUSH
52537: LD_INT 26
52539: PUSH
52540: LD_INT 27
52542: PUSH
52543: LD_INT 28
52545: PUSH
52546: LD_INT 30
52548: PUSH
52549: LD_INT 31
52551: PUSH
52552: LD_INT 32
52554: PUSH
52555: LD_INT 33
52557: PUSH
52558: LD_INT 34
52560: PUSH
52561: LD_INT 36
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 101
52599: PUSH
52600: LD_INT 102
52602: PUSH
52603: LD_INT 103
52605: PUSH
52606: LD_INT 104
52608: PUSH
52609: LD_INT 105
52611: PUSH
52612: LD_INT 106
52614: PUSH
52615: LD_INT 107
52617: PUSH
52618: LD_INT 108
52620: PUSH
52621: LD_INT 109
52623: PUSH
52624: LD_INT 110
52626: PUSH
52627: LD_INT 111
52629: PUSH
52630: LD_INT 112
52632: PUSH
52633: LD_INT 113
52635: PUSH
52636: LD_INT 114
52638: PUSH
52639: LD_INT 116
52641: PUSH
52642: LD_INT 117
52644: PUSH
52645: LD_INT 118
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: ST_TO_ADDR
52671: GO 53910
52673: LD_INT 14
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52681
52679: GO 52905
52681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52682: LD_ADDR_VAR 0 2
52686: PUSH
52687: LD_INT 1
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: LD_INT 4
52698: PUSH
52699: LD_INT 5
52701: PUSH
52702: LD_INT 6
52704: PUSH
52705: LD_INT 7
52707: PUSH
52708: LD_INT 8
52710: PUSH
52711: LD_INT 9
52713: PUSH
52714: LD_INT 10
52716: PUSH
52717: LD_INT 11
52719: PUSH
52720: LD_INT 12
52722: PUSH
52723: LD_INT 13
52725: PUSH
52726: LD_INT 14
52728: PUSH
52729: LD_INT 15
52731: PUSH
52732: LD_INT 16
52734: PUSH
52735: LD_INT 17
52737: PUSH
52738: LD_INT 18
52740: PUSH
52741: LD_INT 19
52743: PUSH
52744: LD_INT 20
52746: PUSH
52747: LD_INT 21
52749: PUSH
52750: LD_INT 22
52752: PUSH
52753: LD_INT 23
52755: PUSH
52756: LD_INT 24
52758: PUSH
52759: LD_INT 25
52761: PUSH
52762: LD_INT 26
52764: PUSH
52765: LD_INT 27
52767: PUSH
52768: LD_INT 28
52770: PUSH
52771: LD_INT 29
52773: PUSH
52774: LD_INT 30
52776: PUSH
52777: LD_INT 31
52779: PUSH
52780: LD_INT 32
52782: PUSH
52783: LD_INT 33
52785: PUSH
52786: LD_INT 34
52788: PUSH
52789: LD_INT 36
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 101
52831: PUSH
52832: LD_INT 102
52834: PUSH
52835: LD_INT 103
52837: PUSH
52838: LD_INT 104
52840: PUSH
52841: LD_INT 105
52843: PUSH
52844: LD_INT 106
52846: PUSH
52847: LD_INT 107
52849: PUSH
52850: LD_INT 108
52852: PUSH
52853: LD_INT 109
52855: PUSH
52856: LD_INT 110
52858: PUSH
52859: LD_INT 111
52861: PUSH
52862: LD_INT 112
52864: PUSH
52865: LD_INT 113
52867: PUSH
52868: LD_INT 114
52870: PUSH
52871: LD_INT 116
52873: PUSH
52874: LD_INT 117
52876: PUSH
52877: LD_INT 118
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: ST_TO_ADDR
52903: GO 53910
52905: LD_INT 15
52907: DOUBLE
52908: EQUAL
52909: IFTRUE 52913
52911: GO 53137
52913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52914: LD_ADDR_VAR 0 2
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: LD_INT 4
52930: PUSH
52931: LD_INT 5
52933: PUSH
52934: LD_INT 6
52936: PUSH
52937: LD_INT 7
52939: PUSH
52940: LD_INT 8
52942: PUSH
52943: LD_INT 9
52945: PUSH
52946: LD_INT 10
52948: PUSH
52949: LD_INT 11
52951: PUSH
52952: LD_INT 12
52954: PUSH
52955: LD_INT 13
52957: PUSH
52958: LD_INT 14
52960: PUSH
52961: LD_INT 15
52963: PUSH
52964: LD_INT 16
52966: PUSH
52967: LD_INT 17
52969: PUSH
52970: LD_INT 18
52972: PUSH
52973: LD_INT 19
52975: PUSH
52976: LD_INT 20
52978: PUSH
52979: LD_INT 21
52981: PUSH
52982: LD_INT 22
52984: PUSH
52985: LD_INT 23
52987: PUSH
52988: LD_INT 24
52990: PUSH
52991: LD_INT 25
52993: PUSH
52994: LD_INT 26
52996: PUSH
52997: LD_INT 27
52999: PUSH
53000: LD_INT 28
53002: PUSH
53003: LD_INT 29
53005: PUSH
53006: LD_INT 30
53008: PUSH
53009: LD_INT 31
53011: PUSH
53012: LD_INT 32
53014: PUSH
53015: LD_INT 33
53017: PUSH
53018: LD_INT 34
53020: PUSH
53021: LD_INT 36
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 101
53063: PUSH
53064: LD_INT 102
53066: PUSH
53067: LD_INT 103
53069: PUSH
53070: LD_INT 104
53072: PUSH
53073: LD_INT 105
53075: PUSH
53076: LD_INT 106
53078: PUSH
53079: LD_INT 107
53081: PUSH
53082: LD_INT 108
53084: PUSH
53085: LD_INT 109
53087: PUSH
53088: LD_INT 110
53090: PUSH
53091: LD_INT 111
53093: PUSH
53094: LD_INT 112
53096: PUSH
53097: LD_INT 113
53099: PUSH
53100: LD_INT 114
53102: PUSH
53103: LD_INT 116
53105: PUSH
53106: LD_INT 117
53108: PUSH
53109: LD_INT 118
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: ST_TO_ADDR
53135: GO 53910
53137: LD_INT 16
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53281
53145: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53146: LD_ADDR_VAR 0 2
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 4
53156: PUSH
53157: LD_INT 5
53159: PUSH
53160: LD_INT 7
53162: PUSH
53163: LD_INT 11
53165: PUSH
53166: LD_INT 12
53168: PUSH
53169: LD_INT 15
53171: PUSH
53172: LD_INT 16
53174: PUSH
53175: LD_INT 20
53177: PUSH
53178: LD_INT 21
53180: PUSH
53181: LD_INT 22
53183: PUSH
53184: LD_INT 23
53186: PUSH
53187: LD_INT 25
53189: PUSH
53190: LD_INT 26
53192: PUSH
53193: LD_INT 30
53195: PUSH
53196: LD_INT 31
53198: PUSH
53199: LD_INT 32
53201: PUSH
53202: LD_INT 33
53204: PUSH
53205: LD_INT 34
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 101
53231: PUSH
53232: LD_INT 102
53234: PUSH
53235: LD_INT 103
53237: PUSH
53238: LD_INT 106
53240: PUSH
53241: LD_INT 108
53243: PUSH
53244: LD_INT 112
53246: PUSH
53247: LD_INT 113
53249: PUSH
53250: LD_INT 114
53252: PUSH
53253: LD_INT 116
53255: PUSH
53256: LD_INT 117
53258: PUSH
53259: LD_INT 118
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: ST_TO_ADDR
53279: GO 53910
53281: LD_INT 17
53283: DOUBLE
53284: EQUAL
53285: IFTRUE 53289
53287: GO 53513
53289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53290: LD_ADDR_VAR 0 2
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 4
53306: PUSH
53307: LD_INT 5
53309: PUSH
53310: LD_INT 6
53312: PUSH
53313: LD_INT 7
53315: PUSH
53316: LD_INT 8
53318: PUSH
53319: LD_INT 9
53321: PUSH
53322: LD_INT 10
53324: PUSH
53325: LD_INT 11
53327: PUSH
53328: LD_INT 12
53330: PUSH
53331: LD_INT 13
53333: PUSH
53334: LD_INT 14
53336: PUSH
53337: LD_INT 15
53339: PUSH
53340: LD_INT 16
53342: PUSH
53343: LD_INT 17
53345: PUSH
53346: LD_INT 18
53348: PUSH
53349: LD_INT 19
53351: PUSH
53352: LD_INT 20
53354: PUSH
53355: LD_INT 21
53357: PUSH
53358: LD_INT 22
53360: PUSH
53361: LD_INT 23
53363: PUSH
53364: LD_INT 24
53366: PUSH
53367: LD_INT 25
53369: PUSH
53370: LD_INT 26
53372: PUSH
53373: LD_INT 27
53375: PUSH
53376: LD_INT 28
53378: PUSH
53379: LD_INT 29
53381: PUSH
53382: LD_INT 30
53384: PUSH
53385: LD_INT 31
53387: PUSH
53388: LD_INT 32
53390: PUSH
53391: LD_INT 33
53393: PUSH
53394: LD_INT 34
53396: PUSH
53397: LD_INT 36
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 101
53439: PUSH
53440: LD_INT 102
53442: PUSH
53443: LD_INT 103
53445: PUSH
53446: LD_INT 104
53448: PUSH
53449: LD_INT 105
53451: PUSH
53452: LD_INT 106
53454: PUSH
53455: LD_INT 107
53457: PUSH
53458: LD_INT 108
53460: PUSH
53461: LD_INT 109
53463: PUSH
53464: LD_INT 110
53466: PUSH
53467: LD_INT 111
53469: PUSH
53470: LD_INT 112
53472: PUSH
53473: LD_INT 113
53475: PUSH
53476: LD_INT 114
53478: PUSH
53479: LD_INT 116
53481: PUSH
53482: LD_INT 117
53484: PUSH
53485: LD_INT 118
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: ST_TO_ADDR
53511: GO 53910
53513: LD_INT 18
53515: DOUBLE
53516: EQUAL
53517: IFTRUE 53521
53519: GO 53669
53521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53522: LD_ADDR_VAR 0 2
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: LD_INT 4
53532: PUSH
53533: LD_INT 5
53535: PUSH
53536: LD_INT 7
53538: PUSH
53539: LD_INT 11
53541: PUSH
53542: LD_INT 12
53544: PUSH
53545: LD_INT 15
53547: PUSH
53548: LD_INT 16
53550: PUSH
53551: LD_INT 20
53553: PUSH
53554: LD_INT 21
53556: PUSH
53557: LD_INT 22
53559: PUSH
53560: LD_INT 23
53562: PUSH
53563: LD_INT 25
53565: PUSH
53566: LD_INT 26
53568: PUSH
53569: LD_INT 30
53571: PUSH
53572: LD_INT 31
53574: PUSH
53575: LD_INT 32
53577: PUSH
53578: LD_INT 33
53580: PUSH
53581: LD_INT 34
53583: PUSH
53584: LD_INT 35
53586: PUSH
53587: LD_INT 36
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 101
53615: PUSH
53616: LD_INT 102
53618: PUSH
53619: LD_INT 103
53621: PUSH
53622: LD_INT 106
53624: PUSH
53625: LD_INT 108
53627: PUSH
53628: LD_INT 112
53630: PUSH
53631: LD_INT 113
53633: PUSH
53634: LD_INT 114
53636: PUSH
53637: LD_INT 115
53639: PUSH
53640: LD_INT 116
53642: PUSH
53643: LD_INT 117
53645: PUSH
53646: LD_INT 118
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: ST_TO_ADDR
53667: GO 53910
53669: LD_INT 19
53671: DOUBLE
53672: EQUAL
53673: IFTRUE 53677
53675: GO 53909
53677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53678: LD_ADDR_VAR 0 2
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: LD_INT 4
53694: PUSH
53695: LD_INT 5
53697: PUSH
53698: LD_INT 6
53700: PUSH
53701: LD_INT 7
53703: PUSH
53704: LD_INT 8
53706: PUSH
53707: LD_INT 9
53709: PUSH
53710: LD_INT 10
53712: PUSH
53713: LD_INT 11
53715: PUSH
53716: LD_INT 12
53718: PUSH
53719: LD_INT 13
53721: PUSH
53722: LD_INT 14
53724: PUSH
53725: LD_INT 15
53727: PUSH
53728: LD_INT 16
53730: PUSH
53731: LD_INT 17
53733: PUSH
53734: LD_INT 18
53736: PUSH
53737: LD_INT 19
53739: PUSH
53740: LD_INT 20
53742: PUSH
53743: LD_INT 21
53745: PUSH
53746: LD_INT 22
53748: PUSH
53749: LD_INT 23
53751: PUSH
53752: LD_INT 24
53754: PUSH
53755: LD_INT 25
53757: PUSH
53758: LD_INT 26
53760: PUSH
53761: LD_INT 27
53763: PUSH
53764: LD_INT 28
53766: PUSH
53767: LD_INT 29
53769: PUSH
53770: LD_INT 30
53772: PUSH
53773: LD_INT 31
53775: PUSH
53776: LD_INT 32
53778: PUSH
53779: LD_INT 33
53781: PUSH
53782: LD_INT 34
53784: PUSH
53785: LD_INT 35
53787: PUSH
53788: LD_INT 36
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 101
53831: PUSH
53832: LD_INT 102
53834: PUSH
53835: LD_INT 103
53837: PUSH
53838: LD_INT 104
53840: PUSH
53841: LD_INT 105
53843: PUSH
53844: LD_INT 106
53846: PUSH
53847: LD_INT 107
53849: PUSH
53850: LD_INT 108
53852: PUSH
53853: LD_INT 109
53855: PUSH
53856: LD_INT 110
53858: PUSH
53859: LD_INT 111
53861: PUSH
53862: LD_INT 112
53864: PUSH
53865: LD_INT 113
53867: PUSH
53868: LD_INT 114
53870: PUSH
53871: LD_INT 115
53873: PUSH
53874: LD_INT 116
53876: PUSH
53877: LD_INT 117
53879: PUSH
53880: LD_INT 118
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: ST_TO_ADDR
53907: GO 53910
53909: POP
// end else
53910: GO 54141
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53912: LD_ADDR_VAR 0 2
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: LD_INT 4
53928: PUSH
53929: LD_INT 5
53931: PUSH
53932: LD_INT 6
53934: PUSH
53935: LD_INT 7
53937: PUSH
53938: LD_INT 8
53940: PUSH
53941: LD_INT 9
53943: PUSH
53944: LD_INT 10
53946: PUSH
53947: LD_INT 11
53949: PUSH
53950: LD_INT 12
53952: PUSH
53953: LD_INT 13
53955: PUSH
53956: LD_INT 14
53958: PUSH
53959: LD_INT 15
53961: PUSH
53962: LD_INT 16
53964: PUSH
53965: LD_INT 17
53967: PUSH
53968: LD_INT 18
53970: PUSH
53971: LD_INT 19
53973: PUSH
53974: LD_INT 20
53976: PUSH
53977: LD_INT 21
53979: PUSH
53980: LD_INT 22
53982: PUSH
53983: LD_INT 23
53985: PUSH
53986: LD_INT 24
53988: PUSH
53989: LD_INT 25
53991: PUSH
53992: LD_INT 26
53994: PUSH
53995: LD_INT 27
53997: PUSH
53998: LD_INT 28
54000: PUSH
54001: LD_INT 29
54003: PUSH
54004: LD_INT 30
54006: PUSH
54007: LD_INT 31
54009: PUSH
54010: LD_INT 32
54012: PUSH
54013: LD_INT 33
54015: PUSH
54016: LD_INT 34
54018: PUSH
54019: LD_INT 35
54021: PUSH
54022: LD_INT 36
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 101
54065: PUSH
54066: LD_INT 102
54068: PUSH
54069: LD_INT 103
54071: PUSH
54072: LD_INT 104
54074: PUSH
54075: LD_INT 105
54077: PUSH
54078: LD_INT 106
54080: PUSH
54081: LD_INT 107
54083: PUSH
54084: LD_INT 108
54086: PUSH
54087: LD_INT 109
54089: PUSH
54090: LD_INT 110
54092: PUSH
54093: LD_INT 111
54095: PUSH
54096: LD_INT 112
54098: PUSH
54099: LD_INT 113
54101: PUSH
54102: LD_INT 114
54104: PUSH
54105: LD_INT 115
54107: PUSH
54108: LD_INT 116
54110: PUSH
54111: LD_INT 117
54113: PUSH
54114: LD_INT 118
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: ST_TO_ADDR
// if result then
54141: LD_VAR 0 2
54145: IFFALSE 54931
// begin normal :=  ;
54147: LD_ADDR_VAR 0 5
54151: PUSH
54152: LD_STRING 
54154: ST_TO_ADDR
// hardcore :=  ;
54155: LD_ADDR_VAR 0 6
54159: PUSH
54160: LD_STRING 
54162: ST_TO_ADDR
// active :=  ;
54163: LD_ADDR_VAR 0 7
54167: PUSH
54168: LD_STRING 
54170: ST_TO_ADDR
// for i = 1 to normalCounter do
54171: LD_ADDR_VAR 0 8
54175: PUSH
54176: DOUBLE
54177: LD_INT 1
54179: DEC
54180: ST_TO_ADDR
54181: LD_EXP 111
54185: PUSH
54186: FOR_TO
54187: IFFALSE 54288
// begin tmp := 0 ;
54189: LD_ADDR_VAR 0 3
54193: PUSH
54194: LD_STRING 0
54196: ST_TO_ADDR
// if result [ 1 ] then
54197: LD_VAR 0 2
54201: PUSH
54202: LD_INT 1
54204: ARRAY
54205: IFFALSE 54270
// if result [ 1 ] [ 1 ] = i then
54207: LD_VAR 0 2
54211: PUSH
54212: LD_INT 1
54214: ARRAY
54215: PUSH
54216: LD_INT 1
54218: ARRAY
54219: PUSH
54220: LD_VAR 0 8
54224: EQUAL
54225: IFFALSE 54270
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54227: LD_ADDR_VAR 0 2
54231: PUSH
54232: LD_VAR 0 2
54236: PPUSH
54237: LD_INT 1
54239: PPUSH
54240: LD_VAR 0 2
54244: PUSH
54245: LD_INT 1
54247: ARRAY
54248: PPUSH
54249: LD_INT 1
54251: PPUSH
54252: CALL_OW 3
54256: PPUSH
54257: CALL_OW 1
54261: ST_TO_ADDR
// tmp := 1 ;
54262: LD_ADDR_VAR 0 3
54266: PUSH
54267: LD_STRING 1
54269: ST_TO_ADDR
// end ; normal := normal & tmp ;
54270: LD_ADDR_VAR 0 5
54274: PUSH
54275: LD_VAR 0 5
54279: PUSH
54280: LD_VAR 0 3
54284: STR
54285: ST_TO_ADDR
// end ;
54286: GO 54186
54288: POP
54289: POP
// for i = 1 to hardcoreCounter do
54290: LD_ADDR_VAR 0 8
54294: PUSH
54295: DOUBLE
54296: LD_INT 1
54298: DEC
54299: ST_TO_ADDR
54300: LD_EXP 112
54304: PUSH
54305: FOR_TO
54306: IFFALSE 54411
// begin tmp := 0 ;
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: LD_STRING 0
54315: ST_TO_ADDR
// if result [ 2 ] then
54316: LD_VAR 0 2
54320: PUSH
54321: LD_INT 2
54323: ARRAY
54324: IFFALSE 54393
// if result [ 2 ] [ 1 ] = 100 + i then
54326: LD_VAR 0 2
54330: PUSH
54331: LD_INT 2
54333: ARRAY
54334: PUSH
54335: LD_INT 1
54337: ARRAY
54338: PUSH
54339: LD_INT 100
54341: PUSH
54342: LD_VAR 0 8
54346: PLUS
54347: EQUAL
54348: IFFALSE 54393
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54350: LD_ADDR_VAR 0 2
54354: PUSH
54355: LD_VAR 0 2
54359: PPUSH
54360: LD_INT 2
54362: PPUSH
54363: LD_VAR 0 2
54367: PUSH
54368: LD_INT 2
54370: ARRAY
54371: PPUSH
54372: LD_INT 1
54374: PPUSH
54375: CALL_OW 3
54379: PPUSH
54380: CALL_OW 1
54384: ST_TO_ADDR
// tmp := 1 ;
54385: LD_ADDR_VAR 0 3
54389: PUSH
54390: LD_STRING 1
54392: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54393: LD_ADDR_VAR 0 6
54397: PUSH
54398: LD_VAR 0 6
54402: PUSH
54403: LD_VAR 0 3
54407: STR
54408: ST_TO_ADDR
// end ;
54409: GO 54305
54411: POP
54412: POP
// if isGameLoad then
54413: LD_VAR 0 1
54417: IFFALSE 54892
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54419: LD_ADDR_VAR 0 4
54423: PUSH
54424: LD_EXP 115
54428: PUSH
54429: LD_EXP 114
54433: PUSH
54434: LD_EXP 116
54438: PUSH
54439: LD_EXP 113
54443: PUSH
54444: LD_EXP 117
54448: PUSH
54449: LD_EXP 118
54453: PUSH
54454: LD_EXP 119
54458: PUSH
54459: LD_EXP 120
54463: PUSH
54464: LD_EXP 121
54468: PUSH
54469: LD_EXP 122
54473: PUSH
54474: LD_EXP 123
54478: PUSH
54479: LD_EXP 124
54483: PUSH
54484: LD_EXP 125
54488: PUSH
54489: LD_EXP 126
54493: PUSH
54494: LD_EXP 134
54498: PUSH
54499: LD_EXP 135
54503: PUSH
54504: LD_EXP 136
54508: PUSH
54509: LD_EXP 137
54513: PUSH
54514: LD_EXP 139
54518: PUSH
54519: LD_EXP 140
54523: PUSH
54524: LD_EXP 141
54528: PUSH
54529: LD_EXP 144
54533: PUSH
54534: LD_EXP 146
54538: PUSH
54539: LD_EXP 147
54543: PUSH
54544: LD_EXP 148
54548: PUSH
54549: LD_EXP 150
54553: PUSH
54554: LD_EXP 151
54558: PUSH
54559: LD_EXP 154
54563: PUSH
54564: LD_EXP 155
54568: PUSH
54569: LD_EXP 156
54573: PUSH
54574: LD_EXP 157
54578: PUSH
54579: LD_EXP 158
54583: PUSH
54584: LD_EXP 159
54588: PUSH
54589: LD_EXP 160
54593: PUSH
54594: LD_EXP 161
54598: PUSH
54599: LD_EXP 162
54603: PUSH
54604: LD_EXP 127
54608: PUSH
54609: LD_EXP 128
54613: PUSH
54614: LD_EXP 131
54618: PUSH
54619: LD_EXP 132
54623: PUSH
54624: LD_EXP 133
54628: PUSH
54629: LD_EXP 129
54633: PUSH
54634: LD_EXP 130
54638: PUSH
54639: LD_EXP 138
54643: PUSH
54644: LD_EXP 142
54648: PUSH
54649: LD_EXP 143
54653: PUSH
54654: LD_EXP 145
54658: PUSH
54659: LD_EXP 149
54663: PUSH
54664: LD_EXP 152
54668: PUSH
54669: LD_EXP 153
54673: PUSH
54674: LD_EXP 163
54678: PUSH
54679: LD_EXP 164
54683: PUSH
54684: LD_EXP 165
54688: PUSH
54689: LD_EXP 166
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: ST_TO_ADDR
// tmp :=  ;
54750: LD_ADDR_VAR 0 3
54754: PUSH
54755: LD_STRING 
54757: ST_TO_ADDR
// for i = 1 to normalCounter do
54758: LD_ADDR_VAR 0 8
54762: PUSH
54763: DOUBLE
54764: LD_INT 1
54766: DEC
54767: ST_TO_ADDR
54768: LD_EXP 111
54772: PUSH
54773: FOR_TO
54774: IFFALSE 54810
// begin if flags [ i ] then
54776: LD_VAR 0 4
54780: PUSH
54781: LD_VAR 0 8
54785: ARRAY
54786: IFFALSE 54808
// tmp := tmp & i & ; ;
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: LD_VAR 0 3
54797: PUSH
54798: LD_VAR 0 8
54802: STR
54803: PUSH
54804: LD_STRING ;
54806: STR
54807: ST_TO_ADDR
// end ;
54808: GO 54773
54810: POP
54811: POP
// for i = 1 to hardcoreCounter do
54812: LD_ADDR_VAR 0 8
54816: PUSH
54817: DOUBLE
54818: LD_INT 1
54820: DEC
54821: ST_TO_ADDR
54822: LD_EXP 112
54826: PUSH
54827: FOR_TO
54828: IFFALSE 54874
// begin if flags [ normalCounter + i ] then
54830: LD_VAR 0 4
54834: PUSH
54835: LD_EXP 111
54839: PUSH
54840: LD_VAR 0 8
54844: PLUS
54845: ARRAY
54846: IFFALSE 54872
// tmp := tmp & ( 100 + i ) & ; ;
54848: LD_ADDR_VAR 0 3
54852: PUSH
54853: LD_VAR 0 3
54857: PUSH
54858: LD_INT 100
54860: PUSH
54861: LD_VAR 0 8
54865: PLUS
54866: STR
54867: PUSH
54868: LD_STRING ;
54870: STR
54871: ST_TO_ADDR
// end ;
54872: GO 54827
54874: POP
54875: POP
// if tmp then
54876: LD_VAR 0 3
54880: IFFALSE 54892
// active := tmp ;
54882: LD_ADDR_VAR 0 7
54886: PUSH
54887: LD_VAR 0 3
54891: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54892: LD_STRING getStreamItemsFromMission("
54894: PUSH
54895: LD_VAR 0 5
54899: STR
54900: PUSH
54901: LD_STRING ","
54903: STR
54904: PUSH
54905: LD_VAR 0 6
54909: STR
54910: PUSH
54911: LD_STRING ","
54913: STR
54914: PUSH
54915: LD_VAR 0 7
54919: STR
54920: PUSH
54921: LD_STRING ")
54923: STR
54924: PPUSH
54925: CALL_OW 559
// end else
54929: GO 54938
// ToLua ( getStreamItemsFromMission("","","") ) ;
54931: LD_STRING getStreamItemsFromMission("","","")
54933: PPUSH
54934: CALL_OW 559
// end ;
54938: LD_VAR 0 2
54942: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54943: LD_EXP 110
54947: PUSH
54948: LD_EXP 115
54952: AND
54953: IFFALSE 55077
54955: GO 54957
54957: DISABLE
54958: LD_INT 0
54960: PPUSH
54961: PPUSH
// begin enable ;
54962: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54963: LD_ADDR_VAR 0 2
54967: PUSH
54968: LD_INT 22
54970: PUSH
54971: LD_OWVAR 2
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: LD_INT 34
54985: PUSH
54986: LD_INT 7
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 34
54995: PUSH
54996: LD_INT 45
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 34
55005: PUSH
55006: LD_INT 28
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 34
55015: PUSH
55016: LD_INT 47
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PPUSH
55034: CALL_OW 69
55038: ST_TO_ADDR
// if not tmp then
55039: LD_VAR 0 2
55043: NOT
55044: IFFALSE 55048
// exit ;
55046: GO 55077
// for i in tmp do
55048: LD_ADDR_VAR 0 1
55052: PUSH
55053: LD_VAR 0 2
55057: PUSH
55058: FOR_IN
55059: IFFALSE 55075
// begin SetLives ( i , 0 ) ;
55061: LD_VAR 0 1
55065: PPUSH
55066: LD_INT 0
55068: PPUSH
55069: CALL_OW 234
// end ;
55073: GO 55058
55075: POP
55076: POP
// end ;
55077: PPOPN 2
55079: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55080: LD_EXP 110
55084: PUSH
55085: LD_EXP 116
55089: AND
55090: IFFALSE 55174
55092: GO 55094
55094: DISABLE
55095: LD_INT 0
55097: PPUSH
55098: PPUSH
// begin enable ;
55099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55100: LD_ADDR_VAR 0 2
55104: PUSH
55105: LD_INT 22
55107: PUSH
55108: LD_OWVAR 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 32
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PPUSH
55131: CALL_OW 69
55135: ST_TO_ADDR
// if not tmp then
55136: LD_VAR 0 2
55140: NOT
55141: IFFALSE 55145
// exit ;
55143: GO 55174
// for i in tmp do
55145: LD_ADDR_VAR 0 1
55149: PUSH
55150: LD_VAR 0 2
55154: PUSH
55155: FOR_IN
55156: IFFALSE 55172
// begin SetLives ( i , 0 ) ;
55158: LD_VAR 0 1
55162: PPUSH
55163: LD_INT 0
55165: PPUSH
55166: CALL_OW 234
// end ;
55170: GO 55155
55172: POP
55173: POP
// end ;
55174: PPOPN 2
55176: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55177: LD_EXP 110
55181: PUSH
55182: LD_EXP 113
55186: AND
55187: IFFALSE 55280
55189: GO 55191
55191: DISABLE
55192: LD_INT 0
55194: PPUSH
// begin enable ;
55195: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55196: LD_ADDR_VAR 0 1
55200: PUSH
55201: LD_INT 22
55203: PUSH
55204: LD_OWVAR 2
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: PUSH
55216: LD_INT 25
55218: PUSH
55219: LD_INT 5
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 25
55228: PUSH
55229: LD_INT 9
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 25
55238: PUSH
55239: LD_INT 8
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PPUSH
55256: CALL_OW 69
55260: PUSH
55261: FOR_IN
55262: IFFALSE 55278
// begin SetClass ( i , 1 ) ;
55264: LD_VAR 0 1
55268: PPUSH
55269: LD_INT 1
55271: PPUSH
55272: CALL_OW 336
// end ;
55276: GO 55261
55278: POP
55279: POP
// end ;
55280: PPOPN 1
55282: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55283: LD_EXP 110
55287: PUSH
55288: LD_EXP 114
55292: AND
55293: PUSH
55294: LD_OWVAR 65
55298: PUSH
55299: LD_INT 7
55301: LESS
55302: AND
55303: IFFALSE 55317
55305: GO 55307
55307: DISABLE
// begin enable ;
55308: ENABLE
// game_speed := 7 ;
55309: LD_ADDR_OWVAR 65
55313: PUSH
55314: LD_INT 7
55316: ST_TO_ADDR
// end ;
55317: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55318: LD_EXP 110
55322: PUSH
55323: LD_EXP 117
55327: AND
55328: IFFALSE 55530
55330: GO 55332
55332: DISABLE
55333: LD_INT 0
55335: PPUSH
55336: PPUSH
55337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55338: LD_ADDR_VAR 0 3
55342: PUSH
55343: LD_INT 81
55345: PUSH
55346: LD_OWVAR 2
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 21
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PPUSH
55369: CALL_OW 69
55373: ST_TO_ADDR
// if not tmp then
55374: LD_VAR 0 3
55378: NOT
55379: IFFALSE 55383
// exit ;
55381: GO 55530
// if tmp > 5 then
55383: LD_VAR 0 3
55387: PUSH
55388: LD_INT 5
55390: GREATER
55391: IFFALSE 55403
// k := 5 else
55393: LD_ADDR_VAR 0 2
55397: PUSH
55398: LD_INT 5
55400: ST_TO_ADDR
55401: GO 55413
// k := tmp ;
55403: LD_ADDR_VAR 0 2
55407: PUSH
55408: LD_VAR 0 3
55412: ST_TO_ADDR
// for i := 1 to k do
55413: LD_ADDR_VAR 0 1
55417: PUSH
55418: DOUBLE
55419: LD_INT 1
55421: DEC
55422: ST_TO_ADDR
55423: LD_VAR 0 2
55427: PUSH
55428: FOR_TO
55429: IFFALSE 55528
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55431: LD_VAR 0 3
55435: PUSH
55436: LD_VAR 0 1
55440: ARRAY
55441: PPUSH
55442: LD_VAR 0 1
55446: PUSH
55447: LD_INT 4
55449: MOD
55450: PUSH
55451: LD_INT 1
55453: PLUS
55454: PPUSH
55455: CALL_OW 259
55459: PUSH
55460: LD_INT 10
55462: LESS
55463: IFFALSE 55526
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55465: LD_VAR 0 3
55469: PUSH
55470: LD_VAR 0 1
55474: ARRAY
55475: PPUSH
55476: LD_VAR 0 1
55480: PUSH
55481: LD_INT 4
55483: MOD
55484: PUSH
55485: LD_INT 1
55487: PLUS
55488: PPUSH
55489: LD_VAR 0 3
55493: PUSH
55494: LD_VAR 0 1
55498: ARRAY
55499: PPUSH
55500: LD_VAR 0 1
55504: PUSH
55505: LD_INT 4
55507: MOD
55508: PUSH
55509: LD_INT 1
55511: PLUS
55512: PPUSH
55513: CALL_OW 259
55517: PUSH
55518: LD_INT 1
55520: PLUS
55521: PPUSH
55522: CALL_OW 237
55526: GO 55428
55528: POP
55529: POP
// end ;
55530: PPOPN 3
55532: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55533: LD_EXP 110
55537: PUSH
55538: LD_EXP 118
55542: AND
55543: IFFALSE 55563
55545: GO 55547
55547: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55548: LD_INT 4
55550: PPUSH
55551: LD_OWVAR 2
55555: PPUSH
55556: LD_INT 0
55558: PPUSH
55559: CALL_OW 324
55563: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55564: LD_EXP 110
55568: PUSH
55569: LD_EXP 147
55573: AND
55574: IFFALSE 55594
55576: GO 55578
55578: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55579: LD_INT 19
55581: PPUSH
55582: LD_OWVAR 2
55586: PPUSH
55587: LD_INT 0
55589: PPUSH
55590: CALL_OW 324
55594: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55595: LD_EXP 110
55599: PUSH
55600: LD_EXP 119
55604: AND
55605: IFFALSE 55707
55607: GO 55609
55609: DISABLE
55610: LD_INT 0
55612: PPUSH
55613: PPUSH
// begin enable ;
55614: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55615: LD_ADDR_VAR 0 2
55619: PUSH
55620: LD_INT 22
55622: PUSH
55623: LD_OWVAR 2
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 34
55637: PUSH
55638: LD_INT 11
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 34
55647: PUSH
55648: LD_INT 30
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PPUSH
55664: CALL_OW 69
55668: ST_TO_ADDR
// if not tmp then
55669: LD_VAR 0 2
55673: NOT
55674: IFFALSE 55678
// exit ;
55676: GO 55707
// for i in tmp do
55678: LD_ADDR_VAR 0 1
55682: PUSH
55683: LD_VAR 0 2
55687: PUSH
55688: FOR_IN
55689: IFFALSE 55705
// begin SetLives ( i , 0 ) ;
55691: LD_VAR 0 1
55695: PPUSH
55696: LD_INT 0
55698: PPUSH
55699: CALL_OW 234
// end ;
55703: GO 55688
55705: POP
55706: POP
// end ;
55707: PPOPN 2
55709: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55710: LD_EXP 110
55714: PUSH
55715: LD_EXP 120
55719: AND
55720: IFFALSE 55740
55722: GO 55724
55724: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55725: LD_INT 32
55727: PPUSH
55728: LD_OWVAR 2
55732: PPUSH
55733: LD_INT 0
55735: PPUSH
55736: CALL_OW 324
55740: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55741: LD_EXP 110
55745: PUSH
55746: LD_EXP 121
55750: AND
55751: IFFALSE 55932
55753: GO 55755
55755: DISABLE
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
55760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55761: LD_ADDR_VAR 0 2
55765: PUSH
55766: LD_INT 22
55768: PUSH
55769: LD_OWVAR 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 33
55780: PUSH
55781: LD_INT 3
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PPUSH
55792: CALL_OW 69
55796: ST_TO_ADDR
// if not tmp then
55797: LD_VAR 0 2
55801: NOT
55802: IFFALSE 55806
// exit ;
55804: GO 55932
// side := 0 ;
55806: LD_ADDR_VAR 0 3
55810: PUSH
55811: LD_INT 0
55813: ST_TO_ADDR
// for i := 1 to 8 do
55814: LD_ADDR_VAR 0 1
55818: PUSH
55819: DOUBLE
55820: LD_INT 1
55822: DEC
55823: ST_TO_ADDR
55824: LD_INT 8
55826: PUSH
55827: FOR_TO
55828: IFFALSE 55876
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55830: LD_OWVAR 2
55834: PUSH
55835: LD_VAR 0 1
55839: NONEQUAL
55840: PUSH
55841: LD_OWVAR 2
55845: PPUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 81
55855: PUSH
55856: LD_INT 2
55858: EQUAL
55859: AND
55860: IFFALSE 55874
// begin side := i ;
55862: LD_ADDR_VAR 0 3
55866: PUSH
55867: LD_VAR 0 1
55871: ST_TO_ADDR
// break ;
55872: GO 55876
// end ;
55874: GO 55827
55876: POP
55877: POP
// if not side then
55878: LD_VAR 0 3
55882: NOT
55883: IFFALSE 55887
// exit ;
55885: GO 55932
// for i := 1 to tmp do
55887: LD_ADDR_VAR 0 1
55891: PUSH
55892: DOUBLE
55893: LD_INT 1
55895: DEC
55896: ST_TO_ADDR
55897: LD_VAR 0 2
55901: PUSH
55902: FOR_TO
55903: IFFALSE 55930
// if Prob ( 60 ) then
55905: LD_INT 60
55907: PPUSH
55908: CALL_OW 13
55912: IFFALSE 55928
// SetSide ( i , side ) ;
55914: LD_VAR 0 1
55918: PPUSH
55919: LD_VAR 0 3
55923: PPUSH
55924: CALL_OW 235
55928: GO 55902
55930: POP
55931: POP
// end ;
55932: PPOPN 3
55934: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55935: LD_EXP 110
55939: PUSH
55940: LD_EXP 123
55944: AND
55945: IFFALSE 56064
55947: GO 55949
55949: DISABLE
55950: LD_INT 0
55952: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55953: LD_ADDR_VAR 0 1
55957: PUSH
55958: LD_INT 22
55960: PUSH
55961: LD_OWVAR 2
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 21
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 23
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: PPUSH
56002: CALL_OW 69
56006: PUSH
56007: FOR_IN
56008: IFFALSE 56062
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56010: LD_VAR 0 1
56014: PPUSH
56015: CALL_OW 257
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 3
56028: PUSH
56029: LD_INT 4
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: IN
56038: IFFALSE 56060
// SetClass ( un , rand ( 1 , 4 ) ) ;
56040: LD_VAR 0 1
56044: PPUSH
56045: LD_INT 1
56047: PPUSH
56048: LD_INT 4
56050: PPUSH
56051: CALL_OW 12
56055: PPUSH
56056: CALL_OW 336
56060: GO 56007
56062: POP
56063: POP
// end ;
56064: PPOPN 1
56066: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56067: LD_EXP 110
56071: PUSH
56072: LD_EXP 122
56076: AND
56077: IFFALSE 56156
56079: GO 56081
56081: DISABLE
56082: LD_INT 0
56084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56085: LD_ADDR_VAR 0 1
56089: PUSH
56090: LD_INT 22
56092: PUSH
56093: LD_OWVAR 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 21
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PPUSH
56116: CALL_OW 69
56120: ST_TO_ADDR
// if not tmp then
56121: LD_VAR 0 1
56125: NOT
56126: IFFALSE 56130
// exit ;
56128: GO 56156
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56130: LD_VAR 0 1
56134: PUSH
56135: LD_INT 1
56137: PPUSH
56138: LD_VAR 0 1
56142: PPUSH
56143: CALL_OW 12
56147: ARRAY
56148: PPUSH
56149: LD_INT 100
56151: PPUSH
56152: CALL_OW 234
// end ;
56156: PPOPN 1
56158: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56159: LD_EXP 110
56163: PUSH
56164: LD_EXP 124
56168: AND
56169: IFFALSE 56267
56171: GO 56173
56173: DISABLE
56174: LD_INT 0
56176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56177: LD_ADDR_VAR 0 1
56181: PUSH
56182: LD_INT 22
56184: PUSH
56185: LD_OWVAR 2
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 21
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PPUSH
56208: CALL_OW 69
56212: ST_TO_ADDR
// if not tmp then
56213: LD_VAR 0 1
56217: NOT
56218: IFFALSE 56222
// exit ;
56220: GO 56267
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56222: LD_VAR 0 1
56226: PUSH
56227: LD_INT 1
56229: PPUSH
56230: LD_VAR 0 1
56234: PPUSH
56235: CALL_OW 12
56239: ARRAY
56240: PPUSH
56241: LD_INT 1
56243: PPUSH
56244: LD_INT 4
56246: PPUSH
56247: CALL_OW 12
56251: PPUSH
56252: LD_INT 3000
56254: PPUSH
56255: LD_INT 9000
56257: PPUSH
56258: CALL_OW 12
56262: PPUSH
56263: CALL_OW 492
// end ;
56267: PPOPN 1
56269: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56270: LD_EXP 110
56274: PUSH
56275: LD_EXP 125
56279: AND
56280: IFFALSE 56300
56282: GO 56284
56284: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56285: LD_INT 1
56287: PPUSH
56288: LD_OWVAR 2
56292: PPUSH
56293: LD_INT 0
56295: PPUSH
56296: CALL_OW 324
56300: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56301: LD_EXP 110
56305: PUSH
56306: LD_EXP 126
56310: AND
56311: IFFALSE 56394
56313: GO 56315
56315: DISABLE
56316: LD_INT 0
56318: PPUSH
56319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56320: LD_ADDR_VAR 0 2
56324: PUSH
56325: LD_INT 22
56327: PUSH
56328: LD_OWVAR 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 21
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PPUSH
56351: CALL_OW 69
56355: ST_TO_ADDR
// if not tmp then
56356: LD_VAR 0 2
56360: NOT
56361: IFFALSE 56365
// exit ;
56363: GO 56394
// for i in tmp do
56365: LD_ADDR_VAR 0 1
56369: PUSH
56370: LD_VAR 0 2
56374: PUSH
56375: FOR_IN
56376: IFFALSE 56392
// SetBLevel ( i , 10 ) ;
56378: LD_VAR 0 1
56382: PPUSH
56383: LD_INT 10
56385: PPUSH
56386: CALL_OW 241
56390: GO 56375
56392: POP
56393: POP
// end ;
56394: PPOPN 2
56396: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56397: LD_EXP 110
56401: PUSH
56402: LD_EXP 127
56406: AND
56407: IFFALSE 56518
56409: GO 56411
56411: DISABLE
56412: LD_INT 0
56414: PPUSH
56415: PPUSH
56416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56417: LD_ADDR_VAR 0 3
56421: PUSH
56422: LD_INT 22
56424: PUSH
56425: LD_OWVAR 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 25
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PPUSH
56448: CALL_OW 69
56452: ST_TO_ADDR
// if not tmp then
56453: LD_VAR 0 3
56457: NOT
56458: IFFALSE 56462
// exit ;
56460: GO 56518
// un := tmp [ rand ( 1 , tmp ) ] ;
56462: LD_ADDR_VAR 0 2
56466: PUSH
56467: LD_VAR 0 3
56471: PUSH
56472: LD_INT 1
56474: PPUSH
56475: LD_VAR 0 3
56479: PPUSH
56480: CALL_OW 12
56484: ARRAY
56485: ST_TO_ADDR
// if Crawls ( un ) then
56486: LD_VAR 0 2
56490: PPUSH
56491: CALL_OW 318
56495: IFFALSE 56506
// ComWalk ( un ) ;
56497: LD_VAR 0 2
56501: PPUSH
56502: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56506: LD_VAR 0 2
56510: PPUSH
56511: LD_INT 5
56513: PPUSH
56514: CALL_OW 336
// end ;
56518: PPOPN 3
56520: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56521: LD_EXP 110
56525: PUSH
56526: LD_EXP 128
56530: AND
56531: PUSH
56532: LD_OWVAR 67
56536: PUSH
56537: LD_INT 4
56539: LESS
56540: AND
56541: IFFALSE 56560
56543: GO 56545
56545: DISABLE
// begin Difficulty := Difficulty + 1 ;
56546: LD_ADDR_OWVAR 67
56550: PUSH
56551: LD_OWVAR 67
56555: PUSH
56556: LD_INT 1
56558: PLUS
56559: ST_TO_ADDR
// end ;
56560: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56561: LD_EXP 110
56565: PUSH
56566: LD_EXP 129
56570: AND
56571: IFFALSE 56674
56573: GO 56575
56575: DISABLE
56576: LD_INT 0
56578: PPUSH
// begin for i := 1 to 5 do
56579: LD_ADDR_VAR 0 1
56583: PUSH
56584: DOUBLE
56585: LD_INT 1
56587: DEC
56588: ST_TO_ADDR
56589: LD_INT 5
56591: PUSH
56592: FOR_TO
56593: IFFALSE 56672
// begin uc_nation := nation_nature ;
56595: LD_ADDR_OWVAR 21
56599: PUSH
56600: LD_INT 0
56602: ST_TO_ADDR
// uc_side := 0 ;
56603: LD_ADDR_OWVAR 20
56607: PUSH
56608: LD_INT 0
56610: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56611: LD_ADDR_OWVAR 29
56615: PUSH
56616: LD_INT 12
56618: PUSH
56619: LD_INT 12
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// hc_agressivity := 20 ;
56626: LD_ADDR_OWVAR 35
56630: PUSH
56631: LD_INT 20
56633: ST_TO_ADDR
// hc_class := class_tiger ;
56634: LD_ADDR_OWVAR 28
56638: PUSH
56639: LD_INT 14
56641: ST_TO_ADDR
// hc_gallery :=  ;
56642: LD_ADDR_OWVAR 33
56646: PUSH
56647: LD_STRING 
56649: ST_TO_ADDR
// hc_name :=  ;
56650: LD_ADDR_OWVAR 26
56654: PUSH
56655: LD_STRING 
56657: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56658: CALL_OW 44
56662: PPUSH
56663: LD_INT 0
56665: PPUSH
56666: CALL_OW 51
// end ;
56670: GO 56592
56672: POP
56673: POP
// end ;
56674: PPOPN 1
56676: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56677: LD_EXP 110
56681: PUSH
56682: LD_EXP 130
56686: AND
56687: IFFALSE 56696
56689: GO 56691
56691: DISABLE
// StreamSibBomb ;
56692: CALL 56697 0 0
56696: END
// export function StreamSibBomb ; var i , x , y ; begin
56697: LD_INT 0
56699: PPUSH
56700: PPUSH
56701: PPUSH
56702: PPUSH
// result := false ;
56703: LD_ADDR_VAR 0 1
56707: PUSH
56708: LD_INT 0
56710: ST_TO_ADDR
// for i := 1 to 16 do
56711: LD_ADDR_VAR 0 2
56715: PUSH
56716: DOUBLE
56717: LD_INT 1
56719: DEC
56720: ST_TO_ADDR
56721: LD_INT 16
56723: PUSH
56724: FOR_TO
56725: IFFALSE 56924
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56727: LD_ADDR_VAR 0 3
56731: PUSH
56732: LD_INT 10
56734: PUSH
56735: LD_INT 20
56737: PUSH
56738: LD_INT 30
56740: PUSH
56741: LD_INT 40
56743: PUSH
56744: LD_INT 50
56746: PUSH
56747: LD_INT 60
56749: PUSH
56750: LD_INT 70
56752: PUSH
56753: LD_INT 80
56755: PUSH
56756: LD_INT 90
56758: PUSH
56759: LD_INT 100
56761: PUSH
56762: LD_INT 110
56764: PUSH
56765: LD_INT 120
56767: PUSH
56768: LD_INT 130
56770: PUSH
56771: LD_INT 140
56773: PUSH
56774: LD_INT 150
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: PPUSH
56797: LD_INT 15
56799: PPUSH
56800: CALL_OW 12
56804: ARRAY
56805: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56806: LD_ADDR_VAR 0 4
56810: PUSH
56811: LD_INT 10
56813: PUSH
56814: LD_INT 20
56816: PUSH
56817: LD_INT 30
56819: PUSH
56820: LD_INT 40
56822: PUSH
56823: LD_INT 50
56825: PUSH
56826: LD_INT 60
56828: PUSH
56829: LD_INT 70
56831: PUSH
56832: LD_INT 80
56834: PUSH
56835: LD_INT 90
56837: PUSH
56838: LD_INT 100
56840: PUSH
56841: LD_INT 110
56843: PUSH
56844: LD_INT 120
56846: PUSH
56847: LD_INT 130
56849: PUSH
56850: LD_INT 140
56852: PUSH
56853: LD_INT 150
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PPUSH
56876: LD_INT 15
56878: PPUSH
56879: CALL_OW 12
56883: ARRAY
56884: ST_TO_ADDR
// if ValidHex ( x , y ) then
56885: LD_VAR 0 3
56889: PPUSH
56890: LD_VAR 0 4
56894: PPUSH
56895: CALL_OW 488
56899: IFFALSE 56922
// begin result := [ x , y ] ;
56901: LD_ADDR_VAR 0 1
56905: PUSH
56906: LD_VAR 0 3
56910: PUSH
56911: LD_VAR 0 4
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: ST_TO_ADDR
// break ;
56920: GO 56924
// end ; end ;
56922: GO 56724
56924: POP
56925: POP
// if result then
56926: LD_VAR 0 1
56930: IFFALSE 56990
// begin ToLua ( playSibBomb() ) ;
56932: LD_STRING playSibBomb()
56934: PPUSH
56935: CALL_OW 559
// wait ( 0 0$14 ) ;
56939: LD_INT 490
56941: PPUSH
56942: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56946: LD_VAR 0 1
56950: PUSH
56951: LD_INT 1
56953: ARRAY
56954: PPUSH
56955: LD_VAR 0 1
56959: PUSH
56960: LD_INT 2
56962: ARRAY
56963: PPUSH
56964: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56968: LD_VAR 0 1
56972: PUSH
56973: LD_INT 1
56975: ARRAY
56976: PPUSH
56977: LD_VAR 0 1
56981: PUSH
56982: LD_INT 2
56984: ARRAY
56985: PPUSH
56986: CALL_OW 429
// end ; end ;
56990: LD_VAR 0 1
56994: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56995: LD_EXP 110
56999: PUSH
57000: LD_EXP 132
57004: AND
57005: IFFALSE 57017
57007: GO 57009
57009: DISABLE
// YouLost (  ) ;
57010: LD_STRING 
57012: PPUSH
57013: CALL_OW 104
57017: END
// every 0 0$1 trigger StreamModeActive and sFog do
57018: LD_EXP 110
57022: PUSH
57023: LD_EXP 131
57027: AND
57028: IFFALSE 57042
57030: GO 57032
57032: DISABLE
// FogOff ( your_side ) ;
57033: LD_OWVAR 2
57037: PPUSH
57038: CALL_OW 344
57042: END
// every 0 0$1 trigger StreamModeActive and sSun do
57043: LD_EXP 110
57047: PUSH
57048: LD_EXP 133
57052: AND
57053: IFFALSE 57081
57055: GO 57057
57057: DISABLE
// begin solar_recharge_percent := 0 ;
57058: LD_ADDR_OWVAR 79
57062: PUSH
57063: LD_INT 0
57065: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57066: LD_INT 10500
57068: PPUSH
57069: CALL_OW 67
// solar_recharge_percent := 100 ;
57073: LD_ADDR_OWVAR 79
57077: PUSH
57078: LD_INT 100
57080: ST_TO_ADDR
// end ;
57081: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57082: LD_EXP 110
57086: PUSH
57087: LD_EXP 134
57091: AND
57092: IFFALSE 57331
57094: GO 57096
57096: DISABLE
57097: LD_INT 0
57099: PPUSH
57100: PPUSH
57101: PPUSH
// begin tmp := [ ] ;
57102: LD_ADDR_VAR 0 3
57106: PUSH
57107: EMPTY
57108: ST_TO_ADDR
// for i := 1 to 6 do
57109: LD_ADDR_VAR 0 1
57113: PUSH
57114: DOUBLE
57115: LD_INT 1
57117: DEC
57118: ST_TO_ADDR
57119: LD_INT 6
57121: PUSH
57122: FOR_TO
57123: IFFALSE 57228
// begin uc_nation := nation_nature ;
57125: LD_ADDR_OWVAR 21
57129: PUSH
57130: LD_INT 0
57132: ST_TO_ADDR
// uc_side := 0 ;
57133: LD_ADDR_OWVAR 20
57137: PUSH
57138: LD_INT 0
57140: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57141: LD_ADDR_OWVAR 29
57145: PUSH
57146: LD_INT 12
57148: PUSH
57149: LD_INT 12
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: ST_TO_ADDR
// hc_agressivity := 20 ;
57156: LD_ADDR_OWVAR 35
57160: PUSH
57161: LD_INT 20
57163: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57164: LD_ADDR_OWVAR 28
57168: PUSH
57169: LD_INT 17
57171: ST_TO_ADDR
// hc_gallery :=  ;
57172: LD_ADDR_OWVAR 33
57176: PUSH
57177: LD_STRING 
57179: ST_TO_ADDR
// hc_name :=  ;
57180: LD_ADDR_OWVAR 26
57184: PUSH
57185: LD_STRING 
57187: ST_TO_ADDR
// un := CreateHuman ;
57188: LD_ADDR_VAR 0 2
57192: PUSH
57193: CALL_OW 44
57197: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57198: LD_VAR 0 2
57202: PPUSH
57203: LD_INT 1
57205: PPUSH
57206: CALL_OW 51
// tmp := tmp ^ un ;
57210: LD_ADDR_VAR 0 3
57214: PUSH
57215: LD_VAR 0 3
57219: PUSH
57220: LD_VAR 0 2
57224: ADD
57225: ST_TO_ADDR
// end ;
57226: GO 57122
57228: POP
57229: POP
// repeat wait ( 0 0$1 ) ;
57230: LD_INT 35
57232: PPUSH
57233: CALL_OW 67
// for un in tmp do
57237: LD_ADDR_VAR 0 2
57241: PUSH
57242: LD_VAR 0 3
57246: PUSH
57247: FOR_IN
57248: IFFALSE 57322
// begin if IsDead ( un ) then
57250: LD_VAR 0 2
57254: PPUSH
57255: CALL_OW 301
57259: IFFALSE 57279
// begin tmp := tmp diff un ;
57261: LD_ADDR_VAR 0 3
57265: PUSH
57266: LD_VAR 0 3
57270: PUSH
57271: LD_VAR 0 2
57275: DIFF
57276: ST_TO_ADDR
// continue ;
57277: GO 57247
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57279: LD_VAR 0 2
57283: PPUSH
57284: LD_INT 3
57286: PUSH
57287: LD_INT 22
57289: PUSH
57290: LD_INT 0
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PPUSH
57301: CALL_OW 69
57305: PPUSH
57306: LD_VAR 0 2
57310: PPUSH
57311: CALL_OW 74
57315: PPUSH
57316: CALL_OW 115
// end ;
57320: GO 57247
57322: POP
57323: POP
// until not tmp ;
57324: LD_VAR 0 3
57328: NOT
57329: IFFALSE 57230
// end ;
57331: PPOPN 3
57333: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57334: LD_EXP 110
57338: PUSH
57339: LD_EXP 135
57343: AND
57344: IFFALSE 57398
57346: GO 57348
57348: DISABLE
// begin ToLua ( displayTroll(); ) ;
57349: LD_STRING displayTroll();
57351: PPUSH
57352: CALL_OW 559
// wait ( 3 3$00 ) ;
57356: LD_INT 6300
57358: PPUSH
57359: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57363: LD_STRING hideTroll();
57365: PPUSH
57366: CALL_OW 559
// wait ( 1 1$00 ) ;
57370: LD_INT 2100
57372: PPUSH
57373: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57377: LD_STRING displayTroll();
57379: PPUSH
57380: CALL_OW 559
// wait ( 1 1$00 ) ;
57384: LD_INT 2100
57386: PPUSH
57387: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57391: LD_STRING hideTroll();
57393: PPUSH
57394: CALL_OW 559
// end ;
57398: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57399: LD_EXP 110
57403: PUSH
57404: LD_EXP 136
57408: AND
57409: IFFALSE 57472
57411: GO 57413
57413: DISABLE
57414: LD_INT 0
57416: PPUSH
// begin p := 0 ;
57417: LD_ADDR_VAR 0 1
57421: PUSH
57422: LD_INT 0
57424: ST_TO_ADDR
// repeat game_speed := 1 ;
57425: LD_ADDR_OWVAR 65
57429: PUSH
57430: LD_INT 1
57432: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57433: LD_INT 35
57435: PPUSH
57436: CALL_OW 67
// p := p + 1 ;
57440: LD_ADDR_VAR 0 1
57444: PUSH
57445: LD_VAR 0 1
57449: PUSH
57450: LD_INT 1
57452: PLUS
57453: ST_TO_ADDR
// until p >= 60 ;
57454: LD_VAR 0 1
57458: PUSH
57459: LD_INT 60
57461: GREATEREQUAL
57462: IFFALSE 57425
// game_speed := 4 ;
57464: LD_ADDR_OWVAR 65
57468: PUSH
57469: LD_INT 4
57471: ST_TO_ADDR
// end ;
57472: PPOPN 1
57474: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57475: LD_EXP 110
57479: PUSH
57480: LD_EXP 137
57484: AND
57485: IFFALSE 57631
57487: GO 57489
57489: DISABLE
57490: LD_INT 0
57492: PPUSH
57493: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57494: LD_ADDR_VAR 0 1
57498: PUSH
57499: LD_INT 22
57501: PUSH
57502: LD_OWVAR 2
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 30
57516: PUSH
57517: LD_INT 0
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 30
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PPUSH
57543: CALL_OW 69
57547: ST_TO_ADDR
// if not depot then
57548: LD_VAR 0 1
57552: NOT
57553: IFFALSE 57557
// exit ;
57555: GO 57631
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57557: LD_ADDR_VAR 0 2
57561: PUSH
57562: LD_VAR 0 1
57566: PUSH
57567: LD_INT 1
57569: PPUSH
57570: LD_VAR 0 1
57574: PPUSH
57575: CALL_OW 12
57579: ARRAY
57580: PPUSH
57581: CALL_OW 274
57585: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57586: LD_VAR 0 2
57590: PPUSH
57591: LD_INT 1
57593: PPUSH
57594: LD_INT 0
57596: PPUSH
57597: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57601: LD_VAR 0 2
57605: PPUSH
57606: LD_INT 2
57608: PPUSH
57609: LD_INT 0
57611: PPUSH
57612: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57616: LD_VAR 0 2
57620: PPUSH
57621: LD_INT 3
57623: PPUSH
57624: LD_INT 0
57626: PPUSH
57627: CALL_OW 277
// end ;
57631: PPOPN 2
57633: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57634: LD_EXP 110
57638: PUSH
57639: LD_EXP 138
57643: AND
57644: IFFALSE 57741
57646: GO 57648
57648: DISABLE
57649: LD_INT 0
57651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57652: LD_ADDR_VAR 0 1
57656: PUSH
57657: LD_INT 22
57659: PUSH
57660: LD_OWVAR 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 21
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: PUSH
57682: LD_INT 23
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: PPUSH
57701: CALL_OW 69
57705: ST_TO_ADDR
// if not tmp then
57706: LD_VAR 0 1
57710: NOT
57711: IFFALSE 57715
// exit ;
57713: GO 57741
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57715: LD_VAR 0 1
57719: PUSH
57720: LD_INT 1
57722: PPUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: CALL_OW 12
57732: ARRAY
57733: PPUSH
57734: LD_INT 200
57736: PPUSH
57737: CALL_OW 234
// end ;
57741: PPOPN 1
57743: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57744: LD_EXP 110
57748: PUSH
57749: LD_EXP 139
57753: AND
57754: IFFALSE 57833
57756: GO 57758
57758: DISABLE
57759: LD_INT 0
57761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57762: LD_ADDR_VAR 0 1
57766: PUSH
57767: LD_INT 22
57769: PUSH
57770: LD_OWVAR 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 21
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PPUSH
57793: CALL_OW 69
57797: ST_TO_ADDR
// if not tmp then
57798: LD_VAR 0 1
57802: NOT
57803: IFFALSE 57807
// exit ;
57805: GO 57833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57807: LD_VAR 0 1
57811: PUSH
57812: LD_INT 1
57814: PPUSH
57815: LD_VAR 0 1
57819: PPUSH
57820: CALL_OW 12
57824: ARRAY
57825: PPUSH
57826: LD_INT 60
57828: PPUSH
57829: CALL_OW 234
// end ;
57833: PPOPN 1
57835: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57836: LD_EXP 110
57840: PUSH
57841: LD_EXP 140
57845: AND
57846: IFFALSE 57945
57848: GO 57850
57850: DISABLE
57851: LD_INT 0
57853: PPUSH
57854: PPUSH
// begin enable ;
57855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57856: LD_ADDR_VAR 0 1
57860: PUSH
57861: LD_INT 22
57863: PUSH
57864: LD_OWVAR 2
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 61
57875: PUSH
57876: EMPTY
57877: LIST
57878: PUSH
57879: LD_INT 33
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: LIST
57893: PPUSH
57894: CALL_OW 69
57898: ST_TO_ADDR
// if not tmp then
57899: LD_VAR 0 1
57903: NOT
57904: IFFALSE 57908
// exit ;
57906: GO 57945
// for i in tmp do
57908: LD_ADDR_VAR 0 2
57912: PUSH
57913: LD_VAR 0 1
57917: PUSH
57918: FOR_IN
57919: IFFALSE 57943
// if IsControledBy ( i ) then
57921: LD_VAR 0 2
57925: PPUSH
57926: CALL_OW 312
57930: IFFALSE 57941
// ComUnlink ( i ) ;
57932: LD_VAR 0 2
57936: PPUSH
57937: CALL_OW 136
57941: GO 57918
57943: POP
57944: POP
// end ;
57945: PPOPN 2
57947: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57948: LD_EXP 110
57952: PUSH
57953: LD_EXP 141
57957: AND
57958: IFFALSE 58098
57960: GO 57962
57962: DISABLE
57963: LD_INT 0
57965: PPUSH
57966: PPUSH
// begin ToLua ( displayPowell(); ) ;
57967: LD_STRING displayPowell();
57969: PPUSH
57970: CALL_OW 559
// uc_side := 0 ;
57974: LD_ADDR_OWVAR 20
57978: PUSH
57979: LD_INT 0
57981: ST_TO_ADDR
// uc_nation := 2 ;
57982: LD_ADDR_OWVAR 21
57986: PUSH
57987: LD_INT 2
57989: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57990: LD_ADDR_OWVAR 37
57994: PUSH
57995: LD_INT 14
57997: ST_TO_ADDR
// vc_engine := engine_siberite ;
57998: LD_ADDR_OWVAR 39
58002: PUSH
58003: LD_INT 3
58005: ST_TO_ADDR
// vc_control := control_apeman ;
58006: LD_ADDR_OWVAR 38
58010: PUSH
58011: LD_INT 5
58013: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58014: LD_ADDR_OWVAR 40
58018: PUSH
58019: LD_INT 29
58021: ST_TO_ADDR
// un := CreateVehicle ;
58022: LD_ADDR_VAR 0 2
58026: PUSH
58027: CALL_OW 45
58031: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58032: LD_VAR 0 2
58036: PPUSH
58037: LD_INT 1
58039: PPUSH
58040: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58044: LD_INT 35
58046: PPUSH
58047: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58051: LD_VAR 0 2
58055: PPUSH
58056: LD_INT 22
58058: PUSH
58059: LD_OWVAR 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PPUSH
58068: CALL_OW 69
58072: PPUSH
58073: LD_VAR 0 2
58077: PPUSH
58078: CALL_OW 74
58082: PPUSH
58083: CALL_OW 115
// until IsDead ( un ) ;
58087: LD_VAR 0 2
58091: PPUSH
58092: CALL_OW 301
58096: IFFALSE 58044
// end ;
58098: PPOPN 2
58100: END
// every 0 0$1 trigger StreamModeActive and sStu do
58101: LD_EXP 110
58105: PUSH
58106: LD_EXP 149
58110: AND
58111: IFFALSE 58127
58113: GO 58115
58115: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58116: LD_STRING displayStucuk();
58118: PPUSH
58119: CALL_OW 559
// ResetFog ;
58123: CALL_OW 335
// end ;
58127: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58128: LD_EXP 110
58132: PUSH
58133: LD_EXP 142
58137: AND
58138: IFFALSE 58279
58140: GO 58142
58142: DISABLE
58143: LD_INT 0
58145: PPUSH
58146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58147: LD_ADDR_VAR 0 2
58151: PUSH
58152: LD_INT 22
58154: PUSH
58155: LD_OWVAR 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 21
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PPUSH
58178: CALL_OW 69
58182: ST_TO_ADDR
// if not tmp then
58183: LD_VAR 0 2
58187: NOT
58188: IFFALSE 58192
// exit ;
58190: GO 58279
// un := tmp [ rand ( 1 , tmp ) ] ;
58192: LD_ADDR_VAR 0 1
58196: PUSH
58197: LD_VAR 0 2
58201: PUSH
58202: LD_INT 1
58204: PPUSH
58205: LD_VAR 0 2
58209: PPUSH
58210: CALL_OW 12
58214: ARRAY
58215: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58216: LD_VAR 0 1
58220: PPUSH
58221: LD_INT 0
58223: PPUSH
58224: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58228: LD_VAR 0 1
58232: PPUSH
58233: LD_OWVAR 3
58237: PUSH
58238: LD_VAR 0 1
58242: DIFF
58243: PPUSH
58244: LD_VAR 0 1
58248: PPUSH
58249: CALL_OW 74
58253: PPUSH
58254: CALL_OW 115
// wait ( 0 0$20 ) ;
58258: LD_INT 700
58260: PPUSH
58261: CALL_OW 67
// SetSide ( un , your_side ) ;
58265: LD_VAR 0 1
58269: PPUSH
58270: LD_OWVAR 2
58274: PPUSH
58275: CALL_OW 235
// end ;
58279: PPOPN 2
58281: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58282: LD_EXP 110
58286: PUSH
58287: LD_EXP 143
58291: AND
58292: IFFALSE 58398
58294: GO 58296
58296: DISABLE
58297: LD_INT 0
58299: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58300: LD_ADDR_VAR 0 1
58304: PUSH
58305: LD_INT 22
58307: PUSH
58308: LD_OWVAR 2
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: LD_INT 30
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 30
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PPUSH
58349: CALL_OW 69
58353: ST_TO_ADDR
// if not depot then
58354: LD_VAR 0 1
58358: NOT
58359: IFFALSE 58363
// exit ;
58361: GO 58398
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58363: LD_VAR 0 1
58367: PUSH
58368: LD_INT 1
58370: ARRAY
58371: PPUSH
58372: CALL_OW 250
58376: PPUSH
58377: LD_VAR 0 1
58381: PUSH
58382: LD_INT 1
58384: ARRAY
58385: PPUSH
58386: CALL_OW 251
58390: PPUSH
58391: LD_INT 70
58393: PPUSH
58394: CALL_OW 495
// end ;
58398: PPOPN 1
58400: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58401: LD_EXP 110
58405: PUSH
58406: LD_EXP 144
58410: AND
58411: IFFALSE 58622
58413: GO 58415
58415: DISABLE
58416: LD_INT 0
58418: PPUSH
58419: PPUSH
58420: PPUSH
58421: PPUSH
58422: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58423: LD_ADDR_VAR 0 5
58427: PUSH
58428: LD_INT 22
58430: PUSH
58431: LD_OWVAR 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 21
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PPUSH
58454: CALL_OW 69
58458: ST_TO_ADDR
// if not tmp then
58459: LD_VAR 0 5
58463: NOT
58464: IFFALSE 58468
// exit ;
58466: GO 58622
// for i in tmp do
58468: LD_ADDR_VAR 0 1
58472: PUSH
58473: LD_VAR 0 5
58477: PUSH
58478: FOR_IN
58479: IFFALSE 58620
// begin d := rand ( 0 , 5 ) ;
58481: LD_ADDR_VAR 0 4
58485: PUSH
58486: LD_INT 0
58488: PPUSH
58489: LD_INT 5
58491: PPUSH
58492: CALL_OW 12
58496: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58497: LD_ADDR_VAR 0 2
58501: PUSH
58502: LD_VAR 0 1
58506: PPUSH
58507: CALL_OW 250
58511: PPUSH
58512: LD_VAR 0 4
58516: PPUSH
58517: LD_INT 3
58519: PPUSH
58520: LD_INT 12
58522: PPUSH
58523: CALL_OW 12
58527: PPUSH
58528: CALL_OW 272
58532: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58533: LD_ADDR_VAR 0 3
58537: PUSH
58538: LD_VAR 0 1
58542: PPUSH
58543: CALL_OW 251
58547: PPUSH
58548: LD_VAR 0 4
58552: PPUSH
58553: LD_INT 3
58555: PPUSH
58556: LD_INT 12
58558: PPUSH
58559: CALL_OW 12
58563: PPUSH
58564: CALL_OW 273
58568: ST_TO_ADDR
// if ValidHex ( x , y ) then
58569: LD_VAR 0 2
58573: PPUSH
58574: LD_VAR 0 3
58578: PPUSH
58579: CALL_OW 488
58583: IFFALSE 58618
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58585: LD_VAR 0 1
58589: PPUSH
58590: LD_VAR 0 2
58594: PPUSH
58595: LD_VAR 0 3
58599: PPUSH
58600: LD_INT 3
58602: PPUSH
58603: LD_INT 6
58605: PPUSH
58606: CALL_OW 12
58610: PPUSH
58611: LD_INT 1
58613: PPUSH
58614: CALL_OW 483
// end ;
58618: GO 58478
58620: POP
58621: POP
// end ;
58622: PPOPN 5
58624: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58625: LD_EXP 110
58629: PUSH
58630: LD_EXP 145
58634: AND
58635: IFFALSE 58729
58637: GO 58639
58639: DISABLE
58640: LD_INT 0
58642: PPUSH
58643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58644: LD_ADDR_VAR 0 2
58648: PUSH
58649: LD_INT 22
58651: PUSH
58652: LD_OWVAR 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 32
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 21
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: PPUSH
58686: CALL_OW 69
58690: ST_TO_ADDR
// if not tmp then
58691: LD_VAR 0 2
58695: NOT
58696: IFFALSE 58700
// exit ;
58698: GO 58729
// for i in tmp do
58700: LD_ADDR_VAR 0 1
58704: PUSH
58705: LD_VAR 0 2
58709: PUSH
58710: FOR_IN
58711: IFFALSE 58727
// SetFuel ( i , 0 ) ;
58713: LD_VAR 0 1
58717: PPUSH
58718: LD_INT 0
58720: PPUSH
58721: CALL_OW 240
58725: GO 58710
58727: POP
58728: POP
// end ;
58729: PPOPN 2
58731: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58732: LD_EXP 110
58736: PUSH
58737: LD_EXP 146
58741: AND
58742: IFFALSE 58808
58744: GO 58746
58746: DISABLE
58747: LD_INT 0
58749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58750: LD_ADDR_VAR 0 1
58754: PUSH
58755: LD_INT 22
58757: PUSH
58758: LD_OWVAR 2
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 30
58769: PUSH
58770: LD_INT 29
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PPUSH
58781: CALL_OW 69
58785: ST_TO_ADDR
// if not tmp then
58786: LD_VAR 0 1
58790: NOT
58791: IFFALSE 58795
// exit ;
58793: GO 58808
// DestroyUnit ( tmp [ 1 ] ) ;
58795: LD_VAR 0 1
58799: PUSH
58800: LD_INT 1
58802: ARRAY
58803: PPUSH
58804: CALL_OW 65
// end ;
58808: PPOPN 1
58810: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58811: LD_EXP 110
58815: PUSH
58816: LD_EXP 148
58820: AND
58821: IFFALSE 58950
58823: GO 58825
58825: DISABLE
58826: LD_INT 0
58828: PPUSH
// begin uc_side := 0 ;
58829: LD_ADDR_OWVAR 20
58833: PUSH
58834: LD_INT 0
58836: ST_TO_ADDR
// uc_nation := nation_arabian ;
58837: LD_ADDR_OWVAR 21
58841: PUSH
58842: LD_INT 2
58844: ST_TO_ADDR
// hc_gallery :=  ;
58845: LD_ADDR_OWVAR 33
58849: PUSH
58850: LD_STRING 
58852: ST_TO_ADDR
// hc_name :=  ;
58853: LD_ADDR_OWVAR 26
58857: PUSH
58858: LD_STRING 
58860: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58861: LD_INT 1
58863: PPUSH
58864: LD_INT 11
58866: PPUSH
58867: LD_INT 10
58869: PPUSH
58870: CALL_OW 380
// un := CreateHuman ;
58874: LD_ADDR_VAR 0 1
58878: PUSH
58879: CALL_OW 44
58883: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58884: LD_VAR 0 1
58888: PPUSH
58889: LD_INT 1
58891: PPUSH
58892: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58896: LD_INT 35
58898: PPUSH
58899: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58903: LD_VAR 0 1
58907: PPUSH
58908: LD_INT 22
58910: PUSH
58911: LD_OWVAR 2
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PPUSH
58920: CALL_OW 69
58924: PPUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 74
58934: PPUSH
58935: CALL_OW 115
// until IsDead ( un ) ;
58939: LD_VAR 0 1
58943: PPUSH
58944: CALL_OW 301
58948: IFFALSE 58896
// end ;
58950: PPOPN 1
58952: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58953: LD_EXP 110
58957: PUSH
58958: LD_EXP 150
58962: AND
58963: IFFALSE 58975
58965: GO 58967
58967: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58968: LD_STRING earthquake(getX(game), 0, 32)
58970: PPUSH
58971: CALL_OW 559
58975: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58976: LD_EXP 110
58980: PUSH
58981: LD_EXP 151
58985: AND
58986: IFFALSE 59077
58988: GO 58990
58990: DISABLE
58991: LD_INT 0
58993: PPUSH
// begin enable ;
58994: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58995: LD_ADDR_VAR 0 1
58999: PUSH
59000: LD_INT 22
59002: PUSH
59003: LD_OWVAR 2
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 21
59014: PUSH
59015: LD_INT 2
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 33
59024: PUSH
59025: LD_INT 3
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: PPUSH
59037: CALL_OW 69
59041: ST_TO_ADDR
// if not tmp then
59042: LD_VAR 0 1
59046: NOT
59047: IFFALSE 59051
// exit ;
59049: GO 59077
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59051: LD_VAR 0 1
59055: PUSH
59056: LD_INT 1
59058: PPUSH
59059: LD_VAR 0 1
59063: PPUSH
59064: CALL_OW 12
59068: ARRAY
59069: PPUSH
59070: LD_INT 1
59072: PPUSH
59073: CALL_OW 234
// end ;
59077: PPOPN 1
59079: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59080: LD_EXP 110
59084: PUSH
59085: LD_EXP 152
59089: AND
59090: IFFALSE 59231
59092: GO 59094
59094: DISABLE
59095: LD_INT 0
59097: PPUSH
59098: PPUSH
59099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59100: LD_ADDR_VAR 0 3
59104: PUSH
59105: LD_INT 22
59107: PUSH
59108: LD_OWVAR 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 25
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PPUSH
59131: CALL_OW 69
59135: ST_TO_ADDR
// if not tmp then
59136: LD_VAR 0 3
59140: NOT
59141: IFFALSE 59145
// exit ;
59143: GO 59231
// un := tmp [ rand ( 1 , tmp ) ] ;
59145: LD_ADDR_VAR 0 2
59149: PUSH
59150: LD_VAR 0 3
59154: PUSH
59155: LD_INT 1
59157: PPUSH
59158: LD_VAR 0 3
59162: PPUSH
59163: CALL_OW 12
59167: ARRAY
59168: ST_TO_ADDR
// if Crawls ( un ) then
59169: LD_VAR 0 2
59173: PPUSH
59174: CALL_OW 318
59178: IFFALSE 59189
// ComWalk ( un ) ;
59180: LD_VAR 0 2
59184: PPUSH
59185: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59189: LD_VAR 0 2
59193: PPUSH
59194: LD_INT 9
59196: PPUSH
59197: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59201: LD_INT 28
59203: PPUSH
59204: LD_OWVAR 2
59208: PPUSH
59209: LD_INT 2
59211: PPUSH
59212: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59216: LD_INT 29
59218: PPUSH
59219: LD_OWVAR 2
59223: PPUSH
59224: LD_INT 2
59226: PPUSH
59227: CALL_OW 322
// end ;
59231: PPOPN 3
59233: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59234: LD_EXP 110
59238: PUSH
59239: LD_EXP 153
59243: AND
59244: IFFALSE 59355
59246: GO 59248
59248: DISABLE
59249: LD_INT 0
59251: PPUSH
59252: PPUSH
59253: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59254: LD_ADDR_VAR 0 3
59258: PUSH
59259: LD_INT 22
59261: PUSH
59262: LD_OWVAR 2
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 25
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PPUSH
59285: CALL_OW 69
59289: ST_TO_ADDR
// if not tmp then
59290: LD_VAR 0 3
59294: NOT
59295: IFFALSE 59299
// exit ;
59297: GO 59355
// un := tmp [ rand ( 1 , tmp ) ] ;
59299: LD_ADDR_VAR 0 2
59303: PUSH
59304: LD_VAR 0 3
59308: PUSH
59309: LD_INT 1
59311: PPUSH
59312: LD_VAR 0 3
59316: PPUSH
59317: CALL_OW 12
59321: ARRAY
59322: ST_TO_ADDR
// if Crawls ( un ) then
59323: LD_VAR 0 2
59327: PPUSH
59328: CALL_OW 318
59332: IFFALSE 59343
// ComWalk ( un ) ;
59334: LD_VAR 0 2
59338: PPUSH
59339: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59343: LD_VAR 0 2
59347: PPUSH
59348: LD_INT 8
59350: PPUSH
59351: CALL_OW 336
// end ;
59355: PPOPN 3
59357: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59358: LD_EXP 110
59362: PUSH
59363: LD_EXP 154
59367: AND
59368: IFFALSE 59512
59370: GO 59372
59372: DISABLE
59373: LD_INT 0
59375: PPUSH
59376: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59377: LD_ADDR_VAR 0 2
59381: PUSH
59382: LD_INT 22
59384: PUSH
59385: LD_OWVAR 2
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 21
59396: PUSH
59397: LD_INT 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 2
59406: PUSH
59407: LD_INT 34
59409: PUSH
59410: LD_INT 12
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 34
59419: PUSH
59420: LD_INT 51
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 34
59429: PUSH
59430: LD_INT 32
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: LIST
59447: PPUSH
59448: CALL_OW 69
59452: ST_TO_ADDR
// if not tmp then
59453: LD_VAR 0 2
59457: NOT
59458: IFFALSE 59462
// exit ;
59460: GO 59512
// for i in tmp do
59462: LD_ADDR_VAR 0 1
59466: PUSH
59467: LD_VAR 0 2
59471: PUSH
59472: FOR_IN
59473: IFFALSE 59510
// if GetCargo ( i , mat_artifact ) = 0 then
59475: LD_VAR 0 1
59479: PPUSH
59480: LD_INT 4
59482: PPUSH
59483: CALL_OW 289
59487: PUSH
59488: LD_INT 0
59490: EQUAL
59491: IFFALSE 59508
// SetCargo ( i , mat_siberit , 100 ) ;
59493: LD_VAR 0 1
59497: PPUSH
59498: LD_INT 3
59500: PPUSH
59501: LD_INT 100
59503: PPUSH
59504: CALL_OW 290
59508: GO 59472
59510: POP
59511: POP
// end ;
59512: PPOPN 2
59514: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59515: LD_EXP 110
59519: PUSH
59520: LD_EXP 155
59524: AND
59525: IFFALSE 59708
59527: GO 59529
59529: DISABLE
59530: LD_INT 0
59532: PPUSH
59533: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59534: LD_ADDR_VAR 0 2
59538: PUSH
59539: LD_INT 22
59541: PUSH
59542: LD_OWVAR 2
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PPUSH
59551: CALL_OW 69
59555: ST_TO_ADDR
// if not tmp then
59556: LD_VAR 0 2
59560: NOT
59561: IFFALSE 59565
// exit ;
59563: GO 59708
// for i := 1 to 2 do
59565: LD_ADDR_VAR 0 1
59569: PUSH
59570: DOUBLE
59571: LD_INT 1
59573: DEC
59574: ST_TO_ADDR
59575: LD_INT 2
59577: PUSH
59578: FOR_TO
59579: IFFALSE 59706
// begin uc_side := your_side ;
59581: LD_ADDR_OWVAR 20
59585: PUSH
59586: LD_OWVAR 2
59590: ST_TO_ADDR
// uc_nation := nation_american ;
59591: LD_ADDR_OWVAR 21
59595: PUSH
59596: LD_INT 1
59598: ST_TO_ADDR
// vc_chassis := us_morphling ;
59599: LD_ADDR_OWVAR 37
59603: PUSH
59604: LD_INT 5
59606: ST_TO_ADDR
// vc_engine := engine_siberite ;
59607: LD_ADDR_OWVAR 39
59611: PUSH
59612: LD_INT 3
59614: ST_TO_ADDR
// vc_control := control_computer ;
59615: LD_ADDR_OWVAR 38
59619: PUSH
59620: LD_INT 3
59622: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59623: LD_ADDR_OWVAR 40
59627: PUSH
59628: LD_INT 10
59630: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59631: LD_VAR 0 2
59635: PUSH
59636: LD_INT 1
59638: ARRAY
59639: PPUSH
59640: CALL_OW 310
59644: NOT
59645: IFFALSE 59692
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59647: CALL_OW 45
59651: PPUSH
59652: LD_VAR 0 2
59656: PUSH
59657: LD_INT 1
59659: ARRAY
59660: PPUSH
59661: CALL_OW 250
59665: PPUSH
59666: LD_VAR 0 2
59670: PUSH
59671: LD_INT 1
59673: ARRAY
59674: PPUSH
59675: CALL_OW 251
59679: PPUSH
59680: LD_INT 12
59682: PPUSH
59683: LD_INT 1
59685: PPUSH
59686: CALL_OW 50
59690: GO 59704
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59692: CALL_OW 45
59696: PPUSH
59697: LD_INT 1
59699: PPUSH
59700: CALL_OW 51
// end ;
59704: GO 59578
59706: POP
59707: POP
// end ;
59708: PPOPN 2
59710: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59711: LD_EXP 110
59715: PUSH
59716: LD_EXP 156
59720: AND
59721: IFFALSE 59943
59723: GO 59725
59725: DISABLE
59726: LD_INT 0
59728: PPUSH
59729: PPUSH
59730: PPUSH
59731: PPUSH
59732: PPUSH
59733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59734: LD_ADDR_VAR 0 6
59738: PUSH
59739: LD_INT 22
59741: PUSH
59742: LD_OWVAR 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 21
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 3
59763: PUSH
59764: LD_INT 23
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: PPUSH
59783: CALL_OW 69
59787: ST_TO_ADDR
// if not tmp then
59788: LD_VAR 0 6
59792: NOT
59793: IFFALSE 59797
// exit ;
59795: GO 59943
// s1 := rand ( 1 , 4 ) ;
59797: LD_ADDR_VAR 0 2
59801: PUSH
59802: LD_INT 1
59804: PPUSH
59805: LD_INT 4
59807: PPUSH
59808: CALL_OW 12
59812: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59813: LD_ADDR_VAR 0 4
59817: PUSH
59818: LD_VAR 0 6
59822: PUSH
59823: LD_INT 1
59825: ARRAY
59826: PPUSH
59827: LD_VAR 0 2
59831: PPUSH
59832: CALL_OW 259
59836: ST_TO_ADDR
// if s1 = 1 then
59837: LD_VAR 0 2
59841: PUSH
59842: LD_INT 1
59844: EQUAL
59845: IFFALSE 59865
// s2 := rand ( 2 , 4 ) else
59847: LD_ADDR_VAR 0 3
59851: PUSH
59852: LD_INT 2
59854: PPUSH
59855: LD_INT 4
59857: PPUSH
59858: CALL_OW 12
59862: ST_TO_ADDR
59863: GO 59873
// s2 := 1 ;
59865: LD_ADDR_VAR 0 3
59869: PUSH
59870: LD_INT 1
59872: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59873: LD_ADDR_VAR 0 5
59877: PUSH
59878: LD_VAR 0 6
59882: PUSH
59883: LD_INT 1
59885: ARRAY
59886: PPUSH
59887: LD_VAR 0 3
59891: PPUSH
59892: CALL_OW 259
59896: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59897: LD_VAR 0 6
59901: PUSH
59902: LD_INT 1
59904: ARRAY
59905: PPUSH
59906: LD_VAR 0 2
59910: PPUSH
59911: LD_VAR 0 5
59915: PPUSH
59916: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59920: LD_VAR 0 6
59924: PUSH
59925: LD_INT 1
59927: ARRAY
59928: PPUSH
59929: LD_VAR 0 3
59933: PPUSH
59934: LD_VAR 0 4
59938: PPUSH
59939: CALL_OW 237
// end ;
59943: PPOPN 6
59945: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59946: LD_EXP 110
59950: PUSH
59951: LD_EXP 157
59955: AND
59956: IFFALSE 60035
59958: GO 59960
59960: DISABLE
59961: LD_INT 0
59963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59964: LD_ADDR_VAR 0 1
59968: PUSH
59969: LD_INT 22
59971: PUSH
59972: LD_OWVAR 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 30
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PPUSH
59995: CALL_OW 69
59999: ST_TO_ADDR
// if not tmp then
60000: LD_VAR 0 1
60004: NOT
60005: IFFALSE 60009
// exit ;
60007: GO 60035
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60009: LD_VAR 0 1
60013: PUSH
60014: LD_INT 1
60016: PPUSH
60017: LD_VAR 0 1
60021: PPUSH
60022: CALL_OW 12
60026: ARRAY
60027: PPUSH
60028: LD_INT 1
60030: PPUSH
60031: CALL_OW 234
// end ;
60035: PPOPN 1
60037: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60038: LD_EXP 110
60042: PUSH
60043: LD_EXP 158
60047: AND
60048: IFFALSE 60160
60050: GO 60052
60052: DISABLE
60053: LD_INT 0
60055: PPUSH
60056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60057: LD_ADDR_VAR 0 2
60061: PUSH
60062: LD_INT 22
60064: PUSH
60065: LD_OWVAR 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: LD_INT 30
60079: PUSH
60080: LD_INT 27
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 30
60089: PUSH
60090: LD_INT 26
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 30
60099: PUSH
60100: LD_INT 28
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PPUSH
60117: CALL_OW 69
60121: ST_TO_ADDR
// if not tmp then
60122: LD_VAR 0 2
60126: NOT
60127: IFFALSE 60131
// exit ;
60129: GO 60160
// for i in tmp do
60131: LD_ADDR_VAR 0 1
60135: PUSH
60136: LD_VAR 0 2
60140: PUSH
60141: FOR_IN
60142: IFFALSE 60158
// SetLives ( i , 1 ) ;
60144: LD_VAR 0 1
60148: PPUSH
60149: LD_INT 1
60151: PPUSH
60152: CALL_OW 234
60156: GO 60141
60158: POP
60159: POP
// end ;
60160: PPOPN 2
60162: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60163: LD_EXP 110
60167: PUSH
60168: LD_EXP 159
60172: AND
60173: IFFALSE 60460
60175: GO 60177
60177: DISABLE
60178: LD_INT 0
60180: PPUSH
60181: PPUSH
60182: PPUSH
// begin i := rand ( 1 , 7 ) ;
60183: LD_ADDR_VAR 0 1
60187: PUSH
60188: LD_INT 1
60190: PPUSH
60191: LD_INT 7
60193: PPUSH
60194: CALL_OW 12
60198: ST_TO_ADDR
// case i of 1 :
60199: LD_VAR 0 1
60203: PUSH
60204: LD_INT 1
60206: DOUBLE
60207: EQUAL
60208: IFTRUE 60212
60210: GO 60222
60212: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60213: LD_STRING earthquake(getX(game), 0, 32)
60215: PPUSH
60216: CALL_OW 559
60220: GO 60460
60222: LD_INT 2
60224: DOUBLE
60225: EQUAL
60226: IFTRUE 60230
60228: GO 60244
60230: POP
// begin ToLua ( displayStucuk(); ) ;
60231: LD_STRING displayStucuk();
60233: PPUSH
60234: CALL_OW 559
// ResetFog ;
60238: CALL_OW 335
// end ; 3 :
60242: GO 60460
60244: LD_INT 3
60246: DOUBLE
60247: EQUAL
60248: IFTRUE 60252
60250: GO 60356
60252: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60253: LD_ADDR_VAR 0 2
60257: PUSH
60258: LD_INT 22
60260: PUSH
60261: LD_OWVAR 2
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 25
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PPUSH
60284: CALL_OW 69
60288: ST_TO_ADDR
// if not tmp then
60289: LD_VAR 0 2
60293: NOT
60294: IFFALSE 60298
// exit ;
60296: GO 60460
// un := tmp [ rand ( 1 , tmp ) ] ;
60298: LD_ADDR_VAR 0 3
60302: PUSH
60303: LD_VAR 0 2
60307: PUSH
60308: LD_INT 1
60310: PPUSH
60311: LD_VAR 0 2
60315: PPUSH
60316: CALL_OW 12
60320: ARRAY
60321: ST_TO_ADDR
// if Crawls ( un ) then
60322: LD_VAR 0 3
60326: PPUSH
60327: CALL_OW 318
60331: IFFALSE 60342
// ComWalk ( un ) ;
60333: LD_VAR 0 3
60337: PPUSH
60338: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60342: LD_VAR 0 3
60346: PPUSH
60347: LD_INT 8
60349: PPUSH
60350: CALL_OW 336
// end ; 4 :
60354: GO 60460
60356: LD_INT 4
60358: DOUBLE
60359: EQUAL
60360: IFTRUE 60364
60362: GO 60438
60364: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60365: LD_ADDR_VAR 0 2
60369: PUSH
60370: LD_INT 22
60372: PUSH
60373: LD_OWVAR 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 30
60384: PUSH
60385: LD_INT 29
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PPUSH
60396: CALL_OW 69
60400: ST_TO_ADDR
// if not tmp then
60401: LD_VAR 0 2
60405: NOT
60406: IFFALSE 60410
// exit ;
60408: GO 60460
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60410: LD_VAR 0 2
60414: PUSH
60415: LD_INT 1
60417: ARRAY
60418: PPUSH
60419: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60423: LD_VAR 0 2
60427: PUSH
60428: LD_INT 1
60430: ARRAY
60431: PPUSH
60432: CALL_OW 65
// end ; 5 .. 7 :
60436: GO 60460
60438: LD_INT 5
60440: DOUBLE
60441: GREATEREQUAL
60442: IFFALSE 60450
60444: LD_INT 7
60446: DOUBLE
60447: LESSEQUAL
60448: IFTRUE 60452
60450: GO 60459
60452: POP
// StreamSibBomb ; end ;
60453: CALL 56697 0 0
60457: GO 60460
60459: POP
// end ;
60460: PPOPN 3
60462: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60463: LD_EXP 110
60467: PUSH
60468: LD_EXP 160
60472: AND
60473: IFFALSE 60629
60475: GO 60477
60477: DISABLE
60478: LD_INT 0
60480: PPUSH
60481: PPUSH
60482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60483: LD_ADDR_VAR 0 2
60487: PUSH
60488: LD_INT 81
60490: PUSH
60491: LD_OWVAR 2
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 21
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 21
60515: PUSH
60516: LD_INT 2
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PPUSH
60532: CALL_OW 69
60536: ST_TO_ADDR
// if not tmp then
60537: LD_VAR 0 2
60541: NOT
60542: IFFALSE 60546
// exit ;
60544: GO 60629
// p := 0 ;
60546: LD_ADDR_VAR 0 3
60550: PUSH
60551: LD_INT 0
60553: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60554: LD_INT 35
60556: PPUSH
60557: CALL_OW 67
// p := p + 1 ;
60561: LD_ADDR_VAR 0 3
60565: PUSH
60566: LD_VAR 0 3
60570: PUSH
60571: LD_INT 1
60573: PLUS
60574: ST_TO_ADDR
// for i in tmp do
60575: LD_ADDR_VAR 0 1
60579: PUSH
60580: LD_VAR 0 2
60584: PUSH
60585: FOR_IN
60586: IFFALSE 60617
// if GetLives ( i ) < 1000 then
60588: LD_VAR 0 1
60592: PPUSH
60593: CALL_OW 256
60597: PUSH
60598: LD_INT 1000
60600: LESS
60601: IFFALSE 60615
// SetLives ( i , 1000 ) ;
60603: LD_VAR 0 1
60607: PPUSH
60608: LD_INT 1000
60610: PPUSH
60611: CALL_OW 234
60615: GO 60585
60617: POP
60618: POP
// until p > 20 ;
60619: LD_VAR 0 3
60623: PUSH
60624: LD_INT 20
60626: GREATER
60627: IFFALSE 60554
// end ;
60629: PPOPN 3
60631: END
// every 0 0$1 trigger StreamModeActive and sTime do
60632: LD_EXP 110
60636: PUSH
60637: LD_EXP 161
60641: AND
60642: IFFALSE 60677
60644: GO 60646
60646: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60647: LD_INT 28
60649: PPUSH
60650: LD_OWVAR 2
60654: PPUSH
60655: LD_INT 2
60657: PPUSH
60658: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60662: LD_INT 30
60664: PPUSH
60665: LD_OWVAR 2
60669: PPUSH
60670: LD_INT 2
60672: PPUSH
60673: CALL_OW 322
// end ;
60677: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60678: LD_EXP 110
60682: PUSH
60683: LD_EXP 162
60687: AND
60688: IFFALSE 60809
60690: GO 60692
60692: DISABLE
60693: LD_INT 0
60695: PPUSH
60696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60697: LD_ADDR_VAR 0 2
60701: PUSH
60702: LD_INT 22
60704: PUSH
60705: LD_OWVAR 2
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 21
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: LD_INT 23
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: LIST
60745: PPUSH
60746: CALL_OW 69
60750: ST_TO_ADDR
// if not tmp then
60751: LD_VAR 0 2
60755: NOT
60756: IFFALSE 60760
// exit ;
60758: GO 60809
// for i in tmp do
60760: LD_ADDR_VAR 0 1
60764: PUSH
60765: LD_VAR 0 2
60769: PUSH
60770: FOR_IN
60771: IFFALSE 60807
// begin if Crawls ( i ) then
60773: LD_VAR 0 1
60777: PPUSH
60778: CALL_OW 318
60782: IFFALSE 60793
// ComWalk ( i ) ;
60784: LD_VAR 0 1
60788: PPUSH
60789: CALL_OW 138
// SetClass ( i , 2 ) ;
60793: LD_VAR 0 1
60797: PPUSH
60798: LD_INT 2
60800: PPUSH
60801: CALL_OW 336
// end ;
60805: GO 60770
60807: POP
60808: POP
// end ;
60809: PPOPN 2
60811: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60812: LD_EXP 110
60816: PUSH
60817: LD_EXP 163
60821: AND
60822: IFFALSE 61110
60824: GO 60826
60826: DISABLE
60827: LD_INT 0
60829: PPUSH
60830: PPUSH
60831: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60832: LD_OWVAR 2
60836: PPUSH
60837: LD_INT 9
60839: PPUSH
60840: LD_INT 1
60842: PPUSH
60843: LD_INT 1
60845: PPUSH
60846: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60850: LD_INT 9
60852: PPUSH
60853: LD_OWVAR 2
60857: PPUSH
60858: CALL_OW 343
// uc_side := 9 ;
60862: LD_ADDR_OWVAR 20
60866: PUSH
60867: LD_INT 9
60869: ST_TO_ADDR
// uc_nation := 2 ;
60870: LD_ADDR_OWVAR 21
60874: PUSH
60875: LD_INT 2
60877: ST_TO_ADDR
// hc_name := Dark Warrior ;
60878: LD_ADDR_OWVAR 26
60882: PUSH
60883: LD_STRING Dark Warrior
60885: ST_TO_ADDR
// hc_gallery :=  ;
60886: LD_ADDR_OWVAR 33
60890: PUSH
60891: LD_STRING 
60893: ST_TO_ADDR
// hc_noskilllimit := true ;
60894: LD_ADDR_OWVAR 76
60898: PUSH
60899: LD_INT 1
60901: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60902: LD_ADDR_OWVAR 31
60906: PUSH
60907: LD_INT 30
60909: PUSH
60910: LD_INT 30
60912: PUSH
60913: LD_INT 30
60915: PUSH
60916: LD_INT 30
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: ST_TO_ADDR
// un := CreateHuman ;
60925: LD_ADDR_VAR 0 3
60929: PUSH
60930: CALL_OW 44
60934: ST_TO_ADDR
// hc_noskilllimit := false ;
60935: LD_ADDR_OWVAR 76
60939: PUSH
60940: LD_INT 0
60942: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60943: LD_VAR 0 3
60947: PPUSH
60948: LD_INT 1
60950: PPUSH
60951: CALL_OW 51
// ToLua ( playRanger() ) ;
60955: LD_STRING playRanger()
60957: PPUSH
60958: CALL_OW 559
// p := 0 ;
60962: LD_ADDR_VAR 0 2
60966: PUSH
60967: LD_INT 0
60969: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60970: LD_INT 35
60972: PPUSH
60973: CALL_OW 67
// p := p + 1 ;
60977: LD_ADDR_VAR 0 2
60981: PUSH
60982: LD_VAR 0 2
60986: PUSH
60987: LD_INT 1
60989: PLUS
60990: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60991: LD_VAR 0 3
60995: PPUSH
60996: CALL_OW 256
61000: PUSH
61001: LD_INT 1000
61003: LESS
61004: IFFALSE 61018
// SetLives ( un , 1000 ) ;
61006: LD_VAR 0 3
61010: PPUSH
61011: LD_INT 1000
61013: PPUSH
61014: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61018: LD_VAR 0 3
61022: PPUSH
61023: LD_INT 81
61025: PUSH
61026: LD_OWVAR 2
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 91
61037: PUSH
61038: LD_VAR 0 3
61042: PUSH
61043: LD_INT 30
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PPUSH
61055: CALL_OW 69
61059: PPUSH
61060: LD_VAR 0 3
61064: PPUSH
61065: CALL_OW 74
61069: PPUSH
61070: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61074: LD_VAR 0 2
61078: PUSH
61079: LD_INT 80
61081: GREATER
61082: PUSH
61083: LD_VAR 0 3
61087: PPUSH
61088: CALL_OW 301
61092: OR
61093: IFFALSE 60970
// if un then
61095: LD_VAR 0 3
61099: IFFALSE 61110
// RemoveUnit ( un ) ;
61101: LD_VAR 0 3
61105: PPUSH
61106: CALL_OW 64
// end ;
61110: PPOPN 3
61112: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61113: LD_EXP 164
61117: IFFALSE 61233
61119: GO 61121
61121: DISABLE
61122: LD_INT 0
61124: PPUSH
61125: PPUSH
61126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61127: LD_ADDR_VAR 0 2
61131: PUSH
61132: LD_INT 81
61134: PUSH
61135: LD_OWVAR 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 21
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PPUSH
61158: CALL_OW 69
61162: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61163: LD_STRING playComputer()
61165: PPUSH
61166: CALL_OW 559
// if not tmp then
61170: LD_VAR 0 2
61174: NOT
61175: IFFALSE 61179
// exit ;
61177: GO 61233
// for i in tmp do
61179: LD_ADDR_VAR 0 1
61183: PUSH
61184: LD_VAR 0 2
61188: PUSH
61189: FOR_IN
61190: IFFALSE 61231
// for j := 1 to 4 do
61192: LD_ADDR_VAR 0 3
61196: PUSH
61197: DOUBLE
61198: LD_INT 1
61200: DEC
61201: ST_TO_ADDR
61202: LD_INT 4
61204: PUSH
61205: FOR_TO
61206: IFFALSE 61227
// SetSkill ( i , j , 10 ) ;
61208: LD_VAR 0 1
61212: PPUSH
61213: LD_VAR 0 3
61217: PPUSH
61218: LD_INT 10
61220: PPUSH
61221: CALL_OW 237
61225: GO 61205
61227: POP
61228: POP
61229: GO 61189
61231: POP
61232: POP
// end ;
61233: PPOPN 3
61235: END
// every 0 0$1 trigger s30 do var i , tmp ;
61236: LD_EXP 165
61240: IFFALSE 61309
61242: GO 61244
61244: DISABLE
61245: LD_INT 0
61247: PPUSH
61248: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61249: LD_ADDR_VAR 0 2
61253: PUSH
61254: LD_INT 22
61256: PUSH
61257: LD_OWVAR 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PPUSH
61266: CALL_OW 69
61270: ST_TO_ADDR
// if not tmp then
61271: LD_VAR 0 2
61275: NOT
61276: IFFALSE 61280
// exit ;
61278: GO 61309
// for i in tmp do
61280: LD_ADDR_VAR 0 1
61284: PUSH
61285: LD_VAR 0 2
61289: PUSH
61290: FOR_IN
61291: IFFALSE 61307
// SetLives ( i , 300 ) ;
61293: LD_VAR 0 1
61297: PPUSH
61298: LD_INT 300
61300: PPUSH
61301: CALL_OW 234
61305: GO 61290
61307: POP
61308: POP
// end ;
61309: PPOPN 2
61311: END
// every 0 0$1 trigger s60 do var i , tmp ;
61312: LD_EXP 166
61316: IFFALSE 61385
61318: GO 61320
61320: DISABLE
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61325: LD_ADDR_VAR 0 2
61329: PUSH
61330: LD_INT 22
61332: PUSH
61333: LD_OWVAR 2
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PPUSH
61342: CALL_OW 69
61346: ST_TO_ADDR
// if not tmp then
61347: LD_VAR 0 2
61351: NOT
61352: IFFALSE 61356
// exit ;
61354: GO 61385
// for i in tmp do
61356: LD_ADDR_VAR 0 1
61360: PUSH
61361: LD_VAR 0 2
61365: PUSH
61366: FOR_IN
61367: IFFALSE 61383
// SetLives ( i , 600 ) ;
61369: LD_VAR 0 1
61373: PPUSH
61374: LD_INT 600
61376: PPUSH
61377: CALL_OW 234
61381: GO 61366
61383: POP
61384: POP
// end ;
61385: PPOPN 2
61387: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61388: LD_INT 0
61390: PPUSH
// case cmd of 301 :
61391: LD_VAR 0 1
61395: PUSH
61396: LD_INT 301
61398: DOUBLE
61399: EQUAL
61400: IFTRUE 61404
61402: GO 61436
61404: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61405: LD_VAR 0 6
61409: PPUSH
61410: LD_VAR 0 7
61414: PPUSH
61415: LD_VAR 0 8
61419: PPUSH
61420: LD_VAR 0 4
61424: PPUSH
61425: LD_VAR 0 5
61429: PPUSH
61430: CALL 62637 0 5
61434: GO 61557
61436: LD_INT 302
61438: DOUBLE
61439: EQUAL
61440: IFTRUE 61444
61442: GO 61481
61444: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61445: LD_VAR 0 6
61449: PPUSH
61450: LD_VAR 0 7
61454: PPUSH
61455: LD_VAR 0 8
61459: PPUSH
61460: LD_VAR 0 9
61464: PPUSH
61465: LD_VAR 0 4
61469: PPUSH
61470: LD_VAR 0 5
61474: PPUSH
61475: CALL 62728 0 6
61479: GO 61557
61481: LD_INT 303
61483: DOUBLE
61484: EQUAL
61485: IFTRUE 61489
61487: GO 61526
61489: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61490: LD_VAR 0 6
61494: PPUSH
61495: LD_VAR 0 7
61499: PPUSH
61500: LD_VAR 0 8
61504: PPUSH
61505: LD_VAR 0 9
61509: PPUSH
61510: LD_VAR 0 4
61514: PPUSH
61515: LD_VAR 0 5
61519: PPUSH
61520: CALL 61562 0 6
61524: GO 61557
61526: LD_INT 304
61528: DOUBLE
61529: EQUAL
61530: IFTRUE 61534
61532: GO 61556
61534: POP
// hHackTeleport ( unit , x , y ) ; end ;
61535: LD_VAR 0 2
61539: PPUSH
61540: LD_VAR 0 4
61544: PPUSH
61545: LD_VAR 0 5
61549: PPUSH
61550: CALL 63321 0 3
61554: GO 61557
61556: POP
// end ;
61557: LD_VAR 0 12
61561: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61562: LD_INT 0
61564: PPUSH
61565: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61566: LD_VAR 0 1
61570: PUSH
61571: LD_INT 1
61573: LESS
61574: PUSH
61575: LD_VAR 0 1
61579: PUSH
61580: LD_INT 3
61582: GREATER
61583: OR
61584: PUSH
61585: LD_VAR 0 5
61589: PPUSH
61590: LD_VAR 0 6
61594: PPUSH
61595: CALL_OW 428
61599: OR
61600: IFFALSE 61604
// exit ;
61602: GO 62324
// uc_side := your_side ;
61604: LD_ADDR_OWVAR 20
61608: PUSH
61609: LD_OWVAR 2
61613: ST_TO_ADDR
// uc_nation := nation ;
61614: LD_ADDR_OWVAR 21
61618: PUSH
61619: LD_VAR 0 1
61623: ST_TO_ADDR
// bc_level = 1 ;
61624: LD_ADDR_OWVAR 43
61628: PUSH
61629: LD_INT 1
61631: ST_TO_ADDR
// case btype of 1 :
61632: LD_VAR 0 2
61636: PUSH
61637: LD_INT 1
61639: DOUBLE
61640: EQUAL
61641: IFTRUE 61645
61643: GO 61656
61645: POP
// bc_type := b_depot ; 2 :
61646: LD_ADDR_OWVAR 42
61650: PUSH
61651: LD_INT 0
61653: ST_TO_ADDR
61654: GO 62268
61656: LD_INT 2
61658: DOUBLE
61659: EQUAL
61660: IFTRUE 61664
61662: GO 61675
61664: POP
// bc_type := b_warehouse ; 3 :
61665: LD_ADDR_OWVAR 42
61669: PUSH
61670: LD_INT 1
61672: ST_TO_ADDR
61673: GO 62268
61675: LD_INT 3
61677: DOUBLE
61678: EQUAL
61679: IFTRUE 61683
61681: GO 61694
61683: POP
// bc_type := b_lab ; 4 .. 9 :
61684: LD_ADDR_OWVAR 42
61688: PUSH
61689: LD_INT 6
61691: ST_TO_ADDR
61692: GO 62268
61694: LD_INT 4
61696: DOUBLE
61697: GREATEREQUAL
61698: IFFALSE 61706
61700: LD_INT 9
61702: DOUBLE
61703: LESSEQUAL
61704: IFTRUE 61708
61706: GO 61760
61708: POP
// begin bc_type := b_lab_half ;
61709: LD_ADDR_OWVAR 42
61713: PUSH
61714: LD_INT 7
61716: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61717: LD_ADDR_OWVAR 44
61721: PUSH
61722: LD_INT 10
61724: PUSH
61725: LD_INT 11
61727: PUSH
61728: LD_INT 12
61730: PUSH
61731: LD_INT 15
61733: PUSH
61734: LD_INT 14
61736: PUSH
61737: LD_INT 13
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: PUSH
61748: LD_VAR 0 2
61752: PUSH
61753: LD_INT 3
61755: MINUS
61756: ARRAY
61757: ST_TO_ADDR
// end ; 10 .. 13 :
61758: GO 62268
61760: LD_INT 10
61762: DOUBLE
61763: GREATEREQUAL
61764: IFFALSE 61772
61766: LD_INT 13
61768: DOUBLE
61769: LESSEQUAL
61770: IFTRUE 61774
61772: GO 61851
61774: POP
// begin bc_type := b_lab_full ;
61775: LD_ADDR_OWVAR 42
61779: PUSH
61780: LD_INT 8
61782: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61783: LD_ADDR_OWVAR 44
61787: PUSH
61788: LD_INT 10
61790: PUSH
61791: LD_INT 12
61793: PUSH
61794: LD_INT 14
61796: PUSH
61797: LD_INT 13
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: PUSH
61806: LD_VAR 0 2
61810: PUSH
61811: LD_INT 9
61813: MINUS
61814: ARRAY
61815: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61816: LD_ADDR_OWVAR 45
61820: PUSH
61821: LD_INT 11
61823: PUSH
61824: LD_INT 15
61826: PUSH
61827: LD_INT 12
61829: PUSH
61830: LD_INT 15
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: PUSH
61839: LD_VAR 0 2
61843: PUSH
61844: LD_INT 9
61846: MINUS
61847: ARRAY
61848: ST_TO_ADDR
// end ; 14 :
61849: GO 62268
61851: LD_INT 14
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61859
61857: GO 61870
61859: POP
// bc_type := b_workshop ; 15 :
61860: LD_ADDR_OWVAR 42
61864: PUSH
61865: LD_INT 2
61867: ST_TO_ADDR
61868: GO 62268
61870: LD_INT 15
61872: DOUBLE
61873: EQUAL
61874: IFTRUE 61878
61876: GO 61889
61878: POP
// bc_type := b_factory ; 16 :
61879: LD_ADDR_OWVAR 42
61883: PUSH
61884: LD_INT 3
61886: ST_TO_ADDR
61887: GO 62268
61889: LD_INT 16
61891: DOUBLE
61892: EQUAL
61893: IFTRUE 61897
61895: GO 61908
61897: POP
// bc_type := b_ext_gun ; 17 :
61898: LD_ADDR_OWVAR 42
61902: PUSH
61903: LD_INT 17
61905: ST_TO_ADDR
61906: GO 62268
61908: LD_INT 17
61910: DOUBLE
61911: EQUAL
61912: IFTRUE 61916
61914: GO 61944
61916: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61917: LD_ADDR_OWVAR 42
61921: PUSH
61922: LD_INT 19
61924: PUSH
61925: LD_INT 23
61927: PUSH
61928: LD_INT 19
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: LIST
61935: PUSH
61936: LD_VAR 0 1
61940: ARRAY
61941: ST_TO_ADDR
61942: GO 62268
61944: LD_INT 18
61946: DOUBLE
61947: EQUAL
61948: IFTRUE 61952
61950: GO 61963
61952: POP
// bc_type := b_ext_radar ; 19 :
61953: LD_ADDR_OWVAR 42
61957: PUSH
61958: LD_INT 20
61960: ST_TO_ADDR
61961: GO 62268
61963: LD_INT 19
61965: DOUBLE
61966: EQUAL
61967: IFTRUE 61971
61969: GO 61982
61971: POP
// bc_type := b_ext_radio ; 20 :
61972: LD_ADDR_OWVAR 42
61976: PUSH
61977: LD_INT 22
61979: ST_TO_ADDR
61980: GO 62268
61982: LD_INT 20
61984: DOUBLE
61985: EQUAL
61986: IFTRUE 61990
61988: GO 62001
61990: POP
// bc_type := b_ext_siberium ; 21 :
61991: LD_ADDR_OWVAR 42
61995: PUSH
61996: LD_INT 21
61998: ST_TO_ADDR
61999: GO 62268
62001: LD_INT 21
62003: DOUBLE
62004: EQUAL
62005: IFTRUE 62009
62007: GO 62020
62009: POP
// bc_type := b_ext_computer ; 22 :
62010: LD_ADDR_OWVAR 42
62014: PUSH
62015: LD_INT 24
62017: ST_TO_ADDR
62018: GO 62268
62020: LD_INT 22
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62028
62026: GO 62039
62028: POP
// bc_type := b_ext_track ; 23 :
62029: LD_ADDR_OWVAR 42
62033: PUSH
62034: LD_INT 16
62036: ST_TO_ADDR
62037: GO 62268
62039: LD_INT 23
62041: DOUBLE
62042: EQUAL
62043: IFTRUE 62047
62045: GO 62058
62047: POP
// bc_type := b_ext_laser ; 24 :
62048: LD_ADDR_OWVAR 42
62052: PUSH
62053: LD_INT 25
62055: ST_TO_ADDR
62056: GO 62268
62058: LD_INT 24
62060: DOUBLE
62061: EQUAL
62062: IFTRUE 62066
62064: GO 62077
62066: POP
// bc_type := b_control_tower ; 25 :
62067: LD_ADDR_OWVAR 42
62071: PUSH
62072: LD_INT 36
62074: ST_TO_ADDR
62075: GO 62268
62077: LD_INT 25
62079: DOUBLE
62080: EQUAL
62081: IFTRUE 62085
62083: GO 62096
62085: POP
// bc_type := b_breastwork ; 26 :
62086: LD_ADDR_OWVAR 42
62090: PUSH
62091: LD_INT 31
62093: ST_TO_ADDR
62094: GO 62268
62096: LD_INT 26
62098: DOUBLE
62099: EQUAL
62100: IFTRUE 62104
62102: GO 62115
62104: POP
// bc_type := b_bunker ; 27 :
62105: LD_ADDR_OWVAR 42
62109: PUSH
62110: LD_INT 32
62112: ST_TO_ADDR
62113: GO 62268
62115: LD_INT 27
62117: DOUBLE
62118: EQUAL
62119: IFTRUE 62123
62121: GO 62134
62123: POP
// bc_type := b_turret ; 28 :
62124: LD_ADDR_OWVAR 42
62128: PUSH
62129: LD_INT 33
62131: ST_TO_ADDR
62132: GO 62268
62134: LD_INT 28
62136: DOUBLE
62137: EQUAL
62138: IFTRUE 62142
62140: GO 62153
62142: POP
// bc_type := b_armoury ; 29 :
62143: LD_ADDR_OWVAR 42
62147: PUSH
62148: LD_INT 4
62150: ST_TO_ADDR
62151: GO 62268
62153: LD_INT 29
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62161
62159: GO 62172
62161: POP
// bc_type := b_barracks ; 30 :
62162: LD_ADDR_OWVAR 42
62166: PUSH
62167: LD_INT 5
62169: ST_TO_ADDR
62170: GO 62268
62172: LD_INT 30
62174: DOUBLE
62175: EQUAL
62176: IFTRUE 62180
62178: GO 62191
62180: POP
// bc_type := b_solar_power ; 31 :
62181: LD_ADDR_OWVAR 42
62185: PUSH
62186: LD_INT 27
62188: ST_TO_ADDR
62189: GO 62268
62191: LD_INT 31
62193: DOUBLE
62194: EQUAL
62195: IFTRUE 62199
62197: GO 62210
62199: POP
// bc_type := b_oil_power ; 32 :
62200: LD_ADDR_OWVAR 42
62204: PUSH
62205: LD_INT 26
62207: ST_TO_ADDR
62208: GO 62268
62210: LD_INT 32
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62218
62216: GO 62229
62218: POP
// bc_type := b_siberite_power ; 33 :
62219: LD_ADDR_OWVAR 42
62223: PUSH
62224: LD_INT 28
62226: ST_TO_ADDR
62227: GO 62268
62229: LD_INT 33
62231: DOUBLE
62232: EQUAL
62233: IFTRUE 62237
62235: GO 62248
62237: POP
// bc_type := b_oil_mine ; 34 :
62238: LD_ADDR_OWVAR 42
62242: PUSH
62243: LD_INT 29
62245: ST_TO_ADDR
62246: GO 62268
62248: LD_INT 34
62250: DOUBLE
62251: EQUAL
62252: IFTRUE 62256
62254: GO 62267
62256: POP
// bc_type := b_siberite_mine ; end ;
62257: LD_ADDR_OWVAR 42
62261: PUSH
62262: LD_INT 30
62264: ST_TO_ADDR
62265: GO 62268
62267: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62268: LD_ADDR_VAR 0 8
62272: PUSH
62273: LD_VAR 0 5
62277: PPUSH
62278: LD_VAR 0 6
62282: PPUSH
62283: LD_VAR 0 3
62287: PPUSH
62288: CALL_OW 47
62292: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62293: LD_OWVAR 42
62297: PUSH
62298: LD_INT 32
62300: PUSH
62301: LD_INT 33
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: IN
62308: IFFALSE 62324
// PlaceWeaponTurret ( b , weapon ) ;
62310: LD_VAR 0 8
62314: PPUSH
62315: LD_VAR 0 4
62319: PPUSH
62320: CALL_OW 431
// end ;
62324: LD_VAR 0 7
62328: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62329: LD_INT 0
62331: PPUSH
62332: PPUSH
62333: PPUSH
62334: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62335: LD_ADDR_VAR 0 4
62339: PUSH
62340: LD_INT 22
62342: PUSH
62343: LD_OWVAR 2
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 30
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 30
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PPUSH
62384: CALL_OW 69
62388: ST_TO_ADDR
// if not tmp then
62389: LD_VAR 0 4
62393: NOT
62394: IFFALSE 62398
// exit ;
62396: GO 62457
// for i in tmp do
62398: LD_ADDR_VAR 0 2
62402: PUSH
62403: LD_VAR 0 4
62407: PUSH
62408: FOR_IN
62409: IFFALSE 62455
// for j = 1 to 3 do
62411: LD_ADDR_VAR 0 3
62415: PUSH
62416: DOUBLE
62417: LD_INT 1
62419: DEC
62420: ST_TO_ADDR
62421: LD_INT 3
62423: PUSH
62424: FOR_TO
62425: IFFALSE 62451
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62427: LD_VAR 0 2
62431: PPUSH
62432: CALL_OW 274
62436: PPUSH
62437: LD_VAR 0 3
62441: PPUSH
62442: LD_INT 99999
62444: PPUSH
62445: CALL_OW 277
62449: GO 62424
62451: POP
62452: POP
62453: GO 62408
62455: POP
62456: POP
// end ;
62457: LD_VAR 0 1
62461: RET
// export function hHackSetLevel10 ; var i , j ; begin
62462: LD_INT 0
62464: PPUSH
62465: PPUSH
62466: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62467: LD_ADDR_VAR 0 2
62471: PUSH
62472: LD_INT 21
62474: PUSH
62475: LD_INT 1
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PPUSH
62482: CALL_OW 69
62486: PUSH
62487: FOR_IN
62488: IFFALSE 62540
// if IsSelected ( i ) then
62490: LD_VAR 0 2
62494: PPUSH
62495: CALL_OW 306
62499: IFFALSE 62538
// begin for j := 1 to 4 do
62501: LD_ADDR_VAR 0 3
62505: PUSH
62506: DOUBLE
62507: LD_INT 1
62509: DEC
62510: ST_TO_ADDR
62511: LD_INT 4
62513: PUSH
62514: FOR_TO
62515: IFFALSE 62536
// SetSkill ( i , j , 10 ) ;
62517: LD_VAR 0 2
62521: PPUSH
62522: LD_VAR 0 3
62526: PPUSH
62527: LD_INT 10
62529: PPUSH
62530: CALL_OW 237
62534: GO 62514
62536: POP
62537: POP
// end ;
62538: GO 62487
62540: POP
62541: POP
// end ;
62542: LD_VAR 0 1
62546: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62547: LD_INT 0
62549: PPUSH
62550: PPUSH
62551: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62552: LD_ADDR_VAR 0 2
62556: PUSH
62557: LD_INT 22
62559: PUSH
62560: LD_OWVAR 2
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 21
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PPUSH
62583: CALL_OW 69
62587: PUSH
62588: FOR_IN
62589: IFFALSE 62630
// begin for j := 1 to 4 do
62591: LD_ADDR_VAR 0 3
62595: PUSH
62596: DOUBLE
62597: LD_INT 1
62599: DEC
62600: ST_TO_ADDR
62601: LD_INT 4
62603: PUSH
62604: FOR_TO
62605: IFFALSE 62626
// SetSkill ( i , j , 10 ) ;
62607: LD_VAR 0 2
62611: PPUSH
62612: LD_VAR 0 3
62616: PPUSH
62617: LD_INT 10
62619: PPUSH
62620: CALL_OW 237
62624: GO 62604
62626: POP
62627: POP
// end ;
62628: GO 62588
62630: POP
62631: POP
// end ;
62632: LD_VAR 0 1
62636: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62637: LD_INT 0
62639: PPUSH
// uc_side := your_side ;
62640: LD_ADDR_OWVAR 20
62644: PUSH
62645: LD_OWVAR 2
62649: ST_TO_ADDR
// uc_nation := nation ;
62650: LD_ADDR_OWVAR 21
62654: PUSH
62655: LD_VAR 0 1
62659: ST_TO_ADDR
// InitHc ;
62660: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62664: LD_INT 0
62666: PPUSH
62667: LD_VAR 0 2
62671: PPUSH
62672: LD_VAR 0 3
62676: PPUSH
62677: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62681: LD_VAR 0 4
62685: PPUSH
62686: LD_VAR 0 5
62690: PPUSH
62691: CALL_OW 428
62695: PUSH
62696: LD_INT 0
62698: EQUAL
62699: IFFALSE 62723
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62701: CALL_OW 44
62705: PPUSH
62706: LD_VAR 0 4
62710: PPUSH
62711: LD_VAR 0 5
62715: PPUSH
62716: LD_INT 1
62718: PPUSH
62719: CALL_OW 48
// end ;
62723: LD_VAR 0 6
62727: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62728: LD_INT 0
62730: PPUSH
62731: PPUSH
// uc_side := your_side ;
62732: LD_ADDR_OWVAR 20
62736: PUSH
62737: LD_OWVAR 2
62741: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62742: LD_VAR 0 1
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: LD_INT 4
62758: PUSH
62759: LD_INT 5
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: IN
62769: IFFALSE 62781
// uc_nation := nation_american else
62771: LD_ADDR_OWVAR 21
62775: PUSH
62776: LD_INT 1
62778: ST_TO_ADDR
62779: GO 62824
// if chassis in [ 11 , 12 , 13 , 14 ] then
62781: LD_VAR 0 1
62785: PUSH
62786: LD_INT 11
62788: PUSH
62789: LD_INT 12
62791: PUSH
62792: LD_INT 13
62794: PUSH
62795: LD_INT 14
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: IN
62804: IFFALSE 62816
// uc_nation := nation_arabian else
62806: LD_ADDR_OWVAR 21
62810: PUSH
62811: LD_INT 2
62813: ST_TO_ADDR
62814: GO 62824
// uc_nation := nation_russian ;
62816: LD_ADDR_OWVAR 21
62820: PUSH
62821: LD_INT 3
62823: ST_TO_ADDR
// vc_chassis := chassis ;
62824: LD_ADDR_OWVAR 37
62828: PUSH
62829: LD_VAR 0 1
62833: ST_TO_ADDR
// vc_engine := engine ;
62834: LD_ADDR_OWVAR 39
62838: PUSH
62839: LD_VAR 0 2
62843: ST_TO_ADDR
// vc_control := control ;
62844: LD_ADDR_OWVAR 38
62848: PUSH
62849: LD_VAR 0 3
62853: ST_TO_ADDR
// vc_weapon := weapon ;
62854: LD_ADDR_OWVAR 40
62858: PUSH
62859: LD_VAR 0 4
62863: ST_TO_ADDR
// un := CreateVehicle ;
62864: LD_ADDR_VAR 0 8
62868: PUSH
62869: CALL_OW 45
62873: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62874: LD_VAR 0 8
62878: PPUSH
62879: LD_INT 0
62881: PPUSH
62882: LD_INT 5
62884: PPUSH
62885: CALL_OW 12
62889: PPUSH
62890: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62894: LD_VAR 0 8
62898: PPUSH
62899: LD_VAR 0 5
62903: PPUSH
62904: LD_VAR 0 6
62908: PPUSH
62909: LD_INT 1
62911: PPUSH
62912: CALL_OW 48
// end ;
62916: LD_VAR 0 7
62920: RET
// export hInvincible ; every 1 do
62921: GO 62923
62923: DISABLE
// hInvincible := [ ] ;
62924: LD_ADDR_EXP 167
62928: PUSH
62929: EMPTY
62930: ST_TO_ADDR
62931: END
// every 10 do var i ;
62932: GO 62934
62934: DISABLE
62935: LD_INT 0
62937: PPUSH
// begin enable ;
62938: ENABLE
// if not hInvincible then
62939: LD_EXP 167
62943: NOT
62944: IFFALSE 62948
// exit ;
62946: GO 62992
// for i in hInvincible do
62948: LD_ADDR_VAR 0 1
62952: PUSH
62953: LD_EXP 167
62957: PUSH
62958: FOR_IN
62959: IFFALSE 62990
// if GetLives ( i ) < 1000 then
62961: LD_VAR 0 1
62965: PPUSH
62966: CALL_OW 256
62970: PUSH
62971: LD_INT 1000
62973: LESS
62974: IFFALSE 62988
// SetLives ( i , 1000 ) ;
62976: LD_VAR 0 1
62980: PPUSH
62981: LD_INT 1000
62983: PPUSH
62984: CALL_OW 234
62988: GO 62958
62990: POP
62991: POP
// end ;
62992: PPOPN 1
62994: END
// export function hHackInvincible ; var i ; begin
62995: LD_INT 0
62997: PPUSH
62998: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62999: LD_ADDR_VAR 0 2
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: LD_INT 21
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 21
63019: PUSH
63020: LD_INT 2
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: PPUSH
63032: CALL_OW 69
63036: PUSH
63037: FOR_IN
63038: IFFALSE 63099
// if IsSelected ( i ) then
63040: LD_VAR 0 2
63044: PPUSH
63045: CALL_OW 306
63049: IFFALSE 63097
// begin if i in hInvincible then
63051: LD_VAR 0 2
63055: PUSH
63056: LD_EXP 167
63060: IN
63061: IFFALSE 63081
// hInvincible := hInvincible diff i else
63063: LD_ADDR_EXP 167
63067: PUSH
63068: LD_EXP 167
63072: PUSH
63073: LD_VAR 0 2
63077: DIFF
63078: ST_TO_ADDR
63079: GO 63097
// hInvincible := hInvincible union i ;
63081: LD_ADDR_EXP 167
63085: PUSH
63086: LD_EXP 167
63090: PUSH
63091: LD_VAR 0 2
63095: UNION
63096: ST_TO_ADDR
// end ;
63097: GO 63037
63099: POP
63100: POP
// end ;
63101: LD_VAR 0 1
63105: RET
// export function hHackInvisible ; var i , j ; begin
63106: LD_INT 0
63108: PPUSH
63109: PPUSH
63110: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63111: LD_ADDR_VAR 0 2
63115: PUSH
63116: LD_INT 21
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PPUSH
63126: CALL_OW 69
63130: PUSH
63131: FOR_IN
63132: IFFALSE 63156
// if IsSelected ( i ) then
63134: LD_VAR 0 2
63138: PPUSH
63139: CALL_OW 306
63143: IFFALSE 63154
// ComForceInvisible ( i ) ;
63145: LD_VAR 0 2
63149: PPUSH
63150: CALL_OW 496
63154: GO 63131
63156: POP
63157: POP
// end ;
63158: LD_VAR 0 1
63162: RET
// export function hHackChangeYourSide ; begin
63163: LD_INT 0
63165: PPUSH
// if your_side = 8 then
63166: LD_OWVAR 2
63170: PUSH
63171: LD_INT 8
63173: EQUAL
63174: IFFALSE 63186
// your_side := 0 else
63176: LD_ADDR_OWVAR 2
63180: PUSH
63181: LD_INT 0
63183: ST_TO_ADDR
63184: GO 63200
// your_side := your_side + 1 ;
63186: LD_ADDR_OWVAR 2
63190: PUSH
63191: LD_OWVAR 2
63195: PUSH
63196: LD_INT 1
63198: PLUS
63199: ST_TO_ADDR
// end ;
63200: LD_VAR 0 1
63204: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63205: LD_INT 0
63207: PPUSH
63208: PPUSH
63209: PPUSH
// for i in all_units do
63210: LD_ADDR_VAR 0 2
63214: PUSH
63215: LD_OWVAR 3
63219: PUSH
63220: FOR_IN
63221: IFFALSE 63299
// if IsSelected ( i ) then
63223: LD_VAR 0 2
63227: PPUSH
63228: CALL_OW 306
63232: IFFALSE 63297
// begin j := GetSide ( i ) ;
63234: LD_ADDR_VAR 0 3
63238: PUSH
63239: LD_VAR 0 2
63243: PPUSH
63244: CALL_OW 255
63248: ST_TO_ADDR
// if j = 8 then
63249: LD_VAR 0 3
63253: PUSH
63254: LD_INT 8
63256: EQUAL
63257: IFFALSE 63269
// j := 0 else
63259: LD_ADDR_VAR 0 3
63263: PUSH
63264: LD_INT 0
63266: ST_TO_ADDR
63267: GO 63283
// j := j + 1 ;
63269: LD_ADDR_VAR 0 3
63273: PUSH
63274: LD_VAR 0 3
63278: PUSH
63279: LD_INT 1
63281: PLUS
63282: ST_TO_ADDR
// SetSide ( i , j ) ;
63283: LD_VAR 0 2
63287: PPUSH
63288: LD_VAR 0 3
63292: PPUSH
63293: CALL_OW 235
// end ;
63297: GO 63220
63299: POP
63300: POP
// end ;
63301: LD_VAR 0 1
63305: RET
// export function hHackFog ; begin
63306: LD_INT 0
63308: PPUSH
// FogOff ( true ) ;
63309: LD_INT 1
63311: PPUSH
63312: CALL_OW 344
// end ;
63316: LD_VAR 0 1
63320: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63321: LD_INT 0
63323: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63324: LD_VAR 0 1
63328: PPUSH
63329: LD_VAR 0 2
63333: PPUSH
63334: LD_VAR 0 3
63338: PPUSH
63339: LD_INT 1
63341: PPUSH
63342: LD_INT 1
63344: PPUSH
63345: CALL_OW 483
// CenterOnXY ( x , y ) ;
63349: LD_VAR 0 2
63353: PPUSH
63354: LD_VAR 0 3
63358: PPUSH
63359: CALL_OW 84
// end ; end_of_file
63363: LD_VAR 0 4
63367: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63368: LD_INT 0
63370: PPUSH
63371: PPUSH
63372: PPUSH
63373: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63374: LD_VAR 0 1
63378: PPUSH
63379: CALL_OW 264
63383: PUSH
63384: LD_EXP 94
63388: EQUAL
63389: IFFALSE 63461
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63391: LD_INT 68
63393: PPUSH
63394: LD_VAR 0 1
63398: PPUSH
63399: CALL_OW 255
63403: PPUSH
63404: CALL_OW 321
63408: PUSH
63409: LD_INT 2
63411: EQUAL
63412: IFFALSE 63424
// eff := 70 else
63414: LD_ADDR_VAR 0 4
63418: PUSH
63419: LD_INT 70
63421: ST_TO_ADDR
63422: GO 63432
// eff := 30 ;
63424: LD_ADDR_VAR 0 4
63428: PUSH
63429: LD_INT 30
63431: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63432: LD_VAR 0 1
63436: PPUSH
63437: CALL_OW 250
63441: PPUSH
63442: LD_VAR 0 1
63446: PPUSH
63447: CALL_OW 251
63451: PPUSH
63452: LD_VAR 0 4
63456: PPUSH
63457: CALL_OW 495
// end ; end ;
63461: LD_VAR 0 2
63465: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63466: LD_INT 0
63468: PPUSH
// end ;
63469: LD_VAR 0 4
63473: RET
// export function SOS_Command ( cmd ) ; begin
63474: LD_INT 0
63476: PPUSH
// end ;
63477: LD_VAR 0 2
63481: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63482: LD_INT 0
63484: PPUSH
// end ;
63485: LD_VAR 0 6
63489: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63490: LD_INT 0
63492: PPUSH
63493: PPUSH
// if not vehicle or not factory then
63494: LD_VAR 0 1
63498: NOT
63499: PUSH
63500: LD_VAR 0 2
63504: NOT
63505: OR
63506: IFFALSE 63510
// exit ;
63508: GO 63741
// if factoryWaypoints >= factory then
63510: LD_EXP 168
63514: PUSH
63515: LD_VAR 0 2
63519: GREATEREQUAL
63520: IFFALSE 63741
// if factoryWaypoints [ factory ] then
63522: LD_EXP 168
63526: PUSH
63527: LD_VAR 0 2
63531: ARRAY
63532: IFFALSE 63741
// begin if GetControl ( vehicle ) = control_manual then
63534: LD_VAR 0 1
63538: PPUSH
63539: CALL_OW 263
63543: PUSH
63544: LD_INT 1
63546: EQUAL
63547: IFFALSE 63628
// begin driver := IsDrivenBy ( vehicle ) ;
63549: LD_ADDR_VAR 0 4
63553: PUSH
63554: LD_VAR 0 1
63558: PPUSH
63559: CALL_OW 311
63563: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63564: LD_VAR 0 4
63568: PPUSH
63569: LD_EXP 168
63573: PUSH
63574: LD_VAR 0 2
63578: ARRAY
63579: PUSH
63580: LD_INT 3
63582: ARRAY
63583: PPUSH
63584: LD_EXP 168
63588: PUSH
63589: LD_VAR 0 2
63593: ARRAY
63594: PUSH
63595: LD_INT 4
63597: ARRAY
63598: PPUSH
63599: CALL_OW 171
// AddComExitVehicle ( driver ) ;
63603: LD_VAR 0 4
63607: PPUSH
63608: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
63612: LD_VAR 0 4
63616: PPUSH
63617: LD_VAR 0 2
63621: PPUSH
63622: CALL_OW 180
// end else
63626: GO 63741
// if GetControl ( vehicle ) = control_remote then
63628: LD_VAR 0 1
63632: PPUSH
63633: CALL_OW 263
63637: PUSH
63638: LD_INT 2
63640: EQUAL
63641: IFFALSE 63702
// begin wait ( 0 0$2 ) ;
63643: LD_INT 70
63645: PPUSH
63646: CALL_OW 67
// if Connect ( vehicle ) then
63650: LD_VAR 0 1
63654: PPUSH
63655: CALL 16431 0 1
63659: IFFALSE 63700
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63661: LD_VAR 0 1
63665: PPUSH
63666: LD_EXP 168
63670: PUSH
63671: LD_VAR 0 2
63675: ARRAY
63676: PUSH
63677: LD_INT 3
63679: ARRAY
63680: PPUSH
63681: LD_EXP 168
63685: PUSH
63686: LD_VAR 0 2
63690: ARRAY
63691: PUSH
63692: LD_INT 4
63694: ARRAY
63695: PPUSH
63696: CALL_OW 171
// end else
63700: GO 63741
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
63702: LD_VAR 0 1
63706: PPUSH
63707: LD_EXP 168
63711: PUSH
63712: LD_VAR 0 2
63716: ARRAY
63717: PUSH
63718: LD_INT 3
63720: ARRAY
63721: PPUSH
63722: LD_EXP 168
63726: PUSH
63727: LD_VAR 0 2
63731: ARRAY
63732: PUSH
63733: LD_INT 4
63735: ARRAY
63736: PPUSH
63737: CALL_OW 171
// end ; end ;
63741: LD_VAR 0 3
63745: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
63746: LD_INT 0
63748: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
63749: LD_VAR 0 1
63753: PUSH
63754: LD_INT 250
63756: EQUAL
63757: PUSH
63758: LD_VAR 0 2
63762: PPUSH
63763: CALL_OW 264
63767: PUSH
63768: LD_EXP 97
63772: EQUAL
63773: AND
63774: IFFALSE 63795
// MinerPlaceMine ( unit , x , y ) ;
63776: LD_VAR 0 2
63780: PPUSH
63781: LD_VAR 0 4
63785: PPUSH
63786: LD_VAR 0 5
63790: PPUSH
63791: CALL 66523 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
63795: LD_VAR 0 1
63799: PUSH
63800: LD_INT 251
63802: EQUAL
63803: PUSH
63804: LD_VAR 0 2
63808: PPUSH
63809: CALL_OW 264
63813: PUSH
63814: LD_EXP 97
63818: EQUAL
63819: AND
63820: IFFALSE 63841
// MinerDetonateMine ( unit , x , y ) ;
63822: LD_VAR 0 2
63826: PPUSH
63827: LD_VAR 0 4
63831: PPUSH
63832: LD_VAR 0 5
63836: PPUSH
63837: CALL 66800 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
63841: LD_VAR 0 1
63845: PUSH
63846: LD_INT 252
63848: EQUAL
63849: PUSH
63850: LD_VAR 0 2
63854: PPUSH
63855: CALL_OW 264
63859: PUSH
63860: LD_EXP 97
63864: EQUAL
63865: AND
63866: IFFALSE 63887
// MinerCreateMinefield ( unit , x , y ) ;
63868: LD_VAR 0 2
63872: PPUSH
63873: LD_VAR 0 4
63877: PPUSH
63878: LD_VAR 0 5
63882: PPUSH
63883: CALL 67217 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
63887: LD_VAR 0 1
63891: PUSH
63892: LD_INT 253
63894: EQUAL
63895: PUSH
63896: LD_VAR 0 2
63900: PPUSH
63901: CALL_OW 257
63905: PUSH
63906: LD_INT 5
63908: EQUAL
63909: AND
63910: IFFALSE 63931
// ComBinocular ( unit , x , y ) ;
63912: LD_VAR 0 2
63916: PPUSH
63917: LD_VAR 0 4
63921: PPUSH
63922: LD_VAR 0 5
63926: PPUSH
63927: CALL 67588 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
63931: LD_VAR 0 1
63935: PUSH
63936: LD_INT 254
63938: EQUAL
63939: PUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: CALL_OW 264
63949: PUSH
63950: LD_EXP 92
63954: EQUAL
63955: AND
63956: PUSH
63957: LD_VAR 0 3
63961: PPUSH
63962: CALL_OW 263
63966: PUSH
63967: LD_INT 3
63969: EQUAL
63970: AND
63971: IFFALSE 63987
// HackDestroyVehicle ( unit , selectedUnit ) ;
63973: LD_VAR 0 2
63977: PPUSH
63978: LD_VAR 0 3
63982: PPUSH
63983: CALL 65883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
63987: LD_VAR 0 1
63991: PUSH
63992: LD_INT 255
63994: EQUAL
63995: PUSH
63996: LD_VAR 0 2
64000: PPUSH
64001: CALL_OW 264
64005: PUSH
64006: LD_INT 14
64008: PUSH
64009: LD_INT 53
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: IN
64016: AND
64017: PUSH
64018: LD_VAR 0 4
64022: PPUSH
64023: LD_VAR 0 5
64027: PPUSH
64028: CALL_OW 488
64032: AND
64033: IFFALSE 64057
// CutTreeXYR ( unit , x , y , 12 ) ;
64035: LD_VAR 0 2
64039: PPUSH
64040: LD_VAR 0 4
64044: PPUSH
64045: LD_VAR 0 5
64049: PPUSH
64050: LD_INT 12
64052: PPUSH
64053: CALL 64449 0 4
// if cmd = 256 then
64057: LD_VAR 0 1
64061: PUSH
64062: LD_INT 256
64064: EQUAL
64065: IFFALSE 64086
// SetFactoryWaypoint ( unit , x , y ) ;
64067: LD_VAR 0 2
64071: PPUSH
64072: LD_VAR 0 4
64076: PPUSH
64077: LD_VAR 0 5
64081: PPUSH
64082: CALL 64091 0 3
// end ;
64086: LD_VAR 0 6
64090: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64091: LD_INT 0
64093: PPUSH
64094: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64095: LD_VAR 0 1
64099: NOT
64100: PUSH
64101: LD_VAR 0 2
64105: PPUSH
64106: LD_VAR 0 3
64110: PPUSH
64111: CALL_OW 488
64115: NOT
64116: OR
64117: PUSH
64118: LD_VAR 0 1
64122: PPUSH
64123: CALL_OW 266
64127: PUSH
64128: LD_INT 3
64130: NONEQUAL
64131: PUSH
64132: LD_VAR 0 1
64136: PPUSH
64137: CALL_OW 247
64141: PUSH
64142: LD_INT 1
64144: EQUAL
64145: NOT
64146: AND
64147: OR
64148: IFFALSE 64152
// exit ;
64150: GO 64301
// if GetType ( factory ) = unit_human then
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 247
64161: PUSH
64162: LD_INT 1
64164: EQUAL
64165: IFFALSE 64182
// factory := IsInUnit ( factory ) ;
64167: LD_ADDR_VAR 0 1
64171: PUSH
64172: LD_VAR 0 1
64176: PPUSH
64177: CALL_OW 310
64181: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64182: LD_VAR 0 1
64186: PPUSH
64187: CALL_OW 266
64191: PUSH
64192: LD_INT 3
64194: NONEQUAL
64195: IFFALSE 64199
// exit ;
64197: GO 64301
// if HexInfo ( x , y ) = factory then
64199: LD_VAR 0 2
64203: PPUSH
64204: LD_VAR 0 3
64208: PPUSH
64209: CALL_OW 428
64213: PUSH
64214: LD_VAR 0 1
64218: EQUAL
64219: IFFALSE 64246
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64221: LD_ADDR_EXP 168
64225: PUSH
64226: LD_EXP 168
64230: PPUSH
64231: LD_VAR 0 1
64235: PPUSH
64236: LD_INT 0
64238: PPUSH
64239: CALL_OW 1
64243: ST_TO_ADDR
64244: GO 64297
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64246: LD_ADDR_EXP 168
64250: PUSH
64251: LD_EXP 168
64255: PPUSH
64256: LD_VAR 0 1
64260: PPUSH
64261: LD_VAR 0 1
64265: PPUSH
64266: CALL_OW 255
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: LD_VAR 0 2
64280: PUSH
64281: LD_VAR 0 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: PPUSH
64292: CALL_OW 1
64296: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64297: CALL 64306 0 0
// end ;
64301: LD_VAR 0 4
64305: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
64306: LD_INT 0
64308: PPUSH
64309: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64310: LD_STRING resetFactoryWaypoint();
64312: PPUSH
64313: CALL_OW 559
// if factoryWaypoints then
64317: LD_EXP 168
64321: IFFALSE 64444
// begin for i := 1 to factoryWaypoints do
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: DOUBLE
64329: LD_INT 1
64331: DEC
64332: ST_TO_ADDR
64333: LD_EXP 168
64337: PUSH
64338: FOR_TO
64339: IFFALSE 64442
// if factoryWaypoints [ i ] then
64341: LD_EXP 168
64345: PUSH
64346: LD_VAR 0 2
64350: ARRAY
64351: IFFALSE 64440
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
64353: LD_STRING setFactoryWaypointXY(
64355: PUSH
64356: LD_EXP 168
64360: PUSH
64361: LD_VAR 0 2
64365: ARRAY
64366: PUSH
64367: LD_INT 1
64369: ARRAY
64370: STR
64371: PUSH
64372: LD_STRING ,
64374: STR
64375: PUSH
64376: LD_EXP 168
64380: PUSH
64381: LD_VAR 0 2
64385: ARRAY
64386: PUSH
64387: LD_INT 2
64389: ARRAY
64390: STR
64391: PUSH
64392: LD_STRING ,
64394: STR
64395: PUSH
64396: LD_EXP 168
64400: PUSH
64401: LD_VAR 0 2
64405: ARRAY
64406: PUSH
64407: LD_INT 3
64409: ARRAY
64410: STR
64411: PUSH
64412: LD_STRING ,
64414: STR
64415: PUSH
64416: LD_EXP 168
64420: PUSH
64421: LD_VAR 0 2
64425: ARRAY
64426: PUSH
64427: LD_INT 4
64429: ARRAY
64430: STR
64431: PUSH
64432: LD_STRING )
64434: STR
64435: PPUSH
64436: CALL_OW 559
64440: GO 64338
64442: POP
64443: POP
// end ; end ;
64444: LD_VAR 0 1
64448: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64449: LD_INT 0
64451: PPUSH
64452: PPUSH
64453: PPUSH
64454: PPUSH
64455: PPUSH
64456: PPUSH
64457: PPUSH
64458: PPUSH
64459: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64460: LD_VAR 0 1
64464: NOT
64465: PUSH
64466: LD_VAR 0 2
64470: PPUSH
64471: LD_VAR 0 3
64475: PPUSH
64476: CALL_OW 488
64480: NOT
64481: OR
64482: PUSH
64483: LD_VAR 0 4
64487: NOT
64488: OR
64489: IFFALSE 64493
// exit ;
64491: GO 64833
// list := [ ] ;
64493: LD_ADDR_VAR 0 13
64497: PUSH
64498: EMPTY
64499: ST_TO_ADDR
// if x - r < 0 then
64500: LD_VAR 0 2
64504: PUSH
64505: LD_VAR 0 4
64509: MINUS
64510: PUSH
64511: LD_INT 0
64513: LESS
64514: IFFALSE 64526
// min_x := 0 else
64516: LD_ADDR_VAR 0 7
64520: PUSH
64521: LD_INT 0
64523: ST_TO_ADDR
64524: GO 64542
// min_x := x - r ;
64526: LD_ADDR_VAR 0 7
64530: PUSH
64531: LD_VAR 0 2
64535: PUSH
64536: LD_VAR 0 4
64540: MINUS
64541: ST_TO_ADDR
// if y - r < 0 then
64542: LD_VAR 0 3
64546: PUSH
64547: LD_VAR 0 4
64551: MINUS
64552: PUSH
64553: LD_INT 0
64555: LESS
64556: IFFALSE 64568
// min_y := 0 else
64558: LD_ADDR_VAR 0 8
64562: PUSH
64563: LD_INT 0
64565: ST_TO_ADDR
64566: GO 64584
// min_y := y - r ;
64568: LD_ADDR_VAR 0 8
64572: PUSH
64573: LD_VAR 0 3
64577: PUSH
64578: LD_VAR 0 4
64582: MINUS
64583: ST_TO_ADDR
// max_x := x + r ;
64584: LD_ADDR_VAR 0 9
64588: PUSH
64589: LD_VAR 0 2
64593: PUSH
64594: LD_VAR 0 4
64598: PLUS
64599: ST_TO_ADDR
// max_y := y + r ;
64600: LD_ADDR_VAR 0 10
64604: PUSH
64605: LD_VAR 0 3
64609: PUSH
64610: LD_VAR 0 4
64614: PLUS
64615: ST_TO_ADDR
// for _x = min_x to max_x do
64616: LD_ADDR_VAR 0 11
64620: PUSH
64621: DOUBLE
64622: LD_VAR 0 7
64626: DEC
64627: ST_TO_ADDR
64628: LD_VAR 0 9
64632: PUSH
64633: FOR_TO
64634: IFFALSE 64751
// for _y = min_y to max_y do
64636: LD_ADDR_VAR 0 12
64640: PUSH
64641: DOUBLE
64642: LD_VAR 0 8
64646: DEC
64647: ST_TO_ADDR
64648: LD_VAR 0 10
64652: PUSH
64653: FOR_TO
64654: IFFALSE 64747
// begin if not ValidHex ( _x , _y ) then
64656: LD_VAR 0 11
64660: PPUSH
64661: LD_VAR 0 12
64665: PPUSH
64666: CALL_OW 488
64670: NOT
64671: IFFALSE 64675
// continue ;
64673: GO 64653
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64675: LD_VAR 0 11
64679: PPUSH
64680: LD_VAR 0 12
64684: PPUSH
64685: CALL_OW 351
64689: PUSH
64690: LD_VAR 0 11
64694: PPUSH
64695: LD_VAR 0 12
64699: PPUSH
64700: CALL_OW 554
64704: AND
64705: IFFALSE 64745
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64707: LD_ADDR_VAR 0 13
64711: PUSH
64712: LD_VAR 0 13
64716: PPUSH
64717: LD_VAR 0 13
64721: PUSH
64722: LD_INT 1
64724: PLUS
64725: PPUSH
64726: LD_VAR 0 11
64730: PUSH
64731: LD_VAR 0 12
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PPUSH
64740: CALL_OW 2
64744: ST_TO_ADDR
// end ;
64745: GO 64653
64747: POP
64748: POP
64749: GO 64633
64751: POP
64752: POP
// if not list then
64753: LD_VAR 0 13
64757: NOT
64758: IFFALSE 64762
// exit ;
64760: GO 64833
// for i in list do
64762: LD_ADDR_VAR 0 6
64766: PUSH
64767: LD_VAR 0 13
64771: PUSH
64772: FOR_IN
64773: IFFALSE 64831
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64775: LD_VAR 0 1
64779: PPUSH
64780: LD_STRING M
64782: PUSH
64783: LD_VAR 0 6
64787: PUSH
64788: LD_INT 1
64790: ARRAY
64791: PUSH
64792: LD_VAR 0 6
64796: PUSH
64797: LD_INT 2
64799: ARRAY
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: EMPTY
64823: LIST
64824: PPUSH
64825: CALL_OW 447
64829: GO 64772
64831: POP
64832: POP
// end ;
64833: LD_VAR 0 5
64837: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64838: LD_EXP 169
64842: NOT
64843: IFFALSE 64893
64845: GO 64847
64847: DISABLE
// begin initHack := true ;
64848: LD_ADDR_EXP 169
64852: PUSH
64853: LD_INT 1
64855: ST_TO_ADDR
// hackTanks := [ ] ;
64856: LD_ADDR_EXP 170
64860: PUSH
64861: EMPTY
64862: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64863: LD_ADDR_EXP 171
64867: PUSH
64868: EMPTY
64869: ST_TO_ADDR
// hackLimit := 3 ;
64870: LD_ADDR_EXP 172
64874: PUSH
64875: LD_INT 3
64877: ST_TO_ADDR
// hackDist := 12 ;
64878: LD_ADDR_EXP 173
64882: PUSH
64883: LD_INT 12
64885: ST_TO_ADDR
// hackCounter := [ ] ;
64886: LD_ADDR_EXP 174
64890: PUSH
64891: EMPTY
64892: ST_TO_ADDR
// end ;
64893: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
64894: LD_EXP 169
64898: PUSH
64899: LD_INT 34
64901: PUSH
64902: LD_EXP 92
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PPUSH
64911: CALL_OW 69
64915: AND
64916: IFFALSE 65171
64918: GO 64920
64920: DISABLE
64921: LD_INT 0
64923: PPUSH
64924: PPUSH
// begin enable ;
64925: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
64926: LD_ADDR_VAR 0 1
64930: PUSH
64931: LD_INT 34
64933: PUSH
64934: LD_EXP 92
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PPUSH
64943: CALL_OW 69
64947: PUSH
64948: FOR_IN
64949: IFFALSE 65169
// begin if not i in hackTanks then
64951: LD_VAR 0 1
64955: PUSH
64956: LD_EXP 170
64960: IN
64961: NOT
64962: IFFALSE 65045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
64964: LD_ADDR_EXP 170
64968: PUSH
64969: LD_EXP 170
64973: PPUSH
64974: LD_EXP 170
64978: PUSH
64979: LD_INT 1
64981: PLUS
64982: PPUSH
64983: LD_VAR 0 1
64987: PPUSH
64988: CALL_OW 1
64992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
64993: LD_ADDR_EXP 171
64997: PUSH
64998: LD_EXP 171
65002: PPUSH
65003: LD_EXP 171
65007: PUSH
65008: LD_INT 1
65010: PLUS
65011: PPUSH
65012: EMPTY
65013: PPUSH
65014: CALL_OW 1
65018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65019: LD_ADDR_EXP 174
65023: PUSH
65024: LD_EXP 174
65028: PPUSH
65029: LD_EXP 174
65033: PUSH
65034: LD_INT 1
65036: PLUS
65037: PPUSH
65038: EMPTY
65039: PPUSH
65040: CALL_OW 1
65044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65045: LD_VAR 0 1
65049: PPUSH
65050: CALL_OW 302
65054: NOT
65055: IFFALSE 65068
// begin HackUnlinkAll ( i ) ;
65057: LD_VAR 0 1
65061: PPUSH
65062: CALL 65174 0 1
// continue ;
65066: GO 64948
// end ; HackCheckCapturedStatus ( i ) ;
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL 65617 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65077: LD_ADDR_VAR 0 2
65081: PUSH
65082: LD_INT 81
65084: PUSH
65085: LD_VAR 0 1
65089: PPUSH
65090: CALL_OW 255
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 33
65101: PUSH
65102: LD_INT 3
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 91
65111: PUSH
65112: LD_VAR 0 1
65116: PUSH
65117: LD_EXP 173
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 50
65129: PUSH
65130: EMPTY
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: PPUSH
65139: CALL_OW 69
65143: ST_TO_ADDR
// if not tmp then
65144: LD_VAR 0 2
65148: NOT
65149: IFFALSE 65153
// continue ;
65151: GO 64948
// HackLink ( i , tmp ) ;
65153: LD_VAR 0 1
65157: PPUSH
65158: LD_VAR 0 2
65162: PPUSH
65163: CALL 65310 0 2
// end ;
65167: GO 64948
65169: POP
65170: POP
// end ;
65171: PPOPN 2
65173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65174: LD_INT 0
65176: PPUSH
65177: PPUSH
65178: PPUSH
// if not hack in hackTanks then
65179: LD_VAR 0 1
65183: PUSH
65184: LD_EXP 170
65188: IN
65189: NOT
65190: IFFALSE 65194
// exit ;
65192: GO 65305
// index := GetElementIndex ( hackTanks , hack ) ;
65194: LD_ADDR_VAR 0 4
65198: PUSH
65199: LD_EXP 170
65203: PPUSH
65204: LD_VAR 0 1
65208: PPUSH
65209: CALL 13137 0 2
65213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65214: LD_EXP 171
65218: PUSH
65219: LD_VAR 0 4
65223: ARRAY
65224: IFFALSE 65305
// begin for i in hackTanksCaptured [ index ] do
65226: LD_ADDR_VAR 0 3
65230: PUSH
65231: LD_EXP 171
65235: PUSH
65236: LD_VAR 0 4
65240: ARRAY
65241: PUSH
65242: FOR_IN
65243: IFFALSE 65269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65245: LD_VAR 0 3
65249: PUSH
65250: LD_INT 1
65252: ARRAY
65253: PPUSH
65254: LD_VAR 0 3
65258: PUSH
65259: LD_INT 2
65261: ARRAY
65262: PPUSH
65263: CALL_OW 235
65267: GO 65242
65269: POP
65270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65271: LD_ADDR_EXP 171
65275: PUSH
65276: LD_EXP 171
65280: PPUSH
65281: LD_VAR 0 4
65285: PPUSH
65286: EMPTY
65287: PPUSH
65288: CALL_OW 1
65292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65293: LD_VAR 0 1
65297: PPUSH
65298: LD_INT 0
65300: PPUSH
65301: CALL_OW 505
// end ; end ;
65305: LD_VAR 0 2
65309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65310: LD_INT 0
65312: PPUSH
65313: PPUSH
65314: PPUSH
// if not hack in hackTanks or not vehicles then
65315: LD_VAR 0 1
65319: PUSH
65320: LD_EXP 170
65324: IN
65325: NOT
65326: PUSH
65327: LD_VAR 0 2
65331: NOT
65332: OR
65333: IFFALSE 65337
// exit ;
65335: GO 65612
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65337: LD_ADDR_VAR 0 2
65341: PUSH
65342: LD_VAR 0 1
65346: PPUSH
65347: LD_VAR 0 2
65351: PPUSH
65352: LD_INT 1
65354: PPUSH
65355: LD_INT 1
65357: PPUSH
65358: CALL 13787 0 4
65362: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65363: LD_ADDR_VAR 0 5
65367: PUSH
65368: LD_EXP 170
65372: PPUSH
65373: LD_VAR 0 1
65377: PPUSH
65378: CALL 13137 0 2
65382: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65383: LD_EXP 171
65387: PUSH
65388: LD_VAR 0 5
65392: ARRAY
65393: PUSH
65394: LD_EXP 172
65398: LESS
65399: IFFALSE 65588
// begin for i := 1 to vehicles do
65401: LD_ADDR_VAR 0 4
65405: PUSH
65406: DOUBLE
65407: LD_INT 1
65409: DEC
65410: ST_TO_ADDR
65411: LD_VAR 0 2
65415: PUSH
65416: FOR_TO
65417: IFFALSE 65586
// begin if hackTanksCaptured [ index ] = hackLimit then
65419: LD_EXP 171
65423: PUSH
65424: LD_VAR 0 5
65428: ARRAY
65429: PUSH
65430: LD_EXP 172
65434: EQUAL
65435: IFFALSE 65439
// break ;
65437: GO 65586
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65439: LD_ADDR_EXP 174
65443: PUSH
65444: LD_EXP 174
65448: PPUSH
65449: LD_VAR 0 5
65453: PPUSH
65454: LD_EXP 174
65458: PUSH
65459: LD_VAR 0 5
65463: ARRAY
65464: PUSH
65465: LD_INT 1
65467: PLUS
65468: PPUSH
65469: CALL_OW 1
65473: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65474: LD_ADDR_EXP 171
65478: PUSH
65479: LD_EXP 171
65483: PPUSH
65484: LD_VAR 0 5
65488: PUSH
65489: LD_EXP 171
65493: PUSH
65494: LD_VAR 0 5
65498: ARRAY
65499: PUSH
65500: LD_INT 1
65502: PLUS
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PPUSH
65508: LD_VAR 0 2
65512: PUSH
65513: LD_VAR 0 4
65517: ARRAY
65518: PUSH
65519: LD_VAR 0 2
65523: PUSH
65524: LD_VAR 0 4
65528: ARRAY
65529: PPUSH
65530: CALL_OW 255
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PPUSH
65539: CALL 13352 0 3
65543: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65544: LD_VAR 0 2
65548: PUSH
65549: LD_VAR 0 4
65553: ARRAY
65554: PPUSH
65555: LD_VAR 0 1
65559: PPUSH
65560: CALL_OW 255
65564: PPUSH
65565: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65569: LD_VAR 0 2
65573: PUSH
65574: LD_VAR 0 4
65578: ARRAY
65579: PPUSH
65580: CALL_OW 141
// end ;
65584: GO 65416
65586: POP
65587: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65588: LD_VAR 0 1
65592: PPUSH
65593: LD_EXP 171
65597: PUSH
65598: LD_VAR 0 5
65602: ARRAY
65603: PUSH
65604: LD_INT 0
65606: PLUS
65607: PPUSH
65608: CALL_OW 505
// end ;
65612: LD_VAR 0 3
65616: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
65621: PPUSH
65622: PPUSH
// if not hack in hackTanks then
65623: LD_VAR 0 1
65627: PUSH
65628: LD_EXP 170
65632: IN
65633: NOT
65634: IFFALSE 65638
// exit ;
65636: GO 65878
// index := GetElementIndex ( hackTanks , hack ) ;
65638: LD_ADDR_VAR 0 4
65642: PUSH
65643: LD_EXP 170
65647: PPUSH
65648: LD_VAR 0 1
65652: PPUSH
65653: CALL 13137 0 2
65657: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65658: LD_ADDR_VAR 0 3
65662: PUSH
65663: DOUBLE
65664: LD_EXP 171
65668: PUSH
65669: LD_VAR 0 4
65673: ARRAY
65674: INC
65675: ST_TO_ADDR
65676: LD_INT 1
65678: PUSH
65679: FOR_DOWNTO
65680: IFFALSE 65852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65682: LD_ADDR_VAR 0 5
65686: PUSH
65687: LD_EXP 171
65691: PUSH
65692: LD_VAR 0 4
65696: ARRAY
65697: PUSH
65698: LD_VAR 0 3
65702: ARRAY
65703: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65704: LD_VAR 0 5
65708: PUSH
65709: LD_INT 1
65711: ARRAY
65712: PPUSH
65713: CALL_OW 302
65717: NOT
65718: PUSH
65719: LD_VAR 0 5
65723: PUSH
65724: LD_INT 1
65726: ARRAY
65727: PPUSH
65728: CALL_OW 255
65732: PUSH
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 255
65742: NONEQUAL
65743: OR
65744: IFFALSE 65850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65746: LD_VAR 0 5
65750: PUSH
65751: LD_INT 1
65753: ARRAY
65754: PPUSH
65755: CALL_OW 305
65759: PUSH
65760: LD_VAR 0 5
65764: PUSH
65765: LD_INT 1
65767: ARRAY
65768: PPUSH
65769: CALL_OW 255
65773: PUSH
65774: LD_VAR 0 1
65778: PPUSH
65779: CALL_OW 255
65783: EQUAL
65784: AND
65785: IFFALSE 65809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65787: LD_VAR 0 5
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: PPUSH
65796: LD_VAR 0 5
65800: PUSH
65801: LD_INT 2
65803: ARRAY
65804: PPUSH
65805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65809: LD_ADDR_EXP 171
65813: PUSH
65814: LD_EXP 171
65818: PPUSH
65819: LD_VAR 0 4
65823: PPUSH
65824: LD_EXP 171
65828: PUSH
65829: LD_VAR 0 4
65833: ARRAY
65834: PPUSH
65835: LD_VAR 0 3
65839: PPUSH
65840: CALL_OW 3
65844: PPUSH
65845: CALL_OW 1
65849: ST_TO_ADDR
// end ; end ;
65850: GO 65679
65852: POP
65853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65854: LD_VAR 0 1
65858: PPUSH
65859: LD_EXP 171
65863: PUSH
65864: LD_VAR 0 4
65868: ARRAY
65869: PUSH
65870: LD_INT 0
65872: PLUS
65873: PPUSH
65874: CALL_OW 505
// end ;
65878: LD_VAR 0 2
65882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65883: LD_INT 0
65885: PPUSH
65886: PPUSH
65887: PPUSH
65888: PPUSH
// if not hack in hackTanks then
65889: LD_VAR 0 1
65893: PUSH
65894: LD_EXP 170
65898: IN
65899: NOT
65900: IFFALSE 65904
// exit ;
65902: GO 65989
// index := GetElementIndex ( hackTanks , hack ) ;
65904: LD_ADDR_VAR 0 5
65908: PUSH
65909: LD_EXP 170
65913: PPUSH
65914: LD_VAR 0 1
65918: PPUSH
65919: CALL 13137 0 2
65923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
65924: LD_ADDR_VAR 0 4
65928: PUSH
65929: DOUBLE
65930: LD_INT 1
65932: DEC
65933: ST_TO_ADDR
65934: LD_EXP 171
65938: PUSH
65939: LD_VAR 0 5
65943: ARRAY
65944: PUSH
65945: FOR_TO
65946: IFFALSE 65987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
65948: LD_EXP 171
65952: PUSH
65953: LD_VAR 0 5
65957: ARRAY
65958: PUSH
65959: LD_VAR 0 4
65963: ARRAY
65964: PUSH
65965: LD_INT 1
65967: ARRAY
65968: PUSH
65969: LD_VAR 0 2
65973: EQUAL
65974: IFFALSE 65985
// KillUnit ( vehicle ) ;
65976: LD_VAR 0 2
65980: PPUSH
65981: CALL_OW 66
65985: GO 65945
65987: POP
65988: POP
// end ;
65989: LD_VAR 0 3
65993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
65994: LD_EXP 175
65998: NOT
65999: IFFALSE 66034
66001: GO 66003
66003: DISABLE
// begin initMiner := true ;
66004: LD_ADDR_EXP 175
66008: PUSH
66009: LD_INT 1
66011: ST_TO_ADDR
// minersList := [ ] ;
66012: LD_ADDR_EXP 176
66016: PUSH
66017: EMPTY
66018: ST_TO_ADDR
// minerMinesList := [ ] ;
66019: LD_ADDR_EXP 177
66023: PUSH
66024: EMPTY
66025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66026: LD_ADDR_EXP 178
66030: PUSH
66031: LD_INT 5
66033: ST_TO_ADDR
// end ;
66034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66035: LD_EXP 175
66039: PUSH
66040: LD_INT 34
66042: PUSH
66043: LD_EXP 97
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PPUSH
66052: CALL_OW 69
66056: AND
66057: IFFALSE 66520
66059: GO 66061
66061: DISABLE
66062: LD_INT 0
66064: PPUSH
66065: PPUSH
66066: PPUSH
66067: PPUSH
// begin enable ;
66068: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66069: LD_ADDR_VAR 0 1
66073: PUSH
66074: LD_INT 34
66076: PUSH
66077: LD_EXP 97
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PPUSH
66086: CALL_OW 69
66090: PUSH
66091: FOR_IN
66092: IFFALSE 66164
// begin if not i in minersList then
66094: LD_VAR 0 1
66098: PUSH
66099: LD_EXP 176
66103: IN
66104: NOT
66105: IFFALSE 66162
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66107: LD_ADDR_EXP 176
66111: PUSH
66112: LD_EXP 176
66116: PPUSH
66117: LD_EXP 176
66121: PUSH
66122: LD_INT 1
66124: PLUS
66125: PPUSH
66126: LD_VAR 0 1
66130: PPUSH
66131: CALL_OW 1
66135: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66136: LD_ADDR_EXP 177
66140: PUSH
66141: LD_EXP 177
66145: PPUSH
66146: LD_EXP 177
66150: PUSH
66151: LD_INT 1
66153: PLUS
66154: PPUSH
66155: EMPTY
66156: PPUSH
66157: CALL_OW 1
66161: ST_TO_ADDR
// end end ;
66162: GO 66091
66164: POP
66165: POP
// for i := minerMinesList downto 1 do
66166: LD_ADDR_VAR 0 1
66170: PUSH
66171: DOUBLE
66172: LD_EXP 177
66176: INC
66177: ST_TO_ADDR
66178: LD_INT 1
66180: PUSH
66181: FOR_DOWNTO
66182: IFFALSE 66518
// begin if IsLive ( minersList [ i ] ) then
66184: LD_EXP 176
66188: PUSH
66189: LD_VAR 0 1
66193: ARRAY
66194: PPUSH
66195: CALL_OW 300
66199: IFFALSE 66227
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66201: LD_EXP 176
66205: PUSH
66206: LD_VAR 0 1
66210: ARRAY
66211: PPUSH
66212: LD_EXP 177
66216: PUSH
66217: LD_VAR 0 1
66221: ARRAY
66222: PPUSH
66223: CALL_OW 505
// if not minerMinesList [ i ] then
66227: LD_EXP 177
66231: PUSH
66232: LD_VAR 0 1
66236: ARRAY
66237: NOT
66238: IFFALSE 66242
// continue ;
66240: GO 66181
// for j := minerMinesList [ i ] downto 1 do
66242: LD_ADDR_VAR 0 2
66246: PUSH
66247: DOUBLE
66248: LD_EXP 177
66252: PUSH
66253: LD_VAR 0 1
66257: ARRAY
66258: INC
66259: ST_TO_ADDR
66260: LD_INT 1
66262: PUSH
66263: FOR_DOWNTO
66264: IFFALSE 66514
// begin side := GetSide ( minersList [ i ] ) ;
66266: LD_ADDR_VAR 0 3
66270: PUSH
66271: LD_EXP 176
66275: PUSH
66276: LD_VAR 0 1
66280: ARRAY
66281: PPUSH
66282: CALL_OW 255
66286: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66287: LD_ADDR_VAR 0 4
66291: PUSH
66292: LD_EXP 177
66296: PUSH
66297: LD_VAR 0 1
66301: ARRAY
66302: PUSH
66303: LD_VAR 0 2
66307: ARRAY
66308: PUSH
66309: LD_INT 1
66311: ARRAY
66312: PPUSH
66313: LD_EXP 177
66317: PUSH
66318: LD_VAR 0 1
66322: ARRAY
66323: PUSH
66324: LD_VAR 0 2
66328: ARRAY
66329: PUSH
66330: LD_INT 2
66332: ARRAY
66333: PPUSH
66334: CALL_OW 428
66338: ST_TO_ADDR
// if not tmp then
66339: LD_VAR 0 4
66343: NOT
66344: IFFALSE 66348
// continue ;
66346: GO 66263
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66348: LD_VAR 0 4
66352: PUSH
66353: LD_INT 81
66355: PUSH
66356: LD_VAR 0 3
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PPUSH
66365: CALL_OW 69
66369: IN
66370: PUSH
66371: LD_EXP 177
66375: PUSH
66376: LD_VAR 0 1
66380: ARRAY
66381: PUSH
66382: LD_VAR 0 2
66386: ARRAY
66387: PUSH
66388: LD_INT 1
66390: ARRAY
66391: PPUSH
66392: LD_EXP 177
66396: PUSH
66397: LD_VAR 0 1
66401: ARRAY
66402: PUSH
66403: LD_VAR 0 2
66407: ARRAY
66408: PUSH
66409: LD_INT 2
66411: ARRAY
66412: PPUSH
66413: CALL_OW 458
66417: AND
66418: IFFALSE 66512
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66420: LD_EXP 177
66424: PUSH
66425: LD_VAR 0 1
66429: ARRAY
66430: PUSH
66431: LD_VAR 0 2
66435: ARRAY
66436: PUSH
66437: LD_INT 1
66439: ARRAY
66440: PPUSH
66441: LD_EXP 177
66445: PUSH
66446: LD_VAR 0 1
66450: ARRAY
66451: PUSH
66452: LD_VAR 0 2
66456: ARRAY
66457: PUSH
66458: LD_INT 2
66460: ARRAY
66461: PPUSH
66462: LD_VAR 0 3
66466: PPUSH
66467: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66471: LD_ADDR_EXP 177
66475: PUSH
66476: LD_EXP 177
66480: PPUSH
66481: LD_VAR 0 1
66485: PPUSH
66486: LD_EXP 177
66490: PUSH
66491: LD_VAR 0 1
66495: ARRAY
66496: PPUSH
66497: LD_VAR 0 2
66501: PPUSH
66502: CALL_OW 3
66506: PPUSH
66507: CALL_OW 1
66511: ST_TO_ADDR
// end ; end ;
66512: GO 66263
66514: POP
66515: POP
// end ;
66516: GO 66181
66518: POP
66519: POP
// end ;
66520: PPOPN 4
66522: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66523: LD_INT 0
66525: PPUSH
66526: PPUSH
// result := false ;
66527: LD_ADDR_VAR 0 4
66531: PUSH
66532: LD_INT 0
66534: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66535: LD_VAR 0 1
66539: PPUSH
66540: CALL_OW 264
66544: PUSH
66545: LD_EXP 97
66549: EQUAL
66550: NOT
66551: IFFALSE 66555
// exit ;
66553: GO 66795
// index := GetElementIndex ( minersList , unit ) ;
66555: LD_ADDR_VAR 0 5
66559: PUSH
66560: LD_EXP 176
66564: PPUSH
66565: LD_VAR 0 1
66569: PPUSH
66570: CALL 13137 0 2
66574: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66575: LD_EXP 177
66579: PUSH
66580: LD_VAR 0 5
66584: ARRAY
66585: PUSH
66586: LD_EXP 178
66590: GREATEREQUAL
66591: IFFALSE 66595
// exit ;
66593: GO 66795
// ComMoveXY ( unit , x , y ) ;
66595: LD_VAR 0 1
66599: PPUSH
66600: LD_VAR 0 2
66604: PPUSH
66605: LD_VAR 0 3
66609: PPUSH
66610: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66614: LD_INT 35
66616: PPUSH
66617: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66621: LD_VAR 0 1
66625: PPUSH
66626: LD_VAR 0 2
66630: PPUSH
66631: LD_VAR 0 3
66635: PPUSH
66636: CALL 43964 0 3
66640: NOT
66641: PUSH
66642: LD_VAR 0 1
66646: PPUSH
66647: CALL_OW 314
66651: AND
66652: IFFALSE 66656
// exit ;
66654: GO 66795
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66656: LD_VAR 0 2
66660: PPUSH
66661: LD_VAR 0 3
66665: PPUSH
66666: CALL_OW 428
66670: PUSH
66671: LD_VAR 0 1
66675: EQUAL
66676: PUSH
66677: LD_VAR 0 1
66681: PPUSH
66682: CALL_OW 314
66686: NOT
66687: AND
66688: IFFALSE 66614
// PlaySoundXY ( x , y , PlantMine ) ;
66690: LD_VAR 0 2
66694: PPUSH
66695: LD_VAR 0 3
66699: PPUSH
66700: LD_STRING PlantMine
66702: PPUSH
66703: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66707: LD_VAR 0 2
66711: PPUSH
66712: LD_VAR 0 3
66716: PPUSH
66717: LD_VAR 0 1
66721: PPUSH
66722: CALL_OW 255
66726: PPUSH
66727: LD_INT 0
66729: PPUSH
66730: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66734: LD_ADDR_EXP 177
66738: PUSH
66739: LD_EXP 177
66743: PPUSH
66744: LD_VAR 0 5
66748: PUSH
66749: LD_EXP 177
66753: PUSH
66754: LD_VAR 0 5
66758: ARRAY
66759: PUSH
66760: LD_INT 1
66762: PLUS
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PPUSH
66768: LD_VAR 0 2
66772: PUSH
66773: LD_VAR 0 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PPUSH
66782: CALL 13352 0 3
66786: ST_TO_ADDR
// result := true ;
66787: LD_ADDR_VAR 0 4
66791: PUSH
66792: LD_INT 1
66794: ST_TO_ADDR
// end ;
66795: LD_VAR 0 4
66799: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66800: LD_INT 0
66802: PPUSH
66803: PPUSH
66804: PPUSH
// if not unit in minersList then
66805: LD_VAR 0 1
66809: PUSH
66810: LD_EXP 176
66814: IN
66815: NOT
66816: IFFALSE 66820
// exit ;
66818: GO 67212
// index := GetElementIndex ( minersList , unit ) ;
66820: LD_ADDR_VAR 0 6
66824: PUSH
66825: LD_EXP 176
66829: PPUSH
66830: LD_VAR 0 1
66834: PPUSH
66835: CALL 13137 0 2
66839: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66840: LD_ADDR_VAR 0 5
66844: PUSH
66845: DOUBLE
66846: LD_EXP 177
66850: PUSH
66851: LD_VAR 0 6
66855: ARRAY
66856: INC
66857: ST_TO_ADDR
66858: LD_INT 1
66860: PUSH
66861: FOR_DOWNTO
66862: IFFALSE 67023
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66864: LD_EXP 177
66868: PUSH
66869: LD_VAR 0 6
66873: ARRAY
66874: PUSH
66875: LD_VAR 0 5
66879: ARRAY
66880: PUSH
66881: LD_INT 1
66883: ARRAY
66884: PUSH
66885: LD_VAR 0 2
66889: EQUAL
66890: PUSH
66891: LD_EXP 177
66895: PUSH
66896: LD_VAR 0 6
66900: ARRAY
66901: PUSH
66902: LD_VAR 0 5
66906: ARRAY
66907: PUSH
66908: LD_INT 2
66910: ARRAY
66911: PUSH
66912: LD_VAR 0 3
66916: EQUAL
66917: AND
66918: IFFALSE 67021
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
66920: LD_EXP 177
66924: PUSH
66925: LD_VAR 0 6
66929: ARRAY
66930: PUSH
66931: LD_VAR 0 5
66935: ARRAY
66936: PUSH
66937: LD_INT 1
66939: ARRAY
66940: PPUSH
66941: LD_EXP 177
66945: PUSH
66946: LD_VAR 0 6
66950: ARRAY
66951: PUSH
66952: LD_VAR 0 5
66956: ARRAY
66957: PUSH
66958: LD_INT 2
66960: ARRAY
66961: PPUSH
66962: LD_VAR 0 1
66966: PPUSH
66967: CALL_OW 255
66971: PPUSH
66972: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
66976: LD_ADDR_EXP 177
66980: PUSH
66981: LD_EXP 177
66985: PPUSH
66986: LD_VAR 0 6
66990: PPUSH
66991: LD_EXP 177
66995: PUSH
66996: LD_VAR 0 6
67000: ARRAY
67001: PPUSH
67002: LD_VAR 0 5
67006: PPUSH
67007: CALL_OW 3
67011: PPUSH
67012: CALL_OW 1
67016: ST_TO_ADDR
// exit ;
67017: POP
67018: POP
67019: GO 67212
// end ; end ;
67021: GO 66861
67023: POP
67024: POP
// for i := minerMinesList [ index ] downto 1 do
67025: LD_ADDR_VAR 0 5
67029: PUSH
67030: DOUBLE
67031: LD_EXP 177
67035: PUSH
67036: LD_VAR 0 6
67040: ARRAY
67041: INC
67042: ST_TO_ADDR
67043: LD_INT 1
67045: PUSH
67046: FOR_DOWNTO
67047: IFFALSE 67210
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67049: LD_EXP 177
67053: PUSH
67054: LD_VAR 0 6
67058: ARRAY
67059: PUSH
67060: LD_VAR 0 5
67064: ARRAY
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PPUSH
67070: LD_EXP 177
67074: PUSH
67075: LD_VAR 0 6
67079: ARRAY
67080: PUSH
67081: LD_VAR 0 5
67085: ARRAY
67086: PUSH
67087: LD_INT 2
67089: ARRAY
67090: PPUSH
67091: LD_VAR 0 2
67095: PPUSH
67096: LD_VAR 0 3
67100: PPUSH
67101: CALL_OW 298
67105: PUSH
67106: LD_INT 6
67108: LESS
67109: IFFALSE 67208
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67111: LD_EXP 177
67115: PUSH
67116: LD_VAR 0 6
67120: ARRAY
67121: PUSH
67122: LD_VAR 0 5
67126: ARRAY
67127: PUSH
67128: LD_INT 1
67130: ARRAY
67131: PPUSH
67132: LD_EXP 177
67136: PUSH
67137: LD_VAR 0 6
67141: ARRAY
67142: PUSH
67143: LD_VAR 0 5
67147: ARRAY
67148: PUSH
67149: LD_INT 2
67151: ARRAY
67152: PPUSH
67153: LD_VAR 0 1
67157: PPUSH
67158: CALL_OW 255
67162: PPUSH
67163: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67167: LD_ADDR_EXP 177
67171: PUSH
67172: LD_EXP 177
67176: PPUSH
67177: LD_VAR 0 6
67181: PPUSH
67182: LD_EXP 177
67186: PUSH
67187: LD_VAR 0 6
67191: ARRAY
67192: PPUSH
67193: LD_VAR 0 5
67197: PPUSH
67198: CALL_OW 3
67202: PPUSH
67203: CALL_OW 1
67207: ST_TO_ADDR
// end ; end ;
67208: GO 67046
67210: POP
67211: POP
// end ;
67212: LD_VAR 0 4
67216: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67217: LD_INT 0
67219: PPUSH
67220: PPUSH
67221: PPUSH
67222: PPUSH
67223: PPUSH
67224: PPUSH
67225: PPUSH
67226: PPUSH
67227: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67228: LD_VAR 0 1
67232: PPUSH
67233: CALL_OW 264
67237: PUSH
67238: LD_EXP 97
67242: EQUAL
67243: NOT
67244: PUSH
67245: LD_VAR 0 1
67249: PUSH
67250: LD_EXP 176
67254: IN
67255: NOT
67256: OR
67257: IFFALSE 67261
// exit ;
67259: GO 67583
// index := GetElementIndex ( minersList , unit ) ;
67261: LD_ADDR_VAR 0 6
67265: PUSH
67266: LD_EXP 176
67270: PPUSH
67271: LD_VAR 0 1
67275: PPUSH
67276: CALL 13137 0 2
67280: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67281: LD_ADDR_VAR 0 8
67285: PUSH
67286: LD_EXP 178
67290: PUSH
67291: LD_EXP 177
67295: PUSH
67296: LD_VAR 0 6
67300: ARRAY
67301: MINUS
67302: ST_TO_ADDR
// if not minesFreeAmount then
67303: LD_VAR 0 8
67307: NOT
67308: IFFALSE 67312
// exit ;
67310: GO 67583
// tmp := [ ] ;
67312: LD_ADDR_VAR 0 7
67316: PUSH
67317: EMPTY
67318: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67319: LD_ADDR_VAR 0 5
67323: PUSH
67324: DOUBLE
67325: LD_INT 1
67327: DEC
67328: ST_TO_ADDR
67329: LD_VAR 0 8
67333: PUSH
67334: FOR_TO
67335: IFFALSE 67530
// begin _d := rand ( 0 , 5 ) ;
67337: LD_ADDR_VAR 0 11
67341: PUSH
67342: LD_INT 0
67344: PPUSH
67345: LD_INT 5
67347: PPUSH
67348: CALL_OW 12
67352: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67353: LD_ADDR_VAR 0 12
67357: PUSH
67358: LD_INT 2
67360: PPUSH
67361: LD_INT 6
67363: PPUSH
67364: CALL_OW 12
67368: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67369: LD_ADDR_VAR 0 9
67373: PUSH
67374: LD_VAR 0 2
67378: PPUSH
67379: LD_VAR 0 11
67383: PPUSH
67384: LD_VAR 0 12
67388: PPUSH
67389: CALL_OW 272
67393: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67394: LD_ADDR_VAR 0 10
67398: PUSH
67399: LD_VAR 0 3
67403: PPUSH
67404: LD_VAR 0 11
67408: PPUSH
67409: LD_VAR 0 12
67413: PPUSH
67414: CALL_OW 273
67418: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67419: LD_VAR 0 9
67423: PPUSH
67424: LD_VAR 0 10
67428: PPUSH
67429: CALL_OW 488
67433: PUSH
67434: LD_VAR 0 9
67438: PUSH
67439: LD_VAR 0 10
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_VAR 0 7
67452: IN
67453: NOT
67454: AND
67455: PUSH
67456: LD_VAR 0 9
67460: PPUSH
67461: LD_VAR 0 10
67465: PPUSH
67466: CALL_OW 458
67470: NOT
67471: AND
67472: IFFALSE 67514
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67474: LD_ADDR_VAR 0 7
67478: PUSH
67479: LD_VAR 0 7
67483: PPUSH
67484: LD_VAR 0 7
67488: PUSH
67489: LD_INT 1
67491: PLUS
67492: PPUSH
67493: LD_VAR 0 9
67497: PUSH
67498: LD_VAR 0 10
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PPUSH
67507: CALL_OW 1
67511: ST_TO_ADDR
67512: GO 67528
// i := i - 1 ;
67514: LD_ADDR_VAR 0 5
67518: PUSH
67519: LD_VAR 0 5
67523: PUSH
67524: LD_INT 1
67526: MINUS
67527: ST_TO_ADDR
// end ;
67528: GO 67334
67530: POP
67531: POP
// for i in tmp do
67532: LD_ADDR_VAR 0 5
67536: PUSH
67537: LD_VAR 0 7
67541: PUSH
67542: FOR_IN
67543: IFFALSE 67581
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67545: LD_VAR 0 1
67549: PPUSH
67550: LD_VAR 0 5
67554: PUSH
67555: LD_INT 1
67557: ARRAY
67558: PPUSH
67559: LD_VAR 0 5
67563: PUSH
67564: LD_INT 2
67566: ARRAY
67567: PPUSH
67568: CALL 66523 0 3
67572: NOT
67573: IFFALSE 67579
// exit ;
67575: POP
67576: POP
67577: GO 67583
67579: GO 67542
67581: POP
67582: POP
// end ;
67583: LD_VAR 0 4
67587: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67588: LD_INT 0
67590: PPUSH
67591: PPUSH
67592: PPUSH
67593: PPUSH
67594: PPUSH
67595: PPUSH
67596: PPUSH
// if not GetClass ( unit ) = class_sniper then
67597: LD_VAR 0 1
67601: PPUSH
67602: CALL_OW 257
67606: PUSH
67607: LD_INT 5
67609: EQUAL
67610: NOT
67611: IFFALSE 67615
// exit ;
67613: GO 68003
// dist := 8 ;
67615: LD_ADDR_VAR 0 5
67619: PUSH
67620: LD_INT 8
67622: ST_TO_ADDR
// viewRange := 12 ;
67623: LD_ADDR_VAR 0 7
67627: PUSH
67628: LD_INT 12
67630: ST_TO_ADDR
// side := GetSide ( unit ) ;
67631: LD_ADDR_VAR 0 6
67635: PUSH
67636: LD_VAR 0 1
67640: PPUSH
67641: CALL_OW 255
67645: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67646: LD_INT 61
67648: PPUSH
67649: LD_VAR 0 6
67653: PPUSH
67654: CALL_OW 321
67658: PUSH
67659: LD_INT 2
67661: EQUAL
67662: IFFALSE 67672
// viewRange := 16 ;
67664: LD_ADDR_VAR 0 7
67668: PUSH
67669: LD_INT 16
67671: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67672: LD_VAR 0 1
67676: PPUSH
67677: LD_VAR 0 2
67681: PPUSH
67682: LD_VAR 0 3
67686: PPUSH
67687: CALL_OW 297
67691: PUSH
67692: LD_VAR 0 5
67696: GREATER
67697: IFFALSE 67776
// begin ComMoveXY ( unit , x , y ) ;
67699: LD_VAR 0 1
67703: PPUSH
67704: LD_VAR 0 2
67708: PPUSH
67709: LD_VAR 0 3
67713: PPUSH
67714: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67718: LD_INT 35
67720: PPUSH
67721: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67725: LD_VAR 0 1
67729: PPUSH
67730: LD_VAR 0 2
67734: PPUSH
67735: LD_VAR 0 3
67739: PPUSH
67740: CALL 43964 0 3
67744: NOT
67745: IFFALSE 67749
// exit ;
67747: GO 68003
// until GetDistUnitXY ( unit , x , y ) < dist ;
67749: LD_VAR 0 1
67753: PPUSH
67754: LD_VAR 0 2
67758: PPUSH
67759: LD_VAR 0 3
67763: PPUSH
67764: CALL_OW 297
67768: PUSH
67769: LD_VAR 0 5
67773: LESS
67774: IFFALSE 67718
// end ; ComTurnXY ( unit , x , y ) ;
67776: LD_VAR 0 1
67780: PPUSH
67781: LD_VAR 0 2
67785: PPUSH
67786: LD_VAR 0 3
67790: PPUSH
67791: CALL_OW 118
// wait ( 5 ) ;
67795: LD_INT 5
67797: PPUSH
67798: CALL_OW 67
// _d := GetDir ( unit ) ;
67802: LD_ADDR_VAR 0 10
67806: PUSH
67807: LD_VAR 0 1
67811: PPUSH
67812: CALL_OW 254
67816: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67817: LD_ADDR_VAR 0 8
67821: PUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 250
67831: PPUSH
67832: LD_VAR 0 10
67836: PPUSH
67837: LD_VAR 0 5
67841: PPUSH
67842: CALL_OW 272
67846: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67847: LD_ADDR_VAR 0 9
67851: PUSH
67852: LD_VAR 0 1
67856: PPUSH
67857: CALL_OW 251
67861: PPUSH
67862: LD_VAR 0 10
67866: PPUSH
67867: LD_VAR 0 5
67871: PPUSH
67872: CALL_OW 273
67876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67877: LD_VAR 0 8
67881: PPUSH
67882: LD_VAR 0 9
67886: PPUSH
67887: CALL_OW 488
67891: NOT
67892: IFFALSE 67896
// exit ;
67894: GO 68003
// ComAnimCustom ( unit , 1 ) ;
67896: LD_VAR 0 1
67900: PPUSH
67901: LD_INT 1
67903: PPUSH
67904: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
67908: LD_VAR 0 8
67912: PPUSH
67913: LD_VAR 0 9
67917: PPUSH
67918: LD_VAR 0 6
67922: PPUSH
67923: LD_VAR 0 7
67927: PPUSH
67928: CALL_OW 330
// repeat wait ( 1 ) ;
67932: LD_INT 1
67934: PPUSH
67935: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
67939: LD_VAR 0 1
67943: PPUSH
67944: CALL_OW 316
67948: PUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: CALL_OW 314
67958: OR
67959: PUSH
67960: LD_VAR 0 1
67964: PPUSH
67965: CALL_OW 302
67969: NOT
67970: OR
67971: PUSH
67972: LD_VAR 0 1
67976: PPUSH
67977: CALL_OW 301
67981: OR
67982: IFFALSE 67932
// RemoveSeeing ( _x , _y , side ) ;
67984: LD_VAR 0 8
67988: PPUSH
67989: LD_VAR 0 9
67993: PPUSH
67994: LD_VAR 0 6
67998: PPUSH
67999: CALL_OW 331
// end ; end_of_file
68003: LD_VAR 0 4
68007: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68008: LD_VAR 0 1
68012: PUSH
68013: LD_INT 200
68015: DOUBLE
68016: GREATEREQUAL
68017: IFFALSE 68025
68019: LD_INT 299
68021: DOUBLE
68022: LESSEQUAL
68023: IFTRUE 68027
68025: GO 68059
68027: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68028: LD_VAR 0 1
68032: PPUSH
68033: LD_VAR 0 2
68037: PPUSH
68038: LD_VAR 0 3
68042: PPUSH
68043: LD_VAR 0 4
68047: PPUSH
68048: LD_VAR 0 5
68052: PPUSH
68053: CALL 63746 0 5
68057: GO 68136
68059: LD_INT 300
68061: DOUBLE
68062: GREATEREQUAL
68063: IFFALSE 68071
68065: LD_INT 399
68067: DOUBLE
68068: LESSEQUAL
68069: IFTRUE 68073
68071: GO 68135
68073: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68074: LD_VAR 0 1
68078: PPUSH
68079: LD_VAR 0 2
68083: PPUSH
68084: LD_VAR 0 3
68088: PPUSH
68089: LD_VAR 0 4
68093: PPUSH
68094: LD_VAR 0 5
68098: PPUSH
68099: LD_VAR 0 6
68103: PPUSH
68104: LD_VAR 0 7
68108: PPUSH
68109: LD_VAR 0 8
68113: PPUSH
68114: LD_VAR 0 9
68118: PPUSH
68119: LD_VAR 0 10
68123: PPUSH
68124: LD_VAR 0 11
68128: PPUSH
68129: CALL 61388 0 11
68133: GO 68136
68135: POP
// end ;
68136: PPOPN 11
68138: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68139: LD_VAR 0 1
68143: PPUSH
68144: LD_VAR 0 2
68148: PPUSH
68149: LD_VAR 0 3
68153: PPUSH
68154: LD_VAR 0 4
68158: PPUSH
68159: LD_VAR 0 5
68163: PPUSH
68164: CALL 63482 0 5
// end ;
68168: PPOPN 5
68170: END
