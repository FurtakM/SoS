// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 317 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 89
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// endCutscene = false ;
 257: LD_ADDR_EXP 31
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 265: LD_ADDR_EXP 30
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// kirovFactory = 0 ;
 272: LD_ADDR_EXP 21
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// kirovCompleteFactory = false ;
 280: LD_ADDR_EXP 22
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// enableOmicronAI = true ;
 288: LD_ADDR_EXP 29
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// PrepareRussians ;
 296: CALL 1013 0 0
// PrepareAmericans ;
 300: CALL 5482 0 0
// Nef_PrepareNature ;
 304: CALL 30767 0 0
// MissionIntro ;
 308: CALL 21802 0 0
// end ; end_of_file
 312: LD_VAR 0 1
 316: RET
// export function InitMapConfig ; begin
 317: LD_INT 0
 319: PPUSH
// BaseMapConfig ;
 320: CALL 333 0 0
// MissionMapConfig ;
 324: CALL 435 0 0
// end ;
 328: LD_VAR 0 1
 332: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 336: LD_ADDR_EXP 32
 340: PUSH
 341: LD_INT 8
 343: PUSH
 344: LD_INT 12
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 363: LD_ADDR_EXP 33
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 386: LD_ADDR_EXP 34
 390: PUSH
 391: LD_INT 5
 393: NEG
 394: PPUSH
 395: LD_INT 5
 397: PPUSH
 398: CALL_OW 12
 402: PUSH
 403: EMPTY
 404: LIST
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 37
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 03_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 03_
 421: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 422: LD_ADDR_EXP 36
 426: PUSH
 427: LD_STRING 02_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; export omicronBlockerPoints ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 438: LD_ADDR_EXP 38
 442: PUSH
 443: LD_INT 7
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 6
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 463: LD_ADDR_EXP 40
 467: PUSH
 468: LD_INT 84000
 470: PUSH
 471: LD_INT 73500
 473: PUSH
 474: LD_INT 63000
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 488: LD_ADDR_EXP 41
 492: PUSH
 493: LD_INT 150
 495: PUSH
 496: LD_INT 100
 498: PUSH
 499: LD_INT 50
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 513: LD_ADDR_EXP 42
 517: PUSH
 518: LD_INT 100
 520: PUSH
 521: LD_INT 50
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 538: LD_ADDR_EXP 43
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 2
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 563: LD_ADDR_EXP 46
 567: PUSH
 568: LD_INT 8
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 47
 592: PUSH
 593: LD_INT 17850
 595: PUSH
 596: LD_INT 16800
 598: PUSH
 599: LD_INT 15750
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// omicronBlockerPoints = [ [ 47 , 14 ] , [ 57 , 39 ] , [ 61 , 60 ] , [ 44 , 76 ] , [ 44 , 4 ] , [ 55 , 29 ] ] ;
 613: LD_ADDR_EXP 48
 617: PUSH
 618: LD_INT 47
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 57
 630: PUSH
 631: LD_INT 39
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 61
 640: PUSH
 641: LD_INT 60
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: PUSH
 648: LD_INT 44
 650: PUSH
 651: LD_INT 76
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 44
 660: PUSH
 661: LD_INT 4
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: LD_INT 55
 670: PUSH
 671: LD_INT 29
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: PUSH
 678: EMPTY
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ;
 686: LD_VAR 0 1
 690: RET
// every 0 0$1 trigger debugMode do var i ;
 691: LD_EXP 37
 695: IFFALSE 1010
 697: GO 699
 699: DISABLE
 700: LD_INT 0
 702: PPUSH
// begin enable ;
 703: ENABLE
// FogOff ( your_side ) ;
 704: LD_OWVAR 2
 708: PPUSH
 709: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 713: LD_ADDR_VAR 0 1
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_OWVAR 2
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 1
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 21
 745: PUSH
 746: LD_INT 2
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: FOR_IN
 768: IFFALSE 784
// SetLives ( i , 1000 ) ;
 770: LD_VAR 0 1
 774: PPUSH
 775: LD_INT 1000
 777: PPUSH
 778: CALL_OW 234
 782: GO 767
 784: POP
 785: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 786: LD_ADDR_VAR 0 1
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_OWVAR 2
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 21
 805: PUSH
 806: LD_INT 1
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PPUSH
 817: CALL_OW 69
 821: PUSH
 822: FOR_IN
 823: IFFALSE 887
// begin SetSkill ( i , skill_combat , 10 ) ;
 825: LD_VAR 0 1
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 10
 835: PPUSH
 836: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 840: LD_VAR 0 1
 844: PPUSH
 845: LD_INT 2
 847: PPUSH
 848: LD_INT 10
 850: PPUSH
 851: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 855: LD_VAR 0 1
 859: PPUSH
 860: LD_INT 3
 862: PPUSH
 863: LD_INT 10
 865: PPUSH
 866: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 870: LD_VAR 0 1
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 10
 880: PPUSH
 881: CALL_OW 237
// end ;
 885: GO 822
 887: POP
 888: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 889: LD_ADDR_VAR 0 1
 893: PUSH
 894: LD_INT 22
 896: PUSH
 897: LD_OWVAR 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 2
 908: PUSH
 909: LD_INT 30
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 1008
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 946: LD_VAR 0 1
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 9999
 961: PPUSH
 962: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: CALL_OW 274
 975: PPUSH
 976: LD_INT 2
 978: PPUSH
 979: LD_INT 9999
 981: PPUSH
 982: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 986: LD_VAR 0 1
 990: PPUSH
 991: CALL_OW 274
 995: PPUSH
 996: LD_INT 3
 998: PPUSH
 999: LD_INT 9999
1001: PPUSH
1002: CALL_OW 277
// end ;
1006: GO 943
1008: POP
1009: POP
// end ; end_of_file
1010: PPOPN 1
1012: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
1013: LD_INT 0
1015: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
1016: LD_ADDR_EXP 81
1020: PUSH
1021: LD_INT 0
1023: PUSH
1024: LD_INT 0
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 0
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
1039: LD_ADDR_EXP 75
1043: PUSH
1044: EMPTY
1045: ST_TO_ADDR
// PrepareKirovBase ;
1046: CALL 2102 0 0
// PrepareHeroes ;
1050: CALL 1083 0 0
// PrepareKirovPersonel ;
1054: CALL 2867 0 0
// PrepareBeriaBase ;
1058: CALL 1504 0 0
// PrepareSecondBaseTeam ;
1062: CALL 4010 0 0
// PrepareGrishko ;
1066: CALL 3195 0 0
// PrepareOtherBuildings ;
1070: CALL 3444 0 0
// PrepareVehicles ;
1074: CALL 3268 0 0
// end ;
1078: LD_VAR 0 1
1082: RET
// function PrepareHeroes ; begin
1083: LD_INT 0
1085: PPUSH
// uc_side = 3 ;
1086: LD_ADDR_OWVAR 20
1090: PUSH
1091: LD_INT 3
1093: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1094: LD_ADDR_EXP 49
1098: PUSH
1099: LD_STRING Burlak
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL 6912 0 2
1109: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1110: LD_ADDR_EXP 50
1114: PUSH
1115: LD_STRING Gnyevko
1117: PPUSH
1118: LD_INT 1
1120: PPUSH
1121: CALL 6912 0 2
1125: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1126: LD_ADDR_EXP 52
1130: PUSH
1131: LD_STRING Kovalyuk
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: CALL 6912 0 2
1141: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1142: LD_ADDR_EXP 51
1146: PUSH
1147: LD_STRING Kirilenkova
1149: PPUSH
1150: LD_INT 1
1152: PPUSH
1153: CALL 6912 0 2
1157: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1158: LD_EXP 49
1162: PUSH
1163: LD_EXP 50
1167: PUSH
1168: LD_EXP 52
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: LIST
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1185: LD_EXP 51
1189: PPUSH
1190: LD_INT 4
1192: PPUSH
1193: CALL_OW 336
// uc_side = 6 ;
1197: LD_ADDR_OWVAR 20
1201: PUSH
1202: LD_INT 6
1204: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1205: LD_EXP 1
1209: NOT
1210: PUSH
1211: LD_STRING 02_Belkov
1213: PPUSH
1214: CALL_OW 28
1218: AND
1219: IFFALSE 1320
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1221: LD_ADDR_EXP 53
1225: PUSH
1226: LD_STRING Belkov
1228: PPUSH
1229: LD_INT 1
1231: PPUSH
1232: CALL 6912 0 2
1236: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1237: LD_STRING 02_Belkov2
1239: PPUSH
1240: CALL_OW 28
1244: IFFALSE 1283
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1246: LD_ADDR_EXP 54
1250: PUSH
1251: LD_STRING Belkov2
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: CALL 6912 0 2
1261: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1262: LD_EXP 54
1266: PPUSH
1267: LD_INT 159
1269: PPUSH
1270: LD_INT 107
1272: PPUSH
1273: LD_INT 5
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1283: LD_ADDR_EXP 63
1287: PUSH
1288: LD_EXP 53
1292: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1293: LD_EXP 53
1297: PPUSH
1298: LD_INT 165
1300: PPUSH
1301: LD_INT 110
1303: PPUSH
1304: LD_INT 0
1306: PPUSH
1307: CALL_OW 48
// ComHold ( Belkov ) ;
1311: LD_EXP 53
1315: PPUSH
1316: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1320: LD_EXP 1
1324: PUSH
1325: LD_STRING 02_Belkov2
1327: PPUSH
1328: CALL_OW 28
1332: AND
1333: IFFALSE 1388
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1335: LD_ADDR_EXP 54
1339: PUSH
1340: LD_STRING Belkov2
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL 6912 0 2
1350: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1351: LD_ADDR_EXP 63
1355: PUSH
1356: LD_EXP 54
1360: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1361: LD_EXP 54
1365: PPUSH
1366: LD_INT 165
1368: PPUSH
1369: LD_INT 110
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 48
// ComHold ( Belkov2 ) ;
1379: LD_EXP 54
1383: PPUSH
1384: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1388: LD_EXP 53
1392: PUSH
1393: LD_EXP 54
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PPUSH
1402: LD_INT 1
1404: PPUSH
1405: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1409: LD_EXP 49
1413: PPUSH
1414: LD_INT 164
1416: PPUSH
1417: LD_INT 108
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: CALL_OW 48
// ComHold ( Burlak ) ;
1427: LD_EXP 49
1431: PPUSH
1432: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1436: LD_EXP 50
1440: PPUSH
1441: LD_INT 159
1443: PPUSH
1444: LD_INT 107
1446: PPUSH
1447: LD_INT 5
1449: PPUSH
1450: LD_INT 0
1452: PPUSH
1453: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1457: LD_EXP 52
1461: PPUSH
1462: LD_INT 159
1464: PPUSH
1465: LD_INT 107
1467: PPUSH
1468: LD_INT 5
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1478: LD_EXP 51
1482: PPUSH
1483: LD_INT 159
1485: PPUSH
1486: LD_INT 107
1488: PPUSH
1489: LD_INT 5
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 50
// end ;
1499: LD_VAR 0 1
1503: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1504: LD_INT 0
1506: PPUSH
1507: PPUSH
1508: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1509: LD_ADDR_EXP 59
1513: PUSH
1514: LD_STRING 02_BeriaBase_2
1516: PPUSH
1517: EMPTY
1518: PPUSH
1519: CALL_OW 30
1523: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1524: LD_ADDR_EXP 58
1528: PUSH
1529: LD_STRING 02_other_beria
1531: PPUSH
1532: CALL_OW 31
1536: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1537: LD_ADDR_EXP 56
1541: PUSH
1542: LD_STRING 02_other_survivors
1544: PPUSH
1545: CALL_OW 31
1549: ST_TO_ADDR
// uc_side = 3 ;
1550: LD_ADDR_OWVAR 20
1554: PUSH
1555: LD_INT 3
1557: ST_TO_ADDR
// uc_nation = 3 ;
1558: LD_ADDR_OWVAR 21
1562: PUSH
1563: LD_INT 3
1565: ST_TO_ADDR
// for i := 1 to beriaBase do
1566: LD_ADDR_VAR 0 2
1570: PUSH
1571: DOUBLE
1572: LD_INT 1
1574: DEC
1575: ST_TO_ADDR
1576: LD_EXP 59
1580: PUSH
1581: FOR_TO
1582: IFFALSE 1835
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1584: LD_ADDR_OWVAR 42
1588: PUSH
1589: LD_EXP 59
1593: PUSH
1594: LD_VAR 0 2
1598: ARRAY
1599: PUSH
1600: LD_INT 1
1602: ARRAY
1603: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1604: LD_ADDR_OWVAR 43
1608: PUSH
1609: LD_EXP 59
1613: PUSH
1614: LD_VAR 0 2
1618: ARRAY
1619: PUSH
1620: LD_INT 5
1622: ARRAY
1623: ST_TO_ADDR
// if bc_type = b_lab then
1624: LD_OWVAR 42
1628: PUSH
1629: LD_INT 6
1631: EQUAL
1632: IFFALSE 1650
// begin bc_kind1 = b_lab_basic ;
1634: LD_ADDR_OWVAR 44
1638: PUSH
1639: LD_INT 9
1641: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1642: LD_ADDR_OWVAR 45
1646: PUSH
1647: LD_INT 9
1649: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1650: LD_OWVAR 42
1654: PUSH
1655: LD_INT 7
1657: EQUAL
1658: PUSH
1659: LD_OWVAR 42
1663: PUSH
1664: LD_INT 8
1666: EQUAL
1667: OR
1668: IFFALSE 1784
// begin if beriaBase [ i ] [ 7 ] then
1670: LD_EXP 59
1674: PUSH
1675: LD_VAR 0 2
1679: ARRAY
1680: PUSH
1681: LD_INT 7
1683: ARRAY
1684: IFFALSE 1706
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1686: LD_ADDR_OWVAR 44
1690: PUSH
1691: LD_EXP 59
1695: PUSH
1696: LD_VAR 0 2
1700: ARRAY
1701: PUSH
1702: LD_INT 7
1704: ARRAY
1705: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1706: LD_EXP 59
1710: PUSH
1711: LD_VAR 0 2
1715: ARRAY
1716: PUSH
1717: LD_INT 8
1719: ARRAY
1720: IFFALSE 1742
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1722: LD_ADDR_OWVAR 45
1726: PUSH
1727: LD_EXP 59
1731: PUSH
1732: LD_VAR 0 2
1736: ARRAY
1737: PUSH
1738: LD_INT 8
1740: ARRAY
1741: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1742: LD_EXP 59
1746: PUSH
1747: LD_VAR 0 2
1751: ARRAY
1752: PUSH
1753: LD_INT 7
1755: ARRAY
1756: NOT
1757: PUSH
1758: LD_EXP 59
1762: PUSH
1763: LD_VAR 0 2
1767: ARRAY
1768: PUSH
1769: LD_INT 8
1771: ARRAY
1772: NOT
1773: AND
1774: IFFALSE 1784
// bc_type := b_lab ;
1776: LD_ADDR_OWVAR 42
1780: PUSH
1781: LD_INT 6
1783: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1784: LD_EXP 59
1788: PUSH
1789: LD_VAR 0 2
1793: ARRAY
1794: PUSH
1795: LD_INT 2
1797: ARRAY
1798: PPUSH
1799: LD_EXP 59
1803: PUSH
1804: LD_VAR 0 2
1808: ARRAY
1809: PUSH
1810: LD_INT 3
1812: ARRAY
1813: PPUSH
1814: LD_EXP 59
1818: PUSH
1819: LD_VAR 0 2
1823: ARRAY
1824: PUSH
1825: LD_INT 4
1827: ARRAY
1828: PPUSH
1829: CALL_OW 47
// end ;
1833: GO 1581
1835: POP
1836: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1837: LD_ADDR_EXP 60
1841: PUSH
1842: LD_INT 22
1844: PUSH
1845: LD_INT 3
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 30
1854: PUSH
1855: LD_INT 0
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PPUSH
1866: CALL_OW 69
1870: PUSH
1871: LD_INT 1
1873: ARRAY
1874: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1875: LD_EXP 60
1879: PPUSH
1880: LD_STRING beria
1882: PPUSH
1883: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1887: LD_EXP 60
1891: PPUSH
1892: CALL_OW 274
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: LD_EXP 2
1904: PPUSH
1905: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1909: LD_EXP 60
1913: PPUSH
1914: CALL_OW 274
1918: PPUSH
1919: LD_INT 2
1921: PPUSH
1922: LD_EXP 3
1926: PPUSH
1927: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1931: LD_EXP 60
1935: PPUSH
1936: CALL_OW 274
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: LD_EXP 60
1948: PPUSH
1949: CALL_OW 274
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: CALL_OW 275
1961: PUSH
1962: LD_EXP 41
1966: PLUS
1967: PPUSH
1968: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1972: LD_EXP 60
1976: PPUSH
1977: CALL_OW 274
1981: PPUSH
1982: LD_INT 2
1984: PPUSH
1985: LD_EXP 60
1989: PPUSH
1990: CALL_OW 274
1994: PPUSH
1995: LD_INT 2
1997: PPUSH
1998: CALL_OW 275
2002: PUSH
2003: LD_EXP 42
2007: PLUS
2008: PPUSH
2009: CALL_OW 277
// uc_side = 6 ;
2013: LD_ADDR_OWVAR 20
2017: PUSH
2018: LD_INT 6
2020: ST_TO_ADDR
// for i in otherBeriaUnits do
2021: LD_ADDR_VAR 0 2
2025: PUSH
2026: LD_EXP 58
2030: PUSH
2031: FOR_IN
2032: IFFALSE 2057
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2034: LD_VAR 0 2
2038: PPUSH
2039: LD_INT 159
2041: PPUSH
2042: LD_INT 107
2044: PPUSH
2045: LD_INT 10
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 50
2055: GO 2031
2057: POP
2058: POP
// for i in other_survivors do
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: LD_EXP 56
2068: PUSH
2069: FOR_IN
2070: IFFALSE 2095
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 159
2079: PPUSH
2080: LD_INT 107
2082: PPUSH
2083: LD_INT 10
2085: PPUSH
2086: LD_INT 0
2088: PPUSH
2089: CALL_OW 50
2093: GO 2069
2095: POP
2096: POP
// end ;
2097: LD_VAR 0 1
2101: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2102: LD_INT 0
2104: PPUSH
2105: PPUSH
2106: PPUSH
2107: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2108: LD_ADDR_EXP 66
2112: PUSH
2113: LD_STRING 02_KirovBase_3
2115: PPUSH
2116: EMPTY
2117: PPUSH
2118: CALL_OW 30
2122: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2123: LD_ADDR_EXP 65
2127: PUSH
2128: LD_STRING 02_other_kirov
2130: PPUSH
2131: CALL_OW 31
2135: ST_TO_ADDR
// uc_side = 6 ;
2136: LD_ADDR_OWVAR 20
2140: PUSH
2141: LD_INT 6
2143: ST_TO_ADDR
// uc_nation = 3 ;
2144: LD_ADDR_OWVAR 21
2148: PUSH
2149: LD_INT 3
2151: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2152: LD_ADDR_EXP 61
2156: PUSH
2157: LD_STRING Kurin
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL 6912 0 2
2167: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2168: LD_EXP 61
2172: PPUSH
2173: LD_INT 166
2175: PPUSH
2176: LD_INT 109
2178: PPUSH
2179: LD_INT 0
2181: PPUSH
2182: CALL_OW 48
// ComHold ( Kurin ) ;
2186: LD_EXP 61
2190: PPUSH
2191: CALL_OW 140
// for i := 1 to kirovBase do
2195: LD_ADDR_VAR 0 2
2199: PUSH
2200: DOUBLE
2201: LD_INT 1
2203: DEC
2204: ST_TO_ADDR
2205: LD_EXP 66
2209: PUSH
2210: FOR_TO
2211: IFFALSE 2649
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2213: LD_ADDR_OWVAR 42
2217: PUSH
2218: LD_EXP 66
2222: PUSH
2223: LD_VAR 0 2
2227: ARRAY
2228: PUSH
2229: LD_INT 1
2231: ARRAY
2232: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2233: LD_ADDR_OWVAR 43
2237: PUSH
2238: LD_EXP 66
2242: PUSH
2243: LD_VAR 0 2
2247: ARRAY
2248: PUSH
2249: LD_INT 5
2251: ARRAY
2252: ST_TO_ADDR
// if bc_type = b_depot then
2253: LD_OWVAR 42
2257: PUSH
2258: LD_INT 0
2260: EQUAL
2261: IFFALSE 2271
// bc_type = b_warehouse ;
2263: LD_ADDR_OWVAR 42
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if bc_type = b_armoury then
2271: LD_OWVAR 42
2275: PUSH
2276: LD_INT 4
2278: EQUAL
2279: IFFALSE 2289
// bc_type = b_barracks ;
2281: LD_ADDR_OWVAR 42
2285: PUSH
2286: LD_INT 5
2288: ST_TO_ADDR
// if bc_type = b_lab then
2289: LD_OWVAR 42
2293: PUSH
2294: LD_INT 6
2296: EQUAL
2297: IFFALSE 2315
// begin bc_kind1 = b_lab_weapon ;
2299: LD_ADDR_OWVAR 44
2303: PUSH
2304: LD_INT 10
2306: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2307: LD_ADDR_OWVAR 45
2311: PUSH
2312: LD_INT 9
2314: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2315: LD_OWVAR 42
2319: PUSH
2320: LD_INT 2
2322: EQUAL
2323: IFFALSE 2333
// bc_type = b_factory ;
2325: LD_ADDR_OWVAR 42
2329: PUSH
2330: LD_INT 3
2332: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2333: LD_OWVAR 42
2337: PUSH
2338: LD_INT 7
2340: EQUAL
2341: PUSH
2342: LD_OWVAR 42
2346: PUSH
2347: LD_INT 8
2349: EQUAL
2350: OR
2351: IFFALSE 2467
// begin if kirovBase [ i ] [ 7 ] then
2353: LD_EXP 66
2357: PUSH
2358: LD_VAR 0 2
2362: ARRAY
2363: PUSH
2364: LD_INT 7
2366: ARRAY
2367: IFFALSE 2389
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2369: LD_ADDR_OWVAR 44
2373: PUSH
2374: LD_EXP 66
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 7
2387: ARRAY
2388: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2389: LD_EXP 66
2393: PUSH
2394: LD_VAR 0 2
2398: ARRAY
2399: PUSH
2400: LD_INT 8
2402: ARRAY
2403: IFFALSE 2425
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2405: LD_ADDR_OWVAR 45
2409: PUSH
2410: LD_EXP 66
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 8
2423: ARRAY
2424: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2425: LD_EXP 66
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: PUSH
2436: LD_INT 7
2438: ARRAY
2439: NOT
2440: PUSH
2441: LD_EXP 66
2445: PUSH
2446: LD_VAR 0 2
2450: ARRAY
2451: PUSH
2452: LD_INT 8
2454: ARRAY
2455: NOT
2456: AND
2457: IFFALSE 2467
// bc_type := b_lab ;
2459: LD_ADDR_OWVAR 42
2463: PUSH
2464: LD_INT 6
2466: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2467: LD_OWVAR 42
2471: PUSH
2472: LD_INT 31
2474: EQUAL
2475: IFFALSE 2499
// begin bc_type = b_bunker ;
2477: LD_ADDR_OWVAR 42
2481: PUSH
2482: LD_INT 32
2484: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2485: LD_ADDR_EXP 77
2489: PUSH
2490: LD_EXP 77
2494: PUSH
2495: LD_INT 1
2497: PLUS
2498: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2499: LD_ADDR_VAR 0 4
2503: PUSH
2504: LD_EXP 66
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: PPUSH
2519: LD_EXP 66
2523: PUSH
2524: LD_VAR 0 2
2528: ARRAY
2529: PUSH
2530: LD_INT 3
2532: ARRAY
2533: PPUSH
2534: LD_EXP 66
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: PUSH
2545: LD_INT 4
2547: ARRAY
2548: PPUSH
2549: CALL_OW 47
2553: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2554: LD_VAR 0 3
2558: PUSH
2559: LD_INT 4
2561: LESS
2562: PUSH
2563: LD_OWVAR 42
2567: PUSH
2568: LD_INT 32
2570: EQUAL
2571: AND
2572: IFFALSE 2621
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2574: LD_VAR 0 4
2578: PPUSH
2579: LD_INT 42
2581: PUSH
2582: LD_INT 43
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PUSH
2589: LD_INT 1
2591: PPUSH
2592: LD_INT 2
2594: PPUSH
2595: CALL_OW 12
2599: ARRAY
2600: PPUSH
2601: CALL_OW 431
// tmp = tmp + 1 ;
2605: LD_ADDR_VAR 0 3
2609: PUSH
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 1
2617: PLUS
2618: ST_TO_ADDR
// end else
2619: GO 2647
// if bc_type = b_bunker then
2621: LD_OWVAR 42
2625: PUSH
2626: LD_INT 32
2628: EQUAL
2629: IFFALSE 2647
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2631: LD_ADDR_EXP 72
2635: PUSH
2636: LD_EXP 72
2640: PUSH
2641: LD_VAR 0 4
2645: ADD
2646: ST_TO_ADDR
// end ;
2647: GO 2210
2649: POP
2650: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2651: LD_ADDR_EXP 67
2655: PUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 6
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: LD_INT 30
2668: PUSH
2669: LD_INT 1
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: PPUSH
2680: CALL_OW 69
2684: PUSH
2685: LD_INT 1
2687: ARRAY
2688: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2689: LD_EXP 67
2693: PPUSH
2694: LD_STRING kirov
2696: PPUSH
2697: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2701: LD_EXP 67
2705: PPUSH
2706: CALL_OW 274
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: LD_INT 5000
2716: PPUSH
2717: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2721: LD_EXP 67
2725: PPUSH
2726: CALL_OW 274
2730: PPUSH
2731: LD_INT 2
2733: PPUSH
2734: LD_INT 2000
2736: PPUSH
2737: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2741: LD_ADDR_EXP 69
2745: PUSH
2746: LD_INT 22
2748: PUSH
2749: LD_INT 6
2751: PUSH
2752: EMPTY
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 21
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: EMPTY
2763: LIST
2764: LIST
2765: PUSH
2766: LD_INT 30
2768: PUSH
2769: LD_INT 5
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: PPUSH
2786: LD_INT 145
2788: PPUSH
2789: LD_INT 102
2791: PPUSH
2792: CALL_OW 73
2796: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2797: LD_ADDR_EXP 70
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_INT 6
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 21
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL_OW 69
2841: PUSH
2842: LD_EXP 69
2846: DIFF
2847: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2848: LD_ADDR_EXP 70
2852: PUSH
2853: LD_EXP 70
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: ST_TO_ADDR
// end ;
2862: LD_VAR 0 1
2866: RET
// export function PrepareKirovPersonel ; var i ; begin
2867: LD_INT 0
2869: PPUSH
2870: PPUSH
// PrepareEngineer ( false , 7 ) ;
2871: LD_INT 0
2873: PPUSH
2874: LD_INT 7
2876: PPUSH
2877: CALL_OW 382
// kirovEng = CreateHuman ;
2881: LD_ADDR_EXP 71
2885: PUSH
2886: CALL_OW 44
2890: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2891: LD_EXP 71
2895: PPUSH
2896: LD_INT 159
2898: PPUSH
2899: LD_INT 107
2901: PPUSH
2902: LD_INT 10
2904: PPUSH
2905: LD_INT 0
2907: PPUSH
2908: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2912: LD_ADDR_EXP 62
2916: PUSH
2917: LD_STRING Popov
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL 6912 0 2
2927: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2928: LD_EXP 62
2932: PPUSH
2933: LD_INT 4
2935: PPUSH
2936: LD_INT 0
2938: PPUSH
2939: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2943: LD_EXP 62
2947: PPUSH
2948: LD_INT 98
2950: PPUSH
2951: LD_INT 36
2953: PPUSH
2954: CALL_OW 118
// hc_name :=  ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_STRING 
2965: ST_TO_ADDR
// hc_gallery :=  ;
2966: LD_ADDR_OWVAR 33
2970: PUSH
2971: LD_STRING 
2973: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_INT 2
2979: PPUSH
2980: CALL_OW 381
// ruScout = CreateHuman ;
2984: LD_ADDR_EXP 64
2988: PUSH
2989: CALL_OW 44
2993: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2994: LD_EXP 64
2998: PPUSH
2999: LD_INT 3
3001: PPUSH
3002: LD_INT 0
3004: PPUSH
3005: CALL_OW 49
// ComCrawl ( ruScout ) ;
3009: LD_EXP 64
3013: PPUSH
3014: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
3018: LD_EXP 64
3022: PPUSH
3023: LD_INT 98
3025: PPUSH
3026: LD_INT 36
3028: PPUSH
3029: CALL_OW 178
// uc_side = 6 ;
3033: LD_ADDR_OWVAR 20
3037: PUSH
3038: LD_INT 6
3040: ST_TO_ADDR
// for i in otherKirovUnits do
3041: LD_ADDR_VAR 0 2
3045: PUSH
3046: LD_EXP 65
3050: PUSH
3051: FOR_IN
3052: IFFALSE 3188
// begin SetSide ( i , 6 ) ;
3054: LD_VAR 0 2
3058: PPUSH
3059: LD_INT 6
3061: PPUSH
3062: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
3066: LD_VAR 0 2
3070: PPUSH
3071: CALL_OW 257
3075: PUSH
3076: LD_INT 1
3078: EQUAL
3079: PUSH
3080: LD_EXP 77
3084: PUSH
3085: LD_INT 0
3087: GREATER
3088: AND
3089: IFFALSE 3165
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3091: LD_VAR 0 2
3095: PPUSH
3096: LD_INT 18
3098: PPUSH
3099: LD_INT 22
3101: PUSH
3102: LD_INT 6
3104: PUSH
3105: EMPTY
3106: LIST
3107: LIST
3108: PUSH
3109: LD_INT 21
3111: PUSH
3112: LD_INT 3
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 30
3121: PUSH
3122: LD_INT 32
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 70
3138: PUSH
3139: LD_EXP 77
3143: ARRAY
3144: PPUSH
3145: CALL 8456 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3149: LD_ADDR_EXP 77
3153: PUSH
3154: LD_EXP 77
3158: PUSH
3159: LD_INT 1
3161: MINUS
3162: ST_TO_ADDR
// end else
3163: GO 3186
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3165: LD_VAR 0 2
3169: PPUSH
3170: LD_INT 159
3172: PPUSH
3173: LD_INT 107
3175: PPUSH
3176: LD_INT 10
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 50
// end ; end ;
3186: GO 3051
3188: POP
3189: POP
// end ;
3190: LD_VAR 0 1
3194: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3195: LD_INT 0
3197: PPUSH
3198: PPUSH
3199: PPUSH
3200: PPUSH
// uc_side = 6 ;
3201: LD_ADDR_OWVAR 20
3205: PUSH
3206: LD_INT 6
3208: ST_TO_ADDR
// uc_nation = 3 ;
3209: LD_ADDR_OWVAR 21
3213: PUSH
3214: LD_INT 3
3216: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3217: LD_ADDR_EXP 82
3221: PUSH
3222: LD_STRING Grishko
3224: PPUSH
3225: LD_INT 0
3227: PPUSH
3228: CALL 6912 0 2
3232: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3233: LD_EXP 82
3237: PPUSH
3238: LD_INT 218
3240: PPUSH
3241: LD_INT 108
3243: PPUSH
3244: LD_INT 3
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 50
// ComHold ( Grishko ) ;
3254: LD_EXP 82
3258: PPUSH
3259: CALL_OW 140
// end ;
3263: LD_VAR 0 1
3267: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
// uc_side = 3 ;
3273: LD_ADDR_OWVAR 20
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// uc_nation = 3 ;
3281: LD_ADDR_OWVAR 21
3285: PUSH
3286: LD_INT 3
3288: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3289: LD_ADDR_VAR 0 2
3293: PUSH
3294: DOUBLE
3295: LD_INT 1
3297: DEC
3298: ST_TO_ADDR
3299: LD_EXP 4
3303: PUSH
3304: FOR_TO
3305: IFFALSE 3437
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3307: LD_EXP 4
3311: PUSH
3312: LD_VAR 0 2
3316: ARRAY
3317: PUSH
3318: LD_INT 1
3320: ARRAY
3321: PPUSH
3322: LD_EXP 4
3326: PUSH
3327: LD_VAR 0 2
3331: ARRAY
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_EXP 4
3341: PUSH
3342: LD_VAR 0 2
3346: ARRAY
3347: PUSH
3348: LD_INT 3
3350: ARRAY
3351: PPUSH
3352: LD_EXP 4
3356: PUSH
3357: LD_VAR 0 2
3361: ARRAY
3362: PUSH
3363: LD_INT 4
3365: ARRAY
3366: PPUSH
3367: LD_EXP 4
3371: PUSH
3372: LD_VAR 0 2
3376: ARRAY
3377: PUSH
3378: LD_INT 5
3380: ARRAY
3381: PPUSH
3382: CALL 36410 0 5
// vehicle = CreateVehicle ;
3386: LD_ADDR_VAR 0 3
3390: PUSH
3391: CALL_OW 45
3395: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3396: LD_VAR 0 3
3400: PPUSH
3401: LD_INT 25
3403: PPUSH
3404: LD_INT 0
3406: PPUSH
3407: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3411: LD_VAR 0 3
3415: PPUSH
3416: LD_EXP 4
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: PUSH
3427: LD_INT 6
3429: ARRAY
3430: PPUSH
3431: CALL_OW 234
// end ;
3435: GO 3304
3437: POP
3438: POP
// end ;
3439: LD_VAR 0 1
3443: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3444: LD_INT 0
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: LD_STRING 02_OtherBuildings_4
3457: PPUSH
3458: EMPTY
3459: PPUSH
3460: CALL_OW 30
3464: ST_TO_ADDR
// uc_side = 3 ;
3465: LD_ADDR_OWVAR 20
3469: PUSH
3470: LD_INT 3
3472: ST_TO_ADDR
// for i := 1 to otherBuildings do
3473: LD_ADDR_VAR 0 2
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_VAR 0 3
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3750
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3491: LD_ADDR_OWVAR 21
3495: PUSH
3496: LD_VAR 0 3
3500: PUSH
3501: LD_VAR 0 2
3505: ARRAY
3506: PUSH
3507: LD_INT 6
3509: ARRAY
3510: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_VAR 0 3
3520: PUSH
3521: LD_VAR 0 2
3525: ARRAY
3526: PUSH
3527: LD_INT 1
3529: ARRAY
3530: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3531: LD_ADDR_OWVAR 43
3535: PUSH
3536: LD_VAR 0 3
3540: PUSH
3541: LD_VAR 0 2
3545: ARRAY
3546: PUSH
3547: LD_INT 5
3549: ARRAY
3550: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_VAR 0 3
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PUSH
3567: LD_INT 2
3569: ARRAY
3570: PPUSH
3571: LD_VAR 0 3
3575: PUSH
3576: LD_VAR 0 2
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: PPUSH
3586: LD_VAR 0 3
3590: PUSH
3591: LD_VAR 0 2
3595: ARRAY
3596: PUSH
3597: LD_INT 4
3599: ARRAY
3600: PPUSH
3601: CALL_OW 47
3605: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3606: LD_VAR 0 4
3610: PPUSH
3611: LD_VAR 0 3
3615: PUSH
3616: LD_VAR 0 2
3620: ARRAY
3621: PUSH
3622: LD_INT 7
3624: ARRAY
3625: PPUSH
3626: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3630: LD_VAR 0 4
3634: PPUSH
3635: CALL_OW 266
3639: PUSH
3640: LD_INT 0
3642: PUSH
3643: LD_INT 1
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: IN
3650: IFFALSE 3748
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3652: LD_VAR 0 4
3656: PPUSH
3657: CALL_OW 274
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: LD_VAR 0 3
3669: PUSH
3670: LD_VAR 0 2
3674: ARRAY
3675: PUSH
3676: LD_INT 8
3678: ARRAY
3679: PPUSH
3680: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3684: LD_VAR 0 4
3688: PPUSH
3689: CALL_OW 274
3693: PPUSH
3694: LD_INT 1
3696: PPUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_VAR 0 2
3706: ARRAY
3707: PUSH
3708: LD_INT 9
3710: ARRAY
3711: PPUSH
3712: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3716: LD_VAR 0 4
3720: PPUSH
3721: CALL_OW 274
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_VAR 0 3
3733: PUSH
3734: LD_VAR 0 2
3738: ARRAY
3739: PUSH
3740: LD_INT 10
3742: ARRAY
3743: PPUSH
3744: CALL_OW 277
// end ; end ;
3748: GO 3488
3750: POP
3751: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3752: LD_ADDR_VAR 0 3
3756: PUSH
3757: LD_STRING 02_AmericanBuildings_5
3759: PPUSH
3760: EMPTY
3761: PPUSH
3762: CALL_OW 30
3766: ST_TO_ADDR
// uc_side = 1 ;
3767: LD_ADDR_OWVAR 20
3771: PUSH
3772: LD_INT 1
3774: ST_TO_ADDR
// uc_nation = 1 ;
3775: LD_ADDR_OWVAR 21
3779: PUSH
3780: LD_INT 1
3782: ST_TO_ADDR
// for i := 1 to otherBuildings do
3783: LD_ADDR_VAR 0 2
3787: PUSH
3788: DOUBLE
3789: LD_INT 1
3791: DEC
3792: ST_TO_ADDR
3793: LD_VAR 0 3
3797: PUSH
3798: FOR_TO
3799: IFFALSE 4003
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3801: LD_ADDR_OWVAR 42
3805: PUSH
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 2
3815: ARRAY
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3821: LD_ADDR_OWVAR 43
3825: PUSH
3826: LD_VAR 0 3
3830: PUSH
3831: LD_VAR 0 2
3835: ARRAY
3836: PUSH
3837: LD_INT 5
3839: ARRAY
3840: ST_TO_ADDR
// if bc_type = b_breastwork then
3841: LD_OWVAR 42
3845: PUSH
3846: LD_INT 31
3848: EQUAL
3849: IFFALSE 3922
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3851: LD_ADDR_VAR 0 4
3855: PUSH
3856: LD_VAR 0 3
3860: PUSH
3861: LD_VAR 0 2
3865: ARRAY
3866: PUSH
3867: LD_INT 2
3869: ARRAY
3870: PPUSH
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 2
3880: ARRAY
3881: PUSH
3882: LD_INT 3
3884: ARRAY
3885: PPUSH
3886: LD_VAR 0 3
3890: PUSH
3891: LD_VAR 0 2
3895: ARRAY
3896: PUSH
3897: LD_INT 4
3899: ARRAY
3900: PPUSH
3901: CALL_OW 47
3905: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3906: LD_EXP 43
3910: PPUSH
3911: LD_VAR 0 4
3915: PPUSH
3916: CALL 8546 0 2
// end else
3920: GO 3977
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3922: LD_ADDR_VAR 0 4
3926: PUSH
3927: LD_VAR 0 3
3931: PUSH
3932: LD_VAR 0 2
3936: ARRAY
3937: PUSH
3938: LD_INT 2
3940: ARRAY
3941: PPUSH
3942: LD_VAR 0 3
3946: PUSH
3947: LD_VAR 0 2
3951: ARRAY
3952: PUSH
3953: LD_INT 3
3955: ARRAY
3956: PPUSH
3957: LD_VAR 0 3
3961: PUSH
3962: LD_VAR 0 2
3966: ARRAY
3967: PUSH
3968: LD_INT 4
3970: ARRAY
3971: PPUSH
3972: CALL_OW 47
3976: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3977: LD_VAR 0 4
3981: PPUSH
3982: LD_VAR 0 3
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: PUSH
3993: LD_INT 7
3995: ARRAY
3996: PPUSH
3997: CALL_OW 234
// end ;
4001: GO 3798
4003: POP
4004: POP
// end ;
4005: LD_VAR 0 1
4009: RET
// export function PrepareSecondBaseTeam ; var i ; begin
4010: LD_INT 0
4012: PPUSH
4013: PPUSH
// secondBaseTeam = [ ] ;
4014: LD_ADDR_EXP 78
4018: PUSH
4019: EMPTY
4020: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
4021: LD_INT 226
4023: PPUSH
4024: LD_INT 109
4026: PPUSH
4027: LD_INT 6
4029: PPUSH
4030: CALL_OW 441
// uc_side = 6 ;
4034: LD_ADDR_OWVAR 20
4038: PUSH
4039: LD_INT 6
4041: ST_TO_ADDR
// uc_nation = 3 ;
4042: LD_ADDR_OWVAR 21
4046: PUSH
4047: LD_INT 3
4049: ST_TO_ADDR
// hc_name =  ;
4050: LD_ADDR_OWVAR 26
4054: PUSH
4055: LD_STRING 
4057: ST_TO_ADDR
// hc_gallery =  ;
4058: LD_ADDR_OWVAR 33
4062: PUSH
4063: LD_STRING 
4065: ST_TO_ADDR
// for i := 1 to 3 do
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_INT 3
4078: PUSH
4079: FOR_TO
4080: IFFALSE 4133
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4082: LD_INT 0
4084: PPUSH
4085: LD_EXP 43
4089: PPUSH
4090: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4094: LD_ADDR_EXP 78
4098: PUSH
4099: LD_EXP 78
4103: PUSH
4104: CALL_OW 44
4108: ADD
4109: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4110: LD_EXP 78
4114: PUSH
4115: LD_VAR 0 2
4119: ARRAY
4120: PPUSH
4121: LD_INT 19
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 49
// end ;
4131: GO 4079
4133: POP
4134: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4135: LD_INT 0
4137: PPUSH
4138: LD_EXP 43
4142: PPUSH
4143: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4147: LD_ADDR_EXP 78
4151: PUSH
4152: LD_EXP 78
4156: PUSH
4157: CALL_OW 44
4161: ADD
4162: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4163: LD_EXP 78
4167: PUSH
4168: LD_INT 4
4170: ARRAY
4171: PPUSH
4172: LD_INT 19
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4182: LD_INT 0
4184: PPUSH
4185: LD_EXP 43
4189: PPUSH
4190: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4194: LD_ADDR_EXP 78
4198: PUSH
4199: LD_EXP 78
4203: PUSH
4204: CALL_OW 44
4208: ADD
4209: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4210: LD_EXP 78
4214: PUSH
4215: LD_INT 5
4217: ARRAY
4218: PPUSH
4219: LD_INT 19
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4229: LD_EXP 78
4233: PPUSH
4234: LD_INT 214
4236: PPUSH
4237: LD_INT 105
4239: PPUSH
4240: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4244: LD_EXP 78
4248: PPUSH
4249: LD_INT 25
4251: PUSH
4252: LD_INT 2
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PPUSH
4259: CALL_OW 72
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: LD_INT 222
4269: PPUSH
4270: LD_INT 115
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4280: LD_EXP 78
4284: PPUSH
4285: LD_INT 25
4287: PUSH
4288: LD_INT 2
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 72
4299: PPUSH
4300: LD_INT 224
4302: PPUSH
4303: LD_INT 107
4305: PPUSH
4306: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4310: LD_EXP 78
4314: PPUSH
4315: LD_INT 25
4317: PUSH
4318: LD_INT 2
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 72
4329: PPUSH
4330: LD_INT 228
4332: PPUSH
4333: LD_INT 110
4335: PPUSH
4336: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4340: LD_EXP 78
4344: PPUSH
4345: LD_INT 25
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: PPUSH
4355: CALL_OW 72
4359: PPUSH
4360: LD_INT 29
4362: PPUSH
4363: LD_INT 226
4365: PPUSH
4366: LD_INT 109
4368: PPUSH
4369: LD_INT 3
4371: PPUSH
4372: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4376: LD_EXP 78
4380: PPUSH
4381: LD_INT 25
4383: PUSH
4384: LD_INT 2
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: PPUSH
4391: CALL_OW 72
4395: PPUSH
4396: LD_INT 4
4398: PPUSH
4399: LD_INT 216
4401: PPUSH
4402: LD_INT 114
4404: PPUSH
4405: LD_INT 0
4407: PPUSH
4408: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4412: LD_EXP 78
4416: PPUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 2
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 72
4431: PPUSH
4432: LD_INT 31
4434: PPUSH
4435: LD_INT 215
4437: PPUSH
4438: LD_INT 103
4440: PPUSH
4441: LD_INT 3
4443: PPUSH
4444: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4448: LD_EXP 78
4452: PPUSH
4453: LD_INT 25
4455: PUSH
4456: LD_INT 2
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PPUSH
4463: CALL_OW 72
4467: PPUSH
4468: LD_INT 31
4470: PPUSH
4471: LD_INT 227
4473: PPUSH
4474: LD_INT 116
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4484: LD_EXP 78
4488: PPUSH
4489: LD_INT 25
4491: PUSH
4492: LD_INT 2
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PPUSH
4499: CALL_OW 72
4503: PPUSH
4504: LD_INT 208
4506: PPUSH
4507: LD_INT 106
4509: PPUSH
4510: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4514: LD_EXP 78
4518: PPUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 2
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 72
4533: PPUSH
4534: LD_INT 209
4536: PPUSH
4537: LD_INT 105
4539: PPUSH
4540: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4544: LD_EXP 78
4548: PUSH
4549: LD_INT 5
4551: ARRAY
4552: PPUSH
4553: LD_INT 209
4555: PPUSH
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4563: LD_EXP 78
4567: PUSH
4568: LD_INT 5
4570: ARRAY
4571: PPUSH
4572: LD_INT 208
4574: PPUSH
4575: LD_INT 106
4577: PPUSH
4578: CALL_OW 178
// end ;
4582: LD_VAR 0 1
4586: RET
// export function SpawnKirovSupport ; var i , un ; begin
4587: LD_INT 0
4589: PPUSH
4590: PPUSH
4591: PPUSH
// uc_side = 6 ;
4592: LD_ADDR_OWVAR 20
4596: PUSH
4597: LD_INT 6
4599: ST_TO_ADDR
// uc_nation = 3 ;
4600: LD_ADDR_OWVAR 21
4604: PUSH
4605: LD_INT 3
4607: ST_TO_ADDR
// hc_name =  ;
4608: LD_ADDR_OWVAR 26
4612: PUSH
4613: LD_STRING 
4615: ST_TO_ADDR
// hc_gallery :=  ;
4616: LD_ADDR_OWVAR 33
4620: PUSH
4621: LD_STRING 
4623: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4624: LD_ADDR_VAR 0 2
4628: PUSH
4629: DOUBLE
4630: LD_INT 1
4632: DEC
4633: ST_TO_ADDR
4634: LD_EXP 80
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4728
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4642: LD_INT 0
4644: PPUSH
4645: LD_INT 1
4647: PPUSH
4648: LD_INT 4
4650: PPUSH
4651: CALL_OW 12
4655: PPUSH
4656: LD_INT 1
4658: PPUSH
4659: LD_INT 2
4661: PPUSH
4662: CALL_OW 12
4666: PPUSH
4667: CALL_OW 380
// un = CreateHuman ;
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: CALL_OW 44
4680: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4681: LD_ADDR_EXP 79
4685: PUSH
4686: LD_EXP 79
4690: PUSH
4691: LD_VAR 0 3
4695: ADD
4696: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4697: LD_VAR 0 3
4701: PPUSH
4702: LD_INT 19
4704: PPUSH
4705: LD_INT 0
4707: PPUSH
4708: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4712: LD_VAR 0 3
4716: PPUSH
4717: LD_EXP 67
4721: PPUSH
4722: CALL_OW 120
// end ;
4726: GO 4639
4728: POP
4729: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4730: LD_ADDR_VAR 0 2
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 81
4744: PUSH
4745: LD_INT 1
4747: ARRAY
4748: PUSH
4749: LD_INT 4
4751: PLUS
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4852
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4756: LD_INT 0
4758: PPUSH
4759: LD_INT 1
4761: PPUSH
4762: LD_INT 1
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: CALL_OW 12
4772: PPUSH
4773: CALL_OW 380
// un = CreateHuman ;
4777: LD_ADDR_VAR 0 3
4781: PUSH
4782: CALL_OW 44
4786: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4787: LD_VAR 0 3
4791: PPUSH
4792: LD_INT 19
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 49
// if i > kirovBunkersToOccupy then
4802: LD_VAR 0 2
4806: PUSH
4807: LD_EXP 73
4811: GREATER
4812: IFFALSE 4830
// ComEnterUnit ( un , ru2_bar2 ) else
4814: LD_VAR 0 3
4818: PPUSH
4819: LD_EXP 70
4823: PPUSH
4824: CALL_OW 120
4828: GO 4850
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4830: LD_VAR 0 3
4834: PPUSH
4835: LD_EXP 73
4839: PUSH
4840: LD_VAR 0 2
4844: ARRAY
4845: PPUSH
4846: CALL_OW 120
// end ;
4850: GO 4753
4852: POP
4853: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_EXP 81
4868: PUSH
4869: LD_INT 3
4871: ARRAY
4872: PUSH
4873: FOR_TO
4874: IFFALSE 4977
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4876: LD_INT 0
4878: PPUSH
4879: LD_INT 3
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: LD_INT 3
4887: PPUSH
4888: CALL_OW 12
4892: PPUSH
4893: CALL_OW 380
// un = CreateHuman ;
4897: LD_ADDR_VAR 0 3
4901: PUSH
4902: CALL_OW 44
4906: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4907: LD_VAR 0 3
4911: PPUSH
4912: LD_INT 19
4914: PPUSH
4915: LD_INT 0
4917: PPUSH
4918: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4922: LD_VAR 0 3
4926: PPUSH
4927: LD_INT 22
4929: PUSH
4930: LD_INT 6
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 21
4939: PUSH
4940: LD_INT 3
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 3
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: LIST
4961: PPUSH
4962: CALL_OW 69
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: CALL_OW 120
// end ;
4975: GO 4873
4977: POP
4978: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4979: LD_ADDR_VAR 0 2
4983: PUSH
4984: DOUBLE
4985: LD_INT 1
4987: DEC
4988: ST_TO_ADDR
4989: LD_EXP 81
4993: PUSH
4994: LD_INT 4
4996: ARRAY
4997: PUSH
4998: LD_INT 2
5000: PLUS
5001: PUSH
5002: FOR_TO
5003: IFFALSE 5109
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
5005: LD_INT 0
5007: PPUSH
5008: LD_INT 4
5010: PPUSH
5011: LD_INT 1
5013: PPUSH
5014: LD_INT 3
5016: PPUSH
5017: CALL_OW 12
5021: PPUSH
5022: CALL_OW 380
// un = CreateHuman ;
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: CALL_OW 44
5035: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
5036: LD_VAR 0 3
5040: PPUSH
5041: LD_INT 19
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
5051: LD_VAR 0 3
5055: PPUSH
5056: LD_INT 18
5058: PPUSH
5059: LD_INT 22
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 21
5071: PUSH
5072: LD_INT 3
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 6
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 70
5098: PUSH
5099: LD_INT 1
5101: ARRAY
5102: PPUSH
5103: CALL_OW 120
// end ;
5107: GO 5002
5109: POP
5110: POP
// end ;
5111: LD_VAR 0 1
5115: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5116: LD_INT 0
5118: PPUSH
5119: PPUSH
5120: PPUSH
// survivorsArabianAttack = [ ] ;
5121: LD_ADDR_EXP 79
5125: PUSH
5126: EMPTY
5127: ST_TO_ADDR
// limit = 9 ;
5128: LD_ADDR_VAR 0 2
5132: PUSH
5133: LD_INT 9
5135: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5136: LD_ADDR_EXP 79
5140: PUSH
5141: LD_EXP 79
5145: PUSH
5146: LD_EXP 62
5150: ADD
5151: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5152: LD_EXP 53
5156: PPUSH
5157: CALL_OW 302
5161: PUSH
5162: LD_EXP 53
5166: PPUSH
5167: CALL_OW 255
5171: PUSH
5172: LD_INT 6
5174: EQUAL
5175: AND
5176: IFFALSE 5208
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5178: LD_ADDR_EXP 79
5182: PUSH
5183: LD_EXP 79
5187: PUSH
5188: LD_EXP 53
5192: ADD
5193: ST_TO_ADDR
// limit = limit - 1 ;
5194: LD_ADDR_VAR 0 2
5198: PUSH
5199: LD_VAR 0 2
5203: PUSH
5204: LD_INT 1
5206: MINUS
5207: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5208: LD_EXP 54
5212: PPUSH
5213: CALL_OW 302
5217: PUSH
5218: LD_EXP 54
5222: PPUSH
5223: CALL_OW 255
5227: PUSH
5228: LD_INT 6
5230: EQUAL
5231: AND
5232: IFFALSE 5264
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5234: LD_ADDR_EXP 79
5238: PUSH
5239: LD_EXP 79
5243: PUSH
5244: LD_EXP 54
5248: ADD
5249: ST_TO_ADDR
// limit = limit - 1 ;
5250: LD_ADDR_VAR 0 2
5254: PUSH
5255: LD_VAR 0 2
5259: PUSH
5260: LD_INT 1
5262: MINUS
5263: ST_TO_ADDR
// end ; for unit in other_survivors do
5264: LD_ADDR_VAR 0 3
5268: PUSH
5269: LD_EXP 56
5273: PUSH
5274: FOR_IN
5275: IFFALSE 5335
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5277: LD_VAR 0 3
5281: PPUSH
5282: CALL_OW 302
5286: PUSH
5287: LD_VAR 0 3
5291: PPUSH
5292: CALL_OW 255
5296: PUSH
5297: LD_INT 6
5299: EQUAL
5300: AND
5301: IFFALSE 5333
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5303: LD_ADDR_EXP 79
5307: PUSH
5308: LD_EXP 79
5312: PUSH
5313: LD_VAR 0 3
5317: ADD
5318: ST_TO_ADDR
// limit = limit - 1 ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 2
5328: PUSH
5329: LD_INT 1
5331: MINUS
5332: ST_TO_ADDR
// end ; end ;
5333: GO 5274
5335: POP
5336: POP
// for unit in otherBeriaUnits do
5337: LD_ADDR_VAR 0 3
5341: PUSH
5342: LD_EXP 58
5346: PUSH
5347: FOR_IN
5348: IFFALSE 5408
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5350: LD_VAR 0 3
5354: PPUSH
5355: CALL_OW 302
5359: PUSH
5360: LD_VAR 0 3
5364: PPUSH
5365: CALL_OW 255
5369: PUSH
5370: LD_INT 6
5372: EQUAL
5373: AND
5374: IFFALSE 5406
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5376: LD_ADDR_EXP 79
5380: PUSH
5381: LD_EXP 79
5385: PUSH
5386: LD_VAR 0 3
5390: ADD
5391: ST_TO_ADDR
// limit = limit - 1 ;
5392: LD_ADDR_VAR 0 2
5396: PUSH
5397: LD_VAR 0 2
5401: PUSH
5402: LD_INT 1
5404: MINUS
5405: ST_TO_ADDR
// end ; end ;
5406: GO 5347
5408: POP
5409: POP
// if limit > 0 then
5410: LD_VAR 0 2
5414: PUSH
5415: LD_INT 0
5417: GREATER
5418: IFFALSE 5430
// survivorsToSpawn = limit ;
5420: LD_ADDR_EXP 80
5424: PUSH
5425: LD_VAR 0 2
5429: ST_TO_ADDR
// end ;
5430: LD_VAR 0 1
5434: RET
// export function PrepareScholtze ; begin
5435: LD_INT 0
5437: PPUSH
// uc_side = 8 ;
5438: LD_ADDR_OWVAR 20
5442: PUSH
5443: LD_INT 8
5445: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5446: LD_ADDR_EXP 55
5450: PUSH
5451: LD_STRING Scholtze
5453: PPUSH
5454: LD_INT 0
5456: PPUSH
5457: CALL 6912 0 2
5461: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5462: LD_EXP 55
5466: PPUSH
5467: LD_INT 30
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: CALL_OW 49
// end ; end_of_file
5477: LD_VAR 0 1
5481: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5482: LD_INT 0
5484: PPUSH
// amSupportTroops = [ ] ;
5485: LD_ADDR_EXP 84
5489: PUSH
5490: EMPTY
5491: ST_TO_ADDR
// PrepareOmicronBase ;
5492: CALL 5501 0 0
// end ;
5496: LD_VAR 0 1
5500: RET
// function PrepareOmicronBase ; var base ; begin
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5505: LD_ADDR_EXP 86
5509: PUSH
5510: LD_INT 64
5512: PPUSH
5513: LD_INT 13
5515: PPUSH
5516: LD_STRING omikron
5518: PPUSH
5519: LD_INT 1
5521: PUSH
5522: LD_INT 2
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: PUSH
5533: LD_OWVAR 67
5537: ARRAY
5538: PPUSH
5539: LD_INT 3000
5541: PUSH
5542: LD_INT 3000
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: LD_INT 7
5555: PUSH
5556: LD_INT 3
5558: PUSH
5559: LD_INT 4
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: CALL 39819 0 6
5575: ST_TO_ADDR
// case Difficulty of 2 :
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: DOUBLE
5584: EQUAL
5585: IFTRUE 5589
5587: GO 5605
5589: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5590: LD_INT 51
5592: PPUSH
5593: LD_INT 1
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 322
// end ; 3 :
5603: GO 5643
5605: LD_INT 3
5607: DOUBLE
5608: EQUAL
5609: IFTRUE 5613
5611: GO 5642
5613: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5614: LD_INT 49
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5627: LD_INT 51
5629: PPUSH
5630: LD_INT 1
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: CALL_OW 322
// end ; end ;
5640: GO 5643
5642: POP
// end ;
5643: LD_VAR 0 1
5647: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5648: LD_INT 0
5650: PPUSH
5651: PPUSH
5652: PPUSH
5653: PPUSH
// amIntroUnits = [ ] ;
5654: LD_ADDR_EXP 83
5658: PUSH
5659: EMPTY
5660: ST_TO_ADDR
// uc_side = 1 ;
5661: LD_ADDR_OWVAR 20
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// uc_nation = nation_american ;
5669: LD_ADDR_OWVAR 21
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5677: LD_ADDR_OWVAR 37
5681: PUSH
5682: LD_INT 3
5684: ST_TO_ADDR
// vc_control = control_manual ;
5685: LD_ADDR_OWVAR 38
5689: PUSH
5690: LD_INT 1
5692: ST_TO_ADDR
// vc_engine = engine_combustion ;
5693: LD_ADDR_OWVAR 39
5697: PUSH
5698: LD_INT 1
5700: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5701: LD_ADDR_OWVAR 40
5705: PUSH
5706: LD_INT 5
5708: ST_TO_ADDR
// veh = CreateVehicle ;
5709: LD_ADDR_VAR 0 3
5713: PUSH
5714: CALL_OW 45
5718: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5731: LD_ADDR_EXP 83
5735: PUSH
5736: LD_EXP 83
5740: PUSH
5741: LD_VAR 0 3
5745: ADD
5746: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5747: LD_VAR 0 3
5751: PPUSH
5752: LD_INT 5
5754: PPUSH
5755: LD_INT 0
5757: PPUSH
5758: CALL_OW 49
// for i := 1 to 5 do
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: DOUBLE
5768: LD_INT 1
5770: DEC
5771: ST_TO_ADDR
5772: LD_INT 5
5774: PUSH
5775: FOR_TO
5776: IFFALSE 5873
// begin hc_name :=  ;
5778: LD_ADDR_OWVAR 26
5782: PUSH
5783: LD_STRING 
5785: ST_TO_ADDR
// hc_gallery :=  ;
5786: LD_ADDR_OWVAR 33
5790: PUSH
5791: LD_STRING 
5793: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: CALL_OW 381
// human = CreateHuman ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: CALL_OW 44
5813: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5814: LD_ADDR_EXP 83
5818: PUSH
5819: LD_EXP 83
5823: PUSH
5824: LD_VAR 0 4
5828: ADD
5829: ST_TO_ADDR
// if i < 5 then
5830: LD_VAR 0 2
5834: PUSH
5835: LD_INT 5
5837: LESS
5838: IFFALSE 5857
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5840: LD_VAR 0 4
5844: PPUSH
5845: LD_INT 5
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 49
5855: GO 5871
// begin PlaceHumanInUnit ( human , veh ) ;
5857: LD_VAR 0 4
5861: PPUSH
5862: LD_VAR 0 3
5866: PPUSH
5867: CALL_OW 52
// end ; end ;
5871: GO 5775
5873: POP
5874: POP
// end ;
5875: LD_VAR 0 1
5879: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
// uc_side := 1 ;
5887: LD_ADDR_OWVAR 20
5891: PUSH
5892: LD_INT 1
5894: ST_TO_ADDR
// uc_nation := 1 ;
5895: LD_ADDR_OWVAR 21
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// hc_name :=  ;
5903: LD_ADDR_OWVAR 26
5907: PUSH
5908: LD_STRING 
5910: ST_TO_ADDR
// hc_gallery :=  ;
5911: LD_ADDR_OWVAR 33
5915: PUSH
5916: LD_STRING 
5918: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5919: LD_ADDR_VAR 0 6
5923: PUSH
5924: DOUBLE
5925: LD_INT 1
5927: DEC
5928: ST_TO_ADDR
5929: LD_VAR 0 1
5933: PUSH
5934: FOR_TO
5935: IFFALSE 5994
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5937: LD_INT 0
5939: PPUSH
5940: LD_EXP 43
5944: PPUSH
5945: CALL_OW 381
// un = CreateHuman ;
5949: LD_ADDR_VAR 0 7
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5959: LD_ADDR_EXP 84
5963: PUSH
5964: LD_EXP 84
5968: PUSH
5969: LD_VAR 0 7
5973: ADD
5974: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5975: LD_VAR 0 7
5979: PPUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: LD_INT 0
5987: PPUSH
5988: CALL_OW 49
// end ;
5992: GO 5934
5994: POP
5995: POP
// for i := 1 to scientistsAmount do
5996: LD_ADDR_VAR 0 6
6000: PUSH
6001: DOUBLE
6002: LD_INT 1
6004: DEC
6005: ST_TO_ADDR
6006: LD_VAR 0 2
6010: PUSH
6011: FOR_TO
6012: IFFALSE 6071
// begin PrepareScientist ( false , enemySkillLevel ) ;
6014: LD_INT 0
6016: PPUSH
6017: LD_EXP 43
6021: PPUSH
6022: CALL_OW 384
// un = CreateHuman ;
6026: LD_ADDR_VAR 0 7
6030: PUSH
6031: CALL_OW 44
6035: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6036: LD_ADDR_EXP 84
6040: PUSH
6041: LD_EXP 84
6045: PUSH
6046: LD_VAR 0 7
6050: ADD
6051: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6052: LD_VAR 0 7
6056: PPUSH
6057: LD_VAR 0 4
6061: PPUSH
6062: LD_INT 0
6064: PPUSH
6065: CALL_OW 49
// end ;
6069: GO 6011
6071: POP
6072: POP
// for i := 1 to vehiclesAmount do
6073: LD_ADDR_VAR 0 6
6077: PUSH
6078: DOUBLE
6079: LD_INT 1
6081: DEC
6082: ST_TO_ADDR
6083: LD_VAR 0 3
6087: PUSH
6088: FOR_TO
6089: IFFALSE 6255
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6091: LD_ADDR_OWVAR 40
6095: PUSH
6096: LD_INT 2
6098: PUSH
6099: LD_INT 4
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 1
6112: PPUSH
6113: LD_INT 3
6115: PPUSH
6116: CALL_OW 12
6120: ARRAY
6121: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6122: LD_ADDR_OWVAR 37
6126: PUSH
6127: LD_INT 3
6129: ST_TO_ADDR
// vc_control = control_manual ;
6130: LD_ADDR_OWVAR 38
6134: PUSH
6135: LD_INT 1
6137: ST_TO_ADDR
// vc_engine = engine_combustion ;
6138: LD_ADDR_OWVAR 39
6142: PUSH
6143: LD_INT 1
6145: ST_TO_ADDR
// veh = CreateVehicle ;
6146: LD_ADDR_VAR 0 8
6150: PUSH
6151: CALL_OW 45
6155: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6156: LD_ADDR_EXP 84
6160: PUSH
6161: LD_EXP 84
6165: PUSH
6166: LD_VAR 0 8
6170: ADD
6171: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6172: LD_VAR 0 8
6176: PPUSH
6177: LD_VAR 0 4
6181: PPUSH
6182: LD_INT 0
6184: PPUSH
6185: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6189: LD_INT 0
6191: PPUSH
6192: LD_EXP 43
6196: PPUSH
6197: CALL_OW 383
// un = CreateHuman ;
6201: LD_ADDR_VAR 0 7
6205: PUSH
6206: CALL_OW 44
6210: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6211: LD_ADDR_EXP 84
6215: PUSH
6216: LD_EXP 84
6220: PUSH
6221: LD_VAR 0 7
6225: ADD
6226: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6227: LD_VAR 0 7
6231: PPUSH
6232: LD_VAR 0 8
6236: PPUSH
6237: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6241: LD_VAR 0 8
6245: PPUSH
6246: LD_INT 100
6248: PPUSH
6249: CALL_OW 240
// end ;
6253: GO 6088
6255: POP
6256: POP
// case area of NorthAmericanSpawnArea :
6257: LD_VAR 0 4
6261: PUSH
6262: LD_INT 7
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6281
6270: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6271: LD_ADDR_VAR 0 9
6275: PUSH
6276: LD_INT 10
6278: ST_TO_ADDR
6279: GO 6320
6281: LD_INT 9
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6300
6289: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6290: LD_ADDR_VAR 0 9
6294: PUSH
6295: LD_INT 11
6297: ST_TO_ADDR
6298: GO 6320
6300: LD_INT 8
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6319
6308: POP
// road = SouthRoadArea2 ; end ;
6309: LD_ADDR_VAR 0 9
6313: PUSH
6314: LD_INT 12
6316: ST_TO_ADDR
6317: GO 6320
6319: POP
// MoveToBase ( amSupportTroops , road ) ;
6320: LD_EXP 84
6324: PPUSH
6325: LD_VAR 0 9
6329: PPUSH
6330: CALL 18920 0 2
// end ;
6334: LD_VAR 0 5
6338: RET
// export function PrepareAmericanPatrol ; var un ; begin
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
// amPatrol = [ ] ;
6343: LD_ADDR_EXP 85
6347: PUSH
6348: EMPTY
6349: ST_TO_ADDR
// uc_side = 1 ;
6350: LD_ADDR_OWVAR 20
6354: PUSH
6355: LD_INT 1
6357: ST_TO_ADDR
// uc_nation = 1 ;
6358: LD_ADDR_OWVAR 21
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6366: LD_ADDR_VAR 0 2
6370: PUSH
6371: LD_STRING Campell
6373: PPUSH
6374: LD_INT 0
6376: PPUSH
6377: CALL 6912 0 2
6381: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6382: LD_ADDR_EXP 85
6386: PUSH
6387: LD_EXP 85
6391: PUSH
6392: LD_VAR 0 2
6396: ADD
6397: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6398: LD_VAR 0 2
6402: PPUSH
6403: LD_INT 14
6405: PPUSH
6406: LD_INT 0
6408: PPUSH
6409: CALL_OW 49
// SetClass ( un , 1 ) ;
6413: LD_VAR 0 2
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6425: LD_INT 1
6427: PPUSH
6428: LD_EXP 43
6432: PPUSH
6433: CALL_OW 381
// un = CreateHuman ;
6437: LD_ADDR_VAR 0 2
6441: PUSH
6442: CALL_OW 44
6446: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6447: LD_ADDR_EXP 85
6451: PUSH
6452: LD_EXP 85
6456: PUSH
6457: LD_VAR 0 2
6461: ADD
6462: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6463: LD_VAR 0 2
6467: PPUSH
6468: LD_INT 14
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6478: LD_EXP 85
6482: PPUSH
6483: LD_EXP 55
6487: PPUSH
6488: CALL_OW 115
// end ; end_of_file
6492: LD_VAR 0 1
6496: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6497: LD_INT 0
6499: PPUSH
6500: PPUSH
6501: PPUSH
6502: PPUSH
// northGroup = [ ] ;
6503: LD_ADDR_EXP 87
6507: PUSH
6508: EMPTY
6509: ST_TO_ADDR
// southGroup = [ ] ;
6510: LD_ADDR_EXP 88
6514: PUSH
6515: EMPTY
6516: ST_TO_ADDR
// uc_side = 2 ;
6517: LD_ADDR_OWVAR 20
6521: PUSH
6522: LD_INT 2
6524: ST_TO_ADDR
// uc_nation = 2 ;
6525: LD_ADDR_OWVAR 21
6529: PUSH
6530: LD_INT 2
6532: ST_TO_ADDR
// hc_name :=  ;
6533: LD_ADDR_OWVAR 26
6537: PUSH
6538: LD_STRING 
6540: ST_TO_ADDR
// hc_gallery :=  ;
6541: LD_ADDR_OWVAR 33
6545: PUSH
6546: LD_STRING 
6548: ST_TO_ADDR
// for i := 1 to 5 do
6549: LD_ADDR_VAR 0 2
6553: PUSH
6554: DOUBLE
6555: LD_INT 1
6557: DEC
6558: ST_TO_ADDR
6559: LD_INT 5
6561: PUSH
6562: FOR_TO
6563: IFFALSE 6677
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6565: LD_INT 13
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 1
6573: PPUSH
6574: LD_INT 26
6576: PPUSH
6577: LD_INT 100
6579: PPUSH
6580: CALL 36410 0 5
// veh = CreateVehicle ;
6584: LD_ADDR_VAR 0 4
6588: PUSH
6589: CALL_OW 45
6593: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6594: LD_ADDR_EXP 88
6598: PUSH
6599: LD_EXP 88
6603: PUSH
6604: LD_VAR 0 4
6608: ADD
6609: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6610: LD_VAR 0 4
6614: PPUSH
6615: LD_INT 23
6617: PPUSH
6618: LD_INT 0
6620: PPUSH
6621: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6625: LD_INT 0
6627: PPUSH
6628: LD_INT 8
6630: PPUSH
6631: CALL_OW 383
// un = CreateHuman ;
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: CALL_OW 44
6644: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6645: LD_ADDR_EXP 88
6649: PUSH
6650: LD_EXP 88
6654: PUSH
6655: LD_VAR 0 3
6659: ADD
6660: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6661: LD_VAR 0 3
6665: PPUSH
6666: LD_VAR 0 4
6670: PPUSH
6671: CALL_OW 52
// end ;
6675: GO 6562
6677: POP
6678: POP
// for i := 1 to 5 do
6679: LD_ADDR_VAR 0 2
6683: PUSH
6684: DOUBLE
6685: LD_INT 1
6687: DEC
6688: ST_TO_ADDR
6689: LD_INT 5
6691: PUSH
6692: FOR_TO
6693: IFFALSE 6748
// begin PrepareSoldier ( false , 8 ) ;
6695: LD_INT 0
6697: PPUSH
6698: LD_INT 8
6700: PPUSH
6701: CALL_OW 381
// un = CreateHuman ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: CALL_OW 44
6714: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6715: LD_ADDR_EXP 88
6719: PUSH
6720: LD_EXP 88
6724: PUSH
6725: LD_VAR 0 3
6729: ADD
6730: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6731: LD_VAR 0 3
6735: PPUSH
6736: LD_INT 23
6738: PPUSH
6739: LD_INT 0
6741: PPUSH
6742: CALL_OW 49
// end ;
6746: GO 6692
6748: POP
6749: POP
// for i := 1 to 10 do
6750: LD_ADDR_VAR 0 2
6754: PUSH
6755: DOUBLE
6756: LD_INT 1
6758: DEC
6759: ST_TO_ADDR
6760: LD_INT 10
6762: PUSH
6763: FOR_TO
6764: IFFALSE 6905
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6766: LD_INT 13
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 1
6774: PPUSH
6775: LD_INT 25
6777: PUSH
6778: LD_INT 27
6780: PUSH
6781: LD_INT 23
6783: PUSH
6784: LD_INT 26
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: LD_INT 1
6795: PPUSH
6796: LD_INT 4
6798: PPUSH
6799: CALL_OW 12
6803: ARRAY
6804: PPUSH
6805: LD_INT 100
6807: PPUSH
6808: CALL 36410 0 5
// veh = CreateVehicle ;
6812: LD_ADDR_VAR 0 4
6816: PUSH
6817: CALL_OW 45
6821: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6822: LD_ADDR_EXP 87
6826: PUSH
6827: LD_EXP 87
6831: PUSH
6832: LD_VAR 0 4
6836: ADD
6837: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6838: LD_VAR 0 4
6842: PPUSH
6843: LD_INT 22
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 8
6858: PPUSH
6859: CALL_OW 383
// un = CreateHuman ;
6863: LD_ADDR_VAR 0 3
6867: PUSH
6868: CALL_OW 44
6872: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6873: LD_ADDR_EXP 87
6877: PUSH
6878: LD_EXP 87
6882: PUSH
6883: LD_VAR 0 3
6887: ADD
6888: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6889: LD_VAR 0 3
6893: PPUSH
6894: LD_VAR 0 4
6898: PPUSH
6899: CALL_OW 52
// end ;
6903: GO 6763
6905: POP
6906: POP
// end ; end_of_file
6907: LD_VAR 0 1
6911: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6912: LD_INT 0
6914: PPUSH
6915: PPUSH
// if exist_mode then
6916: LD_VAR 0 2
6920: IFFALSE 6945
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6922: LD_ADDR_VAR 0 4
6926: PUSH
6927: LD_EXP 36
6931: PUSH
6932: LD_VAR 0 1
6936: STR
6937: PPUSH
6938: CALL_OW 34
6942: ST_TO_ADDR
6943: GO 6960
// unit := NewCharacter ( ident ) ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: CALL_OW 25
6959: ST_TO_ADDR
// result := unit ;
6960: LD_ADDR_VAR 0 3
6964: PUSH
6965: LD_VAR 0 4
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 3
6974: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
// units = characters ;
6981: LD_ADDR_VAR 0 9
6985: PUSH
6986: LD_VAR 0 1
6990: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6991: LD_ADDR_VAR 0 9
6995: PUSH
6996: LD_VAR 0 9
7000: PUSH
7001: LD_EXP 49
7005: PUSH
7006: LD_EXP 50
7010: PUSH
7011: LD_EXP 51
7015: PUSH
7016: LD_EXP 52
7020: PUSH
7021: LD_EXP 53
7025: PUSH
7026: LD_EXP 54
7030: PUSH
7031: LD_EXP 55
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: DIFF
7045: ST_TO_ADDR
// if not units and not canTalkHero then
7046: LD_VAR 0 9
7050: NOT
7051: PUSH
7052: LD_VAR 0 5
7056: NOT
7057: AND
7058: IFFALSE 7062
// exit ;
7060: GO 7235
// if not units then
7062: LD_VAR 0 9
7066: NOT
7067: IFFALSE 7088
// units = characters diff [ Burlak ] ;
7069: LD_ADDR_VAR 0 9
7073: PUSH
7074: LD_VAR 0 1
7078: PUSH
7079: LD_EXP 49
7083: PUSH
7084: EMPTY
7085: LIST
7086: DIFF
7087: ST_TO_ADDR
// if not units and canTalkHero then
7088: LD_VAR 0 9
7092: NOT
7093: PUSH
7094: LD_VAR 0 5
7098: AND
7099: IFFALSE 7103
// exit ;
7101: GO 7235
// speaker := units [ rand ( 1 , units ) ] ;
7103: LD_ADDR_VAR 0 8
7107: PUSH
7108: LD_VAR 0 9
7112: PUSH
7113: LD_INT 1
7115: PPUSH
7116: LD_VAR 0 9
7120: PPUSH
7121: CALL_OW 12
7125: ARRAY
7126: ST_TO_ADDR
// if radio then
7127: LD_VAR 0 4
7131: IFFALSE 7180
// begin if GetSex ( speaker ) = sex_male then
7133: LD_VAR 0 8
7137: PPUSH
7138: CALL_OW 258
7142: PUSH
7143: LD_INT 1
7145: EQUAL
7146: IFFALSE 7164
// SayRadio ( speaker , dialogMID ) else
7148: LD_VAR 0 8
7152: PPUSH
7153: LD_VAR 0 2
7157: PPUSH
7158: CALL_OW 94
7162: GO 7178
// SayRadio ( speaker , dialogFID ) ;
7164: LD_VAR 0 8
7168: PPUSH
7169: LD_VAR 0 3
7173: PPUSH
7174: CALL_OW 94
// end else
7178: GO 7225
// begin if GetSex ( speaker ) = sex_male then
7180: LD_VAR 0 8
7184: PPUSH
7185: CALL_OW 258
7189: PUSH
7190: LD_INT 1
7192: EQUAL
7193: IFFALSE 7211
// Say ( speaker , dialogMID ) else
7195: LD_VAR 0 8
7199: PPUSH
7200: LD_VAR 0 2
7204: PPUSH
7205: CALL_OW 88
7209: GO 7225
// Say ( speaker , dialogFID ) ;
7211: LD_VAR 0 8
7215: PPUSH
7216: LD_VAR 0 3
7220: PPUSH
7221: CALL_OW 88
// end ; result := speaker ;
7225: LD_ADDR_VAR 0 6
7229: PUSH
7230: LD_VAR 0 8
7234: ST_TO_ADDR
// end ;
7235: LD_VAR 0 6
7239: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7240: LD_INT 0
7242: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7243: LD_VAR 0 1
7247: PPUSH
7248: CALL_OW 255
7252: PUSH
7253: LD_VAR 0 3
7257: EQUAL
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 302
7268: AND
7269: IFFALSE 7291
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7271: LD_VAR 0 1
7275: PPUSH
7276: LD_EXP 35
7280: PUSH
7281: LD_VAR 0 2
7285: STR
7286: PPUSH
7287: CALL_OW 38
// end ;
7291: LD_VAR 0 4
7295: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7296: LD_INT 0
7298: PPUSH
7299: PPUSH
7300: PPUSH
// resultCharactersToSave = [ ] ;
7301: LD_ADDR_VAR 0 6
7305: PUSH
7306: EMPTY
7307: ST_TO_ADDR
// for unit in characters do
7308: LD_ADDR_VAR 0 5
7312: PUSH
7313: LD_VAR 0 1
7317: PUSH
7318: FOR_IN
7319: IFFALSE 7367
// if GetSide ( unit ) = side and IsOK ( unit ) then
7321: LD_VAR 0 5
7325: PPUSH
7326: CALL_OW 255
7330: PUSH
7331: LD_VAR 0 3
7335: EQUAL
7336: PUSH
7337: LD_VAR 0 5
7341: PPUSH
7342: CALL_OW 302
7346: AND
7347: IFFALSE 7365
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_VAR 0 6
7358: PUSH
7359: LD_VAR 0 5
7363: ADD
7364: ST_TO_ADDR
7365: GO 7318
7367: POP
7368: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7369: LD_VAR 0 6
7373: PPUSH
7374: LD_EXP 35
7378: PUSH
7379: LD_VAR 0 2
7383: STR
7384: PPUSH
7385: CALL_OW 38
// end ;
7389: LD_VAR 0 4
7393: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7394: LD_INT 0
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
// charsToChoose = otherKirovUnits ;
7400: LD_ADDR_VAR 0 4
7404: PUSH
7405: LD_EXP 65
7409: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7410: LD_ADDR_VAR 0 4
7414: PUSH
7415: LD_VAR 0 4
7419: PUSH
7420: LD_EXP 58
7424: ADD
7425: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7426: LD_ADDR_VAR 0 4
7430: PUSH
7431: LD_VAR 0 4
7435: PUSH
7436: LD_EXP 56
7440: ADD
7441: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7442: LD_ADDR_VAR 0 4
7446: PUSH
7447: LD_VAR 0 4
7451: PUSH
7452: LD_EXP 53
7456: ADD
7457: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7458: LD_ADDR_VAR 0 4
7462: PUSH
7463: LD_VAR 0 4
7467: PUSH
7468: LD_EXP 54
7472: ADD
7473: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7474: LD_ADDR_VAR 0 5
7478: PUSH
7479: LD_STRING text
7481: PPUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 1
7491: PPUSH
7492: LD_INT -5
7494: PUSH
7495: LD_EXP 49
7499: PUSH
7500: LD_EXP 50
7504: PUSH
7505: LD_EXP 52
7509: PUSH
7510: LD_EXP 51
7514: PUSH
7515: LD_INT -6
7517: PUSH
7518: LD_INT -2
7520: PUSH
7521: LD_INT -3
7523: PUSH
7524: LD_INT -5
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_VAR 0 4
7542: ADD
7543: PUSH
7544: LD_INT -6
7546: PUSH
7547: LD_INT -4
7549: PUSH
7550: LD_EXP 61
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: ADD
7560: PPUSH
7561: LD_INT 1
7563: PUSH
7564: LD_INT 3
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: PPUSH
7593: CALL_OW 42
7597: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7598: LD_VAR 0 4
7602: PPUSH
7603: LD_INT 6
7605: PPUSH
7606: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7610: LD_VAR 0 5
7614: PPUSH
7615: LD_INT 3
7617: PPUSH
7618: CALL_OW 235
// SetSurvivorsArabianAttack ;
7622: CALL 5116 0 0
// MoveKurinUnitsToBuildings ;
7626: CALL 9164 0 0
// end ;
7630: LD_VAR 0 2
7634: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7635: LD_INT 0
7637: PPUSH
7638: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7639: LD_ADDR_VAR 0 5
7643: PUSH
7644: LD_VAR 0 1
7648: PPUSH
7649: LD_INT 22
7651: PUSH
7652: LD_VAR 0 2
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 21
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 30
7673: PUSH
7674: LD_VAR 0 3
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: PPUSH
7688: CALL_OW 70
7692: PUSH
7693: FOR_IN
7694: IFFALSE 7727
// begin if UnitsInside ( building ) < 6 then
7696: LD_VAR 0 5
7700: PPUSH
7701: CALL_OW 313
7705: PUSH
7706: LD_INT 6
7708: LESS
7709: IFFALSE 7725
// begin result = building ;
7711: LD_ADDR_VAR 0 4
7715: PUSH
7716: LD_VAR 0 5
7720: ST_TO_ADDR
// exit ;
7721: POP
7722: POP
7723: GO 7737
// end ; end ;
7725: GO 7693
7727: POP
7728: POP
// result = 0 ;
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_INT 0
7736: ST_TO_ADDR
// end ;
7737: LD_VAR 0 4
7741: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7742: LD_INT 0
7744: PPUSH
7745: PPUSH
7746: PPUSH
7747: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7748: LD_ADDR_VAR 0 6
7752: PUSH
7753: LD_INT 34
7755: PUSH
7756: LD_INT 71
7758: PUSH
7759: LD_INT 70
7761: PUSH
7762: LD_INT 69
7764: PUSH
7765: LD_INT 39
7767: PUSH
7768: LD_INT 31
7770: PUSH
7771: LD_INT 14
7773: PUSH
7774: LD_INT 10
7776: PUSH
7777: LD_INT 40
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: ST_TO_ADDR
// resultWeapons = [ ] ;
7791: LD_ADDR_VAR 0 5
7795: PUSH
7796: EMPTY
7797: ST_TO_ADDR
// for i := 1 to weaponTechs do
7798: LD_ADDR_VAR 0 4
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_VAR 0 6
7812: PUSH
7813: FOR_TO
7814: IFFALSE 8001
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7816: LD_VAR 0 6
7820: PUSH
7821: LD_VAR 0 4
7825: ARRAY
7826: PPUSH
7827: LD_VAR 0 2
7831: PPUSH
7832: CALL_OW 482
7836: PUSH
7837: LD_VAR 0 6
7841: PUSH
7842: LD_VAR 0 4
7846: ARRAY
7847: PPUSH
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 321
7857: PUSH
7858: LD_INT 2
7860: EQUAL
7861: AND
7862: IFFALSE 7999
// case nation of nation_american :
7864: LD_VAR 0 2
7868: PUSH
7869: LD_INT 1
7871: DOUBLE
7872: EQUAL
7873: IFTRUE 7877
7875: GO 7912
7877: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7878: LD_ADDR_VAR 0 5
7882: PUSH
7883: LD_VAR 0 5
7887: PUSH
7888: LD_VAR 0 6
7892: PUSH
7893: LD_VAR 0 4
7897: ARRAY
7898: PPUSH
7899: LD_VAR 0 2
7903: PPUSH
7904: CALL 8018 0 2
7908: ADD
7909: ST_TO_ADDR
7910: GO 7999
7912: LD_INT 2
7914: DOUBLE
7915: EQUAL
7916: IFTRUE 7920
7918: GO 7955
7920: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7921: LD_ADDR_VAR 0 5
7925: PUSH
7926: LD_VAR 0 5
7930: PUSH
7931: LD_VAR 0 6
7935: PUSH
7936: LD_VAR 0 4
7940: ARRAY
7941: PPUSH
7942: LD_VAR 0 2
7946: PPUSH
7947: CALL 8018 0 2
7951: ADD
7952: ST_TO_ADDR
7953: GO 7999
7955: LD_INT 3
7957: DOUBLE
7958: EQUAL
7959: IFTRUE 7963
7961: GO 7998
7963: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7964: LD_ADDR_VAR 0 5
7968: PUSH
7969: LD_VAR 0 5
7973: PUSH
7974: LD_VAR 0 6
7978: PUSH
7979: LD_VAR 0 4
7983: ARRAY
7984: PPUSH
7985: LD_VAR 0 2
7989: PPUSH
7990: CALL 8018 0 2
7994: ADD
7995: ST_TO_ADDR
7996: GO 7999
7998: POP
// end ;
7999: GO 7813
8001: POP
8002: POP
// result = resultWeapons ;
8003: LD_ADDR_VAR 0 3
8007: PUSH
8008: LD_VAR 0 5
8012: ST_TO_ADDR
// end ;
8013: LD_VAR 0 3
8017: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8018: LD_INT 0
8020: PPUSH
// case tech of tech_AdvMet :
8021: LD_VAR 0 1
8025: PUSH
8026: LD_INT 34
8028: DOUBLE
8029: EQUAL
8030: IFTRUE 8034
8032: GO 8062
8034: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8035: LD_ADDR_VAR 0 3
8039: PUSH
8040: LD_INT 6
8042: PUSH
8043: LD_STRING 
8045: PUSH
8046: LD_INT 46
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: LD_VAR 0 2
8058: ARRAY
8059: ST_TO_ADDR
8060: GO 8351
8062: LD_INT 71
8064: DOUBLE
8065: EQUAL
8066: IFTRUE 8070
8068: GO 8098
8070: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8071: LD_ADDR_VAR 0 3
8075: PUSH
8076: LD_STRING 
8078: PUSH
8079: LD_STRING 
8081: PUSH
8082: LD_INT 47
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: LD_VAR 0 2
8094: ARRAY
8095: ST_TO_ADDR
8096: GO 8351
8098: LD_INT 70
8100: DOUBLE
8101: EQUAL
8102: IFTRUE 8106
8104: GO 8134
8106: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: LD_STRING 
8114: PUSH
8115: LD_INT 26
8117: PUSH
8118: LD_STRING 
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: LD_VAR 0 2
8130: ARRAY
8131: ST_TO_ADDR
8132: GO 8351
8134: LD_INT 69
8136: DOUBLE
8137: EQUAL
8138: IFTRUE 8142
8140: GO 8170
8142: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8143: LD_ADDR_VAR 0 3
8147: PUSH
8148: LD_INT 4
8150: PUSH
8151: LD_INT 25
8153: PUSH
8154: LD_INT 43
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: PUSH
8162: LD_VAR 0 2
8166: ARRAY
8167: ST_TO_ADDR
8168: GO 8351
8170: LD_INT 39
8172: DOUBLE
8173: EQUAL
8174: IFTRUE 8178
8176: GO 8206
8178: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8179: LD_ADDR_VAR 0 3
8183: PUSH
8184: LD_INT 5
8186: PUSH
8187: LD_INT 27
8189: PUSH
8190: LD_INT 44
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: PUSH
8198: LD_VAR 0 2
8202: ARRAY
8203: ST_TO_ADDR
8204: GO 8351
8206: LD_INT 31
8208: DOUBLE
8209: EQUAL
8210: IFTRUE 8214
8212: GO 8242
8214: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8215: LD_ADDR_VAR 0 3
8219: PUSH
8220: LD_STRING 
8222: PUSH
8223: LD_STRING 
8225: PUSH
8226: LD_INT 49
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_VAR 0 2
8238: ARRAY
8239: ST_TO_ADDR
8240: GO 8351
8242: LD_INT 14
8244: DOUBLE
8245: EQUAL
8246: IFTRUE 8250
8248: GO 8278
8250: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: LD_INT 10
8258: PUSH
8259: LD_STRING 
8261: PUSH
8262: LD_STRING 
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_VAR 0 2
8274: ARRAY
8275: ST_TO_ADDR
8276: GO 8351
8278: LD_INT 10
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8314
8286: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_INT 9
8294: PUSH
8295: LD_STRING 
8297: PUSH
8298: LD_STRING 
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: LIST
8305: PUSH
8306: LD_VAR 0 2
8310: ARRAY
8311: ST_TO_ADDR
8312: GO 8351
8314: LD_INT 40
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8350
8322: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8323: LD_ADDR_VAR 0 3
8327: PUSH
8328: LD_INT 7
8330: PUSH
8331: LD_INT 28
8333: PUSH
8334: LD_INT 45
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: LD_VAR 0 2
8346: ARRAY
8347: ST_TO_ADDR
8348: GO 8351
8350: POP
// end ;
8351: LD_VAR 0 3
8355: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
// for veh in units do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8449
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8373: LD_VAR 0 4
8377: PPUSH
8378: CALL_OW 247
8382: PUSH
8383: LD_INT 2
8385: EQUAL
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: CALL_OW 261
8396: PUSH
8397: LD_INT 100
8399: LESS
8400: AND
8401: IFFALSE 8447
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8403: LD_VAR 0 4
8407: PPUSH
8408: LD_STRING X
8410: PUSH
8411: LD_INT 0
8413: PUSH
8414: LD_INT 0
8416: PUSH
8417: LD_VAR 0 2
8421: PUSH
8422: LD_INT 0
8424: PUSH
8425: LD_INT 0
8427: PUSH
8428: LD_INT 0
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: PPUSH
8443: CALL_OW 446
// end ;
8447: GO 8370
8449: POP
8450: POP
// end ;
8451: LD_VAR 0 3
8455: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8456: LD_INT 0
8458: PPUSH
8459: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8460: LD_ADDR_VAR 0 4
8464: PUSH
8465: LD_VAR 0 2
8469: PPUSH
8470: CALL_OW 254
8474: PUSH
8475: LD_INT 3
8477: MINUS
8478: ST_TO_ADDR
// if dir < 0 then
8479: LD_VAR 0 4
8483: PUSH
8484: LD_INT 0
8486: LESS
8487: IFFALSE 8503
// dir := 6 + dir ;
8489: LD_ADDR_VAR 0 4
8493: PUSH
8494: LD_INT 6
8496: PUSH
8497: LD_VAR 0 4
8501: PLUS
8502: ST_TO_ADDR
// SetDir ( un , dir ) ;
8503: LD_VAR 0 1
8507: PPUSH
8508: LD_VAR 0 4
8512: PPUSH
8513: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8517: LD_VAR 0 1
8521: PPUSH
8522: LD_VAR 0 2
8526: PPUSH
8527: CALL_OW 52
// result = un ;
8531: LD_ADDR_VAR 0 3
8535: PUSH
8536: LD_VAR 0 1
8540: ST_TO_ADDR
// end ;
8541: LD_VAR 0 3
8545: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
// uc_side := GetSide ( b ) ;
8551: LD_ADDR_OWVAR 20
8555: PUSH
8556: LD_VAR 0 2
8560: PPUSH
8561: CALL_OW 255
8565: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8566: LD_ADDR_OWVAR 21
8570: PUSH
8571: LD_VAR 0 2
8575: PPUSH
8576: CALL_OW 248
8580: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8581: LD_INT 0
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 380
// un = CreateHuman ;
8596: LD_ADDR_VAR 0 4
8600: PUSH
8601: CALL_OW 44
8605: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8606: LD_ADDR_VAR 0 5
8610: PUSH
8611: LD_VAR 0 2
8615: PPUSH
8616: CALL_OW 254
8620: PUSH
8621: LD_INT 3
8623: MINUS
8624: ST_TO_ADDR
// if dir < 0 then
8625: LD_VAR 0 5
8629: PUSH
8630: LD_INT 0
8632: LESS
8633: IFFALSE 8649
// dir := 6 + dir ;
8635: LD_ADDR_VAR 0 5
8639: PUSH
8640: LD_INT 6
8642: PUSH
8643: LD_VAR 0 5
8647: PLUS
8648: ST_TO_ADDR
// SetDir ( un , dir ) ;
8649: LD_VAR 0 4
8653: PPUSH
8654: LD_VAR 0 5
8658: PPUSH
8659: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8663: LD_VAR 0 4
8667: PPUSH
8668: LD_VAR 0 2
8672: PPUSH
8673: CALL_OW 52
// result = un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 4
8686: ST_TO_ADDR
// end ;
8687: LD_VAR 0 3
8691: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
// for building in buildings do
8699: LD_ADDR_VAR 0 5
8703: PUSH
8704: LD_VAR 0 2
8708: PUSH
8709: FOR_IN
8710: IFFALSE 8802
// begin x = GetX ( building ) ;
8712: LD_ADDR_VAR 0 6
8716: PUSH
8717: LD_VAR 0 5
8721: PPUSH
8722: CALL_OW 250
8726: ST_TO_ADDR
// y = GetY ( building ) ;
8727: LD_ADDR_VAR 0 7
8731: PUSH
8732: LD_VAR 0 5
8736: PPUSH
8737: CALL_OW 251
8741: ST_TO_ADDR
// dir = GetDir ( building ) ;
8742: LD_ADDR_VAR 0 8
8746: PUSH
8747: LD_VAR 0 5
8751: PPUSH
8752: CALL_OW 254
8756: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: LD_VAR 0 5
8766: PPUSH
8767: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8771: LD_VAR 0 1
8775: PPUSH
8776: LD_VAR 0 3
8780: PPUSH
8781: LD_VAR 0 6
8785: PPUSH
8786: LD_VAR 0 7
8790: PPUSH
8791: LD_VAR 0 8
8795: PPUSH
8796: CALL_OW 205
// end ;
8800: GO 8709
8802: POP
8803: POP
// end ;
8804: LD_VAR 0 4
8808: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8809: LD_INT 0
8811: PPUSH
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
8816: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8817: LD_ADDR_VAR 0 8
8821: PUSH
8822: LD_INT 48
8824: PUSH
8825: LD_INT 49
8827: PUSH
8828: LD_INT 50
8830: PUSH
8831: LD_INT 20
8833: PUSH
8834: LD_INT 1
8836: PUSH
8837: LD_INT 51
8839: PUSH
8840: LD_INT 52
8842: PUSH
8843: LD_INT 69
8845: PUSH
8846: LD_INT 39
8848: PUSH
8849: LD_INT 34
8851: PUSH
8852: LD_INT 40
8854: PUSH
8855: LD_INT 53
8857: PUSH
8858: LD_INT 71
8860: PUSH
8861: LD_INT 57
8863: PUSH
8864: LD_INT 58
8866: PUSH
8867: LD_INT 44
8869: PUSH
8870: LD_INT 32
8872: PUSH
8873: LD_INT 27
8875: PUSH
8876: LD_INT 23
8878: PUSH
8879: LD_INT 33
8881: PUSH
8882: LD_INT 59
8884: PUSH
8885: LD_INT 54
8887: PUSH
8888: LD_INT 55
8890: PUSH
8891: LD_INT 56
8893: PUSH
8894: LD_INT 63
8896: PUSH
8897: LD_INT 64
8899: PUSH
8900: LD_INT 65
8902: PUSH
8903: LD_INT 30
8905: PUSH
8906: LD_INT 31
8908: PUSH
8909: LD_INT 21
8911: PUSH
8912: LD_INT 22
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8952: LD_ADDR_VAR 0 9
8956: PUSH
8957: LD_INT 1
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 1
8965: PPUSH
8966: CALL 31649 0 3
8970: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8971: LD_ADDR_VAR 0 5
8975: PUSH
8976: DOUBLE
8977: LD_INT 1
8979: DEC
8980: ST_TO_ADDR
8981: LD_VAR 0 8
8985: PUSH
8986: FOR_TO
8987: IFFALSE 9063
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8989: LD_VAR 0 8
8993: PUSH
8994: LD_VAR 0 5
8998: ARRAY
8999: PPUSH
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 321
9009: PUSH
9010: LD_INT 1
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 8
9018: PUSH
9019: LD_VAR 0 5
9023: ARRAY
9024: PPUSH
9025: LD_VAR 0 3
9029: PPUSH
9030: CALL_OW 482
9034: PUSH
9035: LD_INT 1
9037: EQUAL
9038: AND
9039: IFFALSE 9061
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9041: LD_VAR 0 2
9045: PPUSH
9046: LD_VAR 0 8
9050: PUSH
9051: LD_VAR 0 5
9055: ARRAY
9056: PPUSH
9057: CALL_OW 184
9061: GO 8986
9063: POP
9064: POP
// for i = 1 to am_tech_list do
9065: LD_ADDR_VAR 0 5
9069: PUSH
9070: DOUBLE
9071: LD_INT 1
9073: DEC
9074: ST_TO_ADDR
9075: LD_VAR 0 9
9079: PUSH
9080: FOR_TO
9081: IFFALSE 9157
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9083: LD_VAR 0 9
9087: PUSH
9088: LD_VAR 0 5
9092: ARRAY
9093: PPUSH
9094: LD_VAR 0 1
9098: PPUSH
9099: CALL_OW 321
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: PUSH
9108: LD_VAR 0 9
9112: PUSH
9113: LD_VAR 0 5
9117: ARRAY
9118: PPUSH
9119: LD_VAR 0 3
9123: PPUSH
9124: CALL_OW 482
9128: PUSH
9129: LD_INT 1
9131: EQUAL
9132: AND
9133: IFFALSE 9155
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9135: LD_VAR 0 2
9139: PPUSH
9140: LD_VAR 0 9
9144: PUSH
9145: LD_VAR 0 5
9149: ARRAY
9150: PPUSH
9151: CALL_OW 184
9155: GO 9080
9157: POP
9158: POP
// end ;
9159: LD_VAR 0 4
9163: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9175: LD_ADDR_VAR 0 3
9179: PUSH
9180: LD_INT 22
9182: PUSH
9183: LD_INT 6
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: PUSH
9190: LD_INT 21
9192: PUSH
9193: LD_INT 3
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 30
9202: PUSH
9203: LD_INT 6
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 69
9219: PUSH
9220: LD_INT 1
9222: ARRAY
9223: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9224: LD_ADDR_VAR 0 4
9228: PUSH
9229: LD_INT 22
9231: PUSH
9232: LD_INT 6
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PUSH
9239: LD_INT 21
9241: PUSH
9242: LD_INT 3
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 30
9251: PUSH
9252: LD_INT 3
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL_OW 69
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9273: LD_ADDR_VAR 0 9
9277: PUSH
9278: LD_VAR 0 9
9282: PUSH
9283: LD_EXP 61
9287: ADD
9288: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9289: LD_ADDR_VAR 0 9
9293: PUSH
9294: LD_VAR 0 9
9298: PUSH
9299: LD_EXP 79
9303: ADD
9304: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_VAR 0 9
9314: PUSH
9315: LD_EXP 71
9319: ADD
9320: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9321: LD_ADDR_VAR 0 8
9325: PUSH
9326: LD_INT 18
9328: PPUSH
9329: LD_INT 22
9331: PUSH
9332: LD_INT 6
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 21
9341: PUSH
9342: LD_INT 1
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: LD_INT 60
9354: PUSH
9355: EMPTY
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: PPUSH
9367: CALL_OW 70
9371: PUSH
9372: LD_VAR 0 9
9376: DIFF
9377: ST_TO_ADDR
// if not canTakeUnits then
9378: LD_VAR 0 8
9382: NOT
9383: IFFALSE 9416
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9385: LD_ADDR_EXP 81
9389: PUSH
9390: LD_EXP 81
9394: PPUSH
9395: LD_INT 4
9397: PPUSH
9398: LD_EXP 81
9402: PUSH
9403: LD_INT 3
9405: ARRAY
9406: PUSH
9407: LD_INT 2
9409: PLUS
9410: PPUSH
9411: CALL_OW 1
9415: ST_TO_ADDR
// if canTakeUnits > 2 then
9416: LD_VAR 0 8
9420: PUSH
9421: LD_INT 2
9423: GREATER
9424: IFFALSE 9494
// begin for i := 1 to rand ( 1 , 2 ) do
9426: LD_ADDR_VAR 0 2
9430: PUSH
9431: DOUBLE
9432: LD_INT 1
9434: DEC
9435: ST_TO_ADDR
9436: LD_INT 1
9438: PPUSH
9439: LD_INT 2
9441: PPUSH
9442: CALL_OW 12
9446: PUSH
9447: FOR_TO
9448: IFFALSE 9490
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9450: LD_VAR 0 8
9454: PUSH
9455: LD_VAR 0 2
9459: ARRAY
9460: PPUSH
9461: LD_VAR 0 3
9465: PPUSH
9466: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9470: LD_VAR 0 8
9474: PUSH
9475: LD_VAR 0 2
9479: ARRAY
9480: PPUSH
9481: LD_INT 4
9483: PPUSH
9484: CALL_OW 183
// end ;
9488: GO 9447
9490: POP
9491: POP
// end else
9492: GO 9562
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9494: LD_ADDR_VAR 0 2
9498: PUSH
9499: DOUBLE
9500: LD_INT 1
9502: DEC
9503: ST_TO_ADDR
9504: LD_INT 1
9506: PPUSH
9507: LD_VAR 0 8
9511: PPUSH
9512: CALL_OW 12
9516: PUSH
9517: FOR_TO
9518: IFFALSE 9560
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9520: LD_VAR 0 8
9524: PUSH
9525: LD_VAR 0 2
9529: ARRAY
9530: PPUSH
9531: LD_VAR 0 3
9535: PPUSH
9536: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9540: LD_VAR 0 8
9544: PUSH
9545: LD_VAR 0 2
9549: ARRAY
9550: PPUSH
9551: LD_INT 4
9553: PPUSH
9554: CALL_OW 183
// end ;
9558: GO 9517
9560: POP
9561: POP
// end ; wait ( 0 0$01 ) ;
9562: LD_INT 35
9564: PPUSH
9565: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9569: LD_ADDR_VAR 0 8
9573: PUSH
9574: LD_INT 18
9576: PPUSH
9577: LD_INT 22
9579: PUSH
9580: LD_INT 6
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 21
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 3
9599: PUSH
9600: LD_INT 60
9602: PUSH
9603: EMPTY
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 70
9619: PUSH
9620: LD_VAR 0 9
9624: DIFF
9625: ST_TO_ADDR
// pom = 6 ;
9626: LD_ADDR_VAR 0 7
9630: PUSH
9631: LD_INT 6
9633: ST_TO_ADDR
// if canTakeUnits then
9634: LD_VAR 0 8
9638: IFFALSE 9755
// for i = 1 to canTakeUnits do
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: DOUBLE
9646: LD_INT 1
9648: DEC
9649: ST_TO_ADDR
9650: LD_VAR 0 8
9654: PUSH
9655: FOR_TO
9656: IFFALSE 9753
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9658: LD_VAR 0 8
9662: PUSH
9663: LD_VAR 0 2
9667: ARRAY
9668: PPUSH
9669: CALL_OW 257
9673: PUSH
9674: LD_INT 3
9676: NONEQUAL
9677: IFFALSE 9717
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9679: LD_VAR 0 8
9683: PUSH
9684: LD_VAR 0 2
9688: ARRAY
9689: PPUSH
9690: LD_VAR 0 4
9694: PPUSH
9695: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9699: LD_VAR 0 8
9703: PUSH
9704: LD_VAR 0 2
9708: ARRAY
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 2
9726: ARRAY
9727: PPUSH
9728: LD_VAR 0 4
9732: PPUSH
9733: CALL_OW 120
// pom = pom - 1 ;
9737: LD_ADDR_VAR 0 7
9741: PUSH
9742: LD_VAR 0 7
9746: PUSH
9747: LD_INT 1
9749: MINUS
9750: ST_TO_ADDR
// end ;
9751: GO 9655
9753: POP
9754: POP
// if pom > 0 then
9755: LD_VAR 0 7
9759: PUSH
9760: LD_INT 0
9762: GREATER
9763: IFFALSE 9788
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9765: LD_ADDR_EXP 81
9769: PUSH
9770: LD_EXP 81
9774: PPUSH
9775: LD_INT 3
9777: PPUSH
9778: LD_VAR 0 7
9782: PPUSH
9783: CALL_OW 1
9787: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9788: LD_INT 35
9790: PPUSH
9791: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9795: LD_ADDR_VAR 0 5
9799: PUSH
9800: LD_INT 22
9802: PUSH
9803: LD_INT 6
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 21
9812: PUSH
9813: LD_INT 3
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: LD_INT 30
9822: PUSH
9823: LD_INT 32
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: PUSH
9830: LD_INT 3
9832: PUSH
9833: LD_INT 59
9835: PUSH
9836: EMPTY
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: PPUSH
9849: CALL_OW 69
9853: PUSH
9854: FOR_IN
9855: IFFALSE 10101
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9857: LD_ADDR_VAR 0 8
9861: PUSH
9862: LD_INT 18
9864: PPUSH
9865: LD_INT 22
9867: PUSH
9868: LD_INT 6
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 21
9877: PUSH
9878: LD_INT 1
9880: PUSH
9881: EMPTY
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: LD_INT 60
9890: PUSH
9891: EMPTY
9892: LIST
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: PPUSH
9903: CALL_OW 70
9907: PUSH
9908: LD_VAR 0 9
9912: DIFF
9913: ST_TO_ADDR
// if canTakeUnits then
9914: LD_VAR 0 8
9918: IFFALSE 10052
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9920: LD_VAR 0 8
9924: PUSH
9925: LD_INT 1
9927: ARRAY
9928: PPUSH
9929: CALL_OW 257
9933: PUSH
9934: LD_INT 1
9936: NONEQUAL
9937: IFFALSE 10032
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9939: LD_VAR 0 8
9943: PUSH
9944: LD_INT 1
9946: ARRAY
9947: PPUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 6
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 21
9960: PUSH
9961: LD_INT 3
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 30
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PPUSH
9992: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9996: LD_VAR 0 8
10000: PUSH
10001: LD_INT 1
10003: ARRAY
10004: PPUSH
10005: LD_INT 1
10007: PPUSH
10008: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10012: LD_VAR 0 8
10016: PUSH
10017: LD_INT 1
10019: ARRAY
10020: PPUSH
10021: CALL_OW 182
// wait ( 0 0$1 ) ;
10025: LD_INT 35
10027: PPUSH
10028: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10032: LD_VAR 0 8
10036: PUSH
10037: LD_INT 1
10039: ARRAY
10040: PPUSH
10041: LD_VAR 0 5
10045: PPUSH
10046: CALL_OW 120
// end else
10050: GO 10099
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10052: LD_ADDR_EXP 73
10056: PUSH
10057: LD_EXP 73
10061: PUSH
10062: LD_VAR 0 5
10066: ADD
10067: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10068: LD_ADDR_EXP 81
10072: PUSH
10073: LD_EXP 81
10077: PPUSH
10078: LD_INT 1
10080: PPUSH
10081: LD_EXP 81
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PUSH
10090: LD_INT 1
10092: PLUS
10093: PPUSH
10094: CALL_OW 1
10098: ST_TO_ADDR
// end ; end ;
10099: GO 9854
10101: POP
10102: POP
// end ;
10103: LD_VAR 0 1
10107: RET
// export function IsEnemyNear ( unit , enemySide ) ; var nearUnit ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , enemySide ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
10112: LD_ADDR_VAR 0 4
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_VAR 0 2
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 50
10131: PUSH
10132: EMPTY
10133: LIST
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 21
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: PPUSH
10168: CALL_OW 69
10172: PPUSH
10173: LD_VAR 0 1
10177: PPUSH
10178: CALL_OW 74
10182: ST_TO_ADDR
// if GetDistUnits ( nearUnit , unit ) < 13 then
10183: LD_VAR 0 4
10187: PPUSH
10188: LD_VAR 0 1
10192: PPUSH
10193: CALL_OW 296
10197: PUSH
10198: LD_INT 13
10200: LESS
10201: IFFALSE 10213
// begin result = true ;
10203: LD_ADDR_VAR 0 3
10207: PUSH
10208: LD_INT 1
10210: ST_TO_ADDR
// exit ;
10211: GO 10221
// end ; result = false ;
10213: LD_ADDR_VAR 0 3
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// end ;
10221: LD_VAR 0 3
10225: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
10237: PPUSH
10238: PPUSH
10239: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10240: LD_VAR 0 1
10244: PPUSH
10245: CALL_OW 302
10249: NOT
10250: PUSH
10251: LD_VAR 0 4
10255: PUSH
10256: LD_INT 1
10258: EQUAL
10259: OR
10260: PUSH
10261: LD_VAR 0 2
10265: PPUSH
10266: LD_VAR 0 3
10270: PPUSH
10271: CALL_OW 488
10275: NOT
10276: OR
10277: PUSH
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_VAR 0 2
10287: PPUSH
10288: LD_VAR 0 3
10292: PPUSH
10293: CALL_OW 297
10297: PUSH
10298: LD_VAR 0 4
10302: GREATEREQUAL
10303: OR
10304: PUSH
10305: LD_VAR 0 5
10309: PUSH
10310: LD_INT 1
10312: PUSH
10313: LD_INT 0
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: IN
10320: NOT
10321: OR
10322: IFFALSE 10326
// exit ;
10324: GO 11883
// attempts = 0 ;
10326: LD_ADDR_VAR 0 17
10330: PUSH
10331: LD_INT 0
10333: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10334: LD_ADDR_VAR 0 7
10338: PUSH
10339: EMPTY
10340: ST_TO_ADDR
// list_coords = [ ] ;
10341: LD_ADDR_VAR 0 8
10345: PUSH
10346: EMPTY
10347: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10348: LD_ADDR_VAR 0 9
10352: PUSH
10353: LD_VAR 0 2
10357: PPUSH
10358: LD_VAR 0 3
10362: PPUSH
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 250
10372: PPUSH
10373: LD_VAR 0 1
10377: PPUSH
10378: CALL_OW 251
10382: PPUSH
10383: CALL 11888 0 4
10387: ST_TO_ADDR
// if attempts = 0 then
10388: LD_VAR 0 17
10392: PUSH
10393: LD_INT 0
10395: EQUAL
10396: IFFALSE 10504
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10398: LD_ADDR_VAR 0 10
10402: PUSH
10403: LD_VAR 0 9
10407: PUSH
10408: LD_VAR 0 9
10412: PUSH
10413: LD_INT 1
10415: PLUS
10416: PUSH
10417: LD_VAR 0 9
10421: PUSH
10422: LD_INT 1
10424: MINUS
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10431: LD_VAR 0 10
10435: PUSH
10436: LD_INT 2
10438: ARRAY
10439: PUSH
10440: LD_INT 6
10442: EQUAL
10443: IFFALSE 10466
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10445: LD_ADDR_VAR 0 10
10449: PUSH
10450: LD_VAR 0 10
10454: PPUSH
10455: LD_INT 2
10457: PPUSH
10458: LD_INT 0
10460: PPUSH
10461: CALL_OW 1
10465: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10466: LD_VAR 0 10
10470: PUSH
10471: LD_INT 3
10473: ARRAY
10474: PUSH
10475: LD_INT 1
10477: NEG
10478: EQUAL
10479: IFFALSE 10502
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10481: LD_ADDR_VAR 0 10
10485: PUSH
10486: LD_VAR 0 10
10490: PPUSH
10491: LD_INT 3
10493: PPUSH
10494: LD_INT 5
10496: PPUSH
10497: CALL_OW 1
10501: ST_TO_ADDR
// end else
10502: GO 10541
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10504: LD_ADDR_VAR 0 10
10508: PUSH
10509: LD_INT 0
10511: PUSH
10512: LD_INT 1
10514: PUSH
10515: LD_INT 2
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: LD_INT 4
10523: PUSH
10524: LD_INT 5
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_VAR 0 9
10539: DIFF
10540: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10541: LD_ADDR_VAR 0 14
10545: PUSH
10546: DOUBLE
10547: LD_INT 1
10549: DEC
10550: ST_TO_ADDR
10551: LD_VAR 0 10
10555: PUSH
10556: LD_INT 0
10558: PLUS
10559: PUSH
10560: FOR_TO
10561: IFFALSE 10883
// case dir_list [ c ] of 0 :
10563: LD_VAR 0 10
10567: PUSH
10568: LD_VAR 0 14
10572: ARRAY
10573: PUSH
10574: LD_INT 0
10576: DOUBLE
10577: EQUAL
10578: IFTRUE 10582
10580: GO 10623
10582: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10583: LD_ADDR_VAR 0 8
10587: PUSH
10588: LD_VAR 0 8
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: LD_VAR 0 2
10600: PUSH
10601: LD_VAR 0 3
10605: PUSH
10606: LD_VAR 0 4
10610: MINUS
10611: PUSH
10612: EMPTY
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 2
10620: ST_TO_ADDR
10621: GO 10881
10623: LD_INT 1
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10672
10631: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10632: LD_ADDR_VAR 0 8
10636: PUSH
10637: LD_VAR 0 8
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_VAR 0 2
10649: PUSH
10650: LD_VAR 0 4
10654: PLUS
10655: PUSH
10656: LD_VAR 0 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PPUSH
10665: CALL_OW 2
10669: ST_TO_ADDR
10670: GO 10881
10672: LD_INT 2
10674: DOUBLE
10675: EQUAL
10676: IFTRUE 10680
10678: GO 10727
10680: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10681: LD_ADDR_VAR 0 8
10685: PUSH
10686: LD_VAR 0 8
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: LD_VAR 0 2
10698: PUSH
10699: LD_VAR 0 4
10703: PLUS
10704: PUSH
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 4
10714: PLUS
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PPUSH
10720: CALL_OW 2
10724: ST_TO_ADDR
10725: GO 10881
10727: LD_INT 3
10729: DOUBLE
10730: EQUAL
10731: IFTRUE 10735
10733: GO 10776
10735: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10736: LD_ADDR_VAR 0 8
10740: PUSH
10741: LD_VAR 0 8
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: LD_VAR 0 2
10753: PUSH
10754: LD_VAR 0 3
10758: PUSH
10759: LD_VAR 0 4
10763: PLUS
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PPUSH
10769: CALL_OW 2
10773: ST_TO_ADDR
10774: GO 10881
10776: LD_INT 4
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10825
10784: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10785: LD_ADDR_VAR 0 8
10789: PUSH
10790: LD_VAR 0 8
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: LD_VAR 0 2
10802: PUSH
10803: LD_VAR 0 4
10807: MINUS
10808: PUSH
10809: LD_VAR 0 3
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PPUSH
10818: CALL_OW 2
10822: ST_TO_ADDR
10823: GO 10881
10825: LD_INT 5
10827: DOUBLE
10828: EQUAL
10829: IFTRUE 10833
10831: GO 10880
10833: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10834: LD_ADDR_VAR 0 8
10838: PUSH
10839: LD_VAR 0 8
10843: PPUSH
10844: LD_INT 1
10846: PPUSH
10847: LD_VAR 0 2
10851: PUSH
10852: LD_VAR 0 4
10856: MINUS
10857: PUSH
10858: LD_VAR 0 3
10862: PUSH
10863: LD_VAR 0 4
10867: MINUS
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 2
10877: ST_TO_ADDR
10878: GO 10881
10880: POP
10881: GO 10560
10883: POP
10884: POP
// if dist < 30 then
10885: LD_VAR 0 4
10889: PUSH
10890: LD_INT 30
10892: LESS
10893: IFFALSE 10905
// c = 1 else
10895: LD_ADDR_VAR 0 14
10899: PUSH
10900: LD_INT 1
10902: ST_TO_ADDR
10903: GO 10913
// c = 2 ;
10905: LD_ADDR_VAR 0 14
10909: PUSH
10910: LD_INT 2
10912: ST_TO_ADDR
// b = 1 ;
10913: LD_ADDR_VAR 0 11
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10921: LD_VAR 0 11
10925: PUSH
10926: LD_VAR 0 4
10930: PUSH
10931: LD_INT 1
10933: MINUS
10934: LESSEQUAL
10935: IFFALSE 11363
// begin if 0 in dir_list and 1 in dir_list then
10937: LD_INT 0
10939: PUSH
10940: LD_VAR 0 10
10944: IN
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: LD_VAR 0 10
10953: IN
10954: AND
10955: IFFALSE 11007
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10957: LD_ADDR_VAR 0 8
10961: PUSH
10962: LD_VAR 0 8
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: LD_VAR 0 2
10974: PUSH
10975: LD_VAR 0 11
10979: PLUS
10980: PUSH
10981: LD_VAR 0 3
10985: PUSH
10986: LD_VAR 0 4
10990: MINUS
10991: PUSH
10992: LD_VAR 0 11
10996: PLUS
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PPUSH
11002: CALL_OW 2
11006: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
11007: LD_INT 1
11009: PUSH
11010: LD_VAR 0 10
11014: IN
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_VAR 0 10
11023: IN
11024: AND
11025: IFFALSE 11071
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
11027: LD_ADDR_VAR 0 8
11031: PUSH
11032: LD_VAR 0 8
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: LD_VAR 0 2
11044: PUSH
11045: LD_VAR 0 4
11049: PLUS
11050: PUSH
11051: LD_VAR 0 3
11055: PUSH
11056: LD_VAR 0 11
11060: PLUS
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PPUSH
11066: CALL_OW 2
11070: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
11071: LD_INT 2
11073: PUSH
11074: LD_VAR 0 10
11078: IN
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_VAR 0 10
11087: IN
11088: AND
11089: IFFALSE 11141
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
11091: LD_ADDR_VAR 0 8
11095: PUSH
11096: LD_VAR 0 8
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_VAR 0 2
11108: PUSH
11109: LD_VAR 0 4
11113: PLUS
11114: PUSH
11115: LD_VAR 0 11
11119: MINUS
11120: PUSH
11121: LD_VAR 0 3
11125: PUSH
11126: LD_VAR 0 4
11130: PLUS
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 2
11140: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11141: LD_INT 3
11143: PUSH
11144: LD_VAR 0 10
11148: IN
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: LD_VAR 0 10
11157: IN
11158: AND
11159: IFFALSE 11211
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11161: LD_ADDR_VAR 0 8
11165: PUSH
11166: LD_VAR 0 8
11170: PPUSH
11171: LD_INT 1
11173: PPUSH
11174: LD_VAR 0 2
11178: PUSH
11179: LD_VAR 0 11
11183: MINUS
11184: PUSH
11185: LD_VAR 0 3
11189: PUSH
11190: LD_VAR 0 4
11194: PLUS
11195: PUSH
11196: LD_VAR 0 11
11200: MINUS
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 2
11210: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11211: LD_INT 4
11213: PUSH
11214: LD_VAR 0 10
11218: IN
11219: PUSH
11220: LD_INT 5
11222: PUSH
11223: LD_VAR 0 10
11227: IN
11228: AND
11229: IFFALSE 11275
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11231: LD_ADDR_VAR 0 8
11235: PUSH
11236: LD_VAR 0 8
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: LD_VAR 0 2
11248: PUSH
11249: LD_VAR 0 4
11253: MINUS
11254: PUSH
11255: LD_VAR 0 3
11259: PUSH
11260: LD_VAR 0 11
11264: MINUS
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 2
11274: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11275: LD_INT 5
11277: PUSH
11278: LD_VAR 0 10
11282: IN
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: LD_VAR 0 10
11291: IN
11292: AND
11293: IFFALSE 11345
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11295: LD_ADDR_VAR 0 8
11299: PUSH
11300: LD_VAR 0 8
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: LD_VAR 0 2
11312: PUSH
11313: LD_VAR 0 4
11317: MINUS
11318: PUSH
11319: LD_VAR 0 11
11323: PLUS
11324: PUSH
11325: LD_VAR 0 3
11329: PUSH
11330: LD_VAR 0 4
11334: MINUS
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 2
11344: ST_TO_ADDR
// b = b + c end ;
11345: LD_ADDR_VAR 0 11
11349: PUSH
11350: LD_VAR 0 11
11354: PUSH
11355: LD_VAR 0 14
11359: PLUS
11360: ST_TO_ADDR
11361: GO 10921
// if list_coords = 0 then
11363: LD_VAR 0 8
11367: PUSH
11368: LD_INT 0
11370: EQUAL
11371: IFFALSE 11375
// exit ;
11373: GO 11883
// repeat min_dist = 5000 ;
11375: LD_ADDR_VAR 0 12
11379: PUSH
11380: LD_INT 5000
11382: ST_TO_ADDR
// for b in list_coords do
11383: LD_ADDR_VAR 0 11
11387: PUSH
11388: LD_VAR 0 8
11392: PUSH
11393: FOR_IN
11394: IFFALSE 11453
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11396: LD_ADDR_VAR 0 13
11400: PUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: LD_VAR 0 11
11410: PUSH
11411: LD_INT 1
11413: ARRAY
11414: PPUSH
11415: LD_VAR 0 11
11419: PUSH
11420: LD_INT 2
11422: ARRAY
11423: PPUSH
11424: CALL_OW 297
11428: ST_TO_ADDR
// if temp_dist < min_dist then
11429: LD_VAR 0 13
11433: PUSH
11434: LD_VAR 0 12
11438: LESS
11439: IFFALSE 11451
// min_dist = temp_dist ;
11441: LD_ADDR_VAR 0 12
11445: PUSH
11446: LD_VAR 0 13
11450: ST_TO_ADDR
// end ;
11451: GO 11393
11453: POP
11454: POP
// c = 0 ;
11455: LD_ADDR_VAR 0 14
11459: PUSH
11460: LD_INT 0
11462: ST_TO_ADDR
// repeat c = c + 1 ;
11463: LD_ADDR_VAR 0 14
11467: PUSH
11468: LD_VAR 0 14
11472: PUSH
11473: LD_INT 1
11475: PLUS
11476: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11477: LD_VAR 0 1
11481: PPUSH
11482: LD_VAR 0 8
11486: PUSH
11487: LD_VAR 0 14
11491: ARRAY
11492: PUSH
11493: LD_INT 1
11495: ARRAY
11496: PPUSH
11497: LD_VAR 0 8
11501: PUSH
11502: LD_VAR 0 14
11506: ARRAY
11507: PUSH
11508: LD_INT 2
11510: ARRAY
11511: PPUSH
11512: CALL_OW 297
11516: PUSH
11517: LD_VAR 0 12
11521: EQUAL
11522: IFFALSE 11587
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11524: LD_ADDR_VAR 0 7
11528: PUSH
11529: LD_VAR 0 7
11533: PPUSH
11534: LD_INT 1
11536: PPUSH
11537: LD_VAR 0 8
11541: PUSH
11542: LD_VAR 0 14
11546: ARRAY
11547: PPUSH
11548: CALL_OW 2
11552: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11553: LD_ADDR_VAR 0 8
11557: PUSH
11558: LD_VAR 0 8
11562: PPUSH
11563: LD_VAR 0 14
11567: PPUSH
11568: CALL_OW 3
11572: ST_TO_ADDR
// c = c - 1 ;
11573: LD_ADDR_VAR 0 14
11577: PUSH
11578: LD_VAR 0 14
11582: PUSH
11583: LD_INT 1
11585: MINUS
11586: ST_TO_ADDR
// end ; until c = list_coords ;
11587: LD_VAR 0 14
11591: PUSH
11592: LD_VAR 0 8
11596: EQUAL
11597: IFFALSE 11463
// c = 0 ;
11599: LD_ADDR_VAR 0 14
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// if list_nearest > 0 then
11607: LD_VAR 0 7
11611: PUSH
11612: LD_INT 0
11614: GREATER
11615: IFFALSE 11757
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11617: LD_ADDR_VAR 0 15
11621: PUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 7
11629: PPUSH
11630: CALL_OW 12
11634: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11635: LD_ADDR_VAR 0 16
11639: PUSH
11640: LD_VAR 0 7
11644: PUSH
11645: LD_VAR 0 15
11649: ARRAY
11650: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11651: LD_VAR 0 16
11655: PUSH
11656: LD_INT 1
11658: ARRAY
11659: PPUSH
11660: LD_VAR 0 16
11664: PUSH
11665: LD_INT 2
11667: ARRAY
11668: PPUSH
11669: CALL_OW 488
11673: PUSH
11674: LD_INT 0
11676: GREATER
11677: PUSH
11678: LD_VAR 0 16
11682: PUSH
11683: LD_INT 1
11685: ARRAY
11686: PPUSH
11687: LD_VAR 0 16
11691: PUSH
11692: LD_INT 2
11694: ARRAY
11695: PPUSH
11696: CALL_OW 428
11700: PUSH
11701: LD_INT 0
11703: EQUAL
11704: AND
11705: IFFALSE 11717
// c = 1 else
11707: LD_ADDR_VAR 0 14
11711: PUSH
11712: LD_INT 1
11714: ST_TO_ADDR
11715: GO 11737
// list_nearest = Delete ( list_nearest , rand_num ) ;
11717: LD_ADDR_VAR 0 7
11721: PUSH
11722: LD_VAR 0 7
11726: PPUSH
11727: LD_VAR 0 15
11731: PPUSH
11732: CALL_OW 3
11736: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11737: LD_VAR 0 14
11741: PUSH
11742: LD_INT 1
11744: EQUAL
11745: PUSH
11746: LD_VAR 0 7
11750: PUSH
11751: LD_INT 0
11753: EQUAL
11754: OR
11755: IFFALSE 11617
// end ; until c = 1 or list_coords = 0 ;
11757: LD_VAR 0 14
11761: PUSH
11762: LD_INT 1
11764: EQUAL
11765: PUSH
11766: LD_VAR 0 8
11770: PUSH
11771: LD_INT 0
11773: EQUAL
11774: OR
11775: IFFALSE 11375
// attempts = attempts + 1 ;
11777: LD_ADDR_VAR 0 17
11781: PUSH
11782: LD_VAR 0 17
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11791: LD_VAR 0 14
11795: PUSH
11796: LD_INT 1
11798: EQUAL
11799: PUSH
11800: LD_VAR 0 17
11804: PUSH
11805: LD_INT 1
11807: GREATER
11808: OR
11809: IFFALSE 10334
// if c = 1 then
11811: LD_VAR 0 14
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: IFFALSE 11883
// if add then
11821: LD_VAR 0 5
11825: IFFALSE 11856
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11827: LD_VAR 0 1
11831: PPUSH
11832: LD_VAR 0 16
11836: PUSH
11837: LD_INT 1
11839: ARRAY
11840: PPUSH
11841: LD_VAR 0 16
11845: PUSH
11846: LD_INT 2
11848: ARRAY
11849: PPUSH
11850: CALL_OW 171
11854: GO 11883
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11856: LD_VAR 0 1
11860: PPUSH
11861: LD_VAR 0 16
11865: PUSH
11866: LD_INT 1
11868: ARRAY
11869: PPUSH
11870: LD_VAR 0 16
11874: PUSH
11875: LD_INT 2
11877: ARRAY
11878: PPUSH
11879: CALL_OW 111
// end ;
11883: LD_VAR 0 6
11887: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11888: LD_INT 0
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11896: LD_VAR 0 1
11900: PPUSH
11901: LD_VAR 0 2
11905: PPUSH
11906: CALL_OW 488
11910: NOT
11911: PUSH
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_VAR 0 4
11921: PPUSH
11922: CALL_OW 488
11926: NOT
11927: OR
11928: IFFALSE 11941
// begin result = - 1 ;
11930: LD_ADDR_VAR 0 5
11934: PUSH
11935: LD_INT 1
11937: NEG
11938: ST_TO_ADDR
// exit ;
11939: GO 12101
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11941: LD_ADDR_VAR 0 6
11945: PUSH
11946: LD_VAR 0 1
11950: PPUSH
11951: LD_VAR 0 2
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_VAR 0 4
11965: PPUSH
11966: CALL_OW 298
11970: ST_TO_ADDR
// dist_2 = 99999 ;
11971: LD_ADDR_VAR 0 7
11975: PUSH
11976: LD_INT 99999
11978: ST_TO_ADDR
// for b = 0 to 5 do
11979: LD_ADDR_VAR 0 8
11983: PUSH
11984: DOUBLE
11985: LD_INT 0
11987: DEC
11988: ST_TO_ADDR
11989: LD_INT 5
11991: PUSH
11992: FOR_TO
11993: IFFALSE 12089
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11995: LD_ADDR_VAR 0 9
11999: PUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: LD_VAR 0 8
12009: PPUSH
12010: LD_VAR 0 6
12014: PPUSH
12015: CALL_OW 272
12019: PPUSH
12020: LD_VAR 0 2
12024: PPUSH
12025: LD_VAR 0 8
12029: PPUSH
12030: LD_VAR 0 6
12034: PPUSH
12035: CALL_OW 273
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_VAR 0 4
12049: PPUSH
12050: CALL_OW 298
12054: ST_TO_ADDR
// if temp_dist < dist_2 then
12055: LD_VAR 0 9
12059: PUSH
12060: LD_VAR 0 7
12064: LESS
12065: IFFALSE 12087
// begin dist_2 = temp_dist ;
12067: LD_ADDR_VAR 0 7
12071: PUSH
12072: LD_VAR 0 9
12076: ST_TO_ADDR
// dir = b ;
12077: LD_ADDR_VAR 0 10
12081: PUSH
12082: LD_VAR 0 8
12086: ST_TO_ADDR
// end ; end ;
12087: GO 11992
12089: POP
12090: POP
// result = dir ;
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_VAR 0 10
12100: ST_TO_ADDR
// end ; end_of_file
12101: LD_VAR 0 5
12105: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
12106: LD_INT 0
12108: PPUSH
12109: PPUSH
12110: PPUSH
12111: PPUSH
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// personel = [ ] ;
12136: LD_ADDR_VAR 0 18
12140: PUSH
12141: EMPTY
12142: ST_TO_ADDR
// vehicles = [ ] ;
12143: LD_ADDR_VAR 0 24
12147: PUSH
12148: EMPTY
12149: ST_TO_ADDR
// for unit in basePersonel do
12150: LD_ADDR_VAR 0 17
12154: PUSH
12155: LD_VAR 0 3
12159: PUSH
12160: FOR_IN
12161: IFFALSE 12209
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12163: LD_ADDR_VAR 0 18
12167: PUSH
12168: LD_VAR 0 18
12172: PUSH
12173: LD_VAR 0 17
12177: PUSH
12178: LD_VAR 0 17
12182: PPUSH
12183: CALL_OW 310
12187: PUSH
12188: LD_VAR 0 17
12192: PPUSH
12193: CALL_OW 302
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: PUSH
12203: EMPTY
12204: LIST
12205: ADD
12206: ST_TO_ADDR
12207: GO 12160
12209: POP
12210: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12211: LD_ADDR_VAR 0 23
12215: PUSH
12216: LD_VAR 0 4
12220: PPUSH
12221: LD_INT 22
12223: PUSH
12224: LD_VAR 0 1
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 21
12235: PUSH
12236: LD_INT 2
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 50
12245: PUSH
12246: EMPTY
12247: LIST
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: LD_INT 2
12254: PUSH
12255: LD_INT 34
12257: PUSH
12258: LD_INT 12
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 34
12267: PUSH
12268: LD_INT 51
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 34
12277: PUSH
12278: LD_INT 32
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PPUSH
12301: CALL_OW 70
12305: PUSH
12306: FOR_IN
12307: IFFALSE 12355
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12309: LD_ADDR_VAR 0 24
12313: PUSH
12314: LD_VAR 0 24
12318: PUSH
12319: LD_VAR 0 23
12323: PUSH
12324: LD_VAR 0 23
12328: PPUSH
12329: CALL_OW 310
12333: PUSH
12334: LD_VAR 0 23
12338: PPUSH
12339: CALL_OW 302
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: ADD
12352: ST_TO_ADDR
12353: GO 12306
12355: POP
12356: POP
// repeat soldiers = [ ] ;
12357: LD_ADDR_VAR 0 19
12361: PUSH
12362: EMPTY
12363: ST_TO_ADDR
// engineers = [ ] ;
12364: LD_ADDR_VAR 0 20
12368: PUSH
12369: EMPTY
12370: ST_TO_ADDR
// mechanics = [ ] ;
12371: LD_ADDR_VAR 0 21
12375: PUSH
12376: EMPTY
12377: ST_TO_ADDR
// scientists = [ ] ;
12378: LD_ADDR_VAR 0 22
12382: PUSH
12383: EMPTY
12384: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12385: LD_ADDR_VAR 0 29
12389: PUSH
12390: LD_VAR 0 4
12394: PPUSH
12395: LD_INT 22
12397: PUSH
12398: LD_VAR 0 1
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 21
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 50
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: LD_INT 2
12425: PUSH
12426: LD_INT 30
12428: PUSH
12429: LD_INT 0
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 30
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PPUSH
12457: CALL_OW 70
12461: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12462: LD_ADDR_VAR 0 30
12466: PUSH
12467: LD_VAR 0 4
12471: PPUSH
12472: LD_INT 22
12474: PUSH
12475: LD_VAR 0 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 3
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 50
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: LD_INT 2
12502: PUSH
12503: LD_INT 30
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 30
12515: PUSH
12516: LD_INT 3
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PPUSH
12534: CALL_OW 70
12538: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12539: LD_ADDR_VAR 0 31
12543: PUSH
12544: LD_VAR 0 4
12548: PPUSH
12549: LD_INT 22
12551: PUSH
12552: LD_VAR 0 1
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 3
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 50
12573: PUSH
12574: EMPTY
12575: LIST
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 30
12582: PUSH
12583: LD_INT 6
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 30
12592: PUSH
12593: LD_INT 7
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 30
12602: PUSH
12603: LD_INT 8
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 70
12626: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12627: LD_ADDR_VAR 0 32
12631: PUSH
12632: LD_VAR 0 4
12636: PPUSH
12637: LD_INT 22
12639: PUSH
12640: LD_VAR 0 1
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 21
12651: PUSH
12652: LD_INT 3
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 50
12661: PUSH
12662: EMPTY
12663: LIST
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: LD_INT 30
12670: PUSH
12671: LD_INT 31
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 30
12680: PUSH
12681: LD_INT 32
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 70
12703: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12704: LD_ADDR_VAR 0 33
12708: PUSH
12709: LD_VAR 0 4
12713: PPUSH
12714: LD_INT 22
12716: PUSH
12717: LD_VAR 0 1
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 21
12728: PUSH
12729: LD_INT 3
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 50
12738: PUSH
12739: EMPTY
12740: LIST
12741: PUSH
12742: LD_INT 2
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 30
12757: PUSH
12758: LD_INT 5
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: PPUSH
12776: CALL_OW 70
12780: ST_TO_ADDR
// for i := 1 to personel do
12781: LD_ADDR_VAR 0 13
12785: PUSH
12786: DOUBLE
12787: LD_INT 1
12789: DEC
12790: ST_TO_ADDR
12791: LD_VAR 0 18
12795: PUSH
12796: FOR_TO
12797: IFFALSE 13003
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12799: LD_VAR 0 18
12803: PUSH
12804: LD_VAR 0 13
12808: ARRAY
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PPUSH
12814: CALL_OW 256
12818: PUSH
12819: LD_INT 1000
12821: EQUAL
12822: IFFALSE 12864
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12824: LD_ADDR_VAR 0 18
12828: PUSH
12829: LD_VAR 0 18
12833: PPUSH
12834: LD_VAR 0 13
12838: PUSH
12839: LD_VAR 0 18
12843: PUSH
12844: LD_VAR 0 13
12848: ARRAY
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL 36532 0 3
12861: ST_TO_ADDR
// end else
12862: GO 12951
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12864: LD_VAR 0 18
12868: PUSH
12869: LD_VAR 0 13
12873: ARRAY
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: CALL_OW 256
12883: PUSH
12884: LD_INT 950
12886: LESSEQUAL
12887: IFFALSE 12951
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
12889: LD_ADDR_VAR 0 18
12893: PUSH
12894: LD_VAR 0 18
12898: PPUSH
12899: LD_VAR 0 13
12903: PUSH
12904: LD_VAR 0 18
12908: PUSH
12909: LD_VAR 0 13
12913: ARRAY
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PPUSH
12919: LD_INT 0
12921: PPUSH
12922: CALL 36532 0 3
12926: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12927: LD_VAR 0 18
12931: PUSH
12932: LD_VAR 0 13
12936: ARRAY
12937: PUSH
12938: LD_INT 1
12940: ARRAY
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12951: LD_VAR 0 18
12955: PUSH
12956: LD_VAR 0 13
12960: ARRAY
12961: PUSH
12962: LD_INT 1
12964: ARRAY
12965: PPUSH
12966: CALL_OW 256
12970: PUSH
12971: LD_INT 250
12973: LESS
12974: IFFALSE 13001
// personel = personel diff [ personel [ i ] ] ;
12976: LD_ADDR_VAR 0 18
12980: PUSH
12981: LD_VAR 0 18
12985: PUSH
12986: LD_VAR 0 18
12990: PUSH
12991: LD_VAR 0 13
12995: ARRAY
12996: PUSH
12997: EMPTY
12998: LIST
12999: DIFF
13000: ST_TO_ADDR
// end ;
13001: GO 12796
13003: POP
13004: POP
// for i := 1 to vehicles do
13005: LD_ADDR_VAR 0 13
13009: PUSH
13010: DOUBLE
13011: LD_INT 1
13013: DEC
13014: ST_TO_ADDR
13015: LD_VAR 0 24
13019: PUSH
13020: FOR_TO
13021: IFFALSE 13407
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
13023: LD_VAR 0 24
13027: PUSH
13028: LD_VAR 0 13
13032: ARRAY
13033: PUSH
13034: LD_INT 1
13036: ARRAY
13037: PPUSH
13038: CALL_OW 261
13042: PUSH
13043: LD_INT 50
13045: LESS
13046: IFFALSE 13070
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
13048: LD_VAR 0 24
13052: PUSH
13053: LD_VAR 0 13
13057: ARRAY
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_INT 100
13065: PPUSH
13066: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
13070: LD_VAR 0 24
13074: PUSH
13075: LD_VAR 0 13
13079: ARRAY
13080: PUSH
13081: LD_INT 1
13083: ARRAY
13084: PPUSH
13085: CALL_OW 256
13089: PUSH
13090: LD_INT 1000
13092: EQUAL
13093: IFFALSE 13268
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
13095: LD_VAR 0 24
13099: PUSH
13100: LD_VAR 0 13
13104: ARRAY
13105: PUSH
13106: LD_INT 1
13108: ARRAY
13109: PPUSH
13110: CALL_OW 263
13114: PUSH
13115: LD_INT 1
13117: EQUAL
13118: IFFALSE 13176
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
13120: LD_VAR 0 24
13124: PUSH
13125: LD_VAR 0 13
13129: ARRAY
13130: PUSH
13131: LD_INT 2
13133: ARRAY
13134: PPUSH
13135: CALL_OW 310
13139: NOT
13140: IFFALSE 13176
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
13142: LD_VAR 0 24
13146: PUSH
13147: LD_VAR 0 13
13151: ARRAY
13152: PUSH
13153: LD_INT 2
13155: ARRAY
13156: PPUSH
13157: LD_VAR 0 24
13161: PUSH
13162: LD_VAR 0 13
13166: ARRAY
13167: PUSH
13168: LD_INT 1
13170: ARRAY
13171: PPUSH
13172: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13176: LD_VAR 0 24
13180: PUSH
13181: LD_VAR 0 10
13185: LESS
13186: IFFALSE 13228
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13188: LD_ADDR_VAR 0 24
13192: PUSH
13193: LD_VAR 0 24
13197: PPUSH
13198: LD_VAR 0 13
13202: PUSH
13203: LD_VAR 0 24
13207: PUSH
13208: LD_VAR 0 13
13212: ARRAY
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL 36532 0 3
13225: ST_TO_ADDR
13226: GO 13266
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13228: LD_ADDR_VAR 0 24
13232: PUSH
13233: LD_VAR 0 24
13237: PPUSH
13238: LD_VAR 0 13
13242: PUSH
13243: LD_VAR 0 24
13247: PUSH
13248: LD_VAR 0 13
13252: ARRAY
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PPUSH
13258: LD_INT 2
13260: PPUSH
13261: CALL 36532 0 3
13265: ST_TO_ADDR
// end else
13266: GO 13355
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13268: LD_VAR 0 24
13272: PUSH
13273: LD_VAR 0 13
13277: ARRAY
13278: PUSH
13279: LD_INT 1
13281: ARRAY
13282: PPUSH
13283: CALL_OW 256
13287: PUSH
13288: LD_INT 650
13290: LESSEQUAL
13291: IFFALSE 13355
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13293: LD_ADDR_VAR 0 24
13297: PUSH
13298: LD_VAR 0 24
13302: PPUSH
13303: LD_VAR 0 13
13307: PUSH
13308: LD_VAR 0 24
13312: PUSH
13313: LD_VAR 0 13
13317: ARRAY
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: LD_INT 0
13325: PPUSH
13326: CALL 36532 0 3
13330: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13331: LD_VAR 0 24
13335: PUSH
13336: LD_VAR 0 13
13340: ARRAY
13341: PUSH
13342: LD_INT 1
13344: ARRAY
13345: PPUSH
13346: LD_VAR 0 6
13350: PPUSH
13351: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13355: LD_VAR 0 24
13359: PUSH
13360: LD_VAR 0 13
13364: ARRAY
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PPUSH
13370: CALL_OW 256
13374: PUSH
13375: LD_INT 250
13377: LESS
13378: IFFALSE 13405
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13380: LD_ADDR_VAR 0 24
13384: PUSH
13385: LD_VAR 0 24
13389: PUSH
13390: LD_VAR 0 24
13394: PUSH
13395: LD_VAR 0 13
13399: ARRAY
13400: PUSH
13401: EMPTY
13402: LIST
13403: DIFF
13404: ST_TO_ADDR
// end ;
13405: GO 13020
13407: POP
13408: POP
// for i := 1 to personel do
13409: LD_ADDR_VAR 0 13
13413: PUSH
13414: DOUBLE
13415: LD_INT 1
13417: DEC
13418: ST_TO_ADDR
13419: LD_VAR 0 18
13423: PUSH
13424: FOR_TO
13425: IFFALSE 13466
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13427: LD_ADDR_VAR 0 19
13431: PUSH
13432: LD_VAR 0 19
13436: PUSH
13437: LD_VAR 0 18
13441: PUSH
13442: LD_VAR 0 13
13446: ARRAY
13447: PPUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 72
13462: ADD
13463: ST_TO_ADDR
13464: GO 13424
13466: POP
13467: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13468: LD_VAR 0 19
13472: PUSH
13473: LD_VAR 0 32
13477: PPUSH
13478: LD_INT 3
13480: PUSH
13481: LD_INT 59
13483: PUSH
13484: EMPTY
13485: LIST
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 72
13495: AND
13496: IFFALSE 13784
// begin for i := 1 to personel do
13498: LD_ADDR_VAR 0 13
13502: PUSH
13503: DOUBLE
13504: LD_INT 1
13506: DEC
13507: ST_TO_ADDR
13508: LD_VAR 0 18
13512: PUSH
13513: FOR_TO
13514: IFFALSE 13780
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13516: LD_VAR 0 18
13520: PUSH
13521: LD_VAR 0 13
13525: ARRAY
13526: PUSH
13527: LD_INT 1
13529: ARRAY
13530: PPUSH
13531: CALL_OW 257
13535: PUSH
13536: LD_INT 1
13538: EQUAL
13539: PUSH
13540: LD_VAR 0 18
13544: PUSH
13545: LD_VAR 0 13
13549: ARRAY
13550: PUSH
13551: LD_INT 3
13553: ARRAY
13554: PUSH
13555: LD_INT 1
13557: EQUAL
13558: AND
13559: IFFALSE 13778
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13561: LD_VAR 0 18
13565: PUSH
13566: LD_VAR 0 13
13570: ARRAY
13571: PUSH
13572: LD_INT 1
13574: ARRAY
13575: PPUSH
13576: CALL_OW 437
13580: IFFALSE 13681
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13582: LD_VAR 0 18
13586: PUSH
13587: LD_VAR 0 13
13591: ARRAY
13592: PUSH
13593: LD_INT 1
13595: ARRAY
13596: PPUSH
13597: CALL_OW 437
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: PUSH
13606: LD_INT 1
13608: ARRAY
13609: PUSH
13610: LD_STRING e
13612: EQUAL
13613: PUSH
13614: LD_VAR 0 18
13618: PUSH
13619: LD_VAR 0 13
13623: ARRAY
13624: PUSH
13625: LD_INT 1
13627: ARRAY
13628: PPUSH
13629: CALL_OW 437
13633: PUSH
13634: LD_INT 1
13636: ARRAY
13637: PUSH
13638: LD_INT 4
13640: ARRAY
13641: PPUSH
13642: CALL_OW 266
13646: PUSH
13647: LD_INT 4
13649: PUSH
13650: LD_INT 5
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: IN
13657: AND
13658: IFFALSE 13681
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13660: LD_VAR 0 18
13664: PUSH
13665: LD_VAR 0 13
13669: ARRAY
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: PPUSH
13675: EMPTY
13676: PPUSH
13677: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13681: LD_ADDR_VAR 0 36
13685: PUSH
13686: LD_VAR 0 32
13690: PPUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 59
13696: PUSH
13697: EMPTY
13698: LIST
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 72
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13776
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13712: LD_VAR 0 18
13716: PUSH
13717: LD_VAR 0 13
13721: ARRAY
13722: PUSH
13723: LD_INT 1
13725: ARRAY
13726: PPUSH
13727: CALL_OW 310
13731: PPUSH
13732: CALL_OW 266
13736: PUSH
13737: LD_INT 31
13739: PUSH
13740: LD_INT 32
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: IN
13747: NOT
13748: IFFALSE 13774
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13750: LD_VAR 0 18
13754: PUSH
13755: LD_VAR 0 13
13759: ARRAY
13760: PUSH
13761: LD_INT 1
13763: ARRAY
13764: PPUSH
13765: LD_VAR 0 36
13769: PPUSH
13770: CALL_OW 120
13774: GO 13709
13776: POP
13777: POP
// end ; end ;
13778: GO 13513
13780: POP
13781: POP
// end else
13782: GO 13999
// if soldiers and barracks then
13784: LD_VAR 0 19
13788: PUSH
13789: LD_VAR 0 33
13793: AND
13794: IFFALSE 13999
// for i := 1 to personel do
13796: LD_ADDR_VAR 0 13
13800: PUSH
13801: DOUBLE
13802: LD_INT 1
13804: DEC
13805: ST_TO_ADDR
13806: LD_VAR 0 18
13810: PUSH
13811: FOR_TO
13812: IFFALSE 13997
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13814: LD_VAR 0 18
13818: PUSH
13819: LD_VAR 0 13
13823: ARRAY
13824: PUSH
13825: LD_INT 1
13827: ARRAY
13828: PPUSH
13829: CALL_OW 257
13833: PUSH
13834: LD_INT 1
13836: EQUAL
13837: PUSH
13838: LD_VAR 0 18
13842: PUSH
13843: LD_VAR 0 13
13847: ARRAY
13848: PUSH
13849: LD_INT 3
13851: ARRAY
13852: PUSH
13853: LD_INT 1
13855: EQUAL
13856: AND
13857: PUSH
13858: LD_VAR 0 18
13862: PUSH
13863: LD_VAR 0 13
13867: ARRAY
13868: PUSH
13869: LD_INT 1
13871: ARRAY
13872: PPUSH
13873: LD_INT 56
13875: PUSH
13876: EMPTY
13877: LIST
13878: PPUSH
13879: CALL_OW 72
13883: AND
13884: IFFALSE 13995
// begin if not personel [ i ] [ 2 ] then
13886: LD_VAR 0 18
13890: PUSH
13891: LD_VAR 0 13
13895: ARRAY
13896: PUSH
13897: LD_INT 2
13899: ARRAY
13900: NOT
13901: IFFALSE 13961
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13903: LD_ADDR_VAR 0 18
13907: PUSH
13908: LD_VAR 0 18
13912: PPUSH
13913: LD_VAR 0 13
13917: PUSH
13918: LD_VAR 0 18
13922: PUSH
13923: LD_VAR 0 13
13927: ARRAY
13928: PUSH
13929: LD_INT 1
13931: MINUS
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PPUSH
13937: LD_VAR 0 33
13941: PUSH
13942: LD_INT 1
13944: PPUSH
13945: LD_VAR 0 33
13949: PPUSH
13950: CALL_OW 12
13954: ARRAY
13955: PPUSH
13956: CALL 36532 0 3
13960: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13961: LD_VAR 0 18
13965: PUSH
13966: LD_VAR 0 13
13970: ARRAY
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PPUSH
13976: LD_VAR 0 18
13980: PUSH
13981: LD_VAR 0 13
13985: ARRAY
13986: PUSH
13987: LD_INT 2
13989: ARRAY
13990: PPUSH
13991: CALL_OW 120
// end ;
13995: GO 13811
13997: POP
13998: POP
// for i := 1 to personel do
13999: LD_ADDR_VAR 0 13
14003: PUSH
14004: DOUBLE
14005: LD_INT 1
14007: DEC
14008: ST_TO_ADDR
14009: LD_VAR 0 18
14013: PUSH
14014: FOR_TO
14015: IFFALSE 14056
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
14017: LD_ADDR_VAR 0 20
14021: PUSH
14022: LD_VAR 0 20
14026: PUSH
14027: LD_VAR 0 18
14031: PUSH
14032: LD_VAR 0 13
14036: ARRAY
14037: PPUSH
14038: LD_INT 25
14040: PUSH
14041: LD_INT 2
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 72
14052: ADD
14053: ST_TO_ADDR
14054: GO 14014
14056: POP
14057: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14058: LD_VAR 0 20
14062: PUSH
14063: LD_VAR 0 4
14067: PPUSH
14068: LD_INT 22
14070: PUSH
14071: LD_VAR 0 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 21
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 24
14095: PUSH
14096: LD_INT 1000
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 70
14116: AND
14117: IFFALSE 14393
// begin for i := 1 to personel do
14119: LD_ADDR_VAR 0 13
14123: PUSH
14124: DOUBLE
14125: LD_INT 1
14127: DEC
14128: ST_TO_ADDR
14129: LD_VAR 0 18
14133: PUSH
14134: FOR_TO
14135: IFFALSE 14389
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14137: LD_VAR 0 18
14141: PUSH
14142: LD_VAR 0 13
14146: ARRAY
14147: PUSH
14148: LD_INT 1
14150: ARRAY
14151: PPUSH
14152: CALL_OW 257
14156: PUSH
14157: LD_INT 2
14159: EQUAL
14160: PUSH
14161: LD_VAR 0 18
14165: PUSH
14166: LD_VAR 0 13
14170: ARRAY
14171: PUSH
14172: LD_INT 3
14174: ARRAY
14175: PUSH
14176: LD_INT 1
14178: EQUAL
14179: AND
14180: IFFALSE 14387
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14182: LD_VAR 0 18
14186: PUSH
14187: LD_VAR 0 13
14191: ARRAY
14192: PUSH
14193: LD_INT 1
14195: ARRAY
14196: PPUSH
14197: CALL_OW 437
14201: IFFALSE 14257
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14203: LD_VAR 0 18
14207: PUSH
14208: LD_VAR 0 13
14212: ARRAY
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PPUSH
14218: CALL_OW 437
14222: PUSH
14223: LD_INT 1
14225: ARRAY
14226: PUSH
14227: LD_INT 1
14229: ARRAY
14230: PUSH
14231: LD_STRING e
14233: EQUAL
14234: IFFALSE 14257
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14236: LD_VAR 0 18
14240: PUSH
14241: LD_VAR 0 13
14245: ARRAY
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: EMPTY
14252: PPUSH
14253: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14257: LD_VAR 0 18
14261: PUSH
14262: LD_VAR 0 13
14266: ARRAY
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PPUSH
14272: CALL_OW 310
14276: IFFALSE 14297
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14278: LD_VAR 0 18
14282: PUSH
14283: LD_VAR 0 13
14287: ARRAY
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: PPUSH
14293: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14297: LD_ADDR_VAR 0 34
14301: PUSH
14302: LD_VAR 0 4
14306: PPUSH
14307: LD_INT 22
14309: PUSH
14310: LD_VAR 0 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 21
14321: PUSH
14322: LD_INT 3
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 3
14331: PUSH
14332: LD_INT 24
14334: PUSH
14335: LD_INT 1000
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: PPUSH
14351: CALL_OW 70
14355: PUSH
14356: FOR_IN
14357: IFFALSE 14385
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14359: LD_VAR 0 18
14363: PUSH
14364: LD_VAR 0 13
14368: ARRAY
14369: PUSH
14370: LD_INT 1
14372: ARRAY
14373: PPUSH
14374: LD_VAR 0 34
14378: PPUSH
14379: CALL_OW 190
14383: GO 14356
14385: POP
14386: POP
// end ;
14387: GO 14134
14389: POP
14390: POP
// end else
14391: GO 14655
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14393: LD_VAR 0 20
14397: PUSH
14398: LD_VAR 0 20
14402: PPUSH
14403: LD_INT 56
14405: PUSH
14406: EMPTY
14407: LIST
14408: PPUSH
14409: CALL_OW 72
14413: AND
14414: PUSH
14415: LD_VAR 0 29
14419: AND
14420: IFFALSE 14655
// for i := 1 to personel do
14422: LD_ADDR_VAR 0 13
14426: PUSH
14427: DOUBLE
14428: LD_INT 1
14430: DEC
14431: ST_TO_ADDR
14432: LD_VAR 0 18
14436: PUSH
14437: FOR_TO
14438: IFFALSE 14653
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14440: LD_VAR 0 18
14444: PUSH
14445: LD_VAR 0 13
14449: ARRAY
14450: PUSH
14451: LD_INT 1
14453: ARRAY
14454: PPUSH
14455: CALL_OW 257
14459: PUSH
14460: LD_INT 2
14462: EQUAL
14463: PUSH
14464: LD_VAR 0 18
14468: PUSH
14469: LD_VAR 0 13
14473: ARRAY
14474: PUSH
14475: LD_INT 3
14477: ARRAY
14478: PUSH
14479: LD_INT 1
14481: EQUAL
14482: AND
14483: IFFALSE 14651
// begin if not personel [ i ] [ 2 ] then
14485: LD_VAR 0 18
14489: PUSH
14490: LD_VAR 0 13
14494: ARRAY
14495: PUSH
14496: LD_INT 2
14498: ARRAY
14499: NOT
14500: IFFALSE 14617
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14502: LD_ADDR_VAR 0 18
14506: PUSH
14507: LD_VAR 0 18
14511: PPUSH
14512: LD_VAR 0 13
14516: PUSH
14517: LD_VAR 0 18
14521: PUSH
14522: LD_VAR 0 13
14526: ARRAY
14527: PUSH
14528: LD_INT 1
14530: MINUS
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PPUSH
14536: LD_VAR 0 4
14540: PPUSH
14541: LD_INT 22
14543: PUSH
14544: LD_VAR 0 1
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 21
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 50
14565: PUSH
14566: EMPTY
14567: LIST
14568: PUSH
14569: LD_INT 2
14571: PUSH
14572: LD_INT 30
14574: PUSH
14575: LD_INT 0
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 30
14584: PUSH
14585: LD_INT 1
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 70
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: CALL 36532 0 3
14616: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14617: LD_VAR 0 18
14621: PUSH
14622: LD_VAR 0 13
14626: ARRAY
14627: PUSH
14628: LD_INT 1
14630: ARRAY
14631: PPUSH
14632: LD_VAR 0 18
14636: PUSH
14637: LD_VAR 0 13
14641: ARRAY
14642: PUSH
14643: LD_INT 2
14645: ARRAY
14646: PPUSH
14647: CALL_OW 120
// end ; end ;
14651: GO 14437
14653: POP
14654: POP
// for i := 1 to personel do
14655: LD_ADDR_VAR 0 13
14659: PUSH
14660: DOUBLE
14661: LD_INT 1
14663: DEC
14664: ST_TO_ADDR
14665: LD_VAR 0 18
14669: PUSH
14670: FOR_TO
14671: IFFALSE 14712
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14673: LD_ADDR_VAR 0 21
14677: PUSH
14678: LD_VAR 0 21
14682: PUSH
14683: LD_VAR 0 18
14687: PUSH
14688: LD_VAR 0 13
14692: ARRAY
14693: PPUSH
14694: LD_INT 25
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PPUSH
14704: CALL_OW 72
14708: ADD
14709: ST_TO_ADDR
14710: GO 14670
14712: POP
14713: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14714: LD_VAR 0 21
14718: PUSH
14719: LD_VAR 0 4
14723: PPUSH
14724: LD_INT 22
14726: PUSH
14727: LD_VAR 0 1
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 3
14748: PUSH
14749: LD_INT 24
14751: PUSH
14752: LD_INT 1000
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 70
14772: AND
14773: IFFALSE 15377
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14775: LD_ADDR_VAR 0 35
14779: PUSH
14780: LD_VAR 0 4
14784: PPUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: LD_INT 24
14812: PUSH
14813: LD_INT 1000
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 70
14833: PUSH
14834: FOR_IN
14835: IFFALSE 15373
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14837: LD_VAR 0 35
14841: PPUSH
14842: LD_VAR 0 6
14846: PPUSH
14847: CALL_OW 299
14851: PUSH
14852: LD_INT 5
14854: LESS
14855: IFFALSE 15150
// begin for i := 1 to vehicles do
14857: LD_ADDR_VAR 0 13
14861: PUSH
14862: DOUBLE
14863: LD_INT 1
14865: DEC
14866: ST_TO_ADDR
14867: LD_VAR 0 24
14871: PUSH
14872: FOR_TO
14873: IFFALSE 14942
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14875: LD_VAR 0 24
14879: PUSH
14880: LD_VAR 0 13
14884: ARRAY
14885: PUSH
14886: LD_INT 1
14888: ARRAY
14889: PUSH
14890: LD_VAR 0 35
14894: EQUAL
14895: IFFALSE 14916
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14897: LD_VAR 0 24
14901: PUSH
14902: LD_VAR 0 13
14906: ARRAY
14907: PUSH
14908: LD_INT 2
14910: ARRAY
14911: PPUSH
14912: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14916: LD_VAR 0 24
14920: PUSH
14921: LD_VAR 0 13
14925: ARRAY
14926: PUSH
14927: LD_INT 2
14929: ARRAY
14930: PPUSH
14931: LD_VAR 0 35
14935: PPUSH
14936: CALL_OW 189
// end ;
14940: GO 14872
14942: POP
14943: POP
// for i := 1 to personel do
14944: LD_ADDR_VAR 0 13
14948: PUSH
14949: DOUBLE
14950: LD_INT 1
14952: DEC
14953: ST_TO_ADDR
14954: LD_VAR 0 18
14958: PUSH
14959: FOR_TO
14960: IFFALSE 15148
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14962: LD_VAR 0 18
14966: PUSH
14967: LD_VAR 0 13
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: CALL_OW 257
14981: PUSH
14982: LD_INT 3
14984: EQUAL
14985: PUSH
14986: LD_VAR 0 18
14990: PUSH
14991: LD_VAR 0 13
14995: ARRAY
14996: PUSH
14997: LD_INT 3
14999: ARRAY
15000: PUSH
15001: LD_INT 1
15003: EQUAL
15004: AND
15005: IFFALSE 15146
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15007: LD_VAR 0 18
15011: PUSH
15012: LD_VAR 0 13
15016: ARRAY
15017: PUSH
15018: LD_INT 1
15020: ARRAY
15021: PPUSH
15022: CALL_OW 437
15026: IFFALSE 15082
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15028: LD_VAR 0 18
15032: PUSH
15033: LD_VAR 0 13
15037: ARRAY
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PPUSH
15043: CALL_OW 437
15047: PUSH
15048: LD_INT 1
15050: ARRAY
15051: PUSH
15052: LD_INT 1
15054: ARRAY
15055: PUSH
15056: LD_STRING e
15058: EQUAL
15059: IFFALSE 15082
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15061: LD_VAR 0 18
15065: PUSH
15066: LD_VAR 0 13
15070: ARRAY
15071: PUSH
15072: LD_INT 1
15074: ARRAY
15075: PPUSH
15076: EMPTY
15077: PPUSH
15078: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15082: LD_VAR 0 18
15086: PUSH
15087: LD_VAR 0 13
15091: ARRAY
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: PPUSH
15097: CALL_OW 310
15101: IFFALSE 15122
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15103: LD_VAR 0 18
15107: PUSH
15108: LD_VAR 0 13
15112: ARRAY
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PPUSH
15118: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15122: LD_VAR 0 18
15126: PUSH
15127: LD_VAR 0 13
15131: ARRAY
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 35
15141: PPUSH
15142: CALL_OW 189
// end ;
15146: GO 14959
15148: POP
15149: POP
// end ; if GetLives ( damageUnit ) < 250 then
15150: LD_VAR 0 35
15154: PPUSH
15155: CALL_OW 256
15159: PUSH
15160: LD_INT 250
15162: LESS
15163: IFFALSE 15371
// for i := 1 to personel do
15165: LD_ADDR_VAR 0 13
15169: PUSH
15170: DOUBLE
15171: LD_INT 1
15173: DEC
15174: ST_TO_ADDR
15175: LD_VAR 0 18
15179: PUSH
15180: FOR_TO
15181: IFFALSE 15369
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15183: LD_VAR 0 18
15187: PUSH
15188: LD_VAR 0 13
15192: ARRAY
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: CALL_OW 257
15202: PUSH
15203: LD_INT 3
15205: EQUAL
15206: PUSH
15207: LD_VAR 0 18
15211: PUSH
15212: LD_VAR 0 13
15216: ARRAY
15217: PUSH
15218: LD_INT 3
15220: ARRAY
15221: PUSH
15222: LD_INT 1
15224: EQUAL
15225: AND
15226: IFFALSE 15367
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15228: LD_VAR 0 18
15232: PUSH
15233: LD_VAR 0 13
15237: ARRAY
15238: PUSH
15239: LD_INT 1
15241: ARRAY
15242: PPUSH
15243: CALL_OW 437
15247: IFFALSE 15303
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15249: LD_VAR 0 18
15253: PUSH
15254: LD_VAR 0 13
15258: ARRAY
15259: PUSH
15260: LD_INT 1
15262: ARRAY
15263: PPUSH
15264: CALL_OW 437
15268: PUSH
15269: LD_INT 1
15271: ARRAY
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PUSH
15277: LD_STRING e
15279: EQUAL
15280: IFFALSE 15303
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15282: LD_VAR 0 18
15286: PUSH
15287: LD_VAR 0 13
15291: ARRAY
15292: PUSH
15293: LD_INT 1
15295: ARRAY
15296: PPUSH
15297: EMPTY
15298: PPUSH
15299: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15303: LD_VAR 0 18
15307: PUSH
15308: LD_VAR 0 13
15312: ARRAY
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: CALL_OW 310
15322: IFFALSE 15343
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15324: LD_VAR 0 18
15328: PUSH
15329: LD_VAR 0 13
15333: ARRAY
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15343: LD_VAR 0 18
15347: PUSH
15348: LD_VAR 0 13
15352: ARRAY
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 35
15362: PPUSH
15363: CALL_OW 189
// end ;
15367: GO 15180
15369: POP
15370: POP
// end ;
15371: GO 14834
15373: POP
15374: POP
// end else
15375: GO 15582
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15377: LD_VAR 0 21
15381: PUSH
15382: LD_VAR 0 21
15386: PPUSH
15387: LD_INT 56
15389: PUSH
15390: EMPTY
15391: LIST
15392: PPUSH
15393: CALL_OW 72
15397: AND
15398: PUSH
15399: LD_VAR 0 30
15403: AND
15404: IFFALSE 15582
// for i := 1 to personel do
15406: LD_ADDR_VAR 0 13
15410: PUSH
15411: DOUBLE
15412: LD_INT 1
15414: DEC
15415: ST_TO_ADDR
15416: LD_VAR 0 18
15420: PUSH
15421: FOR_TO
15422: IFFALSE 15580
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15424: LD_VAR 0 18
15428: PUSH
15429: LD_VAR 0 13
15433: ARRAY
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: CALL_OW 257
15443: PUSH
15444: LD_INT 3
15446: EQUAL
15447: PUSH
15448: LD_VAR 0 18
15452: PUSH
15453: LD_VAR 0 13
15457: ARRAY
15458: PUSH
15459: LD_INT 3
15461: ARRAY
15462: PUSH
15463: LD_INT 1
15465: EQUAL
15466: AND
15467: IFFALSE 15578
// begin if not personel [ i ] [ 2 ] then
15469: LD_VAR 0 18
15473: PUSH
15474: LD_VAR 0 13
15478: ARRAY
15479: PUSH
15480: LD_INT 2
15482: ARRAY
15483: NOT
15484: IFFALSE 15544
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15486: LD_ADDR_VAR 0 18
15490: PUSH
15491: LD_VAR 0 18
15495: PPUSH
15496: LD_VAR 0 13
15500: PUSH
15501: LD_VAR 0 18
15505: PUSH
15506: LD_VAR 0 13
15510: ARRAY
15511: PUSH
15512: LD_INT 1
15514: MINUS
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: LD_VAR 0 30
15524: PUSH
15525: LD_INT 1
15527: PPUSH
15528: LD_VAR 0 30
15532: PPUSH
15533: CALL_OW 12
15537: ARRAY
15538: PPUSH
15539: CALL 36532 0 3
15543: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15544: LD_VAR 0 18
15548: PUSH
15549: LD_VAR 0 13
15553: ARRAY
15554: PUSH
15555: LD_INT 1
15557: ARRAY
15558: PPUSH
15559: LD_VAR 0 18
15563: PUSH
15564: LD_VAR 0 13
15568: ARRAY
15569: PUSH
15570: LD_INT 2
15572: ARRAY
15573: PPUSH
15574: CALL_OW 120
// end ;
15578: GO 15421
15580: POP
15581: POP
// for i := 1 to personel do
15582: LD_ADDR_VAR 0 13
15586: PUSH
15587: DOUBLE
15588: LD_INT 1
15590: DEC
15591: ST_TO_ADDR
15592: LD_VAR 0 18
15596: PUSH
15597: FOR_TO
15598: IFFALSE 15639
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15600: LD_ADDR_VAR 0 22
15604: PUSH
15605: LD_VAR 0 22
15609: PUSH
15610: LD_VAR 0 18
15614: PUSH
15615: LD_VAR 0 13
15619: ARRAY
15620: PPUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 4
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: ADD
15636: ST_TO_ADDR
15637: GO 15597
15639: POP
15640: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15641: LD_VAR 0 22
15645: PUSH
15646: LD_VAR 0 4
15650: PPUSH
15651: LD_INT 22
15653: PUSH
15654: LD_VAR 0 1
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 3
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 1000
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: LIST
15694: PPUSH
15695: CALL_OW 70
15699: AND
15700: IFFALSE 16217
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15702: LD_ADDR_VAR 0 35
15706: PUSH
15707: LD_VAR 0 4
15711: PPUSH
15712: LD_INT 22
15714: PUSH
15715: LD_VAR 0 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 3
15736: PUSH
15737: LD_INT 24
15739: PUSH
15740: LD_INT 1000
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 70
15760: PUSH
15761: FOR_IN
15762: IFFALSE 16213
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15764: LD_VAR 0 35
15768: PPUSH
15769: LD_VAR 0 5
15773: PPUSH
15774: CALL_OW 299
15778: PUSH
15779: LD_INT 5
15781: LESS
15782: IFFALSE 15990
// for i := 1 to personel do
15784: LD_ADDR_VAR 0 13
15788: PUSH
15789: DOUBLE
15790: LD_INT 1
15792: DEC
15793: ST_TO_ADDR
15794: LD_VAR 0 18
15798: PUSH
15799: FOR_TO
15800: IFFALSE 15988
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15802: LD_VAR 0 18
15806: PUSH
15807: LD_VAR 0 13
15811: ARRAY
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: PPUSH
15817: CALL_OW 257
15821: PUSH
15822: LD_INT 4
15824: EQUAL
15825: PUSH
15826: LD_VAR 0 18
15830: PUSH
15831: LD_VAR 0 13
15835: ARRAY
15836: PUSH
15837: LD_INT 3
15839: ARRAY
15840: PUSH
15841: LD_INT 1
15843: EQUAL
15844: AND
15845: IFFALSE 15986
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15847: LD_VAR 0 18
15851: PUSH
15852: LD_VAR 0 13
15856: ARRAY
15857: PUSH
15858: LD_INT 1
15860: ARRAY
15861: PPUSH
15862: CALL_OW 437
15866: IFFALSE 15922
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15868: LD_VAR 0 18
15872: PUSH
15873: LD_VAR 0 13
15877: ARRAY
15878: PUSH
15879: LD_INT 1
15881: ARRAY
15882: PPUSH
15883: CALL_OW 437
15887: PUSH
15888: LD_INT 1
15890: ARRAY
15891: PUSH
15892: LD_INT 1
15894: ARRAY
15895: PUSH
15896: LD_STRING e
15898: EQUAL
15899: IFFALSE 15922
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15901: LD_VAR 0 18
15905: PUSH
15906: LD_VAR 0 13
15910: ARRAY
15911: PUSH
15912: LD_INT 1
15914: ARRAY
15915: PPUSH
15916: EMPTY
15917: PPUSH
15918: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15922: LD_VAR 0 18
15926: PUSH
15927: LD_VAR 0 13
15931: ARRAY
15932: PUSH
15933: LD_INT 1
15935: ARRAY
15936: PPUSH
15937: CALL_OW 310
15941: IFFALSE 15962
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15943: LD_VAR 0 18
15947: PUSH
15948: LD_VAR 0 13
15952: ARRAY
15953: PUSH
15954: LD_INT 1
15956: ARRAY
15957: PPUSH
15958: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15962: LD_VAR 0 18
15966: PUSH
15967: LD_VAR 0 13
15971: ARRAY
15972: PUSH
15973: LD_INT 1
15975: ARRAY
15976: PPUSH
15977: LD_VAR 0 35
15981: PPUSH
15982: CALL_OW 188
// end ;
15986: GO 15799
15988: POP
15989: POP
// if GetLives ( damageUnit ) < 250 then
15990: LD_VAR 0 35
15994: PPUSH
15995: CALL_OW 256
15999: PUSH
16000: LD_INT 250
16002: LESS
16003: IFFALSE 16211
// for i := 1 to personel do
16005: LD_ADDR_VAR 0 13
16009: PUSH
16010: DOUBLE
16011: LD_INT 1
16013: DEC
16014: ST_TO_ADDR
16015: LD_VAR 0 18
16019: PUSH
16020: FOR_TO
16021: IFFALSE 16209
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16023: LD_VAR 0 18
16027: PUSH
16028: LD_VAR 0 13
16032: ARRAY
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: PPUSH
16038: CALL_OW 257
16042: PUSH
16043: LD_INT 4
16045: EQUAL
16046: PUSH
16047: LD_VAR 0 18
16051: PUSH
16052: LD_VAR 0 13
16056: ARRAY
16057: PUSH
16058: LD_INT 3
16060: ARRAY
16061: PUSH
16062: LD_INT 1
16064: EQUAL
16065: AND
16066: IFFALSE 16207
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
16068: LD_VAR 0 18
16072: PUSH
16073: LD_VAR 0 13
16077: ARRAY
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: PPUSH
16083: CALL_OW 437
16087: IFFALSE 16143
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
16089: LD_VAR 0 18
16093: PUSH
16094: LD_VAR 0 13
16098: ARRAY
16099: PUSH
16100: LD_INT 1
16102: ARRAY
16103: PPUSH
16104: CALL_OW 437
16108: PUSH
16109: LD_INT 1
16111: ARRAY
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: PUSH
16117: LD_STRING e
16119: EQUAL
16120: IFFALSE 16143
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
16122: LD_VAR 0 18
16126: PUSH
16127: LD_VAR 0 13
16131: ARRAY
16132: PUSH
16133: LD_INT 1
16135: ARRAY
16136: PPUSH
16137: EMPTY
16138: PPUSH
16139: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
16143: LD_VAR 0 18
16147: PUSH
16148: LD_VAR 0 13
16152: ARRAY
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PPUSH
16158: CALL_OW 310
16162: IFFALSE 16183
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16164: LD_VAR 0 18
16168: PUSH
16169: LD_VAR 0 13
16173: ARRAY
16174: PUSH
16175: LD_INT 1
16177: ARRAY
16178: PPUSH
16179: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16183: LD_VAR 0 18
16187: PUSH
16188: LD_VAR 0 13
16192: ARRAY
16193: PUSH
16194: LD_INT 1
16196: ARRAY
16197: PPUSH
16198: LD_VAR 0 35
16202: PPUSH
16203: CALL_OW 188
// end ;
16207: GO 16020
16209: POP
16210: POP
// end ;
16211: GO 15761
16213: POP
16214: POP
// end else
16215: GO 16422
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16217: LD_VAR 0 22
16221: PUSH
16222: LD_VAR 0 22
16226: PPUSH
16227: LD_INT 56
16229: PUSH
16230: EMPTY
16231: LIST
16232: PPUSH
16233: CALL_OW 72
16237: AND
16238: PUSH
16239: LD_VAR 0 31
16243: AND
16244: IFFALSE 16422
// for i := 1 to personel do
16246: LD_ADDR_VAR 0 13
16250: PUSH
16251: DOUBLE
16252: LD_INT 1
16254: DEC
16255: ST_TO_ADDR
16256: LD_VAR 0 18
16260: PUSH
16261: FOR_TO
16262: IFFALSE 16420
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16264: LD_VAR 0 18
16268: PUSH
16269: LD_VAR 0 13
16273: ARRAY
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PPUSH
16279: CALL_OW 257
16283: PUSH
16284: LD_INT 4
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 18
16292: PUSH
16293: LD_VAR 0 13
16297: ARRAY
16298: PUSH
16299: LD_INT 3
16301: ARRAY
16302: PUSH
16303: LD_INT 1
16305: EQUAL
16306: AND
16307: IFFALSE 16418
// begin if not personel [ i ] [ 2 ] then
16309: LD_VAR 0 18
16313: PUSH
16314: LD_VAR 0 13
16318: ARRAY
16319: PUSH
16320: LD_INT 2
16322: ARRAY
16323: NOT
16324: IFFALSE 16384
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16326: LD_ADDR_VAR 0 18
16330: PUSH
16331: LD_VAR 0 18
16335: PPUSH
16336: LD_VAR 0 13
16340: PUSH
16341: LD_VAR 0 18
16345: PUSH
16346: LD_VAR 0 13
16350: ARRAY
16351: PUSH
16352: LD_INT 1
16354: MINUS
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PPUSH
16360: LD_VAR 0 31
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 31
16372: PPUSH
16373: CALL_OW 12
16377: ARRAY
16378: PPUSH
16379: CALL 36532 0 3
16383: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16384: LD_VAR 0 18
16388: PUSH
16389: LD_VAR 0 13
16393: ARRAY
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: PPUSH
16399: LD_VAR 0 18
16403: PUSH
16404: LD_VAR 0 13
16408: ARRAY
16409: PUSH
16410: LD_INT 2
16412: ARRAY
16413: PPUSH
16414: CALL_OW 120
// end ;
16418: GO 16261
16420: POP
16421: POP
// wait ( 0 0$01 ) ;
16422: LD_INT 35
16424: PPUSH
16425: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16429: LD_VAR 0 24
16433: PUSH
16434: LD_VAR 0 8
16438: LESS
16439: PUSH
16440: LD_VAR 0 30
16444: AND
16445: IFFALSE 16695
// begin tmp = vehiclesAmount - vehicles ;
16447: LD_ADDR_VAR 0 15
16451: PUSH
16452: LD_VAR 0 8
16456: PUSH
16457: LD_VAR 0 24
16461: MINUS
16462: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16463: LD_ADDR_VAR 0 27
16467: PUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_VAR 0 2
16477: PPUSH
16478: CALL 7742 0 2
16482: ST_TO_ADDR
// for i := 1 to tmp do
16483: LD_ADDR_VAR 0 13
16487: PUSH
16488: DOUBLE
16489: LD_INT 1
16491: DEC
16492: ST_TO_ADDR
16493: LD_VAR 0 15
16497: PUSH
16498: FOR_TO
16499: IFFALSE 16691
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16501: LD_ADDR_VAR 0 15
16505: PUSH
16506: LD_VAR 0 27
16510: PUSH
16511: LD_INT 1
16513: PPUSH
16514: LD_VAR 0 27
16518: PPUSH
16519: CALL_OW 12
16523: ARRAY
16524: ST_TO_ADDR
// if tmp then
16525: LD_VAR 0 15
16529: IFFALSE 16689
// begin if tmp in [ 34 , 14 , 71 ] then
16531: LD_VAR 0 15
16535: PUSH
16536: LD_INT 34
16538: PUSH
16539: LD_INT 14
16541: PUSH
16542: LD_INT 71
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: IN
16550: IFFALSE 16588
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16552: LD_ADDR_VAR 0 28
16556: PUSH
16557: LD_INT 4
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: LD_INT 14
16565: PUSH
16566: EMPTY
16567: LIST
16568: PUSH
16569: LD_INT 24
16571: PUSH
16572: EMPTY
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: PUSH
16580: LD_VAR 0 2
16584: ARRAY
16585: ST_TO_ADDR
16586: GO 16646
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16588: LD_ADDR_VAR 0 28
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 3
16598: PUSH
16599: LD_INT 4
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 13
16609: PUSH
16610: LD_INT 14
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 21
16619: PUSH
16620: LD_INT 23
16622: PUSH
16623: LD_INT 24
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: PUSH
16640: LD_VAR 0 2
16644: ARRAY
16645: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16646: LD_VAR 0 30
16650: PUSH
16651: LD_INT 1
16653: ARRAY
16654: PPUSH
16655: LD_VAR 0 28
16659: PUSH
16660: LD_INT 1
16662: PPUSH
16663: LD_VAR 0 28
16667: PPUSH
16668: CALL_OW 12
16672: ARRAY
16673: PPUSH
16674: LD_INT 1
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: LD_VAR 0 15
16684: PPUSH
16685: CALL_OW 185
// end ; end ;
16689: GO 16498
16691: POP
16692: POP
// end else
16693: GO 16708
// ComCancel ( factory [ 1 ] ) ;
16695: LD_VAR 0 30
16699: PUSH
16700: LD_INT 1
16702: ARRAY
16703: PPUSH
16704: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16708: LD_ADDR_VAR 0 23
16712: PUSH
16713: LD_VAR 0 4
16717: PPUSH
16718: LD_INT 22
16720: PUSH
16721: LD_VAR 0 1
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 21
16732: PUSH
16733: LD_INT 2
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: PPUSH
16744: CALL_OW 70
16748: PUSH
16749: FOR_IN
16750: IFFALSE 16920
// begin vehicleInList = false ;
16752: LD_ADDR_VAR 0 25
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// for i := 1 to vehicles do
16760: LD_ADDR_VAR 0 13
16764: PUSH
16765: DOUBLE
16766: LD_INT 1
16768: DEC
16769: ST_TO_ADDR
16770: LD_VAR 0 24
16774: PUSH
16775: FOR_TO
16776: IFFALSE 16806
// begin if vehicle in vehicles [ i ] then
16778: LD_VAR 0 23
16782: PUSH
16783: LD_VAR 0 24
16787: PUSH
16788: LD_VAR 0 13
16792: ARRAY
16793: IN
16794: IFFALSE 16804
// vehicleInList = true ;
16796: LD_ADDR_VAR 0 25
16800: PUSH
16801: LD_INT 1
16803: ST_TO_ADDR
// end ;
16804: GO 16775
16806: POP
16807: POP
// if not vehicleInList then
16808: LD_VAR 0 25
16812: NOT
16813: IFFALSE 16918
// if vehicles < vehiclesToAttackAmount then
16815: LD_VAR 0 24
16819: PUSH
16820: LD_VAR 0 10
16824: LESS
16825: IFFALSE 16877
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16827: LD_ADDR_VAR 0 24
16831: PUSH
16832: LD_VAR 0 24
16836: PUSH
16837: LD_VAR 0 23
16841: PUSH
16842: LD_VAR 0 23
16846: PPUSH
16847: CALL_OW 313
16851: PUSH
16852: LD_INT 1
16854: ARRAY
16855: PUSH
16856: LD_VAR 0 23
16860: PPUSH
16861: CALL_OW 302
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: PUSH
16871: EMPTY
16872: LIST
16873: ADD
16874: ST_TO_ADDR
16875: GO 16918
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16877: LD_ADDR_VAR 0 24
16881: PUSH
16882: LD_VAR 0 24
16886: PUSH
16887: LD_VAR 0 23
16891: PUSH
16892: LD_VAR 0 23
16896: PPUSH
16897: CALL_OW 313
16901: PUSH
16902: LD_INT 1
16904: ARRAY
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: ADD
16917: ST_TO_ADDR
// end ;
16918: GO 16749
16920: POP
16921: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16922: LD_ADDR_VAR 0 37
16926: PUSH
16927: LD_VAR 0 7
16931: PPUSH
16932: LD_INT 81
16934: PUSH
16935: LD_VAR 0 1
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: CALL_OW 70
16948: PUSH
16949: FOR_IN
16950: IFFALSE 17129
// begin defenceUnits = [ ] ;
16952: LD_ADDR_VAR 0 26
16956: PUSH
16957: EMPTY
16958: ST_TO_ADDR
// for i := 1 to personel do
16959: LD_ADDR_VAR 0 13
16963: PUSH
16964: DOUBLE
16965: LD_INT 1
16967: DEC
16968: ST_TO_ADDR
16969: LD_VAR 0 18
16973: PUSH
16974: FOR_TO
16975: IFFALSE 17025
// if personel [ i ] [ 3 ] = 2 then
16977: LD_VAR 0 18
16981: PUSH
16982: LD_VAR 0 13
16986: ARRAY
16987: PUSH
16988: LD_INT 3
16990: ARRAY
16991: PUSH
16992: LD_INT 2
16994: EQUAL
16995: IFFALSE 17023
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16997: LD_ADDR_VAR 0 26
17001: PUSH
17002: LD_VAR 0 26
17006: PUSH
17007: LD_VAR 0 18
17011: PUSH
17012: LD_VAR 0 13
17016: ARRAY
17017: PUSH
17018: LD_INT 1
17020: ARRAY
17021: ADD
17022: ST_TO_ADDR
17023: GO 16974
17025: POP
17026: POP
// for i := 1 to vehicles do
17027: LD_ADDR_VAR 0 13
17031: PUSH
17032: DOUBLE
17033: LD_INT 1
17035: DEC
17036: ST_TO_ADDR
17037: LD_VAR 0 24
17041: PUSH
17042: FOR_TO
17043: IFFALSE 17093
// if vehicles [ i ] [ 3 ] = 2 then
17045: LD_VAR 0 24
17049: PUSH
17050: LD_VAR 0 13
17054: ARRAY
17055: PUSH
17056: LD_INT 3
17058: ARRAY
17059: PUSH
17060: LD_INT 2
17062: EQUAL
17063: IFFALSE 17091
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
17065: LD_ADDR_VAR 0 26
17069: PUSH
17070: LD_VAR 0 26
17074: PUSH
17075: LD_VAR 0 24
17079: PUSH
17080: LD_VAR 0 13
17084: ARRAY
17085: PUSH
17086: LD_INT 1
17088: ARRAY
17089: ADD
17090: ST_TO_ADDR
17091: GO 17042
17093: POP
17094: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
17095: LD_VAR 0 26
17099: PPUSH
17100: LD_INT 3
17102: PUSH
17103: LD_INT 60
17105: PUSH
17106: EMPTY
17107: LIST
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PPUSH
17113: CALL_OW 72
17117: PPUSH
17118: LD_VAR 0 37
17122: PPUSH
17123: CALL_OW 175
// end ;
17127: GO 16949
17129: POP
17130: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17131: LD_ADDR_VAR 0 38
17135: PUSH
17136: LD_INT 22
17138: PUSH
17139: LD_VAR 0 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 30
17153: PUSH
17154: LD_INT 31
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 30
17163: PUSH
17164: LD_INT 32
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 30
17173: PUSH
17174: LD_INT 33
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 30
17183: PUSH
17184: LD_INT 4
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 30
17193: PUSH
17194: LD_INT 5
17196: PUSH
17197: EMPTY
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17218: LD_ADDR_VAR 0 39
17222: PUSH
17223: LD_INT 81
17225: PUSH
17226: LD_VAR 0 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 21
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 58
17247: PUSH
17248: EMPTY
17249: LIST
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: PPUSH
17256: CALL_OW 69
17260: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17261: LD_VAR 0 38
17265: PUSH
17266: LD_VAR 0 39
17270: AND
17271: IFFALSE 17341
// for i in attackBuildings do
17273: LD_ADDR_VAR 0 13
17277: PUSH
17278: LD_VAR 0 38
17282: PUSH
17283: FOR_IN
17284: IFFALSE 17339
// for j in enemyBuildings do
17286: LD_ADDR_VAR 0 14
17290: PUSH
17291: LD_VAR 0 39
17295: PUSH
17296: FOR_IN
17297: IFFALSE 17335
// if GetDistUnits ( i , j ) < 12 then
17299: LD_VAR 0 13
17303: PPUSH
17304: LD_VAR 0 14
17308: PPUSH
17309: CALL_OW 296
17313: PUSH
17314: LD_INT 12
17316: LESS
17317: IFFALSE 17333
// ComAttackUnit ( i , j ) ;
17319: LD_VAR 0 13
17323: PPUSH
17324: LD_VAR 0 14
17328: PPUSH
17329: CALL_OW 115
17333: GO 17296
17335: POP
17336: POP
17337: GO 17283
17339: POP
17340: POP
// until not personel or not enableOmicronAI ;
17341: LD_VAR 0 18
17345: NOT
17346: PUSH
17347: LD_EXP 29
17351: NOT
17352: OR
17353: IFFALSE 12357
// end ;
17355: LD_VAR 0 12
17359: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
17364: PPUSH
// weapons = [ ru_gun ] ;
17365: LD_ADDR_VAR 0 3
17369: PUSH
17370: LD_INT 44
17372: PUSH
17373: EMPTY
17374: LIST
17375: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17376: LD_ADDR_VAR 0 2
17380: PUSH
17381: LD_EXP 72
17385: PUSH
17386: FOR_IN
17387: IFFALSE 17419
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17389: LD_VAR 0 2
17393: PPUSH
17394: LD_VAR 0 3
17398: PUSH
17399: LD_INT 1
17401: PPUSH
17402: LD_VAR 0 3
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: PPUSH
17413: CALL_OW 208
17417: GO 17386
17419: POP
17420: POP
// end ;
17421: LD_VAR 0 1
17425: RET
// export function KirovProduceVehicles ( factory ) ; begin
17426: LD_INT 0
17428: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17429: LD_VAR 0 1
17433: PPUSH
17434: LD_INT 21
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_INT 51
17445: PPUSH
17446: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17450: LD_VAR 0 1
17454: PPUSH
17455: LD_INT 21
17457: PPUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_INT 1
17463: PPUSH
17464: LD_INT 51
17466: PPUSH
17467: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17471: LD_VAR 0 1
17475: PPUSH
17476: LD_INT 21
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 51
17487: PPUSH
17488: CALL_OW 185
// case Difficulty of 1 :
17492: LD_OWVAR 67
17496: PUSH
17497: LD_INT 1
17499: DOUBLE
17500: EQUAL
17501: IFTRUE 17505
17503: GO 17628
17505: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17506: LD_VAR 0 1
17510: PPUSH
17511: LD_INT 21
17513: PUSH
17514: LD_INT 23
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PPUSH
17524: LD_INT 2
17526: PPUSH
17527: CALL_OW 12
17531: ARRAY
17532: PPUSH
17533: LD_INT 1
17535: PPUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_INT 43
17541: PPUSH
17542: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17546: LD_VAR 0 1
17550: PPUSH
17551: LD_INT 21
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PPUSH
17564: LD_INT 2
17566: PPUSH
17567: CALL_OW 12
17571: ARRAY
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_INT 43
17581: PPUSH
17582: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: LD_INT 21
17593: PUSH
17594: LD_INT 23
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PPUSH
17604: LD_INT 2
17606: PPUSH
17607: CALL_OW 12
17611: ARRAY
17612: PPUSH
17613: LD_INT 1
17615: PPUSH
17616: LD_INT 1
17618: PPUSH
17619: LD_INT 44
17621: PPUSH
17622: CALL_OW 185
// end ; 2 :
17626: GO 17891
17628: LD_INT 2
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17759
17636: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17637: LD_VAR 0 1
17641: PPUSH
17642: LD_INT 21
17644: PUSH
17645: LD_INT 23
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: LD_INT 1
17654: PPUSH
17655: LD_INT 2
17657: PPUSH
17658: CALL_OW 12
17662: ARRAY
17663: PPUSH
17664: LD_INT 1
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: LD_INT 42
17672: PPUSH
17673: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 21
17684: PUSH
17685: LD_INT 23
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 1
17694: PPUSH
17695: LD_INT 2
17697: PPUSH
17698: CALL_OW 12
17702: ARRAY
17703: PPUSH
17704: LD_INT 1
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: LD_INT 43
17712: PPUSH
17713: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17717: LD_VAR 0 1
17721: PPUSH
17722: LD_INT 21
17724: PUSH
17725: LD_INT 23
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: PUSH
17732: LD_INT 1
17734: PPUSH
17735: LD_INT 2
17737: PPUSH
17738: CALL_OW 12
17742: ARRAY
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: LD_INT 1
17749: PPUSH
17750: LD_INT 44
17752: PPUSH
17753: CALL_OW 185
// end ; 3 :
17757: GO 17891
17759: LD_INT 3
17761: DOUBLE
17762: EQUAL
17763: IFTRUE 17767
17765: GO 17890
17767: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17768: LD_VAR 0 1
17772: PPUSH
17773: LD_INT 21
17775: PUSH
17776: LD_INT 23
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PPUSH
17786: LD_INT 2
17788: PPUSH
17789: CALL_OW 12
17793: ARRAY
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: LD_INT 1
17800: PPUSH
17801: LD_INT 42
17803: PPUSH
17804: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17808: LD_VAR 0 1
17812: PPUSH
17813: LD_INT 21
17815: PUSH
17816: LD_INT 23
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: PPUSH
17826: LD_INT 2
17828: PPUSH
17829: CALL_OW 12
17833: ARRAY
17834: PPUSH
17835: LD_INT 1
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: LD_INT 42
17843: PPUSH
17844: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_INT 21
17855: PUSH
17856: LD_INT 23
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 1
17865: PPUSH
17866: LD_INT 2
17868: PPUSH
17869: CALL_OW 12
17873: ARRAY
17874: PPUSH
17875: LD_INT 1
17877: PPUSH
17878: LD_INT 1
17880: PPUSH
17881: LD_INT 44
17883: PPUSH
17884: CALL_OW 185
// end ; end ;
17888: GO 17891
17890: POP
// end ;
17891: LD_VAR 0 2
17895: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
// vehicles = [ ] ;
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: EMPTY
17911: ST_TO_ADDR
// cargoRefuel = [ ] ;
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: EMPTY
17918: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17919: LD_ADDR_VAR 0 4
17923: PUSH
17924: LD_EXP 76
17928: PUSH
17929: FOR_IN
17930: IFFALSE 17979
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17932: LD_ADDR_VAR 0 3
17936: PUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_VAR 0 4
17949: PUSH
17950: LD_VAR 0 4
17954: PPUSH
17955: CALL_OW 313
17959: PUSH
17960: LD_INT 1
17962: ARRAY
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 2
17976: ST_TO_ADDR
17977: GO 17929
17979: POP
17980: POP
// repeat for i := 1 to vehicles do
17981: LD_ADDR_VAR 0 2
17985: PUSH
17986: DOUBLE
17987: LD_INT 1
17989: DEC
17990: ST_TO_ADDR
17991: LD_VAR 0 3
17995: PUSH
17996: FOR_TO
17997: IFFALSE 18035
// if vehicles [ i ] [ 3 ] = 1 then
17999: LD_VAR 0 3
18003: PUSH
18004: LD_VAR 0 2
18008: ARRAY
18009: PUSH
18010: LD_INT 3
18012: ARRAY
18013: PUSH
18014: LD_INT 1
18016: EQUAL
18017: IFFALSE 18033
// goodVehs = goodVehs + 1 ;
18019: LD_ADDR_VAR 0 5
18023: PUSH
18024: LD_VAR 0 5
18028: PUSH
18029: LD_INT 1
18031: PLUS
18032: ST_TO_ADDR
18033: GO 17996
18035: POP
18036: POP
// if goodVehs = vehicles then
18037: LD_VAR 0 5
18041: PUSH
18042: LD_VAR 0 3
18046: EQUAL
18047: IFFALSE 18270
// for i := 1 to vehicles do
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: DOUBLE
18055: LD_INT 1
18057: DEC
18058: ST_TO_ADDR
18059: LD_VAR 0 3
18063: PUSH
18064: FOR_TO
18065: IFFALSE 18268
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
18067: LD_VAR 0 3
18071: PUSH
18072: LD_VAR 0 2
18076: ARRAY
18077: PUSH
18078: LD_INT 1
18080: ARRAY
18081: PPUSH
18082: CALL_OW 314
18086: NOT
18087: IFFALSE 18266
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
18089: LD_VAR 0 3
18093: PUSH
18094: LD_VAR 0 2
18098: ARRAY
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: CALL_OW 261
18108: PUSH
18109: LD_INT 50
18111: LESS
18112: IFFALSE 18241
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
18114: LD_ADDR_VAR 0 6
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 6
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 21
18131: PUSH
18132: LD_INT 2
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 34
18141: PUSH
18142: LD_INT 51
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 50
18151: PUSH
18152: EMPTY
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: PUSH
18166: FOR_IN
18167: IFFALSE 18205
// if GetCargo ( cargo , mat_oil ) > 0 then
18169: LD_VAR 0 6
18173: PPUSH
18174: LD_INT 2
18176: PPUSH
18177: CALL_OW 289
18181: PUSH
18182: LD_INT 0
18184: GREATER
18185: IFFALSE 18203
// cargoRefuel = cargoRefuel ^ cargo ;
18187: LD_ADDR_VAR 0 7
18191: PUSH
18192: LD_VAR 0 7
18196: PUSH
18197: LD_VAR 0 6
18201: ADD
18202: ST_TO_ADDR
18203: GO 18166
18205: POP
18206: POP
// if cargo then
18207: LD_VAR 0 6
18211: IFFALSE 18241
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18213: LD_VAR 0 3
18217: PUSH
18218: LD_VAR 0 2
18222: ARRAY
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: LD_VAR 0 6
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PPUSH
18237: CALL 8356 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18241: LD_VAR 0 3
18245: PUSH
18246: LD_VAR 0 2
18250: ARRAY
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: PPUSH
18256: LD_INT 26
18258: PPUSH
18259: LD_INT 35
18261: PPUSH
18262: CALL_OW 174
// end ; end ;
18266: GO 18064
18268: POP
18269: POP
// if IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) and not IsInUnit ( vehicles [ i ] [ 2 ] ) then
18270: LD_VAR 0 3
18274: PUSH
18275: LD_VAR 0 2
18279: ARRAY
18280: PUSH
18281: LD_INT 1
18283: ARRAY
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL 10108 0 2
18292: PUSH
18293: LD_VAR 0 3
18297: PUSH
18298: LD_VAR 0 2
18302: ARRAY
18303: PUSH
18304: LD_INT 2
18306: ARRAY
18307: PPUSH
18308: CALL_OW 310
18312: NOT
18313: AND
18314: IFFALSE 18350
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18316: LD_VAR 0 3
18320: PUSH
18321: LD_VAR 0 2
18325: ARRAY
18326: PUSH
18327: LD_INT 2
18329: ARRAY
18330: PPUSH
18331: LD_VAR 0 3
18335: PUSH
18336: LD_VAR 0 2
18340: ARRAY
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PPUSH
18346: CALL_OW 120
// goodVehs = 0 ;
18350: LD_ADDR_VAR 0 5
18354: PUSH
18355: LD_INT 0
18357: ST_TO_ADDR
// for i := 1 to vehicles do
18358: LD_ADDR_VAR 0 2
18362: PUSH
18363: DOUBLE
18364: LD_INT 1
18366: DEC
18367: ST_TO_ADDR
18368: LD_VAR 0 3
18372: PUSH
18373: FOR_TO
18374: IFFALSE 18900
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18376: LD_VAR 0 3
18380: PUSH
18381: LD_VAR 0 2
18385: ARRAY
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PPUSH
18391: CALL_OW 256
18395: PUSH
18396: LD_INT 500
18398: LESS
18399: PUSH
18400: LD_VAR 0 3
18404: PUSH
18405: LD_VAR 0 2
18409: ARRAY
18410: PUSH
18411: LD_INT 1
18413: ARRAY
18414: PPUSH
18415: LD_INT 78
18417: PPUSH
18418: LD_INT 39
18420: PPUSH
18421: CALL_OW 297
18425: PUSH
18426: LD_INT 9
18428: LESS
18429: NOT
18430: AND
18431: IFFALSE 18496
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18433: LD_ADDR_VAR 0 3
18437: PUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: LD_VAR 0 2
18447: PUSH
18448: LD_VAR 0 3
18452: PUSH
18453: LD_VAR 0 2
18457: ARRAY
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: LD_INT 2
18465: PPUSH
18466: CALL 36532 0 3
18470: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18471: LD_VAR 0 3
18475: PUSH
18476: LD_VAR 0 2
18480: ARRAY
18481: PUSH
18482: LD_INT 1
18484: ARRAY
18485: PPUSH
18486: LD_INT 78
18488: PPUSH
18489: LD_INT 39
18491: PPUSH
18492: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 and not IsEnemyNear ( vehicles [ i ] [ 1 ] , 1 ) then
18496: LD_VAR 0 3
18500: PUSH
18501: LD_VAR 0 2
18505: ARRAY
18506: PUSH
18507: LD_INT 1
18509: ARRAY
18510: PPUSH
18511: CALL_OW 256
18515: PUSH
18516: LD_INT 500
18518: LESS
18519: PUSH
18520: LD_VAR 0 3
18524: PUSH
18525: LD_VAR 0 2
18529: ARRAY
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: LD_INT 78
18537: PPUSH
18538: LD_INT 39
18540: PPUSH
18541: CALL_OW 297
18545: PUSH
18546: LD_INT 9
18548: LESS
18549: AND
18550: PUSH
18551: LD_VAR 0 3
18555: PUSH
18556: LD_VAR 0 2
18560: ARRAY
18561: PUSH
18562: LD_INT 1
18564: ARRAY
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: CALL 10108 0 2
18573: NOT
18574: AND
18575: IFFALSE 18630
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18577: LD_VAR 0 3
18581: PUSH
18582: LD_VAR 0 2
18586: ARRAY
18587: PUSH
18588: LD_INT 2
18590: ARRAY
18591: PPUSH
18592: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18596: LD_VAR 0 3
18600: PUSH
18601: LD_VAR 0 2
18605: ARRAY
18606: PUSH
18607: LD_INT 2
18609: ARRAY
18610: PPUSH
18611: LD_VAR 0 3
18615: PUSH
18616: LD_VAR 0 2
18620: ARRAY
18621: PUSH
18622: LD_INT 1
18624: ARRAY
18625: PPUSH
18626: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18630: LD_VAR 0 3
18634: PUSH
18635: LD_VAR 0 2
18639: ARRAY
18640: PUSH
18641: LD_INT 1
18643: ARRAY
18644: PPUSH
18645: CALL_OW 256
18649: PUSH
18650: LD_INT 1000
18652: EQUAL
18653: PUSH
18654: LD_VAR 0 3
18658: PUSH
18659: LD_VAR 0 2
18663: ARRAY
18664: PUSH
18665: LD_INT 3
18667: ARRAY
18668: PUSH
18669: LD_INT 2
18671: EQUAL
18672: AND
18673: IFFALSE 18747
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18675: LD_ADDR_VAR 0 3
18679: PUSH
18680: LD_VAR 0 3
18684: PPUSH
18685: LD_VAR 0 2
18689: PUSH
18690: LD_VAR 0 3
18694: PUSH
18695: LD_VAR 0 2
18699: ARRAY
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL 36532 0 3
18712: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18713: LD_VAR 0 3
18717: PUSH
18718: LD_VAR 0 2
18722: ARRAY
18723: PUSH
18724: LD_INT 2
18726: ARRAY
18727: PPUSH
18728: LD_VAR 0 3
18732: PUSH
18733: LD_VAR 0 2
18737: ARRAY
18738: PUSH
18739: LD_INT 1
18741: ARRAY
18742: PPUSH
18743: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18747: LD_VAR 0 3
18751: PUSH
18752: LD_VAR 0 2
18756: ARRAY
18757: PUSH
18758: LD_INT 1
18760: ARRAY
18761: PPUSH
18762: CALL_OW 256
18766: PUSH
18767: LD_INT 250
18769: LESS
18770: IFFALSE 18797
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18772: LD_ADDR_VAR 0 3
18776: PUSH
18777: LD_VAR 0 3
18781: PUSH
18782: LD_VAR 0 3
18786: PUSH
18787: LD_VAR 0 2
18791: ARRAY
18792: PUSH
18793: EMPTY
18794: LIST
18795: DIFF
18796: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18797: LD_VAR 0 3
18801: PUSH
18802: LD_VAR 0 2
18806: ARRAY
18807: PUSH
18808: LD_INT 2
18810: ARRAY
18811: PPUSH
18812: CALL_OW 256
18816: PUSH
18817: LD_INT 250
18819: LESS
18820: PUSH
18821: LD_VAR 0 3
18825: PUSH
18826: LD_VAR 0 2
18830: ARRAY
18831: PUSH
18832: LD_INT 1
18834: ARRAY
18835: PPUSH
18836: CALL_OW 256
18840: PUSH
18841: LD_INT 250
18843: GREATER
18844: AND
18845: IFFALSE 18898
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18847: LD_ADDR_EXP 30
18851: PUSH
18852: LD_EXP 30
18856: PUSH
18857: LD_VAR 0 3
18861: PUSH
18862: LD_VAR 0 2
18866: ARRAY
18867: PUSH
18868: LD_INT 1
18870: ARRAY
18871: ADD
18872: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18873: LD_ADDR_VAR 0 3
18877: PUSH
18878: LD_VAR 0 3
18882: PUSH
18883: LD_VAR 0 3
18887: PUSH
18888: LD_VAR 0 2
18892: ARRAY
18893: PUSH
18894: EMPTY
18895: LIST
18896: DIFF
18897: ST_TO_ADDR
// end ; end ;
18898: GO 18373
18900: POP
18901: POP
// wait ( 0 0$1 ) ;
18902: LD_INT 35
18904: PPUSH
18905: CALL_OW 67
// until omicronSurrender ;
18909: LD_EXP 23
18913: IFFALSE 17981
// end ;
18915: LD_VAR 0 1
18919: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18920: LD_INT 0
18922: PPUSH
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
// inBase = false ;
18936: LD_ADDR_VAR 0 15
18940: PUSH
18941: LD_INT 0
18943: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18944: LD_ADDR_VAR 0 8
18948: PUSH
18949: LD_VAR 0 2
18953: PPUSH
18954: LD_INT 22
18956: PUSH
18957: LD_INT 3
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: EMPTY
18965: LIST
18966: PPUSH
18967: CALL_OW 70
18971: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18972: LD_ADDR_VAR 0 9
18976: PUSH
18977: LD_VAR 0 2
18981: PPUSH
18982: CALL_OW 435
18986: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18987: LD_ADDR_VAR 0 12
18991: PUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 50
18999: PUSH
19000: EMPTY
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 25
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 25
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 21
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PPUSH
19046: CALL_OW 72
19050: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
19051: LD_ADDR_VAR 0 13
19055: PUSH
19056: LD_VAR 0 1
19060: PPUSH
19061: LD_INT 50
19063: PUSH
19064: EMPTY
19065: LIST
19066: PUSH
19067: LD_INT 25
19069: PUSH
19070: LD_INT 4
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 72
19085: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
19086: LD_ADDR_VAR 0 14
19090: PUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: LD_INT 3
19098: PUSH
19099: LD_INT 24
19101: PUSH
19102: LD_INT 1000
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 72
19117: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
19118: LD_ADDR_VAR 0 6
19122: PUSH
19123: LD_INT 22
19125: PUSH
19126: LD_INT 3
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
19141: LD_ADDR_VAR 0 5
19145: PUSH
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_INT 50
19153: PUSH
19154: EMPTY
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: PPUSH
19160: CALL_OW 72
19164: PUSH
19165: FOR_IN
19166: IFFALSE 19913
// begin if attackUnits and medics then
19168: LD_VAR 0 12
19172: PUSH
19173: LD_VAR 0 13
19177: AND
19178: IFFALSE 19245
// begin if damageUnits then
19180: LD_VAR 0 14
19184: IFFALSE 19206
// ComHeal ( medics , damageUnits [ 1 ] ) else
19186: LD_VAR 0 13
19190: PPUSH
19191: LD_VAR 0 14
19195: PUSH
19196: LD_INT 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 128
19204: GO 19243
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
19206: LD_VAR 0 13
19210: PPUSH
19211: LD_VAR 0 12
19215: PUSH
19216: LD_INT 1
19218: ARRAY
19219: PPUSH
19220: CALL_OW 250
19224: PPUSH
19225: LD_VAR 0 12
19229: PUSH
19230: LD_INT 1
19232: ARRAY
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 111
// end else
19243: GO 19274
// begin if not attackUnits and medics then
19245: LD_VAR 0 12
19249: NOT
19250: PUSH
19251: LD_VAR 0 13
19255: AND
19256: IFFALSE 19274
// attackUnits = attackUnits ^ medics ;
19258: LD_ADDR_VAR 0 12
19262: PUSH
19263: LD_VAR 0 12
19267: PUSH
19268: LD_VAR 0 13
19272: ADD
19273: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19274: LD_ADDR_VAR 0 4
19278: PUSH
19279: DOUBLE
19280: LD_INT 1
19282: DEC
19283: ST_TO_ADDR
19284: LD_VAR 0 9
19288: PUSH
19289: LD_INT 2
19291: DIVREAL
19292: PUSH
19293: FOR_TO
19294: IFFALSE 19333
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19296: LD_VAR 0 12
19300: PPUSH
19301: LD_VAR 0 9
19305: PUSH
19306: LD_VAR 0 4
19310: ARRAY
19311: PPUSH
19312: LD_VAR 0 9
19316: PUSH
19317: LD_VAR 0 4
19321: PUSH
19322: LD_INT 1
19324: PLUS
19325: ARRAY
19326: PPUSH
19327: CALL_OW 176
19331: GO 19293
19333: POP
19334: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19335: LD_VAR 0 12
19339: PPUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: LD_INT 60
19355: PUSH
19356: EMPTY
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PPUSH
19367: CALL_OW 72
19371: PPUSH
19372: LD_INT 27
19374: PPUSH
19375: LD_INT 34
19377: PPUSH
19378: CALL_OW 111
// wait ( 0 0$01 ) ;
19382: LD_INT 35
19384: PPUSH
19385: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19389: LD_VAR 0 8
19393: PUSH
19394: LD_VAR 0 12
19398: PPUSH
19399: LD_INT 21
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: LD_INT 60
19414: PUSH
19415: EMPTY
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PPUSH
19426: CALL_OW 72
19430: AND
19431: IFFALSE 19614
// begin for playerUnit in playerUnits do
19433: LD_ADDR_VAR 0 7
19437: PUSH
19438: LD_VAR 0 6
19442: PUSH
19443: FOR_IN
19444: IFFALSE 19610
// begin if Attacks ( playerUnit ) then
19446: LD_VAR 0 7
19450: PPUSH
19451: CALL_OW 320
19455: IFFALSE 19542
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19457: LD_VAR 0 7
19461: PPUSH
19462: CALL_OW 320
19466: PUSH
19467: LD_VAR 0 1
19471: IN
19472: PUSH
19473: LD_VAR 0 7
19477: PPUSH
19478: LD_VAR 0 5
19482: PPUSH
19483: CALL_OW 296
19487: PUSH
19488: LD_INT 13
19490: LESS
19491: AND
19492: IFFALSE 19540
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19494: LD_VAR 0 12
19498: PPUSH
19499: LD_INT 21
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 3
19511: PUSH
19512: LD_INT 60
19514: PUSH
19515: EMPTY
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 72
19530: PPUSH
19531: LD_VAR 0 7
19535: PPUSH
19536: CALL_OW 115
19540: GO 19608
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19542: LD_ADDR_VAR 0 10
19546: PUSH
19547: LD_VAR 0 8
19551: PPUSH
19552: LD_VAR 0 5
19556: PPUSH
19557: CALL_OW 74
19561: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19562: LD_VAR 0 12
19566: PPUSH
19567: LD_INT 21
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 3
19579: PUSH
19580: LD_INT 60
19582: PUSH
19583: EMPTY
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 72
19598: PPUSH
19599: LD_VAR 0 10
19603: PPUSH
19604: CALL_OW 115
// end ; end ;
19608: GO 19443
19610: POP
19611: POP
// end else
19612: GO 19661
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19614: LD_VAR 0 12
19618: PPUSH
19619: LD_INT 21
19621: PUSH
19622: LD_INT 1
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 3
19631: PUSH
19632: LD_INT 60
19634: PUSH
19635: EMPTY
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 72
19650: PPUSH
19651: LD_INT 27
19653: PPUSH
19654: LD_INT 34
19656: PPUSH
19657: CALL_OW 111
// if enemyUnitsOnRoad then
19661: LD_VAR 0 8
19665: IFFALSE 19849
// begin for playerUnit in playerUnits do
19667: LD_ADDR_VAR 0 7
19671: PUSH
19672: LD_VAR 0 6
19676: PUSH
19677: FOR_IN
19678: IFFALSE 19845
// begin if Attacks ( playerUnit ) then
19680: LD_VAR 0 7
19684: PPUSH
19685: CALL_OW 320
19689: IFFALSE 19762
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19691: LD_VAR 0 7
19695: PPUSH
19696: CALL_OW 320
19700: PUSH
19701: LD_VAR 0 1
19705: IN
19706: PUSH
19707: LD_VAR 0 7
19711: PPUSH
19712: LD_VAR 0 5
19716: PPUSH
19717: CALL_OW 296
19721: PUSH
19722: LD_INT 13
19724: LESS
19725: AND
19726: IFFALSE 19760
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19728: LD_VAR 0 12
19732: PPUSH
19733: LD_INT 21
19735: PUSH
19736: LD_INT 2
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: PPUSH
19746: CALL_OW 72
19750: PPUSH
19751: LD_VAR 0 7
19755: PPUSH
19756: CALL_OW 115
19760: GO 19843
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19762: LD_ADDR_VAR 0 10
19766: PUSH
19767: LD_VAR 0 8
19771: PPUSH
19772: LD_VAR 0 12
19776: PPUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 50
19789: PUSH
19790: EMPTY
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PPUSH
19797: CALL_OW 72
19801: PUSH
19802: LD_INT 1
19804: ARRAY
19805: PPUSH
19806: CALL_OW 74
19810: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19811: LD_VAR 0 12
19815: PPUSH
19816: LD_INT 21
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: EMPTY
19827: LIST
19828: PPUSH
19829: CALL_OW 72
19833: PPUSH
19834: LD_VAR 0 10
19838: PPUSH
19839: CALL_OW 115
// end ; end ;
19843: GO 19677
19845: POP
19846: POP
// end else
19847: GO 19882
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19849: LD_VAR 0 12
19853: PPUSH
19854: LD_INT 21
19856: PUSH
19857: LD_INT 2
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: PUSH
19864: EMPTY
19865: LIST
19866: PPUSH
19867: CALL_OW 72
19871: PPUSH
19872: LD_INT 27
19874: PPUSH
19875: LD_INT 34
19877: PPUSH
19878: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19882: LD_VAR 0 5
19886: PPUSH
19887: LD_INT 27
19889: PPUSH
19890: LD_INT 34
19892: PPUSH
19893: CALL_OW 297
19897: PUSH
19898: LD_INT 5
19900: LESS
19901: IFFALSE 19911
// inBase = true ;
19903: LD_ADDR_VAR 0 15
19907: PUSH
19908: LD_INT 1
19910: ST_TO_ADDR
// end ;
19911: GO 19165
19913: POP
19914: POP
// wait ( 0 0$1 ) ;
19915: LD_INT 35
19917: PPUSH
19918: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19922: LD_VAR 0 1
19926: PPUSH
19927: LD_INT 50
19929: PUSH
19930: EMPTY
19931: LIST
19932: PPUSH
19933: CALL_OW 72
19937: PUSH
19938: LD_INT 0
19940: EQUAL
19941: PUSH
19942: LD_VAR 0 15
19946: OR
19947: IFFALSE 18944
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
19949: LD_VAR 0 1
19953: PPUSH
19954: LD_INT 21
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 50
19966: PUSH
19967: EMPTY
19968: LIST
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 72
19978: PPUSH
19979: LD_INT 27
19981: PPUSH
19982: LD_INT 34
19984: PPUSH
19985: CALL_OW 111
// for i := 1 to units do
19989: LD_ADDR_VAR 0 4
19993: PUSH
19994: DOUBLE
19995: LD_INT 1
19997: DEC
19998: ST_TO_ADDR
19999: LD_VAR 0 1
20003: PUSH
20004: FOR_TO
20005: IFFALSE 20040
// if IsOk ( units [ i ] ) then
20007: LD_VAR 0 1
20011: PUSH
20012: LD_VAR 0 4
20016: ARRAY
20017: PPUSH
20018: CALL_OW 302
20022: IFFALSE 20038
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
20024: LD_ADDR_EXP 12
20028: PUSH
20029: LD_EXP 12
20033: PUSH
20034: LD_INT 1
20036: PLUS
20037: ST_TO_ADDR
20038: GO 20004
20040: POP
20041: POP
// amSupportTroops = amSupportTroops diff units ;
20042: LD_ADDR_EXP 84
20046: PUSH
20047: LD_EXP 84
20051: PUSH
20052: LD_VAR 0 1
20056: DIFF
20057: ST_TO_ADDR
// newBase = amBase ;
20058: LD_ADDR_VAR 0 16
20062: PUSH
20063: LD_EXP 86
20067: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
20068: LD_ADDR_VAR 0 16
20072: PUSH
20073: LD_VAR 0 16
20077: PUSH
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 50
20085: PUSH
20086: EMPTY
20087: LIST
20088: PPUSH
20089: CALL_OW 72
20093: ADD
20094: ST_TO_ADDR
// amBase = newBase ;
20095: LD_ADDR_EXP 86
20099: PUSH
20100: LD_VAR 0 16
20104: ST_TO_ADDR
// end ; end_of_file
20105: LD_VAR 0 3
20109: RET
// export function Lose_Burlak ; begin
20110: LD_INT 0
20112: PPUSH
// YouLost ( Burlak ) ;
20113: LD_STRING Burlak
20115: PPUSH
20116: CALL_OW 104
// end ;
20120: LD_VAR 0 1
20124: RET
// export function Lose_Omicron ; begin
20125: LD_INT 0
20127: PPUSH
// YouLost ( Omicron ) ;
20128: LD_STRING Omicron
20130: PPUSH
20131: CALL_OW 104
// end ;
20135: LD_VAR 0 1
20139: RET
// export function Lose_Vehicles ; begin
20140: LD_INT 0
20142: PPUSH
// YouLost ( Vehicles ) ;
20143: LD_STRING Vehicles
20145: PPUSH
20146: CALL_OW 104
// end ;
20150: LD_VAR 0 1
20154: RET
// export function Lose_SelfAttack ; begin
20155: LD_INT 0
20157: PPUSH
// YouLost ( SelfAttack ) ;
20158: LD_STRING SelfAttack
20160: PPUSH
20161: CALL_OW 104
// end ;
20165: LD_VAR 0 1
20169: RET
// export function Lose_Delay ; begin
20170: LD_INT 0
20172: PPUSH
// YouLost ( Delay ) ;
20173: LD_STRING Delay
20175: PPUSH
20176: CALL_OW 104
// end ; end_of_file
20180: LD_VAR 0 1
20184: RET
// export function FinishMission ; begin
20185: LD_INT 0
20187: PPUSH
// SetRewards ;
20188: CALL 20209 0 0
// SavePlayerCharacters ;
20192: CALL 20423 0 0
// SaveGlobalVariables ;
20196: CALL 20752 0 0
// YouWin ;
20200: CALL_OW 103
// end ;
20204: LD_VAR 0 1
20208: RET
// function SetRewards ; var unitsToReward ; begin
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
// if produceMoreVehicles then
20213: LD_EXP 16
20217: IFFALSE 20231
// AddMedal ( Surplus , 1 ) else
20219: LD_STRING Surplus
20221: PPUSH
20222: LD_INT 1
20224: PPUSH
20225: CALL_OW 101
20229: GO 20261
// if produceOnlyForYou then
20231: LD_EXP 17
20235: IFFALSE 20250
// AddMedal ( Surplus , - 1 ) else
20237: LD_STRING Surplus
20239: PPUSH
20240: LD_INT 1
20242: NEG
20243: PPUSH
20244: CALL_OW 101
20248: GO 20261
// AddMedal ( Surplus , - 2 ) ;
20250: LD_STRING Surplus
20252: PPUSH
20253: LD_INT 2
20255: NEG
20256: PPUSH
20257: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
20261: LD_EXP 12
20265: PUSH
20266: LD_EXP 46
20270: LESS
20271: IFFALSE 20285
// AddMedal ( PreventReinforcements , 1 ) else
20273: LD_STRING PreventReinforcements
20275: PPUSH
20276: LD_INT 1
20278: PPUSH
20279: CALL_OW 101
20283: GO 20296
// AddMedal ( PreventReinforcements , - 1 ) ;
20285: LD_STRING PreventReinforcements
20287: PPUSH
20288: LD_INT 1
20290: NEG
20291: PPUSH
20292: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20296: LD_EXP 7
20300: PUSH
20301: LD_EXP 55
20305: PPUSH
20306: CALL_OW 302
20310: AND
20311: IFFALSE 20325
// AddMedal ( Scholtze , 1 ) else
20313: LD_STRING Scholtze
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: CALL_OW 101
20323: GO 20336
// AddMedal ( Scholtze , - 1 ) ;
20325: LD_STRING Scholtze
20327: PPUSH
20328: LD_INT 1
20330: NEG
20331: PPUSH
20332: CALL_OW 101
// GiveMedals ( Main ) ;
20336: LD_STRING Main
20338: PPUSH
20339: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: LD_INT 22
20350: PUSH
20351: LD_INT 3
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PPUSH
20372: CALL_OW 69
20376: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20377: LD_ADDR_VAR 0 2
20381: PUSH
20382: LD_VAR 0 2
20386: PUSH
20387: LD_EXP 79
20391: ADD
20392: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20393: LD_ADDR_VAR 0 2
20397: PUSH
20398: LD_VAR 0 2
20402: PUSH
20403: LD_EXP 62
20407: DIFF
20408: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20409: LD_VAR 0 2
20413: PPUSH
20414: CALL_OW 43
// end ;
20418: LD_VAR 0 1
20422: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20423: LD_INT 0
20425: PPUSH
20426: PPUSH
20427: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20428: LD_EXP 49
20432: PPUSH
20433: LD_STRING Burlak
20435: PPUSH
20436: LD_INT 3
20438: PPUSH
20439: CALL 7240 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20443: LD_EXP 50
20447: PPUSH
20448: LD_STRING Gnyevko
20450: PPUSH
20451: LD_INT 3
20453: PPUSH
20454: CALL 7240 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20458: LD_EXP 52
20462: PPUSH
20463: LD_STRING Kovalyuk
20465: PPUSH
20466: LD_INT 3
20468: PPUSH
20469: CALL 7240 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20473: LD_EXP 51
20477: PPUSH
20478: LD_STRING Kirilenkova
20480: PPUSH
20481: LD_INT 3
20483: PPUSH
20484: CALL 7240 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20488: LD_EXP 55
20492: PPUSH
20493: LD_STRING Scholtze
20495: PPUSH
20496: LD_INT 3
20498: PPUSH
20499: CALL 7240 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20503: LD_EXP 53
20507: PPUSH
20508: LD_STRING Belkov
20510: PPUSH
20511: LD_INT 3
20513: PPUSH
20514: CALL 7240 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20518: LD_EXP 54
20522: PPUSH
20523: LD_STRING Belkov2
20525: PPUSH
20526: LD_INT 3
20528: PPUSH
20529: CALL 7240 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20533: LD_EXP 53
20537: PPUSH
20538: LD_STRING Belkov
20540: PPUSH
20541: LD_INT 6
20543: PPUSH
20544: CALL 7240 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20548: LD_EXP 54
20552: PPUSH
20553: LD_STRING Belkov2
20555: PPUSH
20556: LD_INT 6
20558: PPUSH
20559: CALL 7240 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20563: LD_ADDR_VAR 0 2
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 21
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 50
20590: PUSH
20591: EMPTY
20592: LIST
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: PPUSH
20599: CALL_OW 69
20603: PUSH
20604: LD_EXP 49
20608: PUSH
20609: LD_EXP 50
20613: PUSH
20614: LD_EXP 53
20618: PUSH
20619: LD_EXP 54
20623: PUSH
20624: LD_EXP 52
20628: PUSH
20629: LD_EXP 51
20633: PUSH
20634: LD_EXP 55
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: DIFF
20648: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20649: LD_VAR 0 2
20653: PPUSH
20654: LD_STRING other_survivors
20656: PPUSH
20657: LD_INT 3
20659: PPUSH
20660: CALL 7296 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 22
20671: PUSH
20672: LD_INT 6
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 21
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 50
20691: PUSH
20692: EMPTY
20693: LIST
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: LIST
20699: PPUSH
20700: CALL_OW 69
20704: PUSH
20705: LD_EXP 61
20709: PUSH
20710: LD_EXP 62
20714: PUSH
20715: LD_EXP 53
20719: PUSH
20720: LD_EXP 54
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: DIFF
20731: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20732: LD_VAR 0 3
20736: PPUSH
20737: LD_STRING other_kirov
20739: PPUSH
20740: LD_INT 6
20742: PPUSH
20743: CALL 7296 0 3
// end ;
20747: LD_VAR 0 1
20751: RET
// function SaveGlobalVariables ; begin
20752: LD_INT 0
20754: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20755: LD_EXP 26
20759: PPUSH
20760: LD_STRING 03_KurinOpinion_1
20762: PPUSH
20763: CALL_OW 39
// end ; end_of_file
20767: LD_VAR 0 1
20771: RET
// export function CustomEvent ( event ) ; begin
20772: LD_INT 0
20774: PPUSH
// end ;
20775: LD_VAR 0 2
20779: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20780: LD_INT 0
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20789: LD_ADDR_VAR 0 2
20793: PUSH
20794: LD_INT 22
20796: PUSH
20797: LD_INT 3
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PUSH
20804: LD_INT 21
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PPUSH
20818: CALL_OW 69
20822: PUSH
20823: FOR_IN
20824: IFFALSE 21021
// if GetTaskList ( i ) > 0 then
20826: LD_VAR 0 2
20830: PPUSH
20831: CALL_OW 437
20835: PUSH
20836: LD_INT 0
20838: GREATER
20839: IFFALSE 21019
// for j = 1 to GetTaskList ( i ) do
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: DOUBLE
20847: LD_INT 1
20849: DEC
20850: ST_TO_ADDR
20851: LD_VAR 0 2
20855: PPUSH
20856: CALL_OW 437
20860: PUSH
20861: FOR_TO
20862: IFFALSE 21017
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20864: LD_ADDR_VAR 0 4
20868: PUSH
20869: LD_VAR 0 2
20873: PPUSH
20874: CALL_OW 437
20878: PUSH
20879: LD_VAR 0 3
20883: ARRAY
20884: PUSH
20885: LD_INT 4
20887: ARRAY
20888: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20889: LD_ADDR_VAR 0 8
20893: PUSH
20894: LD_VAR 0 2
20898: PPUSH
20899: CALL_OW 437
20903: PUSH
20904: LD_VAR 0 3
20908: ARRAY
20909: PUSH
20910: LD_INT 5
20912: ARRAY
20913: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20914: LD_ADDR_VAR 0 6
20918: PUSH
20919: LD_VAR 0 2
20923: PPUSH
20924: CALL_OW 437
20928: PUSH
20929: LD_VAR 0 3
20933: ARRAY
20934: PUSH
20935: LD_INT 2
20937: ARRAY
20938: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20939: LD_ADDR_VAR 0 7
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 437
20953: PUSH
20954: LD_VAR 0 3
20958: ARRAY
20959: PUSH
20960: LD_INT 3
20962: ARRAY
20963: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20964: LD_VAR 0 4
20968: PPUSH
20969: CALL_OW 255
20973: PUSH
20974: LD_INT 6
20976: EQUAL
20977: PUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 437
20987: PUSH
20988: LD_VAR 0 3
20992: ARRAY
20993: PUSH
20994: LD_INT 1
20996: ARRAY
20997: PUSH
20998: LD_STRING <
21000: EQUAL
21001: AND
21002: IFFALSE 21015
// SetTaskList ( i , [ ] ) ;
21004: LD_VAR 0 2
21008: PPUSH
21009: EMPTY
21010: PPUSH
21011: CALL_OW 446
// end ;
21015: GO 20861
21017: POP
21018: POP
21019: GO 20823
21021: POP
21022: POP
// end ;
21023: PPOPN 8
21025: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
21026: LD_VAR 0 2
21030: PUSH
21031: LD_INT 6
21033: EQUAL
21034: IFFALSE 21048
// SetSide ( building , 6 ) ;
21036: LD_VAR 0 1
21040: PPUSH
21041: LD_INT 6
21043: PPUSH
21044: CALL_OW 235
// end ;
21048: PPOPN 3
21050: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
21051: LD_INT 0
21053: PPUSH
21054: PPUSH
// begin diffUnits = [ ] ;
21055: LD_ADDR_VAR 0 2
21059: PUSH
21060: EMPTY
21061: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
21062: LD_VAR 0 1
21066: PPUSH
21067: CALL_OW 255
21071: PUSH
21072: LD_INT 3
21074: EQUAL
21075: PUSH
21076: LD_VAR 0 1
21080: PPUSH
21081: CALL_OW 266
21085: PUSH
21086: LD_INT 0
21088: EQUAL
21089: AND
21090: PUSH
21091: LD_VAR 0 1
21095: PPUSH
21096: LD_INT 21
21098: PPUSH
21099: CALL_OW 308
21103: AND
21104: IFFALSE 21118
// SetBName ( building , kagan ) ;
21106: LD_VAR 0 1
21110: PPUSH
21111: LD_STRING kagan
21113: PPUSH
21114: CALL_OW 500
// if GetSide ( building ) = 6 then
21118: LD_VAR 0 1
21122: PPUSH
21123: CALL_OW 255
21127: PUSH
21128: LD_INT 6
21130: EQUAL
21131: IFFALSE 21312
// begin if GetBType ( building ) = b_ext_noncombat then
21133: LD_VAR 0 1
21137: PPUSH
21138: CALL_OW 266
21142: PUSH
21143: LD_INT 19
21145: EQUAL
21146: IFFALSE 21152
// begin SpawnKirovSupport ;
21148: CALL 4587 0 0
// end ; if GetBType ( building ) = b_depot then
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 266
21161: PUSH
21162: LD_INT 0
21164: EQUAL
21165: IFFALSE 21211
// begin kirovOilDepot = building ;
21167: LD_ADDR_EXP 68
21171: PUSH
21172: LD_VAR 0 1
21176: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
21177: LD_EXP 68
21181: PPUSH
21182: CALL_OW 274
21186: PPUSH
21187: LD_INT 2
21189: PPUSH
21190: LD_INT 3000
21192: PPUSH
21193: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
21197: LD_EXP 82
21201: PPUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 266
21220: PUSH
21221: LD_INT 31
21223: EQUAL
21224: PUSH
21225: LD_VAR 0 1
21229: PPUSH
21230: CALL_OW 266
21234: PUSH
21235: LD_INT 4
21237: EQUAL
21238: OR
21239: PUSH
21240: LD_VAR 0 1
21244: PPUSH
21245: LD_INT 20
21247: PPUSH
21248: CALL_OW 308
21252: AND
21253: IFFALSE 21312
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
21255: LD_EXP 78
21259: PPUSH
21260: LD_INT 25
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 56
21272: PUSH
21273: EMPTY
21274: LIST
21275: PUSH
21276: LD_INT 3
21278: PUSH
21279: LD_INT 60
21281: PUSH
21282: EMPTY
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 72
21298: PUSH
21299: LD_INT 1
21301: ARRAY
21302: PPUSH
21303: LD_VAR 0 1
21307: PPUSH
21308: CALL_OW 120
// end ; end ;
21312: PPOPN 3
21314: END
// on UpgradeComplete ( building ) do var i , tmp ;
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 255
21328: PUSH
21329: LD_INT 3
21331: EQUAL
21332: PUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 266
21342: PUSH
21343: LD_INT 3
21345: EQUAL
21346: AND
21347: PUSH
21348: LD_EXP 8
21352: NOT
21353: AND
21354: IFFALSE 21365
// Dial_UpgradeWorkshop ( building ) ;
21356: LD_VAR 0 1
21360: PPUSH
21361: CALL 24528 0 1
// end ;
21365: PPOPN 3
21367: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21368: LD_VAR 0 1
21372: PUSH
21373: LD_EXP 49
21377: EQUAL
21378: IFFALSE 21384
// Lose_Burlak ;
21380: CALL 20110 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21384: LD_VAR 0 1
21388: PUSH
21389: LD_EXP 60
21393: EQUAL
21394: PUSH
21395: LD_EXP 28
21399: NOT
21400: AND
21401: IFFALSE 21407
// Lose_Omicron ;
21403: CALL 20125 0 0
// end ;
21407: PPOPN 1
21409: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21410: LD_VAR 0 1
21414: PUSH
21415: LD_INT 3
21417: EQUAL
21418: PUSH
21419: LD_VAR 0 2
21423: PUSH
21424: LD_INT 6
21426: EQUAL
21427: AND
21428: IFFALSE 21434
// Lose_SelfAttack ;
21430: CALL 20155 0 0
// end ;
21434: PPOPN 2
21436: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 255
21446: PUSH
21447: LD_INT 6
21449: EQUAL
21450: IFFALSE 21615
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL_OW 264
21461: PUSH
21462: LD_INT 51
21464: EQUAL
21465: PUSH
21466: LD_EXP 74
21470: NOT
21471: AND
21472: IFFALSE 21486
// kirovTransportCargo = vehicle else
21474: LD_ADDR_EXP 74
21478: PUSH
21479: LD_VAR 0 1
21483: ST_TO_ADDR
21484: GO 21558
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 264
21495: PUSH
21496: LD_INT 51
21498: EQUAL
21499: IFFALSE 21558
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21501: LD_VAR 0 1
21505: PPUSH
21506: LD_EXP 68
21510: PPUSH
21511: LD_INT 2
21513: PPUSH
21514: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21518: LD_VAR 0 1
21522: PPUSH
21523: LD_INT 137
21525: PPUSH
21526: LD_INT 99
21528: PPUSH
21529: CALL_OW 171
// AddComHold ( vehicle ) ;
21533: LD_VAR 0 1
21537: PPUSH
21538: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21542: LD_ADDR_EXP 75
21546: PUSH
21547: LD_EXP 75
21551: PUSH
21552: LD_VAR 0 1
21556: ADD
21557: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 264
21567: PUSH
21568: LD_INT 42
21570: PUSH
21571: LD_INT 43
21573: PUSH
21574: LD_INT 44
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: LIST
21581: IN
21582: IFFALSE 21615
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21584: LD_ADDR_EXP 76
21588: PUSH
21589: LD_EXP 76
21593: PUSH
21594: LD_VAR 0 1
21598: ADD
21599: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21600: LD_VAR 0 1
21604: PPUSH
21605: LD_INT 137
21607: PPUSH
21608: LD_INT 99
21610: PPUSH
21611: CALL_OW 111
// end ; end ; end ;
21615: PPOPN 2
21617: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21618: LD_VAR 0 3
21622: PUSH
21623: LD_INT 6
21625: EQUAL
21626: PUSH
21627: LD_VAR 0 2
21631: PUSH
21632: LD_EXP 30
21636: IN
21637: NOT
21638: AND
21639: IFFALSE 21662
// begin ComExitVehicle ( capturing_unit ) ;
21641: LD_VAR 0 4
21645: PPUSH
21646: CALL_OW 121
// SetSide ( new , 6 ) ;
21650: LD_VAR 0 1
21654: PPUSH
21655: LD_INT 6
21657: PPUSH
21658: CALL_OW 235
// end ; end ;
21662: PPOPN 4
21664: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 255
21674: PUSH
21675: LD_INT 6
21677: EQUAL
21678: PUSH
21679: LD_EXP 19
21683: AND
21684: IFFALSE 21712
// begin wait ( 0 0$2 ) ;
21686: LD_INT 70
21688: PPUSH
21689: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: LD_INT 78
21700: PPUSH
21701: LD_INT 39
21703: PPUSH
21704: CALL_OW 174
// KirovAttackOmicron ;
21708: CALL 17896 0 0
// end ; end ;
21712: PPOPN 2
21714: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 255
21724: PUSH
21725: LD_INT 6
21727: EQUAL
21728: PUSH
21729: LD_VAR 0 1
21733: PUSH
21734: LD_INT 39
21736: EQUAL
21737: AND
21738: IFFALSE 21799
// begin MountWeaponTurrent ;
21740: CALL 17360 0 0
// wait ( 3 3$30 ) ;
21744: LD_INT 7350
21746: PPUSH
21747: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21751: LD_INT 22
21753: PUSH
21754: LD_INT 6
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 21
21763: PUSH
21764: LD_INT 3
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 30
21773: PUSH
21774: LD_INT 3
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: LIST
21785: PPUSH
21786: CALL_OW 69
21790: PUSH
21791: LD_INT 1
21793: ARRAY
21794: PPUSH
21795: CALL 17426 0 1
// end ; end ; end_of_file
21799: PPOPN 2
21801: END
// export function MissionIntro ; var i , unit , freeSlots , tmp ; begin
21802: LD_INT 0
21804: PPUSH
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21809: LD_EXP 49
21813: PUSH
21814: LD_EXP 61
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21827: LD_EXP 49
21831: PUSH
21832: LD_EXP 63
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PPUSH
21841: LD_EXP 61
21845: PPUSH
21846: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21850: LD_EXP 61
21854: PPUSH
21855: LD_EXP 49
21859: PPUSH
21860: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21864: LD_INT 3
21866: PPUSH
21867: LD_INT 24
21869: PPUSH
21870: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21874: LD_EXP 53
21878: PPUSH
21879: CALL_OW 305
21883: NOT
21884: PUSH
21885: LD_EXP 54
21889: PPUSH
21890: CALL_OW 305
21894: NOT
21895: AND
21896: IFFALSE 21984
// begin Say ( Kurin , D1a-Kur-1 ) ;
21898: LD_EXP 61
21902: PPUSH
21903: LD_STRING D1a-Kur-1
21905: PPUSH
21906: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21910: LD_EXP 49
21914: PPUSH
21915: LD_STRING D1a-Bur-1
21917: PPUSH
21918: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21922: LD_EXP 61
21926: PPUSH
21927: LD_STRING D1a-Kur-2
21929: PPUSH
21930: CALL_OW 88
// if platonovOpinion <= 1 then
21934: LD_EXP 27
21938: PUSH
21939: LD_INT 1
21941: LESSEQUAL
21942: IFFALSE 21958
// Say ( Kurin , D1a-Kur-2a ) else
21944: LD_EXP 61
21948: PPUSH
21949: LD_STRING D1a-Kur-2a
21951: PPUSH
21952: CALL_OW 88
21956: GO 21970
// Say ( Kurin , D1a-Kur-2b ) ;
21958: LD_EXP 61
21962: PPUSH
21963: LD_STRING D1a-Kur-2b
21965: PPUSH
21966: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21970: LD_EXP 49
21974: PPUSH
21975: LD_STRING D1a-Bur-2
21977: PPUSH
21978: CALL_OW 88
// end else
21982: GO 22020
// begin Say ( Kurin , D1b-Kur-1 ) ;
21984: LD_EXP 61
21988: PPUSH
21989: LD_STRING D1b-Kur-1
21991: PPUSH
21992: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21996: LD_EXP 63
22000: PPUSH
22001: LD_STRING D1b-Bel-1
22003: PPUSH
22004: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
22008: LD_EXP 61
22012: PPUSH
22013: LD_STRING D1b-Kur-2
22015: PPUSH
22016: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
22020: LD_EXP 61
22024: PPUSH
22025: LD_STRING D2-Kur-1
22027: PPUSH
22028: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
22032: LD_EXP 49
22036: PPUSH
22037: LD_STRING D2-Bur-1
22039: PPUSH
22040: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
22044: LD_EXP 61
22048: PPUSH
22049: LD_STRING D2-Kur-2
22051: PPUSH
22052: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
22056: LD_EXP 49
22060: PPUSH
22061: LD_STRING D2-Bur-2
22063: PPUSH
22064: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
22068: LD_EXP 61
22072: PPUSH
22073: LD_STRING D2-Kur-3
22075: PPUSH
22076: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 6
22085: PPUSH
22086: LD_INT 1
22088: PPUSH
22089: LD_INT 1
22091: PPUSH
22092: CALL_OW 80
// PrepareAmericansMissionIntro ;
22096: CALL 5648 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
22100: LD_EXP 83
22104: PPUSH
22105: LD_INT 28
22107: PPUSH
22108: LD_INT 35
22110: PPUSH
22111: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
22115: LD_INT 93
22117: PPUSH
22118: LD_INT 36
22120: PPUSH
22121: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
22125: LD_INT 93
22127: PPUSH
22128: LD_INT 36
22130: PPUSH
22131: LD_INT 3
22133: PPUSH
22134: LD_INT 9
22136: NEG
22137: PPUSH
22138: CALL_OW 330
// wait ( 0 0$6 ) ;
22142: LD_INT 210
22144: PPUSH
22145: CALL_OW 67
// CenterOnUnits ( Popov ) ;
22149: LD_EXP 62
22153: PPUSH
22154: CALL_OW 85
// wait ( 0 0$1 ) ;
22158: LD_INT 35
22160: PPUSH
22161: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
22165: LD_EXP 62
22169: PPUSH
22170: LD_STRING D2-Pop-3
22172: PPUSH
22173: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
22177: LD_EXP 49
22181: PUSH
22182: LD_EXP 61
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 87
// wait ( 0 0$1 ) ;
22195: LD_INT 35
22197: PPUSH
22198: CALL_OW 67
// for unit in amIntroUnits do
22202: LD_ADDR_VAR 0 3
22206: PUSH
22207: LD_EXP 83
22211: PUSH
22212: FOR_IN
22213: IFFALSE 22226
// RemoveUnit ( unit ) ;
22215: LD_VAR 0 3
22219: PPUSH
22220: CALL_OW 64
22224: GO 22212
22226: POP
22227: POP
// Say ( Kurin , D2-Kur-4 ) ;
22228: LD_EXP 61
22232: PPUSH
22233: LD_STRING D2-Kur-4
22235: PPUSH
22236: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
22240: LD_EXP 49
22244: PPUSH
22245: LD_STRING D2-Bur-4
22247: PPUSH
22248: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
22252: LD_EXP 61
22256: PPUSH
22257: LD_STRING D2-Kur-5
22259: PPUSH
22260: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
22264: LD_EXP 49
22268: PPUSH
22269: LD_STRING D2-Bur-5
22271: PPUSH
22272: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22276: LD_EXP 61
22280: PPUSH
22281: LD_STRING D2-Kur-6
22283: PPUSH
22284: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22288: LD_EXP 50
22292: PPUSH
22293: CALL_OW 305
22297: IFFALSE 22313
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22299: LD_ADDR_EXP 38
22303: PUSH
22304: LD_EXP 38
22308: PUSH
22309: LD_INT 1
22311: MINUS
22312: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22313: LD_EXP 52
22317: PPUSH
22318: CALL_OW 305
22322: IFFALSE 22338
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22324: LD_ADDR_EXP 38
22328: PUSH
22329: LD_EXP 38
22333: PUSH
22334: LD_INT 1
22336: MINUS
22337: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22338: LD_EXP 51
22342: PPUSH
22343: CALL_OW 305
22347: IFFALSE 22363
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22349: LD_ADDR_EXP 38
22353: PUSH
22354: LD_EXP 38
22358: PUSH
22359: LD_INT 1
22361: MINUS
22362: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22363: LD_EXP 38
22367: PPUSH
22368: CALL 7394 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22372: LD_INT 93
22374: PPUSH
22375: LD_INT 36
22377: PPUSH
22378: LD_INT 3
22380: PPUSH
22381: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22385: LD_INT 3
22387: PPUSH
22388: LD_INT 24
22390: PPUSH
22391: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22395: LD_INT 22
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 21
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PPUSH
22419: CALL_OW 69
22423: PPUSH
22424: CALL_OW 122
// wait ( 0 0$1 ) ;
22428: LD_INT 35
22430: PPUSH
22431: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
22435: LD_INT 22
22437: PUSH
22438: LD_INT 3
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 21
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 69
22463: PPUSH
22464: LD_EXP 60
22468: PPUSH
22469: CALL_OW 250
22473: PPUSH
22474: LD_EXP 60
22478: PPUSH
22479: CALL_OW 251
22483: PPUSH
22484: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
22488: LD_INT 35
22490: PPUSH
22491: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
22495: LD_EXP 49
22499: PPUSH
22500: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
22504: LD_INT 22
22506: PUSH
22507: LD_INT 3
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PPUSH
22528: CALL_OW 69
22532: PPUSH
22533: LD_EXP 60
22537: PPUSH
22538: CALL_OW 250
22542: PPUSH
22543: LD_EXP 60
22547: PPUSH
22548: CALL_OW 251
22552: PPUSH
22553: CALL_OW 111
// until GetDistUnits ( Burlak , beriaDepot ) < 6 or not HasTask ( Burlak ) ;
22557: LD_EXP 49
22561: PPUSH
22562: LD_EXP 60
22566: PPUSH
22567: CALL_OW 296
22571: PUSH
22572: LD_INT 6
22574: LESS
22575: PUSH
22576: LD_EXP 49
22580: PPUSH
22581: CALL_OW 314
22585: NOT
22586: OR
22587: IFFALSE 22488
// InGameOff ;
22589: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22593: LD_STRING M1
22595: PPUSH
22596: CALL_OW 337
// SaveForQuickRestart ;
22600: CALL_OW 22
// counterEnable = true ;
22604: LD_ADDR_EXP 89
22608: PUSH
22609: LD_INT 1
22611: ST_TO_ADDR
// counterIndex = 1 ;
22612: LD_ADDR_EXP 90
22616: PUSH
22617: LD_INT 1
22619: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22620: LD_INT 3
22622: PPUSH
22623: LD_INT 24
22625: PPUSH
22626: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22630: LD_INT 6
22632: PPUSH
22633: LD_INT 22
22635: PUSH
22636: LD_INT 6
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 30
22655: PUSH
22656: LD_INT 6
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: PPUSH
22668: CALL_OW 69
22672: PUSH
22673: LD_INT 1
22675: ARRAY
22676: PPUSH
22677: LD_INT 3
22679: PPUSH
22680: CALL 8809 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22684: LD_INT 1
22686: PPUSH
22687: LD_INT 22
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 21
22699: PUSH
22700: LD_INT 3
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 30
22709: PUSH
22710: LD_INT 7
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: PPUSH
22722: CALL_OW 69
22726: PUSH
22727: LD_INT 1
22729: ARRAY
22730: PPUSH
22731: LD_INT 1
22733: PPUSH
22734: CALL 8809 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22738: LD_INT 18
22740: PPUSH
22741: LD_INT 22
22743: PUSH
22744: LD_INT 6
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 21
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 25
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: LIST
22775: PPUSH
22776: CALL_OW 70
22780: PPUSH
22781: LD_INT 17
22783: PPUSH
22784: LD_INT 159
22786: PPUSH
22787: LD_INT 116
22789: PPUSH
22790: LD_INT 0
22792: PPUSH
22793: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22797: LD_INT 18
22799: PPUSH
22800: LD_INT 22
22802: PUSH
22803: LD_INT 6
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 21
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 25
22822: PUSH
22823: LD_INT 2
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: LIST
22834: PPUSH
22835: CALL_OW 70
22839: PPUSH
22840: LD_INT 19
22842: PPUSH
22843: LD_INT 161
22845: PPUSH
22846: LD_INT 115
22848: PPUSH
22849: LD_INT 5
22851: PPUSH
22852: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22856: LD_INT 18
22858: PPUSH
22859: LD_INT 22
22861: PUSH
22862: LD_INT 6
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 21
22871: PUSH
22872: LD_INT 1
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 25
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: PPUSH
22894: CALL_OW 70
22898: PPUSH
22899: LD_EXP 67
22903: PPUSH
22904: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22908: LD_EXP 79
22912: PPUSH
22913: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22917: LD_ADDR_VAR 0 5
22921: PUSH
22922: LD_EXP 79
22926: PUSH
22927: LD_EXP 62
22931: DIFF
22932: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22933: LD_ADDR_VAR 0 4
22937: PUSH
22938: LD_INT 6
22940: PUSH
22941: LD_EXP 69
22945: PPUSH
22946: CALL_OW 313
22950: MINUS
22951: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22952: LD_EXP 79
22956: PUSH
22957: LD_EXP 62
22961: DIFF
22962: PPUSH
22963: LD_EXP 69
22967: PPUSH
22968: CALL_OW 180
// for i = 1 to tmp do
22972: LD_ADDR_VAR 0 2
22976: PUSH
22977: DOUBLE
22978: LD_INT 1
22980: DEC
22981: ST_TO_ADDR
22982: LD_VAR 0 5
22986: PUSH
22987: FOR_TO
22988: IFFALSE 23040
// begin if freeSlots > 0 then
22990: LD_VAR 0 4
22994: PUSH
22995: LD_INT 0
22997: GREATER
22998: IFFALSE 23036
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
23000: LD_VAR 0 5
23004: PUSH
23005: LD_VAR 0 2
23009: ARRAY
23010: PPUSH
23011: LD_EXP 69
23015: PPUSH
23016: CALL_OW 120
// freeSlots = freeSlots - 1 ;
23020: LD_ADDR_VAR 0 4
23024: PUSH
23025: LD_VAR 0 4
23029: PUSH
23030: LD_INT 1
23032: MINUS
23033: ST_TO_ADDR
// end else
23034: GO 23038
// break ;
23036: GO 23040
// end ;
23038: GO 22987
23040: POP
23041: POP
// wait ( 0 0$1 ) ;
23042: LD_INT 35
23044: PPUSH
23045: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
23049: LD_VAR 0 5
23053: PPUSH
23054: LD_INT 56
23056: PUSH
23057: EMPTY
23058: LIST
23059: PUSH
23060: LD_INT 3
23062: PUSH
23063: LD_INT 60
23065: PUSH
23066: EMPTY
23067: LIST
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 72
23081: PPUSH
23082: LD_EXP 67
23086: PPUSH
23087: CALL_OW 120
// ComWalk ( ruScout ) ;
23091: LD_EXP 64
23095: PPUSH
23096: CALL_OW 138
// wait ( 0 0$1 ) ;
23100: LD_INT 35
23102: PPUSH
23103: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
23107: LD_EXP 64
23111: PUSH
23112: LD_EXP 62
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PPUSH
23121: LD_INT 99
23123: PPUSH
23124: LD_INT 37
23126: PPUSH
23127: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
23131: LD_EXP 64
23135: PUSH
23136: LD_EXP 62
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PPUSH
23145: LD_INT 88
23147: PPUSH
23148: LD_INT 60
23150: PPUSH
23151: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
23155: LD_EXP 64
23159: PUSH
23160: LD_EXP 62
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: LD_INT 129
23171: PPUSH
23172: LD_INT 99
23174: PPUSH
23175: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
23179: LD_EXP 62
23183: PUSH
23184: LD_EXP 64
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PPUSH
23193: LD_EXP 67
23197: PPUSH
23198: CALL_OW 180
// end ;
23202: LD_VAR 0 1
23206: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
23207: LD_EXP 22
23211: IFFALSE 23483
23213: GO 23215
23215: DISABLE
23216: LD_INT 0
23218: PPUSH
23219: PPUSH
23220: PPUSH
23221: PPUSH
23222: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
23223: LD_ADDR_VAR 0 4
23227: PUSH
23228: LD_VAR 0 4
23232: PUSH
23233: LD_EXP 61
23237: ADD
23238: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
23239: LD_ADDR_VAR 0 4
23243: PUSH
23244: LD_VAR 0 4
23248: PUSH
23249: LD_EXP 79
23253: ADD
23254: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
23255: LD_ADDR_VAR 0 4
23259: PUSH
23260: LD_VAR 0 4
23264: PUSH
23265: LD_EXP 71
23269: ADD
23270: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
23271: LD_ADDR_VAR 0 5
23275: PUSH
23276: LD_INT 18
23278: PPUSH
23279: LD_INT 22
23281: PUSH
23282: LD_INT 6
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 21
23291: PUSH
23292: LD_INT 1
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PPUSH
23303: CALL_OW 70
23307: PUSH
23308: LD_VAR 0 4
23312: DIFF
23313: ST_TO_ADDR
// pom = 6 ;
23314: LD_ADDR_VAR 0 3
23318: PUSH
23319: LD_INT 6
23321: ST_TO_ADDR
// if canTakeUnits then
23322: LD_VAR 0 5
23326: IFFALSE 23450
// for i = 1 to canTakeUnits do
23328: LD_ADDR_VAR 0 1
23332: PUSH
23333: DOUBLE
23334: LD_INT 1
23336: DEC
23337: ST_TO_ADDR
23338: LD_VAR 0 5
23342: PUSH
23343: FOR_TO
23344: IFFALSE 23448
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23346: LD_VAR 0 5
23350: PUSH
23351: LD_VAR 0 1
23355: ARRAY
23356: PPUSH
23357: CALL_OW 257
23361: PUSH
23362: LD_INT 3
23364: NONEQUAL
23365: IFFALSE 23412
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23367: LD_VAR 0 5
23371: PUSH
23372: LD_VAR 0 1
23376: ARRAY
23377: PPUSH
23378: LD_EXP 21
23382: PPUSH
23383: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23387: LD_VAR 0 5
23391: PUSH
23392: LD_VAR 0 1
23396: ARRAY
23397: PPUSH
23398: LD_INT 1
23400: PPUSH
23401: CALL_OW 183
// wait ( 0 0$1 ) ;
23405: LD_INT 35
23407: PPUSH
23408: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23412: LD_VAR 0 5
23416: PUSH
23417: LD_VAR 0 1
23421: ARRAY
23422: PPUSH
23423: LD_EXP 21
23427: PPUSH
23428: CALL_OW 120
// pom = pom - 1 ;
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_VAR 0 3
23441: PUSH
23442: LD_INT 1
23444: MINUS
23445: ST_TO_ADDR
// end ;
23446: GO 23343
23448: POP
23449: POP
// if pom > 0 then
23450: LD_VAR 0 3
23454: PUSH
23455: LD_INT 0
23457: GREATER
23458: IFFALSE 23483
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23460: LD_ADDR_EXP 81
23464: PUSH
23465: LD_EXP 81
23469: PPUSH
23470: LD_INT 3
23472: PPUSH
23473: LD_VAR 0 3
23477: PPUSH
23478: CALL_OW 1
23482: ST_TO_ADDR
// end ;
23483: PPOPN 5
23485: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23486: LD_EXP 74
23490: PUSH
23491: LD_EXP 31
23495: NOT
23496: AND
23497: IFFALSE 23546
23499: GO 23501
23501: DISABLE
// begin enable ;
23502: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23503: LD_EXP 74
23507: PPUSH
23508: LD_EXP 68
23512: PPUSH
23513: LD_INT 2
23515: PPUSH
23516: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23520: LD_EXP 74
23524: PPUSH
23525: LD_EXP 67
23529: PPUSH
23530: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23534: LD_EXP 74
23538: PPUSH
23539: LD_INT 100
23541: PPUSH
23542: CALL_OW 240
// end ;
23546: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23547: LD_INT 78
23549: PPUSH
23550: LD_INT 112
23552: PPUSH
23553: LD_INT 3
23555: PPUSH
23556: CALL_OW 440
23560: IFFALSE 23614
23562: GO 23564
23564: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23565: LD_INT 78
23567: PPUSH
23568: LD_INT 112
23570: PPUSH
23571: CALL_OW 84
// DialogueOn ;
23575: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23579: LD_EXP 49
23583: PPUSH
23584: LD_STRING D2a-Bur-1
23586: PPUSH
23587: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23591: LD_EXP 61
23595: PPUSH
23596: LD_STRING D2a-Kur-1
23598: PPUSH
23599: CALL_OW 94
// DialogueOff ;
23603: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23607: LD_STRING M2
23609: PPUSH
23610: CALL_OW 337
// end ;
23614: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23615: LD_EXP 10
23619: NOT
23620: IFFALSE 23828
23622: GO 23624
23624: DISABLE
23625: LD_INT 0
23627: PPUSH
// begin enable ;
23628: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23629: LD_ADDR_VAR 0 1
23633: PUSH
23634: LD_INT 22
23636: PUSH
23637: LD_INT 3
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 21
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: LD_INT 23
23656: PUSH
23657: LD_INT 3
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 31
23669: PUSH
23670: LD_INT 21
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 31
23679: PUSH
23680: LD_INT 23
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: PPUSH
23698: CALL_OW 69
23702: PUSH
23703: FOR_IN
23704: IFFALSE 23826
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23706: LD_VAR 0 1
23710: PPUSH
23711: LD_INT 48
23713: PPUSH
23714: LD_INT 81
23716: PPUSH
23717: CALL_OW 297
23721: PUSH
23722: LD_INT 7
23724: LESS
23725: IFFALSE 23824
// begin dialog_track = true ;
23727: LD_ADDR_EXP 10
23731: PUSH
23732: LD_INT 1
23734: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23735: LD_INT 48
23737: PPUSH
23738: LD_INT 81
23740: PPUSH
23741: CALL_OW 86
// DialogueOn ;
23745: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23749: LD_EXP 49
23753: PPUSH
23754: LD_STRING D5a-Bur-1
23756: PPUSH
23757: CALL_OW 88
// DialogueOff ;
23761: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23765: LD_INT 82
23767: PPUSH
23768: LD_INT 3
23770: PPUSH
23771: CALL_OW 321
23775: PUSH
23776: LD_INT 0
23778: EQUAL
23779: IFFALSE 23794
// SetTech ( 82 , 3 , state_enabled ) ;
23781: LD_INT 82
23783: PPUSH
23784: LD_INT 3
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23794: LD_INT 84
23796: PPUSH
23797: LD_INT 3
23799: PPUSH
23800: LD_INT 1
23802: PPUSH
23803: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23807: LD_INT 16
23809: PPUSH
23810: LD_INT 3
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: CALL_OW 324
// exit ;
23820: POP
23821: POP
23822: GO 23828
// end ;
23824: GO 23703
23826: POP
23827: POP
// end ;
23828: PPOPN 1
23830: END
// every 5 5$30 do
23831: GO 23833
23833: DISABLE
// begin PrepareScholtze ;
23834: CALL 5435 0 0
// wait ( 0 0$2 ) ;
23838: LD_INT 70
23840: PPUSH
23841: CALL_OW 67
// DialogueOn ;
23845: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23849: LD_EXP 55
23853: PPUSH
23854: LD_STRING D4-Sch-1
23856: PPUSH
23857: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23861: LD_EXP 49
23865: PPUSH
23866: LD_STRING D4-Bur-1
23868: PPUSH
23869: CALL_OW 88
// DialogueOff ;
23873: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23877: LD_STRING M4
23879: PPUSH
23880: CALL_OW 337
// ComHold ( Scholtze ) ;
23884: LD_EXP 55
23888: PPUSH
23889: CALL_OW 140
// scholtzeSpawned = true ;
23893: LD_ADDR_EXP 6
23897: PUSH
23898: LD_INT 1
23900: ST_TO_ADDR
// end ;
23901: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23902: LD_INT 3
23904: PPUSH
23905: LD_EXP 55
23909: PPUSH
23910: CALL_OW 292
23914: PUSH
23915: LD_EXP 6
23919: AND
23920: PUSH
23921: LD_EXP 7
23925: NOT
23926: AND
23927: IFFALSE 24108
23929: GO 23931
23931: DISABLE
// begin scholtzeSaved = true ;
23932: LD_ADDR_EXP 7
23936: PUSH
23937: LD_INT 1
23939: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23940: LD_EXP 55
23944: PPUSH
23945: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23949: LD_EXP 55
23953: PPUSH
23954: LD_INT 3
23956: PPUSH
23957: CALL_OW 235
// DialogueOn ;
23961: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23965: LD_EXP 55
23969: PPUSH
23970: LD_STRING D4a-Sch-1
23972: PPUSH
23973: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23977: LD_EXP 49
23981: PPUSH
23982: LD_STRING D4a-Bur-1
23984: PPUSH
23985: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23989: LD_EXP 55
23993: PPUSH
23994: LD_STRING D4a-Sch-2
23996: PPUSH
23997: CALL_OW 88
// DialogueOff ;
24001: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
24005: LD_EXP 85
24009: PPUSH
24010: LD_INT 28
24012: PPUSH
24013: LD_INT 36
24015: PPUSH
24016: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
24020: LD_STRING MScholtzeOut
24022: PPUSH
24023: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
24027: LD_INT 49
24029: PPUSH
24030: LD_INT 3
24032: PPUSH
24033: LD_INT 1
24035: PPUSH
24036: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
24040: LD_INT 51
24042: PPUSH
24043: LD_INT 3
24045: PPUSH
24046: LD_INT 1
24048: PPUSH
24049: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
24053: LD_INT 82
24055: PPUSH
24056: LD_INT 3
24058: PPUSH
24059: CALL_OW 321
24063: PUSH
24064: LD_INT 0
24066: EQUAL
24067: IFFALSE 24082
// SetTech ( 82 , 3 , state_enabled ) ;
24069: LD_INT 82
24071: PPUSH
24072: LD_INT 3
24074: PPUSH
24075: LD_INT 1
24077: PPUSH
24078: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
24082: LD_INT 83
24084: PPUSH
24085: LD_INT 3
24087: PPUSH
24088: LD_INT 1
24090: PPUSH
24091: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
24095: LD_INT 19
24097: PPUSH
24098: LD_INT 3
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: CALL_OW 324
// end ;
24108: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
24109: LD_EXP 55
24113: PPUSH
24114: CALL_OW 305
24118: PUSH
24119: LD_EXP 7
24123: NOT
24124: AND
24125: IFFALSE 24134
24127: GO 24129
24129: DISABLE
// PrepareAmericanPatrol ;
24130: CALL 6339 0 0
24134: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
24135: LD_EXP 55
24139: PPUSH
24140: CALL_OW 305
24144: PUSH
24145: LD_EXP 55
24149: PPUSH
24150: CALL_OW 255
24154: PUSH
24155: LD_INT 8
24157: EQUAL
24158: AND
24159: PUSH
24160: LD_EXP 47
24164: PUSH
24165: LD_INT 35
24167: GREATER
24168: AND
24169: IFFALSE 24345
24171: GO 24173
24173: DISABLE
24174: LD_INT 0
24176: PPUSH
24177: PPUSH
// begin enable ;
24178: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
24179: LD_ADDR_EXP 47
24183: PUSH
24184: LD_EXP 47
24188: PUSH
24189: LD_INT 35
24191: MINUS
24192: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
24193: LD_ADDR_VAR 0 1
24197: PUSH
24198: LD_INT 22
24200: PUSH
24201: LD_INT 0
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 25
24210: PUSH
24211: LD_INT 12
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PPUSH
24222: CALL_OW 69
24226: PUSH
24227: FOR_IN
24228: IFFALSE 24267
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24230: LD_VAR 0 1
24234: PPUSH
24235: LD_EXP 55
24239: PPUSH
24240: CALL_OW 250
24244: PPUSH
24245: LD_EXP 55
24249: PPUSH
24250: CALL_OW 251
24254: PPUSH
24255: LD_INT 12
24257: PPUSH
24258: LD_INT 0
24260: PPUSH
24261: CALL 10226 0 5
24265: GO 24227
24267: POP
24268: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
24269: LD_ADDR_VAR 0 2
24273: PUSH
24274: LD_INT 22
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 25
24286: PUSH
24287: LD_INT 14
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PPUSH
24298: CALL_OW 69
24302: PUSH
24303: FOR_IN
24304: IFFALSE 24343
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
24306: LD_VAR 0 2
24310: PPUSH
24311: LD_EXP 55
24315: PPUSH
24316: CALL_OW 250
24320: PPUSH
24321: LD_EXP 55
24325: PPUSH
24326: CALL_OW 251
24330: PPUSH
24331: LD_INT 12
24333: PPUSH
24334: LD_INT 0
24336: PPUSH
24337: CALL 10226 0 5
24341: GO 24303
24343: POP
24344: POP
// end ;
24345: PPOPN 2
24347: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24348: LD_INT 1
24350: PPUSH
24351: LD_EXP 55
24355: PPUSH
24356: CALL_OW 292
24360: PUSH
24361: LD_EXP 85
24365: AND
24366: PUSH
24367: LD_EXP 7
24371: NOT
24372: AND
24373: IFFALSE 24527
24375: GO 24377
24377: DISABLE
// begin enable ;
24378: ENABLE
// if not IsPlaced ( Scholtze ) then
24379: LD_EXP 55
24383: PPUSH
24384: CALL_OW 305
24388: NOT
24389: IFFALSE 24393
// exit ;
24391: GO 24527
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24393: LD_EXP 85
24397: PUSH
24398: LD_INT 1
24400: ARRAY
24401: PPUSH
24402: CALL_OW 320
24406: PUSH
24407: LD_EXP 55
24411: EQUAL
24412: PUSH
24413: LD_EXP 85
24417: PUSH
24418: LD_INT 2
24420: ARRAY
24421: PPUSH
24422: CALL_OW 320
24426: PUSH
24427: LD_EXP 55
24431: EQUAL
24432: OR
24433: IFFALSE 24527
// begin DialogueOn ;
24435: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24439: LD_EXP 55
24443: PPUSH
24444: LD_STRING D4b-Sch-1
24446: PPUSH
24447: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24451: LD_EXP 85
24455: PUSH
24456: LD_INT 2
24458: ARRAY
24459: PPUSH
24460: LD_STRING D4b-Sol1-1
24462: PPUSH
24463: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24467: LD_EXP 85
24471: PUSH
24472: LD_INT 1
24474: ARRAY
24475: PPUSH
24476: LD_STRING D4b-Sol2-1
24478: PPUSH
24479: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24483: LD_EXP 55
24487: PPUSH
24488: LD_STRING D4b-Sch-2
24490: PPUSH
24491: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24495: LD_EXP 49
24499: PPUSH
24500: LD_STRING D4b-Bur-2
24502: PPUSH
24503: CALL_OW 88
// DialogueOff ;
24507: CALL_OW 7
// Killunit ( Scholtze ) ;
24511: LD_EXP 55
24515: PPUSH
24516: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24520: LD_STRING MScholtzeDel
24522: PPUSH
24523: CALL_OW 337
// end ; end ;
24527: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24528: LD_INT 0
24530: PPUSH
24531: PPUSH
24532: PPUSH
// dialog_workshop = true ;
24533: LD_ADDR_EXP 8
24537: PUSH
24538: LD_INT 1
24540: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24541: LD_INT 22
24543: PUSH
24544: LD_INT 3
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 30
24553: PUSH
24554: LD_INT 26
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PPUSH
24565: CALL_OW 69
24569: NOT
24570: IFFALSE 24959
// begin CenterNowOnUnits ( building ) ;
24572: LD_VAR 0 1
24576: PPUSH
24577: CALL_OW 87
// DialogueOn ;
24581: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24585: LD_EXP 49
24589: PPUSH
24590: LD_STRING D3aa-Bur-1
24592: PPUSH
24593: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24597: LD_EXP 55
24601: PPUSH
24602: CALL_OW 302
24606: PUSH
24607: LD_EXP 55
24611: PPUSH
24612: CALL_OW 255
24616: PUSH
24617: LD_INT 3
24619: EQUAL
24620: AND
24621: IFFALSE 24637
// Say ( Scholtze , D3aa-Sch-1 ) else
24623: LD_EXP 55
24627: PPUSH
24628: LD_STRING D3aa-Sch-1
24630: PPUSH
24631: CALL_OW 88
24635: GO 24943
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24637: LD_ADDR_VAR 0 3
24641: PUSH
24642: LD_INT 22
24644: PUSH
24645: LD_INT 3
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 21
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 25
24664: PUSH
24665: LD_INT 4
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 26
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 50
24684: PUSH
24685: EMPTY
24686: LIST
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: PPUSH
24695: CALL_OW 69
24699: PUSH
24700: LD_EXP 49
24704: PUSH
24705: LD_EXP 50
24709: PUSH
24710: LD_EXP 52
24714: PUSH
24715: LD_EXP 53
24719: PUSH
24720: LD_EXP 54
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: DIFF
24732: ST_TO_ADDR
// if maleSci then
24733: LD_VAR 0 3
24737: IFFALSE 24757
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24739: LD_VAR 0 3
24743: PUSH
24744: LD_INT 1
24746: ARRAY
24747: PPUSH
24748: LD_STRING D3aa-Sci1-1
24750: PPUSH
24751: CALL_OW 88
24755: GO 24943
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24757: LD_ADDR_VAR 0 4
24761: PUSH
24762: LD_INT 22
24764: PUSH
24765: LD_INT 3
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 21
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 26
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 50
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: PPUSH
24804: CALL_OW 69
24808: PUSH
24809: LD_EXP 49
24813: PUSH
24814: LD_EXP 50
24818: PUSH
24819: LD_EXP 52
24823: PUSH
24824: LD_EXP 53
24828: PUSH
24829: LD_EXP 54
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: DIFF
24841: ST_TO_ADDR
// if maleOthers then
24842: LD_VAR 0 4
24846: IFFALSE 24866
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24848: LD_VAR 0 4
24852: PUSH
24853: LD_INT 1
24855: ARRAY
24856: PPUSH
24857: LD_STRING D3aa-Sci1-1
24859: PPUSH
24860: CALL_OW 88
24864: GO 24943
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24866: LD_ADDR_VAR 0 4
24870: PUSH
24871: LD_INT 22
24873: PUSH
24874: LD_INT 3
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 21
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 26
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 50
24903: PUSH
24904: EMPTY
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: PPUSH
24913: CALL_OW 69
24917: PUSH
24918: LD_EXP 49
24922: PUSH
24923: EMPTY
24924: LIST
24925: DIFF
24926: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24927: LD_VAR 0 4
24931: PUSH
24932: LD_INT 1
24934: ARRAY
24935: PPUSH
24936: LD_STRING D3aa-Sci1-1
24938: PPUSH
24939: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24943: LD_EXP 49
24947: PPUSH
24948: LD_STRING D3aa-Bur-2
24950: PPUSH
24951: CALL_OW 88
// DialogueOff ;
24955: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24959: LD_STRING M3
24961: PPUSH
24962: CALL_OW 337
// end ;
24966: LD_VAR 0 2
24970: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24971: LD_EXP 9
24975: NOT
24976: IFFALSE 25314
24978: GO 24980
24980: DISABLE
24981: LD_INT 0
24983: PPUSH
24984: PPUSH
// begin enable ;
24985: ENABLE
// for amUnit in amSupportTroops do
24986: LD_ADDR_VAR 0 1
24990: PUSH
24991: LD_EXP 84
24995: PUSH
24996: FOR_IN
24997: IFFALSE 25312
// begin if See ( 3 , amUnit ) then
24999: LD_INT 3
25001: PPUSH
25002: LD_VAR 0 1
25006: PPUSH
25007: CALL_OW 292
25011: IFFALSE 25310
// begin dialog_amSupportTroops = true ;
25013: LD_ADDR_EXP 9
25017: PUSH
25018: LD_INT 1
25020: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 87
// DialogueOn ;
25030: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
25034: LD_ADDR_VAR 0 2
25038: PUSH
25039: LD_INT 22
25041: PUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 21
25051: PUSH
25052: LD_INT 1
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 26
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 50
25071: PUSH
25072: EMPTY
25073: LIST
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: PPUSH
25081: CALL_OW 69
25085: PUSH
25086: LD_EXP 49
25090: PUSH
25091: LD_EXP 50
25095: PUSH
25096: LD_EXP 52
25100: PUSH
25101: LD_EXP 53
25105: PUSH
25106: LD_EXP 54
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: DIFF
25118: ST_TO_ADDR
// if randomMale then
25119: LD_VAR 0 2
25123: IFFALSE 25190
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
25125: LD_INT 22
25127: PUSH
25128: LD_INT 3
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 21
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 26
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 50
25157: PUSH
25158: EMPTY
25159: LIST
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: PPUSH
25167: CALL_OW 69
25171: PPUSH
25172: LD_STRING D3b-RSol1-1
25174: PPUSH
25175: LD_STRING 
25177: PPUSH
25178: LD_INT 0
25180: PPUSH
25181: LD_INT 1
25183: PPUSH
25184: CALL 6975 0 5
25188: GO 25267
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: LD_INT 22
25197: PUSH
25198: LD_INT 3
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 21
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 26
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 50
25227: PUSH
25228: EMPTY
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: PPUSH
25237: CALL_OW 69
25241: PUSH
25242: LD_EXP 49
25246: PUSH
25247: EMPTY
25248: LIST
25249: DIFF
25250: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
25251: LD_VAR 0 2
25255: PUSH
25256: LD_INT 1
25258: ARRAY
25259: PPUSH
25260: LD_STRING D3b-RSol1-1
25262: PPUSH
25263: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
25267: LD_EXP 50
25271: PPUSH
25272: CALL_OW 302
25276: IFFALSE 25290
// Say ( Gnyevko , D3b-Gny-1 ) ;
25278: LD_EXP 50
25282: PPUSH
25283: LD_STRING D3b-Gny-1
25285: PPUSH
25286: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
25290: LD_EXP 49
25294: PPUSH
25295: LD_STRING D3b-Bur-1
25297: PPUSH
25298: CALL_OW 88
// DialogueOff ;
25302: CALL_OW 7
// exit ;
25306: POP
25307: POP
25308: GO 25314
// end ; end ;
25310: GO 24996
25312: POP
25313: POP
// end ;
25314: PPOPN 2
25316: END
// every 2 2$0 trigger dialog_amSupportTroops do
25317: LD_EXP 9
25321: IFFALSE 25405
25323: GO 25325
25325: DISABLE
// begin if IsOK ( Kovalyuk ) then
25326: LD_EXP 52
25330: PPUSH
25331: CALL_OW 302
25335: IFFALSE 25349
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25337: LD_EXP 52
25341: PPUSH
25342: LD_STRING D3b-Kov-1
25344: PPUSH
25345: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25349: LD_INT 22
25351: PUSH
25352: LD_INT 3
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 21
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 26
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: PPUSH
25384: CALL_OW 69
25388: PPUSH
25389: LD_STRING D3b-RSol1-2
25391: PPUSH
25392: LD_STRING 
25394: PPUSH
25395: LD_INT 0
25397: PPUSH
25398: LD_INT 0
25400: PPUSH
25401: CALL 6975 0 5
// end ;
25405: END
// every 1 trigger not endCutscene do
25406: LD_EXP 31
25410: NOT
25411: IFFALSE 25429
25413: GO 25415
25415: DISABLE
// begin enable ;
25416: ENABLE
// SetLives ( Kurin , 1000 ) ;
25417: LD_EXP 61
25421: PPUSH
25422: LD_INT 1000
25424: PPUSH
25425: CALL_OW 234
// end ;
25429: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25430: LD_EXP 40
25434: PUSH
25435: LD_INT 35
25437: LESS
25438: IFFALSE 25666
25440: GO 25442
25442: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25443: LD_EXP 61
25447: PPUSH
25448: CALL_OW 87
// InGameOn ;
25452: CALL_OW 8
// DialogueOn ;
25456: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25460: LD_EXP 61
25464: PPUSH
25465: LD_STRING D5-Kur-1
25467: PPUSH
25468: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25472: LD_STRING QVehicles
25474: PPUSH
25475: CALL_OW 97
25479: PUSH
25480: LD_INT 1
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25531
25488: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25489: LD_EXP 49
25493: PPUSH
25494: LD_STRING D6a-Bur-1
25496: PPUSH
25497: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25501: LD_EXP 61
25505: PPUSH
25506: LD_STRING D6a-Kur-1
25508: PPUSH
25509: CALL_OW 94
// meetNearOmicronBase = true ;
25513: LD_ADDR_EXP 19
25517: PUSH
25518: LD_INT 1
25520: ST_TO_ADDR
// kurinCheckVehicles = true ;
25521: LD_ADDR_EXP 18
25525: PUSH
25526: LD_INT 1
25528: ST_TO_ADDR
// end ; 2 :
25529: GO 25658
25531: LD_INT 2
25533: DOUBLE
25534: EQUAL
25535: IFTRUE 25539
25537: GO 25586
25539: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25540: LD_EXP 49
25544: PPUSH
25545: LD_STRING D6b-Bur-1
25547: PPUSH
25548: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25552: LD_EXP 61
25556: PPUSH
25557: LD_STRING D6b-Kur-1
25559: PPUSH
25560: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25564: LD_EXP 49
25568: PPUSH
25569: LD_STRING D6b-Bur-2
25571: PPUSH
25572: CALL_OW 88
// meetNearOmicronBase = true ;
25576: LD_ADDR_EXP 19
25580: PUSH
25581: LD_INT 1
25583: ST_TO_ADDR
// end ; 3 :
25584: GO 25658
25586: LD_INT 3
25588: DOUBLE
25589: EQUAL
25590: IFTRUE 25594
25592: GO 25657
25594: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25595: LD_EXP 49
25599: PPUSH
25600: LD_STRING D6c-Bur-1
25602: PPUSH
25603: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25607: LD_EXP 61
25611: PPUSH
25612: LD_STRING D6c-Kur-1
25614: PPUSH
25615: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25619: LD_EXP 49
25623: PPUSH
25624: LD_STRING D6c-Bur-2
25626: PPUSH
25627: CALL_OW 88
// kurinGiveMoreTime = true ;
25631: LD_ADDR_EXP 13
25635: PUSH
25636: LD_INT 1
25638: ST_TO_ADDR
// kurinOpinion = 0 ;
25639: LD_ADDR_EXP 26
25643: PUSH
25644: LD_INT 0
25646: ST_TO_ADDR
// counterIndex = 4 ;
25647: LD_ADDR_EXP 90
25651: PUSH
25652: LD_INT 4
25654: ST_TO_ADDR
// end ; end ;
25655: GO 25658
25657: POP
// InGameOff ;
25658: CALL_OW 9
// DialogueOff ;
25662: CALL_OW 7
// end ;
25666: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25667: LD_EXP 14
25671: PUSH
25672: LD_INT 35
25674: LESS
25675: PUSH
25676: LD_EXP 13
25680: AND
25681: IFFALSE 25714
25683: GO 25685
25685: DISABLE
// begin DialogueOn ;
25686: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25690: LD_EXP 61
25694: PPUSH
25695: LD_STRING D6c-Kur-2
25697: PPUSH
25698: CALL_OW 94
// DialogueOff ;
25702: CALL_OW 7
// meetNearOmicronBase = true ;
25706: LD_ADDR_EXP 19
25710: PUSH
25711: LD_INT 1
25713: ST_TO_ADDR
// end ;
25714: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25715: LD_EXP 19
25719: IFFALSE 26374
25721: GO 25723
25723: DISABLE
25724: LD_INT 0
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
// begin mechs = [ ] ;
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: EMPTY
25737: ST_TO_ADDR
// vehs = [ ] ;
25738: LD_ADDR_VAR 0 4
25742: PUSH
25743: EMPTY
25744: ST_TO_ADDR
// haveVehs = 0 ;
25745: LD_ADDR_VAR 0 5
25749: PUSH
25750: LD_INT 0
25752: ST_TO_ADDR
// uc_side = 6 ;
25753: LD_ADDR_OWVAR 20
25757: PUSH
25758: LD_INT 6
25760: ST_TO_ADDR
// uc_nation = 3 ;
25761: LD_ADDR_OWVAR 21
25765: PUSH
25766: LD_INT 3
25768: ST_TO_ADDR
// for i := 1 to 2 do
25769: LD_ADDR_VAR 0 1
25773: PUSH
25774: DOUBLE
25775: LD_INT 1
25777: DEC
25778: ST_TO_ADDR
25779: LD_INT 2
25781: PUSH
25782: FOR_TO
25783: IFFALSE 25882
// begin PrepareMechanic ( false , 2 ) ;
25785: LD_INT 0
25787: PPUSH
25788: LD_INT 2
25790: PPUSH
25791: CALL_OW 383
// mech = CreateHuman ;
25795: LD_ADDR_VAR 0 2
25799: PUSH
25800: CALL_OW 44
25804: ST_TO_ADDR
// mechs = mechs ^ mech ;
25805: LD_ADDR_VAR 0 3
25809: PUSH
25810: LD_VAR 0 3
25814: PUSH
25815: LD_VAR 0 2
25819: ADD
25820: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25821: LD_VAR 0 2
25825: PPUSH
25826: LD_EXP 67
25830: PPUSH
25831: CALL_OW 52
// ComExitBuilding ( mech ) ;
25835: LD_VAR 0 2
25839: PPUSH
25840: CALL_OW 122
// wait ( 0 0$1 ) ;
25844: LD_INT 35
25846: PPUSH
25847: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25851: LD_VAR 0 2
25855: PPUSH
25856: LD_EXP 60
25860: PPUSH
25861: CALL_OW 250
25865: PPUSH
25866: LD_EXP 60
25870: PPUSH
25871: CALL_OW 251
25875: PPUSH
25876: CALL_OW 171
// end ;
25880: GO 25782
25882: POP
25883: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25884: LD_INT 22
25886: PUSH
25887: LD_INT 3
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 21
25896: PUSH
25897: LD_INT 2
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 23
25906: PUSH
25907: LD_INT 3
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: PPUSH
25919: CALL_OW 69
25923: PUSH
25924: LD_INT 22
25926: PUSH
25927: LD_INT 3
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 21
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PPUSH
25948: CALL_OW 69
25952: EQUAL
25953: IFFALSE 25963
// produceOnlyForYou = true ;
25955: LD_ADDR_EXP 17
25959: PUSH
25960: LD_INT 1
25962: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25963: LD_INT 700
25965: PPUSH
25966: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25970: LD_INT 22
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 21
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 23
25992: PUSH
25993: LD_INT 3
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: LD_INT 34
26005: PUSH
26006: LD_INT 51
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: PPUSH
26023: CALL_OW 69
26027: PUSH
26028: LD_INT 22
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 21
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 69
26056: PUSH
26057: LD_INT 2
26059: PLUS
26060: GREATEREQUAL
26061: IFFALSE 26344
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
26063: LD_ADDR_VAR 0 4
26067: PUSH
26068: LD_VAR 0 4
26072: PUSH
26073: LD_INT 22
26075: PUSH
26076: LD_INT 3
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 21
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 23
26095: PUSH
26096: LD_INT 3
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: LD_INT 34
26108: PUSH
26109: LD_INT 51
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 3
26122: PUSH
26123: LD_INT 59
26125: PUSH
26126: EMPTY
26127: LIST
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: PPUSH
26140: CALL_OW 69
26144: PUSH
26145: LD_INT 1
26147: ARRAY
26148: ADD
26149: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
26150: LD_ADDR_VAR 0 4
26154: PUSH
26155: LD_VAR 0 4
26159: PUSH
26160: LD_INT 22
26162: PUSH
26163: LD_INT 3
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 21
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 23
26182: PUSH
26183: LD_INT 3
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 3
26192: PUSH
26193: LD_INT 34
26195: PUSH
26196: LD_INT 51
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 3
26209: PUSH
26210: LD_INT 59
26212: PUSH
26213: EMPTY
26214: LIST
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: PPUSH
26227: CALL_OW 69
26231: PUSH
26232: LD_INT 2
26234: ARRAY
26235: ADD
26236: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
26237: LD_ADDR_EXP 76
26241: PUSH
26242: LD_EXP 76
26246: PUSH
26247: LD_VAR 0 4
26251: ADD
26252: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
26253: LD_VAR 0 4
26257: PPUSH
26258: LD_INT 6
26260: PPUSH
26261: CALL_OW 235
// produceMoreVehicles = true ;
26265: LD_ADDR_EXP 16
26269: PUSH
26270: LD_INT 1
26272: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
26273: LD_VAR 0 3
26277: PUSH
26278: LD_INT 1
26280: ARRAY
26281: PPUSH
26282: LD_VAR 0 4
26286: PUSH
26287: LD_INT 1
26289: ARRAY
26290: PPUSH
26291: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
26295: LD_VAR 0 3
26299: PUSH
26300: LD_INT 2
26302: ARRAY
26303: PPUSH
26304: LD_VAR 0 4
26308: PUSH
26309: LD_INT 2
26311: ARRAY
26312: PPUSH
26313: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
26317: LD_EXP 18
26321: PUSH
26322: LD_EXP 26
26326: PUSH
26327: LD_INT 0
26329: EQUAL
26330: NOT
26331: AND
26332: IFFALSE 26342
// kurinOpinion = 1 ;
26334: LD_ADDR_EXP 26
26338: PUSH
26339: LD_INT 1
26341: ST_TO_ADDR
// end else
26342: GO 26374
// begin if kurinCheckVehicles then
26344: LD_EXP 18
26348: IFFALSE 26374
// begin DialogueOn ;
26350: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26354: LD_EXP 61
26358: PPUSH
26359: LD_STRING D6d-Kur-1
26361: PPUSH
26362: CALL_OW 94
// DialogueOff ;
26366: CALL_OW 7
// Lose_Vehicles ;
26370: CALL 20140 0 0
// end ; end ; end ;
26374: PPOPN 5
26376: END
// every 0 0$1 trigger meetNearOmicronBase do
26377: LD_EXP 19
26381: IFFALSE 26601
26383: GO 26385
26385: DISABLE
// begin spawnCrates = false ;
26386: LD_ADDR_EXP 5
26390: PUSH
26391: LD_INT 0
26393: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26394: LD_INT 6
26396: PPUSH
26397: LD_INT 1
26399: PPUSH
26400: LD_INT 2
26402: PPUSH
26403: LD_INT 1
26405: PPUSH
26406: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26410: LD_INT 0
26412: PPUSH
26413: LD_INT 3
26415: PPUSH
26416: LD_INT 0
26418: PPUSH
26419: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26423: LD_STRING M3a
26425: PPUSH
26426: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26430: LD_STRING M5
26432: PPUSH
26433: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26437: LD_INT 15
26439: PPUSH
26440: LD_INT 1
26442: PPUSH
26443: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26447: LD_EXP 76
26451: PPUSH
26452: LD_INT 75
26454: PPUSH
26455: LD_INT 38
26457: PPUSH
26458: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26462: LD_EXP 75
26466: PPUSH
26467: LD_INT 75
26469: PPUSH
26470: LD_INT 38
26472: PPUSH
26473: CALL_OW 111
// counterIndex = 2 ;
26477: LD_ADDR_EXP 90
26481: PUSH
26482: LD_INT 2
26484: ST_TO_ADDR
// if not kurinOpinion = 0 then
26485: LD_EXP 26
26489: PUSH
26490: LD_INT 0
26492: EQUAL
26493: NOT
26494: IFFALSE 26504
// kurinOpinion = 1 ;
26496: LD_ADDR_EXP 26
26500: PUSH
26501: LD_INT 1
26503: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26504: LD_INT 1
26506: PPUSH
26507: LD_INT 1
26509: PPUSH
26510: LD_INT 22
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 21
26522: PUSH
26523: LD_INT 1
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PPUSH
26534: CALL_OW 69
26538: PPUSH
26539: LD_INT 13
26541: PPUSH
26542: LD_INT 28
26544: PPUSH
26545: LD_INT 17
26547: PPUSH
26548: LD_INT 29
26550: PPUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 3
26556: PUSH
26557: LD_INT 4
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: PUSH
26565: LD_OWVAR 67
26569: ARRAY
26570: PPUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: LD_INT 4
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: LIST
26584: PUSH
26585: LD_OWVAR 67
26589: ARRAY
26590: PPUSH
26591: LD_INT 0
26593: PPUSH
26594: LD_INT 0
26596: PPUSH
26597: CALL 12106 0 11
// end ;
26601: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26602: LD_EXP 15
26606: PUSH
26607: LD_INT 35
26609: LESS
26610: PUSH
26611: LD_EXP 90
26615: PUSH
26616: LD_INT 2
26618: EQUAL
26619: AND
26620: IFFALSE 26669
26622: GO 26624
26624: DISABLE
// begin DialogueOn ;
26625: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26629: LD_EXP 61
26633: PPUSH
26634: LD_STRING D7a-Kur-1
26636: PPUSH
26637: CALL_OW 94
// DialogueOff ;
26641: CALL_OW 7
// counterIndex = 3 ;
26645: LD_ADDR_EXP 90
26649: PUSH
26650: LD_INT 3
26652: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26653: LD_ADDR_EXP 15
26657: PUSH
26658: LD_INT 4200
26660: ST_TO_ADDR
// kurinOpinion = 0 ;
26661: LD_ADDR_EXP 26
26665: PUSH
26666: LD_INT 0
26668: ST_TO_ADDR
// end ;
26669: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26670: LD_EXP 15
26674: PUSH
26675: LD_INT 35
26677: LESS
26678: PUSH
26679: LD_EXP 90
26683: PUSH
26684: LD_INT 3
26686: EQUAL
26687: AND
26688: IFFALSE 26697
26690: GO 26692
26692: DISABLE
// Lose_Delay ;
26693: CALL 20170 0 0
26697: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26698: LD_EXP 19
26702: PUSH
26703: LD_INT 15
26705: PPUSH
26706: LD_INT 22
26708: PUSH
26709: LD_INT 3
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 21
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PPUSH
26730: CALL_OW 71
26734: PUSH
26735: LD_INT 0
26737: EQUAL
26738: AND
26739: IFFALSE 26827
26741: GO 26743
26743: DISABLE
// begin counterEnable = false ;
26744: LD_ADDR_EXP 89
26748: PUSH
26749: LD_INT 0
26751: ST_TO_ADDR
// Display_strings = [ ] ;
26752: LD_ADDR_OWVAR 47
26756: PUSH
26757: EMPTY
26758: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26759: LD_INT 15
26761: PPUSH
26762: LD_INT 0
26764: PPUSH
26765: CALL_OW 424
// canExitBattlefield = false ;
26769: LD_ADDR_EXP 24
26773: PUSH
26774: LD_INT 0
26776: ST_TO_ADDR
// DialogueOn ;
26777: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26781: LD_EXP 49
26785: PPUSH
26786: LD_STRING D7-Bur-1
26788: PPUSH
26789: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26793: LD_EXP 61
26797: PPUSH
26798: LD_STRING D7-Kur-1
26800: PPUSH
26801: CALL_OW 94
// DialogueOff ;
26805: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26809: LD_STRING M5a
26811: PPUSH
26812: CALL_OW 337
// Query ( QRefuel ) ;
26816: LD_STRING QRefuel
26818: PPUSH
26819: CALL_OW 97
// KirovAttackOmicron ;
26823: CALL 17896 0 0
// end ;
26827: END
// every 1 trigger not canExitBattlefield do var unit ;
26828: LD_EXP 24
26832: NOT
26833: IFFALSE 27002
26835: GO 26837
26837: DISABLE
26838: LD_INT 0
26840: PPUSH
// begin enable ;
26841: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26842: LD_ADDR_VAR 0 1
26846: PUSH
26847: LD_INT 22
26849: PUSH
26850: LD_INT 3
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 21
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 21
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PPUSH
26889: CALL_OW 69
26893: PUSH
26894: FOR_IN
26895: IFFALSE 27000
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26897: LD_VAR 0 1
26901: PPUSH
26902: LD_INT 26
26904: PPUSH
26905: CALL_OW 308
26909: NOT
26910: PUSH
26911: LD_VAR 0 1
26915: PPUSH
26916: LD_INT 21
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PPUSH
26926: CALL_OW 72
26930: PUSH
26931: LD_VAR 0 1
26935: PPUSH
26936: CALL_OW 313
26940: OR
26941: AND
26942: IFFALSE 26998
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26944: LD_VAR 0 1
26948: PPUSH
26949: LD_INT 26
26951: PPUSH
26952: CALL_OW 113
// if not dialog_stop then
26956: LD_EXP 11
26960: NOT
26961: IFFALSE 26998
// begin dialog_stop = true ;
26963: LD_ADDR_EXP 11
26967: PUSH
26968: LD_INT 1
26970: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26971: LD_EXP 61
26975: PPUSH
26976: LD_STRING D12-Kur-1
26978: PPUSH
26979: CALL_OW 88
// wait ( 0 0$5 ) ;
26983: LD_INT 175
26985: PPUSH
26986: CALL_OW 67
// dialog_stop = false ;
26990: LD_ADDR_EXP 11
26994: PUSH
26995: LD_INT 0
26997: ST_TO_ADDR
// end ; end ;
26998: GO 26894
27000: POP
27001: POP
// end ;
27002: PPOPN 1
27004: END
// every 1 do var unit ;
27005: GO 27007
27007: DISABLE
27008: LD_INT 0
27010: PPUSH
// begin enable ;
27011: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
27012: LD_ADDR_VAR 0 1
27016: PUSH
27017: LD_INT 22
27019: PUSH
27020: LD_INT 3
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 2
27029: PUSH
27030: LD_INT 21
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 21
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: LIST
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PPUSH
27059: CALL_OW 69
27063: PUSH
27064: FOR_IN
27065: IFFALSE 27140
// if IsInArea ( unit , SecondKurinBase ) then
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_INT 20
27074: PPUSH
27075: CALL_OW 308
27079: IFFALSE 27138
// begin ComMoveXY ( unit , 200 , 114 ) ;
27081: LD_VAR 0 1
27085: PPUSH
27086: LD_INT 200
27088: PPUSH
27089: LD_INT 114
27091: PPUSH
27092: CALL_OW 111
// if not dialog_stop then
27096: LD_EXP 11
27100: NOT
27101: IFFALSE 27138
// begin dialog_stop = true ;
27103: LD_ADDR_EXP 11
27107: PUSH
27108: LD_INT 1
27110: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
27111: LD_EXP 61
27115: PPUSH
27116: LD_STRING D12-Kur-1
27118: PPUSH
27119: CALL_OW 88
// wait ( 0 0$5 ) ;
27123: LD_INT 175
27125: PPUSH
27126: CALL_OW 67
// dialog_stop = false ;
27130: LD_ADDR_EXP 11
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// end ; end ;
27138: GO 27064
27140: POP
27141: POP
// end ;
27142: PPOPN 1
27144: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var i , unit , randDialog , currentDist , tmpDist , nearUnit , index ;
27145: LD_EXP 19
27149: NOT
27150: PUSH
27151: LD_INT 290
27153: PPUSH
27154: CALL_OW 302
27158: AND
27159: IFFALSE 27669
27161: GO 27163
27163: DISABLE
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
27168: PPUSH
27169: PPUSH
27170: PPUSH
27171: PPUSH
27172: PPUSH
// begin enable ;
27173: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
27174: LD_ADDR_VAR 0 2
27178: PUSH
27179: LD_INT 13
27181: PPUSH
27182: LD_INT 22
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 21
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 21
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 21
27217: PUSH
27218: LD_INT 3
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PPUSH
27235: CALL_OW 70
27239: PUSH
27240: FOR_IN
27241: IFFALSE 27667
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
27243: LD_VAR 0 2
27247: PPUSH
27248: LD_INT 22
27250: PUSH
27251: LD_INT 3
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: LD_INT 21
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 21
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PPUSH
27290: CALL_OW 69
27294: PPUSH
27295: LD_VAR 0 2
27299: PPUSH
27300: CALL_OW 74
27304: PPUSH
27305: CALL_OW 296
27309: PUSH
27310: LD_INT 17
27312: LESS
27313: IFFALSE 27665
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ;
27315: LD_ADDR_VAR 0 6
27319: PUSH
27320: LD_INT 22
27322: PUSH
27323: LD_INT 3
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 50
27332: PUSH
27333: EMPTY
27334: LIST
27335: PUSH
27336: LD_INT 2
27338: PUSH
27339: LD_INT 21
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 21
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: PPUSH
27369: CALL_OW 69
27373: PPUSH
27374: LD_VAR 0 2
27378: PPUSH
27379: CALL_OW 74
27383: ST_TO_ADDR
// currentDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ 1 ] [ 1 ] , omicronBlockerPoints [ 1 ] [ 2 ] ) ;
27384: LD_ADDR_VAR 0 4
27388: PUSH
27389: LD_VAR 0 6
27393: PPUSH
27394: LD_EXP 48
27398: PUSH
27399: LD_INT 1
27401: ARRAY
27402: PUSH
27403: LD_INT 1
27405: ARRAY
27406: PPUSH
27407: LD_EXP 48
27411: PUSH
27412: LD_INT 1
27414: ARRAY
27415: PUSH
27416: LD_INT 2
27418: ARRAY
27419: PPUSH
27420: CALL_OW 297
27424: ST_TO_ADDR
// index = 1 ;
27425: LD_ADDR_VAR 0 7
27429: PUSH
27430: LD_INT 1
27432: ST_TO_ADDR
// for i = 2 to omicronBlockerPoints do
27433: LD_ADDR_VAR 0 1
27437: PUSH
27438: DOUBLE
27439: LD_INT 2
27441: DEC
27442: ST_TO_ADDR
27443: LD_EXP 48
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27530
// begin tmpDist = GetDistUnitXY ( nearUnit , omicronBlockerPoints [ i ] [ 1 ] , omicronBlockerPoints [ i ] [ 2 ] ) ;
27451: LD_ADDR_VAR 0 5
27455: PUSH
27456: LD_VAR 0 6
27460: PPUSH
27461: LD_EXP 48
27465: PUSH
27466: LD_VAR 0 1
27470: ARRAY
27471: PUSH
27472: LD_INT 1
27474: ARRAY
27475: PPUSH
27476: LD_EXP 48
27480: PUSH
27481: LD_VAR 0 1
27485: ARRAY
27486: PUSH
27487: LD_INT 2
27489: ARRAY
27490: PPUSH
27491: CALL_OW 297
27495: ST_TO_ADDR
// if tmpDist < currentDist then
27496: LD_VAR 0 5
27500: PUSH
27501: LD_VAR 0 4
27505: LESS
27506: IFFALSE 27528
// begin index = i ;
27508: LD_ADDR_VAR 0 7
27512: PUSH
27513: LD_VAR 0 1
27517: ST_TO_ADDR
// currentDist = tmpDist ;
27518: LD_ADDR_VAR 0 4
27522: PUSH
27523: LD_VAR 0 5
27527: ST_TO_ADDR
// end ; end ;
27528: GO 27448
27530: POP
27531: POP
// ComMoveXY ( nearUnit , omicronBlockerPoints [ index ] [ 1 ] , omicronBlockerPoints [ index ] [ 2 ] ) ;
27532: LD_VAR 0 6
27536: PPUSH
27537: LD_EXP 48
27541: PUSH
27542: LD_VAR 0 7
27546: ARRAY
27547: PUSH
27548: LD_INT 1
27550: ARRAY
27551: PPUSH
27552: LD_EXP 48
27556: PUSH
27557: LD_VAR 0 7
27561: ARRAY
27562: PUSH
27563: LD_INT 2
27565: ARRAY
27566: PPUSH
27567: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27571: LD_ADDR_VAR 0 3
27575: PUSH
27576: LD_INT 1
27578: PPUSH
27579: LD_INT 2
27581: PPUSH
27582: CALL_OW 12
27586: ST_TO_ADDR
// if not dialog_stop then
27587: LD_EXP 11
27591: NOT
27592: IFFALSE 27665
// begin dialog_stop = true ;
27594: LD_ADDR_EXP 11
27598: PUSH
27599: LD_INT 1
27601: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27602: LD_VAR 0 3
27606: PUSH
27607: LD_INT 1
27609: EQUAL
27610: PUSH
27611: LD_EXP 50
27615: PPUSH
27616: CALL_OW 302
27620: NOT
27621: OR
27622: IFFALSE 27638
// SayRadio ( Kurin , D11-Kur-1 ) else
27624: LD_EXP 61
27628: PPUSH
27629: LD_STRING D11-Kur-1
27631: PPUSH
27632: CALL_OW 94
27636: GO 27650
// Say ( Gnyevko , D11-Gny-1 ) ;
27638: LD_EXP 50
27642: PPUSH
27643: LD_STRING D11-Gny-1
27645: PPUSH
27646: CALL_OW 88
// wait ( 0 0$5 ) ;
27650: LD_INT 175
27652: PPUSH
27653: CALL_OW 67
// dialog_stop = false ;
27657: LD_ADDR_EXP 11
27661: PUSH
27662: LD_INT 0
27664: ST_TO_ADDR
// end ; end ;
27665: GO 27240
27667: POP
27668: POP
// end ;
27669: PPOPN 7
27671: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets ;
27672: LD_INT 290
27674: PPUSH
27675: CALL_OW 301
27679: PUSH
27680: LD_INT 22
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 21
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PPUSH
27704: CALL_OW 69
27708: PUSH
27709: LD_INT 5
27711: LESS
27712: AND
27713: IFFALSE 30323
27715: GO 27717
27717: DISABLE
27718: LD_INT 0
27720: PPUSH
27721: PPUSH
27722: PPUSH
27723: PPUSH
27724: PPUSH
27725: PPUSH
27726: PPUSH
27727: PPUSH
// begin omicronSurrender = true ;
27728: LD_ADDR_EXP 23
27732: PUSH
27733: LD_INT 1
27735: ST_TO_ADDR
// canExitBattlefield = true ;
27736: LD_ADDR_EXP 24
27740: PUSH
27741: LD_INT 1
27743: ST_TO_ADDR
// enableOmicronAI = false ;
27744: LD_ADDR_EXP 29
27748: PUSH
27749: LD_INT 0
27751: ST_TO_ADDR
// endCutscene = true ;
27752: LD_ADDR_EXP 31
27756: PUSH
27757: LD_INT 1
27759: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27760: LD_INT 1
27762: PPUSH
27763: LD_INT 3
27765: PPUSH
27766: LD_INT 1
27768: PPUSH
27769: LD_INT 0
27771: PPUSH
27772: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27776: LD_INT 2
27778: PPUSH
27779: LD_INT 3
27781: PPUSH
27782: LD_INT 1
27784: PPUSH
27785: LD_INT 1
27787: PPUSH
27788: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
27792: LD_EXP 49
27796: PPUSH
27797: CALL_OW 87
// uc_side = 1 ;
27801: LD_ADDR_OWVAR 20
27805: PUSH
27806: LD_INT 1
27808: ST_TO_ADDR
// uc_nation = 1 ;
27809: LD_ADDR_OWVAR 21
27813: PUSH
27814: LD_INT 1
27816: ST_TO_ADDR
// hc_name :=  ;
27817: LD_ADDR_OWVAR 26
27821: PUSH
27822: LD_STRING 
27824: ST_TO_ADDR
// hc_gallery =  ;
27825: LD_ADDR_OWVAR 33
27829: PUSH
27830: LD_STRING 
27832: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27833: LD_INT 1
27835: PPUSH
27836: LD_INT 1
27838: PPUSH
27839: CALL_OW 381
// tmpUs = CreateHuman ;
27843: LD_ADDR_VAR 0 2
27847: PUSH
27848: CALL_OW 44
27852: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27853: LD_INT 22
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PPUSH
27863: CALL_OW 69
27867: PPUSH
27868: CALL_OW 141
// InGameOn ;
27872: CALL_OW 8
// DialogueOn ;
27876: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
27880: LD_INT 26
27882: PPUSH
27883: LD_INT 33
27885: PPUSH
27886: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
27890: LD_VAR 0 2
27894: PPUSH
27895: LD_STRING D8-Sol1-1
27897: PPUSH
27898: CALL_OW 94
// if IsOk ( Kovalyuk ) then
27902: LD_EXP 52
27906: PPUSH
27907: CALL_OW 302
27911: IFFALSE 27925
// Say ( Kovalyuk , D8-Kov-1 ) ;
27913: LD_EXP 52
27917: PPUSH
27918: LD_STRING D8-Kov-1
27920: PPUSH
27921: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_INT 22
27932: PUSH
27933: LD_INT 3
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 21
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 26
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: PPUSH
27965: CALL_OW 69
27969: PPUSH
27970: LD_STRING D8-RSol1-1
27972: PPUSH
27973: LD_STRING 
27975: PPUSH
27976: LD_INT 0
27978: PPUSH
27979: LD_INT 0
27981: PPUSH
27982: CALL 6975 0 5
27986: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
27987: LD_EXP 50
27991: PPUSH
27992: CALL_OW 302
27996: IFFALSE 28010
// Say ( Gnyevko , D8-Gny-1 ) ;
27998: LD_EXP 50
28002: PPUSH
28003: LD_STRING D8-Gny-1
28005: PPUSH
28006: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
28010: LD_INT 22
28012: PUSH
28013: LD_INT 3
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 21
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 26
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: PPUSH
28045: CALL_OW 69
28049: PUSH
28050: LD_VAR 0 3
28054: DIFF
28055: PPUSH
28056: LD_STRING D8-RSol2-1
28058: PPUSH
28059: LD_STRING 
28061: PPUSH
28062: LD_INT 0
28064: PPUSH
28065: LD_INT 0
28067: PPUSH
28068: CALL 6975 0 5
// DialogueOff ;
28072: CALL_OW 7
// PrepareArabian ;
28076: CALL 6497 0 0
// CenterNowOnXY ( 234 , 122 ) ;
28080: LD_INT 234
28082: PPUSH
28083: LD_INT 122
28085: PPUSH
28086: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
28090: LD_EXP 87
28094: PPUSH
28095: LD_INT 221
28097: PPUSH
28098: LD_INT 110
28100: PPUSH
28101: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28105: LD_EXP 88
28109: PPUSH
28110: LD_INT 21
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PPUSH
28120: CALL_OW 72
28124: PPUSH
28125: LD_INT 221
28127: PPUSH
28128: LD_INT 110
28130: PPUSH
28131: CALL_OW 114
// wait ( 0 0$7 ) ;
28135: LD_INT 245
28137: PPUSH
28138: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
28142: LD_EXP 88
28146: PPUSH
28147: LD_INT 221
28149: PPUSH
28150: LD_INT 110
28152: PPUSH
28153: CALL_OW 174
// wait ( 0 0$8 ) ;
28157: LD_INT 280
28159: PPUSH
28160: CALL_OW 67
// music_nat = nation_arabian ;
28164: LD_ADDR_OWVAR 71
28168: PUSH
28169: LD_INT 2
28171: ST_TO_ADDR
// music_class = music_combat ;
28172: LD_ADDR_OWVAR 72
28176: PUSH
28177: LD_INT 1
28179: ST_TO_ADDR
// game_speed = 4 ;
28180: LD_ADDR_OWVAR 65
28184: PUSH
28185: LD_INT 4
28187: ST_TO_ADDR
// DialogueOn ;
28188: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
28192: LD_EXP 82
28196: PPUSH
28197: LD_STRING D9-Gri-1
28199: PPUSH
28200: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
28204: LD_EXP 61
28208: PPUSH
28209: LD_STRING D9-Kur-1
28211: PPUSH
28212: CALL_OW 94
// DialogueOff ;
28216: CALL_OW 7
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
28220: LD_EXP 78
28224: PPUSH
28225: LD_INT 25
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PPUSH
28235: CALL_OW 72
28239: PPUSH
28240: LD_INT 158
28242: PPUSH
28243: LD_INT 105
28245: PPUSH
28246: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
28250: LD_EXP 78
28254: PPUSH
28255: LD_INT 25
28257: PUSH
28258: LD_INT 4
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PPUSH
28265: CALL_OW 72
28269: PPUSH
28270: LD_INT 158
28272: PPUSH
28273: LD_INT 105
28275: PPUSH
28276: CALL_OW 111
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28280: LD_EXP 78
28284: PPUSH
28285: LD_INT 25
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 72
28299: PPUSH
28300: LD_EXP 60
28304: PPUSH
28305: CALL_OW 250
28309: PPUSH
28310: LD_EXP 60
28314: PPUSH
28315: CALL_OW 251
28319: PPUSH
28320: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28324: LD_EXP 78
28328: PPUSH
28329: LD_INT 25
28331: PUSH
28332: LD_INT 4
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 72
28343: PPUSH
28344: LD_EXP 60
28348: PPUSH
28349: CALL_OW 250
28353: PPUSH
28354: LD_EXP 60
28358: PPUSH
28359: CALL_OW 251
28363: PPUSH
28364: CALL_OW 171
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
28368: LD_EXP 74
28372: PPUSH
28373: LD_INT 158
28375: PPUSH
28376: LD_INT 105
28378: PPUSH
28379: CALL_OW 111
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28383: LD_EXP 74
28387: PPUSH
28388: LD_EXP 60
28392: PPUSH
28393: CALL_OW 250
28397: PPUSH
28398: LD_EXP 60
28402: PPUSH
28403: CALL_OW 251
28407: PPUSH
28408: CALL_OW 171
// wait ( 0 0$2.5 ) ;
28412: LD_INT 88
28414: PPUSH
28415: CALL_OW 67
// DialogueOn ;
28419: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
28423: LD_EXP 82
28427: PPUSH
28428: LD_STRING D9-Gri-2
28430: PPUSH
28431: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
28435: LD_EXP 61
28439: PPUSH
28440: LD_STRING D9-Kur-2
28442: PPUSH
28443: CALL_OW 94
// DialogueOff ;
28447: CALL_OW 7
// repeat wait ( 1 ) ;
28451: LD_INT 1
28453: PPUSH
28454: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
28458: LD_EXP 82
28462: PPUSH
28463: CALL_OW 256
28467: PUSH
28468: LD_INT 1000
28470: LESS
28471: IFFALSE 28451
// DialogueOn ;
28473: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
28477: LD_EXP 82
28481: PPUSH
28482: LD_STRING D9-Gri-3
28484: PPUSH
28485: CALL_OW 94
// DialogueOff ;
28489: CALL_OW 7
// KillUnit ( Grishko ) ;
28493: LD_EXP 82
28497: PPUSH
28498: CALL_OW 66
// wait ( 0 0$12 ) ;
28502: LD_INT 420
28504: PPUSH
28505: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
28509: LD_EXP 61
28513: PPUSH
28514: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
28518: LD_EXP 61
28522: PPUSH
28523: LD_STRING D9-Kur-3
28525: PPUSH
28526: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28530: LD_INT 176
28532: PPUSH
28533: LD_INT 110
28535: PPUSH
28536: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28540: LD_EXP 88
28544: PPUSH
28545: LD_INT 21
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PPUSH
28555: CALL_OW 72
28559: PPUSH
28560: LD_INT 221
28562: PPUSH
28563: LD_INT 110
28565: PPUSH
28566: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28570: LD_EXP 87
28574: PPUSH
28575: LD_INT 161
28577: PPUSH
28578: LD_INT 109
28580: PPUSH
28581: CALL_OW 114
// wait ( 0 0$7 ) ;
28585: LD_INT 245
28587: PPUSH
28588: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28592: LD_EXP 88
28596: PPUSH
28597: LD_INT 161
28599: PPUSH
28600: LD_INT 109
28602: PPUSH
28603: CALL_OW 114
// wait ( 0 0$11 ) ;
28607: LD_INT 385
28609: PPUSH
28610: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28614: LD_EXP 61
28618: PPUSH
28619: LD_EXP 67
28623: PPUSH
28624: CALL_OW 120
// DialogueOn ;
28628: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28632: LD_EXP 61
28636: PPUSH
28637: LD_STRING D9a-Kur-1
28639: PPUSH
28640: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28644: LD_EXP 49
28648: PPUSH
28649: LD_STRING D9a-Bur-1
28651: PPUSH
28652: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28656: LD_EXP 61
28660: PPUSH
28661: LD_STRING D9a-Kur-2
28663: PPUSH
28664: CALL_OW 94
// DialogueOff ;
28668: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28672: LD_EXP 79
28676: PPUSH
28677: CALL_OW 122
// wait ( 0 0$1 ) ;
28681: LD_INT 35
28683: PPUSH
28684: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28688: LD_EXP 79
28692: PPUSH
28693: LD_EXP 60
28697: PPUSH
28698: CALL_OW 250
28702: PPUSH
28703: LD_EXP 60
28707: PPUSH
28708: CALL_OW 251
28712: PPUSH
28713: CALL_OW 111
// immortalSurvivors = true ;
28717: LD_ADDR_EXP 25
28721: PUSH
28722: LD_INT 1
28724: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28725: LD_ADDR_VAR 0 2
28729: PUSH
28730: LD_INT 22
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 21
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 50
28752: PUSH
28753: EMPTY
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: PPUSH
28761: CALL_OW 69
28765: PUSH
28766: FOR_IN
28767: IFFALSE 28780
// RemoveUnit ( tmpUS ) ;
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 64
28778: GO 28766
28780: POP
28781: POP
// repeat wait ( 0 0$1 ) ;
28782: LD_INT 35
28784: PPUSH
28785: CALL_OW 67
// until IsDead ( Kurin ) ;
28789: LD_EXP 61
28793: PPUSH
28794: CALL_OW 301
28798: IFFALSE 28782
// wait ( 0 0$1 ) ;
28800: LD_INT 35
28802: PPUSH
28803: CALL_OW 67
// nearTurrets = [ ] ;
28807: LD_ADDR_VAR 0 8
28811: PUSH
28812: EMPTY
28813: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
28814: LD_ADDR_VAR 0 7
28818: PUSH
28819: LD_INT 22
28821: PUSH
28822: LD_INT 6
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 30
28831: PUSH
28832: LD_INT 32
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 50
28841: PUSH
28842: EMPTY
28843: LIST
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: PPUSH
28850: CALL_OW 69
28854: ST_TO_ADDR
// for i = 1 to 2 do
28855: LD_ADDR_VAR 0 1
28859: PUSH
28860: DOUBLE
28861: LD_INT 1
28863: DEC
28864: ST_TO_ADDR
28865: LD_INT 2
28867: PUSH
28868: FOR_TO
28869: IFFALSE 28978
// begin nearTurrets = nearTurrets ^ NearestUnitToUnit ( turrets , beriaDepot ) ;
28871: LD_ADDR_VAR 0 8
28875: PUSH
28876: LD_VAR 0 8
28880: PUSH
28881: LD_VAR 0 7
28885: PPUSH
28886: LD_EXP 60
28890: PPUSH
28891: CALL_OW 74
28895: ADD
28896: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
28897: LD_ADDR_VAR 0 7
28901: PUSH
28902: LD_VAR 0 7
28906: PUSH
28907: LD_VAR 0 8
28911: DIFF
28912: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
28913: LD_ADDR_VAR 0 3
28917: PUSH
28918: LD_VAR 0 8
28922: PUSH
28923: LD_VAR 0 1
28927: ARRAY
28928: PPUSH
28929: CALL_OW 313
28933: PUSH
28934: LD_INT 1
28936: ARRAY
28937: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28938: LD_VAR 0 3
28942: PPUSH
28943: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28947: LD_VAR 0 3
28951: PPUSH
28952: LD_EXP 60
28956: PPUSH
28957: CALL_OW 250
28961: PPUSH
28962: LD_EXP 60
28966: PPUSH
28967: CALL_OW 251
28971: PPUSH
28972: CALL_OW 171
// end ;
28976: GO 28868
28978: POP
28979: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
28980: LD_ADDR_VAR 0 3
28984: PUSH
28985: LD_INT 22
28987: PUSH
28988: LD_INT 6
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 21
28997: PUSH
28998: LD_INT 3
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: LD_INT 30
29010: PUSH
29011: LD_INT 6
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 30
29020: PUSH
29021: LD_INT 7
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: PPUSH
29038: CALL_OW 69
29042: PUSH
29043: LD_INT 1
29045: ARRAY
29046: PPUSH
29047: CALL_OW 313
29051: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
29052: LD_VAR 0 3
29056: PPUSH
29057: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29061: LD_VAR 0 3
29065: PPUSH
29066: LD_EXP 60
29070: PPUSH
29071: CALL_OW 250
29075: PPUSH
29076: LD_EXP 60
29080: PPUSH
29081: CALL_OW 251
29085: PPUSH
29086: CALL_OW 171
// wait ( 0 0$14 ) ;
29090: LD_INT 490
29092: PPUSH
29093: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
29097: LD_INT 26
29099: PPUSH
29100: LD_INT 22
29102: PUSH
29103: LD_INT 6
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 21
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PPUSH
29124: CALL_OW 70
29128: PPUSH
29129: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
29133: LD_ADDR_VAR 0 1
29137: PUSH
29138: LD_INT 26
29140: PPUSH
29141: LD_INT 22
29143: PUSH
29144: LD_INT 6
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 21
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PPUSH
29165: CALL_OW 70
29169: PUSH
29170: FOR_IN
29171: IFFALSE 29282
// begin if GetLives ( i ) < 15 then
29173: LD_VAR 0 1
29177: PPUSH
29178: CALL_OW 256
29182: PUSH
29183: LD_INT 15
29185: LESS
29186: IFFALSE 29251
// begin tmpRu = UnitsInside ( i ) ;
29188: LD_ADDR_VAR 0 3
29192: PUSH
29193: LD_VAR 0 1
29197: PPUSH
29198: CALL_OW 313
29202: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29203: LD_VAR 0 3
29207: PUSH
29208: LD_INT 1
29210: ARRAY
29211: PPUSH
29212: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29216: LD_VAR 0 3
29220: PUSH
29221: LD_INT 1
29223: ARRAY
29224: PPUSH
29225: LD_EXP 60
29229: PPUSH
29230: CALL_OW 250
29234: PPUSH
29235: LD_EXP 60
29239: PPUSH
29240: CALL_OW 251
29244: PPUSH
29245: CALL_OW 171
// end else
29249: GO 29280
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29251: LD_VAR 0 1
29255: PPUSH
29256: LD_EXP 60
29260: PPUSH
29261: CALL_OW 250
29265: PPUSH
29266: LD_EXP 60
29270: PPUSH
29271: CALL_OW 251
29275: PPUSH
29276: CALL_OW 171
// end ;
29280: GO 29170
29282: POP
29283: POP
// wait ( 0 0$1 ) ;
29284: LD_INT 35
29286: PPUSH
29287: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29291: LD_INT 26
29293: PPUSH
29294: LD_INT 22
29296: PUSH
29297: LD_INT 6
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 70
29322: PPUSH
29323: LD_EXP 60
29327: PPUSH
29328: CALL_OW 250
29332: PPUSH
29333: LD_EXP 60
29337: PPUSH
29338: CALL_OW 251
29342: PPUSH
29343: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
29347: LD_EXP 74
29351: PPUSH
29352: CALL_OW 313
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: PPUSH
29361: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
29365: LD_ADDR_VAR 0 1
29369: PUSH
29370: LD_INT 26
29372: PPUSH
29373: LD_INT 22
29375: PUSH
29376: LD_INT 3
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 21
29385: PUSH
29386: LD_INT 2
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PPUSH
29397: CALL_OW 70
29401: PUSH
29402: FOR_IN
29403: IFFALSE 29514
// begin if GetLives ( i ) < 15 then
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 256
29414: PUSH
29415: LD_INT 15
29417: LESS
29418: IFFALSE 29483
// begin tmpRu = UnitsInside ( i ) ;
29420: LD_ADDR_VAR 0 3
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 313
29434: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
29435: LD_VAR 0 3
29439: PUSH
29440: LD_INT 1
29442: ARRAY
29443: PPUSH
29444: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29448: LD_VAR 0 3
29452: PUSH
29453: LD_INT 1
29455: ARRAY
29456: PPUSH
29457: LD_EXP 60
29461: PPUSH
29462: CALL_OW 250
29466: PPUSH
29467: LD_EXP 60
29471: PPUSH
29472: CALL_OW 251
29476: PPUSH
29477: CALL_OW 171
// end else
29481: GO 29512
// AddComMoveXY ( i , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
29483: LD_VAR 0 1
29487: PPUSH
29488: LD_EXP 60
29492: PPUSH
29493: CALL_OW 250
29497: PPUSH
29498: LD_EXP 60
29502: PPUSH
29503: CALL_OW 251
29507: PPUSH
29508: CALL_OW 171
// end ;
29512: GO 29402
29514: POP
29515: POP
// wait ( 0 0$1 ) ;
29516: LD_INT 35
29518: PPUSH
29519: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29523: LD_INT 22
29525: PUSH
29526: LD_INT 3
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 21
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PPUSH
29547: CALL_OW 69
29551: PPUSH
29552: LD_EXP 62
29556: PPUSH
29557: CALL_OW 250
29561: PPUSH
29562: LD_EXP 62
29566: PPUSH
29567: CALL_OW 251
29571: PPUSH
29572: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29576: LD_INT 22
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 21
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 69
29604: PPUSH
29605: LD_EXP 62
29609: PPUSH
29610: CALL_OW 250
29614: PPUSH
29615: LD_EXP 62
29619: PPUSH
29620: CALL_OW 251
29624: PPUSH
29625: CALL_OW 111
// ComMoveXY ( IsInUnit ( Burlak ) , GetX ( Popov ) , GetY ( Popov ) ) ;
29629: LD_EXP 49
29633: PPUSH
29634: CALL_OW 310
29638: PPUSH
29639: LD_EXP 62
29643: PPUSH
29644: CALL_OW 250
29648: PPUSH
29649: LD_EXP 62
29653: PPUSH
29654: CALL_OW 251
29658: PPUSH
29659: CALL_OW 111
// if IsInUnit ( Burlak ) then
29663: LD_EXP 49
29667: PPUSH
29668: CALL_OW 310
29672: IFFALSE 29690
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) else
29674: LD_EXP 49
29678: PPUSH
29679: CALL_OW 310
29683: PPUSH
29684: CALL_OW 87
29688: GO 29699
// CenterNowOnUnits ( Burlak ) ;
29690: LD_EXP 49
29694: PPUSH
29695: CALL_OW 87
// wait ( 0 0$1 ) ;
29699: LD_INT 35
29701: PPUSH
29702: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 or ( IsInUnit ( Burlak ) < 8 and IsInUnit ( Burlak ) ) ;
29706: LD_EXP 49
29710: PPUSH
29711: LD_EXP 62
29715: PPUSH
29716: CALL_OW 296
29720: PUSH
29721: LD_INT 8
29723: LESS
29724: PUSH
29725: LD_EXP 49
29729: PPUSH
29730: CALL_OW 310
29734: PUSH
29735: LD_INT 8
29737: LESS
29738: PUSH
29739: LD_EXP 49
29743: PPUSH
29744: CALL_OW 310
29748: AND
29749: OR
29750: IFFALSE 29576
// if IsInUnit ( Burlak ) then
29752: LD_EXP 49
29756: PPUSH
29757: CALL_OW 310
29761: IFFALSE 29779
// begin ComExitVehicle ( Burlak ) ;
29763: LD_EXP 49
29767: PPUSH
29768: CALL_OW 121
// wait ( 0 0$1 ) ;
29772: LD_INT 35
29774: PPUSH
29775: CALL_OW 67
// end ; CenterNowOnUnits ( [ Burlak , Popov ] ) ;
29779: LD_EXP 49
29783: PUSH
29784: LD_EXP 62
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PPUSH
29793: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
29797: LD_EXP 49
29801: PPUSH
29802: LD_EXP 62
29806: PPUSH
29807: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
29811: LD_EXP 62
29815: PPUSH
29816: LD_EXP 49
29820: PPUSH
29821: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
29825: LD_EXP 49
29829: PPUSH
29830: LD_STRING D10a-Bur-1
29832: PPUSH
29833: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
29837: LD_EXP 62
29841: PPUSH
29842: LD_STRING D10a-Pop-1
29844: PPUSH
29845: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
29849: LD_EXP 49
29853: PPUSH
29854: LD_STRING D10a-Bur-2
29856: PPUSH
29857: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
29861: LD_EXP 62
29865: PPUSH
29866: LD_STRING D10a-Pop-2
29868: PPUSH
29869: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
29873: LD_EXP 49
29877: PPUSH
29878: LD_STRING D10a-Bur-3
29880: PPUSH
29881: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
29885: LD_EXP 62
29889: PPUSH
29890: LD_STRING D10a-Pop-3
29892: PPUSH
29893: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
29897: LD_EXP 49
29901: PPUSH
29902: LD_STRING D10a-Bur-4
29904: PPUSH
29905: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
29909: LD_EXP 62
29913: PPUSH
29914: LD_STRING D10a-Pop-4
29916: PPUSH
29917: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
29921: LD_EXP 49
29925: PPUSH
29926: LD_STRING D10a-Bur-5
29928: PPUSH
29929: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
29933: LD_EXP 62
29937: PPUSH
29938: LD_STRING D10a-Pop-5
29940: PPUSH
29941: CALL_OW 88
// survivorsArabianAttack = [ ] ;
29945: LD_ADDR_EXP 79
29949: PUSH
29950: EMPTY
29951: ST_TO_ADDR
// survivorsArabianAttack = FilterAllUnits ( [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
29952: LD_ADDR_EXP 79
29956: PUSH
29957: LD_INT 22
29959: PUSH
29960: LD_INT 6
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 50
29969: PUSH
29970: EMPTY
29971: LIST
29972: PUSH
29973: LD_INT 21
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: LIST
29987: PPUSH
29988: CALL_OW 69
29992: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , 83 , 157 ) ;
29993: LD_INT 22
29995: PUSH
29996: LD_INT 3
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 21
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 21
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PPUSH
30035: CALL_OW 69
30039: PPUSH
30040: LD_INT 83
30042: PPUSH
30043: LD_INT 157
30045: PPUSH
30046: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
30050: LD_EXP 79
30054: PPUSH
30055: LD_INT 83
30057: PPUSH
30058: LD_INT 157
30060: PPUSH
30061: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) , 83 , 157 ) ;
30065: LD_INT 22
30067: PUSH
30068: LD_INT 6
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 21
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PPUSH
30089: CALL_OW 69
30093: PPUSH
30094: LD_INT 83
30096: PPUSH
30097: LD_INT 157
30099: PPUSH
30100: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
30104: LD_EXP 49
30108: PPUSH
30109: CALL_OW 87
// wait ( 0 0$1 ) ;
30113: LD_INT 35
30115: PPUSH
30116: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
30120: LD_EXP 49
30124: PPUSH
30125: LD_EXP 60
30129: PPUSH
30130: CALL_OW 296
30134: PUSH
30135: LD_INT 23
30137: GREATER
30138: IFFALSE 30065
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
30140: LD_INT 113
30142: PPUSH
30143: LD_INT 96
30145: PPUSH
30146: LD_INT 3
30148: PPUSH
30149: LD_INT 12
30151: NEG
30152: PPUSH
30153: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
30157: LD_INT 113
30159: PPUSH
30160: LD_INT 96
30162: PPUSH
30163: CALL_OW 86
// canDestroyBeriaBase = true ;
30167: LD_ADDR_EXP 28
30171: PUSH
30172: LD_INT 1
30174: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
30175: LD_ADDR_VAR 0 5
30179: PUSH
30180: LD_INT 25
30182: PPUSH
30183: LD_INT 22
30185: PUSH
30186: LD_INT 3
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 21
30195: PUSH
30196: LD_INT 3
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PPUSH
30207: CALL_OW 70
30211: ST_TO_ADDR
// for i = 1 to beriaBuildings do
30212: LD_ADDR_VAR 0 1
30216: PUSH
30217: DOUBLE
30218: LD_INT 1
30220: DEC
30221: ST_TO_ADDR
30222: LD_VAR 0 5
30226: PUSH
30227: FOR_TO
30228: IFFALSE 30310
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
30230: LD_ADDR_VAR 0 6
30234: PUSH
30235: LD_VAR 0 5
30239: PPUSH
30240: LD_INT 22
30242: PUSH
30243: LD_INT 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PPUSH
30250: CALL_OW 69
30254: PUSH
30255: LD_INT 1
30257: ARRAY
30258: PPUSH
30259: CALL_OW 74
30263: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
30264: LD_ADDR_VAR 0 5
30268: PUSH
30269: LD_VAR 0 5
30273: PUSH
30274: LD_VAR 0 6
30278: DIFF
30279: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
30280: LD_EXP 87
30284: PPUSH
30285: LD_VAR 0 6
30289: PPUSH
30290: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
30294: LD_EXP 88
30298: PPUSH
30299: LD_VAR 0 6
30303: PPUSH
30304: CALL_OW 175
// end ;
30308: GO 30227
30310: POP
30311: POP
// wait ( 0 0$35 ) ;
30312: LD_INT 1225
30314: PPUSH
30315: CALL_OW 67
// FinishMission ;
30319: CALL 20185 0 0
// end ;
30323: PPOPN 8
30325: END
// every 1 trigger immortalSurvivors do var unit ;
30326: LD_EXP 25
30330: IFFALSE 30368
30332: GO 30334
30334: DISABLE
30335: LD_INT 0
30337: PPUSH
// begin enable ;
30338: ENABLE
// for unit in survivorsArabianAttack do
30339: LD_ADDR_VAR 0 1
30343: PUSH
30344: LD_EXP 79
30348: PUSH
30349: FOR_IN
30350: IFFALSE 30366
// SetLives ( unit , 1000 ) ;
30352: LD_VAR 0 1
30356: PPUSH
30357: LD_INT 1000
30359: PPUSH
30360: CALL_OW 234
30364: GO 30349
30366: POP
30367: POP
// end ; end_of_file
30368: PPOPN 1
30370: END
// every 0 0$30 do
30371: GO 30373
30373: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
30374: LD_INT 3
30376: PPUSH
30377: LD_INT 5
30379: PPUSH
30380: CALL_OW 12
30384: PPUSH
30385: LD_INT 76
30387: PPUSH
30388: LD_INT 111
30390: PPUSH
30391: LD_INT 5
30393: PPUSH
30394: LD_INT 1
30396: PPUSH
30397: CALL_OW 56
30401: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
30402: LD_EXP 5
30406: IFFALSE 30478
30408: GO 30410
30410: DISABLE
30411: LD_INT 0
30413: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
30414: LD_INT 50
30416: PPUSH
30417: LD_INT 4200
30419: PPUSH
30420: CALL_OW 12
30424: PPUSH
30425: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
30429: LD_VAR 0 1
30433: PUSH
30434: LD_INT 175
30436: MUL
30437: PPUSH
30438: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
30442: LD_ADDR_VAR 0 1
30446: PUSH
30447: LD_VAR 0 1
30451: PUSH
30452: LD_INT 1
30454: PLUS
30455: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
30456: LD_INT 3
30458: PPUSH
30459: LD_INT 5
30461: PPUSH
30462: CALL_OW 12
30466: PPUSH
30467: LD_INT 6
30469: PPUSH
30470: LD_INT 1
30472: PPUSH
30473: CALL_OW 55
// enable ;
30477: ENABLE
// end ; end_of_file
30478: PPOPN 1
30480: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
30481: LD_EXP 89
30485: IFFALSE 30648
30487: GO 30489
30489: DISABLE
// begin enable ;
30490: ENABLE
// case counterIndex of 1 :
30491: LD_EXP 90
30495: PUSH
30496: LD_INT 1
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30521
30504: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
30505: LD_ADDR_EXP 40
30509: PUSH
30510: LD_EXP 40
30514: PUSH
30515: LD_INT 35
30517: MINUS
30518: ST_TO_ADDR
30519: GO 30648
30521: LD_INT 2
30523: DOUBLE
30524: EQUAL
30525: IFTRUE 30529
30527: GO 30563
30529: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
30530: LD_ADDR_OWVAR 47
30534: PUSH
30535: LD_STRING #Ru03-1
30537: PUSH
30538: LD_EXP 15
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
30547: LD_ADDR_EXP 15
30551: PUSH
30552: LD_EXP 15
30556: PUSH
30557: LD_INT 35
30559: MINUS
30560: ST_TO_ADDR
// end ; 3 :
30561: GO 30648
30563: LD_INT 3
30565: DOUBLE
30566: EQUAL
30567: IFTRUE 30571
30569: GO 30605
30571: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
30572: LD_ADDR_OWVAR 47
30576: PUSH
30577: LD_STRING #Ru03-2
30579: PUSH
30580: LD_EXP 15
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
30589: LD_ADDR_EXP 15
30593: PUSH
30594: LD_EXP 15
30598: PUSH
30599: LD_INT 35
30601: MINUS
30602: ST_TO_ADDR
// end ; 4 :
30603: GO 30648
30605: LD_INT 4
30607: DOUBLE
30608: EQUAL
30609: IFTRUE 30613
30611: GO 30647
30613: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
30614: LD_ADDR_OWVAR 47
30618: PUSH
30619: LD_STRING #Ru03-3
30621: PUSH
30622: LD_EXP 14
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
30631: LD_ADDR_EXP 14
30635: PUSH
30636: LD_EXP 14
30640: PUSH
30641: LD_INT 35
30643: MINUS
30644: ST_TO_ADDR
// end ; end ;
30645: GO 30648
30647: POP
// end ; end_of_file
30648: END
// every 7 7$0 do
30649: GO 30651
30651: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
30652: LD_INT 3
30654: PPUSH
30655: LD_INT 1
30657: PPUSH
30658: LD_INT 0
30660: PPUSH
30661: LD_INT 7
30663: PPUSH
30664: CALL 5880 0 4
30668: END
// every 12 12$0 do
30669: GO 30671
30671: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
30672: LD_INT 2
30674: PPUSH
30675: LD_INT 2
30677: PPUSH
30678: LD_INT 1
30680: PPUSH
30681: LD_INT 9
30683: PUSH
30684: LD_INT 8
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: PPUSH
30694: LD_INT 2
30696: PPUSH
30697: CALL_OW 12
30701: ARRAY
30702: PPUSH
30703: CALL 5880 0 4
30707: END
// every 20 20$0 do
30708: GO 30710
30710: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
30711: LD_INT 4
30713: PPUSH
30714: LD_INT 2
30716: PPUSH
30717: LD_INT 0
30719: PPUSH
30720: LD_INT 7
30722: PPUSH
30723: CALL 5880 0 4
30727: END
// every 23 23$0 do
30728: GO 30730
30730: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
30731: LD_INT 3
30733: PPUSH
30734: LD_INT 1
30736: PPUSH
30737: LD_INT 2
30739: PPUSH
30740: LD_INT 9
30742: PUSH
30743: LD_INT 8
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 1
30752: PPUSH
30753: LD_INT 2
30755: PPUSH
30756: CALL_OW 12
30760: ARRAY
30761: PPUSH
30762: CALL 5880 0 4
30766: END
// export function Nef_PrepareNature ; var i , un ; begin
30767: LD_INT 0
30769: PPUSH
30770: PPUSH
30771: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
30772: LD_ADDR_VAR 0 2
30776: PUSH
30777: DOUBLE
30778: LD_INT 1
30780: DEC
30781: ST_TO_ADDR
30782: LD_EXP 32
30786: PUSH
30787: LD_INT 1
30789: ARRAY
30790: PUSH
30791: FOR_TO
30792: IFFALSE 30902
// begin uc_side = 0 ;
30794: LD_ADDR_OWVAR 20
30798: PUSH
30799: LD_INT 0
30801: ST_TO_ADDR
// uc_nation = nation_nature ;
30802: LD_ADDR_OWVAR 21
30806: PUSH
30807: LD_INT 0
30809: ST_TO_ADDR
// hc_class = class_apeman ;
30810: LD_ADDR_OWVAR 28
30814: PUSH
30815: LD_INT 12
30817: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30818: LD_ADDR_OWVAR 31
30822: PUSH
30823: LD_EXP 33
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PUSH
30832: LD_EXP 33
30836: PUSH
30837: LD_INT 2
30839: ARRAY
30840: PUSH
30841: LD_EXP 33
30845: PUSH
30846: LD_INT 3
30848: ARRAY
30849: PUSH
30850: LD_EXP 33
30854: PUSH
30855: LD_INT 4
30857: ARRAY
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30865: LD_ADDR_OWVAR 35
30869: PUSH
30870: LD_EXP 34
30874: ST_TO_ADDR
// un = CreateHuman ;
30875: LD_ADDR_VAR 0 3
30879: PUSH
30880: CALL_OW 44
30884: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30885: LD_VAR 0 3
30889: PPUSH
30890: LD_INT 27
30892: PPUSH
30893: LD_INT 0
30895: PPUSH
30896: CALL_OW 49
// end ;
30900: GO 30791
30902: POP
30903: POP
// for i := 1 to animalsAmount [ 2 ] do
30904: LD_ADDR_VAR 0 2
30908: PUSH
30909: DOUBLE
30910: LD_INT 1
30912: DEC
30913: ST_TO_ADDR
30914: LD_EXP 32
30918: PUSH
30919: LD_INT 2
30921: ARRAY
30922: PUSH
30923: FOR_TO
30924: IFFALSE 31034
// begin uc_side = 0 ;
30926: LD_ADDR_OWVAR 20
30930: PUSH
30931: LD_INT 0
30933: ST_TO_ADDR
// uc_nation = nation_nature ;
30934: LD_ADDR_OWVAR 21
30938: PUSH
30939: LD_INT 0
30941: ST_TO_ADDR
// hc_class = class_phororhacos ;
30942: LD_ADDR_OWVAR 28
30946: PUSH
30947: LD_INT 18
30949: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30950: LD_ADDR_OWVAR 31
30954: PUSH
30955: LD_EXP 33
30959: PUSH
30960: LD_INT 1
30962: ARRAY
30963: PUSH
30964: LD_EXP 33
30968: PUSH
30969: LD_INT 2
30971: ARRAY
30972: PUSH
30973: LD_EXP 33
30977: PUSH
30978: LD_INT 3
30980: ARRAY
30981: PUSH
30982: LD_EXP 33
30986: PUSH
30987: LD_INT 4
30989: ARRAY
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30997: LD_ADDR_OWVAR 35
31001: PUSH
31002: LD_EXP 34
31006: ST_TO_ADDR
// un = CreateHuman ;
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: CALL_OW 44
31016: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31017: LD_VAR 0 3
31021: PPUSH
31022: LD_INT 27
31024: PPUSH
31025: LD_INT 0
31027: PPUSH
31028: CALL_OW 49
// end ;
31032: GO 30923
31034: POP
31035: POP
// for i := 1 to animalsAmount [ 3 ] do
31036: LD_ADDR_VAR 0 2
31040: PUSH
31041: DOUBLE
31042: LD_INT 1
31044: DEC
31045: ST_TO_ADDR
31046: LD_EXP 32
31050: PUSH
31051: LD_INT 3
31053: ARRAY
31054: PUSH
31055: FOR_TO
31056: IFFALSE 31166
// begin uc_side = 0 ;
31058: LD_ADDR_OWVAR 20
31062: PUSH
31063: LD_INT 0
31065: ST_TO_ADDR
// uc_nation = nation_nature ;
31066: LD_ADDR_OWVAR 21
31070: PUSH
31071: LD_INT 0
31073: ST_TO_ADDR
// hc_class = class_tiger ;
31074: LD_ADDR_OWVAR 28
31078: PUSH
31079: LD_INT 14
31081: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31082: LD_ADDR_OWVAR 31
31086: PUSH
31087: LD_EXP 33
31091: PUSH
31092: LD_INT 1
31094: ARRAY
31095: PUSH
31096: LD_EXP 33
31100: PUSH
31101: LD_INT 2
31103: ARRAY
31104: PUSH
31105: LD_EXP 33
31109: PUSH
31110: LD_INT 3
31112: ARRAY
31113: PUSH
31114: LD_EXP 33
31118: PUSH
31119: LD_INT 4
31121: ARRAY
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31129: LD_ADDR_OWVAR 35
31133: PUSH
31134: LD_EXP 34
31138: ST_TO_ADDR
// un = CreateHuman ;
31139: LD_ADDR_VAR 0 3
31143: PUSH
31144: CALL_OW 44
31148: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31149: LD_VAR 0 3
31153: PPUSH
31154: LD_INT 27
31156: PPUSH
31157: LD_INT 0
31159: PPUSH
31160: CALL_OW 49
// end ;
31164: GO 31055
31166: POP
31167: POP
// for i := 1 to animalsAmount [ 4 ] do
31168: LD_ADDR_VAR 0 2
31172: PUSH
31173: DOUBLE
31174: LD_INT 1
31176: DEC
31177: ST_TO_ADDR
31178: LD_EXP 32
31182: PUSH
31183: LD_INT 4
31185: ARRAY
31186: PUSH
31187: FOR_TO
31188: IFFALSE 31298
// begin uc_side = 0 ;
31190: LD_ADDR_OWVAR 20
31194: PUSH
31195: LD_INT 0
31197: ST_TO_ADDR
// uc_nation = nation_nature ;
31198: LD_ADDR_OWVAR 21
31202: PUSH
31203: LD_INT 0
31205: ST_TO_ADDR
// hc_class = 21 ;
31206: LD_ADDR_OWVAR 28
31210: PUSH
31211: LD_INT 21
31213: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
31214: LD_ADDR_OWVAR 31
31218: PUSH
31219: LD_EXP 33
31223: PUSH
31224: LD_INT 1
31226: ARRAY
31227: PUSH
31228: LD_EXP 33
31232: PUSH
31233: LD_INT 2
31235: ARRAY
31236: PUSH
31237: LD_EXP 33
31241: PUSH
31242: LD_INT 3
31244: ARRAY
31245: PUSH
31246: LD_EXP 33
31250: PUSH
31251: LD_INT 4
31253: ARRAY
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
31261: LD_ADDR_OWVAR 35
31265: PUSH
31266: LD_EXP 34
31270: ST_TO_ADDR
// un = CreateHuman ;
31271: LD_ADDR_VAR 0 3
31275: PUSH
31276: CALL_OW 44
31280: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31281: LD_VAR 0 3
31285: PPUSH
31286: LD_INT 27
31288: PPUSH
31289: LD_INT 0
31291: PPUSH
31292: CALL_OW 49
// end ;
31296: GO 31187
31298: POP
31299: POP
// for i := 1 to animalsAmount [ 5 ] do
31300: LD_ADDR_VAR 0 2
31304: PUSH
31305: DOUBLE
31306: LD_INT 1
31308: DEC
31309: ST_TO_ADDR
31310: LD_EXP 32
31314: PUSH
31315: LD_INT 5
31317: ARRAY
31318: PUSH
31319: FOR_TO
31320: IFFALSE 31381
// begin uc_side = 0 ;
31322: LD_ADDR_OWVAR 20
31326: PUSH
31327: LD_INT 0
31329: ST_TO_ADDR
// uc_nation = nation_nature ;
31330: LD_ADDR_OWVAR 21
31334: PUSH
31335: LD_INT 0
31337: ST_TO_ADDR
// vc_chassis := 31 ;
31338: LD_ADDR_OWVAR 37
31342: PUSH
31343: LD_INT 31
31345: ST_TO_ADDR
// vc_control := control_rider ;
31346: LD_ADDR_OWVAR 38
31350: PUSH
31351: LD_INT 4
31353: ST_TO_ADDR
// un := CreateVehicle ;
31354: LD_ADDR_VAR 0 3
31358: PUSH
31359: CALL_OW 45
31363: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
31364: LD_VAR 0 3
31368: PPUSH
31369: LD_INT 27
31371: PPUSH
31372: LD_INT 0
31374: PPUSH
31375: CALL_OW 49
// end ;
31379: GO 31319
31381: POP
31382: POP
// end ; end_of_file
31383: LD_VAR 0 1
31387: RET
// every 1 trigger scholtzeSaved do
31388: LD_EXP 7
31392: IFFALSE 31404
31394: GO 31396
31396: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
31397: LD_STRING ACH_PROFESSOR
31399: PPUSH
31400: CALL_OW 543
31404: END
// every 1 trigger IsDead ( Sikorski ) do
31405: LD_INT 290
31407: PPUSH
31408: CALL_OW 301
31412: IFFALSE 31424
31414: GO 31416
31416: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
31417: LD_STRING ACH_SIKORSKI
31419: PPUSH
31420: CALL_OW 543
31424: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
31425: LD_EXP 12
31429: NOT
31430: PUSH
31431: LD_EXP 24
31435: NOT
31436: AND
31437: IFFALSE 31449
31439: GO 31441
31441: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
31442: LD_STRING ACH_REINFORCE
31444: PPUSH
31445: CALL_OW 543
31449: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
31450: LD_INT 0
31452: PPUSH
// ar_crane := 88 ;
31453: LD_ADDR_EXP 97
31457: PUSH
31458: LD_INT 88
31460: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31461: LD_ADDR_EXP 92
31465: PUSH
31466: LD_INT 89
31468: ST_TO_ADDR
// us_hack := 99 ;
31469: LD_ADDR_EXP 93
31473: PUSH
31474: LD_INT 99
31476: ST_TO_ADDR
// us_artillery := 97 ;
31477: LD_ADDR_EXP 94
31481: PUSH
31482: LD_INT 97
31484: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31485: LD_ADDR_EXP 95
31489: PUSH
31490: LD_INT 91
31492: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
31493: LD_ADDR_EXP 96
31497: PUSH
31498: LD_INT 92
31500: ST_TO_ADDR
// ru_radar := 98 ;
31501: LD_ADDR_EXP 91
31505: PUSH
31506: LD_INT 98
31508: ST_TO_ADDR
// tech_Artillery := 80 ;
31509: LD_ADDR_EXP 98
31513: PUSH
31514: LD_INT 80
31516: ST_TO_ADDR
// tech_RadMat := 81 ;
31517: LD_ADDR_EXP 99
31521: PUSH
31522: LD_INT 81
31524: ST_TO_ADDR
// tech_BasicTools := 82 ;
31525: LD_ADDR_EXP 100
31529: PUSH
31530: LD_INT 82
31532: ST_TO_ADDR
// tech_Cargo := 83 ;
31533: LD_ADDR_EXP 101
31537: PUSH
31538: LD_INT 83
31540: ST_TO_ADDR
// tech_Track := 84 ;
31541: LD_ADDR_EXP 102
31545: PUSH
31546: LD_INT 84
31548: ST_TO_ADDR
// tech_Crane := 85 ;
31549: LD_ADDR_EXP 103
31553: PUSH
31554: LD_INT 85
31556: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31557: LD_ADDR_EXP 104
31561: PUSH
31562: LD_INT 86
31564: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31565: LD_ADDR_EXP 105
31569: PUSH
31570: LD_INT 87
31572: ST_TO_ADDR
// end ;
31573: LD_VAR 0 1
31577: RET
// every 1 do
31578: GO 31580
31580: DISABLE
// InitGlobalVariables ; end_of_file
31581: CALL 31450 0 0
31585: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31586: LD_INT 0
31588: PPUSH
31589: PPUSH
// if exist_mode then
31590: LD_VAR 0 2
31594: IFFALSE 31619
// unit := CreateCharacter ( prefix & ident ) else
31596: LD_ADDR_VAR 0 5
31600: PUSH
31601: LD_VAR 0 3
31605: PUSH
31606: LD_VAR 0 1
31610: STR
31611: PPUSH
31612: CALL_OW 34
31616: ST_TO_ADDR
31617: GO 31634
// unit := NewCharacter ( ident ) ;
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_VAR 0 1
31628: PPUSH
31629: CALL_OW 25
31633: ST_TO_ADDR
// result := unit ;
31634: LD_ADDR_VAR 0 4
31638: PUSH
31639: LD_VAR 0 5
31643: ST_TO_ADDR
// end ;
31644: LD_VAR 0 4
31648: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31649: LD_INT 0
31651: PPUSH
31652: PPUSH
// if not side or not nation then
31653: LD_VAR 0 1
31657: NOT
31658: PUSH
31659: LD_VAR 0 2
31663: NOT
31664: OR
31665: IFFALSE 31669
// exit ;
31667: GO 32433
// case nation of nation_american :
31669: LD_VAR 0 2
31673: PUSH
31674: LD_INT 1
31676: DOUBLE
31677: EQUAL
31678: IFTRUE 31682
31680: GO 31896
31682: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31683: LD_ADDR_VAR 0 4
31687: PUSH
31688: LD_INT 35
31690: PUSH
31691: LD_INT 45
31693: PUSH
31694: LD_INT 46
31696: PUSH
31697: LD_INT 47
31699: PUSH
31700: LD_INT 82
31702: PUSH
31703: LD_INT 83
31705: PUSH
31706: LD_INT 84
31708: PUSH
31709: LD_INT 85
31711: PUSH
31712: LD_INT 86
31714: PUSH
31715: LD_INT 1
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 6
31723: PUSH
31724: LD_INT 15
31726: PUSH
31727: LD_INT 16
31729: PUSH
31730: LD_INT 7
31732: PUSH
31733: LD_INT 12
31735: PUSH
31736: LD_INT 13
31738: PUSH
31739: LD_INT 10
31741: PUSH
31742: LD_INT 14
31744: PUSH
31745: LD_INT 20
31747: PUSH
31748: LD_INT 21
31750: PUSH
31751: LD_INT 22
31753: PUSH
31754: LD_INT 25
31756: PUSH
31757: LD_INT 32
31759: PUSH
31760: LD_INT 27
31762: PUSH
31763: LD_INT 36
31765: PUSH
31766: LD_INT 69
31768: PUSH
31769: LD_INT 39
31771: PUSH
31772: LD_INT 34
31774: PUSH
31775: LD_INT 40
31777: PUSH
31778: LD_INT 48
31780: PUSH
31781: LD_INT 49
31783: PUSH
31784: LD_INT 50
31786: PUSH
31787: LD_INT 51
31789: PUSH
31790: LD_INT 52
31792: PUSH
31793: LD_INT 53
31795: PUSH
31796: LD_INT 54
31798: PUSH
31799: LD_INT 55
31801: PUSH
31802: LD_INT 56
31804: PUSH
31805: LD_INT 57
31807: PUSH
31808: LD_INT 58
31810: PUSH
31811: LD_INT 59
31813: PUSH
31814: LD_INT 60
31816: PUSH
31817: LD_INT 61
31819: PUSH
31820: LD_INT 62
31822: PUSH
31823: LD_INT 80
31825: PUSH
31826: LD_INT 82
31828: PUSH
31829: LD_INT 83
31831: PUSH
31832: LD_INT 84
31834: PUSH
31835: LD_INT 85
31837: PUSH
31838: LD_INT 86
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: ST_TO_ADDR
31894: GO 32357
31896: LD_INT 2
31898: DOUBLE
31899: EQUAL
31900: IFTRUE 31904
31902: GO 32126
31904: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31905: LD_ADDR_VAR 0 4
31909: PUSH
31910: LD_INT 35
31912: PUSH
31913: LD_INT 45
31915: PUSH
31916: LD_INT 46
31918: PUSH
31919: LD_INT 47
31921: PUSH
31922: LD_INT 82
31924: PUSH
31925: LD_INT 83
31927: PUSH
31928: LD_INT 84
31930: PUSH
31931: LD_INT 85
31933: PUSH
31934: LD_INT 87
31936: PUSH
31937: LD_INT 70
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 11
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 4
31951: PUSH
31952: LD_INT 5
31954: PUSH
31955: LD_INT 6
31957: PUSH
31958: LD_INT 15
31960: PUSH
31961: LD_INT 18
31963: PUSH
31964: LD_INT 7
31966: PUSH
31967: LD_INT 17
31969: PUSH
31970: LD_INT 8
31972: PUSH
31973: LD_INT 20
31975: PUSH
31976: LD_INT 21
31978: PUSH
31979: LD_INT 22
31981: PUSH
31982: LD_INT 72
31984: PUSH
31985: LD_INT 26
31987: PUSH
31988: LD_INT 69
31990: PUSH
31991: LD_INT 39
31993: PUSH
31994: LD_INT 40
31996: PUSH
31997: LD_INT 41
31999: PUSH
32000: LD_INT 42
32002: PUSH
32003: LD_INT 43
32005: PUSH
32006: LD_INT 48
32008: PUSH
32009: LD_INT 49
32011: PUSH
32012: LD_INT 50
32014: PUSH
32015: LD_INT 51
32017: PUSH
32018: LD_INT 52
32020: PUSH
32021: LD_INT 53
32023: PUSH
32024: LD_INT 54
32026: PUSH
32027: LD_INT 55
32029: PUSH
32030: LD_INT 56
32032: PUSH
32033: LD_INT 60
32035: PUSH
32036: LD_INT 61
32038: PUSH
32039: LD_INT 62
32041: PUSH
32042: LD_INT 66
32044: PUSH
32045: LD_INT 67
32047: PUSH
32048: LD_INT 68
32050: PUSH
32051: LD_INT 81
32053: PUSH
32054: LD_INT 82
32056: PUSH
32057: LD_INT 83
32059: PUSH
32060: LD_INT 84
32062: PUSH
32063: LD_INT 85
32065: PUSH
32066: LD_INT 87
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: ST_TO_ADDR
32124: GO 32357
32126: LD_INT 3
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32134
32132: GO 32356
32134: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32135: LD_ADDR_VAR 0 4
32139: PUSH
32140: LD_INT 46
32142: PUSH
32143: LD_INT 47
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: LD_INT 2
32151: PUSH
32152: LD_INT 82
32154: PUSH
32155: LD_INT 83
32157: PUSH
32158: LD_INT 84
32160: PUSH
32161: LD_INT 85
32163: PUSH
32164: LD_INT 86
32166: PUSH
32167: LD_INT 11
32169: PUSH
32170: LD_INT 9
32172: PUSH
32173: LD_INT 20
32175: PUSH
32176: LD_INT 19
32178: PUSH
32179: LD_INT 21
32181: PUSH
32182: LD_INT 24
32184: PUSH
32185: LD_INT 22
32187: PUSH
32188: LD_INT 25
32190: PUSH
32191: LD_INT 28
32193: PUSH
32194: LD_INT 29
32196: PUSH
32197: LD_INT 30
32199: PUSH
32200: LD_INT 31
32202: PUSH
32203: LD_INT 37
32205: PUSH
32206: LD_INT 38
32208: PUSH
32209: LD_INT 32
32211: PUSH
32212: LD_INT 27
32214: PUSH
32215: LD_INT 33
32217: PUSH
32218: LD_INT 69
32220: PUSH
32221: LD_INT 39
32223: PUSH
32224: LD_INT 34
32226: PUSH
32227: LD_INT 40
32229: PUSH
32230: LD_INT 71
32232: PUSH
32233: LD_INT 23
32235: PUSH
32236: LD_INT 44
32238: PUSH
32239: LD_INT 48
32241: PUSH
32242: LD_INT 49
32244: PUSH
32245: LD_INT 50
32247: PUSH
32248: LD_INT 51
32250: PUSH
32251: LD_INT 52
32253: PUSH
32254: LD_INT 53
32256: PUSH
32257: LD_INT 54
32259: PUSH
32260: LD_INT 55
32262: PUSH
32263: LD_INT 56
32265: PUSH
32266: LD_INT 57
32268: PUSH
32269: LD_INT 58
32271: PUSH
32272: LD_INT 59
32274: PUSH
32275: LD_INT 63
32277: PUSH
32278: LD_INT 64
32280: PUSH
32281: LD_INT 65
32283: PUSH
32284: LD_INT 82
32286: PUSH
32287: LD_INT 83
32289: PUSH
32290: LD_INT 84
32292: PUSH
32293: LD_INT 85
32295: PUSH
32296: LD_INT 86
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
32354: GO 32357
32356: POP
// if state > - 1 and state < 3 then
32357: LD_VAR 0 3
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: GREATER
32366: PUSH
32367: LD_VAR 0 3
32371: PUSH
32372: LD_INT 3
32374: LESS
32375: AND
32376: IFFALSE 32433
// for i in result do
32378: LD_ADDR_VAR 0 5
32382: PUSH
32383: LD_VAR 0 4
32387: PUSH
32388: FOR_IN
32389: IFFALSE 32431
// if GetTech ( i , side ) <> state then
32391: LD_VAR 0 5
32395: PPUSH
32396: LD_VAR 0 1
32400: PPUSH
32401: CALL_OW 321
32405: PUSH
32406: LD_VAR 0 3
32410: NONEQUAL
32411: IFFALSE 32429
// result := result diff i ;
32413: LD_ADDR_VAR 0 4
32417: PUSH
32418: LD_VAR 0 4
32422: PUSH
32423: LD_VAR 0 5
32427: DIFF
32428: ST_TO_ADDR
32429: GO 32388
32431: POP
32432: POP
// end ;
32433: LD_VAR 0 4
32437: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32438: LD_INT 0
32440: PPUSH
32441: PPUSH
32442: PPUSH
// result := true ;
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: LD_INT 1
32450: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32451: LD_ADDR_VAR 0 5
32455: PUSH
32456: LD_VAR 0 2
32460: PPUSH
32461: CALL_OW 480
32465: ST_TO_ADDR
// if not tmp then
32466: LD_VAR 0 5
32470: NOT
32471: IFFALSE 32475
// exit ;
32473: GO 32524
// for i in tmp do
32475: LD_ADDR_VAR 0 4
32479: PUSH
32480: LD_VAR 0 5
32484: PUSH
32485: FOR_IN
32486: IFFALSE 32522
// if GetTech ( i , side ) <> state_researched then
32488: LD_VAR 0 4
32492: PPUSH
32493: LD_VAR 0 1
32497: PPUSH
32498: CALL_OW 321
32502: PUSH
32503: LD_INT 2
32505: NONEQUAL
32506: IFFALSE 32520
// begin result := false ;
32508: LD_ADDR_VAR 0 3
32512: PUSH
32513: LD_INT 0
32515: ST_TO_ADDR
// exit ;
32516: POP
32517: POP
32518: GO 32524
// end ;
32520: GO 32485
32522: POP
32523: POP
// end ;
32524: LD_VAR 0 3
32528: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32529: LD_INT 0
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
32539: PPUSH
32540: PPUSH
32541: PPUSH
32542: PPUSH
32543: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32544: LD_VAR 0 1
32548: NOT
32549: PUSH
32550: LD_VAR 0 1
32554: PPUSH
32555: CALL_OW 257
32559: PUSH
32560: LD_INT 9
32562: NONEQUAL
32563: OR
32564: IFFALSE 32568
// exit ;
32566: GO 33141
// side := GetSide ( unit ) ;
32568: LD_ADDR_VAR 0 9
32572: PUSH
32573: LD_VAR 0 1
32577: PPUSH
32578: CALL_OW 255
32582: ST_TO_ADDR
// tech_space := tech_spacanom ;
32583: LD_ADDR_VAR 0 12
32587: PUSH
32588: LD_INT 29
32590: ST_TO_ADDR
// tech_time := tech_taurad ;
32591: LD_ADDR_VAR 0 13
32595: PUSH
32596: LD_INT 28
32598: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32599: LD_ADDR_VAR 0 11
32603: PUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: CALL_OW 310
32613: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32614: LD_VAR 0 11
32618: PPUSH
32619: CALL_OW 247
32623: PUSH
32624: LD_INT 2
32626: EQUAL
32627: IFFALSE 32631
// exit ;
32629: GO 33141
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32631: LD_ADDR_VAR 0 8
32635: PUSH
32636: LD_INT 81
32638: PUSH
32639: LD_VAR 0 9
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: LD_INT 21
32653: PUSH
32654: LD_INT 3
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PPUSH
32669: CALL_OW 69
32673: ST_TO_ADDR
// if not tmp then
32674: LD_VAR 0 8
32678: NOT
32679: IFFALSE 32683
// exit ;
32681: GO 33141
// if in_unit then
32683: LD_VAR 0 11
32687: IFFALSE 32711
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32689: LD_ADDR_VAR 0 10
32693: PUSH
32694: LD_VAR 0 8
32698: PPUSH
32699: LD_VAR 0 11
32703: PPUSH
32704: CALL_OW 74
32708: ST_TO_ADDR
32709: GO 32731
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32711: LD_ADDR_VAR 0 10
32715: PUSH
32716: LD_VAR 0 8
32720: PPUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 74
32730: ST_TO_ADDR
// if not enemy then
32731: LD_VAR 0 10
32735: NOT
32736: IFFALSE 32740
// exit ;
32738: GO 33141
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32740: LD_VAR 0 11
32744: PUSH
32745: LD_VAR 0 11
32749: PPUSH
32750: LD_VAR 0 10
32754: PPUSH
32755: CALL_OW 296
32759: PUSH
32760: LD_INT 13
32762: GREATER
32763: AND
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: LD_VAR 0 10
32774: PPUSH
32775: CALL_OW 296
32779: PUSH
32780: LD_INT 12
32782: GREATER
32783: OR
32784: IFFALSE 32788
// exit ;
32786: GO 33141
// missile := [ 1 ] ;
32788: LD_ADDR_VAR 0 14
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32799: LD_VAR 0 9
32803: PPUSH
32804: LD_VAR 0 12
32808: PPUSH
32809: CALL_OW 325
32813: IFFALSE 32842
// missile := Insert ( missile , missile + 1 , 2 ) ;
32815: LD_ADDR_VAR 0 14
32819: PUSH
32820: LD_VAR 0 14
32824: PPUSH
32825: LD_VAR 0 14
32829: PUSH
32830: LD_INT 1
32832: PLUS
32833: PPUSH
32834: LD_INT 2
32836: PPUSH
32837: CALL_OW 2
32841: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32842: LD_VAR 0 9
32846: PPUSH
32847: LD_VAR 0 13
32851: PPUSH
32852: CALL_OW 325
32856: PUSH
32857: LD_VAR 0 10
32861: PPUSH
32862: CALL_OW 255
32866: PPUSH
32867: LD_VAR 0 13
32871: PPUSH
32872: CALL_OW 325
32876: NOT
32877: AND
32878: IFFALSE 32907
// missile := Insert ( missile , missile + 1 , 3 ) ;
32880: LD_ADDR_VAR 0 14
32884: PUSH
32885: LD_VAR 0 14
32889: PPUSH
32890: LD_VAR 0 14
32894: PUSH
32895: LD_INT 1
32897: PLUS
32898: PPUSH
32899: LD_INT 3
32901: PPUSH
32902: CALL_OW 2
32906: ST_TO_ADDR
// if missile < 2 then
32907: LD_VAR 0 14
32911: PUSH
32912: LD_INT 2
32914: LESS
32915: IFFALSE 32919
// exit ;
32917: GO 33141
// x := GetX ( enemy ) ;
32919: LD_ADDR_VAR 0 4
32923: PUSH
32924: LD_VAR 0 10
32928: PPUSH
32929: CALL_OW 250
32933: ST_TO_ADDR
// y := GetY ( enemy ) ;
32934: LD_ADDR_VAR 0 5
32938: PUSH
32939: LD_VAR 0 10
32943: PPUSH
32944: CALL_OW 251
32948: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32949: LD_ADDR_VAR 0 6
32953: PUSH
32954: LD_VAR 0 4
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PPUSH
32963: LD_INT 1
32965: PPUSH
32966: CALL_OW 12
32970: PLUS
32971: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32972: LD_ADDR_VAR 0 7
32976: PUSH
32977: LD_VAR 0 5
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PPUSH
32986: LD_INT 1
32988: PPUSH
32989: CALL_OW 12
32993: PLUS
32994: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32995: LD_VAR 0 6
32999: PPUSH
33000: LD_VAR 0 7
33004: PPUSH
33005: CALL_OW 488
33009: NOT
33010: IFFALSE 33032
// begin _x := x ;
33012: LD_ADDR_VAR 0 6
33016: PUSH
33017: LD_VAR 0 4
33021: ST_TO_ADDR
// _y := y ;
33022: LD_ADDR_VAR 0 7
33026: PUSH
33027: LD_VAR 0 5
33031: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33032: LD_ADDR_VAR 0 3
33036: PUSH
33037: LD_INT 1
33039: PPUSH
33040: LD_VAR 0 14
33044: PPUSH
33045: CALL_OW 12
33049: ST_TO_ADDR
// case i of 1 :
33050: LD_VAR 0 3
33054: PUSH
33055: LD_INT 1
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33080
33063: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33064: LD_VAR 0 1
33068: PPUSH
33069: LD_VAR 0 10
33073: PPUSH
33074: CALL_OW 115
33078: GO 33141
33080: LD_INT 2
33082: DOUBLE
33083: EQUAL
33084: IFTRUE 33088
33086: GO 33110
33088: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33089: LD_VAR 0 1
33093: PPUSH
33094: LD_VAR 0 6
33098: PPUSH
33099: LD_VAR 0 7
33103: PPUSH
33104: CALL_OW 153
33108: GO 33141
33110: LD_INT 3
33112: DOUBLE
33113: EQUAL
33114: IFTRUE 33118
33116: GO 33140
33118: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33119: LD_VAR 0 1
33123: PPUSH
33124: LD_VAR 0 6
33128: PPUSH
33129: LD_VAR 0 7
33133: PPUSH
33134: CALL_OW 154
33138: GO 33141
33140: POP
// end ;
33141: LD_VAR 0 2
33145: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33146: LD_INT 0
33148: PPUSH
33149: PPUSH
33150: PPUSH
33151: PPUSH
33152: PPUSH
33153: PPUSH
// if not unit or not building then
33154: LD_VAR 0 1
33158: NOT
33159: PUSH
33160: LD_VAR 0 2
33164: NOT
33165: OR
33166: IFFALSE 33170
// exit ;
33168: GO 33328
// x := GetX ( building ) ;
33170: LD_ADDR_VAR 0 5
33174: PUSH
33175: LD_VAR 0 2
33179: PPUSH
33180: CALL_OW 250
33184: ST_TO_ADDR
// y := GetY ( building ) ;
33185: LD_ADDR_VAR 0 6
33189: PUSH
33190: LD_VAR 0 2
33194: PPUSH
33195: CALL_OW 251
33199: ST_TO_ADDR
// for i = 0 to 5 do
33200: LD_ADDR_VAR 0 4
33204: PUSH
33205: DOUBLE
33206: LD_INT 0
33208: DEC
33209: ST_TO_ADDR
33210: LD_INT 5
33212: PUSH
33213: FOR_TO
33214: IFFALSE 33326
// begin _x := ShiftX ( x , i , 3 ) ;
33216: LD_ADDR_VAR 0 7
33220: PUSH
33221: LD_VAR 0 5
33225: PPUSH
33226: LD_VAR 0 4
33230: PPUSH
33231: LD_INT 3
33233: PPUSH
33234: CALL_OW 272
33238: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33239: LD_ADDR_VAR 0 8
33243: PUSH
33244: LD_VAR 0 6
33248: PPUSH
33249: LD_VAR 0 4
33253: PPUSH
33254: LD_INT 3
33256: PPUSH
33257: CALL_OW 273
33261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33262: LD_VAR 0 7
33266: PPUSH
33267: LD_VAR 0 8
33271: PPUSH
33272: CALL_OW 488
33276: NOT
33277: IFFALSE 33281
// continue ;
33279: GO 33213
// if HexInfo ( _x , _y ) = 0 then
33281: LD_VAR 0 7
33285: PPUSH
33286: LD_VAR 0 8
33290: PPUSH
33291: CALL_OW 428
33295: PUSH
33296: LD_INT 0
33298: EQUAL
33299: IFFALSE 33324
// begin ComMoveXY ( unit , _x , _y ) ;
33301: LD_VAR 0 1
33305: PPUSH
33306: LD_VAR 0 7
33310: PPUSH
33311: LD_VAR 0 8
33315: PPUSH
33316: CALL_OW 111
// exit ;
33320: POP
33321: POP
33322: GO 33328
// end ; end ;
33324: GO 33213
33326: POP
33327: POP
// end ;
33328: LD_VAR 0 3
33332: RET
// export function ScanBase ( side , base_area ) ; begin
33333: LD_INT 0
33335: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33336: LD_ADDR_VAR 0 3
33340: PUSH
33341: LD_VAR 0 2
33345: PPUSH
33346: LD_INT 81
33348: PUSH
33349: LD_VAR 0 1
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PPUSH
33358: CALL_OW 70
33362: ST_TO_ADDR
// end ;
33363: LD_VAR 0 3
33367: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
// result := false ;
33374: LD_ADDR_VAR 0 2
33378: PUSH
33379: LD_INT 0
33381: ST_TO_ADDR
// side := GetSide ( unit ) ;
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_VAR 0 1
33391: PPUSH
33392: CALL_OW 255
33396: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33397: LD_ADDR_VAR 0 4
33401: PUSH
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 248
33411: ST_TO_ADDR
// case nat of 1 :
33412: LD_VAR 0 4
33416: PUSH
33417: LD_INT 1
33419: DOUBLE
33420: EQUAL
33421: IFTRUE 33425
33423: GO 33436
33425: POP
// tech := tech_lassight ; 2 :
33426: LD_ADDR_VAR 0 5
33430: PUSH
33431: LD_INT 12
33433: ST_TO_ADDR
33434: GO 33475
33436: LD_INT 2
33438: DOUBLE
33439: EQUAL
33440: IFTRUE 33444
33442: GO 33455
33444: POP
// tech := tech_mortar ; 3 :
33445: LD_ADDR_VAR 0 5
33449: PUSH
33450: LD_INT 41
33452: ST_TO_ADDR
33453: GO 33475
33455: LD_INT 3
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33474
33463: POP
// tech := tech_bazooka ; end ;
33464: LD_ADDR_VAR 0 5
33468: PUSH
33469: LD_INT 44
33471: ST_TO_ADDR
33472: GO 33475
33474: POP
// if Researched ( side , tech ) then
33475: LD_VAR 0 3
33479: PPUSH
33480: LD_VAR 0 5
33484: PPUSH
33485: CALL_OW 325
33489: IFFALSE 33516
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33491: LD_ADDR_VAR 0 2
33495: PUSH
33496: LD_INT 5
33498: PUSH
33499: LD_INT 8
33501: PUSH
33502: LD_INT 9
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: PUSH
33510: LD_VAR 0 4
33514: ARRAY
33515: ST_TO_ADDR
// end ;
33516: LD_VAR 0 2
33520: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33521: LD_INT 0
33523: PPUSH
33524: PPUSH
33525: PPUSH
// if not mines then
33526: LD_VAR 0 2
33530: NOT
33531: IFFALSE 33535
// exit ;
33533: GO 33679
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33535: LD_ADDR_VAR 0 5
33539: PUSH
33540: LD_INT 81
33542: PUSH
33543: LD_VAR 0 1
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: LD_INT 21
33557: PUSH
33558: LD_INT 3
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PPUSH
33573: CALL_OW 69
33577: ST_TO_ADDR
// for i in mines do
33578: LD_ADDR_VAR 0 4
33582: PUSH
33583: LD_VAR 0 2
33587: PUSH
33588: FOR_IN
33589: IFFALSE 33677
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33591: LD_VAR 0 4
33595: PUSH
33596: LD_INT 1
33598: ARRAY
33599: PPUSH
33600: LD_VAR 0 4
33604: PUSH
33605: LD_INT 2
33607: ARRAY
33608: PPUSH
33609: CALL_OW 458
33613: NOT
33614: IFFALSE 33618
// continue ;
33616: GO 33588
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33618: LD_VAR 0 4
33622: PUSH
33623: LD_INT 1
33625: ARRAY
33626: PPUSH
33627: LD_VAR 0 4
33631: PUSH
33632: LD_INT 2
33634: ARRAY
33635: PPUSH
33636: CALL_OW 428
33640: PUSH
33641: LD_VAR 0 5
33645: IN
33646: IFFALSE 33675
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33648: LD_VAR 0 4
33652: PUSH
33653: LD_INT 1
33655: ARRAY
33656: PPUSH
33657: LD_VAR 0 4
33661: PUSH
33662: LD_INT 2
33664: ARRAY
33665: PPUSH
33666: LD_VAR 0 1
33670: PPUSH
33671: CALL_OW 456
// end ;
33675: GO 33588
33677: POP
33678: POP
// end ;
33679: LD_VAR 0 3
33683: RET
// export function Count ( array ) ; var i ; begin
33684: LD_INT 0
33686: PPUSH
33687: PPUSH
// result := 0 ;
33688: LD_ADDR_VAR 0 2
33692: PUSH
33693: LD_INT 0
33695: ST_TO_ADDR
// for i in array do
33696: LD_ADDR_VAR 0 3
33700: PUSH
33701: LD_VAR 0 1
33705: PUSH
33706: FOR_IN
33707: IFFALSE 33731
// if i then
33709: LD_VAR 0 3
33713: IFFALSE 33729
// result := result + 1 ;
33715: LD_ADDR_VAR 0 2
33719: PUSH
33720: LD_VAR 0 2
33724: PUSH
33725: LD_INT 1
33727: PLUS
33728: ST_TO_ADDR
33729: GO 33706
33731: POP
33732: POP
// end ;
33733: LD_VAR 0 2
33737: RET
// export function IsEmpty ( building ) ; begin
33738: LD_INT 0
33740: PPUSH
// if not building then
33741: LD_VAR 0 1
33745: NOT
33746: IFFALSE 33750
// exit ;
33748: GO 33793
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33750: LD_ADDR_VAR 0 2
33754: PUSH
33755: LD_VAR 0 1
33759: PUSH
33760: LD_INT 22
33762: PUSH
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 255
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 58
33779: PUSH
33780: EMPTY
33781: LIST
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PPUSH
33787: CALL_OW 69
33791: IN
33792: ST_TO_ADDR
// end ;
33793: LD_VAR 0 2
33797: RET
// export function IsNotFull ( building ) ; begin
33798: LD_INT 0
33800: PPUSH
// if not building then
33801: LD_VAR 0 1
33805: NOT
33806: IFFALSE 33810
// exit ;
33808: GO 33829
// result := UnitsInside ( building ) < 6 ;
33810: LD_ADDR_VAR 0 2
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 313
33824: PUSH
33825: LD_INT 6
33827: LESS
33828: ST_TO_ADDR
// end ;
33829: LD_VAR 0 2
33833: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33834: LD_INT 0
33836: PPUSH
33837: PPUSH
33838: PPUSH
33839: PPUSH
// tmp := [ ] ;
33840: LD_ADDR_VAR 0 3
33844: PUSH
33845: EMPTY
33846: ST_TO_ADDR
// list := [ ] ;
33847: LD_ADDR_VAR 0 5
33851: PUSH
33852: EMPTY
33853: ST_TO_ADDR
// for i = 16 to 25 do
33854: LD_ADDR_VAR 0 4
33858: PUSH
33859: DOUBLE
33860: LD_INT 16
33862: DEC
33863: ST_TO_ADDR
33864: LD_INT 25
33866: PUSH
33867: FOR_TO
33868: IFFALSE 33941
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33870: LD_ADDR_VAR 0 3
33874: PUSH
33875: LD_VAR 0 3
33879: PUSH
33880: LD_INT 22
33882: PUSH
33883: LD_VAR 0 1
33887: PPUSH
33888: CALL_OW 255
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 91
33899: PUSH
33900: LD_VAR 0 1
33904: PUSH
33905: LD_INT 6
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 30
33915: PUSH
33916: LD_VAR 0 4
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: PPUSH
33933: CALL_OW 69
33937: ADD
33938: ST_TO_ADDR
33939: GO 33867
33941: POP
33942: POP
// for i = 1 to tmp do
33943: LD_ADDR_VAR 0 4
33947: PUSH
33948: DOUBLE
33949: LD_INT 1
33951: DEC
33952: ST_TO_ADDR
33953: LD_VAR 0 3
33957: PUSH
33958: FOR_TO
33959: IFFALSE 34047
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33961: LD_ADDR_VAR 0 5
33965: PUSH
33966: LD_VAR 0 5
33970: PUSH
33971: LD_VAR 0 3
33975: PUSH
33976: LD_VAR 0 4
33980: ARRAY
33981: PPUSH
33982: CALL_OW 266
33986: PUSH
33987: LD_VAR 0 3
33991: PUSH
33992: LD_VAR 0 4
33996: ARRAY
33997: PPUSH
33998: CALL_OW 250
34002: PUSH
34003: LD_VAR 0 3
34007: PUSH
34008: LD_VAR 0 4
34012: ARRAY
34013: PPUSH
34014: CALL_OW 251
34018: PUSH
34019: LD_VAR 0 3
34023: PUSH
34024: LD_VAR 0 4
34028: ARRAY
34029: PPUSH
34030: CALL_OW 254
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: PUSH
34041: EMPTY
34042: LIST
34043: ADD
34044: ST_TO_ADDR
34045: GO 33958
34047: POP
34048: POP
// result := list ;
34049: LD_ADDR_VAR 0 2
34053: PUSH
34054: LD_VAR 0 5
34058: ST_TO_ADDR
// end ;
34059: LD_VAR 0 2
34063: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34064: LD_INT 0
34066: PPUSH
34067: PPUSH
34068: PPUSH
34069: PPUSH
34070: PPUSH
34071: PPUSH
34072: PPUSH
// if not factory then
34073: LD_VAR 0 1
34077: NOT
34078: IFFALSE 34082
// exit ;
34080: GO 34675
// if control = control_apeman then
34082: LD_VAR 0 4
34086: PUSH
34087: LD_INT 5
34089: EQUAL
34090: IFFALSE 34199
// begin tmp := UnitsInside ( factory ) ;
34092: LD_ADDR_VAR 0 8
34096: PUSH
34097: LD_VAR 0 1
34101: PPUSH
34102: CALL_OW 313
34106: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34107: LD_VAR 0 8
34111: PPUSH
34112: LD_INT 25
34114: PUSH
34115: LD_INT 12
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PPUSH
34122: CALL_OW 72
34126: NOT
34127: IFFALSE 34137
// control := control_manual ;
34129: LD_ADDR_VAR 0 4
34133: PUSH
34134: LD_INT 1
34136: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34137: LD_ADDR_VAR 0 8
34141: PUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL 33834 0 1
34151: ST_TO_ADDR
// if tmp then
34152: LD_VAR 0 8
34156: IFFALSE 34199
// begin for i in tmp do
34158: LD_ADDR_VAR 0 7
34162: PUSH
34163: LD_VAR 0 8
34167: PUSH
34168: FOR_IN
34169: IFFALSE 34197
// if i [ 1 ] = b_ext_radio then
34171: LD_VAR 0 7
34175: PUSH
34176: LD_INT 1
34178: ARRAY
34179: PUSH
34180: LD_INT 22
34182: EQUAL
34183: IFFALSE 34195
// begin control := control_remote ;
34185: LD_ADDR_VAR 0 4
34189: PUSH
34190: LD_INT 2
34192: ST_TO_ADDR
// break ;
34193: GO 34197
// end ;
34195: GO 34168
34197: POP
34198: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34199: LD_VAR 0 1
34203: PPUSH
34204: LD_VAR 0 2
34208: PPUSH
34209: LD_VAR 0 3
34213: PPUSH
34214: LD_VAR 0 4
34218: PPUSH
34219: LD_VAR 0 5
34223: PPUSH
34224: CALL_OW 448
34228: IFFALSE 34263
// begin result := [ chassis , engine , control , weapon ] ;
34230: LD_ADDR_VAR 0 6
34234: PUSH
34235: LD_VAR 0 2
34239: PUSH
34240: LD_VAR 0 3
34244: PUSH
34245: LD_VAR 0 4
34249: PUSH
34250: LD_VAR 0 5
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
// exit ;
34261: GO 34675
// end ; _chassis := AvailableChassisList ( factory ) ;
34263: LD_ADDR_VAR 0 9
34267: PUSH
34268: LD_VAR 0 1
34272: PPUSH
34273: CALL_OW 475
34277: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34278: LD_ADDR_VAR 0 11
34282: PUSH
34283: LD_VAR 0 1
34287: PPUSH
34288: CALL_OW 476
34292: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34293: LD_ADDR_VAR 0 12
34297: PUSH
34298: LD_VAR 0 1
34302: PPUSH
34303: CALL_OW 477
34307: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34308: LD_ADDR_VAR 0 10
34312: PUSH
34313: LD_VAR 0 1
34317: PPUSH
34318: CALL_OW 478
34322: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34323: LD_VAR 0 9
34327: NOT
34328: PUSH
34329: LD_VAR 0 11
34333: NOT
34334: OR
34335: PUSH
34336: LD_VAR 0 12
34340: NOT
34341: OR
34342: PUSH
34343: LD_VAR 0 10
34347: NOT
34348: OR
34349: IFFALSE 34384
// begin result := [ chassis , engine , control , weapon ] ;
34351: LD_ADDR_VAR 0 6
34355: PUSH
34356: LD_VAR 0 2
34360: PUSH
34361: LD_VAR 0 3
34365: PUSH
34366: LD_VAR 0 4
34370: PUSH
34371: LD_VAR 0 5
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
// exit ;
34382: GO 34675
// end ; if not chassis in _chassis then
34384: LD_VAR 0 2
34388: PUSH
34389: LD_VAR 0 9
34393: IN
34394: NOT
34395: IFFALSE 34421
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34397: LD_ADDR_VAR 0 2
34401: PUSH
34402: LD_VAR 0 9
34406: PUSH
34407: LD_INT 1
34409: PPUSH
34410: LD_VAR 0 9
34414: PPUSH
34415: CALL_OW 12
34419: ARRAY
34420: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34421: LD_VAR 0 2
34425: PPUSH
34426: LD_VAR 0 3
34430: PPUSH
34431: CALL 34680 0 2
34435: NOT
34436: IFFALSE 34495
// repeat engine := _engine [ 1 ] ;
34438: LD_ADDR_VAR 0 3
34442: PUSH
34443: LD_VAR 0 11
34447: PUSH
34448: LD_INT 1
34450: ARRAY
34451: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34452: LD_ADDR_VAR 0 11
34456: PUSH
34457: LD_VAR 0 11
34461: PPUSH
34462: LD_INT 1
34464: PPUSH
34465: CALL_OW 3
34469: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34470: LD_VAR 0 2
34474: PPUSH
34475: LD_VAR 0 3
34479: PPUSH
34480: CALL 34680 0 2
34484: PUSH
34485: LD_VAR 0 11
34489: PUSH
34490: EMPTY
34491: EQUAL
34492: OR
34493: IFFALSE 34438
// if not control in _control then
34495: LD_VAR 0 4
34499: PUSH
34500: LD_VAR 0 12
34504: IN
34505: NOT
34506: IFFALSE 34532
// control := _control [ rand ( 1 , _control ) ] ;
34508: LD_ADDR_VAR 0 4
34512: PUSH
34513: LD_VAR 0 12
34517: PUSH
34518: LD_INT 1
34520: PPUSH
34521: LD_VAR 0 12
34525: PPUSH
34526: CALL_OW 12
34530: ARRAY
34531: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34532: LD_VAR 0 2
34536: PPUSH
34537: LD_VAR 0 5
34541: PPUSH
34542: CALL 34900 0 2
34546: NOT
34547: IFFALSE 34606
// repeat weapon := _weapon [ 1 ] ;
34549: LD_ADDR_VAR 0 5
34553: PUSH
34554: LD_VAR 0 10
34558: PUSH
34559: LD_INT 1
34561: ARRAY
34562: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34563: LD_ADDR_VAR 0 10
34567: PUSH
34568: LD_VAR 0 10
34572: PPUSH
34573: LD_INT 1
34575: PPUSH
34576: CALL_OW 3
34580: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34581: LD_VAR 0 2
34585: PPUSH
34586: LD_VAR 0 5
34590: PPUSH
34591: CALL 34900 0 2
34595: PUSH
34596: LD_VAR 0 10
34600: PUSH
34601: EMPTY
34602: EQUAL
34603: OR
34604: IFFALSE 34549
// result := [ ] ;
34606: LD_ADDR_VAR 0 6
34610: PUSH
34611: EMPTY
34612: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34613: LD_VAR 0 1
34617: PPUSH
34618: LD_VAR 0 2
34622: PPUSH
34623: LD_VAR 0 3
34627: PPUSH
34628: LD_VAR 0 4
34632: PPUSH
34633: LD_VAR 0 5
34637: PPUSH
34638: CALL_OW 448
34642: IFFALSE 34675
// result := [ chassis , engine , control , weapon ] ;
34644: LD_ADDR_VAR 0 6
34648: PUSH
34649: LD_VAR 0 2
34653: PUSH
34654: LD_VAR 0 3
34658: PUSH
34659: LD_VAR 0 4
34663: PUSH
34664: LD_VAR 0 5
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: ST_TO_ADDR
// end ;
34675: LD_VAR 0 6
34679: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34680: LD_INT 0
34682: PPUSH
// if not chassis or not engine then
34683: LD_VAR 0 1
34687: NOT
34688: PUSH
34689: LD_VAR 0 2
34693: NOT
34694: OR
34695: IFFALSE 34699
// exit ;
34697: GO 34895
// case engine of engine_solar :
34699: LD_VAR 0 2
34703: PUSH
34704: LD_INT 2
34706: DOUBLE
34707: EQUAL
34708: IFTRUE 34712
34710: GO 34750
34712: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34713: LD_ADDR_VAR 0 3
34717: PUSH
34718: LD_INT 11
34720: PUSH
34721: LD_INT 12
34723: PUSH
34724: LD_INT 13
34726: PUSH
34727: LD_INT 14
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: ST_TO_ADDR
34748: GO 34879
34750: LD_INT 1
34752: DOUBLE
34753: EQUAL
34754: IFTRUE 34758
34756: GO 34820
34758: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34759: LD_ADDR_VAR 0 3
34763: PUSH
34764: LD_INT 11
34766: PUSH
34767: LD_INT 12
34769: PUSH
34770: LD_INT 13
34772: PUSH
34773: LD_INT 14
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: LD_INT 3
34784: PUSH
34785: LD_INT 4
34787: PUSH
34788: LD_INT 5
34790: PUSH
34791: LD_INT 21
34793: PUSH
34794: LD_INT 23
34796: PUSH
34797: LD_INT 22
34799: PUSH
34800: LD_INT 24
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: ST_TO_ADDR
34818: GO 34879
34820: LD_INT 3
34822: DOUBLE
34823: EQUAL
34824: IFTRUE 34828
34826: GO 34878
34828: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34829: LD_ADDR_VAR 0 3
34833: PUSH
34834: LD_INT 13
34836: PUSH
34837: LD_INT 14
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: LD_INT 3
34845: PUSH
34846: LD_INT 4
34848: PUSH
34849: LD_INT 5
34851: PUSH
34852: LD_INT 21
34854: PUSH
34855: LD_INT 22
34857: PUSH
34858: LD_INT 23
34860: PUSH
34861: LD_INT 24
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: ST_TO_ADDR
34876: GO 34879
34878: POP
// result := ( chassis in result ) ;
34879: LD_ADDR_VAR 0 3
34883: PUSH
34884: LD_VAR 0 1
34888: PUSH
34889: LD_VAR 0 3
34893: IN
34894: ST_TO_ADDR
// end ;
34895: LD_VAR 0 3
34899: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34900: LD_INT 0
34902: PPUSH
// if not chassis or not weapon then
34903: LD_VAR 0 1
34907: NOT
34908: PUSH
34909: LD_VAR 0 2
34913: NOT
34914: OR
34915: IFFALSE 34919
// exit ;
34917: GO 35945
// case weapon of us_machine_gun :
34919: LD_VAR 0 2
34923: PUSH
34924: LD_INT 2
34926: DOUBLE
34927: EQUAL
34928: IFTRUE 34932
34930: GO 34962
34932: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: LD_INT 4
34949: PUSH
34950: LD_INT 5
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: ST_TO_ADDR
34960: GO 35929
34962: LD_INT 3
34964: DOUBLE
34965: EQUAL
34966: IFTRUE 34970
34968: GO 35000
34970: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: LD_INT 1
34978: PUSH
34979: LD_INT 2
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: ST_TO_ADDR
34998: GO 35929
35000: LD_INT 11
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35038
35008: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35009: LD_ADDR_VAR 0 3
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: LD_INT 4
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: ST_TO_ADDR
35036: GO 35929
35038: LD_INT 4
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35072
35046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35047: LD_ADDR_VAR 0 3
35051: PUSH
35052: LD_INT 2
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 4
35060: PUSH
35061: LD_INT 5
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: ST_TO_ADDR
35070: GO 35929
35072: LD_INT 5
35074: DOUBLE
35075: EQUAL
35076: IFTRUE 35080
35078: GO 35106
35080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35081: LD_ADDR_VAR 0 3
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: LD_INT 5
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: ST_TO_ADDR
35104: GO 35929
35106: LD_INT 9
35108: DOUBLE
35109: EQUAL
35110: IFTRUE 35114
35112: GO 35140
35114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35115: LD_ADDR_VAR 0 3
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: LD_INT 4
35128: PUSH
35129: LD_INT 5
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: ST_TO_ADDR
35138: GO 35929
35140: LD_INT 7
35142: DOUBLE
35143: EQUAL
35144: IFTRUE 35148
35146: GO 35174
35148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 3
35159: PUSH
35160: LD_INT 4
35162: PUSH
35163: LD_INT 5
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
35172: GO 35929
35174: LD_INT 12
35176: DOUBLE
35177: EQUAL
35178: IFTRUE 35182
35180: GO 35208
35182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: LD_INT 3
35193: PUSH
35194: LD_INT 4
35196: PUSH
35197: LD_INT 5
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35929
35208: LD_INT 13
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35242
35216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35217: LD_ADDR_VAR 0 3
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: LD_INT 3
35227: PUSH
35228: LD_INT 4
35230: PUSH
35231: LD_INT 5
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: ST_TO_ADDR
35240: GO 35929
35242: LD_INT 14
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35268
35250: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 4
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: ST_TO_ADDR
35266: GO 35929
35268: LD_INT 6
35270: DOUBLE
35271: EQUAL
35272: IFTRUE 35276
35274: GO 35294
35276: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35277: LD_ADDR_VAR 0 3
35281: PUSH
35282: LD_INT 4
35284: PUSH
35285: LD_INT 5
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: ST_TO_ADDR
35292: GO 35929
35294: LD_INT 10
35296: DOUBLE
35297: EQUAL
35298: IFTRUE 35302
35300: GO 35320
35302: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35303: LD_ADDR_VAR 0 3
35307: PUSH
35308: LD_INT 4
35310: PUSH
35311: LD_INT 5
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: ST_TO_ADDR
35318: GO 35929
35320: LD_INT 22
35322: DOUBLE
35323: EQUAL
35324: IFTRUE 35328
35326: GO 35354
35328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35329: LD_ADDR_VAR 0 3
35333: PUSH
35334: LD_INT 11
35336: PUSH
35337: LD_INT 12
35339: PUSH
35340: LD_INT 13
35342: PUSH
35343: LD_INT 14
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: ST_TO_ADDR
35352: GO 35929
35354: LD_INT 23
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 35388
35362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35363: LD_ADDR_VAR 0 3
35367: PUSH
35368: LD_INT 11
35370: PUSH
35371: LD_INT 12
35373: PUSH
35374: LD_INT 13
35376: PUSH
35377: LD_INT 14
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: ST_TO_ADDR
35386: GO 35929
35388: LD_INT 24
35390: DOUBLE
35391: EQUAL
35392: IFTRUE 35396
35394: GO 35422
35396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35397: LD_ADDR_VAR 0 3
35401: PUSH
35402: LD_INT 11
35404: PUSH
35405: LD_INT 12
35407: PUSH
35408: LD_INT 13
35410: PUSH
35411: LD_INT 14
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: ST_TO_ADDR
35420: GO 35929
35422: LD_INT 30
35424: DOUBLE
35425: EQUAL
35426: IFTRUE 35430
35428: GO 35456
35430: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35431: LD_ADDR_VAR 0 3
35435: PUSH
35436: LD_INT 11
35438: PUSH
35439: LD_INT 12
35441: PUSH
35442: LD_INT 13
35444: PUSH
35445: LD_INT 14
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
35454: GO 35929
35456: LD_INT 25
35458: DOUBLE
35459: EQUAL
35460: IFTRUE 35464
35462: GO 35482
35464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35465: LD_ADDR_VAR 0 3
35469: PUSH
35470: LD_INT 13
35472: PUSH
35473: LD_INT 14
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: ST_TO_ADDR
35480: GO 35929
35482: LD_INT 27
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35490
35488: GO 35508
35490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35491: LD_ADDR_VAR 0 3
35495: PUSH
35496: LD_INT 13
35498: PUSH
35499: LD_INT 14
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: ST_TO_ADDR
35506: GO 35929
35508: LD_INT 28
35510: DOUBLE
35511: EQUAL
35512: IFTRUE 35516
35514: GO 35534
35516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35517: LD_ADDR_VAR 0 3
35521: PUSH
35522: LD_INT 13
35524: PUSH
35525: LD_INT 14
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: ST_TO_ADDR
35532: GO 35929
35534: LD_INT 29
35536: DOUBLE
35537: EQUAL
35538: IFTRUE 35542
35540: GO 35560
35542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35543: LD_ADDR_VAR 0 3
35547: PUSH
35548: LD_INT 13
35550: PUSH
35551: LD_INT 14
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: ST_TO_ADDR
35558: GO 35929
35560: LD_INT 31
35562: DOUBLE
35563: EQUAL
35564: IFTRUE 35568
35566: GO 35586
35568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35569: LD_ADDR_VAR 0 3
35573: PUSH
35574: LD_INT 13
35576: PUSH
35577: LD_INT 14
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: ST_TO_ADDR
35584: GO 35929
35586: LD_INT 26
35588: DOUBLE
35589: EQUAL
35590: IFTRUE 35594
35592: GO 35612
35594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35595: LD_ADDR_VAR 0 3
35599: PUSH
35600: LD_INT 13
35602: PUSH
35603: LD_INT 14
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: ST_TO_ADDR
35610: GO 35929
35612: LD_INT 42
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35620
35618: GO 35646
35620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35621: LD_ADDR_VAR 0 3
35625: PUSH
35626: LD_INT 21
35628: PUSH
35629: LD_INT 22
35631: PUSH
35632: LD_INT 23
35634: PUSH
35635: LD_INT 24
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
35644: GO 35929
35646: LD_INT 43
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35654
35652: GO 35680
35654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35655: LD_ADDR_VAR 0 3
35659: PUSH
35660: LD_INT 21
35662: PUSH
35663: LD_INT 22
35665: PUSH
35666: LD_INT 23
35668: PUSH
35669: LD_INT 24
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: ST_TO_ADDR
35678: GO 35929
35680: LD_INT 44
35682: DOUBLE
35683: EQUAL
35684: IFTRUE 35688
35686: GO 35714
35688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35689: LD_ADDR_VAR 0 3
35693: PUSH
35694: LD_INT 21
35696: PUSH
35697: LD_INT 22
35699: PUSH
35700: LD_INT 23
35702: PUSH
35703: LD_INT 24
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: ST_TO_ADDR
35712: GO 35929
35714: LD_INT 45
35716: DOUBLE
35717: EQUAL
35718: IFTRUE 35722
35720: GO 35748
35722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_INT 21
35730: PUSH
35731: LD_INT 22
35733: PUSH
35734: LD_INT 23
35736: PUSH
35737: LD_INT 24
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
35746: GO 35929
35748: LD_INT 49
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35756
35754: GO 35782
35756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35757: LD_ADDR_VAR 0 3
35761: PUSH
35762: LD_INT 21
35764: PUSH
35765: LD_INT 22
35767: PUSH
35768: LD_INT 23
35770: PUSH
35771: LD_INT 24
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: ST_TO_ADDR
35780: GO 35929
35782: LD_INT 51
35784: DOUBLE
35785: EQUAL
35786: IFTRUE 35790
35788: GO 35816
35790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35791: LD_ADDR_VAR 0 3
35795: PUSH
35796: LD_INT 21
35798: PUSH
35799: LD_INT 22
35801: PUSH
35802: LD_INT 23
35804: PUSH
35805: LD_INT 24
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
35814: GO 35929
35816: LD_INT 52
35818: DOUBLE
35819: EQUAL
35820: IFTRUE 35824
35822: GO 35850
35824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35825: LD_ADDR_VAR 0 3
35829: PUSH
35830: LD_INT 21
35832: PUSH
35833: LD_INT 22
35835: PUSH
35836: LD_INT 23
35838: PUSH
35839: LD_INT 24
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: ST_TO_ADDR
35848: GO 35929
35850: LD_INT 53
35852: DOUBLE
35853: EQUAL
35854: IFTRUE 35858
35856: GO 35876
35858: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35859: LD_ADDR_VAR 0 3
35863: PUSH
35864: LD_INT 23
35866: PUSH
35867: LD_INT 24
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: ST_TO_ADDR
35874: GO 35929
35876: LD_INT 46
35878: DOUBLE
35879: EQUAL
35880: IFTRUE 35884
35882: GO 35902
35884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35885: LD_ADDR_VAR 0 3
35889: PUSH
35890: LD_INT 23
35892: PUSH
35893: LD_INT 24
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: ST_TO_ADDR
35900: GO 35929
35902: LD_INT 47
35904: DOUBLE
35905: EQUAL
35906: IFTRUE 35910
35908: GO 35928
35910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35911: LD_ADDR_VAR 0 3
35915: PUSH
35916: LD_INT 23
35918: PUSH
35919: LD_INT 24
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: ST_TO_ADDR
35926: GO 35929
35928: POP
// result := ( chassis in result ) ;
35929: LD_ADDR_VAR 0 3
35933: PUSH
35934: LD_VAR 0 1
35938: PUSH
35939: LD_VAR 0 3
35943: IN
35944: ST_TO_ADDR
// end ;
35945: LD_VAR 0 3
35949: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35950: LD_INT 0
35952: PPUSH
35953: PPUSH
35954: PPUSH
35955: PPUSH
35956: PPUSH
35957: PPUSH
35958: PPUSH
// result := array ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 1
35968: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35969: LD_VAR 0 1
35973: NOT
35974: PUSH
35975: LD_VAR 0 2
35979: NOT
35980: OR
35981: PUSH
35982: LD_VAR 0 3
35986: NOT
35987: OR
35988: PUSH
35989: LD_VAR 0 2
35993: PUSH
35994: LD_VAR 0 1
35998: GREATER
35999: OR
36000: PUSH
36001: LD_VAR 0 3
36005: PUSH
36006: LD_VAR 0 1
36010: GREATER
36011: OR
36012: IFFALSE 36016
// exit ;
36014: GO 36312
// if direction then
36016: LD_VAR 0 4
36020: IFFALSE 36084
// begin d := 1 ;
36022: LD_ADDR_VAR 0 9
36026: PUSH
36027: LD_INT 1
36029: ST_TO_ADDR
// if i_from > i_to then
36030: LD_VAR 0 2
36034: PUSH
36035: LD_VAR 0 3
36039: GREATER
36040: IFFALSE 36066
// length := ( array - i_from ) + i_to else
36042: LD_ADDR_VAR 0 11
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_VAR 0 2
36056: MINUS
36057: PUSH
36058: LD_VAR 0 3
36062: PLUS
36063: ST_TO_ADDR
36064: GO 36082
// length := i_to - i_from ;
36066: LD_ADDR_VAR 0 11
36070: PUSH
36071: LD_VAR 0 3
36075: PUSH
36076: LD_VAR 0 2
36080: MINUS
36081: ST_TO_ADDR
// end else
36082: GO 36145
// begin d := - 1 ;
36084: LD_ADDR_VAR 0 9
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: ST_TO_ADDR
// if i_from > i_to then
36093: LD_VAR 0 2
36097: PUSH
36098: LD_VAR 0 3
36102: GREATER
36103: IFFALSE 36123
// length := i_from - i_to else
36105: LD_ADDR_VAR 0 11
36109: PUSH
36110: LD_VAR 0 2
36114: PUSH
36115: LD_VAR 0 3
36119: MINUS
36120: ST_TO_ADDR
36121: GO 36145
// length := ( array - i_to ) + i_from ;
36123: LD_ADDR_VAR 0 11
36127: PUSH
36128: LD_VAR 0 1
36132: PUSH
36133: LD_VAR 0 3
36137: MINUS
36138: PUSH
36139: LD_VAR 0 2
36143: PLUS
36144: ST_TO_ADDR
// end ; if not length then
36145: LD_VAR 0 11
36149: NOT
36150: IFFALSE 36154
// exit ;
36152: GO 36312
// tmp := array ;
36154: LD_ADDR_VAR 0 10
36158: PUSH
36159: LD_VAR 0 1
36163: ST_TO_ADDR
// for i = 1 to length do
36164: LD_ADDR_VAR 0 6
36168: PUSH
36169: DOUBLE
36170: LD_INT 1
36172: DEC
36173: ST_TO_ADDR
36174: LD_VAR 0 11
36178: PUSH
36179: FOR_TO
36180: IFFALSE 36300
// begin for j = 1 to array do
36182: LD_ADDR_VAR 0 7
36186: PUSH
36187: DOUBLE
36188: LD_INT 1
36190: DEC
36191: ST_TO_ADDR
36192: LD_VAR 0 1
36196: PUSH
36197: FOR_TO
36198: IFFALSE 36286
// begin k := j + d ;
36200: LD_ADDR_VAR 0 8
36204: PUSH
36205: LD_VAR 0 7
36209: PUSH
36210: LD_VAR 0 9
36214: PLUS
36215: ST_TO_ADDR
// if k > array then
36216: LD_VAR 0 8
36220: PUSH
36221: LD_VAR 0 1
36225: GREATER
36226: IFFALSE 36236
// k := 1 ;
36228: LD_ADDR_VAR 0 8
36232: PUSH
36233: LD_INT 1
36235: ST_TO_ADDR
// if not k then
36236: LD_VAR 0 8
36240: NOT
36241: IFFALSE 36253
// k := array ;
36243: LD_ADDR_VAR 0 8
36247: PUSH
36248: LD_VAR 0 1
36252: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36253: LD_ADDR_VAR 0 10
36257: PUSH
36258: LD_VAR 0 10
36262: PPUSH
36263: LD_VAR 0 8
36267: PPUSH
36268: LD_VAR 0 1
36272: PUSH
36273: LD_VAR 0 7
36277: ARRAY
36278: PPUSH
36279: CALL_OW 1
36283: ST_TO_ADDR
// end ;
36284: GO 36197
36286: POP
36287: POP
// array := tmp ;
36288: LD_ADDR_VAR 0 1
36292: PUSH
36293: LD_VAR 0 10
36297: ST_TO_ADDR
// end ;
36298: GO 36179
36300: POP
36301: POP
// result := array ;
36302: LD_ADDR_VAR 0 5
36306: PUSH
36307: LD_VAR 0 1
36311: ST_TO_ADDR
// end ;
36312: LD_VAR 0 5
36316: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36317: LD_INT 0
36319: PPUSH
36320: PPUSH
// result := 0 ;
36321: LD_ADDR_VAR 0 3
36325: PUSH
36326: LD_INT 0
36328: ST_TO_ADDR
// if not array or not value in array then
36329: LD_VAR 0 1
36333: NOT
36334: PUSH
36335: LD_VAR 0 2
36339: PUSH
36340: LD_VAR 0 1
36344: IN
36345: NOT
36346: OR
36347: IFFALSE 36351
// exit ;
36349: GO 36405
// for i = 1 to array do
36351: LD_ADDR_VAR 0 4
36355: PUSH
36356: DOUBLE
36357: LD_INT 1
36359: DEC
36360: ST_TO_ADDR
36361: LD_VAR 0 1
36365: PUSH
36366: FOR_TO
36367: IFFALSE 36403
// if value = array [ i ] then
36369: LD_VAR 0 2
36373: PUSH
36374: LD_VAR 0 1
36378: PUSH
36379: LD_VAR 0 4
36383: ARRAY
36384: EQUAL
36385: IFFALSE 36401
// begin result := i ;
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_VAR 0 4
36396: ST_TO_ADDR
// exit ;
36397: POP
36398: POP
36399: GO 36405
// end ;
36401: GO 36366
36403: POP
36404: POP
// end ;
36405: LD_VAR 0 3
36409: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36410: LD_INT 0
36412: PPUSH
// vc_chassis := chassis ;
36413: LD_ADDR_OWVAR 37
36417: PUSH
36418: LD_VAR 0 1
36422: ST_TO_ADDR
// vc_engine := engine ;
36423: LD_ADDR_OWVAR 39
36427: PUSH
36428: LD_VAR 0 2
36432: ST_TO_ADDR
// vc_control := control ;
36433: LD_ADDR_OWVAR 38
36437: PUSH
36438: LD_VAR 0 3
36442: ST_TO_ADDR
// vc_weapon := weapon ;
36443: LD_ADDR_OWVAR 40
36447: PUSH
36448: LD_VAR 0 4
36452: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36453: LD_ADDR_OWVAR 41
36457: PUSH
36458: LD_VAR 0 5
36462: ST_TO_ADDR
// end ;
36463: LD_VAR 0 6
36467: RET
// export function WantPlant ( unit ) ; var task ; begin
36468: LD_INT 0
36470: PPUSH
36471: PPUSH
// result := false ;
36472: LD_ADDR_VAR 0 2
36476: PUSH
36477: LD_INT 0
36479: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 437
36494: ST_TO_ADDR
// if task then
36495: LD_VAR 0 3
36499: IFFALSE 36527
// if task [ 1 ] [ 1 ] = p then
36501: LD_VAR 0 3
36505: PUSH
36506: LD_INT 1
36508: ARRAY
36509: PUSH
36510: LD_INT 1
36512: ARRAY
36513: PUSH
36514: LD_STRING p
36516: EQUAL
36517: IFFALSE 36527
// result := true ;
36519: LD_ADDR_VAR 0 2
36523: PUSH
36524: LD_INT 1
36526: ST_TO_ADDR
// end ;
36527: LD_VAR 0 2
36531: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36532: LD_INT 0
36534: PPUSH
36535: PPUSH
36536: PPUSH
36537: PPUSH
// if pos < 1 then
36538: LD_VAR 0 2
36542: PUSH
36543: LD_INT 1
36545: LESS
36546: IFFALSE 36550
// exit ;
36548: GO 36853
// if pos = 1 then
36550: LD_VAR 0 2
36554: PUSH
36555: LD_INT 1
36557: EQUAL
36558: IFFALSE 36591
// result := Replace ( arr , pos [ 1 ] , value ) else
36560: LD_ADDR_VAR 0 4
36564: PUSH
36565: LD_VAR 0 1
36569: PPUSH
36570: LD_VAR 0 2
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: PPUSH
36579: LD_VAR 0 3
36583: PPUSH
36584: CALL_OW 1
36588: ST_TO_ADDR
36589: GO 36853
// begin tmp := arr ;
36591: LD_ADDR_VAR 0 6
36595: PUSH
36596: LD_VAR 0 1
36600: ST_TO_ADDR
// s_arr := [ tmp ] ;
36601: LD_ADDR_VAR 0 7
36605: PUSH
36606: LD_VAR 0 6
36610: PUSH
36611: EMPTY
36612: LIST
36613: ST_TO_ADDR
// for i = 1 to pos - 1 do
36614: LD_ADDR_VAR 0 5
36618: PUSH
36619: DOUBLE
36620: LD_INT 1
36622: DEC
36623: ST_TO_ADDR
36624: LD_VAR 0 2
36628: PUSH
36629: LD_INT 1
36631: MINUS
36632: PUSH
36633: FOR_TO
36634: IFFALSE 36679
// begin tmp := tmp [ pos [ i ] ] ;
36636: LD_ADDR_VAR 0 6
36640: PUSH
36641: LD_VAR 0 6
36645: PUSH
36646: LD_VAR 0 2
36650: PUSH
36651: LD_VAR 0 5
36655: ARRAY
36656: ARRAY
36657: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36658: LD_ADDR_VAR 0 7
36662: PUSH
36663: LD_VAR 0 7
36667: PUSH
36668: LD_VAR 0 6
36672: PUSH
36673: EMPTY
36674: LIST
36675: ADD
36676: ST_TO_ADDR
// end ;
36677: GO 36633
36679: POP
36680: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36681: LD_ADDR_VAR 0 6
36685: PUSH
36686: LD_VAR 0 6
36690: PPUSH
36691: LD_VAR 0 2
36695: PUSH
36696: LD_VAR 0 2
36700: ARRAY
36701: PPUSH
36702: LD_VAR 0 3
36706: PPUSH
36707: CALL_OW 1
36711: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36712: LD_ADDR_VAR 0 7
36716: PUSH
36717: LD_VAR 0 7
36721: PPUSH
36722: LD_VAR 0 7
36726: PPUSH
36727: LD_VAR 0 6
36731: PPUSH
36732: CALL_OW 1
36736: ST_TO_ADDR
// for i = s_arr downto 2 do
36737: LD_ADDR_VAR 0 5
36741: PUSH
36742: DOUBLE
36743: LD_VAR 0 7
36747: INC
36748: ST_TO_ADDR
36749: LD_INT 2
36751: PUSH
36752: FOR_DOWNTO
36753: IFFALSE 36837
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36755: LD_ADDR_VAR 0 6
36759: PUSH
36760: LD_VAR 0 7
36764: PUSH
36765: LD_VAR 0 5
36769: PUSH
36770: LD_INT 1
36772: MINUS
36773: ARRAY
36774: PPUSH
36775: LD_VAR 0 2
36779: PUSH
36780: LD_VAR 0 5
36784: PUSH
36785: LD_INT 1
36787: MINUS
36788: ARRAY
36789: PPUSH
36790: LD_VAR 0 7
36794: PUSH
36795: LD_VAR 0 5
36799: ARRAY
36800: PPUSH
36801: CALL_OW 1
36805: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36806: LD_ADDR_VAR 0 7
36810: PUSH
36811: LD_VAR 0 7
36815: PPUSH
36816: LD_VAR 0 5
36820: PUSH
36821: LD_INT 1
36823: MINUS
36824: PPUSH
36825: LD_VAR 0 6
36829: PPUSH
36830: CALL_OW 1
36834: ST_TO_ADDR
// end ;
36835: GO 36752
36837: POP
36838: POP
// result := s_arr [ 1 ] ;
36839: LD_ADDR_VAR 0 4
36843: PUSH
36844: LD_VAR 0 7
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: ST_TO_ADDR
// end ; end ;
36853: LD_VAR 0 4
36857: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36858: LD_INT 0
36860: PPUSH
36861: PPUSH
// if not list then
36862: LD_VAR 0 1
36866: NOT
36867: IFFALSE 36871
// exit ;
36869: GO 36962
// i := list [ pos1 ] ;
36871: LD_ADDR_VAR 0 5
36875: PUSH
36876: LD_VAR 0 1
36880: PUSH
36881: LD_VAR 0 2
36885: ARRAY
36886: ST_TO_ADDR
// if not i then
36887: LD_VAR 0 5
36891: NOT
36892: IFFALSE 36896
// exit ;
36894: GO 36962
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36896: LD_ADDR_VAR 0 1
36900: PUSH
36901: LD_VAR 0 1
36905: PPUSH
36906: LD_VAR 0 2
36910: PPUSH
36911: LD_VAR 0 1
36915: PUSH
36916: LD_VAR 0 3
36920: ARRAY
36921: PPUSH
36922: CALL_OW 1
36926: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36927: LD_ADDR_VAR 0 1
36931: PUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: LD_VAR 0 3
36941: PPUSH
36942: LD_VAR 0 5
36946: PPUSH
36947: CALL_OW 1
36951: ST_TO_ADDR
// result := list ;
36952: LD_ADDR_VAR 0 4
36956: PUSH
36957: LD_VAR 0 1
36961: ST_TO_ADDR
// end ;
36962: LD_VAR 0 4
36966: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36967: LD_INT 0
36969: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36970: LD_ADDR_VAR 0 5
36974: PUSH
36975: LD_VAR 0 1
36979: PPUSH
36980: CALL_OW 250
36984: PPUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 251
36994: PPUSH
36995: LD_VAR 0 2
36999: PPUSH
37000: LD_VAR 0 3
37004: PPUSH
37005: LD_VAR 0 4
37009: PPUSH
37010: CALL 37020 0 5
37014: ST_TO_ADDR
// end ;
37015: LD_VAR 0 5
37019: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37020: LD_INT 0
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
// if not list then
37026: LD_VAR 0 3
37030: NOT
37031: IFFALSE 37035
// exit ;
37033: GO 37423
// result := [ ] ;
37035: LD_ADDR_VAR 0 6
37039: PUSH
37040: EMPTY
37041: ST_TO_ADDR
// for i in list do
37042: LD_ADDR_VAR 0 7
37046: PUSH
37047: LD_VAR 0 3
37051: PUSH
37052: FOR_IN
37053: IFFALSE 37255
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37055: LD_ADDR_VAR 0 9
37059: PUSH
37060: LD_VAR 0 7
37064: PPUSH
37065: LD_VAR 0 1
37069: PPUSH
37070: LD_VAR 0 2
37074: PPUSH
37075: CALL_OW 297
37079: ST_TO_ADDR
// if not result then
37080: LD_VAR 0 6
37084: NOT
37085: IFFALSE 37111
// result := [ [ i , tmp ] ] else
37087: LD_ADDR_VAR 0 6
37091: PUSH
37092: LD_VAR 0 7
37096: PUSH
37097: LD_VAR 0 9
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: ST_TO_ADDR
37109: GO 37253
// begin if result [ result ] [ 2 ] < tmp then
37111: LD_VAR 0 6
37115: PUSH
37116: LD_VAR 0 6
37120: ARRAY
37121: PUSH
37122: LD_INT 2
37124: ARRAY
37125: PUSH
37126: LD_VAR 0 9
37130: LESS
37131: IFFALSE 37173
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37133: LD_ADDR_VAR 0 6
37137: PUSH
37138: LD_VAR 0 6
37142: PPUSH
37143: LD_VAR 0 6
37147: PUSH
37148: LD_INT 1
37150: PLUS
37151: PPUSH
37152: LD_VAR 0 7
37156: PUSH
37157: LD_VAR 0 9
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PPUSH
37166: CALL_OW 2
37170: ST_TO_ADDR
37171: GO 37253
// for j = 1 to result do
37173: LD_ADDR_VAR 0 8
37177: PUSH
37178: DOUBLE
37179: LD_INT 1
37181: DEC
37182: ST_TO_ADDR
37183: LD_VAR 0 6
37187: PUSH
37188: FOR_TO
37189: IFFALSE 37251
// begin if tmp < result [ j ] [ 2 ] then
37191: LD_VAR 0 9
37195: PUSH
37196: LD_VAR 0 6
37200: PUSH
37201: LD_VAR 0 8
37205: ARRAY
37206: PUSH
37207: LD_INT 2
37209: ARRAY
37210: LESS
37211: IFFALSE 37249
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37213: LD_ADDR_VAR 0 6
37217: PUSH
37218: LD_VAR 0 6
37222: PPUSH
37223: LD_VAR 0 8
37227: PPUSH
37228: LD_VAR 0 7
37232: PUSH
37233: LD_VAR 0 9
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 2
37246: ST_TO_ADDR
// break ;
37247: GO 37251
// end ; end ;
37249: GO 37188
37251: POP
37252: POP
// end ; end ;
37253: GO 37052
37255: POP
37256: POP
// if result and not asc then
37257: LD_VAR 0 6
37261: PUSH
37262: LD_VAR 0 4
37266: NOT
37267: AND
37268: IFFALSE 37343
// begin tmp := result ;
37270: LD_ADDR_VAR 0 9
37274: PUSH
37275: LD_VAR 0 6
37279: ST_TO_ADDR
// for i = tmp downto 1 do
37280: LD_ADDR_VAR 0 7
37284: PUSH
37285: DOUBLE
37286: LD_VAR 0 9
37290: INC
37291: ST_TO_ADDR
37292: LD_INT 1
37294: PUSH
37295: FOR_DOWNTO
37296: IFFALSE 37341
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37298: LD_ADDR_VAR 0 6
37302: PUSH
37303: LD_VAR 0 6
37307: PPUSH
37308: LD_VAR 0 9
37312: PUSH
37313: LD_VAR 0 7
37317: MINUS
37318: PUSH
37319: LD_INT 1
37321: PLUS
37322: PPUSH
37323: LD_VAR 0 9
37327: PUSH
37328: LD_VAR 0 7
37332: ARRAY
37333: PPUSH
37334: CALL_OW 1
37338: ST_TO_ADDR
37339: GO 37295
37341: POP
37342: POP
// end ; tmp := [ ] ;
37343: LD_ADDR_VAR 0 9
37347: PUSH
37348: EMPTY
37349: ST_TO_ADDR
// if mode then
37350: LD_VAR 0 5
37354: IFFALSE 37423
// begin for i = 1 to result do
37356: LD_ADDR_VAR 0 7
37360: PUSH
37361: DOUBLE
37362: LD_INT 1
37364: DEC
37365: ST_TO_ADDR
37366: LD_VAR 0 6
37370: PUSH
37371: FOR_TO
37372: IFFALSE 37411
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37374: LD_ADDR_VAR 0 9
37378: PUSH
37379: LD_VAR 0 9
37383: PPUSH
37384: LD_VAR 0 7
37388: PPUSH
37389: LD_VAR 0 6
37393: PUSH
37394: LD_VAR 0 7
37398: ARRAY
37399: PUSH
37400: LD_INT 1
37402: ARRAY
37403: PPUSH
37404: CALL_OW 1
37408: ST_TO_ADDR
37409: GO 37371
37411: POP
37412: POP
// result := tmp ;
37413: LD_ADDR_VAR 0 6
37417: PUSH
37418: LD_VAR 0 9
37422: ST_TO_ADDR
// end ; end ;
37423: LD_VAR 0 6
37427: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37428: LD_INT 0
37430: PPUSH
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37436: LD_ADDR_VAR 0 5
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// if not x or not y then
37458: LD_VAR 0 2
37462: NOT
37463: PUSH
37464: LD_VAR 0 3
37468: NOT
37469: OR
37470: IFFALSE 37474
// exit ;
37472: GO 39120
// if not range then
37474: LD_VAR 0 4
37478: NOT
37479: IFFALSE 37489
// range := 10 ;
37481: LD_ADDR_VAR 0 4
37485: PUSH
37486: LD_INT 10
37488: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37489: LD_ADDR_VAR 0 8
37493: PUSH
37494: LD_INT 81
37496: PUSH
37497: LD_VAR 0 1
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 92
37508: PUSH
37509: LD_VAR 0 2
37513: PUSH
37514: LD_VAR 0 3
37518: PUSH
37519: LD_VAR 0 4
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 3
37532: PUSH
37533: LD_INT 21
37535: PUSH
37536: LD_INT 3
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: PPUSH
37552: CALL_OW 69
37556: ST_TO_ADDR
// if not tmp then
37557: LD_VAR 0 8
37561: NOT
37562: IFFALSE 37566
// exit ;
37564: GO 39120
// for i in tmp do
37566: LD_ADDR_VAR 0 6
37570: PUSH
37571: LD_VAR 0 8
37575: PUSH
37576: FOR_IN
37577: IFFALSE 39095
// begin points := [ 0 , 0 , 0 ] ;
37579: LD_ADDR_VAR 0 9
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: ST_TO_ADDR
// bpoints := 1 ;
37598: LD_ADDR_VAR 0 10
37602: PUSH
37603: LD_INT 1
37605: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37606: LD_VAR 0 6
37610: PPUSH
37611: CALL_OW 247
37615: PUSH
37616: LD_INT 1
37618: DOUBLE
37619: EQUAL
37620: IFTRUE 37624
37622: GO 38202
37624: POP
// begin if GetClass ( i ) = 1 then
37625: LD_VAR 0 6
37629: PPUSH
37630: CALL_OW 257
37634: PUSH
37635: LD_INT 1
37637: EQUAL
37638: IFFALSE 37659
// points := [ 10 , 5 , 3 ] ;
37640: LD_ADDR_VAR 0 9
37644: PUSH
37645: LD_INT 10
37647: PUSH
37648: LD_INT 5
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37659: LD_VAR 0 6
37663: PPUSH
37664: CALL_OW 257
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 4
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: IN
37683: IFFALSE 37704
// points := [ 3 , 2 , 1 ] ;
37685: LD_ADDR_VAR 0 9
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37704: LD_VAR 0 6
37708: PPUSH
37709: CALL_OW 257
37713: PUSH
37714: LD_INT 5
37716: EQUAL
37717: IFFALSE 37738
// points := [ 130 , 5 , 2 ] ;
37719: LD_ADDR_VAR 0 9
37723: PUSH
37724: LD_INT 130
37726: PUSH
37727: LD_INT 5
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37738: LD_VAR 0 6
37742: PPUSH
37743: CALL_OW 257
37747: PUSH
37748: LD_INT 8
37750: EQUAL
37751: IFFALSE 37772
// points := [ 35 , 35 , 30 ] ;
37753: LD_ADDR_VAR 0 9
37757: PUSH
37758: LD_INT 35
37760: PUSH
37761: LD_INT 35
37763: PUSH
37764: LD_INT 30
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: LIST
37771: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37772: LD_VAR 0 6
37776: PPUSH
37777: CALL_OW 257
37781: PUSH
37782: LD_INT 9
37784: EQUAL
37785: IFFALSE 37806
// points := [ 20 , 55 , 40 ] ;
37787: LD_ADDR_VAR 0 9
37791: PUSH
37792: LD_INT 20
37794: PUSH
37795: LD_INT 55
37797: PUSH
37798: LD_INT 40
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37806: LD_VAR 0 6
37810: PPUSH
37811: CALL_OW 257
37815: PUSH
37816: LD_INT 12
37818: PUSH
37819: LD_INT 16
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: IN
37826: IFFALSE 37847
// points := [ 5 , 3 , 2 ] ;
37828: LD_ADDR_VAR 0 9
37832: PUSH
37833: LD_INT 5
37835: PUSH
37836: LD_INT 3
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37847: LD_VAR 0 6
37851: PPUSH
37852: CALL_OW 257
37856: PUSH
37857: LD_INT 17
37859: EQUAL
37860: IFFALSE 37881
// points := [ 100 , 50 , 75 ] ;
37862: LD_ADDR_VAR 0 9
37866: PUSH
37867: LD_INT 100
37869: PUSH
37870: LD_INT 50
37872: PUSH
37873: LD_INT 75
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37881: LD_VAR 0 6
37885: PPUSH
37886: CALL_OW 257
37890: PUSH
37891: LD_INT 15
37893: EQUAL
37894: IFFALSE 37915
// points := [ 10 , 5 , 3 ] ;
37896: LD_ADDR_VAR 0 9
37900: PUSH
37901: LD_INT 10
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: LD_INT 3
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37915: LD_VAR 0 6
37919: PPUSH
37920: CALL_OW 257
37924: PUSH
37925: LD_INT 14
37927: EQUAL
37928: IFFALSE 37949
// points := [ 10 , 0 , 0 ] ;
37930: LD_ADDR_VAR 0 9
37934: PUSH
37935: LD_INT 10
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37949: LD_VAR 0 6
37953: PPUSH
37954: CALL_OW 257
37958: PUSH
37959: LD_INT 11
37961: EQUAL
37962: IFFALSE 37983
// points := [ 30 , 10 , 5 ] ;
37964: LD_ADDR_VAR 0 9
37968: PUSH
37969: LD_INT 30
37971: PUSH
37972: LD_INT 10
37974: PUSH
37975: LD_INT 5
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37983: LD_VAR 0 1
37987: PPUSH
37988: LD_INT 5
37990: PPUSH
37991: CALL_OW 321
37995: PUSH
37996: LD_INT 2
37998: EQUAL
37999: IFFALSE 38016
// bpoints := bpoints * 1.8 ;
38001: LD_ADDR_VAR 0 10
38005: PUSH
38006: LD_VAR 0 10
38010: PUSH
38011: LD_REAL  1.80000000000000E+0000
38014: MUL
38015: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38016: LD_VAR 0 6
38020: PPUSH
38021: CALL_OW 257
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 3
38034: PUSH
38035: LD_INT 4
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: IN
38044: PUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_INT 51
38052: PPUSH
38053: CALL_OW 321
38057: PUSH
38058: LD_INT 2
38060: EQUAL
38061: AND
38062: IFFALSE 38079
// bpoints := bpoints * 1.2 ;
38064: LD_ADDR_VAR 0 10
38068: PUSH
38069: LD_VAR 0 10
38073: PUSH
38074: LD_REAL  1.20000000000000E+0000
38077: MUL
38078: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38079: LD_VAR 0 6
38083: PPUSH
38084: CALL_OW 257
38088: PUSH
38089: LD_INT 5
38091: PUSH
38092: LD_INT 7
38094: PUSH
38095: LD_INT 9
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: LIST
38102: IN
38103: PUSH
38104: LD_VAR 0 1
38108: PPUSH
38109: LD_INT 52
38111: PPUSH
38112: CALL_OW 321
38116: PUSH
38117: LD_INT 2
38119: EQUAL
38120: AND
38121: IFFALSE 38138
// bpoints := bpoints * 1.5 ;
38123: LD_ADDR_VAR 0 10
38127: PUSH
38128: LD_VAR 0 10
38132: PUSH
38133: LD_REAL  1.50000000000000E+0000
38136: MUL
38137: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38138: LD_VAR 0 1
38142: PPUSH
38143: LD_INT 66
38145: PPUSH
38146: CALL_OW 321
38150: PUSH
38151: LD_INT 2
38153: EQUAL
38154: IFFALSE 38171
// bpoints := bpoints * 1.1 ;
38156: LD_ADDR_VAR 0 10
38160: PUSH
38161: LD_VAR 0 10
38165: PUSH
38166: LD_REAL  1.10000000000000E+0000
38169: MUL
38170: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38171: LD_ADDR_VAR 0 10
38175: PUSH
38176: LD_VAR 0 10
38180: PUSH
38181: LD_VAR 0 6
38185: PPUSH
38186: LD_INT 1
38188: PPUSH
38189: CALL_OW 259
38193: PUSH
38194: LD_REAL  1.15000000000000E+0000
38197: MUL
38198: MUL
38199: ST_TO_ADDR
// end ; unit_vehicle :
38200: GO 39024
38202: LD_INT 2
38204: DOUBLE
38205: EQUAL
38206: IFTRUE 38210
38208: GO 39012
38210: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38211: LD_VAR 0 6
38215: PPUSH
38216: CALL_OW 264
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 42
38226: PUSH
38227: LD_INT 24
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: IN
38235: IFFALSE 38256
// points := [ 25 , 5 , 3 ] ;
38237: LD_ADDR_VAR 0 9
38241: PUSH
38242: LD_INT 25
38244: PUSH
38245: LD_INT 5
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38256: LD_VAR 0 6
38260: PPUSH
38261: CALL_OW 264
38265: PUSH
38266: LD_INT 4
38268: PUSH
38269: LD_INT 43
38271: PUSH
38272: LD_INT 25
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: IN
38280: IFFALSE 38301
// points := [ 40 , 15 , 5 ] ;
38282: LD_ADDR_VAR 0 9
38286: PUSH
38287: LD_INT 40
38289: PUSH
38290: LD_INT 15
38292: PUSH
38293: LD_INT 5
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38301: LD_VAR 0 6
38305: PPUSH
38306: CALL_OW 264
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: LD_INT 23
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: IN
38321: IFFALSE 38342
// points := [ 7 , 25 , 8 ] ;
38323: LD_ADDR_VAR 0 9
38327: PUSH
38328: LD_INT 7
38330: PUSH
38331: LD_INT 25
38333: PUSH
38334: LD_INT 8
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38342: LD_VAR 0 6
38346: PPUSH
38347: CALL_OW 264
38351: PUSH
38352: LD_INT 5
38354: PUSH
38355: LD_INT 27
38357: PUSH
38358: LD_INT 44
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: LIST
38365: IN
38366: IFFALSE 38387
// points := [ 14 , 50 , 16 ] ;
38368: LD_ADDR_VAR 0 9
38372: PUSH
38373: LD_INT 14
38375: PUSH
38376: LD_INT 50
38378: PUSH
38379: LD_INT 16
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38387: LD_VAR 0 6
38391: PPUSH
38392: CALL_OW 264
38396: PUSH
38397: LD_INT 6
38399: PUSH
38400: LD_INT 46
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: IN
38407: IFFALSE 38428
// points := [ 32 , 120 , 70 ] ;
38409: LD_ADDR_VAR 0 9
38413: PUSH
38414: LD_INT 32
38416: PUSH
38417: LD_INT 120
38419: PUSH
38420: LD_INT 70
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: LIST
38427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38428: LD_VAR 0 6
38432: PPUSH
38433: CALL_OW 264
38437: PUSH
38438: LD_INT 7
38440: PUSH
38441: LD_INT 28
38443: PUSH
38444: LD_INT 45
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: IN
38452: IFFALSE 38473
// points := [ 35 , 20 , 45 ] ;
38454: LD_ADDR_VAR 0 9
38458: PUSH
38459: LD_INT 35
38461: PUSH
38462: LD_INT 20
38464: PUSH
38465: LD_INT 45
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38473: LD_VAR 0 6
38477: PPUSH
38478: CALL_OW 264
38482: PUSH
38483: LD_INT 47
38485: PUSH
38486: EMPTY
38487: LIST
38488: IN
38489: IFFALSE 38510
// points := [ 67 , 45 , 75 ] ;
38491: LD_ADDR_VAR 0 9
38495: PUSH
38496: LD_INT 67
38498: PUSH
38499: LD_INT 45
38501: PUSH
38502: LD_INT 75
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38510: LD_VAR 0 6
38514: PPUSH
38515: CALL_OW 264
38519: PUSH
38520: LD_INT 26
38522: PUSH
38523: EMPTY
38524: LIST
38525: IN
38526: IFFALSE 38547
// points := [ 120 , 30 , 80 ] ;
38528: LD_ADDR_VAR 0 9
38532: PUSH
38533: LD_INT 120
38535: PUSH
38536: LD_INT 30
38538: PUSH
38539: LD_INT 80
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38547: LD_VAR 0 6
38551: PPUSH
38552: CALL_OW 264
38556: PUSH
38557: LD_INT 22
38559: PUSH
38560: EMPTY
38561: LIST
38562: IN
38563: IFFALSE 38584
// points := [ 40 , 1 , 1 ] ;
38565: LD_ADDR_VAR 0 9
38569: PUSH
38570: LD_INT 40
38572: PUSH
38573: LD_INT 1
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38584: LD_VAR 0 6
38588: PPUSH
38589: CALL_OW 264
38593: PUSH
38594: LD_INT 29
38596: PUSH
38597: EMPTY
38598: LIST
38599: IN
38600: IFFALSE 38621
// points := [ 70 , 200 , 400 ] ;
38602: LD_ADDR_VAR 0 9
38606: PUSH
38607: LD_INT 70
38609: PUSH
38610: LD_INT 200
38612: PUSH
38613: LD_INT 400
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38621: LD_VAR 0 6
38625: PPUSH
38626: CALL_OW 264
38630: PUSH
38631: LD_INT 14
38633: PUSH
38634: LD_INT 53
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: IN
38641: IFFALSE 38662
// points := [ 40 , 10 , 20 ] ;
38643: LD_ADDR_VAR 0 9
38647: PUSH
38648: LD_INT 40
38650: PUSH
38651: LD_INT 10
38653: PUSH
38654: LD_INT 20
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38662: LD_VAR 0 6
38666: PPUSH
38667: CALL_OW 264
38671: PUSH
38672: LD_INT 9
38674: PUSH
38675: EMPTY
38676: LIST
38677: IN
38678: IFFALSE 38699
// points := [ 5 , 70 , 20 ] ;
38680: LD_ADDR_VAR 0 9
38684: PUSH
38685: LD_INT 5
38687: PUSH
38688: LD_INT 70
38690: PUSH
38691: LD_INT 20
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38699: LD_VAR 0 6
38703: PPUSH
38704: CALL_OW 264
38708: PUSH
38709: LD_INT 10
38711: PUSH
38712: EMPTY
38713: LIST
38714: IN
38715: IFFALSE 38736
// points := [ 35 , 110 , 70 ] ;
38717: LD_ADDR_VAR 0 9
38721: PUSH
38722: LD_INT 35
38724: PUSH
38725: LD_INT 110
38727: PUSH
38728: LD_INT 70
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38736: LD_VAR 0 6
38740: PPUSH
38741: CALL_OW 265
38745: PUSH
38746: LD_INT 25
38748: EQUAL
38749: IFFALSE 38770
// points := [ 80 , 65 , 100 ] ;
38751: LD_ADDR_VAR 0 9
38755: PUSH
38756: LD_INT 80
38758: PUSH
38759: LD_INT 65
38761: PUSH
38762: LD_INT 100
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38770: LD_VAR 0 6
38774: PPUSH
38775: CALL_OW 263
38779: PUSH
38780: LD_INT 1
38782: EQUAL
38783: IFFALSE 38818
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38785: LD_ADDR_VAR 0 10
38789: PUSH
38790: LD_VAR 0 10
38794: PUSH
38795: LD_VAR 0 6
38799: PPUSH
38800: CALL_OW 311
38804: PPUSH
38805: LD_INT 3
38807: PPUSH
38808: CALL_OW 259
38812: PUSH
38813: LD_INT 4
38815: MUL
38816: MUL
38817: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38818: LD_VAR 0 6
38822: PPUSH
38823: CALL_OW 263
38827: PUSH
38828: LD_INT 2
38830: EQUAL
38831: IFFALSE 38882
// begin j := IsControledBy ( i ) ;
38833: LD_ADDR_VAR 0 7
38837: PUSH
38838: LD_VAR 0 6
38842: PPUSH
38843: CALL_OW 312
38847: ST_TO_ADDR
// if j then
38848: LD_VAR 0 7
38852: IFFALSE 38882
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38854: LD_ADDR_VAR 0 10
38858: PUSH
38859: LD_VAR 0 10
38863: PUSH
38864: LD_VAR 0 7
38868: PPUSH
38869: LD_INT 3
38871: PPUSH
38872: CALL_OW 259
38876: PUSH
38877: LD_INT 3
38879: MUL
38880: MUL
38881: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38882: LD_VAR 0 6
38886: PPUSH
38887: CALL_OW 264
38891: PUSH
38892: LD_INT 5
38894: PUSH
38895: LD_INT 6
38897: PUSH
38898: LD_INT 46
38900: PUSH
38901: LD_INT 44
38903: PUSH
38904: LD_INT 47
38906: PUSH
38907: LD_INT 45
38909: PUSH
38910: LD_INT 28
38912: PUSH
38913: LD_INT 7
38915: PUSH
38916: LD_INT 27
38918: PUSH
38919: LD_INT 29
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: IN
38934: PUSH
38935: LD_VAR 0 1
38939: PPUSH
38940: LD_INT 52
38942: PPUSH
38943: CALL_OW 321
38947: PUSH
38948: LD_INT 2
38950: EQUAL
38951: AND
38952: IFFALSE 38969
// bpoints := bpoints * 1.2 ;
38954: LD_ADDR_VAR 0 10
38958: PUSH
38959: LD_VAR 0 10
38963: PUSH
38964: LD_REAL  1.20000000000000E+0000
38967: MUL
38968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38969: LD_VAR 0 6
38973: PPUSH
38974: CALL_OW 264
38978: PUSH
38979: LD_INT 6
38981: PUSH
38982: LD_INT 46
38984: PUSH
38985: LD_INT 47
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: IN
38993: IFFALSE 39010
// bpoints := bpoints * 1.2 ;
38995: LD_ADDR_VAR 0 10
38999: PUSH
39000: LD_VAR 0 10
39004: PUSH
39005: LD_REAL  1.20000000000000E+0000
39008: MUL
39009: ST_TO_ADDR
// end ; unit_building :
39010: GO 39024
39012: LD_INT 3
39014: DOUBLE
39015: EQUAL
39016: IFTRUE 39020
39018: GO 39023
39020: POP
// ; end ;
39021: GO 39024
39023: POP
// for j = 1 to 3 do
39024: LD_ADDR_VAR 0 7
39028: PUSH
39029: DOUBLE
39030: LD_INT 1
39032: DEC
39033: ST_TO_ADDR
39034: LD_INT 3
39036: PUSH
39037: FOR_TO
39038: IFFALSE 39091
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39040: LD_ADDR_VAR 0 5
39044: PUSH
39045: LD_VAR 0 5
39049: PPUSH
39050: LD_VAR 0 7
39054: PPUSH
39055: LD_VAR 0 5
39059: PUSH
39060: LD_VAR 0 7
39064: ARRAY
39065: PUSH
39066: LD_VAR 0 9
39070: PUSH
39071: LD_VAR 0 7
39075: ARRAY
39076: PUSH
39077: LD_VAR 0 10
39081: MUL
39082: PLUS
39083: PPUSH
39084: CALL_OW 1
39088: ST_TO_ADDR
39089: GO 39037
39091: POP
39092: POP
// end ;
39093: GO 37576
39095: POP
39096: POP
// result := Replace ( result , 4 , tmp ) ;
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_VAR 0 5
39106: PPUSH
39107: LD_INT 4
39109: PPUSH
39110: LD_VAR 0 8
39114: PPUSH
39115: CALL_OW 1
39119: ST_TO_ADDR
// end ;
39120: LD_VAR 0 5
39124: RET
// export function DangerAtRange ( unit , range ) ; begin
39125: LD_INT 0
39127: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_VAR 0 1
39137: PPUSH
39138: CALL_OW 255
39142: PPUSH
39143: LD_VAR 0 1
39147: PPUSH
39148: CALL_OW 250
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 251
39162: PPUSH
39163: LD_VAR 0 2
39167: PPUSH
39168: CALL 37428 0 4
39172: ST_TO_ADDR
// end ;
39173: LD_VAR 0 3
39177: RET
// export function DangerInArea ( side , area ) ; begin
39178: LD_INT 0
39180: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39181: LD_ADDR_VAR 0 3
39185: PUSH
39186: LD_VAR 0 2
39190: PPUSH
39191: LD_INT 81
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PPUSH
39203: CALL_OW 70
39207: ST_TO_ADDR
// end ;
39208: LD_VAR 0 3
39212: RET
// export function IsExtension ( b ) ; begin
39213: LD_INT 0
39215: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39216: LD_ADDR_VAR 0 2
39220: PUSH
39221: LD_VAR 0 1
39225: PUSH
39226: LD_INT 23
39228: PUSH
39229: LD_INT 20
39231: PUSH
39232: LD_INT 22
39234: PUSH
39235: LD_INT 17
39237: PUSH
39238: LD_INT 24
39240: PUSH
39241: LD_INT 21
39243: PUSH
39244: LD_INT 19
39246: PUSH
39247: LD_INT 16
39249: PUSH
39250: LD_INT 25
39252: PUSH
39253: LD_INT 18
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: IN
39268: ST_TO_ADDR
// end ;
39269: LD_VAR 0 2
39273: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39274: LD_INT 0
39276: PPUSH
39277: PPUSH
39278: PPUSH
// result := [ ] ;
39279: LD_ADDR_VAR 0 3
39283: PUSH
39284: EMPTY
39285: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39286: LD_ADDR_VAR 0 4
39290: PUSH
39291: LD_VAR 0 2
39295: PPUSH
39296: LD_INT 21
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PPUSH
39306: CALL_OW 70
39310: ST_TO_ADDR
// if not tmp then
39311: LD_VAR 0 4
39315: NOT
39316: IFFALSE 39320
// exit ;
39318: GO 39378
// for i in tmp do
39320: LD_ADDR_VAR 0 5
39324: PUSH
39325: LD_VAR 0 4
39329: PUSH
39330: FOR_IN
39331: IFFALSE 39366
// if GetBase ( i ) <> base then
39333: LD_VAR 0 5
39337: PPUSH
39338: CALL_OW 274
39342: PUSH
39343: LD_VAR 0 1
39347: NONEQUAL
39348: IFFALSE 39364
// ComLinkToBase ( base , i ) ;
39350: LD_VAR 0 1
39354: PPUSH
39355: LD_VAR 0 5
39359: PPUSH
39360: CALL_OW 169
39364: GO 39330
39366: POP
39367: POP
// result := tmp ;
39368: LD_ADDR_VAR 0 3
39372: PUSH
39373: LD_VAR 0 4
39377: ST_TO_ADDR
// end ;
39378: LD_VAR 0 3
39382: RET
// export function ComComplete ( unit , b ) ; var i ; begin
39383: LD_INT 0
39385: PPUSH
39386: PPUSH
// if BuildingStatus ( b ) = bs_build then
39387: LD_VAR 0 2
39391: PPUSH
39392: CALL_OW 461
39396: PUSH
39397: LD_INT 1
39399: EQUAL
39400: IFFALSE 39460
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39402: LD_VAR 0 1
39406: PPUSH
39407: LD_STRING h
39409: PUSH
39410: LD_VAR 0 2
39414: PPUSH
39415: CALL_OW 250
39419: PUSH
39420: LD_VAR 0 2
39424: PPUSH
39425: CALL_OW 251
39429: PUSH
39430: LD_VAR 0 2
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: PPUSH
39456: CALL_OW 446
// end ;
39460: LD_VAR 0 3
39464: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39465: LD_INT 0
39467: PPUSH
39468: PPUSH
39469: PPUSH
39470: PPUSH
39471: PPUSH
39472: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39473: LD_VAR 0 1
39477: NOT
39478: PUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: CALL_OW 263
39488: PUSH
39489: LD_INT 2
39491: EQUAL
39492: NOT
39493: OR
39494: IFFALSE 39498
// exit ;
39496: GO 39814
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39498: LD_ADDR_VAR 0 6
39502: PUSH
39503: LD_INT 22
39505: PUSH
39506: LD_VAR 0 1
39510: PPUSH
39511: CALL_OW 255
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 30
39525: PUSH
39526: LD_INT 36
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 34
39535: PUSH
39536: LD_INT 31
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PPUSH
39552: CALL_OW 69
39556: ST_TO_ADDR
// if not tmp then
39557: LD_VAR 0 6
39561: NOT
39562: IFFALSE 39566
// exit ;
39564: GO 39814
// result := [ ] ;
39566: LD_ADDR_VAR 0 2
39570: PUSH
39571: EMPTY
39572: ST_TO_ADDR
// for i in tmp do
39573: LD_ADDR_VAR 0 3
39577: PUSH
39578: LD_VAR 0 6
39582: PUSH
39583: FOR_IN
39584: IFFALSE 39655
// begin t := UnitsInside ( i ) ;
39586: LD_ADDR_VAR 0 4
39590: PUSH
39591: LD_VAR 0 3
39595: PPUSH
39596: CALL_OW 313
39600: ST_TO_ADDR
// if t then
39601: LD_VAR 0 4
39605: IFFALSE 39653
// for j in t do
39607: LD_ADDR_VAR 0 7
39611: PUSH
39612: LD_VAR 0 4
39616: PUSH
39617: FOR_IN
39618: IFFALSE 39651
// result := Insert ( result , result + 1 , j ) ;
39620: LD_ADDR_VAR 0 2
39624: PUSH
39625: LD_VAR 0 2
39629: PPUSH
39630: LD_VAR 0 2
39634: PUSH
39635: LD_INT 1
39637: PLUS
39638: PPUSH
39639: LD_VAR 0 7
39643: PPUSH
39644: CALL_OW 2
39648: ST_TO_ADDR
39649: GO 39617
39651: POP
39652: POP
// end ;
39653: GO 39583
39655: POP
39656: POP
// if not result then
39657: LD_VAR 0 2
39661: NOT
39662: IFFALSE 39666
// exit ;
39664: GO 39814
// mech := result [ 1 ] ;
39666: LD_ADDR_VAR 0 5
39670: PUSH
39671: LD_VAR 0 2
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: ST_TO_ADDR
// if result > 1 then
39680: LD_VAR 0 2
39684: PUSH
39685: LD_INT 1
39687: GREATER
39688: IFFALSE 39800
// for i = 2 to result do
39690: LD_ADDR_VAR 0 3
39694: PUSH
39695: DOUBLE
39696: LD_INT 2
39698: DEC
39699: ST_TO_ADDR
39700: LD_VAR 0 2
39704: PUSH
39705: FOR_TO
39706: IFFALSE 39798
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39708: LD_ADDR_VAR 0 4
39712: PUSH
39713: LD_VAR 0 2
39717: PUSH
39718: LD_VAR 0 3
39722: ARRAY
39723: PPUSH
39724: LD_INT 3
39726: PPUSH
39727: CALL_OW 259
39731: PUSH
39732: LD_VAR 0 2
39736: PUSH
39737: LD_VAR 0 3
39741: ARRAY
39742: PPUSH
39743: CALL_OW 432
39747: MINUS
39748: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39749: LD_VAR 0 4
39753: PUSH
39754: LD_VAR 0 5
39758: PPUSH
39759: LD_INT 3
39761: PPUSH
39762: CALL_OW 259
39766: PUSH
39767: LD_VAR 0 5
39771: PPUSH
39772: CALL_OW 432
39776: MINUS
39777: GREATEREQUAL
39778: IFFALSE 39796
// mech := result [ i ] ;
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: LD_VAR 0 2
39789: PUSH
39790: LD_VAR 0 3
39794: ARRAY
39795: ST_TO_ADDR
// end ;
39796: GO 39705
39798: POP
39799: POP
// ComLinkTo ( vehicle , mech ) ;
39800: LD_VAR 0 1
39804: PPUSH
39805: LD_VAR 0 5
39809: PPUSH
39810: CALL_OW 135
// end ;
39814: LD_VAR 0 2
39818: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39819: LD_INT 0
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
// result := [ ] ;
39834: LD_ADDR_VAR 0 7
39838: PUSH
39839: EMPTY
39840: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39841: LD_VAR 0 1
39845: PPUSH
39846: CALL_OW 266
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: IN
39861: NOT
39862: IFFALSE 39866
// exit ;
39864: GO 41497
// if name then
39866: LD_VAR 0 3
39870: IFFALSE 39886
// SetBName ( base_dep , name ) ;
39872: LD_VAR 0 1
39876: PPUSH
39877: LD_VAR 0 3
39881: PPUSH
39882: CALL_OW 500
// base := GetBase ( base_dep ) ;
39886: LD_ADDR_VAR 0 15
39890: PUSH
39891: LD_VAR 0 1
39895: PPUSH
39896: CALL_OW 274
39900: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39901: LD_ADDR_VAR 0 16
39905: PUSH
39906: LD_VAR 0 1
39910: PPUSH
39911: CALL_OW 255
39915: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39916: LD_ADDR_VAR 0 17
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 248
39930: ST_TO_ADDR
// if sources then
39931: LD_VAR 0 5
39935: IFFALSE 39982
// for i = 1 to 3 do
39937: LD_ADDR_VAR 0 8
39941: PUSH
39942: DOUBLE
39943: LD_INT 1
39945: DEC
39946: ST_TO_ADDR
39947: LD_INT 3
39949: PUSH
39950: FOR_TO
39951: IFFALSE 39980
// AddResourceType ( base , i , sources [ i ] ) ;
39953: LD_VAR 0 15
39957: PPUSH
39958: LD_VAR 0 8
39962: PPUSH
39963: LD_VAR 0 5
39967: PUSH
39968: LD_VAR 0 8
39972: ARRAY
39973: PPUSH
39974: CALL_OW 276
39978: GO 39950
39980: POP
39981: POP
// buildings := GetBaseBuildings ( base , area ) ;
39982: LD_ADDR_VAR 0 18
39986: PUSH
39987: LD_VAR 0 15
39991: PPUSH
39992: LD_VAR 0 2
39996: PPUSH
39997: CALL 39274 0 2
40001: ST_TO_ADDR
// InitHc ;
40002: CALL_OW 19
// InitUc ;
40006: CALL_OW 18
// uc_side := side ;
40010: LD_ADDR_OWVAR 20
40014: PUSH
40015: LD_VAR 0 16
40019: ST_TO_ADDR
// uc_nation := nation ;
40020: LD_ADDR_OWVAR 21
40024: PUSH
40025: LD_VAR 0 17
40029: ST_TO_ADDR
// if buildings then
40030: LD_VAR 0 18
40034: IFFALSE 41356
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40036: LD_ADDR_VAR 0 19
40040: PUSH
40041: LD_VAR 0 18
40045: PPUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 30
40051: PUSH
40052: LD_INT 29
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 30
40061: PUSH
40062: LD_INT 30
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: PPUSH
40074: CALL_OW 72
40078: ST_TO_ADDR
// if tmp then
40079: LD_VAR 0 19
40083: IFFALSE 40131
// for i in tmp do
40085: LD_ADDR_VAR 0 8
40089: PUSH
40090: LD_VAR 0 19
40094: PUSH
40095: FOR_IN
40096: IFFALSE 40129
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40098: LD_VAR 0 8
40102: PPUSH
40103: CALL_OW 250
40107: PPUSH
40108: LD_VAR 0 8
40112: PPUSH
40113: CALL_OW 251
40117: PPUSH
40118: LD_VAR 0 16
40122: PPUSH
40123: CALL_OW 441
40127: GO 40095
40129: POP
40130: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40131: LD_VAR 0 18
40135: PPUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 30
40141: PUSH
40142: LD_INT 32
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 30
40151: PUSH
40152: LD_INT 33
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: PPUSH
40164: CALL_OW 72
40168: IFFALSE 40256
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40170: LD_ADDR_VAR 0 8
40174: PUSH
40175: LD_VAR 0 18
40179: PPUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 30
40185: PUSH
40186: LD_INT 32
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 30
40195: PUSH
40196: LD_INT 33
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: PPUSH
40208: CALL_OW 72
40212: PUSH
40213: FOR_IN
40214: IFFALSE 40254
// begin if not GetBWeapon ( i ) then
40216: LD_VAR 0 8
40220: PPUSH
40221: CALL_OW 269
40225: NOT
40226: IFFALSE 40252
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40228: LD_VAR 0 8
40232: PPUSH
40233: LD_VAR 0 8
40237: PPUSH
40238: LD_VAR 0 2
40242: PPUSH
40243: CALL 41502 0 2
40247: PPUSH
40248: CALL_OW 431
// end ;
40252: GO 40213
40254: POP
40255: POP
// end ; for i = 1 to personel do
40256: LD_ADDR_VAR 0 8
40260: PUSH
40261: DOUBLE
40262: LD_INT 1
40264: DEC
40265: ST_TO_ADDR
40266: LD_VAR 0 6
40270: PUSH
40271: FOR_TO
40272: IFFALSE 41336
// begin if i > 4 then
40274: LD_VAR 0 8
40278: PUSH
40279: LD_INT 4
40281: GREATER
40282: IFFALSE 40286
// break ;
40284: GO 41336
// case i of 1 :
40286: LD_VAR 0 8
40290: PUSH
40291: LD_INT 1
40293: DOUBLE
40294: EQUAL
40295: IFTRUE 40299
40297: GO 40379
40299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40300: LD_ADDR_VAR 0 12
40304: PUSH
40305: LD_VAR 0 18
40309: PPUSH
40310: LD_INT 22
40312: PUSH
40313: LD_VAR 0 16
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 58
40324: PUSH
40325: EMPTY
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 30
40333: PUSH
40334: LD_INT 32
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 30
40343: PUSH
40344: LD_INT 4
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 30
40353: PUSH
40354: LD_INT 5
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: PPUSH
40372: CALL_OW 72
40376: ST_TO_ADDR
40377: GO 40601
40379: LD_INT 2
40381: DOUBLE
40382: EQUAL
40383: IFTRUE 40387
40385: GO 40449
40387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40388: LD_ADDR_VAR 0 12
40392: PUSH
40393: LD_VAR 0 18
40397: PPUSH
40398: LD_INT 22
40400: PUSH
40401: LD_VAR 0 16
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: LD_INT 30
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 30
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PPUSH
40442: CALL_OW 72
40446: ST_TO_ADDR
40447: GO 40601
40449: LD_INT 3
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40519
40457: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40458: LD_ADDR_VAR 0 12
40462: PUSH
40463: LD_VAR 0 18
40467: PPUSH
40468: LD_INT 22
40470: PUSH
40471: LD_VAR 0 16
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 2
40482: PUSH
40483: LD_INT 30
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 30
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PPUSH
40512: CALL_OW 72
40516: ST_TO_ADDR
40517: GO 40601
40519: LD_INT 4
40521: DOUBLE
40522: EQUAL
40523: IFTRUE 40527
40525: GO 40600
40527: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40528: LD_ADDR_VAR 0 12
40532: PUSH
40533: LD_VAR 0 18
40537: PPUSH
40538: LD_INT 22
40540: PUSH
40541: LD_VAR 0 16
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: LD_INT 30
40555: PUSH
40556: LD_INT 6
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 30
40565: PUSH
40566: LD_INT 7
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 30
40575: PUSH
40576: LD_INT 8
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PPUSH
40593: CALL_OW 72
40597: ST_TO_ADDR
40598: GO 40601
40600: POP
// if i = 1 then
40601: LD_VAR 0 8
40605: PUSH
40606: LD_INT 1
40608: EQUAL
40609: IFFALSE 40720
// begin tmp := [ ] ;
40611: LD_ADDR_VAR 0 19
40615: PUSH
40616: EMPTY
40617: ST_TO_ADDR
// for j in f do
40618: LD_ADDR_VAR 0 9
40622: PUSH
40623: LD_VAR 0 12
40627: PUSH
40628: FOR_IN
40629: IFFALSE 40702
// if GetBType ( j ) = b_bunker then
40631: LD_VAR 0 9
40635: PPUSH
40636: CALL_OW 266
40640: PUSH
40641: LD_INT 32
40643: EQUAL
40644: IFFALSE 40671
// tmp := Insert ( tmp , 1 , j ) else
40646: LD_ADDR_VAR 0 19
40650: PUSH
40651: LD_VAR 0 19
40655: PPUSH
40656: LD_INT 1
40658: PPUSH
40659: LD_VAR 0 9
40663: PPUSH
40664: CALL_OW 2
40668: ST_TO_ADDR
40669: GO 40700
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40671: LD_ADDR_VAR 0 19
40675: PUSH
40676: LD_VAR 0 19
40680: PPUSH
40681: LD_VAR 0 19
40685: PUSH
40686: LD_INT 1
40688: PLUS
40689: PPUSH
40690: LD_VAR 0 9
40694: PPUSH
40695: CALL_OW 2
40699: ST_TO_ADDR
40700: GO 40628
40702: POP
40703: POP
// if tmp then
40704: LD_VAR 0 19
40708: IFFALSE 40720
// f := tmp ;
40710: LD_ADDR_VAR 0 12
40714: PUSH
40715: LD_VAR 0 19
40719: ST_TO_ADDR
// end ; x := personel [ i ] ;
40720: LD_ADDR_VAR 0 13
40724: PUSH
40725: LD_VAR 0 6
40729: PUSH
40730: LD_VAR 0 8
40734: ARRAY
40735: ST_TO_ADDR
// if x = - 1 then
40736: LD_VAR 0 13
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: EQUAL
40745: IFFALSE 40954
// begin for j in f do
40747: LD_ADDR_VAR 0 9
40751: PUSH
40752: LD_VAR 0 12
40756: PUSH
40757: FOR_IN
40758: IFFALSE 40950
// repeat InitHc ;
40760: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40764: LD_VAR 0 9
40768: PPUSH
40769: CALL_OW 266
40773: PUSH
40774: LD_INT 5
40776: EQUAL
40777: IFFALSE 40847
// begin if UnitsInside ( j ) < 3 then
40779: LD_VAR 0 9
40783: PPUSH
40784: CALL_OW 313
40788: PUSH
40789: LD_INT 3
40791: LESS
40792: IFFALSE 40828
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40794: LD_INT 0
40796: PPUSH
40797: LD_INT 5
40799: PUSH
40800: LD_INT 8
40802: PUSH
40803: LD_INT 9
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: PUSH
40811: LD_VAR 0 17
40815: ARRAY
40816: PPUSH
40817: LD_VAR 0 4
40821: PPUSH
40822: CALL_OW 380
40826: GO 40845
// PrepareHuman ( false , i , skill ) ;
40828: LD_INT 0
40830: PPUSH
40831: LD_VAR 0 8
40835: PPUSH
40836: LD_VAR 0 4
40840: PPUSH
40841: CALL_OW 380
// end else
40845: GO 40864
// PrepareHuman ( false , i , skill ) ;
40847: LD_INT 0
40849: PPUSH
40850: LD_VAR 0 8
40854: PPUSH
40855: LD_VAR 0 4
40859: PPUSH
40860: CALL_OW 380
// un := CreateHuman ;
40864: LD_ADDR_VAR 0 14
40868: PUSH
40869: CALL_OW 44
40873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40874: LD_ADDR_VAR 0 7
40878: PUSH
40879: LD_VAR 0 7
40883: PPUSH
40884: LD_INT 1
40886: PPUSH
40887: LD_VAR 0 14
40891: PPUSH
40892: CALL_OW 2
40896: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40897: LD_VAR 0 14
40901: PPUSH
40902: LD_VAR 0 9
40906: PPUSH
40907: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40911: LD_VAR 0 9
40915: PPUSH
40916: CALL_OW 313
40920: PUSH
40921: LD_INT 6
40923: EQUAL
40924: PUSH
40925: LD_VAR 0 9
40929: PPUSH
40930: CALL_OW 266
40934: PUSH
40935: LD_INT 32
40937: PUSH
40938: LD_INT 31
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: IN
40945: OR
40946: IFFALSE 40760
40948: GO 40757
40950: POP
40951: POP
// end else
40952: GO 41334
// for j = 1 to x do
40954: LD_ADDR_VAR 0 9
40958: PUSH
40959: DOUBLE
40960: LD_INT 1
40962: DEC
40963: ST_TO_ADDR
40964: LD_VAR 0 13
40968: PUSH
40969: FOR_TO
40970: IFFALSE 41332
// begin InitHc ;
40972: CALL_OW 19
// if not f then
40976: LD_VAR 0 12
40980: NOT
40981: IFFALSE 41070
// begin PrepareHuman ( false , i , skill ) ;
40983: LD_INT 0
40985: PPUSH
40986: LD_VAR 0 8
40990: PPUSH
40991: LD_VAR 0 4
40995: PPUSH
40996: CALL_OW 380
// un := CreateHuman ;
41000: LD_ADDR_VAR 0 14
41004: PUSH
41005: CALL_OW 44
41009: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41010: LD_ADDR_VAR 0 7
41014: PUSH
41015: LD_VAR 0 7
41019: PPUSH
41020: LD_INT 1
41022: PPUSH
41023: LD_VAR 0 14
41027: PPUSH
41028: CALL_OW 2
41032: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41033: LD_VAR 0 14
41037: PPUSH
41038: LD_VAR 0 1
41042: PPUSH
41043: CALL_OW 250
41047: PPUSH
41048: LD_VAR 0 1
41052: PPUSH
41053: CALL_OW 251
41057: PPUSH
41058: LD_INT 10
41060: PPUSH
41061: LD_INT 0
41063: PPUSH
41064: CALL_OW 50
// continue ;
41068: GO 40969
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41070: LD_VAR 0 12
41074: PUSH
41075: LD_INT 1
41077: ARRAY
41078: PPUSH
41079: CALL_OW 313
41083: PUSH
41084: LD_VAR 0 12
41088: PUSH
41089: LD_INT 1
41091: ARRAY
41092: PPUSH
41093: CALL_OW 266
41097: PUSH
41098: LD_INT 32
41100: PUSH
41101: LD_INT 31
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: IN
41108: AND
41109: PUSH
41110: LD_VAR 0 12
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: CALL_OW 313
41123: PUSH
41124: LD_INT 6
41126: EQUAL
41127: OR
41128: IFFALSE 41148
// f := Delete ( f , 1 ) ;
41130: LD_ADDR_VAR 0 12
41134: PUSH
41135: LD_VAR 0 12
41139: PPUSH
41140: LD_INT 1
41142: PPUSH
41143: CALL_OW 3
41147: ST_TO_ADDR
// if not f then
41148: LD_VAR 0 12
41152: NOT
41153: IFFALSE 41171
// begin x := x + 2 ;
41155: LD_ADDR_VAR 0 13
41159: PUSH
41160: LD_VAR 0 13
41164: PUSH
41165: LD_INT 2
41167: PLUS
41168: ST_TO_ADDR
// continue ;
41169: GO 40969
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41171: LD_VAR 0 12
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PPUSH
41180: CALL_OW 266
41184: PUSH
41185: LD_INT 5
41187: EQUAL
41188: IFFALSE 41262
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41190: LD_VAR 0 12
41194: PUSH
41195: LD_INT 1
41197: ARRAY
41198: PPUSH
41199: CALL_OW 313
41203: PUSH
41204: LD_INT 3
41206: LESS
41207: IFFALSE 41243
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41209: LD_INT 0
41211: PPUSH
41212: LD_INT 5
41214: PUSH
41215: LD_INT 8
41217: PUSH
41218: LD_INT 9
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: PUSH
41226: LD_VAR 0 17
41230: ARRAY
41231: PPUSH
41232: LD_VAR 0 4
41236: PPUSH
41237: CALL_OW 380
41241: GO 41260
// PrepareHuman ( false , i , skill ) ;
41243: LD_INT 0
41245: PPUSH
41246: LD_VAR 0 8
41250: PPUSH
41251: LD_VAR 0 4
41255: PPUSH
41256: CALL_OW 380
// end else
41260: GO 41279
// PrepareHuman ( false , i , skill ) ;
41262: LD_INT 0
41264: PPUSH
41265: LD_VAR 0 8
41269: PPUSH
41270: LD_VAR 0 4
41274: PPUSH
41275: CALL_OW 380
// un := CreateHuman ;
41279: LD_ADDR_VAR 0 14
41283: PUSH
41284: CALL_OW 44
41288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41289: LD_ADDR_VAR 0 7
41293: PUSH
41294: LD_VAR 0 7
41298: PPUSH
41299: LD_INT 1
41301: PPUSH
41302: LD_VAR 0 14
41306: PPUSH
41307: CALL_OW 2
41311: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41312: LD_VAR 0 14
41316: PPUSH
41317: LD_VAR 0 12
41321: PUSH
41322: LD_INT 1
41324: ARRAY
41325: PPUSH
41326: CALL_OW 52
// end ;
41330: GO 40969
41332: POP
41333: POP
// end ;
41334: GO 40271
41336: POP
41337: POP
// result := result ^ buildings ;
41338: LD_ADDR_VAR 0 7
41342: PUSH
41343: LD_VAR 0 7
41347: PUSH
41348: LD_VAR 0 18
41352: ADD
41353: ST_TO_ADDR
// end else
41354: GO 41497
// begin for i = 1 to personel do
41356: LD_ADDR_VAR 0 8
41360: PUSH
41361: DOUBLE
41362: LD_INT 1
41364: DEC
41365: ST_TO_ADDR
41366: LD_VAR 0 6
41370: PUSH
41371: FOR_TO
41372: IFFALSE 41495
// begin if i > 4 then
41374: LD_VAR 0 8
41378: PUSH
41379: LD_INT 4
41381: GREATER
41382: IFFALSE 41386
// break ;
41384: GO 41495
// x := personel [ i ] ;
41386: LD_ADDR_VAR 0 13
41390: PUSH
41391: LD_VAR 0 6
41395: PUSH
41396: LD_VAR 0 8
41400: ARRAY
41401: ST_TO_ADDR
// if x = - 1 then
41402: LD_VAR 0 13
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: EQUAL
41411: IFFALSE 41415
// continue ;
41413: GO 41371
// PrepareHuman ( false , i , skill ) ;
41415: LD_INT 0
41417: PPUSH
41418: LD_VAR 0 8
41422: PPUSH
41423: LD_VAR 0 4
41427: PPUSH
41428: CALL_OW 380
// un := CreateHuman ;
41432: LD_ADDR_VAR 0 14
41436: PUSH
41437: CALL_OW 44
41441: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41442: LD_VAR 0 14
41446: PPUSH
41447: LD_VAR 0 1
41451: PPUSH
41452: CALL_OW 250
41456: PPUSH
41457: LD_VAR 0 1
41461: PPUSH
41462: CALL_OW 251
41466: PPUSH
41467: LD_INT 10
41469: PPUSH
41470: LD_INT 0
41472: PPUSH
41473: CALL_OW 50
// result := result ^ un ;
41477: LD_ADDR_VAR 0 7
41481: PUSH
41482: LD_VAR 0 7
41486: PUSH
41487: LD_VAR 0 14
41491: ADD
41492: ST_TO_ADDR
// end ;
41493: GO 41371
41495: POP
41496: POP
// end ; end ;
41497: LD_VAR 0 7
41501: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41502: LD_INT 0
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
// result := false ;
41520: LD_ADDR_VAR 0 3
41524: PUSH
41525: LD_INT 0
41527: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41528: LD_VAR 0 1
41532: NOT
41533: PUSH
41534: LD_VAR 0 1
41538: PPUSH
41539: CALL_OW 266
41543: PUSH
41544: LD_INT 32
41546: PUSH
41547: LD_INT 33
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: IN
41554: NOT
41555: OR
41556: IFFALSE 41560
// exit ;
41558: GO 42696
// nat := GetNation ( tower ) ;
41560: LD_ADDR_VAR 0 12
41564: PUSH
41565: LD_VAR 0 1
41569: PPUSH
41570: CALL_OW 248
41574: ST_TO_ADDR
// side := GetSide ( tower ) ;
41575: LD_ADDR_VAR 0 16
41579: PUSH
41580: LD_VAR 0 1
41584: PPUSH
41585: CALL_OW 255
41589: ST_TO_ADDR
// x := GetX ( tower ) ;
41590: LD_ADDR_VAR 0 10
41594: PUSH
41595: LD_VAR 0 1
41599: PPUSH
41600: CALL_OW 250
41604: ST_TO_ADDR
// y := GetY ( tower ) ;
41605: LD_ADDR_VAR 0 11
41609: PUSH
41610: LD_VAR 0 1
41614: PPUSH
41615: CALL_OW 251
41619: ST_TO_ADDR
// if not x or not y then
41620: LD_VAR 0 10
41624: NOT
41625: PUSH
41626: LD_VAR 0 11
41630: NOT
41631: OR
41632: IFFALSE 41636
// exit ;
41634: GO 42696
// weapon := 0 ;
41636: LD_ADDR_VAR 0 18
41640: PUSH
41641: LD_INT 0
41643: ST_TO_ADDR
// fac_list := [ ] ;
41644: LD_ADDR_VAR 0 17
41648: PUSH
41649: EMPTY
41650: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41651: LD_ADDR_VAR 0 6
41655: PUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 274
41665: PPUSH
41666: LD_VAR 0 2
41670: PPUSH
41671: CALL 39274 0 2
41675: PPUSH
41676: LD_INT 30
41678: PUSH
41679: LD_INT 3
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PPUSH
41686: CALL_OW 72
41690: ST_TO_ADDR
// if not factories then
41691: LD_VAR 0 6
41695: NOT
41696: IFFALSE 41700
// exit ;
41698: GO 42696
// for i in factories do
41700: LD_ADDR_VAR 0 8
41704: PUSH
41705: LD_VAR 0 6
41709: PUSH
41710: FOR_IN
41711: IFFALSE 41736
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41713: LD_ADDR_VAR 0 17
41717: PUSH
41718: LD_VAR 0 17
41722: PUSH
41723: LD_VAR 0 8
41727: PPUSH
41728: CALL_OW 478
41732: UNION
41733: ST_TO_ADDR
41734: GO 41710
41736: POP
41737: POP
// if not fac_list then
41738: LD_VAR 0 17
41742: NOT
41743: IFFALSE 41747
// exit ;
41745: GO 42696
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41747: LD_ADDR_VAR 0 5
41751: PUSH
41752: LD_INT 4
41754: PUSH
41755: LD_INT 5
41757: PUSH
41758: LD_INT 9
41760: PUSH
41761: LD_INT 10
41763: PUSH
41764: LD_INT 6
41766: PUSH
41767: LD_INT 7
41769: PUSH
41770: LD_INT 11
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 27
41784: PUSH
41785: LD_INT 28
41787: PUSH
41788: LD_INT 26
41790: PUSH
41791: LD_INT 30
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 43
41802: PUSH
41803: LD_INT 44
41805: PUSH
41806: LD_INT 46
41808: PUSH
41809: LD_INT 45
41811: PUSH
41812: LD_INT 47
41814: PUSH
41815: LD_INT 49
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: PUSH
41831: LD_VAR 0 12
41835: ARRAY
41836: ST_TO_ADDR
// for i in list do
41837: LD_ADDR_VAR 0 8
41841: PUSH
41842: LD_VAR 0 5
41846: PUSH
41847: FOR_IN
41848: IFFALSE 41881
// if not i in fac_list then
41850: LD_VAR 0 8
41854: PUSH
41855: LD_VAR 0 17
41859: IN
41860: NOT
41861: IFFALSE 41879
// list := list diff i ;
41863: LD_ADDR_VAR 0 5
41867: PUSH
41868: LD_VAR 0 5
41872: PUSH
41873: LD_VAR 0 8
41877: DIFF
41878: ST_TO_ADDR
41879: GO 41847
41881: POP
41882: POP
// if not list then
41883: LD_VAR 0 5
41887: NOT
41888: IFFALSE 41892
// exit ;
41890: GO 42696
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41892: LD_VAR 0 12
41896: PUSH
41897: LD_INT 3
41899: EQUAL
41900: PUSH
41901: LD_INT 49
41903: PUSH
41904: LD_VAR 0 5
41908: IN
41909: AND
41910: PUSH
41911: LD_INT 31
41913: PPUSH
41914: LD_VAR 0 16
41918: PPUSH
41919: CALL_OW 321
41923: PUSH
41924: LD_INT 2
41926: EQUAL
41927: AND
41928: IFFALSE 41988
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41930: LD_INT 22
41932: PUSH
41933: LD_VAR 0 16
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 35
41944: PUSH
41945: LD_INT 49
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 91
41954: PUSH
41955: LD_VAR 0 1
41959: PUSH
41960: LD_INT 10
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: LIST
41972: PPUSH
41973: CALL_OW 69
41977: NOT
41978: IFFALSE 41988
// weapon := ru_time_lapser ;
41980: LD_ADDR_VAR 0 18
41984: PUSH
41985: LD_INT 49
41987: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41988: LD_VAR 0 12
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: IN
42003: PUSH
42004: LD_INT 11
42006: PUSH
42007: LD_VAR 0 5
42011: IN
42012: PUSH
42013: LD_INT 30
42015: PUSH
42016: LD_VAR 0 5
42020: IN
42021: OR
42022: AND
42023: PUSH
42024: LD_INT 6
42026: PPUSH
42027: LD_VAR 0 16
42031: PPUSH
42032: CALL_OW 321
42036: PUSH
42037: LD_INT 2
42039: EQUAL
42040: AND
42041: IFFALSE 42206
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42043: LD_INT 22
42045: PUSH
42046: LD_VAR 0 16
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: LD_INT 35
42060: PUSH
42061: LD_INT 11
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 35
42070: PUSH
42071: LD_INT 30
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 91
42085: PUSH
42086: LD_VAR 0 1
42090: PUSH
42091: LD_INT 18
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: PPUSH
42104: CALL_OW 69
42108: NOT
42109: PUSH
42110: LD_INT 22
42112: PUSH
42113: LD_VAR 0 16
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: LD_INT 30
42127: PUSH
42128: LD_INT 32
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 30
42137: PUSH
42138: LD_INT 33
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 91
42152: PUSH
42153: LD_VAR 0 1
42157: PUSH
42158: LD_INT 12
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: PUSH
42171: EMPTY
42172: LIST
42173: PPUSH
42174: CALL_OW 69
42178: PUSH
42179: LD_INT 2
42181: GREATER
42182: AND
42183: IFFALSE 42206
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42185: LD_ADDR_VAR 0 18
42189: PUSH
42190: LD_INT 11
42192: PUSH
42193: LD_INT 30
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_VAR 0 12
42204: ARRAY
42205: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42206: LD_VAR 0 18
42210: NOT
42211: PUSH
42212: LD_INT 40
42214: PPUSH
42215: LD_VAR 0 16
42219: PPUSH
42220: CALL_OW 321
42224: PUSH
42225: LD_INT 2
42227: EQUAL
42228: AND
42229: PUSH
42230: LD_INT 7
42232: PUSH
42233: LD_VAR 0 5
42237: IN
42238: PUSH
42239: LD_INT 28
42241: PUSH
42242: LD_VAR 0 5
42246: IN
42247: OR
42248: PUSH
42249: LD_INT 45
42251: PUSH
42252: LD_VAR 0 5
42256: IN
42257: OR
42258: AND
42259: IFFALSE 42513
// begin hex := GetHexInfo ( x , y ) ;
42261: LD_ADDR_VAR 0 4
42265: PUSH
42266: LD_VAR 0 10
42270: PPUSH
42271: LD_VAR 0 11
42275: PPUSH
42276: CALL_OW 546
42280: ST_TO_ADDR
// if hex [ 1 ] then
42281: LD_VAR 0 4
42285: PUSH
42286: LD_INT 1
42288: ARRAY
42289: IFFALSE 42293
// exit ;
42291: GO 42696
// height := hex [ 2 ] ;
42293: LD_ADDR_VAR 0 15
42297: PUSH
42298: LD_VAR 0 4
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42307: LD_ADDR_VAR 0 14
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 5
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// for i in tmp do
42330: LD_ADDR_VAR 0 8
42334: PUSH
42335: LD_VAR 0 14
42339: PUSH
42340: FOR_IN
42341: IFFALSE 42511
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42343: LD_ADDR_VAR 0 9
42347: PUSH
42348: LD_VAR 0 10
42352: PPUSH
42353: LD_VAR 0 8
42357: PPUSH
42358: LD_INT 5
42360: PPUSH
42361: CALL_OW 272
42365: PUSH
42366: LD_VAR 0 11
42370: PPUSH
42371: LD_VAR 0 8
42375: PPUSH
42376: LD_INT 5
42378: PPUSH
42379: CALL_OW 273
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42388: LD_VAR 0 9
42392: PUSH
42393: LD_INT 1
42395: ARRAY
42396: PPUSH
42397: LD_VAR 0 9
42401: PUSH
42402: LD_INT 2
42404: ARRAY
42405: PPUSH
42406: CALL_OW 488
42410: IFFALSE 42509
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42412: LD_ADDR_VAR 0 4
42416: PUSH
42417: LD_VAR 0 9
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: PPUSH
42426: LD_VAR 0 9
42430: PUSH
42431: LD_INT 2
42433: ARRAY
42434: PPUSH
42435: CALL_OW 546
42439: ST_TO_ADDR
// if hex [ 1 ] then
42440: LD_VAR 0 4
42444: PUSH
42445: LD_INT 1
42447: ARRAY
42448: IFFALSE 42452
// continue ;
42450: GO 42340
// h := hex [ 2 ] ;
42452: LD_ADDR_VAR 0 13
42456: PUSH
42457: LD_VAR 0 4
42461: PUSH
42462: LD_INT 2
42464: ARRAY
42465: ST_TO_ADDR
// if h + 7 < height then
42466: LD_VAR 0 13
42470: PUSH
42471: LD_INT 7
42473: PLUS
42474: PUSH
42475: LD_VAR 0 15
42479: LESS
42480: IFFALSE 42509
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42482: LD_ADDR_VAR 0 18
42486: PUSH
42487: LD_INT 7
42489: PUSH
42490: LD_INT 28
42492: PUSH
42493: LD_INT 45
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: LIST
42500: PUSH
42501: LD_VAR 0 12
42505: ARRAY
42506: ST_TO_ADDR
// break ;
42507: GO 42511
// end ; end ; end ;
42509: GO 42340
42511: POP
42512: POP
// end ; if not weapon then
42513: LD_VAR 0 18
42517: NOT
42518: IFFALSE 42578
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42520: LD_ADDR_VAR 0 5
42524: PUSH
42525: LD_VAR 0 5
42529: PUSH
42530: LD_INT 11
42532: PUSH
42533: LD_INT 30
42535: PUSH
42536: LD_INT 49
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: DIFF
42544: ST_TO_ADDR
// if not list then
42545: LD_VAR 0 5
42549: NOT
42550: IFFALSE 42554
// exit ;
42552: GO 42696
// weapon := list [ rand ( 1 , list ) ] ;
42554: LD_ADDR_VAR 0 18
42558: PUSH
42559: LD_VAR 0 5
42563: PUSH
42564: LD_INT 1
42566: PPUSH
42567: LD_VAR 0 5
42571: PPUSH
42572: CALL_OW 12
42576: ARRAY
42577: ST_TO_ADDR
// end ; if weapon then
42578: LD_VAR 0 18
42582: IFFALSE 42696
// begin tmp := CostOfWeapon ( weapon ) ;
42584: LD_ADDR_VAR 0 14
42588: PUSH
42589: LD_VAR 0 18
42593: PPUSH
42594: CALL_OW 451
42598: ST_TO_ADDR
// j := GetBase ( tower ) ;
42599: LD_ADDR_VAR 0 9
42603: PUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 274
42613: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42614: LD_VAR 0 9
42618: PPUSH
42619: LD_INT 1
42621: PPUSH
42622: CALL_OW 275
42626: PUSH
42627: LD_VAR 0 14
42631: PUSH
42632: LD_INT 1
42634: ARRAY
42635: GREATEREQUAL
42636: PUSH
42637: LD_VAR 0 9
42641: PPUSH
42642: LD_INT 2
42644: PPUSH
42645: CALL_OW 275
42649: PUSH
42650: LD_VAR 0 14
42654: PUSH
42655: LD_INT 2
42657: ARRAY
42658: GREATEREQUAL
42659: AND
42660: PUSH
42661: LD_VAR 0 9
42665: PPUSH
42666: LD_INT 3
42668: PPUSH
42669: CALL_OW 275
42673: PUSH
42674: LD_VAR 0 14
42678: PUSH
42679: LD_INT 3
42681: ARRAY
42682: GREATEREQUAL
42683: AND
42684: IFFALSE 42696
// result := weapon ;
42686: LD_ADDR_VAR 0 3
42690: PUSH
42691: LD_VAR 0 18
42695: ST_TO_ADDR
// end ; end ;
42696: LD_VAR 0 3
42700: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42701: LD_INT 0
42703: PPUSH
42704: PPUSH
// result := true ;
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_INT 1
42712: ST_TO_ADDR
// if array1 = array2 then
42713: LD_VAR 0 1
42717: PUSH
42718: LD_VAR 0 2
42722: EQUAL
42723: IFFALSE 42783
// begin for i = 1 to array1 do
42725: LD_ADDR_VAR 0 4
42729: PUSH
42730: DOUBLE
42731: LD_INT 1
42733: DEC
42734: ST_TO_ADDR
42735: LD_VAR 0 1
42739: PUSH
42740: FOR_TO
42741: IFFALSE 42779
// if array1 [ i ] <> array2 [ i ] then
42743: LD_VAR 0 1
42747: PUSH
42748: LD_VAR 0 4
42752: ARRAY
42753: PUSH
42754: LD_VAR 0 2
42758: PUSH
42759: LD_VAR 0 4
42763: ARRAY
42764: NONEQUAL
42765: IFFALSE 42777
// begin result := false ;
42767: LD_ADDR_VAR 0 3
42771: PUSH
42772: LD_INT 0
42774: ST_TO_ADDR
// break ;
42775: GO 42779
// end ;
42777: GO 42740
42779: POP
42780: POP
// end else
42781: GO 42791
// result := false ;
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: LD_INT 0
42790: ST_TO_ADDR
// end ;
42791: LD_VAR 0 3
42795: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42796: LD_INT 0
42798: PPUSH
42799: PPUSH
42800: PPUSH
// pom := GetBase ( fac ) ;
42801: LD_ADDR_VAR 0 5
42805: PUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 274
42815: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42816: LD_ADDR_VAR 0 4
42820: PUSH
42821: LD_VAR 0 2
42825: PUSH
42826: LD_INT 1
42828: ARRAY
42829: PPUSH
42830: LD_VAR 0 2
42834: PUSH
42835: LD_INT 2
42837: ARRAY
42838: PPUSH
42839: LD_VAR 0 2
42843: PUSH
42844: LD_INT 3
42846: ARRAY
42847: PPUSH
42848: LD_VAR 0 2
42852: PUSH
42853: LD_INT 4
42855: ARRAY
42856: PPUSH
42857: CALL_OW 449
42861: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_VAR 0 5
42871: PPUSH
42872: LD_INT 1
42874: PPUSH
42875: CALL_OW 275
42879: PUSH
42880: LD_VAR 0 4
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: GREATEREQUAL
42889: PUSH
42890: LD_VAR 0 5
42894: PPUSH
42895: LD_INT 2
42897: PPUSH
42898: CALL_OW 275
42902: PUSH
42903: LD_VAR 0 4
42907: PUSH
42908: LD_INT 2
42910: ARRAY
42911: GREATEREQUAL
42912: AND
42913: PUSH
42914: LD_VAR 0 5
42918: PPUSH
42919: LD_INT 3
42921: PPUSH
42922: CALL_OW 275
42926: PUSH
42927: LD_VAR 0 4
42931: PUSH
42932: LD_INT 3
42934: ARRAY
42935: GREATEREQUAL
42936: AND
42937: ST_TO_ADDR
// end ;
42938: LD_VAR 0 3
42942: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
// pom := GetBase ( building ) ;
42949: LD_ADDR_VAR 0 3
42953: PUSH
42954: LD_VAR 0 1
42958: PPUSH
42959: CALL_OW 274
42963: ST_TO_ADDR
// if not pom then
42964: LD_VAR 0 3
42968: NOT
42969: IFFALSE 42973
// exit ;
42971: GO 43143
// btype := GetBType ( building ) ;
42973: LD_ADDR_VAR 0 5
42977: PUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: CALL_OW 266
42987: ST_TO_ADDR
// if btype = b_armoury then
42988: LD_VAR 0 5
42992: PUSH
42993: LD_INT 4
42995: EQUAL
42996: IFFALSE 43006
// btype := b_barracks ;
42998: LD_ADDR_VAR 0 5
43002: PUSH
43003: LD_INT 5
43005: ST_TO_ADDR
// if btype = b_depot then
43006: LD_VAR 0 5
43010: PUSH
43011: LD_INT 0
43013: EQUAL
43014: IFFALSE 43024
// btype := b_warehouse ;
43016: LD_ADDR_VAR 0 5
43020: PUSH
43021: LD_INT 1
43023: ST_TO_ADDR
// if btype = b_workshop then
43024: LD_VAR 0 5
43028: PUSH
43029: LD_INT 2
43031: EQUAL
43032: IFFALSE 43042
// btype := b_factory ;
43034: LD_ADDR_VAR 0 5
43038: PUSH
43039: LD_INT 3
43041: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43042: LD_ADDR_VAR 0 4
43046: PUSH
43047: LD_VAR 0 5
43051: PPUSH
43052: LD_VAR 0 1
43056: PPUSH
43057: CALL_OW 248
43061: PPUSH
43062: CALL_OW 450
43066: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43067: LD_ADDR_VAR 0 2
43071: PUSH
43072: LD_VAR 0 3
43076: PPUSH
43077: LD_INT 1
43079: PPUSH
43080: CALL_OW 275
43084: PUSH
43085: LD_VAR 0 4
43089: PUSH
43090: LD_INT 1
43092: ARRAY
43093: GREATEREQUAL
43094: PUSH
43095: LD_VAR 0 3
43099: PPUSH
43100: LD_INT 2
43102: PPUSH
43103: CALL_OW 275
43107: PUSH
43108: LD_VAR 0 4
43112: PUSH
43113: LD_INT 2
43115: ARRAY
43116: GREATEREQUAL
43117: AND
43118: PUSH
43119: LD_VAR 0 3
43123: PPUSH
43124: LD_INT 3
43126: PPUSH
43127: CALL_OW 275
43131: PUSH
43132: LD_VAR 0 4
43136: PUSH
43137: LD_INT 3
43139: ARRAY
43140: GREATEREQUAL
43141: AND
43142: ST_TO_ADDR
// end ;
43143: LD_VAR 0 2
43147: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43148: LD_INT 0
43150: PPUSH
43151: PPUSH
43152: PPUSH
// pom := GetBase ( building ) ;
43153: LD_ADDR_VAR 0 4
43157: PUSH
43158: LD_VAR 0 1
43162: PPUSH
43163: CALL_OW 274
43167: ST_TO_ADDR
// if not pom then
43168: LD_VAR 0 4
43172: NOT
43173: IFFALSE 43177
// exit ;
43175: GO 43278
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43177: LD_ADDR_VAR 0 5
43181: PUSH
43182: LD_VAR 0 2
43186: PPUSH
43187: LD_VAR 0 1
43191: PPUSH
43192: CALL_OW 248
43196: PPUSH
43197: CALL_OW 450
43201: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43202: LD_ADDR_VAR 0 3
43206: PUSH
43207: LD_VAR 0 4
43211: PPUSH
43212: LD_INT 1
43214: PPUSH
43215: CALL_OW 275
43219: PUSH
43220: LD_VAR 0 5
43224: PUSH
43225: LD_INT 1
43227: ARRAY
43228: GREATEREQUAL
43229: PUSH
43230: LD_VAR 0 4
43234: PPUSH
43235: LD_INT 2
43237: PPUSH
43238: CALL_OW 275
43242: PUSH
43243: LD_VAR 0 5
43247: PUSH
43248: LD_INT 2
43250: ARRAY
43251: GREATEREQUAL
43252: AND
43253: PUSH
43254: LD_VAR 0 4
43258: PPUSH
43259: LD_INT 3
43261: PPUSH
43262: CALL_OW 275
43266: PUSH
43267: LD_VAR 0 5
43271: PUSH
43272: LD_INT 3
43274: ARRAY
43275: GREATEREQUAL
43276: AND
43277: ST_TO_ADDR
// end ;
43278: LD_VAR 0 3
43282: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43283: LD_INT 0
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
// result := false ;
43295: LD_ADDR_VAR 0 6
43299: PUSH
43300: LD_INT 0
43302: ST_TO_ADDR
// if not base or not btype or not x or not y then
43303: LD_VAR 0 1
43307: NOT
43308: PUSH
43309: LD_VAR 0 2
43313: NOT
43314: OR
43315: PUSH
43316: LD_VAR 0 3
43320: NOT
43321: OR
43322: PUSH
43323: LD_VAR 0 4
43327: NOT
43328: OR
43329: IFFALSE 43333
// exit ;
43331: GO 43942
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
43333: LD_ADDR_VAR 0 12
43337: PUSH
43338: LD_VAR 0 2
43342: PPUSH
43343: LD_VAR 0 3
43347: PPUSH
43348: LD_VAR 0 4
43352: PPUSH
43353: LD_VAR 0 5
43357: PPUSH
43358: LD_VAR 0 1
43362: PUSH
43363: LD_INT 1
43365: ARRAY
43366: PPUSH
43367: CALL_OW 248
43371: PPUSH
43372: LD_INT 0
43374: PPUSH
43375: CALL 44779 0 6
43379: ST_TO_ADDR
// if not hexes then
43380: LD_VAR 0 12
43384: NOT
43385: IFFALSE 43389
// exit ;
43387: GO 43942
// for i = 1 to hexes do
43389: LD_ADDR_VAR 0 7
43393: PUSH
43394: DOUBLE
43395: LD_INT 1
43397: DEC
43398: ST_TO_ADDR
43399: LD_VAR 0 12
43403: PUSH
43404: FOR_TO
43405: IFFALSE 43940
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43407: LD_ADDR_VAR 0 11
43411: PUSH
43412: LD_VAR 0 12
43416: PUSH
43417: LD_VAR 0 7
43421: ARRAY
43422: PUSH
43423: LD_INT 1
43425: ARRAY
43426: PPUSH
43427: LD_VAR 0 12
43431: PUSH
43432: LD_VAR 0 7
43436: ARRAY
43437: PUSH
43438: LD_INT 2
43440: ARRAY
43441: PPUSH
43442: CALL_OW 428
43446: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43447: LD_VAR 0 12
43451: PUSH
43452: LD_VAR 0 7
43456: ARRAY
43457: PUSH
43458: LD_INT 1
43460: ARRAY
43461: PPUSH
43462: LD_VAR 0 12
43466: PUSH
43467: LD_VAR 0 7
43471: ARRAY
43472: PUSH
43473: LD_INT 2
43475: ARRAY
43476: PPUSH
43477: CALL_OW 351
43481: PUSH
43482: LD_VAR 0 12
43486: PUSH
43487: LD_VAR 0 7
43491: ARRAY
43492: PUSH
43493: LD_INT 1
43495: ARRAY
43496: PPUSH
43497: LD_VAR 0 12
43501: PUSH
43502: LD_VAR 0 7
43506: ARRAY
43507: PUSH
43508: LD_INT 2
43510: ARRAY
43511: PPUSH
43512: CALL_OW 488
43516: NOT
43517: OR
43518: PUSH
43519: LD_VAR 0 11
43523: PPUSH
43524: CALL_OW 247
43528: PUSH
43529: LD_INT 3
43531: EQUAL
43532: OR
43533: IFFALSE 43539
// exit ;
43535: POP
43536: POP
43537: GO 43942
// if not tmp or not tmp in base then
43539: LD_VAR 0 11
43543: NOT
43544: PUSH
43545: LD_VAR 0 11
43549: PUSH
43550: LD_VAR 0 1
43554: IN
43555: NOT
43556: OR
43557: IFFALSE 43561
// continue ;
43559: GO 43404
// result := true ;
43561: LD_ADDR_VAR 0 6
43565: PUSH
43566: LD_INT 1
43568: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43569: LD_ADDR_VAR 0 15
43573: PUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: LD_INT 22
43581: PUSH
43582: LD_VAR 0 11
43586: PPUSH
43587: CALL_OW 255
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: LD_INT 30
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 30
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PPUSH
43628: CALL_OW 72
43632: ST_TO_ADDR
// if dep then
43633: LD_VAR 0 15
43637: IFFALSE 43773
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43639: LD_ADDR_VAR 0 14
43643: PUSH
43644: LD_VAR 0 15
43648: PUSH
43649: LD_INT 1
43651: ARRAY
43652: PPUSH
43653: CALL_OW 250
43657: PPUSH
43658: LD_VAR 0 15
43662: PUSH
43663: LD_INT 1
43665: ARRAY
43666: PPUSH
43667: CALL_OW 254
43671: PPUSH
43672: LD_INT 5
43674: PPUSH
43675: CALL_OW 272
43679: PUSH
43680: LD_VAR 0 15
43684: PUSH
43685: LD_INT 1
43687: ARRAY
43688: PPUSH
43689: CALL_OW 251
43693: PPUSH
43694: LD_VAR 0 15
43698: PUSH
43699: LD_INT 1
43701: ARRAY
43702: PPUSH
43703: CALL_OW 254
43707: PPUSH
43708: LD_INT 5
43710: PPUSH
43711: CALL_OW 273
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43720: LD_VAR 0 14
43724: PUSH
43725: LD_INT 1
43727: ARRAY
43728: PPUSH
43729: LD_VAR 0 14
43733: PUSH
43734: LD_INT 2
43736: ARRAY
43737: PPUSH
43738: CALL_OW 488
43742: IFFALSE 43773
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43744: LD_VAR 0 11
43748: PPUSH
43749: LD_VAR 0 14
43753: PUSH
43754: LD_INT 1
43756: ARRAY
43757: PPUSH
43758: LD_VAR 0 14
43762: PUSH
43763: LD_INT 2
43765: ARRAY
43766: PPUSH
43767: CALL_OW 111
// continue ;
43771: GO 43404
// end ; end ; r := GetDir ( tmp ) ;
43773: LD_ADDR_VAR 0 13
43777: PUSH
43778: LD_VAR 0 11
43782: PPUSH
43783: CALL_OW 254
43787: ST_TO_ADDR
// if r = 5 then
43788: LD_VAR 0 13
43792: PUSH
43793: LD_INT 5
43795: EQUAL
43796: IFFALSE 43806
// r := 0 ;
43798: LD_ADDR_VAR 0 13
43802: PUSH
43803: LD_INT 0
43805: ST_TO_ADDR
// for j = r to 5 do
43806: LD_ADDR_VAR 0 8
43810: PUSH
43811: DOUBLE
43812: LD_VAR 0 13
43816: DEC
43817: ST_TO_ADDR
43818: LD_INT 5
43820: PUSH
43821: FOR_TO
43822: IFFALSE 43936
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43824: LD_ADDR_VAR 0 9
43828: PUSH
43829: LD_VAR 0 11
43833: PPUSH
43834: CALL_OW 250
43838: PPUSH
43839: LD_VAR 0 8
43843: PPUSH
43844: LD_INT 2
43846: PPUSH
43847: CALL_OW 272
43851: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43852: LD_ADDR_VAR 0 10
43856: PUSH
43857: LD_VAR 0 11
43861: PPUSH
43862: CALL_OW 251
43866: PPUSH
43867: LD_VAR 0 8
43871: PPUSH
43872: LD_INT 2
43874: PPUSH
43875: CALL_OW 273
43879: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43880: LD_VAR 0 9
43884: PPUSH
43885: LD_VAR 0 10
43889: PPUSH
43890: CALL_OW 488
43894: PUSH
43895: LD_VAR 0 9
43899: PPUSH
43900: LD_VAR 0 10
43904: PPUSH
43905: CALL_OW 428
43909: NOT
43910: AND
43911: IFFALSE 43934
// begin ComMoveXY ( tmp , _x , _y ) ;
43913: LD_VAR 0 11
43917: PPUSH
43918: LD_VAR 0 9
43922: PPUSH
43923: LD_VAR 0 10
43927: PPUSH
43928: CALL_OW 111
// break ;
43932: GO 43936
// end ; end ;
43934: GO 43821
43936: POP
43937: POP
// end ;
43938: GO 43404
43940: POP
43941: POP
// end ;
43942: LD_VAR 0 6
43946: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43947: LD_INT 0
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
// result := false ;
43959: LD_ADDR_VAR 0 6
43963: PUSH
43964: LD_INT 0
43966: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43967: LD_VAR 0 1
43971: NOT
43972: PUSH
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 266
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: IN
43993: NOT
43994: OR
43995: PUSH
43996: LD_VAR 0 2
44000: NOT
44001: OR
44002: PUSH
44003: LD_VAR 0 5
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: LD_INT 5
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: IN
44034: NOT
44035: OR
44036: PUSH
44037: LD_VAR 0 3
44041: PPUSH
44042: LD_VAR 0 4
44046: PPUSH
44047: CALL_OW 488
44051: NOT
44052: OR
44053: IFFALSE 44057
// exit ;
44055: GO 44774
// pom := GetBase ( depot ) ;
44057: LD_ADDR_VAR 0 10
44061: PUSH
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL_OW 274
44071: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44072: LD_ADDR_VAR 0 11
44076: PUSH
44077: LD_VAR 0 2
44081: PPUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 248
44091: PPUSH
44092: CALL_OW 450
44096: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44097: LD_VAR 0 10
44101: PPUSH
44102: LD_INT 1
44104: PPUSH
44105: CALL_OW 275
44109: PUSH
44110: LD_VAR 0 11
44114: PUSH
44115: LD_INT 1
44117: ARRAY
44118: GREATEREQUAL
44119: PUSH
44120: LD_VAR 0 10
44124: PPUSH
44125: LD_INT 2
44127: PPUSH
44128: CALL_OW 275
44132: PUSH
44133: LD_VAR 0 11
44137: PUSH
44138: LD_INT 2
44140: ARRAY
44141: GREATEREQUAL
44142: AND
44143: PUSH
44144: LD_VAR 0 10
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: CALL_OW 275
44156: PUSH
44157: LD_VAR 0 11
44161: PUSH
44162: LD_INT 3
44164: ARRAY
44165: GREATEREQUAL
44166: AND
44167: NOT
44168: IFFALSE 44172
// exit ;
44170: GO 44774
// if GetBType ( depot ) = b_depot then
44172: LD_VAR 0 1
44176: PPUSH
44177: CALL_OW 266
44181: PUSH
44182: LD_INT 0
44184: EQUAL
44185: IFFALSE 44197
// dist := 28 else
44187: LD_ADDR_VAR 0 14
44191: PUSH
44192: LD_INT 28
44194: ST_TO_ADDR
44195: GO 44205
// dist := 36 ;
44197: LD_ADDR_VAR 0 14
44201: PUSH
44202: LD_INT 36
44204: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44205: LD_VAR 0 1
44209: PPUSH
44210: LD_VAR 0 3
44214: PPUSH
44215: LD_VAR 0 4
44219: PPUSH
44220: CALL_OW 297
44224: PUSH
44225: LD_VAR 0 14
44229: GREATER
44230: IFFALSE 44234
// exit ;
44232: GO 44774
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44234: LD_ADDR_VAR 0 12
44238: PUSH
44239: LD_VAR 0 2
44243: PPUSH
44244: LD_VAR 0 3
44248: PPUSH
44249: LD_VAR 0 4
44253: PPUSH
44254: LD_VAR 0 5
44258: PPUSH
44259: LD_VAR 0 1
44263: PPUSH
44264: CALL_OW 248
44268: PPUSH
44269: LD_INT 0
44271: PPUSH
44272: CALL 44779 0 6
44276: ST_TO_ADDR
// if not hexes then
44277: LD_VAR 0 12
44281: NOT
44282: IFFALSE 44286
// exit ;
44284: GO 44774
// hex := GetHexInfo ( x , y ) ;
44286: LD_ADDR_VAR 0 15
44290: PUSH
44291: LD_VAR 0 3
44295: PPUSH
44296: LD_VAR 0 4
44300: PPUSH
44301: CALL_OW 546
44305: ST_TO_ADDR
// if hex [ 1 ] then
44306: LD_VAR 0 15
44310: PUSH
44311: LD_INT 1
44313: ARRAY
44314: IFFALSE 44318
// exit ;
44316: GO 44774
// height := hex [ 2 ] ;
44318: LD_ADDR_VAR 0 13
44322: PUSH
44323: LD_VAR 0 15
44327: PUSH
44328: LD_INT 2
44330: ARRAY
44331: ST_TO_ADDR
// for i = 1 to hexes do
44332: LD_ADDR_VAR 0 7
44336: PUSH
44337: DOUBLE
44338: LD_INT 1
44340: DEC
44341: ST_TO_ADDR
44342: LD_VAR 0 12
44346: PUSH
44347: FOR_TO
44348: IFFALSE 44678
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44350: LD_VAR 0 12
44354: PUSH
44355: LD_VAR 0 7
44359: ARRAY
44360: PUSH
44361: LD_INT 1
44363: ARRAY
44364: PPUSH
44365: LD_VAR 0 12
44369: PUSH
44370: LD_VAR 0 7
44374: ARRAY
44375: PUSH
44376: LD_INT 2
44378: ARRAY
44379: PPUSH
44380: CALL_OW 488
44384: NOT
44385: PUSH
44386: LD_VAR 0 12
44390: PUSH
44391: LD_VAR 0 7
44395: ARRAY
44396: PUSH
44397: LD_INT 1
44399: ARRAY
44400: PPUSH
44401: LD_VAR 0 12
44405: PUSH
44406: LD_VAR 0 7
44410: ARRAY
44411: PUSH
44412: LD_INT 2
44414: ARRAY
44415: PPUSH
44416: CALL_OW 428
44420: PUSH
44421: LD_INT 0
44423: GREATER
44424: OR
44425: PUSH
44426: LD_VAR 0 12
44430: PUSH
44431: LD_VAR 0 7
44435: ARRAY
44436: PUSH
44437: LD_INT 1
44439: ARRAY
44440: PPUSH
44441: LD_VAR 0 12
44445: PUSH
44446: LD_VAR 0 7
44450: ARRAY
44451: PUSH
44452: LD_INT 2
44454: ARRAY
44455: PPUSH
44456: CALL_OW 351
44460: OR
44461: IFFALSE 44467
// exit ;
44463: POP
44464: POP
44465: GO 44774
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44467: LD_ADDR_VAR 0 8
44471: PUSH
44472: LD_VAR 0 12
44476: PUSH
44477: LD_VAR 0 7
44481: ARRAY
44482: PUSH
44483: LD_INT 1
44485: ARRAY
44486: PPUSH
44487: LD_VAR 0 12
44491: PUSH
44492: LD_VAR 0 7
44496: ARRAY
44497: PUSH
44498: LD_INT 2
44500: ARRAY
44501: PPUSH
44502: CALL_OW 546
44506: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44507: LD_VAR 0 8
44511: PUSH
44512: LD_INT 1
44514: ARRAY
44515: PUSH
44516: LD_VAR 0 8
44520: PUSH
44521: LD_INT 2
44523: ARRAY
44524: PUSH
44525: LD_VAR 0 13
44529: PUSH
44530: LD_INT 2
44532: PLUS
44533: GREATER
44534: OR
44535: PUSH
44536: LD_VAR 0 8
44540: PUSH
44541: LD_INT 2
44543: ARRAY
44544: PUSH
44545: LD_VAR 0 13
44549: PUSH
44550: LD_INT 2
44552: MINUS
44553: LESS
44554: OR
44555: PUSH
44556: LD_VAR 0 8
44560: PUSH
44561: LD_INT 3
44563: ARRAY
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 8
44570: PUSH
44571: LD_INT 9
44573: PUSH
44574: LD_INT 10
44576: PUSH
44577: LD_INT 11
44579: PUSH
44580: LD_INT 12
44582: PUSH
44583: LD_INT 13
44585: PUSH
44586: LD_INT 16
44588: PUSH
44589: LD_INT 17
44591: PUSH
44592: LD_INT 18
44594: PUSH
44595: LD_INT 19
44597: PUSH
44598: LD_INT 20
44600: PUSH
44601: LD_INT 21
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: IN
44619: NOT
44620: OR
44621: PUSH
44622: LD_VAR 0 8
44626: PUSH
44627: LD_INT 5
44629: ARRAY
44630: NOT
44631: OR
44632: PUSH
44633: LD_VAR 0 8
44637: PUSH
44638: LD_INT 6
44640: ARRAY
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 7
44650: PUSH
44651: LD_INT 9
44653: PUSH
44654: LD_INT 10
44656: PUSH
44657: LD_INT 11
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: IN
44668: NOT
44669: OR
44670: IFFALSE 44676
// exit ;
44672: POP
44673: POP
44674: GO 44774
// end ;
44676: GO 44347
44678: POP
44679: POP
// side := GetSide ( depot ) ;
44680: LD_ADDR_VAR 0 9
44684: PUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: CALL_OW 255
44694: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44695: LD_VAR 0 9
44699: PPUSH
44700: LD_VAR 0 3
44704: PPUSH
44705: LD_VAR 0 4
44709: PPUSH
44710: LD_INT 20
44712: PPUSH
44713: CALL 37428 0 4
44717: PUSH
44718: LD_INT 4
44720: ARRAY
44721: IFFALSE 44725
// exit ;
44723: GO 44774
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44725: LD_VAR 0 2
44729: PUSH
44730: LD_INT 29
44732: PUSH
44733: LD_INT 30
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: IN
44740: PUSH
44741: LD_VAR 0 3
44745: PPUSH
44746: LD_VAR 0 4
44750: PPUSH
44751: LD_VAR 0 9
44755: PPUSH
44756: CALL_OW 440
44760: NOT
44761: AND
44762: IFFALSE 44766
// exit ;
44764: GO 44774
// result := true ;
44766: LD_ADDR_VAR 0 6
44770: PUSH
44771: LD_INT 1
44773: ST_TO_ADDR
// end ;
44774: LD_VAR 0 6
44778: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
44779: LD_INT 0
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
44800: PPUSH
44801: PPUSH
44802: PPUSH
44803: PPUSH
44804: PPUSH
44805: PPUSH
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
44834: PPUSH
44835: PPUSH
44836: PPUSH
44837: PPUSH
44838: PPUSH
// result = [ ] ;
44839: LD_ADDR_VAR 0 7
44843: PUSH
44844: EMPTY
44845: ST_TO_ADDR
// temp_list = [ ] ;
44846: LD_ADDR_VAR 0 9
44850: PUSH
44851: EMPTY
44852: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44853: LD_VAR 0 4
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: LD_INT 4
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: IN
44884: NOT
44885: PUSH
44886: LD_VAR 0 1
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: IN
44901: PUSH
44902: LD_VAR 0 5
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 3
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: IN
44921: NOT
44922: AND
44923: OR
44924: IFFALSE 44928
// exit ;
44926: GO 63319
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44928: LD_VAR 0 1
44932: PUSH
44933: LD_INT 6
44935: PUSH
44936: LD_INT 7
44938: PUSH
44939: LD_INT 8
44941: PUSH
44942: LD_INT 13
44944: PUSH
44945: LD_INT 12
44947: PUSH
44948: LD_INT 15
44950: PUSH
44951: LD_INT 11
44953: PUSH
44954: LD_INT 14
44956: PUSH
44957: LD_INT 10
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: IN
44971: IFFALSE 44981
// btype = b_lab ;
44973: LD_ADDR_VAR 0 1
44977: PUSH
44978: LD_INT 6
44980: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44981: LD_VAR 0 6
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: IN
45000: NOT
45001: PUSH
45002: LD_VAR 0 1
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 6
45021: PUSH
45022: LD_INT 36
45024: PUSH
45025: LD_INT 4
45027: PUSH
45028: LD_INT 5
45030: PUSH
45031: LD_INT 31
45033: PUSH
45034: LD_INT 32
45036: PUSH
45037: LD_INT 33
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: IN
45053: NOT
45054: PUSH
45055: LD_VAR 0 6
45059: PUSH
45060: LD_INT 1
45062: EQUAL
45063: AND
45064: OR
45065: PUSH
45066: LD_VAR 0 1
45070: PUSH
45071: LD_INT 2
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: IN
45081: NOT
45082: PUSH
45083: LD_VAR 0 6
45087: PUSH
45088: LD_INT 2
45090: EQUAL
45091: AND
45092: OR
45093: IFFALSE 45103
// mode = 0 ;
45095: LD_ADDR_VAR 0 6
45099: PUSH
45100: LD_INT 0
45102: ST_TO_ADDR
// case mode of 0 :
45103: LD_VAR 0 6
45107: PUSH
45108: LD_INT 0
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45116
45114: GO 56569
45116: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45117: LD_ADDR_VAR 0 11
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 3
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45310: LD_ADDR_VAR 0 12
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45506: LD_ADDR_VAR 0 13
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 2
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 2
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: NEG
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 3
45677: NEG
45678: PUSH
45679: LD_INT 3
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45705: LD_ADDR_VAR 0 14
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 2
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45901: LD_ADDR_VAR 0 15
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46094: LD_ADDR_VAR 0 16
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: LD_INT 2
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 3
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46287: LD_ADDR_VAR 0 17
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: LD_INT 2
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: NEG
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46517: LD_ADDR_VAR 0 18
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 2
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 2
46693: NEG
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46747: LD_ADDR_VAR 0 19
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46977: LD_ADDR_VAR 0 20
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 1
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 2
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47207: LD_ADDR_VAR 0 21
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 2
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 2
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47437: LD_ADDR_VAR 0 22
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47667: LD_ADDR_VAR 0 23
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: LD_INT 1
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 2
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 2
47843: NEG
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 3
47894: NEG
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 2
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47947: LD_ADDR_VAR 0 24
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 2
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48223: LD_ADDR_VAR 0 25
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 3
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48497: LD_ADDR_VAR 0 26
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 2
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: NEG
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: LD_INT 2
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48773: LD_ADDR_VAR 0 27
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49053: LD_ADDR_VAR 0 28
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 3
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49335: LD_ADDR_VAR 0 29
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 3
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 3
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49614: LD_ADDR_VAR 0 30
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 3
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: LD_INT 2
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49892: LD_ADDR_VAR 0 31
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 3
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50170: LD_ADDR_VAR 0 32
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 2
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 2
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 3
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50448: LD_ADDR_VAR 0 33
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 3
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: LD_INT 2
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50727: LD_ADDR_VAR 0 34
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 2
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 3
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51007: LD_ADDR_VAR 0 35
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51119: LD_ADDR_VAR 0 36
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51231: LD_ADDR_VAR 0 37
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51343: LD_ADDR_VAR 0 38
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51455: LD_ADDR_VAR 0 39
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51567: LD_ADDR_VAR 0 40
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51679: LD_ADDR_VAR 0 41
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: NEG
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 3
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 3
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: LD_INT 3
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 2
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: NEG
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: LD_INT 2
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52029: LD_ADDR_VAR 0 42
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 3
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: LD_INT 3
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 3
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 3
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 3
52338: NEG
52339: PUSH
52340: LD_INT 3
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52379: LD_ADDR_VAR 0 43
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 2
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 2
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: NEG
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: LD_INT 3
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 3
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 2
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 3
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: NEG
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52727: LD_ADDR_VAR 0 44
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 2
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: NEG
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 2
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 2
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 3
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 3
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: LD_INT 3
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 3
53001: NEG
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 3
53036: NEG
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53077: LD_ADDR_VAR 0 45
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 2
53267: NEG
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 3
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: LD_INT 3
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53427: LD_ADDR_VAR 0 46
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 0
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: LD_INT 2
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 2
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 2
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 3
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: LD_INT 2
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53775: LD_ADDR_VAR 0 47
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 0
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: LD_INT 2
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53926: LD_ADDR_VAR 0 48
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 2
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 2
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 2
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54073: LD_ADDR_VAR 0 49
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: LD_INT 0
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54217: LD_ADDR_VAR 0 50
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 2
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54361: LD_ADDR_VAR 0 51
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 0
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 2
54473: NEG
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54508: LD_ADDR_VAR 0 52
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54659: LD_ADDR_VAR 0 53
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 2
54835: NEG
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54889: LD_ADDR_VAR 0 54
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 2
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 2
55024: PUSH
55025: LD_INT 2
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55119: LD_ADDR_VAR 0 55
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 2
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 1
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: LD_INT 2
55322: NEG
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55349: LD_ADDR_VAR 0 56
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 1
55430: NEG
55431: PUSH
55432: LD_INT 2
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 2
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 1
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 2
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 2
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55579: LD_ADDR_VAR 0 57
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 2
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 2
55778: NEG
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55809: LD_ADDR_VAR 0 58
55813: PUSH
55814: LD_INT 0
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 1
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 1
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 2
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: NEG
56009: PUSH
56010: LD_INT 2
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56039: LD_ADDR_VAR 0 59
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: LD_INT 1
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56127: LD_ADDR_VAR 0 60
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 0
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56215: LD_ADDR_VAR 0 61
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56303: LD_ADDR_VAR 0 62
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56391: LD_ADDR_VAR 0 63
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 0
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: NEG
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56479: LD_ADDR_VAR 0 64
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 1
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: ST_TO_ADDR
// end ; 1 :
56567: GO 62464
56569: LD_INT 1
56571: DOUBLE
56572: EQUAL
56573: IFTRUE 56577
56575: GO 59200
56577: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56578: LD_ADDR_VAR 0 11
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 3
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 3
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56622: LD_ADDR_VAR 0 12
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 3
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56663: LD_ADDR_VAR 0 13
56667: PUSH
56668: LD_INT 3
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 3
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56703: LD_ADDR_VAR 0 14
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 3
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 3
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56744: LD_ADDR_VAR 0 15
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 3
56773: NEG
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56788: LD_ADDR_VAR 0 16
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56834: LD_ADDR_VAR 0 17
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 3
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56878: LD_ADDR_VAR 0 18
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 3
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56919: LD_ADDR_VAR 0 19
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56959: LD_ADDR_VAR 0 20
56963: PUSH
56964: LD_INT 1
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57000: LD_ADDR_VAR 0 21
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57044: LD_ADDR_VAR 0 22
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: LD_INT 3
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57090: LD_ADDR_VAR 0 23
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 4
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57134: LD_ADDR_VAR 0 24
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57175: LD_ADDR_VAR 0 25
57179: PUSH
57180: LD_INT 3
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 4
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57215: LD_ADDR_VAR 0 26
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: NEG
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57256: LD_ADDR_VAR 0 27
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57300: LD_ADDR_VAR 0 28
57304: PUSH
57305: LD_INT 3
57307: NEG
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: NEG
57320: PUSH
57321: LD_INT 4
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 4
57331: NEG
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: LIST
57345: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57346: LD_ADDR_VAR 0 29
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 4
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 0
57399: PUSH
57400: LD_INT 4
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: LD_INT 5
57425: NEG
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 5
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 6
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: LD_INT 6
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: LD_INT 5
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57501: LD_ADDR_VAR 0 30
57505: PUSH
57506: LD_INT 2
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 4
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 4
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 5
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 5
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 6
57612: PUSH
57613: LD_INT 0
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 6
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57644: LD_ADDR_VAR 0 31
57648: PUSH
57649: LD_INT 3
57651: PUSH
57652: LD_INT 2
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 2
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 4
57681: PUSH
57682: LD_INT 3
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 3
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 5
57711: PUSH
57712: LD_INT 4
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: LD_INT 5
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 4
57731: PUSH
57732: LD_INT 5
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 6
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 6
57751: PUSH
57752: LD_INT 6
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 5
57761: PUSH
57762: LD_INT 6
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57783: LD_ADDR_VAR 0 32
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 3
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 4
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: LD_INT 4
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 5
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 5
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: LD_INT 4
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 6
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 6
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 5
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57926: LD_ADDR_VAR 0 33
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 3
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 4
58001: NEG
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 5
58012: NEG
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 5
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 5
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 6
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 6
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58081: LD_ADDR_VAR 0 34
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 4
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 4
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: NEG
58161: PUSH
58162: LD_INT 5
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 5
58172: NEG
58173: PUSH
58174: LD_INT 4
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 5
58184: NEG
58185: PUSH
58186: LD_INT 5
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: LD_INT 6
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 6
58208: NEG
58209: PUSH
58210: LD_INT 5
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 6
58220: NEG
58221: PUSH
58222: LD_INT 6
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58244: LD_ADDR_VAR 0 41
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 3
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58288: LD_ADDR_VAR 0 42
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 3
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58329: LD_ADDR_VAR 0 43
58333: PUSH
58334: LD_INT 2
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: LIST
58368: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58369: LD_ADDR_VAR 0 44
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 2
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58410: LD_ADDR_VAR 0 45
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58454: LD_ADDR_VAR 0 46
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 2
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 3
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58500: LD_ADDR_VAR 0 47
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58533: LD_ADDR_VAR 0 48
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58564: LD_ADDR_VAR 0 49
58568: PUSH
58569: LD_INT 3
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58593: LD_ADDR_VAR 0 50
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 3
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58622: LD_ADDR_VAR 0 51
58626: PUSH
58627: LD_INT 1
58629: NEG
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58653: LD_ADDR_VAR 0 52
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: LD_INT 2
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58686: LD_ADDR_VAR 0 53
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 3
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: LD_INT 3
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58730: LD_ADDR_VAR 0 54
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58771: LD_ADDR_VAR 0 55
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 3
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: LIST
58810: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58811: LD_ADDR_VAR 0 56
58815: PUSH
58816: LD_INT 1
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 3
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: NEG
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58852: LD_ADDR_VAR 0 57
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58896: LD_ADDR_VAR 0 58
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: NEG
58928: PUSH
58929: LD_INT 3
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58942: LD_ADDR_VAR 0 59
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58986: LD_ADDR_VAR 0 60
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: LIST
59026: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59027: LD_ADDR_VAR 0 61
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59067: LD_ADDR_VAR 0 62
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59108: LD_ADDR_VAR 0 63
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59152: LD_ADDR_VAR 0 64
59156: PUSH
59157: LD_INT 1
59159: NEG
59160: PUSH
59161: LD_INT 2
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: ST_TO_ADDR
// end ; 2 :
59198: GO 62464
59200: LD_INT 2
59202: DOUBLE
59203: EQUAL
59204: IFTRUE 59208
59206: GO 62463
59208: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59209: LD_ADDR_VAR 0 29
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 4
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 5
59237: PUSH
59238: LD_INT 0
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: LD_INT 1
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 4
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 3
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 3
59277: PUSH
59278: LD_INT 1
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 5
59299: PUSH
59300: LD_INT 2
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 3
59319: PUSH
59320: LD_INT 2
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 4
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: LD_INT 4
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: PUSH
59350: LD_INT 4
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 2
59359: PUSH
59360: LD_INT 3
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 2
59389: PUSH
59390: LD_INT 4
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 4
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 4
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 5
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 5
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 5
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: LD_INT 3
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 3
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 3
59537: NEG
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 4
59548: NEG
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 4
59559: NEG
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 4
59571: NEG
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: NEG
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 4
59606: NEG
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: LD_INT 3
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 5
59666: NEG
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 3
59678: NEG
59679: PUSH
59680: LD_INT 5
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: NEG
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59747: LD_ADDR_VAR 0 30
59751: PUSH
59752: LD_INT 4
59754: PUSH
59755: LD_INT 4
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 4
59764: PUSH
59765: LD_INT 3
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 5
59774: PUSH
59775: LD_INT 4
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 5
59784: PUSH
59785: LD_INT 5
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 4
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: LD_INT 4
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 3
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: LD_INT 3
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 3
59834: PUSH
59835: LD_INT 5
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 3
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 0
59854: PUSH
59855: LD_INT 2
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 4
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: LD_INT 4
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 2
59916: PUSH
59917: LD_INT 4
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: NEG
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 4
59937: NEG
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 4
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 3
59960: NEG
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 4
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 5
59993: NEG
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 5
60004: NEG
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 5
60016: NEG
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: NEG
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 4
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 3
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: LD_INT 2
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 4
60099: NEG
60100: PUSH
60101: LD_INT 3
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 4
60111: NEG
60112: PUSH
60113: LD_INT 4
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 4
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 4
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 4
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 5
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: LD_INT 4
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 4
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 5
60218: NEG
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 5
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60294: LD_ADDR_VAR 0 31
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 4
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 5
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 5
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 4
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: PUSH
60374: LD_INT 5
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: NEG
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 4
60450: NEG
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 4
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 2
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 4
60508: NEG
60509: PUSH
60510: LD_INT 5
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: LD_INT 4
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 3
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 5
60556: NEG
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 5
60568: NEG
60569: PUSH
60570: LD_INT 5
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 3
60580: NEG
60581: PUSH
60582: LD_INT 5
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 5
60592: NEG
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 3
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 0
60615: PUSH
60616: LD_INT 4
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 0
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: LD_INT 3
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: NEG
60672: PUSH
60673: LD_INT 4
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: NEG
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 4
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 4
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 5
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 4
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: LD_INT 0
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 3
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 5
60789: PUSH
60790: LD_INT 2
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60844: LD_ADDR_VAR 0 32
60848: PUSH
60849: LD_INT 4
60851: NEG
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 4
60862: NEG
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: NEG
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 5
60907: NEG
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 5
60918: NEG
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 5
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: NEG
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 3
60942: NEG
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 4
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 3
61001: NEG
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 4
61025: NEG
61026: PUSH
61027: LD_INT 4
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: NEG
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 4
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 4
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 5
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 3
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 4
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 5
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: NEG
61152: PUSH
61153: LD_INT 5
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 3
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 4
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 4
61194: PUSH
61195: LD_INT 1
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: LD_INT 2
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 4
61256: PUSH
61257: LD_INT 4
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: LD_INT 3
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 5
61276: PUSH
61277: LD_INT 4
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 5
61286: PUSH
61287: LD_INT 5
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: LD_INT 5
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: LD_INT 4
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 5
61326: PUSH
61327: LD_INT 3
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: LD_INT 5
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61391: LD_ADDR_VAR 0 33
61395: PUSH
61396: LD_INT 4
61398: NEG
61399: PUSH
61400: LD_INT 4
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 4
61410: NEG
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: NEG
61423: PUSH
61424: LD_INT 4
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: LD_INT 3
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 4
61446: NEG
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 5
61458: NEG
61459: PUSH
61460: LD_INT 4
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 5
61470: NEG
61471: PUSH
61472: LD_INT 5
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: NEG
61483: PUSH
61484: LD_INT 5
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 5
61494: NEG
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 3
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 4
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 1
61528: PUSH
61529: LD_INT 3
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 1
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 4
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 2
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: NEG
61597: PUSH
61598: LD_INT 4
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: LD_INT 0
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 4
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 5
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 5
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 4
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: LD_INT 2
61683: NEG
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 5
61691: PUSH
61692: LD_INT 2
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 3
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 3
61711: PUSH
61712: LD_INT 2
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 4
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 4
61731: PUSH
61732: LD_INT 4
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 3
61741: PUSH
61742: LD_INT 4
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 3
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: LD_INT 2
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 4
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 2
61781: PUSH
61782: LD_INT 4
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: LD_INT 4
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 5
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 5
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: LD_INT 3
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61929: LD_ADDR_VAR 0 34
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 4
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 5
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 4
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: LD_INT 3
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: LD_INT 3
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 4
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 5
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 2
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: NEG
62027: PUSH
62028: LD_INT 5
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: LD_INT 0
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 3
62048: PUSH
62049: LD_INT 1
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 4
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 4
62069: PUSH
62070: LD_INT 1
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 4
62131: PUSH
62132: LD_INT 4
62134: PUSH
62135: EMPTY
62136: LIST
62137: LIST
62138: PUSH
62139: LD_INT 4
62141: PUSH
62142: LD_INT 3
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 5
62151: PUSH
62152: LD_INT 4
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 5
62161: PUSH
62162: LD_INT 5
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 4
62171: PUSH
62172: LD_INT 5
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 3
62181: PUSH
62182: LD_INT 4
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 5
62201: PUSH
62202: LD_INT 3
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: LD_INT 5
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 0
62221: PUSH
62222: LD_INT 3
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: LD_INT 2
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 1
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: LD_INT 4
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: LD_INT 4
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 2
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: PUSH
62294: LD_INT 4
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 4
62314: NEG
62315: PUSH
62316: LD_INT 0
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 4
62325: NEG
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 3
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 3
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 4
62359: NEG
62360: PUSH
62361: LD_INT 1
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 5
62370: NEG
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 5
62381: NEG
62382: PUSH
62383: LD_INT 1
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 5
62393: NEG
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: NEG
62406: PUSH
62407: LD_INT 2
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// end ; end ;
62461: GO 62464
62463: POP
// case btype of b_depot , b_warehouse :
62464: LD_VAR 0 1
62468: PUSH
62469: LD_INT 0
62471: DOUBLE
62472: EQUAL
62473: IFTRUE 62483
62475: LD_INT 1
62477: DOUBLE
62478: EQUAL
62479: IFTRUE 62483
62481: GO 62684
62483: POP
// case nation of nation_american :
62484: LD_VAR 0 5
62488: PUSH
62489: LD_INT 1
62491: DOUBLE
62492: EQUAL
62493: IFTRUE 62497
62495: GO 62553
62497: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
62498: LD_ADDR_VAR 0 9
62502: PUSH
62503: LD_VAR 0 11
62507: PUSH
62508: LD_VAR 0 12
62512: PUSH
62513: LD_VAR 0 13
62517: PUSH
62518: LD_VAR 0 14
62522: PUSH
62523: LD_VAR 0 15
62527: PUSH
62528: LD_VAR 0 16
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: PUSH
62541: LD_VAR 0 4
62545: PUSH
62546: LD_INT 1
62548: PLUS
62549: ARRAY
62550: ST_TO_ADDR
62551: GO 62682
62553: LD_INT 2
62555: DOUBLE
62556: EQUAL
62557: IFTRUE 62561
62559: GO 62617
62561: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
62562: LD_ADDR_VAR 0 9
62566: PUSH
62567: LD_VAR 0 17
62571: PUSH
62572: LD_VAR 0 18
62576: PUSH
62577: LD_VAR 0 19
62581: PUSH
62582: LD_VAR 0 20
62586: PUSH
62587: LD_VAR 0 21
62591: PUSH
62592: LD_VAR 0 22
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: PUSH
62605: LD_VAR 0 4
62609: PUSH
62610: LD_INT 1
62612: PLUS
62613: ARRAY
62614: ST_TO_ADDR
62615: GO 62682
62617: LD_INT 3
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62625
62623: GO 62681
62625: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62626: LD_ADDR_VAR 0 9
62630: PUSH
62631: LD_VAR 0 23
62635: PUSH
62636: LD_VAR 0 24
62640: PUSH
62641: LD_VAR 0 25
62645: PUSH
62646: LD_VAR 0 26
62650: PUSH
62651: LD_VAR 0 27
62655: PUSH
62656: LD_VAR 0 28
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: PUSH
62669: LD_VAR 0 4
62673: PUSH
62674: LD_INT 1
62676: PLUS
62677: ARRAY
62678: ST_TO_ADDR
62679: GO 62682
62681: POP
62682: GO 63237
62684: LD_INT 2
62686: DOUBLE
62687: EQUAL
62688: IFTRUE 62698
62690: LD_INT 3
62692: DOUBLE
62693: EQUAL
62694: IFTRUE 62698
62696: GO 62754
62698: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62699: LD_ADDR_VAR 0 9
62703: PUSH
62704: LD_VAR 0 29
62708: PUSH
62709: LD_VAR 0 30
62713: PUSH
62714: LD_VAR 0 31
62718: PUSH
62719: LD_VAR 0 32
62723: PUSH
62724: LD_VAR 0 33
62728: PUSH
62729: LD_VAR 0 34
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: PUSH
62742: LD_VAR 0 4
62746: PUSH
62747: LD_INT 1
62749: PLUS
62750: ARRAY
62751: ST_TO_ADDR
62752: GO 63237
62754: LD_INT 16
62756: DOUBLE
62757: EQUAL
62758: IFTRUE 62816
62760: LD_INT 17
62762: DOUBLE
62763: EQUAL
62764: IFTRUE 62816
62766: LD_INT 18
62768: DOUBLE
62769: EQUAL
62770: IFTRUE 62816
62772: LD_INT 19
62774: DOUBLE
62775: EQUAL
62776: IFTRUE 62816
62778: LD_INT 22
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62816
62784: LD_INT 20
62786: DOUBLE
62787: EQUAL
62788: IFTRUE 62816
62790: LD_INT 21
62792: DOUBLE
62793: EQUAL
62794: IFTRUE 62816
62796: LD_INT 23
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62816
62802: LD_INT 24
62804: DOUBLE
62805: EQUAL
62806: IFTRUE 62816
62808: LD_INT 25
62810: DOUBLE
62811: EQUAL
62812: IFTRUE 62816
62814: GO 62872
62816: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62817: LD_ADDR_VAR 0 9
62821: PUSH
62822: LD_VAR 0 35
62826: PUSH
62827: LD_VAR 0 36
62831: PUSH
62832: LD_VAR 0 37
62836: PUSH
62837: LD_VAR 0 38
62841: PUSH
62842: LD_VAR 0 39
62846: PUSH
62847: LD_VAR 0 40
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: PUSH
62860: LD_VAR 0 4
62864: PUSH
62865: LD_INT 1
62867: PLUS
62868: ARRAY
62869: ST_TO_ADDR
62870: GO 63237
62872: LD_INT 6
62874: DOUBLE
62875: EQUAL
62876: IFTRUE 62928
62878: LD_INT 7
62880: DOUBLE
62881: EQUAL
62882: IFTRUE 62928
62884: LD_INT 8
62886: DOUBLE
62887: EQUAL
62888: IFTRUE 62928
62890: LD_INT 13
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62928
62896: LD_INT 12
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62928
62902: LD_INT 15
62904: DOUBLE
62905: EQUAL
62906: IFTRUE 62928
62908: LD_INT 11
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62928
62914: LD_INT 14
62916: DOUBLE
62917: EQUAL
62918: IFTRUE 62928
62920: LD_INT 10
62922: DOUBLE
62923: EQUAL
62924: IFTRUE 62928
62926: GO 62984
62928: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62929: LD_ADDR_VAR 0 9
62933: PUSH
62934: LD_VAR 0 41
62938: PUSH
62939: LD_VAR 0 42
62943: PUSH
62944: LD_VAR 0 43
62948: PUSH
62949: LD_VAR 0 44
62953: PUSH
62954: LD_VAR 0 45
62958: PUSH
62959: LD_VAR 0 46
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: PUSH
62972: LD_VAR 0 4
62976: PUSH
62977: LD_INT 1
62979: PLUS
62980: ARRAY
62981: ST_TO_ADDR
62982: GO 63237
62984: LD_INT 36
62986: DOUBLE
62987: EQUAL
62988: IFTRUE 62992
62990: GO 63048
62992: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62993: LD_ADDR_VAR 0 9
62997: PUSH
62998: LD_VAR 0 47
63002: PUSH
63003: LD_VAR 0 48
63007: PUSH
63008: LD_VAR 0 49
63012: PUSH
63013: LD_VAR 0 50
63017: PUSH
63018: LD_VAR 0 51
63022: PUSH
63023: LD_VAR 0 52
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: PUSH
63036: LD_VAR 0 4
63040: PUSH
63041: LD_INT 1
63043: PLUS
63044: ARRAY
63045: ST_TO_ADDR
63046: GO 63237
63048: LD_INT 4
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63074
63054: LD_INT 5
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63074
63060: LD_INT 34
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63074
63066: LD_INT 37
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63074
63072: GO 63130
63074: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63075: LD_ADDR_VAR 0 9
63079: PUSH
63080: LD_VAR 0 53
63084: PUSH
63085: LD_VAR 0 54
63089: PUSH
63090: LD_VAR 0 55
63094: PUSH
63095: LD_VAR 0 56
63099: PUSH
63100: LD_VAR 0 57
63104: PUSH
63105: LD_VAR 0 58
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: PUSH
63118: LD_VAR 0 4
63122: PUSH
63123: LD_INT 1
63125: PLUS
63126: ARRAY
63127: ST_TO_ADDR
63128: GO 63237
63130: LD_INT 31
63132: DOUBLE
63133: EQUAL
63134: IFTRUE 63180
63136: LD_INT 32
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63180
63142: LD_INT 33
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63180
63148: LD_INT 27
63150: DOUBLE
63151: EQUAL
63152: IFTRUE 63180
63154: LD_INT 26
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63180
63160: LD_INT 28
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63180
63166: LD_INT 29
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63180
63172: LD_INT 30
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63180
63178: GO 63236
63180: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
63181: LD_ADDR_VAR 0 9
63185: PUSH
63186: LD_VAR 0 59
63190: PUSH
63191: LD_VAR 0 60
63195: PUSH
63196: LD_VAR 0 61
63200: PUSH
63201: LD_VAR 0 62
63205: PUSH
63206: LD_VAR 0 63
63210: PUSH
63211: LD_VAR 0 64
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: PUSH
63224: LD_VAR 0 4
63228: PUSH
63229: LD_INT 1
63231: PLUS
63232: ARRAY
63233: ST_TO_ADDR
63234: GO 63237
63236: POP
// temp_list2 = [ ] ;
63237: LD_ADDR_VAR 0 10
63241: PUSH
63242: EMPTY
63243: ST_TO_ADDR
// for i in temp_list do
63244: LD_ADDR_VAR 0 8
63248: PUSH
63249: LD_VAR 0 9
63253: PUSH
63254: FOR_IN
63255: IFFALSE 63307
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63257: LD_ADDR_VAR 0 10
63261: PUSH
63262: LD_VAR 0 10
63266: PUSH
63267: LD_VAR 0 8
63271: PUSH
63272: LD_INT 1
63274: ARRAY
63275: PUSH
63276: LD_VAR 0 2
63280: PLUS
63281: PUSH
63282: LD_VAR 0 8
63286: PUSH
63287: LD_INT 2
63289: ARRAY
63290: PUSH
63291: LD_VAR 0 3
63295: PLUS
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: EMPTY
63302: LIST
63303: ADD
63304: ST_TO_ADDR
63305: GO 63254
63307: POP
63308: POP
// result = temp_list2 ;
63309: LD_ADDR_VAR 0 7
63313: PUSH
63314: LD_VAR 0 10
63318: ST_TO_ADDR
// end ;
63319: LD_VAR 0 7
63323: RET
// export function EnemyInRange ( unit , dist ) ; begin
63324: LD_INT 0
63326: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63327: LD_ADDR_VAR 0 3
63331: PUSH
63332: LD_VAR 0 1
63336: PPUSH
63337: CALL_OW 255
63341: PPUSH
63342: LD_VAR 0 1
63346: PPUSH
63347: CALL_OW 250
63351: PPUSH
63352: LD_VAR 0 1
63356: PPUSH
63357: CALL_OW 251
63361: PPUSH
63362: LD_VAR 0 2
63366: PPUSH
63367: CALL 37428 0 4
63371: PUSH
63372: LD_INT 4
63374: ARRAY
63375: ST_TO_ADDR
// end ;
63376: LD_VAR 0 3
63380: RET
// export function PlayerSeeMe ( unit ) ; begin
63381: LD_INT 0
63383: PPUSH
// result := See ( your_side , unit ) ;
63384: LD_ADDR_VAR 0 2
63388: PUSH
63389: LD_OWVAR 2
63393: PPUSH
63394: LD_VAR 0 1
63398: PPUSH
63399: CALL_OW 292
63403: ST_TO_ADDR
// end ;
63404: LD_VAR 0 2
63408: RET
// export function ReverseDir ( unit ) ; begin
63409: LD_INT 0
63411: PPUSH
// if not unit then
63412: LD_VAR 0 1
63416: NOT
63417: IFFALSE 63421
// exit ;
63419: GO 63444
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63421: LD_ADDR_VAR 0 2
63425: PUSH
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 254
63435: PUSH
63436: LD_INT 3
63438: PLUS
63439: PUSH
63440: LD_INT 6
63442: MOD
63443: ST_TO_ADDR
// end ;
63444: LD_VAR 0 2
63448: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63449: LD_INT 0
63451: PPUSH
63452: PPUSH
63453: PPUSH
63454: PPUSH
63455: PPUSH
// if not hexes then
63456: LD_VAR 0 2
63460: NOT
63461: IFFALSE 63465
// exit ;
63463: GO 63613
// dist := 9999 ;
63465: LD_ADDR_VAR 0 5
63469: PUSH
63470: LD_INT 9999
63472: ST_TO_ADDR
// for i = 1 to hexes do
63473: LD_ADDR_VAR 0 4
63477: PUSH
63478: DOUBLE
63479: LD_INT 1
63481: DEC
63482: ST_TO_ADDR
63483: LD_VAR 0 2
63487: PUSH
63488: FOR_TO
63489: IFFALSE 63601
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63491: LD_VAR 0 1
63495: PPUSH
63496: LD_VAR 0 2
63500: PUSH
63501: LD_VAR 0 4
63505: ARRAY
63506: PUSH
63507: LD_INT 1
63509: ARRAY
63510: PPUSH
63511: LD_VAR 0 2
63515: PUSH
63516: LD_VAR 0 4
63520: ARRAY
63521: PUSH
63522: LD_INT 2
63524: ARRAY
63525: PPUSH
63526: CALL_OW 297
63530: PUSH
63531: LD_VAR 0 5
63535: LESS
63536: IFFALSE 63599
// begin hex := hexes [ i ] ;
63538: LD_ADDR_VAR 0 7
63542: PUSH
63543: LD_VAR 0 2
63547: PUSH
63548: LD_VAR 0 4
63552: ARRAY
63553: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63554: LD_ADDR_VAR 0 5
63558: PUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: LD_VAR 0 2
63568: PUSH
63569: LD_VAR 0 4
63573: ARRAY
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PPUSH
63579: LD_VAR 0 2
63583: PUSH
63584: LD_VAR 0 4
63588: ARRAY
63589: PUSH
63590: LD_INT 2
63592: ARRAY
63593: PPUSH
63594: CALL_OW 297
63598: ST_TO_ADDR
// end ; end ;
63599: GO 63488
63601: POP
63602: POP
// result := hex ;
63603: LD_ADDR_VAR 0 3
63607: PUSH
63608: LD_VAR 0 7
63612: ST_TO_ADDR
// end ;
63613: LD_VAR 0 3
63617: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63618: LD_INT 0
63620: PPUSH
63621: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63622: LD_VAR 0 1
63626: NOT
63627: PUSH
63628: LD_VAR 0 1
63632: PUSH
63633: LD_INT 21
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 23
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PPUSH
63657: CALL_OW 69
63661: IN
63662: NOT
63663: OR
63664: IFFALSE 63668
// exit ;
63666: GO 63715
// for i = 1 to 3 do
63668: LD_ADDR_VAR 0 3
63672: PUSH
63673: DOUBLE
63674: LD_INT 1
63676: DEC
63677: ST_TO_ADDR
63678: LD_INT 3
63680: PUSH
63681: FOR_TO
63682: IFFALSE 63713
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63684: LD_VAR 0 1
63688: PPUSH
63689: CALL_OW 250
63693: PPUSH
63694: LD_VAR 0 1
63698: PPUSH
63699: CALL_OW 251
63703: PPUSH
63704: LD_INT 1
63706: PPUSH
63707: CALL_OW 453
63711: GO 63681
63713: POP
63714: POP
// end ;
63715: LD_VAR 0 2
63719: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63720: LD_INT 0
63722: PPUSH
63723: PPUSH
63724: PPUSH
63725: PPUSH
63726: PPUSH
63727: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63728: LD_VAR 0 1
63732: NOT
63733: PUSH
63734: LD_VAR 0 2
63738: NOT
63739: OR
63740: PUSH
63741: LD_VAR 0 1
63745: PPUSH
63746: CALL_OW 314
63750: OR
63751: IFFALSE 63755
// exit ;
63753: GO 64196
// x := GetX ( enemy_unit ) ;
63755: LD_ADDR_VAR 0 7
63759: PUSH
63760: LD_VAR 0 2
63764: PPUSH
63765: CALL_OW 250
63769: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63770: LD_ADDR_VAR 0 8
63774: PUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 251
63784: ST_TO_ADDR
// if not x or not y then
63785: LD_VAR 0 7
63789: NOT
63790: PUSH
63791: LD_VAR 0 8
63795: NOT
63796: OR
63797: IFFALSE 63801
// exit ;
63799: GO 64196
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63801: LD_ADDR_VAR 0 6
63805: PUSH
63806: LD_VAR 0 7
63810: PPUSH
63811: LD_INT 0
63813: PPUSH
63814: LD_INT 4
63816: PPUSH
63817: CALL_OW 272
63821: PUSH
63822: LD_VAR 0 8
63826: PPUSH
63827: LD_INT 0
63829: PPUSH
63830: LD_INT 4
63832: PPUSH
63833: CALL_OW 273
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_VAR 0 7
63846: PPUSH
63847: LD_INT 1
63849: PPUSH
63850: LD_INT 4
63852: PPUSH
63853: CALL_OW 272
63857: PUSH
63858: LD_VAR 0 8
63862: PPUSH
63863: LD_INT 1
63865: PPUSH
63866: LD_INT 4
63868: PPUSH
63869: CALL_OW 273
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_VAR 0 7
63882: PPUSH
63883: LD_INT 2
63885: PPUSH
63886: LD_INT 4
63888: PPUSH
63889: CALL_OW 272
63893: PUSH
63894: LD_VAR 0 8
63898: PPUSH
63899: LD_INT 2
63901: PPUSH
63902: LD_INT 4
63904: PPUSH
63905: CALL_OW 273
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_VAR 0 7
63918: PPUSH
63919: LD_INT 3
63921: PPUSH
63922: LD_INT 4
63924: PPUSH
63925: CALL_OW 272
63929: PUSH
63930: LD_VAR 0 8
63934: PPUSH
63935: LD_INT 3
63937: PPUSH
63938: LD_INT 4
63940: PPUSH
63941: CALL_OW 273
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_VAR 0 7
63954: PPUSH
63955: LD_INT 4
63957: PPUSH
63958: LD_INT 4
63960: PPUSH
63961: CALL_OW 272
63965: PUSH
63966: LD_VAR 0 8
63970: PPUSH
63971: LD_INT 4
63973: PPUSH
63974: LD_INT 4
63976: PPUSH
63977: CALL_OW 273
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_VAR 0 7
63990: PPUSH
63991: LD_INT 5
63993: PPUSH
63994: LD_INT 4
63996: PPUSH
63997: CALL_OW 272
64001: PUSH
64002: LD_VAR 0 8
64006: PPUSH
64007: LD_INT 5
64009: PPUSH
64010: LD_INT 4
64012: PPUSH
64013: CALL_OW 273
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: ST_TO_ADDR
// for i = tmp downto 1 do
64030: LD_ADDR_VAR 0 4
64034: PUSH
64035: DOUBLE
64036: LD_VAR 0 6
64040: INC
64041: ST_TO_ADDR
64042: LD_INT 1
64044: PUSH
64045: FOR_DOWNTO
64046: IFFALSE 64147
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64048: LD_VAR 0 6
64052: PUSH
64053: LD_VAR 0 4
64057: ARRAY
64058: PUSH
64059: LD_INT 1
64061: ARRAY
64062: PPUSH
64063: LD_VAR 0 6
64067: PUSH
64068: LD_VAR 0 4
64072: ARRAY
64073: PUSH
64074: LD_INT 2
64076: ARRAY
64077: PPUSH
64078: CALL_OW 488
64082: NOT
64083: PUSH
64084: LD_VAR 0 6
64088: PUSH
64089: LD_VAR 0 4
64093: ARRAY
64094: PUSH
64095: LD_INT 1
64097: ARRAY
64098: PPUSH
64099: LD_VAR 0 6
64103: PUSH
64104: LD_VAR 0 4
64108: ARRAY
64109: PUSH
64110: LD_INT 2
64112: ARRAY
64113: PPUSH
64114: CALL_OW 428
64118: PUSH
64119: LD_INT 0
64121: NONEQUAL
64122: OR
64123: IFFALSE 64145
// tmp := Delete ( tmp , i ) ;
64125: LD_ADDR_VAR 0 6
64129: PUSH
64130: LD_VAR 0 6
64134: PPUSH
64135: LD_VAR 0 4
64139: PPUSH
64140: CALL_OW 3
64144: ST_TO_ADDR
64145: GO 64045
64147: POP
64148: POP
// j := GetClosestHex ( unit , tmp ) ;
64149: LD_ADDR_VAR 0 5
64153: PUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: LD_VAR 0 6
64163: PPUSH
64164: CALL 63449 0 2
64168: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64169: LD_VAR 0 1
64173: PPUSH
64174: LD_VAR 0 5
64178: PUSH
64179: LD_INT 1
64181: ARRAY
64182: PPUSH
64183: LD_VAR 0 5
64187: PUSH
64188: LD_INT 2
64190: ARRAY
64191: PPUSH
64192: CALL_OW 111
// end ;
64196: LD_VAR 0 3
64200: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64201: LD_INT 0
64203: PPUSH
64204: PPUSH
64205: PPUSH
// uc_side = 0 ;
64206: LD_ADDR_OWVAR 20
64210: PUSH
64211: LD_INT 0
64213: ST_TO_ADDR
// uc_nation = 0 ;
64214: LD_ADDR_OWVAR 21
64218: PUSH
64219: LD_INT 0
64221: ST_TO_ADDR
// InitHc ;
64222: CALL_OW 19
// InitVc ;
64226: CALL_OW 20
// if mastodonts then
64230: LD_VAR 0 6
64234: IFFALSE 64301
// for i = 1 to mastodonts do
64236: LD_ADDR_VAR 0 11
64240: PUSH
64241: DOUBLE
64242: LD_INT 1
64244: DEC
64245: ST_TO_ADDR
64246: LD_VAR 0 6
64250: PUSH
64251: FOR_TO
64252: IFFALSE 64299
// begin vc_chassis := 31 ;
64254: LD_ADDR_OWVAR 37
64258: PUSH
64259: LD_INT 31
64261: ST_TO_ADDR
// vc_control := control_rider ;
64262: LD_ADDR_OWVAR 38
64266: PUSH
64267: LD_INT 4
64269: ST_TO_ADDR
// animal := CreateVehicle ;
64270: LD_ADDR_VAR 0 12
64274: PUSH
64275: CALL_OW 45
64279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64280: LD_VAR 0 12
64284: PPUSH
64285: LD_VAR 0 8
64289: PPUSH
64290: LD_INT 0
64292: PPUSH
64293: CALL 66370 0 3
// end ;
64297: GO 64251
64299: POP
64300: POP
// if horses then
64301: LD_VAR 0 5
64305: IFFALSE 64372
// for i = 1 to horses do
64307: LD_ADDR_VAR 0 11
64311: PUSH
64312: DOUBLE
64313: LD_INT 1
64315: DEC
64316: ST_TO_ADDR
64317: LD_VAR 0 5
64321: PUSH
64322: FOR_TO
64323: IFFALSE 64370
// begin hc_class := 21 ;
64325: LD_ADDR_OWVAR 28
64329: PUSH
64330: LD_INT 21
64332: ST_TO_ADDR
// hc_gallery :=  ;
64333: LD_ADDR_OWVAR 33
64337: PUSH
64338: LD_STRING 
64340: ST_TO_ADDR
// animal := CreateHuman ;
64341: LD_ADDR_VAR 0 12
64345: PUSH
64346: CALL_OW 44
64350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64351: LD_VAR 0 12
64355: PPUSH
64356: LD_VAR 0 8
64360: PPUSH
64361: LD_INT 0
64363: PPUSH
64364: CALL 66370 0 3
// end ;
64368: GO 64322
64370: POP
64371: POP
// if birds then
64372: LD_VAR 0 1
64376: IFFALSE 64443
// for i = 1 to birds do
64378: LD_ADDR_VAR 0 11
64382: PUSH
64383: DOUBLE
64384: LD_INT 1
64386: DEC
64387: ST_TO_ADDR
64388: LD_VAR 0 1
64392: PUSH
64393: FOR_TO
64394: IFFALSE 64441
// begin hc_class = 18 ;
64396: LD_ADDR_OWVAR 28
64400: PUSH
64401: LD_INT 18
64403: ST_TO_ADDR
// hc_gallery =  ;
64404: LD_ADDR_OWVAR 33
64408: PUSH
64409: LD_STRING 
64411: ST_TO_ADDR
// animal := CreateHuman ;
64412: LD_ADDR_VAR 0 12
64416: PUSH
64417: CALL_OW 44
64421: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64422: LD_VAR 0 12
64426: PPUSH
64427: LD_VAR 0 8
64431: PPUSH
64432: LD_INT 0
64434: PPUSH
64435: CALL 66370 0 3
// end ;
64439: GO 64393
64441: POP
64442: POP
// if tigers then
64443: LD_VAR 0 2
64447: IFFALSE 64531
// for i = 1 to tigers do
64449: LD_ADDR_VAR 0 11
64453: PUSH
64454: DOUBLE
64455: LD_INT 1
64457: DEC
64458: ST_TO_ADDR
64459: LD_VAR 0 2
64463: PUSH
64464: FOR_TO
64465: IFFALSE 64529
// begin hc_class = class_tiger ;
64467: LD_ADDR_OWVAR 28
64471: PUSH
64472: LD_INT 14
64474: ST_TO_ADDR
// hc_gallery =  ;
64475: LD_ADDR_OWVAR 33
64479: PUSH
64480: LD_STRING 
64482: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64483: LD_ADDR_OWVAR 35
64487: PUSH
64488: LD_INT 7
64490: NEG
64491: PPUSH
64492: LD_INT 7
64494: PPUSH
64495: CALL_OW 12
64499: ST_TO_ADDR
// animal := CreateHuman ;
64500: LD_ADDR_VAR 0 12
64504: PUSH
64505: CALL_OW 44
64509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64510: LD_VAR 0 12
64514: PPUSH
64515: LD_VAR 0 8
64519: PPUSH
64520: LD_INT 0
64522: PPUSH
64523: CALL 66370 0 3
// end ;
64527: GO 64464
64529: POP
64530: POP
// if apemans then
64531: LD_VAR 0 3
64535: IFFALSE 64658
// for i = 1 to apemans do
64537: LD_ADDR_VAR 0 11
64541: PUSH
64542: DOUBLE
64543: LD_INT 1
64545: DEC
64546: ST_TO_ADDR
64547: LD_VAR 0 3
64551: PUSH
64552: FOR_TO
64553: IFFALSE 64656
// begin hc_class = class_apeman ;
64555: LD_ADDR_OWVAR 28
64559: PUSH
64560: LD_INT 12
64562: ST_TO_ADDR
// hc_gallery =  ;
64563: LD_ADDR_OWVAR 33
64567: PUSH
64568: LD_STRING 
64570: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64571: LD_ADDR_OWVAR 35
64575: PUSH
64576: LD_INT 5
64578: NEG
64579: PPUSH
64580: LD_INT 5
64582: PPUSH
64583: CALL_OW 12
64587: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64588: LD_ADDR_OWVAR 31
64592: PUSH
64593: LD_INT 1
64595: PPUSH
64596: LD_INT 3
64598: PPUSH
64599: CALL_OW 12
64603: PUSH
64604: LD_INT 1
64606: PPUSH
64607: LD_INT 3
64609: PPUSH
64610: CALL_OW 12
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: ST_TO_ADDR
// animal := CreateHuman ;
64627: LD_ADDR_VAR 0 12
64631: PUSH
64632: CALL_OW 44
64636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64637: LD_VAR 0 12
64641: PPUSH
64642: LD_VAR 0 8
64646: PPUSH
64647: LD_INT 0
64649: PPUSH
64650: CALL 66370 0 3
// end ;
64654: GO 64552
64656: POP
64657: POP
// if enchidnas then
64658: LD_VAR 0 4
64662: IFFALSE 64729
// for i = 1 to enchidnas do
64664: LD_ADDR_VAR 0 11
64668: PUSH
64669: DOUBLE
64670: LD_INT 1
64672: DEC
64673: ST_TO_ADDR
64674: LD_VAR 0 4
64678: PUSH
64679: FOR_TO
64680: IFFALSE 64727
// begin hc_class = 13 ;
64682: LD_ADDR_OWVAR 28
64686: PUSH
64687: LD_INT 13
64689: ST_TO_ADDR
// hc_gallery =  ;
64690: LD_ADDR_OWVAR 33
64694: PUSH
64695: LD_STRING 
64697: ST_TO_ADDR
// animal := CreateHuman ;
64698: LD_ADDR_VAR 0 12
64702: PUSH
64703: CALL_OW 44
64707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64708: LD_VAR 0 12
64712: PPUSH
64713: LD_VAR 0 8
64717: PPUSH
64718: LD_INT 0
64720: PPUSH
64721: CALL 66370 0 3
// end ;
64725: GO 64679
64727: POP
64728: POP
// if fishes then
64729: LD_VAR 0 7
64733: IFFALSE 64800
// for i = 1 to fishes do
64735: LD_ADDR_VAR 0 11
64739: PUSH
64740: DOUBLE
64741: LD_INT 1
64743: DEC
64744: ST_TO_ADDR
64745: LD_VAR 0 7
64749: PUSH
64750: FOR_TO
64751: IFFALSE 64798
// begin hc_class = 20 ;
64753: LD_ADDR_OWVAR 28
64757: PUSH
64758: LD_INT 20
64760: ST_TO_ADDR
// hc_gallery =  ;
64761: LD_ADDR_OWVAR 33
64765: PUSH
64766: LD_STRING 
64768: ST_TO_ADDR
// animal := CreateHuman ;
64769: LD_ADDR_VAR 0 12
64773: PUSH
64774: CALL_OW 44
64778: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64779: LD_VAR 0 12
64783: PPUSH
64784: LD_VAR 0 9
64788: PPUSH
64789: LD_INT 0
64791: PPUSH
64792: CALL 66370 0 3
// end ;
64796: GO 64750
64798: POP
64799: POP
// end ;
64800: LD_VAR 0 10
64804: RET
// export function WantHeal ( sci , unit ) ; begin
64805: LD_INT 0
64807: PPUSH
// if GetTaskList ( sci ) > 0 then
64808: LD_VAR 0 1
64812: PPUSH
64813: CALL_OW 437
64817: PUSH
64818: LD_INT 0
64820: GREATER
64821: IFFALSE 64891
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64823: LD_VAR 0 1
64827: PPUSH
64828: CALL_OW 437
64832: PUSH
64833: LD_INT 1
64835: ARRAY
64836: PUSH
64837: LD_INT 1
64839: ARRAY
64840: PUSH
64841: LD_STRING l
64843: EQUAL
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: CALL_OW 437
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PUSH
64859: LD_INT 4
64861: ARRAY
64862: PUSH
64863: LD_VAR 0 2
64867: EQUAL
64868: AND
64869: IFFALSE 64881
// result := true else
64871: LD_ADDR_VAR 0 3
64875: PUSH
64876: LD_INT 1
64878: ST_TO_ADDR
64879: GO 64889
// result := false ;
64881: LD_ADDR_VAR 0 3
64885: PUSH
64886: LD_INT 0
64888: ST_TO_ADDR
// end else
64889: GO 64899
// result := false ;
64891: LD_ADDR_VAR 0 3
64895: PUSH
64896: LD_INT 0
64898: ST_TO_ADDR
// end ;
64899: LD_VAR 0 3
64903: RET
// export function HealTarget ( sci ) ; begin
64904: LD_INT 0
64906: PPUSH
// if not sci then
64907: LD_VAR 0 1
64911: NOT
64912: IFFALSE 64916
// exit ;
64914: GO 64981
// result := 0 ;
64916: LD_ADDR_VAR 0 2
64920: PUSH
64921: LD_INT 0
64923: ST_TO_ADDR
// if GetTaskList ( sci ) then
64924: LD_VAR 0 1
64928: PPUSH
64929: CALL_OW 437
64933: IFFALSE 64981
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64935: LD_VAR 0 1
64939: PPUSH
64940: CALL_OW 437
64944: PUSH
64945: LD_INT 1
64947: ARRAY
64948: PUSH
64949: LD_INT 1
64951: ARRAY
64952: PUSH
64953: LD_STRING l
64955: EQUAL
64956: IFFALSE 64981
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64958: LD_ADDR_VAR 0 2
64962: PUSH
64963: LD_VAR 0 1
64967: PPUSH
64968: CALL_OW 437
64972: PUSH
64973: LD_INT 1
64975: ARRAY
64976: PUSH
64977: LD_INT 4
64979: ARRAY
64980: ST_TO_ADDR
// end ;
64981: LD_VAR 0 2
64985: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64986: LD_INT 0
64988: PPUSH
64989: PPUSH
64990: PPUSH
64991: PPUSH
// if not base_units then
64992: LD_VAR 0 1
64996: NOT
64997: IFFALSE 65001
// exit ;
64999: GO 65088
// result := false ;
65001: LD_ADDR_VAR 0 2
65005: PUSH
65006: LD_INT 0
65008: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65009: LD_ADDR_VAR 0 5
65013: PUSH
65014: LD_VAR 0 1
65018: PPUSH
65019: LD_INT 21
65021: PUSH
65022: LD_INT 3
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PPUSH
65029: CALL_OW 72
65033: ST_TO_ADDR
// if not tmp then
65034: LD_VAR 0 5
65038: NOT
65039: IFFALSE 65043
// exit ;
65041: GO 65088
// for i in tmp do
65043: LD_ADDR_VAR 0 3
65047: PUSH
65048: LD_VAR 0 5
65052: PUSH
65053: FOR_IN
65054: IFFALSE 65086
// begin result := EnemyInRange ( i , 22 ) ;
65056: LD_ADDR_VAR 0 2
65060: PUSH
65061: LD_VAR 0 3
65065: PPUSH
65066: LD_INT 22
65068: PPUSH
65069: CALL 63324 0 2
65073: ST_TO_ADDR
// if result then
65074: LD_VAR 0 2
65078: IFFALSE 65084
// exit ;
65080: POP
65081: POP
65082: GO 65088
// end ;
65084: GO 65053
65086: POP
65087: POP
// end ;
65088: LD_VAR 0 2
65092: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65093: LD_INT 0
65095: PPUSH
65096: PPUSH
// if not units then
65097: LD_VAR 0 1
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65176
// result := [ ] ;
65106: LD_ADDR_VAR 0 3
65110: PUSH
65111: EMPTY
65112: ST_TO_ADDR
// for i in units do
65113: LD_ADDR_VAR 0 4
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: FOR_IN
65124: IFFALSE 65174
// if GetTag ( i ) = tag then
65126: LD_VAR 0 4
65130: PPUSH
65131: CALL_OW 110
65135: PUSH
65136: LD_VAR 0 2
65140: EQUAL
65141: IFFALSE 65172
// result := Insert ( result , result + 1 , i ) ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_VAR 0 3
65152: PPUSH
65153: LD_VAR 0 3
65157: PUSH
65158: LD_INT 1
65160: PLUS
65161: PPUSH
65162: LD_VAR 0 4
65166: PPUSH
65167: CALL_OW 2
65171: ST_TO_ADDR
65172: GO 65123
65174: POP
65175: POP
// end ;
65176: LD_VAR 0 3
65180: RET
// export function IsDriver ( un ) ; begin
65181: LD_INT 0
65183: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65184: LD_ADDR_VAR 0 2
65188: PUSH
65189: LD_VAR 0 1
65193: PUSH
65194: LD_INT 55
65196: PUSH
65197: EMPTY
65198: LIST
65199: PPUSH
65200: CALL_OW 69
65204: IN
65205: ST_TO_ADDR
// end ;
65206: LD_VAR 0 2
65210: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65211: LD_INT 0
65213: PPUSH
65214: PPUSH
// list := [ ] ;
65215: LD_ADDR_VAR 0 5
65219: PUSH
65220: EMPTY
65221: ST_TO_ADDR
// case d of 0 :
65222: LD_VAR 0 3
65226: PUSH
65227: LD_INT 0
65229: DOUBLE
65230: EQUAL
65231: IFTRUE 65235
65233: GO 65368
65235: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65236: LD_ADDR_VAR 0 5
65240: PUSH
65241: LD_VAR 0 1
65245: PUSH
65246: LD_INT 4
65248: MINUS
65249: PUSH
65250: LD_VAR 0 2
65254: PUSH
65255: LD_INT 4
65257: MINUS
65258: PUSH
65259: LD_INT 2
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_INT 3
65274: MINUS
65275: PUSH
65276: LD_VAR 0 2
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_INT 4
65296: PLUS
65297: PUSH
65298: LD_VAR 0 2
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: LIST
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: LD_INT 3
65318: PLUS
65319: PUSH
65320: LD_VAR 0 2
65324: PUSH
65325: LD_INT 3
65327: PLUS
65328: PUSH
65329: LD_INT 5
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_VAR 0 2
65346: PUSH
65347: LD_INT 4
65349: PLUS
65350: PUSH
65351: LD_INT 0
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: LIST
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: ST_TO_ADDR
// end ; 1 :
65366: GO 66066
65368: LD_INT 1
65370: DOUBLE
65371: EQUAL
65372: IFTRUE 65376
65374: GO 65509
65376: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65377: LD_ADDR_VAR 0 5
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_VAR 0 2
65391: PUSH
65392: LD_INT 4
65394: MINUS
65395: PUSH
65396: LD_INT 3
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: LD_VAR 0 1
65408: PUSH
65409: LD_INT 3
65411: MINUS
65412: PUSH
65413: LD_VAR 0 2
65417: PUSH
65418: LD_INT 3
65420: MINUS
65421: PUSH
65422: LD_INT 2
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: LD_VAR 0 1
65434: PUSH
65435: LD_INT 4
65437: MINUS
65438: PUSH
65439: LD_VAR 0 2
65443: PUSH
65444: LD_INT 1
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: PUSH
65452: LD_VAR 0 1
65456: PUSH
65457: LD_VAR 0 2
65461: PUSH
65462: LD_INT 3
65464: PLUS
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: LIST
65473: PUSH
65474: LD_VAR 0 1
65478: PUSH
65479: LD_INT 4
65481: PLUS
65482: PUSH
65483: LD_VAR 0 2
65487: PUSH
65488: LD_INT 4
65490: PLUS
65491: PUSH
65492: LD_INT 5
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: ST_TO_ADDR
// end ; 2 :
65507: GO 66066
65509: LD_INT 2
65511: DOUBLE
65512: EQUAL
65513: IFTRUE 65517
65515: GO 65646
65517: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65518: LD_ADDR_VAR 0 5
65522: PUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_VAR 0 2
65532: PUSH
65533: LD_INT 3
65535: MINUS
65536: PUSH
65537: LD_INT 3
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_VAR 0 1
65549: PUSH
65550: LD_INT 4
65552: PLUS
65553: PUSH
65554: LD_VAR 0 2
65558: PUSH
65559: LD_INT 4
65561: PUSH
65562: EMPTY
65563: LIST
65564: LIST
65565: LIST
65566: PUSH
65567: LD_VAR 0 1
65571: PUSH
65572: LD_VAR 0 2
65576: PUSH
65577: LD_INT 4
65579: PLUS
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: LIST
65588: PUSH
65589: LD_VAR 0 1
65593: PUSH
65594: LD_INT 3
65596: MINUS
65597: PUSH
65598: LD_VAR 0 2
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: PUSH
65611: LD_VAR 0 1
65615: PUSH
65616: LD_INT 4
65618: MINUS
65619: PUSH
65620: LD_VAR 0 2
65624: PUSH
65625: LD_INT 4
65627: MINUS
65628: PUSH
65629: LD_INT 2
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: LIST
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: ST_TO_ADDR
// end ; 3 :
65644: GO 66066
65646: LD_INT 3
65648: DOUBLE
65649: EQUAL
65650: IFTRUE 65654
65652: GO 65787
65654: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65655: LD_ADDR_VAR 0 5
65659: PUSH
65660: LD_VAR 0 1
65664: PUSH
65665: LD_INT 3
65667: PLUS
65668: PUSH
65669: LD_VAR 0 2
65673: PUSH
65674: LD_INT 4
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: LIST
65681: PUSH
65682: LD_VAR 0 1
65686: PUSH
65687: LD_INT 4
65689: PLUS
65690: PUSH
65691: LD_VAR 0 2
65695: PUSH
65696: LD_INT 4
65698: PLUS
65699: PUSH
65700: LD_INT 5
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: LIST
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_INT 4
65715: MINUS
65716: PUSH
65717: LD_VAR 0 2
65721: PUSH
65722: LD_INT 1
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: LIST
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_VAR 0 2
65739: PUSH
65740: LD_INT 4
65742: MINUS
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: LIST
65751: PUSH
65752: LD_VAR 0 1
65756: PUSH
65757: LD_INT 3
65759: MINUS
65760: PUSH
65761: LD_VAR 0 2
65765: PUSH
65766: LD_INT 3
65768: MINUS
65769: PUSH
65770: LD_INT 2
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: ST_TO_ADDR
// end ; 4 :
65785: GO 66066
65787: LD_INT 4
65789: DOUBLE
65790: EQUAL
65791: IFTRUE 65795
65793: GO 65928
65795: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65796: LD_ADDR_VAR 0 5
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_VAR 0 2
65810: PUSH
65811: LD_INT 4
65813: PLUS
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: LIST
65822: PUSH
65823: LD_VAR 0 1
65827: PUSH
65828: LD_INT 3
65830: PLUS
65831: PUSH
65832: LD_VAR 0 2
65836: PUSH
65837: LD_INT 3
65839: PLUS
65840: PUSH
65841: LD_INT 5
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: LIST
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 4
65856: PLUS
65857: PUSH
65858: LD_VAR 0 2
65862: PUSH
65863: LD_INT 4
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: LIST
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_VAR 0 2
65880: PUSH
65881: LD_INT 3
65883: MINUS
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: PUSH
65893: LD_VAR 0 1
65897: PUSH
65898: LD_INT 4
65900: MINUS
65901: PUSH
65902: LD_VAR 0 2
65906: PUSH
65907: LD_INT 4
65909: MINUS
65910: PUSH
65911: LD_INT 2
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: LIST
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: ST_TO_ADDR
// end ; 5 :
65926: GO 66066
65928: LD_INT 5
65930: DOUBLE
65931: EQUAL
65932: IFTRUE 65936
65934: GO 66065
65936: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65937: LD_ADDR_VAR 0 5
65941: PUSH
65942: LD_VAR 0 1
65946: PUSH
65947: LD_INT 4
65949: MINUS
65950: PUSH
65951: LD_VAR 0 2
65955: PUSH
65956: LD_INT 1
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: PUSH
65964: LD_VAR 0 1
65968: PUSH
65969: LD_VAR 0 2
65973: PUSH
65974: LD_INT 4
65976: MINUS
65977: PUSH
65978: LD_INT 3
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: LD_VAR 0 1
65990: PUSH
65991: LD_INT 4
65993: PLUS
65994: PUSH
65995: LD_VAR 0 2
65999: PUSH
66000: LD_INT 4
66002: PLUS
66003: PUSH
66004: LD_INT 5
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: PUSH
66012: LD_VAR 0 1
66016: PUSH
66017: LD_INT 3
66019: PLUS
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: LD_INT 4
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: PUSH
66034: LD_VAR 0 1
66038: PUSH
66039: LD_VAR 0 2
66043: PUSH
66044: LD_INT 3
66046: PLUS
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// end ; end ;
66063: GO 66066
66065: POP
// result := list ;
66066: LD_ADDR_VAR 0 4
66070: PUSH
66071: LD_VAR 0 5
66075: ST_TO_ADDR
// end ;
66076: LD_VAR 0 4
66080: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66086: LD_VAR 0 1
66090: NOT
66091: PUSH
66092: LD_VAR 0 2
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: LD_INT 3
66105: PUSH
66106: LD_INT 4
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: IN
66115: NOT
66116: OR
66117: IFFALSE 66121
// exit ;
66119: GO 66213
// tmp := [ ] ;
66121: LD_ADDR_VAR 0 5
66125: PUSH
66126: EMPTY
66127: ST_TO_ADDR
// for i in units do
66128: LD_ADDR_VAR 0 4
66132: PUSH
66133: LD_VAR 0 1
66137: PUSH
66138: FOR_IN
66139: IFFALSE 66182
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66141: LD_ADDR_VAR 0 5
66145: PUSH
66146: LD_VAR 0 5
66150: PPUSH
66151: LD_VAR 0 5
66155: PUSH
66156: LD_INT 1
66158: PLUS
66159: PPUSH
66160: LD_VAR 0 4
66164: PPUSH
66165: LD_VAR 0 2
66169: PPUSH
66170: CALL_OW 259
66174: PPUSH
66175: CALL_OW 2
66179: ST_TO_ADDR
66180: GO 66138
66182: POP
66183: POP
// if not tmp then
66184: LD_VAR 0 5
66188: NOT
66189: IFFALSE 66193
// exit ;
66191: GO 66213
// result := SortListByListDesc ( units , tmp ) ;
66193: LD_ADDR_VAR 0 3
66197: PUSH
66198: LD_VAR 0 1
66202: PPUSH
66203: LD_VAR 0 5
66207: PPUSH
66208: CALL_OW 77
66212: ST_TO_ADDR
// end ;
66213: LD_VAR 0 3
66217: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66218: LD_INT 0
66220: PPUSH
66221: PPUSH
66222: PPUSH
// x := GetX ( building ) ;
66223: LD_ADDR_VAR 0 4
66227: PUSH
66228: LD_VAR 0 2
66232: PPUSH
66233: CALL_OW 250
66237: ST_TO_ADDR
// y := GetY ( building ) ;
66238: LD_ADDR_VAR 0 5
66242: PUSH
66243: LD_VAR 0 2
66247: PPUSH
66248: CALL_OW 251
66252: ST_TO_ADDR
// if GetTaskList ( unit ) then
66253: LD_VAR 0 1
66257: PPUSH
66258: CALL_OW 437
66262: IFFALSE 66357
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66264: LD_STRING e
66266: PUSH
66267: LD_VAR 0 1
66271: PPUSH
66272: CALL_OW 437
66276: PUSH
66277: LD_INT 1
66279: ARRAY
66280: PUSH
66281: LD_INT 1
66283: ARRAY
66284: EQUAL
66285: PUSH
66286: LD_VAR 0 4
66290: PUSH
66291: LD_VAR 0 1
66295: PPUSH
66296: CALL_OW 437
66300: PUSH
66301: LD_INT 1
66303: ARRAY
66304: PUSH
66305: LD_INT 2
66307: ARRAY
66308: EQUAL
66309: AND
66310: PUSH
66311: LD_VAR 0 5
66315: PUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: CALL_OW 437
66325: PUSH
66326: LD_INT 1
66328: ARRAY
66329: PUSH
66330: LD_INT 3
66332: ARRAY
66333: EQUAL
66334: AND
66335: IFFALSE 66347
// result := true else
66337: LD_ADDR_VAR 0 3
66341: PUSH
66342: LD_INT 1
66344: ST_TO_ADDR
66345: GO 66355
// result := false ;
66347: LD_ADDR_VAR 0 3
66351: PUSH
66352: LD_INT 0
66354: ST_TO_ADDR
// end else
66355: GO 66365
// result := false ;
66357: LD_ADDR_VAR 0 3
66361: PUSH
66362: LD_INT 0
66364: ST_TO_ADDR
// end ;
66365: LD_VAR 0 3
66369: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66370: LD_INT 0
66372: PPUSH
66373: PPUSH
66374: PPUSH
66375: PPUSH
// if not unit or not area then
66376: LD_VAR 0 1
66380: NOT
66381: PUSH
66382: LD_VAR 0 2
66386: NOT
66387: OR
66388: IFFALSE 66392
// exit ;
66390: GO 66556
// tmp := AreaToList ( area , i ) ;
66392: LD_ADDR_VAR 0 6
66396: PUSH
66397: LD_VAR 0 2
66401: PPUSH
66402: LD_VAR 0 5
66406: PPUSH
66407: CALL_OW 517
66411: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66412: LD_ADDR_VAR 0 5
66416: PUSH
66417: DOUBLE
66418: LD_INT 1
66420: DEC
66421: ST_TO_ADDR
66422: LD_VAR 0 6
66426: PUSH
66427: LD_INT 1
66429: ARRAY
66430: PUSH
66431: FOR_TO
66432: IFFALSE 66554
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66434: LD_ADDR_VAR 0 7
66438: PUSH
66439: LD_VAR 0 6
66443: PUSH
66444: LD_INT 1
66446: ARRAY
66447: PUSH
66448: LD_VAR 0 5
66452: ARRAY
66453: PUSH
66454: LD_VAR 0 6
66458: PUSH
66459: LD_INT 2
66461: ARRAY
66462: PUSH
66463: LD_VAR 0 5
66467: ARRAY
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66473: LD_VAR 0 7
66477: PUSH
66478: LD_INT 1
66480: ARRAY
66481: PPUSH
66482: LD_VAR 0 7
66486: PUSH
66487: LD_INT 2
66489: ARRAY
66490: PPUSH
66491: CALL_OW 428
66495: PUSH
66496: LD_INT 0
66498: EQUAL
66499: IFFALSE 66552
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66501: LD_VAR 0 1
66505: PPUSH
66506: LD_VAR 0 7
66510: PUSH
66511: LD_INT 1
66513: ARRAY
66514: PPUSH
66515: LD_VAR 0 7
66519: PUSH
66520: LD_INT 2
66522: ARRAY
66523: PPUSH
66524: LD_VAR 0 3
66528: PPUSH
66529: CALL_OW 48
// result := IsPlaced ( unit ) ;
66533: LD_ADDR_VAR 0 4
66537: PUSH
66538: LD_VAR 0 1
66542: PPUSH
66543: CALL_OW 305
66547: ST_TO_ADDR
// exit ;
66548: POP
66549: POP
66550: GO 66556
// end ; end ;
66552: GO 66431
66554: POP
66555: POP
// end ;
66556: LD_VAR 0 4
66560: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66561: LD_INT 0
66563: PPUSH
66564: PPUSH
66565: PPUSH
// if not side or side > 8 then
66566: LD_VAR 0 1
66570: NOT
66571: PUSH
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 8
66579: GREATER
66580: OR
66581: IFFALSE 66585
// exit ;
66583: GO 66772
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66585: LD_ADDR_VAR 0 4
66589: PUSH
66590: LD_INT 22
66592: PUSH
66593: LD_VAR 0 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 21
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PPUSH
66616: CALL_OW 69
66620: ST_TO_ADDR
// if not tmp then
66621: LD_VAR 0 4
66625: NOT
66626: IFFALSE 66630
// exit ;
66628: GO 66772
// enable_addtolog := true ;
66630: LD_ADDR_OWVAR 81
66634: PUSH
66635: LD_INT 1
66637: ST_TO_ADDR
// AddToLog ( [ ) ;
66638: LD_STRING [
66640: PPUSH
66641: CALL_OW 561
// for i in tmp do
66645: LD_ADDR_VAR 0 3
66649: PUSH
66650: LD_VAR 0 4
66654: PUSH
66655: FOR_IN
66656: IFFALSE 66763
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66658: LD_STRING [
66660: PUSH
66661: LD_VAR 0 3
66665: PPUSH
66666: CALL_OW 266
66670: STR
66671: PUSH
66672: LD_STRING , 
66674: STR
66675: PUSH
66676: LD_VAR 0 3
66680: PPUSH
66681: CALL_OW 250
66685: STR
66686: PUSH
66687: LD_STRING , 
66689: STR
66690: PUSH
66691: LD_VAR 0 3
66695: PPUSH
66696: CALL_OW 251
66700: STR
66701: PUSH
66702: LD_STRING , 
66704: STR
66705: PUSH
66706: LD_VAR 0 3
66710: PPUSH
66711: CALL_OW 254
66715: STR
66716: PUSH
66717: LD_STRING , 
66719: STR
66720: PUSH
66721: LD_VAR 0 3
66725: PPUSH
66726: LD_INT 1
66728: PPUSH
66729: CALL_OW 268
66733: STR
66734: PUSH
66735: LD_STRING , 
66737: STR
66738: PUSH
66739: LD_VAR 0 3
66743: PPUSH
66744: LD_INT 2
66746: PPUSH
66747: CALL_OW 268
66751: STR
66752: PUSH
66753: LD_STRING ],
66755: STR
66756: PPUSH
66757: CALL_OW 561
// end ;
66761: GO 66655
66763: POP
66764: POP
// AddToLog ( ]; ) ;
66765: LD_STRING ];
66767: PPUSH
66768: CALL_OW 561
// end ;
66772: LD_VAR 0 2
66776: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66777: LD_INT 0
66779: PPUSH
66780: PPUSH
66781: PPUSH
66782: PPUSH
66783: PPUSH
// if not area or not rate or not max then
66784: LD_VAR 0 1
66788: NOT
66789: PUSH
66790: LD_VAR 0 2
66794: NOT
66795: OR
66796: PUSH
66797: LD_VAR 0 4
66801: NOT
66802: OR
66803: IFFALSE 66807
// exit ;
66805: GO 66999
// while 1 do
66807: LD_INT 1
66809: IFFALSE 66999
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66811: LD_ADDR_VAR 0 9
66815: PUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: LD_INT 1
66823: PPUSH
66824: CALL_OW 287
66828: PUSH
66829: LD_INT 10
66831: MUL
66832: ST_TO_ADDR
// r := rate / 10 ;
66833: LD_ADDR_VAR 0 7
66837: PUSH
66838: LD_VAR 0 2
66842: PUSH
66843: LD_INT 10
66845: DIVREAL
66846: ST_TO_ADDR
// time := 1 1$00 ;
66847: LD_ADDR_VAR 0 8
66851: PUSH
66852: LD_INT 2100
66854: ST_TO_ADDR
// if amount < min then
66855: LD_VAR 0 9
66859: PUSH
66860: LD_VAR 0 3
66864: LESS
66865: IFFALSE 66883
// r := r * 2 else
66867: LD_ADDR_VAR 0 7
66871: PUSH
66872: LD_VAR 0 7
66876: PUSH
66877: LD_INT 2
66879: MUL
66880: ST_TO_ADDR
66881: GO 66909
// if amount > max then
66883: LD_VAR 0 9
66887: PUSH
66888: LD_VAR 0 4
66892: GREATER
66893: IFFALSE 66909
// r := r / 2 ;
66895: LD_ADDR_VAR 0 7
66899: PUSH
66900: LD_VAR 0 7
66904: PUSH
66905: LD_INT 2
66907: DIVREAL
66908: ST_TO_ADDR
// time := time / r ;
66909: LD_ADDR_VAR 0 8
66913: PUSH
66914: LD_VAR 0 8
66918: PUSH
66919: LD_VAR 0 7
66923: DIVREAL
66924: ST_TO_ADDR
// if time < 0 then
66925: LD_VAR 0 8
66929: PUSH
66930: LD_INT 0
66932: LESS
66933: IFFALSE 66950
// time := time * - 1 ;
66935: LD_ADDR_VAR 0 8
66939: PUSH
66940: LD_VAR 0 8
66944: PUSH
66945: LD_INT 1
66947: NEG
66948: MUL
66949: ST_TO_ADDR
// wait ( time ) ;
66950: LD_VAR 0 8
66954: PPUSH
66955: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66959: LD_INT 35
66961: PPUSH
66962: LD_INT 875
66964: PPUSH
66965: CALL_OW 12
66969: PPUSH
66970: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66974: LD_INT 1
66976: PPUSH
66977: LD_INT 5
66979: PPUSH
66980: CALL_OW 12
66984: PPUSH
66985: LD_VAR 0 1
66989: PPUSH
66990: LD_INT 1
66992: PPUSH
66993: CALL_OW 55
// end ;
66997: GO 66807
// end ;
66999: LD_VAR 0 5
67003: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67004: LD_INT 0
67006: PPUSH
67007: PPUSH
67008: PPUSH
67009: PPUSH
67010: PPUSH
67011: PPUSH
67012: PPUSH
67013: PPUSH
// if not turrets or not factories then
67014: LD_VAR 0 1
67018: NOT
67019: PUSH
67020: LD_VAR 0 2
67024: NOT
67025: OR
67026: IFFALSE 67030
// exit ;
67028: GO 67337
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67030: LD_ADDR_VAR 0 10
67034: PUSH
67035: LD_INT 5
67037: PUSH
67038: LD_INT 6
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: LD_INT 4
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: LD_INT 3
67057: PUSH
67058: LD_INT 5
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 24
67072: PUSH
67073: LD_INT 25
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 23
67082: PUSH
67083: LD_INT 27
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 42
67096: PUSH
67097: LD_INT 43
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 44
67106: PUSH
67107: LD_INT 46
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 45
67116: PUSH
67117: LD_INT 47
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: LIST
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: ST_TO_ADDR
// result := [ ] ;
67134: LD_ADDR_VAR 0 3
67138: PUSH
67139: EMPTY
67140: ST_TO_ADDR
// for i in turrets do
67141: LD_ADDR_VAR 0 4
67145: PUSH
67146: LD_VAR 0 1
67150: PUSH
67151: FOR_IN
67152: IFFALSE 67335
// begin nat := GetNation ( i ) ;
67154: LD_ADDR_VAR 0 7
67158: PUSH
67159: LD_VAR 0 4
67163: PPUSH
67164: CALL_OW 248
67168: ST_TO_ADDR
// weapon := 0 ;
67169: LD_ADDR_VAR 0 8
67173: PUSH
67174: LD_INT 0
67176: ST_TO_ADDR
// if not nat then
67177: LD_VAR 0 7
67181: NOT
67182: IFFALSE 67186
// continue ;
67184: GO 67151
// for j in list [ nat ] do
67186: LD_ADDR_VAR 0 5
67190: PUSH
67191: LD_VAR 0 10
67195: PUSH
67196: LD_VAR 0 7
67200: ARRAY
67201: PUSH
67202: FOR_IN
67203: IFFALSE 67244
// if GetBWeapon ( i ) = j [ 1 ] then
67205: LD_VAR 0 4
67209: PPUSH
67210: CALL_OW 269
67214: PUSH
67215: LD_VAR 0 5
67219: PUSH
67220: LD_INT 1
67222: ARRAY
67223: EQUAL
67224: IFFALSE 67242
// begin weapon := j [ 2 ] ;
67226: LD_ADDR_VAR 0 8
67230: PUSH
67231: LD_VAR 0 5
67235: PUSH
67236: LD_INT 2
67238: ARRAY
67239: ST_TO_ADDR
// break ;
67240: GO 67244
// end ;
67242: GO 67202
67244: POP
67245: POP
// if not weapon then
67246: LD_VAR 0 8
67250: NOT
67251: IFFALSE 67255
// continue ;
67253: GO 67151
// for k in factories do
67255: LD_ADDR_VAR 0 6
67259: PUSH
67260: LD_VAR 0 2
67264: PUSH
67265: FOR_IN
67266: IFFALSE 67331
// begin weapons := AvailableWeaponList ( k ) ;
67268: LD_ADDR_VAR 0 9
67272: PUSH
67273: LD_VAR 0 6
67277: PPUSH
67278: CALL_OW 478
67282: ST_TO_ADDR
// if not weapons then
67283: LD_VAR 0 9
67287: NOT
67288: IFFALSE 67292
// continue ;
67290: GO 67265
// if weapon in weapons then
67292: LD_VAR 0 8
67296: PUSH
67297: LD_VAR 0 9
67301: IN
67302: IFFALSE 67329
// begin result := [ i , weapon ] ;
67304: LD_ADDR_VAR 0 3
67308: PUSH
67309: LD_VAR 0 4
67313: PUSH
67314: LD_VAR 0 8
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: ST_TO_ADDR
// exit ;
67323: POP
67324: POP
67325: POP
67326: POP
67327: GO 67337
// end ; end ;
67329: GO 67265
67331: POP
67332: POP
// end ;
67333: GO 67151
67335: POP
67336: POP
// end ;
67337: LD_VAR 0 3
67341: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67342: LD_INT 0
67344: PPUSH
// if not side or side > 8 then
67345: LD_VAR 0 3
67349: NOT
67350: PUSH
67351: LD_VAR 0 3
67355: PUSH
67356: LD_INT 8
67358: GREATER
67359: OR
67360: IFFALSE 67364
// exit ;
67362: GO 67423
// if not range then
67364: LD_VAR 0 4
67368: NOT
67369: IFFALSE 67380
// range := - 12 ;
67371: LD_ADDR_VAR 0 4
67375: PUSH
67376: LD_INT 12
67378: NEG
67379: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67380: LD_VAR 0 1
67384: PPUSH
67385: LD_VAR 0 2
67389: PPUSH
67390: LD_VAR 0 3
67394: PPUSH
67395: LD_VAR 0 4
67399: PPUSH
67400: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67404: LD_VAR 0 1
67408: PPUSH
67409: LD_VAR 0 2
67413: PPUSH
67414: LD_VAR 0 3
67418: PPUSH
67419: CALL_OW 331
// end ;
67423: LD_VAR 0 5
67427: RET
// export function Video ( mode ) ; begin
67428: LD_INT 0
67430: PPUSH
// ingame_video = mode ;
67431: LD_ADDR_OWVAR 52
67435: PUSH
67436: LD_VAR 0 1
67440: ST_TO_ADDR
// interface_hidden = mode ;
67441: LD_ADDR_OWVAR 54
67445: PUSH
67446: LD_VAR 0 1
67450: ST_TO_ADDR
// end ;
67451: LD_VAR 0 2
67455: RET
// export function Join ( array , element ) ; begin
67456: LD_INT 0
67458: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67459: LD_ADDR_VAR 0 3
67463: PUSH
67464: LD_VAR 0 1
67468: PPUSH
67469: LD_VAR 0 1
67473: PUSH
67474: LD_INT 1
67476: PLUS
67477: PPUSH
67478: LD_VAR 0 2
67482: PPUSH
67483: CALL_OW 1
67487: ST_TO_ADDR
// end ;
67488: LD_VAR 0 3
67492: RET
// export function JoinUnion ( array , element ) ; begin
67493: LD_INT 0
67495: PPUSH
// result := array union element ;
67496: LD_ADDR_VAR 0 3
67500: PUSH
67501: LD_VAR 0 1
67505: PUSH
67506: LD_VAR 0 2
67510: UNION
67511: ST_TO_ADDR
// end ;
67512: LD_VAR 0 3
67516: RET
// export function GetBehemoths ( side ) ; begin
67517: LD_INT 0
67519: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67520: LD_ADDR_VAR 0 2
67524: PUSH
67525: LD_INT 22
67527: PUSH
67528: LD_VAR 0 1
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 31
67539: PUSH
67540: LD_INT 25
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PPUSH
67551: CALL_OW 69
67555: ST_TO_ADDR
// end ;
67556: LD_VAR 0 2
67560: RET
// export function Shuffle ( array ) ; var i , index ; begin
67561: LD_INT 0
67563: PPUSH
67564: PPUSH
67565: PPUSH
// result := [ ] ;
67566: LD_ADDR_VAR 0 2
67570: PUSH
67571: EMPTY
67572: ST_TO_ADDR
// if not array then
67573: LD_VAR 0 1
67577: NOT
67578: IFFALSE 67582
// exit ;
67580: GO 67681
// Randomize ;
67582: CALL_OW 10
// for i = array downto 1 do
67586: LD_ADDR_VAR 0 3
67590: PUSH
67591: DOUBLE
67592: LD_VAR 0 1
67596: INC
67597: ST_TO_ADDR
67598: LD_INT 1
67600: PUSH
67601: FOR_DOWNTO
67602: IFFALSE 67679
// begin index := rand ( 1 , array ) ;
67604: LD_ADDR_VAR 0 4
67608: PUSH
67609: LD_INT 1
67611: PPUSH
67612: LD_VAR 0 1
67616: PPUSH
67617: CALL_OW 12
67621: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67622: LD_ADDR_VAR 0 2
67626: PUSH
67627: LD_VAR 0 2
67631: PPUSH
67632: LD_VAR 0 2
67636: PUSH
67637: LD_INT 1
67639: PLUS
67640: PPUSH
67641: LD_VAR 0 1
67645: PUSH
67646: LD_VAR 0 4
67650: ARRAY
67651: PPUSH
67652: CALL_OW 2
67656: ST_TO_ADDR
// array := Delete ( array , index ) ;
67657: LD_ADDR_VAR 0 1
67661: PUSH
67662: LD_VAR 0 1
67666: PPUSH
67667: LD_VAR 0 4
67671: PPUSH
67672: CALL_OW 3
67676: ST_TO_ADDR
// end ;
67677: GO 67601
67679: POP
67680: POP
// end ;
67681: LD_VAR 0 2
67685: RET
// export function GetBaseMaterials ( base ) ; begin
67686: LD_INT 0
67688: PPUSH
// result := [ 0 , 0 , 0 ] ;
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: LIST
67707: ST_TO_ADDR
// if not base then
67708: LD_VAR 0 1
67712: NOT
67713: IFFALSE 67717
// exit ;
67715: GO 67766
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67717: LD_ADDR_VAR 0 2
67721: PUSH
67722: LD_VAR 0 1
67726: PPUSH
67727: LD_INT 1
67729: PPUSH
67730: CALL_OW 275
67734: PUSH
67735: LD_VAR 0 1
67739: PPUSH
67740: LD_INT 2
67742: PPUSH
67743: CALL_OW 275
67747: PUSH
67748: LD_VAR 0 1
67752: PPUSH
67753: LD_INT 3
67755: PPUSH
67756: CALL_OW 275
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: LIST
67765: ST_TO_ADDR
// end ;
67766: LD_VAR 0 2
67770: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67771: LD_INT 0
67773: PPUSH
67774: PPUSH
// result := array ;
67775: LD_ADDR_VAR 0 3
67779: PUSH
67780: LD_VAR 0 1
67784: ST_TO_ADDR
// if size > 0 then
67785: LD_VAR 0 2
67789: PUSH
67790: LD_INT 0
67792: GREATER
67793: IFFALSE 67839
// for i := array downto size do
67795: LD_ADDR_VAR 0 4
67799: PUSH
67800: DOUBLE
67801: LD_VAR 0 1
67805: INC
67806: ST_TO_ADDR
67807: LD_VAR 0 2
67811: PUSH
67812: FOR_DOWNTO
67813: IFFALSE 67837
// result := Delete ( result , result ) ;
67815: LD_ADDR_VAR 0 3
67819: PUSH
67820: LD_VAR 0 3
67824: PPUSH
67825: LD_VAR 0 3
67829: PPUSH
67830: CALL_OW 3
67834: ST_TO_ADDR
67835: GO 67812
67837: POP
67838: POP
// end ;
67839: LD_VAR 0 3
67843: RET
// export function ComExit ( unit ) ; var tmp ; begin
67844: LD_INT 0
67846: PPUSH
67847: PPUSH
// if not IsInUnit ( unit ) then
67848: LD_VAR 0 1
67852: PPUSH
67853: CALL_OW 310
67857: NOT
67858: IFFALSE 67862
// exit ;
67860: GO 67922
// tmp := IsInUnit ( unit ) ;
67862: LD_ADDR_VAR 0 3
67866: PUSH
67867: LD_VAR 0 1
67871: PPUSH
67872: CALL_OW 310
67876: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67877: LD_VAR 0 3
67881: PPUSH
67882: CALL_OW 247
67886: PUSH
67887: LD_INT 2
67889: EQUAL
67890: IFFALSE 67903
// ComExitVehicle ( unit ) else
67892: LD_VAR 0 1
67896: PPUSH
67897: CALL_OW 121
67901: GO 67912
// ComExitBuilding ( unit ) ;
67903: LD_VAR 0 1
67907: PPUSH
67908: CALL_OW 122
// result := tmp ;
67912: LD_ADDR_VAR 0 2
67916: PUSH
67917: LD_VAR 0 3
67921: ST_TO_ADDR
// end ;
67922: LD_VAR 0 2
67926: RET
// export function ResetHc ; begin
67927: LD_INT 0
67929: PPUSH
// InitHc ;
67930: CALL_OW 19
// hc_importance := 0 ;
67934: LD_ADDR_OWVAR 32
67938: PUSH
67939: LD_INT 0
67941: ST_TO_ADDR
// end ; end_of_file
67942: LD_VAR 0 1
67946: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
67947: LD_VAR 0 2
67951: PUSH
67952: LD_INT 100
67954: EQUAL
67955: IFFALSE 68904
// begin if not StreamModeActive then
67957: LD_EXP 106
67961: NOT
67962: IFFALSE 67972
// StreamModeActive := true ;
67964: LD_ADDR_EXP 106
67968: PUSH
67969: LD_INT 1
67971: ST_TO_ADDR
// if p3 = 0 then
67972: LD_VAR 0 3
67976: PUSH
67977: LD_INT 0
67979: EQUAL
67980: IFFALSE 67986
// InitStreamMode ;
67982: CALL 69137 0 0
// if p3 = 1 then
67986: LD_VAR 0 3
67990: PUSH
67991: LD_INT 1
67993: EQUAL
67994: IFFALSE 68004
// sRocket := true ;
67996: LD_ADDR_EXP 111
68000: PUSH
68001: LD_INT 1
68003: ST_TO_ADDR
// if p3 = 2 then
68004: LD_VAR 0 3
68008: PUSH
68009: LD_INT 2
68011: EQUAL
68012: IFFALSE 68022
// sSpeed := true ;
68014: LD_ADDR_EXP 110
68018: PUSH
68019: LD_INT 1
68021: ST_TO_ADDR
// if p3 = 3 then
68022: LD_VAR 0 3
68026: PUSH
68027: LD_INT 3
68029: EQUAL
68030: IFFALSE 68040
// sEngine := true ;
68032: LD_ADDR_EXP 112
68036: PUSH
68037: LD_INT 1
68039: ST_TO_ADDR
// if p3 = 4 then
68040: LD_VAR 0 3
68044: PUSH
68045: LD_INT 4
68047: EQUAL
68048: IFFALSE 68058
// sSpec := true ;
68050: LD_ADDR_EXP 109
68054: PUSH
68055: LD_INT 1
68057: ST_TO_ADDR
// if p3 = 5 then
68058: LD_VAR 0 3
68062: PUSH
68063: LD_INT 5
68065: EQUAL
68066: IFFALSE 68076
// sLevel := true ;
68068: LD_ADDR_EXP 113
68072: PUSH
68073: LD_INT 1
68075: ST_TO_ADDR
// if p3 = 6 then
68076: LD_VAR 0 3
68080: PUSH
68081: LD_INT 6
68083: EQUAL
68084: IFFALSE 68094
// sArmoury := true ;
68086: LD_ADDR_EXP 114
68090: PUSH
68091: LD_INT 1
68093: ST_TO_ADDR
// if p3 = 7 then
68094: LD_VAR 0 3
68098: PUSH
68099: LD_INT 7
68101: EQUAL
68102: IFFALSE 68112
// sRadar := true ;
68104: LD_ADDR_EXP 115
68108: PUSH
68109: LD_INT 1
68111: ST_TO_ADDR
// if p3 = 8 then
68112: LD_VAR 0 3
68116: PUSH
68117: LD_INT 8
68119: EQUAL
68120: IFFALSE 68130
// sBunker := true ;
68122: LD_ADDR_EXP 116
68126: PUSH
68127: LD_INT 1
68129: ST_TO_ADDR
// if p3 = 9 then
68130: LD_VAR 0 3
68134: PUSH
68135: LD_INT 9
68137: EQUAL
68138: IFFALSE 68148
// sHack := true ;
68140: LD_ADDR_EXP 117
68144: PUSH
68145: LD_INT 1
68147: ST_TO_ADDR
// if p3 = 10 then
68148: LD_VAR 0 3
68152: PUSH
68153: LD_INT 10
68155: EQUAL
68156: IFFALSE 68166
// sFire := true ;
68158: LD_ADDR_EXP 118
68162: PUSH
68163: LD_INT 1
68165: ST_TO_ADDR
// if p3 = 11 then
68166: LD_VAR 0 3
68170: PUSH
68171: LD_INT 11
68173: EQUAL
68174: IFFALSE 68184
// sRefresh := true ;
68176: LD_ADDR_EXP 119
68180: PUSH
68181: LD_INT 1
68183: ST_TO_ADDR
// if p3 = 12 then
68184: LD_VAR 0 3
68188: PUSH
68189: LD_INT 12
68191: EQUAL
68192: IFFALSE 68202
// sExp := true ;
68194: LD_ADDR_EXP 120
68198: PUSH
68199: LD_INT 1
68201: ST_TO_ADDR
// if p3 = 13 then
68202: LD_VAR 0 3
68206: PUSH
68207: LD_INT 13
68209: EQUAL
68210: IFFALSE 68220
// sDepot := true ;
68212: LD_ADDR_EXP 121
68216: PUSH
68217: LD_INT 1
68219: ST_TO_ADDR
// if p3 = 14 then
68220: LD_VAR 0 3
68224: PUSH
68225: LD_INT 14
68227: EQUAL
68228: IFFALSE 68238
// sFlag := true ;
68230: LD_ADDR_EXP 122
68234: PUSH
68235: LD_INT 1
68237: ST_TO_ADDR
// if p3 = 15 then
68238: LD_VAR 0 3
68242: PUSH
68243: LD_INT 15
68245: EQUAL
68246: IFFALSE 68256
// sKamikadze := true ;
68248: LD_ADDR_EXP 130
68252: PUSH
68253: LD_INT 1
68255: ST_TO_ADDR
// if p3 = 16 then
68256: LD_VAR 0 3
68260: PUSH
68261: LD_INT 16
68263: EQUAL
68264: IFFALSE 68274
// sTroll := true ;
68266: LD_ADDR_EXP 131
68270: PUSH
68271: LD_INT 1
68273: ST_TO_ADDR
// if p3 = 17 then
68274: LD_VAR 0 3
68278: PUSH
68279: LD_INT 17
68281: EQUAL
68282: IFFALSE 68292
// sSlow := true ;
68284: LD_ADDR_EXP 132
68288: PUSH
68289: LD_INT 1
68291: ST_TO_ADDR
// if p3 = 18 then
68292: LD_VAR 0 3
68296: PUSH
68297: LD_INT 18
68299: EQUAL
68300: IFFALSE 68310
// sLack := true ;
68302: LD_ADDR_EXP 133
68306: PUSH
68307: LD_INT 1
68309: ST_TO_ADDR
// if p3 = 19 then
68310: LD_VAR 0 3
68314: PUSH
68315: LD_INT 19
68317: EQUAL
68318: IFFALSE 68328
// sTank := true ;
68320: LD_ADDR_EXP 135
68324: PUSH
68325: LD_INT 1
68327: ST_TO_ADDR
// if p3 = 20 then
68328: LD_VAR 0 3
68332: PUSH
68333: LD_INT 20
68335: EQUAL
68336: IFFALSE 68346
// sRemote := true ;
68338: LD_ADDR_EXP 136
68342: PUSH
68343: LD_INT 1
68345: ST_TO_ADDR
// if p3 = 21 then
68346: LD_VAR 0 3
68350: PUSH
68351: LD_INT 21
68353: EQUAL
68354: IFFALSE 68364
// sPowell := true ;
68356: LD_ADDR_EXP 137
68360: PUSH
68361: LD_INT 1
68363: ST_TO_ADDR
// if p3 = 22 then
68364: LD_VAR 0 3
68368: PUSH
68369: LD_INT 22
68371: EQUAL
68372: IFFALSE 68382
// sTeleport := true ;
68374: LD_ADDR_EXP 140
68378: PUSH
68379: LD_INT 1
68381: ST_TO_ADDR
// if p3 = 23 then
68382: LD_VAR 0 3
68386: PUSH
68387: LD_INT 23
68389: EQUAL
68390: IFFALSE 68400
// sOilTower := true ;
68392: LD_ADDR_EXP 142
68396: PUSH
68397: LD_INT 1
68399: ST_TO_ADDR
// if p3 = 24 then
68400: LD_VAR 0 3
68404: PUSH
68405: LD_INT 24
68407: EQUAL
68408: IFFALSE 68418
// sShovel := true ;
68410: LD_ADDR_EXP 143
68414: PUSH
68415: LD_INT 1
68417: ST_TO_ADDR
// if p3 = 25 then
68418: LD_VAR 0 3
68422: PUSH
68423: LD_INT 25
68425: EQUAL
68426: IFFALSE 68436
// sSheik := true ;
68428: LD_ADDR_EXP 144
68432: PUSH
68433: LD_INT 1
68435: ST_TO_ADDR
// if p3 = 26 then
68436: LD_VAR 0 3
68440: PUSH
68441: LD_INT 26
68443: EQUAL
68444: IFFALSE 68454
// sEarthquake := true ;
68446: LD_ADDR_EXP 146
68450: PUSH
68451: LD_INT 1
68453: ST_TO_ADDR
// if p3 = 27 then
68454: LD_VAR 0 3
68458: PUSH
68459: LD_INT 27
68461: EQUAL
68462: IFFALSE 68472
// sAI := true ;
68464: LD_ADDR_EXP 147
68468: PUSH
68469: LD_INT 1
68471: ST_TO_ADDR
// if p3 = 28 then
68472: LD_VAR 0 3
68476: PUSH
68477: LD_INT 28
68479: EQUAL
68480: IFFALSE 68490
// sCargo := true ;
68482: LD_ADDR_EXP 150
68486: PUSH
68487: LD_INT 1
68489: ST_TO_ADDR
// if p3 = 29 then
68490: LD_VAR 0 3
68494: PUSH
68495: LD_INT 29
68497: EQUAL
68498: IFFALSE 68508
// sDLaser := true ;
68500: LD_ADDR_EXP 151
68504: PUSH
68505: LD_INT 1
68507: ST_TO_ADDR
// if p3 = 30 then
68508: LD_VAR 0 3
68512: PUSH
68513: LD_INT 30
68515: EQUAL
68516: IFFALSE 68526
// sExchange := true ;
68518: LD_ADDR_EXP 152
68522: PUSH
68523: LD_INT 1
68525: ST_TO_ADDR
// if p3 = 31 then
68526: LD_VAR 0 3
68530: PUSH
68531: LD_INT 31
68533: EQUAL
68534: IFFALSE 68544
// sFac := true ;
68536: LD_ADDR_EXP 153
68540: PUSH
68541: LD_INT 1
68543: ST_TO_ADDR
// if p3 = 32 then
68544: LD_VAR 0 3
68548: PUSH
68549: LD_INT 32
68551: EQUAL
68552: IFFALSE 68562
// sPower := true ;
68554: LD_ADDR_EXP 154
68558: PUSH
68559: LD_INT 1
68561: ST_TO_ADDR
// if p3 = 33 then
68562: LD_VAR 0 3
68566: PUSH
68567: LD_INT 33
68569: EQUAL
68570: IFFALSE 68580
// sRandom := true ;
68572: LD_ADDR_EXP 155
68576: PUSH
68577: LD_INT 1
68579: ST_TO_ADDR
// if p3 = 34 then
68580: LD_VAR 0 3
68584: PUSH
68585: LD_INT 34
68587: EQUAL
68588: IFFALSE 68598
// sShield := true ;
68590: LD_ADDR_EXP 156
68594: PUSH
68595: LD_INT 1
68597: ST_TO_ADDR
// if p3 = 35 then
68598: LD_VAR 0 3
68602: PUSH
68603: LD_INT 35
68605: EQUAL
68606: IFFALSE 68616
// sTime := true ;
68608: LD_ADDR_EXP 157
68612: PUSH
68613: LD_INT 1
68615: ST_TO_ADDR
// if p3 = 36 then
68616: LD_VAR 0 3
68620: PUSH
68621: LD_INT 36
68623: EQUAL
68624: IFFALSE 68634
// sTools := true ;
68626: LD_ADDR_EXP 158
68630: PUSH
68631: LD_INT 1
68633: ST_TO_ADDR
// if p3 = 101 then
68634: LD_VAR 0 3
68638: PUSH
68639: LD_INT 101
68641: EQUAL
68642: IFFALSE 68652
// sSold := true ;
68644: LD_ADDR_EXP 123
68648: PUSH
68649: LD_INT 1
68651: ST_TO_ADDR
// if p3 = 102 then
68652: LD_VAR 0 3
68656: PUSH
68657: LD_INT 102
68659: EQUAL
68660: IFFALSE 68670
// sDiff := true ;
68662: LD_ADDR_EXP 124
68666: PUSH
68667: LD_INT 1
68669: ST_TO_ADDR
// if p3 = 103 then
68670: LD_VAR 0 3
68674: PUSH
68675: LD_INT 103
68677: EQUAL
68678: IFFALSE 68688
// sFog := true ;
68680: LD_ADDR_EXP 127
68684: PUSH
68685: LD_INT 1
68687: ST_TO_ADDR
// if p3 = 104 then
68688: LD_VAR 0 3
68692: PUSH
68693: LD_INT 104
68695: EQUAL
68696: IFFALSE 68706
// sReset := true ;
68698: LD_ADDR_EXP 128
68702: PUSH
68703: LD_INT 1
68705: ST_TO_ADDR
// if p3 = 105 then
68706: LD_VAR 0 3
68710: PUSH
68711: LD_INT 105
68713: EQUAL
68714: IFFALSE 68724
// sSun := true ;
68716: LD_ADDR_EXP 129
68720: PUSH
68721: LD_INT 1
68723: ST_TO_ADDR
// if p3 = 106 then
68724: LD_VAR 0 3
68728: PUSH
68729: LD_INT 106
68731: EQUAL
68732: IFFALSE 68742
// sTiger := true ;
68734: LD_ADDR_EXP 125
68738: PUSH
68739: LD_INT 1
68741: ST_TO_ADDR
// if p3 = 107 then
68742: LD_VAR 0 3
68746: PUSH
68747: LD_INT 107
68749: EQUAL
68750: IFFALSE 68760
// sBomb := true ;
68752: LD_ADDR_EXP 126
68756: PUSH
68757: LD_INT 1
68759: ST_TO_ADDR
// if p3 = 108 then
68760: LD_VAR 0 3
68764: PUSH
68765: LD_INT 108
68767: EQUAL
68768: IFFALSE 68778
// sWound := true ;
68770: LD_ADDR_EXP 134
68774: PUSH
68775: LD_INT 1
68777: ST_TO_ADDR
// if p3 = 109 then
68778: LD_VAR 0 3
68782: PUSH
68783: LD_INT 109
68785: EQUAL
68786: IFFALSE 68796
// sBetray := true ;
68788: LD_ADDR_EXP 138
68792: PUSH
68793: LD_INT 1
68795: ST_TO_ADDR
// if p3 = 110 then
68796: LD_VAR 0 3
68800: PUSH
68801: LD_INT 110
68803: EQUAL
68804: IFFALSE 68814
// sContamin := true ;
68806: LD_ADDR_EXP 139
68810: PUSH
68811: LD_INT 1
68813: ST_TO_ADDR
// if p3 = 111 then
68814: LD_VAR 0 3
68818: PUSH
68819: LD_INT 111
68821: EQUAL
68822: IFFALSE 68832
// sOil := true ;
68824: LD_ADDR_EXP 141
68828: PUSH
68829: LD_INT 1
68831: ST_TO_ADDR
// if p3 = 112 then
68832: LD_VAR 0 3
68836: PUSH
68837: LD_INT 112
68839: EQUAL
68840: IFFALSE 68850
// sStu := true ;
68842: LD_ADDR_EXP 145
68846: PUSH
68847: LD_INT 1
68849: ST_TO_ADDR
// if p3 = 113 then
68850: LD_VAR 0 3
68854: PUSH
68855: LD_INT 113
68857: EQUAL
68858: IFFALSE 68868
// sBazooka := true ;
68860: LD_ADDR_EXP 148
68864: PUSH
68865: LD_INT 1
68867: ST_TO_ADDR
// if p3 = 114 then
68868: LD_VAR 0 3
68872: PUSH
68873: LD_INT 114
68875: EQUAL
68876: IFFALSE 68886
// sMortar := true ;
68878: LD_ADDR_EXP 149
68882: PUSH
68883: LD_INT 1
68885: ST_TO_ADDR
// if p3 = 115 then
68886: LD_VAR 0 3
68890: PUSH
68891: LD_INT 115
68893: EQUAL
68894: IFFALSE 68904
// sRanger := true ;
68896: LD_ADDR_EXP 159
68900: PUSH
68901: LD_INT 1
68903: ST_TO_ADDR
// end ; if p2 = 101 then
68904: LD_VAR 0 2
68908: PUSH
68909: LD_INT 101
68911: EQUAL
68912: IFFALSE 69115
// begin case p3 of 1 :
68914: LD_VAR 0 3
68918: PUSH
68919: LD_INT 1
68921: DOUBLE
68922: EQUAL
68923: IFTRUE 68927
68925: GO 68934
68927: POP
// hHackUnlimitedResources ; 2 :
68928: CALL 79209 0 0
68932: GO 69115
68934: LD_INT 2
68936: DOUBLE
68937: EQUAL
68938: IFTRUE 68942
68940: GO 68949
68942: POP
// hHackSetLevel10 ; 3 :
68943: CALL 79342 0 0
68947: GO 69115
68949: LD_INT 3
68951: DOUBLE
68952: EQUAL
68953: IFTRUE 68957
68955: GO 68964
68957: POP
// hHackSetLevel10YourUnits ; 4 :
68958: CALL 79427 0 0
68962: GO 69115
68964: LD_INT 4
68966: DOUBLE
68967: EQUAL
68968: IFTRUE 68972
68970: GO 68994
68972: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
68973: LD_VAR 0 4
68977: PPUSH
68978: LD_VAR 0 5
68982: PPUSH
68983: LD_VAR 0 6
68987: PPUSH
68988: CALL 79517 0 3
68992: GO 69115
68994: LD_INT 5
68996: DOUBLE
68997: EQUAL
68998: IFTRUE 69002
69000: GO 69009
69002: POP
// hHackSpawnVehicle ; 6 :
69003: CALL 79578 0 0
69007: GO 69115
69009: LD_INT 6
69011: DOUBLE
69012: EQUAL
69013: IFTRUE 69017
69015: GO 69024
69017: POP
// hHackInvincible ; 7 :
69018: CALL 80124 0 0
69022: GO 69115
69024: LD_INT 7
69026: DOUBLE
69027: EQUAL
69028: IFTRUE 69032
69030: GO 69039
69032: POP
// hHackInvisible ; 8 :
69033: CALL 80235 0 0
69037: GO 69115
69039: LD_INT 8
69041: DOUBLE
69042: EQUAL
69043: IFTRUE 69047
69045: GO 69054
69047: POP
// hHackChangeYourSide ; 9 :
69048: CALL 80292 0 0
69052: GO 69115
69054: LD_INT 9
69056: DOUBLE
69057: EQUAL
69058: IFTRUE 69062
69060: GO 69069
69062: POP
// hHackChangeUnitSide ; 10 :
69063: CALL 80334 0 0
69067: GO 69115
69069: LD_INT 10
69071: DOUBLE
69072: EQUAL
69073: IFTRUE 69077
69075: GO 69084
69077: POP
// hHackFog ; 11 :
69078: CALL 80435 0 0
69082: GO 69115
69084: LD_INT 11
69086: DOUBLE
69087: EQUAL
69088: IFTRUE 69092
69090: GO 69099
69092: POP
// hHackApeman ; 12 :
69093: CALL 80450 0 0
69097: GO 69115
69099: LD_INT 12
69101: DOUBLE
69102: EQUAL
69103: IFTRUE 69107
69105: GO 69114
69107: POP
// hHackBoom ; end ;
69108: CALL 80535 0 0
69112: GO 69115
69114: POP
// end ; end ;
69115: PPOPN 6
69117: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
69118: GO 69120
69120: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69121: LD_STRING initStreamRollete();
69123: PPUSH
69124: CALL_OW 559
// InitStreamMode ;
69128: CALL 69137 0 0
// DefineStreamItems ( ) ;
69132: CALL 69577 0 0
// end ;
69136: END
// function InitStreamMode ; begin
69137: LD_INT 0
69139: PPUSH
// streamModeActive := false ;
69140: LD_ADDR_EXP 106
69144: PUSH
69145: LD_INT 0
69147: ST_TO_ADDR
// normalCounter := 36 ;
69148: LD_ADDR_EXP 107
69152: PUSH
69153: LD_INT 36
69155: ST_TO_ADDR
// hardcoreCounter := 16 ;
69156: LD_ADDR_EXP 108
69160: PUSH
69161: LD_INT 16
69163: ST_TO_ADDR
// sRocket := false ;
69164: LD_ADDR_EXP 111
69168: PUSH
69169: LD_INT 0
69171: ST_TO_ADDR
// sSpeed := false ;
69172: LD_ADDR_EXP 110
69176: PUSH
69177: LD_INT 0
69179: ST_TO_ADDR
// sEngine := false ;
69180: LD_ADDR_EXP 112
69184: PUSH
69185: LD_INT 0
69187: ST_TO_ADDR
// sSpec := false ;
69188: LD_ADDR_EXP 109
69192: PUSH
69193: LD_INT 0
69195: ST_TO_ADDR
// sLevel := false ;
69196: LD_ADDR_EXP 113
69200: PUSH
69201: LD_INT 0
69203: ST_TO_ADDR
// sArmoury := false ;
69204: LD_ADDR_EXP 114
69208: PUSH
69209: LD_INT 0
69211: ST_TO_ADDR
// sRadar := false ;
69212: LD_ADDR_EXP 115
69216: PUSH
69217: LD_INT 0
69219: ST_TO_ADDR
// sBunker := false ;
69220: LD_ADDR_EXP 116
69224: PUSH
69225: LD_INT 0
69227: ST_TO_ADDR
// sHack := false ;
69228: LD_ADDR_EXP 117
69232: PUSH
69233: LD_INT 0
69235: ST_TO_ADDR
// sFire := false ;
69236: LD_ADDR_EXP 118
69240: PUSH
69241: LD_INT 0
69243: ST_TO_ADDR
// sRefresh := false ;
69244: LD_ADDR_EXP 119
69248: PUSH
69249: LD_INT 0
69251: ST_TO_ADDR
// sExp := false ;
69252: LD_ADDR_EXP 120
69256: PUSH
69257: LD_INT 0
69259: ST_TO_ADDR
// sDepot := false ;
69260: LD_ADDR_EXP 121
69264: PUSH
69265: LD_INT 0
69267: ST_TO_ADDR
// sFlag := false ;
69268: LD_ADDR_EXP 122
69272: PUSH
69273: LD_INT 0
69275: ST_TO_ADDR
// sKamikadze := false ;
69276: LD_ADDR_EXP 130
69280: PUSH
69281: LD_INT 0
69283: ST_TO_ADDR
// sTroll := false ;
69284: LD_ADDR_EXP 131
69288: PUSH
69289: LD_INT 0
69291: ST_TO_ADDR
// sSlow := false ;
69292: LD_ADDR_EXP 132
69296: PUSH
69297: LD_INT 0
69299: ST_TO_ADDR
// sLack := false ;
69300: LD_ADDR_EXP 133
69304: PUSH
69305: LD_INT 0
69307: ST_TO_ADDR
// sTank := false ;
69308: LD_ADDR_EXP 135
69312: PUSH
69313: LD_INT 0
69315: ST_TO_ADDR
// sRemote := false ;
69316: LD_ADDR_EXP 136
69320: PUSH
69321: LD_INT 0
69323: ST_TO_ADDR
// sPowell := false ;
69324: LD_ADDR_EXP 137
69328: PUSH
69329: LD_INT 0
69331: ST_TO_ADDR
// sTeleport := false ;
69332: LD_ADDR_EXP 140
69336: PUSH
69337: LD_INT 0
69339: ST_TO_ADDR
// sOilTower := false ;
69340: LD_ADDR_EXP 142
69344: PUSH
69345: LD_INT 0
69347: ST_TO_ADDR
// sShovel := false ;
69348: LD_ADDR_EXP 143
69352: PUSH
69353: LD_INT 0
69355: ST_TO_ADDR
// sSheik := false ;
69356: LD_ADDR_EXP 144
69360: PUSH
69361: LD_INT 0
69363: ST_TO_ADDR
// sEarthquake := false ;
69364: LD_ADDR_EXP 146
69368: PUSH
69369: LD_INT 0
69371: ST_TO_ADDR
// sAI := false ;
69372: LD_ADDR_EXP 147
69376: PUSH
69377: LD_INT 0
69379: ST_TO_ADDR
// sCargo := false ;
69380: LD_ADDR_EXP 150
69384: PUSH
69385: LD_INT 0
69387: ST_TO_ADDR
// sDLaser := false ;
69388: LD_ADDR_EXP 151
69392: PUSH
69393: LD_INT 0
69395: ST_TO_ADDR
// sExchange := false ;
69396: LD_ADDR_EXP 152
69400: PUSH
69401: LD_INT 0
69403: ST_TO_ADDR
// sFac := false ;
69404: LD_ADDR_EXP 153
69408: PUSH
69409: LD_INT 0
69411: ST_TO_ADDR
// sPower := false ;
69412: LD_ADDR_EXP 154
69416: PUSH
69417: LD_INT 0
69419: ST_TO_ADDR
// sRandom := false ;
69420: LD_ADDR_EXP 155
69424: PUSH
69425: LD_INT 0
69427: ST_TO_ADDR
// sShield := false ;
69428: LD_ADDR_EXP 156
69432: PUSH
69433: LD_INT 0
69435: ST_TO_ADDR
// sTime := false ;
69436: LD_ADDR_EXP 157
69440: PUSH
69441: LD_INT 0
69443: ST_TO_ADDR
// sTools := false ;
69444: LD_ADDR_EXP 158
69448: PUSH
69449: LD_INT 0
69451: ST_TO_ADDR
// sSold := false ;
69452: LD_ADDR_EXP 123
69456: PUSH
69457: LD_INT 0
69459: ST_TO_ADDR
// sDiff := false ;
69460: LD_ADDR_EXP 124
69464: PUSH
69465: LD_INT 0
69467: ST_TO_ADDR
// sFog := false ;
69468: LD_ADDR_EXP 127
69472: PUSH
69473: LD_INT 0
69475: ST_TO_ADDR
// sReset := false ;
69476: LD_ADDR_EXP 128
69480: PUSH
69481: LD_INT 0
69483: ST_TO_ADDR
// sSun := false ;
69484: LD_ADDR_EXP 129
69488: PUSH
69489: LD_INT 0
69491: ST_TO_ADDR
// sTiger := false ;
69492: LD_ADDR_EXP 125
69496: PUSH
69497: LD_INT 0
69499: ST_TO_ADDR
// sBomb := false ;
69500: LD_ADDR_EXP 126
69504: PUSH
69505: LD_INT 0
69507: ST_TO_ADDR
// sWound := false ;
69508: LD_ADDR_EXP 134
69512: PUSH
69513: LD_INT 0
69515: ST_TO_ADDR
// sBetray := false ;
69516: LD_ADDR_EXP 138
69520: PUSH
69521: LD_INT 0
69523: ST_TO_ADDR
// sContamin := false ;
69524: LD_ADDR_EXP 139
69528: PUSH
69529: LD_INT 0
69531: ST_TO_ADDR
// sOil := false ;
69532: LD_ADDR_EXP 141
69536: PUSH
69537: LD_INT 0
69539: ST_TO_ADDR
// sStu := false ;
69540: LD_ADDR_EXP 145
69544: PUSH
69545: LD_INT 0
69547: ST_TO_ADDR
// sBazooka := false ;
69548: LD_ADDR_EXP 148
69552: PUSH
69553: LD_INT 0
69555: ST_TO_ADDR
// sMortar := false ;
69556: LD_ADDR_EXP 149
69560: PUSH
69561: LD_INT 0
69563: ST_TO_ADDR
// sRanger := false ;
69564: LD_ADDR_EXP 159
69568: PUSH
69569: LD_INT 0
69571: ST_TO_ADDR
// end ;
69572: LD_VAR 0 1
69576: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
69577: LD_INT 0
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
69583: PPUSH
// result := [ ] ;
69584: LD_ADDR_VAR 0 1
69588: PUSH
69589: EMPTY
69590: ST_TO_ADDR
// if campaign_id = 1 then
69591: LD_OWVAR 69
69595: PUSH
69596: LD_INT 1
69598: EQUAL
69599: IFFALSE 72537
// begin case mission_number of 1 :
69601: LD_OWVAR 70
69605: PUSH
69606: LD_INT 1
69608: DOUBLE
69609: EQUAL
69610: IFTRUE 69614
69612: GO 69678
69614: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
69615: LD_ADDR_VAR 0 1
69619: PUSH
69620: LD_INT 2
69622: PUSH
69623: LD_INT 4
69625: PUSH
69626: LD_INT 11
69628: PUSH
69629: LD_INT 12
69631: PUSH
69632: LD_INT 15
69634: PUSH
69635: LD_INT 16
69637: PUSH
69638: LD_INT 22
69640: PUSH
69641: LD_INT 23
69643: PUSH
69644: LD_INT 26
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 101
69660: PUSH
69661: LD_INT 102
69663: PUSH
69664: LD_INT 106
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: ST_TO_ADDR
69676: GO 72535
69678: LD_INT 2
69680: DOUBLE
69681: EQUAL
69682: IFTRUE 69686
69684: GO 69758
69686: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
69687: LD_ADDR_VAR 0 1
69691: PUSH
69692: LD_INT 2
69694: PUSH
69695: LD_INT 4
69697: PUSH
69698: LD_INT 11
69700: PUSH
69701: LD_INT 12
69703: PUSH
69704: LD_INT 15
69706: PUSH
69707: LD_INT 16
69709: PUSH
69710: LD_INT 22
69712: PUSH
69713: LD_INT 23
69715: PUSH
69716: LD_INT 26
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 101
69732: PUSH
69733: LD_INT 102
69735: PUSH
69736: LD_INT 105
69738: PUSH
69739: LD_INT 106
69741: PUSH
69742: LD_INT 108
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: ST_TO_ADDR
69756: GO 72535
69758: LD_INT 3
69760: DOUBLE
69761: EQUAL
69762: IFTRUE 69766
69764: GO 69842
69766: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
69767: LD_ADDR_VAR 0 1
69771: PUSH
69772: LD_INT 2
69774: PUSH
69775: LD_INT 4
69777: PUSH
69778: LD_INT 5
69780: PUSH
69781: LD_INT 11
69783: PUSH
69784: LD_INT 12
69786: PUSH
69787: LD_INT 15
69789: PUSH
69790: LD_INT 16
69792: PUSH
69793: LD_INT 22
69795: PUSH
69796: LD_INT 26
69798: PUSH
69799: LD_INT 36
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: LIST
69806: LIST
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 101
69816: PUSH
69817: LD_INT 102
69819: PUSH
69820: LD_INT 105
69822: PUSH
69823: LD_INT 106
69825: PUSH
69826: LD_INT 108
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: LIST
69833: LIST
69834: LIST
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: ST_TO_ADDR
69840: GO 72535
69842: LD_INT 4
69844: DOUBLE
69845: EQUAL
69846: IFTRUE 69850
69848: GO 69934
69850: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
69851: LD_ADDR_VAR 0 1
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: LD_INT 4
69861: PUSH
69862: LD_INT 5
69864: PUSH
69865: LD_INT 8
69867: PUSH
69868: LD_INT 11
69870: PUSH
69871: LD_INT 12
69873: PUSH
69874: LD_INT 15
69876: PUSH
69877: LD_INT 16
69879: PUSH
69880: LD_INT 22
69882: PUSH
69883: LD_INT 23
69885: PUSH
69886: LD_INT 26
69888: PUSH
69889: LD_INT 36
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 101
69908: PUSH
69909: LD_INT 102
69911: PUSH
69912: LD_INT 105
69914: PUSH
69915: LD_INT 106
69917: PUSH
69918: LD_INT 108
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: ST_TO_ADDR
69932: GO 72535
69934: LD_INT 5
69936: DOUBLE
69937: EQUAL
69938: IFTRUE 69942
69940: GO 70042
69942: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
69943: LD_ADDR_VAR 0 1
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: LD_INT 4
69953: PUSH
69954: LD_INT 5
69956: PUSH
69957: LD_INT 6
69959: PUSH
69960: LD_INT 8
69962: PUSH
69963: LD_INT 11
69965: PUSH
69966: LD_INT 12
69968: PUSH
69969: LD_INT 15
69971: PUSH
69972: LD_INT 16
69974: PUSH
69975: LD_INT 22
69977: PUSH
69978: LD_INT 23
69980: PUSH
69981: LD_INT 25
69983: PUSH
69984: LD_INT 26
69986: PUSH
69987: LD_INT 36
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: LIST
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: LIST
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 101
70008: PUSH
70009: LD_INT 102
70011: PUSH
70012: LD_INT 105
70014: PUSH
70015: LD_INT 106
70017: PUSH
70018: LD_INT 108
70020: PUSH
70021: LD_INT 109
70023: PUSH
70024: LD_INT 112
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: ST_TO_ADDR
70040: GO 72535
70042: LD_INT 6
70044: DOUBLE
70045: EQUAL
70046: IFTRUE 70050
70048: GO 70170
70050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
70051: LD_ADDR_VAR 0 1
70055: PUSH
70056: LD_INT 2
70058: PUSH
70059: LD_INT 4
70061: PUSH
70062: LD_INT 5
70064: PUSH
70065: LD_INT 6
70067: PUSH
70068: LD_INT 8
70070: PUSH
70071: LD_INT 11
70073: PUSH
70074: LD_INT 12
70076: PUSH
70077: LD_INT 15
70079: PUSH
70080: LD_INT 16
70082: PUSH
70083: LD_INT 20
70085: PUSH
70086: LD_INT 21
70088: PUSH
70089: LD_INT 22
70091: PUSH
70092: LD_INT 23
70094: PUSH
70095: LD_INT 25
70097: PUSH
70098: LD_INT 26
70100: PUSH
70101: LD_INT 30
70103: PUSH
70104: LD_INT 31
70106: PUSH
70107: LD_INT 32
70109: PUSH
70110: LD_INT 36
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 101
70136: PUSH
70137: LD_INT 102
70139: PUSH
70140: LD_INT 105
70142: PUSH
70143: LD_INT 106
70145: PUSH
70146: LD_INT 108
70148: PUSH
70149: LD_INT 109
70151: PUSH
70152: LD_INT 112
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: ST_TO_ADDR
70168: GO 72535
70170: LD_INT 7
70172: DOUBLE
70173: EQUAL
70174: IFTRUE 70178
70176: GO 70278
70178: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
70179: LD_ADDR_VAR 0 1
70183: PUSH
70184: LD_INT 2
70186: PUSH
70187: LD_INT 4
70189: PUSH
70190: LD_INT 5
70192: PUSH
70193: LD_INT 7
70195: PUSH
70196: LD_INT 11
70198: PUSH
70199: LD_INT 12
70201: PUSH
70202: LD_INT 15
70204: PUSH
70205: LD_INT 16
70207: PUSH
70208: LD_INT 20
70210: PUSH
70211: LD_INT 21
70213: PUSH
70214: LD_INT 22
70216: PUSH
70217: LD_INT 23
70219: PUSH
70220: LD_INT 25
70222: PUSH
70223: LD_INT 26
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 101
70244: PUSH
70245: LD_INT 102
70247: PUSH
70248: LD_INT 103
70250: PUSH
70251: LD_INT 105
70253: PUSH
70254: LD_INT 106
70256: PUSH
70257: LD_INT 108
70259: PUSH
70260: LD_INT 112
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: ST_TO_ADDR
70276: GO 72535
70278: LD_INT 8
70280: DOUBLE
70281: EQUAL
70282: IFTRUE 70286
70284: GO 70414
70286: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
70287: LD_ADDR_VAR 0 1
70291: PUSH
70292: LD_INT 2
70294: PUSH
70295: LD_INT 4
70297: PUSH
70298: LD_INT 5
70300: PUSH
70301: LD_INT 6
70303: PUSH
70304: LD_INT 7
70306: PUSH
70307: LD_INT 8
70309: PUSH
70310: LD_INT 11
70312: PUSH
70313: LD_INT 12
70315: PUSH
70316: LD_INT 15
70318: PUSH
70319: LD_INT 16
70321: PUSH
70322: LD_INT 20
70324: PUSH
70325: LD_INT 21
70327: PUSH
70328: LD_INT 22
70330: PUSH
70331: LD_INT 23
70333: PUSH
70334: LD_INT 25
70336: PUSH
70337: LD_INT 26
70339: PUSH
70340: LD_INT 30
70342: PUSH
70343: LD_INT 31
70345: PUSH
70346: LD_INT 32
70348: PUSH
70349: LD_INT 36
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 101
70376: PUSH
70377: LD_INT 102
70379: PUSH
70380: LD_INT 103
70382: PUSH
70383: LD_INT 105
70385: PUSH
70386: LD_INT 106
70388: PUSH
70389: LD_INT 108
70391: PUSH
70392: LD_INT 109
70394: PUSH
70395: LD_INT 112
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: PUSH
70408: EMPTY
70409: LIST
70410: LIST
70411: ST_TO_ADDR
70412: GO 72535
70414: LD_INT 9
70416: DOUBLE
70417: EQUAL
70418: IFTRUE 70422
70420: GO 70558
70422: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
70423: LD_ADDR_VAR 0 1
70427: PUSH
70428: LD_INT 2
70430: PUSH
70431: LD_INT 4
70433: PUSH
70434: LD_INT 5
70436: PUSH
70437: LD_INT 6
70439: PUSH
70440: LD_INT 7
70442: PUSH
70443: LD_INT 8
70445: PUSH
70446: LD_INT 11
70448: PUSH
70449: LD_INT 12
70451: PUSH
70452: LD_INT 15
70454: PUSH
70455: LD_INT 16
70457: PUSH
70458: LD_INT 20
70460: PUSH
70461: LD_INT 21
70463: PUSH
70464: LD_INT 22
70466: PUSH
70467: LD_INT 23
70469: PUSH
70470: LD_INT 25
70472: PUSH
70473: LD_INT 26
70475: PUSH
70476: LD_INT 28
70478: PUSH
70479: LD_INT 30
70481: PUSH
70482: LD_INT 31
70484: PUSH
70485: LD_INT 32
70487: PUSH
70488: LD_INT 36
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 101
70516: PUSH
70517: LD_INT 102
70519: PUSH
70520: LD_INT 103
70522: PUSH
70523: LD_INT 105
70525: PUSH
70526: LD_INT 106
70528: PUSH
70529: LD_INT 108
70531: PUSH
70532: LD_INT 109
70534: PUSH
70535: LD_INT 112
70537: PUSH
70538: LD_INT 114
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: ST_TO_ADDR
70556: GO 72535
70558: LD_INT 10
70560: DOUBLE
70561: EQUAL
70562: IFTRUE 70566
70564: GO 70750
70566: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
70567: LD_ADDR_VAR 0 1
70571: PUSH
70572: LD_INT 2
70574: PUSH
70575: LD_INT 4
70577: PUSH
70578: LD_INT 5
70580: PUSH
70581: LD_INT 6
70583: PUSH
70584: LD_INT 7
70586: PUSH
70587: LD_INT 8
70589: PUSH
70590: LD_INT 9
70592: PUSH
70593: LD_INT 10
70595: PUSH
70596: LD_INT 11
70598: PUSH
70599: LD_INT 12
70601: PUSH
70602: LD_INT 13
70604: PUSH
70605: LD_INT 14
70607: PUSH
70608: LD_INT 15
70610: PUSH
70611: LD_INT 16
70613: PUSH
70614: LD_INT 17
70616: PUSH
70617: LD_INT 18
70619: PUSH
70620: LD_INT 19
70622: PUSH
70623: LD_INT 20
70625: PUSH
70626: LD_INT 21
70628: PUSH
70629: LD_INT 22
70631: PUSH
70632: LD_INT 23
70634: PUSH
70635: LD_INT 24
70637: PUSH
70638: LD_INT 25
70640: PUSH
70641: LD_INT 26
70643: PUSH
70644: LD_INT 28
70646: PUSH
70647: LD_INT 30
70649: PUSH
70650: LD_INT 31
70652: PUSH
70653: LD_INT 32
70655: PUSH
70656: LD_INT 36
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 101
70692: PUSH
70693: LD_INT 102
70695: PUSH
70696: LD_INT 103
70698: PUSH
70699: LD_INT 104
70701: PUSH
70702: LD_INT 105
70704: PUSH
70705: LD_INT 106
70707: PUSH
70708: LD_INT 107
70710: PUSH
70711: LD_INT 108
70713: PUSH
70714: LD_INT 109
70716: PUSH
70717: LD_INT 110
70719: PUSH
70720: LD_INT 111
70722: PUSH
70723: LD_INT 112
70725: PUSH
70726: LD_INT 114
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: ST_TO_ADDR
70748: GO 72535
70750: LD_INT 11
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70758
70756: GO 70950
70758: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
70759: LD_ADDR_VAR 0 1
70763: PUSH
70764: LD_INT 2
70766: PUSH
70767: LD_INT 3
70769: PUSH
70770: LD_INT 4
70772: PUSH
70773: LD_INT 5
70775: PUSH
70776: LD_INT 6
70778: PUSH
70779: LD_INT 7
70781: PUSH
70782: LD_INT 8
70784: PUSH
70785: LD_INT 9
70787: PUSH
70788: LD_INT 10
70790: PUSH
70791: LD_INT 11
70793: PUSH
70794: LD_INT 12
70796: PUSH
70797: LD_INT 13
70799: PUSH
70800: LD_INT 14
70802: PUSH
70803: LD_INT 15
70805: PUSH
70806: LD_INT 16
70808: PUSH
70809: LD_INT 17
70811: PUSH
70812: LD_INT 18
70814: PUSH
70815: LD_INT 19
70817: PUSH
70818: LD_INT 20
70820: PUSH
70821: LD_INT 21
70823: PUSH
70824: LD_INT 22
70826: PUSH
70827: LD_INT 23
70829: PUSH
70830: LD_INT 24
70832: PUSH
70833: LD_INT 25
70835: PUSH
70836: LD_INT 26
70838: PUSH
70839: LD_INT 28
70841: PUSH
70842: LD_INT 30
70844: PUSH
70845: LD_INT 31
70847: PUSH
70848: LD_INT 32
70850: PUSH
70851: LD_INT 34
70853: PUSH
70854: LD_INT 36
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 101
70892: PUSH
70893: LD_INT 102
70895: PUSH
70896: LD_INT 103
70898: PUSH
70899: LD_INT 104
70901: PUSH
70902: LD_INT 105
70904: PUSH
70905: LD_INT 106
70907: PUSH
70908: LD_INT 107
70910: PUSH
70911: LD_INT 108
70913: PUSH
70914: LD_INT 109
70916: PUSH
70917: LD_INT 110
70919: PUSH
70920: LD_INT 111
70922: PUSH
70923: LD_INT 112
70925: PUSH
70926: LD_INT 114
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: ST_TO_ADDR
70948: GO 72535
70950: LD_INT 12
70952: DOUBLE
70953: EQUAL
70954: IFTRUE 70958
70956: GO 71166
70958: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
70959: LD_ADDR_VAR 0 1
70963: PUSH
70964: LD_INT 1
70966: PUSH
70967: LD_INT 2
70969: PUSH
70970: LD_INT 3
70972: PUSH
70973: LD_INT 4
70975: PUSH
70976: LD_INT 5
70978: PUSH
70979: LD_INT 6
70981: PUSH
70982: LD_INT 7
70984: PUSH
70985: LD_INT 8
70987: PUSH
70988: LD_INT 9
70990: PUSH
70991: LD_INT 10
70993: PUSH
70994: LD_INT 11
70996: PUSH
70997: LD_INT 12
70999: PUSH
71000: LD_INT 13
71002: PUSH
71003: LD_INT 14
71005: PUSH
71006: LD_INT 15
71008: PUSH
71009: LD_INT 16
71011: PUSH
71012: LD_INT 17
71014: PUSH
71015: LD_INT 18
71017: PUSH
71018: LD_INT 19
71020: PUSH
71021: LD_INT 20
71023: PUSH
71024: LD_INT 21
71026: PUSH
71027: LD_INT 22
71029: PUSH
71030: LD_INT 23
71032: PUSH
71033: LD_INT 24
71035: PUSH
71036: LD_INT 25
71038: PUSH
71039: LD_INT 26
71041: PUSH
71042: LD_INT 27
71044: PUSH
71045: LD_INT 28
71047: PUSH
71048: LD_INT 30
71050: PUSH
71051: LD_INT 31
71053: PUSH
71054: LD_INT 32
71056: PUSH
71057: LD_INT 33
71059: PUSH
71060: LD_INT 34
71062: PUSH
71063: LD_INT 36
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: LIST
71082: LIST
71083: LIST
71084: LIST
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 101
71104: PUSH
71105: LD_INT 102
71107: PUSH
71108: LD_INT 103
71110: PUSH
71111: LD_INT 104
71113: PUSH
71114: LD_INT 105
71116: PUSH
71117: LD_INT 106
71119: PUSH
71120: LD_INT 107
71122: PUSH
71123: LD_INT 108
71125: PUSH
71126: LD_INT 109
71128: PUSH
71129: LD_INT 110
71131: PUSH
71132: LD_INT 111
71134: PUSH
71135: LD_INT 112
71137: PUSH
71138: LD_INT 113
71140: PUSH
71141: LD_INT 114
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: ST_TO_ADDR
71164: GO 72535
71166: LD_INT 13
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71174
71172: GO 71370
71174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
71175: LD_ADDR_VAR 0 1
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: LD_INT 2
71185: PUSH
71186: LD_INT 3
71188: PUSH
71189: LD_INT 4
71191: PUSH
71192: LD_INT 5
71194: PUSH
71195: LD_INT 8
71197: PUSH
71198: LD_INT 9
71200: PUSH
71201: LD_INT 10
71203: PUSH
71204: LD_INT 11
71206: PUSH
71207: LD_INT 12
71209: PUSH
71210: LD_INT 14
71212: PUSH
71213: LD_INT 15
71215: PUSH
71216: LD_INT 16
71218: PUSH
71219: LD_INT 17
71221: PUSH
71222: LD_INT 18
71224: PUSH
71225: LD_INT 19
71227: PUSH
71228: LD_INT 20
71230: PUSH
71231: LD_INT 21
71233: PUSH
71234: LD_INT 22
71236: PUSH
71237: LD_INT 23
71239: PUSH
71240: LD_INT 24
71242: PUSH
71243: LD_INT 25
71245: PUSH
71246: LD_INT 26
71248: PUSH
71249: LD_INT 27
71251: PUSH
71252: LD_INT 28
71254: PUSH
71255: LD_INT 30
71257: PUSH
71258: LD_INT 31
71260: PUSH
71261: LD_INT 32
71263: PUSH
71264: LD_INT 33
71266: PUSH
71267: LD_INT 34
71269: PUSH
71270: LD_INT 36
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 101
71308: PUSH
71309: LD_INT 102
71311: PUSH
71312: LD_INT 103
71314: PUSH
71315: LD_INT 104
71317: PUSH
71318: LD_INT 105
71320: PUSH
71321: LD_INT 106
71323: PUSH
71324: LD_INT 107
71326: PUSH
71327: LD_INT 108
71329: PUSH
71330: LD_INT 109
71332: PUSH
71333: LD_INT 110
71335: PUSH
71336: LD_INT 111
71338: PUSH
71339: LD_INT 112
71341: PUSH
71342: LD_INT 113
71344: PUSH
71345: LD_INT 114
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: PUSH
71364: EMPTY
71365: LIST
71366: LIST
71367: ST_TO_ADDR
71368: GO 72535
71370: LD_INT 14
71372: DOUBLE
71373: EQUAL
71374: IFTRUE 71378
71376: GO 71590
71378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
71379: LD_ADDR_VAR 0 1
71383: PUSH
71384: LD_INT 1
71386: PUSH
71387: LD_INT 2
71389: PUSH
71390: LD_INT 3
71392: PUSH
71393: LD_INT 4
71395: PUSH
71396: LD_INT 5
71398: PUSH
71399: LD_INT 6
71401: PUSH
71402: LD_INT 7
71404: PUSH
71405: LD_INT 8
71407: PUSH
71408: LD_INT 9
71410: PUSH
71411: LD_INT 10
71413: PUSH
71414: LD_INT 11
71416: PUSH
71417: LD_INT 12
71419: PUSH
71420: LD_INT 13
71422: PUSH
71423: LD_INT 14
71425: PUSH
71426: LD_INT 15
71428: PUSH
71429: LD_INT 16
71431: PUSH
71432: LD_INT 17
71434: PUSH
71435: LD_INT 18
71437: PUSH
71438: LD_INT 19
71440: PUSH
71441: LD_INT 20
71443: PUSH
71444: LD_INT 21
71446: PUSH
71447: LD_INT 22
71449: PUSH
71450: LD_INT 23
71452: PUSH
71453: LD_INT 24
71455: PUSH
71456: LD_INT 25
71458: PUSH
71459: LD_INT 26
71461: PUSH
71462: LD_INT 27
71464: PUSH
71465: LD_INT 28
71467: PUSH
71468: LD_INT 29
71470: PUSH
71471: LD_INT 30
71473: PUSH
71474: LD_INT 31
71476: PUSH
71477: LD_INT 32
71479: PUSH
71480: LD_INT 33
71482: PUSH
71483: LD_INT 34
71485: PUSH
71486: LD_INT 36
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 101
71528: PUSH
71529: LD_INT 102
71531: PUSH
71532: LD_INT 103
71534: PUSH
71535: LD_INT 104
71537: PUSH
71538: LD_INT 105
71540: PUSH
71541: LD_INT 106
71543: PUSH
71544: LD_INT 107
71546: PUSH
71547: LD_INT 108
71549: PUSH
71550: LD_INT 109
71552: PUSH
71553: LD_INT 110
71555: PUSH
71556: LD_INT 111
71558: PUSH
71559: LD_INT 112
71561: PUSH
71562: LD_INT 113
71564: PUSH
71565: LD_INT 114
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: ST_TO_ADDR
71588: GO 72535
71590: LD_INT 15
71592: DOUBLE
71593: EQUAL
71594: IFTRUE 71598
71596: GO 71810
71598: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
71599: LD_ADDR_VAR 0 1
71603: PUSH
71604: LD_INT 1
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: LD_INT 3
71612: PUSH
71613: LD_INT 4
71615: PUSH
71616: LD_INT 5
71618: PUSH
71619: LD_INT 6
71621: PUSH
71622: LD_INT 7
71624: PUSH
71625: LD_INT 8
71627: PUSH
71628: LD_INT 9
71630: PUSH
71631: LD_INT 10
71633: PUSH
71634: LD_INT 11
71636: PUSH
71637: LD_INT 12
71639: PUSH
71640: LD_INT 13
71642: PUSH
71643: LD_INT 14
71645: PUSH
71646: LD_INT 15
71648: PUSH
71649: LD_INT 16
71651: PUSH
71652: LD_INT 17
71654: PUSH
71655: LD_INT 18
71657: PUSH
71658: LD_INT 19
71660: PUSH
71661: LD_INT 20
71663: PUSH
71664: LD_INT 21
71666: PUSH
71667: LD_INT 22
71669: PUSH
71670: LD_INT 23
71672: PUSH
71673: LD_INT 24
71675: PUSH
71676: LD_INT 25
71678: PUSH
71679: LD_INT 26
71681: PUSH
71682: LD_INT 27
71684: PUSH
71685: LD_INT 28
71687: PUSH
71688: LD_INT 29
71690: PUSH
71691: LD_INT 30
71693: PUSH
71694: LD_INT 31
71696: PUSH
71697: LD_INT 32
71699: PUSH
71700: LD_INT 33
71702: PUSH
71703: LD_INT 34
71705: PUSH
71706: LD_INT 36
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 101
71748: PUSH
71749: LD_INT 102
71751: PUSH
71752: LD_INT 103
71754: PUSH
71755: LD_INT 104
71757: PUSH
71758: LD_INT 105
71760: PUSH
71761: LD_INT 106
71763: PUSH
71764: LD_INT 107
71766: PUSH
71767: LD_INT 108
71769: PUSH
71770: LD_INT 109
71772: PUSH
71773: LD_INT 110
71775: PUSH
71776: LD_INT 111
71778: PUSH
71779: LD_INT 112
71781: PUSH
71782: LD_INT 113
71784: PUSH
71785: LD_INT 114
71787: PUSH
71788: EMPTY
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: PUSH
71804: EMPTY
71805: LIST
71806: LIST
71807: ST_TO_ADDR
71808: GO 72535
71810: LD_INT 16
71812: DOUBLE
71813: EQUAL
71814: IFTRUE 71818
71816: GO 71942
71818: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
71819: LD_ADDR_VAR 0 1
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: LD_INT 4
71829: PUSH
71830: LD_INT 5
71832: PUSH
71833: LD_INT 7
71835: PUSH
71836: LD_INT 11
71838: PUSH
71839: LD_INT 12
71841: PUSH
71842: LD_INT 15
71844: PUSH
71845: LD_INT 16
71847: PUSH
71848: LD_INT 20
71850: PUSH
71851: LD_INT 21
71853: PUSH
71854: LD_INT 22
71856: PUSH
71857: LD_INT 23
71859: PUSH
71860: LD_INT 25
71862: PUSH
71863: LD_INT 26
71865: PUSH
71866: LD_INT 30
71868: PUSH
71869: LD_INT 31
71871: PUSH
71872: LD_INT 32
71874: PUSH
71875: LD_INT 33
71877: PUSH
71878: LD_INT 34
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 101
71904: PUSH
71905: LD_INT 102
71907: PUSH
71908: LD_INT 103
71910: PUSH
71911: LD_INT 106
71913: PUSH
71914: LD_INT 108
71916: PUSH
71917: LD_INT 112
71919: PUSH
71920: LD_INT 113
71922: PUSH
71923: LD_INT 114
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: ST_TO_ADDR
71940: GO 72535
71942: LD_INT 17
71944: DOUBLE
71945: EQUAL
71946: IFTRUE 71950
71948: GO 72162
71950: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
71951: LD_ADDR_VAR 0 1
71955: PUSH
71956: LD_INT 1
71958: PUSH
71959: LD_INT 2
71961: PUSH
71962: LD_INT 3
71964: PUSH
71965: LD_INT 4
71967: PUSH
71968: LD_INT 5
71970: PUSH
71971: LD_INT 6
71973: PUSH
71974: LD_INT 7
71976: PUSH
71977: LD_INT 8
71979: PUSH
71980: LD_INT 9
71982: PUSH
71983: LD_INT 10
71985: PUSH
71986: LD_INT 11
71988: PUSH
71989: LD_INT 12
71991: PUSH
71992: LD_INT 13
71994: PUSH
71995: LD_INT 14
71997: PUSH
71998: LD_INT 15
72000: PUSH
72001: LD_INT 16
72003: PUSH
72004: LD_INT 17
72006: PUSH
72007: LD_INT 18
72009: PUSH
72010: LD_INT 19
72012: PUSH
72013: LD_INT 20
72015: PUSH
72016: LD_INT 21
72018: PUSH
72019: LD_INT 22
72021: PUSH
72022: LD_INT 23
72024: PUSH
72025: LD_INT 24
72027: PUSH
72028: LD_INT 25
72030: PUSH
72031: LD_INT 26
72033: PUSH
72034: LD_INT 27
72036: PUSH
72037: LD_INT 28
72039: PUSH
72040: LD_INT 29
72042: PUSH
72043: LD_INT 30
72045: PUSH
72046: LD_INT 31
72048: PUSH
72049: LD_INT 32
72051: PUSH
72052: LD_INT 33
72054: PUSH
72055: LD_INT 34
72057: PUSH
72058: LD_INT 36
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 101
72100: PUSH
72101: LD_INT 102
72103: PUSH
72104: LD_INT 103
72106: PUSH
72107: LD_INT 104
72109: PUSH
72110: LD_INT 105
72112: PUSH
72113: LD_INT 106
72115: PUSH
72116: LD_INT 107
72118: PUSH
72119: LD_INT 108
72121: PUSH
72122: LD_INT 109
72124: PUSH
72125: LD_INT 110
72127: PUSH
72128: LD_INT 111
72130: PUSH
72131: LD_INT 112
72133: PUSH
72134: LD_INT 113
72136: PUSH
72137: LD_INT 114
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: ST_TO_ADDR
72160: GO 72535
72162: LD_INT 18
72164: DOUBLE
72165: EQUAL
72166: IFTRUE 72170
72168: GO 72306
72170: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
72171: LD_ADDR_VAR 0 1
72175: PUSH
72176: LD_INT 2
72178: PUSH
72179: LD_INT 4
72181: PUSH
72182: LD_INT 5
72184: PUSH
72185: LD_INT 7
72187: PUSH
72188: LD_INT 11
72190: PUSH
72191: LD_INT 12
72193: PUSH
72194: LD_INT 15
72196: PUSH
72197: LD_INT 16
72199: PUSH
72200: LD_INT 20
72202: PUSH
72203: LD_INT 21
72205: PUSH
72206: LD_INT 22
72208: PUSH
72209: LD_INT 23
72211: PUSH
72212: LD_INT 25
72214: PUSH
72215: LD_INT 26
72217: PUSH
72218: LD_INT 30
72220: PUSH
72221: LD_INT 31
72223: PUSH
72224: LD_INT 32
72226: PUSH
72227: LD_INT 33
72229: PUSH
72230: LD_INT 34
72232: PUSH
72233: LD_INT 35
72235: PUSH
72236: LD_INT 36
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 101
72264: PUSH
72265: LD_INT 102
72267: PUSH
72268: LD_INT 103
72270: PUSH
72271: LD_INT 106
72273: PUSH
72274: LD_INT 108
72276: PUSH
72277: LD_INT 112
72279: PUSH
72280: LD_INT 113
72282: PUSH
72283: LD_INT 114
72285: PUSH
72286: LD_INT 115
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: ST_TO_ADDR
72304: GO 72535
72306: LD_INT 19
72308: DOUBLE
72309: EQUAL
72310: IFTRUE 72314
72312: GO 72534
72314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
72315: LD_ADDR_VAR 0 1
72319: PUSH
72320: LD_INT 1
72322: PUSH
72323: LD_INT 2
72325: PUSH
72326: LD_INT 3
72328: PUSH
72329: LD_INT 4
72331: PUSH
72332: LD_INT 5
72334: PUSH
72335: LD_INT 6
72337: PUSH
72338: LD_INT 7
72340: PUSH
72341: LD_INT 8
72343: PUSH
72344: LD_INT 9
72346: PUSH
72347: LD_INT 10
72349: PUSH
72350: LD_INT 11
72352: PUSH
72353: LD_INT 12
72355: PUSH
72356: LD_INT 13
72358: PUSH
72359: LD_INT 14
72361: PUSH
72362: LD_INT 15
72364: PUSH
72365: LD_INT 16
72367: PUSH
72368: LD_INT 17
72370: PUSH
72371: LD_INT 18
72373: PUSH
72374: LD_INT 19
72376: PUSH
72377: LD_INT 20
72379: PUSH
72380: LD_INT 21
72382: PUSH
72383: LD_INT 22
72385: PUSH
72386: LD_INT 23
72388: PUSH
72389: LD_INT 24
72391: PUSH
72392: LD_INT 25
72394: PUSH
72395: LD_INT 26
72397: PUSH
72398: LD_INT 27
72400: PUSH
72401: LD_INT 28
72403: PUSH
72404: LD_INT 29
72406: PUSH
72407: LD_INT 30
72409: PUSH
72410: LD_INT 31
72412: PUSH
72413: LD_INT 32
72415: PUSH
72416: LD_INT 33
72418: PUSH
72419: LD_INT 34
72421: PUSH
72422: LD_INT 35
72424: PUSH
72425: LD_INT 36
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: LIST
72462: LIST
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 101
72468: PUSH
72469: LD_INT 102
72471: PUSH
72472: LD_INT 103
72474: PUSH
72475: LD_INT 104
72477: PUSH
72478: LD_INT 105
72480: PUSH
72481: LD_INT 106
72483: PUSH
72484: LD_INT 107
72486: PUSH
72487: LD_INT 108
72489: PUSH
72490: LD_INT 109
72492: PUSH
72493: LD_INT 110
72495: PUSH
72496: LD_INT 111
72498: PUSH
72499: LD_INT 112
72501: PUSH
72502: LD_INT 113
72504: PUSH
72505: LD_INT 114
72507: PUSH
72508: LD_INT 115
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: ST_TO_ADDR
72532: GO 72535
72534: POP
// end else
72535: GO 72754
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
72537: LD_ADDR_VAR 0 1
72541: PUSH
72542: LD_INT 1
72544: PUSH
72545: LD_INT 2
72547: PUSH
72548: LD_INT 3
72550: PUSH
72551: LD_INT 4
72553: PUSH
72554: LD_INT 5
72556: PUSH
72557: LD_INT 6
72559: PUSH
72560: LD_INT 7
72562: PUSH
72563: LD_INT 8
72565: PUSH
72566: LD_INT 9
72568: PUSH
72569: LD_INT 10
72571: PUSH
72572: LD_INT 11
72574: PUSH
72575: LD_INT 12
72577: PUSH
72578: LD_INT 13
72580: PUSH
72581: LD_INT 14
72583: PUSH
72584: LD_INT 15
72586: PUSH
72587: LD_INT 16
72589: PUSH
72590: LD_INT 17
72592: PUSH
72593: LD_INT 18
72595: PUSH
72596: LD_INT 19
72598: PUSH
72599: LD_INT 20
72601: PUSH
72602: LD_INT 21
72604: PUSH
72605: LD_INT 22
72607: PUSH
72608: LD_INT 23
72610: PUSH
72611: LD_INT 24
72613: PUSH
72614: LD_INT 25
72616: PUSH
72617: LD_INT 26
72619: PUSH
72620: LD_INT 27
72622: PUSH
72623: LD_INT 28
72625: PUSH
72626: LD_INT 29
72628: PUSH
72629: LD_INT 30
72631: PUSH
72632: LD_INT 31
72634: PUSH
72635: LD_INT 32
72637: PUSH
72638: LD_INT 33
72640: PUSH
72641: LD_INT 34
72643: PUSH
72644: LD_INT 35
72646: PUSH
72647: LD_INT 36
72649: PUSH
72650: EMPTY
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 101
72690: PUSH
72691: LD_INT 102
72693: PUSH
72694: LD_INT 103
72696: PUSH
72697: LD_INT 104
72699: PUSH
72700: LD_INT 105
72702: PUSH
72703: LD_INT 106
72705: PUSH
72706: LD_INT 107
72708: PUSH
72709: LD_INT 108
72711: PUSH
72712: LD_INT 109
72714: PUSH
72715: LD_INT 110
72717: PUSH
72718: LD_INT 111
72720: PUSH
72721: LD_INT 112
72723: PUSH
72724: LD_INT 113
72726: PUSH
72727: LD_INT 114
72729: PUSH
72730: LD_INT 115
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: LIST
72737: LIST
72738: LIST
72739: LIST
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: ST_TO_ADDR
// if result then
72754: LD_VAR 0 1
72758: IFFALSE 73047
// begin normal :=  ;
72760: LD_ADDR_VAR 0 3
72764: PUSH
72765: LD_STRING 
72767: ST_TO_ADDR
// hardcore :=  ;
72768: LD_ADDR_VAR 0 4
72772: PUSH
72773: LD_STRING 
72775: ST_TO_ADDR
// for i = 1 to normalCounter do
72776: LD_ADDR_VAR 0 5
72780: PUSH
72781: DOUBLE
72782: LD_INT 1
72784: DEC
72785: ST_TO_ADDR
72786: LD_EXP 107
72790: PUSH
72791: FOR_TO
72792: IFFALSE 72893
// begin tmp := 0 ;
72794: LD_ADDR_VAR 0 2
72798: PUSH
72799: LD_STRING 0
72801: ST_TO_ADDR
// if result [ 1 ] then
72802: LD_VAR 0 1
72806: PUSH
72807: LD_INT 1
72809: ARRAY
72810: IFFALSE 72875
// if result [ 1 ] [ 1 ] = i then
72812: LD_VAR 0 1
72816: PUSH
72817: LD_INT 1
72819: ARRAY
72820: PUSH
72821: LD_INT 1
72823: ARRAY
72824: PUSH
72825: LD_VAR 0 5
72829: EQUAL
72830: IFFALSE 72875
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72832: LD_ADDR_VAR 0 1
72836: PUSH
72837: LD_VAR 0 1
72841: PPUSH
72842: LD_INT 1
72844: PPUSH
72845: LD_VAR 0 1
72849: PUSH
72850: LD_INT 1
72852: ARRAY
72853: PPUSH
72854: LD_INT 1
72856: PPUSH
72857: CALL_OW 3
72861: PPUSH
72862: CALL_OW 1
72866: ST_TO_ADDR
// tmp := 1 ;
72867: LD_ADDR_VAR 0 2
72871: PUSH
72872: LD_STRING 1
72874: ST_TO_ADDR
// end ; normal := normal & tmp ;
72875: LD_ADDR_VAR 0 3
72879: PUSH
72880: LD_VAR 0 3
72884: PUSH
72885: LD_VAR 0 2
72889: STR
72890: ST_TO_ADDR
// end ;
72891: GO 72791
72893: POP
72894: POP
// for i = 1 to hardcoreCounter do
72895: LD_ADDR_VAR 0 5
72899: PUSH
72900: DOUBLE
72901: LD_INT 1
72903: DEC
72904: ST_TO_ADDR
72905: LD_EXP 108
72909: PUSH
72910: FOR_TO
72911: IFFALSE 73016
// begin tmp := 0 ;
72913: LD_ADDR_VAR 0 2
72917: PUSH
72918: LD_STRING 0
72920: ST_TO_ADDR
// if result [ 2 ] then
72921: LD_VAR 0 1
72925: PUSH
72926: LD_INT 2
72928: ARRAY
72929: IFFALSE 72998
// if result [ 2 ] [ 1 ] = 100 + i then
72931: LD_VAR 0 1
72935: PUSH
72936: LD_INT 2
72938: ARRAY
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: LD_INT 100
72946: PUSH
72947: LD_VAR 0 5
72951: PLUS
72952: EQUAL
72953: IFFALSE 72998
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72955: LD_ADDR_VAR 0 1
72959: PUSH
72960: LD_VAR 0 1
72964: PPUSH
72965: LD_INT 2
72967: PPUSH
72968: LD_VAR 0 1
72972: PUSH
72973: LD_INT 2
72975: ARRAY
72976: PPUSH
72977: LD_INT 1
72979: PPUSH
72980: CALL_OW 3
72984: PPUSH
72985: CALL_OW 1
72989: ST_TO_ADDR
// tmp := 1 ;
72990: LD_ADDR_VAR 0 2
72994: PUSH
72995: LD_STRING 1
72997: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72998: LD_ADDR_VAR 0 4
73002: PUSH
73003: LD_VAR 0 4
73007: PUSH
73008: LD_VAR 0 2
73012: STR
73013: ST_TO_ADDR
// end ;
73014: GO 72910
73016: POP
73017: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
73018: LD_STRING getStreamItemsFromMission("
73020: PUSH
73021: LD_VAR 0 3
73025: STR
73026: PUSH
73027: LD_STRING ","
73029: STR
73030: PUSH
73031: LD_VAR 0 4
73035: STR
73036: PUSH
73037: LD_STRING ")
73039: STR
73040: PPUSH
73041: CALL_OW 559
// end else
73045: GO 73054
// ToLua ( getStreamItemsFromMission("","") ) ;
73047: LD_STRING getStreamItemsFromMission("","")
73049: PPUSH
73050: CALL_OW 559
// end ;
73054: LD_VAR 0 1
73058: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73059: LD_EXP 106
73063: PUSH
73064: LD_EXP 111
73068: AND
73069: IFFALSE 73193
73071: GO 73073
73073: DISABLE
73074: LD_INT 0
73076: PPUSH
73077: PPUSH
// begin enable ;
73078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73079: LD_ADDR_VAR 0 2
73083: PUSH
73084: LD_INT 22
73086: PUSH
73087: LD_OWVAR 2
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 2
73098: PUSH
73099: LD_INT 34
73101: PUSH
73102: LD_INT 7
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 34
73111: PUSH
73112: LD_INT 45
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 34
73121: PUSH
73122: LD_INT 28
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 34
73131: PUSH
73132: LD_INT 47
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PPUSH
73150: CALL_OW 69
73154: ST_TO_ADDR
// if not tmp then
73155: LD_VAR 0 2
73159: NOT
73160: IFFALSE 73164
// exit ;
73162: GO 73193
// for i in tmp do
73164: LD_ADDR_VAR 0 1
73168: PUSH
73169: LD_VAR 0 2
73173: PUSH
73174: FOR_IN
73175: IFFALSE 73191
// begin SetLives ( i , 0 ) ;
73177: LD_VAR 0 1
73181: PPUSH
73182: LD_INT 0
73184: PPUSH
73185: CALL_OW 234
// end ;
73189: GO 73174
73191: POP
73192: POP
// end ;
73193: PPOPN 2
73195: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73196: LD_EXP 106
73200: PUSH
73201: LD_EXP 112
73205: AND
73206: IFFALSE 73290
73208: GO 73210
73210: DISABLE
73211: LD_INT 0
73213: PPUSH
73214: PPUSH
// begin enable ;
73215: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73216: LD_ADDR_VAR 0 2
73220: PUSH
73221: LD_INT 22
73223: PUSH
73224: LD_OWVAR 2
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 32
73235: PUSH
73236: LD_INT 3
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PPUSH
73247: CALL_OW 69
73251: ST_TO_ADDR
// if not tmp then
73252: LD_VAR 0 2
73256: NOT
73257: IFFALSE 73261
// exit ;
73259: GO 73290
// for i in tmp do
73261: LD_ADDR_VAR 0 1
73265: PUSH
73266: LD_VAR 0 2
73270: PUSH
73271: FOR_IN
73272: IFFALSE 73288
// begin SetLives ( i , 0 ) ;
73274: LD_VAR 0 1
73278: PPUSH
73279: LD_INT 0
73281: PPUSH
73282: CALL_OW 234
// end ;
73286: GO 73271
73288: POP
73289: POP
// end ;
73290: PPOPN 2
73292: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73293: LD_EXP 106
73297: PUSH
73298: LD_EXP 109
73302: AND
73303: IFFALSE 73396
73305: GO 73307
73307: DISABLE
73308: LD_INT 0
73310: PPUSH
// begin enable ;
73311: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73312: LD_ADDR_VAR 0 1
73316: PUSH
73317: LD_INT 22
73319: PUSH
73320: LD_OWVAR 2
73324: PUSH
73325: EMPTY
73326: LIST
73327: LIST
73328: PUSH
73329: LD_INT 2
73331: PUSH
73332: LD_INT 25
73334: PUSH
73335: LD_INT 5
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 25
73344: PUSH
73345: LD_INT 9
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 25
73354: PUSH
73355: LD_INT 8
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PPUSH
73372: CALL_OW 69
73376: PUSH
73377: FOR_IN
73378: IFFALSE 73394
// begin SetClass ( i , 1 ) ;
73380: LD_VAR 0 1
73384: PPUSH
73385: LD_INT 1
73387: PPUSH
73388: CALL_OW 336
// end ;
73392: GO 73377
73394: POP
73395: POP
// end ;
73396: PPOPN 1
73398: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73399: LD_EXP 106
73403: PUSH
73404: LD_EXP 110
73408: AND
73409: PUSH
73410: LD_OWVAR 65
73414: PUSH
73415: LD_INT 7
73417: LESS
73418: AND
73419: IFFALSE 73433
73421: GO 73423
73423: DISABLE
// begin enable ;
73424: ENABLE
// game_speed := 7 ;
73425: LD_ADDR_OWVAR 65
73429: PUSH
73430: LD_INT 7
73432: ST_TO_ADDR
// end ;
73433: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73434: LD_EXP 106
73438: PUSH
73439: LD_EXP 113
73443: AND
73444: IFFALSE 73646
73446: GO 73448
73448: DISABLE
73449: LD_INT 0
73451: PPUSH
73452: PPUSH
73453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73454: LD_ADDR_VAR 0 3
73458: PUSH
73459: LD_INT 81
73461: PUSH
73462: LD_OWVAR 2
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 21
73473: PUSH
73474: LD_INT 1
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PPUSH
73485: CALL_OW 69
73489: ST_TO_ADDR
// if not tmp then
73490: LD_VAR 0 3
73494: NOT
73495: IFFALSE 73499
// exit ;
73497: GO 73646
// if tmp > 5 then
73499: LD_VAR 0 3
73503: PUSH
73504: LD_INT 5
73506: GREATER
73507: IFFALSE 73519
// k := 5 else
73509: LD_ADDR_VAR 0 2
73513: PUSH
73514: LD_INT 5
73516: ST_TO_ADDR
73517: GO 73529
// k := tmp ;
73519: LD_ADDR_VAR 0 2
73523: PUSH
73524: LD_VAR 0 3
73528: ST_TO_ADDR
// for i := 1 to k do
73529: LD_ADDR_VAR 0 1
73533: PUSH
73534: DOUBLE
73535: LD_INT 1
73537: DEC
73538: ST_TO_ADDR
73539: LD_VAR 0 2
73543: PUSH
73544: FOR_TO
73545: IFFALSE 73644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73547: LD_VAR 0 3
73551: PUSH
73552: LD_VAR 0 1
73556: ARRAY
73557: PPUSH
73558: LD_VAR 0 1
73562: PUSH
73563: LD_INT 4
73565: MOD
73566: PUSH
73567: LD_INT 1
73569: PLUS
73570: PPUSH
73571: CALL_OW 259
73575: PUSH
73576: LD_INT 10
73578: LESS
73579: IFFALSE 73642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73581: LD_VAR 0 3
73585: PUSH
73586: LD_VAR 0 1
73590: ARRAY
73591: PPUSH
73592: LD_VAR 0 1
73596: PUSH
73597: LD_INT 4
73599: MOD
73600: PUSH
73601: LD_INT 1
73603: PLUS
73604: PPUSH
73605: LD_VAR 0 3
73609: PUSH
73610: LD_VAR 0 1
73614: ARRAY
73615: PPUSH
73616: LD_VAR 0 1
73620: PUSH
73621: LD_INT 4
73623: MOD
73624: PUSH
73625: LD_INT 1
73627: PLUS
73628: PPUSH
73629: CALL_OW 259
73633: PUSH
73634: LD_INT 1
73636: PLUS
73637: PPUSH
73638: CALL_OW 237
73642: GO 73544
73644: POP
73645: POP
// end ;
73646: PPOPN 3
73648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73649: LD_EXP 106
73653: PUSH
73654: LD_EXP 114
73658: AND
73659: IFFALSE 73679
73661: GO 73663
73663: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73664: LD_INT 4
73666: PPUSH
73667: LD_OWVAR 2
73671: PPUSH
73672: LD_INT 0
73674: PPUSH
73675: CALL_OW 324
73679: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73680: LD_EXP 106
73684: PUSH
73685: LD_EXP 143
73689: AND
73690: IFFALSE 73710
73692: GO 73694
73694: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73695: LD_INT 19
73697: PPUSH
73698: LD_OWVAR 2
73702: PPUSH
73703: LD_INT 0
73705: PPUSH
73706: CALL_OW 324
73710: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73711: LD_EXP 106
73715: PUSH
73716: LD_EXP 115
73720: AND
73721: IFFALSE 73823
73723: GO 73725
73725: DISABLE
73726: LD_INT 0
73728: PPUSH
73729: PPUSH
// begin enable ;
73730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73731: LD_ADDR_VAR 0 2
73735: PUSH
73736: LD_INT 22
73738: PUSH
73739: LD_OWVAR 2
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 2
73750: PUSH
73751: LD_INT 34
73753: PUSH
73754: LD_INT 11
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 34
73763: PUSH
73764: LD_INT 30
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: PUSH
73771: EMPTY
73772: LIST
73773: LIST
73774: LIST
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PPUSH
73780: CALL_OW 69
73784: ST_TO_ADDR
// if not tmp then
73785: LD_VAR 0 2
73789: NOT
73790: IFFALSE 73794
// exit ;
73792: GO 73823
// for i in tmp do
73794: LD_ADDR_VAR 0 1
73798: PUSH
73799: LD_VAR 0 2
73803: PUSH
73804: FOR_IN
73805: IFFALSE 73821
// begin SetLives ( i , 0 ) ;
73807: LD_VAR 0 1
73811: PPUSH
73812: LD_INT 0
73814: PPUSH
73815: CALL_OW 234
// end ;
73819: GO 73804
73821: POP
73822: POP
// end ;
73823: PPOPN 2
73825: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73826: LD_EXP 106
73830: PUSH
73831: LD_EXP 116
73835: AND
73836: IFFALSE 73856
73838: GO 73840
73840: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73841: LD_INT 32
73843: PPUSH
73844: LD_OWVAR 2
73848: PPUSH
73849: LD_INT 0
73851: PPUSH
73852: CALL_OW 324
73856: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73857: LD_EXP 106
73861: PUSH
73862: LD_EXP 117
73866: AND
73867: IFFALSE 74048
73869: GO 73871
73871: DISABLE
73872: LD_INT 0
73874: PPUSH
73875: PPUSH
73876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73877: LD_ADDR_VAR 0 2
73881: PUSH
73882: LD_INT 22
73884: PUSH
73885: LD_OWVAR 2
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 33
73896: PUSH
73897: LD_INT 3
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PPUSH
73908: CALL_OW 69
73912: ST_TO_ADDR
// if not tmp then
73913: LD_VAR 0 2
73917: NOT
73918: IFFALSE 73922
// exit ;
73920: GO 74048
// side := 0 ;
73922: LD_ADDR_VAR 0 3
73926: PUSH
73927: LD_INT 0
73929: ST_TO_ADDR
// for i := 1 to 8 do
73930: LD_ADDR_VAR 0 1
73934: PUSH
73935: DOUBLE
73936: LD_INT 1
73938: DEC
73939: ST_TO_ADDR
73940: LD_INT 8
73942: PUSH
73943: FOR_TO
73944: IFFALSE 73992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73946: LD_OWVAR 2
73950: PUSH
73951: LD_VAR 0 1
73955: NONEQUAL
73956: PUSH
73957: LD_OWVAR 2
73961: PPUSH
73962: LD_VAR 0 1
73966: PPUSH
73967: CALL_OW 81
73971: PUSH
73972: LD_INT 2
73974: EQUAL
73975: AND
73976: IFFALSE 73990
// begin side := i ;
73978: LD_ADDR_VAR 0 3
73982: PUSH
73983: LD_VAR 0 1
73987: ST_TO_ADDR
// break ;
73988: GO 73992
// end ;
73990: GO 73943
73992: POP
73993: POP
// if not side then
73994: LD_VAR 0 3
73998: NOT
73999: IFFALSE 74003
// exit ;
74001: GO 74048
// for i := 1 to tmp do
74003: LD_ADDR_VAR 0 1
74007: PUSH
74008: DOUBLE
74009: LD_INT 1
74011: DEC
74012: ST_TO_ADDR
74013: LD_VAR 0 2
74017: PUSH
74018: FOR_TO
74019: IFFALSE 74046
// if Prob ( 60 ) then
74021: LD_INT 60
74023: PPUSH
74024: CALL_OW 13
74028: IFFALSE 74044
// SetSide ( i , side ) ;
74030: LD_VAR 0 1
74034: PPUSH
74035: LD_VAR 0 3
74039: PPUSH
74040: CALL_OW 235
74044: GO 74018
74046: POP
74047: POP
// end ;
74048: PPOPN 3
74050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74051: LD_EXP 106
74055: PUSH
74056: LD_EXP 119
74060: AND
74061: IFFALSE 74180
74063: GO 74065
74065: DISABLE
74066: LD_INT 0
74068: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74069: LD_ADDR_VAR 0 1
74073: PUSH
74074: LD_INT 22
74076: PUSH
74077: LD_OWVAR 2
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 21
74088: PUSH
74089: LD_INT 1
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 3
74098: PUSH
74099: LD_INT 23
74101: PUSH
74102: LD_INT 0
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: EMPTY
74110: LIST
74111: LIST
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: LIST
74117: PPUSH
74118: CALL_OW 69
74122: PUSH
74123: FOR_IN
74124: IFFALSE 74178
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74126: LD_VAR 0 1
74130: PPUSH
74131: CALL_OW 257
74135: PUSH
74136: LD_INT 1
74138: PUSH
74139: LD_INT 2
74141: PUSH
74142: LD_INT 3
74144: PUSH
74145: LD_INT 4
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: IN
74154: IFFALSE 74176
// SetClass ( un , rand ( 1 , 4 ) ) ;
74156: LD_VAR 0 1
74160: PPUSH
74161: LD_INT 1
74163: PPUSH
74164: LD_INT 4
74166: PPUSH
74167: CALL_OW 12
74171: PPUSH
74172: CALL_OW 336
74176: GO 74123
74178: POP
74179: POP
// end ;
74180: PPOPN 1
74182: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74183: LD_EXP 106
74187: PUSH
74188: LD_EXP 118
74192: AND
74193: IFFALSE 74272
74195: GO 74197
74197: DISABLE
74198: LD_INT 0
74200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74201: LD_ADDR_VAR 0 1
74205: PUSH
74206: LD_INT 22
74208: PUSH
74209: LD_OWVAR 2
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 21
74220: PUSH
74221: LD_INT 3
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PPUSH
74232: CALL_OW 69
74236: ST_TO_ADDR
// if not tmp then
74237: LD_VAR 0 1
74241: NOT
74242: IFFALSE 74246
// exit ;
74244: GO 74272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74246: LD_VAR 0 1
74250: PUSH
74251: LD_INT 1
74253: PPUSH
74254: LD_VAR 0 1
74258: PPUSH
74259: CALL_OW 12
74263: ARRAY
74264: PPUSH
74265: LD_INT 100
74267: PPUSH
74268: CALL_OW 234
// end ;
74272: PPOPN 1
74274: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74275: LD_EXP 106
74279: PUSH
74280: LD_EXP 120
74284: AND
74285: IFFALSE 74383
74287: GO 74289
74289: DISABLE
74290: LD_INT 0
74292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74293: LD_ADDR_VAR 0 1
74297: PUSH
74298: LD_INT 22
74300: PUSH
74301: LD_OWVAR 2
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 21
74312: PUSH
74313: LD_INT 1
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PPUSH
74324: CALL_OW 69
74328: ST_TO_ADDR
// if not tmp then
74329: LD_VAR 0 1
74333: NOT
74334: IFFALSE 74338
// exit ;
74336: GO 74383
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74338: LD_VAR 0 1
74342: PUSH
74343: LD_INT 1
74345: PPUSH
74346: LD_VAR 0 1
74350: PPUSH
74351: CALL_OW 12
74355: ARRAY
74356: PPUSH
74357: LD_INT 1
74359: PPUSH
74360: LD_INT 4
74362: PPUSH
74363: CALL_OW 12
74367: PPUSH
74368: LD_INT 3000
74370: PPUSH
74371: LD_INT 9000
74373: PPUSH
74374: CALL_OW 12
74378: PPUSH
74379: CALL_OW 492
// end ;
74383: PPOPN 1
74385: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74386: LD_EXP 106
74390: PUSH
74391: LD_EXP 121
74395: AND
74396: IFFALSE 74416
74398: GO 74400
74400: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74401: LD_INT 1
74403: PPUSH
74404: LD_OWVAR 2
74408: PPUSH
74409: LD_INT 0
74411: PPUSH
74412: CALL_OW 324
74416: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74417: LD_EXP 106
74421: PUSH
74422: LD_EXP 122
74426: AND
74427: IFFALSE 74510
74429: GO 74431
74431: DISABLE
74432: LD_INT 0
74434: PPUSH
74435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74436: LD_ADDR_VAR 0 2
74440: PUSH
74441: LD_INT 22
74443: PUSH
74444: LD_OWVAR 2
74448: PUSH
74449: EMPTY
74450: LIST
74451: LIST
74452: PUSH
74453: LD_INT 21
74455: PUSH
74456: LD_INT 3
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PPUSH
74467: CALL_OW 69
74471: ST_TO_ADDR
// if not tmp then
74472: LD_VAR 0 2
74476: NOT
74477: IFFALSE 74481
// exit ;
74479: GO 74510
// for i in tmp do
74481: LD_ADDR_VAR 0 1
74485: PUSH
74486: LD_VAR 0 2
74490: PUSH
74491: FOR_IN
74492: IFFALSE 74508
// SetBLevel ( i , 10 ) ;
74494: LD_VAR 0 1
74498: PPUSH
74499: LD_INT 10
74501: PPUSH
74502: CALL_OW 241
74506: GO 74491
74508: POP
74509: POP
// end ;
74510: PPOPN 2
74512: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74513: LD_EXP 106
74517: PUSH
74518: LD_EXP 123
74522: AND
74523: IFFALSE 74634
74525: GO 74527
74527: DISABLE
74528: LD_INT 0
74530: PPUSH
74531: PPUSH
74532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74533: LD_ADDR_VAR 0 3
74537: PUSH
74538: LD_INT 22
74540: PUSH
74541: LD_OWVAR 2
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: LD_INT 25
74552: PUSH
74553: LD_INT 1
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PPUSH
74564: CALL_OW 69
74568: ST_TO_ADDR
// if not tmp then
74569: LD_VAR 0 3
74573: NOT
74574: IFFALSE 74578
// exit ;
74576: GO 74634
// un := tmp [ rand ( 1 , tmp ) ] ;
74578: LD_ADDR_VAR 0 2
74582: PUSH
74583: LD_VAR 0 3
74587: PUSH
74588: LD_INT 1
74590: PPUSH
74591: LD_VAR 0 3
74595: PPUSH
74596: CALL_OW 12
74600: ARRAY
74601: ST_TO_ADDR
// if Crawls ( un ) then
74602: LD_VAR 0 2
74606: PPUSH
74607: CALL_OW 318
74611: IFFALSE 74622
// ComWalk ( un ) ;
74613: LD_VAR 0 2
74617: PPUSH
74618: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74622: LD_VAR 0 2
74626: PPUSH
74627: LD_INT 5
74629: PPUSH
74630: CALL_OW 336
// end ;
74634: PPOPN 3
74636: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
74637: LD_EXP 106
74641: PUSH
74642: LD_EXP 124
74646: AND
74647: PUSH
74648: LD_OWVAR 67
74652: PUSH
74653: LD_INT 3
74655: LESS
74656: AND
74657: IFFALSE 74676
74659: GO 74661
74661: DISABLE
// Difficulty := Difficulty + 1 ;
74662: LD_ADDR_OWVAR 67
74666: PUSH
74667: LD_OWVAR 67
74671: PUSH
74672: LD_INT 1
74674: PLUS
74675: ST_TO_ADDR
74676: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74677: LD_EXP 106
74681: PUSH
74682: LD_EXP 125
74686: AND
74687: IFFALSE 74790
74689: GO 74691
74691: DISABLE
74692: LD_INT 0
74694: PPUSH
// begin for i := 1 to 5 do
74695: LD_ADDR_VAR 0 1
74699: PUSH
74700: DOUBLE
74701: LD_INT 1
74703: DEC
74704: ST_TO_ADDR
74705: LD_INT 5
74707: PUSH
74708: FOR_TO
74709: IFFALSE 74788
// begin uc_nation := nation_nature ;
74711: LD_ADDR_OWVAR 21
74715: PUSH
74716: LD_INT 0
74718: ST_TO_ADDR
// uc_side := 0 ;
74719: LD_ADDR_OWVAR 20
74723: PUSH
74724: LD_INT 0
74726: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74727: LD_ADDR_OWVAR 29
74731: PUSH
74732: LD_INT 12
74734: PUSH
74735: LD_INT 12
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: ST_TO_ADDR
// hc_agressivity := 20 ;
74742: LD_ADDR_OWVAR 35
74746: PUSH
74747: LD_INT 20
74749: ST_TO_ADDR
// hc_class := class_tiger ;
74750: LD_ADDR_OWVAR 28
74754: PUSH
74755: LD_INT 14
74757: ST_TO_ADDR
// hc_gallery :=  ;
74758: LD_ADDR_OWVAR 33
74762: PUSH
74763: LD_STRING 
74765: ST_TO_ADDR
// hc_name :=  ;
74766: LD_ADDR_OWVAR 26
74770: PUSH
74771: LD_STRING 
74773: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74774: CALL_OW 44
74778: PPUSH
74779: LD_INT 0
74781: PPUSH
74782: CALL_OW 51
// end ;
74786: GO 74708
74788: POP
74789: POP
// end ;
74790: PPOPN 1
74792: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74793: LD_EXP 106
74797: PUSH
74798: LD_EXP 126
74802: AND
74803: IFFALSE 74812
74805: GO 74807
74807: DISABLE
// StreamSibBomb ;
74808: CALL 74813 0 0
74812: END
// export function StreamSibBomb ; var i , x , y ; begin
74813: LD_INT 0
74815: PPUSH
74816: PPUSH
74817: PPUSH
74818: PPUSH
// result := false ;
74819: LD_ADDR_VAR 0 1
74823: PUSH
74824: LD_INT 0
74826: ST_TO_ADDR
// for i := 1 to 16 do
74827: LD_ADDR_VAR 0 2
74831: PUSH
74832: DOUBLE
74833: LD_INT 1
74835: DEC
74836: ST_TO_ADDR
74837: LD_INT 16
74839: PUSH
74840: FOR_TO
74841: IFFALSE 75040
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74843: LD_ADDR_VAR 0 3
74847: PUSH
74848: LD_INT 10
74850: PUSH
74851: LD_INT 20
74853: PUSH
74854: LD_INT 30
74856: PUSH
74857: LD_INT 40
74859: PUSH
74860: LD_INT 50
74862: PUSH
74863: LD_INT 60
74865: PUSH
74866: LD_INT 70
74868: PUSH
74869: LD_INT 80
74871: PUSH
74872: LD_INT 90
74874: PUSH
74875: LD_INT 100
74877: PUSH
74878: LD_INT 110
74880: PUSH
74881: LD_INT 120
74883: PUSH
74884: LD_INT 130
74886: PUSH
74887: LD_INT 140
74889: PUSH
74890: LD_INT 150
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 1
74912: PPUSH
74913: LD_INT 15
74915: PPUSH
74916: CALL_OW 12
74920: ARRAY
74921: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74922: LD_ADDR_VAR 0 4
74926: PUSH
74927: LD_INT 10
74929: PUSH
74930: LD_INT 20
74932: PUSH
74933: LD_INT 30
74935: PUSH
74936: LD_INT 40
74938: PUSH
74939: LD_INT 50
74941: PUSH
74942: LD_INT 60
74944: PUSH
74945: LD_INT 70
74947: PUSH
74948: LD_INT 80
74950: PUSH
74951: LD_INT 90
74953: PUSH
74954: LD_INT 100
74956: PUSH
74957: LD_INT 110
74959: PUSH
74960: LD_INT 120
74962: PUSH
74963: LD_INT 130
74965: PUSH
74966: LD_INT 140
74968: PUSH
74969: LD_INT 150
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: PUSH
74989: LD_INT 1
74991: PPUSH
74992: LD_INT 15
74994: PPUSH
74995: CALL_OW 12
74999: ARRAY
75000: ST_TO_ADDR
// if ValidHex ( x , y ) then
75001: LD_VAR 0 3
75005: PPUSH
75006: LD_VAR 0 4
75010: PPUSH
75011: CALL_OW 488
75015: IFFALSE 75038
// begin result := [ x , y ] ;
75017: LD_ADDR_VAR 0 1
75021: PUSH
75022: LD_VAR 0 3
75026: PUSH
75027: LD_VAR 0 4
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: ST_TO_ADDR
// break ;
75036: GO 75040
// end ; end ;
75038: GO 74840
75040: POP
75041: POP
// if result then
75042: LD_VAR 0 1
75046: IFFALSE 75106
// begin ToLua ( playSibBomb() ) ;
75048: LD_STRING playSibBomb()
75050: PPUSH
75051: CALL_OW 559
// wait ( 0 0$14 ) ;
75055: LD_INT 490
75057: PPUSH
75058: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75062: LD_VAR 0 1
75066: PUSH
75067: LD_INT 1
75069: ARRAY
75070: PPUSH
75071: LD_VAR 0 1
75075: PUSH
75076: LD_INT 2
75078: ARRAY
75079: PPUSH
75080: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75084: LD_VAR 0 1
75088: PUSH
75089: LD_INT 1
75091: ARRAY
75092: PPUSH
75093: LD_VAR 0 1
75097: PUSH
75098: LD_INT 2
75100: ARRAY
75101: PPUSH
75102: CALL_OW 429
// end ; end ;
75106: LD_VAR 0 1
75110: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75111: LD_EXP 106
75115: PUSH
75116: LD_EXP 128
75120: AND
75121: IFFALSE 75133
75123: GO 75125
75125: DISABLE
// YouLost (  ) ;
75126: LD_STRING 
75128: PPUSH
75129: CALL_OW 104
75133: END
// every 0 0$1 trigger StreamModeActive and sFog do
75134: LD_EXP 106
75138: PUSH
75139: LD_EXP 127
75143: AND
75144: IFFALSE 75158
75146: GO 75148
75148: DISABLE
// FogOff ( your_side ) ;
75149: LD_OWVAR 2
75153: PPUSH
75154: CALL_OW 344
75158: END
// every 0 0$1 trigger StreamModeActive and sSun do
75159: LD_EXP 106
75163: PUSH
75164: LD_EXP 129
75168: AND
75169: IFFALSE 75197
75171: GO 75173
75173: DISABLE
// begin solar_recharge_percent := 0 ;
75174: LD_ADDR_OWVAR 79
75178: PUSH
75179: LD_INT 0
75181: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75182: LD_INT 10500
75184: PPUSH
75185: CALL_OW 67
// solar_recharge_percent := 100 ;
75189: LD_ADDR_OWVAR 79
75193: PUSH
75194: LD_INT 100
75196: ST_TO_ADDR
// end ;
75197: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75198: LD_EXP 106
75202: PUSH
75203: LD_EXP 130
75207: AND
75208: IFFALSE 75447
75210: GO 75212
75212: DISABLE
75213: LD_INT 0
75215: PPUSH
75216: PPUSH
75217: PPUSH
// begin tmp := [ ] ;
75218: LD_ADDR_VAR 0 3
75222: PUSH
75223: EMPTY
75224: ST_TO_ADDR
// for i := 1 to 6 do
75225: LD_ADDR_VAR 0 1
75229: PUSH
75230: DOUBLE
75231: LD_INT 1
75233: DEC
75234: ST_TO_ADDR
75235: LD_INT 6
75237: PUSH
75238: FOR_TO
75239: IFFALSE 75344
// begin uc_nation := nation_nature ;
75241: LD_ADDR_OWVAR 21
75245: PUSH
75246: LD_INT 0
75248: ST_TO_ADDR
// uc_side := 0 ;
75249: LD_ADDR_OWVAR 20
75253: PUSH
75254: LD_INT 0
75256: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75257: LD_ADDR_OWVAR 29
75261: PUSH
75262: LD_INT 12
75264: PUSH
75265: LD_INT 12
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: ST_TO_ADDR
// hc_agressivity := 20 ;
75272: LD_ADDR_OWVAR 35
75276: PUSH
75277: LD_INT 20
75279: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75280: LD_ADDR_OWVAR 28
75284: PUSH
75285: LD_INT 17
75287: ST_TO_ADDR
// hc_gallery :=  ;
75288: LD_ADDR_OWVAR 33
75292: PUSH
75293: LD_STRING 
75295: ST_TO_ADDR
// hc_name :=  ;
75296: LD_ADDR_OWVAR 26
75300: PUSH
75301: LD_STRING 
75303: ST_TO_ADDR
// un := CreateHuman ;
75304: LD_ADDR_VAR 0 2
75308: PUSH
75309: CALL_OW 44
75313: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75314: LD_VAR 0 2
75318: PPUSH
75319: LD_INT 1
75321: PPUSH
75322: CALL_OW 51
// tmp := tmp ^ un ;
75326: LD_ADDR_VAR 0 3
75330: PUSH
75331: LD_VAR 0 3
75335: PUSH
75336: LD_VAR 0 2
75340: ADD
75341: ST_TO_ADDR
// end ;
75342: GO 75238
75344: POP
75345: POP
// repeat wait ( 0 0$1 ) ;
75346: LD_INT 35
75348: PPUSH
75349: CALL_OW 67
// for un in tmp do
75353: LD_ADDR_VAR 0 2
75357: PUSH
75358: LD_VAR 0 3
75362: PUSH
75363: FOR_IN
75364: IFFALSE 75438
// begin if IsDead ( un ) then
75366: LD_VAR 0 2
75370: PPUSH
75371: CALL_OW 301
75375: IFFALSE 75395
// begin tmp := tmp diff un ;
75377: LD_ADDR_VAR 0 3
75381: PUSH
75382: LD_VAR 0 3
75386: PUSH
75387: LD_VAR 0 2
75391: DIFF
75392: ST_TO_ADDR
// continue ;
75393: GO 75363
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75395: LD_VAR 0 2
75399: PPUSH
75400: LD_INT 3
75402: PUSH
75403: LD_INT 22
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PPUSH
75417: CALL_OW 69
75421: PPUSH
75422: LD_VAR 0 2
75426: PPUSH
75427: CALL_OW 74
75431: PPUSH
75432: CALL_OW 115
// end ;
75436: GO 75363
75438: POP
75439: POP
// until not tmp ;
75440: LD_VAR 0 3
75444: NOT
75445: IFFALSE 75346
// end ;
75447: PPOPN 3
75449: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75450: LD_EXP 106
75454: PUSH
75455: LD_EXP 131
75459: AND
75460: IFFALSE 75514
75462: GO 75464
75464: DISABLE
// begin ToLua ( displayTroll(); ) ;
75465: LD_STRING displayTroll();
75467: PPUSH
75468: CALL_OW 559
// wait ( 3 3$00 ) ;
75472: LD_INT 6300
75474: PPUSH
75475: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75479: LD_STRING hideTroll();
75481: PPUSH
75482: CALL_OW 559
// wait ( 1 1$00 ) ;
75486: LD_INT 2100
75488: PPUSH
75489: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75493: LD_STRING displayTroll();
75495: PPUSH
75496: CALL_OW 559
// wait ( 1 1$00 ) ;
75500: LD_INT 2100
75502: PPUSH
75503: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75507: LD_STRING hideTroll();
75509: PPUSH
75510: CALL_OW 559
// end ;
75514: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75515: LD_EXP 106
75519: PUSH
75520: LD_EXP 132
75524: AND
75525: IFFALSE 75588
75527: GO 75529
75529: DISABLE
75530: LD_INT 0
75532: PPUSH
// begin p := 0 ;
75533: LD_ADDR_VAR 0 1
75537: PUSH
75538: LD_INT 0
75540: ST_TO_ADDR
// repeat game_speed := 1 ;
75541: LD_ADDR_OWVAR 65
75545: PUSH
75546: LD_INT 1
75548: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75549: LD_INT 35
75551: PPUSH
75552: CALL_OW 67
// p := p + 1 ;
75556: LD_ADDR_VAR 0 1
75560: PUSH
75561: LD_VAR 0 1
75565: PUSH
75566: LD_INT 1
75568: PLUS
75569: ST_TO_ADDR
// until p >= 60 ;
75570: LD_VAR 0 1
75574: PUSH
75575: LD_INT 60
75577: GREATEREQUAL
75578: IFFALSE 75541
// game_speed := 4 ;
75580: LD_ADDR_OWVAR 65
75584: PUSH
75585: LD_INT 4
75587: ST_TO_ADDR
// end ;
75588: PPOPN 1
75590: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75591: LD_EXP 106
75595: PUSH
75596: LD_EXP 133
75600: AND
75601: IFFALSE 75747
75603: GO 75605
75605: DISABLE
75606: LD_INT 0
75608: PPUSH
75609: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75610: LD_ADDR_VAR 0 1
75614: PUSH
75615: LD_INT 22
75617: PUSH
75618: LD_OWVAR 2
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: LD_INT 30
75632: PUSH
75633: LD_INT 0
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: LD_INT 30
75642: PUSH
75643: LD_INT 1
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: LIST
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PPUSH
75659: CALL_OW 69
75663: ST_TO_ADDR
// if not depot then
75664: LD_VAR 0 1
75668: NOT
75669: IFFALSE 75673
// exit ;
75671: GO 75747
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75673: LD_ADDR_VAR 0 2
75677: PUSH
75678: LD_VAR 0 1
75682: PUSH
75683: LD_INT 1
75685: PPUSH
75686: LD_VAR 0 1
75690: PPUSH
75691: CALL_OW 12
75695: ARRAY
75696: PPUSH
75697: CALL_OW 274
75701: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75702: LD_VAR 0 2
75706: PPUSH
75707: LD_INT 1
75709: PPUSH
75710: LD_INT 0
75712: PPUSH
75713: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75717: LD_VAR 0 2
75721: PPUSH
75722: LD_INT 2
75724: PPUSH
75725: LD_INT 0
75727: PPUSH
75728: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75732: LD_VAR 0 2
75736: PPUSH
75737: LD_INT 3
75739: PPUSH
75740: LD_INT 0
75742: PPUSH
75743: CALL_OW 277
// end ;
75747: PPOPN 2
75749: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75750: LD_EXP 106
75754: PUSH
75755: LD_EXP 134
75759: AND
75760: IFFALSE 75857
75762: GO 75764
75764: DISABLE
75765: LD_INT 0
75767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75768: LD_ADDR_VAR 0 1
75772: PUSH
75773: LD_INT 22
75775: PUSH
75776: LD_OWVAR 2
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 21
75787: PUSH
75788: LD_INT 1
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: PUSH
75795: LD_INT 3
75797: PUSH
75798: LD_INT 23
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: LIST
75816: PPUSH
75817: CALL_OW 69
75821: ST_TO_ADDR
// if not tmp then
75822: LD_VAR 0 1
75826: NOT
75827: IFFALSE 75831
// exit ;
75829: GO 75857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75831: LD_VAR 0 1
75835: PUSH
75836: LD_INT 1
75838: PPUSH
75839: LD_VAR 0 1
75843: PPUSH
75844: CALL_OW 12
75848: ARRAY
75849: PPUSH
75850: LD_INT 200
75852: PPUSH
75853: CALL_OW 234
// end ;
75857: PPOPN 1
75859: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75860: LD_EXP 106
75864: PUSH
75865: LD_EXP 135
75869: AND
75870: IFFALSE 75949
75872: GO 75874
75874: DISABLE
75875: LD_INT 0
75877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75878: LD_ADDR_VAR 0 1
75882: PUSH
75883: LD_INT 22
75885: PUSH
75886: LD_OWVAR 2
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 21
75897: PUSH
75898: LD_INT 2
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: PPUSH
75909: CALL_OW 69
75913: ST_TO_ADDR
// if not tmp then
75914: LD_VAR 0 1
75918: NOT
75919: IFFALSE 75923
// exit ;
75921: GO 75949
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75923: LD_VAR 0 1
75927: PUSH
75928: LD_INT 1
75930: PPUSH
75931: LD_VAR 0 1
75935: PPUSH
75936: CALL_OW 12
75940: ARRAY
75941: PPUSH
75942: LD_INT 60
75944: PPUSH
75945: CALL_OW 234
// end ;
75949: PPOPN 1
75951: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75952: LD_EXP 106
75956: PUSH
75957: LD_EXP 136
75961: AND
75962: IFFALSE 76061
75964: GO 75966
75966: DISABLE
75967: LD_INT 0
75969: PPUSH
75970: PPUSH
// begin enable ;
75971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75972: LD_ADDR_VAR 0 1
75976: PUSH
75977: LD_INT 22
75979: PUSH
75980: LD_OWVAR 2
75984: PUSH
75985: EMPTY
75986: LIST
75987: LIST
75988: PUSH
75989: LD_INT 61
75991: PUSH
75992: EMPTY
75993: LIST
75994: PUSH
75995: LD_INT 33
75997: PUSH
75998: LD_INT 2
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: LIST
76009: PPUSH
76010: CALL_OW 69
76014: ST_TO_ADDR
// if not tmp then
76015: LD_VAR 0 1
76019: NOT
76020: IFFALSE 76024
// exit ;
76022: GO 76061
// for i in tmp do
76024: LD_ADDR_VAR 0 2
76028: PUSH
76029: LD_VAR 0 1
76033: PUSH
76034: FOR_IN
76035: IFFALSE 76059
// if IsControledBy ( i ) then
76037: LD_VAR 0 2
76041: PPUSH
76042: CALL_OW 312
76046: IFFALSE 76057
// ComUnlink ( i ) ;
76048: LD_VAR 0 2
76052: PPUSH
76053: CALL_OW 136
76057: GO 76034
76059: POP
76060: POP
// end ;
76061: PPOPN 2
76063: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76064: LD_EXP 106
76068: PUSH
76069: LD_EXP 137
76073: AND
76074: IFFALSE 76214
76076: GO 76078
76078: DISABLE
76079: LD_INT 0
76081: PPUSH
76082: PPUSH
// begin ToLua ( displayPowell(); ) ;
76083: LD_STRING displayPowell();
76085: PPUSH
76086: CALL_OW 559
// uc_side := 0 ;
76090: LD_ADDR_OWVAR 20
76094: PUSH
76095: LD_INT 0
76097: ST_TO_ADDR
// uc_nation := 2 ;
76098: LD_ADDR_OWVAR 21
76102: PUSH
76103: LD_INT 2
76105: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76106: LD_ADDR_OWVAR 37
76110: PUSH
76111: LD_INT 14
76113: ST_TO_ADDR
// vc_engine := engine_siberite ;
76114: LD_ADDR_OWVAR 39
76118: PUSH
76119: LD_INT 3
76121: ST_TO_ADDR
// vc_control := control_apeman ;
76122: LD_ADDR_OWVAR 38
76126: PUSH
76127: LD_INT 5
76129: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76130: LD_ADDR_OWVAR 40
76134: PUSH
76135: LD_INT 29
76137: ST_TO_ADDR
// un := CreateVehicle ;
76138: LD_ADDR_VAR 0 2
76142: PUSH
76143: CALL_OW 45
76147: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76148: LD_VAR 0 2
76152: PPUSH
76153: LD_INT 1
76155: PPUSH
76156: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76160: LD_INT 35
76162: PPUSH
76163: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76167: LD_VAR 0 2
76171: PPUSH
76172: LD_INT 22
76174: PUSH
76175: LD_OWVAR 2
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PPUSH
76184: CALL_OW 69
76188: PPUSH
76189: LD_VAR 0 2
76193: PPUSH
76194: CALL_OW 74
76198: PPUSH
76199: CALL_OW 115
// until IsDead ( un ) ;
76203: LD_VAR 0 2
76207: PPUSH
76208: CALL_OW 301
76212: IFFALSE 76160
// end ;
76214: PPOPN 2
76216: END
// every 0 0$1 trigger StreamModeActive and sStu do
76217: LD_EXP 106
76221: PUSH
76222: LD_EXP 145
76226: AND
76227: IFFALSE 76243
76229: GO 76231
76231: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76232: LD_STRING displayStucuk();
76234: PPUSH
76235: CALL_OW 559
// ResetFog ;
76239: CALL_OW 335
// end ;
76243: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76244: LD_EXP 106
76248: PUSH
76249: LD_EXP 138
76253: AND
76254: IFFALSE 76395
76256: GO 76258
76258: DISABLE
76259: LD_INT 0
76261: PPUSH
76262: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76263: LD_ADDR_VAR 0 2
76267: PUSH
76268: LD_INT 22
76270: PUSH
76271: LD_OWVAR 2
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: PUSH
76280: LD_INT 21
76282: PUSH
76283: LD_INT 1
76285: PUSH
76286: EMPTY
76287: LIST
76288: LIST
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PPUSH
76294: CALL_OW 69
76298: ST_TO_ADDR
// if not tmp then
76299: LD_VAR 0 2
76303: NOT
76304: IFFALSE 76308
// exit ;
76306: GO 76395
// un := tmp [ rand ( 1 , tmp ) ] ;
76308: LD_ADDR_VAR 0 1
76312: PUSH
76313: LD_VAR 0 2
76317: PUSH
76318: LD_INT 1
76320: PPUSH
76321: LD_VAR 0 2
76325: PPUSH
76326: CALL_OW 12
76330: ARRAY
76331: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76332: LD_VAR 0 1
76336: PPUSH
76337: LD_INT 0
76339: PPUSH
76340: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76344: LD_VAR 0 1
76348: PPUSH
76349: LD_OWVAR 3
76353: PUSH
76354: LD_VAR 0 1
76358: DIFF
76359: PPUSH
76360: LD_VAR 0 1
76364: PPUSH
76365: CALL_OW 74
76369: PPUSH
76370: CALL_OW 115
// wait ( 0 0$20 ) ;
76374: LD_INT 700
76376: PPUSH
76377: CALL_OW 67
// SetSide ( un , your_side ) ;
76381: LD_VAR 0 1
76385: PPUSH
76386: LD_OWVAR 2
76390: PPUSH
76391: CALL_OW 235
// end ;
76395: PPOPN 2
76397: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76398: LD_EXP 106
76402: PUSH
76403: LD_EXP 139
76407: AND
76408: IFFALSE 76514
76410: GO 76412
76412: DISABLE
76413: LD_INT 0
76415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76416: LD_ADDR_VAR 0 1
76420: PUSH
76421: LD_INT 22
76423: PUSH
76424: LD_OWVAR 2
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 2
76435: PUSH
76436: LD_INT 30
76438: PUSH
76439: LD_INT 0
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 30
76448: PUSH
76449: LD_INT 1
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: LIST
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: PPUSH
76465: CALL_OW 69
76469: ST_TO_ADDR
// if not depot then
76470: LD_VAR 0 1
76474: NOT
76475: IFFALSE 76479
// exit ;
76477: GO 76514
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76479: LD_VAR 0 1
76483: PUSH
76484: LD_INT 1
76486: ARRAY
76487: PPUSH
76488: CALL_OW 250
76492: PPUSH
76493: LD_VAR 0 1
76497: PUSH
76498: LD_INT 1
76500: ARRAY
76501: PPUSH
76502: CALL_OW 251
76506: PPUSH
76507: LD_INT 70
76509: PPUSH
76510: CALL_OW 495
// end ;
76514: PPOPN 1
76516: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76517: LD_EXP 106
76521: PUSH
76522: LD_EXP 140
76526: AND
76527: IFFALSE 76738
76529: GO 76531
76531: DISABLE
76532: LD_INT 0
76534: PPUSH
76535: PPUSH
76536: PPUSH
76537: PPUSH
76538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76539: LD_ADDR_VAR 0 5
76543: PUSH
76544: LD_INT 22
76546: PUSH
76547: LD_OWVAR 2
76551: PUSH
76552: EMPTY
76553: LIST
76554: LIST
76555: PUSH
76556: LD_INT 21
76558: PUSH
76559: LD_INT 1
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PPUSH
76570: CALL_OW 69
76574: ST_TO_ADDR
// if not tmp then
76575: LD_VAR 0 5
76579: NOT
76580: IFFALSE 76584
// exit ;
76582: GO 76738
// for i in tmp do
76584: LD_ADDR_VAR 0 1
76588: PUSH
76589: LD_VAR 0 5
76593: PUSH
76594: FOR_IN
76595: IFFALSE 76736
// begin d := rand ( 0 , 5 ) ;
76597: LD_ADDR_VAR 0 4
76601: PUSH
76602: LD_INT 0
76604: PPUSH
76605: LD_INT 5
76607: PPUSH
76608: CALL_OW 12
76612: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76613: LD_ADDR_VAR 0 2
76617: PUSH
76618: LD_VAR 0 1
76622: PPUSH
76623: CALL_OW 250
76627: PPUSH
76628: LD_VAR 0 4
76632: PPUSH
76633: LD_INT 3
76635: PPUSH
76636: LD_INT 12
76638: PPUSH
76639: CALL_OW 12
76643: PPUSH
76644: CALL_OW 272
76648: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76649: LD_ADDR_VAR 0 3
76653: PUSH
76654: LD_VAR 0 1
76658: PPUSH
76659: CALL_OW 251
76663: PPUSH
76664: LD_VAR 0 4
76668: PPUSH
76669: LD_INT 3
76671: PPUSH
76672: LD_INT 12
76674: PPUSH
76675: CALL_OW 12
76679: PPUSH
76680: CALL_OW 273
76684: ST_TO_ADDR
// if ValidHex ( x , y ) then
76685: LD_VAR 0 2
76689: PPUSH
76690: LD_VAR 0 3
76694: PPUSH
76695: CALL_OW 488
76699: IFFALSE 76734
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76701: LD_VAR 0 1
76705: PPUSH
76706: LD_VAR 0 2
76710: PPUSH
76711: LD_VAR 0 3
76715: PPUSH
76716: LD_INT 3
76718: PPUSH
76719: LD_INT 6
76721: PPUSH
76722: CALL_OW 12
76726: PPUSH
76727: LD_INT 1
76729: PPUSH
76730: CALL_OW 483
// end ;
76734: GO 76594
76736: POP
76737: POP
// end ;
76738: PPOPN 5
76740: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76741: LD_EXP 106
76745: PUSH
76746: LD_EXP 141
76750: AND
76751: IFFALSE 76845
76753: GO 76755
76755: DISABLE
76756: LD_INT 0
76758: PPUSH
76759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76760: LD_ADDR_VAR 0 2
76764: PUSH
76765: LD_INT 22
76767: PUSH
76768: LD_OWVAR 2
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 32
76779: PUSH
76780: LD_INT 1
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 21
76789: PUSH
76790: LD_INT 2
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: LIST
76801: PPUSH
76802: CALL_OW 69
76806: ST_TO_ADDR
// if not tmp then
76807: LD_VAR 0 2
76811: NOT
76812: IFFALSE 76816
// exit ;
76814: GO 76845
// for i in tmp do
76816: LD_ADDR_VAR 0 1
76820: PUSH
76821: LD_VAR 0 2
76825: PUSH
76826: FOR_IN
76827: IFFALSE 76843
// SetFuel ( i , 0 ) ;
76829: LD_VAR 0 1
76833: PPUSH
76834: LD_INT 0
76836: PPUSH
76837: CALL_OW 240
76841: GO 76826
76843: POP
76844: POP
// end ;
76845: PPOPN 2
76847: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76848: LD_EXP 106
76852: PUSH
76853: LD_EXP 142
76857: AND
76858: IFFALSE 76924
76860: GO 76862
76862: DISABLE
76863: LD_INT 0
76865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76866: LD_ADDR_VAR 0 1
76870: PUSH
76871: LD_INT 22
76873: PUSH
76874: LD_OWVAR 2
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 30
76885: PUSH
76886: LD_INT 29
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PPUSH
76897: CALL_OW 69
76901: ST_TO_ADDR
// if not tmp then
76902: LD_VAR 0 1
76906: NOT
76907: IFFALSE 76911
// exit ;
76909: GO 76924
// DestroyUnit ( tmp [ 1 ] ) ;
76911: LD_VAR 0 1
76915: PUSH
76916: LD_INT 1
76918: ARRAY
76919: PPUSH
76920: CALL_OW 65
// end ;
76924: PPOPN 1
76926: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76927: LD_EXP 106
76931: PUSH
76932: LD_EXP 144
76936: AND
76937: IFFALSE 77066
76939: GO 76941
76941: DISABLE
76942: LD_INT 0
76944: PPUSH
// begin uc_side := 0 ;
76945: LD_ADDR_OWVAR 20
76949: PUSH
76950: LD_INT 0
76952: ST_TO_ADDR
// uc_nation := nation_arabian ;
76953: LD_ADDR_OWVAR 21
76957: PUSH
76958: LD_INT 2
76960: ST_TO_ADDR
// hc_gallery :=  ;
76961: LD_ADDR_OWVAR 33
76965: PUSH
76966: LD_STRING 
76968: ST_TO_ADDR
// hc_name :=  ;
76969: LD_ADDR_OWVAR 26
76973: PUSH
76974: LD_STRING 
76976: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76977: LD_INT 1
76979: PPUSH
76980: LD_INT 11
76982: PPUSH
76983: LD_INT 10
76985: PPUSH
76986: CALL_OW 380
// un := CreateHuman ;
76990: LD_ADDR_VAR 0 1
76994: PUSH
76995: CALL_OW 44
76999: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77000: LD_VAR 0 1
77004: PPUSH
77005: LD_INT 1
77007: PPUSH
77008: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77012: LD_INT 35
77014: PPUSH
77015: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77019: LD_VAR 0 1
77023: PPUSH
77024: LD_INT 22
77026: PUSH
77027: LD_OWVAR 2
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PPUSH
77036: CALL_OW 69
77040: PPUSH
77041: LD_VAR 0 1
77045: PPUSH
77046: CALL_OW 74
77050: PPUSH
77051: CALL_OW 115
// until IsDead ( un ) ;
77055: LD_VAR 0 1
77059: PPUSH
77060: CALL_OW 301
77064: IFFALSE 77012
// end ;
77066: PPOPN 1
77068: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77069: LD_EXP 106
77073: PUSH
77074: LD_EXP 146
77078: AND
77079: IFFALSE 77091
77081: GO 77083
77083: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77084: LD_STRING earthquake(getX(game), 0, 32)
77086: PPUSH
77087: CALL_OW 559
77091: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77092: LD_EXP 106
77096: PUSH
77097: LD_EXP 147
77101: AND
77102: IFFALSE 77193
77104: GO 77106
77106: DISABLE
77107: LD_INT 0
77109: PPUSH
// begin enable ;
77110: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77111: LD_ADDR_VAR 0 1
77115: PUSH
77116: LD_INT 22
77118: PUSH
77119: LD_OWVAR 2
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: PUSH
77128: LD_INT 21
77130: PUSH
77131: LD_INT 2
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: PUSH
77138: LD_INT 33
77140: PUSH
77141: LD_INT 3
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: LIST
77152: PPUSH
77153: CALL_OW 69
77157: ST_TO_ADDR
// if not tmp then
77158: LD_VAR 0 1
77162: NOT
77163: IFFALSE 77167
// exit ;
77165: GO 77193
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77167: LD_VAR 0 1
77171: PUSH
77172: LD_INT 1
77174: PPUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: CALL_OW 12
77184: ARRAY
77185: PPUSH
77186: LD_INT 1
77188: PPUSH
77189: CALL_OW 234
// end ;
77193: PPOPN 1
77195: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77196: LD_EXP 106
77200: PUSH
77201: LD_EXP 148
77205: AND
77206: IFFALSE 77347
77208: GO 77210
77210: DISABLE
77211: LD_INT 0
77213: PPUSH
77214: PPUSH
77215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77216: LD_ADDR_VAR 0 3
77220: PUSH
77221: LD_INT 22
77223: PUSH
77224: LD_OWVAR 2
77228: PUSH
77229: EMPTY
77230: LIST
77231: LIST
77232: PUSH
77233: LD_INT 25
77235: PUSH
77236: LD_INT 1
77238: PUSH
77239: EMPTY
77240: LIST
77241: LIST
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PPUSH
77247: CALL_OW 69
77251: ST_TO_ADDR
// if not tmp then
77252: LD_VAR 0 3
77256: NOT
77257: IFFALSE 77261
// exit ;
77259: GO 77347
// un := tmp [ rand ( 1 , tmp ) ] ;
77261: LD_ADDR_VAR 0 2
77265: PUSH
77266: LD_VAR 0 3
77270: PUSH
77271: LD_INT 1
77273: PPUSH
77274: LD_VAR 0 3
77278: PPUSH
77279: CALL_OW 12
77283: ARRAY
77284: ST_TO_ADDR
// if Crawls ( un ) then
77285: LD_VAR 0 2
77289: PPUSH
77290: CALL_OW 318
77294: IFFALSE 77305
// ComWalk ( un ) ;
77296: LD_VAR 0 2
77300: PPUSH
77301: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77305: LD_VAR 0 2
77309: PPUSH
77310: LD_INT 9
77312: PPUSH
77313: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77317: LD_INT 28
77319: PPUSH
77320: LD_OWVAR 2
77324: PPUSH
77325: LD_INT 2
77327: PPUSH
77328: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77332: LD_INT 29
77334: PPUSH
77335: LD_OWVAR 2
77339: PPUSH
77340: LD_INT 2
77342: PPUSH
77343: CALL_OW 322
// end ;
77347: PPOPN 3
77349: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77350: LD_EXP 106
77354: PUSH
77355: LD_EXP 149
77359: AND
77360: IFFALSE 77471
77362: GO 77364
77364: DISABLE
77365: LD_INT 0
77367: PPUSH
77368: PPUSH
77369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77370: LD_ADDR_VAR 0 3
77374: PUSH
77375: LD_INT 22
77377: PUSH
77378: LD_OWVAR 2
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 25
77389: PUSH
77390: LD_INT 1
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PPUSH
77401: CALL_OW 69
77405: ST_TO_ADDR
// if not tmp then
77406: LD_VAR 0 3
77410: NOT
77411: IFFALSE 77415
// exit ;
77413: GO 77471
// un := tmp [ rand ( 1 , tmp ) ] ;
77415: LD_ADDR_VAR 0 2
77419: PUSH
77420: LD_VAR 0 3
77424: PUSH
77425: LD_INT 1
77427: PPUSH
77428: LD_VAR 0 3
77432: PPUSH
77433: CALL_OW 12
77437: ARRAY
77438: ST_TO_ADDR
// if Crawls ( un ) then
77439: LD_VAR 0 2
77443: PPUSH
77444: CALL_OW 318
77448: IFFALSE 77459
// ComWalk ( un ) ;
77450: LD_VAR 0 2
77454: PPUSH
77455: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77459: LD_VAR 0 2
77463: PPUSH
77464: LD_INT 8
77466: PPUSH
77467: CALL_OW 336
// end ;
77471: PPOPN 3
77473: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77474: LD_EXP 106
77478: PUSH
77479: LD_EXP 150
77483: AND
77484: IFFALSE 77628
77486: GO 77488
77488: DISABLE
77489: LD_INT 0
77491: PPUSH
77492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77493: LD_ADDR_VAR 0 2
77497: PUSH
77498: LD_INT 22
77500: PUSH
77501: LD_OWVAR 2
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 21
77512: PUSH
77513: LD_INT 2
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: LD_INT 2
77522: PUSH
77523: LD_INT 34
77525: PUSH
77526: LD_INT 12
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 34
77535: PUSH
77536: LD_INT 51
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 34
77545: PUSH
77546: LD_INT 32
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: LIST
77563: PPUSH
77564: CALL_OW 69
77568: ST_TO_ADDR
// if not tmp then
77569: LD_VAR 0 2
77573: NOT
77574: IFFALSE 77578
// exit ;
77576: GO 77628
// for i in tmp do
77578: LD_ADDR_VAR 0 1
77582: PUSH
77583: LD_VAR 0 2
77587: PUSH
77588: FOR_IN
77589: IFFALSE 77626
// if GetCargo ( i , mat_artifact ) = 0 then
77591: LD_VAR 0 1
77595: PPUSH
77596: LD_INT 4
77598: PPUSH
77599: CALL_OW 289
77603: PUSH
77604: LD_INT 0
77606: EQUAL
77607: IFFALSE 77624
// SetCargo ( i , mat_siberit , 100 ) ;
77609: LD_VAR 0 1
77613: PPUSH
77614: LD_INT 3
77616: PPUSH
77617: LD_INT 100
77619: PPUSH
77620: CALL_OW 290
77624: GO 77588
77626: POP
77627: POP
// end ;
77628: PPOPN 2
77630: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77631: LD_EXP 106
77635: PUSH
77636: LD_EXP 151
77640: AND
77641: IFFALSE 77824
77643: GO 77645
77645: DISABLE
77646: LD_INT 0
77648: PPUSH
77649: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77650: LD_ADDR_VAR 0 2
77654: PUSH
77655: LD_INT 22
77657: PUSH
77658: LD_OWVAR 2
77662: PUSH
77663: EMPTY
77664: LIST
77665: LIST
77666: PPUSH
77667: CALL_OW 69
77671: ST_TO_ADDR
// if not tmp then
77672: LD_VAR 0 2
77676: NOT
77677: IFFALSE 77681
// exit ;
77679: GO 77824
// for i := 1 to 2 do
77681: LD_ADDR_VAR 0 1
77685: PUSH
77686: DOUBLE
77687: LD_INT 1
77689: DEC
77690: ST_TO_ADDR
77691: LD_INT 2
77693: PUSH
77694: FOR_TO
77695: IFFALSE 77822
// begin uc_side := your_side ;
77697: LD_ADDR_OWVAR 20
77701: PUSH
77702: LD_OWVAR 2
77706: ST_TO_ADDR
// uc_nation := nation_american ;
77707: LD_ADDR_OWVAR 21
77711: PUSH
77712: LD_INT 1
77714: ST_TO_ADDR
// vc_chassis := us_morphling ;
77715: LD_ADDR_OWVAR 37
77719: PUSH
77720: LD_INT 5
77722: ST_TO_ADDR
// vc_engine := engine_siberite ;
77723: LD_ADDR_OWVAR 39
77727: PUSH
77728: LD_INT 3
77730: ST_TO_ADDR
// vc_control := control_computer ;
77731: LD_ADDR_OWVAR 38
77735: PUSH
77736: LD_INT 3
77738: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77739: LD_ADDR_OWVAR 40
77743: PUSH
77744: LD_INT 10
77746: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77747: LD_VAR 0 2
77751: PUSH
77752: LD_INT 1
77754: ARRAY
77755: PPUSH
77756: CALL_OW 310
77760: NOT
77761: IFFALSE 77808
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77763: CALL_OW 45
77767: PPUSH
77768: LD_VAR 0 2
77772: PUSH
77773: LD_INT 1
77775: ARRAY
77776: PPUSH
77777: CALL_OW 250
77781: PPUSH
77782: LD_VAR 0 2
77786: PUSH
77787: LD_INT 1
77789: ARRAY
77790: PPUSH
77791: CALL_OW 251
77795: PPUSH
77796: LD_INT 12
77798: PPUSH
77799: LD_INT 1
77801: PPUSH
77802: CALL_OW 50
77806: GO 77820
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77808: CALL_OW 45
77812: PPUSH
77813: LD_INT 1
77815: PPUSH
77816: CALL_OW 51
// end ;
77820: GO 77694
77822: POP
77823: POP
// end ;
77824: PPOPN 2
77826: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77827: LD_EXP 106
77831: PUSH
77832: LD_EXP 152
77836: AND
77837: IFFALSE 78059
77839: GO 77841
77841: DISABLE
77842: LD_INT 0
77844: PPUSH
77845: PPUSH
77846: PPUSH
77847: PPUSH
77848: PPUSH
77849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77850: LD_ADDR_VAR 0 6
77854: PUSH
77855: LD_INT 22
77857: PUSH
77858: LD_OWVAR 2
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 21
77869: PUSH
77870: LD_INT 1
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: LD_INT 3
77879: PUSH
77880: LD_INT 23
77882: PUSH
77883: LD_INT 0
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: PUSH
77894: EMPTY
77895: LIST
77896: LIST
77897: LIST
77898: PPUSH
77899: CALL_OW 69
77903: ST_TO_ADDR
// if not tmp then
77904: LD_VAR 0 6
77908: NOT
77909: IFFALSE 77913
// exit ;
77911: GO 78059
// s1 := rand ( 1 , 4 ) ;
77913: LD_ADDR_VAR 0 2
77917: PUSH
77918: LD_INT 1
77920: PPUSH
77921: LD_INT 4
77923: PPUSH
77924: CALL_OW 12
77928: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77929: LD_ADDR_VAR 0 4
77933: PUSH
77934: LD_VAR 0 6
77938: PUSH
77939: LD_INT 1
77941: ARRAY
77942: PPUSH
77943: LD_VAR 0 2
77947: PPUSH
77948: CALL_OW 259
77952: ST_TO_ADDR
// if s1 = 1 then
77953: LD_VAR 0 2
77957: PUSH
77958: LD_INT 1
77960: EQUAL
77961: IFFALSE 77981
// s2 := rand ( 2 , 4 ) else
77963: LD_ADDR_VAR 0 3
77967: PUSH
77968: LD_INT 2
77970: PPUSH
77971: LD_INT 4
77973: PPUSH
77974: CALL_OW 12
77978: ST_TO_ADDR
77979: GO 77989
// s2 := 1 ;
77981: LD_ADDR_VAR 0 3
77985: PUSH
77986: LD_INT 1
77988: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77989: LD_ADDR_VAR 0 5
77993: PUSH
77994: LD_VAR 0 6
77998: PUSH
77999: LD_INT 1
78001: ARRAY
78002: PPUSH
78003: LD_VAR 0 3
78007: PPUSH
78008: CALL_OW 259
78012: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78013: LD_VAR 0 6
78017: PUSH
78018: LD_INT 1
78020: ARRAY
78021: PPUSH
78022: LD_VAR 0 2
78026: PPUSH
78027: LD_VAR 0 5
78031: PPUSH
78032: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78036: LD_VAR 0 6
78040: PUSH
78041: LD_INT 1
78043: ARRAY
78044: PPUSH
78045: LD_VAR 0 3
78049: PPUSH
78050: LD_VAR 0 4
78054: PPUSH
78055: CALL_OW 237
// end ;
78059: PPOPN 6
78061: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78062: LD_EXP 106
78066: PUSH
78067: LD_EXP 153
78071: AND
78072: IFFALSE 78151
78074: GO 78076
78076: DISABLE
78077: LD_INT 0
78079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78080: LD_ADDR_VAR 0 1
78084: PUSH
78085: LD_INT 22
78087: PUSH
78088: LD_OWVAR 2
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 30
78099: PUSH
78100: LD_INT 3
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: PPUSH
78111: CALL_OW 69
78115: ST_TO_ADDR
// if not tmp then
78116: LD_VAR 0 1
78120: NOT
78121: IFFALSE 78125
// exit ;
78123: GO 78151
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78125: LD_VAR 0 1
78129: PUSH
78130: LD_INT 1
78132: PPUSH
78133: LD_VAR 0 1
78137: PPUSH
78138: CALL_OW 12
78142: ARRAY
78143: PPUSH
78144: LD_INT 1
78146: PPUSH
78147: CALL_OW 234
// end ;
78151: PPOPN 1
78153: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78154: LD_EXP 106
78158: PUSH
78159: LD_EXP 154
78163: AND
78164: IFFALSE 78276
78166: GO 78168
78168: DISABLE
78169: LD_INT 0
78171: PPUSH
78172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78173: LD_ADDR_VAR 0 2
78177: PUSH
78178: LD_INT 22
78180: PUSH
78181: LD_OWVAR 2
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PUSH
78190: LD_INT 2
78192: PUSH
78193: LD_INT 30
78195: PUSH
78196: LD_INT 27
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: PUSH
78203: LD_INT 30
78205: PUSH
78206: LD_INT 26
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: LD_INT 30
78215: PUSH
78216: LD_INT 28
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: PUSH
78229: EMPTY
78230: LIST
78231: LIST
78232: PPUSH
78233: CALL_OW 69
78237: ST_TO_ADDR
// if not tmp then
78238: LD_VAR 0 2
78242: NOT
78243: IFFALSE 78247
// exit ;
78245: GO 78276
// for i in tmp do
78247: LD_ADDR_VAR 0 1
78251: PUSH
78252: LD_VAR 0 2
78256: PUSH
78257: FOR_IN
78258: IFFALSE 78274
// SetLives ( i , 1 ) ;
78260: LD_VAR 0 1
78264: PPUSH
78265: LD_INT 1
78267: PPUSH
78268: CALL_OW 234
78272: GO 78257
78274: POP
78275: POP
// end ;
78276: PPOPN 2
78278: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78279: LD_EXP 106
78283: PUSH
78284: LD_EXP 155
78288: AND
78289: IFFALSE 78563
78291: GO 78293
78293: DISABLE
78294: LD_INT 0
78296: PPUSH
78297: PPUSH
78298: PPUSH
// begin i := rand ( 1 , 7 ) ;
78299: LD_ADDR_VAR 0 1
78303: PUSH
78304: LD_INT 1
78306: PPUSH
78307: LD_INT 7
78309: PPUSH
78310: CALL_OW 12
78314: ST_TO_ADDR
// case i of 1 :
78315: LD_VAR 0 1
78319: PUSH
78320: LD_INT 1
78322: DOUBLE
78323: EQUAL
78324: IFTRUE 78328
78326: GO 78338
78328: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78329: LD_STRING earthquake(getX(game), 0, 32)
78331: PPUSH
78332: CALL_OW 559
78336: GO 78563
78338: LD_INT 2
78340: DOUBLE
78341: EQUAL
78342: IFTRUE 78346
78344: GO 78360
78346: POP
// begin ToLua ( displayStucuk(); ) ;
78347: LD_STRING displayStucuk();
78349: PPUSH
78350: CALL_OW 559
// ResetFog ;
78354: CALL_OW 335
// end ; 3 :
78358: GO 78563
78360: LD_INT 3
78362: DOUBLE
78363: EQUAL
78364: IFTRUE 78368
78366: GO 78472
78368: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78369: LD_ADDR_VAR 0 2
78373: PUSH
78374: LD_INT 22
78376: PUSH
78377: LD_OWVAR 2
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 25
78388: PUSH
78389: LD_INT 1
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: PPUSH
78400: CALL_OW 69
78404: ST_TO_ADDR
// if not tmp then
78405: LD_VAR 0 2
78409: NOT
78410: IFFALSE 78414
// exit ;
78412: GO 78563
// un := tmp [ rand ( 1 , tmp ) ] ;
78414: LD_ADDR_VAR 0 3
78418: PUSH
78419: LD_VAR 0 2
78423: PUSH
78424: LD_INT 1
78426: PPUSH
78427: LD_VAR 0 2
78431: PPUSH
78432: CALL_OW 12
78436: ARRAY
78437: ST_TO_ADDR
// if Crawls ( un ) then
78438: LD_VAR 0 3
78442: PPUSH
78443: CALL_OW 318
78447: IFFALSE 78458
// ComWalk ( un ) ;
78449: LD_VAR 0 3
78453: PPUSH
78454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78458: LD_VAR 0 3
78462: PPUSH
78463: LD_INT 8
78465: PPUSH
78466: CALL_OW 336
// end ; 4 :
78470: GO 78563
78472: LD_INT 4
78474: DOUBLE
78475: EQUAL
78476: IFTRUE 78480
78478: GO 78541
78480: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78481: LD_ADDR_VAR 0 2
78485: PUSH
78486: LD_INT 22
78488: PUSH
78489: LD_OWVAR 2
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: PUSH
78498: LD_INT 30
78500: PUSH
78501: LD_INT 29
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PPUSH
78512: CALL_OW 69
78516: ST_TO_ADDR
// if not tmp then
78517: LD_VAR 0 2
78521: NOT
78522: IFFALSE 78526
// exit ;
78524: GO 78563
// DestroyUnit ( tmp [ 1 ] ) ;
78526: LD_VAR 0 2
78530: PUSH
78531: LD_INT 1
78533: ARRAY
78534: PPUSH
78535: CALL_OW 65
// end ; 5 .. 7 :
78539: GO 78563
78541: LD_INT 5
78543: DOUBLE
78544: GREATEREQUAL
78545: IFFALSE 78553
78547: LD_INT 7
78549: DOUBLE
78550: LESSEQUAL
78551: IFTRUE 78555
78553: GO 78562
78555: POP
// StreamSibBomb ; end ;
78556: CALL 74813 0 0
78560: GO 78563
78562: POP
// end ;
78563: PPOPN 3
78565: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78566: LD_EXP 106
78570: PUSH
78571: LD_EXP 156
78575: AND
78576: IFFALSE 78732
78578: GO 78580
78580: DISABLE
78581: LD_INT 0
78583: PPUSH
78584: PPUSH
78585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78586: LD_ADDR_VAR 0 2
78590: PUSH
78591: LD_INT 81
78593: PUSH
78594: LD_OWVAR 2
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: PUSH
78603: LD_INT 2
78605: PUSH
78606: LD_INT 21
78608: PUSH
78609: LD_INT 1
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: LD_INT 21
78618: PUSH
78619: LD_INT 2
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: LIST
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PPUSH
78635: CALL_OW 69
78639: ST_TO_ADDR
// if not tmp then
78640: LD_VAR 0 2
78644: NOT
78645: IFFALSE 78649
// exit ;
78647: GO 78732
// p := 0 ;
78649: LD_ADDR_VAR 0 3
78653: PUSH
78654: LD_INT 0
78656: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78657: LD_INT 35
78659: PPUSH
78660: CALL_OW 67
// p := p + 1 ;
78664: LD_ADDR_VAR 0 3
78668: PUSH
78669: LD_VAR 0 3
78673: PUSH
78674: LD_INT 1
78676: PLUS
78677: ST_TO_ADDR
// for i in tmp do
78678: LD_ADDR_VAR 0 1
78682: PUSH
78683: LD_VAR 0 2
78687: PUSH
78688: FOR_IN
78689: IFFALSE 78720
// if GetLives ( i ) < 1000 then
78691: LD_VAR 0 1
78695: PPUSH
78696: CALL_OW 256
78700: PUSH
78701: LD_INT 1000
78703: LESS
78704: IFFALSE 78718
// SetLives ( i , 1000 ) ;
78706: LD_VAR 0 1
78710: PPUSH
78711: LD_INT 1000
78713: PPUSH
78714: CALL_OW 234
78718: GO 78688
78720: POP
78721: POP
// until p > 20 ;
78722: LD_VAR 0 3
78726: PUSH
78727: LD_INT 20
78729: GREATER
78730: IFFALSE 78657
// end ;
78732: PPOPN 3
78734: END
// every 0 0$1 trigger StreamModeActive and sTime do
78735: LD_EXP 106
78739: PUSH
78740: LD_EXP 157
78744: AND
78745: IFFALSE 78780
78747: GO 78749
78749: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78750: LD_INT 28
78752: PPUSH
78753: LD_OWVAR 2
78757: PPUSH
78758: LD_INT 2
78760: PPUSH
78761: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78765: LD_INT 30
78767: PPUSH
78768: LD_OWVAR 2
78772: PPUSH
78773: LD_INT 2
78775: PPUSH
78776: CALL_OW 322
// end ;
78780: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78781: LD_EXP 106
78785: PUSH
78786: LD_EXP 158
78790: AND
78791: IFFALSE 78912
78793: GO 78795
78795: DISABLE
78796: LD_INT 0
78798: PPUSH
78799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78800: LD_ADDR_VAR 0 2
78804: PUSH
78805: LD_INT 22
78807: PUSH
78808: LD_OWVAR 2
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PUSH
78817: LD_INT 21
78819: PUSH
78820: LD_INT 1
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PUSH
78827: LD_INT 3
78829: PUSH
78830: LD_INT 23
78832: PUSH
78833: LD_INT 0
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: LIST
78848: PPUSH
78849: CALL_OW 69
78853: ST_TO_ADDR
// if not tmp then
78854: LD_VAR 0 2
78858: NOT
78859: IFFALSE 78863
// exit ;
78861: GO 78912
// for i in tmp do
78863: LD_ADDR_VAR 0 1
78867: PUSH
78868: LD_VAR 0 2
78872: PUSH
78873: FOR_IN
78874: IFFALSE 78910
// begin if Crawls ( i ) then
78876: LD_VAR 0 1
78880: PPUSH
78881: CALL_OW 318
78885: IFFALSE 78896
// ComWalk ( i ) ;
78887: LD_VAR 0 1
78891: PPUSH
78892: CALL_OW 138
// SetClass ( i , 2 ) ;
78896: LD_VAR 0 1
78900: PPUSH
78901: LD_INT 2
78903: PPUSH
78904: CALL_OW 336
// end ;
78908: GO 78873
78910: POP
78911: POP
// end ;
78912: PPOPN 2
78914: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78915: LD_EXP 106
78919: PUSH
78920: LD_EXP 159
78924: AND
78925: IFFALSE 79206
78927: GO 78929
78929: DISABLE
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
78934: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78935: LD_OWVAR 2
78939: PPUSH
78940: LD_INT 9
78942: PPUSH
78943: LD_INT 1
78945: PPUSH
78946: LD_INT 1
78948: PPUSH
78949: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78953: LD_INT 9
78955: PPUSH
78956: LD_OWVAR 2
78960: PPUSH
78961: CALL_OW 343
// uc_side := 9 ;
78965: LD_ADDR_OWVAR 20
78969: PUSH
78970: LD_INT 9
78972: ST_TO_ADDR
// uc_nation := 2 ;
78973: LD_ADDR_OWVAR 21
78977: PUSH
78978: LD_INT 2
78980: ST_TO_ADDR
// hc_name := Dark Warrior ;
78981: LD_ADDR_OWVAR 26
78985: PUSH
78986: LD_STRING Dark Warrior
78988: ST_TO_ADDR
// hc_gallery :=  ;
78989: LD_ADDR_OWVAR 33
78993: PUSH
78994: LD_STRING 
78996: ST_TO_ADDR
// hc_noskilllimit := true ;
78997: LD_ADDR_OWVAR 76
79001: PUSH
79002: LD_INT 1
79004: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79005: LD_ADDR_OWVAR 31
79009: PUSH
79010: LD_INT 30
79012: PUSH
79013: LD_INT 30
79015: PUSH
79016: LD_INT 30
79018: PUSH
79019: LD_INT 30
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: ST_TO_ADDR
// un := CreateHuman ;
79028: LD_ADDR_VAR 0 3
79032: PUSH
79033: CALL_OW 44
79037: ST_TO_ADDR
// hc_noskilllimit := false ;
79038: LD_ADDR_OWVAR 76
79042: PUSH
79043: LD_INT 0
79045: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79046: LD_VAR 0 3
79050: PPUSH
79051: LD_INT 1
79053: PPUSH
79054: CALL_OW 51
// p := 0 ;
79058: LD_ADDR_VAR 0 2
79062: PUSH
79063: LD_INT 0
79065: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79066: LD_INT 35
79068: PPUSH
79069: CALL_OW 67
// p := p + 1 ;
79073: LD_ADDR_VAR 0 2
79077: PUSH
79078: LD_VAR 0 2
79082: PUSH
79083: LD_INT 1
79085: PLUS
79086: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79087: LD_VAR 0 3
79091: PPUSH
79092: CALL_OW 256
79096: PUSH
79097: LD_INT 1000
79099: LESS
79100: IFFALSE 79114
// SetLives ( un , 1000 ) ;
79102: LD_VAR 0 3
79106: PPUSH
79107: LD_INT 1000
79109: PPUSH
79110: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79114: LD_VAR 0 3
79118: PPUSH
79119: LD_INT 81
79121: PUSH
79122: LD_OWVAR 2
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: PUSH
79131: LD_INT 91
79133: PUSH
79134: LD_VAR 0 3
79138: PUSH
79139: LD_INT 30
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: LIST
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PPUSH
79151: CALL_OW 69
79155: PPUSH
79156: LD_VAR 0 3
79160: PPUSH
79161: CALL_OW 74
79165: PPUSH
79166: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
79170: LD_VAR 0 2
79174: PUSH
79175: LD_INT 60
79177: GREATER
79178: PUSH
79179: LD_VAR 0 3
79183: PPUSH
79184: CALL_OW 301
79188: OR
79189: IFFALSE 79066
// if un then
79191: LD_VAR 0 3
79195: IFFALSE 79206
// RemoveUnit ( un ) ;
79197: LD_VAR 0 3
79201: PPUSH
79202: CALL_OW 64
// end ;
79206: PPOPN 3
79208: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79209: LD_INT 0
79211: PPUSH
79212: PPUSH
79213: PPUSH
79214: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79215: LD_ADDR_VAR 0 4
79219: PUSH
79220: LD_INT 22
79222: PUSH
79223: LD_OWVAR 2
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: LD_INT 2
79234: PUSH
79235: LD_INT 30
79237: PUSH
79238: LD_INT 0
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: LD_INT 30
79247: PUSH
79248: LD_INT 1
79250: PUSH
79251: EMPTY
79252: LIST
79253: LIST
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: LIST
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PPUSH
79264: CALL_OW 69
79268: ST_TO_ADDR
// if not tmp then
79269: LD_VAR 0 4
79273: NOT
79274: IFFALSE 79278
// exit ;
79276: GO 79337
// for i in tmp do
79278: LD_ADDR_VAR 0 2
79282: PUSH
79283: LD_VAR 0 4
79287: PUSH
79288: FOR_IN
79289: IFFALSE 79335
// for j = 1 to 3 do
79291: LD_ADDR_VAR 0 3
79295: PUSH
79296: DOUBLE
79297: LD_INT 1
79299: DEC
79300: ST_TO_ADDR
79301: LD_INT 3
79303: PUSH
79304: FOR_TO
79305: IFFALSE 79331
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79307: LD_VAR 0 2
79311: PPUSH
79312: CALL_OW 274
79316: PPUSH
79317: LD_VAR 0 3
79321: PPUSH
79322: LD_INT 99999
79324: PPUSH
79325: CALL_OW 277
79329: GO 79304
79331: POP
79332: POP
79333: GO 79288
79335: POP
79336: POP
// end ;
79337: LD_VAR 0 1
79341: RET
// export function hHackSetLevel10 ; var i , j ; begin
79342: LD_INT 0
79344: PPUSH
79345: PPUSH
79346: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
79347: LD_ADDR_VAR 0 2
79351: PUSH
79352: LD_INT 21
79354: PUSH
79355: LD_INT 1
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: PPUSH
79362: CALL_OW 69
79366: PUSH
79367: FOR_IN
79368: IFFALSE 79420
// if IsSelected ( i ) then
79370: LD_VAR 0 2
79374: PPUSH
79375: CALL_OW 306
79379: IFFALSE 79418
// begin for j := 1 to 4 do
79381: LD_ADDR_VAR 0 3
79385: PUSH
79386: DOUBLE
79387: LD_INT 1
79389: DEC
79390: ST_TO_ADDR
79391: LD_INT 4
79393: PUSH
79394: FOR_TO
79395: IFFALSE 79416
// SetSkill ( i , j , 10 ) ;
79397: LD_VAR 0 2
79401: PPUSH
79402: LD_VAR 0 3
79406: PPUSH
79407: LD_INT 10
79409: PPUSH
79410: CALL_OW 237
79414: GO 79394
79416: POP
79417: POP
// end ;
79418: GO 79367
79420: POP
79421: POP
// end ;
79422: LD_VAR 0 1
79426: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
79427: LD_INT 0
79429: PPUSH
79430: PPUSH
79431: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
79432: LD_ADDR_VAR 0 2
79436: PUSH
79437: LD_INT 22
79439: PUSH
79440: LD_OWVAR 2
79444: PUSH
79445: EMPTY
79446: LIST
79447: LIST
79448: PUSH
79449: LD_INT 21
79451: PUSH
79452: LD_INT 1
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: EMPTY
79460: LIST
79461: LIST
79462: PPUSH
79463: CALL_OW 69
79467: PUSH
79468: FOR_IN
79469: IFFALSE 79510
// begin for j := 1 to 4 do
79471: LD_ADDR_VAR 0 3
79475: PUSH
79476: DOUBLE
79477: LD_INT 1
79479: DEC
79480: ST_TO_ADDR
79481: LD_INT 4
79483: PUSH
79484: FOR_TO
79485: IFFALSE 79506
// SetSkill ( i , j , 10 ) ;
79487: LD_VAR 0 2
79491: PPUSH
79492: LD_VAR 0 3
79496: PPUSH
79497: LD_INT 10
79499: PPUSH
79500: CALL_OW 237
79504: GO 79484
79506: POP
79507: POP
// end ;
79508: GO 79468
79510: POP
79511: POP
// end ;
79512: LD_VAR 0 1
79516: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
79517: LD_INT 0
79519: PPUSH
// uc_side := your_side ;
79520: LD_ADDR_OWVAR 20
79524: PUSH
79525: LD_OWVAR 2
79529: ST_TO_ADDR
// uc_nation := nation ;
79530: LD_ADDR_OWVAR 21
79534: PUSH
79535: LD_VAR 0 1
79539: ST_TO_ADDR
// InitHc ;
79540: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
79544: LD_INT 0
79546: PPUSH
79547: LD_VAR 0 2
79551: PPUSH
79552: LD_VAR 0 3
79556: PPUSH
79557: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
79561: CALL_OW 44
79565: PPUSH
79566: LD_INT 1
79568: PPUSH
79569: CALL_OW 51
// end ;
79573: LD_VAR 0 4
79577: RET
// export function hHackSpawnVehicle ; begin
79578: LD_INT 0
79580: PPUSH
// uc_side := your_side ;
79581: LD_ADDR_OWVAR 20
79585: PUSH
79586: LD_OWVAR 2
79590: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
79591: LD_ADDR_OWVAR 21
79595: PUSH
79596: LD_INT 1
79598: PPUSH
79599: LD_INT 3
79601: PPUSH
79602: CALL_OW 12
79606: ST_TO_ADDR
// InitVc ;
79607: CALL_OW 20
// case uc_nation of 1 :
79611: LD_OWVAR 21
79615: PUSH
79616: LD_INT 1
79618: DOUBLE
79619: EQUAL
79620: IFTRUE 79624
79622: GO 79768
79624: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
79625: LD_ADDR_OWVAR 37
79629: PUSH
79630: LD_INT 1
79632: PUSH
79633: LD_INT 2
79635: PUSH
79636: LD_INT 3
79638: PUSH
79639: LD_INT 4
79641: PUSH
79642: LD_INT 5
79644: PUSH
79645: EMPTY
79646: LIST
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: PUSH
79652: LD_INT 1
79654: PPUSH
79655: LD_INT 5
79657: PPUSH
79658: CALL_OW 12
79662: ARRAY
79663: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79664: LD_ADDR_OWVAR 39
79668: PUSH
79669: LD_INT 1
79671: PPUSH
79672: LD_INT 3
79674: PPUSH
79675: CALL_OW 12
79679: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
79680: LD_ADDR_OWVAR 38
79684: PUSH
79685: LD_INT 1
79687: PUSH
79688: LD_INT 2
79690: PUSH
79691: LD_INT 3
79693: PUSH
79694: EMPTY
79695: LIST
79696: LIST
79697: LIST
79698: PUSH
79699: LD_INT 1
79701: PPUSH
79702: LD_INT 3
79704: PPUSH
79705: CALL_OW 12
79709: ARRAY
79710: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
79711: LD_ADDR_OWVAR 40
79715: PUSH
79716: LD_INT 2
79718: PUSH
79719: LD_INT 4
79721: PUSH
79722: LD_INT 5
79724: PUSH
79725: LD_INT 3
79727: PUSH
79728: LD_INT 7
79730: PUSH
79731: LD_INT 8
79733: PUSH
79734: LD_INT 9
79736: PUSH
79737: LD_INT 10
79739: PUSH
79740: LD_INT 6
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: LIST
79747: LIST
79748: LIST
79749: LIST
79750: LIST
79751: LIST
79752: LIST
79753: PUSH
79754: LD_INT 1
79756: PPUSH
79757: LD_INT 9
79759: PPUSH
79760: CALL_OW 12
79764: ARRAY
79765: ST_TO_ADDR
// end ; 2 :
79766: GO 80033
79768: LD_INT 2
79770: DOUBLE
79771: EQUAL
79772: IFTRUE 79776
79774: GO 79900
79776: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
79777: LD_ADDR_OWVAR 37
79781: PUSH
79782: LD_INT 11
79784: PUSH
79785: LD_INT 12
79787: PUSH
79788: LD_INT 13
79790: PUSH
79791: LD_INT 14
79793: PUSH
79794: EMPTY
79795: LIST
79796: LIST
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 1
79802: PPUSH
79803: LD_INT 4
79805: PPUSH
79806: CALL_OW 12
79810: ARRAY
79811: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79812: LD_ADDR_OWVAR 39
79816: PUSH
79817: LD_INT 1
79819: PPUSH
79820: LD_INT 3
79822: PPUSH
79823: CALL_OW 12
79827: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
79828: LD_ADDR_OWVAR 38
79832: PUSH
79833: LD_INT 1
79835: PUSH
79836: LD_INT 2
79838: PUSH
79839: LD_INT 5
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 1
79849: PPUSH
79850: LD_INT 3
79852: PPUSH
79853: CALL_OW 12
79857: ARRAY
79858: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
79859: LD_ADDR_OWVAR 40
79863: PUSH
79864: LD_INT 24
79866: PUSH
79867: LD_INT 26
79869: PUSH
79870: LD_INT 27
79872: PUSH
79873: LD_INT 28
79875: PUSH
79876: LD_INT 29
79878: PUSH
79879: EMPTY
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: PUSH
79886: LD_INT 1
79888: PPUSH
79889: LD_INT 5
79891: PPUSH
79892: CALL_OW 12
79896: ARRAY
79897: ST_TO_ADDR
// end ; 3 :
79898: GO 80033
79900: LD_INT 3
79902: DOUBLE
79903: EQUAL
79904: IFTRUE 79908
79906: GO 80032
79908: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
79909: LD_ADDR_OWVAR 37
79913: PUSH
79914: LD_INT 21
79916: PUSH
79917: LD_INT 23
79919: PUSH
79920: LD_INT 22
79922: PUSH
79923: LD_INT 24
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 1
79934: PPUSH
79935: LD_INT 4
79937: PPUSH
79938: CALL_OW 12
79942: ARRAY
79943: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
79944: LD_ADDR_OWVAR 39
79948: PUSH
79949: LD_INT 1
79951: PPUSH
79952: LD_INT 3
79954: PPUSH
79955: CALL_OW 12
79959: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
79960: LD_ADDR_OWVAR 38
79964: PUSH
79965: LD_INT 1
79967: PUSH
79968: LD_INT 3
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 1
79977: PPUSH
79978: LD_INT 2
79980: PPUSH
79981: CALL_OW 12
79985: ARRAY
79986: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
79987: LD_ADDR_OWVAR 40
79991: PUSH
79992: LD_INT 42
79994: PUSH
79995: LD_INT 43
79997: PUSH
79998: LD_INT 44
80000: PUSH
80001: LD_INT 46
80003: PUSH
80004: LD_INT 48
80006: PUSH
80007: LD_INT 47
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: LIST
80017: PUSH
80018: LD_INT 1
80020: PPUSH
80021: LD_INT 6
80023: PPUSH
80024: CALL_OW 12
80028: ARRAY
80029: ST_TO_ADDR
// end ; end ;
80030: GO 80033
80032: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80033: CALL_OW 45
80037: PPUSH
80038: LD_INT 1
80040: PPUSH
80041: CALL_OW 51
// end ;
80045: LD_VAR 0 1
80049: RET
// export hInvincible ; every 1 do
80050: GO 80052
80052: DISABLE
// hInvincible := [ ] ;
80053: LD_ADDR_EXP 160
80057: PUSH
80058: EMPTY
80059: ST_TO_ADDR
80060: END
// every 10 do var i ;
80061: GO 80063
80063: DISABLE
80064: LD_INT 0
80066: PPUSH
// begin enable ;
80067: ENABLE
// if not hInvincible then
80068: LD_EXP 160
80072: NOT
80073: IFFALSE 80077
// exit ;
80075: GO 80121
// for i in hInvincible do
80077: LD_ADDR_VAR 0 1
80081: PUSH
80082: LD_EXP 160
80086: PUSH
80087: FOR_IN
80088: IFFALSE 80119
// if GetLives ( i ) < 1000 then
80090: LD_VAR 0 1
80094: PPUSH
80095: CALL_OW 256
80099: PUSH
80100: LD_INT 1000
80102: LESS
80103: IFFALSE 80117
// SetLives ( i , 1000 ) ;
80105: LD_VAR 0 1
80109: PPUSH
80110: LD_INT 1000
80112: PPUSH
80113: CALL_OW 234
80117: GO 80087
80119: POP
80120: POP
// end ;
80121: PPOPN 1
80123: END
// export function hHackInvincible ; var i ; begin
80124: LD_INT 0
80126: PPUSH
80127: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80128: LD_ADDR_VAR 0 2
80132: PUSH
80133: LD_INT 2
80135: PUSH
80136: LD_INT 21
80138: PUSH
80139: LD_INT 1
80141: PUSH
80142: EMPTY
80143: LIST
80144: LIST
80145: PUSH
80146: LD_INT 21
80148: PUSH
80149: LD_INT 2
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: LIST
80160: PPUSH
80161: CALL_OW 69
80165: PUSH
80166: FOR_IN
80167: IFFALSE 80228
// if IsSelected ( i ) then
80169: LD_VAR 0 2
80173: PPUSH
80174: CALL_OW 306
80178: IFFALSE 80226
// begin if i in hInvincible then
80180: LD_VAR 0 2
80184: PUSH
80185: LD_EXP 160
80189: IN
80190: IFFALSE 80210
// hInvincible := hInvincible diff i else
80192: LD_ADDR_EXP 160
80196: PUSH
80197: LD_EXP 160
80201: PUSH
80202: LD_VAR 0 2
80206: DIFF
80207: ST_TO_ADDR
80208: GO 80226
// hInvincible := hInvincible union i ;
80210: LD_ADDR_EXP 160
80214: PUSH
80215: LD_EXP 160
80219: PUSH
80220: LD_VAR 0 2
80224: UNION
80225: ST_TO_ADDR
// end ;
80226: GO 80166
80228: POP
80229: POP
// end ;
80230: LD_VAR 0 1
80234: RET
// export function hHackInvisible ; var i , j ; begin
80235: LD_INT 0
80237: PPUSH
80238: PPUSH
80239: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80240: LD_ADDR_VAR 0 2
80244: PUSH
80245: LD_INT 21
80247: PUSH
80248: LD_INT 1
80250: PUSH
80251: EMPTY
80252: LIST
80253: LIST
80254: PPUSH
80255: CALL_OW 69
80259: PUSH
80260: FOR_IN
80261: IFFALSE 80285
// if IsSelected ( i ) then
80263: LD_VAR 0 2
80267: PPUSH
80268: CALL_OW 306
80272: IFFALSE 80283
// ComForceInvisible ( i ) ;
80274: LD_VAR 0 2
80278: PPUSH
80279: CALL_OW 496
80283: GO 80260
80285: POP
80286: POP
// end ;
80287: LD_VAR 0 1
80291: RET
// export function hHackChangeYourSide ; begin
80292: LD_INT 0
80294: PPUSH
// if your_side = 8 then
80295: LD_OWVAR 2
80299: PUSH
80300: LD_INT 8
80302: EQUAL
80303: IFFALSE 80315
// your_side := 0 else
80305: LD_ADDR_OWVAR 2
80309: PUSH
80310: LD_INT 0
80312: ST_TO_ADDR
80313: GO 80329
// your_side := your_side + 1 ;
80315: LD_ADDR_OWVAR 2
80319: PUSH
80320: LD_OWVAR 2
80324: PUSH
80325: LD_INT 1
80327: PLUS
80328: ST_TO_ADDR
// end ;
80329: LD_VAR 0 1
80333: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80334: LD_INT 0
80336: PPUSH
80337: PPUSH
80338: PPUSH
// for i in all_units do
80339: LD_ADDR_VAR 0 2
80343: PUSH
80344: LD_OWVAR 3
80348: PUSH
80349: FOR_IN
80350: IFFALSE 80428
// if IsSelected ( i ) then
80352: LD_VAR 0 2
80356: PPUSH
80357: CALL_OW 306
80361: IFFALSE 80426
// begin j := GetSide ( i ) ;
80363: LD_ADDR_VAR 0 3
80367: PUSH
80368: LD_VAR 0 2
80372: PPUSH
80373: CALL_OW 255
80377: ST_TO_ADDR
// if j = 8 then
80378: LD_VAR 0 3
80382: PUSH
80383: LD_INT 8
80385: EQUAL
80386: IFFALSE 80398
// j := 0 else
80388: LD_ADDR_VAR 0 3
80392: PUSH
80393: LD_INT 0
80395: ST_TO_ADDR
80396: GO 80412
// j := j + 1 ;
80398: LD_ADDR_VAR 0 3
80402: PUSH
80403: LD_VAR 0 3
80407: PUSH
80408: LD_INT 1
80410: PLUS
80411: ST_TO_ADDR
// SetSide ( i , j ) ;
80412: LD_VAR 0 2
80416: PPUSH
80417: LD_VAR 0 3
80421: PPUSH
80422: CALL_OW 235
// end ;
80426: GO 80349
80428: POP
80429: POP
// end ;
80430: LD_VAR 0 1
80434: RET
// export function hHackFog ; begin
80435: LD_INT 0
80437: PPUSH
// FogOff ( true ) ;
80438: LD_INT 1
80440: PPUSH
80441: CALL_OW 344
// end ;
80445: LD_VAR 0 1
80449: RET
// export function hHackApeman ; begin
80450: LD_INT 0
80452: PPUSH
// uc_side := your_side ;
80453: LD_ADDR_OWVAR 20
80457: PUSH
80458: LD_OWVAR 2
80462: ST_TO_ADDR
// uc_nation := 0 ;
80463: LD_ADDR_OWVAR 21
80467: PUSH
80468: LD_INT 0
80470: ST_TO_ADDR
// hc_name :=  ;
80471: LD_ADDR_OWVAR 26
80475: PUSH
80476: LD_STRING 
80478: ST_TO_ADDR
// hc_gallery :=  ;
80479: LD_ADDR_OWVAR 33
80483: PUSH
80484: LD_STRING 
80486: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
80487: LD_ADDR_OWVAR 31
80491: PUSH
80492: LD_INT 0
80494: PUSH
80495: LD_INT 0
80497: PUSH
80498: LD_INT 0
80500: PUSH
80501: LD_INT 0
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: ST_TO_ADDR
// hc_class := class_apeman ;
80510: LD_ADDR_OWVAR 28
80514: PUSH
80515: LD_INT 12
80517: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
80518: CALL_OW 44
80522: PPUSH
80523: LD_INT 1
80525: PPUSH
80526: CALL_OW 51
// end ;
80530: LD_VAR 0 1
80534: RET
// export function hHackBoom ; begin
80535: LD_INT 0
80537: PPUSH
// uc_side := your_side ;
80538: LD_ADDR_OWVAR 20
80542: PUSH
80543: LD_OWVAR 2
80547: ST_TO_ADDR
// uc_nation := 1 ;
80548: LD_ADDR_OWVAR 21
80552: PUSH
80553: LD_INT 1
80555: ST_TO_ADDR
// vc_chassis := us_morphling ;
80556: LD_ADDR_OWVAR 37
80560: PUSH
80561: LD_INT 5
80563: ST_TO_ADDR
// vc_engine := engine_siberite ;
80564: LD_ADDR_OWVAR 39
80568: PUSH
80569: LD_INT 3
80571: ST_TO_ADDR
// vc_control := control_computer ;
80572: LD_ADDR_OWVAR 38
80576: PUSH
80577: LD_INT 3
80579: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
80580: LD_ADDR_OWVAR 40
80584: PUSH
80585: LD_INT 8
80587: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
80588: CALL_OW 45
80592: PPUSH
80593: LD_INT 1
80595: PPUSH
80596: CALL_OW 51
// end ;
80600: LD_VAR 0 1
80604: RET
