// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 35697 0 9
// end ;
  43: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_STRING 02_
  62: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  63: LD_ADDR_EXP 3
  67: PUSH
  68: LD_STRING 03_
  70: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 ] [ Difficulty ] ;
  71: LD_ADDR_EXP 39
  75: PUSH
  76: LD_INT 2
  78: PUSH
  79: LD_INT 3
  81: PUSH
  82: LD_INT 4
  84: PUSH
  85: EMPTY
  86: LIST
  87: LIST
  88: LIST
  89: PUSH
  90: LD_OWVAR 67
  94: ARRAY
  95: ST_TO_ADDR
// PrepareRussians ;
  96: CALL 105 0 0
// end ; end_of_file
 100: LD_VAR 0 1
 104: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko , Gaydar , Bukov ; export burlakTeam ; export function PrepareRussians ; begin
 105: LD_INT 0
 107: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 108: LD_ADDR_EXP 74
 112: PUSH
 113: LD_INT 0
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 0
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: LIST
 130: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 131: LD_ADDR_EXP 68
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// PrepareHeroes ;
 138: CALL 159 0 0
// PrepareBeriaBase ;
 142: CALL 862 0 0
// PrepareKirovBase ;
 146: CALL 1044 0 0
// MissionIntro ;
 150: CALL 1494 0 0
// end ;
 154: LD_VAR 0 1
 158: RET
// function PrepareHeroes ; var un ; begin
 159: LD_INT 0
 161: PPUSH
 162: PPUSH
// uc_side := 6 ;
 163: LD_ADDR_OWVAR 20
 167: PUSH
 168: LD_INT 6
 170: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 171: LD_ADDR_EXP 51
 175: PUSH
 176: LD_STRING 02_burlakTeam
 178: PPUSH
 179: CALL_OW 31
 183: ST_TO_ADDR
// uc_side = 3 ;
 184: LD_ADDR_OWVAR 20
 188: PUSH
 189: LD_INT 3
 191: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 192: LD_ADDR_EXP 40
 196: PUSH
 197: LD_STRING Burlak
 199: PPUSH
 200: LD_EXP 1
 204: NOT
 205: PPUSH
 206: LD_EXP 2
 210: PPUSH
 211: CALL 2334 0 3
 215: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 216: LD_ADDR_EXP 41
 220: PUSH
 221: LD_STRING Gnyevko
 223: PPUSH
 224: LD_EXP 1
 228: NOT
 229: PPUSH
 230: LD_EXP 2
 234: PPUSH
 235: CALL 2334 0 3
 239: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 240: LD_ADDR_EXP 43
 244: PUSH
 245: LD_STRING Kovalyuk
 247: PPUSH
 248: LD_EXP 1
 252: NOT
 253: PPUSH
 254: LD_EXP 2
 258: PPUSH
 259: CALL 2334 0 3
 263: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 264: LD_ADDR_EXP 42
 268: PUSH
 269: LD_STRING Kirilenkova
 271: PPUSH
 272: LD_EXP 1
 276: NOT
 277: PPUSH
 278: LD_EXP 2
 282: PPUSH
 283: CALL 2334 0 3
 287: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 288: LD_ADDR_EXP 44
 292: PUSH
 293: LD_STRING Belkov
 295: PPUSH
 296: LD_EXP 1
 300: NOT
 301: PPUSH
 302: LD_EXP 2
 306: PPUSH
 307: CALL 2334 0 3
 311: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 312: LD_ADDR_EXP 46
 316: PUSH
 317: LD_STRING Benko
 319: PPUSH
 320: LD_EXP 1
 324: NOT
 325: PPUSH
 326: LD_EXP 2
 330: PPUSH
 331: CALL 2334 0 3
 335: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 336: LD_ADDR_EXP 47
 340: PUSH
 341: LD_STRING Kuklajs
 343: PPUSH
 344: LD_EXP 1
 348: NOT
 349: PPUSH
 350: LD_EXP 2
 354: PPUSH
 355: CALL 2334 0 3
 359: ST_TO_ADDR
// uc_side := 6 ;
 360: LD_ADDR_OWVAR 20
 364: PUSH
 365: LD_INT 6
 367: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 368: LD_ADDR_EXP 54
 372: PUSH
 373: LD_STRING Kurin
 375: PPUSH
 376: CALL_OW 25
 380: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 381: LD_ADDR_EXP 55
 385: PUSH
 386: LD_STRING Popov
 388: PPUSH
 389: CALL_OW 25
 393: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 394: LD_ADDR_EXP 75
 398: PUSH
 399: LD_STRING Grishko
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 407: LD_ADDR_EXP 76
 411: PUSH
 412: LD_STRING Gaydar
 414: PPUSH
 415: CALL_OW 25
 419: ST_TO_ADDR
// Bukov := NewCharacter ( SBukov ) ;
 420: LD_ADDR_EXP 77
 424: PUSH
 425: LD_STRING SBukov
 427: PPUSH
 428: CALL_OW 25
 432: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 433: LD_EXP 40
 437: PUSH
 438: LD_EXP 41
 442: PUSH
 443: LD_EXP 43
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PPUSH
 453: LD_INT 3
 455: PPUSH
 456: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 460: LD_EXP 42
 464: PPUSH
 465: LD_INT 4
 467: PPUSH
 468: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 472: LD_EXP 54
 476: PPUSH
 477: LD_INT 153
 479: PPUSH
 480: LD_INT 103
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL_OW 48
// AddComHold ( Kurin ) ;
 490: LD_EXP 54
 494: PPUSH
 495: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 499: LD_EXP 54
 503: PPUSH
 504: LD_INT 155
 506: PPUSH
 507: LD_INT 106
 509: PPUSH
 510: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 514: LD_EXP 55
 518: PPUSH
 519: LD_INT 131
 521: PPUSH
 522: LD_INT 49
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 48
// AddComHold ( Popov ) ;
 532: LD_EXP 55
 536: PPUSH
 537: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 541: LD_EXP 55
 545: PPUSH
 546: LD_INT 131
 548: PPUSH
 549: LD_INT 31
 551: PPUSH
 552: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 556: LD_EXP 76
 560: PPUSH
 561: LD_INT 91
 563: PPUSH
 564: LD_INT 15
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// AddComHold ( Gaydar ) ;
 574: LD_EXP 76
 578: PPUSH
 579: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 583: LD_EXP 76
 587: PPUSH
 588: LD_INT 131
 590: PPUSH
 591: LD_INT 31
 593: PPUSH
 594: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 598: LD_EXP 77
 602: PPUSH
 603: LD_INT 86
 605: PPUSH
 606: LD_INT 17
 608: PPUSH
 609: LD_INT 0
 611: PPUSH
 612: CALL_OW 48
// AddComHold ( Bukov ) ;
 616: LD_EXP 77
 620: PPUSH
 621: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 625: LD_EXP 77
 629: PPUSH
 630: LD_INT 94
 632: PPUSH
 633: LD_INT 32
 635: PPUSH
 636: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 640: LD_EXP 44
 644: PPUSH
 645: LD_INT 155
 647: PPUSH
 648: LD_INT 106
 650: PPUSH
 651: LD_INT 0
 653: PPUSH
 654: CALL_OW 48
// AddComHold ( Belkov ) ;
 658: LD_EXP 44
 662: PPUSH
 663: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 667: LD_EXP 44
 671: PPUSH
 672: LD_EXP 54
 676: PPUSH
 677: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 681: LD_EXP 40
 685: PPUSH
 686: LD_INT 154
 688: PPUSH
 689: LD_INT 106
 691: PPUSH
 692: LD_INT 0
 694: PPUSH
 695: CALL_OW 48
// AddComHold ( Burlak ) ;
 699: LD_EXP 40
 703: PPUSH
 704: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 708: LD_EXP 40
 712: PPUSH
 713: LD_EXP 54
 717: PPUSH
 718: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 722: LD_ADDR_EXP 78
 726: PUSH
 727: LD_EXP 41
 731: PUSH
 732: LD_EXP 43
 736: PUSH
 737: LD_EXP 42
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// for un in otherBeriaUnits do
 747: LD_ADDR_VAR 0 2
 751: PUSH
 752: LD_EXP 51
 756: PUSH
 757: FOR_IN
 758: IFFALSE 800
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 760: LD_VAR 0 2
 764: PPUSH
 765: LD_INT 4
 767: PPUSH
 768: LD_INT 0
 770: PPUSH
 771: CALL_OW 49
// AddComHold ( un ) ;
 775: LD_VAR 0 2
 779: PPUSH
 780: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_EXP 54
 793: PPUSH
 794: CALL_OW 179
// end ;
 798: GO 757
 800: POP
 801: POP
// for un in BurlakTeam do
 802: LD_ADDR_VAR 0 2
 806: PUSH
 807: LD_EXP 78
 811: PUSH
 812: FOR_IN
 813: IFFALSE 855
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 815: LD_VAR 0 2
 819: PPUSH
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// AddComHold ( un ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 839: LD_VAR 0 2
 843: PPUSH
 844: LD_EXP 54
 848: PPUSH
 849: CALL_OW 179
// end ;
 853: GO 812
 855: POP
 856: POP
// end ;
 857: LD_VAR 0 1
 861: RET
// export function PrepareBeriaBase ; var i , bonusResources ; begin
 862: LD_INT 0
 864: PPUSH
 865: PPUSH
 866: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 867: LD_ADDR_EXP 52
 871: PUSH
 872: LD_STRING 02_Beria
 874: PPUSH
 875: EMPTY
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// uc_side = 3 ;
 882: LD_ADDR_OWVAR 20
 886: PUSH
 887: LD_INT 3
 889: ST_TO_ADDR
// uc_nation = 3 ;
 890: LD_ADDR_OWVAR 21
 894: PUSH
 895: LD_INT 3
 897: ST_TO_ADDR
// for i := 1 to beriaBase do
 898: LD_ADDR_VAR 0 2
 902: PUSH
 903: DOUBLE
 904: LD_INT 1
 906: DEC
 907: ST_TO_ADDR
 908: LD_EXP 52
 912: PUSH
 913: FOR_TO
 914: IFFALSE 1037
// begin bc_type := beriaBase [ i ] [ 1 ] ;
 916: LD_ADDR_OWVAR 42
 920: PUSH
 921: LD_EXP 52
 925: PUSH
 926: LD_VAR 0 2
 930: ARRAY
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
 936: LD_ADDR_OWVAR 43
 940: PUSH
 941: LD_EXP 52
 945: PUSH
 946: LD_VAR 0 2
 950: ARRAY
 951: PUSH
 952: LD_INT 2
 954: ARRAY
 955: ST_TO_ADDR
// if bc_type = b_lab then
 956: LD_OWVAR 42
 960: PUSH
 961: LD_INT 6
 963: EQUAL
 964: IFFALSE 982
// begin bc_kind1 = b_lab_basic ;
 966: LD_ADDR_OWVAR 44
 970: PUSH
 971: LD_INT 9
 973: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
 974: LD_ADDR_OWVAR 45
 978: PUSH
 979: LD_INT 9
 981: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
 982: LD_EXP 52
 986: PUSH
 987: LD_VAR 0 2
 991: ARRAY
 992: PUSH
 993: LD_INT 3
 995: ARRAY
 996: PUSH
 997: LD_INT 46
 999: PLUS
1000: PPUSH
1001: LD_EXP 52
1005: PUSH
1006: LD_VAR 0 2
1010: ARRAY
1011: PUSH
1012: LD_INT 4
1014: ARRAY
1015: PPUSH
1016: LD_EXP 52
1020: PUSH
1021: LD_VAR 0 2
1025: ARRAY
1026: PUSH
1027: LD_INT 5
1029: ARRAY
1030: PPUSH
1031: CALL_OW 47
// end ;
1035: GO 913
1037: POP
1038: POP
// end ;
1039: LD_VAR 0 1
1043: RET
// export function PrepareKirovBase ; var i , j , bonusResources ; begin
1044: LD_INT 0
1046: PPUSH
1047: PPUSH
1048: PPUSH
1049: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1050: LD_ADDR_EXP 59
1054: PUSH
1055: LD_STRING 02_Kirov
1057: PPUSH
1058: EMPTY
1059: PPUSH
1060: CALL_OW 30
1064: ST_TO_ADDR
// uc_side = 6 ;
1065: LD_ADDR_OWVAR 20
1069: PUSH
1070: LD_INT 6
1072: ST_TO_ADDR
// uc_nation = 3 ;
1073: LD_ADDR_OWVAR 21
1077: PUSH
1078: LD_INT 3
1080: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1081: LD_ADDR_EXP 58
1085: PUSH
1086: LD_STRING 02_kirovTeam
1088: PPUSH
1089: CALL_OW 31
1093: ST_TO_ADDR
// for i := 1 to kirovBase do
1094: LD_ADDR_VAR 0 2
1098: PUSH
1099: DOUBLE
1100: LD_INT 1
1102: DEC
1103: ST_TO_ADDR
1104: LD_EXP 59
1108: PUSH
1109: FOR_TO
1110: IFFALSE 1207
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1112: LD_ADDR_OWVAR 42
1116: PUSH
1117: LD_EXP 59
1121: PUSH
1122: LD_VAR 0 2
1126: ARRAY
1127: PUSH
1128: LD_INT 1
1130: ARRAY
1131: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1132: LD_ADDR_OWVAR 43
1136: PUSH
1137: LD_EXP 59
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 2
1150: ARRAY
1151: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1152: LD_EXP 59
1156: PUSH
1157: LD_VAR 0 2
1161: ARRAY
1162: PUSH
1163: LD_INT 3
1165: ARRAY
1166: PUSH
1167: LD_INT 46
1169: PLUS
1170: PPUSH
1171: LD_EXP 59
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: PUSH
1182: LD_INT 4
1184: ARRAY
1185: PPUSH
1186: LD_EXP 59
1190: PUSH
1191: LD_VAR 0 2
1195: ARRAY
1196: PUSH
1197: LD_INT 5
1199: ARRAY
1200: PPUSH
1201: CALL_OW 47
// end ;
1205: GO 1109
1207: POP
1208: POP
// for i in otherKirovUnits do
1209: LD_ADDR_VAR 0 2
1213: PUSH
1214: LD_EXP 58
1218: PUSH
1219: FOR_IN
1220: IFFALSE 1279
// begin for j in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
1222: LD_ADDR_VAR 0 3
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_INT 6
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 21
1239: PUSH
1240: LD_INT 3
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PPUSH
1251: CALL_OW 69
1255: PUSH
1256: FOR_IN
1257: IFFALSE 1275
// begin PlaceHumanInUnit ( i , j ) ;
1259: LD_VAR 0 2
1263: PPUSH
1264: LD_VAR 0 3
1268: PPUSH
1269: CALL_OW 52
// end ;
1273: GO 1256
1275: POP
1276: POP
// end ;
1277: GO 1219
1279: POP
1280: POP
// end ;
1281: LD_VAR 0 1
1285: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var charsToChoose , selectedPeople ; begin
1286: LD_INT 0
1288: PPUSH
1289: PPUSH
1290: PPUSH
// charsToChoose = otherKirovUnits ;
1291: LD_ADDR_VAR 0 3
1295: PUSH
1296: LD_EXP 58
1300: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: LD_VAR 0 3
1310: PUSH
1311: LD_EXP 51
1315: ADD
1316: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , Benko , Kuklajs , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
1317: LD_ADDR_VAR 0 4
1321: PUSH
1322: LD_STRING text
1324: PPUSH
1325: LD_VAR 0 1
1329: PPUSH
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT -5
1337: PUSH
1338: LD_EXP 40
1342: PUSH
1343: LD_EXP 41
1347: PUSH
1348: LD_EXP 43
1352: PUSH
1353: LD_EXP 42
1357: PUSH
1358: LD_EXP 44
1362: PUSH
1363: LD_EXP 46
1367: PUSH
1368: LD_EXP 47
1372: PUSH
1373: LD_INT -6
1375: PUSH
1376: LD_INT -2
1378: PUSH
1379: LD_INT -3
1381: PUSH
1382: LD_INT -5
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_VAR 0 3
1403: ADD
1404: PUSH
1405: LD_INT -6
1407: PUSH
1408: LD_INT -4
1410: PUSH
1411: LD_EXP 54
1415: PUSH
1416: LD_EXP 55
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: ADD
1427: PPUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 3
1433: PUSH
1434: LD_INT 2
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: LD_INT 4
1446: PUSH
1447: LD_INT 1
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: PPUSH
1460: CALL_OW 42
1464: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
1465: LD_VAR 0 3
1469: PPUSH
1470: LD_INT 6
1472: PPUSH
1473: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
1477: LD_VAR 0 4
1481: PPUSH
1482: LD_INT 3
1484: PPUSH
1485: CALL_OW 235
// end ;
1489: LD_VAR 0 2
1493: RET
// export function MissionIntro ; begin
1494: LD_INT 0
1496: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
1497: LD_EXP 40
1501: PUSH
1502: LD_EXP 54
1506: PUSH
1507: EMPTY
1508: LIST
1509: LIST
1510: PPUSH
1511: CALL_OW 87
// if not Belkov then
1515: LD_EXP 44
1519: NOT
1520: IFFALSE 1558
// begin Say ( Kurin , D1a-Kur-1 ) ;
1522: LD_EXP 54
1526: PPUSH
1527: LD_STRING D1a-Kur-1
1529: PPUSH
1530: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
1534: LD_EXP 40
1538: PPUSH
1539: LD_STRING D1a-Bur-1
1541: PPUSH
1542: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
1546: LD_EXP 54
1550: PPUSH
1551: LD_STRING D1a-Kur-2
1553: PPUSH
1554: CALL_OW 88
// end ; if Belkov then
1558: LD_EXP 44
1562: IFFALSE 1600
// begin Say ( Kurin , D1b-Kur-1 ) ;
1564: LD_EXP 54
1568: PPUSH
1569: LD_STRING D1b-Kur-1
1571: PPUSH
1572: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
1576: LD_EXP 44
1580: PPUSH
1581: LD_STRING D1b-Bel-1
1583: PPUSH
1584: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
1588: LD_EXP 54
1592: PPUSH
1593: LD_STRING D1b-Kur-2
1595: PPUSH
1596: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
1600: LD_EXP 54
1604: PPUSH
1605: LD_STRING D2-Kur-1
1607: PPUSH
1608: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
1612: LD_EXP 40
1616: PPUSH
1617: LD_STRING D2-Bur-1
1619: PPUSH
1620: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
1624: LD_EXP 54
1628: PPUSH
1629: LD_STRING D2-Kur-2
1631: PPUSH
1632: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
1636: LD_EXP 40
1640: PPUSH
1641: LD_STRING D2-Bur-2
1643: PPUSH
1644: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
1648: LD_EXP 54
1652: PPUSH
1653: LD_STRING D2-Kur-3
1655: PPUSH
1656: CALL_OW 88
// PrepareAmericansMissionIntro ;
1660: CALL 1866 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
1664: LD_INT 1
1666: PPUSH
1667: LD_INT 6
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: LD_INT 1
1675: PPUSH
1676: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
1680: LD_INT 3
1682: PPUSH
1683: LD_INT 5
1685: PPUSH
1686: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
1690: LD_EXP 55
1694: PUSH
1695: LD_EXP 76
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PPUSH
1704: CALL_OW 87
// wait ( 0 0$3 ) ;
1708: LD_INT 105
1710: PPUSH
1711: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
1715: LD_EXP 55
1719: PPUSH
1720: LD_STRING D2-Pop-3
1722: PPUSH
1723: CALL_OW 94
// wait ( 0 0$0.3 ) ;
1727: LD_INT 10
1729: PPUSH
1730: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
1734: LD_EXP 40
1738: PUSH
1739: LD_EXP 54
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PPUSH
1748: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
1752: LD_EXP 54
1756: PPUSH
1757: LD_STRING D2-Kur-4
1759: PPUSH
1760: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
1764: LD_EXP 40
1768: PPUSH
1769: LD_STRING D2-Bur-4
1771: PPUSH
1772: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
1776: LD_EXP 54
1780: PPUSH
1781: LD_STRING D2-Kur-5
1783: PPUSH
1784: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
1788: LD_EXP 40
1792: PPUSH
1793: LD_STRING D2-Bur-5
1795: PPUSH
1796: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
1800: LD_EXP 54
1804: PPUSH
1805: LD_STRING D2-Kur-6
1807: PPUSH
1808: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
1812: LD_EXP 40
1816: PPUSH
1817: LD_STRING D2-Bur-4
1819: PPUSH
1820: CALL_OW 88
// SelectCharacters ( 8 ) ;
1824: LD_INT 8
1826: PPUSH
1827: CALL 1286 0 1
// AddComMoveXY ( Popov , 135 , 67 ) ;
1831: LD_EXP 55
1835: PPUSH
1836: LD_INT 135
1838: PPUSH
1839: LD_INT 67
1841: PPUSH
1842: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
1846: LD_EXP 76
1850: PPUSH
1851: LD_INT 209
1853: PPUSH
1854: LD_INT 164
1856: PPUSH
1857: CALL_OW 171
// end ; end_of_file
1861: LD_VAR 0 1
1865: RET
// export amIntroUnits ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
1866: LD_INT 0
1868: PPUSH
1869: PPUSH
1870: PPUSH
1871: PPUSH
// amIntroUnits = [ ] ;
1872: LD_ADDR_EXP 79
1876: PUSH
1877: EMPTY
1878: ST_TO_ADDR
// uc_side = 1 ;
1879: LD_ADDR_OWVAR 20
1883: PUSH
1884: LD_INT 1
1886: ST_TO_ADDR
// uc_nation = nation_american ;
1887: LD_ADDR_OWVAR 21
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1895: LD_ADDR_OWVAR 37
1899: PUSH
1900: LD_INT 3
1902: ST_TO_ADDR
// vc_control = control_manual ;
1903: LD_ADDR_OWVAR 38
1907: PUSH
1908: LD_INT 1
1910: ST_TO_ADDR
// vc_engine = engine_combustion ;
1911: LD_ADDR_OWVAR 39
1915: PUSH
1916: LD_INT 1
1918: ST_TO_ADDR
// vc_weapon = us_light_gun ;
1919: LD_ADDR_OWVAR 40
1923: PUSH
1924: LD_INT 3
1926: ST_TO_ADDR
// vc_fuel_battery = 100 ;
1927: LD_ADDR_OWVAR 41
1931: PUSH
1932: LD_INT 100
1934: ST_TO_ADDR
// veh = CreateVehicle ;
1935: LD_ADDR_VAR 0 3
1939: PUSH
1940: CALL_OW 45
1944: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1945: LD_VAR 0 3
1949: PPUSH
1950: LD_INT 4
1952: PPUSH
1953: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
1957: LD_ADDR_EXP 79
1961: PUSH
1962: LD_EXP 79
1966: PUSH
1967: LD_VAR 0 3
1971: ADD
1972: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
1973: LD_VAR 0 3
1977: PPUSH
1978: LD_INT 7
1980: PPUSH
1981: LD_INT 0
1983: PPUSH
1984: CALL_OW 49
// for i := 1 to 3 do
1988: LD_ADDR_VAR 0 2
1992: PUSH
1993: DOUBLE
1994: LD_INT 1
1996: DEC
1997: ST_TO_ADDR
1998: LD_INT 3
2000: PUSH
2001: FOR_TO
2002: IFFALSE 2123
// begin hc_name :=  ;
2004: LD_ADDR_OWVAR 26
2008: PUSH
2009: LD_STRING 
2011: ST_TO_ADDR
// hc_gallery :=  ;
2012: LD_ADDR_OWVAR 33
2016: PUSH
2017: LD_STRING 
2019: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2020: LD_INT 0
2022: PPUSH
2023: LD_EXP 39
2027: PPUSH
2028: CALL_OW 381
// human = CreateHuman ;
2032: LD_ADDR_VAR 0 4
2036: PUSH
2037: CALL_OW 44
2041: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2042: LD_ADDR_EXP 79
2046: PUSH
2047: LD_EXP 79
2051: PUSH
2052: LD_VAR 0 4
2056: ADD
2057: ST_TO_ADDR
// if i < 3 then
2058: LD_VAR 0 2
2062: PUSH
2063: LD_INT 3
2065: LESS
2066: IFFALSE 2085
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2068: LD_VAR 0 4
2072: PPUSH
2073: LD_INT 7
2075: PPUSH
2076: LD_INT 0
2078: PPUSH
2079: CALL_OW 49
2083: GO 2121
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_EXP 39
2092: PPUSH
2093: CALL_OW 383
// human = CreateHuman ;
2097: LD_ADDR_VAR 0 4
2101: PUSH
2102: CALL_OW 44
2106: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2107: LD_VAR 0 4
2111: PPUSH
2112: LD_VAR 0 3
2116: PPUSH
2117: CALL_OW 52
// end ; end ;
2121: GO 2001
2123: POP
2124: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2125: LD_INT 120
2127: PPUSH
2128: LD_INT 36
2130: PPUSH
2131: LD_INT 3
2133: PPUSH
2134: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2138: LD_EXP 79
2142: PPUSH
2143: LD_INT 26
2145: PPUSH
2146: LD_INT 34
2148: PPUSH
2149: CALL_OW 111
// end ; end_of_file end_of_file end_of_file end_of_file
2153: LD_VAR 0 1
2157: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
2158: LD_INT 0
2160: PPUSH
// ar_miner := 81 ;
2161: LD_ADDR_EXP 87
2165: PUSH
2166: LD_INT 81
2168: ST_TO_ADDR
// ar_crane := 88 ;
2169: LD_ADDR_EXP 86
2173: PUSH
2174: LD_INT 88
2176: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
2177: LD_ADDR_EXP 81
2181: PUSH
2182: LD_INT 89
2184: ST_TO_ADDR
// us_hack := 99 ;
2185: LD_ADDR_EXP 82
2189: PUSH
2190: LD_INT 99
2192: ST_TO_ADDR
// us_artillery := 97 ;
2193: LD_ADDR_EXP 83
2197: PUSH
2198: LD_INT 97
2200: ST_TO_ADDR
// ar_bio_bomb := 91 ;
2201: LD_ADDR_EXP 84
2205: PUSH
2206: LD_INT 91
2208: ST_TO_ADDR
// ar_mortar := 92 ;
2209: LD_ADDR_EXP 85
2213: PUSH
2214: LD_INT 92
2216: ST_TO_ADDR
// ru_flamethrower := 93 ;
2217: LD_ADDR_EXP 88
2221: PUSH
2222: LD_INT 93
2224: ST_TO_ADDR
// ru_radar := 98 ;
2225: LD_ADDR_EXP 80
2229: PUSH
2230: LD_INT 98
2232: ST_TO_ADDR
// tech_Artillery := 80 ;
2233: LD_ADDR_EXP 89
2237: PUSH
2238: LD_INT 80
2240: ST_TO_ADDR
// tech_RadMat := 81 ;
2241: LD_ADDR_EXP 90
2245: PUSH
2246: LD_INT 81
2248: ST_TO_ADDR
// tech_BasicTools := 82 ;
2249: LD_ADDR_EXP 91
2253: PUSH
2254: LD_INT 82
2256: ST_TO_ADDR
// tech_Cargo := 83 ;
2257: LD_ADDR_EXP 92
2261: PUSH
2262: LD_INT 83
2264: ST_TO_ADDR
// tech_Track := 84 ;
2265: LD_ADDR_EXP 93
2269: PUSH
2270: LD_INT 84
2272: ST_TO_ADDR
// tech_Crane := 85 ;
2273: LD_ADDR_EXP 94
2277: PUSH
2278: LD_INT 85
2280: ST_TO_ADDR
// tech_Bulldozer := 86 ;
2281: LD_ADDR_EXP 95
2285: PUSH
2286: LD_INT 86
2288: ST_TO_ADDR
// tech_Hovercraft := 87 ;
2289: LD_ADDR_EXP 96
2293: PUSH
2294: LD_INT 87
2296: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
2297: LD_ADDR_EXP 97
2301: PUSH
2302: LD_INT 88
2304: ST_TO_ADDR
// class_mastodont := 31 ;
2305: LD_ADDR_EXP 98
2309: PUSH
2310: LD_INT 31
2312: ST_TO_ADDR
// class_horse := 21 ;
2313: LD_ADDR_EXP 99
2317: PUSH
2318: LD_INT 21
2320: ST_TO_ADDR
// end ;
2321: LD_VAR 0 1
2325: RET
// every 1 do
2326: GO 2328
2328: DISABLE
// InitGlobalVariables ; end_of_file
2329: CALL 2158 0 0
2333: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2334: LD_INT 0
2336: PPUSH
2337: PPUSH
// if exist_mode then
2338: LD_VAR 0 2
2342: IFFALSE 2367
// unit := CreateCharacter ( prefix & ident ) else
2344: LD_ADDR_VAR 0 5
2348: PUSH
2349: LD_VAR 0 3
2353: PUSH
2354: LD_VAR 0 1
2358: STR
2359: PPUSH
2360: CALL_OW 34
2364: ST_TO_ADDR
2365: GO 2382
// unit := NewCharacter ( ident ) ;
2367: LD_ADDR_VAR 0 5
2371: PUSH
2372: LD_VAR 0 1
2376: PPUSH
2377: CALL_OW 25
2381: ST_TO_ADDR
// result := unit ;
2382: LD_ADDR_VAR 0 4
2386: PUSH
2387: LD_VAR 0 5
2391: ST_TO_ADDR
// end ;
2392: LD_VAR 0 4
2396: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2397: LD_INT 0
2399: PPUSH
2400: PPUSH
// if not side or not nation then
2401: LD_VAR 0 1
2405: NOT
2406: PUSH
2407: LD_VAR 0 2
2411: NOT
2412: OR
2413: IFFALSE 2417
// exit ;
2415: GO 3185
// case nation of nation_american :
2417: LD_VAR 0 2
2421: PUSH
2422: LD_INT 1
2424: DOUBLE
2425: EQUAL
2426: IFTRUE 2430
2428: GO 2644
2430: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2431: LD_ADDR_VAR 0 4
2435: PUSH
2436: LD_INT 35
2438: PUSH
2439: LD_INT 45
2441: PUSH
2442: LD_INT 46
2444: PUSH
2445: LD_INT 47
2447: PUSH
2448: LD_INT 82
2450: PUSH
2451: LD_INT 83
2453: PUSH
2454: LD_INT 84
2456: PUSH
2457: LD_INT 85
2459: PUSH
2460: LD_INT 86
2462: PUSH
2463: LD_INT 1
2465: PUSH
2466: LD_INT 2
2468: PUSH
2469: LD_INT 6
2471: PUSH
2472: LD_INT 15
2474: PUSH
2475: LD_INT 16
2477: PUSH
2478: LD_INT 7
2480: PUSH
2481: LD_INT 12
2483: PUSH
2484: LD_INT 13
2486: PUSH
2487: LD_INT 10
2489: PUSH
2490: LD_INT 14
2492: PUSH
2493: LD_INT 20
2495: PUSH
2496: LD_INT 21
2498: PUSH
2499: LD_INT 22
2501: PUSH
2502: LD_INT 25
2504: PUSH
2505: LD_INT 32
2507: PUSH
2508: LD_INT 27
2510: PUSH
2511: LD_INT 36
2513: PUSH
2514: LD_INT 69
2516: PUSH
2517: LD_INT 39
2519: PUSH
2520: LD_INT 34
2522: PUSH
2523: LD_INT 40
2525: PUSH
2526: LD_INT 48
2528: PUSH
2529: LD_INT 49
2531: PUSH
2532: LD_INT 50
2534: PUSH
2535: LD_INT 51
2537: PUSH
2538: LD_INT 52
2540: PUSH
2541: LD_INT 53
2543: PUSH
2544: LD_INT 54
2546: PUSH
2547: LD_INT 55
2549: PUSH
2550: LD_INT 56
2552: PUSH
2553: LD_INT 57
2555: PUSH
2556: LD_INT 58
2558: PUSH
2559: LD_INT 59
2561: PUSH
2562: LD_INT 60
2564: PUSH
2565: LD_INT 61
2567: PUSH
2568: LD_INT 62
2570: PUSH
2571: LD_INT 80
2573: PUSH
2574: LD_INT 82
2576: PUSH
2577: LD_INT 83
2579: PUSH
2580: LD_INT 84
2582: PUSH
2583: LD_INT 85
2585: PUSH
2586: LD_INT 86
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: ST_TO_ADDR
2642: GO 3109
2644: LD_INT 2
2646: DOUBLE
2647: EQUAL
2648: IFTRUE 2652
2650: GO 2878
2652: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2653: LD_ADDR_VAR 0 4
2657: PUSH
2658: LD_INT 35
2660: PUSH
2661: LD_INT 45
2663: PUSH
2664: LD_INT 46
2666: PUSH
2667: LD_INT 47
2669: PUSH
2670: LD_INT 82
2672: PUSH
2673: LD_INT 83
2675: PUSH
2676: LD_INT 84
2678: PUSH
2679: LD_INT 85
2681: PUSH
2682: LD_INT 87
2684: PUSH
2685: LD_INT 70
2687: PUSH
2688: LD_INT 1
2690: PUSH
2691: LD_INT 11
2693: PUSH
2694: LD_INT 3
2696: PUSH
2697: LD_INT 4
2699: PUSH
2700: LD_INT 5
2702: PUSH
2703: LD_INT 6
2705: PUSH
2706: LD_INT 15
2708: PUSH
2709: LD_INT 18
2711: PUSH
2712: LD_INT 7
2714: PUSH
2715: LD_INT 17
2717: PUSH
2718: LD_INT 8
2720: PUSH
2721: LD_INT 20
2723: PUSH
2724: LD_INT 21
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 72
2732: PUSH
2733: LD_INT 26
2735: PUSH
2736: LD_INT 69
2738: PUSH
2739: LD_INT 39
2741: PUSH
2742: LD_INT 40
2744: PUSH
2745: LD_INT 41
2747: PUSH
2748: LD_INT 42
2750: PUSH
2751: LD_INT 43
2753: PUSH
2754: LD_INT 48
2756: PUSH
2757: LD_INT 49
2759: PUSH
2760: LD_INT 50
2762: PUSH
2763: LD_INT 51
2765: PUSH
2766: LD_INT 52
2768: PUSH
2769: LD_INT 53
2771: PUSH
2772: LD_INT 54
2774: PUSH
2775: LD_INT 55
2777: PUSH
2778: LD_INT 56
2780: PUSH
2781: LD_INT 60
2783: PUSH
2784: LD_INT 61
2786: PUSH
2787: LD_INT 62
2789: PUSH
2790: LD_INT 66
2792: PUSH
2793: LD_INT 67
2795: PUSH
2796: LD_INT 68
2798: PUSH
2799: LD_INT 81
2801: PUSH
2802: LD_INT 82
2804: PUSH
2805: LD_INT 83
2807: PUSH
2808: LD_INT 84
2810: PUSH
2811: LD_INT 85
2813: PUSH
2814: LD_INT 87
2816: PUSH
2817: LD_INT 88
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: ST_TO_ADDR
2876: GO 3109
2878: LD_INT 3
2880: DOUBLE
2881: EQUAL
2882: IFTRUE 2886
2884: GO 3108
2886: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
2887: LD_ADDR_VAR 0 4
2891: PUSH
2892: LD_INT 46
2894: PUSH
2895: LD_INT 47
2897: PUSH
2898: LD_INT 1
2900: PUSH
2901: LD_INT 2
2903: PUSH
2904: LD_INT 82
2906: PUSH
2907: LD_INT 83
2909: PUSH
2910: LD_INT 84
2912: PUSH
2913: LD_INT 85
2915: PUSH
2916: LD_INT 86
2918: PUSH
2919: LD_INT 11
2921: PUSH
2922: LD_INT 9
2924: PUSH
2925: LD_INT 20
2927: PUSH
2928: LD_INT 19
2930: PUSH
2931: LD_INT 21
2933: PUSH
2934: LD_INT 24
2936: PUSH
2937: LD_INT 22
2939: PUSH
2940: LD_INT 25
2942: PUSH
2943: LD_INT 28
2945: PUSH
2946: LD_INT 29
2948: PUSH
2949: LD_INT 30
2951: PUSH
2952: LD_INT 31
2954: PUSH
2955: LD_INT 37
2957: PUSH
2958: LD_INT 38
2960: PUSH
2961: LD_INT 32
2963: PUSH
2964: LD_INT 27
2966: PUSH
2967: LD_INT 33
2969: PUSH
2970: LD_INT 69
2972: PUSH
2973: LD_INT 39
2975: PUSH
2976: LD_INT 34
2978: PUSH
2979: LD_INT 40
2981: PUSH
2982: LD_INT 71
2984: PUSH
2985: LD_INT 23
2987: PUSH
2988: LD_INT 44
2990: PUSH
2991: LD_INT 48
2993: PUSH
2994: LD_INT 49
2996: PUSH
2997: LD_INT 50
2999: PUSH
3000: LD_INT 51
3002: PUSH
3003: LD_INT 52
3005: PUSH
3006: LD_INT 53
3008: PUSH
3009: LD_INT 54
3011: PUSH
3012: LD_INT 55
3014: PUSH
3015: LD_INT 56
3017: PUSH
3018: LD_INT 57
3020: PUSH
3021: LD_INT 58
3023: PUSH
3024: LD_INT 59
3026: PUSH
3027: LD_INT 63
3029: PUSH
3030: LD_INT 64
3032: PUSH
3033: LD_INT 65
3035: PUSH
3036: LD_INT 82
3038: PUSH
3039: LD_INT 83
3041: PUSH
3042: LD_INT 84
3044: PUSH
3045: LD_INT 85
3047: PUSH
3048: LD_INT 86
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: ST_TO_ADDR
3106: GO 3109
3108: POP
// if state > - 1 and state < 3 then
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 1
3116: NEG
3117: GREATER
3118: PUSH
3119: LD_VAR 0 3
3123: PUSH
3124: LD_INT 3
3126: LESS
3127: AND
3128: IFFALSE 3185
// for i in result do
3130: LD_ADDR_VAR 0 5
3134: PUSH
3135: LD_VAR 0 4
3139: PUSH
3140: FOR_IN
3141: IFFALSE 3183
// if GetTech ( i , side ) <> state then
3143: LD_VAR 0 5
3147: PPUSH
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 321
3157: PUSH
3158: LD_VAR 0 3
3162: NONEQUAL
3163: IFFALSE 3181
// result := result diff i ;
3165: LD_ADDR_VAR 0 4
3169: PUSH
3170: LD_VAR 0 4
3174: PUSH
3175: LD_VAR 0 5
3179: DIFF
3180: ST_TO_ADDR
3181: GO 3140
3183: POP
3184: POP
// end ;
3185: LD_VAR 0 4
3189: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3190: LD_INT 0
3192: PPUSH
3193: PPUSH
3194: PPUSH
// result := true ;
3195: LD_ADDR_VAR 0 3
3199: PUSH
3200: LD_INT 1
3202: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3203: LD_ADDR_VAR 0 5
3207: PUSH
3208: LD_VAR 0 2
3212: PPUSH
3213: CALL_OW 480
3217: ST_TO_ADDR
// if not tmp then
3218: LD_VAR 0 5
3222: NOT
3223: IFFALSE 3227
// exit ;
3225: GO 3276
// for i in tmp do
3227: LD_ADDR_VAR 0 4
3231: PUSH
3232: LD_VAR 0 5
3236: PUSH
3237: FOR_IN
3238: IFFALSE 3274
// if GetTech ( i , side ) <> state_researched then
3240: LD_VAR 0 4
3244: PPUSH
3245: LD_VAR 0 1
3249: PPUSH
3250: CALL_OW 321
3254: PUSH
3255: LD_INT 2
3257: NONEQUAL
3258: IFFALSE 3272
// begin result := false ;
3260: LD_ADDR_VAR 0 3
3264: PUSH
3265: LD_INT 0
3267: ST_TO_ADDR
// exit ;
3268: POP
3269: POP
3270: GO 3276
// end ;
3272: GO 3237
3274: POP
3275: POP
// end ;
3276: LD_VAR 0 3
3280: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3281: LD_INT 0
3283: PPUSH
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
3291: PPUSH
3292: PPUSH
3293: PPUSH
3294: PPUSH
3295: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3296: LD_VAR 0 1
3300: NOT
3301: PUSH
3302: LD_VAR 0 1
3306: PPUSH
3307: CALL_OW 257
3311: PUSH
3312: LD_INT 9
3314: NONEQUAL
3315: OR
3316: IFFALSE 3320
// exit ;
3318: GO 3893
// side := GetSide ( unit ) ;
3320: LD_ADDR_VAR 0 9
3324: PUSH
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 255
3334: ST_TO_ADDR
// tech_space := tech_spacanom ;
3335: LD_ADDR_VAR 0 12
3339: PUSH
3340: LD_INT 29
3342: ST_TO_ADDR
// tech_time := tech_taurad ;
3343: LD_ADDR_VAR 0 13
3347: PUSH
3348: LD_INT 28
3350: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3351: LD_ADDR_VAR 0 11
3355: PUSH
3356: LD_VAR 0 1
3360: PPUSH
3361: CALL_OW 310
3365: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3366: LD_VAR 0 11
3370: PPUSH
3371: CALL_OW 247
3375: PUSH
3376: LD_INT 2
3378: EQUAL
3379: IFFALSE 3383
// exit ;
3381: GO 3893
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3383: LD_ADDR_VAR 0 8
3387: PUSH
3388: LD_INT 81
3390: PUSH
3391: LD_VAR 0 9
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: PUSH
3400: LD_INT 3
3402: PUSH
3403: LD_INT 21
3405: PUSH
3406: LD_INT 3
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PPUSH
3421: CALL_OW 69
3425: ST_TO_ADDR
// if not tmp then
3426: LD_VAR 0 8
3430: NOT
3431: IFFALSE 3435
// exit ;
3433: GO 3893
// if in_unit then
3435: LD_VAR 0 11
3439: IFFALSE 3463
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3441: LD_ADDR_VAR 0 10
3445: PUSH
3446: LD_VAR 0 8
3450: PPUSH
3451: LD_VAR 0 11
3455: PPUSH
3456: CALL_OW 74
3460: ST_TO_ADDR
3461: GO 3483
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3463: LD_ADDR_VAR 0 10
3467: PUSH
3468: LD_VAR 0 8
3472: PPUSH
3473: LD_VAR 0 1
3477: PPUSH
3478: CALL_OW 74
3482: ST_TO_ADDR
// if not enemy then
3483: LD_VAR 0 10
3487: NOT
3488: IFFALSE 3492
// exit ;
3490: GO 3893
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3492: LD_VAR 0 11
3496: PUSH
3497: LD_VAR 0 11
3501: PPUSH
3502: LD_VAR 0 10
3506: PPUSH
3507: CALL_OW 296
3511: PUSH
3512: LD_INT 13
3514: GREATER
3515: AND
3516: PUSH
3517: LD_VAR 0 1
3521: PPUSH
3522: LD_VAR 0 10
3526: PPUSH
3527: CALL_OW 296
3531: PUSH
3532: LD_INT 12
3534: GREATER
3535: OR
3536: IFFALSE 3540
// exit ;
3538: GO 3893
// missile := [ 1 ] ;
3540: LD_ADDR_VAR 0 14
3544: PUSH
3545: LD_INT 1
3547: PUSH
3548: EMPTY
3549: LIST
3550: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3551: LD_VAR 0 9
3555: PPUSH
3556: LD_VAR 0 12
3560: PPUSH
3561: CALL_OW 325
3565: IFFALSE 3594
// missile := Replace ( missile , missile + 1 , 2 ) ;
3567: LD_ADDR_VAR 0 14
3571: PUSH
3572: LD_VAR 0 14
3576: PPUSH
3577: LD_VAR 0 14
3581: PUSH
3582: LD_INT 1
3584: PLUS
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: CALL_OW 1
3593: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3594: LD_VAR 0 9
3598: PPUSH
3599: LD_VAR 0 13
3603: PPUSH
3604: CALL_OW 325
3608: PUSH
3609: LD_VAR 0 10
3613: PPUSH
3614: CALL_OW 255
3618: PPUSH
3619: LD_VAR 0 13
3623: PPUSH
3624: CALL_OW 325
3628: NOT
3629: AND
3630: IFFALSE 3659
// missile := Replace ( missile , missile + 1 , 3 ) ;
3632: LD_ADDR_VAR 0 14
3636: PUSH
3637: LD_VAR 0 14
3641: PPUSH
3642: LD_VAR 0 14
3646: PUSH
3647: LD_INT 1
3649: PLUS
3650: PPUSH
3651: LD_INT 3
3653: PPUSH
3654: CALL_OW 1
3658: ST_TO_ADDR
// if missile < 2 then
3659: LD_VAR 0 14
3663: PUSH
3664: LD_INT 2
3666: LESS
3667: IFFALSE 3671
// exit ;
3669: GO 3893
// x := GetX ( enemy ) ;
3671: LD_ADDR_VAR 0 4
3675: PUSH
3676: LD_VAR 0 10
3680: PPUSH
3681: CALL_OW 250
3685: ST_TO_ADDR
// y := GetY ( enemy ) ;
3686: LD_ADDR_VAR 0 5
3690: PUSH
3691: LD_VAR 0 10
3695: PPUSH
3696: CALL_OW 251
3700: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3701: LD_ADDR_VAR 0 6
3705: PUSH
3706: LD_VAR 0 4
3710: PUSH
3711: LD_INT 1
3713: NEG
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: CALL_OW 12
3722: PLUS
3723: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
3724: LD_ADDR_VAR 0 7
3728: PUSH
3729: LD_VAR 0 5
3733: PUSH
3734: LD_INT 1
3736: NEG
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: CALL_OW 12
3745: PLUS
3746: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
3747: LD_VAR 0 6
3751: PPUSH
3752: LD_VAR 0 7
3756: PPUSH
3757: CALL_OW 488
3761: NOT
3762: IFFALSE 3784
// begin _x := x ;
3764: LD_ADDR_VAR 0 6
3768: PUSH
3769: LD_VAR 0 4
3773: ST_TO_ADDR
// _y := y ;
3774: LD_ADDR_VAR 0 7
3778: PUSH
3779: LD_VAR 0 5
3783: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
3784: LD_ADDR_VAR 0 3
3788: PUSH
3789: LD_INT 1
3791: PPUSH
3792: LD_VAR 0 14
3796: PPUSH
3797: CALL_OW 12
3801: ST_TO_ADDR
// case i of 1 :
3802: LD_VAR 0 3
3806: PUSH
3807: LD_INT 1
3809: DOUBLE
3810: EQUAL
3811: IFTRUE 3815
3813: GO 3832
3815: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
3816: LD_VAR 0 1
3820: PPUSH
3821: LD_VAR 0 10
3825: PPUSH
3826: CALL_OW 115
3830: GO 3893
3832: LD_INT 2
3834: DOUBLE
3835: EQUAL
3836: IFTRUE 3840
3838: GO 3862
3840: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
3841: LD_VAR 0 1
3845: PPUSH
3846: LD_VAR 0 6
3850: PPUSH
3851: LD_VAR 0 7
3855: PPUSH
3856: CALL_OW 153
3860: GO 3893
3862: LD_INT 3
3864: DOUBLE
3865: EQUAL
3866: IFTRUE 3870
3868: GO 3892
3870: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_VAR 0 6
3880: PPUSH
3881: LD_VAR 0 7
3885: PPUSH
3886: CALL_OW 154
3890: GO 3893
3892: POP
// end ;
3893: LD_VAR 0 2
3897: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
3898: LD_INT 0
3900: PPUSH
3901: PPUSH
3902: PPUSH
3903: PPUSH
3904: PPUSH
3905: PPUSH
// if not unit or not building then
3906: LD_VAR 0 1
3910: NOT
3911: PUSH
3912: LD_VAR 0 2
3916: NOT
3917: OR
3918: IFFALSE 3922
// exit ;
3920: GO 4080
// x := GetX ( building ) ;
3922: LD_ADDR_VAR 0 5
3926: PUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: CALL_OW 250
3936: ST_TO_ADDR
// y := GetY ( building ) ;
3937: LD_ADDR_VAR 0 6
3941: PUSH
3942: LD_VAR 0 2
3946: PPUSH
3947: CALL_OW 251
3951: ST_TO_ADDR
// for i = 0 to 5 do
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: DOUBLE
3958: LD_INT 0
3960: DEC
3961: ST_TO_ADDR
3962: LD_INT 5
3964: PUSH
3965: FOR_TO
3966: IFFALSE 4078
// begin _x := ShiftX ( x , i , 3 ) ;
3968: LD_ADDR_VAR 0 7
3972: PUSH
3973: LD_VAR 0 5
3977: PPUSH
3978: LD_VAR 0 4
3982: PPUSH
3983: LD_INT 3
3985: PPUSH
3986: CALL_OW 272
3990: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
3991: LD_ADDR_VAR 0 8
3995: PUSH
3996: LD_VAR 0 6
4000: PPUSH
4001: LD_VAR 0 4
4005: PPUSH
4006: LD_INT 3
4008: PPUSH
4009: CALL_OW 273
4013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4014: LD_VAR 0 7
4018: PPUSH
4019: LD_VAR 0 8
4023: PPUSH
4024: CALL_OW 488
4028: NOT
4029: IFFALSE 4033
// continue ;
4031: GO 3965
// if HexInfo ( _x , _y ) = 0 then
4033: LD_VAR 0 7
4037: PPUSH
4038: LD_VAR 0 8
4042: PPUSH
4043: CALL_OW 428
4047: PUSH
4048: LD_INT 0
4050: EQUAL
4051: IFFALSE 4076
// begin ComMoveXY ( unit , _x , _y ) ;
4053: LD_VAR 0 1
4057: PPUSH
4058: LD_VAR 0 7
4062: PPUSH
4063: LD_VAR 0 8
4067: PPUSH
4068: CALL_OW 111
// exit ;
4072: POP
4073: POP
4074: GO 4080
// end ; end ;
4076: GO 3965
4078: POP
4079: POP
// end ;
4080: LD_VAR 0 3
4084: RET
// export function ScanBase ( side , base_area ) ; begin
4085: LD_INT 0
4087: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4088: LD_ADDR_VAR 0 3
4092: PUSH
4093: LD_VAR 0 2
4097: PPUSH
4098: LD_INT 81
4100: PUSH
4101: LD_VAR 0 1
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 70
4114: ST_TO_ADDR
// end ;
4115: LD_VAR 0 3
4119: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4120: LD_INT 0
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
// result := false ;
4126: LD_ADDR_VAR 0 2
4130: PUSH
4131: LD_INT 0
4133: ST_TO_ADDR
// side := GetSide ( unit ) ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: LD_VAR 0 1
4143: PPUSH
4144: CALL_OW 255
4148: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4149: LD_ADDR_VAR 0 4
4153: PUSH
4154: LD_VAR 0 1
4158: PPUSH
4159: CALL_OW 248
4163: ST_TO_ADDR
// case nat of 1 :
4164: LD_VAR 0 4
4168: PUSH
4169: LD_INT 1
4171: DOUBLE
4172: EQUAL
4173: IFTRUE 4177
4175: GO 4188
4177: POP
// tech := tech_lassight ; 2 :
4178: LD_ADDR_VAR 0 5
4182: PUSH
4183: LD_INT 12
4185: ST_TO_ADDR
4186: GO 4227
4188: LD_INT 2
4190: DOUBLE
4191: EQUAL
4192: IFTRUE 4196
4194: GO 4207
4196: POP
// tech := tech_mortar ; 3 :
4197: LD_ADDR_VAR 0 5
4201: PUSH
4202: LD_INT 41
4204: ST_TO_ADDR
4205: GO 4227
4207: LD_INT 3
4209: DOUBLE
4210: EQUAL
4211: IFTRUE 4215
4213: GO 4226
4215: POP
// tech := tech_bazooka ; end ;
4216: LD_ADDR_VAR 0 5
4220: PUSH
4221: LD_INT 44
4223: ST_TO_ADDR
4224: GO 4227
4226: POP
// if Researched ( side , tech ) then
4227: LD_VAR 0 3
4231: PPUSH
4232: LD_VAR 0 5
4236: PPUSH
4237: CALL_OW 325
4241: IFFALSE 4268
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4243: LD_ADDR_VAR 0 2
4247: PUSH
4248: LD_INT 5
4250: PUSH
4251: LD_INT 8
4253: PUSH
4254: LD_INT 9
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: LIST
4261: PUSH
4262: LD_VAR 0 4
4266: ARRAY
4267: ST_TO_ADDR
// end ;
4268: LD_VAR 0 2
4272: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
// if not mines then
4278: LD_VAR 0 2
4282: NOT
4283: IFFALSE 4287
// exit ;
4285: GO 4431
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4287: LD_ADDR_VAR 0 5
4291: PUSH
4292: LD_INT 81
4294: PUSH
4295: LD_VAR 0 1
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: LD_INT 3
4306: PUSH
4307: LD_INT 21
4309: PUSH
4310: LD_INT 3
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PPUSH
4325: CALL_OW 69
4329: ST_TO_ADDR
// for i in mines do
4330: LD_ADDR_VAR 0 4
4334: PUSH
4335: LD_VAR 0 2
4339: PUSH
4340: FOR_IN
4341: IFFALSE 4429
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4343: LD_VAR 0 4
4347: PUSH
4348: LD_INT 1
4350: ARRAY
4351: PPUSH
4352: LD_VAR 0 4
4356: PUSH
4357: LD_INT 2
4359: ARRAY
4360: PPUSH
4361: CALL_OW 458
4365: NOT
4366: IFFALSE 4370
// continue ;
4368: GO 4340
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4370: LD_VAR 0 4
4374: PUSH
4375: LD_INT 1
4377: ARRAY
4378: PPUSH
4379: LD_VAR 0 4
4383: PUSH
4384: LD_INT 2
4386: ARRAY
4387: PPUSH
4388: CALL_OW 428
4392: PUSH
4393: LD_VAR 0 5
4397: IN
4398: IFFALSE 4427
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4400: LD_VAR 0 4
4404: PUSH
4405: LD_INT 1
4407: ARRAY
4408: PPUSH
4409: LD_VAR 0 4
4413: PUSH
4414: LD_INT 2
4416: ARRAY
4417: PPUSH
4418: LD_VAR 0 1
4422: PPUSH
4423: CALL_OW 456
// end ;
4427: GO 4340
4429: POP
4430: POP
// end ;
4431: LD_VAR 0 3
4435: RET
// export function Count ( array ) ; var i ; begin
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// result := 0 ;
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: LD_INT 0
4447: ST_TO_ADDR
// for i in array do
4448: LD_ADDR_VAR 0 3
4452: PUSH
4453: LD_VAR 0 1
4457: PUSH
4458: FOR_IN
4459: IFFALSE 4483
// if i then
4461: LD_VAR 0 3
4465: IFFALSE 4481
// result := result + 1 ;
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: LD_VAR 0 2
4476: PUSH
4477: LD_INT 1
4479: PLUS
4480: ST_TO_ADDR
4481: GO 4458
4483: POP
4484: POP
// end ;
4485: LD_VAR 0 2
4489: RET
// export function IsEmpty ( building ) ; begin
4490: LD_INT 0
4492: PPUSH
// if not building then
4493: LD_VAR 0 1
4497: NOT
4498: IFFALSE 4502
// exit ;
4500: GO 4545
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4502: LD_ADDR_VAR 0 2
4506: PUSH
4507: LD_VAR 0 1
4511: PUSH
4512: LD_INT 22
4514: PUSH
4515: LD_VAR 0 1
4519: PPUSH
4520: CALL_OW 255
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 58
4531: PUSH
4532: EMPTY
4533: LIST
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PPUSH
4539: CALL_OW 69
4543: IN
4544: ST_TO_ADDR
// end ;
4545: LD_VAR 0 2
4549: RET
// export function IsNotFull ( building ) ; begin
4550: LD_INT 0
4552: PPUSH
// if not building then
4553: LD_VAR 0 1
4557: NOT
4558: IFFALSE 4562
// exit ;
4560: GO 4581
// result := UnitsInside ( building ) < 6 ;
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: LD_VAR 0 1
4571: PPUSH
4572: CALL_OW 313
4576: PUSH
4577: LD_INT 6
4579: LESS
4580: ST_TO_ADDR
// end ;
4581: LD_VAR 0 2
4585: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
4586: LD_INT 0
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
// tmp := [ ] ;
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: EMPTY
4598: ST_TO_ADDR
// list := [ ] ;
4599: LD_ADDR_VAR 0 5
4603: PUSH
4604: EMPTY
4605: ST_TO_ADDR
// for i = 16 to 25 do
4606: LD_ADDR_VAR 0 4
4610: PUSH
4611: DOUBLE
4612: LD_INT 16
4614: DEC
4615: ST_TO_ADDR
4616: LD_INT 25
4618: PUSH
4619: FOR_TO
4620: IFFALSE 4693
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
4622: LD_ADDR_VAR 0 3
4626: PUSH
4627: LD_VAR 0 3
4631: PUSH
4632: LD_INT 22
4634: PUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 255
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: PUSH
4649: LD_INT 91
4651: PUSH
4652: LD_VAR 0 1
4656: PUSH
4657: LD_INT 6
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: PUSH
4665: LD_INT 30
4667: PUSH
4668: LD_VAR 0 4
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: PUSH
4682: EMPTY
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: ADD
4690: ST_TO_ADDR
4691: GO 4619
4693: POP
4694: POP
// for i = 1 to tmp do
4695: LD_ADDR_VAR 0 4
4699: PUSH
4700: DOUBLE
4701: LD_INT 1
4703: DEC
4704: ST_TO_ADDR
4705: LD_VAR 0 3
4709: PUSH
4710: FOR_TO
4711: IFFALSE 4799
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
4713: LD_ADDR_VAR 0 5
4717: PUSH
4718: LD_VAR 0 5
4722: PUSH
4723: LD_VAR 0 3
4727: PUSH
4728: LD_VAR 0 4
4732: ARRAY
4733: PPUSH
4734: CALL_OW 266
4738: PUSH
4739: LD_VAR 0 3
4743: PUSH
4744: LD_VAR 0 4
4748: ARRAY
4749: PPUSH
4750: CALL_OW 250
4754: PUSH
4755: LD_VAR 0 3
4759: PUSH
4760: LD_VAR 0 4
4764: ARRAY
4765: PPUSH
4766: CALL_OW 251
4770: PUSH
4771: LD_VAR 0 3
4775: PUSH
4776: LD_VAR 0 4
4780: ARRAY
4781: PPUSH
4782: CALL_OW 254
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: ADD
4796: ST_TO_ADDR
4797: GO 4710
4799: POP
4800: POP
// result := list ;
4801: LD_ADDR_VAR 0 2
4805: PUSH
4806: LD_VAR 0 5
4810: ST_TO_ADDR
// end ;
4811: LD_VAR 0 2
4815: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
4816: LD_INT 0
4818: PPUSH
4819: PPUSH
4820: PPUSH
4821: PPUSH
4822: PPUSH
4823: PPUSH
4824: PPUSH
// if not factory then
4825: LD_VAR 0 1
4829: NOT
4830: IFFALSE 4834
// exit ;
4832: GO 5427
// if control = control_apeman then
4834: LD_VAR 0 4
4838: PUSH
4839: LD_INT 5
4841: EQUAL
4842: IFFALSE 4951
// begin tmp := UnitsInside ( factory ) ;
4844: LD_ADDR_VAR 0 8
4848: PUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: CALL_OW 313
4858: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
4859: LD_VAR 0 8
4863: PPUSH
4864: LD_INT 25
4866: PUSH
4867: LD_INT 12
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 72
4878: NOT
4879: IFFALSE 4889
// control := control_manual ;
4881: LD_ADDR_VAR 0 4
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
4889: LD_ADDR_VAR 0 8
4893: PUSH
4894: LD_VAR 0 1
4898: PPUSH
4899: CALL 4586 0 1
4903: ST_TO_ADDR
// if tmp then
4904: LD_VAR 0 8
4908: IFFALSE 4951
// begin for i in tmp do
4910: LD_ADDR_VAR 0 7
4914: PUSH
4915: LD_VAR 0 8
4919: PUSH
4920: FOR_IN
4921: IFFALSE 4949
// if i [ 1 ] = b_ext_radio then
4923: LD_VAR 0 7
4927: PUSH
4928: LD_INT 1
4930: ARRAY
4931: PUSH
4932: LD_INT 22
4934: EQUAL
4935: IFFALSE 4947
// begin control := control_remote ;
4937: LD_ADDR_VAR 0 4
4941: PUSH
4942: LD_INT 2
4944: ST_TO_ADDR
// break ;
4945: GO 4949
// end ;
4947: GO 4920
4949: POP
4950: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4951: LD_VAR 0 1
4955: PPUSH
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_VAR 0 3
4965: PPUSH
4966: LD_VAR 0 4
4970: PPUSH
4971: LD_VAR 0 5
4975: PPUSH
4976: CALL_OW 448
4980: IFFALSE 5015
// begin result := [ chassis , engine , control , weapon ] ;
4982: LD_ADDR_VAR 0 6
4986: PUSH
4987: LD_VAR 0 2
4991: PUSH
4992: LD_VAR 0 3
4996: PUSH
4997: LD_VAR 0 4
5001: PUSH
5002: LD_VAR 0 5
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: ST_TO_ADDR
// exit ;
5013: GO 5427
// end ; _chassis := AvailableChassisList ( factory ) ;
5015: LD_ADDR_VAR 0 9
5019: PUSH
5020: LD_VAR 0 1
5024: PPUSH
5025: CALL_OW 475
5029: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5030: LD_ADDR_VAR 0 11
5034: PUSH
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 476
5044: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5045: LD_ADDR_VAR 0 12
5049: PUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 477
5059: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5060: LD_ADDR_VAR 0 10
5064: PUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 478
5074: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5075: LD_VAR 0 9
5079: NOT
5080: PUSH
5081: LD_VAR 0 11
5085: NOT
5086: OR
5087: PUSH
5088: LD_VAR 0 12
5092: NOT
5093: OR
5094: PUSH
5095: LD_VAR 0 10
5099: NOT
5100: OR
5101: IFFALSE 5136
// begin result := [ chassis , engine , control , weapon ] ;
5103: LD_ADDR_VAR 0 6
5107: PUSH
5108: LD_VAR 0 2
5112: PUSH
5113: LD_VAR 0 3
5117: PUSH
5118: LD_VAR 0 4
5122: PUSH
5123: LD_VAR 0 5
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: ST_TO_ADDR
// exit ;
5134: GO 5427
// end ; if not chassis in _chassis then
5136: LD_VAR 0 2
5140: PUSH
5141: LD_VAR 0 9
5145: IN
5146: NOT
5147: IFFALSE 5173
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5149: LD_ADDR_VAR 0 2
5153: PUSH
5154: LD_VAR 0 9
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_VAR 0 9
5166: PPUSH
5167: CALL_OW 12
5171: ARRAY
5172: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5173: LD_VAR 0 2
5177: PPUSH
5178: LD_VAR 0 3
5182: PPUSH
5183: CALL 5432 0 2
5187: NOT
5188: IFFALSE 5247
// repeat engine := _engine [ 1 ] ;
5190: LD_ADDR_VAR 0 3
5194: PUSH
5195: LD_VAR 0 11
5199: PUSH
5200: LD_INT 1
5202: ARRAY
5203: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5204: LD_ADDR_VAR 0 11
5208: PUSH
5209: LD_VAR 0 11
5213: PPUSH
5214: LD_INT 1
5216: PPUSH
5217: CALL_OW 3
5221: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5222: LD_VAR 0 2
5226: PPUSH
5227: LD_VAR 0 3
5231: PPUSH
5232: CALL 5432 0 2
5236: PUSH
5237: LD_VAR 0 11
5241: PUSH
5242: EMPTY
5243: EQUAL
5244: OR
5245: IFFALSE 5190
// if not control in _control then
5247: LD_VAR 0 4
5251: PUSH
5252: LD_VAR 0 12
5256: IN
5257: NOT
5258: IFFALSE 5284
// control := _control [ rand ( 1 , _control ) ] ;
5260: LD_ADDR_VAR 0 4
5264: PUSH
5265: LD_VAR 0 12
5269: PUSH
5270: LD_INT 1
5272: PPUSH
5273: LD_VAR 0 12
5277: PPUSH
5278: CALL_OW 12
5282: ARRAY
5283: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5284: LD_VAR 0 2
5288: PPUSH
5289: LD_VAR 0 5
5293: PPUSH
5294: CALL 5652 0 2
5298: NOT
5299: IFFALSE 5358
// repeat weapon := _weapon [ 1 ] ;
5301: LD_ADDR_VAR 0 5
5305: PUSH
5306: LD_VAR 0 10
5310: PUSH
5311: LD_INT 1
5313: ARRAY
5314: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5315: LD_ADDR_VAR 0 10
5319: PUSH
5320: LD_VAR 0 10
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: CALL_OW 3
5332: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5333: LD_VAR 0 2
5337: PPUSH
5338: LD_VAR 0 5
5342: PPUSH
5343: CALL 5652 0 2
5347: PUSH
5348: LD_VAR 0 10
5352: PUSH
5353: EMPTY
5354: EQUAL
5355: OR
5356: IFFALSE 5301
// result := [ ] ;
5358: LD_ADDR_VAR 0 6
5362: PUSH
5363: EMPTY
5364: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_VAR 0 2
5374: PPUSH
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_VAR 0 4
5384: PPUSH
5385: LD_VAR 0 5
5389: PPUSH
5390: CALL_OW 448
5394: IFFALSE 5427
// result := [ chassis , engine , control , weapon ] ;
5396: LD_ADDR_VAR 0 6
5400: PUSH
5401: LD_VAR 0 2
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: LD_VAR 0 4
5415: PUSH
5416: LD_VAR 0 5
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: ST_TO_ADDR
// end ;
5427: LD_VAR 0 6
5431: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5432: LD_INT 0
5434: PPUSH
// if not chassis or not engine then
5435: LD_VAR 0 1
5439: NOT
5440: PUSH
5441: LD_VAR 0 2
5445: NOT
5446: OR
5447: IFFALSE 5451
// exit ;
5449: GO 5647
// case engine of engine_solar :
5451: LD_VAR 0 2
5455: PUSH
5456: LD_INT 2
5458: DOUBLE
5459: EQUAL
5460: IFTRUE 5464
5462: GO 5502
5464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5465: LD_ADDR_VAR 0 3
5469: PUSH
5470: LD_INT 11
5472: PUSH
5473: LD_INT 12
5475: PUSH
5476: LD_INT 13
5478: PUSH
5479: LD_INT 14
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: LD_INT 2
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: ST_TO_ADDR
5500: GO 5631
5502: LD_INT 1
5504: DOUBLE
5505: EQUAL
5506: IFTRUE 5510
5508: GO 5572
5510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_INT 11
5518: PUSH
5519: LD_INT 12
5521: PUSH
5522: LD_INT 13
5524: PUSH
5525: LD_INT 14
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: LD_INT 3
5536: PUSH
5537: LD_INT 4
5539: PUSH
5540: LD_INT 5
5542: PUSH
5543: LD_INT 21
5545: PUSH
5546: LD_INT 23
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_INT 24
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: ST_TO_ADDR
5570: GO 5631
5572: LD_INT 3
5574: DOUBLE
5575: EQUAL
5576: IFTRUE 5580
5578: GO 5630
5580: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5581: LD_ADDR_VAR 0 3
5585: PUSH
5586: LD_INT 13
5588: PUSH
5589: LD_INT 14
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 4
5600: PUSH
5601: LD_INT 5
5603: PUSH
5604: LD_INT 21
5606: PUSH
5607: LD_INT 22
5609: PUSH
5610: LD_INT 23
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: ST_TO_ADDR
5628: GO 5631
5630: POP
// result := ( chassis in result ) ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: LD_VAR 0 1
5640: PUSH
5641: LD_VAR 0 3
5645: IN
5646: ST_TO_ADDR
// end ;
5647: LD_VAR 0 3
5651: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
5652: LD_INT 0
5654: PPUSH
// if not chassis or not weapon then
5655: LD_VAR 0 1
5659: NOT
5660: PUSH
5661: LD_VAR 0 2
5665: NOT
5666: OR
5667: IFFALSE 5671
// exit ;
5669: GO 6733
// case weapon of us_machine_gun :
5671: LD_VAR 0 2
5675: PUSH
5676: LD_INT 2
5678: DOUBLE
5679: EQUAL
5680: IFTRUE 5684
5682: GO 5714
5684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
5685: LD_ADDR_VAR 0 3
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: LD_INT 2
5695: PUSH
5696: LD_INT 3
5698: PUSH
5699: LD_INT 4
5701: PUSH
5702: LD_INT 5
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: ST_TO_ADDR
5712: GO 6717
5714: LD_INT 3
5716: DOUBLE
5717: EQUAL
5718: IFTRUE 5722
5720: GO 5752
5722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 1
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: LD_INT 3
5736: PUSH
5737: LD_INT 4
5739: PUSH
5740: LD_INT 5
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: ST_TO_ADDR
5750: GO 6717
5752: LD_INT 11
5754: DOUBLE
5755: EQUAL
5756: IFTRUE 5760
5758: GO 5790
5760: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
5761: LD_ADDR_VAR 0 3
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: LD_INT 2
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 4
5777: PUSH
5778: LD_INT 5
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: ST_TO_ADDR
5788: GO 6717
5790: LD_INT 4
5792: DOUBLE
5793: EQUAL
5794: IFTRUE 5798
5796: GO 5824
5798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
5799: LD_ADDR_VAR 0 3
5803: PUSH
5804: LD_INT 2
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: LD_INT 4
5812: PUSH
5813: LD_INT 5
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: ST_TO_ADDR
5822: GO 6717
5824: LD_INT 5
5826: DOUBLE
5827: EQUAL
5828: IFTRUE 5832
5830: GO 5858
5832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
5833: LD_ADDR_VAR 0 3
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: LD_INT 3
5843: PUSH
5844: LD_INT 4
5846: PUSH
5847: LD_INT 5
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: ST_TO_ADDR
5856: GO 6717
5858: LD_INT 9
5860: DOUBLE
5861: EQUAL
5862: IFTRUE 5866
5864: GO 5892
5866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 2
5874: PUSH
5875: LD_INT 3
5877: PUSH
5878: LD_INT 4
5880: PUSH
5881: LD_INT 5
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: ST_TO_ADDR
5890: GO 6717
5892: LD_INT 7
5894: DOUBLE
5895: EQUAL
5896: IFTRUE 5900
5898: GO 5926
5900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
5901: LD_ADDR_VAR 0 3
5905: PUSH
5906: LD_INT 2
5908: PUSH
5909: LD_INT 3
5911: PUSH
5912: LD_INT 4
5914: PUSH
5915: LD_INT 5
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: ST_TO_ADDR
5924: GO 6717
5926: LD_INT 12
5928: DOUBLE
5929: EQUAL
5930: IFTRUE 5934
5932: GO 5960
5934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
5935: LD_ADDR_VAR 0 3
5939: PUSH
5940: LD_INT 2
5942: PUSH
5943: LD_INT 3
5945: PUSH
5946: LD_INT 4
5948: PUSH
5949: LD_INT 5
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: ST_TO_ADDR
5958: GO 6717
5960: LD_INT 13
5962: DOUBLE
5963: EQUAL
5964: IFTRUE 5968
5966: GO 5994
5968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
5969: LD_ADDR_VAR 0 3
5973: PUSH
5974: LD_INT 2
5976: PUSH
5977: LD_INT 3
5979: PUSH
5980: LD_INT 4
5982: PUSH
5983: LD_INT 5
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: ST_TO_ADDR
5992: GO 6717
5994: LD_INT 14
5996: DOUBLE
5997: EQUAL
5998: IFTRUE 6002
6000: GO 6020
6002: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6003: LD_ADDR_VAR 0 3
6007: PUSH
6008: LD_INT 4
6010: PUSH
6011: LD_INT 5
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: ST_TO_ADDR
6018: GO 6717
6020: LD_INT 6
6022: DOUBLE
6023: EQUAL
6024: IFTRUE 6028
6026: GO 6046
6028: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6029: LD_ADDR_VAR 0 3
6033: PUSH
6034: LD_INT 4
6036: PUSH
6037: LD_INT 5
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: ST_TO_ADDR
6044: GO 6717
6046: LD_INT 10
6048: DOUBLE
6049: EQUAL
6050: IFTRUE 6054
6052: GO 6072
6054: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6055: LD_ADDR_VAR 0 3
6059: PUSH
6060: LD_INT 4
6062: PUSH
6063: LD_INT 5
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: ST_TO_ADDR
6070: GO 6717
6072: LD_INT 22
6074: DOUBLE
6075: EQUAL
6076: IFTRUE 6080
6078: GO 6106
6080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6081: LD_ADDR_VAR 0 3
6085: PUSH
6086: LD_INT 11
6088: PUSH
6089: LD_INT 12
6091: PUSH
6092: LD_INT 13
6094: PUSH
6095: LD_INT 14
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: ST_TO_ADDR
6104: GO 6717
6106: LD_INT 23
6108: DOUBLE
6109: EQUAL
6110: IFTRUE 6114
6112: GO 6140
6114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6115: LD_ADDR_VAR 0 3
6119: PUSH
6120: LD_INT 11
6122: PUSH
6123: LD_INT 12
6125: PUSH
6126: LD_INT 13
6128: PUSH
6129: LD_INT 14
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: ST_TO_ADDR
6138: GO 6717
6140: LD_INT 24
6142: DOUBLE
6143: EQUAL
6144: IFTRUE 6148
6146: GO 6174
6148: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6149: LD_ADDR_VAR 0 3
6153: PUSH
6154: LD_INT 11
6156: PUSH
6157: LD_INT 12
6159: PUSH
6160: LD_INT 13
6162: PUSH
6163: LD_INT 14
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: ST_TO_ADDR
6172: GO 6717
6174: LD_INT 30
6176: DOUBLE
6177: EQUAL
6178: IFTRUE 6182
6180: GO 6208
6182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6183: LD_ADDR_VAR 0 3
6187: PUSH
6188: LD_INT 11
6190: PUSH
6191: LD_INT 12
6193: PUSH
6194: LD_INT 13
6196: PUSH
6197: LD_INT 14
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
6206: GO 6717
6208: LD_INT 25
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6234
6216: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6217: LD_ADDR_VAR 0 3
6221: PUSH
6222: LD_INT 13
6224: PUSH
6225: LD_INT 14
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: ST_TO_ADDR
6232: GO 6717
6234: LD_INT 27
6236: DOUBLE
6237: EQUAL
6238: IFTRUE 6242
6240: GO 6260
6242: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: LD_INT 13
6250: PUSH
6251: LD_INT 14
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: ST_TO_ADDR
6258: GO 6717
6260: LD_EXP 85
6264: DOUBLE
6265: EQUAL
6266: IFTRUE 6270
6268: GO 6296
6270: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_INT 11
6278: PUSH
6279: LD_INT 12
6281: PUSH
6282: LD_INT 13
6284: PUSH
6285: LD_INT 14
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: ST_TO_ADDR
6294: GO 6717
6296: LD_INT 28
6298: DOUBLE
6299: EQUAL
6300: IFTRUE 6304
6302: GO 6322
6304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6305: LD_ADDR_VAR 0 3
6309: PUSH
6310: LD_INT 13
6312: PUSH
6313: LD_INT 14
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: ST_TO_ADDR
6320: GO 6717
6322: LD_INT 29
6324: DOUBLE
6325: EQUAL
6326: IFTRUE 6330
6328: GO 6348
6330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6331: LD_ADDR_VAR 0 3
6335: PUSH
6336: LD_INT 13
6338: PUSH
6339: LD_INT 14
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: ST_TO_ADDR
6346: GO 6717
6348: LD_INT 31
6350: DOUBLE
6351: EQUAL
6352: IFTRUE 6356
6354: GO 6374
6356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6357: LD_ADDR_VAR 0 3
6361: PUSH
6362: LD_INT 13
6364: PUSH
6365: LD_INT 14
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: ST_TO_ADDR
6372: GO 6717
6374: LD_INT 26
6376: DOUBLE
6377: EQUAL
6378: IFTRUE 6382
6380: GO 6400
6382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6383: LD_ADDR_VAR 0 3
6387: PUSH
6388: LD_INT 13
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: ST_TO_ADDR
6398: GO 6717
6400: LD_INT 42
6402: DOUBLE
6403: EQUAL
6404: IFTRUE 6408
6406: GO 6434
6408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6409: LD_ADDR_VAR 0 3
6413: PUSH
6414: LD_INT 21
6416: PUSH
6417: LD_INT 22
6419: PUSH
6420: LD_INT 23
6422: PUSH
6423: LD_INT 24
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: ST_TO_ADDR
6432: GO 6717
6434: LD_INT 43
6436: DOUBLE
6437: EQUAL
6438: IFTRUE 6442
6440: GO 6468
6442: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 23
6456: PUSH
6457: LD_INT 24
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: ST_TO_ADDR
6466: GO 6717
6468: LD_INT 44
6470: DOUBLE
6471: EQUAL
6472: IFTRUE 6476
6474: GO 6502
6476: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6477: LD_ADDR_VAR 0 3
6481: PUSH
6482: LD_INT 21
6484: PUSH
6485: LD_INT 22
6487: PUSH
6488: LD_INT 23
6490: PUSH
6491: LD_INT 24
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: ST_TO_ADDR
6500: GO 6717
6502: LD_INT 45
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6536
6510: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6511: LD_ADDR_VAR 0 3
6515: PUSH
6516: LD_INT 21
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 23
6524: PUSH
6525: LD_INT 24
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: ST_TO_ADDR
6534: GO 6717
6536: LD_INT 49
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6570
6544: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6545: LD_ADDR_VAR 0 3
6549: PUSH
6550: LD_INT 21
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_INT 23
6558: PUSH
6559: LD_INT 24
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: ST_TO_ADDR
6568: GO 6717
6570: LD_INT 51
6572: DOUBLE
6573: EQUAL
6574: IFTRUE 6578
6576: GO 6604
6578: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
6579: LD_ADDR_VAR 0 3
6583: PUSH
6584: LD_INT 21
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_INT 23
6592: PUSH
6593: LD_INT 24
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: ST_TO_ADDR
6602: GO 6717
6604: LD_INT 52
6606: DOUBLE
6607: EQUAL
6608: IFTRUE 6612
6610: GO 6638
6612: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: LD_INT 21
6620: PUSH
6621: LD_INT 22
6623: PUSH
6624: LD_INT 23
6626: PUSH
6627: LD_INT 24
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: ST_TO_ADDR
6636: GO 6717
6638: LD_INT 53
6640: DOUBLE
6641: EQUAL
6642: IFTRUE 6646
6644: GO 6664
6646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
6647: LD_ADDR_VAR 0 3
6651: PUSH
6652: LD_INT 23
6654: PUSH
6655: LD_INT 24
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 6717
6664: LD_INT 46
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6690
6672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 23
6680: PUSH
6681: LD_INT 24
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: ST_TO_ADDR
6688: GO 6717
6690: LD_INT 47
6692: DOUBLE
6693: EQUAL
6694: IFTRUE 6698
6696: GO 6716
6698: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6699: LD_ADDR_VAR 0 3
6703: PUSH
6704: LD_INT 23
6706: PUSH
6707: LD_INT 24
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: ST_TO_ADDR
6714: GO 6717
6716: POP
// result := ( chassis in result ) ;
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_VAR 0 1
6726: PUSH
6727: LD_VAR 0 3
6731: IN
6732: ST_TO_ADDR
// end ;
6733: LD_VAR 0 3
6737: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
6738: LD_INT 0
6740: PPUSH
6741: PPUSH
6742: PPUSH
6743: PPUSH
6744: PPUSH
6745: PPUSH
6746: PPUSH
// result := array ;
6747: LD_ADDR_VAR 0 5
6751: PUSH
6752: LD_VAR 0 1
6756: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
6757: LD_VAR 0 1
6761: NOT
6762: PUSH
6763: LD_VAR 0 2
6767: NOT
6768: OR
6769: PUSH
6770: LD_VAR 0 3
6774: NOT
6775: OR
6776: PUSH
6777: LD_VAR 0 2
6781: PUSH
6782: LD_VAR 0 1
6786: GREATER
6787: OR
6788: PUSH
6789: LD_VAR 0 3
6793: PUSH
6794: LD_VAR 0 1
6798: GREATER
6799: OR
6800: IFFALSE 6804
// exit ;
6802: GO 7100
// if direction then
6804: LD_VAR 0 4
6808: IFFALSE 6872
// begin d := 1 ;
6810: LD_ADDR_VAR 0 9
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// if i_from > i_to then
6818: LD_VAR 0 2
6822: PUSH
6823: LD_VAR 0 3
6827: GREATER
6828: IFFALSE 6854
// length := ( array - i_from ) + i_to else
6830: LD_ADDR_VAR 0 11
6834: PUSH
6835: LD_VAR 0 1
6839: PUSH
6840: LD_VAR 0 2
6844: MINUS
6845: PUSH
6846: LD_VAR 0 3
6850: PLUS
6851: ST_TO_ADDR
6852: GO 6870
// length := i_to - i_from ;
6854: LD_ADDR_VAR 0 11
6858: PUSH
6859: LD_VAR 0 3
6863: PUSH
6864: LD_VAR 0 2
6868: MINUS
6869: ST_TO_ADDR
// end else
6870: GO 6933
// begin d := - 1 ;
6872: LD_ADDR_VAR 0 9
6876: PUSH
6877: LD_INT 1
6879: NEG
6880: ST_TO_ADDR
// if i_from > i_to then
6881: LD_VAR 0 2
6885: PUSH
6886: LD_VAR 0 3
6890: GREATER
6891: IFFALSE 6911
// length := i_from - i_to else
6893: LD_ADDR_VAR 0 11
6897: PUSH
6898: LD_VAR 0 2
6902: PUSH
6903: LD_VAR 0 3
6907: MINUS
6908: ST_TO_ADDR
6909: GO 6933
// length := ( array - i_to ) + i_from ;
6911: LD_ADDR_VAR 0 11
6915: PUSH
6916: LD_VAR 0 1
6920: PUSH
6921: LD_VAR 0 3
6925: MINUS
6926: PUSH
6927: LD_VAR 0 2
6931: PLUS
6932: ST_TO_ADDR
// end ; if not length then
6933: LD_VAR 0 11
6937: NOT
6938: IFFALSE 6942
// exit ;
6940: GO 7100
// tmp := array ;
6942: LD_ADDR_VAR 0 10
6946: PUSH
6947: LD_VAR 0 1
6951: ST_TO_ADDR
// for i = 1 to length do
6952: LD_ADDR_VAR 0 6
6956: PUSH
6957: DOUBLE
6958: LD_INT 1
6960: DEC
6961: ST_TO_ADDR
6962: LD_VAR 0 11
6966: PUSH
6967: FOR_TO
6968: IFFALSE 7088
// begin for j = 1 to array do
6970: LD_ADDR_VAR 0 7
6974: PUSH
6975: DOUBLE
6976: LD_INT 1
6978: DEC
6979: ST_TO_ADDR
6980: LD_VAR 0 1
6984: PUSH
6985: FOR_TO
6986: IFFALSE 7074
// begin k := j + d ;
6988: LD_ADDR_VAR 0 8
6992: PUSH
6993: LD_VAR 0 7
6997: PUSH
6998: LD_VAR 0 9
7002: PLUS
7003: ST_TO_ADDR
// if k > array then
7004: LD_VAR 0 8
7008: PUSH
7009: LD_VAR 0 1
7013: GREATER
7014: IFFALSE 7024
// k := 1 ;
7016: LD_ADDR_VAR 0 8
7020: PUSH
7021: LD_INT 1
7023: ST_TO_ADDR
// if not k then
7024: LD_VAR 0 8
7028: NOT
7029: IFFALSE 7041
// k := array ;
7031: LD_ADDR_VAR 0 8
7035: PUSH
7036: LD_VAR 0 1
7040: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7041: LD_ADDR_VAR 0 10
7045: PUSH
7046: LD_VAR 0 10
7050: PPUSH
7051: LD_VAR 0 8
7055: PPUSH
7056: LD_VAR 0 1
7060: PUSH
7061: LD_VAR 0 7
7065: ARRAY
7066: PPUSH
7067: CALL_OW 1
7071: ST_TO_ADDR
// end ;
7072: GO 6985
7074: POP
7075: POP
// array := tmp ;
7076: LD_ADDR_VAR 0 1
7080: PUSH
7081: LD_VAR 0 10
7085: ST_TO_ADDR
// end ;
7086: GO 6967
7088: POP
7089: POP
// result := array ;
7090: LD_ADDR_VAR 0 5
7094: PUSH
7095: LD_VAR 0 1
7099: ST_TO_ADDR
// end ;
7100: LD_VAR 0 5
7104: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7105: LD_INT 0
7107: PPUSH
7108: PPUSH
// result := 0 ;
7109: LD_ADDR_VAR 0 3
7113: PUSH
7114: LD_INT 0
7116: ST_TO_ADDR
// if not array or not value in array then
7117: LD_VAR 0 1
7121: NOT
7122: PUSH
7123: LD_VAR 0 2
7127: PUSH
7128: LD_VAR 0 1
7132: IN
7133: NOT
7134: OR
7135: IFFALSE 7139
// exit ;
7137: GO 7193
// for i = 1 to array do
7139: LD_ADDR_VAR 0 4
7143: PUSH
7144: DOUBLE
7145: LD_INT 1
7147: DEC
7148: ST_TO_ADDR
7149: LD_VAR 0 1
7153: PUSH
7154: FOR_TO
7155: IFFALSE 7191
// if value = array [ i ] then
7157: LD_VAR 0 2
7161: PUSH
7162: LD_VAR 0 1
7166: PUSH
7167: LD_VAR 0 4
7171: ARRAY
7172: EQUAL
7173: IFFALSE 7189
// begin result := i ;
7175: LD_ADDR_VAR 0 3
7179: PUSH
7180: LD_VAR 0 4
7184: ST_TO_ADDR
// exit ;
7185: POP
7186: POP
7187: GO 7193
// end ;
7189: GO 7154
7191: POP
7192: POP
// end ;
7193: LD_VAR 0 3
7197: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7198: LD_INT 0
7200: PPUSH
// vc_chassis := chassis ;
7201: LD_ADDR_OWVAR 37
7205: PUSH
7206: LD_VAR 0 1
7210: ST_TO_ADDR
// vc_engine := engine ;
7211: LD_ADDR_OWVAR 39
7215: PUSH
7216: LD_VAR 0 2
7220: ST_TO_ADDR
// vc_control := control ;
7221: LD_ADDR_OWVAR 38
7225: PUSH
7226: LD_VAR 0 3
7230: ST_TO_ADDR
// vc_weapon := weapon ;
7231: LD_ADDR_OWVAR 40
7235: PUSH
7236: LD_VAR 0 4
7240: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7241: LD_ADDR_OWVAR 41
7245: PUSH
7246: LD_VAR 0 5
7250: ST_TO_ADDR
// end ;
7251: LD_VAR 0 6
7255: RET
// export function WantPlant ( unit ) ; var task ; begin
7256: LD_INT 0
7258: PPUSH
7259: PPUSH
// result := false ;
7260: LD_ADDR_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7268: LD_ADDR_VAR 0 3
7272: PUSH
7273: LD_VAR 0 1
7277: PPUSH
7278: CALL_OW 437
7282: ST_TO_ADDR
// if task then
7283: LD_VAR 0 3
7287: IFFALSE 7315
// if task [ 1 ] [ 1 ] = p then
7289: LD_VAR 0 3
7293: PUSH
7294: LD_INT 1
7296: ARRAY
7297: PUSH
7298: LD_INT 1
7300: ARRAY
7301: PUSH
7302: LD_STRING p
7304: EQUAL
7305: IFFALSE 7315
// result := true ;
7307: LD_ADDR_VAR 0 2
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// end ;
7315: LD_VAR 0 2
7319: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7320: LD_INT 0
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// if pos < 1 then
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 1
7333: LESS
7334: IFFALSE 7338
// exit ;
7336: GO 7641
// if pos = 1 then
7338: LD_VAR 0 2
7342: PUSH
7343: LD_INT 1
7345: EQUAL
7346: IFFALSE 7379
// result := Replace ( arr , pos [ 1 ] , value ) else
7348: LD_ADDR_VAR 0 4
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_VAR 0 2
7362: PUSH
7363: LD_INT 1
7365: ARRAY
7366: PPUSH
7367: LD_VAR 0 3
7371: PPUSH
7372: CALL_OW 1
7376: ST_TO_ADDR
7377: GO 7641
// begin tmp := arr ;
7379: LD_ADDR_VAR 0 6
7383: PUSH
7384: LD_VAR 0 1
7388: ST_TO_ADDR
// s_arr := [ tmp ] ;
7389: LD_ADDR_VAR 0 7
7393: PUSH
7394: LD_VAR 0 6
7398: PUSH
7399: EMPTY
7400: LIST
7401: ST_TO_ADDR
// for i = 1 to pos - 1 do
7402: LD_ADDR_VAR 0 5
7406: PUSH
7407: DOUBLE
7408: LD_INT 1
7410: DEC
7411: ST_TO_ADDR
7412: LD_VAR 0 2
7416: PUSH
7417: LD_INT 1
7419: MINUS
7420: PUSH
7421: FOR_TO
7422: IFFALSE 7467
// begin tmp := tmp [ pos [ i ] ] ;
7424: LD_ADDR_VAR 0 6
7428: PUSH
7429: LD_VAR 0 6
7433: PUSH
7434: LD_VAR 0 2
7438: PUSH
7439: LD_VAR 0 5
7443: ARRAY
7444: ARRAY
7445: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7446: LD_ADDR_VAR 0 7
7450: PUSH
7451: LD_VAR 0 7
7455: PUSH
7456: LD_VAR 0 6
7460: PUSH
7461: EMPTY
7462: LIST
7463: ADD
7464: ST_TO_ADDR
// end ;
7465: GO 7421
7467: POP
7468: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7469: LD_ADDR_VAR 0 6
7473: PUSH
7474: LD_VAR 0 6
7478: PPUSH
7479: LD_VAR 0 2
7483: PUSH
7484: LD_VAR 0 2
7488: ARRAY
7489: PPUSH
7490: LD_VAR 0 3
7494: PPUSH
7495: CALL_OW 1
7499: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7500: LD_ADDR_VAR 0 7
7504: PUSH
7505: LD_VAR 0 7
7509: PPUSH
7510: LD_VAR 0 7
7514: PPUSH
7515: LD_VAR 0 6
7519: PPUSH
7520: CALL_OW 1
7524: ST_TO_ADDR
// for i = s_arr downto 2 do
7525: LD_ADDR_VAR 0 5
7529: PUSH
7530: DOUBLE
7531: LD_VAR 0 7
7535: INC
7536: ST_TO_ADDR
7537: LD_INT 2
7539: PUSH
7540: FOR_DOWNTO
7541: IFFALSE 7625
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7543: LD_ADDR_VAR 0 6
7547: PUSH
7548: LD_VAR 0 7
7552: PUSH
7553: LD_VAR 0 5
7557: PUSH
7558: LD_INT 1
7560: MINUS
7561: ARRAY
7562: PPUSH
7563: LD_VAR 0 2
7567: PUSH
7568: LD_VAR 0 5
7572: PUSH
7573: LD_INT 1
7575: MINUS
7576: ARRAY
7577: PPUSH
7578: LD_VAR 0 7
7582: PUSH
7583: LD_VAR 0 5
7587: ARRAY
7588: PPUSH
7589: CALL_OW 1
7593: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
7594: LD_ADDR_VAR 0 7
7598: PUSH
7599: LD_VAR 0 7
7603: PPUSH
7604: LD_VAR 0 5
7608: PUSH
7609: LD_INT 1
7611: MINUS
7612: PPUSH
7613: LD_VAR 0 6
7617: PPUSH
7618: CALL_OW 1
7622: ST_TO_ADDR
// end ;
7623: GO 7540
7625: POP
7626: POP
// result := s_arr [ 1 ] ;
7627: LD_ADDR_VAR 0 4
7631: PUSH
7632: LD_VAR 0 7
7636: PUSH
7637: LD_INT 1
7639: ARRAY
7640: ST_TO_ADDR
// end ; end ;
7641: LD_VAR 0 4
7645: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
// if not list then
7650: LD_VAR 0 1
7654: NOT
7655: IFFALSE 7659
// exit ;
7657: GO 7750
// i := list [ pos1 ] ;
7659: LD_ADDR_VAR 0 5
7663: PUSH
7664: LD_VAR 0 1
7668: PUSH
7669: LD_VAR 0 2
7673: ARRAY
7674: ST_TO_ADDR
// if not i then
7675: LD_VAR 0 5
7679: NOT
7680: IFFALSE 7684
// exit ;
7682: GO 7750
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
7684: LD_ADDR_VAR 0 1
7688: PUSH
7689: LD_VAR 0 1
7693: PPUSH
7694: LD_VAR 0 2
7698: PPUSH
7699: LD_VAR 0 1
7703: PUSH
7704: LD_VAR 0 3
7708: ARRAY
7709: PPUSH
7710: CALL_OW 1
7714: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
7715: LD_ADDR_VAR 0 1
7719: PUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: LD_VAR 0 3
7729: PPUSH
7730: LD_VAR 0 5
7734: PPUSH
7735: CALL_OW 1
7739: ST_TO_ADDR
// result := list ;
7740: LD_ADDR_VAR 0 4
7744: PUSH
7745: LD_VAR 0 1
7749: ST_TO_ADDR
// end ;
7750: LD_VAR 0 4
7754: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
7755: LD_INT 0
7757: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
7758: LD_ADDR_VAR 0 5
7762: PUSH
7763: LD_VAR 0 1
7767: PPUSH
7768: CALL_OW 250
7772: PPUSH
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 251
7782: PPUSH
7783: LD_VAR 0 2
7787: PPUSH
7788: LD_VAR 0 3
7792: PPUSH
7793: LD_VAR 0 4
7797: PPUSH
7798: CALL 7808 0 5
7802: ST_TO_ADDR
// end ;
7803: LD_VAR 0 5
7807: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
7808: LD_INT 0
7810: PPUSH
7811: PPUSH
7812: PPUSH
7813: PPUSH
// if not list then
7814: LD_VAR 0 3
7818: NOT
7819: IFFALSE 7823
// exit ;
7821: GO 8211
// result := [ ] ;
7823: LD_ADDR_VAR 0 6
7827: PUSH
7828: EMPTY
7829: ST_TO_ADDR
// for i in list do
7830: LD_ADDR_VAR 0 7
7834: PUSH
7835: LD_VAR 0 3
7839: PUSH
7840: FOR_IN
7841: IFFALSE 8043
// begin tmp := GetDistUnitXY ( i , x , y ) ;
7843: LD_ADDR_VAR 0 9
7847: PUSH
7848: LD_VAR 0 7
7852: PPUSH
7853: LD_VAR 0 1
7857: PPUSH
7858: LD_VAR 0 2
7862: PPUSH
7863: CALL_OW 297
7867: ST_TO_ADDR
// if not result then
7868: LD_VAR 0 6
7872: NOT
7873: IFFALSE 7899
// result := [ [ i , tmp ] ] else
7875: LD_ADDR_VAR 0 6
7879: PUSH
7880: LD_VAR 0 7
7884: PUSH
7885: LD_VAR 0 9
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: ST_TO_ADDR
7897: GO 8041
// begin if result [ result ] [ 2 ] < tmp then
7899: LD_VAR 0 6
7903: PUSH
7904: LD_VAR 0 6
7908: ARRAY
7909: PUSH
7910: LD_INT 2
7912: ARRAY
7913: PUSH
7914: LD_VAR 0 9
7918: LESS
7919: IFFALSE 7961
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
7921: LD_ADDR_VAR 0 6
7925: PUSH
7926: LD_VAR 0 6
7930: PPUSH
7931: LD_VAR 0 6
7935: PUSH
7936: LD_INT 1
7938: PLUS
7939: PPUSH
7940: LD_VAR 0 7
7944: PUSH
7945: LD_VAR 0 9
7949: PUSH
7950: EMPTY
7951: LIST
7952: LIST
7953: PPUSH
7954: CALL_OW 2
7958: ST_TO_ADDR
7959: GO 8041
// for j = 1 to result do
7961: LD_ADDR_VAR 0 8
7965: PUSH
7966: DOUBLE
7967: LD_INT 1
7969: DEC
7970: ST_TO_ADDR
7971: LD_VAR 0 6
7975: PUSH
7976: FOR_TO
7977: IFFALSE 8039
// begin if tmp < result [ j ] [ 2 ] then
7979: LD_VAR 0 9
7983: PUSH
7984: LD_VAR 0 6
7988: PUSH
7989: LD_VAR 0 8
7993: ARRAY
7994: PUSH
7995: LD_INT 2
7997: ARRAY
7998: LESS
7999: IFFALSE 8037
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8001: LD_ADDR_VAR 0 6
8005: PUSH
8006: LD_VAR 0 6
8010: PPUSH
8011: LD_VAR 0 8
8015: PPUSH
8016: LD_VAR 0 7
8020: PUSH
8021: LD_VAR 0 9
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 2
8034: ST_TO_ADDR
// break ;
8035: GO 8039
// end ; end ;
8037: GO 7976
8039: POP
8040: POP
// end ; end ;
8041: GO 7840
8043: POP
8044: POP
// if result and not asc then
8045: LD_VAR 0 6
8049: PUSH
8050: LD_VAR 0 4
8054: NOT
8055: AND
8056: IFFALSE 8131
// begin tmp := result ;
8058: LD_ADDR_VAR 0 9
8062: PUSH
8063: LD_VAR 0 6
8067: ST_TO_ADDR
// for i = tmp downto 1 do
8068: LD_ADDR_VAR 0 7
8072: PUSH
8073: DOUBLE
8074: LD_VAR 0 9
8078: INC
8079: ST_TO_ADDR
8080: LD_INT 1
8082: PUSH
8083: FOR_DOWNTO
8084: IFFALSE 8129
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8086: LD_ADDR_VAR 0 6
8090: PUSH
8091: LD_VAR 0 6
8095: PPUSH
8096: LD_VAR 0 9
8100: PUSH
8101: LD_VAR 0 7
8105: MINUS
8106: PUSH
8107: LD_INT 1
8109: PLUS
8110: PPUSH
8111: LD_VAR 0 9
8115: PUSH
8116: LD_VAR 0 7
8120: ARRAY
8121: PPUSH
8122: CALL_OW 1
8126: ST_TO_ADDR
8127: GO 8083
8129: POP
8130: POP
// end ; tmp := [ ] ;
8131: LD_ADDR_VAR 0 9
8135: PUSH
8136: EMPTY
8137: ST_TO_ADDR
// if mode then
8138: LD_VAR 0 5
8142: IFFALSE 8211
// begin for i = 1 to result do
8144: LD_ADDR_VAR 0 7
8148: PUSH
8149: DOUBLE
8150: LD_INT 1
8152: DEC
8153: ST_TO_ADDR
8154: LD_VAR 0 6
8158: PUSH
8159: FOR_TO
8160: IFFALSE 8199
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8162: LD_ADDR_VAR 0 9
8166: PUSH
8167: LD_VAR 0 9
8171: PPUSH
8172: LD_VAR 0 7
8176: PPUSH
8177: LD_VAR 0 6
8181: PUSH
8182: LD_VAR 0 7
8186: ARRAY
8187: PUSH
8188: LD_INT 1
8190: ARRAY
8191: PPUSH
8192: CALL_OW 1
8196: ST_TO_ADDR
8197: GO 8159
8199: POP
8200: POP
// result := tmp ;
8201: LD_ADDR_VAR 0 6
8205: PUSH
8206: LD_VAR 0 9
8210: ST_TO_ADDR
// end ; end ;
8211: LD_VAR 0 6
8215: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8216: LD_INT 0
8218: PPUSH
8219: PPUSH
8220: PPUSH
8221: PPUSH
8222: PPUSH
8223: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8224: LD_ADDR_VAR 0 5
8228: PUSH
8229: LD_INT 0
8231: PUSH
8232: LD_INT 0
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: EMPTY
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: ST_TO_ADDR
// if not x or not y then
8246: LD_VAR 0 2
8250: NOT
8251: PUSH
8252: LD_VAR 0 3
8256: NOT
8257: OR
8258: IFFALSE 8262
// exit ;
8260: GO 9914
// if not range then
8262: LD_VAR 0 4
8266: NOT
8267: IFFALSE 8277
// range := 10 ;
8269: LD_ADDR_VAR 0 4
8273: PUSH
8274: LD_INT 10
8276: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8277: LD_ADDR_VAR 0 8
8281: PUSH
8282: LD_INT 81
8284: PUSH
8285: LD_VAR 0 1
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: LD_INT 92
8296: PUSH
8297: LD_VAR 0 2
8301: PUSH
8302: LD_VAR 0 3
8306: PUSH
8307: LD_VAR 0 4
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: LD_INT 21
8323: PUSH
8324: LD_INT 3
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: LIST
8339: PPUSH
8340: CALL_OW 69
8344: ST_TO_ADDR
// if not tmp then
8345: LD_VAR 0 8
8349: NOT
8350: IFFALSE 8354
// exit ;
8352: GO 9914
// for i in tmp do
8354: LD_ADDR_VAR 0 6
8358: PUSH
8359: LD_VAR 0 8
8363: PUSH
8364: FOR_IN
8365: IFFALSE 9889
// begin points := [ 0 , 0 , 0 ] ;
8367: LD_ADDR_VAR 0 9
8371: PUSH
8372: LD_INT 0
8374: PUSH
8375: LD_INT 0
8377: PUSH
8378: LD_INT 0
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// bpoints := 1 ;
8386: LD_ADDR_VAR 0 10
8390: PUSH
8391: LD_INT 1
8393: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8394: LD_VAR 0 6
8398: PPUSH
8399: CALL_OW 247
8403: PUSH
8404: LD_INT 1
8406: DOUBLE
8407: EQUAL
8408: IFTRUE 8412
8410: GO 8990
8412: POP
// begin if GetClass ( i ) = 1 then
8413: LD_VAR 0 6
8417: PPUSH
8418: CALL_OW 257
8422: PUSH
8423: LD_INT 1
8425: EQUAL
8426: IFFALSE 8447
// points := [ 10 , 5 , 3 ] ;
8428: LD_ADDR_VAR 0 9
8432: PUSH
8433: LD_INT 10
8435: PUSH
8436: LD_INT 5
8438: PUSH
8439: LD_INT 3
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8447: LD_VAR 0 6
8451: PPUSH
8452: CALL_OW 257
8456: PUSH
8457: LD_INT 2
8459: PUSH
8460: LD_INT 3
8462: PUSH
8463: LD_INT 4
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: IN
8471: IFFALSE 8492
// points := [ 3 , 2 , 1 ] ;
8473: LD_ADDR_VAR 0 9
8477: PUSH
8478: LD_INT 3
8480: PUSH
8481: LD_INT 2
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8492: LD_VAR 0 6
8496: PPUSH
8497: CALL_OW 257
8501: PUSH
8502: LD_INT 5
8504: EQUAL
8505: IFFALSE 8526
// points := [ 130 , 5 , 2 ] ;
8507: LD_ADDR_VAR 0 9
8511: PUSH
8512: LD_INT 130
8514: PUSH
8515: LD_INT 5
8517: PUSH
8518: LD_INT 2
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8526: LD_VAR 0 6
8530: PPUSH
8531: CALL_OW 257
8535: PUSH
8536: LD_INT 8
8538: EQUAL
8539: IFFALSE 8560
// points := [ 35 , 35 , 30 ] ;
8541: LD_ADDR_VAR 0 9
8545: PUSH
8546: LD_INT 35
8548: PUSH
8549: LD_INT 35
8551: PUSH
8552: LD_INT 30
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: ST_TO_ADDR
// if GetClass ( i ) = 9 then
8560: LD_VAR 0 6
8564: PPUSH
8565: CALL_OW 257
8569: PUSH
8570: LD_INT 9
8572: EQUAL
8573: IFFALSE 8594
// points := [ 20 , 55 , 40 ] ;
8575: LD_ADDR_VAR 0 9
8579: PUSH
8580: LD_INT 20
8582: PUSH
8583: LD_INT 55
8585: PUSH
8586: LD_INT 40
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
8594: LD_VAR 0 6
8598: PPUSH
8599: CALL_OW 257
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: LD_INT 16
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: IN
8614: IFFALSE 8635
// points := [ 5 , 3 , 2 ] ;
8616: LD_ADDR_VAR 0 9
8620: PUSH
8621: LD_INT 5
8623: PUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 2
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: LIST
8634: ST_TO_ADDR
// if GetClass ( i ) = 17 then
8635: LD_VAR 0 6
8639: PPUSH
8640: CALL_OW 257
8644: PUSH
8645: LD_INT 17
8647: EQUAL
8648: IFFALSE 8669
// points := [ 100 , 50 , 75 ] ;
8650: LD_ADDR_VAR 0 9
8654: PUSH
8655: LD_INT 100
8657: PUSH
8658: LD_INT 50
8660: PUSH
8661: LD_INT 75
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: ST_TO_ADDR
// if GetClass ( i ) = 15 then
8669: LD_VAR 0 6
8673: PPUSH
8674: CALL_OW 257
8678: PUSH
8679: LD_INT 15
8681: EQUAL
8682: IFFALSE 8703
// points := [ 10 , 5 , 3 ] ;
8684: LD_ADDR_VAR 0 9
8688: PUSH
8689: LD_INT 10
8691: PUSH
8692: LD_INT 5
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: ST_TO_ADDR
// if GetClass ( i ) = 14 then
8703: LD_VAR 0 6
8707: PPUSH
8708: CALL_OW 257
8712: PUSH
8713: LD_INT 14
8715: EQUAL
8716: IFFALSE 8737
// points := [ 10 , 0 , 0 ] ;
8718: LD_ADDR_VAR 0 9
8722: PUSH
8723: LD_INT 10
8725: PUSH
8726: LD_INT 0
8728: PUSH
8729: LD_INT 0
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: ST_TO_ADDR
// if GetClass ( i ) = 11 then
8737: LD_VAR 0 6
8741: PPUSH
8742: CALL_OW 257
8746: PUSH
8747: LD_INT 11
8749: EQUAL
8750: IFFALSE 8771
// points := [ 30 , 10 , 5 ] ;
8752: LD_ADDR_VAR 0 9
8756: PUSH
8757: LD_INT 30
8759: PUSH
8760: LD_INT 10
8762: PUSH
8763: LD_INT 5
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: LIST
8770: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
8771: LD_VAR 0 1
8775: PPUSH
8776: LD_INT 5
8778: PPUSH
8779: CALL_OW 321
8783: PUSH
8784: LD_INT 2
8786: EQUAL
8787: IFFALSE 8804
// bpoints := bpoints * 1.8 ;
8789: LD_ADDR_VAR 0 10
8793: PUSH
8794: LD_VAR 0 10
8798: PUSH
8799: LD_REAL  1.80000000000000E+0000
8802: MUL
8803: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
8804: LD_VAR 0 6
8808: PPUSH
8809: CALL_OW 257
8813: PUSH
8814: LD_INT 1
8816: PUSH
8817: LD_INT 2
8819: PUSH
8820: LD_INT 3
8822: PUSH
8823: LD_INT 4
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: IN
8832: PUSH
8833: LD_VAR 0 1
8837: PPUSH
8838: LD_INT 51
8840: PPUSH
8841: CALL_OW 321
8845: PUSH
8846: LD_INT 2
8848: EQUAL
8849: AND
8850: IFFALSE 8867
// bpoints := bpoints * 1.2 ;
8852: LD_ADDR_VAR 0 10
8856: PUSH
8857: LD_VAR 0 10
8861: PUSH
8862: LD_REAL  1.20000000000000E+0000
8865: MUL
8866: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
8867: LD_VAR 0 6
8871: PPUSH
8872: CALL_OW 257
8876: PUSH
8877: LD_INT 5
8879: PUSH
8880: LD_INT 7
8882: PUSH
8883: LD_INT 9
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: IN
8891: PUSH
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_INT 52
8899: PPUSH
8900: CALL_OW 321
8904: PUSH
8905: LD_INT 2
8907: EQUAL
8908: AND
8909: IFFALSE 8926
// bpoints := bpoints * 1.5 ;
8911: LD_ADDR_VAR 0 10
8915: PUSH
8916: LD_VAR 0 10
8920: PUSH
8921: LD_REAL  1.50000000000000E+0000
8924: MUL
8925: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
8926: LD_VAR 0 1
8930: PPUSH
8931: LD_INT 66
8933: PPUSH
8934: CALL_OW 321
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: IFFALSE 8959
// bpoints := bpoints * 1.1 ;
8944: LD_ADDR_VAR 0 10
8948: PUSH
8949: LD_VAR 0 10
8953: PUSH
8954: LD_REAL  1.10000000000000E+0000
8957: MUL
8958: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
8959: LD_ADDR_VAR 0 10
8963: PUSH
8964: LD_VAR 0 10
8968: PUSH
8969: LD_VAR 0 6
8973: PPUSH
8974: LD_INT 1
8976: PPUSH
8977: CALL_OW 259
8981: PUSH
8982: LD_REAL  1.15000000000000E+0000
8985: MUL
8986: MUL
8987: ST_TO_ADDR
// end ; unit_vehicle :
8988: GO 9818
8990: LD_INT 2
8992: DOUBLE
8993: EQUAL
8994: IFTRUE 8998
8996: GO 9806
8998: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
8999: LD_VAR 0 6
9003: PPUSH
9004: CALL_OW 264
9008: PUSH
9009: LD_INT 2
9011: PUSH
9012: LD_INT 42
9014: PUSH
9015: LD_INT 24
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: LIST
9022: IN
9023: IFFALSE 9044
// points := [ 25 , 5 , 3 ] ;
9025: LD_ADDR_VAR 0 9
9029: PUSH
9030: LD_INT 25
9032: PUSH
9033: LD_INT 5
9035: PUSH
9036: LD_INT 3
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9044: LD_VAR 0 6
9048: PPUSH
9049: CALL_OW 264
9053: PUSH
9054: LD_INT 4
9056: PUSH
9057: LD_INT 43
9059: PUSH
9060: LD_INT 25
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: IN
9068: IFFALSE 9089
// points := [ 40 , 15 , 5 ] ;
9070: LD_ADDR_VAR 0 9
9074: PUSH
9075: LD_INT 40
9077: PUSH
9078: LD_INT 15
9080: PUSH
9081: LD_INT 5
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: LIST
9088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9089: LD_VAR 0 6
9093: PPUSH
9094: CALL_OW 264
9098: PUSH
9099: LD_INT 3
9101: PUSH
9102: LD_INT 23
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: IFFALSE 9130
// points := [ 7 , 25 , 8 ] ;
9111: LD_ADDR_VAR 0 9
9115: PUSH
9116: LD_INT 7
9118: PUSH
9119: LD_INT 25
9121: PUSH
9122: LD_INT 8
9124: PUSH
9125: EMPTY
9126: LIST
9127: LIST
9128: LIST
9129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9130: LD_VAR 0 6
9134: PPUSH
9135: CALL_OW 264
9139: PUSH
9140: LD_INT 5
9142: PUSH
9143: LD_INT 27
9145: PUSH
9146: LD_INT 44
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: IN
9154: IFFALSE 9175
// points := [ 14 , 50 , 16 ] ;
9156: LD_ADDR_VAR 0 9
9160: PUSH
9161: LD_INT 14
9163: PUSH
9164: LD_INT 50
9166: PUSH
9167: LD_INT 16
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9175: LD_VAR 0 6
9179: PPUSH
9180: CALL_OW 264
9184: PUSH
9185: LD_INT 6
9187: PUSH
9188: LD_INT 46
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: IN
9195: IFFALSE 9216
// points := [ 32 , 120 , 70 ] ;
9197: LD_ADDR_VAR 0 9
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: LD_INT 120
9207: PUSH
9208: LD_INT 70
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9216: LD_VAR 0 6
9220: PPUSH
9221: CALL_OW 264
9225: PUSH
9226: LD_INT 7
9228: PUSH
9229: LD_INT 28
9231: PUSH
9232: LD_INT 45
9234: PUSH
9235: LD_EXP 85
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: IN
9246: IFFALSE 9267
// points := [ 35 , 20 , 45 ] ;
9248: LD_ADDR_VAR 0 9
9252: PUSH
9253: LD_INT 35
9255: PUSH
9256: LD_INT 20
9258: PUSH
9259: LD_INT 45
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9267: LD_VAR 0 6
9271: PPUSH
9272: CALL_OW 264
9276: PUSH
9277: LD_INT 47
9279: PUSH
9280: EMPTY
9281: LIST
9282: IN
9283: IFFALSE 9304
// points := [ 67 , 45 , 75 ] ;
9285: LD_ADDR_VAR 0 9
9289: PUSH
9290: LD_INT 67
9292: PUSH
9293: LD_INT 45
9295: PUSH
9296: LD_INT 75
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: LIST
9303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9304: LD_VAR 0 6
9308: PPUSH
9309: CALL_OW 264
9313: PUSH
9314: LD_INT 26
9316: PUSH
9317: EMPTY
9318: LIST
9319: IN
9320: IFFALSE 9341
// points := [ 120 , 30 , 80 ] ;
9322: LD_ADDR_VAR 0 9
9326: PUSH
9327: LD_INT 120
9329: PUSH
9330: LD_INT 30
9332: PUSH
9333: LD_INT 80
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9341: LD_VAR 0 6
9345: PPUSH
9346: CALL_OW 264
9350: PUSH
9351: LD_INT 22
9353: PUSH
9354: EMPTY
9355: LIST
9356: IN
9357: IFFALSE 9378
// points := [ 40 , 1 , 1 ] ;
9359: LD_ADDR_VAR 0 9
9363: PUSH
9364: LD_INT 40
9366: PUSH
9367: LD_INT 1
9369: PUSH
9370: LD_INT 1
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9378: LD_VAR 0 6
9382: PPUSH
9383: CALL_OW 264
9387: PUSH
9388: LD_INT 29
9390: PUSH
9391: EMPTY
9392: LIST
9393: IN
9394: IFFALSE 9415
// points := [ 70 , 200 , 400 ] ;
9396: LD_ADDR_VAR 0 9
9400: PUSH
9401: LD_INT 70
9403: PUSH
9404: LD_INT 200
9406: PUSH
9407: LD_INT 400
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9415: LD_VAR 0 6
9419: PPUSH
9420: CALL_OW 264
9424: PUSH
9425: LD_INT 14
9427: PUSH
9428: LD_INT 53
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: IN
9435: IFFALSE 9456
// points := [ 40 , 10 , 20 ] ;
9437: LD_ADDR_VAR 0 9
9441: PUSH
9442: LD_INT 40
9444: PUSH
9445: LD_INT 10
9447: PUSH
9448: LD_INT 20
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: LIST
9455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9456: LD_VAR 0 6
9460: PPUSH
9461: CALL_OW 264
9465: PUSH
9466: LD_INT 9
9468: PUSH
9469: EMPTY
9470: LIST
9471: IN
9472: IFFALSE 9493
// points := [ 5 , 70 , 20 ] ;
9474: LD_ADDR_VAR 0 9
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: LD_INT 70
9484: PUSH
9485: LD_INT 20
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9493: LD_VAR 0 6
9497: PPUSH
9498: CALL_OW 264
9502: PUSH
9503: LD_INT 10
9505: PUSH
9506: EMPTY
9507: LIST
9508: IN
9509: IFFALSE 9530
// points := [ 35 , 110 , 70 ] ;
9511: LD_ADDR_VAR 0 9
9515: PUSH
9516: LD_INT 35
9518: PUSH
9519: LD_INT 110
9521: PUSH
9522: LD_INT 70
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9530: LD_VAR 0 6
9534: PPUSH
9535: CALL_OW 265
9539: PUSH
9540: LD_INT 25
9542: EQUAL
9543: IFFALSE 9564
// points := [ 80 , 65 , 100 ] ;
9545: LD_ADDR_VAR 0 9
9549: PUSH
9550: LD_INT 80
9552: PUSH
9553: LD_INT 65
9555: PUSH
9556: LD_INT 100
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
9564: LD_VAR 0 6
9568: PPUSH
9569: CALL_OW 263
9573: PUSH
9574: LD_INT 1
9576: EQUAL
9577: IFFALSE 9612
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
9579: LD_ADDR_VAR 0 10
9583: PUSH
9584: LD_VAR 0 10
9588: PUSH
9589: LD_VAR 0 6
9593: PPUSH
9594: CALL_OW 311
9598: PPUSH
9599: LD_INT 3
9601: PPUSH
9602: CALL_OW 259
9606: PUSH
9607: LD_INT 4
9609: MUL
9610: MUL
9611: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
9612: LD_VAR 0 6
9616: PPUSH
9617: CALL_OW 263
9621: PUSH
9622: LD_INT 2
9624: EQUAL
9625: IFFALSE 9676
// begin j := IsControledBy ( i ) ;
9627: LD_ADDR_VAR 0 7
9631: PUSH
9632: LD_VAR 0 6
9636: PPUSH
9637: CALL_OW 312
9641: ST_TO_ADDR
// if j then
9642: LD_VAR 0 7
9646: IFFALSE 9676
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
9648: LD_ADDR_VAR 0 10
9652: PUSH
9653: LD_VAR 0 10
9657: PUSH
9658: LD_VAR 0 7
9662: PPUSH
9663: LD_INT 3
9665: PPUSH
9666: CALL_OW 259
9670: PUSH
9671: LD_INT 3
9673: MUL
9674: MUL
9675: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
9676: LD_VAR 0 6
9680: PPUSH
9681: CALL_OW 264
9685: PUSH
9686: LD_INT 5
9688: PUSH
9689: LD_INT 6
9691: PUSH
9692: LD_INT 46
9694: PUSH
9695: LD_INT 44
9697: PUSH
9698: LD_INT 47
9700: PUSH
9701: LD_INT 45
9703: PUSH
9704: LD_INT 28
9706: PUSH
9707: LD_INT 7
9709: PUSH
9710: LD_INT 27
9712: PUSH
9713: LD_INT 29
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: IN
9728: PUSH
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_INT 52
9736: PPUSH
9737: CALL_OW 321
9741: PUSH
9742: LD_INT 2
9744: EQUAL
9745: AND
9746: IFFALSE 9763
// bpoints := bpoints * 1.2 ;
9748: LD_ADDR_VAR 0 10
9752: PUSH
9753: LD_VAR 0 10
9757: PUSH
9758: LD_REAL  1.20000000000000E+0000
9761: MUL
9762: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
9763: LD_VAR 0 6
9767: PPUSH
9768: CALL_OW 264
9772: PUSH
9773: LD_INT 6
9775: PUSH
9776: LD_INT 46
9778: PUSH
9779: LD_INT 47
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: IN
9787: IFFALSE 9804
// bpoints := bpoints * 1.2 ;
9789: LD_ADDR_VAR 0 10
9793: PUSH
9794: LD_VAR 0 10
9798: PUSH
9799: LD_REAL  1.20000000000000E+0000
9802: MUL
9803: ST_TO_ADDR
// end ; unit_building :
9804: GO 9818
9806: LD_INT 3
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9817
9814: POP
// ; end ;
9815: GO 9818
9817: POP
// for j = 1 to 3 do
9818: LD_ADDR_VAR 0 7
9822: PUSH
9823: DOUBLE
9824: LD_INT 1
9826: DEC
9827: ST_TO_ADDR
9828: LD_INT 3
9830: PUSH
9831: FOR_TO
9832: IFFALSE 9885
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
9834: LD_ADDR_VAR 0 5
9838: PUSH
9839: LD_VAR 0 5
9843: PPUSH
9844: LD_VAR 0 7
9848: PPUSH
9849: LD_VAR 0 5
9853: PUSH
9854: LD_VAR 0 7
9858: ARRAY
9859: PUSH
9860: LD_VAR 0 9
9864: PUSH
9865: LD_VAR 0 7
9869: ARRAY
9870: PUSH
9871: LD_VAR 0 10
9875: MUL
9876: PLUS
9877: PPUSH
9878: CALL_OW 1
9882: ST_TO_ADDR
9883: GO 9831
9885: POP
9886: POP
// end ;
9887: GO 8364
9889: POP
9890: POP
// result := Replace ( result , 4 , tmp ) ;
9891: LD_ADDR_VAR 0 5
9895: PUSH
9896: LD_VAR 0 5
9900: PPUSH
9901: LD_INT 4
9903: PPUSH
9904: LD_VAR 0 8
9908: PPUSH
9909: CALL_OW 1
9913: ST_TO_ADDR
// end ;
9914: LD_VAR 0 5
9918: RET
// export function DangerAtRange ( unit , range ) ; begin
9919: LD_INT 0
9921: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
9922: LD_ADDR_VAR 0 3
9926: PUSH
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 255
9936: PPUSH
9937: LD_VAR 0 1
9941: PPUSH
9942: CALL_OW 250
9946: PPUSH
9947: LD_VAR 0 1
9951: PPUSH
9952: CALL_OW 251
9956: PPUSH
9957: LD_VAR 0 2
9961: PPUSH
9962: CALL 8216 0 4
9966: ST_TO_ADDR
// end ;
9967: LD_VAR 0 3
9971: RET
// export function DangerInArea ( side , area ) ; begin
9972: LD_INT 0
9974: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
9975: LD_ADDR_VAR 0 3
9979: PUSH
9980: LD_VAR 0 2
9984: PPUSH
9985: LD_INT 81
9987: PUSH
9988: LD_VAR 0 1
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PPUSH
9997: CALL_OW 70
10001: ST_TO_ADDR
// end ;
10002: LD_VAR 0 3
10006: RET
// export function IsExtension ( b ) ; begin
10007: LD_INT 0
10009: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10010: LD_ADDR_VAR 0 2
10014: PUSH
10015: LD_VAR 0 1
10019: PUSH
10020: LD_INT 23
10022: PUSH
10023: LD_INT 20
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_INT 17
10031: PUSH
10032: LD_INT 24
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 19
10040: PUSH
10041: LD_INT 16
10043: PUSH
10044: LD_INT 25
10046: PUSH
10047: LD_INT 18
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: IN
10062: ST_TO_ADDR
// end ;
10063: LD_VAR 0 2
10067: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
// result := [ ] ;
10073: LD_ADDR_VAR 0 4
10077: PUSH
10078: EMPTY
10079: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10080: LD_ADDR_VAR 0 5
10084: PUSH
10085: LD_VAR 0 2
10089: PPUSH
10090: LD_INT 21
10092: PUSH
10093: LD_INT 3
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL_OW 70
10104: ST_TO_ADDR
// if not tmp then
10105: LD_VAR 0 5
10109: NOT
10110: IFFALSE 10114
// exit ;
10112: GO 10178
// if checkLink then
10114: LD_VAR 0 3
10118: IFFALSE 10168
// begin for i in tmp do
10120: LD_ADDR_VAR 0 6
10124: PUSH
10125: LD_VAR 0 5
10129: PUSH
10130: FOR_IN
10131: IFFALSE 10166
// if GetBase ( i ) <> base then
10133: LD_VAR 0 6
10137: PPUSH
10138: CALL_OW 274
10142: PUSH
10143: LD_VAR 0 1
10147: NONEQUAL
10148: IFFALSE 10164
// ComLinkToBase ( base , i ) ;
10150: LD_VAR 0 1
10154: PPUSH
10155: LD_VAR 0 6
10159: PPUSH
10160: CALL_OW 169
10164: GO 10130
10166: POP
10167: POP
// end ; result := tmp ;
10168: LD_ADDR_VAR 0 4
10172: PUSH
10173: LD_VAR 0 5
10177: ST_TO_ADDR
// end ;
10178: LD_VAR 0 4
10182: RET
// export function ComComplete ( units , b ) ; var i ; begin
10183: LD_INT 0
10185: PPUSH
10186: PPUSH
// if not units then
10187: LD_VAR 0 1
10191: NOT
10192: IFFALSE 10196
// exit ;
10194: GO 10286
// for i in units do
10196: LD_ADDR_VAR 0 4
10200: PUSH
10201: LD_VAR 0 1
10205: PUSH
10206: FOR_IN
10207: IFFALSE 10284
// if BuildingStatus ( b ) = bs_build then
10209: LD_VAR 0 2
10213: PPUSH
10214: CALL_OW 461
10218: PUSH
10219: LD_INT 1
10221: EQUAL
10222: IFFALSE 10282
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10224: LD_VAR 0 4
10228: PPUSH
10229: LD_STRING h
10231: PUSH
10232: LD_VAR 0 2
10236: PPUSH
10237: CALL_OW 250
10241: PUSH
10242: LD_VAR 0 2
10246: PPUSH
10247: CALL_OW 251
10251: PUSH
10252: LD_VAR 0 2
10256: PUSH
10257: LD_INT 0
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: PPUSH
10278: CALL_OW 446
10282: GO 10206
10284: POP
10285: POP
// end ;
10286: LD_VAR 0 3
10290: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10291: LD_INT 0
10293: PPUSH
10294: PPUSH
10295: PPUSH
10296: PPUSH
10297: PPUSH
10298: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10299: LD_VAR 0 1
10303: NOT
10304: PUSH
10305: LD_VAR 0 1
10309: PPUSH
10310: CALL_OW 263
10314: PUSH
10315: LD_INT 2
10317: NONEQUAL
10318: OR
10319: IFFALSE 10323
// exit ;
10321: GO 10639
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10323: LD_ADDR_VAR 0 6
10327: PUSH
10328: LD_INT 22
10330: PUSH
10331: LD_VAR 0 1
10335: PPUSH
10336: CALL_OW 255
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 2
10347: PUSH
10348: LD_INT 30
10350: PUSH
10351: LD_INT 36
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 34
10360: PUSH
10361: LD_INT 31
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PPUSH
10377: CALL_OW 69
10381: ST_TO_ADDR
// if not tmp then
10382: LD_VAR 0 6
10386: NOT
10387: IFFALSE 10391
// exit ;
10389: GO 10639
// result := [ ] ;
10391: LD_ADDR_VAR 0 2
10395: PUSH
10396: EMPTY
10397: ST_TO_ADDR
// for i in tmp do
10398: LD_ADDR_VAR 0 3
10402: PUSH
10403: LD_VAR 0 6
10407: PUSH
10408: FOR_IN
10409: IFFALSE 10480
// begin t := UnitsInside ( i ) ;
10411: LD_ADDR_VAR 0 4
10415: PUSH
10416: LD_VAR 0 3
10420: PPUSH
10421: CALL_OW 313
10425: ST_TO_ADDR
// if t then
10426: LD_VAR 0 4
10430: IFFALSE 10478
// for j in t do
10432: LD_ADDR_VAR 0 7
10436: PUSH
10437: LD_VAR 0 4
10441: PUSH
10442: FOR_IN
10443: IFFALSE 10476
// result := Replace ( result , result + 1 , j ) ;
10445: LD_ADDR_VAR 0 2
10449: PUSH
10450: LD_VAR 0 2
10454: PPUSH
10455: LD_VAR 0 2
10459: PUSH
10460: LD_INT 1
10462: PLUS
10463: PPUSH
10464: LD_VAR 0 7
10468: PPUSH
10469: CALL_OW 1
10473: ST_TO_ADDR
10474: GO 10442
10476: POP
10477: POP
// end ;
10478: GO 10408
10480: POP
10481: POP
// if not result then
10482: LD_VAR 0 2
10486: NOT
10487: IFFALSE 10491
// exit ;
10489: GO 10639
// mech := result [ 1 ] ;
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: LD_VAR 0 2
10500: PUSH
10501: LD_INT 1
10503: ARRAY
10504: ST_TO_ADDR
// if result > 1 then
10505: LD_VAR 0 2
10509: PUSH
10510: LD_INT 1
10512: GREATER
10513: IFFALSE 10625
// begin for i = 2 to result do
10515: LD_ADDR_VAR 0 3
10519: PUSH
10520: DOUBLE
10521: LD_INT 2
10523: DEC
10524: ST_TO_ADDR
10525: LD_VAR 0 2
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10623
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10533: LD_ADDR_VAR 0 4
10537: PUSH
10538: LD_VAR 0 2
10542: PUSH
10543: LD_VAR 0 3
10547: ARRAY
10548: PPUSH
10549: LD_INT 3
10551: PPUSH
10552: CALL_OW 259
10556: PUSH
10557: LD_VAR 0 2
10561: PUSH
10562: LD_VAR 0 3
10566: ARRAY
10567: PPUSH
10568: CALL_OW 432
10572: MINUS
10573: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
10574: LD_VAR 0 4
10578: PUSH
10579: LD_VAR 0 5
10583: PPUSH
10584: LD_INT 3
10586: PPUSH
10587: CALL_OW 259
10591: PUSH
10592: LD_VAR 0 5
10596: PPUSH
10597: CALL_OW 432
10601: MINUS
10602: GREATEREQUAL
10603: IFFALSE 10621
// mech := result [ i ] ;
10605: LD_ADDR_VAR 0 5
10609: PUSH
10610: LD_VAR 0 2
10614: PUSH
10615: LD_VAR 0 3
10619: ARRAY
10620: ST_TO_ADDR
// end ;
10621: GO 10530
10623: POP
10624: POP
// end ; ComLinkTo ( vehicle , mech ) ;
10625: LD_VAR 0 1
10629: PPUSH
10630: LD_VAR 0 5
10634: PPUSH
10635: CALL_OW 135
// end ;
10639: LD_VAR 0 2
10643: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
10653: PPUSH
10654: PPUSH
10655: PPUSH
10656: PPUSH
10657: PPUSH
10658: PPUSH
// result := [ ] ;
10659: LD_ADDR_VAR 0 7
10663: PUSH
10664: EMPTY
10665: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
10666: LD_VAR 0 1
10670: PPUSH
10671: CALL_OW 266
10675: PUSH
10676: LD_INT 0
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: IN
10686: NOT
10687: IFFALSE 10691
// exit ;
10689: GO 12325
// if name then
10691: LD_VAR 0 3
10695: IFFALSE 10711
// SetBName ( base_dep , name ) ;
10697: LD_VAR 0 1
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: CALL_OW 500
// base := GetBase ( base_dep ) ;
10711: LD_ADDR_VAR 0 15
10715: PUSH
10716: LD_VAR 0 1
10720: PPUSH
10721: CALL_OW 274
10725: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
10726: LD_ADDR_VAR 0 16
10730: PUSH
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL_OW 255
10740: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
10741: LD_ADDR_VAR 0 17
10745: PUSH
10746: LD_VAR 0 1
10750: PPUSH
10751: CALL_OW 248
10755: ST_TO_ADDR
// if sources then
10756: LD_VAR 0 5
10760: IFFALSE 10807
// for i = 1 to 3 do
10762: LD_ADDR_VAR 0 8
10766: PUSH
10767: DOUBLE
10768: LD_INT 1
10770: DEC
10771: ST_TO_ADDR
10772: LD_INT 3
10774: PUSH
10775: FOR_TO
10776: IFFALSE 10805
// AddResourceType ( base , i , sources [ i ] ) ;
10778: LD_VAR 0 15
10782: PPUSH
10783: LD_VAR 0 8
10787: PPUSH
10788: LD_VAR 0 5
10792: PUSH
10793: LD_VAR 0 8
10797: ARRAY
10798: PPUSH
10799: CALL_OW 276
10803: GO 10775
10805: POP
10806: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
10807: LD_ADDR_VAR 0 18
10811: PUSH
10812: LD_VAR 0 15
10816: PPUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: CALL 10068 0 3
10829: ST_TO_ADDR
// InitHc ;
10830: CALL_OW 19
// InitUc ;
10834: CALL_OW 18
// uc_side := side ;
10838: LD_ADDR_OWVAR 20
10842: PUSH
10843: LD_VAR 0 16
10847: ST_TO_ADDR
// uc_nation := nation ;
10848: LD_ADDR_OWVAR 21
10852: PUSH
10853: LD_VAR 0 17
10857: ST_TO_ADDR
// if buildings then
10858: LD_VAR 0 18
10862: IFFALSE 12184
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
10864: LD_ADDR_VAR 0 19
10868: PUSH
10869: LD_VAR 0 18
10873: PPUSH
10874: LD_INT 2
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 29
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 30
10889: PUSH
10890: LD_INT 30
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 72
10906: ST_TO_ADDR
// if tmp then
10907: LD_VAR 0 19
10911: IFFALSE 10959
// for i in tmp do
10913: LD_ADDR_VAR 0 8
10917: PUSH
10918: LD_VAR 0 19
10922: PUSH
10923: FOR_IN
10924: IFFALSE 10957
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
10926: LD_VAR 0 8
10930: PPUSH
10931: CALL_OW 250
10935: PPUSH
10936: LD_VAR 0 8
10940: PPUSH
10941: CALL_OW 251
10945: PPUSH
10946: LD_VAR 0 16
10950: PPUSH
10951: CALL_OW 441
10955: GO 10923
10957: POP
10958: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
10959: LD_VAR 0 18
10963: PPUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 30
10969: PUSH
10970: LD_INT 32
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: LD_INT 30
10979: PUSH
10980: LD_INT 33
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 72
10996: IFFALSE 11084
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
10998: LD_ADDR_VAR 0 8
11002: PUSH
11003: LD_VAR 0 18
11007: PPUSH
11008: LD_INT 2
11010: PUSH
11011: LD_INT 30
11013: PUSH
11014: LD_INT 32
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 30
11023: PUSH
11024: LD_INT 33
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: PPUSH
11036: CALL_OW 72
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11082
// begin if not GetBWeapon ( i ) then
11044: LD_VAR 0 8
11048: PPUSH
11049: CALL_OW 269
11053: NOT
11054: IFFALSE 11080
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11056: LD_VAR 0 8
11060: PPUSH
11061: LD_VAR 0 8
11065: PPUSH
11066: LD_VAR 0 2
11070: PPUSH
11071: CALL 12330 0 2
11075: PPUSH
11076: CALL_OW 431
// end ;
11080: GO 11041
11082: POP
11083: POP
// end ; for i = 1 to personel do
11084: LD_ADDR_VAR 0 8
11088: PUSH
11089: DOUBLE
11090: LD_INT 1
11092: DEC
11093: ST_TO_ADDR
11094: LD_VAR 0 6
11098: PUSH
11099: FOR_TO
11100: IFFALSE 12164
// begin if i > 4 then
11102: LD_VAR 0 8
11106: PUSH
11107: LD_INT 4
11109: GREATER
11110: IFFALSE 11114
// break ;
11112: GO 12164
// case i of 1 :
11114: LD_VAR 0 8
11118: PUSH
11119: LD_INT 1
11121: DOUBLE
11122: EQUAL
11123: IFTRUE 11127
11125: GO 11207
11127: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11128: LD_ADDR_VAR 0 12
11132: PUSH
11133: LD_VAR 0 18
11137: PPUSH
11138: LD_INT 22
11140: PUSH
11141: LD_VAR 0 16
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 58
11152: PUSH
11153: EMPTY
11154: LIST
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: LD_INT 30
11161: PUSH
11162: LD_INT 32
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 30
11171: PUSH
11172: LD_INT 4
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 30
11181: PUSH
11182: LD_INT 5
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 72
11204: ST_TO_ADDR
11205: GO 11429
11207: LD_INT 2
11209: DOUBLE
11210: EQUAL
11211: IFTRUE 11215
11213: GO 11277
11215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11216: LD_ADDR_VAR 0 12
11220: PUSH
11221: LD_VAR 0 18
11225: PPUSH
11226: LD_INT 22
11228: PUSH
11229: LD_VAR 0 16
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 2
11240: PUSH
11241: LD_INT 30
11243: PUSH
11244: LD_INT 0
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 30
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 72
11274: ST_TO_ADDR
11275: GO 11429
11277: LD_INT 3
11279: DOUBLE
11280: EQUAL
11281: IFTRUE 11285
11283: GO 11347
11285: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11286: LD_ADDR_VAR 0 12
11290: PUSH
11291: LD_VAR 0 18
11295: PPUSH
11296: LD_INT 22
11298: PUSH
11299: LD_VAR 0 16
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: LD_INT 30
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 30
11323: PUSH
11324: LD_INT 3
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: PPUSH
11340: CALL_OW 72
11344: ST_TO_ADDR
11345: GO 11429
11347: LD_INT 4
11349: DOUBLE
11350: EQUAL
11351: IFTRUE 11355
11353: GO 11428
11355: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11356: LD_ADDR_VAR 0 12
11360: PUSH
11361: LD_VAR 0 18
11365: PPUSH
11366: LD_INT 22
11368: PUSH
11369: LD_VAR 0 16
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: LD_INT 30
11383: PUSH
11384: LD_INT 6
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 30
11393: PUSH
11394: LD_INT 7
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 30
11403: PUSH
11404: LD_INT 8
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 72
11425: ST_TO_ADDR
11426: GO 11429
11428: POP
// if i = 1 then
11429: LD_VAR 0 8
11433: PUSH
11434: LD_INT 1
11436: EQUAL
11437: IFFALSE 11548
// begin tmp := [ ] ;
11439: LD_ADDR_VAR 0 19
11443: PUSH
11444: EMPTY
11445: ST_TO_ADDR
// for j in f do
11446: LD_ADDR_VAR 0 9
11450: PUSH
11451: LD_VAR 0 12
11455: PUSH
11456: FOR_IN
11457: IFFALSE 11530
// if GetBType ( j ) = b_bunker then
11459: LD_VAR 0 9
11463: PPUSH
11464: CALL_OW 266
11468: PUSH
11469: LD_INT 32
11471: EQUAL
11472: IFFALSE 11499
// tmp := Insert ( tmp , 1 , j ) else
11474: LD_ADDR_VAR 0 19
11478: PUSH
11479: LD_VAR 0 19
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: LD_VAR 0 9
11491: PPUSH
11492: CALL_OW 2
11496: ST_TO_ADDR
11497: GO 11528
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11499: LD_ADDR_VAR 0 19
11503: PUSH
11504: LD_VAR 0 19
11508: PPUSH
11509: LD_VAR 0 19
11513: PUSH
11514: LD_INT 1
11516: PLUS
11517: PPUSH
11518: LD_VAR 0 9
11522: PPUSH
11523: CALL_OW 2
11527: ST_TO_ADDR
11528: GO 11456
11530: POP
11531: POP
// if tmp then
11532: LD_VAR 0 19
11536: IFFALSE 11548
// f := tmp ;
11538: LD_ADDR_VAR 0 12
11542: PUSH
11543: LD_VAR 0 19
11547: ST_TO_ADDR
// end ; x := personel [ i ] ;
11548: LD_ADDR_VAR 0 13
11552: PUSH
11553: LD_VAR 0 6
11557: PUSH
11558: LD_VAR 0 8
11562: ARRAY
11563: ST_TO_ADDR
// if x = - 1 then
11564: LD_VAR 0 13
11568: PUSH
11569: LD_INT 1
11571: NEG
11572: EQUAL
11573: IFFALSE 11782
// begin for j in f do
11575: LD_ADDR_VAR 0 9
11579: PUSH
11580: LD_VAR 0 12
11584: PUSH
11585: FOR_IN
11586: IFFALSE 11778
// repeat InitHc ;
11588: CALL_OW 19
// if GetBType ( j ) = b_barracks then
11592: LD_VAR 0 9
11596: PPUSH
11597: CALL_OW 266
11601: PUSH
11602: LD_INT 5
11604: EQUAL
11605: IFFALSE 11675
// begin if UnitsInside ( j ) < 3 then
11607: LD_VAR 0 9
11611: PPUSH
11612: CALL_OW 313
11616: PUSH
11617: LD_INT 3
11619: LESS
11620: IFFALSE 11656
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
11622: LD_INT 0
11624: PPUSH
11625: LD_INT 5
11627: PUSH
11628: LD_INT 8
11630: PUSH
11631: LD_INT 9
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: PUSH
11639: LD_VAR 0 17
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 4
11649: PPUSH
11650: CALL_OW 380
11654: GO 11673
// PrepareHuman ( false , i , skill ) ;
11656: LD_INT 0
11658: PPUSH
11659: LD_VAR 0 8
11663: PPUSH
11664: LD_VAR 0 4
11668: PPUSH
11669: CALL_OW 380
// end else
11673: GO 11692
// PrepareHuman ( false , i , skill ) ;
11675: LD_INT 0
11677: PPUSH
11678: LD_VAR 0 8
11682: PPUSH
11683: LD_VAR 0 4
11687: PPUSH
11688: CALL_OW 380
// un := CreateHuman ;
11692: LD_ADDR_VAR 0 14
11696: PUSH
11697: CALL_OW 44
11701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11702: LD_ADDR_VAR 0 7
11706: PUSH
11707: LD_VAR 0 7
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: LD_VAR 0 14
11719: PPUSH
11720: CALL_OW 2
11724: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
11725: LD_VAR 0 14
11729: PPUSH
11730: LD_VAR 0 9
11734: PPUSH
11735: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
11739: LD_VAR 0 9
11743: PPUSH
11744: CALL_OW 313
11748: PUSH
11749: LD_INT 6
11751: EQUAL
11752: PUSH
11753: LD_VAR 0 9
11757: PPUSH
11758: CALL_OW 266
11762: PUSH
11763: LD_INT 32
11765: PUSH
11766: LD_INT 31
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: IN
11773: OR
11774: IFFALSE 11588
11776: GO 11585
11778: POP
11779: POP
// end else
11780: GO 12162
// for j = 1 to x do
11782: LD_ADDR_VAR 0 9
11786: PUSH
11787: DOUBLE
11788: LD_INT 1
11790: DEC
11791: ST_TO_ADDR
11792: LD_VAR 0 13
11796: PUSH
11797: FOR_TO
11798: IFFALSE 12160
// begin InitHc ;
11800: CALL_OW 19
// if not f then
11804: LD_VAR 0 12
11808: NOT
11809: IFFALSE 11898
// begin PrepareHuman ( false , i , skill ) ;
11811: LD_INT 0
11813: PPUSH
11814: LD_VAR 0 8
11818: PPUSH
11819: LD_VAR 0 4
11823: PPUSH
11824: CALL_OW 380
// un := CreateHuman ;
11828: LD_ADDR_VAR 0 14
11832: PUSH
11833: CALL_OW 44
11837: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
11838: LD_ADDR_VAR 0 7
11842: PUSH
11843: LD_VAR 0 7
11847: PPUSH
11848: LD_INT 1
11850: PPUSH
11851: LD_VAR 0 14
11855: PPUSH
11856: CALL_OW 2
11860: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11861: LD_VAR 0 14
11865: PPUSH
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 250
11875: PPUSH
11876: LD_VAR 0 1
11880: PPUSH
11881: CALL_OW 251
11885: PPUSH
11886: LD_INT 10
11888: PPUSH
11889: LD_INT 0
11891: PPUSH
11892: CALL_OW 50
// continue ;
11896: GO 11797
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
11898: LD_VAR 0 12
11902: PUSH
11903: LD_INT 1
11905: ARRAY
11906: PPUSH
11907: CALL_OW 313
11911: PUSH
11912: LD_VAR 0 12
11916: PUSH
11917: LD_INT 1
11919: ARRAY
11920: PPUSH
11921: CALL_OW 266
11925: PUSH
11926: LD_INT 32
11928: PUSH
11929: LD_INT 31
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: IN
11936: AND
11937: PUSH
11938: LD_VAR 0 12
11942: PUSH
11943: LD_INT 1
11945: ARRAY
11946: PPUSH
11947: CALL_OW 313
11951: PUSH
11952: LD_INT 6
11954: EQUAL
11955: OR
11956: IFFALSE 11976
// f := Delete ( f , 1 ) ;
11958: LD_ADDR_VAR 0 12
11962: PUSH
11963: LD_VAR 0 12
11967: PPUSH
11968: LD_INT 1
11970: PPUSH
11971: CALL_OW 3
11975: ST_TO_ADDR
// if not f then
11976: LD_VAR 0 12
11980: NOT
11981: IFFALSE 11999
// begin x := x + 2 ;
11983: LD_ADDR_VAR 0 13
11987: PUSH
11988: LD_VAR 0 13
11992: PUSH
11993: LD_INT 2
11995: PLUS
11996: ST_TO_ADDR
// continue ;
11997: GO 11797
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
11999: LD_VAR 0 12
12003: PUSH
12004: LD_INT 1
12006: ARRAY
12007: PPUSH
12008: CALL_OW 266
12012: PUSH
12013: LD_INT 5
12015: EQUAL
12016: IFFALSE 12090
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12018: LD_VAR 0 12
12022: PUSH
12023: LD_INT 1
12025: ARRAY
12026: PPUSH
12027: CALL_OW 313
12031: PUSH
12032: LD_INT 3
12034: LESS
12035: IFFALSE 12071
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12037: LD_INT 0
12039: PPUSH
12040: LD_INT 5
12042: PUSH
12043: LD_INT 8
12045: PUSH
12046: LD_INT 9
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_VAR 0 17
12058: ARRAY
12059: PPUSH
12060: LD_VAR 0 4
12064: PPUSH
12065: CALL_OW 380
12069: GO 12088
// PrepareHuman ( false , i , skill ) ;
12071: LD_INT 0
12073: PPUSH
12074: LD_VAR 0 8
12078: PPUSH
12079: LD_VAR 0 4
12083: PPUSH
12084: CALL_OW 380
// end else
12088: GO 12107
// PrepareHuman ( false , i , skill ) ;
12090: LD_INT 0
12092: PPUSH
12093: LD_VAR 0 8
12097: PPUSH
12098: LD_VAR 0 4
12102: PPUSH
12103: CALL_OW 380
// un := CreateHuman ;
12107: LD_ADDR_VAR 0 14
12111: PUSH
12112: CALL_OW 44
12116: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12117: LD_ADDR_VAR 0 7
12121: PUSH
12122: LD_VAR 0 7
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: LD_VAR 0 14
12134: PPUSH
12135: CALL_OW 2
12139: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12140: LD_VAR 0 14
12144: PPUSH
12145: LD_VAR 0 12
12149: PUSH
12150: LD_INT 1
12152: ARRAY
12153: PPUSH
12154: CALL_OW 52
// end ;
12158: GO 11797
12160: POP
12161: POP
// end ;
12162: GO 11099
12164: POP
12165: POP
// result := result ^ buildings ;
12166: LD_ADDR_VAR 0 7
12170: PUSH
12171: LD_VAR 0 7
12175: PUSH
12176: LD_VAR 0 18
12180: ADD
12181: ST_TO_ADDR
// end else
12182: GO 12325
// begin for i = 1 to personel do
12184: LD_ADDR_VAR 0 8
12188: PUSH
12189: DOUBLE
12190: LD_INT 1
12192: DEC
12193: ST_TO_ADDR
12194: LD_VAR 0 6
12198: PUSH
12199: FOR_TO
12200: IFFALSE 12323
// begin if i > 4 then
12202: LD_VAR 0 8
12206: PUSH
12207: LD_INT 4
12209: GREATER
12210: IFFALSE 12214
// break ;
12212: GO 12323
// x := personel [ i ] ;
12214: LD_ADDR_VAR 0 13
12218: PUSH
12219: LD_VAR 0 6
12223: PUSH
12224: LD_VAR 0 8
12228: ARRAY
12229: ST_TO_ADDR
// if x = - 1 then
12230: LD_VAR 0 13
12234: PUSH
12235: LD_INT 1
12237: NEG
12238: EQUAL
12239: IFFALSE 12243
// continue ;
12241: GO 12199
// PrepareHuman ( false , i , skill ) ;
12243: LD_INT 0
12245: PPUSH
12246: LD_VAR 0 8
12250: PPUSH
12251: LD_VAR 0 4
12255: PPUSH
12256: CALL_OW 380
// un := CreateHuman ;
12260: LD_ADDR_VAR 0 14
12264: PUSH
12265: CALL_OW 44
12269: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12270: LD_VAR 0 14
12274: PPUSH
12275: LD_VAR 0 1
12279: PPUSH
12280: CALL_OW 250
12284: PPUSH
12285: LD_VAR 0 1
12289: PPUSH
12290: CALL_OW 251
12294: PPUSH
12295: LD_INT 10
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 50
// result := result ^ un ;
12305: LD_ADDR_VAR 0 7
12309: PUSH
12310: LD_VAR 0 7
12314: PUSH
12315: LD_VAR 0 14
12319: ADD
12320: ST_TO_ADDR
// end ;
12321: GO 12199
12323: POP
12324: POP
// end ; end ;
12325: LD_VAR 0 7
12329: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12330: LD_INT 0
12332: PPUSH
12333: PPUSH
12334: PPUSH
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
12339: PPUSH
12340: PPUSH
12341: PPUSH
12342: PPUSH
12343: PPUSH
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
// result := false ;
12348: LD_ADDR_VAR 0 3
12352: PUSH
12353: LD_INT 0
12355: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12356: LD_VAR 0 1
12360: NOT
12361: PUSH
12362: LD_VAR 0 1
12366: PPUSH
12367: CALL_OW 266
12371: PUSH
12372: LD_INT 32
12374: PUSH
12375: LD_INT 33
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: IN
12382: NOT
12383: OR
12384: IFFALSE 12388
// exit ;
12386: GO 13497
// nat := GetNation ( tower ) ;
12388: LD_ADDR_VAR 0 12
12392: PUSH
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 248
12402: ST_TO_ADDR
// side := GetSide ( tower ) ;
12403: LD_ADDR_VAR 0 16
12407: PUSH
12408: LD_VAR 0 1
12412: PPUSH
12413: CALL_OW 255
12417: ST_TO_ADDR
// x := GetX ( tower ) ;
12418: LD_ADDR_VAR 0 10
12422: PUSH
12423: LD_VAR 0 1
12427: PPUSH
12428: CALL_OW 250
12432: ST_TO_ADDR
// y := GetY ( tower ) ;
12433: LD_ADDR_VAR 0 11
12437: PUSH
12438: LD_VAR 0 1
12442: PPUSH
12443: CALL_OW 251
12447: ST_TO_ADDR
// if not x or not y then
12448: LD_VAR 0 10
12452: NOT
12453: PUSH
12454: LD_VAR 0 11
12458: NOT
12459: OR
12460: IFFALSE 12464
// exit ;
12462: GO 13497
// weapon := 0 ;
12464: LD_ADDR_VAR 0 18
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// fac_list := [ ] ;
12472: LD_ADDR_VAR 0 17
12476: PUSH
12477: EMPTY
12478: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12479: LD_ADDR_VAR 0 6
12483: PUSH
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 274
12493: PPUSH
12494: LD_VAR 0 2
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL 10068 0 3
12506: PPUSH
12507: LD_INT 30
12509: PUSH
12510: LD_INT 3
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 72
12521: ST_TO_ADDR
// if not factories then
12522: LD_VAR 0 6
12526: NOT
12527: IFFALSE 12531
// exit ;
12529: GO 13497
// for i in factories do
12531: LD_ADDR_VAR 0 8
12535: PUSH
12536: LD_VAR 0 6
12540: PUSH
12541: FOR_IN
12542: IFFALSE 12567
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12544: LD_ADDR_VAR 0 17
12548: PUSH
12549: LD_VAR 0 17
12553: PUSH
12554: LD_VAR 0 8
12558: PPUSH
12559: CALL_OW 478
12563: UNION
12564: ST_TO_ADDR
12565: GO 12541
12567: POP
12568: POP
// if not fac_list then
12569: LD_VAR 0 17
12573: NOT
12574: IFFALSE 12578
// exit ;
12576: GO 13497
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
12578: LD_ADDR_VAR 0 5
12582: PUSH
12583: LD_INT 4
12585: PUSH
12586: LD_INT 5
12588: PUSH
12589: LD_INT 9
12591: PUSH
12592: LD_INT 10
12594: PUSH
12595: LD_INT 6
12597: PUSH
12598: LD_INT 7
12600: PUSH
12601: LD_INT 11
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 27
12615: PUSH
12616: LD_INT 28
12618: PUSH
12619: LD_INT 26
12621: PUSH
12622: LD_INT 30
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 43
12633: PUSH
12634: LD_INT 44
12636: PUSH
12637: LD_INT 46
12639: PUSH
12640: LD_INT 45
12642: PUSH
12643: LD_INT 47
12645: PUSH
12646: LD_INT 49
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: PUSH
12662: LD_VAR 0 12
12666: ARRAY
12667: ST_TO_ADDR
// list := list isect fac_list ;
12668: LD_ADDR_VAR 0 5
12672: PUSH
12673: LD_VAR 0 5
12677: PUSH
12678: LD_VAR 0 17
12682: ISECT
12683: ST_TO_ADDR
// if not list then
12684: LD_VAR 0 5
12688: NOT
12689: IFFALSE 12693
// exit ;
12691: GO 13497
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
12693: LD_VAR 0 12
12697: PUSH
12698: LD_INT 3
12700: EQUAL
12701: PUSH
12702: LD_INT 49
12704: PUSH
12705: LD_VAR 0 5
12709: IN
12710: AND
12711: PUSH
12712: LD_INT 31
12714: PPUSH
12715: LD_VAR 0 16
12719: PPUSH
12720: CALL_OW 321
12724: PUSH
12725: LD_INT 2
12727: EQUAL
12728: AND
12729: IFFALSE 12789
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
12731: LD_INT 22
12733: PUSH
12734: LD_VAR 0 16
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 35
12745: PUSH
12746: LD_INT 49
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 91
12755: PUSH
12756: LD_VAR 0 1
12760: PUSH
12761: LD_INT 10
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: NOT
12779: IFFALSE 12789
// weapon := ru_time_lapser ;
12781: LD_ADDR_VAR 0 18
12785: PUSH
12786: LD_INT 49
12788: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
12789: LD_VAR 0 12
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: IN
12804: PUSH
12805: LD_INT 11
12807: PUSH
12808: LD_VAR 0 5
12812: IN
12813: PUSH
12814: LD_INT 30
12816: PUSH
12817: LD_VAR 0 5
12821: IN
12822: OR
12823: AND
12824: PUSH
12825: LD_INT 6
12827: PPUSH
12828: LD_VAR 0 16
12832: PPUSH
12833: CALL_OW 321
12837: PUSH
12838: LD_INT 2
12840: EQUAL
12841: AND
12842: IFFALSE 13007
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
12844: LD_INT 22
12846: PUSH
12847: LD_VAR 0 16
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 2
12858: PUSH
12859: LD_INT 35
12861: PUSH
12862: LD_INT 11
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 35
12871: PUSH
12872: LD_INT 30
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PUSH
12879: EMPTY
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 91
12886: PUSH
12887: LD_VAR 0 1
12891: PUSH
12892: LD_INT 18
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: PPUSH
12905: CALL_OW 69
12909: NOT
12910: PUSH
12911: LD_INT 22
12913: PUSH
12914: LD_VAR 0 16
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 2
12925: PUSH
12926: LD_INT 30
12928: PUSH
12929: LD_INT 32
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PUSH
12936: LD_INT 30
12938: PUSH
12939: LD_INT 33
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 91
12953: PUSH
12954: LD_VAR 0 1
12958: PUSH
12959: LD_INT 12
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: PUSH
12980: LD_INT 2
12982: GREATER
12983: AND
12984: IFFALSE 13007
// weapon := [ us_radar , ar_radar ] [ nat ] ;
12986: LD_ADDR_VAR 0 18
12990: PUSH
12991: LD_INT 11
12993: PUSH
12994: LD_INT 30
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_VAR 0 12
13005: ARRAY
13006: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13007: LD_VAR 0 18
13011: NOT
13012: PUSH
13013: LD_INT 40
13015: PPUSH
13016: LD_VAR 0 16
13020: PPUSH
13021: CALL_OW 321
13025: PUSH
13026: LD_INT 2
13028: EQUAL
13029: AND
13030: PUSH
13031: LD_INT 7
13033: PUSH
13034: LD_VAR 0 5
13038: IN
13039: PUSH
13040: LD_INT 28
13042: PUSH
13043: LD_VAR 0 5
13047: IN
13048: OR
13049: PUSH
13050: LD_INT 45
13052: PUSH
13053: LD_VAR 0 5
13057: IN
13058: OR
13059: AND
13060: IFFALSE 13314
// begin hex := GetHexInfo ( x , y ) ;
13062: LD_ADDR_VAR 0 4
13066: PUSH
13067: LD_VAR 0 10
13071: PPUSH
13072: LD_VAR 0 11
13076: PPUSH
13077: CALL_OW 546
13081: ST_TO_ADDR
// if hex [ 1 ] then
13082: LD_VAR 0 4
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: IFFALSE 13094
// exit ;
13092: GO 13497
// height := hex [ 2 ] ;
13094: LD_ADDR_VAR 0 15
13098: PUSH
13099: LD_VAR 0 4
13103: PUSH
13104: LD_INT 2
13106: ARRAY
13107: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13108: LD_ADDR_VAR 0 14
13112: PUSH
13113: LD_INT 0
13115: PUSH
13116: LD_INT 2
13118: PUSH
13119: LD_INT 3
13121: PUSH
13122: LD_INT 5
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: ST_TO_ADDR
// for i in tmp do
13131: LD_ADDR_VAR 0 8
13135: PUSH
13136: LD_VAR 0 14
13140: PUSH
13141: FOR_IN
13142: IFFALSE 13312
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13144: LD_ADDR_VAR 0 9
13148: PUSH
13149: LD_VAR 0 10
13153: PPUSH
13154: LD_VAR 0 8
13158: PPUSH
13159: LD_INT 5
13161: PPUSH
13162: CALL_OW 272
13166: PUSH
13167: LD_VAR 0 11
13171: PPUSH
13172: LD_VAR 0 8
13176: PPUSH
13177: LD_INT 5
13179: PPUSH
13180: CALL_OW 273
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13189: LD_VAR 0 9
13193: PUSH
13194: LD_INT 1
13196: ARRAY
13197: PPUSH
13198: LD_VAR 0 9
13202: PUSH
13203: LD_INT 2
13205: ARRAY
13206: PPUSH
13207: CALL_OW 488
13211: IFFALSE 13310
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13213: LD_ADDR_VAR 0 4
13217: PUSH
13218: LD_VAR 0 9
13222: PUSH
13223: LD_INT 1
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 9
13231: PUSH
13232: LD_INT 2
13234: ARRAY
13235: PPUSH
13236: CALL_OW 546
13240: ST_TO_ADDR
// if hex [ 1 ] then
13241: LD_VAR 0 4
13245: PUSH
13246: LD_INT 1
13248: ARRAY
13249: IFFALSE 13253
// continue ;
13251: GO 13141
// h := hex [ 2 ] ;
13253: LD_ADDR_VAR 0 13
13257: PUSH
13258: LD_VAR 0 4
13262: PUSH
13263: LD_INT 2
13265: ARRAY
13266: ST_TO_ADDR
// if h + 7 < height then
13267: LD_VAR 0 13
13271: PUSH
13272: LD_INT 7
13274: PLUS
13275: PUSH
13276: LD_VAR 0 15
13280: LESS
13281: IFFALSE 13310
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13283: LD_ADDR_VAR 0 18
13287: PUSH
13288: LD_INT 7
13290: PUSH
13291: LD_INT 28
13293: PUSH
13294: LD_INT 45
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: LD_VAR 0 12
13306: ARRAY
13307: ST_TO_ADDR
// break ;
13308: GO 13312
// end ; end ; end ;
13310: GO 13141
13312: POP
13313: POP
// end ; if not weapon then
13314: LD_VAR 0 18
13318: NOT
13319: IFFALSE 13379
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13321: LD_ADDR_VAR 0 5
13325: PUSH
13326: LD_VAR 0 5
13330: PUSH
13331: LD_INT 11
13333: PUSH
13334: LD_INT 30
13336: PUSH
13337: LD_INT 49
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: DIFF
13345: ST_TO_ADDR
// if not list then
13346: LD_VAR 0 5
13350: NOT
13351: IFFALSE 13355
// exit ;
13353: GO 13497
// weapon := list [ rand ( 1 , list ) ] ;
13355: LD_ADDR_VAR 0 18
13359: PUSH
13360: LD_VAR 0 5
13364: PUSH
13365: LD_INT 1
13367: PPUSH
13368: LD_VAR 0 5
13372: PPUSH
13373: CALL_OW 12
13377: ARRAY
13378: ST_TO_ADDR
// end ; if weapon then
13379: LD_VAR 0 18
13383: IFFALSE 13497
// begin tmp := CostOfWeapon ( weapon ) ;
13385: LD_ADDR_VAR 0 14
13389: PUSH
13390: LD_VAR 0 18
13394: PPUSH
13395: CALL_OW 451
13399: ST_TO_ADDR
// j := GetBase ( tower ) ;
13400: LD_ADDR_VAR 0 9
13404: PUSH
13405: LD_VAR 0 1
13409: PPUSH
13410: CALL_OW 274
13414: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13415: LD_VAR 0 9
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 275
13427: PUSH
13428: LD_VAR 0 14
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: GREATEREQUAL
13437: PUSH
13438: LD_VAR 0 9
13442: PPUSH
13443: LD_INT 2
13445: PPUSH
13446: CALL_OW 275
13450: PUSH
13451: LD_VAR 0 14
13455: PUSH
13456: LD_INT 2
13458: ARRAY
13459: GREATEREQUAL
13460: AND
13461: PUSH
13462: LD_VAR 0 9
13466: PPUSH
13467: LD_INT 3
13469: PPUSH
13470: CALL_OW 275
13474: PUSH
13475: LD_VAR 0 14
13479: PUSH
13480: LD_INT 3
13482: ARRAY
13483: GREATEREQUAL
13484: AND
13485: IFFALSE 13497
// result := weapon ;
13487: LD_ADDR_VAR 0 3
13491: PUSH
13492: LD_VAR 0 18
13496: ST_TO_ADDR
// end ; end ;
13497: LD_VAR 0 3
13501: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13502: LD_INT 0
13504: PPUSH
13505: PPUSH
// result := true ;
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: LD_INT 1
13513: ST_TO_ADDR
// if array1 = array2 then
13514: LD_VAR 0 1
13518: PUSH
13519: LD_VAR 0 2
13523: EQUAL
13524: IFFALSE 13584
// begin for i = 1 to array1 do
13526: LD_ADDR_VAR 0 4
13530: PUSH
13531: DOUBLE
13532: LD_INT 1
13534: DEC
13535: ST_TO_ADDR
13536: LD_VAR 0 1
13540: PUSH
13541: FOR_TO
13542: IFFALSE 13580
// if array1 [ i ] <> array2 [ i ] then
13544: LD_VAR 0 1
13548: PUSH
13549: LD_VAR 0 4
13553: ARRAY
13554: PUSH
13555: LD_VAR 0 2
13559: PUSH
13560: LD_VAR 0 4
13564: ARRAY
13565: NONEQUAL
13566: IFFALSE 13578
// begin result := false ;
13568: LD_ADDR_VAR 0 3
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// break ;
13576: GO 13580
// end ;
13578: GO 13541
13580: POP
13581: POP
// end else
13582: GO 13592
// result := false ;
13584: LD_ADDR_VAR 0 3
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// end ;
13592: LD_VAR 0 3
13596: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
13597: LD_INT 0
13599: PPUSH
13600: PPUSH
// if not array1 or not array2 then
13601: LD_VAR 0 1
13605: NOT
13606: PUSH
13607: LD_VAR 0 2
13611: NOT
13612: OR
13613: IFFALSE 13617
// exit ;
13615: GO 13681
// result := true ;
13617: LD_ADDR_VAR 0 3
13621: PUSH
13622: LD_INT 1
13624: ST_TO_ADDR
// for i = 1 to array1 do
13625: LD_ADDR_VAR 0 4
13629: PUSH
13630: DOUBLE
13631: LD_INT 1
13633: DEC
13634: ST_TO_ADDR
13635: LD_VAR 0 1
13639: PUSH
13640: FOR_TO
13641: IFFALSE 13679
// if array1 [ i ] <> array2 [ i ] then
13643: LD_VAR 0 1
13647: PUSH
13648: LD_VAR 0 4
13652: ARRAY
13653: PUSH
13654: LD_VAR 0 2
13658: PUSH
13659: LD_VAR 0 4
13663: ARRAY
13664: NONEQUAL
13665: IFFALSE 13677
// begin result := false ;
13667: LD_ADDR_VAR 0 3
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// break ;
13675: GO 13679
// end ;
13677: GO 13640
13679: POP
13680: POP
// end ;
13681: LD_VAR 0 3
13685: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
13686: LD_INT 0
13688: PPUSH
13689: PPUSH
13690: PPUSH
// pom := GetBase ( fac ) ;
13691: LD_ADDR_VAR 0 5
13695: PUSH
13696: LD_VAR 0 1
13700: PPUSH
13701: CALL_OW 274
13705: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
13706: LD_ADDR_VAR 0 4
13710: PUSH
13711: LD_VAR 0 2
13715: PUSH
13716: LD_INT 1
13718: ARRAY
13719: PPUSH
13720: LD_VAR 0 2
13724: PUSH
13725: LD_INT 2
13727: ARRAY
13728: PPUSH
13729: LD_VAR 0 2
13733: PUSH
13734: LD_INT 3
13736: ARRAY
13737: PPUSH
13738: LD_VAR 0 2
13742: PUSH
13743: LD_INT 4
13745: ARRAY
13746: PPUSH
13747: CALL_OW 449
13751: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: LD_VAR 0 5
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 275
13769: PUSH
13770: LD_VAR 0 4
13774: PUSH
13775: LD_INT 1
13777: ARRAY
13778: GREATEREQUAL
13779: PUSH
13780: LD_VAR 0 5
13784: PPUSH
13785: LD_INT 2
13787: PPUSH
13788: CALL_OW 275
13792: PUSH
13793: LD_VAR 0 4
13797: PUSH
13798: LD_INT 2
13800: ARRAY
13801: GREATEREQUAL
13802: AND
13803: PUSH
13804: LD_VAR 0 5
13808: PPUSH
13809: LD_INT 3
13811: PPUSH
13812: CALL_OW 275
13816: PUSH
13817: LD_VAR 0 4
13821: PUSH
13822: LD_INT 3
13824: ARRAY
13825: GREATEREQUAL
13826: AND
13827: ST_TO_ADDR
// end ;
13828: LD_VAR 0 3
13832: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
13833: LD_INT 0
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
// pom := GetBase ( building ) ;
13839: LD_ADDR_VAR 0 3
13843: PUSH
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL_OW 274
13853: ST_TO_ADDR
// if not pom then
13854: LD_VAR 0 3
13858: NOT
13859: IFFALSE 13863
// exit ;
13861: GO 14033
// btype := GetBType ( building ) ;
13863: LD_ADDR_VAR 0 5
13867: PUSH
13868: LD_VAR 0 1
13872: PPUSH
13873: CALL_OW 266
13877: ST_TO_ADDR
// if btype = b_armoury then
13878: LD_VAR 0 5
13882: PUSH
13883: LD_INT 4
13885: EQUAL
13886: IFFALSE 13896
// btype := b_barracks ;
13888: LD_ADDR_VAR 0 5
13892: PUSH
13893: LD_INT 5
13895: ST_TO_ADDR
// if btype = b_depot then
13896: LD_VAR 0 5
13900: PUSH
13901: LD_INT 0
13903: EQUAL
13904: IFFALSE 13914
// btype := b_warehouse ;
13906: LD_ADDR_VAR 0 5
13910: PUSH
13911: LD_INT 1
13913: ST_TO_ADDR
// if btype = b_workshop then
13914: LD_VAR 0 5
13918: PUSH
13919: LD_INT 2
13921: EQUAL
13922: IFFALSE 13932
// btype := b_factory ;
13924: LD_ADDR_VAR 0 5
13928: PUSH
13929: LD_INT 3
13931: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
13932: LD_ADDR_VAR 0 4
13936: PUSH
13937: LD_VAR 0 5
13941: PPUSH
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 248
13951: PPUSH
13952: CALL_OW 450
13956: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_VAR 0 3
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 275
13974: PUSH
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: GREATEREQUAL
13984: PUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 2
13992: PPUSH
13993: CALL_OW 275
13997: PUSH
13998: LD_VAR 0 4
14002: PUSH
14003: LD_INT 2
14005: ARRAY
14006: GREATEREQUAL
14007: AND
14008: PUSH
14009: LD_VAR 0 3
14013: PPUSH
14014: LD_INT 3
14016: PPUSH
14017: CALL_OW 275
14021: PUSH
14022: LD_VAR 0 4
14026: PUSH
14027: LD_INT 3
14029: ARRAY
14030: GREATEREQUAL
14031: AND
14032: ST_TO_ADDR
// end ;
14033: LD_VAR 0 2
14037: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14038: LD_INT 0
14040: PPUSH
14041: PPUSH
14042: PPUSH
// pom := GetBase ( building ) ;
14043: LD_ADDR_VAR 0 4
14047: PUSH
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 274
14057: ST_TO_ADDR
// if not pom then
14058: LD_VAR 0 4
14062: NOT
14063: IFFALSE 14067
// exit ;
14065: GO 14168
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14067: LD_ADDR_VAR 0 5
14071: PUSH
14072: LD_VAR 0 2
14076: PPUSH
14077: LD_VAR 0 1
14081: PPUSH
14082: CALL_OW 248
14086: PPUSH
14087: CALL_OW 450
14091: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14092: LD_ADDR_VAR 0 3
14096: PUSH
14097: LD_VAR 0 4
14101: PPUSH
14102: LD_INT 1
14104: PPUSH
14105: CALL_OW 275
14109: PUSH
14110: LD_VAR 0 5
14114: PUSH
14115: LD_INT 1
14117: ARRAY
14118: GREATEREQUAL
14119: PUSH
14120: LD_VAR 0 4
14124: PPUSH
14125: LD_INT 2
14127: PPUSH
14128: CALL_OW 275
14132: PUSH
14133: LD_VAR 0 5
14137: PUSH
14138: LD_INT 2
14140: ARRAY
14141: GREATEREQUAL
14142: AND
14143: PUSH
14144: LD_VAR 0 4
14148: PPUSH
14149: LD_INT 3
14151: PPUSH
14152: CALL_OW 275
14156: PUSH
14157: LD_VAR 0 5
14161: PUSH
14162: LD_INT 3
14164: ARRAY
14165: GREATEREQUAL
14166: AND
14167: ST_TO_ADDR
// end ;
14168: LD_VAR 0 3
14172: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
14177: PPUSH
14178: PPUSH
14179: PPUSH
14180: PPUSH
14181: PPUSH
14182: PPUSH
14183: PPUSH
14184: PPUSH
14185: PPUSH
// result := false ;
14186: LD_ADDR_VAR 0 8
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14194: LD_VAR 0 5
14198: NOT
14199: PUSH
14200: LD_VAR 0 1
14204: NOT
14205: OR
14206: PUSH
14207: LD_VAR 0 2
14211: NOT
14212: OR
14213: PUSH
14214: LD_VAR 0 3
14218: NOT
14219: OR
14220: IFFALSE 14224
// exit ;
14222: GO 15038
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14224: LD_ADDR_VAR 0 14
14228: PUSH
14229: LD_VAR 0 1
14233: PPUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_VAR 0 3
14243: PPUSH
14244: LD_VAR 0 4
14248: PPUSH
14249: LD_VAR 0 5
14253: PUSH
14254: LD_INT 1
14256: ARRAY
14257: PPUSH
14258: CALL_OW 248
14262: PPUSH
14263: LD_INT 0
14265: PPUSH
14266: CALL 16275 0 6
14270: ST_TO_ADDR
// if not hexes then
14271: LD_VAR 0 14
14275: NOT
14276: IFFALSE 14280
// exit ;
14278: GO 15038
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14280: LD_ADDR_VAR 0 17
14284: PUSH
14285: LD_VAR 0 5
14289: PPUSH
14290: LD_INT 22
14292: PUSH
14293: LD_VAR 0 13
14297: PPUSH
14298: CALL_OW 255
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 2
14309: PUSH
14310: LD_INT 30
14312: PUSH
14313: LD_INT 0
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 30
14322: PUSH
14323: LD_INT 1
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 72
14343: ST_TO_ADDR
// for i = 1 to hexes do
14344: LD_ADDR_VAR 0 9
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_VAR 0 14
14358: PUSH
14359: FOR_TO
14360: IFFALSE 15036
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14362: LD_ADDR_VAR 0 13
14366: PUSH
14367: LD_VAR 0 14
14371: PUSH
14372: LD_VAR 0 9
14376: ARRAY
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: LD_VAR 0 14
14386: PUSH
14387: LD_VAR 0 9
14391: ARRAY
14392: PUSH
14393: LD_INT 2
14395: ARRAY
14396: PPUSH
14397: CALL_OW 428
14401: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14402: LD_VAR 0 14
14406: PUSH
14407: LD_VAR 0 9
14411: ARRAY
14412: PUSH
14413: LD_INT 1
14415: ARRAY
14416: PPUSH
14417: LD_VAR 0 14
14421: PUSH
14422: LD_VAR 0 9
14426: ARRAY
14427: PUSH
14428: LD_INT 2
14430: ARRAY
14431: PPUSH
14432: CALL_OW 351
14436: PUSH
14437: LD_VAR 0 14
14441: PUSH
14442: LD_VAR 0 9
14446: ARRAY
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PPUSH
14452: LD_VAR 0 14
14456: PUSH
14457: LD_VAR 0 9
14461: ARRAY
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PPUSH
14467: CALL_OW 488
14471: NOT
14472: OR
14473: PUSH
14474: LD_VAR 0 13
14478: PPUSH
14479: CALL_OW 247
14483: PUSH
14484: LD_INT 3
14486: EQUAL
14487: OR
14488: IFFALSE 14494
// exit ;
14490: POP
14491: POP
14492: GO 15038
// if not tmp then
14494: LD_VAR 0 13
14498: NOT
14499: IFFALSE 14503
// continue ;
14501: GO 14359
// result := true ;
14503: LD_ADDR_VAR 0 8
14507: PUSH
14508: LD_INT 1
14510: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14511: LD_VAR 0 6
14515: PUSH
14516: LD_VAR 0 13
14520: PPUSH
14521: CALL_OW 247
14525: PUSH
14526: LD_INT 2
14528: EQUAL
14529: AND
14530: PUSH
14531: LD_VAR 0 13
14535: PPUSH
14536: CALL_OW 263
14540: PUSH
14541: LD_INT 1
14543: EQUAL
14544: AND
14545: IFFALSE 14709
// begin if IsDrivenBy ( tmp ) then
14547: LD_VAR 0 13
14551: PPUSH
14552: CALL_OW 311
14556: IFFALSE 14560
// continue ;
14558: GO 14359
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
14560: LD_VAR 0 6
14564: PPUSH
14565: LD_INT 3
14567: PUSH
14568: LD_INT 60
14570: PUSH
14571: EMPTY
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 3
14580: PUSH
14581: LD_INT 55
14583: PUSH
14584: EMPTY
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 72
14599: IFFALSE 14707
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
14601: LD_ADDR_VAR 0 18
14605: PUSH
14606: LD_VAR 0 6
14610: PPUSH
14611: LD_INT 3
14613: PUSH
14614: LD_INT 60
14616: PUSH
14617: EMPTY
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: LD_INT 55
14629: PUSH
14630: EMPTY
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PPUSH
14641: CALL_OW 72
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: ST_TO_ADDR
// if IsInUnit ( driver ) then
14650: LD_VAR 0 18
14654: PPUSH
14655: CALL_OW 310
14659: IFFALSE 14670
// ComExit ( driver ) ;
14661: LD_VAR 0 18
14665: PPUSH
14666: CALL 39403 0 1
// AddComEnterUnit ( driver , tmp ) ;
14670: LD_VAR 0 18
14674: PPUSH
14675: LD_VAR 0 13
14679: PPUSH
14680: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
14684: LD_VAR 0 18
14688: PPUSH
14689: LD_VAR 0 7
14693: PPUSH
14694: CALL_OW 173
// AddComExitVehicle ( driver ) ;
14698: LD_VAR 0 18
14702: PPUSH
14703: CALL_OW 181
// end ; continue ;
14707: GO 14359
// end ; if not cleaners or not tmp in cleaners then
14709: LD_VAR 0 6
14713: NOT
14714: PUSH
14715: LD_VAR 0 13
14719: PUSH
14720: LD_VAR 0 6
14724: IN
14725: NOT
14726: OR
14727: IFFALSE 15034
// begin if dep then
14729: LD_VAR 0 17
14733: IFFALSE 14869
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
14735: LD_ADDR_VAR 0 16
14739: PUSH
14740: LD_VAR 0 17
14744: PUSH
14745: LD_INT 1
14747: ARRAY
14748: PPUSH
14749: CALL_OW 250
14753: PPUSH
14754: LD_VAR 0 17
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PPUSH
14763: CALL_OW 254
14767: PPUSH
14768: LD_INT 5
14770: PPUSH
14771: CALL_OW 272
14775: PUSH
14776: LD_VAR 0 17
14780: PUSH
14781: LD_INT 1
14783: ARRAY
14784: PPUSH
14785: CALL_OW 251
14789: PPUSH
14790: LD_VAR 0 17
14794: PUSH
14795: LD_INT 1
14797: ARRAY
14798: PPUSH
14799: CALL_OW 254
14803: PPUSH
14804: LD_INT 5
14806: PPUSH
14807: CALL_OW 273
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
14816: LD_VAR 0 16
14820: PUSH
14821: LD_INT 1
14823: ARRAY
14824: PPUSH
14825: LD_VAR 0 16
14829: PUSH
14830: LD_INT 2
14832: ARRAY
14833: PPUSH
14834: CALL_OW 488
14838: IFFALSE 14869
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
14840: LD_VAR 0 13
14844: PPUSH
14845: LD_VAR 0 16
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PPUSH
14854: LD_VAR 0 16
14858: PUSH
14859: LD_INT 2
14861: ARRAY
14862: PPUSH
14863: CALL_OW 111
// continue ;
14867: GO 14359
// end ; end ; r := GetDir ( tmp ) ;
14869: LD_ADDR_VAR 0 15
14873: PUSH
14874: LD_VAR 0 13
14878: PPUSH
14879: CALL_OW 254
14883: ST_TO_ADDR
// if r = 5 then
14884: LD_VAR 0 15
14888: PUSH
14889: LD_INT 5
14891: EQUAL
14892: IFFALSE 14902
// r := 0 ;
14894: LD_ADDR_VAR 0 15
14898: PUSH
14899: LD_INT 0
14901: ST_TO_ADDR
// for j = r to 5 do
14902: LD_ADDR_VAR 0 10
14906: PUSH
14907: DOUBLE
14908: LD_VAR 0 15
14912: DEC
14913: ST_TO_ADDR
14914: LD_INT 5
14916: PUSH
14917: FOR_TO
14918: IFFALSE 15032
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
14920: LD_ADDR_VAR 0 11
14924: PUSH
14925: LD_VAR 0 13
14929: PPUSH
14930: CALL_OW 250
14934: PPUSH
14935: LD_VAR 0 10
14939: PPUSH
14940: LD_INT 2
14942: PPUSH
14943: CALL_OW 272
14947: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
14948: LD_ADDR_VAR 0 12
14952: PUSH
14953: LD_VAR 0 13
14957: PPUSH
14958: CALL_OW 251
14962: PPUSH
14963: LD_VAR 0 10
14967: PPUSH
14968: LD_INT 2
14970: PPUSH
14971: CALL_OW 273
14975: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
14976: LD_VAR 0 11
14980: PPUSH
14981: LD_VAR 0 12
14985: PPUSH
14986: CALL_OW 488
14990: PUSH
14991: LD_VAR 0 11
14995: PPUSH
14996: LD_VAR 0 12
15000: PPUSH
15001: CALL_OW 428
15005: NOT
15006: AND
15007: IFFALSE 15030
// begin ComMoveXY ( tmp , _x , _y ) ;
15009: LD_VAR 0 13
15013: PPUSH
15014: LD_VAR 0 11
15018: PPUSH
15019: LD_VAR 0 12
15023: PPUSH
15024: CALL_OW 111
// break ;
15028: GO 15032
// end ; end ;
15030: GO 14917
15032: POP
15033: POP
// end ; end ;
15034: GO 14359
15036: POP
15037: POP
// end ;
15038: LD_VAR 0 8
15042: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15043: LD_INT 0
15045: PPUSH
// result := true ;
15046: LD_ADDR_VAR 0 3
15050: PUSH
15051: LD_INT 1
15053: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15054: LD_VAR 0 2
15058: PUSH
15059: LD_INT 24
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15073
15065: LD_INT 33
15067: DOUBLE
15068: EQUAL
15069: IFTRUE 15073
15071: GO 15098
15073: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15074: LD_ADDR_VAR 0 3
15078: PUSH
15079: LD_INT 32
15081: PPUSH
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL_OW 321
15091: PUSH
15092: LD_INT 2
15094: EQUAL
15095: ST_TO_ADDR
15096: GO 15418
15098: LD_INT 20
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15131
15106: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15107: LD_ADDR_VAR 0 3
15111: PUSH
15112: LD_INT 6
15114: PPUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 321
15124: PUSH
15125: LD_INT 2
15127: EQUAL
15128: ST_TO_ADDR
15129: GO 15418
15131: LD_INT 22
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15145
15137: LD_INT 36
15139: DOUBLE
15140: EQUAL
15141: IFTRUE 15145
15143: GO 15170
15145: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15146: LD_ADDR_VAR 0 3
15150: PUSH
15151: LD_INT 15
15153: PPUSH
15154: LD_VAR 0 1
15158: PPUSH
15159: CALL_OW 321
15163: PUSH
15164: LD_INT 2
15166: EQUAL
15167: ST_TO_ADDR
15168: GO 15418
15170: LD_INT 30
15172: DOUBLE
15173: EQUAL
15174: IFTRUE 15178
15176: GO 15203
15178: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15179: LD_ADDR_VAR 0 3
15183: PUSH
15184: LD_INT 20
15186: PPUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 321
15196: PUSH
15197: LD_INT 2
15199: EQUAL
15200: ST_TO_ADDR
15201: GO 15418
15203: LD_INT 28
15205: DOUBLE
15206: EQUAL
15207: IFTRUE 15217
15209: LD_INT 21
15211: DOUBLE
15212: EQUAL
15213: IFTRUE 15217
15215: GO 15242
15217: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15218: LD_ADDR_VAR 0 3
15222: PUSH
15223: LD_INT 21
15225: PPUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 321
15235: PUSH
15236: LD_INT 2
15238: EQUAL
15239: ST_TO_ADDR
15240: GO 15418
15242: LD_INT 16
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15277
15250: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15251: LD_ADDR_VAR 0 3
15255: PUSH
15256: LD_EXP 93
15260: PPUSH
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 321
15270: PUSH
15271: LD_INT 2
15273: EQUAL
15274: ST_TO_ADDR
15275: GO 15418
15277: LD_INT 19
15279: DOUBLE
15280: EQUAL
15281: IFTRUE 15291
15283: LD_INT 23
15285: DOUBLE
15286: EQUAL
15287: IFTRUE 15291
15289: GO 15318
15291: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15292: LD_ADDR_VAR 0 3
15296: PUSH
15297: LD_EXP 92
15301: PPUSH
15302: LD_VAR 0 1
15306: PPUSH
15307: CALL_OW 321
15311: PUSH
15312: LD_INT 2
15314: EQUAL
15315: ST_TO_ADDR
15316: GO 15418
15318: LD_INT 17
15320: DOUBLE
15321: EQUAL
15322: IFTRUE 15326
15324: GO 15351
15326: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15327: LD_ADDR_VAR 0 3
15331: PUSH
15332: LD_INT 39
15334: PPUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 321
15344: PUSH
15345: LD_INT 2
15347: EQUAL
15348: ST_TO_ADDR
15349: GO 15418
15351: LD_INT 18
15353: DOUBLE
15354: EQUAL
15355: IFTRUE 15359
15357: GO 15384
15359: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_INT 40
15367: PPUSH
15368: LD_VAR 0 1
15372: PPUSH
15373: CALL_OW 321
15377: PUSH
15378: LD_INT 2
15380: EQUAL
15381: ST_TO_ADDR
15382: GO 15418
15384: LD_INT 27
15386: DOUBLE
15387: EQUAL
15388: IFTRUE 15392
15390: GO 15417
15392: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15393: LD_ADDR_VAR 0 3
15397: PUSH
15398: LD_INT 35
15400: PPUSH
15401: LD_VAR 0 1
15405: PPUSH
15406: CALL_OW 321
15410: PUSH
15411: LD_INT 2
15413: EQUAL
15414: ST_TO_ADDR
15415: GO 15418
15417: POP
// end ;
15418: LD_VAR 0 3
15422: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15423: LD_INT 0
15425: PPUSH
15426: PPUSH
15427: PPUSH
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
// result := false ;
15436: LD_ADDR_VAR 0 6
15440: PUSH
15441: LD_INT 0
15443: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15444: LD_VAR 0 1
15448: NOT
15449: PUSH
15450: LD_VAR 0 1
15454: PPUSH
15455: CALL_OW 266
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: LD_INT 1
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: IN
15470: NOT
15471: OR
15472: PUSH
15473: LD_VAR 0 2
15477: NOT
15478: OR
15479: PUSH
15480: LD_VAR 0 5
15484: PUSH
15485: LD_INT 0
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: LD_INT 2
15493: PUSH
15494: LD_INT 3
15496: PUSH
15497: LD_INT 4
15499: PUSH
15500: LD_INT 5
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: IN
15511: NOT
15512: OR
15513: PUSH
15514: LD_VAR 0 3
15518: PPUSH
15519: LD_VAR 0 4
15523: PPUSH
15524: CALL_OW 488
15528: NOT
15529: OR
15530: IFFALSE 15534
// exit ;
15532: GO 16270
// side := GetSide ( depot ) ;
15534: LD_ADDR_VAR 0 9
15538: PUSH
15539: LD_VAR 0 1
15543: PPUSH
15544: CALL_OW 255
15548: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15549: LD_VAR 0 9
15553: PPUSH
15554: LD_VAR 0 2
15558: PPUSH
15559: CALL 15043 0 2
15563: NOT
15564: IFFALSE 15568
// exit ;
15566: GO 16270
// pom := GetBase ( depot ) ;
15568: LD_ADDR_VAR 0 10
15572: PUSH
15573: LD_VAR 0 1
15577: PPUSH
15578: CALL_OW 274
15582: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
15583: LD_ADDR_VAR 0 11
15587: PUSH
15588: LD_VAR 0 2
15592: PPUSH
15593: LD_VAR 0 1
15597: PPUSH
15598: CALL_OW 248
15602: PPUSH
15603: CALL_OW 450
15607: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
15608: LD_VAR 0 10
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 275
15620: PUSH
15621: LD_VAR 0 11
15625: PUSH
15626: LD_INT 1
15628: ARRAY
15629: GREATEREQUAL
15630: PUSH
15631: LD_VAR 0 10
15635: PPUSH
15636: LD_INT 2
15638: PPUSH
15639: CALL_OW 275
15643: PUSH
15644: LD_VAR 0 11
15648: PUSH
15649: LD_INT 2
15651: ARRAY
15652: GREATEREQUAL
15653: AND
15654: PUSH
15655: LD_VAR 0 10
15659: PPUSH
15660: LD_INT 3
15662: PPUSH
15663: CALL_OW 275
15667: PUSH
15668: LD_VAR 0 11
15672: PUSH
15673: LD_INT 3
15675: ARRAY
15676: GREATEREQUAL
15677: AND
15678: NOT
15679: IFFALSE 15683
// exit ;
15681: GO 16270
// if GetBType ( depot ) = b_depot then
15683: LD_VAR 0 1
15687: PPUSH
15688: CALL_OW 266
15692: PUSH
15693: LD_INT 0
15695: EQUAL
15696: IFFALSE 15708
// dist := 28 else
15698: LD_ADDR_VAR 0 14
15702: PUSH
15703: LD_INT 28
15705: ST_TO_ADDR
15706: GO 15716
// dist := 36 ;
15708: LD_ADDR_VAR 0 14
15712: PUSH
15713: LD_INT 36
15715: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
15716: LD_VAR 0 1
15720: PPUSH
15721: LD_VAR 0 3
15725: PPUSH
15726: LD_VAR 0 4
15730: PPUSH
15731: CALL_OW 297
15735: PUSH
15736: LD_VAR 0 14
15740: GREATER
15741: IFFALSE 15745
// exit ;
15743: GO 16270
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
15745: LD_ADDR_VAR 0 12
15749: PUSH
15750: LD_VAR 0 2
15754: PPUSH
15755: LD_VAR 0 3
15759: PPUSH
15760: LD_VAR 0 4
15764: PPUSH
15765: LD_VAR 0 5
15769: PPUSH
15770: LD_VAR 0 1
15774: PPUSH
15775: CALL_OW 248
15779: PPUSH
15780: LD_INT 0
15782: PPUSH
15783: CALL 16275 0 6
15787: ST_TO_ADDR
// if not hexes then
15788: LD_VAR 0 12
15792: NOT
15793: IFFALSE 15797
// exit ;
15795: GO 16270
// hex := GetHexInfo ( x , y ) ;
15797: LD_ADDR_VAR 0 15
15801: PUSH
15802: LD_VAR 0 3
15806: PPUSH
15807: LD_VAR 0 4
15811: PPUSH
15812: CALL_OW 546
15816: ST_TO_ADDR
// if hex [ 1 ] then
15817: LD_VAR 0 15
15821: PUSH
15822: LD_INT 1
15824: ARRAY
15825: IFFALSE 15829
// exit ;
15827: GO 16270
// height := hex [ 2 ] ;
15829: LD_ADDR_VAR 0 13
15833: PUSH
15834: LD_VAR 0 15
15838: PUSH
15839: LD_INT 2
15841: ARRAY
15842: ST_TO_ADDR
// for i = 1 to hexes do
15843: LD_ADDR_VAR 0 7
15847: PUSH
15848: DOUBLE
15849: LD_INT 1
15851: DEC
15852: ST_TO_ADDR
15853: LD_VAR 0 12
15857: PUSH
15858: FOR_TO
15859: IFFALSE 16189
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
15861: LD_VAR 0 12
15865: PUSH
15866: LD_VAR 0 7
15870: ARRAY
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PPUSH
15876: LD_VAR 0 12
15880: PUSH
15881: LD_VAR 0 7
15885: ARRAY
15886: PUSH
15887: LD_INT 2
15889: ARRAY
15890: PPUSH
15891: CALL_OW 488
15895: NOT
15896: PUSH
15897: LD_VAR 0 12
15901: PUSH
15902: LD_VAR 0 7
15906: ARRAY
15907: PUSH
15908: LD_INT 1
15910: ARRAY
15911: PPUSH
15912: LD_VAR 0 12
15916: PUSH
15917: LD_VAR 0 7
15921: ARRAY
15922: PUSH
15923: LD_INT 2
15925: ARRAY
15926: PPUSH
15927: CALL_OW 428
15931: PUSH
15932: LD_INT 0
15934: GREATER
15935: OR
15936: PUSH
15937: LD_VAR 0 12
15941: PUSH
15942: LD_VAR 0 7
15946: ARRAY
15947: PUSH
15948: LD_INT 1
15950: ARRAY
15951: PPUSH
15952: LD_VAR 0 12
15956: PUSH
15957: LD_VAR 0 7
15961: ARRAY
15962: PUSH
15963: LD_INT 2
15965: ARRAY
15966: PPUSH
15967: CALL_OW 351
15971: OR
15972: IFFALSE 15978
// exit ;
15974: POP
15975: POP
15976: GO 16270
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15978: LD_ADDR_VAR 0 8
15982: PUSH
15983: LD_VAR 0 12
15987: PUSH
15988: LD_VAR 0 7
15992: ARRAY
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: PPUSH
15998: LD_VAR 0 12
16002: PUSH
16003: LD_VAR 0 7
16007: ARRAY
16008: PUSH
16009: LD_INT 2
16011: ARRAY
16012: PPUSH
16013: CALL_OW 546
16017: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16018: LD_VAR 0 8
16022: PUSH
16023: LD_INT 1
16025: ARRAY
16026: PUSH
16027: LD_VAR 0 8
16031: PUSH
16032: LD_INT 2
16034: ARRAY
16035: PUSH
16036: LD_VAR 0 13
16040: PUSH
16041: LD_INT 2
16043: PLUS
16044: GREATER
16045: OR
16046: PUSH
16047: LD_VAR 0 8
16051: PUSH
16052: LD_INT 2
16054: ARRAY
16055: PUSH
16056: LD_VAR 0 13
16060: PUSH
16061: LD_INT 2
16063: MINUS
16064: LESS
16065: OR
16066: PUSH
16067: LD_VAR 0 8
16071: PUSH
16072: LD_INT 3
16074: ARRAY
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: LD_INT 8
16081: PUSH
16082: LD_INT 9
16084: PUSH
16085: LD_INT 10
16087: PUSH
16088: LD_INT 11
16090: PUSH
16091: LD_INT 12
16093: PUSH
16094: LD_INT 13
16096: PUSH
16097: LD_INT 16
16099: PUSH
16100: LD_INT 17
16102: PUSH
16103: LD_INT 18
16105: PUSH
16106: LD_INT 19
16108: PUSH
16109: LD_INT 20
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: IN
16130: NOT
16131: OR
16132: PUSH
16133: LD_VAR 0 8
16137: PUSH
16138: LD_INT 5
16140: ARRAY
16141: NOT
16142: OR
16143: PUSH
16144: LD_VAR 0 8
16148: PUSH
16149: LD_INT 6
16151: ARRAY
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: LD_INT 7
16161: PUSH
16162: LD_INT 9
16164: PUSH
16165: LD_INT 10
16167: PUSH
16168: LD_INT 11
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: IN
16179: NOT
16180: OR
16181: IFFALSE 16187
// exit ;
16183: POP
16184: POP
16185: GO 16270
// end ;
16187: GO 15858
16189: POP
16190: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16191: LD_VAR 0 9
16195: PPUSH
16196: LD_VAR 0 3
16200: PPUSH
16201: LD_VAR 0 4
16205: PPUSH
16206: LD_INT 20
16208: PPUSH
16209: CALL 8216 0 4
16213: PUSH
16214: LD_INT 4
16216: ARRAY
16217: IFFALSE 16221
// exit ;
16219: GO 16270
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16221: LD_VAR 0 2
16225: PUSH
16226: LD_INT 29
16228: PUSH
16229: LD_INT 30
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: IN
16236: PUSH
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_VAR 0 4
16246: PPUSH
16247: LD_VAR 0 9
16251: PPUSH
16252: CALL_OW 440
16256: NOT
16257: AND
16258: IFFALSE 16262
// exit ;
16260: GO 16270
// result := true ;
16262: LD_ADDR_VAR 0 6
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// end ;
16270: LD_VAR 0 6
16274: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16275: LD_INT 0
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
16285: PPUSH
16286: PPUSH
16287: PPUSH
16288: PPUSH
16289: PPUSH
16290: PPUSH
16291: PPUSH
16292: PPUSH
16293: PPUSH
16294: PPUSH
16295: PPUSH
16296: PPUSH
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
16301: PPUSH
16302: PPUSH
16303: PPUSH
16304: PPUSH
16305: PPUSH
16306: PPUSH
16307: PPUSH
16308: PPUSH
16309: PPUSH
16310: PPUSH
16311: PPUSH
16312: PPUSH
16313: PPUSH
16314: PPUSH
16315: PPUSH
16316: PPUSH
16317: PPUSH
16318: PPUSH
16319: PPUSH
16320: PPUSH
16321: PPUSH
16322: PPUSH
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
// result = [ ] ;
16335: LD_ADDR_VAR 0 7
16339: PUSH
16340: EMPTY
16341: ST_TO_ADDR
// temp_list = [ ] ;
16342: LD_ADDR_VAR 0 9
16346: PUSH
16347: EMPTY
16348: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16349: LD_VAR 0 4
16353: PUSH
16354: LD_INT 0
16356: PUSH
16357: LD_INT 1
16359: PUSH
16360: LD_INT 2
16362: PUSH
16363: LD_INT 3
16365: PUSH
16366: LD_INT 4
16368: PUSH
16369: LD_INT 5
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: IN
16380: NOT
16381: PUSH
16382: LD_VAR 0 1
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: LD_INT 1
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: IN
16397: PUSH
16398: LD_VAR 0 5
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: IN
16417: NOT
16418: AND
16419: OR
16420: IFFALSE 16424
// exit ;
16422: GO 34815
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16424: LD_VAR 0 1
16428: PUSH
16429: LD_INT 6
16431: PUSH
16432: LD_INT 7
16434: PUSH
16435: LD_INT 8
16437: PUSH
16438: LD_INT 13
16440: PUSH
16441: LD_INT 12
16443: PUSH
16444: LD_INT 15
16446: PUSH
16447: LD_INT 11
16449: PUSH
16450: LD_INT 14
16452: PUSH
16453: LD_INT 10
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: IN
16467: IFFALSE 16477
// btype = b_lab ;
16469: LD_ADDR_VAR 0 1
16473: PUSH
16474: LD_INT 6
16476: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16477: LD_VAR 0 6
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: IN
16496: NOT
16497: PUSH
16498: LD_VAR 0 1
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: LD_INT 6
16517: PUSH
16518: LD_INT 36
16520: PUSH
16521: LD_INT 4
16523: PUSH
16524: LD_INT 5
16526: PUSH
16527: LD_INT 31
16529: PUSH
16530: LD_INT 32
16532: PUSH
16533: LD_INT 33
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: IN
16549: NOT
16550: PUSH
16551: LD_VAR 0 6
16555: PUSH
16556: LD_INT 1
16558: EQUAL
16559: AND
16560: OR
16561: PUSH
16562: LD_VAR 0 1
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: LD_INT 3
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: IN
16577: NOT
16578: PUSH
16579: LD_VAR 0 6
16583: PUSH
16584: LD_INT 2
16586: EQUAL
16587: AND
16588: OR
16589: IFFALSE 16599
// mode = 0 ;
16591: LD_ADDR_VAR 0 6
16595: PUSH
16596: LD_INT 0
16598: ST_TO_ADDR
// case mode of 0 :
16599: LD_VAR 0 6
16603: PUSH
16604: LD_INT 0
16606: DOUBLE
16607: EQUAL
16608: IFTRUE 16612
16610: GO 28065
16612: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
16613: LD_ADDR_VAR 0 11
16617: PUSH
16618: LD_INT 0
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 0
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: LD_INT 1
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 0
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: LD_INT 0
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 1
16682: NEG
16683: PUSH
16684: LD_INT 1
16686: NEG
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: LD_INT 1
16694: NEG
16695: PUSH
16696: LD_INT 2
16698: NEG
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 0
16706: PUSH
16707: LD_INT 2
16709: NEG
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 1
16717: PUSH
16718: LD_INT 1
16720: NEG
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: LD_INT 2
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 0
16738: PUSH
16739: LD_INT 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 1
16748: NEG
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: LD_INT 3
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 0
16769: PUSH
16770: LD_INT 3
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 1
16779: NEG
16780: PUSH
16781: LD_INT 2
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16806: LD_ADDR_VAR 0 12
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: LD_INT 1
16826: NEG
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 1
16834: PUSH
16835: LD_INT 0
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 0
16854: PUSH
16855: LD_INT 1
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 1
16864: NEG
16865: PUSH
16866: LD_INT 0
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: PUSH
16873: LD_INT 1
16875: NEG
16876: PUSH
16877: LD_INT 1
16879: NEG
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: LD_INT 1
16890: NEG
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 0
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: LD_INT 1
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: PUSH
16916: LD_INT 1
16918: NEG
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: LD_INT 2
16929: NEG
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: LD_INT 2
16940: NEG
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 2
16952: NEG
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 3
16963: NEG
16964: PUSH
16965: LD_INT 0
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 3
16974: NEG
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17002: LD_ADDR_VAR 0 13
17006: PUSH
17007: LD_INT 0
17009: PUSH
17010: LD_INT 0
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 0
17019: PUSH
17020: LD_INT 1
17022: NEG
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: LD_INT 0
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: LD_INT 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 1
17060: NEG
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 1
17071: NEG
17072: PUSH
17073: LD_INT 1
17075: NEG
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 1
17083: NEG
17084: PUSH
17085: LD_INT 2
17087: NEG
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 2
17105: PUSH
17106: LD_INT 2
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: LD_INT 2
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 2
17125: NEG
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 2
17137: NEG
17138: PUSH
17139: LD_INT 2
17141: NEG
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 2
17149: NEG
17150: PUSH
17151: LD_INT 3
17153: NEG
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 3
17161: NEG
17162: PUSH
17163: LD_INT 2
17165: NEG
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 3
17173: NEG
17174: PUSH
17175: LD_INT 3
17177: NEG
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17201: LD_ADDR_VAR 0 14
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 0
17218: PUSH
17219: LD_INT 1
17221: NEG
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 1
17229: PUSH
17230: LD_INT 0
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 0
17249: PUSH
17250: LD_INT 1
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: NEG
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 1
17270: NEG
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 1
17282: NEG
17283: PUSH
17284: LD_INT 2
17286: NEG
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: LD_INT 2
17297: NEG
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 1
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 1
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 0
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 1
17336: NEG
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 1
17347: NEG
17348: PUSH
17349: LD_INT 3
17351: NEG
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: LD_INT 3
17362: NEG
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: LD_INT 2
17373: NEG
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17397: LD_ADDR_VAR 0 15
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: LD_INT 1
17417: NEG
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 0
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: LD_INT 1
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 0
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 1
17455: NEG
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 1
17466: NEG
17467: PUSH
17468: LD_INT 1
17470: NEG
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: LD_INT 1
17481: NEG
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 2
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 1
17509: NEG
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 2
17520: NEG
17521: PUSH
17522: LD_INT 0
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 2
17531: NEG
17532: PUSH
17533: LD_INT 1
17535: NEG
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 2
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 3
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 3
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
17590: LD_ADDR_VAR 0 16
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: LD_INT 0
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 0
17607: PUSH
17608: LD_INT 1
17610: NEG
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 0
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: LD_INT 0
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 1
17659: NEG
17660: PUSH
17661: LD_INT 1
17663: NEG
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: LD_INT 2
17675: NEG
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 2
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: LD_INT 2
17693: PUSH
17694: LD_INT 2
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: LD_INT 2
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 2
17713: NEG
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 2
17725: NEG
17726: PUSH
17727: LD_INT 2
17729: NEG
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: LD_INT 3
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17783: LD_ADDR_VAR 0 17
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 0
17800: PUSH
17801: LD_INT 1
17803: NEG
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 1
17811: PUSH
17812: LD_INT 0
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 1
17821: PUSH
17822: LD_INT 1
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: LD_INT 0
17831: PUSH
17832: LD_INT 1
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 1
17841: NEG
17842: PUSH
17843: LD_INT 0
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: LD_INT 2
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 2
17918: PUSH
17919: LD_INT 2
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: LD_INT 2
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 1
17948: NEG
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: NEG
17960: PUSH
17961: LD_INT 0
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 2
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: NEG
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 2
17982: NEG
17983: PUSH
17984: LD_INT 2
17986: NEG
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18013: LD_ADDR_VAR 0 18
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: LD_INT 1
18033: NEG
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 1
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 1
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 0
18061: PUSH
18062: LD_INT 1
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 1
18071: NEG
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 1
18082: NEG
18083: PUSH
18084: LD_INT 1
18086: NEG
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: LD_INT 2
18098: NEG
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 2
18109: NEG
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 1
18117: PUSH
18118: LD_INT 1
18120: NEG
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 2
18128: PUSH
18129: LD_INT 0
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 2
18138: PUSH
18139: LD_INT 1
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: LD_INT 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 0
18168: PUSH
18169: LD_INT 2
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 2
18189: NEG
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: NEG
18201: PUSH
18202: LD_INT 1
18204: NEG
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: NEG
18213: PUSH
18214: LD_INT 2
18216: NEG
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18243: LD_ADDR_VAR 0 19
18247: PUSH
18248: LD_INT 0
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 1
18263: NEG
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: LD_INT 0
18291: PUSH
18292: LD_INT 1
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 1
18301: NEG
18302: PUSH
18303: LD_INT 0
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 1
18312: NEG
18313: PUSH
18314: LD_INT 1
18316: NEG
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: NEG
18325: PUSH
18326: LD_INT 2
18328: NEG
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: LD_INT 1
18350: NEG
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 2
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: LD_INT 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 2
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 1
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 2
18419: NEG
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: NEG
18431: PUSH
18432: LD_INT 1
18434: NEG
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 2
18442: NEG
18443: PUSH
18444: LD_INT 2
18446: NEG
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18473: LD_ADDR_VAR 0 20
18477: PUSH
18478: LD_INT 0
18480: PUSH
18481: LD_INT 0
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 0
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: LD_INT 1
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 0
18521: PUSH
18522: LD_INT 1
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 1
18531: NEG
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: LD_INT 1
18542: NEG
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: LD_INT 2
18558: NEG
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 2
18569: NEG
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 1
18580: NEG
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 2
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 2
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: NEG
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 2
18660: NEG
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: NEG
18673: PUSH
18674: LD_INT 2
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18703: LD_ADDR_VAR 0 21
18707: PUSH
18708: LD_INT 0
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 0
18720: PUSH
18721: LD_INT 1
18723: NEG
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 1
18761: NEG
18762: PUSH
18763: LD_INT 0
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 1
18772: NEG
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: NEG
18785: PUSH
18786: LD_INT 2
18788: NEG
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: LD_INT 2
18799: NEG
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 2
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 2
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: NEG
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 2
18879: NEG
18880: PUSH
18881: LD_INT 0
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 2
18890: NEG
18891: PUSH
18892: LD_INT 1
18894: NEG
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: NEG
18903: PUSH
18904: LD_INT 2
18906: NEG
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18933: LD_ADDR_VAR 0 22
18937: PUSH
18938: LD_INT 0
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 0
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 1
18991: NEG
18992: PUSH
18993: LD_INT 0
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 1
19002: NEG
19003: PUSH
19004: LD_INT 1
19006: NEG
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 0
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 1
19040: NEG
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 1
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: PUSH
19079: LD_INT 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: LD_INT 2
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: PUSH
19100: LD_INT 1
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 2
19109: NEG
19110: PUSH
19111: LD_INT 0
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 2
19120: NEG
19121: PUSH
19122: LD_INT 1
19124: NEG
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 2
19132: NEG
19133: PUSH
19134: LD_INT 2
19136: NEG
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19163: LD_ADDR_VAR 0 23
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 0
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: LD_INT 1
19236: NEG
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 1
19244: NEG
19245: PUSH
19246: LD_INT 2
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: LD_INT 2
19259: NEG
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 2
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: NEG
19329: PUSH
19330: LD_INT 1
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 2
19339: NEG
19340: PUSH
19341: LD_INT 0
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 2
19350: NEG
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 2
19362: NEG
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 2
19374: NEG
19375: PUSH
19376: LD_INT 3
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: LD_INT 3
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: LD_INT 2
19401: NEG
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 2
19409: PUSH
19410: LD_INT 1
19412: NEG
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19443: LD_ADDR_VAR 0 24
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: LD_INT 1
19463: NEG
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 1
19501: NEG
19502: PUSH
19503: LD_INT 0
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 1
19512: NEG
19513: PUSH
19514: LD_INT 1
19516: NEG
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: LD_INT 2
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: LD_INT 2
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: LD_INT 2
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 2
19619: NEG
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 2
19630: NEG
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 2
19642: NEG
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 1
19654: PUSH
19655: LD_INT 2
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 2
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 3
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 3
19686: PUSH
19687: LD_INT 2
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
19719: LD_ADDR_VAR 0 25
19723: PUSH
19724: LD_INT 0
19726: PUSH
19727: LD_INT 0
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PUSH
19734: LD_INT 0
19736: PUSH
19737: LD_INT 1
19739: NEG
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 1
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: LD_INT 1
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: LD_INT 1
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: PUSH
19775: LD_INT 1
19777: NEG
19778: PUSH
19779: LD_INT 0
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: PUSH
19786: LD_INT 1
19788: NEG
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 1
19800: NEG
19801: PUSH
19802: LD_INT 2
19804: NEG
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 0
19812: PUSH
19813: LD_INT 2
19815: NEG
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: LD_INT 1
19826: NEG
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 2
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: LD_INT 2
19844: PUSH
19845: LD_INT 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: LD_INT 2
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: LD_INT 2
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 0
19874: PUSH
19875: LD_INT 2
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 2
19895: NEG
19896: PUSH
19897: LD_INT 0
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 2
19906: NEG
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 2
19918: NEG
19919: PUSH
19920: LD_INT 2
19922: NEG
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 3
19930: PUSH
19931: LD_INT 1
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PUSH
19948: LD_INT 2
19950: PUSH
19951: LD_INT 3
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
19993: LD_ADDR_VAR 0 26
19997: PUSH
19998: LD_INT 0
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 0
20010: PUSH
20011: LD_INT 1
20013: NEG
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: LD_INT 0
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 0
20041: PUSH
20042: LD_INT 1
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 0
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: LD_INT 1
20066: NEG
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 1
20074: NEG
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: PUSH
20098: LD_INT 1
20100: NEG
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 2
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 1
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: LD_INT 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: LD_INT 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: LD_INT 1
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 2
20169: NEG
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 2
20180: NEG
20181: PUSH
20182: LD_INT 1
20184: NEG
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 2
20192: NEG
20193: PUSH
20194: LD_INT 2
20196: NEG
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: LD_INT 3
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: NEG
20236: PUSH
20237: LD_INT 1
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20269: LD_ADDR_VAR 0 27
20273: PUSH
20274: LD_INT 0
20276: PUSH
20277: LD_INT 0
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 0
20286: PUSH
20287: LD_INT 1
20289: NEG
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 1
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 1
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: LD_INT 0
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 0
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: LD_INT 1
20342: NEG
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: LD_INT 2
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 1
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 0
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: LD_INT 2
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 0
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: NEG
20435: PUSH
20436: LD_INT 1
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 0
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PUSH
20454: LD_INT 2
20456: NEG
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 2
20468: NEG
20469: PUSH
20470: LD_INT 2
20472: NEG
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PUSH
20489: LD_INT 2
20491: NEG
20492: PUSH
20493: LD_INT 1
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: LD_INT 3
20502: NEG
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 3
20514: NEG
20515: PUSH
20516: LD_INT 2
20518: NEG
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20549: LD_ADDR_VAR 0 28
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: NEG
20761: PUSH
20762: LD_INT 3
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: LD_INT 3
20776: NEG
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 3
20784: NEG
20785: PUSH
20786: LD_INT 1
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 3
20796: NEG
20797: PUSH
20798: LD_INT 2
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20831: LD_ADDR_VAR 0 29
20835: PUSH
20836: LD_INT 0
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 0
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: PUSH
20860: LD_INT 0
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: LD_INT 1
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: LD_INT 0
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 1
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: LD_INT 2
20916: NEG
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 0
20924: PUSH
20925: LD_INT 2
20927: NEG
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: LD_INT 1
20938: NEG
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 2
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: LD_INT 1
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 2
20997: NEG
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: NEG
21010: PUSH
21011: LD_INT 2
21013: NEG
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 2
21021: NEG
21022: PUSH
21023: LD_INT 3
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 3
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: LD_INT 3
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 1
21064: NEG
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 3
21075: NEG
21076: PUSH
21077: LD_INT 2
21079: NEG
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: LIST
21109: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21110: LD_ADDR_VAR 0 30
21114: PUSH
21115: LD_INT 0
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: LD_INT 1
21130: NEG
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 1
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: LD_INT 1
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 2
21206: NEG
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 1
21217: NEG
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: LD_INT 0
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 2
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 2
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: LD_INT 2
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 2
21276: NEG
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 2
21287: NEG
21288: PUSH
21289: LD_INT 1
21291: NEG
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: PUSH
21297: LD_INT 1
21299: NEG
21300: PUSH
21301: LD_INT 3
21303: NEG
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 2
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: LD_INT 2
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 3
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 2
21342: NEG
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 3
21353: NEG
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21388: LD_ADDR_VAR 0 31
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 0
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: LD_INT 1
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: LD_INT 1
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: LD_INT 1
21461: NEG
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: PUSH
21467: LD_INT 1
21469: NEG
21470: PUSH
21471: LD_INT 2
21473: NEG
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: LD_INT 1
21481: PUSH
21482: LD_INT 1
21484: NEG
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 0
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: LD_INT 1
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 2
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: NEG
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 2
21565: NEG
21566: PUSH
21567: LD_INT 2
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: NEG
21578: PUSH
21579: LD_INT 3
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: PUSH
21590: LD_INT 1
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 1
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 1
21620: NEG
21621: PUSH
21622: LD_INT 2
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 3
21631: NEG
21632: PUSH
21633: LD_INT 2
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21666: LD_ADDR_VAR 0 32
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: LD_INT 1
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 1
21735: NEG
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 1
21747: NEG
21748: PUSH
21749: LD_INT 2
21751: NEG
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 2
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 2
21791: PUSH
21792: LD_INT 2
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PUSH
21802: LD_INT 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 0
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 1
21821: NEG
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: NEG
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 2
21843: NEG
21844: PUSH
21845: LD_INT 1
21847: NEG
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: LD_INT 3
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: LD_INT 2
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 3
21878: PUSH
21879: LD_INT 2
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 2
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 2
21898: NEG
21899: PUSH
21900: LD_INT 1
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 3
21909: NEG
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21944: LD_ADDR_VAR 0 33
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 0
21961: PUSH
21962: LD_INT 1
21964: NEG
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: LD_INT 1
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: LD_INT 2
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: LD_INT 1
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 1
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: NEG
22135: PUSH
22136: LD_INT 3
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 2
22146: PUSH
22147: LD_INT 1
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 3
22157: PUSH
22158: LD_INT 1
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 1
22167: PUSH
22168: LD_INT 3
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 1
22177: NEG
22178: PUSH
22179: LD_INT 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 3
22188: NEG
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22223: LD_ADDR_VAR 0 34
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 0
22240: PUSH
22241: LD_INT 1
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 1
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: LD_INT 1
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 1
22281: NEG
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: LD_INT 1
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 1
22304: NEG
22305: PUSH
22306: LD_INT 2
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 0
22316: PUSH
22317: LD_INT 2
22319: NEG
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 1
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 2
22379: NEG
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 2
22390: NEG
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 2
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 1
22414: NEG
22415: PUSH
22416: LD_INT 3
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: LD_INT 2
22429: NEG
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 3
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 2
22447: PUSH
22448: LD_INT 3
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 2
22457: NEG
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 3
22468: NEG
22469: PUSH
22470: LD_INT 1
22472: NEG
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22503: LD_ADDR_VAR 0 35
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 0
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 0
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 1
22572: NEG
22573: PUSH
22574: LD_INT 1
22576: NEG
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 1
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 2
22594: NEG
22595: PUSH
22596: LD_INT 1
22598: NEG
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22615: LD_ADDR_VAR 0 36
22619: PUSH
22620: LD_INT 0
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 0
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 2
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 2
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
22727: LD_ADDR_VAR 0 37
22731: PUSH
22732: LD_INT 0
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 0
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: PUSH
22756: LD_INT 0
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: LD_INT 0
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 1
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22839: LD_ADDR_VAR 0 38
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 1
22859: NEG
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 1
22897: NEG
22898: PUSH
22899: LD_INT 0
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 1
22908: NEG
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 2
22930: NEG
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
22951: LD_ADDR_VAR 0 39
22955: PUSH
22956: LD_INT 0
22958: PUSH
22959: LD_INT 0
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: LD_INT 1
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 1
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 0
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 1
23009: NEG
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 1
23020: NEG
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: LD_INT 2
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23063: LD_ADDR_VAR 0 40
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: LD_INT 0
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: LD_INT 0
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 1
23101: PUSH
23102: LD_INT 1
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 0
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23175: LD_ADDR_VAR 0 41
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 1
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 1
23244: NEG
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 1
23319: NEG
23320: PUSH
23321: LD_INT 1
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 2
23330: NEG
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 2
23341: NEG
23342: PUSH
23343: LD_INT 1
23345: NEG
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 2
23353: NEG
23354: PUSH
23355: LD_INT 2
23357: NEG
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: LD_INT 3
23369: NEG
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 3
23398: PUSH
23399: LD_INT 1
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 3
23408: PUSH
23409: LD_INT 2
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: LD_INT 3
23418: PUSH
23419: LD_INT 3
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: PUSH
23426: LD_INT 2
23428: PUSH
23429: LD_INT 3
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: NEG
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 3
23449: NEG
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 3
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 3
23472: NEG
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 3
23484: NEG
23485: PUSH
23486: LD_INT 3
23488: NEG
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23525: LD_ADDR_VAR 0 42
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: LD_INT 1
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 2
23691: NEG
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 2
23703: NEG
23704: PUSH
23705: LD_INT 2
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 2
23715: NEG
23716: PUSH
23717: LD_INT 3
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: LD_INT 3
23731: NEG
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 3
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: LD_INT 2
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 3
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 3
23771: PUSH
23772: LD_INT 3
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 2
23781: PUSH
23782: LD_INT 3
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 3
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: LD_INT 3
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 3
23822: NEG
23823: PUSH
23824: LD_INT 2
23826: NEG
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 3
23834: NEG
23835: PUSH
23836: LD_INT 3
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23875: LD_ADDR_VAR 0 43
23879: PUSH
23880: LD_INT 0
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: LD_INT 1
23895: NEG
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 1
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 0
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 1
23933: NEG
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 1
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: LD_INT 2
23960: NEG
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 2
23971: NEG
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 2
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 2
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 2
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: LD_INT 1
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 2
24041: NEG
24042: PUSH
24043: LD_INT 0
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: LD_INT 1
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 1
24064: NEG
24065: PUSH
24066: LD_INT 3
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 0
24076: PUSH
24077: LD_INT 3
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 2
24090: NEG
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 1
24101: NEG
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 3
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 3
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: PUSH
24130: LD_INT 3
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 3
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 1
24149: NEG
24150: PUSH
24151: LD_INT 2
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 3
24171: NEG
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 3
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24223: LD_ADDR_VAR 0 44
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: NEG
24305: PUSH
24306: LD_INT 2
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: LD_INT 1
24319: NEG
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 2
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: PUSH
24358: LD_INT 2
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 2
24378: NEG
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: NEG
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 2
24401: NEG
24402: PUSH
24403: LD_INT 2
24405: NEG
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 2
24413: NEG
24414: PUSH
24415: LD_INT 3
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 1
24428: NEG
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: LD_INT 3
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 3
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 3
24466: PUSH
24467: LD_INT 3
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 3
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: LD_INT 1
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 3
24497: NEG
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 3
24508: NEG
24509: PUSH
24510: LD_INT 1
24512: NEG
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 3
24520: NEG
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 3
24532: NEG
24533: PUSH
24534: LD_INT 3
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24573: LD_ADDR_VAR 0 45
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 0
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: LD_INT 1
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: LD_INT 1
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: PUSH
24689: LD_INT 1
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 2
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: NEG
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: LD_INT 2
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: LD_INT 3
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 3
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: LD_INT 3
24790: NEG
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: PUSH
24799: LD_INT 2
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 3
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 3
24819: PUSH
24820: LD_INT 3
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 3
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: LD_INT 3
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 3
24870: NEG
24871: PUSH
24872: LD_INT 2
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 3
24882: NEG
24883: PUSH
24884: LD_INT 3
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24923: LD_ADDR_VAR 0 46
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 0
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 0
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 1
24992: NEG
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 2
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: LD_INT 0
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 3
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: LD_INT 3
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 2
25138: NEG
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 3
25157: PUSH
25158: LD_INT 0
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 3
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 1
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: NEG
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 3
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 3
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25271: LD_ADDR_VAR 0 47
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 1
25299: PUSH
25300: LD_INT 0
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: LD_INT 1
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: NEG
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 1
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: PUSH
25354: LD_INT 2
25356: NEG
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 2
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 1
25378: NEG
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: NEG
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: NEG
25399: PUSH
25400: LD_INT 2
25402: NEG
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25422: LD_ADDR_VAR 0 48
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: LD_INT 1
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: LD_INT 1
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
25569: LD_ADDR_VAR 0 49
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 1
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 1
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
25713: LD_ADDR_VAR 0 50
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 0
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: LD_INT 2
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 0
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: LD_INT 1
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
25857: LD_ADDR_VAR 0 51
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 1
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 0
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 2
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: LD_INT 0
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: NEG
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26004: LD_ADDR_VAR 0 52
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 1
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 1
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26155: LD_ADDR_VAR 0 53
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: NEG
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 0
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: LD_INT 1
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: NEG
26237: PUSH
26238: LD_INT 2
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 2
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 1
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: LD_INT 0
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 2
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 0
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: LD_INT 2
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26385: LD_ADDR_VAR 0 54
26389: PUSH
26390: LD_INT 0
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 1
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: NEG
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: NEG
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: LD_INT 0
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26615: LD_ADDR_VAR 0 55
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 2
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 2
26750: PUSH
26751: LD_INT 2
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: NEG
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 2
26802: NEG
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: LD_INT 2
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26845: LD_ADDR_VAR 0 56
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: LD_INT 1
26865: NEG
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 1
26903: NEG
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: NEG
26915: PUSH
26916: LD_INT 1
26918: NEG
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: LD_INT 2
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 2
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 2
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 2
27032: NEG
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 2
27044: NEG
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27075: LD_ADDR_VAR 0 57
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 0
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: NEG
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: NEG
27157: PUSH
27158: LD_INT 2
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 2
27171: NEG
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 1
27182: NEG
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: NEG
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 2
27251: NEG
27252: PUSH
27253: LD_INT 0
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 2
27262: NEG
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: LD_INT 2
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27305: LD_ADDR_VAR 0 58
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 0
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: LD_INT 1
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: LD_INT 1
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 2
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: LD_INT 1
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 2
27440: PUSH
27441: LD_INT 2
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: LD_INT 2
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 2
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 2
27492: NEG
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 2
27504: NEG
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27535: LD_ADDR_VAR 0 59
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 1
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 1
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27623: LD_ADDR_VAR 0 60
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27711: LD_ADDR_VAR 0 61
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: NEG
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27799: LD_ADDR_VAR 0 62
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 0
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 1
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: NEG
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27887: LD_ADDR_VAR 0 63
27891: PUSH
27892: LD_INT 0
27894: PUSH
27895: LD_INT 0
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: LD_INT 1
27907: NEG
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 1
27945: NEG
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27975: LD_ADDR_VAR 0 64
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: LD_INT 1
28048: NEG
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: ST_TO_ADDR
// end ; 1 :
28063: GO 33960
28065: LD_INT 1
28067: DOUBLE
28068: EQUAL
28069: IFTRUE 28073
28071: GO 30696
28073: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28074: LD_ADDR_VAR 0 11
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 3
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: LD_INT 3
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 2
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28118: LD_ADDR_VAR 0 12
28122: PUSH
28123: LD_INT 2
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 3
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 3
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28159: LD_ADDR_VAR 0 13
28163: PUSH
28164: LD_INT 3
28166: PUSH
28167: LD_INT 2
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: PUSH
28174: LD_INT 3
28176: PUSH
28177: LD_INT 3
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: LIST
28198: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28199: LD_ADDR_VAR 0 14
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: LD_INT 3
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: LIST
28239: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28240: LD_ADDR_VAR 0 15
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: NEG
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 3
28269: NEG
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28284: LD_ADDR_VAR 0 16
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: LD_INT 3
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 3
28303: NEG
28304: PUSH
28305: LD_INT 2
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: NEG
28316: PUSH
28317: LD_INT 3
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28330: LD_ADDR_VAR 0 17
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 3
28341: NEG
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 3
28352: NEG
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28374: LD_ADDR_VAR 0 18
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 3
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 3
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28415: LD_ADDR_VAR 0 19
28419: PUSH
28420: LD_INT 3
28422: PUSH
28423: LD_INT 2
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: LD_INT 3
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 3
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28455: LD_ADDR_VAR 0 20
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 3
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: LD_INT 3
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28496: LD_ADDR_VAR 0 21
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: LD_INT 1
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 3
28514: NEG
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 3
28525: NEG
28526: PUSH
28527: LD_INT 1
28529: NEG
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: LIST
28539: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28540: LD_ADDR_VAR 0 22
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: LD_INT 3
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: NEG
28572: PUSH
28573: LD_INT 3
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
28586: LD_ADDR_VAR 0 23
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: LD_INT 3
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: NEG
28605: PUSH
28606: LD_INT 4
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: LD_INT 3
28619: NEG
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
28630: LD_ADDR_VAR 0 24
28634: PUSH
28635: LD_INT 3
28637: PUSH
28638: LD_INT 0
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 4
28658: PUSH
28659: LD_INT 1
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: LIST
28670: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
28671: LD_ADDR_VAR 0 25
28675: PUSH
28676: LD_INT 3
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 4
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 3
28698: PUSH
28699: LD_INT 4
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
28711: LD_ADDR_VAR 0 26
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 3
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 4
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: NEG
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
28752: LD_ADDR_VAR 0 27
28756: PUSH
28757: LD_INT 3
28759: NEG
28760: PUSH
28761: LD_INT 0
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 3
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 4
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
28796: LD_ADDR_VAR 0 28
28800: PUSH
28801: LD_INT 3
28803: NEG
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 3
28815: NEG
28816: PUSH
28817: LD_INT 4
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 4
28827: NEG
28828: PUSH
28829: LD_INT 3
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
28842: LD_ADDR_VAR 0 29
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: LD_INT 3
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 4
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 4
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 3
28909: NEG
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: LD_INT 5
28921: NEG
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: LD_INT 5
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 4
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: LD_INT 6
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 0
28963: PUSH
28964: LD_INT 6
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 5
28977: NEG
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
28997: LD_ADDR_VAR 0 30
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 3
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 3
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 4
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 4
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 4
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 5
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 5
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 5
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 6
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 6
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29140: LD_ADDR_VAR 0 31
29144: PUSH
29145: LD_INT 3
29147: PUSH
29148: LD_INT 2
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: LD_INT 3
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: LD_INT 3
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 4
29177: PUSH
29178: LD_INT 3
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 4
29187: PUSH
29188: LD_INT 4
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: LD_INT 4
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 5
29207: PUSH
29208: LD_INT 4
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 5
29217: PUSH
29218: LD_INT 5
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: LD_INT 5
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 6
29237: PUSH
29238: LD_INT 5
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 6
29247: PUSH
29248: LD_INT 6
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 5
29257: PUSH
29258: LD_INT 6
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29279: LD_ADDR_VAR 0 32
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 0
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: PUSH
29318: LD_INT 4
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: LD_INT 4
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: LD_INT 3
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: LD_INT 5
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: LD_INT 5
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 1
29368: NEG
29369: PUSH
29370: LD_INT 4
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: LD_INT 6
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: LD_INT 6
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: LD_INT 5
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29422: LD_ADDR_VAR 0 33
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 3
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 4
29474: NEG
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 4
29485: NEG
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 4
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 5
29508: NEG
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 5
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 5
29531: NEG
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 6
29542: NEG
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 6
29553: NEG
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
29577: LD_ADDR_VAR 0 34
29581: PUSH
29582: LD_INT 2
29584: NEG
29585: PUSH
29586: LD_INT 3
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 3
29608: NEG
29609: PUSH
29610: LD_INT 3
29612: NEG
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 3
29620: NEG
29621: PUSH
29622: LD_INT 4
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 4
29632: NEG
29633: PUSH
29634: LD_INT 3
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 4
29644: NEG
29645: PUSH
29646: LD_INT 4
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 4
29656: NEG
29657: PUSH
29658: LD_INT 5
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 5
29668: NEG
29669: PUSH
29670: LD_INT 4
29672: NEG
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 5
29680: NEG
29681: PUSH
29682: LD_INT 5
29684: NEG
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 5
29692: NEG
29693: PUSH
29694: LD_INT 6
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 6
29704: NEG
29705: PUSH
29706: LD_INT 5
29708: NEG
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 6
29716: NEG
29717: PUSH
29718: LD_INT 6
29720: NEG
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
29740: LD_ADDR_VAR 0 41
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: NEG
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
29784: LD_ADDR_VAR 0 42
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: LIST
29824: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
29825: LD_ADDR_VAR 0 43
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 3
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
29865: LD_ADDR_VAR 0 44
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: LD_INT 2
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 1
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29906: LD_ADDR_VAR 0 45
29910: PUSH
29911: LD_INT 2
29913: NEG
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 2
29924: NEG
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 3
29935: NEG
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
29950: LD_ADDR_VAR 0 46
29954: PUSH
29955: LD_INT 2
29957: NEG
29958: PUSH
29959: LD_INT 2
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: LD_INT 3
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 3
29981: NEG
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: LIST
29995: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
29996: LD_ADDR_VAR 0 47
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 3
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30029: LD_ADDR_VAR 0 48
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: LD_INT 2
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: LD_INT 1
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30060: LD_ADDR_VAR 0 49
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: LD_INT 1
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 3
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30089: LD_ADDR_VAR 0 50
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30118: LD_ADDR_VAR 0 51
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30149: LD_ADDR_VAR 0 52
30153: PUSH
30154: LD_INT 3
30156: NEG
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 3
30168: NEG
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30182: LD_ADDR_VAR 0 53
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 3
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 3
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30226: LD_ADDR_VAR 0 54
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 3
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30267: LD_ADDR_VAR 0 55
30271: PUSH
30272: LD_INT 3
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: LIST
30306: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30307: LD_ADDR_VAR 0 56
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 3
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 3
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: LD_INT 2
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30348: LD_ADDR_VAR 0 57
30352: PUSH
30353: LD_INT 2
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 3
30366: NEG
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 3
30377: NEG
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30392: LD_ADDR_VAR 0 58
30396: PUSH
30397: LD_INT 2
30399: NEG
30400: PUSH
30401: LD_INT 3
30403: NEG
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: LD_INT 2
30415: NEG
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: NEG
30424: PUSH
30425: LD_INT 3
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30438: LD_ADDR_VAR 0 59
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 2
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: LD_INT 2
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30482: LD_ADDR_VAR 0 60
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: LIST
30522: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30523: LD_ADDR_VAR 0 61
30527: PUSH
30528: LD_INT 2
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30563: LD_ADDR_VAR 0 62
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: LD_INT 2
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: LD_INT 2
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30604: LD_ADDR_VAR 0 63
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 2
30622: NEG
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30648: LD_ADDR_VAR 0 64
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: LD_INT 2
30659: NEG
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 2
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: ST_TO_ADDR
// end ; 2 :
30694: GO 33960
30696: LD_INT 2
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 33959
30704: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
30705: LD_ADDR_VAR 0 29
30709: PUSH
30710: LD_INT 4
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 4
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 5
30733: PUSH
30734: LD_INT 0
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 5
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 4
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 3
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: PUSH
30785: LD_INT 2
30787: NEG
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 5
30795: PUSH
30796: LD_INT 2
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 3
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 4
30825: PUSH
30826: LD_INT 3
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 4
30835: PUSH
30836: LD_INT 4
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 4
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 2
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 4
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: PUSH
30886: LD_INT 4
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: LD_INT 4
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 3
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 4
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 5
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 0
30935: PUSH
30936: LD_INT 5
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: LD_INT 4
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: NEG
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 5
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: NEG
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 3
30999: NEG
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: NEG
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 3
31033: NEG
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 4
31044: NEG
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 4
31055: NEG
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 4
31067: NEG
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 4
31090: NEG
31091: PUSH
31092: LD_INT 4
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 4
31102: NEG
31103: PUSH
31104: LD_INT 5
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: LD_INT 4
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 3
31126: NEG
31127: PUSH
31128: LD_INT 3
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 4
31138: NEG
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 5
31150: NEG
31151: PUSH
31152: LD_INT 4
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 5
31162: NEG
31163: PUSH
31164: LD_INT 5
31166: NEG
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 3
31174: NEG
31175: PUSH
31176: LD_INT 5
31178: NEG
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 5
31186: NEG
31187: PUSH
31188: LD_INT 3
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31243: LD_ADDR_VAR 0 30
31247: PUSH
31248: LD_INT 4
31250: PUSH
31251: LD_INT 4
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 5
31270: PUSH
31271: LD_INT 4
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 5
31280: PUSH
31281: LD_INT 5
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 4
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: PUSH
31301: LD_INT 4
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: PUSH
31311: LD_INT 3
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 5
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 3
31330: PUSH
31331: LD_INT 5
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: LD_INT 4
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 4
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: LD_INT 4
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 4
31433: NEG
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 4
31444: NEG
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 3
31456: NEG
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: NEG
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 4
31478: NEG
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 5
31489: NEG
31490: PUSH
31491: LD_INT 0
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 5
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 5
31512: NEG
31513: PUSH
31514: LD_INT 2
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 3
31524: NEG
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 3
31535: NEG
31536: PUSH
31537: LD_INT 3
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 3
31547: NEG
31548: PUSH
31549: LD_INT 4
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: LD_INT 3
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 3
31583: NEG
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 4
31595: NEG
31596: PUSH
31597: LD_INT 3
31599: NEG
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 4
31607: NEG
31608: PUSH
31609: LD_INT 4
31611: NEG
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: LD_INT 4
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 4
31631: NEG
31632: PUSH
31633: LD_INT 2
31635: NEG
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 4
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: LD_INT 5
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 4
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: LD_INT 3
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: LD_INT 3
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 4
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 5
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 3
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: NEG
31734: PUSH
31735: LD_INT 5
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
31790: LD_ADDR_VAR 0 31
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 4
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: LD_INT 5
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 5
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: LD_INT 4
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: PUSH
31870: LD_INT 5
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: LD_INT 3
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 3
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 3
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: NEG
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 2
31924: NEG
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 3
31935: NEG
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 4
31946: NEG
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 4
31957: NEG
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 4
31969: NEG
31970: PUSH
31971: LD_INT 2
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: NEG
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 4
31992: NEG
31993: PUSH
31994: LD_INT 4
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 4
32004: NEG
32005: PUSH
32006: LD_INT 5
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 3
32016: NEG
32017: PUSH
32018: LD_INT 4
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: LD_INT 3
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 4
32040: NEG
32041: PUSH
32042: LD_INT 3
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 5
32052: NEG
32053: PUSH
32054: LD_INT 4
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 5
32064: NEG
32065: PUSH
32066: LD_INT 5
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: LD_INT 5
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 5
32088: NEG
32089: PUSH
32090: LD_INT 3
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 3
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 4
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 3
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: LD_INT 3
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: LD_INT 4
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: LD_INT 4
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 4
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 4
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 5
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 5
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 3
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 1
32266: NEG
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 3
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 5
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32340: LD_ADDR_VAR 0 32
32344: PUSH
32345: LD_INT 4
32347: NEG
32348: PUSH
32349: LD_INT 0
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 4
32358: NEG
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: LD_INT 1
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 4
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 5
32403: NEG
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 5
32414: NEG
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 5
32426: NEG
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: NEG
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 3
32449: NEG
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: LD_INT 4
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 3
32497: NEG
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: NEG
32510: PUSH
32511: LD_INT 3
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 4
32521: NEG
32522: PUSH
32523: LD_INT 4
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 4
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 4
32545: NEG
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 4
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 5
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: LD_INT 3
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: LD_INT 3
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: LD_INT 4
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: LD_INT 5
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: LD_INT 3
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: LD_INT 5
32651: NEG
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 3
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 4
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 1
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 2
32710: PUSH
32711: LD_INT 0
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 2
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 2
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 4
32752: PUSH
32753: LD_INT 4
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 4
32762: PUSH
32763: LD_INT 3
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 5
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 5
32782: PUSH
32783: LD_INT 5
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 4
32792: PUSH
32793: LD_INT 5
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 3
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 3
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 5
32822: PUSH
32823: LD_INT 3
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 5
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
32887: LD_ADDR_VAR 0 33
32891: PUSH
32892: LD_INT 4
32894: NEG
32895: PUSH
32896: LD_INT 4
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 4
32906: NEG
32907: PUSH
32908: LD_INT 5
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 3
32918: NEG
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: LD_INT 3
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 4
32942: NEG
32943: PUSH
32944: LD_INT 3
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 5
32954: NEG
32955: PUSH
32956: LD_INT 4
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 5
32966: NEG
32967: PUSH
32968: LD_INT 5
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 3
32978: NEG
32979: PUSH
32980: LD_INT 5
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: LD_INT 3
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: LD_INT 3
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 4
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 3
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 3
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 4
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: LD_INT 4
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 4
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 4
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 5
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 5
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 4
33145: PUSH
33146: LD_INT 1
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 3
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: LD_INT 2
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 5
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 4
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 4
33227: PUSH
33228: LD_INT 4
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 3
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 2
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 4
33267: PUSH
33268: LD_INT 2
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: LD_INT 4
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 4
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 3
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: LD_INT 4
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 5
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: LD_INT 5
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 4
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 5
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33425: LD_ADDR_VAR 0 34
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 4
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 5
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 4
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 3
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: LD_INT 4
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 5
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: PUSH
33512: LD_INT 3
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: LD_INT 5
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 3
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 3
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: PUSH
33556: LD_INT 0
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 4
33565: PUSH
33566: LD_INT 1
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 4
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 4
33627: PUSH
33628: LD_INT 4
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: LD_INT 3
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 5
33647: PUSH
33648: LD_INT 4
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 5
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 4
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 3
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 3
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 5
33697: PUSH
33698: LD_INT 3
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: LD_INT 4
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: LD_INT 4
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: LD_INT 4
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: NEG
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 4
33810: NEG
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 4
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 4
33855: NEG
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 5
33866: NEG
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 5
33877: NEG
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 5
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 3
33901: NEG
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: ST_TO_ADDR
// end ; end ;
33957: GO 33960
33959: POP
// case btype of b_depot , b_warehouse :
33960: LD_VAR 0 1
33964: PUSH
33965: LD_INT 0
33967: DOUBLE
33968: EQUAL
33969: IFTRUE 33979
33971: LD_INT 1
33973: DOUBLE
33974: EQUAL
33975: IFTRUE 33979
33977: GO 34180
33979: POP
// case nation of nation_american :
33980: LD_VAR 0 5
33984: PUSH
33985: LD_INT 1
33987: DOUBLE
33988: EQUAL
33989: IFTRUE 33993
33991: GO 34049
33993: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
33994: LD_ADDR_VAR 0 9
33998: PUSH
33999: LD_VAR 0 11
34003: PUSH
34004: LD_VAR 0 12
34008: PUSH
34009: LD_VAR 0 13
34013: PUSH
34014: LD_VAR 0 14
34018: PUSH
34019: LD_VAR 0 15
34023: PUSH
34024: LD_VAR 0 16
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: PUSH
34037: LD_VAR 0 4
34041: PUSH
34042: LD_INT 1
34044: PLUS
34045: ARRAY
34046: ST_TO_ADDR
34047: GO 34178
34049: LD_INT 2
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34113
34057: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_VAR 0 17
34067: PUSH
34068: LD_VAR 0 18
34072: PUSH
34073: LD_VAR 0 19
34077: PUSH
34078: LD_VAR 0 20
34082: PUSH
34083: LD_VAR 0 21
34087: PUSH
34088: LD_VAR 0 22
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: PUSH
34101: LD_VAR 0 4
34105: PUSH
34106: LD_INT 1
34108: PLUS
34109: ARRAY
34110: ST_TO_ADDR
34111: GO 34178
34113: LD_INT 3
34115: DOUBLE
34116: EQUAL
34117: IFTRUE 34121
34119: GO 34177
34121: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34122: LD_ADDR_VAR 0 9
34126: PUSH
34127: LD_VAR 0 23
34131: PUSH
34132: LD_VAR 0 24
34136: PUSH
34137: LD_VAR 0 25
34141: PUSH
34142: LD_VAR 0 26
34146: PUSH
34147: LD_VAR 0 27
34151: PUSH
34152: LD_VAR 0 28
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: PUSH
34165: LD_VAR 0 4
34169: PUSH
34170: LD_INT 1
34172: PLUS
34173: ARRAY
34174: ST_TO_ADDR
34175: GO 34178
34177: POP
34178: GO 34733
34180: LD_INT 2
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34194
34186: LD_INT 3
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34250
34194: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34195: LD_ADDR_VAR 0 9
34199: PUSH
34200: LD_VAR 0 29
34204: PUSH
34205: LD_VAR 0 30
34209: PUSH
34210: LD_VAR 0 31
34214: PUSH
34215: LD_VAR 0 32
34219: PUSH
34220: LD_VAR 0 33
34224: PUSH
34225: LD_VAR 0 34
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: PUSH
34238: LD_VAR 0 4
34242: PUSH
34243: LD_INT 1
34245: PLUS
34246: ARRAY
34247: ST_TO_ADDR
34248: GO 34733
34250: LD_INT 16
34252: DOUBLE
34253: EQUAL
34254: IFTRUE 34312
34256: LD_INT 17
34258: DOUBLE
34259: EQUAL
34260: IFTRUE 34312
34262: LD_INT 18
34264: DOUBLE
34265: EQUAL
34266: IFTRUE 34312
34268: LD_INT 19
34270: DOUBLE
34271: EQUAL
34272: IFTRUE 34312
34274: LD_INT 22
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34312
34280: LD_INT 20
34282: DOUBLE
34283: EQUAL
34284: IFTRUE 34312
34286: LD_INT 21
34288: DOUBLE
34289: EQUAL
34290: IFTRUE 34312
34292: LD_INT 23
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34312
34298: LD_INT 24
34300: DOUBLE
34301: EQUAL
34302: IFTRUE 34312
34304: LD_INT 25
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34312
34310: GO 34368
34312: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34313: LD_ADDR_VAR 0 9
34317: PUSH
34318: LD_VAR 0 35
34322: PUSH
34323: LD_VAR 0 36
34327: PUSH
34328: LD_VAR 0 37
34332: PUSH
34333: LD_VAR 0 38
34337: PUSH
34338: LD_VAR 0 39
34342: PUSH
34343: LD_VAR 0 40
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: PUSH
34356: LD_VAR 0 4
34360: PUSH
34361: LD_INT 1
34363: PLUS
34364: ARRAY
34365: ST_TO_ADDR
34366: GO 34733
34368: LD_INT 6
34370: DOUBLE
34371: EQUAL
34372: IFTRUE 34424
34374: LD_INT 7
34376: DOUBLE
34377: EQUAL
34378: IFTRUE 34424
34380: LD_INT 8
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34424
34386: LD_INT 13
34388: DOUBLE
34389: EQUAL
34390: IFTRUE 34424
34392: LD_INT 12
34394: DOUBLE
34395: EQUAL
34396: IFTRUE 34424
34398: LD_INT 15
34400: DOUBLE
34401: EQUAL
34402: IFTRUE 34424
34404: LD_INT 11
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34424
34410: LD_INT 14
34412: DOUBLE
34413: EQUAL
34414: IFTRUE 34424
34416: LD_INT 10
34418: DOUBLE
34419: EQUAL
34420: IFTRUE 34424
34422: GO 34480
34424: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34425: LD_ADDR_VAR 0 9
34429: PUSH
34430: LD_VAR 0 41
34434: PUSH
34435: LD_VAR 0 42
34439: PUSH
34440: LD_VAR 0 43
34444: PUSH
34445: LD_VAR 0 44
34449: PUSH
34450: LD_VAR 0 45
34454: PUSH
34455: LD_VAR 0 46
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: PUSH
34468: LD_VAR 0 4
34472: PUSH
34473: LD_INT 1
34475: PLUS
34476: ARRAY
34477: ST_TO_ADDR
34478: GO 34733
34480: LD_INT 36
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34544
34488: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34489: LD_ADDR_VAR 0 9
34493: PUSH
34494: LD_VAR 0 47
34498: PUSH
34499: LD_VAR 0 48
34503: PUSH
34504: LD_VAR 0 49
34508: PUSH
34509: LD_VAR 0 50
34513: PUSH
34514: LD_VAR 0 51
34518: PUSH
34519: LD_VAR 0 52
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: PUSH
34532: LD_VAR 0 4
34536: PUSH
34537: LD_INT 1
34539: PLUS
34540: ARRAY
34541: ST_TO_ADDR
34542: GO 34733
34544: LD_INT 4
34546: DOUBLE
34547: EQUAL
34548: IFTRUE 34570
34550: LD_INT 5
34552: DOUBLE
34553: EQUAL
34554: IFTRUE 34570
34556: LD_INT 34
34558: DOUBLE
34559: EQUAL
34560: IFTRUE 34570
34562: LD_INT 37
34564: DOUBLE
34565: EQUAL
34566: IFTRUE 34570
34568: GO 34626
34570: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
34571: LD_ADDR_VAR 0 9
34575: PUSH
34576: LD_VAR 0 53
34580: PUSH
34581: LD_VAR 0 54
34585: PUSH
34586: LD_VAR 0 55
34590: PUSH
34591: LD_VAR 0 56
34595: PUSH
34596: LD_VAR 0 57
34600: PUSH
34601: LD_VAR 0 58
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: PUSH
34614: LD_VAR 0 4
34618: PUSH
34619: LD_INT 1
34621: PLUS
34622: ARRAY
34623: ST_TO_ADDR
34624: GO 34733
34626: LD_INT 31
34628: DOUBLE
34629: EQUAL
34630: IFTRUE 34676
34632: LD_INT 32
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34676
34638: LD_INT 33
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34676
34644: LD_INT 27
34646: DOUBLE
34647: EQUAL
34648: IFTRUE 34676
34650: LD_INT 26
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34676
34656: LD_INT 28
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34676
34662: LD_INT 29
34664: DOUBLE
34665: EQUAL
34666: IFTRUE 34676
34668: LD_INT 30
34670: DOUBLE
34671: EQUAL
34672: IFTRUE 34676
34674: GO 34732
34676: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
34677: LD_ADDR_VAR 0 9
34681: PUSH
34682: LD_VAR 0 59
34686: PUSH
34687: LD_VAR 0 60
34691: PUSH
34692: LD_VAR 0 61
34696: PUSH
34697: LD_VAR 0 62
34701: PUSH
34702: LD_VAR 0 63
34706: PUSH
34707: LD_VAR 0 64
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: PUSH
34720: LD_VAR 0 4
34724: PUSH
34725: LD_INT 1
34727: PLUS
34728: ARRAY
34729: ST_TO_ADDR
34730: GO 34733
34732: POP
// temp_list2 = [ ] ;
34733: LD_ADDR_VAR 0 10
34737: PUSH
34738: EMPTY
34739: ST_TO_ADDR
// for i in temp_list do
34740: LD_ADDR_VAR 0 8
34744: PUSH
34745: LD_VAR 0 9
34749: PUSH
34750: FOR_IN
34751: IFFALSE 34803
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
34753: LD_ADDR_VAR 0 10
34757: PUSH
34758: LD_VAR 0 10
34762: PUSH
34763: LD_VAR 0 8
34767: PUSH
34768: LD_INT 1
34770: ARRAY
34771: PUSH
34772: LD_VAR 0 2
34776: PLUS
34777: PUSH
34778: LD_VAR 0 8
34782: PUSH
34783: LD_INT 2
34785: ARRAY
34786: PUSH
34787: LD_VAR 0 3
34791: PLUS
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: ADD
34800: ST_TO_ADDR
34801: GO 34750
34803: POP
34804: POP
// result = temp_list2 ;
34805: LD_ADDR_VAR 0 7
34809: PUSH
34810: LD_VAR 0 10
34814: ST_TO_ADDR
// end ;
34815: LD_VAR 0 7
34819: RET
// export function EnemyInRange ( unit , dist ) ; begin
34820: LD_INT 0
34822: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
34823: LD_ADDR_VAR 0 3
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: CALL_OW 255
34837: PPUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL_OW 250
34847: PPUSH
34848: LD_VAR 0 1
34852: PPUSH
34853: CALL_OW 251
34857: PPUSH
34858: LD_VAR 0 2
34862: PPUSH
34863: CALL 8216 0 4
34867: PUSH
34868: LD_INT 4
34870: ARRAY
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 3
34876: RET
// export function PlayerSeeMe ( unit ) ; begin
34877: LD_INT 0
34879: PPUSH
// result := See ( your_side , unit ) ;
34880: LD_ADDR_VAR 0 2
34884: PUSH
34885: LD_OWVAR 2
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 292
34899: ST_TO_ADDR
// end ;
34900: LD_VAR 0 2
34904: RET
// export function ReverseDir ( unit ) ; begin
34905: LD_INT 0
34907: PPUSH
// if not unit then
34908: LD_VAR 0 1
34912: NOT
34913: IFFALSE 34917
// exit ;
34915: GO 34940
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
34917: LD_ADDR_VAR 0 2
34921: PUSH
34922: LD_VAR 0 1
34926: PPUSH
34927: CALL_OW 254
34931: PUSH
34932: LD_INT 3
34934: PLUS
34935: PUSH
34936: LD_INT 6
34938: MOD
34939: ST_TO_ADDR
// end ;
34940: LD_VAR 0 2
34944: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
34945: LD_INT 0
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
// if not hexes then
34952: LD_VAR 0 2
34956: NOT
34957: IFFALSE 34961
// exit ;
34959: GO 35109
// dist := 9999 ;
34961: LD_ADDR_VAR 0 5
34965: PUSH
34966: LD_INT 9999
34968: ST_TO_ADDR
// for i = 1 to hexes do
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: DOUBLE
34975: LD_INT 1
34977: DEC
34978: ST_TO_ADDR
34979: LD_VAR 0 2
34983: PUSH
34984: FOR_TO
34985: IFFALSE 35097
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
34987: LD_VAR 0 1
34991: PPUSH
34992: LD_VAR 0 2
34996: PUSH
34997: LD_VAR 0 4
35001: ARRAY
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: PPUSH
35007: LD_VAR 0 2
35011: PUSH
35012: LD_VAR 0 4
35016: ARRAY
35017: PUSH
35018: LD_INT 2
35020: ARRAY
35021: PPUSH
35022: CALL_OW 297
35026: PUSH
35027: LD_VAR 0 5
35031: LESS
35032: IFFALSE 35095
// begin hex := hexes [ i ] ;
35034: LD_ADDR_VAR 0 7
35038: PUSH
35039: LD_VAR 0 2
35043: PUSH
35044: LD_VAR 0 4
35048: ARRAY
35049: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35050: LD_ADDR_VAR 0 5
35054: PUSH
35055: LD_VAR 0 1
35059: PPUSH
35060: LD_VAR 0 2
35064: PUSH
35065: LD_VAR 0 4
35069: ARRAY
35070: PUSH
35071: LD_INT 1
35073: ARRAY
35074: PPUSH
35075: LD_VAR 0 2
35079: PUSH
35080: LD_VAR 0 4
35084: ARRAY
35085: PUSH
35086: LD_INT 2
35088: ARRAY
35089: PPUSH
35090: CALL_OW 297
35094: ST_TO_ADDR
// end ; end ;
35095: GO 34984
35097: POP
35098: POP
// result := hex ;
35099: LD_ADDR_VAR 0 3
35103: PUSH
35104: LD_VAR 0 7
35108: ST_TO_ADDR
// end ;
35109: LD_VAR 0 3
35113: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35114: LD_INT 0
35116: PPUSH
35117: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35118: LD_VAR 0 1
35122: NOT
35123: PUSH
35124: LD_VAR 0 1
35128: PUSH
35129: LD_INT 21
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 23
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PPUSH
35153: CALL_OW 69
35157: IN
35158: NOT
35159: OR
35160: IFFALSE 35164
// exit ;
35162: GO 35211
// for i = 1 to 3 do
35164: LD_ADDR_VAR 0 3
35168: PUSH
35169: DOUBLE
35170: LD_INT 1
35172: DEC
35173: ST_TO_ADDR
35174: LD_INT 3
35176: PUSH
35177: FOR_TO
35178: IFFALSE 35209
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 250
35189: PPUSH
35190: LD_VAR 0 1
35194: PPUSH
35195: CALL_OW 251
35199: PPUSH
35200: LD_INT 1
35202: PPUSH
35203: CALL_OW 453
35207: GO 35177
35209: POP
35210: POP
// end ;
35211: LD_VAR 0 2
35215: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35216: LD_INT 0
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35224: LD_VAR 0 1
35228: NOT
35229: PUSH
35230: LD_VAR 0 2
35234: NOT
35235: OR
35236: PUSH
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL_OW 314
35246: OR
35247: IFFALSE 35251
// exit ;
35249: GO 35692
// x := GetX ( enemy_unit ) ;
35251: LD_ADDR_VAR 0 7
35255: PUSH
35256: LD_VAR 0 2
35260: PPUSH
35261: CALL_OW 250
35265: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35266: LD_ADDR_VAR 0 8
35270: PUSH
35271: LD_VAR 0 2
35275: PPUSH
35276: CALL_OW 251
35280: ST_TO_ADDR
// if not x or not y then
35281: LD_VAR 0 7
35285: NOT
35286: PUSH
35287: LD_VAR 0 8
35291: NOT
35292: OR
35293: IFFALSE 35297
// exit ;
35295: GO 35692
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35297: LD_ADDR_VAR 0 6
35301: PUSH
35302: LD_VAR 0 7
35306: PPUSH
35307: LD_INT 0
35309: PPUSH
35310: LD_INT 4
35312: PPUSH
35313: CALL_OW 272
35317: PUSH
35318: LD_VAR 0 8
35322: PPUSH
35323: LD_INT 0
35325: PPUSH
35326: LD_INT 4
35328: PPUSH
35329: CALL_OW 273
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_VAR 0 7
35342: PPUSH
35343: LD_INT 1
35345: PPUSH
35346: LD_INT 4
35348: PPUSH
35349: CALL_OW 272
35353: PUSH
35354: LD_VAR 0 8
35358: PPUSH
35359: LD_INT 1
35361: PPUSH
35362: LD_INT 4
35364: PPUSH
35365: CALL_OW 273
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_VAR 0 7
35378: PPUSH
35379: LD_INT 2
35381: PPUSH
35382: LD_INT 4
35384: PPUSH
35385: CALL_OW 272
35389: PUSH
35390: LD_VAR 0 8
35394: PPUSH
35395: LD_INT 2
35397: PPUSH
35398: LD_INT 4
35400: PPUSH
35401: CALL_OW 273
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_VAR 0 7
35414: PPUSH
35415: LD_INT 3
35417: PPUSH
35418: LD_INT 4
35420: PPUSH
35421: CALL_OW 272
35425: PUSH
35426: LD_VAR 0 8
35430: PPUSH
35431: LD_INT 3
35433: PPUSH
35434: LD_INT 4
35436: PPUSH
35437: CALL_OW 273
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_VAR 0 7
35450: PPUSH
35451: LD_INT 4
35453: PPUSH
35454: LD_INT 4
35456: PPUSH
35457: CALL_OW 272
35461: PUSH
35462: LD_VAR 0 8
35466: PPUSH
35467: LD_INT 4
35469: PPUSH
35470: LD_INT 4
35472: PPUSH
35473: CALL_OW 273
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_VAR 0 7
35486: PPUSH
35487: LD_INT 5
35489: PPUSH
35490: LD_INT 4
35492: PPUSH
35493: CALL_OW 272
35497: PUSH
35498: LD_VAR 0 8
35502: PPUSH
35503: LD_INT 5
35505: PPUSH
35506: LD_INT 4
35508: PPUSH
35509: CALL_OW 273
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: ST_TO_ADDR
// for i = tmp downto 1 do
35526: LD_ADDR_VAR 0 4
35530: PUSH
35531: DOUBLE
35532: LD_VAR 0 6
35536: INC
35537: ST_TO_ADDR
35538: LD_INT 1
35540: PUSH
35541: FOR_DOWNTO
35542: IFFALSE 35643
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35544: LD_VAR 0 6
35548: PUSH
35549: LD_VAR 0 4
35553: ARRAY
35554: PUSH
35555: LD_INT 1
35557: ARRAY
35558: PPUSH
35559: LD_VAR 0 6
35563: PUSH
35564: LD_VAR 0 4
35568: ARRAY
35569: PUSH
35570: LD_INT 2
35572: ARRAY
35573: PPUSH
35574: CALL_OW 488
35578: NOT
35579: PUSH
35580: LD_VAR 0 6
35584: PUSH
35585: LD_VAR 0 4
35589: ARRAY
35590: PUSH
35591: LD_INT 1
35593: ARRAY
35594: PPUSH
35595: LD_VAR 0 6
35599: PUSH
35600: LD_VAR 0 4
35604: ARRAY
35605: PUSH
35606: LD_INT 2
35608: ARRAY
35609: PPUSH
35610: CALL_OW 428
35614: PUSH
35615: LD_INT 0
35617: NONEQUAL
35618: OR
35619: IFFALSE 35641
// tmp := Delete ( tmp , i ) ;
35621: LD_ADDR_VAR 0 6
35625: PUSH
35626: LD_VAR 0 6
35630: PPUSH
35631: LD_VAR 0 4
35635: PPUSH
35636: CALL_OW 3
35640: ST_TO_ADDR
35641: GO 35541
35643: POP
35644: POP
// j := GetClosestHex ( unit , tmp ) ;
35645: LD_ADDR_VAR 0 5
35649: PUSH
35650: LD_VAR 0 1
35654: PPUSH
35655: LD_VAR 0 6
35659: PPUSH
35660: CALL 34945 0 2
35664: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
35665: LD_VAR 0 1
35669: PPUSH
35670: LD_VAR 0 5
35674: PUSH
35675: LD_INT 1
35677: ARRAY
35678: PPUSH
35679: LD_VAR 0 5
35683: PUSH
35684: LD_INT 2
35686: ARRAY
35687: PPUSH
35688: CALL_OW 111
// end ;
35692: LD_VAR 0 3
35696: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35697: LD_INT 0
35699: PPUSH
35700: PPUSH
35701: PPUSH
// uc_side = 0 ;
35702: LD_ADDR_OWVAR 20
35706: PUSH
35707: LD_INT 0
35709: ST_TO_ADDR
// uc_nation = 0 ;
35710: LD_ADDR_OWVAR 21
35714: PUSH
35715: LD_INT 0
35717: ST_TO_ADDR
// InitHc_All ( ) ;
35718: CALL_OW 584
// InitVc ;
35722: CALL_OW 20
// if mastodonts then
35726: LD_VAR 0 6
35730: IFFALSE 35797
// for i = 1 to mastodonts do
35732: LD_ADDR_VAR 0 11
35736: PUSH
35737: DOUBLE
35738: LD_INT 1
35740: DEC
35741: ST_TO_ADDR
35742: LD_VAR 0 6
35746: PUSH
35747: FOR_TO
35748: IFFALSE 35795
// begin vc_chassis := 31 ;
35750: LD_ADDR_OWVAR 37
35754: PUSH
35755: LD_INT 31
35757: ST_TO_ADDR
// vc_control := control_rider ;
35758: LD_ADDR_OWVAR 38
35762: PUSH
35763: LD_INT 4
35765: ST_TO_ADDR
// animal := CreateVehicle ;
35766: LD_ADDR_VAR 0 12
35770: PUSH
35771: CALL_OW 45
35775: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35776: LD_VAR 0 12
35780: PPUSH
35781: LD_VAR 0 8
35785: PPUSH
35786: LD_INT 0
35788: PPUSH
35789: CALL 37932 0 3
// end ;
35793: GO 35747
35795: POP
35796: POP
// if horses then
35797: LD_VAR 0 5
35801: IFFALSE 35868
// for i = 1 to horses do
35803: LD_ADDR_VAR 0 11
35807: PUSH
35808: DOUBLE
35809: LD_INT 1
35811: DEC
35812: ST_TO_ADDR
35813: LD_VAR 0 5
35817: PUSH
35818: FOR_TO
35819: IFFALSE 35866
// begin hc_class := 21 ;
35821: LD_ADDR_OWVAR 28
35825: PUSH
35826: LD_INT 21
35828: ST_TO_ADDR
// hc_gallery :=  ;
35829: LD_ADDR_OWVAR 33
35833: PUSH
35834: LD_STRING 
35836: ST_TO_ADDR
// animal := CreateHuman ;
35837: LD_ADDR_VAR 0 12
35841: PUSH
35842: CALL_OW 44
35846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35847: LD_VAR 0 12
35851: PPUSH
35852: LD_VAR 0 8
35856: PPUSH
35857: LD_INT 0
35859: PPUSH
35860: CALL 37932 0 3
// end ;
35864: GO 35818
35866: POP
35867: POP
// if birds then
35868: LD_VAR 0 1
35872: IFFALSE 35939
// for i = 1 to birds do
35874: LD_ADDR_VAR 0 11
35878: PUSH
35879: DOUBLE
35880: LD_INT 1
35882: DEC
35883: ST_TO_ADDR
35884: LD_VAR 0 1
35888: PUSH
35889: FOR_TO
35890: IFFALSE 35937
// begin hc_class = 18 ;
35892: LD_ADDR_OWVAR 28
35896: PUSH
35897: LD_INT 18
35899: ST_TO_ADDR
// hc_gallery =  ;
35900: LD_ADDR_OWVAR 33
35904: PUSH
35905: LD_STRING 
35907: ST_TO_ADDR
// animal := CreateHuman ;
35908: LD_ADDR_VAR 0 12
35912: PUSH
35913: CALL_OW 44
35917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35918: LD_VAR 0 12
35922: PPUSH
35923: LD_VAR 0 8
35927: PPUSH
35928: LD_INT 0
35930: PPUSH
35931: CALL 37932 0 3
// end ;
35935: GO 35889
35937: POP
35938: POP
// if tigers then
35939: LD_VAR 0 2
35943: IFFALSE 36027
// for i = 1 to tigers do
35945: LD_ADDR_VAR 0 11
35949: PUSH
35950: DOUBLE
35951: LD_INT 1
35953: DEC
35954: ST_TO_ADDR
35955: LD_VAR 0 2
35959: PUSH
35960: FOR_TO
35961: IFFALSE 36025
// begin hc_class = class_tiger ;
35963: LD_ADDR_OWVAR 28
35967: PUSH
35968: LD_INT 14
35970: ST_TO_ADDR
// hc_gallery =  ;
35971: LD_ADDR_OWVAR 33
35975: PUSH
35976: LD_STRING 
35978: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35979: LD_ADDR_OWVAR 35
35983: PUSH
35984: LD_INT 7
35986: NEG
35987: PPUSH
35988: LD_INT 7
35990: PPUSH
35991: CALL_OW 12
35995: ST_TO_ADDR
// animal := CreateHuman ;
35996: LD_ADDR_VAR 0 12
36000: PUSH
36001: CALL_OW 44
36005: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36006: LD_VAR 0 12
36010: PPUSH
36011: LD_VAR 0 8
36015: PPUSH
36016: LD_INT 0
36018: PPUSH
36019: CALL 37932 0 3
// end ;
36023: GO 35960
36025: POP
36026: POP
// if apemans then
36027: LD_VAR 0 3
36031: IFFALSE 36154
// for i = 1 to apemans do
36033: LD_ADDR_VAR 0 11
36037: PUSH
36038: DOUBLE
36039: LD_INT 1
36041: DEC
36042: ST_TO_ADDR
36043: LD_VAR 0 3
36047: PUSH
36048: FOR_TO
36049: IFFALSE 36152
// begin hc_class = class_apeman ;
36051: LD_ADDR_OWVAR 28
36055: PUSH
36056: LD_INT 12
36058: ST_TO_ADDR
// hc_gallery =  ;
36059: LD_ADDR_OWVAR 33
36063: PUSH
36064: LD_STRING 
36066: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
36067: LD_ADDR_OWVAR 35
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PPUSH
36076: LD_INT 2
36078: PPUSH
36079: CALL_OW 12
36083: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
36084: LD_ADDR_OWVAR 31
36088: PUSH
36089: LD_INT 1
36091: PPUSH
36092: LD_INT 3
36094: PPUSH
36095: CALL_OW 12
36099: PUSH
36100: LD_INT 1
36102: PPUSH
36103: LD_INT 3
36105: PPUSH
36106: CALL_OW 12
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: ST_TO_ADDR
// animal := CreateHuman ;
36123: LD_ADDR_VAR 0 12
36127: PUSH
36128: CALL_OW 44
36132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36133: LD_VAR 0 12
36137: PPUSH
36138: LD_VAR 0 8
36142: PPUSH
36143: LD_INT 0
36145: PPUSH
36146: CALL 37932 0 3
// end ;
36150: GO 36048
36152: POP
36153: POP
// if enchidnas then
36154: LD_VAR 0 4
36158: IFFALSE 36225
// for i = 1 to enchidnas do
36160: LD_ADDR_VAR 0 11
36164: PUSH
36165: DOUBLE
36166: LD_INT 1
36168: DEC
36169: ST_TO_ADDR
36170: LD_VAR 0 4
36174: PUSH
36175: FOR_TO
36176: IFFALSE 36223
// begin hc_class = 13 ;
36178: LD_ADDR_OWVAR 28
36182: PUSH
36183: LD_INT 13
36185: ST_TO_ADDR
// hc_gallery =  ;
36186: LD_ADDR_OWVAR 33
36190: PUSH
36191: LD_STRING 
36193: ST_TO_ADDR
// animal := CreateHuman ;
36194: LD_ADDR_VAR 0 12
36198: PUSH
36199: CALL_OW 44
36203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36204: LD_VAR 0 12
36208: PPUSH
36209: LD_VAR 0 8
36213: PPUSH
36214: LD_INT 0
36216: PPUSH
36217: CALL 37932 0 3
// end ;
36221: GO 36175
36223: POP
36224: POP
// if fishes then
36225: LD_VAR 0 7
36229: IFFALSE 36296
// for i = 1 to fishes do
36231: LD_ADDR_VAR 0 11
36235: PUSH
36236: DOUBLE
36237: LD_INT 1
36239: DEC
36240: ST_TO_ADDR
36241: LD_VAR 0 7
36245: PUSH
36246: FOR_TO
36247: IFFALSE 36294
// begin hc_class = 20 ;
36249: LD_ADDR_OWVAR 28
36253: PUSH
36254: LD_INT 20
36256: ST_TO_ADDR
// hc_gallery =  ;
36257: LD_ADDR_OWVAR 33
36261: PUSH
36262: LD_STRING 
36264: ST_TO_ADDR
// animal := CreateHuman ;
36265: LD_ADDR_VAR 0 12
36269: PUSH
36270: CALL_OW 44
36274: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
36275: LD_VAR 0 12
36279: PPUSH
36280: LD_VAR 0 9
36284: PPUSH
36285: LD_INT 0
36287: PPUSH
36288: CALL 37932 0 3
// end ;
36292: GO 36246
36294: POP
36295: POP
// end ;
36296: LD_VAR 0 10
36300: RET
// export function WantHeal ( sci , unit ) ; begin
36301: LD_INT 0
36303: PPUSH
// if GetTaskList ( sci ) > 0 then
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 437
36313: PUSH
36314: LD_INT 0
36316: GREATER
36317: IFFALSE 36387
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
36319: LD_VAR 0 1
36323: PPUSH
36324: CALL_OW 437
36328: PUSH
36329: LD_INT 1
36331: ARRAY
36332: PUSH
36333: LD_INT 1
36335: ARRAY
36336: PUSH
36337: LD_STRING l
36339: EQUAL
36340: PUSH
36341: LD_VAR 0 1
36345: PPUSH
36346: CALL_OW 437
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: PUSH
36355: LD_INT 4
36357: ARRAY
36358: PUSH
36359: LD_VAR 0 2
36363: EQUAL
36364: AND
36365: IFFALSE 36377
// result := true else
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: LD_INT 1
36374: ST_TO_ADDR
36375: GO 36385
// result := false ;
36377: LD_ADDR_VAR 0 3
36381: PUSH
36382: LD_INT 0
36384: ST_TO_ADDR
// end else
36385: GO 36395
// result := false ;
36387: LD_ADDR_VAR 0 3
36391: PUSH
36392: LD_INT 0
36394: ST_TO_ADDR
// end ;
36395: LD_VAR 0 3
36399: RET
// export function HealTarget ( sci ) ; begin
36400: LD_INT 0
36402: PPUSH
// if not sci then
36403: LD_VAR 0 1
36407: NOT
36408: IFFALSE 36412
// exit ;
36410: GO 36477
// result := 0 ;
36412: LD_ADDR_VAR 0 2
36416: PUSH
36417: LD_INT 0
36419: ST_TO_ADDR
// if GetTaskList ( sci ) then
36420: LD_VAR 0 1
36424: PPUSH
36425: CALL_OW 437
36429: IFFALSE 36477
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 437
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: PUSH
36445: LD_INT 1
36447: ARRAY
36448: PUSH
36449: LD_STRING l
36451: EQUAL
36452: IFFALSE 36477
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
36454: LD_ADDR_VAR 0 2
36458: PUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 437
36468: PUSH
36469: LD_INT 1
36471: ARRAY
36472: PUSH
36473: LD_INT 4
36475: ARRAY
36476: ST_TO_ADDR
// end ;
36477: LD_VAR 0 2
36481: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
36482: LD_INT 0
36484: PPUSH
36485: PPUSH
36486: PPUSH
36487: PPUSH
// if not base_units then
36488: LD_VAR 0 1
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36584
// result := false ;
36497: LD_ADDR_VAR 0 2
36501: PUSH
36502: LD_INT 0
36504: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
36505: LD_ADDR_VAR 0 5
36509: PUSH
36510: LD_VAR 0 1
36514: PPUSH
36515: LD_INT 21
36517: PUSH
36518: LD_INT 3
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PPUSH
36525: CALL_OW 72
36529: ST_TO_ADDR
// if not tmp then
36530: LD_VAR 0 5
36534: NOT
36535: IFFALSE 36539
// exit ;
36537: GO 36584
// for i in tmp do
36539: LD_ADDR_VAR 0 3
36543: PUSH
36544: LD_VAR 0 5
36548: PUSH
36549: FOR_IN
36550: IFFALSE 36582
// begin result := EnemyInRange ( i , 22 ) ;
36552: LD_ADDR_VAR 0 2
36556: PUSH
36557: LD_VAR 0 3
36561: PPUSH
36562: LD_INT 22
36564: PPUSH
36565: CALL 34820 0 2
36569: ST_TO_ADDR
// if result then
36570: LD_VAR 0 2
36574: IFFALSE 36580
// exit ;
36576: POP
36577: POP
36578: GO 36584
// end ;
36580: GO 36549
36582: POP
36583: POP
// end ;
36584: LD_VAR 0 2
36588: RET
// export function FilterByTag ( units , tag ) ; begin
36589: LD_INT 0
36591: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36592: LD_ADDR_VAR 0 3
36596: PUSH
36597: LD_VAR 0 1
36601: PPUSH
36602: LD_INT 120
36604: PUSH
36605: LD_VAR 0 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PPUSH
36614: CALL_OW 72
36618: ST_TO_ADDR
// end ;
36619: LD_VAR 0 3
36623: RET
// export function IsDriver ( un ) ; begin
36624: LD_INT 0
36626: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36627: LD_ADDR_VAR 0 2
36631: PUSH
36632: LD_VAR 0 1
36636: PUSH
36637: LD_INT 55
36639: PUSH
36640: EMPTY
36641: LIST
36642: PPUSH
36643: CALL_OW 69
36647: IN
36648: ST_TO_ADDR
// end ;
36649: LD_VAR 0 2
36653: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36654: LD_INT 0
36656: PPUSH
36657: PPUSH
// list := [ ] ;
36658: LD_ADDR_VAR 0 5
36662: PUSH
36663: EMPTY
36664: ST_TO_ADDR
// case d of 0 :
36665: LD_VAR 0 3
36669: PUSH
36670: LD_INT 0
36672: DOUBLE
36673: EQUAL
36674: IFTRUE 36678
36676: GO 36811
36678: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36679: LD_ADDR_VAR 0 5
36683: PUSH
36684: LD_VAR 0 1
36688: PUSH
36689: LD_INT 4
36691: MINUS
36692: PUSH
36693: LD_VAR 0 2
36697: PUSH
36698: LD_INT 4
36700: MINUS
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: PUSH
36710: LD_VAR 0 1
36714: PUSH
36715: LD_INT 3
36717: MINUS
36718: PUSH
36719: LD_VAR 0 2
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: PUSH
36732: LD_VAR 0 1
36736: PUSH
36737: LD_INT 4
36739: PLUS
36740: PUSH
36741: LD_VAR 0 2
36745: PUSH
36746: LD_INT 4
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: LIST
36753: PUSH
36754: LD_VAR 0 1
36758: PUSH
36759: LD_INT 3
36761: PLUS
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_INT 3
36770: PLUS
36771: PUSH
36772: LD_INT 5
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: PUSH
36780: LD_VAR 0 1
36784: PUSH
36785: LD_VAR 0 2
36789: PUSH
36790: LD_INT 4
36792: PLUS
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// end ; 1 :
36809: GO 37509
36811: LD_INT 1
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36952
36819: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36820: LD_ADDR_VAR 0 5
36824: PUSH
36825: LD_VAR 0 1
36829: PUSH
36830: LD_VAR 0 2
36834: PUSH
36835: LD_INT 4
36837: MINUS
36838: PUSH
36839: LD_INT 3
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: PUSH
36847: LD_VAR 0 1
36851: PUSH
36852: LD_INT 3
36854: MINUS
36855: PUSH
36856: LD_VAR 0 2
36860: PUSH
36861: LD_INT 3
36863: MINUS
36864: PUSH
36865: LD_INT 2
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: LIST
36872: PUSH
36873: LD_VAR 0 1
36877: PUSH
36878: LD_INT 4
36880: MINUS
36881: PUSH
36882: LD_VAR 0 2
36886: PUSH
36887: LD_INT 1
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: LIST
36894: PUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_VAR 0 2
36904: PUSH
36905: LD_INT 3
36907: PLUS
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: PUSH
36917: LD_VAR 0 1
36921: PUSH
36922: LD_INT 4
36924: PLUS
36925: PUSH
36926: LD_VAR 0 2
36930: PUSH
36931: LD_INT 4
36933: PLUS
36934: PUSH
36935: LD_INT 5
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: ST_TO_ADDR
// end ; 2 :
36950: GO 37509
36952: LD_INT 2
36954: DOUBLE
36955: EQUAL
36956: IFTRUE 36960
36958: GO 37089
36960: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36961: LD_ADDR_VAR 0 5
36965: PUSH
36966: LD_VAR 0 1
36970: PUSH
36971: LD_VAR 0 2
36975: PUSH
36976: LD_INT 3
36978: MINUS
36979: PUSH
36980: LD_INT 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: PUSH
36988: LD_VAR 0 1
36992: PUSH
36993: LD_INT 4
36995: PLUS
36996: PUSH
36997: LD_VAR 0 2
37001: PUSH
37002: LD_INT 4
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: LIST
37009: PUSH
37010: LD_VAR 0 1
37014: PUSH
37015: LD_VAR 0 2
37019: PUSH
37020: LD_INT 4
37022: PLUS
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: LD_VAR 0 1
37036: PUSH
37037: LD_INT 3
37039: MINUS
37040: PUSH
37041: LD_VAR 0 2
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PUSH
37054: LD_VAR 0 1
37058: PUSH
37059: LD_INT 4
37061: MINUS
37062: PUSH
37063: LD_VAR 0 2
37067: PUSH
37068: LD_INT 4
37070: MINUS
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: ST_TO_ADDR
// end ; 3 :
37087: GO 37509
37089: LD_INT 3
37091: DOUBLE
37092: EQUAL
37093: IFTRUE 37097
37095: GO 37230
37097: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
37098: LD_ADDR_VAR 0 5
37102: PUSH
37103: LD_VAR 0 1
37107: PUSH
37108: LD_INT 3
37110: PLUS
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: LD_INT 4
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: PUSH
37125: LD_VAR 0 1
37129: PUSH
37130: LD_INT 4
37132: PLUS
37133: PUSH
37134: LD_VAR 0 2
37138: PUSH
37139: LD_INT 4
37141: PLUS
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: PUSH
37151: LD_VAR 0 1
37155: PUSH
37156: LD_INT 4
37158: MINUS
37159: PUSH
37160: LD_VAR 0 2
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: LIST
37172: PUSH
37173: LD_VAR 0 1
37177: PUSH
37178: LD_VAR 0 2
37182: PUSH
37183: LD_INT 4
37185: MINUS
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_VAR 0 1
37199: PUSH
37200: LD_INT 3
37202: MINUS
37203: PUSH
37204: LD_VAR 0 2
37208: PUSH
37209: LD_INT 3
37211: MINUS
37212: PUSH
37213: LD_INT 2
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// end ; 4 :
37228: GO 37509
37230: LD_INT 4
37232: DOUBLE
37233: EQUAL
37234: IFTRUE 37238
37236: GO 37371
37238: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
37239: LD_ADDR_VAR 0 5
37243: PUSH
37244: LD_VAR 0 1
37248: PUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_INT 4
37256: PLUS
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: PUSH
37266: LD_VAR 0 1
37270: PUSH
37271: LD_INT 3
37273: PLUS
37274: PUSH
37275: LD_VAR 0 2
37279: PUSH
37280: LD_INT 3
37282: PLUS
37283: PUSH
37284: LD_INT 5
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: PUSH
37292: LD_VAR 0 1
37296: PUSH
37297: LD_INT 4
37299: PLUS
37300: PUSH
37301: LD_VAR 0 2
37305: PUSH
37306: LD_INT 4
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: PUSH
37314: LD_VAR 0 1
37318: PUSH
37319: LD_VAR 0 2
37323: PUSH
37324: LD_INT 3
37326: MINUS
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: PUSH
37336: LD_VAR 0 1
37340: PUSH
37341: LD_INT 4
37343: MINUS
37344: PUSH
37345: LD_VAR 0 2
37349: PUSH
37350: LD_INT 4
37352: MINUS
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// end ; 5 :
37369: GO 37509
37371: LD_INT 5
37373: DOUBLE
37374: EQUAL
37375: IFTRUE 37379
37377: GO 37508
37379: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
37380: LD_ADDR_VAR 0 5
37384: PUSH
37385: LD_VAR 0 1
37389: PUSH
37390: LD_INT 4
37392: MINUS
37393: PUSH
37394: LD_VAR 0 2
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: PUSH
37407: LD_VAR 0 1
37411: PUSH
37412: LD_VAR 0 2
37416: PUSH
37417: LD_INT 4
37419: MINUS
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: PUSH
37429: LD_VAR 0 1
37433: PUSH
37434: LD_INT 4
37436: PLUS
37437: PUSH
37438: LD_VAR 0 2
37442: PUSH
37443: LD_INT 4
37445: PLUS
37446: PUSH
37447: LD_INT 5
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: PUSH
37455: LD_VAR 0 1
37459: PUSH
37460: LD_INT 3
37462: PLUS
37463: PUSH
37464: LD_VAR 0 2
37468: PUSH
37469: LD_INT 4
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: PUSH
37477: LD_VAR 0 1
37481: PUSH
37482: LD_VAR 0 2
37486: PUSH
37487: LD_INT 3
37489: PLUS
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: ST_TO_ADDR
// end ; end ;
37506: GO 37509
37508: POP
// result := list ;
37509: LD_ADDR_VAR 0 4
37513: PUSH
37514: LD_VAR 0 5
37518: ST_TO_ADDR
// end ;
37519: LD_VAR 0 4
37523: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
37524: LD_INT 0
37526: PPUSH
37527: PPUSH
37528: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
37529: LD_VAR 0 1
37533: NOT
37534: PUSH
37535: LD_VAR 0 2
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 3
37548: PUSH
37549: LD_INT 4
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: IN
37558: NOT
37559: OR
37560: IFFALSE 37564
// exit ;
37562: GO 37656
// tmp := [ ] ;
37564: LD_ADDR_VAR 0 5
37568: PUSH
37569: EMPTY
37570: ST_TO_ADDR
// for i in units do
37571: LD_ADDR_VAR 0 4
37575: PUSH
37576: LD_VAR 0 1
37580: PUSH
37581: FOR_IN
37582: IFFALSE 37625
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37584: LD_ADDR_VAR 0 5
37588: PUSH
37589: LD_VAR 0 5
37593: PPUSH
37594: LD_VAR 0 5
37598: PUSH
37599: LD_INT 1
37601: PLUS
37602: PPUSH
37603: LD_VAR 0 4
37607: PPUSH
37608: LD_VAR 0 2
37612: PPUSH
37613: CALL_OW 259
37617: PPUSH
37618: CALL_OW 2
37622: ST_TO_ADDR
37623: GO 37581
37625: POP
37626: POP
// if not tmp then
37627: LD_VAR 0 5
37631: NOT
37632: IFFALSE 37636
// exit ;
37634: GO 37656
// result := SortListByListDesc ( units , tmp ) ;
37636: LD_ADDR_VAR 0 3
37640: PUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: LD_VAR 0 5
37650: PPUSH
37651: CALL_OW 77
37655: ST_TO_ADDR
// end ;
37656: LD_VAR 0 3
37660: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37661: LD_INT 0
37663: PPUSH
37664: PPUSH
37665: PPUSH
// result := false ;
37666: LD_ADDR_VAR 0 3
37670: PUSH
37671: LD_INT 0
37673: ST_TO_ADDR
// x := GetX ( building ) ;
37674: LD_ADDR_VAR 0 4
37678: PUSH
37679: LD_VAR 0 2
37683: PPUSH
37684: CALL_OW 250
37688: ST_TO_ADDR
// y := GetY ( building ) ;
37689: LD_ADDR_VAR 0 5
37693: PUSH
37694: LD_VAR 0 2
37698: PPUSH
37699: CALL_OW 251
37703: ST_TO_ADDR
// if not building or not x or not y then
37704: LD_VAR 0 2
37708: NOT
37709: PUSH
37710: LD_VAR 0 4
37714: NOT
37715: OR
37716: PUSH
37717: LD_VAR 0 5
37721: NOT
37722: OR
37723: IFFALSE 37727
// exit ;
37725: GO 37819
// if GetTaskList ( unit ) then
37727: LD_VAR 0 1
37731: PPUSH
37732: CALL_OW 437
37736: IFFALSE 37819
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37738: LD_STRING e
37740: PUSH
37741: LD_VAR 0 1
37745: PPUSH
37746: CALL_OW 437
37750: PUSH
37751: LD_INT 1
37753: ARRAY
37754: PUSH
37755: LD_INT 1
37757: ARRAY
37758: EQUAL
37759: PUSH
37760: LD_VAR 0 4
37764: PUSH
37765: LD_VAR 0 1
37769: PPUSH
37770: CALL_OW 437
37774: PUSH
37775: LD_INT 1
37777: ARRAY
37778: PUSH
37779: LD_INT 2
37781: ARRAY
37782: EQUAL
37783: AND
37784: PUSH
37785: LD_VAR 0 5
37789: PUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 437
37799: PUSH
37800: LD_INT 1
37802: ARRAY
37803: PUSH
37804: LD_INT 3
37806: ARRAY
37807: EQUAL
37808: AND
37809: IFFALSE 37819
// result := true end ;
37811: LD_ADDR_VAR 0 3
37815: PUSH
37816: LD_INT 1
37818: ST_TO_ADDR
// end ;
37819: LD_VAR 0 3
37823: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37824: LD_INT 0
37826: PPUSH
// result := false ;
37827: LD_ADDR_VAR 0 4
37831: PUSH
37832: LD_INT 0
37834: ST_TO_ADDR
// if GetTaskList ( unit ) then
37835: LD_VAR 0 1
37839: PPUSH
37840: CALL_OW 437
37844: IFFALSE 37927
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37846: LD_STRING M
37848: PUSH
37849: LD_VAR 0 1
37853: PPUSH
37854: CALL_OW 437
37858: PUSH
37859: LD_INT 1
37861: ARRAY
37862: PUSH
37863: LD_INT 1
37865: ARRAY
37866: EQUAL
37867: PUSH
37868: LD_VAR 0 2
37872: PUSH
37873: LD_VAR 0 1
37877: PPUSH
37878: CALL_OW 437
37882: PUSH
37883: LD_INT 1
37885: ARRAY
37886: PUSH
37887: LD_INT 2
37889: ARRAY
37890: EQUAL
37891: AND
37892: PUSH
37893: LD_VAR 0 3
37897: PUSH
37898: LD_VAR 0 1
37902: PPUSH
37903: CALL_OW 437
37907: PUSH
37908: LD_INT 1
37910: ARRAY
37911: PUSH
37912: LD_INT 3
37914: ARRAY
37915: EQUAL
37916: AND
37917: IFFALSE 37927
// result := true ;
37919: LD_ADDR_VAR 0 4
37923: PUSH
37924: LD_INT 1
37926: ST_TO_ADDR
// end ; end ;
37927: LD_VAR 0 4
37931: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
// if not unit or not area then
37938: LD_VAR 0 1
37942: NOT
37943: PUSH
37944: LD_VAR 0 2
37948: NOT
37949: OR
37950: IFFALSE 37954
// exit ;
37952: GO 38118
// tmp := AreaToList ( area , i ) ;
37954: LD_ADDR_VAR 0 6
37958: PUSH
37959: LD_VAR 0 2
37963: PPUSH
37964: LD_VAR 0 5
37968: PPUSH
37969: CALL_OW 517
37973: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37974: LD_ADDR_VAR 0 5
37978: PUSH
37979: DOUBLE
37980: LD_INT 1
37982: DEC
37983: ST_TO_ADDR
37984: LD_VAR 0 6
37988: PUSH
37989: LD_INT 1
37991: ARRAY
37992: PUSH
37993: FOR_TO
37994: IFFALSE 38116
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37996: LD_ADDR_VAR 0 7
38000: PUSH
38001: LD_VAR 0 6
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: PUSH
38010: LD_VAR 0 5
38014: ARRAY
38015: PUSH
38016: LD_VAR 0 6
38020: PUSH
38021: LD_INT 2
38023: ARRAY
38024: PUSH
38025: LD_VAR 0 5
38029: ARRAY
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
38035: LD_VAR 0 7
38039: PUSH
38040: LD_INT 1
38042: ARRAY
38043: PPUSH
38044: LD_VAR 0 7
38048: PUSH
38049: LD_INT 2
38051: ARRAY
38052: PPUSH
38053: CALL_OW 428
38057: PUSH
38058: LD_INT 0
38060: EQUAL
38061: IFFALSE 38114
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
38063: LD_VAR 0 1
38067: PPUSH
38068: LD_VAR 0 7
38072: PUSH
38073: LD_INT 1
38075: ARRAY
38076: PPUSH
38077: LD_VAR 0 7
38081: PUSH
38082: LD_INT 2
38084: ARRAY
38085: PPUSH
38086: LD_VAR 0 3
38090: PPUSH
38091: CALL_OW 48
// result := IsPlaced ( unit ) ;
38095: LD_ADDR_VAR 0 4
38099: PUSH
38100: LD_VAR 0 1
38104: PPUSH
38105: CALL_OW 305
38109: ST_TO_ADDR
// exit ;
38110: POP
38111: POP
38112: GO 38118
// end ; end ;
38114: GO 37993
38116: POP
38117: POP
// end ;
38118: LD_VAR 0 4
38122: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
38123: LD_INT 0
38125: PPUSH
38126: PPUSH
38127: PPUSH
// if not side or side > 8 then
38128: LD_VAR 0 1
38132: NOT
38133: PUSH
38134: LD_VAR 0 1
38138: PUSH
38139: LD_INT 8
38141: GREATER
38142: OR
38143: IFFALSE 38147
// exit ;
38145: GO 38334
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
38147: LD_ADDR_VAR 0 4
38151: PUSH
38152: LD_INT 22
38154: PUSH
38155: LD_VAR 0 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 21
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PPUSH
38178: CALL_OW 69
38182: ST_TO_ADDR
// if not tmp then
38183: LD_VAR 0 4
38187: NOT
38188: IFFALSE 38192
// exit ;
38190: GO 38334
// enable_addtolog := true ;
38192: LD_ADDR_OWVAR 81
38196: PUSH
38197: LD_INT 1
38199: ST_TO_ADDR
// AddToLog ( [ ) ;
38200: LD_STRING [
38202: PPUSH
38203: CALL_OW 561
// for i in tmp do
38207: LD_ADDR_VAR 0 3
38211: PUSH
38212: LD_VAR 0 4
38216: PUSH
38217: FOR_IN
38218: IFFALSE 38325
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
38220: LD_STRING [
38222: PUSH
38223: LD_VAR 0 3
38227: PPUSH
38228: CALL_OW 266
38232: STR
38233: PUSH
38234: LD_STRING , 
38236: STR
38237: PUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: CALL_OW 250
38247: STR
38248: PUSH
38249: LD_STRING , 
38251: STR
38252: PUSH
38253: LD_VAR 0 3
38257: PPUSH
38258: CALL_OW 251
38262: STR
38263: PUSH
38264: LD_STRING , 
38266: STR
38267: PUSH
38268: LD_VAR 0 3
38272: PPUSH
38273: CALL_OW 254
38277: STR
38278: PUSH
38279: LD_STRING , 
38281: STR
38282: PUSH
38283: LD_VAR 0 3
38287: PPUSH
38288: LD_INT 1
38290: PPUSH
38291: CALL_OW 268
38295: STR
38296: PUSH
38297: LD_STRING , 
38299: STR
38300: PUSH
38301: LD_VAR 0 3
38305: PPUSH
38306: LD_INT 2
38308: PPUSH
38309: CALL_OW 268
38313: STR
38314: PUSH
38315: LD_STRING ],
38317: STR
38318: PPUSH
38319: CALL_OW 561
// end ;
38323: GO 38217
38325: POP
38326: POP
// AddToLog ( ]; ) ;
38327: LD_STRING ];
38329: PPUSH
38330: CALL_OW 561
// end ;
38334: LD_VAR 0 2
38338: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
38339: LD_INT 0
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
// if not area or not rate or not max then
38346: LD_VAR 0 1
38350: NOT
38351: PUSH
38352: LD_VAR 0 2
38356: NOT
38357: OR
38358: PUSH
38359: LD_VAR 0 4
38363: NOT
38364: OR
38365: IFFALSE 38369
// exit ;
38367: GO 38558
// while 1 do
38369: LD_INT 1
38371: IFFALSE 38558
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_INT 1
38385: PPUSH
38386: CALL_OW 287
38390: PUSH
38391: LD_INT 10
38393: MUL
38394: ST_TO_ADDR
// r := rate / 10 ;
38395: LD_ADDR_VAR 0 7
38399: PUSH
38400: LD_VAR 0 2
38404: PUSH
38405: LD_INT 10
38407: DIVREAL
38408: ST_TO_ADDR
// time := 1 1$00 ;
38409: LD_ADDR_VAR 0 8
38413: PUSH
38414: LD_INT 2100
38416: ST_TO_ADDR
// if amount < min then
38417: LD_VAR 0 9
38421: PUSH
38422: LD_VAR 0 3
38426: LESS
38427: IFFALSE 38445
// r := r * 2 else
38429: LD_ADDR_VAR 0 7
38433: PUSH
38434: LD_VAR 0 7
38438: PUSH
38439: LD_INT 2
38441: MUL
38442: ST_TO_ADDR
38443: GO 38471
// if amount > max then
38445: LD_VAR 0 9
38449: PUSH
38450: LD_VAR 0 4
38454: GREATER
38455: IFFALSE 38471
// r := r / 2 ;
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: LD_VAR 0 7
38466: PUSH
38467: LD_INT 2
38469: DIVREAL
38470: ST_TO_ADDR
// time := time / r ;
38471: LD_ADDR_VAR 0 8
38475: PUSH
38476: LD_VAR 0 8
38480: PUSH
38481: LD_VAR 0 7
38485: DIVREAL
38486: ST_TO_ADDR
// if time < 0 then
38487: LD_VAR 0 8
38491: PUSH
38492: LD_INT 0
38494: LESS
38495: IFFALSE 38512
// time := time * - 1 ;
38497: LD_ADDR_VAR 0 8
38501: PUSH
38502: LD_VAR 0 8
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: MUL
38511: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
38512: LD_VAR 0 8
38516: PUSH
38517: LD_INT 35
38519: PPUSH
38520: LD_INT 875
38522: PPUSH
38523: CALL_OW 12
38527: PLUS
38528: PPUSH
38529: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
38533: LD_INT 1
38535: PPUSH
38536: LD_INT 5
38538: PPUSH
38539: CALL_OW 12
38543: PPUSH
38544: LD_VAR 0 1
38548: PPUSH
38549: LD_INT 1
38551: PPUSH
38552: CALL_OW 55
// end ;
38556: GO 38369
// end ;
38558: LD_VAR 0 5
38562: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38563: LD_INT 0
38565: PPUSH
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
38570: PPUSH
38571: PPUSH
38572: PPUSH
// if not turrets or not factories then
38573: LD_VAR 0 1
38577: NOT
38578: PUSH
38579: LD_VAR 0 2
38583: NOT
38584: OR
38585: IFFALSE 38589
// exit ;
38587: GO 38896
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38589: LD_ADDR_VAR 0 10
38593: PUSH
38594: LD_INT 5
38596: PUSH
38597: LD_INT 6
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 4
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 3
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 24
38631: PUSH
38632: LD_INT 25
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 23
38641: PUSH
38642: LD_INT 27
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 42
38655: PUSH
38656: LD_INT 43
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 44
38665: PUSH
38666: LD_INT 46
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 45
38675: PUSH
38676: LD_INT 47
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: ST_TO_ADDR
// result := [ ] ;
38693: LD_ADDR_VAR 0 3
38697: PUSH
38698: EMPTY
38699: ST_TO_ADDR
// for i in turrets do
38700: LD_ADDR_VAR 0 4
38704: PUSH
38705: LD_VAR 0 1
38709: PUSH
38710: FOR_IN
38711: IFFALSE 38894
// begin nat := GetNation ( i ) ;
38713: LD_ADDR_VAR 0 7
38717: PUSH
38718: LD_VAR 0 4
38722: PPUSH
38723: CALL_OW 248
38727: ST_TO_ADDR
// weapon := 0 ;
38728: LD_ADDR_VAR 0 8
38732: PUSH
38733: LD_INT 0
38735: ST_TO_ADDR
// if not nat then
38736: LD_VAR 0 7
38740: NOT
38741: IFFALSE 38745
// continue ;
38743: GO 38710
// for j in list [ nat ] do
38745: LD_ADDR_VAR 0 5
38749: PUSH
38750: LD_VAR 0 10
38754: PUSH
38755: LD_VAR 0 7
38759: ARRAY
38760: PUSH
38761: FOR_IN
38762: IFFALSE 38803
// if GetBWeapon ( i ) = j [ 1 ] then
38764: LD_VAR 0 4
38768: PPUSH
38769: CALL_OW 269
38773: PUSH
38774: LD_VAR 0 5
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: EQUAL
38783: IFFALSE 38801
// begin weapon := j [ 2 ] ;
38785: LD_ADDR_VAR 0 8
38789: PUSH
38790: LD_VAR 0 5
38794: PUSH
38795: LD_INT 2
38797: ARRAY
38798: ST_TO_ADDR
// break ;
38799: GO 38803
// end ;
38801: GO 38761
38803: POP
38804: POP
// if not weapon then
38805: LD_VAR 0 8
38809: NOT
38810: IFFALSE 38814
// continue ;
38812: GO 38710
// for k in factories do
38814: LD_ADDR_VAR 0 6
38818: PUSH
38819: LD_VAR 0 2
38823: PUSH
38824: FOR_IN
38825: IFFALSE 38890
// begin weapons := AvailableWeaponList ( k ) ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_VAR 0 6
38836: PPUSH
38837: CALL_OW 478
38841: ST_TO_ADDR
// if not weapons then
38842: LD_VAR 0 9
38846: NOT
38847: IFFALSE 38851
// continue ;
38849: GO 38824
// if weapon in weapons then
38851: LD_VAR 0 8
38855: PUSH
38856: LD_VAR 0 9
38860: IN
38861: IFFALSE 38888
// begin result := [ i , weapon ] ;
38863: LD_ADDR_VAR 0 3
38867: PUSH
38868: LD_VAR 0 4
38872: PUSH
38873: LD_VAR 0 8
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: ST_TO_ADDR
// exit ;
38882: POP
38883: POP
38884: POP
38885: POP
38886: GO 38896
// end ; end ;
38888: GO 38824
38890: POP
38891: POP
// end ;
38892: GO 38710
38894: POP
38895: POP
// end ;
38896: LD_VAR 0 3
38900: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38901: LD_INT 0
38903: PPUSH
// if not side or side > 8 then
38904: LD_VAR 0 3
38908: NOT
38909: PUSH
38910: LD_VAR 0 3
38914: PUSH
38915: LD_INT 8
38917: GREATER
38918: OR
38919: IFFALSE 38923
// exit ;
38921: GO 38982
// if not range then
38923: LD_VAR 0 4
38927: NOT
38928: IFFALSE 38939
// range := - 12 ;
38930: LD_ADDR_VAR 0 4
38934: PUSH
38935: LD_INT 12
38937: NEG
38938: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38939: LD_VAR 0 1
38943: PPUSH
38944: LD_VAR 0 2
38948: PPUSH
38949: LD_VAR 0 3
38953: PPUSH
38954: LD_VAR 0 4
38958: PPUSH
38959: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38963: LD_VAR 0 1
38967: PPUSH
38968: LD_VAR 0 2
38972: PPUSH
38973: LD_VAR 0 3
38977: PPUSH
38978: CALL_OW 331
// end ;
38982: LD_VAR 0 5
38986: RET
// export function Video ( mode ) ; begin
38987: LD_INT 0
38989: PPUSH
// ingame_video = mode ;
38990: LD_ADDR_OWVAR 52
38994: PUSH
38995: LD_VAR 0 1
38999: ST_TO_ADDR
// interface_hidden = mode ;
39000: LD_ADDR_OWVAR 54
39004: PUSH
39005: LD_VAR 0 1
39009: ST_TO_ADDR
// end ;
39010: LD_VAR 0 2
39014: RET
// export function Join ( array , element ) ; begin
39015: LD_INT 0
39017: PPUSH
// result := Replace ( array , array + 1 , element ) ;
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: LD_VAR 0 1
39027: PPUSH
39028: LD_VAR 0 1
39032: PUSH
39033: LD_INT 1
39035: PLUS
39036: PPUSH
39037: LD_VAR 0 2
39041: PPUSH
39042: CALL_OW 1
39046: ST_TO_ADDR
// end ;
39047: LD_VAR 0 3
39051: RET
// export function JoinUnion ( array , element ) ; begin
39052: LD_INT 0
39054: PPUSH
// result := array union element ;
39055: LD_ADDR_VAR 0 3
39059: PUSH
39060: LD_VAR 0 1
39064: PUSH
39065: LD_VAR 0 2
39069: UNION
39070: ST_TO_ADDR
// end ;
39071: LD_VAR 0 3
39075: RET
// export function GetBehemoths ( side ) ; begin
39076: LD_INT 0
39078: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
39079: LD_ADDR_VAR 0 2
39083: PUSH
39084: LD_INT 22
39086: PUSH
39087: LD_VAR 0 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 31
39098: PUSH
39099: LD_INT 25
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PPUSH
39110: CALL_OW 69
39114: ST_TO_ADDR
// end ;
39115: LD_VAR 0 2
39119: RET
// export function Shuffle ( array ) ; var i , index ; begin
39120: LD_INT 0
39122: PPUSH
39123: PPUSH
39124: PPUSH
// result := [ ] ;
39125: LD_ADDR_VAR 0 2
39129: PUSH
39130: EMPTY
39131: ST_TO_ADDR
// if not array then
39132: LD_VAR 0 1
39136: NOT
39137: IFFALSE 39141
// exit ;
39139: GO 39240
// Randomize ;
39141: CALL_OW 10
// for i = array downto 1 do
39145: LD_ADDR_VAR 0 3
39149: PUSH
39150: DOUBLE
39151: LD_VAR 0 1
39155: INC
39156: ST_TO_ADDR
39157: LD_INT 1
39159: PUSH
39160: FOR_DOWNTO
39161: IFFALSE 39238
// begin index := rand ( 1 , array ) ;
39163: LD_ADDR_VAR 0 4
39167: PUSH
39168: LD_INT 1
39170: PPUSH
39171: LD_VAR 0 1
39175: PPUSH
39176: CALL_OW 12
39180: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
39181: LD_ADDR_VAR 0 2
39185: PUSH
39186: LD_VAR 0 2
39190: PPUSH
39191: LD_VAR 0 2
39195: PUSH
39196: LD_INT 1
39198: PLUS
39199: PPUSH
39200: LD_VAR 0 1
39204: PUSH
39205: LD_VAR 0 4
39209: ARRAY
39210: PPUSH
39211: CALL_OW 2
39215: ST_TO_ADDR
// array := Delete ( array , index ) ;
39216: LD_ADDR_VAR 0 1
39220: PUSH
39221: LD_VAR 0 1
39225: PPUSH
39226: LD_VAR 0 4
39230: PPUSH
39231: CALL_OW 3
39235: ST_TO_ADDR
// end ;
39236: GO 39160
39238: POP
39239: POP
// end ;
39240: LD_VAR 0 2
39244: RET
// export function GetBaseMaterials ( base ) ; begin
39245: LD_INT 0
39247: PPUSH
// result := [ 0 , 0 , 0 ] ;
39248: LD_ADDR_VAR 0 2
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// if not base then
39267: LD_VAR 0 1
39271: NOT
39272: IFFALSE 39276
// exit ;
39274: GO 39325
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
39276: LD_ADDR_VAR 0 2
39280: PUSH
39281: LD_VAR 0 1
39285: PPUSH
39286: LD_INT 1
39288: PPUSH
39289: CALL_OW 275
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: LD_INT 2
39301: PPUSH
39302: CALL_OW 275
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: LD_INT 3
39314: PPUSH
39315: CALL_OW 275
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: LIST
39324: ST_TO_ADDR
// end ;
39325: LD_VAR 0 2
39329: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
39330: LD_INT 0
39332: PPUSH
39333: PPUSH
// result := array ;
39334: LD_ADDR_VAR 0 3
39338: PUSH
39339: LD_VAR 0 1
39343: ST_TO_ADDR
// if size > 0 then
39344: LD_VAR 0 2
39348: PUSH
39349: LD_INT 0
39351: GREATER
39352: IFFALSE 39398
// for i := array downto size do
39354: LD_ADDR_VAR 0 4
39358: PUSH
39359: DOUBLE
39360: LD_VAR 0 1
39364: INC
39365: ST_TO_ADDR
39366: LD_VAR 0 2
39370: PUSH
39371: FOR_DOWNTO
39372: IFFALSE 39396
// result := Delete ( result , result ) ;
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_VAR 0 3
39383: PPUSH
39384: LD_VAR 0 3
39388: PPUSH
39389: CALL_OW 3
39393: ST_TO_ADDR
39394: GO 39371
39396: POP
39397: POP
// end ;
39398: LD_VAR 0 3
39402: RET
// export function ComExit ( unit ) ; var tmp ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
// if not IsInUnit ( unit ) then
39407: LD_VAR 0 1
39411: PPUSH
39412: CALL_OW 310
39416: NOT
39417: IFFALSE 39421
// exit ;
39419: GO 39481
// tmp := IsInUnit ( unit ) ;
39421: LD_ADDR_VAR 0 3
39425: PUSH
39426: LD_VAR 0 1
39430: PPUSH
39431: CALL_OW 310
39435: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
39436: LD_VAR 0 3
39440: PPUSH
39441: CALL_OW 247
39445: PUSH
39446: LD_INT 2
39448: EQUAL
39449: IFFALSE 39462
// ComExitVehicle ( unit ) else
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 121
39460: GO 39471
// ComExitBuilding ( unit ) ;
39462: LD_VAR 0 1
39466: PPUSH
39467: CALL_OW 122
// result := tmp ;
39471: LD_ADDR_VAR 0 2
39475: PUSH
39476: LD_VAR 0 3
39480: ST_TO_ADDR
// end ;
39481: LD_VAR 0 2
39485: RET
// export function ComExitAll ( units ) ; var i ; begin
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
// if not units then
39490: LD_VAR 0 1
39494: NOT
39495: IFFALSE 39499
// exit ;
39497: GO 39525
// for i in units do
39499: LD_ADDR_VAR 0 3
39503: PUSH
39504: LD_VAR 0 1
39508: PUSH
39509: FOR_IN
39510: IFFALSE 39523
// ComExit ( i ) ;
39512: LD_VAR 0 3
39516: PPUSH
39517: CALL 39403 0 1
39521: GO 39509
39523: POP
39524: POP
// end ;
39525: LD_VAR 0 2
39529: RET
// export function ResetHc ; begin
39530: LD_INT 0
39532: PPUSH
// InitHc ;
39533: CALL_OW 19
// hc_importance := 0 ;
39537: LD_ADDR_OWVAR 32
39541: PUSH
39542: LD_INT 0
39544: ST_TO_ADDR
// end ;
39545: LD_VAR 0 1
39549: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
39550: LD_INT 0
39552: PPUSH
39553: PPUSH
39554: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39555: LD_ADDR_VAR 0 6
39559: PUSH
39560: LD_VAR 0 1
39564: PUSH
39565: LD_VAR 0 3
39569: PLUS
39570: PUSH
39571: LD_INT 2
39573: DIV
39574: ST_TO_ADDR
// if _x < 0 then
39575: LD_VAR 0 6
39579: PUSH
39580: LD_INT 0
39582: LESS
39583: IFFALSE 39600
// _x := _x * - 1 ;
39585: LD_ADDR_VAR 0 6
39589: PUSH
39590: LD_VAR 0 6
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: MUL
39599: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39600: LD_ADDR_VAR 0 7
39604: PUSH
39605: LD_VAR 0 2
39609: PUSH
39610: LD_VAR 0 4
39614: PLUS
39615: PUSH
39616: LD_INT 2
39618: DIV
39619: ST_TO_ADDR
// if _y < 0 then
39620: LD_VAR 0 7
39624: PUSH
39625: LD_INT 0
39627: LESS
39628: IFFALSE 39645
// _y := _y * - 1 ;
39630: LD_ADDR_VAR 0 7
39634: PUSH
39635: LD_VAR 0 7
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: MUL
39644: ST_TO_ADDR
// result := [ _x , _y ] ;
39645: LD_ADDR_VAR 0 5
39649: PUSH
39650: LD_VAR 0 6
39654: PUSH
39655: LD_VAR 0 7
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: ST_TO_ADDR
// end ;
39664: LD_VAR 0 5
39668: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39669: LD_INT 0
39671: PPUSH
39672: PPUSH
39673: PPUSH
39674: PPUSH
// task := GetTaskList ( unit ) ;
39675: LD_ADDR_VAR 0 7
39679: PUSH
39680: LD_VAR 0 1
39684: PPUSH
39685: CALL_OW 437
39689: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39690: LD_VAR 0 7
39694: NOT
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: LD_VAR 0 2
39705: PPUSH
39706: CALL_OW 308
39710: NOT
39711: AND
39712: IFFALSE 39716
// exit ;
39714: GO 39834
// if IsInArea ( unit , area ) then
39716: LD_VAR 0 1
39720: PPUSH
39721: LD_VAR 0 2
39725: PPUSH
39726: CALL_OW 308
39730: IFFALSE 39748
// begin ComMoveToArea ( unit , goAway ) ;
39732: LD_VAR 0 1
39736: PPUSH
39737: LD_VAR 0 3
39741: PPUSH
39742: CALL_OW 113
// exit ;
39746: GO 39834
// end ; if task [ 1 ] [ 1 ] <> M then
39748: LD_VAR 0 7
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: PUSH
39757: LD_INT 1
39759: ARRAY
39760: PUSH
39761: LD_STRING M
39763: NONEQUAL
39764: IFFALSE 39768
// exit ;
39766: GO 39834
// x := task [ 1 ] [ 2 ] ;
39768: LD_ADDR_VAR 0 5
39772: PUSH
39773: LD_VAR 0 7
39777: PUSH
39778: LD_INT 1
39780: ARRAY
39781: PUSH
39782: LD_INT 2
39784: ARRAY
39785: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39786: LD_ADDR_VAR 0 6
39790: PUSH
39791: LD_VAR 0 7
39795: PUSH
39796: LD_INT 1
39798: ARRAY
39799: PUSH
39800: LD_INT 3
39802: ARRAY
39803: ST_TO_ADDR
// if InArea ( x , y , area ) then
39804: LD_VAR 0 5
39808: PPUSH
39809: LD_VAR 0 6
39813: PPUSH
39814: LD_VAR 0 2
39818: PPUSH
39819: CALL_OW 309
39823: IFFALSE 39834
// ComStop ( unit ) ;
39825: LD_VAR 0 1
39829: PPUSH
39830: CALL_OW 141
// end ;
39834: LD_VAR 0 4
39838: RET
// export function Abs ( value ) ; begin
39839: LD_INT 0
39841: PPUSH
// result := value ;
39842: LD_ADDR_VAR 0 2
39846: PUSH
39847: LD_VAR 0 1
39851: ST_TO_ADDR
// if value < 0 then
39852: LD_VAR 0 1
39856: PUSH
39857: LD_INT 0
39859: LESS
39860: IFFALSE 39877
// result := value * - 1 ;
39862: LD_ADDR_VAR 0 2
39866: PUSH
39867: LD_VAR 0 1
39871: PUSH
39872: LD_INT 1
39874: NEG
39875: MUL
39876: ST_TO_ADDR
// end ;
39877: LD_VAR 0 2
39881: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39882: LD_INT 0
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
// if not unit or not building then
39892: LD_VAR 0 1
39896: NOT
39897: PUSH
39898: LD_VAR 0 2
39902: NOT
39903: OR
39904: IFFALSE 39908
// exit ;
39906: GO 40134
// x := GetX ( building ) ;
39908: LD_ADDR_VAR 0 4
39912: PUSH
39913: LD_VAR 0 2
39917: PPUSH
39918: CALL_OW 250
39922: ST_TO_ADDR
// y := GetY ( building ) ;
39923: LD_ADDR_VAR 0 6
39927: PUSH
39928: LD_VAR 0 2
39932: PPUSH
39933: CALL_OW 251
39937: ST_TO_ADDR
// d := GetDir ( building ) ;
39938: LD_ADDR_VAR 0 8
39942: PUSH
39943: LD_VAR 0 2
39947: PPUSH
39948: CALL_OW 254
39952: ST_TO_ADDR
// r := 4 ;
39953: LD_ADDR_VAR 0 9
39957: PUSH
39958: LD_INT 4
39960: ST_TO_ADDR
// for i := 1 to 5 do
39961: LD_ADDR_VAR 0 10
39965: PUSH
39966: DOUBLE
39967: LD_INT 1
39969: DEC
39970: ST_TO_ADDR
39971: LD_INT 5
39973: PUSH
39974: FOR_TO
39975: IFFALSE 40132
// begin _x := ShiftX ( x , d , r + i ) ;
39977: LD_ADDR_VAR 0 5
39981: PUSH
39982: LD_VAR 0 4
39986: PPUSH
39987: LD_VAR 0 8
39991: PPUSH
39992: LD_VAR 0 9
39996: PUSH
39997: LD_VAR 0 10
40001: PLUS
40002: PPUSH
40003: CALL_OW 272
40007: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
40008: LD_ADDR_VAR 0 7
40012: PUSH
40013: LD_VAR 0 6
40017: PPUSH
40018: LD_VAR 0 8
40022: PPUSH
40023: LD_VAR 0 9
40027: PUSH
40028: LD_VAR 0 10
40032: PLUS
40033: PPUSH
40034: CALL_OW 273
40038: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
40039: LD_VAR 0 5
40043: PPUSH
40044: LD_VAR 0 7
40048: PPUSH
40049: CALL_OW 488
40053: PUSH
40054: LD_VAR 0 5
40058: PPUSH
40059: LD_VAR 0 7
40063: PPUSH
40064: CALL_OW 428
40068: PPUSH
40069: CALL_OW 247
40073: PUSH
40074: LD_INT 3
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: IN
40084: NOT
40085: AND
40086: IFFALSE 40130
// begin ComMoveXY ( unit , _x , _y ) ;
40088: LD_VAR 0 1
40092: PPUSH
40093: LD_VAR 0 5
40097: PPUSH
40098: LD_VAR 0 7
40102: PPUSH
40103: CALL_OW 111
// result := [ _x , _y ] ;
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_VAR 0 5
40116: PUSH
40117: LD_VAR 0 7
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: ST_TO_ADDR
// exit ;
40126: POP
40127: POP
40128: GO 40134
// end ; end ;
40130: GO 39974
40132: POP
40133: POP
// end ;
40134: LD_VAR 0 3
40138: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
40143: PPUSH
// result := 0 ;
40144: LD_ADDR_VAR 0 3
40148: PUSH
40149: LD_INT 0
40151: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
40152: LD_VAR 0 1
40156: PUSH
40157: LD_INT 0
40159: LESS
40160: PUSH
40161: LD_VAR 0 1
40165: PUSH
40166: LD_INT 8
40168: GREATER
40169: OR
40170: PUSH
40171: LD_VAR 0 2
40175: PUSH
40176: LD_INT 0
40178: LESS
40179: OR
40180: PUSH
40181: LD_VAR 0 2
40185: PUSH
40186: LD_INT 8
40188: GREATER
40189: OR
40190: IFFALSE 40194
// exit ;
40192: GO 40269
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
40194: LD_ADDR_VAR 0 4
40198: PUSH
40199: LD_INT 22
40201: PUSH
40202: LD_VAR 0 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PPUSH
40211: CALL_OW 69
40215: PUSH
40216: FOR_IN
40217: IFFALSE 40267
// begin un := UnitShoot ( i ) ;
40219: LD_ADDR_VAR 0 5
40223: PUSH
40224: LD_VAR 0 4
40228: PPUSH
40229: CALL_OW 504
40233: ST_TO_ADDR
// if GetSide ( un ) = side1 then
40234: LD_VAR 0 5
40238: PPUSH
40239: CALL_OW 255
40243: PUSH
40244: LD_VAR 0 1
40248: EQUAL
40249: IFFALSE 40265
// begin result := un ;
40251: LD_ADDR_VAR 0 3
40255: PUSH
40256: LD_VAR 0 5
40260: ST_TO_ADDR
// exit ;
40261: POP
40262: POP
40263: GO 40269
// end ; end ;
40265: GO 40216
40267: POP
40268: POP
// end ;
40269: LD_VAR 0 3
40273: RET
// export function GetCargoBay ( units ) ; begin
40274: LD_INT 0
40276: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
40277: LD_ADDR_VAR 0 2
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 34
40292: PUSH
40293: LD_INT 12
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 34
40302: PUSH
40303: LD_INT 51
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 34
40312: PUSH
40313: LD_INT 32
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 34
40322: PUSH
40323: LD_EXP 81
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: PPUSH
40339: CALL_OW 72
40343: ST_TO_ADDR
// end ;
40344: LD_VAR 0 2
40348: RET
// export function Negate ( value ) ; begin
40349: LD_INT 0
40351: PPUSH
// result := not value ;
40352: LD_ADDR_VAR 0 2
40356: PUSH
40357: LD_VAR 0 1
40361: NOT
40362: ST_TO_ADDR
// end ;
40363: LD_VAR 0 2
40367: RET
// export function Inc ( value ) ; begin
40368: LD_INT 0
40370: PPUSH
// result := value + 1 ;
40371: LD_ADDR_VAR 0 2
40375: PUSH
40376: LD_VAR 0 1
40380: PUSH
40381: LD_INT 1
40383: PLUS
40384: ST_TO_ADDR
// end ;
40385: LD_VAR 0 2
40389: RET
// export function Dec ( value ) ; begin
40390: LD_INT 0
40392: PPUSH
// result := value - 1 ;
40393: LD_ADDR_VAR 0 2
40397: PUSH
40398: LD_VAR 0 1
40402: PUSH
40403: LD_INT 1
40405: MINUS
40406: ST_TO_ADDR
// end ;
40407: LD_VAR 0 2
40411: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
40412: LD_INT 0
40414: PPUSH
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
40420: PPUSH
40421: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
40422: LD_VAR 0 1
40426: PPUSH
40427: LD_VAR 0 2
40431: PPUSH
40432: CALL_OW 488
40436: NOT
40437: PUSH
40438: LD_VAR 0 3
40442: PPUSH
40443: LD_VAR 0 4
40447: PPUSH
40448: CALL_OW 488
40452: NOT
40453: OR
40454: IFFALSE 40467
// begin result := - 1 ;
40456: LD_ADDR_VAR 0 5
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: ST_TO_ADDR
// exit ;
40465: GO 40702
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
40467: LD_ADDR_VAR 0 12
40471: PUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: LD_VAR 0 2
40481: PPUSH
40482: LD_VAR 0 3
40486: PPUSH
40487: LD_VAR 0 4
40491: PPUSH
40492: CALL 39550 0 4
40496: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
40497: LD_ADDR_VAR 0 11
40501: PUSH
40502: LD_VAR 0 1
40506: PPUSH
40507: LD_VAR 0 2
40511: PPUSH
40512: LD_VAR 0 12
40516: PUSH
40517: LD_INT 1
40519: ARRAY
40520: PPUSH
40521: LD_VAR 0 12
40525: PUSH
40526: LD_INT 2
40528: ARRAY
40529: PPUSH
40530: CALL_OW 298
40534: ST_TO_ADDR
// distance := 9999 ;
40535: LD_ADDR_VAR 0 10
40539: PUSH
40540: LD_INT 9999
40542: ST_TO_ADDR
// for i := 0 to 5 do
40543: LD_ADDR_VAR 0 6
40547: PUSH
40548: DOUBLE
40549: LD_INT 0
40551: DEC
40552: ST_TO_ADDR
40553: LD_INT 5
40555: PUSH
40556: FOR_TO
40557: IFFALSE 40700
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40559: LD_ADDR_VAR 0 7
40563: PUSH
40564: LD_VAR 0 1
40568: PPUSH
40569: LD_VAR 0 6
40573: PPUSH
40574: LD_VAR 0 11
40578: PPUSH
40579: CALL_OW 272
40583: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40584: LD_ADDR_VAR 0 8
40588: PUSH
40589: LD_VAR 0 2
40593: PPUSH
40594: LD_VAR 0 6
40598: PPUSH
40599: LD_VAR 0 11
40603: PPUSH
40604: CALL_OW 273
40608: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40609: LD_VAR 0 7
40613: PPUSH
40614: LD_VAR 0 8
40618: PPUSH
40619: CALL_OW 488
40623: NOT
40624: IFFALSE 40628
// continue ;
40626: GO 40556
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40628: LD_ADDR_VAR 0 9
40632: PUSH
40633: LD_VAR 0 12
40637: PUSH
40638: LD_INT 1
40640: ARRAY
40641: PPUSH
40642: LD_VAR 0 12
40646: PUSH
40647: LD_INT 2
40649: ARRAY
40650: PPUSH
40651: LD_VAR 0 7
40655: PPUSH
40656: LD_VAR 0 8
40660: PPUSH
40661: CALL_OW 298
40665: ST_TO_ADDR
// if tmp < distance then
40666: LD_VAR 0 9
40670: PUSH
40671: LD_VAR 0 10
40675: LESS
40676: IFFALSE 40698
// begin result := i ;
40678: LD_ADDR_VAR 0 5
40682: PUSH
40683: LD_VAR 0 6
40687: ST_TO_ADDR
// distance := tmp ;
40688: LD_ADDR_VAR 0 10
40692: PUSH
40693: LD_VAR 0 9
40697: ST_TO_ADDR
// end ; end ;
40698: GO 40556
40700: POP
40701: POP
// end ;
40702: LD_VAR 0 5
40706: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40707: LD_INT 0
40709: PPUSH
40710: PPUSH
// if not driver or not IsInUnit ( driver ) then
40711: LD_VAR 0 1
40715: NOT
40716: PUSH
40717: LD_VAR 0 1
40721: PPUSH
40722: CALL_OW 310
40726: NOT
40727: OR
40728: IFFALSE 40732
// exit ;
40730: GO 40822
// vehicle := IsInUnit ( driver ) ;
40732: LD_ADDR_VAR 0 3
40736: PUSH
40737: LD_VAR 0 1
40741: PPUSH
40742: CALL_OW 310
40746: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40747: LD_VAR 0 1
40751: PPUSH
40752: LD_STRING \
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: PUSH
40782: LD_STRING E
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_VAR 0 3
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PPUSH
40818: CALL_OW 446
// end ;
40822: LD_VAR 0 2
40826: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40827: LD_INT 0
40829: PPUSH
40830: PPUSH
// if not driver or not IsInUnit ( driver ) then
40831: LD_VAR 0 1
40835: NOT
40836: PUSH
40837: LD_VAR 0 1
40841: PPUSH
40842: CALL_OW 310
40846: NOT
40847: OR
40848: IFFALSE 40852
// exit ;
40850: GO 40942
// vehicle := IsInUnit ( driver ) ;
40852: LD_ADDR_VAR 0 3
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 310
40866: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40867: LD_VAR 0 1
40871: PPUSH
40872: LD_STRING \
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: LD_INT 0
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: PUSH
40902: LD_STRING E
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_VAR 0 3
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PPUSH
40938: CALL_OW 447
// end ;
40942: LD_VAR 0 2
40946: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40947: LD_INT 0
40949: PPUSH
40950: PPUSH
40951: PPUSH
// tmp := [ ] ;
40952: LD_ADDR_VAR 0 5
40956: PUSH
40957: EMPTY
40958: ST_TO_ADDR
// for i in units do
40959: LD_ADDR_VAR 0 4
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: FOR_IN
40970: IFFALSE 41008
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40972: LD_ADDR_VAR 0 5
40976: PUSH
40977: LD_VAR 0 5
40981: PPUSH
40982: LD_VAR 0 5
40986: PUSH
40987: LD_INT 1
40989: PLUS
40990: PPUSH
40991: LD_VAR 0 4
40995: PPUSH
40996: CALL_OW 256
41000: PPUSH
41001: CALL_OW 2
41005: ST_TO_ADDR
41006: GO 40969
41008: POP
41009: POP
// if not tmp then
41010: LD_VAR 0 5
41014: NOT
41015: IFFALSE 41019
// exit ;
41017: GO 41067
// if asc then
41019: LD_VAR 0 2
41023: IFFALSE 41047
// result := SortListByListAsc ( units , tmp ) else
41025: LD_ADDR_VAR 0 3
41029: PUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: LD_VAR 0 5
41039: PPUSH
41040: CALL_OW 76
41044: ST_TO_ADDR
41045: GO 41067
// result := SortListByListDesc ( units , tmp ) ;
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: LD_VAR 0 5
41061: PPUSH
41062: CALL_OW 77
41066: ST_TO_ADDR
// end ;
41067: LD_VAR 0 3
41071: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
41072: LD_INT 0
41074: PPUSH
41075: PPUSH
// task := GetTaskList ( mech ) ;
41076: LD_ADDR_VAR 0 4
41080: PUSH
41081: LD_VAR 0 1
41085: PPUSH
41086: CALL_OW 437
41090: ST_TO_ADDR
// if not task then
41091: LD_VAR 0 4
41095: NOT
41096: IFFALSE 41100
// exit ;
41098: GO 41142
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
41100: LD_ADDR_VAR 0 3
41104: PUSH
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 1
41112: ARRAY
41113: PUSH
41114: LD_INT 1
41116: ARRAY
41117: PUSH
41118: LD_STRING r
41120: EQUAL
41121: PUSH
41122: LD_VAR 0 4
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PUSH
41131: LD_INT 4
41133: ARRAY
41134: PUSH
41135: LD_VAR 0 2
41139: EQUAL
41140: AND
41141: ST_TO_ADDR
// end ;
41142: LD_VAR 0 3
41146: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
41147: LD_INT 0
41149: PPUSH
// SetDir ( unit , d ) ;
41150: LD_VAR 0 1
41154: PPUSH
41155: LD_VAR 0 4
41159: PPUSH
41160: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
41164: LD_VAR 0 1
41168: PPUSH
41169: LD_VAR 0 2
41173: PPUSH
41174: LD_VAR 0 3
41178: PPUSH
41179: LD_VAR 0 5
41183: PPUSH
41184: CALL_OW 48
// end ;
41188: LD_VAR 0 6
41192: RET
// export function ToNaturalNumber ( number ) ; begin
41193: LD_INT 0
41195: PPUSH
// result := number div 1 ;
41196: LD_ADDR_VAR 0 2
41200: PUSH
41201: LD_VAR 0 1
41205: PUSH
41206: LD_INT 1
41208: DIV
41209: ST_TO_ADDR
// if number < 0 then
41210: LD_VAR 0 1
41214: PUSH
41215: LD_INT 0
41217: LESS
41218: IFFALSE 41228
// result := 0 ;
41220: LD_ADDR_VAR 0 2
41224: PUSH
41225: LD_INT 0
41227: ST_TO_ADDR
// end ;
41228: LD_VAR 0 2
41232: RET
// export function SortByClass ( units , class ) ; var un ; begin
41233: LD_INT 0
41235: PPUSH
41236: PPUSH
// if not units or not class then
41237: LD_VAR 0 1
41241: NOT
41242: PUSH
41243: LD_VAR 0 2
41247: NOT
41248: OR
41249: IFFALSE 41253
// exit ;
41251: GO 41348
// result := [ ] ;
41253: LD_ADDR_VAR 0 3
41257: PUSH
41258: EMPTY
41259: ST_TO_ADDR
// for un in units do
41260: LD_ADDR_VAR 0 4
41264: PUSH
41265: LD_VAR 0 1
41269: PUSH
41270: FOR_IN
41271: IFFALSE 41346
// if GetClass ( un ) = class then
41273: LD_VAR 0 4
41277: PPUSH
41278: CALL_OW 257
41282: PUSH
41283: LD_VAR 0 2
41287: EQUAL
41288: IFFALSE 41315
// result := Insert ( result , 1 , un ) else
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 3
41299: PPUSH
41300: LD_INT 1
41302: PPUSH
41303: LD_VAR 0 4
41307: PPUSH
41308: CALL_OW 2
41312: ST_TO_ADDR
41313: GO 41344
// result := Replace ( result , result + 1 , un ) ;
41315: LD_ADDR_VAR 0 3
41319: PUSH
41320: LD_VAR 0 3
41324: PPUSH
41325: LD_VAR 0 3
41329: PUSH
41330: LD_INT 1
41332: PLUS
41333: PPUSH
41334: LD_VAR 0 4
41338: PPUSH
41339: CALL_OW 1
41343: ST_TO_ADDR
41344: GO 41270
41346: POP
41347: POP
// end ;
41348: LD_VAR 0 3
41352: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
41353: LD_INT 0
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
// result := [ ] ;
41362: LD_ADDR_VAR 0 4
41366: PUSH
41367: EMPTY
41368: ST_TO_ADDR
// if x - r < 0 then
41369: LD_VAR 0 1
41373: PUSH
41374: LD_VAR 0 3
41378: MINUS
41379: PUSH
41380: LD_INT 0
41382: LESS
41383: IFFALSE 41395
// min_x := 0 else
41385: LD_ADDR_VAR 0 8
41389: PUSH
41390: LD_INT 0
41392: ST_TO_ADDR
41393: GO 41411
// min_x := x - r ;
41395: LD_ADDR_VAR 0 8
41399: PUSH
41400: LD_VAR 0 1
41404: PUSH
41405: LD_VAR 0 3
41409: MINUS
41410: ST_TO_ADDR
// if y - r < 0 then
41411: LD_VAR 0 2
41415: PUSH
41416: LD_VAR 0 3
41420: MINUS
41421: PUSH
41422: LD_INT 0
41424: LESS
41425: IFFALSE 41437
// min_y := 0 else
41427: LD_ADDR_VAR 0 7
41431: PUSH
41432: LD_INT 0
41434: ST_TO_ADDR
41435: GO 41453
// min_y := y - r ;
41437: LD_ADDR_VAR 0 7
41441: PUSH
41442: LD_VAR 0 2
41446: PUSH
41447: LD_VAR 0 3
41451: MINUS
41452: ST_TO_ADDR
// max_x := x + r ;
41453: LD_ADDR_VAR 0 9
41457: PUSH
41458: LD_VAR 0 1
41462: PUSH
41463: LD_VAR 0 3
41467: PLUS
41468: ST_TO_ADDR
// max_y := y + r ;
41469: LD_ADDR_VAR 0 10
41473: PUSH
41474: LD_VAR 0 2
41478: PUSH
41479: LD_VAR 0 3
41483: PLUS
41484: ST_TO_ADDR
// for _x = min_x to max_x do
41485: LD_ADDR_VAR 0 5
41489: PUSH
41490: DOUBLE
41491: LD_VAR 0 8
41495: DEC
41496: ST_TO_ADDR
41497: LD_VAR 0 9
41501: PUSH
41502: FOR_TO
41503: IFFALSE 41604
// for _y = min_y to max_y do
41505: LD_ADDR_VAR 0 6
41509: PUSH
41510: DOUBLE
41511: LD_VAR 0 7
41515: DEC
41516: ST_TO_ADDR
41517: LD_VAR 0 10
41521: PUSH
41522: FOR_TO
41523: IFFALSE 41600
// begin if not ValidHex ( _x , _y ) then
41525: LD_VAR 0 5
41529: PPUSH
41530: LD_VAR 0 6
41534: PPUSH
41535: CALL_OW 488
41539: NOT
41540: IFFALSE 41544
// continue ;
41542: GO 41522
// if GetResourceTypeXY ( _x , _y ) then
41544: LD_VAR 0 5
41548: PPUSH
41549: LD_VAR 0 6
41553: PPUSH
41554: CALL_OW 283
41558: IFFALSE 41598
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41560: LD_ADDR_VAR 0 4
41564: PUSH
41565: LD_VAR 0 4
41569: PPUSH
41570: LD_VAR 0 4
41574: PUSH
41575: LD_INT 1
41577: PLUS
41578: PPUSH
41579: LD_VAR 0 5
41583: PUSH
41584: LD_VAR 0 6
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PPUSH
41593: CALL_OW 1
41597: ST_TO_ADDR
// end ;
41598: GO 41522
41600: POP
41601: POP
41602: GO 41502
41604: POP
41605: POP
// end ;
41606: LD_VAR 0 4
41610: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41611: LD_INT 0
41613: PPUSH
41614: PPUSH
41615: PPUSH
41616: PPUSH
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
// if not units then
41621: LD_VAR 0 1
41625: NOT
41626: IFFALSE 41630
// exit ;
41628: GO 42141
// result := UnitFilter ( units , [ f_ok ] ) ;
41630: LD_ADDR_VAR 0 3
41634: PUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: LD_INT 50
41642: PUSH
41643: EMPTY
41644: LIST
41645: PPUSH
41646: CALL_OW 72
41650: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41651: LD_ADDR_VAR 0 8
41655: PUSH
41656: LD_VAR 0 1
41660: PUSH
41661: LD_INT 1
41663: ARRAY
41664: PPUSH
41665: CALL_OW 255
41669: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41670: LD_ADDR_VAR 0 10
41674: PUSH
41675: LD_INT 29
41677: PUSH
41678: LD_EXP 84
41682: PUSH
41683: LD_INT 49
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: ST_TO_ADDR
// if not result then
41691: LD_VAR 0 3
41695: NOT
41696: IFFALSE 41700
// exit ;
41698: GO 42141
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41700: LD_ADDR_VAR 0 5
41704: PUSH
41705: LD_INT 81
41707: PUSH
41708: LD_VAR 0 8
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PPUSH
41717: CALL_OW 69
41721: ST_TO_ADDR
// for i in result do
41722: LD_ADDR_VAR 0 4
41726: PUSH
41727: LD_VAR 0 3
41731: PUSH
41732: FOR_IN
41733: IFFALSE 42139
// begin tag := GetTag ( i ) + 1 ;
41735: LD_ADDR_VAR 0 9
41739: PUSH
41740: LD_VAR 0 4
41744: PPUSH
41745: CALL_OW 110
41749: PUSH
41750: LD_INT 1
41752: PLUS
41753: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41754: LD_ADDR_VAR 0 7
41758: PUSH
41759: LD_VAR 0 4
41763: PPUSH
41764: CALL_OW 250
41768: PPUSH
41769: LD_VAR 0 4
41773: PPUSH
41774: CALL_OW 251
41778: PPUSH
41779: LD_INT 6
41781: PPUSH
41782: CALL 41353 0 3
41786: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41787: LD_VAR 0 7
41791: PUSH
41792: LD_VAR 0 4
41796: PPUSH
41797: CALL_OW 264
41801: PUSH
41802: LD_VAR 0 10
41806: IN
41807: NOT
41808: AND
41809: IFFALSE 41848
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41811: LD_VAR 0 4
41815: PPUSH
41816: LD_VAR 0 7
41820: PUSH
41821: LD_INT 1
41823: ARRAY
41824: PUSH
41825: LD_INT 1
41827: ARRAY
41828: PPUSH
41829: LD_VAR 0 7
41833: PUSH
41834: LD_INT 1
41836: ARRAY
41837: PUSH
41838: LD_INT 2
41840: ARRAY
41841: PPUSH
41842: CALL_OW 116
41846: GO 42137
// if path > tag then
41848: LD_VAR 0 2
41852: PUSH
41853: LD_VAR 0 9
41857: GREATER
41858: IFFALSE 42066
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
41860: LD_ADDR_VAR 0 6
41864: PUSH
41865: LD_VAR 0 5
41869: PPUSH
41870: LD_INT 91
41872: PUSH
41873: LD_VAR 0 4
41877: PUSH
41878: LD_INT 12
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: PPUSH
41886: CALL_OW 72
41890: ST_TO_ADDR
// if nearEnemy then
41891: LD_VAR 0 6
41895: IFFALSE 41964
// begin if GetWeapon ( i ) = ru_time_lapser then
41897: LD_VAR 0 4
41901: PPUSH
41902: CALL_OW 264
41906: PUSH
41907: LD_INT 49
41909: EQUAL
41910: IFFALSE 41938
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41912: LD_VAR 0 4
41916: PPUSH
41917: LD_VAR 0 6
41921: PPUSH
41922: LD_VAR 0 4
41926: PPUSH
41927: CALL_OW 74
41931: PPUSH
41932: CALL_OW 112
41936: GO 41962
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41938: LD_VAR 0 4
41942: PPUSH
41943: LD_VAR 0 6
41947: PPUSH
41948: LD_VAR 0 4
41952: PPUSH
41953: CALL_OW 74
41957: PPUSH
41958: CALL_OW 115
// end else
41962: GO 42064
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41964: LD_VAR 0 4
41968: PPUSH
41969: LD_VAR 0 2
41973: PUSH
41974: LD_VAR 0 9
41978: ARRAY
41979: PUSH
41980: LD_INT 1
41982: ARRAY
41983: PPUSH
41984: LD_VAR 0 2
41988: PUSH
41989: LD_VAR 0 9
41993: ARRAY
41994: PUSH
41995: LD_INT 2
41997: ARRAY
41998: PPUSH
41999: CALL_OW 297
42003: PUSH
42004: LD_INT 6
42006: GREATER
42007: IFFALSE 42050
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
42009: LD_VAR 0 4
42013: PPUSH
42014: LD_VAR 0 2
42018: PUSH
42019: LD_VAR 0 9
42023: ARRAY
42024: PUSH
42025: LD_INT 1
42027: ARRAY
42028: PPUSH
42029: LD_VAR 0 2
42033: PUSH
42034: LD_VAR 0 9
42038: ARRAY
42039: PUSH
42040: LD_INT 2
42042: ARRAY
42043: PPUSH
42044: CALL_OW 114
42048: GO 42064
// SetTag ( i , tag ) ;
42050: LD_VAR 0 4
42054: PPUSH
42055: LD_VAR 0 9
42059: PPUSH
42060: CALL_OW 109
// end else
42064: GO 42137
// if enemy then
42066: LD_VAR 0 5
42070: IFFALSE 42137
// begin if GetWeapon ( i ) = ru_time_lapser then
42072: LD_VAR 0 4
42076: PPUSH
42077: CALL_OW 264
42081: PUSH
42082: LD_INT 49
42084: EQUAL
42085: IFFALSE 42113
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
42087: LD_VAR 0 4
42091: PPUSH
42092: LD_VAR 0 5
42096: PPUSH
42097: LD_VAR 0 4
42101: PPUSH
42102: CALL_OW 74
42106: PPUSH
42107: CALL_OW 112
42111: GO 42137
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
42113: LD_VAR 0 4
42117: PPUSH
42118: LD_VAR 0 5
42122: PPUSH
42123: LD_VAR 0 4
42127: PPUSH
42128: CALL_OW 74
42132: PPUSH
42133: CALL_OW 115
// end ; end ;
42137: GO 41732
42139: POP
42140: POP
// end ;
42141: LD_VAR 0 3
42145: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
42146: LD_INT 0
42148: PPUSH
42149: PPUSH
42150: PPUSH
// if not unit or IsInUnit ( unit ) then
42151: LD_VAR 0 1
42155: NOT
42156: PUSH
42157: LD_VAR 0 1
42161: PPUSH
42162: CALL_OW 310
42166: OR
42167: IFFALSE 42171
// exit ;
42169: GO 42262
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
42171: LD_ADDR_VAR 0 4
42175: PUSH
42176: LD_VAR 0 1
42180: PPUSH
42181: CALL_OW 250
42185: PPUSH
42186: LD_VAR 0 2
42190: PPUSH
42191: LD_INT 1
42193: PPUSH
42194: CALL_OW 272
42198: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
42199: LD_ADDR_VAR 0 5
42203: PUSH
42204: LD_VAR 0 1
42208: PPUSH
42209: CALL_OW 251
42213: PPUSH
42214: LD_VAR 0 2
42218: PPUSH
42219: LD_INT 1
42221: PPUSH
42222: CALL_OW 273
42226: ST_TO_ADDR
// if ValidHex ( x , y ) then
42227: LD_VAR 0 4
42231: PPUSH
42232: LD_VAR 0 5
42236: PPUSH
42237: CALL_OW 488
42241: IFFALSE 42262
// ComTurnXY ( unit , x , y ) ;
42243: LD_VAR 0 1
42247: PPUSH
42248: LD_VAR 0 4
42252: PPUSH
42253: LD_VAR 0 5
42257: PPUSH
42258: CALL_OW 118
// end ;
42262: LD_VAR 0 3
42266: RET
// export function SeeUnits ( side , units ) ; var i ; begin
42267: LD_INT 0
42269: PPUSH
42270: PPUSH
// result := false ;
42271: LD_ADDR_VAR 0 3
42275: PUSH
42276: LD_INT 0
42278: ST_TO_ADDR
// if not units then
42279: LD_VAR 0 2
42283: NOT
42284: IFFALSE 42288
// exit ;
42286: GO 42333
// for i in units do
42288: LD_ADDR_VAR 0 4
42292: PUSH
42293: LD_VAR 0 2
42297: PUSH
42298: FOR_IN
42299: IFFALSE 42331
// if See ( side , i ) then
42301: LD_VAR 0 1
42305: PPUSH
42306: LD_VAR 0 4
42310: PPUSH
42311: CALL_OW 292
42315: IFFALSE 42329
// begin result := true ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_INT 1
42324: ST_TO_ADDR
// exit ;
42325: POP
42326: POP
42327: GO 42333
// end ;
42329: GO 42298
42331: POP
42332: POP
// end ;
42333: LD_VAR 0 3
42337: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
42338: LD_INT 0
42340: PPUSH
42341: PPUSH
42342: PPUSH
42343: PPUSH
// if not unit or not points then
42344: LD_VAR 0 1
42348: NOT
42349: PUSH
42350: LD_VAR 0 2
42354: NOT
42355: OR
42356: IFFALSE 42360
// exit ;
42358: GO 42450
// dist := 99999 ;
42360: LD_ADDR_VAR 0 5
42364: PUSH
42365: LD_INT 99999
42367: ST_TO_ADDR
// for i in points do
42368: LD_ADDR_VAR 0 4
42372: PUSH
42373: LD_VAR 0 2
42377: PUSH
42378: FOR_IN
42379: IFFALSE 42448
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
42381: LD_ADDR_VAR 0 6
42385: PUSH
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 4
42395: PUSH
42396: LD_INT 1
42398: ARRAY
42399: PPUSH
42400: LD_VAR 0 4
42404: PUSH
42405: LD_INT 2
42407: ARRAY
42408: PPUSH
42409: CALL_OW 297
42413: ST_TO_ADDR
// if tmpDist < dist then
42414: LD_VAR 0 6
42418: PUSH
42419: LD_VAR 0 5
42423: LESS
42424: IFFALSE 42446
// begin result := i ;
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_VAR 0 4
42435: ST_TO_ADDR
// dist := tmpDist ;
42436: LD_ADDR_VAR 0 5
42440: PUSH
42441: LD_VAR 0 6
42445: ST_TO_ADDR
// end ; end ;
42446: GO 42378
42448: POP
42449: POP
// end ;
42450: LD_VAR 0 3
42454: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
42455: LD_INT 0
42457: PPUSH
// uc_side := side ;
42458: LD_ADDR_OWVAR 20
42462: PUSH
42463: LD_VAR 0 1
42467: ST_TO_ADDR
// uc_nation := 3 ;
42468: LD_ADDR_OWVAR 21
42472: PUSH
42473: LD_INT 3
42475: ST_TO_ADDR
// vc_chassis := 25 ;
42476: LD_ADDR_OWVAR 37
42480: PUSH
42481: LD_INT 25
42483: ST_TO_ADDR
// vc_engine := engine_siberite ;
42484: LD_ADDR_OWVAR 39
42488: PUSH
42489: LD_INT 3
42491: ST_TO_ADDR
// vc_control := control_computer ;
42492: LD_ADDR_OWVAR 38
42496: PUSH
42497: LD_INT 3
42499: ST_TO_ADDR
// vc_weapon := 59 ;
42500: LD_ADDR_OWVAR 40
42504: PUSH
42505: LD_INT 59
42507: ST_TO_ADDR
// result := CreateVehicle ;
42508: LD_ADDR_VAR 0 5
42512: PUSH
42513: CALL_OW 45
42517: ST_TO_ADDR
// SetDir ( result , d ) ;
42518: LD_VAR 0 5
42522: PPUSH
42523: LD_VAR 0 4
42527: PPUSH
42528: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
42532: LD_VAR 0 5
42536: PPUSH
42537: LD_VAR 0 2
42541: PPUSH
42542: LD_VAR 0 3
42546: PPUSH
42547: LD_INT 0
42549: PPUSH
42550: CALL_OW 48
// end ;
42554: LD_VAR 0 5
42558: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42559: LD_INT 0
42561: PPUSH
42562: PPUSH
42563: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42564: LD_ADDR_VAR 0 2
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42587: LD_VAR 0 1
42591: NOT
42592: PUSH
42593: LD_VAR 0 1
42597: PPUSH
42598: CALL_OW 264
42602: PUSH
42603: LD_INT 12
42605: PUSH
42606: LD_INT 51
42608: PUSH
42609: LD_INT 32
42611: PUSH
42612: LD_EXP 81
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: IN
42623: NOT
42624: OR
42625: IFFALSE 42629
// exit ;
42627: GO 42727
// for i := 1 to 3 do
42629: LD_ADDR_VAR 0 3
42633: PUSH
42634: DOUBLE
42635: LD_INT 1
42637: DEC
42638: ST_TO_ADDR
42639: LD_INT 3
42641: PUSH
42642: FOR_TO
42643: IFFALSE 42725
// begin tmp := GetCargo ( cargo , i ) ;
42645: LD_ADDR_VAR 0 4
42649: PUSH
42650: LD_VAR 0 1
42654: PPUSH
42655: LD_VAR 0 3
42659: PPUSH
42660: CALL_OW 289
42664: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42665: LD_ADDR_VAR 0 2
42669: PUSH
42670: LD_VAR 0 2
42674: PPUSH
42675: LD_VAR 0 3
42679: PPUSH
42680: LD_VAR 0 4
42684: PPUSH
42685: CALL_OW 1
42689: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42690: LD_ADDR_VAR 0 2
42694: PUSH
42695: LD_VAR 0 2
42699: PPUSH
42700: LD_INT 4
42702: PPUSH
42703: LD_VAR 0 2
42707: PUSH
42708: LD_INT 4
42710: ARRAY
42711: PUSH
42712: LD_VAR 0 4
42716: PLUS
42717: PPUSH
42718: CALL_OW 1
42722: ST_TO_ADDR
// end ;
42723: GO 42642
42725: POP
42726: POP
// end ;
42727: LD_VAR 0 2
42731: RET
// export function Length ( array ) ; begin
42732: LD_INT 0
42734: PPUSH
// result := array + 0 ;
42735: LD_ADDR_VAR 0 2
42739: PUSH
42740: LD_VAR 0 1
42744: PUSH
42745: LD_INT 0
42747: PLUS
42748: ST_TO_ADDR
// end ; end_of_file
42749: LD_VAR 0 2
42753: RET
// every 0 0$1 do
42754: GO 42756
42756: DISABLE
// begin enable ;
42757: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
42758: LD_STRING updateTimer(
42760: PUSH
42761: LD_OWVAR 1
42765: STR
42766: PUSH
42767: LD_STRING );
42769: STR
42770: PPUSH
42771: CALL_OW 559
// end ;
42775: END
// export function SOS_MapStart ( ) ; begin
42776: LD_INT 0
42778: PPUSH
// if streamModeActive then
42779: LD_EXP 100
42783: IFFALSE 42792
// DefineStreamItems ( true ) ;
42785: LD_INT 1
42787: PPUSH
42788: CALL 44442 0 1
// UpdateFactoryWaypoints ( ) ;
42792: CALL 58026 0 0
// end ;
42796: LD_VAR 0 1
42800: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42801: LD_INT 0
42803: PPUSH
// if p2 = 100 then
42804: LD_VAR 0 2
42808: PUSH
42809: LD_INT 100
42811: EQUAL
42812: IFFALSE 43815
// begin if not StreamModeActive then
42814: LD_EXP 100
42818: NOT
42819: IFFALSE 42829
// StreamModeActive := true ;
42821: LD_ADDR_EXP 100
42825: PUSH
42826: LD_INT 1
42828: ST_TO_ADDR
// if p3 = 0 then
42829: LD_VAR 0 3
42833: PUSH
42834: LD_INT 0
42836: EQUAL
42837: IFFALSE 42843
// InitStreamMode ;
42839: CALL 43978 0 0
// if p3 = 1 then
42843: LD_VAR 0 3
42847: PUSH
42848: LD_INT 1
42850: EQUAL
42851: IFFALSE 42861
// sRocket := true ;
42853: LD_ADDR_EXP 105
42857: PUSH
42858: LD_INT 1
42860: ST_TO_ADDR
// if p3 = 2 then
42861: LD_VAR 0 3
42865: PUSH
42866: LD_INT 2
42868: EQUAL
42869: IFFALSE 42879
// sSpeed := true ;
42871: LD_ADDR_EXP 104
42875: PUSH
42876: LD_INT 1
42878: ST_TO_ADDR
// if p3 = 3 then
42879: LD_VAR 0 3
42883: PUSH
42884: LD_INT 3
42886: EQUAL
42887: IFFALSE 42897
// sEngine := true ;
42889: LD_ADDR_EXP 106
42893: PUSH
42894: LD_INT 1
42896: ST_TO_ADDR
// if p3 = 4 then
42897: LD_VAR 0 3
42901: PUSH
42902: LD_INT 4
42904: EQUAL
42905: IFFALSE 42915
// sSpec := true ;
42907: LD_ADDR_EXP 103
42911: PUSH
42912: LD_INT 1
42914: ST_TO_ADDR
// if p3 = 5 then
42915: LD_VAR 0 3
42919: PUSH
42920: LD_INT 5
42922: EQUAL
42923: IFFALSE 42933
// sLevel := true ;
42925: LD_ADDR_EXP 107
42929: PUSH
42930: LD_INT 1
42932: ST_TO_ADDR
// if p3 = 6 then
42933: LD_VAR 0 3
42937: PUSH
42938: LD_INT 6
42940: EQUAL
42941: IFFALSE 42951
// sArmoury := true ;
42943: LD_ADDR_EXP 108
42947: PUSH
42948: LD_INT 1
42950: ST_TO_ADDR
// if p3 = 7 then
42951: LD_VAR 0 3
42955: PUSH
42956: LD_INT 7
42958: EQUAL
42959: IFFALSE 42969
// sRadar := true ;
42961: LD_ADDR_EXP 109
42965: PUSH
42966: LD_INT 1
42968: ST_TO_ADDR
// if p3 = 8 then
42969: LD_VAR 0 3
42973: PUSH
42974: LD_INT 8
42976: EQUAL
42977: IFFALSE 42987
// sBunker := true ;
42979: LD_ADDR_EXP 110
42983: PUSH
42984: LD_INT 1
42986: ST_TO_ADDR
// if p3 = 9 then
42987: LD_VAR 0 3
42991: PUSH
42992: LD_INT 9
42994: EQUAL
42995: IFFALSE 43005
// sHack := true ;
42997: LD_ADDR_EXP 111
43001: PUSH
43002: LD_INT 1
43004: ST_TO_ADDR
// if p3 = 10 then
43005: LD_VAR 0 3
43009: PUSH
43010: LD_INT 10
43012: EQUAL
43013: IFFALSE 43023
// sFire := true ;
43015: LD_ADDR_EXP 112
43019: PUSH
43020: LD_INT 1
43022: ST_TO_ADDR
// if p3 = 11 then
43023: LD_VAR 0 3
43027: PUSH
43028: LD_INT 11
43030: EQUAL
43031: IFFALSE 43041
// sRefresh := true ;
43033: LD_ADDR_EXP 113
43037: PUSH
43038: LD_INT 1
43040: ST_TO_ADDR
// if p3 = 12 then
43041: LD_VAR 0 3
43045: PUSH
43046: LD_INT 12
43048: EQUAL
43049: IFFALSE 43059
// sExp := true ;
43051: LD_ADDR_EXP 114
43055: PUSH
43056: LD_INT 1
43058: ST_TO_ADDR
// if p3 = 13 then
43059: LD_VAR 0 3
43063: PUSH
43064: LD_INT 13
43066: EQUAL
43067: IFFALSE 43077
// sDepot := true ;
43069: LD_ADDR_EXP 115
43073: PUSH
43074: LD_INT 1
43076: ST_TO_ADDR
// if p3 = 14 then
43077: LD_VAR 0 3
43081: PUSH
43082: LD_INT 14
43084: EQUAL
43085: IFFALSE 43095
// sFlag := true ;
43087: LD_ADDR_EXP 116
43091: PUSH
43092: LD_INT 1
43094: ST_TO_ADDR
// if p3 = 15 then
43095: LD_VAR 0 3
43099: PUSH
43100: LD_INT 15
43102: EQUAL
43103: IFFALSE 43113
// sKamikadze := true ;
43105: LD_ADDR_EXP 124
43109: PUSH
43110: LD_INT 1
43112: ST_TO_ADDR
// if p3 = 16 then
43113: LD_VAR 0 3
43117: PUSH
43118: LD_INT 16
43120: EQUAL
43121: IFFALSE 43131
// sTroll := true ;
43123: LD_ADDR_EXP 125
43127: PUSH
43128: LD_INT 1
43130: ST_TO_ADDR
// if p3 = 17 then
43131: LD_VAR 0 3
43135: PUSH
43136: LD_INT 17
43138: EQUAL
43139: IFFALSE 43149
// sSlow := true ;
43141: LD_ADDR_EXP 126
43145: PUSH
43146: LD_INT 1
43148: ST_TO_ADDR
// if p3 = 18 then
43149: LD_VAR 0 3
43153: PUSH
43154: LD_INT 18
43156: EQUAL
43157: IFFALSE 43167
// sLack := true ;
43159: LD_ADDR_EXP 127
43163: PUSH
43164: LD_INT 1
43166: ST_TO_ADDR
// if p3 = 19 then
43167: LD_VAR 0 3
43171: PUSH
43172: LD_INT 19
43174: EQUAL
43175: IFFALSE 43185
// sTank := true ;
43177: LD_ADDR_EXP 129
43181: PUSH
43182: LD_INT 1
43184: ST_TO_ADDR
// if p3 = 20 then
43185: LD_VAR 0 3
43189: PUSH
43190: LD_INT 20
43192: EQUAL
43193: IFFALSE 43203
// sRemote := true ;
43195: LD_ADDR_EXP 130
43199: PUSH
43200: LD_INT 1
43202: ST_TO_ADDR
// if p3 = 21 then
43203: LD_VAR 0 3
43207: PUSH
43208: LD_INT 21
43210: EQUAL
43211: IFFALSE 43221
// sPowell := true ;
43213: LD_ADDR_EXP 131
43217: PUSH
43218: LD_INT 1
43220: ST_TO_ADDR
// if p3 = 22 then
43221: LD_VAR 0 3
43225: PUSH
43226: LD_INT 22
43228: EQUAL
43229: IFFALSE 43239
// sTeleport := true ;
43231: LD_ADDR_EXP 134
43235: PUSH
43236: LD_INT 1
43238: ST_TO_ADDR
// if p3 = 23 then
43239: LD_VAR 0 3
43243: PUSH
43244: LD_INT 23
43246: EQUAL
43247: IFFALSE 43257
// sOilTower := true ;
43249: LD_ADDR_EXP 136
43253: PUSH
43254: LD_INT 1
43256: ST_TO_ADDR
// if p3 = 24 then
43257: LD_VAR 0 3
43261: PUSH
43262: LD_INT 24
43264: EQUAL
43265: IFFALSE 43275
// sShovel := true ;
43267: LD_ADDR_EXP 137
43271: PUSH
43272: LD_INT 1
43274: ST_TO_ADDR
// if p3 = 25 then
43275: LD_VAR 0 3
43279: PUSH
43280: LD_INT 25
43282: EQUAL
43283: IFFALSE 43293
// sSheik := true ;
43285: LD_ADDR_EXP 138
43289: PUSH
43290: LD_INT 1
43292: ST_TO_ADDR
// if p3 = 26 then
43293: LD_VAR 0 3
43297: PUSH
43298: LD_INT 26
43300: EQUAL
43301: IFFALSE 43311
// sEarthquake := true ;
43303: LD_ADDR_EXP 140
43307: PUSH
43308: LD_INT 1
43310: ST_TO_ADDR
// if p3 = 27 then
43311: LD_VAR 0 3
43315: PUSH
43316: LD_INT 27
43318: EQUAL
43319: IFFALSE 43329
// sAI := true ;
43321: LD_ADDR_EXP 141
43325: PUSH
43326: LD_INT 1
43328: ST_TO_ADDR
// if p3 = 28 then
43329: LD_VAR 0 3
43333: PUSH
43334: LD_INT 28
43336: EQUAL
43337: IFFALSE 43347
// sCargo := true ;
43339: LD_ADDR_EXP 144
43343: PUSH
43344: LD_INT 1
43346: ST_TO_ADDR
// if p3 = 29 then
43347: LD_VAR 0 3
43351: PUSH
43352: LD_INT 29
43354: EQUAL
43355: IFFALSE 43365
// sDLaser := true ;
43357: LD_ADDR_EXP 145
43361: PUSH
43362: LD_INT 1
43364: ST_TO_ADDR
// if p3 = 30 then
43365: LD_VAR 0 3
43369: PUSH
43370: LD_INT 30
43372: EQUAL
43373: IFFALSE 43383
// sExchange := true ;
43375: LD_ADDR_EXP 146
43379: PUSH
43380: LD_INT 1
43382: ST_TO_ADDR
// if p3 = 31 then
43383: LD_VAR 0 3
43387: PUSH
43388: LD_INT 31
43390: EQUAL
43391: IFFALSE 43401
// sFac := true ;
43393: LD_ADDR_EXP 147
43397: PUSH
43398: LD_INT 1
43400: ST_TO_ADDR
// if p3 = 32 then
43401: LD_VAR 0 3
43405: PUSH
43406: LD_INT 32
43408: EQUAL
43409: IFFALSE 43419
// sPower := true ;
43411: LD_ADDR_EXP 148
43415: PUSH
43416: LD_INT 1
43418: ST_TO_ADDR
// if p3 = 33 then
43419: LD_VAR 0 3
43423: PUSH
43424: LD_INT 33
43426: EQUAL
43427: IFFALSE 43437
// sRandom := true ;
43429: LD_ADDR_EXP 149
43433: PUSH
43434: LD_INT 1
43436: ST_TO_ADDR
// if p3 = 34 then
43437: LD_VAR 0 3
43441: PUSH
43442: LD_INT 34
43444: EQUAL
43445: IFFALSE 43455
// sShield := true ;
43447: LD_ADDR_EXP 150
43451: PUSH
43452: LD_INT 1
43454: ST_TO_ADDR
// if p3 = 35 then
43455: LD_VAR 0 3
43459: PUSH
43460: LD_INT 35
43462: EQUAL
43463: IFFALSE 43473
// sTime := true ;
43465: LD_ADDR_EXP 151
43469: PUSH
43470: LD_INT 1
43472: ST_TO_ADDR
// if p3 = 36 then
43473: LD_VAR 0 3
43477: PUSH
43478: LD_INT 36
43480: EQUAL
43481: IFFALSE 43491
// sTools := true ;
43483: LD_ADDR_EXP 152
43487: PUSH
43488: LD_INT 1
43490: ST_TO_ADDR
// if p3 = 101 then
43491: LD_VAR 0 3
43495: PUSH
43496: LD_INT 101
43498: EQUAL
43499: IFFALSE 43509
// sSold := true ;
43501: LD_ADDR_EXP 117
43505: PUSH
43506: LD_INT 1
43508: ST_TO_ADDR
// if p3 = 102 then
43509: LD_VAR 0 3
43513: PUSH
43514: LD_INT 102
43516: EQUAL
43517: IFFALSE 43527
// sDiff := true ;
43519: LD_ADDR_EXP 118
43523: PUSH
43524: LD_INT 1
43526: ST_TO_ADDR
// if p3 = 103 then
43527: LD_VAR 0 3
43531: PUSH
43532: LD_INT 103
43534: EQUAL
43535: IFFALSE 43545
// sFog := true ;
43537: LD_ADDR_EXP 121
43541: PUSH
43542: LD_INT 1
43544: ST_TO_ADDR
// if p3 = 104 then
43545: LD_VAR 0 3
43549: PUSH
43550: LD_INT 104
43552: EQUAL
43553: IFFALSE 43563
// sReset := true ;
43555: LD_ADDR_EXP 122
43559: PUSH
43560: LD_INT 1
43562: ST_TO_ADDR
// if p3 = 105 then
43563: LD_VAR 0 3
43567: PUSH
43568: LD_INT 105
43570: EQUAL
43571: IFFALSE 43581
// sSun := true ;
43573: LD_ADDR_EXP 123
43577: PUSH
43578: LD_INT 1
43580: ST_TO_ADDR
// if p3 = 106 then
43581: LD_VAR 0 3
43585: PUSH
43586: LD_INT 106
43588: EQUAL
43589: IFFALSE 43599
// sTiger := true ;
43591: LD_ADDR_EXP 119
43595: PUSH
43596: LD_INT 1
43598: ST_TO_ADDR
// if p3 = 107 then
43599: LD_VAR 0 3
43603: PUSH
43604: LD_INT 107
43606: EQUAL
43607: IFFALSE 43617
// sBomb := true ;
43609: LD_ADDR_EXP 120
43613: PUSH
43614: LD_INT 1
43616: ST_TO_ADDR
// if p3 = 108 then
43617: LD_VAR 0 3
43621: PUSH
43622: LD_INT 108
43624: EQUAL
43625: IFFALSE 43635
// sWound := true ;
43627: LD_ADDR_EXP 128
43631: PUSH
43632: LD_INT 1
43634: ST_TO_ADDR
// if p3 = 109 then
43635: LD_VAR 0 3
43639: PUSH
43640: LD_INT 109
43642: EQUAL
43643: IFFALSE 43653
// sBetray := true ;
43645: LD_ADDR_EXP 132
43649: PUSH
43650: LD_INT 1
43652: ST_TO_ADDR
// if p3 = 110 then
43653: LD_VAR 0 3
43657: PUSH
43658: LD_INT 110
43660: EQUAL
43661: IFFALSE 43671
// sContamin := true ;
43663: LD_ADDR_EXP 133
43667: PUSH
43668: LD_INT 1
43670: ST_TO_ADDR
// if p3 = 111 then
43671: LD_VAR 0 3
43675: PUSH
43676: LD_INT 111
43678: EQUAL
43679: IFFALSE 43689
// sOil := true ;
43681: LD_ADDR_EXP 135
43685: PUSH
43686: LD_INT 1
43688: ST_TO_ADDR
// if p3 = 112 then
43689: LD_VAR 0 3
43693: PUSH
43694: LD_INT 112
43696: EQUAL
43697: IFFALSE 43707
// sStu := true ;
43699: LD_ADDR_EXP 139
43703: PUSH
43704: LD_INT 1
43706: ST_TO_ADDR
// if p3 = 113 then
43707: LD_VAR 0 3
43711: PUSH
43712: LD_INT 113
43714: EQUAL
43715: IFFALSE 43725
// sBazooka := true ;
43717: LD_ADDR_EXP 142
43721: PUSH
43722: LD_INT 1
43724: ST_TO_ADDR
// if p3 = 114 then
43725: LD_VAR 0 3
43729: PUSH
43730: LD_INT 114
43732: EQUAL
43733: IFFALSE 43743
// sMortar := true ;
43735: LD_ADDR_EXP 143
43739: PUSH
43740: LD_INT 1
43742: ST_TO_ADDR
// if p3 = 115 then
43743: LD_VAR 0 3
43747: PUSH
43748: LD_INT 115
43750: EQUAL
43751: IFFALSE 43761
// sRanger := true ;
43753: LD_ADDR_EXP 153
43757: PUSH
43758: LD_INT 1
43760: ST_TO_ADDR
// if p3 = 116 then
43761: LD_VAR 0 3
43765: PUSH
43766: LD_INT 116
43768: EQUAL
43769: IFFALSE 43779
// sComputer := true ;
43771: LD_ADDR_EXP 154
43775: PUSH
43776: LD_INT 1
43778: ST_TO_ADDR
// if p3 = 117 then
43779: LD_VAR 0 3
43783: PUSH
43784: LD_INT 117
43786: EQUAL
43787: IFFALSE 43797
// s30 := true ;
43789: LD_ADDR_EXP 155
43793: PUSH
43794: LD_INT 1
43796: ST_TO_ADDR
// if p3 = 118 then
43797: LD_VAR 0 3
43801: PUSH
43802: LD_INT 118
43804: EQUAL
43805: IFFALSE 43815
// s60 := true ;
43807: LD_ADDR_EXP 156
43811: PUSH
43812: LD_INT 1
43814: ST_TO_ADDR
// end ; if p2 = 101 then
43815: LD_VAR 0 2
43819: PUSH
43820: LD_INT 101
43822: EQUAL
43823: IFFALSE 43951
// begin case p3 of 1 :
43825: LD_VAR 0 3
43829: PUSH
43830: LD_INT 1
43832: DOUBLE
43833: EQUAL
43834: IFTRUE 43838
43836: GO 43845
43838: POP
// hHackUnlimitedResources ; 2 :
43839: CALL 56049 0 0
43843: GO 43951
43845: LD_INT 2
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43853
43851: GO 43860
43853: POP
// hHackSetLevel10 ; 3 :
43854: CALL 56182 0 0
43858: GO 43951
43860: LD_INT 3
43862: DOUBLE
43863: EQUAL
43864: IFTRUE 43868
43866: GO 43875
43868: POP
// hHackSetLevel10YourUnits ; 4 :
43869: CALL 56267 0 0
43873: GO 43951
43875: LD_INT 4
43877: DOUBLE
43878: EQUAL
43879: IFTRUE 43883
43881: GO 43890
43883: POP
// hHackInvincible ; 5 :
43884: CALL 56715 0 0
43888: GO 43951
43890: LD_INT 5
43892: DOUBLE
43893: EQUAL
43894: IFTRUE 43898
43896: GO 43905
43898: POP
// hHackInvisible ; 6 :
43899: CALL 56826 0 0
43903: GO 43951
43905: LD_INT 6
43907: DOUBLE
43908: EQUAL
43909: IFTRUE 43913
43911: GO 43920
43913: POP
// hHackChangeYourSide ; 7 :
43914: CALL 56883 0 0
43918: GO 43951
43920: LD_INT 7
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43928
43926: GO 43935
43928: POP
// hHackChangeUnitSide ; 8 :
43929: CALL 56925 0 0
43933: GO 43951
43935: LD_INT 8
43937: DOUBLE
43938: EQUAL
43939: IFTRUE 43943
43941: GO 43950
43943: POP
// hHackFog ; end ;
43944: CALL 57026 0 0
43948: GO 43951
43950: POP
// end ; end ;
43951: LD_VAR 0 7
43955: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
43956: GO 43958
43958: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43959: LD_STRING initStreamRollete();
43961: PPUSH
43962: CALL_OW 559
// InitStreamMode ;
43966: CALL 43978 0 0
// DefineStreamItems ( false ) ;
43970: LD_INT 0
43972: PPUSH
43973: CALL 44442 0 1
// end ;
43977: END
// function InitStreamMode ; begin
43978: LD_INT 0
43980: PPUSH
// streamModeActive := false ;
43981: LD_ADDR_EXP 100
43985: PUSH
43986: LD_INT 0
43988: ST_TO_ADDR
// normalCounter := 36 ;
43989: LD_ADDR_EXP 101
43993: PUSH
43994: LD_INT 36
43996: ST_TO_ADDR
// hardcoreCounter := 18 ;
43997: LD_ADDR_EXP 102
44001: PUSH
44002: LD_INT 18
44004: ST_TO_ADDR
// sRocket := false ;
44005: LD_ADDR_EXP 105
44009: PUSH
44010: LD_INT 0
44012: ST_TO_ADDR
// sSpeed := false ;
44013: LD_ADDR_EXP 104
44017: PUSH
44018: LD_INT 0
44020: ST_TO_ADDR
// sEngine := false ;
44021: LD_ADDR_EXP 106
44025: PUSH
44026: LD_INT 0
44028: ST_TO_ADDR
// sSpec := false ;
44029: LD_ADDR_EXP 103
44033: PUSH
44034: LD_INT 0
44036: ST_TO_ADDR
// sLevel := false ;
44037: LD_ADDR_EXP 107
44041: PUSH
44042: LD_INT 0
44044: ST_TO_ADDR
// sArmoury := false ;
44045: LD_ADDR_EXP 108
44049: PUSH
44050: LD_INT 0
44052: ST_TO_ADDR
// sRadar := false ;
44053: LD_ADDR_EXP 109
44057: PUSH
44058: LD_INT 0
44060: ST_TO_ADDR
// sBunker := false ;
44061: LD_ADDR_EXP 110
44065: PUSH
44066: LD_INT 0
44068: ST_TO_ADDR
// sHack := false ;
44069: LD_ADDR_EXP 111
44073: PUSH
44074: LD_INT 0
44076: ST_TO_ADDR
// sFire := false ;
44077: LD_ADDR_EXP 112
44081: PUSH
44082: LD_INT 0
44084: ST_TO_ADDR
// sRefresh := false ;
44085: LD_ADDR_EXP 113
44089: PUSH
44090: LD_INT 0
44092: ST_TO_ADDR
// sExp := false ;
44093: LD_ADDR_EXP 114
44097: PUSH
44098: LD_INT 0
44100: ST_TO_ADDR
// sDepot := false ;
44101: LD_ADDR_EXP 115
44105: PUSH
44106: LD_INT 0
44108: ST_TO_ADDR
// sFlag := false ;
44109: LD_ADDR_EXP 116
44113: PUSH
44114: LD_INT 0
44116: ST_TO_ADDR
// sKamikadze := false ;
44117: LD_ADDR_EXP 124
44121: PUSH
44122: LD_INT 0
44124: ST_TO_ADDR
// sTroll := false ;
44125: LD_ADDR_EXP 125
44129: PUSH
44130: LD_INT 0
44132: ST_TO_ADDR
// sSlow := false ;
44133: LD_ADDR_EXP 126
44137: PUSH
44138: LD_INT 0
44140: ST_TO_ADDR
// sLack := false ;
44141: LD_ADDR_EXP 127
44145: PUSH
44146: LD_INT 0
44148: ST_TO_ADDR
// sTank := false ;
44149: LD_ADDR_EXP 129
44153: PUSH
44154: LD_INT 0
44156: ST_TO_ADDR
// sRemote := false ;
44157: LD_ADDR_EXP 130
44161: PUSH
44162: LD_INT 0
44164: ST_TO_ADDR
// sPowell := false ;
44165: LD_ADDR_EXP 131
44169: PUSH
44170: LD_INT 0
44172: ST_TO_ADDR
// sTeleport := false ;
44173: LD_ADDR_EXP 134
44177: PUSH
44178: LD_INT 0
44180: ST_TO_ADDR
// sOilTower := false ;
44181: LD_ADDR_EXP 136
44185: PUSH
44186: LD_INT 0
44188: ST_TO_ADDR
// sShovel := false ;
44189: LD_ADDR_EXP 137
44193: PUSH
44194: LD_INT 0
44196: ST_TO_ADDR
// sSheik := false ;
44197: LD_ADDR_EXP 138
44201: PUSH
44202: LD_INT 0
44204: ST_TO_ADDR
// sEarthquake := false ;
44205: LD_ADDR_EXP 140
44209: PUSH
44210: LD_INT 0
44212: ST_TO_ADDR
// sAI := false ;
44213: LD_ADDR_EXP 141
44217: PUSH
44218: LD_INT 0
44220: ST_TO_ADDR
// sCargo := false ;
44221: LD_ADDR_EXP 144
44225: PUSH
44226: LD_INT 0
44228: ST_TO_ADDR
// sDLaser := false ;
44229: LD_ADDR_EXP 145
44233: PUSH
44234: LD_INT 0
44236: ST_TO_ADDR
// sExchange := false ;
44237: LD_ADDR_EXP 146
44241: PUSH
44242: LD_INT 0
44244: ST_TO_ADDR
// sFac := false ;
44245: LD_ADDR_EXP 147
44249: PUSH
44250: LD_INT 0
44252: ST_TO_ADDR
// sPower := false ;
44253: LD_ADDR_EXP 148
44257: PUSH
44258: LD_INT 0
44260: ST_TO_ADDR
// sRandom := false ;
44261: LD_ADDR_EXP 149
44265: PUSH
44266: LD_INT 0
44268: ST_TO_ADDR
// sShield := false ;
44269: LD_ADDR_EXP 150
44273: PUSH
44274: LD_INT 0
44276: ST_TO_ADDR
// sTime := false ;
44277: LD_ADDR_EXP 151
44281: PUSH
44282: LD_INT 0
44284: ST_TO_ADDR
// sTools := false ;
44285: LD_ADDR_EXP 152
44289: PUSH
44290: LD_INT 0
44292: ST_TO_ADDR
// sSold := false ;
44293: LD_ADDR_EXP 117
44297: PUSH
44298: LD_INT 0
44300: ST_TO_ADDR
// sDiff := false ;
44301: LD_ADDR_EXP 118
44305: PUSH
44306: LD_INT 0
44308: ST_TO_ADDR
// sFog := false ;
44309: LD_ADDR_EXP 121
44313: PUSH
44314: LD_INT 0
44316: ST_TO_ADDR
// sReset := false ;
44317: LD_ADDR_EXP 122
44321: PUSH
44322: LD_INT 0
44324: ST_TO_ADDR
// sSun := false ;
44325: LD_ADDR_EXP 123
44329: PUSH
44330: LD_INT 0
44332: ST_TO_ADDR
// sTiger := false ;
44333: LD_ADDR_EXP 119
44337: PUSH
44338: LD_INT 0
44340: ST_TO_ADDR
// sBomb := false ;
44341: LD_ADDR_EXP 120
44345: PUSH
44346: LD_INT 0
44348: ST_TO_ADDR
// sWound := false ;
44349: LD_ADDR_EXP 128
44353: PUSH
44354: LD_INT 0
44356: ST_TO_ADDR
// sBetray := false ;
44357: LD_ADDR_EXP 132
44361: PUSH
44362: LD_INT 0
44364: ST_TO_ADDR
// sContamin := false ;
44365: LD_ADDR_EXP 133
44369: PUSH
44370: LD_INT 0
44372: ST_TO_ADDR
// sOil := false ;
44373: LD_ADDR_EXP 135
44377: PUSH
44378: LD_INT 0
44380: ST_TO_ADDR
// sStu := false ;
44381: LD_ADDR_EXP 139
44385: PUSH
44386: LD_INT 0
44388: ST_TO_ADDR
// sBazooka := false ;
44389: LD_ADDR_EXP 142
44393: PUSH
44394: LD_INT 0
44396: ST_TO_ADDR
// sMortar := false ;
44397: LD_ADDR_EXP 143
44401: PUSH
44402: LD_INT 0
44404: ST_TO_ADDR
// sRanger := false ;
44405: LD_ADDR_EXP 153
44409: PUSH
44410: LD_INT 0
44412: ST_TO_ADDR
// sComputer := false ;
44413: LD_ADDR_EXP 154
44417: PUSH
44418: LD_INT 0
44420: ST_TO_ADDR
// s30 := false ;
44421: LD_ADDR_EXP 155
44425: PUSH
44426: LD_INT 0
44428: ST_TO_ADDR
// s60 := false ;
44429: LD_ADDR_EXP 156
44433: PUSH
44434: LD_INT 0
44436: ST_TO_ADDR
// end ;
44437: LD_VAR 0 1
44441: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
44442: LD_INT 0
44444: PPUSH
44445: PPUSH
44446: PPUSH
44447: PPUSH
44448: PPUSH
44449: PPUSH
44450: PPUSH
// result := [ ] ;
44451: LD_ADDR_VAR 0 2
44455: PUSH
44456: EMPTY
44457: ST_TO_ADDR
// if campaign_id = 1 then
44458: LD_OWVAR 69
44462: PUSH
44463: LD_INT 1
44465: EQUAL
44466: IFFALSE 47632
// begin case mission_number of 1 :
44468: LD_OWVAR 70
44472: PUSH
44473: LD_INT 1
44475: DOUBLE
44476: EQUAL
44477: IFTRUE 44481
44479: GO 44557
44481: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
44482: LD_ADDR_VAR 0 2
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 4
44492: PUSH
44493: LD_INT 11
44495: PUSH
44496: LD_INT 12
44498: PUSH
44499: LD_INT 15
44501: PUSH
44502: LD_INT 16
44504: PUSH
44505: LD_INT 22
44507: PUSH
44508: LD_INT 23
44510: PUSH
44511: LD_INT 26
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 101
44527: PUSH
44528: LD_INT 102
44530: PUSH
44531: LD_INT 106
44533: PUSH
44534: LD_INT 116
44536: PUSH
44537: LD_INT 117
44539: PUSH
44540: LD_INT 118
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: ST_TO_ADDR
44555: GO 47630
44557: LD_INT 2
44559: DOUBLE
44560: EQUAL
44561: IFTRUE 44565
44563: GO 44649
44565: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
44566: LD_ADDR_VAR 0 2
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 4
44576: PUSH
44577: LD_INT 11
44579: PUSH
44580: LD_INT 12
44582: PUSH
44583: LD_INT 15
44585: PUSH
44586: LD_INT 16
44588: PUSH
44589: LD_INT 22
44591: PUSH
44592: LD_INT 23
44594: PUSH
44595: LD_INT 26
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 101
44611: PUSH
44612: LD_INT 102
44614: PUSH
44615: LD_INT 105
44617: PUSH
44618: LD_INT 106
44620: PUSH
44621: LD_INT 108
44623: PUSH
44624: LD_INT 116
44626: PUSH
44627: LD_INT 117
44629: PUSH
44630: LD_INT 118
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: ST_TO_ADDR
44647: GO 47630
44649: LD_INT 3
44651: DOUBLE
44652: EQUAL
44653: IFTRUE 44657
44655: GO 44745
44657: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
44658: LD_ADDR_VAR 0 2
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: LD_INT 5
44671: PUSH
44672: LD_INT 11
44674: PUSH
44675: LD_INT 12
44677: PUSH
44678: LD_INT 15
44680: PUSH
44681: LD_INT 16
44683: PUSH
44684: LD_INT 22
44686: PUSH
44687: LD_INT 26
44689: PUSH
44690: LD_INT 36
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 101
44707: PUSH
44708: LD_INT 102
44710: PUSH
44711: LD_INT 105
44713: PUSH
44714: LD_INT 106
44716: PUSH
44717: LD_INT 108
44719: PUSH
44720: LD_INT 116
44722: PUSH
44723: LD_INT 117
44725: PUSH
44726: LD_INT 118
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: ST_TO_ADDR
44743: GO 47630
44745: LD_INT 4
44747: DOUBLE
44748: EQUAL
44749: IFTRUE 44753
44751: GO 44849
44753: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
44754: LD_ADDR_VAR 0 2
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 4
44764: PUSH
44765: LD_INT 5
44767: PUSH
44768: LD_INT 8
44770: PUSH
44771: LD_INT 11
44773: PUSH
44774: LD_INT 12
44776: PUSH
44777: LD_INT 15
44779: PUSH
44780: LD_INT 16
44782: PUSH
44783: LD_INT 22
44785: PUSH
44786: LD_INT 23
44788: PUSH
44789: LD_INT 26
44791: PUSH
44792: LD_INT 36
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 101
44811: PUSH
44812: LD_INT 102
44814: PUSH
44815: LD_INT 105
44817: PUSH
44818: LD_INT 106
44820: PUSH
44821: LD_INT 108
44823: PUSH
44824: LD_INT 116
44826: PUSH
44827: LD_INT 117
44829: PUSH
44830: LD_INT 118
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: ST_TO_ADDR
44847: GO 47630
44849: LD_INT 5
44851: DOUBLE
44852: EQUAL
44853: IFTRUE 44857
44855: GO 44969
44857: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
44858: LD_ADDR_VAR 0 2
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 4
44868: PUSH
44869: LD_INT 5
44871: PUSH
44872: LD_INT 6
44874: PUSH
44875: LD_INT 8
44877: PUSH
44878: LD_INT 11
44880: PUSH
44881: LD_INT 12
44883: PUSH
44884: LD_INT 15
44886: PUSH
44887: LD_INT 16
44889: PUSH
44890: LD_INT 22
44892: PUSH
44893: LD_INT 23
44895: PUSH
44896: LD_INT 25
44898: PUSH
44899: LD_INT 26
44901: PUSH
44902: LD_INT 36
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 101
44923: PUSH
44924: LD_INT 102
44926: PUSH
44927: LD_INT 105
44929: PUSH
44930: LD_INT 106
44932: PUSH
44933: LD_INT 108
44935: PUSH
44936: LD_INT 109
44938: PUSH
44939: LD_INT 112
44941: PUSH
44942: LD_INT 116
44944: PUSH
44945: LD_INT 117
44947: PUSH
44948: LD_INT 118
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: ST_TO_ADDR
44967: GO 47630
44969: LD_INT 6
44971: DOUBLE
44972: EQUAL
44973: IFTRUE 44977
44975: GO 45109
44977: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
44978: LD_ADDR_VAR 0 2
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 4
44988: PUSH
44989: LD_INT 5
44991: PUSH
44992: LD_INT 6
44994: PUSH
44995: LD_INT 8
44997: PUSH
44998: LD_INT 11
45000: PUSH
45001: LD_INT 12
45003: PUSH
45004: LD_INT 15
45006: PUSH
45007: LD_INT 16
45009: PUSH
45010: LD_INT 20
45012: PUSH
45013: LD_INT 21
45015: PUSH
45016: LD_INT 22
45018: PUSH
45019: LD_INT 23
45021: PUSH
45022: LD_INT 25
45024: PUSH
45025: LD_INT 26
45027: PUSH
45028: LD_INT 30
45030: PUSH
45031: LD_INT 31
45033: PUSH
45034: LD_INT 32
45036: PUSH
45037: LD_INT 36
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 101
45063: PUSH
45064: LD_INT 102
45066: PUSH
45067: LD_INT 105
45069: PUSH
45070: LD_INT 106
45072: PUSH
45073: LD_INT 108
45075: PUSH
45076: LD_INT 109
45078: PUSH
45079: LD_INT 112
45081: PUSH
45082: LD_INT 116
45084: PUSH
45085: LD_INT 117
45087: PUSH
45088: LD_INT 118
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: ST_TO_ADDR
45107: GO 47630
45109: LD_INT 7
45111: DOUBLE
45112: EQUAL
45113: IFTRUE 45117
45115: GO 45229
45117: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
45118: LD_ADDR_VAR 0 2
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 4
45128: PUSH
45129: LD_INT 5
45131: PUSH
45132: LD_INT 7
45134: PUSH
45135: LD_INT 11
45137: PUSH
45138: LD_INT 12
45140: PUSH
45141: LD_INT 15
45143: PUSH
45144: LD_INT 16
45146: PUSH
45147: LD_INT 20
45149: PUSH
45150: LD_INT 21
45152: PUSH
45153: LD_INT 22
45155: PUSH
45156: LD_INT 23
45158: PUSH
45159: LD_INT 25
45161: PUSH
45162: LD_INT 26
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 101
45183: PUSH
45184: LD_INT 102
45186: PUSH
45187: LD_INT 103
45189: PUSH
45190: LD_INT 105
45192: PUSH
45193: LD_INT 106
45195: PUSH
45196: LD_INT 108
45198: PUSH
45199: LD_INT 112
45201: PUSH
45202: LD_INT 116
45204: PUSH
45205: LD_INT 117
45207: PUSH
45208: LD_INT 118
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: ST_TO_ADDR
45227: GO 47630
45229: LD_INT 8
45231: DOUBLE
45232: EQUAL
45233: IFTRUE 45237
45235: GO 45377
45237: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
45238: LD_ADDR_VAR 0 2
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 5
45251: PUSH
45252: LD_INT 6
45254: PUSH
45255: LD_INT 7
45257: PUSH
45258: LD_INT 8
45260: PUSH
45261: LD_INT 11
45263: PUSH
45264: LD_INT 12
45266: PUSH
45267: LD_INT 15
45269: PUSH
45270: LD_INT 16
45272: PUSH
45273: LD_INT 20
45275: PUSH
45276: LD_INT 21
45278: PUSH
45279: LD_INT 22
45281: PUSH
45282: LD_INT 23
45284: PUSH
45285: LD_INT 25
45287: PUSH
45288: LD_INT 26
45290: PUSH
45291: LD_INT 30
45293: PUSH
45294: LD_INT 31
45296: PUSH
45297: LD_INT 32
45299: PUSH
45300: LD_INT 36
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 101
45327: PUSH
45328: LD_INT 102
45330: PUSH
45331: LD_INT 103
45333: PUSH
45334: LD_INT 105
45336: PUSH
45337: LD_INT 106
45339: PUSH
45340: LD_INT 108
45342: PUSH
45343: LD_INT 109
45345: PUSH
45346: LD_INT 112
45348: PUSH
45349: LD_INT 116
45351: PUSH
45352: LD_INT 117
45354: PUSH
45355: LD_INT 118
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: ST_TO_ADDR
45375: GO 47630
45377: LD_INT 9
45379: DOUBLE
45380: EQUAL
45381: IFTRUE 45385
45383: GO 45533
45385: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
45386: LD_ADDR_VAR 0 2
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 4
45396: PUSH
45397: LD_INT 5
45399: PUSH
45400: LD_INT 6
45402: PUSH
45403: LD_INT 7
45405: PUSH
45406: LD_INT 8
45408: PUSH
45409: LD_INT 11
45411: PUSH
45412: LD_INT 12
45414: PUSH
45415: LD_INT 15
45417: PUSH
45418: LD_INT 16
45420: PUSH
45421: LD_INT 20
45423: PUSH
45424: LD_INT 21
45426: PUSH
45427: LD_INT 22
45429: PUSH
45430: LD_INT 23
45432: PUSH
45433: LD_INT 25
45435: PUSH
45436: LD_INT 26
45438: PUSH
45439: LD_INT 28
45441: PUSH
45442: LD_INT 30
45444: PUSH
45445: LD_INT 31
45447: PUSH
45448: LD_INT 32
45450: PUSH
45451: LD_INT 36
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 101
45479: PUSH
45480: LD_INT 102
45482: PUSH
45483: LD_INT 103
45485: PUSH
45486: LD_INT 105
45488: PUSH
45489: LD_INT 106
45491: PUSH
45492: LD_INT 108
45494: PUSH
45495: LD_INT 109
45497: PUSH
45498: LD_INT 112
45500: PUSH
45501: LD_INT 114
45503: PUSH
45504: LD_INT 116
45506: PUSH
45507: LD_INT 117
45509: PUSH
45510: LD_INT 118
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: ST_TO_ADDR
45531: GO 47630
45533: LD_INT 10
45535: DOUBLE
45536: EQUAL
45537: IFTRUE 45541
45539: GO 45737
45541: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
45542: LD_ADDR_VAR 0 2
45546: PUSH
45547: LD_INT 2
45549: PUSH
45550: LD_INT 4
45552: PUSH
45553: LD_INT 5
45555: PUSH
45556: LD_INT 6
45558: PUSH
45559: LD_INT 7
45561: PUSH
45562: LD_INT 8
45564: PUSH
45565: LD_INT 9
45567: PUSH
45568: LD_INT 10
45570: PUSH
45571: LD_INT 11
45573: PUSH
45574: LD_INT 12
45576: PUSH
45577: LD_INT 13
45579: PUSH
45580: LD_INT 14
45582: PUSH
45583: LD_INT 15
45585: PUSH
45586: LD_INT 16
45588: PUSH
45589: LD_INT 17
45591: PUSH
45592: LD_INT 18
45594: PUSH
45595: LD_INT 19
45597: PUSH
45598: LD_INT 20
45600: PUSH
45601: LD_INT 21
45603: PUSH
45604: LD_INT 22
45606: PUSH
45607: LD_INT 23
45609: PUSH
45610: LD_INT 24
45612: PUSH
45613: LD_INT 25
45615: PUSH
45616: LD_INT 26
45618: PUSH
45619: LD_INT 28
45621: PUSH
45622: LD_INT 30
45624: PUSH
45625: LD_INT 31
45627: PUSH
45628: LD_INT 32
45630: PUSH
45631: LD_INT 36
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 101
45667: PUSH
45668: LD_INT 102
45670: PUSH
45671: LD_INT 103
45673: PUSH
45674: LD_INT 104
45676: PUSH
45677: LD_INT 105
45679: PUSH
45680: LD_INT 106
45682: PUSH
45683: LD_INT 107
45685: PUSH
45686: LD_INT 108
45688: PUSH
45689: LD_INT 109
45691: PUSH
45692: LD_INT 110
45694: PUSH
45695: LD_INT 111
45697: PUSH
45698: LD_INT 112
45700: PUSH
45701: LD_INT 114
45703: PUSH
45704: LD_INT 116
45706: PUSH
45707: LD_INT 117
45709: PUSH
45710: LD_INT 118
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: ST_TO_ADDR
45735: GO 47630
45737: LD_INT 11
45739: DOUBLE
45740: EQUAL
45741: IFTRUE 45745
45743: GO 45949
45745: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
45746: LD_ADDR_VAR 0 2
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 3
45756: PUSH
45757: LD_INT 4
45759: PUSH
45760: LD_INT 5
45762: PUSH
45763: LD_INT 6
45765: PUSH
45766: LD_INT 7
45768: PUSH
45769: LD_INT 8
45771: PUSH
45772: LD_INT 9
45774: PUSH
45775: LD_INT 10
45777: PUSH
45778: LD_INT 11
45780: PUSH
45781: LD_INT 12
45783: PUSH
45784: LD_INT 13
45786: PUSH
45787: LD_INT 14
45789: PUSH
45790: LD_INT 15
45792: PUSH
45793: LD_INT 16
45795: PUSH
45796: LD_INT 17
45798: PUSH
45799: LD_INT 18
45801: PUSH
45802: LD_INT 19
45804: PUSH
45805: LD_INT 20
45807: PUSH
45808: LD_INT 21
45810: PUSH
45811: LD_INT 22
45813: PUSH
45814: LD_INT 23
45816: PUSH
45817: LD_INT 24
45819: PUSH
45820: LD_INT 25
45822: PUSH
45823: LD_INT 26
45825: PUSH
45826: LD_INT 28
45828: PUSH
45829: LD_INT 30
45831: PUSH
45832: LD_INT 31
45834: PUSH
45835: LD_INT 32
45837: PUSH
45838: LD_INT 34
45840: PUSH
45841: LD_INT 36
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 101
45879: PUSH
45880: LD_INT 102
45882: PUSH
45883: LD_INT 103
45885: PUSH
45886: LD_INT 104
45888: PUSH
45889: LD_INT 105
45891: PUSH
45892: LD_INT 106
45894: PUSH
45895: LD_INT 107
45897: PUSH
45898: LD_INT 108
45900: PUSH
45901: LD_INT 109
45903: PUSH
45904: LD_INT 110
45906: PUSH
45907: LD_INT 111
45909: PUSH
45910: LD_INT 112
45912: PUSH
45913: LD_INT 114
45915: PUSH
45916: LD_INT 116
45918: PUSH
45919: LD_INT 117
45921: PUSH
45922: LD_INT 118
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: ST_TO_ADDR
45947: GO 47630
45949: LD_INT 12
45951: DOUBLE
45952: EQUAL
45953: IFTRUE 45957
45955: GO 46177
45957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
45958: LD_ADDR_VAR 0 2
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 3
45971: PUSH
45972: LD_INT 4
45974: PUSH
45975: LD_INT 5
45977: PUSH
45978: LD_INT 6
45980: PUSH
45981: LD_INT 7
45983: PUSH
45984: LD_INT 8
45986: PUSH
45987: LD_INT 9
45989: PUSH
45990: LD_INT 10
45992: PUSH
45993: LD_INT 11
45995: PUSH
45996: LD_INT 12
45998: PUSH
45999: LD_INT 13
46001: PUSH
46002: LD_INT 14
46004: PUSH
46005: LD_INT 15
46007: PUSH
46008: LD_INT 16
46010: PUSH
46011: LD_INT 17
46013: PUSH
46014: LD_INT 18
46016: PUSH
46017: LD_INT 19
46019: PUSH
46020: LD_INT 20
46022: PUSH
46023: LD_INT 21
46025: PUSH
46026: LD_INT 22
46028: PUSH
46029: LD_INT 23
46031: PUSH
46032: LD_INT 24
46034: PUSH
46035: LD_INT 25
46037: PUSH
46038: LD_INT 26
46040: PUSH
46041: LD_INT 27
46043: PUSH
46044: LD_INT 28
46046: PUSH
46047: LD_INT 30
46049: PUSH
46050: LD_INT 31
46052: PUSH
46053: LD_INT 32
46055: PUSH
46056: LD_INT 33
46058: PUSH
46059: LD_INT 34
46061: PUSH
46062: LD_INT 36
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 101
46103: PUSH
46104: LD_INT 102
46106: PUSH
46107: LD_INT 103
46109: PUSH
46110: LD_INT 104
46112: PUSH
46113: LD_INT 105
46115: PUSH
46116: LD_INT 106
46118: PUSH
46119: LD_INT 107
46121: PUSH
46122: LD_INT 108
46124: PUSH
46125: LD_INT 109
46127: PUSH
46128: LD_INT 110
46130: PUSH
46131: LD_INT 111
46133: PUSH
46134: LD_INT 112
46136: PUSH
46137: LD_INT 113
46139: PUSH
46140: LD_INT 114
46142: PUSH
46143: LD_INT 116
46145: PUSH
46146: LD_INT 117
46148: PUSH
46149: LD_INT 118
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: ST_TO_ADDR
46175: GO 47630
46177: LD_INT 13
46179: DOUBLE
46180: EQUAL
46181: IFTRUE 46185
46183: GO 46393
46185: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
46186: LD_ADDR_VAR 0 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: LD_INT 3
46199: PUSH
46200: LD_INT 4
46202: PUSH
46203: LD_INT 5
46205: PUSH
46206: LD_INT 8
46208: PUSH
46209: LD_INT 9
46211: PUSH
46212: LD_INT 10
46214: PUSH
46215: LD_INT 11
46217: PUSH
46218: LD_INT 12
46220: PUSH
46221: LD_INT 14
46223: PUSH
46224: LD_INT 15
46226: PUSH
46227: LD_INT 16
46229: PUSH
46230: LD_INT 17
46232: PUSH
46233: LD_INT 18
46235: PUSH
46236: LD_INT 19
46238: PUSH
46239: LD_INT 20
46241: PUSH
46242: LD_INT 21
46244: PUSH
46245: LD_INT 22
46247: PUSH
46248: LD_INT 23
46250: PUSH
46251: LD_INT 24
46253: PUSH
46254: LD_INT 25
46256: PUSH
46257: LD_INT 26
46259: PUSH
46260: LD_INT 27
46262: PUSH
46263: LD_INT 28
46265: PUSH
46266: LD_INT 30
46268: PUSH
46269: LD_INT 31
46271: PUSH
46272: LD_INT 32
46274: PUSH
46275: LD_INT 33
46277: PUSH
46278: LD_INT 34
46280: PUSH
46281: LD_INT 36
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 101
46319: PUSH
46320: LD_INT 102
46322: PUSH
46323: LD_INT 103
46325: PUSH
46326: LD_INT 104
46328: PUSH
46329: LD_INT 105
46331: PUSH
46332: LD_INT 106
46334: PUSH
46335: LD_INT 107
46337: PUSH
46338: LD_INT 108
46340: PUSH
46341: LD_INT 109
46343: PUSH
46344: LD_INT 110
46346: PUSH
46347: LD_INT 111
46349: PUSH
46350: LD_INT 112
46352: PUSH
46353: LD_INT 113
46355: PUSH
46356: LD_INT 114
46358: PUSH
46359: LD_INT 116
46361: PUSH
46362: LD_INT 117
46364: PUSH
46365: LD_INT 118
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: ST_TO_ADDR
46391: GO 47630
46393: LD_INT 14
46395: DOUBLE
46396: EQUAL
46397: IFTRUE 46401
46399: GO 46625
46401: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
46402: LD_ADDR_VAR 0 2
46406: PUSH
46407: LD_INT 1
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: LD_INT 4
46418: PUSH
46419: LD_INT 5
46421: PUSH
46422: LD_INT 6
46424: PUSH
46425: LD_INT 7
46427: PUSH
46428: LD_INT 8
46430: PUSH
46431: LD_INT 9
46433: PUSH
46434: LD_INT 10
46436: PUSH
46437: LD_INT 11
46439: PUSH
46440: LD_INT 12
46442: PUSH
46443: LD_INT 13
46445: PUSH
46446: LD_INT 14
46448: PUSH
46449: LD_INT 15
46451: PUSH
46452: LD_INT 16
46454: PUSH
46455: LD_INT 17
46457: PUSH
46458: LD_INT 18
46460: PUSH
46461: LD_INT 19
46463: PUSH
46464: LD_INT 20
46466: PUSH
46467: LD_INT 21
46469: PUSH
46470: LD_INT 22
46472: PUSH
46473: LD_INT 23
46475: PUSH
46476: LD_INT 24
46478: PUSH
46479: LD_INT 25
46481: PUSH
46482: LD_INT 26
46484: PUSH
46485: LD_INT 27
46487: PUSH
46488: LD_INT 28
46490: PUSH
46491: LD_INT 29
46493: PUSH
46494: LD_INT 30
46496: PUSH
46497: LD_INT 31
46499: PUSH
46500: LD_INT 32
46502: PUSH
46503: LD_INT 33
46505: PUSH
46506: LD_INT 34
46508: PUSH
46509: LD_INT 36
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 101
46551: PUSH
46552: LD_INT 102
46554: PUSH
46555: LD_INT 103
46557: PUSH
46558: LD_INT 104
46560: PUSH
46561: LD_INT 105
46563: PUSH
46564: LD_INT 106
46566: PUSH
46567: LD_INT 107
46569: PUSH
46570: LD_INT 108
46572: PUSH
46573: LD_INT 109
46575: PUSH
46576: LD_INT 110
46578: PUSH
46579: LD_INT 111
46581: PUSH
46582: LD_INT 112
46584: PUSH
46585: LD_INT 113
46587: PUSH
46588: LD_INT 114
46590: PUSH
46591: LD_INT 116
46593: PUSH
46594: LD_INT 117
46596: PUSH
46597: LD_INT 118
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: ST_TO_ADDR
46623: GO 47630
46625: LD_INT 15
46627: DOUBLE
46628: EQUAL
46629: IFTRUE 46633
46631: GO 46857
46633: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
46634: LD_ADDR_VAR 0 2
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 2
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: LD_INT 5
46653: PUSH
46654: LD_INT 6
46656: PUSH
46657: LD_INT 7
46659: PUSH
46660: LD_INT 8
46662: PUSH
46663: LD_INT 9
46665: PUSH
46666: LD_INT 10
46668: PUSH
46669: LD_INT 11
46671: PUSH
46672: LD_INT 12
46674: PUSH
46675: LD_INT 13
46677: PUSH
46678: LD_INT 14
46680: PUSH
46681: LD_INT 15
46683: PUSH
46684: LD_INT 16
46686: PUSH
46687: LD_INT 17
46689: PUSH
46690: LD_INT 18
46692: PUSH
46693: LD_INT 19
46695: PUSH
46696: LD_INT 20
46698: PUSH
46699: LD_INT 21
46701: PUSH
46702: LD_INT 22
46704: PUSH
46705: LD_INT 23
46707: PUSH
46708: LD_INT 24
46710: PUSH
46711: LD_INT 25
46713: PUSH
46714: LD_INT 26
46716: PUSH
46717: LD_INT 27
46719: PUSH
46720: LD_INT 28
46722: PUSH
46723: LD_INT 29
46725: PUSH
46726: LD_INT 30
46728: PUSH
46729: LD_INT 31
46731: PUSH
46732: LD_INT 32
46734: PUSH
46735: LD_INT 33
46737: PUSH
46738: LD_INT 34
46740: PUSH
46741: LD_INT 36
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 101
46783: PUSH
46784: LD_INT 102
46786: PUSH
46787: LD_INT 103
46789: PUSH
46790: LD_INT 104
46792: PUSH
46793: LD_INT 105
46795: PUSH
46796: LD_INT 106
46798: PUSH
46799: LD_INT 107
46801: PUSH
46802: LD_INT 108
46804: PUSH
46805: LD_INT 109
46807: PUSH
46808: LD_INT 110
46810: PUSH
46811: LD_INT 111
46813: PUSH
46814: LD_INT 112
46816: PUSH
46817: LD_INT 113
46819: PUSH
46820: LD_INT 114
46822: PUSH
46823: LD_INT 116
46825: PUSH
46826: LD_INT 117
46828: PUSH
46829: LD_INT 118
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: ST_TO_ADDR
46855: GO 47630
46857: LD_INT 16
46859: DOUBLE
46860: EQUAL
46861: IFTRUE 46865
46863: GO 47001
46865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
46866: LD_ADDR_VAR 0 2
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: LD_INT 4
46876: PUSH
46877: LD_INT 5
46879: PUSH
46880: LD_INT 7
46882: PUSH
46883: LD_INT 11
46885: PUSH
46886: LD_INT 12
46888: PUSH
46889: LD_INT 15
46891: PUSH
46892: LD_INT 16
46894: PUSH
46895: LD_INT 20
46897: PUSH
46898: LD_INT 21
46900: PUSH
46901: LD_INT 22
46903: PUSH
46904: LD_INT 23
46906: PUSH
46907: LD_INT 25
46909: PUSH
46910: LD_INT 26
46912: PUSH
46913: LD_INT 30
46915: PUSH
46916: LD_INT 31
46918: PUSH
46919: LD_INT 32
46921: PUSH
46922: LD_INT 33
46924: PUSH
46925: LD_INT 34
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 101
46951: PUSH
46952: LD_INT 102
46954: PUSH
46955: LD_INT 103
46957: PUSH
46958: LD_INT 106
46960: PUSH
46961: LD_INT 108
46963: PUSH
46964: LD_INT 112
46966: PUSH
46967: LD_INT 113
46969: PUSH
46970: LD_INT 114
46972: PUSH
46973: LD_INT 116
46975: PUSH
46976: LD_INT 117
46978: PUSH
46979: LD_INT 118
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: ST_TO_ADDR
46999: GO 47630
47001: LD_INT 17
47003: DOUBLE
47004: EQUAL
47005: IFTRUE 47009
47007: GO 47233
47009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
47010: LD_ADDR_VAR 0 2
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: LD_INT 4
47026: PUSH
47027: LD_INT 5
47029: PUSH
47030: LD_INT 6
47032: PUSH
47033: LD_INT 7
47035: PUSH
47036: LD_INT 8
47038: PUSH
47039: LD_INT 9
47041: PUSH
47042: LD_INT 10
47044: PUSH
47045: LD_INT 11
47047: PUSH
47048: LD_INT 12
47050: PUSH
47051: LD_INT 13
47053: PUSH
47054: LD_INT 14
47056: PUSH
47057: LD_INT 15
47059: PUSH
47060: LD_INT 16
47062: PUSH
47063: LD_INT 17
47065: PUSH
47066: LD_INT 18
47068: PUSH
47069: LD_INT 19
47071: PUSH
47072: LD_INT 20
47074: PUSH
47075: LD_INT 21
47077: PUSH
47078: LD_INT 22
47080: PUSH
47081: LD_INT 23
47083: PUSH
47084: LD_INT 24
47086: PUSH
47087: LD_INT 25
47089: PUSH
47090: LD_INT 26
47092: PUSH
47093: LD_INT 27
47095: PUSH
47096: LD_INT 28
47098: PUSH
47099: LD_INT 29
47101: PUSH
47102: LD_INT 30
47104: PUSH
47105: LD_INT 31
47107: PUSH
47108: LD_INT 32
47110: PUSH
47111: LD_INT 33
47113: PUSH
47114: LD_INT 34
47116: PUSH
47117: LD_INT 36
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 101
47159: PUSH
47160: LD_INT 102
47162: PUSH
47163: LD_INT 103
47165: PUSH
47166: LD_INT 104
47168: PUSH
47169: LD_INT 105
47171: PUSH
47172: LD_INT 106
47174: PUSH
47175: LD_INT 107
47177: PUSH
47178: LD_INT 108
47180: PUSH
47181: LD_INT 109
47183: PUSH
47184: LD_INT 110
47186: PUSH
47187: LD_INT 111
47189: PUSH
47190: LD_INT 112
47192: PUSH
47193: LD_INT 113
47195: PUSH
47196: LD_INT 114
47198: PUSH
47199: LD_INT 116
47201: PUSH
47202: LD_INT 117
47204: PUSH
47205: LD_INT 118
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: ST_TO_ADDR
47231: GO 47630
47233: LD_INT 18
47235: DOUBLE
47236: EQUAL
47237: IFTRUE 47241
47239: GO 47389
47241: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
47242: LD_ADDR_VAR 0 2
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 4
47252: PUSH
47253: LD_INT 5
47255: PUSH
47256: LD_INT 7
47258: PUSH
47259: LD_INT 11
47261: PUSH
47262: LD_INT 12
47264: PUSH
47265: LD_INT 15
47267: PUSH
47268: LD_INT 16
47270: PUSH
47271: LD_INT 20
47273: PUSH
47274: LD_INT 21
47276: PUSH
47277: LD_INT 22
47279: PUSH
47280: LD_INT 23
47282: PUSH
47283: LD_INT 25
47285: PUSH
47286: LD_INT 26
47288: PUSH
47289: LD_INT 30
47291: PUSH
47292: LD_INT 31
47294: PUSH
47295: LD_INT 32
47297: PUSH
47298: LD_INT 33
47300: PUSH
47301: LD_INT 34
47303: PUSH
47304: LD_INT 35
47306: PUSH
47307: LD_INT 36
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 101
47335: PUSH
47336: LD_INT 102
47338: PUSH
47339: LD_INT 103
47341: PUSH
47342: LD_INT 106
47344: PUSH
47345: LD_INT 108
47347: PUSH
47348: LD_INT 112
47350: PUSH
47351: LD_INT 113
47353: PUSH
47354: LD_INT 114
47356: PUSH
47357: LD_INT 115
47359: PUSH
47360: LD_INT 116
47362: PUSH
47363: LD_INT 117
47365: PUSH
47366: LD_INT 118
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: ST_TO_ADDR
47387: GO 47630
47389: LD_INT 19
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47397
47395: GO 47629
47397: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
47398: LD_ADDR_VAR 0 2
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: LD_INT 2
47408: PUSH
47409: LD_INT 3
47411: PUSH
47412: LD_INT 4
47414: PUSH
47415: LD_INT 5
47417: PUSH
47418: LD_INT 6
47420: PUSH
47421: LD_INT 7
47423: PUSH
47424: LD_INT 8
47426: PUSH
47427: LD_INT 9
47429: PUSH
47430: LD_INT 10
47432: PUSH
47433: LD_INT 11
47435: PUSH
47436: LD_INT 12
47438: PUSH
47439: LD_INT 13
47441: PUSH
47442: LD_INT 14
47444: PUSH
47445: LD_INT 15
47447: PUSH
47448: LD_INT 16
47450: PUSH
47451: LD_INT 17
47453: PUSH
47454: LD_INT 18
47456: PUSH
47457: LD_INT 19
47459: PUSH
47460: LD_INT 20
47462: PUSH
47463: LD_INT 21
47465: PUSH
47466: LD_INT 22
47468: PUSH
47469: LD_INT 23
47471: PUSH
47472: LD_INT 24
47474: PUSH
47475: LD_INT 25
47477: PUSH
47478: LD_INT 26
47480: PUSH
47481: LD_INT 27
47483: PUSH
47484: LD_INT 28
47486: PUSH
47487: LD_INT 29
47489: PUSH
47490: LD_INT 30
47492: PUSH
47493: LD_INT 31
47495: PUSH
47496: LD_INT 32
47498: PUSH
47499: LD_INT 33
47501: PUSH
47502: LD_INT 34
47504: PUSH
47505: LD_INT 35
47507: PUSH
47508: LD_INT 36
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 101
47551: PUSH
47552: LD_INT 102
47554: PUSH
47555: LD_INT 103
47557: PUSH
47558: LD_INT 104
47560: PUSH
47561: LD_INT 105
47563: PUSH
47564: LD_INT 106
47566: PUSH
47567: LD_INT 107
47569: PUSH
47570: LD_INT 108
47572: PUSH
47573: LD_INT 109
47575: PUSH
47576: LD_INT 110
47578: PUSH
47579: LD_INT 111
47581: PUSH
47582: LD_INT 112
47584: PUSH
47585: LD_INT 113
47587: PUSH
47588: LD_INT 114
47590: PUSH
47591: LD_INT 115
47593: PUSH
47594: LD_INT 116
47596: PUSH
47597: LD_INT 117
47599: PUSH
47600: LD_INT 118
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: ST_TO_ADDR
47627: GO 47630
47629: POP
// end else
47630: GO 47861
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
47632: LD_ADDR_VAR 0 2
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: LD_INT 4
47648: PUSH
47649: LD_INT 5
47651: PUSH
47652: LD_INT 6
47654: PUSH
47655: LD_INT 7
47657: PUSH
47658: LD_INT 8
47660: PUSH
47661: LD_INT 9
47663: PUSH
47664: LD_INT 10
47666: PUSH
47667: LD_INT 11
47669: PUSH
47670: LD_INT 12
47672: PUSH
47673: LD_INT 13
47675: PUSH
47676: LD_INT 14
47678: PUSH
47679: LD_INT 15
47681: PUSH
47682: LD_INT 16
47684: PUSH
47685: LD_INT 17
47687: PUSH
47688: LD_INT 18
47690: PUSH
47691: LD_INT 19
47693: PUSH
47694: LD_INT 20
47696: PUSH
47697: LD_INT 21
47699: PUSH
47700: LD_INT 22
47702: PUSH
47703: LD_INT 23
47705: PUSH
47706: LD_INT 24
47708: PUSH
47709: LD_INT 25
47711: PUSH
47712: LD_INT 26
47714: PUSH
47715: LD_INT 27
47717: PUSH
47718: LD_INT 28
47720: PUSH
47721: LD_INT 29
47723: PUSH
47724: LD_INT 30
47726: PUSH
47727: LD_INT 31
47729: PUSH
47730: LD_INT 32
47732: PUSH
47733: LD_INT 33
47735: PUSH
47736: LD_INT 34
47738: PUSH
47739: LD_INT 35
47741: PUSH
47742: LD_INT 36
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 101
47785: PUSH
47786: LD_INT 102
47788: PUSH
47789: LD_INT 103
47791: PUSH
47792: LD_INT 104
47794: PUSH
47795: LD_INT 105
47797: PUSH
47798: LD_INT 106
47800: PUSH
47801: LD_INT 107
47803: PUSH
47804: LD_INT 108
47806: PUSH
47807: LD_INT 109
47809: PUSH
47810: LD_INT 110
47812: PUSH
47813: LD_INT 111
47815: PUSH
47816: LD_INT 112
47818: PUSH
47819: LD_INT 113
47821: PUSH
47822: LD_INT 114
47824: PUSH
47825: LD_INT 115
47827: PUSH
47828: LD_INT 116
47830: PUSH
47831: LD_INT 117
47833: PUSH
47834: LD_INT 118
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: ST_TO_ADDR
// if result then
47861: LD_VAR 0 2
47865: IFFALSE 48651
// begin normal :=  ;
47867: LD_ADDR_VAR 0 5
47871: PUSH
47872: LD_STRING 
47874: ST_TO_ADDR
// hardcore :=  ;
47875: LD_ADDR_VAR 0 6
47879: PUSH
47880: LD_STRING 
47882: ST_TO_ADDR
// active :=  ;
47883: LD_ADDR_VAR 0 7
47887: PUSH
47888: LD_STRING 
47890: ST_TO_ADDR
// for i = 1 to normalCounter do
47891: LD_ADDR_VAR 0 8
47895: PUSH
47896: DOUBLE
47897: LD_INT 1
47899: DEC
47900: ST_TO_ADDR
47901: LD_EXP 101
47905: PUSH
47906: FOR_TO
47907: IFFALSE 48008
// begin tmp := 0 ;
47909: LD_ADDR_VAR 0 3
47913: PUSH
47914: LD_STRING 0
47916: ST_TO_ADDR
// if result [ 1 ] then
47917: LD_VAR 0 2
47921: PUSH
47922: LD_INT 1
47924: ARRAY
47925: IFFALSE 47990
// if result [ 1 ] [ 1 ] = i then
47927: LD_VAR 0 2
47931: PUSH
47932: LD_INT 1
47934: ARRAY
47935: PUSH
47936: LD_INT 1
47938: ARRAY
47939: PUSH
47940: LD_VAR 0 8
47944: EQUAL
47945: IFFALSE 47990
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
47947: LD_ADDR_VAR 0 2
47951: PUSH
47952: LD_VAR 0 2
47956: PPUSH
47957: LD_INT 1
47959: PPUSH
47960: LD_VAR 0 2
47964: PUSH
47965: LD_INT 1
47967: ARRAY
47968: PPUSH
47969: LD_INT 1
47971: PPUSH
47972: CALL_OW 3
47976: PPUSH
47977: CALL_OW 1
47981: ST_TO_ADDR
// tmp := 1 ;
47982: LD_ADDR_VAR 0 3
47986: PUSH
47987: LD_STRING 1
47989: ST_TO_ADDR
// end ; normal := normal & tmp ;
47990: LD_ADDR_VAR 0 5
47994: PUSH
47995: LD_VAR 0 5
47999: PUSH
48000: LD_VAR 0 3
48004: STR
48005: ST_TO_ADDR
// end ;
48006: GO 47906
48008: POP
48009: POP
// for i = 1 to hardcoreCounter do
48010: LD_ADDR_VAR 0 8
48014: PUSH
48015: DOUBLE
48016: LD_INT 1
48018: DEC
48019: ST_TO_ADDR
48020: LD_EXP 102
48024: PUSH
48025: FOR_TO
48026: IFFALSE 48131
// begin tmp := 0 ;
48028: LD_ADDR_VAR 0 3
48032: PUSH
48033: LD_STRING 0
48035: ST_TO_ADDR
// if result [ 2 ] then
48036: LD_VAR 0 2
48040: PUSH
48041: LD_INT 2
48043: ARRAY
48044: IFFALSE 48113
// if result [ 2 ] [ 1 ] = 100 + i then
48046: LD_VAR 0 2
48050: PUSH
48051: LD_INT 2
48053: ARRAY
48054: PUSH
48055: LD_INT 1
48057: ARRAY
48058: PUSH
48059: LD_INT 100
48061: PUSH
48062: LD_VAR 0 8
48066: PLUS
48067: EQUAL
48068: IFFALSE 48113
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
48070: LD_ADDR_VAR 0 2
48074: PUSH
48075: LD_VAR 0 2
48079: PPUSH
48080: LD_INT 2
48082: PPUSH
48083: LD_VAR 0 2
48087: PUSH
48088: LD_INT 2
48090: ARRAY
48091: PPUSH
48092: LD_INT 1
48094: PPUSH
48095: CALL_OW 3
48099: PPUSH
48100: CALL_OW 1
48104: ST_TO_ADDR
// tmp := 1 ;
48105: LD_ADDR_VAR 0 3
48109: PUSH
48110: LD_STRING 1
48112: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
48113: LD_ADDR_VAR 0 6
48117: PUSH
48118: LD_VAR 0 6
48122: PUSH
48123: LD_VAR 0 3
48127: STR
48128: ST_TO_ADDR
// end ;
48129: GO 48025
48131: POP
48132: POP
// if isGameLoad then
48133: LD_VAR 0 1
48137: IFFALSE 48612
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
48139: LD_ADDR_VAR 0 4
48143: PUSH
48144: LD_EXP 105
48148: PUSH
48149: LD_EXP 104
48153: PUSH
48154: LD_EXP 106
48158: PUSH
48159: LD_EXP 103
48163: PUSH
48164: LD_EXP 107
48168: PUSH
48169: LD_EXP 108
48173: PUSH
48174: LD_EXP 109
48178: PUSH
48179: LD_EXP 110
48183: PUSH
48184: LD_EXP 111
48188: PUSH
48189: LD_EXP 112
48193: PUSH
48194: LD_EXP 113
48198: PUSH
48199: LD_EXP 114
48203: PUSH
48204: LD_EXP 115
48208: PUSH
48209: LD_EXP 116
48213: PUSH
48214: LD_EXP 124
48218: PUSH
48219: LD_EXP 125
48223: PUSH
48224: LD_EXP 126
48228: PUSH
48229: LD_EXP 127
48233: PUSH
48234: LD_EXP 129
48238: PUSH
48239: LD_EXP 130
48243: PUSH
48244: LD_EXP 131
48248: PUSH
48249: LD_EXP 134
48253: PUSH
48254: LD_EXP 136
48258: PUSH
48259: LD_EXP 137
48263: PUSH
48264: LD_EXP 138
48268: PUSH
48269: LD_EXP 140
48273: PUSH
48274: LD_EXP 141
48278: PUSH
48279: LD_EXP 144
48283: PUSH
48284: LD_EXP 145
48288: PUSH
48289: LD_EXP 146
48293: PUSH
48294: LD_EXP 147
48298: PUSH
48299: LD_EXP 148
48303: PUSH
48304: LD_EXP 149
48308: PUSH
48309: LD_EXP 150
48313: PUSH
48314: LD_EXP 151
48318: PUSH
48319: LD_EXP 152
48323: PUSH
48324: LD_EXP 117
48328: PUSH
48329: LD_EXP 118
48333: PUSH
48334: LD_EXP 121
48338: PUSH
48339: LD_EXP 122
48343: PUSH
48344: LD_EXP 123
48348: PUSH
48349: LD_EXP 119
48353: PUSH
48354: LD_EXP 120
48358: PUSH
48359: LD_EXP 128
48363: PUSH
48364: LD_EXP 132
48368: PUSH
48369: LD_EXP 133
48373: PUSH
48374: LD_EXP 135
48378: PUSH
48379: LD_EXP 139
48383: PUSH
48384: LD_EXP 142
48388: PUSH
48389: LD_EXP 143
48393: PUSH
48394: LD_EXP 153
48398: PUSH
48399: LD_EXP 154
48403: PUSH
48404: LD_EXP 155
48408: PUSH
48409: LD_EXP 156
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: ST_TO_ADDR
// tmp :=  ;
48470: LD_ADDR_VAR 0 3
48474: PUSH
48475: LD_STRING 
48477: ST_TO_ADDR
// for i = 1 to normalCounter do
48478: LD_ADDR_VAR 0 8
48482: PUSH
48483: DOUBLE
48484: LD_INT 1
48486: DEC
48487: ST_TO_ADDR
48488: LD_EXP 101
48492: PUSH
48493: FOR_TO
48494: IFFALSE 48530
// begin if flags [ i ] then
48496: LD_VAR 0 4
48500: PUSH
48501: LD_VAR 0 8
48505: ARRAY
48506: IFFALSE 48528
// tmp := tmp & i & ; ;
48508: LD_ADDR_VAR 0 3
48512: PUSH
48513: LD_VAR 0 3
48517: PUSH
48518: LD_VAR 0 8
48522: STR
48523: PUSH
48524: LD_STRING ;
48526: STR
48527: ST_TO_ADDR
// end ;
48528: GO 48493
48530: POP
48531: POP
// for i = 1 to hardcoreCounter do
48532: LD_ADDR_VAR 0 8
48536: PUSH
48537: DOUBLE
48538: LD_INT 1
48540: DEC
48541: ST_TO_ADDR
48542: LD_EXP 102
48546: PUSH
48547: FOR_TO
48548: IFFALSE 48594
// begin if flags [ normalCounter + i ] then
48550: LD_VAR 0 4
48554: PUSH
48555: LD_EXP 101
48559: PUSH
48560: LD_VAR 0 8
48564: PLUS
48565: ARRAY
48566: IFFALSE 48592
// tmp := tmp & ( 100 + i ) & ; ;
48568: LD_ADDR_VAR 0 3
48572: PUSH
48573: LD_VAR 0 3
48577: PUSH
48578: LD_INT 100
48580: PUSH
48581: LD_VAR 0 8
48585: PLUS
48586: STR
48587: PUSH
48588: LD_STRING ;
48590: STR
48591: ST_TO_ADDR
// end ;
48592: GO 48547
48594: POP
48595: POP
// if tmp then
48596: LD_VAR 0 3
48600: IFFALSE 48612
// active := tmp ;
48602: LD_ADDR_VAR 0 7
48606: PUSH
48607: LD_VAR 0 3
48611: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
48612: LD_STRING getStreamItemsFromMission("
48614: PUSH
48615: LD_VAR 0 5
48619: STR
48620: PUSH
48621: LD_STRING ","
48623: STR
48624: PUSH
48625: LD_VAR 0 6
48629: STR
48630: PUSH
48631: LD_STRING ","
48633: STR
48634: PUSH
48635: LD_VAR 0 7
48639: STR
48640: PUSH
48641: LD_STRING ")
48643: STR
48644: PPUSH
48645: CALL_OW 559
// end else
48649: GO 48658
// ToLua ( getStreamItemsFromMission("","","") ) ;
48651: LD_STRING getStreamItemsFromMission("","","")
48653: PPUSH
48654: CALL_OW 559
// end ;
48658: LD_VAR 0 2
48662: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
48663: LD_EXP 100
48667: PUSH
48668: LD_EXP 105
48672: AND
48673: IFFALSE 48797
48675: GO 48677
48677: DISABLE
48678: LD_INT 0
48680: PPUSH
48681: PPUSH
// begin enable ;
48682: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
48683: LD_ADDR_VAR 0 2
48687: PUSH
48688: LD_INT 22
48690: PUSH
48691: LD_OWVAR 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 34
48705: PUSH
48706: LD_INT 7
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 34
48715: PUSH
48716: LD_INT 45
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 34
48725: PUSH
48726: LD_INT 28
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 34
48735: PUSH
48736: LD_INT 47
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PPUSH
48754: CALL_OW 69
48758: ST_TO_ADDR
// if not tmp then
48759: LD_VAR 0 2
48763: NOT
48764: IFFALSE 48768
// exit ;
48766: GO 48797
// for i in tmp do
48768: LD_ADDR_VAR 0 1
48772: PUSH
48773: LD_VAR 0 2
48777: PUSH
48778: FOR_IN
48779: IFFALSE 48795
// begin SetLives ( i , 0 ) ;
48781: LD_VAR 0 1
48785: PPUSH
48786: LD_INT 0
48788: PPUSH
48789: CALL_OW 234
// end ;
48793: GO 48778
48795: POP
48796: POP
// end ;
48797: PPOPN 2
48799: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
48800: LD_EXP 100
48804: PUSH
48805: LD_EXP 106
48809: AND
48810: IFFALSE 48894
48812: GO 48814
48814: DISABLE
48815: LD_INT 0
48817: PPUSH
48818: PPUSH
// begin enable ;
48819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
48820: LD_ADDR_VAR 0 2
48824: PUSH
48825: LD_INT 22
48827: PUSH
48828: LD_OWVAR 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 32
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PPUSH
48851: CALL_OW 69
48855: ST_TO_ADDR
// if not tmp then
48856: LD_VAR 0 2
48860: NOT
48861: IFFALSE 48865
// exit ;
48863: GO 48894
// for i in tmp do
48865: LD_ADDR_VAR 0 1
48869: PUSH
48870: LD_VAR 0 2
48874: PUSH
48875: FOR_IN
48876: IFFALSE 48892
// begin SetLives ( i , 0 ) ;
48878: LD_VAR 0 1
48882: PPUSH
48883: LD_INT 0
48885: PPUSH
48886: CALL_OW 234
// end ;
48890: GO 48875
48892: POP
48893: POP
// end ;
48894: PPOPN 2
48896: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
48897: LD_EXP 100
48901: PUSH
48902: LD_EXP 103
48906: AND
48907: IFFALSE 49000
48909: GO 48911
48911: DISABLE
48912: LD_INT 0
48914: PPUSH
// begin enable ;
48915: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
48916: LD_ADDR_VAR 0 1
48920: PUSH
48921: LD_INT 22
48923: PUSH
48924: LD_OWVAR 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 25
48938: PUSH
48939: LD_INT 5
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 25
48948: PUSH
48949: LD_INT 9
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 25
48958: PUSH
48959: LD_INT 8
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PPUSH
48976: CALL_OW 69
48980: PUSH
48981: FOR_IN
48982: IFFALSE 48998
// begin SetClass ( i , 1 ) ;
48984: LD_VAR 0 1
48988: PPUSH
48989: LD_INT 1
48991: PPUSH
48992: CALL_OW 336
// end ;
48996: GO 48981
48998: POP
48999: POP
// end ;
49000: PPOPN 1
49002: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
49003: LD_EXP 100
49007: PUSH
49008: LD_EXP 104
49012: AND
49013: PUSH
49014: LD_OWVAR 65
49018: PUSH
49019: LD_INT 7
49021: LESS
49022: AND
49023: IFFALSE 49037
49025: GO 49027
49027: DISABLE
// begin enable ;
49028: ENABLE
// game_speed := 7 ;
49029: LD_ADDR_OWVAR 65
49033: PUSH
49034: LD_INT 7
49036: ST_TO_ADDR
// end ;
49037: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
49038: LD_EXP 100
49042: PUSH
49043: LD_EXP 107
49047: AND
49048: IFFALSE 49250
49050: GO 49052
49052: DISABLE
49053: LD_INT 0
49055: PPUSH
49056: PPUSH
49057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
49058: LD_ADDR_VAR 0 3
49062: PUSH
49063: LD_INT 81
49065: PUSH
49066: LD_OWVAR 2
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 21
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PPUSH
49089: CALL_OW 69
49093: ST_TO_ADDR
// if not tmp then
49094: LD_VAR 0 3
49098: NOT
49099: IFFALSE 49103
// exit ;
49101: GO 49250
// if tmp > 5 then
49103: LD_VAR 0 3
49107: PUSH
49108: LD_INT 5
49110: GREATER
49111: IFFALSE 49123
// k := 5 else
49113: LD_ADDR_VAR 0 2
49117: PUSH
49118: LD_INT 5
49120: ST_TO_ADDR
49121: GO 49133
// k := tmp ;
49123: LD_ADDR_VAR 0 2
49127: PUSH
49128: LD_VAR 0 3
49132: ST_TO_ADDR
// for i := 1 to k do
49133: LD_ADDR_VAR 0 1
49137: PUSH
49138: DOUBLE
49139: LD_INT 1
49141: DEC
49142: ST_TO_ADDR
49143: LD_VAR 0 2
49147: PUSH
49148: FOR_TO
49149: IFFALSE 49248
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
49151: LD_VAR 0 3
49155: PUSH
49156: LD_VAR 0 1
49160: ARRAY
49161: PPUSH
49162: LD_VAR 0 1
49166: PUSH
49167: LD_INT 4
49169: MOD
49170: PUSH
49171: LD_INT 1
49173: PLUS
49174: PPUSH
49175: CALL_OW 259
49179: PUSH
49180: LD_INT 10
49182: LESS
49183: IFFALSE 49246
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
49185: LD_VAR 0 3
49189: PUSH
49190: LD_VAR 0 1
49194: ARRAY
49195: PPUSH
49196: LD_VAR 0 1
49200: PUSH
49201: LD_INT 4
49203: MOD
49204: PUSH
49205: LD_INT 1
49207: PLUS
49208: PPUSH
49209: LD_VAR 0 3
49213: PUSH
49214: LD_VAR 0 1
49218: ARRAY
49219: PPUSH
49220: LD_VAR 0 1
49224: PUSH
49225: LD_INT 4
49227: MOD
49228: PUSH
49229: LD_INT 1
49231: PLUS
49232: PPUSH
49233: CALL_OW 259
49237: PUSH
49238: LD_INT 1
49240: PLUS
49241: PPUSH
49242: CALL_OW 237
49246: GO 49148
49248: POP
49249: POP
// end ;
49250: PPOPN 3
49252: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
49253: LD_EXP 100
49257: PUSH
49258: LD_EXP 108
49262: AND
49263: IFFALSE 49283
49265: GO 49267
49267: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
49268: LD_INT 4
49270: PPUSH
49271: LD_OWVAR 2
49275: PPUSH
49276: LD_INT 0
49278: PPUSH
49279: CALL_OW 324
49283: END
// every 0 0$1 trigger StreamModeActive and sShovel do
49284: LD_EXP 100
49288: PUSH
49289: LD_EXP 137
49293: AND
49294: IFFALSE 49314
49296: GO 49298
49298: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
49299: LD_INT 19
49301: PPUSH
49302: LD_OWVAR 2
49306: PPUSH
49307: LD_INT 0
49309: PPUSH
49310: CALL_OW 324
49314: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
49315: LD_EXP 100
49319: PUSH
49320: LD_EXP 109
49324: AND
49325: IFFALSE 49427
49327: GO 49329
49329: DISABLE
49330: LD_INT 0
49332: PPUSH
49333: PPUSH
// begin enable ;
49334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
49335: LD_ADDR_VAR 0 2
49339: PUSH
49340: LD_INT 22
49342: PUSH
49343: LD_OWVAR 2
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 34
49357: PUSH
49358: LD_INT 11
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 34
49367: PUSH
49368: LD_INT 30
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PPUSH
49384: CALL_OW 69
49388: ST_TO_ADDR
// if not tmp then
49389: LD_VAR 0 2
49393: NOT
49394: IFFALSE 49398
// exit ;
49396: GO 49427
// for i in tmp do
49398: LD_ADDR_VAR 0 1
49402: PUSH
49403: LD_VAR 0 2
49407: PUSH
49408: FOR_IN
49409: IFFALSE 49425
// begin SetLives ( i , 0 ) ;
49411: LD_VAR 0 1
49415: PPUSH
49416: LD_INT 0
49418: PPUSH
49419: CALL_OW 234
// end ;
49423: GO 49408
49425: POP
49426: POP
// end ;
49427: PPOPN 2
49429: END
// every 0 0$1 trigger StreamModeActive and sBunker do
49430: LD_EXP 100
49434: PUSH
49435: LD_EXP 110
49439: AND
49440: IFFALSE 49460
49442: GO 49444
49444: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
49445: LD_INT 32
49447: PPUSH
49448: LD_OWVAR 2
49452: PPUSH
49453: LD_INT 0
49455: PPUSH
49456: CALL_OW 324
49460: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
49461: LD_EXP 100
49465: PUSH
49466: LD_EXP 111
49470: AND
49471: IFFALSE 49652
49473: GO 49475
49475: DISABLE
49476: LD_INT 0
49478: PPUSH
49479: PPUSH
49480: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
49481: LD_ADDR_VAR 0 2
49485: PUSH
49486: LD_INT 22
49488: PUSH
49489: LD_OWVAR 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 33
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PPUSH
49512: CALL_OW 69
49516: ST_TO_ADDR
// if not tmp then
49517: LD_VAR 0 2
49521: NOT
49522: IFFALSE 49526
// exit ;
49524: GO 49652
// side := 0 ;
49526: LD_ADDR_VAR 0 3
49530: PUSH
49531: LD_INT 0
49533: ST_TO_ADDR
// for i := 1 to 8 do
49534: LD_ADDR_VAR 0 1
49538: PUSH
49539: DOUBLE
49540: LD_INT 1
49542: DEC
49543: ST_TO_ADDR
49544: LD_INT 8
49546: PUSH
49547: FOR_TO
49548: IFFALSE 49596
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
49550: LD_OWVAR 2
49554: PUSH
49555: LD_VAR 0 1
49559: NONEQUAL
49560: PUSH
49561: LD_OWVAR 2
49565: PPUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: CALL_OW 81
49575: PUSH
49576: LD_INT 2
49578: EQUAL
49579: AND
49580: IFFALSE 49594
// begin side := i ;
49582: LD_ADDR_VAR 0 3
49586: PUSH
49587: LD_VAR 0 1
49591: ST_TO_ADDR
// break ;
49592: GO 49596
// end ;
49594: GO 49547
49596: POP
49597: POP
// if not side then
49598: LD_VAR 0 3
49602: NOT
49603: IFFALSE 49607
// exit ;
49605: GO 49652
// for i := 1 to tmp do
49607: LD_ADDR_VAR 0 1
49611: PUSH
49612: DOUBLE
49613: LD_INT 1
49615: DEC
49616: ST_TO_ADDR
49617: LD_VAR 0 2
49621: PUSH
49622: FOR_TO
49623: IFFALSE 49650
// if Prob ( 60 ) then
49625: LD_INT 60
49627: PPUSH
49628: CALL_OW 13
49632: IFFALSE 49648
// SetSide ( i , side ) ;
49634: LD_VAR 0 1
49638: PPUSH
49639: LD_VAR 0 3
49643: PPUSH
49644: CALL_OW 235
49648: GO 49622
49650: POP
49651: POP
// end ;
49652: PPOPN 3
49654: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
49655: LD_EXP 100
49659: PUSH
49660: LD_EXP 113
49664: AND
49665: IFFALSE 49784
49667: GO 49669
49669: DISABLE
49670: LD_INT 0
49672: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
49673: LD_ADDR_VAR 0 1
49677: PUSH
49678: LD_INT 22
49680: PUSH
49681: LD_OWVAR 2
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 21
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: LD_INT 23
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: PPUSH
49722: CALL_OW 69
49726: PUSH
49727: FOR_IN
49728: IFFALSE 49782
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
49730: LD_VAR 0 1
49734: PPUSH
49735: CALL_OW 257
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: LD_INT 4
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: IN
49758: IFFALSE 49780
// SetClass ( un , rand ( 1 , 4 ) ) ;
49760: LD_VAR 0 1
49764: PPUSH
49765: LD_INT 1
49767: PPUSH
49768: LD_INT 4
49770: PPUSH
49771: CALL_OW 12
49775: PPUSH
49776: CALL_OW 336
49780: GO 49727
49782: POP
49783: POP
// end ;
49784: PPOPN 1
49786: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
49787: LD_EXP 100
49791: PUSH
49792: LD_EXP 112
49796: AND
49797: IFFALSE 49876
49799: GO 49801
49801: DISABLE
49802: LD_INT 0
49804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49805: LD_ADDR_VAR 0 1
49809: PUSH
49810: LD_INT 22
49812: PUSH
49813: LD_OWVAR 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 21
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PPUSH
49836: CALL_OW 69
49840: ST_TO_ADDR
// if not tmp then
49841: LD_VAR 0 1
49845: NOT
49846: IFFALSE 49850
// exit ;
49848: GO 49876
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
49850: LD_VAR 0 1
49854: PUSH
49855: LD_INT 1
49857: PPUSH
49858: LD_VAR 0 1
49862: PPUSH
49863: CALL_OW 12
49867: ARRAY
49868: PPUSH
49869: LD_INT 100
49871: PPUSH
49872: CALL_OW 234
// end ;
49876: PPOPN 1
49878: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
49879: LD_EXP 100
49883: PUSH
49884: LD_EXP 114
49888: AND
49889: IFFALSE 49987
49891: GO 49893
49893: DISABLE
49894: LD_INT 0
49896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49897: LD_ADDR_VAR 0 1
49901: PUSH
49902: LD_INT 22
49904: PUSH
49905: LD_OWVAR 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 21
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PPUSH
49928: CALL_OW 69
49932: ST_TO_ADDR
// if not tmp then
49933: LD_VAR 0 1
49937: NOT
49938: IFFALSE 49942
// exit ;
49940: GO 49987
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
49942: LD_VAR 0 1
49946: PUSH
49947: LD_INT 1
49949: PPUSH
49950: LD_VAR 0 1
49954: PPUSH
49955: CALL_OW 12
49959: ARRAY
49960: PPUSH
49961: LD_INT 1
49963: PPUSH
49964: LD_INT 4
49966: PPUSH
49967: CALL_OW 12
49971: PPUSH
49972: LD_INT 3000
49974: PPUSH
49975: LD_INT 9000
49977: PPUSH
49978: CALL_OW 12
49982: PPUSH
49983: CALL_OW 492
// end ;
49987: PPOPN 1
49989: END
// every 0 0$1 trigger StreamModeActive and sDepot do
49990: LD_EXP 100
49994: PUSH
49995: LD_EXP 115
49999: AND
50000: IFFALSE 50020
50002: GO 50004
50004: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
50005: LD_INT 1
50007: PPUSH
50008: LD_OWVAR 2
50012: PPUSH
50013: LD_INT 0
50015: PPUSH
50016: CALL_OW 324
50020: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
50021: LD_EXP 100
50025: PUSH
50026: LD_EXP 116
50030: AND
50031: IFFALSE 50114
50033: GO 50035
50035: DISABLE
50036: LD_INT 0
50038: PPUSH
50039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
50040: LD_ADDR_VAR 0 2
50044: PUSH
50045: LD_INT 22
50047: PUSH
50048: LD_OWVAR 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 21
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PPUSH
50071: CALL_OW 69
50075: ST_TO_ADDR
// if not tmp then
50076: LD_VAR 0 2
50080: NOT
50081: IFFALSE 50085
// exit ;
50083: GO 50114
// for i in tmp do
50085: LD_ADDR_VAR 0 1
50089: PUSH
50090: LD_VAR 0 2
50094: PUSH
50095: FOR_IN
50096: IFFALSE 50112
// SetBLevel ( i , 10 ) ;
50098: LD_VAR 0 1
50102: PPUSH
50103: LD_INT 10
50105: PPUSH
50106: CALL_OW 241
50110: GO 50095
50112: POP
50113: POP
// end ;
50114: PPOPN 2
50116: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
50117: LD_EXP 100
50121: PUSH
50122: LD_EXP 117
50126: AND
50127: IFFALSE 50238
50129: GO 50131
50131: DISABLE
50132: LD_INT 0
50134: PPUSH
50135: PPUSH
50136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
50137: LD_ADDR_VAR 0 3
50141: PUSH
50142: LD_INT 22
50144: PUSH
50145: LD_OWVAR 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 25
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PPUSH
50168: CALL_OW 69
50172: ST_TO_ADDR
// if not tmp then
50173: LD_VAR 0 3
50177: NOT
50178: IFFALSE 50182
// exit ;
50180: GO 50238
// un := tmp [ rand ( 1 , tmp ) ] ;
50182: LD_ADDR_VAR 0 2
50186: PUSH
50187: LD_VAR 0 3
50191: PUSH
50192: LD_INT 1
50194: PPUSH
50195: LD_VAR 0 3
50199: PPUSH
50200: CALL_OW 12
50204: ARRAY
50205: ST_TO_ADDR
// if Crawls ( un ) then
50206: LD_VAR 0 2
50210: PPUSH
50211: CALL_OW 318
50215: IFFALSE 50226
// ComWalk ( un ) ;
50217: LD_VAR 0 2
50221: PPUSH
50222: CALL_OW 138
// SetClass ( un , class_sniper ) ;
50226: LD_VAR 0 2
50230: PPUSH
50231: LD_INT 5
50233: PPUSH
50234: CALL_OW 336
// end ;
50238: PPOPN 3
50240: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
50241: LD_EXP 100
50245: PUSH
50246: LD_EXP 118
50250: AND
50251: PUSH
50252: LD_OWVAR 67
50256: PUSH
50257: LD_INT 4
50259: LESS
50260: AND
50261: IFFALSE 50280
50263: GO 50265
50265: DISABLE
// begin Difficulty := Difficulty + 1 ;
50266: LD_ADDR_OWVAR 67
50270: PUSH
50271: LD_OWVAR 67
50275: PUSH
50276: LD_INT 1
50278: PLUS
50279: ST_TO_ADDR
// end ;
50280: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
50281: LD_EXP 100
50285: PUSH
50286: LD_EXP 119
50290: AND
50291: IFFALSE 50394
50293: GO 50295
50295: DISABLE
50296: LD_INT 0
50298: PPUSH
// begin for i := 1 to 5 do
50299: LD_ADDR_VAR 0 1
50303: PUSH
50304: DOUBLE
50305: LD_INT 1
50307: DEC
50308: ST_TO_ADDR
50309: LD_INT 5
50311: PUSH
50312: FOR_TO
50313: IFFALSE 50392
// begin uc_nation := nation_nature ;
50315: LD_ADDR_OWVAR 21
50319: PUSH
50320: LD_INT 0
50322: ST_TO_ADDR
// uc_side := 0 ;
50323: LD_ADDR_OWVAR 20
50327: PUSH
50328: LD_INT 0
50330: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50331: LD_ADDR_OWVAR 29
50335: PUSH
50336: LD_INT 12
50338: PUSH
50339: LD_INT 12
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: ST_TO_ADDR
// hc_agressivity := 20 ;
50346: LD_ADDR_OWVAR 35
50350: PUSH
50351: LD_INT 20
50353: ST_TO_ADDR
// hc_class := class_tiger ;
50354: LD_ADDR_OWVAR 28
50358: PUSH
50359: LD_INT 14
50361: ST_TO_ADDR
// hc_gallery :=  ;
50362: LD_ADDR_OWVAR 33
50366: PUSH
50367: LD_STRING 
50369: ST_TO_ADDR
// hc_name :=  ;
50370: LD_ADDR_OWVAR 26
50374: PUSH
50375: LD_STRING 
50377: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
50378: CALL_OW 44
50382: PPUSH
50383: LD_INT 0
50385: PPUSH
50386: CALL_OW 51
// end ;
50390: GO 50312
50392: POP
50393: POP
// end ;
50394: PPOPN 1
50396: END
// every 0 0$1 trigger StreamModeActive and sBomb do
50397: LD_EXP 100
50401: PUSH
50402: LD_EXP 120
50406: AND
50407: IFFALSE 50416
50409: GO 50411
50411: DISABLE
// StreamSibBomb ;
50412: CALL 50417 0 0
50416: END
// export function StreamSibBomb ; var i , x , y ; begin
50417: LD_INT 0
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
// result := false ;
50423: LD_ADDR_VAR 0 1
50427: PUSH
50428: LD_INT 0
50430: ST_TO_ADDR
// for i := 1 to 16 do
50431: LD_ADDR_VAR 0 2
50435: PUSH
50436: DOUBLE
50437: LD_INT 1
50439: DEC
50440: ST_TO_ADDR
50441: LD_INT 16
50443: PUSH
50444: FOR_TO
50445: IFFALSE 50644
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
50447: LD_ADDR_VAR 0 3
50451: PUSH
50452: LD_INT 10
50454: PUSH
50455: LD_INT 20
50457: PUSH
50458: LD_INT 30
50460: PUSH
50461: LD_INT 40
50463: PUSH
50464: LD_INT 50
50466: PUSH
50467: LD_INT 60
50469: PUSH
50470: LD_INT 70
50472: PUSH
50473: LD_INT 80
50475: PUSH
50476: LD_INT 90
50478: PUSH
50479: LD_INT 100
50481: PUSH
50482: LD_INT 110
50484: PUSH
50485: LD_INT 120
50487: PUSH
50488: LD_INT 130
50490: PUSH
50491: LD_INT 140
50493: PUSH
50494: LD_INT 150
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PPUSH
50517: LD_INT 15
50519: PPUSH
50520: CALL_OW 12
50524: ARRAY
50525: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
50526: LD_ADDR_VAR 0 4
50530: PUSH
50531: LD_INT 10
50533: PUSH
50534: LD_INT 20
50536: PUSH
50537: LD_INT 30
50539: PUSH
50540: LD_INT 40
50542: PUSH
50543: LD_INT 50
50545: PUSH
50546: LD_INT 60
50548: PUSH
50549: LD_INT 70
50551: PUSH
50552: LD_INT 80
50554: PUSH
50555: LD_INT 90
50557: PUSH
50558: LD_INT 100
50560: PUSH
50561: LD_INT 110
50563: PUSH
50564: LD_INT 120
50566: PUSH
50567: LD_INT 130
50569: PUSH
50570: LD_INT 140
50572: PUSH
50573: LD_INT 150
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PPUSH
50596: LD_INT 15
50598: PPUSH
50599: CALL_OW 12
50603: ARRAY
50604: ST_TO_ADDR
// if ValidHex ( x , y ) then
50605: LD_VAR 0 3
50609: PPUSH
50610: LD_VAR 0 4
50614: PPUSH
50615: CALL_OW 488
50619: IFFALSE 50642
// begin result := [ x , y ] ;
50621: LD_ADDR_VAR 0 1
50625: PUSH
50626: LD_VAR 0 3
50630: PUSH
50631: LD_VAR 0 4
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// break ;
50640: GO 50644
// end ; end ;
50642: GO 50444
50644: POP
50645: POP
// if result then
50646: LD_VAR 0 1
50650: IFFALSE 50710
// begin ToLua ( playSibBomb() ) ;
50652: LD_STRING playSibBomb()
50654: PPUSH
50655: CALL_OW 559
// wait ( 0 0$14 ) ;
50659: LD_INT 490
50661: PPUSH
50662: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
50666: LD_VAR 0 1
50670: PUSH
50671: LD_INT 1
50673: ARRAY
50674: PPUSH
50675: LD_VAR 0 1
50679: PUSH
50680: LD_INT 2
50682: ARRAY
50683: PPUSH
50684: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
50688: LD_VAR 0 1
50692: PUSH
50693: LD_INT 1
50695: ARRAY
50696: PPUSH
50697: LD_VAR 0 1
50701: PUSH
50702: LD_INT 2
50704: ARRAY
50705: PPUSH
50706: CALL_OW 429
// end ; end ;
50710: LD_VAR 0 1
50714: RET
// every 0 0$1 trigger StreamModeActive and sReset do
50715: LD_EXP 100
50719: PUSH
50720: LD_EXP 122
50724: AND
50725: IFFALSE 50737
50727: GO 50729
50729: DISABLE
// YouLost (  ) ;
50730: LD_STRING 
50732: PPUSH
50733: CALL_OW 104
50737: END
// every 0 0$1 trigger StreamModeActive and sFog do
50738: LD_EXP 100
50742: PUSH
50743: LD_EXP 121
50747: AND
50748: IFFALSE 50762
50750: GO 50752
50752: DISABLE
// FogOff ( your_side ) ;
50753: LD_OWVAR 2
50757: PPUSH
50758: CALL_OW 344
50762: END
// every 0 0$1 trigger StreamModeActive and sSun do
50763: LD_EXP 100
50767: PUSH
50768: LD_EXP 123
50772: AND
50773: IFFALSE 50801
50775: GO 50777
50777: DISABLE
// begin solar_recharge_percent := 0 ;
50778: LD_ADDR_OWVAR 79
50782: PUSH
50783: LD_INT 0
50785: ST_TO_ADDR
// wait ( 5 5$00 ) ;
50786: LD_INT 10500
50788: PPUSH
50789: CALL_OW 67
// solar_recharge_percent := 100 ;
50793: LD_ADDR_OWVAR 79
50797: PUSH
50798: LD_INT 100
50800: ST_TO_ADDR
// end ;
50801: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
50802: LD_EXP 100
50806: PUSH
50807: LD_EXP 124
50811: AND
50812: IFFALSE 51051
50814: GO 50816
50816: DISABLE
50817: LD_INT 0
50819: PPUSH
50820: PPUSH
50821: PPUSH
// begin tmp := [ ] ;
50822: LD_ADDR_VAR 0 3
50826: PUSH
50827: EMPTY
50828: ST_TO_ADDR
// for i := 1 to 6 do
50829: LD_ADDR_VAR 0 1
50833: PUSH
50834: DOUBLE
50835: LD_INT 1
50837: DEC
50838: ST_TO_ADDR
50839: LD_INT 6
50841: PUSH
50842: FOR_TO
50843: IFFALSE 50948
// begin uc_nation := nation_nature ;
50845: LD_ADDR_OWVAR 21
50849: PUSH
50850: LD_INT 0
50852: ST_TO_ADDR
// uc_side := 0 ;
50853: LD_ADDR_OWVAR 20
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50861: LD_ADDR_OWVAR 29
50865: PUSH
50866: LD_INT 12
50868: PUSH
50869: LD_INT 12
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: ST_TO_ADDR
// hc_agressivity := 20 ;
50876: LD_ADDR_OWVAR 35
50880: PUSH
50881: LD_INT 20
50883: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
50884: LD_ADDR_OWVAR 28
50888: PUSH
50889: LD_INT 17
50891: ST_TO_ADDR
// hc_gallery :=  ;
50892: LD_ADDR_OWVAR 33
50896: PUSH
50897: LD_STRING 
50899: ST_TO_ADDR
// hc_name :=  ;
50900: LD_ADDR_OWVAR 26
50904: PUSH
50905: LD_STRING 
50907: ST_TO_ADDR
// un := CreateHuman ;
50908: LD_ADDR_VAR 0 2
50912: PUSH
50913: CALL_OW 44
50917: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
50918: LD_VAR 0 2
50922: PPUSH
50923: LD_INT 1
50925: PPUSH
50926: CALL_OW 51
// tmp := tmp ^ un ;
50930: LD_ADDR_VAR 0 3
50934: PUSH
50935: LD_VAR 0 3
50939: PUSH
50940: LD_VAR 0 2
50944: ADD
50945: ST_TO_ADDR
// end ;
50946: GO 50842
50948: POP
50949: POP
// repeat wait ( 0 0$1 ) ;
50950: LD_INT 35
50952: PPUSH
50953: CALL_OW 67
// for un in tmp do
50957: LD_ADDR_VAR 0 2
50961: PUSH
50962: LD_VAR 0 3
50966: PUSH
50967: FOR_IN
50968: IFFALSE 51042
// begin if IsDead ( un ) then
50970: LD_VAR 0 2
50974: PPUSH
50975: CALL_OW 301
50979: IFFALSE 50999
// begin tmp := tmp diff un ;
50981: LD_ADDR_VAR 0 3
50985: PUSH
50986: LD_VAR 0 3
50990: PUSH
50991: LD_VAR 0 2
50995: DIFF
50996: ST_TO_ADDR
// continue ;
50997: GO 50967
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50999: LD_VAR 0 2
51003: PPUSH
51004: LD_INT 3
51006: PUSH
51007: LD_INT 22
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PPUSH
51021: CALL_OW 69
51025: PPUSH
51026: LD_VAR 0 2
51030: PPUSH
51031: CALL_OW 74
51035: PPUSH
51036: CALL_OW 115
// end ;
51040: GO 50967
51042: POP
51043: POP
// until not tmp ;
51044: LD_VAR 0 3
51048: NOT
51049: IFFALSE 50950
// end ;
51051: PPOPN 3
51053: END
// every 0 0$1 trigger StreamModeActive and sTroll do
51054: LD_EXP 100
51058: PUSH
51059: LD_EXP 125
51063: AND
51064: IFFALSE 51118
51066: GO 51068
51068: DISABLE
// begin ToLua ( displayTroll(); ) ;
51069: LD_STRING displayTroll();
51071: PPUSH
51072: CALL_OW 559
// wait ( 3 3$00 ) ;
51076: LD_INT 6300
51078: PPUSH
51079: CALL_OW 67
// ToLua ( hideTroll(); ) ;
51083: LD_STRING hideTroll();
51085: PPUSH
51086: CALL_OW 559
// wait ( 1 1$00 ) ;
51090: LD_INT 2100
51092: PPUSH
51093: CALL_OW 67
// ToLua ( displayTroll(); ) ;
51097: LD_STRING displayTroll();
51099: PPUSH
51100: CALL_OW 559
// wait ( 1 1$00 ) ;
51104: LD_INT 2100
51106: PPUSH
51107: CALL_OW 67
// ToLua ( hideTroll(); ) ;
51111: LD_STRING hideTroll();
51113: PPUSH
51114: CALL_OW 559
// end ;
51118: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
51119: LD_EXP 100
51123: PUSH
51124: LD_EXP 126
51128: AND
51129: IFFALSE 51192
51131: GO 51133
51133: DISABLE
51134: LD_INT 0
51136: PPUSH
// begin p := 0 ;
51137: LD_ADDR_VAR 0 1
51141: PUSH
51142: LD_INT 0
51144: ST_TO_ADDR
// repeat game_speed := 1 ;
51145: LD_ADDR_OWVAR 65
51149: PUSH
51150: LD_INT 1
51152: ST_TO_ADDR
// wait ( 0 0$1 ) ;
51153: LD_INT 35
51155: PPUSH
51156: CALL_OW 67
// p := p + 1 ;
51160: LD_ADDR_VAR 0 1
51164: PUSH
51165: LD_VAR 0 1
51169: PUSH
51170: LD_INT 1
51172: PLUS
51173: ST_TO_ADDR
// until p >= 60 ;
51174: LD_VAR 0 1
51178: PUSH
51179: LD_INT 60
51181: GREATEREQUAL
51182: IFFALSE 51145
// game_speed := 4 ;
51184: LD_ADDR_OWVAR 65
51188: PUSH
51189: LD_INT 4
51191: ST_TO_ADDR
// end ;
51192: PPOPN 1
51194: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
51195: LD_EXP 100
51199: PUSH
51200: LD_EXP 127
51204: AND
51205: IFFALSE 51351
51207: GO 51209
51209: DISABLE
51210: LD_INT 0
51212: PPUSH
51213: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51214: LD_ADDR_VAR 0 1
51218: PUSH
51219: LD_INT 22
51221: PUSH
51222: LD_OWVAR 2
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 30
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 30
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PPUSH
51263: CALL_OW 69
51267: ST_TO_ADDR
// if not depot then
51268: LD_VAR 0 1
51272: NOT
51273: IFFALSE 51277
// exit ;
51275: GO 51351
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
51277: LD_ADDR_VAR 0 2
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_INT 1
51289: PPUSH
51290: LD_VAR 0 1
51294: PPUSH
51295: CALL_OW 12
51299: ARRAY
51300: PPUSH
51301: CALL_OW 274
51305: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
51306: LD_VAR 0 2
51310: PPUSH
51311: LD_INT 1
51313: PPUSH
51314: LD_INT 0
51316: PPUSH
51317: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
51321: LD_VAR 0 2
51325: PPUSH
51326: LD_INT 2
51328: PPUSH
51329: LD_INT 0
51331: PPUSH
51332: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
51336: LD_VAR 0 2
51340: PPUSH
51341: LD_INT 3
51343: PPUSH
51344: LD_INT 0
51346: PPUSH
51347: CALL_OW 277
// end ;
51351: PPOPN 2
51353: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
51354: LD_EXP 100
51358: PUSH
51359: LD_EXP 128
51363: AND
51364: IFFALSE 51461
51366: GO 51368
51368: DISABLE
51369: LD_INT 0
51371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51372: LD_ADDR_VAR 0 1
51376: PUSH
51377: LD_INT 22
51379: PUSH
51380: LD_OWVAR 2
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 21
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: LD_INT 23
51404: PUSH
51405: LD_INT 0
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: LIST
51420: PPUSH
51421: CALL_OW 69
51425: ST_TO_ADDR
// if not tmp then
51426: LD_VAR 0 1
51430: NOT
51431: IFFALSE 51435
// exit ;
51433: GO 51461
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
51435: LD_VAR 0 1
51439: PUSH
51440: LD_INT 1
51442: PPUSH
51443: LD_VAR 0 1
51447: PPUSH
51448: CALL_OW 12
51452: ARRAY
51453: PPUSH
51454: LD_INT 200
51456: PPUSH
51457: CALL_OW 234
// end ;
51461: PPOPN 1
51463: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
51464: LD_EXP 100
51468: PUSH
51469: LD_EXP 129
51473: AND
51474: IFFALSE 51553
51476: GO 51478
51478: DISABLE
51479: LD_INT 0
51481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
51482: LD_ADDR_VAR 0 1
51486: PUSH
51487: LD_INT 22
51489: PUSH
51490: LD_OWVAR 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 21
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PPUSH
51513: CALL_OW 69
51517: ST_TO_ADDR
// if not tmp then
51518: LD_VAR 0 1
51522: NOT
51523: IFFALSE 51527
// exit ;
51525: GO 51553
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
51527: LD_VAR 0 1
51531: PUSH
51532: LD_INT 1
51534: PPUSH
51535: LD_VAR 0 1
51539: PPUSH
51540: CALL_OW 12
51544: ARRAY
51545: PPUSH
51546: LD_INT 60
51548: PPUSH
51549: CALL_OW 234
// end ;
51553: PPOPN 1
51555: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
51556: LD_EXP 100
51560: PUSH
51561: LD_EXP 130
51565: AND
51566: IFFALSE 51665
51568: GO 51570
51570: DISABLE
51571: LD_INT 0
51573: PPUSH
51574: PPUSH
// begin enable ;
51575: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
51576: LD_ADDR_VAR 0 1
51580: PUSH
51581: LD_INT 22
51583: PUSH
51584: LD_OWVAR 2
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 61
51595: PUSH
51596: EMPTY
51597: LIST
51598: PUSH
51599: LD_INT 33
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: LIST
51613: PPUSH
51614: CALL_OW 69
51618: ST_TO_ADDR
// if not tmp then
51619: LD_VAR 0 1
51623: NOT
51624: IFFALSE 51628
// exit ;
51626: GO 51665
// for i in tmp do
51628: LD_ADDR_VAR 0 2
51632: PUSH
51633: LD_VAR 0 1
51637: PUSH
51638: FOR_IN
51639: IFFALSE 51663
// if IsControledBy ( i ) then
51641: LD_VAR 0 2
51645: PPUSH
51646: CALL_OW 312
51650: IFFALSE 51661
// ComUnlink ( i ) ;
51652: LD_VAR 0 2
51656: PPUSH
51657: CALL_OW 136
51661: GO 51638
51663: POP
51664: POP
// end ;
51665: PPOPN 2
51667: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
51668: LD_EXP 100
51672: PUSH
51673: LD_EXP 131
51677: AND
51678: IFFALSE 51818
51680: GO 51682
51682: DISABLE
51683: LD_INT 0
51685: PPUSH
51686: PPUSH
// begin ToLua ( displayPowell(); ) ;
51687: LD_STRING displayPowell();
51689: PPUSH
51690: CALL_OW 559
// uc_side := 0 ;
51694: LD_ADDR_OWVAR 20
51698: PUSH
51699: LD_INT 0
51701: ST_TO_ADDR
// uc_nation := 2 ;
51702: LD_ADDR_OWVAR 21
51706: PUSH
51707: LD_INT 2
51709: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
51710: LD_ADDR_OWVAR 37
51714: PUSH
51715: LD_INT 14
51717: ST_TO_ADDR
// vc_engine := engine_siberite ;
51718: LD_ADDR_OWVAR 39
51722: PUSH
51723: LD_INT 3
51725: ST_TO_ADDR
// vc_control := control_apeman ;
51726: LD_ADDR_OWVAR 38
51730: PUSH
51731: LD_INT 5
51733: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
51734: LD_ADDR_OWVAR 40
51738: PUSH
51739: LD_INT 29
51741: ST_TO_ADDR
// un := CreateVehicle ;
51742: LD_ADDR_VAR 0 2
51746: PUSH
51747: CALL_OW 45
51751: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51752: LD_VAR 0 2
51756: PPUSH
51757: LD_INT 1
51759: PPUSH
51760: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51764: LD_INT 35
51766: PPUSH
51767: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51771: LD_VAR 0 2
51775: PPUSH
51776: LD_INT 22
51778: PUSH
51779: LD_OWVAR 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PPUSH
51788: CALL_OW 69
51792: PPUSH
51793: LD_VAR 0 2
51797: PPUSH
51798: CALL_OW 74
51802: PPUSH
51803: CALL_OW 115
// until IsDead ( un ) ;
51807: LD_VAR 0 2
51811: PPUSH
51812: CALL_OW 301
51816: IFFALSE 51764
// end ;
51818: PPOPN 2
51820: END
// every 0 0$1 trigger StreamModeActive and sStu do
51821: LD_EXP 100
51825: PUSH
51826: LD_EXP 139
51830: AND
51831: IFFALSE 51847
51833: GO 51835
51835: DISABLE
// begin ToLua ( displayStucuk(); ) ;
51836: LD_STRING displayStucuk();
51838: PPUSH
51839: CALL_OW 559
// ResetFog ;
51843: CALL_OW 335
// end ;
51847: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
51848: LD_EXP 100
51852: PUSH
51853: LD_EXP 132
51857: AND
51858: IFFALSE 51999
51860: GO 51862
51862: DISABLE
51863: LD_INT 0
51865: PPUSH
51866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51867: LD_ADDR_VAR 0 2
51871: PUSH
51872: LD_INT 22
51874: PUSH
51875: LD_OWVAR 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 21
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PPUSH
51898: CALL_OW 69
51902: ST_TO_ADDR
// if not tmp then
51903: LD_VAR 0 2
51907: NOT
51908: IFFALSE 51912
// exit ;
51910: GO 51999
// un := tmp [ rand ( 1 , tmp ) ] ;
51912: LD_ADDR_VAR 0 1
51916: PUSH
51917: LD_VAR 0 2
51921: PUSH
51922: LD_INT 1
51924: PPUSH
51925: LD_VAR 0 2
51929: PPUSH
51930: CALL_OW 12
51934: ARRAY
51935: ST_TO_ADDR
// SetSide ( un , 0 ) ;
51936: LD_VAR 0 1
51940: PPUSH
51941: LD_INT 0
51943: PPUSH
51944: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
51948: LD_VAR 0 1
51952: PPUSH
51953: LD_OWVAR 3
51957: PUSH
51958: LD_VAR 0 1
51962: DIFF
51963: PPUSH
51964: LD_VAR 0 1
51968: PPUSH
51969: CALL_OW 74
51973: PPUSH
51974: CALL_OW 115
// wait ( 0 0$20 ) ;
51978: LD_INT 700
51980: PPUSH
51981: CALL_OW 67
// SetSide ( un , your_side ) ;
51985: LD_VAR 0 1
51989: PPUSH
51990: LD_OWVAR 2
51994: PPUSH
51995: CALL_OW 235
// end ;
51999: PPOPN 2
52001: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
52002: LD_EXP 100
52006: PUSH
52007: LD_EXP 133
52011: AND
52012: IFFALSE 52118
52014: GO 52016
52016: DISABLE
52017: LD_INT 0
52019: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52020: LD_ADDR_VAR 0 1
52024: PUSH
52025: LD_INT 22
52027: PUSH
52028: LD_OWVAR 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 30
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 30
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PPUSH
52069: CALL_OW 69
52073: ST_TO_ADDR
// if not depot then
52074: LD_VAR 0 1
52078: NOT
52079: IFFALSE 52083
// exit ;
52081: GO 52118
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
52083: LD_VAR 0 1
52087: PUSH
52088: LD_INT 1
52090: ARRAY
52091: PPUSH
52092: CALL_OW 250
52096: PPUSH
52097: LD_VAR 0 1
52101: PUSH
52102: LD_INT 1
52104: ARRAY
52105: PPUSH
52106: CALL_OW 251
52110: PPUSH
52111: LD_INT 70
52113: PPUSH
52114: CALL_OW 495
// end ;
52118: PPOPN 1
52120: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
52121: LD_EXP 100
52125: PUSH
52126: LD_EXP 134
52130: AND
52131: IFFALSE 52342
52133: GO 52135
52135: DISABLE
52136: LD_INT 0
52138: PPUSH
52139: PPUSH
52140: PPUSH
52141: PPUSH
52142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52143: LD_ADDR_VAR 0 5
52147: PUSH
52148: LD_INT 22
52150: PUSH
52151: LD_OWVAR 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 21
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PPUSH
52174: CALL_OW 69
52178: ST_TO_ADDR
// if not tmp then
52179: LD_VAR 0 5
52183: NOT
52184: IFFALSE 52188
// exit ;
52186: GO 52342
// for i in tmp do
52188: LD_ADDR_VAR 0 1
52192: PUSH
52193: LD_VAR 0 5
52197: PUSH
52198: FOR_IN
52199: IFFALSE 52340
// begin d := rand ( 0 , 5 ) ;
52201: LD_ADDR_VAR 0 4
52205: PUSH
52206: LD_INT 0
52208: PPUSH
52209: LD_INT 5
52211: PPUSH
52212: CALL_OW 12
52216: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
52217: LD_ADDR_VAR 0 2
52221: PUSH
52222: LD_VAR 0 1
52226: PPUSH
52227: CALL_OW 250
52231: PPUSH
52232: LD_VAR 0 4
52236: PPUSH
52237: LD_INT 3
52239: PPUSH
52240: LD_INT 12
52242: PPUSH
52243: CALL_OW 12
52247: PPUSH
52248: CALL_OW 272
52252: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
52253: LD_ADDR_VAR 0 3
52257: PUSH
52258: LD_VAR 0 1
52262: PPUSH
52263: CALL_OW 251
52267: PPUSH
52268: LD_VAR 0 4
52272: PPUSH
52273: LD_INT 3
52275: PPUSH
52276: LD_INT 12
52278: PPUSH
52279: CALL_OW 12
52283: PPUSH
52284: CALL_OW 273
52288: ST_TO_ADDR
// if ValidHex ( x , y ) then
52289: LD_VAR 0 2
52293: PPUSH
52294: LD_VAR 0 3
52298: PPUSH
52299: CALL_OW 488
52303: IFFALSE 52338
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
52305: LD_VAR 0 1
52309: PPUSH
52310: LD_VAR 0 2
52314: PPUSH
52315: LD_VAR 0 3
52319: PPUSH
52320: LD_INT 3
52322: PPUSH
52323: LD_INT 6
52325: PPUSH
52326: CALL_OW 12
52330: PPUSH
52331: LD_INT 1
52333: PPUSH
52334: CALL_OW 483
// end ;
52338: GO 52198
52340: POP
52341: POP
// end ;
52342: PPOPN 5
52344: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
52345: LD_EXP 100
52349: PUSH
52350: LD_EXP 135
52354: AND
52355: IFFALSE 52449
52357: GO 52359
52359: DISABLE
52360: LD_INT 0
52362: PPUSH
52363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
52364: LD_ADDR_VAR 0 2
52368: PUSH
52369: LD_INT 22
52371: PUSH
52372: LD_OWVAR 2
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 32
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 21
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: PPUSH
52406: CALL_OW 69
52410: ST_TO_ADDR
// if not tmp then
52411: LD_VAR 0 2
52415: NOT
52416: IFFALSE 52420
// exit ;
52418: GO 52449
// for i in tmp do
52420: LD_ADDR_VAR 0 1
52424: PUSH
52425: LD_VAR 0 2
52429: PUSH
52430: FOR_IN
52431: IFFALSE 52447
// SetFuel ( i , 0 ) ;
52433: LD_VAR 0 1
52437: PPUSH
52438: LD_INT 0
52440: PPUSH
52441: CALL_OW 240
52445: GO 52430
52447: POP
52448: POP
// end ;
52449: PPOPN 2
52451: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
52452: LD_EXP 100
52456: PUSH
52457: LD_EXP 136
52461: AND
52462: IFFALSE 52528
52464: GO 52466
52466: DISABLE
52467: LD_INT 0
52469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52470: LD_ADDR_VAR 0 1
52474: PUSH
52475: LD_INT 22
52477: PUSH
52478: LD_OWVAR 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 30
52489: PUSH
52490: LD_INT 29
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PPUSH
52501: CALL_OW 69
52505: ST_TO_ADDR
// if not tmp then
52506: LD_VAR 0 1
52510: NOT
52511: IFFALSE 52515
// exit ;
52513: GO 52528
// DestroyUnit ( tmp [ 1 ] ) ;
52515: LD_VAR 0 1
52519: PUSH
52520: LD_INT 1
52522: ARRAY
52523: PPUSH
52524: CALL_OW 65
// end ;
52528: PPOPN 1
52530: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
52531: LD_EXP 100
52535: PUSH
52536: LD_EXP 138
52540: AND
52541: IFFALSE 52670
52543: GO 52545
52545: DISABLE
52546: LD_INT 0
52548: PPUSH
// begin uc_side := 0 ;
52549: LD_ADDR_OWVAR 20
52553: PUSH
52554: LD_INT 0
52556: ST_TO_ADDR
// uc_nation := nation_arabian ;
52557: LD_ADDR_OWVAR 21
52561: PUSH
52562: LD_INT 2
52564: ST_TO_ADDR
// hc_gallery :=  ;
52565: LD_ADDR_OWVAR 33
52569: PUSH
52570: LD_STRING 
52572: ST_TO_ADDR
// hc_name :=  ;
52573: LD_ADDR_OWVAR 26
52577: PUSH
52578: LD_STRING 
52580: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
52581: LD_INT 1
52583: PPUSH
52584: LD_INT 11
52586: PPUSH
52587: LD_INT 10
52589: PPUSH
52590: CALL_OW 380
// un := CreateHuman ;
52594: LD_ADDR_VAR 0 1
52598: PUSH
52599: CALL_OW 44
52603: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52604: LD_VAR 0 1
52608: PPUSH
52609: LD_INT 1
52611: PPUSH
52612: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52616: LD_INT 35
52618: PPUSH
52619: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52623: LD_VAR 0 1
52627: PPUSH
52628: LD_INT 22
52630: PUSH
52631: LD_OWVAR 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PPUSH
52640: CALL_OW 69
52644: PPUSH
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 74
52654: PPUSH
52655: CALL_OW 115
// until IsDead ( un ) ;
52659: LD_VAR 0 1
52663: PPUSH
52664: CALL_OW 301
52668: IFFALSE 52616
// end ;
52670: PPOPN 1
52672: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
52673: LD_EXP 100
52677: PUSH
52678: LD_EXP 140
52682: AND
52683: IFFALSE 52695
52685: GO 52687
52687: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
52688: LD_STRING earthquake(getX(game), 0, 32)
52690: PPUSH
52691: CALL_OW 559
52695: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
52696: LD_EXP 100
52700: PUSH
52701: LD_EXP 141
52705: AND
52706: IFFALSE 52797
52708: GO 52710
52710: DISABLE
52711: LD_INT 0
52713: PPUSH
// begin enable ;
52714: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
52715: LD_ADDR_VAR 0 1
52719: PUSH
52720: LD_INT 22
52722: PUSH
52723: LD_OWVAR 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 21
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 33
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: PPUSH
52757: CALL_OW 69
52761: ST_TO_ADDR
// if not tmp then
52762: LD_VAR 0 1
52766: NOT
52767: IFFALSE 52771
// exit ;
52769: GO 52797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52771: LD_VAR 0 1
52775: PUSH
52776: LD_INT 1
52778: PPUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: CALL_OW 12
52788: ARRAY
52789: PPUSH
52790: LD_INT 1
52792: PPUSH
52793: CALL_OW 234
// end ;
52797: PPOPN 1
52799: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
52800: LD_EXP 100
52804: PUSH
52805: LD_EXP 142
52809: AND
52810: IFFALSE 52951
52812: GO 52814
52814: DISABLE
52815: LD_INT 0
52817: PPUSH
52818: PPUSH
52819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52820: LD_ADDR_VAR 0 3
52824: PUSH
52825: LD_INT 22
52827: PUSH
52828: LD_OWVAR 2
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 25
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PPUSH
52851: CALL_OW 69
52855: ST_TO_ADDR
// if not tmp then
52856: LD_VAR 0 3
52860: NOT
52861: IFFALSE 52865
// exit ;
52863: GO 52951
// un := tmp [ rand ( 1 , tmp ) ] ;
52865: LD_ADDR_VAR 0 2
52869: PUSH
52870: LD_VAR 0 3
52874: PUSH
52875: LD_INT 1
52877: PPUSH
52878: LD_VAR 0 3
52882: PPUSH
52883: CALL_OW 12
52887: ARRAY
52888: ST_TO_ADDR
// if Crawls ( un ) then
52889: LD_VAR 0 2
52893: PPUSH
52894: CALL_OW 318
52898: IFFALSE 52909
// ComWalk ( un ) ;
52900: LD_VAR 0 2
52904: PPUSH
52905: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
52909: LD_VAR 0 2
52913: PPUSH
52914: LD_INT 9
52916: PPUSH
52917: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
52921: LD_INT 28
52923: PPUSH
52924: LD_OWVAR 2
52928: PPUSH
52929: LD_INT 2
52931: PPUSH
52932: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
52936: LD_INT 29
52938: PPUSH
52939: LD_OWVAR 2
52943: PPUSH
52944: LD_INT 2
52946: PPUSH
52947: CALL_OW 322
// end ;
52951: PPOPN 3
52953: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
52954: LD_EXP 100
52958: PUSH
52959: LD_EXP 143
52963: AND
52964: IFFALSE 53075
52966: GO 52968
52968: DISABLE
52969: LD_INT 0
52971: PPUSH
52972: PPUSH
52973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_INT 22
52981: PUSH
52982: LD_OWVAR 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 25
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PPUSH
53005: CALL_OW 69
53009: ST_TO_ADDR
// if not tmp then
53010: LD_VAR 0 3
53014: NOT
53015: IFFALSE 53019
// exit ;
53017: GO 53075
// un := tmp [ rand ( 1 , tmp ) ] ;
53019: LD_ADDR_VAR 0 2
53023: PUSH
53024: LD_VAR 0 3
53028: PUSH
53029: LD_INT 1
53031: PPUSH
53032: LD_VAR 0 3
53036: PPUSH
53037: CALL_OW 12
53041: ARRAY
53042: ST_TO_ADDR
// if Crawls ( un ) then
53043: LD_VAR 0 2
53047: PPUSH
53048: CALL_OW 318
53052: IFFALSE 53063
// ComWalk ( un ) ;
53054: LD_VAR 0 2
53058: PPUSH
53059: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53063: LD_VAR 0 2
53067: PPUSH
53068: LD_INT 8
53070: PPUSH
53071: CALL_OW 336
// end ;
53075: PPOPN 3
53077: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
53078: LD_EXP 100
53082: PUSH
53083: LD_EXP 144
53087: AND
53088: IFFALSE 53232
53090: GO 53092
53092: DISABLE
53093: LD_INT 0
53095: PPUSH
53096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
53097: LD_ADDR_VAR 0 2
53101: PUSH
53102: LD_INT 22
53104: PUSH
53105: LD_OWVAR 2
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 21
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 34
53129: PUSH
53130: LD_INT 12
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 34
53139: PUSH
53140: LD_INT 51
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 34
53149: PUSH
53150: LD_INT 32
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: PPUSH
53168: CALL_OW 69
53172: ST_TO_ADDR
// if not tmp then
53173: LD_VAR 0 2
53177: NOT
53178: IFFALSE 53182
// exit ;
53180: GO 53232
// for i in tmp do
53182: LD_ADDR_VAR 0 1
53186: PUSH
53187: LD_VAR 0 2
53191: PUSH
53192: FOR_IN
53193: IFFALSE 53230
// if GetCargo ( i , mat_artifact ) = 0 then
53195: LD_VAR 0 1
53199: PPUSH
53200: LD_INT 4
53202: PPUSH
53203: CALL_OW 289
53207: PUSH
53208: LD_INT 0
53210: EQUAL
53211: IFFALSE 53228
// SetCargo ( i , mat_siberit , 100 ) ;
53213: LD_VAR 0 1
53217: PPUSH
53218: LD_INT 3
53220: PPUSH
53221: LD_INT 100
53223: PPUSH
53224: CALL_OW 290
53228: GO 53192
53230: POP
53231: POP
// end ;
53232: PPOPN 2
53234: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
53235: LD_EXP 100
53239: PUSH
53240: LD_EXP 145
53244: AND
53245: IFFALSE 53428
53247: GO 53249
53249: DISABLE
53250: LD_INT 0
53252: PPUSH
53253: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53254: LD_ADDR_VAR 0 2
53258: PUSH
53259: LD_INT 22
53261: PUSH
53262: LD_OWVAR 2
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PPUSH
53271: CALL_OW 69
53275: ST_TO_ADDR
// if not tmp then
53276: LD_VAR 0 2
53280: NOT
53281: IFFALSE 53285
// exit ;
53283: GO 53428
// for i := 1 to 2 do
53285: LD_ADDR_VAR 0 1
53289: PUSH
53290: DOUBLE
53291: LD_INT 1
53293: DEC
53294: ST_TO_ADDR
53295: LD_INT 2
53297: PUSH
53298: FOR_TO
53299: IFFALSE 53426
// begin uc_side := your_side ;
53301: LD_ADDR_OWVAR 20
53305: PUSH
53306: LD_OWVAR 2
53310: ST_TO_ADDR
// uc_nation := nation_american ;
53311: LD_ADDR_OWVAR 21
53315: PUSH
53316: LD_INT 1
53318: ST_TO_ADDR
// vc_chassis := us_morphling ;
53319: LD_ADDR_OWVAR 37
53323: PUSH
53324: LD_INT 5
53326: ST_TO_ADDR
// vc_engine := engine_siberite ;
53327: LD_ADDR_OWVAR 39
53331: PUSH
53332: LD_INT 3
53334: ST_TO_ADDR
// vc_control := control_computer ;
53335: LD_ADDR_OWVAR 38
53339: PUSH
53340: LD_INT 3
53342: ST_TO_ADDR
// vc_weapon := us_double_laser ;
53343: LD_ADDR_OWVAR 40
53347: PUSH
53348: LD_INT 10
53350: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
53351: LD_VAR 0 2
53355: PUSH
53356: LD_INT 1
53358: ARRAY
53359: PPUSH
53360: CALL_OW 310
53364: NOT
53365: IFFALSE 53412
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
53367: CALL_OW 45
53371: PPUSH
53372: LD_VAR 0 2
53376: PUSH
53377: LD_INT 1
53379: ARRAY
53380: PPUSH
53381: CALL_OW 250
53385: PPUSH
53386: LD_VAR 0 2
53390: PUSH
53391: LD_INT 1
53393: ARRAY
53394: PPUSH
53395: CALL_OW 251
53399: PPUSH
53400: LD_INT 12
53402: PPUSH
53403: LD_INT 1
53405: PPUSH
53406: CALL_OW 50
53410: GO 53424
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
53412: CALL_OW 45
53416: PPUSH
53417: LD_INT 1
53419: PPUSH
53420: CALL_OW 51
// end ;
53424: GO 53298
53426: POP
53427: POP
// end ;
53428: PPOPN 2
53430: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
53431: LD_EXP 100
53435: PUSH
53436: LD_EXP 146
53440: AND
53441: IFFALSE 53663
53443: GO 53445
53445: DISABLE
53446: LD_INT 0
53448: PPUSH
53449: PPUSH
53450: PPUSH
53451: PPUSH
53452: PPUSH
53453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53454: LD_ADDR_VAR 0 6
53458: PUSH
53459: LD_INT 22
53461: PUSH
53462: LD_OWVAR 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 21
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: LD_INT 23
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: PPUSH
53503: CALL_OW 69
53507: ST_TO_ADDR
// if not tmp then
53508: LD_VAR 0 6
53512: NOT
53513: IFFALSE 53517
// exit ;
53515: GO 53663
// s1 := rand ( 1 , 4 ) ;
53517: LD_ADDR_VAR 0 2
53521: PUSH
53522: LD_INT 1
53524: PPUSH
53525: LD_INT 4
53527: PPUSH
53528: CALL_OW 12
53532: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
53533: LD_ADDR_VAR 0 4
53537: PUSH
53538: LD_VAR 0 6
53542: PUSH
53543: LD_INT 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 2
53551: PPUSH
53552: CALL_OW 259
53556: ST_TO_ADDR
// if s1 = 1 then
53557: LD_VAR 0 2
53561: PUSH
53562: LD_INT 1
53564: EQUAL
53565: IFFALSE 53585
// s2 := rand ( 2 , 4 ) else
53567: LD_ADDR_VAR 0 3
53571: PUSH
53572: LD_INT 2
53574: PPUSH
53575: LD_INT 4
53577: PPUSH
53578: CALL_OW 12
53582: ST_TO_ADDR
53583: GO 53593
// s2 := 1 ;
53585: LD_ADDR_VAR 0 3
53589: PUSH
53590: LD_INT 1
53592: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
53593: LD_ADDR_VAR 0 5
53597: PUSH
53598: LD_VAR 0 6
53602: PUSH
53603: LD_INT 1
53605: ARRAY
53606: PPUSH
53607: LD_VAR 0 3
53611: PPUSH
53612: CALL_OW 259
53616: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
53617: LD_VAR 0 6
53621: PUSH
53622: LD_INT 1
53624: ARRAY
53625: PPUSH
53626: LD_VAR 0 2
53630: PPUSH
53631: LD_VAR 0 5
53635: PPUSH
53636: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
53640: LD_VAR 0 6
53644: PUSH
53645: LD_INT 1
53647: ARRAY
53648: PPUSH
53649: LD_VAR 0 3
53653: PPUSH
53654: LD_VAR 0 4
53658: PPUSH
53659: CALL_OW 237
// end ;
53663: PPOPN 6
53665: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
53666: LD_EXP 100
53670: PUSH
53671: LD_EXP 147
53675: AND
53676: IFFALSE 53755
53678: GO 53680
53680: DISABLE
53681: LD_INT 0
53683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
53684: LD_ADDR_VAR 0 1
53688: PUSH
53689: LD_INT 22
53691: PUSH
53692: LD_OWVAR 2
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 30
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PPUSH
53715: CALL_OW 69
53719: ST_TO_ADDR
// if not tmp then
53720: LD_VAR 0 1
53724: NOT
53725: IFFALSE 53729
// exit ;
53727: GO 53755
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53729: LD_VAR 0 1
53733: PUSH
53734: LD_INT 1
53736: PPUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL_OW 12
53746: ARRAY
53747: PPUSH
53748: LD_INT 1
53750: PPUSH
53751: CALL_OW 234
// end ;
53755: PPOPN 1
53757: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
53758: LD_EXP 100
53762: PUSH
53763: LD_EXP 148
53767: AND
53768: IFFALSE 53880
53770: GO 53772
53772: DISABLE
53773: LD_INT 0
53775: PPUSH
53776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
53777: LD_ADDR_VAR 0 2
53781: PUSH
53782: LD_INT 22
53784: PUSH
53785: LD_OWVAR 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 30
53799: PUSH
53800: LD_INT 27
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 30
53809: PUSH
53810: LD_INT 26
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 30
53819: PUSH
53820: LD_INT 28
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PPUSH
53837: CALL_OW 69
53841: ST_TO_ADDR
// if not tmp then
53842: LD_VAR 0 2
53846: NOT
53847: IFFALSE 53851
// exit ;
53849: GO 53880
// for i in tmp do
53851: LD_ADDR_VAR 0 1
53855: PUSH
53856: LD_VAR 0 2
53860: PUSH
53861: FOR_IN
53862: IFFALSE 53878
// SetLives ( i , 1 ) ;
53864: LD_VAR 0 1
53868: PPUSH
53869: LD_INT 1
53871: PPUSH
53872: CALL_OW 234
53876: GO 53861
53878: POP
53879: POP
// end ;
53880: PPOPN 2
53882: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
53883: LD_EXP 100
53887: PUSH
53888: LD_EXP 149
53892: AND
53893: IFFALSE 54180
53895: GO 53897
53897: DISABLE
53898: LD_INT 0
53900: PPUSH
53901: PPUSH
53902: PPUSH
// begin i := rand ( 1 , 7 ) ;
53903: LD_ADDR_VAR 0 1
53907: PUSH
53908: LD_INT 1
53910: PPUSH
53911: LD_INT 7
53913: PPUSH
53914: CALL_OW 12
53918: ST_TO_ADDR
// case i of 1 :
53919: LD_VAR 0 1
53923: PUSH
53924: LD_INT 1
53926: DOUBLE
53927: EQUAL
53928: IFTRUE 53932
53930: GO 53942
53932: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
53933: LD_STRING earthquake(getX(game), 0, 32)
53935: PPUSH
53936: CALL_OW 559
53940: GO 54180
53942: LD_INT 2
53944: DOUBLE
53945: EQUAL
53946: IFTRUE 53950
53948: GO 53964
53950: POP
// begin ToLua ( displayStucuk(); ) ;
53951: LD_STRING displayStucuk();
53953: PPUSH
53954: CALL_OW 559
// ResetFog ;
53958: CALL_OW 335
// end ; 3 :
53962: GO 54180
53964: LD_INT 3
53966: DOUBLE
53967: EQUAL
53968: IFTRUE 53972
53970: GO 54076
53972: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53973: LD_ADDR_VAR 0 2
53977: PUSH
53978: LD_INT 22
53980: PUSH
53981: LD_OWVAR 2
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 25
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PPUSH
54004: CALL_OW 69
54008: ST_TO_ADDR
// if not tmp then
54009: LD_VAR 0 2
54013: NOT
54014: IFFALSE 54018
// exit ;
54016: GO 54180
// un := tmp [ rand ( 1 , tmp ) ] ;
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_VAR 0 2
54027: PUSH
54028: LD_INT 1
54030: PPUSH
54031: LD_VAR 0 2
54035: PPUSH
54036: CALL_OW 12
54040: ARRAY
54041: ST_TO_ADDR
// if Crawls ( un ) then
54042: LD_VAR 0 3
54046: PPUSH
54047: CALL_OW 318
54051: IFFALSE 54062
// ComWalk ( un ) ;
54053: LD_VAR 0 3
54057: PPUSH
54058: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54062: LD_VAR 0 3
54066: PPUSH
54067: LD_INT 8
54069: PPUSH
54070: CALL_OW 336
// end ; 4 :
54074: GO 54180
54076: LD_INT 4
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54158
54084: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
54085: LD_ADDR_VAR 0 2
54089: PUSH
54090: LD_INT 22
54092: PUSH
54093: LD_OWVAR 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 30
54104: PUSH
54105: LD_INT 29
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PPUSH
54116: CALL_OW 69
54120: ST_TO_ADDR
// if not tmp then
54121: LD_VAR 0 2
54125: NOT
54126: IFFALSE 54130
// exit ;
54128: GO 54180
// CenterNowOnUnits ( tmp [ 1 ] ) ;
54130: LD_VAR 0 2
54134: PUSH
54135: LD_INT 1
54137: ARRAY
54138: PPUSH
54139: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
54143: LD_VAR 0 2
54147: PUSH
54148: LD_INT 1
54150: ARRAY
54151: PPUSH
54152: CALL_OW 65
// end ; 5 .. 7 :
54156: GO 54180
54158: LD_INT 5
54160: DOUBLE
54161: GREATEREQUAL
54162: IFFALSE 54170
54164: LD_INT 7
54166: DOUBLE
54167: LESSEQUAL
54168: IFTRUE 54172
54170: GO 54179
54172: POP
// StreamSibBomb ; end ;
54173: CALL 50417 0 0
54177: GO 54180
54179: POP
// end ;
54180: PPOPN 3
54182: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
54183: LD_EXP 100
54187: PUSH
54188: LD_EXP 150
54192: AND
54193: IFFALSE 54349
54195: GO 54197
54197: DISABLE
54198: LD_INT 0
54200: PPUSH
54201: PPUSH
54202: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
54203: LD_ADDR_VAR 0 2
54207: PUSH
54208: LD_INT 81
54210: PUSH
54211: LD_OWVAR 2
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: PUSH
54223: LD_INT 21
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 21
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PPUSH
54252: CALL_OW 69
54256: ST_TO_ADDR
// if not tmp then
54257: LD_VAR 0 2
54261: NOT
54262: IFFALSE 54266
// exit ;
54264: GO 54349
// p := 0 ;
54266: LD_ADDR_VAR 0 3
54270: PUSH
54271: LD_INT 0
54273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54274: LD_INT 35
54276: PPUSH
54277: CALL_OW 67
// p := p + 1 ;
54281: LD_ADDR_VAR 0 3
54285: PUSH
54286: LD_VAR 0 3
54290: PUSH
54291: LD_INT 1
54293: PLUS
54294: ST_TO_ADDR
// for i in tmp do
54295: LD_ADDR_VAR 0 1
54299: PUSH
54300: LD_VAR 0 2
54304: PUSH
54305: FOR_IN
54306: IFFALSE 54337
// if GetLives ( i ) < 1000 then
54308: LD_VAR 0 1
54312: PPUSH
54313: CALL_OW 256
54317: PUSH
54318: LD_INT 1000
54320: LESS
54321: IFFALSE 54335
// SetLives ( i , 1000 ) ;
54323: LD_VAR 0 1
54327: PPUSH
54328: LD_INT 1000
54330: PPUSH
54331: CALL_OW 234
54335: GO 54305
54337: POP
54338: POP
// until p > 20 ;
54339: LD_VAR 0 3
54343: PUSH
54344: LD_INT 20
54346: GREATER
54347: IFFALSE 54274
// end ;
54349: PPOPN 3
54351: END
// every 0 0$1 trigger StreamModeActive and sTime do
54352: LD_EXP 100
54356: PUSH
54357: LD_EXP 151
54361: AND
54362: IFFALSE 54397
54364: GO 54366
54366: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
54367: LD_INT 28
54369: PPUSH
54370: LD_OWVAR 2
54374: PPUSH
54375: LD_INT 2
54377: PPUSH
54378: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
54382: LD_INT 30
54384: PPUSH
54385: LD_OWVAR 2
54389: PPUSH
54390: LD_INT 2
54392: PPUSH
54393: CALL_OW 322
// end ;
54397: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
54398: LD_EXP 100
54402: PUSH
54403: LD_EXP 152
54407: AND
54408: IFFALSE 54529
54410: GO 54412
54412: DISABLE
54413: LD_INT 0
54415: PPUSH
54416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54417: LD_ADDR_VAR 0 2
54421: PUSH
54422: LD_INT 22
54424: PUSH
54425: LD_OWVAR 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 21
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 23
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: PPUSH
54466: CALL_OW 69
54470: ST_TO_ADDR
// if not tmp then
54471: LD_VAR 0 2
54475: NOT
54476: IFFALSE 54480
// exit ;
54478: GO 54529
// for i in tmp do
54480: LD_ADDR_VAR 0 1
54484: PUSH
54485: LD_VAR 0 2
54489: PUSH
54490: FOR_IN
54491: IFFALSE 54527
// begin if Crawls ( i ) then
54493: LD_VAR 0 1
54497: PPUSH
54498: CALL_OW 318
54502: IFFALSE 54513
// ComWalk ( i ) ;
54504: LD_VAR 0 1
54508: PPUSH
54509: CALL_OW 138
// SetClass ( i , 2 ) ;
54513: LD_VAR 0 1
54517: PPUSH
54518: LD_INT 2
54520: PPUSH
54521: CALL_OW 336
// end ;
54525: GO 54490
54527: POP
54528: POP
// end ;
54529: PPOPN 2
54531: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
54532: LD_EXP 100
54536: PUSH
54537: LD_EXP 153
54541: AND
54542: IFFALSE 54830
54544: GO 54546
54546: DISABLE
54547: LD_INT 0
54549: PPUSH
54550: PPUSH
54551: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
54552: LD_OWVAR 2
54556: PPUSH
54557: LD_INT 9
54559: PPUSH
54560: LD_INT 1
54562: PPUSH
54563: LD_INT 1
54565: PPUSH
54566: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
54570: LD_INT 9
54572: PPUSH
54573: LD_OWVAR 2
54577: PPUSH
54578: CALL_OW 343
// uc_side := 9 ;
54582: LD_ADDR_OWVAR 20
54586: PUSH
54587: LD_INT 9
54589: ST_TO_ADDR
// uc_nation := 2 ;
54590: LD_ADDR_OWVAR 21
54594: PUSH
54595: LD_INT 2
54597: ST_TO_ADDR
// hc_name := Dark Warrior ;
54598: LD_ADDR_OWVAR 26
54602: PUSH
54603: LD_STRING Dark Warrior
54605: ST_TO_ADDR
// hc_gallery :=  ;
54606: LD_ADDR_OWVAR 33
54610: PUSH
54611: LD_STRING 
54613: ST_TO_ADDR
// hc_noskilllimit := true ;
54614: LD_ADDR_OWVAR 76
54618: PUSH
54619: LD_INT 1
54621: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
54622: LD_ADDR_OWVAR 31
54626: PUSH
54627: LD_INT 30
54629: PUSH
54630: LD_INT 30
54632: PUSH
54633: LD_INT 30
54635: PUSH
54636: LD_INT 30
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: ST_TO_ADDR
// un := CreateHuman ;
54645: LD_ADDR_VAR 0 3
54649: PUSH
54650: CALL_OW 44
54654: ST_TO_ADDR
// hc_noskilllimit := false ;
54655: LD_ADDR_OWVAR 76
54659: PUSH
54660: LD_INT 0
54662: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54663: LD_VAR 0 3
54667: PPUSH
54668: LD_INT 1
54670: PPUSH
54671: CALL_OW 51
// ToLua ( playRanger() ) ;
54675: LD_STRING playRanger()
54677: PPUSH
54678: CALL_OW 559
// p := 0 ;
54682: LD_ADDR_VAR 0 2
54686: PUSH
54687: LD_INT 0
54689: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54690: LD_INT 35
54692: PPUSH
54693: CALL_OW 67
// p := p + 1 ;
54697: LD_ADDR_VAR 0 2
54701: PUSH
54702: LD_VAR 0 2
54706: PUSH
54707: LD_INT 1
54709: PLUS
54710: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
54711: LD_VAR 0 3
54715: PPUSH
54716: CALL_OW 256
54720: PUSH
54721: LD_INT 1000
54723: LESS
54724: IFFALSE 54738
// SetLives ( un , 1000 ) ;
54726: LD_VAR 0 3
54730: PPUSH
54731: LD_INT 1000
54733: PPUSH
54734: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
54738: LD_VAR 0 3
54742: PPUSH
54743: LD_INT 81
54745: PUSH
54746: LD_OWVAR 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 91
54757: PUSH
54758: LD_VAR 0 3
54762: PUSH
54763: LD_INT 30
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PPUSH
54775: CALL_OW 69
54779: PPUSH
54780: LD_VAR 0 3
54784: PPUSH
54785: CALL_OW 74
54789: PPUSH
54790: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
54794: LD_VAR 0 2
54798: PUSH
54799: LD_INT 80
54801: GREATER
54802: PUSH
54803: LD_VAR 0 3
54807: PPUSH
54808: CALL_OW 301
54812: OR
54813: IFFALSE 54690
// if un then
54815: LD_VAR 0 3
54819: IFFALSE 54830
// RemoveUnit ( un ) ;
54821: LD_VAR 0 3
54825: PPUSH
54826: CALL_OW 64
// end ;
54830: PPOPN 3
54832: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
54833: LD_EXP 154
54837: IFFALSE 54953
54839: GO 54841
54841: DISABLE
54842: LD_INT 0
54844: PPUSH
54845: PPUSH
54846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54847: LD_ADDR_VAR 0 2
54851: PUSH
54852: LD_INT 81
54854: PUSH
54855: LD_OWVAR 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 21
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PPUSH
54878: CALL_OW 69
54882: ST_TO_ADDR
// ToLua ( playComputer() ) ;
54883: LD_STRING playComputer()
54885: PPUSH
54886: CALL_OW 559
// if not tmp then
54890: LD_VAR 0 2
54894: NOT
54895: IFFALSE 54899
// exit ;
54897: GO 54953
// for i in tmp do
54899: LD_ADDR_VAR 0 1
54903: PUSH
54904: LD_VAR 0 2
54908: PUSH
54909: FOR_IN
54910: IFFALSE 54951
// for j := 1 to 4 do
54912: LD_ADDR_VAR 0 3
54916: PUSH
54917: DOUBLE
54918: LD_INT 1
54920: DEC
54921: ST_TO_ADDR
54922: LD_INT 4
54924: PUSH
54925: FOR_TO
54926: IFFALSE 54947
// SetSkill ( i , j , 10 ) ;
54928: LD_VAR 0 1
54932: PPUSH
54933: LD_VAR 0 3
54937: PPUSH
54938: LD_INT 10
54940: PPUSH
54941: CALL_OW 237
54945: GO 54925
54947: POP
54948: POP
54949: GO 54909
54951: POP
54952: POP
// end ;
54953: PPOPN 3
54955: END
// every 0 0$1 trigger s30 do var i , tmp ;
54956: LD_EXP 155
54960: IFFALSE 55029
54962: GO 54964
54964: DISABLE
54965: LD_INT 0
54967: PPUSH
54968: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54969: LD_ADDR_VAR 0 2
54973: PUSH
54974: LD_INT 22
54976: PUSH
54977: LD_OWVAR 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PPUSH
54986: CALL_OW 69
54990: ST_TO_ADDR
// if not tmp then
54991: LD_VAR 0 2
54995: NOT
54996: IFFALSE 55000
// exit ;
54998: GO 55029
// for i in tmp do
55000: LD_ADDR_VAR 0 1
55004: PUSH
55005: LD_VAR 0 2
55009: PUSH
55010: FOR_IN
55011: IFFALSE 55027
// SetLives ( i , 300 ) ;
55013: LD_VAR 0 1
55017: PPUSH
55018: LD_INT 300
55020: PPUSH
55021: CALL_OW 234
55025: GO 55010
55027: POP
55028: POP
// end ;
55029: PPOPN 2
55031: END
// every 0 0$1 trigger s60 do var i , tmp ;
55032: LD_EXP 156
55036: IFFALSE 55105
55038: GO 55040
55040: DISABLE
55041: LD_INT 0
55043: PPUSH
55044: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55045: LD_ADDR_VAR 0 2
55049: PUSH
55050: LD_INT 22
55052: PUSH
55053: LD_OWVAR 2
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PPUSH
55062: CALL_OW 69
55066: ST_TO_ADDR
// if not tmp then
55067: LD_VAR 0 2
55071: NOT
55072: IFFALSE 55076
// exit ;
55074: GO 55105
// for i in tmp do
55076: LD_ADDR_VAR 0 1
55080: PUSH
55081: LD_VAR 0 2
55085: PUSH
55086: FOR_IN
55087: IFFALSE 55103
// SetLives ( i , 600 ) ;
55089: LD_VAR 0 1
55093: PPUSH
55094: LD_INT 600
55096: PPUSH
55097: CALL_OW 234
55101: GO 55086
55103: POP
55104: POP
// end ;
55105: PPOPN 2
55107: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
55108: LD_INT 0
55110: PPUSH
// case cmd of 301 :
55111: LD_VAR 0 1
55115: PUSH
55116: LD_INT 301
55118: DOUBLE
55119: EQUAL
55120: IFTRUE 55124
55122: GO 55156
55124: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
55125: LD_VAR 0 6
55129: PPUSH
55130: LD_VAR 0 7
55134: PPUSH
55135: LD_VAR 0 8
55139: PPUSH
55140: LD_VAR 0 4
55144: PPUSH
55145: LD_VAR 0 5
55149: PPUSH
55150: CALL 56357 0 5
55154: GO 55277
55156: LD_INT 302
55158: DOUBLE
55159: EQUAL
55160: IFTRUE 55164
55162: GO 55201
55164: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
55165: LD_VAR 0 6
55169: PPUSH
55170: LD_VAR 0 7
55174: PPUSH
55175: LD_VAR 0 8
55179: PPUSH
55180: LD_VAR 0 9
55184: PPUSH
55185: LD_VAR 0 4
55189: PPUSH
55190: LD_VAR 0 5
55194: PPUSH
55195: CALL 56448 0 6
55199: GO 55277
55201: LD_INT 303
55203: DOUBLE
55204: EQUAL
55205: IFTRUE 55209
55207: GO 55246
55209: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
55210: LD_VAR 0 6
55214: PPUSH
55215: LD_VAR 0 7
55219: PPUSH
55220: LD_VAR 0 8
55224: PPUSH
55225: LD_VAR 0 9
55229: PPUSH
55230: LD_VAR 0 4
55234: PPUSH
55235: LD_VAR 0 5
55239: PPUSH
55240: CALL 55282 0 6
55244: GO 55277
55246: LD_INT 304
55248: DOUBLE
55249: EQUAL
55250: IFTRUE 55254
55252: GO 55276
55254: POP
// hHackTeleport ( unit , x , y ) ; end ;
55255: LD_VAR 0 2
55259: PPUSH
55260: LD_VAR 0 4
55264: PPUSH
55265: LD_VAR 0 5
55269: PPUSH
55270: CALL 57041 0 3
55274: GO 55277
55276: POP
// end ;
55277: LD_VAR 0 12
55281: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
55282: LD_INT 0
55284: PPUSH
55285: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
55286: LD_VAR 0 1
55290: PUSH
55291: LD_INT 1
55293: LESS
55294: PUSH
55295: LD_VAR 0 1
55299: PUSH
55300: LD_INT 3
55302: GREATER
55303: OR
55304: PUSH
55305: LD_VAR 0 5
55309: PPUSH
55310: LD_VAR 0 6
55314: PPUSH
55315: CALL_OW 428
55319: OR
55320: IFFALSE 55324
// exit ;
55322: GO 56044
// uc_side := your_side ;
55324: LD_ADDR_OWVAR 20
55328: PUSH
55329: LD_OWVAR 2
55333: ST_TO_ADDR
// uc_nation := nation ;
55334: LD_ADDR_OWVAR 21
55338: PUSH
55339: LD_VAR 0 1
55343: ST_TO_ADDR
// bc_level = 1 ;
55344: LD_ADDR_OWVAR 43
55348: PUSH
55349: LD_INT 1
55351: ST_TO_ADDR
// case btype of 1 :
55352: LD_VAR 0 2
55356: PUSH
55357: LD_INT 1
55359: DOUBLE
55360: EQUAL
55361: IFTRUE 55365
55363: GO 55376
55365: POP
// bc_type := b_depot ; 2 :
55366: LD_ADDR_OWVAR 42
55370: PUSH
55371: LD_INT 0
55373: ST_TO_ADDR
55374: GO 55988
55376: LD_INT 2
55378: DOUBLE
55379: EQUAL
55380: IFTRUE 55384
55382: GO 55395
55384: POP
// bc_type := b_warehouse ; 3 :
55385: LD_ADDR_OWVAR 42
55389: PUSH
55390: LD_INT 1
55392: ST_TO_ADDR
55393: GO 55988
55395: LD_INT 3
55397: DOUBLE
55398: EQUAL
55399: IFTRUE 55403
55401: GO 55414
55403: POP
// bc_type := b_lab ; 4 .. 9 :
55404: LD_ADDR_OWVAR 42
55408: PUSH
55409: LD_INT 6
55411: ST_TO_ADDR
55412: GO 55988
55414: LD_INT 4
55416: DOUBLE
55417: GREATEREQUAL
55418: IFFALSE 55426
55420: LD_INT 9
55422: DOUBLE
55423: LESSEQUAL
55424: IFTRUE 55428
55426: GO 55480
55428: POP
// begin bc_type := b_lab_half ;
55429: LD_ADDR_OWVAR 42
55433: PUSH
55434: LD_INT 7
55436: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
55437: LD_ADDR_OWVAR 44
55441: PUSH
55442: LD_INT 10
55444: PUSH
55445: LD_INT 11
55447: PUSH
55448: LD_INT 12
55450: PUSH
55451: LD_INT 15
55453: PUSH
55454: LD_INT 14
55456: PUSH
55457: LD_INT 13
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: PUSH
55468: LD_VAR 0 2
55472: PUSH
55473: LD_INT 3
55475: MINUS
55476: ARRAY
55477: ST_TO_ADDR
// end ; 10 .. 13 :
55478: GO 55988
55480: LD_INT 10
55482: DOUBLE
55483: GREATEREQUAL
55484: IFFALSE 55492
55486: LD_INT 13
55488: DOUBLE
55489: LESSEQUAL
55490: IFTRUE 55494
55492: GO 55571
55494: POP
// begin bc_type := b_lab_full ;
55495: LD_ADDR_OWVAR 42
55499: PUSH
55500: LD_INT 8
55502: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
55503: LD_ADDR_OWVAR 44
55507: PUSH
55508: LD_INT 10
55510: PUSH
55511: LD_INT 12
55513: PUSH
55514: LD_INT 14
55516: PUSH
55517: LD_INT 13
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: PUSH
55526: LD_VAR 0 2
55530: PUSH
55531: LD_INT 9
55533: MINUS
55534: ARRAY
55535: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
55536: LD_ADDR_OWVAR 45
55540: PUSH
55541: LD_INT 11
55543: PUSH
55544: LD_INT 15
55546: PUSH
55547: LD_INT 12
55549: PUSH
55550: LD_INT 15
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: PUSH
55559: LD_VAR 0 2
55563: PUSH
55564: LD_INT 9
55566: MINUS
55567: ARRAY
55568: ST_TO_ADDR
// end ; 14 :
55569: GO 55988
55571: LD_INT 14
55573: DOUBLE
55574: EQUAL
55575: IFTRUE 55579
55577: GO 55590
55579: POP
// bc_type := b_workshop ; 15 :
55580: LD_ADDR_OWVAR 42
55584: PUSH
55585: LD_INT 2
55587: ST_TO_ADDR
55588: GO 55988
55590: LD_INT 15
55592: DOUBLE
55593: EQUAL
55594: IFTRUE 55598
55596: GO 55609
55598: POP
// bc_type := b_factory ; 16 :
55599: LD_ADDR_OWVAR 42
55603: PUSH
55604: LD_INT 3
55606: ST_TO_ADDR
55607: GO 55988
55609: LD_INT 16
55611: DOUBLE
55612: EQUAL
55613: IFTRUE 55617
55615: GO 55628
55617: POP
// bc_type := b_ext_gun ; 17 :
55618: LD_ADDR_OWVAR 42
55622: PUSH
55623: LD_INT 17
55625: ST_TO_ADDR
55626: GO 55988
55628: LD_INT 17
55630: DOUBLE
55631: EQUAL
55632: IFTRUE 55636
55634: GO 55664
55636: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
55637: LD_ADDR_OWVAR 42
55641: PUSH
55642: LD_INT 19
55644: PUSH
55645: LD_INT 23
55647: PUSH
55648: LD_INT 19
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: PUSH
55656: LD_VAR 0 1
55660: ARRAY
55661: ST_TO_ADDR
55662: GO 55988
55664: LD_INT 18
55666: DOUBLE
55667: EQUAL
55668: IFTRUE 55672
55670: GO 55683
55672: POP
// bc_type := b_ext_radar ; 19 :
55673: LD_ADDR_OWVAR 42
55677: PUSH
55678: LD_INT 20
55680: ST_TO_ADDR
55681: GO 55988
55683: LD_INT 19
55685: DOUBLE
55686: EQUAL
55687: IFTRUE 55691
55689: GO 55702
55691: POP
// bc_type := b_ext_radio ; 20 :
55692: LD_ADDR_OWVAR 42
55696: PUSH
55697: LD_INT 22
55699: ST_TO_ADDR
55700: GO 55988
55702: LD_INT 20
55704: DOUBLE
55705: EQUAL
55706: IFTRUE 55710
55708: GO 55721
55710: POP
// bc_type := b_ext_siberium ; 21 :
55711: LD_ADDR_OWVAR 42
55715: PUSH
55716: LD_INT 21
55718: ST_TO_ADDR
55719: GO 55988
55721: LD_INT 21
55723: DOUBLE
55724: EQUAL
55725: IFTRUE 55729
55727: GO 55740
55729: POP
// bc_type := b_ext_computer ; 22 :
55730: LD_ADDR_OWVAR 42
55734: PUSH
55735: LD_INT 24
55737: ST_TO_ADDR
55738: GO 55988
55740: LD_INT 22
55742: DOUBLE
55743: EQUAL
55744: IFTRUE 55748
55746: GO 55759
55748: POP
// bc_type := b_ext_track ; 23 :
55749: LD_ADDR_OWVAR 42
55753: PUSH
55754: LD_INT 16
55756: ST_TO_ADDR
55757: GO 55988
55759: LD_INT 23
55761: DOUBLE
55762: EQUAL
55763: IFTRUE 55767
55765: GO 55778
55767: POP
// bc_type := b_ext_laser ; 24 :
55768: LD_ADDR_OWVAR 42
55772: PUSH
55773: LD_INT 25
55775: ST_TO_ADDR
55776: GO 55988
55778: LD_INT 24
55780: DOUBLE
55781: EQUAL
55782: IFTRUE 55786
55784: GO 55797
55786: POP
// bc_type := b_control_tower ; 25 :
55787: LD_ADDR_OWVAR 42
55791: PUSH
55792: LD_INT 36
55794: ST_TO_ADDR
55795: GO 55988
55797: LD_INT 25
55799: DOUBLE
55800: EQUAL
55801: IFTRUE 55805
55803: GO 55816
55805: POP
// bc_type := b_breastwork ; 26 :
55806: LD_ADDR_OWVAR 42
55810: PUSH
55811: LD_INT 31
55813: ST_TO_ADDR
55814: GO 55988
55816: LD_INT 26
55818: DOUBLE
55819: EQUAL
55820: IFTRUE 55824
55822: GO 55835
55824: POP
// bc_type := b_bunker ; 27 :
55825: LD_ADDR_OWVAR 42
55829: PUSH
55830: LD_INT 32
55832: ST_TO_ADDR
55833: GO 55988
55835: LD_INT 27
55837: DOUBLE
55838: EQUAL
55839: IFTRUE 55843
55841: GO 55854
55843: POP
// bc_type := b_turret ; 28 :
55844: LD_ADDR_OWVAR 42
55848: PUSH
55849: LD_INT 33
55851: ST_TO_ADDR
55852: GO 55988
55854: LD_INT 28
55856: DOUBLE
55857: EQUAL
55858: IFTRUE 55862
55860: GO 55873
55862: POP
// bc_type := b_armoury ; 29 :
55863: LD_ADDR_OWVAR 42
55867: PUSH
55868: LD_INT 4
55870: ST_TO_ADDR
55871: GO 55988
55873: LD_INT 29
55875: DOUBLE
55876: EQUAL
55877: IFTRUE 55881
55879: GO 55892
55881: POP
// bc_type := b_barracks ; 30 :
55882: LD_ADDR_OWVAR 42
55886: PUSH
55887: LD_INT 5
55889: ST_TO_ADDR
55890: GO 55988
55892: LD_INT 30
55894: DOUBLE
55895: EQUAL
55896: IFTRUE 55900
55898: GO 55911
55900: POP
// bc_type := b_solar_power ; 31 :
55901: LD_ADDR_OWVAR 42
55905: PUSH
55906: LD_INT 27
55908: ST_TO_ADDR
55909: GO 55988
55911: LD_INT 31
55913: DOUBLE
55914: EQUAL
55915: IFTRUE 55919
55917: GO 55930
55919: POP
// bc_type := b_oil_power ; 32 :
55920: LD_ADDR_OWVAR 42
55924: PUSH
55925: LD_INT 26
55927: ST_TO_ADDR
55928: GO 55988
55930: LD_INT 32
55932: DOUBLE
55933: EQUAL
55934: IFTRUE 55938
55936: GO 55949
55938: POP
// bc_type := b_siberite_power ; 33 :
55939: LD_ADDR_OWVAR 42
55943: PUSH
55944: LD_INT 28
55946: ST_TO_ADDR
55947: GO 55988
55949: LD_INT 33
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55957
55955: GO 55968
55957: POP
// bc_type := b_oil_mine ; 34 :
55958: LD_ADDR_OWVAR 42
55962: PUSH
55963: LD_INT 29
55965: ST_TO_ADDR
55966: GO 55988
55968: LD_INT 34
55970: DOUBLE
55971: EQUAL
55972: IFTRUE 55976
55974: GO 55987
55976: POP
// bc_type := b_siberite_mine ; end ;
55977: LD_ADDR_OWVAR 42
55981: PUSH
55982: LD_INT 30
55984: ST_TO_ADDR
55985: GO 55988
55987: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
55988: LD_ADDR_VAR 0 8
55992: PUSH
55993: LD_VAR 0 5
55997: PPUSH
55998: LD_VAR 0 6
56002: PPUSH
56003: LD_VAR 0 3
56007: PPUSH
56008: CALL_OW 47
56012: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
56013: LD_OWVAR 42
56017: PUSH
56018: LD_INT 32
56020: PUSH
56021: LD_INT 33
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: IN
56028: IFFALSE 56044
// PlaceWeaponTurret ( b , weapon ) ;
56030: LD_VAR 0 8
56034: PPUSH
56035: LD_VAR 0 4
56039: PPUSH
56040: CALL_OW 431
// end ;
56044: LD_VAR 0 7
56048: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
56049: LD_INT 0
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56055: LD_ADDR_VAR 0 4
56059: PUSH
56060: LD_INT 22
56062: PUSH
56063: LD_OWVAR 2
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: LD_INT 30
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 30
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PPUSH
56104: CALL_OW 69
56108: ST_TO_ADDR
// if not tmp then
56109: LD_VAR 0 4
56113: NOT
56114: IFFALSE 56118
// exit ;
56116: GO 56177
// for i in tmp do
56118: LD_ADDR_VAR 0 2
56122: PUSH
56123: LD_VAR 0 4
56127: PUSH
56128: FOR_IN
56129: IFFALSE 56175
// for j = 1 to 3 do
56131: LD_ADDR_VAR 0 3
56135: PUSH
56136: DOUBLE
56137: LD_INT 1
56139: DEC
56140: ST_TO_ADDR
56141: LD_INT 3
56143: PUSH
56144: FOR_TO
56145: IFFALSE 56171
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
56147: LD_VAR 0 2
56151: PPUSH
56152: CALL_OW 274
56156: PPUSH
56157: LD_VAR 0 3
56161: PPUSH
56162: LD_INT 99999
56164: PPUSH
56165: CALL_OW 277
56169: GO 56144
56171: POP
56172: POP
56173: GO 56128
56175: POP
56176: POP
// end ;
56177: LD_VAR 0 1
56181: RET
// export function hHackSetLevel10 ; var i , j ; begin
56182: LD_INT 0
56184: PPUSH
56185: PPUSH
56186: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56187: LD_ADDR_VAR 0 2
56191: PUSH
56192: LD_INT 21
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PPUSH
56202: CALL_OW 69
56206: PUSH
56207: FOR_IN
56208: IFFALSE 56260
// if IsSelected ( i ) then
56210: LD_VAR 0 2
56214: PPUSH
56215: CALL_OW 306
56219: IFFALSE 56258
// begin for j := 1 to 4 do
56221: LD_ADDR_VAR 0 3
56225: PUSH
56226: DOUBLE
56227: LD_INT 1
56229: DEC
56230: ST_TO_ADDR
56231: LD_INT 4
56233: PUSH
56234: FOR_TO
56235: IFFALSE 56256
// SetSkill ( i , j , 10 ) ;
56237: LD_VAR 0 2
56241: PPUSH
56242: LD_VAR 0 3
56246: PPUSH
56247: LD_INT 10
56249: PPUSH
56250: CALL_OW 237
56254: GO 56234
56256: POP
56257: POP
// end ;
56258: GO 56207
56260: POP
56261: POP
// end ;
56262: LD_VAR 0 1
56266: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
56267: LD_INT 0
56269: PPUSH
56270: PPUSH
56271: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
56272: LD_ADDR_VAR 0 2
56276: PUSH
56277: LD_INT 22
56279: PUSH
56280: LD_OWVAR 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 21
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PPUSH
56303: CALL_OW 69
56307: PUSH
56308: FOR_IN
56309: IFFALSE 56350
// begin for j := 1 to 4 do
56311: LD_ADDR_VAR 0 3
56315: PUSH
56316: DOUBLE
56317: LD_INT 1
56319: DEC
56320: ST_TO_ADDR
56321: LD_INT 4
56323: PUSH
56324: FOR_TO
56325: IFFALSE 56346
// SetSkill ( i , j , 10 ) ;
56327: LD_VAR 0 2
56331: PPUSH
56332: LD_VAR 0 3
56336: PPUSH
56337: LD_INT 10
56339: PPUSH
56340: CALL_OW 237
56344: GO 56324
56346: POP
56347: POP
// end ;
56348: GO 56308
56350: POP
56351: POP
// end ;
56352: LD_VAR 0 1
56356: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
56357: LD_INT 0
56359: PPUSH
// uc_side := your_side ;
56360: LD_ADDR_OWVAR 20
56364: PUSH
56365: LD_OWVAR 2
56369: ST_TO_ADDR
// uc_nation := nation ;
56370: LD_ADDR_OWVAR 21
56374: PUSH
56375: LD_VAR 0 1
56379: ST_TO_ADDR
// InitHc ;
56380: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
56384: LD_INT 0
56386: PPUSH
56387: LD_VAR 0 2
56391: PPUSH
56392: LD_VAR 0 3
56396: PPUSH
56397: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
56401: LD_VAR 0 4
56405: PPUSH
56406: LD_VAR 0 5
56410: PPUSH
56411: CALL_OW 428
56415: PUSH
56416: LD_INT 0
56418: EQUAL
56419: IFFALSE 56443
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
56421: CALL_OW 44
56425: PPUSH
56426: LD_VAR 0 4
56430: PPUSH
56431: LD_VAR 0 5
56435: PPUSH
56436: LD_INT 1
56438: PPUSH
56439: CALL_OW 48
// end ;
56443: LD_VAR 0 6
56447: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
56448: LD_INT 0
56450: PPUSH
56451: PPUSH
// uc_side := your_side ;
56452: LD_ADDR_OWVAR 20
56456: PUSH
56457: LD_OWVAR 2
56461: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: LD_INT 5
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: IN
56489: IFFALSE 56501
// uc_nation := nation_american else
56491: LD_ADDR_OWVAR 21
56495: PUSH
56496: LD_INT 1
56498: ST_TO_ADDR
56499: GO 56544
// if chassis in [ 11 , 12 , 13 , 14 ] then
56501: LD_VAR 0 1
56505: PUSH
56506: LD_INT 11
56508: PUSH
56509: LD_INT 12
56511: PUSH
56512: LD_INT 13
56514: PUSH
56515: LD_INT 14
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: IN
56524: IFFALSE 56536
// uc_nation := nation_arabian else
56526: LD_ADDR_OWVAR 21
56530: PUSH
56531: LD_INT 2
56533: ST_TO_ADDR
56534: GO 56544
// uc_nation := nation_russian ;
56536: LD_ADDR_OWVAR 21
56540: PUSH
56541: LD_INT 3
56543: ST_TO_ADDR
// vc_chassis := chassis ;
56544: LD_ADDR_OWVAR 37
56548: PUSH
56549: LD_VAR 0 1
56553: ST_TO_ADDR
// vc_engine := engine ;
56554: LD_ADDR_OWVAR 39
56558: PUSH
56559: LD_VAR 0 2
56563: ST_TO_ADDR
// vc_control := control ;
56564: LD_ADDR_OWVAR 38
56568: PUSH
56569: LD_VAR 0 3
56573: ST_TO_ADDR
// vc_weapon := weapon ;
56574: LD_ADDR_OWVAR 40
56578: PUSH
56579: LD_VAR 0 4
56583: ST_TO_ADDR
// un := CreateVehicle ;
56584: LD_ADDR_VAR 0 8
56588: PUSH
56589: CALL_OW 45
56593: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
56594: LD_VAR 0 8
56598: PPUSH
56599: LD_INT 0
56601: PPUSH
56602: LD_INT 5
56604: PPUSH
56605: CALL_OW 12
56609: PPUSH
56610: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
56614: LD_VAR 0 8
56618: PPUSH
56619: LD_VAR 0 5
56623: PPUSH
56624: LD_VAR 0 6
56628: PPUSH
56629: LD_INT 1
56631: PPUSH
56632: CALL_OW 48
// end ;
56636: LD_VAR 0 7
56640: RET
// export hInvincible ; every 1 do
56641: GO 56643
56643: DISABLE
// hInvincible := [ ] ;
56644: LD_ADDR_EXP 157
56648: PUSH
56649: EMPTY
56650: ST_TO_ADDR
56651: END
// every 10 do var i ;
56652: GO 56654
56654: DISABLE
56655: LD_INT 0
56657: PPUSH
// begin enable ;
56658: ENABLE
// if not hInvincible then
56659: LD_EXP 157
56663: NOT
56664: IFFALSE 56668
// exit ;
56666: GO 56712
// for i in hInvincible do
56668: LD_ADDR_VAR 0 1
56672: PUSH
56673: LD_EXP 157
56677: PUSH
56678: FOR_IN
56679: IFFALSE 56710
// if GetLives ( i ) < 1000 then
56681: LD_VAR 0 1
56685: PPUSH
56686: CALL_OW 256
56690: PUSH
56691: LD_INT 1000
56693: LESS
56694: IFFALSE 56708
// SetLives ( i , 1000 ) ;
56696: LD_VAR 0 1
56700: PPUSH
56701: LD_INT 1000
56703: PPUSH
56704: CALL_OW 234
56708: GO 56678
56710: POP
56711: POP
// end ;
56712: PPOPN 1
56714: END
// export function hHackInvincible ; var i ; begin
56715: LD_INT 0
56717: PPUSH
56718: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
56719: LD_ADDR_VAR 0 2
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: LD_INT 21
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 21
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: LIST
56751: PPUSH
56752: CALL_OW 69
56756: PUSH
56757: FOR_IN
56758: IFFALSE 56819
// if IsSelected ( i ) then
56760: LD_VAR 0 2
56764: PPUSH
56765: CALL_OW 306
56769: IFFALSE 56817
// begin if i in hInvincible then
56771: LD_VAR 0 2
56775: PUSH
56776: LD_EXP 157
56780: IN
56781: IFFALSE 56801
// hInvincible := hInvincible diff i else
56783: LD_ADDR_EXP 157
56787: PUSH
56788: LD_EXP 157
56792: PUSH
56793: LD_VAR 0 2
56797: DIFF
56798: ST_TO_ADDR
56799: GO 56817
// hInvincible := hInvincible union i ;
56801: LD_ADDR_EXP 157
56805: PUSH
56806: LD_EXP 157
56810: PUSH
56811: LD_VAR 0 2
56815: UNION
56816: ST_TO_ADDR
// end ;
56817: GO 56757
56819: POP
56820: POP
// end ;
56821: LD_VAR 0 1
56825: RET
// export function hHackInvisible ; var i , j ; begin
56826: LD_INT 0
56828: PPUSH
56829: PPUSH
56830: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56831: LD_ADDR_VAR 0 2
56835: PUSH
56836: LD_INT 21
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PPUSH
56846: CALL_OW 69
56850: PUSH
56851: FOR_IN
56852: IFFALSE 56876
// if IsSelected ( i ) then
56854: LD_VAR 0 2
56858: PPUSH
56859: CALL_OW 306
56863: IFFALSE 56874
// ComForceInvisible ( i ) ;
56865: LD_VAR 0 2
56869: PPUSH
56870: CALL_OW 496
56874: GO 56851
56876: POP
56877: POP
// end ;
56878: LD_VAR 0 1
56882: RET
// export function hHackChangeYourSide ; begin
56883: LD_INT 0
56885: PPUSH
// if your_side = 8 then
56886: LD_OWVAR 2
56890: PUSH
56891: LD_INT 8
56893: EQUAL
56894: IFFALSE 56906
// your_side := 0 else
56896: LD_ADDR_OWVAR 2
56900: PUSH
56901: LD_INT 0
56903: ST_TO_ADDR
56904: GO 56920
// your_side := your_side + 1 ;
56906: LD_ADDR_OWVAR 2
56910: PUSH
56911: LD_OWVAR 2
56915: PUSH
56916: LD_INT 1
56918: PLUS
56919: ST_TO_ADDR
// end ;
56920: LD_VAR 0 1
56924: RET
// export function hHackChangeUnitSide ; var i , j ; begin
56925: LD_INT 0
56927: PPUSH
56928: PPUSH
56929: PPUSH
// for i in all_units do
56930: LD_ADDR_VAR 0 2
56934: PUSH
56935: LD_OWVAR 3
56939: PUSH
56940: FOR_IN
56941: IFFALSE 57019
// if IsSelected ( i ) then
56943: LD_VAR 0 2
56947: PPUSH
56948: CALL_OW 306
56952: IFFALSE 57017
// begin j := GetSide ( i ) ;
56954: LD_ADDR_VAR 0 3
56958: PUSH
56959: LD_VAR 0 2
56963: PPUSH
56964: CALL_OW 255
56968: ST_TO_ADDR
// if j = 8 then
56969: LD_VAR 0 3
56973: PUSH
56974: LD_INT 8
56976: EQUAL
56977: IFFALSE 56989
// j := 0 else
56979: LD_ADDR_VAR 0 3
56983: PUSH
56984: LD_INT 0
56986: ST_TO_ADDR
56987: GO 57003
// j := j + 1 ;
56989: LD_ADDR_VAR 0 3
56993: PUSH
56994: LD_VAR 0 3
56998: PUSH
56999: LD_INT 1
57001: PLUS
57002: ST_TO_ADDR
// SetSide ( i , j ) ;
57003: LD_VAR 0 2
57007: PPUSH
57008: LD_VAR 0 3
57012: PPUSH
57013: CALL_OW 235
// end ;
57017: GO 56940
57019: POP
57020: POP
// end ;
57021: LD_VAR 0 1
57025: RET
// export function hHackFog ; begin
57026: LD_INT 0
57028: PPUSH
// FogOff ( true ) ;
57029: LD_INT 1
57031: PPUSH
57032: CALL_OW 344
// end ;
57036: LD_VAR 0 1
57040: RET
// export function hHackTeleport ( unit , x , y ) ; begin
57041: LD_INT 0
57043: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
57044: LD_VAR 0 1
57048: PPUSH
57049: LD_VAR 0 2
57053: PPUSH
57054: LD_VAR 0 3
57058: PPUSH
57059: LD_INT 1
57061: PPUSH
57062: LD_INT 1
57064: PPUSH
57065: CALL_OW 483
// CenterOnXY ( x , y ) ;
57069: LD_VAR 0 2
57073: PPUSH
57074: LD_VAR 0 3
57078: PPUSH
57079: CALL_OW 84
// end ; end_of_file
57083: LD_VAR 0 4
57087: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
57088: LD_INT 0
57090: PPUSH
57091: PPUSH
57092: PPUSH
57093: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
57094: LD_VAR 0 1
57098: PPUSH
57099: CALL_OW 264
57103: PUSH
57104: LD_EXP 84
57108: EQUAL
57109: IFFALSE 57181
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57111: LD_INT 68
57113: PPUSH
57114: LD_VAR 0 1
57118: PPUSH
57119: CALL_OW 255
57123: PPUSH
57124: CALL_OW 321
57128: PUSH
57129: LD_INT 2
57131: EQUAL
57132: IFFALSE 57144
// eff := 70 else
57134: LD_ADDR_VAR 0 4
57138: PUSH
57139: LD_INT 70
57141: ST_TO_ADDR
57142: GO 57152
// eff := 30 ;
57144: LD_ADDR_VAR 0 4
57148: PUSH
57149: LD_INT 30
57151: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57152: LD_VAR 0 1
57156: PPUSH
57157: CALL_OW 250
57161: PPUSH
57162: LD_VAR 0 1
57166: PPUSH
57167: CALL_OW 251
57171: PPUSH
57172: LD_VAR 0 4
57176: PPUSH
57177: CALL_OW 495
// end ; end ;
57181: LD_VAR 0 2
57185: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
57186: LD_INT 0
57188: PPUSH
// end ;
57189: LD_VAR 0 4
57193: RET
// export function SOS_Command ( cmd ) ; begin
57194: LD_INT 0
57196: PPUSH
// end ;
57197: LD_VAR 0 2
57201: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
57202: LD_INT 0
57204: PPUSH
// end ;
57205: LD_VAR 0 6
57209: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
57210: LD_INT 0
57212: PPUSH
57213: PPUSH
// if not vehicle or not factory then
57214: LD_VAR 0 1
57218: NOT
57219: PUSH
57220: LD_VAR 0 2
57224: NOT
57225: OR
57226: IFFALSE 57230
// exit ;
57228: GO 57461
// if factoryWaypoints >= factory then
57230: LD_EXP 158
57234: PUSH
57235: LD_VAR 0 2
57239: GREATEREQUAL
57240: IFFALSE 57461
// if factoryWaypoints [ factory ] then
57242: LD_EXP 158
57246: PUSH
57247: LD_VAR 0 2
57251: ARRAY
57252: IFFALSE 57461
// begin if GetControl ( vehicle ) = control_manual then
57254: LD_VAR 0 1
57258: PPUSH
57259: CALL_OW 263
57263: PUSH
57264: LD_INT 1
57266: EQUAL
57267: IFFALSE 57348
// begin driver := IsDrivenBy ( vehicle ) ;
57269: LD_ADDR_VAR 0 4
57273: PUSH
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 311
57283: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57284: LD_VAR 0 4
57288: PPUSH
57289: LD_EXP 158
57293: PUSH
57294: LD_VAR 0 2
57298: ARRAY
57299: PUSH
57300: LD_INT 3
57302: ARRAY
57303: PPUSH
57304: LD_EXP 158
57308: PUSH
57309: LD_VAR 0 2
57313: ARRAY
57314: PUSH
57315: LD_INT 4
57317: ARRAY
57318: PPUSH
57319: CALL_OW 171
// AddComExitVehicle ( driver ) ;
57323: LD_VAR 0 4
57327: PPUSH
57328: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
57332: LD_VAR 0 4
57336: PPUSH
57337: LD_VAR 0 2
57341: PPUSH
57342: CALL_OW 180
// end else
57346: GO 57461
// if GetControl ( vehicle ) = control_remote then
57348: LD_VAR 0 1
57352: PPUSH
57353: CALL_OW 263
57357: PUSH
57358: LD_INT 2
57360: EQUAL
57361: IFFALSE 57422
// begin wait ( 0 0$2 ) ;
57363: LD_INT 70
57365: PPUSH
57366: CALL_OW 67
// if Connect ( vehicle ) then
57370: LD_VAR 0 1
57374: PPUSH
57375: CALL 10291 0 1
57379: IFFALSE 57420
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57381: LD_VAR 0 1
57385: PPUSH
57386: LD_EXP 158
57390: PUSH
57391: LD_VAR 0 2
57395: ARRAY
57396: PUSH
57397: LD_INT 3
57399: ARRAY
57400: PPUSH
57401: LD_EXP 158
57405: PUSH
57406: LD_VAR 0 2
57410: ARRAY
57411: PUSH
57412: LD_INT 4
57414: ARRAY
57415: PPUSH
57416: CALL_OW 171
// end else
57420: GO 57461
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
57422: LD_VAR 0 1
57426: PPUSH
57427: LD_EXP 158
57431: PUSH
57432: LD_VAR 0 2
57436: ARRAY
57437: PUSH
57438: LD_INT 3
57440: ARRAY
57441: PPUSH
57442: LD_EXP 158
57446: PUSH
57447: LD_VAR 0 2
57451: ARRAY
57452: PUSH
57453: LD_INT 4
57455: ARRAY
57456: PPUSH
57457: CALL_OW 171
// end ; end ;
57461: LD_VAR 0 3
57465: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57466: LD_INT 0
57468: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57469: LD_VAR 0 1
57473: PUSH
57474: LD_INT 250
57476: EQUAL
57477: PUSH
57478: LD_VAR 0 2
57482: PPUSH
57483: CALL_OW 264
57487: PUSH
57488: LD_EXP 87
57492: EQUAL
57493: AND
57494: IFFALSE 57515
// MinerPlaceMine ( unit , x , y ) ;
57496: LD_VAR 0 2
57500: PPUSH
57501: LD_VAR 0 4
57505: PPUSH
57506: LD_VAR 0 5
57510: PPUSH
57511: CALL 60243 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57515: LD_VAR 0 1
57519: PUSH
57520: LD_INT 251
57522: EQUAL
57523: PUSH
57524: LD_VAR 0 2
57528: PPUSH
57529: CALL_OW 264
57533: PUSH
57534: LD_EXP 87
57538: EQUAL
57539: AND
57540: IFFALSE 57561
// MinerDetonateMine ( unit , x , y ) ;
57542: LD_VAR 0 2
57546: PPUSH
57547: LD_VAR 0 4
57551: PPUSH
57552: LD_VAR 0 5
57556: PPUSH
57557: CALL 60520 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57561: LD_VAR 0 1
57565: PUSH
57566: LD_INT 252
57568: EQUAL
57569: PUSH
57570: LD_VAR 0 2
57574: PPUSH
57575: CALL_OW 264
57579: PUSH
57580: LD_EXP 87
57584: EQUAL
57585: AND
57586: IFFALSE 57607
// MinerCreateMinefield ( unit , x , y ) ;
57588: LD_VAR 0 2
57592: PPUSH
57593: LD_VAR 0 4
57597: PPUSH
57598: LD_VAR 0 5
57602: PPUSH
57603: CALL 60937 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57607: LD_VAR 0 1
57611: PUSH
57612: LD_INT 253
57614: EQUAL
57615: PUSH
57616: LD_VAR 0 2
57620: PPUSH
57621: CALL_OW 257
57625: PUSH
57626: LD_INT 5
57628: EQUAL
57629: AND
57630: IFFALSE 57651
// ComBinocular ( unit , x , y ) ;
57632: LD_VAR 0 2
57636: PPUSH
57637: LD_VAR 0 4
57641: PPUSH
57642: LD_VAR 0 5
57646: PPUSH
57647: CALL 61308 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57651: LD_VAR 0 1
57655: PUSH
57656: LD_INT 254
57658: EQUAL
57659: PUSH
57660: LD_VAR 0 2
57664: PPUSH
57665: CALL_OW 264
57669: PUSH
57670: LD_EXP 82
57674: EQUAL
57675: AND
57676: PUSH
57677: LD_VAR 0 3
57681: PPUSH
57682: CALL_OW 263
57686: PUSH
57687: LD_INT 3
57689: EQUAL
57690: AND
57691: IFFALSE 57707
// HackDestroyVehicle ( unit , selectedUnit ) ;
57693: LD_VAR 0 2
57697: PPUSH
57698: LD_VAR 0 3
57702: PPUSH
57703: CALL 59603 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57707: LD_VAR 0 1
57711: PUSH
57712: LD_INT 255
57714: EQUAL
57715: PUSH
57716: LD_VAR 0 2
57720: PPUSH
57721: CALL_OW 264
57725: PUSH
57726: LD_INT 14
57728: PUSH
57729: LD_INT 53
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: IN
57736: AND
57737: PUSH
57738: LD_VAR 0 4
57742: PPUSH
57743: LD_VAR 0 5
57747: PPUSH
57748: CALL_OW 488
57752: AND
57753: IFFALSE 57777
// CutTreeXYR ( unit , x , y , 12 ) ;
57755: LD_VAR 0 2
57759: PPUSH
57760: LD_VAR 0 4
57764: PPUSH
57765: LD_VAR 0 5
57769: PPUSH
57770: LD_INT 12
57772: PPUSH
57773: CALL 58169 0 4
// if cmd = 256 then
57777: LD_VAR 0 1
57781: PUSH
57782: LD_INT 256
57784: EQUAL
57785: IFFALSE 57806
// SetFactoryWaypoint ( unit , x , y ) ;
57787: LD_VAR 0 2
57791: PPUSH
57792: LD_VAR 0 4
57796: PPUSH
57797: LD_VAR 0 5
57801: PPUSH
57802: CALL 57811 0 3
// end ;
57806: LD_VAR 0 6
57810: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
57811: LD_INT 0
57813: PPUSH
57814: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
57815: LD_VAR 0 1
57819: NOT
57820: PUSH
57821: LD_VAR 0 2
57825: PPUSH
57826: LD_VAR 0 3
57830: PPUSH
57831: CALL_OW 488
57835: NOT
57836: OR
57837: PUSH
57838: LD_VAR 0 1
57842: PPUSH
57843: CALL_OW 266
57847: PUSH
57848: LD_INT 3
57850: NONEQUAL
57851: PUSH
57852: LD_VAR 0 1
57856: PPUSH
57857: CALL_OW 247
57861: PUSH
57862: LD_INT 1
57864: EQUAL
57865: NOT
57866: AND
57867: OR
57868: IFFALSE 57872
// exit ;
57870: GO 58021
// if GetType ( factory ) = unit_human then
57872: LD_VAR 0 1
57876: PPUSH
57877: CALL_OW 247
57881: PUSH
57882: LD_INT 1
57884: EQUAL
57885: IFFALSE 57902
// factory := IsInUnit ( factory ) ;
57887: LD_ADDR_VAR 0 1
57891: PUSH
57892: LD_VAR 0 1
57896: PPUSH
57897: CALL_OW 310
57901: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
57902: LD_VAR 0 1
57906: PPUSH
57907: CALL_OW 266
57911: PUSH
57912: LD_INT 3
57914: NONEQUAL
57915: IFFALSE 57919
// exit ;
57917: GO 58021
// if HexInfo ( x , y ) = factory then
57919: LD_VAR 0 2
57923: PPUSH
57924: LD_VAR 0 3
57928: PPUSH
57929: CALL_OW 428
57933: PUSH
57934: LD_VAR 0 1
57938: EQUAL
57939: IFFALSE 57966
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
57941: LD_ADDR_EXP 158
57945: PUSH
57946: LD_EXP 158
57950: PPUSH
57951: LD_VAR 0 1
57955: PPUSH
57956: LD_INT 0
57958: PPUSH
57959: CALL_OW 1
57963: ST_TO_ADDR
57964: GO 58017
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
57966: LD_ADDR_EXP 158
57970: PUSH
57971: LD_EXP 158
57975: PPUSH
57976: LD_VAR 0 1
57980: PPUSH
57981: LD_VAR 0 1
57985: PPUSH
57986: CALL_OW 255
57990: PUSH
57991: LD_VAR 0 1
57995: PUSH
57996: LD_VAR 0 2
58000: PUSH
58001: LD_VAR 0 3
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: PPUSH
58012: CALL_OW 1
58016: ST_TO_ADDR
// UpdateFactoryWaypoints ;
58017: CALL 58026 0 0
// end ;
58021: LD_VAR 0 4
58025: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
58026: LD_INT 0
58028: PPUSH
58029: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
58030: LD_STRING resetFactoryWaypoint();
58032: PPUSH
58033: CALL_OW 559
// if factoryWaypoints then
58037: LD_EXP 158
58041: IFFALSE 58164
// begin for i := 1 to factoryWaypoints do
58043: LD_ADDR_VAR 0 2
58047: PUSH
58048: DOUBLE
58049: LD_INT 1
58051: DEC
58052: ST_TO_ADDR
58053: LD_EXP 158
58057: PUSH
58058: FOR_TO
58059: IFFALSE 58162
// if factoryWaypoints [ i ] then
58061: LD_EXP 158
58065: PUSH
58066: LD_VAR 0 2
58070: ARRAY
58071: IFFALSE 58160
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
58073: LD_STRING setFactoryWaypointXY(
58075: PUSH
58076: LD_EXP 158
58080: PUSH
58081: LD_VAR 0 2
58085: ARRAY
58086: PUSH
58087: LD_INT 1
58089: ARRAY
58090: STR
58091: PUSH
58092: LD_STRING ,
58094: STR
58095: PUSH
58096: LD_EXP 158
58100: PUSH
58101: LD_VAR 0 2
58105: ARRAY
58106: PUSH
58107: LD_INT 2
58109: ARRAY
58110: STR
58111: PUSH
58112: LD_STRING ,
58114: STR
58115: PUSH
58116: LD_EXP 158
58120: PUSH
58121: LD_VAR 0 2
58125: ARRAY
58126: PUSH
58127: LD_INT 3
58129: ARRAY
58130: STR
58131: PUSH
58132: LD_STRING ,
58134: STR
58135: PUSH
58136: LD_EXP 158
58140: PUSH
58141: LD_VAR 0 2
58145: ARRAY
58146: PUSH
58147: LD_INT 4
58149: ARRAY
58150: STR
58151: PUSH
58152: LD_STRING )
58154: STR
58155: PPUSH
58156: CALL_OW 559
58160: GO 58058
58162: POP
58163: POP
// end ; end ;
58164: LD_VAR 0 1
58168: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58169: LD_INT 0
58171: PPUSH
58172: PPUSH
58173: PPUSH
58174: PPUSH
58175: PPUSH
58176: PPUSH
58177: PPUSH
58178: PPUSH
58179: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
58180: LD_VAR 0 1
58184: NOT
58185: PUSH
58186: LD_VAR 0 2
58190: PPUSH
58191: LD_VAR 0 3
58195: PPUSH
58196: CALL_OW 488
58200: NOT
58201: OR
58202: PUSH
58203: LD_VAR 0 4
58207: NOT
58208: OR
58209: IFFALSE 58213
// exit ;
58211: GO 58553
// list := [ ] ;
58213: LD_ADDR_VAR 0 13
58217: PUSH
58218: EMPTY
58219: ST_TO_ADDR
// if x - r < 0 then
58220: LD_VAR 0 2
58224: PUSH
58225: LD_VAR 0 4
58229: MINUS
58230: PUSH
58231: LD_INT 0
58233: LESS
58234: IFFALSE 58246
// min_x := 0 else
58236: LD_ADDR_VAR 0 7
58240: PUSH
58241: LD_INT 0
58243: ST_TO_ADDR
58244: GO 58262
// min_x := x - r ;
58246: LD_ADDR_VAR 0 7
58250: PUSH
58251: LD_VAR 0 2
58255: PUSH
58256: LD_VAR 0 4
58260: MINUS
58261: ST_TO_ADDR
// if y - r < 0 then
58262: LD_VAR 0 3
58266: PUSH
58267: LD_VAR 0 4
58271: MINUS
58272: PUSH
58273: LD_INT 0
58275: LESS
58276: IFFALSE 58288
// min_y := 0 else
58278: LD_ADDR_VAR 0 8
58282: PUSH
58283: LD_INT 0
58285: ST_TO_ADDR
58286: GO 58304
// min_y := y - r ;
58288: LD_ADDR_VAR 0 8
58292: PUSH
58293: LD_VAR 0 3
58297: PUSH
58298: LD_VAR 0 4
58302: MINUS
58303: ST_TO_ADDR
// max_x := x + r ;
58304: LD_ADDR_VAR 0 9
58308: PUSH
58309: LD_VAR 0 2
58313: PUSH
58314: LD_VAR 0 4
58318: PLUS
58319: ST_TO_ADDR
// max_y := y + r ;
58320: LD_ADDR_VAR 0 10
58324: PUSH
58325: LD_VAR 0 3
58329: PUSH
58330: LD_VAR 0 4
58334: PLUS
58335: ST_TO_ADDR
// for _x = min_x to max_x do
58336: LD_ADDR_VAR 0 11
58340: PUSH
58341: DOUBLE
58342: LD_VAR 0 7
58346: DEC
58347: ST_TO_ADDR
58348: LD_VAR 0 9
58352: PUSH
58353: FOR_TO
58354: IFFALSE 58471
// for _y = min_y to max_y do
58356: LD_ADDR_VAR 0 12
58360: PUSH
58361: DOUBLE
58362: LD_VAR 0 8
58366: DEC
58367: ST_TO_ADDR
58368: LD_VAR 0 10
58372: PUSH
58373: FOR_TO
58374: IFFALSE 58467
// begin if not ValidHex ( _x , _y ) then
58376: LD_VAR 0 11
58380: PPUSH
58381: LD_VAR 0 12
58385: PPUSH
58386: CALL_OW 488
58390: NOT
58391: IFFALSE 58395
// continue ;
58393: GO 58373
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58395: LD_VAR 0 11
58399: PPUSH
58400: LD_VAR 0 12
58404: PPUSH
58405: CALL_OW 351
58409: PUSH
58410: LD_VAR 0 11
58414: PPUSH
58415: LD_VAR 0 12
58419: PPUSH
58420: CALL_OW 554
58424: AND
58425: IFFALSE 58465
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58427: LD_ADDR_VAR 0 13
58431: PUSH
58432: LD_VAR 0 13
58436: PPUSH
58437: LD_VAR 0 13
58441: PUSH
58442: LD_INT 1
58444: PLUS
58445: PPUSH
58446: LD_VAR 0 11
58450: PUSH
58451: LD_VAR 0 12
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PPUSH
58460: CALL_OW 2
58464: ST_TO_ADDR
// end ;
58465: GO 58373
58467: POP
58468: POP
58469: GO 58353
58471: POP
58472: POP
// if not list then
58473: LD_VAR 0 13
58477: NOT
58478: IFFALSE 58482
// exit ;
58480: GO 58553
// for i in list do
58482: LD_ADDR_VAR 0 6
58486: PUSH
58487: LD_VAR 0 13
58491: PUSH
58492: FOR_IN
58493: IFFALSE 58551
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58495: LD_VAR 0 1
58499: PPUSH
58500: LD_STRING M
58502: PUSH
58503: LD_VAR 0 6
58507: PUSH
58508: LD_INT 1
58510: ARRAY
58511: PUSH
58512: LD_VAR 0 6
58516: PUSH
58517: LD_INT 2
58519: ARRAY
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: PUSH
58542: EMPTY
58543: LIST
58544: PPUSH
58545: CALL_OW 447
58549: GO 58492
58551: POP
58552: POP
// end ;
58553: LD_VAR 0 5
58557: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58558: LD_EXP 159
58562: NOT
58563: IFFALSE 58613
58565: GO 58567
58567: DISABLE
// begin initHack := true ;
58568: LD_ADDR_EXP 159
58572: PUSH
58573: LD_INT 1
58575: ST_TO_ADDR
// hackTanks := [ ] ;
58576: LD_ADDR_EXP 160
58580: PUSH
58581: EMPTY
58582: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58583: LD_ADDR_EXP 161
58587: PUSH
58588: EMPTY
58589: ST_TO_ADDR
// hackLimit := 3 ;
58590: LD_ADDR_EXP 162
58594: PUSH
58595: LD_INT 3
58597: ST_TO_ADDR
// hackDist := 12 ;
58598: LD_ADDR_EXP 163
58602: PUSH
58603: LD_INT 12
58605: ST_TO_ADDR
// hackCounter := [ ] ;
58606: LD_ADDR_EXP 164
58610: PUSH
58611: EMPTY
58612: ST_TO_ADDR
// end ;
58613: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58614: LD_EXP 159
58618: PUSH
58619: LD_INT 34
58621: PUSH
58622: LD_EXP 82
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PPUSH
58631: CALL_OW 69
58635: AND
58636: IFFALSE 58891
58638: GO 58640
58640: DISABLE
58641: LD_INT 0
58643: PPUSH
58644: PPUSH
// begin enable ;
58645: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58646: LD_ADDR_VAR 0 1
58650: PUSH
58651: LD_INT 34
58653: PUSH
58654: LD_EXP 82
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PPUSH
58663: CALL_OW 69
58667: PUSH
58668: FOR_IN
58669: IFFALSE 58889
// begin if not i in hackTanks then
58671: LD_VAR 0 1
58675: PUSH
58676: LD_EXP 160
58680: IN
58681: NOT
58682: IFFALSE 58765
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58684: LD_ADDR_EXP 160
58688: PUSH
58689: LD_EXP 160
58693: PPUSH
58694: LD_EXP 160
58698: PUSH
58699: LD_INT 1
58701: PLUS
58702: PPUSH
58703: LD_VAR 0 1
58707: PPUSH
58708: CALL_OW 1
58712: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58713: LD_ADDR_EXP 161
58717: PUSH
58718: LD_EXP 161
58722: PPUSH
58723: LD_EXP 161
58727: PUSH
58728: LD_INT 1
58730: PLUS
58731: PPUSH
58732: EMPTY
58733: PPUSH
58734: CALL_OW 1
58738: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58739: LD_ADDR_EXP 164
58743: PUSH
58744: LD_EXP 164
58748: PPUSH
58749: LD_EXP 164
58753: PUSH
58754: LD_INT 1
58756: PLUS
58757: PPUSH
58758: EMPTY
58759: PPUSH
58760: CALL_OW 1
58764: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58765: LD_VAR 0 1
58769: PPUSH
58770: CALL_OW 302
58774: NOT
58775: IFFALSE 58788
// begin HackUnlinkAll ( i ) ;
58777: LD_VAR 0 1
58781: PPUSH
58782: CALL 58894 0 1
// continue ;
58786: GO 58668
// end ; HackCheckCapturedStatus ( i ) ;
58788: LD_VAR 0 1
58792: PPUSH
58793: CALL 59337 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58797: LD_ADDR_VAR 0 2
58801: PUSH
58802: LD_INT 81
58804: PUSH
58805: LD_VAR 0 1
58809: PPUSH
58810: CALL_OW 255
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 33
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 91
58831: PUSH
58832: LD_VAR 0 1
58836: PUSH
58837: LD_EXP 163
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 50
58849: PUSH
58850: EMPTY
58851: LIST
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: PPUSH
58859: CALL_OW 69
58863: ST_TO_ADDR
// if not tmp then
58864: LD_VAR 0 2
58868: NOT
58869: IFFALSE 58873
// continue ;
58871: GO 58668
// HackLink ( i , tmp ) ;
58873: LD_VAR 0 1
58877: PPUSH
58878: LD_VAR 0 2
58882: PPUSH
58883: CALL 59030 0 2
// end ;
58887: GO 58668
58889: POP
58890: POP
// end ;
58891: PPOPN 2
58893: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58894: LD_INT 0
58896: PPUSH
58897: PPUSH
58898: PPUSH
// if not hack in hackTanks then
58899: LD_VAR 0 1
58903: PUSH
58904: LD_EXP 160
58908: IN
58909: NOT
58910: IFFALSE 58914
// exit ;
58912: GO 59025
// index := GetElementIndex ( hackTanks , hack ) ;
58914: LD_ADDR_VAR 0 4
58918: PUSH
58919: LD_EXP 160
58923: PPUSH
58924: LD_VAR 0 1
58928: PPUSH
58929: CALL 7105 0 2
58933: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58934: LD_EXP 161
58938: PUSH
58939: LD_VAR 0 4
58943: ARRAY
58944: IFFALSE 59025
// begin for i in hackTanksCaptured [ index ] do
58946: LD_ADDR_VAR 0 3
58950: PUSH
58951: LD_EXP 161
58955: PUSH
58956: LD_VAR 0 4
58960: ARRAY
58961: PUSH
58962: FOR_IN
58963: IFFALSE 58989
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58965: LD_VAR 0 3
58969: PUSH
58970: LD_INT 1
58972: ARRAY
58973: PPUSH
58974: LD_VAR 0 3
58978: PUSH
58979: LD_INT 2
58981: ARRAY
58982: PPUSH
58983: CALL_OW 235
58987: GO 58962
58989: POP
58990: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58991: LD_ADDR_EXP 161
58995: PUSH
58996: LD_EXP 161
59000: PPUSH
59001: LD_VAR 0 4
59005: PPUSH
59006: EMPTY
59007: PPUSH
59008: CALL_OW 1
59012: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59013: LD_VAR 0 1
59017: PPUSH
59018: LD_INT 0
59020: PPUSH
59021: CALL_OW 505
// end ; end ;
59025: LD_VAR 0 2
59029: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59030: LD_INT 0
59032: PPUSH
59033: PPUSH
59034: PPUSH
// if not hack in hackTanks or not vehicles then
59035: LD_VAR 0 1
59039: PUSH
59040: LD_EXP 160
59044: IN
59045: NOT
59046: PUSH
59047: LD_VAR 0 2
59051: NOT
59052: OR
59053: IFFALSE 59057
// exit ;
59055: GO 59332
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59057: LD_ADDR_VAR 0 2
59061: PUSH
59062: LD_VAR 0 1
59066: PPUSH
59067: LD_VAR 0 2
59071: PPUSH
59072: LD_INT 1
59074: PPUSH
59075: LD_INT 1
59077: PPUSH
59078: CALL 7755 0 4
59082: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59083: LD_ADDR_VAR 0 5
59087: PUSH
59088: LD_EXP 160
59092: PPUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL 7105 0 2
59102: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59103: LD_EXP 161
59107: PUSH
59108: LD_VAR 0 5
59112: ARRAY
59113: PUSH
59114: LD_EXP 162
59118: LESS
59119: IFFALSE 59308
// begin for i := 1 to vehicles do
59121: LD_ADDR_VAR 0 4
59125: PUSH
59126: DOUBLE
59127: LD_INT 1
59129: DEC
59130: ST_TO_ADDR
59131: LD_VAR 0 2
59135: PUSH
59136: FOR_TO
59137: IFFALSE 59306
// begin if hackTanksCaptured [ index ] = hackLimit then
59139: LD_EXP 161
59143: PUSH
59144: LD_VAR 0 5
59148: ARRAY
59149: PUSH
59150: LD_EXP 162
59154: EQUAL
59155: IFFALSE 59159
// break ;
59157: GO 59306
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59159: LD_ADDR_EXP 164
59163: PUSH
59164: LD_EXP 164
59168: PPUSH
59169: LD_VAR 0 5
59173: PPUSH
59174: LD_EXP 164
59178: PUSH
59179: LD_VAR 0 5
59183: ARRAY
59184: PUSH
59185: LD_INT 1
59187: PLUS
59188: PPUSH
59189: CALL_OW 1
59193: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59194: LD_ADDR_EXP 161
59198: PUSH
59199: LD_EXP 161
59203: PPUSH
59204: LD_VAR 0 5
59208: PUSH
59209: LD_EXP 161
59213: PUSH
59214: LD_VAR 0 5
59218: ARRAY
59219: PUSH
59220: LD_INT 1
59222: PLUS
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PPUSH
59228: LD_VAR 0 2
59232: PUSH
59233: LD_VAR 0 4
59237: ARRAY
59238: PUSH
59239: LD_VAR 0 2
59243: PUSH
59244: LD_VAR 0 4
59248: ARRAY
59249: PPUSH
59250: CALL_OW 255
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PPUSH
59259: CALL 7320 0 3
59263: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59264: LD_VAR 0 2
59268: PUSH
59269: LD_VAR 0 4
59273: ARRAY
59274: PPUSH
59275: LD_VAR 0 1
59279: PPUSH
59280: CALL_OW 255
59284: PPUSH
59285: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59289: LD_VAR 0 2
59293: PUSH
59294: LD_VAR 0 4
59298: ARRAY
59299: PPUSH
59300: CALL_OW 141
// end ;
59304: GO 59136
59306: POP
59307: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59308: LD_VAR 0 1
59312: PPUSH
59313: LD_EXP 161
59317: PUSH
59318: LD_VAR 0 5
59322: ARRAY
59323: PUSH
59324: LD_INT 0
59326: PLUS
59327: PPUSH
59328: CALL_OW 505
// end ;
59332: LD_VAR 0 3
59336: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59337: LD_INT 0
59339: PPUSH
59340: PPUSH
59341: PPUSH
59342: PPUSH
// if not hack in hackTanks then
59343: LD_VAR 0 1
59347: PUSH
59348: LD_EXP 160
59352: IN
59353: NOT
59354: IFFALSE 59358
// exit ;
59356: GO 59598
// index := GetElementIndex ( hackTanks , hack ) ;
59358: LD_ADDR_VAR 0 4
59362: PUSH
59363: LD_EXP 160
59367: PPUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL 7105 0 2
59377: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59378: LD_ADDR_VAR 0 3
59382: PUSH
59383: DOUBLE
59384: LD_EXP 161
59388: PUSH
59389: LD_VAR 0 4
59393: ARRAY
59394: INC
59395: ST_TO_ADDR
59396: LD_INT 1
59398: PUSH
59399: FOR_DOWNTO
59400: IFFALSE 59572
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59402: LD_ADDR_VAR 0 5
59406: PUSH
59407: LD_EXP 161
59411: PUSH
59412: LD_VAR 0 4
59416: ARRAY
59417: PUSH
59418: LD_VAR 0 3
59422: ARRAY
59423: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59424: LD_VAR 0 5
59428: PUSH
59429: LD_INT 1
59431: ARRAY
59432: PPUSH
59433: CALL_OW 302
59437: NOT
59438: PUSH
59439: LD_VAR 0 5
59443: PUSH
59444: LD_INT 1
59446: ARRAY
59447: PPUSH
59448: CALL_OW 255
59452: PUSH
59453: LD_VAR 0 1
59457: PPUSH
59458: CALL_OW 255
59462: NONEQUAL
59463: OR
59464: IFFALSE 59570
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59466: LD_VAR 0 5
59470: PUSH
59471: LD_INT 1
59473: ARRAY
59474: PPUSH
59475: CALL_OW 305
59479: PUSH
59480: LD_VAR 0 5
59484: PUSH
59485: LD_INT 1
59487: ARRAY
59488: PPUSH
59489: CALL_OW 255
59493: PUSH
59494: LD_VAR 0 1
59498: PPUSH
59499: CALL_OW 255
59503: EQUAL
59504: AND
59505: IFFALSE 59529
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59507: LD_VAR 0 5
59511: PUSH
59512: LD_INT 1
59514: ARRAY
59515: PPUSH
59516: LD_VAR 0 5
59520: PUSH
59521: LD_INT 2
59523: ARRAY
59524: PPUSH
59525: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59529: LD_ADDR_EXP 161
59533: PUSH
59534: LD_EXP 161
59538: PPUSH
59539: LD_VAR 0 4
59543: PPUSH
59544: LD_EXP 161
59548: PUSH
59549: LD_VAR 0 4
59553: ARRAY
59554: PPUSH
59555: LD_VAR 0 3
59559: PPUSH
59560: CALL_OW 3
59564: PPUSH
59565: CALL_OW 1
59569: ST_TO_ADDR
// end ; end ;
59570: GO 59399
59572: POP
59573: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59574: LD_VAR 0 1
59578: PPUSH
59579: LD_EXP 161
59583: PUSH
59584: LD_VAR 0 4
59588: ARRAY
59589: PUSH
59590: LD_INT 0
59592: PLUS
59593: PPUSH
59594: CALL_OW 505
// end ;
59598: LD_VAR 0 2
59602: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59603: LD_INT 0
59605: PPUSH
59606: PPUSH
59607: PPUSH
59608: PPUSH
// if not hack in hackTanks then
59609: LD_VAR 0 1
59613: PUSH
59614: LD_EXP 160
59618: IN
59619: NOT
59620: IFFALSE 59624
// exit ;
59622: GO 59709
// index := GetElementIndex ( hackTanks , hack ) ;
59624: LD_ADDR_VAR 0 5
59628: PUSH
59629: LD_EXP 160
59633: PPUSH
59634: LD_VAR 0 1
59638: PPUSH
59639: CALL 7105 0 2
59643: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59644: LD_ADDR_VAR 0 4
59648: PUSH
59649: DOUBLE
59650: LD_INT 1
59652: DEC
59653: ST_TO_ADDR
59654: LD_EXP 161
59658: PUSH
59659: LD_VAR 0 5
59663: ARRAY
59664: PUSH
59665: FOR_TO
59666: IFFALSE 59707
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59668: LD_EXP 161
59672: PUSH
59673: LD_VAR 0 5
59677: ARRAY
59678: PUSH
59679: LD_VAR 0 4
59683: ARRAY
59684: PUSH
59685: LD_INT 1
59687: ARRAY
59688: PUSH
59689: LD_VAR 0 2
59693: EQUAL
59694: IFFALSE 59705
// KillUnit ( vehicle ) ;
59696: LD_VAR 0 2
59700: PPUSH
59701: CALL_OW 66
59705: GO 59665
59707: POP
59708: POP
// end ;
59709: LD_VAR 0 3
59713: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
59714: LD_EXP 165
59718: NOT
59719: IFFALSE 59754
59721: GO 59723
59723: DISABLE
// begin initMiner := true ;
59724: LD_ADDR_EXP 165
59728: PUSH
59729: LD_INT 1
59731: ST_TO_ADDR
// minersList := [ ] ;
59732: LD_ADDR_EXP 166
59736: PUSH
59737: EMPTY
59738: ST_TO_ADDR
// minerMinesList := [ ] ;
59739: LD_ADDR_EXP 167
59743: PUSH
59744: EMPTY
59745: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
59746: LD_ADDR_EXP 168
59750: PUSH
59751: LD_INT 5
59753: ST_TO_ADDR
// end ;
59754: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
59755: LD_EXP 165
59759: PUSH
59760: LD_INT 34
59762: PUSH
59763: LD_EXP 87
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PPUSH
59772: CALL_OW 69
59776: AND
59777: IFFALSE 60240
59779: GO 59781
59781: DISABLE
59782: LD_INT 0
59784: PPUSH
59785: PPUSH
59786: PPUSH
59787: PPUSH
// begin enable ;
59788: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59789: LD_ADDR_VAR 0 1
59793: PUSH
59794: LD_INT 34
59796: PUSH
59797: LD_EXP 87
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PPUSH
59806: CALL_OW 69
59810: PUSH
59811: FOR_IN
59812: IFFALSE 59884
// begin if not i in minersList then
59814: LD_VAR 0 1
59818: PUSH
59819: LD_EXP 166
59823: IN
59824: NOT
59825: IFFALSE 59882
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59827: LD_ADDR_EXP 166
59831: PUSH
59832: LD_EXP 166
59836: PPUSH
59837: LD_EXP 166
59841: PUSH
59842: LD_INT 1
59844: PLUS
59845: PPUSH
59846: LD_VAR 0 1
59850: PPUSH
59851: CALL_OW 1
59855: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59856: LD_ADDR_EXP 167
59860: PUSH
59861: LD_EXP 167
59865: PPUSH
59866: LD_EXP 167
59870: PUSH
59871: LD_INT 1
59873: PLUS
59874: PPUSH
59875: EMPTY
59876: PPUSH
59877: CALL_OW 1
59881: ST_TO_ADDR
// end end ;
59882: GO 59811
59884: POP
59885: POP
// for i := minerMinesList downto 1 do
59886: LD_ADDR_VAR 0 1
59890: PUSH
59891: DOUBLE
59892: LD_EXP 167
59896: INC
59897: ST_TO_ADDR
59898: LD_INT 1
59900: PUSH
59901: FOR_DOWNTO
59902: IFFALSE 60238
// begin if IsLive ( minersList [ i ] ) then
59904: LD_EXP 166
59908: PUSH
59909: LD_VAR 0 1
59913: ARRAY
59914: PPUSH
59915: CALL_OW 300
59919: IFFALSE 59947
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59921: LD_EXP 166
59925: PUSH
59926: LD_VAR 0 1
59930: ARRAY
59931: PPUSH
59932: LD_EXP 167
59936: PUSH
59937: LD_VAR 0 1
59941: ARRAY
59942: PPUSH
59943: CALL_OW 505
// if not minerMinesList [ i ] then
59947: LD_EXP 167
59951: PUSH
59952: LD_VAR 0 1
59956: ARRAY
59957: NOT
59958: IFFALSE 59962
// continue ;
59960: GO 59901
// for j := minerMinesList [ i ] downto 1 do
59962: LD_ADDR_VAR 0 2
59966: PUSH
59967: DOUBLE
59968: LD_EXP 167
59972: PUSH
59973: LD_VAR 0 1
59977: ARRAY
59978: INC
59979: ST_TO_ADDR
59980: LD_INT 1
59982: PUSH
59983: FOR_DOWNTO
59984: IFFALSE 60234
// begin side := GetSide ( minersList [ i ] ) ;
59986: LD_ADDR_VAR 0 3
59990: PUSH
59991: LD_EXP 166
59995: PUSH
59996: LD_VAR 0 1
60000: ARRAY
60001: PPUSH
60002: CALL_OW 255
60006: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60007: LD_ADDR_VAR 0 4
60011: PUSH
60012: LD_EXP 167
60016: PUSH
60017: LD_VAR 0 1
60021: ARRAY
60022: PUSH
60023: LD_VAR 0 2
60027: ARRAY
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: PPUSH
60033: LD_EXP 167
60037: PUSH
60038: LD_VAR 0 1
60042: ARRAY
60043: PUSH
60044: LD_VAR 0 2
60048: ARRAY
60049: PUSH
60050: LD_INT 2
60052: ARRAY
60053: PPUSH
60054: CALL_OW 428
60058: ST_TO_ADDR
// if not tmp then
60059: LD_VAR 0 4
60063: NOT
60064: IFFALSE 60068
// continue ;
60066: GO 59983
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60068: LD_VAR 0 4
60072: PUSH
60073: LD_INT 81
60075: PUSH
60076: LD_VAR 0 3
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PPUSH
60085: CALL_OW 69
60089: IN
60090: PUSH
60091: LD_EXP 167
60095: PUSH
60096: LD_VAR 0 1
60100: ARRAY
60101: PUSH
60102: LD_VAR 0 2
60106: ARRAY
60107: PUSH
60108: LD_INT 1
60110: ARRAY
60111: PPUSH
60112: LD_EXP 167
60116: PUSH
60117: LD_VAR 0 1
60121: ARRAY
60122: PUSH
60123: LD_VAR 0 2
60127: ARRAY
60128: PUSH
60129: LD_INT 2
60131: ARRAY
60132: PPUSH
60133: CALL_OW 458
60137: AND
60138: IFFALSE 60232
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60140: LD_EXP 167
60144: PUSH
60145: LD_VAR 0 1
60149: ARRAY
60150: PUSH
60151: LD_VAR 0 2
60155: ARRAY
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PPUSH
60161: LD_EXP 167
60165: PUSH
60166: LD_VAR 0 1
60170: ARRAY
60171: PUSH
60172: LD_VAR 0 2
60176: ARRAY
60177: PUSH
60178: LD_INT 2
60180: ARRAY
60181: PPUSH
60182: LD_VAR 0 3
60186: PPUSH
60187: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60191: LD_ADDR_EXP 167
60195: PUSH
60196: LD_EXP 167
60200: PPUSH
60201: LD_VAR 0 1
60205: PPUSH
60206: LD_EXP 167
60210: PUSH
60211: LD_VAR 0 1
60215: ARRAY
60216: PPUSH
60217: LD_VAR 0 2
60221: PPUSH
60222: CALL_OW 3
60226: PPUSH
60227: CALL_OW 1
60231: ST_TO_ADDR
// end ; end ;
60232: GO 59983
60234: POP
60235: POP
// end ;
60236: GO 59901
60238: POP
60239: POP
// end ;
60240: PPOPN 4
60242: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
60243: LD_INT 0
60245: PPUSH
60246: PPUSH
// result := false ;
60247: LD_ADDR_VAR 0 4
60251: PUSH
60252: LD_INT 0
60254: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60255: LD_VAR 0 1
60259: PPUSH
60260: CALL_OW 264
60264: PUSH
60265: LD_EXP 87
60269: EQUAL
60270: NOT
60271: IFFALSE 60275
// exit ;
60273: GO 60515
// index := GetElementIndex ( minersList , unit ) ;
60275: LD_ADDR_VAR 0 5
60279: PUSH
60280: LD_EXP 166
60284: PPUSH
60285: LD_VAR 0 1
60289: PPUSH
60290: CALL 7105 0 2
60294: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60295: LD_EXP 167
60299: PUSH
60300: LD_VAR 0 5
60304: ARRAY
60305: PUSH
60306: LD_EXP 168
60310: GREATEREQUAL
60311: IFFALSE 60315
// exit ;
60313: GO 60515
// ComMoveXY ( unit , x , y ) ;
60315: LD_VAR 0 1
60319: PPUSH
60320: LD_VAR 0 2
60324: PPUSH
60325: LD_VAR 0 3
60329: PPUSH
60330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60334: LD_INT 35
60336: PPUSH
60337: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60341: LD_VAR 0 1
60345: PPUSH
60346: LD_VAR 0 2
60350: PPUSH
60351: LD_VAR 0 3
60355: PPUSH
60356: CALL 37824 0 3
60360: NOT
60361: PUSH
60362: LD_VAR 0 1
60366: PPUSH
60367: CALL_OW 314
60371: AND
60372: IFFALSE 60376
// exit ;
60374: GO 60515
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60376: LD_VAR 0 2
60380: PPUSH
60381: LD_VAR 0 3
60385: PPUSH
60386: CALL_OW 428
60390: PUSH
60391: LD_VAR 0 1
60395: EQUAL
60396: PUSH
60397: LD_VAR 0 1
60401: PPUSH
60402: CALL_OW 314
60406: NOT
60407: AND
60408: IFFALSE 60334
// PlaySoundXY ( x , y , PlantMine ) ;
60410: LD_VAR 0 2
60414: PPUSH
60415: LD_VAR 0 3
60419: PPUSH
60420: LD_STRING PlantMine
60422: PPUSH
60423: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
60427: LD_VAR 0 2
60431: PPUSH
60432: LD_VAR 0 3
60436: PPUSH
60437: LD_VAR 0 1
60441: PPUSH
60442: CALL_OW 255
60446: PPUSH
60447: LD_INT 0
60449: PPUSH
60450: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60454: LD_ADDR_EXP 167
60458: PUSH
60459: LD_EXP 167
60463: PPUSH
60464: LD_VAR 0 5
60468: PUSH
60469: LD_EXP 167
60473: PUSH
60474: LD_VAR 0 5
60478: ARRAY
60479: PUSH
60480: LD_INT 1
60482: PLUS
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PPUSH
60488: LD_VAR 0 2
60492: PUSH
60493: LD_VAR 0 3
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PPUSH
60502: CALL 7320 0 3
60506: ST_TO_ADDR
// result := true ;
60507: LD_ADDR_VAR 0 4
60511: PUSH
60512: LD_INT 1
60514: ST_TO_ADDR
// end ;
60515: LD_VAR 0 4
60519: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60520: LD_INT 0
60522: PPUSH
60523: PPUSH
60524: PPUSH
// if not unit in minersList then
60525: LD_VAR 0 1
60529: PUSH
60530: LD_EXP 166
60534: IN
60535: NOT
60536: IFFALSE 60540
// exit ;
60538: GO 60932
// index := GetElementIndex ( minersList , unit ) ;
60540: LD_ADDR_VAR 0 6
60544: PUSH
60545: LD_EXP 166
60549: PPUSH
60550: LD_VAR 0 1
60554: PPUSH
60555: CALL 7105 0 2
60559: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60560: LD_ADDR_VAR 0 5
60564: PUSH
60565: DOUBLE
60566: LD_EXP 167
60570: PUSH
60571: LD_VAR 0 6
60575: ARRAY
60576: INC
60577: ST_TO_ADDR
60578: LD_INT 1
60580: PUSH
60581: FOR_DOWNTO
60582: IFFALSE 60743
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
60584: LD_EXP 167
60588: PUSH
60589: LD_VAR 0 6
60593: ARRAY
60594: PUSH
60595: LD_VAR 0 5
60599: ARRAY
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: PUSH
60605: LD_VAR 0 2
60609: EQUAL
60610: PUSH
60611: LD_EXP 167
60615: PUSH
60616: LD_VAR 0 6
60620: ARRAY
60621: PUSH
60622: LD_VAR 0 5
60626: ARRAY
60627: PUSH
60628: LD_INT 2
60630: ARRAY
60631: PUSH
60632: LD_VAR 0 3
60636: EQUAL
60637: AND
60638: IFFALSE 60741
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60640: LD_EXP 167
60644: PUSH
60645: LD_VAR 0 6
60649: ARRAY
60650: PUSH
60651: LD_VAR 0 5
60655: ARRAY
60656: PUSH
60657: LD_INT 1
60659: ARRAY
60660: PPUSH
60661: LD_EXP 167
60665: PUSH
60666: LD_VAR 0 6
60670: ARRAY
60671: PUSH
60672: LD_VAR 0 5
60676: ARRAY
60677: PUSH
60678: LD_INT 2
60680: ARRAY
60681: PPUSH
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 255
60691: PPUSH
60692: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60696: LD_ADDR_EXP 167
60700: PUSH
60701: LD_EXP 167
60705: PPUSH
60706: LD_VAR 0 6
60710: PPUSH
60711: LD_EXP 167
60715: PUSH
60716: LD_VAR 0 6
60720: ARRAY
60721: PPUSH
60722: LD_VAR 0 5
60726: PPUSH
60727: CALL_OW 3
60731: PPUSH
60732: CALL_OW 1
60736: ST_TO_ADDR
// exit ;
60737: POP
60738: POP
60739: GO 60932
// end ; end ;
60741: GO 60581
60743: POP
60744: POP
// for i := minerMinesList [ index ] downto 1 do
60745: LD_ADDR_VAR 0 5
60749: PUSH
60750: DOUBLE
60751: LD_EXP 167
60755: PUSH
60756: LD_VAR 0 6
60760: ARRAY
60761: INC
60762: ST_TO_ADDR
60763: LD_INT 1
60765: PUSH
60766: FOR_DOWNTO
60767: IFFALSE 60930
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60769: LD_EXP 167
60773: PUSH
60774: LD_VAR 0 6
60778: ARRAY
60779: PUSH
60780: LD_VAR 0 5
60784: ARRAY
60785: PUSH
60786: LD_INT 1
60788: ARRAY
60789: PPUSH
60790: LD_EXP 167
60794: PUSH
60795: LD_VAR 0 6
60799: ARRAY
60800: PUSH
60801: LD_VAR 0 5
60805: ARRAY
60806: PUSH
60807: LD_INT 2
60809: ARRAY
60810: PPUSH
60811: LD_VAR 0 2
60815: PPUSH
60816: LD_VAR 0 3
60820: PPUSH
60821: CALL_OW 298
60825: PUSH
60826: LD_INT 6
60828: LESS
60829: IFFALSE 60928
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60831: LD_EXP 167
60835: PUSH
60836: LD_VAR 0 6
60840: ARRAY
60841: PUSH
60842: LD_VAR 0 5
60846: ARRAY
60847: PUSH
60848: LD_INT 1
60850: ARRAY
60851: PPUSH
60852: LD_EXP 167
60856: PUSH
60857: LD_VAR 0 6
60861: ARRAY
60862: PUSH
60863: LD_VAR 0 5
60867: ARRAY
60868: PUSH
60869: LD_INT 2
60871: ARRAY
60872: PPUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: CALL_OW 255
60882: PPUSH
60883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60887: LD_ADDR_EXP 167
60891: PUSH
60892: LD_EXP 167
60896: PPUSH
60897: LD_VAR 0 6
60901: PPUSH
60902: LD_EXP 167
60906: PUSH
60907: LD_VAR 0 6
60911: ARRAY
60912: PPUSH
60913: LD_VAR 0 5
60917: PPUSH
60918: CALL_OW 3
60922: PPUSH
60923: CALL_OW 1
60927: ST_TO_ADDR
// end ; end ;
60928: GO 60766
60930: POP
60931: POP
// end ;
60932: LD_VAR 0 4
60936: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60937: LD_INT 0
60939: PPUSH
60940: PPUSH
60941: PPUSH
60942: PPUSH
60943: PPUSH
60944: PPUSH
60945: PPUSH
60946: PPUSH
60947: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60948: LD_VAR 0 1
60952: PPUSH
60953: CALL_OW 264
60957: PUSH
60958: LD_EXP 87
60962: EQUAL
60963: NOT
60964: PUSH
60965: LD_VAR 0 1
60969: PUSH
60970: LD_EXP 166
60974: IN
60975: NOT
60976: OR
60977: IFFALSE 60981
// exit ;
60979: GO 61303
// index := GetElementIndex ( minersList , unit ) ;
60981: LD_ADDR_VAR 0 6
60985: PUSH
60986: LD_EXP 166
60990: PPUSH
60991: LD_VAR 0 1
60995: PPUSH
60996: CALL 7105 0 2
61000: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61001: LD_ADDR_VAR 0 8
61005: PUSH
61006: LD_EXP 168
61010: PUSH
61011: LD_EXP 167
61015: PUSH
61016: LD_VAR 0 6
61020: ARRAY
61021: MINUS
61022: ST_TO_ADDR
// if not minesFreeAmount then
61023: LD_VAR 0 8
61027: NOT
61028: IFFALSE 61032
// exit ;
61030: GO 61303
// tmp := [ ] ;
61032: LD_ADDR_VAR 0 7
61036: PUSH
61037: EMPTY
61038: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61039: LD_ADDR_VAR 0 5
61043: PUSH
61044: DOUBLE
61045: LD_INT 1
61047: DEC
61048: ST_TO_ADDR
61049: LD_VAR 0 8
61053: PUSH
61054: FOR_TO
61055: IFFALSE 61250
// begin _d := rand ( 0 , 5 ) ;
61057: LD_ADDR_VAR 0 11
61061: PUSH
61062: LD_INT 0
61064: PPUSH
61065: LD_INT 5
61067: PPUSH
61068: CALL_OW 12
61072: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61073: LD_ADDR_VAR 0 12
61077: PUSH
61078: LD_INT 2
61080: PPUSH
61081: LD_INT 6
61083: PPUSH
61084: CALL_OW 12
61088: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61089: LD_ADDR_VAR 0 9
61093: PUSH
61094: LD_VAR 0 2
61098: PPUSH
61099: LD_VAR 0 11
61103: PPUSH
61104: LD_VAR 0 12
61108: PPUSH
61109: CALL_OW 272
61113: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61114: LD_ADDR_VAR 0 10
61118: PUSH
61119: LD_VAR 0 3
61123: PPUSH
61124: LD_VAR 0 11
61128: PPUSH
61129: LD_VAR 0 12
61133: PPUSH
61134: CALL_OW 273
61138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61139: LD_VAR 0 9
61143: PPUSH
61144: LD_VAR 0 10
61148: PPUSH
61149: CALL_OW 488
61153: PUSH
61154: LD_VAR 0 9
61158: PUSH
61159: LD_VAR 0 10
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_VAR 0 7
61172: IN
61173: NOT
61174: AND
61175: PUSH
61176: LD_VAR 0 9
61180: PPUSH
61181: LD_VAR 0 10
61185: PPUSH
61186: CALL_OW 458
61190: NOT
61191: AND
61192: IFFALSE 61234
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61194: LD_ADDR_VAR 0 7
61198: PUSH
61199: LD_VAR 0 7
61203: PPUSH
61204: LD_VAR 0 7
61208: PUSH
61209: LD_INT 1
61211: PLUS
61212: PPUSH
61213: LD_VAR 0 9
61217: PUSH
61218: LD_VAR 0 10
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PPUSH
61227: CALL_OW 1
61231: ST_TO_ADDR
61232: GO 61248
// i := i - 1 ;
61234: LD_ADDR_VAR 0 5
61238: PUSH
61239: LD_VAR 0 5
61243: PUSH
61244: LD_INT 1
61246: MINUS
61247: ST_TO_ADDR
// end ;
61248: GO 61054
61250: POP
61251: POP
// for i in tmp do
61252: LD_ADDR_VAR 0 5
61256: PUSH
61257: LD_VAR 0 7
61261: PUSH
61262: FOR_IN
61263: IFFALSE 61301
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61265: LD_VAR 0 1
61269: PPUSH
61270: LD_VAR 0 5
61274: PUSH
61275: LD_INT 1
61277: ARRAY
61278: PPUSH
61279: LD_VAR 0 5
61283: PUSH
61284: LD_INT 2
61286: ARRAY
61287: PPUSH
61288: CALL 60243 0 3
61292: NOT
61293: IFFALSE 61299
// exit ;
61295: POP
61296: POP
61297: GO 61303
61299: GO 61262
61301: POP
61302: POP
// end ;
61303: LD_VAR 0 4
61307: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
61308: LD_INT 0
61310: PPUSH
61311: PPUSH
61312: PPUSH
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
// if not GetClass ( unit ) = class_sniper then
61317: LD_VAR 0 1
61321: PPUSH
61322: CALL_OW 257
61326: PUSH
61327: LD_INT 5
61329: EQUAL
61330: NOT
61331: IFFALSE 61335
// exit ;
61333: GO 61723
// dist := 8 ;
61335: LD_ADDR_VAR 0 5
61339: PUSH
61340: LD_INT 8
61342: ST_TO_ADDR
// viewRange := 12 ;
61343: LD_ADDR_VAR 0 7
61347: PUSH
61348: LD_INT 12
61350: ST_TO_ADDR
// side := GetSide ( unit ) ;
61351: LD_ADDR_VAR 0 6
61355: PUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 255
61365: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61366: LD_INT 61
61368: PPUSH
61369: LD_VAR 0 6
61373: PPUSH
61374: CALL_OW 321
61378: PUSH
61379: LD_INT 2
61381: EQUAL
61382: IFFALSE 61392
// viewRange := 16 ;
61384: LD_ADDR_VAR 0 7
61388: PUSH
61389: LD_INT 16
61391: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61392: LD_VAR 0 1
61396: PPUSH
61397: LD_VAR 0 2
61401: PPUSH
61402: LD_VAR 0 3
61406: PPUSH
61407: CALL_OW 297
61411: PUSH
61412: LD_VAR 0 5
61416: GREATER
61417: IFFALSE 61496
// begin ComMoveXY ( unit , x , y ) ;
61419: LD_VAR 0 1
61423: PPUSH
61424: LD_VAR 0 2
61428: PPUSH
61429: LD_VAR 0 3
61433: PPUSH
61434: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61438: LD_INT 35
61440: PPUSH
61441: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61445: LD_VAR 0 1
61449: PPUSH
61450: LD_VAR 0 2
61454: PPUSH
61455: LD_VAR 0 3
61459: PPUSH
61460: CALL 37824 0 3
61464: NOT
61465: IFFALSE 61469
// exit ;
61467: GO 61723
// until GetDistUnitXY ( unit , x , y ) < dist ;
61469: LD_VAR 0 1
61473: PPUSH
61474: LD_VAR 0 2
61478: PPUSH
61479: LD_VAR 0 3
61483: PPUSH
61484: CALL_OW 297
61488: PUSH
61489: LD_VAR 0 5
61493: LESS
61494: IFFALSE 61438
// end ; ComTurnXY ( unit , x , y ) ;
61496: LD_VAR 0 1
61500: PPUSH
61501: LD_VAR 0 2
61505: PPUSH
61506: LD_VAR 0 3
61510: PPUSH
61511: CALL_OW 118
// wait ( 5 ) ;
61515: LD_INT 5
61517: PPUSH
61518: CALL_OW 67
// _d := GetDir ( unit ) ;
61522: LD_ADDR_VAR 0 10
61526: PUSH
61527: LD_VAR 0 1
61531: PPUSH
61532: CALL_OW 254
61536: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
61537: LD_ADDR_VAR 0 8
61541: PUSH
61542: LD_VAR 0 1
61546: PPUSH
61547: CALL_OW 250
61551: PPUSH
61552: LD_VAR 0 10
61556: PPUSH
61557: LD_VAR 0 5
61561: PPUSH
61562: CALL_OW 272
61566: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
61567: LD_ADDR_VAR 0 9
61571: PUSH
61572: LD_VAR 0 1
61576: PPUSH
61577: CALL_OW 251
61581: PPUSH
61582: LD_VAR 0 10
61586: PPUSH
61587: LD_VAR 0 5
61591: PPUSH
61592: CALL_OW 273
61596: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61597: LD_VAR 0 8
61601: PPUSH
61602: LD_VAR 0 9
61606: PPUSH
61607: CALL_OW 488
61611: NOT
61612: IFFALSE 61616
// exit ;
61614: GO 61723
// ComAnimCustom ( unit , 1 ) ;
61616: LD_VAR 0 1
61620: PPUSH
61621: LD_INT 1
61623: PPUSH
61624: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61628: LD_VAR 0 8
61632: PPUSH
61633: LD_VAR 0 9
61637: PPUSH
61638: LD_VAR 0 6
61642: PPUSH
61643: LD_VAR 0 7
61647: PPUSH
61648: CALL_OW 330
// repeat wait ( 1 ) ;
61652: LD_INT 1
61654: PPUSH
61655: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 316
61668: PUSH
61669: LD_VAR 0 1
61673: PPUSH
61674: CALL_OW 314
61678: OR
61679: PUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: CALL_OW 302
61689: NOT
61690: OR
61691: PUSH
61692: LD_VAR 0 1
61696: PPUSH
61697: CALL_OW 301
61701: OR
61702: IFFALSE 61652
// RemoveSeeing ( _x , _y , side ) ;
61704: LD_VAR 0 8
61708: PPUSH
61709: LD_VAR 0 9
61713: PPUSH
61714: LD_VAR 0 6
61718: PPUSH
61719: CALL_OW 331
// end ; end_of_file
61723: LD_VAR 0 4
61727: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61728: LD_VAR 0 1
61732: PUSH
61733: LD_INT 200
61735: DOUBLE
61736: GREATEREQUAL
61737: IFFALSE 61745
61739: LD_INT 299
61741: DOUBLE
61742: LESSEQUAL
61743: IFTRUE 61747
61745: GO 61779
61747: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61748: LD_VAR 0 1
61752: PPUSH
61753: LD_VAR 0 2
61757: PPUSH
61758: LD_VAR 0 3
61762: PPUSH
61763: LD_VAR 0 4
61767: PPUSH
61768: LD_VAR 0 5
61772: PPUSH
61773: CALL 57466 0 5
61777: GO 61856
61779: LD_INT 300
61781: DOUBLE
61782: GREATEREQUAL
61783: IFFALSE 61791
61785: LD_INT 399
61787: DOUBLE
61788: LESSEQUAL
61789: IFTRUE 61793
61791: GO 61855
61793: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61794: LD_VAR 0 1
61798: PPUSH
61799: LD_VAR 0 2
61803: PPUSH
61804: LD_VAR 0 3
61808: PPUSH
61809: LD_VAR 0 4
61813: PPUSH
61814: LD_VAR 0 5
61818: PPUSH
61819: LD_VAR 0 6
61823: PPUSH
61824: LD_VAR 0 7
61828: PPUSH
61829: LD_VAR 0 8
61833: PPUSH
61834: LD_VAR 0 9
61838: PPUSH
61839: LD_VAR 0 10
61843: PPUSH
61844: LD_VAR 0 11
61848: PPUSH
61849: CALL 55108 0 11
61853: GO 61856
61855: POP
// end ;
61856: PPOPN 11
61858: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61859: LD_VAR 0 1
61863: PPUSH
61864: LD_VAR 0 2
61868: PPUSH
61869: LD_VAR 0 3
61873: PPUSH
61874: LD_VAR 0 4
61878: PPUSH
61879: LD_VAR 0 5
61883: PPUSH
61884: CALL 57202 0 5
// end ;
61888: PPOPN 5
61890: END
