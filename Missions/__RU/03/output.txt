// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 302 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 86
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// kirovFactory = 0 ;
 257: LD_ADDR_EXP 21
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCompleteFactory = false ;
 265: LD_ADDR_EXP 22
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// enableOmicronAI = true ;
 273: LD_ADDR_EXP 29
 277: PUSH
 278: LD_INT 1
 280: ST_TO_ADDR
// PrepareRussians ;
 281: CALL 925 0 0
// PrepareAmericans ;
 285: CALL 5369 0 0
// Nef_PrepareNature ;
 289: CALL 27890 0 0
// MissionIntro ;
 293: CALL 20547 0 0
// end ; end_of_file
 297: LD_VAR 0 1
 301: RET
// export function InitMapConfig ; begin
 302: LD_INT 0
 304: PPUSH
// BaseMapConfig ;
 305: CALL 318 0 0
// MissionMapConfig ;
 309: CALL 420 0 0
// end ;
 313: LD_VAR 0 1
 317: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 318: LD_INT 0
 320: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 321: LD_ADDR_EXP 30
 325: PUSH
 326: LD_INT 8
 328: PUSH
 329: LD_INT 12
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: LD_INT 6
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 348: LD_ADDR_EXP 31
 352: PUSH
 353: LD_INT 2
 355: PUSH
 356: LD_INT 2
 358: PUSH
 359: LD_INT 2
 361: PUSH
 362: LD_INT 2
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 5
 378: NEG
 379: PPUSH
 380: LD_INT 5
 382: PPUSH
 383: CALL_OW 12
 387: PUSH
 388: EMPTY
 389: LIST
 390: ST_TO_ADDR
// debugMode = 0 ;
 391: LD_ADDR_EXP 35
 395: PUSH
 396: LD_INT 0
 398: ST_TO_ADDR
// missionPrefix = 03_ ;
 399: LD_ADDR_EXP 33
 403: PUSH
 404: LD_STRING 03_
 406: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 407: LD_ADDR_EXP 34
 411: PUSH
 412: LD_STRING 02_
 414: ST_TO_ADDR
// end ;
 415: LD_VAR 0 1
 419: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 420: LD_INT 0
 422: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 423: LD_ADDR_EXP 36
 427: PUSH
 428: LD_INT 7
 430: PUSH
 431: LD_INT 6
 433: PUSH
 434: LD_INT 6
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PUSH
 442: LD_OWVAR 67
 446: ARRAY
 447: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 84000
 455: PUSH
 456: LD_INT 73500
 458: PUSH
 459: LD_INT 63000
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: LIST
 466: PUSH
 467: LD_OWVAR 67
 471: ARRAY
 472: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 473: LD_ADDR_EXP 39
 477: PUSH
 478: LD_INT 150
 480: PUSH
 481: LD_INT 100
 483: PUSH
 484: LD_INT 50
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: LIST
 491: PUSH
 492: LD_OWVAR 67
 496: ARRAY
 497: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 498: LD_ADDR_EXP 40
 502: PUSH
 503: LD_INT 100
 505: PUSH
 506: LD_INT 50
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: PUSH
 517: LD_OWVAR 67
 521: ARRAY
 522: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 523: LD_ADDR_EXP 41
 527: PUSH
 528: LD_INT 1
 530: PUSH
 531: LD_INT 2
 533: PUSH
 534: LD_INT 2
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: LIST
 541: PUSH
 542: LD_OWVAR 67
 546: ARRAY
 547: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 548: LD_ADDR_EXP 44
 552: PUSH
 553: LD_INT 8
 555: PUSH
 556: LD_INT 6
 558: PUSH
 559: LD_INT 5
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: PUSH
 567: LD_OWVAR 67
 571: ARRAY
 572: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 573: LD_ADDR_EXP 45
 577: PUSH
 578: LD_INT 17850
 580: PUSH
 581: LD_INT 16800
 583: PUSH
 584: LD_INT 15750
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: LIST
 591: PUSH
 592: LD_OWVAR 67
 596: ARRAY
 597: ST_TO_ADDR
// end ;
 598: LD_VAR 0 1
 602: RET
// every 0 0$1 trigger debugMode do var i ;
 603: LD_EXP 35
 607: IFFALSE 922
 609: GO 611
 611: DISABLE
 612: LD_INT 0
 614: PPUSH
// begin enable ;
 615: ENABLE
// FogOff ( your_side ) ;
 616: LD_OWVAR 2
 620: PPUSH
 621: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 625: LD_ADDR_VAR 0 1
 629: PUSH
 630: LD_INT 22
 632: PUSH
 633: LD_OWVAR 2
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 2
 644: PUSH
 645: LD_INT 21
 647: PUSH
 648: LD_INT 1
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: EMPTY
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PPUSH
 674: CALL_OW 69
 678: PUSH
 679: FOR_IN
 680: IFFALSE 696
// SetLives ( i , 1000 ) ;
 682: LD_VAR 0 1
 686: PPUSH
 687: LD_INT 1000
 689: PPUSH
 690: CALL_OW 234
 694: GO 679
 696: POP
 697: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 698: LD_ADDR_VAR 0 1
 702: PUSH
 703: LD_INT 22
 705: PUSH
 706: LD_OWVAR 2
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: LD_INT 21
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PPUSH
 729: CALL_OW 69
 733: PUSH
 734: FOR_IN
 735: IFFALSE 799
// begin SetSkill ( i , skill_combat , 10 ) ;
 737: LD_VAR 0 1
 741: PPUSH
 742: LD_INT 1
 744: PPUSH
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 3
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 4
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// end ;
 797: GO 734
 799: POP
 800: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 801: LD_ADDR_VAR 0 1
 805: PUSH
 806: LD_INT 22
 808: PUSH
 809: LD_OWVAR 2
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 2
 820: PUSH
 821: LD_INT 30
 823: PUSH
 824: LD_INT 0
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 30
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: LIST
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL_OW 69
 854: PUSH
 855: FOR_IN
 856: IFFALSE 920
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 274
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 9999
 873: PPUSH
 874: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 878: LD_VAR 0 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 9999
 893: PPUSH
 894: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 898: LD_VAR 0 1
 902: PPUSH
 903: CALL_OW 274
 907: PPUSH
 908: LD_INT 3
 910: PPUSH
 911: LD_INT 9999
 913: PPUSH
 914: CALL_OW 277
// end ;
 918: GO 855
 920: POP
 921: POP
// end ; end_of_file
 922: PPOPN 1
 924: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 925: LD_INT 0
 927: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 928: LD_ADDR_EXP 78
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: LD_INT 0
 938: PUSH
 939: LD_INT 0
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: LIST
 949: LIST
 950: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 951: LD_ADDR_EXP 72
 955: PUSH
 956: EMPTY
 957: ST_TO_ADDR
// PrepareKirovBase ;
 958: CALL 1993 0 0
// PrepareHeroes ;
 962: CALL 995 0 0
// PrepareKirovPersonel ;
 966: CALL 2758 0 0
// PrepareBeriaBase ;
 970: CALL 1395 0 0
// PrepareSecondBaseTeam ;
 974: CALL 3901 0 0
// PrepareGrishko ;
 978: CALL 3086 0 0
// PrepareOtherBuildings ;
 982: CALL 3335 0 0
// PrepareVehicles ;
 986: CALL 3159 0 0
// end ;
 990: LD_VAR 0 1
 994: RET
// function PrepareHeroes ; begin
 995: LD_INT 0
 997: PPUSH
// uc_side = 3 ;
 998: LD_ADDR_OWVAR 20
1002: PUSH
1003: LD_INT 3
1005: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1006: LD_ADDR_EXP 46
1010: PUSH
1011: LD_STRING Burlak
1013: PPUSH
1014: LD_INT 1
1016: PPUSH
1017: CALL 6846 0 2
1021: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1022: LD_ADDR_EXP 47
1026: PUSH
1027: LD_STRING Gnyevko
1029: PPUSH
1030: LD_INT 1
1032: PPUSH
1033: CALL 6846 0 2
1037: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1038: LD_ADDR_EXP 49
1042: PUSH
1043: LD_STRING Kovalyuk
1045: PPUSH
1046: LD_INT 1
1048: PPUSH
1049: CALL 6846 0 2
1053: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1054: LD_ADDR_EXP 48
1058: PUSH
1059: LD_STRING Kirilenkova
1061: PPUSH
1062: LD_INT 1
1064: PPUSH
1065: CALL 6846 0 2
1069: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1070: LD_EXP 46
1074: PUSH
1075: LD_EXP 47
1079: PUSH
1080: LD_EXP 49
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: PPUSH
1090: LD_INT 3
1092: PPUSH
1093: CALL_OW 336
// uc_side = 6 ;
1097: LD_ADDR_OWVAR 20
1101: PUSH
1102: LD_INT 6
1104: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1105: LD_EXP 1
1109: NOT
1110: PUSH
1111: LD_STRING 02_Belkov
1113: PPUSH
1114: CALL_OW 28
1118: AND
1119: IFFALSE 1211
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1121: LD_ADDR_EXP 50
1125: PUSH
1126: LD_STRING Belkov
1128: PPUSH
1129: LD_INT 1
1131: PPUSH
1132: CALL 6846 0 2
1136: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , false ) ;
1137: LD_ADDR_EXP 51
1141: PUSH
1142: LD_STRING Belkov2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL 6846 0 2
1152: ST_TO_ADDR
// BelkovDialog = Belkov ;
1153: LD_ADDR_EXP 60
1157: PUSH
1158: LD_EXP 50
1162: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1163: LD_EXP 50
1167: PPUSH
1168: LD_INT 165
1170: PPUSH
1171: LD_INT 110
1173: PPUSH
1174: LD_INT 0
1176: PPUSH
1177: CALL_OW 48
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1181: LD_EXP 51
1185: PPUSH
1186: LD_INT 159
1188: PPUSH
1189: LD_INT 107
1191: PPUSH
1192: LD_INT 5
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 50
// ComHold ( Belkov ) ;
1202: LD_EXP 50
1206: PPUSH
1207: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1211: LD_EXP 1
1215: PUSH
1216: LD_STRING 02_Belkov2
1218: PPUSH
1219: CALL_OW 28
1223: AND
1224: IFFALSE 1279
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1226: LD_ADDR_EXP 51
1230: PUSH
1231: LD_STRING Belkov2
1233: PPUSH
1234: LD_INT 1
1236: PPUSH
1237: CALL 6846 0 2
1241: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1242: LD_ADDR_EXP 60
1246: PUSH
1247: LD_EXP 51
1251: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1252: LD_EXP 51
1256: PPUSH
1257: LD_INT 165
1259: PPUSH
1260: LD_INT 110
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 48
// ComHold ( Belkov2 ) ;
1270: LD_EXP 51
1274: PPUSH
1275: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1279: LD_EXP 50
1283: PUSH
1284: LD_EXP 51
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PPUSH
1293: LD_INT 1
1295: PPUSH
1296: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1300: LD_EXP 46
1304: PPUSH
1305: LD_INT 164
1307: PPUSH
1308: LD_INT 108
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 48
// ComHold ( Burlak ) ;
1318: LD_EXP 46
1322: PPUSH
1323: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1327: LD_EXP 47
1331: PPUSH
1332: LD_INT 159
1334: PPUSH
1335: LD_INT 107
1337: PPUSH
1338: LD_INT 5
1340: PPUSH
1341: LD_INT 0
1343: PPUSH
1344: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1348: LD_EXP 49
1352: PPUSH
1353: LD_INT 159
1355: PPUSH
1356: LD_INT 107
1358: PPUSH
1359: LD_INT 5
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1369: LD_EXP 48
1373: PPUSH
1374: LD_INT 159
1376: PPUSH
1377: LD_INT 107
1379: PPUSH
1380: LD_INT 5
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 50
// end ;
1390: LD_VAR 0 1
1394: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1395: LD_INT 0
1397: PPUSH
1398: PPUSH
1399: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1400: LD_ADDR_EXP 56
1404: PUSH
1405: LD_STRING 02_BeriaBase_2
1407: PPUSH
1408: EMPTY
1409: PPUSH
1410: CALL_OW 30
1414: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1415: LD_ADDR_EXP 55
1419: PUSH
1420: LD_STRING 02_other_beria
1422: PPUSH
1423: CALL_OW 31
1427: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1428: LD_ADDR_EXP 53
1432: PUSH
1433: LD_STRING 02_other_survivors
1435: PPUSH
1436: CALL_OW 31
1440: ST_TO_ADDR
// uc_side = 3 ;
1441: LD_ADDR_OWVAR 20
1445: PUSH
1446: LD_INT 3
1448: ST_TO_ADDR
// uc_nation = 3 ;
1449: LD_ADDR_OWVAR 21
1453: PUSH
1454: LD_INT 3
1456: ST_TO_ADDR
// for i := 1 to beriaBase do
1457: LD_ADDR_VAR 0 2
1461: PUSH
1462: DOUBLE
1463: LD_INT 1
1465: DEC
1466: ST_TO_ADDR
1467: LD_EXP 56
1471: PUSH
1472: FOR_TO
1473: IFFALSE 1726
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1475: LD_ADDR_OWVAR 42
1479: PUSH
1480: LD_EXP 56
1484: PUSH
1485: LD_VAR 0 2
1489: ARRAY
1490: PUSH
1491: LD_INT 1
1493: ARRAY
1494: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1495: LD_ADDR_OWVAR 43
1499: PUSH
1500: LD_EXP 56
1504: PUSH
1505: LD_VAR 0 2
1509: ARRAY
1510: PUSH
1511: LD_INT 5
1513: ARRAY
1514: ST_TO_ADDR
// if bc_type = b_lab then
1515: LD_OWVAR 42
1519: PUSH
1520: LD_INT 6
1522: EQUAL
1523: IFFALSE 1541
// begin bc_kind1 = b_lab_basic ;
1525: LD_ADDR_OWVAR 44
1529: PUSH
1530: LD_INT 9
1532: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1533: LD_ADDR_OWVAR 45
1537: PUSH
1538: LD_INT 9
1540: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1541: LD_OWVAR 42
1545: PUSH
1546: LD_INT 7
1548: EQUAL
1549: PUSH
1550: LD_OWVAR 42
1554: PUSH
1555: LD_INT 8
1557: EQUAL
1558: OR
1559: IFFALSE 1675
// begin if beriaBase [ i ] [ 7 ] then
1561: LD_EXP 56
1565: PUSH
1566: LD_VAR 0 2
1570: ARRAY
1571: PUSH
1572: LD_INT 7
1574: ARRAY
1575: IFFALSE 1597
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1577: LD_ADDR_OWVAR 44
1581: PUSH
1582: LD_EXP 56
1586: PUSH
1587: LD_VAR 0 2
1591: ARRAY
1592: PUSH
1593: LD_INT 7
1595: ARRAY
1596: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1597: LD_EXP 56
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 8
1610: ARRAY
1611: IFFALSE 1633
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1613: LD_ADDR_OWVAR 45
1617: PUSH
1618: LD_EXP 56
1622: PUSH
1623: LD_VAR 0 2
1627: ARRAY
1628: PUSH
1629: LD_INT 8
1631: ARRAY
1632: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1633: LD_EXP 56
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 7
1646: ARRAY
1647: NOT
1648: PUSH
1649: LD_EXP 56
1653: PUSH
1654: LD_VAR 0 2
1658: ARRAY
1659: PUSH
1660: LD_INT 8
1662: ARRAY
1663: NOT
1664: AND
1665: IFFALSE 1675
// bc_type := b_lab ;
1667: LD_ADDR_OWVAR 42
1671: PUSH
1672: LD_INT 6
1674: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1675: LD_EXP 56
1679: PUSH
1680: LD_VAR 0 2
1684: ARRAY
1685: PUSH
1686: LD_INT 2
1688: ARRAY
1689: PPUSH
1690: LD_EXP 56
1694: PUSH
1695: LD_VAR 0 2
1699: ARRAY
1700: PUSH
1701: LD_INT 3
1703: ARRAY
1704: PPUSH
1705: LD_EXP 56
1709: PUSH
1710: LD_VAR 0 2
1714: ARRAY
1715: PUSH
1716: LD_INT 4
1718: ARRAY
1719: PPUSH
1720: CALL_OW 47
// end ;
1724: GO 1472
1726: POP
1727: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1728: LD_ADDR_EXP 57
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: EMPTY
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 30
1745: PUSH
1746: LD_INT 0
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PPUSH
1757: CALL_OW 69
1761: PUSH
1762: LD_INT 1
1764: ARRAY
1765: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1766: LD_EXP 57
1770: PPUSH
1771: LD_STRING beria
1773: PPUSH
1774: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1778: LD_EXP 57
1782: PPUSH
1783: CALL_OW 274
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_EXP 2
1795: PPUSH
1796: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1800: LD_EXP 57
1804: PPUSH
1805: CALL_OW 274
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: LD_EXP 3
1817: PPUSH
1818: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1822: LD_EXP 57
1826: PPUSH
1827: CALL_OW 274
1831: PPUSH
1832: LD_INT 1
1834: PPUSH
1835: LD_EXP 57
1839: PPUSH
1840: CALL_OW 274
1844: PPUSH
1845: LD_INT 2
1847: PPUSH
1848: CALL_OW 275
1852: PUSH
1853: LD_EXP 39
1857: PLUS
1858: PPUSH
1859: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1863: LD_EXP 57
1867: PPUSH
1868: CALL_OW 274
1872: PPUSH
1873: LD_INT 2
1875: PPUSH
1876: LD_EXP 57
1880: PPUSH
1881: CALL_OW 274
1885: PPUSH
1886: LD_INT 2
1888: PPUSH
1889: CALL_OW 275
1893: PUSH
1894: LD_EXP 40
1898: PLUS
1899: PPUSH
1900: CALL_OW 277
// uc_side = 6 ;
1904: LD_ADDR_OWVAR 20
1908: PUSH
1909: LD_INT 6
1911: ST_TO_ADDR
// for i in otherBeriaUnits do
1912: LD_ADDR_VAR 0 2
1916: PUSH
1917: LD_EXP 55
1921: PUSH
1922: FOR_IN
1923: IFFALSE 1948
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1925: LD_VAR 0 2
1929: PPUSH
1930: LD_INT 159
1932: PPUSH
1933: LD_INT 107
1935: PPUSH
1936: LD_INT 10
1938: PPUSH
1939: LD_INT 0
1941: PPUSH
1942: CALL_OW 50
1946: GO 1922
1948: POP
1949: POP
// for i in other_survivors do
1950: LD_ADDR_VAR 0 2
1954: PUSH
1955: LD_EXP 53
1959: PUSH
1960: FOR_IN
1961: IFFALSE 1986
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1963: LD_VAR 0 2
1967: PPUSH
1968: LD_INT 159
1970: PPUSH
1971: LD_INT 107
1973: PPUSH
1974: LD_INT 10
1976: PPUSH
1977: LD_INT 0
1979: PPUSH
1980: CALL_OW 50
1984: GO 1960
1986: POP
1987: POP
// end ;
1988: LD_VAR 0 1
1992: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
1993: LD_INT 0
1995: PPUSH
1996: PPUSH
1997: PPUSH
1998: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
1999: LD_ADDR_EXP 63
2003: PUSH
2004: LD_STRING 02_KirovBase_3
2006: PPUSH
2007: EMPTY
2008: PPUSH
2009: CALL_OW 30
2013: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2014: LD_ADDR_EXP 62
2018: PUSH
2019: LD_STRING 02_other_kirov
2021: PPUSH
2022: CALL_OW 31
2026: ST_TO_ADDR
// uc_side = 6 ;
2027: LD_ADDR_OWVAR 20
2031: PUSH
2032: LD_INT 6
2034: ST_TO_ADDR
// uc_nation = 3 ;
2035: LD_ADDR_OWVAR 21
2039: PUSH
2040: LD_INT 3
2042: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2043: LD_ADDR_EXP 58
2047: PUSH
2048: LD_STRING Kurin
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL 6846 0 2
2058: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2059: LD_EXP 58
2063: PPUSH
2064: LD_INT 166
2066: PPUSH
2067: LD_INT 109
2069: PPUSH
2070: LD_INT 0
2072: PPUSH
2073: CALL_OW 48
// ComHold ( Kurin ) ;
2077: LD_EXP 58
2081: PPUSH
2082: CALL_OW 140
// for i := 1 to kirovBase do
2086: LD_ADDR_VAR 0 2
2090: PUSH
2091: DOUBLE
2092: LD_INT 1
2094: DEC
2095: ST_TO_ADDR
2096: LD_EXP 63
2100: PUSH
2101: FOR_TO
2102: IFFALSE 2540
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2104: LD_ADDR_OWVAR 42
2108: PUSH
2109: LD_EXP 63
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: PUSH
2120: LD_INT 1
2122: ARRAY
2123: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2124: LD_ADDR_OWVAR 43
2128: PUSH
2129: LD_EXP 63
2133: PUSH
2134: LD_VAR 0 2
2138: ARRAY
2139: PUSH
2140: LD_INT 5
2142: ARRAY
2143: ST_TO_ADDR
// if bc_type = b_depot then
2144: LD_OWVAR 42
2148: PUSH
2149: LD_INT 0
2151: EQUAL
2152: IFFALSE 2162
// bc_type = b_warehouse ;
2154: LD_ADDR_OWVAR 42
2158: PUSH
2159: LD_INT 1
2161: ST_TO_ADDR
// if bc_type = b_armoury then
2162: LD_OWVAR 42
2166: PUSH
2167: LD_INT 4
2169: EQUAL
2170: IFFALSE 2180
// bc_type = b_barracks ;
2172: LD_ADDR_OWVAR 42
2176: PUSH
2177: LD_INT 5
2179: ST_TO_ADDR
// if bc_type = b_lab then
2180: LD_OWVAR 42
2184: PUSH
2185: LD_INT 6
2187: EQUAL
2188: IFFALSE 2206
// begin bc_kind1 = b_lab_weapon ;
2190: LD_ADDR_OWVAR 44
2194: PUSH
2195: LD_INT 10
2197: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2198: LD_ADDR_OWVAR 45
2202: PUSH
2203: LD_INT 9
2205: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2206: LD_OWVAR 42
2210: PUSH
2211: LD_INT 2
2213: EQUAL
2214: IFFALSE 2224
// bc_type = b_factory ;
2216: LD_ADDR_OWVAR 42
2220: PUSH
2221: LD_INT 3
2223: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2224: LD_OWVAR 42
2228: PUSH
2229: LD_INT 7
2231: EQUAL
2232: PUSH
2233: LD_OWVAR 42
2237: PUSH
2238: LD_INT 8
2240: EQUAL
2241: OR
2242: IFFALSE 2358
// begin if kirovBase [ i ] [ 7 ] then
2244: LD_EXP 63
2248: PUSH
2249: LD_VAR 0 2
2253: ARRAY
2254: PUSH
2255: LD_INT 7
2257: ARRAY
2258: IFFALSE 2280
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2260: LD_ADDR_OWVAR 44
2264: PUSH
2265: LD_EXP 63
2269: PUSH
2270: LD_VAR 0 2
2274: ARRAY
2275: PUSH
2276: LD_INT 7
2278: ARRAY
2279: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2280: LD_EXP 63
2284: PUSH
2285: LD_VAR 0 2
2289: ARRAY
2290: PUSH
2291: LD_INT 8
2293: ARRAY
2294: IFFALSE 2316
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2296: LD_ADDR_OWVAR 45
2300: PUSH
2301: LD_EXP 63
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PUSH
2312: LD_INT 8
2314: ARRAY
2315: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2316: LD_EXP 63
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PUSH
2327: LD_INT 7
2329: ARRAY
2330: NOT
2331: PUSH
2332: LD_EXP 63
2336: PUSH
2337: LD_VAR 0 2
2341: ARRAY
2342: PUSH
2343: LD_INT 8
2345: ARRAY
2346: NOT
2347: AND
2348: IFFALSE 2358
// bc_type := b_lab ;
2350: LD_ADDR_OWVAR 42
2354: PUSH
2355: LD_INT 6
2357: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2358: LD_OWVAR 42
2362: PUSH
2363: LD_INT 31
2365: EQUAL
2366: IFFALSE 2390
// begin bc_type = b_bunker ;
2368: LD_ADDR_OWVAR 42
2372: PUSH
2373: LD_INT 32
2375: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2376: LD_ADDR_EXP 74
2380: PUSH
2381: LD_EXP 74
2385: PUSH
2386: LD_INT 1
2388: PLUS
2389: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_EXP 63
2399: PUSH
2400: LD_VAR 0 2
2404: ARRAY
2405: PUSH
2406: LD_INT 2
2408: ARRAY
2409: PPUSH
2410: LD_EXP 63
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_INT 3
2423: ARRAY
2424: PPUSH
2425: LD_EXP 63
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: PUSH
2436: LD_INT 4
2438: ARRAY
2439: PPUSH
2440: CALL_OW 47
2444: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2445: LD_VAR 0 3
2449: PUSH
2450: LD_INT 4
2452: LESS
2453: PUSH
2454: LD_OWVAR 42
2458: PUSH
2459: LD_INT 32
2461: EQUAL
2462: AND
2463: IFFALSE 2512
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2465: LD_VAR 0 4
2469: PPUSH
2470: LD_INT 42
2472: PUSH
2473: LD_INT 43
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 1
2482: PPUSH
2483: LD_INT 2
2485: PPUSH
2486: CALL_OW 12
2490: ARRAY
2491: PPUSH
2492: CALL_OW 431
// tmp = tmp + 1 ;
2496: LD_ADDR_VAR 0 3
2500: PUSH
2501: LD_VAR 0 3
2505: PUSH
2506: LD_INT 1
2508: PLUS
2509: ST_TO_ADDR
// end else
2510: GO 2538
// if bc_type = b_bunker then
2512: LD_OWVAR 42
2516: PUSH
2517: LD_INT 32
2519: EQUAL
2520: IFFALSE 2538
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2522: LD_ADDR_EXP 69
2526: PUSH
2527: LD_EXP 69
2531: PUSH
2532: LD_VAR 0 4
2536: ADD
2537: ST_TO_ADDR
// end ;
2538: GO 2101
2540: POP
2541: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2542: LD_ADDR_EXP 64
2546: PUSH
2547: LD_INT 22
2549: PUSH
2550: LD_INT 6
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 30
2559: PUSH
2560: LD_INT 1
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PPUSH
2571: CALL_OW 69
2575: PUSH
2576: LD_INT 1
2578: ARRAY
2579: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2580: LD_EXP 64
2584: PPUSH
2585: LD_STRING kirov
2587: PPUSH
2588: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2592: LD_EXP 64
2596: PPUSH
2597: CALL_OW 274
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: LD_INT 5000
2607: PPUSH
2608: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2612: LD_EXP 64
2616: PPUSH
2617: CALL_OW 274
2621: PPUSH
2622: LD_INT 2
2624: PPUSH
2625: LD_INT 2000
2627: PPUSH
2628: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2632: LD_ADDR_EXP 66
2636: PUSH
2637: LD_INT 22
2639: PUSH
2640: LD_INT 6
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: PUSH
2647: LD_INT 21
2649: PUSH
2650: LD_INT 3
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 30
2659: PUSH
2660: LD_INT 5
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: PPUSH
2672: CALL_OW 69
2676: PPUSH
2677: LD_INT 145
2679: PPUSH
2680: LD_INT 102
2682: PPUSH
2683: CALL_OW 73
2687: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2688: LD_ADDR_EXP 67
2692: PUSH
2693: LD_INT 22
2695: PUSH
2696: LD_INT 6
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 21
2705: PUSH
2706: LD_INT 3
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 30
2715: PUSH
2716: LD_INT 5
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: PUSH
2733: LD_EXP 66
2737: DIFF
2738: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2739: LD_ADDR_EXP 67
2743: PUSH
2744: LD_EXP 67
2748: PUSH
2749: LD_INT 1
2751: ARRAY
2752: ST_TO_ADDR
// end ;
2753: LD_VAR 0 1
2757: RET
// export function PrepareKirovPersonel ; var i ; begin
2758: LD_INT 0
2760: PPUSH
2761: PPUSH
// PrepareEngineer ( false , 7 ) ;
2762: LD_INT 0
2764: PPUSH
2765: LD_INT 7
2767: PPUSH
2768: CALL_OW 382
// kirovEng = CreateHuman ;
2772: LD_ADDR_EXP 68
2776: PUSH
2777: CALL_OW 44
2781: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2782: LD_EXP 68
2786: PPUSH
2787: LD_INT 159
2789: PPUSH
2790: LD_INT 107
2792: PPUSH
2793: LD_INT 10
2795: PPUSH
2796: LD_INT 0
2798: PPUSH
2799: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2803: LD_ADDR_EXP 59
2807: PUSH
2808: LD_STRING Popov
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL 6846 0 2
2818: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2819: LD_EXP 59
2823: PPUSH
2824: LD_INT 4
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2834: LD_EXP 59
2838: PPUSH
2839: LD_INT 98
2841: PPUSH
2842: LD_INT 36
2844: PPUSH
2845: CALL_OW 118
// hc_name :=  ;
2849: LD_ADDR_OWVAR 26
2853: PUSH
2854: LD_STRING 
2856: ST_TO_ADDR
// hc_gallery :=  ;
2857: LD_ADDR_OWVAR 33
2861: PUSH
2862: LD_STRING 
2864: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 2
2870: PPUSH
2871: CALL_OW 381
// ruScout = CreateHuman ;
2875: LD_ADDR_EXP 61
2879: PUSH
2880: CALL_OW 44
2884: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2885: LD_EXP 61
2889: PPUSH
2890: LD_INT 3
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 49
// ComCrawl ( ruScout ) ;
2900: LD_EXP 61
2904: PPUSH
2905: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2909: LD_EXP 61
2913: PPUSH
2914: LD_INT 98
2916: PPUSH
2917: LD_INT 36
2919: PPUSH
2920: CALL_OW 178
// uc_side = 6 ;
2924: LD_ADDR_OWVAR 20
2928: PUSH
2929: LD_INT 6
2931: ST_TO_ADDR
// for i in otherKirovUnits do
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_EXP 62
2941: PUSH
2942: FOR_IN
2943: IFFALSE 3079
// begin SetSide ( i , 6 ) ;
2945: LD_VAR 0 2
2949: PPUSH
2950: LD_INT 6
2952: PPUSH
2953: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2957: LD_VAR 0 2
2961: PPUSH
2962: CALL_OW 257
2966: PUSH
2967: LD_INT 1
2969: EQUAL
2970: PUSH
2971: LD_EXP 74
2975: PUSH
2976: LD_INT 0
2978: GREATER
2979: AND
2980: IFFALSE 3056
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
2982: LD_VAR 0 2
2986: PPUSH
2987: LD_INT 18
2989: PPUSH
2990: LD_INT 22
2992: PUSH
2993: LD_INT 6
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 21
3002: PUSH
3003: LD_INT 3
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 30
3012: PUSH
3013: LD_INT 32
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: LIST
3024: PPUSH
3025: CALL_OW 70
3029: PUSH
3030: LD_EXP 74
3034: ARRAY
3035: PPUSH
3036: CALL 8222 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3040: LD_ADDR_EXP 74
3044: PUSH
3045: LD_EXP 74
3049: PUSH
3050: LD_INT 1
3052: MINUS
3053: ST_TO_ADDR
// end else
3054: GO 3077
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3056: LD_VAR 0 2
3060: PPUSH
3061: LD_INT 159
3063: PPUSH
3064: LD_INT 107
3066: PPUSH
3067: LD_INT 10
3069: PPUSH
3070: LD_INT 0
3072: PPUSH
3073: CALL_OW 50
// end ; end ;
3077: GO 2942
3079: POP
3080: POP
// end ;
3081: LD_VAR 0 1
3085: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
// uc_side = 6 ;
3092: LD_ADDR_OWVAR 20
3096: PUSH
3097: LD_INT 6
3099: ST_TO_ADDR
// uc_nation = 3 ;
3100: LD_ADDR_OWVAR 21
3104: PUSH
3105: LD_INT 3
3107: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3108: LD_ADDR_EXP 79
3112: PUSH
3113: LD_STRING Grishko
3115: PPUSH
3116: LD_INT 0
3118: PPUSH
3119: CALL 6846 0 2
3123: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3124: LD_EXP 79
3128: PPUSH
3129: LD_INT 218
3131: PPUSH
3132: LD_INT 108
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_INT 0
3140: PPUSH
3141: CALL_OW 50
// ComHold ( Grishko ) ;
3145: LD_EXP 79
3149: PPUSH
3150: CALL_OW 140
// end ;
3154: LD_VAR 0 1
3158: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3159: LD_INT 0
3161: PPUSH
3162: PPUSH
3163: PPUSH
// uc_side = 3 ;
3164: LD_ADDR_OWVAR 20
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// uc_nation = 3 ;
3172: LD_ADDR_OWVAR 21
3176: PUSH
3177: LD_INT 3
3179: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3180: LD_ADDR_VAR 0 2
3184: PUSH
3185: DOUBLE
3186: LD_INT 1
3188: DEC
3189: ST_TO_ADDR
3190: LD_EXP 4
3194: PUSH
3195: FOR_TO
3196: IFFALSE 3328
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3198: LD_EXP 4
3202: PUSH
3203: LD_VAR 0 2
3207: ARRAY
3208: PUSH
3209: LD_INT 1
3211: ARRAY
3212: PPUSH
3213: LD_EXP 4
3217: PUSH
3218: LD_VAR 0 2
3222: ARRAY
3223: PUSH
3224: LD_INT 2
3226: ARRAY
3227: PPUSH
3228: LD_EXP 4
3232: PUSH
3233: LD_VAR 0 2
3237: ARRAY
3238: PUSH
3239: LD_INT 3
3241: ARRAY
3242: PPUSH
3243: LD_EXP 4
3247: PUSH
3248: LD_VAR 0 2
3252: ARRAY
3253: PUSH
3254: LD_INT 4
3256: ARRAY
3257: PPUSH
3258: LD_EXP 4
3262: PUSH
3263: LD_VAR 0 2
3267: ARRAY
3268: PUSH
3269: LD_INT 5
3271: ARRAY
3272: PPUSH
3273: CALL 33451 0 5
// vehicle = CreateVehicle ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: CALL_OW 45
3286: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3287: LD_VAR 0 3
3291: PPUSH
3292: LD_INT 25
3294: PPUSH
3295: LD_INT 0
3297: PPUSH
3298: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3302: LD_VAR 0 3
3306: PPUSH
3307: LD_EXP 4
3311: PUSH
3312: LD_VAR 0 2
3316: ARRAY
3317: PUSH
3318: LD_INT 6
3320: ARRAY
3321: PPUSH
3322: CALL_OW 234
// end ;
3326: GO 3195
3328: POP
3329: POP
// end ;
3330: LD_VAR 0 1
3334: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3335: LD_INT 0
3337: PPUSH
3338: PPUSH
3339: PPUSH
3340: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: LD_STRING 02_OtherBuildings_4
3348: PPUSH
3349: EMPTY
3350: PPUSH
3351: CALL_OW 30
3355: ST_TO_ADDR
// uc_side = 3 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 3
3363: ST_TO_ADDR
// for i := 1 to otherBuildings do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_VAR 0 3
3378: PUSH
3379: FOR_TO
3380: IFFALSE 3641
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3382: LD_ADDR_OWVAR 21
3386: PUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_VAR 0 2
3396: ARRAY
3397: PUSH
3398: LD_INT 6
3400: ARRAY
3401: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3402: LD_ADDR_OWVAR 42
3406: PUSH
3407: LD_VAR 0 3
3411: PUSH
3412: LD_VAR 0 2
3416: ARRAY
3417: PUSH
3418: LD_INT 1
3420: ARRAY
3421: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3422: LD_ADDR_OWVAR 43
3426: PUSH
3427: LD_VAR 0 3
3431: PUSH
3432: LD_VAR 0 2
3436: ARRAY
3437: PUSH
3438: LD_INT 5
3440: ARRAY
3441: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3442: LD_ADDR_VAR 0 4
3446: PUSH
3447: LD_VAR 0 3
3451: PUSH
3452: LD_VAR 0 2
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: LD_VAR 0 3
3466: PUSH
3467: LD_VAR 0 2
3471: ARRAY
3472: PUSH
3473: LD_INT 3
3475: ARRAY
3476: PPUSH
3477: LD_VAR 0 3
3481: PUSH
3482: LD_VAR 0 2
3486: ARRAY
3487: PUSH
3488: LD_INT 4
3490: ARRAY
3491: PPUSH
3492: CALL_OW 47
3496: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3497: LD_VAR 0 4
3501: PPUSH
3502: LD_VAR 0 3
3506: PUSH
3507: LD_VAR 0 2
3511: ARRAY
3512: PUSH
3513: LD_INT 7
3515: ARRAY
3516: PPUSH
3517: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3521: LD_VAR 0 4
3525: PPUSH
3526: CALL_OW 266
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: LD_INT 1
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: IN
3541: IFFALSE 3639
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3543: LD_VAR 0 4
3547: PPUSH
3548: CALL_OW 274
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: LD_VAR 0 3
3560: PUSH
3561: LD_VAR 0 2
3565: ARRAY
3566: PUSH
3567: LD_INT 8
3569: ARRAY
3570: PPUSH
3571: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3575: LD_VAR 0 4
3579: PPUSH
3580: CALL_OW 274
3584: PPUSH
3585: LD_INT 1
3587: PPUSH
3588: LD_VAR 0 3
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 9
3601: ARRAY
3602: PPUSH
3603: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 274
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_VAR 0 3
3624: PUSH
3625: LD_VAR 0 2
3629: ARRAY
3630: PUSH
3631: LD_INT 10
3633: ARRAY
3634: PPUSH
3635: CALL_OW 277
// end ; end ;
3639: GO 3379
3641: POP
3642: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: LD_STRING 02_AmericanBuildings_5
3650: PPUSH
3651: EMPTY
3652: PPUSH
3653: CALL_OW 30
3657: ST_TO_ADDR
// uc_side = 1 ;
3658: LD_ADDR_OWVAR 20
3662: PUSH
3663: LD_INT 1
3665: ST_TO_ADDR
// uc_nation = 1 ;
3666: LD_ADDR_OWVAR 21
3670: PUSH
3671: LD_INT 1
3673: ST_TO_ADDR
// for i := 1 to otherBuildings do
3674: LD_ADDR_VAR 0 2
3678: PUSH
3679: DOUBLE
3680: LD_INT 1
3682: DEC
3683: ST_TO_ADDR
3684: LD_VAR 0 3
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3894
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3692: LD_ADDR_OWVAR 42
3696: PUSH
3697: LD_VAR 0 3
3701: PUSH
3702: LD_VAR 0 2
3706: ARRAY
3707: PUSH
3708: LD_INT 1
3710: ARRAY
3711: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3712: LD_ADDR_OWVAR 43
3716: PUSH
3717: LD_VAR 0 3
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PUSH
3728: LD_INT 5
3730: ARRAY
3731: ST_TO_ADDR
// if bc_type = b_breastwork then
3732: LD_OWVAR 42
3736: PUSH
3737: LD_INT 31
3739: EQUAL
3740: IFFALSE 3813
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_VAR 0 3
3751: PUSH
3752: LD_VAR 0 2
3756: ARRAY
3757: PUSH
3758: LD_INT 2
3760: ARRAY
3761: PPUSH
3762: LD_VAR 0 3
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: PUSH
3773: LD_INT 3
3775: ARRAY
3776: PPUSH
3777: LD_VAR 0 3
3781: PUSH
3782: LD_VAR 0 2
3786: ARRAY
3787: PUSH
3788: LD_INT 4
3790: ARRAY
3791: PPUSH
3792: CALL_OW 47
3796: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3797: LD_EXP 41
3801: PPUSH
3802: LD_VAR 0 4
3806: PPUSH
3807: CALL 8312 0 2
// end else
3811: GO 3868
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3813: LD_ADDR_VAR 0 4
3817: PUSH
3818: LD_VAR 0 3
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PUSH
3829: LD_INT 2
3831: ARRAY
3832: PPUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_VAR 0 2
3842: ARRAY
3843: PUSH
3844: LD_INT 3
3846: ARRAY
3847: PPUSH
3848: LD_VAR 0 3
3852: PUSH
3853: LD_VAR 0 2
3857: ARRAY
3858: PUSH
3859: LD_INT 4
3861: ARRAY
3862: PPUSH
3863: CALL_OW 47
3867: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3868: LD_VAR 0 4
3872: PPUSH
3873: LD_VAR 0 3
3877: PUSH
3878: LD_VAR 0 2
3882: ARRAY
3883: PUSH
3884: LD_INT 7
3886: ARRAY
3887: PPUSH
3888: CALL_OW 234
// end ;
3892: GO 3689
3894: POP
3895: POP
// end ;
3896: LD_VAR 0 1
3900: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3901: LD_INT 0
3903: PPUSH
3904: PPUSH
// secondBaseTeam = [ ] ;
3905: LD_ADDR_EXP 75
3909: PUSH
3910: EMPTY
3911: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3912: LD_INT 226
3914: PPUSH
3915: LD_INT 109
3917: PPUSH
3918: LD_INT 6
3920: PPUSH
3921: CALL_OW 441
// uc_side = 6 ;
3925: LD_ADDR_OWVAR 20
3929: PUSH
3930: LD_INT 6
3932: ST_TO_ADDR
// uc_nation = 3 ;
3933: LD_ADDR_OWVAR 21
3937: PUSH
3938: LD_INT 3
3940: ST_TO_ADDR
// hc_name =  ;
3941: LD_ADDR_OWVAR 26
3945: PUSH
3946: LD_STRING 
3948: ST_TO_ADDR
// hc_gallery =  ;
3949: LD_ADDR_OWVAR 33
3953: PUSH
3954: LD_STRING 
3956: ST_TO_ADDR
// for i := 1 to 3 do
3957: LD_ADDR_VAR 0 2
3961: PUSH
3962: DOUBLE
3963: LD_INT 1
3965: DEC
3966: ST_TO_ADDR
3967: LD_INT 3
3969: PUSH
3970: FOR_TO
3971: IFFALSE 4024
// begin PrepareSoldier ( false , enemySkillLevel ) ;
3973: LD_INT 0
3975: PPUSH
3976: LD_EXP 41
3980: PPUSH
3981: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
3985: LD_ADDR_EXP 75
3989: PUSH
3990: LD_EXP 75
3994: PUSH
3995: CALL_OW 44
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4001: LD_EXP 75
4005: PUSH
4006: LD_VAR 0 2
4010: ARRAY
4011: PPUSH
4012: LD_INT 19
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL_OW 49
// end ;
4022: GO 3970
4024: POP
4025: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_EXP 41
4033: PPUSH
4034: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4038: LD_ADDR_EXP 75
4042: PUSH
4043: LD_EXP 75
4047: PUSH
4048: CALL_OW 44
4052: ADD
4053: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4054: LD_EXP 75
4058: PUSH
4059: LD_INT 4
4061: ARRAY
4062: PPUSH
4063: LD_INT 19
4065: PPUSH
4066: LD_INT 0
4068: PPUSH
4069: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4073: LD_INT 0
4075: PPUSH
4076: LD_EXP 41
4080: PPUSH
4081: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4085: LD_ADDR_EXP 75
4089: PUSH
4090: LD_EXP 75
4094: PUSH
4095: CALL_OW 44
4099: ADD
4100: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4101: LD_EXP 75
4105: PUSH
4106: LD_INT 5
4108: ARRAY
4109: PPUSH
4110: LD_INT 19
4112: PPUSH
4113: LD_INT 0
4115: PPUSH
4116: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4120: LD_EXP 75
4124: PPUSH
4125: LD_INT 214
4127: PPUSH
4128: LD_INT 105
4130: PPUSH
4131: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4135: LD_EXP 75
4139: PPUSH
4140: LD_INT 25
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PPUSH
4150: CALL_OW 72
4154: PPUSH
4155: LD_INT 0
4157: PPUSH
4158: LD_INT 222
4160: PPUSH
4161: LD_INT 115
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4171: LD_EXP 75
4175: PPUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: PPUSH
4191: LD_INT 224
4193: PPUSH
4194: LD_INT 107
4196: PPUSH
4197: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4201: LD_EXP 75
4205: PPUSH
4206: LD_INT 25
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PPUSH
4216: CALL_OW 72
4220: PPUSH
4221: LD_INT 228
4223: PPUSH
4224: LD_INT 110
4226: PPUSH
4227: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4231: LD_EXP 75
4235: PPUSH
4236: LD_INT 25
4238: PUSH
4239: LD_INT 2
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PPUSH
4251: LD_INT 4
4253: PPUSH
4254: LD_INT 216
4256: PPUSH
4257: LD_INT 114
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4267: LD_EXP 75
4271: PPUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 72
4286: PPUSH
4287: LD_INT 31
4289: PPUSH
4290: LD_INT 215
4292: PPUSH
4293: LD_INT 103
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4303: LD_EXP 75
4307: PPUSH
4308: LD_INT 25
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 72
4322: PPUSH
4323: LD_INT 31
4325: PPUSH
4326: LD_INT 227
4328: PPUSH
4329: LD_INT 116
4331: PPUSH
4332: LD_INT 5
4334: PPUSH
4335: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4339: LD_EXP 75
4343: PPUSH
4344: LD_INT 25
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: PPUSH
4359: LD_INT 29
4361: PPUSH
4362: LD_INT 226
4364: PPUSH
4365: LD_INT 109
4367: PPUSH
4368: LD_INT 3
4370: PPUSH
4371: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4375: LD_EXP 75
4379: PPUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 72
4394: PPUSH
4395: LD_INT 208
4397: PPUSH
4398: LD_INT 106
4400: PPUSH
4401: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4405: LD_EXP 75
4409: PPUSH
4410: LD_INT 25
4412: PUSH
4413: LD_INT 2
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PPUSH
4420: CALL_OW 72
4424: PPUSH
4425: LD_INT 209
4427: PPUSH
4428: LD_INT 105
4430: PPUSH
4431: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4435: LD_EXP 75
4439: PUSH
4440: LD_INT 5
4442: ARRAY
4443: PPUSH
4444: LD_INT 209
4446: PPUSH
4447: LD_INT 105
4449: PPUSH
4450: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4454: LD_EXP 75
4458: PUSH
4459: LD_INT 5
4461: ARRAY
4462: PPUSH
4463: LD_INT 208
4465: PPUSH
4466: LD_INT 106
4468: PPUSH
4469: CALL_OW 178
// end ;
4473: LD_VAR 0 1
4477: RET
// export function SpawnKirovSupport ; var i , un ; begin
4478: LD_INT 0
4480: PPUSH
4481: PPUSH
4482: PPUSH
// uc_side = 6 ;
4483: LD_ADDR_OWVAR 20
4487: PUSH
4488: LD_INT 6
4490: ST_TO_ADDR
// uc_nation = 3 ;
4491: LD_ADDR_OWVAR 21
4495: PUSH
4496: LD_INT 3
4498: ST_TO_ADDR
// hc_name =  ;
4499: LD_ADDR_OWVAR 26
4503: PUSH
4504: LD_STRING 
4506: ST_TO_ADDR
// hc_gallery :=  ;
4507: LD_ADDR_OWVAR 33
4511: PUSH
4512: LD_STRING 
4514: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_EXP 77
4529: PUSH
4530: FOR_TO
4531: IFFALSE 4619
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4533: LD_INT 0
4535: PPUSH
4536: LD_INT 1
4538: PPUSH
4539: LD_INT 4
4541: PPUSH
4542: CALL_OW 12
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 2
4552: PPUSH
4553: CALL_OW 12
4557: PPUSH
4558: CALL_OW 380
// un = CreateHuman ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: CALL_OW 44
4571: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4572: LD_ADDR_EXP 76
4576: PUSH
4577: LD_EXP 76
4581: PUSH
4582: LD_VAR 0 3
4586: ADD
4587: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4588: LD_VAR 0 3
4592: PPUSH
4593: LD_INT 19
4595: PPUSH
4596: LD_INT 0
4598: PPUSH
4599: CALL_OW 49
// ComEnterUnit ( un , ru2_bar1 ) ;
4603: LD_VAR 0 3
4607: PPUSH
4608: LD_EXP 66
4612: PPUSH
4613: CALL_OW 120
// end ;
4617: GO 4530
4619: POP
4620: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4621: LD_ADDR_VAR 0 2
4625: PUSH
4626: DOUBLE
4627: LD_INT 1
4629: DEC
4630: ST_TO_ADDR
4631: LD_EXP 78
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PUSH
4640: LD_INT 4
4642: PLUS
4643: PUSH
4644: FOR_TO
4645: IFFALSE 4743
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4647: LD_INT 0
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 3
4658: PPUSH
4659: CALL_OW 12
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 19
4685: PPUSH
4686: LD_INT 0
4688: PPUSH
4689: CALL_OW 49
// if i > kirovBunkersToOccupy then
4693: LD_VAR 0 2
4697: PUSH
4698: LD_EXP 70
4702: GREATER
4703: IFFALSE 4721
// ComEnterUnit ( un , ru2_bar2 ) else
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_EXP 67
4714: PPUSH
4715: CALL_OW 120
4719: GO 4741
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4721: LD_VAR 0 3
4725: PPUSH
4726: LD_EXP 70
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: PPUSH
4737: CALL_OW 120
// end ;
4741: GO 4644
4743: POP
4744: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4745: LD_ADDR_VAR 0 2
4749: PUSH
4750: DOUBLE
4751: LD_INT 1
4753: DEC
4754: ST_TO_ADDR
4755: LD_EXP 78
4759: PUSH
4760: LD_INT 3
4762: ARRAY
4763: PUSH
4764: FOR_TO
4765: IFFALSE 4868
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4767: LD_INT 0
4769: PPUSH
4770: LD_INT 3
4772: PPUSH
4773: LD_INT 1
4775: PPUSH
4776: LD_INT 3
4778: PPUSH
4779: CALL_OW 12
4783: PPUSH
4784: CALL_OW 380
// un = CreateHuman ;
4788: LD_ADDR_VAR 0 3
4792: PUSH
4793: CALL_OW 44
4797: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4798: LD_VAR 0 3
4802: PPUSH
4803: LD_INT 19
4805: PPUSH
4806: LD_INT 0
4808: PPUSH
4809: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4813: LD_VAR 0 3
4817: PPUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 6
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 21
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 30
4840: PUSH
4841: LD_INT 3
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 120
// end ;
4866: GO 4764
4868: POP
4869: POP
// for i := 1 to neededUnitsSpawn [ 4 ] do
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: DOUBLE
4876: LD_INT 1
4878: DEC
4879: ST_TO_ADDR
4880: LD_EXP 78
4884: PUSH
4885: LD_INT 4
4887: ARRAY
4888: PUSH
4889: FOR_TO
4890: IFFALSE 4996
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4892: LD_INT 0
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: LD_INT 1
4900: PPUSH
4901: LD_INT 3
4903: PPUSH
4904: CALL_OW 12
4908: PPUSH
4909: CALL_OW 380
// un = CreateHuman ;
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: CALL_OW 44
4922: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4923: LD_VAR 0 3
4927: PPUSH
4928: LD_INT 19
4930: PPUSH
4931: LD_INT 0
4933: PPUSH
4934: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4938: LD_VAR 0 3
4942: PPUSH
4943: LD_INT 18
4945: PPUSH
4946: LD_INT 22
4948: PUSH
4949: LD_INT 6
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 21
4958: PUSH
4959: LD_INT 3
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 30
4968: PUSH
4969: LD_INT 6
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 70
4985: PUSH
4986: LD_INT 1
4988: ARRAY
4989: PPUSH
4990: CALL_OW 120
// end ;
4994: GO 4889
4996: POP
4997: POP
// end ;
4998: LD_VAR 0 1
5002: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5003: LD_INT 0
5005: PPUSH
5006: PPUSH
5007: PPUSH
// survivorsArabianAttack = [ ] ;
5008: LD_ADDR_EXP 76
5012: PUSH
5013: EMPTY
5014: ST_TO_ADDR
// limit = 9 ;
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_INT 9
5022: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5023: LD_ADDR_EXP 76
5027: PUSH
5028: LD_EXP 76
5032: PUSH
5033: LD_EXP 59
5037: ADD
5038: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5039: LD_EXP 50
5043: PPUSH
5044: CALL_OW 302
5048: PUSH
5049: LD_EXP 50
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: LD_INT 6
5061: EQUAL
5062: AND
5063: IFFALSE 5095
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5065: LD_ADDR_EXP 76
5069: PUSH
5070: LD_EXP 76
5074: PUSH
5075: LD_EXP 50
5079: ADD
5080: ST_TO_ADDR
// limit = limit - 1 ;
5081: LD_ADDR_VAR 0 2
5085: PUSH
5086: LD_VAR 0 2
5090: PUSH
5091: LD_INT 1
5093: MINUS
5094: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5095: LD_EXP 51
5099: PPUSH
5100: CALL_OW 302
5104: PUSH
5105: LD_EXP 51
5109: PPUSH
5110: CALL_OW 255
5114: PUSH
5115: LD_INT 6
5117: EQUAL
5118: AND
5119: IFFALSE 5151
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5121: LD_ADDR_EXP 76
5125: PUSH
5126: LD_EXP 76
5130: PUSH
5131: LD_EXP 51
5135: ADD
5136: ST_TO_ADDR
// limit = limit - 1 ;
5137: LD_ADDR_VAR 0 2
5141: PUSH
5142: LD_VAR 0 2
5146: PUSH
5147: LD_INT 1
5149: MINUS
5150: ST_TO_ADDR
// end ; for unit in other_survivors do
5151: LD_ADDR_VAR 0 3
5155: PUSH
5156: LD_EXP 53
5160: PUSH
5161: FOR_IN
5162: IFFALSE 5222
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5164: LD_VAR 0 3
5168: PPUSH
5169: CALL_OW 302
5173: PUSH
5174: LD_VAR 0 3
5178: PPUSH
5179: CALL_OW 255
5183: PUSH
5184: LD_INT 6
5186: EQUAL
5187: AND
5188: IFFALSE 5220
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5190: LD_ADDR_EXP 76
5194: PUSH
5195: LD_EXP 76
5199: PUSH
5200: LD_VAR 0 3
5204: ADD
5205: ST_TO_ADDR
// limit = limit - 1 ;
5206: LD_ADDR_VAR 0 2
5210: PUSH
5211: LD_VAR 0 2
5215: PUSH
5216: LD_INT 1
5218: MINUS
5219: ST_TO_ADDR
// end ; end ;
5220: GO 5161
5222: POP
5223: POP
// for unit in otherBeriaUnits do
5224: LD_ADDR_VAR 0 3
5228: PUSH
5229: LD_EXP 55
5233: PUSH
5234: FOR_IN
5235: IFFALSE 5295
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5237: LD_VAR 0 3
5241: PPUSH
5242: CALL_OW 302
5246: PUSH
5247: LD_VAR 0 3
5251: PPUSH
5252: CALL_OW 255
5256: PUSH
5257: LD_INT 6
5259: EQUAL
5260: AND
5261: IFFALSE 5293
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5263: LD_ADDR_EXP 76
5267: PUSH
5268: LD_EXP 76
5272: PUSH
5273: LD_VAR 0 3
5277: ADD
5278: ST_TO_ADDR
// limit = limit - 1 ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: LD_VAR 0 2
5288: PUSH
5289: LD_INT 1
5291: MINUS
5292: ST_TO_ADDR
// end ; end ;
5293: GO 5234
5295: POP
5296: POP
// if limit > 0 then
5297: LD_VAR 0 2
5301: PUSH
5302: LD_INT 0
5304: GREATER
5305: IFFALSE 5317
// survivorsToSpawn = limit ;
5307: LD_ADDR_EXP 77
5311: PUSH
5312: LD_VAR 0 2
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 1
5321: RET
// export function PrepareScholtze ; begin
5322: LD_INT 0
5324: PPUSH
// uc_side = 8 ;
5325: LD_ADDR_OWVAR 20
5329: PUSH
5330: LD_INT 8
5332: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5333: LD_ADDR_EXP 52
5337: PUSH
5338: LD_STRING Scholtze
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL 6846 0 2
5348: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5349: LD_EXP 52
5353: PPUSH
5354: LD_INT 30
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: CALL_OW 49
// end ; end_of_file
5364: LD_VAR 0 1
5368: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5369: LD_INT 0
5371: PPUSH
// amSupportTroops = [ ] ;
5372: LD_ADDR_EXP 81
5376: PUSH
5377: EMPTY
5378: ST_TO_ADDR
// PrepareOmicronBase ;
5379: CALL 5388 0 0
// end ;
5383: LD_VAR 0 1
5387: RET
// function PrepareOmicronBase ; var base ; begin
5388: LD_INT 0
5390: PPUSH
5391: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5392: LD_ADDR_EXP 83
5396: PUSH
5397: LD_INT 64
5399: PPUSH
5400: LD_INT 13
5402: PPUSH
5403: LD_STRING omikron
5405: PPUSH
5406: LD_INT 1
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_OWVAR 67
5424: ARRAY
5425: PPUSH
5426: LD_INT 3000
5428: PUSH
5429: LD_INT 3000
5431: PUSH
5432: LD_INT 0
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PPUSH
5440: LD_INT 7
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: LD_INT 4
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL 36860 0 6
5462: ST_TO_ADDR
// case Difficulty of 2 :
5463: LD_OWVAR 67
5467: PUSH
5468: LD_INT 2
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5492
5476: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5477: LD_INT 51
5479: PPUSH
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 1
5485: PPUSH
5486: CALL_OW 322
// end ; 3 :
5490: GO 5530
5492: LD_INT 3
5494: DOUBLE
5495: EQUAL
5496: IFTRUE 5500
5498: GO 5529
5500: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5501: LD_INT 49
5503: PPUSH
5504: LD_INT 1
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5514: LD_INT 51
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: CALL_OW 322
// end ; end ;
5527: GO 5530
5529: POP
// end ;
5530: LD_VAR 0 1
5534: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5535: LD_INT 0
5537: PPUSH
5538: PPUSH
5539: PPUSH
5540: PPUSH
// amIntroUnits = [ ] ;
5541: LD_ADDR_EXP 80
5545: PUSH
5546: EMPTY
5547: ST_TO_ADDR
// uc_side = 1 ;
5548: LD_ADDR_OWVAR 20
5552: PUSH
5553: LD_INT 1
5555: ST_TO_ADDR
// uc_nation = nation_american ;
5556: LD_ADDR_OWVAR 21
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5564: LD_ADDR_OWVAR 37
5568: PUSH
5569: LD_INT 3
5571: ST_TO_ADDR
// vc_control = control_manual ;
5572: LD_ADDR_OWVAR 38
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// vc_engine = engine_combustion ;
5580: LD_ADDR_OWVAR 39
5584: PUSH
5585: LD_INT 1
5587: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5588: LD_ADDR_OWVAR 40
5592: PUSH
5593: LD_INT 5
5595: ST_TO_ADDR
// veh = CreateVehicle ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: CALL_OW 45
5605: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5606: LD_VAR 0 3
5610: PPUSH
5611: LD_INT 4
5613: PPUSH
5614: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5618: LD_ADDR_EXP 80
5622: PUSH
5623: LD_EXP 80
5627: PUSH
5628: LD_VAR 0 3
5632: ADD
5633: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5634: LD_VAR 0 3
5638: PPUSH
5639: LD_INT 5
5641: PPUSH
5642: LD_INT 0
5644: PPUSH
5645: CALL_OW 49
// for i := 1 to 5 do
5649: LD_ADDR_VAR 0 2
5653: PUSH
5654: DOUBLE
5655: LD_INT 1
5657: DEC
5658: ST_TO_ADDR
5659: LD_INT 5
5661: PUSH
5662: FOR_TO
5663: IFFALSE 5760
// begin hc_name :=  ;
5665: LD_ADDR_OWVAR 26
5669: PUSH
5670: LD_STRING 
5672: ST_TO_ADDR
// hc_gallery :=  ;
5673: LD_ADDR_OWVAR 33
5677: PUSH
5678: LD_STRING 
5680: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5681: LD_INT 0
5683: PPUSH
5684: LD_INT 1
5686: PPUSH
5687: CALL_OW 381
// human = CreateHuman ;
5691: LD_ADDR_VAR 0 4
5695: PUSH
5696: CALL_OW 44
5700: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5701: LD_ADDR_EXP 80
5705: PUSH
5706: LD_EXP 80
5710: PUSH
5711: LD_VAR 0 4
5715: ADD
5716: ST_TO_ADDR
// if i < 5 then
5717: LD_VAR 0 2
5721: PUSH
5722: LD_INT 5
5724: LESS
5725: IFFALSE 5744
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 5
5734: PPUSH
5735: LD_INT 0
5737: PPUSH
5738: CALL_OW 49
5742: GO 5758
// begin PlaceHumanInUnit ( human , veh ) ;
5744: LD_VAR 0 4
5748: PPUSH
5749: LD_VAR 0 3
5753: PPUSH
5754: CALL_OW 52
// end ; end ;
5758: GO 5662
5760: POP
5761: POP
// end ;
5762: LD_VAR 0 1
5766: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5767: LD_INT 0
5769: PPUSH
5770: PPUSH
5771: PPUSH
5772: PPUSH
5773: PPUSH
// uc_side := 1 ;
5774: LD_ADDR_OWVAR 20
5778: PUSH
5779: LD_INT 1
5781: ST_TO_ADDR
// uc_nation := 1 ;
5782: LD_ADDR_OWVAR 21
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// hc_name :=  ;
5790: LD_ADDR_OWVAR 26
5794: PUSH
5795: LD_STRING 
5797: ST_TO_ADDR
// hc_gallery :=  ;
5798: LD_ADDR_OWVAR 33
5802: PUSH
5803: LD_STRING 
5805: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5806: LD_ADDR_VAR 0 6
5810: PUSH
5811: DOUBLE
5812: LD_INT 1
5814: DEC
5815: ST_TO_ADDR
5816: LD_VAR 0 1
5820: PUSH
5821: FOR_TO
5822: IFFALSE 5881
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5824: LD_INT 0
5826: PPUSH
5827: LD_EXP 41
5831: PPUSH
5832: CALL_OW 381
// un = CreateHuman ;
5836: LD_ADDR_VAR 0 7
5840: PUSH
5841: CALL_OW 44
5845: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5846: LD_ADDR_EXP 81
5850: PUSH
5851: LD_EXP 81
5855: PUSH
5856: LD_VAR 0 7
5860: ADD
5861: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5862: LD_VAR 0 7
5866: PPUSH
5867: LD_VAR 0 4
5871: PPUSH
5872: LD_INT 0
5874: PPUSH
5875: CALL_OW 49
// end ;
5879: GO 5821
5881: POP
5882: POP
// for i := 1 to scientistsAmount do
5883: LD_ADDR_VAR 0 6
5887: PUSH
5888: DOUBLE
5889: LD_INT 1
5891: DEC
5892: ST_TO_ADDR
5893: LD_VAR 0 2
5897: PUSH
5898: FOR_TO
5899: IFFALSE 5958
// begin PrepareScientist ( false , enemySkillLevel ) ;
5901: LD_INT 0
5903: PPUSH
5904: LD_EXP 41
5908: PPUSH
5909: CALL_OW 384
// un = CreateHuman ;
5913: LD_ADDR_VAR 0 7
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5923: LD_ADDR_EXP 81
5927: PUSH
5928: LD_EXP 81
5932: PUSH
5933: LD_VAR 0 7
5937: ADD
5938: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5939: LD_VAR 0 7
5943: PPUSH
5944: LD_VAR 0 4
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 49
// end ;
5956: GO 5898
5958: POP
5959: POP
// for i := 1 to vehiclesAmount do
5960: LD_ADDR_VAR 0 6
5964: PUSH
5965: DOUBLE
5966: LD_INT 1
5968: DEC
5969: ST_TO_ADDR
5970: LD_VAR 0 3
5974: PUSH
5975: FOR_TO
5976: IFFALSE 6142
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
5978: LD_ADDR_OWVAR 40
5982: PUSH
5983: LD_INT 2
5985: PUSH
5986: LD_INT 4
5988: PUSH
5989: LD_INT 3
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: LIST
5996: PUSH
5997: LD_INT 1
5999: PPUSH
6000: LD_INT 3
6002: PPUSH
6003: CALL_OW 12
6007: ARRAY
6008: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6009: LD_ADDR_OWVAR 37
6013: PUSH
6014: LD_INT 3
6016: ST_TO_ADDR
// vc_control = control_manual ;
6017: LD_ADDR_OWVAR 38
6021: PUSH
6022: LD_INT 1
6024: ST_TO_ADDR
// vc_engine = engine_combustion ;
6025: LD_ADDR_OWVAR 39
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// veh = CreateVehicle ;
6033: LD_ADDR_VAR 0 8
6037: PUSH
6038: CALL_OW 45
6042: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6043: LD_ADDR_EXP 81
6047: PUSH
6048: LD_EXP 81
6052: PUSH
6053: LD_VAR 0 8
6057: ADD
6058: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6059: LD_VAR 0 8
6063: PPUSH
6064: LD_VAR 0 4
6068: PPUSH
6069: LD_INT 0
6071: PPUSH
6072: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6076: LD_INT 0
6078: PPUSH
6079: LD_EXP 41
6083: PPUSH
6084: CALL_OW 383
// un = CreateHuman ;
6088: LD_ADDR_VAR 0 7
6092: PUSH
6093: CALL_OW 44
6097: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6098: LD_ADDR_EXP 81
6102: PUSH
6103: LD_EXP 81
6107: PUSH
6108: LD_VAR 0 7
6112: ADD
6113: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6114: LD_VAR 0 7
6118: PPUSH
6119: LD_VAR 0 8
6123: PPUSH
6124: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6128: LD_VAR 0 8
6132: PPUSH
6133: LD_INT 100
6135: PPUSH
6136: CALL_OW 240
// end ;
6140: GO 5975
6142: POP
6143: POP
// case area of NorthAmericanSpawnArea :
6144: LD_VAR 0 4
6148: PUSH
6149: LD_INT 7
6151: DOUBLE
6152: EQUAL
6153: IFTRUE 6157
6155: GO 6168
6157: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6158: LD_ADDR_VAR 0 9
6162: PUSH
6163: LD_INT 10
6165: ST_TO_ADDR
6166: GO 6207
6168: LD_INT 9
6170: DOUBLE
6171: EQUAL
6172: IFTRUE 6176
6174: GO 6187
6176: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6177: LD_ADDR_VAR 0 9
6181: PUSH
6182: LD_INT 11
6184: ST_TO_ADDR
6185: GO 6207
6187: LD_INT 8
6189: DOUBLE
6190: EQUAL
6191: IFTRUE 6195
6193: GO 6206
6195: POP
// road = SouthRoadArea2 ; end ;
6196: LD_ADDR_VAR 0 9
6200: PUSH
6201: LD_INT 12
6203: ST_TO_ADDR
6204: GO 6207
6206: POP
// MoveToBase ( amSupportTroops , road ) ;
6207: LD_EXP 81
6211: PPUSH
6212: LD_VAR 0 9
6216: PPUSH
6217: CALL 18140 0 2
// end ;
6221: LD_VAR 0 5
6225: RET
// export function PrepareAmericanPatrol ; var un ; begin
6226: LD_INT 0
6228: PPUSH
6229: PPUSH
// amPatrol = [ ] ;
6230: LD_ADDR_EXP 82
6234: PUSH
6235: EMPTY
6236: ST_TO_ADDR
// uc_side = 1 ;
6237: LD_ADDR_OWVAR 20
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// uc_nation = 1 ;
6245: LD_ADDR_OWVAR 21
6249: PUSH
6250: LD_INT 1
6252: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_STRING Campell
6260: PPUSH
6261: LD_INT 0
6263: PPUSH
6264: CALL 6846 0 2
6268: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6269: LD_ADDR_EXP 82
6273: PUSH
6274: LD_EXP 82
6278: PUSH
6279: LD_VAR 0 2
6283: ADD
6284: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6285: LD_VAR 0 2
6289: PPUSH
6290: LD_INT 14
6292: PPUSH
6293: LD_INT 0
6295: PPUSH
6296: CALL_OW 49
// SetClass ( un , 1 ) ;
6300: LD_VAR 0 2
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6312: LD_INT 1
6314: PPUSH
6315: LD_EXP 41
6319: PPUSH
6320: CALL_OW 381
// un = CreateHuman ;
6324: LD_ADDR_VAR 0 2
6328: PUSH
6329: CALL_OW 44
6333: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6334: LD_ADDR_EXP 82
6338: PUSH
6339: LD_EXP 82
6343: PUSH
6344: LD_VAR 0 2
6348: ADD
6349: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6350: LD_VAR 0 2
6354: PPUSH
6355: LD_INT 14
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6365: LD_EXP 82
6369: PPUSH
6370: LD_EXP 52
6374: PPUSH
6375: CALL_OW 115
// end ; end_of_file
6379: LD_VAR 0 1
6383: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
6388: PPUSH
6389: PPUSH
// northGroup = [ ] ;
6390: LD_ADDR_EXP 84
6394: PUSH
6395: EMPTY
6396: ST_TO_ADDR
// southGroup = [ ] ;
6397: LD_ADDR_EXP 85
6401: PUSH
6402: EMPTY
6403: ST_TO_ADDR
// uc_side = 2 ;
6404: LD_ADDR_OWVAR 20
6408: PUSH
6409: LD_INT 2
6411: ST_TO_ADDR
// uc_nation = 2 ;
6412: LD_ADDR_OWVAR 21
6416: PUSH
6417: LD_INT 2
6419: ST_TO_ADDR
// hc_name :=  ;
6420: LD_ADDR_OWVAR 26
6424: PUSH
6425: LD_STRING 
6427: ST_TO_ADDR
// hc_gallery :=  ;
6428: LD_ADDR_OWVAR 33
6432: PUSH
6433: LD_STRING 
6435: ST_TO_ADDR
// for i := 1 to 10 do
6436: LD_ADDR_VAR 0 2
6440: PUSH
6441: DOUBLE
6442: LD_INT 1
6444: DEC
6445: ST_TO_ADDR
6446: LD_INT 10
6448: PUSH
6449: FOR_TO
6450: IFFALSE 6564
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6452: LD_INT 13
6454: PPUSH
6455: LD_INT 1
6457: PPUSH
6458: LD_INT 1
6460: PPUSH
6461: LD_INT 26
6463: PPUSH
6464: LD_INT 100
6466: PPUSH
6467: CALL 33451 0 5
// veh = CreateVehicle ;
6471: LD_ADDR_VAR 0 4
6475: PUSH
6476: CALL_OW 45
6480: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6481: LD_ADDR_EXP 85
6485: PUSH
6486: LD_EXP 85
6490: PUSH
6491: LD_VAR 0 4
6495: ADD
6496: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6497: LD_VAR 0 4
6501: PPUSH
6502: LD_INT 23
6504: PPUSH
6505: LD_INT 0
6507: PPUSH
6508: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6512: LD_INT 0
6514: PPUSH
6515: LD_INT 8
6517: PPUSH
6518: CALL_OW 383
// un = CreateHuman ;
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: CALL_OW 44
6531: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6532: LD_ADDR_EXP 85
6536: PUSH
6537: LD_EXP 85
6541: PUSH
6542: LD_VAR 0 3
6546: ADD
6547: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6548: LD_VAR 0 3
6552: PPUSH
6553: LD_VAR 0 4
6557: PPUSH
6558: CALL_OW 52
// end ;
6562: GO 6449
6564: POP
6565: POP
// for i := 1 to 20 do
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_INT 20
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6635
// begin PrepareSoldier ( false , 8 ) ;
6582: LD_INT 0
6584: PPUSH
6585: LD_INT 8
6587: PPUSH
6588: CALL_OW 381
// un = CreateHuman ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: CALL_OW 44
6601: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6602: LD_ADDR_EXP 85
6606: PUSH
6607: LD_EXP 85
6611: PUSH
6612: LD_VAR 0 3
6616: ADD
6617: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6618: LD_VAR 0 3
6622: PPUSH
6623: LD_INT 23
6625: PPUSH
6626: LD_INT 0
6628: PPUSH
6629: CALL_OW 49
// end ;
6633: GO 6579
6635: POP
6636: POP
// for i := 1 to 20 do
6637: LD_ADDR_VAR 0 2
6641: PUSH
6642: DOUBLE
6643: LD_INT 1
6645: DEC
6646: ST_TO_ADDR
6647: LD_INT 20
6649: PUSH
6650: FOR_TO
6651: IFFALSE 6709
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6653: LD_INT 0
6655: PPUSH
6656: LD_INT 8
6658: PPUSH
6659: LD_INT 8
6661: PPUSH
6662: CALL_OW 380
// un = CreateHuman ;
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: CALL_OW 44
6675: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6676: LD_ADDR_EXP 85
6680: PUSH
6681: LD_EXP 85
6685: PUSH
6686: LD_VAR 0 3
6690: ADD
6691: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6692: LD_VAR 0 3
6696: PPUSH
6697: LD_INT 23
6699: PPUSH
6700: LD_INT 0
6702: PPUSH
6703: CALL_OW 49
// end ;
6707: GO 6650
6709: POP
6710: POP
// for i := 1 to 10 do
6711: LD_ADDR_VAR 0 2
6715: PUSH
6716: DOUBLE
6717: LD_INT 1
6719: DEC
6720: ST_TO_ADDR
6721: LD_INT 10
6723: PUSH
6724: FOR_TO
6725: IFFALSE 6839
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6727: LD_INT 13
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 1
6735: PPUSH
6736: LD_INT 26
6738: PPUSH
6739: LD_INT 100
6741: PPUSH
6742: CALL 33451 0 5
// veh = CreateVehicle ;
6746: LD_ADDR_VAR 0 4
6750: PUSH
6751: CALL_OW 45
6755: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6756: LD_ADDR_EXP 84
6760: PUSH
6761: LD_EXP 84
6765: PUSH
6766: LD_VAR 0 4
6770: ADD
6771: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6772: LD_VAR 0 4
6776: PPUSH
6777: LD_INT 22
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6787: LD_INT 0
6789: PPUSH
6790: LD_INT 8
6792: PPUSH
6793: CALL_OW 383
// un = CreateHuman ;
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: CALL_OW 44
6806: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6807: LD_ADDR_EXP 84
6811: PUSH
6812: LD_EXP 84
6816: PUSH
6817: LD_VAR 0 3
6821: ADD
6822: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6823: LD_VAR 0 3
6827: PPUSH
6828: LD_VAR 0 4
6832: PPUSH
6833: CALL_OW 52
// end ;
6837: GO 6724
6839: POP
6840: POP
// end ; end_of_file
6841: LD_VAR 0 1
6845: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
// if exist_mode then
6850: LD_VAR 0 2
6854: IFFALSE 6879
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6856: LD_ADDR_VAR 0 4
6860: PUSH
6861: LD_EXP 34
6865: PUSH
6866: LD_VAR 0 1
6870: STR
6871: PPUSH
6872: CALL_OW 34
6876: ST_TO_ADDR
6877: GO 6894
// unit := NewCharacter ( ident ) ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: LD_VAR 0 1
6888: PPUSH
6889: CALL_OW 25
6893: ST_TO_ADDR
// result := unit ;
6894: LD_ADDR_VAR 0 3
6898: PUSH
6899: LD_VAR 0 4
6903: ST_TO_ADDR
// end ;
6904: LD_VAR 0 3
6908: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
6909: LD_INT 0
6911: PPUSH
6912: PPUSH
6913: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kirilenkova , Kovalyuk , Scholtze ] ;
6914: LD_ADDR_VAR 0 1
6918: PUSH
6919: LD_VAR 0 1
6923: PUSH
6924: LD_EXP 46
6928: PUSH
6929: LD_EXP 47
6933: PUSH
6934: LD_EXP 50
6938: PUSH
6939: LD_EXP 51
6943: PUSH
6944: LD_EXP 48
6948: PUSH
6949: LD_EXP 49
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: DIFF
6968: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
6969: LD_ADDR_VAR 0 7
6973: PUSH
6974: LD_VAR 0 1
6978: PUSH
6979: LD_INT 1
6981: PPUSH
6982: LD_VAR 0 1
6986: PPUSH
6987: CALL_OW 12
6991: ARRAY
6992: ST_TO_ADDR
// if radio then
6993: LD_VAR 0 4
6997: IFFALSE 7046
// begin if GetSex ( speaker ) = sex_male then
6999: LD_VAR 0 7
7003: PPUSH
7004: CALL_OW 258
7008: PUSH
7009: LD_INT 1
7011: EQUAL
7012: IFFALSE 7030
// SayRadio ( speaker , dialogMID ) else
7014: LD_VAR 0 7
7018: PPUSH
7019: LD_VAR 0 2
7023: PPUSH
7024: CALL_OW 94
7028: GO 7044
// SayRadio ( speaker , dialogFID ) ;
7030: LD_VAR 0 7
7034: PPUSH
7035: LD_VAR 0 3
7039: PPUSH
7040: CALL_OW 94
// end else
7044: GO 7091
// begin if GetSex ( speaker ) = sex_male then
7046: LD_VAR 0 7
7050: PPUSH
7051: CALL_OW 258
7055: PUSH
7056: LD_INT 1
7058: EQUAL
7059: IFFALSE 7077
// Say ( speaker , dialogMID ) else
7061: LD_VAR 0 7
7065: PPUSH
7066: LD_VAR 0 2
7070: PPUSH
7071: CALL_OW 88
7075: GO 7091
// Say ( speaker , dialogFID ) ;
7077: LD_VAR 0 7
7081: PPUSH
7082: LD_VAR 0 3
7086: PPUSH
7087: CALL_OW 88
// end ; result := speaker ;
7091: LD_ADDR_VAR 0 5
7095: PUSH
7096: LD_VAR 0 7
7100: ST_TO_ADDR
// end ;
7101: LD_VAR 0 5
7105: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7106: LD_INT 0
7108: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 255
7118: PUSH
7119: LD_VAR 0 3
7123: EQUAL
7124: PUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 302
7134: AND
7135: IFFALSE 7157
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7137: LD_VAR 0 1
7141: PPUSH
7142: LD_EXP 33
7146: PUSH
7147: LD_VAR 0 2
7151: STR
7152: PPUSH
7153: CALL_OW 38
// end ;
7157: LD_VAR 0 4
7161: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7162: LD_INT 0
7164: PPUSH
7165: PPUSH
7166: PPUSH
// resultCharactersToSave = [ ] ;
7167: LD_ADDR_VAR 0 6
7171: PUSH
7172: EMPTY
7173: ST_TO_ADDR
// for unit in characters do
7174: LD_ADDR_VAR 0 5
7178: PUSH
7179: LD_VAR 0 1
7183: PUSH
7184: FOR_IN
7185: IFFALSE 7233
// if GetSide ( unit ) = side and IsOK ( unit ) then
7187: LD_VAR 0 5
7191: PPUSH
7192: CALL_OW 255
7196: PUSH
7197: LD_VAR 0 3
7201: EQUAL
7202: PUSH
7203: LD_VAR 0 5
7207: PPUSH
7208: CALL_OW 302
7212: AND
7213: IFFALSE 7231
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7215: LD_ADDR_VAR 0 6
7219: PUSH
7220: LD_VAR 0 6
7224: PUSH
7225: LD_VAR 0 5
7229: ADD
7230: ST_TO_ADDR
7231: GO 7184
7233: POP
7234: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7235: LD_VAR 0 6
7239: PPUSH
7240: LD_EXP 33
7244: PUSH
7245: LD_VAR 0 2
7249: STR
7250: PPUSH
7251: CALL_OW 38
// end ;
7255: LD_VAR 0 4
7259: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7260: LD_INT 0
7262: PPUSH
7263: PPUSH
7264: PPUSH
7265: PPUSH
// charsToChoose = otherKirovUnits ;
7266: LD_ADDR_VAR 0 4
7270: PUSH
7271: LD_EXP 62
7275: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_VAR 0 4
7285: PUSH
7286: LD_EXP 55
7290: ADD
7291: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_VAR 0 4
7301: PUSH
7302: LD_EXP 53
7306: ADD
7307: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: LD_VAR 0 4
7317: PUSH
7318: LD_EXP 50
7322: ADD
7323: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7324: LD_ADDR_VAR 0 4
7328: PUSH
7329: LD_VAR 0 4
7333: PUSH
7334: LD_EXP 51
7338: ADD
7339: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7340: LD_ADDR_VAR 0 5
7344: PUSH
7345: LD_STRING text
7347: PPUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_INT -5
7360: PUSH
7361: LD_EXP 46
7365: PUSH
7366: LD_EXP 47
7370: PUSH
7371: LD_EXP 49
7375: PUSH
7376: LD_EXP 48
7380: PUSH
7381: LD_INT -6
7383: PUSH
7384: LD_INT -2
7386: PUSH
7387: LD_INT -3
7389: PUSH
7390: LD_INT -5
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: PUSH
7404: LD_VAR 0 4
7408: ADD
7409: PUSH
7410: LD_INT -6
7412: PUSH
7413: LD_INT -4
7415: PUSH
7416: LD_EXP 58
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: ADD
7426: PPUSH
7427: LD_INT 1
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: LD_INT 2
7435: PUSH
7436: LD_INT 1
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 4
7445: PUSH
7446: LD_INT 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 42
7463: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7464: LD_VAR 0 4
7468: PPUSH
7469: LD_INT 6
7471: PPUSH
7472: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7476: LD_VAR 0 5
7480: PPUSH
7481: LD_INT 3
7483: PPUSH
7484: CALL_OW 235
// SetSurvivorsArabianAttack ;
7488: CALL 5003 0 0
// MoveKurinUnitsToBuildings ;
7492: CALL 8930 0 0
// end ;
7496: LD_VAR 0 2
7500: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7501: LD_INT 0
7503: PPUSH
7504: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7505: LD_ADDR_VAR 0 5
7509: PUSH
7510: LD_VAR 0 1
7514: PPUSH
7515: LD_INT 22
7517: PUSH
7518: LD_VAR 0 2
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: PUSH
7527: LD_INT 21
7529: PUSH
7530: LD_INT 3
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PUSH
7537: LD_INT 30
7539: PUSH
7540: LD_VAR 0 3
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: PPUSH
7554: CALL_OW 70
7558: PUSH
7559: FOR_IN
7560: IFFALSE 7593
// begin if UnitsInside ( building ) < 6 then
7562: LD_VAR 0 5
7566: PPUSH
7567: CALL_OW 313
7571: PUSH
7572: LD_INT 6
7574: LESS
7575: IFFALSE 7591
// begin result = building ;
7577: LD_ADDR_VAR 0 4
7581: PUSH
7582: LD_VAR 0 5
7586: ST_TO_ADDR
// exit ;
7587: POP
7588: POP
7589: GO 7603
// end ; end ;
7591: GO 7559
7593: POP
7594: POP
// result = 0 ;
7595: LD_ADDR_VAR 0 4
7599: PUSH
7600: LD_INT 0
7602: ST_TO_ADDR
// end ;
7603: LD_VAR 0 4
7607: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7608: LD_INT 0
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7614: LD_ADDR_VAR 0 6
7618: PUSH
7619: LD_INT 34
7621: PUSH
7622: LD_INT 71
7624: PUSH
7625: LD_INT 70
7627: PUSH
7628: LD_INT 69
7630: PUSH
7631: LD_INT 39
7633: PUSH
7634: LD_INT 31
7636: PUSH
7637: LD_INT 14
7639: PUSH
7640: LD_INT 10
7642: PUSH
7643: LD_INT 40
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: ST_TO_ADDR
// resultWeapons = [ ] ;
7657: LD_ADDR_VAR 0 5
7661: PUSH
7662: EMPTY
7663: ST_TO_ADDR
// for i := 1 to weaponTechs do
7664: LD_ADDR_VAR 0 4
7668: PUSH
7669: DOUBLE
7670: LD_INT 1
7672: DEC
7673: ST_TO_ADDR
7674: LD_VAR 0 6
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7867
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 4
7691: ARRAY
7692: PPUSH
7693: LD_VAR 0 2
7697: PPUSH
7698: CALL_OW 482
7702: PUSH
7703: LD_VAR 0 6
7707: PUSH
7708: LD_VAR 0 4
7712: ARRAY
7713: PPUSH
7714: LD_VAR 0 1
7718: PPUSH
7719: CALL_OW 321
7723: PUSH
7724: LD_INT 2
7726: EQUAL
7727: AND
7728: IFFALSE 7865
// case nation of nation_american :
7730: LD_VAR 0 2
7734: PUSH
7735: LD_INT 1
7737: DOUBLE
7738: EQUAL
7739: IFTRUE 7743
7741: GO 7778
7743: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7744: LD_ADDR_VAR 0 5
7748: PUSH
7749: LD_VAR 0 5
7753: PUSH
7754: LD_VAR 0 6
7758: PUSH
7759: LD_VAR 0 4
7763: ARRAY
7764: PPUSH
7765: LD_VAR 0 2
7769: PPUSH
7770: CALL 7884 0 2
7774: ADD
7775: ST_TO_ADDR
7776: GO 7865
7778: LD_INT 2
7780: DOUBLE
7781: EQUAL
7782: IFTRUE 7786
7784: GO 7821
7786: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7787: LD_ADDR_VAR 0 5
7791: PUSH
7792: LD_VAR 0 5
7796: PUSH
7797: LD_VAR 0 6
7801: PUSH
7802: LD_VAR 0 4
7806: ARRAY
7807: PPUSH
7808: LD_VAR 0 2
7812: PPUSH
7813: CALL 7884 0 2
7817: ADD
7818: ST_TO_ADDR
7819: GO 7865
7821: LD_INT 3
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 7864
7829: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7830: LD_ADDR_VAR 0 5
7834: PUSH
7835: LD_VAR 0 5
7839: PUSH
7840: LD_VAR 0 6
7844: PUSH
7845: LD_VAR 0 4
7849: ARRAY
7850: PPUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: CALL 7884 0 2
7860: ADD
7861: ST_TO_ADDR
7862: GO 7865
7864: POP
// end ;
7865: GO 7679
7867: POP
7868: POP
// result = resultWeapons ;
7869: LD_ADDR_VAR 0 3
7873: PUSH
7874: LD_VAR 0 5
7878: ST_TO_ADDR
// end ;
7879: LD_VAR 0 3
7883: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
7884: LD_INT 0
7886: PPUSH
// case tech of tech_AdvMet :
7887: LD_VAR 0 1
7891: PUSH
7892: LD_INT 34
7894: DOUBLE
7895: EQUAL
7896: IFTRUE 7900
7898: GO 7928
7900: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
7901: LD_ADDR_VAR 0 3
7905: PUSH
7906: LD_INT 6
7908: PUSH
7909: LD_STRING 
7911: PUSH
7912: LD_INT 46
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_VAR 0 2
7924: ARRAY
7925: ST_TO_ADDR
7926: GO 8217
7928: LD_INT 71
7930: DOUBLE
7931: EQUAL
7932: IFTRUE 7936
7934: GO 7964
7936: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_STRING 
7944: PUSH
7945: LD_STRING 
7947: PUSH
7948: LD_INT 47
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: LIST
7955: PUSH
7956: LD_VAR 0 2
7960: ARRAY
7961: ST_TO_ADDR
7962: GO 8217
7964: LD_INT 70
7966: DOUBLE
7967: EQUAL
7968: IFTRUE 7972
7970: GO 8000
7972: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
7973: LD_ADDR_VAR 0 3
7977: PUSH
7978: LD_STRING 
7980: PUSH
7981: LD_INT 26
7983: PUSH
7984: LD_STRING 
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: LD_VAR 0 2
7996: ARRAY
7997: ST_TO_ADDR
7998: GO 8217
8000: LD_INT 69
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8036
8008: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_INT 4
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: LD_INT 43
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: LD_VAR 0 2
8032: ARRAY
8033: ST_TO_ADDR
8034: GO 8217
8036: LD_INT 39
8038: DOUBLE
8039: EQUAL
8040: IFTRUE 8044
8042: GO 8072
8044: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_INT 5
8052: PUSH
8053: LD_INT 27
8055: PUSH
8056: LD_INT 44
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: LD_VAR 0 2
8068: ARRAY
8069: ST_TO_ADDR
8070: GO 8217
8072: LD_INT 31
8074: DOUBLE
8075: EQUAL
8076: IFTRUE 8080
8078: GO 8108
8080: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: LD_STRING 
8088: PUSH
8089: LD_STRING 
8091: PUSH
8092: LD_INT 49
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: LIST
8099: PUSH
8100: LD_VAR 0 2
8104: ARRAY
8105: ST_TO_ADDR
8106: GO 8217
8108: LD_INT 14
8110: DOUBLE
8111: EQUAL
8112: IFTRUE 8116
8114: GO 8144
8116: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8117: LD_ADDR_VAR 0 3
8121: PUSH
8122: LD_INT 10
8124: PUSH
8125: LD_STRING 
8127: PUSH
8128: LD_STRING 
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: LD_VAR 0 2
8140: ARRAY
8141: ST_TO_ADDR
8142: GO 8217
8144: LD_INT 10
8146: DOUBLE
8147: EQUAL
8148: IFTRUE 8152
8150: GO 8180
8152: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8153: LD_ADDR_VAR 0 3
8157: PUSH
8158: LD_INT 9
8160: PUSH
8161: LD_STRING 
8163: PUSH
8164: LD_STRING 
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PUSH
8172: LD_VAR 0 2
8176: ARRAY
8177: ST_TO_ADDR
8178: GO 8217
8180: LD_INT 40
8182: DOUBLE
8183: EQUAL
8184: IFTRUE 8188
8186: GO 8216
8188: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8189: LD_ADDR_VAR 0 3
8193: PUSH
8194: LD_INT 7
8196: PUSH
8197: LD_INT 28
8199: PUSH
8200: LD_INT 45
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: PUSH
8208: LD_VAR 0 2
8212: ARRAY
8213: ST_TO_ADDR
8214: GO 8217
8216: POP
// end ;
8217: LD_VAR 0 3
8221: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8222: LD_INT 0
8224: PPUSH
8225: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8226: LD_ADDR_VAR 0 4
8230: PUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 254
8240: PUSH
8241: LD_INT 3
8243: MINUS
8244: ST_TO_ADDR
// if dir < 0 then
8245: LD_VAR 0 4
8249: PUSH
8250: LD_INT 0
8252: LESS
8253: IFFALSE 8269
// dir := 6 + dir ;
8255: LD_ADDR_VAR 0 4
8259: PUSH
8260: LD_INT 6
8262: PUSH
8263: LD_VAR 0 4
8267: PLUS
8268: ST_TO_ADDR
// SetDir ( un , dir ) ;
8269: LD_VAR 0 1
8273: PPUSH
8274: LD_VAR 0 4
8278: PPUSH
8279: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: CALL_OW 52
// result = un ;
8297: LD_ADDR_VAR 0 3
8301: PUSH
8302: LD_VAR 0 1
8306: ST_TO_ADDR
// end ;
8307: LD_VAR 0 3
8311: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8312: LD_INT 0
8314: PPUSH
8315: PPUSH
8316: PPUSH
// uc_side := GetSide ( b ) ;
8317: LD_ADDR_OWVAR 20
8321: PUSH
8322: LD_VAR 0 2
8326: PPUSH
8327: CALL_OW 255
8331: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8332: LD_ADDR_OWVAR 21
8336: PUSH
8337: LD_VAR 0 2
8341: PPUSH
8342: CALL_OW 248
8346: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8347: LD_INT 0
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 380
// un = CreateHuman ;
8362: LD_ADDR_VAR 0 4
8366: PUSH
8367: CALL_OW 44
8371: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8372: LD_ADDR_VAR 0 5
8376: PUSH
8377: LD_VAR 0 2
8381: PPUSH
8382: CALL_OW 254
8386: PUSH
8387: LD_INT 3
8389: MINUS
8390: ST_TO_ADDR
// if dir < 0 then
8391: LD_VAR 0 5
8395: PUSH
8396: LD_INT 0
8398: LESS
8399: IFFALSE 8415
// dir := 6 + dir ;
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_INT 6
8408: PUSH
8409: LD_VAR 0 5
8413: PLUS
8414: ST_TO_ADDR
// SetDir ( un , dir ) ;
8415: LD_VAR 0 4
8419: PPUSH
8420: LD_VAR 0 5
8424: PPUSH
8425: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8429: LD_VAR 0 4
8433: PPUSH
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 52
// result = un ;
8443: LD_ADDR_VAR 0 3
8447: PUSH
8448: LD_VAR 0 4
8452: ST_TO_ADDR
// end ;
8453: LD_VAR 0 3
8457: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8458: LD_INT 0
8460: PPUSH
8461: PPUSH
8462: PPUSH
8463: PPUSH
8464: PPUSH
// for building in buildings do
8465: LD_ADDR_VAR 0 5
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8568
// begin x = GetX ( building ) ;
8478: LD_ADDR_VAR 0 6
8482: PUSH
8483: LD_VAR 0 5
8487: PPUSH
8488: CALL_OW 250
8492: ST_TO_ADDR
// y = GetY ( building ) ;
8493: LD_ADDR_VAR 0 7
8497: PUSH
8498: LD_VAR 0 5
8502: PPUSH
8503: CALL_OW 251
8507: ST_TO_ADDR
// dir = GetDir ( building ) ;
8508: LD_ADDR_VAR 0 8
8512: PUSH
8513: LD_VAR 0 5
8517: PPUSH
8518: CALL_OW 254
8522: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8523: LD_VAR 0 1
8527: PPUSH
8528: LD_VAR 0 5
8532: PPUSH
8533: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_VAR 0 3
8546: PPUSH
8547: LD_VAR 0 6
8551: PPUSH
8552: LD_VAR 0 7
8556: PPUSH
8557: LD_VAR 0 8
8561: PPUSH
8562: CALL_OW 205
// end ;
8566: GO 8475
8568: POP
8569: POP
// end ;
8570: LD_VAR 0 4
8574: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8575: LD_INT 0
8577: PPUSH
8578: PPUSH
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8583: LD_ADDR_VAR 0 8
8587: PUSH
8588: LD_INT 48
8590: PUSH
8591: LD_INT 49
8593: PUSH
8594: LD_INT 50
8596: PUSH
8597: LD_INT 20
8599: PUSH
8600: LD_INT 1
8602: PUSH
8603: LD_INT 51
8605: PUSH
8606: LD_INT 52
8608: PUSH
8609: LD_INT 69
8611: PUSH
8612: LD_INT 39
8614: PUSH
8615: LD_INT 34
8617: PUSH
8618: LD_INT 40
8620: PUSH
8621: LD_INT 53
8623: PUSH
8624: LD_INT 71
8626: PUSH
8627: LD_INT 57
8629: PUSH
8630: LD_INT 58
8632: PUSH
8633: LD_INT 44
8635: PUSH
8636: LD_INT 32
8638: PUSH
8639: LD_INT 27
8641: PUSH
8642: LD_INT 23
8644: PUSH
8645: LD_INT 33
8647: PUSH
8648: LD_INT 59
8650: PUSH
8651: LD_INT 54
8653: PUSH
8654: LD_INT 55
8656: PUSH
8657: LD_INT 56
8659: PUSH
8660: LD_INT 63
8662: PUSH
8663: LD_INT 64
8665: PUSH
8666: LD_INT 65
8668: PUSH
8669: LD_INT 30
8671: PUSH
8672: LD_INT 31
8674: PUSH
8675: LD_INT 21
8677: PUSH
8678: LD_INT 22
8680: PUSH
8681: LD_INT 25
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8718: LD_ADDR_VAR 0 9
8722: PUSH
8723: LD_INT 1
8725: PPUSH
8726: LD_INT 1
8728: PPUSH
8729: LD_INT 1
8731: PPUSH
8732: CALL 28690 0 3
8736: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8737: LD_ADDR_VAR 0 5
8741: PUSH
8742: DOUBLE
8743: LD_INT 1
8745: DEC
8746: ST_TO_ADDR
8747: LD_VAR 0 8
8751: PUSH
8752: FOR_TO
8753: IFFALSE 8829
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8755: LD_VAR 0 8
8759: PUSH
8760: LD_VAR 0 5
8764: ARRAY
8765: PPUSH
8766: LD_VAR 0 1
8770: PPUSH
8771: CALL_OW 321
8775: PUSH
8776: LD_INT 1
8778: EQUAL
8779: PUSH
8780: LD_VAR 0 8
8784: PUSH
8785: LD_VAR 0 5
8789: ARRAY
8790: PPUSH
8791: LD_VAR 0 3
8795: PPUSH
8796: CALL_OW 482
8800: PUSH
8801: LD_INT 1
8803: EQUAL
8804: AND
8805: IFFALSE 8827
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: LD_VAR 0 8
8816: PUSH
8817: LD_VAR 0 5
8821: ARRAY
8822: PPUSH
8823: CALL_OW 184
8827: GO 8752
8829: POP
8830: POP
// for i = 1 to am_tech_list do
8831: LD_ADDR_VAR 0 5
8835: PUSH
8836: DOUBLE
8837: LD_INT 1
8839: DEC
8840: ST_TO_ADDR
8841: LD_VAR 0 9
8845: PUSH
8846: FOR_TO
8847: IFFALSE 8923
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
8849: LD_VAR 0 9
8853: PUSH
8854: LD_VAR 0 5
8858: ARRAY
8859: PPUSH
8860: LD_VAR 0 1
8864: PPUSH
8865: CALL_OW 321
8869: PUSH
8870: LD_INT 1
8872: EQUAL
8873: PUSH
8874: LD_VAR 0 9
8878: PUSH
8879: LD_VAR 0 5
8883: ARRAY
8884: PPUSH
8885: LD_VAR 0 3
8889: PPUSH
8890: CALL_OW 482
8894: PUSH
8895: LD_INT 1
8897: EQUAL
8898: AND
8899: IFFALSE 8921
// AddComResearch ( lab , am_tech_list [ i ] ) ;
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_VAR 0 9
8910: PUSH
8911: LD_VAR 0 5
8915: ARRAY
8916: PPUSH
8917: CALL_OW 184
8921: GO 8846
8923: POP
8924: POP
// end ;
8925: LD_VAR 0 4
8929: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
8930: LD_INT 0
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
8936: PPUSH
8937: PPUSH
8938: PPUSH
8939: PPUSH
8940: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
8941: LD_ADDR_VAR 0 3
8945: PUSH
8946: LD_INT 22
8948: PUSH
8949: LD_INT 6
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 21
8958: PUSH
8959: LD_INT 3
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 30
8968: PUSH
8969: LD_INT 6
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: EMPTY
8977: LIST
8978: LIST
8979: LIST
8980: PPUSH
8981: CALL_OW 69
8985: PUSH
8986: LD_INT 1
8988: ARRAY
8989: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
8990: LD_ADDR_VAR 0 4
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_INT 6
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 3
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 30
9017: PUSH
9018: LD_INT 3
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: LIST
9029: PPUSH
9030: CALL_OW 69
9034: PUSH
9035: LD_INT 1
9037: ARRAY
9038: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9039: LD_ADDR_VAR 0 9
9043: PUSH
9044: LD_VAR 0 9
9048: PUSH
9049: LD_EXP 58
9053: ADD
9054: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9055: LD_ADDR_VAR 0 9
9059: PUSH
9060: LD_VAR 0 9
9064: PUSH
9065: LD_EXP 76
9069: ADD
9070: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9071: LD_ADDR_VAR 0 9
9075: PUSH
9076: LD_VAR 0 9
9080: PUSH
9081: LD_EXP 68
9085: ADD
9086: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9087: LD_ADDR_VAR 0 8
9091: PUSH
9092: LD_INT 18
9094: PPUSH
9095: LD_INT 22
9097: PUSH
9098: LD_INT 6
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: PUSH
9105: LD_INT 21
9107: PUSH
9108: LD_INT 1
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PUSH
9115: LD_INT 3
9117: PUSH
9118: LD_INT 60
9120: PUSH
9121: EMPTY
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 70
9137: PUSH
9138: LD_VAR 0 9
9142: DIFF
9143: ST_TO_ADDR
// if not canTakeUnits then
9144: LD_VAR 0 8
9148: NOT
9149: IFFALSE 9182
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9151: LD_ADDR_EXP 78
9155: PUSH
9156: LD_EXP 78
9160: PPUSH
9161: LD_INT 4
9163: PPUSH
9164: LD_EXP 78
9168: PUSH
9169: LD_INT 3
9171: ARRAY
9172: PUSH
9173: LD_INT 2
9175: PLUS
9176: PPUSH
9177: CALL_OW 1
9181: ST_TO_ADDR
// if canTakeUnits > 2 then
9182: LD_VAR 0 8
9186: PUSH
9187: LD_INT 2
9189: GREATER
9190: IFFALSE 9260
// begin for i := 1 to rand ( 1 , 2 ) do
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: DOUBLE
9198: LD_INT 1
9200: DEC
9201: ST_TO_ADDR
9202: LD_INT 1
9204: PPUSH
9205: LD_INT 2
9207: PPUSH
9208: CALL_OW 12
9212: PUSH
9213: FOR_TO
9214: IFFALSE 9256
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9216: LD_VAR 0 8
9220: PUSH
9221: LD_VAR 0 2
9225: ARRAY
9226: PPUSH
9227: LD_VAR 0 3
9231: PPUSH
9232: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9236: LD_VAR 0 8
9240: PUSH
9241: LD_VAR 0 2
9245: ARRAY
9246: PPUSH
9247: LD_INT 4
9249: PPUSH
9250: CALL_OW 183
// end ;
9254: GO 9213
9256: POP
9257: POP
// end else
9258: GO 9328
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9260: LD_ADDR_VAR 0 2
9264: PUSH
9265: DOUBLE
9266: LD_INT 1
9268: DEC
9269: ST_TO_ADDR
9270: LD_INT 1
9272: PPUSH
9273: LD_VAR 0 8
9277: PPUSH
9278: CALL_OW 12
9282: PUSH
9283: FOR_TO
9284: IFFALSE 9326
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9286: LD_VAR 0 8
9290: PUSH
9291: LD_VAR 0 2
9295: ARRAY
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9306: LD_VAR 0 8
9310: PUSH
9311: LD_VAR 0 2
9315: ARRAY
9316: PPUSH
9317: LD_INT 4
9319: PPUSH
9320: CALL_OW 183
// end ;
9324: GO 9283
9326: POP
9327: POP
// end ; wait ( 0 0$01 ) ;
9328: LD_INT 35
9330: PPUSH
9331: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9335: LD_ADDR_VAR 0 8
9339: PUSH
9340: LD_INT 18
9342: PPUSH
9343: LD_INT 22
9345: PUSH
9346: LD_INT 6
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 21
9355: PUSH
9356: LD_INT 1
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: LD_INT 3
9365: PUSH
9366: LD_INT 60
9368: PUSH
9369: EMPTY
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: PPUSH
9381: CALL_OW 70
9385: PUSH
9386: LD_VAR 0 9
9390: DIFF
9391: ST_TO_ADDR
// pom = 6 ;
9392: LD_ADDR_VAR 0 7
9396: PUSH
9397: LD_INT 6
9399: ST_TO_ADDR
// if canTakeUnits then
9400: LD_VAR 0 8
9404: IFFALSE 9521
// for i = 1 to canTakeUnits do
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: DOUBLE
9412: LD_INT 1
9414: DEC
9415: ST_TO_ADDR
9416: LD_VAR 0 8
9420: PUSH
9421: FOR_TO
9422: IFFALSE 9519
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9424: LD_VAR 0 8
9428: PUSH
9429: LD_VAR 0 2
9433: ARRAY
9434: PPUSH
9435: CALL_OW 257
9439: PUSH
9440: LD_INT 3
9442: NONEQUAL
9443: IFFALSE 9483
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9445: LD_VAR 0 8
9449: PUSH
9450: LD_VAR 0 2
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 4
9460: PPUSH
9461: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9465: LD_VAR 0 8
9469: PUSH
9470: LD_VAR 0 2
9474: ARRAY
9475: PPUSH
9476: LD_INT 3
9478: PPUSH
9479: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9483: LD_VAR 0 8
9487: PUSH
9488: LD_VAR 0 2
9492: ARRAY
9493: PPUSH
9494: LD_VAR 0 4
9498: PPUSH
9499: CALL_OW 120
// pom = pom - 1 ;
9503: LD_ADDR_VAR 0 7
9507: PUSH
9508: LD_VAR 0 7
9512: PUSH
9513: LD_INT 1
9515: MINUS
9516: ST_TO_ADDR
// end ;
9517: GO 9421
9519: POP
9520: POP
// if pom > 0 then
9521: LD_VAR 0 7
9525: PUSH
9526: LD_INT 0
9528: GREATER
9529: IFFALSE 9554
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9531: LD_ADDR_EXP 78
9535: PUSH
9536: LD_EXP 78
9540: PPUSH
9541: LD_INT 3
9543: PPUSH
9544: LD_VAR 0 7
9548: PPUSH
9549: CALL_OW 1
9553: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9554: LD_INT 35
9556: PPUSH
9557: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9561: LD_ADDR_VAR 0 5
9565: PUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 6
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 21
9578: PUSH
9579: LD_INT 3
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 30
9588: PUSH
9589: LD_INT 32
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 3
9598: PUSH
9599: LD_INT 59
9601: PUSH
9602: EMPTY
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PPUSH
9615: CALL_OW 69
9619: PUSH
9620: FOR_IN
9621: IFFALSE 9867
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_INT 18
9630: PPUSH
9631: LD_INT 22
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 21
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 60
9656: PUSH
9657: EMPTY
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PPUSH
9669: CALL_OW 70
9673: PUSH
9674: LD_VAR 0 9
9678: DIFF
9679: ST_TO_ADDR
// if canTakeUnits then
9680: LD_VAR 0 8
9684: IFFALSE 9818
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9686: LD_VAR 0 8
9690: PUSH
9691: LD_INT 1
9693: ARRAY
9694: PPUSH
9695: CALL_OW 257
9699: PUSH
9700: LD_INT 1
9702: NONEQUAL
9703: IFFALSE 9798
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9705: LD_VAR 0 8
9709: PUSH
9710: LD_INT 1
9712: ARRAY
9713: PPUSH
9714: LD_INT 22
9716: PUSH
9717: LD_INT 6
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 21
9726: PUSH
9727: LD_INT 3
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: LD_INT 30
9736: PUSH
9737: LD_INT 5
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: LIST
9748: PPUSH
9749: CALL_OW 69
9753: PUSH
9754: LD_INT 1
9756: ARRAY
9757: PPUSH
9758: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9762: LD_VAR 0 8
9766: PUSH
9767: LD_INT 1
9769: ARRAY
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
9778: LD_VAR 0 8
9782: PUSH
9783: LD_INT 1
9785: ARRAY
9786: PPUSH
9787: CALL_OW 182
// wait ( 0 0$1 ) ;
9791: LD_INT 35
9793: PPUSH
9794: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
9798: LD_VAR 0 8
9802: PUSH
9803: LD_INT 1
9805: ARRAY
9806: PPUSH
9807: LD_VAR 0 5
9811: PPUSH
9812: CALL_OW 120
// end else
9816: GO 9865
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
9818: LD_ADDR_EXP 70
9822: PUSH
9823: LD_EXP 70
9827: PUSH
9828: LD_VAR 0 5
9832: ADD
9833: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
9834: LD_ADDR_EXP 78
9838: PUSH
9839: LD_EXP 78
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: LD_EXP 78
9851: PUSH
9852: LD_INT 1
9854: ARRAY
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: PPUSH
9860: CALL_OW 1
9864: ST_TO_ADDR
// end ; end ;
9865: GO 9620
9867: POP
9868: POP
// end ;
9869: LD_VAR 0 1
9873: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
9878: PPUSH
9879: PPUSH
9880: PPUSH
9881: PPUSH
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
9886: PPUSH
9887: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9888: LD_VAR 0 1
9892: PPUSH
9893: CALL_OW 302
9897: NOT
9898: PUSH
9899: LD_VAR 0 4
9903: PUSH
9904: LD_INT 1
9906: EQUAL
9907: OR
9908: PUSH
9909: LD_VAR 0 2
9913: PPUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: CALL_OW 488
9923: NOT
9924: OR
9925: PUSH
9926: LD_VAR 0 1
9930: PPUSH
9931: LD_VAR 0 2
9935: PPUSH
9936: LD_VAR 0 3
9940: PPUSH
9941: CALL_OW 297
9945: PUSH
9946: LD_VAR 0 4
9950: GREATEREQUAL
9951: OR
9952: PUSH
9953: LD_VAR 0 5
9957: PUSH
9958: LD_INT 1
9960: PUSH
9961: LD_INT 0
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: IN
9968: NOT
9969: OR
9970: IFFALSE 9974
// exit ;
9972: GO 11531
// attempts = 0 ;
9974: LD_ADDR_VAR 0 17
9978: PUSH
9979: LD_INT 0
9981: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9982: LD_ADDR_VAR 0 7
9986: PUSH
9987: EMPTY
9988: ST_TO_ADDR
// list_coords = [ ] ;
9989: LD_ADDR_VAR 0 8
9993: PUSH
9994: EMPTY
9995: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9996: LD_ADDR_VAR 0 9
10000: PUSH
10001: LD_VAR 0 2
10005: PPUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 250
10020: PPUSH
10021: LD_VAR 0 1
10025: PPUSH
10026: CALL_OW 251
10030: PPUSH
10031: CALL 11536 0 4
10035: ST_TO_ADDR
// if attempts = 0 then
10036: LD_VAR 0 17
10040: PUSH
10041: LD_INT 0
10043: EQUAL
10044: IFFALSE 10152
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10046: LD_ADDR_VAR 0 10
10050: PUSH
10051: LD_VAR 0 9
10055: PUSH
10056: LD_VAR 0 9
10060: PUSH
10061: LD_INT 1
10063: PLUS
10064: PUSH
10065: LD_VAR 0 9
10069: PUSH
10070: LD_INT 1
10072: MINUS
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: LIST
10078: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10079: LD_VAR 0 10
10083: PUSH
10084: LD_INT 2
10086: ARRAY
10087: PUSH
10088: LD_INT 6
10090: EQUAL
10091: IFFALSE 10114
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10093: LD_ADDR_VAR 0 10
10097: PUSH
10098: LD_VAR 0 10
10102: PPUSH
10103: LD_INT 2
10105: PPUSH
10106: LD_INT 0
10108: PPUSH
10109: CALL_OW 1
10113: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10114: LD_VAR 0 10
10118: PUSH
10119: LD_INT 3
10121: ARRAY
10122: PUSH
10123: LD_INT 1
10125: NEG
10126: EQUAL
10127: IFFALSE 10150
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10129: LD_ADDR_VAR 0 10
10133: PUSH
10134: LD_VAR 0 10
10138: PPUSH
10139: LD_INT 3
10141: PPUSH
10142: LD_INT 5
10144: PPUSH
10145: CALL_OW 1
10149: ST_TO_ADDR
// end else
10150: GO 10189
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10152: LD_ADDR_VAR 0 10
10156: PUSH
10157: LD_INT 0
10159: PUSH
10160: LD_INT 1
10162: PUSH
10163: LD_INT 2
10165: PUSH
10166: LD_INT 3
10168: PUSH
10169: LD_INT 4
10171: PUSH
10172: LD_INT 5
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: PUSH
10183: LD_VAR 0 9
10187: DIFF
10188: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10189: LD_ADDR_VAR 0 14
10193: PUSH
10194: DOUBLE
10195: LD_INT 1
10197: DEC
10198: ST_TO_ADDR
10199: LD_VAR 0 10
10203: PUSH
10204: LD_INT 0
10206: PLUS
10207: PUSH
10208: FOR_TO
10209: IFFALSE 10531
// case dir_list [ c ] of 0 :
10211: LD_VAR 0 10
10215: PUSH
10216: LD_VAR 0 14
10220: ARRAY
10221: PUSH
10222: LD_INT 0
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10271
10230: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10231: LD_ADDR_VAR 0 8
10235: PUSH
10236: LD_VAR 0 8
10240: PPUSH
10241: LD_INT 1
10243: PPUSH
10244: LD_VAR 0 2
10248: PUSH
10249: LD_VAR 0 3
10253: PUSH
10254: LD_VAR 0 4
10258: MINUS
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: PPUSH
10264: CALL_OW 2
10268: ST_TO_ADDR
10269: GO 10529
10271: LD_INT 1
10273: DOUBLE
10274: EQUAL
10275: IFTRUE 10279
10277: GO 10320
10279: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10280: LD_ADDR_VAR 0 8
10284: PUSH
10285: LD_VAR 0 8
10289: PPUSH
10290: LD_INT 1
10292: PPUSH
10293: LD_VAR 0 2
10297: PUSH
10298: LD_VAR 0 4
10302: PLUS
10303: PUSH
10304: LD_VAR 0 3
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PPUSH
10313: CALL_OW 2
10317: ST_TO_ADDR
10318: GO 10529
10320: LD_INT 2
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10375
10328: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10329: LD_ADDR_VAR 0 8
10333: PUSH
10334: LD_VAR 0 8
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: LD_VAR 0 2
10346: PUSH
10347: LD_VAR 0 4
10351: PLUS
10352: PUSH
10353: LD_VAR 0 3
10357: PUSH
10358: LD_VAR 0 4
10362: PLUS
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 2
10372: ST_TO_ADDR
10373: GO 10529
10375: LD_INT 3
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10424
10383: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10384: LD_ADDR_VAR 0 8
10388: PUSH
10389: LD_VAR 0 8
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: LD_VAR 0 2
10401: PUSH
10402: LD_VAR 0 3
10406: PUSH
10407: LD_VAR 0 4
10411: PLUS
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 2
10421: ST_TO_ADDR
10422: GO 10529
10424: LD_INT 4
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10473
10432: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10433: LD_ADDR_VAR 0 8
10437: PUSH
10438: LD_VAR 0 8
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: LD_VAR 0 2
10450: PUSH
10451: LD_VAR 0 4
10455: MINUS
10456: PUSH
10457: LD_VAR 0 3
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: PPUSH
10466: CALL_OW 2
10470: ST_TO_ADDR
10471: GO 10529
10473: LD_INT 5
10475: DOUBLE
10476: EQUAL
10477: IFTRUE 10481
10479: GO 10528
10481: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10482: LD_ADDR_VAR 0 8
10486: PUSH
10487: LD_VAR 0 8
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: LD_VAR 0 2
10499: PUSH
10500: LD_VAR 0 4
10504: MINUS
10505: PUSH
10506: LD_VAR 0 3
10510: PUSH
10511: LD_VAR 0 4
10515: MINUS
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 2
10525: ST_TO_ADDR
10526: GO 10529
10528: POP
10529: GO 10208
10531: POP
10532: POP
// if dist < 30 then
10533: LD_VAR 0 4
10537: PUSH
10538: LD_INT 30
10540: LESS
10541: IFFALSE 10553
// c = 1 else
10543: LD_ADDR_VAR 0 14
10547: PUSH
10548: LD_INT 1
10550: ST_TO_ADDR
10551: GO 10561
// c = 2 ;
10553: LD_ADDR_VAR 0 14
10557: PUSH
10558: LD_INT 2
10560: ST_TO_ADDR
// b = 1 ;
10561: LD_ADDR_VAR 0 11
10565: PUSH
10566: LD_INT 1
10568: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10569: LD_VAR 0 11
10573: PUSH
10574: LD_VAR 0 4
10578: PUSH
10579: LD_INT 1
10581: MINUS
10582: LESSEQUAL
10583: IFFALSE 11011
// begin if 0 in dir_list and 1 in dir_list then
10585: LD_INT 0
10587: PUSH
10588: LD_VAR 0 10
10592: IN
10593: PUSH
10594: LD_INT 1
10596: PUSH
10597: LD_VAR 0 10
10601: IN
10602: AND
10603: IFFALSE 10655
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10605: LD_ADDR_VAR 0 8
10609: PUSH
10610: LD_VAR 0 8
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_VAR 0 2
10622: PUSH
10623: LD_VAR 0 11
10627: PLUS
10628: PUSH
10629: LD_VAR 0 3
10633: PUSH
10634: LD_VAR 0 4
10638: MINUS
10639: PUSH
10640: LD_VAR 0 11
10644: PLUS
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PPUSH
10650: CALL_OW 2
10654: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10655: LD_INT 1
10657: PUSH
10658: LD_VAR 0 10
10662: IN
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_VAR 0 10
10671: IN
10672: AND
10673: IFFALSE 10719
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10675: LD_ADDR_VAR 0 8
10679: PUSH
10680: LD_VAR 0 8
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: LD_VAR 0 2
10692: PUSH
10693: LD_VAR 0 4
10697: PLUS
10698: PUSH
10699: LD_VAR 0 3
10703: PUSH
10704: LD_VAR 0 11
10708: PLUS
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 2
10718: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10719: LD_INT 2
10721: PUSH
10722: LD_VAR 0 10
10726: IN
10727: PUSH
10728: LD_INT 3
10730: PUSH
10731: LD_VAR 0 10
10735: IN
10736: AND
10737: IFFALSE 10789
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10739: LD_ADDR_VAR 0 8
10743: PUSH
10744: LD_VAR 0 8
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: LD_VAR 0 2
10756: PUSH
10757: LD_VAR 0 4
10761: PLUS
10762: PUSH
10763: LD_VAR 0 11
10767: MINUS
10768: PUSH
10769: LD_VAR 0 3
10773: PUSH
10774: LD_VAR 0 4
10778: PLUS
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 2
10788: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
10789: LD_INT 3
10791: PUSH
10792: LD_VAR 0 10
10796: IN
10797: PUSH
10798: LD_INT 4
10800: PUSH
10801: LD_VAR 0 10
10805: IN
10806: AND
10807: IFFALSE 10859
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
10809: LD_ADDR_VAR 0 8
10813: PUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: LD_VAR 0 2
10826: PUSH
10827: LD_VAR 0 11
10831: MINUS
10832: PUSH
10833: LD_VAR 0 3
10837: PUSH
10838: LD_VAR 0 4
10842: PLUS
10843: PUSH
10844: LD_VAR 0 11
10848: MINUS
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 2
10858: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10859: LD_INT 4
10861: PUSH
10862: LD_VAR 0 10
10866: IN
10867: PUSH
10868: LD_INT 5
10870: PUSH
10871: LD_VAR 0 10
10875: IN
10876: AND
10877: IFFALSE 10923
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10879: LD_ADDR_VAR 0 8
10883: PUSH
10884: LD_VAR 0 8
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: LD_VAR 0 2
10896: PUSH
10897: LD_VAR 0 4
10901: MINUS
10902: PUSH
10903: LD_VAR 0 3
10907: PUSH
10908: LD_VAR 0 11
10912: MINUS
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PPUSH
10918: CALL_OW 2
10922: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10923: LD_INT 5
10925: PUSH
10926: LD_VAR 0 10
10930: IN
10931: PUSH
10932: LD_INT 0
10934: PUSH
10935: LD_VAR 0 10
10939: IN
10940: AND
10941: IFFALSE 10993
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10943: LD_ADDR_VAR 0 8
10947: PUSH
10948: LD_VAR 0 8
10952: PPUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_VAR 0 2
10960: PUSH
10961: LD_VAR 0 4
10965: MINUS
10966: PUSH
10967: LD_VAR 0 11
10971: PLUS
10972: PUSH
10973: LD_VAR 0 3
10977: PUSH
10978: LD_VAR 0 4
10982: MINUS
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 2
10992: ST_TO_ADDR
// b = b + c end ;
10993: LD_ADDR_VAR 0 11
10997: PUSH
10998: LD_VAR 0 11
11002: PUSH
11003: LD_VAR 0 14
11007: PLUS
11008: ST_TO_ADDR
11009: GO 10569
// if list_coords = 0 then
11011: LD_VAR 0 8
11015: PUSH
11016: LD_INT 0
11018: EQUAL
11019: IFFALSE 11023
// exit ;
11021: GO 11531
// repeat min_dist = 5000 ;
11023: LD_ADDR_VAR 0 12
11027: PUSH
11028: LD_INT 5000
11030: ST_TO_ADDR
// for b in list_coords do
11031: LD_ADDR_VAR 0 11
11035: PUSH
11036: LD_VAR 0 8
11040: PUSH
11041: FOR_IN
11042: IFFALSE 11101
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11044: LD_ADDR_VAR 0 13
11048: PUSH
11049: LD_VAR 0 1
11053: PPUSH
11054: LD_VAR 0 11
11058: PUSH
11059: LD_INT 1
11061: ARRAY
11062: PPUSH
11063: LD_VAR 0 11
11067: PUSH
11068: LD_INT 2
11070: ARRAY
11071: PPUSH
11072: CALL_OW 297
11076: ST_TO_ADDR
// if temp_dist < min_dist then
11077: LD_VAR 0 13
11081: PUSH
11082: LD_VAR 0 12
11086: LESS
11087: IFFALSE 11099
// min_dist = temp_dist ;
11089: LD_ADDR_VAR 0 12
11093: PUSH
11094: LD_VAR 0 13
11098: ST_TO_ADDR
// end ;
11099: GO 11041
11101: POP
11102: POP
// c = 0 ;
11103: LD_ADDR_VAR 0 14
11107: PUSH
11108: LD_INT 0
11110: ST_TO_ADDR
// repeat c = c + 1 ;
11111: LD_ADDR_VAR 0 14
11115: PUSH
11116: LD_VAR 0 14
11120: PUSH
11121: LD_INT 1
11123: PLUS
11124: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11125: LD_VAR 0 1
11129: PPUSH
11130: LD_VAR 0 8
11134: PUSH
11135: LD_VAR 0 14
11139: ARRAY
11140: PUSH
11141: LD_INT 1
11143: ARRAY
11144: PPUSH
11145: LD_VAR 0 8
11149: PUSH
11150: LD_VAR 0 14
11154: ARRAY
11155: PUSH
11156: LD_INT 2
11158: ARRAY
11159: PPUSH
11160: CALL_OW 297
11164: PUSH
11165: LD_VAR 0 12
11169: EQUAL
11170: IFFALSE 11235
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11172: LD_ADDR_VAR 0 7
11176: PUSH
11177: LD_VAR 0 7
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: LD_VAR 0 8
11189: PUSH
11190: LD_VAR 0 14
11194: ARRAY
11195: PPUSH
11196: CALL_OW 2
11200: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11201: LD_ADDR_VAR 0 8
11205: PUSH
11206: LD_VAR 0 8
11210: PPUSH
11211: LD_VAR 0 14
11215: PPUSH
11216: CALL_OW 3
11220: ST_TO_ADDR
// c = c - 1 ;
11221: LD_ADDR_VAR 0 14
11225: PUSH
11226: LD_VAR 0 14
11230: PUSH
11231: LD_INT 1
11233: MINUS
11234: ST_TO_ADDR
// end ; until c = list_coords ;
11235: LD_VAR 0 14
11239: PUSH
11240: LD_VAR 0 8
11244: EQUAL
11245: IFFALSE 11111
// c = 0 ;
11247: LD_ADDR_VAR 0 14
11251: PUSH
11252: LD_INT 0
11254: ST_TO_ADDR
// if list_nearest > 0 then
11255: LD_VAR 0 7
11259: PUSH
11260: LD_INT 0
11262: GREATER
11263: IFFALSE 11405
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11265: LD_ADDR_VAR 0 15
11269: PUSH
11270: LD_INT 1
11272: PPUSH
11273: LD_VAR 0 7
11277: PPUSH
11278: CALL_OW 12
11282: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11283: LD_ADDR_VAR 0 16
11287: PUSH
11288: LD_VAR 0 7
11292: PUSH
11293: LD_VAR 0 15
11297: ARRAY
11298: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11299: LD_VAR 0 16
11303: PUSH
11304: LD_INT 1
11306: ARRAY
11307: PPUSH
11308: LD_VAR 0 16
11312: PUSH
11313: LD_INT 2
11315: ARRAY
11316: PPUSH
11317: CALL_OW 488
11321: PUSH
11322: LD_INT 0
11324: GREATER
11325: PUSH
11326: LD_VAR 0 16
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: LD_VAR 0 16
11339: PUSH
11340: LD_INT 2
11342: ARRAY
11343: PPUSH
11344: CALL_OW 428
11348: PUSH
11349: LD_INT 0
11351: EQUAL
11352: AND
11353: IFFALSE 11365
// c = 1 else
11355: LD_ADDR_VAR 0 14
11359: PUSH
11360: LD_INT 1
11362: ST_TO_ADDR
11363: GO 11385
// list_nearest = Delete ( list_nearest , rand_num ) ;
11365: LD_ADDR_VAR 0 7
11369: PUSH
11370: LD_VAR 0 7
11374: PPUSH
11375: LD_VAR 0 15
11379: PPUSH
11380: CALL_OW 3
11384: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11385: LD_VAR 0 14
11389: PUSH
11390: LD_INT 1
11392: EQUAL
11393: PUSH
11394: LD_VAR 0 7
11398: PUSH
11399: LD_INT 0
11401: EQUAL
11402: OR
11403: IFFALSE 11265
// end ; until c = 1 or list_coords = 0 ;
11405: LD_VAR 0 14
11409: PUSH
11410: LD_INT 1
11412: EQUAL
11413: PUSH
11414: LD_VAR 0 8
11418: PUSH
11419: LD_INT 0
11421: EQUAL
11422: OR
11423: IFFALSE 11023
// attempts = attempts + 1 ;
11425: LD_ADDR_VAR 0 17
11429: PUSH
11430: LD_VAR 0 17
11434: PUSH
11435: LD_INT 1
11437: PLUS
11438: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11439: LD_VAR 0 14
11443: PUSH
11444: LD_INT 1
11446: EQUAL
11447: PUSH
11448: LD_VAR 0 17
11452: PUSH
11453: LD_INT 1
11455: GREATER
11456: OR
11457: IFFALSE 9982
// if c = 1 then
11459: LD_VAR 0 14
11463: PUSH
11464: LD_INT 1
11466: EQUAL
11467: IFFALSE 11531
// if add then
11469: LD_VAR 0 5
11473: IFFALSE 11504
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11475: LD_VAR 0 1
11479: PPUSH
11480: LD_VAR 0 16
11484: PUSH
11485: LD_INT 1
11487: ARRAY
11488: PPUSH
11489: LD_VAR 0 16
11493: PUSH
11494: LD_INT 2
11496: ARRAY
11497: PPUSH
11498: CALL_OW 171
11502: GO 11531
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: LD_VAR 0 16
11513: PUSH
11514: LD_INT 1
11516: ARRAY
11517: PPUSH
11518: LD_VAR 0 16
11522: PUSH
11523: LD_INT 2
11525: ARRAY
11526: PPUSH
11527: CALL_OW 111
// end ;
11531: LD_VAR 0 6
11535: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11536: LD_INT 0
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
11542: PPUSH
11543: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11544: LD_VAR 0 1
11548: PPUSH
11549: LD_VAR 0 2
11553: PPUSH
11554: CALL_OW 488
11558: NOT
11559: PUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_VAR 0 4
11569: PPUSH
11570: CALL_OW 488
11574: NOT
11575: OR
11576: IFFALSE 11589
// begin result = - 1 ;
11578: LD_ADDR_VAR 0 5
11582: PUSH
11583: LD_INT 1
11585: NEG
11586: ST_TO_ADDR
// exit ;
11587: GO 11749
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11589: LD_ADDR_VAR 0 6
11593: PUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: LD_VAR 0 2
11603: PPUSH
11604: LD_VAR 0 3
11608: PPUSH
11609: LD_VAR 0 4
11613: PPUSH
11614: CALL_OW 298
11618: ST_TO_ADDR
// dist_2 = 99999 ;
11619: LD_ADDR_VAR 0 7
11623: PUSH
11624: LD_INT 99999
11626: ST_TO_ADDR
// for b = 0 to 5 do
11627: LD_ADDR_VAR 0 8
11631: PUSH
11632: DOUBLE
11633: LD_INT 0
11635: DEC
11636: ST_TO_ADDR
11637: LD_INT 5
11639: PUSH
11640: FOR_TO
11641: IFFALSE 11737
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11643: LD_ADDR_VAR 0 9
11647: PUSH
11648: LD_VAR 0 1
11652: PPUSH
11653: LD_VAR 0 8
11657: PPUSH
11658: LD_VAR 0 6
11662: PPUSH
11663: CALL_OW 272
11667: PPUSH
11668: LD_VAR 0 2
11672: PPUSH
11673: LD_VAR 0 8
11677: PPUSH
11678: LD_VAR 0 6
11682: PPUSH
11683: CALL_OW 273
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_VAR 0 4
11697: PPUSH
11698: CALL_OW 298
11702: ST_TO_ADDR
// if temp_dist < dist_2 then
11703: LD_VAR 0 9
11707: PUSH
11708: LD_VAR 0 7
11712: LESS
11713: IFFALSE 11735
// begin dist_2 = temp_dist ;
11715: LD_ADDR_VAR 0 7
11719: PUSH
11720: LD_VAR 0 9
11724: ST_TO_ADDR
// dir = b ;
11725: LD_ADDR_VAR 0 10
11729: PUSH
11730: LD_VAR 0 8
11734: ST_TO_ADDR
// end ; end ;
11735: GO 11640
11737: POP
11738: POP
// result = dir ;
11739: LD_ADDR_VAR 0 5
11743: PUSH
11744: LD_VAR 0 10
11748: ST_TO_ADDR
// end ; end_of_file
11749: LD_VAR 0 5
11753: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
11761: PPUSH
11762: PPUSH
11763: PPUSH
11764: PPUSH
11765: PPUSH
11766: PPUSH
11767: PPUSH
11768: PPUSH
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
11775: PPUSH
11776: PPUSH
11777: PPUSH
11778: PPUSH
11779: PPUSH
11780: PPUSH
11781: PPUSH
11782: PPUSH
11783: PPUSH
// personel = [ ] ;
11784: LD_ADDR_VAR 0 18
11788: PUSH
11789: EMPTY
11790: ST_TO_ADDR
// vehicles = [ ] ;
11791: LD_ADDR_VAR 0 24
11795: PUSH
11796: EMPTY
11797: ST_TO_ADDR
// for unit in basePersonel do
11798: LD_ADDR_VAR 0 17
11802: PUSH
11803: LD_VAR 0 3
11807: PUSH
11808: FOR_IN
11809: IFFALSE 11857
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11811: LD_ADDR_VAR 0 18
11815: PUSH
11816: LD_VAR 0 18
11820: PUSH
11821: LD_VAR 0 17
11825: PUSH
11826: LD_VAR 0 17
11830: PPUSH
11831: CALL_OW 310
11835: PUSH
11836: LD_VAR 0 17
11840: PPUSH
11841: CALL_OW 302
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: ADD
11854: ST_TO_ADDR
11855: GO 11808
11857: POP
11858: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
11859: LD_ADDR_VAR 0 23
11863: PUSH
11864: LD_VAR 0 4
11868: PPUSH
11869: LD_INT 22
11871: PUSH
11872: LD_VAR 0 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 21
11883: PUSH
11884: LD_INT 2
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 50
11893: PUSH
11894: EMPTY
11895: LIST
11896: PUSH
11897: LD_INT 3
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 34
11905: PUSH
11906: LD_INT 12
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 34
11915: PUSH
11916: LD_INT 51
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 34
11925: PUSH
11926: LD_INT 32
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: PPUSH
11949: CALL_OW 70
11953: PUSH
11954: FOR_IN
11955: IFFALSE 12003
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11957: LD_ADDR_VAR 0 24
11961: PUSH
11962: LD_VAR 0 24
11966: PUSH
11967: LD_VAR 0 23
11971: PUSH
11972: LD_VAR 0 23
11976: PPUSH
11977: CALL_OW 310
11981: PUSH
11982: LD_VAR 0 23
11986: PPUSH
11987: CALL_OW 302
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: EMPTY
11998: LIST
11999: ADD
12000: ST_TO_ADDR
12001: GO 11954
12003: POP
12004: POP
// repeat soldiers = [ ] ;
12005: LD_ADDR_VAR 0 19
12009: PUSH
12010: EMPTY
12011: ST_TO_ADDR
// engineers = [ ] ;
12012: LD_ADDR_VAR 0 20
12016: PUSH
12017: EMPTY
12018: ST_TO_ADDR
// mechanics = [ ] ;
12019: LD_ADDR_VAR 0 21
12023: PUSH
12024: EMPTY
12025: ST_TO_ADDR
// scientists = [ ] ;
12026: LD_ADDR_VAR 0 22
12030: PUSH
12031: EMPTY
12032: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12033: LD_ADDR_VAR 0 29
12037: PUSH
12038: LD_VAR 0 4
12042: PPUSH
12043: LD_INT 22
12045: PUSH
12046: LD_VAR 0 1
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 21
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 50
12067: PUSH
12068: EMPTY
12069: LIST
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 30
12076: PUSH
12077: LD_INT 0
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 30
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 70
12109: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12110: LD_ADDR_VAR 0 30
12114: PUSH
12115: LD_VAR 0 4
12119: PPUSH
12120: LD_INT 22
12122: PUSH
12123: LD_VAR 0 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 21
12134: PUSH
12135: LD_INT 3
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 50
12144: PUSH
12145: EMPTY
12146: LIST
12147: PUSH
12148: LD_INT 2
12150: PUSH
12151: LD_INT 30
12153: PUSH
12154: LD_INT 2
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 30
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 70
12186: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12187: LD_ADDR_VAR 0 31
12191: PUSH
12192: LD_VAR 0 4
12196: PPUSH
12197: LD_INT 22
12199: PUSH
12200: LD_VAR 0 1
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 21
12211: PUSH
12212: LD_INT 3
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 50
12221: PUSH
12222: EMPTY
12223: LIST
12224: PUSH
12225: LD_INT 2
12227: PUSH
12228: LD_INT 30
12230: PUSH
12231: LD_INT 6
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 30
12240: PUSH
12241: LD_INT 7
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PUSH
12248: LD_INT 30
12250: PUSH
12251: LD_INT 8
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: PPUSH
12270: CALL_OW 70
12274: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12275: LD_ADDR_VAR 0 32
12279: PUSH
12280: LD_VAR 0 4
12284: PPUSH
12285: LD_INT 22
12287: PUSH
12288: LD_VAR 0 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 21
12299: PUSH
12300: LD_INT 3
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 50
12309: PUSH
12310: EMPTY
12311: LIST
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: LD_INT 30
12318: PUSH
12319: LD_INT 31
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 30
12328: PUSH
12329: LD_INT 32
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 70
12351: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12352: LD_ADDR_VAR 0 33
12356: PUSH
12357: LD_VAR 0 4
12361: PPUSH
12362: LD_INT 22
12364: PUSH
12365: LD_VAR 0 1
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 21
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 50
12386: PUSH
12387: EMPTY
12388: LIST
12389: PUSH
12390: LD_INT 2
12392: PUSH
12393: LD_INT 30
12395: PUSH
12396: LD_INT 4
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 30
12405: PUSH
12406: LD_INT 5
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PPUSH
12424: CALL_OW 70
12428: ST_TO_ADDR
// for i := 1 to personel do
12429: LD_ADDR_VAR 0 13
12433: PUSH
12434: DOUBLE
12435: LD_INT 1
12437: DEC
12438: ST_TO_ADDR
12439: LD_VAR 0 18
12443: PUSH
12444: FOR_TO
12445: IFFALSE 12655
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12447: LD_VAR 0 18
12451: PUSH
12452: LD_VAR 0 13
12456: ARRAY
12457: PUSH
12458: LD_INT 1
12460: ARRAY
12461: PPUSH
12462: CALL_OW 256
12466: PUSH
12467: LD_INT 1000
12469: EQUAL
12470: IFFALSE 12512
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12472: LD_ADDR_VAR 0 18
12476: PUSH
12477: LD_VAR 0 18
12481: PPUSH
12482: LD_VAR 0 13
12486: PUSH
12487: LD_VAR 0 18
12491: PUSH
12492: LD_VAR 0 13
12496: ARRAY
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL 33573 0 3
12509: ST_TO_ADDR
// end else
12510: GO 12603
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12512: LD_VAR 0 18
12516: PUSH
12517: LD_VAR 0 13
12521: ARRAY
12522: PUSH
12523: LD_INT 1
12525: ARRAY
12526: PPUSH
12527: CALL_OW 256
12531: PUSH
12532: LD_INT 950
12534: LESSEQUAL
12535: IFFALSE 12603
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12537: LD_ADDR_VAR 0 18
12541: PUSH
12542: LD_VAR 0 18
12546: PPUSH
12547: LD_VAR 0 13
12551: PUSH
12552: LD_VAR 0 18
12556: PUSH
12557: LD_VAR 0 13
12561: ARRAY
12562: PUSH
12563: LD_INT 1
12565: MINUS
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PPUSH
12571: LD_INT 0
12573: PPUSH
12574: CALL 33573 0 3
12578: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12579: LD_VAR 0 18
12583: PUSH
12584: LD_VAR 0 13
12588: ARRAY
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 5
12598: PPUSH
12599: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12603: LD_VAR 0 18
12607: PUSH
12608: LD_VAR 0 13
12612: ARRAY
12613: PUSH
12614: LD_INT 1
12616: ARRAY
12617: PPUSH
12618: CALL_OW 256
12622: PUSH
12623: LD_INT 250
12625: LESS
12626: IFFALSE 12653
// personel = personel diff [ personel [ i ] ] ;
12628: LD_ADDR_VAR 0 18
12632: PUSH
12633: LD_VAR 0 18
12637: PUSH
12638: LD_VAR 0 18
12642: PUSH
12643: LD_VAR 0 13
12647: ARRAY
12648: PUSH
12649: EMPTY
12650: LIST
12651: DIFF
12652: ST_TO_ADDR
// end ;
12653: GO 12444
12655: POP
12656: POP
// for i := 1 to vehicles do
12657: LD_ADDR_VAR 0 13
12661: PUSH
12662: DOUBLE
12663: LD_INT 1
12665: DEC
12666: ST_TO_ADDR
12667: LD_VAR 0 24
12671: PUSH
12672: FOR_TO
12673: IFFALSE 13012
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12675: LD_VAR 0 24
12679: PUSH
12680: LD_VAR 0 13
12684: ARRAY
12685: PUSH
12686: LD_INT 1
12688: ARRAY
12689: PPUSH
12690: CALL_OW 256
12694: PUSH
12695: LD_INT 1000
12697: EQUAL
12698: IFFALSE 12873
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12700: LD_VAR 0 24
12704: PUSH
12705: LD_VAR 0 13
12709: ARRAY
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: CALL_OW 263
12719: PUSH
12720: LD_INT 1
12722: EQUAL
12723: IFFALSE 12781
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12725: LD_VAR 0 24
12729: PUSH
12730: LD_VAR 0 13
12734: ARRAY
12735: PUSH
12736: LD_INT 2
12738: ARRAY
12739: PPUSH
12740: CALL_OW 310
12744: NOT
12745: IFFALSE 12781
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12747: LD_VAR 0 24
12751: PUSH
12752: LD_VAR 0 13
12756: ARRAY
12757: PUSH
12758: LD_INT 2
12760: ARRAY
12761: PPUSH
12762: LD_VAR 0 24
12766: PUSH
12767: LD_VAR 0 13
12771: ARRAY
12772: PUSH
12773: LD_INT 1
12775: ARRAY
12776: PPUSH
12777: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
12781: LD_VAR 0 24
12785: PUSH
12786: LD_VAR 0 10
12790: LESS
12791: IFFALSE 12833
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
12793: LD_ADDR_VAR 0 24
12797: PUSH
12798: LD_VAR 0 24
12802: PPUSH
12803: LD_VAR 0 13
12807: PUSH
12808: LD_VAR 0 24
12812: PUSH
12813: LD_VAR 0 13
12817: ARRAY
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: LD_INT 1
12825: PPUSH
12826: CALL 33573 0 3
12830: ST_TO_ADDR
12831: GO 12871
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12833: LD_ADDR_VAR 0 24
12837: PUSH
12838: LD_VAR 0 24
12842: PPUSH
12843: LD_VAR 0 13
12847: PUSH
12848: LD_VAR 0 24
12852: PUSH
12853: LD_VAR 0 13
12857: ARRAY
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PPUSH
12863: LD_INT 2
12865: PPUSH
12866: CALL 33573 0 3
12870: ST_TO_ADDR
// end else
12871: GO 12960
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12873: LD_VAR 0 24
12877: PUSH
12878: LD_VAR 0 13
12882: ARRAY
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 256
12892: PUSH
12893: LD_INT 650
12895: LESSEQUAL
12896: IFFALSE 12960
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12898: LD_ADDR_VAR 0 24
12902: PUSH
12903: LD_VAR 0 24
12907: PPUSH
12908: LD_VAR 0 13
12912: PUSH
12913: LD_VAR 0 24
12917: PUSH
12918: LD_VAR 0 13
12922: ARRAY
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: LD_INT 0
12930: PPUSH
12931: CALL 33573 0 3
12935: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12936: LD_VAR 0 24
12940: PUSH
12941: LD_VAR 0 13
12945: ARRAY
12946: PUSH
12947: LD_INT 1
12949: ARRAY
12950: PPUSH
12951: LD_VAR 0 6
12955: PPUSH
12956: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12960: LD_VAR 0 24
12964: PUSH
12965: LD_VAR 0 13
12969: ARRAY
12970: PUSH
12971: LD_INT 1
12973: ARRAY
12974: PPUSH
12975: CALL_OW 256
12979: PUSH
12980: LD_INT 250
12982: LESS
12983: IFFALSE 13010
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12985: LD_ADDR_VAR 0 24
12989: PUSH
12990: LD_VAR 0 24
12994: PUSH
12995: LD_VAR 0 24
12999: PUSH
13000: LD_VAR 0 13
13004: ARRAY
13005: PUSH
13006: EMPTY
13007: LIST
13008: DIFF
13009: ST_TO_ADDR
// end ;
13010: GO 12672
13012: POP
13013: POP
// for i := 1 to personel do
13014: LD_ADDR_VAR 0 13
13018: PUSH
13019: DOUBLE
13020: LD_INT 1
13022: DEC
13023: ST_TO_ADDR
13024: LD_VAR 0 18
13028: PUSH
13029: FOR_TO
13030: IFFALSE 13071
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13032: LD_ADDR_VAR 0 19
13036: PUSH
13037: LD_VAR 0 19
13041: PUSH
13042: LD_VAR 0 18
13046: PUSH
13047: LD_VAR 0 13
13051: ARRAY
13052: PPUSH
13053: LD_INT 25
13055: PUSH
13056: LD_INT 1
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 72
13067: ADD
13068: ST_TO_ADDR
13069: GO 13029
13071: POP
13072: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13073: LD_VAR 0 19
13077: PUSH
13078: LD_VAR 0 32
13082: PPUSH
13083: LD_INT 3
13085: PUSH
13086: LD_INT 59
13088: PUSH
13089: EMPTY
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 72
13100: AND
13101: IFFALSE 13389
// begin for i := 1 to personel do
13103: LD_ADDR_VAR 0 13
13107: PUSH
13108: DOUBLE
13109: LD_INT 1
13111: DEC
13112: ST_TO_ADDR
13113: LD_VAR 0 18
13117: PUSH
13118: FOR_TO
13119: IFFALSE 13385
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13121: LD_VAR 0 18
13125: PUSH
13126: LD_VAR 0 13
13130: ARRAY
13131: PUSH
13132: LD_INT 1
13134: ARRAY
13135: PPUSH
13136: CALL_OW 257
13140: PUSH
13141: LD_INT 1
13143: EQUAL
13144: PUSH
13145: LD_VAR 0 18
13149: PUSH
13150: LD_VAR 0 13
13154: ARRAY
13155: PUSH
13156: LD_INT 3
13158: ARRAY
13159: PUSH
13160: LD_INT 1
13162: EQUAL
13163: AND
13164: IFFALSE 13383
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13166: LD_VAR 0 18
13170: PUSH
13171: LD_VAR 0 13
13175: ARRAY
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: PPUSH
13181: CALL_OW 437
13185: IFFALSE 13286
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13187: LD_VAR 0 18
13191: PUSH
13192: LD_VAR 0 13
13196: ARRAY
13197: PUSH
13198: LD_INT 1
13200: ARRAY
13201: PPUSH
13202: CALL_OW 437
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PUSH
13211: LD_INT 1
13213: ARRAY
13214: PUSH
13215: LD_STRING e
13217: EQUAL
13218: PUSH
13219: LD_VAR 0 18
13223: PUSH
13224: LD_VAR 0 13
13228: ARRAY
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: PPUSH
13234: CALL_OW 437
13238: PUSH
13239: LD_INT 1
13241: ARRAY
13242: PUSH
13243: LD_INT 4
13245: ARRAY
13246: PPUSH
13247: CALL_OW 266
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: LD_INT 5
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: IN
13262: AND
13263: IFFALSE 13286
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13265: LD_VAR 0 18
13269: PUSH
13270: LD_VAR 0 13
13274: ARRAY
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: PPUSH
13280: EMPTY
13281: PPUSH
13282: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13286: LD_ADDR_VAR 0 36
13290: PUSH
13291: LD_VAR 0 32
13295: PPUSH
13296: LD_INT 3
13298: PUSH
13299: LD_INT 59
13301: PUSH
13302: EMPTY
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PPUSH
13309: CALL_OW 72
13313: PUSH
13314: FOR_IN
13315: IFFALSE 13381
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13317: LD_VAR 0 18
13321: PUSH
13322: LD_VAR 0 13
13326: ARRAY
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 310
13336: PPUSH
13337: CALL_OW 266
13341: PUSH
13342: LD_INT 31
13344: PUSH
13345: LD_INT 32
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: IN
13352: NOT
13353: IFFALSE 13379
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13355: LD_VAR 0 18
13359: PUSH
13360: LD_VAR 0 13
13364: ARRAY
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PPUSH
13370: LD_VAR 0 36
13374: PPUSH
13375: CALL_OW 120
13379: GO 13314
13381: POP
13382: POP
// end ; end ;
13383: GO 13118
13385: POP
13386: POP
// end else
13387: GO 13604
// if soldiers and barracks then
13389: LD_VAR 0 19
13393: PUSH
13394: LD_VAR 0 33
13398: AND
13399: IFFALSE 13604
// for i := 1 to personel do
13401: LD_ADDR_VAR 0 13
13405: PUSH
13406: DOUBLE
13407: LD_INT 1
13409: DEC
13410: ST_TO_ADDR
13411: LD_VAR 0 18
13415: PUSH
13416: FOR_TO
13417: IFFALSE 13602
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13419: LD_VAR 0 18
13423: PUSH
13424: LD_VAR 0 13
13428: ARRAY
13429: PUSH
13430: LD_INT 1
13432: ARRAY
13433: PPUSH
13434: CALL_OW 257
13438: PUSH
13439: LD_INT 1
13441: EQUAL
13442: PUSH
13443: LD_VAR 0 18
13447: PUSH
13448: LD_VAR 0 13
13452: ARRAY
13453: PUSH
13454: LD_INT 3
13456: ARRAY
13457: PUSH
13458: LD_INT 1
13460: EQUAL
13461: AND
13462: PUSH
13463: LD_VAR 0 18
13467: PUSH
13468: LD_VAR 0 13
13472: ARRAY
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PPUSH
13478: LD_INT 56
13480: PUSH
13481: EMPTY
13482: LIST
13483: PPUSH
13484: CALL_OW 72
13488: AND
13489: IFFALSE 13600
// begin if not personel [ i ] [ 2 ] then
13491: LD_VAR 0 18
13495: PUSH
13496: LD_VAR 0 13
13500: ARRAY
13501: PUSH
13502: LD_INT 2
13504: ARRAY
13505: NOT
13506: IFFALSE 13566
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13508: LD_ADDR_VAR 0 18
13512: PUSH
13513: LD_VAR 0 18
13517: PPUSH
13518: LD_VAR 0 13
13522: PUSH
13523: LD_VAR 0 18
13527: PUSH
13528: LD_VAR 0 13
13532: ARRAY
13533: PUSH
13534: LD_INT 1
13536: MINUS
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PPUSH
13542: LD_VAR 0 33
13546: PUSH
13547: LD_INT 1
13549: PPUSH
13550: LD_VAR 0 33
13554: PPUSH
13555: CALL_OW 12
13559: ARRAY
13560: PPUSH
13561: CALL 33573 0 3
13565: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13566: LD_VAR 0 18
13570: PUSH
13571: LD_VAR 0 13
13575: ARRAY
13576: PUSH
13577: LD_INT 1
13579: ARRAY
13580: PPUSH
13581: LD_VAR 0 18
13585: PUSH
13586: LD_VAR 0 13
13590: ARRAY
13591: PUSH
13592: LD_INT 2
13594: ARRAY
13595: PPUSH
13596: CALL_OW 120
// end ;
13600: GO 13416
13602: POP
13603: POP
// for i := 1 to personel do
13604: LD_ADDR_VAR 0 13
13608: PUSH
13609: DOUBLE
13610: LD_INT 1
13612: DEC
13613: ST_TO_ADDR
13614: LD_VAR 0 18
13618: PUSH
13619: FOR_TO
13620: IFFALSE 13661
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13622: LD_ADDR_VAR 0 20
13626: PUSH
13627: LD_VAR 0 20
13631: PUSH
13632: LD_VAR 0 18
13636: PUSH
13637: LD_VAR 0 13
13641: ARRAY
13642: PPUSH
13643: LD_INT 25
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PPUSH
13653: CALL_OW 72
13657: ADD
13658: ST_TO_ADDR
13659: GO 13619
13661: POP
13662: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13663: LD_VAR 0 20
13667: PUSH
13668: LD_VAR 0 4
13672: PPUSH
13673: LD_INT 22
13675: PUSH
13676: LD_VAR 0 1
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 21
13687: PUSH
13688: LD_INT 3
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 3
13697: PUSH
13698: LD_INT 24
13700: PUSH
13701: LD_INT 1000
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 70
13721: AND
13722: IFFALSE 13998
// begin for i := 1 to personel do
13724: LD_ADDR_VAR 0 13
13728: PUSH
13729: DOUBLE
13730: LD_INT 1
13732: DEC
13733: ST_TO_ADDR
13734: LD_VAR 0 18
13738: PUSH
13739: FOR_TO
13740: IFFALSE 13994
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13742: LD_VAR 0 18
13746: PUSH
13747: LD_VAR 0 13
13751: ARRAY
13752: PUSH
13753: LD_INT 1
13755: ARRAY
13756: PPUSH
13757: CALL_OW 257
13761: PUSH
13762: LD_INT 2
13764: EQUAL
13765: PUSH
13766: LD_VAR 0 18
13770: PUSH
13771: LD_VAR 0 13
13775: ARRAY
13776: PUSH
13777: LD_INT 3
13779: ARRAY
13780: PUSH
13781: LD_INT 1
13783: EQUAL
13784: AND
13785: IFFALSE 13992
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13787: LD_VAR 0 18
13791: PUSH
13792: LD_VAR 0 13
13796: ARRAY
13797: PUSH
13798: LD_INT 1
13800: ARRAY
13801: PPUSH
13802: CALL_OW 437
13806: IFFALSE 13862
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13808: LD_VAR 0 18
13812: PUSH
13813: LD_VAR 0 13
13817: ARRAY
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: CALL_OW 437
13827: PUSH
13828: LD_INT 1
13830: ARRAY
13831: PUSH
13832: LD_INT 1
13834: ARRAY
13835: PUSH
13836: LD_STRING e
13838: EQUAL
13839: IFFALSE 13862
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13841: LD_VAR 0 18
13845: PUSH
13846: LD_VAR 0 13
13850: ARRAY
13851: PUSH
13852: LD_INT 1
13854: ARRAY
13855: PPUSH
13856: EMPTY
13857: PPUSH
13858: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13862: LD_VAR 0 18
13866: PUSH
13867: LD_VAR 0 13
13871: ARRAY
13872: PUSH
13873: LD_INT 1
13875: ARRAY
13876: PPUSH
13877: CALL_OW 310
13881: IFFALSE 13902
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13883: LD_VAR 0 18
13887: PUSH
13888: LD_VAR 0 13
13892: ARRAY
13893: PUSH
13894: LD_INT 1
13896: ARRAY
13897: PPUSH
13898: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13902: LD_ADDR_VAR 0 34
13906: PUSH
13907: LD_VAR 0 4
13911: PPUSH
13912: LD_INT 22
13914: PUSH
13915: LD_VAR 0 1
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 21
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 3
13936: PUSH
13937: LD_INT 24
13939: PUSH
13940: LD_INT 1000
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: PPUSH
13956: CALL_OW 70
13960: PUSH
13961: FOR_IN
13962: IFFALSE 13990
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13964: LD_VAR 0 18
13968: PUSH
13969: LD_VAR 0 13
13973: ARRAY
13974: PUSH
13975: LD_INT 1
13977: ARRAY
13978: PPUSH
13979: LD_VAR 0 34
13983: PPUSH
13984: CALL_OW 190
13988: GO 13961
13990: POP
13991: POP
// end ;
13992: GO 13739
13994: POP
13995: POP
// end else
13996: GO 14260
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13998: LD_VAR 0 20
14002: PUSH
14003: LD_VAR 0 20
14007: PPUSH
14008: LD_INT 56
14010: PUSH
14011: EMPTY
14012: LIST
14013: PPUSH
14014: CALL_OW 72
14018: AND
14019: PUSH
14020: LD_VAR 0 29
14024: AND
14025: IFFALSE 14260
// for i := 1 to personel do
14027: LD_ADDR_VAR 0 13
14031: PUSH
14032: DOUBLE
14033: LD_INT 1
14035: DEC
14036: ST_TO_ADDR
14037: LD_VAR 0 18
14041: PUSH
14042: FOR_TO
14043: IFFALSE 14258
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14045: LD_VAR 0 18
14049: PUSH
14050: LD_VAR 0 13
14054: ARRAY
14055: PUSH
14056: LD_INT 1
14058: ARRAY
14059: PPUSH
14060: CALL_OW 257
14064: PUSH
14065: LD_INT 2
14067: EQUAL
14068: PUSH
14069: LD_VAR 0 18
14073: PUSH
14074: LD_VAR 0 13
14078: ARRAY
14079: PUSH
14080: LD_INT 3
14082: ARRAY
14083: PUSH
14084: LD_INT 1
14086: EQUAL
14087: AND
14088: IFFALSE 14256
// begin if not personel [ i ] [ 2 ] then
14090: LD_VAR 0 18
14094: PUSH
14095: LD_VAR 0 13
14099: ARRAY
14100: PUSH
14101: LD_INT 2
14103: ARRAY
14104: NOT
14105: IFFALSE 14222
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14107: LD_ADDR_VAR 0 18
14111: PUSH
14112: LD_VAR 0 18
14116: PPUSH
14117: LD_VAR 0 13
14121: PUSH
14122: LD_VAR 0 18
14126: PUSH
14127: LD_VAR 0 13
14131: ARRAY
14132: PUSH
14133: LD_INT 1
14135: MINUS
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: LD_VAR 0 4
14145: PPUSH
14146: LD_INT 22
14148: PUSH
14149: LD_VAR 0 1
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: LD_INT 21
14160: PUSH
14161: LD_INT 3
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 50
14170: PUSH
14171: EMPTY
14172: LIST
14173: PUSH
14174: LD_INT 2
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PPUSH
14208: CALL_OW 70
14212: PUSH
14213: LD_INT 1
14215: ARRAY
14216: PPUSH
14217: CALL 33573 0 3
14221: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14222: LD_VAR 0 18
14226: PUSH
14227: LD_VAR 0 13
14231: ARRAY
14232: PUSH
14233: LD_INT 1
14235: ARRAY
14236: PPUSH
14237: LD_VAR 0 18
14241: PUSH
14242: LD_VAR 0 13
14246: ARRAY
14247: PUSH
14248: LD_INT 2
14250: ARRAY
14251: PPUSH
14252: CALL_OW 120
// end ; end ;
14256: GO 14042
14258: POP
14259: POP
// for i := 1 to personel do
14260: LD_ADDR_VAR 0 13
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_VAR 0 18
14274: PUSH
14275: FOR_TO
14276: IFFALSE 14317
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14278: LD_ADDR_VAR 0 21
14282: PUSH
14283: LD_VAR 0 21
14287: PUSH
14288: LD_VAR 0 18
14292: PUSH
14293: LD_VAR 0 13
14297: ARRAY
14298: PPUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 3
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 72
14313: ADD
14314: ST_TO_ADDR
14315: GO 14275
14317: POP
14318: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14319: LD_VAR 0 21
14323: PUSH
14324: LD_VAR 0 4
14328: PPUSH
14329: LD_INT 22
14331: PUSH
14332: LD_VAR 0 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 3
14353: PUSH
14354: LD_INT 24
14356: PUSH
14357: LD_INT 1000
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: PPUSH
14373: CALL_OW 70
14377: AND
14378: IFFALSE 14982
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14380: LD_ADDR_VAR 0 35
14384: PUSH
14385: LD_VAR 0 4
14389: PPUSH
14390: LD_INT 22
14392: PUSH
14393: LD_VAR 0 1
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: PUSH
14402: LD_INT 21
14404: PUSH
14405: LD_INT 2
14407: PUSH
14408: EMPTY
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: LD_INT 24
14417: PUSH
14418: LD_INT 1000
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: PPUSH
14434: CALL_OW 70
14438: PUSH
14439: FOR_IN
14440: IFFALSE 14978
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14442: LD_VAR 0 35
14446: PPUSH
14447: LD_VAR 0 6
14451: PPUSH
14452: CALL_OW 299
14456: PUSH
14457: LD_INT 5
14459: LESS
14460: IFFALSE 14755
// begin for i := 1 to vehicles do
14462: LD_ADDR_VAR 0 13
14466: PUSH
14467: DOUBLE
14468: LD_INT 1
14470: DEC
14471: ST_TO_ADDR
14472: LD_VAR 0 24
14476: PUSH
14477: FOR_TO
14478: IFFALSE 14547
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14480: LD_VAR 0 24
14484: PUSH
14485: LD_VAR 0 13
14489: ARRAY
14490: PUSH
14491: LD_INT 1
14493: ARRAY
14494: PUSH
14495: LD_VAR 0 35
14499: EQUAL
14500: IFFALSE 14521
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14502: LD_VAR 0 24
14506: PUSH
14507: LD_VAR 0 13
14511: ARRAY
14512: PUSH
14513: LD_INT 2
14515: ARRAY
14516: PPUSH
14517: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14521: LD_VAR 0 24
14525: PUSH
14526: LD_VAR 0 13
14530: ARRAY
14531: PUSH
14532: LD_INT 2
14534: ARRAY
14535: PPUSH
14536: LD_VAR 0 35
14540: PPUSH
14541: CALL_OW 189
// end ;
14545: GO 14477
14547: POP
14548: POP
// for i := 1 to personel do
14549: LD_ADDR_VAR 0 13
14553: PUSH
14554: DOUBLE
14555: LD_INT 1
14557: DEC
14558: ST_TO_ADDR
14559: LD_VAR 0 18
14563: PUSH
14564: FOR_TO
14565: IFFALSE 14753
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14567: LD_VAR 0 18
14571: PUSH
14572: LD_VAR 0 13
14576: ARRAY
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PPUSH
14582: CALL_OW 257
14586: PUSH
14587: LD_INT 3
14589: EQUAL
14590: PUSH
14591: LD_VAR 0 18
14595: PUSH
14596: LD_VAR 0 13
14600: ARRAY
14601: PUSH
14602: LD_INT 3
14604: ARRAY
14605: PUSH
14606: LD_INT 1
14608: EQUAL
14609: AND
14610: IFFALSE 14751
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14612: LD_VAR 0 18
14616: PUSH
14617: LD_VAR 0 13
14621: ARRAY
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: CALL_OW 437
14631: IFFALSE 14687
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14633: LD_VAR 0 18
14637: PUSH
14638: LD_VAR 0 13
14642: ARRAY
14643: PUSH
14644: LD_INT 1
14646: ARRAY
14647: PPUSH
14648: CALL_OW 437
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PUSH
14661: LD_STRING e
14663: EQUAL
14664: IFFALSE 14687
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14666: LD_VAR 0 18
14670: PUSH
14671: LD_VAR 0 13
14675: ARRAY
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: EMPTY
14682: PPUSH
14683: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14687: LD_VAR 0 18
14691: PUSH
14692: LD_VAR 0 13
14696: ARRAY
14697: PUSH
14698: LD_INT 1
14700: ARRAY
14701: PPUSH
14702: CALL_OW 310
14706: IFFALSE 14727
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14708: LD_VAR 0 18
14712: PUSH
14713: LD_VAR 0 13
14717: ARRAY
14718: PUSH
14719: LD_INT 1
14721: ARRAY
14722: PPUSH
14723: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14727: LD_VAR 0 18
14731: PUSH
14732: LD_VAR 0 13
14736: ARRAY
14737: PUSH
14738: LD_INT 1
14740: ARRAY
14741: PPUSH
14742: LD_VAR 0 35
14746: PPUSH
14747: CALL_OW 189
// end ;
14751: GO 14564
14753: POP
14754: POP
// end ; if GetLives ( damageUnit ) < 250 then
14755: LD_VAR 0 35
14759: PPUSH
14760: CALL_OW 256
14764: PUSH
14765: LD_INT 250
14767: LESS
14768: IFFALSE 14976
// for i := 1 to personel do
14770: LD_ADDR_VAR 0 13
14774: PUSH
14775: DOUBLE
14776: LD_INT 1
14778: DEC
14779: ST_TO_ADDR
14780: LD_VAR 0 18
14784: PUSH
14785: FOR_TO
14786: IFFALSE 14974
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14788: LD_VAR 0 18
14792: PUSH
14793: LD_VAR 0 13
14797: ARRAY
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PPUSH
14803: CALL_OW 257
14807: PUSH
14808: LD_INT 3
14810: EQUAL
14811: PUSH
14812: LD_VAR 0 18
14816: PUSH
14817: LD_VAR 0 13
14821: ARRAY
14822: PUSH
14823: LD_INT 3
14825: ARRAY
14826: PUSH
14827: LD_INT 1
14829: EQUAL
14830: AND
14831: IFFALSE 14972
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14833: LD_VAR 0 18
14837: PUSH
14838: LD_VAR 0 13
14842: ARRAY
14843: PUSH
14844: LD_INT 1
14846: ARRAY
14847: PPUSH
14848: CALL_OW 437
14852: IFFALSE 14908
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14854: LD_VAR 0 18
14858: PUSH
14859: LD_VAR 0 13
14863: ARRAY
14864: PUSH
14865: LD_INT 1
14867: ARRAY
14868: PPUSH
14869: CALL_OW 437
14873: PUSH
14874: LD_INT 1
14876: ARRAY
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: PUSH
14882: LD_STRING e
14884: EQUAL
14885: IFFALSE 14908
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14887: LD_VAR 0 18
14891: PUSH
14892: LD_VAR 0 13
14896: ARRAY
14897: PUSH
14898: LD_INT 1
14900: ARRAY
14901: PPUSH
14902: EMPTY
14903: PPUSH
14904: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14908: LD_VAR 0 18
14912: PUSH
14913: LD_VAR 0 13
14917: ARRAY
14918: PUSH
14919: LD_INT 1
14921: ARRAY
14922: PPUSH
14923: CALL_OW 310
14927: IFFALSE 14948
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14929: LD_VAR 0 18
14933: PUSH
14934: LD_VAR 0 13
14938: ARRAY
14939: PUSH
14940: LD_INT 1
14942: ARRAY
14943: PPUSH
14944: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14948: LD_VAR 0 18
14952: PUSH
14953: LD_VAR 0 13
14957: ARRAY
14958: PUSH
14959: LD_INT 1
14961: ARRAY
14962: PPUSH
14963: LD_VAR 0 35
14967: PPUSH
14968: CALL_OW 189
// end ;
14972: GO 14785
14974: POP
14975: POP
// end ;
14976: GO 14439
14978: POP
14979: POP
// end else
14980: GO 15187
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14982: LD_VAR 0 21
14986: PUSH
14987: LD_VAR 0 21
14991: PPUSH
14992: LD_INT 56
14994: PUSH
14995: EMPTY
14996: LIST
14997: PPUSH
14998: CALL_OW 72
15002: AND
15003: PUSH
15004: LD_VAR 0 30
15008: AND
15009: IFFALSE 15187
// for i := 1 to personel do
15011: LD_ADDR_VAR 0 13
15015: PUSH
15016: DOUBLE
15017: LD_INT 1
15019: DEC
15020: ST_TO_ADDR
15021: LD_VAR 0 18
15025: PUSH
15026: FOR_TO
15027: IFFALSE 15185
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15029: LD_VAR 0 18
15033: PUSH
15034: LD_VAR 0 13
15038: ARRAY
15039: PUSH
15040: LD_INT 1
15042: ARRAY
15043: PPUSH
15044: CALL_OW 257
15048: PUSH
15049: LD_INT 3
15051: EQUAL
15052: PUSH
15053: LD_VAR 0 18
15057: PUSH
15058: LD_VAR 0 13
15062: ARRAY
15063: PUSH
15064: LD_INT 3
15066: ARRAY
15067: PUSH
15068: LD_INT 1
15070: EQUAL
15071: AND
15072: IFFALSE 15183
// begin if not personel [ i ] [ 2 ] then
15074: LD_VAR 0 18
15078: PUSH
15079: LD_VAR 0 13
15083: ARRAY
15084: PUSH
15085: LD_INT 2
15087: ARRAY
15088: NOT
15089: IFFALSE 15149
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15091: LD_ADDR_VAR 0 18
15095: PUSH
15096: LD_VAR 0 18
15100: PPUSH
15101: LD_VAR 0 13
15105: PUSH
15106: LD_VAR 0 18
15110: PUSH
15111: LD_VAR 0 13
15115: ARRAY
15116: PUSH
15117: LD_INT 1
15119: MINUS
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PPUSH
15125: LD_VAR 0 30
15129: PUSH
15130: LD_INT 1
15132: PPUSH
15133: LD_VAR 0 30
15137: PPUSH
15138: CALL_OW 12
15142: ARRAY
15143: PPUSH
15144: CALL 33573 0 3
15148: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15149: LD_VAR 0 18
15153: PUSH
15154: LD_VAR 0 13
15158: ARRAY
15159: PUSH
15160: LD_INT 1
15162: ARRAY
15163: PPUSH
15164: LD_VAR 0 18
15168: PUSH
15169: LD_VAR 0 13
15173: ARRAY
15174: PUSH
15175: LD_INT 2
15177: ARRAY
15178: PPUSH
15179: CALL_OW 120
// end ;
15183: GO 15026
15185: POP
15186: POP
// for i := 1 to personel do
15187: LD_ADDR_VAR 0 13
15191: PUSH
15192: DOUBLE
15193: LD_INT 1
15195: DEC
15196: ST_TO_ADDR
15197: LD_VAR 0 18
15201: PUSH
15202: FOR_TO
15203: IFFALSE 15244
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15205: LD_ADDR_VAR 0 22
15209: PUSH
15210: LD_VAR 0 22
15214: PUSH
15215: LD_VAR 0 18
15219: PUSH
15220: LD_VAR 0 13
15224: ARRAY
15225: PPUSH
15226: LD_INT 25
15228: PUSH
15229: LD_INT 4
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PPUSH
15236: CALL_OW 72
15240: ADD
15241: ST_TO_ADDR
15242: GO 15202
15244: POP
15245: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15246: LD_VAR 0 22
15250: PUSH
15251: LD_VAR 0 4
15255: PPUSH
15256: LD_INT 22
15258: PUSH
15259: LD_VAR 0 1
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: PUSH
15268: LD_INT 21
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 3
15280: PUSH
15281: LD_INT 24
15283: PUSH
15284: LD_INT 1000
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PPUSH
15300: CALL_OW 70
15304: AND
15305: IFFALSE 15822
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15307: LD_ADDR_VAR 0 35
15311: PUSH
15312: LD_VAR 0 4
15316: PPUSH
15317: LD_INT 22
15319: PUSH
15320: LD_VAR 0 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 21
15331: PUSH
15332: LD_INT 1
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 3
15341: PUSH
15342: LD_INT 24
15344: PUSH
15345: LD_INT 1000
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 70
15365: PUSH
15366: FOR_IN
15367: IFFALSE 15818
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15369: LD_VAR 0 35
15373: PPUSH
15374: LD_VAR 0 5
15378: PPUSH
15379: CALL_OW 299
15383: PUSH
15384: LD_INT 5
15386: LESS
15387: IFFALSE 15595
// for i := 1 to personel do
15389: LD_ADDR_VAR 0 13
15393: PUSH
15394: DOUBLE
15395: LD_INT 1
15397: DEC
15398: ST_TO_ADDR
15399: LD_VAR 0 18
15403: PUSH
15404: FOR_TO
15405: IFFALSE 15593
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15407: LD_VAR 0 18
15411: PUSH
15412: LD_VAR 0 13
15416: ARRAY
15417: PUSH
15418: LD_INT 1
15420: ARRAY
15421: PPUSH
15422: CALL_OW 257
15426: PUSH
15427: LD_INT 4
15429: EQUAL
15430: PUSH
15431: LD_VAR 0 18
15435: PUSH
15436: LD_VAR 0 13
15440: ARRAY
15441: PUSH
15442: LD_INT 3
15444: ARRAY
15445: PUSH
15446: LD_INT 1
15448: EQUAL
15449: AND
15450: IFFALSE 15591
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15452: LD_VAR 0 18
15456: PUSH
15457: LD_VAR 0 13
15461: ARRAY
15462: PUSH
15463: LD_INT 1
15465: ARRAY
15466: PPUSH
15467: CALL_OW 437
15471: IFFALSE 15527
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15473: LD_VAR 0 18
15477: PUSH
15478: LD_VAR 0 13
15482: ARRAY
15483: PUSH
15484: LD_INT 1
15486: ARRAY
15487: PPUSH
15488: CALL_OW 437
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PUSH
15497: LD_INT 1
15499: ARRAY
15500: PUSH
15501: LD_STRING e
15503: EQUAL
15504: IFFALSE 15527
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15506: LD_VAR 0 18
15510: PUSH
15511: LD_VAR 0 13
15515: ARRAY
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: PPUSH
15521: EMPTY
15522: PPUSH
15523: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15527: LD_VAR 0 18
15531: PUSH
15532: LD_VAR 0 13
15536: ARRAY
15537: PUSH
15538: LD_INT 1
15540: ARRAY
15541: PPUSH
15542: CALL_OW 310
15546: IFFALSE 15567
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15548: LD_VAR 0 18
15552: PUSH
15553: LD_VAR 0 13
15557: ARRAY
15558: PUSH
15559: LD_INT 1
15561: ARRAY
15562: PPUSH
15563: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15567: LD_VAR 0 18
15571: PUSH
15572: LD_VAR 0 13
15576: ARRAY
15577: PUSH
15578: LD_INT 1
15580: ARRAY
15581: PPUSH
15582: LD_VAR 0 35
15586: PPUSH
15587: CALL_OW 188
// end ;
15591: GO 15404
15593: POP
15594: POP
// if GetLives ( damageUnit ) < 250 then
15595: LD_VAR 0 35
15599: PPUSH
15600: CALL_OW 256
15604: PUSH
15605: LD_INT 250
15607: LESS
15608: IFFALSE 15816
// for i := 1 to personel do
15610: LD_ADDR_VAR 0 13
15614: PUSH
15615: DOUBLE
15616: LD_INT 1
15618: DEC
15619: ST_TO_ADDR
15620: LD_VAR 0 18
15624: PUSH
15625: FOR_TO
15626: IFFALSE 15814
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15628: LD_VAR 0 18
15632: PUSH
15633: LD_VAR 0 13
15637: ARRAY
15638: PUSH
15639: LD_INT 1
15641: ARRAY
15642: PPUSH
15643: CALL_OW 257
15647: PUSH
15648: LD_INT 4
15650: EQUAL
15651: PUSH
15652: LD_VAR 0 18
15656: PUSH
15657: LD_VAR 0 13
15661: ARRAY
15662: PUSH
15663: LD_INT 3
15665: ARRAY
15666: PUSH
15667: LD_INT 1
15669: EQUAL
15670: AND
15671: IFFALSE 15812
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15673: LD_VAR 0 18
15677: PUSH
15678: LD_VAR 0 13
15682: ARRAY
15683: PUSH
15684: LD_INT 1
15686: ARRAY
15687: PPUSH
15688: CALL_OW 437
15692: IFFALSE 15748
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15694: LD_VAR 0 18
15698: PUSH
15699: LD_VAR 0 13
15703: ARRAY
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: PPUSH
15709: CALL_OW 437
15713: PUSH
15714: LD_INT 1
15716: ARRAY
15717: PUSH
15718: LD_INT 1
15720: ARRAY
15721: PUSH
15722: LD_STRING e
15724: EQUAL
15725: IFFALSE 15748
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15727: LD_VAR 0 18
15731: PUSH
15732: LD_VAR 0 13
15736: ARRAY
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: EMPTY
15743: PPUSH
15744: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15748: LD_VAR 0 18
15752: PUSH
15753: LD_VAR 0 13
15757: ARRAY
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PPUSH
15763: CALL_OW 310
15767: IFFALSE 15788
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15769: LD_VAR 0 18
15773: PUSH
15774: LD_VAR 0 13
15778: ARRAY
15779: PUSH
15780: LD_INT 1
15782: ARRAY
15783: PPUSH
15784: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15788: LD_VAR 0 18
15792: PUSH
15793: LD_VAR 0 13
15797: ARRAY
15798: PUSH
15799: LD_INT 1
15801: ARRAY
15802: PPUSH
15803: LD_VAR 0 35
15807: PPUSH
15808: CALL_OW 188
// end ;
15812: GO 15625
15814: POP
15815: POP
// end ;
15816: GO 15366
15818: POP
15819: POP
// end else
15820: GO 16027
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
15822: LD_VAR 0 22
15826: PUSH
15827: LD_VAR 0 22
15831: PPUSH
15832: LD_INT 56
15834: PUSH
15835: EMPTY
15836: LIST
15837: PPUSH
15838: CALL_OW 72
15842: AND
15843: PUSH
15844: LD_VAR 0 31
15848: AND
15849: IFFALSE 16027
// for i := 1 to personel do
15851: LD_ADDR_VAR 0 13
15855: PUSH
15856: DOUBLE
15857: LD_INT 1
15859: DEC
15860: ST_TO_ADDR
15861: LD_VAR 0 18
15865: PUSH
15866: FOR_TO
15867: IFFALSE 16025
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15869: LD_VAR 0 18
15873: PUSH
15874: LD_VAR 0 13
15878: ARRAY
15879: PUSH
15880: LD_INT 1
15882: ARRAY
15883: PPUSH
15884: CALL_OW 257
15888: PUSH
15889: LD_INT 4
15891: EQUAL
15892: PUSH
15893: LD_VAR 0 18
15897: PUSH
15898: LD_VAR 0 13
15902: ARRAY
15903: PUSH
15904: LD_INT 3
15906: ARRAY
15907: PUSH
15908: LD_INT 1
15910: EQUAL
15911: AND
15912: IFFALSE 16023
// begin if not personel [ i ] [ 2 ] then
15914: LD_VAR 0 18
15918: PUSH
15919: LD_VAR 0 13
15923: ARRAY
15924: PUSH
15925: LD_INT 2
15927: ARRAY
15928: NOT
15929: IFFALSE 15989
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15931: LD_ADDR_VAR 0 18
15935: PUSH
15936: LD_VAR 0 18
15940: PPUSH
15941: LD_VAR 0 13
15945: PUSH
15946: LD_VAR 0 18
15950: PUSH
15951: LD_VAR 0 13
15955: ARRAY
15956: PUSH
15957: LD_INT 1
15959: MINUS
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PPUSH
15965: LD_VAR 0 31
15969: PUSH
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 31
15977: PPUSH
15978: CALL_OW 12
15982: ARRAY
15983: PPUSH
15984: CALL 33573 0 3
15988: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15989: LD_VAR 0 18
15993: PUSH
15994: LD_VAR 0 13
15998: ARRAY
15999: PUSH
16000: LD_INT 1
16002: ARRAY
16003: PPUSH
16004: LD_VAR 0 18
16008: PUSH
16009: LD_VAR 0 13
16013: ARRAY
16014: PUSH
16015: LD_INT 2
16017: ARRAY
16018: PPUSH
16019: CALL_OW 120
// end ;
16023: GO 15866
16025: POP
16026: POP
// wait ( 0 0$01 ) ;
16027: LD_INT 35
16029: PPUSH
16030: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16034: LD_VAR 0 24
16038: PUSH
16039: LD_VAR 0 8
16043: LESS
16044: PUSH
16045: LD_VAR 0 30
16049: AND
16050: IFFALSE 16300
// begin tmp = vehiclesAmount - vehicles ;
16052: LD_ADDR_VAR 0 15
16056: PUSH
16057: LD_VAR 0 8
16061: PUSH
16062: LD_VAR 0 24
16066: MINUS
16067: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16068: LD_ADDR_VAR 0 27
16072: PUSH
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL 7608 0 2
16087: ST_TO_ADDR
// for i := 1 to tmp do
16088: LD_ADDR_VAR 0 13
16092: PUSH
16093: DOUBLE
16094: LD_INT 1
16096: DEC
16097: ST_TO_ADDR
16098: LD_VAR 0 15
16102: PUSH
16103: FOR_TO
16104: IFFALSE 16296
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16106: LD_ADDR_VAR 0 15
16110: PUSH
16111: LD_VAR 0 27
16115: PUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_VAR 0 27
16123: PPUSH
16124: CALL_OW 12
16128: ARRAY
16129: ST_TO_ADDR
// if tmp then
16130: LD_VAR 0 15
16134: IFFALSE 16294
// begin if tmp in [ 34 , 14 , 71 ] then
16136: LD_VAR 0 15
16140: PUSH
16141: LD_INT 34
16143: PUSH
16144: LD_INT 14
16146: PUSH
16147: LD_INT 71
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: IN
16155: IFFALSE 16193
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16157: LD_ADDR_VAR 0 28
16161: PUSH
16162: LD_INT 4
16164: PUSH
16165: EMPTY
16166: LIST
16167: PUSH
16168: LD_INT 14
16170: PUSH
16171: EMPTY
16172: LIST
16173: PUSH
16174: LD_INT 24
16176: PUSH
16177: EMPTY
16178: LIST
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: LIST
16184: PUSH
16185: LD_VAR 0 2
16189: ARRAY
16190: ST_TO_ADDR
16191: GO 16251
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16193: LD_ADDR_VAR 0 28
16197: PUSH
16198: LD_INT 2
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 13
16214: PUSH
16215: LD_INT 14
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 21
16224: PUSH
16225: LD_INT 23
16227: PUSH
16228: LD_INT 24
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: PUSH
16245: LD_VAR 0 2
16249: ARRAY
16250: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16251: LD_VAR 0 30
16255: PUSH
16256: LD_INT 1
16258: ARRAY
16259: PPUSH
16260: LD_VAR 0 28
16264: PUSH
16265: LD_INT 1
16267: PPUSH
16268: LD_VAR 0 28
16272: PPUSH
16273: CALL_OW 12
16277: ARRAY
16278: PPUSH
16279: LD_INT 1
16281: PPUSH
16282: LD_INT 1
16284: PPUSH
16285: LD_VAR 0 15
16289: PPUSH
16290: CALL_OW 185
// end ; end ;
16294: GO 16103
16296: POP
16297: POP
// end else
16298: GO 16313
// ComCancel ( factory [ 1 ] ) ;
16300: LD_VAR 0 30
16304: PUSH
16305: LD_INT 1
16307: ARRAY
16308: PPUSH
16309: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16313: LD_ADDR_VAR 0 23
16317: PUSH
16318: LD_VAR 0 4
16322: PPUSH
16323: LD_INT 22
16325: PUSH
16326: LD_VAR 0 1
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 21
16337: PUSH
16338: LD_INT 2
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PPUSH
16349: CALL_OW 70
16353: PUSH
16354: FOR_IN
16355: IFFALSE 16525
// begin vehicleInList = false ;
16357: LD_ADDR_VAR 0 25
16361: PUSH
16362: LD_INT 0
16364: ST_TO_ADDR
// for i := 1 to vehicles do
16365: LD_ADDR_VAR 0 13
16369: PUSH
16370: DOUBLE
16371: LD_INT 1
16373: DEC
16374: ST_TO_ADDR
16375: LD_VAR 0 24
16379: PUSH
16380: FOR_TO
16381: IFFALSE 16411
// begin if vehicle in vehicles [ i ] then
16383: LD_VAR 0 23
16387: PUSH
16388: LD_VAR 0 24
16392: PUSH
16393: LD_VAR 0 13
16397: ARRAY
16398: IN
16399: IFFALSE 16409
// vehicleInList = true ;
16401: LD_ADDR_VAR 0 25
16405: PUSH
16406: LD_INT 1
16408: ST_TO_ADDR
// end ;
16409: GO 16380
16411: POP
16412: POP
// if not vehicleInList then
16413: LD_VAR 0 25
16417: NOT
16418: IFFALSE 16523
// if vehicles < vehiclesToAttackAmount then
16420: LD_VAR 0 24
16424: PUSH
16425: LD_VAR 0 10
16429: LESS
16430: IFFALSE 16482
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16432: LD_ADDR_VAR 0 24
16436: PUSH
16437: LD_VAR 0 24
16441: PUSH
16442: LD_VAR 0 23
16446: PUSH
16447: LD_VAR 0 23
16451: PPUSH
16452: CALL_OW 313
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: PUSH
16461: LD_VAR 0 23
16465: PPUSH
16466: CALL_OW 302
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: ADD
16479: ST_TO_ADDR
16480: GO 16523
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16482: LD_ADDR_VAR 0 24
16486: PUSH
16487: LD_VAR 0 24
16491: PUSH
16492: LD_VAR 0 23
16496: PUSH
16497: LD_VAR 0 23
16501: PPUSH
16502: CALL_OW 313
16506: PUSH
16507: LD_INT 1
16509: ARRAY
16510: PUSH
16511: LD_INT 2
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: PUSH
16519: EMPTY
16520: LIST
16521: ADD
16522: ST_TO_ADDR
// end ;
16523: GO 16354
16525: POP
16526: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16527: LD_ADDR_VAR 0 37
16531: PUSH
16532: LD_VAR 0 7
16536: PPUSH
16537: LD_INT 81
16539: PUSH
16540: LD_VAR 0 1
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 70
16553: PUSH
16554: FOR_IN
16555: IFFALSE 16734
// begin defenceUnits = [ ] ;
16557: LD_ADDR_VAR 0 26
16561: PUSH
16562: EMPTY
16563: ST_TO_ADDR
// for i := 1 to personel do
16564: LD_ADDR_VAR 0 13
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_VAR 0 18
16578: PUSH
16579: FOR_TO
16580: IFFALSE 16630
// if personel [ i ] [ 3 ] = 2 then
16582: LD_VAR 0 18
16586: PUSH
16587: LD_VAR 0 13
16591: ARRAY
16592: PUSH
16593: LD_INT 3
16595: ARRAY
16596: PUSH
16597: LD_INT 2
16599: EQUAL
16600: IFFALSE 16628
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16602: LD_ADDR_VAR 0 26
16606: PUSH
16607: LD_VAR 0 26
16611: PUSH
16612: LD_VAR 0 18
16616: PUSH
16617: LD_VAR 0 13
16621: ARRAY
16622: PUSH
16623: LD_INT 1
16625: ARRAY
16626: ADD
16627: ST_TO_ADDR
16628: GO 16579
16630: POP
16631: POP
// for i := 1 to vehicles do
16632: LD_ADDR_VAR 0 13
16636: PUSH
16637: DOUBLE
16638: LD_INT 1
16640: DEC
16641: ST_TO_ADDR
16642: LD_VAR 0 24
16646: PUSH
16647: FOR_TO
16648: IFFALSE 16698
// if vehicles [ i ] [ 3 ] = 2 then
16650: LD_VAR 0 24
16654: PUSH
16655: LD_VAR 0 13
16659: ARRAY
16660: PUSH
16661: LD_INT 3
16663: ARRAY
16664: PUSH
16665: LD_INT 2
16667: EQUAL
16668: IFFALSE 16696
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16670: LD_ADDR_VAR 0 26
16674: PUSH
16675: LD_VAR 0 26
16679: PUSH
16680: LD_VAR 0 24
16684: PUSH
16685: LD_VAR 0 13
16689: ARRAY
16690: PUSH
16691: LD_INT 1
16693: ARRAY
16694: ADD
16695: ST_TO_ADDR
16696: GO 16647
16698: POP
16699: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16700: LD_VAR 0 26
16704: PPUSH
16705: LD_INT 3
16707: PUSH
16708: LD_INT 60
16710: PUSH
16711: EMPTY
16712: LIST
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PPUSH
16718: CALL_OW 72
16722: PPUSH
16723: LD_VAR 0 37
16727: PPUSH
16728: CALL_OW 175
// end ;
16732: GO 16554
16734: POP
16735: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16736: LD_ADDR_VAR 0 38
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_VAR 0 1
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 2
16755: PUSH
16756: LD_INT 30
16758: PUSH
16759: LD_INT 31
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 30
16768: PUSH
16769: LD_INT 32
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: PUSH
16776: LD_INT 30
16778: PUSH
16779: LD_INT 33
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: PUSH
16786: LD_INT 30
16788: PUSH
16789: LD_INT 4
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 30
16798: PUSH
16799: LD_INT 5
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PPUSH
16818: CALL_OW 69
16822: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16823: LD_ADDR_VAR 0 39
16827: PUSH
16828: LD_INT 81
16830: PUSH
16831: LD_VAR 0 1
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 21
16842: PUSH
16843: LD_INT 3
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 58
16852: PUSH
16853: EMPTY
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16866: LD_VAR 0 38
16870: PUSH
16871: LD_VAR 0 39
16875: AND
16876: IFFALSE 16946
// for i in attackBuildings do
16878: LD_ADDR_VAR 0 13
16882: PUSH
16883: LD_VAR 0 38
16887: PUSH
16888: FOR_IN
16889: IFFALSE 16944
// for j in enemyBuildings do
16891: LD_ADDR_VAR 0 14
16895: PUSH
16896: LD_VAR 0 39
16900: PUSH
16901: FOR_IN
16902: IFFALSE 16940
// if GetDistUnits ( i , j ) < 12 then
16904: LD_VAR 0 13
16908: PPUSH
16909: LD_VAR 0 14
16913: PPUSH
16914: CALL_OW 296
16918: PUSH
16919: LD_INT 12
16921: LESS
16922: IFFALSE 16938
// ComAttackUnit ( i , j ) ;
16924: LD_VAR 0 13
16928: PPUSH
16929: LD_VAR 0 14
16933: PPUSH
16934: CALL_OW 115
16938: GO 16901
16940: POP
16941: POP
16942: GO 16888
16944: POP
16945: POP
// until not personel or not enableOmicronAI ;
16946: LD_VAR 0 18
16950: NOT
16951: PUSH
16952: LD_EXP 29
16956: NOT
16957: OR
16958: IFFALSE 12005
// end ;
16960: LD_VAR 0 12
16964: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
16965: LD_INT 0
16967: PPUSH
16968: PPUSH
16969: PPUSH
// weapons = [ ru_gatling_gun , ru_gun ] ;
16970: LD_ADDR_VAR 0 3
16974: PUSH
16975: LD_INT 43
16977: PUSH
16978: LD_INT 44
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
16985: LD_ADDR_VAR 0 2
16989: PUSH
16990: LD_EXP 69
16994: PUSH
16995: FOR_IN
16996: IFFALSE 17028
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_VAR 0 3
17007: PUSH
17008: LD_INT 1
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: CALL_OW 12
17020: ARRAY
17021: PPUSH
17022: CALL_OW 208
17026: GO 16995
17028: POP
17029: POP
// end ;
17030: LD_VAR 0 1
17034: RET
// export function KirovProduceVehicles ( factory ) ; begin
17035: LD_INT 0
17037: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17038: LD_VAR 0 1
17042: PPUSH
17043: LD_INT 21
17045: PPUSH
17046: LD_INT 1
17048: PPUSH
17049: LD_INT 1
17051: PPUSH
17052: LD_INT 51
17054: PPUSH
17055: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 21
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: LD_INT 1
17072: PPUSH
17073: LD_INT 51
17075: PPUSH
17076: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17080: LD_VAR 0 1
17084: PPUSH
17085: LD_INT 21
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: LD_INT 1
17093: PPUSH
17094: LD_INT 51
17096: PPUSH
17097: CALL_OW 185
// case Difficulty of 1 :
17101: LD_OWVAR 67
17105: PUSH
17106: LD_INT 1
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17237
17114: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17115: LD_VAR 0 1
17119: PPUSH
17120: LD_INT 21
17122: PUSH
17123: LD_INT 23
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 1
17132: PPUSH
17133: LD_INT 2
17135: PPUSH
17136: CALL_OW 12
17140: ARRAY
17141: PPUSH
17142: LD_INT 1
17144: PPUSH
17145: LD_INT 1
17147: PPUSH
17148: LD_INT 43
17150: PPUSH
17151: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17155: LD_VAR 0 1
17159: PPUSH
17160: LD_INT 21
17162: PUSH
17163: LD_INT 23
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: PUSH
17170: LD_INT 1
17172: PPUSH
17173: LD_INT 2
17175: PPUSH
17176: CALL_OW 12
17180: ARRAY
17181: PPUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: LD_INT 43
17190: PPUSH
17191: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17195: LD_VAR 0 1
17199: PPUSH
17200: LD_INT 21
17202: PUSH
17203: LD_INT 23
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: PPUSH
17213: LD_INT 2
17215: PPUSH
17216: CALL_OW 12
17220: ARRAY
17221: PPUSH
17222: LD_INT 1
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: LD_INT 44
17230: PPUSH
17231: CALL_OW 185
// end ; 2 :
17235: GO 17500
17237: LD_INT 2
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17368
17245: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17246: LD_VAR 0 1
17250: PPUSH
17251: LD_INT 21
17253: PUSH
17254: LD_INT 23
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 1
17263: PPUSH
17264: LD_INT 2
17266: PPUSH
17267: CALL_OW 12
17271: ARRAY
17272: PPUSH
17273: LD_INT 1
17275: PPUSH
17276: LD_INT 1
17278: PPUSH
17279: LD_INT 42
17281: PPUSH
17282: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17286: LD_VAR 0 1
17290: PPUSH
17291: LD_INT 21
17293: PUSH
17294: LD_INT 23
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 1
17303: PPUSH
17304: LD_INT 2
17306: PPUSH
17307: CALL_OW 12
17311: ARRAY
17312: PPUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_INT 1
17318: PPUSH
17319: LD_INT 43
17321: PPUSH
17322: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17326: LD_VAR 0 1
17330: PPUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 23
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 1
17343: PPUSH
17344: LD_INT 2
17346: PPUSH
17347: CALL_OW 12
17351: ARRAY
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: LD_INT 1
17358: PPUSH
17359: LD_INT 43
17361: PPUSH
17362: CALL_OW 185
// end ; 3 :
17366: GO 17500
17368: LD_INT 3
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17499
17376: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17377: LD_VAR 0 1
17381: PPUSH
17382: LD_INT 21
17384: PUSH
17385: LD_INT 23
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 1
17394: PPUSH
17395: LD_INT 2
17397: PPUSH
17398: CALL_OW 12
17402: ARRAY
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: LD_INT 1
17409: PPUSH
17410: LD_INT 42
17412: PPUSH
17413: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17417: LD_VAR 0 1
17421: PPUSH
17422: LD_INT 21
17424: PUSH
17425: LD_INT 23
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 1
17434: PPUSH
17435: LD_INT 2
17437: PPUSH
17438: CALL_OW 12
17442: ARRAY
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 42
17452: PPUSH
17453: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: LD_INT 21
17464: PUSH
17465: LD_INT 23
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: PUSH
17472: LD_INT 1
17474: PPUSH
17475: LD_INT 2
17477: PPUSH
17478: CALL_OW 12
17482: ARRAY
17483: PPUSH
17484: LD_INT 1
17486: PPUSH
17487: LD_INT 1
17489: PPUSH
17490: LD_INT 43
17492: PPUSH
17493: CALL_OW 185
// end ; end ;
17497: GO 17500
17499: POP
// end ;
17500: LD_VAR 0 2
17504: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs ; begin
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
// vehicles = [ ] ;
17512: LD_ADDR_VAR 0 3
17516: PUSH
17517: EMPTY
17518: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17519: LD_ADDR_VAR 0 4
17523: PUSH
17524: LD_EXP 73
17528: PUSH
17529: FOR_IN
17530: IFFALSE 17579
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17532: LD_ADDR_VAR 0 3
17536: PUSH
17537: LD_VAR 0 3
17541: PPUSH
17542: LD_INT 1
17544: PPUSH
17545: LD_VAR 0 4
17549: PUSH
17550: LD_VAR 0 4
17554: PPUSH
17555: CALL_OW 313
17559: PUSH
17560: LD_INT 1
17562: ARRAY
17563: PUSH
17564: LD_INT 1
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: PPUSH
17572: CALL_OW 2
17576: ST_TO_ADDR
17577: GO 17529
17579: POP
17580: POP
// repeat for i := 1 to vehicles do
17581: LD_ADDR_VAR 0 2
17585: PUSH
17586: DOUBLE
17587: LD_INT 1
17589: DEC
17590: ST_TO_ADDR
17591: LD_VAR 0 3
17595: PUSH
17596: FOR_TO
17597: IFFALSE 17635
// if vehicles [ i ] [ 3 ] = 1 then
17599: LD_VAR 0 3
17603: PUSH
17604: LD_VAR 0 2
17608: ARRAY
17609: PUSH
17610: LD_INT 3
17612: ARRAY
17613: PUSH
17614: LD_INT 1
17616: EQUAL
17617: IFFALSE 17633
// goodVehs = goodVehs + 1 ;
17619: LD_ADDR_VAR 0 5
17623: PUSH
17624: LD_VAR 0 5
17628: PUSH
17629: LD_INT 1
17631: PLUS
17632: ST_TO_ADDR
17633: GO 17596
17635: POP
17636: POP
// if goodVehs = vehicles then
17637: LD_VAR 0 5
17641: PUSH
17642: LD_VAR 0 3
17646: EQUAL
17647: IFFALSE 17696
// for i := 1 to vehicles do
17649: LD_ADDR_VAR 0 2
17653: PUSH
17654: DOUBLE
17655: LD_INT 1
17657: DEC
17658: ST_TO_ADDR
17659: LD_VAR 0 3
17663: PUSH
17664: FOR_TO
17665: IFFALSE 17694
// ComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
17667: LD_VAR 0 3
17671: PUSH
17672: LD_VAR 0 2
17676: ARRAY
17677: PUSH
17678: LD_INT 1
17680: ARRAY
17681: PPUSH
17682: LD_INT 26
17684: PPUSH
17685: LD_INT 35
17687: PPUSH
17688: CALL_OW 114
17692: GO 17664
17694: POP
17695: POP
// goodVehs = 0 ;
17696: LD_ADDR_VAR 0 5
17700: PUSH
17701: LD_INT 0
17703: ST_TO_ADDR
// for i := 1 to vehicles do
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: DOUBLE
17710: LD_INT 1
17712: DEC
17713: ST_TO_ADDR
17714: LD_VAR 0 3
17718: PUSH
17719: FOR_TO
17720: IFFALSE 18120
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17722: LD_VAR 0 3
17726: PUSH
17727: LD_VAR 0 2
17731: ARRAY
17732: PUSH
17733: LD_INT 1
17735: ARRAY
17736: PPUSH
17737: CALL_OW 256
17741: PUSH
17742: LD_INT 500
17744: LESS
17745: PUSH
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 2
17755: ARRAY
17756: PUSH
17757: LD_INT 1
17759: ARRAY
17760: PPUSH
17761: LD_INT 78
17763: PPUSH
17764: LD_INT 39
17766: PPUSH
17767: CALL_OW 297
17771: PUSH
17772: LD_INT 9
17774: LESS
17775: NOT
17776: AND
17777: IFFALSE 17842
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_VAR 0 2
17793: PUSH
17794: LD_VAR 0 3
17798: PUSH
17799: LD_VAR 0 2
17803: ARRAY
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PPUSH
17809: LD_INT 2
17811: PPUSH
17812: CALL 33573 0 3
17816: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
17817: LD_VAR 0 3
17821: PUSH
17822: LD_VAR 0 2
17826: ARRAY
17827: PUSH
17828: LD_INT 1
17830: ARRAY
17831: PPUSH
17832: LD_INT 78
17834: PPUSH
17835: LD_INT 39
17837: PPUSH
17838: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
17842: LD_VAR 0 3
17846: PUSH
17847: LD_VAR 0 2
17851: ARRAY
17852: PUSH
17853: LD_INT 1
17855: ARRAY
17856: PPUSH
17857: CALL_OW 256
17861: PUSH
17862: LD_INT 500
17864: LESS
17865: PUSH
17866: LD_VAR 0 3
17870: PUSH
17871: LD_VAR 0 2
17875: ARRAY
17876: PUSH
17877: LD_INT 1
17879: ARRAY
17880: PPUSH
17881: LD_INT 78
17883: PPUSH
17884: LD_INT 39
17886: PPUSH
17887: CALL_OW 297
17891: PUSH
17892: LD_INT 9
17894: LESS
17895: AND
17896: IFFALSE 17951
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
17898: LD_VAR 0 3
17902: PUSH
17903: LD_VAR 0 2
17907: ARRAY
17908: PUSH
17909: LD_INT 2
17911: ARRAY
17912: PPUSH
17913: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
17917: LD_VAR 0 3
17921: PUSH
17922: LD_VAR 0 2
17926: ARRAY
17927: PUSH
17928: LD_INT 2
17930: ARRAY
17931: PPUSH
17932: LD_VAR 0 3
17936: PUSH
17937: LD_VAR 0 2
17941: ARRAY
17942: PUSH
17943: LD_INT 1
17945: ARRAY
17946: PPUSH
17947: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
17951: LD_VAR 0 3
17955: PUSH
17956: LD_VAR 0 2
17960: ARRAY
17961: PUSH
17962: LD_INT 1
17964: ARRAY
17965: PPUSH
17966: CALL_OW 256
17970: PUSH
17971: LD_INT 1000
17973: EQUAL
17974: PUSH
17975: LD_VAR 0 3
17979: PUSH
17980: LD_VAR 0 2
17984: ARRAY
17985: PUSH
17986: LD_INT 3
17988: ARRAY
17989: PUSH
17990: LD_INT 2
17992: EQUAL
17993: AND
17994: IFFALSE 18068
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 3
18005: PPUSH
18006: LD_VAR 0 2
18010: PUSH
18011: LD_VAR 0 3
18015: PUSH
18016: LD_VAR 0 2
18020: ARRAY
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: LD_INT 1
18028: PPUSH
18029: CALL 33573 0 3
18033: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18034: LD_VAR 0 3
18038: PUSH
18039: LD_VAR 0 2
18043: ARRAY
18044: PUSH
18045: LD_INT 2
18047: ARRAY
18048: PPUSH
18049: LD_VAR 0 3
18053: PUSH
18054: LD_VAR 0 2
18058: ARRAY
18059: PUSH
18060: LD_INT 1
18062: ARRAY
18063: PPUSH
18064: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18068: LD_VAR 0 3
18072: PUSH
18073: LD_VAR 0 2
18077: ARRAY
18078: PUSH
18079: LD_INT 1
18081: ARRAY
18082: PPUSH
18083: CALL_OW 256
18087: PUSH
18088: LD_INT 250
18090: LESS
18091: IFFALSE 18118
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18093: LD_ADDR_VAR 0 3
18097: PUSH
18098: LD_VAR 0 3
18102: PUSH
18103: LD_VAR 0 3
18107: PUSH
18108: LD_VAR 0 2
18112: ARRAY
18113: PUSH
18114: EMPTY
18115: LIST
18116: DIFF
18117: ST_TO_ADDR
// end ;
18118: GO 17719
18120: POP
18121: POP
// wait ( 0 0$1 ) ;
18122: LD_INT 35
18124: PPUSH
18125: CALL_OW 67
// until omicronSurrender ;
18129: LD_EXP 23
18133: IFFALSE 17581
// end ;
18135: LD_VAR 0 1
18139: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
18144: PPUSH
18145: PPUSH
18146: PPUSH
18147: PPUSH
18148: PPUSH
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
18153: PPUSH
18154: PPUSH
18155: PPUSH
// inBase = false ;
18156: LD_ADDR_VAR 0 15
18160: PUSH
18161: LD_INT 0
18163: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18164: LD_ADDR_VAR 0 8
18168: PUSH
18169: LD_VAR 0 2
18173: PPUSH
18174: LD_INT 22
18176: PUSH
18177: LD_INT 3
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: PPUSH
18187: CALL_OW 70
18191: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18192: LD_ADDR_VAR 0 9
18196: PUSH
18197: LD_VAR 0 2
18201: PPUSH
18202: CALL_OW 435
18206: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18207: LD_ADDR_VAR 0 12
18211: PUSH
18212: LD_VAR 0 1
18216: PPUSH
18217: LD_INT 50
18219: PUSH
18220: EMPTY
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 25
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 25
18238: PUSH
18239: LD_INT 3
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 21
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PPUSH
18266: CALL_OW 72
18270: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18271: LD_ADDR_VAR 0 13
18275: PUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 50
18283: PUSH
18284: EMPTY
18285: LIST
18286: PUSH
18287: LD_INT 25
18289: PUSH
18290: LD_INT 4
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PPUSH
18301: CALL_OW 72
18305: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18306: LD_ADDR_VAR 0 14
18310: PUSH
18311: LD_VAR 0 1
18315: PPUSH
18316: LD_INT 3
18318: PUSH
18319: LD_INT 24
18321: PUSH
18322: LD_INT 1000
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PPUSH
18333: CALL_OW 72
18337: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18338: LD_ADDR_VAR 0 6
18342: PUSH
18343: LD_INT 22
18345: PUSH
18346: LD_INT 3
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: PPUSH
18356: CALL_OW 69
18360: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18361: LD_ADDR_VAR 0 5
18365: PUSH
18366: LD_VAR 0 1
18370: PPUSH
18371: LD_INT 50
18373: PUSH
18374: EMPTY
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: PPUSH
18380: CALL_OW 72
18384: PUSH
18385: FOR_IN
18386: IFFALSE 18724
// begin if attackUnits and medics then
18388: LD_VAR 0 12
18392: PUSH
18393: LD_VAR 0 13
18397: AND
18398: IFFALSE 18465
// begin if damageUnits then
18400: LD_VAR 0 14
18404: IFFALSE 18426
// ComHeal ( medics , damageUnits [ 1 ] ) else
18406: LD_VAR 0 13
18410: PPUSH
18411: LD_VAR 0 14
18415: PUSH
18416: LD_INT 1
18418: ARRAY
18419: PPUSH
18420: CALL_OW 128
18424: GO 18463
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18426: LD_VAR 0 13
18430: PPUSH
18431: LD_VAR 0 12
18435: PUSH
18436: LD_INT 1
18438: ARRAY
18439: PPUSH
18440: CALL_OW 250
18444: PPUSH
18445: LD_VAR 0 12
18449: PUSH
18450: LD_INT 1
18452: ARRAY
18453: PPUSH
18454: CALL_OW 251
18458: PPUSH
18459: CALL_OW 111
// end else
18463: GO 18494
// begin if not attackUnits and medics then
18465: LD_VAR 0 12
18469: NOT
18470: PUSH
18471: LD_VAR 0 13
18475: AND
18476: IFFALSE 18494
// attackUnits = attackUnits ^ medics ;
18478: LD_ADDR_VAR 0 12
18482: PUSH
18483: LD_VAR 0 12
18487: PUSH
18488: LD_VAR 0 13
18492: ADD
18493: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
18494: LD_ADDR_VAR 0 4
18498: PUSH
18499: DOUBLE
18500: LD_INT 1
18502: DEC
18503: ST_TO_ADDR
18504: LD_VAR 0 9
18508: PUSH
18509: LD_INT 2
18511: DIVREAL
18512: PUSH
18513: FOR_TO
18514: IFFALSE 18553
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
18516: LD_VAR 0 12
18520: PPUSH
18521: LD_VAR 0 9
18525: PUSH
18526: LD_VAR 0 4
18530: ARRAY
18531: PPUSH
18532: LD_VAR 0 9
18536: PUSH
18537: LD_VAR 0 4
18541: PUSH
18542: LD_INT 1
18544: PLUS
18545: ARRAY
18546: PPUSH
18547: CALL_OW 176
18551: GO 18513
18553: POP
18554: POP
// if enemyUnitsOnRoad then
18555: LD_VAR 0 8
18559: IFFALSE 18678
// begin for playerUnit in playerUnits do
18561: LD_ADDR_VAR 0 7
18565: PUSH
18566: LD_VAR 0 6
18570: PUSH
18571: FOR_IN
18572: IFFALSE 18674
// begin if Attacks ( playerUnit ) then
18574: LD_VAR 0 7
18578: PPUSH
18579: CALL_OW 320
18583: IFFALSE 18638
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
18585: LD_VAR 0 7
18589: PPUSH
18590: CALL_OW 320
18594: PUSH
18595: LD_VAR 0 1
18599: IN
18600: PUSH
18601: LD_VAR 0 7
18605: PPUSH
18606: LD_VAR 0 5
18610: PPUSH
18611: CALL_OW 296
18615: PUSH
18616: LD_INT 13
18618: LESS
18619: AND
18620: IFFALSE 18636
// ComAttackUnit ( attackUnits , playerUnit ) end else
18622: LD_VAR 0 12
18626: PPUSH
18627: LD_VAR 0 7
18631: PPUSH
18632: CALL_OW 115
18636: GO 18672
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
18638: LD_ADDR_VAR 0 10
18642: PUSH
18643: LD_VAR 0 8
18647: PPUSH
18648: LD_VAR 0 5
18652: PPUSH
18653: CALL_OW 74
18657: ST_TO_ADDR
// ComAttackUnit ( attackUnits , nearUnit ) ;
18658: LD_VAR 0 12
18662: PPUSH
18663: LD_VAR 0 10
18667: PPUSH
18668: CALL_OW 115
// end ; end ;
18672: GO 18571
18674: POP
18675: POP
// end else
18676: GO 18693
// begin ComMoveXY ( unit , 27 , 34 ) ;
18678: LD_VAR 0 5
18682: PPUSH
18683: LD_INT 27
18685: PPUSH
18686: LD_INT 34
18688: PPUSH
18689: CALL_OW 111
// end ; if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
18693: LD_VAR 0 5
18697: PPUSH
18698: LD_INT 27
18700: PPUSH
18701: LD_INT 34
18703: PPUSH
18704: CALL_OW 297
18708: PUSH
18709: LD_INT 5
18711: LESS
18712: IFFALSE 18722
// inBase = true ;
18714: LD_ADDR_VAR 0 15
18718: PUSH
18719: LD_INT 1
18721: ST_TO_ADDR
// end ;
18722: GO 18385
18724: POP
18725: POP
// wait ( 0 0$1 ) ;
18726: LD_INT 35
18728: PPUSH
18729: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
18733: LD_VAR 0 1
18737: PPUSH
18738: LD_INT 50
18740: PUSH
18741: EMPTY
18742: LIST
18743: PPUSH
18744: CALL_OW 72
18748: PUSH
18749: LD_INT 0
18751: EQUAL
18752: PUSH
18753: LD_VAR 0 15
18757: OR
18758: IFFALSE 18164
// ComMoveXY ( units , 27 , 34 ) ;
18760: LD_VAR 0 1
18764: PPUSH
18765: LD_INT 27
18767: PPUSH
18768: LD_INT 34
18770: PPUSH
18771: CALL_OW 111
// for i := 1 to units do
18775: LD_ADDR_VAR 0 4
18779: PUSH
18780: DOUBLE
18781: LD_INT 1
18783: DEC
18784: ST_TO_ADDR
18785: LD_VAR 0 1
18789: PUSH
18790: FOR_TO
18791: IFFALSE 18826
// if IsOk ( units [ i ] ) then
18793: LD_VAR 0 1
18797: PUSH
18798: LD_VAR 0 4
18802: ARRAY
18803: PPUSH
18804: CALL_OW 302
18808: IFFALSE 18824
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
18810: LD_ADDR_EXP 12
18814: PUSH
18815: LD_EXP 12
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: ST_TO_ADDR
18824: GO 18790
18826: POP
18827: POP
// amSupportTroops = amSupportTroops diff units ;
18828: LD_ADDR_EXP 81
18832: PUSH
18833: LD_EXP 81
18837: PUSH
18838: LD_VAR 0 1
18842: DIFF
18843: ST_TO_ADDR
// newBase = amBase ;
18844: LD_ADDR_VAR 0 16
18848: PUSH
18849: LD_EXP 83
18853: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
18854: LD_ADDR_VAR 0 16
18858: PUSH
18859: LD_VAR 0 16
18863: PUSH
18864: LD_VAR 0 1
18868: PPUSH
18869: LD_INT 50
18871: PUSH
18872: EMPTY
18873: LIST
18874: PPUSH
18875: CALL_OW 72
18879: ADD
18880: ST_TO_ADDR
// amBase = newBase ;
18881: LD_ADDR_EXP 83
18885: PUSH
18886: LD_VAR 0 16
18890: ST_TO_ADDR
// end ; end_of_file
18891: LD_VAR 0 3
18895: RET
// export function Lose_Burlak ; begin
18896: LD_INT 0
18898: PPUSH
// YouLost ( Burlak ) ;
18899: LD_STRING Burlak
18901: PPUSH
18902: CALL_OW 104
// end ;
18906: LD_VAR 0 1
18910: RET
// export function Lose_Omicron ; begin
18911: LD_INT 0
18913: PPUSH
// YouLost ( Omicron ) ;
18914: LD_STRING Omicron
18916: PPUSH
18917: CALL_OW 104
// end ;
18921: LD_VAR 0 1
18925: RET
// export function Lose_Vehicles ; begin
18926: LD_INT 0
18928: PPUSH
// YouLost ( Vehicles ) ;
18929: LD_STRING Vehicles
18931: PPUSH
18932: CALL_OW 104
// end ;
18936: LD_VAR 0 1
18940: RET
// export function Lose_SelfAttack ; begin
18941: LD_INT 0
18943: PPUSH
// YouLost ( SelfAttack ) ;
18944: LD_STRING SelfAttack
18946: PPUSH
18947: CALL_OW 104
// end ;
18951: LD_VAR 0 1
18955: RET
// export function Lose_Delay ; begin
18956: LD_INT 0
18958: PPUSH
// YouLost ( Delay ) ;
18959: LD_STRING Delay
18961: PPUSH
18962: CALL_OW 104
// end ; end_of_file
18966: LD_VAR 0 1
18970: RET
// export function FinishMission ; begin
18971: LD_INT 0
18973: PPUSH
// SetRewards ;
18974: CALL 18995 0 0
// SavePlayerCharacters ;
18978: CALL 19209 0 0
// SaveGlobalVariables ;
18982: CALL 19538 0 0
// YouWin ;
18986: CALL_OW 103
// end ;
18990: LD_VAR 0 1
18994: RET
// function SetRewards ; var unitsToReward ; begin
18995: LD_INT 0
18997: PPUSH
18998: PPUSH
// if produceMoreVehicles then
18999: LD_EXP 16
19003: IFFALSE 19017
// AddMedal ( Surplus , 1 ) else
19005: LD_STRING Surplus
19007: PPUSH
19008: LD_INT 1
19010: PPUSH
19011: CALL_OW 101
19015: GO 19047
// if produceOnlyForYou then
19017: LD_EXP 17
19021: IFFALSE 19036
// AddMedal ( Surplus , - 1 ) else
19023: LD_STRING Surplus
19025: PPUSH
19026: LD_INT 1
19028: NEG
19029: PPUSH
19030: CALL_OW 101
19034: GO 19047
// AddMedal ( Surplus , - 2 ) ;
19036: LD_STRING Surplus
19038: PPUSH
19039: LD_INT 2
19041: NEG
19042: PPUSH
19043: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
19047: LD_EXP 12
19051: PUSH
19052: LD_EXP 44
19056: LESS
19057: IFFALSE 19071
// AddMedal ( PreventReinforcements , 1 ) else
19059: LD_STRING PreventReinforcements
19061: PPUSH
19062: LD_INT 1
19064: PPUSH
19065: CALL_OW 101
19069: GO 19082
// AddMedal ( PreventReinforcements , - 1 ) ;
19071: LD_STRING PreventReinforcements
19073: PPUSH
19074: LD_INT 1
19076: NEG
19077: PPUSH
19078: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
19082: LD_EXP 7
19086: PUSH
19087: LD_EXP 52
19091: PPUSH
19092: CALL_OW 302
19096: AND
19097: IFFALSE 19111
// AddMedal ( Scholtze , 1 ) else
19099: LD_STRING Scholtze
19101: PPUSH
19102: LD_INT 1
19104: PPUSH
19105: CALL_OW 101
19109: GO 19122
// AddMedal ( Scholtze , - 1 ) ;
19111: LD_STRING Scholtze
19113: PPUSH
19114: LD_INT 1
19116: NEG
19117: PPUSH
19118: CALL_OW 101
// GiveMedals ( Main ) ;
19122: LD_STRING Main
19124: PPUSH
19125: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
19129: LD_ADDR_VAR 0 2
19133: PUSH
19134: LD_INT 22
19136: PUSH
19137: LD_INT 3
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 21
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
19163: LD_ADDR_VAR 0 2
19167: PUSH
19168: LD_VAR 0 2
19172: PUSH
19173: LD_EXP 76
19177: ADD
19178: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
19179: LD_ADDR_VAR 0 2
19183: PUSH
19184: LD_VAR 0 2
19188: PUSH
19189: LD_EXP 59
19193: DIFF
19194: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
19195: LD_VAR 0 2
19199: PPUSH
19200: CALL_OW 43
// end ;
19204: LD_VAR 0 1
19208: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
19209: LD_INT 0
19211: PPUSH
19212: PPUSH
19213: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19214: LD_EXP 46
19218: PPUSH
19219: LD_STRING Burlak
19221: PPUSH
19222: LD_INT 3
19224: PPUSH
19225: CALL 7106 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19229: LD_EXP 47
19233: PPUSH
19234: LD_STRING Gnyevko
19236: PPUSH
19237: LD_INT 3
19239: PPUSH
19240: CALL 7106 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19244: LD_EXP 49
19248: PPUSH
19249: LD_STRING Kovalyuk
19251: PPUSH
19252: LD_INT 3
19254: PPUSH
19255: CALL 7106 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19259: LD_EXP 48
19263: PPUSH
19264: LD_STRING Kirilenkova
19266: PPUSH
19267: LD_INT 3
19269: PPUSH
19270: CALL 7106 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
19274: LD_EXP 52
19278: PPUSH
19279: LD_STRING Scholtze
19281: PPUSH
19282: LD_INT 3
19284: PPUSH
19285: CALL 7106 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19289: LD_EXP 50
19293: PPUSH
19294: LD_STRING Belkov
19296: PPUSH
19297: LD_INT 3
19299: PPUSH
19300: CALL 7106 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19304: LD_EXP 51
19308: PPUSH
19309: LD_STRING Belkov2
19311: PPUSH
19312: LD_INT 3
19314: PPUSH
19315: CALL 7106 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
19319: LD_EXP 50
19323: PPUSH
19324: LD_STRING Belkov
19326: PPUSH
19327: LD_INT 6
19329: PPUSH
19330: CALL 7106 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
19334: LD_EXP 51
19338: PPUSH
19339: LD_STRING Belkov2
19341: PPUSH
19342: LD_INT 6
19344: PPUSH
19345: CALL 7106 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
19349: LD_ADDR_VAR 0 2
19353: PUSH
19354: LD_INT 22
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 21
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 50
19376: PUSH
19377: EMPTY
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: PPUSH
19385: CALL_OW 69
19389: PUSH
19390: LD_EXP 46
19394: PUSH
19395: LD_EXP 47
19399: PUSH
19400: LD_EXP 50
19404: PUSH
19405: LD_EXP 51
19409: PUSH
19410: LD_EXP 49
19414: PUSH
19415: LD_EXP 48
19419: PUSH
19420: LD_EXP 52
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: DIFF
19434: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19435: LD_VAR 0 2
19439: PPUSH
19440: LD_STRING other_survivors
19442: PPUSH
19443: LD_INT 3
19445: PPUSH
19446: CALL 7162 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
19450: LD_ADDR_VAR 0 3
19454: PUSH
19455: LD_INT 22
19457: PUSH
19458: LD_INT 6
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 1
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 50
19477: PUSH
19478: EMPTY
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 69
19490: PUSH
19491: LD_EXP 58
19495: PUSH
19496: LD_EXP 59
19500: PUSH
19501: LD_EXP 50
19505: PUSH
19506: LD_EXP 51
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: DIFF
19517: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
19518: LD_VAR 0 3
19522: PPUSH
19523: LD_STRING other_kirov
19525: PPUSH
19526: LD_INT 6
19528: PPUSH
19529: CALL 7162 0 3
// end ;
19533: LD_VAR 0 1
19537: RET
// function SaveGlobalVariables ; begin
19538: LD_INT 0
19540: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
19541: LD_EXP 26
19545: PPUSH
19546: LD_STRING 03_KurinOpinion_1
19548: PPUSH
19549: CALL_OW 39
// end ; end_of_file
19553: LD_VAR 0 1
19557: RET
// export function CustomEvent ( event ) ; begin
19558: LD_INT 0
19560: PPUSH
// end ;
19561: LD_VAR 0 2
19565: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
19566: LD_INT 0
19568: PPUSH
19569: PPUSH
19570: PPUSH
19571: PPUSH
19572: PPUSH
19573: PPUSH
19574: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
19575: LD_ADDR_VAR 0 2
19579: PUSH
19580: LD_INT 22
19582: PUSH
19583: LD_INT 3
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: LD_INT 21
19592: PUSH
19593: LD_INT 1
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PPUSH
19604: CALL_OW 69
19608: PUSH
19609: FOR_IN
19610: IFFALSE 19807
// if GetTaskList ( i ) > 0 then
19612: LD_VAR 0 2
19616: PPUSH
19617: CALL_OW 437
19621: PUSH
19622: LD_INT 0
19624: GREATER
19625: IFFALSE 19805
// for j = 1 to GetTaskList ( i ) do
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: DOUBLE
19633: LD_INT 1
19635: DEC
19636: ST_TO_ADDR
19637: LD_VAR 0 2
19641: PPUSH
19642: CALL_OW 437
19646: PUSH
19647: FOR_TO
19648: IFFALSE 19803
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
19650: LD_ADDR_VAR 0 4
19654: PUSH
19655: LD_VAR 0 2
19659: PPUSH
19660: CALL_OW 437
19664: PUSH
19665: LD_VAR 0 3
19669: ARRAY
19670: PUSH
19671: LD_INT 4
19673: ARRAY
19674: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
19675: LD_ADDR_VAR 0 8
19679: PUSH
19680: LD_VAR 0 2
19684: PPUSH
19685: CALL_OW 437
19689: PUSH
19690: LD_VAR 0 3
19694: ARRAY
19695: PUSH
19696: LD_INT 5
19698: ARRAY
19699: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
19700: LD_ADDR_VAR 0 6
19704: PUSH
19705: LD_VAR 0 2
19709: PPUSH
19710: CALL_OW 437
19714: PUSH
19715: LD_VAR 0 3
19719: ARRAY
19720: PUSH
19721: LD_INT 2
19723: ARRAY
19724: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
19725: LD_ADDR_VAR 0 7
19729: PUSH
19730: LD_VAR 0 2
19734: PPUSH
19735: CALL_OW 437
19739: PUSH
19740: LD_VAR 0 3
19744: ARRAY
19745: PUSH
19746: LD_INT 3
19748: ARRAY
19749: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 255
19759: PUSH
19760: LD_INT 6
19762: EQUAL
19763: PUSH
19764: LD_VAR 0 2
19768: PPUSH
19769: CALL_OW 437
19773: PUSH
19774: LD_VAR 0 3
19778: ARRAY
19779: PUSH
19780: LD_INT 1
19782: ARRAY
19783: PUSH
19784: LD_STRING <
19786: EQUAL
19787: AND
19788: IFFALSE 19801
// SetTaskList ( i , [ ] ) ;
19790: LD_VAR 0 2
19794: PPUSH
19795: EMPTY
19796: PPUSH
19797: CALL_OW 446
// end ;
19801: GO 19647
19803: POP
19804: POP
19805: GO 19609
19807: POP
19808: POP
// end ;
19809: PPOPN 8
19811: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
19812: LD_VAR 0 2
19816: PUSH
19817: LD_INT 6
19819: EQUAL
19820: IFFALSE 19834
// SetSide ( building , 6 ) ;
19822: LD_VAR 0 1
19826: PPUSH
19827: LD_INT 6
19829: PPUSH
19830: CALL_OW 235
// end ;
19834: PPOPN 3
19836: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
19837: LD_INT 0
19839: PPUSH
19840: PPUSH
// begin diffUnits = [ ] ;
19841: LD_ADDR_VAR 0 2
19845: PUSH
19846: EMPTY
19847: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
19848: LD_VAR 0 1
19852: PPUSH
19853: CALL_OW 255
19857: PUSH
19858: LD_INT 3
19860: EQUAL
19861: PUSH
19862: LD_VAR 0 1
19866: PPUSH
19867: CALL_OW 266
19871: PUSH
19872: LD_INT 0
19874: EQUAL
19875: AND
19876: PUSH
19877: LD_VAR 0 1
19881: PPUSH
19882: LD_INT 21
19884: PPUSH
19885: CALL_OW 308
19889: AND
19890: IFFALSE 19904
// SetBName ( building , kagan ) ;
19892: LD_VAR 0 1
19896: PPUSH
19897: LD_STRING kagan
19899: PPUSH
19900: CALL_OW 500
// if GetSide ( building ) = 6 then
19904: LD_VAR 0 1
19908: PPUSH
19909: CALL_OW 255
19913: PUSH
19914: LD_INT 6
19916: EQUAL
19917: IFFALSE 20157
// begin if GetBType ( building ) = b_ext_noncombat then
19919: LD_VAR 0 1
19923: PPUSH
19924: CALL_OW 266
19928: PUSH
19929: LD_INT 19
19931: EQUAL
19932: IFFALSE 19997
// begin SpawnKirovSupport ;
19934: CALL 4478 0 0
// MountWeaponTurrent ;
19938: CALL 16965 0 0
// wait ( 3 3$30 ) ;
19942: LD_INT 7350
19944: PPUSH
19945: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
19949: LD_INT 22
19951: PUSH
19952: LD_INT 6
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 21
19961: PUSH
19962: LD_INT 3
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 30
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: PPUSH
19984: CALL_OW 69
19988: PUSH
19989: LD_INT 1
19991: ARRAY
19992: PPUSH
19993: CALL 17035 0 1
// end ; if GetBType ( building ) = b_depot then
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 266
20006: PUSH
20007: LD_INT 0
20009: EQUAL
20010: IFFALSE 20056
// begin kirovOilDepot = building ;
20012: LD_ADDR_EXP 65
20016: PUSH
20017: LD_VAR 0 1
20021: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
20022: LD_EXP 65
20026: PPUSH
20027: CALL_OW 274
20031: PPUSH
20032: LD_INT 2
20034: PPUSH
20035: LD_INT 3000
20037: PPUSH
20038: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
20042: LD_EXP 79
20046: PPUSH
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 266
20065: PUSH
20066: LD_INT 31
20068: EQUAL
20069: PUSH
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 266
20079: PUSH
20080: LD_INT 4
20082: EQUAL
20083: OR
20084: PUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: LD_INT 20
20092: PPUSH
20093: CALL_OW 308
20097: AND
20098: IFFALSE 20157
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
20100: LD_EXP 75
20104: PPUSH
20105: LD_INT 25
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 56
20117: PUSH
20118: EMPTY
20119: LIST
20120: PUSH
20121: LD_INT 3
20123: PUSH
20124: LD_INT 60
20126: PUSH
20127: EMPTY
20128: LIST
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: LIST
20138: PPUSH
20139: CALL_OW 72
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: LD_VAR 0 1
20152: PPUSH
20153: CALL_OW 120
// end ; end ;
20157: PPOPN 3
20159: END
// on UpgradeComplete ( building ) do var i , tmp ;
20160: LD_INT 0
20162: PPUSH
20163: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
20164: LD_VAR 0 1
20168: PPUSH
20169: CALL_OW 255
20173: PUSH
20174: LD_INT 3
20176: EQUAL
20177: PUSH
20178: LD_VAR 0 1
20182: PPUSH
20183: CALL_OW 266
20187: PUSH
20188: LD_INT 3
20190: EQUAL
20191: AND
20192: PUSH
20193: LD_EXP 8
20197: NOT
20198: AND
20199: IFFALSE 20210
// Dial_UpgradeWorkshop ( building ) ;
20201: LD_VAR 0 1
20205: PPUSH
20206: CALL 23028 0 1
// end ;
20210: PPOPN 3
20212: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
20213: LD_VAR 0 1
20217: PUSH
20218: LD_EXP 46
20222: EQUAL
20223: IFFALSE 20229
// Lose_Burlak ;
20225: CALL 18896 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
20229: LD_VAR 0 1
20233: PUSH
20234: LD_EXP 57
20238: EQUAL
20239: PUSH
20240: LD_EXP 28
20244: NOT
20245: AND
20246: IFFALSE 20252
// Lose_Omicron ;
20248: CALL 18911 0 0
// end ;
20252: PPOPN 1
20254: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
20255: LD_VAR 0 1
20259: PUSH
20260: LD_INT 3
20262: EQUAL
20263: PUSH
20264: LD_VAR 0 2
20268: PUSH
20269: LD_INT 6
20271: EQUAL
20272: AND
20273: IFFALSE 20279
// Lose_SelfAttack ;
20275: CALL 18941 0 0
// end ;
20279: PPOPN 2
20281: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
20282: LD_VAR 0 1
20286: PPUSH
20287: CALL_OW 255
20291: PUSH
20292: LD_INT 6
20294: EQUAL
20295: IFFALSE 20460
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
20297: LD_VAR 0 1
20301: PPUSH
20302: CALL_OW 264
20306: PUSH
20307: LD_INT 51
20309: EQUAL
20310: PUSH
20311: LD_EXP 71
20315: NOT
20316: AND
20317: IFFALSE 20331
// kirovTransportCargo = vehicle else
20319: LD_ADDR_EXP 71
20323: PUSH
20324: LD_VAR 0 1
20328: ST_TO_ADDR
20329: GO 20403
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
20331: LD_VAR 0 1
20335: PPUSH
20336: CALL_OW 264
20340: PUSH
20341: LD_INT 51
20343: EQUAL
20344: IFFALSE 20403
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
20346: LD_VAR 0 1
20350: PPUSH
20351: LD_EXP 65
20355: PPUSH
20356: LD_INT 2
20358: PPUSH
20359: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
20363: LD_VAR 0 1
20367: PPUSH
20368: LD_INT 137
20370: PPUSH
20371: LD_INT 99
20373: PPUSH
20374: CALL_OW 171
// AddComHold ( vehicle ) ;
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
20387: LD_ADDR_EXP 72
20391: PUSH
20392: LD_EXP 72
20396: PUSH
20397: LD_VAR 0 1
20401: ADD
20402: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 264
20412: PUSH
20413: LD_INT 42
20415: PUSH
20416: LD_INT 43
20418: PUSH
20419: LD_INT 44
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: IN
20427: IFFALSE 20460
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
20429: LD_ADDR_EXP 73
20433: PUSH
20434: LD_EXP 73
20438: PUSH
20439: LD_VAR 0 1
20443: ADD
20444: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
20445: LD_VAR 0 1
20449: PPUSH
20450: LD_INT 137
20452: PPUSH
20453: LD_INT 99
20455: PPUSH
20456: CALL_OW 111
// end ; end ; end ;
20460: PPOPN 2
20462: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 then
20463: LD_VAR 0 3
20467: PUSH
20468: LD_INT 6
20470: EQUAL
20471: IFFALSE 20494
// begin ComExitVehicle ( capturing_unit ) ;
20473: LD_VAR 0 4
20477: PPUSH
20478: CALL_OW 121
// SetSide ( new , 6 ) ;
20482: LD_VAR 0 1
20486: PPUSH
20487: LD_INT 6
20489: PPUSH
20490: CALL_OW 235
// end ; end ;
20494: PPOPN 4
20496: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
20497: LD_VAR 0 1
20501: PPUSH
20502: CALL_OW 255
20506: PUSH
20507: LD_INT 6
20509: EQUAL
20510: PUSH
20511: LD_EXP 19
20515: AND
20516: IFFALSE 20544
// begin wait ( 0 0$2 ) ;
20518: LD_INT 70
20520: PPUSH
20521: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
20525: LD_VAR 0 1
20529: PPUSH
20530: LD_INT 78
20532: PPUSH
20533: LD_INT 39
20535: PPUSH
20536: CALL_OW 174
// KirovAttackOmicron ;
20540: CALL 17505 0 0
// end ; end ; end_of_file
20544: PPOPN 2
20546: END
// export function MissionIntro ; var unit ; begin
20547: LD_INT 0
20549: PPUSH
20550: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20551: LD_EXP 46
20555: PUSH
20556: LD_EXP 58
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PPUSH
20565: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
20569: LD_EXP 46
20573: PUSH
20574: LD_EXP 60
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PPUSH
20583: LD_EXP 58
20587: PPUSH
20588: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
20592: LD_EXP 58
20596: PPUSH
20597: LD_EXP 46
20601: PPUSH
20602: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
20606: LD_INT 3
20608: PPUSH
20609: LD_INT 24
20611: PPUSH
20612: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
20616: LD_EXP 50
20620: PPUSH
20621: CALL_OW 305
20625: NOT
20626: PUSH
20627: LD_EXP 51
20631: PPUSH
20632: CALL_OW 305
20636: NOT
20637: AND
20638: IFFALSE 20726
// begin Say ( Kurin , D1a-Kur-1 ) ;
20640: LD_EXP 58
20644: PPUSH
20645: LD_STRING D1a-Kur-1
20647: PPUSH
20648: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
20652: LD_EXP 46
20656: PPUSH
20657: LD_STRING D1a-Bur-1
20659: PPUSH
20660: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
20664: LD_EXP 58
20668: PPUSH
20669: LD_STRING D1a-Kur-2
20671: PPUSH
20672: CALL_OW 88
// if platonovOpinion <= 1 then
20676: LD_EXP 27
20680: PUSH
20681: LD_INT 1
20683: LESSEQUAL
20684: IFFALSE 20700
// Say ( Kurin , D1a-Kur-2a ) else
20686: LD_EXP 58
20690: PPUSH
20691: LD_STRING D1a-Kur-2a
20693: PPUSH
20694: CALL_OW 88
20698: GO 20712
// Say ( Kurin , D1a-Kur-2b ) ;
20700: LD_EXP 58
20704: PPUSH
20705: LD_STRING D1a-Kur-2b
20707: PPUSH
20708: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
20712: LD_EXP 46
20716: PPUSH
20717: LD_STRING D1a-Bur-2
20719: PPUSH
20720: CALL_OW 88
// end else
20724: GO 20762
// begin Say ( Kurin , D1b-Kur-1 ) ;
20726: LD_EXP 58
20730: PPUSH
20731: LD_STRING D1b-Kur-1
20733: PPUSH
20734: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
20738: LD_EXP 60
20742: PPUSH
20743: LD_STRING D1b-Bel-1
20745: PPUSH
20746: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
20750: LD_EXP 58
20754: PPUSH
20755: LD_STRING D1b-Kur-2
20757: PPUSH
20758: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
20762: LD_EXP 58
20766: PPUSH
20767: LD_STRING D2-Kur-1
20769: PPUSH
20770: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
20774: LD_EXP 46
20778: PPUSH
20779: LD_STRING D2-Bur-1
20781: PPUSH
20782: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
20786: LD_EXP 58
20790: PPUSH
20791: LD_STRING D2-Kur-2
20793: PPUSH
20794: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
20798: LD_EXP 46
20802: PPUSH
20803: LD_STRING D2-Bur-2
20805: PPUSH
20806: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
20810: LD_EXP 58
20814: PPUSH
20815: LD_STRING D2-Kur-3
20817: PPUSH
20818: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
20822: LD_INT 1
20824: PPUSH
20825: LD_INT 6
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: LD_INT 1
20833: PPUSH
20834: CALL_OW 80
// PrepareAmericansMissionIntro ;
20838: CALL 5535 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
20842: LD_EXP 80
20846: PPUSH
20847: LD_INT 28
20849: PPUSH
20850: LD_INT 35
20852: PPUSH
20853: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
20857: LD_INT 93
20859: PPUSH
20860: LD_INT 36
20862: PPUSH
20863: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
20867: LD_INT 93
20869: PPUSH
20870: LD_INT 36
20872: PPUSH
20873: LD_INT 3
20875: PPUSH
20876: LD_INT 9
20878: NEG
20879: PPUSH
20880: CALL_OW 330
// wait ( 0 0$6 ) ;
20884: LD_INT 210
20886: PPUSH
20887: CALL_OW 67
// CenterOnUnits ( Popov ) ;
20891: LD_EXP 59
20895: PPUSH
20896: CALL_OW 85
// wait ( 0 0$1 ) ;
20900: LD_INT 35
20902: PPUSH
20903: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
20907: LD_EXP 59
20911: PPUSH
20912: LD_STRING D2-Pop-3
20914: PPUSH
20915: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
20919: LD_EXP 46
20923: PUSH
20924: LD_EXP 58
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PPUSH
20933: CALL_OW 87
// wait ( 0 0$1 ) ;
20937: LD_INT 35
20939: PPUSH
20940: CALL_OW 67
// for unit in amIntroUnits do
20944: LD_ADDR_VAR 0 2
20948: PUSH
20949: LD_EXP 80
20953: PUSH
20954: FOR_IN
20955: IFFALSE 20968
// RemoveUnit ( unit ) ;
20957: LD_VAR 0 2
20961: PPUSH
20962: CALL_OW 64
20966: GO 20954
20968: POP
20969: POP
// Say ( Kurin , D2-Kur-4 ) ;
20970: LD_EXP 58
20974: PPUSH
20975: LD_STRING D2-Kur-4
20977: PPUSH
20978: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
20982: LD_EXP 46
20986: PPUSH
20987: LD_STRING D2-Bur-4
20989: PPUSH
20990: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
20994: LD_EXP 58
20998: PPUSH
20999: LD_STRING D2-Kur-5
21001: PPUSH
21002: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
21006: LD_EXP 46
21010: PPUSH
21011: LD_STRING D2-Bur-5
21013: PPUSH
21014: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
21018: LD_EXP 58
21022: PPUSH
21023: LD_STRING D2-Kur-6
21025: PPUSH
21026: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
21030: LD_EXP 47
21034: PPUSH
21035: CALL_OW 305
21039: IFFALSE 21055
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21041: LD_ADDR_EXP 36
21045: PUSH
21046: LD_EXP 36
21050: PUSH
21051: LD_INT 1
21053: MINUS
21054: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
21055: LD_EXP 49
21059: PPUSH
21060: CALL_OW 305
21064: IFFALSE 21080
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21066: LD_ADDR_EXP 36
21070: PUSH
21071: LD_EXP 36
21075: PUSH
21076: LD_INT 1
21078: MINUS
21079: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
21080: LD_EXP 48
21084: PPUSH
21085: CALL_OW 305
21089: IFFALSE 21105
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
21091: LD_ADDR_EXP 36
21095: PUSH
21096: LD_EXP 36
21100: PUSH
21101: LD_INT 1
21103: MINUS
21104: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
21105: LD_EXP 36
21109: PPUSH
21110: CALL 7260 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
21114: LD_INT 93
21116: PPUSH
21117: LD_INT 36
21119: PPUSH
21120: LD_INT 3
21122: PPUSH
21123: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21127: LD_INT 3
21129: PPUSH
21130: LD_INT 24
21132: PPUSH
21133: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
21137: LD_INT 22
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 21
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 69
21165: PPUSH
21166: CALL_OW 122
// wait ( 0 0$1 ) ;
21170: LD_INT 35
21172: PPUSH
21173: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
21177: LD_INT 22
21179: PUSH
21180: LD_INT 3
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 21
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PPUSH
21201: CALL_OW 69
21205: PPUSH
21206: LD_EXP 57
21210: PPUSH
21211: CALL_OW 250
21215: PPUSH
21216: LD_EXP 57
21220: PPUSH
21221: CALL_OW 251
21225: PPUSH
21226: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
21230: LD_INT 35
21232: PPUSH
21233: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
21237: LD_EXP 46
21241: PPUSH
21242: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
21246: LD_EXP 46
21250: PPUSH
21251: LD_EXP 57
21255: PPUSH
21256: CALL_OW 296
21260: PUSH
21261: LD_INT 6
21263: LESS
21264: IFFALSE 21230
// InGameOff ;
21266: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
21270: LD_STRING M1
21272: PPUSH
21273: CALL_OW 337
// SaveForQuickRestart ;
21277: CALL_OW 22
// counterEnable = true ;
21281: LD_ADDR_EXP 86
21285: PUSH
21286: LD_INT 1
21288: ST_TO_ADDR
// counterIndex = 1 ;
21289: LD_ADDR_EXP 87
21293: PUSH
21294: LD_INT 1
21296: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21297: LD_INT 3
21299: PPUSH
21300: LD_INT 24
21302: PPUSH
21303: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
21307: LD_INT 6
21309: PPUSH
21310: LD_INT 22
21312: PUSH
21313: LD_INT 6
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 21
21322: PUSH
21323: LD_INT 3
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 30
21332: PUSH
21333: LD_INT 6
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 69
21349: PUSH
21350: LD_INT 1
21352: ARRAY
21353: PPUSH
21354: LD_INT 3
21356: PPUSH
21357: CALL 8575 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
21361: LD_INT 1
21363: PPUSH
21364: LD_INT 22
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 21
21376: PUSH
21377: LD_INT 3
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 30
21386: PUSH
21387: LD_INT 7
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: PUSH
21404: LD_INT 1
21406: ARRAY
21407: PPUSH
21408: LD_INT 1
21410: PPUSH
21411: CALL 8575 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
21415: LD_INT 18
21417: PPUSH
21418: LD_INT 22
21420: PUSH
21421: LD_INT 6
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 21
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 25
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: PPUSH
21453: CALL_OW 70
21457: PPUSH
21458: LD_INT 17
21460: PPUSH
21461: LD_INT 159
21463: PPUSH
21464: LD_INT 116
21466: PPUSH
21467: LD_INT 0
21469: PPUSH
21470: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
21474: LD_INT 18
21476: PPUSH
21477: LD_INT 22
21479: PUSH
21480: LD_INT 6
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 21
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 25
21499: PUSH
21500: LD_INT 2
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 70
21516: PPUSH
21517: LD_INT 19
21519: PPUSH
21520: LD_INT 161
21522: PPUSH
21523: LD_INT 115
21525: PPUSH
21526: LD_INT 5
21528: PPUSH
21529: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
21533: LD_INT 18
21535: PPUSH
21536: LD_INT 22
21538: PUSH
21539: LD_INT 6
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 21
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 25
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: LIST
21570: PPUSH
21571: CALL_OW 70
21575: PPUSH
21576: LD_EXP 64
21580: PPUSH
21581: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
21585: LD_EXP 76
21589: PPUSH
21590: CALL_OW 139
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
21594: LD_EXP 76
21598: PUSH
21599: LD_EXP 59
21603: DIFF
21604: PPUSH
21605: LD_EXP 66
21609: PPUSH
21610: CALL_OW 180
// ComWalk ( ruScout ) ;
21614: LD_EXP 61
21618: PPUSH
21619: CALL_OW 138
// wait ( 0 0$1 ) ;
21623: LD_INT 35
21625: PPUSH
21626: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
21630: LD_EXP 61
21634: PUSH
21635: LD_EXP 59
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PPUSH
21644: LD_INT 99
21646: PPUSH
21647: LD_INT 37
21649: PPUSH
21650: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
21654: LD_EXP 61
21658: PUSH
21659: LD_EXP 59
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PPUSH
21668: LD_INT 88
21670: PPUSH
21671: LD_INT 60
21673: PPUSH
21674: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
21678: LD_EXP 61
21682: PUSH
21683: LD_EXP 59
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PPUSH
21692: LD_INT 129
21694: PPUSH
21695: LD_INT 99
21697: PPUSH
21698: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
21702: LD_EXP 59
21706: PUSH
21707: LD_EXP 61
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PPUSH
21716: LD_EXP 64
21720: PPUSH
21721: CALL_OW 180
// end ;
21725: LD_VAR 0 1
21729: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
21730: LD_EXP 22
21734: IFFALSE 22006
21736: GO 21738
21738: DISABLE
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
21746: LD_ADDR_VAR 0 4
21750: PUSH
21751: LD_VAR 0 4
21755: PUSH
21756: LD_EXP 58
21760: ADD
21761: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
21762: LD_ADDR_VAR 0 4
21766: PUSH
21767: LD_VAR 0 4
21771: PUSH
21772: LD_EXP 76
21776: ADD
21777: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
21778: LD_ADDR_VAR 0 4
21782: PUSH
21783: LD_VAR 0 4
21787: PUSH
21788: LD_EXP 68
21792: ADD
21793: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
21794: LD_ADDR_VAR 0 5
21798: PUSH
21799: LD_INT 18
21801: PPUSH
21802: LD_INT 22
21804: PUSH
21805: LD_INT 6
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 21
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PPUSH
21826: CALL_OW 70
21830: PUSH
21831: LD_VAR 0 4
21835: DIFF
21836: ST_TO_ADDR
// pom = 6 ;
21837: LD_ADDR_VAR 0 3
21841: PUSH
21842: LD_INT 6
21844: ST_TO_ADDR
// if canTakeUnits then
21845: LD_VAR 0 5
21849: IFFALSE 21973
// for i = 1 to canTakeUnits do
21851: LD_ADDR_VAR 0 1
21855: PUSH
21856: DOUBLE
21857: LD_INT 1
21859: DEC
21860: ST_TO_ADDR
21861: LD_VAR 0 5
21865: PUSH
21866: FOR_TO
21867: IFFALSE 21971
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
21869: LD_VAR 0 5
21873: PUSH
21874: LD_VAR 0 1
21878: ARRAY
21879: PPUSH
21880: CALL_OW 257
21884: PUSH
21885: LD_INT 3
21887: NONEQUAL
21888: IFFALSE 21935
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
21890: LD_VAR 0 5
21894: PUSH
21895: LD_VAR 0 1
21899: ARRAY
21900: PPUSH
21901: LD_EXP 21
21905: PPUSH
21906: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
21910: LD_VAR 0 5
21914: PUSH
21915: LD_VAR 0 1
21919: ARRAY
21920: PPUSH
21921: LD_INT 1
21923: PPUSH
21924: CALL_OW 183
// wait ( 0 0$1 ) ;
21928: LD_INT 35
21930: PPUSH
21931: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
21935: LD_VAR 0 5
21939: PUSH
21940: LD_VAR 0 1
21944: ARRAY
21945: PPUSH
21946: LD_EXP 21
21950: PPUSH
21951: CALL_OW 120
// pom = pom - 1 ;
21955: LD_ADDR_VAR 0 3
21959: PUSH
21960: LD_VAR 0 3
21964: PUSH
21965: LD_INT 1
21967: MINUS
21968: ST_TO_ADDR
// end ;
21969: GO 21866
21971: POP
21972: POP
// if pom > 0 then
21973: LD_VAR 0 3
21977: PUSH
21978: LD_INT 0
21980: GREATER
21981: IFFALSE 22006
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
21983: LD_ADDR_EXP 78
21987: PUSH
21988: LD_EXP 78
21992: PPUSH
21993: LD_INT 3
21995: PPUSH
21996: LD_VAR 0 3
22000: PPUSH
22001: CALL_OW 1
22005: ST_TO_ADDR
// end ;
22006: PPOPN 5
22008: END
// every 0 0$1 trigger kirovTransportCargo do
22009: LD_EXP 71
22013: IFFALSE 22062
22015: GO 22017
22017: DISABLE
// begin enable ;
22018: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
22019: LD_EXP 71
22023: PPUSH
22024: LD_EXP 65
22028: PPUSH
22029: LD_INT 2
22031: PPUSH
22032: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
22036: LD_EXP 71
22040: PPUSH
22041: LD_EXP 64
22045: PPUSH
22046: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
22050: LD_EXP 71
22054: PPUSH
22055: LD_INT 100
22057: PPUSH
22058: CALL_OW 240
// end ;
22062: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
22063: LD_INT 78
22065: PPUSH
22066: LD_INT 112
22068: PPUSH
22069: LD_INT 3
22071: PPUSH
22072: CALL_OW 440
22076: IFFALSE 22130
22078: GO 22080
22080: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
22081: LD_INT 78
22083: PPUSH
22084: LD_INT 112
22086: PPUSH
22087: CALL_OW 84
// DialogueOn ;
22091: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
22095: LD_EXP 46
22099: PPUSH
22100: LD_STRING D2a-Bur-1
22102: PPUSH
22103: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
22107: LD_EXP 58
22111: PPUSH
22112: LD_STRING D2a-Kur-1
22114: PPUSH
22115: CALL_OW 94
// DialogueOff ;
22119: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
22123: LD_STRING M2
22125: PPUSH
22126: CALL_OW 337
// end ;
22130: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
22131: LD_EXP 10
22135: NOT
22136: IFFALSE 22328
22138: GO 22140
22140: DISABLE
22141: LD_INT 0
22143: PPUSH
// begin enable ;
22144: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
22145: LD_ADDR_VAR 0 1
22149: PUSH
22150: LD_INT 22
22152: PUSH
22153: LD_INT 3
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 21
22162: PUSH
22163: LD_INT 2
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 23
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 2
22182: PUSH
22183: LD_INT 31
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 31
22195: PUSH
22196: LD_INT 23
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: PPUSH
22214: CALL_OW 69
22218: PUSH
22219: FOR_IN
22220: IFFALSE 22326
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
22222: LD_VAR 0 1
22226: PPUSH
22227: LD_INT 48
22229: PPUSH
22230: LD_INT 81
22232: PPUSH
22233: CALL_OW 297
22237: PUSH
22238: LD_INT 7
22240: LESS
22241: IFFALSE 22324
// begin dialog_track = true ;
22243: LD_ADDR_EXP 10
22247: PUSH
22248: LD_INT 1
22250: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
22251: LD_INT 48
22253: PPUSH
22254: LD_INT 81
22256: PPUSH
22257: CALL_OW 86
// DialogueOn ;
22261: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
22265: LD_EXP 46
22269: PPUSH
22270: LD_STRING D5a-Bur-1
22272: PPUSH
22273: CALL_OW 88
// DialogueOff ;
22277: CALL_OW 7
// SetTech ( 82 , 3 , state_enabled ) ;
22281: LD_INT 82
22283: PPUSH
22284: LD_INT 3
22286: PPUSH
22287: LD_INT 1
22289: PPUSH
22290: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
22294: LD_INT 84
22296: PPUSH
22297: LD_INT 3
22299: PPUSH
22300: LD_INT 1
22302: PPUSH
22303: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
22307: LD_INT 16
22309: PPUSH
22310: LD_INT 3
22312: PPUSH
22313: LD_INT 1
22315: PPUSH
22316: CALL_OW 324
// exit ;
22320: POP
22321: POP
22322: GO 22328
// end ;
22324: GO 22219
22326: POP
22327: POP
// end ;
22328: PPOPN 1
22330: END
// every 5 5$30 do
22331: GO 22333
22333: DISABLE
// begin PrepareScholtze ;
22334: CALL 5322 0 0
// wait ( 0 0$2 ) ;
22338: LD_INT 70
22340: PPUSH
22341: CALL_OW 67
// DialogueOn ;
22345: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
22349: LD_EXP 52
22353: PPUSH
22354: LD_STRING D4-Sch-1
22356: PPUSH
22357: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
22361: LD_EXP 46
22365: PPUSH
22366: LD_STRING D4-Bur-1
22368: PPUSH
22369: CALL_OW 88
// DialogueOff ;
22373: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
22377: LD_STRING M4
22379: PPUSH
22380: CALL_OW 337
// ComHold ( Scholtze ) ;
22384: LD_EXP 52
22388: PPUSH
22389: CALL_OW 140
// scholtzeSpawned = true ;
22393: LD_ADDR_EXP 6
22397: PUSH
22398: LD_INT 1
22400: ST_TO_ADDR
// end ;
22401: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
22402: LD_INT 3
22404: PPUSH
22405: LD_EXP 52
22409: PPUSH
22410: CALL_OW 292
22414: PUSH
22415: LD_EXP 6
22419: AND
22420: PUSH
22421: LD_EXP 7
22425: NOT
22426: AND
22427: IFFALSE 22608
22429: GO 22431
22431: DISABLE
// begin scholtzeSaved = true ;
22432: LD_ADDR_EXP 7
22436: PUSH
22437: LD_INT 1
22439: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
22440: LD_EXP 52
22444: PPUSH
22445: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
22449: LD_EXP 52
22453: PPUSH
22454: LD_INT 3
22456: PPUSH
22457: CALL_OW 235
// DialogueOn ;
22461: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
22465: LD_EXP 52
22469: PPUSH
22470: LD_STRING D4a-Sch-1
22472: PPUSH
22473: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
22477: LD_EXP 46
22481: PPUSH
22482: LD_STRING D4a-Bur-1
22484: PPUSH
22485: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
22489: LD_EXP 52
22493: PPUSH
22494: LD_STRING D4a-Sch-2
22496: PPUSH
22497: CALL_OW 88
// DialogueOff ;
22501: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
22505: LD_EXP 82
22509: PPUSH
22510: LD_INT 28
22512: PPUSH
22513: LD_INT 36
22515: PPUSH
22516: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
22520: LD_STRING MScholtzeOut
22522: PPUSH
22523: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
22527: LD_INT 49
22529: PPUSH
22530: LD_INT 3
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
22540: LD_INT 51
22542: PPUSH
22543: LD_INT 3
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
22553: LD_INT 82
22555: PPUSH
22556: LD_INT 3
22558: PPUSH
22559: CALL_OW 321
22563: PUSH
22564: LD_INT 0
22566: EQUAL
22567: IFFALSE 22582
// SetTech ( 82 , 3 , state_enabled ) ;
22569: LD_INT 82
22571: PPUSH
22572: LD_INT 3
22574: PPUSH
22575: LD_INT 1
22577: PPUSH
22578: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
22582: LD_INT 83
22584: PPUSH
22585: LD_INT 3
22587: PPUSH
22588: LD_INT 1
22590: PPUSH
22591: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
22595: LD_INT 19
22597: PPUSH
22598: LD_INT 3
22600: PPUSH
22601: LD_INT 1
22603: PPUSH
22604: CALL_OW 324
// end ;
22608: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
22609: LD_EXP 52
22613: PPUSH
22614: CALL_OW 305
22618: PUSH
22619: LD_EXP 7
22623: NOT
22624: AND
22625: IFFALSE 22634
22627: GO 22629
22629: DISABLE
// PrepareAmericanPatrol ;
22630: CALL 6226 0 0
22634: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
22635: LD_EXP 52
22639: PPUSH
22640: CALL_OW 305
22644: PUSH
22645: LD_EXP 52
22649: PPUSH
22650: CALL_OW 255
22654: PUSH
22655: LD_INT 8
22657: EQUAL
22658: AND
22659: PUSH
22660: LD_EXP 45
22664: PUSH
22665: LD_INT 35
22667: GREATER
22668: AND
22669: IFFALSE 22845
22671: GO 22673
22673: DISABLE
22674: LD_INT 0
22676: PPUSH
22677: PPUSH
// begin enable ;
22678: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
22679: LD_ADDR_EXP 45
22683: PUSH
22684: LD_EXP 45
22688: PUSH
22689: LD_INT 35
22691: MINUS
22692: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
22693: LD_ADDR_VAR 0 1
22697: PUSH
22698: LD_INT 22
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 25
22710: PUSH
22711: LD_INT 12
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PPUSH
22722: CALL_OW 69
22726: PUSH
22727: FOR_IN
22728: IFFALSE 22767
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_EXP 52
22739: PPUSH
22740: CALL_OW 250
22744: PPUSH
22745: LD_EXP 52
22749: PPUSH
22750: CALL_OW 251
22754: PPUSH
22755: LD_INT 12
22757: PPUSH
22758: LD_INT 0
22760: PPUSH
22761: CALL 9874 0 5
22765: GO 22727
22767: POP
22768: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
22769: LD_ADDR_VAR 0 2
22773: PUSH
22774: LD_INT 22
22776: PUSH
22777: LD_INT 0
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 25
22786: PUSH
22787: LD_INT 14
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PPUSH
22798: CALL_OW 69
22802: PUSH
22803: FOR_IN
22804: IFFALSE 22843
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
22806: LD_VAR 0 2
22810: PPUSH
22811: LD_EXP 52
22815: PPUSH
22816: CALL_OW 250
22820: PPUSH
22821: LD_EXP 52
22825: PPUSH
22826: CALL_OW 251
22830: PPUSH
22831: LD_INT 12
22833: PPUSH
22834: LD_INT 0
22836: PPUSH
22837: CALL 9874 0 5
22841: GO 22803
22843: POP
22844: POP
// end ;
22845: PPOPN 2
22847: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
22848: LD_INT 1
22850: PPUSH
22851: LD_EXP 52
22855: PPUSH
22856: CALL_OW 292
22860: PUSH
22861: LD_EXP 82
22865: AND
22866: PUSH
22867: LD_EXP 7
22871: NOT
22872: AND
22873: IFFALSE 23027
22875: GO 22877
22877: DISABLE
// begin enable ;
22878: ENABLE
// if not IsPlaced ( Scholtze ) then
22879: LD_EXP 52
22883: PPUSH
22884: CALL_OW 305
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 23027
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
22893: LD_EXP 82
22897: PUSH
22898: LD_INT 1
22900: ARRAY
22901: PPUSH
22902: CALL_OW 320
22906: PUSH
22907: LD_EXP 52
22911: EQUAL
22912: PUSH
22913: LD_EXP 82
22917: PUSH
22918: LD_INT 2
22920: ARRAY
22921: PPUSH
22922: CALL_OW 320
22926: PUSH
22927: LD_EXP 52
22931: EQUAL
22932: OR
22933: IFFALSE 23027
// begin DialogueOn ;
22935: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
22939: LD_EXP 52
22943: PPUSH
22944: LD_STRING D4b-Sch-1
22946: PPUSH
22947: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
22951: LD_EXP 82
22955: PUSH
22956: LD_INT 2
22958: ARRAY
22959: PPUSH
22960: LD_STRING D4b-Sol1-1
22962: PPUSH
22963: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
22967: LD_EXP 82
22971: PUSH
22972: LD_INT 1
22974: ARRAY
22975: PPUSH
22976: LD_STRING D4b-Sol2-1
22978: PPUSH
22979: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
22983: LD_EXP 52
22987: PPUSH
22988: LD_STRING D4b-Sch-2
22990: PPUSH
22991: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
22995: LD_EXP 46
22999: PPUSH
23000: LD_STRING D4b-Bur-2
23002: PPUSH
23003: CALL_OW 88
// DialogueOff ;
23007: CALL_OW 7
// Killunit ( Scholtze ) ;
23011: LD_EXP 52
23015: PPUSH
23016: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
23020: LD_STRING MScholtzeDel
23022: PPUSH
23023: CALL_OW 337
// end ; end ;
23027: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
23028: LD_INT 0
23030: PPUSH
23031: PPUSH
23032: PPUSH
// dialog_workshop = true ;
23033: LD_ADDR_EXP 8
23037: PUSH
23038: LD_INT 1
23040: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
23041: LD_INT 22
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 30
23053: PUSH
23054: LD_INT 26
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PPUSH
23065: CALL_OW 69
23069: NOT
23070: IFFALSE 23459
// begin CenterNowOnUnits ( building ) ;
23072: LD_VAR 0 1
23076: PPUSH
23077: CALL_OW 87
// DialogueOn ;
23081: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
23085: LD_EXP 46
23089: PPUSH
23090: LD_STRING D3aa-Bur-1
23092: PPUSH
23093: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
23097: LD_EXP 52
23101: PPUSH
23102: CALL_OW 302
23106: PUSH
23107: LD_EXP 52
23111: PPUSH
23112: CALL_OW 255
23116: PUSH
23117: LD_INT 3
23119: EQUAL
23120: AND
23121: IFFALSE 23137
// Say ( Scholtze , D3aa-Sch-1 ) else
23123: LD_EXP 52
23127: PPUSH
23128: LD_STRING D3aa-Sch-1
23130: PPUSH
23131: CALL_OW 88
23135: GO 23443
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 22
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 25
23164: PUSH
23165: LD_INT 4
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 26
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 50
23184: PUSH
23185: EMPTY
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: PPUSH
23195: CALL_OW 69
23199: PUSH
23200: LD_EXP 46
23204: PUSH
23205: LD_EXP 47
23209: PUSH
23210: LD_EXP 49
23214: PUSH
23215: LD_EXP 50
23219: PUSH
23220: LD_EXP 51
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: DIFF
23232: ST_TO_ADDR
// if maleSci then
23233: LD_VAR 0 3
23237: IFFALSE 23257
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
23239: LD_VAR 0 3
23243: PUSH
23244: LD_INT 1
23246: ARRAY
23247: PPUSH
23248: LD_STRING D3aa-Sci1-1
23250: PPUSH
23251: CALL_OW 88
23255: GO 23443
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23257: LD_ADDR_VAR 0 4
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_INT 3
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 21
23274: PUSH
23275: LD_INT 1
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 26
23284: PUSH
23285: LD_INT 1
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 50
23294: PUSH
23295: EMPTY
23296: LIST
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: PPUSH
23304: CALL_OW 69
23308: PUSH
23309: LD_EXP 46
23313: PUSH
23314: LD_EXP 47
23318: PUSH
23319: LD_EXP 49
23323: PUSH
23324: LD_EXP 50
23328: PUSH
23329: LD_EXP 51
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: DIFF
23341: ST_TO_ADDR
// if maleOthers then
23342: LD_VAR 0 4
23346: IFFALSE 23366
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
23348: LD_VAR 0 4
23352: PUSH
23353: LD_INT 1
23355: ARRAY
23356: PPUSH
23357: LD_STRING D3aa-Sci1-1
23359: PPUSH
23360: CALL_OW 88
23364: GO 23443
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23366: LD_ADDR_VAR 0 4
23370: PUSH
23371: LD_INT 22
23373: PUSH
23374: LD_INT 3
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 21
23383: PUSH
23384: LD_INT 1
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 26
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 50
23403: PUSH
23404: EMPTY
23405: LIST
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: PPUSH
23413: CALL_OW 69
23417: PUSH
23418: LD_EXP 46
23422: PUSH
23423: EMPTY
23424: LIST
23425: DIFF
23426: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
23427: LD_VAR 0 4
23431: PUSH
23432: LD_INT 1
23434: ARRAY
23435: PPUSH
23436: LD_STRING D3aa-Sci1-1
23438: PPUSH
23439: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
23443: LD_EXP 46
23447: PPUSH
23448: LD_STRING D3aa-Bur-2
23450: PPUSH
23451: CALL_OW 88
// DialogueOff ;
23455: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
23459: LD_STRING M3
23461: PPUSH
23462: CALL_OW 337
// end ;
23466: LD_VAR 0 2
23470: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
23471: LD_EXP 9
23475: NOT
23476: IFFALSE 23811
23478: GO 23480
23480: DISABLE
23481: LD_INT 0
23483: PPUSH
23484: PPUSH
// begin enable ;
23485: ENABLE
// for amUnit in amSupportTroops do
23486: LD_ADDR_VAR 0 1
23490: PUSH
23491: LD_EXP 81
23495: PUSH
23496: FOR_IN
23497: IFFALSE 23809
// begin if See ( 3 , amUnit ) then
23499: LD_INT 3
23501: PPUSH
23502: LD_VAR 0 1
23506: PPUSH
23507: CALL_OW 292
23511: IFFALSE 23807
// begin dialog_amSupportTroops = true ;
23513: LD_ADDR_EXP 9
23517: PUSH
23518: LD_INT 1
23520: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
23521: LD_VAR 0 1
23525: PPUSH
23526: CALL_OW 87
// DialogueOn ;
23530: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
23534: LD_ADDR_VAR 0 2
23538: PUSH
23539: LD_INT 22
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 21
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 26
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 50
23571: PUSH
23572: EMPTY
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: PPUSH
23581: CALL_OW 69
23585: PUSH
23586: LD_EXP 46
23590: PUSH
23591: LD_EXP 47
23595: PUSH
23596: LD_EXP 49
23600: PUSH
23601: LD_EXP 50
23605: PUSH
23606: LD_EXP 51
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: DIFF
23618: ST_TO_ADDR
// if randomMale then
23619: LD_VAR 0 2
23623: IFFALSE 23687
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false ) else
23625: LD_INT 22
23627: PUSH
23628: LD_INT 3
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 21
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 26
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 50
23657: PUSH
23658: EMPTY
23659: LIST
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: PPUSH
23667: CALL_OW 69
23671: PPUSH
23672: LD_STRING D3b-RSol1-1
23674: PPUSH
23675: LD_STRING 
23677: PPUSH
23678: LD_INT 0
23680: PPUSH
23681: CALL 6909 0 4
23685: GO 23764
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
23687: LD_ADDR_VAR 0 2
23691: PUSH
23692: LD_INT 22
23694: PUSH
23695: LD_INT 3
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 21
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 26
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 50
23724: PUSH
23725: EMPTY
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: PPUSH
23734: CALL_OW 69
23738: PUSH
23739: LD_EXP 46
23743: PUSH
23744: EMPTY
23745: LIST
23746: DIFF
23747: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
23748: LD_VAR 0 2
23752: PUSH
23753: LD_INT 1
23755: ARRAY
23756: PPUSH
23757: LD_STRING D3b-RSol1-1
23759: PPUSH
23760: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
23764: LD_EXP 47
23768: PPUSH
23769: CALL_OW 302
23773: IFFALSE 23787
// Say ( Gnyevko , D3b-Gny-1 ) ;
23775: LD_EXP 47
23779: PPUSH
23780: LD_STRING D3b-Gny-1
23782: PPUSH
23783: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
23787: LD_EXP 46
23791: PPUSH
23792: LD_STRING D3b-Bur-1
23794: PPUSH
23795: CALL_OW 88
// DialogueOff ;
23799: CALL_OW 7
// exit ;
23803: POP
23804: POP
23805: GO 23811
// end ; end ;
23807: GO 23496
23809: POP
23810: POP
// end ;
23811: PPOPN 2
23813: END
// every 2 2$0 trigger dialog_amSupportTroops do
23814: LD_EXP 9
23818: IFFALSE 23899
23820: GO 23822
23822: DISABLE
// begin if IsOK ( Kovalyuk ) then
23823: LD_EXP 49
23827: PPUSH
23828: CALL_OW 302
23832: IFFALSE 23846
// Say ( Kovalyuk , D3b-Kov-1 ) ;
23834: LD_EXP 49
23838: PPUSH
23839: LD_STRING D3b-Kov-1
23841: PPUSH
23842: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false ) ;
23846: LD_INT 22
23848: PUSH
23849: LD_INT 3
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 21
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 26
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: PPUSH
23881: CALL_OW 69
23885: PPUSH
23886: LD_STRING D3b-RSol1-2
23888: PPUSH
23889: LD_STRING 
23891: PPUSH
23892: LD_INT 0
23894: PPUSH
23895: CALL 6909 0 4
// end ;
23899: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
23900: LD_EXP 38
23904: PUSH
23905: LD_INT 35
23907: LESS
23908: IFFALSE 24136
23910: GO 23912
23912: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
23913: LD_EXP 58
23917: PPUSH
23918: CALL_OW 87
// InGameOn ;
23922: CALL_OW 8
// DialogueOn ;
23926: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
23930: LD_EXP 58
23934: PPUSH
23935: LD_STRING D5-Kur-1
23937: PPUSH
23938: CALL_OW 94
// case Query ( QVehicles ) of 1 :
23942: LD_STRING QVehicles
23944: PPUSH
23945: CALL_OW 97
23949: PUSH
23950: LD_INT 1
23952: DOUBLE
23953: EQUAL
23954: IFTRUE 23958
23956: GO 24001
23958: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
23959: LD_EXP 46
23963: PPUSH
23964: LD_STRING D6a-Bur-1
23966: PPUSH
23967: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
23971: LD_EXP 58
23975: PPUSH
23976: LD_STRING D6a-Kur-1
23978: PPUSH
23979: CALL_OW 94
// meetNearOmicronBase = true ;
23983: LD_ADDR_EXP 19
23987: PUSH
23988: LD_INT 1
23990: ST_TO_ADDR
// kurinCheckVehicles = true ;
23991: LD_ADDR_EXP 18
23995: PUSH
23996: LD_INT 1
23998: ST_TO_ADDR
// end ; 2 :
23999: GO 24128
24001: LD_INT 2
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24056
24009: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
24010: LD_EXP 46
24014: PPUSH
24015: LD_STRING D6b-Bur-1
24017: PPUSH
24018: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
24022: LD_EXP 58
24026: PPUSH
24027: LD_STRING D6b-Kur-1
24029: PPUSH
24030: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
24034: LD_EXP 46
24038: PPUSH
24039: LD_STRING D6b-Bur-2
24041: PPUSH
24042: CALL_OW 88
// meetNearOmicronBase = true ;
24046: LD_ADDR_EXP 19
24050: PUSH
24051: LD_INT 1
24053: ST_TO_ADDR
// end ; 3 :
24054: GO 24128
24056: LD_INT 3
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24127
24064: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
24065: LD_EXP 46
24069: PPUSH
24070: LD_STRING D6c-Bur-1
24072: PPUSH
24073: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
24077: LD_EXP 58
24081: PPUSH
24082: LD_STRING D6c-Kur-1
24084: PPUSH
24085: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
24089: LD_EXP 46
24093: PPUSH
24094: LD_STRING D6c-Bur-2
24096: PPUSH
24097: CALL_OW 88
// kurinGiveMoreTime = true ;
24101: LD_ADDR_EXP 13
24105: PUSH
24106: LD_INT 1
24108: ST_TO_ADDR
// kurinOpinion = 0 ;
24109: LD_ADDR_EXP 26
24113: PUSH
24114: LD_INT 0
24116: ST_TO_ADDR
// counterIndex = 4 ;
24117: LD_ADDR_EXP 87
24121: PUSH
24122: LD_INT 4
24124: ST_TO_ADDR
// end ; end ;
24125: GO 24128
24127: POP
// InGameOff ;
24128: CALL_OW 9
// DialogueOff ;
24132: CALL_OW 7
// end ;
24136: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
24137: LD_EXP 14
24141: PUSH
24142: LD_INT 35
24144: LESS
24145: PUSH
24146: LD_EXP 13
24150: AND
24151: IFFALSE 24184
24153: GO 24155
24155: DISABLE
// begin DialogueOn ;
24156: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
24160: LD_EXP 58
24164: PPUSH
24165: LD_STRING D6c-Kur-2
24167: PPUSH
24168: CALL_OW 94
// DialogueOff ;
24172: CALL_OW 7
// meetNearOmicronBase = true ;
24176: LD_ADDR_EXP 19
24180: PUSH
24181: LD_INT 1
24183: ST_TO_ADDR
// end ;
24184: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
24185: LD_EXP 19
24189: IFFALSE 24844
24191: GO 24193
24193: DISABLE
24194: LD_INT 0
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
// begin mechs = [ ] ;
24201: LD_ADDR_VAR 0 3
24205: PUSH
24206: EMPTY
24207: ST_TO_ADDR
// vehs = [ ] ;
24208: LD_ADDR_VAR 0 4
24212: PUSH
24213: EMPTY
24214: ST_TO_ADDR
// haveVehs = 0 ;
24215: LD_ADDR_VAR 0 5
24219: PUSH
24220: LD_INT 0
24222: ST_TO_ADDR
// uc_side = 6 ;
24223: LD_ADDR_OWVAR 20
24227: PUSH
24228: LD_INT 6
24230: ST_TO_ADDR
// uc_nation = 3 ;
24231: LD_ADDR_OWVAR 21
24235: PUSH
24236: LD_INT 3
24238: ST_TO_ADDR
// for i := 1 to 2 do
24239: LD_ADDR_VAR 0 1
24243: PUSH
24244: DOUBLE
24245: LD_INT 1
24247: DEC
24248: ST_TO_ADDR
24249: LD_INT 2
24251: PUSH
24252: FOR_TO
24253: IFFALSE 24352
// begin PrepareMechanic ( false , 2 ) ;
24255: LD_INT 0
24257: PPUSH
24258: LD_INT 2
24260: PPUSH
24261: CALL_OW 383
// mech = CreateHuman ;
24265: LD_ADDR_VAR 0 2
24269: PUSH
24270: CALL_OW 44
24274: ST_TO_ADDR
// mechs = mechs ^ mech ;
24275: LD_ADDR_VAR 0 3
24279: PUSH
24280: LD_VAR 0 3
24284: PUSH
24285: LD_VAR 0 2
24289: ADD
24290: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
24291: LD_VAR 0 2
24295: PPUSH
24296: LD_EXP 64
24300: PPUSH
24301: CALL_OW 52
// ComExitBuilding ( mech ) ;
24305: LD_VAR 0 2
24309: PPUSH
24310: CALL_OW 122
// wait ( 0 0$1 ) ;
24314: LD_INT 35
24316: PPUSH
24317: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
24321: LD_VAR 0 2
24325: PPUSH
24326: LD_EXP 57
24330: PPUSH
24331: CALL_OW 250
24335: PPUSH
24336: LD_EXP 57
24340: PPUSH
24341: CALL_OW 251
24345: PPUSH
24346: CALL_OW 171
// end ;
24350: GO 24252
24352: POP
24353: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
24354: LD_INT 22
24356: PUSH
24357: LD_INT 3
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 21
24366: PUSH
24367: LD_INT 2
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 23
24376: PUSH
24377: LD_INT 3
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 69
24393: PUSH
24394: LD_INT 22
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 21
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: EQUAL
24423: IFFALSE 24433
// produceOnlyForYou = true ;
24425: LD_ADDR_EXP 17
24429: PUSH
24430: LD_INT 1
24432: ST_TO_ADDR
// wait ( 0 0$20 ) ;
24433: LD_INT 700
24435: PPUSH
24436: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
24440: LD_INT 22
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 21
24452: PUSH
24453: LD_INT 2
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 23
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 3
24472: PUSH
24473: LD_INT 34
24475: PUSH
24476: LD_INT 51
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: PPUSH
24493: CALL_OW 69
24497: PUSH
24498: LD_INT 22
24500: PUSH
24501: LD_INT 3
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 21
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PPUSH
24522: CALL_OW 69
24526: PUSH
24527: LD_INT 2
24529: PLUS
24530: GREATEREQUAL
24531: IFFALSE 24814
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
24533: LD_ADDR_VAR 0 4
24537: PUSH
24538: LD_VAR 0 4
24542: PUSH
24543: LD_INT 22
24545: PUSH
24546: LD_INT 3
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 21
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 23
24565: PUSH
24566: LD_INT 3
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 34
24578: PUSH
24579: LD_INT 51
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: LD_INT 59
24595: PUSH
24596: EMPTY
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: PPUSH
24610: CALL_OW 69
24614: PUSH
24615: LD_INT 1
24617: ARRAY
24618: ADD
24619: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_VAR 0 4
24629: PUSH
24630: LD_INT 22
24632: PUSH
24633: LD_INT 3
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 21
24642: PUSH
24643: LD_INT 2
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 23
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 3
24662: PUSH
24663: LD_INT 34
24665: PUSH
24666: LD_INT 51
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 3
24679: PUSH
24680: LD_INT 59
24682: PUSH
24683: EMPTY
24684: LIST
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: PPUSH
24697: CALL_OW 69
24701: PUSH
24702: LD_INT 2
24704: ARRAY
24705: ADD
24706: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
24707: LD_ADDR_EXP 73
24711: PUSH
24712: LD_EXP 73
24716: PUSH
24717: LD_VAR 0 4
24721: ADD
24722: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
24723: LD_VAR 0 4
24727: PPUSH
24728: LD_INT 6
24730: PPUSH
24731: CALL_OW 235
// produceMoreVehicles = true ;
24735: LD_ADDR_EXP 16
24739: PUSH
24740: LD_INT 1
24742: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
24743: LD_VAR 0 3
24747: PUSH
24748: LD_INT 1
24750: ARRAY
24751: PPUSH
24752: LD_VAR 0 4
24756: PUSH
24757: LD_INT 1
24759: ARRAY
24760: PPUSH
24761: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
24765: LD_VAR 0 3
24769: PUSH
24770: LD_INT 2
24772: ARRAY
24773: PPUSH
24774: LD_VAR 0 4
24778: PUSH
24779: LD_INT 2
24781: ARRAY
24782: PPUSH
24783: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
24787: LD_EXP 18
24791: PUSH
24792: LD_EXP 26
24796: PUSH
24797: LD_INT 0
24799: EQUAL
24800: NOT
24801: AND
24802: IFFALSE 24812
// kurinOpinion = 1 ;
24804: LD_ADDR_EXP 26
24808: PUSH
24809: LD_INT 1
24811: ST_TO_ADDR
// end else
24812: GO 24844
// begin if kurinCheckVehicles then
24814: LD_EXP 18
24818: IFFALSE 24844
// begin DialogueOn ;
24820: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
24824: LD_EXP 58
24828: PPUSH
24829: LD_STRING D6d-Kur-1
24831: PPUSH
24832: CALL_OW 94
// DialogueOff ;
24836: CALL_OW 7
// Lose_Vehicles ;
24840: CALL 18926 0 0
// end ; end ; end ;
24844: PPOPN 5
24846: END
// every 0 0$1 trigger meetNearOmicronBase do
24847: LD_EXP 19
24851: IFFALSE 25071
24853: GO 24855
24855: DISABLE
// begin spawnCrates = false ;
24856: LD_ADDR_EXP 5
24860: PUSH
24861: LD_INT 0
24863: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
24864: LD_INT 6
24866: PPUSH
24867: LD_INT 1
24869: PPUSH
24870: LD_INT 2
24872: PPUSH
24873: LD_INT 1
24875: PPUSH
24876: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
24880: LD_INT 0
24882: PPUSH
24883: LD_INT 3
24885: PPUSH
24886: LD_INT 0
24888: PPUSH
24889: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
24893: LD_STRING M3a
24895: PPUSH
24896: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
24900: LD_STRING M5
24902: PPUSH
24903: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
24907: LD_INT 15
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
24917: LD_EXP 73
24921: PPUSH
24922: LD_INT 75
24924: PPUSH
24925: LD_INT 38
24927: PPUSH
24928: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
24932: LD_EXP 72
24936: PPUSH
24937: LD_INT 75
24939: PPUSH
24940: LD_INT 38
24942: PPUSH
24943: CALL_OW 111
// counterIndex = 2 ;
24947: LD_ADDR_EXP 87
24951: PUSH
24952: LD_INT 2
24954: ST_TO_ADDR
// if not kurinOpinion = 0 then
24955: LD_EXP 26
24959: PUSH
24960: LD_INT 0
24962: EQUAL
24963: NOT
24964: IFFALSE 24974
// kurinOpinion = 1 ;
24966: LD_ADDR_EXP 26
24970: PUSH
24971: LD_INT 1
24973: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
24974: LD_INT 1
24976: PPUSH
24977: LD_INT 1
24979: PPUSH
24980: LD_INT 22
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 69
25008: PPUSH
25009: LD_INT 13
25011: PPUSH
25012: LD_INT 28
25014: PPUSH
25015: LD_INT 17
25017: PPUSH
25018: LD_INT 29
25020: PPUSH
25021: LD_INT 2
25023: PUSH
25024: LD_INT 3
25026: PUSH
25027: LD_INT 4
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: PUSH
25035: LD_OWVAR 67
25039: ARRAY
25040: PPUSH
25041: LD_INT 2
25043: PUSH
25044: LD_INT 3
25046: PUSH
25047: LD_INT 4
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: PUSH
25055: LD_OWVAR 67
25059: ARRAY
25060: PPUSH
25061: LD_INT 0
25063: PPUSH
25064: LD_INT 0
25066: PPUSH
25067: CALL 11754 0 11
// end ;
25071: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
25072: LD_EXP 15
25076: PUSH
25077: LD_INT 35
25079: LESS
25080: PUSH
25081: LD_EXP 87
25085: PUSH
25086: LD_INT 2
25088: EQUAL
25089: AND
25090: IFFALSE 25139
25092: GO 25094
25094: DISABLE
// begin DialogueOn ;
25095: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
25099: LD_EXP 58
25103: PPUSH
25104: LD_STRING D7a-Kur-1
25106: PPUSH
25107: CALL_OW 94
// DialogueOff ;
25111: CALL_OW 7
// counterIndex = 3 ;
25115: LD_ADDR_EXP 87
25119: PUSH
25120: LD_INT 3
25122: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
25123: LD_ADDR_EXP 15
25127: PUSH
25128: LD_INT 4200
25130: ST_TO_ADDR
// kurinOpinion = 0 ;
25131: LD_ADDR_EXP 26
25135: PUSH
25136: LD_INT 0
25138: ST_TO_ADDR
// end ;
25139: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
25140: LD_EXP 15
25144: PUSH
25145: LD_INT 35
25147: LESS
25148: PUSH
25149: LD_EXP 87
25153: PUSH
25154: LD_INT 3
25156: EQUAL
25157: AND
25158: IFFALSE 25167
25160: GO 25162
25162: DISABLE
// Lose_Delay ;
25163: CALL 18956 0 0
25167: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25168: LD_EXP 19
25172: PUSH
25173: LD_INT 15
25175: PPUSH
25176: LD_INT 22
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PPUSH
25200: CALL_OW 71
25204: PUSH
25205: LD_INT 0
25207: EQUAL
25208: AND
25209: IFFALSE 25297
25211: GO 25213
25213: DISABLE
// begin counterEnable = false ;
25214: LD_ADDR_EXP 86
25218: PUSH
25219: LD_INT 0
25221: ST_TO_ADDR
// Display_strings = [ ] ;
25222: LD_ADDR_OWVAR 47
25226: PUSH
25227: EMPTY
25228: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
25229: LD_INT 15
25231: PPUSH
25232: LD_INT 0
25234: PPUSH
25235: CALL_OW 424
// canExitBattlefield = false ;
25239: LD_ADDR_EXP 24
25243: PUSH
25244: LD_INT 0
25246: ST_TO_ADDR
// DialogueOn ;
25247: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
25251: LD_EXP 46
25255: PPUSH
25256: LD_STRING D7-Bur-1
25258: PPUSH
25259: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
25263: LD_EXP 58
25267: PPUSH
25268: LD_STRING D7-Kur-1
25270: PPUSH
25271: CALL_OW 94
// DialogueOff ;
25275: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
25279: LD_STRING M5a
25281: PPUSH
25282: CALL_OW 337
// Query ( QRefuel ) ;
25286: LD_STRING QRefuel
25288: PPUSH
25289: CALL_OW 97
// KirovAttackOmicron ;
25293: CALL 17505 0 0
// end ;
25297: END
// every 1 trigger not canExitBattlefield do var unit ;
25298: LD_EXP 24
25302: NOT
25303: IFFALSE 25471
25305: GO 25307
25307: DISABLE
25308: LD_INT 0
25310: PPUSH
// begin enable ;
25311: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25312: LD_ADDR_VAR 0 1
25316: PUSH
25317: LD_INT 22
25319: PUSH
25320: LD_INT 3
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 21
25332: PUSH
25333: LD_INT 1
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 21
25342: PUSH
25343: LD_INT 2
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PPUSH
25359: CALL_OW 69
25363: PUSH
25364: FOR_IN
25365: IFFALSE 25469
// if not IsInArea ( unit , OmicronBattlefieldArea ) and UnitFilter ( unit , [ [ f_occupied ] , [ f_type , unit_vehicle ] ] ) then
25367: LD_VAR 0 1
25371: PPUSH
25372: LD_INT 26
25374: PPUSH
25375: CALL_OW 308
25379: NOT
25380: PUSH
25381: LD_VAR 0 1
25385: PPUSH
25386: LD_INT 59
25388: PUSH
25389: EMPTY
25390: LIST
25391: PUSH
25392: LD_INT 21
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PPUSH
25406: CALL_OW 72
25410: AND
25411: IFFALSE 25467
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
25413: LD_VAR 0 1
25417: PPUSH
25418: LD_INT 26
25420: PPUSH
25421: CALL_OW 113
// if not dialog_stop then
25425: LD_EXP 11
25429: NOT
25430: IFFALSE 25467
// begin dialog_stop = true ;
25432: LD_ADDR_EXP 11
25436: PUSH
25437: LD_INT 1
25439: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25440: LD_EXP 58
25444: PPUSH
25445: LD_STRING D12-Kur-1
25447: PPUSH
25448: CALL_OW 88
// wait ( 0 0$5 ) ;
25452: LD_INT 175
25454: PPUSH
25455: CALL_OW 67
// dialog_stop = false ;
25459: LD_ADDR_EXP 11
25463: PUSH
25464: LD_INT 0
25466: ST_TO_ADDR
// end ; end ;
25467: GO 25364
25469: POP
25470: POP
// end ;
25471: PPOPN 1
25473: END
// every 0 0$1 do var unit ;
25474: GO 25476
25476: DISABLE
25477: LD_INT 0
25479: PPUSH
// begin enable ;
25480: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
25481: LD_ADDR_VAR 0 1
25485: PUSH
25486: LD_INT 22
25488: PUSH
25489: LD_INT 3
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 21
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 21
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PPUSH
25528: CALL_OW 69
25532: PUSH
25533: FOR_IN
25534: IFFALSE 25609
// if IsInArea ( unit , SecondKurinBase ) then
25536: LD_VAR 0 1
25540: PPUSH
25541: LD_INT 20
25543: PPUSH
25544: CALL_OW 308
25548: IFFALSE 25607
// begin ComMoveXY ( unit , 200 , 114 ) ;
25550: LD_VAR 0 1
25554: PPUSH
25555: LD_INT 200
25557: PPUSH
25558: LD_INT 114
25560: PPUSH
25561: CALL_OW 111
// if not dialog_stop then
25565: LD_EXP 11
25569: NOT
25570: IFFALSE 25607
// begin dialog_stop = true ;
25572: LD_ADDR_EXP 11
25576: PUSH
25577: LD_INT 1
25579: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
25580: LD_EXP 58
25584: PPUSH
25585: LD_STRING D12-Kur-1
25587: PPUSH
25588: CALL_OW 88
// wait ( 0 0$5 ) ;
25592: LD_INT 175
25594: PPUSH
25595: CALL_OW 67
// dialog_stop = false ;
25599: LD_ADDR_EXP 11
25603: PUSH
25604: LD_INT 0
25606: ST_TO_ADDR
// end ; end ;
25607: GO 25533
25609: POP
25610: POP
// end ;
25611: PPOPN 1
25613: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
25614: LD_EXP 19
25618: NOT
25619: PUSH
25620: LD_INT 290
25622: PPUSH
25623: CALL_OW 302
25627: AND
25628: IFFALSE 25944
25630: GO 25632
25632: DISABLE
25633: LD_INT 0
25635: PPUSH
25636: PPUSH
// begin enable ;
25637: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
25638: LD_ADDR_VAR 0 1
25642: PUSH
25643: LD_INT 13
25645: PPUSH
25646: LD_INT 22
25648: PUSH
25649: LD_INT 1
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: LD_INT 21
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 21
25681: PUSH
25682: LD_INT 3
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PPUSH
25699: CALL_OW 70
25703: PUSH
25704: FOR_IN
25705: IFFALSE 25942
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
25707: LD_VAR 0 1
25711: PPUSH
25712: LD_INT 22
25714: PUSH
25715: LD_INT 3
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 21
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 21
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 69
25758: PPUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 74
25768: PPUSH
25769: CALL_OW 296
25773: PUSH
25774: LD_INT 17
25776: LESS
25777: IFFALSE 25940
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
25779: LD_INT 22
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 21
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 21
25804: PUSH
25805: LD_INT 2
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PPUSH
25821: CALL_OW 69
25825: PPUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL_OW 74
25835: PPUSH
25836: LD_INT 69
25838: PPUSH
25839: LD_INT 85
25841: PPUSH
25842: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_INT 1
25853: PPUSH
25854: LD_INT 2
25856: PPUSH
25857: CALL_OW 12
25861: ST_TO_ADDR
// if not dialog_stop then
25862: LD_EXP 11
25866: NOT
25867: IFFALSE 25940
// begin dialog_stop = true ;
25869: LD_ADDR_EXP 11
25873: PUSH
25874: LD_INT 1
25876: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
25877: LD_VAR 0 2
25881: PUSH
25882: LD_INT 1
25884: EQUAL
25885: PUSH
25886: LD_EXP 47
25890: PPUSH
25891: CALL_OW 302
25895: NOT
25896: OR
25897: IFFALSE 25913
// SayRadio ( Kurin , D11-Kur-1 ) else
25899: LD_EXP 58
25903: PPUSH
25904: LD_STRING D11-Kur-1
25906: PPUSH
25907: CALL_OW 94
25911: GO 25925
// Say ( Gnyevko , D11-Gny-1 ) ;
25913: LD_EXP 47
25917: PPUSH
25918: LD_STRING D11-Gny-1
25920: PPUSH
25921: CALL_OW 88
// wait ( 0 0$5 ) ;
25925: LD_INT 175
25927: PPUSH
25928: CALL_OW 67
// dialog_stop = false ;
25932: LD_ADDR_EXP 11
25936: PUSH
25937: LD_INT 0
25939: ST_TO_ADDR
// end ; end ;
25940: GO 25704
25942: POP
25943: POP
// end ;
25944: PPOPN 2
25946: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var tmpUs , tmpRu , building ;
25947: LD_INT 290
25949: PPUSH
25950: CALL_OW 301
25954: PUSH
25955: LD_INT 22
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 21
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PPUSH
25979: CALL_OW 69
25983: PUSH
25984: LD_INT 5
25986: LESS
25987: AND
25988: IFFALSE 27392
25990: GO 25992
25992: DISABLE
25993: LD_INT 0
25995: PPUSH
25996: PPUSH
25997: PPUSH
// begin omicronSurrender = true ;
25998: LD_ADDR_EXP 23
26002: PUSH
26003: LD_INT 1
26005: ST_TO_ADDR
// canExitBattlefield = true ;
26006: LD_ADDR_EXP 24
26010: PUSH
26011: LD_INT 1
26013: ST_TO_ADDR
// enableOmicronAI = false ;
26014: LD_ADDR_EXP 29
26018: PUSH
26019: LD_INT 0
26021: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
26022: LD_INT 1
26024: PPUSH
26025: LD_INT 3
26027: PPUSH
26028: LD_INT 1
26030: PPUSH
26031: LD_INT 0
26033: PPUSH
26034: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
26038: LD_INT 2
26040: PPUSH
26041: LD_INT 3
26043: PPUSH
26044: LD_INT 1
26046: PPUSH
26047: LD_INT 1
26049: PPUSH
26050: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
26054: LD_EXP 46
26058: PPUSH
26059: CALL_OW 87
// uc_side = 1 ;
26063: LD_ADDR_OWVAR 20
26067: PUSH
26068: LD_INT 1
26070: ST_TO_ADDR
// uc_nation = 1 ;
26071: LD_ADDR_OWVAR 21
26075: PUSH
26076: LD_INT 1
26078: ST_TO_ADDR
// hc_name :=  ;
26079: LD_ADDR_OWVAR 26
26083: PUSH
26084: LD_STRING 
26086: ST_TO_ADDR
// hc_gallery =  ;
26087: LD_ADDR_OWVAR 33
26091: PUSH
26092: LD_STRING 
26094: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
26095: LD_INT 1
26097: PPUSH
26098: LD_INT 1
26100: PPUSH
26101: CALL_OW 381
// tmpUs = CreateHuman ;
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: CALL_OW 44
26114: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
26115: LD_INT 22
26117: PUSH
26118: LD_INT 3
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PPUSH
26125: CALL_OW 69
26129: PPUSH
26130: CALL_OW 141
// InGameOn ;
26134: CALL_OW 8
// DialogueOn ;
26138: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
26142: LD_INT 26
26144: PPUSH
26145: LD_INT 33
26147: PPUSH
26148: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
26152: LD_VAR 0 1
26156: PPUSH
26157: LD_STRING D8-Sol1-1
26159: PPUSH
26160: CALL_OW 94
// if IsOk ( Kovalyuk ) then
26164: LD_EXP 49
26168: PPUSH
26169: CALL_OW 302
26173: IFFALSE 26187
// Say ( Kovalyuk , D8-Kov-1 ) ;
26175: LD_EXP 49
26179: PPUSH
26180: LD_STRING D8-Kov-1
26182: PPUSH
26183: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false ) ;
26187: LD_ADDR_VAR 0 2
26191: PUSH
26192: LD_INT 22
26194: PUSH
26195: LD_INT 3
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 21
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 26
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: PPUSH
26227: CALL_OW 69
26231: PPUSH
26232: LD_STRING D8-RSol1-1
26234: PPUSH
26235: LD_STRING 
26237: PPUSH
26238: LD_INT 0
26240: PPUSH
26241: CALL 6909 0 4
26245: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
26246: LD_EXP 47
26250: PPUSH
26251: CALL_OW 302
26255: IFFALSE 26269
// Say ( Gnyevko , D8-Gny-1 ) ;
26257: LD_EXP 47
26261: PPUSH
26262: LD_STRING D8-Gny-1
26264: PPUSH
26265: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false ) ;
26269: LD_INT 22
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 21
26281: PUSH
26282: LD_INT 1
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 26
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: LIST
26303: PPUSH
26304: CALL_OW 69
26308: PUSH
26309: LD_VAR 0 2
26313: DIFF
26314: PPUSH
26315: LD_STRING D8-RSol2-1
26317: PPUSH
26318: LD_STRING 
26320: PPUSH
26321: LD_INT 0
26323: PPUSH
26324: CALL 6909 0 4
// DialogueOff ;
26328: CALL_OW 7
// PrepareArabian ;
26332: CALL 6384 0 0
// CenterNowOnXY ( 234 , 122 ) ;
26336: LD_INT 234
26338: PPUSH
26339: LD_INT 122
26341: PPUSH
26342: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
26346: LD_EXP 84
26350: PPUSH
26351: LD_INT 221
26353: PPUSH
26354: LD_INT 110
26356: PPUSH
26357: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26361: LD_EXP 85
26365: PPUSH
26366: LD_INT 21
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 72
26380: PPUSH
26381: LD_INT 221
26383: PPUSH
26384: LD_INT 110
26386: PPUSH
26387: CALL_OW 114
// wait ( 0 0$7 ) ;
26391: LD_INT 245
26393: PPUSH
26394: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
26398: LD_EXP 85
26402: PPUSH
26403: LD_INT 221
26405: PPUSH
26406: LD_INT 110
26408: PPUSH
26409: CALL_OW 174
// wait ( 0 0$8 ) ;
26413: LD_INT 280
26415: PPUSH
26416: CALL_OW 67
// music_nat = nation_arabian ;
26420: LD_ADDR_OWVAR 71
26424: PUSH
26425: LD_INT 2
26427: ST_TO_ADDR
// music_class = music_combat ;
26428: LD_ADDR_OWVAR 72
26432: PUSH
26433: LD_INT 1
26435: ST_TO_ADDR
// game_speed = 4 ;
26436: LD_ADDR_OWVAR 65
26440: PUSH
26441: LD_INT 4
26443: ST_TO_ADDR
// DialogueOn ;
26444: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
26448: LD_EXP 79
26452: PPUSH
26453: LD_STRING D9-Gri-1
26455: PPUSH
26456: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
26460: LD_EXP 58
26464: PPUSH
26465: LD_STRING D9-Kur-1
26467: PPUSH
26468: CALL_OW 94
// DialogueOff ;
26472: CALL_OW 7
// wait ( 0 0$2.5 ) ;
26476: LD_INT 88
26478: PPUSH
26479: CALL_OW 67
// DialogueOn ;
26483: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
26487: LD_EXP 79
26491: PPUSH
26492: LD_STRING D9-Gri-2
26494: PPUSH
26495: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
26499: LD_EXP 58
26503: PPUSH
26504: LD_STRING D9-Kur-2
26506: PPUSH
26507: CALL_OW 94
// DialogueOff ;
26511: CALL_OW 7
// repeat wait ( 1 ) ;
26515: LD_INT 1
26517: PPUSH
26518: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
26522: LD_EXP 79
26526: PPUSH
26527: CALL_OW 256
26531: PUSH
26532: LD_INT 1000
26534: LESS
26535: IFFALSE 26515
// DialogueOn ;
26537: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
26541: LD_EXP 79
26545: PPUSH
26546: LD_STRING D9-Gri-3
26548: PPUSH
26549: CALL_OW 94
// DialogueOff ;
26553: CALL_OW 7
// KillUnit ( Grishko ) ;
26557: LD_EXP 79
26561: PPUSH
26562: CALL_OW 66
// wait ( 0 0$12 ) ;
26566: LD_INT 420
26568: PPUSH
26569: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
26573: LD_EXP 58
26577: PPUSH
26578: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
26582: LD_EXP 58
26586: PPUSH
26587: LD_STRING D9-Kur-3
26589: PPUSH
26590: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
26594: LD_INT 176
26596: PPUSH
26597: LD_INT 110
26599: PPUSH
26600: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
26604: LD_EXP 85
26608: PPUSH
26609: LD_INT 21
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PPUSH
26619: CALL_OW 72
26623: PPUSH
26624: LD_INT 221
26626: PPUSH
26627: LD_INT 110
26629: PPUSH
26630: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
26634: LD_EXP 84
26638: PPUSH
26639: LD_INT 161
26641: PPUSH
26642: LD_INT 109
26644: PPUSH
26645: CALL_OW 114
// wait ( 0 0$7 ) ;
26649: LD_INT 245
26651: PPUSH
26652: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
26656: LD_EXP 85
26660: PPUSH
26661: LD_INT 161
26663: PPUSH
26664: LD_INT 109
26666: PPUSH
26667: CALL_OW 114
// wait ( 0 0$11 ) ;
26671: LD_INT 385
26673: PPUSH
26674: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
26678: LD_EXP 58
26682: PPUSH
26683: LD_EXP 64
26687: PPUSH
26688: CALL_OW 120
// DialogueOn ;
26692: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
26696: LD_EXP 58
26700: PPUSH
26701: LD_STRING D9a-Kur-1
26703: PPUSH
26704: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
26708: LD_EXP 46
26712: PPUSH
26713: LD_STRING D9a-Bur-1
26715: PPUSH
26716: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
26720: LD_EXP 58
26724: PPUSH
26725: LD_STRING D9a-Kur-2
26727: PPUSH
26728: CALL_OW 94
// DialogueOff ;
26732: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
26736: LD_EXP 76
26740: PPUSH
26741: CALL_OW 122
// wait ( 0 0$1 ) ;
26745: LD_INT 35
26747: PPUSH
26748: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
26752: LD_EXP 76
26756: PPUSH
26757: LD_EXP 57
26761: PPUSH
26762: CALL_OW 250
26766: PPUSH
26767: LD_EXP 57
26771: PPUSH
26772: CALL_OW 251
26776: PPUSH
26777: CALL_OW 111
// immortalSurvivors = true ;
26781: LD_ADDR_EXP 25
26785: PUSH
26786: LD_INT 1
26788: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
26789: LD_ADDR_VAR 0 1
26793: PUSH
26794: LD_INT 22
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 21
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 50
26816: PUSH
26817: EMPTY
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 69
26829: PUSH
26830: FOR_IN
26831: IFFALSE 26844
// RemoveUnit ( tmpUS ) ;
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL_OW 64
26842: GO 26830
26844: POP
26845: POP
// wait ( 0 0$33 ) ;
26846: LD_INT 1155
26848: PPUSH
26849: CALL_OW 67
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
26853: LD_INT 22
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 21
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: PPUSH
26882: CALL_OW 121
// wait ( 0 0$1 ) ;
26886: LD_INT 35
26888: PPUSH
26889: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
26893: LD_INT 22
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 21
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PPUSH
26917: CALL_OW 69
26921: PPUSH
26922: LD_EXP 59
26926: PPUSH
26927: CALL_OW 250
26931: PPUSH
26932: LD_EXP 59
26936: PPUSH
26937: CALL_OW 251
26941: PPUSH
26942: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
26946: LD_INT 22
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 21
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PPUSH
26970: CALL_OW 69
26974: PPUSH
26975: LD_EXP 59
26979: PPUSH
26980: CALL_OW 250
26984: PPUSH
26985: LD_EXP 59
26989: PPUSH
26990: CALL_OW 251
26994: PPUSH
26995: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
26999: LD_EXP 46
27003: PPUSH
27004: CALL_OW 87
// wait ( 0 0$1 ) ;
27008: LD_INT 35
27010: PPUSH
27011: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 6 ;
27015: LD_EXP 46
27019: PPUSH
27020: LD_EXP 59
27024: PPUSH
27025: CALL_OW 296
27029: PUSH
27030: LD_INT 6
27032: LESS
27033: IFFALSE 26946
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
27035: LD_EXP 46
27039: PUSH
27040: LD_EXP 59
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
27053: LD_EXP 46
27057: PPUSH
27058: LD_EXP 59
27062: PPUSH
27063: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
27067: LD_EXP 59
27071: PPUSH
27072: LD_EXP 46
27076: PPUSH
27077: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
27081: LD_EXP 46
27085: PPUSH
27086: LD_STRING D10a-Bur-1
27088: PPUSH
27089: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
27093: LD_EXP 59
27097: PPUSH
27098: LD_STRING D10a-Pop-1
27100: PPUSH
27101: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
27105: LD_EXP 46
27109: PPUSH
27110: LD_STRING D10a-Bur-2
27112: PPUSH
27113: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
27117: LD_EXP 59
27121: PPUSH
27122: LD_STRING D10a-Pop-2
27124: PPUSH
27125: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
27129: LD_EXP 46
27133: PPUSH
27134: LD_STRING D10a-Bur-3
27136: PPUSH
27137: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
27141: LD_EXP 59
27145: PPUSH
27146: LD_STRING D10a-Pop-3
27148: PPUSH
27149: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
27153: LD_EXP 46
27157: PPUSH
27158: LD_STRING D10a-Bur-4
27160: PPUSH
27161: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
27165: LD_EXP 59
27169: PPUSH
27170: LD_STRING D10a-Pop-4
27172: PPUSH
27173: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
27177: LD_EXP 46
27181: PPUSH
27182: LD_STRING D10a-Bur-5
27184: PPUSH
27185: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
27189: LD_EXP 59
27193: PPUSH
27194: LD_STRING D10a-Pop-5
27196: PPUSH
27197: CALL_OW 88
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
27201: LD_INT 22
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 21
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PPUSH
27225: CALL_OW 69
27229: PPUSH
27230: LD_INT 83
27232: PPUSH
27233: LD_INT 157
27235: PPUSH
27236: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
27240: LD_EXP 76
27244: PPUSH
27245: LD_INT 83
27247: PPUSH
27248: LD_INT 157
27250: PPUSH
27251: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
27255: LD_EXP 46
27259: PPUSH
27260: CALL_OW 87
// wait ( 0 0$1 ) ;
27264: LD_INT 35
27266: PPUSH
27267: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 19 ;
27271: LD_EXP 46
27275: PPUSH
27276: LD_EXP 57
27280: PPUSH
27281: CALL_OW 296
27285: PUSH
27286: LD_INT 19
27288: GREATER
27289: IFFALSE 27255
// CenterNowOnXY ( 113 , 96 ) ;
27291: LD_INT 113
27293: PPUSH
27294: LD_INT 96
27296: PPUSH
27297: CALL_OW 86
// canDestroyBeriaBase = true ;
27301: LD_ADDR_EXP 28
27305: PUSH
27306: LD_INT 1
27308: ST_TO_ADDR
// for building in FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_INT 25
27316: PPUSH
27317: LD_INT 22
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 21
27329: PUSH
27330: LD_INT 3
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PPUSH
27341: CALL_OW 70
27345: PUSH
27346: FOR_IN
27347: IFFALSE 27379
// begin AddComAttackUnit ( northGroup , building ) ;
27349: LD_EXP 84
27353: PPUSH
27354: LD_VAR 0 3
27358: PPUSH
27359: CALL_OW 175
// AddComAttackUnit ( southGroup , building ) ;
27363: LD_EXP 85
27367: PPUSH
27368: LD_VAR 0 3
27372: PPUSH
27373: CALL_OW 175
// end ;
27377: GO 27346
27379: POP
27380: POP
// wait ( 0 0$35 ) ;
27381: LD_INT 1225
27383: PPUSH
27384: CALL_OW 67
// FinishMission ;
27388: CALL 18971 0 0
// end ;
27392: PPOPN 3
27394: END
// every 1 trigger immortalSurvivors do var unit ;
27395: LD_EXP 25
27399: IFFALSE 27437
27401: GO 27403
27403: DISABLE
27404: LD_INT 0
27406: PPUSH
// begin enable ;
27407: ENABLE
// for unit in survivorsArabianAttack do
27408: LD_ADDR_VAR 0 1
27412: PUSH
27413: LD_EXP 76
27417: PUSH
27418: FOR_IN
27419: IFFALSE 27435
// SetLives ( unit , 1000 ) ;
27421: LD_VAR 0 1
27425: PPUSH
27426: LD_INT 1000
27428: PPUSH
27429: CALL_OW 234
27433: GO 27418
27435: POP
27436: POP
// end ; end_of_file
27437: PPOPN 1
27439: END
// every 0 0$30 do
27440: GO 27442
27442: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
27443: LD_INT 3
27445: PPUSH
27446: LD_INT 5
27448: PPUSH
27449: CALL_OW 12
27453: PPUSH
27454: LD_INT 76
27456: PPUSH
27457: LD_INT 111
27459: PPUSH
27460: LD_INT 5
27462: PPUSH
27463: LD_INT 1
27465: PPUSH
27466: CALL_OW 56
27470: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
27471: LD_EXP 5
27475: IFFALSE 27547
27477: GO 27479
27479: DISABLE
27480: LD_INT 0
27482: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
27483: LD_INT 50
27485: PPUSH
27486: LD_INT 4200
27488: PPUSH
27489: CALL_OW 12
27493: PPUSH
27494: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
27498: LD_VAR 0 1
27502: PUSH
27503: LD_INT 175
27505: MUL
27506: PPUSH
27507: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
27511: LD_ADDR_VAR 0 1
27515: PUSH
27516: LD_VAR 0 1
27520: PUSH
27521: LD_INT 1
27523: PLUS
27524: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27525: LD_INT 3
27527: PPUSH
27528: LD_INT 5
27530: PPUSH
27531: CALL_OW 12
27535: PPUSH
27536: LD_INT 6
27538: PPUSH
27539: LD_INT 1
27541: PPUSH
27542: CALL_OW 55
// enable ;
27546: ENABLE
// end ; end_of_file
27547: PPOPN 1
27549: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
27550: LD_EXP 86
27554: IFFALSE 27717
27556: GO 27558
27558: DISABLE
// begin enable ;
27559: ENABLE
// case counterIndex of 1 :
27560: LD_EXP 87
27564: PUSH
27565: LD_INT 1
27567: DOUBLE
27568: EQUAL
27569: IFTRUE 27573
27571: GO 27590
27573: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
27574: LD_ADDR_EXP 38
27578: PUSH
27579: LD_EXP 38
27583: PUSH
27584: LD_INT 35
27586: MINUS
27587: ST_TO_ADDR
27588: GO 27717
27590: LD_INT 2
27592: DOUBLE
27593: EQUAL
27594: IFTRUE 27598
27596: GO 27632
27598: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
27599: LD_ADDR_OWVAR 47
27603: PUSH
27604: LD_STRING #Ru03-1
27606: PUSH
27607: LD_EXP 15
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27616: LD_ADDR_EXP 15
27620: PUSH
27621: LD_EXP 15
27625: PUSH
27626: LD_INT 35
27628: MINUS
27629: ST_TO_ADDR
// end ; 3 :
27630: GO 27717
27632: LD_INT 3
27634: DOUBLE
27635: EQUAL
27636: IFTRUE 27640
27638: GO 27674
27640: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
27641: LD_ADDR_OWVAR 47
27645: PUSH
27646: LD_STRING #Ru03-2
27648: PUSH
27649: LD_EXP 15
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
27658: LD_ADDR_EXP 15
27662: PUSH
27663: LD_EXP 15
27667: PUSH
27668: LD_INT 35
27670: MINUS
27671: ST_TO_ADDR
// end ; 4 :
27672: GO 27717
27674: LD_INT 4
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27682
27680: GO 27716
27682: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
27683: LD_ADDR_OWVAR 47
27687: PUSH
27688: LD_STRING #Ru03-3
27690: PUSH
27691: LD_EXP 14
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
27700: LD_ADDR_EXP 14
27704: PUSH
27705: LD_EXP 14
27709: PUSH
27710: LD_INT 35
27712: MINUS
27713: ST_TO_ADDR
// end ; end ;
27714: GO 27717
27716: POP
// end ; end_of_file
27717: END
// every 7 7$0 do
27718: GO 27720
27720: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27721: LD_INT 3
27723: PPUSH
27724: LD_INT 1
27726: PPUSH
27727: LD_INT 0
27729: PPUSH
27730: LD_INT 7
27732: PUSH
27733: LD_INT 9
27735: PUSH
27736: LD_INT 8
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: PPUSH
27747: LD_INT 3
27749: PPUSH
27750: CALL_OW 12
27754: ARRAY
27755: PPUSH
27756: CALL 5767 0 4
27760: END
// every 12 12$0 do
27761: GO 27763
27763: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 1 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27764: LD_INT 4
27766: PPUSH
27767: LD_INT 2
27769: PPUSH
27770: LD_INT 1
27772: PPUSH
27773: LD_INT 7
27775: PUSH
27776: LD_INT 9
27778: PUSH
27779: LD_INT 8
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: PPUSH
27790: LD_INT 3
27792: PPUSH
27793: CALL_OW 12
27797: ARRAY
27798: PPUSH
27799: CALL 5767 0 4
27803: END
// every 20 20$0 do
27804: GO 27806
27806: DISABLE
// PrepareAmericanSupportTroops ( 6 , 2 , 0 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ;
27807: LD_INT 6
27809: PPUSH
27810: LD_INT 2
27812: PPUSH
27813: LD_INT 0
27815: PPUSH
27816: LD_INT 7
27818: PUSH
27819: LD_INT 9
27821: PUSH
27822: LD_INT 8
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PPUSH
27833: LD_INT 3
27835: PPUSH
27836: CALL_OW 12
27840: ARRAY
27841: PPUSH
27842: CALL 5767 0 4
27846: END
// every 23 23$0 do
27847: GO 27849
27849: DISABLE
// PrepareAmericanSupportTroops ( 5 , 1 , 3 , [ NorthAmericanSpawnArea , SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 3 ) ] ) ; end_of_file
27850: LD_INT 5
27852: PPUSH
27853: LD_INT 1
27855: PPUSH
27856: LD_INT 3
27858: PPUSH
27859: LD_INT 7
27861: PUSH
27862: LD_INT 9
27864: PUSH
27865: LD_INT 8
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_INT 3
27878: PPUSH
27879: CALL_OW 12
27883: ARRAY
27884: PPUSH
27885: CALL 5767 0 4
27889: END
// export function Nef_PrepareNature ; var i , un ; begin
27890: LD_INT 0
27892: PPUSH
27893: PPUSH
27894: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27895: LD_ADDR_VAR 0 2
27899: PUSH
27900: DOUBLE
27901: LD_INT 1
27903: DEC
27904: ST_TO_ADDR
27905: LD_EXP 30
27909: PUSH
27910: LD_INT 1
27912: ARRAY
27913: PUSH
27914: FOR_TO
27915: IFFALSE 28025
// begin uc_side = 0 ;
27917: LD_ADDR_OWVAR 20
27921: PUSH
27922: LD_INT 0
27924: ST_TO_ADDR
// uc_nation = nation_nature ;
27925: LD_ADDR_OWVAR 21
27929: PUSH
27930: LD_INT 0
27932: ST_TO_ADDR
// hc_class = class_apeman ;
27933: LD_ADDR_OWVAR 28
27937: PUSH
27938: LD_INT 12
27940: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27941: LD_ADDR_OWVAR 31
27945: PUSH
27946: LD_EXP 31
27950: PUSH
27951: LD_INT 1
27953: ARRAY
27954: PUSH
27955: LD_EXP 31
27959: PUSH
27960: LD_INT 2
27962: ARRAY
27963: PUSH
27964: LD_EXP 31
27968: PUSH
27969: LD_INT 3
27971: ARRAY
27972: PUSH
27973: LD_EXP 31
27977: PUSH
27978: LD_INT 4
27980: ARRAY
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27988: LD_ADDR_OWVAR 35
27992: PUSH
27993: LD_EXP 32
27997: ST_TO_ADDR
// un = CreateHuman ;
27998: LD_ADDR_VAR 0 3
28002: PUSH
28003: CALL_OW 44
28007: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28008: LD_VAR 0 3
28012: PPUSH
28013: LD_INT 27
28015: PPUSH
28016: LD_INT 0
28018: PPUSH
28019: CALL_OW 49
// end ;
28023: GO 27914
28025: POP
28026: POP
// for i := 1 to animalsAmount [ 2 ] do
28027: LD_ADDR_VAR 0 2
28031: PUSH
28032: DOUBLE
28033: LD_INT 1
28035: DEC
28036: ST_TO_ADDR
28037: LD_EXP 30
28041: PUSH
28042: LD_INT 2
28044: ARRAY
28045: PUSH
28046: FOR_TO
28047: IFFALSE 28157
// begin uc_side = 0 ;
28049: LD_ADDR_OWVAR 20
28053: PUSH
28054: LD_INT 0
28056: ST_TO_ADDR
// uc_nation = nation_nature ;
28057: LD_ADDR_OWVAR 21
28061: PUSH
28062: LD_INT 0
28064: ST_TO_ADDR
// hc_class = class_phororhacos ;
28065: LD_ADDR_OWVAR 28
28069: PUSH
28070: LD_INT 18
28072: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28073: LD_ADDR_OWVAR 31
28077: PUSH
28078: LD_EXP 31
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: PUSH
28087: LD_EXP 31
28091: PUSH
28092: LD_INT 2
28094: ARRAY
28095: PUSH
28096: LD_EXP 31
28100: PUSH
28101: LD_INT 3
28103: ARRAY
28104: PUSH
28105: LD_EXP 31
28109: PUSH
28110: LD_INT 4
28112: ARRAY
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28120: LD_ADDR_OWVAR 35
28124: PUSH
28125: LD_EXP 32
28129: ST_TO_ADDR
// un = CreateHuman ;
28130: LD_ADDR_VAR 0 3
28134: PUSH
28135: CALL_OW 44
28139: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28140: LD_VAR 0 3
28144: PPUSH
28145: LD_INT 27
28147: PPUSH
28148: LD_INT 0
28150: PPUSH
28151: CALL_OW 49
// end ;
28155: GO 28046
28157: POP
28158: POP
// for i := 1 to animalsAmount [ 3 ] do
28159: LD_ADDR_VAR 0 2
28163: PUSH
28164: DOUBLE
28165: LD_INT 1
28167: DEC
28168: ST_TO_ADDR
28169: LD_EXP 30
28173: PUSH
28174: LD_INT 3
28176: ARRAY
28177: PUSH
28178: FOR_TO
28179: IFFALSE 28289
// begin uc_side = 0 ;
28181: LD_ADDR_OWVAR 20
28185: PUSH
28186: LD_INT 0
28188: ST_TO_ADDR
// uc_nation = nation_nature ;
28189: LD_ADDR_OWVAR 21
28193: PUSH
28194: LD_INT 0
28196: ST_TO_ADDR
// hc_class = class_tiger ;
28197: LD_ADDR_OWVAR 28
28201: PUSH
28202: LD_INT 14
28204: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28205: LD_ADDR_OWVAR 31
28209: PUSH
28210: LD_EXP 31
28214: PUSH
28215: LD_INT 1
28217: ARRAY
28218: PUSH
28219: LD_EXP 31
28223: PUSH
28224: LD_INT 2
28226: ARRAY
28227: PUSH
28228: LD_EXP 31
28232: PUSH
28233: LD_INT 3
28235: ARRAY
28236: PUSH
28237: LD_EXP 31
28241: PUSH
28242: LD_INT 4
28244: ARRAY
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28252: LD_ADDR_OWVAR 35
28256: PUSH
28257: LD_EXP 32
28261: ST_TO_ADDR
// un = CreateHuman ;
28262: LD_ADDR_VAR 0 3
28266: PUSH
28267: CALL_OW 44
28271: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28272: LD_VAR 0 3
28276: PPUSH
28277: LD_INT 27
28279: PPUSH
28280: LD_INT 0
28282: PPUSH
28283: CALL_OW 49
// end ;
28287: GO 28178
28289: POP
28290: POP
// for i := 1 to animalsAmount [ 4 ] do
28291: LD_ADDR_VAR 0 2
28295: PUSH
28296: DOUBLE
28297: LD_INT 1
28299: DEC
28300: ST_TO_ADDR
28301: LD_EXP 30
28305: PUSH
28306: LD_INT 4
28308: ARRAY
28309: PUSH
28310: FOR_TO
28311: IFFALSE 28421
// begin uc_side = 0 ;
28313: LD_ADDR_OWVAR 20
28317: PUSH
28318: LD_INT 0
28320: ST_TO_ADDR
// uc_nation = nation_nature ;
28321: LD_ADDR_OWVAR 21
28325: PUSH
28326: LD_INT 0
28328: ST_TO_ADDR
// hc_class = 21 ;
28329: LD_ADDR_OWVAR 28
28333: PUSH
28334: LD_INT 21
28336: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
28337: LD_ADDR_OWVAR 31
28341: PUSH
28342: LD_EXP 31
28346: PUSH
28347: LD_INT 1
28349: ARRAY
28350: PUSH
28351: LD_EXP 31
28355: PUSH
28356: LD_INT 2
28358: ARRAY
28359: PUSH
28360: LD_EXP 31
28364: PUSH
28365: LD_INT 3
28367: ARRAY
28368: PUSH
28369: LD_EXP 31
28373: PUSH
28374: LD_INT 4
28376: ARRAY
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
28384: LD_ADDR_OWVAR 35
28388: PUSH
28389: LD_EXP 32
28393: ST_TO_ADDR
// un = CreateHuman ;
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: CALL_OW 44
28403: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28404: LD_VAR 0 3
28408: PPUSH
28409: LD_INT 27
28411: PPUSH
28412: LD_INT 0
28414: PPUSH
28415: CALL_OW 49
// end ;
28419: GO 28310
28421: POP
28422: POP
// for i := 1 to animalsAmount [ 5 ] do
28423: LD_ADDR_VAR 0 2
28427: PUSH
28428: DOUBLE
28429: LD_INT 1
28431: DEC
28432: ST_TO_ADDR
28433: LD_EXP 30
28437: PUSH
28438: LD_INT 5
28440: ARRAY
28441: PUSH
28442: FOR_TO
28443: IFFALSE 28504
// begin uc_side = 0 ;
28445: LD_ADDR_OWVAR 20
28449: PUSH
28450: LD_INT 0
28452: ST_TO_ADDR
// uc_nation = nation_nature ;
28453: LD_ADDR_OWVAR 21
28457: PUSH
28458: LD_INT 0
28460: ST_TO_ADDR
// vc_chassis := 31 ;
28461: LD_ADDR_OWVAR 37
28465: PUSH
28466: LD_INT 31
28468: ST_TO_ADDR
// vc_control := control_rider ;
28469: LD_ADDR_OWVAR 38
28473: PUSH
28474: LD_INT 4
28476: ST_TO_ADDR
// un := CreateVehicle ;
28477: LD_ADDR_VAR 0 3
28481: PUSH
28482: CALL_OW 45
28486: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
28487: LD_VAR 0 3
28491: PPUSH
28492: LD_INT 27
28494: PPUSH
28495: LD_INT 0
28497: PPUSH
28498: CALL_OW 49
// end ;
28502: GO 28442
28504: POP
28505: POP
// end ; end_of_file
28506: LD_VAR 0 1
28510: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
28511: GO 28513
28513: DISABLE
// begin ru_radar := 98 ;
28514: LD_ADDR_EXP 88
28518: PUSH
28519: LD_INT 98
28521: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
28522: LD_ADDR_EXP 89
28526: PUSH
28527: LD_INT 89
28529: ST_TO_ADDR
// us_hack := 99 ;
28530: LD_ADDR_EXP 90
28534: PUSH
28535: LD_INT 99
28537: ST_TO_ADDR
// us_artillery := 97 ;
28538: LD_ADDR_EXP 91
28542: PUSH
28543: LD_INT 97
28545: ST_TO_ADDR
// ar_bio_bomb := 91 ;
28546: LD_ADDR_EXP 92
28550: PUSH
28551: LD_INT 91
28553: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
28554: LD_ADDR_EXP 93
28558: PUSH
28559: LD_INT 92
28561: ST_TO_ADDR
// tech_Artillery := 80 ;
28562: LD_ADDR_EXP 94
28566: PUSH
28567: LD_INT 80
28569: ST_TO_ADDR
// tech_RadMat := 81 ;
28570: LD_ADDR_EXP 95
28574: PUSH
28575: LD_INT 81
28577: ST_TO_ADDR
// tech_BasicTools := 82 ;
28578: LD_ADDR_EXP 96
28582: PUSH
28583: LD_INT 82
28585: ST_TO_ADDR
// tech_Cargo := 83 ;
28586: LD_ADDR_EXP 97
28590: PUSH
28591: LD_INT 83
28593: ST_TO_ADDR
// tech_Track := 84 ;
28594: LD_ADDR_EXP 98
28598: PUSH
28599: LD_INT 84
28601: ST_TO_ADDR
// tech_Crane := 85 ;
28602: LD_ADDR_EXP 99
28606: PUSH
28607: LD_INT 85
28609: ST_TO_ADDR
// tech_Bulldozer := 86 ;
28610: LD_ADDR_EXP 100
28614: PUSH
28615: LD_INT 86
28617: ST_TO_ADDR
// tech_Hovercraft := 87 ;
28618: LD_ADDR_EXP 101
28622: PUSH
28623: LD_INT 87
28625: ST_TO_ADDR
// end ; end_of_file
28626: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28627: LD_INT 0
28629: PPUSH
28630: PPUSH
// if exist_mode then
28631: LD_VAR 0 2
28635: IFFALSE 28660
// unit := CreateCharacter ( prefix & ident ) else
28637: LD_ADDR_VAR 0 5
28641: PUSH
28642: LD_VAR 0 3
28646: PUSH
28647: LD_VAR 0 1
28651: STR
28652: PPUSH
28653: CALL_OW 34
28657: ST_TO_ADDR
28658: GO 28675
// unit := NewCharacter ( ident ) ;
28660: LD_ADDR_VAR 0 5
28664: PUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 25
28674: ST_TO_ADDR
// result := unit ;
28675: LD_ADDR_VAR 0 4
28679: PUSH
28680: LD_VAR 0 5
28684: ST_TO_ADDR
// end ;
28685: LD_VAR 0 4
28689: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28690: LD_INT 0
28692: PPUSH
28693: PPUSH
// if not side or not nation then
28694: LD_VAR 0 1
28698: NOT
28699: PUSH
28700: LD_VAR 0 2
28704: NOT
28705: OR
28706: IFFALSE 28710
// exit ;
28708: GO 29474
// case nation of nation_american :
28710: LD_VAR 0 2
28714: PUSH
28715: LD_INT 1
28717: DOUBLE
28718: EQUAL
28719: IFTRUE 28723
28721: GO 28937
28723: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28724: LD_ADDR_VAR 0 4
28728: PUSH
28729: LD_INT 35
28731: PUSH
28732: LD_INT 45
28734: PUSH
28735: LD_INT 46
28737: PUSH
28738: LD_INT 47
28740: PUSH
28741: LD_INT 82
28743: PUSH
28744: LD_INT 83
28746: PUSH
28747: LD_INT 84
28749: PUSH
28750: LD_INT 85
28752: PUSH
28753: LD_INT 86
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: LD_INT 6
28764: PUSH
28765: LD_INT 15
28767: PUSH
28768: LD_INT 16
28770: PUSH
28771: LD_INT 7
28773: PUSH
28774: LD_INT 12
28776: PUSH
28777: LD_INT 13
28779: PUSH
28780: LD_INT 10
28782: PUSH
28783: LD_INT 14
28785: PUSH
28786: LD_INT 20
28788: PUSH
28789: LD_INT 21
28791: PUSH
28792: LD_INT 22
28794: PUSH
28795: LD_INT 25
28797: PUSH
28798: LD_INT 32
28800: PUSH
28801: LD_INT 27
28803: PUSH
28804: LD_INT 36
28806: PUSH
28807: LD_INT 69
28809: PUSH
28810: LD_INT 39
28812: PUSH
28813: LD_INT 34
28815: PUSH
28816: LD_INT 40
28818: PUSH
28819: LD_INT 48
28821: PUSH
28822: LD_INT 49
28824: PUSH
28825: LD_INT 50
28827: PUSH
28828: LD_INT 51
28830: PUSH
28831: LD_INT 52
28833: PUSH
28834: LD_INT 53
28836: PUSH
28837: LD_INT 54
28839: PUSH
28840: LD_INT 55
28842: PUSH
28843: LD_INT 56
28845: PUSH
28846: LD_INT 57
28848: PUSH
28849: LD_INT 58
28851: PUSH
28852: LD_INT 59
28854: PUSH
28855: LD_INT 60
28857: PUSH
28858: LD_INT 61
28860: PUSH
28861: LD_INT 62
28863: PUSH
28864: LD_INT 80
28866: PUSH
28867: LD_INT 82
28869: PUSH
28870: LD_INT 83
28872: PUSH
28873: LD_INT 84
28875: PUSH
28876: LD_INT 85
28878: PUSH
28879: LD_INT 86
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: ST_TO_ADDR
28935: GO 29398
28937: LD_INT 2
28939: DOUBLE
28940: EQUAL
28941: IFTRUE 28945
28943: GO 29167
28945: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
28946: LD_ADDR_VAR 0 4
28950: PUSH
28951: LD_INT 35
28953: PUSH
28954: LD_INT 45
28956: PUSH
28957: LD_INT 46
28959: PUSH
28960: LD_INT 47
28962: PUSH
28963: LD_INT 82
28965: PUSH
28966: LD_INT 83
28968: PUSH
28969: LD_INT 84
28971: PUSH
28972: LD_INT 85
28974: PUSH
28975: LD_INT 87
28977: PUSH
28978: LD_INT 70
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: LD_INT 11
28986: PUSH
28987: LD_INT 3
28989: PUSH
28990: LD_INT 4
28992: PUSH
28993: LD_INT 5
28995: PUSH
28996: LD_INT 6
28998: PUSH
28999: LD_INT 15
29001: PUSH
29002: LD_INT 18
29004: PUSH
29005: LD_INT 7
29007: PUSH
29008: LD_INT 17
29010: PUSH
29011: LD_INT 8
29013: PUSH
29014: LD_INT 20
29016: PUSH
29017: LD_INT 21
29019: PUSH
29020: LD_INT 22
29022: PUSH
29023: LD_INT 72
29025: PUSH
29026: LD_INT 26
29028: PUSH
29029: LD_INT 69
29031: PUSH
29032: LD_INT 39
29034: PUSH
29035: LD_INT 40
29037: PUSH
29038: LD_INT 41
29040: PUSH
29041: LD_INT 42
29043: PUSH
29044: LD_INT 43
29046: PUSH
29047: LD_INT 48
29049: PUSH
29050: LD_INT 49
29052: PUSH
29053: LD_INT 50
29055: PUSH
29056: LD_INT 51
29058: PUSH
29059: LD_INT 52
29061: PUSH
29062: LD_INT 53
29064: PUSH
29065: LD_INT 54
29067: PUSH
29068: LD_INT 55
29070: PUSH
29071: LD_INT 56
29073: PUSH
29074: LD_INT 60
29076: PUSH
29077: LD_INT 61
29079: PUSH
29080: LD_INT 62
29082: PUSH
29083: LD_INT 66
29085: PUSH
29086: LD_INT 67
29088: PUSH
29089: LD_INT 68
29091: PUSH
29092: LD_INT 81
29094: PUSH
29095: LD_INT 82
29097: PUSH
29098: LD_INT 83
29100: PUSH
29101: LD_INT 84
29103: PUSH
29104: LD_INT 85
29106: PUSH
29107: LD_INT 87
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: ST_TO_ADDR
29165: GO 29398
29167: LD_INT 3
29169: DOUBLE
29170: EQUAL
29171: IFTRUE 29175
29173: GO 29397
29175: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29176: LD_ADDR_VAR 0 4
29180: PUSH
29181: LD_INT 46
29183: PUSH
29184: LD_INT 47
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: LD_INT 2
29192: PUSH
29193: LD_INT 82
29195: PUSH
29196: LD_INT 83
29198: PUSH
29199: LD_INT 84
29201: PUSH
29202: LD_INT 85
29204: PUSH
29205: LD_INT 86
29207: PUSH
29208: LD_INT 11
29210: PUSH
29211: LD_INT 9
29213: PUSH
29214: LD_INT 20
29216: PUSH
29217: LD_INT 19
29219: PUSH
29220: LD_INT 21
29222: PUSH
29223: LD_INT 24
29225: PUSH
29226: LD_INT 22
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 28
29234: PUSH
29235: LD_INT 29
29237: PUSH
29238: LD_INT 30
29240: PUSH
29241: LD_INT 31
29243: PUSH
29244: LD_INT 37
29246: PUSH
29247: LD_INT 38
29249: PUSH
29250: LD_INT 32
29252: PUSH
29253: LD_INT 27
29255: PUSH
29256: LD_INT 33
29258: PUSH
29259: LD_INT 69
29261: PUSH
29262: LD_INT 39
29264: PUSH
29265: LD_INT 34
29267: PUSH
29268: LD_INT 40
29270: PUSH
29271: LD_INT 71
29273: PUSH
29274: LD_INT 23
29276: PUSH
29277: LD_INT 44
29279: PUSH
29280: LD_INT 48
29282: PUSH
29283: LD_INT 49
29285: PUSH
29286: LD_INT 50
29288: PUSH
29289: LD_INT 51
29291: PUSH
29292: LD_INT 52
29294: PUSH
29295: LD_INT 53
29297: PUSH
29298: LD_INT 54
29300: PUSH
29301: LD_INT 55
29303: PUSH
29304: LD_INT 56
29306: PUSH
29307: LD_INT 57
29309: PUSH
29310: LD_INT 58
29312: PUSH
29313: LD_INT 59
29315: PUSH
29316: LD_INT 63
29318: PUSH
29319: LD_INT 64
29321: PUSH
29322: LD_INT 65
29324: PUSH
29325: LD_INT 82
29327: PUSH
29328: LD_INT 83
29330: PUSH
29331: LD_INT 84
29333: PUSH
29334: LD_INT 85
29336: PUSH
29337: LD_INT 86
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
29395: GO 29398
29397: POP
// if state > - 1 and state < 3 then
29398: LD_VAR 0 3
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: GREATER
29407: PUSH
29408: LD_VAR 0 3
29412: PUSH
29413: LD_INT 3
29415: LESS
29416: AND
29417: IFFALSE 29474
// for i in result do
29419: LD_ADDR_VAR 0 5
29423: PUSH
29424: LD_VAR 0 4
29428: PUSH
29429: FOR_IN
29430: IFFALSE 29472
// if GetTech ( i , side ) <> state then
29432: LD_VAR 0 5
29436: PPUSH
29437: LD_VAR 0 1
29441: PPUSH
29442: CALL_OW 321
29446: PUSH
29447: LD_VAR 0 3
29451: NONEQUAL
29452: IFFALSE 29470
// result := result diff i ;
29454: LD_ADDR_VAR 0 4
29458: PUSH
29459: LD_VAR 0 4
29463: PUSH
29464: LD_VAR 0 5
29468: DIFF
29469: ST_TO_ADDR
29470: GO 29429
29472: POP
29473: POP
// end ;
29474: LD_VAR 0 4
29478: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29479: LD_INT 0
29481: PPUSH
29482: PPUSH
29483: PPUSH
// result := true ;
29484: LD_ADDR_VAR 0 3
29488: PUSH
29489: LD_INT 1
29491: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29492: LD_ADDR_VAR 0 5
29496: PUSH
29497: LD_VAR 0 2
29501: PPUSH
29502: CALL_OW 480
29506: ST_TO_ADDR
// if not tmp then
29507: LD_VAR 0 5
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29565
// for i in tmp do
29516: LD_ADDR_VAR 0 4
29520: PUSH
29521: LD_VAR 0 5
29525: PUSH
29526: FOR_IN
29527: IFFALSE 29563
// if GetTech ( i , side ) <> state_researched then
29529: LD_VAR 0 4
29533: PPUSH
29534: LD_VAR 0 1
29538: PPUSH
29539: CALL_OW 321
29543: PUSH
29544: LD_INT 2
29546: NONEQUAL
29547: IFFALSE 29561
// begin result := false ;
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: LD_INT 0
29556: ST_TO_ADDR
// exit ;
29557: POP
29558: POP
29559: GO 29565
// end ;
29561: GO 29526
29563: POP
29564: POP
// end ;
29565: LD_VAR 0 3
29569: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29570: LD_INT 0
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
29576: PPUSH
29577: PPUSH
29578: PPUSH
29579: PPUSH
29580: PPUSH
29581: PPUSH
29582: PPUSH
29583: PPUSH
29584: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29585: LD_VAR 0 1
29589: NOT
29590: PUSH
29591: LD_VAR 0 1
29595: PPUSH
29596: CALL_OW 257
29600: PUSH
29601: LD_INT 9
29603: NONEQUAL
29604: OR
29605: IFFALSE 29609
// exit ;
29607: GO 30182
// side := GetSide ( unit ) ;
29609: LD_ADDR_VAR 0 9
29613: PUSH
29614: LD_VAR 0 1
29618: PPUSH
29619: CALL_OW 255
29623: ST_TO_ADDR
// tech_space := tech_spacanom ;
29624: LD_ADDR_VAR 0 12
29628: PUSH
29629: LD_INT 29
29631: ST_TO_ADDR
// tech_time := tech_taurad ;
29632: LD_ADDR_VAR 0 13
29636: PUSH
29637: LD_INT 28
29639: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29640: LD_ADDR_VAR 0 11
29644: PUSH
29645: LD_VAR 0 1
29649: PPUSH
29650: CALL_OW 310
29654: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29655: LD_VAR 0 11
29659: PPUSH
29660: CALL_OW 247
29664: PUSH
29665: LD_INT 2
29667: EQUAL
29668: IFFALSE 29672
// exit ;
29670: GO 30182
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29672: LD_ADDR_VAR 0 8
29676: PUSH
29677: LD_INT 81
29679: PUSH
29680: LD_VAR 0 9
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 3
29691: PUSH
29692: LD_INT 21
29694: PUSH
29695: LD_INT 3
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: ST_TO_ADDR
// if not tmp then
29715: LD_VAR 0 8
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 30182
// if in_unit then
29724: LD_VAR 0 11
29728: IFFALSE 29752
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29730: LD_ADDR_VAR 0 10
29734: PUSH
29735: LD_VAR 0 8
29739: PPUSH
29740: LD_VAR 0 11
29744: PPUSH
29745: CALL_OW 74
29749: ST_TO_ADDR
29750: GO 29772
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29752: LD_ADDR_VAR 0 10
29756: PUSH
29757: LD_VAR 0 8
29761: PPUSH
29762: LD_VAR 0 1
29766: PPUSH
29767: CALL_OW 74
29771: ST_TO_ADDR
// if not enemy then
29772: LD_VAR 0 10
29776: NOT
29777: IFFALSE 29781
// exit ;
29779: GO 30182
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29781: LD_VAR 0 11
29785: PUSH
29786: LD_VAR 0 11
29790: PPUSH
29791: LD_VAR 0 10
29795: PPUSH
29796: CALL_OW 296
29800: PUSH
29801: LD_INT 13
29803: GREATER
29804: AND
29805: PUSH
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_VAR 0 10
29815: PPUSH
29816: CALL_OW 296
29820: PUSH
29821: LD_INT 12
29823: GREATER
29824: OR
29825: IFFALSE 29829
// exit ;
29827: GO 30182
// missile := [ 1 ] ;
29829: LD_ADDR_VAR 0 14
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29840: LD_VAR 0 9
29844: PPUSH
29845: LD_VAR 0 12
29849: PPUSH
29850: CALL_OW 325
29854: IFFALSE 29883
// missile := Insert ( missile , missile + 1 , 2 ) ;
29856: LD_ADDR_VAR 0 14
29860: PUSH
29861: LD_VAR 0 14
29865: PPUSH
29866: LD_VAR 0 14
29870: PUSH
29871: LD_INT 1
29873: PLUS
29874: PPUSH
29875: LD_INT 2
29877: PPUSH
29878: CALL_OW 2
29882: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29883: LD_VAR 0 9
29887: PPUSH
29888: LD_VAR 0 13
29892: PPUSH
29893: CALL_OW 325
29897: PUSH
29898: LD_VAR 0 10
29902: PPUSH
29903: CALL_OW 255
29907: PPUSH
29908: LD_VAR 0 13
29912: PPUSH
29913: CALL_OW 325
29917: NOT
29918: AND
29919: IFFALSE 29948
// missile := Insert ( missile , missile + 1 , 3 ) ;
29921: LD_ADDR_VAR 0 14
29925: PUSH
29926: LD_VAR 0 14
29930: PPUSH
29931: LD_VAR 0 14
29935: PUSH
29936: LD_INT 1
29938: PLUS
29939: PPUSH
29940: LD_INT 3
29942: PPUSH
29943: CALL_OW 2
29947: ST_TO_ADDR
// if missile < 2 then
29948: LD_VAR 0 14
29952: PUSH
29953: LD_INT 2
29955: LESS
29956: IFFALSE 29960
// exit ;
29958: GO 30182
// x := GetX ( enemy ) ;
29960: LD_ADDR_VAR 0 4
29964: PUSH
29965: LD_VAR 0 10
29969: PPUSH
29970: CALL_OW 250
29974: ST_TO_ADDR
// y := GetY ( enemy ) ;
29975: LD_ADDR_VAR 0 5
29979: PUSH
29980: LD_VAR 0 10
29984: PPUSH
29985: CALL_OW 251
29989: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29990: LD_ADDR_VAR 0 6
29994: PUSH
29995: LD_VAR 0 4
29999: PUSH
30000: LD_INT 1
30002: NEG
30003: PPUSH
30004: LD_INT 1
30006: PPUSH
30007: CALL_OW 12
30011: PLUS
30012: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30013: LD_ADDR_VAR 0 7
30017: PUSH
30018: LD_VAR 0 5
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PPUSH
30027: LD_INT 1
30029: PPUSH
30030: CALL_OW 12
30034: PLUS
30035: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30036: LD_VAR 0 6
30040: PPUSH
30041: LD_VAR 0 7
30045: PPUSH
30046: CALL_OW 488
30050: NOT
30051: IFFALSE 30073
// begin _x := x ;
30053: LD_ADDR_VAR 0 6
30057: PUSH
30058: LD_VAR 0 4
30062: ST_TO_ADDR
// _y := y ;
30063: LD_ADDR_VAR 0 7
30067: PUSH
30068: LD_VAR 0 5
30072: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 1
30080: PPUSH
30081: LD_VAR 0 14
30085: PPUSH
30086: CALL_OW 12
30090: ST_TO_ADDR
// case i of 1 :
30091: LD_VAR 0 3
30095: PUSH
30096: LD_INT 1
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30121
30104: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30105: LD_VAR 0 1
30109: PPUSH
30110: LD_VAR 0 10
30114: PPUSH
30115: CALL_OW 115
30119: GO 30182
30121: LD_INT 2
30123: DOUBLE
30124: EQUAL
30125: IFTRUE 30129
30127: GO 30151
30129: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30130: LD_VAR 0 1
30134: PPUSH
30135: LD_VAR 0 6
30139: PPUSH
30140: LD_VAR 0 7
30144: PPUSH
30145: CALL_OW 153
30149: GO 30182
30151: LD_INT 3
30153: DOUBLE
30154: EQUAL
30155: IFTRUE 30159
30157: GO 30181
30159: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30160: LD_VAR 0 1
30164: PPUSH
30165: LD_VAR 0 6
30169: PPUSH
30170: LD_VAR 0 7
30174: PPUSH
30175: CALL_OW 154
30179: GO 30182
30181: POP
// end ;
30182: LD_VAR 0 2
30186: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30187: LD_INT 0
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
// if not unit or not building then
30195: LD_VAR 0 1
30199: NOT
30200: PUSH
30201: LD_VAR 0 2
30205: NOT
30206: OR
30207: IFFALSE 30211
// exit ;
30209: GO 30369
// x := GetX ( building ) ;
30211: LD_ADDR_VAR 0 5
30215: PUSH
30216: LD_VAR 0 2
30220: PPUSH
30221: CALL_OW 250
30225: ST_TO_ADDR
// y := GetY ( building ) ;
30226: LD_ADDR_VAR 0 6
30230: PUSH
30231: LD_VAR 0 2
30235: PPUSH
30236: CALL_OW 251
30240: ST_TO_ADDR
// for i = 0 to 5 do
30241: LD_ADDR_VAR 0 4
30245: PUSH
30246: DOUBLE
30247: LD_INT 0
30249: DEC
30250: ST_TO_ADDR
30251: LD_INT 5
30253: PUSH
30254: FOR_TO
30255: IFFALSE 30367
// begin _x := ShiftX ( x , i , 3 ) ;
30257: LD_ADDR_VAR 0 7
30261: PUSH
30262: LD_VAR 0 5
30266: PPUSH
30267: LD_VAR 0 4
30271: PPUSH
30272: LD_INT 3
30274: PPUSH
30275: CALL_OW 272
30279: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30280: LD_ADDR_VAR 0 8
30284: PUSH
30285: LD_VAR 0 6
30289: PPUSH
30290: LD_VAR 0 4
30294: PPUSH
30295: LD_INT 3
30297: PPUSH
30298: CALL_OW 273
30302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30303: LD_VAR 0 7
30307: PPUSH
30308: LD_VAR 0 8
30312: PPUSH
30313: CALL_OW 488
30317: NOT
30318: IFFALSE 30322
// continue ;
30320: GO 30254
// if HexInfo ( _x , _y ) = 0 then
30322: LD_VAR 0 7
30326: PPUSH
30327: LD_VAR 0 8
30331: PPUSH
30332: CALL_OW 428
30336: PUSH
30337: LD_INT 0
30339: EQUAL
30340: IFFALSE 30365
// begin ComMoveXY ( unit , _x , _y ) ;
30342: LD_VAR 0 1
30346: PPUSH
30347: LD_VAR 0 7
30351: PPUSH
30352: LD_VAR 0 8
30356: PPUSH
30357: CALL_OW 111
// exit ;
30361: POP
30362: POP
30363: GO 30369
// end ; end ;
30365: GO 30254
30367: POP
30368: POP
// end ;
30369: LD_VAR 0 3
30373: RET
// export function ScanBase ( side , base_area ) ; begin
30374: LD_INT 0
30376: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_VAR 0 2
30386: PPUSH
30387: LD_INT 81
30389: PUSH
30390: LD_VAR 0 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PPUSH
30399: CALL_OW 70
30403: ST_TO_ADDR
// end ;
30404: LD_VAR 0 3
30408: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30409: LD_INT 0
30411: PPUSH
30412: PPUSH
30413: PPUSH
30414: PPUSH
// result := false ;
30415: LD_ADDR_VAR 0 2
30419: PUSH
30420: LD_INT 0
30422: ST_TO_ADDR
// side := GetSide ( unit ) ;
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_VAR 0 1
30432: PPUSH
30433: CALL_OW 255
30437: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30438: LD_ADDR_VAR 0 4
30442: PUSH
30443: LD_VAR 0 1
30447: PPUSH
30448: CALL_OW 248
30452: ST_TO_ADDR
// case nat of 1 :
30453: LD_VAR 0 4
30457: PUSH
30458: LD_INT 1
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// tech := tech_lassight ; 2 :
30467: LD_ADDR_VAR 0 5
30471: PUSH
30472: LD_INT 12
30474: ST_TO_ADDR
30475: GO 30516
30477: LD_INT 2
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30496
30485: POP
// tech := tech_mortar ; 3 :
30486: LD_ADDR_VAR 0 5
30490: PUSH
30491: LD_INT 41
30493: ST_TO_ADDR
30494: GO 30516
30496: LD_INT 3
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30515
30504: POP
// tech := tech_bazooka ; end ;
30505: LD_ADDR_VAR 0 5
30509: PUSH
30510: LD_INT 44
30512: ST_TO_ADDR
30513: GO 30516
30515: POP
// if Researched ( side , tech ) then
30516: LD_VAR 0 3
30520: PPUSH
30521: LD_VAR 0 5
30525: PPUSH
30526: CALL_OW 325
30530: IFFALSE 30557
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30532: LD_ADDR_VAR 0 2
30536: PUSH
30537: LD_INT 5
30539: PUSH
30540: LD_INT 8
30542: PUSH
30543: LD_INT 9
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: PUSH
30551: LD_VAR 0 4
30555: ARRAY
30556: ST_TO_ADDR
// end ;
30557: LD_VAR 0 2
30561: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30562: LD_INT 0
30564: PPUSH
30565: PPUSH
30566: PPUSH
// if not mines then
30567: LD_VAR 0 2
30571: NOT
30572: IFFALSE 30576
// exit ;
30574: GO 30720
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30576: LD_ADDR_VAR 0 5
30580: PUSH
30581: LD_INT 81
30583: PUSH
30584: LD_VAR 0 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 3
30595: PUSH
30596: LD_INT 21
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PPUSH
30614: CALL_OW 69
30618: ST_TO_ADDR
// for i in mines do
30619: LD_ADDR_VAR 0 4
30623: PUSH
30624: LD_VAR 0 2
30628: PUSH
30629: FOR_IN
30630: IFFALSE 30718
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30632: LD_VAR 0 4
30636: PUSH
30637: LD_INT 1
30639: ARRAY
30640: PPUSH
30641: LD_VAR 0 4
30645: PUSH
30646: LD_INT 2
30648: ARRAY
30649: PPUSH
30650: CALL_OW 458
30654: NOT
30655: IFFALSE 30659
// continue ;
30657: GO 30629
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30659: LD_VAR 0 4
30663: PUSH
30664: LD_INT 1
30666: ARRAY
30667: PPUSH
30668: LD_VAR 0 4
30672: PUSH
30673: LD_INT 2
30675: ARRAY
30676: PPUSH
30677: CALL_OW 428
30681: PUSH
30682: LD_VAR 0 5
30686: IN
30687: IFFALSE 30716
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30689: LD_VAR 0 4
30693: PUSH
30694: LD_INT 1
30696: ARRAY
30697: PPUSH
30698: LD_VAR 0 4
30702: PUSH
30703: LD_INT 2
30705: ARRAY
30706: PPUSH
30707: LD_VAR 0 1
30711: PPUSH
30712: CALL_OW 456
// end ;
30716: GO 30629
30718: POP
30719: POP
// end ;
30720: LD_VAR 0 3
30724: RET
// export function Count ( array ) ; var i ; begin
30725: LD_INT 0
30727: PPUSH
30728: PPUSH
// result := 0 ;
30729: LD_ADDR_VAR 0 2
30733: PUSH
30734: LD_INT 0
30736: ST_TO_ADDR
// for i in array do
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_VAR 0 1
30746: PUSH
30747: FOR_IN
30748: IFFALSE 30772
// if i then
30750: LD_VAR 0 3
30754: IFFALSE 30770
// result := result + 1 ;
30756: LD_ADDR_VAR 0 2
30760: PUSH
30761: LD_VAR 0 2
30765: PUSH
30766: LD_INT 1
30768: PLUS
30769: ST_TO_ADDR
30770: GO 30747
30772: POP
30773: POP
// end ;
30774: LD_VAR 0 2
30778: RET
// export function IsEmpty ( building ) ; begin
30779: LD_INT 0
30781: PPUSH
// if not building then
30782: LD_VAR 0 1
30786: NOT
30787: IFFALSE 30791
// exit ;
30789: GO 30834
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30791: LD_ADDR_VAR 0 2
30795: PUSH
30796: LD_VAR 0 1
30800: PUSH
30801: LD_INT 22
30803: PUSH
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 255
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 58
30820: PUSH
30821: EMPTY
30822: LIST
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PPUSH
30828: CALL_OW 69
30832: IN
30833: ST_TO_ADDR
// end ;
30834: LD_VAR 0 2
30838: RET
// export function IsNotFull ( building ) ; begin
30839: LD_INT 0
30841: PPUSH
// if not building then
30842: LD_VAR 0 1
30846: NOT
30847: IFFALSE 30851
// exit ;
30849: GO 30870
// result := UnitsInside ( building ) < 6 ;
30851: LD_ADDR_VAR 0 2
30855: PUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: CALL_OW 313
30865: PUSH
30866: LD_INT 6
30868: LESS
30869: ST_TO_ADDR
// end ;
30870: LD_VAR 0 2
30874: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// tmp := [ ] ;
30881: LD_ADDR_VAR 0 3
30885: PUSH
30886: EMPTY
30887: ST_TO_ADDR
// list := [ ] ;
30888: LD_ADDR_VAR 0 5
30892: PUSH
30893: EMPTY
30894: ST_TO_ADDR
// for i = 16 to 25 do
30895: LD_ADDR_VAR 0 4
30899: PUSH
30900: DOUBLE
30901: LD_INT 16
30903: DEC
30904: ST_TO_ADDR
30905: LD_INT 25
30907: PUSH
30908: FOR_TO
30909: IFFALSE 30982
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: LD_VAR 0 3
30920: PUSH
30921: LD_INT 22
30923: PUSH
30924: LD_VAR 0 1
30928: PPUSH
30929: CALL_OW 255
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 91
30940: PUSH
30941: LD_VAR 0 1
30945: PUSH
30946: LD_INT 6
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 30
30956: PUSH
30957: LD_VAR 0 4
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: PPUSH
30974: CALL_OW 69
30978: ADD
30979: ST_TO_ADDR
30980: GO 30908
30982: POP
30983: POP
// for i = 1 to tmp do
30984: LD_ADDR_VAR 0 4
30988: PUSH
30989: DOUBLE
30990: LD_INT 1
30992: DEC
30993: ST_TO_ADDR
30994: LD_VAR 0 3
30998: PUSH
30999: FOR_TO
31000: IFFALSE 31088
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31002: LD_ADDR_VAR 0 5
31006: PUSH
31007: LD_VAR 0 5
31011: PUSH
31012: LD_VAR 0 3
31016: PUSH
31017: LD_VAR 0 4
31021: ARRAY
31022: PPUSH
31023: CALL_OW 266
31027: PUSH
31028: LD_VAR 0 3
31032: PUSH
31033: LD_VAR 0 4
31037: ARRAY
31038: PPUSH
31039: CALL_OW 250
31043: PUSH
31044: LD_VAR 0 3
31048: PUSH
31049: LD_VAR 0 4
31053: ARRAY
31054: PPUSH
31055: CALL_OW 251
31059: PUSH
31060: LD_VAR 0 3
31064: PUSH
31065: LD_VAR 0 4
31069: ARRAY
31070: PPUSH
31071: CALL_OW 254
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: PUSH
31082: EMPTY
31083: LIST
31084: ADD
31085: ST_TO_ADDR
31086: GO 30999
31088: POP
31089: POP
// result := list ;
31090: LD_ADDR_VAR 0 2
31094: PUSH
31095: LD_VAR 0 5
31099: ST_TO_ADDR
// end ;
31100: LD_VAR 0 2
31104: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31105: LD_INT 0
31107: PPUSH
31108: PPUSH
31109: PPUSH
31110: PPUSH
31111: PPUSH
31112: PPUSH
31113: PPUSH
// if not factory then
31114: LD_VAR 0 1
31118: NOT
31119: IFFALSE 31123
// exit ;
31121: GO 31716
// if control = control_apeman then
31123: LD_VAR 0 4
31127: PUSH
31128: LD_INT 5
31130: EQUAL
31131: IFFALSE 31240
// begin tmp := UnitsInside ( factory ) ;
31133: LD_ADDR_VAR 0 8
31137: PUSH
31138: LD_VAR 0 1
31142: PPUSH
31143: CALL_OW 313
31147: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31148: LD_VAR 0 8
31152: PPUSH
31153: LD_INT 25
31155: PUSH
31156: LD_INT 12
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PPUSH
31163: CALL_OW 72
31167: NOT
31168: IFFALSE 31178
// control := control_manual ;
31170: LD_ADDR_VAR 0 4
31174: PUSH
31175: LD_INT 1
31177: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31178: LD_ADDR_VAR 0 8
31182: PUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: CALL 30875 0 1
31192: ST_TO_ADDR
// if tmp then
31193: LD_VAR 0 8
31197: IFFALSE 31240
// begin for i in tmp do
31199: LD_ADDR_VAR 0 7
31203: PUSH
31204: LD_VAR 0 8
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31238
// if i [ 1 ] = b_ext_radio then
31212: LD_VAR 0 7
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PUSH
31221: LD_INT 22
31223: EQUAL
31224: IFFALSE 31236
// begin control := control_remote ;
31226: LD_ADDR_VAR 0 4
31230: PUSH
31231: LD_INT 2
31233: ST_TO_ADDR
// break ;
31234: GO 31238
// end ;
31236: GO 31209
31238: POP
31239: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31240: LD_VAR 0 1
31244: PPUSH
31245: LD_VAR 0 2
31249: PPUSH
31250: LD_VAR 0 3
31254: PPUSH
31255: LD_VAR 0 4
31259: PPUSH
31260: LD_VAR 0 5
31264: PPUSH
31265: CALL_OW 448
31269: IFFALSE 31304
// begin result := [ chassis , engine , control , weapon ] ;
31271: LD_ADDR_VAR 0 6
31275: PUSH
31276: LD_VAR 0 2
31280: PUSH
31281: LD_VAR 0 3
31285: PUSH
31286: LD_VAR 0 4
31290: PUSH
31291: LD_VAR 0 5
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
// exit ;
31302: GO 31716
// end ; _chassis := AvailableChassisList ( factory ) ;
31304: LD_ADDR_VAR 0 9
31308: PUSH
31309: LD_VAR 0 1
31313: PPUSH
31314: CALL_OW 475
31318: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31319: LD_ADDR_VAR 0 11
31323: PUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 476
31333: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31334: LD_ADDR_VAR 0 12
31338: PUSH
31339: LD_VAR 0 1
31343: PPUSH
31344: CALL_OW 477
31348: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31349: LD_ADDR_VAR 0 10
31353: PUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 478
31363: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31364: LD_VAR 0 9
31368: NOT
31369: PUSH
31370: LD_VAR 0 11
31374: NOT
31375: OR
31376: PUSH
31377: LD_VAR 0 12
31381: NOT
31382: OR
31383: PUSH
31384: LD_VAR 0 10
31388: NOT
31389: OR
31390: IFFALSE 31425
// begin result := [ chassis , engine , control , weapon ] ;
31392: LD_ADDR_VAR 0 6
31396: PUSH
31397: LD_VAR 0 2
31401: PUSH
31402: LD_VAR 0 3
31406: PUSH
31407: LD_VAR 0 4
31411: PUSH
31412: LD_VAR 0 5
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: ST_TO_ADDR
// exit ;
31423: GO 31716
// end ; if not chassis in _chassis then
31425: LD_VAR 0 2
31429: PUSH
31430: LD_VAR 0 9
31434: IN
31435: NOT
31436: IFFALSE 31462
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31438: LD_ADDR_VAR 0 2
31442: PUSH
31443: LD_VAR 0 9
31447: PUSH
31448: LD_INT 1
31450: PPUSH
31451: LD_VAR 0 9
31455: PPUSH
31456: CALL_OW 12
31460: ARRAY
31461: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31462: LD_VAR 0 2
31466: PPUSH
31467: LD_VAR 0 3
31471: PPUSH
31472: CALL 31721 0 2
31476: NOT
31477: IFFALSE 31536
// repeat engine := _engine [ 1 ] ;
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_VAR 0 11
31488: PUSH
31489: LD_INT 1
31491: ARRAY
31492: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31493: LD_ADDR_VAR 0 11
31497: PUSH
31498: LD_VAR 0 11
31502: PPUSH
31503: LD_INT 1
31505: PPUSH
31506: CALL_OW 3
31510: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31511: LD_VAR 0 2
31515: PPUSH
31516: LD_VAR 0 3
31520: PPUSH
31521: CALL 31721 0 2
31525: PUSH
31526: LD_VAR 0 11
31530: PUSH
31531: EMPTY
31532: EQUAL
31533: OR
31534: IFFALSE 31479
// if not control in _control then
31536: LD_VAR 0 4
31540: PUSH
31541: LD_VAR 0 12
31545: IN
31546: NOT
31547: IFFALSE 31573
// control := _control [ rand ( 1 , _control ) ] ;
31549: LD_ADDR_VAR 0 4
31553: PUSH
31554: LD_VAR 0 12
31558: PUSH
31559: LD_INT 1
31561: PPUSH
31562: LD_VAR 0 12
31566: PPUSH
31567: CALL_OW 12
31571: ARRAY
31572: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31573: LD_VAR 0 2
31577: PPUSH
31578: LD_VAR 0 5
31582: PPUSH
31583: CALL 31941 0 2
31587: NOT
31588: IFFALSE 31647
// repeat weapon := _weapon [ 1 ] ;
31590: LD_ADDR_VAR 0 5
31594: PUSH
31595: LD_VAR 0 10
31599: PUSH
31600: LD_INT 1
31602: ARRAY
31603: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31604: LD_ADDR_VAR 0 10
31608: PUSH
31609: LD_VAR 0 10
31613: PPUSH
31614: LD_INT 1
31616: PPUSH
31617: CALL_OW 3
31621: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31622: LD_VAR 0 2
31626: PPUSH
31627: LD_VAR 0 5
31631: PPUSH
31632: CALL 31941 0 2
31636: PUSH
31637: LD_VAR 0 10
31641: PUSH
31642: EMPTY
31643: EQUAL
31644: OR
31645: IFFALSE 31590
// result := [ ] ;
31647: LD_ADDR_VAR 0 6
31651: PUSH
31652: EMPTY
31653: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31654: LD_VAR 0 1
31658: PPUSH
31659: LD_VAR 0 2
31663: PPUSH
31664: LD_VAR 0 3
31668: PPUSH
31669: LD_VAR 0 4
31673: PPUSH
31674: LD_VAR 0 5
31678: PPUSH
31679: CALL_OW 448
31683: IFFALSE 31716
// result := [ chassis , engine , control , weapon ] ;
31685: LD_ADDR_VAR 0 6
31689: PUSH
31690: LD_VAR 0 2
31694: PUSH
31695: LD_VAR 0 3
31699: PUSH
31700: LD_VAR 0 4
31704: PUSH
31705: LD_VAR 0 5
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// end ;
31716: LD_VAR 0 6
31720: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31721: LD_INT 0
31723: PPUSH
// if not chassis or not engine then
31724: LD_VAR 0 1
31728: NOT
31729: PUSH
31730: LD_VAR 0 2
31734: NOT
31735: OR
31736: IFFALSE 31740
// exit ;
31738: GO 31936
// case engine of engine_solar :
31740: LD_VAR 0 2
31744: PUSH
31745: LD_INT 2
31747: DOUBLE
31748: EQUAL
31749: IFTRUE 31753
31751: GO 31791
31753: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31754: LD_ADDR_VAR 0 3
31758: PUSH
31759: LD_INT 11
31761: PUSH
31762: LD_INT 12
31764: PUSH
31765: LD_INT 13
31767: PUSH
31768: LD_INT 14
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: LD_INT 2
31776: PUSH
31777: LD_INT 3
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: ST_TO_ADDR
31789: GO 31920
31791: LD_INT 1
31793: DOUBLE
31794: EQUAL
31795: IFTRUE 31799
31797: GO 31861
31799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_INT 11
31807: PUSH
31808: LD_INT 12
31810: PUSH
31811: LD_INT 13
31813: PUSH
31814: LD_INT 14
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: LD_INT 21
31834: PUSH
31835: LD_INT 23
31837: PUSH
31838: LD_INT 22
31840: PUSH
31841: LD_INT 24
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
31859: GO 31920
31861: LD_INT 3
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31919
31869: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31870: LD_ADDR_VAR 0 3
31874: PUSH
31875: LD_INT 13
31877: PUSH
31878: LD_INT 14
31880: PUSH
31881: LD_INT 2
31883: PUSH
31884: LD_INT 3
31886: PUSH
31887: LD_INT 4
31889: PUSH
31890: LD_INT 5
31892: PUSH
31893: LD_INT 21
31895: PUSH
31896: LD_INT 22
31898: PUSH
31899: LD_INT 23
31901: PUSH
31902: LD_INT 24
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 31920
31919: POP
// result := ( chassis in result ) ;
31920: LD_ADDR_VAR 0 3
31924: PUSH
31925: LD_VAR 0 1
31929: PUSH
31930: LD_VAR 0 3
31934: IN
31935: ST_TO_ADDR
// end ;
31936: LD_VAR 0 3
31940: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31941: LD_INT 0
31943: PPUSH
// if not chassis or not weapon then
31944: LD_VAR 0 1
31948: NOT
31949: PUSH
31950: LD_VAR 0 2
31954: NOT
31955: OR
31956: IFFALSE 31960
// exit ;
31958: GO 32986
// case weapon of us_machine_gun :
31960: LD_VAR 0 2
31964: PUSH
31965: LD_INT 2
31967: DOUBLE
31968: EQUAL
31969: IFTRUE 31973
31971: GO 32003
31973: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31974: LD_ADDR_VAR 0 3
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 4
31990: PUSH
31991: LD_INT 5
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
32001: GO 32970
32003: LD_INT 3
32005: DOUBLE
32006: EQUAL
32007: IFTRUE 32011
32009: GO 32041
32011: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: LD_INT 5
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
32039: GO 32970
32041: LD_INT 11
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32079
32049: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_INT 1
32057: PUSH
32058: LD_INT 2
32060: PUSH
32061: LD_INT 3
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: LD_INT 5
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: ST_TO_ADDR
32077: GO 32970
32079: LD_INT 4
32081: DOUBLE
32082: EQUAL
32083: IFTRUE 32087
32085: GO 32113
32087: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32088: LD_ADDR_VAR 0 3
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: LD_INT 5
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: ST_TO_ADDR
32111: GO 32970
32113: LD_INT 5
32115: DOUBLE
32116: EQUAL
32117: IFTRUE 32121
32119: GO 32147
32121: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32122: LD_ADDR_VAR 0 3
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 4
32135: PUSH
32136: LD_INT 5
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
32145: GO 32970
32147: LD_INT 9
32149: DOUBLE
32150: EQUAL
32151: IFTRUE 32155
32153: GO 32181
32155: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: ST_TO_ADDR
32179: GO 32970
32181: LD_INT 7
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32215
32189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
32213: GO 32970
32215: LD_INT 12
32217: DOUBLE
32218: EQUAL
32219: IFTRUE 32223
32221: GO 32249
32223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32224: LD_ADDR_VAR 0 3
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 3
32234: PUSH
32235: LD_INT 4
32237: PUSH
32238: LD_INT 5
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: ST_TO_ADDR
32247: GO 32970
32249: LD_INT 13
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32283
32257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: LD_INT 4
32271: PUSH
32272: LD_INT 5
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
32281: GO 32970
32283: LD_INT 14
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32309
32291: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32292: LD_ADDR_VAR 0 3
32296: PUSH
32297: LD_INT 4
32299: PUSH
32300: LD_INT 5
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: ST_TO_ADDR
32307: GO 32970
32309: LD_INT 6
32311: DOUBLE
32312: EQUAL
32313: IFTRUE 32317
32315: GO 32335
32317: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32318: LD_ADDR_VAR 0 3
32322: PUSH
32323: LD_INT 4
32325: PUSH
32326: LD_INT 5
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: ST_TO_ADDR
32333: GO 32970
32335: LD_INT 10
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32361
32343: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_INT 4
32351: PUSH
32352: LD_INT 5
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: ST_TO_ADDR
32359: GO 32970
32361: LD_INT 22
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32395
32369: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32370: LD_ADDR_VAR 0 3
32374: PUSH
32375: LD_INT 11
32377: PUSH
32378: LD_INT 12
32380: PUSH
32381: LD_INT 13
32383: PUSH
32384: LD_INT 14
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: ST_TO_ADDR
32393: GO 32970
32395: LD_INT 23
32397: DOUBLE
32398: EQUAL
32399: IFTRUE 32403
32401: GO 32429
32403: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32404: LD_ADDR_VAR 0 3
32408: PUSH
32409: LD_INT 11
32411: PUSH
32412: LD_INT 12
32414: PUSH
32415: LD_INT 13
32417: PUSH
32418: LD_INT 14
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: ST_TO_ADDR
32427: GO 32970
32429: LD_INT 24
32431: DOUBLE
32432: EQUAL
32433: IFTRUE 32437
32435: GO 32463
32437: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32438: LD_ADDR_VAR 0 3
32442: PUSH
32443: LD_INT 11
32445: PUSH
32446: LD_INT 12
32448: PUSH
32449: LD_INT 13
32451: PUSH
32452: LD_INT 14
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: ST_TO_ADDR
32461: GO 32970
32463: LD_INT 30
32465: DOUBLE
32466: EQUAL
32467: IFTRUE 32471
32469: GO 32497
32471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32472: LD_ADDR_VAR 0 3
32476: PUSH
32477: LD_INT 11
32479: PUSH
32480: LD_INT 12
32482: PUSH
32483: LD_INT 13
32485: PUSH
32486: LD_INT 14
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: ST_TO_ADDR
32495: GO 32970
32497: LD_INT 25
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32523
32505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32506: LD_ADDR_VAR 0 3
32510: PUSH
32511: LD_INT 13
32513: PUSH
32514: LD_INT 14
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: ST_TO_ADDR
32521: GO 32970
32523: LD_INT 27
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 32549
32531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32532: LD_ADDR_VAR 0 3
32536: PUSH
32537: LD_INT 13
32539: PUSH
32540: LD_INT 14
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: ST_TO_ADDR
32547: GO 32970
32549: LD_INT 28
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 32575
32557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32558: LD_ADDR_VAR 0 3
32562: PUSH
32563: LD_INT 13
32565: PUSH
32566: LD_INT 14
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: ST_TO_ADDR
32573: GO 32970
32575: LD_INT 29
32577: DOUBLE
32578: EQUAL
32579: IFTRUE 32583
32581: GO 32601
32583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32584: LD_ADDR_VAR 0 3
32588: PUSH
32589: LD_INT 13
32591: PUSH
32592: LD_INT 14
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: ST_TO_ADDR
32599: GO 32970
32601: LD_INT 31
32603: DOUBLE
32604: EQUAL
32605: IFTRUE 32609
32607: GO 32627
32609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32610: LD_ADDR_VAR 0 3
32614: PUSH
32615: LD_INT 13
32617: PUSH
32618: LD_INT 14
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: ST_TO_ADDR
32625: GO 32970
32627: LD_INT 26
32629: DOUBLE
32630: EQUAL
32631: IFTRUE 32635
32633: GO 32653
32635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32636: LD_ADDR_VAR 0 3
32640: PUSH
32641: LD_INT 13
32643: PUSH
32644: LD_INT 14
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: ST_TO_ADDR
32651: GO 32970
32653: LD_INT 42
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32687
32661: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: LD_INT 21
32669: PUSH
32670: LD_INT 22
32672: PUSH
32673: LD_INT 23
32675: PUSH
32676: LD_INT 24
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: ST_TO_ADDR
32685: GO 32970
32687: LD_INT 43
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32721
32695: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: LD_INT 21
32703: PUSH
32704: LD_INT 22
32706: PUSH
32707: LD_INT 23
32709: PUSH
32710: LD_INT 24
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: ST_TO_ADDR
32719: GO 32970
32721: LD_INT 44
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32755
32729: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32730: LD_ADDR_VAR 0 3
32734: PUSH
32735: LD_INT 21
32737: PUSH
32738: LD_INT 22
32740: PUSH
32741: LD_INT 23
32743: PUSH
32744: LD_INT 24
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
32753: GO 32970
32755: LD_INT 45
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32789
32763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32764: LD_ADDR_VAR 0 3
32768: PUSH
32769: LD_INT 21
32771: PUSH
32772: LD_INT 22
32774: PUSH
32775: LD_INT 23
32777: PUSH
32778: LD_INT 24
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: ST_TO_ADDR
32787: GO 32970
32789: LD_INT 49
32791: DOUBLE
32792: EQUAL
32793: IFTRUE 32797
32795: GO 32823
32797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32798: LD_ADDR_VAR 0 3
32802: PUSH
32803: LD_INT 21
32805: PUSH
32806: LD_INT 22
32808: PUSH
32809: LD_INT 23
32811: PUSH
32812: LD_INT 24
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: ST_TO_ADDR
32821: GO 32970
32823: LD_INT 51
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32857
32831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32832: LD_ADDR_VAR 0 3
32836: PUSH
32837: LD_INT 21
32839: PUSH
32840: LD_INT 22
32842: PUSH
32843: LD_INT 23
32845: PUSH
32846: LD_INT 24
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: ST_TO_ADDR
32855: GO 32970
32857: LD_INT 52
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32891
32865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32866: LD_ADDR_VAR 0 3
32870: PUSH
32871: LD_INT 21
32873: PUSH
32874: LD_INT 22
32876: PUSH
32877: LD_INT 23
32879: PUSH
32880: LD_INT 24
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
32889: GO 32970
32891: LD_INT 53
32893: DOUBLE
32894: EQUAL
32895: IFTRUE 32899
32897: GO 32917
32899: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32900: LD_ADDR_VAR 0 3
32904: PUSH
32905: LD_INT 23
32907: PUSH
32908: LD_INT 24
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: ST_TO_ADDR
32915: GO 32970
32917: LD_INT 46
32919: DOUBLE
32920: EQUAL
32921: IFTRUE 32925
32923: GO 32943
32925: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32926: LD_ADDR_VAR 0 3
32930: PUSH
32931: LD_INT 23
32933: PUSH
32934: LD_INT 24
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: ST_TO_ADDR
32941: GO 32970
32943: LD_INT 47
32945: DOUBLE
32946: EQUAL
32947: IFTRUE 32951
32949: GO 32969
32951: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32952: LD_ADDR_VAR 0 3
32956: PUSH
32957: LD_INT 23
32959: PUSH
32960: LD_INT 24
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: ST_TO_ADDR
32967: GO 32970
32969: POP
// result := ( chassis in result ) ;
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_VAR 0 1
32979: PUSH
32980: LD_VAR 0 3
32984: IN
32985: ST_TO_ADDR
// end ;
32986: LD_VAR 0 3
32990: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32991: LD_INT 0
32993: PPUSH
32994: PPUSH
32995: PPUSH
32996: PPUSH
32997: PPUSH
32998: PPUSH
32999: PPUSH
// result := array ;
33000: LD_ADDR_VAR 0 5
33004: PUSH
33005: LD_VAR 0 1
33009: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33010: LD_VAR 0 1
33014: NOT
33015: PUSH
33016: LD_VAR 0 2
33020: NOT
33021: OR
33022: PUSH
33023: LD_VAR 0 3
33027: NOT
33028: OR
33029: PUSH
33030: LD_VAR 0 2
33034: PUSH
33035: LD_VAR 0 1
33039: GREATER
33040: OR
33041: PUSH
33042: LD_VAR 0 3
33046: PUSH
33047: LD_VAR 0 1
33051: GREATER
33052: OR
33053: IFFALSE 33057
// exit ;
33055: GO 33353
// if direction then
33057: LD_VAR 0 4
33061: IFFALSE 33125
// begin d := 1 ;
33063: LD_ADDR_VAR 0 9
33067: PUSH
33068: LD_INT 1
33070: ST_TO_ADDR
// if i_from > i_to then
33071: LD_VAR 0 2
33075: PUSH
33076: LD_VAR 0 3
33080: GREATER
33081: IFFALSE 33107
// length := ( array - i_from ) + i_to else
33083: LD_ADDR_VAR 0 11
33087: PUSH
33088: LD_VAR 0 1
33092: PUSH
33093: LD_VAR 0 2
33097: MINUS
33098: PUSH
33099: LD_VAR 0 3
33103: PLUS
33104: ST_TO_ADDR
33105: GO 33123
// length := i_to - i_from ;
33107: LD_ADDR_VAR 0 11
33111: PUSH
33112: LD_VAR 0 3
33116: PUSH
33117: LD_VAR 0 2
33121: MINUS
33122: ST_TO_ADDR
// end else
33123: GO 33186
// begin d := - 1 ;
33125: LD_ADDR_VAR 0 9
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: ST_TO_ADDR
// if i_from > i_to then
33134: LD_VAR 0 2
33138: PUSH
33139: LD_VAR 0 3
33143: GREATER
33144: IFFALSE 33164
// length := i_from - i_to else
33146: LD_ADDR_VAR 0 11
33150: PUSH
33151: LD_VAR 0 2
33155: PUSH
33156: LD_VAR 0 3
33160: MINUS
33161: ST_TO_ADDR
33162: GO 33186
// length := ( array - i_to ) + i_from ;
33164: LD_ADDR_VAR 0 11
33168: PUSH
33169: LD_VAR 0 1
33173: PUSH
33174: LD_VAR 0 3
33178: MINUS
33179: PUSH
33180: LD_VAR 0 2
33184: PLUS
33185: ST_TO_ADDR
// end ; if not length then
33186: LD_VAR 0 11
33190: NOT
33191: IFFALSE 33195
// exit ;
33193: GO 33353
// tmp := array ;
33195: LD_ADDR_VAR 0 10
33199: PUSH
33200: LD_VAR 0 1
33204: ST_TO_ADDR
// for i = 1 to length do
33205: LD_ADDR_VAR 0 6
33209: PUSH
33210: DOUBLE
33211: LD_INT 1
33213: DEC
33214: ST_TO_ADDR
33215: LD_VAR 0 11
33219: PUSH
33220: FOR_TO
33221: IFFALSE 33341
// begin for j = 1 to array do
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: DOUBLE
33229: LD_INT 1
33231: DEC
33232: ST_TO_ADDR
33233: LD_VAR 0 1
33237: PUSH
33238: FOR_TO
33239: IFFALSE 33327
// begin k := j + d ;
33241: LD_ADDR_VAR 0 8
33245: PUSH
33246: LD_VAR 0 7
33250: PUSH
33251: LD_VAR 0 9
33255: PLUS
33256: ST_TO_ADDR
// if k > array then
33257: LD_VAR 0 8
33261: PUSH
33262: LD_VAR 0 1
33266: GREATER
33267: IFFALSE 33277
// k := 1 ;
33269: LD_ADDR_VAR 0 8
33273: PUSH
33274: LD_INT 1
33276: ST_TO_ADDR
// if not k then
33277: LD_VAR 0 8
33281: NOT
33282: IFFALSE 33294
// k := array ;
33284: LD_ADDR_VAR 0 8
33288: PUSH
33289: LD_VAR 0 1
33293: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33294: LD_ADDR_VAR 0 10
33298: PUSH
33299: LD_VAR 0 10
33303: PPUSH
33304: LD_VAR 0 8
33308: PPUSH
33309: LD_VAR 0 1
33313: PUSH
33314: LD_VAR 0 7
33318: ARRAY
33319: PPUSH
33320: CALL_OW 1
33324: ST_TO_ADDR
// end ;
33325: GO 33238
33327: POP
33328: POP
// array := tmp ;
33329: LD_ADDR_VAR 0 1
33333: PUSH
33334: LD_VAR 0 10
33338: ST_TO_ADDR
// end ;
33339: GO 33220
33341: POP
33342: POP
// result := array ;
33343: LD_ADDR_VAR 0 5
33347: PUSH
33348: LD_VAR 0 1
33352: ST_TO_ADDR
// end ;
33353: LD_VAR 0 5
33357: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33358: LD_INT 0
33360: PPUSH
33361: PPUSH
// result := 0 ;
33362: LD_ADDR_VAR 0 3
33366: PUSH
33367: LD_INT 0
33369: ST_TO_ADDR
// if not array or not value in array then
33370: LD_VAR 0 1
33374: NOT
33375: PUSH
33376: LD_VAR 0 2
33380: PUSH
33381: LD_VAR 0 1
33385: IN
33386: NOT
33387: OR
33388: IFFALSE 33392
// exit ;
33390: GO 33446
// for i = 1 to array do
33392: LD_ADDR_VAR 0 4
33396: PUSH
33397: DOUBLE
33398: LD_INT 1
33400: DEC
33401: ST_TO_ADDR
33402: LD_VAR 0 1
33406: PUSH
33407: FOR_TO
33408: IFFALSE 33444
// if value = array [ i ] then
33410: LD_VAR 0 2
33414: PUSH
33415: LD_VAR 0 1
33419: PUSH
33420: LD_VAR 0 4
33424: ARRAY
33425: EQUAL
33426: IFFALSE 33442
// begin result := i ;
33428: LD_ADDR_VAR 0 3
33432: PUSH
33433: LD_VAR 0 4
33437: ST_TO_ADDR
// exit ;
33438: POP
33439: POP
33440: GO 33446
// end ;
33442: GO 33407
33444: POP
33445: POP
// end ;
33446: LD_VAR 0 3
33450: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33451: LD_INT 0
33453: PPUSH
// vc_chassis := chassis ;
33454: LD_ADDR_OWVAR 37
33458: PUSH
33459: LD_VAR 0 1
33463: ST_TO_ADDR
// vc_engine := engine ;
33464: LD_ADDR_OWVAR 39
33468: PUSH
33469: LD_VAR 0 2
33473: ST_TO_ADDR
// vc_control := control ;
33474: LD_ADDR_OWVAR 38
33478: PUSH
33479: LD_VAR 0 3
33483: ST_TO_ADDR
// vc_weapon := weapon ;
33484: LD_ADDR_OWVAR 40
33488: PUSH
33489: LD_VAR 0 4
33493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33494: LD_ADDR_OWVAR 41
33498: PUSH
33499: LD_VAR 0 5
33503: ST_TO_ADDR
// end ;
33504: LD_VAR 0 6
33508: RET
// export function WantPlant ( unit ) ; var task ; begin
33509: LD_INT 0
33511: PPUSH
33512: PPUSH
// result := false ;
33513: LD_ADDR_VAR 0 2
33517: PUSH
33518: LD_INT 0
33520: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33521: LD_ADDR_VAR 0 3
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 437
33535: ST_TO_ADDR
// if task then
33536: LD_VAR 0 3
33540: IFFALSE 33568
// if task [ 1 ] [ 1 ] = p then
33542: LD_VAR 0 3
33546: PUSH
33547: LD_INT 1
33549: ARRAY
33550: PUSH
33551: LD_INT 1
33553: ARRAY
33554: PUSH
33555: LD_STRING p
33557: EQUAL
33558: IFFALSE 33568
// result := true ;
33560: LD_ADDR_VAR 0 2
33564: PUSH
33565: LD_INT 1
33567: ST_TO_ADDR
// end ;
33568: LD_VAR 0 2
33572: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33573: LD_INT 0
33575: PPUSH
33576: PPUSH
33577: PPUSH
33578: PPUSH
// if pos < 1 then
33579: LD_VAR 0 2
33583: PUSH
33584: LD_INT 1
33586: LESS
33587: IFFALSE 33591
// exit ;
33589: GO 33894
// if pos = 1 then
33591: LD_VAR 0 2
33595: PUSH
33596: LD_INT 1
33598: EQUAL
33599: IFFALSE 33632
// result := Replace ( arr , pos [ 1 ] , value ) else
33601: LD_ADDR_VAR 0 4
33605: PUSH
33606: LD_VAR 0 1
33610: PPUSH
33611: LD_VAR 0 2
33615: PUSH
33616: LD_INT 1
33618: ARRAY
33619: PPUSH
33620: LD_VAR 0 3
33624: PPUSH
33625: CALL_OW 1
33629: ST_TO_ADDR
33630: GO 33894
// begin tmp := arr ;
33632: LD_ADDR_VAR 0 6
33636: PUSH
33637: LD_VAR 0 1
33641: ST_TO_ADDR
// s_arr := [ tmp ] ;
33642: LD_ADDR_VAR 0 7
33646: PUSH
33647: LD_VAR 0 6
33651: PUSH
33652: EMPTY
33653: LIST
33654: ST_TO_ADDR
// for i = 1 to pos - 1 do
33655: LD_ADDR_VAR 0 5
33659: PUSH
33660: DOUBLE
33661: LD_INT 1
33663: DEC
33664: ST_TO_ADDR
33665: LD_VAR 0 2
33669: PUSH
33670: LD_INT 1
33672: MINUS
33673: PUSH
33674: FOR_TO
33675: IFFALSE 33720
// begin tmp := tmp [ pos [ i ] ] ;
33677: LD_ADDR_VAR 0 6
33681: PUSH
33682: LD_VAR 0 6
33686: PUSH
33687: LD_VAR 0 2
33691: PUSH
33692: LD_VAR 0 5
33696: ARRAY
33697: ARRAY
33698: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33699: LD_ADDR_VAR 0 7
33703: PUSH
33704: LD_VAR 0 7
33708: PUSH
33709: LD_VAR 0 6
33713: PUSH
33714: EMPTY
33715: LIST
33716: ADD
33717: ST_TO_ADDR
// end ;
33718: GO 33674
33720: POP
33721: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33722: LD_ADDR_VAR 0 6
33726: PUSH
33727: LD_VAR 0 6
33731: PPUSH
33732: LD_VAR 0 2
33736: PUSH
33737: LD_VAR 0 2
33741: ARRAY
33742: PPUSH
33743: LD_VAR 0 3
33747: PPUSH
33748: CALL_OW 1
33752: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33753: LD_ADDR_VAR 0 7
33757: PUSH
33758: LD_VAR 0 7
33762: PPUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: LD_VAR 0 6
33772: PPUSH
33773: CALL_OW 1
33777: ST_TO_ADDR
// for i = s_arr downto 2 do
33778: LD_ADDR_VAR 0 5
33782: PUSH
33783: DOUBLE
33784: LD_VAR 0 7
33788: INC
33789: ST_TO_ADDR
33790: LD_INT 2
33792: PUSH
33793: FOR_DOWNTO
33794: IFFALSE 33878
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33796: LD_ADDR_VAR 0 6
33800: PUSH
33801: LD_VAR 0 7
33805: PUSH
33806: LD_VAR 0 5
33810: PUSH
33811: LD_INT 1
33813: MINUS
33814: ARRAY
33815: PPUSH
33816: LD_VAR 0 2
33820: PUSH
33821: LD_VAR 0 5
33825: PUSH
33826: LD_INT 1
33828: MINUS
33829: ARRAY
33830: PPUSH
33831: LD_VAR 0 7
33835: PUSH
33836: LD_VAR 0 5
33840: ARRAY
33841: PPUSH
33842: CALL_OW 1
33846: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33847: LD_ADDR_VAR 0 7
33851: PUSH
33852: LD_VAR 0 7
33856: PPUSH
33857: LD_VAR 0 5
33861: PUSH
33862: LD_INT 1
33864: MINUS
33865: PPUSH
33866: LD_VAR 0 6
33870: PPUSH
33871: CALL_OW 1
33875: ST_TO_ADDR
// end ;
33876: GO 33793
33878: POP
33879: POP
// result := s_arr [ 1 ] ;
33880: LD_ADDR_VAR 0 4
33884: PUSH
33885: LD_VAR 0 7
33889: PUSH
33890: LD_INT 1
33892: ARRAY
33893: ST_TO_ADDR
// end ; end ;
33894: LD_VAR 0 4
33898: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33899: LD_INT 0
33901: PPUSH
33902: PPUSH
// if not list then
33903: LD_VAR 0 1
33907: NOT
33908: IFFALSE 33912
// exit ;
33910: GO 34003
// i := list [ pos1 ] ;
33912: LD_ADDR_VAR 0 5
33916: PUSH
33917: LD_VAR 0 1
33921: PUSH
33922: LD_VAR 0 2
33926: ARRAY
33927: ST_TO_ADDR
// if not i then
33928: LD_VAR 0 5
33932: NOT
33933: IFFALSE 33937
// exit ;
33935: GO 34003
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33937: LD_ADDR_VAR 0 1
33941: PUSH
33942: LD_VAR 0 1
33946: PPUSH
33947: LD_VAR 0 2
33951: PPUSH
33952: LD_VAR 0 1
33956: PUSH
33957: LD_VAR 0 3
33961: ARRAY
33962: PPUSH
33963: CALL_OW 1
33967: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33968: LD_ADDR_VAR 0 1
33972: PUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: LD_VAR 0 3
33982: PPUSH
33983: LD_VAR 0 5
33987: PPUSH
33988: CALL_OW 1
33992: ST_TO_ADDR
// result := list ;
33993: LD_ADDR_VAR 0 4
33997: PUSH
33998: LD_VAR 0 1
34002: ST_TO_ADDR
// end ;
34003: LD_VAR 0 4
34007: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34008: LD_INT 0
34010: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34011: LD_ADDR_VAR 0 5
34015: PUSH
34016: LD_VAR 0 1
34020: PPUSH
34021: CALL_OW 250
34025: PPUSH
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 251
34035: PPUSH
34036: LD_VAR 0 2
34040: PPUSH
34041: LD_VAR 0 3
34045: PPUSH
34046: LD_VAR 0 4
34050: PPUSH
34051: CALL 34061 0 5
34055: ST_TO_ADDR
// end ;
34056: LD_VAR 0 5
34060: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34061: LD_INT 0
34063: PPUSH
34064: PPUSH
34065: PPUSH
34066: PPUSH
// if not list then
34067: LD_VAR 0 3
34071: NOT
34072: IFFALSE 34076
// exit ;
34074: GO 34464
// result := [ ] ;
34076: LD_ADDR_VAR 0 6
34080: PUSH
34081: EMPTY
34082: ST_TO_ADDR
// for i in list do
34083: LD_ADDR_VAR 0 7
34087: PUSH
34088: LD_VAR 0 3
34092: PUSH
34093: FOR_IN
34094: IFFALSE 34296
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34096: LD_ADDR_VAR 0 9
34100: PUSH
34101: LD_VAR 0 7
34105: PPUSH
34106: LD_VAR 0 1
34110: PPUSH
34111: LD_VAR 0 2
34115: PPUSH
34116: CALL_OW 297
34120: ST_TO_ADDR
// if not result then
34121: LD_VAR 0 6
34125: NOT
34126: IFFALSE 34152
// result := [ [ i , tmp ] ] else
34128: LD_ADDR_VAR 0 6
34132: PUSH
34133: LD_VAR 0 7
34137: PUSH
34138: LD_VAR 0 9
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: EMPTY
34148: LIST
34149: ST_TO_ADDR
34150: GO 34294
// begin if result [ result ] [ 2 ] < tmp then
34152: LD_VAR 0 6
34156: PUSH
34157: LD_VAR 0 6
34161: ARRAY
34162: PUSH
34163: LD_INT 2
34165: ARRAY
34166: PUSH
34167: LD_VAR 0 9
34171: LESS
34172: IFFALSE 34214
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34174: LD_ADDR_VAR 0 6
34178: PUSH
34179: LD_VAR 0 6
34183: PPUSH
34184: LD_VAR 0 6
34188: PUSH
34189: LD_INT 1
34191: PLUS
34192: PPUSH
34193: LD_VAR 0 7
34197: PUSH
34198: LD_VAR 0 9
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PPUSH
34207: CALL_OW 2
34211: ST_TO_ADDR
34212: GO 34294
// for j = 1 to result do
34214: LD_ADDR_VAR 0 8
34218: PUSH
34219: DOUBLE
34220: LD_INT 1
34222: DEC
34223: ST_TO_ADDR
34224: LD_VAR 0 6
34228: PUSH
34229: FOR_TO
34230: IFFALSE 34292
// begin if tmp < result [ j ] [ 2 ] then
34232: LD_VAR 0 9
34236: PUSH
34237: LD_VAR 0 6
34241: PUSH
34242: LD_VAR 0 8
34246: ARRAY
34247: PUSH
34248: LD_INT 2
34250: ARRAY
34251: LESS
34252: IFFALSE 34290
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34254: LD_ADDR_VAR 0 6
34258: PUSH
34259: LD_VAR 0 6
34263: PPUSH
34264: LD_VAR 0 8
34268: PPUSH
34269: LD_VAR 0 7
34273: PUSH
34274: LD_VAR 0 9
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PPUSH
34283: CALL_OW 2
34287: ST_TO_ADDR
// break ;
34288: GO 34292
// end ; end ;
34290: GO 34229
34292: POP
34293: POP
// end ; end ;
34294: GO 34093
34296: POP
34297: POP
// if result and not asc then
34298: LD_VAR 0 6
34302: PUSH
34303: LD_VAR 0 4
34307: NOT
34308: AND
34309: IFFALSE 34384
// begin tmp := result ;
34311: LD_ADDR_VAR 0 9
34315: PUSH
34316: LD_VAR 0 6
34320: ST_TO_ADDR
// for i = tmp downto 1 do
34321: LD_ADDR_VAR 0 7
34325: PUSH
34326: DOUBLE
34327: LD_VAR 0 9
34331: INC
34332: ST_TO_ADDR
34333: LD_INT 1
34335: PUSH
34336: FOR_DOWNTO
34337: IFFALSE 34382
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34339: LD_ADDR_VAR 0 6
34343: PUSH
34344: LD_VAR 0 6
34348: PPUSH
34349: LD_VAR 0 9
34353: PUSH
34354: LD_VAR 0 7
34358: MINUS
34359: PUSH
34360: LD_INT 1
34362: PLUS
34363: PPUSH
34364: LD_VAR 0 9
34368: PUSH
34369: LD_VAR 0 7
34373: ARRAY
34374: PPUSH
34375: CALL_OW 1
34379: ST_TO_ADDR
34380: GO 34336
34382: POP
34383: POP
// end ; tmp := [ ] ;
34384: LD_ADDR_VAR 0 9
34388: PUSH
34389: EMPTY
34390: ST_TO_ADDR
// if mode then
34391: LD_VAR 0 5
34395: IFFALSE 34464
// begin for i = 1 to result do
34397: LD_ADDR_VAR 0 7
34401: PUSH
34402: DOUBLE
34403: LD_INT 1
34405: DEC
34406: ST_TO_ADDR
34407: LD_VAR 0 6
34411: PUSH
34412: FOR_TO
34413: IFFALSE 34452
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34415: LD_ADDR_VAR 0 9
34419: PUSH
34420: LD_VAR 0 9
34424: PPUSH
34425: LD_VAR 0 7
34429: PPUSH
34430: LD_VAR 0 6
34434: PUSH
34435: LD_VAR 0 7
34439: ARRAY
34440: PUSH
34441: LD_INT 1
34443: ARRAY
34444: PPUSH
34445: CALL_OW 1
34449: ST_TO_ADDR
34450: GO 34412
34452: POP
34453: POP
// result := tmp ;
34454: LD_ADDR_VAR 0 6
34458: PUSH
34459: LD_VAR 0 9
34463: ST_TO_ADDR
// end ; end ;
34464: LD_VAR 0 6
34468: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34469: LD_INT 0
34471: PPUSH
34472: PPUSH
34473: PPUSH
34474: PPUSH
34475: PPUSH
34476: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34477: LD_ADDR_VAR 0 5
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: EMPTY
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: ST_TO_ADDR
// if not x or not y then
34499: LD_VAR 0 2
34503: NOT
34504: PUSH
34505: LD_VAR 0 3
34509: NOT
34510: OR
34511: IFFALSE 34515
// exit ;
34513: GO 36161
// if not range then
34515: LD_VAR 0 4
34519: NOT
34520: IFFALSE 34530
// range := 10 ;
34522: LD_ADDR_VAR 0 4
34526: PUSH
34527: LD_INT 10
34529: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34530: LD_ADDR_VAR 0 8
34534: PUSH
34535: LD_INT 81
34537: PUSH
34538: LD_VAR 0 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 92
34549: PUSH
34550: LD_VAR 0 2
34554: PUSH
34555: LD_VAR 0 3
34559: PUSH
34560: LD_VAR 0 4
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 3
34573: PUSH
34574: LD_INT 21
34576: PUSH
34577: LD_INT 3
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: PPUSH
34593: CALL_OW 69
34597: ST_TO_ADDR
// if not tmp then
34598: LD_VAR 0 8
34602: NOT
34603: IFFALSE 34607
// exit ;
34605: GO 36161
// for i in tmp do
34607: LD_ADDR_VAR 0 6
34611: PUSH
34612: LD_VAR 0 8
34616: PUSH
34617: FOR_IN
34618: IFFALSE 36136
// begin points := [ 0 , 0 , 0 ] ;
34620: LD_ADDR_VAR 0 9
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
// bpoints := 1 ;
34639: LD_ADDR_VAR 0 10
34643: PUSH
34644: LD_INT 1
34646: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34647: LD_VAR 0 6
34651: PPUSH
34652: CALL_OW 247
34656: PUSH
34657: LD_INT 1
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 35243
34665: POP
// begin if GetClass ( i ) = 1 then
34666: LD_VAR 0 6
34670: PPUSH
34671: CALL_OW 257
34675: PUSH
34676: LD_INT 1
34678: EQUAL
34679: IFFALSE 34700
// points := [ 10 , 5 , 3 ] ;
34681: LD_ADDR_VAR 0 9
34685: PUSH
34686: LD_INT 10
34688: PUSH
34689: LD_INT 5
34691: PUSH
34692: LD_INT 3
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: LIST
34699: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34700: LD_VAR 0 6
34704: PPUSH
34705: CALL_OW 257
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: LD_INT 4
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: IN
34724: IFFALSE 34745
// points := [ 3 , 2 , 1 ] ;
34726: LD_ADDR_VAR 0 9
34730: PUSH
34731: LD_INT 3
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34745: LD_VAR 0 6
34749: PPUSH
34750: CALL_OW 257
34754: PUSH
34755: LD_INT 5
34757: EQUAL
34758: IFFALSE 34779
// points := [ 130 , 5 , 2 ] ;
34760: LD_ADDR_VAR 0 9
34764: PUSH
34765: LD_INT 130
34767: PUSH
34768: LD_INT 5
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34779: LD_VAR 0 6
34783: PPUSH
34784: CALL_OW 257
34788: PUSH
34789: LD_INT 8
34791: EQUAL
34792: IFFALSE 34813
// points := [ 35 , 35 , 30 ] ;
34794: LD_ADDR_VAR 0 9
34798: PUSH
34799: LD_INT 35
34801: PUSH
34802: LD_INT 35
34804: PUSH
34805: LD_INT 30
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34813: LD_VAR 0 6
34817: PPUSH
34818: CALL_OW 257
34822: PUSH
34823: LD_INT 9
34825: EQUAL
34826: IFFALSE 34847
// points := [ 20 , 55 , 40 ] ;
34828: LD_ADDR_VAR 0 9
34832: PUSH
34833: LD_INT 20
34835: PUSH
34836: LD_INT 55
34838: PUSH
34839: LD_INT 40
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34847: LD_VAR 0 6
34851: PPUSH
34852: CALL_OW 257
34856: PUSH
34857: LD_INT 12
34859: PUSH
34860: LD_INT 16
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: IN
34867: IFFALSE 34888
// points := [ 5 , 3 , 2 ] ;
34869: LD_ADDR_VAR 0 9
34873: PUSH
34874: LD_INT 5
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34888: LD_VAR 0 6
34892: PPUSH
34893: CALL_OW 257
34897: PUSH
34898: LD_INT 17
34900: EQUAL
34901: IFFALSE 34922
// points := [ 100 , 50 , 75 ] ;
34903: LD_ADDR_VAR 0 9
34907: PUSH
34908: LD_INT 100
34910: PUSH
34911: LD_INT 50
34913: PUSH
34914: LD_INT 75
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: LIST
34921: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34922: LD_VAR 0 6
34926: PPUSH
34927: CALL_OW 257
34931: PUSH
34932: LD_INT 15
34934: EQUAL
34935: IFFALSE 34956
// points := [ 10 , 5 , 3 ] ;
34937: LD_ADDR_VAR 0 9
34941: PUSH
34942: LD_INT 10
34944: PUSH
34945: LD_INT 5
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34956: LD_VAR 0 6
34960: PPUSH
34961: CALL_OW 257
34965: PUSH
34966: LD_INT 14
34968: EQUAL
34969: IFFALSE 34990
// points := [ 10 , 0 , 0 ] ;
34971: LD_ADDR_VAR 0 9
34975: PUSH
34976: LD_INT 10
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34990: LD_VAR 0 6
34994: PPUSH
34995: CALL_OW 257
34999: PUSH
35000: LD_INT 11
35002: EQUAL
35003: IFFALSE 35024
// points := [ 30 , 10 , 5 ] ;
35005: LD_ADDR_VAR 0 9
35009: PUSH
35010: LD_INT 30
35012: PUSH
35013: LD_INT 10
35015: PUSH
35016: LD_INT 5
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35024: LD_VAR 0 1
35028: PPUSH
35029: LD_INT 5
35031: PPUSH
35032: CALL_OW 321
35036: PUSH
35037: LD_INT 2
35039: EQUAL
35040: IFFALSE 35057
// bpoints := bpoints * 1.8 ;
35042: LD_ADDR_VAR 0 10
35046: PUSH
35047: LD_VAR 0 10
35051: PUSH
35052: LD_REAL  1.80000000000000E+0000
35055: MUL
35056: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35057: LD_VAR 0 6
35061: PPUSH
35062: CALL_OW 257
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 3
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: IN
35085: PUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: LD_INT 51
35093: PPUSH
35094: CALL_OW 321
35098: PUSH
35099: LD_INT 2
35101: EQUAL
35102: AND
35103: IFFALSE 35120
// bpoints := bpoints * 1.2 ;
35105: LD_ADDR_VAR 0 10
35109: PUSH
35110: LD_VAR 0 10
35114: PUSH
35115: LD_REAL  1.20000000000000E+0000
35118: MUL
35119: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35120: LD_VAR 0 6
35124: PPUSH
35125: CALL_OW 257
35129: PUSH
35130: LD_INT 5
35132: PUSH
35133: LD_INT 7
35135: PUSH
35136: LD_INT 9
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: IN
35144: PUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: LD_INT 52
35152: PPUSH
35153: CALL_OW 321
35157: PUSH
35158: LD_INT 2
35160: EQUAL
35161: AND
35162: IFFALSE 35179
// bpoints := bpoints * 1.5 ;
35164: LD_ADDR_VAR 0 10
35168: PUSH
35169: LD_VAR 0 10
35173: PUSH
35174: LD_REAL  1.50000000000000E+0000
35177: MUL
35178: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35179: LD_VAR 0 1
35183: PPUSH
35184: LD_INT 66
35186: PPUSH
35187: CALL_OW 321
35191: PUSH
35192: LD_INT 2
35194: EQUAL
35195: IFFALSE 35212
// bpoints := bpoints * 1.1 ;
35197: LD_ADDR_VAR 0 10
35201: PUSH
35202: LD_VAR 0 10
35206: PUSH
35207: LD_REAL  1.10000000000000E+0000
35210: MUL
35211: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35212: LD_ADDR_VAR 0 10
35216: PUSH
35217: LD_VAR 0 10
35221: PUSH
35222: LD_VAR 0 6
35226: PPUSH
35227: LD_INT 1
35229: PPUSH
35230: CALL_OW 259
35234: PUSH
35235: LD_REAL  1.15000000000000E+0000
35238: MUL
35239: MUL
35240: ST_TO_ADDR
// end ; unit_vehicle :
35241: GO 36065
35243: LD_INT 2
35245: DOUBLE
35246: EQUAL
35247: IFTRUE 35251
35249: GO 36053
35251: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35252: LD_VAR 0 6
35256: PPUSH
35257: CALL_OW 264
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: LD_INT 42
35267: PUSH
35268: LD_INT 24
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: IN
35276: IFFALSE 35297
// points := [ 25 , 5 , 3 ] ;
35278: LD_ADDR_VAR 0 9
35282: PUSH
35283: LD_INT 25
35285: PUSH
35286: LD_INT 5
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35297: LD_VAR 0 6
35301: PPUSH
35302: CALL_OW 264
35306: PUSH
35307: LD_INT 4
35309: PUSH
35310: LD_INT 43
35312: PUSH
35313: LD_INT 25
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: IN
35321: IFFALSE 35342
// points := [ 40 , 15 , 5 ] ;
35323: LD_ADDR_VAR 0 9
35327: PUSH
35328: LD_INT 40
35330: PUSH
35331: LD_INT 15
35333: PUSH
35334: LD_INT 5
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35342: LD_VAR 0 6
35346: PPUSH
35347: CALL_OW 264
35351: PUSH
35352: LD_INT 3
35354: PUSH
35355: LD_INT 23
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: IN
35362: IFFALSE 35383
// points := [ 7 , 25 , 8 ] ;
35364: LD_ADDR_VAR 0 9
35368: PUSH
35369: LD_INT 7
35371: PUSH
35372: LD_INT 25
35374: PUSH
35375: LD_INT 8
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35383: LD_VAR 0 6
35387: PPUSH
35388: CALL_OW 264
35392: PUSH
35393: LD_INT 5
35395: PUSH
35396: LD_INT 27
35398: PUSH
35399: LD_INT 44
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: IN
35407: IFFALSE 35428
// points := [ 14 , 50 , 16 ] ;
35409: LD_ADDR_VAR 0 9
35413: PUSH
35414: LD_INT 14
35416: PUSH
35417: LD_INT 50
35419: PUSH
35420: LD_INT 16
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35428: LD_VAR 0 6
35432: PPUSH
35433: CALL_OW 264
35437: PUSH
35438: LD_INT 6
35440: PUSH
35441: LD_INT 46
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: IN
35448: IFFALSE 35469
// points := [ 32 , 120 , 70 ] ;
35450: LD_ADDR_VAR 0 9
35454: PUSH
35455: LD_INT 32
35457: PUSH
35458: LD_INT 120
35460: PUSH
35461: LD_INT 70
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
35469: LD_VAR 0 6
35473: PPUSH
35474: CALL_OW 264
35478: PUSH
35479: LD_INT 7
35481: PUSH
35482: LD_INT 28
35484: PUSH
35485: LD_INT 45
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: IN
35493: IFFALSE 35514
// points := [ 35 , 20 , 45 ] ;
35495: LD_ADDR_VAR 0 9
35499: PUSH
35500: LD_INT 35
35502: PUSH
35503: LD_INT 20
35505: PUSH
35506: LD_INT 45
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35514: LD_VAR 0 6
35518: PPUSH
35519: CALL_OW 264
35523: PUSH
35524: LD_INT 47
35526: PUSH
35527: EMPTY
35528: LIST
35529: IN
35530: IFFALSE 35551
// points := [ 67 , 45 , 75 ] ;
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_INT 67
35539: PUSH
35540: LD_INT 45
35542: PUSH
35543: LD_INT 75
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35551: LD_VAR 0 6
35555: PPUSH
35556: CALL_OW 264
35560: PUSH
35561: LD_INT 26
35563: PUSH
35564: EMPTY
35565: LIST
35566: IN
35567: IFFALSE 35588
// points := [ 120 , 30 , 80 ] ;
35569: LD_ADDR_VAR 0 9
35573: PUSH
35574: LD_INT 120
35576: PUSH
35577: LD_INT 30
35579: PUSH
35580: LD_INT 80
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35588: LD_VAR 0 6
35592: PPUSH
35593: CALL_OW 264
35597: PUSH
35598: LD_INT 22
35600: PUSH
35601: EMPTY
35602: LIST
35603: IN
35604: IFFALSE 35625
// points := [ 40 , 1 , 1 ] ;
35606: LD_ADDR_VAR 0 9
35610: PUSH
35611: LD_INT 40
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35625: LD_VAR 0 6
35629: PPUSH
35630: CALL_OW 264
35634: PUSH
35635: LD_INT 29
35637: PUSH
35638: EMPTY
35639: LIST
35640: IN
35641: IFFALSE 35662
// points := [ 70 , 200 , 400 ] ;
35643: LD_ADDR_VAR 0 9
35647: PUSH
35648: LD_INT 70
35650: PUSH
35651: LD_INT 200
35653: PUSH
35654: LD_INT 400
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35662: LD_VAR 0 6
35666: PPUSH
35667: CALL_OW 264
35671: PUSH
35672: LD_INT 14
35674: PUSH
35675: LD_INT 53
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: IN
35682: IFFALSE 35703
// points := [ 40 , 10 , 20 ] ;
35684: LD_ADDR_VAR 0 9
35688: PUSH
35689: LD_INT 40
35691: PUSH
35692: LD_INT 10
35694: PUSH
35695: LD_INT 20
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: LIST
35702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35703: LD_VAR 0 6
35707: PPUSH
35708: CALL_OW 264
35712: PUSH
35713: LD_INT 9
35715: PUSH
35716: EMPTY
35717: LIST
35718: IN
35719: IFFALSE 35740
// points := [ 5 , 70 , 20 ] ;
35721: LD_ADDR_VAR 0 9
35725: PUSH
35726: LD_INT 5
35728: PUSH
35729: LD_INT 70
35731: PUSH
35732: LD_INT 20
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: LIST
35739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35740: LD_VAR 0 6
35744: PPUSH
35745: CALL_OW 264
35749: PUSH
35750: LD_INT 10
35752: PUSH
35753: EMPTY
35754: LIST
35755: IN
35756: IFFALSE 35777
// points := [ 35 , 110 , 70 ] ;
35758: LD_ADDR_VAR 0 9
35762: PUSH
35763: LD_INT 35
35765: PUSH
35766: LD_INT 110
35768: PUSH
35769: LD_INT 70
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35777: LD_VAR 0 6
35781: PPUSH
35782: CALL_OW 265
35786: PUSH
35787: LD_INT 25
35789: EQUAL
35790: IFFALSE 35811
// points := [ 80 , 65 , 100 ] ;
35792: LD_ADDR_VAR 0 9
35796: PUSH
35797: LD_INT 80
35799: PUSH
35800: LD_INT 65
35802: PUSH
35803: LD_INT 100
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35811: LD_VAR 0 6
35815: PPUSH
35816: CALL_OW 263
35820: PUSH
35821: LD_INT 1
35823: EQUAL
35824: IFFALSE 35859
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35826: LD_ADDR_VAR 0 10
35830: PUSH
35831: LD_VAR 0 10
35835: PUSH
35836: LD_VAR 0 6
35840: PPUSH
35841: CALL_OW 311
35845: PPUSH
35846: LD_INT 3
35848: PPUSH
35849: CALL_OW 259
35853: PUSH
35854: LD_INT 4
35856: MUL
35857: MUL
35858: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35859: LD_VAR 0 6
35863: PPUSH
35864: CALL_OW 263
35868: PUSH
35869: LD_INT 2
35871: EQUAL
35872: IFFALSE 35923
// begin j := IsControledBy ( i ) ;
35874: LD_ADDR_VAR 0 7
35878: PUSH
35879: LD_VAR 0 6
35883: PPUSH
35884: CALL_OW 312
35888: ST_TO_ADDR
// if j then
35889: LD_VAR 0 7
35893: IFFALSE 35923
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35895: LD_ADDR_VAR 0 10
35899: PUSH
35900: LD_VAR 0 10
35904: PUSH
35905: LD_VAR 0 7
35909: PPUSH
35910: LD_INT 3
35912: PPUSH
35913: CALL_OW 259
35917: PUSH
35918: LD_INT 3
35920: MUL
35921: MUL
35922: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35923: LD_VAR 0 6
35927: PPUSH
35928: CALL_OW 264
35932: PUSH
35933: LD_INT 5
35935: PUSH
35936: LD_INT 6
35938: PUSH
35939: LD_INT 46
35941: PUSH
35942: LD_INT 44
35944: PUSH
35945: LD_INT 47
35947: PUSH
35948: LD_INT 45
35950: PUSH
35951: LD_INT 28
35953: PUSH
35954: LD_INT 7
35956: PUSH
35957: LD_INT 27
35959: PUSH
35960: LD_INT 29
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: IN
35975: PUSH
35976: LD_VAR 0 1
35980: PPUSH
35981: LD_INT 52
35983: PPUSH
35984: CALL_OW 321
35988: PUSH
35989: LD_INT 2
35991: EQUAL
35992: AND
35993: IFFALSE 36010
// bpoints := bpoints * 1.2 ;
35995: LD_ADDR_VAR 0 10
35999: PUSH
36000: LD_VAR 0 10
36004: PUSH
36005: LD_REAL  1.20000000000000E+0000
36008: MUL
36009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36010: LD_VAR 0 6
36014: PPUSH
36015: CALL_OW 264
36019: PUSH
36020: LD_INT 6
36022: PUSH
36023: LD_INT 46
36025: PUSH
36026: LD_INT 47
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: IN
36034: IFFALSE 36051
// bpoints := bpoints * 1.2 ;
36036: LD_ADDR_VAR 0 10
36040: PUSH
36041: LD_VAR 0 10
36045: PUSH
36046: LD_REAL  1.20000000000000E+0000
36049: MUL
36050: ST_TO_ADDR
// end ; unit_building :
36051: GO 36065
36053: LD_INT 3
36055: DOUBLE
36056: EQUAL
36057: IFTRUE 36061
36059: GO 36064
36061: POP
// ; end ;
36062: GO 36065
36064: POP
// for j = 1 to 3 do
36065: LD_ADDR_VAR 0 7
36069: PUSH
36070: DOUBLE
36071: LD_INT 1
36073: DEC
36074: ST_TO_ADDR
36075: LD_INT 3
36077: PUSH
36078: FOR_TO
36079: IFFALSE 36132
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36081: LD_ADDR_VAR 0 5
36085: PUSH
36086: LD_VAR 0 5
36090: PPUSH
36091: LD_VAR 0 7
36095: PPUSH
36096: LD_VAR 0 5
36100: PUSH
36101: LD_VAR 0 7
36105: ARRAY
36106: PUSH
36107: LD_VAR 0 9
36111: PUSH
36112: LD_VAR 0 7
36116: ARRAY
36117: PUSH
36118: LD_VAR 0 10
36122: MUL
36123: PLUS
36124: PPUSH
36125: CALL_OW 1
36129: ST_TO_ADDR
36130: GO 36078
36132: POP
36133: POP
// end ;
36134: GO 34617
36136: POP
36137: POP
// result := Replace ( result , 4 , tmp ) ;
36138: LD_ADDR_VAR 0 5
36142: PUSH
36143: LD_VAR 0 5
36147: PPUSH
36148: LD_INT 4
36150: PPUSH
36151: LD_VAR 0 8
36155: PPUSH
36156: CALL_OW 1
36160: ST_TO_ADDR
// end ;
36161: LD_VAR 0 5
36165: RET
// export function DangerAtRange ( unit , range ) ; begin
36166: LD_INT 0
36168: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36169: LD_ADDR_VAR 0 3
36173: PUSH
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 255
36183: PPUSH
36184: LD_VAR 0 1
36188: PPUSH
36189: CALL_OW 250
36193: PPUSH
36194: LD_VAR 0 1
36198: PPUSH
36199: CALL_OW 251
36203: PPUSH
36204: LD_VAR 0 2
36208: PPUSH
36209: CALL 34469 0 4
36213: ST_TO_ADDR
// end ;
36214: LD_VAR 0 3
36218: RET
// export function DangerInArea ( side , area ) ; begin
36219: LD_INT 0
36221: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36222: LD_ADDR_VAR 0 3
36226: PUSH
36227: LD_VAR 0 2
36231: PPUSH
36232: LD_INT 81
36234: PUSH
36235: LD_VAR 0 1
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PPUSH
36244: CALL_OW 70
36248: ST_TO_ADDR
// end ;
36249: LD_VAR 0 3
36253: RET
// export function IsExtension ( b ) ; begin
36254: LD_INT 0
36256: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36257: LD_ADDR_VAR 0 2
36261: PUSH
36262: LD_VAR 0 1
36266: PUSH
36267: LD_INT 23
36269: PUSH
36270: LD_INT 20
36272: PUSH
36273: LD_INT 22
36275: PUSH
36276: LD_INT 17
36278: PUSH
36279: LD_INT 24
36281: PUSH
36282: LD_INT 21
36284: PUSH
36285: LD_INT 19
36287: PUSH
36288: LD_INT 16
36290: PUSH
36291: LD_INT 25
36293: PUSH
36294: LD_INT 18
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: IN
36309: ST_TO_ADDR
// end ;
36310: LD_VAR 0 2
36314: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
36315: LD_INT 0
36317: PPUSH
36318: PPUSH
36319: PPUSH
// result := [ ] ;
36320: LD_ADDR_VAR 0 3
36324: PUSH
36325: EMPTY
36326: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36327: LD_ADDR_VAR 0 4
36331: PUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_INT 21
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PPUSH
36347: CALL_OW 70
36351: ST_TO_ADDR
// if not tmp then
36352: LD_VAR 0 4
36356: NOT
36357: IFFALSE 36361
// exit ;
36359: GO 36419
// for i in tmp do
36361: LD_ADDR_VAR 0 5
36365: PUSH
36366: LD_VAR 0 4
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36407
// if GetBase ( i ) <> base then
36374: LD_VAR 0 5
36378: PPUSH
36379: CALL_OW 274
36383: PUSH
36384: LD_VAR 0 1
36388: NONEQUAL
36389: IFFALSE 36405
// ComLinkToBase ( base , i ) ;
36391: LD_VAR 0 1
36395: PPUSH
36396: LD_VAR 0 5
36400: PPUSH
36401: CALL_OW 169
36405: GO 36371
36407: POP
36408: POP
// result := tmp ;
36409: LD_ADDR_VAR 0 3
36413: PUSH
36414: LD_VAR 0 4
36418: ST_TO_ADDR
// end ;
36419: LD_VAR 0 3
36423: RET
// export function ComComplete ( unit , b ) ; var i ; begin
36424: LD_INT 0
36426: PPUSH
36427: PPUSH
// if BuildingStatus ( b ) = bs_build then
36428: LD_VAR 0 2
36432: PPUSH
36433: CALL_OW 461
36437: PUSH
36438: LD_INT 1
36440: EQUAL
36441: IFFALSE 36501
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36443: LD_VAR 0 1
36447: PPUSH
36448: LD_STRING h
36450: PUSH
36451: LD_VAR 0 2
36455: PPUSH
36456: CALL_OW 250
36460: PUSH
36461: LD_VAR 0 2
36465: PPUSH
36466: CALL_OW 251
36470: PUSH
36471: LD_VAR 0 2
36475: PUSH
36476: LD_INT 0
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: PPUSH
36497: CALL_OW 446
// end ;
36501: LD_VAR 0 3
36505: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36506: LD_INT 0
36508: PPUSH
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
36513: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
36514: LD_VAR 0 1
36518: NOT
36519: PUSH
36520: LD_VAR 0 1
36524: PPUSH
36525: CALL_OW 263
36529: PUSH
36530: LD_INT 2
36532: EQUAL
36533: NOT
36534: OR
36535: IFFALSE 36539
// exit ;
36537: GO 36855
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36539: LD_ADDR_VAR 0 6
36543: PUSH
36544: LD_INT 22
36546: PUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: CALL_OW 255
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 30
36566: PUSH
36567: LD_INT 36
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 34
36576: PUSH
36577: LD_INT 31
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PPUSH
36593: CALL_OW 69
36597: ST_TO_ADDR
// if not tmp then
36598: LD_VAR 0 6
36602: NOT
36603: IFFALSE 36607
// exit ;
36605: GO 36855
// result := [ ] ;
36607: LD_ADDR_VAR 0 2
36611: PUSH
36612: EMPTY
36613: ST_TO_ADDR
// for i in tmp do
36614: LD_ADDR_VAR 0 3
36618: PUSH
36619: LD_VAR 0 6
36623: PUSH
36624: FOR_IN
36625: IFFALSE 36696
// begin t := UnitsInside ( i ) ;
36627: LD_ADDR_VAR 0 4
36631: PUSH
36632: LD_VAR 0 3
36636: PPUSH
36637: CALL_OW 313
36641: ST_TO_ADDR
// if t then
36642: LD_VAR 0 4
36646: IFFALSE 36694
// for j in t do
36648: LD_ADDR_VAR 0 7
36652: PUSH
36653: LD_VAR 0 4
36657: PUSH
36658: FOR_IN
36659: IFFALSE 36692
// result := Insert ( result , result + 1 , j ) ;
36661: LD_ADDR_VAR 0 2
36665: PUSH
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_VAR 0 2
36675: PUSH
36676: LD_INT 1
36678: PLUS
36679: PPUSH
36680: LD_VAR 0 7
36684: PPUSH
36685: CALL_OW 2
36689: ST_TO_ADDR
36690: GO 36658
36692: POP
36693: POP
// end ;
36694: GO 36624
36696: POP
36697: POP
// if not result then
36698: LD_VAR 0 2
36702: NOT
36703: IFFALSE 36707
// exit ;
36705: GO 36855
// mech := result [ 1 ] ;
36707: LD_ADDR_VAR 0 5
36711: PUSH
36712: LD_VAR 0 2
36716: PUSH
36717: LD_INT 1
36719: ARRAY
36720: ST_TO_ADDR
// if result > 1 then
36721: LD_VAR 0 2
36725: PUSH
36726: LD_INT 1
36728: GREATER
36729: IFFALSE 36841
// for i = 2 to result do
36731: LD_ADDR_VAR 0 3
36735: PUSH
36736: DOUBLE
36737: LD_INT 2
36739: DEC
36740: ST_TO_ADDR
36741: LD_VAR 0 2
36745: PUSH
36746: FOR_TO
36747: IFFALSE 36839
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36749: LD_ADDR_VAR 0 4
36753: PUSH
36754: LD_VAR 0 2
36758: PUSH
36759: LD_VAR 0 3
36763: ARRAY
36764: PPUSH
36765: LD_INT 3
36767: PPUSH
36768: CALL_OW 259
36772: PUSH
36773: LD_VAR 0 2
36777: PUSH
36778: LD_VAR 0 3
36782: ARRAY
36783: PPUSH
36784: CALL_OW 432
36788: MINUS
36789: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36790: LD_VAR 0 4
36794: PUSH
36795: LD_VAR 0 5
36799: PPUSH
36800: LD_INT 3
36802: PPUSH
36803: CALL_OW 259
36807: PUSH
36808: LD_VAR 0 5
36812: PPUSH
36813: CALL_OW 432
36817: MINUS
36818: GREATEREQUAL
36819: IFFALSE 36837
// mech := result [ i ] ;
36821: LD_ADDR_VAR 0 5
36825: PUSH
36826: LD_VAR 0 2
36830: PUSH
36831: LD_VAR 0 3
36835: ARRAY
36836: ST_TO_ADDR
// end ;
36837: GO 36746
36839: POP
36840: POP
// ComLinkTo ( vehicle , mech ) ;
36841: LD_VAR 0 1
36845: PPUSH
36846: LD_VAR 0 5
36850: PPUSH
36851: CALL_OW 135
// end ;
36855: LD_VAR 0 2
36859: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36860: LD_INT 0
36862: PPUSH
36863: PPUSH
36864: PPUSH
36865: PPUSH
36866: PPUSH
36867: PPUSH
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
36874: PPUSH
// result := [ ] ;
36875: LD_ADDR_VAR 0 7
36879: PUSH
36880: EMPTY
36881: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36882: LD_VAR 0 1
36886: PPUSH
36887: CALL_OW 266
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: IN
36902: NOT
36903: IFFALSE 36907
// exit ;
36905: GO 38538
// if name then
36907: LD_VAR 0 3
36911: IFFALSE 36927
// SetBName ( base_dep , name ) ;
36913: LD_VAR 0 1
36917: PPUSH
36918: LD_VAR 0 3
36922: PPUSH
36923: CALL_OW 500
// base := GetBase ( base_dep ) ;
36927: LD_ADDR_VAR 0 15
36931: PUSH
36932: LD_VAR 0 1
36936: PPUSH
36937: CALL_OW 274
36941: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36942: LD_ADDR_VAR 0 16
36946: PUSH
36947: LD_VAR 0 1
36951: PPUSH
36952: CALL_OW 255
36956: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36957: LD_ADDR_VAR 0 17
36961: PUSH
36962: LD_VAR 0 1
36966: PPUSH
36967: CALL_OW 248
36971: ST_TO_ADDR
// if sources then
36972: LD_VAR 0 5
36976: IFFALSE 37023
// for i = 1 to 3 do
36978: LD_ADDR_VAR 0 8
36982: PUSH
36983: DOUBLE
36984: LD_INT 1
36986: DEC
36987: ST_TO_ADDR
36988: LD_INT 3
36990: PUSH
36991: FOR_TO
36992: IFFALSE 37021
// AddResourceType ( base , i , sources [ i ] ) ;
36994: LD_VAR 0 15
36998: PPUSH
36999: LD_VAR 0 8
37003: PPUSH
37004: LD_VAR 0 5
37008: PUSH
37009: LD_VAR 0 8
37013: ARRAY
37014: PPUSH
37015: CALL_OW 276
37019: GO 36991
37021: POP
37022: POP
// buildings := GetBaseBuildings ( base , area ) ;
37023: LD_ADDR_VAR 0 18
37027: PUSH
37028: LD_VAR 0 15
37032: PPUSH
37033: LD_VAR 0 2
37037: PPUSH
37038: CALL 36315 0 2
37042: ST_TO_ADDR
// InitHc ;
37043: CALL_OW 19
// InitUc ;
37047: CALL_OW 18
// uc_side := side ;
37051: LD_ADDR_OWVAR 20
37055: PUSH
37056: LD_VAR 0 16
37060: ST_TO_ADDR
// uc_nation := nation ;
37061: LD_ADDR_OWVAR 21
37065: PUSH
37066: LD_VAR 0 17
37070: ST_TO_ADDR
// if buildings then
37071: LD_VAR 0 18
37075: IFFALSE 38397
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37077: LD_ADDR_VAR 0 19
37081: PUSH
37082: LD_VAR 0 18
37086: PPUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 30
37092: PUSH
37093: LD_INT 29
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 30
37102: PUSH
37103: LD_INT 30
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: PPUSH
37115: CALL_OW 72
37119: ST_TO_ADDR
// if tmp then
37120: LD_VAR 0 19
37124: IFFALSE 37172
// for i in tmp do
37126: LD_ADDR_VAR 0 8
37130: PUSH
37131: LD_VAR 0 19
37135: PUSH
37136: FOR_IN
37137: IFFALSE 37170
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37139: LD_VAR 0 8
37143: PPUSH
37144: CALL_OW 250
37148: PPUSH
37149: LD_VAR 0 8
37153: PPUSH
37154: CALL_OW 251
37158: PPUSH
37159: LD_VAR 0 16
37163: PPUSH
37164: CALL_OW 441
37168: GO 37136
37170: POP
37171: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37172: LD_VAR 0 18
37176: PPUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 30
37182: PUSH
37183: LD_INT 32
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 30
37192: PUSH
37193: LD_INT 33
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: PPUSH
37205: CALL_OW 72
37209: IFFALSE 37297
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37211: LD_ADDR_VAR 0 8
37215: PUSH
37216: LD_VAR 0 18
37220: PPUSH
37221: LD_INT 2
37223: PUSH
37224: LD_INT 30
37226: PUSH
37227: LD_INT 32
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 30
37236: PUSH
37237: LD_INT 33
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: PPUSH
37249: CALL_OW 72
37253: PUSH
37254: FOR_IN
37255: IFFALSE 37295
// begin if not GetBWeapon ( i ) then
37257: LD_VAR 0 8
37261: PPUSH
37262: CALL_OW 269
37266: NOT
37267: IFFALSE 37293
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37269: LD_VAR 0 8
37273: PPUSH
37274: LD_VAR 0 8
37278: PPUSH
37279: LD_VAR 0 2
37283: PPUSH
37284: CALL 38543 0 2
37288: PPUSH
37289: CALL_OW 431
// end ;
37293: GO 37254
37295: POP
37296: POP
// end ; for i = 1 to personel do
37297: LD_ADDR_VAR 0 8
37301: PUSH
37302: DOUBLE
37303: LD_INT 1
37305: DEC
37306: ST_TO_ADDR
37307: LD_VAR 0 6
37311: PUSH
37312: FOR_TO
37313: IFFALSE 38377
// begin if i > 4 then
37315: LD_VAR 0 8
37319: PUSH
37320: LD_INT 4
37322: GREATER
37323: IFFALSE 37327
// break ;
37325: GO 38377
// case i of 1 :
37327: LD_VAR 0 8
37331: PUSH
37332: LD_INT 1
37334: DOUBLE
37335: EQUAL
37336: IFTRUE 37340
37338: GO 37420
37340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37341: LD_ADDR_VAR 0 12
37345: PUSH
37346: LD_VAR 0 18
37350: PPUSH
37351: LD_INT 22
37353: PUSH
37354: LD_VAR 0 16
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 58
37365: PUSH
37366: EMPTY
37367: LIST
37368: PUSH
37369: LD_INT 2
37371: PUSH
37372: LD_INT 30
37374: PUSH
37375: LD_INT 32
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 30
37384: PUSH
37385: LD_INT 4
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 30
37394: PUSH
37395: LD_INT 5
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: PPUSH
37413: CALL_OW 72
37417: ST_TO_ADDR
37418: GO 37642
37420: LD_INT 2
37422: DOUBLE
37423: EQUAL
37424: IFTRUE 37428
37426: GO 37490
37428: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37429: LD_ADDR_VAR 0 12
37433: PUSH
37434: LD_VAR 0 18
37438: PPUSH
37439: LD_INT 22
37441: PUSH
37442: LD_VAR 0 16
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 30
37456: PUSH
37457: LD_INT 0
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 30
37466: PUSH
37467: LD_INT 1
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PPUSH
37483: CALL_OW 72
37487: ST_TO_ADDR
37488: GO 37642
37490: LD_INT 3
37492: DOUBLE
37493: EQUAL
37494: IFTRUE 37498
37496: GO 37560
37498: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37499: LD_ADDR_VAR 0 12
37503: PUSH
37504: LD_VAR 0 18
37508: PPUSH
37509: LD_INT 22
37511: PUSH
37512: LD_VAR 0 16
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: PUSH
37524: LD_INT 30
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 30
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL_OW 72
37557: ST_TO_ADDR
37558: GO 37642
37560: LD_INT 4
37562: DOUBLE
37563: EQUAL
37564: IFTRUE 37568
37566: GO 37641
37568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37569: LD_ADDR_VAR 0 12
37573: PUSH
37574: LD_VAR 0 18
37578: PPUSH
37579: LD_INT 22
37581: PUSH
37582: LD_VAR 0 16
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 30
37596: PUSH
37597: LD_INT 6
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 30
37606: PUSH
37607: LD_INT 7
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 30
37616: PUSH
37617: LD_INT 8
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PPUSH
37634: CALL_OW 72
37638: ST_TO_ADDR
37639: GO 37642
37641: POP
// if i = 1 then
37642: LD_VAR 0 8
37646: PUSH
37647: LD_INT 1
37649: EQUAL
37650: IFFALSE 37761
// begin tmp := [ ] ;
37652: LD_ADDR_VAR 0 19
37656: PUSH
37657: EMPTY
37658: ST_TO_ADDR
// for j in f do
37659: LD_ADDR_VAR 0 9
37663: PUSH
37664: LD_VAR 0 12
37668: PUSH
37669: FOR_IN
37670: IFFALSE 37743
// if GetBType ( j ) = b_bunker then
37672: LD_VAR 0 9
37676: PPUSH
37677: CALL_OW 266
37681: PUSH
37682: LD_INT 32
37684: EQUAL
37685: IFFALSE 37712
// tmp := Insert ( tmp , 1 , j ) else
37687: LD_ADDR_VAR 0 19
37691: PUSH
37692: LD_VAR 0 19
37696: PPUSH
37697: LD_INT 1
37699: PPUSH
37700: LD_VAR 0 9
37704: PPUSH
37705: CALL_OW 2
37709: ST_TO_ADDR
37710: GO 37741
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37712: LD_ADDR_VAR 0 19
37716: PUSH
37717: LD_VAR 0 19
37721: PPUSH
37722: LD_VAR 0 19
37726: PUSH
37727: LD_INT 1
37729: PLUS
37730: PPUSH
37731: LD_VAR 0 9
37735: PPUSH
37736: CALL_OW 2
37740: ST_TO_ADDR
37741: GO 37669
37743: POP
37744: POP
// if tmp then
37745: LD_VAR 0 19
37749: IFFALSE 37761
// f := tmp ;
37751: LD_ADDR_VAR 0 12
37755: PUSH
37756: LD_VAR 0 19
37760: ST_TO_ADDR
// end ; x := personel [ i ] ;
37761: LD_ADDR_VAR 0 13
37765: PUSH
37766: LD_VAR 0 6
37770: PUSH
37771: LD_VAR 0 8
37775: ARRAY
37776: ST_TO_ADDR
// if x = - 1 then
37777: LD_VAR 0 13
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: EQUAL
37786: IFFALSE 37995
// begin for j in f do
37788: LD_ADDR_VAR 0 9
37792: PUSH
37793: LD_VAR 0 12
37797: PUSH
37798: FOR_IN
37799: IFFALSE 37991
// repeat InitHc ;
37801: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37805: LD_VAR 0 9
37809: PPUSH
37810: CALL_OW 266
37814: PUSH
37815: LD_INT 5
37817: EQUAL
37818: IFFALSE 37888
// begin if UnitsInside ( j ) < 3 then
37820: LD_VAR 0 9
37824: PPUSH
37825: CALL_OW 313
37829: PUSH
37830: LD_INT 3
37832: LESS
37833: IFFALSE 37869
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37835: LD_INT 0
37837: PPUSH
37838: LD_INT 5
37840: PUSH
37841: LD_INT 8
37843: PUSH
37844: LD_INT 9
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: PUSH
37852: LD_VAR 0 17
37856: ARRAY
37857: PPUSH
37858: LD_VAR 0 4
37862: PPUSH
37863: CALL_OW 380
37867: GO 37886
// PrepareHuman ( false , i , skill ) ;
37869: LD_INT 0
37871: PPUSH
37872: LD_VAR 0 8
37876: PPUSH
37877: LD_VAR 0 4
37881: PPUSH
37882: CALL_OW 380
// end else
37886: GO 37905
// PrepareHuman ( false , i , skill ) ;
37888: LD_INT 0
37890: PPUSH
37891: LD_VAR 0 8
37895: PPUSH
37896: LD_VAR 0 4
37900: PPUSH
37901: CALL_OW 380
// un := CreateHuman ;
37905: LD_ADDR_VAR 0 14
37909: PUSH
37910: CALL_OW 44
37914: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37915: LD_ADDR_VAR 0 7
37919: PUSH
37920: LD_VAR 0 7
37924: PPUSH
37925: LD_INT 1
37927: PPUSH
37928: LD_VAR 0 14
37932: PPUSH
37933: CALL_OW 2
37937: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37938: LD_VAR 0 14
37942: PPUSH
37943: LD_VAR 0 9
37947: PPUSH
37948: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37952: LD_VAR 0 9
37956: PPUSH
37957: CALL_OW 313
37961: PUSH
37962: LD_INT 6
37964: EQUAL
37965: PUSH
37966: LD_VAR 0 9
37970: PPUSH
37971: CALL_OW 266
37975: PUSH
37976: LD_INT 32
37978: PUSH
37979: LD_INT 31
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: IN
37986: OR
37987: IFFALSE 37801
37989: GO 37798
37991: POP
37992: POP
// end else
37993: GO 38375
// for j = 1 to x do
37995: LD_ADDR_VAR 0 9
37999: PUSH
38000: DOUBLE
38001: LD_INT 1
38003: DEC
38004: ST_TO_ADDR
38005: LD_VAR 0 13
38009: PUSH
38010: FOR_TO
38011: IFFALSE 38373
// begin InitHc ;
38013: CALL_OW 19
// if not f then
38017: LD_VAR 0 12
38021: NOT
38022: IFFALSE 38111
// begin PrepareHuman ( false , i , skill ) ;
38024: LD_INT 0
38026: PPUSH
38027: LD_VAR 0 8
38031: PPUSH
38032: LD_VAR 0 4
38036: PPUSH
38037: CALL_OW 380
// un := CreateHuman ;
38041: LD_ADDR_VAR 0 14
38045: PUSH
38046: CALL_OW 44
38050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38051: LD_ADDR_VAR 0 7
38055: PUSH
38056: LD_VAR 0 7
38060: PPUSH
38061: LD_INT 1
38063: PPUSH
38064: LD_VAR 0 14
38068: PPUSH
38069: CALL_OW 2
38073: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38074: LD_VAR 0 14
38078: PPUSH
38079: LD_VAR 0 1
38083: PPUSH
38084: CALL_OW 250
38088: PPUSH
38089: LD_VAR 0 1
38093: PPUSH
38094: CALL_OW 251
38098: PPUSH
38099: LD_INT 10
38101: PPUSH
38102: LD_INT 0
38104: PPUSH
38105: CALL_OW 50
// continue ;
38109: GO 38010
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38111: LD_VAR 0 12
38115: PUSH
38116: LD_INT 1
38118: ARRAY
38119: PPUSH
38120: CALL_OW 313
38124: PUSH
38125: LD_VAR 0 12
38129: PUSH
38130: LD_INT 1
38132: ARRAY
38133: PPUSH
38134: CALL_OW 266
38138: PUSH
38139: LD_INT 32
38141: PUSH
38142: LD_INT 31
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: IN
38149: AND
38150: PUSH
38151: LD_VAR 0 12
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: PPUSH
38160: CALL_OW 313
38164: PUSH
38165: LD_INT 6
38167: EQUAL
38168: OR
38169: IFFALSE 38189
// f := Delete ( f , 1 ) ;
38171: LD_ADDR_VAR 0 12
38175: PUSH
38176: LD_VAR 0 12
38180: PPUSH
38181: LD_INT 1
38183: PPUSH
38184: CALL_OW 3
38188: ST_TO_ADDR
// if not f then
38189: LD_VAR 0 12
38193: NOT
38194: IFFALSE 38212
// begin x := x + 2 ;
38196: LD_ADDR_VAR 0 13
38200: PUSH
38201: LD_VAR 0 13
38205: PUSH
38206: LD_INT 2
38208: PLUS
38209: ST_TO_ADDR
// continue ;
38210: GO 38010
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38212: LD_VAR 0 12
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: PPUSH
38221: CALL_OW 266
38225: PUSH
38226: LD_INT 5
38228: EQUAL
38229: IFFALSE 38303
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38231: LD_VAR 0 12
38235: PUSH
38236: LD_INT 1
38238: ARRAY
38239: PPUSH
38240: CALL_OW 313
38244: PUSH
38245: LD_INT 3
38247: LESS
38248: IFFALSE 38284
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38250: LD_INT 0
38252: PPUSH
38253: LD_INT 5
38255: PUSH
38256: LD_INT 8
38258: PUSH
38259: LD_INT 9
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: PUSH
38267: LD_VAR 0 17
38271: ARRAY
38272: PPUSH
38273: LD_VAR 0 4
38277: PPUSH
38278: CALL_OW 380
38282: GO 38301
// PrepareHuman ( false , i , skill ) ;
38284: LD_INT 0
38286: PPUSH
38287: LD_VAR 0 8
38291: PPUSH
38292: LD_VAR 0 4
38296: PPUSH
38297: CALL_OW 380
// end else
38301: GO 38320
// PrepareHuman ( false , i , skill ) ;
38303: LD_INT 0
38305: PPUSH
38306: LD_VAR 0 8
38310: PPUSH
38311: LD_VAR 0 4
38315: PPUSH
38316: CALL_OW 380
// un := CreateHuman ;
38320: LD_ADDR_VAR 0 14
38324: PUSH
38325: CALL_OW 44
38329: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38330: LD_ADDR_VAR 0 7
38334: PUSH
38335: LD_VAR 0 7
38339: PPUSH
38340: LD_INT 1
38342: PPUSH
38343: LD_VAR 0 14
38347: PPUSH
38348: CALL_OW 2
38352: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38353: LD_VAR 0 14
38357: PPUSH
38358: LD_VAR 0 12
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: CALL_OW 52
// end ;
38371: GO 38010
38373: POP
38374: POP
// end ;
38375: GO 37312
38377: POP
38378: POP
// result := result ^ buildings ;
38379: LD_ADDR_VAR 0 7
38383: PUSH
38384: LD_VAR 0 7
38388: PUSH
38389: LD_VAR 0 18
38393: ADD
38394: ST_TO_ADDR
// end else
38395: GO 38538
// begin for i = 1 to personel do
38397: LD_ADDR_VAR 0 8
38401: PUSH
38402: DOUBLE
38403: LD_INT 1
38405: DEC
38406: ST_TO_ADDR
38407: LD_VAR 0 6
38411: PUSH
38412: FOR_TO
38413: IFFALSE 38536
// begin if i > 4 then
38415: LD_VAR 0 8
38419: PUSH
38420: LD_INT 4
38422: GREATER
38423: IFFALSE 38427
// break ;
38425: GO 38536
// x := personel [ i ] ;
38427: LD_ADDR_VAR 0 13
38431: PUSH
38432: LD_VAR 0 6
38436: PUSH
38437: LD_VAR 0 8
38441: ARRAY
38442: ST_TO_ADDR
// if x = - 1 then
38443: LD_VAR 0 13
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: EQUAL
38452: IFFALSE 38456
// continue ;
38454: GO 38412
// PrepareHuman ( false , i , skill ) ;
38456: LD_INT 0
38458: PPUSH
38459: LD_VAR 0 8
38463: PPUSH
38464: LD_VAR 0 4
38468: PPUSH
38469: CALL_OW 380
// un := CreateHuman ;
38473: LD_ADDR_VAR 0 14
38477: PUSH
38478: CALL_OW 44
38482: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38483: LD_VAR 0 14
38487: PPUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 250
38497: PPUSH
38498: LD_VAR 0 1
38502: PPUSH
38503: CALL_OW 251
38507: PPUSH
38508: LD_INT 10
38510: PPUSH
38511: LD_INT 0
38513: PPUSH
38514: CALL_OW 50
// result := result ^ un ;
38518: LD_ADDR_VAR 0 7
38522: PUSH
38523: LD_VAR 0 7
38527: PUSH
38528: LD_VAR 0 14
38532: ADD
38533: ST_TO_ADDR
// end ;
38534: GO 38412
38536: POP
38537: POP
// end ; end ;
38538: LD_VAR 0 7
38542: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38543: LD_INT 0
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
// result := false ;
38561: LD_ADDR_VAR 0 3
38565: PUSH
38566: LD_INT 0
38568: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38569: LD_VAR 0 1
38573: NOT
38574: PUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 266
38584: PUSH
38585: LD_INT 32
38587: PUSH
38588: LD_INT 33
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: IN
38595: NOT
38596: OR
38597: IFFALSE 38601
// exit ;
38599: GO 39737
// nat := GetNation ( tower ) ;
38601: LD_ADDR_VAR 0 12
38605: PUSH
38606: LD_VAR 0 1
38610: PPUSH
38611: CALL_OW 248
38615: ST_TO_ADDR
// side := GetSide ( tower ) ;
38616: LD_ADDR_VAR 0 16
38620: PUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 255
38630: ST_TO_ADDR
// x := GetX ( tower ) ;
38631: LD_ADDR_VAR 0 10
38635: PUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: CALL_OW 250
38645: ST_TO_ADDR
// y := GetY ( tower ) ;
38646: LD_ADDR_VAR 0 11
38650: PUSH
38651: LD_VAR 0 1
38655: PPUSH
38656: CALL_OW 251
38660: ST_TO_ADDR
// if not x or not y then
38661: LD_VAR 0 10
38665: NOT
38666: PUSH
38667: LD_VAR 0 11
38671: NOT
38672: OR
38673: IFFALSE 38677
// exit ;
38675: GO 39737
// weapon := 0 ;
38677: LD_ADDR_VAR 0 18
38681: PUSH
38682: LD_INT 0
38684: ST_TO_ADDR
// fac_list := [ ] ;
38685: LD_ADDR_VAR 0 17
38689: PUSH
38690: EMPTY
38691: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
38692: LD_ADDR_VAR 0 6
38696: PUSH
38697: LD_VAR 0 1
38701: PPUSH
38702: CALL_OW 274
38706: PPUSH
38707: LD_VAR 0 2
38711: PPUSH
38712: CALL 36315 0 2
38716: PPUSH
38717: LD_INT 30
38719: PUSH
38720: LD_INT 3
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PPUSH
38727: CALL_OW 72
38731: ST_TO_ADDR
// if not factories then
38732: LD_VAR 0 6
38736: NOT
38737: IFFALSE 38741
// exit ;
38739: GO 39737
// for i in factories do
38741: LD_ADDR_VAR 0 8
38745: PUSH
38746: LD_VAR 0 6
38750: PUSH
38751: FOR_IN
38752: IFFALSE 38777
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38754: LD_ADDR_VAR 0 17
38758: PUSH
38759: LD_VAR 0 17
38763: PUSH
38764: LD_VAR 0 8
38768: PPUSH
38769: CALL_OW 478
38773: UNION
38774: ST_TO_ADDR
38775: GO 38751
38777: POP
38778: POP
// if not fac_list then
38779: LD_VAR 0 17
38783: NOT
38784: IFFALSE 38788
// exit ;
38786: GO 39737
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38788: LD_ADDR_VAR 0 5
38792: PUSH
38793: LD_INT 4
38795: PUSH
38796: LD_INT 5
38798: PUSH
38799: LD_INT 9
38801: PUSH
38802: LD_INT 10
38804: PUSH
38805: LD_INT 6
38807: PUSH
38808: LD_INT 7
38810: PUSH
38811: LD_INT 11
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 27
38825: PUSH
38826: LD_INT 28
38828: PUSH
38829: LD_INT 26
38831: PUSH
38832: LD_INT 30
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 43
38843: PUSH
38844: LD_INT 44
38846: PUSH
38847: LD_INT 46
38849: PUSH
38850: LD_INT 45
38852: PUSH
38853: LD_INT 47
38855: PUSH
38856: LD_INT 49
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: PUSH
38872: LD_VAR 0 12
38876: ARRAY
38877: ST_TO_ADDR
// for i in list do
38878: LD_ADDR_VAR 0 8
38882: PUSH
38883: LD_VAR 0 5
38887: PUSH
38888: FOR_IN
38889: IFFALSE 38922
// if not i in fac_list then
38891: LD_VAR 0 8
38895: PUSH
38896: LD_VAR 0 17
38900: IN
38901: NOT
38902: IFFALSE 38920
// list := list diff i ;
38904: LD_ADDR_VAR 0 5
38908: PUSH
38909: LD_VAR 0 5
38913: PUSH
38914: LD_VAR 0 8
38918: DIFF
38919: ST_TO_ADDR
38920: GO 38888
38922: POP
38923: POP
// if not list then
38924: LD_VAR 0 5
38928: NOT
38929: IFFALSE 38933
// exit ;
38931: GO 39737
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38933: LD_VAR 0 12
38937: PUSH
38938: LD_INT 3
38940: EQUAL
38941: PUSH
38942: LD_INT 49
38944: PUSH
38945: LD_VAR 0 5
38949: IN
38950: AND
38951: PUSH
38952: LD_INT 31
38954: PPUSH
38955: LD_VAR 0 16
38959: PPUSH
38960: CALL_OW 321
38964: PUSH
38965: LD_INT 2
38967: EQUAL
38968: AND
38969: IFFALSE 39029
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38971: LD_INT 22
38973: PUSH
38974: LD_VAR 0 16
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 35
38985: PUSH
38986: LD_INT 49
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 91
38995: PUSH
38996: LD_VAR 0 1
39000: PUSH
39001: LD_INT 10
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: PPUSH
39014: CALL_OW 69
39018: NOT
39019: IFFALSE 39029
// weapon := ru_time_lapser ;
39021: LD_ADDR_VAR 0 18
39025: PUSH
39026: LD_INT 49
39028: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39029: LD_VAR 0 12
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: IN
39044: PUSH
39045: LD_INT 11
39047: PUSH
39048: LD_VAR 0 5
39052: IN
39053: PUSH
39054: LD_INT 30
39056: PUSH
39057: LD_VAR 0 5
39061: IN
39062: OR
39063: AND
39064: PUSH
39065: LD_INT 6
39067: PPUSH
39068: LD_VAR 0 16
39072: PPUSH
39073: CALL_OW 321
39077: PUSH
39078: LD_INT 2
39080: EQUAL
39081: AND
39082: IFFALSE 39247
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39084: LD_INT 22
39086: PUSH
39087: LD_VAR 0 16
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 2
39098: PUSH
39099: LD_INT 35
39101: PUSH
39102: LD_INT 11
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 35
39111: PUSH
39112: LD_INT 30
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 91
39126: PUSH
39127: LD_VAR 0 1
39131: PUSH
39132: LD_INT 18
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: LIST
39144: PPUSH
39145: CALL_OW 69
39149: NOT
39150: PUSH
39151: LD_INT 22
39153: PUSH
39154: LD_VAR 0 16
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 30
39168: PUSH
39169: LD_INT 32
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 30
39178: PUSH
39179: LD_INT 33
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 91
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: LD_INT 12
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: LIST
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: PUSH
39212: EMPTY
39213: LIST
39214: PPUSH
39215: CALL_OW 69
39219: PUSH
39220: LD_INT 2
39222: GREATER
39223: AND
39224: IFFALSE 39247
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39226: LD_ADDR_VAR 0 18
39230: PUSH
39231: LD_INT 11
39233: PUSH
39234: LD_INT 30
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_VAR 0 12
39245: ARRAY
39246: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39247: LD_VAR 0 18
39251: NOT
39252: PUSH
39253: LD_INT 40
39255: PPUSH
39256: LD_VAR 0 16
39260: PPUSH
39261: CALL_OW 321
39265: PUSH
39266: LD_INT 2
39268: EQUAL
39269: AND
39270: PUSH
39271: LD_INT 7
39273: PUSH
39274: LD_VAR 0 5
39278: IN
39279: PUSH
39280: LD_INT 28
39282: PUSH
39283: LD_VAR 0 5
39287: IN
39288: OR
39289: PUSH
39290: LD_INT 45
39292: PUSH
39293: LD_VAR 0 5
39297: IN
39298: OR
39299: AND
39300: IFFALSE 39554
// begin hex := GetHexInfo ( x , y ) ;
39302: LD_ADDR_VAR 0 4
39306: PUSH
39307: LD_VAR 0 10
39311: PPUSH
39312: LD_VAR 0 11
39316: PPUSH
39317: CALL_OW 546
39321: ST_TO_ADDR
// if hex [ 1 ] then
39322: LD_VAR 0 4
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: IFFALSE 39334
// exit ;
39332: GO 39737
// height := hex [ 2 ] ;
39334: LD_ADDR_VAR 0 15
39338: PUSH
39339: LD_VAR 0 4
39343: PUSH
39344: LD_INT 2
39346: ARRAY
39347: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39348: LD_ADDR_VAR 0 14
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 3
39361: PUSH
39362: LD_INT 5
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: ST_TO_ADDR
// for i in tmp do
39371: LD_ADDR_VAR 0 8
39375: PUSH
39376: LD_VAR 0 14
39380: PUSH
39381: FOR_IN
39382: IFFALSE 39552
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39384: LD_ADDR_VAR 0 9
39388: PUSH
39389: LD_VAR 0 10
39393: PPUSH
39394: LD_VAR 0 8
39398: PPUSH
39399: LD_INT 5
39401: PPUSH
39402: CALL_OW 272
39406: PUSH
39407: LD_VAR 0 11
39411: PPUSH
39412: LD_VAR 0 8
39416: PPUSH
39417: LD_INT 5
39419: PPUSH
39420: CALL_OW 273
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39429: LD_VAR 0 9
39433: PUSH
39434: LD_INT 1
39436: ARRAY
39437: PPUSH
39438: LD_VAR 0 9
39442: PUSH
39443: LD_INT 2
39445: ARRAY
39446: PPUSH
39447: CALL_OW 488
39451: IFFALSE 39550
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_VAR 0 9
39462: PUSH
39463: LD_INT 1
39465: ARRAY
39466: PPUSH
39467: LD_VAR 0 9
39471: PUSH
39472: LD_INT 2
39474: ARRAY
39475: PPUSH
39476: CALL_OW 546
39480: ST_TO_ADDR
// if hex [ 1 ] then
39481: LD_VAR 0 4
39485: PUSH
39486: LD_INT 1
39488: ARRAY
39489: IFFALSE 39493
// continue ;
39491: GO 39381
// h := hex [ 2 ] ;
39493: LD_ADDR_VAR 0 13
39497: PUSH
39498: LD_VAR 0 4
39502: PUSH
39503: LD_INT 2
39505: ARRAY
39506: ST_TO_ADDR
// if h + 7 < height then
39507: LD_VAR 0 13
39511: PUSH
39512: LD_INT 7
39514: PLUS
39515: PUSH
39516: LD_VAR 0 15
39520: LESS
39521: IFFALSE 39550
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39523: LD_ADDR_VAR 0 18
39527: PUSH
39528: LD_INT 7
39530: PUSH
39531: LD_INT 28
39533: PUSH
39534: LD_INT 45
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: PUSH
39542: LD_VAR 0 12
39546: ARRAY
39547: ST_TO_ADDR
// break ;
39548: GO 39552
// end ; end ; end ;
39550: GO 39381
39552: POP
39553: POP
// end ; if not weapon then
39554: LD_VAR 0 18
39558: NOT
39559: IFFALSE 39619
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39561: LD_ADDR_VAR 0 5
39565: PUSH
39566: LD_VAR 0 5
39570: PUSH
39571: LD_INT 11
39573: PUSH
39574: LD_INT 30
39576: PUSH
39577: LD_INT 49
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: DIFF
39585: ST_TO_ADDR
// if not list then
39586: LD_VAR 0 5
39590: NOT
39591: IFFALSE 39595
// exit ;
39593: GO 39737
// weapon := list [ rand ( 1 , list ) ] ;
39595: LD_ADDR_VAR 0 18
39599: PUSH
39600: LD_VAR 0 5
39604: PUSH
39605: LD_INT 1
39607: PPUSH
39608: LD_VAR 0 5
39612: PPUSH
39613: CALL_OW 12
39617: ARRAY
39618: ST_TO_ADDR
// end ; if weapon then
39619: LD_VAR 0 18
39623: IFFALSE 39737
// begin tmp := CostOfWeapon ( weapon ) ;
39625: LD_ADDR_VAR 0 14
39629: PUSH
39630: LD_VAR 0 18
39634: PPUSH
39635: CALL_OW 451
39639: ST_TO_ADDR
// j := GetBase ( tower ) ;
39640: LD_ADDR_VAR 0 9
39644: PUSH
39645: LD_VAR 0 1
39649: PPUSH
39650: CALL_OW 274
39654: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39655: LD_VAR 0 9
39659: PPUSH
39660: LD_INT 1
39662: PPUSH
39663: CALL_OW 275
39667: PUSH
39668: LD_VAR 0 14
39672: PUSH
39673: LD_INT 1
39675: ARRAY
39676: GREATEREQUAL
39677: PUSH
39678: LD_VAR 0 9
39682: PPUSH
39683: LD_INT 2
39685: PPUSH
39686: CALL_OW 275
39690: PUSH
39691: LD_VAR 0 14
39695: PUSH
39696: LD_INT 2
39698: ARRAY
39699: GREATEREQUAL
39700: AND
39701: PUSH
39702: LD_VAR 0 9
39706: PPUSH
39707: LD_INT 3
39709: PPUSH
39710: CALL_OW 275
39714: PUSH
39715: LD_VAR 0 14
39719: PUSH
39720: LD_INT 3
39722: ARRAY
39723: GREATEREQUAL
39724: AND
39725: IFFALSE 39737
// result := weapon ;
39727: LD_ADDR_VAR 0 3
39731: PUSH
39732: LD_VAR 0 18
39736: ST_TO_ADDR
// end ; end ;
39737: LD_VAR 0 3
39741: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39742: LD_INT 0
39744: PPUSH
39745: PPUSH
// result := true ;
39746: LD_ADDR_VAR 0 3
39750: PUSH
39751: LD_INT 1
39753: ST_TO_ADDR
// if array1 = array2 then
39754: LD_VAR 0 1
39758: PUSH
39759: LD_VAR 0 2
39763: EQUAL
39764: IFFALSE 39824
// begin for i = 1 to array1 do
39766: LD_ADDR_VAR 0 4
39770: PUSH
39771: DOUBLE
39772: LD_INT 1
39774: DEC
39775: ST_TO_ADDR
39776: LD_VAR 0 1
39780: PUSH
39781: FOR_TO
39782: IFFALSE 39820
// if array1 [ i ] <> array2 [ i ] then
39784: LD_VAR 0 1
39788: PUSH
39789: LD_VAR 0 4
39793: ARRAY
39794: PUSH
39795: LD_VAR 0 2
39799: PUSH
39800: LD_VAR 0 4
39804: ARRAY
39805: NONEQUAL
39806: IFFALSE 39818
// begin result := false ;
39808: LD_ADDR_VAR 0 3
39812: PUSH
39813: LD_INT 0
39815: ST_TO_ADDR
// break ;
39816: GO 39820
// end ;
39818: GO 39781
39820: POP
39821: POP
// end else
39822: GO 39832
// result := false ;
39824: LD_ADDR_VAR 0 3
39828: PUSH
39829: LD_INT 0
39831: ST_TO_ADDR
// end ;
39832: LD_VAR 0 3
39836: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39837: LD_INT 0
39839: PPUSH
39840: PPUSH
39841: PPUSH
// pom := GetBase ( fac ) ;
39842: LD_ADDR_VAR 0 5
39846: PUSH
39847: LD_VAR 0 1
39851: PPUSH
39852: CALL_OW 274
39856: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39857: LD_ADDR_VAR 0 4
39861: PUSH
39862: LD_VAR 0 2
39866: PUSH
39867: LD_INT 1
39869: ARRAY
39870: PPUSH
39871: LD_VAR 0 2
39875: PUSH
39876: LD_INT 2
39878: ARRAY
39879: PPUSH
39880: LD_VAR 0 2
39884: PUSH
39885: LD_INT 3
39887: ARRAY
39888: PPUSH
39889: LD_VAR 0 2
39893: PUSH
39894: LD_INT 4
39896: ARRAY
39897: PPUSH
39898: CALL_OW 449
39902: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39903: LD_ADDR_VAR 0 3
39907: PUSH
39908: LD_VAR 0 5
39912: PPUSH
39913: LD_INT 1
39915: PPUSH
39916: CALL_OW 275
39920: PUSH
39921: LD_VAR 0 4
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: GREATEREQUAL
39930: PUSH
39931: LD_VAR 0 5
39935: PPUSH
39936: LD_INT 2
39938: PPUSH
39939: CALL_OW 275
39943: PUSH
39944: LD_VAR 0 4
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: GREATEREQUAL
39953: AND
39954: PUSH
39955: LD_VAR 0 5
39959: PPUSH
39960: LD_INT 3
39962: PPUSH
39963: CALL_OW 275
39967: PUSH
39968: LD_VAR 0 4
39972: PUSH
39973: LD_INT 3
39975: ARRAY
39976: GREATEREQUAL
39977: AND
39978: ST_TO_ADDR
// end ;
39979: LD_VAR 0 3
39983: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39984: LD_INT 0
39986: PPUSH
39987: PPUSH
39988: PPUSH
39989: PPUSH
// pom := GetBase ( building ) ;
39990: LD_ADDR_VAR 0 3
39994: PUSH
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 274
40004: ST_TO_ADDR
// if not pom then
40005: LD_VAR 0 3
40009: NOT
40010: IFFALSE 40014
// exit ;
40012: GO 40184
// btype := GetBType ( building ) ;
40014: LD_ADDR_VAR 0 5
40018: PUSH
40019: LD_VAR 0 1
40023: PPUSH
40024: CALL_OW 266
40028: ST_TO_ADDR
// if btype = b_armoury then
40029: LD_VAR 0 5
40033: PUSH
40034: LD_INT 4
40036: EQUAL
40037: IFFALSE 40047
// btype := b_barracks ;
40039: LD_ADDR_VAR 0 5
40043: PUSH
40044: LD_INT 5
40046: ST_TO_ADDR
// if btype = b_depot then
40047: LD_VAR 0 5
40051: PUSH
40052: LD_INT 0
40054: EQUAL
40055: IFFALSE 40065
// btype := b_warehouse ;
40057: LD_ADDR_VAR 0 5
40061: PUSH
40062: LD_INT 1
40064: ST_TO_ADDR
// if btype = b_workshop then
40065: LD_VAR 0 5
40069: PUSH
40070: LD_INT 2
40072: EQUAL
40073: IFFALSE 40083
// btype := b_factory ;
40075: LD_ADDR_VAR 0 5
40079: PUSH
40080: LD_INT 3
40082: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40083: LD_ADDR_VAR 0 4
40087: PUSH
40088: LD_VAR 0 5
40092: PPUSH
40093: LD_VAR 0 1
40097: PPUSH
40098: CALL_OW 248
40102: PPUSH
40103: CALL_OW 450
40107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40108: LD_ADDR_VAR 0 2
40112: PUSH
40113: LD_VAR 0 3
40117: PPUSH
40118: LD_INT 1
40120: PPUSH
40121: CALL_OW 275
40125: PUSH
40126: LD_VAR 0 4
40130: PUSH
40131: LD_INT 1
40133: ARRAY
40134: GREATEREQUAL
40135: PUSH
40136: LD_VAR 0 3
40140: PPUSH
40141: LD_INT 2
40143: PPUSH
40144: CALL_OW 275
40148: PUSH
40149: LD_VAR 0 4
40153: PUSH
40154: LD_INT 2
40156: ARRAY
40157: GREATEREQUAL
40158: AND
40159: PUSH
40160: LD_VAR 0 3
40164: PPUSH
40165: LD_INT 3
40167: PPUSH
40168: CALL_OW 275
40172: PUSH
40173: LD_VAR 0 4
40177: PUSH
40178: LD_INT 3
40180: ARRAY
40181: GREATEREQUAL
40182: AND
40183: ST_TO_ADDR
// end ;
40184: LD_VAR 0 2
40188: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40189: LD_INT 0
40191: PPUSH
40192: PPUSH
40193: PPUSH
// pom := GetBase ( building ) ;
40194: LD_ADDR_VAR 0 4
40198: PUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 274
40208: ST_TO_ADDR
// if not pom then
40209: LD_VAR 0 4
40213: NOT
40214: IFFALSE 40218
// exit ;
40216: GO 40319
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40218: LD_ADDR_VAR 0 5
40222: PUSH
40223: LD_VAR 0 2
40227: PPUSH
40228: LD_VAR 0 1
40232: PPUSH
40233: CALL_OW 248
40237: PPUSH
40238: CALL_OW 450
40242: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40243: LD_ADDR_VAR 0 3
40247: PUSH
40248: LD_VAR 0 4
40252: PPUSH
40253: LD_INT 1
40255: PPUSH
40256: CALL_OW 275
40260: PUSH
40261: LD_VAR 0 5
40265: PUSH
40266: LD_INT 1
40268: ARRAY
40269: GREATEREQUAL
40270: PUSH
40271: LD_VAR 0 4
40275: PPUSH
40276: LD_INT 2
40278: PPUSH
40279: CALL_OW 275
40283: PUSH
40284: LD_VAR 0 5
40288: PUSH
40289: LD_INT 2
40291: ARRAY
40292: GREATEREQUAL
40293: AND
40294: PUSH
40295: LD_VAR 0 4
40299: PPUSH
40300: LD_INT 3
40302: PPUSH
40303: CALL_OW 275
40307: PUSH
40308: LD_VAR 0 5
40312: PUSH
40313: LD_INT 3
40315: ARRAY
40316: GREATEREQUAL
40317: AND
40318: ST_TO_ADDR
// end ;
40319: LD_VAR 0 3
40323: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
40324: LD_INT 0
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
// result := false ;
40336: LD_ADDR_VAR 0 6
40340: PUSH
40341: LD_INT 0
40343: ST_TO_ADDR
// if not base or not btype or not x or not y then
40344: LD_VAR 0 1
40348: NOT
40349: PUSH
40350: LD_VAR 0 2
40354: NOT
40355: OR
40356: PUSH
40357: LD_VAR 0 3
40361: NOT
40362: OR
40363: PUSH
40364: LD_VAR 0 4
40368: NOT
40369: OR
40370: IFFALSE 40374
// exit ;
40372: GO 40983
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
40374: LD_ADDR_VAR 0 12
40378: PUSH
40379: LD_VAR 0 2
40383: PPUSH
40384: LD_VAR 0 3
40388: PPUSH
40389: LD_VAR 0 4
40393: PPUSH
40394: LD_VAR 0 5
40398: PPUSH
40399: LD_VAR 0 1
40403: PUSH
40404: LD_INT 1
40406: ARRAY
40407: PPUSH
40408: CALL_OW 248
40412: PPUSH
40413: LD_INT 0
40415: PPUSH
40416: CALL 41820 0 6
40420: ST_TO_ADDR
// if not hexes then
40421: LD_VAR 0 12
40425: NOT
40426: IFFALSE 40430
// exit ;
40428: GO 40983
// for i = 1 to hexes do
40430: LD_ADDR_VAR 0 7
40434: PUSH
40435: DOUBLE
40436: LD_INT 1
40438: DEC
40439: ST_TO_ADDR
40440: LD_VAR 0 12
40444: PUSH
40445: FOR_TO
40446: IFFALSE 40981
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40448: LD_ADDR_VAR 0 11
40452: PUSH
40453: LD_VAR 0 12
40457: PUSH
40458: LD_VAR 0 7
40462: ARRAY
40463: PUSH
40464: LD_INT 1
40466: ARRAY
40467: PPUSH
40468: LD_VAR 0 12
40472: PUSH
40473: LD_VAR 0 7
40477: ARRAY
40478: PUSH
40479: LD_INT 2
40481: ARRAY
40482: PPUSH
40483: CALL_OW 428
40487: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40488: LD_VAR 0 12
40492: PUSH
40493: LD_VAR 0 7
40497: ARRAY
40498: PUSH
40499: LD_INT 1
40501: ARRAY
40502: PPUSH
40503: LD_VAR 0 12
40507: PUSH
40508: LD_VAR 0 7
40512: ARRAY
40513: PUSH
40514: LD_INT 2
40516: ARRAY
40517: PPUSH
40518: CALL_OW 351
40522: PUSH
40523: LD_VAR 0 12
40527: PUSH
40528: LD_VAR 0 7
40532: ARRAY
40533: PUSH
40534: LD_INT 1
40536: ARRAY
40537: PPUSH
40538: LD_VAR 0 12
40542: PUSH
40543: LD_VAR 0 7
40547: ARRAY
40548: PUSH
40549: LD_INT 2
40551: ARRAY
40552: PPUSH
40553: CALL_OW 488
40557: NOT
40558: OR
40559: PUSH
40560: LD_VAR 0 11
40564: PPUSH
40565: CALL_OW 247
40569: PUSH
40570: LD_INT 3
40572: EQUAL
40573: OR
40574: IFFALSE 40580
// exit ;
40576: POP
40577: POP
40578: GO 40983
// if not tmp or not tmp in base then
40580: LD_VAR 0 11
40584: NOT
40585: PUSH
40586: LD_VAR 0 11
40590: PUSH
40591: LD_VAR 0 1
40595: IN
40596: NOT
40597: OR
40598: IFFALSE 40602
// continue ;
40600: GO 40445
// result := true ;
40602: LD_ADDR_VAR 0 6
40606: PUSH
40607: LD_INT 1
40609: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40610: LD_ADDR_VAR 0 15
40614: PUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: LD_INT 22
40622: PUSH
40623: LD_VAR 0 11
40627: PPUSH
40628: CALL_OW 255
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 30
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 30
40652: PUSH
40653: LD_INT 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PPUSH
40669: CALL_OW 72
40673: ST_TO_ADDR
// if dep then
40674: LD_VAR 0 15
40678: IFFALSE 40814
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40680: LD_ADDR_VAR 0 14
40684: PUSH
40685: LD_VAR 0 15
40689: PUSH
40690: LD_INT 1
40692: ARRAY
40693: PPUSH
40694: CALL_OW 250
40698: PPUSH
40699: LD_VAR 0 15
40703: PUSH
40704: LD_INT 1
40706: ARRAY
40707: PPUSH
40708: CALL_OW 254
40712: PPUSH
40713: LD_INT 5
40715: PPUSH
40716: CALL_OW 272
40720: PUSH
40721: LD_VAR 0 15
40725: PUSH
40726: LD_INT 1
40728: ARRAY
40729: PPUSH
40730: CALL_OW 251
40734: PPUSH
40735: LD_VAR 0 15
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PPUSH
40744: CALL_OW 254
40748: PPUSH
40749: LD_INT 5
40751: PPUSH
40752: CALL_OW 273
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40761: LD_VAR 0 14
40765: PUSH
40766: LD_INT 1
40768: ARRAY
40769: PPUSH
40770: LD_VAR 0 14
40774: PUSH
40775: LD_INT 2
40777: ARRAY
40778: PPUSH
40779: CALL_OW 488
40783: IFFALSE 40814
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40785: LD_VAR 0 11
40789: PPUSH
40790: LD_VAR 0 14
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PPUSH
40799: LD_VAR 0 14
40803: PUSH
40804: LD_INT 2
40806: ARRAY
40807: PPUSH
40808: CALL_OW 111
// continue ;
40812: GO 40445
// end ; end ; r := GetDir ( tmp ) ;
40814: LD_ADDR_VAR 0 13
40818: PUSH
40819: LD_VAR 0 11
40823: PPUSH
40824: CALL_OW 254
40828: ST_TO_ADDR
// if r = 5 then
40829: LD_VAR 0 13
40833: PUSH
40834: LD_INT 5
40836: EQUAL
40837: IFFALSE 40847
// r := 0 ;
40839: LD_ADDR_VAR 0 13
40843: PUSH
40844: LD_INT 0
40846: ST_TO_ADDR
// for j = r to 5 do
40847: LD_ADDR_VAR 0 8
40851: PUSH
40852: DOUBLE
40853: LD_VAR 0 13
40857: DEC
40858: ST_TO_ADDR
40859: LD_INT 5
40861: PUSH
40862: FOR_TO
40863: IFFALSE 40977
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40865: LD_ADDR_VAR 0 9
40869: PUSH
40870: LD_VAR 0 11
40874: PPUSH
40875: CALL_OW 250
40879: PPUSH
40880: LD_VAR 0 8
40884: PPUSH
40885: LD_INT 2
40887: PPUSH
40888: CALL_OW 272
40892: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40893: LD_ADDR_VAR 0 10
40897: PUSH
40898: LD_VAR 0 11
40902: PPUSH
40903: CALL_OW 251
40907: PPUSH
40908: LD_VAR 0 8
40912: PPUSH
40913: LD_INT 2
40915: PPUSH
40916: CALL_OW 273
40920: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40921: LD_VAR 0 9
40925: PPUSH
40926: LD_VAR 0 10
40930: PPUSH
40931: CALL_OW 488
40935: PUSH
40936: LD_VAR 0 9
40940: PPUSH
40941: LD_VAR 0 10
40945: PPUSH
40946: CALL_OW 428
40950: NOT
40951: AND
40952: IFFALSE 40975
// begin ComMoveXY ( tmp , _x , _y ) ;
40954: LD_VAR 0 11
40958: PPUSH
40959: LD_VAR 0 9
40963: PPUSH
40964: LD_VAR 0 10
40968: PPUSH
40969: CALL_OW 111
// break ;
40973: GO 40977
// end ; end ;
40975: GO 40862
40977: POP
40978: POP
// end ;
40979: GO 40445
40981: POP
40982: POP
// end ;
40983: LD_VAR 0 6
40987: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
40988: LD_INT 0
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
// result := false ;
41000: LD_ADDR_VAR 0 6
41004: PUSH
41005: LD_INT 0
41007: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41008: LD_VAR 0 1
41012: NOT
41013: PUSH
41014: LD_VAR 0 1
41018: PPUSH
41019: CALL_OW 266
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: IN
41034: NOT
41035: OR
41036: PUSH
41037: LD_VAR 0 2
41041: NOT
41042: OR
41043: PUSH
41044: LD_VAR 0 5
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: LD_INT 2
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 4
41063: PUSH
41064: LD_INT 5
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: IN
41075: NOT
41076: OR
41077: PUSH
41078: LD_VAR 0 3
41082: PPUSH
41083: LD_VAR 0 4
41087: PPUSH
41088: CALL_OW 488
41092: NOT
41093: OR
41094: IFFALSE 41098
// exit ;
41096: GO 41815
// pom := GetBase ( depot ) ;
41098: LD_ADDR_VAR 0 10
41102: PUSH
41103: LD_VAR 0 1
41107: PPUSH
41108: CALL_OW 274
41112: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41113: LD_ADDR_VAR 0 11
41117: PUSH
41118: LD_VAR 0 2
41122: PPUSH
41123: LD_VAR 0 1
41127: PPUSH
41128: CALL_OW 248
41132: PPUSH
41133: CALL_OW 450
41137: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41138: LD_VAR 0 10
41142: PPUSH
41143: LD_INT 1
41145: PPUSH
41146: CALL_OW 275
41150: PUSH
41151: LD_VAR 0 11
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: GREATEREQUAL
41160: PUSH
41161: LD_VAR 0 10
41165: PPUSH
41166: LD_INT 2
41168: PPUSH
41169: CALL_OW 275
41173: PUSH
41174: LD_VAR 0 11
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: GREATEREQUAL
41183: AND
41184: PUSH
41185: LD_VAR 0 10
41189: PPUSH
41190: LD_INT 3
41192: PPUSH
41193: CALL_OW 275
41197: PUSH
41198: LD_VAR 0 11
41202: PUSH
41203: LD_INT 3
41205: ARRAY
41206: GREATEREQUAL
41207: AND
41208: NOT
41209: IFFALSE 41213
// exit ;
41211: GO 41815
// if GetBType ( depot ) = b_depot then
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 266
41222: PUSH
41223: LD_INT 0
41225: EQUAL
41226: IFFALSE 41238
// dist := 28 else
41228: LD_ADDR_VAR 0 14
41232: PUSH
41233: LD_INT 28
41235: ST_TO_ADDR
41236: GO 41246
// dist := 36 ;
41238: LD_ADDR_VAR 0 14
41242: PUSH
41243: LD_INT 36
41245: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41246: LD_VAR 0 1
41250: PPUSH
41251: LD_VAR 0 3
41255: PPUSH
41256: LD_VAR 0 4
41260: PPUSH
41261: CALL_OW 297
41265: PUSH
41266: LD_VAR 0 14
41270: GREATER
41271: IFFALSE 41275
// exit ;
41273: GO 41815
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41275: LD_ADDR_VAR 0 12
41279: PUSH
41280: LD_VAR 0 2
41284: PPUSH
41285: LD_VAR 0 3
41289: PPUSH
41290: LD_VAR 0 4
41294: PPUSH
41295: LD_VAR 0 5
41299: PPUSH
41300: LD_VAR 0 1
41304: PPUSH
41305: CALL_OW 248
41309: PPUSH
41310: LD_INT 0
41312: PPUSH
41313: CALL 41820 0 6
41317: ST_TO_ADDR
// if not hexes then
41318: LD_VAR 0 12
41322: NOT
41323: IFFALSE 41327
// exit ;
41325: GO 41815
// hex := GetHexInfo ( x , y ) ;
41327: LD_ADDR_VAR 0 15
41331: PUSH
41332: LD_VAR 0 3
41336: PPUSH
41337: LD_VAR 0 4
41341: PPUSH
41342: CALL_OW 546
41346: ST_TO_ADDR
// if hex [ 1 ] then
41347: LD_VAR 0 15
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: IFFALSE 41359
// exit ;
41357: GO 41815
// height := hex [ 2 ] ;
41359: LD_ADDR_VAR 0 13
41363: PUSH
41364: LD_VAR 0 15
41368: PUSH
41369: LD_INT 2
41371: ARRAY
41372: ST_TO_ADDR
// for i = 1 to hexes do
41373: LD_ADDR_VAR 0 7
41377: PUSH
41378: DOUBLE
41379: LD_INT 1
41381: DEC
41382: ST_TO_ADDR
41383: LD_VAR 0 12
41387: PUSH
41388: FOR_TO
41389: IFFALSE 41719
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41391: LD_VAR 0 12
41395: PUSH
41396: LD_VAR 0 7
41400: ARRAY
41401: PUSH
41402: LD_INT 1
41404: ARRAY
41405: PPUSH
41406: LD_VAR 0 12
41410: PUSH
41411: LD_VAR 0 7
41415: ARRAY
41416: PUSH
41417: LD_INT 2
41419: ARRAY
41420: PPUSH
41421: CALL_OW 488
41425: NOT
41426: PUSH
41427: LD_VAR 0 12
41431: PUSH
41432: LD_VAR 0 7
41436: ARRAY
41437: PUSH
41438: LD_INT 1
41440: ARRAY
41441: PPUSH
41442: LD_VAR 0 12
41446: PUSH
41447: LD_VAR 0 7
41451: ARRAY
41452: PUSH
41453: LD_INT 2
41455: ARRAY
41456: PPUSH
41457: CALL_OW 428
41461: PUSH
41462: LD_INT 0
41464: GREATER
41465: OR
41466: PUSH
41467: LD_VAR 0 12
41471: PUSH
41472: LD_VAR 0 7
41476: ARRAY
41477: PUSH
41478: LD_INT 1
41480: ARRAY
41481: PPUSH
41482: LD_VAR 0 12
41486: PUSH
41487: LD_VAR 0 7
41491: ARRAY
41492: PUSH
41493: LD_INT 2
41495: ARRAY
41496: PPUSH
41497: CALL_OW 351
41501: OR
41502: IFFALSE 41508
// exit ;
41504: POP
41505: POP
41506: GO 41815
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41508: LD_ADDR_VAR 0 8
41512: PUSH
41513: LD_VAR 0 12
41517: PUSH
41518: LD_VAR 0 7
41522: ARRAY
41523: PUSH
41524: LD_INT 1
41526: ARRAY
41527: PPUSH
41528: LD_VAR 0 12
41532: PUSH
41533: LD_VAR 0 7
41537: ARRAY
41538: PUSH
41539: LD_INT 2
41541: ARRAY
41542: PPUSH
41543: CALL_OW 546
41547: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41548: LD_VAR 0 8
41552: PUSH
41553: LD_INT 1
41555: ARRAY
41556: PUSH
41557: LD_VAR 0 8
41561: PUSH
41562: LD_INT 2
41564: ARRAY
41565: PUSH
41566: LD_VAR 0 13
41570: PUSH
41571: LD_INT 2
41573: PLUS
41574: GREATER
41575: OR
41576: PUSH
41577: LD_VAR 0 8
41581: PUSH
41582: LD_INT 2
41584: ARRAY
41585: PUSH
41586: LD_VAR 0 13
41590: PUSH
41591: LD_INT 2
41593: MINUS
41594: LESS
41595: OR
41596: PUSH
41597: LD_VAR 0 8
41601: PUSH
41602: LD_INT 3
41604: ARRAY
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 8
41611: PUSH
41612: LD_INT 9
41614: PUSH
41615: LD_INT 10
41617: PUSH
41618: LD_INT 11
41620: PUSH
41621: LD_INT 12
41623: PUSH
41624: LD_INT 13
41626: PUSH
41627: LD_INT 16
41629: PUSH
41630: LD_INT 17
41632: PUSH
41633: LD_INT 18
41635: PUSH
41636: LD_INT 19
41638: PUSH
41639: LD_INT 20
41641: PUSH
41642: LD_INT 21
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: IN
41660: NOT
41661: OR
41662: PUSH
41663: LD_VAR 0 8
41667: PUSH
41668: LD_INT 5
41670: ARRAY
41671: NOT
41672: OR
41673: PUSH
41674: LD_VAR 0 8
41678: PUSH
41679: LD_INT 6
41681: ARRAY
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: LD_INT 7
41691: PUSH
41692: LD_INT 9
41694: PUSH
41695: LD_INT 10
41697: PUSH
41698: LD_INT 11
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: IN
41709: NOT
41710: OR
41711: IFFALSE 41717
// exit ;
41713: POP
41714: POP
41715: GO 41815
// end ;
41717: GO 41388
41719: POP
41720: POP
// side := GetSide ( depot ) ;
41721: LD_ADDR_VAR 0 9
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 255
41735: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41736: LD_VAR 0 9
41740: PPUSH
41741: LD_VAR 0 3
41745: PPUSH
41746: LD_VAR 0 4
41750: PPUSH
41751: LD_INT 20
41753: PPUSH
41754: CALL 34469 0 4
41758: PUSH
41759: LD_INT 4
41761: ARRAY
41762: IFFALSE 41766
// exit ;
41764: GO 41815
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41766: LD_VAR 0 2
41770: PUSH
41771: LD_INT 29
41773: PUSH
41774: LD_INT 30
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: IN
41781: PUSH
41782: LD_VAR 0 3
41786: PPUSH
41787: LD_VAR 0 4
41791: PPUSH
41792: LD_VAR 0 9
41796: PPUSH
41797: CALL_OW 440
41801: NOT
41802: AND
41803: IFFALSE 41807
// exit ;
41805: GO 41815
// result := true ;
41807: LD_ADDR_VAR 0 6
41811: PUSH
41812: LD_INT 1
41814: ST_TO_ADDR
// end ;
41815: LD_VAR 0 6
41819: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
41820: LD_INT 0
41822: PPUSH
41823: PPUSH
41824: PPUSH
41825: PPUSH
41826: PPUSH
41827: PPUSH
41828: PPUSH
41829: PPUSH
41830: PPUSH
41831: PPUSH
41832: PPUSH
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
41839: PPUSH
41840: PPUSH
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
41852: PPUSH
41853: PPUSH
41854: PPUSH
41855: PPUSH
41856: PPUSH
41857: PPUSH
41858: PPUSH
41859: PPUSH
41860: PPUSH
41861: PPUSH
41862: PPUSH
41863: PPUSH
41864: PPUSH
41865: PPUSH
41866: PPUSH
41867: PPUSH
41868: PPUSH
41869: PPUSH
41870: PPUSH
41871: PPUSH
41872: PPUSH
41873: PPUSH
41874: PPUSH
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
// result = [ ] ;
41880: LD_ADDR_VAR 0 7
41884: PUSH
41885: EMPTY
41886: ST_TO_ADDR
// temp_list = [ ] ;
41887: LD_ADDR_VAR 0 9
41891: PUSH
41892: EMPTY
41893: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41894: LD_VAR 0 4
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 3
41910: PUSH
41911: LD_INT 4
41913: PUSH
41914: LD_INT 5
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: IN
41925: NOT
41926: PUSH
41927: LD_VAR 0 1
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: IN
41942: PUSH
41943: LD_VAR 0 5
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 3
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: LIST
41961: IN
41962: NOT
41963: AND
41964: OR
41965: IFFALSE 41969
// exit ;
41967: GO 60360
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41969: LD_VAR 0 1
41973: PUSH
41974: LD_INT 6
41976: PUSH
41977: LD_INT 7
41979: PUSH
41980: LD_INT 8
41982: PUSH
41983: LD_INT 13
41985: PUSH
41986: LD_INT 12
41988: PUSH
41989: LD_INT 15
41991: PUSH
41992: LD_INT 11
41994: PUSH
41995: LD_INT 14
41997: PUSH
41998: LD_INT 10
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: IN
42012: IFFALSE 42022
// btype = b_lab ;
42014: LD_ADDR_VAR 0 1
42018: PUSH
42019: LD_INT 6
42021: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42022: LD_VAR 0 6
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: IN
42041: NOT
42042: PUSH
42043: LD_VAR 0 1
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 6
42062: PUSH
42063: LD_INT 36
42065: PUSH
42066: LD_INT 4
42068: PUSH
42069: LD_INT 5
42071: PUSH
42072: LD_INT 31
42074: PUSH
42075: LD_INT 32
42077: PUSH
42078: LD_INT 33
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: IN
42094: NOT
42095: PUSH
42096: LD_VAR 0 6
42100: PUSH
42101: LD_INT 1
42103: EQUAL
42104: AND
42105: OR
42106: PUSH
42107: LD_VAR 0 1
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: IN
42122: NOT
42123: PUSH
42124: LD_VAR 0 6
42128: PUSH
42129: LD_INT 2
42131: EQUAL
42132: AND
42133: OR
42134: IFFALSE 42144
// mode = 0 ;
42136: LD_ADDR_VAR 0 6
42140: PUSH
42141: LD_INT 0
42143: ST_TO_ADDR
// case mode of 0 :
42144: LD_VAR 0 6
42148: PUSH
42149: LD_INT 0
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 53610
42157: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42158: LD_ADDR_VAR 0 11
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 0
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 0
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42351: LD_ADDR_VAR 0 12
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42547: LD_ADDR_VAR 0 13
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 2
42682: NEG
42683: PUSH
42684: LD_INT 2
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: LD_INT 3
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 3
42706: NEG
42707: PUSH
42708: LD_INT 2
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: LD_INT 3
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42746: LD_ADDR_VAR 0 14
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: LD_INT 2
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 3
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42942: LD_ADDR_VAR 0 15
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: NEG
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 2
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 3
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43135: LD_ADDR_VAR 0 16
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: LD_INT 2
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 2
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 2
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 2
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 2
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 3
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: LD_INT 3
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43328: LD_ADDR_VAR 0 17
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 0
43345: PUSH
43346: LD_INT 1
43348: NEG
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 1
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: NEG
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: NEG
43528: PUSH
43529: LD_INT 2
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43558: LD_ADDR_VAR 0 18
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 2
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: NEG
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43788: LD_ADDR_VAR 0 19
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 0
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44018: LD_ADDR_VAR 0 20
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 2
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44248: LD_ADDR_VAR 0 21
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 2
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 2
44424: NEG
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: NEG
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 2
44447: NEG
44448: PUSH
44449: LD_INT 2
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44478: LD_ADDR_VAR 0 22
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: LD_INT 2
44574: NEG
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 2
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: NEG
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 2
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44708: LD_ADDR_VAR 0 23
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 2
44907: NEG
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: LD_INT 3
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44988: LD_ADDR_VAR 0 24
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: LD_INT 2
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 3
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: LD_INT 2
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45264: LD_ADDR_VAR 0 25
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 3
45485: PUSH
45486: LD_INT 2
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: LD_INT 3
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45538: LD_ADDR_VAR 0 26
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 2
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: NEG
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45814: LD_ADDR_VAR 0 27
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 3
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 3
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46094: LD_ADDR_VAR 0 28
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: NEG
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: LD_INT 2
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: LD_INT 2
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 3
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 3
46329: NEG
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46376: LD_ADDR_VAR 0 29
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 1
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: LD_INT 1
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 3
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 3
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46655: LD_ADDR_VAR 0 30
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 2
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 2
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 3
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46933: LD_ADDR_VAR 0 31
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 2
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 3
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 3
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47211: LD_ADDR_VAR 0 32
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 2
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: NEG
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47489: LD_ADDR_VAR 0 33
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47768: LD_ADDR_VAR 0 34
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: NEG
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 2
47935: NEG
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 3
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 2
48002: NEG
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 3
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48048: LD_ADDR_VAR 0 35
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48160: LD_ADDR_VAR 0 36
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48272: LD_ADDR_VAR 0 37
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48384: LD_ADDR_VAR 0 38
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: LD_INT 1
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48496: LD_ADDR_VAR 0 39
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 0
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48608: LD_ADDR_VAR 0 40
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 0
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48720: LD_ADDR_VAR 0 41
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: LD_INT 0
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 2
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 3
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 0
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: LD_INT 2
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49070: LD_ADDR_VAR 0 42
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 3
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 3
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 3
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 2
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 3
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 3
49379: NEG
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49420: LD_ADDR_VAR 0 43
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 3
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 3
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: NEG
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49768: LD_ADDR_VAR 0 44
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 1
49826: NEG
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 2
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: LD_INT 3
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 3
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: PUSH
50022: LD_INT 3
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 3
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50118: LD_ADDR_VAR 0 45
50122: PUSH
50123: LD_INT 0
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 2
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 3
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 3
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 2
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: LD_INT 3
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50468: LD_ADDR_VAR 0 46
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 0
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 3
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50816: LD_ADDR_VAR 0 47
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 1
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: NEG
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50967: LD_ADDR_VAR 0 48
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 1
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 2
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51114: LD_ADDR_VAR 0 49
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 1
51183: NEG
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51258: LD_ADDR_VAR 0 50
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51402: LD_ADDR_VAR 0 51
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 2
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 2
51514: NEG
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: NEG
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51549: LD_ADDR_VAR 0 52
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 0
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51700: LD_ADDR_VAR 0 53
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: NEG
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51930: LD_ADDR_VAR 0 54
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: LD_INT 2
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52160: LD_ADDR_VAR 0 55
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 1
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 2
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52390: LD_ADDR_VAR 0 56
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: LD_INT 1
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: LD_INT 1
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 2
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52620: LD_ADDR_VAR 0 57
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 1
52689: NEG
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 2
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52850: LD_ADDR_VAR 0 58
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53080: LD_ADDR_VAR 0 59
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53168: LD_ADDR_VAR 0 60
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53256: LD_ADDR_VAR 0 61
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53344: LD_ADDR_VAR 0 62
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 0
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 1
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 0
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53432: LD_ADDR_VAR 0 63
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53520: LD_ADDR_VAR 0 64
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// end ; 1 :
53608: GO 59505
53610: LD_INT 1
53612: DOUBLE
53613: EQUAL
53614: IFTRUE 53618
53616: GO 56241
53618: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53619: LD_ADDR_VAR 0 11
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53663: LD_ADDR_VAR 0 12
53667: PUSH
53668: LD_INT 2
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 3
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53704: LD_ADDR_VAR 0 13
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 2
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53744: LD_ADDR_VAR 0 14
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: LIST
53784: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53785: LD_ADDR_VAR 0 15
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 3
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53829: LD_ADDR_VAR 0 16
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: LD_INT 3
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53875: LD_ADDR_VAR 0 17
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 3
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53919: LD_ADDR_VAR 0 18
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53960: LD_ADDR_VAR 0 19
53964: PUSH
53965: LD_INT 3
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54000: LD_ADDR_VAR 0 20
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54041: LD_ADDR_VAR 0 21
54045: PUSH
54046: LD_INT 2
54048: NEG
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: NEG
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54085: LD_ADDR_VAR 0 22
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54131: LD_ADDR_VAR 0 23
54135: PUSH
54136: LD_INT 0
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 4
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: LIST
54174: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54175: LD_ADDR_VAR 0 24
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 4
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54216: LD_ADDR_VAR 0 25
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 3
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 4
54233: PUSH
54234: LD_INT 3
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54256: LD_ADDR_VAR 0 26
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: LD_INT 4
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: LIST
54296: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54297: LD_ADDR_VAR 0 27
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 3
54315: NEG
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54341: LD_ADDR_VAR 0 28
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: LD_INT 3
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: LD_INT 4
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 4
54372: NEG
54373: PUSH
54374: LD_INT 3
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54387: LD_ADDR_VAR 0 29
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: LD_INT 4
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 4
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 5
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: LD_INT 5
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 4
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 6
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 6
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 5
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54542: LD_ADDR_VAR 0 30
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 3
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 4
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 4
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 4
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 5
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 5
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 5
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 6
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 6
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54685: LD_ADDR_VAR 0 31
54689: PUSH
54690: LD_INT 3
54692: PUSH
54693: LD_INT 2
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 3
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 4
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 4
54732: PUSH
54733: LD_INT 4
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: LD_INT 4
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 5
54752: PUSH
54753: LD_INT 4
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 5
54762: PUSH
54763: LD_INT 5
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 4
54772: PUSH
54773: LD_INT 5
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 6
54782: PUSH
54783: LD_INT 5
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 6
54792: PUSH
54793: LD_INT 6
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 5
54802: PUSH
54803: LD_INT 6
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54824: LD_ADDR_VAR 0 32
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 3
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 4
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 4
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 5
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 5
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 4
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 6
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 6
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: LD_INT 5
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54967: LD_ADDR_VAR 0 33
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 4
55019: NEG
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 4
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 4
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 5
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 5
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 5
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 6
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 6
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55122: LD_ADDR_VAR 0 34
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: LD_INT 3
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 3
55141: NEG
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: LD_INT 3
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 4
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 4
55189: NEG
55190: PUSH
55191: LD_INT 4
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 4
55201: NEG
55202: PUSH
55203: LD_INT 5
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 5
55213: NEG
55214: PUSH
55215: LD_INT 4
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 5
55225: NEG
55226: PUSH
55227: LD_INT 5
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 5
55237: NEG
55238: PUSH
55239: LD_INT 6
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 6
55249: NEG
55250: PUSH
55251: LD_INT 5
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 6
55261: NEG
55262: PUSH
55263: LD_INT 6
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55285: LD_ADDR_VAR 0 41
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 2
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: NEG
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 2
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: LIST
55328: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55329: LD_ADDR_VAR 0 42
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55370: LD_ADDR_VAR 0 43
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 3
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 3
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: LIST
55409: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55410: LD_ADDR_VAR 0 44
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 2
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: LIST
55450: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55451: LD_ADDR_VAR 0 45
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: NEG
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: LIST
55494: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55495: LD_ADDR_VAR 0 46
55499: PUSH
55500: LD_INT 2
55502: NEG
55503: PUSH
55504: LD_INT 2
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 3
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: LIST
55540: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55541: LD_ADDR_VAR 0 47
55545: PUSH
55546: LD_INT 2
55548: NEG
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55574: LD_ADDR_VAR 0 48
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55605: LD_ADDR_VAR 0 49
55609: PUSH
55610: LD_INT 3
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 2
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55634: LD_ADDR_VAR 0 50
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55663: LD_ADDR_VAR 0 51
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55694: LD_ADDR_VAR 0 52
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: NEG
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55727: LD_ADDR_VAR 0 53
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: LD_INT 3
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 3
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: LIST
55770: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55771: LD_ADDR_VAR 0 54
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 3
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55812: LD_ADDR_VAR 0 55
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55852: LD_ADDR_VAR 0 56
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55893: LD_ADDR_VAR 0 57
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55937: LD_ADDR_VAR 0 58
55941: PUSH
55942: LD_INT 2
55944: NEG
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 3
55956: NEG
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 3
55968: NEG
55969: PUSH
55970: LD_INT 3
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55983: LD_ADDR_VAR 0 59
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 2
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56027: LD_ADDR_VAR 0 60
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56068: LD_ADDR_VAR 0 61
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 2
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: LD_INT 2
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56108: LD_ADDR_VAR 0 62
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56149: LD_ADDR_VAR 0 63
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: LD_INT 1
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56193: LD_ADDR_VAR 0 64
56197: PUSH
56198: LD_INT 1
56200: NEG
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: NEG
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// end ; 2 :
56239: GO 59505
56241: LD_INT 2
56243: DOUBLE
56244: EQUAL
56245: IFTRUE 56249
56247: GO 59504
56249: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56250: LD_ADDR_VAR 0 29
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 5
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 5
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 5
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 3
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 3
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 4
56380: PUSH
56381: LD_INT 4
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: PUSH
56391: LD_INT 4
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 4
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 2
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: LD_INT 4
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: LD_INT 5
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 5
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 3
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 5
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 3
56533: NEG
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 3
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 4
56589: NEG
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 4
56600: NEG
56601: PUSH
56602: LD_INT 1
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 4
56612: NEG
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 2
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: NEG
56636: PUSH
56637: LD_INT 4
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: NEG
56648: PUSH
56649: LD_INT 5
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 3
56659: NEG
56660: PUSH
56661: LD_INT 4
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 3
56671: NEG
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 4
56683: NEG
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 5
56695: NEG
56696: PUSH
56697: LD_INT 4
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 5
56707: NEG
56708: PUSH
56709: LD_INT 5
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: LD_INT 5
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 5
56731: NEG
56732: PUSH
56733: LD_INT 3
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56788: LD_ADDR_VAR 0 30
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: LD_INT 4
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: LD_INT 4
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 5
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 4
56835: PUSH
56836: LD_INT 5
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: LD_INT 4
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 5
56865: PUSH
56866: LD_INT 3
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: LD_INT 5
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 3
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 3
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: LD_INT 4
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 4
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 4
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 4
56978: NEG
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: NEG
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: NEG
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 5
57034: NEG
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 5
57045: NEG
57046: PUSH
57047: LD_INT 1
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 5
57057: NEG
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 3
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 3
57128: NEG
57129: PUSH
57130: LD_INT 2
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: NEG
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 4
57152: NEG
57153: PUSH
57154: LD_INT 4
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: LD_INT 4
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 5
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 0
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 5
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 2
57278: NEG
57279: PUSH
57280: LD_INT 5
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57335: LD_ADDR_VAR 0 31
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 4
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: LD_INT 5
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 4
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 2
57414: PUSH
57415: LD_INT 5
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 3
57435: NEG
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 3
57480: NEG
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 4
57491: NEG
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 4
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: LD_INT 4
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 4
57549: NEG
57550: PUSH
57551: LD_INT 5
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 3
57561: NEG
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 4
57585: NEG
57586: PUSH
57587: LD_INT 3
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 5
57597: NEG
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 5
57609: NEG
57610: PUSH
57611: LD_INT 5
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 5
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: NEG
57634: PUSH
57635: LD_INT 3
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: LD_INT 3
57648: NEG
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 4
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 4
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: NEG
57736: PUSH
57737: LD_INT 4
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 4
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 5
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 5
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: LD_INT 0
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: LD_INT 1
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 3
57819: PUSH
57820: LD_INT 2
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 5
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57885: LD_ADDR_VAR 0 32
57889: PUSH
57890: LD_INT 4
57892: NEG
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 4
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: NEG
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 3
57926: NEG
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 4
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 5
57948: NEG
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 5
57959: NEG
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 5
57971: NEG
57972: PUSH
57973: LD_INT 2
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: LD_INT 3
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: LD_INT 4
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 4
58066: NEG
58067: PUSH
58068: LD_INT 4
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 4
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 4
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 0
58113: PUSH
58114: LD_INT 5
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 4
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 3
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: LD_INT 3
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 1
58157: NEG
58158: PUSH
58159: LD_INT 4
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 5
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: NEG
58193: PUSH
58194: LD_INT 5
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 4
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 4
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 3
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 4
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 4
58297: PUSH
58298: LD_INT 4
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 4
58307: PUSH
58308: LD_INT 3
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 5
58317: PUSH
58318: LD_INT 4
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 5
58327: PUSH
58328: LD_INT 5
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 4
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: LD_INT 4
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 5
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 5
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58432: LD_ADDR_VAR 0 33
58436: PUSH
58437: LD_INT 4
58439: NEG
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: NEG
58452: PUSH
58453: LD_INT 5
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: LD_INT 4
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 4
58487: NEG
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 5
58499: NEG
58500: PUSH
58501: LD_INT 4
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 5
58511: NEG
58512: PUSH
58513: LD_INT 5
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: LD_INT 5
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 5
58535: NEG
58536: PUSH
58537: LD_INT 3
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 0
58547: PUSH
58548: LD_INT 3
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 4
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 3
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: LD_INT 2
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 2
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: LD_INT 4
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 4
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 4
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 5
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 5
58680: PUSH
58681: LD_INT 1
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 4
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 3
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: PUSH
58722: LD_INT 2
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 5
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 3
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: LD_INT 2
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 3
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 4
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 2
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 4
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 2
58822: PUSH
58823: LD_INT 4
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 3
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: LD_INT 4
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 5
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 5
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: LD_INT 5
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 2
58914: NEG
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58970: LD_ADDR_VAR 0 34
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 4
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 5
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 1
58999: PUSH
59000: LD_INT 4
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: LD_INT 4
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 1
59044: NEG
59045: PUSH
59046: LD_INT 5
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 3
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 5
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: LD_INT 0
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 3
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 4
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: PUSH
59111: LD_INT 1
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 4
59172: PUSH
59173: LD_INT 4
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: LD_INT 3
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 5
59192: PUSH
59193: LD_INT 4
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 5
59202: PUSH
59203: LD_INT 5
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 4
59212: PUSH
59213: LD_INT 5
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 3
59222: PUSH
59223: LD_INT 4
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: PUSH
59233: LD_INT 3
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 5
59242: PUSH
59243: LD_INT 3
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 4
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: LD_INT 4
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 4
59355: NEG
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 4
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: NEG
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 5
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 5
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 5
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: NEG
59447: PUSH
59448: LD_INT 2
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// end ; end ;
59502: GO 59505
59504: POP
// case btype of b_depot , b_warehouse :
59505: LD_VAR 0 1
59509: PUSH
59510: LD_INT 0
59512: DOUBLE
59513: EQUAL
59514: IFTRUE 59524
59516: LD_INT 1
59518: DOUBLE
59519: EQUAL
59520: IFTRUE 59524
59522: GO 59725
59524: POP
// case nation of nation_american :
59525: LD_VAR 0 5
59529: PUSH
59530: LD_INT 1
59532: DOUBLE
59533: EQUAL
59534: IFTRUE 59538
59536: GO 59594
59538: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
59539: LD_ADDR_VAR 0 9
59543: PUSH
59544: LD_VAR 0 11
59548: PUSH
59549: LD_VAR 0 12
59553: PUSH
59554: LD_VAR 0 13
59558: PUSH
59559: LD_VAR 0 14
59563: PUSH
59564: LD_VAR 0 15
59568: PUSH
59569: LD_VAR 0 16
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: PUSH
59582: LD_VAR 0 4
59586: PUSH
59587: LD_INT 1
59589: PLUS
59590: ARRAY
59591: ST_TO_ADDR
59592: GO 59723
59594: LD_INT 2
59596: DOUBLE
59597: EQUAL
59598: IFTRUE 59602
59600: GO 59658
59602: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
59603: LD_ADDR_VAR 0 9
59607: PUSH
59608: LD_VAR 0 17
59612: PUSH
59613: LD_VAR 0 18
59617: PUSH
59618: LD_VAR 0 19
59622: PUSH
59623: LD_VAR 0 20
59627: PUSH
59628: LD_VAR 0 21
59632: PUSH
59633: LD_VAR 0 22
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_VAR 0 4
59650: PUSH
59651: LD_INT 1
59653: PLUS
59654: ARRAY
59655: ST_TO_ADDR
59656: GO 59723
59658: LD_INT 3
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59666
59664: GO 59722
59666: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59667: LD_ADDR_VAR 0 9
59671: PUSH
59672: LD_VAR 0 23
59676: PUSH
59677: LD_VAR 0 24
59681: PUSH
59682: LD_VAR 0 25
59686: PUSH
59687: LD_VAR 0 26
59691: PUSH
59692: LD_VAR 0 27
59696: PUSH
59697: LD_VAR 0 28
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: PUSH
59710: LD_VAR 0 4
59714: PUSH
59715: LD_INT 1
59717: PLUS
59718: ARRAY
59719: ST_TO_ADDR
59720: GO 59723
59722: POP
59723: GO 60278
59725: LD_INT 2
59727: DOUBLE
59728: EQUAL
59729: IFTRUE 59739
59731: LD_INT 3
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59739
59737: GO 59795
59739: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59740: LD_ADDR_VAR 0 9
59744: PUSH
59745: LD_VAR 0 29
59749: PUSH
59750: LD_VAR 0 30
59754: PUSH
59755: LD_VAR 0 31
59759: PUSH
59760: LD_VAR 0 32
59764: PUSH
59765: LD_VAR 0 33
59769: PUSH
59770: LD_VAR 0 34
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: PUSH
59783: LD_VAR 0 4
59787: PUSH
59788: LD_INT 1
59790: PLUS
59791: ARRAY
59792: ST_TO_ADDR
59793: GO 60278
59795: LD_INT 16
59797: DOUBLE
59798: EQUAL
59799: IFTRUE 59857
59801: LD_INT 17
59803: DOUBLE
59804: EQUAL
59805: IFTRUE 59857
59807: LD_INT 18
59809: DOUBLE
59810: EQUAL
59811: IFTRUE 59857
59813: LD_INT 19
59815: DOUBLE
59816: EQUAL
59817: IFTRUE 59857
59819: LD_INT 22
59821: DOUBLE
59822: EQUAL
59823: IFTRUE 59857
59825: LD_INT 20
59827: DOUBLE
59828: EQUAL
59829: IFTRUE 59857
59831: LD_INT 21
59833: DOUBLE
59834: EQUAL
59835: IFTRUE 59857
59837: LD_INT 23
59839: DOUBLE
59840: EQUAL
59841: IFTRUE 59857
59843: LD_INT 24
59845: DOUBLE
59846: EQUAL
59847: IFTRUE 59857
59849: LD_INT 25
59851: DOUBLE
59852: EQUAL
59853: IFTRUE 59857
59855: GO 59913
59857: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59858: LD_ADDR_VAR 0 9
59862: PUSH
59863: LD_VAR 0 35
59867: PUSH
59868: LD_VAR 0 36
59872: PUSH
59873: LD_VAR 0 37
59877: PUSH
59878: LD_VAR 0 38
59882: PUSH
59883: LD_VAR 0 39
59887: PUSH
59888: LD_VAR 0 40
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: PUSH
59901: LD_VAR 0 4
59905: PUSH
59906: LD_INT 1
59908: PLUS
59909: ARRAY
59910: ST_TO_ADDR
59911: GO 60278
59913: LD_INT 6
59915: DOUBLE
59916: EQUAL
59917: IFTRUE 59969
59919: LD_INT 7
59921: DOUBLE
59922: EQUAL
59923: IFTRUE 59969
59925: LD_INT 8
59927: DOUBLE
59928: EQUAL
59929: IFTRUE 59969
59931: LD_INT 13
59933: DOUBLE
59934: EQUAL
59935: IFTRUE 59969
59937: LD_INT 12
59939: DOUBLE
59940: EQUAL
59941: IFTRUE 59969
59943: LD_INT 15
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59969
59949: LD_INT 11
59951: DOUBLE
59952: EQUAL
59953: IFTRUE 59969
59955: LD_INT 14
59957: DOUBLE
59958: EQUAL
59959: IFTRUE 59969
59961: LD_INT 10
59963: DOUBLE
59964: EQUAL
59965: IFTRUE 59969
59967: GO 60025
59969: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
59970: LD_ADDR_VAR 0 9
59974: PUSH
59975: LD_VAR 0 41
59979: PUSH
59980: LD_VAR 0 42
59984: PUSH
59985: LD_VAR 0 43
59989: PUSH
59990: LD_VAR 0 44
59994: PUSH
59995: LD_VAR 0 45
59999: PUSH
60000: LD_VAR 0 46
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: LD_VAR 0 4
60017: PUSH
60018: LD_INT 1
60020: PLUS
60021: ARRAY
60022: ST_TO_ADDR
60023: GO 60278
60025: LD_INT 36
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60033
60031: GO 60089
60033: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60034: LD_ADDR_VAR 0 9
60038: PUSH
60039: LD_VAR 0 47
60043: PUSH
60044: LD_VAR 0 48
60048: PUSH
60049: LD_VAR 0 49
60053: PUSH
60054: LD_VAR 0 50
60058: PUSH
60059: LD_VAR 0 51
60063: PUSH
60064: LD_VAR 0 52
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: PUSH
60077: LD_VAR 0 4
60081: PUSH
60082: LD_INT 1
60084: PLUS
60085: ARRAY
60086: ST_TO_ADDR
60087: GO 60278
60089: LD_INT 4
60091: DOUBLE
60092: EQUAL
60093: IFTRUE 60115
60095: LD_INT 5
60097: DOUBLE
60098: EQUAL
60099: IFTRUE 60115
60101: LD_INT 34
60103: DOUBLE
60104: EQUAL
60105: IFTRUE 60115
60107: LD_INT 37
60109: DOUBLE
60110: EQUAL
60111: IFTRUE 60115
60113: GO 60171
60115: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60116: LD_ADDR_VAR 0 9
60120: PUSH
60121: LD_VAR 0 53
60125: PUSH
60126: LD_VAR 0 54
60130: PUSH
60131: LD_VAR 0 55
60135: PUSH
60136: LD_VAR 0 56
60140: PUSH
60141: LD_VAR 0 57
60145: PUSH
60146: LD_VAR 0 58
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: PUSH
60159: LD_VAR 0 4
60163: PUSH
60164: LD_INT 1
60166: PLUS
60167: ARRAY
60168: ST_TO_ADDR
60169: GO 60278
60171: LD_INT 31
60173: DOUBLE
60174: EQUAL
60175: IFTRUE 60221
60177: LD_INT 32
60179: DOUBLE
60180: EQUAL
60181: IFTRUE 60221
60183: LD_INT 33
60185: DOUBLE
60186: EQUAL
60187: IFTRUE 60221
60189: LD_INT 27
60191: DOUBLE
60192: EQUAL
60193: IFTRUE 60221
60195: LD_INT 26
60197: DOUBLE
60198: EQUAL
60199: IFTRUE 60221
60201: LD_INT 28
60203: DOUBLE
60204: EQUAL
60205: IFTRUE 60221
60207: LD_INT 29
60209: DOUBLE
60210: EQUAL
60211: IFTRUE 60221
60213: LD_INT 30
60215: DOUBLE
60216: EQUAL
60217: IFTRUE 60221
60219: GO 60277
60221: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
60222: LD_ADDR_VAR 0 9
60226: PUSH
60227: LD_VAR 0 59
60231: PUSH
60232: LD_VAR 0 60
60236: PUSH
60237: LD_VAR 0 61
60241: PUSH
60242: LD_VAR 0 62
60246: PUSH
60247: LD_VAR 0 63
60251: PUSH
60252: LD_VAR 0 64
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: PUSH
60265: LD_VAR 0 4
60269: PUSH
60270: LD_INT 1
60272: PLUS
60273: ARRAY
60274: ST_TO_ADDR
60275: GO 60278
60277: POP
// temp_list2 = [ ] ;
60278: LD_ADDR_VAR 0 10
60282: PUSH
60283: EMPTY
60284: ST_TO_ADDR
// for i in temp_list do
60285: LD_ADDR_VAR 0 8
60289: PUSH
60290: LD_VAR 0 9
60294: PUSH
60295: FOR_IN
60296: IFFALSE 60348
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60298: LD_ADDR_VAR 0 10
60302: PUSH
60303: LD_VAR 0 10
60307: PUSH
60308: LD_VAR 0 8
60312: PUSH
60313: LD_INT 1
60315: ARRAY
60316: PUSH
60317: LD_VAR 0 2
60321: PLUS
60322: PUSH
60323: LD_VAR 0 8
60327: PUSH
60328: LD_INT 2
60330: ARRAY
60331: PUSH
60332: LD_VAR 0 3
60336: PLUS
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: EMPTY
60343: LIST
60344: ADD
60345: ST_TO_ADDR
60346: GO 60295
60348: POP
60349: POP
// result = temp_list2 ;
60350: LD_ADDR_VAR 0 7
60354: PUSH
60355: LD_VAR 0 10
60359: ST_TO_ADDR
// end ;
60360: LD_VAR 0 7
60364: RET
// export function EnemyInRange ( unit , dist ) ; begin
60365: LD_INT 0
60367: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60368: LD_ADDR_VAR 0 3
60372: PUSH
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 255
60382: PPUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: CALL_OW 250
60392: PPUSH
60393: LD_VAR 0 1
60397: PPUSH
60398: CALL_OW 251
60402: PPUSH
60403: LD_VAR 0 2
60407: PPUSH
60408: CALL 34469 0 4
60412: PUSH
60413: LD_INT 4
60415: ARRAY
60416: ST_TO_ADDR
// end ;
60417: LD_VAR 0 3
60421: RET
// export function PlayerSeeMe ( unit ) ; begin
60422: LD_INT 0
60424: PPUSH
// result := See ( your_side , unit ) ;
60425: LD_ADDR_VAR 0 2
60429: PUSH
60430: LD_OWVAR 2
60434: PPUSH
60435: LD_VAR 0 1
60439: PPUSH
60440: CALL_OW 292
60444: ST_TO_ADDR
// end ;
60445: LD_VAR 0 2
60449: RET
// export function ReverseDir ( unit ) ; begin
60450: LD_INT 0
60452: PPUSH
// if not unit then
60453: LD_VAR 0 1
60457: NOT
60458: IFFALSE 60462
// exit ;
60460: GO 60485
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60462: LD_ADDR_VAR 0 2
60466: PUSH
60467: LD_VAR 0 1
60471: PPUSH
60472: CALL_OW 254
60476: PUSH
60477: LD_INT 3
60479: PLUS
60480: PUSH
60481: LD_INT 6
60483: MOD
60484: ST_TO_ADDR
// end ;
60485: LD_VAR 0 2
60489: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60490: LD_INT 0
60492: PPUSH
60493: PPUSH
60494: PPUSH
60495: PPUSH
60496: PPUSH
// if not hexes then
60497: LD_VAR 0 2
60501: NOT
60502: IFFALSE 60506
// exit ;
60504: GO 60654
// dist := 9999 ;
60506: LD_ADDR_VAR 0 5
60510: PUSH
60511: LD_INT 9999
60513: ST_TO_ADDR
// for i = 1 to hexes do
60514: LD_ADDR_VAR 0 4
60518: PUSH
60519: DOUBLE
60520: LD_INT 1
60522: DEC
60523: ST_TO_ADDR
60524: LD_VAR 0 2
60528: PUSH
60529: FOR_TO
60530: IFFALSE 60642
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60532: LD_VAR 0 1
60536: PPUSH
60537: LD_VAR 0 2
60541: PUSH
60542: LD_VAR 0 4
60546: ARRAY
60547: PUSH
60548: LD_INT 1
60550: ARRAY
60551: PPUSH
60552: LD_VAR 0 2
60556: PUSH
60557: LD_VAR 0 4
60561: ARRAY
60562: PUSH
60563: LD_INT 2
60565: ARRAY
60566: PPUSH
60567: CALL_OW 297
60571: PUSH
60572: LD_VAR 0 5
60576: LESS
60577: IFFALSE 60640
// begin hex := hexes [ i ] ;
60579: LD_ADDR_VAR 0 7
60583: PUSH
60584: LD_VAR 0 2
60588: PUSH
60589: LD_VAR 0 4
60593: ARRAY
60594: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60595: LD_ADDR_VAR 0 5
60599: PUSH
60600: LD_VAR 0 1
60604: PPUSH
60605: LD_VAR 0 2
60609: PUSH
60610: LD_VAR 0 4
60614: ARRAY
60615: PUSH
60616: LD_INT 1
60618: ARRAY
60619: PPUSH
60620: LD_VAR 0 2
60624: PUSH
60625: LD_VAR 0 4
60629: ARRAY
60630: PUSH
60631: LD_INT 2
60633: ARRAY
60634: PPUSH
60635: CALL_OW 297
60639: ST_TO_ADDR
// end ; end ;
60640: GO 60529
60642: POP
60643: POP
// result := hex ;
60644: LD_ADDR_VAR 0 3
60648: PUSH
60649: LD_VAR 0 7
60653: ST_TO_ADDR
// end ;
60654: LD_VAR 0 3
60658: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60659: LD_INT 0
60661: PPUSH
60662: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60663: LD_VAR 0 1
60667: NOT
60668: PUSH
60669: LD_VAR 0 1
60673: PUSH
60674: LD_INT 21
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 23
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PPUSH
60698: CALL_OW 69
60702: IN
60703: NOT
60704: OR
60705: IFFALSE 60709
// exit ;
60707: GO 60756
// for i = 1 to 3 do
60709: LD_ADDR_VAR 0 3
60713: PUSH
60714: DOUBLE
60715: LD_INT 1
60717: DEC
60718: ST_TO_ADDR
60719: LD_INT 3
60721: PUSH
60722: FOR_TO
60723: IFFALSE 60754
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60725: LD_VAR 0 1
60729: PPUSH
60730: CALL_OW 250
60734: PPUSH
60735: LD_VAR 0 1
60739: PPUSH
60740: CALL_OW 251
60744: PPUSH
60745: LD_INT 1
60747: PPUSH
60748: CALL_OW 453
60752: GO 60722
60754: POP
60755: POP
// end ;
60756: LD_VAR 0 2
60760: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60761: LD_INT 0
60763: PPUSH
60764: PPUSH
60765: PPUSH
60766: PPUSH
60767: PPUSH
60768: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60769: LD_VAR 0 1
60773: NOT
60774: PUSH
60775: LD_VAR 0 2
60779: NOT
60780: OR
60781: PUSH
60782: LD_VAR 0 1
60786: PPUSH
60787: CALL_OW 314
60791: OR
60792: IFFALSE 60796
// exit ;
60794: GO 61237
// x := GetX ( enemy_unit ) ;
60796: LD_ADDR_VAR 0 7
60800: PUSH
60801: LD_VAR 0 2
60805: PPUSH
60806: CALL_OW 250
60810: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60811: LD_ADDR_VAR 0 8
60815: PUSH
60816: LD_VAR 0 2
60820: PPUSH
60821: CALL_OW 251
60825: ST_TO_ADDR
// if not x or not y then
60826: LD_VAR 0 7
60830: NOT
60831: PUSH
60832: LD_VAR 0 8
60836: NOT
60837: OR
60838: IFFALSE 60842
// exit ;
60840: GO 61237
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60842: LD_ADDR_VAR 0 6
60846: PUSH
60847: LD_VAR 0 7
60851: PPUSH
60852: LD_INT 0
60854: PPUSH
60855: LD_INT 4
60857: PPUSH
60858: CALL_OW 272
60862: PUSH
60863: LD_VAR 0 8
60867: PPUSH
60868: LD_INT 0
60870: PPUSH
60871: LD_INT 4
60873: PPUSH
60874: CALL_OW 273
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_VAR 0 7
60887: PPUSH
60888: LD_INT 1
60890: PPUSH
60891: LD_INT 4
60893: PPUSH
60894: CALL_OW 272
60898: PUSH
60899: LD_VAR 0 8
60903: PPUSH
60904: LD_INT 1
60906: PPUSH
60907: LD_INT 4
60909: PPUSH
60910: CALL_OW 273
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 7
60923: PPUSH
60924: LD_INT 2
60926: PPUSH
60927: LD_INT 4
60929: PPUSH
60930: CALL_OW 272
60934: PUSH
60935: LD_VAR 0 8
60939: PPUSH
60940: LD_INT 2
60942: PPUSH
60943: LD_INT 4
60945: PPUSH
60946: CALL_OW 273
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_VAR 0 7
60959: PPUSH
60960: LD_INT 3
60962: PPUSH
60963: LD_INT 4
60965: PPUSH
60966: CALL_OW 272
60970: PUSH
60971: LD_VAR 0 8
60975: PPUSH
60976: LD_INT 3
60978: PPUSH
60979: LD_INT 4
60981: PPUSH
60982: CALL_OW 273
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_VAR 0 7
60995: PPUSH
60996: LD_INT 4
60998: PPUSH
60999: LD_INT 4
61001: PPUSH
61002: CALL_OW 272
61006: PUSH
61007: LD_VAR 0 8
61011: PPUSH
61012: LD_INT 4
61014: PPUSH
61015: LD_INT 4
61017: PPUSH
61018: CALL_OW 273
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_VAR 0 7
61031: PPUSH
61032: LD_INT 5
61034: PPUSH
61035: LD_INT 4
61037: PPUSH
61038: CALL_OW 272
61042: PUSH
61043: LD_VAR 0 8
61047: PPUSH
61048: LD_INT 5
61050: PPUSH
61051: LD_INT 4
61053: PPUSH
61054: CALL_OW 273
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: ST_TO_ADDR
// for i = tmp downto 1 do
61071: LD_ADDR_VAR 0 4
61075: PUSH
61076: DOUBLE
61077: LD_VAR 0 6
61081: INC
61082: ST_TO_ADDR
61083: LD_INT 1
61085: PUSH
61086: FOR_DOWNTO
61087: IFFALSE 61188
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61089: LD_VAR 0 6
61093: PUSH
61094: LD_VAR 0 4
61098: ARRAY
61099: PUSH
61100: LD_INT 1
61102: ARRAY
61103: PPUSH
61104: LD_VAR 0 6
61108: PUSH
61109: LD_VAR 0 4
61113: ARRAY
61114: PUSH
61115: LD_INT 2
61117: ARRAY
61118: PPUSH
61119: CALL_OW 488
61123: NOT
61124: PUSH
61125: LD_VAR 0 6
61129: PUSH
61130: LD_VAR 0 4
61134: ARRAY
61135: PUSH
61136: LD_INT 1
61138: ARRAY
61139: PPUSH
61140: LD_VAR 0 6
61144: PUSH
61145: LD_VAR 0 4
61149: ARRAY
61150: PUSH
61151: LD_INT 2
61153: ARRAY
61154: PPUSH
61155: CALL_OW 428
61159: PUSH
61160: LD_INT 0
61162: NONEQUAL
61163: OR
61164: IFFALSE 61186
// tmp := Delete ( tmp , i ) ;
61166: LD_ADDR_VAR 0 6
61170: PUSH
61171: LD_VAR 0 6
61175: PPUSH
61176: LD_VAR 0 4
61180: PPUSH
61181: CALL_OW 3
61185: ST_TO_ADDR
61186: GO 61086
61188: POP
61189: POP
// j := GetClosestHex ( unit , tmp ) ;
61190: LD_ADDR_VAR 0 5
61194: PUSH
61195: LD_VAR 0 1
61199: PPUSH
61200: LD_VAR 0 6
61204: PPUSH
61205: CALL 60490 0 2
61209: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61210: LD_VAR 0 1
61214: PPUSH
61215: LD_VAR 0 5
61219: PUSH
61220: LD_INT 1
61222: ARRAY
61223: PPUSH
61224: LD_VAR 0 5
61228: PUSH
61229: LD_INT 2
61231: ARRAY
61232: PPUSH
61233: CALL_OW 111
// end ;
61237: LD_VAR 0 3
61241: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61242: LD_INT 0
61244: PPUSH
61245: PPUSH
61246: PPUSH
// uc_side = 0 ;
61247: LD_ADDR_OWVAR 20
61251: PUSH
61252: LD_INT 0
61254: ST_TO_ADDR
// uc_nation = 0 ;
61255: LD_ADDR_OWVAR 21
61259: PUSH
61260: LD_INT 0
61262: ST_TO_ADDR
// InitHc ;
61263: CALL_OW 19
// InitVc ;
61267: CALL_OW 20
// if mastodonts then
61271: LD_VAR 0 6
61275: IFFALSE 61342
// for i = 1 to mastodonts do
61277: LD_ADDR_VAR 0 11
61281: PUSH
61282: DOUBLE
61283: LD_INT 1
61285: DEC
61286: ST_TO_ADDR
61287: LD_VAR 0 6
61291: PUSH
61292: FOR_TO
61293: IFFALSE 61340
// begin vc_chassis := 31 ;
61295: LD_ADDR_OWVAR 37
61299: PUSH
61300: LD_INT 31
61302: ST_TO_ADDR
// vc_control := control_rider ;
61303: LD_ADDR_OWVAR 38
61307: PUSH
61308: LD_INT 4
61310: ST_TO_ADDR
// animal := CreateVehicle ;
61311: LD_ADDR_VAR 0 12
61315: PUSH
61316: CALL_OW 45
61320: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61321: LD_VAR 0 12
61325: PPUSH
61326: LD_VAR 0 8
61330: PPUSH
61331: LD_INT 0
61333: PPUSH
61334: CALL 63411 0 3
// end ;
61338: GO 61292
61340: POP
61341: POP
// if horses then
61342: LD_VAR 0 5
61346: IFFALSE 61413
// for i = 1 to horses do
61348: LD_ADDR_VAR 0 11
61352: PUSH
61353: DOUBLE
61354: LD_INT 1
61356: DEC
61357: ST_TO_ADDR
61358: LD_VAR 0 5
61362: PUSH
61363: FOR_TO
61364: IFFALSE 61411
// begin hc_class := 21 ;
61366: LD_ADDR_OWVAR 28
61370: PUSH
61371: LD_INT 21
61373: ST_TO_ADDR
// hc_gallery :=  ;
61374: LD_ADDR_OWVAR 33
61378: PUSH
61379: LD_STRING 
61381: ST_TO_ADDR
// animal := CreateHuman ;
61382: LD_ADDR_VAR 0 12
61386: PUSH
61387: CALL_OW 44
61391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61392: LD_VAR 0 12
61396: PPUSH
61397: LD_VAR 0 8
61401: PPUSH
61402: LD_INT 0
61404: PPUSH
61405: CALL 63411 0 3
// end ;
61409: GO 61363
61411: POP
61412: POP
// if birds then
61413: LD_VAR 0 1
61417: IFFALSE 61484
// for i = 1 to birds do
61419: LD_ADDR_VAR 0 11
61423: PUSH
61424: DOUBLE
61425: LD_INT 1
61427: DEC
61428: ST_TO_ADDR
61429: LD_VAR 0 1
61433: PUSH
61434: FOR_TO
61435: IFFALSE 61482
// begin hc_class = 18 ;
61437: LD_ADDR_OWVAR 28
61441: PUSH
61442: LD_INT 18
61444: ST_TO_ADDR
// hc_gallery =  ;
61445: LD_ADDR_OWVAR 33
61449: PUSH
61450: LD_STRING 
61452: ST_TO_ADDR
// animal := CreateHuman ;
61453: LD_ADDR_VAR 0 12
61457: PUSH
61458: CALL_OW 44
61462: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61463: LD_VAR 0 12
61467: PPUSH
61468: LD_VAR 0 8
61472: PPUSH
61473: LD_INT 0
61475: PPUSH
61476: CALL 63411 0 3
// end ;
61480: GO 61434
61482: POP
61483: POP
// if tigers then
61484: LD_VAR 0 2
61488: IFFALSE 61572
// for i = 1 to tigers do
61490: LD_ADDR_VAR 0 11
61494: PUSH
61495: DOUBLE
61496: LD_INT 1
61498: DEC
61499: ST_TO_ADDR
61500: LD_VAR 0 2
61504: PUSH
61505: FOR_TO
61506: IFFALSE 61570
// begin hc_class = class_tiger ;
61508: LD_ADDR_OWVAR 28
61512: PUSH
61513: LD_INT 14
61515: ST_TO_ADDR
// hc_gallery =  ;
61516: LD_ADDR_OWVAR 33
61520: PUSH
61521: LD_STRING 
61523: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61524: LD_ADDR_OWVAR 35
61528: PUSH
61529: LD_INT 7
61531: NEG
61532: PPUSH
61533: LD_INT 7
61535: PPUSH
61536: CALL_OW 12
61540: ST_TO_ADDR
// animal := CreateHuman ;
61541: LD_ADDR_VAR 0 12
61545: PUSH
61546: CALL_OW 44
61550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61551: LD_VAR 0 12
61555: PPUSH
61556: LD_VAR 0 8
61560: PPUSH
61561: LD_INT 0
61563: PPUSH
61564: CALL 63411 0 3
// end ;
61568: GO 61505
61570: POP
61571: POP
// if apemans then
61572: LD_VAR 0 3
61576: IFFALSE 61699
// for i = 1 to apemans do
61578: LD_ADDR_VAR 0 11
61582: PUSH
61583: DOUBLE
61584: LD_INT 1
61586: DEC
61587: ST_TO_ADDR
61588: LD_VAR 0 3
61592: PUSH
61593: FOR_TO
61594: IFFALSE 61697
// begin hc_class = class_apeman ;
61596: LD_ADDR_OWVAR 28
61600: PUSH
61601: LD_INT 12
61603: ST_TO_ADDR
// hc_gallery =  ;
61604: LD_ADDR_OWVAR 33
61608: PUSH
61609: LD_STRING 
61611: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
61612: LD_ADDR_OWVAR 35
61616: PUSH
61617: LD_INT 5
61619: NEG
61620: PPUSH
61621: LD_INT 5
61623: PPUSH
61624: CALL_OW 12
61628: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61629: LD_ADDR_OWVAR 31
61633: PUSH
61634: LD_INT 1
61636: PPUSH
61637: LD_INT 3
61639: PPUSH
61640: CALL_OW 12
61644: PUSH
61645: LD_INT 1
61647: PPUSH
61648: LD_INT 3
61650: PPUSH
61651: CALL_OW 12
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: ST_TO_ADDR
// animal := CreateHuman ;
61668: LD_ADDR_VAR 0 12
61672: PUSH
61673: CALL_OW 44
61677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61678: LD_VAR 0 12
61682: PPUSH
61683: LD_VAR 0 8
61687: PPUSH
61688: LD_INT 0
61690: PPUSH
61691: CALL 63411 0 3
// end ;
61695: GO 61593
61697: POP
61698: POP
// if enchidnas then
61699: LD_VAR 0 4
61703: IFFALSE 61770
// for i = 1 to enchidnas do
61705: LD_ADDR_VAR 0 11
61709: PUSH
61710: DOUBLE
61711: LD_INT 1
61713: DEC
61714: ST_TO_ADDR
61715: LD_VAR 0 4
61719: PUSH
61720: FOR_TO
61721: IFFALSE 61768
// begin hc_class = 13 ;
61723: LD_ADDR_OWVAR 28
61727: PUSH
61728: LD_INT 13
61730: ST_TO_ADDR
// hc_gallery =  ;
61731: LD_ADDR_OWVAR 33
61735: PUSH
61736: LD_STRING 
61738: ST_TO_ADDR
// animal := CreateHuman ;
61739: LD_ADDR_VAR 0 12
61743: PUSH
61744: CALL_OW 44
61748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61749: LD_VAR 0 12
61753: PPUSH
61754: LD_VAR 0 8
61758: PPUSH
61759: LD_INT 0
61761: PPUSH
61762: CALL 63411 0 3
// end ;
61766: GO 61720
61768: POP
61769: POP
// if fishes then
61770: LD_VAR 0 7
61774: IFFALSE 61841
// for i = 1 to fishes do
61776: LD_ADDR_VAR 0 11
61780: PUSH
61781: DOUBLE
61782: LD_INT 1
61784: DEC
61785: ST_TO_ADDR
61786: LD_VAR 0 7
61790: PUSH
61791: FOR_TO
61792: IFFALSE 61839
// begin hc_class = 20 ;
61794: LD_ADDR_OWVAR 28
61798: PUSH
61799: LD_INT 20
61801: ST_TO_ADDR
// hc_gallery =  ;
61802: LD_ADDR_OWVAR 33
61806: PUSH
61807: LD_STRING 
61809: ST_TO_ADDR
// animal := CreateHuman ;
61810: LD_ADDR_VAR 0 12
61814: PUSH
61815: CALL_OW 44
61819: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61820: LD_VAR 0 12
61824: PPUSH
61825: LD_VAR 0 9
61829: PPUSH
61830: LD_INT 0
61832: PPUSH
61833: CALL 63411 0 3
// end ;
61837: GO 61791
61839: POP
61840: POP
// end ;
61841: LD_VAR 0 10
61845: RET
// export function WantHeal ( sci , unit ) ; begin
61846: LD_INT 0
61848: PPUSH
// if GetTaskList ( sci ) > 0 then
61849: LD_VAR 0 1
61853: PPUSH
61854: CALL_OW 437
61858: PUSH
61859: LD_INT 0
61861: GREATER
61862: IFFALSE 61932
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61864: LD_VAR 0 1
61868: PPUSH
61869: CALL_OW 437
61873: PUSH
61874: LD_INT 1
61876: ARRAY
61877: PUSH
61878: LD_INT 1
61880: ARRAY
61881: PUSH
61882: LD_STRING l
61884: EQUAL
61885: PUSH
61886: LD_VAR 0 1
61890: PPUSH
61891: CALL_OW 437
61895: PUSH
61896: LD_INT 1
61898: ARRAY
61899: PUSH
61900: LD_INT 4
61902: ARRAY
61903: PUSH
61904: LD_VAR 0 2
61908: EQUAL
61909: AND
61910: IFFALSE 61922
// result := true else
61912: LD_ADDR_VAR 0 3
61916: PUSH
61917: LD_INT 1
61919: ST_TO_ADDR
61920: GO 61930
// result := false ;
61922: LD_ADDR_VAR 0 3
61926: PUSH
61927: LD_INT 0
61929: ST_TO_ADDR
// end else
61930: GO 61940
// result := false ;
61932: LD_ADDR_VAR 0 3
61936: PUSH
61937: LD_INT 0
61939: ST_TO_ADDR
// end ;
61940: LD_VAR 0 3
61944: RET
// export function HealTarget ( sci ) ; begin
61945: LD_INT 0
61947: PPUSH
// if not sci then
61948: LD_VAR 0 1
61952: NOT
61953: IFFALSE 61957
// exit ;
61955: GO 62022
// result := 0 ;
61957: LD_ADDR_VAR 0 2
61961: PUSH
61962: LD_INT 0
61964: ST_TO_ADDR
// if GetTaskList ( sci ) then
61965: LD_VAR 0 1
61969: PPUSH
61970: CALL_OW 437
61974: IFFALSE 62022
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL_OW 437
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PUSH
61990: LD_INT 1
61992: ARRAY
61993: PUSH
61994: LD_STRING l
61996: EQUAL
61997: IFFALSE 62022
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61999: LD_ADDR_VAR 0 2
62003: PUSH
62004: LD_VAR 0 1
62008: PPUSH
62009: CALL_OW 437
62013: PUSH
62014: LD_INT 1
62016: ARRAY
62017: PUSH
62018: LD_INT 4
62020: ARRAY
62021: ST_TO_ADDR
// end ;
62022: LD_VAR 0 2
62026: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62027: LD_INT 0
62029: PPUSH
62030: PPUSH
62031: PPUSH
62032: PPUSH
// if not base_units then
62033: LD_VAR 0 1
62037: NOT
62038: IFFALSE 62042
// exit ;
62040: GO 62129
// result := false ;
62042: LD_ADDR_VAR 0 2
62046: PUSH
62047: LD_INT 0
62049: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62050: LD_ADDR_VAR 0 5
62054: PUSH
62055: LD_VAR 0 1
62059: PPUSH
62060: LD_INT 21
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PPUSH
62070: CALL_OW 72
62074: ST_TO_ADDR
// if not tmp then
62075: LD_VAR 0 5
62079: NOT
62080: IFFALSE 62084
// exit ;
62082: GO 62129
// for i in tmp do
62084: LD_ADDR_VAR 0 3
62088: PUSH
62089: LD_VAR 0 5
62093: PUSH
62094: FOR_IN
62095: IFFALSE 62127
// begin result := EnemyInRange ( i , 22 ) ;
62097: LD_ADDR_VAR 0 2
62101: PUSH
62102: LD_VAR 0 3
62106: PPUSH
62107: LD_INT 22
62109: PPUSH
62110: CALL 60365 0 2
62114: ST_TO_ADDR
// if result then
62115: LD_VAR 0 2
62119: IFFALSE 62125
// exit ;
62121: POP
62122: POP
62123: GO 62129
// end ;
62125: GO 62094
62127: POP
62128: POP
// end ;
62129: LD_VAR 0 2
62133: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62134: LD_INT 0
62136: PPUSH
62137: PPUSH
// if not units then
62138: LD_VAR 0 1
62142: NOT
62143: IFFALSE 62147
// exit ;
62145: GO 62217
// result := [ ] ;
62147: LD_ADDR_VAR 0 3
62151: PUSH
62152: EMPTY
62153: ST_TO_ADDR
// for i in units do
62154: LD_ADDR_VAR 0 4
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: FOR_IN
62165: IFFALSE 62215
// if GetTag ( i ) = tag then
62167: LD_VAR 0 4
62171: PPUSH
62172: CALL_OW 110
62176: PUSH
62177: LD_VAR 0 2
62181: EQUAL
62182: IFFALSE 62213
// result := Insert ( result , result + 1 , i ) ;
62184: LD_ADDR_VAR 0 3
62188: PUSH
62189: LD_VAR 0 3
62193: PPUSH
62194: LD_VAR 0 3
62198: PUSH
62199: LD_INT 1
62201: PLUS
62202: PPUSH
62203: LD_VAR 0 4
62207: PPUSH
62208: CALL_OW 2
62212: ST_TO_ADDR
62213: GO 62164
62215: POP
62216: POP
// end ;
62217: LD_VAR 0 3
62221: RET
// export function IsDriver ( un ) ; begin
62222: LD_INT 0
62224: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62225: LD_ADDR_VAR 0 2
62229: PUSH
62230: LD_VAR 0 1
62234: PUSH
62235: LD_INT 55
62237: PUSH
62238: EMPTY
62239: LIST
62240: PPUSH
62241: CALL_OW 69
62245: IN
62246: ST_TO_ADDR
// end ;
62247: LD_VAR 0 2
62251: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62252: LD_INT 0
62254: PPUSH
62255: PPUSH
// list := [ ] ;
62256: LD_ADDR_VAR 0 5
62260: PUSH
62261: EMPTY
62262: ST_TO_ADDR
// case d of 0 :
62263: LD_VAR 0 3
62267: PUSH
62268: LD_INT 0
62270: DOUBLE
62271: EQUAL
62272: IFTRUE 62276
62274: GO 62409
62276: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62277: LD_ADDR_VAR 0 5
62281: PUSH
62282: LD_VAR 0 1
62286: PUSH
62287: LD_INT 4
62289: MINUS
62290: PUSH
62291: LD_VAR 0 2
62295: PUSH
62296: LD_INT 4
62298: MINUS
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: PUSH
62308: LD_VAR 0 1
62312: PUSH
62313: LD_INT 3
62315: MINUS
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: PUSH
62330: LD_VAR 0 1
62334: PUSH
62335: LD_INT 4
62337: PLUS
62338: PUSH
62339: LD_VAR 0 2
62343: PUSH
62344: LD_INT 4
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: PUSH
62352: LD_VAR 0 1
62356: PUSH
62357: LD_INT 3
62359: PLUS
62360: PUSH
62361: LD_VAR 0 2
62365: PUSH
62366: LD_INT 3
62368: PLUS
62369: PUSH
62370: LD_INT 5
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: PUSH
62378: LD_VAR 0 1
62382: PUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_INT 4
62390: PLUS
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: ST_TO_ADDR
// end ; 1 :
62407: GO 63107
62409: LD_INT 1
62411: DOUBLE
62412: EQUAL
62413: IFTRUE 62417
62415: GO 62550
62417: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62418: LD_ADDR_VAR 0 5
62422: PUSH
62423: LD_VAR 0 1
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_INT 4
62435: MINUS
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: PUSH
62445: LD_VAR 0 1
62449: PUSH
62450: LD_INT 3
62452: MINUS
62453: PUSH
62454: LD_VAR 0 2
62458: PUSH
62459: LD_INT 3
62461: MINUS
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: PUSH
62471: LD_VAR 0 1
62475: PUSH
62476: LD_INT 4
62478: MINUS
62479: PUSH
62480: LD_VAR 0 2
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: PUSH
62493: LD_VAR 0 1
62497: PUSH
62498: LD_VAR 0 2
62502: PUSH
62503: LD_INT 3
62505: PLUS
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_INT 4
62522: PLUS
62523: PUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_INT 4
62531: PLUS
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: ST_TO_ADDR
// end ; 2 :
62548: GO 63107
62550: LD_INT 2
62552: DOUBLE
62553: EQUAL
62554: IFTRUE 62558
62556: GO 62687
62558: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62559: LD_ADDR_VAR 0 5
62563: PUSH
62564: LD_VAR 0 1
62568: PUSH
62569: LD_VAR 0 2
62573: PUSH
62574: LD_INT 3
62576: MINUS
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: PUSH
62586: LD_VAR 0 1
62590: PUSH
62591: LD_INT 4
62593: PLUS
62594: PUSH
62595: LD_VAR 0 2
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: PUSH
62608: LD_VAR 0 1
62612: PUSH
62613: LD_VAR 0 2
62617: PUSH
62618: LD_INT 4
62620: PLUS
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: PUSH
62630: LD_VAR 0 1
62634: PUSH
62635: LD_INT 3
62637: MINUS
62638: PUSH
62639: LD_VAR 0 2
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: PUSH
62652: LD_VAR 0 1
62656: PUSH
62657: LD_INT 4
62659: MINUS
62660: PUSH
62661: LD_VAR 0 2
62665: PUSH
62666: LD_INT 4
62668: MINUS
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: ST_TO_ADDR
// end ; 3 :
62685: GO 63107
62687: LD_INT 3
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62695
62693: GO 62828
62695: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62696: LD_ADDR_VAR 0 5
62700: PUSH
62701: LD_VAR 0 1
62705: PUSH
62706: LD_INT 3
62708: PLUS
62709: PUSH
62710: LD_VAR 0 2
62714: PUSH
62715: LD_INT 4
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: LIST
62722: PUSH
62723: LD_VAR 0 1
62727: PUSH
62728: LD_INT 4
62730: PLUS
62731: PUSH
62732: LD_VAR 0 2
62736: PUSH
62737: LD_INT 4
62739: PLUS
62740: PUSH
62741: LD_INT 5
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: PUSH
62749: LD_VAR 0 1
62753: PUSH
62754: LD_INT 4
62756: MINUS
62757: PUSH
62758: LD_VAR 0 2
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: LIST
62770: PUSH
62771: LD_VAR 0 1
62775: PUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_INT 4
62783: MINUS
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: PUSH
62793: LD_VAR 0 1
62797: PUSH
62798: LD_INT 3
62800: MINUS
62801: PUSH
62802: LD_VAR 0 2
62806: PUSH
62807: LD_INT 3
62809: MINUS
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// end ; 4 :
62826: GO 63107
62828: LD_INT 4
62830: DOUBLE
62831: EQUAL
62832: IFTRUE 62836
62834: GO 62969
62836: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62837: LD_ADDR_VAR 0 5
62841: PUSH
62842: LD_VAR 0 1
62846: PUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_INT 4
62854: PLUS
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: PUSH
62864: LD_VAR 0 1
62868: PUSH
62869: LD_INT 3
62871: PLUS
62872: PUSH
62873: LD_VAR 0 2
62877: PUSH
62878: LD_INT 3
62880: PLUS
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: PUSH
62890: LD_VAR 0 1
62894: PUSH
62895: LD_INT 4
62897: PLUS
62898: PUSH
62899: LD_VAR 0 2
62903: PUSH
62904: LD_INT 4
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: LD_VAR 0 1
62916: PUSH
62917: LD_VAR 0 2
62921: PUSH
62922: LD_INT 3
62924: MINUS
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: LIST
62933: PUSH
62934: LD_VAR 0 1
62938: PUSH
62939: LD_INT 4
62941: MINUS
62942: PUSH
62943: LD_VAR 0 2
62947: PUSH
62948: LD_INT 4
62950: MINUS
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: ST_TO_ADDR
// end ; 5 :
62967: GO 63107
62969: LD_INT 5
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62977
62975: GO 63106
62977: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62978: LD_ADDR_VAR 0 5
62982: PUSH
62983: LD_VAR 0 1
62987: PUSH
62988: LD_INT 4
62990: MINUS
62991: PUSH
62992: LD_VAR 0 2
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: PUSH
63005: LD_VAR 0 1
63009: PUSH
63010: LD_VAR 0 2
63014: PUSH
63015: LD_INT 4
63017: MINUS
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: LIST
63026: PUSH
63027: LD_VAR 0 1
63031: PUSH
63032: LD_INT 4
63034: PLUS
63035: PUSH
63036: LD_VAR 0 2
63040: PUSH
63041: LD_INT 4
63043: PLUS
63044: PUSH
63045: LD_INT 5
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: PUSH
63053: LD_VAR 0 1
63057: PUSH
63058: LD_INT 3
63060: PLUS
63061: PUSH
63062: LD_VAR 0 2
63066: PUSH
63067: LD_INT 4
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: PUSH
63075: LD_VAR 0 1
63079: PUSH
63080: LD_VAR 0 2
63084: PUSH
63085: LD_INT 3
63087: PLUS
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// end ; end ;
63104: GO 63107
63106: POP
// result := list ;
63107: LD_ADDR_VAR 0 4
63111: PUSH
63112: LD_VAR 0 5
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 4
63121: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63122: LD_INT 0
63124: PPUSH
63125: PPUSH
63126: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63127: LD_VAR 0 1
63131: NOT
63132: PUSH
63133: LD_VAR 0 2
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 4
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: IN
63156: NOT
63157: OR
63158: IFFALSE 63162
// exit ;
63160: GO 63254
// tmp := [ ] ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: EMPTY
63168: ST_TO_ADDR
// for i in units do
63169: LD_ADDR_VAR 0 4
63173: PUSH
63174: LD_VAR 0 1
63178: PUSH
63179: FOR_IN
63180: IFFALSE 63223
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63182: LD_ADDR_VAR 0 5
63186: PUSH
63187: LD_VAR 0 5
63191: PPUSH
63192: LD_VAR 0 5
63196: PUSH
63197: LD_INT 1
63199: PLUS
63200: PPUSH
63201: LD_VAR 0 4
63205: PPUSH
63206: LD_VAR 0 2
63210: PPUSH
63211: CALL_OW 259
63215: PPUSH
63216: CALL_OW 2
63220: ST_TO_ADDR
63221: GO 63179
63223: POP
63224: POP
// if not tmp then
63225: LD_VAR 0 5
63229: NOT
63230: IFFALSE 63234
// exit ;
63232: GO 63254
// result := SortListByListDesc ( units , tmp ) ;
63234: LD_ADDR_VAR 0 3
63238: PUSH
63239: LD_VAR 0 1
63243: PPUSH
63244: LD_VAR 0 5
63248: PPUSH
63249: CALL_OW 77
63253: ST_TO_ADDR
// end ;
63254: LD_VAR 0 3
63258: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63259: LD_INT 0
63261: PPUSH
63262: PPUSH
63263: PPUSH
// x := GetX ( building ) ;
63264: LD_ADDR_VAR 0 4
63268: PUSH
63269: LD_VAR 0 2
63273: PPUSH
63274: CALL_OW 250
63278: ST_TO_ADDR
// y := GetY ( building ) ;
63279: LD_ADDR_VAR 0 5
63283: PUSH
63284: LD_VAR 0 2
63288: PPUSH
63289: CALL_OW 251
63293: ST_TO_ADDR
// if GetTaskList ( unit ) then
63294: LD_VAR 0 1
63298: PPUSH
63299: CALL_OW 437
63303: IFFALSE 63398
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63305: LD_STRING e
63307: PUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 437
63317: PUSH
63318: LD_INT 1
63320: ARRAY
63321: PUSH
63322: LD_INT 1
63324: ARRAY
63325: EQUAL
63326: PUSH
63327: LD_VAR 0 4
63331: PUSH
63332: LD_VAR 0 1
63336: PPUSH
63337: CALL_OW 437
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PUSH
63346: LD_INT 2
63348: ARRAY
63349: EQUAL
63350: AND
63351: PUSH
63352: LD_VAR 0 5
63356: PUSH
63357: LD_VAR 0 1
63361: PPUSH
63362: CALL_OW 437
63366: PUSH
63367: LD_INT 1
63369: ARRAY
63370: PUSH
63371: LD_INT 3
63373: ARRAY
63374: EQUAL
63375: AND
63376: IFFALSE 63388
// result := true else
63378: LD_ADDR_VAR 0 3
63382: PUSH
63383: LD_INT 1
63385: ST_TO_ADDR
63386: GO 63396
// result := false ;
63388: LD_ADDR_VAR 0 3
63392: PUSH
63393: LD_INT 0
63395: ST_TO_ADDR
// end else
63396: GO 63406
// result := false ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_INT 0
63405: ST_TO_ADDR
// end ;
63406: LD_VAR 0 3
63410: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63411: LD_INT 0
63413: PPUSH
63414: PPUSH
63415: PPUSH
63416: PPUSH
// if not unit or not area then
63417: LD_VAR 0 1
63421: NOT
63422: PUSH
63423: LD_VAR 0 2
63427: NOT
63428: OR
63429: IFFALSE 63433
// exit ;
63431: GO 63597
// tmp := AreaToList ( area , i ) ;
63433: LD_ADDR_VAR 0 6
63437: PUSH
63438: LD_VAR 0 2
63442: PPUSH
63443: LD_VAR 0 5
63447: PPUSH
63448: CALL_OW 517
63452: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63453: LD_ADDR_VAR 0 5
63457: PUSH
63458: DOUBLE
63459: LD_INT 1
63461: DEC
63462: ST_TO_ADDR
63463: LD_VAR 0 6
63467: PUSH
63468: LD_INT 1
63470: ARRAY
63471: PUSH
63472: FOR_TO
63473: IFFALSE 63595
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63475: LD_ADDR_VAR 0 7
63479: PUSH
63480: LD_VAR 0 6
63484: PUSH
63485: LD_INT 1
63487: ARRAY
63488: PUSH
63489: LD_VAR 0 5
63493: ARRAY
63494: PUSH
63495: LD_VAR 0 6
63499: PUSH
63500: LD_INT 2
63502: ARRAY
63503: PUSH
63504: LD_VAR 0 5
63508: ARRAY
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63514: LD_VAR 0 7
63518: PUSH
63519: LD_INT 1
63521: ARRAY
63522: PPUSH
63523: LD_VAR 0 7
63527: PUSH
63528: LD_INT 2
63530: ARRAY
63531: PPUSH
63532: CALL_OW 428
63536: PUSH
63537: LD_INT 0
63539: EQUAL
63540: IFFALSE 63593
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63542: LD_VAR 0 1
63546: PPUSH
63547: LD_VAR 0 7
63551: PUSH
63552: LD_INT 1
63554: ARRAY
63555: PPUSH
63556: LD_VAR 0 7
63560: PUSH
63561: LD_INT 2
63563: ARRAY
63564: PPUSH
63565: LD_VAR 0 3
63569: PPUSH
63570: CALL_OW 48
// result := IsPlaced ( unit ) ;
63574: LD_ADDR_VAR 0 4
63578: PUSH
63579: LD_VAR 0 1
63583: PPUSH
63584: CALL_OW 305
63588: ST_TO_ADDR
// exit ;
63589: POP
63590: POP
63591: GO 63597
// end ; end ;
63593: GO 63472
63595: POP
63596: POP
// end ;
63597: LD_VAR 0 4
63601: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63602: LD_INT 0
63604: PPUSH
63605: PPUSH
63606: PPUSH
// if not side or side > 8 then
63607: LD_VAR 0 1
63611: NOT
63612: PUSH
63613: LD_VAR 0 1
63617: PUSH
63618: LD_INT 8
63620: GREATER
63621: OR
63622: IFFALSE 63626
// exit ;
63624: GO 63813
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63626: LD_ADDR_VAR 0 4
63630: PUSH
63631: LD_INT 22
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 21
63645: PUSH
63646: LD_INT 3
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PPUSH
63657: CALL_OW 69
63661: ST_TO_ADDR
// if not tmp then
63662: LD_VAR 0 4
63666: NOT
63667: IFFALSE 63671
// exit ;
63669: GO 63813
// enable_addtolog := true ;
63671: LD_ADDR_OWVAR 81
63675: PUSH
63676: LD_INT 1
63678: ST_TO_ADDR
// AddToLog ( [ ) ;
63679: LD_STRING [
63681: PPUSH
63682: CALL_OW 561
// for i in tmp do
63686: LD_ADDR_VAR 0 3
63690: PUSH
63691: LD_VAR 0 4
63695: PUSH
63696: FOR_IN
63697: IFFALSE 63804
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63699: LD_STRING [
63701: PUSH
63702: LD_VAR 0 3
63706: PPUSH
63707: CALL_OW 266
63711: STR
63712: PUSH
63713: LD_STRING , 
63715: STR
63716: PUSH
63717: LD_VAR 0 3
63721: PPUSH
63722: CALL_OW 250
63726: STR
63727: PUSH
63728: LD_STRING , 
63730: STR
63731: PUSH
63732: LD_VAR 0 3
63736: PPUSH
63737: CALL_OW 251
63741: STR
63742: PUSH
63743: LD_STRING , 
63745: STR
63746: PUSH
63747: LD_VAR 0 3
63751: PPUSH
63752: CALL_OW 254
63756: STR
63757: PUSH
63758: LD_STRING , 
63760: STR
63761: PUSH
63762: LD_VAR 0 3
63766: PPUSH
63767: LD_INT 1
63769: PPUSH
63770: CALL_OW 268
63774: STR
63775: PUSH
63776: LD_STRING , 
63778: STR
63779: PUSH
63780: LD_VAR 0 3
63784: PPUSH
63785: LD_INT 2
63787: PPUSH
63788: CALL_OW 268
63792: STR
63793: PUSH
63794: LD_STRING ],
63796: STR
63797: PPUSH
63798: CALL_OW 561
// end ;
63802: GO 63696
63804: POP
63805: POP
// AddToLog ( ]; ) ;
63806: LD_STRING ];
63808: PPUSH
63809: CALL_OW 561
// end ;
63813: LD_VAR 0 2
63817: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63818: LD_INT 0
63820: PPUSH
63821: PPUSH
63822: PPUSH
63823: PPUSH
63824: PPUSH
// if not area or not rate or not max then
63825: LD_VAR 0 1
63829: NOT
63830: PUSH
63831: LD_VAR 0 2
63835: NOT
63836: OR
63837: PUSH
63838: LD_VAR 0 4
63842: NOT
63843: OR
63844: IFFALSE 63848
// exit ;
63846: GO 64040
// while 1 do
63848: LD_INT 1
63850: IFFALSE 64040
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63852: LD_ADDR_VAR 0 9
63856: PUSH
63857: LD_VAR 0 1
63861: PPUSH
63862: LD_INT 1
63864: PPUSH
63865: CALL_OW 287
63869: PUSH
63870: LD_INT 10
63872: MUL
63873: ST_TO_ADDR
// r := rate / 10 ;
63874: LD_ADDR_VAR 0 7
63878: PUSH
63879: LD_VAR 0 2
63883: PUSH
63884: LD_INT 10
63886: DIVREAL
63887: ST_TO_ADDR
// time := 1 1$00 ;
63888: LD_ADDR_VAR 0 8
63892: PUSH
63893: LD_INT 2100
63895: ST_TO_ADDR
// if amount < min then
63896: LD_VAR 0 9
63900: PUSH
63901: LD_VAR 0 3
63905: LESS
63906: IFFALSE 63924
// r := r * 2 else
63908: LD_ADDR_VAR 0 7
63912: PUSH
63913: LD_VAR 0 7
63917: PUSH
63918: LD_INT 2
63920: MUL
63921: ST_TO_ADDR
63922: GO 63950
// if amount > max then
63924: LD_VAR 0 9
63928: PUSH
63929: LD_VAR 0 4
63933: GREATER
63934: IFFALSE 63950
// r := r / 2 ;
63936: LD_ADDR_VAR 0 7
63940: PUSH
63941: LD_VAR 0 7
63945: PUSH
63946: LD_INT 2
63948: DIVREAL
63949: ST_TO_ADDR
// time := time / r ;
63950: LD_ADDR_VAR 0 8
63954: PUSH
63955: LD_VAR 0 8
63959: PUSH
63960: LD_VAR 0 7
63964: DIVREAL
63965: ST_TO_ADDR
// if time < 0 then
63966: LD_VAR 0 8
63970: PUSH
63971: LD_INT 0
63973: LESS
63974: IFFALSE 63991
// time := time * - 1 ;
63976: LD_ADDR_VAR 0 8
63980: PUSH
63981: LD_VAR 0 8
63985: PUSH
63986: LD_INT 1
63988: NEG
63989: MUL
63990: ST_TO_ADDR
// wait ( time ) ;
63991: LD_VAR 0 8
63995: PPUSH
63996: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64000: LD_INT 35
64002: PPUSH
64003: LD_INT 875
64005: PPUSH
64006: CALL_OW 12
64010: PPUSH
64011: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64015: LD_INT 1
64017: PPUSH
64018: LD_INT 5
64020: PPUSH
64021: CALL_OW 12
64025: PPUSH
64026: LD_VAR 0 1
64030: PPUSH
64031: LD_INT 1
64033: PPUSH
64034: CALL_OW 55
// end ;
64038: GO 63848
// end ;
64040: LD_VAR 0 5
64044: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64045: LD_INT 0
64047: PPUSH
64048: PPUSH
64049: PPUSH
64050: PPUSH
64051: PPUSH
64052: PPUSH
64053: PPUSH
64054: PPUSH
// if not turrets or not factories then
64055: LD_VAR 0 1
64059: NOT
64060: PUSH
64061: LD_VAR 0 2
64065: NOT
64066: OR
64067: IFFALSE 64071
// exit ;
64069: GO 64378
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64071: LD_ADDR_VAR 0 10
64075: PUSH
64076: LD_INT 5
64078: PUSH
64079: LD_INT 6
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 4
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 3
64098: PUSH
64099: LD_INT 5
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 24
64113: PUSH
64114: LD_INT 25
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 23
64123: PUSH
64124: LD_INT 27
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 42
64137: PUSH
64138: LD_INT 43
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 44
64147: PUSH
64148: LD_INT 46
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 45
64157: PUSH
64158: LD_INT 47
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: LIST
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// result := [ ] ;
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: EMPTY
64181: ST_TO_ADDR
// for i in turrets do
64182: LD_ADDR_VAR 0 4
64186: PUSH
64187: LD_VAR 0 1
64191: PUSH
64192: FOR_IN
64193: IFFALSE 64376
// begin nat := GetNation ( i ) ;
64195: LD_ADDR_VAR 0 7
64199: PUSH
64200: LD_VAR 0 4
64204: PPUSH
64205: CALL_OW 248
64209: ST_TO_ADDR
// weapon := 0 ;
64210: LD_ADDR_VAR 0 8
64214: PUSH
64215: LD_INT 0
64217: ST_TO_ADDR
// if not nat then
64218: LD_VAR 0 7
64222: NOT
64223: IFFALSE 64227
// continue ;
64225: GO 64192
// for j in list [ nat ] do
64227: LD_ADDR_VAR 0 5
64231: PUSH
64232: LD_VAR 0 10
64236: PUSH
64237: LD_VAR 0 7
64241: ARRAY
64242: PUSH
64243: FOR_IN
64244: IFFALSE 64285
// if GetBWeapon ( i ) = j [ 1 ] then
64246: LD_VAR 0 4
64250: PPUSH
64251: CALL_OW 269
64255: PUSH
64256: LD_VAR 0 5
64260: PUSH
64261: LD_INT 1
64263: ARRAY
64264: EQUAL
64265: IFFALSE 64283
// begin weapon := j [ 2 ] ;
64267: LD_ADDR_VAR 0 8
64271: PUSH
64272: LD_VAR 0 5
64276: PUSH
64277: LD_INT 2
64279: ARRAY
64280: ST_TO_ADDR
// break ;
64281: GO 64285
// end ;
64283: GO 64243
64285: POP
64286: POP
// if not weapon then
64287: LD_VAR 0 8
64291: NOT
64292: IFFALSE 64296
// continue ;
64294: GO 64192
// for k in factories do
64296: LD_ADDR_VAR 0 6
64300: PUSH
64301: LD_VAR 0 2
64305: PUSH
64306: FOR_IN
64307: IFFALSE 64372
// begin weapons := AvailableWeaponList ( k ) ;
64309: LD_ADDR_VAR 0 9
64313: PUSH
64314: LD_VAR 0 6
64318: PPUSH
64319: CALL_OW 478
64323: ST_TO_ADDR
// if not weapons then
64324: LD_VAR 0 9
64328: NOT
64329: IFFALSE 64333
// continue ;
64331: GO 64306
// if weapon in weapons then
64333: LD_VAR 0 8
64337: PUSH
64338: LD_VAR 0 9
64342: IN
64343: IFFALSE 64370
// begin result := [ i , weapon ] ;
64345: LD_ADDR_VAR 0 3
64349: PUSH
64350: LD_VAR 0 4
64354: PUSH
64355: LD_VAR 0 8
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: ST_TO_ADDR
// exit ;
64364: POP
64365: POP
64366: POP
64367: POP
64368: GO 64378
// end ; end ;
64370: GO 64306
64372: POP
64373: POP
// end ;
64374: GO 64192
64376: POP
64377: POP
// end ;
64378: LD_VAR 0 3
64382: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64383: LD_INT 0
64385: PPUSH
// if not side or side > 8 then
64386: LD_VAR 0 3
64390: NOT
64391: PUSH
64392: LD_VAR 0 3
64396: PUSH
64397: LD_INT 8
64399: GREATER
64400: OR
64401: IFFALSE 64405
// exit ;
64403: GO 64464
// if not range then
64405: LD_VAR 0 4
64409: NOT
64410: IFFALSE 64421
// range := - 12 ;
64412: LD_ADDR_VAR 0 4
64416: PUSH
64417: LD_INT 12
64419: NEG
64420: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_VAR 0 2
64430: PPUSH
64431: LD_VAR 0 3
64435: PPUSH
64436: LD_VAR 0 4
64440: PPUSH
64441: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64445: LD_VAR 0 1
64449: PPUSH
64450: LD_VAR 0 2
64454: PPUSH
64455: LD_VAR 0 3
64459: PPUSH
64460: CALL_OW 331
// end ;
64464: LD_VAR 0 5
64468: RET
// export function Video ( mode ) ; begin
64469: LD_INT 0
64471: PPUSH
// ingame_video = mode ;
64472: LD_ADDR_OWVAR 52
64476: PUSH
64477: LD_VAR 0 1
64481: ST_TO_ADDR
// interface_hidden = mode ;
64482: LD_ADDR_OWVAR 54
64486: PUSH
64487: LD_VAR 0 1
64491: ST_TO_ADDR
// end ;
64492: LD_VAR 0 2
64496: RET
// export function Join ( array , element ) ; begin
64497: LD_INT 0
64499: PPUSH
// result := array ^ element ;
64500: LD_ADDR_VAR 0 3
64504: PUSH
64505: LD_VAR 0 1
64509: PUSH
64510: LD_VAR 0 2
64514: ADD
64515: ST_TO_ADDR
// end ;
64516: LD_VAR 0 3
64520: RET
// export function JoinUnion ( array , element ) ; begin
64521: LD_INT 0
64523: PPUSH
// result := array union element ;
64524: LD_ADDR_VAR 0 3
64528: PUSH
64529: LD_VAR 0 1
64533: PUSH
64534: LD_VAR 0 2
64538: UNION
64539: ST_TO_ADDR
// end ;
64540: LD_VAR 0 3
64544: RET
// export function GetBehemoths ( side ) ; begin
64545: LD_INT 0
64547: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
64548: LD_ADDR_VAR 0 2
64552: PUSH
64553: LD_INT 22
64555: PUSH
64556: LD_VAR 0 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 31
64567: PUSH
64568: LD_INT 25
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PPUSH
64579: CALL_OW 69
64583: ST_TO_ADDR
// end ;
64584: LD_VAR 0 2
64588: RET
// export function Shuffle ( array ) ; var i , index ; begin
64589: LD_INT 0
64591: PPUSH
64592: PPUSH
64593: PPUSH
// result := [ ] ;
64594: LD_ADDR_VAR 0 2
64598: PUSH
64599: EMPTY
64600: ST_TO_ADDR
// if not array then
64601: LD_VAR 0 1
64605: NOT
64606: IFFALSE 64610
// exit ;
64608: GO 64709
// Randomize ;
64610: CALL_OW 10
// for i = array downto 1 do
64614: LD_ADDR_VAR 0 3
64618: PUSH
64619: DOUBLE
64620: LD_VAR 0 1
64624: INC
64625: ST_TO_ADDR
64626: LD_INT 1
64628: PUSH
64629: FOR_DOWNTO
64630: IFFALSE 64707
// begin index := rand ( 1 , array ) ;
64632: LD_ADDR_VAR 0 4
64636: PUSH
64637: LD_INT 1
64639: PPUSH
64640: LD_VAR 0 1
64644: PPUSH
64645: CALL_OW 12
64649: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64650: LD_ADDR_VAR 0 2
64654: PUSH
64655: LD_VAR 0 2
64659: PPUSH
64660: LD_VAR 0 2
64664: PUSH
64665: LD_INT 1
64667: PLUS
64668: PPUSH
64669: LD_VAR 0 1
64673: PUSH
64674: LD_VAR 0 4
64678: ARRAY
64679: PPUSH
64680: CALL_OW 2
64684: ST_TO_ADDR
// array := Delete ( array , index ) ;
64685: LD_ADDR_VAR 0 1
64689: PUSH
64690: LD_VAR 0 1
64694: PPUSH
64695: LD_VAR 0 4
64699: PPUSH
64700: CALL_OW 3
64704: ST_TO_ADDR
// end ;
64705: GO 64629
64707: POP
64708: POP
// end ;
64709: LD_VAR 0 2
64713: RET
// export function GetBaseMaterials ( base ) ; begin
64714: LD_INT 0
64716: PPUSH
// result := [ 0 , 0 , 0 ] ;
64717: LD_ADDR_VAR 0 2
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// if not base then
64736: LD_VAR 0 1
64740: NOT
64741: IFFALSE 64745
// exit ;
64743: GO 64794
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64745: LD_ADDR_VAR 0 2
64749: PUSH
64750: LD_VAR 0 1
64754: PPUSH
64755: LD_INT 1
64757: PPUSH
64758: CALL_OW 275
64762: PUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: LD_INT 2
64770: PPUSH
64771: CALL_OW 275
64775: PUSH
64776: LD_VAR 0 1
64780: PPUSH
64781: LD_INT 3
64783: PPUSH
64784: CALL_OW 275
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: ST_TO_ADDR
// end ;
64794: LD_VAR 0 2
64798: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64799: LD_INT 0
64801: PPUSH
64802: PPUSH
// result := array ;
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: LD_VAR 0 1
64812: ST_TO_ADDR
// if size > 0 then
64813: LD_VAR 0 2
64817: PUSH
64818: LD_INT 0
64820: GREATER
64821: IFFALSE 64867
// for i := array downto size do
64823: LD_ADDR_VAR 0 4
64827: PUSH
64828: DOUBLE
64829: LD_VAR 0 1
64833: INC
64834: ST_TO_ADDR
64835: LD_VAR 0 2
64839: PUSH
64840: FOR_DOWNTO
64841: IFFALSE 64865
// result := Delete ( result , result ) ;
64843: LD_ADDR_VAR 0 3
64847: PUSH
64848: LD_VAR 0 3
64852: PPUSH
64853: LD_VAR 0 3
64857: PPUSH
64858: CALL_OW 3
64862: ST_TO_ADDR
64863: GO 64840
64865: POP
64866: POP
// end ;
64867: LD_VAR 0 3
64871: RET
// export function ComExit ( unit ) ; var tmp ; begin
64872: LD_INT 0
64874: PPUSH
64875: PPUSH
// if not IsInUnit ( unit ) then
64876: LD_VAR 0 1
64880: PPUSH
64881: CALL_OW 310
64885: NOT
64886: IFFALSE 64890
// exit ;
64888: GO 64950
// tmp := IsInUnit ( unit ) ;
64890: LD_ADDR_VAR 0 3
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 310
64904: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64905: LD_VAR 0 3
64909: PPUSH
64910: CALL_OW 247
64914: PUSH
64915: LD_INT 2
64917: EQUAL
64918: IFFALSE 64931
// ComExitVehicle ( unit ) else
64920: LD_VAR 0 1
64924: PPUSH
64925: CALL_OW 121
64929: GO 64940
// ComExitBuilding ( unit ) ;
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 122
// result := tmp ;
64940: LD_ADDR_VAR 0 2
64944: PUSH
64945: LD_VAR 0 3
64949: ST_TO_ADDR
// end ;
64950: LD_VAR 0 2
64954: RET
// export function ResetHc ; begin
64955: LD_INT 0
64957: PPUSH
// InitHc ;
64958: CALL_OW 19
// hc_importance := 0 ;
64962: LD_ADDR_OWVAR 32
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
// end ;
64970: LD_VAR 0 1
64974: RET
