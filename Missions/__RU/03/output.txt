// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 69 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 5 , 4 , 5 , 4 , 2 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 5
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 4
  26: PPUSH
  27: LD_INT 2
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 3
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 40346 0 9
// if debug then
  43: LD_EXP 1
  47: IFFALSE 56
// FogOff ( 3 ) ;
  49: LD_INT 3
  51: PPUSH
  52: CALL_OW 344
// PrepareOmikron ;
  56: CALL 2364 0 0
// PrepareRussians ;
  60: CALL 225 0 0
// MissionIntro ;
  64: CALL 5216 0 0
// end ;
  68: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export meetBelkovBrother , cratesResources , oilResources , vehiclesPreviousMission , kurinOpinion , platonovOpinion , vehiclesToSave ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinVehNeeded ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; export VehNeeded ; export OmiRunB ; export kaganek ; export enemySkillLevel ; function Init ; begin
  69: LD_INT 0
  71: PPUSH
// debug := true ;
  72: LD_ADDR_EXP 1
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// prevMissionPrefix := 02_ ;
  80: LD_ADDR_EXP 2
  84: PUSH
  85: LD_STRING 02_
  87: ST_TO_ADDR
// currentMissionPrefix := 03_ ;
  88: LD_ADDR_EXP 3
  92: PUSH
  93: LD_STRING 03_
  95: ST_TO_ADDR
// counterIndex := 1 ;
  96: LD_ADDR_EXP 78
 100: PUSH
 101: LD_INT 1
 103: ST_TO_ADDR
// KurinVehNeeded := [ 1 , 2 , 3 , 4 ] [ Difficulty ] ;
 104: LD_ADDR_EXP 32
 108: PUSH
 109: LD_INT 1
 111: PUSH
 112: LD_INT 2
 114: PUSH
 115: LD_INT 3
 117: PUSH
 118: LD_INT 4
 120: PUSH
 121: EMPTY
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: PUSH
 127: LD_OWVAR 67
 131: ARRAY
 132: ST_TO_ADDR
// timeToPrepareAttack := [ 50 50$00 , 40 40$00 , 30 30$00 , 30 30$00 ] [ Difficulty ] ;
 133: LD_ADDR_EXP 81
 137: PUSH
 138: LD_INT 105000
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 63000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: LIST
 155: PUSH
 156: LD_OWVAR 67
 160: ARRAY
 161: ST_TO_ADDR
// timeToArabAttack := [ 80 80$00 , 70 70$00 , 60 60$00 , 50 50$00 ] [ Difficulty ] ;
 162: LD_ADDR_EXP 82
 166: PUSH
 167: LD_INT 168000
 169: PUSH
 170: LD_INT 147000
 172: PUSH
 173: LD_INT 126000
 175: PUSH
 176: LD_INT 105000
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: PUSH
 185: LD_OWVAR 67
 189: ARRAY
 190: ST_TO_ADDR
// enemySkillLevel = [ 2 , 3 , 4 , 5 ] [ Difficulty ] ;
 191: LD_ADDR_EXP 40
 195: PUSH
 196: LD_INT 2
 198: PUSH
 199: LD_INT 3
 201: PUSH
 202: LD_INT 4
 204: PUSH
 205: LD_INT 5
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: LIST
 212: LIST
 213: PUSH
 214: LD_OWVAR 67
 218: ARRAY
 219: ST_TO_ADDR
// end ; end_of_file
 220: LD_VAR 0 1
 224: RET
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Benko , Kuklajs ; export Scholtze ; export otherBeriaUnits , beriaBase , beriaDepot , beriaVehs ; export Kurin , Popov ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export Grishko , Gaydar , Bukov ; export burlakTeam , kirovBarracks ; export function PrepareRussians ; var un ; begin
 225: LD_INT 0
 227: PPUSH
 228: PPUSH
// PrepareHeroes ;
 229: CALL 246 0 0
// PrepareBeriaBase ;
 233: CALL 949 0 0
// PrepareKirovBase ;
 237: CALL 1312 0 0
// end ;
 241: LD_VAR 0 1
 245: RET
// function PrepareHeroes ; var un ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
// uc_side := 6 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 6
 257: ST_TO_ADDR
// otherBeriaUnits := CreateCharacterSet ( 02_burlakTeam ) ;
 258: LD_ADDR_EXP 50
 262: PUSH
 263: LD_STRING 02_burlakTeam
 265: PPUSH
 266: CALL_OW 31
 270: ST_TO_ADDR
// uc_side := 3 ;
 271: LD_ADDR_OWVAR 20
 275: PUSH
 276: LD_INT 3
 278: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
 279: LD_ADDR_EXP 41
 283: PUSH
 284: LD_STRING Burlak
 286: PPUSH
 287: LD_EXP 1
 291: NOT
 292: PPUSH
 293: LD_EXP 2
 297: PPUSH
 298: CALL 6983 0 3
 302: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
 303: LD_ADDR_EXP 42
 307: PUSH
 308: LD_STRING Gnyevko
 310: PPUSH
 311: LD_EXP 1
 315: NOT
 316: PPUSH
 317: LD_EXP 2
 321: PPUSH
 322: CALL 6983 0 3
 326: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , ( not debug ) , prevMissionPrefix ) ;
 327: LD_ADDR_EXP 44
 331: PUSH
 332: LD_STRING Kovalyuk
 334: PPUSH
 335: LD_EXP 1
 339: NOT
 340: PPUSH
 341: LD_EXP 2
 345: PPUSH
 346: CALL 6983 0 3
 350: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
 351: LD_ADDR_EXP 43
 355: PUSH
 356: LD_STRING Kirilenkova
 358: PPUSH
 359: LD_EXP 1
 363: NOT
 364: PPUSH
 365: LD_EXP 2
 369: PPUSH
 370: CALL 6983 0 3
 374: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
 375: LD_ADDR_EXP 45
 379: PUSH
 380: LD_STRING Belkov
 382: PPUSH
 383: LD_EXP 1
 387: NOT
 388: PPUSH
 389: LD_EXP 2
 393: PPUSH
 394: CALL 6983 0 3
 398: ST_TO_ADDR
// Benko := PrepareUnit ( Benko , ( not debug ) , prevMissionPrefix ) ;
 399: LD_ADDR_EXP 47
 403: PUSH
 404: LD_STRING Benko
 406: PPUSH
 407: LD_EXP 1
 411: NOT
 412: PPUSH
 413: LD_EXP 2
 417: PPUSH
 418: CALL 6983 0 3
 422: ST_TO_ADDR
// Kuklajs := PrepareUnit ( Kuklajs , ( not debug ) , prevMissionPrefix ) ;
 423: LD_ADDR_EXP 48
 427: PUSH
 428: LD_STRING Kuklajs
 430: PPUSH
 431: LD_EXP 1
 435: NOT
 436: PPUSH
 437: LD_EXP 2
 441: PPUSH
 442: CALL 6983 0 3
 446: ST_TO_ADDR
// uc_side := 6 ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_INT 6
 454: ST_TO_ADDR
// Kurin := NewCharacter ( Kurin ) ;
 455: LD_ADDR_EXP 54
 459: PUSH
 460: LD_STRING Kurin
 462: PPUSH
 463: CALL_OW 25
 467: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
 468: LD_ADDR_EXP 55
 472: PUSH
 473: LD_STRING Popov
 475: PPUSH
 476: CALL_OW 25
 480: ST_TO_ADDR
// Grishko := NewCharacter ( Grishko ) ;
 481: LD_ADDR_EXP 60
 485: PUSH
 486: LD_STRING Grishko
 488: PPUSH
 489: CALL_OW 25
 493: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
 494: LD_ADDR_EXP 61
 498: PUSH
 499: LD_STRING Gaydar
 501: PPUSH
 502: CALL_OW 25
 506: ST_TO_ADDR
// Bukov := NewCharacter ( Bukov ) ;
 507: LD_ADDR_EXP 62
 511: PUSH
 512: LD_STRING Bukov
 514: PPUSH
 515: CALL_OW 25
 519: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
 520: LD_EXP 41
 524: PUSH
 525: LD_EXP 42
 529: PUSH
 530: LD_EXP 44
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
 547: LD_EXP 43
 551: PPUSH
 552: LD_INT 4
 554: PPUSH
 555: CALL_OW 336
// PlaceUnitXY ( Kurin , 153 , 103 , false ) ;
 559: LD_EXP 54
 563: PPUSH
 564: LD_INT 153
 566: PPUSH
 567: LD_INT 103
 569: PPUSH
 570: LD_INT 0
 572: PPUSH
 573: CALL_OW 48
// AddComHold ( Kurin ) ;
 577: LD_EXP 54
 581: PPUSH
 582: CALL_OW 200
// AddComTurnXY ( Kurin , 155 , 106 ) ;
 586: LD_EXP 54
 590: PPUSH
 591: LD_INT 155
 593: PPUSH
 594: LD_INT 106
 596: PPUSH
 597: CALL_OW 178
// PlaceUnitXY ( Popov , 131 , 49 , false ) ;
 601: LD_EXP 55
 605: PPUSH
 606: LD_INT 131
 608: PPUSH
 609: LD_INT 49
 611: PPUSH
 612: LD_INT 0
 614: PPUSH
 615: CALL_OW 48
// AddComHold ( Popov ) ;
 619: LD_EXP 55
 623: PPUSH
 624: CALL_OW 200
// AddComTurnXY ( Popov , 131 , 31 ) ;
 628: LD_EXP 55
 632: PPUSH
 633: LD_INT 131
 635: PPUSH
 636: LD_INT 31
 638: PPUSH
 639: CALL_OW 178
// PlaceUnitXY ( Gaydar , 91 , 15 , false ) ;
 643: LD_EXP 61
 647: PPUSH
 648: LD_INT 91
 650: PPUSH
 651: LD_INT 15
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL_OW 48
// AddComHold ( Gaydar ) ;
 661: LD_EXP 61
 665: PPUSH
 666: CALL_OW 200
// AddComTurnXY ( Gaydar , 131 , 31 ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 131
 677: PPUSH
 678: LD_INT 31
 680: PPUSH
 681: CALL_OW 178
// PlaceUnitXY ( Bukov , 86 , 17 , false ) ;
 685: LD_EXP 62
 689: PPUSH
 690: LD_INT 86
 692: PPUSH
 693: LD_INT 17
 695: PPUSH
 696: LD_INT 0
 698: PPUSH
 699: CALL_OW 48
// AddComHold ( Bukov ) ;
 703: LD_EXP 62
 707: PPUSH
 708: CALL_OW 200
// AddComTurnXY ( Bukov , 94 , 32 ) ;
 712: LD_EXP 62
 716: PPUSH
 717: LD_INT 94
 719: PPUSH
 720: LD_INT 32
 722: PPUSH
 723: CALL_OW 178
// PlaceUnitXY ( Belkov , 155 , 106 , false ) ;
 727: LD_EXP 45
 731: PPUSH
 732: LD_INT 155
 734: PPUSH
 735: LD_INT 106
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 48
// AddComHold ( Belkov ) ;
 745: LD_EXP 45
 749: PPUSH
 750: CALL_OW 200
// AddComTurnUnit ( Belkov , Kurin ) ;
 754: LD_EXP 45
 758: PPUSH
 759: LD_EXP 54
 763: PPUSH
 764: CALL_OW 179
// PlaceUnitXY ( Burlak , 154 , 106 , false ) ;
 768: LD_EXP 41
 772: PPUSH
 773: LD_INT 154
 775: PPUSH
 776: LD_INT 106
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 48
// AddComHold ( Burlak ) ;
 786: LD_EXP 41
 790: PPUSH
 791: CALL_OW 200
// AddComTurnUnit ( Burlak , Kurin ) ;
 795: LD_EXP 41
 799: PPUSH
 800: LD_EXP 54
 804: PPUSH
 805: CALL_OW 179
// burlakTeam := [ Gnyevko , Kovalyuk , Kirilenkova ] ;
 809: LD_ADDR_EXP 63
 813: PUSH
 814: LD_EXP 42
 818: PUSH
 819: LD_EXP 44
 823: PUSH
 824: LD_EXP 43
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// for un in otherBeriaUnits do
 834: LD_ADDR_VAR 0 2
 838: PUSH
 839: LD_EXP 50
 843: PUSH
 844: FOR_IN
 845: IFFALSE 887
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 847: LD_VAR 0 2
 851: PPUSH
 852: LD_INT 4
 854: PPUSH
 855: LD_INT 0
 857: PPUSH
 858: CALL_OW 49
// AddComHold ( un ) ;
 862: LD_VAR 0 2
 866: PPUSH
 867: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 871: LD_VAR 0 2
 875: PPUSH
 876: LD_EXP 54
 880: PPUSH
 881: CALL_OW 179
// end ;
 885: GO 844
 887: POP
 888: POP
// for un in BurlakTeam do
 889: LD_ADDR_VAR 0 2
 893: PUSH
 894: LD_EXP 63
 898: PUSH
 899: FOR_IN
 900: IFFALSE 942
// begin PlaceUnitArea ( un , kirovSpawn , false ) ;
 902: LD_VAR 0 2
 906: PPUSH
 907: LD_INT 4
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 49
// AddComHold ( un ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: CALL_OW 200
// AddComTurnUnit ( un , Kurin ) ;
 926: LD_VAR 0 2
 930: PPUSH
 931: LD_EXP 54
 935: PPUSH
 936: CALL_OW 179
// end ;
 940: GO 899
 942: POP
 943: POP
// end ;
 944: LD_VAR 0 1
 948: RET
// export function PrepareBeriaBase ; var i , veh , bonusResources , beriaDepot ; begin
 949: LD_INT 0
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
// beriaBase := LoadVariable ( 02_Beria , [ ] ) ;
 956: LD_ADDR_EXP 51
 960: PUSH
 961: LD_STRING 02_Beria
 963: PPUSH
 964: EMPTY
 965: PPUSH
 966: CALL_OW 30
 970: ST_TO_ADDR
// beriaVehs := LoadVariable ( 02_VehiclesCount , [ ] ) ;
 971: LD_ADDR_EXP 53
 975: PUSH
 976: LD_STRING 02_VehiclesCount
 978: PPUSH
 979: EMPTY
 980: PPUSH
 981: CALL_OW 30
 985: ST_TO_ADDR
// uc_side := 3 ;
 986: LD_ADDR_OWVAR 20
 990: PUSH
 991: LD_INT 3
 993: ST_TO_ADDR
// uc_nation := 3 ;
 994: LD_ADDR_OWVAR 21
 998: PUSH
 999: LD_INT 3
1001: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
1002: LD_ADDR_OWVAR 37
1006: PUSH
1007: LD_INT 21
1009: ST_TO_ADDR
// vc_control = control_manual ;
1010: LD_ADDR_OWVAR 38
1014: PUSH
1015: LD_INT 1
1017: ST_TO_ADDR
// vc_engine = engine_combustion ;
1018: LD_ADDR_OWVAR 39
1022: PUSH
1023: LD_INT 1
1025: ST_TO_ADDR
// vc_weapon = ru_heavy_machine_gun ;
1026: LD_ADDR_OWVAR 40
1030: PUSH
1031: LD_INT 42
1033: ST_TO_ADDR
// for i := 1 to beriaBase do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_EXP 51
1048: PUSH
1049: FOR_TO
1050: IFFALSE 1173
// begin bc_type := beriaBase [ i ] [ 1 ] ;
1052: LD_ADDR_OWVAR 42
1056: PUSH
1057: LD_EXP 51
1061: PUSH
1062: LD_VAR 0 2
1066: ARRAY
1067: PUSH
1068: LD_INT 1
1070: ARRAY
1071: ST_TO_ADDR
// bc_level := beriaBase [ i ] [ 2 ] ;
1072: LD_ADDR_OWVAR 43
1076: PUSH
1077: LD_EXP 51
1081: PUSH
1082: LD_VAR 0 2
1086: ARRAY
1087: PUSH
1088: LD_INT 2
1090: ARRAY
1091: ST_TO_ADDR
// if bc_type = b_lab then
1092: LD_OWVAR 42
1096: PUSH
1097: LD_INT 6
1099: EQUAL
1100: IFFALSE 1118
// begin bc_kind1 := b_lab_basic ;
1102: LD_ADDR_OWVAR 44
1106: PUSH
1107: LD_INT 9
1109: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
1110: LD_ADDR_OWVAR 45
1114: PUSH
1115: LD_INT 9
1117: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 3 ] + 46 , beriaBase [ i ] [ 4 ] , beriaBase [ i ] [ 5 ] ) ;
1118: LD_EXP 51
1122: PUSH
1123: LD_VAR 0 2
1127: ARRAY
1128: PUSH
1129: LD_INT 3
1131: ARRAY
1132: PUSH
1133: LD_INT 46
1135: PLUS
1136: PPUSH
1137: LD_EXP 51
1141: PUSH
1142: LD_VAR 0 2
1146: ARRAY
1147: PUSH
1148: LD_INT 4
1150: ARRAY
1151: PPUSH
1152: LD_EXP 51
1156: PUSH
1157: LD_VAR 0 2
1161: ARRAY
1162: PUSH
1163: LD_INT 5
1165: ARRAY
1166: PPUSH
1167: CALL_OW 47
// end ;
1171: GO 1049
1173: POP
1174: POP
// for i := 1 to beriaVehs do
1175: LD_ADDR_VAR 0 2
1179: PUSH
1180: DOUBLE
1181: LD_INT 1
1183: DEC
1184: ST_TO_ADDR
1185: LD_EXP 53
1189: PUSH
1190: FOR_TO
1191: IFFALSE 1255
// begin vc_fuel_battery = [ 20 , 35 , 50 , 80 ] [ Rand ( 1 , 4 ) ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_INT 20
1200: PUSH
1201: LD_INT 35
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_INT 4
1221: PPUSH
1222: CALL_OW 12
1226: ARRAY
1227: ST_TO_ADDR
// veh = CreateVehicle ;
1228: LD_ADDR_VAR 0 3
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( veh , beriaBaseArea , false ) ;
1238: LD_VAR 0 3
1242: PPUSH
1243: LD_INT 11
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end ;
1253: GO 1190
1255: POP
1256: POP
// beriaDepot := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1257: LD_ADDR_VAR 0 5
1261: PUSH
1262: LD_INT 22
1264: PUSH
1265: LD_INT 3
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PUSH
1272: LD_INT 30
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 1
1293: ARRAY
1294: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1295: LD_VAR 0 5
1299: PPUSH
1300: LD_STRING beria
1302: PPUSH
1303: CALL_OW 500
// end ;
1307: LD_VAR 0 1
1311: RET
// export function PrepareKirovBase ; var i , tmp , buildings , x , b , bonusResources , kirovDepot ; begin
1312: LD_INT 0
1314: PPUSH
1315: PPUSH
1316: PPUSH
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// kirovBase := LoadVariable ( 02_Kirov , [ ] ) ;
1322: LD_ADDR_EXP 57
1326: PUSH
1327: LD_STRING 02_Kirov
1329: PPUSH
1330: EMPTY
1331: PPUSH
1332: CALL_OW 30
1336: ST_TO_ADDR
// uc_side := 6 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 6
1344: ST_TO_ADDR
// uc_nation := 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// otherKirovUnits := CreateCharacterSet ( 02_kirovTeam ) ;
1353: LD_ADDR_EXP 56
1357: PUSH
1358: LD_STRING 02_kirovTeam
1360: PPUSH
1361: CALL_OW 31
1365: ST_TO_ADDR
// for i := 1 to kirovBase do
1366: LD_ADDR_VAR 0 2
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 57
1380: PUSH
1381: FOR_TO
1382: IFFALSE 1531
// begin bc_type := kirovBase [ i ] [ 1 ] ;
1384: LD_ADDR_OWVAR 42
1388: PUSH
1389: LD_EXP 57
1393: PUSH
1394: LD_VAR 0 2
1398: ARRAY
1399: PUSH
1400: LD_INT 1
1402: ARRAY
1403: ST_TO_ADDR
// bc_level := kirovBase [ i ] [ 2 ] ;
1404: LD_ADDR_OWVAR 43
1408: PUSH
1409: LD_EXP 57
1413: PUSH
1414: LD_VAR 0 2
1418: ARRAY
1419: PUSH
1420: LD_INT 2
1422: ARRAY
1423: ST_TO_ADDR
// x := kirovBase [ i ] [ 3 ] + 46 ;
1424: LD_ADDR_VAR 0 5
1428: PUSH
1429: LD_EXP 57
1433: PUSH
1434: LD_VAR 0 2
1438: ARRAY
1439: PUSH
1440: LD_INT 3
1442: ARRAY
1443: PUSH
1444: LD_INT 46
1446: PLUS
1447: ST_TO_ADDR
// if x < 140 then
1448: LD_VAR 0 5
1452: PUSH
1453: LD_INT 140
1455: LESS
1456: IFFALSE 1468
// uc_side := 3 else
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 3
1465: ST_TO_ADDR
1466: GO 1476
// uc_side := 6 ;
1468: LD_ADDR_OWVAR 20
1472: PUSH
1473: LD_INT 6
1475: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 3 ] + 46 , kirovBase [ i ] [ 4 ] , kirovBase [ i ] [ 5 ] ) ;
1476: LD_EXP 57
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PUSH
1487: LD_INT 3
1489: ARRAY
1490: PUSH
1491: LD_INT 46
1493: PLUS
1494: PPUSH
1495: LD_EXP 57
1499: PUSH
1500: LD_VAR 0 2
1504: ARRAY
1505: PUSH
1506: LD_INT 4
1508: ARRAY
1509: PPUSH
1510: LD_EXP 57
1514: PUSH
1515: LD_VAR 0 2
1519: ARRAY
1520: PUSH
1521: LD_INT 5
1523: ARRAY
1524: PPUSH
1525: CALL_OW 47
// end ;
1529: GO 1381
1531: POP
1532: POP
// kirovDepot := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1533: LD_ADDR_VAR 0 8
1537: PUSH
1538: LD_INT 22
1540: PUSH
1541: LD_INT 6
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PPUSH
1562: CALL_OW 69
1566: PUSH
1567: LD_INT 1
1569: ARRAY
1570: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
1571: LD_VAR 0 8
1575: PPUSH
1576: LD_STRING kirov
1578: PPUSH
1579: CALL_OW 500
// for i := 1 to 2 do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_INT 2
1595: PUSH
1596: FOR_TO
1597: IFFALSE 1623
// SetResourceType ( GetBase ( kirovDepot ) , i , 500 ) ;
1599: LD_VAR 0 8
1603: PPUSH
1604: CALL_OW 274
1608: PPUSH
1609: LD_VAR 0 2
1613: PPUSH
1614: LD_INT 500
1616: PPUSH
1617: CALL_OW 277
1621: GO 1596
1623: POP
1624: POP
// tmp := otherKirovUnits ;
1625: LD_ADDR_VAR 0 3
1629: PUSH
1630: LD_EXP 56
1634: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_breastwork ] ] ] ) ;
1635: LD_ADDR_VAR 0 4
1639: PUSH
1640: LD_INT 22
1642: PUSH
1643: LD_INT 6
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 21
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 30
1665: PUSH
1666: LD_INT 31
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: PPUSH
1682: CALL_OW 69
1686: ST_TO_ADDR
// repeat b := buildings [ 1 ] ;
1687: LD_ADDR_VAR 0 6
1691: PUSH
1692: LD_VAR 0 4
1696: PUSH
1697: LD_INT 1
1699: ARRAY
1700: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 1 ] , b ) ;
1701: LD_VAR 0 3
1705: PUSH
1706: LD_INT 1
1708: ARRAY
1709: PPUSH
1710: LD_VAR 0 6
1714: PPUSH
1715: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
1719: LD_ADDR_VAR 0 3
1723: PUSH
1724: LD_VAR 0 3
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: CALL_OW 3
1736: ST_TO_ADDR
// if UnitsInside ( b ) = 3 then
1737: LD_VAR 0 6
1741: PPUSH
1742: CALL_OW 313
1746: PUSH
1747: LD_INT 3
1749: EQUAL
1750: IFFALSE 1770
// buildings := Delete ( buildings , 1 ) ;
1752: LD_ADDR_VAR 0 4
1756: PUSH
1757: LD_VAR 0 4
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: CALL_OW 3
1769: ST_TO_ADDR
// until not buildings or not tmp ;
1770: LD_VAR 0 4
1774: NOT
1775: PUSH
1776: LD_VAR 0 3
1780: NOT
1781: OR
1782: IFFALSE 1687
// if tmp then
1784: LD_VAR 0 3
1788: IFFALSE 1828
// begin for i in tmp do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_VAR 0 3
1799: PUSH
1800: FOR_IN
1801: IFFALSE 1826
// PlaceUnitXYR ( i , 164 , 109 , 4 , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 164
1810: PPUSH
1811: LD_INT 109
1813: PPUSH
1814: LD_INT 4
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 50
1824: GO 1800
1826: POP
1827: POP
// end ; end ;
1828: LD_VAR 0 1
1832: RET
// export function UpgradeKirovBase ; var i , kirovEngs , kirovBuildingArray ; begin
1833: LD_INT 0
1835: PPUSH
1836: PPUSH
1837: PPUSH
1838: PPUSH
// kirovBuildingArray := [ [ b_bunker , 146 , 106 , 1 ] , [ b_bunker , 175 , 123 , 5 ] , [ b_bunker , 170 , 101 , 3 ] , [ b_bunker , 172 , 104 , 4 ] , [ b_bunker , 179 , 118 , 4 ] , [ b_oil_power , 159 , 96 , 3 ] ] ;
1839: LD_ADDR_VAR 0 4
1843: PUSH
1844: LD_INT 32
1846: PUSH
1847: LD_INT 146
1849: PUSH
1850: LD_INT 106
1852: PUSH
1853: LD_INT 1
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 32
1864: PUSH
1865: LD_INT 175
1867: PUSH
1868: LD_INT 123
1870: PUSH
1871: LD_INT 5
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 32
1882: PUSH
1883: LD_INT 170
1885: PUSH
1886: LD_INT 101
1888: PUSH
1889: LD_INT 3
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 32
1900: PUSH
1901: LD_INT 172
1903: PUSH
1904: LD_INT 104
1906: PUSH
1907: LD_INT 4
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: PUSH
1916: LD_INT 32
1918: PUSH
1919: LD_INT 179
1921: PUSH
1922: LD_INT 118
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 26
1936: PUSH
1937: LD_INT 159
1939: PUSH
1940: LD_INT 96
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// kirovEngs := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
1960: LD_ADDR_VAR 0 3
1964: PUSH
1965: LD_INT 22
1967: PUSH
1968: LD_INT 6
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 21
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: PUSH
1985: LD_INT 25
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: PPUSH
2000: CALL_OW 69
2004: ST_TO_ADDR
// for i in kirovBuildingArray do
2005: LD_ADDR_VAR 0 2
2009: PUSH
2010: LD_VAR 0 4
2014: PUSH
2015: FOR_IN
2016: IFFALSE 2065
// AddComBuild ( kirovEngs , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2018: LD_VAR 0 3
2022: PPUSH
2023: LD_VAR 0 2
2027: PUSH
2028: LD_INT 1
2030: ARRAY
2031: PPUSH
2032: LD_VAR 0 2
2036: PUSH
2037: LD_INT 2
2039: ARRAY
2040: PPUSH
2041: LD_VAR 0 2
2045: PUSH
2046: LD_INT 3
2048: ARRAY
2049: PPUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_INT 4
2057: ARRAY
2058: PPUSH
2059: CALL_OW 205
2063: GO 2015
2065: POP
2066: POP
// end ; end_of_file
2067: LD_VAR 0 1
2071: RET
// export omicronSquad , Omikron , omikronDepot ; export amIntroUnits ; export amConvoyGroups ; export amLabs , amBarracks , amFactory , amVehs ; export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
2072: LD_INT 0
2074: PPUSH
2075: PPUSH
2076: PPUSH
2077: PPUSH
// amIntroUnits = [ ] ;
2078: LD_ADDR_EXP 68
2082: PUSH
2083: EMPTY
2084: ST_TO_ADDR
// uc_side = 1 ;
2085: LD_ADDR_OWVAR 20
2089: PUSH
2090: LD_INT 1
2092: ST_TO_ADDR
// uc_nation = nation_american ;
2093: LD_ADDR_OWVAR 21
2097: PUSH
2098: LD_INT 1
2100: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
2101: LD_ADDR_OWVAR 37
2105: PUSH
2106: LD_INT 3
2108: ST_TO_ADDR
// vc_control = control_manual ;
2109: LD_ADDR_OWVAR 38
2113: PUSH
2114: LD_INT 1
2116: ST_TO_ADDR
// vc_engine = engine_combustion ;
2117: LD_ADDR_OWVAR 39
2121: PUSH
2122: LD_INT 1
2124: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2125: LD_ADDR_OWVAR 40
2129: PUSH
2130: LD_INT 3
2132: ST_TO_ADDR
// vc_fuel_battery = 100 ;
2133: LD_ADDR_OWVAR 41
2137: PUSH
2138: LD_INT 100
2140: ST_TO_ADDR
// veh = CreateVehicle ;
2141: LD_ADDR_VAR 0 3
2145: PUSH
2146: CALL_OW 45
2150: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2151: LD_VAR 0 3
2155: PPUSH
2156: LD_INT 4
2158: PPUSH
2159: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
2163: LD_ADDR_EXP 68
2167: PUSH
2168: LD_EXP 68
2172: PUSH
2173: LD_VAR 0 3
2177: ADD
2178: ST_TO_ADDR
// PlaceUnitArea ( veh , AmTroopsSpawnIntro , false ) ;
2179: LD_VAR 0 3
2183: PPUSH
2184: LD_INT 7
2186: PPUSH
2187: LD_INT 0
2189: PPUSH
2190: CALL_OW 49
// for i := 1 to 3 do
2194: LD_ADDR_VAR 0 2
2198: PUSH
2199: DOUBLE
2200: LD_INT 1
2202: DEC
2203: ST_TO_ADDR
2204: LD_INT 3
2206: PUSH
2207: FOR_TO
2208: IFFALSE 2329
// begin hc_name :=  ;
2210: LD_ADDR_OWVAR 26
2214: PUSH
2215: LD_STRING 
2217: ST_TO_ADDR
// hc_gallery :=  ;
2218: LD_ADDR_OWVAR 33
2222: PUSH
2223: LD_STRING 
2225: ST_TO_ADDR
// PrepareSoldier ( false , enemySkillLevel ) ;
2226: LD_INT 0
2228: PPUSH
2229: LD_EXP 40
2233: PPUSH
2234: CALL_OW 381
// human = CreateHuman ;
2238: LD_ADDR_VAR 0 4
2242: PUSH
2243: CALL_OW 44
2247: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
2248: LD_ADDR_EXP 68
2252: PUSH
2253: LD_EXP 68
2257: PUSH
2258: LD_VAR 0 4
2262: ADD
2263: ST_TO_ADDR
// if i < 3 then
2264: LD_VAR 0 2
2268: PUSH
2269: LD_INT 3
2271: LESS
2272: IFFALSE 2291
// PlaceUnitArea ( human , AmTroopsSpawnIntro , false ) else
2274: LD_VAR 0 4
2278: PPUSH
2279: LD_INT 7
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 49
2289: GO 2327
// begin PrepareMechanic ( false , enemySkillLevel ) ;
2291: LD_INT 0
2293: PPUSH
2294: LD_EXP 40
2298: PPUSH
2299: CALL_OW 383
// human = CreateHuman ;
2303: LD_ADDR_VAR 0 4
2307: PUSH
2308: CALL_OW 44
2312: ST_TO_ADDR
// PlaceHumanInUnit ( human , veh ) ;
2313: LD_VAR 0 4
2317: PPUSH
2318: LD_VAR 0 3
2322: PPUSH
2323: CALL_OW 52
// end ; end ;
2327: GO 2207
2329: POP
2330: POP
// HiddenCamera ( 120 , 36 , 3 ) ;
2331: LD_INT 120
2333: PPUSH
2334: LD_INT 36
2336: PPUSH
2337: LD_INT 3
2339: PPUSH
2340: CALL_OW 244
// ComMoveXY ( amIntroUnits , 26 , 34 ) ;
2344: LD_EXP 68
2348: PPUSH
2349: LD_INT 26
2351: PPUSH
2352: LD_INT 34
2354: PPUSH
2355: CALL_OW 111
// end ;
2359: LD_VAR 0 1
2363: RET
// export function PrepareOmikron ; var i , un , tmp , veh , omiBuildingArray ; begin
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
2371: PPUSH
// amConvoyGroups := [ [ [ 1 , 2 , 3 , 5 ] [ Difficulty ] , [ 0 , 0 , 1 , 1 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 0 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] ] , [ [ 1 , 2 , 3 , 4 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] ] , [ [ 3 , 4 , 6 , 7 ] [ Difficulty ] , [ 1 , 1 , 1 , 2 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 2 , 3 ] [ Difficulty ] , [ 1 , 1 , 1 , 3 ] [ Difficulty ] ] ] ;
2372: LD_ADDR_EXP 69
2376: PUSH
2377: LD_INT 1
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 5
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: LD_OWVAR 67
2399: ARRAY
2400: PUSH
2401: LD_INT 0
2403: PUSH
2404: LD_INT 0
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: LIST
2417: LIST
2418: PUSH
2419: LD_OWVAR 67
2423: ARRAY
2424: PUSH
2425: LD_INT 1
2427: PUSH
2428: LD_INT 1
2430: PUSH
2431: LD_INT 2
2433: PUSH
2434: LD_INT 2
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: PUSH
2443: LD_OWVAR 67
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: LD_INT 1
2457: PUSH
2458: LD_INT 2
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: PUSH
2467: LD_OWVAR 67
2471: ARRAY
2472: PUSH
2473: LD_INT 0
2475: PUSH
2476: LD_INT 1
2478: PUSH
2479: LD_INT 1
2481: PUSH
2482: LD_INT 2
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: LD_OWVAR 67
2495: ARRAY
2496: PUSH
2497: EMPTY
2498: LIST
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 3
2506: PUSH
2507: LD_INT 4
2509: PUSH
2510: LD_INT 5
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: PUSH
2522: LD_OWVAR 67
2526: ARRAY
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: LD_INT 1
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: LD_INT 2
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: LIST
2545: PUSH
2546: LD_OWVAR 67
2550: ARRAY
2551: PUSH
2552: LD_INT 1
2554: PUSH
2555: LD_INT 1
2557: PUSH
2558: LD_INT 2
2560: PUSH
2561: LD_INT 3
2563: PUSH
2564: EMPTY
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: PUSH
2570: LD_OWVAR 67
2574: ARRAY
2575: PUSH
2576: LD_INT 1
2578: PUSH
2579: LD_INT 1
2581: PUSH
2582: LD_INT 2
2584: PUSH
2585: LD_INT 3
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: LD_OWVAR 67
2598: ARRAY
2599: PUSH
2600: LD_INT 1
2602: PUSH
2603: LD_INT 1
2605: PUSH
2606: LD_INT 2
2608: PUSH
2609: LD_INT 3
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: PUSH
2618: LD_OWVAR 67
2622: ARRAY
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 1
2633: PUSH
2634: LD_INT 2
2636: PUSH
2637: LD_INT 3
2639: PUSH
2640: LD_INT 4
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: PUSH
2649: LD_OWVAR 67
2653: ARRAY
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: LD_INT 1
2660: PUSH
2661: LD_INT 1
2663: PUSH
2664: LD_INT 2
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: PUSH
2673: LD_OWVAR 67
2677: ARRAY
2678: PUSH
2679: LD_INT 1
2681: PUSH
2682: LD_INT 1
2684: PUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: PUSH
2697: LD_OWVAR 67
2701: ARRAY
2702: PUSH
2703: LD_INT 1
2705: PUSH
2706: LD_INT 1
2708: PUSH
2709: LD_INT 1
2711: PUSH
2712: LD_INT 2
2714: PUSH
2715: EMPTY
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_OWVAR 67
2725: ARRAY
2726: PUSH
2727: LD_INT 1
2729: PUSH
2730: LD_INT 1
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: LD_INT 2
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: PUSH
2745: LD_OWVAR 67
2749: ARRAY
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: PUSH
2758: LD_INT 3
2760: PUSH
2761: LD_INT 4
2763: PUSH
2764: LD_INT 6
2766: PUSH
2767: LD_INT 7
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: PUSH
2776: LD_OWVAR 67
2780: ARRAY
2781: PUSH
2782: LD_INT 1
2784: PUSH
2785: LD_INT 1
2787: PUSH
2788: LD_INT 1
2790: PUSH
2791: LD_INT 2
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: PUSH
2800: LD_OWVAR 67
2804: ARRAY
2805: PUSH
2806: LD_INT 1
2808: PUSH
2809: LD_INT 1
2811: PUSH
2812: LD_INT 2
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: PUSH
2824: LD_OWVAR 67
2828: ARRAY
2829: PUSH
2830: LD_INT 1
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: LD_INT 2
2838: PUSH
2839: LD_INT 3
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: PUSH
2848: LD_OWVAR 67
2852: ARRAY
2853: PUSH
2854: LD_INT 1
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: LD_INT 1
2862: PUSH
2863: LD_INT 3
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: PUSH
2872: LD_OWVAR 67
2876: ARRAY
2877: PUSH
2878: EMPTY
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: ST_TO_ADDR
// omiBuildingArray := [ [ b_warehouse , 20 , 33 , 2 ] , [ b_oil_mine , 38 , 30 , 5 ] , [ b_barracks , 34 , 25 , 4 ] , [ b_barracks , 35 , 45 , 4 ] , [ b_lab , 27 , 27 , 3 ] , [ b_lab , 15 , 23 , 1 ] , [ b_breastwork , 25 , 8 , 5 ] , [ b_bunker , 37 , 35 , 4 ] , [ b_bunker , 42 , 45 , 4 ] , [ b_bunker , 29 , 17 , 4 ] , [ b_bunker , 30 , 53 , 0 ] , [ b_bunker , 42 , 56 , 4 ] , [ b_bunker , 30 , 20 , 4 ] , [ b_solar_power , 7 , 8 , 1 ] , [ b_solar_power , 10 , 8 , 1 ] , [ b_solar_power , 13 , 8 , 1 ] , [ b_oil_power , 23 , 42 , 4 ] , [ b_factory , 13 , 14 , 1 ] , [ b_ext_noncombat , 10 , 11 , 2 ] , [ b_ext_gun , 9 , 14 , 1 ] , [ b_ext_track , 13 , 17 , 0 ] ] ;
2891: LD_ADDR_VAR 0 6
2895: PUSH
2896: LD_INT 1
2898: PUSH
2899: LD_INT 20
2901: PUSH
2902: LD_INT 33
2904: PUSH
2905: LD_INT 2
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: PUSH
2914: LD_INT 29
2916: PUSH
2917: LD_INT 38
2919: PUSH
2920: LD_INT 30
2922: PUSH
2923: LD_INT 5
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 5
2934: PUSH
2935: LD_INT 34
2937: PUSH
2938: LD_INT 25
2940: PUSH
2941: LD_INT 4
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 5
2952: PUSH
2953: LD_INT 35
2955: PUSH
2956: LD_INT 45
2958: PUSH
2959: LD_INT 4
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 6
2970: PUSH
2971: LD_INT 27
2973: PUSH
2974: LD_INT 27
2976: PUSH
2977: LD_INT 3
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: LIST
2984: LIST
2985: PUSH
2986: LD_INT 6
2988: PUSH
2989: LD_INT 15
2991: PUSH
2992: LD_INT 23
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PUSH
3004: LD_INT 31
3006: PUSH
3007: LD_INT 25
3009: PUSH
3010: LD_INT 8
3012: PUSH
3013: LD_INT 5
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 32
3024: PUSH
3025: LD_INT 37
3027: PUSH
3028: LD_INT 35
3030: PUSH
3031: LD_INT 4
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 32
3042: PUSH
3043: LD_INT 42
3045: PUSH
3046: LD_INT 45
3048: PUSH
3049: LD_INT 4
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 32
3060: PUSH
3061: LD_INT 29
3063: PUSH
3064: LD_INT 17
3066: PUSH
3067: LD_INT 4
3069: PUSH
3070: EMPTY
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_INT 32
3078: PUSH
3079: LD_INT 30
3081: PUSH
3082: LD_INT 53
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 32
3096: PUSH
3097: LD_INT 42
3099: PUSH
3100: LD_INT 56
3102: PUSH
3103: LD_INT 4
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: PUSH
3112: LD_INT 32
3114: PUSH
3115: LD_INT 30
3117: PUSH
3118: LD_INT 20
3120: PUSH
3121: LD_INT 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 27
3132: PUSH
3133: LD_INT 7
3135: PUSH
3136: LD_INT 8
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: PUSH
3148: LD_INT 27
3150: PUSH
3151: LD_INT 10
3153: PUSH
3154: LD_INT 8
3156: PUSH
3157: LD_INT 1
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 27
3168: PUSH
3169: LD_INT 13
3171: PUSH
3172: LD_INT 8
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 26
3186: PUSH
3187: LD_INT 23
3189: PUSH
3190: LD_INT 42
3192: PUSH
3193: LD_INT 4
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 3
3204: PUSH
3205: LD_INT 13
3207: PUSH
3208: LD_INT 14
3210: PUSH
3211: LD_INT 1
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: PUSH
3220: LD_INT 19
3222: PUSH
3223: LD_INT 10
3225: PUSH
3226: LD_INT 11
3228: PUSH
3229: LD_INT 2
3231: PUSH
3232: EMPTY
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 17
3240: PUSH
3241: LD_INT 9
3243: PUSH
3244: LD_INT 14
3246: PUSH
3247: LD_INT 1
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 16
3258: PUSH
3259: LD_INT 13
3261: PUSH
3262: LD_INT 17
3264: PUSH
3265: LD_INT 0
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: ST_TO_ADDR
// for i in omiBuildingArray do
3297: LD_ADDR_VAR 0 2
3301: PUSH
3302: LD_VAR 0 6
3306: PUSH
3307: FOR_IN
3308: IFFALSE 3364
// PrepareBuilding ( 1 , 1 , 5 , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , false ) ;
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 1
3315: PPUSH
3316: LD_INT 5
3318: PPUSH
3319: LD_VAR 0 2
3323: PUSH
3324: LD_INT 1
3326: ARRAY
3327: PPUSH
3328: LD_VAR 0 2
3332: PUSH
3333: LD_INT 2
3335: ARRAY
3336: PPUSH
3337: LD_VAR 0 2
3341: PUSH
3342: LD_INT 3
3344: ARRAY
3345: PPUSH
3346: LD_VAR 0 2
3350: PUSH
3351: LD_INT 4
3353: ARRAY
3354: PPUSH
3355: LD_INT 0
3357: PPUSH
3358: CALL 47403 0 8
3362: GO 3307
3364: POP
3365: POP
// omikronDepot := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
3366: LD_ADDR_EXP 67
3370: PUSH
3371: LD_INT 22
3373: PUSH
3374: LD_INT 1
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 30
3383: PUSH
3384: LD_INT 1
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: PPUSH
3395: CALL_OW 69
3399: PUSH
3400: LD_INT 1
3402: ARRAY
3403: ST_TO_ADDR
// SetBName ( omikronDepot , omikron ) ;
3404: LD_EXP 67
3408: PPUSH
3409: LD_STRING omikron
3411: PPUSH
3412: CALL_OW 500
// amBarracks := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) ;
3416: LD_ADDR_EXP 71
3420: PUSH
3421: LD_INT 22
3423: PUSH
3424: LD_INT 1
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: PUSH
3431: LD_INT 30
3433: PUSH
3434: LD_INT 5
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: ST_TO_ADDR
// amLabs := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_lab ] ] ) ;
3450: LD_ADDR_EXP 70
3454: PUSH
3455: LD_INT 22
3457: PUSH
3458: LD_INT 1
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: LD_INT 30
3467: PUSH
3468: LD_INT 6
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PPUSH
3479: CALL_OW 69
3483: ST_TO_ADDR
// amFactory := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
3484: LD_ADDR_EXP 72
3488: PUSH
3489: LD_INT 22
3491: PUSH
3492: LD_INT 1
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: PUSH
3499: LD_INT 30
3501: PUSH
3502: LD_INT 3
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: PUSH
3518: LD_INT 1
3520: ARRAY
3521: ST_TO_ADDR
// for i := 1 to 2 do
3522: LD_ADDR_VAR 0 2
3526: PUSH
3527: DOUBLE
3528: LD_INT 1
3530: DEC
3531: ST_TO_ADDR
3532: LD_INT 2
3534: PUSH
3535: FOR_TO
3536: IFFALSE 3562
// SetResourceType ( GetBase ( omikronDepot ) , i , 500 ) ;
3538: LD_EXP 67
3542: PPUSH
3543: CALL_OW 274
3547: PPUSH
3548: LD_VAR 0 2
3552: PPUSH
3553: LD_INT 500
3555: PPUSH
3556: CALL_OW 277
3560: GO 3535
3562: POP
3563: POP
// uc_side := 1 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 1
3571: ST_TO_ADDR
// uc_nation := 1 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 1
3579: ST_TO_ADDR
// omicronSquad := [ ] ;
3580: LD_ADDR_EXP 65
3584: PUSH
3585: EMPTY
3586: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_INT 22
3594: PUSH
3595: LD_INT 1
3597: PUSH
3598: EMPTY
3599: LIST
3600: LIST
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: LD_INT 30
3607: PUSH
3608: LD_INT 32
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: LD_INT 30
3617: PUSH
3618: LD_INT 31
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: LIST
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PPUSH
3634: CALL_OW 69
3638: PUSH
3639: FOR_IN
3640: IFFALSE 3759
// begin PrepareHuman ( sex_male , 1 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
3642: LD_INT 1
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: LD_INT 3
3650: PUSH
3651: LD_INT 4
3653: PUSH
3654: LD_INT 5
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: CALL_OW 380
// un := CreateHuman ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: CALL_OW 44
3681: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3682: LD_ADDR_EXP 65
3686: PUSH
3687: LD_EXP 65
3691: PUSH
3692: LD_VAR 0 3
3696: UNION
3697: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
3698: LD_VAR 0 3
3702: PPUSH
3703: LD_VAR 0 2
3707: PPUSH
3708: CALL_OW 254
3712: PUSH
3713: LD_INT 3
3715: MINUS
3716: PPUSH
3717: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_VAR 0 2
3730: PPUSH
3731: CALL_OW 52
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , areaOmicron ) ) ;
3735: LD_VAR 0 2
3739: PPUSH
3740: LD_VAR 0 2
3744: PPUSH
3745: LD_INT 8
3747: PPUSH
3748: CALL 16979 0 2
3752: PPUSH
3753: CALL_OW 431
// end ;
3757: GO 3639
3759: POP
3760: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 5
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3849
// begin PrepareHuman ( false , 2 , 2 ) ;
3794: LD_INT 0
3796: PPUSH
3797: LD_INT 2
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: CALL_OW 380
// un := CreateHuman ;
3807: LD_ADDR_VAR 0 3
3811: PUSH
3812: CALL_OW 44
3816: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3817: LD_ADDR_EXP 65
3821: PUSH
3822: LD_EXP 65
3826: PUSH
3827: LD_VAR 0 3
3831: UNION
3832: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikronDepot ) ;
3833: LD_VAR 0 3
3837: PPUSH
3838: LD_EXP 67
3842: PPUSH
3843: CALL_OW 52
// end ;
3847: GO 3791
3849: POP
3850: POP
// for i := 1 to 2 do
3851: LD_ADDR_VAR 0 2
3855: PUSH
3856: DOUBLE
3857: LD_INT 1
3859: DEC
3860: ST_TO_ADDR
3861: LD_INT 2
3863: PUSH
3864: FOR_TO
3865: IFFALSE 4031
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
3867: LD_INT 2
3869: PUSH
3870: LD_INT 3
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PUSH
3877: LD_VAR 0 2
3881: ARRAY
3882: PPUSH
3883: LD_INT 2
3885: PPUSH
3886: LD_INT 1
3888: PPUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: PUSH
3899: LD_VAR 0 2
3903: ARRAY
3904: PPUSH
3905: LD_INT 100
3907: PPUSH
3908: CALL 11847 0 5
// veh := CreateVehicle ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: CALL_OW 45
3921: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
3922: LD_VAR 0 5
3926: PPUSH
3927: LD_INT 28
3929: PPUSH
3930: LD_INT 37
3932: PPUSH
3933: LD_INT 6
3935: PPUSH
3936: LD_INT 0
3938: PPUSH
3939: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
3943: LD_INT 0
3945: PPUSH
3946: LD_INT 3
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: CALL_OW 380
// un := CreateHuman ;
3956: LD_ADDR_VAR 0 3
3960: PUSH
3961: CALL_OW 44
3965: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
3966: LD_ADDR_EXP 65
3970: PUSH
3971: LD_EXP 65
3975: PUSH
3976: LD_VAR 0 3
3980: UNION
3981: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3982: LD_VAR 0 3
3986: PPUSH
3987: LD_VAR 0 5
3991: PPUSH
3992: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
3996: LD_VAR 0 3
4000: PPUSH
4001: LD_VAR 0 3
4005: PPUSH
4006: CALL_OW 250
4010: PUSH
4011: LD_INT 3
4013: PLUS
4014: PPUSH
4015: LD_VAR 0 3
4019: PPUSH
4020: CALL_OW 251
4024: PPUSH
4025: CALL_OW 111
// end ;
4029: GO 3864
4031: POP
4032: POP
// end ;
4033: LD_VAR 0 1
4037: RET
// export amConvoyTroops ; export function PrepareAmericanConvoy ( soldiersAmount , engsAmount , mechsAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road , sols , engs , mechs , scis , vehs ; begin
4038: LD_INT 0
4040: PPUSH
4041: PPUSH
4042: PPUSH
4043: PPUSH
4044: PPUSH
4045: PPUSH
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
// uc_side := 1 ;
4050: LD_ADDR_OWVAR 20
4054: PUSH
4055: LD_INT 1
4057: ST_TO_ADDR
// uc_nation := 1 ;
4058: LD_ADDR_OWVAR 21
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// hc_name :=  ;
4066: LD_ADDR_OWVAR 26
4070: PUSH
4071: LD_STRING 
4073: ST_TO_ADDR
// hc_gallery :=  ;
4074: LD_ADDR_OWVAR 33
4078: PUSH
4079: LD_STRING 
4081: ST_TO_ADDR
// for i := 1 to soldiersAmount do
4082: LD_ADDR_VAR 0 8
4086: PUSH
4087: DOUBLE
4088: LD_INT 1
4090: DEC
4091: ST_TO_ADDR
4092: LD_VAR 0 1
4096: PUSH
4097: FOR_TO
4098: IFFALSE 4173
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4100: LD_INT 0
4102: PPUSH
4103: LD_EXP 40
4107: PPUSH
4108: CALL_OW 381
// un = CreateHuman ;
4112: LD_ADDR_VAR 0 9
4116: PUSH
4117: CALL_OW 44
4121: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4122: LD_ADDR_EXP 74
4126: PUSH
4127: LD_EXP 74
4131: PUSH
4132: LD_VAR 0 9
4136: ADD
4137: ST_TO_ADDR
// sols := sols ^ un ;
4138: LD_ADDR_VAR 0 12
4142: PUSH
4143: LD_VAR 0 12
4147: PUSH
4148: LD_VAR 0 9
4152: ADD
4153: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4154: LD_VAR 0 9
4158: PPUSH
4159: LD_VAR 0 6
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// end ;
4171: GO 4097
4173: POP
4174: POP
// for i := 1 to engsAmount do
4175: LD_ADDR_VAR 0 8
4179: PUSH
4180: DOUBLE
4181: LD_INT 1
4183: DEC
4184: ST_TO_ADDR
4185: LD_VAR 0 2
4189: PUSH
4190: FOR_TO
4191: IFFALSE 4266
// begin PrepareEngineer ( false , enemySkillLevel ) ;
4193: LD_INT 0
4195: PPUSH
4196: LD_EXP 40
4200: PPUSH
4201: CALL_OW 382
// un = CreateHuman ;
4205: LD_ADDR_VAR 0 9
4209: PUSH
4210: CALL_OW 44
4214: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4215: LD_ADDR_EXP 74
4219: PUSH
4220: LD_EXP 74
4224: PUSH
4225: LD_VAR 0 9
4229: ADD
4230: ST_TO_ADDR
// engs := engs ^ un ;
4231: LD_ADDR_VAR 0 13
4235: PUSH
4236: LD_VAR 0 13
4240: PUSH
4241: LD_VAR 0 9
4245: ADD
4246: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4247: LD_VAR 0 9
4251: PPUSH
4252: LD_VAR 0 6
4256: PPUSH
4257: LD_INT 0
4259: PPUSH
4260: CALL_OW 49
// end ;
4264: GO 4190
4266: POP
4267: POP
// for i := 1 to mechsAmount do
4268: LD_ADDR_VAR 0 8
4272: PUSH
4273: DOUBLE
4274: LD_INT 1
4276: DEC
4277: ST_TO_ADDR
4278: LD_VAR 0 3
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4359
// begin PrepareMechanic ( false , enemySkillLevel ) ;
4286: LD_INT 0
4288: PPUSH
4289: LD_EXP 40
4293: PPUSH
4294: CALL_OW 383
// un = CreateHuman ;
4298: LD_ADDR_VAR 0 9
4302: PUSH
4303: CALL_OW 44
4307: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4308: LD_ADDR_EXP 74
4312: PUSH
4313: LD_EXP 74
4317: PUSH
4318: LD_VAR 0 9
4322: ADD
4323: ST_TO_ADDR
// mechs := mechs ^ un ;
4324: LD_ADDR_VAR 0 14
4328: PUSH
4329: LD_VAR 0 14
4333: PUSH
4334: LD_VAR 0 9
4338: ADD
4339: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4340: LD_VAR 0 9
4344: PPUSH
4345: LD_VAR 0 6
4349: PPUSH
4350: LD_INT 0
4352: PPUSH
4353: CALL_OW 49
// end ;
4357: GO 4283
4359: POP
4360: POP
// for i := 1 to scientistsAmount do
4361: LD_ADDR_VAR 0 8
4365: PUSH
4366: DOUBLE
4367: LD_INT 1
4369: DEC
4370: ST_TO_ADDR
4371: LD_VAR 0 4
4375: PUSH
4376: FOR_TO
4377: IFFALSE 4452
// begin PrepareScientist ( false , enemySkillLevel ) ;
4379: LD_INT 0
4381: PPUSH
4382: LD_EXP 40
4386: PPUSH
4387: CALL_OW 384
// un = CreateHuman ;
4391: LD_ADDR_VAR 0 9
4395: PUSH
4396: CALL_OW 44
4400: ST_TO_ADDR
// amConvoyTroops := amConvoyTroops ^ un ;
4401: LD_ADDR_EXP 74
4405: PUSH
4406: LD_EXP 74
4410: PUSH
4411: LD_VAR 0 9
4415: ADD
4416: ST_TO_ADDR
// scis := scis ^ un ;
4417: LD_ADDR_VAR 0 15
4421: PUSH
4422: LD_VAR 0 15
4426: PUSH
4427: LD_VAR 0 9
4431: ADD
4432: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
4433: LD_VAR 0 9
4437: PPUSH
4438: LD_VAR 0 6
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL_OW 49
// end ;
4450: GO 4376
4452: POP
4453: POP
// for i := 1 to vehiclesAmount do
4454: LD_ADDR_VAR 0 8
4458: PUSH
4459: DOUBLE
4460: LD_INT 1
4462: DEC
4463: ST_TO_ADDR
4464: LD_VAR 0 5
4468: PUSH
4469: FOR_TO
4470: IFFALSE 4652
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
4472: LD_ADDR_OWVAR 40
4476: PUSH
4477: LD_INT 2
4479: PUSH
4480: LD_INT 4
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: LD_INT 1
4493: PPUSH
4494: LD_INT 3
4496: PPUSH
4497: CALL_OW 12
4501: ARRAY
4502: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
4503: LD_ADDR_OWVAR 37
4507: PUSH
4508: LD_INT 3
4510: ST_TO_ADDR
// vc_control = control_manual ;
4511: LD_ADDR_OWVAR 38
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// vc_engine = engine_combustion ;
4519: LD_ADDR_OWVAR 39
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// veh = CreateVehicle ;
4527: LD_ADDR_VAR 0 10
4531: PUSH
4532: CALL_OW 45
4536: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ veh ;
4537: LD_ADDR_EXP 74
4541: PUSH
4542: LD_EXP 74
4546: PUSH
4547: LD_VAR 0 10
4551: ADD
4552: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
4553: LD_VAR 0 10
4557: PPUSH
4558: LD_VAR 0 6
4562: PPUSH
4563: LD_INT 0
4565: PPUSH
4566: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
4570: LD_INT 0
4572: PPUSH
4573: LD_EXP 40
4577: PPUSH
4578: CALL_OW 383
// un = CreateHuman ;
4582: LD_ADDR_VAR 0 9
4586: PUSH
4587: CALL_OW 44
4591: ST_TO_ADDR
// amConvoyTroops = amConvoyTroops ^ un ;
4592: LD_ADDR_EXP 74
4596: PUSH
4597: LD_EXP 74
4601: PUSH
4602: LD_VAR 0 9
4606: ADD
4607: ST_TO_ADDR
// amVehs := amVehs ^ veh ;
4608: LD_ADDR_EXP 73
4612: PUSH
4613: LD_EXP 73
4617: PUSH
4618: LD_VAR 0 10
4622: ADD
4623: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4624: LD_VAR 0 9
4628: PPUSH
4629: LD_VAR 0 10
4633: PPUSH
4634: CALL_OW 52
// SetFuel ( veh , 100 ) ;
4638: LD_VAR 0 10
4642: PPUSH
4643: LD_INT 100
4645: PPUSH
4646: CALL_OW 240
// end ;
4650: GO 4469
4652: POP
4653: POP
// ComAgressiveMove ( amConvoyTroops , 25 , 31 ) ;
4654: LD_EXP 74
4658: PPUSH
4659: LD_INT 25
4661: PPUSH
4662: LD_INT 31
4664: PPUSH
4665: CALL_OW 114
// AgressiveMove ( amVehs , [ [ 95 , 44 ] ] ) ;
4669: LD_EXP 73
4673: PPUSH
4674: LD_INT 95
4676: PUSH
4677: LD_INT 44
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: PUSH
4684: EMPTY
4685: LIST
4686: PPUSH
4687: CALL 46260 0 2
// AddComEnterUnit ( sols , [ amBarracks [ 1 ] , amBarracks [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
4691: LD_VAR 0 12
4695: PPUSH
4696: LD_EXP 71
4700: PUSH
4701: LD_INT 1
4703: ARRAY
4704: PUSH
4705: LD_EXP 71
4709: PUSH
4710: LD_INT 2
4712: ARRAY
4713: PUSH
4714: EMPTY
4715: LIST
4716: LIST
4717: PUSH
4718: LD_INT 1
4720: PPUSH
4721: LD_INT 2
4723: PPUSH
4724: CALL_OW 12
4728: ARRAY
4729: PPUSH
4730: CALL_OW 180
// AddComEnterUnit ( engs , omikronDepot ) ;
4734: LD_VAR 0 13
4738: PPUSH
4739: LD_EXP 67
4743: PPUSH
4744: CALL_OW 180
// AddComEnterUnit ( mechs , amFactory ) ;
4748: LD_VAR 0 14
4752: PPUSH
4753: LD_EXP 72
4757: PPUSH
4758: CALL_OW 180
// AddComEnterUnit ( scis , [ amLabs [ 1 ] , amLabs [ 2 ] ] [ Rand ( 1 , 2 ) ] ) ;
4762: LD_VAR 0 15
4766: PPUSH
4767: LD_EXP 70
4771: PUSH
4772: LD_INT 1
4774: ARRAY
4775: PUSH
4776: LD_EXP 70
4780: PUSH
4781: LD_INT 2
4783: ARRAY
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 1
4791: PPUSH
4792: LD_INT 2
4794: PPUSH
4795: CALL_OW 12
4799: ARRAY
4800: PPUSH
4801: CALL_OW 180
// amConvoyTroops :=  ;
4805: LD_ADDR_EXP 74
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// sols :=  ;
4813: LD_ADDR_VAR 0 12
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// engs :=  ;
4821: LD_ADDR_VAR 0 13
4825: PUSH
4826: LD_STRING 
4828: ST_TO_ADDR
// mechs :=  ;
4829: LD_ADDR_VAR 0 14
4833: PUSH
4834: LD_STRING 
4836: ST_TO_ADDR
// scis :=  ;
4837: LD_ADDR_VAR 0 15
4841: PUSH
4842: LD_STRING 
4844: ST_TO_ADDR
// end ;
4845: LD_VAR 0 7
4849: RET
// export function PrepareAttackOnRus ( ) ; var i ; begin
4850: LD_INT 0
4852: PPUSH
4853: PPUSH
// for i := 1 to amVehs do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_EXP 73
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4913
// begin if GetType ( i ) = unit_vehicle then
4872: LD_VAR 0 2
4876: PPUSH
4877: CALL_OW 247
4881: PUSH
4882: LD_INT 2
4884: EQUAL
4885: IFFALSE 4899
// SetFuel ( i , 100 ) ;
4887: LD_VAR 0 2
4891: PPUSH
4892: LD_INT 100
4894: PPUSH
4895: CALL_OW 240
// SetLives ( i , 100 ) ;
4899: LD_VAR 0 2
4903: PPUSH
4904: LD_INT 100
4906: PPUSH
4907: CALL_OW 234
// end ;
4911: GO 4869
4913: POP
4914: POP
// for i := 1 to amIntroUnits do
4915: LD_ADDR_VAR 0 2
4919: PUSH
4920: DOUBLE
4921: LD_INT 1
4923: DEC
4924: ST_TO_ADDR
4925: LD_EXP 68
4929: PUSH
4930: FOR_TO
4931: IFFALSE 4974
// begin if GetType ( i ) = unit_vehicle then
4933: LD_VAR 0 2
4937: PPUSH
4938: CALL_OW 247
4942: PUSH
4943: LD_INT 2
4945: EQUAL
4946: IFFALSE 4960
// SetFuel ( i , 100 ) ;
4948: LD_VAR 0 2
4952: PPUSH
4953: LD_INT 100
4955: PPUSH
4956: CALL_OW 240
// SetLives ( i , 100 ) ;
4960: LD_VAR 0 2
4964: PPUSH
4965: LD_INT 100
4967: PPUSH
4968: CALL_OW 234
// end ;
4972: GO 4930
4974: POP
4975: POP
// AgressiveMove ( amIntroUnits , [ [ 65 , 91 ] , [ 116 , 97 ] ] ) ;
4976: LD_EXP 68
4980: PPUSH
4981: LD_INT 65
4983: PUSH
4984: LD_INT 91
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 116
4993: PUSH
4994: LD_INT 97
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PPUSH
5005: CALL 46260 0 2
// AgressiveMove ( amVehs , [ [ 65 , 91 ] , [ 109 , 97 ] ] ) ;
5009: LD_EXP 73
5013: PPUSH
5014: LD_INT 65
5016: PUSH
5017: LD_INT 91
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 109
5026: PUSH
5027: LD_INT 97
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PPUSH
5038: CALL 46260 0 2
// end ; end_of_file end_of_file
5042: LD_VAR 0 1
5046: RET
// on BuildingComplete ( building ) do var un , bunkers , sols ;
5047: LD_INT 0
5049: PPUSH
5050: PPUSH
5051: PPUSH
// begin if GetSide ( building ) = 6 and ( GetBType ( building ) = b_bunker or GetBType ( building ) = b_armoury ) then
5052: LD_VAR 0 1
5056: PPUSH
5057: CALL_OW 255
5061: PUSH
5062: LD_INT 6
5064: EQUAL
5065: PUSH
5066: LD_VAR 0 1
5070: PPUSH
5071: CALL_OW 266
5075: PUSH
5076: LD_INT 32
5078: EQUAL
5079: PUSH
5080: LD_VAR 0 1
5084: PPUSH
5085: CALL_OW 266
5089: PUSH
5090: LD_INT 4
5092: EQUAL
5093: OR
5094: AND
5095: IFFALSE 5213
// begin sols := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] , [ f_inside ] ] ) ;
5097: LD_ADDR_VAR 0 4
5101: PUSH
5102: LD_INT 22
5104: PUSH
5105: LD_INT 6
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PUSH
5112: LD_INT 21
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PUSH
5122: LD_INT 25
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 54
5134: PUSH
5135: EMPTY
5136: LIST
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: ST_TO_ADDR
// for un in sols do
5149: LD_ADDR_VAR 0 2
5153: PUSH
5154: LD_VAR 0 4
5158: PUSH
5159: FOR_IN
5160: IFFALSE 5211
// begin if GetBType ( IsInUnit ( un ) ) = b_bunker then
5162: LD_VAR 0 2
5166: PPUSH
5167: CALL_OW 310
5171: PPUSH
5172: CALL_OW 266
5176: PUSH
5177: LD_INT 32
5179: EQUAL
5180: IFFALSE 5184
// continue ;
5182: GO 5159
// ComExit ( un ) ;
5184: LD_VAR 0 2
5188: PPUSH
5189: CALL 44052 0 1
// AddComEnterUnit ( un , building ) ;
5193: LD_VAR 0 2
5197: PPUSH
5198: LD_VAR 0 1
5202: PPUSH
5203: CALL_OW 180
// break ;
5207: GO 5211
// end ;
5209: GO 5159
5211: POP
5212: POP
// end ; end ; end_of_file
5213: PPOPN 4
5215: END
// export currentTeam , kirovBaseUnits ; export counterEnable , counterIndex , ticks , convoyTime , timeToPrepareAttack , timeToArabAttack ; export function MissionIntro ; var un , selectedPeople ; begin
5216: LD_INT 0
5218: PPUSH
5219: PPUSH
5220: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
5221: LD_EXP 41
5225: PUSH
5226: LD_EXP 54
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PPUSH
5235: CALL_OW 87
// convoyTime := [ 0 0$10 , 15 15$00 , 20 20$00 , 25 25$00 ] ;
5239: LD_ADDR_EXP 80
5243: PUSH
5244: LD_INT 350
5246: PUSH
5247: LD_INT 31500
5249: PUSH
5250: LD_INT 42000
5252: PUSH
5253: LD_INT 52500
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: ST_TO_ADDR
// if not Belkov then
5262: LD_EXP 45
5266: NOT
5267: IFFALSE 5343
// begin Say ( Kurin , D1a-Kur-1 ) ;
5269: LD_EXP 54
5273: PPUSH
5274: LD_STRING D1a-Kur-1
5276: PPUSH
5277: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
5281: LD_EXP 41
5285: PPUSH
5286: LD_STRING D1a-Bur-1
5288: PPUSH
5289: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
5293: LD_EXP 54
5297: PPUSH
5298: LD_STRING D1a-Kur-2
5300: PPUSH
5301: CALL_OW 88
// Say ( Kurin , D1a-Kur-2a ) ;
5305: LD_EXP 54
5309: PPUSH
5310: LD_STRING D1a-Kur-2a
5312: PPUSH
5313: CALL_OW 88
// Say ( Kurin , D1a-Kur-2b ) ;
5317: LD_EXP 54
5321: PPUSH
5322: LD_STRING D1a-Kur-2b
5324: PPUSH
5325: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
5329: LD_EXP 41
5333: PPUSH
5334: LD_STRING D1a-Bur-2
5336: PPUSH
5337: CALL_OW 88
// end else
5341: GO 5379
// begin Say ( Kurin , D1b-Kur-1 ) ;
5343: LD_EXP 54
5347: PPUSH
5348: LD_STRING D1b-Kur-1
5350: PPUSH
5351: CALL_OW 88
// Say ( Belkov , D1b-Bel-1 ) ;
5355: LD_EXP 45
5359: PPUSH
5360: LD_STRING D1b-Bel-1
5362: PPUSH
5363: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
5367: LD_EXP 54
5371: PPUSH
5372: LD_STRING D1b-Kur-2
5374: PPUSH
5375: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
5379: LD_EXP 54
5383: PPUSH
5384: LD_STRING D2-Kur-1
5386: PPUSH
5387: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
5391: LD_EXP 41
5395: PPUSH
5396: LD_STRING D2-Bur-1
5398: PPUSH
5399: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
5403: LD_EXP 54
5407: PPUSH
5408: LD_STRING D2-Kur-2
5410: PPUSH
5411: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
5415: LD_EXP 41
5419: PPUSH
5420: LD_STRING D2-Bur-2
5422: PPUSH
5423: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
5427: LD_EXP 54
5431: PPUSH
5432: LD_STRING D2-Kur-3
5434: PPUSH
5435: CALL_OW 88
// PrepareAmericansMissionIntro ;
5439: CALL 2072 0 0
// SetAttitude ( 1 , 6 , att_friend , true ) ;
5443: LD_INT 1
5445: PPUSH
5446: LD_INT 6
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 1
5454: PPUSH
5455: CALL_OW 80
// RevealFogArea ( 3 , RevealMapPartArea ) ;
5459: LD_INT 3
5461: PPUSH
5462: LD_INT 5
5464: PPUSH
5465: CALL_OW 332
// CenterNowOnUnits ( [ Popov , Gaydar ] ) ;
5469: LD_EXP 55
5473: PUSH
5474: LD_EXP 61
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 87
// wait ( 0 0$3 ) ;
5487: LD_INT 105
5489: PPUSH
5490: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
5494: LD_EXP 55
5498: PPUSH
5499: LD_STRING D2-Pop-3
5501: PPUSH
5502: CALL_OW 94
// wait ( 0 0$0.3 ) ;
5506: LD_INT 10
5508: PPUSH
5509: CALL_OW 67
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
5513: LD_EXP 41
5517: PUSH
5518: LD_EXP 54
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 87
// Say ( Kurin , D2-Kur-4 ) ;
5531: LD_EXP 54
5535: PPUSH
5536: LD_STRING D2-Kur-4
5538: PPUSH
5539: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
5543: LD_EXP 41
5547: PPUSH
5548: LD_STRING D2-Bur-4
5550: PPUSH
5551: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
5555: LD_EXP 54
5559: PPUSH
5560: LD_STRING D2-Kur-5
5562: PPUSH
5563: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
5567: LD_EXP 41
5571: PPUSH
5572: LD_STRING D2-Bur-5
5574: PPUSH
5575: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
5579: LD_EXP 54
5583: PPUSH
5584: LD_STRING D2-Kur-6
5586: PPUSH
5587: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
5591: LD_EXP 41
5595: PPUSH
5596: LD_STRING D2-Bur-4
5598: PPUSH
5599: CALL_OW 88
// kirovBaseUnits = otherKirovUnits ;
5603: LD_ADDR_EXP 76
5607: PUSH
5608: LD_EXP 56
5612: ST_TO_ADDR
// kirovBaseUnits = kirovBaseUnits ^ otherBeriaUnits ;
5613: LD_ADDR_EXP 76
5617: PUSH
5618: LD_EXP 76
5622: PUSH
5623: LD_EXP 50
5627: ADD
5628: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , 6 , 6 , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , Belkov , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ kirovBaseUnits ^ [ sel_dont_change_class , sel_not_changeable , Kurin , Popov ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_STRING text
5636: PPUSH
5637: LD_INT 6
5639: PPUSH
5640: LD_INT 6
5642: PPUSH
5643: LD_INT -5
5645: PUSH
5646: LD_EXP 41
5650: PUSH
5651: LD_EXP 42
5655: PUSH
5656: LD_EXP 44
5660: PUSH
5661: LD_EXP 43
5665: PUSH
5666: LD_EXP 45
5670: PUSH
5671: LD_INT -6
5673: PUSH
5674: LD_INT -2
5676: PUSH
5677: LD_INT -3
5679: PUSH
5680: LD_INT -5
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PUSH
5695: LD_EXP 76
5699: ADD
5700: PUSH
5701: LD_INT -6
5703: PUSH
5704: LD_INT -4
5706: PUSH
5707: LD_EXP 54
5711: PUSH
5712: LD_EXP 55
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ADD
5723: PPUSH
5724: LD_INT 1
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 2
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: LD_INT 4
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PPUSH
5756: CALL_OW 42
5760: ST_TO_ADDR
// SetSide ( kirovBaseUnits , 6 ) ;
5761: LD_EXP 76
5765: PPUSH
5766: LD_INT 6
5768: PPUSH
5769: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
5773: LD_VAR 0 3
5777: PPUSH
5778: LD_INT 3
5780: PPUSH
5781: CALL_OW 235
// AddComMoveXY ( Popov , 135 , 67 ) ;
5785: LD_EXP 55
5789: PPUSH
5790: LD_INT 135
5792: PPUSH
5793: LD_INT 67
5795: PPUSH
5796: CALL_OW 171
// AddComMoveXY ( Gaydar , 209 , 164 ) ;
5800: LD_EXP 61
5804: PPUSH
5805: LD_INT 209
5807: PPUSH
5808: LD_INT 164
5810: PPUSH
5811: CALL_OW 171
// kirovBarracks := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) ;
5815: LD_ADDR_EXP 64
5819: PUSH
5820: LD_INT 22
5822: PUSH
5823: LD_INT 6
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 30
5832: PUSH
5833: LD_INT 4
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: ST_TO_ADDR
// kirovBaseUnits := kirovBaseUnits diff selectedPeople ;
5849: LD_ADDR_EXP 76
5853: PUSH
5854: LD_EXP 76
5858: PUSH
5859: LD_VAR 0 3
5863: DIFF
5864: ST_TO_ADDR
// SetClass ( kirovBaseUnits [ 1 ] , 2 ) ;
5865: LD_EXP 76
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: PPUSH
5874: LD_INT 2
5876: PPUSH
5877: CALL_OW 336
// for un in selectedPeople do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5905
// ComExitBuilding ( un ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: CALL_OW 122
5903: GO 5891
5905: POP
5906: POP
// currentTeam := selectedPeople union [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] ;
5907: LD_ADDR_EXP 75
5911: PUSH
5912: LD_VAR 0 3
5916: PUSH
5917: LD_EXP 41
5921: PUSH
5922: LD_EXP 42
5926: PUSH
5927: LD_EXP 44
5931: PUSH
5932: LD_EXP 45
5936: PUSH
5937: LD_EXP 43
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: UNION
5949: ST_TO_ADDR
// AddComMoveXY ( currentTeam , 113 , 97 ) ;
5950: LD_EXP 75
5954: PPUSH
5955: LD_INT 113
5957: PPUSH
5958: LD_INT 97
5960: PPUSH
5961: CALL_OW 171
// for un in kirovBaseUnits do
5965: LD_ADDR_VAR 0 2
5969: PUSH
5970: LD_EXP 76
5974: PUSH
5975: FOR_IN
5976: IFFALSE 6013
// begin if IsInUnit ( un ) = 0 then
5978: LD_VAR 0 2
5982: PPUSH
5983: CALL_OW 310
5987: PUSH
5988: LD_INT 0
5990: EQUAL
5991: IFFALSE 6011
// ComEnterUnit ( un , kirovBarracks [ 1 ] ) ;
5993: LD_VAR 0 2
5997: PPUSH
5998: LD_EXP 64
6002: PUSH
6003: LD_INT 1
6005: ARRAY
6006: PPUSH
6007: CALL_OW 120
// end ;
6011: GO 5975
6013: POP
6014: POP
// ChangeMissionObjectives ( M1 ) ;
6015: LD_STRING M1
6017: PPUSH
6018: CALL_OW 337
// Query ( QReadyInfo ) ;
6022: LD_STRING QReadyInfo
6024: PPUSH
6025: CALL_OW 97
// counterEnable := true ;
6029: LD_ADDR_EXP 77
6033: PUSH
6034: LD_INT 1
6036: ST_TO_ADDR
// wait ( 0 0$5 ) ;
6037: LD_INT 175
6039: PPUSH
6040: CALL_OW 67
// for un in kirovBaseUnits do
6044: LD_ADDR_VAR 0 2
6048: PUSH
6049: LD_EXP 76
6053: PUSH
6054: FOR_IN
6055: IFFALSE 6108
// begin if IsInUnit ( un ) = 0 and not GetClass ( un ) = 2 then
6057: LD_VAR 0 2
6061: PPUSH
6062: CALL_OW 310
6066: PUSH
6067: LD_INT 0
6069: EQUAL
6070: PUSH
6071: LD_VAR 0 2
6075: PPUSH
6076: CALL_OW 257
6080: PUSH
6081: LD_INT 2
6083: EQUAL
6084: NOT
6085: AND
6086: IFFALSE 6106
// ComEnterUnit ( un , kirovBarracks [ 2 ] ) ;
6088: LD_VAR 0 2
6092: PPUSH
6093: LD_EXP 64
6097: PUSH
6098: LD_INT 2
6100: ARRAY
6101: PPUSH
6102: CALL_OW 120
// end ;
6106: GO 6054
6108: POP
6109: POP
// UpgradeKirovBase ;
6110: CALL 1833 0 0
// end ;
6114: LD_VAR 0 1
6118: RET
// every 0 0$1 trigger counterEnable do var veh , hum , i ;
6119: LD_EXP 77
6123: IFFALSE 6616
6125: GO 6127
6127: DISABLE
6128: LD_INT 0
6130: PPUSH
6131: PPUSH
6132: PPUSH
// begin enable ;
6133: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) ;
6134: LD_ADDR_VAR 0 1
6138: PUSH
6139: LD_INT 22
6141: PUSH
6142: LD_INT 3
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 21
6151: PUSH
6152: LD_INT 2
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: LD_INT 34
6164: PUSH
6165: LD_INT 51
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 69
6185: ST_TO_ADDR
// hum = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + kurinVehNeeded ;
6186: LD_ADDR_VAR 0 2
6190: PUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 3
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PPUSH
6215: CALL_OW 69
6219: PUSH
6220: LD_EXP 32
6224: PLUS
6225: ST_TO_ADDR
// ticks = ticks + 0 0$01 ;
6226: LD_ADDR_EXP 79
6230: PUSH
6231: LD_EXP 79
6235: PUSH
6236: LD_INT 35
6238: PLUS
6239: ST_TO_ADDR
// VehNeeded = hum - veh ;
6240: LD_ADDR_EXP 37
6244: PUSH
6245: LD_VAR 0 2
6249: PUSH
6250: LD_VAR 0 1
6254: MINUS
6255: ST_TO_ADDR
// timeToArabAttack = timeToArabAttack - 0 0$01 ;
6256: LD_ADDR_EXP 82
6260: PUSH
6261: LD_EXP 82
6265: PUSH
6266: LD_INT 35
6268: MINUS
6269: ST_TO_ADDR
// case counterIndex of 1 :
6270: LD_EXP 78
6274: PUSH
6275: LD_INT 1
6277: DOUBLE
6278: EQUAL
6279: IFTRUE 6283
6281: GO 6366
6283: POP
// begin if VehNeeded <= 0 then
6284: LD_EXP 37
6288: PUSH
6289: LD_INT 0
6291: LESSEQUAL
6292: IFFALSE 6320
// display_strings = [ #Ru03-5a ] ^ [ #Ru03-4 , timeToPrepareAttack ] else
6294: LD_ADDR_OWVAR 47
6298: PUSH
6299: LD_STRING #Ru03-5a
6301: PUSH
6302: EMPTY
6303: LIST
6304: PUSH
6305: LD_STRING #Ru03-4
6307: PUSH
6308: LD_EXP 81
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: ADD
6317: ST_TO_ADDR
6318: GO 6350
// display_strings = [ #Ru03-5 , VehNeeded ] ^ [ #Ru03-4 , timeToPrepareAttack ] ;
6320: LD_ADDR_OWVAR 47
6324: PUSH
6325: LD_STRING #Ru03-5
6327: PUSH
6328: LD_EXP 37
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: PUSH
6337: LD_STRING #Ru03-4
6339: PUSH
6340: LD_EXP 81
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: ADD
6349: ST_TO_ADDR
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ;
6350: LD_ADDR_EXP 81
6354: PUSH
6355: LD_EXP 81
6359: PUSH
6360: LD_INT 35
6362: MINUS
6363: ST_TO_ADDR
// end ; 2 :
6364: GO 6493
6366: LD_INT 2
6368: DOUBLE
6369: EQUAL
6370: IFTRUE 6374
6372: GO 6408
6374: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
6375: LD_ADDR_OWVAR 47
6379: PUSH
6380: LD_STRING #Ru03-1
6382: PUSH
6383: LD_EXP 21
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
6392: LD_ADDR_EXP 21
6396: PUSH
6397: LD_EXP 21
6401: PUSH
6402: LD_INT 35
6404: MINUS
6405: ST_TO_ADDR
// end ; 3 :
6406: GO 6493
6408: LD_INT 3
6410: DOUBLE
6411: EQUAL
6412: IFTRUE 6416
6414: GO 6450
6416: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
6417: LD_ADDR_OWVAR 47
6421: PUSH
6422: LD_STRING #Ru03-2
6424: PUSH
6425: LD_EXP 21
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
6434: LD_ADDR_EXP 21
6438: PUSH
6439: LD_EXP 21
6443: PUSH
6444: LD_INT 35
6446: MINUS
6447: ST_TO_ADDR
// end ; 4 :
6448: GO 6493
6450: LD_INT 4
6452: DOUBLE
6453: EQUAL
6454: IFTRUE 6458
6456: GO 6492
6458: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
6459: LD_ADDR_OWVAR 47
6463: PUSH
6464: LD_STRING #Ru03-3
6466: PUSH
6467: LD_EXP 20
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
6476: LD_ADDR_EXP 20
6480: PUSH
6481: LD_EXP 20
6485: PUSH
6486: LD_INT 35
6488: MINUS
6489: ST_TO_ADDR
// end ; end ;
6490: GO 6493
6492: POP
// if ticks = convoyTime [ 1 ] then
6493: LD_EXP 79
6497: PUSH
6498: LD_EXP 80
6502: PUSH
6503: LD_INT 1
6505: ARRAY
6506: EQUAL
6507: IFFALSE 6616
// begin PrepareAmericanConvoy ( amConvoyGroups [ 1 ] [ 1 ] , amConvoyGroups [ 1 ] [ 2 ] , amConvoyGroups [ 1 ] [ 3 ] , amConvoyGroups [ 1 ] [ 4 ] , amConvoyGroups [ 1 ] [ 5 ] , AmTroopsSpawn ) ;
6509: LD_EXP 69
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: PUSH
6518: LD_INT 1
6520: ARRAY
6521: PPUSH
6522: LD_EXP 69
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: PUSH
6531: LD_INT 2
6533: ARRAY
6534: PPUSH
6535: LD_EXP 69
6539: PUSH
6540: LD_INT 1
6542: ARRAY
6543: PUSH
6544: LD_INT 3
6546: ARRAY
6547: PPUSH
6548: LD_EXP 69
6552: PUSH
6553: LD_INT 1
6555: ARRAY
6556: PUSH
6557: LD_INT 4
6559: ARRAY
6560: PPUSH
6561: LD_EXP 69
6565: PUSH
6566: LD_INT 1
6568: ARRAY
6569: PUSH
6570: LD_INT 5
6572: ARRAY
6573: PPUSH
6574: LD_INT 6
6576: PPUSH
6577: CALL 4038 0 6
// PrepareAttackOnRus ( ) ;
6581: CALL 4850 0 0
// wait ( 0 0$1 ) ;
6585: LD_INT 35
6587: PPUSH
6588: CALL_OW 67
// Delete ( amConvoyGroups , 1 ) ;
6592: LD_EXP 69
6596: PPUSH
6597: LD_INT 1
6599: PPUSH
6600: CALL_OW 3
// Delete ( convoyTime , 1 ) ;
6604: LD_EXP 80
6608: PPUSH
6609: LD_INT 1
6611: PPUSH
6612: CALL_OW 3
// end ; end ;
6616: PPOPN 3
6618: END
// every 0 0$1 trigger UnitFilter ( amVehs , [ f_not , [ f_lives , 700 ] ] ) or UnitFilter ( amIntroUnits , [ f_not , [ f_lives , 700 ] ] ) do var i ;
6619: LD_EXP 73
6623: PPUSH
6624: LD_INT 3
6626: PUSH
6627: LD_INT 24
6629: PUSH
6630: LD_INT 700
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PPUSH
6641: CALL_OW 72
6645: PUSH
6646: LD_EXP 68
6650: PPUSH
6651: LD_INT 3
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 700
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PPUSH
6668: CALL_OW 72
6672: OR
6673: IFFALSE 6804
6675: GO 6677
6677: DISABLE
6678: LD_INT 0
6680: PPUSH
// begin enable ;
6681: ENABLE
// for i := 1 to amVehs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_EXP 73
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6741
// begin if GetLives ( amVehs [ i ] ) <= 700 then
6700: LD_EXP 73
6704: PUSH
6705: LD_VAR 0 1
6709: ARRAY
6710: PPUSH
6711: CALL_OW 256
6715: PUSH
6716: LD_INT 700
6718: LESSEQUAL
6719: IFFALSE 6739
// ComMoveToArea ( amVehs [ i ] , amRetreatArea ) ;
6721: LD_EXP 73
6725: PUSH
6726: LD_VAR 0 1
6730: ARRAY
6731: PPUSH
6732: LD_INT 10
6734: PPUSH
6735: CALL_OW 113
// end ;
6739: GO 6697
6741: POP
6742: POP
// for i := 1 to amIntroUnits do
6743: LD_ADDR_VAR 0 1
6747: PUSH
6748: DOUBLE
6749: LD_INT 1
6751: DEC
6752: ST_TO_ADDR
6753: LD_EXP 68
6757: PUSH
6758: FOR_TO
6759: IFFALSE 6802
// begin if GetLives ( amIntroUnits [ i ] ) <= 700 then
6761: LD_EXP 68
6765: PUSH
6766: LD_VAR 0 1
6770: ARRAY
6771: PPUSH
6772: CALL_OW 256
6776: PUSH
6777: LD_INT 700
6779: LESSEQUAL
6780: IFFALSE 6800
// ComMoveToArea ( amIntroUnits [ i ] , amRetreatArea ) ;
6782: LD_EXP 68
6786: PUSH
6787: LD_VAR 0 1
6791: ARRAY
6792: PPUSH
6793: LD_INT 10
6795: PPUSH
6796: CALL_OW 113
// end ;
6800: GO 6758
6802: POP
6803: POP
// end ; end_of_file
6804: PPOPN 1
6806: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
6807: LD_INT 0
6809: PPUSH
// ar_miner := 81 ;
6810: LD_ADDR_EXP 90
6814: PUSH
6815: LD_INT 81
6817: ST_TO_ADDR
// ar_crane := 88 ;
6818: LD_ADDR_EXP 89
6822: PUSH
6823: LD_INT 88
6825: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6826: LD_ADDR_EXP 84
6830: PUSH
6831: LD_INT 89
6833: ST_TO_ADDR
// us_hack := 99 ;
6834: LD_ADDR_EXP 85
6838: PUSH
6839: LD_INT 99
6841: ST_TO_ADDR
// us_artillery := 97 ;
6842: LD_ADDR_EXP 86
6846: PUSH
6847: LD_INT 97
6849: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6850: LD_ADDR_EXP 87
6854: PUSH
6855: LD_INT 91
6857: ST_TO_ADDR
// ar_mortar := 92 ;
6858: LD_ADDR_EXP 88
6862: PUSH
6863: LD_INT 92
6865: ST_TO_ADDR
// ru_flamethrower := 93 ;
6866: LD_ADDR_EXP 91
6870: PUSH
6871: LD_INT 93
6873: ST_TO_ADDR
// ru_radar := 98 ;
6874: LD_ADDR_EXP 83
6878: PUSH
6879: LD_INT 98
6881: ST_TO_ADDR
// tech_Artillery := 80 ;
6882: LD_ADDR_EXP 92
6886: PUSH
6887: LD_INT 80
6889: ST_TO_ADDR
// tech_RadMat := 81 ;
6890: LD_ADDR_EXP 93
6894: PUSH
6895: LD_INT 81
6897: ST_TO_ADDR
// tech_BasicTools := 82 ;
6898: LD_ADDR_EXP 94
6902: PUSH
6903: LD_INT 82
6905: ST_TO_ADDR
// tech_Cargo := 83 ;
6906: LD_ADDR_EXP 95
6910: PUSH
6911: LD_INT 83
6913: ST_TO_ADDR
// tech_Track := 84 ;
6914: LD_ADDR_EXP 96
6918: PUSH
6919: LD_INT 84
6921: ST_TO_ADDR
// tech_Crane := 85 ;
6922: LD_ADDR_EXP 97
6926: PUSH
6927: LD_INT 85
6929: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6930: LD_ADDR_EXP 98
6934: PUSH
6935: LD_INT 86
6937: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6938: LD_ADDR_EXP 99
6942: PUSH
6943: LD_INT 87
6945: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
6946: LD_ADDR_EXP 100
6950: PUSH
6951: LD_INT 88
6953: ST_TO_ADDR
// class_mastodont := 31 ;
6954: LD_ADDR_EXP 101
6958: PUSH
6959: LD_INT 31
6961: ST_TO_ADDR
// class_horse := 21 ;
6962: LD_ADDR_EXP 102
6966: PUSH
6967: LD_INT 21
6969: ST_TO_ADDR
// end ;
6970: LD_VAR 0 1
6974: RET
// every 1 do
6975: GO 6977
6977: DISABLE
// InitGlobalVariables ; end_of_file
6978: CALL 6807 0 0
6982: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6983: LD_INT 0
6985: PPUSH
6986: PPUSH
// if exist_mode then
6987: LD_VAR 0 2
6991: IFFALSE 7016
// unit := CreateCharacter ( prefix & ident ) else
6993: LD_ADDR_VAR 0 5
6997: PUSH
6998: LD_VAR 0 3
7002: PUSH
7003: LD_VAR 0 1
7007: STR
7008: PPUSH
7009: CALL_OW 34
7013: ST_TO_ADDR
7014: GO 7031
// unit := NewCharacter ( ident ) ;
7016: LD_ADDR_VAR 0 5
7020: PUSH
7021: LD_VAR 0 1
7025: PPUSH
7026: CALL_OW 25
7030: ST_TO_ADDR
// result := unit ;
7031: LD_ADDR_VAR 0 4
7035: PUSH
7036: LD_VAR 0 5
7040: ST_TO_ADDR
// end ;
7041: LD_VAR 0 4
7045: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
7046: LD_INT 0
7048: PPUSH
7049: PPUSH
// if not side or not nation then
7050: LD_VAR 0 1
7054: NOT
7055: PUSH
7056: LD_VAR 0 2
7060: NOT
7061: OR
7062: IFFALSE 7066
// exit ;
7064: GO 7834
// case nation of nation_american :
7066: LD_VAR 0 2
7070: PUSH
7071: LD_INT 1
7073: DOUBLE
7074: EQUAL
7075: IFTRUE 7079
7077: GO 7293
7079: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
7080: LD_ADDR_VAR 0 4
7084: PUSH
7085: LD_INT 35
7087: PUSH
7088: LD_INT 45
7090: PUSH
7091: LD_INT 46
7093: PUSH
7094: LD_INT 47
7096: PUSH
7097: LD_INT 82
7099: PUSH
7100: LD_INT 83
7102: PUSH
7103: LD_INT 84
7105: PUSH
7106: LD_INT 85
7108: PUSH
7109: LD_INT 86
7111: PUSH
7112: LD_INT 1
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: LD_INT 6
7120: PUSH
7121: LD_INT 15
7123: PUSH
7124: LD_INT 16
7126: PUSH
7127: LD_INT 7
7129: PUSH
7130: LD_INT 12
7132: PUSH
7133: LD_INT 13
7135: PUSH
7136: LD_INT 10
7138: PUSH
7139: LD_INT 14
7141: PUSH
7142: LD_INT 20
7144: PUSH
7145: LD_INT 21
7147: PUSH
7148: LD_INT 22
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 32
7156: PUSH
7157: LD_INT 27
7159: PUSH
7160: LD_INT 36
7162: PUSH
7163: LD_INT 69
7165: PUSH
7166: LD_INT 39
7168: PUSH
7169: LD_INT 34
7171: PUSH
7172: LD_INT 40
7174: PUSH
7175: LD_INT 48
7177: PUSH
7178: LD_INT 49
7180: PUSH
7181: LD_INT 50
7183: PUSH
7184: LD_INT 51
7186: PUSH
7187: LD_INT 52
7189: PUSH
7190: LD_INT 53
7192: PUSH
7193: LD_INT 54
7195: PUSH
7196: LD_INT 55
7198: PUSH
7199: LD_INT 56
7201: PUSH
7202: LD_INT 57
7204: PUSH
7205: LD_INT 58
7207: PUSH
7208: LD_INT 59
7210: PUSH
7211: LD_INT 60
7213: PUSH
7214: LD_INT 61
7216: PUSH
7217: LD_INT 62
7219: PUSH
7220: LD_INT 80
7222: PUSH
7223: LD_INT 82
7225: PUSH
7226: LD_INT 83
7228: PUSH
7229: LD_INT 84
7231: PUSH
7232: LD_INT 85
7234: PUSH
7235: LD_INT 86
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: ST_TO_ADDR
7291: GO 7758
7293: LD_INT 2
7295: DOUBLE
7296: EQUAL
7297: IFTRUE 7301
7299: GO 7527
7301: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
7302: LD_ADDR_VAR 0 4
7306: PUSH
7307: LD_INT 35
7309: PUSH
7310: LD_INT 45
7312: PUSH
7313: LD_INT 46
7315: PUSH
7316: LD_INT 47
7318: PUSH
7319: LD_INT 82
7321: PUSH
7322: LD_INT 83
7324: PUSH
7325: LD_INT 84
7327: PUSH
7328: LD_INT 85
7330: PUSH
7331: LD_INT 87
7333: PUSH
7334: LD_INT 70
7336: PUSH
7337: LD_INT 1
7339: PUSH
7340: LD_INT 11
7342: PUSH
7343: LD_INT 3
7345: PUSH
7346: LD_INT 4
7348: PUSH
7349: LD_INT 5
7351: PUSH
7352: LD_INT 6
7354: PUSH
7355: LD_INT 15
7357: PUSH
7358: LD_INT 18
7360: PUSH
7361: LD_INT 7
7363: PUSH
7364: LD_INT 17
7366: PUSH
7367: LD_INT 8
7369: PUSH
7370: LD_INT 20
7372: PUSH
7373: LD_INT 21
7375: PUSH
7376: LD_INT 22
7378: PUSH
7379: LD_INT 72
7381: PUSH
7382: LD_INT 26
7384: PUSH
7385: LD_INT 69
7387: PUSH
7388: LD_INT 39
7390: PUSH
7391: LD_INT 40
7393: PUSH
7394: LD_INT 41
7396: PUSH
7397: LD_INT 42
7399: PUSH
7400: LD_INT 43
7402: PUSH
7403: LD_INT 48
7405: PUSH
7406: LD_INT 49
7408: PUSH
7409: LD_INT 50
7411: PUSH
7412: LD_INT 51
7414: PUSH
7415: LD_INT 52
7417: PUSH
7418: LD_INT 53
7420: PUSH
7421: LD_INT 54
7423: PUSH
7424: LD_INT 55
7426: PUSH
7427: LD_INT 56
7429: PUSH
7430: LD_INT 60
7432: PUSH
7433: LD_INT 61
7435: PUSH
7436: LD_INT 62
7438: PUSH
7439: LD_INT 66
7441: PUSH
7442: LD_INT 67
7444: PUSH
7445: LD_INT 68
7447: PUSH
7448: LD_INT 81
7450: PUSH
7451: LD_INT 82
7453: PUSH
7454: LD_INT 83
7456: PUSH
7457: LD_INT 84
7459: PUSH
7460: LD_INT 85
7462: PUSH
7463: LD_INT 87
7465: PUSH
7466: LD_INT 88
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: ST_TO_ADDR
7525: GO 7758
7527: LD_INT 3
7529: DOUBLE
7530: EQUAL
7531: IFTRUE 7535
7533: GO 7757
7535: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
7536: LD_ADDR_VAR 0 4
7540: PUSH
7541: LD_INT 46
7543: PUSH
7544: LD_INT 47
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: LD_INT 2
7552: PUSH
7553: LD_INT 82
7555: PUSH
7556: LD_INT 83
7558: PUSH
7559: LD_INT 84
7561: PUSH
7562: LD_INT 85
7564: PUSH
7565: LD_INT 86
7567: PUSH
7568: LD_INT 11
7570: PUSH
7571: LD_INT 9
7573: PUSH
7574: LD_INT 20
7576: PUSH
7577: LD_INT 19
7579: PUSH
7580: LD_INT 21
7582: PUSH
7583: LD_INT 24
7585: PUSH
7586: LD_INT 22
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 28
7594: PUSH
7595: LD_INT 29
7597: PUSH
7598: LD_INT 30
7600: PUSH
7601: LD_INT 31
7603: PUSH
7604: LD_INT 37
7606: PUSH
7607: LD_INT 38
7609: PUSH
7610: LD_INT 32
7612: PUSH
7613: LD_INT 27
7615: PUSH
7616: LD_INT 33
7618: PUSH
7619: LD_INT 69
7621: PUSH
7622: LD_INT 39
7624: PUSH
7625: LD_INT 34
7627: PUSH
7628: LD_INT 40
7630: PUSH
7631: LD_INT 71
7633: PUSH
7634: LD_INT 23
7636: PUSH
7637: LD_INT 44
7639: PUSH
7640: LD_INT 48
7642: PUSH
7643: LD_INT 49
7645: PUSH
7646: LD_INT 50
7648: PUSH
7649: LD_INT 51
7651: PUSH
7652: LD_INT 52
7654: PUSH
7655: LD_INT 53
7657: PUSH
7658: LD_INT 54
7660: PUSH
7661: LD_INT 55
7663: PUSH
7664: LD_INT 56
7666: PUSH
7667: LD_INT 57
7669: PUSH
7670: LD_INT 58
7672: PUSH
7673: LD_INT 59
7675: PUSH
7676: LD_INT 63
7678: PUSH
7679: LD_INT 64
7681: PUSH
7682: LD_INT 65
7684: PUSH
7685: LD_INT 82
7687: PUSH
7688: LD_INT 83
7690: PUSH
7691: LD_INT 84
7693: PUSH
7694: LD_INT 85
7696: PUSH
7697: LD_INT 86
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: ST_TO_ADDR
7755: GO 7758
7757: POP
// if state > - 1 and state < 3 then
7758: LD_VAR 0 3
7762: PUSH
7763: LD_INT 1
7765: NEG
7766: GREATER
7767: PUSH
7768: LD_VAR 0 3
7772: PUSH
7773: LD_INT 3
7775: LESS
7776: AND
7777: IFFALSE 7834
// for i in result do
7779: LD_ADDR_VAR 0 5
7783: PUSH
7784: LD_VAR 0 4
7788: PUSH
7789: FOR_IN
7790: IFFALSE 7832
// if GetTech ( i , side ) <> state then
7792: LD_VAR 0 5
7796: PPUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 321
7806: PUSH
7807: LD_VAR 0 3
7811: NONEQUAL
7812: IFFALSE 7830
// result := result diff i ;
7814: LD_ADDR_VAR 0 4
7818: PUSH
7819: LD_VAR 0 4
7823: PUSH
7824: LD_VAR 0 5
7828: DIFF
7829: ST_TO_ADDR
7830: GO 7789
7832: POP
7833: POP
// end ;
7834: LD_VAR 0 4
7838: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7839: LD_INT 0
7841: PPUSH
7842: PPUSH
7843: PPUSH
// result := true ;
7844: LD_ADDR_VAR 0 3
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7852: LD_ADDR_VAR 0 5
7856: PUSH
7857: LD_VAR 0 2
7861: PPUSH
7862: CALL_OW 480
7866: ST_TO_ADDR
// if not tmp then
7867: LD_VAR 0 5
7871: NOT
7872: IFFALSE 7876
// exit ;
7874: GO 7925
// for i in tmp do
7876: LD_ADDR_VAR 0 4
7880: PUSH
7881: LD_VAR 0 5
7885: PUSH
7886: FOR_IN
7887: IFFALSE 7923
// if GetTech ( i , side ) <> state_researched then
7889: LD_VAR 0 4
7893: PPUSH
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 321
7903: PUSH
7904: LD_INT 2
7906: NONEQUAL
7907: IFFALSE 7921
// begin result := false ;
7909: LD_ADDR_VAR 0 3
7913: PUSH
7914: LD_INT 0
7916: ST_TO_ADDR
// exit ;
7917: POP
7918: POP
7919: GO 7925
// end ;
7921: GO 7886
7923: POP
7924: POP
// end ;
7925: LD_VAR 0 3
7929: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7930: LD_INT 0
7932: PPUSH
7933: PPUSH
7934: PPUSH
7935: PPUSH
7936: PPUSH
7937: PPUSH
7938: PPUSH
7939: PPUSH
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7945: LD_VAR 0 1
7949: NOT
7950: PUSH
7951: LD_VAR 0 1
7955: PPUSH
7956: CALL_OW 257
7960: PUSH
7961: LD_INT 9
7963: NONEQUAL
7964: OR
7965: IFFALSE 7969
// exit ;
7967: GO 8542
// side := GetSide ( unit ) ;
7969: LD_ADDR_VAR 0 9
7973: PUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: CALL_OW 255
7983: ST_TO_ADDR
// tech_space := tech_spacanom ;
7984: LD_ADDR_VAR 0 12
7988: PUSH
7989: LD_INT 29
7991: ST_TO_ADDR
// tech_time := tech_taurad ;
7992: LD_ADDR_VAR 0 13
7996: PUSH
7997: LD_INT 28
7999: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
8000: LD_ADDR_VAR 0 11
8004: PUSH
8005: LD_VAR 0 1
8009: PPUSH
8010: CALL_OW 310
8014: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
8015: LD_VAR 0 11
8019: PPUSH
8020: CALL_OW 247
8024: PUSH
8025: LD_INT 2
8027: EQUAL
8028: IFFALSE 8032
// exit ;
8030: GO 8542
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8032: LD_ADDR_VAR 0 8
8036: PUSH
8037: LD_INT 81
8039: PUSH
8040: LD_VAR 0 9
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 3
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 3
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PPUSH
8070: CALL_OW 69
8074: ST_TO_ADDR
// if not tmp then
8075: LD_VAR 0 8
8079: NOT
8080: IFFALSE 8084
// exit ;
8082: GO 8542
// if in_unit then
8084: LD_VAR 0 11
8088: IFFALSE 8112
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
8090: LD_ADDR_VAR 0 10
8094: PUSH
8095: LD_VAR 0 8
8099: PPUSH
8100: LD_VAR 0 11
8104: PPUSH
8105: CALL_OW 74
8109: ST_TO_ADDR
8110: GO 8132
// enemy := NearestUnitToUnit ( tmp , unit ) ;
8112: LD_ADDR_VAR 0 10
8116: PUSH
8117: LD_VAR 0 8
8121: PPUSH
8122: LD_VAR 0 1
8126: PPUSH
8127: CALL_OW 74
8131: ST_TO_ADDR
// if not enemy then
8132: LD_VAR 0 10
8136: NOT
8137: IFFALSE 8141
// exit ;
8139: GO 8542
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
8141: LD_VAR 0 11
8145: PUSH
8146: LD_VAR 0 11
8150: PPUSH
8151: LD_VAR 0 10
8155: PPUSH
8156: CALL_OW 296
8160: PUSH
8161: LD_INT 13
8163: GREATER
8164: AND
8165: PUSH
8166: LD_VAR 0 1
8170: PPUSH
8171: LD_VAR 0 10
8175: PPUSH
8176: CALL_OW 296
8180: PUSH
8181: LD_INT 12
8183: GREATER
8184: OR
8185: IFFALSE 8189
// exit ;
8187: GO 8542
// missile := [ 1 ] ;
8189: LD_ADDR_VAR 0 14
8193: PUSH
8194: LD_INT 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: ST_TO_ADDR
// if Researched ( side , tech_space ) then
8200: LD_VAR 0 9
8204: PPUSH
8205: LD_VAR 0 12
8209: PPUSH
8210: CALL_OW 325
8214: IFFALSE 8243
// missile := Replace ( missile , missile + 1 , 2 ) ;
8216: LD_ADDR_VAR 0 14
8220: PUSH
8221: LD_VAR 0 14
8225: PPUSH
8226: LD_VAR 0 14
8230: PUSH
8231: LD_INT 1
8233: PLUS
8234: PPUSH
8235: LD_INT 2
8237: PPUSH
8238: CALL_OW 1
8242: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
8243: LD_VAR 0 9
8247: PPUSH
8248: LD_VAR 0 13
8252: PPUSH
8253: CALL_OW 325
8257: PUSH
8258: LD_VAR 0 10
8262: PPUSH
8263: CALL_OW 255
8267: PPUSH
8268: LD_VAR 0 13
8272: PPUSH
8273: CALL_OW 325
8277: NOT
8278: AND
8279: IFFALSE 8308
// missile := Replace ( missile , missile + 1 , 3 ) ;
8281: LD_ADDR_VAR 0 14
8285: PUSH
8286: LD_VAR 0 14
8290: PPUSH
8291: LD_VAR 0 14
8295: PUSH
8296: LD_INT 1
8298: PLUS
8299: PPUSH
8300: LD_INT 3
8302: PPUSH
8303: CALL_OW 1
8307: ST_TO_ADDR
// if missile < 2 then
8308: LD_VAR 0 14
8312: PUSH
8313: LD_INT 2
8315: LESS
8316: IFFALSE 8320
// exit ;
8318: GO 8542
// x := GetX ( enemy ) ;
8320: LD_ADDR_VAR 0 4
8324: PUSH
8325: LD_VAR 0 10
8329: PPUSH
8330: CALL_OW 250
8334: ST_TO_ADDR
// y := GetY ( enemy ) ;
8335: LD_ADDR_VAR 0 5
8339: PUSH
8340: LD_VAR 0 10
8344: PPUSH
8345: CALL_OW 251
8349: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_VAR 0 4
8359: PUSH
8360: LD_INT 1
8362: NEG
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: CALL_OW 12
8371: PLUS
8372: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
8373: LD_ADDR_VAR 0 7
8377: PUSH
8378: LD_VAR 0 5
8382: PUSH
8383: LD_INT 1
8385: NEG
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 12
8394: PLUS
8395: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8396: LD_VAR 0 6
8400: PPUSH
8401: LD_VAR 0 7
8405: PPUSH
8406: CALL_OW 488
8410: NOT
8411: IFFALSE 8433
// begin _x := x ;
8413: LD_ADDR_VAR 0 6
8417: PUSH
8418: LD_VAR 0 4
8422: ST_TO_ADDR
// _y := y ;
8423: LD_ADDR_VAR 0 7
8427: PUSH
8428: LD_VAR 0 5
8432: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
8433: LD_ADDR_VAR 0 3
8437: PUSH
8438: LD_INT 1
8440: PPUSH
8441: LD_VAR 0 14
8445: PPUSH
8446: CALL_OW 12
8450: ST_TO_ADDR
// case i of 1 :
8451: LD_VAR 0 3
8455: PUSH
8456: LD_INT 1
8458: DOUBLE
8459: EQUAL
8460: IFTRUE 8464
8462: GO 8481
8464: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
8465: LD_VAR 0 1
8469: PPUSH
8470: LD_VAR 0 10
8474: PPUSH
8475: CALL_OW 115
8479: GO 8542
8481: LD_INT 2
8483: DOUBLE
8484: EQUAL
8485: IFTRUE 8489
8487: GO 8511
8489: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
8490: LD_VAR 0 1
8494: PPUSH
8495: LD_VAR 0 6
8499: PPUSH
8500: LD_VAR 0 7
8504: PPUSH
8505: CALL_OW 153
8509: GO 8542
8511: LD_INT 3
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8541
8519: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_VAR 0 6
8529: PPUSH
8530: LD_VAR 0 7
8534: PPUSH
8535: CALL_OW 154
8539: GO 8542
8541: POP
// end ;
8542: LD_VAR 0 2
8546: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
// if not unit or not building then
8555: LD_VAR 0 1
8559: NOT
8560: PUSH
8561: LD_VAR 0 2
8565: NOT
8566: OR
8567: IFFALSE 8571
// exit ;
8569: GO 8729
// x := GetX ( building ) ;
8571: LD_ADDR_VAR 0 5
8575: PUSH
8576: LD_VAR 0 2
8580: PPUSH
8581: CALL_OW 250
8585: ST_TO_ADDR
// y := GetY ( building ) ;
8586: LD_ADDR_VAR 0 6
8590: PUSH
8591: LD_VAR 0 2
8595: PPUSH
8596: CALL_OW 251
8600: ST_TO_ADDR
// for i = 0 to 5 do
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: DOUBLE
8607: LD_INT 0
8609: DEC
8610: ST_TO_ADDR
8611: LD_INT 5
8613: PUSH
8614: FOR_TO
8615: IFFALSE 8727
// begin _x := ShiftX ( x , i , 3 ) ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_VAR 0 5
8626: PPUSH
8627: LD_VAR 0 4
8631: PPUSH
8632: LD_INT 3
8634: PPUSH
8635: CALL_OW 272
8639: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8640: LD_ADDR_VAR 0 8
8644: PUSH
8645: LD_VAR 0 6
8649: PPUSH
8650: LD_VAR 0 4
8654: PPUSH
8655: LD_INT 3
8657: PPUSH
8658: CALL_OW 273
8662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8663: LD_VAR 0 7
8667: PPUSH
8668: LD_VAR 0 8
8672: PPUSH
8673: CALL_OW 488
8677: NOT
8678: IFFALSE 8682
// continue ;
8680: GO 8614
// if HexInfo ( _x , _y ) = 0 then
8682: LD_VAR 0 7
8686: PPUSH
8687: LD_VAR 0 8
8691: PPUSH
8692: CALL_OW 428
8696: PUSH
8697: LD_INT 0
8699: EQUAL
8700: IFFALSE 8725
// begin ComMoveXY ( unit , _x , _y ) ;
8702: LD_VAR 0 1
8706: PPUSH
8707: LD_VAR 0 7
8711: PPUSH
8712: LD_VAR 0 8
8716: PPUSH
8717: CALL_OW 111
// exit ;
8721: POP
8722: POP
8723: GO 8729
// end ; end ;
8725: GO 8614
8727: POP
8728: POP
// end ;
8729: LD_VAR 0 3
8733: RET
// export function ScanBase ( side , base_area ) ; begin
8734: LD_INT 0
8736: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8737: LD_ADDR_VAR 0 3
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: LD_INT 81
8749: PUSH
8750: LD_VAR 0 1
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 70
8763: ST_TO_ADDR
// end ;
8764: LD_VAR 0 3
8768: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8769: LD_INT 0
8771: PPUSH
8772: PPUSH
8773: PPUSH
8774: PPUSH
// result := false ;
8775: LD_ADDR_VAR 0 2
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// side := GetSide ( unit ) ;
8783: LD_ADDR_VAR 0 3
8787: PUSH
8788: LD_VAR 0 1
8792: PPUSH
8793: CALL_OW 255
8797: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8798: LD_ADDR_VAR 0 4
8802: PUSH
8803: LD_VAR 0 1
8807: PPUSH
8808: CALL_OW 248
8812: ST_TO_ADDR
// case nat of 1 :
8813: LD_VAR 0 4
8817: PUSH
8818: LD_INT 1
8820: DOUBLE
8821: EQUAL
8822: IFTRUE 8826
8824: GO 8837
8826: POP
// tech := tech_lassight ; 2 :
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: LD_INT 12
8834: ST_TO_ADDR
8835: GO 8876
8837: LD_INT 2
8839: DOUBLE
8840: EQUAL
8841: IFTRUE 8845
8843: GO 8856
8845: POP
// tech := tech_mortar ; 3 :
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: LD_INT 41
8853: ST_TO_ADDR
8854: GO 8876
8856: LD_INT 3
8858: DOUBLE
8859: EQUAL
8860: IFTRUE 8864
8862: GO 8875
8864: POP
// tech := tech_bazooka ; end ;
8865: LD_ADDR_VAR 0 5
8869: PUSH
8870: LD_INT 44
8872: ST_TO_ADDR
8873: GO 8876
8875: POP
// if Researched ( side , tech ) then
8876: LD_VAR 0 3
8880: PPUSH
8881: LD_VAR 0 5
8885: PPUSH
8886: CALL_OW 325
8890: IFFALSE 8917
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8892: LD_ADDR_VAR 0 2
8896: PUSH
8897: LD_INT 5
8899: PUSH
8900: LD_INT 8
8902: PUSH
8903: LD_INT 9
8905: PUSH
8906: EMPTY
8907: LIST
8908: LIST
8909: LIST
8910: PUSH
8911: LD_VAR 0 4
8915: ARRAY
8916: ST_TO_ADDR
// end ;
8917: LD_VAR 0 2
8921: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8922: LD_INT 0
8924: PPUSH
8925: PPUSH
8926: PPUSH
// if not mines then
8927: LD_VAR 0 2
8931: NOT
8932: IFFALSE 8936
// exit ;
8934: GO 9080
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: LD_INT 81
8943: PUSH
8944: LD_VAR 0 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 21
8958: PUSH
8959: LD_INT 3
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PPUSH
8974: CALL_OW 69
8978: ST_TO_ADDR
// for i in mines do
8979: LD_ADDR_VAR 0 4
8983: PUSH
8984: LD_VAR 0 2
8988: PUSH
8989: FOR_IN
8990: IFFALSE 9078
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8992: LD_VAR 0 4
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PPUSH
9001: LD_VAR 0 4
9005: PUSH
9006: LD_INT 2
9008: ARRAY
9009: PPUSH
9010: CALL_OW 458
9014: NOT
9015: IFFALSE 9019
// continue ;
9017: GO 8989
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
9019: LD_VAR 0 4
9023: PUSH
9024: LD_INT 1
9026: ARRAY
9027: PPUSH
9028: LD_VAR 0 4
9032: PUSH
9033: LD_INT 2
9035: ARRAY
9036: PPUSH
9037: CALL_OW 428
9041: PUSH
9042: LD_VAR 0 5
9046: IN
9047: IFFALSE 9076
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
9049: LD_VAR 0 4
9053: PUSH
9054: LD_INT 1
9056: ARRAY
9057: PPUSH
9058: LD_VAR 0 4
9062: PUSH
9063: LD_INT 2
9065: ARRAY
9066: PPUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 456
// end ;
9076: GO 8989
9078: POP
9079: POP
// end ;
9080: LD_VAR 0 3
9084: RET
// export function Count ( array ) ; var i ; begin
9085: LD_INT 0
9087: PPUSH
9088: PPUSH
// result := 0 ;
9089: LD_ADDR_VAR 0 2
9093: PUSH
9094: LD_INT 0
9096: ST_TO_ADDR
// for i in array do
9097: LD_ADDR_VAR 0 3
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: FOR_IN
9108: IFFALSE 9132
// if i then
9110: LD_VAR 0 3
9114: IFFALSE 9130
// result := result + 1 ;
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: LD_VAR 0 2
9125: PUSH
9126: LD_INT 1
9128: PLUS
9129: ST_TO_ADDR
9130: GO 9107
9132: POP
9133: POP
// end ;
9134: LD_VAR 0 2
9138: RET
// export function IsEmpty ( building ) ; begin
9139: LD_INT 0
9141: PPUSH
// if not building then
9142: LD_VAR 0 1
9146: NOT
9147: IFFALSE 9151
// exit ;
9149: GO 9194
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
9151: LD_ADDR_VAR 0 2
9155: PUSH
9156: LD_VAR 0 1
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: LD_VAR 0 1
9168: PPUSH
9169: CALL_OW 255
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 58
9180: PUSH
9181: EMPTY
9182: LIST
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PPUSH
9188: CALL_OW 69
9192: IN
9193: ST_TO_ADDR
// end ;
9194: LD_VAR 0 2
9198: RET
// export function IsNotFull ( building ) ; begin
9199: LD_INT 0
9201: PPUSH
// if not building then
9202: LD_VAR 0 1
9206: NOT
9207: IFFALSE 9211
// exit ;
9209: GO 9230
// result := UnitsInside ( building ) < 6 ;
9211: LD_ADDR_VAR 0 2
9215: PUSH
9216: LD_VAR 0 1
9220: PPUSH
9221: CALL_OW 313
9225: PUSH
9226: LD_INT 6
9228: LESS
9229: ST_TO_ADDR
// end ;
9230: LD_VAR 0 2
9234: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
9235: LD_INT 0
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
// tmp := [ ] ;
9241: LD_ADDR_VAR 0 3
9245: PUSH
9246: EMPTY
9247: ST_TO_ADDR
// list := [ ] ;
9248: LD_ADDR_VAR 0 5
9252: PUSH
9253: EMPTY
9254: ST_TO_ADDR
// for i = 16 to 25 do
9255: LD_ADDR_VAR 0 4
9259: PUSH
9260: DOUBLE
9261: LD_INT 16
9263: DEC
9264: ST_TO_ADDR
9265: LD_INT 25
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9342
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
9271: LD_ADDR_VAR 0 3
9275: PUSH
9276: LD_VAR 0 3
9280: PUSH
9281: LD_INT 22
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 255
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 91
9300: PUSH
9301: LD_VAR 0 1
9305: PUSH
9306: LD_INT 6
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 30
9316: PUSH
9317: LD_VAR 0 4
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: PUSH
9331: EMPTY
9332: LIST
9333: PPUSH
9334: CALL_OW 69
9338: ADD
9339: ST_TO_ADDR
9340: GO 9268
9342: POP
9343: POP
// for i = 1 to tmp do
9344: LD_ADDR_VAR 0 4
9348: PUSH
9349: DOUBLE
9350: LD_INT 1
9352: DEC
9353: ST_TO_ADDR
9354: LD_VAR 0 3
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9448
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
9362: LD_ADDR_VAR 0 5
9366: PUSH
9367: LD_VAR 0 5
9371: PUSH
9372: LD_VAR 0 3
9376: PUSH
9377: LD_VAR 0 4
9381: ARRAY
9382: PPUSH
9383: CALL_OW 266
9387: PUSH
9388: LD_VAR 0 3
9392: PUSH
9393: LD_VAR 0 4
9397: ARRAY
9398: PPUSH
9399: CALL_OW 250
9403: PUSH
9404: LD_VAR 0 3
9408: PUSH
9409: LD_VAR 0 4
9413: ARRAY
9414: PPUSH
9415: CALL_OW 251
9419: PUSH
9420: LD_VAR 0 3
9424: PUSH
9425: LD_VAR 0 4
9429: ARRAY
9430: PPUSH
9431: CALL_OW 254
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: ADD
9445: ST_TO_ADDR
9446: GO 9359
9448: POP
9449: POP
// result := list ;
9450: LD_ADDR_VAR 0 2
9454: PUSH
9455: LD_VAR 0 5
9459: ST_TO_ADDR
// end ;
9460: LD_VAR 0 2
9464: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9465: LD_INT 0
9467: PPUSH
9468: PPUSH
9469: PPUSH
9470: PPUSH
9471: PPUSH
9472: PPUSH
9473: PPUSH
// if not factory then
9474: LD_VAR 0 1
9478: NOT
9479: IFFALSE 9483
// exit ;
9481: GO 10076
// if control = control_apeman then
9483: LD_VAR 0 4
9487: PUSH
9488: LD_INT 5
9490: EQUAL
9491: IFFALSE 9600
// begin tmp := UnitsInside ( factory ) ;
9493: LD_ADDR_VAR 0 8
9497: PUSH
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 313
9507: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9508: LD_VAR 0 8
9512: PPUSH
9513: LD_INT 25
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PPUSH
9523: CALL_OW 72
9527: NOT
9528: IFFALSE 9538
// control := control_manual ;
9530: LD_ADDR_VAR 0 4
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9538: LD_ADDR_VAR 0 8
9542: PUSH
9543: LD_VAR 0 1
9547: PPUSH
9548: CALL 9235 0 1
9552: ST_TO_ADDR
// if tmp then
9553: LD_VAR 0 8
9557: IFFALSE 9600
// begin for i in tmp do
9559: LD_ADDR_VAR 0 7
9563: PUSH
9564: LD_VAR 0 8
9568: PUSH
9569: FOR_IN
9570: IFFALSE 9598
// if i [ 1 ] = b_ext_radio then
9572: LD_VAR 0 7
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PUSH
9581: LD_INT 22
9583: EQUAL
9584: IFFALSE 9596
// begin control := control_remote ;
9586: LD_ADDR_VAR 0 4
9590: PUSH
9591: LD_INT 2
9593: ST_TO_ADDR
// break ;
9594: GO 9598
// end ;
9596: GO 9569
9598: POP
9599: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9600: LD_VAR 0 1
9604: PPUSH
9605: LD_VAR 0 2
9609: PPUSH
9610: LD_VAR 0 3
9614: PPUSH
9615: LD_VAR 0 4
9619: PPUSH
9620: LD_VAR 0 5
9624: PPUSH
9625: CALL_OW 448
9629: IFFALSE 9664
// begin result := [ chassis , engine , control , weapon ] ;
9631: LD_ADDR_VAR 0 6
9635: PUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 3
9645: PUSH
9646: LD_VAR 0 4
9650: PUSH
9651: LD_VAR 0 5
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: ST_TO_ADDR
// exit ;
9662: GO 10076
// end ; _chassis := AvailableChassisList ( factory ) ;
9664: LD_ADDR_VAR 0 9
9668: PUSH
9669: LD_VAR 0 1
9673: PPUSH
9674: CALL_OW 475
9678: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9679: LD_ADDR_VAR 0 11
9683: PUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 476
9693: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9694: LD_ADDR_VAR 0 12
9698: PUSH
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 477
9708: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9709: LD_ADDR_VAR 0 10
9713: PUSH
9714: LD_VAR 0 1
9718: PPUSH
9719: CALL_OW 478
9723: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9724: LD_VAR 0 9
9728: NOT
9729: PUSH
9730: LD_VAR 0 11
9734: NOT
9735: OR
9736: PUSH
9737: LD_VAR 0 12
9741: NOT
9742: OR
9743: PUSH
9744: LD_VAR 0 10
9748: NOT
9749: OR
9750: IFFALSE 9785
// begin result := [ chassis , engine , control , weapon ] ;
9752: LD_ADDR_VAR 0 6
9756: PUSH
9757: LD_VAR 0 2
9761: PUSH
9762: LD_VAR 0 3
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: LD_VAR 0 5
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: ST_TO_ADDR
// exit ;
9783: GO 10076
// end ; if not chassis in _chassis then
9785: LD_VAR 0 2
9789: PUSH
9790: LD_VAR 0 9
9794: IN
9795: NOT
9796: IFFALSE 9822
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9798: LD_ADDR_VAR 0 2
9802: PUSH
9803: LD_VAR 0 9
9807: PUSH
9808: LD_INT 1
9810: PPUSH
9811: LD_VAR 0 9
9815: PPUSH
9816: CALL_OW 12
9820: ARRAY
9821: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9822: LD_VAR 0 2
9826: PPUSH
9827: LD_VAR 0 3
9831: PPUSH
9832: CALL 10081 0 2
9836: NOT
9837: IFFALSE 9896
// repeat engine := _engine [ 1 ] ;
9839: LD_ADDR_VAR 0 3
9843: PUSH
9844: LD_VAR 0 11
9848: PUSH
9849: LD_INT 1
9851: ARRAY
9852: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9853: LD_ADDR_VAR 0 11
9857: PUSH
9858: LD_VAR 0 11
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 3
9870: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9871: LD_VAR 0 2
9875: PPUSH
9876: LD_VAR 0 3
9880: PPUSH
9881: CALL 10081 0 2
9885: PUSH
9886: LD_VAR 0 11
9890: PUSH
9891: EMPTY
9892: EQUAL
9893: OR
9894: IFFALSE 9839
// if not control in _control then
9896: LD_VAR 0 4
9900: PUSH
9901: LD_VAR 0 12
9905: IN
9906: NOT
9907: IFFALSE 9933
// control := _control [ rand ( 1 , _control ) ] ;
9909: LD_ADDR_VAR 0 4
9913: PUSH
9914: LD_VAR 0 12
9918: PUSH
9919: LD_INT 1
9921: PPUSH
9922: LD_VAR 0 12
9926: PPUSH
9927: CALL_OW 12
9931: ARRAY
9932: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9933: LD_VAR 0 2
9937: PPUSH
9938: LD_VAR 0 5
9942: PPUSH
9943: CALL 10301 0 2
9947: NOT
9948: IFFALSE 10007
// repeat weapon := _weapon [ 1 ] ;
9950: LD_ADDR_VAR 0 5
9954: PUSH
9955: LD_VAR 0 10
9959: PUSH
9960: LD_INT 1
9962: ARRAY
9963: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9964: LD_ADDR_VAR 0 10
9968: PUSH
9969: LD_VAR 0 10
9973: PPUSH
9974: LD_INT 1
9976: PPUSH
9977: CALL_OW 3
9981: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9982: LD_VAR 0 2
9986: PPUSH
9987: LD_VAR 0 5
9991: PPUSH
9992: CALL 10301 0 2
9996: PUSH
9997: LD_VAR 0 10
10001: PUSH
10002: EMPTY
10003: EQUAL
10004: OR
10005: IFFALSE 9950
// result := [ ] ;
10007: LD_ADDR_VAR 0 6
10011: PUSH
10012: EMPTY
10013: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10014: LD_VAR 0 1
10018: PPUSH
10019: LD_VAR 0 2
10023: PPUSH
10024: LD_VAR 0 3
10028: PPUSH
10029: LD_VAR 0 4
10033: PPUSH
10034: LD_VAR 0 5
10038: PPUSH
10039: CALL_OW 448
10043: IFFALSE 10076
// result := [ chassis , engine , control , weapon ] ;
10045: LD_ADDR_VAR 0 6
10049: PUSH
10050: LD_VAR 0 2
10054: PUSH
10055: LD_VAR 0 3
10059: PUSH
10060: LD_VAR 0 4
10064: PUSH
10065: LD_VAR 0 5
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// end ;
10076: LD_VAR 0 6
10080: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
10081: LD_INT 0
10083: PPUSH
// if not chassis or not engine then
10084: LD_VAR 0 1
10088: NOT
10089: PUSH
10090: LD_VAR 0 2
10094: NOT
10095: OR
10096: IFFALSE 10100
// exit ;
10098: GO 10296
// case engine of engine_solar :
10100: LD_VAR 0 2
10104: PUSH
10105: LD_INT 2
10107: DOUBLE
10108: EQUAL
10109: IFTRUE 10113
10111: GO 10151
10113: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
10114: LD_ADDR_VAR 0 3
10118: PUSH
10119: LD_INT 11
10121: PUSH
10122: LD_INT 12
10124: PUSH
10125: LD_INT 13
10127: PUSH
10128: LD_INT 14
10130: PUSH
10131: LD_INT 1
10133: PUSH
10134: LD_INT 2
10136: PUSH
10137: LD_INT 3
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: ST_TO_ADDR
10149: GO 10280
10151: LD_INT 1
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10221
10159: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
10160: LD_ADDR_VAR 0 3
10164: PUSH
10165: LD_INT 11
10167: PUSH
10168: LD_INT 12
10170: PUSH
10171: LD_INT 13
10173: PUSH
10174: LD_INT 14
10176: PUSH
10177: LD_INT 1
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: LD_INT 3
10185: PUSH
10186: LD_INT 4
10188: PUSH
10189: LD_INT 5
10191: PUSH
10192: LD_INT 21
10194: PUSH
10195: LD_INT 23
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_INT 24
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: ST_TO_ADDR
10219: GO 10280
10221: LD_INT 3
10223: DOUBLE
10224: EQUAL
10225: IFTRUE 10229
10227: GO 10279
10229: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10230: LD_ADDR_VAR 0 3
10234: PUSH
10235: LD_INT 13
10237: PUSH
10238: LD_INT 14
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: LD_INT 3
10246: PUSH
10247: LD_INT 4
10249: PUSH
10250: LD_INT 5
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 22
10258: PUSH
10259: LD_INT 23
10261: PUSH
10262: LD_INT 24
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: ST_TO_ADDR
10277: GO 10280
10279: POP
// result := ( chassis in result ) ;
10280: LD_ADDR_VAR 0 3
10284: PUSH
10285: LD_VAR 0 1
10289: PUSH
10290: LD_VAR 0 3
10294: IN
10295: ST_TO_ADDR
// end ;
10296: LD_VAR 0 3
10300: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
10301: LD_INT 0
10303: PPUSH
// if not chassis or not weapon then
10304: LD_VAR 0 1
10308: NOT
10309: PUSH
10310: LD_VAR 0 2
10314: NOT
10315: OR
10316: IFFALSE 10320
// exit ;
10318: GO 11382
// case weapon of us_machine_gun :
10320: LD_VAR 0 2
10324: PUSH
10325: LD_INT 2
10327: DOUBLE
10328: EQUAL
10329: IFTRUE 10333
10331: GO 10363
10333: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 2
10344: PUSH
10345: LD_INT 3
10347: PUSH
10348: LD_INT 4
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: ST_TO_ADDR
10361: GO 11366
10363: LD_INT 3
10365: DOUBLE
10366: EQUAL
10367: IFTRUE 10371
10369: GO 10401
10371: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
10372: LD_ADDR_VAR 0 3
10376: PUSH
10377: LD_INT 1
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: LD_INT 3
10385: PUSH
10386: LD_INT 4
10388: PUSH
10389: LD_INT 5
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: ST_TO_ADDR
10399: GO 11366
10401: LD_INT 11
10403: DOUBLE
10404: EQUAL
10405: IFTRUE 10409
10407: GO 10439
10409: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: LD_INT 3
10423: PUSH
10424: LD_INT 4
10426: PUSH
10427: LD_INT 5
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: ST_TO_ADDR
10437: GO 11366
10439: LD_INT 4
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10473
10447: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
10448: LD_ADDR_VAR 0 3
10452: PUSH
10453: LD_INT 2
10455: PUSH
10456: LD_INT 3
10458: PUSH
10459: LD_INT 4
10461: PUSH
10462: LD_INT 5
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: ST_TO_ADDR
10471: GO 11366
10473: LD_INT 5
10475: DOUBLE
10476: EQUAL
10477: IFTRUE 10481
10479: GO 10507
10481: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10482: LD_ADDR_VAR 0 3
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: LD_INT 3
10492: PUSH
10493: LD_INT 4
10495: PUSH
10496: LD_INT 5
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: ST_TO_ADDR
10505: GO 11366
10507: LD_INT 9
10509: DOUBLE
10510: EQUAL
10511: IFTRUE 10515
10513: GO 10541
10515: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10516: LD_ADDR_VAR 0 3
10520: PUSH
10521: LD_INT 2
10523: PUSH
10524: LD_INT 3
10526: PUSH
10527: LD_INT 4
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: ST_TO_ADDR
10539: GO 11366
10541: LD_INT 7
10543: DOUBLE
10544: EQUAL
10545: IFTRUE 10549
10547: GO 10575
10549: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10550: LD_ADDR_VAR 0 3
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: ST_TO_ADDR
10573: GO 11366
10575: LD_INT 12
10577: DOUBLE
10578: EQUAL
10579: IFTRUE 10583
10581: GO 10609
10583: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10584: LD_ADDR_VAR 0 3
10588: PUSH
10589: LD_INT 2
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: LD_INT 4
10597: PUSH
10598: LD_INT 5
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: ST_TO_ADDR
10607: GO 11366
10609: LD_INT 13
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10643
10617: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10618: LD_ADDR_VAR 0 3
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 3
10628: PUSH
10629: LD_INT 4
10631: PUSH
10632: LD_INT 5
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: ST_TO_ADDR
10641: GO 11366
10643: LD_INT 14
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10651
10649: GO 10669
10651: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10652: LD_ADDR_VAR 0 3
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: LD_INT 5
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: ST_TO_ADDR
10667: GO 11366
10669: LD_INT 6
10671: DOUBLE
10672: EQUAL
10673: IFTRUE 10677
10675: GO 10695
10677: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10678: LD_ADDR_VAR 0 3
10682: PUSH
10683: LD_INT 4
10685: PUSH
10686: LD_INT 5
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: ST_TO_ADDR
10693: GO 11366
10695: LD_INT 10
10697: DOUBLE
10698: EQUAL
10699: IFTRUE 10703
10701: GO 10721
10703: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_INT 4
10711: PUSH
10712: LD_INT 5
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: ST_TO_ADDR
10719: GO 11366
10721: LD_INT 22
10723: DOUBLE
10724: EQUAL
10725: IFTRUE 10729
10727: GO 10755
10729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10730: LD_ADDR_VAR 0 3
10734: PUSH
10735: LD_INT 11
10737: PUSH
10738: LD_INT 12
10740: PUSH
10741: LD_INT 13
10743: PUSH
10744: LD_INT 14
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: ST_TO_ADDR
10753: GO 11366
10755: LD_INT 23
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 10789
10763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10764: LD_ADDR_VAR 0 3
10768: PUSH
10769: LD_INT 11
10771: PUSH
10772: LD_INT 12
10774: PUSH
10775: LD_INT 13
10777: PUSH
10778: LD_INT 14
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: ST_TO_ADDR
10787: GO 11366
10789: LD_INT 24
10791: DOUBLE
10792: EQUAL
10793: IFTRUE 10797
10795: GO 10823
10797: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10798: LD_ADDR_VAR 0 3
10802: PUSH
10803: LD_INT 11
10805: PUSH
10806: LD_INT 12
10808: PUSH
10809: LD_INT 13
10811: PUSH
10812: LD_INT 14
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: ST_TO_ADDR
10821: GO 11366
10823: LD_INT 30
10825: DOUBLE
10826: EQUAL
10827: IFTRUE 10831
10829: GO 10857
10831: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_INT 11
10839: PUSH
10840: LD_INT 12
10842: PUSH
10843: LD_INT 13
10845: PUSH
10846: LD_INT 14
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: ST_TO_ADDR
10855: GO 11366
10857: LD_INT 25
10859: DOUBLE
10860: EQUAL
10861: IFTRUE 10865
10863: GO 10883
10865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: LD_INT 13
10873: PUSH
10874: LD_INT 14
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: ST_TO_ADDR
10881: GO 11366
10883: LD_INT 27
10885: DOUBLE
10886: EQUAL
10887: IFTRUE 10891
10889: GO 10909
10891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10892: LD_ADDR_VAR 0 3
10896: PUSH
10897: LD_INT 13
10899: PUSH
10900: LD_INT 14
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: ST_TO_ADDR
10907: GO 11366
10909: LD_EXP 88
10913: DOUBLE
10914: EQUAL
10915: IFTRUE 10919
10917: GO 10945
10919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10920: LD_ADDR_VAR 0 3
10924: PUSH
10925: LD_INT 11
10927: PUSH
10928: LD_INT 12
10930: PUSH
10931: LD_INT 13
10933: PUSH
10934: LD_INT 14
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: ST_TO_ADDR
10943: GO 11366
10945: LD_INT 28
10947: DOUBLE
10948: EQUAL
10949: IFTRUE 10953
10951: GO 10971
10953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10954: LD_ADDR_VAR 0 3
10958: PUSH
10959: LD_INT 13
10961: PUSH
10962: LD_INT 14
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: ST_TO_ADDR
10969: GO 11366
10971: LD_INT 29
10973: DOUBLE
10974: EQUAL
10975: IFTRUE 10979
10977: GO 10997
10979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10980: LD_ADDR_VAR 0 3
10984: PUSH
10985: LD_INT 13
10987: PUSH
10988: LD_INT 14
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: ST_TO_ADDR
10995: GO 11366
10997: LD_INT 31
10999: DOUBLE
11000: EQUAL
11001: IFTRUE 11005
11003: GO 11023
11005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
11006: LD_ADDR_VAR 0 3
11010: PUSH
11011: LD_INT 13
11013: PUSH
11014: LD_INT 14
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: ST_TO_ADDR
11021: GO 11366
11023: LD_INT 26
11025: DOUBLE
11026: EQUAL
11027: IFTRUE 11031
11029: GO 11049
11031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_INT 13
11039: PUSH
11040: LD_INT 14
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: ST_TO_ADDR
11047: GO 11366
11049: LD_INT 42
11051: DOUBLE
11052: EQUAL
11053: IFTRUE 11057
11055: GO 11083
11057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
11058: LD_ADDR_VAR 0 3
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 23
11071: PUSH
11072: LD_INT 24
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: ST_TO_ADDR
11081: GO 11366
11083: LD_INT 43
11085: DOUBLE
11086: EQUAL
11087: IFTRUE 11091
11089: GO 11117
11091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
11092: LD_ADDR_VAR 0 3
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 22
11102: PUSH
11103: LD_INT 23
11105: PUSH
11106: LD_INT 24
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: ST_TO_ADDR
11115: GO 11366
11117: LD_INT 44
11119: DOUBLE
11120: EQUAL
11121: IFTRUE 11125
11123: GO 11151
11125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 22
11136: PUSH
11137: LD_INT 23
11139: PUSH
11140: LD_INT 24
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: ST_TO_ADDR
11149: GO 11366
11151: LD_INT 45
11153: DOUBLE
11154: EQUAL
11155: IFTRUE 11159
11157: GO 11185
11159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_INT 21
11167: PUSH
11168: LD_INT 22
11170: PUSH
11171: LD_INT 23
11173: PUSH
11174: LD_INT 24
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: ST_TO_ADDR
11183: GO 11366
11185: LD_INT 49
11187: DOUBLE
11188: EQUAL
11189: IFTRUE 11193
11191: GO 11219
11193: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
11194: LD_ADDR_VAR 0 3
11198: PUSH
11199: LD_INT 21
11201: PUSH
11202: LD_INT 22
11204: PUSH
11205: LD_INT 23
11207: PUSH
11208: LD_INT 24
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: ST_TO_ADDR
11217: GO 11366
11219: LD_INT 51
11221: DOUBLE
11222: EQUAL
11223: IFTRUE 11227
11225: GO 11253
11227: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
11228: LD_ADDR_VAR 0 3
11232: PUSH
11233: LD_INT 21
11235: PUSH
11236: LD_INT 22
11238: PUSH
11239: LD_INT 23
11241: PUSH
11242: LD_INT 24
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: ST_TO_ADDR
11251: GO 11366
11253: LD_INT 52
11255: DOUBLE
11256: EQUAL
11257: IFTRUE 11261
11259: GO 11287
11261: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
11262: LD_ADDR_VAR 0 3
11266: PUSH
11267: LD_INT 21
11269: PUSH
11270: LD_INT 22
11272: PUSH
11273: LD_INT 23
11275: PUSH
11276: LD_INT 24
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: ST_TO_ADDR
11285: GO 11366
11287: LD_INT 53
11289: DOUBLE
11290: EQUAL
11291: IFTRUE 11295
11293: GO 11313
11295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
11296: LD_ADDR_VAR 0 3
11300: PUSH
11301: LD_INT 23
11303: PUSH
11304: LD_INT 24
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: ST_TO_ADDR
11311: GO 11366
11313: LD_INT 46
11315: DOUBLE
11316: EQUAL
11317: IFTRUE 11321
11319: GO 11339
11321: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
11322: LD_ADDR_VAR 0 3
11326: PUSH
11327: LD_INT 23
11329: PUSH
11330: LD_INT 24
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: ST_TO_ADDR
11337: GO 11366
11339: LD_INT 47
11341: DOUBLE
11342: EQUAL
11343: IFTRUE 11347
11345: GO 11365
11347: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11348: LD_ADDR_VAR 0 3
11352: PUSH
11353: LD_INT 23
11355: PUSH
11356: LD_INT 24
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: ST_TO_ADDR
11363: GO 11366
11365: POP
// result := ( chassis in result ) ;
11366: LD_ADDR_VAR 0 3
11370: PUSH
11371: LD_VAR 0 1
11375: PUSH
11376: LD_VAR 0 3
11380: IN
11381: ST_TO_ADDR
// end ;
11382: LD_VAR 0 3
11386: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
11387: LD_INT 0
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
11393: PPUSH
11394: PPUSH
11395: PPUSH
// result := array ;
11396: LD_ADDR_VAR 0 5
11400: PUSH
11401: LD_VAR 0 1
11405: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
11406: LD_VAR 0 1
11410: NOT
11411: PUSH
11412: LD_VAR 0 2
11416: NOT
11417: OR
11418: PUSH
11419: LD_VAR 0 3
11423: NOT
11424: OR
11425: PUSH
11426: LD_VAR 0 2
11430: PUSH
11431: LD_VAR 0 1
11435: GREATER
11436: OR
11437: PUSH
11438: LD_VAR 0 3
11442: PUSH
11443: LD_VAR 0 1
11447: GREATER
11448: OR
11449: IFFALSE 11453
// exit ;
11451: GO 11749
// if direction then
11453: LD_VAR 0 4
11457: IFFALSE 11521
// begin d := 1 ;
11459: LD_ADDR_VAR 0 9
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// if i_from > i_to then
11467: LD_VAR 0 2
11471: PUSH
11472: LD_VAR 0 3
11476: GREATER
11477: IFFALSE 11503
// length := ( array - i_from ) + i_to else
11479: LD_ADDR_VAR 0 11
11483: PUSH
11484: LD_VAR 0 1
11488: PUSH
11489: LD_VAR 0 2
11493: MINUS
11494: PUSH
11495: LD_VAR 0 3
11499: PLUS
11500: ST_TO_ADDR
11501: GO 11519
// length := i_to - i_from ;
11503: LD_ADDR_VAR 0 11
11507: PUSH
11508: LD_VAR 0 3
11512: PUSH
11513: LD_VAR 0 2
11517: MINUS
11518: ST_TO_ADDR
// end else
11519: GO 11582
// begin d := - 1 ;
11521: LD_ADDR_VAR 0 9
11525: PUSH
11526: LD_INT 1
11528: NEG
11529: ST_TO_ADDR
// if i_from > i_to then
11530: LD_VAR 0 2
11534: PUSH
11535: LD_VAR 0 3
11539: GREATER
11540: IFFALSE 11560
// length := i_from - i_to else
11542: LD_ADDR_VAR 0 11
11546: PUSH
11547: LD_VAR 0 2
11551: PUSH
11552: LD_VAR 0 3
11556: MINUS
11557: ST_TO_ADDR
11558: GO 11582
// length := ( array - i_to ) + i_from ;
11560: LD_ADDR_VAR 0 11
11564: PUSH
11565: LD_VAR 0 1
11569: PUSH
11570: LD_VAR 0 3
11574: MINUS
11575: PUSH
11576: LD_VAR 0 2
11580: PLUS
11581: ST_TO_ADDR
// end ; if not length then
11582: LD_VAR 0 11
11586: NOT
11587: IFFALSE 11591
// exit ;
11589: GO 11749
// tmp := array ;
11591: LD_ADDR_VAR 0 10
11595: PUSH
11596: LD_VAR 0 1
11600: ST_TO_ADDR
// for i = 1 to length do
11601: LD_ADDR_VAR 0 6
11605: PUSH
11606: DOUBLE
11607: LD_INT 1
11609: DEC
11610: ST_TO_ADDR
11611: LD_VAR 0 11
11615: PUSH
11616: FOR_TO
11617: IFFALSE 11737
// begin for j = 1 to array do
11619: LD_ADDR_VAR 0 7
11623: PUSH
11624: DOUBLE
11625: LD_INT 1
11627: DEC
11628: ST_TO_ADDR
11629: LD_VAR 0 1
11633: PUSH
11634: FOR_TO
11635: IFFALSE 11723
// begin k := j + d ;
11637: LD_ADDR_VAR 0 8
11641: PUSH
11642: LD_VAR 0 7
11646: PUSH
11647: LD_VAR 0 9
11651: PLUS
11652: ST_TO_ADDR
// if k > array then
11653: LD_VAR 0 8
11657: PUSH
11658: LD_VAR 0 1
11662: GREATER
11663: IFFALSE 11673
// k := 1 ;
11665: LD_ADDR_VAR 0 8
11669: PUSH
11670: LD_INT 1
11672: ST_TO_ADDR
// if not k then
11673: LD_VAR 0 8
11677: NOT
11678: IFFALSE 11690
// k := array ;
11680: LD_ADDR_VAR 0 8
11684: PUSH
11685: LD_VAR 0 1
11689: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11690: LD_ADDR_VAR 0 10
11694: PUSH
11695: LD_VAR 0 10
11699: PPUSH
11700: LD_VAR 0 8
11704: PPUSH
11705: LD_VAR 0 1
11709: PUSH
11710: LD_VAR 0 7
11714: ARRAY
11715: PPUSH
11716: CALL_OW 1
11720: ST_TO_ADDR
// end ;
11721: GO 11634
11723: POP
11724: POP
// array := tmp ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_VAR 0 10
11734: ST_TO_ADDR
// end ;
11735: GO 11616
11737: POP
11738: POP
// result := array ;
11739: LD_ADDR_VAR 0 5
11743: PUSH
11744: LD_VAR 0 1
11748: ST_TO_ADDR
// end ;
11749: LD_VAR 0 5
11753: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11754: LD_INT 0
11756: PPUSH
11757: PPUSH
// result := 0 ;
11758: LD_ADDR_VAR 0 3
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// if not array or not value in array then
11766: LD_VAR 0 1
11770: NOT
11771: PUSH
11772: LD_VAR 0 2
11776: PUSH
11777: LD_VAR 0 1
11781: IN
11782: NOT
11783: OR
11784: IFFALSE 11788
// exit ;
11786: GO 11842
// for i = 1 to array do
11788: LD_ADDR_VAR 0 4
11792: PUSH
11793: DOUBLE
11794: LD_INT 1
11796: DEC
11797: ST_TO_ADDR
11798: LD_VAR 0 1
11802: PUSH
11803: FOR_TO
11804: IFFALSE 11840
// if value = array [ i ] then
11806: LD_VAR 0 2
11810: PUSH
11811: LD_VAR 0 1
11815: PUSH
11816: LD_VAR 0 4
11820: ARRAY
11821: EQUAL
11822: IFFALSE 11838
// begin result := i ;
11824: LD_ADDR_VAR 0 3
11828: PUSH
11829: LD_VAR 0 4
11833: ST_TO_ADDR
// exit ;
11834: POP
11835: POP
11836: GO 11842
// end ;
11838: GO 11803
11840: POP
11841: POP
// end ;
11842: LD_VAR 0 3
11846: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11847: LD_INT 0
11849: PPUSH
// vc_chassis := chassis ;
11850: LD_ADDR_OWVAR 37
11854: PUSH
11855: LD_VAR 0 1
11859: ST_TO_ADDR
// vc_engine := engine ;
11860: LD_ADDR_OWVAR 39
11864: PUSH
11865: LD_VAR 0 2
11869: ST_TO_ADDR
// vc_control := control ;
11870: LD_ADDR_OWVAR 38
11874: PUSH
11875: LD_VAR 0 3
11879: ST_TO_ADDR
// vc_weapon := weapon ;
11880: LD_ADDR_OWVAR 40
11884: PUSH
11885: LD_VAR 0 4
11889: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11890: LD_ADDR_OWVAR 41
11894: PUSH
11895: LD_VAR 0 5
11899: ST_TO_ADDR
// end ;
11900: LD_VAR 0 6
11904: RET
// export function WantPlant ( unit ) ; var task ; begin
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
// result := false ;
11909: LD_ADDR_VAR 0 2
11913: PUSH
11914: LD_INT 0
11916: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11917: LD_ADDR_VAR 0 3
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 437
11931: ST_TO_ADDR
// if task then
11932: LD_VAR 0 3
11936: IFFALSE 11964
// if task [ 1 ] [ 1 ] = p then
11938: LD_VAR 0 3
11942: PUSH
11943: LD_INT 1
11945: ARRAY
11946: PUSH
11947: LD_INT 1
11949: ARRAY
11950: PUSH
11951: LD_STRING p
11953: EQUAL
11954: IFFALSE 11964
// result := true ;
11956: LD_ADDR_VAR 0 2
11960: PUSH
11961: LD_INT 1
11963: ST_TO_ADDR
// end ;
11964: LD_VAR 0 2
11968: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11969: LD_INT 0
11971: PPUSH
11972: PPUSH
11973: PPUSH
11974: PPUSH
// if pos < 1 then
11975: LD_VAR 0 2
11979: PUSH
11980: LD_INT 1
11982: LESS
11983: IFFALSE 11987
// exit ;
11985: GO 12290
// if pos = 1 then
11987: LD_VAR 0 2
11991: PUSH
11992: LD_INT 1
11994: EQUAL
11995: IFFALSE 12028
// result := Replace ( arr , pos [ 1 ] , value ) else
11997: LD_ADDR_VAR 0 4
12001: PUSH
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: CALL_OW 1
12025: ST_TO_ADDR
12026: GO 12290
// begin tmp := arr ;
12028: LD_ADDR_VAR 0 6
12032: PUSH
12033: LD_VAR 0 1
12037: ST_TO_ADDR
// s_arr := [ tmp ] ;
12038: LD_ADDR_VAR 0 7
12042: PUSH
12043: LD_VAR 0 6
12047: PUSH
12048: EMPTY
12049: LIST
12050: ST_TO_ADDR
// for i = 1 to pos - 1 do
12051: LD_ADDR_VAR 0 5
12055: PUSH
12056: DOUBLE
12057: LD_INT 1
12059: DEC
12060: ST_TO_ADDR
12061: LD_VAR 0 2
12065: PUSH
12066: LD_INT 1
12068: MINUS
12069: PUSH
12070: FOR_TO
12071: IFFALSE 12116
// begin tmp := tmp [ pos [ i ] ] ;
12073: LD_ADDR_VAR 0 6
12077: PUSH
12078: LD_VAR 0 6
12082: PUSH
12083: LD_VAR 0 2
12087: PUSH
12088: LD_VAR 0 5
12092: ARRAY
12093: ARRAY
12094: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
12095: LD_ADDR_VAR 0 7
12099: PUSH
12100: LD_VAR 0 7
12104: PUSH
12105: LD_VAR 0 6
12109: PUSH
12110: EMPTY
12111: LIST
12112: ADD
12113: ST_TO_ADDR
// end ;
12114: GO 12070
12116: POP
12117: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
12118: LD_ADDR_VAR 0 6
12122: PUSH
12123: LD_VAR 0 6
12127: PPUSH
12128: LD_VAR 0 2
12132: PUSH
12133: LD_VAR 0 2
12137: ARRAY
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: CALL_OW 1
12148: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
12149: LD_ADDR_VAR 0 7
12153: PUSH
12154: LD_VAR 0 7
12158: PPUSH
12159: LD_VAR 0 7
12163: PPUSH
12164: LD_VAR 0 6
12168: PPUSH
12169: CALL_OW 1
12173: ST_TO_ADDR
// for i = s_arr downto 2 do
12174: LD_ADDR_VAR 0 5
12178: PUSH
12179: DOUBLE
12180: LD_VAR 0 7
12184: INC
12185: ST_TO_ADDR
12186: LD_INT 2
12188: PUSH
12189: FOR_DOWNTO
12190: IFFALSE 12274
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
12192: LD_ADDR_VAR 0 6
12196: PUSH
12197: LD_VAR 0 7
12201: PUSH
12202: LD_VAR 0 5
12206: PUSH
12207: LD_INT 1
12209: MINUS
12210: ARRAY
12211: PPUSH
12212: LD_VAR 0 2
12216: PUSH
12217: LD_VAR 0 5
12221: PUSH
12222: LD_INT 1
12224: MINUS
12225: ARRAY
12226: PPUSH
12227: LD_VAR 0 7
12231: PUSH
12232: LD_VAR 0 5
12236: ARRAY
12237: PPUSH
12238: CALL_OW 1
12242: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
12243: LD_ADDR_VAR 0 7
12247: PUSH
12248: LD_VAR 0 7
12252: PPUSH
12253: LD_VAR 0 5
12257: PUSH
12258: LD_INT 1
12260: MINUS
12261: PPUSH
12262: LD_VAR 0 6
12266: PPUSH
12267: CALL_OW 1
12271: ST_TO_ADDR
// end ;
12272: GO 12189
12274: POP
12275: POP
// result := s_arr [ 1 ] ;
12276: LD_ADDR_VAR 0 4
12280: PUSH
12281: LD_VAR 0 7
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: ST_TO_ADDR
// end ; end ;
12290: LD_VAR 0 4
12294: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
12295: LD_INT 0
12297: PPUSH
12298: PPUSH
// if not list then
12299: LD_VAR 0 1
12303: NOT
12304: IFFALSE 12308
// exit ;
12306: GO 12399
// i := list [ pos1 ] ;
12308: LD_ADDR_VAR 0 5
12312: PUSH
12313: LD_VAR 0 1
12317: PUSH
12318: LD_VAR 0 2
12322: ARRAY
12323: ST_TO_ADDR
// if not i then
12324: LD_VAR 0 5
12328: NOT
12329: IFFALSE 12333
// exit ;
12331: GO 12399
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_VAR 0 1
12342: PPUSH
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_VAR 0 1
12352: PUSH
12353: LD_VAR 0 3
12357: ARRAY
12358: PPUSH
12359: CALL_OW 1
12363: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
12364: LD_ADDR_VAR 0 1
12368: PUSH
12369: LD_VAR 0 1
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_VAR 0 5
12383: PPUSH
12384: CALL_OW 1
12388: ST_TO_ADDR
// result := list ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 1
12398: ST_TO_ADDR
// end ;
12399: LD_VAR 0 4
12403: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
12404: LD_INT 0
12406: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
12407: LD_ADDR_VAR 0 5
12411: PUSH
12412: LD_VAR 0 1
12416: PPUSH
12417: CALL_OW 250
12421: PPUSH
12422: LD_VAR 0 1
12426: PPUSH
12427: CALL_OW 251
12431: PPUSH
12432: LD_VAR 0 2
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_VAR 0 4
12446: PPUSH
12447: CALL 12457 0 5
12451: ST_TO_ADDR
// end ;
12452: LD_VAR 0 5
12456: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12457: LD_INT 0
12459: PPUSH
12460: PPUSH
12461: PPUSH
12462: PPUSH
// if not list then
12463: LD_VAR 0 3
12467: NOT
12468: IFFALSE 12472
// exit ;
12470: GO 12860
// result := [ ] ;
12472: LD_ADDR_VAR 0 6
12476: PUSH
12477: EMPTY
12478: ST_TO_ADDR
// for i in list do
12479: LD_ADDR_VAR 0 7
12483: PUSH
12484: LD_VAR 0 3
12488: PUSH
12489: FOR_IN
12490: IFFALSE 12692
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12492: LD_ADDR_VAR 0 9
12496: PUSH
12497: LD_VAR 0 7
12501: PPUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: LD_VAR 0 2
12511: PPUSH
12512: CALL_OW 297
12516: ST_TO_ADDR
// if not result then
12517: LD_VAR 0 6
12521: NOT
12522: IFFALSE 12548
// result := [ [ i , tmp ] ] else
12524: LD_ADDR_VAR 0 6
12528: PUSH
12529: LD_VAR 0 7
12533: PUSH
12534: LD_VAR 0 9
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: ST_TO_ADDR
12546: GO 12690
// begin if result [ result ] [ 2 ] < tmp then
12548: LD_VAR 0 6
12552: PUSH
12553: LD_VAR 0 6
12557: ARRAY
12558: PUSH
12559: LD_INT 2
12561: ARRAY
12562: PUSH
12563: LD_VAR 0 9
12567: LESS
12568: IFFALSE 12610
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12570: LD_ADDR_VAR 0 6
12574: PUSH
12575: LD_VAR 0 6
12579: PPUSH
12580: LD_VAR 0 6
12584: PUSH
12585: LD_INT 1
12587: PLUS
12588: PPUSH
12589: LD_VAR 0 7
12593: PUSH
12594: LD_VAR 0 9
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PPUSH
12603: CALL_OW 2
12607: ST_TO_ADDR
12608: GO 12690
// for j = 1 to result do
12610: LD_ADDR_VAR 0 8
12614: PUSH
12615: DOUBLE
12616: LD_INT 1
12618: DEC
12619: ST_TO_ADDR
12620: LD_VAR 0 6
12624: PUSH
12625: FOR_TO
12626: IFFALSE 12688
// begin if tmp < result [ j ] [ 2 ] then
12628: LD_VAR 0 9
12632: PUSH
12633: LD_VAR 0 6
12637: PUSH
12638: LD_VAR 0 8
12642: ARRAY
12643: PUSH
12644: LD_INT 2
12646: ARRAY
12647: LESS
12648: IFFALSE 12686
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12650: LD_ADDR_VAR 0 6
12654: PUSH
12655: LD_VAR 0 6
12659: PPUSH
12660: LD_VAR 0 8
12664: PPUSH
12665: LD_VAR 0 7
12669: PUSH
12670: LD_VAR 0 9
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 2
12683: ST_TO_ADDR
// break ;
12684: GO 12688
// end ; end ;
12686: GO 12625
12688: POP
12689: POP
// end ; end ;
12690: GO 12489
12692: POP
12693: POP
// if result and not asc then
12694: LD_VAR 0 6
12698: PUSH
12699: LD_VAR 0 4
12703: NOT
12704: AND
12705: IFFALSE 12780
// begin tmp := result ;
12707: LD_ADDR_VAR 0 9
12711: PUSH
12712: LD_VAR 0 6
12716: ST_TO_ADDR
// for i = tmp downto 1 do
12717: LD_ADDR_VAR 0 7
12721: PUSH
12722: DOUBLE
12723: LD_VAR 0 9
12727: INC
12728: ST_TO_ADDR
12729: LD_INT 1
12731: PUSH
12732: FOR_DOWNTO
12733: IFFALSE 12778
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12735: LD_ADDR_VAR 0 6
12739: PUSH
12740: LD_VAR 0 6
12744: PPUSH
12745: LD_VAR 0 9
12749: PUSH
12750: LD_VAR 0 7
12754: MINUS
12755: PUSH
12756: LD_INT 1
12758: PLUS
12759: PPUSH
12760: LD_VAR 0 9
12764: PUSH
12765: LD_VAR 0 7
12769: ARRAY
12770: PPUSH
12771: CALL_OW 1
12775: ST_TO_ADDR
12776: GO 12732
12778: POP
12779: POP
// end ; tmp := [ ] ;
12780: LD_ADDR_VAR 0 9
12784: PUSH
12785: EMPTY
12786: ST_TO_ADDR
// if mode then
12787: LD_VAR 0 5
12791: IFFALSE 12860
// begin for i = 1 to result do
12793: LD_ADDR_VAR 0 7
12797: PUSH
12798: DOUBLE
12799: LD_INT 1
12801: DEC
12802: ST_TO_ADDR
12803: LD_VAR 0 6
12807: PUSH
12808: FOR_TO
12809: IFFALSE 12848
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12811: LD_ADDR_VAR 0 9
12815: PUSH
12816: LD_VAR 0 9
12820: PPUSH
12821: LD_VAR 0 7
12825: PPUSH
12826: LD_VAR 0 6
12830: PUSH
12831: LD_VAR 0 7
12835: ARRAY
12836: PUSH
12837: LD_INT 1
12839: ARRAY
12840: PPUSH
12841: CALL_OW 1
12845: ST_TO_ADDR
12846: GO 12808
12848: POP
12849: POP
// result := tmp ;
12850: LD_ADDR_VAR 0 6
12854: PUSH
12855: LD_VAR 0 9
12859: ST_TO_ADDR
// end ; end ;
12860: LD_VAR 0 6
12864: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12865: LD_INT 0
12867: PPUSH
12868: PPUSH
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12873: LD_ADDR_VAR 0 5
12877: PUSH
12878: LD_INT 0
12880: PUSH
12881: LD_INT 0
12883: PUSH
12884: LD_INT 0
12886: PUSH
12887: EMPTY
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: ST_TO_ADDR
// if not x or not y then
12895: LD_VAR 0 2
12899: NOT
12900: PUSH
12901: LD_VAR 0 3
12905: NOT
12906: OR
12907: IFFALSE 12911
// exit ;
12909: GO 14563
// if not range then
12911: LD_VAR 0 4
12915: NOT
12916: IFFALSE 12926
// range := 10 ;
12918: LD_ADDR_VAR 0 4
12922: PUSH
12923: LD_INT 10
12925: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12926: LD_ADDR_VAR 0 8
12930: PUSH
12931: LD_INT 81
12933: PUSH
12934: LD_VAR 0 1
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 92
12945: PUSH
12946: LD_VAR 0 2
12950: PUSH
12951: LD_VAR 0 3
12955: PUSH
12956: LD_VAR 0 4
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: LD_INT 21
12972: PUSH
12973: LD_INT 3
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: PPUSH
12989: CALL_OW 69
12993: ST_TO_ADDR
// if not tmp then
12994: LD_VAR 0 8
12998: NOT
12999: IFFALSE 13003
// exit ;
13001: GO 14563
// for i in tmp do
13003: LD_ADDR_VAR 0 6
13007: PUSH
13008: LD_VAR 0 8
13012: PUSH
13013: FOR_IN
13014: IFFALSE 14538
// begin points := [ 0 , 0 , 0 ] ;
13016: LD_ADDR_VAR 0 9
13020: PUSH
13021: LD_INT 0
13023: PUSH
13024: LD_INT 0
13026: PUSH
13027: LD_INT 0
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: ST_TO_ADDR
// bpoints := 1 ;
13035: LD_ADDR_VAR 0 10
13039: PUSH
13040: LD_INT 1
13042: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13043: LD_VAR 0 6
13047: PPUSH
13048: CALL_OW 247
13052: PUSH
13053: LD_INT 1
13055: DOUBLE
13056: EQUAL
13057: IFTRUE 13061
13059: GO 13639
13061: POP
// begin if GetClass ( i ) = 1 then
13062: LD_VAR 0 6
13066: PPUSH
13067: CALL_OW 257
13071: PUSH
13072: LD_INT 1
13074: EQUAL
13075: IFFALSE 13096
// points := [ 10 , 5 , 3 ] ;
13077: LD_ADDR_VAR 0 9
13081: PUSH
13082: LD_INT 10
13084: PUSH
13085: LD_INT 5
13087: PUSH
13088: LD_INT 3
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
13096: LD_VAR 0 6
13100: PPUSH
13101: CALL_OW 257
13105: PUSH
13106: LD_INT 2
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: LD_INT 4
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: IN
13120: IFFALSE 13141
// points := [ 3 , 2 , 1 ] ;
13122: LD_ADDR_VAR 0 9
13126: PUSH
13127: LD_INT 3
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: ST_TO_ADDR
// if GetClass ( i ) = 5 then
13141: LD_VAR 0 6
13145: PPUSH
13146: CALL_OW 257
13150: PUSH
13151: LD_INT 5
13153: EQUAL
13154: IFFALSE 13175
// points := [ 130 , 5 , 2 ] ;
13156: LD_ADDR_VAR 0 9
13160: PUSH
13161: LD_INT 130
13163: PUSH
13164: LD_INT 5
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: ST_TO_ADDR
// if GetClass ( i ) = 8 then
13175: LD_VAR 0 6
13179: PPUSH
13180: CALL_OW 257
13184: PUSH
13185: LD_INT 8
13187: EQUAL
13188: IFFALSE 13209
// points := [ 35 , 35 , 30 ] ;
13190: LD_ADDR_VAR 0 9
13194: PUSH
13195: LD_INT 35
13197: PUSH
13198: LD_INT 35
13200: PUSH
13201: LD_INT 30
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: ST_TO_ADDR
// if GetClass ( i ) = 9 then
13209: LD_VAR 0 6
13213: PPUSH
13214: CALL_OW 257
13218: PUSH
13219: LD_INT 9
13221: EQUAL
13222: IFFALSE 13243
// points := [ 20 , 55 , 40 ] ;
13224: LD_ADDR_VAR 0 9
13228: PUSH
13229: LD_INT 20
13231: PUSH
13232: LD_INT 55
13234: PUSH
13235: LD_INT 40
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13243: LD_VAR 0 6
13247: PPUSH
13248: CALL_OW 257
13252: PUSH
13253: LD_INT 12
13255: PUSH
13256: LD_INT 16
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: IN
13263: IFFALSE 13284
// points := [ 5 , 3 , 2 ] ;
13265: LD_ADDR_VAR 0 9
13269: PUSH
13270: LD_INT 5
13272: PUSH
13273: LD_INT 3
13275: PUSH
13276: LD_INT 2
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: LIST
13283: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13284: LD_VAR 0 6
13288: PPUSH
13289: CALL_OW 257
13293: PUSH
13294: LD_INT 17
13296: EQUAL
13297: IFFALSE 13318
// points := [ 100 , 50 , 75 ] ;
13299: LD_ADDR_VAR 0 9
13303: PUSH
13304: LD_INT 100
13306: PUSH
13307: LD_INT 50
13309: PUSH
13310: LD_INT 75
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: LIST
13317: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13318: LD_VAR 0 6
13322: PPUSH
13323: CALL_OW 257
13327: PUSH
13328: LD_INT 15
13330: EQUAL
13331: IFFALSE 13352
// points := [ 10 , 5 , 3 ] ;
13333: LD_ADDR_VAR 0 9
13337: PUSH
13338: LD_INT 10
13340: PUSH
13341: LD_INT 5
13343: PUSH
13344: LD_INT 3
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13352: LD_VAR 0 6
13356: PPUSH
13357: CALL_OW 257
13361: PUSH
13362: LD_INT 14
13364: EQUAL
13365: IFFALSE 13386
// points := [ 10 , 0 , 0 ] ;
13367: LD_ADDR_VAR 0 9
13371: PUSH
13372: LD_INT 10
13374: PUSH
13375: LD_INT 0
13377: PUSH
13378: LD_INT 0
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13386: LD_VAR 0 6
13390: PPUSH
13391: CALL_OW 257
13395: PUSH
13396: LD_INT 11
13398: EQUAL
13399: IFFALSE 13420
// points := [ 30 , 10 , 5 ] ;
13401: LD_ADDR_VAR 0 9
13405: PUSH
13406: LD_INT 30
13408: PUSH
13409: LD_INT 10
13411: PUSH
13412: LD_INT 5
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13420: LD_VAR 0 1
13424: PPUSH
13425: LD_INT 5
13427: PPUSH
13428: CALL_OW 321
13432: PUSH
13433: LD_INT 2
13435: EQUAL
13436: IFFALSE 13453
// bpoints := bpoints * 1.8 ;
13438: LD_ADDR_VAR 0 10
13442: PUSH
13443: LD_VAR 0 10
13447: PUSH
13448: LD_REAL  1.80000000000000E+0000
13451: MUL
13452: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13453: LD_VAR 0 6
13457: PPUSH
13458: CALL_OW 257
13462: PUSH
13463: LD_INT 1
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: LD_INT 3
13471: PUSH
13472: LD_INT 4
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: IN
13481: PUSH
13482: LD_VAR 0 1
13486: PPUSH
13487: LD_INT 51
13489: PPUSH
13490: CALL_OW 321
13494: PUSH
13495: LD_INT 2
13497: EQUAL
13498: AND
13499: IFFALSE 13516
// bpoints := bpoints * 1.2 ;
13501: LD_ADDR_VAR 0 10
13505: PUSH
13506: LD_VAR 0 10
13510: PUSH
13511: LD_REAL  1.20000000000000E+0000
13514: MUL
13515: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13516: LD_VAR 0 6
13520: PPUSH
13521: CALL_OW 257
13525: PUSH
13526: LD_INT 5
13528: PUSH
13529: LD_INT 7
13531: PUSH
13532: LD_INT 9
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: IN
13540: PUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: LD_INT 52
13548: PPUSH
13549: CALL_OW 321
13553: PUSH
13554: LD_INT 2
13556: EQUAL
13557: AND
13558: IFFALSE 13575
// bpoints := bpoints * 1.5 ;
13560: LD_ADDR_VAR 0 10
13564: PUSH
13565: LD_VAR 0 10
13569: PUSH
13570: LD_REAL  1.50000000000000E+0000
13573: MUL
13574: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13575: LD_VAR 0 1
13579: PPUSH
13580: LD_INT 66
13582: PPUSH
13583: CALL_OW 321
13587: PUSH
13588: LD_INT 2
13590: EQUAL
13591: IFFALSE 13608
// bpoints := bpoints * 1.1 ;
13593: LD_ADDR_VAR 0 10
13597: PUSH
13598: LD_VAR 0 10
13602: PUSH
13603: LD_REAL  1.10000000000000E+0000
13606: MUL
13607: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13608: LD_ADDR_VAR 0 10
13612: PUSH
13613: LD_VAR 0 10
13617: PUSH
13618: LD_VAR 0 6
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 259
13630: PUSH
13631: LD_REAL  1.15000000000000E+0000
13634: MUL
13635: MUL
13636: ST_TO_ADDR
// end ; unit_vehicle :
13637: GO 14467
13639: LD_INT 2
13641: DOUBLE
13642: EQUAL
13643: IFTRUE 13647
13645: GO 14455
13647: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13648: LD_VAR 0 6
13652: PPUSH
13653: CALL_OW 264
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: LD_INT 42
13663: PUSH
13664: LD_INT 24
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: IN
13672: IFFALSE 13693
// points := [ 25 , 5 , 3 ] ;
13674: LD_ADDR_VAR 0 9
13678: PUSH
13679: LD_INT 25
13681: PUSH
13682: LD_INT 5
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: LIST
13692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13693: LD_VAR 0 6
13697: PPUSH
13698: CALL_OW 264
13702: PUSH
13703: LD_INT 4
13705: PUSH
13706: LD_INT 43
13708: PUSH
13709: LD_INT 25
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: IN
13717: IFFALSE 13738
// points := [ 40 , 15 , 5 ] ;
13719: LD_ADDR_VAR 0 9
13723: PUSH
13724: LD_INT 40
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 5
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: LIST
13737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13738: LD_VAR 0 6
13742: PPUSH
13743: CALL_OW 264
13747: PUSH
13748: LD_INT 3
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: IN
13758: IFFALSE 13779
// points := [ 7 , 25 , 8 ] ;
13760: LD_ADDR_VAR 0 9
13764: PUSH
13765: LD_INT 7
13767: PUSH
13768: LD_INT 25
13770: PUSH
13771: LD_INT 8
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13779: LD_VAR 0 6
13783: PPUSH
13784: CALL_OW 264
13788: PUSH
13789: LD_INT 5
13791: PUSH
13792: LD_INT 27
13794: PUSH
13795: LD_INT 44
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: LIST
13802: IN
13803: IFFALSE 13824
// points := [ 14 , 50 , 16 ] ;
13805: LD_ADDR_VAR 0 9
13809: PUSH
13810: LD_INT 14
13812: PUSH
13813: LD_INT 50
13815: PUSH
13816: LD_INT 16
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13824: LD_VAR 0 6
13828: PPUSH
13829: CALL_OW 264
13833: PUSH
13834: LD_INT 6
13836: PUSH
13837: LD_INT 46
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: IN
13844: IFFALSE 13865
// points := [ 32 , 120 , 70 ] ;
13846: LD_ADDR_VAR 0 9
13850: PUSH
13851: LD_INT 32
13853: PUSH
13854: LD_INT 120
13856: PUSH
13857: LD_INT 70
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13865: LD_VAR 0 6
13869: PPUSH
13870: CALL_OW 264
13874: PUSH
13875: LD_INT 7
13877: PUSH
13878: LD_INT 28
13880: PUSH
13881: LD_INT 45
13883: PUSH
13884: LD_EXP 88
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: IN
13895: IFFALSE 13916
// points := [ 35 , 20 , 45 ] ;
13897: LD_ADDR_VAR 0 9
13901: PUSH
13902: LD_INT 35
13904: PUSH
13905: LD_INT 20
13907: PUSH
13908: LD_INT 45
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13916: LD_VAR 0 6
13920: PPUSH
13921: CALL_OW 264
13925: PUSH
13926: LD_INT 47
13928: PUSH
13929: EMPTY
13930: LIST
13931: IN
13932: IFFALSE 13953
// points := [ 67 , 45 , 75 ] ;
13934: LD_ADDR_VAR 0 9
13938: PUSH
13939: LD_INT 67
13941: PUSH
13942: LD_INT 45
13944: PUSH
13945: LD_INT 75
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13953: LD_VAR 0 6
13957: PPUSH
13958: CALL_OW 264
13962: PUSH
13963: LD_INT 26
13965: PUSH
13966: EMPTY
13967: LIST
13968: IN
13969: IFFALSE 13990
// points := [ 120 , 30 , 80 ] ;
13971: LD_ADDR_VAR 0 9
13975: PUSH
13976: LD_INT 120
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 80
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13990: LD_VAR 0 6
13994: PPUSH
13995: CALL_OW 264
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: EMPTY
14004: LIST
14005: IN
14006: IFFALSE 14027
// points := [ 40 , 1 , 1 ] ;
14008: LD_ADDR_VAR 0 9
14012: PUSH
14013: LD_INT 40
14015: PUSH
14016: LD_INT 1
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14027: LD_VAR 0 6
14031: PPUSH
14032: CALL_OW 264
14036: PUSH
14037: LD_INT 29
14039: PUSH
14040: EMPTY
14041: LIST
14042: IN
14043: IFFALSE 14064
// points := [ 70 , 200 , 400 ] ;
14045: LD_ADDR_VAR 0 9
14049: PUSH
14050: LD_INT 70
14052: PUSH
14053: LD_INT 200
14055: PUSH
14056: LD_INT 400
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: LIST
14063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14064: LD_VAR 0 6
14068: PPUSH
14069: CALL_OW 264
14073: PUSH
14074: LD_INT 14
14076: PUSH
14077: LD_INT 53
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: IN
14084: IFFALSE 14105
// points := [ 40 , 10 , 20 ] ;
14086: LD_ADDR_VAR 0 9
14090: PUSH
14091: LD_INT 40
14093: PUSH
14094: LD_INT 10
14096: PUSH
14097: LD_INT 20
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: LIST
14104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
14105: LD_VAR 0 6
14109: PPUSH
14110: CALL_OW 264
14114: PUSH
14115: LD_INT 9
14117: PUSH
14118: EMPTY
14119: LIST
14120: IN
14121: IFFALSE 14142
// points := [ 5 , 70 , 20 ] ;
14123: LD_ADDR_VAR 0 9
14127: PUSH
14128: LD_INT 5
14130: PUSH
14131: LD_INT 70
14133: PUSH
14134: LD_INT 20
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
14142: LD_VAR 0 6
14146: PPUSH
14147: CALL_OW 264
14151: PUSH
14152: LD_INT 10
14154: PUSH
14155: EMPTY
14156: LIST
14157: IN
14158: IFFALSE 14179
// points := [ 35 , 110 , 70 ] ;
14160: LD_ADDR_VAR 0 9
14164: PUSH
14165: LD_INT 35
14167: PUSH
14168: LD_INT 110
14170: PUSH
14171: LD_INT 70
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
14179: LD_VAR 0 6
14183: PPUSH
14184: CALL_OW 265
14188: PUSH
14189: LD_INT 25
14191: EQUAL
14192: IFFALSE 14213
// points := [ 80 , 65 , 100 ] ;
14194: LD_ADDR_VAR 0 9
14198: PUSH
14199: LD_INT 80
14201: PUSH
14202: LD_INT 65
14204: PUSH
14205: LD_INT 100
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
14213: LD_VAR 0 6
14217: PPUSH
14218: CALL_OW 263
14222: PUSH
14223: LD_INT 1
14225: EQUAL
14226: IFFALSE 14261
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14228: LD_ADDR_VAR 0 10
14232: PUSH
14233: LD_VAR 0 10
14237: PUSH
14238: LD_VAR 0 6
14242: PPUSH
14243: CALL_OW 311
14247: PPUSH
14248: LD_INT 3
14250: PPUSH
14251: CALL_OW 259
14255: PUSH
14256: LD_INT 4
14258: MUL
14259: MUL
14260: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14261: LD_VAR 0 6
14265: PPUSH
14266: CALL_OW 263
14270: PUSH
14271: LD_INT 2
14273: EQUAL
14274: IFFALSE 14325
// begin j := IsControledBy ( i ) ;
14276: LD_ADDR_VAR 0 7
14280: PUSH
14281: LD_VAR 0 6
14285: PPUSH
14286: CALL_OW 312
14290: ST_TO_ADDR
// if j then
14291: LD_VAR 0 7
14295: IFFALSE 14325
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14297: LD_ADDR_VAR 0 10
14301: PUSH
14302: LD_VAR 0 10
14306: PUSH
14307: LD_VAR 0 7
14311: PPUSH
14312: LD_INT 3
14314: PPUSH
14315: CALL_OW 259
14319: PUSH
14320: LD_INT 3
14322: MUL
14323: MUL
14324: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14325: LD_VAR 0 6
14329: PPUSH
14330: CALL_OW 264
14334: PUSH
14335: LD_INT 5
14337: PUSH
14338: LD_INT 6
14340: PUSH
14341: LD_INT 46
14343: PUSH
14344: LD_INT 44
14346: PUSH
14347: LD_INT 47
14349: PUSH
14350: LD_INT 45
14352: PUSH
14353: LD_INT 28
14355: PUSH
14356: LD_INT 7
14358: PUSH
14359: LD_INT 27
14361: PUSH
14362: LD_INT 29
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: IN
14377: PUSH
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 52
14385: PPUSH
14386: CALL_OW 321
14390: PUSH
14391: LD_INT 2
14393: EQUAL
14394: AND
14395: IFFALSE 14412
// bpoints := bpoints * 1.2 ;
14397: LD_ADDR_VAR 0 10
14401: PUSH
14402: LD_VAR 0 10
14406: PUSH
14407: LD_REAL  1.20000000000000E+0000
14410: MUL
14411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14412: LD_VAR 0 6
14416: PPUSH
14417: CALL_OW 264
14421: PUSH
14422: LD_INT 6
14424: PUSH
14425: LD_INT 46
14427: PUSH
14428: LD_INT 47
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: IN
14436: IFFALSE 14453
// bpoints := bpoints * 1.2 ;
14438: LD_ADDR_VAR 0 10
14442: PUSH
14443: LD_VAR 0 10
14447: PUSH
14448: LD_REAL  1.20000000000000E+0000
14451: MUL
14452: ST_TO_ADDR
// end ; unit_building :
14453: GO 14467
14455: LD_INT 3
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14466
14463: POP
// ; end ;
14464: GO 14467
14466: POP
// for j = 1 to 3 do
14467: LD_ADDR_VAR 0 7
14471: PUSH
14472: DOUBLE
14473: LD_INT 1
14475: DEC
14476: ST_TO_ADDR
14477: LD_INT 3
14479: PUSH
14480: FOR_TO
14481: IFFALSE 14534
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14483: LD_ADDR_VAR 0 5
14487: PUSH
14488: LD_VAR 0 5
14492: PPUSH
14493: LD_VAR 0 7
14497: PPUSH
14498: LD_VAR 0 5
14502: PUSH
14503: LD_VAR 0 7
14507: ARRAY
14508: PUSH
14509: LD_VAR 0 9
14513: PUSH
14514: LD_VAR 0 7
14518: ARRAY
14519: PUSH
14520: LD_VAR 0 10
14524: MUL
14525: PLUS
14526: PPUSH
14527: CALL_OW 1
14531: ST_TO_ADDR
14532: GO 14480
14534: POP
14535: POP
// end ;
14536: GO 13013
14538: POP
14539: POP
// result := Replace ( result , 4 , tmp ) ;
14540: LD_ADDR_VAR 0 5
14544: PUSH
14545: LD_VAR 0 5
14549: PPUSH
14550: LD_INT 4
14552: PPUSH
14553: LD_VAR 0 8
14557: PPUSH
14558: CALL_OW 1
14562: ST_TO_ADDR
// end ;
14563: LD_VAR 0 5
14567: RET
// export function DangerAtRange ( unit , range ) ; begin
14568: LD_INT 0
14570: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14571: LD_ADDR_VAR 0 3
14575: PUSH
14576: LD_VAR 0 1
14580: PPUSH
14581: CALL_OW 255
14585: PPUSH
14586: LD_VAR 0 1
14590: PPUSH
14591: CALL_OW 250
14595: PPUSH
14596: LD_VAR 0 1
14600: PPUSH
14601: CALL_OW 251
14605: PPUSH
14606: LD_VAR 0 2
14610: PPUSH
14611: CALL 12865 0 4
14615: ST_TO_ADDR
// end ;
14616: LD_VAR 0 3
14620: RET
// export function DangerInArea ( side , area ) ; begin
14621: LD_INT 0
14623: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14624: LD_ADDR_VAR 0 3
14628: PUSH
14629: LD_VAR 0 2
14633: PPUSH
14634: LD_INT 81
14636: PUSH
14637: LD_VAR 0 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 70
14650: ST_TO_ADDR
// end ;
14651: LD_VAR 0 3
14655: RET
// export function IsExtension ( b ) ; begin
14656: LD_INT 0
14658: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14659: LD_ADDR_VAR 0 2
14663: PUSH
14664: LD_VAR 0 1
14668: PUSH
14669: LD_INT 23
14671: PUSH
14672: LD_INT 20
14674: PUSH
14675: LD_INT 22
14677: PUSH
14678: LD_INT 17
14680: PUSH
14681: LD_INT 24
14683: PUSH
14684: LD_INT 21
14686: PUSH
14687: LD_INT 19
14689: PUSH
14690: LD_INT 16
14692: PUSH
14693: LD_INT 25
14695: PUSH
14696: LD_INT 18
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: IN
14711: ST_TO_ADDR
// end ;
14712: LD_VAR 0 2
14716: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14717: LD_INT 0
14719: PPUSH
14720: PPUSH
14721: PPUSH
// result := [ ] ;
14722: LD_ADDR_VAR 0 4
14726: PUSH
14727: EMPTY
14728: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14729: LD_ADDR_VAR 0 5
14733: PUSH
14734: LD_VAR 0 2
14738: PPUSH
14739: LD_INT 21
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 70
14753: ST_TO_ADDR
// if not tmp then
14754: LD_VAR 0 5
14758: NOT
14759: IFFALSE 14763
// exit ;
14761: GO 14827
// if checkLink then
14763: LD_VAR 0 3
14767: IFFALSE 14817
// begin for i in tmp do
14769: LD_ADDR_VAR 0 6
14773: PUSH
14774: LD_VAR 0 5
14778: PUSH
14779: FOR_IN
14780: IFFALSE 14815
// if GetBase ( i ) <> base then
14782: LD_VAR 0 6
14786: PPUSH
14787: CALL_OW 274
14791: PUSH
14792: LD_VAR 0 1
14796: NONEQUAL
14797: IFFALSE 14813
// ComLinkToBase ( base , i ) ;
14799: LD_VAR 0 1
14803: PPUSH
14804: LD_VAR 0 6
14808: PPUSH
14809: CALL_OW 169
14813: GO 14779
14815: POP
14816: POP
// end ; result := tmp ;
14817: LD_ADDR_VAR 0 4
14821: PUSH
14822: LD_VAR 0 5
14826: ST_TO_ADDR
// end ;
14827: LD_VAR 0 4
14831: RET
// export function ComComplete ( units , b ) ; var i ; begin
14832: LD_INT 0
14834: PPUSH
14835: PPUSH
// if not units then
14836: LD_VAR 0 1
14840: NOT
14841: IFFALSE 14845
// exit ;
14843: GO 14935
// for i in units do
14845: LD_ADDR_VAR 0 4
14849: PUSH
14850: LD_VAR 0 1
14854: PUSH
14855: FOR_IN
14856: IFFALSE 14933
// if BuildingStatus ( b ) = bs_build then
14858: LD_VAR 0 2
14862: PPUSH
14863: CALL_OW 461
14867: PUSH
14868: LD_INT 1
14870: EQUAL
14871: IFFALSE 14931
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14873: LD_VAR 0 4
14877: PPUSH
14878: LD_STRING h
14880: PUSH
14881: LD_VAR 0 2
14885: PPUSH
14886: CALL_OW 250
14890: PUSH
14891: LD_VAR 0 2
14895: PPUSH
14896: CALL_OW 251
14900: PUSH
14901: LD_VAR 0 2
14905: PUSH
14906: LD_INT 0
14908: PUSH
14909: LD_INT 0
14911: PUSH
14912: LD_INT 0
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: PUSH
14924: EMPTY
14925: LIST
14926: PPUSH
14927: CALL_OW 446
14931: GO 14855
14933: POP
14934: POP
// end ;
14935: LD_VAR 0 3
14939: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14940: LD_INT 0
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14948: LD_VAR 0 1
14952: NOT
14953: PUSH
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 263
14963: PUSH
14964: LD_INT 2
14966: NONEQUAL
14967: OR
14968: IFFALSE 14972
// exit ;
14970: GO 15288
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14972: LD_ADDR_VAR 0 6
14976: PUSH
14977: LD_INT 22
14979: PUSH
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 255
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 36
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 34
15009: PUSH
15010: LD_INT 31
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PPUSH
15026: CALL_OW 69
15030: ST_TO_ADDR
// if not tmp then
15031: LD_VAR 0 6
15035: NOT
15036: IFFALSE 15040
// exit ;
15038: GO 15288
// result := [ ] ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: EMPTY
15046: ST_TO_ADDR
// for i in tmp do
15047: LD_ADDR_VAR 0 3
15051: PUSH
15052: LD_VAR 0 6
15056: PUSH
15057: FOR_IN
15058: IFFALSE 15129
// begin t := UnitsInside ( i ) ;
15060: LD_ADDR_VAR 0 4
15064: PUSH
15065: LD_VAR 0 3
15069: PPUSH
15070: CALL_OW 313
15074: ST_TO_ADDR
// if t then
15075: LD_VAR 0 4
15079: IFFALSE 15127
// for j in t do
15081: LD_ADDR_VAR 0 7
15085: PUSH
15086: LD_VAR 0 4
15090: PUSH
15091: FOR_IN
15092: IFFALSE 15125
// result := Replace ( result , result + 1 , j ) ;
15094: LD_ADDR_VAR 0 2
15098: PUSH
15099: LD_VAR 0 2
15103: PPUSH
15104: LD_VAR 0 2
15108: PUSH
15109: LD_INT 1
15111: PLUS
15112: PPUSH
15113: LD_VAR 0 7
15117: PPUSH
15118: CALL_OW 1
15122: ST_TO_ADDR
15123: GO 15091
15125: POP
15126: POP
// end ;
15127: GO 15057
15129: POP
15130: POP
// if not result then
15131: LD_VAR 0 2
15135: NOT
15136: IFFALSE 15140
// exit ;
15138: GO 15288
// mech := result [ 1 ] ;
15140: LD_ADDR_VAR 0 5
15144: PUSH
15145: LD_VAR 0 2
15149: PUSH
15150: LD_INT 1
15152: ARRAY
15153: ST_TO_ADDR
// if result > 1 then
15154: LD_VAR 0 2
15158: PUSH
15159: LD_INT 1
15161: GREATER
15162: IFFALSE 15274
// begin for i = 2 to result do
15164: LD_ADDR_VAR 0 3
15168: PUSH
15169: DOUBLE
15170: LD_INT 2
15172: DEC
15173: ST_TO_ADDR
15174: LD_VAR 0 2
15178: PUSH
15179: FOR_TO
15180: IFFALSE 15272
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
15182: LD_ADDR_VAR 0 4
15186: PUSH
15187: LD_VAR 0 2
15191: PUSH
15192: LD_VAR 0 3
15196: ARRAY
15197: PPUSH
15198: LD_INT 3
15200: PPUSH
15201: CALL_OW 259
15205: PUSH
15206: LD_VAR 0 2
15210: PUSH
15211: LD_VAR 0 3
15215: ARRAY
15216: PPUSH
15217: CALL_OW 432
15221: MINUS
15222: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15223: LD_VAR 0 4
15227: PUSH
15228: LD_VAR 0 5
15232: PPUSH
15233: LD_INT 3
15235: PPUSH
15236: CALL_OW 259
15240: PUSH
15241: LD_VAR 0 5
15245: PPUSH
15246: CALL_OW 432
15250: MINUS
15251: GREATEREQUAL
15252: IFFALSE 15270
// mech := result [ i ] ;
15254: LD_ADDR_VAR 0 5
15258: PUSH
15259: LD_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: ARRAY
15269: ST_TO_ADDR
// end ;
15270: GO 15179
15272: POP
15273: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15274: LD_VAR 0 1
15278: PPUSH
15279: LD_VAR 0 5
15283: PPUSH
15284: CALL_OW 135
// end ;
15288: LD_VAR 0 2
15292: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15293: LD_INT 0
15295: PPUSH
15296: PPUSH
15297: PPUSH
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
// result := [ ] ;
15308: LD_ADDR_VAR 0 7
15312: PUSH
15313: EMPTY
15314: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 266
15324: PUSH
15325: LD_INT 0
15327: PUSH
15328: LD_INT 1
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: IN
15335: NOT
15336: IFFALSE 15340
// exit ;
15338: GO 16974
// if name then
15340: LD_VAR 0 3
15344: IFFALSE 15360
// SetBName ( base_dep , name ) ;
15346: LD_VAR 0 1
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: CALL_OW 500
// base := GetBase ( base_dep ) ;
15360: LD_ADDR_VAR 0 15
15364: PUSH
15365: LD_VAR 0 1
15369: PPUSH
15370: CALL_OW 274
15374: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15375: LD_ADDR_VAR 0 16
15379: PUSH
15380: LD_VAR 0 1
15384: PPUSH
15385: CALL_OW 255
15389: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15390: LD_ADDR_VAR 0 17
15394: PUSH
15395: LD_VAR 0 1
15399: PPUSH
15400: CALL_OW 248
15404: ST_TO_ADDR
// if sources then
15405: LD_VAR 0 5
15409: IFFALSE 15456
// for i = 1 to 3 do
15411: LD_ADDR_VAR 0 8
15415: PUSH
15416: DOUBLE
15417: LD_INT 1
15419: DEC
15420: ST_TO_ADDR
15421: LD_INT 3
15423: PUSH
15424: FOR_TO
15425: IFFALSE 15454
// AddResourceType ( base , i , sources [ i ] ) ;
15427: LD_VAR 0 15
15431: PPUSH
15432: LD_VAR 0 8
15436: PPUSH
15437: LD_VAR 0 5
15441: PUSH
15442: LD_VAR 0 8
15446: ARRAY
15447: PPUSH
15448: CALL_OW 276
15452: GO 15424
15454: POP
15455: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15456: LD_ADDR_VAR 0 18
15460: PUSH
15461: LD_VAR 0 15
15465: PPUSH
15466: LD_VAR 0 2
15470: PPUSH
15471: LD_INT 1
15473: PPUSH
15474: CALL 14717 0 3
15478: ST_TO_ADDR
// InitHc ;
15479: CALL_OW 19
// InitUc ;
15483: CALL_OW 18
// uc_side := side ;
15487: LD_ADDR_OWVAR 20
15491: PUSH
15492: LD_VAR 0 16
15496: ST_TO_ADDR
// uc_nation := nation ;
15497: LD_ADDR_OWVAR 21
15501: PUSH
15502: LD_VAR 0 17
15506: ST_TO_ADDR
// if buildings then
15507: LD_VAR 0 18
15511: IFFALSE 16833
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15513: LD_ADDR_VAR 0 19
15517: PUSH
15518: LD_VAR 0 18
15522: PPUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 30
15528: PUSH
15529: LD_INT 29
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 30
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 72
15555: ST_TO_ADDR
// if tmp then
15556: LD_VAR 0 19
15560: IFFALSE 15608
// for i in tmp do
15562: LD_ADDR_VAR 0 8
15566: PUSH
15567: LD_VAR 0 19
15571: PUSH
15572: FOR_IN
15573: IFFALSE 15606
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15575: LD_VAR 0 8
15579: PPUSH
15580: CALL_OW 250
15584: PPUSH
15585: LD_VAR 0 8
15589: PPUSH
15590: CALL_OW 251
15594: PPUSH
15595: LD_VAR 0 16
15599: PPUSH
15600: CALL_OW 441
15604: GO 15572
15606: POP
15607: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15608: LD_VAR 0 18
15612: PPUSH
15613: LD_INT 2
15615: PUSH
15616: LD_INT 30
15618: PUSH
15619: LD_INT 32
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 30
15628: PUSH
15629: LD_INT 33
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: LIST
15640: PPUSH
15641: CALL_OW 72
15645: IFFALSE 15733
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15647: LD_ADDR_VAR 0 8
15651: PUSH
15652: LD_VAR 0 18
15656: PPUSH
15657: LD_INT 2
15659: PUSH
15660: LD_INT 30
15662: PUSH
15663: LD_INT 32
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 30
15672: PUSH
15673: LD_INT 33
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 72
15689: PUSH
15690: FOR_IN
15691: IFFALSE 15731
// begin if not GetBWeapon ( i ) then
15693: LD_VAR 0 8
15697: PPUSH
15698: CALL_OW 269
15702: NOT
15703: IFFALSE 15729
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15705: LD_VAR 0 8
15709: PPUSH
15710: LD_VAR 0 8
15714: PPUSH
15715: LD_VAR 0 2
15719: PPUSH
15720: CALL 16979 0 2
15724: PPUSH
15725: CALL_OW 431
// end ;
15729: GO 15690
15731: POP
15732: POP
// end ; for i = 1 to personel do
15733: LD_ADDR_VAR 0 8
15737: PUSH
15738: DOUBLE
15739: LD_INT 1
15741: DEC
15742: ST_TO_ADDR
15743: LD_VAR 0 6
15747: PUSH
15748: FOR_TO
15749: IFFALSE 16813
// begin if i > 4 then
15751: LD_VAR 0 8
15755: PUSH
15756: LD_INT 4
15758: GREATER
15759: IFFALSE 15763
// break ;
15761: GO 16813
// case i of 1 :
15763: LD_VAR 0 8
15767: PUSH
15768: LD_INT 1
15770: DOUBLE
15771: EQUAL
15772: IFTRUE 15776
15774: GO 15856
15776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15777: LD_ADDR_VAR 0 12
15781: PUSH
15782: LD_VAR 0 18
15786: PPUSH
15787: LD_INT 22
15789: PUSH
15790: LD_VAR 0 16
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 58
15801: PUSH
15802: EMPTY
15803: LIST
15804: PUSH
15805: LD_INT 2
15807: PUSH
15808: LD_INT 30
15810: PUSH
15811: LD_INT 32
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 30
15830: PUSH
15831: LD_INT 5
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 72
15853: ST_TO_ADDR
15854: GO 16078
15856: LD_INT 2
15858: DOUBLE
15859: EQUAL
15860: IFTRUE 15864
15862: GO 15926
15864: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15865: LD_ADDR_VAR 0 12
15869: PUSH
15870: LD_VAR 0 18
15874: PPUSH
15875: LD_INT 22
15877: PUSH
15878: LD_VAR 0 16
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 30
15892: PUSH
15893: LD_INT 0
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 30
15902: PUSH
15903: LD_INT 1
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PPUSH
15919: CALL_OW 72
15923: ST_TO_ADDR
15924: GO 16078
15926: LD_INT 3
15928: DOUBLE
15929: EQUAL
15930: IFTRUE 15934
15932: GO 15996
15934: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15935: LD_ADDR_VAR 0 12
15939: PUSH
15940: LD_VAR 0 18
15944: PPUSH
15945: LD_INT 22
15947: PUSH
15948: LD_VAR 0 16
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: LD_INT 30
15962: PUSH
15963: LD_INT 2
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: LD_INT 30
15972: PUSH
15973: LD_INT 3
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PPUSH
15989: CALL_OW 72
15993: ST_TO_ADDR
15994: GO 16078
15996: LD_INT 4
15998: DOUBLE
15999: EQUAL
16000: IFTRUE 16004
16002: GO 16077
16004: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16005: LD_ADDR_VAR 0 12
16009: PUSH
16010: LD_VAR 0 18
16014: PPUSH
16015: LD_INT 22
16017: PUSH
16018: LD_VAR 0 16
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 2
16029: PUSH
16030: LD_INT 30
16032: PUSH
16033: LD_INT 6
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 30
16042: PUSH
16043: LD_INT 7
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 30
16052: PUSH
16053: LD_INT 8
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PPUSH
16070: CALL_OW 72
16074: ST_TO_ADDR
16075: GO 16078
16077: POP
// if i = 1 then
16078: LD_VAR 0 8
16082: PUSH
16083: LD_INT 1
16085: EQUAL
16086: IFFALSE 16197
// begin tmp := [ ] ;
16088: LD_ADDR_VAR 0 19
16092: PUSH
16093: EMPTY
16094: ST_TO_ADDR
// for j in f do
16095: LD_ADDR_VAR 0 9
16099: PUSH
16100: LD_VAR 0 12
16104: PUSH
16105: FOR_IN
16106: IFFALSE 16179
// if GetBType ( j ) = b_bunker then
16108: LD_VAR 0 9
16112: PPUSH
16113: CALL_OW 266
16117: PUSH
16118: LD_INT 32
16120: EQUAL
16121: IFFALSE 16148
// tmp := Insert ( tmp , 1 , j ) else
16123: LD_ADDR_VAR 0 19
16127: PUSH
16128: LD_VAR 0 19
16132: PPUSH
16133: LD_INT 1
16135: PPUSH
16136: LD_VAR 0 9
16140: PPUSH
16141: CALL_OW 2
16145: ST_TO_ADDR
16146: GO 16177
// tmp := Insert ( tmp , tmp + 1 , j ) ;
16148: LD_ADDR_VAR 0 19
16152: PUSH
16153: LD_VAR 0 19
16157: PPUSH
16158: LD_VAR 0 19
16162: PUSH
16163: LD_INT 1
16165: PLUS
16166: PPUSH
16167: LD_VAR 0 9
16171: PPUSH
16172: CALL_OW 2
16176: ST_TO_ADDR
16177: GO 16105
16179: POP
16180: POP
// if tmp then
16181: LD_VAR 0 19
16185: IFFALSE 16197
// f := tmp ;
16187: LD_ADDR_VAR 0 12
16191: PUSH
16192: LD_VAR 0 19
16196: ST_TO_ADDR
// end ; x := personel [ i ] ;
16197: LD_ADDR_VAR 0 13
16201: PUSH
16202: LD_VAR 0 6
16206: PUSH
16207: LD_VAR 0 8
16211: ARRAY
16212: ST_TO_ADDR
// if x = - 1 then
16213: LD_VAR 0 13
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: EQUAL
16222: IFFALSE 16431
// begin for j in f do
16224: LD_ADDR_VAR 0 9
16228: PUSH
16229: LD_VAR 0 12
16233: PUSH
16234: FOR_IN
16235: IFFALSE 16427
// repeat InitHc ;
16237: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16241: LD_VAR 0 9
16245: PPUSH
16246: CALL_OW 266
16250: PUSH
16251: LD_INT 5
16253: EQUAL
16254: IFFALSE 16324
// begin if UnitsInside ( j ) < 3 then
16256: LD_VAR 0 9
16260: PPUSH
16261: CALL_OW 313
16265: PUSH
16266: LD_INT 3
16268: LESS
16269: IFFALSE 16305
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16271: LD_INT 0
16273: PPUSH
16274: LD_INT 5
16276: PUSH
16277: LD_INT 8
16279: PUSH
16280: LD_INT 9
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: PUSH
16288: LD_VAR 0 17
16292: ARRAY
16293: PPUSH
16294: LD_VAR 0 4
16298: PPUSH
16299: CALL_OW 380
16303: GO 16322
// PrepareHuman ( false , i , skill ) ;
16305: LD_INT 0
16307: PPUSH
16308: LD_VAR 0 8
16312: PPUSH
16313: LD_VAR 0 4
16317: PPUSH
16318: CALL_OW 380
// end else
16322: GO 16341
// PrepareHuman ( false , i , skill ) ;
16324: LD_INT 0
16326: PPUSH
16327: LD_VAR 0 8
16331: PPUSH
16332: LD_VAR 0 4
16336: PPUSH
16337: CALL_OW 380
// un := CreateHuman ;
16341: LD_ADDR_VAR 0 14
16345: PUSH
16346: CALL_OW 44
16350: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16351: LD_ADDR_VAR 0 7
16355: PUSH
16356: LD_VAR 0 7
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: LD_VAR 0 14
16368: PPUSH
16369: CALL_OW 2
16373: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16374: LD_VAR 0 14
16378: PPUSH
16379: LD_VAR 0 9
16383: PPUSH
16384: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16388: LD_VAR 0 9
16392: PPUSH
16393: CALL_OW 313
16397: PUSH
16398: LD_INT 6
16400: EQUAL
16401: PUSH
16402: LD_VAR 0 9
16406: PPUSH
16407: CALL_OW 266
16411: PUSH
16412: LD_INT 32
16414: PUSH
16415: LD_INT 31
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: IN
16422: OR
16423: IFFALSE 16237
16425: GO 16234
16427: POP
16428: POP
// end else
16429: GO 16811
// for j = 1 to x do
16431: LD_ADDR_VAR 0 9
16435: PUSH
16436: DOUBLE
16437: LD_INT 1
16439: DEC
16440: ST_TO_ADDR
16441: LD_VAR 0 13
16445: PUSH
16446: FOR_TO
16447: IFFALSE 16809
// begin InitHc ;
16449: CALL_OW 19
// if not f then
16453: LD_VAR 0 12
16457: NOT
16458: IFFALSE 16547
// begin PrepareHuman ( false , i , skill ) ;
16460: LD_INT 0
16462: PPUSH
16463: LD_VAR 0 8
16467: PPUSH
16468: LD_VAR 0 4
16472: PPUSH
16473: CALL_OW 380
// un := CreateHuman ;
16477: LD_ADDR_VAR 0 14
16481: PUSH
16482: CALL_OW 44
16486: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16487: LD_ADDR_VAR 0 7
16491: PUSH
16492: LD_VAR 0 7
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: LD_VAR 0 14
16504: PPUSH
16505: CALL_OW 2
16509: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16510: LD_VAR 0 14
16514: PPUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 250
16524: PPUSH
16525: LD_VAR 0 1
16529: PPUSH
16530: CALL_OW 251
16534: PPUSH
16535: LD_INT 10
16537: PPUSH
16538: LD_INT 0
16540: PPUSH
16541: CALL_OW 50
// continue ;
16545: GO 16446
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16547: LD_VAR 0 12
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: CALL_OW 313
16560: PUSH
16561: LD_VAR 0 12
16565: PUSH
16566: LD_INT 1
16568: ARRAY
16569: PPUSH
16570: CALL_OW 266
16574: PUSH
16575: LD_INT 32
16577: PUSH
16578: LD_INT 31
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: IN
16585: AND
16586: PUSH
16587: LD_VAR 0 12
16591: PUSH
16592: LD_INT 1
16594: ARRAY
16595: PPUSH
16596: CALL_OW 313
16600: PUSH
16601: LD_INT 6
16603: EQUAL
16604: OR
16605: IFFALSE 16625
// f := Delete ( f , 1 ) ;
16607: LD_ADDR_VAR 0 12
16611: PUSH
16612: LD_VAR 0 12
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 3
16624: ST_TO_ADDR
// if not f then
16625: LD_VAR 0 12
16629: NOT
16630: IFFALSE 16648
// begin x := x + 2 ;
16632: LD_ADDR_VAR 0 13
16636: PUSH
16637: LD_VAR 0 13
16641: PUSH
16642: LD_INT 2
16644: PLUS
16645: ST_TO_ADDR
// continue ;
16646: GO 16446
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16648: LD_VAR 0 12
16652: PUSH
16653: LD_INT 1
16655: ARRAY
16656: PPUSH
16657: CALL_OW 266
16661: PUSH
16662: LD_INT 5
16664: EQUAL
16665: IFFALSE 16739
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16667: LD_VAR 0 12
16671: PUSH
16672: LD_INT 1
16674: ARRAY
16675: PPUSH
16676: CALL_OW 313
16680: PUSH
16681: LD_INT 3
16683: LESS
16684: IFFALSE 16720
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16686: LD_INT 0
16688: PPUSH
16689: LD_INT 5
16691: PUSH
16692: LD_INT 8
16694: PUSH
16695: LD_INT 9
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: LD_VAR 0 17
16707: ARRAY
16708: PPUSH
16709: LD_VAR 0 4
16713: PPUSH
16714: CALL_OW 380
16718: GO 16737
// PrepareHuman ( false , i , skill ) ;
16720: LD_INT 0
16722: PPUSH
16723: LD_VAR 0 8
16727: PPUSH
16728: LD_VAR 0 4
16732: PPUSH
16733: CALL_OW 380
// end else
16737: GO 16756
// PrepareHuman ( false , i , skill ) ;
16739: LD_INT 0
16741: PPUSH
16742: LD_VAR 0 8
16746: PPUSH
16747: LD_VAR 0 4
16751: PPUSH
16752: CALL_OW 380
// un := CreateHuman ;
16756: LD_ADDR_VAR 0 14
16760: PUSH
16761: CALL_OW 44
16765: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16766: LD_ADDR_VAR 0 7
16770: PUSH
16771: LD_VAR 0 7
16775: PPUSH
16776: LD_INT 1
16778: PPUSH
16779: LD_VAR 0 14
16783: PPUSH
16784: CALL_OW 2
16788: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16789: LD_VAR 0 14
16793: PPUSH
16794: LD_VAR 0 12
16798: PUSH
16799: LD_INT 1
16801: ARRAY
16802: PPUSH
16803: CALL_OW 52
// end ;
16807: GO 16446
16809: POP
16810: POP
// end ;
16811: GO 15748
16813: POP
16814: POP
// result := result ^ buildings ;
16815: LD_ADDR_VAR 0 7
16819: PUSH
16820: LD_VAR 0 7
16824: PUSH
16825: LD_VAR 0 18
16829: ADD
16830: ST_TO_ADDR
// end else
16831: GO 16974
// begin for i = 1 to personel do
16833: LD_ADDR_VAR 0 8
16837: PUSH
16838: DOUBLE
16839: LD_INT 1
16841: DEC
16842: ST_TO_ADDR
16843: LD_VAR 0 6
16847: PUSH
16848: FOR_TO
16849: IFFALSE 16972
// begin if i > 4 then
16851: LD_VAR 0 8
16855: PUSH
16856: LD_INT 4
16858: GREATER
16859: IFFALSE 16863
// break ;
16861: GO 16972
// x := personel [ i ] ;
16863: LD_ADDR_VAR 0 13
16867: PUSH
16868: LD_VAR 0 6
16872: PUSH
16873: LD_VAR 0 8
16877: ARRAY
16878: ST_TO_ADDR
// if x = - 1 then
16879: LD_VAR 0 13
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: EQUAL
16888: IFFALSE 16892
// continue ;
16890: GO 16848
// PrepareHuman ( false , i , skill ) ;
16892: LD_INT 0
16894: PPUSH
16895: LD_VAR 0 8
16899: PPUSH
16900: LD_VAR 0 4
16904: PPUSH
16905: CALL_OW 380
// un := CreateHuman ;
16909: LD_ADDR_VAR 0 14
16913: PUSH
16914: CALL_OW 44
16918: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16919: LD_VAR 0 14
16923: PPUSH
16924: LD_VAR 0 1
16928: PPUSH
16929: CALL_OW 250
16933: PPUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 251
16943: PPUSH
16944: LD_INT 10
16946: PPUSH
16947: LD_INT 0
16949: PPUSH
16950: CALL_OW 50
// result := result ^ un ;
16954: LD_ADDR_VAR 0 7
16958: PUSH
16959: LD_VAR 0 7
16963: PUSH
16964: LD_VAR 0 14
16968: ADD
16969: ST_TO_ADDR
// end ;
16970: GO 16848
16972: POP
16973: POP
// end ; end ;
16974: LD_VAR 0 7
16978: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16979: LD_INT 0
16981: PPUSH
16982: PPUSH
16983: PPUSH
16984: PPUSH
16985: PPUSH
16986: PPUSH
16987: PPUSH
16988: PPUSH
16989: PPUSH
16990: PPUSH
16991: PPUSH
16992: PPUSH
16993: PPUSH
16994: PPUSH
16995: PPUSH
16996: PPUSH
// result := false ;
16997: LD_ADDR_VAR 0 3
17001: PUSH
17002: LD_INT 0
17004: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17005: LD_VAR 0 1
17009: NOT
17010: PUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 266
17020: PUSH
17021: LD_INT 32
17023: PUSH
17024: LD_INT 33
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: IN
17031: NOT
17032: OR
17033: IFFALSE 17037
// exit ;
17035: GO 18146
// nat := GetNation ( tower ) ;
17037: LD_ADDR_VAR 0 12
17041: PUSH
17042: LD_VAR 0 1
17046: PPUSH
17047: CALL_OW 248
17051: ST_TO_ADDR
// side := GetSide ( tower ) ;
17052: LD_ADDR_VAR 0 16
17056: PUSH
17057: LD_VAR 0 1
17061: PPUSH
17062: CALL_OW 255
17066: ST_TO_ADDR
// x := GetX ( tower ) ;
17067: LD_ADDR_VAR 0 10
17071: PUSH
17072: LD_VAR 0 1
17076: PPUSH
17077: CALL_OW 250
17081: ST_TO_ADDR
// y := GetY ( tower ) ;
17082: LD_ADDR_VAR 0 11
17086: PUSH
17087: LD_VAR 0 1
17091: PPUSH
17092: CALL_OW 251
17096: ST_TO_ADDR
// if not x or not y then
17097: LD_VAR 0 10
17101: NOT
17102: PUSH
17103: LD_VAR 0 11
17107: NOT
17108: OR
17109: IFFALSE 17113
// exit ;
17111: GO 18146
// weapon := 0 ;
17113: LD_ADDR_VAR 0 18
17117: PUSH
17118: LD_INT 0
17120: ST_TO_ADDR
// fac_list := [ ] ;
17121: LD_ADDR_VAR 0 17
17125: PUSH
17126: EMPTY
17127: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
17128: LD_ADDR_VAR 0 6
17132: PUSH
17133: LD_VAR 0 1
17137: PPUSH
17138: CALL_OW 274
17142: PPUSH
17143: LD_VAR 0 2
17147: PPUSH
17148: LD_INT 0
17150: PPUSH
17151: CALL 14717 0 3
17155: PPUSH
17156: LD_INT 30
17158: PUSH
17159: LD_INT 3
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PPUSH
17166: CALL_OW 72
17170: ST_TO_ADDR
// if not factories then
17171: LD_VAR 0 6
17175: NOT
17176: IFFALSE 17180
// exit ;
17178: GO 18146
// for i in factories do
17180: LD_ADDR_VAR 0 8
17184: PUSH
17185: LD_VAR 0 6
17189: PUSH
17190: FOR_IN
17191: IFFALSE 17216
// fac_list := fac_list union AvailableWeaponList ( i ) ;
17193: LD_ADDR_VAR 0 17
17197: PUSH
17198: LD_VAR 0 17
17202: PUSH
17203: LD_VAR 0 8
17207: PPUSH
17208: CALL_OW 478
17212: UNION
17213: ST_TO_ADDR
17214: GO 17190
17216: POP
17217: POP
// if not fac_list then
17218: LD_VAR 0 17
17222: NOT
17223: IFFALSE 17227
// exit ;
17225: GO 18146
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17227: LD_ADDR_VAR 0 5
17231: PUSH
17232: LD_INT 4
17234: PUSH
17235: LD_INT 5
17237: PUSH
17238: LD_INT 9
17240: PUSH
17241: LD_INT 10
17243: PUSH
17244: LD_INT 6
17246: PUSH
17247: LD_INT 7
17249: PUSH
17250: LD_INT 11
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 27
17264: PUSH
17265: LD_INT 28
17267: PUSH
17268: LD_INT 26
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 43
17282: PUSH
17283: LD_INT 44
17285: PUSH
17286: LD_INT 46
17288: PUSH
17289: LD_INT 45
17291: PUSH
17292: LD_INT 47
17294: PUSH
17295: LD_INT 49
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_VAR 0 12
17315: ARRAY
17316: ST_TO_ADDR
// list := list isect fac_list ;
17317: LD_ADDR_VAR 0 5
17321: PUSH
17322: LD_VAR 0 5
17326: PUSH
17327: LD_VAR 0 17
17331: ISECT
17332: ST_TO_ADDR
// if not list then
17333: LD_VAR 0 5
17337: NOT
17338: IFFALSE 17342
// exit ;
17340: GO 18146
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17342: LD_VAR 0 12
17346: PUSH
17347: LD_INT 3
17349: EQUAL
17350: PUSH
17351: LD_INT 49
17353: PUSH
17354: LD_VAR 0 5
17358: IN
17359: AND
17360: PUSH
17361: LD_INT 31
17363: PPUSH
17364: LD_VAR 0 16
17368: PPUSH
17369: CALL_OW 321
17373: PUSH
17374: LD_INT 2
17376: EQUAL
17377: AND
17378: IFFALSE 17438
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17380: LD_INT 22
17382: PUSH
17383: LD_VAR 0 16
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 35
17394: PUSH
17395: LD_INT 49
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 91
17404: PUSH
17405: LD_VAR 0 1
17409: PUSH
17410: LD_INT 10
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 69
17427: NOT
17428: IFFALSE 17438
// weapon := ru_time_lapser ;
17430: LD_ADDR_VAR 0 18
17434: PUSH
17435: LD_INT 49
17437: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17438: LD_VAR 0 12
17442: PUSH
17443: LD_INT 1
17445: PUSH
17446: LD_INT 2
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: IN
17453: PUSH
17454: LD_INT 11
17456: PUSH
17457: LD_VAR 0 5
17461: IN
17462: PUSH
17463: LD_INT 30
17465: PUSH
17466: LD_VAR 0 5
17470: IN
17471: OR
17472: AND
17473: PUSH
17474: LD_INT 6
17476: PPUSH
17477: LD_VAR 0 16
17481: PPUSH
17482: CALL_OW 321
17486: PUSH
17487: LD_INT 2
17489: EQUAL
17490: AND
17491: IFFALSE 17656
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17493: LD_INT 22
17495: PUSH
17496: LD_VAR 0 16
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 2
17507: PUSH
17508: LD_INT 35
17510: PUSH
17511: LD_INT 11
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 35
17520: PUSH
17521: LD_INT 30
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 91
17535: PUSH
17536: LD_VAR 0 1
17540: PUSH
17541: LD_INT 18
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: PPUSH
17554: CALL_OW 69
17558: NOT
17559: PUSH
17560: LD_INT 22
17562: PUSH
17563: LD_VAR 0 16
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: LD_INT 30
17577: PUSH
17578: LD_INT 32
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 30
17587: PUSH
17588: LD_INT 33
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 91
17602: PUSH
17603: LD_VAR 0 1
17607: PUSH
17608: LD_INT 12
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: PUSH
17629: LD_INT 2
17631: GREATER
17632: AND
17633: IFFALSE 17656
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17635: LD_ADDR_VAR 0 18
17639: PUSH
17640: LD_INT 11
17642: PUSH
17643: LD_INT 30
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_VAR 0 12
17654: ARRAY
17655: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17656: LD_VAR 0 18
17660: NOT
17661: PUSH
17662: LD_INT 40
17664: PPUSH
17665: LD_VAR 0 16
17669: PPUSH
17670: CALL_OW 321
17674: PUSH
17675: LD_INT 2
17677: EQUAL
17678: AND
17679: PUSH
17680: LD_INT 7
17682: PUSH
17683: LD_VAR 0 5
17687: IN
17688: PUSH
17689: LD_INT 28
17691: PUSH
17692: LD_VAR 0 5
17696: IN
17697: OR
17698: PUSH
17699: LD_INT 45
17701: PUSH
17702: LD_VAR 0 5
17706: IN
17707: OR
17708: AND
17709: IFFALSE 17963
// begin hex := GetHexInfo ( x , y ) ;
17711: LD_ADDR_VAR 0 4
17715: PUSH
17716: LD_VAR 0 10
17720: PPUSH
17721: LD_VAR 0 11
17725: PPUSH
17726: CALL_OW 546
17730: ST_TO_ADDR
// if hex [ 1 ] then
17731: LD_VAR 0 4
17735: PUSH
17736: LD_INT 1
17738: ARRAY
17739: IFFALSE 17743
// exit ;
17741: GO 18146
// height := hex [ 2 ] ;
17743: LD_ADDR_VAR 0 15
17747: PUSH
17748: LD_VAR 0 4
17752: PUSH
17753: LD_INT 2
17755: ARRAY
17756: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17757: LD_ADDR_VAR 0 14
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: LD_INT 5
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: ST_TO_ADDR
// for i in tmp do
17780: LD_ADDR_VAR 0 8
17784: PUSH
17785: LD_VAR 0 14
17789: PUSH
17790: FOR_IN
17791: IFFALSE 17961
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17793: LD_ADDR_VAR 0 9
17797: PUSH
17798: LD_VAR 0 10
17802: PPUSH
17803: LD_VAR 0 8
17807: PPUSH
17808: LD_INT 5
17810: PPUSH
17811: CALL_OW 272
17815: PUSH
17816: LD_VAR 0 11
17820: PPUSH
17821: LD_VAR 0 8
17825: PPUSH
17826: LD_INT 5
17828: PPUSH
17829: CALL_OW 273
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17838: LD_VAR 0 9
17842: PUSH
17843: LD_INT 1
17845: ARRAY
17846: PPUSH
17847: LD_VAR 0 9
17851: PUSH
17852: LD_INT 2
17854: ARRAY
17855: PPUSH
17856: CALL_OW 488
17860: IFFALSE 17959
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17862: LD_ADDR_VAR 0 4
17866: PUSH
17867: LD_VAR 0 9
17871: PUSH
17872: LD_INT 1
17874: ARRAY
17875: PPUSH
17876: LD_VAR 0 9
17880: PUSH
17881: LD_INT 2
17883: ARRAY
17884: PPUSH
17885: CALL_OW 546
17889: ST_TO_ADDR
// if hex [ 1 ] then
17890: LD_VAR 0 4
17894: PUSH
17895: LD_INT 1
17897: ARRAY
17898: IFFALSE 17902
// continue ;
17900: GO 17790
// h := hex [ 2 ] ;
17902: LD_ADDR_VAR 0 13
17906: PUSH
17907: LD_VAR 0 4
17911: PUSH
17912: LD_INT 2
17914: ARRAY
17915: ST_TO_ADDR
// if h + 7 < height then
17916: LD_VAR 0 13
17920: PUSH
17921: LD_INT 7
17923: PLUS
17924: PUSH
17925: LD_VAR 0 15
17929: LESS
17930: IFFALSE 17959
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17932: LD_ADDR_VAR 0 18
17936: PUSH
17937: LD_INT 7
17939: PUSH
17940: LD_INT 28
17942: PUSH
17943: LD_INT 45
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: PUSH
17951: LD_VAR 0 12
17955: ARRAY
17956: ST_TO_ADDR
// break ;
17957: GO 17961
// end ; end ; end ;
17959: GO 17790
17961: POP
17962: POP
// end ; if not weapon then
17963: LD_VAR 0 18
17967: NOT
17968: IFFALSE 18028
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17970: LD_ADDR_VAR 0 5
17974: PUSH
17975: LD_VAR 0 5
17979: PUSH
17980: LD_INT 11
17982: PUSH
17983: LD_INT 30
17985: PUSH
17986: LD_INT 49
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: DIFF
17994: ST_TO_ADDR
// if not list then
17995: LD_VAR 0 5
17999: NOT
18000: IFFALSE 18004
// exit ;
18002: GO 18146
// weapon := list [ rand ( 1 , list ) ] ;
18004: LD_ADDR_VAR 0 18
18008: PUSH
18009: LD_VAR 0 5
18013: PUSH
18014: LD_INT 1
18016: PPUSH
18017: LD_VAR 0 5
18021: PPUSH
18022: CALL_OW 12
18026: ARRAY
18027: ST_TO_ADDR
// end ; if weapon then
18028: LD_VAR 0 18
18032: IFFALSE 18146
// begin tmp := CostOfWeapon ( weapon ) ;
18034: LD_ADDR_VAR 0 14
18038: PUSH
18039: LD_VAR 0 18
18043: PPUSH
18044: CALL_OW 451
18048: ST_TO_ADDR
// j := GetBase ( tower ) ;
18049: LD_ADDR_VAR 0 9
18053: PUSH
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 274
18063: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18064: LD_VAR 0 9
18068: PPUSH
18069: LD_INT 1
18071: PPUSH
18072: CALL_OW 275
18076: PUSH
18077: LD_VAR 0 14
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: GREATEREQUAL
18086: PUSH
18087: LD_VAR 0 9
18091: PPUSH
18092: LD_INT 2
18094: PPUSH
18095: CALL_OW 275
18099: PUSH
18100: LD_VAR 0 14
18104: PUSH
18105: LD_INT 2
18107: ARRAY
18108: GREATEREQUAL
18109: AND
18110: PUSH
18111: LD_VAR 0 9
18115: PPUSH
18116: LD_INT 3
18118: PPUSH
18119: CALL_OW 275
18123: PUSH
18124: LD_VAR 0 14
18128: PUSH
18129: LD_INT 3
18131: ARRAY
18132: GREATEREQUAL
18133: AND
18134: IFFALSE 18146
// result := weapon ;
18136: LD_ADDR_VAR 0 3
18140: PUSH
18141: LD_VAR 0 18
18145: ST_TO_ADDR
// end ; end ;
18146: LD_VAR 0 3
18150: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
18151: LD_INT 0
18153: PPUSH
18154: PPUSH
// result := true ;
18155: LD_ADDR_VAR 0 3
18159: PUSH
18160: LD_INT 1
18162: ST_TO_ADDR
// if array1 = array2 then
18163: LD_VAR 0 1
18167: PUSH
18168: LD_VAR 0 2
18172: EQUAL
18173: IFFALSE 18233
// begin for i = 1 to array1 do
18175: LD_ADDR_VAR 0 4
18179: PUSH
18180: DOUBLE
18181: LD_INT 1
18183: DEC
18184: ST_TO_ADDR
18185: LD_VAR 0 1
18189: PUSH
18190: FOR_TO
18191: IFFALSE 18229
// if array1 [ i ] <> array2 [ i ] then
18193: LD_VAR 0 1
18197: PUSH
18198: LD_VAR 0 4
18202: ARRAY
18203: PUSH
18204: LD_VAR 0 2
18208: PUSH
18209: LD_VAR 0 4
18213: ARRAY
18214: NONEQUAL
18215: IFFALSE 18227
// begin result := false ;
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: LD_INT 0
18224: ST_TO_ADDR
// break ;
18225: GO 18229
// end ;
18227: GO 18190
18229: POP
18230: POP
// end else
18231: GO 18241
// result := false ;
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: LD_INT 0
18240: ST_TO_ADDR
// end ;
18241: LD_VAR 0 3
18245: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18246: LD_INT 0
18248: PPUSH
18249: PPUSH
// if not array1 or not array2 then
18250: LD_VAR 0 1
18254: NOT
18255: PUSH
18256: LD_VAR 0 2
18260: NOT
18261: OR
18262: IFFALSE 18266
// exit ;
18264: GO 18330
// result := true ;
18266: LD_ADDR_VAR 0 3
18270: PUSH
18271: LD_INT 1
18273: ST_TO_ADDR
// for i = 1 to array1 do
18274: LD_ADDR_VAR 0 4
18278: PUSH
18279: DOUBLE
18280: LD_INT 1
18282: DEC
18283: ST_TO_ADDR
18284: LD_VAR 0 1
18288: PUSH
18289: FOR_TO
18290: IFFALSE 18328
// if array1 [ i ] <> array2 [ i ] then
18292: LD_VAR 0 1
18296: PUSH
18297: LD_VAR 0 4
18301: ARRAY
18302: PUSH
18303: LD_VAR 0 2
18307: PUSH
18308: LD_VAR 0 4
18312: ARRAY
18313: NONEQUAL
18314: IFFALSE 18326
// begin result := false ;
18316: LD_ADDR_VAR 0 3
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// break ;
18324: GO 18328
// end ;
18326: GO 18289
18328: POP
18329: POP
// end ;
18330: LD_VAR 0 3
18334: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18335: LD_INT 0
18337: PPUSH
18338: PPUSH
18339: PPUSH
// pom := GetBase ( fac ) ;
18340: LD_ADDR_VAR 0 5
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 274
18354: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18355: LD_ADDR_VAR 0 4
18359: PUSH
18360: LD_VAR 0 2
18364: PUSH
18365: LD_INT 1
18367: ARRAY
18368: PPUSH
18369: LD_VAR 0 2
18373: PUSH
18374: LD_INT 2
18376: ARRAY
18377: PPUSH
18378: LD_VAR 0 2
18382: PUSH
18383: LD_INT 3
18385: ARRAY
18386: PPUSH
18387: LD_VAR 0 2
18391: PUSH
18392: LD_INT 4
18394: ARRAY
18395: PPUSH
18396: CALL_OW 449
18400: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18401: LD_ADDR_VAR 0 3
18405: PUSH
18406: LD_VAR 0 5
18410: PPUSH
18411: LD_INT 1
18413: PPUSH
18414: CALL_OW 275
18418: PUSH
18419: LD_VAR 0 4
18423: PUSH
18424: LD_INT 1
18426: ARRAY
18427: GREATEREQUAL
18428: PUSH
18429: LD_VAR 0 5
18433: PPUSH
18434: LD_INT 2
18436: PPUSH
18437: CALL_OW 275
18441: PUSH
18442: LD_VAR 0 4
18446: PUSH
18447: LD_INT 2
18449: ARRAY
18450: GREATEREQUAL
18451: AND
18452: PUSH
18453: LD_VAR 0 5
18457: PPUSH
18458: LD_INT 3
18460: PPUSH
18461: CALL_OW 275
18465: PUSH
18466: LD_VAR 0 4
18470: PUSH
18471: LD_INT 3
18473: ARRAY
18474: GREATEREQUAL
18475: AND
18476: ST_TO_ADDR
// end ;
18477: LD_VAR 0 3
18481: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
18486: PPUSH
18487: PPUSH
// pom := GetBase ( building ) ;
18488: LD_ADDR_VAR 0 3
18492: PUSH
18493: LD_VAR 0 1
18497: PPUSH
18498: CALL_OW 274
18502: ST_TO_ADDR
// if not pom then
18503: LD_VAR 0 3
18507: NOT
18508: IFFALSE 18512
// exit ;
18510: GO 18682
// btype := GetBType ( building ) ;
18512: LD_ADDR_VAR 0 5
18516: PUSH
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 266
18526: ST_TO_ADDR
// if btype = b_armoury then
18527: LD_VAR 0 5
18531: PUSH
18532: LD_INT 4
18534: EQUAL
18535: IFFALSE 18545
// btype := b_barracks ;
18537: LD_ADDR_VAR 0 5
18541: PUSH
18542: LD_INT 5
18544: ST_TO_ADDR
// if btype = b_depot then
18545: LD_VAR 0 5
18549: PUSH
18550: LD_INT 0
18552: EQUAL
18553: IFFALSE 18563
// btype := b_warehouse ;
18555: LD_ADDR_VAR 0 5
18559: PUSH
18560: LD_INT 1
18562: ST_TO_ADDR
// if btype = b_workshop then
18563: LD_VAR 0 5
18567: PUSH
18568: LD_INT 2
18570: EQUAL
18571: IFFALSE 18581
// btype := b_factory ;
18573: LD_ADDR_VAR 0 5
18577: PUSH
18578: LD_INT 3
18580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18581: LD_ADDR_VAR 0 4
18585: PUSH
18586: LD_VAR 0 5
18590: PPUSH
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 248
18600: PPUSH
18601: CALL_OW 450
18605: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: LD_VAR 0 3
18615: PPUSH
18616: LD_INT 1
18618: PPUSH
18619: CALL_OW 275
18623: PUSH
18624: LD_VAR 0 4
18628: PUSH
18629: LD_INT 1
18631: ARRAY
18632: GREATEREQUAL
18633: PUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: LD_INT 2
18641: PPUSH
18642: CALL_OW 275
18646: PUSH
18647: LD_VAR 0 4
18651: PUSH
18652: LD_INT 2
18654: ARRAY
18655: GREATEREQUAL
18656: AND
18657: PUSH
18658: LD_VAR 0 3
18662: PPUSH
18663: LD_INT 3
18665: PPUSH
18666: CALL_OW 275
18670: PUSH
18671: LD_VAR 0 4
18675: PUSH
18676: LD_INT 3
18678: ARRAY
18679: GREATEREQUAL
18680: AND
18681: ST_TO_ADDR
// end ;
18682: LD_VAR 0 2
18686: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18687: LD_INT 0
18689: PPUSH
18690: PPUSH
18691: PPUSH
// pom := GetBase ( building ) ;
18692: LD_ADDR_VAR 0 4
18696: PUSH
18697: LD_VAR 0 1
18701: PPUSH
18702: CALL_OW 274
18706: ST_TO_ADDR
// if not pom then
18707: LD_VAR 0 4
18711: NOT
18712: IFFALSE 18716
// exit ;
18714: GO 18817
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18716: LD_ADDR_VAR 0 5
18720: PUSH
18721: LD_VAR 0 2
18725: PPUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 248
18735: PPUSH
18736: CALL_OW 450
18740: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18741: LD_ADDR_VAR 0 3
18745: PUSH
18746: LD_VAR 0 4
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL_OW 275
18758: PUSH
18759: LD_VAR 0 5
18763: PUSH
18764: LD_INT 1
18766: ARRAY
18767: GREATEREQUAL
18768: PUSH
18769: LD_VAR 0 4
18773: PPUSH
18774: LD_INT 2
18776: PPUSH
18777: CALL_OW 275
18781: PUSH
18782: LD_VAR 0 5
18786: PUSH
18787: LD_INT 2
18789: ARRAY
18790: GREATEREQUAL
18791: AND
18792: PUSH
18793: LD_VAR 0 4
18797: PPUSH
18798: LD_INT 3
18800: PPUSH
18801: CALL_OW 275
18805: PUSH
18806: LD_VAR 0 5
18810: PUSH
18811: LD_INT 3
18813: ARRAY
18814: GREATEREQUAL
18815: AND
18816: ST_TO_ADDR
// end ;
18817: LD_VAR 0 3
18821: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18822: LD_INT 0
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
18833: PPUSH
18834: PPUSH
// result := false ;
18835: LD_ADDR_VAR 0 8
18839: PUSH
18840: LD_INT 0
18842: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18843: LD_VAR 0 5
18847: NOT
18848: PUSH
18849: LD_VAR 0 1
18853: NOT
18854: OR
18855: PUSH
18856: LD_VAR 0 2
18860: NOT
18861: OR
18862: PUSH
18863: LD_VAR 0 3
18867: NOT
18868: OR
18869: IFFALSE 18873
// exit ;
18871: GO 19687
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18873: LD_ADDR_VAR 0 14
18877: PUSH
18878: LD_VAR 0 1
18882: PPUSH
18883: LD_VAR 0 2
18887: PPUSH
18888: LD_VAR 0 3
18892: PPUSH
18893: LD_VAR 0 4
18897: PPUSH
18898: LD_VAR 0 5
18902: PUSH
18903: LD_INT 1
18905: ARRAY
18906: PPUSH
18907: CALL_OW 248
18911: PPUSH
18912: LD_INT 0
18914: PPUSH
18915: CALL 20924 0 6
18919: ST_TO_ADDR
// if not hexes then
18920: LD_VAR 0 14
18924: NOT
18925: IFFALSE 18929
// exit ;
18927: GO 19687
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18929: LD_ADDR_VAR 0 17
18933: PUSH
18934: LD_VAR 0 5
18938: PPUSH
18939: LD_INT 22
18941: PUSH
18942: LD_VAR 0 13
18946: PPUSH
18947: CALL_OW 255
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: LD_INT 30
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 30
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PPUSH
18988: CALL_OW 72
18992: ST_TO_ADDR
// for i = 1 to hexes do
18993: LD_ADDR_VAR 0 9
18997: PUSH
18998: DOUBLE
18999: LD_INT 1
19001: DEC
19002: ST_TO_ADDR
19003: LD_VAR 0 14
19007: PUSH
19008: FOR_TO
19009: IFFALSE 19685
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19011: LD_ADDR_VAR 0 13
19015: PUSH
19016: LD_VAR 0 14
19020: PUSH
19021: LD_VAR 0 9
19025: ARRAY
19026: PUSH
19027: LD_INT 1
19029: ARRAY
19030: PPUSH
19031: LD_VAR 0 14
19035: PUSH
19036: LD_VAR 0 9
19040: ARRAY
19041: PUSH
19042: LD_INT 2
19044: ARRAY
19045: PPUSH
19046: CALL_OW 428
19050: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19051: LD_VAR 0 14
19055: PUSH
19056: LD_VAR 0 9
19060: ARRAY
19061: PUSH
19062: LD_INT 1
19064: ARRAY
19065: PPUSH
19066: LD_VAR 0 14
19070: PUSH
19071: LD_VAR 0 9
19075: ARRAY
19076: PUSH
19077: LD_INT 2
19079: ARRAY
19080: PPUSH
19081: CALL_OW 351
19085: PUSH
19086: LD_VAR 0 14
19090: PUSH
19091: LD_VAR 0 9
19095: ARRAY
19096: PUSH
19097: LD_INT 1
19099: ARRAY
19100: PPUSH
19101: LD_VAR 0 14
19105: PUSH
19106: LD_VAR 0 9
19110: ARRAY
19111: PUSH
19112: LD_INT 2
19114: ARRAY
19115: PPUSH
19116: CALL_OW 488
19120: NOT
19121: OR
19122: PUSH
19123: LD_VAR 0 13
19127: PPUSH
19128: CALL_OW 247
19132: PUSH
19133: LD_INT 3
19135: EQUAL
19136: OR
19137: IFFALSE 19143
// exit ;
19139: POP
19140: POP
19141: GO 19687
// if not tmp then
19143: LD_VAR 0 13
19147: NOT
19148: IFFALSE 19152
// continue ;
19150: GO 19008
// result := true ;
19152: LD_ADDR_VAR 0 8
19156: PUSH
19157: LD_INT 1
19159: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
19160: LD_VAR 0 6
19164: PUSH
19165: LD_VAR 0 13
19169: PPUSH
19170: CALL_OW 247
19174: PUSH
19175: LD_INT 2
19177: EQUAL
19178: AND
19179: PUSH
19180: LD_VAR 0 13
19184: PPUSH
19185: CALL_OW 263
19189: PUSH
19190: LD_INT 1
19192: EQUAL
19193: AND
19194: IFFALSE 19358
// begin if IsDrivenBy ( tmp ) then
19196: LD_VAR 0 13
19200: PPUSH
19201: CALL_OW 311
19205: IFFALSE 19209
// continue ;
19207: GO 19008
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19209: LD_VAR 0 6
19213: PPUSH
19214: LD_INT 3
19216: PUSH
19217: LD_INT 60
19219: PUSH
19220: EMPTY
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 3
19229: PUSH
19230: LD_INT 55
19232: PUSH
19233: EMPTY
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 72
19248: IFFALSE 19356
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19250: LD_ADDR_VAR 0 18
19254: PUSH
19255: LD_VAR 0 6
19259: PPUSH
19260: LD_INT 3
19262: PUSH
19263: LD_INT 60
19265: PUSH
19266: EMPTY
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 3
19275: PUSH
19276: LD_INT 55
19278: PUSH
19279: EMPTY
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PPUSH
19290: CALL_OW 72
19294: PUSH
19295: LD_INT 1
19297: ARRAY
19298: ST_TO_ADDR
// if IsInUnit ( driver ) then
19299: LD_VAR 0 18
19303: PPUSH
19304: CALL_OW 310
19308: IFFALSE 19319
// ComExit ( driver ) ;
19310: LD_VAR 0 18
19314: PPUSH
19315: CALL 44052 0 1
// AddComEnterUnit ( driver , tmp ) ;
19319: LD_VAR 0 18
19323: PPUSH
19324: LD_VAR 0 13
19328: PPUSH
19329: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19333: LD_VAR 0 18
19337: PPUSH
19338: LD_VAR 0 7
19342: PPUSH
19343: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19347: LD_VAR 0 18
19351: PPUSH
19352: CALL_OW 181
// end ; continue ;
19356: GO 19008
// end ; if not cleaners or not tmp in cleaners then
19358: LD_VAR 0 6
19362: NOT
19363: PUSH
19364: LD_VAR 0 13
19368: PUSH
19369: LD_VAR 0 6
19373: IN
19374: NOT
19375: OR
19376: IFFALSE 19683
// begin if dep then
19378: LD_VAR 0 17
19382: IFFALSE 19518
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19384: LD_ADDR_VAR 0 16
19388: PUSH
19389: LD_VAR 0 17
19393: PUSH
19394: LD_INT 1
19396: ARRAY
19397: PPUSH
19398: CALL_OW 250
19402: PPUSH
19403: LD_VAR 0 17
19407: PUSH
19408: LD_INT 1
19410: ARRAY
19411: PPUSH
19412: CALL_OW 254
19416: PPUSH
19417: LD_INT 5
19419: PPUSH
19420: CALL_OW 272
19424: PUSH
19425: LD_VAR 0 17
19429: PUSH
19430: LD_INT 1
19432: ARRAY
19433: PPUSH
19434: CALL_OW 251
19438: PPUSH
19439: LD_VAR 0 17
19443: PUSH
19444: LD_INT 1
19446: ARRAY
19447: PPUSH
19448: CALL_OW 254
19452: PPUSH
19453: LD_INT 5
19455: PPUSH
19456: CALL_OW 273
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19465: LD_VAR 0 16
19469: PUSH
19470: LD_INT 1
19472: ARRAY
19473: PPUSH
19474: LD_VAR 0 16
19478: PUSH
19479: LD_INT 2
19481: ARRAY
19482: PPUSH
19483: CALL_OW 488
19487: IFFALSE 19518
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19489: LD_VAR 0 13
19493: PPUSH
19494: LD_VAR 0 16
19498: PUSH
19499: LD_INT 1
19501: ARRAY
19502: PPUSH
19503: LD_VAR 0 16
19507: PUSH
19508: LD_INT 2
19510: ARRAY
19511: PPUSH
19512: CALL_OW 111
// continue ;
19516: GO 19008
// end ; end ; r := GetDir ( tmp ) ;
19518: LD_ADDR_VAR 0 15
19522: PUSH
19523: LD_VAR 0 13
19527: PPUSH
19528: CALL_OW 254
19532: ST_TO_ADDR
// if r = 5 then
19533: LD_VAR 0 15
19537: PUSH
19538: LD_INT 5
19540: EQUAL
19541: IFFALSE 19551
// r := 0 ;
19543: LD_ADDR_VAR 0 15
19547: PUSH
19548: LD_INT 0
19550: ST_TO_ADDR
// for j = r to 5 do
19551: LD_ADDR_VAR 0 10
19555: PUSH
19556: DOUBLE
19557: LD_VAR 0 15
19561: DEC
19562: ST_TO_ADDR
19563: LD_INT 5
19565: PUSH
19566: FOR_TO
19567: IFFALSE 19681
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19569: LD_ADDR_VAR 0 11
19573: PUSH
19574: LD_VAR 0 13
19578: PPUSH
19579: CALL_OW 250
19583: PPUSH
19584: LD_VAR 0 10
19588: PPUSH
19589: LD_INT 2
19591: PPUSH
19592: CALL_OW 272
19596: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19597: LD_ADDR_VAR 0 12
19601: PUSH
19602: LD_VAR 0 13
19606: PPUSH
19607: CALL_OW 251
19611: PPUSH
19612: LD_VAR 0 10
19616: PPUSH
19617: LD_INT 2
19619: PPUSH
19620: CALL_OW 273
19624: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19625: LD_VAR 0 11
19629: PPUSH
19630: LD_VAR 0 12
19634: PPUSH
19635: CALL_OW 488
19639: PUSH
19640: LD_VAR 0 11
19644: PPUSH
19645: LD_VAR 0 12
19649: PPUSH
19650: CALL_OW 428
19654: NOT
19655: AND
19656: IFFALSE 19679
// begin ComMoveXY ( tmp , _x , _y ) ;
19658: LD_VAR 0 13
19662: PPUSH
19663: LD_VAR 0 11
19667: PPUSH
19668: LD_VAR 0 12
19672: PPUSH
19673: CALL_OW 111
// break ;
19677: GO 19681
// end ; end ;
19679: GO 19566
19681: POP
19682: POP
// end ; end ;
19683: GO 19008
19685: POP
19686: POP
// end ;
19687: LD_VAR 0 8
19691: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19692: LD_INT 0
19694: PPUSH
// result := true ;
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19703: LD_VAR 0 2
19707: PUSH
19708: LD_INT 24
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19722
19714: LD_INT 33
19716: DOUBLE
19717: EQUAL
19718: IFTRUE 19722
19720: GO 19747
19722: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19723: LD_ADDR_VAR 0 3
19727: PUSH
19728: LD_INT 32
19730: PPUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 321
19740: PUSH
19741: LD_INT 2
19743: EQUAL
19744: ST_TO_ADDR
19745: GO 20067
19747: LD_INT 20
19749: DOUBLE
19750: EQUAL
19751: IFTRUE 19755
19753: GO 19780
19755: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19756: LD_ADDR_VAR 0 3
19760: PUSH
19761: LD_INT 6
19763: PPUSH
19764: LD_VAR 0 1
19768: PPUSH
19769: CALL_OW 321
19773: PUSH
19774: LD_INT 2
19776: EQUAL
19777: ST_TO_ADDR
19778: GO 20067
19780: LD_INT 22
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19794
19786: LD_INT 36
19788: DOUBLE
19789: EQUAL
19790: IFTRUE 19794
19792: GO 19819
19794: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19795: LD_ADDR_VAR 0 3
19799: PUSH
19800: LD_INT 15
19802: PPUSH
19803: LD_VAR 0 1
19807: PPUSH
19808: CALL_OW 321
19812: PUSH
19813: LD_INT 2
19815: EQUAL
19816: ST_TO_ADDR
19817: GO 20067
19819: LD_INT 30
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19852
19827: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19828: LD_ADDR_VAR 0 3
19832: PUSH
19833: LD_INT 20
19835: PPUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: CALL_OW 321
19845: PUSH
19846: LD_INT 2
19848: EQUAL
19849: ST_TO_ADDR
19850: GO 20067
19852: LD_INT 28
19854: DOUBLE
19855: EQUAL
19856: IFTRUE 19866
19858: LD_INT 21
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19891
19866: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: LD_INT 21
19874: PPUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 321
19884: PUSH
19885: LD_INT 2
19887: EQUAL
19888: ST_TO_ADDR
19889: GO 20067
19891: LD_INT 16
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 19926
19899: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19900: LD_ADDR_VAR 0 3
19904: PUSH
19905: LD_EXP 96
19909: PPUSH
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 321
19919: PUSH
19920: LD_INT 2
19922: EQUAL
19923: ST_TO_ADDR
19924: GO 20067
19926: LD_INT 19
19928: DOUBLE
19929: EQUAL
19930: IFTRUE 19940
19932: LD_INT 23
19934: DOUBLE
19935: EQUAL
19936: IFTRUE 19940
19938: GO 19967
19940: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19941: LD_ADDR_VAR 0 3
19945: PUSH
19946: LD_EXP 95
19950: PPUSH
19951: LD_VAR 0 1
19955: PPUSH
19956: CALL_OW 321
19960: PUSH
19961: LD_INT 2
19963: EQUAL
19964: ST_TO_ADDR
19965: GO 20067
19967: LD_INT 17
19969: DOUBLE
19970: EQUAL
19971: IFTRUE 19975
19973: GO 20000
19975: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19976: LD_ADDR_VAR 0 3
19980: PUSH
19981: LD_INT 39
19983: PPUSH
19984: LD_VAR 0 1
19988: PPUSH
19989: CALL_OW 321
19993: PUSH
19994: LD_INT 2
19996: EQUAL
19997: ST_TO_ADDR
19998: GO 20067
20000: LD_INT 18
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20033
20008: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_INT 40
20016: PPUSH
20017: LD_VAR 0 1
20021: PPUSH
20022: CALL_OW 321
20026: PUSH
20027: LD_INT 2
20029: EQUAL
20030: ST_TO_ADDR
20031: GO 20067
20033: LD_INT 27
20035: DOUBLE
20036: EQUAL
20037: IFTRUE 20041
20039: GO 20066
20041: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20042: LD_ADDR_VAR 0 3
20046: PUSH
20047: LD_INT 35
20049: PPUSH
20050: LD_VAR 0 1
20054: PPUSH
20055: CALL_OW 321
20059: PUSH
20060: LD_INT 2
20062: EQUAL
20063: ST_TO_ADDR
20064: GO 20067
20066: POP
// end ;
20067: LD_VAR 0 3
20071: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
20072: LD_INT 0
20074: PPUSH
20075: PPUSH
20076: PPUSH
20077: PPUSH
20078: PPUSH
20079: PPUSH
20080: PPUSH
20081: PPUSH
20082: PPUSH
20083: PPUSH
20084: PPUSH
// result := false ;
20085: LD_ADDR_VAR 0 6
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20093: LD_VAR 0 1
20097: NOT
20098: PUSH
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 266
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: LD_INT 1
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: IN
20119: NOT
20120: OR
20121: PUSH
20122: LD_VAR 0 2
20126: NOT
20127: OR
20128: PUSH
20129: LD_VAR 0 5
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: LD_INT 2
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 4
20148: PUSH
20149: LD_INT 5
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: IN
20160: NOT
20161: OR
20162: PUSH
20163: LD_VAR 0 3
20167: PPUSH
20168: LD_VAR 0 4
20172: PPUSH
20173: CALL_OW 488
20177: NOT
20178: OR
20179: IFFALSE 20183
// exit ;
20181: GO 20919
// side := GetSide ( depot ) ;
20183: LD_ADDR_VAR 0 9
20187: PUSH
20188: LD_VAR 0 1
20192: PPUSH
20193: CALL_OW 255
20197: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20198: LD_VAR 0 9
20202: PPUSH
20203: LD_VAR 0 2
20207: PPUSH
20208: CALL 19692 0 2
20212: NOT
20213: IFFALSE 20217
// exit ;
20215: GO 20919
// pom := GetBase ( depot ) ;
20217: LD_ADDR_VAR 0 10
20221: PUSH
20222: LD_VAR 0 1
20226: PPUSH
20227: CALL_OW 274
20231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20232: LD_ADDR_VAR 0 11
20236: PUSH
20237: LD_VAR 0 2
20241: PPUSH
20242: LD_VAR 0 1
20246: PPUSH
20247: CALL_OW 248
20251: PPUSH
20252: CALL_OW 450
20256: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20257: LD_VAR 0 10
20261: PPUSH
20262: LD_INT 1
20264: PPUSH
20265: CALL_OW 275
20269: PUSH
20270: LD_VAR 0 11
20274: PUSH
20275: LD_INT 1
20277: ARRAY
20278: GREATEREQUAL
20279: PUSH
20280: LD_VAR 0 10
20284: PPUSH
20285: LD_INT 2
20287: PPUSH
20288: CALL_OW 275
20292: PUSH
20293: LD_VAR 0 11
20297: PUSH
20298: LD_INT 2
20300: ARRAY
20301: GREATEREQUAL
20302: AND
20303: PUSH
20304: LD_VAR 0 10
20308: PPUSH
20309: LD_INT 3
20311: PPUSH
20312: CALL_OW 275
20316: PUSH
20317: LD_VAR 0 11
20321: PUSH
20322: LD_INT 3
20324: ARRAY
20325: GREATEREQUAL
20326: AND
20327: NOT
20328: IFFALSE 20332
// exit ;
20330: GO 20919
// if GetBType ( depot ) = b_depot then
20332: LD_VAR 0 1
20336: PPUSH
20337: CALL_OW 266
20341: PUSH
20342: LD_INT 0
20344: EQUAL
20345: IFFALSE 20357
// dist := 28 else
20347: LD_ADDR_VAR 0 14
20351: PUSH
20352: LD_INT 28
20354: ST_TO_ADDR
20355: GO 20365
// dist := 36 ;
20357: LD_ADDR_VAR 0 14
20361: PUSH
20362: LD_INT 36
20364: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20365: LD_VAR 0 1
20369: PPUSH
20370: LD_VAR 0 3
20374: PPUSH
20375: LD_VAR 0 4
20379: PPUSH
20380: CALL_OW 297
20384: PUSH
20385: LD_VAR 0 14
20389: GREATER
20390: IFFALSE 20394
// exit ;
20392: GO 20919
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20394: LD_ADDR_VAR 0 12
20398: PUSH
20399: LD_VAR 0 2
20403: PPUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: LD_VAR 0 4
20413: PPUSH
20414: LD_VAR 0 5
20418: PPUSH
20419: LD_VAR 0 1
20423: PPUSH
20424: CALL_OW 248
20428: PPUSH
20429: LD_INT 0
20431: PPUSH
20432: CALL 20924 0 6
20436: ST_TO_ADDR
// if not hexes then
20437: LD_VAR 0 12
20441: NOT
20442: IFFALSE 20446
// exit ;
20444: GO 20919
// hex := GetHexInfo ( x , y ) ;
20446: LD_ADDR_VAR 0 15
20450: PUSH
20451: LD_VAR 0 3
20455: PPUSH
20456: LD_VAR 0 4
20460: PPUSH
20461: CALL_OW 546
20465: ST_TO_ADDR
// if hex [ 1 ] then
20466: LD_VAR 0 15
20470: PUSH
20471: LD_INT 1
20473: ARRAY
20474: IFFALSE 20478
// exit ;
20476: GO 20919
// height := hex [ 2 ] ;
20478: LD_ADDR_VAR 0 13
20482: PUSH
20483: LD_VAR 0 15
20487: PUSH
20488: LD_INT 2
20490: ARRAY
20491: ST_TO_ADDR
// for i = 1 to hexes do
20492: LD_ADDR_VAR 0 7
20496: PUSH
20497: DOUBLE
20498: LD_INT 1
20500: DEC
20501: ST_TO_ADDR
20502: LD_VAR 0 12
20506: PUSH
20507: FOR_TO
20508: IFFALSE 20838
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20510: LD_VAR 0 12
20514: PUSH
20515: LD_VAR 0 7
20519: ARRAY
20520: PUSH
20521: LD_INT 1
20523: ARRAY
20524: PPUSH
20525: LD_VAR 0 12
20529: PUSH
20530: LD_VAR 0 7
20534: ARRAY
20535: PUSH
20536: LD_INT 2
20538: ARRAY
20539: PPUSH
20540: CALL_OW 488
20544: NOT
20545: PUSH
20546: LD_VAR 0 12
20550: PUSH
20551: LD_VAR 0 7
20555: ARRAY
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: PPUSH
20561: LD_VAR 0 12
20565: PUSH
20566: LD_VAR 0 7
20570: ARRAY
20571: PUSH
20572: LD_INT 2
20574: ARRAY
20575: PPUSH
20576: CALL_OW 428
20580: PUSH
20581: LD_INT 0
20583: GREATER
20584: OR
20585: PUSH
20586: LD_VAR 0 12
20590: PUSH
20591: LD_VAR 0 7
20595: ARRAY
20596: PUSH
20597: LD_INT 1
20599: ARRAY
20600: PPUSH
20601: LD_VAR 0 12
20605: PUSH
20606: LD_VAR 0 7
20610: ARRAY
20611: PUSH
20612: LD_INT 2
20614: ARRAY
20615: PPUSH
20616: CALL_OW 351
20620: OR
20621: IFFALSE 20627
// exit ;
20623: POP
20624: POP
20625: GO 20919
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20627: LD_ADDR_VAR 0 8
20631: PUSH
20632: LD_VAR 0 12
20636: PUSH
20637: LD_VAR 0 7
20641: ARRAY
20642: PUSH
20643: LD_INT 1
20645: ARRAY
20646: PPUSH
20647: LD_VAR 0 12
20651: PUSH
20652: LD_VAR 0 7
20656: ARRAY
20657: PUSH
20658: LD_INT 2
20660: ARRAY
20661: PPUSH
20662: CALL_OW 546
20666: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20667: LD_VAR 0 8
20671: PUSH
20672: LD_INT 1
20674: ARRAY
20675: PUSH
20676: LD_VAR 0 8
20680: PUSH
20681: LD_INT 2
20683: ARRAY
20684: PUSH
20685: LD_VAR 0 13
20689: PUSH
20690: LD_INT 2
20692: PLUS
20693: GREATER
20694: OR
20695: PUSH
20696: LD_VAR 0 8
20700: PUSH
20701: LD_INT 2
20703: ARRAY
20704: PUSH
20705: LD_VAR 0 13
20709: PUSH
20710: LD_INT 2
20712: MINUS
20713: LESS
20714: OR
20715: PUSH
20716: LD_VAR 0 8
20720: PUSH
20721: LD_INT 3
20723: ARRAY
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 8
20730: PUSH
20731: LD_INT 9
20733: PUSH
20734: LD_INT 10
20736: PUSH
20737: LD_INT 11
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: LD_INT 13
20745: PUSH
20746: LD_INT 16
20748: PUSH
20749: LD_INT 17
20751: PUSH
20752: LD_INT 18
20754: PUSH
20755: LD_INT 19
20757: PUSH
20758: LD_INT 20
20760: PUSH
20761: LD_INT 21
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: IN
20779: NOT
20780: OR
20781: PUSH
20782: LD_VAR 0 8
20786: PUSH
20787: LD_INT 5
20789: ARRAY
20790: NOT
20791: OR
20792: PUSH
20793: LD_VAR 0 8
20797: PUSH
20798: LD_INT 6
20800: ARRAY
20801: PUSH
20802: LD_INT 1
20804: PUSH
20805: LD_INT 2
20807: PUSH
20808: LD_INT 7
20810: PUSH
20811: LD_INT 9
20813: PUSH
20814: LD_INT 10
20816: PUSH
20817: LD_INT 11
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: IN
20828: NOT
20829: OR
20830: IFFALSE 20836
// exit ;
20832: POP
20833: POP
20834: GO 20919
// end ;
20836: GO 20507
20838: POP
20839: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20840: LD_VAR 0 9
20844: PPUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: LD_VAR 0 4
20854: PPUSH
20855: LD_INT 20
20857: PPUSH
20858: CALL 12865 0 4
20862: PUSH
20863: LD_INT 4
20865: ARRAY
20866: IFFALSE 20870
// exit ;
20868: GO 20919
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20870: LD_VAR 0 2
20874: PUSH
20875: LD_INT 29
20877: PUSH
20878: LD_INT 30
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: IN
20885: PUSH
20886: LD_VAR 0 3
20890: PPUSH
20891: LD_VAR 0 4
20895: PPUSH
20896: LD_VAR 0 9
20900: PPUSH
20901: CALL_OW 440
20905: NOT
20906: AND
20907: IFFALSE 20911
// exit ;
20909: GO 20919
// result := true ;
20911: LD_ADDR_VAR 0 6
20915: PUSH
20916: LD_INT 1
20918: ST_TO_ADDR
// end ;
20919: LD_VAR 0 6
20923: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20924: LD_INT 0
20926: PPUSH
20927: PPUSH
20928: PPUSH
20929: PPUSH
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
20937: PPUSH
20938: PPUSH
20939: PPUSH
20940: PPUSH
20941: PPUSH
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
20946: PPUSH
20947: PPUSH
20948: PPUSH
20949: PPUSH
20950: PPUSH
20951: PPUSH
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
20975: PPUSH
20976: PPUSH
20977: PPUSH
20978: PPUSH
20979: PPUSH
20980: PPUSH
20981: PPUSH
20982: PPUSH
20983: PPUSH
// result = [ ] ;
20984: LD_ADDR_VAR 0 7
20988: PUSH
20989: EMPTY
20990: ST_TO_ADDR
// temp_list = [ ] ;
20991: LD_ADDR_VAR 0 9
20995: PUSH
20996: EMPTY
20997: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20998: LD_VAR 0 4
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: LD_INT 3
21014: PUSH
21015: LD_INT 4
21017: PUSH
21018: LD_INT 5
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: IN
21029: NOT
21030: PUSH
21031: LD_VAR 0 1
21035: PUSH
21036: LD_INT 0
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: IN
21046: PUSH
21047: LD_VAR 0 5
21051: PUSH
21052: LD_INT 1
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 3
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: LIST
21065: IN
21066: NOT
21067: AND
21068: OR
21069: IFFALSE 21073
// exit ;
21071: GO 39464
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21073: LD_VAR 0 1
21077: PUSH
21078: LD_INT 6
21080: PUSH
21081: LD_INT 7
21083: PUSH
21084: LD_INT 8
21086: PUSH
21087: LD_INT 13
21089: PUSH
21090: LD_INT 12
21092: PUSH
21093: LD_INT 15
21095: PUSH
21096: LD_INT 11
21098: PUSH
21099: LD_INT 14
21101: PUSH
21102: LD_INT 10
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: IN
21116: IFFALSE 21126
// btype = b_lab ;
21118: LD_ADDR_VAR 0 1
21122: PUSH
21123: LD_INT 6
21125: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21126: LD_VAR 0 6
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: IN
21145: NOT
21146: PUSH
21147: LD_VAR 0 1
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: LD_INT 1
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: LD_INT 3
21163: PUSH
21164: LD_INT 6
21166: PUSH
21167: LD_INT 36
21169: PUSH
21170: LD_INT 4
21172: PUSH
21173: LD_INT 5
21175: PUSH
21176: LD_INT 31
21178: PUSH
21179: LD_INT 32
21181: PUSH
21182: LD_INT 33
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: IN
21198: NOT
21199: PUSH
21200: LD_VAR 0 6
21204: PUSH
21205: LD_INT 1
21207: EQUAL
21208: AND
21209: OR
21210: PUSH
21211: LD_VAR 0 1
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 3
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: IN
21226: NOT
21227: PUSH
21228: LD_VAR 0 6
21232: PUSH
21233: LD_INT 2
21235: EQUAL
21236: AND
21237: OR
21238: IFFALSE 21248
// mode = 0 ;
21240: LD_ADDR_VAR 0 6
21244: PUSH
21245: LD_INT 0
21247: ST_TO_ADDR
// case mode of 0 :
21248: LD_VAR 0 6
21252: PUSH
21253: LD_INT 0
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 32714
21261: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21262: LD_ADDR_VAR 0 11
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 1
21282: NEG
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 0
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: LD_INT 1
21320: NEG
21321: PUSH
21322: LD_INT 0
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 0
21355: PUSH
21356: LD_INT 2
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: LD_INT 3
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: LD_INT 3
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 1
21428: NEG
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21455: LD_ADDR_VAR 0 12
21459: PUSH
21460: LD_INT 0
21462: PUSH
21463: LD_INT 0
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 1
21513: NEG
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 1
21524: NEG
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 2
21547: PUSH
21548: LD_INT 0
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 1
21567: NEG
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 2
21578: NEG
21579: PUSH
21580: LD_INT 0
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 2
21589: NEG
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 2
21601: NEG
21602: PUSH
21603: LD_INT 1
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 3
21612: NEG
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 3
21623: NEG
21624: PUSH
21625: LD_INT 1
21627: NEG
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21651: LD_ADDR_VAR 0 13
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 0
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 1
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 0
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 1
21709: NEG
21710: PUSH
21711: LD_INT 0
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: LD_INT 1
21724: NEG
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 2
21736: NEG
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: LD_INT 1
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 2
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 1
21764: PUSH
21765: LD_INT 2
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: NEG
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 2
21786: NEG
21787: PUSH
21788: LD_INT 2
21790: NEG
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 2
21798: NEG
21799: PUSH
21800: LD_INT 3
21802: NEG
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: LD_INT 3
21810: NEG
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 3
21822: NEG
21823: PUSH
21824: LD_INT 3
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21850: LD_ADDR_VAR 0 14
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: LD_INT 0
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 0
21867: PUSH
21868: LD_INT 1
21870: NEG
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 0
21898: PUSH
21899: LD_INT 1
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: LD_INT 0
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 1
21919: NEG
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: NEG
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: LD_INT 2
21946: NEG
21947: PUSH
21948: EMPTY
21949: LIST
21950: LIST
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: LD_INT 1
21957: NEG
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 0
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 1
21985: NEG
21986: PUSH
21987: LD_INT 1
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: LD_INT 3
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 0
22008: PUSH
22009: LD_INT 3
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 1
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22046: LD_ADDR_VAR 0 15
22050: PUSH
22051: LD_INT 0
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 0
22063: PUSH
22064: LD_INT 1
22066: NEG
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: LD_INT 0
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 0
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: LD_INT 1
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 2
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 1
22158: NEG
22159: PUSH
22160: LD_INT 1
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 2
22169: NEG
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 2
22180: NEG
22181: PUSH
22182: LD_INT 1
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 3
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22239: LD_ADDR_VAR 0 16
22243: PUSH
22244: LD_INT 0
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 0
22256: PUSH
22257: LD_INT 1
22259: NEG
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 1
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 0
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 1
22297: NEG
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 1
22308: NEG
22309: PUSH
22310: LD_INT 1
22312: NEG
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: LD_INT 2
22324: NEG
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 2
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 2
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: NEG
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: NEG
22375: PUSH
22376: LD_INT 2
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 3
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 3
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 2
22406: PUSH
22407: LD_INT 3
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22432: LD_ADDR_VAR 0 17
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 0
22449: PUSH
22450: LD_INT 1
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 0
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: LD_INT 1
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: NEG
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 1
22513: NEG
22514: PUSH
22515: LD_INT 2
22517: NEG
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: LD_INT 1
22539: NEG
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: PUSH
22558: LD_INT 1
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 2
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: LD_INT 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 0
22587: PUSH
22588: LD_INT 2
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 1
22597: NEG
22598: PUSH
22599: LD_INT 1
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 2
22608: NEG
22609: PUSH
22610: LD_INT 0
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 2
22619: NEG
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: LD_INT 2
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22662: LD_ADDR_VAR 0 18
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 0
22679: PUSH
22680: LD_INT 1
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: LD_INT 0
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: LD_INT 1
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 1
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 0
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 1
22731: NEG
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 2
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 0
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: LD_INT 1
22769: NEG
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 2
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 2
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: LD_INT 2
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 2
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 0
22817: PUSH
22818: LD_INT 2
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: LD_INT 1
22827: NEG
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 2
22838: NEG
22839: PUSH
22840: LD_INT 0
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: NEG
22862: PUSH
22863: LD_INT 2
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22892: LD_ADDR_VAR 0 19
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: LD_INT 1
22912: NEG
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 0
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 0
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: LD_INT 1
22965: NEG
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: LD_INT 2
22977: NEG
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 0
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 2
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23122: LD_ADDR_VAR 0 20
23126: PUSH
23127: LD_INT 0
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 0
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 1
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 1
23203: NEG
23204: PUSH
23205: LD_INT 2
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 2
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 2
23257: PUSH
23258: LD_INT 2
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 1
23287: NEG
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23352: LD_ADDR_VAR 0 21
23356: PUSH
23357: LD_INT 0
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: LD_INT 1
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 1
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: NEG
23422: PUSH
23423: LD_INT 1
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 2
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 2
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: LD_INT 2
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: LD_INT 2
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 2
23539: NEG
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 2
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23582: LD_ADDR_VAR 0 22
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 2
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 2
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 1
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 1
23747: NEG
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: LD_INT 1
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 2
23781: NEG
23782: PUSH
23783: LD_INT 2
23785: NEG
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23812: LD_ADDR_VAR 0 23
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: LD_INT 1
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 0
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: LD_INT 2
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 1
23919: NEG
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 1
23957: PUSH
23958: LD_INT 2
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 0
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: LD_INT 1
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: LD_INT 0
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 2
24011: NEG
24012: PUSH
24013: LD_INT 2
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 2
24023: NEG
24024: PUSH
24025: LD_INT 3
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: NEG
24036: PUSH
24037: LD_INT 3
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 1
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24092: LD_ADDR_VAR 0 24
24096: PUSH
24097: LD_INT 0
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 0
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 1
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: LD_INT 0
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 1
24161: NEG
24162: PUSH
24163: LD_INT 1
24165: NEG
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 2
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 2
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: NEG
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 2
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: LD_INT 1
24317: NEG
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 3
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 3
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24368: LD_ADDR_VAR 0 25
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 1
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: LD_INT 0
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 2
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 2
24464: NEG
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 2
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 3
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 3
24589: PUSH
24590: LD_INT 2
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: LD_INT 3
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: LD_INT 3
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24642: LD_ADDR_VAR 0 26
24646: PUSH
24647: LD_INT 0
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: LD_INT 1
24723: NEG
24724: PUSH
24725: LD_INT 2
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 2
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 2
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: NEG
24808: PUSH
24809: LD_INT 1
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: NEG
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 3
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: PUSH
24864: LD_INT 3
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24918: LD_ADDR_VAR 0 27
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 0
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: LD_INT 0
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: NEG
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: LD_INT 2
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: LD_INT 1
25025: NEG
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 2
25033: PUSH
25034: LD_INT 0
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 2
25043: PUSH
25044: LD_INT 1
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: PUSH
25054: LD_INT 2
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: PUSH
25064: LD_INT 2
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: NEG
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: NEG
25118: PUSH
25119: LD_INT 2
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 1
25129: NEG
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 2
25140: NEG
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 3
25151: NEG
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 3
25163: NEG
25164: PUSH
25165: LD_INT 2
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25198: LD_ADDR_VAR 0 28
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 1
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 1
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: LD_INT 1
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 1
25256: NEG
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 0
25291: PUSH
25292: LD_INT 2
25294: NEG
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 2
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 2
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 0
25353: PUSH
25354: LD_INT 2
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: NEG
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: LD_INT 3
25413: NEG
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: LD_INT 3
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 3
25433: NEG
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 3
25445: NEG
25446: PUSH
25447: LD_INT 2
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25480: LD_ADDR_VAR 0 29
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 1
25538: NEG
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: LD_INT 2
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: LD_INT 2
25576: NEG
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 2
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 2
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: LD_INT 2
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 2
25646: NEG
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 2
25658: NEG
25659: PUSH
25660: LD_INT 2
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: LD_INT 3
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 3
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: LD_INT 3
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: NEG
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25759: LD_ADDR_VAR 0 30
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 1
25914: NEG
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 3
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 2
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 3
26002: NEG
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26037: LD_ADDR_VAR 0 31
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 1
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 0
26085: PUSH
26086: LD_INT 1
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 0
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 1
26106: NEG
26107: PUSH
26108: LD_INT 1
26110: NEG
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: NEG
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 2
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: LD_INT 2
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 2
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 2
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 2
26226: NEG
26227: PUSH
26228: LD_INT 3
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 3
26249: PUSH
26250: LD_INT 1
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 3
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 3
26280: NEG
26281: PUSH
26282: LD_INT 2
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26315: LD_ADDR_VAR 0 32
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 0
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 1
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 0
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 2
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: NEG
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 2
26492: NEG
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: LD_INT 3
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 3
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: NEG
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 3
26558: NEG
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26593: LD_ADDR_VAR 0 33
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 0
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 0
26641: PUSH
26642: LD_INT 1
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 1
26651: NEG
26652: PUSH
26653: LD_INT 0
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: LD_INT 2
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: LD_INT 3
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 3
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 3
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26872: LD_ADDR_VAR 0 34
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: LD_INT 0
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 2
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 2
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: NEG
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 3
27067: NEG
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: LD_INT 2
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 3
27086: PUSH
27087: LD_INT 2
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: LD_INT 3
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: NEG
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 3
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27152: LD_ADDR_VAR 0 35
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 1
27172: NEG
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 1
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: NEG
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27264: LD_ADDR_VAR 0 36
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: NEG
27323: PUSH
27324: LD_INT 0
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: NEG
27346: PUSH
27347: LD_INT 2
27349: NEG
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27376: LD_ADDR_VAR 0 37
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27488: LD_ADDR_VAR 0 38
27492: PUSH
27493: LD_INT 0
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 2
27579: NEG
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27600: LD_ADDR_VAR 0 39
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: LD_INT 2
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27712: LD_ADDR_VAR 0 40
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 1
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27824: LD_ADDR_VAR 0 41
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 0
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 0
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 1
27882: NEG
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: NEG
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 2
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: LD_INT 2
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 2
27979: NEG
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 2
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 2
28002: NEG
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: NEG
28015: PUSH
28016: LD_INT 3
28018: NEG
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 3
28037: PUSH
28038: LD_INT 0
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: PUSH
28048: LD_INT 1
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 3
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 3
28067: PUSH
28068: LD_INT 3
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 3
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 3
28098: NEG
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 3
28109: NEG
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: NEG
28122: PUSH
28123: LD_INT 2
28125: NEG
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 3
28133: NEG
28134: PUSH
28135: LD_INT 3
28137: NEG
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28174: LD_ADDR_VAR 0 42
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: PUSH
28213: LD_INT 1
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 1
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 1
28243: NEG
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: LD_INT 2
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 0
28267: PUSH
28268: LD_INT 2
28270: NEG
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 1
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 2
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 2
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 0
28319: PUSH
28320: LD_INT 2
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 1
28329: NEG
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: NEG
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 2
28352: NEG
28353: PUSH
28354: LD_INT 2
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 3
28368: NEG
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: LD_INT 3
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 0
28388: PUSH
28389: LD_INT 3
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: LD_INT 2
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 3
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 3
28420: PUSH
28421: LD_INT 3
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 3
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 3
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: NEG
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 3
28471: NEG
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 3
28483: NEG
28484: PUSH
28485: LD_INT 3
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28524: LD_ADDR_VAR 0 43
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 1
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: NEG
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: LD_INT 1
28597: NEG
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 1
28605: NEG
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 0
28617: PUSH
28618: LD_INT 2
28620: NEG
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 1
28631: NEG
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 2
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 0
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 2
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 3
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 3
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 3
28758: PUSH
28759: LD_INT 0
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 3
28768: PUSH
28769: LD_INT 1
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 3
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 3
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: NEG
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 3
28820: NEG
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 3
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28872: LD_ADDR_VAR 0 44
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: LD_INT 0
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: NEG
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: LD_INT 1
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: LD_INT 2
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 2
29038: NEG
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: LD_INT 2
29054: NEG
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 1
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 3
29105: PUSH
29106: LD_INT 2
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 3
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 2
29125: PUSH
29126: LD_INT 3
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: LD_INT 1
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 3
29146: NEG
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 3
29157: NEG
29158: PUSH
29159: LD_INT 1
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 3
29169: NEG
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: LD_INT 3
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29222: LD_ADDR_VAR 0 45
29226: PUSH
29227: LD_INT 0
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 0
29239: PUSH
29240: LD_INT 1
29242: NEG
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 0
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 1
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 0
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 2
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: LD_INT 2
29404: NEG
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: NEG
29413: PUSH
29414: LD_INT 3
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 3
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 3
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 3
29468: PUSH
29469: LD_INT 3
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 2
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: LD_INT 3
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: LD_INT 3
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 3
29519: NEG
29520: PUSH
29521: LD_INT 2
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 3
29531: NEG
29532: PUSH
29533: LD_INT 3
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29572: LD_ADDR_VAR 0 46
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 0
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: NEG
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 2
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: LD_INT 2
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 2
29749: NEG
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: LD_INT 3
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 3
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: LD_INT 2
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 3
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 3
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 3
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 2
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: LD_INT 1
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 3
29868: NEG
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 3
29879: NEG
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29920: LD_ADDR_VAR 0 47
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 1
29989: NEG
29990: PUSH
29991: LD_INT 1
29993: NEG
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 1
30001: NEG
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: LD_INT 1
30027: NEG
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: LD_INT 1
30039: NEG
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30071: LD_ADDR_VAR 0 48
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: LD_INT 0
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: LD_INT 0
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: LD_INT 0
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30218: LD_ADDR_VAR 0 49
30222: PUSH
30223: LD_INT 0
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 0
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30362: LD_ADDR_VAR 0 50
30366: PUSH
30367: LD_INT 0
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: NEG
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 2
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: EMPTY
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30506: LD_ADDR_VAR 0 51
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 1
30575: NEG
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 0
30597: PUSH
30598: LD_INT 2
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 2
30618: NEG
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 2
30629: NEG
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30653: LD_ADDR_VAR 0 52
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 2
30780: NEG
30781: PUSH
30782: LD_INT 2
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30804: LD_ADDR_VAR 0 53
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 0
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 1
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 2
30919: PUSH
30920: LD_INT 0
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 1
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: PUSH
30940: LD_INT 2
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: LD_INT 2
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31034: LD_ADDR_VAR 0 54
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: LD_INT 1
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 1
31103: NEG
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: LD_INT 2
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: LD_INT 1
31141: NEG
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 2
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 2
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: LD_INT 0
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: LD_INT 2
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31264: LD_ADDR_VAR 0 55
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 2
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31494: LD_ADDR_VAR 0 56
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31724: LD_ADDR_VAR 0 57
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 0
31741: PUSH
31742: LD_INT 1
31744: NEG
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 1
31782: NEG
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: LD_INT 1
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 1
31805: NEG
31806: PUSH
31807: LD_INT 2
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 0
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 2
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 2
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 2
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: LD_INT 2
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: LD_INT 2
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31954: LD_ADDR_VAR 0 58
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 0
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 0
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 2
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 2
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32184: LD_ADDR_VAR 0 59
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 1
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 1
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32272: LD_ADDR_VAR 0 60
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 0
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: LD_INT 0
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32360: LD_ADDR_VAR 0 61
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: LD_INT 1
32380: NEG
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: LD_INT 1
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: NEG
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32448: LD_ADDR_VAR 0 62
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32536: LD_ADDR_VAR 0 63
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32624: LD_ADDR_VAR 0 64
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 0
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 0
32672: PUSH
32673: LD_INT 1
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// end ; 1 :
32712: GO 38609
32714: LD_INT 1
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 35345
32722: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32723: LD_ADDR_VAR 0 11
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: LD_INT 3
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32767: LD_ADDR_VAR 0 12
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 3
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 3
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32808: LD_ADDR_VAR 0 13
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 3
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 3
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32848: LD_ADDR_VAR 0 14
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32889: LD_ADDR_VAR 0 15
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 3
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32933: LD_ADDR_VAR 0 16
32937: PUSH
32938: LD_INT 2
32940: NEG
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: LD_INT 2
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 3
32964: NEG
32965: PUSH
32966: LD_INT 3
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32979: LD_ADDR_VAR 0 17
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: LD_INT 3
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 3
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33023: LD_ADDR_VAR 0 18
33027: PUSH
33028: LD_INT 2
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 3
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 3
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33064: LD_ADDR_VAR 0 19
33068: PUSH
33069: LD_INT 3
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 3
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: PUSH
33092: LD_INT 3
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33104: LD_ADDR_VAR 0 20
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 3
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: LD_INT 2
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: LIST
33144: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33145: LD_ADDR_VAR 0 21
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 3
33163: NEG
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33189: LD_ADDR_VAR 0 22
33193: PUSH
33194: LD_INT 2
33196: NEG
33197: PUSH
33198: LD_INT 3
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 3
33208: NEG
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 3
33220: NEG
33221: PUSH
33222: LD_INT 3
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: LIST
33234: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33235: LD_ADDR_VAR 0 23
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: LD_INT 3
33245: NEG
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 4
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: LD_INT 3
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33279: LD_ADDR_VAR 0 24
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33320: LD_ADDR_VAR 0 25
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: LD_INT 3
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 4
33337: PUSH
33338: LD_INT 3
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: LD_INT 4
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: LIST
33359: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33360: LD_ADDR_VAR 0 26
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 4
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 3
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33401: LD_ADDR_VAR 0 27
33405: PUSH
33406: LD_INT 3
33408: NEG
33409: PUSH
33410: LD_INT 0
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 4
33430: NEG
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33445: LD_ADDR_VAR 0 28
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: LD_INT 3
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 3
33464: NEG
33465: PUSH
33466: LD_INT 4
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 4
33476: NEG
33477: PUSH
33478: LD_INT 3
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33491: LD_ADDR_VAR 0 29
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 3
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: LD_INT 3
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 4
33536: NEG
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 0
33544: PUSH
33545: LD_INT 4
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: LD_INT 5
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 0
33578: PUSH
33579: LD_INT 5
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 4
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 6
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 6
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: LD_INT 5
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33646: LD_ADDR_VAR 0 30
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 3
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 3
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 1
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 4
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 4
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 4
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 5
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 5
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 5
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 6
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 6
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33789: LD_ADDR_VAR 0 31
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 4
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 4
33836: PUSH
33837: LD_INT 4
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: LD_INT 4
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 5
33856: PUSH
33857: LD_INT 4
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 5
33866: PUSH
33867: LD_INT 5
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 4
33876: PUSH
33877: LD_INT 5
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 6
33886: PUSH
33887: LD_INT 5
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 6
33896: PUSH
33897: LD_INT 6
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 5
33906: PUSH
33907: LD_INT 6
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33928: LD_ADDR_VAR 0 32
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: LD_INT 3
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: NEG
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 4
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 4
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: LD_INT 3
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 5
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 5
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 4
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: LD_INT 6
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 6
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 5
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34071: LD_ADDR_VAR 0 33
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 3
34100: NEG
34101: PUSH
34102: LD_INT 1
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 3
34112: NEG
34113: PUSH
34114: LD_INT 1
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 4
34123: NEG
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 4
34134: NEG
34135: PUSH
34136: LD_INT 1
34138: NEG
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 4
34146: NEG
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 5
34157: NEG
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 5
34168: NEG
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 5
34180: NEG
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 6
34191: NEG
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 6
34202: NEG
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34226: LD_ADDR_VAR 0 34
34230: PUSH
34231: LD_INT 2
34233: NEG
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 3
34245: NEG
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 3
34257: NEG
34258: PUSH
34259: LD_INT 3
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 3
34269: NEG
34270: PUSH
34271: LD_INT 4
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 4
34281: NEG
34282: PUSH
34283: LD_INT 3
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 4
34293: NEG
34294: PUSH
34295: LD_INT 4
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 4
34305: NEG
34306: PUSH
34307: LD_INT 5
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 5
34317: NEG
34318: PUSH
34319: LD_INT 4
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 5
34329: NEG
34330: PUSH
34331: LD_INT 5
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 5
34341: NEG
34342: PUSH
34343: LD_INT 6
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 6
34353: NEG
34354: PUSH
34355: LD_INT 5
34357: NEG
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 6
34365: NEG
34366: PUSH
34367: LD_INT 6
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34389: LD_ADDR_VAR 0 41
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 3
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 1
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34433: LD_ADDR_VAR 0 42
34437: PUSH
34438: LD_INT 2
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 3
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34474: LD_ADDR_VAR 0 43
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 3
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 3
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34514: LD_ADDR_VAR 0 44
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34555: LD_ADDR_VAR 0 45
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 3
34584: NEG
34585: PUSH
34586: LD_INT 1
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34599: LD_ADDR_VAR 0 46
34603: PUSH
34604: LD_INT 2
34606: NEG
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: LD_INT 3
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 3
34630: NEG
34631: PUSH
34632: LD_INT 2
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34645: LD_ADDR_VAR 0 47
34649: PUSH
34650: LD_INT 2
34652: NEG
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: LD_INT 3
34668: NEG
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34678: LD_ADDR_VAR 0 48
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34709: LD_ADDR_VAR 0 49
34713: PUSH
34714: LD_INT 3
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 3
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34738: LD_ADDR_VAR 0 50
34742: PUSH
34743: LD_INT 2
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: LD_INT 3
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34767: LD_ADDR_VAR 0 51
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34798: LD_ADDR_VAR 0 52
34802: PUSH
34803: LD_INT 3
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34831: LD_ADDR_VAR 0 53
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: LD_INT 3
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: LD_INT 3
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: LD_INT 2
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: LIST
34874: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34875: LD_ADDR_VAR 0 54
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 3
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 3
34903: PUSH
34904: LD_INT 1
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34916: LD_ADDR_VAR 0 55
34920: PUSH
34921: LD_INT 3
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: LD_INT 3
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: LD_INT 3
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34956: LD_ADDR_VAR 0 56
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: LIST
34996: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34997: LD_ADDR_VAR 0 57
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 3
35015: NEG
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 3
35026: NEG
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35041: LD_ADDR_VAR 0 58
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 3
35072: NEG
35073: PUSH
35074: LD_INT 3
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35087: LD_ADDR_VAR 0 59
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 2
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 0
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35131: LD_ADDR_VAR 0 60
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35172: LD_ADDR_VAR 0 61
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35212: LD_ADDR_VAR 0 62
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: NEG
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35253: LD_ADDR_VAR 0 63
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 2
35282: NEG
35283: PUSH
35284: LD_INT 1
35286: NEG
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35297: LD_ADDR_VAR 0 64
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: LD_INT 2
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: LD_INT 2
35332: NEG
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: ST_TO_ADDR
// end ; 2 :
35343: GO 38609
35345: LD_INT 2
35347: DOUBLE
35348: EQUAL
35349: IFTRUE 35353
35351: GO 38608
35353: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35354: LD_ADDR_VAR 0 29
35358: PUSH
35359: LD_INT 4
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 4
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 5
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 5
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 4
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 3
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: LD_INT 2
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 3
35454: PUSH
35455: LD_INT 3
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 3
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 4
35474: PUSH
35475: LD_INT 3
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 4
35484: PUSH
35485: LD_INT 4
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 3
35494: PUSH
35495: LD_INT 4
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: LD_INT 3
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 4
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 4
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 3
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: LD_INT 4
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 5
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 5
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: NEG
35606: PUSH
35607: LD_INT 3
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 5
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 3
35637: NEG
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 3
35648: NEG
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 3
35682: NEG
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 4
35693: NEG
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 4
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 4
35716: NEG
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 4
35739: NEG
35740: PUSH
35741: LD_INT 4
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 4
35751: NEG
35752: PUSH
35753: LD_INT 5
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 3
35763: NEG
35764: PUSH
35765: LD_INT 4
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 3
35775: NEG
35776: PUSH
35777: LD_INT 3
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 4
35787: NEG
35788: PUSH
35789: LD_INT 3
35791: NEG
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 5
35799: NEG
35800: PUSH
35801: LD_INT 4
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 5
35811: NEG
35812: PUSH
35813: LD_INT 5
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 3
35823: NEG
35824: PUSH
35825: LD_INT 5
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 5
35835: NEG
35836: PUSH
35837: LD_INT 3
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35892: LD_ADDR_VAR 0 30
35896: PUSH
35897: LD_INT 4
35899: PUSH
35900: LD_INT 4
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 4
35909: PUSH
35910: LD_INT 3
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 5
35919: PUSH
35920: LD_INT 4
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 5
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 4
35939: PUSH
35940: LD_INT 5
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: LD_INT 4
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 3
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 5
35969: PUSH
35970: LD_INT 3
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 3
35979: PUSH
35980: LD_INT 5
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 2
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 3
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 4
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 4
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 3
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 2
36061: PUSH
36062: LD_INT 4
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 2
36071: NEG
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 4
36082: NEG
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 4
36093: NEG
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 3
36105: NEG
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 3
36116: NEG
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 4
36127: NEG
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 5
36138: NEG
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 5
36149: NEG
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 5
36161: NEG
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 3
36173: NEG
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 3
36184: NEG
36185: PUSH
36186: LD_INT 3
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: LD_INT 4
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: NEG
36209: PUSH
36210: LD_INT 3
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 2
36220: NEG
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 3
36232: NEG
36233: PUSH
36234: LD_INT 2
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 4
36244: NEG
36245: PUSH
36246: LD_INT 3
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 4
36256: NEG
36257: PUSH
36258: LD_INT 4
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: LD_INT 4
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 4
36280: NEG
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 4
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 5
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 4
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 3
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 4
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 5
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: PUSH
36372: LD_INT 3
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 5
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36439: LD_ADDR_VAR 0 31
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 4
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 5
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: LD_INT 5
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 4
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 3
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: PUSH
36519: LD_INT 5
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 2
36528: NEG
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 3
36539: NEG
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 3
36550: NEG
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 4
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 4
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 4
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: NEG
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 4
36641: NEG
36642: PUSH
36643: LD_INT 4
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 4
36653: NEG
36654: PUSH
36655: LD_INT 5
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 3
36665: NEG
36666: PUSH
36667: LD_INT 4
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 3
36677: NEG
36678: PUSH
36679: LD_INT 3
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 4
36689: NEG
36690: PUSH
36691: LD_INT 3
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 5
36701: NEG
36702: PUSH
36703: LD_INT 4
36705: NEG
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 5
36713: NEG
36714: PUSH
36715: LD_INT 5
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 3
36725: NEG
36726: PUSH
36727: LD_INT 5
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 5
36737: NEG
36738: PUSH
36739: LD_INT 3
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 4
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 3
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 2
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 3
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: NEG
36817: PUSH
36818: LD_INT 4
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: LD_INT 2
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: LD_INT 4
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 4
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 4
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 5
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 5
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 4
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 3
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 3
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 5
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36989: LD_ADDR_VAR 0 32
36993: PUSH
36994: LD_INT 4
36996: NEG
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 4
37007: NEG
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 4
37041: NEG
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 5
37052: NEG
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 5
37063: NEG
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 5
37075: NEG
37076: PUSH
37077: LD_INT 2
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 3
37087: NEG
37088: PUSH
37089: LD_INT 2
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 3
37098: NEG
37099: PUSH
37100: LD_INT 3
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 4
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: LD_INT 3
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 3
37146: NEG
37147: PUSH
37148: LD_INT 2
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 4
37158: NEG
37159: PUSH
37160: LD_INT 3
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 4
37170: NEG
37171: PUSH
37172: LD_INT 4
37174: NEG
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 4
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 4
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 4
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 5
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 4
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 3
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 3
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 4
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: NEG
37274: PUSH
37275: LD_INT 5
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 3
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 5
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 3
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 3
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 4
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 4
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 3
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 4
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 4
37401: PUSH
37402: LD_INT 4
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 4
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 5
37421: PUSH
37422: LD_INT 4
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 5
37431: PUSH
37432: LD_INT 5
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 4
37441: PUSH
37442: LD_INT 5
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 3
37451: PUSH
37452: LD_INT 4
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: LD_INT 3
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 5
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: LD_INT 5
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37536: LD_ADDR_VAR 0 33
37540: PUSH
37541: LD_INT 4
37543: NEG
37544: PUSH
37545: LD_INT 4
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 4
37555: NEG
37556: PUSH
37557: LD_INT 5
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: LD_INT 4
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 3
37579: NEG
37580: PUSH
37581: LD_INT 3
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 4
37591: NEG
37592: PUSH
37593: LD_INT 3
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 5
37603: NEG
37604: PUSH
37605: LD_INT 4
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 5
37615: NEG
37616: PUSH
37617: LD_INT 5
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 3
37627: NEG
37628: PUSH
37629: LD_INT 5
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 5
37639: NEG
37640: PUSH
37641: LD_INT 3
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 3
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 4
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 3
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 2
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: PUSH
37708: LD_INT 3
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: LD_INT 4
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: NEG
37742: PUSH
37743: LD_INT 4
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 4
37753: PUSH
37754: LD_INT 0
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 4
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 5
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 5
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 4
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 5
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 3
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 3
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 4
37876: PUSH
37877: LD_INT 4
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: LD_INT 4
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: PUSH
37897: LD_INT 3
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 4
37916: PUSH
37917: LD_INT 2
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 2
37926: PUSH
37927: LD_INT 4
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 4
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 3
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 4
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 5
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 5
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 4
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 3
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: PUSH
38009: LD_INT 5
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38074: LD_ADDR_VAR 0 34
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 4
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 5
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 4
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 4
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 5
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 2
38160: PUSH
38161: LD_INT 3
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 5
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 4
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 4
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: LD_INT 2
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 4
38266: PUSH
38267: LD_INT 2
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 4
38276: PUSH
38277: LD_INT 4
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 4
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 5
38296: PUSH
38297: LD_INT 4
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 5
38306: PUSH
38307: LD_INT 5
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 4
38316: PUSH
38317: LD_INT 5
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: PUSH
38327: LD_INT 4
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: LD_INT 3
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 5
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: LD_INT 5
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 3
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 4
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 4
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: LD_INT 2
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 4
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 4
38459: NEG
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 4
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 3
38482: NEG
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 3
38493: NEG
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 4
38504: NEG
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 5
38515: NEG
38516: PUSH
38517: LD_INT 0
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 5
38526: NEG
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 5
38538: NEG
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 3
38550: NEG
38551: PUSH
38552: LD_INT 2
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: ST_TO_ADDR
// end ; end ;
38606: GO 38609
38608: POP
// case btype of b_depot , b_warehouse :
38609: LD_VAR 0 1
38613: PUSH
38614: LD_INT 0
38616: DOUBLE
38617: EQUAL
38618: IFTRUE 38628
38620: LD_INT 1
38622: DOUBLE
38623: EQUAL
38624: IFTRUE 38628
38626: GO 38829
38628: POP
// case nation of nation_american :
38629: LD_VAR 0 5
38633: PUSH
38634: LD_INT 1
38636: DOUBLE
38637: EQUAL
38638: IFTRUE 38642
38640: GO 38698
38642: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38643: LD_ADDR_VAR 0 9
38647: PUSH
38648: LD_VAR 0 11
38652: PUSH
38653: LD_VAR 0 12
38657: PUSH
38658: LD_VAR 0 13
38662: PUSH
38663: LD_VAR 0 14
38667: PUSH
38668: LD_VAR 0 15
38672: PUSH
38673: LD_VAR 0 16
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: PUSH
38686: LD_VAR 0 4
38690: PUSH
38691: LD_INT 1
38693: PLUS
38694: ARRAY
38695: ST_TO_ADDR
38696: GO 38827
38698: LD_INT 2
38700: DOUBLE
38701: EQUAL
38702: IFTRUE 38706
38704: GO 38762
38706: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38707: LD_ADDR_VAR 0 9
38711: PUSH
38712: LD_VAR 0 17
38716: PUSH
38717: LD_VAR 0 18
38721: PUSH
38722: LD_VAR 0 19
38726: PUSH
38727: LD_VAR 0 20
38731: PUSH
38732: LD_VAR 0 21
38736: PUSH
38737: LD_VAR 0 22
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: PUSH
38750: LD_VAR 0 4
38754: PUSH
38755: LD_INT 1
38757: PLUS
38758: ARRAY
38759: ST_TO_ADDR
38760: GO 38827
38762: LD_INT 3
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38770
38768: GO 38826
38770: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38771: LD_ADDR_VAR 0 9
38775: PUSH
38776: LD_VAR 0 23
38780: PUSH
38781: LD_VAR 0 24
38785: PUSH
38786: LD_VAR 0 25
38790: PUSH
38791: LD_VAR 0 26
38795: PUSH
38796: LD_VAR 0 27
38800: PUSH
38801: LD_VAR 0 28
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: PUSH
38814: LD_VAR 0 4
38818: PUSH
38819: LD_INT 1
38821: PLUS
38822: ARRAY
38823: ST_TO_ADDR
38824: GO 38827
38826: POP
38827: GO 39382
38829: LD_INT 2
38831: DOUBLE
38832: EQUAL
38833: IFTRUE 38843
38835: LD_INT 3
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38899
38843: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38844: LD_ADDR_VAR 0 9
38848: PUSH
38849: LD_VAR 0 29
38853: PUSH
38854: LD_VAR 0 30
38858: PUSH
38859: LD_VAR 0 31
38863: PUSH
38864: LD_VAR 0 32
38868: PUSH
38869: LD_VAR 0 33
38873: PUSH
38874: LD_VAR 0 34
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: PUSH
38887: LD_VAR 0 4
38891: PUSH
38892: LD_INT 1
38894: PLUS
38895: ARRAY
38896: ST_TO_ADDR
38897: GO 39382
38899: LD_INT 16
38901: DOUBLE
38902: EQUAL
38903: IFTRUE 38961
38905: LD_INT 17
38907: DOUBLE
38908: EQUAL
38909: IFTRUE 38961
38911: LD_INT 18
38913: DOUBLE
38914: EQUAL
38915: IFTRUE 38961
38917: LD_INT 19
38919: DOUBLE
38920: EQUAL
38921: IFTRUE 38961
38923: LD_INT 22
38925: DOUBLE
38926: EQUAL
38927: IFTRUE 38961
38929: LD_INT 20
38931: DOUBLE
38932: EQUAL
38933: IFTRUE 38961
38935: LD_INT 21
38937: DOUBLE
38938: EQUAL
38939: IFTRUE 38961
38941: LD_INT 23
38943: DOUBLE
38944: EQUAL
38945: IFTRUE 38961
38947: LD_INT 24
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38961
38953: LD_INT 25
38955: DOUBLE
38956: EQUAL
38957: IFTRUE 38961
38959: GO 39017
38961: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38962: LD_ADDR_VAR 0 9
38966: PUSH
38967: LD_VAR 0 35
38971: PUSH
38972: LD_VAR 0 36
38976: PUSH
38977: LD_VAR 0 37
38981: PUSH
38982: LD_VAR 0 38
38986: PUSH
38987: LD_VAR 0 39
38991: PUSH
38992: LD_VAR 0 40
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: PUSH
39005: LD_VAR 0 4
39009: PUSH
39010: LD_INT 1
39012: PLUS
39013: ARRAY
39014: ST_TO_ADDR
39015: GO 39382
39017: LD_INT 6
39019: DOUBLE
39020: EQUAL
39021: IFTRUE 39073
39023: LD_INT 7
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39073
39029: LD_INT 8
39031: DOUBLE
39032: EQUAL
39033: IFTRUE 39073
39035: LD_INT 13
39037: DOUBLE
39038: EQUAL
39039: IFTRUE 39073
39041: LD_INT 12
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39073
39047: LD_INT 15
39049: DOUBLE
39050: EQUAL
39051: IFTRUE 39073
39053: LD_INT 11
39055: DOUBLE
39056: EQUAL
39057: IFTRUE 39073
39059: LD_INT 14
39061: DOUBLE
39062: EQUAL
39063: IFTRUE 39073
39065: LD_INT 10
39067: DOUBLE
39068: EQUAL
39069: IFTRUE 39073
39071: GO 39129
39073: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39074: LD_ADDR_VAR 0 9
39078: PUSH
39079: LD_VAR 0 41
39083: PUSH
39084: LD_VAR 0 42
39088: PUSH
39089: LD_VAR 0 43
39093: PUSH
39094: LD_VAR 0 44
39098: PUSH
39099: LD_VAR 0 45
39103: PUSH
39104: LD_VAR 0 46
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: PUSH
39117: LD_VAR 0 4
39121: PUSH
39122: LD_INT 1
39124: PLUS
39125: ARRAY
39126: ST_TO_ADDR
39127: GO 39382
39129: LD_INT 36
39131: DOUBLE
39132: EQUAL
39133: IFTRUE 39137
39135: GO 39193
39137: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39138: LD_ADDR_VAR 0 9
39142: PUSH
39143: LD_VAR 0 47
39147: PUSH
39148: LD_VAR 0 48
39152: PUSH
39153: LD_VAR 0 49
39157: PUSH
39158: LD_VAR 0 50
39162: PUSH
39163: LD_VAR 0 51
39167: PUSH
39168: LD_VAR 0 52
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: PUSH
39181: LD_VAR 0 4
39185: PUSH
39186: LD_INT 1
39188: PLUS
39189: ARRAY
39190: ST_TO_ADDR
39191: GO 39382
39193: LD_INT 4
39195: DOUBLE
39196: EQUAL
39197: IFTRUE 39219
39199: LD_INT 5
39201: DOUBLE
39202: EQUAL
39203: IFTRUE 39219
39205: LD_INT 34
39207: DOUBLE
39208: EQUAL
39209: IFTRUE 39219
39211: LD_INT 37
39213: DOUBLE
39214: EQUAL
39215: IFTRUE 39219
39217: GO 39275
39219: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39220: LD_ADDR_VAR 0 9
39224: PUSH
39225: LD_VAR 0 53
39229: PUSH
39230: LD_VAR 0 54
39234: PUSH
39235: LD_VAR 0 55
39239: PUSH
39240: LD_VAR 0 56
39244: PUSH
39245: LD_VAR 0 57
39249: PUSH
39250: LD_VAR 0 58
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: PUSH
39263: LD_VAR 0 4
39267: PUSH
39268: LD_INT 1
39270: PLUS
39271: ARRAY
39272: ST_TO_ADDR
39273: GO 39382
39275: LD_INT 31
39277: DOUBLE
39278: EQUAL
39279: IFTRUE 39325
39281: LD_INT 32
39283: DOUBLE
39284: EQUAL
39285: IFTRUE 39325
39287: LD_INT 33
39289: DOUBLE
39290: EQUAL
39291: IFTRUE 39325
39293: LD_INT 27
39295: DOUBLE
39296: EQUAL
39297: IFTRUE 39325
39299: LD_INT 26
39301: DOUBLE
39302: EQUAL
39303: IFTRUE 39325
39305: LD_INT 28
39307: DOUBLE
39308: EQUAL
39309: IFTRUE 39325
39311: LD_INT 29
39313: DOUBLE
39314: EQUAL
39315: IFTRUE 39325
39317: LD_INT 30
39319: DOUBLE
39320: EQUAL
39321: IFTRUE 39325
39323: GO 39381
39325: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39326: LD_ADDR_VAR 0 9
39330: PUSH
39331: LD_VAR 0 59
39335: PUSH
39336: LD_VAR 0 60
39340: PUSH
39341: LD_VAR 0 61
39345: PUSH
39346: LD_VAR 0 62
39350: PUSH
39351: LD_VAR 0 63
39355: PUSH
39356: LD_VAR 0 64
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: PUSH
39369: LD_VAR 0 4
39373: PUSH
39374: LD_INT 1
39376: PLUS
39377: ARRAY
39378: ST_TO_ADDR
39379: GO 39382
39381: POP
// temp_list2 = [ ] ;
39382: LD_ADDR_VAR 0 10
39386: PUSH
39387: EMPTY
39388: ST_TO_ADDR
// for i in temp_list do
39389: LD_ADDR_VAR 0 8
39393: PUSH
39394: LD_VAR 0 9
39398: PUSH
39399: FOR_IN
39400: IFFALSE 39452
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39402: LD_ADDR_VAR 0 10
39406: PUSH
39407: LD_VAR 0 10
39411: PUSH
39412: LD_VAR 0 8
39416: PUSH
39417: LD_INT 1
39419: ARRAY
39420: PUSH
39421: LD_VAR 0 2
39425: PLUS
39426: PUSH
39427: LD_VAR 0 8
39431: PUSH
39432: LD_INT 2
39434: ARRAY
39435: PUSH
39436: LD_VAR 0 3
39440: PLUS
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: EMPTY
39447: LIST
39448: ADD
39449: ST_TO_ADDR
39450: GO 39399
39452: POP
39453: POP
// result = temp_list2 ;
39454: LD_ADDR_VAR 0 7
39458: PUSH
39459: LD_VAR 0 10
39463: ST_TO_ADDR
// end ;
39464: LD_VAR 0 7
39468: RET
// export function EnemyInRange ( unit , dist ) ; begin
39469: LD_INT 0
39471: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39472: LD_ADDR_VAR 0 3
39476: PUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 255
39486: PPUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 250
39496: PPUSH
39497: LD_VAR 0 1
39501: PPUSH
39502: CALL_OW 251
39506: PPUSH
39507: LD_VAR 0 2
39511: PPUSH
39512: CALL 12865 0 4
39516: PUSH
39517: LD_INT 4
39519: ARRAY
39520: ST_TO_ADDR
// end ;
39521: LD_VAR 0 3
39525: RET
// export function PlayerSeeMe ( unit ) ; begin
39526: LD_INT 0
39528: PPUSH
// result := See ( your_side , unit ) ;
39529: LD_ADDR_VAR 0 2
39533: PUSH
39534: LD_OWVAR 2
39538: PPUSH
39539: LD_VAR 0 1
39543: PPUSH
39544: CALL_OW 292
39548: ST_TO_ADDR
// end ;
39549: LD_VAR 0 2
39553: RET
// export function ReverseDir ( unit ) ; begin
39554: LD_INT 0
39556: PPUSH
// if not unit then
39557: LD_VAR 0 1
39561: NOT
39562: IFFALSE 39566
// exit ;
39564: GO 39589
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39566: LD_ADDR_VAR 0 2
39570: PUSH
39571: LD_VAR 0 1
39575: PPUSH
39576: CALL_OW 254
39580: PUSH
39581: LD_INT 3
39583: PLUS
39584: PUSH
39585: LD_INT 6
39587: MOD
39588: ST_TO_ADDR
// end ;
39589: LD_VAR 0 2
39593: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
39594: LD_INT 0
39596: PPUSH
39597: PPUSH
39598: PPUSH
39599: PPUSH
39600: PPUSH
// if not hexes then
39601: LD_VAR 0 2
39605: NOT
39606: IFFALSE 39610
// exit ;
39608: GO 39758
// dist := 9999 ;
39610: LD_ADDR_VAR 0 5
39614: PUSH
39615: LD_INT 9999
39617: ST_TO_ADDR
// for i = 1 to hexes do
39618: LD_ADDR_VAR 0 4
39622: PUSH
39623: DOUBLE
39624: LD_INT 1
39626: DEC
39627: ST_TO_ADDR
39628: LD_VAR 0 2
39632: PUSH
39633: FOR_TO
39634: IFFALSE 39746
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
39636: LD_VAR 0 1
39640: PPUSH
39641: LD_VAR 0 2
39645: PUSH
39646: LD_VAR 0 4
39650: ARRAY
39651: PUSH
39652: LD_INT 1
39654: ARRAY
39655: PPUSH
39656: LD_VAR 0 2
39660: PUSH
39661: LD_VAR 0 4
39665: ARRAY
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: PPUSH
39671: CALL_OW 297
39675: PUSH
39676: LD_VAR 0 5
39680: LESS
39681: IFFALSE 39744
// begin hex := hexes [ i ] ;
39683: LD_ADDR_VAR 0 7
39687: PUSH
39688: LD_VAR 0 2
39692: PUSH
39693: LD_VAR 0 4
39697: ARRAY
39698: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39699: LD_ADDR_VAR 0 5
39703: PUSH
39704: LD_VAR 0 1
39708: PPUSH
39709: LD_VAR 0 2
39713: PUSH
39714: LD_VAR 0 4
39718: ARRAY
39719: PUSH
39720: LD_INT 1
39722: ARRAY
39723: PPUSH
39724: LD_VAR 0 2
39728: PUSH
39729: LD_VAR 0 4
39733: ARRAY
39734: PUSH
39735: LD_INT 2
39737: ARRAY
39738: PPUSH
39739: CALL_OW 297
39743: ST_TO_ADDR
// end ; end ;
39744: GO 39633
39746: POP
39747: POP
// result := hex ;
39748: LD_ADDR_VAR 0 3
39752: PUSH
39753: LD_VAR 0 7
39757: ST_TO_ADDR
// end ;
39758: LD_VAR 0 3
39762: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39763: LD_INT 0
39765: PPUSH
39766: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39767: LD_VAR 0 1
39771: NOT
39772: PUSH
39773: LD_VAR 0 1
39777: PUSH
39778: LD_INT 21
39780: PUSH
39781: LD_INT 2
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 23
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PPUSH
39802: CALL_OW 69
39806: IN
39807: NOT
39808: OR
39809: IFFALSE 39813
// exit ;
39811: GO 39860
// for i = 1 to 3 do
39813: LD_ADDR_VAR 0 3
39817: PUSH
39818: DOUBLE
39819: LD_INT 1
39821: DEC
39822: ST_TO_ADDR
39823: LD_INT 3
39825: PUSH
39826: FOR_TO
39827: IFFALSE 39858
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39829: LD_VAR 0 1
39833: PPUSH
39834: CALL_OW 250
39838: PPUSH
39839: LD_VAR 0 1
39843: PPUSH
39844: CALL_OW 251
39848: PPUSH
39849: LD_INT 1
39851: PPUSH
39852: CALL_OW 453
39856: GO 39826
39858: POP
39859: POP
// end ;
39860: LD_VAR 0 2
39864: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39865: LD_INT 0
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39873: LD_VAR 0 1
39877: NOT
39878: PUSH
39879: LD_VAR 0 2
39883: NOT
39884: OR
39885: PUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 314
39895: OR
39896: IFFALSE 39900
// exit ;
39898: GO 40341
// x := GetX ( enemy_unit ) ;
39900: LD_ADDR_VAR 0 7
39904: PUSH
39905: LD_VAR 0 2
39909: PPUSH
39910: CALL_OW 250
39914: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39915: LD_ADDR_VAR 0 8
39919: PUSH
39920: LD_VAR 0 2
39924: PPUSH
39925: CALL_OW 251
39929: ST_TO_ADDR
// if not x or not y then
39930: LD_VAR 0 7
39934: NOT
39935: PUSH
39936: LD_VAR 0 8
39940: NOT
39941: OR
39942: IFFALSE 39946
// exit ;
39944: GO 40341
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39946: LD_ADDR_VAR 0 6
39950: PUSH
39951: LD_VAR 0 7
39955: PPUSH
39956: LD_INT 0
39958: PPUSH
39959: LD_INT 4
39961: PPUSH
39962: CALL_OW 272
39966: PUSH
39967: LD_VAR 0 8
39971: PPUSH
39972: LD_INT 0
39974: PPUSH
39975: LD_INT 4
39977: PPUSH
39978: CALL_OW 273
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_VAR 0 7
39991: PPUSH
39992: LD_INT 1
39994: PPUSH
39995: LD_INT 4
39997: PPUSH
39998: CALL_OW 272
40002: PUSH
40003: LD_VAR 0 8
40007: PPUSH
40008: LD_INT 1
40010: PPUSH
40011: LD_INT 4
40013: PPUSH
40014: CALL_OW 273
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_VAR 0 7
40027: PPUSH
40028: LD_INT 2
40030: PPUSH
40031: LD_INT 4
40033: PPUSH
40034: CALL_OW 272
40038: PUSH
40039: LD_VAR 0 8
40043: PPUSH
40044: LD_INT 2
40046: PPUSH
40047: LD_INT 4
40049: PPUSH
40050: CALL_OW 273
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_VAR 0 7
40063: PPUSH
40064: LD_INT 3
40066: PPUSH
40067: LD_INT 4
40069: PPUSH
40070: CALL_OW 272
40074: PUSH
40075: LD_VAR 0 8
40079: PPUSH
40080: LD_INT 3
40082: PPUSH
40083: LD_INT 4
40085: PPUSH
40086: CALL_OW 273
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_VAR 0 7
40099: PPUSH
40100: LD_INT 4
40102: PPUSH
40103: LD_INT 4
40105: PPUSH
40106: CALL_OW 272
40110: PUSH
40111: LD_VAR 0 8
40115: PPUSH
40116: LD_INT 4
40118: PPUSH
40119: LD_INT 4
40121: PPUSH
40122: CALL_OW 273
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_VAR 0 7
40135: PPUSH
40136: LD_INT 5
40138: PPUSH
40139: LD_INT 4
40141: PPUSH
40142: CALL_OW 272
40146: PUSH
40147: LD_VAR 0 8
40151: PPUSH
40152: LD_INT 5
40154: PPUSH
40155: LD_INT 4
40157: PPUSH
40158: CALL_OW 273
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: ST_TO_ADDR
// for i = tmp downto 1 do
40175: LD_ADDR_VAR 0 4
40179: PUSH
40180: DOUBLE
40181: LD_VAR 0 6
40185: INC
40186: ST_TO_ADDR
40187: LD_INT 1
40189: PUSH
40190: FOR_DOWNTO
40191: IFFALSE 40292
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40193: LD_VAR 0 6
40197: PUSH
40198: LD_VAR 0 4
40202: ARRAY
40203: PUSH
40204: LD_INT 1
40206: ARRAY
40207: PPUSH
40208: LD_VAR 0 6
40212: PUSH
40213: LD_VAR 0 4
40217: ARRAY
40218: PUSH
40219: LD_INT 2
40221: ARRAY
40222: PPUSH
40223: CALL_OW 488
40227: NOT
40228: PUSH
40229: LD_VAR 0 6
40233: PUSH
40234: LD_VAR 0 4
40238: ARRAY
40239: PUSH
40240: LD_INT 1
40242: ARRAY
40243: PPUSH
40244: LD_VAR 0 6
40248: PUSH
40249: LD_VAR 0 4
40253: ARRAY
40254: PUSH
40255: LD_INT 2
40257: ARRAY
40258: PPUSH
40259: CALL_OW 428
40263: PUSH
40264: LD_INT 0
40266: NONEQUAL
40267: OR
40268: IFFALSE 40290
// tmp := Delete ( tmp , i ) ;
40270: LD_ADDR_VAR 0 6
40274: PUSH
40275: LD_VAR 0 6
40279: PPUSH
40280: LD_VAR 0 4
40284: PPUSH
40285: CALL_OW 3
40289: ST_TO_ADDR
40290: GO 40190
40292: POP
40293: POP
// j := GetClosestHex ( unit , tmp ) ;
40294: LD_ADDR_VAR 0 5
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: LD_VAR 0 6
40308: PPUSH
40309: CALL 39594 0 2
40313: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40314: LD_VAR 0 1
40318: PPUSH
40319: LD_VAR 0 5
40323: PUSH
40324: LD_INT 1
40326: ARRAY
40327: PPUSH
40328: LD_VAR 0 5
40332: PUSH
40333: LD_INT 2
40335: ARRAY
40336: PPUSH
40337: CALL_OW 111
// end ;
40341: LD_VAR 0 3
40345: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40346: LD_INT 0
40348: PPUSH
40349: PPUSH
40350: PPUSH
// uc_side = 0 ;
40351: LD_ADDR_OWVAR 20
40355: PUSH
40356: LD_INT 0
40358: ST_TO_ADDR
// uc_nation = 0 ;
40359: LD_ADDR_OWVAR 21
40363: PUSH
40364: LD_INT 0
40366: ST_TO_ADDR
// InitHc_All ( ) ;
40367: CALL_OW 584
// InitVc ;
40371: CALL_OW 20
// if mastodonts then
40375: LD_VAR 0 6
40379: IFFALSE 40446
// for i = 1 to mastodonts do
40381: LD_ADDR_VAR 0 11
40385: PUSH
40386: DOUBLE
40387: LD_INT 1
40389: DEC
40390: ST_TO_ADDR
40391: LD_VAR 0 6
40395: PUSH
40396: FOR_TO
40397: IFFALSE 40444
// begin vc_chassis := 31 ;
40399: LD_ADDR_OWVAR 37
40403: PUSH
40404: LD_INT 31
40406: ST_TO_ADDR
// vc_control := control_rider ;
40407: LD_ADDR_OWVAR 38
40411: PUSH
40412: LD_INT 4
40414: ST_TO_ADDR
// animal := CreateVehicle ;
40415: LD_ADDR_VAR 0 12
40419: PUSH
40420: CALL_OW 45
40424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40425: LD_VAR 0 12
40429: PPUSH
40430: LD_VAR 0 8
40434: PPUSH
40435: LD_INT 0
40437: PPUSH
40438: CALL 42581 0 3
// end ;
40442: GO 40396
40444: POP
40445: POP
// if horses then
40446: LD_VAR 0 5
40450: IFFALSE 40517
// for i = 1 to horses do
40452: LD_ADDR_VAR 0 11
40456: PUSH
40457: DOUBLE
40458: LD_INT 1
40460: DEC
40461: ST_TO_ADDR
40462: LD_VAR 0 5
40466: PUSH
40467: FOR_TO
40468: IFFALSE 40515
// begin hc_class := 21 ;
40470: LD_ADDR_OWVAR 28
40474: PUSH
40475: LD_INT 21
40477: ST_TO_ADDR
// hc_gallery :=  ;
40478: LD_ADDR_OWVAR 33
40482: PUSH
40483: LD_STRING 
40485: ST_TO_ADDR
// animal := CreateHuman ;
40486: LD_ADDR_VAR 0 12
40490: PUSH
40491: CALL_OW 44
40495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40496: LD_VAR 0 12
40500: PPUSH
40501: LD_VAR 0 8
40505: PPUSH
40506: LD_INT 0
40508: PPUSH
40509: CALL 42581 0 3
// end ;
40513: GO 40467
40515: POP
40516: POP
// if birds then
40517: LD_VAR 0 1
40521: IFFALSE 40588
// for i = 1 to birds do
40523: LD_ADDR_VAR 0 11
40527: PUSH
40528: DOUBLE
40529: LD_INT 1
40531: DEC
40532: ST_TO_ADDR
40533: LD_VAR 0 1
40537: PUSH
40538: FOR_TO
40539: IFFALSE 40586
// begin hc_class = 18 ;
40541: LD_ADDR_OWVAR 28
40545: PUSH
40546: LD_INT 18
40548: ST_TO_ADDR
// hc_gallery =  ;
40549: LD_ADDR_OWVAR 33
40553: PUSH
40554: LD_STRING 
40556: ST_TO_ADDR
// animal := CreateHuman ;
40557: LD_ADDR_VAR 0 12
40561: PUSH
40562: CALL_OW 44
40566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40567: LD_VAR 0 12
40571: PPUSH
40572: LD_VAR 0 8
40576: PPUSH
40577: LD_INT 0
40579: PPUSH
40580: CALL 42581 0 3
// end ;
40584: GO 40538
40586: POP
40587: POP
// if tigers then
40588: LD_VAR 0 2
40592: IFFALSE 40676
// for i = 1 to tigers do
40594: LD_ADDR_VAR 0 11
40598: PUSH
40599: DOUBLE
40600: LD_INT 1
40602: DEC
40603: ST_TO_ADDR
40604: LD_VAR 0 2
40608: PUSH
40609: FOR_TO
40610: IFFALSE 40674
// begin hc_class = class_tiger ;
40612: LD_ADDR_OWVAR 28
40616: PUSH
40617: LD_INT 14
40619: ST_TO_ADDR
// hc_gallery =  ;
40620: LD_ADDR_OWVAR 33
40624: PUSH
40625: LD_STRING 
40627: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40628: LD_ADDR_OWVAR 35
40632: PUSH
40633: LD_INT 7
40635: NEG
40636: PPUSH
40637: LD_INT 7
40639: PPUSH
40640: CALL_OW 12
40644: ST_TO_ADDR
// animal := CreateHuman ;
40645: LD_ADDR_VAR 0 12
40649: PUSH
40650: CALL_OW 44
40654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40655: LD_VAR 0 12
40659: PPUSH
40660: LD_VAR 0 8
40664: PPUSH
40665: LD_INT 0
40667: PPUSH
40668: CALL 42581 0 3
// end ;
40672: GO 40609
40674: POP
40675: POP
// if apemans then
40676: LD_VAR 0 3
40680: IFFALSE 40803
// for i = 1 to apemans do
40682: LD_ADDR_VAR 0 11
40686: PUSH
40687: DOUBLE
40688: LD_INT 1
40690: DEC
40691: ST_TO_ADDR
40692: LD_VAR 0 3
40696: PUSH
40697: FOR_TO
40698: IFFALSE 40801
// begin hc_class = class_apeman ;
40700: LD_ADDR_OWVAR 28
40704: PUSH
40705: LD_INT 12
40707: ST_TO_ADDR
// hc_gallery =  ;
40708: LD_ADDR_OWVAR 33
40712: PUSH
40713: LD_STRING 
40715: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40716: LD_ADDR_OWVAR 35
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PPUSH
40725: LD_INT 2
40727: PPUSH
40728: CALL_OW 12
40732: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40733: LD_ADDR_OWVAR 31
40737: PUSH
40738: LD_INT 1
40740: PPUSH
40741: LD_INT 3
40743: PPUSH
40744: CALL_OW 12
40748: PUSH
40749: LD_INT 1
40751: PPUSH
40752: LD_INT 3
40754: PPUSH
40755: CALL_OW 12
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: ST_TO_ADDR
// animal := CreateHuman ;
40772: LD_ADDR_VAR 0 12
40776: PUSH
40777: CALL_OW 44
40781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40782: LD_VAR 0 12
40786: PPUSH
40787: LD_VAR 0 8
40791: PPUSH
40792: LD_INT 0
40794: PPUSH
40795: CALL 42581 0 3
// end ;
40799: GO 40697
40801: POP
40802: POP
// if enchidnas then
40803: LD_VAR 0 4
40807: IFFALSE 40874
// for i = 1 to enchidnas do
40809: LD_ADDR_VAR 0 11
40813: PUSH
40814: DOUBLE
40815: LD_INT 1
40817: DEC
40818: ST_TO_ADDR
40819: LD_VAR 0 4
40823: PUSH
40824: FOR_TO
40825: IFFALSE 40872
// begin hc_class = 13 ;
40827: LD_ADDR_OWVAR 28
40831: PUSH
40832: LD_INT 13
40834: ST_TO_ADDR
// hc_gallery =  ;
40835: LD_ADDR_OWVAR 33
40839: PUSH
40840: LD_STRING 
40842: ST_TO_ADDR
// animal := CreateHuman ;
40843: LD_ADDR_VAR 0 12
40847: PUSH
40848: CALL_OW 44
40852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40853: LD_VAR 0 12
40857: PPUSH
40858: LD_VAR 0 8
40862: PPUSH
40863: LD_INT 0
40865: PPUSH
40866: CALL 42581 0 3
// end ;
40870: GO 40824
40872: POP
40873: POP
// if fishes then
40874: LD_VAR 0 7
40878: IFFALSE 40945
// for i = 1 to fishes do
40880: LD_ADDR_VAR 0 11
40884: PUSH
40885: DOUBLE
40886: LD_INT 1
40888: DEC
40889: ST_TO_ADDR
40890: LD_VAR 0 7
40894: PUSH
40895: FOR_TO
40896: IFFALSE 40943
// begin hc_class = 20 ;
40898: LD_ADDR_OWVAR 28
40902: PUSH
40903: LD_INT 20
40905: ST_TO_ADDR
// hc_gallery =  ;
40906: LD_ADDR_OWVAR 33
40910: PUSH
40911: LD_STRING 
40913: ST_TO_ADDR
// animal := CreateHuman ;
40914: LD_ADDR_VAR 0 12
40918: PUSH
40919: CALL_OW 44
40923: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
40924: LD_VAR 0 12
40928: PPUSH
40929: LD_VAR 0 9
40933: PPUSH
40934: LD_INT 0
40936: PPUSH
40937: CALL 42581 0 3
// end ;
40941: GO 40895
40943: POP
40944: POP
// end ;
40945: LD_VAR 0 10
40949: RET
// export function WantHeal ( sci , unit ) ; begin
40950: LD_INT 0
40952: PPUSH
// if GetTaskList ( sci ) > 0 then
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 437
40962: PUSH
40963: LD_INT 0
40965: GREATER
40966: IFFALSE 41036
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
40968: LD_VAR 0 1
40972: PPUSH
40973: CALL_OW 437
40977: PUSH
40978: LD_INT 1
40980: ARRAY
40981: PUSH
40982: LD_INT 1
40984: ARRAY
40985: PUSH
40986: LD_STRING l
40988: EQUAL
40989: PUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL_OW 437
40999: PUSH
41000: LD_INT 1
41002: ARRAY
41003: PUSH
41004: LD_INT 4
41006: ARRAY
41007: PUSH
41008: LD_VAR 0 2
41012: EQUAL
41013: AND
41014: IFFALSE 41026
// result := true else
41016: LD_ADDR_VAR 0 3
41020: PUSH
41021: LD_INT 1
41023: ST_TO_ADDR
41024: GO 41034
// result := false ;
41026: LD_ADDR_VAR 0 3
41030: PUSH
41031: LD_INT 0
41033: ST_TO_ADDR
// end else
41034: GO 41044
// result := false ;
41036: LD_ADDR_VAR 0 3
41040: PUSH
41041: LD_INT 0
41043: ST_TO_ADDR
// end ;
41044: LD_VAR 0 3
41048: RET
// export function HealTarget ( sci ) ; begin
41049: LD_INT 0
41051: PPUSH
// if not sci then
41052: LD_VAR 0 1
41056: NOT
41057: IFFALSE 41061
// exit ;
41059: GO 41126
// result := 0 ;
41061: LD_ADDR_VAR 0 2
41065: PUSH
41066: LD_INT 0
41068: ST_TO_ADDR
// if GetTaskList ( sci ) then
41069: LD_VAR 0 1
41073: PPUSH
41074: CALL_OW 437
41078: IFFALSE 41126
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41080: LD_VAR 0 1
41084: PPUSH
41085: CALL_OW 437
41089: PUSH
41090: LD_INT 1
41092: ARRAY
41093: PUSH
41094: LD_INT 1
41096: ARRAY
41097: PUSH
41098: LD_STRING l
41100: EQUAL
41101: IFFALSE 41126
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41103: LD_ADDR_VAR 0 2
41107: PUSH
41108: LD_VAR 0 1
41112: PPUSH
41113: CALL_OW 437
41117: PUSH
41118: LD_INT 1
41120: ARRAY
41121: PUSH
41122: LD_INT 4
41124: ARRAY
41125: ST_TO_ADDR
// end ;
41126: LD_VAR 0 2
41130: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41131: LD_INT 0
41133: PPUSH
41134: PPUSH
41135: PPUSH
41136: PPUSH
// if not base_units then
41137: LD_VAR 0 1
41141: NOT
41142: IFFALSE 41146
// exit ;
41144: GO 41233
// result := false ;
41146: LD_ADDR_VAR 0 2
41150: PUSH
41151: LD_INT 0
41153: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41154: LD_ADDR_VAR 0 5
41158: PUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: LD_INT 21
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PPUSH
41174: CALL_OW 72
41178: ST_TO_ADDR
// if not tmp then
41179: LD_VAR 0 5
41183: NOT
41184: IFFALSE 41188
// exit ;
41186: GO 41233
// for i in tmp do
41188: LD_ADDR_VAR 0 3
41192: PUSH
41193: LD_VAR 0 5
41197: PUSH
41198: FOR_IN
41199: IFFALSE 41231
// begin result := EnemyInRange ( i , 22 ) ;
41201: LD_ADDR_VAR 0 2
41205: PUSH
41206: LD_VAR 0 3
41210: PPUSH
41211: LD_INT 22
41213: PPUSH
41214: CALL 39469 0 2
41218: ST_TO_ADDR
// if result then
41219: LD_VAR 0 2
41223: IFFALSE 41229
// exit ;
41225: POP
41226: POP
41227: GO 41233
// end ;
41229: GO 41198
41231: POP
41232: POP
// end ;
41233: LD_VAR 0 2
41237: RET
// export function FilterByTag ( units , tag ) ; begin
41238: LD_INT 0
41240: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41241: LD_ADDR_VAR 0 3
41245: PUSH
41246: LD_VAR 0 1
41250: PPUSH
41251: LD_INT 120
41253: PUSH
41254: LD_VAR 0 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PPUSH
41263: CALL_OW 72
41267: ST_TO_ADDR
// end ;
41268: LD_VAR 0 3
41272: RET
// export function IsDriver ( un ) ; begin
41273: LD_INT 0
41275: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41276: LD_ADDR_VAR 0 2
41280: PUSH
41281: LD_VAR 0 1
41285: PUSH
41286: LD_INT 55
41288: PUSH
41289: EMPTY
41290: LIST
41291: PPUSH
41292: CALL_OW 69
41296: IN
41297: ST_TO_ADDR
// end ;
41298: LD_VAR 0 2
41302: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
// list := [ ] ;
41307: LD_ADDR_VAR 0 5
41311: PUSH
41312: EMPTY
41313: ST_TO_ADDR
// case d of 0 :
41314: LD_VAR 0 3
41318: PUSH
41319: LD_INT 0
41321: DOUBLE
41322: EQUAL
41323: IFTRUE 41327
41325: GO 41460
41327: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41328: LD_ADDR_VAR 0 5
41332: PUSH
41333: LD_VAR 0 1
41337: PUSH
41338: LD_INT 4
41340: MINUS
41341: PUSH
41342: LD_VAR 0 2
41346: PUSH
41347: LD_INT 4
41349: MINUS
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: PUSH
41359: LD_VAR 0 1
41363: PUSH
41364: LD_INT 3
41366: MINUS
41367: PUSH
41368: LD_VAR 0 2
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: LIST
41380: PUSH
41381: LD_VAR 0 1
41385: PUSH
41386: LD_INT 4
41388: PLUS
41389: PUSH
41390: LD_VAR 0 2
41394: PUSH
41395: LD_INT 4
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: PUSH
41403: LD_VAR 0 1
41407: PUSH
41408: LD_INT 3
41410: PLUS
41411: PUSH
41412: LD_VAR 0 2
41416: PUSH
41417: LD_INT 3
41419: PLUS
41420: PUSH
41421: LD_INT 5
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: LIST
41428: PUSH
41429: LD_VAR 0 1
41433: PUSH
41434: LD_VAR 0 2
41438: PUSH
41439: LD_INT 4
41441: PLUS
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// end ; 1 :
41458: GO 42158
41460: LD_INT 1
41462: DOUBLE
41463: EQUAL
41464: IFTRUE 41468
41466: GO 41601
41468: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41469: LD_ADDR_VAR 0 5
41473: PUSH
41474: LD_VAR 0 1
41478: PUSH
41479: LD_VAR 0 2
41483: PUSH
41484: LD_INT 4
41486: MINUS
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: PUSH
41496: LD_VAR 0 1
41500: PUSH
41501: LD_INT 3
41503: MINUS
41504: PUSH
41505: LD_VAR 0 2
41509: PUSH
41510: LD_INT 3
41512: MINUS
41513: PUSH
41514: LD_INT 2
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: PUSH
41522: LD_VAR 0 1
41526: PUSH
41527: LD_INT 4
41529: MINUS
41530: PUSH
41531: LD_VAR 0 2
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: LIST
41543: PUSH
41544: LD_VAR 0 1
41548: PUSH
41549: LD_VAR 0 2
41553: PUSH
41554: LD_INT 3
41556: PLUS
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: LIST
41565: PUSH
41566: LD_VAR 0 1
41570: PUSH
41571: LD_INT 4
41573: PLUS
41574: PUSH
41575: LD_VAR 0 2
41579: PUSH
41580: LD_INT 4
41582: PLUS
41583: PUSH
41584: LD_INT 5
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
// end ; 2 :
41599: GO 42158
41601: LD_INT 2
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41738
41609: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41610: LD_ADDR_VAR 0 5
41614: PUSH
41615: LD_VAR 0 1
41619: PUSH
41620: LD_VAR 0 2
41624: PUSH
41625: LD_INT 3
41627: MINUS
41628: PUSH
41629: LD_INT 3
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: PUSH
41637: LD_VAR 0 1
41641: PUSH
41642: LD_INT 4
41644: PLUS
41645: PUSH
41646: LD_VAR 0 2
41650: PUSH
41651: LD_INT 4
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: PUSH
41659: LD_VAR 0 1
41663: PUSH
41664: LD_VAR 0 2
41668: PUSH
41669: LD_INT 4
41671: PLUS
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: PUSH
41681: LD_VAR 0 1
41685: PUSH
41686: LD_INT 3
41688: MINUS
41689: PUSH
41690: LD_VAR 0 2
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: PUSH
41703: LD_VAR 0 1
41707: PUSH
41708: LD_INT 4
41710: MINUS
41711: PUSH
41712: LD_VAR 0 2
41716: PUSH
41717: LD_INT 4
41719: MINUS
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// end ; 3 :
41736: GO 42158
41738: LD_INT 3
41740: DOUBLE
41741: EQUAL
41742: IFTRUE 41746
41744: GO 41879
41746: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41747: LD_ADDR_VAR 0 5
41751: PUSH
41752: LD_VAR 0 1
41756: PUSH
41757: LD_INT 3
41759: PLUS
41760: PUSH
41761: LD_VAR 0 2
41765: PUSH
41766: LD_INT 4
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: PUSH
41774: LD_VAR 0 1
41778: PUSH
41779: LD_INT 4
41781: PLUS
41782: PUSH
41783: LD_VAR 0 2
41787: PUSH
41788: LD_INT 4
41790: PLUS
41791: PUSH
41792: LD_INT 5
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: PUSH
41800: LD_VAR 0 1
41804: PUSH
41805: LD_INT 4
41807: MINUS
41808: PUSH
41809: LD_VAR 0 2
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: PUSH
41822: LD_VAR 0 1
41826: PUSH
41827: LD_VAR 0 2
41831: PUSH
41832: LD_INT 4
41834: MINUS
41835: PUSH
41836: LD_INT 3
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: PUSH
41844: LD_VAR 0 1
41848: PUSH
41849: LD_INT 3
41851: MINUS
41852: PUSH
41853: LD_VAR 0 2
41857: PUSH
41858: LD_INT 3
41860: MINUS
41861: PUSH
41862: LD_INT 2
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// end ; 4 :
41877: GO 42158
41879: LD_INT 4
41881: DOUBLE
41882: EQUAL
41883: IFTRUE 41887
41885: GO 42020
41887: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
41888: LD_ADDR_VAR 0 5
41892: PUSH
41893: LD_VAR 0 1
41897: PUSH
41898: LD_VAR 0 2
41902: PUSH
41903: LD_INT 4
41905: PLUS
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: PUSH
41915: LD_VAR 0 1
41919: PUSH
41920: LD_INT 3
41922: PLUS
41923: PUSH
41924: LD_VAR 0 2
41928: PUSH
41929: LD_INT 3
41931: PLUS
41932: PUSH
41933: LD_INT 5
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: PUSH
41941: LD_VAR 0 1
41945: PUSH
41946: LD_INT 4
41948: PLUS
41949: PUSH
41950: LD_VAR 0 2
41954: PUSH
41955: LD_INT 4
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: LIST
41962: PUSH
41963: LD_VAR 0 1
41967: PUSH
41968: LD_VAR 0 2
41972: PUSH
41973: LD_INT 3
41975: MINUS
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: PUSH
41985: LD_VAR 0 1
41989: PUSH
41990: LD_INT 4
41992: MINUS
41993: PUSH
41994: LD_VAR 0 2
41998: PUSH
41999: LD_INT 4
42001: MINUS
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
// end ; 5 :
42018: GO 42158
42020: LD_INT 5
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42157
42028: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42029: LD_ADDR_VAR 0 5
42033: PUSH
42034: LD_VAR 0 1
42038: PUSH
42039: LD_INT 4
42041: MINUS
42042: PUSH
42043: LD_VAR 0 2
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: PUSH
42056: LD_VAR 0 1
42060: PUSH
42061: LD_VAR 0 2
42065: PUSH
42066: LD_INT 4
42068: MINUS
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: PUSH
42078: LD_VAR 0 1
42082: PUSH
42083: LD_INT 4
42085: PLUS
42086: PUSH
42087: LD_VAR 0 2
42091: PUSH
42092: LD_INT 4
42094: PLUS
42095: PUSH
42096: LD_INT 5
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: PUSH
42104: LD_VAR 0 1
42108: PUSH
42109: LD_INT 3
42111: PLUS
42112: PUSH
42113: LD_VAR 0 2
42117: PUSH
42118: LD_INT 4
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: PUSH
42126: LD_VAR 0 1
42130: PUSH
42131: LD_VAR 0 2
42135: PUSH
42136: LD_INT 3
42138: PLUS
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// end ; end ;
42155: GO 42158
42157: POP
// result := list ;
42158: LD_ADDR_VAR 0 4
42162: PUSH
42163: LD_VAR 0 5
42167: ST_TO_ADDR
// end ;
42168: LD_VAR 0 4
42172: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42173: LD_INT 0
42175: PPUSH
42176: PPUSH
42177: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42178: LD_VAR 0 1
42182: NOT
42183: PUSH
42184: LD_VAR 0 2
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 4
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: IN
42207: NOT
42208: OR
42209: IFFALSE 42213
// exit ;
42211: GO 42305
// tmp := [ ] ;
42213: LD_ADDR_VAR 0 5
42217: PUSH
42218: EMPTY
42219: ST_TO_ADDR
// for i in units do
42220: LD_ADDR_VAR 0 4
42224: PUSH
42225: LD_VAR 0 1
42229: PUSH
42230: FOR_IN
42231: IFFALSE 42274
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
42233: LD_ADDR_VAR 0 5
42237: PUSH
42238: LD_VAR 0 5
42242: PPUSH
42243: LD_VAR 0 5
42247: PUSH
42248: LD_INT 1
42250: PLUS
42251: PPUSH
42252: LD_VAR 0 4
42256: PPUSH
42257: LD_VAR 0 2
42261: PPUSH
42262: CALL_OW 259
42266: PPUSH
42267: CALL_OW 2
42271: ST_TO_ADDR
42272: GO 42230
42274: POP
42275: POP
// if not tmp then
42276: LD_VAR 0 5
42280: NOT
42281: IFFALSE 42285
// exit ;
42283: GO 42305
// result := SortListByListDesc ( units , tmp ) ;
42285: LD_ADDR_VAR 0 3
42289: PUSH
42290: LD_VAR 0 1
42294: PPUSH
42295: LD_VAR 0 5
42299: PPUSH
42300: CALL_OW 77
42304: ST_TO_ADDR
// end ;
42305: LD_VAR 0 3
42309: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42310: LD_INT 0
42312: PPUSH
42313: PPUSH
42314: PPUSH
// result := false ;
42315: LD_ADDR_VAR 0 3
42319: PUSH
42320: LD_INT 0
42322: ST_TO_ADDR
// x := GetX ( building ) ;
42323: LD_ADDR_VAR 0 4
42327: PUSH
42328: LD_VAR 0 2
42332: PPUSH
42333: CALL_OW 250
42337: ST_TO_ADDR
// y := GetY ( building ) ;
42338: LD_ADDR_VAR 0 5
42342: PUSH
42343: LD_VAR 0 2
42347: PPUSH
42348: CALL_OW 251
42352: ST_TO_ADDR
// if not building or not x or not y then
42353: LD_VAR 0 2
42357: NOT
42358: PUSH
42359: LD_VAR 0 4
42363: NOT
42364: OR
42365: PUSH
42366: LD_VAR 0 5
42370: NOT
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 42468
// if GetTaskList ( unit ) then
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 437
42385: IFFALSE 42468
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42387: LD_STRING e
42389: PUSH
42390: LD_VAR 0 1
42394: PPUSH
42395: CALL_OW 437
42399: PUSH
42400: LD_INT 1
42402: ARRAY
42403: PUSH
42404: LD_INT 1
42406: ARRAY
42407: EQUAL
42408: PUSH
42409: LD_VAR 0 4
42413: PUSH
42414: LD_VAR 0 1
42418: PPUSH
42419: CALL_OW 437
42423: PUSH
42424: LD_INT 1
42426: ARRAY
42427: PUSH
42428: LD_INT 2
42430: ARRAY
42431: EQUAL
42432: AND
42433: PUSH
42434: LD_VAR 0 5
42438: PUSH
42439: LD_VAR 0 1
42443: PPUSH
42444: CALL_OW 437
42448: PUSH
42449: LD_INT 1
42451: ARRAY
42452: PUSH
42453: LD_INT 3
42455: ARRAY
42456: EQUAL
42457: AND
42458: IFFALSE 42468
// result := true end ;
42460: LD_ADDR_VAR 0 3
42464: PUSH
42465: LD_INT 1
42467: ST_TO_ADDR
// end ;
42468: LD_VAR 0 3
42472: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42473: LD_INT 0
42475: PPUSH
// result := false ;
42476: LD_ADDR_VAR 0 4
42480: PUSH
42481: LD_INT 0
42483: ST_TO_ADDR
// if GetTaskList ( unit ) then
42484: LD_VAR 0 1
42488: PPUSH
42489: CALL_OW 437
42493: IFFALSE 42576
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42495: LD_STRING M
42497: PUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: CALL_OW 437
42507: PUSH
42508: LD_INT 1
42510: ARRAY
42511: PUSH
42512: LD_INT 1
42514: ARRAY
42515: EQUAL
42516: PUSH
42517: LD_VAR 0 2
42521: PUSH
42522: LD_VAR 0 1
42526: PPUSH
42527: CALL_OW 437
42531: PUSH
42532: LD_INT 1
42534: ARRAY
42535: PUSH
42536: LD_INT 2
42538: ARRAY
42539: EQUAL
42540: AND
42541: PUSH
42542: LD_VAR 0 3
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 437
42556: PUSH
42557: LD_INT 1
42559: ARRAY
42560: PUSH
42561: LD_INT 3
42563: ARRAY
42564: EQUAL
42565: AND
42566: IFFALSE 42576
// result := true ;
42568: LD_ADDR_VAR 0 4
42572: PUSH
42573: LD_INT 1
42575: ST_TO_ADDR
// end ; end ;
42576: LD_VAR 0 4
42580: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42581: LD_INT 0
42583: PPUSH
42584: PPUSH
42585: PPUSH
42586: PPUSH
// if not unit or not area then
42587: LD_VAR 0 1
42591: NOT
42592: PUSH
42593: LD_VAR 0 2
42597: NOT
42598: OR
42599: IFFALSE 42603
// exit ;
42601: GO 42767
// tmp := AreaToList ( area , i ) ;
42603: LD_ADDR_VAR 0 6
42607: PUSH
42608: LD_VAR 0 2
42612: PPUSH
42613: LD_VAR 0 5
42617: PPUSH
42618: CALL_OW 517
42622: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: DOUBLE
42629: LD_INT 1
42631: DEC
42632: ST_TO_ADDR
42633: LD_VAR 0 6
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PUSH
42642: FOR_TO
42643: IFFALSE 42765
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42645: LD_ADDR_VAR 0 7
42649: PUSH
42650: LD_VAR 0 6
42654: PUSH
42655: LD_INT 1
42657: ARRAY
42658: PUSH
42659: LD_VAR 0 5
42663: ARRAY
42664: PUSH
42665: LD_VAR 0 6
42669: PUSH
42670: LD_INT 2
42672: ARRAY
42673: PUSH
42674: LD_VAR 0 5
42678: ARRAY
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
42684: LD_VAR 0 7
42688: PUSH
42689: LD_INT 1
42691: ARRAY
42692: PPUSH
42693: LD_VAR 0 7
42697: PUSH
42698: LD_INT 2
42700: ARRAY
42701: PPUSH
42702: CALL_OW 428
42706: PUSH
42707: LD_INT 0
42709: EQUAL
42710: IFFALSE 42763
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
42712: LD_VAR 0 1
42716: PPUSH
42717: LD_VAR 0 7
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: LD_VAR 0 7
42730: PUSH
42731: LD_INT 2
42733: ARRAY
42734: PPUSH
42735: LD_VAR 0 3
42739: PPUSH
42740: CALL_OW 48
// result := IsPlaced ( unit ) ;
42744: LD_ADDR_VAR 0 4
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 305
42758: ST_TO_ADDR
// exit ;
42759: POP
42760: POP
42761: GO 42767
// end ; end ;
42763: GO 42642
42765: POP
42766: POP
// end ;
42767: LD_VAR 0 4
42771: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42772: LD_INT 0
42774: PPUSH
42775: PPUSH
42776: PPUSH
// if not side or side > 8 then
42777: LD_VAR 0 1
42781: NOT
42782: PUSH
42783: LD_VAR 0 1
42787: PUSH
42788: LD_INT 8
42790: GREATER
42791: OR
42792: IFFALSE 42796
// exit ;
42794: GO 42983
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42796: LD_ADDR_VAR 0 4
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_VAR 0 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 21
42815: PUSH
42816: LD_INT 3
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PPUSH
42827: CALL_OW 69
42831: ST_TO_ADDR
// if not tmp then
42832: LD_VAR 0 4
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 42983
// enable_addtolog := true ;
42841: LD_ADDR_OWVAR 81
42845: PUSH
42846: LD_INT 1
42848: ST_TO_ADDR
// AddToLog ( [ ) ;
42849: LD_STRING [
42851: PPUSH
42852: CALL_OW 561
// for i in tmp do
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_VAR 0 4
42865: PUSH
42866: FOR_IN
42867: IFFALSE 42974
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
42869: LD_STRING [
42871: PUSH
42872: LD_VAR 0 3
42876: PPUSH
42877: CALL_OW 266
42881: STR
42882: PUSH
42883: LD_STRING , 
42885: STR
42886: PUSH
42887: LD_VAR 0 3
42891: PPUSH
42892: CALL_OW 250
42896: STR
42897: PUSH
42898: LD_STRING , 
42900: STR
42901: PUSH
42902: LD_VAR 0 3
42906: PPUSH
42907: CALL_OW 251
42911: STR
42912: PUSH
42913: LD_STRING , 
42915: STR
42916: PUSH
42917: LD_VAR 0 3
42921: PPUSH
42922: CALL_OW 254
42926: STR
42927: PUSH
42928: LD_STRING , 
42930: STR
42931: PUSH
42932: LD_VAR 0 3
42936: PPUSH
42937: LD_INT 1
42939: PPUSH
42940: CALL_OW 268
42944: STR
42945: PUSH
42946: LD_STRING , 
42948: STR
42949: PUSH
42950: LD_VAR 0 3
42954: PPUSH
42955: LD_INT 2
42957: PPUSH
42958: CALL_OW 268
42962: STR
42963: PUSH
42964: LD_STRING ],
42966: STR
42967: PPUSH
42968: CALL_OW 561
// end ;
42972: GO 42866
42974: POP
42975: POP
// AddToLog ( ]; ) ;
42976: LD_STRING ];
42978: PPUSH
42979: CALL_OW 561
// end ;
42983: LD_VAR 0 2
42987: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
42988: LD_INT 0
42990: PPUSH
42991: PPUSH
42992: PPUSH
42993: PPUSH
42994: PPUSH
// if not area or not rate or not max then
42995: LD_VAR 0 1
42999: NOT
43000: PUSH
43001: LD_VAR 0 2
43005: NOT
43006: OR
43007: PUSH
43008: LD_VAR 0 4
43012: NOT
43013: OR
43014: IFFALSE 43018
// exit ;
43016: GO 43207
// while 1 do
43018: LD_INT 1
43020: IFFALSE 43207
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43022: LD_ADDR_VAR 0 9
43026: PUSH
43027: LD_VAR 0 1
43031: PPUSH
43032: LD_INT 1
43034: PPUSH
43035: CALL_OW 287
43039: PUSH
43040: LD_INT 10
43042: MUL
43043: ST_TO_ADDR
// r := rate / 10 ;
43044: LD_ADDR_VAR 0 7
43048: PUSH
43049: LD_VAR 0 2
43053: PUSH
43054: LD_INT 10
43056: DIVREAL
43057: ST_TO_ADDR
// time := 1 1$00 ;
43058: LD_ADDR_VAR 0 8
43062: PUSH
43063: LD_INT 2100
43065: ST_TO_ADDR
// if amount < min then
43066: LD_VAR 0 9
43070: PUSH
43071: LD_VAR 0 3
43075: LESS
43076: IFFALSE 43094
// r := r * 2 else
43078: LD_ADDR_VAR 0 7
43082: PUSH
43083: LD_VAR 0 7
43087: PUSH
43088: LD_INT 2
43090: MUL
43091: ST_TO_ADDR
43092: GO 43120
// if amount > max then
43094: LD_VAR 0 9
43098: PUSH
43099: LD_VAR 0 4
43103: GREATER
43104: IFFALSE 43120
// r := r / 2 ;
43106: LD_ADDR_VAR 0 7
43110: PUSH
43111: LD_VAR 0 7
43115: PUSH
43116: LD_INT 2
43118: DIVREAL
43119: ST_TO_ADDR
// time := time / r ;
43120: LD_ADDR_VAR 0 8
43124: PUSH
43125: LD_VAR 0 8
43129: PUSH
43130: LD_VAR 0 7
43134: DIVREAL
43135: ST_TO_ADDR
// if time < 0 then
43136: LD_VAR 0 8
43140: PUSH
43141: LD_INT 0
43143: LESS
43144: IFFALSE 43161
// time := time * - 1 ;
43146: LD_ADDR_VAR 0 8
43150: PUSH
43151: LD_VAR 0 8
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: MUL
43160: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43161: LD_VAR 0 8
43165: PUSH
43166: LD_INT 35
43168: PPUSH
43169: LD_INT 875
43171: PPUSH
43172: CALL_OW 12
43176: PLUS
43177: PPUSH
43178: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43182: LD_INT 1
43184: PPUSH
43185: LD_INT 5
43187: PPUSH
43188: CALL_OW 12
43192: PPUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: LD_INT 1
43200: PPUSH
43201: CALL_OW 55
// end ;
43205: GO 43018
// end ;
43207: LD_VAR 0 5
43211: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43212: LD_INT 0
43214: PPUSH
43215: PPUSH
43216: PPUSH
43217: PPUSH
43218: PPUSH
43219: PPUSH
43220: PPUSH
43221: PPUSH
// if not turrets or not factories then
43222: LD_VAR 0 1
43226: NOT
43227: PUSH
43228: LD_VAR 0 2
43232: NOT
43233: OR
43234: IFFALSE 43238
// exit ;
43236: GO 43545
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43238: LD_ADDR_VAR 0 10
43242: PUSH
43243: LD_INT 5
43245: PUSH
43246: LD_INT 6
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 4
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: PUSH
43266: LD_INT 5
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 24
43280: PUSH
43281: LD_INT 25
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 23
43290: PUSH
43291: LD_INT 27
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 42
43304: PUSH
43305: LD_INT 43
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 44
43314: PUSH
43315: LD_INT 46
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 45
43324: PUSH
43325: LD_INT 47
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: LIST
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: ST_TO_ADDR
// result := [ ] ;
43342: LD_ADDR_VAR 0 3
43346: PUSH
43347: EMPTY
43348: ST_TO_ADDR
// for i in turrets do
43349: LD_ADDR_VAR 0 4
43353: PUSH
43354: LD_VAR 0 1
43358: PUSH
43359: FOR_IN
43360: IFFALSE 43543
// begin nat := GetNation ( i ) ;
43362: LD_ADDR_VAR 0 7
43366: PUSH
43367: LD_VAR 0 4
43371: PPUSH
43372: CALL_OW 248
43376: ST_TO_ADDR
// weapon := 0 ;
43377: LD_ADDR_VAR 0 8
43381: PUSH
43382: LD_INT 0
43384: ST_TO_ADDR
// if not nat then
43385: LD_VAR 0 7
43389: NOT
43390: IFFALSE 43394
// continue ;
43392: GO 43359
// for j in list [ nat ] do
43394: LD_ADDR_VAR 0 5
43398: PUSH
43399: LD_VAR 0 10
43403: PUSH
43404: LD_VAR 0 7
43408: ARRAY
43409: PUSH
43410: FOR_IN
43411: IFFALSE 43452
// if GetBWeapon ( i ) = j [ 1 ] then
43413: LD_VAR 0 4
43417: PPUSH
43418: CALL_OW 269
43422: PUSH
43423: LD_VAR 0 5
43427: PUSH
43428: LD_INT 1
43430: ARRAY
43431: EQUAL
43432: IFFALSE 43450
// begin weapon := j [ 2 ] ;
43434: LD_ADDR_VAR 0 8
43438: PUSH
43439: LD_VAR 0 5
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: ST_TO_ADDR
// break ;
43448: GO 43452
// end ;
43450: GO 43410
43452: POP
43453: POP
// if not weapon then
43454: LD_VAR 0 8
43458: NOT
43459: IFFALSE 43463
// continue ;
43461: GO 43359
// for k in factories do
43463: LD_ADDR_VAR 0 6
43467: PUSH
43468: LD_VAR 0 2
43472: PUSH
43473: FOR_IN
43474: IFFALSE 43539
// begin weapons := AvailableWeaponList ( k ) ;
43476: LD_ADDR_VAR 0 9
43480: PUSH
43481: LD_VAR 0 6
43485: PPUSH
43486: CALL_OW 478
43490: ST_TO_ADDR
// if not weapons then
43491: LD_VAR 0 9
43495: NOT
43496: IFFALSE 43500
// continue ;
43498: GO 43473
// if weapon in weapons then
43500: LD_VAR 0 8
43504: PUSH
43505: LD_VAR 0 9
43509: IN
43510: IFFALSE 43537
// begin result := [ i , weapon ] ;
43512: LD_ADDR_VAR 0 3
43516: PUSH
43517: LD_VAR 0 4
43521: PUSH
43522: LD_VAR 0 8
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: ST_TO_ADDR
// exit ;
43531: POP
43532: POP
43533: POP
43534: POP
43535: GO 43545
// end ; end ;
43537: GO 43473
43539: POP
43540: POP
// end ;
43541: GO 43359
43543: POP
43544: POP
// end ;
43545: LD_VAR 0 3
43549: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43550: LD_INT 0
43552: PPUSH
// if not side or side > 8 then
43553: LD_VAR 0 3
43557: NOT
43558: PUSH
43559: LD_VAR 0 3
43563: PUSH
43564: LD_INT 8
43566: GREATER
43567: OR
43568: IFFALSE 43572
// exit ;
43570: GO 43631
// if not range then
43572: LD_VAR 0 4
43576: NOT
43577: IFFALSE 43588
// range := - 12 ;
43579: LD_ADDR_VAR 0 4
43583: PUSH
43584: LD_INT 12
43586: NEG
43587: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43588: LD_VAR 0 1
43592: PPUSH
43593: LD_VAR 0 2
43597: PPUSH
43598: LD_VAR 0 3
43602: PPUSH
43603: LD_VAR 0 4
43607: PPUSH
43608: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43612: LD_VAR 0 1
43616: PPUSH
43617: LD_VAR 0 2
43621: PPUSH
43622: LD_VAR 0 3
43626: PPUSH
43627: CALL_OW 331
// end ;
43631: LD_VAR 0 5
43635: RET
// export function Video ( mode ) ; begin
43636: LD_INT 0
43638: PPUSH
// ingame_video = mode ;
43639: LD_ADDR_OWVAR 52
43643: PUSH
43644: LD_VAR 0 1
43648: ST_TO_ADDR
// interface_hidden = mode ;
43649: LD_ADDR_OWVAR 54
43653: PUSH
43654: LD_VAR 0 1
43658: ST_TO_ADDR
// end ;
43659: LD_VAR 0 2
43663: RET
// export function Join ( array , element ) ; begin
43664: LD_INT 0
43666: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_VAR 0 1
43676: PPUSH
43677: LD_VAR 0 1
43681: PUSH
43682: LD_INT 1
43684: PLUS
43685: PPUSH
43686: LD_VAR 0 2
43690: PPUSH
43691: CALL_OW 1
43695: ST_TO_ADDR
// end ;
43696: LD_VAR 0 3
43700: RET
// export function JoinUnion ( array , element ) ; begin
43701: LD_INT 0
43703: PPUSH
// result := array union element ;
43704: LD_ADDR_VAR 0 3
43708: PUSH
43709: LD_VAR 0 1
43713: PUSH
43714: LD_VAR 0 2
43718: UNION
43719: ST_TO_ADDR
// end ;
43720: LD_VAR 0 3
43724: RET
// export function GetBehemoths ( side ) ; begin
43725: LD_INT 0
43727: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
43728: LD_ADDR_VAR 0 2
43732: PUSH
43733: LD_INT 22
43735: PUSH
43736: LD_VAR 0 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 31
43747: PUSH
43748: LD_INT 25
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PPUSH
43759: CALL_OW 69
43763: ST_TO_ADDR
// end ;
43764: LD_VAR 0 2
43768: RET
// export function Shuffle ( array ) ; var i , index ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
43773: PPUSH
// result := [ ] ;
43774: LD_ADDR_VAR 0 2
43778: PUSH
43779: EMPTY
43780: ST_TO_ADDR
// if not array then
43781: LD_VAR 0 1
43785: NOT
43786: IFFALSE 43790
// exit ;
43788: GO 43889
// Randomize ;
43790: CALL_OW 10
// for i = array downto 1 do
43794: LD_ADDR_VAR 0 3
43798: PUSH
43799: DOUBLE
43800: LD_VAR 0 1
43804: INC
43805: ST_TO_ADDR
43806: LD_INT 1
43808: PUSH
43809: FOR_DOWNTO
43810: IFFALSE 43887
// begin index := rand ( 1 , array ) ;
43812: LD_ADDR_VAR 0 4
43816: PUSH
43817: LD_INT 1
43819: PPUSH
43820: LD_VAR 0 1
43824: PPUSH
43825: CALL_OW 12
43829: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43830: LD_ADDR_VAR 0 2
43834: PUSH
43835: LD_VAR 0 2
43839: PPUSH
43840: LD_VAR 0 2
43844: PUSH
43845: LD_INT 1
43847: PLUS
43848: PPUSH
43849: LD_VAR 0 1
43853: PUSH
43854: LD_VAR 0 4
43858: ARRAY
43859: PPUSH
43860: CALL_OW 2
43864: ST_TO_ADDR
// array := Delete ( array , index ) ;
43865: LD_ADDR_VAR 0 1
43869: PUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: LD_VAR 0 4
43879: PPUSH
43880: CALL_OW 3
43884: ST_TO_ADDR
// end ;
43885: GO 43809
43887: POP
43888: POP
// end ;
43889: LD_VAR 0 2
43893: RET
// export function GetBaseMaterials ( base ) ; begin
43894: LD_INT 0
43896: PPUSH
// result := [ 0 , 0 , 0 ] ;
43897: LD_ADDR_VAR 0 2
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: ST_TO_ADDR
// if not base then
43916: LD_VAR 0 1
43920: NOT
43921: IFFALSE 43925
// exit ;
43923: GO 43974
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
43925: LD_ADDR_VAR 0 2
43929: PUSH
43930: LD_VAR 0 1
43934: PPUSH
43935: LD_INT 1
43937: PPUSH
43938: CALL_OW 275
43942: PUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: LD_INT 2
43950: PPUSH
43951: CALL_OW 275
43955: PUSH
43956: LD_VAR 0 1
43960: PPUSH
43961: LD_INT 3
43963: PPUSH
43964: CALL_OW 275
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// end ;
43974: LD_VAR 0 2
43978: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
43979: LD_INT 0
43981: PPUSH
43982: PPUSH
// result := array ;
43983: LD_ADDR_VAR 0 3
43987: PUSH
43988: LD_VAR 0 1
43992: ST_TO_ADDR
// if size > 0 then
43993: LD_VAR 0 2
43997: PUSH
43998: LD_INT 0
44000: GREATER
44001: IFFALSE 44047
// for i := array downto size do
44003: LD_ADDR_VAR 0 4
44007: PUSH
44008: DOUBLE
44009: LD_VAR 0 1
44013: INC
44014: ST_TO_ADDR
44015: LD_VAR 0 2
44019: PUSH
44020: FOR_DOWNTO
44021: IFFALSE 44045
// result := Delete ( result , result ) ;
44023: LD_ADDR_VAR 0 3
44027: PUSH
44028: LD_VAR 0 3
44032: PPUSH
44033: LD_VAR 0 3
44037: PPUSH
44038: CALL_OW 3
44042: ST_TO_ADDR
44043: GO 44020
44045: POP
44046: POP
// end ;
44047: LD_VAR 0 3
44051: RET
// export function ComExit ( unit ) ; var tmp ; begin
44052: LD_INT 0
44054: PPUSH
44055: PPUSH
// if not IsInUnit ( unit ) then
44056: LD_VAR 0 1
44060: PPUSH
44061: CALL_OW 310
44065: NOT
44066: IFFALSE 44070
// exit ;
44068: GO 44130
// tmp := IsInUnit ( unit ) ;
44070: LD_ADDR_VAR 0 3
44074: PUSH
44075: LD_VAR 0 1
44079: PPUSH
44080: CALL_OW 310
44084: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44085: LD_VAR 0 3
44089: PPUSH
44090: CALL_OW 247
44094: PUSH
44095: LD_INT 2
44097: EQUAL
44098: IFFALSE 44111
// ComExitVehicle ( unit ) else
44100: LD_VAR 0 1
44104: PPUSH
44105: CALL_OW 121
44109: GO 44120
// ComExitBuilding ( unit ) ;
44111: LD_VAR 0 1
44115: PPUSH
44116: CALL_OW 122
// result := tmp ;
44120: LD_ADDR_VAR 0 2
44124: PUSH
44125: LD_VAR 0 3
44129: ST_TO_ADDR
// end ;
44130: LD_VAR 0 2
44134: RET
// export function ComExitAll ( units ) ; var i ; begin
44135: LD_INT 0
44137: PPUSH
44138: PPUSH
// if not units then
44139: LD_VAR 0 1
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44174
// for i in units do
44148: LD_ADDR_VAR 0 3
44152: PUSH
44153: LD_VAR 0 1
44157: PUSH
44158: FOR_IN
44159: IFFALSE 44172
// ComExit ( i ) ;
44161: LD_VAR 0 3
44165: PPUSH
44166: CALL 44052 0 1
44170: GO 44158
44172: POP
44173: POP
// end ;
44174: LD_VAR 0 2
44178: RET
// export function ResetHc ; begin
44179: LD_INT 0
44181: PPUSH
// InitHc ;
44182: CALL_OW 19
// hc_importance := 0 ;
44186: LD_ADDR_OWVAR 32
44190: PUSH
44191: LD_INT 0
44193: ST_TO_ADDR
// end ;
44194: LD_VAR 0 1
44198: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44199: LD_INT 0
44201: PPUSH
44202: PPUSH
44203: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44204: LD_ADDR_VAR 0 6
44208: PUSH
44209: LD_VAR 0 1
44213: PUSH
44214: LD_VAR 0 3
44218: PLUS
44219: PUSH
44220: LD_INT 2
44222: DIV
44223: ST_TO_ADDR
// if _x < 0 then
44224: LD_VAR 0 6
44228: PUSH
44229: LD_INT 0
44231: LESS
44232: IFFALSE 44249
// _x := _x * - 1 ;
44234: LD_ADDR_VAR 0 6
44238: PUSH
44239: LD_VAR 0 6
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: MUL
44248: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44249: LD_ADDR_VAR 0 7
44253: PUSH
44254: LD_VAR 0 2
44258: PUSH
44259: LD_VAR 0 4
44263: PLUS
44264: PUSH
44265: LD_INT 2
44267: DIV
44268: ST_TO_ADDR
// if _y < 0 then
44269: LD_VAR 0 7
44273: PUSH
44274: LD_INT 0
44276: LESS
44277: IFFALSE 44294
// _y := _y * - 1 ;
44279: LD_ADDR_VAR 0 7
44283: PUSH
44284: LD_VAR 0 7
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: MUL
44293: ST_TO_ADDR
// result := [ _x , _y ] ;
44294: LD_ADDR_VAR 0 5
44298: PUSH
44299: LD_VAR 0 6
44303: PUSH
44304: LD_VAR 0 7
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: ST_TO_ADDR
// end ;
44313: LD_VAR 0 5
44317: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44318: LD_INT 0
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
// task := GetTaskList ( unit ) ;
44324: LD_ADDR_VAR 0 7
44328: PUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: CALL_OW 437
44338: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44339: LD_VAR 0 7
44343: NOT
44344: PUSH
44345: LD_VAR 0 1
44349: PPUSH
44350: LD_VAR 0 2
44354: PPUSH
44355: CALL_OW 308
44359: NOT
44360: AND
44361: IFFALSE 44365
// exit ;
44363: GO 44483
// if IsInArea ( unit , area ) then
44365: LD_VAR 0 1
44369: PPUSH
44370: LD_VAR 0 2
44374: PPUSH
44375: CALL_OW 308
44379: IFFALSE 44397
// begin ComMoveToArea ( unit , goAway ) ;
44381: LD_VAR 0 1
44385: PPUSH
44386: LD_VAR 0 3
44390: PPUSH
44391: CALL_OW 113
// exit ;
44395: GO 44483
// end ; if task [ 1 ] [ 1 ] <> M then
44397: LD_VAR 0 7
44401: PUSH
44402: LD_INT 1
44404: ARRAY
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: PUSH
44410: LD_STRING M
44412: NONEQUAL
44413: IFFALSE 44417
// exit ;
44415: GO 44483
// x := task [ 1 ] [ 2 ] ;
44417: LD_ADDR_VAR 0 5
44421: PUSH
44422: LD_VAR 0 7
44426: PUSH
44427: LD_INT 1
44429: ARRAY
44430: PUSH
44431: LD_INT 2
44433: ARRAY
44434: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44435: LD_ADDR_VAR 0 6
44439: PUSH
44440: LD_VAR 0 7
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PUSH
44449: LD_INT 3
44451: ARRAY
44452: ST_TO_ADDR
// if InArea ( x , y , area ) then
44453: LD_VAR 0 5
44457: PPUSH
44458: LD_VAR 0 6
44462: PPUSH
44463: LD_VAR 0 2
44467: PPUSH
44468: CALL_OW 309
44472: IFFALSE 44483
// ComStop ( unit ) ;
44474: LD_VAR 0 1
44478: PPUSH
44479: CALL_OW 141
// end ;
44483: LD_VAR 0 4
44487: RET
// export function Abs ( value ) ; begin
44488: LD_INT 0
44490: PPUSH
// result := value ;
44491: LD_ADDR_VAR 0 2
44495: PUSH
44496: LD_VAR 0 1
44500: ST_TO_ADDR
// if value < 0 then
44501: LD_VAR 0 1
44505: PUSH
44506: LD_INT 0
44508: LESS
44509: IFFALSE 44526
// result := value * - 1 ;
44511: LD_ADDR_VAR 0 2
44515: PUSH
44516: LD_VAR 0 1
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: MUL
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 2
44530: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44531: LD_INT 0
44533: PPUSH
44534: PPUSH
44535: PPUSH
44536: PPUSH
44537: PPUSH
44538: PPUSH
44539: PPUSH
44540: PPUSH
// if not unit or not building then
44541: LD_VAR 0 1
44545: NOT
44546: PUSH
44547: LD_VAR 0 2
44551: NOT
44552: OR
44553: IFFALSE 44557
// exit ;
44555: GO 44783
// x := GetX ( building ) ;
44557: LD_ADDR_VAR 0 4
44561: PUSH
44562: LD_VAR 0 2
44566: PPUSH
44567: CALL_OW 250
44571: ST_TO_ADDR
// y := GetY ( building ) ;
44572: LD_ADDR_VAR 0 6
44576: PUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: CALL_OW 251
44586: ST_TO_ADDR
// d := GetDir ( building ) ;
44587: LD_ADDR_VAR 0 8
44591: PUSH
44592: LD_VAR 0 2
44596: PPUSH
44597: CALL_OW 254
44601: ST_TO_ADDR
// r := 4 ;
44602: LD_ADDR_VAR 0 9
44606: PUSH
44607: LD_INT 4
44609: ST_TO_ADDR
// for i := 1 to 5 do
44610: LD_ADDR_VAR 0 10
44614: PUSH
44615: DOUBLE
44616: LD_INT 1
44618: DEC
44619: ST_TO_ADDR
44620: LD_INT 5
44622: PUSH
44623: FOR_TO
44624: IFFALSE 44781
// begin _x := ShiftX ( x , d , r + i ) ;
44626: LD_ADDR_VAR 0 5
44630: PUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: LD_VAR 0 8
44640: PPUSH
44641: LD_VAR 0 9
44645: PUSH
44646: LD_VAR 0 10
44650: PLUS
44651: PPUSH
44652: CALL_OW 272
44656: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44657: LD_ADDR_VAR 0 7
44661: PUSH
44662: LD_VAR 0 6
44666: PPUSH
44667: LD_VAR 0 8
44671: PPUSH
44672: LD_VAR 0 9
44676: PUSH
44677: LD_VAR 0 10
44681: PLUS
44682: PPUSH
44683: CALL_OW 273
44687: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44688: LD_VAR 0 5
44692: PPUSH
44693: LD_VAR 0 7
44697: PPUSH
44698: CALL_OW 488
44702: PUSH
44703: LD_VAR 0 5
44707: PPUSH
44708: LD_VAR 0 7
44712: PPUSH
44713: CALL_OW 428
44717: PPUSH
44718: CALL_OW 247
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: IN
44733: NOT
44734: AND
44735: IFFALSE 44779
// begin ComMoveXY ( unit , _x , _y ) ;
44737: LD_VAR 0 1
44741: PPUSH
44742: LD_VAR 0 5
44746: PPUSH
44747: LD_VAR 0 7
44751: PPUSH
44752: CALL_OW 111
// result := [ _x , _y ] ;
44756: LD_ADDR_VAR 0 3
44760: PUSH
44761: LD_VAR 0 5
44765: PUSH
44766: LD_VAR 0 7
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// exit ;
44775: POP
44776: POP
44777: GO 44783
// end ; end ;
44779: GO 44623
44781: POP
44782: POP
// end ;
44783: LD_VAR 0 3
44787: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44788: LD_INT 0
44790: PPUSH
44791: PPUSH
44792: PPUSH
// result := 0 ;
44793: LD_ADDR_VAR 0 3
44797: PUSH
44798: LD_INT 0
44800: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44801: LD_VAR 0 1
44805: PUSH
44806: LD_INT 0
44808: LESS
44809: PUSH
44810: LD_VAR 0 1
44814: PUSH
44815: LD_INT 8
44817: GREATER
44818: OR
44819: PUSH
44820: LD_VAR 0 2
44824: PUSH
44825: LD_INT 0
44827: LESS
44828: OR
44829: PUSH
44830: LD_VAR 0 2
44834: PUSH
44835: LD_INT 8
44837: GREATER
44838: OR
44839: IFFALSE 44843
// exit ;
44841: GO 44918
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44843: LD_ADDR_VAR 0 4
44847: PUSH
44848: LD_INT 22
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PPUSH
44860: CALL_OW 69
44864: PUSH
44865: FOR_IN
44866: IFFALSE 44916
// begin un := UnitShoot ( i ) ;
44868: LD_ADDR_VAR 0 5
44872: PUSH
44873: LD_VAR 0 4
44877: PPUSH
44878: CALL_OW 504
44882: ST_TO_ADDR
// if GetSide ( un ) = side1 then
44883: LD_VAR 0 5
44887: PPUSH
44888: CALL_OW 255
44892: PUSH
44893: LD_VAR 0 1
44897: EQUAL
44898: IFFALSE 44914
// begin result := un ;
44900: LD_ADDR_VAR 0 3
44904: PUSH
44905: LD_VAR 0 5
44909: ST_TO_ADDR
// exit ;
44910: POP
44911: POP
44912: GO 44918
// end ; end ;
44914: GO 44865
44916: POP
44917: POP
// end ;
44918: LD_VAR 0 3
44922: RET
// export function GetCargoBay ( units ) ; begin
44923: LD_INT 0
44925: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
44926: LD_ADDR_VAR 0 2
44930: PUSH
44931: LD_VAR 0 1
44935: PPUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 34
44941: PUSH
44942: LD_INT 12
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 34
44951: PUSH
44952: LD_INT 51
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 34
44961: PUSH
44962: LD_INT 32
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 34
44971: PUSH
44972: LD_EXP 84
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: PPUSH
44988: CALL_OW 72
44992: ST_TO_ADDR
// end ;
44993: LD_VAR 0 2
44997: RET
// export function Negate ( value ) ; begin
44998: LD_INT 0
45000: PPUSH
// result := not value ;
45001: LD_ADDR_VAR 0 2
45005: PUSH
45006: LD_VAR 0 1
45010: NOT
45011: ST_TO_ADDR
// end ;
45012: LD_VAR 0 2
45016: RET
// export function Inc ( value ) ; begin
45017: LD_INT 0
45019: PPUSH
// result := value + 1 ;
45020: LD_ADDR_VAR 0 2
45024: PUSH
45025: LD_VAR 0 1
45029: PUSH
45030: LD_INT 1
45032: PLUS
45033: ST_TO_ADDR
// end ;
45034: LD_VAR 0 2
45038: RET
// export function Dec ( value ) ; begin
45039: LD_INT 0
45041: PPUSH
// result := value - 1 ;
45042: LD_ADDR_VAR 0 2
45046: PUSH
45047: LD_VAR 0 1
45051: PUSH
45052: LD_INT 1
45054: MINUS
45055: ST_TO_ADDR
// end ;
45056: LD_VAR 0 2
45060: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45061: LD_INT 0
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45071: LD_VAR 0 1
45075: PPUSH
45076: LD_VAR 0 2
45080: PPUSH
45081: CALL_OW 488
45085: NOT
45086: PUSH
45087: LD_VAR 0 3
45091: PPUSH
45092: LD_VAR 0 4
45096: PPUSH
45097: CALL_OW 488
45101: NOT
45102: OR
45103: IFFALSE 45116
// begin result := - 1 ;
45105: LD_ADDR_VAR 0 5
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: ST_TO_ADDR
// exit ;
45114: GO 45351
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45116: LD_ADDR_VAR 0 12
45120: PUSH
45121: LD_VAR 0 1
45125: PPUSH
45126: LD_VAR 0 2
45130: PPUSH
45131: LD_VAR 0 3
45135: PPUSH
45136: LD_VAR 0 4
45140: PPUSH
45141: CALL 44199 0 4
45145: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45146: LD_ADDR_VAR 0 11
45150: PUSH
45151: LD_VAR 0 1
45155: PPUSH
45156: LD_VAR 0 2
45160: PPUSH
45161: LD_VAR 0 12
45165: PUSH
45166: LD_INT 1
45168: ARRAY
45169: PPUSH
45170: LD_VAR 0 12
45174: PUSH
45175: LD_INT 2
45177: ARRAY
45178: PPUSH
45179: CALL_OW 298
45183: ST_TO_ADDR
// distance := 9999 ;
45184: LD_ADDR_VAR 0 10
45188: PUSH
45189: LD_INT 9999
45191: ST_TO_ADDR
// for i := 0 to 5 do
45192: LD_ADDR_VAR 0 6
45196: PUSH
45197: DOUBLE
45198: LD_INT 0
45200: DEC
45201: ST_TO_ADDR
45202: LD_INT 5
45204: PUSH
45205: FOR_TO
45206: IFFALSE 45349
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45208: LD_ADDR_VAR 0 7
45212: PUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: LD_VAR 0 6
45222: PPUSH
45223: LD_VAR 0 11
45227: PPUSH
45228: CALL_OW 272
45232: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45233: LD_ADDR_VAR 0 8
45237: PUSH
45238: LD_VAR 0 2
45242: PPUSH
45243: LD_VAR 0 6
45247: PPUSH
45248: LD_VAR 0 11
45252: PPUSH
45253: CALL_OW 273
45257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45258: LD_VAR 0 7
45262: PPUSH
45263: LD_VAR 0 8
45267: PPUSH
45268: CALL_OW 488
45272: NOT
45273: IFFALSE 45277
// continue ;
45275: GO 45205
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45277: LD_ADDR_VAR 0 9
45281: PUSH
45282: LD_VAR 0 12
45286: PUSH
45287: LD_INT 1
45289: ARRAY
45290: PPUSH
45291: LD_VAR 0 12
45295: PUSH
45296: LD_INT 2
45298: ARRAY
45299: PPUSH
45300: LD_VAR 0 7
45304: PPUSH
45305: LD_VAR 0 8
45309: PPUSH
45310: CALL_OW 298
45314: ST_TO_ADDR
// if tmp < distance then
45315: LD_VAR 0 9
45319: PUSH
45320: LD_VAR 0 10
45324: LESS
45325: IFFALSE 45347
// begin result := i ;
45327: LD_ADDR_VAR 0 5
45331: PUSH
45332: LD_VAR 0 6
45336: ST_TO_ADDR
// distance := tmp ;
45337: LD_ADDR_VAR 0 10
45341: PUSH
45342: LD_VAR 0 9
45346: ST_TO_ADDR
// end ; end ;
45347: GO 45205
45349: POP
45350: POP
// end ;
45351: LD_VAR 0 5
45355: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45356: LD_INT 0
45358: PPUSH
45359: PPUSH
// if not driver or not IsInUnit ( driver ) then
45360: LD_VAR 0 1
45364: NOT
45365: PUSH
45366: LD_VAR 0 1
45370: PPUSH
45371: CALL_OW 310
45375: NOT
45376: OR
45377: IFFALSE 45381
// exit ;
45379: GO 45471
// vehicle := IsInUnit ( driver ) ;
45381: LD_ADDR_VAR 0 3
45385: PUSH
45386: LD_VAR 0 1
45390: PPUSH
45391: CALL_OW 310
45395: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45396: LD_VAR 0 1
45400: PPUSH
45401: LD_STRING \
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: PUSH
45431: LD_STRING E
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_VAR 0 3
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PPUSH
45467: CALL_OW 446
// end ;
45471: LD_VAR 0 2
45475: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45476: LD_INT 0
45478: PPUSH
45479: PPUSH
// if not driver or not IsInUnit ( driver ) then
45480: LD_VAR 0 1
45484: NOT
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 310
45495: NOT
45496: OR
45497: IFFALSE 45501
// exit ;
45499: GO 45591
// vehicle := IsInUnit ( driver ) ;
45501: LD_ADDR_VAR 0 3
45505: PUSH
45506: LD_VAR 0 1
45510: PPUSH
45511: CALL_OW 310
45515: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45516: LD_VAR 0 1
45520: PPUSH
45521: LD_STRING \
45523: PUSH
45524: LD_INT 0
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: PUSH
45551: LD_STRING E
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_VAR 0 3
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PPUSH
45587: CALL_OW 447
// end ;
45591: LD_VAR 0 2
45595: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45596: LD_INT 0
45598: PPUSH
45599: PPUSH
45600: PPUSH
// tmp := [ ] ;
45601: LD_ADDR_VAR 0 5
45605: PUSH
45606: EMPTY
45607: ST_TO_ADDR
// for i in units do
45608: LD_ADDR_VAR 0 4
45612: PUSH
45613: LD_VAR 0 1
45617: PUSH
45618: FOR_IN
45619: IFFALSE 45657
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45621: LD_ADDR_VAR 0 5
45625: PUSH
45626: LD_VAR 0 5
45630: PPUSH
45631: LD_VAR 0 5
45635: PUSH
45636: LD_INT 1
45638: PLUS
45639: PPUSH
45640: LD_VAR 0 4
45644: PPUSH
45645: CALL_OW 256
45649: PPUSH
45650: CALL_OW 2
45654: ST_TO_ADDR
45655: GO 45618
45657: POP
45658: POP
// if not tmp then
45659: LD_VAR 0 5
45663: NOT
45664: IFFALSE 45668
// exit ;
45666: GO 45716
// if asc then
45668: LD_VAR 0 2
45672: IFFALSE 45696
// result := SortListByListAsc ( units , tmp ) else
45674: LD_ADDR_VAR 0 3
45678: PUSH
45679: LD_VAR 0 1
45683: PPUSH
45684: LD_VAR 0 5
45688: PPUSH
45689: CALL_OW 76
45693: ST_TO_ADDR
45694: GO 45716
// result := SortListByListDesc ( units , tmp ) ;
45696: LD_ADDR_VAR 0 3
45700: PUSH
45701: LD_VAR 0 1
45705: PPUSH
45706: LD_VAR 0 5
45710: PPUSH
45711: CALL_OW 77
45715: ST_TO_ADDR
// end ;
45716: LD_VAR 0 3
45720: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45721: LD_INT 0
45723: PPUSH
45724: PPUSH
// task := GetTaskList ( mech ) ;
45725: LD_ADDR_VAR 0 4
45729: PUSH
45730: LD_VAR 0 1
45734: PPUSH
45735: CALL_OW 437
45739: ST_TO_ADDR
// if not task then
45740: LD_VAR 0 4
45744: NOT
45745: IFFALSE 45749
// exit ;
45747: GO 45791
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45749: LD_ADDR_VAR 0 3
45753: PUSH
45754: LD_VAR 0 4
45758: PUSH
45759: LD_INT 1
45761: ARRAY
45762: PUSH
45763: LD_INT 1
45765: ARRAY
45766: PUSH
45767: LD_STRING r
45769: EQUAL
45770: PUSH
45771: LD_VAR 0 4
45775: PUSH
45776: LD_INT 1
45778: ARRAY
45779: PUSH
45780: LD_INT 4
45782: ARRAY
45783: PUSH
45784: LD_VAR 0 2
45788: EQUAL
45789: AND
45790: ST_TO_ADDR
// end ;
45791: LD_VAR 0 3
45795: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45796: LD_INT 0
45798: PPUSH
// SetDir ( unit , d ) ;
45799: LD_VAR 0 1
45803: PPUSH
45804: LD_VAR 0 4
45808: PPUSH
45809: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
45813: LD_VAR 0 1
45817: PPUSH
45818: LD_VAR 0 2
45822: PPUSH
45823: LD_VAR 0 3
45827: PPUSH
45828: LD_VAR 0 5
45832: PPUSH
45833: CALL_OW 48
// end ;
45837: LD_VAR 0 6
45841: RET
// export function ToNaturalNumber ( number ) ; begin
45842: LD_INT 0
45844: PPUSH
// result := number div 1 ;
45845: LD_ADDR_VAR 0 2
45849: PUSH
45850: LD_VAR 0 1
45854: PUSH
45855: LD_INT 1
45857: DIV
45858: ST_TO_ADDR
// if number < 0 then
45859: LD_VAR 0 1
45863: PUSH
45864: LD_INT 0
45866: LESS
45867: IFFALSE 45877
// result := 0 ;
45869: LD_ADDR_VAR 0 2
45873: PUSH
45874: LD_INT 0
45876: ST_TO_ADDR
// end ;
45877: LD_VAR 0 2
45881: RET
// export function SortByClass ( units , class ) ; var un ; begin
45882: LD_INT 0
45884: PPUSH
45885: PPUSH
// if not units or not class then
45886: LD_VAR 0 1
45890: NOT
45891: PUSH
45892: LD_VAR 0 2
45896: NOT
45897: OR
45898: IFFALSE 45902
// exit ;
45900: GO 45997
// result := [ ] ;
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: EMPTY
45908: ST_TO_ADDR
// for un in units do
45909: LD_ADDR_VAR 0 4
45913: PUSH
45914: LD_VAR 0 1
45918: PUSH
45919: FOR_IN
45920: IFFALSE 45995
// if GetClass ( un ) = class then
45922: LD_VAR 0 4
45926: PPUSH
45927: CALL_OW 257
45931: PUSH
45932: LD_VAR 0 2
45936: EQUAL
45937: IFFALSE 45964
// result := Insert ( result , 1 , un ) else
45939: LD_ADDR_VAR 0 3
45943: PUSH
45944: LD_VAR 0 3
45948: PPUSH
45949: LD_INT 1
45951: PPUSH
45952: LD_VAR 0 4
45956: PPUSH
45957: CALL_OW 2
45961: ST_TO_ADDR
45962: GO 45993
// result := Replace ( result , result + 1 , un ) ;
45964: LD_ADDR_VAR 0 3
45968: PUSH
45969: LD_VAR 0 3
45973: PPUSH
45974: LD_VAR 0 3
45978: PUSH
45979: LD_INT 1
45981: PLUS
45982: PPUSH
45983: LD_VAR 0 4
45987: PPUSH
45988: CALL_OW 1
45992: ST_TO_ADDR
45993: GO 45919
45995: POP
45996: POP
// end ;
45997: LD_VAR 0 3
46001: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46002: LD_INT 0
46004: PPUSH
46005: PPUSH
46006: PPUSH
46007: PPUSH
46008: PPUSH
46009: PPUSH
46010: PPUSH
// result := [ ] ;
46011: LD_ADDR_VAR 0 4
46015: PUSH
46016: EMPTY
46017: ST_TO_ADDR
// if x - r < 0 then
46018: LD_VAR 0 1
46022: PUSH
46023: LD_VAR 0 3
46027: MINUS
46028: PUSH
46029: LD_INT 0
46031: LESS
46032: IFFALSE 46044
// min_x := 0 else
46034: LD_ADDR_VAR 0 8
46038: PUSH
46039: LD_INT 0
46041: ST_TO_ADDR
46042: GO 46060
// min_x := x - r ;
46044: LD_ADDR_VAR 0 8
46048: PUSH
46049: LD_VAR 0 1
46053: PUSH
46054: LD_VAR 0 3
46058: MINUS
46059: ST_TO_ADDR
// if y - r < 0 then
46060: LD_VAR 0 2
46064: PUSH
46065: LD_VAR 0 3
46069: MINUS
46070: PUSH
46071: LD_INT 0
46073: LESS
46074: IFFALSE 46086
// min_y := 0 else
46076: LD_ADDR_VAR 0 7
46080: PUSH
46081: LD_INT 0
46083: ST_TO_ADDR
46084: GO 46102
// min_y := y - r ;
46086: LD_ADDR_VAR 0 7
46090: PUSH
46091: LD_VAR 0 2
46095: PUSH
46096: LD_VAR 0 3
46100: MINUS
46101: ST_TO_ADDR
// max_x := x + r ;
46102: LD_ADDR_VAR 0 9
46106: PUSH
46107: LD_VAR 0 1
46111: PUSH
46112: LD_VAR 0 3
46116: PLUS
46117: ST_TO_ADDR
// max_y := y + r ;
46118: LD_ADDR_VAR 0 10
46122: PUSH
46123: LD_VAR 0 2
46127: PUSH
46128: LD_VAR 0 3
46132: PLUS
46133: ST_TO_ADDR
// for _x = min_x to max_x do
46134: LD_ADDR_VAR 0 5
46138: PUSH
46139: DOUBLE
46140: LD_VAR 0 8
46144: DEC
46145: ST_TO_ADDR
46146: LD_VAR 0 9
46150: PUSH
46151: FOR_TO
46152: IFFALSE 46253
// for _y = min_y to max_y do
46154: LD_ADDR_VAR 0 6
46158: PUSH
46159: DOUBLE
46160: LD_VAR 0 7
46164: DEC
46165: ST_TO_ADDR
46166: LD_VAR 0 10
46170: PUSH
46171: FOR_TO
46172: IFFALSE 46249
// begin if not ValidHex ( _x , _y ) then
46174: LD_VAR 0 5
46178: PPUSH
46179: LD_VAR 0 6
46183: PPUSH
46184: CALL_OW 488
46188: NOT
46189: IFFALSE 46193
// continue ;
46191: GO 46171
// if GetResourceTypeXY ( _x , _y ) then
46193: LD_VAR 0 5
46197: PPUSH
46198: LD_VAR 0 6
46202: PPUSH
46203: CALL_OW 283
46207: IFFALSE 46247
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46209: LD_ADDR_VAR 0 4
46213: PUSH
46214: LD_VAR 0 4
46218: PPUSH
46219: LD_VAR 0 4
46223: PUSH
46224: LD_INT 1
46226: PLUS
46227: PPUSH
46228: LD_VAR 0 5
46232: PUSH
46233: LD_VAR 0 6
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PPUSH
46242: CALL_OW 1
46246: ST_TO_ADDR
// end ;
46247: GO 46171
46249: POP
46250: POP
46251: GO 46151
46253: POP
46254: POP
// end ;
46255: LD_VAR 0 4
46259: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46260: LD_INT 0
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
// if not units then
46270: LD_VAR 0 1
46274: NOT
46275: IFFALSE 46279
// exit ;
46277: GO 46790
// result := UnitFilter ( units , [ f_ok ] ) ;
46279: LD_ADDR_VAR 0 3
46283: PUSH
46284: LD_VAR 0 1
46288: PPUSH
46289: LD_INT 50
46291: PUSH
46292: EMPTY
46293: LIST
46294: PPUSH
46295: CALL_OW 72
46299: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46300: LD_ADDR_VAR 0 8
46304: PUSH
46305: LD_VAR 0 1
46309: PUSH
46310: LD_INT 1
46312: ARRAY
46313: PPUSH
46314: CALL_OW 255
46318: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46319: LD_ADDR_VAR 0 10
46323: PUSH
46324: LD_INT 29
46326: PUSH
46327: LD_EXP 87
46331: PUSH
46332: LD_INT 49
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// if not result then
46340: LD_VAR 0 3
46344: NOT
46345: IFFALSE 46349
// exit ;
46347: GO 46790
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46349: LD_ADDR_VAR 0 5
46353: PUSH
46354: LD_INT 81
46356: PUSH
46357: LD_VAR 0 8
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PPUSH
46366: CALL_OW 69
46370: ST_TO_ADDR
// for i in result do
46371: LD_ADDR_VAR 0 4
46375: PUSH
46376: LD_VAR 0 3
46380: PUSH
46381: FOR_IN
46382: IFFALSE 46788
// begin tag := GetTag ( i ) + 1 ;
46384: LD_ADDR_VAR 0 9
46388: PUSH
46389: LD_VAR 0 4
46393: PPUSH
46394: CALL_OW 110
46398: PUSH
46399: LD_INT 1
46401: PLUS
46402: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46403: LD_ADDR_VAR 0 7
46407: PUSH
46408: LD_VAR 0 4
46412: PPUSH
46413: CALL_OW 250
46417: PPUSH
46418: LD_VAR 0 4
46422: PPUSH
46423: CALL_OW 251
46427: PPUSH
46428: LD_INT 6
46430: PPUSH
46431: CALL 46002 0 3
46435: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46436: LD_VAR 0 7
46440: PUSH
46441: LD_VAR 0 4
46445: PPUSH
46446: CALL_OW 264
46450: PUSH
46451: LD_VAR 0 10
46455: IN
46456: NOT
46457: AND
46458: IFFALSE 46497
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46460: LD_VAR 0 4
46464: PPUSH
46465: LD_VAR 0 7
46469: PUSH
46470: LD_INT 1
46472: ARRAY
46473: PUSH
46474: LD_INT 1
46476: ARRAY
46477: PPUSH
46478: LD_VAR 0 7
46482: PUSH
46483: LD_INT 1
46485: ARRAY
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: PPUSH
46491: CALL_OW 116
46495: GO 46786
// if path > tag then
46497: LD_VAR 0 2
46501: PUSH
46502: LD_VAR 0 9
46506: GREATER
46507: IFFALSE 46715
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
46509: LD_ADDR_VAR 0 6
46513: PUSH
46514: LD_VAR 0 5
46518: PPUSH
46519: LD_INT 91
46521: PUSH
46522: LD_VAR 0 4
46526: PUSH
46527: LD_INT 12
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: PPUSH
46535: CALL_OW 72
46539: ST_TO_ADDR
// if nearEnemy then
46540: LD_VAR 0 6
46544: IFFALSE 46613
// begin if GetWeapon ( i ) = ru_time_lapser then
46546: LD_VAR 0 4
46550: PPUSH
46551: CALL_OW 264
46555: PUSH
46556: LD_INT 49
46558: EQUAL
46559: IFFALSE 46587
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46561: LD_VAR 0 4
46565: PPUSH
46566: LD_VAR 0 6
46570: PPUSH
46571: LD_VAR 0 4
46575: PPUSH
46576: CALL_OW 74
46580: PPUSH
46581: CALL_OW 112
46585: GO 46611
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46587: LD_VAR 0 4
46591: PPUSH
46592: LD_VAR 0 6
46596: PPUSH
46597: LD_VAR 0 4
46601: PPUSH
46602: CALL_OW 74
46606: PPUSH
46607: CALL_OW 115
// end else
46611: GO 46713
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46613: LD_VAR 0 4
46617: PPUSH
46618: LD_VAR 0 2
46622: PUSH
46623: LD_VAR 0 9
46627: ARRAY
46628: PUSH
46629: LD_INT 1
46631: ARRAY
46632: PPUSH
46633: LD_VAR 0 2
46637: PUSH
46638: LD_VAR 0 9
46642: ARRAY
46643: PUSH
46644: LD_INT 2
46646: ARRAY
46647: PPUSH
46648: CALL_OW 297
46652: PUSH
46653: LD_INT 6
46655: GREATER
46656: IFFALSE 46699
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46658: LD_VAR 0 4
46662: PPUSH
46663: LD_VAR 0 2
46667: PUSH
46668: LD_VAR 0 9
46672: ARRAY
46673: PUSH
46674: LD_INT 1
46676: ARRAY
46677: PPUSH
46678: LD_VAR 0 2
46682: PUSH
46683: LD_VAR 0 9
46687: ARRAY
46688: PUSH
46689: LD_INT 2
46691: ARRAY
46692: PPUSH
46693: CALL_OW 114
46697: GO 46713
// SetTag ( i , tag ) ;
46699: LD_VAR 0 4
46703: PPUSH
46704: LD_VAR 0 9
46708: PPUSH
46709: CALL_OW 109
// end else
46713: GO 46786
// if enemy then
46715: LD_VAR 0 5
46719: IFFALSE 46786
// begin if GetWeapon ( i ) = ru_time_lapser then
46721: LD_VAR 0 4
46725: PPUSH
46726: CALL_OW 264
46730: PUSH
46731: LD_INT 49
46733: EQUAL
46734: IFFALSE 46762
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46736: LD_VAR 0 4
46740: PPUSH
46741: LD_VAR 0 5
46745: PPUSH
46746: LD_VAR 0 4
46750: PPUSH
46751: CALL_OW 74
46755: PPUSH
46756: CALL_OW 112
46760: GO 46786
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46762: LD_VAR 0 4
46766: PPUSH
46767: LD_VAR 0 5
46771: PPUSH
46772: LD_VAR 0 4
46776: PPUSH
46777: CALL_OW 74
46781: PPUSH
46782: CALL_OW 115
// end ; end ;
46786: GO 46381
46788: POP
46789: POP
// end ;
46790: LD_VAR 0 3
46794: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46795: LD_INT 0
46797: PPUSH
46798: PPUSH
46799: PPUSH
// if not unit or IsInUnit ( unit ) then
46800: LD_VAR 0 1
46804: NOT
46805: PUSH
46806: LD_VAR 0 1
46810: PPUSH
46811: CALL_OW 310
46815: OR
46816: IFFALSE 46820
// exit ;
46818: GO 46911
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46820: LD_ADDR_VAR 0 4
46824: PUSH
46825: LD_VAR 0 1
46829: PPUSH
46830: CALL_OW 250
46834: PPUSH
46835: LD_VAR 0 2
46839: PPUSH
46840: LD_INT 1
46842: PPUSH
46843: CALL_OW 272
46847: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
46848: LD_ADDR_VAR 0 5
46852: PUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: CALL_OW 251
46862: PPUSH
46863: LD_VAR 0 2
46867: PPUSH
46868: LD_INT 1
46870: PPUSH
46871: CALL_OW 273
46875: ST_TO_ADDR
// if ValidHex ( x , y ) then
46876: LD_VAR 0 4
46880: PPUSH
46881: LD_VAR 0 5
46885: PPUSH
46886: CALL_OW 488
46890: IFFALSE 46911
// ComTurnXY ( unit , x , y ) ;
46892: LD_VAR 0 1
46896: PPUSH
46897: LD_VAR 0 4
46901: PPUSH
46902: LD_VAR 0 5
46906: PPUSH
46907: CALL_OW 118
// end ;
46911: LD_VAR 0 3
46915: RET
// export function SeeUnits ( side , units ) ; var i ; begin
46916: LD_INT 0
46918: PPUSH
46919: PPUSH
// result := false ;
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_INT 0
46927: ST_TO_ADDR
// if not units then
46928: LD_VAR 0 2
46932: NOT
46933: IFFALSE 46937
// exit ;
46935: GO 46982
// for i in units do
46937: LD_ADDR_VAR 0 4
46941: PUSH
46942: LD_VAR 0 2
46946: PUSH
46947: FOR_IN
46948: IFFALSE 46980
// if See ( side , i ) then
46950: LD_VAR 0 1
46954: PPUSH
46955: LD_VAR 0 4
46959: PPUSH
46960: CALL_OW 292
46964: IFFALSE 46978
// begin result := true ;
46966: LD_ADDR_VAR 0 3
46970: PUSH
46971: LD_INT 1
46973: ST_TO_ADDR
// exit ;
46974: POP
46975: POP
46976: GO 46982
// end ;
46978: GO 46947
46980: POP
46981: POP
// end ;
46982: LD_VAR 0 3
46986: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
46987: LD_INT 0
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
// if not unit or not points then
46993: LD_VAR 0 1
46997: NOT
46998: PUSH
46999: LD_VAR 0 2
47003: NOT
47004: OR
47005: IFFALSE 47009
// exit ;
47007: GO 47099
// dist := 99999 ;
47009: LD_ADDR_VAR 0 5
47013: PUSH
47014: LD_INT 99999
47016: ST_TO_ADDR
// for i in points do
47017: LD_ADDR_VAR 0 4
47021: PUSH
47022: LD_VAR 0 2
47026: PUSH
47027: FOR_IN
47028: IFFALSE 47097
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47030: LD_ADDR_VAR 0 6
47034: PUSH
47035: LD_VAR 0 1
47039: PPUSH
47040: LD_VAR 0 4
47044: PUSH
47045: LD_INT 1
47047: ARRAY
47048: PPUSH
47049: LD_VAR 0 4
47053: PUSH
47054: LD_INT 2
47056: ARRAY
47057: PPUSH
47058: CALL_OW 297
47062: ST_TO_ADDR
// if tmpDist < dist then
47063: LD_VAR 0 6
47067: PUSH
47068: LD_VAR 0 5
47072: LESS
47073: IFFALSE 47095
// begin result := i ;
47075: LD_ADDR_VAR 0 3
47079: PUSH
47080: LD_VAR 0 4
47084: ST_TO_ADDR
// dist := tmpDist ;
47085: LD_ADDR_VAR 0 5
47089: PUSH
47090: LD_VAR 0 6
47094: ST_TO_ADDR
// end ; end ;
47095: GO 47027
47097: POP
47098: POP
// end ;
47099: LD_VAR 0 3
47103: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47104: LD_INT 0
47106: PPUSH
// uc_side := side ;
47107: LD_ADDR_OWVAR 20
47111: PUSH
47112: LD_VAR 0 1
47116: ST_TO_ADDR
// uc_nation := 3 ;
47117: LD_ADDR_OWVAR 21
47121: PUSH
47122: LD_INT 3
47124: ST_TO_ADDR
// vc_chassis := 25 ;
47125: LD_ADDR_OWVAR 37
47129: PUSH
47130: LD_INT 25
47132: ST_TO_ADDR
// vc_engine := engine_siberite ;
47133: LD_ADDR_OWVAR 39
47137: PUSH
47138: LD_INT 3
47140: ST_TO_ADDR
// vc_control := control_computer ;
47141: LD_ADDR_OWVAR 38
47145: PUSH
47146: LD_INT 3
47148: ST_TO_ADDR
// vc_weapon := 59 ;
47149: LD_ADDR_OWVAR 40
47153: PUSH
47154: LD_INT 59
47156: ST_TO_ADDR
// result := CreateVehicle ;
47157: LD_ADDR_VAR 0 5
47161: PUSH
47162: CALL_OW 45
47166: ST_TO_ADDR
// SetDir ( result , d ) ;
47167: LD_VAR 0 5
47171: PPUSH
47172: LD_VAR 0 4
47176: PPUSH
47177: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47181: LD_VAR 0 5
47185: PPUSH
47186: LD_VAR 0 2
47190: PPUSH
47191: LD_VAR 0 3
47195: PPUSH
47196: LD_INT 0
47198: PPUSH
47199: CALL_OW 48
// end ;
47203: LD_VAR 0 5
47207: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47208: LD_INT 0
47210: PPUSH
47211: PPUSH
47212: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47213: LD_ADDR_VAR 0 2
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47236: LD_VAR 0 1
47240: NOT
47241: PUSH
47242: LD_VAR 0 1
47246: PPUSH
47247: CALL_OW 264
47251: PUSH
47252: LD_INT 12
47254: PUSH
47255: LD_INT 51
47257: PUSH
47258: LD_INT 32
47260: PUSH
47261: LD_EXP 84
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: IN
47272: NOT
47273: OR
47274: IFFALSE 47278
// exit ;
47276: GO 47376
// for i := 1 to 3 do
47278: LD_ADDR_VAR 0 3
47282: PUSH
47283: DOUBLE
47284: LD_INT 1
47286: DEC
47287: ST_TO_ADDR
47288: LD_INT 3
47290: PUSH
47291: FOR_TO
47292: IFFALSE 47374
// begin tmp := GetCargo ( cargo , i ) ;
47294: LD_ADDR_VAR 0 4
47298: PUSH
47299: LD_VAR 0 1
47303: PPUSH
47304: LD_VAR 0 3
47308: PPUSH
47309: CALL_OW 289
47313: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47314: LD_ADDR_VAR 0 2
47318: PUSH
47319: LD_VAR 0 2
47323: PPUSH
47324: LD_VAR 0 3
47328: PPUSH
47329: LD_VAR 0 4
47333: PPUSH
47334: CALL_OW 1
47338: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47339: LD_ADDR_VAR 0 2
47343: PUSH
47344: LD_VAR 0 2
47348: PPUSH
47349: LD_INT 4
47351: PPUSH
47352: LD_VAR 0 2
47356: PUSH
47357: LD_INT 4
47359: ARRAY
47360: PUSH
47361: LD_VAR 0 4
47365: PLUS
47366: PPUSH
47367: CALL_OW 1
47371: ST_TO_ADDR
// end ;
47372: GO 47291
47374: POP
47375: POP
// end ;
47376: LD_VAR 0 2
47380: RET
// export function Length ( array ) ; begin
47381: LD_INT 0
47383: PPUSH
// result := array + 0 ;
47384: LD_ADDR_VAR 0 2
47388: PUSH
47389: LD_VAR 0 1
47393: PUSH
47394: LD_INT 0
47396: PLUS
47397: ST_TO_ADDR
// end ;
47398: LD_VAR 0 2
47402: RET
// export function PrepareBuilding ( side , nation , level , typ , x , y , dir , isInBuildingStage ) ; begin
47403: LD_INT 0
47405: PPUSH
// uc_side := side ;
47406: LD_ADDR_OWVAR 20
47410: PUSH
47411: LD_VAR 0 1
47415: ST_TO_ADDR
// uc_nation := nation ;
47416: LD_ADDR_OWVAR 21
47420: PUSH
47421: LD_VAR 0 2
47425: ST_TO_ADDR
// bc_level := level ;
47426: LD_ADDR_OWVAR 43
47430: PUSH
47431: LD_VAR 0 3
47435: ST_TO_ADDR
// bc_type := typ ;
47436: LD_ADDR_OWVAR 42
47440: PUSH
47441: LD_VAR 0 4
47445: ST_TO_ADDR
// bc_kind1 := - 1 ;
47446: LD_ADDR_OWVAR 44
47450: PUSH
47451: LD_INT 1
47453: NEG
47454: ST_TO_ADDR
// bc_kind2 := - 1 ;
47455: LD_ADDR_OWVAR 45
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: ST_TO_ADDR
// result := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47464: LD_ADDR_VAR 0 9
47468: PUSH
47469: LD_VAR 0 5
47473: PPUSH
47474: LD_VAR 0 6
47478: PPUSH
47479: LD_VAR 0 7
47483: PPUSH
47484: CALL_OW 47
47488: ST_TO_ADDR
// if isInBuildingStage then
47489: LD_VAR 0 8
47493: IFFALSE 47504
// SetBuildingStage ( result ) ;
47495: LD_VAR 0 9
47499: PPUSH
47500: CALL_OW 593
// end ; end_of_file
47504: LD_VAR 0 9
47508: RET
// every 0 0$1 do
47509: GO 47511
47511: DISABLE
// begin enable ;
47512: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47513: LD_STRING updateTimer(
47515: PUSH
47516: LD_OWVAR 1
47520: STR
47521: PUSH
47522: LD_STRING );
47524: STR
47525: PPUSH
47526: CALL_OW 559
// end ;
47530: END
// export function SOS_MapStart ( ) ; begin
47531: LD_INT 0
47533: PPUSH
// if streamModeActive then
47534: LD_EXP 103
47538: IFFALSE 47547
// DefineStreamItems ( true ) ;
47540: LD_INT 1
47542: PPUSH
47543: CALL 49197 0 1
// UpdateFactoryWaypoints ( ) ;
47547: CALL 62781 0 0
// end ;
47551: LD_VAR 0 1
47555: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
47556: LD_INT 0
47558: PPUSH
// if p2 = 100 then
47559: LD_VAR 0 2
47563: PUSH
47564: LD_INT 100
47566: EQUAL
47567: IFFALSE 48570
// begin if not StreamModeActive then
47569: LD_EXP 103
47573: NOT
47574: IFFALSE 47584
// StreamModeActive := true ;
47576: LD_ADDR_EXP 103
47580: PUSH
47581: LD_INT 1
47583: ST_TO_ADDR
// if p3 = 0 then
47584: LD_VAR 0 3
47588: PUSH
47589: LD_INT 0
47591: EQUAL
47592: IFFALSE 47598
// InitStreamMode ;
47594: CALL 48733 0 0
// if p3 = 1 then
47598: LD_VAR 0 3
47602: PUSH
47603: LD_INT 1
47605: EQUAL
47606: IFFALSE 47616
// sRocket := true ;
47608: LD_ADDR_EXP 108
47612: PUSH
47613: LD_INT 1
47615: ST_TO_ADDR
// if p3 = 2 then
47616: LD_VAR 0 3
47620: PUSH
47621: LD_INT 2
47623: EQUAL
47624: IFFALSE 47634
// sSpeed := true ;
47626: LD_ADDR_EXP 107
47630: PUSH
47631: LD_INT 1
47633: ST_TO_ADDR
// if p3 = 3 then
47634: LD_VAR 0 3
47638: PUSH
47639: LD_INT 3
47641: EQUAL
47642: IFFALSE 47652
// sEngine := true ;
47644: LD_ADDR_EXP 109
47648: PUSH
47649: LD_INT 1
47651: ST_TO_ADDR
// if p3 = 4 then
47652: LD_VAR 0 3
47656: PUSH
47657: LD_INT 4
47659: EQUAL
47660: IFFALSE 47670
// sSpec := true ;
47662: LD_ADDR_EXP 106
47666: PUSH
47667: LD_INT 1
47669: ST_TO_ADDR
// if p3 = 5 then
47670: LD_VAR 0 3
47674: PUSH
47675: LD_INT 5
47677: EQUAL
47678: IFFALSE 47688
// sLevel := true ;
47680: LD_ADDR_EXP 110
47684: PUSH
47685: LD_INT 1
47687: ST_TO_ADDR
// if p3 = 6 then
47688: LD_VAR 0 3
47692: PUSH
47693: LD_INT 6
47695: EQUAL
47696: IFFALSE 47706
// sArmoury := true ;
47698: LD_ADDR_EXP 111
47702: PUSH
47703: LD_INT 1
47705: ST_TO_ADDR
// if p3 = 7 then
47706: LD_VAR 0 3
47710: PUSH
47711: LD_INT 7
47713: EQUAL
47714: IFFALSE 47724
// sRadar := true ;
47716: LD_ADDR_EXP 112
47720: PUSH
47721: LD_INT 1
47723: ST_TO_ADDR
// if p3 = 8 then
47724: LD_VAR 0 3
47728: PUSH
47729: LD_INT 8
47731: EQUAL
47732: IFFALSE 47742
// sBunker := true ;
47734: LD_ADDR_EXP 113
47738: PUSH
47739: LD_INT 1
47741: ST_TO_ADDR
// if p3 = 9 then
47742: LD_VAR 0 3
47746: PUSH
47747: LD_INT 9
47749: EQUAL
47750: IFFALSE 47760
// sHack := true ;
47752: LD_ADDR_EXP 114
47756: PUSH
47757: LD_INT 1
47759: ST_TO_ADDR
// if p3 = 10 then
47760: LD_VAR 0 3
47764: PUSH
47765: LD_INT 10
47767: EQUAL
47768: IFFALSE 47778
// sFire := true ;
47770: LD_ADDR_EXP 115
47774: PUSH
47775: LD_INT 1
47777: ST_TO_ADDR
// if p3 = 11 then
47778: LD_VAR 0 3
47782: PUSH
47783: LD_INT 11
47785: EQUAL
47786: IFFALSE 47796
// sRefresh := true ;
47788: LD_ADDR_EXP 116
47792: PUSH
47793: LD_INT 1
47795: ST_TO_ADDR
// if p3 = 12 then
47796: LD_VAR 0 3
47800: PUSH
47801: LD_INT 12
47803: EQUAL
47804: IFFALSE 47814
// sExp := true ;
47806: LD_ADDR_EXP 117
47810: PUSH
47811: LD_INT 1
47813: ST_TO_ADDR
// if p3 = 13 then
47814: LD_VAR 0 3
47818: PUSH
47819: LD_INT 13
47821: EQUAL
47822: IFFALSE 47832
// sDepot := true ;
47824: LD_ADDR_EXP 118
47828: PUSH
47829: LD_INT 1
47831: ST_TO_ADDR
// if p3 = 14 then
47832: LD_VAR 0 3
47836: PUSH
47837: LD_INT 14
47839: EQUAL
47840: IFFALSE 47850
// sFlag := true ;
47842: LD_ADDR_EXP 119
47846: PUSH
47847: LD_INT 1
47849: ST_TO_ADDR
// if p3 = 15 then
47850: LD_VAR 0 3
47854: PUSH
47855: LD_INT 15
47857: EQUAL
47858: IFFALSE 47868
// sKamikadze := true ;
47860: LD_ADDR_EXP 127
47864: PUSH
47865: LD_INT 1
47867: ST_TO_ADDR
// if p3 = 16 then
47868: LD_VAR 0 3
47872: PUSH
47873: LD_INT 16
47875: EQUAL
47876: IFFALSE 47886
// sTroll := true ;
47878: LD_ADDR_EXP 128
47882: PUSH
47883: LD_INT 1
47885: ST_TO_ADDR
// if p3 = 17 then
47886: LD_VAR 0 3
47890: PUSH
47891: LD_INT 17
47893: EQUAL
47894: IFFALSE 47904
// sSlow := true ;
47896: LD_ADDR_EXP 129
47900: PUSH
47901: LD_INT 1
47903: ST_TO_ADDR
// if p3 = 18 then
47904: LD_VAR 0 3
47908: PUSH
47909: LD_INT 18
47911: EQUAL
47912: IFFALSE 47922
// sLack := true ;
47914: LD_ADDR_EXP 130
47918: PUSH
47919: LD_INT 1
47921: ST_TO_ADDR
// if p3 = 19 then
47922: LD_VAR 0 3
47926: PUSH
47927: LD_INT 19
47929: EQUAL
47930: IFFALSE 47940
// sTank := true ;
47932: LD_ADDR_EXP 132
47936: PUSH
47937: LD_INT 1
47939: ST_TO_ADDR
// if p3 = 20 then
47940: LD_VAR 0 3
47944: PUSH
47945: LD_INT 20
47947: EQUAL
47948: IFFALSE 47958
// sRemote := true ;
47950: LD_ADDR_EXP 133
47954: PUSH
47955: LD_INT 1
47957: ST_TO_ADDR
// if p3 = 21 then
47958: LD_VAR 0 3
47962: PUSH
47963: LD_INT 21
47965: EQUAL
47966: IFFALSE 47976
// sPowell := true ;
47968: LD_ADDR_EXP 134
47972: PUSH
47973: LD_INT 1
47975: ST_TO_ADDR
// if p3 = 22 then
47976: LD_VAR 0 3
47980: PUSH
47981: LD_INT 22
47983: EQUAL
47984: IFFALSE 47994
// sTeleport := true ;
47986: LD_ADDR_EXP 137
47990: PUSH
47991: LD_INT 1
47993: ST_TO_ADDR
// if p3 = 23 then
47994: LD_VAR 0 3
47998: PUSH
47999: LD_INT 23
48001: EQUAL
48002: IFFALSE 48012
// sOilTower := true ;
48004: LD_ADDR_EXP 139
48008: PUSH
48009: LD_INT 1
48011: ST_TO_ADDR
// if p3 = 24 then
48012: LD_VAR 0 3
48016: PUSH
48017: LD_INT 24
48019: EQUAL
48020: IFFALSE 48030
// sShovel := true ;
48022: LD_ADDR_EXP 140
48026: PUSH
48027: LD_INT 1
48029: ST_TO_ADDR
// if p3 = 25 then
48030: LD_VAR 0 3
48034: PUSH
48035: LD_INT 25
48037: EQUAL
48038: IFFALSE 48048
// sSheik := true ;
48040: LD_ADDR_EXP 141
48044: PUSH
48045: LD_INT 1
48047: ST_TO_ADDR
// if p3 = 26 then
48048: LD_VAR 0 3
48052: PUSH
48053: LD_INT 26
48055: EQUAL
48056: IFFALSE 48066
// sEarthquake := true ;
48058: LD_ADDR_EXP 143
48062: PUSH
48063: LD_INT 1
48065: ST_TO_ADDR
// if p3 = 27 then
48066: LD_VAR 0 3
48070: PUSH
48071: LD_INT 27
48073: EQUAL
48074: IFFALSE 48084
// sAI := true ;
48076: LD_ADDR_EXP 144
48080: PUSH
48081: LD_INT 1
48083: ST_TO_ADDR
// if p3 = 28 then
48084: LD_VAR 0 3
48088: PUSH
48089: LD_INT 28
48091: EQUAL
48092: IFFALSE 48102
// sCargo := true ;
48094: LD_ADDR_EXP 147
48098: PUSH
48099: LD_INT 1
48101: ST_TO_ADDR
// if p3 = 29 then
48102: LD_VAR 0 3
48106: PUSH
48107: LD_INT 29
48109: EQUAL
48110: IFFALSE 48120
// sDLaser := true ;
48112: LD_ADDR_EXP 148
48116: PUSH
48117: LD_INT 1
48119: ST_TO_ADDR
// if p3 = 30 then
48120: LD_VAR 0 3
48124: PUSH
48125: LD_INT 30
48127: EQUAL
48128: IFFALSE 48138
// sExchange := true ;
48130: LD_ADDR_EXP 149
48134: PUSH
48135: LD_INT 1
48137: ST_TO_ADDR
// if p3 = 31 then
48138: LD_VAR 0 3
48142: PUSH
48143: LD_INT 31
48145: EQUAL
48146: IFFALSE 48156
// sFac := true ;
48148: LD_ADDR_EXP 150
48152: PUSH
48153: LD_INT 1
48155: ST_TO_ADDR
// if p3 = 32 then
48156: LD_VAR 0 3
48160: PUSH
48161: LD_INT 32
48163: EQUAL
48164: IFFALSE 48174
// sPower := true ;
48166: LD_ADDR_EXP 151
48170: PUSH
48171: LD_INT 1
48173: ST_TO_ADDR
// if p3 = 33 then
48174: LD_VAR 0 3
48178: PUSH
48179: LD_INT 33
48181: EQUAL
48182: IFFALSE 48192
// sRandom := true ;
48184: LD_ADDR_EXP 152
48188: PUSH
48189: LD_INT 1
48191: ST_TO_ADDR
// if p3 = 34 then
48192: LD_VAR 0 3
48196: PUSH
48197: LD_INT 34
48199: EQUAL
48200: IFFALSE 48210
// sShield := true ;
48202: LD_ADDR_EXP 153
48206: PUSH
48207: LD_INT 1
48209: ST_TO_ADDR
// if p3 = 35 then
48210: LD_VAR 0 3
48214: PUSH
48215: LD_INT 35
48217: EQUAL
48218: IFFALSE 48228
// sTime := true ;
48220: LD_ADDR_EXP 154
48224: PUSH
48225: LD_INT 1
48227: ST_TO_ADDR
// if p3 = 36 then
48228: LD_VAR 0 3
48232: PUSH
48233: LD_INT 36
48235: EQUAL
48236: IFFALSE 48246
// sTools := true ;
48238: LD_ADDR_EXP 155
48242: PUSH
48243: LD_INT 1
48245: ST_TO_ADDR
// if p3 = 101 then
48246: LD_VAR 0 3
48250: PUSH
48251: LD_INT 101
48253: EQUAL
48254: IFFALSE 48264
// sSold := true ;
48256: LD_ADDR_EXP 120
48260: PUSH
48261: LD_INT 1
48263: ST_TO_ADDR
// if p3 = 102 then
48264: LD_VAR 0 3
48268: PUSH
48269: LD_INT 102
48271: EQUAL
48272: IFFALSE 48282
// sDiff := true ;
48274: LD_ADDR_EXP 121
48278: PUSH
48279: LD_INT 1
48281: ST_TO_ADDR
// if p3 = 103 then
48282: LD_VAR 0 3
48286: PUSH
48287: LD_INT 103
48289: EQUAL
48290: IFFALSE 48300
// sFog := true ;
48292: LD_ADDR_EXP 124
48296: PUSH
48297: LD_INT 1
48299: ST_TO_ADDR
// if p3 = 104 then
48300: LD_VAR 0 3
48304: PUSH
48305: LD_INT 104
48307: EQUAL
48308: IFFALSE 48318
// sReset := true ;
48310: LD_ADDR_EXP 125
48314: PUSH
48315: LD_INT 1
48317: ST_TO_ADDR
// if p3 = 105 then
48318: LD_VAR 0 3
48322: PUSH
48323: LD_INT 105
48325: EQUAL
48326: IFFALSE 48336
// sSun := true ;
48328: LD_ADDR_EXP 126
48332: PUSH
48333: LD_INT 1
48335: ST_TO_ADDR
// if p3 = 106 then
48336: LD_VAR 0 3
48340: PUSH
48341: LD_INT 106
48343: EQUAL
48344: IFFALSE 48354
// sTiger := true ;
48346: LD_ADDR_EXP 122
48350: PUSH
48351: LD_INT 1
48353: ST_TO_ADDR
// if p3 = 107 then
48354: LD_VAR 0 3
48358: PUSH
48359: LD_INT 107
48361: EQUAL
48362: IFFALSE 48372
// sBomb := true ;
48364: LD_ADDR_EXP 123
48368: PUSH
48369: LD_INT 1
48371: ST_TO_ADDR
// if p3 = 108 then
48372: LD_VAR 0 3
48376: PUSH
48377: LD_INT 108
48379: EQUAL
48380: IFFALSE 48390
// sWound := true ;
48382: LD_ADDR_EXP 131
48386: PUSH
48387: LD_INT 1
48389: ST_TO_ADDR
// if p3 = 109 then
48390: LD_VAR 0 3
48394: PUSH
48395: LD_INT 109
48397: EQUAL
48398: IFFALSE 48408
// sBetray := true ;
48400: LD_ADDR_EXP 135
48404: PUSH
48405: LD_INT 1
48407: ST_TO_ADDR
// if p3 = 110 then
48408: LD_VAR 0 3
48412: PUSH
48413: LD_INT 110
48415: EQUAL
48416: IFFALSE 48426
// sContamin := true ;
48418: LD_ADDR_EXP 136
48422: PUSH
48423: LD_INT 1
48425: ST_TO_ADDR
// if p3 = 111 then
48426: LD_VAR 0 3
48430: PUSH
48431: LD_INT 111
48433: EQUAL
48434: IFFALSE 48444
// sOil := true ;
48436: LD_ADDR_EXP 138
48440: PUSH
48441: LD_INT 1
48443: ST_TO_ADDR
// if p3 = 112 then
48444: LD_VAR 0 3
48448: PUSH
48449: LD_INT 112
48451: EQUAL
48452: IFFALSE 48462
// sStu := true ;
48454: LD_ADDR_EXP 142
48458: PUSH
48459: LD_INT 1
48461: ST_TO_ADDR
// if p3 = 113 then
48462: LD_VAR 0 3
48466: PUSH
48467: LD_INT 113
48469: EQUAL
48470: IFFALSE 48480
// sBazooka := true ;
48472: LD_ADDR_EXP 145
48476: PUSH
48477: LD_INT 1
48479: ST_TO_ADDR
// if p3 = 114 then
48480: LD_VAR 0 3
48484: PUSH
48485: LD_INT 114
48487: EQUAL
48488: IFFALSE 48498
// sMortar := true ;
48490: LD_ADDR_EXP 146
48494: PUSH
48495: LD_INT 1
48497: ST_TO_ADDR
// if p3 = 115 then
48498: LD_VAR 0 3
48502: PUSH
48503: LD_INT 115
48505: EQUAL
48506: IFFALSE 48516
// sRanger := true ;
48508: LD_ADDR_EXP 156
48512: PUSH
48513: LD_INT 1
48515: ST_TO_ADDR
// if p3 = 116 then
48516: LD_VAR 0 3
48520: PUSH
48521: LD_INT 116
48523: EQUAL
48524: IFFALSE 48534
// sComputer := true ;
48526: LD_ADDR_EXP 157
48530: PUSH
48531: LD_INT 1
48533: ST_TO_ADDR
// if p3 = 117 then
48534: LD_VAR 0 3
48538: PUSH
48539: LD_INT 117
48541: EQUAL
48542: IFFALSE 48552
// s30 := true ;
48544: LD_ADDR_EXP 158
48548: PUSH
48549: LD_INT 1
48551: ST_TO_ADDR
// if p3 = 118 then
48552: LD_VAR 0 3
48556: PUSH
48557: LD_INT 118
48559: EQUAL
48560: IFFALSE 48570
// s60 := true ;
48562: LD_ADDR_EXP 159
48566: PUSH
48567: LD_INT 1
48569: ST_TO_ADDR
// end ; if p2 = 101 then
48570: LD_VAR 0 2
48574: PUSH
48575: LD_INT 101
48577: EQUAL
48578: IFFALSE 48706
// begin case p3 of 1 :
48580: LD_VAR 0 3
48584: PUSH
48585: LD_INT 1
48587: DOUBLE
48588: EQUAL
48589: IFTRUE 48593
48591: GO 48600
48593: POP
// hHackUnlimitedResources ; 2 :
48594: CALL 60804 0 0
48598: GO 48706
48600: LD_INT 2
48602: DOUBLE
48603: EQUAL
48604: IFTRUE 48608
48606: GO 48615
48608: POP
// hHackSetLevel10 ; 3 :
48609: CALL 60937 0 0
48613: GO 48706
48615: LD_INT 3
48617: DOUBLE
48618: EQUAL
48619: IFTRUE 48623
48621: GO 48630
48623: POP
// hHackSetLevel10YourUnits ; 4 :
48624: CALL 61022 0 0
48628: GO 48706
48630: LD_INT 4
48632: DOUBLE
48633: EQUAL
48634: IFTRUE 48638
48636: GO 48645
48638: POP
// hHackInvincible ; 5 :
48639: CALL 61470 0 0
48643: GO 48706
48645: LD_INT 5
48647: DOUBLE
48648: EQUAL
48649: IFTRUE 48653
48651: GO 48660
48653: POP
// hHackInvisible ; 6 :
48654: CALL 61581 0 0
48658: GO 48706
48660: LD_INT 6
48662: DOUBLE
48663: EQUAL
48664: IFTRUE 48668
48666: GO 48675
48668: POP
// hHackChangeYourSide ; 7 :
48669: CALL 61638 0 0
48673: GO 48706
48675: LD_INT 7
48677: DOUBLE
48678: EQUAL
48679: IFTRUE 48683
48681: GO 48690
48683: POP
// hHackChangeUnitSide ; 8 :
48684: CALL 61680 0 0
48688: GO 48706
48690: LD_INT 8
48692: DOUBLE
48693: EQUAL
48694: IFTRUE 48698
48696: GO 48705
48698: POP
// hHackFog ; end ;
48699: CALL 61781 0 0
48703: GO 48706
48705: POP
// end ; end ;
48706: LD_VAR 0 7
48710: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
48711: GO 48713
48713: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
48714: LD_STRING initStreamRollete();
48716: PPUSH
48717: CALL_OW 559
// InitStreamMode ;
48721: CALL 48733 0 0
// DefineStreamItems ( false ) ;
48725: LD_INT 0
48727: PPUSH
48728: CALL 49197 0 1
// end ;
48732: END
// function InitStreamMode ; begin
48733: LD_INT 0
48735: PPUSH
// streamModeActive := false ;
48736: LD_ADDR_EXP 103
48740: PUSH
48741: LD_INT 0
48743: ST_TO_ADDR
// normalCounter := 36 ;
48744: LD_ADDR_EXP 104
48748: PUSH
48749: LD_INT 36
48751: ST_TO_ADDR
// hardcoreCounter := 18 ;
48752: LD_ADDR_EXP 105
48756: PUSH
48757: LD_INT 18
48759: ST_TO_ADDR
// sRocket := false ;
48760: LD_ADDR_EXP 108
48764: PUSH
48765: LD_INT 0
48767: ST_TO_ADDR
// sSpeed := false ;
48768: LD_ADDR_EXP 107
48772: PUSH
48773: LD_INT 0
48775: ST_TO_ADDR
// sEngine := false ;
48776: LD_ADDR_EXP 109
48780: PUSH
48781: LD_INT 0
48783: ST_TO_ADDR
// sSpec := false ;
48784: LD_ADDR_EXP 106
48788: PUSH
48789: LD_INT 0
48791: ST_TO_ADDR
// sLevel := false ;
48792: LD_ADDR_EXP 110
48796: PUSH
48797: LD_INT 0
48799: ST_TO_ADDR
// sArmoury := false ;
48800: LD_ADDR_EXP 111
48804: PUSH
48805: LD_INT 0
48807: ST_TO_ADDR
// sRadar := false ;
48808: LD_ADDR_EXP 112
48812: PUSH
48813: LD_INT 0
48815: ST_TO_ADDR
// sBunker := false ;
48816: LD_ADDR_EXP 113
48820: PUSH
48821: LD_INT 0
48823: ST_TO_ADDR
// sHack := false ;
48824: LD_ADDR_EXP 114
48828: PUSH
48829: LD_INT 0
48831: ST_TO_ADDR
// sFire := false ;
48832: LD_ADDR_EXP 115
48836: PUSH
48837: LD_INT 0
48839: ST_TO_ADDR
// sRefresh := false ;
48840: LD_ADDR_EXP 116
48844: PUSH
48845: LD_INT 0
48847: ST_TO_ADDR
// sExp := false ;
48848: LD_ADDR_EXP 117
48852: PUSH
48853: LD_INT 0
48855: ST_TO_ADDR
// sDepot := false ;
48856: LD_ADDR_EXP 118
48860: PUSH
48861: LD_INT 0
48863: ST_TO_ADDR
// sFlag := false ;
48864: LD_ADDR_EXP 119
48868: PUSH
48869: LD_INT 0
48871: ST_TO_ADDR
// sKamikadze := false ;
48872: LD_ADDR_EXP 127
48876: PUSH
48877: LD_INT 0
48879: ST_TO_ADDR
// sTroll := false ;
48880: LD_ADDR_EXP 128
48884: PUSH
48885: LD_INT 0
48887: ST_TO_ADDR
// sSlow := false ;
48888: LD_ADDR_EXP 129
48892: PUSH
48893: LD_INT 0
48895: ST_TO_ADDR
// sLack := false ;
48896: LD_ADDR_EXP 130
48900: PUSH
48901: LD_INT 0
48903: ST_TO_ADDR
// sTank := false ;
48904: LD_ADDR_EXP 132
48908: PUSH
48909: LD_INT 0
48911: ST_TO_ADDR
// sRemote := false ;
48912: LD_ADDR_EXP 133
48916: PUSH
48917: LD_INT 0
48919: ST_TO_ADDR
// sPowell := false ;
48920: LD_ADDR_EXP 134
48924: PUSH
48925: LD_INT 0
48927: ST_TO_ADDR
// sTeleport := false ;
48928: LD_ADDR_EXP 137
48932: PUSH
48933: LD_INT 0
48935: ST_TO_ADDR
// sOilTower := false ;
48936: LD_ADDR_EXP 139
48940: PUSH
48941: LD_INT 0
48943: ST_TO_ADDR
// sShovel := false ;
48944: LD_ADDR_EXP 140
48948: PUSH
48949: LD_INT 0
48951: ST_TO_ADDR
// sSheik := false ;
48952: LD_ADDR_EXP 141
48956: PUSH
48957: LD_INT 0
48959: ST_TO_ADDR
// sEarthquake := false ;
48960: LD_ADDR_EXP 143
48964: PUSH
48965: LD_INT 0
48967: ST_TO_ADDR
// sAI := false ;
48968: LD_ADDR_EXP 144
48972: PUSH
48973: LD_INT 0
48975: ST_TO_ADDR
// sCargo := false ;
48976: LD_ADDR_EXP 147
48980: PUSH
48981: LD_INT 0
48983: ST_TO_ADDR
// sDLaser := false ;
48984: LD_ADDR_EXP 148
48988: PUSH
48989: LD_INT 0
48991: ST_TO_ADDR
// sExchange := false ;
48992: LD_ADDR_EXP 149
48996: PUSH
48997: LD_INT 0
48999: ST_TO_ADDR
// sFac := false ;
49000: LD_ADDR_EXP 150
49004: PUSH
49005: LD_INT 0
49007: ST_TO_ADDR
// sPower := false ;
49008: LD_ADDR_EXP 151
49012: PUSH
49013: LD_INT 0
49015: ST_TO_ADDR
// sRandom := false ;
49016: LD_ADDR_EXP 152
49020: PUSH
49021: LD_INT 0
49023: ST_TO_ADDR
// sShield := false ;
49024: LD_ADDR_EXP 153
49028: PUSH
49029: LD_INT 0
49031: ST_TO_ADDR
// sTime := false ;
49032: LD_ADDR_EXP 154
49036: PUSH
49037: LD_INT 0
49039: ST_TO_ADDR
// sTools := false ;
49040: LD_ADDR_EXP 155
49044: PUSH
49045: LD_INT 0
49047: ST_TO_ADDR
// sSold := false ;
49048: LD_ADDR_EXP 120
49052: PUSH
49053: LD_INT 0
49055: ST_TO_ADDR
// sDiff := false ;
49056: LD_ADDR_EXP 121
49060: PUSH
49061: LD_INT 0
49063: ST_TO_ADDR
// sFog := false ;
49064: LD_ADDR_EXP 124
49068: PUSH
49069: LD_INT 0
49071: ST_TO_ADDR
// sReset := false ;
49072: LD_ADDR_EXP 125
49076: PUSH
49077: LD_INT 0
49079: ST_TO_ADDR
// sSun := false ;
49080: LD_ADDR_EXP 126
49084: PUSH
49085: LD_INT 0
49087: ST_TO_ADDR
// sTiger := false ;
49088: LD_ADDR_EXP 122
49092: PUSH
49093: LD_INT 0
49095: ST_TO_ADDR
// sBomb := false ;
49096: LD_ADDR_EXP 123
49100: PUSH
49101: LD_INT 0
49103: ST_TO_ADDR
// sWound := false ;
49104: LD_ADDR_EXP 131
49108: PUSH
49109: LD_INT 0
49111: ST_TO_ADDR
// sBetray := false ;
49112: LD_ADDR_EXP 135
49116: PUSH
49117: LD_INT 0
49119: ST_TO_ADDR
// sContamin := false ;
49120: LD_ADDR_EXP 136
49124: PUSH
49125: LD_INT 0
49127: ST_TO_ADDR
// sOil := false ;
49128: LD_ADDR_EXP 138
49132: PUSH
49133: LD_INT 0
49135: ST_TO_ADDR
// sStu := false ;
49136: LD_ADDR_EXP 142
49140: PUSH
49141: LD_INT 0
49143: ST_TO_ADDR
// sBazooka := false ;
49144: LD_ADDR_EXP 145
49148: PUSH
49149: LD_INT 0
49151: ST_TO_ADDR
// sMortar := false ;
49152: LD_ADDR_EXP 146
49156: PUSH
49157: LD_INT 0
49159: ST_TO_ADDR
// sRanger := false ;
49160: LD_ADDR_EXP 156
49164: PUSH
49165: LD_INT 0
49167: ST_TO_ADDR
// sComputer := false ;
49168: LD_ADDR_EXP 157
49172: PUSH
49173: LD_INT 0
49175: ST_TO_ADDR
// s30 := false ;
49176: LD_ADDR_EXP 158
49180: PUSH
49181: LD_INT 0
49183: ST_TO_ADDR
// s60 := false ;
49184: LD_ADDR_EXP 159
49188: PUSH
49189: LD_INT 0
49191: ST_TO_ADDR
// end ;
49192: LD_VAR 0 1
49196: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49197: LD_INT 0
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
49205: PPUSH
// result := [ ] ;
49206: LD_ADDR_VAR 0 2
49210: PUSH
49211: EMPTY
49212: ST_TO_ADDR
// if campaign_id = 1 then
49213: LD_OWVAR 69
49217: PUSH
49218: LD_INT 1
49220: EQUAL
49221: IFFALSE 52387
// begin case mission_number of 1 :
49223: LD_OWVAR 70
49227: PUSH
49228: LD_INT 1
49230: DOUBLE
49231: EQUAL
49232: IFTRUE 49236
49234: GO 49312
49236: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49237: LD_ADDR_VAR 0 2
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 4
49247: PUSH
49248: LD_INT 11
49250: PUSH
49251: LD_INT 12
49253: PUSH
49254: LD_INT 15
49256: PUSH
49257: LD_INT 16
49259: PUSH
49260: LD_INT 22
49262: PUSH
49263: LD_INT 23
49265: PUSH
49266: LD_INT 26
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 101
49282: PUSH
49283: LD_INT 102
49285: PUSH
49286: LD_INT 106
49288: PUSH
49289: LD_INT 116
49291: PUSH
49292: LD_INT 117
49294: PUSH
49295: LD_INT 118
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: ST_TO_ADDR
49310: GO 52385
49312: LD_INT 2
49314: DOUBLE
49315: EQUAL
49316: IFTRUE 49320
49318: GO 49404
49320: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49321: LD_ADDR_VAR 0 2
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: LD_INT 4
49331: PUSH
49332: LD_INT 11
49334: PUSH
49335: LD_INT 12
49337: PUSH
49338: LD_INT 15
49340: PUSH
49341: LD_INT 16
49343: PUSH
49344: LD_INT 22
49346: PUSH
49347: LD_INT 23
49349: PUSH
49350: LD_INT 26
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 101
49366: PUSH
49367: LD_INT 102
49369: PUSH
49370: LD_INT 105
49372: PUSH
49373: LD_INT 106
49375: PUSH
49376: LD_INT 108
49378: PUSH
49379: LD_INT 116
49381: PUSH
49382: LD_INT 117
49384: PUSH
49385: LD_INT 118
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: ST_TO_ADDR
49402: GO 52385
49404: LD_INT 3
49406: DOUBLE
49407: EQUAL
49408: IFTRUE 49412
49410: GO 49500
49412: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49413: LD_ADDR_VAR 0 2
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 4
49423: PUSH
49424: LD_INT 5
49426: PUSH
49427: LD_INT 11
49429: PUSH
49430: LD_INT 12
49432: PUSH
49433: LD_INT 15
49435: PUSH
49436: LD_INT 16
49438: PUSH
49439: LD_INT 22
49441: PUSH
49442: LD_INT 26
49444: PUSH
49445: LD_INT 36
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 101
49462: PUSH
49463: LD_INT 102
49465: PUSH
49466: LD_INT 105
49468: PUSH
49469: LD_INT 106
49471: PUSH
49472: LD_INT 108
49474: PUSH
49475: LD_INT 116
49477: PUSH
49478: LD_INT 117
49480: PUSH
49481: LD_INT 118
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: ST_TO_ADDR
49498: GO 52385
49500: LD_INT 4
49502: DOUBLE
49503: EQUAL
49504: IFTRUE 49508
49506: GO 49604
49508: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49509: LD_ADDR_VAR 0 2
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 4
49519: PUSH
49520: LD_INT 5
49522: PUSH
49523: LD_INT 8
49525: PUSH
49526: LD_INT 11
49528: PUSH
49529: LD_INT 12
49531: PUSH
49532: LD_INT 15
49534: PUSH
49535: LD_INT 16
49537: PUSH
49538: LD_INT 22
49540: PUSH
49541: LD_INT 23
49543: PUSH
49544: LD_INT 26
49546: PUSH
49547: LD_INT 36
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 101
49566: PUSH
49567: LD_INT 102
49569: PUSH
49570: LD_INT 105
49572: PUSH
49573: LD_INT 106
49575: PUSH
49576: LD_INT 108
49578: PUSH
49579: LD_INT 116
49581: PUSH
49582: LD_INT 117
49584: PUSH
49585: LD_INT 118
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: ST_TO_ADDR
49602: GO 52385
49604: LD_INT 5
49606: DOUBLE
49607: EQUAL
49608: IFTRUE 49612
49610: GO 49724
49612: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
49613: LD_ADDR_VAR 0 2
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: LD_INT 5
49626: PUSH
49627: LD_INT 6
49629: PUSH
49630: LD_INT 8
49632: PUSH
49633: LD_INT 11
49635: PUSH
49636: LD_INT 12
49638: PUSH
49639: LD_INT 15
49641: PUSH
49642: LD_INT 16
49644: PUSH
49645: LD_INT 22
49647: PUSH
49648: LD_INT 23
49650: PUSH
49651: LD_INT 25
49653: PUSH
49654: LD_INT 26
49656: PUSH
49657: LD_INT 36
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 101
49678: PUSH
49679: LD_INT 102
49681: PUSH
49682: LD_INT 105
49684: PUSH
49685: LD_INT 106
49687: PUSH
49688: LD_INT 108
49690: PUSH
49691: LD_INT 109
49693: PUSH
49694: LD_INT 112
49696: PUSH
49697: LD_INT 116
49699: PUSH
49700: LD_INT 117
49702: PUSH
49703: LD_INT 118
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: ST_TO_ADDR
49722: GO 52385
49724: LD_INT 6
49726: DOUBLE
49727: EQUAL
49728: IFTRUE 49732
49730: GO 49864
49732: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
49733: LD_ADDR_VAR 0 2
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 4
49743: PUSH
49744: LD_INT 5
49746: PUSH
49747: LD_INT 6
49749: PUSH
49750: LD_INT 8
49752: PUSH
49753: LD_INT 11
49755: PUSH
49756: LD_INT 12
49758: PUSH
49759: LD_INT 15
49761: PUSH
49762: LD_INT 16
49764: PUSH
49765: LD_INT 20
49767: PUSH
49768: LD_INT 21
49770: PUSH
49771: LD_INT 22
49773: PUSH
49774: LD_INT 23
49776: PUSH
49777: LD_INT 25
49779: PUSH
49780: LD_INT 26
49782: PUSH
49783: LD_INT 30
49785: PUSH
49786: LD_INT 31
49788: PUSH
49789: LD_INT 32
49791: PUSH
49792: LD_INT 36
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 101
49818: PUSH
49819: LD_INT 102
49821: PUSH
49822: LD_INT 105
49824: PUSH
49825: LD_INT 106
49827: PUSH
49828: LD_INT 108
49830: PUSH
49831: LD_INT 109
49833: PUSH
49834: LD_INT 112
49836: PUSH
49837: LD_INT 116
49839: PUSH
49840: LD_INT 117
49842: PUSH
49843: LD_INT 118
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: ST_TO_ADDR
49862: GO 52385
49864: LD_INT 7
49866: DOUBLE
49867: EQUAL
49868: IFTRUE 49872
49870: GO 49984
49872: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
49873: LD_ADDR_VAR 0 2
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: LD_INT 5
49886: PUSH
49887: LD_INT 7
49889: PUSH
49890: LD_INT 11
49892: PUSH
49893: LD_INT 12
49895: PUSH
49896: LD_INT 15
49898: PUSH
49899: LD_INT 16
49901: PUSH
49902: LD_INT 20
49904: PUSH
49905: LD_INT 21
49907: PUSH
49908: LD_INT 22
49910: PUSH
49911: LD_INT 23
49913: PUSH
49914: LD_INT 25
49916: PUSH
49917: LD_INT 26
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 101
49938: PUSH
49939: LD_INT 102
49941: PUSH
49942: LD_INT 103
49944: PUSH
49945: LD_INT 105
49947: PUSH
49948: LD_INT 106
49950: PUSH
49951: LD_INT 108
49953: PUSH
49954: LD_INT 112
49956: PUSH
49957: LD_INT 116
49959: PUSH
49960: LD_INT 117
49962: PUSH
49963: LD_INT 118
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: ST_TO_ADDR
49982: GO 52385
49984: LD_INT 8
49986: DOUBLE
49987: EQUAL
49988: IFTRUE 49992
49990: GO 50132
49992: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
49993: LD_ADDR_VAR 0 2
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 4
50003: PUSH
50004: LD_INT 5
50006: PUSH
50007: LD_INT 6
50009: PUSH
50010: LD_INT 7
50012: PUSH
50013: LD_INT 8
50015: PUSH
50016: LD_INT 11
50018: PUSH
50019: LD_INT 12
50021: PUSH
50022: LD_INT 15
50024: PUSH
50025: LD_INT 16
50027: PUSH
50028: LD_INT 20
50030: PUSH
50031: LD_INT 21
50033: PUSH
50034: LD_INT 22
50036: PUSH
50037: LD_INT 23
50039: PUSH
50040: LD_INT 25
50042: PUSH
50043: LD_INT 26
50045: PUSH
50046: LD_INT 30
50048: PUSH
50049: LD_INT 31
50051: PUSH
50052: LD_INT 32
50054: PUSH
50055: LD_INT 36
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 101
50082: PUSH
50083: LD_INT 102
50085: PUSH
50086: LD_INT 103
50088: PUSH
50089: LD_INT 105
50091: PUSH
50092: LD_INT 106
50094: PUSH
50095: LD_INT 108
50097: PUSH
50098: LD_INT 109
50100: PUSH
50101: LD_INT 112
50103: PUSH
50104: LD_INT 116
50106: PUSH
50107: LD_INT 117
50109: PUSH
50110: LD_INT 118
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: ST_TO_ADDR
50130: GO 52385
50132: LD_INT 9
50134: DOUBLE
50135: EQUAL
50136: IFTRUE 50140
50138: GO 50288
50140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50141: LD_ADDR_VAR 0 2
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 4
50151: PUSH
50152: LD_INT 5
50154: PUSH
50155: LD_INT 6
50157: PUSH
50158: LD_INT 7
50160: PUSH
50161: LD_INT 8
50163: PUSH
50164: LD_INT 11
50166: PUSH
50167: LD_INT 12
50169: PUSH
50170: LD_INT 15
50172: PUSH
50173: LD_INT 16
50175: PUSH
50176: LD_INT 20
50178: PUSH
50179: LD_INT 21
50181: PUSH
50182: LD_INT 22
50184: PUSH
50185: LD_INT 23
50187: PUSH
50188: LD_INT 25
50190: PUSH
50191: LD_INT 26
50193: PUSH
50194: LD_INT 28
50196: PUSH
50197: LD_INT 30
50199: PUSH
50200: LD_INT 31
50202: PUSH
50203: LD_INT 32
50205: PUSH
50206: LD_INT 36
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 101
50234: PUSH
50235: LD_INT 102
50237: PUSH
50238: LD_INT 103
50240: PUSH
50241: LD_INT 105
50243: PUSH
50244: LD_INT 106
50246: PUSH
50247: LD_INT 108
50249: PUSH
50250: LD_INT 109
50252: PUSH
50253: LD_INT 112
50255: PUSH
50256: LD_INT 114
50258: PUSH
50259: LD_INT 116
50261: PUSH
50262: LD_INT 117
50264: PUSH
50265: LD_INT 118
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: ST_TO_ADDR
50286: GO 52385
50288: LD_INT 10
50290: DOUBLE
50291: EQUAL
50292: IFTRUE 50296
50294: GO 50492
50296: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50297: LD_ADDR_VAR 0 2
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 5
50310: PUSH
50311: LD_INT 6
50313: PUSH
50314: LD_INT 7
50316: PUSH
50317: LD_INT 8
50319: PUSH
50320: LD_INT 9
50322: PUSH
50323: LD_INT 10
50325: PUSH
50326: LD_INT 11
50328: PUSH
50329: LD_INT 12
50331: PUSH
50332: LD_INT 13
50334: PUSH
50335: LD_INT 14
50337: PUSH
50338: LD_INT 15
50340: PUSH
50341: LD_INT 16
50343: PUSH
50344: LD_INT 17
50346: PUSH
50347: LD_INT 18
50349: PUSH
50350: LD_INT 19
50352: PUSH
50353: LD_INT 20
50355: PUSH
50356: LD_INT 21
50358: PUSH
50359: LD_INT 22
50361: PUSH
50362: LD_INT 23
50364: PUSH
50365: LD_INT 24
50367: PUSH
50368: LD_INT 25
50370: PUSH
50371: LD_INT 26
50373: PUSH
50374: LD_INT 28
50376: PUSH
50377: LD_INT 30
50379: PUSH
50380: LD_INT 31
50382: PUSH
50383: LD_INT 32
50385: PUSH
50386: LD_INT 36
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 101
50422: PUSH
50423: LD_INT 102
50425: PUSH
50426: LD_INT 103
50428: PUSH
50429: LD_INT 104
50431: PUSH
50432: LD_INT 105
50434: PUSH
50435: LD_INT 106
50437: PUSH
50438: LD_INT 107
50440: PUSH
50441: LD_INT 108
50443: PUSH
50444: LD_INT 109
50446: PUSH
50447: LD_INT 110
50449: PUSH
50450: LD_INT 111
50452: PUSH
50453: LD_INT 112
50455: PUSH
50456: LD_INT 114
50458: PUSH
50459: LD_INT 116
50461: PUSH
50462: LD_INT 117
50464: PUSH
50465: LD_INT 118
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: ST_TO_ADDR
50490: GO 52385
50492: LD_INT 11
50494: DOUBLE
50495: EQUAL
50496: IFTRUE 50500
50498: GO 50704
50500: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50501: LD_ADDR_VAR 0 2
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: LD_INT 4
50514: PUSH
50515: LD_INT 5
50517: PUSH
50518: LD_INT 6
50520: PUSH
50521: LD_INT 7
50523: PUSH
50524: LD_INT 8
50526: PUSH
50527: LD_INT 9
50529: PUSH
50530: LD_INT 10
50532: PUSH
50533: LD_INT 11
50535: PUSH
50536: LD_INT 12
50538: PUSH
50539: LD_INT 13
50541: PUSH
50542: LD_INT 14
50544: PUSH
50545: LD_INT 15
50547: PUSH
50548: LD_INT 16
50550: PUSH
50551: LD_INT 17
50553: PUSH
50554: LD_INT 18
50556: PUSH
50557: LD_INT 19
50559: PUSH
50560: LD_INT 20
50562: PUSH
50563: LD_INT 21
50565: PUSH
50566: LD_INT 22
50568: PUSH
50569: LD_INT 23
50571: PUSH
50572: LD_INT 24
50574: PUSH
50575: LD_INT 25
50577: PUSH
50578: LD_INT 26
50580: PUSH
50581: LD_INT 28
50583: PUSH
50584: LD_INT 30
50586: PUSH
50587: LD_INT 31
50589: PUSH
50590: LD_INT 32
50592: PUSH
50593: LD_INT 34
50595: PUSH
50596: LD_INT 36
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 101
50634: PUSH
50635: LD_INT 102
50637: PUSH
50638: LD_INT 103
50640: PUSH
50641: LD_INT 104
50643: PUSH
50644: LD_INT 105
50646: PUSH
50647: LD_INT 106
50649: PUSH
50650: LD_INT 107
50652: PUSH
50653: LD_INT 108
50655: PUSH
50656: LD_INT 109
50658: PUSH
50659: LD_INT 110
50661: PUSH
50662: LD_INT 111
50664: PUSH
50665: LD_INT 112
50667: PUSH
50668: LD_INT 114
50670: PUSH
50671: LD_INT 116
50673: PUSH
50674: LD_INT 117
50676: PUSH
50677: LD_INT 118
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: ST_TO_ADDR
50702: GO 52385
50704: LD_INT 12
50706: DOUBLE
50707: EQUAL
50708: IFTRUE 50712
50710: GO 50932
50712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
50713: LD_ADDR_VAR 0 2
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: LD_INT 3
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: LD_INT 5
50732: PUSH
50733: LD_INT 6
50735: PUSH
50736: LD_INT 7
50738: PUSH
50739: LD_INT 8
50741: PUSH
50742: LD_INT 9
50744: PUSH
50745: LD_INT 10
50747: PUSH
50748: LD_INT 11
50750: PUSH
50751: LD_INT 12
50753: PUSH
50754: LD_INT 13
50756: PUSH
50757: LD_INT 14
50759: PUSH
50760: LD_INT 15
50762: PUSH
50763: LD_INT 16
50765: PUSH
50766: LD_INT 17
50768: PUSH
50769: LD_INT 18
50771: PUSH
50772: LD_INT 19
50774: PUSH
50775: LD_INT 20
50777: PUSH
50778: LD_INT 21
50780: PUSH
50781: LD_INT 22
50783: PUSH
50784: LD_INT 23
50786: PUSH
50787: LD_INT 24
50789: PUSH
50790: LD_INT 25
50792: PUSH
50793: LD_INT 26
50795: PUSH
50796: LD_INT 27
50798: PUSH
50799: LD_INT 28
50801: PUSH
50802: LD_INT 30
50804: PUSH
50805: LD_INT 31
50807: PUSH
50808: LD_INT 32
50810: PUSH
50811: LD_INT 33
50813: PUSH
50814: LD_INT 34
50816: PUSH
50817: LD_INT 36
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 101
50858: PUSH
50859: LD_INT 102
50861: PUSH
50862: LD_INT 103
50864: PUSH
50865: LD_INT 104
50867: PUSH
50868: LD_INT 105
50870: PUSH
50871: LD_INT 106
50873: PUSH
50874: LD_INT 107
50876: PUSH
50877: LD_INT 108
50879: PUSH
50880: LD_INT 109
50882: PUSH
50883: LD_INT 110
50885: PUSH
50886: LD_INT 111
50888: PUSH
50889: LD_INT 112
50891: PUSH
50892: LD_INT 113
50894: PUSH
50895: LD_INT 114
50897: PUSH
50898: LD_INT 116
50900: PUSH
50901: LD_INT 117
50903: PUSH
50904: LD_INT 118
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: ST_TO_ADDR
50930: GO 52385
50932: LD_INT 13
50934: DOUBLE
50935: EQUAL
50936: IFTRUE 50940
50938: GO 51148
50940: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
50941: LD_ADDR_VAR 0 2
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: LD_INT 4
50957: PUSH
50958: LD_INT 5
50960: PUSH
50961: LD_INT 8
50963: PUSH
50964: LD_INT 9
50966: PUSH
50967: LD_INT 10
50969: PUSH
50970: LD_INT 11
50972: PUSH
50973: LD_INT 12
50975: PUSH
50976: LD_INT 14
50978: PUSH
50979: LD_INT 15
50981: PUSH
50982: LD_INT 16
50984: PUSH
50985: LD_INT 17
50987: PUSH
50988: LD_INT 18
50990: PUSH
50991: LD_INT 19
50993: PUSH
50994: LD_INT 20
50996: PUSH
50997: LD_INT 21
50999: PUSH
51000: LD_INT 22
51002: PUSH
51003: LD_INT 23
51005: PUSH
51006: LD_INT 24
51008: PUSH
51009: LD_INT 25
51011: PUSH
51012: LD_INT 26
51014: PUSH
51015: LD_INT 27
51017: PUSH
51018: LD_INT 28
51020: PUSH
51021: LD_INT 30
51023: PUSH
51024: LD_INT 31
51026: PUSH
51027: LD_INT 32
51029: PUSH
51030: LD_INT 33
51032: PUSH
51033: LD_INT 34
51035: PUSH
51036: LD_INT 36
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 101
51074: PUSH
51075: LD_INT 102
51077: PUSH
51078: LD_INT 103
51080: PUSH
51081: LD_INT 104
51083: PUSH
51084: LD_INT 105
51086: PUSH
51087: LD_INT 106
51089: PUSH
51090: LD_INT 107
51092: PUSH
51093: LD_INT 108
51095: PUSH
51096: LD_INT 109
51098: PUSH
51099: LD_INT 110
51101: PUSH
51102: LD_INT 111
51104: PUSH
51105: LD_INT 112
51107: PUSH
51108: LD_INT 113
51110: PUSH
51111: LD_INT 114
51113: PUSH
51114: LD_INT 116
51116: PUSH
51117: LD_INT 117
51119: PUSH
51120: LD_INT 118
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: ST_TO_ADDR
51146: GO 52385
51148: LD_INT 14
51150: DOUBLE
51151: EQUAL
51152: IFTRUE 51156
51154: GO 51380
51156: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51157: LD_ADDR_VAR 0 2
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: LD_INT 6
51179: PUSH
51180: LD_INT 7
51182: PUSH
51183: LD_INT 8
51185: PUSH
51186: LD_INT 9
51188: PUSH
51189: LD_INT 10
51191: PUSH
51192: LD_INT 11
51194: PUSH
51195: LD_INT 12
51197: PUSH
51198: LD_INT 13
51200: PUSH
51201: LD_INT 14
51203: PUSH
51204: LD_INT 15
51206: PUSH
51207: LD_INT 16
51209: PUSH
51210: LD_INT 17
51212: PUSH
51213: LD_INT 18
51215: PUSH
51216: LD_INT 19
51218: PUSH
51219: LD_INT 20
51221: PUSH
51222: LD_INT 21
51224: PUSH
51225: LD_INT 22
51227: PUSH
51228: LD_INT 23
51230: PUSH
51231: LD_INT 24
51233: PUSH
51234: LD_INT 25
51236: PUSH
51237: LD_INT 26
51239: PUSH
51240: LD_INT 27
51242: PUSH
51243: LD_INT 28
51245: PUSH
51246: LD_INT 29
51248: PUSH
51249: LD_INT 30
51251: PUSH
51252: LD_INT 31
51254: PUSH
51255: LD_INT 32
51257: PUSH
51258: LD_INT 33
51260: PUSH
51261: LD_INT 34
51263: PUSH
51264: LD_INT 36
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 101
51306: PUSH
51307: LD_INT 102
51309: PUSH
51310: LD_INT 103
51312: PUSH
51313: LD_INT 104
51315: PUSH
51316: LD_INT 105
51318: PUSH
51319: LD_INT 106
51321: PUSH
51322: LD_INT 107
51324: PUSH
51325: LD_INT 108
51327: PUSH
51328: LD_INT 109
51330: PUSH
51331: LD_INT 110
51333: PUSH
51334: LD_INT 111
51336: PUSH
51337: LD_INT 112
51339: PUSH
51340: LD_INT 113
51342: PUSH
51343: LD_INT 114
51345: PUSH
51346: LD_INT 116
51348: PUSH
51349: LD_INT 117
51351: PUSH
51352: LD_INT 118
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: ST_TO_ADDR
51378: GO 52385
51380: LD_INT 15
51382: DOUBLE
51383: EQUAL
51384: IFTRUE 51388
51386: GO 51612
51388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51389: LD_ADDR_VAR 0 2
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 3
51402: PUSH
51403: LD_INT 4
51405: PUSH
51406: LD_INT 5
51408: PUSH
51409: LD_INT 6
51411: PUSH
51412: LD_INT 7
51414: PUSH
51415: LD_INT 8
51417: PUSH
51418: LD_INT 9
51420: PUSH
51421: LD_INT 10
51423: PUSH
51424: LD_INT 11
51426: PUSH
51427: LD_INT 12
51429: PUSH
51430: LD_INT 13
51432: PUSH
51433: LD_INT 14
51435: PUSH
51436: LD_INT 15
51438: PUSH
51439: LD_INT 16
51441: PUSH
51442: LD_INT 17
51444: PUSH
51445: LD_INT 18
51447: PUSH
51448: LD_INT 19
51450: PUSH
51451: LD_INT 20
51453: PUSH
51454: LD_INT 21
51456: PUSH
51457: LD_INT 22
51459: PUSH
51460: LD_INT 23
51462: PUSH
51463: LD_INT 24
51465: PUSH
51466: LD_INT 25
51468: PUSH
51469: LD_INT 26
51471: PUSH
51472: LD_INT 27
51474: PUSH
51475: LD_INT 28
51477: PUSH
51478: LD_INT 29
51480: PUSH
51481: LD_INT 30
51483: PUSH
51484: LD_INT 31
51486: PUSH
51487: LD_INT 32
51489: PUSH
51490: LD_INT 33
51492: PUSH
51493: LD_INT 34
51495: PUSH
51496: LD_INT 36
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 101
51538: PUSH
51539: LD_INT 102
51541: PUSH
51542: LD_INT 103
51544: PUSH
51545: LD_INT 104
51547: PUSH
51548: LD_INT 105
51550: PUSH
51551: LD_INT 106
51553: PUSH
51554: LD_INT 107
51556: PUSH
51557: LD_INT 108
51559: PUSH
51560: LD_INT 109
51562: PUSH
51563: LD_INT 110
51565: PUSH
51566: LD_INT 111
51568: PUSH
51569: LD_INT 112
51571: PUSH
51572: LD_INT 113
51574: PUSH
51575: LD_INT 114
51577: PUSH
51578: LD_INT 116
51580: PUSH
51581: LD_INT 117
51583: PUSH
51584: LD_INT 118
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: ST_TO_ADDR
51610: GO 52385
51612: LD_INT 16
51614: DOUBLE
51615: EQUAL
51616: IFTRUE 51620
51618: GO 51756
51620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
51621: LD_ADDR_VAR 0 2
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 4
51631: PUSH
51632: LD_INT 5
51634: PUSH
51635: LD_INT 7
51637: PUSH
51638: LD_INT 11
51640: PUSH
51641: LD_INT 12
51643: PUSH
51644: LD_INT 15
51646: PUSH
51647: LD_INT 16
51649: PUSH
51650: LD_INT 20
51652: PUSH
51653: LD_INT 21
51655: PUSH
51656: LD_INT 22
51658: PUSH
51659: LD_INT 23
51661: PUSH
51662: LD_INT 25
51664: PUSH
51665: LD_INT 26
51667: PUSH
51668: LD_INT 30
51670: PUSH
51671: LD_INT 31
51673: PUSH
51674: LD_INT 32
51676: PUSH
51677: LD_INT 33
51679: PUSH
51680: LD_INT 34
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 101
51706: PUSH
51707: LD_INT 102
51709: PUSH
51710: LD_INT 103
51712: PUSH
51713: LD_INT 106
51715: PUSH
51716: LD_INT 108
51718: PUSH
51719: LD_INT 112
51721: PUSH
51722: LD_INT 113
51724: PUSH
51725: LD_INT 114
51727: PUSH
51728: LD_INT 116
51730: PUSH
51731: LD_INT 117
51733: PUSH
51734: LD_INT 118
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: ST_TO_ADDR
51754: GO 52385
51756: LD_INT 17
51758: DOUBLE
51759: EQUAL
51760: IFTRUE 51764
51762: GO 51988
51764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
51765: LD_ADDR_VAR 0 2
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: LD_INT 3
51778: PUSH
51779: LD_INT 4
51781: PUSH
51782: LD_INT 5
51784: PUSH
51785: LD_INT 6
51787: PUSH
51788: LD_INT 7
51790: PUSH
51791: LD_INT 8
51793: PUSH
51794: LD_INT 9
51796: PUSH
51797: LD_INT 10
51799: PUSH
51800: LD_INT 11
51802: PUSH
51803: LD_INT 12
51805: PUSH
51806: LD_INT 13
51808: PUSH
51809: LD_INT 14
51811: PUSH
51812: LD_INT 15
51814: PUSH
51815: LD_INT 16
51817: PUSH
51818: LD_INT 17
51820: PUSH
51821: LD_INT 18
51823: PUSH
51824: LD_INT 19
51826: PUSH
51827: LD_INT 20
51829: PUSH
51830: LD_INT 21
51832: PUSH
51833: LD_INT 22
51835: PUSH
51836: LD_INT 23
51838: PUSH
51839: LD_INT 24
51841: PUSH
51842: LD_INT 25
51844: PUSH
51845: LD_INT 26
51847: PUSH
51848: LD_INT 27
51850: PUSH
51851: LD_INT 28
51853: PUSH
51854: LD_INT 29
51856: PUSH
51857: LD_INT 30
51859: PUSH
51860: LD_INT 31
51862: PUSH
51863: LD_INT 32
51865: PUSH
51866: LD_INT 33
51868: PUSH
51869: LD_INT 34
51871: PUSH
51872: LD_INT 36
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 101
51914: PUSH
51915: LD_INT 102
51917: PUSH
51918: LD_INT 103
51920: PUSH
51921: LD_INT 104
51923: PUSH
51924: LD_INT 105
51926: PUSH
51927: LD_INT 106
51929: PUSH
51930: LD_INT 107
51932: PUSH
51933: LD_INT 108
51935: PUSH
51936: LD_INT 109
51938: PUSH
51939: LD_INT 110
51941: PUSH
51942: LD_INT 111
51944: PUSH
51945: LD_INT 112
51947: PUSH
51948: LD_INT 113
51950: PUSH
51951: LD_INT 114
51953: PUSH
51954: LD_INT 116
51956: PUSH
51957: LD_INT 117
51959: PUSH
51960: LD_INT 118
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: ST_TO_ADDR
51986: GO 52385
51988: LD_INT 18
51990: DOUBLE
51991: EQUAL
51992: IFTRUE 51996
51994: GO 52144
51996: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
51997: LD_ADDR_VAR 0 2
52001: PUSH
52002: LD_INT 2
52004: PUSH
52005: LD_INT 4
52007: PUSH
52008: LD_INT 5
52010: PUSH
52011: LD_INT 7
52013: PUSH
52014: LD_INT 11
52016: PUSH
52017: LD_INT 12
52019: PUSH
52020: LD_INT 15
52022: PUSH
52023: LD_INT 16
52025: PUSH
52026: LD_INT 20
52028: PUSH
52029: LD_INT 21
52031: PUSH
52032: LD_INT 22
52034: PUSH
52035: LD_INT 23
52037: PUSH
52038: LD_INT 25
52040: PUSH
52041: LD_INT 26
52043: PUSH
52044: LD_INT 30
52046: PUSH
52047: LD_INT 31
52049: PUSH
52050: LD_INT 32
52052: PUSH
52053: LD_INT 33
52055: PUSH
52056: LD_INT 34
52058: PUSH
52059: LD_INT 35
52061: PUSH
52062: LD_INT 36
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 101
52090: PUSH
52091: LD_INT 102
52093: PUSH
52094: LD_INT 103
52096: PUSH
52097: LD_INT 106
52099: PUSH
52100: LD_INT 108
52102: PUSH
52103: LD_INT 112
52105: PUSH
52106: LD_INT 113
52108: PUSH
52109: LD_INT 114
52111: PUSH
52112: LD_INT 115
52114: PUSH
52115: LD_INT 116
52117: PUSH
52118: LD_INT 117
52120: PUSH
52121: LD_INT 118
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: ST_TO_ADDR
52142: GO 52385
52144: LD_INT 19
52146: DOUBLE
52147: EQUAL
52148: IFTRUE 52152
52150: GO 52384
52152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52153: LD_ADDR_VAR 0 2
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: LD_INT 5
52172: PUSH
52173: LD_INT 6
52175: PUSH
52176: LD_INT 7
52178: PUSH
52179: LD_INT 8
52181: PUSH
52182: LD_INT 9
52184: PUSH
52185: LD_INT 10
52187: PUSH
52188: LD_INT 11
52190: PUSH
52191: LD_INT 12
52193: PUSH
52194: LD_INT 13
52196: PUSH
52197: LD_INT 14
52199: PUSH
52200: LD_INT 15
52202: PUSH
52203: LD_INT 16
52205: PUSH
52206: LD_INT 17
52208: PUSH
52209: LD_INT 18
52211: PUSH
52212: LD_INT 19
52214: PUSH
52215: LD_INT 20
52217: PUSH
52218: LD_INT 21
52220: PUSH
52221: LD_INT 22
52223: PUSH
52224: LD_INT 23
52226: PUSH
52227: LD_INT 24
52229: PUSH
52230: LD_INT 25
52232: PUSH
52233: LD_INT 26
52235: PUSH
52236: LD_INT 27
52238: PUSH
52239: LD_INT 28
52241: PUSH
52242: LD_INT 29
52244: PUSH
52245: LD_INT 30
52247: PUSH
52248: LD_INT 31
52250: PUSH
52251: LD_INT 32
52253: PUSH
52254: LD_INT 33
52256: PUSH
52257: LD_INT 34
52259: PUSH
52260: LD_INT 35
52262: PUSH
52263: LD_INT 36
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 101
52306: PUSH
52307: LD_INT 102
52309: PUSH
52310: LD_INT 103
52312: PUSH
52313: LD_INT 104
52315: PUSH
52316: LD_INT 105
52318: PUSH
52319: LD_INT 106
52321: PUSH
52322: LD_INT 107
52324: PUSH
52325: LD_INT 108
52327: PUSH
52328: LD_INT 109
52330: PUSH
52331: LD_INT 110
52333: PUSH
52334: LD_INT 111
52336: PUSH
52337: LD_INT 112
52339: PUSH
52340: LD_INT 113
52342: PUSH
52343: LD_INT 114
52345: PUSH
52346: LD_INT 115
52348: PUSH
52349: LD_INT 116
52351: PUSH
52352: LD_INT 117
52354: PUSH
52355: LD_INT 118
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: ST_TO_ADDR
52382: GO 52385
52384: POP
// end else
52385: GO 52616
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52387: LD_ADDR_VAR 0 2
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: LD_INT 4
52403: PUSH
52404: LD_INT 5
52406: PUSH
52407: LD_INT 6
52409: PUSH
52410: LD_INT 7
52412: PUSH
52413: LD_INT 8
52415: PUSH
52416: LD_INT 9
52418: PUSH
52419: LD_INT 10
52421: PUSH
52422: LD_INT 11
52424: PUSH
52425: LD_INT 12
52427: PUSH
52428: LD_INT 13
52430: PUSH
52431: LD_INT 14
52433: PUSH
52434: LD_INT 15
52436: PUSH
52437: LD_INT 16
52439: PUSH
52440: LD_INT 17
52442: PUSH
52443: LD_INT 18
52445: PUSH
52446: LD_INT 19
52448: PUSH
52449: LD_INT 20
52451: PUSH
52452: LD_INT 21
52454: PUSH
52455: LD_INT 22
52457: PUSH
52458: LD_INT 23
52460: PUSH
52461: LD_INT 24
52463: PUSH
52464: LD_INT 25
52466: PUSH
52467: LD_INT 26
52469: PUSH
52470: LD_INT 27
52472: PUSH
52473: LD_INT 28
52475: PUSH
52476: LD_INT 29
52478: PUSH
52479: LD_INT 30
52481: PUSH
52482: LD_INT 31
52484: PUSH
52485: LD_INT 32
52487: PUSH
52488: LD_INT 33
52490: PUSH
52491: LD_INT 34
52493: PUSH
52494: LD_INT 35
52496: PUSH
52497: LD_INT 36
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 101
52540: PUSH
52541: LD_INT 102
52543: PUSH
52544: LD_INT 103
52546: PUSH
52547: LD_INT 104
52549: PUSH
52550: LD_INT 105
52552: PUSH
52553: LD_INT 106
52555: PUSH
52556: LD_INT 107
52558: PUSH
52559: LD_INT 108
52561: PUSH
52562: LD_INT 109
52564: PUSH
52565: LD_INT 110
52567: PUSH
52568: LD_INT 111
52570: PUSH
52571: LD_INT 112
52573: PUSH
52574: LD_INT 113
52576: PUSH
52577: LD_INT 114
52579: PUSH
52580: LD_INT 115
52582: PUSH
52583: LD_INT 116
52585: PUSH
52586: LD_INT 117
52588: PUSH
52589: LD_INT 118
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// if result then
52616: LD_VAR 0 2
52620: IFFALSE 53406
// begin normal :=  ;
52622: LD_ADDR_VAR 0 5
52626: PUSH
52627: LD_STRING 
52629: ST_TO_ADDR
// hardcore :=  ;
52630: LD_ADDR_VAR 0 6
52634: PUSH
52635: LD_STRING 
52637: ST_TO_ADDR
// active :=  ;
52638: LD_ADDR_VAR 0 7
52642: PUSH
52643: LD_STRING 
52645: ST_TO_ADDR
// for i = 1 to normalCounter do
52646: LD_ADDR_VAR 0 8
52650: PUSH
52651: DOUBLE
52652: LD_INT 1
52654: DEC
52655: ST_TO_ADDR
52656: LD_EXP 104
52660: PUSH
52661: FOR_TO
52662: IFFALSE 52763
// begin tmp := 0 ;
52664: LD_ADDR_VAR 0 3
52668: PUSH
52669: LD_STRING 0
52671: ST_TO_ADDR
// if result [ 1 ] then
52672: LD_VAR 0 2
52676: PUSH
52677: LD_INT 1
52679: ARRAY
52680: IFFALSE 52745
// if result [ 1 ] [ 1 ] = i then
52682: LD_VAR 0 2
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: PUSH
52691: LD_INT 1
52693: ARRAY
52694: PUSH
52695: LD_VAR 0 8
52699: EQUAL
52700: IFFALSE 52745
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
52702: LD_ADDR_VAR 0 2
52706: PUSH
52707: LD_VAR 0 2
52711: PPUSH
52712: LD_INT 1
52714: PPUSH
52715: LD_VAR 0 2
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: PPUSH
52724: LD_INT 1
52726: PPUSH
52727: CALL_OW 3
52731: PPUSH
52732: CALL_OW 1
52736: ST_TO_ADDR
// tmp := 1 ;
52737: LD_ADDR_VAR 0 3
52741: PUSH
52742: LD_STRING 1
52744: ST_TO_ADDR
// end ; normal := normal & tmp ;
52745: LD_ADDR_VAR 0 5
52749: PUSH
52750: LD_VAR 0 5
52754: PUSH
52755: LD_VAR 0 3
52759: STR
52760: ST_TO_ADDR
// end ;
52761: GO 52661
52763: POP
52764: POP
// for i = 1 to hardcoreCounter do
52765: LD_ADDR_VAR 0 8
52769: PUSH
52770: DOUBLE
52771: LD_INT 1
52773: DEC
52774: ST_TO_ADDR
52775: LD_EXP 105
52779: PUSH
52780: FOR_TO
52781: IFFALSE 52886
// begin tmp := 0 ;
52783: LD_ADDR_VAR 0 3
52787: PUSH
52788: LD_STRING 0
52790: ST_TO_ADDR
// if result [ 2 ] then
52791: LD_VAR 0 2
52795: PUSH
52796: LD_INT 2
52798: ARRAY
52799: IFFALSE 52868
// if result [ 2 ] [ 1 ] = 100 + i then
52801: LD_VAR 0 2
52805: PUSH
52806: LD_INT 2
52808: ARRAY
52809: PUSH
52810: LD_INT 1
52812: ARRAY
52813: PUSH
52814: LD_INT 100
52816: PUSH
52817: LD_VAR 0 8
52821: PLUS
52822: EQUAL
52823: IFFALSE 52868
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_VAR 0 2
52834: PPUSH
52835: LD_INT 2
52837: PPUSH
52838: LD_VAR 0 2
52842: PUSH
52843: LD_INT 2
52845: ARRAY
52846: PPUSH
52847: LD_INT 1
52849: PPUSH
52850: CALL_OW 3
52854: PPUSH
52855: CALL_OW 1
52859: ST_TO_ADDR
// tmp := 1 ;
52860: LD_ADDR_VAR 0 3
52864: PUSH
52865: LD_STRING 1
52867: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
52868: LD_ADDR_VAR 0 6
52872: PUSH
52873: LD_VAR 0 6
52877: PUSH
52878: LD_VAR 0 3
52882: STR
52883: ST_TO_ADDR
// end ;
52884: GO 52780
52886: POP
52887: POP
// if isGameLoad then
52888: LD_VAR 0 1
52892: IFFALSE 53367
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
52894: LD_ADDR_VAR 0 4
52898: PUSH
52899: LD_EXP 108
52903: PUSH
52904: LD_EXP 107
52908: PUSH
52909: LD_EXP 109
52913: PUSH
52914: LD_EXP 106
52918: PUSH
52919: LD_EXP 110
52923: PUSH
52924: LD_EXP 111
52928: PUSH
52929: LD_EXP 112
52933: PUSH
52934: LD_EXP 113
52938: PUSH
52939: LD_EXP 114
52943: PUSH
52944: LD_EXP 115
52948: PUSH
52949: LD_EXP 116
52953: PUSH
52954: LD_EXP 117
52958: PUSH
52959: LD_EXP 118
52963: PUSH
52964: LD_EXP 119
52968: PUSH
52969: LD_EXP 127
52973: PUSH
52974: LD_EXP 128
52978: PUSH
52979: LD_EXP 129
52983: PUSH
52984: LD_EXP 130
52988: PUSH
52989: LD_EXP 132
52993: PUSH
52994: LD_EXP 133
52998: PUSH
52999: LD_EXP 134
53003: PUSH
53004: LD_EXP 137
53008: PUSH
53009: LD_EXP 139
53013: PUSH
53014: LD_EXP 140
53018: PUSH
53019: LD_EXP 141
53023: PUSH
53024: LD_EXP 143
53028: PUSH
53029: LD_EXP 144
53033: PUSH
53034: LD_EXP 147
53038: PUSH
53039: LD_EXP 148
53043: PUSH
53044: LD_EXP 149
53048: PUSH
53049: LD_EXP 150
53053: PUSH
53054: LD_EXP 151
53058: PUSH
53059: LD_EXP 152
53063: PUSH
53064: LD_EXP 153
53068: PUSH
53069: LD_EXP 154
53073: PUSH
53074: LD_EXP 155
53078: PUSH
53079: LD_EXP 120
53083: PUSH
53084: LD_EXP 121
53088: PUSH
53089: LD_EXP 124
53093: PUSH
53094: LD_EXP 125
53098: PUSH
53099: LD_EXP 126
53103: PUSH
53104: LD_EXP 122
53108: PUSH
53109: LD_EXP 123
53113: PUSH
53114: LD_EXP 131
53118: PUSH
53119: LD_EXP 135
53123: PUSH
53124: LD_EXP 136
53128: PUSH
53129: LD_EXP 138
53133: PUSH
53134: LD_EXP 142
53138: PUSH
53139: LD_EXP 145
53143: PUSH
53144: LD_EXP 146
53148: PUSH
53149: LD_EXP 156
53153: PUSH
53154: LD_EXP 157
53158: PUSH
53159: LD_EXP 158
53163: PUSH
53164: LD_EXP 159
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: ST_TO_ADDR
// tmp :=  ;
53225: LD_ADDR_VAR 0 3
53229: PUSH
53230: LD_STRING 
53232: ST_TO_ADDR
// for i = 1 to normalCounter do
53233: LD_ADDR_VAR 0 8
53237: PUSH
53238: DOUBLE
53239: LD_INT 1
53241: DEC
53242: ST_TO_ADDR
53243: LD_EXP 104
53247: PUSH
53248: FOR_TO
53249: IFFALSE 53285
// begin if flags [ i ] then
53251: LD_VAR 0 4
53255: PUSH
53256: LD_VAR 0 8
53260: ARRAY
53261: IFFALSE 53283
// tmp := tmp & i & ; ;
53263: LD_ADDR_VAR 0 3
53267: PUSH
53268: LD_VAR 0 3
53272: PUSH
53273: LD_VAR 0 8
53277: STR
53278: PUSH
53279: LD_STRING ;
53281: STR
53282: ST_TO_ADDR
// end ;
53283: GO 53248
53285: POP
53286: POP
// for i = 1 to hardcoreCounter do
53287: LD_ADDR_VAR 0 8
53291: PUSH
53292: DOUBLE
53293: LD_INT 1
53295: DEC
53296: ST_TO_ADDR
53297: LD_EXP 105
53301: PUSH
53302: FOR_TO
53303: IFFALSE 53349
// begin if flags [ normalCounter + i ] then
53305: LD_VAR 0 4
53309: PUSH
53310: LD_EXP 104
53314: PUSH
53315: LD_VAR 0 8
53319: PLUS
53320: ARRAY
53321: IFFALSE 53347
// tmp := tmp & ( 100 + i ) & ; ;
53323: LD_ADDR_VAR 0 3
53327: PUSH
53328: LD_VAR 0 3
53332: PUSH
53333: LD_INT 100
53335: PUSH
53336: LD_VAR 0 8
53340: PLUS
53341: STR
53342: PUSH
53343: LD_STRING ;
53345: STR
53346: ST_TO_ADDR
// end ;
53347: GO 53302
53349: POP
53350: POP
// if tmp then
53351: LD_VAR 0 3
53355: IFFALSE 53367
// active := tmp ;
53357: LD_ADDR_VAR 0 7
53361: PUSH
53362: LD_VAR 0 3
53366: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53367: LD_STRING getStreamItemsFromMission("
53369: PUSH
53370: LD_VAR 0 5
53374: STR
53375: PUSH
53376: LD_STRING ","
53378: STR
53379: PUSH
53380: LD_VAR 0 6
53384: STR
53385: PUSH
53386: LD_STRING ","
53388: STR
53389: PUSH
53390: LD_VAR 0 7
53394: STR
53395: PUSH
53396: LD_STRING ")
53398: STR
53399: PPUSH
53400: CALL_OW 559
// end else
53404: GO 53413
// ToLua ( getStreamItemsFromMission("","","") ) ;
53406: LD_STRING getStreamItemsFromMission("","","")
53408: PPUSH
53409: CALL_OW 559
// end ;
53413: LD_VAR 0 2
53417: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53418: LD_EXP 103
53422: PUSH
53423: LD_EXP 108
53427: AND
53428: IFFALSE 53552
53430: GO 53432
53432: DISABLE
53433: LD_INT 0
53435: PPUSH
53436: PPUSH
// begin enable ;
53437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53438: LD_ADDR_VAR 0 2
53442: PUSH
53443: LD_INT 22
53445: PUSH
53446: LD_OWVAR 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 34
53460: PUSH
53461: LD_INT 7
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 34
53470: PUSH
53471: LD_INT 45
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 34
53480: PUSH
53481: LD_INT 28
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 34
53490: PUSH
53491: LD_INT 47
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PPUSH
53509: CALL_OW 69
53513: ST_TO_ADDR
// if not tmp then
53514: LD_VAR 0 2
53518: NOT
53519: IFFALSE 53523
// exit ;
53521: GO 53552
// for i in tmp do
53523: LD_ADDR_VAR 0 1
53527: PUSH
53528: LD_VAR 0 2
53532: PUSH
53533: FOR_IN
53534: IFFALSE 53550
// begin SetLives ( i , 0 ) ;
53536: LD_VAR 0 1
53540: PPUSH
53541: LD_INT 0
53543: PPUSH
53544: CALL_OW 234
// end ;
53548: GO 53533
53550: POP
53551: POP
// end ;
53552: PPOPN 2
53554: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
53555: LD_EXP 103
53559: PUSH
53560: LD_EXP 109
53564: AND
53565: IFFALSE 53649
53567: GO 53569
53569: DISABLE
53570: LD_INT 0
53572: PPUSH
53573: PPUSH
// begin enable ;
53574: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
53575: LD_ADDR_VAR 0 2
53579: PUSH
53580: LD_INT 22
53582: PUSH
53583: LD_OWVAR 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 32
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PPUSH
53606: CALL_OW 69
53610: ST_TO_ADDR
// if not tmp then
53611: LD_VAR 0 2
53615: NOT
53616: IFFALSE 53620
// exit ;
53618: GO 53649
// for i in tmp do
53620: LD_ADDR_VAR 0 1
53624: PUSH
53625: LD_VAR 0 2
53629: PUSH
53630: FOR_IN
53631: IFFALSE 53647
// begin SetLives ( i , 0 ) ;
53633: LD_VAR 0 1
53637: PPUSH
53638: LD_INT 0
53640: PPUSH
53641: CALL_OW 234
// end ;
53645: GO 53630
53647: POP
53648: POP
// end ;
53649: PPOPN 2
53651: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
53652: LD_EXP 103
53656: PUSH
53657: LD_EXP 106
53661: AND
53662: IFFALSE 53755
53664: GO 53666
53666: DISABLE
53667: LD_INT 0
53669: PPUSH
// begin enable ;
53670: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
53671: LD_ADDR_VAR 0 1
53675: PUSH
53676: LD_INT 22
53678: PUSH
53679: LD_OWVAR 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 25
53693: PUSH
53694: LD_INT 5
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 25
53703: PUSH
53704: LD_INT 9
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 25
53713: PUSH
53714: LD_INT 8
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PPUSH
53731: CALL_OW 69
53735: PUSH
53736: FOR_IN
53737: IFFALSE 53753
// begin SetClass ( i , 1 ) ;
53739: LD_VAR 0 1
53743: PPUSH
53744: LD_INT 1
53746: PPUSH
53747: CALL_OW 336
// end ;
53751: GO 53736
53753: POP
53754: POP
// end ;
53755: PPOPN 1
53757: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
53758: LD_EXP 103
53762: PUSH
53763: LD_EXP 107
53767: AND
53768: PUSH
53769: LD_OWVAR 65
53773: PUSH
53774: LD_INT 7
53776: LESS
53777: AND
53778: IFFALSE 53792
53780: GO 53782
53782: DISABLE
// begin enable ;
53783: ENABLE
// game_speed := 7 ;
53784: LD_ADDR_OWVAR 65
53788: PUSH
53789: LD_INT 7
53791: ST_TO_ADDR
// end ;
53792: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
53793: LD_EXP 103
53797: PUSH
53798: LD_EXP 110
53802: AND
53803: IFFALSE 54005
53805: GO 53807
53807: DISABLE
53808: LD_INT 0
53810: PPUSH
53811: PPUSH
53812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53813: LD_ADDR_VAR 0 3
53817: PUSH
53818: LD_INT 81
53820: PUSH
53821: LD_OWVAR 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 21
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PPUSH
53844: CALL_OW 69
53848: ST_TO_ADDR
// if not tmp then
53849: LD_VAR 0 3
53853: NOT
53854: IFFALSE 53858
// exit ;
53856: GO 54005
// if tmp > 5 then
53858: LD_VAR 0 3
53862: PUSH
53863: LD_INT 5
53865: GREATER
53866: IFFALSE 53878
// k := 5 else
53868: LD_ADDR_VAR 0 2
53872: PUSH
53873: LD_INT 5
53875: ST_TO_ADDR
53876: GO 53888
// k := tmp ;
53878: LD_ADDR_VAR 0 2
53882: PUSH
53883: LD_VAR 0 3
53887: ST_TO_ADDR
// for i := 1 to k do
53888: LD_ADDR_VAR 0 1
53892: PUSH
53893: DOUBLE
53894: LD_INT 1
53896: DEC
53897: ST_TO_ADDR
53898: LD_VAR 0 2
53902: PUSH
53903: FOR_TO
53904: IFFALSE 54003
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
53906: LD_VAR 0 3
53910: PUSH
53911: LD_VAR 0 1
53915: ARRAY
53916: PPUSH
53917: LD_VAR 0 1
53921: PUSH
53922: LD_INT 4
53924: MOD
53925: PUSH
53926: LD_INT 1
53928: PLUS
53929: PPUSH
53930: CALL_OW 259
53934: PUSH
53935: LD_INT 10
53937: LESS
53938: IFFALSE 54001
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
53940: LD_VAR 0 3
53944: PUSH
53945: LD_VAR 0 1
53949: ARRAY
53950: PPUSH
53951: LD_VAR 0 1
53955: PUSH
53956: LD_INT 4
53958: MOD
53959: PUSH
53960: LD_INT 1
53962: PLUS
53963: PPUSH
53964: LD_VAR 0 3
53968: PUSH
53969: LD_VAR 0 1
53973: ARRAY
53974: PPUSH
53975: LD_VAR 0 1
53979: PUSH
53980: LD_INT 4
53982: MOD
53983: PUSH
53984: LD_INT 1
53986: PLUS
53987: PPUSH
53988: CALL_OW 259
53992: PUSH
53993: LD_INT 1
53995: PLUS
53996: PPUSH
53997: CALL_OW 237
54001: GO 53903
54003: POP
54004: POP
// end ;
54005: PPOPN 3
54007: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54008: LD_EXP 103
54012: PUSH
54013: LD_EXP 111
54017: AND
54018: IFFALSE 54038
54020: GO 54022
54022: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54023: LD_INT 4
54025: PPUSH
54026: LD_OWVAR 2
54030: PPUSH
54031: LD_INT 0
54033: PPUSH
54034: CALL_OW 324
54038: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54039: LD_EXP 103
54043: PUSH
54044: LD_EXP 140
54048: AND
54049: IFFALSE 54069
54051: GO 54053
54053: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54054: LD_INT 19
54056: PPUSH
54057: LD_OWVAR 2
54061: PPUSH
54062: LD_INT 0
54064: PPUSH
54065: CALL_OW 324
54069: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54070: LD_EXP 103
54074: PUSH
54075: LD_EXP 112
54079: AND
54080: IFFALSE 54182
54082: GO 54084
54084: DISABLE
54085: LD_INT 0
54087: PPUSH
54088: PPUSH
// begin enable ;
54089: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54090: LD_ADDR_VAR 0 2
54094: PUSH
54095: LD_INT 22
54097: PUSH
54098: LD_OWVAR 2
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: LD_INT 34
54112: PUSH
54113: LD_INT 11
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 34
54122: PUSH
54123: LD_INT 30
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PPUSH
54139: CALL_OW 69
54143: ST_TO_ADDR
// if not tmp then
54144: LD_VAR 0 2
54148: NOT
54149: IFFALSE 54153
// exit ;
54151: GO 54182
// for i in tmp do
54153: LD_ADDR_VAR 0 1
54157: PUSH
54158: LD_VAR 0 2
54162: PUSH
54163: FOR_IN
54164: IFFALSE 54180
// begin SetLives ( i , 0 ) ;
54166: LD_VAR 0 1
54170: PPUSH
54171: LD_INT 0
54173: PPUSH
54174: CALL_OW 234
// end ;
54178: GO 54163
54180: POP
54181: POP
// end ;
54182: PPOPN 2
54184: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54185: LD_EXP 103
54189: PUSH
54190: LD_EXP 113
54194: AND
54195: IFFALSE 54215
54197: GO 54199
54199: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54200: LD_INT 32
54202: PPUSH
54203: LD_OWVAR 2
54207: PPUSH
54208: LD_INT 0
54210: PPUSH
54211: CALL_OW 324
54215: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54216: LD_EXP 103
54220: PUSH
54221: LD_EXP 114
54225: AND
54226: IFFALSE 54407
54228: GO 54230
54230: DISABLE
54231: LD_INT 0
54233: PPUSH
54234: PPUSH
54235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54236: LD_ADDR_VAR 0 2
54240: PUSH
54241: LD_INT 22
54243: PUSH
54244: LD_OWVAR 2
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 33
54255: PUSH
54256: LD_INT 3
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PPUSH
54267: CALL_OW 69
54271: ST_TO_ADDR
// if not tmp then
54272: LD_VAR 0 2
54276: NOT
54277: IFFALSE 54281
// exit ;
54279: GO 54407
// side := 0 ;
54281: LD_ADDR_VAR 0 3
54285: PUSH
54286: LD_INT 0
54288: ST_TO_ADDR
// for i := 1 to 8 do
54289: LD_ADDR_VAR 0 1
54293: PUSH
54294: DOUBLE
54295: LD_INT 1
54297: DEC
54298: ST_TO_ADDR
54299: LD_INT 8
54301: PUSH
54302: FOR_TO
54303: IFFALSE 54351
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54305: LD_OWVAR 2
54309: PUSH
54310: LD_VAR 0 1
54314: NONEQUAL
54315: PUSH
54316: LD_OWVAR 2
54320: PPUSH
54321: LD_VAR 0 1
54325: PPUSH
54326: CALL_OW 81
54330: PUSH
54331: LD_INT 2
54333: EQUAL
54334: AND
54335: IFFALSE 54349
// begin side := i ;
54337: LD_ADDR_VAR 0 3
54341: PUSH
54342: LD_VAR 0 1
54346: ST_TO_ADDR
// break ;
54347: GO 54351
// end ;
54349: GO 54302
54351: POP
54352: POP
// if not side then
54353: LD_VAR 0 3
54357: NOT
54358: IFFALSE 54362
// exit ;
54360: GO 54407
// for i := 1 to tmp do
54362: LD_ADDR_VAR 0 1
54366: PUSH
54367: DOUBLE
54368: LD_INT 1
54370: DEC
54371: ST_TO_ADDR
54372: LD_VAR 0 2
54376: PUSH
54377: FOR_TO
54378: IFFALSE 54405
// if Prob ( 60 ) then
54380: LD_INT 60
54382: PPUSH
54383: CALL_OW 13
54387: IFFALSE 54403
// SetSide ( i , side ) ;
54389: LD_VAR 0 1
54393: PPUSH
54394: LD_VAR 0 3
54398: PPUSH
54399: CALL_OW 235
54403: GO 54377
54405: POP
54406: POP
// end ;
54407: PPOPN 3
54409: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54410: LD_EXP 103
54414: PUSH
54415: LD_EXP 116
54419: AND
54420: IFFALSE 54539
54422: GO 54424
54424: DISABLE
54425: LD_INT 0
54427: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54428: LD_ADDR_VAR 0 1
54432: PUSH
54433: LD_INT 22
54435: PUSH
54436: LD_OWVAR 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 21
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: PUSH
54458: LD_INT 23
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: PPUSH
54477: CALL_OW 69
54481: PUSH
54482: FOR_IN
54483: IFFALSE 54537
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54485: LD_VAR 0 1
54489: PPUSH
54490: CALL_OW 257
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: LD_INT 4
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: IN
54513: IFFALSE 54535
// SetClass ( un , rand ( 1 , 4 ) ) ;
54515: LD_VAR 0 1
54519: PPUSH
54520: LD_INT 1
54522: PPUSH
54523: LD_INT 4
54525: PPUSH
54526: CALL_OW 12
54530: PPUSH
54531: CALL_OW 336
54535: GO 54482
54537: POP
54538: POP
// end ;
54539: PPOPN 1
54541: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
54542: LD_EXP 103
54546: PUSH
54547: LD_EXP 115
54551: AND
54552: IFFALSE 54631
54554: GO 54556
54556: DISABLE
54557: LD_INT 0
54559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54560: LD_ADDR_VAR 0 1
54564: PUSH
54565: LD_INT 22
54567: PUSH
54568: LD_OWVAR 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 21
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PPUSH
54591: CALL_OW 69
54595: ST_TO_ADDR
// if not tmp then
54596: LD_VAR 0 1
54600: NOT
54601: IFFALSE 54605
// exit ;
54603: GO 54631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
54605: LD_VAR 0 1
54609: PUSH
54610: LD_INT 1
54612: PPUSH
54613: LD_VAR 0 1
54617: PPUSH
54618: CALL_OW 12
54622: ARRAY
54623: PPUSH
54624: LD_INT 100
54626: PPUSH
54627: CALL_OW 234
// end ;
54631: PPOPN 1
54633: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
54634: LD_EXP 103
54638: PUSH
54639: LD_EXP 117
54643: AND
54644: IFFALSE 54742
54646: GO 54648
54648: DISABLE
54649: LD_INT 0
54651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54652: LD_ADDR_VAR 0 1
54656: PUSH
54657: LD_INT 22
54659: PUSH
54660: LD_OWVAR 2
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 21
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PPUSH
54683: CALL_OW 69
54687: ST_TO_ADDR
// if not tmp then
54688: LD_VAR 0 1
54692: NOT
54693: IFFALSE 54697
// exit ;
54695: GO 54742
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
54697: LD_VAR 0 1
54701: PUSH
54702: LD_INT 1
54704: PPUSH
54705: LD_VAR 0 1
54709: PPUSH
54710: CALL_OW 12
54714: ARRAY
54715: PPUSH
54716: LD_INT 1
54718: PPUSH
54719: LD_INT 4
54721: PPUSH
54722: CALL_OW 12
54726: PPUSH
54727: LD_INT 3000
54729: PPUSH
54730: LD_INT 9000
54732: PPUSH
54733: CALL_OW 12
54737: PPUSH
54738: CALL_OW 492
// end ;
54742: PPOPN 1
54744: END
// every 0 0$1 trigger StreamModeActive and sDepot do
54745: LD_EXP 103
54749: PUSH
54750: LD_EXP 118
54754: AND
54755: IFFALSE 54775
54757: GO 54759
54759: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
54760: LD_INT 1
54762: PPUSH
54763: LD_OWVAR 2
54767: PPUSH
54768: LD_INT 0
54770: PPUSH
54771: CALL_OW 324
54775: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
54776: LD_EXP 103
54780: PUSH
54781: LD_EXP 119
54785: AND
54786: IFFALSE 54869
54788: GO 54790
54790: DISABLE
54791: LD_INT 0
54793: PPUSH
54794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
54795: LD_ADDR_VAR 0 2
54799: PUSH
54800: LD_INT 22
54802: PUSH
54803: LD_OWVAR 2
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 21
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PPUSH
54826: CALL_OW 69
54830: ST_TO_ADDR
// if not tmp then
54831: LD_VAR 0 2
54835: NOT
54836: IFFALSE 54840
// exit ;
54838: GO 54869
// for i in tmp do
54840: LD_ADDR_VAR 0 1
54844: PUSH
54845: LD_VAR 0 2
54849: PUSH
54850: FOR_IN
54851: IFFALSE 54867
// SetBLevel ( i , 10 ) ;
54853: LD_VAR 0 1
54857: PPUSH
54858: LD_INT 10
54860: PPUSH
54861: CALL_OW 241
54865: GO 54850
54867: POP
54868: POP
// end ;
54869: PPOPN 2
54871: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
54872: LD_EXP 103
54876: PUSH
54877: LD_EXP 120
54881: AND
54882: IFFALSE 54993
54884: GO 54886
54886: DISABLE
54887: LD_INT 0
54889: PPUSH
54890: PPUSH
54891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54892: LD_ADDR_VAR 0 3
54896: PUSH
54897: LD_INT 22
54899: PUSH
54900: LD_OWVAR 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 25
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PPUSH
54923: CALL_OW 69
54927: ST_TO_ADDR
// if not tmp then
54928: LD_VAR 0 3
54932: NOT
54933: IFFALSE 54937
// exit ;
54935: GO 54993
// un := tmp [ rand ( 1 , tmp ) ] ;
54937: LD_ADDR_VAR 0 2
54941: PUSH
54942: LD_VAR 0 3
54946: PUSH
54947: LD_INT 1
54949: PPUSH
54950: LD_VAR 0 3
54954: PPUSH
54955: CALL_OW 12
54959: ARRAY
54960: ST_TO_ADDR
// if Crawls ( un ) then
54961: LD_VAR 0 2
54965: PPUSH
54966: CALL_OW 318
54970: IFFALSE 54981
// ComWalk ( un ) ;
54972: LD_VAR 0 2
54976: PPUSH
54977: CALL_OW 138
// SetClass ( un , class_sniper ) ;
54981: LD_VAR 0 2
54985: PPUSH
54986: LD_INT 5
54988: PPUSH
54989: CALL_OW 336
// end ;
54993: PPOPN 3
54995: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
54996: LD_EXP 103
55000: PUSH
55001: LD_EXP 121
55005: AND
55006: PUSH
55007: LD_OWVAR 67
55011: PUSH
55012: LD_INT 4
55014: LESS
55015: AND
55016: IFFALSE 55035
55018: GO 55020
55020: DISABLE
// begin Difficulty := Difficulty + 1 ;
55021: LD_ADDR_OWVAR 67
55025: PUSH
55026: LD_OWVAR 67
55030: PUSH
55031: LD_INT 1
55033: PLUS
55034: ST_TO_ADDR
// end ;
55035: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55036: LD_EXP 103
55040: PUSH
55041: LD_EXP 122
55045: AND
55046: IFFALSE 55149
55048: GO 55050
55050: DISABLE
55051: LD_INT 0
55053: PPUSH
// begin for i := 1 to 5 do
55054: LD_ADDR_VAR 0 1
55058: PUSH
55059: DOUBLE
55060: LD_INT 1
55062: DEC
55063: ST_TO_ADDR
55064: LD_INT 5
55066: PUSH
55067: FOR_TO
55068: IFFALSE 55147
// begin uc_nation := nation_nature ;
55070: LD_ADDR_OWVAR 21
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
// uc_side := 0 ;
55078: LD_ADDR_OWVAR 20
55082: PUSH
55083: LD_INT 0
55085: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55086: LD_ADDR_OWVAR 29
55090: PUSH
55091: LD_INT 12
55093: PUSH
55094: LD_INT 12
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: ST_TO_ADDR
// hc_agressivity := 20 ;
55101: LD_ADDR_OWVAR 35
55105: PUSH
55106: LD_INT 20
55108: ST_TO_ADDR
// hc_class := class_tiger ;
55109: LD_ADDR_OWVAR 28
55113: PUSH
55114: LD_INT 14
55116: ST_TO_ADDR
// hc_gallery :=  ;
55117: LD_ADDR_OWVAR 33
55121: PUSH
55122: LD_STRING 
55124: ST_TO_ADDR
// hc_name :=  ;
55125: LD_ADDR_OWVAR 26
55129: PUSH
55130: LD_STRING 
55132: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55133: CALL_OW 44
55137: PPUSH
55138: LD_INT 0
55140: PPUSH
55141: CALL_OW 51
// end ;
55145: GO 55067
55147: POP
55148: POP
// end ;
55149: PPOPN 1
55151: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55152: LD_EXP 103
55156: PUSH
55157: LD_EXP 123
55161: AND
55162: IFFALSE 55171
55164: GO 55166
55166: DISABLE
// StreamSibBomb ;
55167: CALL 55172 0 0
55171: END
// export function StreamSibBomb ; var i , x , y ; begin
55172: LD_INT 0
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
// result := false ;
55178: LD_ADDR_VAR 0 1
55182: PUSH
55183: LD_INT 0
55185: ST_TO_ADDR
// for i := 1 to 16 do
55186: LD_ADDR_VAR 0 2
55190: PUSH
55191: DOUBLE
55192: LD_INT 1
55194: DEC
55195: ST_TO_ADDR
55196: LD_INT 16
55198: PUSH
55199: FOR_TO
55200: IFFALSE 55399
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55202: LD_ADDR_VAR 0 3
55206: PUSH
55207: LD_INT 10
55209: PUSH
55210: LD_INT 20
55212: PUSH
55213: LD_INT 30
55215: PUSH
55216: LD_INT 40
55218: PUSH
55219: LD_INT 50
55221: PUSH
55222: LD_INT 60
55224: PUSH
55225: LD_INT 70
55227: PUSH
55228: LD_INT 80
55230: PUSH
55231: LD_INT 90
55233: PUSH
55234: LD_INT 100
55236: PUSH
55237: LD_INT 110
55239: PUSH
55240: LD_INT 120
55242: PUSH
55243: LD_INT 130
55245: PUSH
55246: LD_INT 140
55248: PUSH
55249: LD_INT 150
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PPUSH
55272: LD_INT 15
55274: PPUSH
55275: CALL_OW 12
55279: ARRAY
55280: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55281: LD_ADDR_VAR 0 4
55285: PUSH
55286: LD_INT 10
55288: PUSH
55289: LD_INT 20
55291: PUSH
55292: LD_INT 30
55294: PUSH
55295: LD_INT 40
55297: PUSH
55298: LD_INT 50
55300: PUSH
55301: LD_INT 60
55303: PUSH
55304: LD_INT 70
55306: PUSH
55307: LD_INT 80
55309: PUSH
55310: LD_INT 90
55312: PUSH
55313: LD_INT 100
55315: PUSH
55316: LD_INT 110
55318: PUSH
55319: LD_INT 120
55321: PUSH
55322: LD_INT 130
55324: PUSH
55325: LD_INT 140
55327: PUSH
55328: LD_INT 150
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PPUSH
55351: LD_INT 15
55353: PPUSH
55354: CALL_OW 12
55358: ARRAY
55359: ST_TO_ADDR
// if ValidHex ( x , y ) then
55360: LD_VAR 0 3
55364: PPUSH
55365: LD_VAR 0 4
55369: PPUSH
55370: CALL_OW 488
55374: IFFALSE 55397
// begin result := [ x , y ] ;
55376: LD_ADDR_VAR 0 1
55380: PUSH
55381: LD_VAR 0 3
55385: PUSH
55386: LD_VAR 0 4
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// break ;
55395: GO 55399
// end ; end ;
55397: GO 55199
55399: POP
55400: POP
// if result then
55401: LD_VAR 0 1
55405: IFFALSE 55465
// begin ToLua ( playSibBomb() ) ;
55407: LD_STRING playSibBomb()
55409: PPUSH
55410: CALL_OW 559
// wait ( 0 0$14 ) ;
55414: LD_INT 490
55416: PPUSH
55417: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55421: LD_VAR 0 1
55425: PUSH
55426: LD_INT 1
55428: ARRAY
55429: PPUSH
55430: LD_VAR 0 1
55434: PUSH
55435: LD_INT 2
55437: ARRAY
55438: PPUSH
55439: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55443: LD_VAR 0 1
55447: PUSH
55448: LD_INT 1
55450: ARRAY
55451: PPUSH
55452: LD_VAR 0 1
55456: PUSH
55457: LD_INT 2
55459: ARRAY
55460: PPUSH
55461: CALL_OW 429
// end ; end ;
55465: LD_VAR 0 1
55469: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55470: LD_EXP 103
55474: PUSH
55475: LD_EXP 125
55479: AND
55480: IFFALSE 55492
55482: GO 55484
55484: DISABLE
// YouLost (  ) ;
55485: LD_STRING 
55487: PPUSH
55488: CALL_OW 104
55492: END
// every 0 0$1 trigger StreamModeActive and sFog do
55493: LD_EXP 103
55497: PUSH
55498: LD_EXP 124
55502: AND
55503: IFFALSE 55517
55505: GO 55507
55507: DISABLE
// FogOff ( your_side ) ;
55508: LD_OWVAR 2
55512: PPUSH
55513: CALL_OW 344
55517: END
// every 0 0$1 trigger StreamModeActive and sSun do
55518: LD_EXP 103
55522: PUSH
55523: LD_EXP 126
55527: AND
55528: IFFALSE 55556
55530: GO 55532
55532: DISABLE
// begin solar_recharge_percent := 0 ;
55533: LD_ADDR_OWVAR 79
55537: PUSH
55538: LD_INT 0
55540: ST_TO_ADDR
// wait ( 5 5$00 ) ;
55541: LD_INT 10500
55543: PPUSH
55544: CALL_OW 67
// solar_recharge_percent := 100 ;
55548: LD_ADDR_OWVAR 79
55552: PUSH
55553: LD_INT 100
55555: ST_TO_ADDR
// end ;
55556: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
55557: LD_EXP 103
55561: PUSH
55562: LD_EXP 127
55566: AND
55567: IFFALSE 55806
55569: GO 55571
55571: DISABLE
55572: LD_INT 0
55574: PPUSH
55575: PPUSH
55576: PPUSH
// begin tmp := [ ] ;
55577: LD_ADDR_VAR 0 3
55581: PUSH
55582: EMPTY
55583: ST_TO_ADDR
// for i := 1 to 6 do
55584: LD_ADDR_VAR 0 1
55588: PUSH
55589: DOUBLE
55590: LD_INT 1
55592: DEC
55593: ST_TO_ADDR
55594: LD_INT 6
55596: PUSH
55597: FOR_TO
55598: IFFALSE 55703
// begin uc_nation := nation_nature ;
55600: LD_ADDR_OWVAR 21
55604: PUSH
55605: LD_INT 0
55607: ST_TO_ADDR
// uc_side := 0 ;
55608: LD_ADDR_OWVAR 20
55612: PUSH
55613: LD_INT 0
55615: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55616: LD_ADDR_OWVAR 29
55620: PUSH
55621: LD_INT 12
55623: PUSH
55624: LD_INT 12
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: ST_TO_ADDR
// hc_agressivity := 20 ;
55631: LD_ADDR_OWVAR 35
55635: PUSH
55636: LD_INT 20
55638: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
55639: LD_ADDR_OWVAR 28
55643: PUSH
55644: LD_INT 17
55646: ST_TO_ADDR
// hc_gallery :=  ;
55647: LD_ADDR_OWVAR 33
55651: PUSH
55652: LD_STRING 
55654: ST_TO_ADDR
// hc_name :=  ;
55655: LD_ADDR_OWVAR 26
55659: PUSH
55660: LD_STRING 
55662: ST_TO_ADDR
// un := CreateHuman ;
55663: LD_ADDR_VAR 0 2
55667: PUSH
55668: CALL_OW 44
55672: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
55673: LD_VAR 0 2
55677: PPUSH
55678: LD_INT 1
55680: PPUSH
55681: CALL_OW 51
// tmp := tmp ^ un ;
55685: LD_ADDR_VAR 0 3
55689: PUSH
55690: LD_VAR 0 3
55694: PUSH
55695: LD_VAR 0 2
55699: ADD
55700: ST_TO_ADDR
// end ;
55701: GO 55597
55703: POP
55704: POP
// repeat wait ( 0 0$1 ) ;
55705: LD_INT 35
55707: PPUSH
55708: CALL_OW 67
// for un in tmp do
55712: LD_ADDR_VAR 0 2
55716: PUSH
55717: LD_VAR 0 3
55721: PUSH
55722: FOR_IN
55723: IFFALSE 55797
// begin if IsDead ( un ) then
55725: LD_VAR 0 2
55729: PPUSH
55730: CALL_OW 301
55734: IFFALSE 55754
// begin tmp := tmp diff un ;
55736: LD_ADDR_VAR 0 3
55740: PUSH
55741: LD_VAR 0 3
55745: PUSH
55746: LD_VAR 0 2
55750: DIFF
55751: ST_TO_ADDR
// continue ;
55752: GO 55722
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
55754: LD_VAR 0 2
55758: PPUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 22
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PPUSH
55776: CALL_OW 69
55780: PPUSH
55781: LD_VAR 0 2
55785: PPUSH
55786: CALL_OW 74
55790: PPUSH
55791: CALL_OW 115
// end ;
55795: GO 55722
55797: POP
55798: POP
// until not tmp ;
55799: LD_VAR 0 3
55803: NOT
55804: IFFALSE 55705
// end ;
55806: PPOPN 3
55808: END
// every 0 0$1 trigger StreamModeActive and sTroll do
55809: LD_EXP 103
55813: PUSH
55814: LD_EXP 128
55818: AND
55819: IFFALSE 55873
55821: GO 55823
55823: DISABLE
// begin ToLua ( displayTroll(); ) ;
55824: LD_STRING displayTroll();
55826: PPUSH
55827: CALL_OW 559
// wait ( 3 3$00 ) ;
55831: LD_INT 6300
55833: PPUSH
55834: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55838: LD_STRING hideTroll();
55840: PPUSH
55841: CALL_OW 559
// wait ( 1 1$00 ) ;
55845: LD_INT 2100
55847: PPUSH
55848: CALL_OW 67
// ToLua ( displayTroll(); ) ;
55852: LD_STRING displayTroll();
55854: PPUSH
55855: CALL_OW 559
// wait ( 1 1$00 ) ;
55859: LD_INT 2100
55861: PPUSH
55862: CALL_OW 67
// ToLua ( hideTroll(); ) ;
55866: LD_STRING hideTroll();
55868: PPUSH
55869: CALL_OW 559
// end ;
55873: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
55874: LD_EXP 103
55878: PUSH
55879: LD_EXP 129
55883: AND
55884: IFFALSE 55947
55886: GO 55888
55888: DISABLE
55889: LD_INT 0
55891: PPUSH
// begin p := 0 ;
55892: LD_ADDR_VAR 0 1
55896: PUSH
55897: LD_INT 0
55899: ST_TO_ADDR
// repeat game_speed := 1 ;
55900: LD_ADDR_OWVAR 65
55904: PUSH
55905: LD_INT 1
55907: ST_TO_ADDR
// wait ( 0 0$1 ) ;
55908: LD_INT 35
55910: PPUSH
55911: CALL_OW 67
// p := p + 1 ;
55915: LD_ADDR_VAR 0 1
55919: PUSH
55920: LD_VAR 0 1
55924: PUSH
55925: LD_INT 1
55927: PLUS
55928: ST_TO_ADDR
// until p >= 60 ;
55929: LD_VAR 0 1
55933: PUSH
55934: LD_INT 60
55936: GREATEREQUAL
55937: IFFALSE 55900
// game_speed := 4 ;
55939: LD_ADDR_OWVAR 65
55943: PUSH
55944: LD_INT 4
55946: ST_TO_ADDR
// end ;
55947: PPOPN 1
55949: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
55950: LD_EXP 103
55954: PUSH
55955: LD_EXP 130
55959: AND
55960: IFFALSE 56106
55962: GO 55964
55964: DISABLE
55965: LD_INT 0
55967: PPUSH
55968: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55969: LD_ADDR_VAR 0 1
55973: PUSH
55974: LD_INT 22
55976: PUSH
55977: LD_OWVAR 2
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: LD_INT 30
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 30
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PPUSH
56018: CALL_OW 69
56022: ST_TO_ADDR
// if not depot then
56023: LD_VAR 0 1
56027: NOT
56028: IFFALSE 56032
// exit ;
56030: GO 56106
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56032: LD_ADDR_VAR 0 2
56036: PUSH
56037: LD_VAR 0 1
56041: PUSH
56042: LD_INT 1
56044: PPUSH
56045: LD_VAR 0 1
56049: PPUSH
56050: CALL_OW 12
56054: ARRAY
56055: PPUSH
56056: CALL_OW 274
56060: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56061: LD_VAR 0 2
56065: PPUSH
56066: LD_INT 1
56068: PPUSH
56069: LD_INT 0
56071: PPUSH
56072: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56076: LD_VAR 0 2
56080: PPUSH
56081: LD_INT 2
56083: PPUSH
56084: LD_INT 0
56086: PPUSH
56087: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56091: LD_VAR 0 2
56095: PPUSH
56096: LD_INT 3
56098: PPUSH
56099: LD_INT 0
56101: PPUSH
56102: CALL_OW 277
// end ;
56106: PPOPN 2
56108: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56109: LD_EXP 103
56113: PUSH
56114: LD_EXP 131
56118: AND
56119: IFFALSE 56216
56121: GO 56123
56123: DISABLE
56124: LD_INT 0
56126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56127: LD_ADDR_VAR 0 1
56131: PUSH
56132: LD_INT 22
56134: PUSH
56135: LD_OWVAR 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 21
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: LD_INT 23
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: PPUSH
56176: CALL_OW 69
56180: ST_TO_ADDR
// if not tmp then
56181: LD_VAR 0 1
56185: NOT
56186: IFFALSE 56190
// exit ;
56188: GO 56216
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56190: LD_VAR 0 1
56194: PUSH
56195: LD_INT 1
56197: PPUSH
56198: LD_VAR 0 1
56202: PPUSH
56203: CALL_OW 12
56207: ARRAY
56208: PPUSH
56209: LD_INT 200
56211: PPUSH
56212: CALL_OW 234
// end ;
56216: PPOPN 1
56218: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56219: LD_EXP 103
56223: PUSH
56224: LD_EXP 132
56228: AND
56229: IFFALSE 56308
56231: GO 56233
56233: DISABLE
56234: LD_INT 0
56236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56237: LD_ADDR_VAR 0 1
56241: PUSH
56242: LD_INT 22
56244: PUSH
56245: LD_OWVAR 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 21
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PPUSH
56268: CALL_OW 69
56272: ST_TO_ADDR
// if not tmp then
56273: LD_VAR 0 1
56277: NOT
56278: IFFALSE 56282
// exit ;
56280: GO 56308
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56282: LD_VAR 0 1
56286: PUSH
56287: LD_INT 1
56289: PPUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: CALL_OW 12
56299: ARRAY
56300: PPUSH
56301: LD_INT 60
56303: PPUSH
56304: CALL_OW 234
// end ;
56308: PPOPN 1
56310: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56311: LD_EXP 103
56315: PUSH
56316: LD_EXP 133
56320: AND
56321: IFFALSE 56420
56323: GO 56325
56325: DISABLE
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
// begin enable ;
56330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56331: LD_ADDR_VAR 0 1
56335: PUSH
56336: LD_INT 22
56338: PUSH
56339: LD_OWVAR 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 61
56350: PUSH
56351: EMPTY
56352: LIST
56353: PUSH
56354: LD_INT 33
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: PPUSH
56369: CALL_OW 69
56373: ST_TO_ADDR
// if not tmp then
56374: LD_VAR 0 1
56378: NOT
56379: IFFALSE 56383
// exit ;
56381: GO 56420
// for i in tmp do
56383: LD_ADDR_VAR 0 2
56387: PUSH
56388: LD_VAR 0 1
56392: PUSH
56393: FOR_IN
56394: IFFALSE 56418
// if IsControledBy ( i ) then
56396: LD_VAR 0 2
56400: PPUSH
56401: CALL_OW 312
56405: IFFALSE 56416
// ComUnlink ( i ) ;
56407: LD_VAR 0 2
56411: PPUSH
56412: CALL_OW 136
56416: GO 56393
56418: POP
56419: POP
// end ;
56420: PPOPN 2
56422: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56423: LD_EXP 103
56427: PUSH
56428: LD_EXP 134
56432: AND
56433: IFFALSE 56573
56435: GO 56437
56437: DISABLE
56438: LD_INT 0
56440: PPUSH
56441: PPUSH
// begin ToLua ( displayPowell(); ) ;
56442: LD_STRING displayPowell();
56444: PPUSH
56445: CALL_OW 559
// uc_side := 0 ;
56449: LD_ADDR_OWVAR 20
56453: PUSH
56454: LD_INT 0
56456: ST_TO_ADDR
// uc_nation := 2 ;
56457: LD_ADDR_OWVAR 21
56461: PUSH
56462: LD_INT 2
56464: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56465: LD_ADDR_OWVAR 37
56469: PUSH
56470: LD_INT 14
56472: ST_TO_ADDR
// vc_engine := engine_siberite ;
56473: LD_ADDR_OWVAR 39
56477: PUSH
56478: LD_INT 3
56480: ST_TO_ADDR
// vc_control := control_apeman ;
56481: LD_ADDR_OWVAR 38
56485: PUSH
56486: LD_INT 5
56488: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56489: LD_ADDR_OWVAR 40
56493: PUSH
56494: LD_INT 29
56496: ST_TO_ADDR
// un := CreateVehicle ;
56497: LD_ADDR_VAR 0 2
56501: PUSH
56502: CALL_OW 45
56506: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56507: LD_VAR 0 2
56511: PPUSH
56512: LD_INT 1
56514: PPUSH
56515: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
56519: LD_INT 35
56521: PPUSH
56522: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
56526: LD_VAR 0 2
56530: PPUSH
56531: LD_INT 22
56533: PUSH
56534: LD_OWVAR 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PPUSH
56543: CALL_OW 69
56547: PPUSH
56548: LD_VAR 0 2
56552: PPUSH
56553: CALL_OW 74
56557: PPUSH
56558: CALL_OW 115
// until IsDead ( un ) ;
56562: LD_VAR 0 2
56566: PPUSH
56567: CALL_OW 301
56571: IFFALSE 56519
// end ;
56573: PPOPN 2
56575: END
// every 0 0$1 trigger StreamModeActive and sStu do
56576: LD_EXP 103
56580: PUSH
56581: LD_EXP 142
56585: AND
56586: IFFALSE 56602
56588: GO 56590
56590: DISABLE
// begin ToLua ( displayStucuk(); ) ;
56591: LD_STRING displayStucuk();
56593: PPUSH
56594: CALL_OW 559
// ResetFog ;
56598: CALL_OW 335
// end ;
56602: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
56603: LD_EXP 103
56607: PUSH
56608: LD_EXP 135
56612: AND
56613: IFFALSE 56754
56615: GO 56617
56617: DISABLE
56618: LD_INT 0
56620: PPUSH
56621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56622: LD_ADDR_VAR 0 2
56626: PUSH
56627: LD_INT 22
56629: PUSH
56630: LD_OWVAR 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 21
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PPUSH
56653: CALL_OW 69
56657: ST_TO_ADDR
// if not tmp then
56658: LD_VAR 0 2
56662: NOT
56663: IFFALSE 56667
// exit ;
56665: GO 56754
// un := tmp [ rand ( 1 , tmp ) ] ;
56667: LD_ADDR_VAR 0 1
56671: PUSH
56672: LD_VAR 0 2
56676: PUSH
56677: LD_INT 1
56679: PPUSH
56680: LD_VAR 0 2
56684: PPUSH
56685: CALL_OW 12
56689: ARRAY
56690: ST_TO_ADDR
// SetSide ( un , 0 ) ;
56691: LD_VAR 0 1
56695: PPUSH
56696: LD_INT 0
56698: PPUSH
56699: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
56703: LD_VAR 0 1
56707: PPUSH
56708: LD_OWVAR 3
56712: PUSH
56713: LD_VAR 0 1
56717: DIFF
56718: PPUSH
56719: LD_VAR 0 1
56723: PPUSH
56724: CALL_OW 74
56728: PPUSH
56729: CALL_OW 115
// wait ( 0 0$20 ) ;
56733: LD_INT 700
56735: PPUSH
56736: CALL_OW 67
// SetSide ( un , your_side ) ;
56740: LD_VAR 0 1
56744: PPUSH
56745: LD_OWVAR 2
56749: PPUSH
56750: CALL_OW 235
// end ;
56754: PPOPN 2
56756: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
56757: LD_EXP 103
56761: PUSH
56762: LD_EXP 136
56766: AND
56767: IFFALSE 56873
56769: GO 56771
56771: DISABLE
56772: LD_INT 0
56774: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56775: LD_ADDR_VAR 0 1
56779: PUSH
56780: LD_INT 22
56782: PUSH
56783: LD_OWVAR 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 2
56794: PUSH
56795: LD_INT 30
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 30
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PPUSH
56824: CALL_OW 69
56828: ST_TO_ADDR
// if not depot then
56829: LD_VAR 0 1
56833: NOT
56834: IFFALSE 56838
// exit ;
56836: GO 56873
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
56838: LD_VAR 0 1
56842: PUSH
56843: LD_INT 1
56845: ARRAY
56846: PPUSH
56847: CALL_OW 250
56851: PPUSH
56852: LD_VAR 0 1
56856: PUSH
56857: LD_INT 1
56859: ARRAY
56860: PPUSH
56861: CALL_OW 251
56865: PPUSH
56866: LD_INT 70
56868: PPUSH
56869: CALL_OW 495
// end ;
56873: PPOPN 1
56875: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
56876: LD_EXP 103
56880: PUSH
56881: LD_EXP 137
56885: AND
56886: IFFALSE 57097
56888: GO 56890
56890: DISABLE
56891: LD_INT 0
56893: PPUSH
56894: PPUSH
56895: PPUSH
56896: PPUSH
56897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56898: LD_ADDR_VAR 0 5
56902: PUSH
56903: LD_INT 22
56905: PUSH
56906: LD_OWVAR 2
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 21
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PPUSH
56929: CALL_OW 69
56933: ST_TO_ADDR
// if not tmp then
56934: LD_VAR 0 5
56938: NOT
56939: IFFALSE 56943
// exit ;
56941: GO 57097
// for i in tmp do
56943: LD_ADDR_VAR 0 1
56947: PUSH
56948: LD_VAR 0 5
56952: PUSH
56953: FOR_IN
56954: IFFALSE 57095
// begin d := rand ( 0 , 5 ) ;
56956: LD_ADDR_VAR 0 4
56960: PUSH
56961: LD_INT 0
56963: PPUSH
56964: LD_INT 5
56966: PPUSH
56967: CALL_OW 12
56971: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
56972: LD_ADDR_VAR 0 2
56976: PUSH
56977: LD_VAR 0 1
56981: PPUSH
56982: CALL_OW 250
56986: PPUSH
56987: LD_VAR 0 4
56991: PPUSH
56992: LD_INT 3
56994: PPUSH
56995: LD_INT 12
56997: PPUSH
56998: CALL_OW 12
57002: PPUSH
57003: CALL_OW 272
57007: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57008: LD_ADDR_VAR 0 3
57012: PUSH
57013: LD_VAR 0 1
57017: PPUSH
57018: CALL_OW 251
57022: PPUSH
57023: LD_VAR 0 4
57027: PPUSH
57028: LD_INT 3
57030: PPUSH
57031: LD_INT 12
57033: PPUSH
57034: CALL_OW 12
57038: PPUSH
57039: CALL_OW 273
57043: ST_TO_ADDR
// if ValidHex ( x , y ) then
57044: LD_VAR 0 2
57048: PPUSH
57049: LD_VAR 0 3
57053: PPUSH
57054: CALL_OW 488
57058: IFFALSE 57093
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57060: LD_VAR 0 1
57064: PPUSH
57065: LD_VAR 0 2
57069: PPUSH
57070: LD_VAR 0 3
57074: PPUSH
57075: LD_INT 3
57077: PPUSH
57078: LD_INT 6
57080: PPUSH
57081: CALL_OW 12
57085: PPUSH
57086: LD_INT 1
57088: PPUSH
57089: CALL_OW 483
// end ;
57093: GO 56953
57095: POP
57096: POP
// end ;
57097: PPOPN 5
57099: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57100: LD_EXP 103
57104: PUSH
57105: LD_EXP 138
57109: AND
57110: IFFALSE 57204
57112: GO 57114
57114: DISABLE
57115: LD_INT 0
57117: PPUSH
57118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57119: LD_ADDR_VAR 0 2
57123: PUSH
57124: LD_INT 22
57126: PUSH
57127: LD_OWVAR 2
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 32
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 21
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: LIST
57160: PPUSH
57161: CALL_OW 69
57165: ST_TO_ADDR
// if not tmp then
57166: LD_VAR 0 2
57170: NOT
57171: IFFALSE 57175
// exit ;
57173: GO 57204
// for i in tmp do
57175: LD_ADDR_VAR 0 1
57179: PUSH
57180: LD_VAR 0 2
57184: PUSH
57185: FOR_IN
57186: IFFALSE 57202
// SetFuel ( i , 0 ) ;
57188: LD_VAR 0 1
57192: PPUSH
57193: LD_INT 0
57195: PPUSH
57196: CALL_OW 240
57200: GO 57185
57202: POP
57203: POP
// end ;
57204: PPOPN 2
57206: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57207: LD_EXP 103
57211: PUSH
57212: LD_EXP 139
57216: AND
57217: IFFALSE 57283
57219: GO 57221
57221: DISABLE
57222: LD_INT 0
57224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57225: LD_ADDR_VAR 0 1
57229: PUSH
57230: LD_INT 22
57232: PUSH
57233: LD_OWVAR 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 30
57244: PUSH
57245: LD_INT 29
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PPUSH
57256: CALL_OW 69
57260: ST_TO_ADDR
// if not tmp then
57261: LD_VAR 0 1
57265: NOT
57266: IFFALSE 57270
// exit ;
57268: GO 57283
// DestroyUnit ( tmp [ 1 ] ) ;
57270: LD_VAR 0 1
57274: PUSH
57275: LD_INT 1
57277: ARRAY
57278: PPUSH
57279: CALL_OW 65
// end ;
57283: PPOPN 1
57285: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57286: LD_EXP 103
57290: PUSH
57291: LD_EXP 141
57295: AND
57296: IFFALSE 57425
57298: GO 57300
57300: DISABLE
57301: LD_INT 0
57303: PPUSH
// begin uc_side := 0 ;
57304: LD_ADDR_OWVAR 20
57308: PUSH
57309: LD_INT 0
57311: ST_TO_ADDR
// uc_nation := nation_arabian ;
57312: LD_ADDR_OWVAR 21
57316: PUSH
57317: LD_INT 2
57319: ST_TO_ADDR
// hc_gallery :=  ;
57320: LD_ADDR_OWVAR 33
57324: PUSH
57325: LD_STRING 
57327: ST_TO_ADDR
// hc_name :=  ;
57328: LD_ADDR_OWVAR 26
57332: PUSH
57333: LD_STRING 
57335: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57336: LD_INT 1
57338: PPUSH
57339: LD_INT 11
57341: PPUSH
57342: LD_INT 10
57344: PPUSH
57345: CALL_OW 380
// un := CreateHuman ;
57349: LD_ADDR_VAR 0 1
57353: PUSH
57354: CALL_OW 44
57358: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57359: LD_VAR 0 1
57363: PPUSH
57364: LD_INT 1
57366: PPUSH
57367: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57371: LD_INT 35
57373: PPUSH
57374: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57378: LD_VAR 0 1
57382: PPUSH
57383: LD_INT 22
57385: PUSH
57386: LD_OWVAR 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PPUSH
57395: CALL_OW 69
57399: PPUSH
57400: LD_VAR 0 1
57404: PPUSH
57405: CALL_OW 74
57409: PPUSH
57410: CALL_OW 115
// until IsDead ( un ) ;
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 301
57423: IFFALSE 57371
// end ;
57425: PPOPN 1
57427: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57428: LD_EXP 103
57432: PUSH
57433: LD_EXP 143
57437: AND
57438: IFFALSE 57450
57440: GO 57442
57442: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57443: LD_STRING earthquake(getX(game), 0, 32)
57445: PPUSH
57446: CALL_OW 559
57450: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57451: LD_EXP 103
57455: PUSH
57456: LD_EXP 144
57460: AND
57461: IFFALSE 57552
57463: GO 57465
57465: DISABLE
57466: LD_INT 0
57468: PPUSH
// begin enable ;
57469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57470: LD_ADDR_VAR 0 1
57474: PUSH
57475: LD_INT 22
57477: PUSH
57478: LD_OWVAR 2
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 21
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 33
57499: PUSH
57500: LD_INT 3
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: PPUSH
57512: CALL_OW 69
57516: ST_TO_ADDR
// if not tmp then
57517: LD_VAR 0 1
57521: NOT
57522: IFFALSE 57526
// exit ;
57524: GO 57552
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
57526: LD_VAR 0 1
57530: PUSH
57531: LD_INT 1
57533: PPUSH
57534: LD_VAR 0 1
57538: PPUSH
57539: CALL_OW 12
57543: ARRAY
57544: PPUSH
57545: LD_INT 1
57547: PPUSH
57548: CALL_OW 234
// end ;
57552: PPOPN 1
57554: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
57555: LD_EXP 103
57559: PUSH
57560: LD_EXP 145
57564: AND
57565: IFFALSE 57706
57567: GO 57569
57569: DISABLE
57570: LD_INT 0
57572: PPUSH
57573: PPUSH
57574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57575: LD_ADDR_VAR 0 3
57579: PUSH
57580: LD_INT 22
57582: PUSH
57583: LD_OWVAR 2
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 25
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PPUSH
57606: CALL_OW 69
57610: ST_TO_ADDR
// if not tmp then
57611: LD_VAR 0 3
57615: NOT
57616: IFFALSE 57620
// exit ;
57618: GO 57706
// un := tmp [ rand ( 1 , tmp ) ] ;
57620: LD_ADDR_VAR 0 2
57624: PUSH
57625: LD_VAR 0 3
57629: PUSH
57630: LD_INT 1
57632: PPUSH
57633: LD_VAR 0 3
57637: PPUSH
57638: CALL_OW 12
57642: ARRAY
57643: ST_TO_ADDR
// if Crawls ( un ) then
57644: LD_VAR 0 2
57648: PPUSH
57649: CALL_OW 318
57653: IFFALSE 57664
// ComWalk ( un ) ;
57655: LD_VAR 0 2
57659: PPUSH
57660: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
57664: LD_VAR 0 2
57668: PPUSH
57669: LD_INT 9
57671: PPUSH
57672: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
57676: LD_INT 28
57678: PPUSH
57679: LD_OWVAR 2
57683: PPUSH
57684: LD_INT 2
57686: PPUSH
57687: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
57691: LD_INT 29
57693: PPUSH
57694: LD_OWVAR 2
57698: PPUSH
57699: LD_INT 2
57701: PPUSH
57702: CALL_OW 322
// end ;
57706: PPOPN 3
57708: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
57709: LD_EXP 103
57713: PUSH
57714: LD_EXP 146
57718: AND
57719: IFFALSE 57830
57721: GO 57723
57723: DISABLE
57724: LD_INT 0
57726: PPUSH
57727: PPUSH
57728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57729: LD_ADDR_VAR 0 3
57733: PUSH
57734: LD_INT 22
57736: PUSH
57737: LD_OWVAR 2
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 25
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PPUSH
57760: CALL_OW 69
57764: ST_TO_ADDR
// if not tmp then
57765: LD_VAR 0 3
57769: NOT
57770: IFFALSE 57774
// exit ;
57772: GO 57830
// un := tmp [ rand ( 1 , tmp ) ] ;
57774: LD_ADDR_VAR 0 2
57778: PUSH
57779: LD_VAR 0 3
57783: PUSH
57784: LD_INT 1
57786: PPUSH
57787: LD_VAR 0 3
57791: PPUSH
57792: CALL_OW 12
57796: ARRAY
57797: ST_TO_ADDR
// if Crawls ( un ) then
57798: LD_VAR 0 2
57802: PPUSH
57803: CALL_OW 318
57807: IFFALSE 57818
// ComWalk ( un ) ;
57809: LD_VAR 0 2
57813: PPUSH
57814: CALL_OW 138
// SetClass ( un , class_mortar ) ;
57818: LD_VAR 0 2
57822: PPUSH
57823: LD_INT 8
57825: PPUSH
57826: CALL_OW 336
// end ;
57830: PPOPN 3
57832: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
57833: LD_EXP 103
57837: PUSH
57838: LD_EXP 147
57842: AND
57843: IFFALSE 57987
57845: GO 57847
57847: DISABLE
57848: LD_INT 0
57850: PPUSH
57851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
57852: LD_ADDR_VAR 0 2
57856: PUSH
57857: LD_INT 22
57859: PUSH
57860: LD_OWVAR 2
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 21
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 34
57884: PUSH
57885: LD_INT 12
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 34
57894: PUSH
57895: LD_INT 51
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 34
57904: PUSH
57905: LD_INT 32
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: PPUSH
57923: CALL_OW 69
57927: ST_TO_ADDR
// if not tmp then
57928: LD_VAR 0 2
57932: NOT
57933: IFFALSE 57937
// exit ;
57935: GO 57987
// for i in tmp do
57937: LD_ADDR_VAR 0 1
57941: PUSH
57942: LD_VAR 0 2
57946: PUSH
57947: FOR_IN
57948: IFFALSE 57985
// if GetCargo ( i , mat_artifact ) = 0 then
57950: LD_VAR 0 1
57954: PPUSH
57955: LD_INT 4
57957: PPUSH
57958: CALL_OW 289
57962: PUSH
57963: LD_INT 0
57965: EQUAL
57966: IFFALSE 57983
// SetCargo ( i , mat_siberit , 100 ) ;
57968: LD_VAR 0 1
57972: PPUSH
57973: LD_INT 3
57975: PPUSH
57976: LD_INT 100
57978: PPUSH
57979: CALL_OW 290
57983: GO 57947
57985: POP
57986: POP
// end ;
57987: PPOPN 2
57989: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
57990: LD_EXP 103
57994: PUSH
57995: LD_EXP 148
57999: AND
58000: IFFALSE 58183
58002: GO 58004
58004: DISABLE
58005: LD_INT 0
58007: PPUSH
58008: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58009: LD_ADDR_VAR 0 2
58013: PUSH
58014: LD_INT 22
58016: PUSH
58017: LD_OWVAR 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PPUSH
58026: CALL_OW 69
58030: ST_TO_ADDR
// if not tmp then
58031: LD_VAR 0 2
58035: NOT
58036: IFFALSE 58040
// exit ;
58038: GO 58183
// for i := 1 to 2 do
58040: LD_ADDR_VAR 0 1
58044: PUSH
58045: DOUBLE
58046: LD_INT 1
58048: DEC
58049: ST_TO_ADDR
58050: LD_INT 2
58052: PUSH
58053: FOR_TO
58054: IFFALSE 58181
// begin uc_side := your_side ;
58056: LD_ADDR_OWVAR 20
58060: PUSH
58061: LD_OWVAR 2
58065: ST_TO_ADDR
// uc_nation := nation_american ;
58066: LD_ADDR_OWVAR 21
58070: PUSH
58071: LD_INT 1
58073: ST_TO_ADDR
// vc_chassis := us_morphling ;
58074: LD_ADDR_OWVAR 37
58078: PUSH
58079: LD_INT 5
58081: ST_TO_ADDR
// vc_engine := engine_siberite ;
58082: LD_ADDR_OWVAR 39
58086: PUSH
58087: LD_INT 3
58089: ST_TO_ADDR
// vc_control := control_computer ;
58090: LD_ADDR_OWVAR 38
58094: PUSH
58095: LD_INT 3
58097: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58098: LD_ADDR_OWVAR 40
58102: PUSH
58103: LD_INT 10
58105: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58106: LD_VAR 0 2
58110: PUSH
58111: LD_INT 1
58113: ARRAY
58114: PPUSH
58115: CALL_OW 310
58119: NOT
58120: IFFALSE 58167
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58122: CALL_OW 45
58126: PPUSH
58127: LD_VAR 0 2
58131: PUSH
58132: LD_INT 1
58134: ARRAY
58135: PPUSH
58136: CALL_OW 250
58140: PPUSH
58141: LD_VAR 0 2
58145: PUSH
58146: LD_INT 1
58148: ARRAY
58149: PPUSH
58150: CALL_OW 251
58154: PPUSH
58155: LD_INT 12
58157: PPUSH
58158: LD_INT 1
58160: PPUSH
58161: CALL_OW 50
58165: GO 58179
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58167: CALL_OW 45
58171: PPUSH
58172: LD_INT 1
58174: PPUSH
58175: CALL_OW 51
// end ;
58179: GO 58053
58181: POP
58182: POP
// end ;
58183: PPOPN 2
58185: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58186: LD_EXP 103
58190: PUSH
58191: LD_EXP 149
58195: AND
58196: IFFALSE 58418
58198: GO 58200
58200: DISABLE
58201: LD_INT 0
58203: PPUSH
58204: PPUSH
58205: PPUSH
58206: PPUSH
58207: PPUSH
58208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58209: LD_ADDR_VAR 0 6
58213: PUSH
58214: LD_INT 22
58216: PUSH
58217: LD_OWVAR 2
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 21
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 23
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: LIST
58257: PPUSH
58258: CALL_OW 69
58262: ST_TO_ADDR
// if not tmp then
58263: LD_VAR 0 6
58267: NOT
58268: IFFALSE 58272
// exit ;
58270: GO 58418
// s1 := rand ( 1 , 4 ) ;
58272: LD_ADDR_VAR 0 2
58276: PUSH
58277: LD_INT 1
58279: PPUSH
58280: LD_INT 4
58282: PPUSH
58283: CALL_OW 12
58287: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58288: LD_ADDR_VAR 0 4
58292: PUSH
58293: LD_VAR 0 6
58297: PUSH
58298: LD_INT 1
58300: ARRAY
58301: PPUSH
58302: LD_VAR 0 2
58306: PPUSH
58307: CALL_OW 259
58311: ST_TO_ADDR
// if s1 = 1 then
58312: LD_VAR 0 2
58316: PUSH
58317: LD_INT 1
58319: EQUAL
58320: IFFALSE 58340
// s2 := rand ( 2 , 4 ) else
58322: LD_ADDR_VAR 0 3
58326: PUSH
58327: LD_INT 2
58329: PPUSH
58330: LD_INT 4
58332: PPUSH
58333: CALL_OW 12
58337: ST_TO_ADDR
58338: GO 58348
// s2 := 1 ;
58340: LD_ADDR_VAR 0 3
58344: PUSH
58345: LD_INT 1
58347: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58348: LD_ADDR_VAR 0 5
58352: PUSH
58353: LD_VAR 0 6
58357: PUSH
58358: LD_INT 1
58360: ARRAY
58361: PPUSH
58362: LD_VAR 0 3
58366: PPUSH
58367: CALL_OW 259
58371: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58372: LD_VAR 0 6
58376: PUSH
58377: LD_INT 1
58379: ARRAY
58380: PPUSH
58381: LD_VAR 0 2
58385: PPUSH
58386: LD_VAR 0 5
58390: PPUSH
58391: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58395: LD_VAR 0 6
58399: PUSH
58400: LD_INT 1
58402: ARRAY
58403: PPUSH
58404: LD_VAR 0 3
58408: PPUSH
58409: LD_VAR 0 4
58413: PPUSH
58414: CALL_OW 237
// end ;
58418: PPOPN 6
58420: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58421: LD_EXP 103
58425: PUSH
58426: LD_EXP 150
58430: AND
58431: IFFALSE 58510
58433: GO 58435
58435: DISABLE
58436: LD_INT 0
58438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58439: LD_ADDR_VAR 0 1
58443: PUSH
58444: LD_INT 22
58446: PUSH
58447: LD_OWVAR 2
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 30
58458: PUSH
58459: LD_INT 3
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PPUSH
58470: CALL_OW 69
58474: ST_TO_ADDR
// if not tmp then
58475: LD_VAR 0 1
58479: NOT
58480: IFFALSE 58484
// exit ;
58482: GO 58510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58484: LD_VAR 0 1
58488: PUSH
58489: LD_INT 1
58491: PPUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: CALL_OW 12
58501: ARRAY
58502: PPUSH
58503: LD_INT 1
58505: PPUSH
58506: CALL_OW 234
// end ;
58510: PPOPN 1
58512: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
58513: LD_EXP 103
58517: PUSH
58518: LD_EXP 151
58522: AND
58523: IFFALSE 58635
58525: GO 58527
58527: DISABLE
58528: LD_INT 0
58530: PPUSH
58531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
58532: LD_ADDR_VAR 0 2
58536: PUSH
58537: LD_INT 22
58539: PUSH
58540: LD_OWVAR 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 30
58554: PUSH
58555: LD_INT 27
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 30
58564: PUSH
58565: LD_INT 26
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 30
58574: PUSH
58575: LD_INT 28
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PPUSH
58592: CALL_OW 69
58596: ST_TO_ADDR
// if not tmp then
58597: LD_VAR 0 2
58601: NOT
58602: IFFALSE 58606
// exit ;
58604: GO 58635
// for i in tmp do
58606: LD_ADDR_VAR 0 1
58610: PUSH
58611: LD_VAR 0 2
58615: PUSH
58616: FOR_IN
58617: IFFALSE 58633
// SetLives ( i , 1 ) ;
58619: LD_VAR 0 1
58623: PPUSH
58624: LD_INT 1
58626: PPUSH
58627: CALL_OW 234
58631: GO 58616
58633: POP
58634: POP
// end ;
58635: PPOPN 2
58637: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
58638: LD_EXP 103
58642: PUSH
58643: LD_EXP 152
58647: AND
58648: IFFALSE 58935
58650: GO 58652
58652: DISABLE
58653: LD_INT 0
58655: PPUSH
58656: PPUSH
58657: PPUSH
// begin i := rand ( 1 , 7 ) ;
58658: LD_ADDR_VAR 0 1
58662: PUSH
58663: LD_INT 1
58665: PPUSH
58666: LD_INT 7
58668: PPUSH
58669: CALL_OW 12
58673: ST_TO_ADDR
// case i of 1 :
58674: LD_VAR 0 1
58678: PUSH
58679: LD_INT 1
58681: DOUBLE
58682: EQUAL
58683: IFTRUE 58687
58685: GO 58697
58687: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
58688: LD_STRING earthquake(getX(game), 0, 32)
58690: PPUSH
58691: CALL_OW 559
58695: GO 58935
58697: LD_INT 2
58699: DOUBLE
58700: EQUAL
58701: IFTRUE 58705
58703: GO 58719
58705: POP
// begin ToLua ( displayStucuk(); ) ;
58706: LD_STRING displayStucuk();
58708: PPUSH
58709: CALL_OW 559
// ResetFog ;
58713: CALL_OW 335
// end ; 3 :
58717: GO 58935
58719: LD_INT 3
58721: DOUBLE
58722: EQUAL
58723: IFTRUE 58727
58725: GO 58831
58727: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58728: LD_ADDR_VAR 0 2
58732: PUSH
58733: LD_INT 22
58735: PUSH
58736: LD_OWVAR 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 25
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PPUSH
58759: CALL_OW 69
58763: ST_TO_ADDR
// if not tmp then
58764: LD_VAR 0 2
58768: NOT
58769: IFFALSE 58773
// exit ;
58771: GO 58935
// un := tmp [ rand ( 1 , tmp ) ] ;
58773: LD_ADDR_VAR 0 3
58777: PUSH
58778: LD_VAR 0 2
58782: PUSH
58783: LD_INT 1
58785: PPUSH
58786: LD_VAR 0 2
58790: PPUSH
58791: CALL_OW 12
58795: ARRAY
58796: ST_TO_ADDR
// if Crawls ( un ) then
58797: LD_VAR 0 3
58801: PPUSH
58802: CALL_OW 318
58806: IFFALSE 58817
// ComWalk ( un ) ;
58808: LD_VAR 0 3
58812: PPUSH
58813: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58817: LD_VAR 0 3
58821: PPUSH
58822: LD_INT 8
58824: PPUSH
58825: CALL_OW 336
// end ; 4 :
58829: GO 58935
58831: LD_INT 4
58833: DOUBLE
58834: EQUAL
58835: IFTRUE 58839
58837: GO 58913
58839: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58840: LD_ADDR_VAR 0 2
58844: PUSH
58845: LD_INT 22
58847: PUSH
58848: LD_OWVAR 2
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 30
58859: PUSH
58860: LD_INT 29
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PPUSH
58871: CALL_OW 69
58875: ST_TO_ADDR
// if not tmp then
58876: LD_VAR 0 2
58880: NOT
58881: IFFALSE 58885
// exit ;
58883: GO 58935
// CenterNowOnUnits ( tmp [ 1 ] ) ;
58885: LD_VAR 0 2
58889: PUSH
58890: LD_INT 1
58892: ARRAY
58893: PPUSH
58894: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
58898: LD_VAR 0 2
58902: PUSH
58903: LD_INT 1
58905: ARRAY
58906: PPUSH
58907: CALL_OW 65
// end ; 5 .. 7 :
58911: GO 58935
58913: LD_INT 5
58915: DOUBLE
58916: GREATEREQUAL
58917: IFFALSE 58925
58919: LD_INT 7
58921: DOUBLE
58922: LESSEQUAL
58923: IFTRUE 58927
58925: GO 58934
58927: POP
// StreamSibBomb ; end ;
58928: CALL 55172 0 0
58932: GO 58935
58934: POP
// end ;
58935: PPOPN 3
58937: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
58938: LD_EXP 103
58942: PUSH
58943: LD_EXP 153
58947: AND
58948: IFFALSE 59104
58950: GO 58952
58952: DISABLE
58953: LD_INT 0
58955: PPUSH
58956: PPUSH
58957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
58958: LD_ADDR_VAR 0 2
58962: PUSH
58963: LD_INT 81
58965: PUSH
58966: LD_OWVAR 2
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 21
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 21
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PPUSH
59007: CALL_OW 69
59011: ST_TO_ADDR
// if not tmp then
59012: LD_VAR 0 2
59016: NOT
59017: IFFALSE 59021
// exit ;
59019: GO 59104
// p := 0 ;
59021: LD_ADDR_VAR 0 3
59025: PUSH
59026: LD_INT 0
59028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59029: LD_INT 35
59031: PPUSH
59032: CALL_OW 67
// p := p + 1 ;
59036: LD_ADDR_VAR 0 3
59040: PUSH
59041: LD_VAR 0 3
59045: PUSH
59046: LD_INT 1
59048: PLUS
59049: ST_TO_ADDR
// for i in tmp do
59050: LD_ADDR_VAR 0 1
59054: PUSH
59055: LD_VAR 0 2
59059: PUSH
59060: FOR_IN
59061: IFFALSE 59092
// if GetLives ( i ) < 1000 then
59063: LD_VAR 0 1
59067: PPUSH
59068: CALL_OW 256
59072: PUSH
59073: LD_INT 1000
59075: LESS
59076: IFFALSE 59090
// SetLives ( i , 1000 ) ;
59078: LD_VAR 0 1
59082: PPUSH
59083: LD_INT 1000
59085: PPUSH
59086: CALL_OW 234
59090: GO 59060
59092: POP
59093: POP
// until p > 20 ;
59094: LD_VAR 0 3
59098: PUSH
59099: LD_INT 20
59101: GREATER
59102: IFFALSE 59029
// end ;
59104: PPOPN 3
59106: END
// every 0 0$1 trigger StreamModeActive and sTime do
59107: LD_EXP 103
59111: PUSH
59112: LD_EXP 154
59116: AND
59117: IFFALSE 59152
59119: GO 59121
59121: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59122: LD_INT 28
59124: PPUSH
59125: LD_OWVAR 2
59129: PPUSH
59130: LD_INT 2
59132: PPUSH
59133: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59137: LD_INT 30
59139: PPUSH
59140: LD_OWVAR 2
59144: PPUSH
59145: LD_INT 2
59147: PPUSH
59148: CALL_OW 322
// end ;
59152: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59153: LD_EXP 103
59157: PUSH
59158: LD_EXP 155
59162: AND
59163: IFFALSE 59284
59165: GO 59167
59167: DISABLE
59168: LD_INT 0
59170: PPUSH
59171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59172: LD_ADDR_VAR 0 2
59176: PUSH
59177: LD_INT 22
59179: PUSH
59180: LD_OWVAR 2
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 21
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 23
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: LIST
59220: PPUSH
59221: CALL_OW 69
59225: ST_TO_ADDR
// if not tmp then
59226: LD_VAR 0 2
59230: NOT
59231: IFFALSE 59235
// exit ;
59233: GO 59284
// for i in tmp do
59235: LD_ADDR_VAR 0 1
59239: PUSH
59240: LD_VAR 0 2
59244: PUSH
59245: FOR_IN
59246: IFFALSE 59282
// begin if Crawls ( i ) then
59248: LD_VAR 0 1
59252: PPUSH
59253: CALL_OW 318
59257: IFFALSE 59268
// ComWalk ( i ) ;
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL_OW 138
// SetClass ( i , 2 ) ;
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_INT 2
59275: PPUSH
59276: CALL_OW 336
// end ;
59280: GO 59245
59282: POP
59283: POP
// end ;
59284: PPOPN 2
59286: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59287: LD_EXP 103
59291: PUSH
59292: LD_EXP 156
59296: AND
59297: IFFALSE 59585
59299: GO 59301
59301: DISABLE
59302: LD_INT 0
59304: PPUSH
59305: PPUSH
59306: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59307: LD_OWVAR 2
59311: PPUSH
59312: LD_INT 9
59314: PPUSH
59315: LD_INT 1
59317: PPUSH
59318: LD_INT 1
59320: PPUSH
59321: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59325: LD_INT 9
59327: PPUSH
59328: LD_OWVAR 2
59332: PPUSH
59333: CALL_OW 343
// uc_side := 9 ;
59337: LD_ADDR_OWVAR 20
59341: PUSH
59342: LD_INT 9
59344: ST_TO_ADDR
// uc_nation := 2 ;
59345: LD_ADDR_OWVAR 21
59349: PUSH
59350: LD_INT 2
59352: ST_TO_ADDR
// hc_name := Dark Warrior ;
59353: LD_ADDR_OWVAR 26
59357: PUSH
59358: LD_STRING Dark Warrior
59360: ST_TO_ADDR
// hc_gallery :=  ;
59361: LD_ADDR_OWVAR 33
59365: PUSH
59366: LD_STRING 
59368: ST_TO_ADDR
// hc_noskilllimit := true ;
59369: LD_ADDR_OWVAR 76
59373: PUSH
59374: LD_INT 1
59376: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59377: LD_ADDR_OWVAR 31
59381: PUSH
59382: LD_INT 30
59384: PUSH
59385: LD_INT 30
59387: PUSH
59388: LD_INT 30
59390: PUSH
59391: LD_INT 30
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// un := CreateHuman ;
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: CALL_OW 44
59409: ST_TO_ADDR
// hc_noskilllimit := false ;
59410: LD_ADDR_OWVAR 76
59414: PUSH
59415: LD_INT 0
59417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59418: LD_VAR 0 3
59422: PPUSH
59423: LD_INT 1
59425: PPUSH
59426: CALL_OW 51
// ToLua ( playRanger() ) ;
59430: LD_STRING playRanger()
59432: PPUSH
59433: CALL_OW 559
// p := 0 ;
59437: LD_ADDR_VAR 0 2
59441: PUSH
59442: LD_INT 0
59444: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59445: LD_INT 35
59447: PPUSH
59448: CALL_OW 67
// p := p + 1 ;
59452: LD_ADDR_VAR 0 2
59456: PUSH
59457: LD_VAR 0 2
59461: PUSH
59462: LD_INT 1
59464: PLUS
59465: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59466: LD_VAR 0 3
59470: PPUSH
59471: CALL_OW 256
59475: PUSH
59476: LD_INT 1000
59478: LESS
59479: IFFALSE 59493
// SetLives ( un , 1000 ) ;
59481: LD_VAR 0 3
59485: PPUSH
59486: LD_INT 1000
59488: PPUSH
59489: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59493: LD_VAR 0 3
59497: PPUSH
59498: LD_INT 81
59500: PUSH
59501: LD_OWVAR 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 91
59512: PUSH
59513: LD_VAR 0 3
59517: PUSH
59518: LD_INT 30
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PPUSH
59530: CALL_OW 69
59534: PPUSH
59535: LD_VAR 0 3
59539: PPUSH
59540: CALL_OW 74
59544: PPUSH
59545: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
59549: LD_VAR 0 2
59553: PUSH
59554: LD_INT 80
59556: GREATER
59557: PUSH
59558: LD_VAR 0 3
59562: PPUSH
59563: CALL_OW 301
59567: OR
59568: IFFALSE 59445
// if un then
59570: LD_VAR 0 3
59574: IFFALSE 59585
// RemoveUnit ( un ) ;
59576: LD_VAR 0 3
59580: PPUSH
59581: CALL_OW 64
// end ;
59585: PPOPN 3
59587: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
59588: LD_EXP 157
59592: IFFALSE 59708
59594: GO 59596
59596: DISABLE
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
59601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59602: LD_ADDR_VAR 0 2
59606: PUSH
59607: LD_INT 81
59609: PUSH
59610: LD_OWVAR 2
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 21
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PPUSH
59633: CALL_OW 69
59637: ST_TO_ADDR
// ToLua ( playComputer() ) ;
59638: LD_STRING playComputer()
59640: PPUSH
59641: CALL_OW 559
// if not tmp then
59645: LD_VAR 0 2
59649: NOT
59650: IFFALSE 59654
// exit ;
59652: GO 59708
// for i in tmp do
59654: LD_ADDR_VAR 0 1
59658: PUSH
59659: LD_VAR 0 2
59663: PUSH
59664: FOR_IN
59665: IFFALSE 59706
// for j := 1 to 4 do
59667: LD_ADDR_VAR 0 3
59671: PUSH
59672: DOUBLE
59673: LD_INT 1
59675: DEC
59676: ST_TO_ADDR
59677: LD_INT 4
59679: PUSH
59680: FOR_TO
59681: IFFALSE 59702
// SetSkill ( i , j , 10 ) ;
59683: LD_VAR 0 1
59687: PPUSH
59688: LD_VAR 0 3
59692: PPUSH
59693: LD_INT 10
59695: PPUSH
59696: CALL_OW 237
59700: GO 59680
59702: POP
59703: POP
59704: GO 59664
59706: POP
59707: POP
// end ;
59708: PPOPN 3
59710: END
// every 0 0$1 trigger s30 do var i , tmp ;
59711: LD_EXP 158
59715: IFFALSE 59784
59717: GO 59719
59719: DISABLE
59720: LD_INT 0
59722: PPUSH
59723: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59724: LD_ADDR_VAR 0 2
59728: PUSH
59729: LD_INT 22
59731: PUSH
59732: LD_OWVAR 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PPUSH
59741: CALL_OW 69
59745: ST_TO_ADDR
// if not tmp then
59746: LD_VAR 0 2
59750: NOT
59751: IFFALSE 59755
// exit ;
59753: GO 59784
// for i in tmp do
59755: LD_ADDR_VAR 0 1
59759: PUSH
59760: LD_VAR 0 2
59764: PUSH
59765: FOR_IN
59766: IFFALSE 59782
// SetLives ( i , 300 ) ;
59768: LD_VAR 0 1
59772: PPUSH
59773: LD_INT 300
59775: PPUSH
59776: CALL_OW 234
59780: GO 59765
59782: POP
59783: POP
// end ;
59784: PPOPN 2
59786: END
// every 0 0$1 trigger s60 do var i , tmp ;
59787: LD_EXP 159
59791: IFFALSE 59860
59793: GO 59795
59795: DISABLE
59796: LD_INT 0
59798: PPUSH
59799: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59800: LD_ADDR_VAR 0 2
59804: PUSH
59805: LD_INT 22
59807: PUSH
59808: LD_OWVAR 2
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PPUSH
59817: CALL_OW 69
59821: ST_TO_ADDR
// if not tmp then
59822: LD_VAR 0 2
59826: NOT
59827: IFFALSE 59831
// exit ;
59829: GO 59860
// for i in tmp do
59831: LD_ADDR_VAR 0 1
59835: PUSH
59836: LD_VAR 0 2
59840: PUSH
59841: FOR_IN
59842: IFFALSE 59858
// SetLives ( i , 600 ) ;
59844: LD_VAR 0 1
59848: PPUSH
59849: LD_INT 600
59851: PPUSH
59852: CALL_OW 234
59856: GO 59841
59858: POP
59859: POP
// end ;
59860: PPOPN 2
59862: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59863: LD_INT 0
59865: PPUSH
// case cmd of 301 :
59866: LD_VAR 0 1
59870: PUSH
59871: LD_INT 301
59873: DOUBLE
59874: EQUAL
59875: IFTRUE 59879
59877: GO 59911
59879: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
59880: LD_VAR 0 6
59884: PPUSH
59885: LD_VAR 0 7
59889: PPUSH
59890: LD_VAR 0 8
59894: PPUSH
59895: LD_VAR 0 4
59899: PPUSH
59900: LD_VAR 0 5
59904: PPUSH
59905: CALL 61112 0 5
59909: GO 60032
59911: LD_INT 302
59913: DOUBLE
59914: EQUAL
59915: IFTRUE 59919
59917: GO 59956
59919: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
59920: LD_VAR 0 6
59924: PPUSH
59925: LD_VAR 0 7
59929: PPUSH
59930: LD_VAR 0 8
59934: PPUSH
59935: LD_VAR 0 9
59939: PPUSH
59940: LD_VAR 0 4
59944: PPUSH
59945: LD_VAR 0 5
59949: PPUSH
59950: CALL 61203 0 6
59954: GO 60032
59956: LD_INT 303
59958: DOUBLE
59959: EQUAL
59960: IFTRUE 59964
59962: GO 60001
59964: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
59965: LD_VAR 0 6
59969: PPUSH
59970: LD_VAR 0 7
59974: PPUSH
59975: LD_VAR 0 8
59979: PPUSH
59980: LD_VAR 0 9
59984: PPUSH
59985: LD_VAR 0 4
59989: PPUSH
59990: LD_VAR 0 5
59994: PPUSH
59995: CALL 60037 0 6
59999: GO 60032
60001: LD_INT 304
60003: DOUBLE
60004: EQUAL
60005: IFTRUE 60009
60007: GO 60031
60009: POP
// hHackTeleport ( unit , x , y ) ; end ;
60010: LD_VAR 0 2
60014: PPUSH
60015: LD_VAR 0 4
60019: PPUSH
60020: LD_VAR 0 5
60024: PPUSH
60025: CALL 61796 0 3
60029: GO 60032
60031: POP
// end ;
60032: LD_VAR 0 12
60036: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60037: LD_INT 0
60039: PPUSH
60040: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60041: LD_VAR 0 1
60045: PUSH
60046: LD_INT 1
60048: LESS
60049: PUSH
60050: LD_VAR 0 1
60054: PUSH
60055: LD_INT 3
60057: GREATER
60058: OR
60059: PUSH
60060: LD_VAR 0 5
60064: PPUSH
60065: LD_VAR 0 6
60069: PPUSH
60070: CALL_OW 428
60074: OR
60075: IFFALSE 60079
// exit ;
60077: GO 60799
// uc_side := your_side ;
60079: LD_ADDR_OWVAR 20
60083: PUSH
60084: LD_OWVAR 2
60088: ST_TO_ADDR
// uc_nation := nation ;
60089: LD_ADDR_OWVAR 21
60093: PUSH
60094: LD_VAR 0 1
60098: ST_TO_ADDR
// bc_level = 1 ;
60099: LD_ADDR_OWVAR 43
60103: PUSH
60104: LD_INT 1
60106: ST_TO_ADDR
// case btype of 1 :
60107: LD_VAR 0 2
60111: PUSH
60112: LD_INT 1
60114: DOUBLE
60115: EQUAL
60116: IFTRUE 60120
60118: GO 60131
60120: POP
// bc_type := b_depot ; 2 :
60121: LD_ADDR_OWVAR 42
60125: PUSH
60126: LD_INT 0
60128: ST_TO_ADDR
60129: GO 60743
60131: LD_INT 2
60133: DOUBLE
60134: EQUAL
60135: IFTRUE 60139
60137: GO 60150
60139: POP
// bc_type := b_warehouse ; 3 :
60140: LD_ADDR_OWVAR 42
60144: PUSH
60145: LD_INT 1
60147: ST_TO_ADDR
60148: GO 60743
60150: LD_INT 3
60152: DOUBLE
60153: EQUAL
60154: IFTRUE 60158
60156: GO 60169
60158: POP
// bc_type := b_lab ; 4 .. 9 :
60159: LD_ADDR_OWVAR 42
60163: PUSH
60164: LD_INT 6
60166: ST_TO_ADDR
60167: GO 60743
60169: LD_INT 4
60171: DOUBLE
60172: GREATEREQUAL
60173: IFFALSE 60181
60175: LD_INT 9
60177: DOUBLE
60178: LESSEQUAL
60179: IFTRUE 60183
60181: GO 60235
60183: POP
// begin bc_type := b_lab_half ;
60184: LD_ADDR_OWVAR 42
60188: PUSH
60189: LD_INT 7
60191: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60192: LD_ADDR_OWVAR 44
60196: PUSH
60197: LD_INT 10
60199: PUSH
60200: LD_INT 11
60202: PUSH
60203: LD_INT 12
60205: PUSH
60206: LD_INT 15
60208: PUSH
60209: LD_INT 14
60211: PUSH
60212: LD_INT 13
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: PUSH
60223: LD_VAR 0 2
60227: PUSH
60228: LD_INT 3
60230: MINUS
60231: ARRAY
60232: ST_TO_ADDR
// end ; 10 .. 13 :
60233: GO 60743
60235: LD_INT 10
60237: DOUBLE
60238: GREATEREQUAL
60239: IFFALSE 60247
60241: LD_INT 13
60243: DOUBLE
60244: LESSEQUAL
60245: IFTRUE 60249
60247: GO 60326
60249: POP
// begin bc_type := b_lab_full ;
60250: LD_ADDR_OWVAR 42
60254: PUSH
60255: LD_INT 8
60257: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60258: LD_ADDR_OWVAR 44
60262: PUSH
60263: LD_INT 10
60265: PUSH
60266: LD_INT 12
60268: PUSH
60269: LD_INT 14
60271: PUSH
60272: LD_INT 13
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: PUSH
60281: LD_VAR 0 2
60285: PUSH
60286: LD_INT 9
60288: MINUS
60289: ARRAY
60290: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60291: LD_ADDR_OWVAR 45
60295: PUSH
60296: LD_INT 11
60298: PUSH
60299: LD_INT 15
60301: PUSH
60302: LD_INT 12
60304: PUSH
60305: LD_INT 15
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: PUSH
60314: LD_VAR 0 2
60318: PUSH
60319: LD_INT 9
60321: MINUS
60322: ARRAY
60323: ST_TO_ADDR
// end ; 14 :
60324: GO 60743
60326: LD_INT 14
60328: DOUBLE
60329: EQUAL
60330: IFTRUE 60334
60332: GO 60345
60334: POP
// bc_type := b_workshop ; 15 :
60335: LD_ADDR_OWVAR 42
60339: PUSH
60340: LD_INT 2
60342: ST_TO_ADDR
60343: GO 60743
60345: LD_INT 15
60347: DOUBLE
60348: EQUAL
60349: IFTRUE 60353
60351: GO 60364
60353: POP
// bc_type := b_factory ; 16 :
60354: LD_ADDR_OWVAR 42
60358: PUSH
60359: LD_INT 3
60361: ST_TO_ADDR
60362: GO 60743
60364: LD_INT 16
60366: DOUBLE
60367: EQUAL
60368: IFTRUE 60372
60370: GO 60383
60372: POP
// bc_type := b_ext_gun ; 17 :
60373: LD_ADDR_OWVAR 42
60377: PUSH
60378: LD_INT 17
60380: ST_TO_ADDR
60381: GO 60743
60383: LD_INT 17
60385: DOUBLE
60386: EQUAL
60387: IFTRUE 60391
60389: GO 60419
60391: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60392: LD_ADDR_OWVAR 42
60396: PUSH
60397: LD_INT 19
60399: PUSH
60400: LD_INT 23
60402: PUSH
60403: LD_INT 19
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: PUSH
60411: LD_VAR 0 1
60415: ARRAY
60416: ST_TO_ADDR
60417: GO 60743
60419: LD_INT 18
60421: DOUBLE
60422: EQUAL
60423: IFTRUE 60427
60425: GO 60438
60427: POP
// bc_type := b_ext_radar ; 19 :
60428: LD_ADDR_OWVAR 42
60432: PUSH
60433: LD_INT 20
60435: ST_TO_ADDR
60436: GO 60743
60438: LD_INT 19
60440: DOUBLE
60441: EQUAL
60442: IFTRUE 60446
60444: GO 60457
60446: POP
// bc_type := b_ext_radio ; 20 :
60447: LD_ADDR_OWVAR 42
60451: PUSH
60452: LD_INT 22
60454: ST_TO_ADDR
60455: GO 60743
60457: LD_INT 20
60459: DOUBLE
60460: EQUAL
60461: IFTRUE 60465
60463: GO 60476
60465: POP
// bc_type := b_ext_siberium ; 21 :
60466: LD_ADDR_OWVAR 42
60470: PUSH
60471: LD_INT 21
60473: ST_TO_ADDR
60474: GO 60743
60476: LD_INT 21
60478: DOUBLE
60479: EQUAL
60480: IFTRUE 60484
60482: GO 60495
60484: POP
// bc_type := b_ext_computer ; 22 :
60485: LD_ADDR_OWVAR 42
60489: PUSH
60490: LD_INT 24
60492: ST_TO_ADDR
60493: GO 60743
60495: LD_INT 22
60497: DOUBLE
60498: EQUAL
60499: IFTRUE 60503
60501: GO 60514
60503: POP
// bc_type := b_ext_track ; 23 :
60504: LD_ADDR_OWVAR 42
60508: PUSH
60509: LD_INT 16
60511: ST_TO_ADDR
60512: GO 60743
60514: LD_INT 23
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60522
60520: GO 60533
60522: POP
// bc_type := b_ext_laser ; 24 :
60523: LD_ADDR_OWVAR 42
60527: PUSH
60528: LD_INT 25
60530: ST_TO_ADDR
60531: GO 60743
60533: LD_INT 24
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60541
60539: GO 60552
60541: POP
// bc_type := b_control_tower ; 25 :
60542: LD_ADDR_OWVAR 42
60546: PUSH
60547: LD_INT 36
60549: ST_TO_ADDR
60550: GO 60743
60552: LD_INT 25
60554: DOUBLE
60555: EQUAL
60556: IFTRUE 60560
60558: GO 60571
60560: POP
// bc_type := b_breastwork ; 26 :
60561: LD_ADDR_OWVAR 42
60565: PUSH
60566: LD_INT 31
60568: ST_TO_ADDR
60569: GO 60743
60571: LD_INT 26
60573: DOUBLE
60574: EQUAL
60575: IFTRUE 60579
60577: GO 60590
60579: POP
// bc_type := b_bunker ; 27 :
60580: LD_ADDR_OWVAR 42
60584: PUSH
60585: LD_INT 32
60587: ST_TO_ADDR
60588: GO 60743
60590: LD_INT 27
60592: DOUBLE
60593: EQUAL
60594: IFTRUE 60598
60596: GO 60609
60598: POP
// bc_type := b_turret ; 28 :
60599: LD_ADDR_OWVAR 42
60603: PUSH
60604: LD_INT 33
60606: ST_TO_ADDR
60607: GO 60743
60609: LD_INT 28
60611: DOUBLE
60612: EQUAL
60613: IFTRUE 60617
60615: GO 60628
60617: POP
// bc_type := b_armoury ; 29 :
60618: LD_ADDR_OWVAR 42
60622: PUSH
60623: LD_INT 4
60625: ST_TO_ADDR
60626: GO 60743
60628: LD_INT 29
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60636
60634: GO 60647
60636: POP
// bc_type := b_barracks ; 30 :
60637: LD_ADDR_OWVAR 42
60641: PUSH
60642: LD_INT 5
60644: ST_TO_ADDR
60645: GO 60743
60647: LD_INT 30
60649: DOUBLE
60650: EQUAL
60651: IFTRUE 60655
60653: GO 60666
60655: POP
// bc_type := b_solar_power ; 31 :
60656: LD_ADDR_OWVAR 42
60660: PUSH
60661: LD_INT 27
60663: ST_TO_ADDR
60664: GO 60743
60666: LD_INT 31
60668: DOUBLE
60669: EQUAL
60670: IFTRUE 60674
60672: GO 60685
60674: POP
// bc_type := b_oil_power ; 32 :
60675: LD_ADDR_OWVAR 42
60679: PUSH
60680: LD_INT 26
60682: ST_TO_ADDR
60683: GO 60743
60685: LD_INT 32
60687: DOUBLE
60688: EQUAL
60689: IFTRUE 60693
60691: GO 60704
60693: POP
// bc_type := b_siberite_power ; 33 :
60694: LD_ADDR_OWVAR 42
60698: PUSH
60699: LD_INT 28
60701: ST_TO_ADDR
60702: GO 60743
60704: LD_INT 33
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60712
60710: GO 60723
60712: POP
// bc_type := b_oil_mine ; 34 :
60713: LD_ADDR_OWVAR 42
60717: PUSH
60718: LD_INT 29
60720: ST_TO_ADDR
60721: GO 60743
60723: LD_INT 34
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60731
60729: GO 60742
60731: POP
// bc_type := b_siberite_mine ; end ;
60732: LD_ADDR_OWVAR 42
60736: PUSH
60737: LD_INT 30
60739: ST_TO_ADDR
60740: GO 60743
60742: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
60743: LD_ADDR_VAR 0 8
60747: PUSH
60748: LD_VAR 0 5
60752: PPUSH
60753: LD_VAR 0 6
60757: PPUSH
60758: LD_VAR 0 3
60762: PPUSH
60763: CALL_OW 47
60767: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
60768: LD_OWVAR 42
60772: PUSH
60773: LD_INT 32
60775: PUSH
60776: LD_INT 33
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: IN
60783: IFFALSE 60799
// PlaceWeaponTurret ( b , weapon ) ;
60785: LD_VAR 0 8
60789: PPUSH
60790: LD_VAR 0 4
60794: PPUSH
60795: CALL_OW 431
// end ;
60799: LD_VAR 0 7
60803: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
60804: LD_INT 0
60806: PPUSH
60807: PPUSH
60808: PPUSH
60809: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60810: LD_ADDR_VAR 0 4
60814: PUSH
60815: LD_INT 22
60817: PUSH
60818: LD_OWVAR 2
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 2
60829: PUSH
60830: LD_INT 30
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 30
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PPUSH
60859: CALL_OW 69
60863: ST_TO_ADDR
// if not tmp then
60864: LD_VAR 0 4
60868: NOT
60869: IFFALSE 60873
// exit ;
60871: GO 60932
// for i in tmp do
60873: LD_ADDR_VAR 0 2
60877: PUSH
60878: LD_VAR 0 4
60882: PUSH
60883: FOR_IN
60884: IFFALSE 60930
// for j = 1 to 3 do
60886: LD_ADDR_VAR 0 3
60890: PUSH
60891: DOUBLE
60892: LD_INT 1
60894: DEC
60895: ST_TO_ADDR
60896: LD_INT 3
60898: PUSH
60899: FOR_TO
60900: IFFALSE 60926
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
60902: LD_VAR 0 2
60906: PPUSH
60907: CALL_OW 274
60911: PPUSH
60912: LD_VAR 0 3
60916: PPUSH
60917: LD_INT 99999
60919: PPUSH
60920: CALL_OW 277
60924: GO 60899
60926: POP
60927: POP
60928: GO 60883
60930: POP
60931: POP
// end ;
60932: LD_VAR 0 1
60936: RET
// export function hHackSetLevel10 ; var i , j ; begin
60937: LD_INT 0
60939: PPUSH
60940: PPUSH
60941: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
60942: LD_ADDR_VAR 0 2
60946: PUSH
60947: LD_INT 21
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PPUSH
60957: CALL_OW 69
60961: PUSH
60962: FOR_IN
60963: IFFALSE 61015
// if IsSelected ( i ) then
60965: LD_VAR 0 2
60969: PPUSH
60970: CALL_OW 306
60974: IFFALSE 61013
// begin for j := 1 to 4 do
60976: LD_ADDR_VAR 0 3
60980: PUSH
60981: DOUBLE
60982: LD_INT 1
60984: DEC
60985: ST_TO_ADDR
60986: LD_INT 4
60988: PUSH
60989: FOR_TO
60990: IFFALSE 61011
// SetSkill ( i , j , 10 ) ;
60992: LD_VAR 0 2
60996: PPUSH
60997: LD_VAR 0 3
61001: PPUSH
61002: LD_INT 10
61004: PPUSH
61005: CALL_OW 237
61009: GO 60989
61011: POP
61012: POP
// end ;
61013: GO 60962
61015: POP
61016: POP
// end ;
61017: LD_VAR 0 1
61021: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61022: LD_INT 0
61024: PPUSH
61025: PPUSH
61026: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61027: LD_ADDR_VAR 0 2
61031: PUSH
61032: LD_INT 22
61034: PUSH
61035: LD_OWVAR 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 21
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PPUSH
61058: CALL_OW 69
61062: PUSH
61063: FOR_IN
61064: IFFALSE 61105
// begin for j := 1 to 4 do
61066: LD_ADDR_VAR 0 3
61070: PUSH
61071: DOUBLE
61072: LD_INT 1
61074: DEC
61075: ST_TO_ADDR
61076: LD_INT 4
61078: PUSH
61079: FOR_TO
61080: IFFALSE 61101
// SetSkill ( i , j , 10 ) ;
61082: LD_VAR 0 2
61086: PPUSH
61087: LD_VAR 0 3
61091: PPUSH
61092: LD_INT 10
61094: PPUSH
61095: CALL_OW 237
61099: GO 61079
61101: POP
61102: POP
// end ;
61103: GO 61063
61105: POP
61106: POP
// end ;
61107: LD_VAR 0 1
61111: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61112: LD_INT 0
61114: PPUSH
// uc_side := your_side ;
61115: LD_ADDR_OWVAR 20
61119: PUSH
61120: LD_OWVAR 2
61124: ST_TO_ADDR
// uc_nation := nation ;
61125: LD_ADDR_OWVAR 21
61129: PUSH
61130: LD_VAR 0 1
61134: ST_TO_ADDR
// InitHc ;
61135: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61139: LD_INT 0
61141: PPUSH
61142: LD_VAR 0 2
61146: PPUSH
61147: LD_VAR 0 3
61151: PPUSH
61152: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61156: LD_VAR 0 4
61160: PPUSH
61161: LD_VAR 0 5
61165: PPUSH
61166: CALL_OW 428
61170: PUSH
61171: LD_INT 0
61173: EQUAL
61174: IFFALSE 61198
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61176: CALL_OW 44
61180: PPUSH
61181: LD_VAR 0 4
61185: PPUSH
61186: LD_VAR 0 5
61190: PPUSH
61191: LD_INT 1
61193: PPUSH
61194: CALL_OW 48
// end ;
61198: LD_VAR 0 6
61202: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61203: LD_INT 0
61205: PPUSH
61206: PPUSH
// uc_side := your_side ;
61207: LD_ADDR_OWVAR 20
61211: PUSH
61212: LD_OWVAR 2
61216: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61217: LD_VAR 0 1
61221: PUSH
61222: LD_INT 1
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 4
61233: PUSH
61234: LD_INT 5
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: IN
61244: IFFALSE 61256
// uc_nation := nation_american else
61246: LD_ADDR_OWVAR 21
61250: PUSH
61251: LD_INT 1
61253: ST_TO_ADDR
61254: GO 61299
// if chassis in [ 11 , 12 , 13 , 14 ] then
61256: LD_VAR 0 1
61260: PUSH
61261: LD_INT 11
61263: PUSH
61264: LD_INT 12
61266: PUSH
61267: LD_INT 13
61269: PUSH
61270: LD_INT 14
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: IN
61279: IFFALSE 61291
// uc_nation := nation_arabian else
61281: LD_ADDR_OWVAR 21
61285: PUSH
61286: LD_INT 2
61288: ST_TO_ADDR
61289: GO 61299
// uc_nation := nation_russian ;
61291: LD_ADDR_OWVAR 21
61295: PUSH
61296: LD_INT 3
61298: ST_TO_ADDR
// vc_chassis := chassis ;
61299: LD_ADDR_OWVAR 37
61303: PUSH
61304: LD_VAR 0 1
61308: ST_TO_ADDR
// vc_engine := engine ;
61309: LD_ADDR_OWVAR 39
61313: PUSH
61314: LD_VAR 0 2
61318: ST_TO_ADDR
// vc_control := control ;
61319: LD_ADDR_OWVAR 38
61323: PUSH
61324: LD_VAR 0 3
61328: ST_TO_ADDR
// vc_weapon := weapon ;
61329: LD_ADDR_OWVAR 40
61333: PUSH
61334: LD_VAR 0 4
61338: ST_TO_ADDR
// un := CreateVehicle ;
61339: LD_ADDR_VAR 0 8
61343: PUSH
61344: CALL_OW 45
61348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61349: LD_VAR 0 8
61353: PPUSH
61354: LD_INT 0
61356: PPUSH
61357: LD_INT 5
61359: PPUSH
61360: CALL_OW 12
61364: PPUSH
61365: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61369: LD_VAR 0 8
61373: PPUSH
61374: LD_VAR 0 5
61378: PPUSH
61379: LD_VAR 0 6
61383: PPUSH
61384: LD_INT 1
61386: PPUSH
61387: CALL_OW 48
// end ;
61391: LD_VAR 0 7
61395: RET
// export hInvincible ; every 1 do
61396: GO 61398
61398: DISABLE
// hInvincible := [ ] ;
61399: LD_ADDR_EXP 160
61403: PUSH
61404: EMPTY
61405: ST_TO_ADDR
61406: END
// every 10 do var i ;
61407: GO 61409
61409: DISABLE
61410: LD_INT 0
61412: PPUSH
// begin enable ;
61413: ENABLE
// if not hInvincible then
61414: LD_EXP 160
61418: NOT
61419: IFFALSE 61423
// exit ;
61421: GO 61467
// for i in hInvincible do
61423: LD_ADDR_VAR 0 1
61427: PUSH
61428: LD_EXP 160
61432: PUSH
61433: FOR_IN
61434: IFFALSE 61465
// if GetLives ( i ) < 1000 then
61436: LD_VAR 0 1
61440: PPUSH
61441: CALL_OW 256
61445: PUSH
61446: LD_INT 1000
61448: LESS
61449: IFFALSE 61463
// SetLives ( i , 1000 ) ;
61451: LD_VAR 0 1
61455: PPUSH
61456: LD_INT 1000
61458: PPUSH
61459: CALL_OW 234
61463: GO 61433
61465: POP
61466: POP
// end ;
61467: PPOPN 1
61469: END
// export function hHackInvincible ; var i ; begin
61470: LD_INT 0
61472: PPUSH
61473: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61474: LD_ADDR_VAR 0 2
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: LD_INT 21
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 21
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: PPUSH
61507: CALL_OW 69
61511: PUSH
61512: FOR_IN
61513: IFFALSE 61574
// if IsSelected ( i ) then
61515: LD_VAR 0 2
61519: PPUSH
61520: CALL_OW 306
61524: IFFALSE 61572
// begin if i in hInvincible then
61526: LD_VAR 0 2
61530: PUSH
61531: LD_EXP 160
61535: IN
61536: IFFALSE 61556
// hInvincible := hInvincible diff i else
61538: LD_ADDR_EXP 160
61542: PUSH
61543: LD_EXP 160
61547: PUSH
61548: LD_VAR 0 2
61552: DIFF
61553: ST_TO_ADDR
61554: GO 61572
// hInvincible := hInvincible union i ;
61556: LD_ADDR_EXP 160
61560: PUSH
61561: LD_EXP 160
61565: PUSH
61566: LD_VAR 0 2
61570: UNION
61571: ST_TO_ADDR
// end ;
61572: GO 61512
61574: POP
61575: POP
// end ;
61576: LD_VAR 0 1
61580: RET
// export function hHackInvisible ; var i , j ; begin
61581: LD_INT 0
61583: PPUSH
61584: PPUSH
61585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61586: LD_ADDR_VAR 0 2
61590: PUSH
61591: LD_INT 21
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PPUSH
61601: CALL_OW 69
61605: PUSH
61606: FOR_IN
61607: IFFALSE 61631
// if IsSelected ( i ) then
61609: LD_VAR 0 2
61613: PPUSH
61614: CALL_OW 306
61618: IFFALSE 61629
// ComForceInvisible ( i ) ;
61620: LD_VAR 0 2
61624: PPUSH
61625: CALL_OW 496
61629: GO 61606
61631: POP
61632: POP
// end ;
61633: LD_VAR 0 1
61637: RET
// export function hHackChangeYourSide ; begin
61638: LD_INT 0
61640: PPUSH
// if your_side = 8 then
61641: LD_OWVAR 2
61645: PUSH
61646: LD_INT 8
61648: EQUAL
61649: IFFALSE 61661
// your_side := 0 else
61651: LD_ADDR_OWVAR 2
61655: PUSH
61656: LD_INT 0
61658: ST_TO_ADDR
61659: GO 61675
// your_side := your_side + 1 ;
61661: LD_ADDR_OWVAR 2
61665: PUSH
61666: LD_OWVAR 2
61670: PUSH
61671: LD_INT 1
61673: PLUS
61674: ST_TO_ADDR
// end ;
61675: LD_VAR 0 1
61679: RET
// export function hHackChangeUnitSide ; var i , j ; begin
61680: LD_INT 0
61682: PPUSH
61683: PPUSH
61684: PPUSH
// for i in all_units do
61685: LD_ADDR_VAR 0 2
61689: PUSH
61690: LD_OWVAR 3
61694: PUSH
61695: FOR_IN
61696: IFFALSE 61774
// if IsSelected ( i ) then
61698: LD_VAR 0 2
61702: PPUSH
61703: CALL_OW 306
61707: IFFALSE 61772
// begin j := GetSide ( i ) ;
61709: LD_ADDR_VAR 0 3
61713: PUSH
61714: LD_VAR 0 2
61718: PPUSH
61719: CALL_OW 255
61723: ST_TO_ADDR
// if j = 8 then
61724: LD_VAR 0 3
61728: PUSH
61729: LD_INT 8
61731: EQUAL
61732: IFFALSE 61744
// j := 0 else
61734: LD_ADDR_VAR 0 3
61738: PUSH
61739: LD_INT 0
61741: ST_TO_ADDR
61742: GO 61758
// j := j + 1 ;
61744: LD_ADDR_VAR 0 3
61748: PUSH
61749: LD_VAR 0 3
61753: PUSH
61754: LD_INT 1
61756: PLUS
61757: ST_TO_ADDR
// SetSide ( i , j ) ;
61758: LD_VAR 0 2
61762: PPUSH
61763: LD_VAR 0 3
61767: PPUSH
61768: CALL_OW 235
// end ;
61772: GO 61695
61774: POP
61775: POP
// end ;
61776: LD_VAR 0 1
61780: RET
// export function hHackFog ; begin
61781: LD_INT 0
61783: PPUSH
// FogOff ( true ) ;
61784: LD_INT 1
61786: PPUSH
61787: CALL_OW 344
// end ;
61791: LD_VAR 0 1
61795: RET
// export function hHackTeleport ( unit , x , y ) ; begin
61796: LD_INT 0
61798: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
61799: LD_VAR 0 1
61803: PPUSH
61804: LD_VAR 0 2
61808: PPUSH
61809: LD_VAR 0 3
61813: PPUSH
61814: LD_INT 1
61816: PPUSH
61817: LD_INT 1
61819: PPUSH
61820: CALL_OW 483
// CenterOnXY ( x , y ) ;
61824: LD_VAR 0 2
61828: PPUSH
61829: LD_VAR 0 3
61833: PPUSH
61834: CALL_OW 84
// end ; end_of_file
61838: LD_VAR 0 4
61842: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
61843: LD_INT 0
61845: PPUSH
61846: PPUSH
61847: PPUSH
61848: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
61849: LD_VAR 0 1
61853: PPUSH
61854: CALL_OW 264
61858: PUSH
61859: LD_EXP 87
61863: EQUAL
61864: IFFALSE 61936
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
61866: LD_INT 68
61868: PPUSH
61869: LD_VAR 0 1
61873: PPUSH
61874: CALL_OW 255
61878: PPUSH
61879: CALL_OW 321
61883: PUSH
61884: LD_INT 2
61886: EQUAL
61887: IFFALSE 61899
// eff := 70 else
61889: LD_ADDR_VAR 0 4
61893: PUSH
61894: LD_INT 70
61896: ST_TO_ADDR
61897: GO 61907
// eff := 30 ;
61899: LD_ADDR_VAR 0 4
61903: PUSH
61904: LD_INT 30
61906: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
61907: LD_VAR 0 1
61911: PPUSH
61912: CALL_OW 250
61916: PPUSH
61917: LD_VAR 0 1
61921: PPUSH
61922: CALL_OW 251
61926: PPUSH
61927: LD_VAR 0 4
61931: PPUSH
61932: CALL_OW 495
// end ; end ;
61936: LD_VAR 0 2
61940: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
61941: LD_INT 0
61943: PPUSH
// end ;
61944: LD_VAR 0 4
61948: RET
// export function SOS_Command ( cmd ) ; begin
61949: LD_INT 0
61951: PPUSH
// end ;
61952: LD_VAR 0 2
61956: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
61957: LD_INT 0
61959: PPUSH
// end ;
61960: LD_VAR 0 6
61964: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
61965: LD_INT 0
61967: PPUSH
61968: PPUSH
// if not vehicle or not factory then
61969: LD_VAR 0 1
61973: NOT
61974: PUSH
61975: LD_VAR 0 2
61979: NOT
61980: OR
61981: IFFALSE 61985
// exit ;
61983: GO 62216
// if factoryWaypoints >= factory then
61985: LD_EXP 161
61989: PUSH
61990: LD_VAR 0 2
61994: GREATEREQUAL
61995: IFFALSE 62216
// if factoryWaypoints [ factory ] then
61997: LD_EXP 161
62001: PUSH
62002: LD_VAR 0 2
62006: ARRAY
62007: IFFALSE 62216
// begin if GetControl ( vehicle ) = control_manual then
62009: LD_VAR 0 1
62013: PPUSH
62014: CALL_OW 263
62018: PUSH
62019: LD_INT 1
62021: EQUAL
62022: IFFALSE 62103
// begin driver := IsDrivenBy ( vehicle ) ;
62024: LD_ADDR_VAR 0 4
62028: PUSH
62029: LD_VAR 0 1
62033: PPUSH
62034: CALL_OW 311
62038: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62039: LD_VAR 0 4
62043: PPUSH
62044: LD_EXP 161
62048: PUSH
62049: LD_VAR 0 2
62053: ARRAY
62054: PUSH
62055: LD_INT 3
62057: ARRAY
62058: PPUSH
62059: LD_EXP 161
62063: PUSH
62064: LD_VAR 0 2
62068: ARRAY
62069: PUSH
62070: LD_INT 4
62072: ARRAY
62073: PPUSH
62074: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62078: LD_VAR 0 4
62082: PPUSH
62083: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62087: LD_VAR 0 4
62091: PPUSH
62092: LD_VAR 0 2
62096: PPUSH
62097: CALL_OW 180
// end else
62101: GO 62216
// if GetControl ( vehicle ) = control_remote then
62103: LD_VAR 0 1
62107: PPUSH
62108: CALL_OW 263
62112: PUSH
62113: LD_INT 2
62115: EQUAL
62116: IFFALSE 62177
// begin wait ( 0 0$2 ) ;
62118: LD_INT 70
62120: PPUSH
62121: CALL_OW 67
// if Connect ( vehicle ) then
62125: LD_VAR 0 1
62129: PPUSH
62130: CALL 14940 0 1
62134: IFFALSE 62175
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62136: LD_VAR 0 1
62140: PPUSH
62141: LD_EXP 161
62145: PUSH
62146: LD_VAR 0 2
62150: ARRAY
62151: PUSH
62152: LD_INT 3
62154: ARRAY
62155: PPUSH
62156: LD_EXP 161
62160: PUSH
62161: LD_VAR 0 2
62165: ARRAY
62166: PUSH
62167: LD_INT 4
62169: ARRAY
62170: PPUSH
62171: CALL_OW 171
// end else
62175: GO 62216
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62177: LD_VAR 0 1
62181: PPUSH
62182: LD_EXP 161
62186: PUSH
62187: LD_VAR 0 2
62191: ARRAY
62192: PUSH
62193: LD_INT 3
62195: ARRAY
62196: PPUSH
62197: LD_EXP 161
62201: PUSH
62202: LD_VAR 0 2
62206: ARRAY
62207: PUSH
62208: LD_INT 4
62210: ARRAY
62211: PPUSH
62212: CALL_OW 171
// end ; end ;
62216: LD_VAR 0 3
62220: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62221: LD_INT 0
62223: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62224: LD_VAR 0 1
62228: PUSH
62229: LD_INT 250
62231: EQUAL
62232: PUSH
62233: LD_VAR 0 2
62237: PPUSH
62238: CALL_OW 264
62242: PUSH
62243: LD_EXP 90
62247: EQUAL
62248: AND
62249: IFFALSE 62270
// MinerPlaceMine ( unit , x , y ) ;
62251: LD_VAR 0 2
62255: PPUSH
62256: LD_VAR 0 4
62260: PPUSH
62261: LD_VAR 0 5
62265: PPUSH
62266: CALL 64998 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62270: LD_VAR 0 1
62274: PUSH
62275: LD_INT 251
62277: EQUAL
62278: PUSH
62279: LD_VAR 0 2
62283: PPUSH
62284: CALL_OW 264
62288: PUSH
62289: LD_EXP 90
62293: EQUAL
62294: AND
62295: IFFALSE 62316
// MinerDetonateMine ( unit , x , y ) ;
62297: LD_VAR 0 2
62301: PPUSH
62302: LD_VAR 0 4
62306: PPUSH
62307: LD_VAR 0 5
62311: PPUSH
62312: CALL 65275 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62316: LD_VAR 0 1
62320: PUSH
62321: LD_INT 252
62323: EQUAL
62324: PUSH
62325: LD_VAR 0 2
62329: PPUSH
62330: CALL_OW 264
62334: PUSH
62335: LD_EXP 90
62339: EQUAL
62340: AND
62341: IFFALSE 62362
// MinerCreateMinefield ( unit , x , y ) ;
62343: LD_VAR 0 2
62347: PPUSH
62348: LD_VAR 0 4
62352: PPUSH
62353: LD_VAR 0 5
62357: PPUSH
62358: CALL 65692 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62362: LD_VAR 0 1
62366: PUSH
62367: LD_INT 253
62369: EQUAL
62370: PUSH
62371: LD_VAR 0 2
62375: PPUSH
62376: CALL_OW 257
62380: PUSH
62381: LD_INT 5
62383: EQUAL
62384: AND
62385: IFFALSE 62406
// ComBinocular ( unit , x , y ) ;
62387: LD_VAR 0 2
62391: PPUSH
62392: LD_VAR 0 4
62396: PPUSH
62397: LD_VAR 0 5
62401: PPUSH
62402: CALL 66063 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62406: LD_VAR 0 1
62410: PUSH
62411: LD_INT 254
62413: EQUAL
62414: PUSH
62415: LD_VAR 0 2
62419: PPUSH
62420: CALL_OW 264
62424: PUSH
62425: LD_EXP 85
62429: EQUAL
62430: AND
62431: PUSH
62432: LD_VAR 0 3
62436: PPUSH
62437: CALL_OW 263
62441: PUSH
62442: LD_INT 3
62444: EQUAL
62445: AND
62446: IFFALSE 62462
// HackDestroyVehicle ( unit , selectedUnit ) ;
62448: LD_VAR 0 2
62452: PPUSH
62453: LD_VAR 0 3
62457: PPUSH
62458: CALL 64358 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62462: LD_VAR 0 1
62466: PUSH
62467: LD_INT 255
62469: EQUAL
62470: PUSH
62471: LD_VAR 0 2
62475: PPUSH
62476: CALL_OW 264
62480: PUSH
62481: LD_INT 14
62483: PUSH
62484: LD_INT 53
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: IN
62491: AND
62492: PUSH
62493: LD_VAR 0 4
62497: PPUSH
62498: LD_VAR 0 5
62502: PPUSH
62503: CALL_OW 488
62507: AND
62508: IFFALSE 62532
// CutTreeXYR ( unit , x , y , 12 ) ;
62510: LD_VAR 0 2
62514: PPUSH
62515: LD_VAR 0 4
62519: PPUSH
62520: LD_VAR 0 5
62524: PPUSH
62525: LD_INT 12
62527: PPUSH
62528: CALL 62924 0 4
// if cmd = 256 then
62532: LD_VAR 0 1
62536: PUSH
62537: LD_INT 256
62539: EQUAL
62540: IFFALSE 62561
// SetFactoryWaypoint ( unit , x , y ) ;
62542: LD_VAR 0 2
62546: PPUSH
62547: LD_VAR 0 4
62551: PPUSH
62552: LD_VAR 0 5
62556: PPUSH
62557: CALL 62566 0 3
// end ;
62561: LD_VAR 0 6
62565: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62566: LD_INT 0
62568: PPUSH
62569: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62570: LD_VAR 0 1
62574: NOT
62575: PUSH
62576: LD_VAR 0 2
62580: PPUSH
62581: LD_VAR 0 3
62585: PPUSH
62586: CALL_OW 488
62590: NOT
62591: OR
62592: PUSH
62593: LD_VAR 0 1
62597: PPUSH
62598: CALL_OW 266
62602: PUSH
62603: LD_INT 3
62605: NONEQUAL
62606: PUSH
62607: LD_VAR 0 1
62611: PPUSH
62612: CALL_OW 247
62616: PUSH
62617: LD_INT 1
62619: EQUAL
62620: NOT
62621: AND
62622: OR
62623: IFFALSE 62627
// exit ;
62625: GO 62776
// if GetType ( factory ) = unit_human then
62627: LD_VAR 0 1
62631: PPUSH
62632: CALL_OW 247
62636: PUSH
62637: LD_INT 1
62639: EQUAL
62640: IFFALSE 62657
// factory := IsInUnit ( factory ) ;
62642: LD_ADDR_VAR 0 1
62646: PUSH
62647: LD_VAR 0 1
62651: PPUSH
62652: CALL_OW 310
62656: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62657: LD_VAR 0 1
62661: PPUSH
62662: CALL_OW 266
62666: PUSH
62667: LD_INT 3
62669: NONEQUAL
62670: IFFALSE 62674
// exit ;
62672: GO 62776
// if HexInfo ( x , y ) = factory then
62674: LD_VAR 0 2
62678: PPUSH
62679: LD_VAR 0 3
62683: PPUSH
62684: CALL_OW 428
62688: PUSH
62689: LD_VAR 0 1
62693: EQUAL
62694: IFFALSE 62721
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62696: LD_ADDR_EXP 161
62700: PUSH
62701: LD_EXP 161
62705: PPUSH
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_INT 0
62713: PPUSH
62714: CALL_OW 1
62718: ST_TO_ADDR
62719: GO 62772
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62721: LD_ADDR_EXP 161
62725: PUSH
62726: LD_EXP 161
62730: PPUSH
62731: LD_VAR 0 1
62735: PPUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: CALL_OW 255
62745: PUSH
62746: LD_VAR 0 1
62750: PUSH
62751: LD_VAR 0 2
62755: PUSH
62756: LD_VAR 0 3
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: PPUSH
62767: CALL_OW 1
62771: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62772: CALL 62781 0 0
// end ;
62776: LD_VAR 0 4
62780: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
62781: LD_INT 0
62783: PPUSH
62784: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62785: LD_STRING resetFactoryWaypoint();
62787: PPUSH
62788: CALL_OW 559
// if factoryWaypoints then
62792: LD_EXP 161
62796: IFFALSE 62919
// begin for i := 1 to factoryWaypoints do
62798: LD_ADDR_VAR 0 2
62802: PUSH
62803: DOUBLE
62804: LD_INT 1
62806: DEC
62807: ST_TO_ADDR
62808: LD_EXP 161
62812: PUSH
62813: FOR_TO
62814: IFFALSE 62917
// if factoryWaypoints [ i ] then
62816: LD_EXP 161
62820: PUSH
62821: LD_VAR 0 2
62825: ARRAY
62826: IFFALSE 62915
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
62828: LD_STRING setFactoryWaypointXY(
62830: PUSH
62831: LD_EXP 161
62835: PUSH
62836: LD_VAR 0 2
62840: ARRAY
62841: PUSH
62842: LD_INT 1
62844: ARRAY
62845: STR
62846: PUSH
62847: LD_STRING ,
62849: STR
62850: PUSH
62851: LD_EXP 161
62855: PUSH
62856: LD_VAR 0 2
62860: ARRAY
62861: PUSH
62862: LD_INT 2
62864: ARRAY
62865: STR
62866: PUSH
62867: LD_STRING ,
62869: STR
62870: PUSH
62871: LD_EXP 161
62875: PUSH
62876: LD_VAR 0 2
62880: ARRAY
62881: PUSH
62882: LD_INT 3
62884: ARRAY
62885: STR
62886: PUSH
62887: LD_STRING ,
62889: STR
62890: PUSH
62891: LD_EXP 161
62895: PUSH
62896: LD_VAR 0 2
62900: ARRAY
62901: PUSH
62902: LD_INT 4
62904: ARRAY
62905: STR
62906: PUSH
62907: LD_STRING )
62909: STR
62910: PPUSH
62911: CALL_OW 559
62915: GO 62813
62917: POP
62918: POP
// end ; end ;
62919: LD_VAR 0 1
62923: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62924: LD_INT 0
62926: PPUSH
62927: PPUSH
62928: PPUSH
62929: PPUSH
62930: PPUSH
62931: PPUSH
62932: PPUSH
62933: PPUSH
62934: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62935: LD_VAR 0 1
62939: NOT
62940: PUSH
62941: LD_VAR 0 2
62945: PPUSH
62946: LD_VAR 0 3
62950: PPUSH
62951: CALL_OW 488
62955: NOT
62956: OR
62957: PUSH
62958: LD_VAR 0 4
62962: NOT
62963: OR
62964: IFFALSE 62968
// exit ;
62966: GO 63308
// list := [ ] ;
62968: LD_ADDR_VAR 0 13
62972: PUSH
62973: EMPTY
62974: ST_TO_ADDR
// if x - r < 0 then
62975: LD_VAR 0 2
62979: PUSH
62980: LD_VAR 0 4
62984: MINUS
62985: PUSH
62986: LD_INT 0
62988: LESS
62989: IFFALSE 63001
// min_x := 0 else
62991: LD_ADDR_VAR 0 7
62995: PUSH
62996: LD_INT 0
62998: ST_TO_ADDR
62999: GO 63017
// min_x := x - r ;
63001: LD_ADDR_VAR 0 7
63005: PUSH
63006: LD_VAR 0 2
63010: PUSH
63011: LD_VAR 0 4
63015: MINUS
63016: ST_TO_ADDR
// if y - r < 0 then
63017: LD_VAR 0 3
63021: PUSH
63022: LD_VAR 0 4
63026: MINUS
63027: PUSH
63028: LD_INT 0
63030: LESS
63031: IFFALSE 63043
// min_y := 0 else
63033: LD_ADDR_VAR 0 8
63037: PUSH
63038: LD_INT 0
63040: ST_TO_ADDR
63041: GO 63059
// min_y := y - r ;
63043: LD_ADDR_VAR 0 8
63047: PUSH
63048: LD_VAR 0 3
63052: PUSH
63053: LD_VAR 0 4
63057: MINUS
63058: ST_TO_ADDR
// max_x := x + r ;
63059: LD_ADDR_VAR 0 9
63063: PUSH
63064: LD_VAR 0 2
63068: PUSH
63069: LD_VAR 0 4
63073: PLUS
63074: ST_TO_ADDR
// max_y := y + r ;
63075: LD_ADDR_VAR 0 10
63079: PUSH
63080: LD_VAR 0 3
63084: PUSH
63085: LD_VAR 0 4
63089: PLUS
63090: ST_TO_ADDR
// for _x = min_x to max_x do
63091: LD_ADDR_VAR 0 11
63095: PUSH
63096: DOUBLE
63097: LD_VAR 0 7
63101: DEC
63102: ST_TO_ADDR
63103: LD_VAR 0 9
63107: PUSH
63108: FOR_TO
63109: IFFALSE 63226
// for _y = min_y to max_y do
63111: LD_ADDR_VAR 0 12
63115: PUSH
63116: DOUBLE
63117: LD_VAR 0 8
63121: DEC
63122: ST_TO_ADDR
63123: LD_VAR 0 10
63127: PUSH
63128: FOR_TO
63129: IFFALSE 63222
// begin if not ValidHex ( _x , _y ) then
63131: LD_VAR 0 11
63135: PPUSH
63136: LD_VAR 0 12
63140: PPUSH
63141: CALL_OW 488
63145: NOT
63146: IFFALSE 63150
// continue ;
63148: GO 63128
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63150: LD_VAR 0 11
63154: PPUSH
63155: LD_VAR 0 12
63159: PPUSH
63160: CALL_OW 351
63164: PUSH
63165: LD_VAR 0 11
63169: PPUSH
63170: LD_VAR 0 12
63174: PPUSH
63175: CALL_OW 554
63179: AND
63180: IFFALSE 63220
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63182: LD_ADDR_VAR 0 13
63186: PUSH
63187: LD_VAR 0 13
63191: PPUSH
63192: LD_VAR 0 13
63196: PUSH
63197: LD_INT 1
63199: PLUS
63200: PPUSH
63201: LD_VAR 0 11
63205: PUSH
63206: LD_VAR 0 12
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PPUSH
63215: CALL_OW 2
63219: ST_TO_ADDR
// end ;
63220: GO 63128
63222: POP
63223: POP
63224: GO 63108
63226: POP
63227: POP
// if not list then
63228: LD_VAR 0 13
63232: NOT
63233: IFFALSE 63237
// exit ;
63235: GO 63308
// for i in list do
63237: LD_ADDR_VAR 0 6
63241: PUSH
63242: LD_VAR 0 13
63246: PUSH
63247: FOR_IN
63248: IFFALSE 63306
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63250: LD_VAR 0 1
63254: PPUSH
63255: LD_STRING M
63257: PUSH
63258: LD_VAR 0 6
63262: PUSH
63263: LD_INT 1
63265: ARRAY
63266: PUSH
63267: LD_VAR 0 6
63271: PUSH
63272: LD_INT 2
63274: ARRAY
63275: PUSH
63276: LD_INT 0
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 0
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: PUSH
63297: EMPTY
63298: LIST
63299: PPUSH
63300: CALL_OW 447
63304: GO 63247
63306: POP
63307: POP
// end ;
63308: LD_VAR 0 5
63312: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63313: LD_EXP 162
63317: NOT
63318: IFFALSE 63368
63320: GO 63322
63322: DISABLE
// begin initHack := true ;
63323: LD_ADDR_EXP 162
63327: PUSH
63328: LD_INT 1
63330: ST_TO_ADDR
// hackTanks := [ ] ;
63331: LD_ADDR_EXP 163
63335: PUSH
63336: EMPTY
63337: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63338: LD_ADDR_EXP 164
63342: PUSH
63343: EMPTY
63344: ST_TO_ADDR
// hackLimit := 3 ;
63345: LD_ADDR_EXP 165
63349: PUSH
63350: LD_INT 3
63352: ST_TO_ADDR
// hackDist := 12 ;
63353: LD_ADDR_EXP 166
63357: PUSH
63358: LD_INT 12
63360: ST_TO_ADDR
// hackCounter := [ ] ;
63361: LD_ADDR_EXP 167
63365: PUSH
63366: EMPTY
63367: ST_TO_ADDR
// end ;
63368: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63369: LD_EXP 162
63373: PUSH
63374: LD_INT 34
63376: PUSH
63377: LD_EXP 85
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PPUSH
63386: CALL_OW 69
63390: AND
63391: IFFALSE 63646
63393: GO 63395
63395: DISABLE
63396: LD_INT 0
63398: PPUSH
63399: PPUSH
// begin enable ;
63400: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63401: LD_ADDR_VAR 0 1
63405: PUSH
63406: LD_INT 34
63408: PUSH
63409: LD_EXP 85
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PPUSH
63418: CALL_OW 69
63422: PUSH
63423: FOR_IN
63424: IFFALSE 63644
// begin if not i in hackTanks then
63426: LD_VAR 0 1
63430: PUSH
63431: LD_EXP 163
63435: IN
63436: NOT
63437: IFFALSE 63520
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63439: LD_ADDR_EXP 163
63443: PUSH
63444: LD_EXP 163
63448: PPUSH
63449: LD_EXP 163
63453: PUSH
63454: LD_INT 1
63456: PLUS
63457: PPUSH
63458: LD_VAR 0 1
63462: PPUSH
63463: CALL_OW 1
63467: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63468: LD_ADDR_EXP 164
63472: PUSH
63473: LD_EXP 164
63477: PPUSH
63478: LD_EXP 164
63482: PUSH
63483: LD_INT 1
63485: PLUS
63486: PPUSH
63487: EMPTY
63488: PPUSH
63489: CALL_OW 1
63493: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63494: LD_ADDR_EXP 167
63498: PUSH
63499: LD_EXP 167
63503: PPUSH
63504: LD_EXP 167
63508: PUSH
63509: LD_INT 1
63511: PLUS
63512: PPUSH
63513: EMPTY
63514: PPUSH
63515: CALL_OW 1
63519: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63520: LD_VAR 0 1
63524: PPUSH
63525: CALL_OW 302
63529: NOT
63530: IFFALSE 63543
// begin HackUnlinkAll ( i ) ;
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL 63649 0 1
// continue ;
63541: GO 63423
// end ; HackCheckCapturedStatus ( i ) ;
63543: LD_VAR 0 1
63547: PPUSH
63548: CALL 64092 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63552: LD_ADDR_VAR 0 2
63556: PUSH
63557: LD_INT 81
63559: PUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: CALL_OW 255
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 33
63576: PUSH
63577: LD_INT 3
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 91
63586: PUSH
63587: LD_VAR 0 1
63591: PUSH
63592: LD_EXP 166
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 50
63604: PUSH
63605: EMPTY
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: PPUSH
63614: CALL_OW 69
63618: ST_TO_ADDR
// if not tmp then
63619: LD_VAR 0 2
63623: NOT
63624: IFFALSE 63628
// continue ;
63626: GO 63423
// HackLink ( i , tmp ) ;
63628: LD_VAR 0 1
63632: PPUSH
63633: LD_VAR 0 2
63637: PPUSH
63638: CALL 63785 0 2
// end ;
63642: GO 63423
63644: POP
63645: POP
// end ;
63646: PPOPN 2
63648: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63649: LD_INT 0
63651: PPUSH
63652: PPUSH
63653: PPUSH
// if not hack in hackTanks then
63654: LD_VAR 0 1
63658: PUSH
63659: LD_EXP 163
63663: IN
63664: NOT
63665: IFFALSE 63669
// exit ;
63667: GO 63780
// index := GetElementIndex ( hackTanks , hack ) ;
63669: LD_ADDR_VAR 0 4
63673: PUSH
63674: LD_EXP 163
63678: PPUSH
63679: LD_VAR 0 1
63683: PPUSH
63684: CALL 11754 0 2
63688: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63689: LD_EXP 164
63693: PUSH
63694: LD_VAR 0 4
63698: ARRAY
63699: IFFALSE 63780
// begin for i in hackTanksCaptured [ index ] do
63701: LD_ADDR_VAR 0 3
63705: PUSH
63706: LD_EXP 164
63710: PUSH
63711: LD_VAR 0 4
63715: ARRAY
63716: PUSH
63717: FOR_IN
63718: IFFALSE 63744
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63720: LD_VAR 0 3
63724: PUSH
63725: LD_INT 1
63727: ARRAY
63728: PPUSH
63729: LD_VAR 0 3
63733: PUSH
63734: LD_INT 2
63736: ARRAY
63737: PPUSH
63738: CALL_OW 235
63742: GO 63717
63744: POP
63745: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63746: LD_ADDR_EXP 164
63750: PUSH
63751: LD_EXP 164
63755: PPUSH
63756: LD_VAR 0 4
63760: PPUSH
63761: EMPTY
63762: PPUSH
63763: CALL_OW 1
63767: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63768: LD_VAR 0 1
63772: PPUSH
63773: LD_INT 0
63775: PPUSH
63776: CALL_OW 505
// end ; end ;
63780: LD_VAR 0 2
63784: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63785: LD_INT 0
63787: PPUSH
63788: PPUSH
63789: PPUSH
// if not hack in hackTanks or not vehicles then
63790: LD_VAR 0 1
63794: PUSH
63795: LD_EXP 163
63799: IN
63800: NOT
63801: PUSH
63802: LD_VAR 0 2
63806: NOT
63807: OR
63808: IFFALSE 63812
// exit ;
63810: GO 64087
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63812: LD_ADDR_VAR 0 2
63816: PUSH
63817: LD_VAR 0 1
63821: PPUSH
63822: LD_VAR 0 2
63826: PPUSH
63827: LD_INT 1
63829: PPUSH
63830: LD_INT 1
63832: PPUSH
63833: CALL 12404 0 4
63837: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63838: LD_ADDR_VAR 0 5
63842: PUSH
63843: LD_EXP 163
63847: PPUSH
63848: LD_VAR 0 1
63852: PPUSH
63853: CALL 11754 0 2
63857: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63858: LD_EXP 164
63862: PUSH
63863: LD_VAR 0 5
63867: ARRAY
63868: PUSH
63869: LD_EXP 165
63873: LESS
63874: IFFALSE 64063
// begin for i := 1 to vehicles do
63876: LD_ADDR_VAR 0 4
63880: PUSH
63881: DOUBLE
63882: LD_INT 1
63884: DEC
63885: ST_TO_ADDR
63886: LD_VAR 0 2
63890: PUSH
63891: FOR_TO
63892: IFFALSE 64061
// begin if hackTanksCaptured [ index ] = hackLimit then
63894: LD_EXP 164
63898: PUSH
63899: LD_VAR 0 5
63903: ARRAY
63904: PUSH
63905: LD_EXP 165
63909: EQUAL
63910: IFFALSE 63914
// break ;
63912: GO 64061
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63914: LD_ADDR_EXP 167
63918: PUSH
63919: LD_EXP 167
63923: PPUSH
63924: LD_VAR 0 5
63928: PPUSH
63929: LD_EXP 167
63933: PUSH
63934: LD_VAR 0 5
63938: ARRAY
63939: PUSH
63940: LD_INT 1
63942: PLUS
63943: PPUSH
63944: CALL_OW 1
63948: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63949: LD_ADDR_EXP 164
63953: PUSH
63954: LD_EXP 164
63958: PPUSH
63959: LD_VAR 0 5
63963: PUSH
63964: LD_EXP 164
63968: PUSH
63969: LD_VAR 0 5
63973: ARRAY
63974: PUSH
63975: LD_INT 1
63977: PLUS
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PPUSH
63983: LD_VAR 0 2
63987: PUSH
63988: LD_VAR 0 4
63992: ARRAY
63993: PUSH
63994: LD_VAR 0 2
63998: PUSH
63999: LD_VAR 0 4
64003: ARRAY
64004: PPUSH
64005: CALL_OW 255
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PPUSH
64014: CALL 11969 0 3
64018: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
64019: LD_VAR 0 2
64023: PUSH
64024: LD_VAR 0 4
64028: ARRAY
64029: PPUSH
64030: LD_VAR 0 1
64034: PPUSH
64035: CALL_OW 255
64039: PPUSH
64040: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
64044: LD_VAR 0 2
64048: PUSH
64049: LD_VAR 0 4
64053: ARRAY
64054: PPUSH
64055: CALL_OW 141
// end ;
64059: GO 63891
64061: POP
64062: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64063: LD_VAR 0 1
64067: PPUSH
64068: LD_EXP 164
64072: PUSH
64073: LD_VAR 0 5
64077: ARRAY
64078: PUSH
64079: LD_INT 0
64081: PLUS
64082: PPUSH
64083: CALL_OW 505
// end ;
64087: LD_VAR 0 3
64091: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64092: LD_INT 0
64094: PPUSH
64095: PPUSH
64096: PPUSH
64097: PPUSH
// if not hack in hackTanks then
64098: LD_VAR 0 1
64102: PUSH
64103: LD_EXP 163
64107: IN
64108: NOT
64109: IFFALSE 64113
// exit ;
64111: GO 64353
// index := GetElementIndex ( hackTanks , hack ) ;
64113: LD_ADDR_VAR 0 4
64117: PUSH
64118: LD_EXP 163
64122: PPUSH
64123: LD_VAR 0 1
64127: PPUSH
64128: CALL 11754 0 2
64132: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64133: LD_ADDR_VAR 0 3
64137: PUSH
64138: DOUBLE
64139: LD_EXP 164
64143: PUSH
64144: LD_VAR 0 4
64148: ARRAY
64149: INC
64150: ST_TO_ADDR
64151: LD_INT 1
64153: PUSH
64154: FOR_DOWNTO
64155: IFFALSE 64327
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64157: LD_ADDR_VAR 0 5
64161: PUSH
64162: LD_EXP 164
64166: PUSH
64167: LD_VAR 0 4
64171: ARRAY
64172: PUSH
64173: LD_VAR 0 3
64177: ARRAY
64178: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64179: LD_VAR 0 5
64183: PUSH
64184: LD_INT 1
64186: ARRAY
64187: PPUSH
64188: CALL_OW 302
64192: NOT
64193: PUSH
64194: LD_VAR 0 5
64198: PUSH
64199: LD_INT 1
64201: ARRAY
64202: PPUSH
64203: CALL_OW 255
64207: PUSH
64208: LD_VAR 0 1
64212: PPUSH
64213: CALL_OW 255
64217: NONEQUAL
64218: OR
64219: IFFALSE 64325
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64221: LD_VAR 0 5
64225: PUSH
64226: LD_INT 1
64228: ARRAY
64229: PPUSH
64230: CALL_OW 305
64234: PUSH
64235: LD_VAR 0 5
64239: PUSH
64240: LD_INT 1
64242: ARRAY
64243: PPUSH
64244: CALL_OW 255
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 255
64258: EQUAL
64259: AND
64260: IFFALSE 64284
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64262: LD_VAR 0 5
64266: PUSH
64267: LD_INT 1
64269: ARRAY
64270: PPUSH
64271: LD_VAR 0 5
64275: PUSH
64276: LD_INT 2
64278: ARRAY
64279: PPUSH
64280: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64284: LD_ADDR_EXP 164
64288: PUSH
64289: LD_EXP 164
64293: PPUSH
64294: LD_VAR 0 4
64298: PPUSH
64299: LD_EXP 164
64303: PUSH
64304: LD_VAR 0 4
64308: ARRAY
64309: PPUSH
64310: LD_VAR 0 3
64314: PPUSH
64315: CALL_OW 3
64319: PPUSH
64320: CALL_OW 1
64324: ST_TO_ADDR
// end ; end ;
64325: GO 64154
64327: POP
64328: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64329: LD_VAR 0 1
64333: PPUSH
64334: LD_EXP 164
64338: PUSH
64339: LD_VAR 0 4
64343: ARRAY
64344: PUSH
64345: LD_INT 0
64347: PLUS
64348: PPUSH
64349: CALL_OW 505
// end ;
64353: LD_VAR 0 2
64357: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64358: LD_INT 0
64360: PPUSH
64361: PPUSH
64362: PPUSH
64363: PPUSH
// if not hack in hackTanks then
64364: LD_VAR 0 1
64368: PUSH
64369: LD_EXP 163
64373: IN
64374: NOT
64375: IFFALSE 64379
// exit ;
64377: GO 64464
// index := GetElementIndex ( hackTanks , hack ) ;
64379: LD_ADDR_VAR 0 5
64383: PUSH
64384: LD_EXP 163
64388: PPUSH
64389: LD_VAR 0 1
64393: PPUSH
64394: CALL 11754 0 2
64398: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64399: LD_ADDR_VAR 0 4
64403: PUSH
64404: DOUBLE
64405: LD_INT 1
64407: DEC
64408: ST_TO_ADDR
64409: LD_EXP 164
64413: PUSH
64414: LD_VAR 0 5
64418: ARRAY
64419: PUSH
64420: FOR_TO
64421: IFFALSE 64462
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64423: LD_EXP 164
64427: PUSH
64428: LD_VAR 0 5
64432: ARRAY
64433: PUSH
64434: LD_VAR 0 4
64438: ARRAY
64439: PUSH
64440: LD_INT 1
64442: ARRAY
64443: PUSH
64444: LD_VAR 0 2
64448: EQUAL
64449: IFFALSE 64460
// KillUnit ( vehicle ) ;
64451: LD_VAR 0 2
64455: PPUSH
64456: CALL_OW 66
64460: GO 64420
64462: POP
64463: POP
// end ;
64464: LD_VAR 0 3
64468: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64469: LD_EXP 168
64473: NOT
64474: IFFALSE 64509
64476: GO 64478
64478: DISABLE
// begin initMiner := true ;
64479: LD_ADDR_EXP 168
64483: PUSH
64484: LD_INT 1
64486: ST_TO_ADDR
// minersList := [ ] ;
64487: LD_ADDR_EXP 169
64491: PUSH
64492: EMPTY
64493: ST_TO_ADDR
// minerMinesList := [ ] ;
64494: LD_ADDR_EXP 170
64498: PUSH
64499: EMPTY
64500: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64501: LD_ADDR_EXP 171
64505: PUSH
64506: LD_INT 5
64508: ST_TO_ADDR
// end ;
64509: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64510: LD_EXP 168
64514: PUSH
64515: LD_INT 34
64517: PUSH
64518: LD_EXP 90
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PPUSH
64527: CALL_OW 69
64531: AND
64532: IFFALSE 64995
64534: GO 64536
64536: DISABLE
64537: LD_INT 0
64539: PPUSH
64540: PPUSH
64541: PPUSH
64542: PPUSH
// begin enable ;
64543: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64544: LD_ADDR_VAR 0 1
64548: PUSH
64549: LD_INT 34
64551: PUSH
64552: LD_EXP 90
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PPUSH
64561: CALL_OW 69
64565: PUSH
64566: FOR_IN
64567: IFFALSE 64639
// begin if not i in minersList then
64569: LD_VAR 0 1
64573: PUSH
64574: LD_EXP 169
64578: IN
64579: NOT
64580: IFFALSE 64637
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64582: LD_ADDR_EXP 169
64586: PUSH
64587: LD_EXP 169
64591: PPUSH
64592: LD_EXP 169
64596: PUSH
64597: LD_INT 1
64599: PLUS
64600: PPUSH
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 1
64610: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64611: LD_ADDR_EXP 170
64615: PUSH
64616: LD_EXP 170
64620: PPUSH
64621: LD_EXP 170
64625: PUSH
64626: LD_INT 1
64628: PLUS
64629: PPUSH
64630: EMPTY
64631: PPUSH
64632: CALL_OW 1
64636: ST_TO_ADDR
// end end ;
64637: GO 64566
64639: POP
64640: POP
// for i := minerMinesList downto 1 do
64641: LD_ADDR_VAR 0 1
64645: PUSH
64646: DOUBLE
64647: LD_EXP 170
64651: INC
64652: ST_TO_ADDR
64653: LD_INT 1
64655: PUSH
64656: FOR_DOWNTO
64657: IFFALSE 64993
// begin if IsLive ( minersList [ i ] ) then
64659: LD_EXP 169
64663: PUSH
64664: LD_VAR 0 1
64668: ARRAY
64669: PPUSH
64670: CALL_OW 300
64674: IFFALSE 64702
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64676: LD_EXP 169
64680: PUSH
64681: LD_VAR 0 1
64685: ARRAY
64686: PPUSH
64687: LD_EXP 170
64691: PUSH
64692: LD_VAR 0 1
64696: ARRAY
64697: PPUSH
64698: CALL_OW 505
// if not minerMinesList [ i ] then
64702: LD_EXP 170
64706: PUSH
64707: LD_VAR 0 1
64711: ARRAY
64712: NOT
64713: IFFALSE 64717
// continue ;
64715: GO 64656
// for j := minerMinesList [ i ] downto 1 do
64717: LD_ADDR_VAR 0 2
64721: PUSH
64722: DOUBLE
64723: LD_EXP 170
64727: PUSH
64728: LD_VAR 0 1
64732: ARRAY
64733: INC
64734: ST_TO_ADDR
64735: LD_INT 1
64737: PUSH
64738: FOR_DOWNTO
64739: IFFALSE 64989
// begin side := GetSide ( minersList [ i ] ) ;
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: LD_EXP 169
64750: PUSH
64751: LD_VAR 0 1
64755: ARRAY
64756: PPUSH
64757: CALL_OW 255
64761: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64762: LD_ADDR_VAR 0 4
64766: PUSH
64767: LD_EXP 170
64771: PUSH
64772: LD_VAR 0 1
64776: ARRAY
64777: PUSH
64778: LD_VAR 0 2
64782: ARRAY
64783: PUSH
64784: LD_INT 1
64786: ARRAY
64787: PPUSH
64788: LD_EXP 170
64792: PUSH
64793: LD_VAR 0 1
64797: ARRAY
64798: PUSH
64799: LD_VAR 0 2
64803: ARRAY
64804: PUSH
64805: LD_INT 2
64807: ARRAY
64808: PPUSH
64809: CALL_OW 428
64813: ST_TO_ADDR
// if not tmp then
64814: LD_VAR 0 4
64818: NOT
64819: IFFALSE 64823
// continue ;
64821: GO 64738
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64823: LD_VAR 0 4
64827: PUSH
64828: LD_INT 81
64830: PUSH
64831: LD_VAR 0 3
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PPUSH
64840: CALL_OW 69
64844: IN
64845: PUSH
64846: LD_EXP 170
64850: PUSH
64851: LD_VAR 0 1
64855: ARRAY
64856: PUSH
64857: LD_VAR 0 2
64861: ARRAY
64862: PUSH
64863: LD_INT 1
64865: ARRAY
64866: PPUSH
64867: LD_EXP 170
64871: PUSH
64872: LD_VAR 0 1
64876: ARRAY
64877: PUSH
64878: LD_VAR 0 2
64882: ARRAY
64883: PUSH
64884: LD_INT 2
64886: ARRAY
64887: PPUSH
64888: CALL_OW 458
64892: AND
64893: IFFALSE 64987
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64895: LD_EXP 170
64899: PUSH
64900: LD_VAR 0 1
64904: ARRAY
64905: PUSH
64906: LD_VAR 0 2
64910: ARRAY
64911: PUSH
64912: LD_INT 1
64914: ARRAY
64915: PPUSH
64916: LD_EXP 170
64920: PUSH
64921: LD_VAR 0 1
64925: ARRAY
64926: PUSH
64927: LD_VAR 0 2
64931: ARRAY
64932: PUSH
64933: LD_INT 2
64935: ARRAY
64936: PPUSH
64937: LD_VAR 0 3
64941: PPUSH
64942: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64946: LD_ADDR_EXP 170
64950: PUSH
64951: LD_EXP 170
64955: PPUSH
64956: LD_VAR 0 1
64960: PPUSH
64961: LD_EXP 170
64965: PUSH
64966: LD_VAR 0 1
64970: ARRAY
64971: PPUSH
64972: LD_VAR 0 2
64976: PPUSH
64977: CALL_OW 3
64981: PPUSH
64982: CALL_OW 1
64986: ST_TO_ADDR
// end ; end ;
64987: GO 64738
64989: POP
64990: POP
// end ;
64991: GO 64656
64993: POP
64994: POP
// end ;
64995: PPOPN 4
64997: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64998: LD_INT 0
65000: PPUSH
65001: PPUSH
// result := false ;
65002: LD_ADDR_VAR 0 4
65006: PUSH
65007: LD_INT 0
65009: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
65010: LD_VAR 0 1
65014: PPUSH
65015: CALL_OW 264
65019: PUSH
65020: LD_EXP 90
65024: EQUAL
65025: NOT
65026: IFFALSE 65030
// exit ;
65028: GO 65270
// index := GetElementIndex ( minersList , unit ) ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: LD_EXP 169
65039: PPUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: CALL 11754 0 2
65049: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
65050: LD_EXP 170
65054: PUSH
65055: LD_VAR 0 5
65059: ARRAY
65060: PUSH
65061: LD_EXP 171
65065: GREATEREQUAL
65066: IFFALSE 65070
// exit ;
65068: GO 65270
// ComMoveXY ( unit , x , y ) ;
65070: LD_VAR 0 1
65074: PPUSH
65075: LD_VAR 0 2
65079: PPUSH
65080: LD_VAR 0 3
65084: PPUSH
65085: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65089: LD_INT 35
65091: PPUSH
65092: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65096: LD_VAR 0 1
65100: PPUSH
65101: LD_VAR 0 2
65105: PPUSH
65106: LD_VAR 0 3
65110: PPUSH
65111: CALL 42473 0 3
65115: NOT
65116: PUSH
65117: LD_VAR 0 1
65121: PPUSH
65122: CALL_OW 314
65126: AND
65127: IFFALSE 65131
// exit ;
65129: GO 65270
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65131: LD_VAR 0 2
65135: PPUSH
65136: LD_VAR 0 3
65140: PPUSH
65141: CALL_OW 428
65145: PUSH
65146: LD_VAR 0 1
65150: EQUAL
65151: PUSH
65152: LD_VAR 0 1
65156: PPUSH
65157: CALL_OW 314
65161: NOT
65162: AND
65163: IFFALSE 65089
// PlaySoundXY ( x , y , PlantMine ) ;
65165: LD_VAR 0 2
65169: PPUSH
65170: LD_VAR 0 3
65174: PPUSH
65175: LD_STRING PlantMine
65177: PPUSH
65178: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65182: LD_VAR 0 2
65186: PPUSH
65187: LD_VAR 0 3
65191: PPUSH
65192: LD_VAR 0 1
65196: PPUSH
65197: CALL_OW 255
65201: PPUSH
65202: LD_INT 0
65204: PPUSH
65205: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65209: LD_ADDR_EXP 170
65213: PUSH
65214: LD_EXP 170
65218: PPUSH
65219: LD_VAR 0 5
65223: PUSH
65224: LD_EXP 170
65228: PUSH
65229: LD_VAR 0 5
65233: ARRAY
65234: PUSH
65235: LD_INT 1
65237: PLUS
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PPUSH
65243: LD_VAR 0 2
65247: PUSH
65248: LD_VAR 0 3
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PPUSH
65257: CALL 11969 0 3
65261: ST_TO_ADDR
// result := true ;
65262: LD_ADDR_VAR 0 4
65266: PUSH
65267: LD_INT 1
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 4
65274: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
// if not unit in minersList then
65280: LD_VAR 0 1
65284: PUSH
65285: LD_EXP 169
65289: IN
65290: NOT
65291: IFFALSE 65295
// exit ;
65293: GO 65687
// index := GetElementIndex ( minersList , unit ) ;
65295: LD_ADDR_VAR 0 6
65299: PUSH
65300: LD_EXP 169
65304: PPUSH
65305: LD_VAR 0 1
65309: PPUSH
65310: CALL 11754 0 2
65314: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65315: LD_ADDR_VAR 0 5
65319: PUSH
65320: DOUBLE
65321: LD_EXP 170
65325: PUSH
65326: LD_VAR 0 6
65330: ARRAY
65331: INC
65332: ST_TO_ADDR
65333: LD_INT 1
65335: PUSH
65336: FOR_DOWNTO
65337: IFFALSE 65498
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65339: LD_EXP 170
65343: PUSH
65344: LD_VAR 0 6
65348: ARRAY
65349: PUSH
65350: LD_VAR 0 5
65354: ARRAY
65355: PUSH
65356: LD_INT 1
65358: ARRAY
65359: PUSH
65360: LD_VAR 0 2
65364: EQUAL
65365: PUSH
65366: LD_EXP 170
65370: PUSH
65371: LD_VAR 0 6
65375: ARRAY
65376: PUSH
65377: LD_VAR 0 5
65381: ARRAY
65382: PUSH
65383: LD_INT 2
65385: ARRAY
65386: PUSH
65387: LD_VAR 0 3
65391: EQUAL
65392: AND
65393: IFFALSE 65496
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65395: LD_EXP 170
65399: PUSH
65400: LD_VAR 0 6
65404: ARRAY
65405: PUSH
65406: LD_VAR 0 5
65410: ARRAY
65411: PUSH
65412: LD_INT 1
65414: ARRAY
65415: PPUSH
65416: LD_EXP 170
65420: PUSH
65421: LD_VAR 0 6
65425: ARRAY
65426: PUSH
65427: LD_VAR 0 5
65431: ARRAY
65432: PUSH
65433: LD_INT 2
65435: ARRAY
65436: PPUSH
65437: LD_VAR 0 1
65441: PPUSH
65442: CALL_OW 255
65446: PPUSH
65447: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65451: LD_ADDR_EXP 170
65455: PUSH
65456: LD_EXP 170
65460: PPUSH
65461: LD_VAR 0 6
65465: PPUSH
65466: LD_EXP 170
65470: PUSH
65471: LD_VAR 0 6
65475: ARRAY
65476: PPUSH
65477: LD_VAR 0 5
65481: PPUSH
65482: CALL_OW 3
65486: PPUSH
65487: CALL_OW 1
65491: ST_TO_ADDR
// exit ;
65492: POP
65493: POP
65494: GO 65687
// end ; end ;
65496: GO 65336
65498: POP
65499: POP
// for i := minerMinesList [ index ] downto 1 do
65500: LD_ADDR_VAR 0 5
65504: PUSH
65505: DOUBLE
65506: LD_EXP 170
65510: PUSH
65511: LD_VAR 0 6
65515: ARRAY
65516: INC
65517: ST_TO_ADDR
65518: LD_INT 1
65520: PUSH
65521: FOR_DOWNTO
65522: IFFALSE 65685
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65524: LD_EXP 170
65528: PUSH
65529: LD_VAR 0 6
65533: ARRAY
65534: PUSH
65535: LD_VAR 0 5
65539: ARRAY
65540: PUSH
65541: LD_INT 1
65543: ARRAY
65544: PPUSH
65545: LD_EXP 170
65549: PUSH
65550: LD_VAR 0 6
65554: ARRAY
65555: PUSH
65556: LD_VAR 0 5
65560: ARRAY
65561: PUSH
65562: LD_INT 2
65564: ARRAY
65565: PPUSH
65566: LD_VAR 0 2
65570: PPUSH
65571: LD_VAR 0 3
65575: PPUSH
65576: CALL_OW 298
65580: PUSH
65581: LD_INT 6
65583: LESS
65584: IFFALSE 65683
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65586: LD_EXP 170
65590: PUSH
65591: LD_VAR 0 6
65595: ARRAY
65596: PUSH
65597: LD_VAR 0 5
65601: ARRAY
65602: PUSH
65603: LD_INT 1
65605: ARRAY
65606: PPUSH
65607: LD_EXP 170
65611: PUSH
65612: LD_VAR 0 6
65616: ARRAY
65617: PUSH
65618: LD_VAR 0 5
65622: ARRAY
65623: PUSH
65624: LD_INT 2
65626: ARRAY
65627: PPUSH
65628: LD_VAR 0 1
65632: PPUSH
65633: CALL_OW 255
65637: PPUSH
65638: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65642: LD_ADDR_EXP 170
65646: PUSH
65647: LD_EXP 170
65651: PPUSH
65652: LD_VAR 0 6
65656: PPUSH
65657: LD_EXP 170
65661: PUSH
65662: LD_VAR 0 6
65666: ARRAY
65667: PPUSH
65668: LD_VAR 0 5
65672: PPUSH
65673: CALL_OW 3
65677: PPUSH
65678: CALL_OW 1
65682: ST_TO_ADDR
// end ; end ;
65683: GO 65521
65685: POP
65686: POP
// end ;
65687: LD_VAR 0 4
65691: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65692: LD_INT 0
65694: PPUSH
65695: PPUSH
65696: PPUSH
65697: PPUSH
65698: PPUSH
65699: PPUSH
65700: PPUSH
65701: PPUSH
65702: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65703: LD_VAR 0 1
65707: PPUSH
65708: CALL_OW 264
65712: PUSH
65713: LD_EXP 90
65717: EQUAL
65718: NOT
65719: PUSH
65720: LD_VAR 0 1
65724: PUSH
65725: LD_EXP 169
65729: IN
65730: NOT
65731: OR
65732: IFFALSE 65736
// exit ;
65734: GO 66058
// index := GetElementIndex ( minersList , unit ) ;
65736: LD_ADDR_VAR 0 6
65740: PUSH
65741: LD_EXP 169
65745: PPUSH
65746: LD_VAR 0 1
65750: PPUSH
65751: CALL 11754 0 2
65755: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65756: LD_ADDR_VAR 0 8
65760: PUSH
65761: LD_EXP 171
65765: PUSH
65766: LD_EXP 170
65770: PUSH
65771: LD_VAR 0 6
65775: ARRAY
65776: MINUS
65777: ST_TO_ADDR
// if not minesFreeAmount then
65778: LD_VAR 0 8
65782: NOT
65783: IFFALSE 65787
// exit ;
65785: GO 66058
// tmp := [ ] ;
65787: LD_ADDR_VAR 0 7
65791: PUSH
65792: EMPTY
65793: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65794: LD_ADDR_VAR 0 5
65798: PUSH
65799: DOUBLE
65800: LD_INT 1
65802: DEC
65803: ST_TO_ADDR
65804: LD_VAR 0 8
65808: PUSH
65809: FOR_TO
65810: IFFALSE 66005
// begin _d := rand ( 0 , 5 ) ;
65812: LD_ADDR_VAR 0 11
65816: PUSH
65817: LD_INT 0
65819: PPUSH
65820: LD_INT 5
65822: PPUSH
65823: CALL_OW 12
65827: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65828: LD_ADDR_VAR 0 12
65832: PUSH
65833: LD_INT 2
65835: PPUSH
65836: LD_INT 6
65838: PPUSH
65839: CALL_OW 12
65843: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65844: LD_ADDR_VAR 0 9
65848: PUSH
65849: LD_VAR 0 2
65853: PPUSH
65854: LD_VAR 0 11
65858: PPUSH
65859: LD_VAR 0 12
65863: PPUSH
65864: CALL_OW 272
65868: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65869: LD_ADDR_VAR 0 10
65873: PUSH
65874: LD_VAR 0 3
65878: PPUSH
65879: LD_VAR 0 11
65883: PPUSH
65884: LD_VAR 0 12
65888: PPUSH
65889: CALL_OW 273
65893: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65894: LD_VAR 0 9
65898: PPUSH
65899: LD_VAR 0 10
65903: PPUSH
65904: CALL_OW 488
65908: PUSH
65909: LD_VAR 0 9
65913: PUSH
65914: LD_VAR 0 10
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_VAR 0 7
65927: IN
65928: NOT
65929: AND
65930: PUSH
65931: LD_VAR 0 9
65935: PPUSH
65936: LD_VAR 0 10
65940: PPUSH
65941: CALL_OW 458
65945: NOT
65946: AND
65947: IFFALSE 65989
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65949: LD_ADDR_VAR 0 7
65953: PUSH
65954: LD_VAR 0 7
65958: PPUSH
65959: LD_VAR 0 7
65963: PUSH
65964: LD_INT 1
65966: PLUS
65967: PPUSH
65968: LD_VAR 0 9
65972: PUSH
65973: LD_VAR 0 10
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PPUSH
65982: CALL_OW 1
65986: ST_TO_ADDR
65987: GO 66003
// i := i - 1 ;
65989: LD_ADDR_VAR 0 5
65993: PUSH
65994: LD_VAR 0 5
65998: PUSH
65999: LD_INT 1
66001: MINUS
66002: ST_TO_ADDR
// end ;
66003: GO 65809
66005: POP
66006: POP
// for i in tmp do
66007: LD_ADDR_VAR 0 5
66011: PUSH
66012: LD_VAR 0 7
66016: PUSH
66017: FOR_IN
66018: IFFALSE 66056
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
66020: LD_VAR 0 1
66024: PPUSH
66025: LD_VAR 0 5
66029: PUSH
66030: LD_INT 1
66032: ARRAY
66033: PPUSH
66034: LD_VAR 0 5
66038: PUSH
66039: LD_INT 2
66041: ARRAY
66042: PPUSH
66043: CALL 64998 0 3
66047: NOT
66048: IFFALSE 66054
// exit ;
66050: POP
66051: POP
66052: GO 66058
66054: GO 66017
66056: POP
66057: POP
// end ;
66058: LD_VAR 0 4
66062: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66063: LD_INT 0
66065: PPUSH
66066: PPUSH
66067: PPUSH
66068: PPUSH
66069: PPUSH
66070: PPUSH
66071: PPUSH
// if not GetClass ( unit ) = class_sniper then
66072: LD_VAR 0 1
66076: PPUSH
66077: CALL_OW 257
66081: PUSH
66082: LD_INT 5
66084: EQUAL
66085: NOT
66086: IFFALSE 66090
// exit ;
66088: GO 66478
// dist := 8 ;
66090: LD_ADDR_VAR 0 5
66094: PUSH
66095: LD_INT 8
66097: ST_TO_ADDR
// viewRange := 12 ;
66098: LD_ADDR_VAR 0 7
66102: PUSH
66103: LD_INT 12
66105: ST_TO_ADDR
// side := GetSide ( unit ) ;
66106: LD_ADDR_VAR 0 6
66110: PUSH
66111: LD_VAR 0 1
66115: PPUSH
66116: CALL_OW 255
66120: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66121: LD_INT 61
66123: PPUSH
66124: LD_VAR 0 6
66128: PPUSH
66129: CALL_OW 321
66133: PUSH
66134: LD_INT 2
66136: EQUAL
66137: IFFALSE 66147
// viewRange := 16 ;
66139: LD_ADDR_VAR 0 7
66143: PUSH
66144: LD_INT 16
66146: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66147: LD_VAR 0 1
66151: PPUSH
66152: LD_VAR 0 2
66156: PPUSH
66157: LD_VAR 0 3
66161: PPUSH
66162: CALL_OW 297
66166: PUSH
66167: LD_VAR 0 5
66171: GREATER
66172: IFFALSE 66251
// begin ComMoveXY ( unit , x , y ) ;
66174: LD_VAR 0 1
66178: PPUSH
66179: LD_VAR 0 2
66183: PPUSH
66184: LD_VAR 0 3
66188: PPUSH
66189: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66193: LD_INT 35
66195: PPUSH
66196: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66200: LD_VAR 0 1
66204: PPUSH
66205: LD_VAR 0 2
66209: PPUSH
66210: LD_VAR 0 3
66214: PPUSH
66215: CALL 42473 0 3
66219: NOT
66220: IFFALSE 66224
// exit ;
66222: GO 66478
// until GetDistUnitXY ( unit , x , y ) < dist ;
66224: LD_VAR 0 1
66228: PPUSH
66229: LD_VAR 0 2
66233: PPUSH
66234: LD_VAR 0 3
66238: PPUSH
66239: CALL_OW 297
66243: PUSH
66244: LD_VAR 0 5
66248: LESS
66249: IFFALSE 66193
// end ; ComTurnXY ( unit , x , y ) ;
66251: LD_VAR 0 1
66255: PPUSH
66256: LD_VAR 0 2
66260: PPUSH
66261: LD_VAR 0 3
66265: PPUSH
66266: CALL_OW 118
// wait ( 5 ) ;
66270: LD_INT 5
66272: PPUSH
66273: CALL_OW 67
// _d := GetDir ( unit ) ;
66277: LD_ADDR_VAR 0 10
66281: PUSH
66282: LD_VAR 0 1
66286: PPUSH
66287: CALL_OW 254
66291: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66292: LD_ADDR_VAR 0 8
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: CALL_OW 250
66306: PPUSH
66307: LD_VAR 0 10
66311: PPUSH
66312: LD_VAR 0 5
66316: PPUSH
66317: CALL_OW 272
66321: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66322: LD_ADDR_VAR 0 9
66326: PUSH
66327: LD_VAR 0 1
66331: PPUSH
66332: CALL_OW 251
66336: PPUSH
66337: LD_VAR 0 10
66341: PPUSH
66342: LD_VAR 0 5
66346: PPUSH
66347: CALL_OW 273
66351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66352: LD_VAR 0 8
66356: PPUSH
66357: LD_VAR 0 9
66361: PPUSH
66362: CALL_OW 488
66366: NOT
66367: IFFALSE 66371
// exit ;
66369: GO 66478
// ComAnimCustom ( unit , 1 ) ;
66371: LD_VAR 0 1
66375: PPUSH
66376: LD_INT 1
66378: PPUSH
66379: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66383: LD_VAR 0 8
66387: PPUSH
66388: LD_VAR 0 9
66392: PPUSH
66393: LD_VAR 0 6
66397: PPUSH
66398: LD_VAR 0 7
66402: PPUSH
66403: CALL_OW 330
// repeat wait ( 1 ) ;
66407: LD_INT 1
66409: PPUSH
66410: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66414: LD_VAR 0 1
66418: PPUSH
66419: CALL_OW 316
66423: PUSH
66424: LD_VAR 0 1
66428: PPUSH
66429: CALL_OW 314
66433: OR
66434: PUSH
66435: LD_VAR 0 1
66439: PPUSH
66440: CALL_OW 302
66444: NOT
66445: OR
66446: PUSH
66447: LD_VAR 0 1
66451: PPUSH
66452: CALL_OW 301
66456: OR
66457: IFFALSE 66407
// RemoveSeeing ( _x , _y , side ) ;
66459: LD_VAR 0 8
66463: PPUSH
66464: LD_VAR 0 9
66468: PPUSH
66469: LD_VAR 0 6
66473: PPUSH
66474: CALL_OW 331
// end ; end_of_file
66478: LD_VAR 0 4
66482: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66483: LD_VAR 0 1
66487: PUSH
66488: LD_INT 200
66490: DOUBLE
66491: GREATEREQUAL
66492: IFFALSE 66500
66494: LD_INT 299
66496: DOUBLE
66497: LESSEQUAL
66498: IFTRUE 66502
66500: GO 66534
66502: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66503: LD_VAR 0 1
66507: PPUSH
66508: LD_VAR 0 2
66512: PPUSH
66513: LD_VAR 0 3
66517: PPUSH
66518: LD_VAR 0 4
66522: PPUSH
66523: LD_VAR 0 5
66527: PPUSH
66528: CALL 62221 0 5
66532: GO 66611
66534: LD_INT 300
66536: DOUBLE
66537: GREATEREQUAL
66538: IFFALSE 66546
66540: LD_INT 399
66542: DOUBLE
66543: LESSEQUAL
66544: IFTRUE 66548
66546: GO 66610
66548: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_VAR 0 2
66558: PPUSH
66559: LD_VAR 0 3
66563: PPUSH
66564: LD_VAR 0 4
66568: PPUSH
66569: LD_VAR 0 5
66573: PPUSH
66574: LD_VAR 0 6
66578: PPUSH
66579: LD_VAR 0 7
66583: PPUSH
66584: LD_VAR 0 8
66588: PPUSH
66589: LD_VAR 0 9
66593: PPUSH
66594: LD_VAR 0 10
66598: PPUSH
66599: LD_VAR 0 11
66603: PPUSH
66604: CALL 59863 0 11
66608: GO 66611
66610: POP
// end ;
66611: PPOPN 11
66613: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66614: LD_VAR 0 1
66618: PPUSH
66619: LD_VAR 0 2
66623: PPUSH
66624: LD_VAR 0 3
66628: PPUSH
66629: LD_VAR 0 4
66633: PPUSH
66634: LD_VAR 0 5
66638: PPUSH
66639: CALL 61957 0 5
// end ;
66643: PPOPN 5
66645: END
