// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export meetBelkovBrother ; export cratesResources , oilResources ; export vehiclesPreviousMission ; export spawnCrates ; export scholtzeSpawned , scholtzeSaved ; export dialog_workshop , dialog_amSupportTroops , dialog_track , dialog_stop ; export americanTroopsArriveOmicronCounter ; export kurinGiveMoreTime , extraTime , timeToArrive ; export produceMoreVehicles , produceOnlyForYou , kurinCheckVehicles ; export meetNearOmicronBase , attackOmicron ; export kirovFactory , kirovCompleteFactory ; export omicronSurrender , canExitBattlefield ; export immortalSurvivors ; export kurinOpinion , platonovOpinion ; export canDestroyBeriaBase ; export enableOmicronAI ; export kirovCanCaptureVehicles ; export endCutscene ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 317 0 0
// meetBelkovBrother = LoadVariable ( 02_MeetBelkovBrother_6 , 0 ) ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_STRING 02_MeetBelkovBrother_6
  31: PPUSH
  32: LD_INT 0
  34: PPUSH
  35: CALL_OW 30
  39: ST_TO_ADDR
// cratesResources = LoadVariable ( 02_BeriaResourceCrates_7 , 0 ) ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_STRING 02_BeriaResourceCrates_7
  47: PPUSH
  48: LD_INT 0
  50: PPUSH
  51: CALL_OW 30
  55: ST_TO_ADDR
// oilResources = LoadVariable ( 02_BeriaResourceOil_8 , 0 ) ;
  56: LD_ADDR_EXP 3
  60: PUSH
  61: LD_STRING 02_BeriaResourceOil_8
  63: PPUSH
  64: LD_INT 0
  66: PPUSH
  67: CALL_OW 30
  71: ST_TO_ADDR
// vehiclesPreviousMission = LoadVariable ( 02_Vehicles_1 , 0 ) ;
  72: LD_ADDR_EXP 4
  76: PUSH
  77: LD_STRING 02_Vehicles_1
  79: PPUSH
  80: LD_INT 0
  82: PPUSH
  83: CALL_OW 30
  87: ST_TO_ADDR
// platonovOpinion = LoadVariable ( 02_PlatonovOpinion_9 , 0 ) ;
  88: LD_ADDR_EXP 27
  92: PUSH
  93: LD_STRING 02_PlatonovOpinion_9
  95: PPUSH
  96: LD_INT 0
  98: PPUSH
  99: CALL_OW 30
 103: ST_TO_ADDR
// kurinOpinion = - 1 ;
 104: LD_ADDR_EXP 26
 108: PUSH
 109: LD_INT 1
 111: NEG
 112: ST_TO_ADDR
// scholtzeSpawned = false ;
 113: LD_ADDR_EXP 6
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// scholtzeSaved = false ;
 121: LD_ADDR_EXP 7
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// americanTroopsArriveOmicronCounter = 0 ;
 129: LD_ADDR_EXP 12
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// spawnCrates = true ;
 137: LD_ADDR_EXP 5
 141: PUSH
 142: LD_INT 1
 144: ST_TO_ADDR
// dialog_track = false ;
 145: LD_ADDR_EXP 10
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// dialog_workshop = false ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// dialog_stop = false ;
 161: LD_ADDR_EXP 11
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// counterEnable = false ;
 169: LD_ADDR_EXP 88
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// extraTime = 7 7$00 ;
 177: LD_ADDR_EXP 14
 181: PUSH
 182: LD_INT 14700
 184: ST_TO_ADDR
// kurinGiveMoreTime = false ;
 185: LD_ADDR_EXP 13
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 4200
 200: ST_TO_ADDR
// produceOnlyForYou = false ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// produceMoreVehicles = false ;
 209: LD_ADDR_EXP 16
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// kurinCheckVehicles = false ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_INT 0
 224: ST_TO_ADDR
// omicronSurrender = false ;
 225: LD_ADDR_EXP 23
 229: PUSH
 230: LD_INT 0
 232: ST_TO_ADDR
// canExitBattlefield = true ;
 233: LD_ADDR_EXP 24
 237: PUSH
 238: LD_INT 1
 240: ST_TO_ADDR
// immortalSurvivors = false ;
 241: LD_ADDR_EXP 25
 245: PUSH
 246: LD_INT 0
 248: ST_TO_ADDR
// canDestroyBeriaBase = false ;
 249: LD_ADDR_EXP 28
 253: PUSH
 254: LD_INT 0
 256: ST_TO_ADDR
// endCutscene = false ;
 257: LD_ADDR_EXP 31
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// kirovCanCaptureVehicles = [ ] ;
 265: LD_ADDR_EXP 30
 269: PUSH
 270: EMPTY
 271: ST_TO_ADDR
// kirovFactory = 0 ;
 272: LD_ADDR_EXP 21
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// kirovCompleteFactory = false ;
 280: LD_ADDR_EXP 22
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// enableOmicronAI = true ;
 288: LD_ADDR_EXP 29
 292: PUSH
 293: LD_INT 1
 295: ST_TO_ADDR
// PrepareRussians ;
 296: CALL 940 0 0
// PrepareAmericans ;
 300: CALL 5409 0 0
// Nef_PrepareNature ;
 304: CALL 29911 0 0
// MissionIntro ;
 308: CALL 21537 0 0
// end ; end_of_file
 312: LD_VAR 0 1
 316: RET
// export function InitMapConfig ; begin
 317: LD_INT 0
 319: PPUSH
// BaseMapConfig ;
 320: CALL 333 0 0
// MissionMapConfig ;
 324: CALL 435 0 0
// end ;
 328: LD_VAR 0 1
 332: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 333: LD_INT 0
 335: PPUSH
// animalsAmount = [ 8 , 12 , 6 , 6 , 3 ] ;
 336: LD_ADDR_EXP 32
 340: PUSH
 341: LD_INT 8
 343: PUSH
 344: LD_INT 12
 346: PUSH
 347: LD_INT 6
 349: PUSH
 350: LD_INT 6
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 363: LD_ADDR_EXP 33
 367: PUSH
 368: LD_INT 2
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 2
 376: PUSH
 377: LD_INT 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// animalsAgression = [ rand ( - 5 , 5 ) ] ;
 386: LD_ADDR_EXP 34
 390: PUSH
 391: LD_INT 5
 393: NEG
 394: PPUSH
 395: LD_INT 5
 397: PPUSH
 398: CALL_OW 12
 402: PUSH
 403: EMPTY
 404: LIST
 405: ST_TO_ADDR
// debugMode = 0 ;
 406: LD_ADDR_EXP 37
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// missionPrefix = 03_ ;
 414: LD_ADDR_EXP 35
 418: PUSH
 419: LD_STRING 03_
 421: ST_TO_ADDR
// previousMissionPrefix = 02_ ;
 422: LD_ADDR_EXP 36
 426: PUSH
 427: LD_STRING 02_
 429: ST_TO_ADDR
// end ;
 430: LD_VAR 0 1
 434: RET
// export baseUnitsToChoose , scholtzeSpawnPositions ; export timeToPrepareAttack ; export bonusResourcesCrates , bonusResourcesOil ; export enemySkillLevel ; export americanWeapons , russianWeapons ; export maxAmericanTroopsIgnore ; export animalsSafeTime ; function MissionMapConfig ; begin
 435: LD_INT 0
 437: PPUSH
// baseUnitsToChoose = [ 7 , 6 , 6 ] [ Difficulty ] ;
 438: LD_ADDR_EXP 38
 442: PUSH
 443: LD_INT 7
 445: PUSH
 446: LD_INT 6
 448: PUSH
 449: LD_INT 6
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: ST_TO_ADDR
// timeToPrepareAttack = [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 463: LD_ADDR_EXP 40
 467: PUSH
 468: LD_INT 84000
 470: PUSH
 471: LD_INT 73500
 473: PUSH
 474: LD_INT 63000
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: LD_OWVAR 67
 486: ARRAY
 487: ST_TO_ADDR
// bonusResourcesCrates = [ 150 , 100 , 50 ] [ Difficulty ] ;
 488: LD_ADDR_EXP 41
 492: PUSH
 493: LD_INT 150
 495: PUSH
 496: LD_INT 100
 498: PUSH
 499: LD_INT 50
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: LD_OWVAR 67
 511: ARRAY
 512: ST_TO_ADDR
// bonusResourcesOil = [ 100 , 50 , 0 ] [ Difficulty ] ;
 513: LD_ADDR_EXP 42
 517: PUSH
 518: LD_INT 100
 520: PUSH
 521: LD_INT 50
 523: PUSH
 524: LD_INT 0
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: PUSH
 532: LD_OWVAR 67
 536: ARRAY
 537: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 538: LD_ADDR_EXP 43
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: LD_INT 2
 548: PUSH
 549: LD_INT 2
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: LD_OWVAR 67
 561: ARRAY
 562: ST_TO_ADDR
// maxAmericanTroopsIgnore = [ 8 , 6 , 5 ] [ Difficulty ] ;
 563: LD_ADDR_EXP 46
 567: PUSH
 568: LD_INT 8
 570: PUSH
 571: LD_INT 6
 573: PUSH
 574: LD_INT 5
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: LIST
 581: PUSH
 582: LD_OWVAR 67
 586: ARRAY
 587: ST_TO_ADDR
// animalsSafeTime = [ 8 8$30 , 8 8$00 , 7 7$30 ] [ Difficulty ] ;
 588: LD_ADDR_EXP 47
 592: PUSH
 593: LD_INT 17850
 595: PUSH
 596: LD_INT 16800
 598: PUSH
 599: LD_INT 15750
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// end ;
 613: LD_VAR 0 1
 617: RET
// every 0 0$1 trigger debugMode do var i ;
 618: LD_EXP 37
 622: IFFALSE 937
 624: GO 626
 626: DISABLE
 627: LD_INT 0
 629: PPUSH
// begin enable ;
 630: ENABLE
// FogOff ( your_side ) ;
 631: LD_OWVAR 2
 635: PPUSH
 636: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 640: LD_ADDR_VAR 0 1
 644: PUSH
 645: LD_INT 22
 647: PUSH
 648: LD_OWVAR 2
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 21
 662: PUSH
 663: LD_INT 1
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 21
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 711
// SetLives ( i , 1000 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: LD_INT 1000
 704: PPUSH
 705: CALL_OW 234
 709: GO 694
 711: POP
 712: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 713: LD_ADDR_VAR 0 1
 717: PUSH
 718: LD_INT 22
 720: PUSH
 721: LD_OWVAR 2
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 21
 732: PUSH
 733: LD_INT 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PPUSH
 744: CALL_OW 69
 748: PUSH
 749: FOR_IN
 750: IFFALSE 814
// begin SetSkill ( i , skill_combat , 10 ) ;
 752: LD_VAR 0 1
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_INT 10
 762: PPUSH
 763: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 767: LD_VAR 0 1
 771: PPUSH
 772: LD_INT 2
 774: PPUSH
 775: LD_INT 10
 777: PPUSH
 778: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_INT 3
 789: PPUSH
 790: LD_INT 10
 792: PPUSH
 793: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 797: LD_VAR 0 1
 801: PPUSH
 802: LD_INT 4
 804: PPUSH
 805: LD_INT 10
 807: PPUSH
 808: CALL_OW 237
// end ;
 812: GO 749
 814: POP
 815: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 816: LD_ADDR_VAR 0 1
 820: PUSH
 821: LD_INT 22
 823: PUSH
 824: LD_OWVAR 2
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 2
 835: PUSH
 836: LD_INT 30
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 1
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: PUSH
 870: FOR_IN
 871: IFFALSE 935
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 873: LD_VAR 0 1
 877: PPUSH
 878: CALL_OW 274
 882: PPUSH
 883: LD_INT 1
 885: PPUSH
 886: LD_INT 9999
 888: PPUSH
 889: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 893: LD_VAR 0 1
 897: PPUSH
 898: CALL_OW 274
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: LD_INT 9999
 908: PPUSH
 909: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 913: LD_VAR 0 1
 917: PPUSH
 918: CALL_OW 274
 922: PPUSH
 923: LD_INT 3
 925: PPUSH
 926: LD_INT 9999
 928: PPUSH
 929: CALL_OW 277
// end ;
 933: GO 870
 935: POP
 936: POP
// end ; end_of_file
 937: PPOPN 1
 939: END
// export Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 ; export Scholtze ; export other_survivors ; export playerVehicles ; export otherBeriaUnits , beriaBase , beriaDepot ; export Kurin , Popov , BelkovDialog ; export ruScout ; export otherKirovUnits ; export kirovBase , kirovDepot , kirovOilDepot ; export ru2_bar1 , ru2_bar2 ; export kirovEng ; export kirovBunkersToMountWeapon , kirovBunkersToOccupy ; export kirovTransportCargo ; export kirovAttackCargo , kirovAttackVehicles ; export kirovBunkerCounter ; export secondBaseTeam ; export survivorsArabianAttack ; export survivorsToSpawn ; export neededUnitsSpawn ; export Grishko ; export function PrepareRussians ; begin
 940: LD_INT 0
 942: PPUSH
// neededUnitsSpawn = [ 0 , 0 , 0 , 0 ] ;
 943: LD_ADDR_EXP 80
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: LD_INT 0
 956: PUSH
 957: LD_INT 0
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: ST_TO_ADDR
// kirovAttackCargo = [ ] ;
 966: LD_ADDR_EXP 74
 970: PUSH
 971: EMPTY
 972: ST_TO_ADDR
// PrepareKirovBase ;
 973: CALL 2029 0 0
// PrepareHeroes ;
 977: CALL 1010 0 0
// PrepareKirovPersonel ;
 981: CALL 2794 0 0
// PrepareBeriaBase ;
 985: CALL 1431 0 0
// PrepareSecondBaseTeam ;
 989: CALL 3937 0 0
// PrepareGrishko ;
 993: CALL 3122 0 0
// PrepareOtherBuildings ;
 997: CALL 3371 0 0
// PrepareVehicles ;
1001: CALL 3195 0 0
// end ;
1005: LD_VAR 0 1
1009: RET
// function PrepareHeroes ; begin
1010: LD_INT 0
1012: PPUSH
// uc_side = 3 ;
1013: LD_ADDR_OWVAR 20
1017: PUSH
1018: LD_INT 3
1020: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true ) ;
1021: LD_ADDR_EXP 48
1025: PUSH
1026: LD_STRING Burlak
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: CALL 6913 0 2
1036: ST_TO_ADDR
// Gnyevko := PrepareUnitExt ( Gnyevko , true ) ;
1037: LD_ADDR_EXP 49
1041: PUSH
1042: LD_STRING Gnyevko
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL 6913 0 2
1052: ST_TO_ADDR
// Kovalyuk := PrepareUnitExt ( Kovalyuk , true ) ;
1053: LD_ADDR_EXP 51
1057: PUSH
1058: LD_STRING Kovalyuk
1060: PPUSH
1061: LD_INT 1
1063: PPUSH
1064: CALL 6913 0 2
1068: ST_TO_ADDR
// Kirilenkova = PrepareUnitExt ( Kirilenkova , true ) ;
1069: LD_ADDR_EXP 50
1073: PUSH
1074: LD_STRING Kirilenkova
1076: PPUSH
1077: LD_INT 1
1079: PPUSH
1080: CALL 6913 0 2
1084: ST_TO_ADDR
// SetClass ( [ Burlak , Gnyevko , Kovalyuk ] , 3 ) ;
1085: LD_EXP 48
1089: PUSH
1090: LD_EXP 49
1094: PUSH
1095: LD_EXP 51
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PPUSH
1105: LD_INT 3
1107: PPUSH
1108: CALL_OW 336
// SetClass ( Kirilenkova , 4 ) ;
1112: LD_EXP 50
1116: PPUSH
1117: LD_INT 4
1119: PPUSH
1120: CALL_OW 336
// uc_side = 6 ;
1124: LD_ADDR_OWVAR 20
1128: PUSH
1129: LD_INT 6
1131: ST_TO_ADDR
// if not meetBelkovBrother and TestCharacters ( 02_Belkov ) then
1132: LD_EXP 1
1136: NOT
1137: PUSH
1138: LD_STRING 02_Belkov
1140: PPUSH
1141: CALL_OW 28
1145: AND
1146: IFFALSE 1247
// begin Belkov := PrepareUnitExt ( Belkov , true ) ;
1148: LD_ADDR_EXP 52
1152: PUSH
1153: LD_STRING Belkov
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL 6913 0 2
1163: ST_TO_ADDR
// if TestCharacters ( 02_Belkov2 ) then
1164: LD_STRING 02_Belkov2
1166: PPUSH
1167: CALL_OW 28
1171: IFFALSE 1210
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1173: LD_ADDR_EXP 53
1177: PUSH
1178: LD_STRING Belkov2
1180: PPUSH
1181: LD_INT 1
1183: PPUSH
1184: CALL 6913 0 2
1188: ST_TO_ADDR
// PlaceUnitXYR ( Belkov2 , 159 , 107 , 5 , false ) ;
1189: LD_EXP 53
1193: PPUSH
1194: LD_INT 159
1196: PPUSH
1197: LD_INT 107
1199: PPUSH
1200: LD_INT 5
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 50
// end ; BelkovDialog = Belkov ;
1210: LD_ADDR_EXP 62
1214: PUSH
1215: LD_EXP 52
1219: ST_TO_ADDR
// PlaceUnitXY ( Belkov , 165 , 110 , false ) ;
1220: LD_EXP 52
1224: PPUSH
1225: LD_INT 165
1227: PPUSH
1228: LD_INT 110
1230: PPUSH
1231: LD_INT 0
1233: PPUSH
1234: CALL_OW 48
// ComHold ( Belkov ) ;
1238: LD_EXP 52
1242: PPUSH
1243: CALL_OW 140
// end ; if meetBelkovBrother and TestCharacters ( 02_Belkov2 ) then
1247: LD_EXP 1
1251: PUSH
1252: LD_STRING 02_Belkov2
1254: PPUSH
1255: CALL_OW 28
1259: AND
1260: IFFALSE 1315
// begin Belkov2 := PrepareUnitExt ( Belkov2 , true ) ;
1262: LD_ADDR_EXP 53
1266: PUSH
1267: LD_STRING Belkov2
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: CALL 6913 0 2
1277: ST_TO_ADDR
// BelkovDialog = Belkov2 ;
1278: LD_ADDR_EXP 62
1282: PUSH
1283: LD_EXP 53
1287: ST_TO_ADDR
// PlaceUnitXY ( Belkov2 , 165 , 110 , false ) ;
1288: LD_EXP 53
1292: PPUSH
1293: LD_INT 165
1295: PPUSH
1296: LD_INT 110
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: CALL_OW 48
// ComHold ( Belkov2 ) ;
1306: LD_EXP 53
1310: PPUSH
1311: CALL_OW 140
// end ; SetClass ( [ Belkov , Belkov2 ] , 1 ) ;
1315: LD_EXP 52
1319: PUSH
1320: LD_EXP 53
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PPUSH
1329: LD_INT 1
1331: PPUSH
1332: CALL_OW 336
// PlaceUnitXY ( Burlak , 164 , 108 , false ) ;
1336: LD_EXP 48
1340: PPUSH
1341: LD_INT 164
1343: PPUSH
1344: LD_INT 108
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL_OW 48
// ComHold ( Burlak ) ;
1354: LD_EXP 48
1358: PPUSH
1359: CALL_OW 140
// PlaceUnitXYR ( Gnyevko , 159 , 107 , 5 , false ) ;
1363: LD_EXP 49
1367: PPUSH
1368: LD_INT 159
1370: PPUSH
1371: LD_INT 107
1373: PPUSH
1374: LD_INT 5
1376: PPUSH
1377: LD_INT 0
1379: PPUSH
1380: CALL_OW 50
// PlaceUnitXYR ( Kovalyuk , 159 , 107 , 5 , false ) ;
1384: LD_EXP 51
1388: PPUSH
1389: LD_INT 159
1391: PPUSH
1392: LD_INT 107
1394: PPUSH
1395: LD_INT 5
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 50
// PlaceUnitXYR ( Kirilenkova , 159 , 107 , 5 , false ) ;
1405: LD_EXP 50
1409: PPUSH
1410: LD_INT 159
1412: PPUSH
1413: LD_INT 107
1415: PPUSH
1416: LD_INT 5
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 50
// end ;
1426: LD_VAR 0 1
1430: RET
// function PrepareBeriaBase ; var i , bonusResources ; begin
1431: LD_INT 0
1433: PPUSH
1434: PPUSH
1435: PPUSH
// beriaBase = LoadVariable ( 02_BeriaBase_2 , [ ] ) ;
1436: LD_ADDR_EXP 58
1440: PUSH
1441: LD_STRING 02_BeriaBase_2
1443: PPUSH
1444: EMPTY
1445: PPUSH
1446: CALL_OW 30
1450: ST_TO_ADDR
// otherBeriaUnits = CreateCharacterSet ( 02_other_beria ) ;
1451: LD_ADDR_EXP 57
1455: PUSH
1456: LD_STRING 02_other_beria
1458: PPUSH
1459: CALL_OW 31
1463: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 02_other_survivors ) ;
1464: LD_ADDR_EXP 55
1468: PUSH
1469: LD_STRING 02_other_survivors
1471: PPUSH
1472: CALL_OW 31
1476: ST_TO_ADDR
// uc_side = 3 ;
1477: LD_ADDR_OWVAR 20
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// uc_nation = 3 ;
1485: LD_ADDR_OWVAR 21
1489: PUSH
1490: LD_INT 3
1492: ST_TO_ADDR
// for i := 1 to beriaBase do
1493: LD_ADDR_VAR 0 2
1497: PUSH
1498: DOUBLE
1499: LD_INT 1
1501: DEC
1502: ST_TO_ADDR
1503: LD_EXP 58
1507: PUSH
1508: FOR_TO
1509: IFFALSE 1762
// begin bc_type = beriaBase [ i ] [ 1 ] ;
1511: LD_ADDR_OWVAR 42
1515: PUSH
1516: LD_EXP 58
1520: PUSH
1521: LD_VAR 0 2
1525: ARRAY
1526: PUSH
1527: LD_INT 1
1529: ARRAY
1530: ST_TO_ADDR
// bc_level = beriaBase [ i ] [ 5 ] ;
1531: LD_ADDR_OWVAR 43
1535: PUSH
1536: LD_EXP 58
1540: PUSH
1541: LD_VAR 0 2
1545: ARRAY
1546: PUSH
1547: LD_INT 5
1549: ARRAY
1550: ST_TO_ADDR
// if bc_type = b_lab then
1551: LD_OWVAR 42
1555: PUSH
1556: LD_INT 6
1558: EQUAL
1559: IFFALSE 1577
// begin bc_kind1 = b_lab_basic ;
1561: LD_ADDR_OWVAR 44
1565: PUSH
1566: LD_INT 9
1568: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
1569: LD_ADDR_OWVAR 45
1573: PUSH
1574: LD_INT 9
1576: ST_TO_ADDR
// end ; if bc_type = b_lab_half or bc_type = b_lab_full then
1577: LD_OWVAR 42
1581: PUSH
1582: LD_INT 7
1584: EQUAL
1585: PUSH
1586: LD_OWVAR 42
1590: PUSH
1591: LD_INT 8
1593: EQUAL
1594: OR
1595: IFFALSE 1711
// begin if beriaBase [ i ] [ 7 ] then
1597: LD_EXP 58
1601: PUSH
1602: LD_VAR 0 2
1606: ARRAY
1607: PUSH
1608: LD_INT 7
1610: ARRAY
1611: IFFALSE 1633
// bc_kind1 = beriaBase [ i ] [ 7 ] ;
1613: LD_ADDR_OWVAR 44
1617: PUSH
1618: LD_EXP 58
1622: PUSH
1623: LD_VAR 0 2
1627: ARRAY
1628: PUSH
1629: LD_INT 7
1631: ARRAY
1632: ST_TO_ADDR
// if beriaBase [ i ] [ 8 ] then
1633: LD_EXP 58
1637: PUSH
1638: LD_VAR 0 2
1642: ARRAY
1643: PUSH
1644: LD_INT 8
1646: ARRAY
1647: IFFALSE 1669
// bc_kind2 = beriaBase [ i ] [ 8 ] ;
1649: LD_ADDR_OWVAR 45
1653: PUSH
1654: LD_EXP 58
1658: PUSH
1659: LD_VAR 0 2
1663: ARRAY
1664: PUSH
1665: LD_INT 8
1667: ARRAY
1668: ST_TO_ADDR
// if not beriaBase [ i ] [ 7 ] and not beriaBase [ i ] [ 8 ] then
1669: LD_EXP 58
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PUSH
1680: LD_INT 7
1682: ARRAY
1683: NOT
1684: PUSH
1685: LD_EXP 58
1689: PUSH
1690: LD_VAR 0 2
1694: ARRAY
1695: PUSH
1696: LD_INT 8
1698: ARRAY
1699: NOT
1700: AND
1701: IFFALSE 1711
// bc_type := b_lab ;
1703: LD_ADDR_OWVAR 42
1707: PUSH
1708: LD_INT 6
1710: ST_TO_ADDR
// end ; CreateAndPlaceBuildingXYD ( beriaBase [ i ] [ 2 ] , beriaBase [ i ] [ 3 ] , beriaBase [ i ] [ 4 ] ) ;
1711: LD_EXP 58
1715: PUSH
1716: LD_VAR 0 2
1720: ARRAY
1721: PUSH
1722: LD_INT 2
1724: ARRAY
1725: PPUSH
1726: LD_EXP 58
1730: PUSH
1731: LD_VAR 0 2
1735: ARRAY
1736: PUSH
1737: LD_INT 3
1739: ARRAY
1740: PPUSH
1741: LD_EXP 58
1745: PUSH
1746: LD_VAR 0 2
1750: ARRAY
1751: PUSH
1752: LD_INT 4
1754: ARRAY
1755: PPUSH
1756: CALL_OW 47
// end ;
1760: GO 1508
1762: POP
1763: POP
// beriaDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] ;
1764: LD_ADDR_EXP 59
1768: PUSH
1769: LD_INT 22
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 30
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_INT 1
1800: ARRAY
1801: ST_TO_ADDR
// SetBName ( beriaDepot , beria ) ;
1802: LD_EXP 59
1806: PPUSH
1807: LD_STRING beria
1809: PPUSH
1810: CALL_OW 500
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , cratesResources ) ;
1814: LD_EXP 59
1818: PPUSH
1819: CALL_OW 274
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_EXP 2
1831: PPUSH
1832: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , oilResources ) ;
1836: LD_EXP 59
1840: PPUSH
1841: CALL_OW 274
1845: PPUSH
1846: LD_INT 2
1848: PPUSH
1849: LD_EXP 3
1853: PPUSH
1854: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_cans , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesCrates ) ;
1858: LD_EXP 59
1862: PPUSH
1863: CALL_OW 274
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: LD_EXP 59
1875: PPUSH
1876: CALL_OW 274
1880: PPUSH
1881: LD_INT 2
1883: PPUSH
1884: CALL_OW 275
1888: PUSH
1889: LD_EXP 41
1893: PLUS
1894: PPUSH
1895: CALL_OW 277
// SetResourceType ( GetBase ( beriaDepot ) , mat_oil , GetResourceType ( GetBase ( beriaDepot ) , mat_oil ) + bonusResourcesOil ) ;
1899: LD_EXP 59
1903: PPUSH
1904: CALL_OW 274
1908: PPUSH
1909: LD_INT 2
1911: PPUSH
1912: LD_EXP 59
1916: PPUSH
1917: CALL_OW 274
1921: PPUSH
1922: LD_INT 2
1924: PPUSH
1925: CALL_OW 275
1929: PUSH
1930: LD_EXP 42
1934: PLUS
1935: PPUSH
1936: CALL_OW 277
// uc_side = 6 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 6
1947: ST_TO_ADDR
// for i in otherBeriaUnits do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: LD_EXP 57
1957: PUSH
1958: FOR_IN
1959: IFFALSE 1984
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1961: LD_VAR 0 2
1965: PPUSH
1966: LD_INT 159
1968: PPUSH
1969: LD_INT 107
1971: PPUSH
1972: LD_INT 10
1974: PPUSH
1975: LD_INT 0
1977: PPUSH
1978: CALL_OW 50
1982: GO 1958
1984: POP
1985: POP
// for i in other_survivors do
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_EXP 55
1995: PUSH
1996: FOR_IN
1997: IFFALSE 2022
// PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
1999: LD_VAR 0 2
2003: PPUSH
2004: LD_INT 159
2006: PPUSH
2007: LD_INT 107
2009: PPUSH
2010: LD_INT 10
2012: PPUSH
2013: LD_INT 0
2015: PPUSH
2016: CALL_OW 50
2020: GO 1996
2022: POP
2023: POP
// end ;
2024: LD_VAR 0 1
2028: RET
// function PrepareKirovBase ; var i , tmp , building ; begin
2029: LD_INT 0
2031: PPUSH
2032: PPUSH
2033: PPUSH
2034: PPUSH
// kirovBase = LoadVariable ( 02_KirovBase_3 , [ ] ) ;
2035: LD_ADDR_EXP 65
2039: PUSH
2040: LD_STRING 02_KirovBase_3
2042: PPUSH
2043: EMPTY
2044: PPUSH
2045: CALL_OW 30
2049: ST_TO_ADDR
// otherKirovUnits = CreateCharacterSet ( 02_other_kirov ) ;
2050: LD_ADDR_EXP 64
2054: PUSH
2055: LD_STRING 02_other_kirov
2057: PPUSH
2058: CALL_OW 31
2062: ST_TO_ADDR
// uc_side = 6 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 6
2070: ST_TO_ADDR
// uc_nation = 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// Kurin = PrepareUnitExt ( Kurin , false ) ;
2079: LD_ADDR_EXP 60
2083: PUSH
2084: LD_STRING Kurin
2086: PPUSH
2087: LD_INT 0
2089: PPUSH
2090: CALL 6913 0 2
2094: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 166 , 109 , false ) ;
2095: LD_EXP 60
2099: PPUSH
2100: LD_INT 166
2102: PPUSH
2103: LD_INT 109
2105: PPUSH
2106: LD_INT 0
2108: PPUSH
2109: CALL_OW 48
// ComHold ( Kurin ) ;
2113: LD_EXP 60
2117: PPUSH
2118: CALL_OW 140
// for i := 1 to kirovBase do
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: DOUBLE
2128: LD_INT 1
2130: DEC
2131: ST_TO_ADDR
2132: LD_EXP 65
2136: PUSH
2137: FOR_TO
2138: IFFALSE 2576
// begin bc_type = kirovBase [ i ] [ 1 ] ;
2140: LD_ADDR_OWVAR 42
2144: PUSH
2145: LD_EXP 65
2149: PUSH
2150: LD_VAR 0 2
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: ST_TO_ADDR
// bc_level = kirovBase [ i ] [ 5 ] ;
2160: LD_ADDR_OWVAR 43
2164: PUSH
2165: LD_EXP 65
2169: PUSH
2170: LD_VAR 0 2
2174: ARRAY
2175: PUSH
2176: LD_INT 5
2178: ARRAY
2179: ST_TO_ADDR
// if bc_type = b_depot then
2180: LD_OWVAR 42
2184: PUSH
2185: LD_INT 0
2187: EQUAL
2188: IFFALSE 2198
// bc_type = b_warehouse ;
2190: LD_ADDR_OWVAR 42
2194: PUSH
2195: LD_INT 1
2197: ST_TO_ADDR
// if bc_type = b_armoury then
2198: LD_OWVAR 42
2202: PUSH
2203: LD_INT 4
2205: EQUAL
2206: IFFALSE 2216
// bc_type = b_barracks ;
2208: LD_ADDR_OWVAR 42
2212: PUSH
2213: LD_INT 5
2215: ST_TO_ADDR
// if bc_type = b_lab then
2216: LD_OWVAR 42
2220: PUSH
2221: LD_INT 6
2223: EQUAL
2224: IFFALSE 2242
// begin bc_kind1 = b_lab_weapon ;
2226: LD_ADDR_OWVAR 44
2230: PUSH
2231: LD_INT 10
2233: ST_TO_ADDR
// bc_kind2 = b_lab_basic ;
2234: LD_ADDR_OWVAR 45
2238: PUSH
2239: LD_INT 9
2241: ST_TO_ADDR
// end ; if bc_type = b_workshop then
2242: LD_OWVAR 42
2246: PUSH
2247: LD_INT 2
2249: EQUAL
2250: IFFALSE 2260
// bc_type = b_factory ;
2252: LD_ADDR_OWVAR 42
2256: PUSH
2257: LD_INT 3
2259: ST_TO_ADDR
// if bc_type = b_lab_half or bc_type = b_lab_full then
2260: LD_OWVAR 42
2264: PUSH
2265: LD_INT 7
2267: EQUAL
2268: PUSH
2269: LD_OWVAR 42
2273: PUSH
2274: LD_INT 8
2276: EQUAL
2277: OR
2278: IFFALSE 2394
// begin if kirovBase [ i ] [ 7 ] then
2280: LD_EXP 65
2284: PUSH
2285: LD_VAR 0 2
2289: ARRAY
2290: PUSH
2291: LD_INT 7
2293: ARRAY
2294: IFFALSE 2316
// bc_kind1 = kirovBase [ i ] [ 7 ] ;
2296: LD_ADDR_OWVAR 44
2300: PUSH
2301: LD_EXP 65
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PUSH
2312: LD_INT 7
2314: ARRAY
2315: ST_TO_ADDR
// if kirovBase [ i ] [ 8 ] then
2316: LD_EXP 65
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PUSH
2327: LD_INT 8
2329: ARRAY
2330: IFFALSE 2352
// bc_kind2 = kirovBase [ i ] [ 8 ] ;
2332: LD_ADDR_OWVAR 45
2336: PUSH
2337: LD_EXP 65
2341: PUSH
2342: LD_VAR 0 2
2346: ARRAY
2347: PUSH
2348: LD_INT 8
2350: ARRAY
2351: ST_TO_ADDR
// if not kirovBase [ i ] [ 7 ] and not kirovBase [ i ] [ 8 ] then
2352: LD_EXP 65
2356: PUSH
2357: LD_VAR 0 2
2361: ARRAY
2362: PUSH
2363: LD_INT 7
2365: ARRAY
2366: NOT
2367: PUSH
2368: LD_EXP 65
2372: PUSH
2373: LD_VAR 0 2
2377: ARRAY
2378: PUSH
2379: LD_INT 8
2381: ARRAY
2382: NOT
2383: AND
2384: IFFALSE 2394
// bc_type := b_lab ;
2386: LD_ADDR_OWVAR 42
2390: PUSH
2391: LD_INT 6
2393: ST_TO_ADDR
// end ; if bc_type = b_breastwork then
2394: LD_OWVAR 42
2398: PUSH
2399: LD_INT 31
2401: EQUAL
2402: IFFALSE 2426
// begin bc_type = b_bunker ;
2404: LD_ADDR_OWVAR 42
2408: PUSH
2409: LD_INT 32
2411: ST_TO_ADDR
// kirovBunkerCounter = kirovBunkerCounter + 1 ;
2412: LD_ADDR_EXP 76
2416: PUSH
2417: LD_EXP 76
2421: PUSH
2422: LD_INT 1
2424: PLUS
2425: ST_TO_ADDR
// end ; building = CreateAndPlaceBuildingXYD ( kirovBase [ i ] [ 2 ] , kirovBase [ i ] [ 3 ] , kirovBase [ i ] [ 4 ] ) ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_EXP 65
2435: PUSH
2436: LD_VAR 0 2
2440: ARRAY
2441: PUSH
2442: LD_INT 2
2444: ARRAY
2445: PPUSH
2446: LD_EXP 65
2450: PUSH
2451: LD_VAR 0 2
2455: ARRAY
2456: PUSH
2457: LD_INT 3
2459: ARRAY
2460: PPUSH
2461: LD_EXP 65
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PUSH
2472: LD_INT 4
2474: ARRAY
2475: PPUSH
2476: CALL_OW 47
2480: ST_TO_ADDR
// if tmp < 4 and bc_type = b_bunker then
2481: LD_VAR 0 3
2485: PUSH
2486: LD_INT 4
2488: LESS
2489: PUSH
2490: LD_OWVAR 42
2494: PUSH
2495: LD_INT 32
2497: EQUAL
2498: AND
2499: IFFALSE 2548
// begin PlaceWeaponTurret ( building , [ ru_heavy_machine_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] ) ;
2501: LD_VAR 0 4
2505: PPUSH
2506: LD_INT 42
2508: PUSH
2509: LD_INT 43
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 1
2518: PPUSH
2519: LD_INT 2
2521: PPUSH
2522: CALL_OW 12
2526: ARRAY
2527: PPUSH
2528: CALL_OW 431
// tmp = tmp + 1 ;
2532: LD_ADDR_VAR 0 3
2536: PUSH
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: PLUS
2545: ST_TO_ADDR
// end else
2546: GO 2574
// if bc_type = b_bunker then
2548: LD_OWVAR 42
2552: PUSH
2553: LD_INT 32
2555: EQUAL
2556: IFFALSE 2574
// kirovBunkersToMountWeapon = kirovBunkersToMountWeapon ^ building ;
2558: LD_ADDR_EXP 71
2562: PUSH
2563: LD_EXP 71
2567: PUSH
2568: LD_VAR 0 4
2572: ADD
2573: ST_TO_ADDR
// end ;
2574: GO 2137
2576: POP
2577: POP
// kirovDepot = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ;
2578: LD_ADDR_EXP 66
2582: PUSH
2583: LD_INT 22
2585: PUSH
2586: LD_INT 6
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: LD_INT 30
2595: PUSH
2596: LD_INT 1
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PPUSH
2607: CALL_OW 69
2611: PUSH
2612: LD_INT 1
2614: ARRAY
2615: ST_TO_ADDR
// SetBName ( kirovDepot , kirov ) ;
2616: LD_EXP 66
2620: PPUSH
2621: LD_STRING kirov
2623: PPUSH
2624: CALL_OW 500
// SetResourceType ( GetBase ( kirovDepot ) , mat_cans , 5000 ) ;
2628: LD_EXP 66
2632: PPUSH
2633: CALL_OW 274
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_INT 5000
2643: PPUSH
2644: CALL_OW 277
// SetResourceType ( GetBase ( kirovDepot ) , mat_oil , 2000 ) ;
2648: LD_EXP 66
2652: PPUSH
2653: CALL_OW 274
2657: PPUSH
2658: LD_INT 2
2660: PPUSH
2661: LD_INT 2000
2663: PPUSH
2664: CALL_OW 277
// ru2_bar1 = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) , 145 , 102 ) ;
2668: LD_ADDR_EXP 68
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 6
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 21
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: LD_INT 30
2695: PUSH
2696: LD_INT 5
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PPUSH
2713: LD_INT 145
2715: PPUSH
2716: LD_INT 102
2718: PPUSH
2719: CALL_OW 73
2723: ST_TO_ADDR
// ru2_bar2 = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) diff ru2_bar1 ;
2724: LD_ADDR_EXP 69
2728: PUSH
2729: LD_INT 22
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: PUSH
2739: LD_INT 21
2741: PUSH
2742: LD_INT 3
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 30
2751: PUSH
2752: LD_INT 5
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: LIST
2763: PPUSH
2764: CALL_OW 69
2768: PUSH
2769: LD_EXP 68
2773: DIFF
2774: ST_TO_ADDR
// ru2_bar2 = ru2_bar2 [ 1 ] ;
2775: LD_ADDR_EXP 69
2779: PUSH
2780: LD_EXP 69
2784: PUSH
2785: LD_INT 1
2787: ARRAY
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 1
2793: RET
// export function PrepareKirovPersonel ; var i ; begin
2794: LD_INT 0
2796: PPUSH
2797: PPUSH
// PrepareEngineer ( false , 7 ) ;
2798: LD_INT 0
2800: PPUSH
2801: LD_INT 7
2803: PPUSH
2804: CALL_OW 382
// kirovEng = CreateHuman ;
2808: LD_ADDR_EXP 70
2812: PUSH
2813: CALL_OW 44
2817: ST_TO_ADDR
// PlaceUnitXYR ( kirovEng , 159 , 107 , 10 , false ) ;
2818: LD_EXP 70
2822: PPUSH
2823: LD_INT 159
2825: PPUSH
2826: LD_INT 107
2828: PPUSH
2829: LD_INT 10
2831: PPUSH
2832: LD_INT 0
2834: PPUSH
2835: CALL_OW 50
// Popov = PrepareUnitExt ( Popov , false ) ;
2839: LD_ADDR_EXP 61
2843: PUSH
2844: LD_STRING Popov
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL 6913 0 2
2854: ST_TO_ADDR
// PlaceUnitArea ( Popov , PopovSpawnArea , false ) ;
2855: LD_EXP 61
2859: PPUSH
2860: LD_INT 4
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 49
// ComTurnXY ( Popov , 98 , 36 ) ;
2870: LD_EXP 61
2874: PPUSH
2875: LD_INT 98
2877: PPUSH
2878: LD_INT 36
2880: PPUSH
2881: CALL_OW 118
// hc_name :=  ;
2885: LD_ADDR_OWVAR 26
2889: PUSH
2890: LD_STRING 
2892: ST_TO_ADDR
// hc_gallery :=  ;
2893: LD_ADDR_OWVAR 33
2897: PUSH
2898: LD_STRING 
2900: ST_TO_ADDR
// PrepareSoldier ( false , 2 ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: CALL_OW 381
// ruScout = CreateHuman ;
2911: LD_ADDR_EXP 63
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// PlaceUnitArea ( ruScout , RuScoutSpawnArea , false ) ;
2921: LD_EXP 63
2925: PPUSH
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 0
2931: PPUSH
2932: CALL_OW 49
// ComCrawl ( ruScout ) ;
2936: LD_EXP 63
2940: PPUSH
2941: CALL_OW 137
// AddComTurnXY ( ruScout , 98 , 36 ) ;
2945: LD_EXP 63
2949: PPUSH
2950: LD_INT 98
2952: PPUSH
2953: LD_INT 36
2955: PPUSH
2956: CALL_OW 178
// uc_side = 6 ;
2960: LD_ADDR_OWVAR 20
2964: PUSH
2965: LD_INT 6
2967: ST_TO_ADDR
// for i in otherKirovUnits do
2968: LD_ADDR_VAR 0 2
2972: PUSH
2973: LD_EXP 64
2977: PUSH
2978: FOR_IN
2979: IFFALSE 3115
// begin SetSide ( i , 6 ) ;
2981: LD_VAR 0 2
2985: PPUSH
2986: LD_INT 6
2988: PPUSH
2989: CALL_OW 235
// if GetClass ( i ) = class_soldier and kirovBunkerCounter > 0 then
2993: LD_VAR 0 2
2997: PPUSH
2998: CALL_OW 257
3002: PUSH
3003: LD_INT 1
3005: EQUAL
3006: PUSH
3007: LD_EXP 76
3011: PUSH
3012: LD_INT 0
3014: GREATER
3015: AND
3016: IFFALSE 3092
// begin PlaceHumanInBunker ( i , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) [ kirovBunkerCounter ] ) ;
3018: LD_VAR 0 2
3022: PPUSH
3023: LD_INT 18
3025: PPUSH
3026: LD_INT 22
3028: PUSH
3029: LD_INT 6
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 21
3038: PUSH
3039: LD_INT 3
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: PUSH
3046: LD_INT 30
3048: PUSH
3049: LD_INT 32
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PUSH
3056: EMPTY
3057: LIST
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 70
3065: PUSH
3066: LD_EXP 76
3070: ARRAY
3071: PPUSH
3072: CALL 8457 0 2
// kirovBunkerCounter = kirovBunkerCounter - 1 ;
3076: LD_ADDR_EXP 76
3080: PUSH
3081: LD_EXP 76
3085: PUSH
3086: LD_INT 1
3088: MINUS
3089: ST_TO_ADDR
// end else
3090: GO 3113
// begin PlaceUnitXYR ( i , 159 , 107 , 10 , false ) ;
3092: LD_VAR 0 2
3096: PPUSH
3097: LD_INT 159
3099: PPUSH
3100: LD_INT 107
3102: PPUSH
3103: LD_INT 10
3105: PPUSH
3106: LD_INT 0
3108: PPUSH
3109: CALL_OW 50
// end ; end ;
3113: GO 2978
3115: POP
3116: POP
// end ;
3117: LD_VAR 0 1
3121: RET
// export function PrepareGrishko ; var i , un , turret ; begin
3122: LD_INT 0
3124: PPUSH
3125: PPUSH
3126: PPUSH
3127: PPUSH
// uc_side = 6 ;
3128: LD_ADDR_OWVAR 20
3132: PUSH
3133: LD_INT 6
3135: ST_TO_ADDR
// uc_nation = 3 ;
3136: LD_ADDR_OWVAR 21
3140: PUSH
3141: LD_INT 3
3143: ST_TO_ADDR
// Grishko = PrepareUnitExt ( Grishko , false ) ;
3144: LD_ADDR_EXP 81
3148: PUSH
3149: LD_STRING Grishko
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL 6913 0 2
3159: ST_TO_ADDR
// PlaceUnitXYR ( Grishko , 218 , 108 , 3 , false ) ;
3160: LD_EXP 81
3164: PPUSH
3165: LD_INT 218
3167: PPUSH
3168: LD_INT 108
3170: PPUSH
3171: LD_INT 3
3173: PPUSH
3174: LD_INT 0
3176: PPUSH
3177: CALL_OW 50
// ComHold ( Grishko ) ;
3181: LD_EXP 81
3185: PPUSH
3186: CALL_OW 140
// end ;
3190: LD_VAR 0 1
3194: RET
// export function PrepareVehicles ; var i , vehicle ; begin
3195: LD_INT 0
3197: PPUSH
3198: PPUSH
3199: PPUSH
// uc_side = 3 ;
3200: LD_ADDR_OWVAR 20
3204: PUSH
3205: LD_INT 3
3207: ST_TO_ADDR
// uc_nation = 3 ;
3208: LD_ADDR_OWVAR 21
3212: PUSH
3213: LD_INT 3
3215: ST_TO_ADDR
// for i := 1 to vehiclesPreviousMission do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_EXP 4
3230: PUSH
3231: FOR_TO
3232: IFFALSE 3364
// begin PrepareVehicle ( vehiclesPreviousMission [ i ] [ 1 ] , vehiclesPreviousMission [ i ] [ 2 ] , vehiclesPreviousMission [ i ] [ 3 ] , vehiclesPreviousMission [ i ] [ 4 ] , vehiclesPreviousMission [ i ] [ 5 ] ) ;
3234: LD_EXP 4
3238: PUSH
3239: LD_VAR 0 2
3243: ARRAY
3244: PUSH
3245: LD_INT 1
3247: ARRAY
3248: PPUSH
3249: LD_EXP 4
3253: PUSH
3254: LD_VAR 0 2
3258: ARRAY
3259: PUSH
3260: LD_INT 2
3262: ARRAY
3263: PPUSH
3264: LD_EXP 4
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PUSH
3275: LD_INT 3
3277: ARRAY
3278: PPUSH
3279: LD_EXP 4
3283: PUSH
3284: LD_VAR 0 2
3288: ARRAY
3289: PUSH
3290: LD_INT 4
3292: ARRAY
3293: PPUSH
3294: LD_EXP 4
3298: PUSH
3299: LD_VAR 0 2
3303: ARRAY
3304: PUSH
3305: LD_INT 5
3307: ARRAY
3308: PPUSH
3309: CALL 35546 0 5
// vehicle = CreateVehicle ;
3313: LD_ADDR_VAR 0 3
3317: PUSH
3318: CALL_OW 45
3322: ST_TO_ADDR
// PlaceUnitArea ( vehicle , BeriaBaseArea , false ) ;
3323: LD_VAR 0 3
3327: PPUSH
3328: LD_INT 25
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
// SetLives ( vehicle , vehiclesPreviousMission [ i ] [ 6 ] ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: LD_EXP 4
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PUSH
3354: LD_INT 6
3356: ARRAY
3357: PPUSH
3358: CALL_OW 234
// end ;
3362: GO 3231
3364: POP
3365: POP
// end ;
3366: LD_VAR 0 1
3370: RET
// export function PrepareOtherBuildings ; var i , otherBuildings , building ; begin
3371: LD_INT 0
3373: PPUSH
3374: PPUSH
3375: PPUSH
3376: PPUSH
// otherBuildings = LoadVariable ( 02_OtherBuildings_4 , [ ] ) ;
3377: LD_ADDR_VAR 0 3
3381: PUSH
3382: LD_STRING 02_OtherBuildings_4
3384: PPUSH
3385: EMPTY
3386: PPUSH
3387: CALL_OW 30
3391: ST_TO_ADDR
// uc_side = 3 ;
3392: LD_ADDR_OWVAR 20
3396: PUSH
3397: LD_INT 3
3399: ST_TO_ADDR
// for i := 1 to otherBuildings do
3400: LD_ADDR_VAR 0 2
3404: PUSH
3405: DOUBLE
3406: LD_INT 1
3408: DEC
3409: ST_TO_ADDR
3410: LD_VAR 0 3
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3677
// begin uc_nation = otherBuildings [ i ] [ 6 ] ;
3418: LD_ADDR_OWVAR 21
3422: PUSH
3423: LD_VAR 0 3
3427: PUSH
3428: LD_VAR 0 2
3432: ARRAY
3433: PUSH
3434: LD_INT 6
3436: ARRAY
3437: ST_TO_ADDR
// bc_type = otherBuildings [ i ] [ 1 ] ;
3438: LD_ADDR_OWVAR 42
3442: PUSH
3443: LD_VAR 0 3
3447: PUSH
3448: LD_VAR 0 2
3452: ARRAY
3453: PUSH
3454: LD_INT 1
3456: ARRAY
3457: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3458: LD_ADDR_OWVAR 43
3462: PUSH
3463: LD_VAR 0 3
3467: PUSH
3468: LD_VAR 0 2
3472: ARRAY
3473: PUSH
3474: LD_INT 5
3476: ARRAY
3477: ST_TO_ADDR
// building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3478: LD_ADDR_VAR 0 4
3482: PUSH
3483: LD_VAR 0 3
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PUSH
3494: LD_INT 2
3496: ARRAY
3497: PPUSH
3498: LD_VAR 0 3
3502: PUSH
3503: LD_VAR 0 2
3507: ARRAY
3508: PUSH
3509: LD_INT 3
3511: ARRAY
3512: PPUSH
3513: LD_VAR 0 3
3517: PUSH
3518: LD_VAR 0 2
3522: ARRAY
3523: PUSH
3524: LD_INT 4
3526: ARRAY
3527: PPUSH
3528: CALL_OW 47
3532: ST_TO_ADDR
// SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3533: LD_VAR 0 4
3537: PPUSH
3538: LD_VAR 0 3
3542: PUSH
3543: LD_VAR 0 2
3547: ARRAY
3548: PUSH
3549: LD_INT 7
3551: ARRAY
3552: PPUSH
3553: CALL_OW 234
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL_OW 266
3566: PUSH
3567: LD_INT 0
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: IN
3577: IFFALSE 3675
// begin SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 8 ] ) ;
3579: LD_VAR 0 4
3583: PPUSH
3584: CALL_OW 274
3588: PPUSH
3589: LD_INT 1
3591: PPUSH
3592: LD_VAR 0 3
3596: PUSH
3597: LD_VAR 0 2
3601: ARRAY
3602: PUSH
3603: LD_INT 8
3605: ARRAY
3606: PPUSH
3607: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 9 ] ) ;
3611: LD_VAR 0 4
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_VAR 0 3
3628: PUSH
3629: LD_VAR 0 2
3633: ARRAY
3634: PUSH
3635: LD_INT 9
3637: ARRAY
3638: PPUSH
3639: CALL_OW 277
// SetResourceType ( GetBase ( building ) , mat_cans , otherBuildings [ i ] [ 10 ] ) ;
3643: LD_VAR 0 4
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_VAR 0 3
3660: PUSH
3661: LD_VAR 0 2
3665: ARRAY
3666: PUSH
3667: LD_INT 10
3669: ARRAY
3670: PPUSH
3671: CALL_OW 277
// end ; end ;
3675: GO 3415
3677: POP
3678: POP
// otherBuildings = LoadVariable ( 02_AmericanBuildings_5 , [ ] ) ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: LD_STRING 02_AmericanBuildings_5
3686: PPUSH
3687: EMPTY
3688: PPUSH
3689: CALL_OW 30
3693: ST_TO_ADDR
// uc_side = 1 ;
3694: LD_ADDR_OWVAR 20
3698: PUSH
3699: LD_INT 1
3701: ST_TO_ADDR
// uc_nation = 1 ;
3702: LD_ADDR_OWVAR 21
3706: PUSH
3707: LD_INT 1
3709: ST_TO_ADDR
// for i := 1 to otherBuildings do
3710: LD_ADDR_VAR 0 2
3714: PUSH
3715: DOUBLE
3716: LD_INT 1
3718: DEC
3719: ST_TO_ADDR
3720: LD_VAR 0 3
3724: PUSH
3725: FOR_TO
3726: IFFALSE 3930
// begin bc_type = otherBuildings [ i ] [ 1 ] ;
3728: LD_ADDR_OWVAR 42
3732: PUSH
3733: LD_VAR 0 3
3737: PUSH
3738: LD_VAR 0 2
3742: ARRAY
3743: PUSH
3744: LD_INT 1
3746: ARRAY
3747: ST_TO_ADDR
// bc_level = otherBuildings [ i ] [ 5 ] ;
3748: LD_ADDR_OWVAR 43
3752: PUSH
3753: LD_VAR 0 3
3757: PUSH
3758: LD_VAR 0 2
3762: ARRAY
3763: PUSH
3764: LD_INT 5
3766: ARRAY
3767: ST_TO_ADDR
// if bc_type = b_breastwork then
3768: LD_OWVAR 42
3772: PUSH
3773: LD_INT 31
3775: EQUAL
3776: IFFALSE 3849
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3778: LD_ADDR_VAR 0 4
3782: PUSH
3783: LD_VAR 0 3
3787: PUSH
3788: LD_VAR 0 2
3792: ARRAY
3793: PUSH
3794: LD_INT 2
3796: ARRAY
3797: PPUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_VAR 0 2
3807: ARRAY
3808: PUSH
3809: LD_INT 3
3811: ARRAY
3812: PPUSH
3813: LD_VAR 0 3
3817: PUSH
3818: LD_VAR 0 2
3822: ARRAY
3823: PUSH
3824: LD_INT 4
3826: ARRAY
3827: PPUSH
3828: CALL_OW 47
3832: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , building ) ;
3833: LD_EXP 43
3837: PPUSH
3838: LD_VAR 0 4
3842: PPUSH
3843: CALL 8547 0 2
// end else
3847: GO 3904
// begin building = CreateAndPlaceBuildingXYD ( otherBuildings [ i ] [ 2 ] , otherBuildings [ i ] [ 3 ] , otherBuildings [ i ] [ 4 ] ) ;
3849: LD_ADDR_VAR 0 4
3853: PUSH
3854: LD_VAR 0 3
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: PUSH
3865: LD_INT 2
3867: ARRAY
3868: PPUSH
3869: LD_VAR 0 3
3873: PUSH
3874: LD_VAR 0 2
3878: ARRAY
3879: PUSH
3880: LD_INT 3
3882: ARRAY
3883: PPUSH
3884: LD_VAR 0 3
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: PUSH
3895: LD_INT 4
3897: ARRAY
3898: PPUSH
3899: CALL_OW 47
3903: ST_TO_ADDR
// end ; SetLives ( building , otherBuildings [ i ] [ 7 ] ) ;
3904: LD_VAR 0 4
3908: PPUSH
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 2
3918: ARRAY
3919: PUSH
3920: LD_INT 7
3922: ARRAY
3923: PPUSH
3924: CALL_OW 234
// end ;
3928: GO 3725
3930: POP
3931: POP
// end ;
3932: LD_VAR 0 1
3936: RET
// export function PrepareSecondBaseTeam ; var i ; begin
3937: LD_INT 0
3939: PPUSH
3940: PPUSH
// secondBaseTeam = [ ] ;
3941: LD_ADDR_EXP 77
3945: PUSH
3946: EMPTY
3947: ST_TO_ADDR
// SetResourceVisibility ( 226 , 109 , 6 ) ;
3948: LD_INT 226
3950: PPUSH
3951: LD_INT 109
3953: PPUSH
3954: LD_INT 6
3956: PPUSH
3957: CALL_OW 441
// uc_side = 6 ;
3961: LD_ADDR_OWVAR 20
3965: PUSH
3966: LD_INT 6
3968: ST_TO_ADDR
// uc_nation = 3 ;
3969: LD_ADDR_OWVAR 21
3973: PUSH
3974: LD_INT 3
3976: ST_TO_ADDR
// hc_name =  ;
3977: LD_ADDR_OWVAR 26
3981: PUSH
3982: LD_STRING 
3984: ST_TO_ADDR
// hc_gallery =  ;
3985: LD_ADDR_OWVAR 33
3989: PUSH
3990: LD_STRING 
3992: ST_TO_ADDR
// for i := 1 to 3 do
3993: LD_ADDR_VAR 0 2
3997: PUSH
3998: DOUBLE
3999: LD_INT 1
4001: DEC
4002: ST_TO_ADDR
4003: LD_INT 3
4005: PUSH
4006: FOR_TO
4007: IFFALSE 4060
// begin PrepareSoldier ( false , enemySkillLevel ) ;
4009: LD_INT 0
4011: PPUSH
4012: LD_EXP 43
4016: PPUSH
4017: CALL_OW 381
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4021: LD_ADDR_EXP 77
4025: PUSH
4026: LD_EXP 77
4030: PUSH
4031: CALL_OW 44
4035: ADD
4036: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ i ] , KirovSupportSpawnArea , false ) ;
4037: LD_EXP 77
4041: PUSH
4042: LD_VAR 0 2
4046: ARRAY
4047: PPUSH
4048: LD_INT 19
4050: PPUSH
4051: LD_INT 0
4053: PPUSH
4054: CALL_OW 49
// end ;
4058: GO 4006
4060: POP
4061: POP
// PrepareEngineer ( false , enemySkillLevel ) ;
4062: LD_INT 0
4064: PPUSH
4065: LD_EXP 43
4069: PPUSH
4070: CALL_OW 382
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4074: LD_ADDR_EXP 77
4078: PUSH
4079: LD_EXP 77
4083: PUSH
4084: CALL_OW 44
4088: ADD
4089: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 4 ] , KirovSupportSpawnArea , false ) ;
4090: LD_EXP 77
4094: PUSH
4095: LD_INT 4
4097: ARRAY
4098: PPUSH
4099: LD_INT 19
4101: PPUSH
4102: LD_INT 0
4104: PPUSH
4105: CALL_OW 49
// PrepareScientist ( false , enemySkillLevel ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_EXP 43
4116: PPUSH
4117: CALL_OW 384
// secondBaseTeam = secondBaseTeam ^ CreateHuman ;
4121: LD_ADDR_EXP 77
4125: PUSH
4126: LD_EXP 77
4130: PUSH
4131: CALL_OW 44
4135: ADD
4136: ST_TO_ADDR
// PlaceUnitArea ( secondBaseTeam [ 5 ] , KirovSupportSpawnArea , false ) ;
4137: LD_EXP 77
4141: PUSH
4142: LD_INT 5
4144: ARRAY
4145: PPUSH
4146: LD_INT 19
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 49
// ComMoveXY ( secondBaseTeam , 214 , 105 ) ;
4156: LD_EXP 77
4160: PPUSH
4161: LD_INT 214
4163: PPUSH
4164: LD_INT 105
4166: PPUSH
4167: CALL_OW 111
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_depot , 222 , 115 , 0 ) ;
4171: LD_EXP 77
4175: PPUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 2
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: PPUSH
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 222
4196: PPUSH
4197: LD_INT 115
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 205
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 224 , 107 ) ;
4207: LD_EXP 77
4211: PPUSH
4212: LD_INT 25
4214: PUSH
4215: LD_INT 2
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PPUSH
4222: CALL_OW 72
4226: PPUSH
4227: LD_INT 224
4229: PPUSH
4230: LD_INT 107
4232: PPUSH
4233: CALL_OW 177
// AddComCollect ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 228 , 110 ) ;
4237: LD_EXP 77
4241: PPUSH
4242: LD_INT 25
4244: PUSH
4245: LD_INT 2
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PPUSH
4257: LD_INT 228
4259: PPUSH
4260: LD_INT 110
4262: PPUSH
4263: CALL_OW 177
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_oil_mine , 226 , 109 , 3 ) ;
4267: LD_EXP 77
4271: PPUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 2
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 72
4286: PPUSH
4287: LD_INT 29
4289: PPUSH
4290: LD_INT 226
4292: PPUSH
4293: LD_INT 109
4295: PPUSH
4296: LD_INT 3
4298: PPUSH
4299: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_armoury , 216 , 114 , 0 ) ;
4303: LD_EXP 77
4307: PPUSH
4308: LD_INT 25
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 72
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 216
4328: PPUSH
4329: LD_INT 114
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 215 , 103 , 3 ) ;
4339: LD_EXP 77
4343: PPUSH
4344: LD_INT 25
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PPUSH
4354: CALL_OW 72
4358: PPUSH
4359: LD_INT 31
4361: PPUSH
4362: LD_INT 215
4364: PPUSH
4365: LD_INT 103
4367: PPUSH
4368: LD_INT 3
4370: PPUSH
4371: CALL_OW 205
// AddComBuild ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , b_breastwork , 227 , 116 , 5 ) ;
4375: LD_EXP 77
4379: PPUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PPUSH
4390: CALL_OW 72
4394: PPUSH
4395: LD_INT 31
4397: PPUSH
4398: LD_INT 227
4400: PPUSH
4401: LD_INT 116
4403: PPUSH
4404: LD_INT 5
4406: PPUSH
4407: CALL_OW 205
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 208 , 106 ) ;
4411: LD_EXP 77
4415: PPUSH
4416: LD_INT 25
4418: PUSH
4419: LD_INT 2
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 72
4430: PPUSH
4431: LD_INT 208
4433: PPUSH
4434: LD_INT 106
4436: PPUSH
4437: CALL_OW 171
// AddComTurnXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 209 , 105 ) ;
4441: LD_EXP 77
4445: PPUSH
4446: LD_INT 25
4448: PUSH
4449: LD_INT 2
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PPUSH
4456: CALL_OW 72
4460: PPUSH
4461: LD_INT 209
4463: PPUSH
4464: LD_INT 105
4466: PPUSH
4467: CALL_OW 178
// AddComMoveXY ( secondBaseTeam [ 5 ] , 209 , 105 ) ;
4471: LD_EXP 77
4475: PUSH
4476: LD_INT 5
4478: ARRAY
4479: PPUSH
4480: LD_INT 209
4482: PPUSH
4483: LD_INT 105
4485: PPUSH
4486: CALL_OW 171
// AddComTurnXY ( secondBaseTeam [ 5 ] , 208 , 106 ) ;
4490: LD_EXP 77
4494: PUSH
4495: LD_INT 5
4497: ARRAY
4498: PPUSH
4499: LD_INT 208
4501: PPUSH
4502: LD_INT 106
4504: PPUSH
4505: CALL_OW 178
// end ;
4509: LD_VAR 0 1
4513: RET
// export function SpawnKirovSupport ; var i , un ; begin
4514: LD_INT 0
4516: PPUSH
4517: PPUSH
4518: PPUSH
// uc_side = 6 ;
4519: LD_ADDR_OWVAR 20
4523: PUSH
4524: LD_INT 6
4526: ST_TO_ADDR
// uc_nation = 3 ;
4527: LD_ADDR_OWVAR 21
4531: PUSH
4532: LD_INT 3
4534: ST_TO_ADDR
// hc_name =  ;
4535: LD_ADDR_OWVAR 26
4539: PUSH
4540: LD_STRING 
4542: ST_TO_ADDR
// hc_gallery :=  ;
4543: LD_ADDR_OWVAR 33
4547: PUSH
4548: LD_STRING 
4550: ST_TO_ADDR
// for i := 1 to survivorsToSpawn do
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_EXP 79
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4655
// begin PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 2 ) ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_INT 1
4574: PPUSH
4575: LD_INT 4
4577: PPUSH
4578: CALL_OW 12
4582: PPUSH
4583: LD_INT 1
4585: PPUSH
4586: LD_INT 2
4588: PPUSH
4589: CALL_OW 12
4593: PPUSH
4594: CALL_OW 380
// un = CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ un ;
4608: LD_ADDR_EXP 78
4612: PUSH
4613: LD_EXP 78
4617: PUSH
4618: LD_VAR 0 3
4622: ADD
4623: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4624: LD_VAR 0 3
4628: PPUSH
4629: LD_INT 19
4631: PPUSH
4632: LD_INT 0
4634: PPUSH
4635: CALL_OW 49
// ComEnterUnit ( un , kirovDepot ) ;
4639: LD_VAR 0 3
4643: PPUSH
4644: LD_EXP 66
4648: PPUSH
4649: CALL_OW 120
// end ;
4653: GO 4566
4655: POP
4656: POP
// for i := 1 to neededUnitsSpawn [ 1 ] + 4 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_EXP 80
4671: PUSH
4672: LD_INT 1
4674: ARRAY
4675: PUSH
4676: LD_INT 4
4678: PLUS
4679: PUSH
4680: FOR_TO
4681: IFFALSE 4779
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
4683: LD_INT 0
4685: PPUSH
4686: LD_INT 1
4688: PPUSH
4689: LD_INT 1
4691: PPUSH
4692: LD_INT 3
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: CALL_OW 380
// un = CreateHuman ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 19
4721: PPUSH
4722: LD_INT 0
4724: PPUSH
4725: CALL_OW 49
// if i > kirovBunkersToOccupy then
4729: LD_VAR 0 2
4733: PUSH
4734: LD_EXP 72
4738: GREATER
4739: IFFALSE 4757
// ComEnterUnit ( un , ru2_bar2 ) else
4741: LD_VAR 0 3
4745: PPUSH
4746: LD_EXP 69
4750: PPUSH
4751: CALL_OW 120
4755: GO 4777
// ComEnterUnit ( un , kirovBunkersToOccupy [ i ] ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_EXP 72
4766: PUSH
4767: LD_VAR 0 2
4771: ARRAY
4772: PPUSH
4773: CALL_OW 120
// end ;
4777: GO 4680
4779: POP
4780: POP
// for i := 1 to neededUnitsSpawn [ 3 ] do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_EXP 80
4795: PUSH
4796: LD_INT 3
4798: ARRAY
4799: PUSH
4800: FOR_TO
4801: IFFALSE 4904
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
4803: LD_INT 0
4805: PPUSH
4806: LD_INT 3
4808: PPUSH
4809: LD_INT 1
4811: PPUSH
4812: LD_INT 3
4814: PPUSH
4815: CALL_OW 12
4819: PPUSH
4820: CALL_OW 380
// un = CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4834: LD_VAR 0 3
4838: PPUSH
4839: LD_INT 19
4841: PPUSH
4842: LD_INT 0
4844: PPUSH
4845: CALL_OW 49
// ComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
4849: LD_VAR 0 3
4853: PPUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 6
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 21
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 3
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: PPUSH
4889: CALL_OW 69
4893: PUSH
4894: LD_INT 1
4896: ARRAY
4897: PPUSH
4898: CALL_OW 120
// end ;
4902: GO 4800
4904: POP
4905: POP
// for i := 1 to neededUnitsSpawn [ 4 ] + 2 do
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: DOUBLE
4912: LD_INT 1
4914: DEC
4915: ST_TO_ADDR
4916: LD_EXP 80
4920: PUSH
4921: LD_INT 4
4923: ARRAY
4924: PUSH
4925: LD_INT 2
4927: PLUS
4928: PUSH
4929: FOR_TO
4930: IFFALSE 5036
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
4932: LD_INT 0
4934: PPUSH
4935: LD_INT 4
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: LD_INT 3
4943: PPUSH
4944: CALL_OW 12
4948: PPUSH
4949: CALL_OW 380
// un = CreateHuman ;
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: CALL_OW 44
4962: ST_TO_ADDR
// PlaceUnitArea ( un , KirovSupportSpawnArea , false ) ;
4963: LD_VAR 0 3
4967: PPUSH
4968: LD_INT 19
4970: PPUSH
4971: LD_INT 0
4973: PPUSH
4974: CALL_OW 49
// ComEnterUnit ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ) ;
4978: LD_VAR 0 3
4982: PPUSH
4983: LD_INT 18
4985: PPUSH
4986: LD_INT 22
4988: PUSH
4989: LD_INT 6
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 21
4998: PUSH
4999: LD_INT 3
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: LD_INT 30
5008: PUSH
5009: LD_INT 6
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 70
5025: PUSH
5026: LD_INT 1
5028: ARRAY
5029: PPUSH
5030: CALL_OW 120
// end ;
5034: GO 4929
5036: POP
5037: POP
// end ;
5038: LD_VAR 0 1
5042: RET
// export function SetSurvivorsArabianAttack ; var limit , unit ; begin
5043: LD_INT 0
5045: PPUSH
5046: PPUSH
5047: PPUSH
// survivorsArabianAttack = [ ] ;
5048: LD_ADDR_EXP 78
5052: PUSH
5053: EMPTY
5054: ST_TO_ADDR
// limit = 9 ;
5055: LD_ADDR_VAR 0 2
5059: PUSH
5060: LD_INT 9
5062: ST_TO_ADDR
// survivorsArabianAttack = survivorsArabianAttack ^ Popov ;
5063: LD_ADDR_EXP 78
5067: PUSH
5068: LD_EXP 78
5072: PUSH
5073: LD_EXP 61
5077: ADD
5078: ST_TO_ADDR
// if IsOK ( Belkov ) and GetSide ( Belkov ) = 6 then
5079: LD_EXP 52
5083: PPUSH
5084: CALL_OW 302
5088: PUSH
5089: LD_EXP 52
5093: PPUSH
5094: CALL_OW 255
5098: PUSH
5099: LD_INT 6
5101: EQUAL
5102: AND
5103: IFFALSE 5135
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov ;
5105: LD_ADDR_EXP 78
5109: PUSH
5110: LD_EXP 78
5114: PUSH
5115: LD_EXP 52
5119: ADD
5120: ST_TO_ADDR
// limit = limit - 1 ;
5121: LD_ADDR_VAR 0 2
5125: PUSH
5126: LD_VAR 0 2
5130: PUSH
5131: LD_INT 1
5133: MINUS
5134: ST_TO_ADDR
// end ; if IsOK ( Belkov2 ) and GetSide ( Belkov2 ) = 6 then
5135: LD_EXP 53
5139: PPUSH
5140: CALL_OW 302
5144: PUSH
5145: LD_EXP 53
5149: PPUSH
5150: CALL_OW 255
5154: PUSH
5155: LD_INT 6
5157: EQUAL
5158: AND
5159: IFFALSE 5191
// begin survivorsArabianAttack = survivorsArabianAttack ^ Belkov2 ;
5161: LD_ADDR_EXP 78
5165: PUSH
5166: LD_EXP 78
5170: PUSH
5171: LD_EXP 53
5175: ADD
5176: ST_TO_ADDR
// limit = limit - 1 ;
5177: LD_ADDR_VAR 0 2
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_INT 1
5189: MINUS
5190: ST_TO_ADDR
// end ; for unit in other_survivors do
5191: LD_ADDR_VAR 0 3
5195: PUSH
5196: LD_EXP 55
5200: PUSH
5201: FOR_IN
5202: IFFALSE 5262
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5204: LD_VAR 0 3
5208: PPUSH
5209: CALL_OW 302
5213: PUSH
5214: LD_VAR 0 3
5218: PPUSH
5219: CALL_OW 255
5223: PUSH
5224: LD_INT 6
5226: EQUAL
5227: AND
5228: IFFALSE 5260
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5230: LD_ADDR_EXP 78
5234: PUSH
5235: LD_EXP 78
5239: PUSH
5240: LD_VAR 0 3
5244: ADD
5245: ST_TO_ADDR
// limit = limit - 1 ;
5246: LD_ADDR_VAR 0 2
5250: PUSH
5251: LD_VAR 0 2
5255: PUSH
5256: LD_INT 1
5258: MINUS
5259: ST_TO_ADDR
// end ; end ;
5260: GO 5201
5262: POP
5263: POP
// for unit in otherBeriaUnits do
5264: LD_ADDR_VAR 0 3
5268: PUSH
5269: LD_EXP 57
5273: PUSH
5274: FOR_IN
5275: IFFALSE 5335
// begin if IsOK ( unit ) and GetSide ( unit ) = 6 then
5277: LD_VAR 0 3
5281: PPUSH
5282: CALL_OW 302
5286: PUSH
5287: LD_VAR 0 3
5291: PPUSH
5292: CALL_OW 255
5296: PUSH
5297: LD_INT 6
5299: EQUAL
5300: AND
5301: IFFALSE 5333
// begin survivorsArabianAttack = survivorsArabianAttack ^ unit ;
5303: LD_ADDR_EXP 78
5307: PUSH
5308: LD_EXP 78
5312: PUSH
5313: LD_VAR 0 3
5317: ADD
5318: ST_TO_ADDR
// limit = limit - 1 ;
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: LD_VAR 0 2
5328: PUSH
5329: LD_INT 1
5331: MINUS
5332: ST_TO_ADDR
// end ; end ;
5333: GO 5274
5335: POP
5336: POP
// if limit > 0 then
5337: LD_VAR 0 2
5341: PUSH
5342: LD_INT 0
5344: GREATER
5345: IFFALSE 5357
// survivorsToSpawn = limit ;
5347: LD_ADDR_EXP 79
5351: PUSH
5352: LD_VAR 0 2
5356: ST_TO_ADDR
// end ;
5357: LD_VAR 0 1
5361: RET
// export function PrepareScholtze ; begin
5362: LD_INT 0
5364: PPUSH
// uc_side = 8 ;
5365: LD_ADDR_OWVAR 20
5369: PUSH
5370: LD_INT 8
5372: ST_TO_ADDR
// Scholtze = PrepareUnitExt ( Scholtze , false ) ;
5373: LD_ADDR_EXP 54
5377: PUSH
5378: LD_STRING Scholtze
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL 6913 0 2
5388: ST_TO_ADDR
// PlaceUnitArea ( Scholtze , ScholtzeSpawnArea , true ) ;
5389: LD_EXP 54
5393: PPUSH
5394: LD_INT 30
5396: PPUSH
5397: LD_INT 1
5399: PPUSH
5400: CALL_OW 49
// end ; end_of_file
5404: LD_VAR 0 1
5408: RET
// export amIntroUnits ; export amSupportTroops ; export amPatrol ; export amBase ; export function PrepareAmericans ; begin
5409: LD_INT 0
5411: PPUSH
// amSupportTroops = [ ] ;
5412: LD_ADDR_EXP 83
5416: PUSH
5417: EMPTY
5418: ST_TO_ADDR
// PrepareOmicronBase ;
5419: CALL 5428 0 0
// end ;
5423: LD_VAR 0 1
5427: RET
// function PrepareOmicronBase ; var base ; begin
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
// amBase := PrepareBase ( omikron , OmicronBaseArea , omikron , [ 1 , 2 , 2 ] [ Difficulty ] , [ 3000 , 3000 , 0 ] , [ 7 , 3 , 4 , 2 ] ) ;
5432: LD_ADDR_EXP 85
5436: PUSH
5437: LD_INT 64
5439: PPUSH
5440: LD_INT 13
5442: PPUSH
5443: LD_STRING omikron
5445: PPUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_OWVAR 67
5464: ARRAY
5465: PPUSH
5466: LD_INT 3000
5468: PUSH
5469: LD_INT 3000
5471: PUSH
5472: LD_INT 0
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: PPUSH
5480: LD_INT 7
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL 38955 0 6
5502: ST_TO_ADDR
// case Difficulty of 2 :
5503: LD_OWVAR 67
5507: PUSH
5508: LD_INT 2
5510: DOUBLE
5511: EQUAL
5512: IFTRUE 5516
5514: GO 5532
5516: POP
// begin SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5517: LD_INT 51
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 322
// end ; 3 :
5530: GO 5570
5532: LD_INT 3
5534: DOUBLE
5535: EQUAL
5536: IFTRUE 5540
5538: GO 5569
5540: POP
// begin SetTech ( tech_Tech2 , 1 , state_enabled ) ;
5541: LD_INT 49
5543: PPUSH
5544: LD_INT 1
5546: PPUSH
5547: LD_INT 1
5549: PPUSH
5550: CALL_OW 322
// SetTech ( tech_Weap1 , 1 , state_enabled ) ;
5554: LD_INT 51
5556: PPUSH
5557: LD_INT 1
5559: PPUSH
5560: LD_INT 1
5562: PPUSH
5563: CALL_OW 322
// end ; end ;
5567: GO 5570
5569: POP
// end ;
5570: LD_VAR 0 1
5574: RET
// export function PrepareAmericansMissionIntro ; var i , veh , human ; begin
5575: LD_INT 0
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
// amIntroUnits = [ ] ;
5581: LD_ADDR_EXP 82
5585: PUSH
5586: EMPTY
5587: ST_TO_ADDR
// uc_side = 1 ;
5588: LD_ADDR_OWVAR 20
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// uc_nation = nation_american ;
5596: LD_ADDR_OWVAR 21
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
5604: LD_ADDR_OWVAR 37
5608: PUSH
5609: LD_INT 3
5611: ST_TO_ADDR
// vc_control = control_manual ;
5612: LD_ADDR_OWVAR 38
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// vc_engine = engine_combustion ;
5620: LD_ADDR_OWVAR 39
5624: PUSH
5625: LD_INT 1
5627: ST_TO_ADDR
// vc_weapon = us_double_gun ;
5628: LD_ADDR_OWVAR 40
5632: PUSH
5633: LD_INT 5
5635: ST_TO_ADDR
// veh = CreateVehicle ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: CALL_OW 45
5645: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5646: LD_VAR 0 3
5650: PPUSH
5651: LD_INT 4
5653: PPUSH
5654: CALL_OW 233
// amIntroUnits = amIntroUnits ^ veh ;
5658: LD_ADDR_EXP 82
5662: PUSH
5663: LD_EXP 82
5667: PUSH
5668: LD_VAR 0 3
5672: ADD
5673: ST_TO_ADDR
// PlaceUnitArea ( veh , CutsceneAmSupportSpawnArea , false ) ;
5674: LD_VAR 0 3
5678: PPUSH
5679: LD_INT 5
5681: PPUSH
5682: LD_INT 0
5684: PPUSH
5685: CALL_OW 49
// for i := 1 to 5 do
5689: LD_ADDR_VAR 0 2
5693: PUSH
5694: DOUBLE
5695: LD_INT 1
5697: DEC
5698: ST_TO_ADDR
5699: LD_INT 5
5701: PUSH
5702: FOR_TO
5703: IFFALSE 5800
// begin hc_name :=  ;
5705: LD_ADDR_OWVAR 26
5709: PUSH
5710: LD_STRING 
5712: ST_TO_ADDR
// hc_gallery :=  ;
5713: LD_ADDR_OWVAR 33
5717: PUSH
5718: LD_STRING 
5720: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
5721: LD_INT 0
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 381
// human = CreateHuman ;
5731: LD_ADDR_VAR 0 4
5735: PUSH
5736: CALL_OW 44
5740: ST_TO_ADDR
// amIntroUnits = amIntroUnits ^ human ;
5741: LD_ADDR_EXP 82
5745: PUSH
5746: LD_EXP 82
5750: PUSH
5751: LD_VAR 0 4
5755: ADD
5756: ST_TO_ADDR
// if i < 5 then
5757: LD_VAR 0 2
5761: PUSH
5762: LD_INT 5
5764: LESS
5765: IFFALSE 5784
// PlaceUnitArea ( human , CutsceneAmSupportSpawnArea , false ) else
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_INT 5
5774: PPUSH
5775: LD_INT 0
5777: PPUSH
5778: CALL_OW 49
5782: GO 5798
// begin PlaceHumanInUnit ( human , veh ) ;
5784: LD_VAR 0 4
5788: PPUSH
5789: LD_VAR 0 3
5793: PPUSH
5794: CALL_OW 52
// end ; end ;
5798: GO 5702
5800: POP
5801: POP
// end ;
5802: LD_VAR 0 1
5806: RET
// export function PrepareAmericanSupportTroops ( soldiersAmount , scientistsAmount , vehiclesAmount , area ) ; var i , un , veh , road ; begin
5807: LD_INT 0
5809: PPUSH
5810: PPUSH
5811: PPUSH
5812: PPUSH
5813: PPUSH
// uc_side := 1 ;
5814: LD_ADDR_OWVAR 20
5818: PUSH
5819: LD_INT 1
5821: ST_TO_ADDR
// uc_nation := 1 ;
5822: LD_ADDR_OWVAR 21
5826: PUSH
5827: LD_INT 1
5829: ST_TO_ADDR
// hc_name :=  ;
5830: LD_ADDR_OWVAR 26
5834: PUSH
5835: LD_STRING 
5837: ST_TO_ADDR
// hc_gallery :=  ;
5838: LD_ADDR_OWVAR 33
5842: PUSH
5843: LD_STRING 
5845: ST_TO_ADDR
// for i := 1 to soldiersAmount do
5846: LD_ADDR_VAR 0 6
5850: PUSH
5851: DOUBLE
5852: LD_INT 1
5854: DEC
5855: ST_TO_ADDR
5856: LD_VAR 0 1
5860: PUSH
5861: FOR_TO
5862: IFFALSE 5921
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_EXP 43
5871: PPUSH
5872: CALL_OW 381
// un = CreateHuman ;
5876: LD_ADDR_VAR 0 7
5880: PUSH
5881: CALL_OW 44
5885: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5886: LD_ADDR_EXP 83
5890: PUSH
5891: LD_EXP 83
5895: PUSH
5896: LD_VAR 0 7
5900: ADD
5901: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5902: LD_VAR 0 7
5906: PPUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 0
5914: PPUSH
5915: CALL_OW 49
// end ;
5919: GO 5861
5921: POP
5922: POP
// for i := 1 to scientistsAmount do
5923: LD_ADDR_VAR 0 6
5927: PUSH
5928: DOUBLE
5929: LD_INT 1
5931: DEC
5932: ST_TO_ADDR
5933: LD_VAR 0 2
5937: PUSH
5938: FOR_TO
5939: IFFALSE 5998
// begin PrepareScientist ( false , enemySkillLevel ) ;
5941: LD_INT 0
5943: PPUSH
5944: LD_EXP 43
5948: PPUSH
5949: CALL_OW 384
// un = CreateHuman ;
5953: LD_ADDR_VAR 0 7
5957: PUSH
5958: CALL_OW 44
5962: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
5963: LD_ADDR_EXP 83
5967: PUSH
5968: LD_EXP 83
5972: PUSH
5973: LD_VAR 0 7
5977: ADD
5978: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5979: LD_VAR 0 7
5983: PPUSH
5984: LD_VAR 0 4
5988: PPUSH
5989: LD_INT 0
5991: PPUSH
5992: CALL_OW 49
// end ;
5996: GO 5938
5998: POP
5999: POP
// for i := 1 to vehiclesAmount do
6000: LD_ADDR_VAR 0 6
6004: PUSH
6005: DOUBLE
6006: LD_INT 1
6008: DEC
6009: ST_TO_ADDR
6010: LD_VAR 0 3
6014: PUSH
6015: FOR_TO
6016: IFFALSE 6182
// begin vc_weapon = [ us_machine_gun , us_gatling_gun , us_light_gun ] [ Rand ( 1 , 3 ) ] ;
6018: LD_ADDR_OWVAR 40
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 4
6028: PUSH
6029: LD_INT 3
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 1
6039: PPUSH
6040: LD_INT 3
6042: PPUSH
6043: CALL_OW 12
6047: ARRAY
6048: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
6049: LD_ADDR_OWVAR 37
6053: PUSH
6054: LD_INT 3
6056: ST_TO_ADDR
// vc_control = control_manual ;
6057: LD_ADDR_OWVAR 38
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// vc_engine = engine_combustion ;
6065: LD_ADDR_OWVAR 39
6069: PUSH
6070: LD_INT 1
6072: ST_TO_ADDR
// veh = CreateVehicle ;
6073: LD_ADDR_VAR 0 8
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ veh ;
6083: LD_ADDR_EXP 83
6087: PUSH
6088: LD_EXP 83
6092: PUSH
6093: LD_VAR 0 8
6097: ADD
6098: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
6099: LD_VAR 0 8
6103: PPUSH
6104: LD_VAR 0 4
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 49
// PrepareMechanic ( false , enemySkillLevel ) ;
6116: LD_INT 0
6118: PPUSH
6119: LD_EXP 43
6123: PPUSH
6124: CALL_OW 383
// un = CreateHuman ;
6128: LD_ADDR_VAR 0 7
6132: PUSH
6133: CALL_OW 44
6137: ST_TO_ADDR
// amSupportTroops = amSupportTroops ^ un ;
6138: LD_ADDR_EXP 83
6142: PUSH
6143: LD_EXP 83
6147: PUSH
6148: LD_VAR 0 7
6152: ADD
6153: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6154: LD_VAR 0 7
6158: PPUSH
6159: LD_VAR 0 8
6163: PPUSH
6164: CALL_OW 52
// SetFuel ( veh , 100 ) ;
6168: LD_VAR 0 8
6172: PPUSH
6173: LD_INT 100
6175: PPUSH
6176: CALL_OW 240
// end ;
6180: GO 6015
6182: POP
6183: POP
// case area of NorthAmericanSpawnArea :
6184: LD_VAR 0 4
6188: PUSH
6189: LD_INT 7
6191: DOUBLE
6192: EQUAL
6193: IFTRUE 6197
6195: GO 6208
6197: POP
// road = NorthRoadArea ; SouthAmericanSpawnArea1 :
6198: LD_ADDR_VAR 0 9
6202: PUSH
6203: LD_INT 10
6205: ST_TO_ADDR
6206: GO 6247
6208: LD_INT 9
6210: DOUBLE
6211: EQUAL
6212: IFTRUE 6216
6214: GO 6227
6216: POP
// road = SouthRoadArea1 ; SouthAmericanSpawnArea2 :
6217: LD_ADDR_VAR 0 9
6221: PUSH
6222: LD_INT 11
6224: ST_TO_ADDR
6225: GO 6247
6227: LD_INT 8
6229: DOUBLE
6230: EQUAL
6231: IFTRUE 6235
6233: GO 6246
6235: POP
// road = SouthRoadArea2 ; end ;
6236: LD_ADDR_VAR 0 9
6240: PUSH
6241: LD_INT 12
6243: ST_TO_ADDR
6244: GO 6247
6246: POP
// MoveToBase ( amSupportTroops , road ) ;
6247: LD_EXP 83
6251: PPUSH
6252: LD_VAR 0 9
6256: PPUSH
6257: CALL 18655 0 2
// end ;
6261: LD_VAR 0 5
6265: RET
// export function PrepareAmericanPatrol ; var un ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
// amPatrol = [ ] ;
6270: LD_ADDR_EXP 84
6274: PUSH
6275: EMPTY
6276: ST_TO_ADDR
// uc_side = 1 ;
6277: LD_ADDR_OWVAR 20
6281: PUSH
6282: LD_INT 1
6284: ST_TO_ADDR
// uc_nation = 1 ;
6285: LD_ADDR_OWVAR 21
6289: PUSH
6290: LD_INT 1
6292: ST_TO_ADDR
// un = PrepareUnitExt ( Campell , false ) ;
6293: LD_ADDR_VAR 0 2
6297: PUSH
6298: LD_STRING Campell
6300: PPUSH
6301: LD_INT 0
6303: PPUSH
6304: CALL 6913 0 2
6308: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6309: LD_ADDR_EXP 84
6313: PUSH
6314: LD_EXP 84
6318: PUSH
6319: LD_VAR 0 2
6323: ADD
6324: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 14
6332: PPUSH
6333: LD_INT 0
6335: PPUSH
6336: CALL_OW 49
// SetClass ( un , 1 ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 336
// PrepareSoldier ( sex_male , enemySkillLevel ) ;
6352: LD_INT 1
6354: PPUSH
6355: LD_EXP 43
6359: PPUSH
6360: CALL_OW 381
// un = CreateHuman ;
6364: LD_ADDR_VAR 0 2
6368: PUSH
6369: CALL_OW 44
6373: ST_TO_ADDR
// amPatrol = amPatrol ^ un ;
6374: LD_ADDR_EXP 84
6378: PUSH
6379: LD_EXP 84
6383: PUSH
6384: LD_VAR 0 2
6388: ADD
6389: ST_TO_ADDR
// PlaceUnitArea ( un , OmicronSpawnArea , false ) ;
6390: LD_VAR 0 2
6394: PPUSH
6395: LD_INT 14
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 49
// ComAttackUnit ( amPatrol , Scholtze ) ;
6405: LD_EXP 84
6409: PPUSH
6410: LD_EXP 54
6414: PPUSH
6415: CALL_OW 115
// end ; end_of_file
6419: LD_VAR 0 1
6423: RET
// export northGroup , southGroup ; export function PrepareArabian ; var i , un , veh ; begin
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
6428: PPUSH
6429: PPUSH
// northGroup = [ ] ;
6430: LD_ADDR_EXP 86
6434: PUSH
6435: EMPTY
6436: ST_TO_ADDR
// southGroup = [ ] ;
6437: LD_ADDR_EXP 87
6441: PUSH
6442: EMPTY
6443: ST_TO_ADDR
// uc_side = 2 ;
6444: LD_ADDR_OWVAR 20
6448: PUSH
6449: LD_INT 2
6451: ST_TO_ADDR
// uc_nation = 2 ;
6452: LD_ADDR_OWVAR 21
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// hc_name :=  ;
6460: LD_ADDR_OWVAR 26
6464: PUSH
6465: LD_STRING 
6467: ST_TO_ADDR
// hc_gallery :=  ;
6468: LD_ADDR_OWVAR 33
6472: PUSH
6473: LD_STRING 
6475: ST_TO_ADDR
// for i := 1 to 10 do
6476: LD_ADDR_VAR 0 2
6480: PUSH
6481: DOUBLE
6482: LD_INT 1
6484: DEC
6485: ST_TO_ADDR
6486: LD_INT 10
6488: PUSH
6489: FOR_TO
6490: IFFALSE 6604
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
6492: LD_INT 13
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 1
6500: PPUSH
6501: LD_INT 26
6503: PPUSH
6504: LD_INT 100
6506: PPUSH
6507: CALL 35546 0 5
// veh = CreateVehicle ;
6511: LD_ADDR_VAR 0 4
6515: PUSH
6516: CALL_OW 45
6520: ST_TO_ADDR
// southGroup = southGroup ^ veh ;
6521: LD_ADDR_EXP 87
6525: PUSH
6526: LD_EXP 87
6530: PUSH
6531: LD_VAR 0 4
6535: ADD
6536: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea2 , false ) ;
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_INT 23
6544: PPUSH
6545: LD_INT 0
6547: PPUSH
6548: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6552: LD_INT 0
6554: PPUSH
6555: LD_INT 8
6557: PPUSH
6558: CALL_OW 383
// un = CreateHuman ;
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: CALL_OW 44
6571: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6572: LD_ADDR_EXP 87
6576: PUSH
6577: LD_EXP 87
6581: PUSH
6582: LD_VAR 0 3
6586: ADD
6587: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6588: LD_VAR 0 3
6592: PPUSH
6593: LD_VAR 0 4
6597: PPUSH
6598: CALL_OW 52
// end ;
6602: GO 6489
6604: POP
6605: POP
// for i := 1 to 20 do
6606: LD_ADDR_VAR 0 2
6610: PUSH
6611: DOUBLE
6612: LD_INT 1
6614: DEC
6615: ST_TO_ADDR
6616: LD_INT 20
6618: PUSH
6619: FOR_TO
6620: IFFALSE 6675
// begin PrepareSoldier ( false , 8 ) ;
6622: LD_INT 0
6624: PPUSH
6625: LD_INT 8
6627: PPUSH
6628: CALL_OW 381
// un = CreateHuman ;
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: CALL_OW 44
6641: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6642: LD_ADDR_EXP 87
6646: PUSH
6647: LD_EXP 87
6651: PUSH
6652: LD_VAR 0 3
6656: ADD
6657: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6658: LD_VAR 0 3
6662: PPUSH
6663: LD_INT 23
6665: PPUSH
6666: LD_INT 0
6668: PPUSH
6669: CALL_OW 49
// end ;
6673: GO 6619
6675: POP
6676: POP
// for i := 1 to 20 do
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: DOUBLE
6683: LD_INT 1
6685: DEC
6686: ST_TO_ADDR
6687: LD_INT 20
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6749
// begin PrepareHuman ( false , class_mortar , 8 ) ;
6693: LD_INT 0
6695: PPUSH
6696: LD_INT 8
6698: PPUSH
6699: LD_INT 8
6701: PPUSH
6702: CALL_OW 380
// un = CreateHuman ;
6706: LD_ADDR_VAR 0 3
6710: PUSH
6711: CALL_OW 44
6715: ST_TO_ADDR
// southGroup = southGroup ^ un ;
6716: LD_ADDR_EXP 87
6720: PUSH
6721: LD_EXP 87
6725: PUSH
6726: LD_VAR 0 3
6730: ADD
6731: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawnArea2 , false ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_INT 23
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 49
// end ;
6747: GO 6690
6749: POP
6750: POP
// for i := 1 to 10 do
6751: LD_ADDR_VAR 0 2
6755: PUSH
6756: DOUBLE
6757: LD_INT 1
6759: DEC
6760: ST_TO_ADDR
6761: LD_INT 10
6763: PUSH
6764: FOR_TO
6765: IFFALSE 6906
// begin PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower ] [ Rand ( 1 , 4 ) ] , 100 ) ;
6767: LD_INT 13
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 25
6778: PUSH
6779: LD_INT 27
6781: PUSH
6782: LD_INT 23
6784: PUSH
6785: LD_INT 26
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_INT 4
6799: PPUSH
6800: CALL_OW 12
6804: ARRAY
6805: PPUSH
6806: LD_INT 100
6808: PPUSH
6809: CALL 35546 0 5
// veh = CreateVehicle ;
6813: LD_ADDR_VAR 0 4
6817: PUSH
6818: CALL_OW 45
6822: ST_TO_ADDR
// northGroup = northGroup ^ veh ;
6823: LD_ADDR_EXP 86
6827: PUSH
6828: LD_EXP 86
6832: PUSH
6833: LD_VAR 0 4
6837: ADD
6838: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea1 , false ) ;
6839: LD_VAR 0 4
6843: PPUSH
6844: LD_INT 22
6846: PPUSH
6847: LD_INT 0
6849: PPUSH
6850: CALL_OW 49
// PrepareMechanic ( false , 8 ) ;
6854: LD_INT 0
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 383
// un = CreateHuman ;
6864: LD_ADDR_VAR 0 3
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// northGroup = northGroup ^ un ;
6874: LD_ADDR_EXP 86
6878: PUSH
6879: LD_EXP 86
6883: PUSH
6884: LD_VAR 0 3
6888: ADD
6889: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_VAR 0 4
6899: PPUSH
6900: CALL_OW 52
// end ;
6904: GO 6764
6906: POP
6907: POP
// end ; end_of_file
6908: LD_VAR 0 1
6912: RET
// export function PrepareUnitExt ( ident , exist_mode ) ; var unit ; begin
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// if exist_mode then
6917: LD_VAR 0 2
6921: IFFALSE 6946
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6923: LD_ADDR_VAR 0 4
6927: PUSH
6928: LD_EXP 36
6932: PUSH
6933: LD_VAR 0 1
6937: STR
6938: PPUSH
6939: CALL_OW 34
6943: ST_TO_ADDR
6944: GO 6961
// unit := NewCharacter ( ident ) ;
6946: LD_ADDR_VAR 0 4
6950: PUSH
6951: LD_VAR 0 1
6955: PPUSH
6956: CALL_OW 25
6960: ST_TO_ADDR
// result := unit ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_VAR 0 4
6970: ST_TO_ADDR
// end ;
6971: LD_VAR 0 3
6975: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
// units = characters ;
6982: LD_ADDR_VAR 0 9
6986: PUSH
6987: LD_VAR 0 1
6991: ST_TO_ADDR
// units := units diff [ Burlak , Gnyevko , Kirilenkova , Kovalyuk , Belkov , Belkov2 , Scholtze ] ;
6992: LD_ADDR_VAR 0 9
6996: PUSH
6997: LD_VAR 0 9
7001: PUSH
7002: LD_EXP 48
7006: PUSH
7007: LD_EXP 49
7011: PUSH
7012: LD_EXP 50
7016: PUSH
7017: LD_EXP 51
7021: PUSH
7022: LD_EXP 52
7026: PUSH
7027: LD_EXP 53
7031: PUSH
7032: LD_EXP 54
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: DIFF
7046: ST_TO_ADDR
// if not units and not canTalkHero then
7047: LD_VAR 0 9
7051: NOT
7052: PUSH
7053: LD_VAR 0 5
7057: NOT
7058: AND
7059: IFFALSE 7063
// exit ;
7061: GO 7236
// if not units then
7063: LD_VAR 0 9
7067: NOT
7068: IFFALSE 7089
// units = characters diff [ Burlak ] ;
7070: LD_ADDR_VAR 0 9
7074: PUSH
7075: LD_VAR 0 1
7079: PUSH
7080: LD_EXP 48
7084: PUSH
7085: EMPTY
7086: LIST
7087: DIFF
7088: ST_TO_ADDR
// if not units and canTalkHero then
7089: LD_VAR 0 9
7093: NOT
7094: PUSH
7095: LD_VAR 0 5
7099: AND
7100: IFFALSE 7104
// exit ;
7102: GO 7236
// speaker := units [ rand ( 1 , units ) ] ;
7104: LD_ADDR_VAR 0 8
7108: PUSH
7109: LD_VAR 0 9
7113: PUSH
7114: LD_INT 1
7116: PPUSH
7117: LD_VAR 0 9
7121: PPUSH
7122: CALL_OW 12
7126: ARRAY
7127: ST_TO_ADDR
// if radio then
7128: LD_VAR 0 4
7132: IFFALSE 7181
// begin if GetSex ( speaker ) = sex_male then
7134: LD_VAR 0 8
7138: PPUSH
7139: CALL_OW 258
7143: PUSH
7144: LD_INT 1
7146: EQUAL
7147: IFFALSE 7165
// SayRadio ( speaker , dialogMID ) else
7149: LD_VAR 0 8
7153: PPUSH
7154: LD_VAR 0 2
7158: PPUSH
7159: CALL_OW 94
7163: GO 7179
// SayRadio ( speaker , dialogFID ) ;
7165: LD_VAR 0 8
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: CALL_OW 94
// end else
7179: GO 7226
// begin if GetSex ( speaker ) = sex_male then
7181: LD_VAR 0 8
7185: PPUSH
7186: CALL_OW 258
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7212
// Say ( speaker , dialogMID ) else
7196: LD_VAR 0 8
7200: PPUSH
7201: LD_VAR 0 2
7205: PPUSH
7206: CALL_OW 88
7210: GO 7226
// Say ( speaker , dialogFID ) ;
7212: LD_VAR 0 8
7216: PPUSH
7217: LD_VAR 0 3
7221: PPUSH
7222: CALL_OW 88
// end ; result := speaker ;
7226: LD_ADDR_VAR 0 6
7230: PUSH
7231: LD_VAR 0 8
7235: ST_TO_ADDR
// end ;
7236: LD_VAR 0 6
7240: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
7241: LD_INT 0
7243: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
7244: LD_VAR 0 1
7248: PPUSH
7249: CALL_OW 255
7253: PUSH
7254: LD_VAR 0 3
7258: EQUAL
7259: PUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 302
7269: AND
7270: IFFALSE 7292
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7272: LD_VAR 0 1
7276: PPUSH
7277: LD_EXP 35
7281: PUSH
7282: LD_VAR 0 2
7286: STR
7287: PPUSH
7288: CALL_OW 38
// end ;
7292: LD_VAR 0 4
7296: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
7297: LD_INT 0
7299: PPUSH
7300: PPUSH
7301: PPUSH
// resultCharactersToSave = [ ] ;
7302: LD_ADDR_VAR 0 6
7306: PUSH
7307: EMPTY
7308: ST_TO_ADDR
// for unit in characters do
7309: LD_ADDR_VAR 0 5
7313: PUSH
7314: LD_VAR 0 1
7318: PUSH
7319: FOR_IN
7320: IFFALSE 7368
// if GetSide ( unit ) = side and IsOK ( unit ) then
7322: LD_VAR 0 5
7326: PPUSH
7327: CALL_OW 255
7331: PUSH
7332: LD_VAR 0 3
7336: EQUAL
7337: PUSH
7338: LD_VAR 0 5
7342: PPUSH
7343: CALL_OW 302
7347: AND
7348: IFFALSE 7366
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7350: LD_ADDR_VAR 0 6
7354: PUSH
7355: LD_VAR 0 6
7359: PUSH
7360: LD_VAR 0 5
7364: ADD
7365: ST_TO_ADDR
7366: GO 7319
7368: POP
7369: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7370: LD_VAR 0 6
7374: PPUSH
7375: LD_EXP 35
7379: PUSH
7380: LD_VAR 0 2
7384: STR
7385: PPUSH
7386: CALL_OW 38
// end ;
7390: LD_VAR 0 4
7394: RET
// export function SelectCharacters ( maxUnitToChoose ) ; var i , charsToChoose , selectedPeople ; begin
7395: LD_INT 0
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
// charsToChoose = otherKirovUnits ;
7401: LD_ADDR_VAR 0 4
7405: PUSH
7406: LD_EXP 64
7410: ST_TO_ADDR
// charsToChoose = charsToChoose ^ otherBeriaUnits ;
7411: LD_ADDR_VAR 0 4
7415: PUSH
7416: LD_VAR 0 4
7420: PUSH
7421: LD_EXP 57
7425: ADD
7426: ST_TO_ADDR
// charsToChoose = charsToChoose ^ other_survivors ;
7427: LD_ADDR_VAR 0 4
7431: PUSH
7432: LD_VAR 0 4
7436: PUSH
7437: LD_EXP 55
7441: ADD
7442: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov ;
7443: LD_ADDR_VAR 0 4
7447: PUSH
7448: LD_VAR 0 4
7452: PUSH
7453: LD_EXP 52
7457: ADD
7458: ST_TO_ADDR
// charsToChoose = charsToChoose ^ Belkov2 ;
7459: LD_ADDR_VAR 0 4
7463: PUSH
7464: LD_VAR 0 4
7468: PUSH
7469: LD_EXP 53
7473: ADD
7474: ST_TO_ADDR
// selectedPeople = CharacterSelection ( text , maxUnitToChoose , maxUnitToChoose , [ sel_change_class , Burlak , Gnyevko , Kovalyuk , Kirilenkova , sel_dont_change_class , sel_not_hired , sel_changeable , sel_change_class ] ^ charsToChoose ^ [ sel_dont_change_class , sel_not_changeable , Kurin ] , [ class_soldier , class_mechanic , [ class_engineer , 1 ] , [ class_scientistic , 1 ] ] ) ;
7475: LD_ADDR_VAR 0 5
7479: PUSH
7480: LD_STRING text
7482: PPUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT -5
7495: PUSH
7496: LD_EXP 48
7500: PUSH
7501: LD_EXP 49
7505: PUSH
7506: LD_EXP 51
7510: PUSH
7511: LD_EXP 50
7515: PUSH
7516: LD_INT -6
7518: PUSH
7519: LD_INT -2
7521: PUSH
7522: LD_INT -3
7524: PUSH
7525: LD_INT -5
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: PUSH
7539: LD_VAR 0 4
7543: ADD
7544: PUSH
7545: LD_INT -6
7547: PUSH
7548: LD_INT -4
7550: PUSH
7551: LD_EXP 60
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: ADD
7561: PPUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 2
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 4
7580: PUSH
7581: LD_INT 1
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PPUSH
7594: CALL_OW 42
7598: ST_TO_ADDR
// SetSide ( charsToChoose , 6 ) ;
7599: LD_VAR 0 4
7603: PPUSH
7604: LD_INT 6
7606: PPUSH
7607: CALL_OW 235
// SetSide ( selectedPeople , 3 ) ;
7611: LD_VAR 0 5
7615: PPUSH
7616: LD_INT 3
7618: PPUSH
7619: CALL_OW 235
// SetSurvivorsArabianAttack ;
7623: CALL 5043 0 0
// MoveKurinUnitsToBuildings ;
7627: CALL 9165 0 0
// end ;
7631: LD_VAR 0 2
7635: RET
// export function FindNotFullBuildingInArea ( area , side , buildingType ) ; var building ; begin
7636: LD_INT 0
7638: PPUSH
7639: PPUSH
// for building in FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , buildingType ] ] ) do
7640: LD_ADDR_VAR 0 5
7644: PUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: LD_INT 22
7652: PUSH
7653: LD_VAR 0 2
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 21
7664: PUSH
7665: LD_INT 3
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: LD_INT 30
7674: PUSH
7675: LD_VAR 0 3
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 70
7693: PUSH
7694: FOR_IN
7695: IFFALSE 7728
// begin if UnitsInside ( building ) < 6 then
7697: LD_VAR 0 5
7701: PPUSH
7702: CALL_OW 313
7706: PUSH
7707: LD_INT 6
7709: LESS
7710: IFFALSE 7726
// begin result = building ;
7712: LD_ADDR_VAR 0 4
7716: PUSH
7717: LD_VAR 0 5
7721: ST_TO_ADDR
// exit ;
7722: POP
7723: POP
7724: GO 7738
// end ; end ;
7726: GO 7694
7728: POP
7729: POP
// result = 0 ;
7730: LD_ADDR_VAR 0 4
7734: PUSH
7735: LD_INT 0
7737: ST_TO_ADDR
// end ;
7738: LD_VAR 0 4
7742: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
7743: LD_INT 0
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
7749: LD_ADDR_VAR 0 6
7753: PUSH
7754: LD_INT 34
7756: PUSH
7757: LD_INT 71
7759: PUSH
7760: LD_INT 70
7762: PUSH
7763: LD_INT 69
7765: PUSH
7766: LD_INT 39
7768: PUSH
7769: LD_INT 31
7771: PUSH
7772: LD_INT 14
7774: PUSH
7775: LD_INT 10
7777: PUSH
7778: LD_INT 40
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// resultWeapons = [ ] ;
7792: LD_ADDR_VAR 0 5
7796: PUSH
7797: EMPTY
7798: ST_TO_ADDR
// for i := 1 to weaponTechs do
7799: LD_ADDR_VAR 0 4
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_VAR 0 6
7813: PUSH
7814: FOR_TO
7815: IFFALSE 8002
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
7817: LD_VAR 0 6
7821: PUSH
7822: LD_VAR 0 4
7826: ARRAY
7827: PPUSH
7828: LD_VAR 0 2
7832: PPUSH
7833: CALL_OW 482
7837: PUSH
7838: LD_VAR 0 6
7842: PUSH
7843: LD_VAR 0 4
7847: ARRAY
7848: PPUSH
7849: LD_VAR 0 1
7853: PPUSH
7854: CALL_OW 321
7858: PUSH
7859: LD_INT 2
7861: EQUAL
7862: AND
7863: IFFALSE 8000
// case nation of nation_american :
7865: LD_VAR 0 2
7869: PUSH
7870: LD_INT 1
7872: DOUBLE
7873: EQUAL
7874: IFTRUE 7878
7876: GO 7913
7878: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
7879: LD_ADDR_VAR 0 5
7883: PUSH
7884: LD_VAR 0 5
7888: PUSH
7889: LD_VAR 0 6
7893: PUSH
7894: LD_VAR 0 4
7898: ARRAY
7899: PPUSH
7900: LD_VAR 0 2
7904: PPUSH
7905: CALL 8019 0 2
7909: ADD
7910: ST_TO_ADDR
7911: GO 8000
7913: LD_INT 2
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7956
7921: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
7922: LD_ADDR_VAR 0 5
7926: PUSH
7927: LD_VAR 0 5
7931: PUSH
7932: LD_VAR 0 6
7936: PUSH
7937: LD_VAR 0 4
7941: ARRAY
7942: PPUSH
7943: LD_VAR 0 2
7947: PPUSH
7948: CALL 8019 0 2
7952: ADD
7953: ST_TO_ADDR
7954: GO 8000
7956: LD_INT 3
7958: DOUBLE
7959: EQUAL
7960: IFTRUE 7964
7962: GO 7999
7964: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
7965: LD_ADDR_VAR 0 5
7969: PUSH
7970: LD_VAR 0 5
7974: PUSH
7975: LD_VAR 0 6
7979: PUSH
7980: LD_VAR 0 4
7984: ARRAY
7985: PPUSH
7986: LD_VAR 0 2
7990: PPUSH
7991: CALL 8019 0 2
7995: ADD
7996: ST_TO_ADDR
7997: GO 8000
7999: POP
// end ;
8000: GO 7814
8002: POP
8003: POP
// result = resultWeapons ;
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_VAR 0 5
8013: ST_TO_ADDR
// end ;
8014: LD_VAR 0 3
8018: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
8019: LD_INT 0
8021: PPUSH
// case tech of tech_AdvMet :
8022: LD_VAR 0 1
8026: PUSH
8027: LD_INT 34
8029: DOUBLE
8030: EQUAL
8031: IFTRUE 8035
8033: GO 8063
8035: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
8036: LD_ADDR_VAR 0 3
8040: PUSH
8041: LD_INT 6
8043: PUSH
8044: LD_STRING 
8046: PUSH
8047: LD_INT 46
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_VAR 0 2
8059: ARRAY
8060: ST_TO_ADDR
8061: GO 8352
8063: LD_INT 71
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8099
8071: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_STRING 
8079: PUSH
8080: LD_STRING 
8082: PUSH
8083: LD_INT 47
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_VAR 0 2
8095: ARRAY
8096: ST_TO_ADDR
8097: GO 8352
8099: LD_INT 70
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8135
8107: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
8108: LD_ADDR_VAR 0 3
8112: PUSH
8113: LD_STRING 
8115: PUSH
8116: LD_INT 26
8118: PUSH
8119: LD_STRING 
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_VAR 0 2
8131: ARRAY
8132: ST_TO_ADDR
8133: GO 8352
8135: LD_INT 69
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8171
8143: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 4
8151: PUSH
8152: LD_INT 25
8154: PUSH
8155: LD_INT 43
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_VAR 0 2
8167: ARRAY
8168: ST_TO_ADDR
8169: GO 8352
8171: LD_INT 39
8173: DOUBLE
8174: EQUAL
8175: IFTRUE 8179
8177: GO 8207
8179: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
8180: LD_ADDR_VAR 0 3
8184: PUSH
8185: LD_INT 5
8187: PUSH
8188: LD_INT 27
8190: PUSH
8191: LD_INT 44
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: ST_TO_ADDR
8205: GO 8352
8207: LD_INT 31
8209: DOUBLE
8210: EQUAL
8211: IFTRUE 8215
8213: GO 8243
8215: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
8216: LD_ADDR_VAR 0 3
8220: PUSH
8221: LD_STRING 
8223: PUSH
8224: LD_STRING 
8226: PUSH
8227: LD_INT 49
8229: PUSH
8230: EMPTY
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_VAR 0 2
8239: ARRAY
8240: ST_TO_ADDR
8241: GO 8352
8243: LD_INT 14
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8279
8251: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
8252: LD_ADDR_VAR 0 3
8256: PUSH
8257: LD_INT 10
8259: PUSH
8260: LD_STRING 
8262: PUSH
8263: LD_STRING 
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: LD_VAR 0 2
8275: ARRAY
8276: ST_TO_ADDR
8277: GO 8352
8279: LD_INT 10
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8315
8287: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 9
8295: PUSH
8296: LD_STRING 
8298: PUSH
8299: LD_STRING 
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: PUSH
8307: LD_VAR 0 2
8311: ARRAY
8312: ST_TO_ADDR
8313: GO 8352
8315: LD_INT 40
8317: DOUBLE
8318: EQUAL
8319: IFTRUE 8323
8321: GO 8351
8323: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
8324: LD_ADDR_VAR 0 3
8328: PUSH
8329: LD_INT 7
8331: PUSH
8332: LD_INT 28
8334: PUSH
8335: LD_INT 45
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_VAR 0 2
8347: ARRAY
8348: ST_TO_ADDR
8349: GO 8352
8351: POP
// end ;
8352: LD_VAR 0 3
8356: RET
// export function ComRefuelFromCargo ( units , cargo ) ; var veh ; begin
8357: LD_INT 0
8359: PPUSH
8360: PPUSH
// for veh in units do
8361: LD_ADDR_VAR 0 4
8365: PUSH
8366: LD_VAR 0 1
8370: PUSH
8371: FOR_IN
8372: IFFALSE 8450
// begin if GetType ( veh ) = unit_vehicle and GetFuel ( veh ) < 100 then
8374: LD_VAR 0 4
8378: PPUSH
8379: CALL_OW 247
8383: PUSH
8384: LD_INT 2
8386: EQUAL
8387: PUSH
8388: LD_VAR 0 4
8392: PPUSH
8393: CALL_OW 261
8397: PUSH
8398: LD_INT 100
8400: LESS
8401: AND
8402: IFFALSE 8448
// SetTaskList ( veh , [ [ X , 0 , 0 , cargo , 0 , 0 , 0 ] ] ) ;
8404: LD_VAR 0 4
8408: PPUSH
8409: LD_STRING X
8411: PUSH
8412: LD_INT 0
8414: PUSH
8415: LD_INT 0
8417: PUSH
8418: LD_VAR 0 2
8422: PUSH
8423: LD_INT 0
8425: PUSH
8426: LD_INT 0
8428: PUSH
8429: LD_INT 0
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: PPUSH
8444: CALL_OW 446
// end ;
8448: GO 8371
8450: POP
8451: POP
// end ;
8452: LD_VAR 0 3
8456: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
8457: LD_INT 0
8459: PPUSH
8460: PPUSH
// dir := GetDir ( bunker ) - 3 ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 2
8470: PPUSH
8471: CALL_OW 254
8475: PUSH
8476: LD_INT 3
8478: MINUS
8479: ST_TO_ADDR
// if dir < 0 then
8480: LD_VAR 0 4
8484: PUSH
8485: LD_INT 0
8487: LESS
8488: IFFALSE 8504
// dir := 6 + dir ;
8490: LD_ADDR_VAR 0 4
8494: PUSH
8495: LD_INT 6
8497: PUSH
8498: LD_VAR 0 4
8502: PLUS
8503: ST_TO_ADDR
// SetDir ( un , dir ) ;
8504: LD_VAR 0 1
8508: PPUSH
8509: LD_VAR 0 4
8513: PPUSH
8514: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
8518: LD_VAR 0 1
8522: PPUSH
8523: LD_VAR 0 2
8527: PPUSH
8528: CALL_OW 52
// result = un ;
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_VAR 0 1
8541: ST_TO_ADDR
// end ;
8542: LD_VAR 0 3
8546: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
8551: PPUSH
// uc_side := GetSide ( b ) ;
8552: LD_ADDR_OWVAR 20
8556: PUSH
8557: LD_VAR 0 2
8561: PPUSH
8562: CALL_OW 255
8566: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
8567: LD_ADDR_OWVAR 21
8571: PUSH
8572: LD_VAR 0 2
8576: PPUSH
8577: CALL_OW 248
8581: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
8582: LD_INT 0
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_VAR 0 1
8592: PPUSH
8593: CALL_OW 380
// un = CreateHuman ;
8597: LD_ADDR_VAR 0 4
8601: PUSH
8602: CALL_OW 44
8606: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
8607: LD_ADDR_VAR 0 5
8611: PUSH
8612: LD_VAR 0 2
8616: PPUSH
8617: CALL_OW 254
8621: PUSH
8622: LD_INT 3
8624: MINUS
8625: ST_TO_ADDR
// if dir < 0 then
8626: LD_VAR 0 5
8630: PUSH
8631: LD_INT 0
8633: LESS
8634: IFFALSE 8650
// dir := 6 + dir ;
8636: LD_ADDR_VAR 0 5
8640: PUSH
8641: LD_INT 6
8643: PUSH
8644: LD_VAR 0 5
8648: PLUS
8649: ST_TO_ADDR
// SetDir ( un , dir ) ;
8650: LD_VAR 0 4
8654: PPUSH
8655: LD_VAR 0 5
8659: PPUSH
8660: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
8664: LD_VAR 0 4
8668: PPUSH
8669: LD_VAR 0 2
8673: PPUSH
8674: CALL_OW 52
// result = un ;
8678: LD_ADDR_VAR 0 3
8682: PUSH
8683: LD_VAR 0 4
8687: ST_TO_ADDR
// end ;
8688: LD_VAR 0 3
8692: RET
// export function AddComUpgradeBreastwork ( units , buildings , upgradeBType ) ; var building , x , y , dir ; begin
8693: LD_INT 0
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
8699: PPUSH
// for building in buildings do
8700: LD_ADDR_VAR 0 5
8704: PUSH
8705: LD_VAR 0 2
8709: PUSH
8710: FOR_IN
8711: IFFALSE 8803
// begin x = GetX ( building ) ;
8713: LD_ADDR_VAR 0 6
8717: PUSH
8718: LD_VAR 0 5
8722: PPUSH
8723: CALL_OW 250
8727: ST_TO_ADDR
// y = GetY ( building ) ;
8728: LD_ADDR_VAR 0 7
8732: PUSH
8733: LD_VAR 0 5
8737: PPUSH
8738: CALL_OW 251
8742: ST_TO_ADDR
// dir = GetDir ( building ) ;
8743: LD_ADDR_VAR 0 8
8747: PUSH
8748: LD_VAR 0 5
8752: PPUSH
8753: CALL_OW 254
8757: ST_TO_ADDR
// AddComDismantle ( units , building ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_VAR 0 5
8767: PPUSH
8768: CALL_OW 227
// AddComBuild ( units , upgradeBType , x , y , dir ) ;
8772: LD_VAR 0 1
8776: PPUSH
8777: LD_VAR 0 3
8781: PPUSH
8782: LD_VAR 0 6
8786: PPUSH
8787: LD_VAR 0 7
8791: PPUSH
8792: LD_VAR 0 8
8796: PPUSH
8797: CALL_OW 205
// end ;
8801: GO 8710
8803: POP
8804: POP
// end ;
8805: LD_VAR 0 4
8809: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list , am_tech_list ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
8816: PPUSH
8817: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
8818: LD_ADDR_VAR 0 8
8822: PUSH
8823: LD_INT 48
8825: PUSH
8826: LD_INT 49
8828: PUSH
8829: LD_INT 50
8831: PUSH
8832: LD_INT 20
8834: PUSH
8835: LD_INT 1
8837: PUSH
8838: LD_INT 51
8840: PUSH
8841: LD_INT 52
8843: PUSH
8844: LD_INT 69
8846: PUSH
8847: LD_INT 39
8849: PUSH
8850: LD_INT 34
8852: PUSH
8853: LD_INT 40
8855: PUSH
8856: LD_INT 53
8858: PUSH
8859: LD_INT 71
8861: PUSH
8862: LD_INT 57
8864: PUSH
8865: LD_INT 58
8867: PUSH
8868: LD_INT 44
8870: PUSH
8871: LD_INT 32
8873: PUSH
8874: LD_INT 27
8876: PUSH
8877: LD_INT 23
8879: PUSH
8880: LD_INT 33
8882: PUSH
8883: LD_INT 59
8885: PUSH
8886: LD_INT 54
8888: PUSH
8889: LD_INT 55
8891: PUSH
8892: LD_INT 56
8894: PUSH
8895: LD_INT 63
8897: PUSH
8898: LD_INT 64
8900: PUSH
8901: LD_INT 65
8903: PUSH
8904: LD_INT 30
8906: PUSH
8907: LD_INT 31
8909: PUSH
8910: LD_INT 21
8912: PUSH
8913: LD_INT 22
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// am_tech_list = GetTechNation ( 1 , 1 , state_enabled ) ;
8953: LD_ADDR_VAR 0 9
8957: PUSH
8958: LD_INT 1
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_INT 1
8966: PPUSH
8967: CALL 30785 0 3
8971: ST_TO_ADDR
// for i = 1 to ru_tech_list do
8972: LD_ADDR_VAR 0 5
8976: PUSH
8977: DOUBLE
8978: LD_INT 1
8980: DEC
8981: ST_TO_ADDR
8982: LD_VAR 0 8
8986: PUSH
8987: FOR_TO
8988: IFFALSE 9064
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
8990: LD_VAR 0 8
8994: PUSH
8995: LD_VAR 0 5
8999: ARRAY
9000: PPUSH
9001: LD_VAR 0 1
9005: PPUSH
9006: CALL_OW 321
9010: PUSH
9011: LD_INT 1
9013: EQUAL
9014: PUSH
9015: LD_VAR 0 8
9019: PUSH
9020: LD_VAR 0 5
9024: ARRAY
9025: PPUSH
9026: LD_VAR 0 3
9030: PPUSH
9031: CALL_OW 482
9035: PUSH
9036: LD_INT 1
9038: EQUAL
9039: AND
9040: IFFALSE 9062
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
9042: LD_VAR 0 2
9046: PPUSH
9047: LD_VAR 0 8
9051: PUSH
9052: LD_VAR 0 5
9056: ARRAY
9057: PPUSH
9058: CALL_OW 184
9062: GO 8987
9064: POP
9065: POP
// for i = 1 to am_tech_list do
9066: LD_ADDR_VAR 0 5
9070: PUSH
9071: DOUBLE
9072: LD_INT 1
9074: DEC
9075: ST_TO_ADDR
9076: LD_VAR 0 9
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9158
// if GetTech ( am_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( am_tech_list [ i ] , nation ) = true then
9084: LD_VAR 0 9
9088: PUSH
9089: LD_VAR 0 5
9093: ARRAY
9094: PPUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: CALL_OW 321
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: PUSH
9109: LD_VAR 0 9
9113: PUSH
9114: LD_VAR 0 5
9118: ARRAY
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: CALL_OW 482
9129: PUSH
9130: LD_INT 1
9132: EQUAL
9133: AND
9134: IFFALSE 9156
// AddComResearch ( lab , am_tech_list [ i ] ) ;
9136: LD_VAR 0 2
9140: PPUSH
9141: LD_VAR 0 9
9145: PUSH
9146: LD_VAR 0 5
9150: ARRAY
9151: PPUSH
9152: CALL_OW 184
9156: GO 9081
9158: POP
9159: POP
// end ;
9160: LD_VAR 0 4
9164: RET
// export function MoveKurinUnitsToBuildings ; var i , lab , fac , bunker , tmp , pom , canTakeUnits , diffUnits ; begin
9165: LD_INT 0
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
9171: PPUSH
9172: PPUSH
9173: PPUSH
9174: PPUSH
9175: PPUSH
// lab = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] ;
9176: LD_ADDR_VAR 0 3
9180: PUSH
9181: LD_INT 22
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 21
9193: PUSH
9194: LD_INT 3
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 30
9203: PUSH
9204: LD_INT 6
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 69
9220: PUSH
9221: LD_INT 1
9223: ARRAY
9224: ST_TO_ADDR
// fac = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 22
9232: PUSH
9233: LD_INT 6
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 21
9242: PUSH
9243: LD_INT 3
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 30
9252: PUSH
9253: LD_INT 3
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: PPUSH
9265: CALL_OW 69
9269: PUSH
9270: LD_INT 1
9272: ARRAY
9273: ST_TO_ADDR
// diffUnits = diffUnits ^ Kurin ;
9274: LD_ADDR_VAR 0 9
9278: PUSH
9279: LD_VAR 0 9
9283: PUSH
9284: LD_EXP 60
9288: ADD
9289: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
9290: LD_ADDR_VAR 0 9
9294: PUSH
9295: LD_VAR 0 9
9299: PUSH
9300: LD_EXP 78
9304: ADD
9305: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
9306: LD_ADDR_VAR 0 9
9310: PUSH
9311: LD_VAR 0 9
9315: PUSH
9316: LD_EXP 70
9320: ADD
9321: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9322: LD_ADDR_VAR 0 8
9326: PUSH
9327: LD_INT 18
9329: PPUSH
9330: LD_INT 22
9332: PUSH
9333: LD_INT 6
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 21
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: LD_INT 3
9352: PUSH
9353: LD_INT 60
9355: PUSH
9356: EMPTY
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: PPUSH
9368: CALL_OW 70
9372: PUSH
9373: LD_VAR 0 9
9377: DIFF
9378: ST_TO_ADDR
// if not canTakeUnits then
9379: LD_VAR 0 8
9383: NOT
9384: IFFALSE 9417
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 4 , neededUnitsSpawn [ 3 ] + 2 ) ;
9386: LD_ADDR_EXP 80
9390: PUSH
9391: LD_EXP 80
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: LD_EXP 80
9403: PUSH
9404: LD_INT 3
9406: ARRAY
9407: PUSH
9408: LD_INT 2
9410: PLUS
9411: PPUSH
9412: CALL_OW 1
9416: ST_TO_ADDR
// if canTakeUnits > 2 then
9417: LD_VAR 0 8
9421: PUSH
9422: LD_INT 2
9424: GREATER
9425: IFFALSE 9495
// begin for i := 1 to rand ( 1 , 2 ) do
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: DOUBLE
9433: LD_INT 1
9435: DEC
9436: ST_TO_ADDR
9437: LD_INT 1
9439: PPUSH
9440: LD_INT 2
9442: PPUSH
9443: CALL_OW 12
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9491
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9451: LD_VAR 0 8
9455: PUSH
9456: LD_VAR 0 2
9460: ARRAY
9461: PPUSH
9462: LD_VAR 0 3
9466: PPUSH
9467: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9471: LD_VAR 0 8
9475: PUSH
9476: LD_VAR 0 2
9480: ARRAY
9481: PPUSH
9482: LD_INT 4
9484: PPUSH
9485: CALL_OW 183
// end ;
9489: GO 9448
9491: POP
9492: POP
// end else
9493: GO 9563
// begin for i := 1 to rand ( 1 , canTakeUnits ) do
9495: LD_ADDR_VAR 0 2
9499: PUSH
9500: DOUBLE
9501: LD_INT 1
9503: DEC
9504: ST_TO_ADDR
9505: LD_INT 1
9507: PPUSH
9508: LD_VAR 0 8
9512: PPUSH
9513: CALL_OW 12
9517: PUSH
9518: FOR_TO
9519: IFFALSE 9561
// begin ComEnterUnit ( canTakeUnits [ i ] , lab ) ;
9521: LD_VAR 0 8
9525: PUSH
9526: LD_VAR 0 2
9530: ARRAY
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_scientistic ) ;
9541: LD_VAR 0 8
9545: PUSH
9546: LD_VAR 0 2
9550: ARRAY
9551: PPUSH
9552: LD_INT 4
9554: PPUSH
9555: CALL_OW 183
// end ;
9559: GO 9518
9561: POP
9562: POP
// end ; wait ( 0 0$01 ) ;
9563: LD_INT 35
9565: PPUSH
9566: CALL_OW 67
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9570: LD_ADDR_VAR 0 8
9574: PUSH
9575: LD_INT 18
9577: PPUSH
9578: LD_INT 22
9580: PUSH
9581: LD_INT 6
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 21
9590: PUSH
9591: LD_INT 1
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: LD_INT 60
9603: PUSH
9604: EMPTY
9605: LIST
9606: PUSH
9607: EMPTY
9608: LIST
9609: LIST
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PPUSH
9616: CALL_OW 70
9620: PUSH
9621: LD_VAR 0 9
9625: DIFF
9626: ST_TO_ADDR
// pom = 6 ;
9627: LD_ADDR_VAR 0 7
9631: PUSH
9632: LD_INT 6
9634: ST_TO_ADDR
// if canTakeUnits then
9635: LD_VAR 0 8
9639: IFFALSE 9756
// for i = 1 to canTakeUnits do
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_VAR 0 8
9655: PUSH
9656: FOR_TO
9657: IFFALSE 9754
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
9659: LD_VAR 0 8
9663: PUSH
9664: LD_VAR 0 2
9668: ARRAY
9669: PPUSH
9670: CALL_OW 257
9674: PUSH
9675: LD_INT 3
9677: NONEQUAL
9678: IFFALSE 9718
// begin ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9680: LD_VAR 0 8
9684: PUSH
9685: LD_VAR 0 2
9689: ARRAY
9690: PPUSH
9691: LD_VAR 0 4
9695: PPUSH
9696: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , class_mechanic ) ;
9700: LD_VAR 0 8
9704: PUSH
9705: LD_VAR 0 2
9709: ARRAY
9710: PPUSH
9711: LD_INT 3
9713: PPUSH
9714: CALL_OW 183
// end ; ComEnterUnit ( canTakeUnits [ i ] , fac ) ;
9718: LD_VAR 0 8
9722: PUSH
9723: LD_VAR 0 2
9727: ARRAY
9728: PPUSH
9729: LD_VAR 0 4
9733: PPUSH
9734: CALL_OW 120
// pom = pom - 1 ;
9738: LD_ADDR_VAR 0 7
9742: PUSH
9743: LD_VAR 0 7
9747: PUSH
9748: LD_INT 1
9750: MINUS
9751: ST_TO_ADDR
// end ;
9752: GO 9656
9754: POP
9755: POP
// if pom > 0 then
9756: LD_VAR 0 7
9760: PUSH
9761: LD_INT 0
9763: GREATER
9764: IFFALSE 9789
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
9766: LD_ADDR_EXP 80
9770: PUSH
9771: LD_EXP 80
9775: PPUSH
9776: LD_INT 3
9778: PPUSH
9779: LD_VAR 0 7
9783: PPUSH
9784: CALL_OW 1
9788: ST_TO_ADDR
// wait ( 0 0$01 ) ;
9789: LD_INT 35
9791: PPUSH
9792: CALL_OW 67
// for bunker in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] , [ f_not , [ f_occupied ] ] ] ) do
9796: LD_ADDR_VAR 0 5
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_INT 6
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 30
9823: PUSH
9824: LD_INT 32
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: LD_INT 59
9836: PUSH
9837: EMPTY
9838: LIST
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: PUSH
9855: FOR_IN
9856: IFFALSE 10102
// begin canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) diff diffUnits ;
9858: LD_ADDR_VAR 0 8
9862: PUSH
9863: LD_INT 18
9865: PPUSH
9866: LD_INT 22
9868: PUSH
9869: LD_INT 6
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 3
9888: PUSH
9889: LD_INT 60
9891: PUSH
9892: EMPTY
9893: LIST
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: PPUSH
9904: CALL_OW 70
9908: PUSH
9909: LD_VAR 0 9
9913: DIFF
9914: ST_TO_ADDR
// if canTakeUnits then
9915: LD_VAR 0 8
9919: IFFALSE 10053
// begin if GetClass ( canTakeUnits [ 1 ] ) <> 1 then
9921: LD_VAR 0 8
9925: PUSH
9926: LD_INT 1
9928: ARRAY
9929: PPUSH
9930: CALL_OW 257
9934: PUSH
9935: LD_INT 1
9937: NONEQUAL
9938: IFFALSE 10033
// begin ComEnterUnit ( canTakeUnits [ 1 ] , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
9940: LD_VAR 0 8
9944: PUSH
9945: LD_INT 1
9947: ARRAY
9948: PPUSH
9949: LD_INT 22
9951: PUSH
9952: LD_INT 6
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 21
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 30
9971: PUSH
9972: LD_INT 5
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: PPUSH
9984: CALL_OW 69
9988: PUSH
9989: LD_INT 1
9991: ARRAY
9992: PPUSH
9993: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ 1 ] , 1 ) ;
9997: LD_VAR 0 8
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 183
// AddComExitBuilding ( canTakeUnits [ 1 ] ) ;
10013: LD_VAR 0 8
10017: PUSH
10018: LD_INT 1
10020: ARRAY
10021: PPUSH
10022: CALL_OW 182
// wait ( 0 0$1 ) ;
10026: LD_INT 35
10028: PPUSH
10029: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ 1 ] , bunker ) ;
10033: LD_VAR 0 8
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_VAR 0 5
10046: PPUSH
10047: CALL_OW 120
// end else
10051: GO 10100
// begin kirovBunkersToOccupy = kirovBunkersToOccupy ^ bunker ;
10053: LD_ADDR_EXP 72
10057: PUSH
10058: LD_EXP 72
10062: PUSH
10063: LD_VAR 0 5
10067: ADD
10068: ST_TO_ADDR
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 1 , neededUnitsSpawn [ 1 ] + 1 ) ;
10069: LD_ADDR_EXP 80
10073: PUSH
10074: LD_EXP 80
10078: PPUSH
10079: LD_INT 1
10081: PPUSH
10082: LD_EXP 80
10086: PUSH
10087: LD_INT 1
10089: ARRAY
10090: PUSH
10091: LD_INT 1
10093: PLUS
10094: PPUSH
10095: CALL_OW 1
10099: ST_TO_ADDR
// end ; end ;
10100: GO 9855
10102: POP
10103: POP
// end ;
10104: LD_VAR 0 1
10108: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
10109: LD_INT 0
10111: PPUSH
10112: PPUSH
10113: PPUSH
10114: PPUSH
10115: PPUSH
10116: PPUSH
10117: PPUSH
10118: PPUSH
10119: PPUSH
10120: PPUSH
10121: PPUSH
10122: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
10123: LD_VAR 0 1
10127: PPUSH
10128: CALL_OW 302
10132: NOT
10133: PUSH
10134: LD_VAR 0 4
10138: PUSH
10139: LD_INT 1
10141: EQUAL
10142: OR
10143: PUSH
10144: LD_VAR 0 2
10148: PPUSH
10149: LD_VAR 0 3
10153: PPUSH
10154: CALL_OW 488
10158: NOT
10159: OR
10160: PUSH
10161: LD_VAR 0 1
10165: PPUSH
10166: LD_VAR 0 2
10170: PPUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: CALL_OW 297
10180: PUSH
10181: LD_VAR 0 4
10185: GREATEREQUAL
10186: OR
10187: PUSH
10188: LD_VAR 0 5
10192: PUSH
10193: LD_INT 1
10195: PUSH
10196: LD_INT 0
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: IN
10203: NOT
10204: OR
10205: IFFALSE 10209
// exit ;
10207: GO 11766
// attempts = 0 ;
10209: LD_ADDR_VAR 0 17
10213: PUSH
10214: LD_INT 0
10216: ST_TO_ADDR
// repeat list_nearest = [ ] ;
10217: LD_ADDR_VAR 0 7
10221: PUSH
10222: EMPTY
10223: ST_TO_ADDR
// list_coords = [ ] ;
10224: LD_ADDR_VAR 0 8
10228: PUSH
10229: EMPTY
10230: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
10231: LD_ADDR_VAR 0 9
10235: PUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: LD_VAR 0 3
10245: PPUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL_OW 250
10255: PPUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 251
10265: PPUSH
10266: CALL 11771 0 4
10270: ST_TO_ADDR
// if attempts = 0 then
10271: LD_VAR 0 17
10275: PUSH
10276: LD_INT 0
10278: EQUAL
10279: IFFALSE 10387
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
10281: LD_ADDR_VAR 0 10
10285: PUSH
10286: LD_VAR 0 9
10290: PUSH
10291: LD_VAR 0 9
10295: PUSH
10296: LD_INT 1
10298: PLUS
10299: PUSH
10300: LD_VAR 0 9
10304: PUSH
10305: LD_INT 1
10307: MINUS
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
10314: LD_VAR 0 10
10318: PUSH
10319: LD_INT 2
10321: ARRAY
10322: PUSH
10323: LD_INT 6
10325: EQUAL
10326: IFFALSE 10349
// dir_list = Replace ( dir_list , 2 , 0 ) ;
10328: LD_ADDR_VAR 0 10
10332: PUSH
10333: LD_VAR 0 10
10337: PPUSH
10338: LD_INT 2
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL_OW 1
10348: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
10349: LD_VAR 0 10
10353: PUSH
10354: LD_INT 3
10356: ARRAY
10357: PUSH
10358: LD_INT 1
10360: NEG
10361: EQUAL
10362: IFFALSE 10385
// dir_list = Replace ( dir_list , 3 , 5 ) ;
10364: LD_ADDR_VAR 0 10
10368: PUSH
10369: LD_VAR 0 10
10373: PPUSH
10374: LD_INT 3
10376: PPUSH
10377: LD_INT 5
10379: PPUSH
10380: CALL_OW 1
10384: ST_TO_ADDR
// end else
10385: GO 10424
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
10387: LD_ADDR_VAR 0 10
10391: PUSH
10392: LD_INT 0
10394: PUSH
10395: LD_INT 1
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 3
10403: PUSH
10404: LD_INT 4
10406: PUSH
10407: LD_INT 5
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: PUSH
10418: LD_VAR 0 9
10422: DIFF
10423: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
10424: LD_ADDR_VAR 0 14
10428: PUSH
10429: DOUBLE
10430: LD_INT 1
10432: DEC
10433: ST_TO_ADDR
10434: LD_VAR 0 10
10438: PUSH
10439: LD_INT 0
10441: PLUS
10442: PUSH
10443: FOR_TO
10444: IFFALSE 10766
// case dir_list [ c ] of 0 :
10446: LD_VAR 0 10
10450: PUSH
10451: LD_VAR 0 14
10455: ARRAY
10456: PUSH
10457: LD_INT 0
10459: DOUBLE
10460: EQUAL
10461: IFTRUE 10465
10463: GO 10506
10465: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
10466: LD_ADDR_VAR 0 8
10470: PUSH
10471: LD_VAR 0 8
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: LD_VAR 0 2
10483: PUSH
10484: LD_VAR 0 3
10488: PUSH
10489: LD_VAR 0 4
10493: MINUS
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 2
10503: ST_TO_ADDR
10504: GO 10764
10506: LD_INT 1
10508: DOUBLE
10509: EQUAL
10510: IFTRUE 10514
10512: GO 10555
10514: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
10515: LD_ADDR_VAR 0 8
10519: PUSH
10520: LD_VAR 0 8
10524: PPUSH
10525: LD_INT 1
10527: PPUSH
10528: LD_VAR 0 2
10532: PUSH
10533: LD_VAR 0 4
10537: PLUS
10538: PUSH
10539: LD_VAR 0 3
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PPUSH
10548: CALL_OW 2
10552: ST_TO_ADDR
10553: GO 10764
10555: LD_INT 2
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10610
10563: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
10564: LD_ADDR_VAR 0 8
10568: PUSH
10569: LD_VAR 0 8
10573: PPUSH
10574: LD_INT 1
10576: PPUSH
10577: LD_VAR 0 2
10581: PUSH
10582: LD_VAR 0 4
10586: PLUS
10587: PUSH
10588: LD_VAR 0 3
10592: PUSH
10593: LD_VAR 0 4
10597: PLUS
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 2
10607: ST_TO_ADDR
10608: GO 10764
10610: LD_INT 3
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10659
10618: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
10619: LD_ADDR_VAR 0 8
10623: PUSH
10624: LD_VAR 0 8
10628: PPUSH
10629: LD_INT 1
10631: PPUSH
10632: LD_VAR 0 2
10636: PUSH
10637: LD_VAR 0 3
10641: PUSH
10642: LD_VAR 0 4
10646: PLUS
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PPUSH
10652: CALL_OW 2
10656: ST_TO_ADDR
10657: GO 10764
10659: LD_INT 4
10661: DOUBLE
10662: EQUAL
10663: IFTRUE 10667
10665: GO 10708
10667: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
10668: LD_ADDR_VAR 0 8
10672: PUSH
10673: LD_VAR 0 8
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: LD_VAR 0 2
10685: PUSH
10686: LD_VAR 0 4
10690: MINUS
10691: PUSH
10692: LD_VAR 0 3
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 2
10705: ST_TO_ADDR
10706: GO 10764
10708: LD_INT 5
10710: DOUBLE
10711: EQUAL
10712: IFTRUE 10716
10714: GO 10763
10716: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
10717: LD_ADDR_VAR 0 8
10721: PUSH
10722: LD_VAR 0 8
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: LD_VAR 0 2
10734: PUSH
10735: LD_VAR 0 4
10739: MINUS
10740: PUSH
10741: LD_VAR 0 3
10745: PUSH
10746: LD_VAR 0 4
10750: MINUS
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 2
10760: ST_TO_ADDR
10761: GO 10764
10763: POP
10764: GO 10443
10766: POP
10767: POP
// if dist < 30 then
10768: LD_VAR 0 4
10772: PUSH
10773: LD_INT 30
10775: LESS
10776: IFFALSE 10788
// c = 1 else
10778: LD_ADDR_VAR 0 14
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
10786: GO 10796
// c = 2 ;
10788: LD_ADDR_VAR 0 14
10792: PUSH
10793: LD_INT 2
10795: ST_TO_ADDR
// b = 1 ;
10796: LD_ADDR_VAR 0 11
10800: PUSH
10801: LD_INT 1
10803: ST_TO_ADDR
// while b <= ( dist - 1 ) do
10804: LD_VAR 0 11
10808: PUSH
10809: LD_VAR 0 4
10813: PUSH
10814: LD_INT 1
10816: MINUS
10817: LESSEQUAL
10818: IFFALSE 11246
// begin if 0 in dir_list and 1 in dir_list then
10820: LD_INT 0
10822: PUSH
10823: LD_VAR 0 10
10827: IN
10828: PUSH
10829: LD_INT 1
10831: PUSH
10832: LD_VAR 0 10
10836: IN
10837: AND
10838: IFFALSE 10890
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
10840: LD_ADDR_VAR 0 8
10844: PUSH
10845: LD_VAR 0 8
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: LD_VAR 0 2
10857: PUSH
10858: LD_VAR 0 11
10862: PLUS
10863: PUSH
10864: LD_VAR 0 3
10868: PUSH
10869: LD_VAR 0 4
10873: MINUS
10874: PUSH
10875: LD_VAR 0 11
10879: PLUS
10880: PUSH
10881: EMPTY
10882: LIST
10883: LIST
10884: PPUSH
10885: CALL_OW 2
10889: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
10890: LD_INT 1
10892: PUSH
10893: LD_VAR 0 10
10897: IN
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: LD_VAR 0 10
10906: IN
10907: AND
10908: IFFALSE 10954
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
10910: LD_ADDR_VAR 0 8
10914: PUSH
10915: LD_VAR 0 8
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: LD_VAR 0 2
10927: PUSH
10928: LD_VAR 0 4
10932: PLUS
10933: PUSH
10934: LD_VAR 0 3
10938: PUSH
10939: LD_VAR 0 11
10943: PLUS
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 2
10953: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
10954: LD_INT 2
10956: PUSH
10957: LD_VAR 0 10
10961: IN
10962: PUSH
10963: LD_INT 3
10965: PUSH
10966: LD_VAR 0 10
10970: IN
10971: AND
10972: IFFALSE 11024
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
10974: LD_ADDR_VAR 0 8
10978: PUSH
10979: LD_VAR 0 8
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: LD_VAR 0 2
10991: PUSH
10992: LD_VAR 0 4
10996: PLUS
10997: PUSH
10998: LD_VAR 0 11
11002: MINUS
11003: PUSH
11004: LD_VAR 0 3
11008: PUSH
11009: LD_VAR 0 4
11013: PLUS
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PPUSH
11019: CALL_OW 2
11023: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
11024: LD_INT 3
11026: PUSH
11027: LD_VAR 0 10
11031: IN
11032: PUSH
11033: LD_INT 4
11035: PUSH
11036: LD_VAR 0 10
11040: IN
11041: AND
11042: IFFALSE 11094
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
11044: LD_ADDR_VAR 0 8
11048: PUSH
11049: LD_VAR 0 8
11053: PPUSH
11054: LD_INT 1
11056: PPUSH
11057: LD_VAR 0 2
11061: PUSH
11062: LD_VAR 0 11
11066: MINUS
11067: PUSH
11068: LD_VAR 0 3
11072: PUSH
11073: LD_VAR 0 4
11077: PLUS
11078: PUSH
11079: LD_VAR 0 11
11083: MINUS
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 2
11093: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
11094: LD_INT 4
11096: PUSH
11097: LD_VAR 0 10
11101: IN
11102: PUSH
11103: LD_INT 5
11105: PUSH
11106: LD_VAR 0 10
11110: IN
11111: AND
11112: IFFALSE 11158
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
11114: LD_ADDR_VAR 0 8
11118: PUSH
11119: LD_VAR 0 8
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: LD_VAR 0 2
11131: PUSH
11132: LD_VAR 0 4
11136: MINUS
11137: PUSH
11138: LD_VAR 0 3
11142: PUSH
11143: LD_VAR 0 11
11147: MINUS
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PPUSH
11153: CALL_OW 2
11157: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
11158: LD_INT 5
11160: PUSH
11161: LD_VAR 0 10
11165: IN
11166: PUSH
11167: LD_INT 0
11169: PUSH
11170: LD_VAR 0 10
11174: IN
11175: AND
11176: IFFALSE 11228
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
11178: LD_ADDR_VAR 0 8
11182: PUSH
11183: LD_VAR 0 8
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: LD_VAR 0 2
11195: PUSH
11196: LD_VAR 0 4
11200: MINUS
11201: PUSH
11202: LD_VAR 0 11
11206: PLUS
11207: PUSH
11208: LD_VAR 0 3
11212: PUSH
11213: LD_VAR 0 4
11217: MINUS
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 2
11227: ST_TO_ADDR
// b = b + c end ;
11228: LD_ADDR_VAR 0 11
11232: PUSH
11233: LD_VAR 0 11
11237: PUSH
11238: LD_VAR 0 14
11242: PLUS
11243: ST_TO_ADDR
11244: GO 10804
// if list_coords = 0 then
11246: LD_VAR 0 8
11250: PUSH
11251: LD_INT 0
11253: EQUAL
11254: IFFALSE 11258
// exit ;
11256: GO 11766
// repeat min_dist = 5000 ;
11258: LD_ADDR_VAR 0 12
11262: PUSH
11263: LD_INT 5000
11265: ST_TO_ADDR
// for b in list_coords do
11266: LD_ADDR_VAR 0 11
11270: PUSH
11271: LD_VAR 0 8
11275: PUSH
11276: FOR_IN
11277: IFFALSE 11336
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
11279: LD_ADDR_VAR 0 13
11283: PUSH
11284: LD_VAR 0 1
11288: PPUSH
11289: LD_VAR 0 11
11293: PUSH
11294: LD_INT 1
11296: ARRAY
11297: PPUSH
11298: LD_VAR 0 11
11302: PUSH
11303: LD_INT 2
11305: ARRAY
11306: PPUSH
11307: CALL_OW 297
11311: ST_TO_ADDR
// if temp_dist < min_dist then
11312: LD_VAR 0 13
11316: PUSH
11317: LD_VAR 0 12
11321: LESS
11322: IFFALSE 11334
// min_dist = temp_dist ;
11324: LD_ADDR_VAR 0 12
11328: PUSH
11329: LD_VAR 0 13
11333: ST_TO_ADDR
// end ;
11334: GO 11276
11336: POP
11337: POP
// c = 0 ;
11338: LD_ADDR_VAR 0 14
11342: PUSH
11343: LD_INT 0
11345: ST_TO_ADDR
// repeat c = c + 1 ;
11346: LD_ADDR_VAR 0 14
11350: PUSH
11351: LD_VAR 0 14
11355: PUSH
11356: LD_INT 1
11358: PLUS
11359: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
11360: LD_VAR 0 1
11364: PPUSH
11365: LD_VAR 0 8
11369: PUSH
11370: LD_VAR 0 14
11374: ARRAY
11375: PUSH
11376: LD_INT 1
11378: ARRAY
11379: PPUSH
11380: LD_VAR 0 8
11384: PUSH
11385: LD_VAR 0 14
11389: ARRAY
11390: PUSH
11391: LD_INT 2
11393: ARRAY
11394: PPUSH
11395: CALL_OW 297
11399: PUSH
11400: LD_VAR 0 12
11404: EQUAL
11405: IFFALSE 11470
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
11407: LD_ADDR_VAR 0 7
11411: PUSH
11412: LD_VAR 0 7
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: LD_VAR 0 8
11424: PUSH
11425: LD_VAR 0 14
11429: ARRAY
11430: PPUSH
11431: CALL_OW 2
11435: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
11436: LD_ADDR_VAR 0 8
11440: PUSH
11441: LD_VAR 0 8
11445: PPUSH
11446: LD_VAR 0 14
11450: PPUSH
11451: CALL_OW 3
11455: ST_TO_ADDR
// c = c - 1 ;
11456: LD_ADDR_VAR 0 14
11460: PUSH
11461: LD_VAR 0 14
11465: PUSH
11466: LD_INT 1
11468: MINUS
11469: ST_TO_ADDR
// end ; until c = list_coords ;
11470: LD_VAR 0 14
11474: PUSH
11475: LD_VAR 0 8
11479: EQUAL
11480: IFFALSE 11346
// c = 0 ;
11482: LD_ADDR_VAR 0 14
11486: PUSH
11487: LD_INT 0
11489: ST_TO_ADDR
// if list_nearest > 0 then
11490: LD_VAR 0 7
11494: PUSH
11495: LD_INT 0
11497: GREATER
11498: IFFALSE 11640
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
11500: LD_ADDR_VAR 0 15
11504: PUSH
11505: LD_INT 1
11507: PPUSH
11508: LD_VAR 0 7
11512: PPUSH
11513: CALL_OW 12
11517: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
11518: LD_ADDR_VAR 0 16
11522: PUSH
11523: LD_VAR 0 7
11527: PUSH
11528: LD_VAR 0 15
11532: ARRAY
11533: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
11534: LD_VAR 0 16
11538: PUSH
11539: LD_INT 1
11541: ARRAY
11542: PPUSH
11543: LD_VAR 0 16
11547: PUSH
11548: LD_INT 2
11550: ARRAY
11551: PPUSH
11552: CALL_OW 488
11556: PUSH
11557: LD_INT 0
11559: GREATER
11560: PUSH
11561: LD_VAR 0 16
11565: PUSH
11566: LD_INT 1
11568: ARRAY
11569: PPUSH
11570: LD_VAR 0 16
11574: PUSH
11575: LD_INT 2
11577: ARRAY
11578: PPUSH
11579: CALL_OW 428
11583: PUSH
11584: LD_INT 0
11586: EQUAL
11587: AND
11588: IFFALSE 11600
// c = 1 else
11590: LD_ADDR_VAR 0 14
11594: PUSH
11595: LD_INT 1
11597: ST_TO_ADDR
11598: GO 11620
// list_nearest = Delete ( list_nearest , rand_num ) ;
11600: LD_ADDR_VAR 0 7
11604: PUSH
11605: LD_VAR 0 7
11609: PPUSH
11610: LD_VAR 0 15
11614: PPUSH
11615: CALL_OW 3
11619: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
11620: LD_VAR 0 14
11624: PUSH
11625: LD_INT 1
11627: EQUAL
11628: PUSH
11629: LD_VAR 0 7
11633: PUSH
11634: LD_INT 0
11636: EQUAL
11637: OR
11638: IFFALSE 11500
// end ; until c = 1 or list_coords = 0 ;
11640: LD_VAR 0 14
11644: PUSH
11645: LD_INT 1
11647: EQUAL
11648: PUSH
11649: LD_VAR 0 8
11653: PUSH
11654: LD_INT 0
11656: EQUAL
11657: OR
11658: IFFALSE 11258
// attempts = attempts + 1 ;
11660: LD_ADDR_VAR 0 17
11664: PUSH
11665: LD_VAR 0 17
11669: PUSH
11670: LD_INT 1
11672: PLUS
11673: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
11674: LD_VAR 0 14
11678: PUSH
11679: LD_INT 1
11681: EQUAL
11682: PUSH
11683: LD_VAR 0 17
11687: PUSH
11688: LD_INT 1
11690: GREATER
11691: OR
11692: IFFALSE 10217
// if c = 1 then
11694: LD_VAR 0 14
11698: PUSH
11699: LD_INT 1
11701: EQUAL
11702: IFFALSE 11766
// if add then
11704: LD_VAR 0 5
11708: IFFALSE 11739
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
11710: LD_VAR 0 1
11714: PPUSH
11715: LD_VAR 0 16
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PPUSH
11724: LD_VAR 0 16
11728: PUSH
11729: LD_INT 2
11731: ARRAY
11732: PPUSH
11733: CALL_OW 171
11737: GO 11766
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
11739: LD_VAR 0 1
11743: PPUSH
11744: LD_VAR 0 16
11748: PUSH
11749: LD_INT 1
11751: ARRAY
11752: PPUSH
11753: LD_VAR 0 16
11757: PUSH
11758: LD_INT 2
11760: ARRAY
11761: PPUSH
11762: CALL_OW 111
// end ;
11766: LD_VAR 0 6
11770: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
11771: LD_INT 0
11773: PPUSH
11774: PPUSH
11775: PPUSH
11776: PPUSH
11777: PPUSH
11778: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_VAR 0 2
11788: PPUSH
11789: CALL_OW 488
11793: NOT
11794: PUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: LD_VAR 0 4
11804: PPUSH
11805: CALL_OW 488
11809: NOT
11810: OR
11811: IFFALSE 11824
// begin result = - 1 ;
11813: LD_ADDR_VAR 0 5
11817: PUSH
11818: LD_INT 1
11820: NEG
11821: ST_TO_ADDR
// exit ;
11822: GO 11984
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
11824: LD_ADDR_VAR 0 6
11828: PUSH
11829: LD_VAR 0 1
11833: PPUSH
11834: LD_VAR 0 2
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_VAR 0 4
11848: PPUSH
11849: CALL_OW 298
11853: ST_TO_ADDR
// dist_2 = 99999 ;
11854: LD_ADDR_VAR 0 7
11858: PUSH
11859: LD_INT 99999
11861: ST_TO_ADDR
// for b = 0 to 5 do
11862: LD_ADDR_VAR 0 8
11866: PUSH
11867: DOUBLE
11868: LD_INT 0
11870: DEC
11871: ST_TO_ADDR
11872: LD_INT 5
11874: PUSH
11875: FOR_TO
11876: IFFALSE 11972
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
11878: LD_ADDR_VAR 0 9
11882: PUSH
11883: LD_VAR 0 1
11887: PPUSH
11888: LD_VAR 0 8
11892: PPUSH
11893: LD_VAR 0 6
11897: PPUSH
11898: CALL_OW 272
11902: PPUSH
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_VAR 0 8
11912: PPUSH
11913: LD_VAR 0 6
11917: PPUSH
11918: CALL_OW 273
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_VAR 0 4
11932: PPUSH
11933: CALL_OW 298
11937: ST_TO_ADDR
// if temp_dist < dist_2 then
11938: LD_VAR 0 9
11942: PUSH
11943: LD_VAR 0 7
11947: LESS
11948: IFFALSE 11970
// begin dist_2 = temp_dist ;
11950: LD_ADDR_VAR 0 7
11954: PUSH
11955: LD_VAR 0 9
11959: ST_TO_ADDR
// dir = b ;
11960: LD_ADDR_VAR 0 10
11964: PUSH
11965: LD_VAR 0 8
11969: ST_TO_ADDR
// end ; end ;
11970: GO 11875
11972: POP
11973: POP
// result = dir ;
11974: LD_ADDR_VAR 0 5
11978: PUSH
11979: LD_VAR 0 10
11983: ST_TO_ADDR
// end ; end_of_file
11984: LD_VAR 0 5
11988: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
11989: LD_INT 0
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
12000: PPUSH
12001: PPUSH
12002: PPUSH
12003: PPUSH
12004: PPUSH
12005: PPUSH
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
12010: PPUSH
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
12015: PPUSH
12016: PPUSH
12017: PPUSH
12018: PPUSH
// personel = [ ] ;
12019: LD_ADDR_VAR 0 18
12023: PUSH
12024: EMPTY
12025: ST_TO_ADDR
// vehicles = [ ] ;
12026: LD_ADDR_VAR 0 24
12030: PUSH
12031: EMPTY
12032: ST_TO_ADDR
// for unit in basePersonel do
12033: LD_ADDR_VAR 0 17
12037: PUSH
12038: LD_VAR 0 3
12042: PUSH
12043: FOR_IN
12044: IFFALSE 12092
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
12046: LD_ADDR_VAR 0 18
12050: PUSH
12051: LD_VAR 0 18
12055: PUSH
12056: LD_VAR 0 17
12060: PUSH
12061: LD_VAR 0 17
12065: PPUSH
12066: CALL_OW 310
12070: PUSH
12071: LD_VAR 0 17
12075: PPUSH
12076: CALL_OW 302
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: EMPTY
12087: LIST
12088: ADD
12089: ST_TO_ADDR
12090: GO 12043
12092: POP
12093: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) do
12094: LD_ADDR_VAR 0 23
12098: PUSH
12099: LD_VAR 0 4
12103: PPUSH
12104: LD_INT 22
12106: PUSH
12107: LD_VAR 0 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 21
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 50
12128: PUSH
12129: EMPTY
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: LD_INT 34
12140: PUSH
12141: LD_INT 12
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 34
12150: PUSH
12151: LD_INT 51
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 34
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PPUSH
12184: CALL_OW 70
12188: PUSH
12189: FOR_IN
12190: IFFALSE 12238
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
12192: LD_ADDR_VAR 0 24
12196: PUSH
12197: LD_VAR 0 24
12201: PUSH
12202: LD_VAR 0 23
12206: PUSH
12207: LD_VAR 0 23
12211: PPUSH
12212: CALL_OW 310
12216: PUSH
12217: LD_VAR 0 23
12221: PPUSH
12222: CALL_OW 302
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: PUSH
12232: EMPTY
12233: LIST
12234: ADD
12235: ST_TO_ADDR
12236: GO 12189
12238: POP
12239: POP
// repeat soldiers = [ ] ;
12240: LD_ADDR_VAR 0 19
12244: PUSH
12245: EMPTY
12246: ST_TO_ADDR
// engineers = [ ] ;
12247: LD_ADDR_VAR 0 20
12251: PUSH
12252: EMPTY
12253: ST_TO_ADDR
// mechanics = [ ] ;
12254: LD_ADDR_VAR 0 21
12258: PUSH
12259: EMPTY
12260: ST_TO_ADDR
// scientists = [ ] ;
12261: LD_ADDR_VAR 0 22
12265: PUSH
12266: EMPTY
12267: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12268: LD_ADDR_VAR 0 29
12272: PUSH
12273: LD_VAR 0 4
12277: PPUSH
12278: LD_INT 22
12280: PUSH
12281: LD_VAR 0 1
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 21
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 50
12302: PUSH
12303: EMPTY
12304: LIST
12305: PUSH
12306: LD_INT 2
12308: PUSH
12309: LD_INT 30
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 30
12321: PUSH
12322: LD_INT 1
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: PPUSH
12340: CALL_OW 70
12344: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
12345: LD_ADDR_VAR 0 30
12349: PUSH
12350: LD_VAR 0 4
12354: PPUSH
12355: LD_INT 22
12357: PUSH
12358: LD_VAR 0 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 3
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 50
12379: PUSH
12380: EMPTY
12381: LIST
12382: PUSH
12383: LD_INT 2
12385: PUSH
12386: LD_INT 30
12388: PUSH
12389: LD_INT 2
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 30
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 70
12421: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12422: LD_ADDR_VAR 0 31
12426: PUSH
12427: LD_VAR 0 4
12431: PPUSH
12432: LD_INT 22
12434: PUSH
12435: LD_VAR 0 1
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 21
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 50
12456: PUSH
12457: EMPTY
12458: LIST
12459: PUSH
12460: LD_INT 2
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 6
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 30
12475: PUSH
12476: LD_INT 7
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 30
12485: PUSH
12486: LD_INT 8
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 70
12509: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
12510: LD_ADDR_VAR 0 32
12514: PUSH
12515: LD_VAR 0 4
12519: PPUSH
12520: LD_INT 22
12522: PUSH
12523: LD_VAR 0 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 21
12534: PUSH
12535: LD_INT 3
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 50
12544: PUSH
12545: EMPTY
12546: LIST
12547: PUSH
12548: LD_INT 2
12550: PUSH
12551: LD_INT 30
12553: PUSH
12554: LD_INT 31
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 30
12563: PUSH
12564: LD_INT 32
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PPUSH
12582: CALL_OW 70
12586: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
12587: LD_ADDR_VAR 0 33
12591: PUSH
12592: LD_VAR 0 4
12596: PPUSH
12597: LD_INT 22
12599: PUSH
12600: LD_VAR 0 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 21
12611: PUSH
12612: LD_INT 3
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 50
12621: PUSH
12622: EMPTY
12623: LIST
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: LD_INT 30
12630: PUSH
12631: LD_INT 4
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 30
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PPUSH
12659: CALL_OW 70
12663: ST_TO_ADDR
// for i := 1 to personel do
12664: LD_ADDR_VAR 0 13
12668: PUSH
12669: DOUBLE
12670: LD_INT 1
12672: DEC
12673: ST_TO_ADDR
12674: LD_VAR 0 18
12678: PUSH
12679: FOR_TO
12680: IFFALSE 12890
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
12682: LD_VAR 0 18
12686: PUSH
12687: LD_VAR 0 13
12691: ARRAY
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PPUSH
12697: CALL_OW 256
12701: PUSH
12702: LD_INT 1000
12704: EQUAL
12705: IFFALSE 12747
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
12707: LD_ADDR_VAR 0 18
12711: PUSH
12712: LD_VAR 0 18
12716: PPUSH
12717: LD_VAR 0 13
12721: PUSH
12722: LD_VAR 0 18
12726: PUSH
12727: LD_VAR 0 13
12731: ARRAY
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL 35668 0 3
12744: ST_TO_ADDR
// end else
12745: GO 12838
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
12747: LD_VAR 0 18
12751: PUSH
12752: LD_VAR 0 13
12756: ARRAY
12757: PUSH
12758: LD_INT 1
12760: ARRAY
12761: PPUSH
12762: CALL_OW 256
12766: PUSH
12767: LD_INT 950
12769: LESSEQUAL
12770: IFFALSE 12838
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , 0 ) ;
12772: LD_ADDR_VAR 0 18
12776: PUSH
12777: LD_VAR 0 18
12781: PPUSH
12782: LD_VAR 0 13
12786: PUSH
12787: LD_VAR 0 18
12791: PUSH
12792: LD_VAR 0 13
12796: ARRAY
12797: PUSH
12798: LD_INT 1
12800: MINUS
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PPUSH
12806: LD_INT 0
12808: PPUSH
12809: CALL 35668 0 3
12813: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
12814: LD_VAR 0 18
12818: PUSH
12819: LD_VAR 0 13
12823: ARRAY
12824: PUSH
12825: LD_INT 1
12827: ARRAY
12828: PPUSH
12829: LD_VAR 0 5
12833: PPUSH
12834: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
12838: LD_VAR 0 18
12842: PUSH
12843: LD_VAR 0 13
12847: ARRAY
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PPUSH
12853: CALL_OW 256
12857: PUSH
12858: LD_INT 250
12860: LESS
12861: IFFALSE 12888
// personel = personel diff [ personel [ i ] ] ;
12863: LD_ADDR_VAR 0 18
12867: PUSH
12868: LD_VAR 0 18
12872: PUSH
12873: LD_VAR 0 18
12877: PUSH
12878: LD_VAR 0 13
12882: ARRAY
12883: PUSH
12884: EMPTY
12885: LIST
12886: DIFF
12887: ST_TO_ADDR
// end ;
12888: GO 12679
12890: POP
12891: POP
// for i := 1 to vehicles do
12892: LD_ADDR_VAR 0 13
12896: PUSH
12897: DOUBLE
12898: LD_INT 1
12900: DEC
12901: ST_TO_ADDR
12902: LD_VAR 0 24
12906: PUSH
12907: FOR_TO
12908: IFFALSE 13247
// begin if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
12910: LD_VAR 0 24
12914: PUSH
12915: LD_VAR 0 13
12919: ARRAY
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL_OW 256
12929: PUSH
12930: LD_INT 1000
12932: EQUAL
12933: IFFALSE 13108
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
12935: LD_VAR 0 24
12939: PUSH
12940: LD_VAR 0 13
12944: ARRAY
12945: PUSH
12946: LD_INT 1
12948: ARRAY
12949: PPUSH
12950: CALL_OW 263
12954: PUSH
12955: LD_INT 1
12957: EQUAL
12958: IFFALSE 13016
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12960: LD_VAR 0 24
12964: PUSH
12965: LD_VAR 0 13
12969: ARRAY
12970: PUSH
12971: LD_INT 2
12973: ARRAY
12974: PPUSH
12975: CALL_OW 310
12979: NOT
12980: IFFALSE 13016
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12982: LD_VAR 0 24
12986: PUSH
12987: LD_VAR 0 13
12991: ARRAY
12992: PUSH
12993: LD_INT 2
12995: ARRAY
12996: PPUSH
12997: LD_VAR 0 24
13001: PUSH
13002: LD_VAR 0 13
13006: ARRAY
13007: PUSH
13008: LD_INT 1
13010: ARRAY
13011: PPUSH
13012: CALL_OW 120
// if vehicles < vehiclesToAttackAmount then
13016: LD_VAR 0 24
13020: PUSH
13021: LD_VAR 0 10
13025: LESS
13026: IFFALSE 13068
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) else
13028: LD_ADDR_VAR 0 24
13032: PUSH
13033: LD_VAR 0 24
13037: PPUSH
13038: LD_VAR 0 13
13042: PUSH
13043: LD_VAR 0 24
13047: PUSH
13048: LD_VAR 0 13
13052: ARRAY
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PPUSH
13058: LD_INT 1
13060: PPUSH
13061: CALL 35668 0 3
13065: ST_TO_ADDR
13066: GO 13106
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
13068: LD_ADDR_VAR 0 24
13072: PUSH
13073: LD_VAR 0 24
13077: PPUSH
13078: LD_VAR 0 13
13082: PUSH
13083: LD_VAR 0 24
13087: PUSH
13088: LD_VAR 0 13
13092: ARRAY
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PPUSH
13098: LD_INT 2
13100: PPUSH
13101: CALL 35668 0 3
13105: ST_TO_ADDR
// end else
13106: GO 13195
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
13108: LD_VAR 0 24
13112: PUSH
13113: LD_VAR 0 13
13117: ARRAY
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: PPUSH
13123: CALL_OW 256
13127: PUSH
13128: LD_INT 650
13130: LESSEQUAL
13131: IFFALSE 13195
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
13133: LD_ADDR_VAR 0 24
13137: PUSH
13138: LD_VAR 0 24
13142: PPUSH
13143: LD_VAR 0 13
13147: PUSH
13148: LD_VAR 0 24
13152: PUSH
13153: LD_VAR 0 13
13157: ARRAY
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PPUSH
13163: LD_INT 0
13165: PPUSH
13166: CALL 35668 0 3
13170: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
13171: LD_VAR 0 24
13175: PUSH
13176: LD_VAR 0 13
13180: ARRAY
13181: PUSH
13182: LD_INT 1
13184: ARRAY
13185: PPUSH
13186: LD_VAR 0 6
13190: PPUSH
13191: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
13195: LD_VAR 0 24
13199: PUSH
13200: LD_VAR 0 13
13204: ARRAY
13205: PUSH
13206: LD_INT 1
13208: ARRAY
13209: PPUSH
13210: CALL_OW 256
13214: PUSH
13215: LD_INT 250
13217: LESS
13218: IFFALSE 13245
// vehicles = vehicles diff [ vehicles [ i ] ] ;
13220: LD_ADDR_VAR 0 24
13224: PUSH
13225: LD_VAR 0 24
13229: PUSH
13230: LD_VAR 0 24
13234: PUSH
13235: LD_VAR 0 13
13239: ARRAY
13240: PUSH
13241: EMPTY
13242: LIST
13243: DIFF
13244: ST_TO_ADDR
// end ;
13245: GO 12907
13247: POP
13248: POP
// for i := 1 to personel do
13249: LD_ADDR_VAR 0 13
13253: PUSH
13254: DOUBLE
13255: LD_INT 1
13257: DEC
13258: ST_TO_ADDR
13259: LD_VAR 0 18
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13306
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
13267: LD_ADDR_VAR 0 19
13271: PUSH
13272: LD_VAR 0 19
13276: PUSH
13277: LD_VAR 0 18
13281: PUSH
13282: LD_VAR 0 13
13286: ARRAY
13287: PPUSH
13288: LD_INT 25
13290: PUSH
13291: LD_INT 1
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 72
13302: ADD
13303: ST_TO_ADDR
13304: GO 13264
13306: POP
13307: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
13308: LD_VAR 0 19
13312: PUSH
13313: LD_VAR 0 32
13317: PPUSH
13318: LD_INT 3
13320: PUSH
13321: LD_INT 59
13323: PUSH
13324: EMPTY
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PPUSH
13331: CALL_OW 72
13335: AND
13336: IFFALSE 13624
// begin for i := 1 to personel do
13338: LD_ADDR_VAR 0 13
13342: PUSH
13343: DOUBLE
13344: LD_INT 1
13346: DEC
13347: ST_TO_ADDR
13348: LD_VAR 0 18
13352: PUSH
13353: FOR_TO
13354: IFFALSE 13620
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
13356: LD_VAR 0 18
13360: PUSH
13361: LD_VAR 0 13
13365: ARRAY
13366: PUSH
13367: LD_INT 1
13369: ARRAY
13370: PPUSH
13371: CALL_OW 257
13375: PUSH
13376: LD_INT 1
13378: EQUAL
13379: PUSH
13380: LD_VAR 0 18
13384: PUSH
13385: LD_VAR 0 13
13389: ARRAY
13390: PUSH
13391: LD_INT 3
13393: ARRAY
13394: PUSH
13395: LD_INT 1
13397: EQUAL
13398: AND
13399: IFFALSE 13618
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13401: LD_VAR 0 18
13405: PUSH
13406: LD_VAR 0 13
13410: ARRAY
13411: PUSH
13412: LD_INT 1
13414: ARRAY
13415: PPUSH
13416: CALL_OW 437
13420: IFFALSE 13521
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
13422: LD_VAR 0 18
13426: PUSH
13427: LD_VAR 0 13
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: CALL_OW 437
13441: PUSH
13442: LD_INT 1
13444: ARRAY
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PUSH
13450: LD_STRING e
13452: EQUAL
13453: PUSH
13454: LD_VAR 0 18
13458: PUSH
13459: LD_VAR 0 13
13463: ARRAY
13464: PUSH
13465: LD_INT 1
13467: ARRAY
13468: PPUSH
13469: CALL_OW 437
13473: PUSH
13474: LD_INT 1
13476: ARRAY
13477: PUSH
13478: LD_INT 4
13480: ARRAY
13481: PPUSH
13482: CALL_OW 266
13486: PUSH
13487: LD_INT 4
13489: PUSH
13490: LD_INT 5
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: IN
13497: AND
13498: IFFALSE 13521
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13500: LD_VAR 0 18
13504: PUSH
13505: LD_VAR 0 13
13509: ARRAY
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: EMPTY
13516: PPUSH
13517: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
13521: LD_ADDR_VAR 0 36
13525: PUSH
13526: LD_VAR 0 32
13530: PPUSH
13531: LD_INT 3
13533: PUSH
13534: LD_INT 59
13536: PUSH
13537: EMPTY
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PPUSH
13544: CALL_OW 72
13548: PUSH
13549: FOR_IN
13550: IFFALSE 13616
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
13552: LD_VAR 0 18
13556: PUSH
13557: LD_VAR 0 13
13561: ARRAY
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: CALL_OW 310
13571: PPUSH
13572: CALL_OW 266
13576: PUSH
13577: LD_INT 31
13579: PUSH
13580: LD_INT 32
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: IN
13587: NOT
13588: IFFALSE 13614
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
13590: LD_VAR 0 18
13594: PUSH
13595: LD_VAR 0 13
13599: ARRAY
13600: PUSH
13601: LD_INT 1
13603: ARRAY
13604: PPUSH
13605: LD_VAR 0 36
13609: PPUSH
13610: CALL_OW 120
13614: GO 13549
13616: POP
13617: POP
// end ; end ;
13618: GO 13353
13620: POP
13621: POP
// end else
13622: GO 13839
// if soldiers and barracks then
13624: LD_VAR 0 19
13628: PUSH
13629: LD_VAR 0 33
13633: AND
13634: IFFALSE 13839
// for i := 1 to personel do
13636: LD_ADDR_VAR 0 13
13640: PUSH
13641: DOUBLE
13642: LD_INT 1
13644: DEC
13645: ST_TO_ADDR
13646: LD_VAR 0 18
13650: PUSH
13651: FOR_TO
13652: IFFALSE 13837
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
13654: LD_VAR 0 18
13658: PUSH
13659: LD_VAR 0 13
13663: ARRAY
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PPUSH
13669: CALL_OW 257
13673: PUSH
13674: LD_INT 1
13676: EQUAL
13677: PUSH
13678: LD_VAR 0 18
13682: PUSH
13683: LD_VAR 0 13
13687: ARRAY
13688: PUSH
13689: LD_INT 3
13691: ARRAY
13692: PUSH
13693: LD_INT 1
13695: EQUAL
13696: AND
13697: PUSH
13698: LD_VAR 0 18
13702: PUSH
13703: LD_VAR 0 13
13707: ARRAY
13708: PUSH
13709: LD_INT 1
13711: ARRAY
13712: PPUSH
13713: LD_INT 56
13715: PUSH
13716: EMPTY
13717: LIST
13718: PPUSH
13719: CALL_OW 72
13723: AND
13724: IFFALSE 13835
// begin if not personel [ i ] [ 2 ] then
13726: LD_VAR 0 18
13730: PUSH
13731: LD_VAR 0 13
13735: ARRAY
13736: PUSH
13737: LD_INT 2
13739: ARRAY
13740: NOT
13741: IFFALSE 13801
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
13743: LD_ADDR_VAR 0 18
13747: PUSH
13748: LD_VAR 0 18
13752: PPUSH
13753: LD_VAR 0 13
13757: PUSH
13758: LD_VAR 0 18
13762: PUSH
13763: LD_VAR 0 13
13767: ARRAY
13768: PUSH
13769: LD_INT 1
13771: MINUS
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: LD_VAR 0 33
13781: PUSH
13782: LD_INT 1
13784: PPUSH
13785: LD_VAR 0 33
13789: PPUSH
13790: CALL_OW 12
13794: ARRAY
13795: PPUSH
13796: CALL 35668 0 3
13800: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13801: LD_VAR 0 18
13805: PUSH
13806: LD_VAR 0 13
13810: ARRAY
13811: PUSH
13812: LD_INT 1
13814: ARRAY
13815: PPUSH
13816: LD_VAR 0 18
13820: PUSH
13821: LD_VAR 0 13
13825: ARRAY
13826: PUSH
13827: LD_INT 2
13829: ARRAY
13830: PPUSH
13831: CALL_OW 120
// end ;
13835: GO 13651
13837: POP
13838: POP
// for i := 1 to personel do
13839: LD_ADDR_VAR 0 13
13843: PUSH
13844: DOUBLE
13845: LD_INT 1
13847: DEC
13848: ST_TO_ADDR
13849: LD_VAR 0 18
13853: PUSH
13854: FOR_TO
13855: IFFALSE 13896
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
13857: LD_ADDR_VAR 0 20
13861: PUSH
13862: LD_VAR 0 20
13866: PUSH
13867: LD_VAR 0 18
13871: PUSH
13872: LD_VAR 0 13
13876: ARRAY
13877: PPUSH
13878: LD_INT 25
13880: PUSH
13881: LD_INT 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PPUSH
13888: CALL_OW 72
13892: ADD
13893: ST_TO_ADDR
13894: GO 13854
13896: POP
13897: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13898: LD_VAR 0 20
13902: PUSH
13903: LD_VAR 0 4
13907: PPUSH
13908: LD_INT 22
13910: PUSH
13911: LD_VAR 0 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 21
13922: PUSH
13923: LD_INT 3
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 3
13932: PUSH
13933: LD_INT 24
13935: PUSH
13936: LD_INT 1000
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: PPUSH
13952: CALL_OW 70
13956: AND
13957: IFFALSE 14233
// begin for i := 1 to personel do
13959: LD_ADDR_VAR 0 13
13963: PUSH
13964: DOUBLE
13965: LD_INT 1
13967: DEC
13968: ST_TO_ADDR
13969: LD_VAR 0 18
13973: PUSH
13974: FOR_TO
13975: IFFALSE 14229
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13977: LD_VAR 0 18
13981: PUSH
13982: LD_VAR 0 13
13986: ARRAY
13987: PUSH
13988: LD_INT 1
13990: ARRAY
13991: PPUSH
13992: CALL_OW 257
13996: PUSH
13997: LD_INT 2
13999: EQUAL
14000: PUSH
14001: LD_VAR 0 18
14005: PUSH
14006: LD_VAR 0 13
14010: ARRAY
14011: PUSH
14012: LD_INT 3
14014: ARRAY
14015: PUSH
14016: LD_INT 1
14018: EQUAL
14019: AND
14020: IFFALSE 14227
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14022: LD_VAR 0 18
14026: PUSH
14027: LD_VAR 0 13
14031: ARRAY
14032: PUSH
14033: LD_INT 1
14035: ARRAY
14036: PPUSH
14037: CALL_OW 437
14041: IFFALSE 14097
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14043: LD_VAR 0 18
14047: PUSH
14048: LD_VAR 0 13
14052: ARRAY
14053: PUSH
14054: LD_INT 1
14056: ARRAY
14057: PPUSH
14058: CALL_OW 437
14062: PUSH
14063: LD_INT 1
14065: ARRAY
14066: PUSH
14067: LD_INT 1
14069: ARRAY
14070: PUSH
14071: LD_STRING e
14073: EQUAL
14074: IFFALSE 14097
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14076: LD_VAR 0 18
14080: PUSH
14081: LD_VAR 0 13
14085: ARRAY
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: EMPTY
14092: PPUSH
14093: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14097: LD_VAR 0 18
14101: PUSH
14102: LD_VAR 0 13
14106: ARRAY
14107: PUSH
14108: LD_INT 1
14110: ARRAY
14111: PPUSH
14112: CALL_OW 310
14116: IFFALSE 14137
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14118: LD_VAR 0 18
14122: PUSH
14123: LD_VAR 0 13
14127: ARRAY
14128: PUSH
14129: LD_INT 1
14131: ARRAY
14132: PPUSH
14133: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14137: LD_ADDR_VAR 0 34
14141: PUSH
14142: LD_VAR 0 4
14146: PPUSH
14147: LD_INT 22
14149: PUSH
14150: LD_VAR 0 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 21
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 3
14171: PUSH
14172: LD_INT 24
14174: PUSH
14175: LD_INT 1000
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: PPUSH
14191: CALL_OW 70
14195: PUSH
14196: FOR_IN
14197: IFFALSE 14225
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
14199: LD_VAR 0 18
14203: PUSH
14204: LD_VAR 0 13
14208: ARRAY
14209: PUSH
14210: LD_INT 1
14212: ARRAY
14213: PPUSH
14214: LD_VAR 0 34
14218: PPUSH
14219: CALL_OW 190
14223: GO 14196
14225: POP
14226: POP
// end ;
14227: GO 13974
14229: POP
14230: POP
// end else
14231: GO 14495
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
14233: LD_VAR 0 20
14237: PUSH
14238: LD_VAR 0 20
14242: PPUSH
14243: LD_INT 56
14245: PUSH
14246: EMPTY
14247: LIST
14248: PPUSH
14249: CALL_OW 72
14253: AND
14254: PUSH
14255: LD_VAR 0 29
14259: AND
14260: IFFALSE 14495
// for i := 1 to personel do
14262: LD_ADDR_VAR 0 13
14266: PUSH
14267: DOUBLE
14268: LD_INT 1
14270: DEC
14271: ST_TO_ADDR
14272: LD_VAR 0 18
14276: PUSH
14277: FOR_TO
14278: IFFALSE 14493
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
14280: LD_VAR 0 18
14284: PUSH
14285: LD_VAR 0 13
14289: ARRAY
14290: PUSH
14291: LD_INT 1
14293: ARRAY
14294: PPUSH
14295: CALL_OW 257
14299: PUSH
14300: LD_INT 2
14302: EQUAL
14303: PUSH
14304: LD_VAR 0 18
14308: PUSH
14309: LD_VAR 0 13
14313: ARRAY
14314: PUSH
14315: LD_INT 3
14317: ARRAY
14318: PUSH
14319: LD_INT 1
14321: EQUAL
14322: AND
14323: IFFALSE 14491
// begin if not personel [ i ] [ 2 ] then
14325: LD_VAR 0 18
14329: PUSH
14330: LD_VAR 0 13
14334: ARRAY
14335: PUSH
14336: LD_INT 2
14338: ARRAY
14339: NOT
14340: IFFALSE 14457
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
14342: LD_ADDR_VAR 0 18
14346: PUSH
14347: LD_VAR 0 18
14351: PPUSH
14352: LD_VAR 0 13
14356: PUSH
14357: LD_VAR 0 18
14361: PUSH
14362: LD_VAR 0 13
14366: ARRAY
14367: PUSH
14368: LD_INT 1
14370: MINUS
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: LD_VAR 0 4
14380: PPUSH
14381: LD_INT 22
14383: PUSH
14384: LD_VAR 0 1
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 21
14395: PUSH
14396: LD_INT 3
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 50
14405: PUSH
14406: EMPTY
14407: LIST
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: LD_INT 30
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 30
14424: PUSH
14425: LD_INT 1
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 70
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PPUSH
14452: CALL 35668 0 3
14456: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14457: LD_VAR 0 18
14461: PUSH
14462: LD_VAR 0 13
14466: ARRAY
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: LD_VAR 0 18
14476: PUSH
14477: LD_VAR 0 13
14481: ARRAY
14482: PUSH
14483: LD_INT 2
14485: ARRAY
14486: PPUSH
14487: CALL_OW 120
// end ; end ;
14491: GO 14277
14493: POP
14494: POP
// for i := 1 to personel do
14495: LD_ADDR_VAR 0 13
14499: PUSH
14500: DOUBLE
14501: LD_INT 1
14503: DEC
14504: ST_TO_ADDR
14505: LD_VAR 0 18
14509: PUSH
14510: FOR_TO
14511: IFFALSE 14552
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
14513: LD_ADDR_VAR 0 21
14517: PUSH
14518: LD_VAR 0 21
14522: PUSH
14523: LD_VAR 0 18
14527: PUSH
14528: LD_VAR 0 13
14532: ARRAY
14533: PPUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 3
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 72
14548: ADD
14549: ST_TO_ADDR
14550: GO 14510
14552: POP
14553: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14554: LD_VAR 0 21
14558: PUSH
14559: LD_VAR 0 4
14563: PPUSH
14564: LD_INT 22
14566: PUSH
14567: LD_VAR 0 1
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 21
14578: PUSH
14579: LD_INT 2
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 3
14588: PUSH
14589: LD_INT 24
14591: PUSH
14592: LD_INT 1000
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 70
14612: AND
14613: IFFALSE 15217
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14615: LD_ADDR_VAR 0 35
14619: PUSH
14620: LD_VAR 0 4
14624: PPUSH
14625: LD_INT 22
14627: PUSH
14628: LD_VAR 0 1
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PUSH
14637: LD_INT 21
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 3
14649: PUSH
14650: LD_INT 24
14652: PUSH
14653: LD_INT 1000
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: PPUSH
14669: CALL_OW 70
14673: PUSH
14674: FOR_IN
14675: IFFALSE 15213
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
14677: LD_VAR 0 35
14681: PPUSH
14682: LD_VAR 0 6
14686: PPUSH
14687: CALL_OW 299
14691: PUSH
14692: LD_INT 5
14694: LESS
14695: IFFALSE 14990
// begin for i := 1 to vehicles do
14697: LD_ADDR_VAR 0 13
14701: PUSH
14702: DOUBLE
14703: LD_INT 1
14705: DEC
14706: ST_TO_ADDR
14707: LD_VAR 0 24
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14782
// begin if vehicles [ i ] [ 1 ] = damageUnit then
14715: LD_VAR 0 24
14719: PUSH
14720: LD_VAR 0 13
14724: ARRAY
14725: PUSH
14726: LD_INT 1
14728: ARRAY
14729: PUSH
14730: LD_VAR 0 35
14734: EQUAL
14735: IFFALSE 14756
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
14737: LD_VAR 0 24
14741: PUSH
14742: LD_VAR 0 13
14746: ARRAY
14747: PUSH
14748: LD_INT 2
14750: ARRAY
14751: PPUSH
14752: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
14756: LD_VAR 0 24
14760: PUSH
14761: LD_VAR 0 13
14765: ARRAY
14766: PUSH
14767: LD_INT 2
14769: ARRAY
14770: PPUSH
14771: LD_VAR 0 35
14775: PPUSH
14776: CALL_OW 189
// end ;
14780: GO 14712
14782: POP
14783: POP
// for i := 1 to personel do
14784: LD_ADDR_VAR 0 13
14788: PUSH
14789: DOUBLE
14790: LD_INT 1
14792: DEC
14793: ST_TO_ADDR
14794: LD_VAR 0 18
14798: PUSH
14799: FOR_TO
14800: IFFALSE 14988
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14802: LD_VAR 0 18
14806: PUSH
14807: LD_VAR 0 13
14811: ARRAY
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PPUSH
14817: CALL_OW 257
14821: PUSH
14822: LD_INT 3
14824: EQUAL
14825: PUSH
14826: LD_VAR 0 18
14830: PUSH
14831: LD_VAR 0 13
14835: ARRAY
14836: PUSH
14837: LD_INT 3
14839: ARRAY
14840: PUSH
14841: LD_INT 1
14843: EQUAL
14844: AND
14845: IFFALSE 14986
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14847: LD_VAR 0 18
14851: PUSH
14852: LD_VAR 0 13
14856: ARRAY
14857: PUSH
14858: LD_INT 1
14860: ARRAY
14861: PPUSH
14862: CALL_OW 437
14866: IFFALSE 14922
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14868: LD_VAR 0 18
14872: PUSH
14873: LD_VAR 0 13
14877: ARRAY
14878: PUSH
14879: LD_INT 1
14881: ARRAY
14882: PPUSH
14883: CALL_OW 437
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PUSH
14892: LD_INT 1
14894: ARRAY
14895: PUSH
14896: LD_STRING e
14898: EQUAL
14899: IFFALSE 14922
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14901: LD_VAR 0 18
14905: PUSH
14906: LD_VAR 0 13
14910: ARRAY
14911: PUSH
14912: LD_INT 1
14914: ARRAY
14915: PPUSH
14916: EMPTY
14917: PPUSH
14918: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14922: LD_VAR 0 18
14926: PUSH
14927: LD_VAR 0 13
14931: ARRAY
14932: PUSH
14933: LD_INT 1
14935: ARRAY
14936: PPUSH
14937: CALL_OW 310
14941: IFFALSE 14962
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14943: LD_VAR 0 18
14947: PUSH
14948: LD_VAR 0 13
14952: ARRAY
14953: PUSH
14954: LD_INT 1
14956: ARRAY
14957: PPUSH
14958: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14962: LD_VAR 0 18
14966: PUSH
14967: LD_VAR 0 13
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: LD_VAR 0 35
14981: PPUSH
14982: CALL_OW 189
// end ;
14986: GO 14799
14988: POP
14989: POP
// end ; if GetLives ( damageUnit ) < 250 then
14990: LD_VAR 0 35
14994: PPUSH
14995: CALL_OW 256
14999: PUSH
15000: LD_INT 250
15002: LESS
15003: IFFALSE 15211
// for i := 1 to personel do
15005: LD_ADDR_VAR 0 13
15009: PUSH
15010: DOUBLE
15011: LD_INT 1
15013: DEC
15014: ST_TO_ADDR
15015: LD_VAR 0 18
15019: PUSH
15020: FOR_TO
15021: IFFALSE 15209
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15023: LD_VAR 0 18
15027: PUSH
15028: LD_VAR 0 13
15032: ARRAY
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PPUSH
15038: CALL_OW 257
15042: PUSH
15043: LD_INT 3
15045: EQUAL
15046: PUSH
15047: LD_VAR 0 18
15051: PUSH
15052: LD_VAR 0 13
15056: ARRAY
15057: PUSH
15058: LD_INT 3
15060: ARRAY
15061: PUSH
15062: LD_INT 1
15064: EQUAL
15065: AND
15066: IFFALSE 15207
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15068: LD_VAR 0 18
15072: PUSH
15073: LD_VAR 0 13
15077: ARRAY
15078: PUSH
15079: LD_INT 1
15081: ARRAY
15082: PPUSH
15083: CALL_OW 437
15087: IFFALSE 15143
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15089: LD_VAR 0 18
15093: PUSH
15094: LD_VAR 0 13
15098: ARRAY
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: PPUSH
15104: CALL_OW 437
15108: PUSH
15109: LD_INT 1
15111: ARRAY
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PUSH
15117: LD_STRING e
15119: EQUAL
15120: IFFALSE 15143
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15122: LD_VAR 0 18
15126: PUSH
15127: LD_VAR 0 13
15131: ARRAY
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PPUSH
15137: EMPTY
15138: PPUSH
15139: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15143: LD_VAR 0 18
15147: PUSH
15148: LD_VAR 0 13
15152: ARRAY
15153: PUSH
15154: LD_INT 1
15156: ARRAY
15157: PPUSH
15158: CALL_OW 310
15162: IFFALSE 15183
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15164: LD_VAR 0 18
15168: PUSH
15169: LD_VAR 0 13
15173: ARRAY
15174: PUSH
15175: LD_INT 1
15177: ARRAY
15178: PPUSH
15179: CALL_OW 122
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
15183: LD_VAR 0 18
15187: PUSH
15188: LD_VAR 0 13
15192: ARRAY
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_VAR 0 35
15202: PPUSH
15203: CALL_OW 189
// end ;
15207: GO 15020
15209: POP
15210: POP
// end ;
15211: GO 14674
15213: POP
15214: POP
// end else
15215: GO 15422
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
15217: LD_VAR 0 21
15221: PUSH
15222: LD_VAR 0 21
15226: PPUSH
15227: LD_INT 56
15229: PUSH
15230: EMPTY
15231: LIST
15232: PPUSH
15233: CALL_OW 72
15237: AND
15238: PUSH
15239: LD_VAR 0 30
15243: AND
15244: IFFALSE 15422
// for i := 1 to personel do
15246: LD_ADDR_VAR 0 13
15250: PUSH
15251: DOUBLE
15252: LD_INT 1
15254: DEC
15255: ST_TO_ADDR
15256: LD_VAR 0 18
15260: PUSH
15261: FOR_TO
15262: IFFALSE 15420
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
15264: LD_VAR 0 18
15268: PUSH
15269: LD_VAR 0 13
15273: ARRAY
15274: PUSH
15275: LD_INT 1
15277: ARRAY
15278: PPUSH
15279: CALL_OW 257
15283: PUSH
15284: LD_INT 3
15286: EQUAL
15287: PUSH
15288: LD_VAR 0 18
15292: PUSH
15293: LD_VAR 0 13
15297: ARRAY
15298: PUSH
15299: LD_INT 3
15301: ARRAY
15302: PUSH
15303: LD_INT 1
15305: EQUAL
15306: AND
15307: IFFALSE 15418
// begin if not personel [ i ] [ 2 ] then
15309: LD_VAR 0 18
15313: PUSH
15314: LD_VAR 0 13
15318: ARRAY
15319: PUSH
15320: LD_INT 2
15322: ARRAY
15323: NOT
15324: IFFALSE 15384
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
15326: LD_ADDR_VAR 0 18
15330: PUSH
15331: LD_VAR 0 18
15335: PPUSH
15336: LD_VAR 0 13
15340: PUSH
15341: LD_VAR 0 18
15345: PUSH
15346: LD_VAR 0 13
15350: ARRAY
15351: PUSH
15352: LD_INT 1
15354: MINUS
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PPUSH
15360: LD_VAR 0 30
15364: PUSH
15365: LD_INT 1
15367: PPUSH
15368: LD_VAR 0 30
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: PPUSH
15379: CALL 35668 0 3
15383: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15384: LD_VAR 0 18
15388: PUSH
15389: LD_VAR 0 13
15393: ARRAY
15394: PUSH
15395: LD_INT 1
15397: ARRAY
15398: PPUSH
15399: LD_VAR 0 18
15403: PUSH
15404: LD_VAR 0 13
15408: ARRAY
15409: PUSH
15410: LD_INT 2
15412: ARRAY
15413: PPUSH
15414: CALL_OW 120
// end ;
15418: GO 15261
15420: POP
15421: POP
// for i := 1 to personel do
15422: LD_ADDR_VAR 0 13
15426: PUSH
15427: DOUBLE
15428: LD_INT 1
15430: DEC
15431: ST_TO_ADDR
15432: LD_VAR 0 18
15436: PUSH
15437: FOR_TO
15438: IFFALSE 15479
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
15440: LD_ADDR_VAR 0 22
15444: PUSH
15445: LD_VAR 0 22
15449: PUSH
15450: LD_VAR 0 18
15454: PUSH
15455: LD_VAR 0 13
15459: ARRAY
15460: PPUSH
15461: LD_INT 25
15463: PUSH
15464: LD_INT 4
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 72
15475: ADD
15476: ST_TO_ADDR
15477: GO 15437
15479: POP
15480: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
15481: LD_VAR 0 22
15485: PUSH
15486: LD_VAR 0 4
15490: PPUSH
15491: LD_INT 22
15493: PUSH
15494: LD_VAR 0 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 21
15505: PUSH
15506: LD_INT 1
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 3
15515: PUSH
15516: LD_INT 24
15518: PUSH
15519: LD_INT 1000
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: PPUSH
15535: CALL_OW 70
15539: AND
15540: IFFALSE 16057
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
15542: LD_ADDR_VAR 0 35
15546: PUSH
15547: LD_VAR 0 4
15551: PPUSH
15552: LD_INT 22
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 1
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 3
15576: PUSH
15577: LD_INT 24
15579: PUSH
15580: LD_INT 1000
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: PPUSH
15596: CALL_OW 70
15600: PUSH
15601: FOR_IN
15602: IFFALSE 16053
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
15604: LD_VAR 0 35
15608: PPUSH
15609: LD_VAR 0 5
15613: PPUSH
15614: CALL_OW 299
15618: PUSH
15619: LD_INT 5
15621: LESS
15622: IFFALSE 15830
// for i := 1 to personel do
15624: LD_ADDR_VAR 0 13
15628: PUSH
15629: DOUBLE
15630: LD_INT 1
15632: DEC
15633: ST_TO_ADDR
15634: LD_VAR 0 18
15638: PUSH
15639: FOR_TO
15640: IFFALSE 15828
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15642: LD_VAR 0 18
15646: PUSH
15647: LD_VAR 0 13
15651: ARRAY
15652: PUSH
15653: LD_INT 1
15655: ARRAY
15656: PPUSH
15657: CALL_OW 257
15661: PUSH
15662: LD_INT 4
15664: EQUAL
15665: PUSH
15666: LD_VAR 0 18
15670: PUSH
15671: LD_VAR 0 13
15675: ARRAY
15676: PUSH
15677: LD_INT 3
15679: ARRAY
15680: PUSH
15681: LD_INT 1
15683: EQUAL
15684: AND
15685: IFFALSE 15826
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15687: LD_VAR 0 18
15691: PUSH
15692: LD_VAR 0 13
15696: ARRAY
15697: PUSH
15698: LD_INT 1
15700: ARRAY
15701: PPUSH
15702: CALL_OW 437
15706: IFFALSE 15762
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15708: LD_VAR 0 18
15712: PUSH
15713: LD_VAR 0 13
15717: ARRAY
15718: PUSH
15719: LD_INT 1
15721: ARRAY
15722: PPUSH
15723: CALL_OW 437
15727: PUSH
15728: LD_INT 1
15730: ARRAY
15731: PUSH
15732: LD_INT 1
15734: ARRAY
15735: PUSH
15736: LD_STRING e
15738: EQUAL
15739: IFFALSE 15762
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15741: LD_VAR 0 18
15745: PUSH
15746: LD_VAR 0 13
15750: ARRAY
15751: PUSH
15752: LD_INT 1
15754: ARRAY
15755: PPUSH
15756: EMPTY
15757: PPUSH
15758: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15762: LD_VAR 0 18
15766: PUSH
15767: LD_VAR 0 13
15771: ARRAY
15772: PUSH
15773: LD_INT 1
15775: ARRAY
15776: PPUSH
15777: CALL_OW 310
15781: IFFALSE 15802
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
15783: LD_VAR 0 18
15787: PUSH
15788: LD_VAR 0 13
15792: ARRAY
15793: PUSH
15794: LD_INT 1
15796: ARRAY
15797: PPUSH
15798: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
15802: LD_VAR 0 18
15806: PUSH
15807: LD_VAR 0 13
15811: ARRAY
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: PPUSH
15817: LD_VAR 0 35
15821: PPUSH
15822: CALL_OW 188
// end ;
15826: GO 15639
15828: POP
15829: POP
// if GetLives ( damageUnit ) < 250 then
15830: LD_VAR 0 35
15834: PPUSH
15835: CALL_OW 256
15839: PUSH
15840: LD_INT 250
15842: LESS
15843: IFFALSE 16051
// for i := 1 to personel do
15845: LD_ADDR_VAR 0 13
15849: PUSH
15850: DOUBLE
15851: LD_INT 1
15853: DEC
15854: ST_TO_ADDR
15855: LD_VAR 0 18
15859: PUSH
15860: FOR_TO
15861: IFFALSE 16049
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
15863: LD_VAR 0 18
15867: PUSH
15868: LD_VAR 0 13
15872: ARRAY
15873: PUSH
15874: LD_INT 1
15876: ARRAY
15877: PPUSH
15878: CALL_OW 257
15882: PUSH
15883: LD_INT 4
15885: EQUAL
15886: PUSH
15887: LD_VAR 0 18
15891: PUSH
15892: LD_VAR 0 13
15896: ARRAY
15897: PUSH
15898: LD_INT 3
15900: ARRAY
15901: PUSH
15902: LD_INT 1
15904: EQUAL
15905: AND
15906: IFFALSE 16047
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
15908: LD_VAR 0 18
15912: PUSH
15913: LD_VAR 0 13
15917: ARRAY
15918: PUSH
15919: LD_INT 1
15921: ARRAY
15922: PPUSH
15923: CALL_OW 437
15927: IFFALSE 15983
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
15929: LD_VAR 0 18
15933: PUSH
15934: LD_VAR 0 13
15938: ARRAY
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PPUSH
15944: CALL_OW 437
15948: PUSH
15949: LD_INT 1
15951: ARRAY
15952: PUSH
15953: LD_INT 1
15955: ARRAY
15956: PUSH
15957: LD_STRING e
15959: EQUAL
15960: IFFALSE 15983
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
15962: LD_VAR 0 18
15966: PUSH
15967: LD_VAR 0 13
15971: ARRAY
15972: PUSH
15973: LD_INT 1
15975: ARRAY
15976: PPUSH
15977: EMPTY
15978: PPUSH
15979: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
15983: LD_VAR 0 18
15987: PUSH
15988: LD_VAR 0 13
15992: ARRAY
15993: PUSH
15994: LD_INT 1
15996: ARRAY
15997: PPUSH
15998: CALL_OW 310
16002: IFFALSE 16023
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
16004: LD_VAR 0 18
16008: PUSH
16009: LD_VAR 0 13
16013: ARRAY
16014: PUSH
16015: LD_INT 1
16017: ARRAY
16018: PPUSH
16019: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
16023: LD_VAR 0 18
16027: PUSH
16028: LD_VAR 0 13
16032: ARRAY
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: PPUSH
16038: LD_VAR 0 35
16042: PPUSH
16043: CALL_OW 188
// end ;
16047: GO 15860
16049: POP
16050: POP
// end ;
16051: GO 15601
16053: POP
16054: POP
// end else
16055: GO 16262
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
16057: LD_VAR 0 22
16061: PUSH
16062: LD_VAR 0 22
16066: PPUSH
16067: LD_INT 56
16069: PUSH
16070: EMPTY
16071: LIST
16072: PPUSH
16073: CALL_OW 72
16077: AND
16078: PUSH
16079: LD_VAR 0 31
16083: AND
16084: IFFALSE 16262
// for i := 1 to personel do
16086: LD_ADDR_VAR 0 13
16090: PUSH
16091: DOUBLE
16092: LD_INT 1
16094: DEC
16095: ST_TO_ADDR
16096: LD_VAR 0 18
16100: PUSH
16101: FOR_TO
16102: IFFALSE 16260
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
16104: LD_VAR 0 18
16108: PUSH
16109: LD_VAR 0 13
16113: ARRAY
16114: PUSH
16115: LD_INT 1
16117: ARRAY
16118: PPUSH
16119: CALL_OW 257
16123: PUSH
16124: LD_INT 4
16126: EQUAL
16127: PUSH
16128: LD_VAR 0 18
16132: PUSH
16133: LD_VAR 0 13
16137: ARRAY
16138: PUSH
16139: LD_INT 3
16141: ARRAY
16142: PUSH
16143: LD_INT 1
16145: EQUAL
16146: AND
16147: IFFALSE 16258
// begin if not personel [ i ] [ 2 ] then
16149: LD_VAR 0 18
16153: PUSH
16154: LD_VAR 0 13
16158: ARRAY
16159: PUSH
16160: LD_INT 2
16162: ARRAY
16163: NOT
16164: IFFALSE 16224
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
16166: LD_ADDR_VAR 0 18
16170: PUSH
16171: LD_VAR 0 18
16175: PPUSH
16176: LD_VAR 0 13
16180: PUSH
16181: LD_VAR 0 18
16185: PUSH
16186: LD_VAR 0 13
16190: ARRAY
16191: PUSH
16192: LD_INT 1
16194: MINUS
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: LD_VAR 0 31
16204: PUSH
16205: LD_INT 1
16207: PPUSH
16208: LD_VAR 0 31
16212: PPUSH
16213: CALL_OW 12
16217: ARRAY
16218: PPUSH
16219: CALL 35668 0 3
16223: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
16224: LD_VAR 0 18
16228: PUSH
16229: LD_VAR 0 13
16233: ARRAY
16234: PUSH
16235: LD_INT 1
16237: ARRAY
16238: PPUSH
16239: LD_VAR 0 18
16243: PUSH
16244: LD_VAR 0 13
16248: ARRAY
16249: PUSH
16250: LD_INT 2
16252: ARRAY
16253: PPUSH
16254: CALL_OW 120
// end ;
16258: GO 16101
16260: POP
16261: POP
// wait ( 0 0$01 ) ;
16262: LD_INT 35
16264: PPUSH
16265: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
16269: LD_VAR 0 24
16273: PUSH
16274: LD_VAR 0 8
16278: LESS
16279: PUSH
16280: LD_VAR 0 30
16284: AND
16285: IFFALSE 16535
// begin tmp = vehiclesAmount - vehicles ;
16287: LD_ADDR_VAR 0 15
16291: PUSH
16292: LD_VAR 0 8
16296: PUSH
16297: LD_VAR 0 24
16301: MINUS
16302: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
16303: LD_ADDR_VAR 0 27
16307: PUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: LD_VAR 0 2
16317: PPUSH
16318: CALL 7743 0 2
16322: ST_TO_ADDR
// for i := 1 to tmp do
16323: LD_ADDR_VAR 0 13
16327: PUSH
16328: DOUBLE
16329: LD_INT 1
16331: DEC
16332: ST_TO_ADDR
16333: LD_VAR 0 15
16337: PUSH
16338: FOR_TO
16339: IFFALSE 16531
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
16341: LD_ADDR_VAR 0 15
16345: PUSH
16346: LD_VAR 0 27
16350: PUSH
16351: LD_INT 1
16353: PPUSH
16354: LD_VAR 0 27
16358: PPUSH
16359: CALL_OW 12
16363: ARRAY
16364: ST_TO_ADDR
// if tmp then
16365: LD_VAR 0 15
16369: IFFALSE 16529
// begin if tmp in [ 34 , 14 , 71 ] then
16371: LD_VAR 0 15
16375: PUSH
16376: LD_INT 34
16378: PUSH
16379: LD_INT 14
16381: PUSH
16382: LD_INT 71
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: IN
16390: IFFALSE 16428
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
16392: LD_ADDR_VAR 0 28
16396: PUSH
16397: LD_INT 4
16399: PUSH
16400: EMPTY
16401: LIST
16402: PUSH
16403: LD_INT 14
16405: PUSH
16406: EMPTY
16407: LIST
16408: PUSH
16409: LD_INT 24
16411: PUSH
16412: EMPTY
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: LD_VAR 0 2
16424: ARRAY
16425: ST_TO_ADDR
16426: GO 16486
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_medium_trike , ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
16428: LD_ADDR_VAR 0 28
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 3
16438: PUSH
16439: LD_INT 4
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 13
16449: PUSH
16450: LD_INT 14
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 23
16462: PUSH
16463: LD_INT 24
16465: PUSH
16466: LD_INT 22
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: PUSH
16480: LD_VAR 0 2
16484: ARRAY
16485: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
16486: LD_VAR 0 30
16490: PUSH
16491: LD_INT 1
16493: ARRAY
16494: PPUSH
16495: LD_VAR 0 28
16499: PUSH
16500: LD_INT 1
16502: PPUSH
16503: LD_VAR 0 28
16507: PPUSH
16508: CALL_OW 12
16512: ARRAY
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: LD_INT 1
16519: PPUSH
16520: LD_VAR 0 15
16524: PPUSH
16525: CALL_OW 185
// end ; end ;
16529: GO 16338
16531: POP
16532: POP
// end else
16533: GO 16548
// ComCancel ( factory [ 1 ] ) ;
16535: LD_VAR 0 30
16539: PUSH
16540: LD_INT 1
16542: ARRAY
16543: PPUSH
16544: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) do
16548: LD_ADDR_VAR 0 23
16552: PUSH
16553: LD_VAR 0 4
16557: PPUSH
16558: LD_INT 22
16560: PUSH
16561: LD_VAR 0 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 21
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PPUSH
16584: CALL_OW 70
16588: PUSH
16589: FOR_IN
16590: IFFALSE 16760
// begin vehicleInList = false ;
16592: LD_ADDR_VAR 0 25
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// for i := 1 to vehicles do
16600: LD_ADDR_VAR 0 13
16604: PUSH
16605: DOUBLE
16606: LD_INT 1
16608: DEC
16609: ST_TO_ADDR
16610: LD_VAR 0 24
16614: PUSH
16615: FOR_TO
16616: IFFALSE 16646
// begin if vehicle in vehicles [ i ] then
16618: LD_VAR 0 23
16622: PUSH
16623: LD_VAR 0 24
16627: PUSH
16628: LD_VAR 0 13
16632: ARRAY
16633: IN
16634: IFFALSE 16644
// vehicleInList = true ;
16636: LD_ADDR_VAR 0 25
16640: PUSH
16641: LD_INT 1
16643: ST_TO_ADDR
// end ;
16644: GO 16615
16646: POP
16647: POP
// if not vehicleInList then
16648: LD_VAR 0 25
16652: NOT
16653: IFFALSE 16758
// if vehicles < vehiclesToAttackAmount then
16655: LD_VAR 0 24
16659: PUSH
16660: LD_VAR 0 10
16664: LESS
16665: IFFALSE 16717
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , IsOK ( vehicle ) ] ] else
16667: LD_ADDR_VAR 0 24
16671: PUSH
16672: LD_VAR 0 24
16676: PUSH
16677: LD_VAR 0 23
16681: PUSH
16682: LD_VAR 0 23
16686: PPUSH
16687: CALL_OW 313
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PUSH
16696: LD_VAR 0 23
16700: PPUSH
16701: CALL_OW 302
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: ADD
16714: ST_TO_ADDR
16715: GO 16758
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
16717: LD_ADDR_VAR 0 24
16721: PUSH
16722: LD_VAR 0 24
16726: PUSH
16727: LD_VAR 0 23
16731: PUSH
16732: LD_VAR 0 23
16736: PPUSH
16737: CALL_OW 313
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: ADD
16757: ST_TO_ADDR
// end ;
16758: GO 16589
16760: POP
16761: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16762: LD_ADDR_VAR 0 37
16766: PUSH
16767: LD_VAR 0 7
16771: PPUSH
16772: LD_INT 81
16774: PUSH
16775: LD_VAR 0 1
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PPUSH
16784: CALL_OW 70
16788: PUSH
16789: FOR_IN
16790: IFFALSE 16969
// begin defenceUnits = [ ] ;
16792: LD_ADDR_VAR 0 26
16796: PUSH
16797: EMPTY
16798: ST_TO_ADDR
// for i := 1 to personel do
16799: LD_ADDR_VAR 0 13
16803: PUSH
16804: DOUBLE
16805: LD_INT 1
16807: DEC
16808: ST_TO_ADDR
16809: LD_VAR 0 18
16813: PUSH
16814: FOR_TO
16815: IFFALSE 16865
// if personel [ i ] [ 3 ] = 2 then
16817: LD_VAR 0 18
16821: PUSH
16822: LD_VAR 0 13
16826: ARRAY
16827: PUSH
16828: LD_INT 3
16830: ARRAY
16831: PUSH
16832: LD_INT 2
16834: EQUAL
16835: IFFALSE 16863
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16837: LD_ADDR_VAR 0 26
16841: PUSH
16842: LD_VAR 0 26
16846: PUSH
16847: LD_VAR 0 18
16851: PUSH
16852: LD_VAR 0 13
16856: ARRAY
16857: PUSH
16858: LD_INT 1
16860: ARRAY
16861: ADD
16862: ST_TO_ADDR
16863: GO 16814
16865: POP
16866: POP
// for i := 1 to vehicles do
16867: LD_ADDR_VAR 0 13
16871: PUSH
16872: DOUBLE
16873: LD_INT 1
16875: DEC
16876: ST_TO_ADDR
16877: LD_VAR 0 24
16881: PUSH
16882: FOR_TO
16883: IFFALSE 16933
// if vehicles [ i ] [ 3 ] = 2 then
16885: LD_VAR 0 24
16889: PUSH
16890: LD_VAR 0 13
16894: ARRAY
16895: PUSH
16896: LD_INT 3
16898: ARRAY
16899: PUSH
16900: LD_INT 2
16902: EQUAL
16903: IFFALSE 16931
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16905: LD_ADDR_VAR 0 26
16909: PUSH
16910: LD_VAR 0 26
16914: PUSH
16915: LD_VAR 0 24
16919: PUSH
16920: LD_VAR 0 13
16924: ARRAY
16925: PUSH
16926: LD_INT 1
16928: ARRAY
16929: ADD
16930: ST_TO_ADDR
16931: GO 16882
16933: POP
16934: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16935: LD_VAR 0 26
16939: PPUSH
16940: LD_INT 3
16942: PUSH
16943: LD_INT 60
16945: PUSH
16946: EMPTY
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 72
16957: PPUSH
16958: LD_VAR 0 37
16962: PPUSH
16963: CALL_OW 175
// end ;
16967: GO 16789
16969: POP
16970: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16971: LD_ADDR_VAR 0 38
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_VAR 0 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 30
16993: PUSH
16994: LD_INT 31
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 30
17003: PUSH
17004: LD_INT 32
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 30
17013: PUSH
17014: LD_INT 33
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 30
17023: PUSH
17024: LD_INT 4
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 30
17033: PUSH
17034: LD_INT 5
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PPUSH
17053: CALL_OW 69
17057: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
17058: LD_ADDR_VAR 0 39
17062: PUSH
17063: LD_INT 81
17065: PUSH
17066: LD_VAR 0 1
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 21
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 58
17087: PUSH
17088: EMPTY
17089: LIST
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: PPUSH
17096: CALL_OW 69
17100: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
17101: LD_VAR 0 38
17105: PUSH
17106: LD_VAR 0 39
17110: AND
17111: IFFALSE 17181
// for i in attackBuildings do
17113: LD_ADDR_VAR 0 13
17117: PUSH
17118: LD_VAR 0 38
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17179
// for j in enemyBuildings do
17126: LD_ADDR_VAR 0 14
17130: PUSH
17131: LD_VAR 0 39
17135: PUSH
17136: FOR_IN
17137: IFFALSE 17175
// if GetDistUnits ( i , j ) < 12 then
17139: LD_VAR 0 13
17143: PPUSH
17144: LD_VAR 0 14
17148: PPUSH
17149: CALL_OW 296
17153: PUSH
17154: LD_INT 12
17156: LESS
17157: IFFALSE 17173
// ComAttackUnit ( i , j ) ;
17159: LD_VAR 0 13
17163: PPUSH
17164: LD_VAR 0 14
17168: PPUSH
17169: CALL_OW 115
17173: GO 17136
17175: POP
17176: POP
17177: GO 17123
17179: POP
17180: POP
// until not personel or not enableOmicronAI ;
17181: LD_VAR 0 18
17185: NOT
17186: PUSH
17187: LD_EXP 29
17191: NOT
17192: OR
17193: IFFALSE 12240
// end ;
17195: LD_VAR 0 12
17199: RET
// export function MountWeaponTurrent ; var turret , weapons ; begin
17200: LD_INT 0
17202: PPUSH
17203: PPUSH
17204: PPUSH
// weapons = [ ru_gun ] ;
17205: LD_ADDR_VAR 0 3
17209: PUSH
17210: LD_INT 44
17212: PUSH
17213: EMPTY
17214: LIST
17215: ST_TO_ADDR
// for turret in kirovBunkersToMountWeapon do
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_EXP 71
17225: PUSH
17226: FOR_IN
17227: IFFALSE 17259
// AddComPlaceWeapon ( turret , weapons [ rand ( 1 , weapons ) ] ) ;
17229: LD_VAR 0 2
17233: PPUSH
17234: LD_VAR 0 3
17238: PUSH
17239: LD_INT 1
17241: PPUSH
17242: LD_VAR 0 3
17246: PPUSH
17247: CALL_OW 12
17251: ARRAY
17252: PPUSH
17253: CALL_OW 208
17257: GO 17226
17259: POP
17260: POP
// end ;
17261: LD_VAR 0 1
17265: RET
// export function KirovProduceVehicles ( factory ) ; begin
17266: LD_INT 0
17268: PPUSH
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17269: LD_VAR 0 1
17273: PPUSH
17274: LD_INT 21
17276: PPUSH
17277: LD_INT 1
17279: PPUSH
17280: LD_INT 1
17282: PPUSH
17283: LD_INT 51
17285: PPUSH
17286: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17290: LD_VAR 0 1
17294: PPUSH
17295: LD_INT 21
17297: PPUSH
17298: LD_INT 1
17300: PPUSH
17301: LD_INT 1
17303: PPUSH
17304: LD_INT 51
17306: PPUSH
17307: CALL_OW 185
// AddComConstruct ( factory , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) ;
17311: LD_VAR 0 1
17315: PPUSH
17316: LD_INT 21
17318: PPUSH
17319: LD_INT 1
17321: PPUSH
17322: LD_INT 1
17324: PPUSH
17325: LD_INT 51
17327: PPUSH
17328: CALL_OW 185
// case Difficulty of 1 :
17332: LD_OWVAR 67
17336: PUSH
17337: LD_INT 1
17339: DOUBLE
17340: EQUAL
17341: IFTRUE 17345
17343: GO 17468
17345: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_INT 21
17353: PUSH
17354: LD_INT 23
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 1
17363: PPUSH
17364: LD_INT 2
17366: PPUSH
17367: CALL_OW 12
17371: ARRAY
17372: PPUSH
17373: LD_INT 1
17375: PPUSH
17376: LD_INT 1
17378: PPUSH
17379: LD_INT 43
17381: PPUSH
17382: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17386: LD_VAR 0 1
17390: PPUSH
17391: LD_INT 21
17393: PUSH
17394: LD_INT 23
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: PPUSH
17404: LD_INT 2
17406: PPUSH
17407: CALL_OW 12
17411: ARRAY
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: LD_INT 43
17421: PPUSH
17422: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: LD_INT 21
17433: PUSH
17434: LD_INT 23
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: PPUSH
17444: LD_INT 2
17446: PPUSH
17447: CALL_OW 12
17451: ARRAY
17452: PPUSH
17453: LD_INT 1
17455: PPUSH
17456: LD_INT 1
17458: PPUSH
17459: LD_INT 44
17461: PPUSH
17462: CALL_OW 185
// end ; 2 :
17466: GO 17731
17468: LD_INT 2
17470: DOUBLE
17471: EQUAL
17472: IFTRUE 17476
17474: GO 17599
17476: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17477: LD_VAR 0 1
17481: PPUSH
17482: LD_INT 21
17484: PUSH
17485: LD_INT 23
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 1
17494: PPUSH
17495: LD_INT 2
17497: PPUSH
17498: CALL_OW 12
17502: ARRAY
17503: PPUSH
17504: LD_INT 1
17506: PPUSH
17507: LD_INT 1
17509: PPUSH
17510: LD_INT 42
17512: PPUSH
17513: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gatling_gun ) ;
17517: LD_VAR 0 1
17521: PPUSH
17522: LD_INT 21
17524: PUSH
17525: LD_INT 23
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 1
17534: PPUSH
17535: LD_INT 2
17537: PPUSH
17538: CALL_OW 12
17542: ARRAY
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: LD_INT 43
17552: PPUSH
17553: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17557: LD_VAR 0 1
17561: PPUSH
17562: LD_INT 21
17564: PUSH
17565: LD_INT 23
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 1
17574: PPUSH
17575: LD_INT 2
17577: PPUSH
17578: CALL_OW 12
17582: ARRAY
17583: PPUSH
17584: LD_INT 1
17586: PPUSH
17587: LD_INT 1
17589: PPUSH
17590: LD_INT 44
17592: PPUSH
17593: CALL_OW 185
// end ; 3 :
17597: GO 17731
17599: LD_INT 3
17601: DOUBLE
17602: EQUAL
17603: IFTRUE 17607
17605: GO 17730
17607: POP
// begin AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17608: LD_VAR 0 1
17612: PPUSH
17613: LD_INT 21
17615: PUSH
17616: LD_INT 23
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 1
17625: PPUSH
17626: LD_INT 2
17628: PPUSH
17629: CALL_OW 12
17633: ARRAY
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_INT 42
17643: PPUSH
17644: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
17648: LD_VAR 0 1
17652: PPUSH
17653: LD_INT 21
17655: PUSH
17656: LD_INT 23
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 1
17665: PPUSH
17666: LD_INT 2
17668: PPUSH
17669: CALL_OW 12
17673: ARRAY
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_INT 1
17680: PPUSH
17681: LD_INT 42
17683: PPUSH
17684: CALL_OW 185
// AddComConstruct ( factory , [ ru_medium_wheeled , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , ru_gun ) ;
17688: LD_VAR 0 1
17692: PPUSH
17693: LD_INT 21
17695: PUSH
17696: LD_INT 23
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 1
17705: PPUSH
17706: LD_INT 2
17708: PPUSH
17709: CALL_OW 12
17713: ARRAY
17714: PPUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_INT 1
17720: PPUSH
17721: LD_INT 44
17723: PPUSH
17724: CALL_OW 185
// end ; end ;
17728: GO 17731
17730: POP
// end ;
17731: LD_VAR 0 2
17735: RET
// export function KirovAttackOmicron ; var i , vehicles , vehicle , goodVehs , cargo , cargoRefuel ; begin
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
// vehicles = [ ] ;
17745: LD_ADDR_VAR 0 3
17749: PUSH
17750: EMPTY
17751: ST_TO_ADDR
// cargoRefuel = [ ] ;
17752: LD_ADDR_VAR 0 7
17756: PUSH
17757: EMPTY
17758: ST_TO_ADDR
// for vehicle in kirovAttackVehicles do
17759: LD_ADDR_VAR 0 4
17763: PUSH
17764: LD_EXP 75
17768: PUSH
17769: FOR_IN
17770: IFFALSE 17819
// vehicles = Insert ( vehicles , 1 , [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 1 ] ) ;
17772: LD_ADDR_VAR 0 3
17776: PUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 1
17784: PPUSH
17785: LD_VAR 0 4
17789: PUSH
17790: LD_VAR 0 4
17794: PPUSH
17795: CALL_OW 313
17799: PUSH
17800: LD_INT 1
17802: ARRAY
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: PPUSH
17812: CALL_OW 2
17816: ST_TO_ADDR
17817: GO 17769
17819: POP
17820: POP
// repeat for i := 1 to vehicles do
17821: LD_ADDR_VAR 0 2
17825: PUSH
17826: DOUBLE
17827: LD_INT 1
17829: DEC
17830: ST_TO_ADDR
17831: LD_VAR 0 3
17835: PUSH
17836: FOR_TO
17837: IFFALSE 17875
// if vehicles [ i ] [ 3 ] = 1 then
17839: LD_VAR 0 3
17843: PUSH
17844: LD_VAR 0 2
17848: ARRAY
17849: PUSH
17850: LD_INT 3
17852: ARRAY
17853: PUSH
17854: LD_INT 1
17856: EQUAL
17857: IFFALSE 17873
// goodVehs = goodVehs + 1 ;
17859: LD_ADDR_VAR 0 5
17863: PUSH
17864: LD_VAR 0 5
17868: PUSH
17869: LD_INT 1
17871: PLUS
17872: ST_TO_ADDR
17873: GO 17836
17875: POP
17876: POP
// if goodVehs = vehicles then
17877: LD_VAR 0 5
17881: PUSH
17882: LD_VAR 0 3
17886: EQUAL
17887: IFFALSE 18110
// for i := 1 to vehicles do
17889: LD_ADDR_VAR 0 2
17893: PUSH
17894: DOUBLE
17895: LD_INT 1
17897: DEC
17898: ST_TO_ADDR
17899: LD_VAR 0 3
17903: PUSH
17904: FOR_TO
17905: IFFALSE 18108
// begin if not HasTask ( vehicles [ i ] [ 1 ] ) then
17907: LD_VAR 0 3
17911: PUSH
17912: LD_VAR 0 2
17916: ARRAY
17917: PUSH
17918: LD_INT 1
17920: ARRAY
17921: PPUSH
17922: CALL_OW 314
17926: NOT
17927: IFFALSE 18106
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
17929: LD_VAR 0 3
17933: PUSH
17934: LD_VAR 0 2
17938: ARRAY
17939: PUSH
17940: LD_INT 1
17942: ARRAY
17943: PPUSH
17944: CALL_OW 261
17948: PUSH
17949: LD_INT 50
17951: LESS
17952: IFFALSE 18081
// begin for cargo in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_cargo_bay ] , [ f_ok ] ] ) do
17954: LD_ADDR_VAR 0 6
17958: PUSH
17959: LD_INT 22
17961: PUSH
17962: LD_INT 6
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 21
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 34
17981: PUSH
17982: LD_INT 51
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 50
17991: PUSH
17992: EMPTY
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: PPUSH
18001: CALL_OW 69
18005: PUSH
18006: FOR_IN
18007: IFFALSE 18045
// if GetCargo ( cargo , mat_oil ) > 0 then
18009: LD_VAR 0 6
18013: PPUSH
18014: LD_INT 2
18016: PPUSH
18017: CALL_OW 289
18021: PUSH
18022: LD_INT 0
18024: GREATER
18025: IFFALSE 18043
// cargoRefuel = cargoRefuel ^ cargo ;
18027: LD_ADDR_VAR 0 7
18031: PUSH
18032: LD_VAR 0 7
18036: PUSH
18037: LD_VAR 0 6
18041: ADD
18042: ST_TO_ADDR
18043: GO 18006
18045: POP
18046: POP
// if cargo then
18047: LD_VAR 0 6
18051: IFFALSE 18081
// ComRefuelFromCargo ( vehicles [ i ] [ 1 ] , cargo [ 1 ] ) ;
18053: LD_VAR 0 3
18057: PUSH
18058: LD_VAR 0 2
18062: ARRAY
18063: PUSH
18064: LD_INT 1
18066: ARRAY
18067: PPUSH
18068: LD_VAR 0 6
18072: PUSH
18073: LD_INT 1
18075: ARRAY
18076: PPUSH
18077: CALL 8357 0 2
// end ; AddComAgressiveMove ( vehicles [ i ] [ 1 ] , 26 , 35 ) ;
18081: LD_VAR 0 3
18085: PUSH
18086: LD_VAR 0 2
18090: ARRAY
18091: PUSH
18092: LD_INT 1
18094: ARRAY
18095: PPUSH
18096: LD_INT 26
18098: PPUSH
18099: LD_INT 35
18101: PPUSH
18102: CALL_OW 174
// end ; end ;
18106: GO 17904
18108: POP
18109: POP
// goodVehs = 0 ;
18110: LD_ADDR_VAR 0 5
18114: PUSH
18115: LD_INT 0
18117: ST_TO_ADDR
// for i := 1 to vehicles do
18118: LD_ADDR_VAR 0 2
18122: PUSH
18123: DOUBLE
18124: LD_INT 1
18126: DEC
18127: ST_TO_ADDR
18128: LD_VAR 0 3
18132: PUSH
18133: FOR_TO
18134: IFFALSE 18635
// begin if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and not GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18136: LD_VAR 0 3
18140: PUSH
18141: LD_VAR 0 2
18145: ARRAY
18146: PUSH
18147: LD_INT 1
18149: ARRAY
18150: PPUSH
18151: CALL_OW 256
18155: PUSH
18156: LD_INT 500
18158: LESS
18159: PUSH
18160: LD_VAR 0 3
18164: PUSH
18165: LD_VAR 0 2
18169: ARRAY
18170: PUSH
18171: LD_INT 1
18173: ARRAY
18174: PPUSH
18175: LD_INT 78
18177: PPUSH
18178: LD_INT 39
18180: PPUSH
18181: CALL_OW 297
18185: PUSH
18186: LD_INT 9
18188: LESS
18189: NOT
18190: AND
18191: IFFALSE 18256
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
18193: LD_ADDR_VAR 0 3
18197: PUSH
18198: LD_VAR 0 3
18202: PPUSH
18203: LD_VAR 0 2
18207: PUSH
18208: LD_VAR 0 3
18212: PUSH
18213: LD_VAR 0 2
18217: ARRAY
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PPUSH
18223: LD_INT 2
18225: PPUSH
18226: CALL 35668 0 3
18230: ST_TO_ADDR
// ComMoveXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) ;
18231: LD_VAR 0 3
18235: PUSH
18236: LD_VAR 0 2
18240: ARRAY
18241: PUSH
18242: LD_INT 1
18244: ARRAY
18245: PPUSH
18246: LD_INT 78
18248: PPUSH
18249: LD_INT 39
18251: PPUSH
18252: CALL_OW 111
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 500 and GetDistUnitXY ( vehicles [ i ] [ 1 ] , 78 , 39 ) < 9 then
18256: LD_VAR 0 3
18260: PUSH
18261: LD_VAR 0 2
18265: ARRAY
18266: PUSH
18267: LD_INT 1
18269: ARRAY
18270: PPUSH
18271: CALL_OW 256
18275: PUSH
18276: LD_INT 500
18278: LESS
18279: PUSH
18280: LD_VAR 0 3
18284: PUSH
18285: LD_VAR 0 2
18289: ARRAY
18290: PUSH
18291: LD_INT 1
18293: ARRAY
18294: PPUSH
18295: LD_INT 78
18297: PPUSH
18298: LD_INT 39
18300: PPUSH
18301: CALL_OW 297
18305: PUSH
18306: LD_INT 9
18308: LESS
18309: AND
18310: IFFALSE 18365
// begin AddComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
18312: LD_VAR 0 3
18316: PUSH
18317: LD_VAR 0 2
18321: ARRAY
18322: PUSH
18323: LD_INT 2
18325: ARRAY
18326: PPUSH
18327: CALL_OW 181
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18331: LD_VAR 0 3
18335: PUSH
18336: LD_VAR 0 2
18340: ARRAY
18341: PUSH
18342: LD_INT 2
18344: ARRAY
18345: PPUSH
18346: LD_VAR 0 3
18350: PUSH
18351: LD_VAR 0 2
18355: ARRAY
18356: PUSH
18357: LD_INT 1
18359: ARRAY
18360: PPUSH
18361: CALL_OW 189
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 and vehicles [ i ] [ 3 ] = 2 then
18365: LD_VAR 0 3
18369: PUSH
18370: LD_VAR 0 2
18374: ARRAY
18375: PUSH
18376: LD_INT 1
18378: ARRAY
18379: PPUSH
18380: CALL_OW 256
18384: PUSH
18385: LD_INT 1000
18387: EQUAL
18388: PUSH
18389: LD_VAR 0 3
18393: PUSH
18394: LD_VAR 0 2
18398: ARRAY
18399: PUSH
18400: LD_INT 3
18402: ARRAY
18403: PUSH
18404: LD_INT 2
18406: EQUAL
18407: AND
18408: IFFALSE 18482
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 1 ) ;
18410: LD_ADDR_VAR 0 3
18414: PUSH
18415: LD_VAR 0 3
18419: PPUSH
18420: LD_VAR 0 2
18424: PUSH
18425: LD_VAR 0 3
18429: PUSH
18430: LD_VAR 0 2
18434: ARRAY
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PPUSH
18440: LD_INT 1
18442: PPUSH
18443: CALL 35668 0 3
18447: ST_TO_ADDR
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
18448: LD_VAR 0 3
18452: PUSH
18453: LD_VAR 0 2
18457: ARRAY
18458: PUSH
18459: LD_INT 2
18461: ARRAY
18462: PPUSH
18463: LD_VAR 0 3
18467: PUSH
18468: LD_VAR 0 2
18472: ARRAY
18473: PUSH
18474: LD_INT 1
18476: ARRAY
18477: PPUSH
18478: CALL_OW 120
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
18482: LD_VAR 0 3
18486: PUSH
18487: LD_VAR 0 2
18491: ARRAY
18492: PUSH
18493: LD_INT 1
18495: ARRAY
18496: PPUSH
18497: CALL_OW 256
18501: PUSH
18502: LD_INT 250
18504: LESS
18505: IFFALSE 18532
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18507: LD_ADDR_VAR 0 3
18511: PUSH
18512: LD_VAR 0 3
18516: PUSH
18517: LD_VAR 0 3
18521: PUSH
18522: LD_VAR 0 2
18526: ARRAY
18527: PUSH
18528: EMPTY
18529: LIST
18530: DIFF
18531: ST_TO_ADDR
// if GetLives ( vehicles [ i ] [ 2 ] ) < 250 and GetLives ( vehicles [ i ] [ 1 ] ) > 250 then
18532: LD_VAR 0 3
18536: PUSH
18537: LD_VAR 0 2
18541: ARRAY
18542: PUSH
18543: LD_INT 2
18545: ARRAY
18546: PPUSH
18547: CALL_OW 256
18551: PUSH
18552: LD_INT 250
18554: LESS
18555: PUSH
18556: LD_VAR 0 3
18560: PUSH
18561: LD_VAR 0 2
18565: ARRAY
18566: PUSH
18567: LD_INT 1
18569: ARRAY
18570: PPUSH
18571: CALL_OW 256
18575: PUSH
18576: LD_INT 250
18578: GREATER
18579: AND
18580: IFFALSE 18633
// begin kirovCanCaptureVehicles = kirovCanCaptureVehicles ^ vehicles [ i ] [ 1 ] ;
18582: LD_ADDR_EXP 30
18586: PUSH
18587: LD_EXP 30
18591: PUSH
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 2
18601: ARRAY
18602: PUSH
18603: LD_INT 1
18605: ARRAY
18606: ADD
18607: ST_TO_ADDR
// vehicles = vehicles diff [ vehicles [ i ] ] ;
18608: LD_ADDR_VAR 0 3
18612: PUSH
18613: LD_VAR 0 3
18617: PUSH
18618: LD_VAR 0 3
18622: PUSH
18623: LD_VAR 0 2
18627: ARRAY
18628: PUSH
18629: EMPTY
18630: LIST
18631: DIFF
18632: ST_TO_ADDR
// end ; end ;
18633: GO 18133
18635: POP
18636: POP
// wait ( 0 0$1 ) ;
18637: LD_INT 35
18639: PPUSH
18640: CALL_OW 67
// until omicronSurrender ;
18644: LD_EXP 23
18648: IFFALSE 17821
// end ;
18650: LD_VAR 0 1
18654: RET
// export function MoveToBase ( units , roadArea ) ; var i , unit , playerUnits , playerUnit , enemyUnitsOnRoad , cratesOnRoad , nearUnit , nearCrates , attackUnits , medics , damageUnits , inBase , newBase ; begin
18655: LD_INT 0
18657: PPUSH
18658: PPUSH
18659: PPUSH
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
18665: PPUSH
18666: PPUSH
18667: PPUSH
18668: PPUSH
18669: PPUSH
18670: PPUSH
// inBase = false ;
18671: LD_ADDR_VAR 0 15
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// repeat enemyUnitsOnRoad = FilterUnitsInArea ( roadArea , [ [ f_side , 3 ] ] ) ;
18679: LD_ADDR_VAR 0 8
18683: PUSH
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_INT 22
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: PPUSH
18702: CALL_OW 70
18706: ST_TO_ADDR
// cratesOnRoad = GetListOfCratesInArea ( roadArea ) ;
18707: LD_ADDR_VAR 0 9
18711: PUSH
18712: LD_VAR 0 2
18716: PPUSH
18717: CALL_OW 435
18721: ST_TO_ADDR
// attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_mechanic ] , [ f_type , unit_vehicle ] ] ] ) ;
18722: LD_ADDR_VAR 0 12
18726: PUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: LD_INT 50
18734: PUSH
18735: EMPTY
18736: LIST
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: LD_INT 25
18743: PUSH
18744: LD_INT 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 25
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 21
18763: PUSH
18764: LD_INT 2
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PPUSH
18781: CALL_OW 72
18785: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
18786: LD_ADDR_VAR 0 13
18790: PUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: LD_INT 50
18798: PUSH
18799: EMPTY
18800: LIST
18801: PUSH
18802: LD_INT 25
18804: PUSH
18805: LD_INT 4
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 72
18820: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ f_not , [ f_lives , 1000 ] ] ) ;
18821: LD_ADDR_VAR 0 14
18825: PUSH
18826: LD_VAR 0 1
18830: PPUSH
18831: LD_INT 3
18833: PUSH
18834: LD_INT 24
18836: PUSH
18837: LD_INT 1000
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PPUSH
18848: CALL_OW 72
18852: ST_TO_ADDR
// playerUnits = FilterAllUnits ( [ [ f_side , 3 ] ] ) ;
18853: LD_ADDR_VAR 0 6
18857: PUSH
18858: LD_INT 22
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: PPUSH
18871: CALL_OW 69
18875: ST_TO_ADDR
// for unit in UnitFilter ( units , [ [ f_ok ] ] ) do
18876: LD_ADDR_VAR 0 5
18880: PUSH
18881: LD_VAR 0 1
18885: PPUSH
18886: LD_INT 50
18888: PUSH
18889: EMPTY
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: PPUSH
18895: CALL_OW 72
18899: PUSH
18900: FOR_IN
18901: IFFALSE 19648
// begin if attackUnits and medics then
18903: LD_VAR 0 12
18907: PUSH
18908: LD_VAR 0 13
18912: AND
18913: IFFALSE 18980
// begin if damageUnits then
18915: LD_VAR 0 14
18919: IFFALSE 18941
// ComHeal ( medics , damageUnits [ 1 ] ) else
18921: LD_VAR 0 13
18925: PPUSH
18926: LD_VAR 0 14
18930: PUSH
18931: LD_INT 1
18933: ARRAY
18934: PPUSH
18935: CALL_OW 128
18939: GO 18978
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
18941: LD_VAR 0 13
18945: PPUSH
18946: LD_VAR 0 12
18950: PUSH
18951: LD_INT 1
18953: ARRAY
18954: PPUSH
18955: CALL_OW 250
18959: PPUSH
18960: LD_VAR 0 12
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: PPUSH
18969: CALL_OW 251
18973: PPUSH
18974: CALL_OW 111
// end else
18978: GO 19009
// begin if not attackUnits and medics then
18980: LD_VAR 0 12
18984: NOT
18985: PUSH
18986: LD_VAR 0 13
18990: AND
18991: IFFALSE 19009
// attackUnits = attackUnits ^ medics ;
18993: LD_ADDR_VAR 0 12
18997: PUSH
18998: LD_VAR 0 12
19002: PUSH
19003: LD_VAR 0 13
19007: ADD
19008: ST_TO_ADDR
// end ; for i := 1 to cratesOnRoad / 2 do
19009: LD_ADDR_VAR 0 4
19013: PUSH
19014: DOUBLE
19015: LD_INT 1
19017: DEC
19018: ST_TO_ADDR
19019: LD_VAR 0 9
19023: PUSH
19024: LD_INT 2
19026: DIVREAL
19027: PUSH
19028: FOR_TO
19029: IFFALSE 19068
// AddComAttackPlace ( attackUnits , cratesOnRoad [ i ] , cratesOnRoad [ i + 1 ] ) ;
19031: LD_VAR 0 12
19035: PPUSH
19036: LD_VAR 0 9
19040: PUSH
19041: LD_VAR 0 4
19045: ARRAY
19046: PPUSH
19047: LD_VAR 0 9
19051: PUSH
19052: LD_VAR 0 4
19056: PUSH
19057: LD_INT 1
19059: PLUS
19060: ARRAY
19061: PPUSH
19062: CALL_OW 176
19066: GO 19028
19068: POP
19069: POP
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19070: LD_VAR 0 12
19074: PPUSH
19075: LD_INT 21
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 3
19087: PUSH
19088: LD_INT 60
19090: PUSH
19091: EMPTY
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 72
19106: PPUSH
19107: LD_INT 27
19109: PPUSH
19110: LD_INT 34
19112: PPUSH
19113: CALL_OW 111
// wait ( 0 0$01 ) ;
19117: LD_INT 35
19119: PPUSH
19120: CALL_OW 67
// if enemyUnitsOnRoad and UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) then
19124: LD_VAR 0 8
19128: PUSH
19129: LD_VAR 0 12
19133: PPUSH
19134: LD_INT 21
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: LD_INT 60
19149: PUSH
19150: EMPTY
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 72
19165: AND
19166: IFFALSE 19349
// begin for playerUnit in playerUnits do
19168: LD_ADDR_VAR 0 7
19172: PUSH
19173: LD_VAR 0 6
19177: PUSH
19178: FOR_IN
19179: IFFALSE 19345
// begin if Attacks ( playerUnit ) then
19181: LD_VAR 0 7
19185: PPUSH
19186: CALL_OW 320
19190: IFFALSE 19277
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19192: LD_VAR 0 7
19196: PPUSH
19197: CALL_OW 320
19201: PUSH
19202: LD_VAR 0 1
19206: IN
19207: PUSH
19208: LD_VAR 0 7
19212: PPUSH
19213: LD_VAR 0 5
19217: PPUSH
19218: CALL_OW 296
19222: PUSH
19223: LD_INT 13
19225: LESS
19226: AND
19227: IFFALSE 19275
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , playerUnit ) end else
19229: LD_VAR 0 12
19233: PPUSH
19234: LD_INT 21
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: LD_INT 60
19249: PUSH
19250: EMPTY
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 72
19265: PPUSH
19266: LD_VAR 0 7
19270: PPUSH
19271: CALL_OW 115
19275: GO 19343
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , unit ) ;
19277: LD_ADDR_VAR 0 10
19281: PUSH
19282: LD_VAR 0 8
19286: PPUSH
19287: LD_VAR 0 5
19291: PPUSH
19292: CALL_OW 74
19296: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , nearUnit ) ;
19297: LD_VAR 0 12
19301: PPUSH
19302: LD_INT 21
19304: PUSH
19305: LD_INT 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 3
19314: PUSH
19315: LD_INT 60
19317: PUSH
19318: EMPTY
19319: LIST
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 72
19333: PPUSH
19334: LD_VAR 0 10
19338: PPUSH
19339: CALL_OW 115
// end ; end ;
19343: GO 19178
19345: POP
19346: POP
// end else
19347: GO 19396
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_human ] , [ f_not , [ f_hastask ] ] ] ) , 27 , 34 ) ;
19349: LD_VAR 0 12
19353: PPUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 3
19366: PUSH
19367: LD_INT 60
19369: PUSH
19370: EMPTY
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 72
19385: PPUSH
19386: LD_INT 27
19388: PPUSH
19389: LD_INT 34
19391: PPUSH
19392: CALL_OW 111
// if enemyUnitsOnRoad then
19396: LD_VAR 0 8
19400: IFFALSE 19584
// begin for playerUnit in playerUnits do
19402: LD_ADDR_VAR 0 7
19406: PUSH
19407: LD_VAR 0 6
19411: PUSH
19412: FOR_IN
19413: IFFALSE 19580
// begin if Attacks ( playerUnit ) then
19415: LD_VAR 0 7
19419: PPUSH
19420: CALL_OW 320
19424: IFFALSE 19497
// begin if Attacks ( playerUnit ) in units and GetDistUnits ( playerUnit , unit ) < 13 then
19426: LD_VAR 0 7
19430: PPUSH
19431: CALL_OW 320
19435: PUSH
19436: LD_VAR 0 1
19440: IN
19441: PUSH
19442: LD_VAR 0 7
19446: PPUSH
19447: LD_VAR 0 5
19451: PPUSH
19452: CALL_OW 296
19456: PUSH
19457: LD_INT 13
19459: LESS
19460: AND
19461: IFFALSE 19495
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , playerUnit ) end else
19463: LD_VAR 0 12
19467: PPUSH
19468: LD_INT 21
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: EMPTY
19479: LIST
19480: PPUSH
19481: CALL_OW 72
19485: PPUSH
19486: LD_VAR 0 7
19490: PPUSH
19491: CALL_OW 115
19495: GO 19578
// begin nearUnit = NearestUnitToUnit ( enemyUnitsOnRoad , UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
19497: LD_ADDR_VAR 0 10
19501: PUSH
19502: LD_VAR 0 8
19506: PPUSH
19507: LD_VAR 0 12
19511: PPUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 50
19524: PUSH
19525: EMPTY
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PPUSH
19532: CALL_OW 72
19536: PUSH
19537: LD_INT 1
19539: ARRAY
19540: PPUSH
19541: CALL_OW 74
19545: ST_TO_ADDR
// ComAttackUnit ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , nearUnit ) ;
19546: LD_VAR 0 12
19550: PPUSH
19551: LD_INT 21
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: EMPTY
19562: LIST
19563: PPUSH
19564: CALL_OW 72
19568: PPUSH
19569: LD_VAR 0 10
19573: PPUSH
19574: CALL_OW 115
// end ; end ;
19578: GO 19412
19580: POP
19581: POP
// end else
19582: GO 19617
// ComMoveXY ( UnitFilter ( attackUnits , [ [ f_type , unit_vehicle ] ] ) , 27 , 34 ) ;
19584: LD_VAR 0 12
19588: PPUSH
19589: LD_INT 21
19591: PUSH
19592: LD_INT 2
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: EMPTY
19600: LIST
19601: PPUSH
19602: CALL_OW 72
19606: PPUSH
19607: LD_INT 27
19609: PPUSH
19610: LD_INT 34
19612: PPUSH
19613: CALL_OW 111
// if GetDistUnitXY ( unit , 27 , 34 ) < 5 then
19617: LD_VAR 0 5
19621: PPUSH
19622: LD_INT 27
19624: PPUSH
19625: LD_INT 34
19627: PPUSH
19628: CALL_OW 297
19632: PUSH
19633: LD_INT 5
19635: LESS
19636: IFFALSE 19646
// inBase = true ;
19638: LD_ADDR_VAR 0 15
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// end ;
19646: GO 18900
19648: POP
19649: POP
// wait ( 0 0$1 ) ;
19650: LD_INT 35
19652: PPUSH
19653: CALL_OW 67
// until UnitFilter ( units , [ f_ok ] ) = 0 or inBase ;
19657: LD_VAR 0 1
19661: PPUSH
19662: LD_INT 50
19664: PUSH
19665: EMPTY
19666: LIST
19667: PPUSH
19668: CALL_OW 72
19672: PUSH
19673: LD_INT 0
19675: EQUAL
19676: PUSH
19677: LD_VAR 0 15
19681: OR
19682: IFFALSE 18679
// ComMoveXY ( UnitFilter ( units , [ [ f_type , unit_human ] , [ f_ok ] ] ) , 27 , 34 ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 21
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 50
19701: PUSH
19702: EMPTY
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 72
19713: PPUSH
19714: LD_INT 27
19716: PPUSH
19717: LD_INT 34
19719: PPUSH
19720: CALL_OW 111
// for i := 1 to units do
19724: LD_ADDR_VAR 0 4
19728: PUSH
19729: DOUBLE
19730: LD_INT 1
19732: DEC
19733: ST_TO_ADDR
19734: LD_VAR 0 1
19738: PUSH
19739: FOR_TO
19740: IFFALSE 19775
// if IsOk ( units [ i ] ) then
19742: LD_VAR 0 1
19746: PUSH
19747: LD_VAR 0 4
19751: ARRAY
19752: PPUSH
19753: CALL_OW 302
19757: IFFALSE 19773
// americanTroopsArriveOmicronCounter = americanTroopsArriveOmicronCounter + 1 ;
19759: LD_ADDR_EXP 12
19763: PUSH
19764: LD_EXP 12
19768: PUSH
19769: LD_INT 1
19771: PLUS
19772: ST_TO_ADDR
19773: GO 19739
19775: POP
19776: POP
// amSupportTroops = amSupportTroops diff units ;
19777: LD_ADDR_EXP 83
19781: PUSH
19782: LD_EXP 83
19786: PUSH
19787: LD_VAR 0 1
19791: DIFF
19792: ST_TO_ADDR
// newBase = amBase ;
19793: LD_ADDR_VAR 0 16
19797: PUSH
19798: LD_EXP 85
19802: ST_TO_ADDR
// newBase = newBase ^ UnitFilter ( units , [ f_ok ] ) ;
19803: LD_ADDR_VAR 0 16
19807: PUSH
19808: LD_VAR 0 16
19812: PUSH
19813: LD_VAR 0 1
19817: PPUSH
19818: LD_INT 50
19820: PUSH
19821: EMPTY
19822: LIST
19823: PPUSH
19824: CALL_OW 72
19828: ADD
19829: ST_TO_ADDR
// amBase = newBase ;
19830: LD_ADDR_EXP 85
19834: PUSH
19835: LD_VAR 0 16
19839: ST_TO_ADDR
// end ; end_of_file
19840: LD_VAR 0 3
19844: RET
// export function Lose_Burlak ; begin
19845: LD_INT 0
19847: PPUSH
// YouLost ( Burlak ) ;
19848: LD_STRING Burlak
19850: PPUSH
19851: CALL_OW 104
// end ;
19855: LD_VAR 0 1
19859: RET
// export function Lose_Omicron ; begin
19860: LD_INT 0
19862: PPUSH
// YouLost ( Omicron ) ;
19863: LD_STRING Omicron
19865: PPUSH
19866: CALL_OW 104
// end ;
19870: LD_VAR 0 1
19874: RET
// export function Lose_Vehicles ; begin
19875: LD_INT 0
19877: PPUSH
// YouLost ( Vehicles ) ;
19878: LD_STRING Vehicles
19880: PPUSH
19881: CALL_OW 104
// end ;
19885: LD_VAR 0 1
19889: RET
// export function Lose_SelfAttack ; begin
19890: LD_INT 0
19892: PPUSH
// YouLost ( SelfAttack ) ;
19893: LD_STRING SelfAttack
19895: PPUSH
19896: CALL_OW 104
// end ;
19900: LD_VAR 0 1
19904: RET
// export function Lose_Delay ; begin
19905: LD_INT 0
19907: PPUSH
// YouLost ( Delay ) ;
19908: LD_STRING Delay
19910: PPUSH
19911: CALL_OW 104
// end ; end_of_file
19915: LD_VAR 0 1
19919: RET
// export function FinishMission ; begin
19920: LD_INT 0
19922: PPUSH
// SetRewards ;
19923: CALL 19944 0 0
// SavePlayerCharacters ;
19927: CALL 20158 0 0
// SaveGlobalVariables ;
19931: CALL 20487 0 0
// YouWin ;
19935: CALL_OW 103
// end ;
19939: LD_VAR 0 1
19943: RET
// function SetRewards ; var unitsToReward ; begin
19944: LD_INT 0
19946: PPUSH
19947: PPUSH
// if produceMoreVehicles then
19948: LD_EXP 16
19952: IFFALSE 19966
// AddMedal ( Surplus , 1 ) else
19954: LD_STRING Surplus
19956: PPUSH
19957: LD_INT 1
19959: PPUSH
19960: CALL_OW 101
19964: GO 19996
// if produceOnlyForYou then
19966: LD_EXP 17
19970: IFFALSE 19985
// AddMedal ( Surplus , - 1 ) else
19972: LD_STRING Surplus
19974: PPUSH
19975: LD_INT 1
19977: NEG
19978: PPUSH
19979: CALL_OW 101
19983: GO 19996
// AddMedal ( Surplus , - 2 ) ;
19985: LD_STRING Surplus
19987: PPUSH
19988: LD_INT 2
19990: NEG
19991: PPUSH
19992: CALL_OW 101
// if americanTroopsArriveOmicronCounter < maxAmericanTroopsIgnore then
19996: LD_EXP 12
20000: PUSH
20001: LD_EXP 46
20005: LESS
20006: IFFALSE 20020
// AddMedal ( PreventReinforcements , 1 ) else
20008: LD_STRING PreventReinforcements
20010: PPUSH
20011: LD_INT 1
20013: PPUSH
20014: CALL_OW 101
20018: GO 20031
// AddMedal ( PreventReinforcements , - 1 ) ;
20020: LD_STRING PreventReinforcements
20022: PPUSH
20023: LD_INT 1
20025: NEG
20026: PPUSH
20027: CALL_OW 101
// if scholtzeSaved and IsOK ( Scholtze ) then
20031: LD_EXP 7
20035: PUSH
20036: LD_EXP 54
20040: PPUSH
20041: CALL_OW 302
20045: AND
20046: IFFALSE 20060
// AddMedal ( Scholtze , 1 ) else
20048: LD_STRING Scholtze
20050: PPUSH
20051: LD_INT 1
20053: PPUSH
20054: CALL_OW 101
20058: GO 20071
// AddMedal ( Scholtze , - 1 ) ;
20060: LD_STRING Scholtze
20062: PPUSH
20063: LD_INT 1
20065: NEG
20066: PPUSH
20067: CALL_OW 101
// GiveMedals ( Main ) ;
20071: LD_STRING Main
20073: PPUSH
20074: CALL_OW 102
// unitsToReward = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
20078: LD_ADDR_VAR 0 2
20082: PUSH
20083: LD_INT 22
20085: PUSH
20086: LD_INT 3
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 21
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PPUSH
20107: CALL_OW 69
20111: ST_TO_ADDR
// unitsToReward = unitsToReward ^ survivorsArabianAttack ;
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_VAR 0 2
20121: PUSH
20122: LD_EXP 78
20126: ADD
20127: ST_TO_ADDR
// unitsToReward = unitsToReward diff Popov ;
20128: LD_ADDR_VAR 0 2
20132: PUSH
20133: LD_VAR 0 2
20137: PUSH
20138: LD_EXP 61
20142: DIFF
20143: ST_TO_ADDR
// RewardPeople ( unitsToReward ) ;
20144: LD_VAR 0 2
20148: PPUSH
20149: CALL_OW 43
// end ;
20153: LD_VAR 0 1
20157: RET
// function SavePlayerCharacters ; var othersYour , othersKirov ; begin
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
20163: LD_EXP 48
20167: PPUSH
20168: LD_STRING Burlak
20170: PPUSH
20171: LD_INT 3
20173: PPUSH
20174: CALL 7241 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
20178: LD_EXP 49
20182: PPUSH
20183: LD_STRING Gnyevko
20185: PPUSH
20186: LD_INT 3
20188: PPUSH
20189: CALL 7241 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
20193: LD_EXP 51
20197: PPUSH
20198: LD_STRING Kovalyuk
20200: PPUSH
20201: LD_INT 3
20203: PPUSH
20204: CALL 7241 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
20208: LD_EXP 50
20212: PPUSH
20213: LD_STRING Kirilenkova
20215: PPUSH
20216: LD_INT 3
20218: PPUSH
20219: CALL 7241 0 3
// ExtSaveCharacter ( Scholtze , Scholtze , 3 ) ;
20223: LD_EXP 54
20227: PPUSH
20228: LD_STRING Scholtze
20230: PPUSH
20231: LD_INT 3
20233: PPUSH
20234: CALL 7241 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
20238: LD_EXP 52
20242: PPUSH
20243: LD_STRING Belkov
20245: PPUSH
20246: LD_INT 3
20248: PPUSH
20249: CALL 7241 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
20253: LD_EXP 53
20257: PPUSH
20258: LD_STRING Belkov2
20260: PPUSH
20261: LD_INT 3
20263: PPUSH
20264: CALL 7241 0 3
// ExtSaveCharacter ( Belkov , Belkov , 6 ) ;
20268: LD_EXP 52
20272: PPUSH
20273: LD_STRING Belkov
20275: PPUSH
20276: LD_INT 6
20278: PPUSH
20279: CALL 7241 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 6 ) ;
20283: LD_EXP 53
20287: PPUSH
20288: LD_STRING Belkov2
20290: PPUSH
20291: LD_INT 6
20293: PPUSH
20294: CALL 7241 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova , Scholtze ] ;
20298: LD_ADDR_VAR 0 2
20302: PUSH
20303: LD_INT 22
20305: PUSH
20306: LD_INT 3
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 21
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 50
20325: PUSH
20326: EMPTY
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PPUSH
20334: CALL_OW 69
20338: PUSH
20339: LD_EXP 48
20343: PUSH
20344: LD_EXP 49
20348: PUSH
20349: LD_EXP 52
20353: PUSH
20354: LD_EXP 53
20358: PUSH
20359: LD_EXP 51
20363: PUSH
20364: LD_EXP 50
20368: PUSH
20369: LD_EXP 54
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: DIFF
20383: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
20384: LD_VAR 0 2
20388: PPUSH
20389: LD_STRING other_survivors
20391: PPUSH
20392: LD_INT 3
20394: PPUSH
20395: CALL 7297 0 3
// othersKirov = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Kurin , Popov , Belkov , Belkov2 ] ;
20399: LD_ADDR_VAR 0 3
20403: PUSH
20404: LD_INT 22
20406: PUSH
20407: LD_INT 6
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 21
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: LD_INT 50
20426: PUSH
20427: EMPTY
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: PPUSH
20435: CALL_OW 69
20439: PUSH
20440: LD_EXP 60
20444: PUSH
20445: LD_EXP 61
20449: PUSH
20450: LD_EXP 52
20454: PUSH
20455: LD_EXP 53
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: DIFF
20466: ST_TO_ADDR
// ExtSaveCharacters ( othersKirov , other_kirov , 6 ) ;
20467: LD_VAR 0 3
20471: PPUSH
20472: LD_STRING other_kirov
20474: PPUSH
20475: LD_INT 6
20477: PPUSH
20478: CALL 7297 0 3
// end ;
20482: LD_VAR 0 1
20486: RET
// function SaveGlobalVariables ; begin
20487: LD_INT 0
20489: PPUSH
// SaveVariable ( kurinOpinion , 03_KurinOpinion_1 ) ;
20490: LD_EXP 26
20494: PPUSH
20495: LD_STRING 03_KurinOpinion_1
20497: PPUSH
20498: CALL_OW 39
// end ; end_of_file
20502: LD_VAR 0 1
20506: RET
// export function CustomEvent ( event ) ; begin
20507: LD_INT 0
20509: PPUSH
// end ;
20510: LD_VAR 0 2
20514: RET
// on Command ( com ) do var i , j , temp , order , x , y , building ;
20515: LD_INT 0
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
20523: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
20524: LD_ADDR_VAR 0 2
20528: PUSH
20529: LD_INT 22
20531: PUSH
20532: LD_INT 3
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 21
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 69
20557: PUSH
20558: FOR_IN
20559: IFFALSE 20756
// if GetTaskList ( i ) > 0 then
20561: LD_VAR 0 2
20565: PPUSH
20566: CALL_OW 437
20570: PUSH
20571: LD_INT 0
20573: GREATER
20574: IFFALSE 20754
// for j = 1 to GetTaskList ( i ) do
20576: LD_ADDR_VAR 0 3
20580: PUSH
20581: DOUBLE
20582: LD_INT 1
20584: DEC
20585: ST_TO_ADDR
20586: LD_VAR 0 2
20590: PPUSH
20591: CALL_OW 437
20595: PUSH
20596: FOR_TO
20597: IFFALSE 20752
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
20599: LD_ADDR_VAR 0 4
20603: PUSH
20604: LD_VAR 0 2
20608: PPUSH
20609: CALL_OW 437
20613: PUSH
20614: LD_VAR 0 3
20618: ARRAY
20619: PUSH
20620: LD_INT 4
20622: ARRAY
20623: ST_TO_ADDR
// building = GetTaskList ( i ) [ j ] [ 5 ] ;
20624: LD_ADDR_VAR 0 8
20628: PUSH
20629: LD_VAR 0 2
20633: PPUSH
20634: CALL_OW 437
20638: PUSH
20639: LD_VAR 0 3
20643: ARRAY
20644: PUSH
20645: LD_INT 5
20647: ARRAY
20648: ST_TO_ADDR
// x = GetTaskList ( i ) [ j ] [ 2 ] ;
20649: LD_ADDR_VAR 0 6
20653: PUSH
20654: LD_VAR 0 2
20658: PPUSH
20659: CALL_OW 437
20663: PUSH
20664: LD_VAR 0 3
20668: ARRAY
20669: PUSH
20670: LD_INT 2
20672: ARRAY
20673: ST_TO_ADDR
// y = GetTaskList ( i ) [ j ] [ 3 ] ;
20674: LD_ADDR_VAR 0 7
20678: PUSH
20679: LD_VAR 0 2
20683: PPUSH
20684: CALL_OW 437
20688: PUSH
20689: LD_VAR 0 3
20693: ARRAY
20694: PUSH
20695: LD_INT 3
20697: ARRAY
20698: ST_TO_ADDR
// if ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = < ) then
20699: LD_VAR 0 4
20703: PPUSH
20704: CALL_OW 255
20708: PUSH
20709: LD_INT 6
20711: EQUAL
20712: PUSH
20713: LD_VAR 0 2
20717: PPUSH
20718: CALL_OW 437
20722: PUSH
20723: LD_VAR 0 3
20727: ARRAY
20728: PUSH
20729: LD_INT 1
20731: ARRAY
20732: PUSH
20733: LD_STRING <
20735: EQUAL
20736: AND
20737: IFFALSE 20750
// SetTaskList ( i , [ ] ) ;
20739: LD_VAR 0 2
20743: PPUSH
20744: EMPTY
20745: PPUSH
20746: CALL_OW 446
// end ;
20750: GO 20596
20752: POP
20753: POP
20754: GO 20558
20756: POP
20757: POP
// end ;
20758: PPOPN 8
20760: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
20761: LD_VAR 0 2
20765: PUSH
20766: LD_INT 6
20768: EQUAL
20769: IFFALSE 20783
// SetSide ( building , 6 ) ;
20771: LD_VAR 0 1
20775: PPUSH
20776: LD_INT 6
20778: PPUSH
20779: CALL_OW 235
// end ;
20783: PPOPN 3
20785: END
// on BuildingComplete ( building ) do var diffUnits , canTakeUnits ;
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
// begin diffUnits = [ ] ;
20790: LD_ADDR_VAR 0 2
20794: PUSH
20795: EMPTY
20796: ST_TO_ADDR
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and IsInArea ( building , SecondBurlakBase ) then
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL_OW 255
20806: PUSH
20807: LD_INT 3
20809: EQUAL
20810: PUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 266
20820: PUSH
20821: LD_INT 0
20823: EQUAL
20824: AND
20825: PUSH
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_INT 21
20833: PPUSH
20834: CALL_OW 308
20838: AND
20839: IFFALSE 20853
// SetBName ( building , kagan ) ;
20841: LD_VAR 0 1
20845: PPUSH
20846: LD_STRING kagan
20848: PPUSH
20849: CALL_OW 500
// if GetSide ( building ) = 6 then
20853: LD_VAR 0 1
20857: PPUSH
20858: CALL_OW 255
20862: PUSH
20863: LD_INT 6
20865: EQUAL
20866: IFFALSE 21047
// begin if GetBType ( building ) = b_ext_noncombat then
20868: LD_VAR 0 1
20872: PPUSH
20873: CALL_OW 266
20877: PUSH
20878: LD_INT 19
20880: EQUAL
20881: IFFALSE 20887
// begin SpawnKirovSupport ;
20883: CALL 4514 0 0
// end ; if GetBType ( building ) = b_depot then
20887: LD_VAR 0 1
20891: PPUSH
20892: CALL_OW 266
20896: PUSH
20897: LD_INT 0
20899: EQUAL
20900: IFFALSE 20946
// begin kirovOilDepot = building ;
20902: LD_ADDR_EXP 67
20906: PUSH
20907: LD_VAR 0 1
20911: ST_TO_ADDR
// SetResourceType ( GetBase ( kirovOilDepot ) , mat_oil , 3000 ) ;
20912: LD_EXP 67
20916: PPUSH
20917: CALL_OW 274
20921: PPUSH
20922: LD_INT 2
20924: PPUSH
20925: LD_INT 3000
20927: PPUSH
20928: CALL_OW 277
// ComEnterUnit ( Grishko , building ) ;
20932: LD_EXP 81
20936: PPUSH
20937: LD_VAR 0 1
20941: PPUSH
20942: CALL_OW 120
// end ; if ( GetBType ( building ) = b_breastwork or GetBType ( building ) = b_armoury ) and IsInArea ( building , SecondKurinBase ) then
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 266
20955: PUSH
20956: LD_INT 31
20958: EQUAL
20959: PUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 266
20969: PUSH
20970: LD_INT 4
20972: EQUAL
20973: OR
20974: PUSH
20975: LD_VAR 0 1
20979: PPUSH
20980: LD_INT 20
20982: PPUSH
20983: CALL_OW 308
20987: AND
20988: IFFALSE 21047
// ComEnterUnit ( UnitFilter ( secondBaseTeam , [ [ f_class , class_soldier ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) [ 1 ] , building ) ;
20990: LD_EXP 77
20994: PPUSH
20995: LD_INT 25
20997: PUSH
20998: LD_INT 1
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 56
21007: PUSH
21008: EMPTY
21009: LIST
21010: PUSH
21011: LD_INT 3
21013: PUSH
21014: LD_INT 60
21016: PUSH
21017: EMPTY
21018: LIST
21019: PUSH
21020: EMPTY
21021: LIST
21022: LIST
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: LIST
21028: PPUSH
21029: CALL_OW 72
21033: PUSH
21034: LD_INT 1
21036: ARRAY
21037: PPUSH
21038: LD_VAR 0 1
21042: PPUSH
21043: CALL_OW 120
// end ; end ;
21047: PPOPN 3
21049: END
// on UpgradeComplete ( building ) do var i , tmp ;
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_factory and not dialog_workshop then
21054: LD_VAR 0 1
21058: PPUSH
21059: CALL_OW 255
21063: PUSH
21064: LD_INT 3
21066: EQUAL
21067: PUSH
21068: LD_VAR 0 1
21072: PPUSH
21073: CALL_OW 266
21077: PUSH
21078: LD_INT 3
21080: EQUAL
21081: AND
21082: PUSH
21083: LD_EXP 8
21087: NOT
21088: AND
21089: IFFALSE 21100
// Dial_UpgradeWorkshop ( building ) ;
21091: LD_VAR 0 1
21095: PPUSH
21096: CALL 24198 0 1
// end ;
21100: PPOPN 3
21102: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
21103: LD_VAR 0 1
21107: PUSH
21108: LD_EXP 48
21112: EQUAL
21113: IFFALSE 21119
// Lose_Burlak ;
21115: CALL 19845 0 0
// if un = beriaDepot and not canDestroyBeriaBase then
21119: LD_VAR 0 1
21123: PUSH
21124: LD_EXP 59
21128: EQUAL
21129: PUSH
21130: LD_EXP 28
21134: NOT
21135: AND
21136: IFFALSE 21142
// Lose_Omicron ;
21138: CALL 19860 0 0
// end ;
21142: PPOPN 1
21144: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
21145: LD_VAR 0 1
21149: PUSH
21150: LD_INT 3
21152: EQUAL
21153: PUSH
21154: LD_VAR 0 2
21158: PUSH
21159: LD_INT 6
21161: EQUAL
21162: AND
21163: IFFALSE 21169
// Lose_SelfAttack ;
21165: CALL 19890 0 0
// end ;
21169: PPOPN 2
21171: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 6 then
21172: LD_VAR 0 1
21176: PPUSH
21177: CALL_OW 255
21181: PUSH
21182: LD_INT 6
21184: EQUAL
21185: IFFALSE 21350
// begin if GetWeapon ( vehicle ) = ru_cargo_bay and not kirovTransportCargo then
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 264
21196: PUSH
21197: LD_INT 51
21199: EQUAL
21200: PUSH
21201: LD_EXP 73
21205: NOT
21206: AND
21207: IFFALSE 21221
// kirovTransportCargo = vehicle else
21209: LD_ADDR_EXP 73
21213: PUSH
21214: LD_VAR 0 1
21218: ST_TO_ADDR
21219: GO 21293
// begin if GetWeapon ( vehicle ) = ru_cargo_bay then
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 264
21230: PUSH
21231: LD_INT 51
21233: EQUAL
21234: IFFALSE 21293
// begin ComTransport ( vehicle , kirovOilDepot , mat_oil ) ;
21236: LD_VAR 0 1
21240: PPUSH
21241: LD_EXP 67
21245: PPUSH
21246: LD_INT 2
21248: PPUSH
21249: CALL_OW 151
// AddComMoveXY ( vehicle , 137 , 99 ) ;
21253: LD_VAR 0 1
21257: PPUSH
21258: LD_INT 137
21260: PPUSH
21261: LD_INT 99
21263: PPUSH
21264: CALL_OW 171
// AddComHold ( vehicle ) ;
21268: LD_VAR 0 1
21272: PPUSH
21273: CALL_OW 200
// kirovAttackCargo = kirovAttackCargo ^ vehicle ;
21277: LD_ADDR_EXP 74
21281: PUSH
21282: LD_EXP 74
21286: PUSH
21287: LD_VAR 0 1
21291: ADD
21292: ST_TO_ADDR
// end ; end ; if GetWeapon ( vehicle ) in [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] then
21293: LD_VAR 0 1
21297: PPUSH
21298: CALL_OW 264
21302: PUSH
21303: LD_INT 42
21305: PUSH
21306: LD_INT 43
21308: PUSH
21309: LD_INT 44
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: IN
21317: IFFALSE 21350
// begin kirovAttackVehicles = kirovAttackVehicles ^ vehicle ;
21319: LD_ADDR_EXP 75
21323: PUSH
21324: LD_EXP 75
21328: PUSH
21329: LD_VAR 0 1
21333: ADD
21334: ST_TO_ADDR
// ComMoveXY ( vehicle , 137 , 99 ) ;
21335: LD_VAR 0 1
21339: PPUSH
21340: LD_INT 137
21342: PPUSH
21343: LD_INT 99
21345: PPUSH
21346: CALL_OW 111
// end ; end ; end ;
21350: PPOPN 2
21352: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin if side = 6 and not old in kirovCanCaptureVehicles then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 6
21360: EQUAL
21361: PUSH
21362: LD_VAR 0 2
21366: PUSH
21367: LD_EXP 30
21371: IN
21372: NOT
21373: AND
21374: IFFALSE 21397
// begin ComExitVehicle ( capturing_unit ) ;
21376: LD_VAR 0 4
21380: PPUSH
21381: CALL_OW 121
// SetSide ( new , 6 ) ;
21385: LD_VAR 0 1
21389: PPUSH
21390: LD_INT 6
21392: PPUSH
21393: CALL_OW 235
// end ; end ;
21397: PPOPN 4
21399: END
// on EnterVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 6 and meetNearOmicronBase then
21400: LD_VAR 0 1
21404: PPUSH
21405: CALL_OW 255
21409: PUSH
21410: LD_INT 6
21412: EQUAL
21413: PUSH
21414: LD_EXP 19
21418: AND
21419: IFFALSE 21447
// begin wait ( 0 0$2 ) ;
21421: LD_INT 70
21423: PPUSH
21424: CALL_OW 67
// AddComAgressiveMove ( vehicle , 78 , 39 ) ;
21428: LD_VAR 0 1
21432: PPUSH
21433: LD_INT 78
21435: PPUSH
21436: LD_INT 39
21438: PPUSH
21439: CALL_OW 174
// KirovAttackOmicron ;
21443: CALL 17736 0 0
// end ; end ;
21447: PPOPN 2
21449: END
// on ResearchComplete ( research , building ) do begin if GetSide ( building ) = 6 and research = tech_gun then
21450: LD_VAR 0 2
21454: PPUSH
21455: CALL_OW 255
21459: PUSH
21460: LD_INT 6
21462: EQUAL
21463: PUSH
21464: LD_VAR 0 1
21468: PUSH
21469: LD_INT 39
21471: EQUAL
21472: AND
21473: IFFALSE 21534
// begin MountWeaponTurrent ;
21475: CALL 17200 0 0
// wait ( 3 3$30 ) ;
21479: LD_INT 7350
21481: PPUSH
21482: CALL_OW 67
// KirovProduceVehicles ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
21486: LD_INT 22
21488: PUSH
21489: LD_INT 6
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 21
21498: PUSH
21499: LD_INT 3
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 30
21508: PUSH
21509: LD_INT 3
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: PPUSH
21521: CALL_OW 69
21525: PUSH
21526: LD_INT 1
21528: ARRAY
21529: PPUSH
21530: CALL 17266 0 1
// end ; end ; end_of_file
21534: PPOPN 2
21536: END
// export function MissionIntro ; var i , unit , freeSlots , tmp ; begin
21537: LD_INT 0
21539: PPUSH
21540: PPUSH
21541: PPUSH
21542: PPUSH
21543: PPUSH
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21544: LD_EXP 48
21548: PUSH
21549: LD_EXP 60
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 87
// ComTurnUnit ( [ Burlak , BelkovDialog ] , Kurin ) ;
21562: LD_EXP 48
21566: PUSH
21567: LD_EXP 62
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PPUSH
21576: LD_EXP 60
21580: PPUSH
21581: CALL_OW 119
// ComTurnUnit ( Kurin , Burlak ) ;
21585: LD_EXP 60
21589: PPUSH
21590: LD_EXP 48
21594: PPUSH
21595: CALL_OW 119
// RevealFogArea ( 3 , RevealMapPartArea ) ;
21599: LD_INT 3
21601: PPUSH
21602: LD_INT 24
21604: PPUSH
21605: CALL_OW 332
// if not IsPlaced ( Belkov ) and not IsPlaced ( Belkov2 ) then
21609: LD_EXP 52
21613: PPUSH
21614: CALL_OW 305
21618: NOT
21619: PUSH
21620: LD_EXP 53
21624: PPUSH
21625: CALL_OW 305
21629: NOT
21630: AND
21631: IFFALSE 21719
// begin Say ( Kurin , D1a-Kur-1 ) ;
21633: LD_EXP 60
21637: PPUSH
21638: LD_STRING D1a-Kur-1
21640: PPUSH
21641: CALL_OW 88
// Say ( Burlak , D1a-Bur-1 ) ;
21645: LD_EXP 48
21649: PPUSH
21650: LD_STRING D1a-Bur-1
21652: PPUSH
21653: CALL_OW 88
// Say ( Kurin , D1a-Kur-2 ) ;
21657: LD_EXP 60
21661: PPUSH
21662: LD_STRING D1a-Kur-2
21664: PPUSH
21665: CALL_OW 88
// if platonovOpinion <= 1 then
21669: LD_EXP 27
21673: PUSH
21674: LD_INT 1
21676: LESSEQUAL
21677: IFFALSE 21693
// Say ( Kurin , D1a-Kur-2a ) else
21679: LD_EXP 60
21683: PPUSH
21684: LD_STRING D1a-Kur-2a
21686: PPUSH
21687: CALL_OW 88
21691: GO 21705
// Say ( Kurin , D1a-Kur-2b ) ;
21693: LD_EXP 60
21697: PPUSH
21698: LD_STRING D1a-Kur-2b
21700: PPUSH
21701: CALL_OW 88
// Say ( Burlak , D1a-Bur-2 ) ;
21705: LD_EXP 48
21709: PPUSH
21710: LD_STRING D1a-Bur-2
21712: PPUSH
21713: CALL_OW 88
// end else
21717: GO 21755
// begin Say ( Kurin , D1b-Kur-1 ) ;
21719: LD_EXP 60
21723: PPUSH
21724: LD_STRING D1b-Kur-1
21726: PPUSH
21727: CALL_OW 88
// Say ( BelkovDialog , D1b-Bel-1 ) ;
21731: LD_EXP 62
21735: PPUSH
21736: LD_STRING D1b-Bel-1
21738: PPUSH
21739: CALL_OW 88
// Say ( Kurin , D1b-Kur-2 ) ;
21743: LD_EXP 60
21747: PPUSH
21748: LD_STRING D1b-Kur-2
21750: PPUSH
21751: CALL_OW 88
// end ; Say ( Kurin , D2-Kur-1 ) ;
21755: LD_EXP 60
21759: PPUSH
21760: LD_STRING D2-Kur-1
21762: PPUSH
21763: CALL_OW 88
// Say ( Burlak , D2-Bur-1 ) ;
21767: LD_EXP 48
21771: PPUSH
21772: LD_STRING D2-Bur-1
21774: PPUSH
21775: CALL_OW 88
// Say ( Kurin , D2-Kur-2 ) ;
21779: LD_EXP 60
21783: PPUSH
21784: LD_STRING D2-Kur-2
21786: PPUSH
21787: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
21791: LD_EXP 48
21795: PPUSH
21796: LD_STRING D2-Bur-2
21798: PPUSH
21799: CALL_OW 88
// Say ( Kurin , D2-Kur-3 ) ;
21803: LD_EXP 60
21807: PPUSH
21808: LD_STRING D2-Kur-3
21810: PPUSH
21811: CALL_OW 88
// SetAttitude ( 1 , 6 , att_friend , true ) ;
21815: LD_INT 1
21817: PPUSH
21818: LD_INT 6
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: LD_INT 1
21826: PPUSH
21827: CALL_OW 80
// PrepareAmericansMissionIntro ;
21831: CALL 5575 0 0
// ComMoveXY ( amIntroUnits , 28 , 35 ) ;
21835: LD_EXP 82
21839: PPUSH
21840: LD_INT 28
21842: PPUSH
21843: LD_INT 35
21845: PPUSH
21846: CALL_OW 111
// CenterOnXY ( 93 , 36 ) ;
21850: LD_INT 93
21852: PPUSH
21853: LD_INT 36
21855: PPUSH
21856: CALL_OW 84
// PlaceSeeing ( 93 , 36 , 3 , - 9 ) ;
21860: LD_INT 93
21862: PPUSH
21863: LD_INT 36
21865: PPUSH
21866: LD_INT 3
21868: PPUSH
21869: LD_INT 9
21871: NEG
21872: PPUSH
21873: CALL_OW 330
// wait ( 0 0$6 ) ;
21877: LD_INT 210
21879: PPUSH
21880: CALL_OW 67
// CenterOnUnits ( Popov ) ;
21884: LD_EXP 61
21888: PPUSH
21889: CALL_OW 85
// wait ( 0 0$1 ) ;
21893: LD_INT 35
21895: PPUSH
21896: CALL_OW 67
// SayRadio ( Popov , D2-Pop-3 ) ;
21900: LD_EXP 61
21904: PPUSH
21905: LD_STRING D2-Pop-3
21907: PPUSH
21908: CALL_OW 94
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
21912: LD_EXP 48
21916: PUSH
21917: LD_EXP 60
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 87
// wait ( 0 0$1 ) ;
21930: LD_INT 35
21932: PPUSH
21933: CALL_OW 67
// for unit in amIntroUnits do
21937: LD_ADDR_VAR 0 3
21941: PUSH
21942: LD_EXP 82
21946: PUSH
21947: FOR_IN
21948: IFFALSE 21961
// RemoveUnit ( unit ) ;
21950: LD_VAR 0 3
21954: PPUSH
21955: CALL_OW 64
21959: GO 21947
21961: POP
21962: POP
// Say ( Kurin , D2-Kur-4 ) ;
21963: LD_EXP 60
21967: PPUSH
21968: LD_STRING D2-Kur-4
21970: PPUSH
21971: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
21975: LD_EXP 48
21979: PPUSH
21980: LD_STRING D2-Bur-4
21982: PPUSH
21983: CALL_OW 88
// Say ( Kurin , D2-Kur-5 ) ;
21987: LD_EXP 60
21991: PPUSH
21992: LD_STRING D2-Kur-5
21994: PPUSH
21995: CALL_OW 88
// Say ( Burlak , D2-Bur-5 ) ;
21999: LD_EXP 48
22003: PPUSH
22004: LD_STRING D2-Bur-5
22006: PPUSH
22007: CALL_OW 88
// Say ( Kurin , D2-Kur-6 ) ;
22011: LD_EXP 60
22015: PPUSH
22016: LD_STRING D2-Kur-6
22018: PPUSH
22019: CALL_OW 88
// if IsPlaced ( Gnyevko ) then
22023: LD_EXP 49
22027: PPUSH
22028: CALL_OW 305
22032: IFFALSE 22048
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22034: LD_ADDR_EXP 38
22038: PUSH
22039: LD_EXP 38
22043: PUSH
22044: LD_INT 1
22046: MINUS
22047: ST_TO_ADDR
// if IsPlaced ( Kovalyuk ) then
22048: LD_EXP 51
22052: PPUSH
22053: CALL_OW 305
22057: IFFALSE 22073
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22059: LD_ADDR_EXP 38
22063: PUSH
22064: LD_EXP 38
22068: PUSH
22069: LD_INT 1
22071: MINUS
22072: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) then
22073: LD_EXP 50
22077: PPUSH
22078: CALL_OW 305
22082: IFFALSE 22098
// baseUnitsToChoose = baseUnitsToChoose - 1 ;
22084: LD_ADDR_EXP 38
22088: PUSH
22089: LD_EXP 38
22093: PUSH
22094: LD_INT 1
22096: MINUS
22097: ST_TO_ADDR
// SelectCharacters ( baseUnitsToChoose ) ;
22098: LD_EXP 38
22102: PPUSH
22103: CALL 7395 0 1
// RemoveSeeing ( 93 , 36 , 3 ) ;
22107: LD_INT 93
22109: PPUSH
22110: LD_INT 36
22112: PPUSH
22113: LD_INT 3
22115: PPUSH
22116: CALL_OW 331
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22120: LD_INT 3
22122: PPUSH
22123: LD_INT 24
22125: PPUSH
22126: CALL_OW 332
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
22130: LD_INT 22
22132: PUSH
22133: LD_INT 3
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 21
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: PPUSH
22159: CALL_OW 122
// wait ( 0 0$1 ) ;
22163: LD_INT 35
22165: PPUSH
22166: CALL_OW 67
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
22170: LD_INT 22
22172: PUSH
22173: LD_INT 3
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 21
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 69
22198: PPUSH
22199: LD_EXP 59
22203: PPUSH
22204: CALL_OW 250
22208: PPUSH
22209: LD_EXP 59
22213: PPUSH
22214: CALL_OW 251
22218: PPUSH
22219: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
22223: LD_INT 35
22225: PPUSH
22226: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
22230: LD_EXP 48
22234: PPUSH
22235: CALL_OW 87
// until GetDistUnits ( Burlak , beriaDepot ) < 6 ;
22239: LD_EXP 48
22243: PPUSH
22244: LD_EXP 59
22248: PPUSH
22249: CALL_OW 296
22253: PUSH
22254: LD_INT 6
22256: LESS
22257: IFFALSE 22223
// InGameOff ;
22259: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
22263: LD_STRING M1
22265: PPUSH
22266: CALL_OW 337
// SaveForQuickRestart ;
22270: CALL_OW 22
// counterEnable = true ;
22274: LD_ADDR_EXP 88
22278: PUSH
22279: LD_INT 1
22281: ST_TO_ADDR
// counterIndex = 1 ;
22282: LD_ADDR_EXP 89
22286: PUSH
22287: LD_INT 1
22289: ST_TO_ADDR
// RevealFogArea ( 3 , RevealMapPartArea ) ;
22290: LD_INT 3
22292: PPUSH
22293: LD_INT 24
22295: PPUSH
22296: CALL_OW 332
// ResAllTechs ( 6 , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_lab ] ] ) [ 1 ] , 3 ) ;
22300: LD_INT 6
22302: PPUSH
22303: LD_INT 22
22305: PUSH
22306: LD_INT 6
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 21
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 30
22325: PUSH
22326: LD_INT 6
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: PPUSH
22338: CALL_OW 69
22342: PUSH
22343: LD_INT 1
22345: ARRAY
22346: PPUSH
22347: LD_INT 3
22349: PPUSH
22350: CALL 8810 0 3
// ResAllTechs ( 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_lab_half ] ] ) [ 1 ] , 1 ) ;
22354: LD_INT 1
22356: PPUSH
22357: LD_INT 22
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 21
22369: PUSH
22370: LD_INT 3
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 30
22379: PUSH
22380: LD_INT 7
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 69
22396: PUSH
22397: LD_INT 1
22399: ARRAY
22400: PPUSH
22401: LD_INT 1
22403: PPUSH
22404: CALL 8810 0 3
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_gun , 159 , 116 , 0 ) ;
22408: LD_INT 18
22410: PPUSH
22411: LD_INT 22
22413: PUSH
22414: LD_INT 6
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 21
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 25
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 70
22450: PPUSH
22451: LD_INT 17
22453: PPUSH
22454: LD_INT 159
22456: PPUSH
22457: LD_INT 116
22459: PPUSH
22460: LD_INT 0
22462: PPUSH
22463: CALL_OW 205
// AddComBuild ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , b_ext_noncombat , 161 , 115 , 5 ) ;
22467: LD_INT 18
22469: PPUSH
22470: LD_INT 22
22472: PUSH
22473: LD_INT 6
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 21
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 25
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: PPUSH
22505: CALL_OW 70
22509: PPUSH
22510: LD_INT 19
22512: PPUSH
22513: LD_INT 161
22515: PPUSH
22516: LD_INT 115
22518: PPUSH
22519: LD_INT 5
22521: PPUSH
22522: CALL_OW 205
// AddComEnterUnit ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) , kirovDepot ) ;
22526: LD_INT 18
22528: PPUSH
22529: LD_INT 22
22531: PUSH
22532: LD_INT 6
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 21
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 25
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 70
22568: PPUSH
22569: LD_EXP 66
22573: PPUSH
22574: CALL_OW 180
// ComFree ( survivorsArabianAttack ) ;
22578: LD_EXP 78
22582: PPUSH
22583: CALL_OW 139
// tmp = survivorsArabianAttack diff Popov ;
22587: LD_ADDR_VAR 0 5
22591: PUSH
22592: LD_EXP 78
22596: PUSH
22597: LD_EXP 61
22601: DIFF
22602: ST_TO_ADDR
// freeSlots = 6 - UnitsInside ( ru2_bar1 ) ;
22603: LD_ADDR_VAR 0 4
22607: PUSH
22608: LD_INT 6
22610: PUSH
22611: LD_EXP 68
22615: PPUSH
22616: CALL_OW 313
22620: MINUS
22621: ST_TO_ADDR
// AddComEnterUnit ( survivorsArabianAttack diff Popov , ru2_bar1 ) ;
22622: LD_EXP 78
22626: PUSH
22627: LD_EXP 61
22631: DIFF
22632: PPUSH
22633: LD_EXP 68
22637: PPUSH
22638: CALL_OW 180
// for i = 1 to tmp do
22642: LD_ADDR_VAR 0 2
22646: PUSH
22647: DOUBLE
22648: LD_INT 1
22650: DEC
22651: ST_TO_ADDR
22652: LD_VAR 0 5
22656: PUSH
22657: FOR_TO
22658: IFFALSE 22710
// begin if freeSlots > 0 then
22660: LD_VAR 0 4
22664: PUSH
22665: LD_INT 0
22667: GREATER
22668: IFFALSE 22706
// begin ComEnterUnit ( tmp [ i ] , ru2_bar1 ) ;
22670: LD_VAR 0 5
22674: PUSH
22675: LD_VAR 0 2
22679: ARRAY
22680: PPUSH
22681: LD_EXP 68
22685: PPUSH
22686: CALL_OW 120
// freeSlots = freeSlots - 1 ;
22690: LD_ADDR_VAR 0 4
22694: PUSH
22695: LD_VAR 0 4
22699: PUSH
22700: LD_INT 1
22702: MINUS
22703: ST_TO_ADDR
// end else
22704: GO 22708
// break ;
22706: GO 22710
// end ;
22708: GO 22657
22710: POP
22711: POP
// wait ( 0 0$1 ) ;
22712: LD_INT 35
22714: PPUSH
22715: CALL_OW 67
// ComEnterUnit ( UnitFilter ( tmp , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) , kirovDepot ) ;
22719: LD_VAR 0 5
22723: PPUSH
22724: LD_INT 56
22726: PUSH
22727: EMPTY
22728: LIST
22729: PUSH
22730: LD_INT 3
22732: PUSH
22733: LD_INT 60
22735: PUSH
22736: EMPTY
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PPUSH
22747: CALL_OW 72
22751: PPUSH
22752: LD_EXP 66
22756: PPUSH
22757: CALL_OW 120
// ComWalk ( ruScout ) ;
22761: LD_EXP 63
22765: PPUSH
22766: CALL_OW 138
// wait ( 0 0$1 ) ;
22770: LD_INT 35
22772: PPUSH
22773: CALL_OW 67
// AddComMoveXY ( [ ruScout , Popov ] , 99 , 37 ) ;
22777: LD_EXP 63
22781: PUSH
22782: LD_EXP 61
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PPUSH
22791: LD_INT 99
22793: PPUSH
22794: LD_INT 37
22796: PPUSH
22797: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 88 , 60 ) ;
22801: LD_EXP 63
22805: PUSH
22806: LD_EXP 61
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PPUSH
22815: LD_INT 88
22817: PPUSH
22818: LD_INT 60
22820: PPUSH
22821: CALL_OW 171
// AddComMoveXY ( [ ruScout , Popov ] , 129 , 99 ) ;
22825: LD_EXP 63
22829: PUSH
22830: LD_EXP 61
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PPUSH
22839: LD_INT 129
22841: PPUSH
22842: LD_INT 99
22844: PPUSH
22845: CALL_OW 171
// AddComEnterUnit ( [ Popov , ruScout ] , kirovDepot ) ;
22849: LD_EXP 61
22853: PUSH
22854: LD_EXP 63
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: LD_EXP 66
22867: PPUSH
22868: CALL_OW 180
// end ;
22872: LD_VAR 0 1
22876: RET
// every 0 0$1 trigger kirovCompleteFactory do var i , tmp , pom , diffUnits , canTakeUnits ;
22877: LD_EXP 22
22881: IFFALSE 23153
22883: GO 22885
22885: DISABLE
22886: LD_INT 0
22888: PPUSH
22889: PPUSH
22890: PPUSH
22891: PPUSH
22892: PPUSH
// begin diffUnits = diffUnits ^ Kurin ;
22893: LD_ADDR_VAR 0 4
22897: PUSH
22898: LD_VAR 0 4
22902: PUSH
22903: LD_EXP 60
22907: ADD
22908: ST_TO_ADDR
// diffUnits = diffUnits ^ survivorsArabianAttack ;
22909: LD_ADDR_VAR 0 4
22913: PUSH
22914: LD_VAR 0 4
22918: PUSH
22919: LD_EXP 78
22923: ADD
22924: ST_TO_ADDR
// diffUnits = diffUnits ^ kirovEng ;
22925: LD_ADDR_VAR 0 4
22929: PUSH
22930: LD_VAR 0 4
22934: PUSH
22935: LD_EXP 70
22939: ADD
22940: ST_TO_ADDR
// canTakeUnits = FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff diffUnits ;
22941: LD_ADDR_VAR 0 5
22945: PUSH
22946: LD_INT 18
22948: PPUSH
22949: LD_INT 22
22951: PUSH
22952: LD_INT 6
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 21
22961: PUSH
22962: LD_INT 1
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PPUSH
22973: CALL_OW 70
22977: PUSH
22978: LD_VAR 0 4
22982: DIFF
22983: ST_TO_ADDR
// pom = 6 ;
22984: LD_ADDR_VAR 0 3
22988: PUSH
22989: LD_INT 6
22991: ST_TO_ADDR
// if canTakeUnits then
22992: LD_VAR 0 5
22996: IFFALSE 23120
// for i = 1 to canTakeUnits do
22998: LD_ADDR_VAR 0 1
23002: PUSH
23003: DOUBLE
23004: LD_INT 1
23006: DEC
23007: ST_TO_ADDR
23008: LD_VAR 0 5
23012: PUSH
23013: FOR_TO
23014: IFFALSE 23118
// begin if GetClass ( canTakeUnits [ i ] ) <> 3 then
23016: LD_VAR 0 5
23020: PUSH
23021: LD_VAR 0 1
23025: ARRAY
23026: PPUSH
23027: CALL_OW 257
23031: PUSH
23032: LD_INT 3
23034: NONEQUAL
23035: IFFALSE 23082
// begin ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23037: LD_VAR 0 5
23041: PUSH
23042: LD_VAR 0 1
23046: ARRAY
23047: PPUSH
23048: LD_EXP 21
23052: PPUSH
23053: CALL_OW 120
// AddComChangeProfession ( canTakeUnits [ i ] , 1 ) ;
23057: LD_VAR 0 5
23061: PUSH
23062: LD_VAR 0 1
23066: ARRAY
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 183
// wait ( 0 0$1 ) ;
23075: LD_INT 35
23077: PPUSH
23078: CALL_OW 67
// end ; ComEnterUnit ( canTakeUnits [ i ] , kirovFactory ) ;
23082: LD_VAR 0 5
23086: PUSH
23087: LD_VAR 0 1
23091: ARRAY
23092: PPUSH
23093: LD_EXP 21
23097: PPUSH
23098: CALL_OW 120
// pom = pom - 1 ;
23102: LD_ADDR_VAR 0 3
23106: PUSH
23107: LD_VAR 0 3
23111: PUSH
23112: LD_INT 1
23114: MINUS
23115: ST_TO_ADDR
// end ;
23116: GO 23013
23118: POP
23119: POP
// if pom > 0 then
23120: LD_VAR 0 3
23124: PUSH
23125: LD_INT 0
23127: GREATER
23128: IFFALSE 23153
// neededUnitsSpawn = Replace ( neededUnitsSpawn , 3 , pom ) ;
23130: LD_ADDR_EXP 80
23134: PUSH
23135: LD_EXP 80
23139: PPUSH
23140: LD_INT 3
23142: PPUSH
23143: LD_VAR 0 3
23147: PPUSH
23148: CALL_OW 1
23152: ST_TO_ADDR
// end ;
23153: PPOPN 5
23155: END
// every 0 0$1 trigger kirovTransportCargo and not endCutscene do
23156: LD_EXP 73
23160: PUSH
23161: LD_EXP 31
23165: NOT
23166: AND
23167: IFFALSE 23216
23169: GO 23171
23171: DISABLE
// begin enable ;
23172: ENABLE
// AddComTransport ( kirovTransportCargo , kirovOilDepot , mat_oil ) ;
23173: LD_EXP 73
23177: PPUSH
23178: LD_EXP 67
23182: PPUSH
23183: LD_INT 2
23185: PPUSH
23186: CALL_OW 211
// AddComGive ( kirovTransportCargo , kirovDepot ) ;
23190: LD_EXP 73
23194: PPUSH
23195: LD_EXP 66
23199: PPUSH
23200: CALL_OW 221
// SetFuel ( kirovTransportCargo , 100 ) ;
23204: LD_EXP 73
23208: PPUSH
23209: LD_INT 100
23211: PPUSH
23212: CALL_OW 240
// end ;
23216: END
// every 0 0$1 trigger GetResourceVisibility ( 78 , 112 , 3 ) do
23217: LD_INT 78
23219: PPUSH
23220: LD_INT 112
23222: PPUSH
23223: LD_INT 3
23225: PPUSH
23226: CALL_OW 440
23230: IFFALSE 23284
23232: GO 23234
23234: DISABLE
// begin CenterOnXY ( 78 , 112 ) ;
23235: LD_INT 78
23237: PPUSH
23238: LD_INT 112
23240: PPUSH
23241: CALL_OW 84
// DialogueOn ;
23245: CALL_OW 6
// Say ( Burlak , D2a-Bur-1 ) ;
23249: LD_EXP 48
23253: PPUSH
23254: LD_STRING D2a-Bur-1
23256: PPUSH
23257: CALL_OW 88
// SayRadio ( Kurin , D2a-Kur-1 ) ;
23261: LD_EXP 60
23265: PPUSH
23266: LD_STRING D2a-Kur-1
23268: PPUSH
23269: CALL_OW 94
// DialogueOff ;
23273: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
23277: LD_STRING M2
23279: PPUSH
23280: CALL_OW 337
// end ;
23284: END
// every 0 0$1 trigger not dialog_track do var vehicle ;
23285: LD_EXP 10
23289: NOT
23290: IFFALSE 23498
23292: GO 23294
23294: DISABLE
23295: LD_INT 0
23297: PPUSH
// begin enable ;
23298: ENABLE
// for vehicle in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_chassis , ru_medium_wheeled ] , [ f_chassis , ru_heavy_wheeled ] ] ] ) do
23299: LD_ADDR_VAR 0 1
23303: PUSH
23304: LD_INT 22
23306: PUSH
23307: LD_INT 3
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 21
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 23
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 2
23336: PUSH
23337: LD_INT 31
23339: PUSH
23340: LD_INT 21
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 31
23349: PUSH
23350: LD_INT 23
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: PUSH
23373: FOR_IN
23374: IFFALSE 23496
// if GetDistUnitXY ( vehicle , 48 , 81 ) < 7 then
23376: LD_VAR 0 1
23380: PPUSH
23381: LD_INT 48
23383: PPUSH
23384: LD_INT 81
23386: PPUSH
23387: CALL_OW 297
23391: PUSH
23392: LD_INT 7
23394: LESS
23395: IFFALSE 23494
// begin dialog_track = true ;
23397: LD_ADDR_EXP 10
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// CenterNowOnXY ( 48 , 81 ) ;
23405: LD_INT 48
23407: PPUSH
23408: LD_INT 81
23410: PPUSH
23411: CALL_OW 86
// DialogueOn ;
23415: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
23419: LD_EXP 48
23423: PPUSH
23424: LD_STRING D5a-Bur-1
23426: PPUSH
23427: CALL_OW 88
// DialogueOff ;
23431: CALL_OW 7
// if GetTech ( 82 , 3 ) = state_disabled then
23435: LD_INT 82
23437: PPUSH
23438: LD_INT 3
23440: PPUSH
23441: CALL_OW 321
23445: PUSH
23446: LD_INT 0
23448: EQUAL
23449: IFFALSE 23464
// SetTech ( 82 , 3 , state_enabled ) ;
23451: LD_INT 82
23453: PPUSH
23454: LD_INT 3
23456: PPUSH
23457: LD_INT 1
23459: PPUSH
23460: CALL_OW 322
// SetTech ( 84 , 3 , state_enabled ) ;
23464: LD_INT 84
23466: PPUSH
23467: LD_INT 3
23469: PPUSH
23470: LD_INT 1
23472: PPUSH
23473: CALL_OW 322
// SetRestrict ( b_ext_track , 3 , state_enabled ) ;
23477: LD_INT 16
23479: PPUSH
23480: LD_INT 3
23482: PPUSH
23483: LD_INT 1
23485: PPUSH
23486: CALL_OW 324
// exit ;
23490: POP
23491: POP
23492: GO 23498
// end ;
23494: GO 23373
23496: POP
23497: POP
// end ;
23498: PPOPN 1
23500: END
// every 5 5$30 do
23501: GO 23503
23503: DISABLE
// begin PrepareScholtze ;
23504: CALL 5362 0 0
// wait ( 0 0$2 ) ;
23508: LD_INT 70
23510: PPUSH
23511: CALL_OW 67
// DialogueOn ;
23515: CALL_OW 6
// SayRadio ( Scholtze , D4-Sch-1 ) ;
23519: LD_EXP 54
23523: PPUSH
23524: LD_STRING D4-Sch-1
23526: PPUSH
23527: CALL_OW 94
// Say ( Burlak , D4-Bur-1 ) ;
23531: LD_EXP 48
23535: PPUSH
23536: LD_STRING D4-Bur-1
23538: PPUSH
23539: CALL_OW 88
// DialogueOff ;
23543: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23547: LD_STRING M4
23549: PPUSH
23550: CALL_OW 337
// ComHold ( Scholtze ) ;
23554: LD_EXP 54
23558: PPUSH
23559: CALL_OW 140
// scholtzeSpawned = true ;
23563: LD_ADDR_EXP 6
23567: PUSH
23568: LD_INT 1
23570: ST_TO_ADDR
// end ;
23571: END
// every 0 0$1 trigger See ( 3 , Scholtze ) and scholtzeSpawned and not scholtzeSaved do
23572: LD_INT 3
23574: PPUSH
23575: LD_EXP 54
23579: PPUSH
23580: CALL_OW 292
23584: PUSH
23585: LD_EXP 6
23589: AND
23590: PUSH
23591: LD_EXP 7
23595: NOT
23596: AND
23597: IFFALSE 23778
23599: GO 23601
23601: DISABLE
// begin scholtzeSaved = true ;
23602: LD_ADDR_EXP 7
23606: PUSH
23607: LD_INT 1
23609: ST_TO_ADDR
// CenterNowOnUnits ( Scholtze ) ;
23610: LD_EXP 54
23614: PPUSH
23615: CALL_OW 87
// SetSide ( Scholtze , 3 ) ;
23619: LD_EXP 54
23623: PPUSH
23624: LD_INT 3
23626: PPUSH
23627: CALL_OW 235
// DialogueOn ;
23631: CALL_OW 6
// Say ( Scholtze , D4a-Sch-1 ) ;
23635: LD_EXP 54
23639: PPUSH
23640: LD_STRING D4a-Sch-1
23642: PPUSH
23643: CALL_OW 88
// Say ( Burlak , D4a-Bur-1 ) ;
23647: LD_EXP 48
23651: PPUSH
23652: LD_STRING D4a-Bur-1
23654: PPUSH
23655: CALL_OW 88
// Say ( Scholtze , D4a-Sch-2 ) ;
23659: LD_EXP 54
23663: PPUSH
23664: LD_STRING D4a-Sch-2
23666: PPUSH
23667: CALL_OW 88
// DialogueOff ;
23671: CALL_OW 7
// ComMoveXY ( amPatrol , 28 , 36 ) ;
23675: LD_EXP 84
23679: PPUSH
23680: LD_INT 28
23682: PPUSH
23683: LD_INT 36
23685: PPUSH
23686: CALL_OW 111
// ChangeMissionObjectives ( MScholtzeOut ) ;
23690: LD_STRING MScholtzeOut
23692: PPUSH
23693: CALL_OW 337
// SetTech ( tech_Tech2 , 3 , state_enabled ) ;
23697: LD_INT 49
23699: PPUSH
23700: LD_INT 3
23702: PPUSH
23703: LD_INT 1
23705: PPUSH
23706: CALL_OW 322
// SetTech ( tech_Weap1 , 3 , state_enabled ) ;
23710: LD_INT 51
23712: PPUSH
23713: LD_INT 3
23715: PPUSH
23716: LD_INT 1
23718: PPUSH
23719: CALL_OW 322
// if GetTech ( 82 , 3 ) = state_disabled then
23723: LD_INT 82
23725: PPUSH
23726: LD_INT 3
23728: PPUSH
23729: CALL_OW 321
23733: PUSH
23734: LD_INT 0
23736: EQUAL
23737: IFFALSE 23752
// SetTech ( 82 , 3 , state_enabled ) ;
23739: LD_INT 82
23741: PPUSH
23742: LD_INT 3
23744: PPUSH
23745: LD_INT 1
23747: PPUSH
23748: CALL_OW 322
// SetTech ( 83 , 3 , state_enabled ) ;
23752: LD_INT 83
23754: PPUSH
23755: LD_INT 3
23757: PPUSH
23758: LD_INT 1
23760: PPUSH
23761: CALL_OW 322
// SetRestrict ( b_ext_noncombat , 3 , state_enabled ) ;
23765: LD_INT 19
23767: PPUSH
23768: LD_INT 3
23770: PPUSH
23771: LD_INT 1
23773: PPUSH
23774: CALL_OW 324
// end ;
23778: END
// every 2 2$30 trigger IsPlaced ( Scholtze ) and not scholtzeSaved do
23779: LD_EXP 54
23783: PPUSH
23784: CALL_OW 305
23788: PUSH
23789: LD_EXP 7
23793: NOT
23794: AND
23795: IFFALSE 23804
23797: GO 23799
23799: DISABLE
// PrepareAmericanPatrol ;
23800: CALL 6266 0 0
23804: END
// every 0 0$1 trigger IsPlaced ( Scholtze ) and GetSide ( Scholtze ) = 8 and animalsSafeTime > 0 0$01 do var ape , tiger ;
23805: LD_EXP 54
23809: PPUSH
23810: CALL_OW 305
23814: PUSH
23815: LD_EXP 54
23819: PPUSH
23820: CALL_OW 255
23824: PUSH
23825: LD_INT 8
23827: EQUAL
23828: AND
23829: PUSH
23830: LD_EXP 47
23834: PUSH
23835: LD_INT 35
23837: GREATER
23838: AND
23839: IFFALSE 24015
23841: GO 23843
23843: DISABLE
23844: LD_INT 0
23846: PPUSH
23847: PPUSH
// begin enable ;
23848: ENABLE
// animalsSafeTime = animalsSafeTime - 0 0$01 ;
23849: LD_ADDR_EXP 47
23853: PUSH
23854: LD_EXP 47
23858: PUSH
23859: LD_INT 35
23861: MINUS
23862: ST_TO_ADDR
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
23863: LD_ADDR_VAR 0 1
23867: PUSH
23868: LD_INT 22
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 25
23880: PUSH
23881: LD_INT 12
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PPUSH
23892: CALL_OW 69
23896: PUSH
23897: FOR_IN
23898: IFFALSE 23937
// GetAwayFromXY ( ape , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
23900: LD_VAR 0 1
23904: PPUSH
23905: LD_EXP 54
23909: PPUSH
23910: CALL_OW 250
23914: PPUSH
23915: LD_EXP 54
23919: PPUSH
23920: CALL_OW 251
23924: PPUSH
23925: LD_INT 12
23927: PPUSH
23928: LD_INT 0
23930: PPUSH
23931: CALL 10109 0 5
23935: GO 23897
23937: POP
23938: POP
// for tiger in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) do
23939: LD_ADDR_VAR 0 2
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 25
23956: PUSH
23957: LD_INT 14
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: PUSH
23973: FOR_IN
23974: IFFALSE 24013
// GetAwayFromXY ( tiger , GetX ( Scholtze ) , GetY ( Scholtze ) , 12 , false ) ;
23976: LD_VAR 0 2
23980: PPUSH
23981: LD_EXP 54
23985: PPUSH
23986: CALL_OW 250
23990: PPUSH
23991: LD_EXP 54
23995: PPUSH
23996: CALL_OW 251
24000: PPUSH
24001: LD_INT 12
24003: PPUSH
24004: LD_INT 0
24006: PPUSH
24007: CALL 10109 0 5
24011: GO 23973
24013: POP
24014: POP
// end ;
24015: PPOPN 2
24017: END
// every 0 0$1 trigger See ( 1 , Scholtze ) and amPatrol and not scholtzeSaved do
24018: LD_INT 1
24020: PPUSH
24021: LD_EXP 54
24025: PPUSH
24026: CALL_OW 292
24030: PUSH
24031: LD_EXP 84
24035: AND
24036: PUSH
24037: LD_EXP 7
24041: NOT
24042: AND
24043: IFFALSE 24197
24045: GO 24047
24047: DISABLE
// begin enable ;
24048: ENABLE
// if not IsPlaced ( Scholtze ) then
24049: LD_EXP 54
24053: PPUSH
24054: CALL_OW 305
24058: NOT
24059: IFFALSE 24063
// exit ;
24061: GO 24197
// if Attacks ( amPatrol [ 1 ] ) = Scholtze or Attacks ( amPatrol [ 2 ] ) = Scholtze then
24063: LD_EXP 84
24067: PUSH
24068: LD_INT 1
24070: ARRAY
24071: PPUSH
24072: CALL_OW 320
24076: PUSH
24077: LD_EXP 54
24081: EQUAL
24082: PUSH
24083: LD_EXP 84
24087: PUSH
24088: LD_INT 2
24090: ARRAY
24091: PPUSH
24092: CALL_OW 320
24096: PUSH
24097: LD_EXP 54
24101: EQUAL
24102: OR
24103: IFFALSE 24197
// begin DialogueOn ;
24105: CALL_OW 6
// Say ( Scholtze , D4b-Sch-1 ) ;
24109: LD_EXP 54
24113: PPUSH
24114: LD_STRING D4b-Sch-1
24116: PPUSH
24117: CALL_OW 88
// Say ( amPatrol [ 2 ] , D4b-Sol1-1 ) ;
24121: LD_EXP 84
24125: PUSH
24126: LD_INT 2
24128: ARRAY
24129: PPUSH
24130: LD_STRING D4b-Sol1-1
24132: PPUSH
24133: CALL_OW 88
// Say ( amPatrol [ 1 ] , D4b-Sol2-1 ) ;
24137: LD_EXP 84
24141: PUSH
24142: LD_INT 1
24144: ARRAY
24145: PPUSH
24146: LD_STRING D4b-Sol2-1
24148: PPUSH
24149: CALL_OW 88
// Say ( Scholtze , D4b-Sch-2 ) ;
24153: LD_EXP 54
24157: PPUSH
24158: LD_STRING D4b-Sch-2
24160: PPUSH
24161: CALL_OW 88
// Say ( Burlak , D4b-Bur-2 ) ;
24165: LD_EXP 48
24169: PPUSH
24170: LD_STRING D4b-Bur-2
24172: PPUSH
24173: CALL_OW 88
// DialogueOff ;
24177: CALL_OW 7
// Killunit ( Scholtze ) ;
24181: LD_EXP 54
24185: PPUSH
24186: CALL_OW 66
// ChangeMissionObjectives ( MScholtzeDel ) ;
24190: LD_STRING MScholtzeDel
24192: PPUSH
24193: CALL_OW 337
// end ; end ;
24197: END
// export function Dial_UpgradeWorkshop ( building ) ; var maleSci , maleOthers ; begin
24198: LD_INT 0
24200: PPUSH
24201: PPUSH
24202: PPUSH
// dialog_workshop = true ;
24203: LD_ADDR_EXP 8
24207: PUSH
24208: LD_INT 1
24210: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_oil_power ] ] ) then
24211: LD_INT 22
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 30
24223: PUSH
24224: LD_INT 26
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PPUSH
24235: CALL_OW 69
24239: NOT
24240: IFFALSE 24629
// begin CenterNowOnUnits ( building ) ;
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 87
// DialogueOn ;
24251: CALL_OW 6
// Say ( Burlak , D3aa-Bur-1 ) ;
24255: LD_EXP 48
24259: PPUSH
24260: LD_STRING D3aa-Bur-1
24262: PPUSH
24263: CALL_OW 88
// if IsOk ( Scholtze ) and GetSide ( Scholtze ) = 3 then
24267: LD_EXP 54
24271: PPUSH
24272: CALL_OW 302
24276: PUSH
24277: LD_EXP 54
24281: PPUSH
24282: CALL_OW 255
24286: PUSH
24287: LD_INT 3
24289: EQUAL
24290: AND
24291: IFFALSE 24307
// Say ( Scholtze , D3aa-Sch-1 ) else
24293: LD_EXP 54
24297: PPUSH
24298: LD_STRING D3aa-Sch-1
24300: PPUSH
24301: CALL_OW 88
24305: GO 24613
// begin maleSci = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_scientistic ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_INT 22
24314: PUSH
24315: LD_INT 3
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 4
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 26
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 50
24354: PUSH
24355: EMPTY
24356: LIST
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PPUSH
24365: CALL_OW 69
24369: PUSH
24370: LD_EXP 48
24374: PUSH
24375: LD_EXP 49
24379: PUSH
24380: LD_EXP 51
24384: PUSH
24385: LD_EXP 52
24389: PUSH
24390: LD_EXP 53
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: DIFF
24402: ST_TO_ADDR
// if maleSci then
24403: LD_VAR 0 3
24407: IFFALSE 24427
// Say ( maleSci [ 1 ] , D3aa-Sci1-1 ) else
24409: LD_VAR 0 3
24413: PUSH
24414: LD_INT 1
24416: ARRAY
24417: PPUSH
24418: LD_STRING D3aa-Sci1-1
24420: PPUSH
24421: CALL_OW 88
24425: GO 24613
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24427: LD_ADDR_VAR 0 4
24431: PUSH
24432: LD_INT 22
24434: PUSH
24435: LD_INT 3
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 21
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 26
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 50
24464: PUSH
24465: EMPTY
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: PPUSH
24474: CALL_OW 69
24478: PUSH
24479: LD_EXP 48
24483: PUSH
24484: LD_EXP 49
24488: PUSH
24489: LD_EXP 51
24493: PUSH
24494: LD_EXP 52
24498: PUSH
24499: LD_EXP 53
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: DIFF
24511: ST_TO_ADDR
// if maleOthers then
24512: LD_VAR 0 4
24516: IFFALSE 24536
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) else
24518: LD_VAR 0 4
24522: PUSH
24523: LD_INT 1
24525: ARRAY
24526: PPUSH
24527: LD_STRING D3aa-Sci1-1
24529: PPUSH
24530: CALL_OW 88
24534: GO 24613
// begin maleOthers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24536: LD_ADDR_VAR 0 4
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_INT 3
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 21
24553: PUSH
24554: LD_INT 1
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 26
24563: PUSH
24564: LD_INT 1
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 50
24573: PUSH
24574: EMPTY
24575: LIST
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 69
24587: PUSH
24588: LD_EXP 48
24592: PUSH
24593: EMPTY
24594: LIST
24595: DIFF
24596: ST_TO_ADDR
// Say ( maleOthers [ 1 ] , D3aa-Sci1-1 ) ;
24597: LD_VAR 0 4
24601: PUSH
24602: LD_INT 1
24604: ARRAY
24605: PPUSH
24606: LD_STRING D3aa-Sci1-1
24608: PPUSH
24609: CALL_OW 88
// end ; end ; end ; Say ( Burlak , D3aa-Bur-2 ) ;
24613: LD_EXP 48
24617: PPUSH
24618: LD_STRING D3aa-Bur-2
24620: PPUSH
24621: CALL_OW 88
// DialogueOff ;
24625: CALL_OW 7
// end ; ChangeMissionObjectives ( M3 ) ;
24629: LD_STRING M3
24631: PPUSH
24632: CALL_OW 337
// end ;
24636: LD_VAR 0 2
24640: RET
// every 0 0$1 trigger not dialog_amSupportTroops do var amUnit , randomMale ;
24641: LD_EXP 9
24645: NOT
24646: IFFALSE 24984
24648: GO 24650
24650: DISABLE
24651: LD_INT 0
24653: PPUSH
24654: PPUSH
// begin enable ;
24655: ENABLE
// for amUnit in amSupportTroops do
24656: LD_ADDR_VAR 0 1
24660: PUSH
24661: LD_EXP 83
24665: PUSH
24666: FOR_IN
24667: IFFALSE 24982
// begin if See ( 3 , amUnit ) then
24669: LD_INT 3
24671: PPUSH
24672: LD_VAR 0 1
24676: PPUSH
24677: CALL_OW 292
24681: IFFALSE 24980
// begin dialog_amSupportTroops = true ;
24683: LD_ADDR_EXP 9
24687: PUSH
24688: LD_INT 1
24690: ST_TO_ADDR
// CenterNowOnUnits ( amUnit ) ;
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 87
// DialogueOn ;
24700: CALL_OW 6
// randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Belkov2 ] ;
24704: LD_ADDR_VAR 0 2
24708: PUSH
24709: LD_INT 22
24711: PUSH
24712: LD_INT 3
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 21
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 26
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 50
24741: PUSH
24742: EMPTY
24743: LIST
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 69
24755: PUSH
24756: LD_EXP 48
24760: PUSH
24761: LD_EXP 49
24765: PUSH
24766: LD_EXP 51
24770: PUSH
24771: LD_EXP 52
24775: PUSH
24776: LD_EXP 53
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: DIFF
24788: ST_TO_ADDR
// if randomMale then
24789: LD_VAR 0 2
24793: IFFALSE 24860
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) , D3b-RSol1-1 ,  , false , true ) else
24795: LD_INT 22
24797: PUSH
24798: LD_INT 3
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 21
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 26
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 50
24827: PUSH
24828: EMPTY
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 69
24841: PPUSH
24842: LD_STRING D3b-RSol1-1
24844: PPUSH
24845: LD_STRING 
24847: PPUSH
24848: LD_INT 0
24850: PPUSH
24851: LD_INT 1
24853: PPUSH
24854: CALL 6976 0 5
24858: GO 24937
// begin randomMale = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] ] ) diff [ Burlak ] ;
24860: LD_ADDR_VAR 0 2
24864: PUSH
24865: LD_INT 22
24867: PUSH
24868: LD_INT 3
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 21
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 26
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 50
24897: PUSH
24898: EMPTY
24899: LIST
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: PPUSH
24907: CALL_OW 69
24911: PUSH
24912: LD_EXP 48
24916: PUSH
24917: EMPTY
24918: LIST
24919: DIFF
24920: ST_TO_ADDR
// Say ( randomMale [ 1 ] , D3b-RSol1-1 ) ;
24921: LD_VAR 0 2
24925: PUSH
24926: LD_INT 1
24928: ARRAY
24929: PPUSH
24930: LD_STRING D3b-RSol1-1
24932: PPUSH
24933: CALL_OW 88
// end ; if IsOK ( Gnyevko ) then
24937: LD_EXP 49
24941: PPUSH
24942: CALL_OW 302
24946: IFFALSE 24960
// Say ( Gnyevko , D3b-Gny-1 ) ;
24948: LD_EXP 49
24952: PPUSH
24953: LD_STRING D3b-Gny-1
24955: PPUSH
24956: CALL_OW 88
// Say ( Burlak , D3b-Bur-1 ) ;
24960: LD_EXP 48
24964: PPUSH
24965: LD_STRING D3b-Bur-1
24967: PPUSH
24968: CALL_OW 88
// DialogueOff ;
24972: CALL_OW 7
// exit ;
24976: POP
24977: POP
24978: GO 24984
// end ; end ;
24980: GO 24666
24982: POP
24983: POP
// end ;
24984: PPOPN 2
24986: END
// every 2 2$0 trigger dialog_amSupportTroops do
24987: LD_EXP 9
24991: IFFALSE 25075
24993: GO 24995
24995: DISABLE
// begin if IsOK ( Kovalyuk ) then
24996: LD_EXP 51
25000: PPUSH
25001: CALL_OW 302
25005: IFFALSE 25019
// Say ( Kovalyuk , D3b-Kov-1 ) ;
25007: LD_EXP 51
25011: PPUSH
25012: LD_STRING D3b-Kov-1
25014: PPUSH
25015: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D3b-RSol1-2 ,  , false , false ) ;
25019: LD_INT 22
25021: PUSH
25022: LD_INT 3
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 21
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 26
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: LIST
25053: PPUSH
25054: CALL_OW 69
25058: PPUSH
25059: LD_STRING D3b-RSol1-2
25061: PPUSH
25062: LD_STRING 
25064: PPUSH
25065: LD_INT 0
25067: PPUSH
25068: LD_INT 0
25070: PPUSH
25071: CALL 6976 0 5
// end ;
25075: END
// every 1 trigger not endCutscene do
25076: LD_EXP 31
25080: NOT
25081: IFFALSE 25099
25083: GO 25085
25085: DISABLE
// begin enable ;
25086: ENABLE
// SetLives ( Kurin , 1000 ) ;
25087: LD_EXP 60
25091: PPUSH
25092: LD_INT 1000
25094: PPUSH
25095: CALL_OW 234
// end ;
25099: END
// every 0 0$1 trigger timeToPrepareAttack < 0 0$01 do
25100: LD_EXP 40
25104: PUSH
25105: LD_INT 35
25107: LESS
25108: IFFALSE 25336
25110: GO 25112
25112: DISABLE
// begin CenterNowOnUnits ( Kurin ) ;
25113: LD_EXP 60
25117: PPUSH
25118: CALL_OW 87
// InGameOn ;
25122: CALL_OW 8
// DialogueOn ;
25126: CALL_OW 6
// SayRadio ( Kurin , D5-Kur-1 ) ;
25130: LD_EXP 60
25134: PPUSH
25135: LD_STRING D5-Kur-1
25137: PPUSH
25138: CALL_OW 94
// case Query ( QVehicles ) of 1 :
25142: LD_STRING QVehicles
25144: PPUSH
25145: CALL_OW 97
25149: PUSH
25150: LD_INT 1
25152: DOUBLE
25153: EQUAL
25154: IFTRUE 25158
25156: GO 25201
25158: POP
// begin Say ( Burlak , D6a-Bur-1 ) ;
25159: LD_EXP 48
25163: PPUSH
25164: LD_STRING D6a-Bur-1
25166: PPUSH
25167: CALL_OW 88
// SayRadio ( Kurin , D6a-Kur-1 ) ;
25171: LD_EXP 60
25175: PPUSH
25176: LD_STRING D6a-Kur-1
25178: PPUSH
25179: CALL_OW 94
// meetNearOmicronBase = true ;
25183: LD_ADDR_EXP 19
25187: PUSH
25188: LD_INT 1
25190: ST_TO_ADDR
// kurinCheckVehicles = true ;
25191: LD_ADDR_EXP 18
25195: PUSH
25196: LD_INT 1
25198: ST_TO_ADDR
// end ; 2 :
25199: GO 25328
25201: LD_INT 2
25203: DOUBLE
25204: EQUAL
25205: IFTRUE 25209
25207: GO 25256
25209: POP
// begin Say ( Burlak , D6b-Bur-1 ) ;
25210: LD_EXP 48
25214: PPUSH
25215: LD_STRING D6b-Bur-1
25217: PPUSH
25218: CALL_OW 88
// Say ( Kurin , D6b-Kur-1 ) ;
25222: LD_EXP 60
25226: PPUSH
25227: LD_STRING D6b-Kur-1
25229: PPUSH
25230: CALL_OW 88
// Say ( Burlak , D6b-Bur-2 ) ;
25234: LD_EXP 48
25238: PPUSH
25239: LD_STRING D6b-Bur-2
25241: PPUSH
25242: CALL_OW 88
// meetNearOmicronBase = true ;
25246: LD_ADDR_EXP 19
25250: PUSH
25251: LD_INT 1
25253: ST_TO_ADDR
// end ; 3 :
25254: GO 25328
25256: LD_INT 3
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25327
25264: POP
// begin Say ( Burlak , D6c-Bur-1 ) ;
25265: LD_EXP 48
25269: PPUSH
25270: LD_STRING D6c-Bur-1
25272: PPUSH
25273: CALL_OW 88
// Say ( Kurin , D6c-Kur-1 ) ;
25277: LD_EXP 60
25281: PPUSH
25282: LD_STRING D6c-Kur-1
25284: PPUSH
25285: CALL_OW 88
// Say ( Burlak , D6c-Bur-2 ) ;
25289: LD_EXP 48
25293: PPUSH
25294: LD_STRING D6c-Bur-2
25296: PPUSH
25297: CALL_OW 88
// kurinGiveMoreTime = true ;
25301: LD_ADDR_EXP 13
25305: PUSH
25306: LD_INT 1
25308: ST_TO_ADDR
// kurinOpinion = 0 ;
25309: LD_ADDR_EXP 26
25313: PUSH
25314: LD_INT 0
25316: ST_TO_ADDR
// counterIndex = 4 ;
25317: LD_ADDR_EXP 89
25321: PUSH
25322: LD_INT 4
25324: ST_TO_ADDR
// end ; end ;
25325: GO 25328
25327: POP
// InGameOff ;
25328: CALL_OW 9
// DialogueOff ;
25332: CALL_OW 7
// end ;
25336: END
// every 0 0$1 trigger extraTime < 0 0$01 and kurinGiveMoreTime do
25337: LD_EXP 14
25341: PUSH
25342: LD_INT 35
25344: LESS
25345: PUSH
25346: LD_EXP 13
25350: AND
25351: IFFALSE 25384
25353: GO 25355
25355: DISABLE
// begin DialogueOn ;
25356: CALL_OW 6
// SayRadio ( Kurin , D6c-Kur-2 ) ;
25360: LD_EXP 60
25364: PPUSH
25365: LD_STRING D6c-Kur-2
25367: PPUSH
25368: CALL_OW 94
// DialogueOff ;
25372: CALL_OW 7
// meetNearOmicronBase = true ;
25376: LD_ADDR_EXP 19
25380: PUSH
25381: LD_INT 1
25383: ST_TO_ADDR
// end ;
25384: END
// every 0 0$1 trigger meetNearOmicronBase do var i , mech , mechs , vehs , haveVehs ;
25385: LD_EXP 19
25389: IFFALSE 26044
25391: GO 25393
25393: DISABLE
25394: LD_INT 0
25396: PPUSH
25397: PPUSH
25398: PPUSH
25399: PPUSH
25400: PPUSH
// begin mechs = [ ] ;
25401: LD_ADDR_VAR 0 3
25405: PUSH
25406: EMPTY
25407: ST_TO_ADDR
// vehs = [ ] ;
25408: LD_ADDR_VAR 0 4
25412: PUSH
25413: EMPTY
25414: ST_TO_ADDR
// haveVehs = 0 ;
25415: LD_ADDR_VAR 0 5
25419: PUSH
25420: LD_INT 0
25422: ST_TO_ADDR
// uc_side = 6 ;
25423: LD_ADDR_OWVAR 20
25427: PUSH
25428: LD_INT 6
25430: ST_TO_ADDR
// uc_nation = 3 ;
25431: LD_ADDR_OWVAR 21
25435: PUSH
25436: LD_INT 3
25438: ST_TO_ADDR
// for i := 1 to 2 do
25439: LD_ADDR_VAR 0 1
25443: PUSH
25444: DOUBLE
25445: LD_INT 1
25447: DEC
25448: ST_TO_ADDR
25449: LD_INT 2
25451: PUSH
25452: FOR_TO
25453: IFFALSE 25552
// begin PrepareMechanic ( false , 2 ) ;
25455: LD_INT 0
25457: PPUSH
25458: LD_INT 2
25460: PPUSH
25461: CALL_OW 383
// mech = CreateHuman ;
25465: LD_ADDR_VAR 0 2
25469: PUSH
25470: CALL_OW 44
25474: ST_TO_ADDR
// mechs = mechs ^ mech ;
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_VAR 0 3
25484: PUSH
25485: LD_VAR 0 2
25489: ADD
25490: ST_TO_ADDR
// PlaceHumanInUnit ( mech , kirovDepot ) ;
25491: LD_VAR 0 2
25495: PPUSH
25496: LD_EXP 66
25500: PPUSH
25501: CALL_OW 52
// ComExitBuilding ( mech ) ;
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 122
// wait ( 0 0$1 ) ;
25514: LD_INT 35
25516: PPUSH
25517: CALL_OW 67
// AddComMoveXY ( mech , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
25521: LD_VAR 0 2
25525: PPUSH
25526: LD_EXP 59
25530: PPUSH
25531: CALL_OW 250
25535: PPUSH
25536: LD_EXP 59
25540: PPUSH
25541: CALL_OW 251
25545: PPUSH
25546: CALL_OW 171
// end ;
25550: GO 25452
25552: POP
25553: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] ] ) = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) then
25554: LD_INT 22
25556: PUSH
25557: LD_INT 3
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 21
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 23
25576: PUSH
25577: LD_INT 3
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL_OW 69
25593: PUSH
25594: LD_INT 22
25596: PUSH
25597: LD_INT 3
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 21
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 69
25622: EQUAL
25623: IFFALSE 25633
// produceOnlyForYou = true ;
25625: LD_ADDR_EXP 17
25629: PUSH
25630: LD_INT 1
25632: ST_TO_ADDR
// wait ( 0 0$20 ) ;
25633: LD_INT 700
25635: PPUSH
25636: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) + 2 then
25640: LD_INT 22
25642: PUSH
25643: LD_INT 3
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 21
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 23
25662: PUSH
25663: LD_INT 3
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 3
25672: PUSH
25673: LD_INT 34
25675: PUSH
25676: LD_INT 51
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: PUSH
25698: LD_INT 22
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 21
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PPUSH
25722: CALL_OW 69
25726: PUSH
25727: LD_INT 2
25729: PLUS
25730: GREATEREQUAL
25731: IFFALSE 26014
// begin vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 1 ] ;
25733: LD_ADDR_VAR 0 4
25737: PUSH
25738: LD_VAR 0 4
25742: PUSH
25743: LD_INT 22
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 21
25755: PUSH
25756: LD_INT 2
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 23
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 3
25775: PUSH
25776: LD_INT 34
25778: PUSH
25779: LD_INT 51
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 3
25792: PUSH
25793: LD_INT 59
25795: PUSH
25796: EMPTY
25797: LIST
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: PPUSH
25810: CALL_OW 69
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: ADD
25819: ST_TO_ADDR
// vehs = vehs ^ FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_not , [ f_weapon , ru_cargo_bay ] ] , [ f_not , [ f_occupied ] ] ] ) [ 2 ] ;
25820: LD_ADDR_VAR 0 4
25824: PUSH
25825: LD_VAR 0 4
25829: PUSH
25830: LD_INT 22
25832: PUSH
25833: LD_INT 3
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 21
25842: PUSH
25843: LD_INT 2
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 23
25852: PUSH
25853: LD_INT 3
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 3
25862: PUSH
25863: LD_INT 34
25865: PUSH
25866: LD_INT 51
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 3
25879: PUSH
25880: LD_INT 59
25882: PUSH
25883: EMPTY
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: PPUSH
25897: CALL_OW 69
25901: PUSH
25902: LD_INT 2
25904: ARRAY
25905: ADD
25906: ST_TO_ADDR
// kirovAttackVehicles = kirovAttackVehicles ^ vehs ;
25907: LD_ADDR_EXP 75
25911: PUSH
25912: LD_EXP 75
25916: PUSH
25917: LD_VAR 0 4
25921: ADD
25922: ST_TO_ADDR
// SetSide ( vehs , 6 ) ;
25923: LD_VAR 0 4
25927: PPUSH
25928: LD_INT 6
25930: PPUSH
25931: CALL_OW 235
// produceMoreVehicles = true ;
25935: LD_ADDR_EXP 16
25939: PUSH
25940: LD_INT 1
25942: ST_TO_ADDR
// ComEnterUnit ( mechs [ 1 ] , vehs [ 1 ] ) ;
25943: LD_VAR 0 3
25947: PUSH
25948: LD_INT 1
25950: ARRAY
25951: PPUSH
25952: LD_VAR 0 4
25956: PUSH
25957: LD_INT 1
25959: ARRAY
25960: PPUSH
25961: CALL_OW 120
// ComEnterUnit ( mechs [ 2 ] , vehs [ 2 ] ) ;
25965: LD_VAR 0 3
25969: PUSH
25970: LD_INT 2
25972: ARRAY
25973: PPUSH
25974: LD_VAR 0 4
25978: PUSH
25979: LD_INT 2
25981: ARRAY
25982: PPUSH
25983: CALL_OW 120
// if kurinCheckVehicles and not kurinOpinion = 0 then
25987: LD_EXP 18
25991: PUSH
25992: LD_EXP 26
25996: PUSH
25997: LD_INT 0
25999: EQUAL
26000: NOT
26001: AND
26002: IFFALSE 26012
// kurinOpinion = 1 ;
26004: LD_ADDR_EXP 26
26008: PUSH
26009: LD_INT 1
26011: ST_TO_ADDR
// end else
26012: GO 26044
// begin if kurinCheckVehicles then
26014: LD_EXP 18
26018: IFFALSE 26044
// begin DialogueOn ;
26020: CALL_OW 6
// SayRadio ( Kurin , D6d-Kur-1 ) ;
26024: LD_EXP 60
26028: PPUSH
26029: LD_STRING D6d-Kur-1
26031: PPUSH
26032: CALL_OW 94
// DialogueOff ;
26036: CALL_OW 7
// Lose_Vehicles ;
26040: CALL 19875 0 0
// end ; end ; end ;
26044: PPOPN 5
26046: END
// every 0 0$1 trigger meetNearOmicronBase do
26047: LD_EXP 19
26051: IFFALSE 26271
26053: GO 26055
26055: DISABLE
// begin spawnCrates = false ;
26056: LD_ADDR_EXP 5
26060: PUSH
26061: LD_INT 0
26063: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
26064: LD_INT 6
26066: PPUSH
26067: LD_INT 1
26069: PPUSH
26070: LD_INT 2
26072: PPUSH
26073: LD_INT 1
26075: PPUSH
26076: CALL_OW 80
// SetRestrict ( b_depot , 3 , false ) ;
26080: LD_INT 0
26082: PPUSH
26083: LD_INT 3
26085: PPUSH
26086: LD_INT 0
26088: PPUSH
26089: CALL_OW 324
// ChangeMissionObjectives ( M3a ) ;
26093: LD_STRING M3a
26095: PPUSH
26096: CALL_OW 337
// ChangeMissionObjectives ( M5 ) ;
26100: LD_STRING M5
26102: PPUSH
26103: CALL_OW 337
// SetAreaMapShow ( MeetArea , 1 ) ;
26107: LD_INT 15
26109: PPUSH
26110: LD_INT 1
26112: PPUSH
26113: CALL_OW 424
// ComMoveXY ( kirovAttackVehicles , 75 , 38 ) ;
26117: LD_EXP 75
26121: PPUSH
26122: LD_INT 75
26124: PPUSH
26125: LD_INT 38
26127: PPUSH
26128: CALL_OW 111
// ComMoveXY ( kirovAttackCargo , 75 , 38 ) ;
26132: LD_EXP 74
26136: PPUSH
26137: LD_INT 75
26139: PPUSH
26140: LD_INT 38
26142: PPUSH
26143: CALL_OW 111
// counterIndex = 2 ;
26147: LD_ADDR_EXP 89
26151: PUSH
26152: LD_INT 2
26154: ST_TO_ADDR
// if not kurinOpinion = 0 then
26155: LD_EXP 26
26159: PUSH
26160: LD_INT 0
26162: EQUAL
26163: NOT
26164: IFFALSE 26174
// kurinOpinion = 1 ;
26166: LD_ADDR_EXP 26
26170: PUSH
26171: LD_INT 1
26173: ST_TO_ADDR
// InitAIManager ( 1 , 1 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , OmicronBaseArea , OmicronHealArea , OmicronParkingArea , OmicronDefenceArea , [ 2 , 3 , 4 ] [ Difficulty ] , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , false ) ;
26174: LD_INT 1
26176: PPUSH
26177: LD_INT 1
26179: PPUSH
26180: LD_INT 22
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 21
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL_OW 69
26208: PPUSH
26209: LD_INT 13
26211: PPUSH
26212: LD_INT 28
26214: PPUSH
26215: LD_INT 17
26217: PPUSH
26218: LD_INT 29
26220: PPUSH
26221: LD_INT 2
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: LD_INT 4
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: PUSH
26235: LD_OWVAR 67
26239: ARRAY
26240: PPUSH
26241: LD_INT 2
26243: PUSH
26244: LD_INT 3
26246: PUSH
26247: LD_INT 4
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: PUSH
26255: LD_OWVAR 67
26259: ARRAY
26260: PPUSH
26261: LD_INT 0
26263: PPUSH
26264: LD_INT 0
26266: PPUSH
26267: CALL 11989 0 11
// end ;
26271: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 2 do
26272: LD_EXP 15
26276: PUSH
26277: LD_INT 35
26279: LESS
26280: PUSH
26281: LD_EXP 89
26285: PUSH
26286: LD_INT 2
26288: EQUAL
26289: AND
26290: IFFALSE 26339
26292: GO 26294
26294: DISABLE
// begin DialogueOn ;
26295: CALL_OW 6
// SayRadio ( Kurin , D7a-Kur-1 ) ;
26299: LD_EXP 60
26303: PPUSH
26304: LD_STRING D7a-Kur-1
26306: PPUSH
26307: CALL_OW 94
// DialogueOff ;
26311: CALL_OW 7
// counterIndex = 3 ;
26315: LD_ADDR_EXP 89
26319: PUSH
26320: LD_INT 3
26322: ST_TO_ADDR
// timeToArrive = 2 2$00 ;
26323: LD_ADDR_EXP 15
26327: PUSH
26328: LD_INT 4200
26330: ST_TO_ADDR
// kurinOpinion = 0 ;
26331: LD_ADDR_EXP 26
26335: PUSH
26336: LD_INT 0
26338: ST_TO_ADDR
// end ;
26339: END
// every 0 0$1 trigger timeToArrive < 0 0$01 and counterIndex = 3 do
26340: LD_EXP 15
26344: PUSH
26345: LD_INT 35
26347: LESS
26348: PUSH
26349: LD_EXP 89
26353: PUSH
26354: LD_INT 3
26356: EQUAL
26357: AND
26358: IFFALSE 26367
26360: GO 26362
26362: DISABLE
// Lose_Delay ;
26363: CALL 19905 0 0
26367: END
// every 0 0$1 trigger meetNearOmicronBase and FilterUnitsExceptArea ( MeetArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
26368: LD_EXP 19
26372: PUSH
26373: LD_INT 15
26375: PPUSH
26376: LD_INT 22
26378: PUSH
26379: LD_INT 3
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 21
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PPUSH
26400: CALL_OW 71
26404: PUSH
26405: LD_INT 0
26407: EQUAL
26408: AND
26409: IFFALSE 26497
26411: GO 26413
26413: DISABLE
// begin counterEnable = false ;
26414: LD_ADDR_EXP 88
26418: PUSH
26419: LD_INT 0
26421: ST_TO_ADDR
// Display_strings = [ ] ;
26422: LD_ADDR_OWVAR 47
26426: PUSH
26427: EMPTY
26428: ST_TO_ADDR
// SetAreaMapShow ( MeetArea , 0 ) ;
26429: LD_INT 15
26431: PPUSH
26432: LD_INT 0
26434: PPUSH
26435: CALL_OW 424
// canExitBattlefield = false ;
26439: LD_ADDR_EXP 24
26443: PUSH
26444: LD_INT 0
26446: ST_TO_ADDR
// DialogueOn ;
26447: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
26451: LD_EXP 48
26455: PPUSH
26456: LD_STRING D7-Bur-1
26458: PPUSH
26459: CALL_OW 88
// SayRadio ( Kurin , D7-Kur-1 ) ;
26463: LD_EXP 60
26467: PPUSH
26468: LD_STRING D7-Kur-1
26470: PPUSH
26471: CALL_OW 94
// DialogueOff ;
26475: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
26479: LD_STRING M5a
26481: PPUSH
26482: CALL_OW 337
// Query ( QRefuel ) ;
26486: LD_STRING QRefuel
26488: PPUSH
26489: CALL_OW 97
// KirovAttackOmicron ;
26493: CALL 17736 0 0
// end ;
26497: END
// every 1 trigger not canExitBattlefield do var unit ;
26498: LD_EXP 24
26502: NOT
26503: IFFALSE 26672
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
// begin enable ;
26511: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26512: LD_ADDR_VAR 0 1
26516: PUSH
26517: LD_INT 22
26519: PUSH
26520: LD_INT 3
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 21
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 21
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PPUSH
26559: CALL_OW 69
26563: PUSH
26564: FOR_IN
26565: IFFALSE 26670
// if not IsInArea ( unit , OmicronBattlefieldArea ) and ( UnitFilter ( unit , [ f_type , unit_human ] ) or UnitsInside ( unit ) ) then
26567: LD_VAR 0 1
26571: PPUSH
26572: LD_INT 26
26574: PPUSH
26575: CALL_OW 308
26579: NOT
26580: PUSH
26581: LD_VAR 0 1
26585: PPUSH
26586: LD_INT 21
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PPUSH
26596: CALL_OW 72
26600: PUSH
26601: LD_VAR 0 1
26605: PPUSH
26606: CALL_OW 313
26610: OR
26611: AND
26612: IFFALSE 26668
// begin ComMoveToArea ( unit , OmicronBattlefieldArea ) ;
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_INT 26
26621: PPUSH
26622: CALL_OW 113
// if not dialog_stop then
26626: LD_EXP 11
26630: NOT
26631: IFFALSE 26668
// begin dialog_stop = true ;
26633: LD_ADDR_EXP 11
26637: PUSH
26638: LD_INT 1
26640: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26641: LD_EXP 60
26645: PPUSH
26646: LD_STRING D12-Kur-1
26648: PPUSH
26649: CALL_OW 88
// wait ( 0 0$5 ) ;
26653: LD_INT 175
26655: PPUSH
26656: CALL_OW 67
// dialog_stop = false ;
26660: LD_ADDR_EXP 11
26664: PUSH
26665: LD_INT 0
26667: ST_TO_ADDR
// end ; end ;
26668: GO 26564
26670: POP
26671: POP
// end ;
26672: PPOPN 1
26674: END
// every 1 do var unit ;
26675: GO 26677
26677: DISABLE
26678: LD_INT 0
26680: PPUSH
// begin enable ;
26681: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
26682: LD_ADDR_VAR 0 1
26686: PUSH
26687: LD_INT 22
26689: PUSH
26690: LD_INT 3
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 2
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 21
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PPUSH
26729: CALL_OW 69
26733: PUSH
26734: FOR_IN
26735: IFFALSE 26810
// if IsInArea ( unit , SecondKurinBase ) then
26737: LD_VAR 0 1
26741: PPUSH
26742: LD_INT 20
26744: PPUSH
26745: CALL_OW 308
26749: IFFALSE 26808
// begin ComMoveXY ( unit , 200 , 114 ) ;
26751: LD_VAR 0 1
26755: PPUSH
26756: LD_INT 200
26758: PPUSH
26759: LD_INT 114
26761: PPUSH
26762: CALL_OW 111
// if not dialog_stop then
26766: LD_EXP 11
26770: NOT
26771: IFFALSE 26808
// begin dialog_stop = true ;
26773: LD_ADDR_EXP 11
26777: PUSH
26778: LD_INT 1
26780: ST_TO_ADDR
// Say ( Kurin , D12-Kur-1 ) ;
26781: LD_EXP 60
26785: PPUSH
26786: LD_STRING D12-Kur-1
26788: PPUSH
26789: CALL_OW 88
// wait ( 0 0$5 ) ;
26793: LD_INT 175
26795: PPUSH
26796: CALL_OW 67
// dialog_stop = false ;
26800: LD_ADDR_EXP 11
26804: PUSH
26805: LD_INT 0
26807: ST_TO_ADDR
// end ; end ;
26808: GO 26734
26810: POP
26811: POP
// end ;
26812: PPOPN 1
26814: END
// every 1 trigger not meetNearOmicronBase and IsOK ( Sikorski ) do var unit , randDialog ;
26815: LD_EXP 19
26819: NOT
26820: PUSH
26821: LD_INT 290
26823: PPUSH
26824: CALL_OW 302
26828: AND
26829: IFFALSE 27145
26831: GO 26833
26833: DISABLE
26834: LD_INT 0
26836: PPUSH
26837: PPUSH
// begin enable ;
26838: ENABLE
// for unit in FilterUnitsInArea ( OmicronBaseArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) do
26839: LD_ADDR_VAR 0 1
26843: PUSH
26844: LD_INT 13
26846: PPUSH
26847: LD_INT 22
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 2
26859: PUSH
26860: LD_INT 21
26862: PUSH
26863: LD_INT 1
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 21
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 21
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PPUSH
26900: CALL_OW 70
26904: PUSH
26905: FOR_IN
26906: IFFALSE 27143
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) ) < 17 then
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_INT 22
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 21
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 21
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PPUSH
26955: CALL_OW 69
26959: PPUSH
26960: LD_VAR 0 1
26964: PPUSH
26965: CALL_OW 74
26969: PPUSH
26970: CALL_OW 296
26974: PUSH
26975: LD_INT 17
26977: LESS
26978: IFFALSE 27141
// begin ComMoveXY ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , unit ) , 69 , 85 ) ;
26980: LD_INT 22
26982: PUSH
26983: LD_INT 3
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: LD_INT 21
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 21
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: CALL_OW 69
27026: PPUSH
27027: LD_VAR 0 1
27031: PPUSH
27032: CALL_OW 74
27036: PPUSH
27037: LD_INT 69
27039: PPUSH
27040: LD_INT 85
27042: PPUSH
27043: CALL_OW 111
// randDialog = rand ( 1 , 2 ) ;
27047: LD_ADDR_VAR 0 2
27051: PUSH
27052: LD_INT 1
27054: PPUSH
27055: LD_INT 2
27057: PPUSH
27058: CALL_OW 12
27062: ST_TO_ADDR
// if not dialog_stop then
27063: LD_EXP 11
27067: NOT
27068: IFFALSE 27141
// begin dialog_stop = true ;
27070: LD_ADDR_EXP 11
27074: PUSH
27075: LD_INT 1
27077: ST_TO_ADDR
// if randDialog = 1 or not IsOK ( Gnyevko ) then
27078: LD_VAR 0 2
27082: PUSH
27083: LD_INT 1
27085: EQUAL
27086: PUSH
27087: LD_EXP 49
27091: PPUSH
27092: CALL_OW 302
27096: NOT
27097: OR
27098: IFFALSE 27114
// SayRadio ( Kurin , D11-Kur-1 ) else
27100: LD_EXP 60
27104: PPUSH
27105: LD_STRING D11-Kur-1
27107: PPUSH
27108: CALL_OW 94
27112: GO 27126
// Say ( Gnyevko , D11-Gny-1 ) ;
27114: LD_EXP 49
27118: PPUSH
27119: LD_STRING D11-Gny-1
27121: PPUSH
27122: CALL_OW 88
// wait ( 0 0$5 ) ;
27126: LD_INT 175
27128: PPUSH
27129: CALL_OW 67
// dialog_stop = false ;
27133: LD_ADDR_EXP 11
27137: PUSH
27138: LD_INT 0
27140: ST_TO_ADDR
// end ; end ;
27141: GO 26905
27143: POP
27144: POP
// end ;
27145: PPOPN 2
27147: END
// every 0 0$1 trigger IsDead ( Sikorski ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) < 5 do var i , tmpUs , tmpRu , building , beriaBuildings , nearBuilding , turrets , nearTurrets ;
27148: LD_INT 290
27150: PPUSH
27151: CALL_OW 301
27155: PUSH
27156: LD_INT 22
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 21
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 69
27184: PUSH
27185: LD_INT 5
27187: LESS
27188: AND
27189: IFFALSE 29467
27191: GO 27193
27193: DISABLE
27194: LD_INT 0
27196: PPUSH
27197: PPUSH
27198: PPUSH
27199: PPUSH
27200: PPUSH
27201: PPUSH
27202: PPUSH
27203: PPUSH
// begin omicronSurrender = true ;
27204: LD_ADDR_EXP 23
27208: PUSH
27209: LD_INT 1
27211: ST_TO_ADDR
// canExitBattlefield = true ;
27212: LD_ADDR_EXP 24
27216: PUSH
27217: LD_INT 1
27219: ST_TO_ADDR
// enableOmicronAI = false ;
27220: LD_ADDR_EXP 29
27224: PUSH
27225: LD_INT 0
27227: ST_TO_ADDR
// endCutscene = true ;
27228: LD_ADDR_EXP 31
27232: PUSH
27233: LD_INT 1
27235: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_friend , false ) ;
27236: LD_INT 1
27238: PPUSH
27239: LD_INT 3
27241: PPUSH
27242: LD_INT 1
27244: PPUSH
27245: LD_INT 0
27247: PPUSH
27248: CALL_OW 80
// SetAttitude ( 2 , 3 , att_friend , true ) ;
27252: LD_INT 2
27254: PPUSH
27255: LD_INT 3
27257: PPUSH
27258: LD_INT 1
27260: PPUSH
27261: LD_INT 1
27263: PPUSH
27264: CALL_OW 80
// CenterNowOnUnits ( Burlak ) ;
27268: LD_EXP 48
27272: PPUSH
27273: CALL_OW 87
// uc_side = 1 ;
27277: LD_ADDR_OWVAR 20
27281: PUSH
27282: LD_INT 1
27284: ST_TO_ADDR
// uc_nation = 1 ;
27285: LD_ADDR_OWVAR 21
27289: PUSH
27290: LD_INT 1
27292: ST_TO_ADDR
// hc_name :=  ;
27293: LD_ADDR_OWVAR 26
27297: PUSH
27298: LD_STRING 
27300: ST_TO_ADDR
// hc_gallery =  ;
27301: LD_ADDR_OWVAR 33
27305: PUSH
27306: LD_STRING 
27308: ST_TO_ADDR
// PrepareSoldier ( sex_male , 1 ) ;
27309: LD_INT 1
27311: PPUSH
27312: LD_INT 1
27314: PPUSH
27315: CALL_OW 381
// tmpUs = CreateHuman ;
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: CALL_OW 44
27328: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ f_side , 3 ] ) ) ;
27329: LD_INT 22
27331: PUSH
27332: LD_INT 3
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PPUSH
27339: CALL_OW 69
27343: PPUSH
27344: CALL_OW 141
// InGameOn ;
27348: CALL_OW 8
// DialogueOn ;
27352: CALL_OW 6
// CenterOnXY ( 26 , 33 ) ;
27356: LD_INT 26
27358: PPUSH
27359: LD_INT 33
27361: PPUSH
27362: CALL_OW 84
// SayRadio ( tmpUs , D8-Sol1-1 ) ;
27366: LD_VAR 0 2
27370: PPUSH
27371: LD_STRING D8-Sol1-1
27373: PPUSH
27374: CALL_OW 94
// if IsOk ( Kovalyuk ) then
27378: LD_EXP 51
27382: PPUSH
27383: CALL_OW 302
27387: IFFALSE 27401
// Say ( Kovalyuk , D8-Kov-1 ) ;
27389: LD_EXP 51
27393: PPUSH
27394: LD_STRING D8-Kov-1
27396: PPUSH
27397: CALL_OW 88
// tmpRu = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) , D8-RSol1-1 ,  , false , false ) ;
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 22
27408: PUSH
27409: LD_INT 3
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 21
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 26
27428: PUSH
27429: LD_INT 1
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: PPUSH
27441: CALL_OW 69
27445: PPUSH
27446: LD_STRING D8-RSol1-1
27448: PPUSH
27449: LD_STRING 
27451: PPUSH
27452: LD_INT 0
27454: PPUSH
27455: LD_INT 0
27457: PPUSH
27458: CALL 6976 0 5
27462: ST_TO_ADDR
// if IsOk ( Gnyevko ) then
27463: LD_EXP 49
27467: PPUSH
27468: CALL_OW 302
27472: IFFALSE 27486
// Say ( Gnyevko , D8-Gny-1 ) ;
27474: LD_EXP 49
27478: PPUSH
27479: LD_STRING D8-Gny-1
27481: PPUSH
27482: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff tmpRu , D8-RSol2-1 ,  , false , false ) ;
27486: LD_INT 22
27488: PUSH
27489: LD_INT 3
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 21
27498: PUSH
27499: LD_INT 1
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 26
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PPUSH
27521: CALL_OW 69
27525: PUSH
27526: LD_VAR 0 3
27530: DIFF
27531: PPUSH
27532: LD_STRING D8-RSol2-1
27534: PPUSH
27535: LD_STRING 
27537: PPUSH
27538: LD_INT 0
27540: PPUSH
27541: LD_INT 0
27543: PPUSH
27544: CALL 6976 0 5
// DialogueOff ;
27548: CALL_OW 7
// PrepareArabian ;
27552: CALL 6424 0 0
// CenterNowOnXY ( 234 , 122 ) ;
27556: LD_INT 234
27558: PPUSH
27559: LD_INT 122
27561: PPUSH
27562: CALL_OW 86
// ComAgressiveMove ( northGroup , 221 , 110 ) ;
27566: LD_EXP 86
27570: PPUSH
27571: LD_INT 221
27573: PPUSH
27574: LD_INT 110
27576: PPUSH
27577: CALL_OW 114
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
27581: LD_EXP 87
27585: PPUSH
27586: LD_INT 21
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PPUSH
27596: CALL_OW 72
27600: PPUSH
27601: LD_INT 221
27603: PPUSH
27604: LD_INT 110
27606: PPUSH
27607: CALL_OW 114
// wait ( 0 0$7 ) ;
27611: LD_INT 245
27613: PPUSH
27614: CALL_OW 67
// AddComAgressiveMove ( southGroup , 221 , 110 ) ;
27618: LD_EXP 87
27622: PPUSH
27623: LD_INT 221
27625: PPUSH
27626: LD_INT 110
27628: PPUSH
27629: CALL_OW 174
// wait ( 0 0$8 ) ;
27633: LD_INT 280
27635: PPUSH
27636: CALL_OW 67
// music_nat = nation_arabian ;
27640: LD_ADDR_OWVAR 71
27644: PUSH
27645: LD_INT 2
27647: ST_TO_ADDR
// music_class = music_combat ;
27648: LD_ADDR_OWVAR 72
27652: PUSH
27653: LD_INT 1
27655: ST_TO_ADDR
// game_speed = 4 ;
27656: LD_ADDR_OWVAR 65
27660: PUSH
27661: LD_INT 4
27663: ST_TO_ADDR
// DialogueOn ;
27664: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-1 ) ;
27668: LD_EXP 81
27672: PPUSH
27673: LD_STRING D9-Gri-1
27675: PPUSH
27676: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
27680: LD_EXP 60
27684: PPUSH
27685: LD_STRING D9-Kur-1
27687: PPUSH
27688: CALL_OW 94
// DialogueOff ;
27692: CALL_OW 7
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , 158 , 105 ) ;
27696: LD_EXP 77
27700: PPUSH
27701: LD_INT 25
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PPUSH
27711: CALL_OW 72
27715: PPUSH
27716: LD_INT 158
27718: PPUSH
27719: LD_INT 105
27721: PPUSH
27722: CALL_OW 111
// ComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , 158 , 105 ) ;
27726: LD_EXP 77
27730: PPUSH
27731: LD_INT 25
27733: PUSH
27734: LD_INT 4
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PPUSH
27741: CALL_OW 72
27745: PPUSH
27746: LD_INT 158
27748: PPUSH
27749: LD_INT 105
27751: PPUSH
27752: CALL_OW 111
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_engineer ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
27756: LD_EXP 77
27760: PPUSH
27761: LD_INT 25
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 72
27775: PPUSH
27776: LD_EXP 59
27780: PPUSH
27781: CALL_OW 250
27785: PPUSH
27786: LD_EXP 59
27790: PPUSH
27791: CALL_OW 251
27795: PPUSH
27796: CALL_OW 171
// AddComMoveXY ( UnitFilter ( secondBaseTeam , [ f_class , class_scientistic ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
27800: LD_EXP 77
27804: PPUSH
27805: LD_INT 25
27807: PUSH
27808: LD_INT 4
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PPUSH
27815: CALL_OW 72
27819: PPUSH
27820: LD_EXP 59
27824: PPUSH
27825: CALL_OW 250
27829: PPUSH
27830: LD_EXP 59
27834: PPUSH
27835: CALL_OW 251
27839: PPUSH
27840: CALL_OW 171
// ComMoveXY ( kirovTransportCargo , 158 , 105 ) ;
27844: LD_EXP 73
27848: PPUSH
27849: LD_INT 158
27851: PPUSH
27852: LD_INT 105
27854: PPUSH
27855: CALL_OW 111
// AddComMoveXY ( kirovTransportCargo , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
27859: LD_EXP 73
27863: PPUSH
27864: LD_EXP 59
27868: PPUSH
27869: CALL_OW 250
27873: PPUSH
27874: LD_EXP 59
27878: PPUSH
27879: CALL_OW 251
27883: PPUSH
27884: CALL_OW 171
// wait ( 0 0$2.5 ) ;
27888: LD_INT 88
27890: PPUSH
27891: CALL_OW 67
// DialogueOn ;
27895: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-2 ) ;
27899: LD_EXP 81
27903: PPUSH
27904: LD_STRING D9-Gri-2
27906: PPUSH
27907: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
27911: LD_EXP 60
27915: PPUSH
27916: LD_STRING D9-Kur-2
27918: PPUSH
27919: CALL_OW 94
// DialogueOff ;
27923: CALL_OW 7
// repeat wait ( 1 ) ;
27927: LD_INT 1
27929: PPUSH
27930: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
27934: LD_EXP 81
27938: PPUSH
27939: CALL_OW 256
27943: PUSH
27944: LD_INT 1000
27946: LESS
27947: IFFALSE 27927
// DialogueOn ;
27949: CALL_OW 6
// SayRadio ( Grishko , D9-Gri-3 ) ;
27953: LD_EXP 81
27957: PPUSH
27958: LD_STRING D9-Gri-3
27960: PPUSH
27961: CALL_OW 94
// DialogueOff ;
27965: CALL_OW 7
// KillUnit ( Grishko ) ;
27969: LD_EXP 81
27973: PPUSH
27974: CALL_OW 66
// wait ( 0 0$12 ) ;
27978: LD_INT 420
27980: PPUSH
27981: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
27985: LD_EXP 60
27989: PPUSH
27990: CALL_OW 87
// SayRadio ( Kurin , D9-Kur-3 ) ;
27994: LD_EXP 60
27998: PPUSH
27999: LD_STRING D9-Kur-3
28001: PPUSH
28002: CALL_OW 94
// CenterNowOnXY ( 176 , 110 ) ;
28006: LD_INT 176
28008: PPUSH
28009: LD_INT 110
28011: PPUSH
28012: CALL_OW 86
// ComAgressiveMove ( UnitFilter ( southGroup , [ f_type , unit_human ] ) , 221 , 110 ) ;
28016: LD_EXP 87
28020: PPUSH
28021: LD_INT 21
28023: PUSH
28024: LD_INT 1
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PPUSH
28031: CALL_OW 72
28035: PPUSH
28036: LD_INT 221
28038: PPUSH
28039: LD_INT 110
28041: PPUSH
28042: CALL_OW 114
// ComAgressiveMove ( northGroup , 161 , 109 ) ;
28046: LD_EXP 86
28050: PPUSH
28051: LD_INT 161
28053: PPUSH
28054: LD_INT 109
28056: PPUSH
28057: CALL_OW 114
// wait ( 0 0$7 ) ;
28061: LD_INT 245
28063: PPUSH
28064: CALL_OW 67
// ComAgressiveMove ( southGroup , 161 , 109 ) ;
28068: LD_EXP 87
28072: PPUSH
28073: LD_INT 161
28075: PPUSH
28076: LD_INT 109
28078: PPUSH
28079: CALL_OW 114
// wait ( 0 0$11 ) ;
28083: LD_INT 385
28085: PPUSH
28086: CALL_OW 67
// ComEnterUnit ( Kurin , kirovDepot ) ;
28090: LD_EXP 60
28094: PPUSH
28095: LD_EXP 66
28099: PPUSH
28100: CALL_OW 120
// DialogueOn ;
28104: CALL_OW 6
// SayRadio ( Kurin , D9a-Kur-1 ) ;
28108: LD_EXP 60
28112: PPUSH
28113: LD_STRING D9a-Kur-1
28115: PPUSH
28116: CALL_OW 94
// Say ( Burlak , D9a-Bur-1 ) ;
28120: LD_EXP 48
28124: PPUSH
28125: LD_STRING D9a-Bur-1
28127: PPUSH
28128: CALL_OW 88
// SayRadio ( Kurin , D9a-Kur-2 ) ;
28132: LD_EXP 60
28136: PPUSH
28137: LD_STRING D9a-Kur-2
28139: PPUSH
28140: CALL_OW 94
// DialogueOff ;
28144: CALL_OW 7
// ComExitBuilding ( survivorsArabianAttack ) ;
28148: LD_EXP 78
28152: PPUSH
28153: CALL_OW 122
// wait ( 0 0$1 ) ;
28157: LD_INT 35
28159: PPUSH
28160: CALL_OW 67
// ComMoveXY ( survivorsArabianAttack , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28164: LD_EXP 78
28168: PPUSH
28169: LD_EXP 59
28173: PPUSH
28174: CALL_OW 250
28178: PPUSH
28179: LD_EXP 59
28183: PPUSH
28184: CALL_OW 251
28188: PPUSH
28189: CALL_OW 111
// immortalSurvivors = true ;
28193: LD_ADDR_EXP 25
28197: PUSH
28198: LD_INT 1
28200: ST_TO_ADDR
// for tmpUS in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) do
28201: LD_ADDR_VAR 0 2
28205: PUSH
28206: LD_INT 22
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 21
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 50
28228: PUSH
28229: EMPTY
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: PPUSH
28237: CALL_OW 69
28241: PUSH
28242: FOR_IN
28243: IFFALSE 28256
// RemoveUnit ( tmpUS ) ;
28245: LD_VAR 0 2
28249: PPUSH
28250: CALL_OW 64
28254: GO 28242
28256: POP
28257: POP
// repeat wait ( 0 0$1 ) ;
28258: LD_INT 35
28260: PPUSH
28261: CALL_OW 67
// until IsDead ( Kurin ) ;
28265: LD_EXP 60
28269: PPUSH
28270: CALL_OW 301
28274: IFFALSE 28258
// wait ( 0 0$1 ) ;
28276: LD_INT 35
28278: PPUSH
28279: CALL_OW 67
// nearTurrets = [ ] ;
28283: LD_ADDR_VAR 0 8
28287: PUSH
28288: EMPTY
28289: ST_TO_ADDR
// turrets = FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_ok ] ] ) ;
28290: LD_ADDR_VAR 0 7
28294: PUSH
28295: LD_INT 22
28297: PUSH
28298: LD_INT 6
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 30
28307: PUSH
28308: LD_INT 32
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 50
28317: PUSH
28318: EMPTY
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 69
28330: ST_TO_ADDR
// for i = 1 to 2 do
28331: LD_ADDR_VAR 0 1
28335: PUSH
28336: DOUBLE
28337: LD_INT 1
28339: DEC
28340: ST_TO_ADDR
28341: LD_INT 2
28343: PUSH
28344: FOR_TO
28345: IFFALSE 28454
// begin nearTurrets = nearTurrets ^ NearestUnitToUnit ( turrets , beriaDepot ) ;
28347: LD_ADDR_VAR 0 8
28351: PUSH
28352: LD_VAR 0 8
28356: PUSH
28357: LD_VAR 0 7
28361: PPUSH
28362: LD_EXP 59
28366: PPUSH
28367: CALL_OW 74
28371: ADD
28372: ST_TO_ADDR
// turrets = turrets diff nearTurrets ;
28373: LD_ADDR_VAR 0 7
28377: PUSH
28378: LD_VAR 0 7
28382: PUSH
28383: LD_VAR 0 8
28387: DIFF
28388: ST_TO_ADDR
// tmpRu = UnitsInside ( nearTurrets [ i ] ) [ 1 ] ;
28389: LD_ADDR_VAR 0 3
28393: PUSH
28394: LD_VAR 0 8
28398: PUSH
28399: LD_VAR 0 1
28403: ARRAY
28404: PPUSH
28405: CALL_OW 313
28409: PUSH
28410: LD_INT 1
28412: ARRAY
28413: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28414: LD_VAR 0 3
28418: PPUSH
28419: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28423: LD_VAR 0 3
28427: PPUSH
28428: LD_EXP 59
28432: PPUSH
28433: CALL_OW 250
28437: PPUSH
28438: LD_EXP 59
28442: PPUSH
28443: CALL_OW 251
28447: PPUSH
28448: CALL_OW 171
// end ;
28452: GO 28344
28454: POP
28455: POP
// tmpRu = UnitsInside ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) [ 1 ] ) ;
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_INT 22
28463: PUSH
28464: LD_INT 6
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 21
28473: PUSH
28474: LD_INT 3
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 30
28486: PUSH
28487: LD_INT 6
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 30
28496: PUSH
28497: LD_INT 7
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: LIST
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: LIST
28513: PPUSH
28514: CALL_OW 69
28518: PUSH
28519: LD_INT 1
28521: ARRAY
28522: PPUSH
28523: CALL_OW 313
28527: ST_TO_ADDR
// ComExitBuilding ( tmpRu ) ;
28528: LD_VAR 0 3
28532: PPUSH
28533: CALL_OW 122
// AddComMoveXY ( tmpRu , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28537: LD_VAR 0 3
28541: PPUSH
28542: LD_EXP 59
28546: PPUSH
28547: CALL_OW 250
28551: PPUSH
28552: LD_EXP 59
28556: PPUSH
28557: CALL_OW 251
28561: PPUSH
28562: CALL_OW 171
// wait ( 0 0$14 ) ;
28566: LD_INT 490
28568: PPUSH
28569: CALL_OW 67
// ComExitVehicle ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
28573: LD_INT 26
28575: PPUSH
28576: LD_INT 22
28578: PUSH
28579: LD_INT 6
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 21
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PPUSH
28600: CALL_OW 70
28604: PPUSH
28605: CALL_OW 121
// for i in FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) do
28609: LD_ADDR_VAR 0 1
28613: PUSH
28614: LD_INT 26
28616: PPUSH
28617: LD_INT 22
28619: PUSH
28620: LD_INT 6
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 21
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PPUSH
28641: CALL_OW 70
28645: PUSH
28646: FOR_IN
28647: IFFALSE 28712
// begin tmpRu = UnitsInside ( i ) ;
28649: LD_ADDR_VAR 0 3
28653: PUSH
28654: LD_VAR 0 1
28658: PPUSH
28659: CALL_OW 313
28663: ST_TO_ADDR
// ComExitVehicle ( tmpRu [ 1 ] ) ;
28664: LD_VAR 0 3
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PPUSH
28673: CALL_OW 121
// AddComMoveXY ( tmpRu [ 1 ] , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28677: LD_VAR 0 3
28681: PUSH
28682: LD_INT 1
28684: ARRAY
28685: PPUSH
28686: LD_EXP 59
28690: PPUSH
28691: CALL_OW 250
28695: PPUSH
28696: LD_EXP 59
28700: PPUSH
28701: CALL_OW 251
28705: PPUSH
28706: CALL_OW 171
// end ;
28710: GO 28646
28712: POP
28713: POP
// wait ( 0 0$1 ) ;
28714: LD_INT 35
28716: PPUSH
28717: CALL_OW 67
// AddComMoveXY ( FilterUnitsInArea ( OmicronBattlefieldArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , GetX ( beriaDepot ) , GetY ( beriaDepot ) ) ;
28721: LD_INT 26
28723: PPUSH
28724: LD_INT 22
28726: PUSH
28727: LD_INT 6
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 21
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PPUSH
28748: CALL_OW 70
28752: PPUSH
28753: LD_EXP 59
28757: PPUSH
28758: CALL_OW 250
28762: PPUSH
28763: LD_EXP 59
28767: PPUSH
28768: CALL_OW 251
28772: PPUSH
28773: CALL_OW 171
// ComExitVehicle ( UnitsInside ( kirovTransportCargo ) [ 1 ] ) ;
28777: LD_EXP 73
28781: PPUSH
28782: CALL_OW 313
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: PPUSH
28791: CALL_OW 121
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
28795: LD_INT 22
28797: PUSH
28798: LD_INT 3
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 21
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PPUSH
28819: CALL_OW 69
28823: PPUSH
28824: CALL_OW 121
// wait ( 0 0$1 ) ;
28828: LD_INT 35
28830: PPUSH
28831: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
28835: LD_INT 22
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 21
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PPUSH
28859: CALL_OW 69
28863: PPUSH
28864: LD_EXP 61
28868: PPUSH
28869: CALL_OW 250
28873: PPUSH
28874: LD_EXP 61
28878: PPUSH
28879: CALL_OW 251
28883: PPUSH
28884: CALL_OW 111
// repeat ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , GetX ( Popov ) , GetY ( Popov ) ) ;
28888: LD_INT 22
28890: PUSH
28891: LD_INT 3
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 21
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PPUSH
28912: CALL_OW 69
28916: PPUSH
28917: LD_EXP 61
28921: PPUSH
28922: CALL_OW 250
28926: PPUSH
28927: LD_EXP 61
28931: PPUSH
28932: CALL_OW 251
28936: PPUSH
28937: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
28941: LD_EXP 48
28945: PPUSH
28946: CALL_OW 87
// wait ( 0 0$1 ) ;
28950: LD_INT 35
28952: PPUSH
28953: CALL_OW 67
// until GetDistUnits ( Burlak , Popov ) < 8 ;
28957: LD_EXP 48
28961: PPUSH
28962: LD_EXP 61
28966: PPUSH
28967: CALL_OW 296
28971: PUSH
28972: LD_INT 8
28974: LESS
28975: IFFALSE 28888
// CenterNowOnUnits ( [ Burlak , Popov ] ) ;
28977: LD_EXP 48
28981: PUSH
28982: LD_EXP 61
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PPUSH
28991: CALL_OW 87
// ComTurnUnit ( Burlak , Popov ) ;
28995: LD_EXP 48
28999: PPUSH
29000: LD_EXP 61
29004: PPUSH
29005: CALL_OW 119
// ComTurnUnit ( Popov , Burlak ) ;
29009: LD_EXP 61
29013: PPUSH
29014: LD_EXP 48
29018: PPUSH
29019: CALL_OW 119
// Say ( Burlak , D10a-Bur-1 ) ;
29023: LD_EXP 48
29027: PPUSH
29028: LD_STRING D10a-Bur-1
29030: PPUSH
29031: CALL_OW 88
// Say ( Popov , D10a-Pop-1 ) ;
29035: LD_EXP 61
29039: PPUSH
29040: LD_STRING D10a-Pop-1
29042: PPUSH
29043: CALL_OW 88
// Say ( Burlak , D10a-Bur-2 ) ;
29047: LD_EXP 48
29051: PPUSH
29052: LD_STRING D10a-Bur-2
29054: PPUSH
29055: CALL_OW 88
// Say ( Popov , D10a-Pop-2 ) ;
29059: LD_EXP 61
29063: PPUSH
29064: LD_STRING D10a-Pop-2
29066: PPUSH
29067: CALL_OW 88
// Say ( Burlak , D10a-Bur-3 ) ;
29071: LD_EXP 48
29075: PPUSH
29076: LD_STRING D10a-Bur-3
29078: PPUSH
29079: CALL_OW 88
// Say ( Popov , D10a-Pop-3 ) ;
29083: LD_EXP 61
29087: PPUSH
29088: LD_STRING D10a-Pop-3
29090: PPUSH
29091: CALL_OW 88
// Say ( Burlak , D10a-Bur-4 ) ;
29095: LD_EXP 48
29099: PPUSH
29100: LD_STRING D10a-Bur-4
29102: PPUSH
29103: CALL_OW 88
// Say ( Popov , D10a-Pop-4 ) ;
29107: LD_EXP 61
29111: PPUSH
29112: LD_STRING D10a-Pop-4
29114: PPUSH
29115: CALL_OW 88
// Say ( Burlak , D10a-Bur-5 ) ;
29119: LD_EXP 48
29123: PPUSH
29124: LD_STRING D10a-Bur-5
29126: PPUSH
29127: CALL_OW 88
// Say ( Popov , D10a-Pop-5 ) ;
29131: LD_EXP 61
29135: PPUSH
29136: LD_STRING D10a-Pop-5
29138: PPUSH
29139: CALL_OW 88
// survivorsArabianAttack = [ ] ;
29143: LD_ADDR_EXP 78
29147: PUSH
29148: EMPTY
29149: ST_TO_ADDR
// survivorsArabianAttack = FilterUnitsInArea ( BigBeriaBaseArea , [ [ f_side , 6 ] , [ f_ok ] , [ f_type , unit_human ] ] ) ;
29150: LD_ADDR_EXP 78
29154: PUSH
29155: LD_INT 31
29157: PPUSH
29158: LD_INT 22
29160: PUSH
29161: LD_INT 6
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 50
29170: PUSH
29171: EMPTY
29172: LIST
29173: PUSH
29174: LD_INT 21
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: LIST
29188: PPUSH
29189: CALL_OW 70
29193: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 83 , 157 ) ;
29194: LD_INT 22
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 21
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PPUSH
29218: CALL_OW 69
29222: PPUSH
29223: LD_INT 83
29225: PPUSH
29226: LD_INT 157
29228: PPUSH
29229: CALL_OW 111
// ComMoveXY ( survivorsArabianAttack , 83 , 157 ) ;
29233: LD_EXP 78
29237: PPUSH
29238: LD_INT 83
29240: PPUSH
29241: LD_INT 157
29243: PPUSH
29244: CALL_OW 111
// repeat CenterNowOnUnits ( Burlak ) ;
29248: LD_EXP 48
29252: PPUSH
29253: CALL_OW 87
// wait ( 0 0$1 ) ;
29257: LD_INT 35
29259: PPUSH
29260: CALL_OW 67
// until GetDistUnits ( Burlak , beriaDepot ) > 23 ;
29264: LD_EXP 48
29268: PPUSH
29269: LD_EXP 59
29273: PPUSH
29274: CALL_OW 296
29278: PUSH
29279: LD_INT 23
29281: GREATER
29282: IFFALSE 29248
// PlaceSeeing ( 113 , 96 , 3 , - 12 ) ;
29284: LD_INT 113
29286: PPUSH
29287: LD_INT 96
29289: PPUSH
29290: LD_INT 3
29292: PPUSH
29293: LD_INT 12
29295: NEG
29296: PPUSH
29297: CALL_OW 330
// CenterNowOnXY ( 113 , 96 ) ;
29301: LD_INT 113
29303: PPUSH
29304: LD_INT 96
29306: PPUSH
29307: CALL_OW 86
// canDestroyBeriaBase = true ;
29311: LD_ADDR_EXP 28
29315: PUSH
29316: LD_INT 1
29318: ST_TO_ADDR
// beriaBuildings = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
29319: LD_ADDR_VAR 0 5
29323: PUSH
29324: LD_INT 25
29326: PPUSH
29327: LD_INT 22
29329: PUSH
29330: LD_INT 3
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 21
29339: PUSH
29340: LD_INT 3
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PPUSH
29351: CALL_OW 70
29355: ST_TO_ADDR
// for i = 1 to beriaBuildings do
29356: LD_ADDR_VAR 0 1
29360: PUSH
29361: DOUBLE
29362: LD_INT 1
29364: DEC
29365: ST_TO_ADDR
29366: LD_VAR 0 5
29370: PUSH
29371: FOR_TO
29372: IFFALSE 29454
// begin nearBuilding = NearestUnitToUnit ( beriaBuildings , FilterAllUnits ( [ f_side , 2 ] ) [ 1 ] ) ;
29374: LD_ADDR_VAR 0 6
29378: PUSH
29379: LD_VAR 0 5
29383: PPUSH
29384: LD_INT 22
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PPUSH
29394: CALL_OW 69
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: CALL_OW 74
29407: ST_TO_ADDR
// beriaBuildings = beriaBuildings diff nearBuilding ;
29408: LD_ADDR_VAR 0 5
29412: PUSH
29413: LD_VAR 0 5
29417: PUSH
29418: LD_VAR 0 6
29422: DIFF
29423: ST_TO_ADDR
// AddComAttackUnit ( northGroup , nearBuilding ) ;
29424: LD_EXP 86
29428: PPUSH
29429: LD_VAR 0 6
29433: PPUSH
29434: CALL_OW 175
// AddComAttackUnit ( southGroup , nearBuilding ) ;
29438: LD_EXP 87
29442: PPUSH
29443: LD_VAR 0 6
29447: PPUSH
29448: CALL_OW 175
// end ;
29452: GO 29371
29454: POP
29455: POP
// wait ( 0 0$35 ) ;
29456: LD_INT 1225
29458: PPUSH
29459: CALL_OW 67
// FinishMission ;
29463: CALL 19920 0 0
// end ;
29467: PPOPN 8
29469: END
// every 1 trigger immortalSurvivors do var unit ;
29470: LD_EXP 25
29474: IFFALSE 29512
29476: GO 29478
29478: DISABLE
29479: LD_INT 0
29481: PPUSH
// begin enable ;
29482: ENABLE
// for unit in survivorsArabianAttack do
29483: LD_ADDR_VAR 0 1
29487: PUSH
29488: LD_EXP 78
29492: PUSH
29493: FOR_IN
29494: IFFALSE 29510
// SetLives ( unit , 1000 ) ;
29496: LD_VAR 0 1
29500: PPUSH
29501: LD_INT 1000
29503: PPUSH
29504: CALL_OW 234
29508: GO 29493
29510: POP
29511: POP
// end ; end_of_file
29512: PPOPN 1
29514: END
// every 0 0$30 do
29515: GO 29517
29517: DISABLE
// CreateCratesXYR ( rand ( 3 , 5 ) , 76 , 111 , 5 , true ) ;
29518: LD_INT 3
29520: PPUSH
29521: LD_INT 5
29523: PPUSH
29524: CALL_OW 12
29528: PPUSH
29529: LD_INT 76
29531: PPUSH
29532: LD_INT 111
29534: PPUSH
29535: LD_INT 5
29537: PPUSH
29538: LD_INT 1
29540: PPUSH
29541: CALL_OW 56
29545: END
// every 0 0$10 trigger spawnCrates do var spawnDelay ;
29546: LD_EXP 5
29550: IFFALSE 29622
29552: GO 29554
29554: DISABLE
29555: LD_INT 0
29557: PPUSH
// begin wait ( Rand ( 50 , 2 2$00 ) ) ;
29558: LD_INT 50
29560: PPUSH
29561: LD_INT 4200
29563: PPUSH
29564: CALL_OW 12
29568: PPUSH
29569: CALL_OW 67
// wait ( spawnDelay * 0 0$5 ) ;
29573: LD_VAR 0 1
29577: PUSH
29578: LD_INT 175
29580: MUL
29581: PPUSH
29582: CALL_OW 67
// spawnDelay = spawnDelay + 1 ;
29586: LD_ADDR_VAR 0 1
29590: PUSH
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 1
29598: PLUS
29599: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
29600: LD_INT 3
29602: PPUSH
29603: LD_INT 5
29605: PPUSH
29606: CALL_OW 12
29610: PPUSH
29611: LD_INT 6
29613: PPUSH
29614: LD_INT 1
29616: PPUSH
29617: CALL_OW 55
// enable ;
29621: ENABLE
// end ; end_of_file
29622: PPOPN 1
29624: END
// export counterEnable , counterIndex ; every 0 0$1 trigger counterEnable do
29625: LD_EXP 88
29629: IFFALSE 29792
29631: GO 29633
29633: DISABLE
// begin enable ;
29634: ENABLE
// case counterIndex of 1 :
29635: LD_EXP 89
29639: PUSH
29640: LD_INT 1
29642: DOUBLE
29643: EQUAL
29644: IFTRUE 29648
29646: GO 29665
29648: POP
// timeToPrepareAttack = timeToPrepareAttack - 0 0$01 ; 2 :
29649: LD_ADDR_EXP 40
29653: PUSH
29654: LD_EXP 40
29658: PUSH
29659: LD_INT 35
29661: MINUS
29662: ST_TO_ADDR
29663: GO 29792
29665: LD_INT 2
29667: DOUBLE
29668: EQUAL
29669: IFTRUE 29673
29671: GO 29707
29673: POP
// begin display_strings = [ #Ru03-1 , timeToArrive ] ;
29674: LD_ADDR_OWVAR 47
29678: PUSH
29679: LD_STRING #Ru03-1
29681: PUSH
29682: LD_EXP 15
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
29691: LD_ADDR_EXP 15
29695: PUSH
29696: LD_EXP 15
29700: PUSH
29701: LD_INT 35
29703: MINUS
29704: ST_TO_ADDR
// end ; 3 :
29705: GO 29792
29707: LD_INT 3
29709: DOUBLE
29710: EQUAL
29711: IFTRUE 29715
29713: GO 29749
29715: POP
// begin display_strings = [ #Ru03-2 , timeToArrive ] ;
29716: LD_ADDR_OWVAR 47
29720: PUSH
29721: LD_STRING #Ru03-2
29723: PUSH
29724: LD_EXP 15
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: ST_TO_ADDR
// timeToArrive = timeToArrive - 0 0$01 ;
29733: LD_ADDR_EXP 15
29737: PUSH
29738: LD_EXP 15
29742: PUSH
29743: LD_INT 35
29745: MINUS
29746: ST_TO_ADDR
// end ; 4 :
29747: GO 29792
29749: LD_INT 4
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29791
29757: POP
// begin display_strings = [ #Ru03-3 , extraTime ] ;
29758: LD_ADDR_OWVAR 47
29762: PUSH
29763: LD_STRING #Ru03-3
29765: PUSH
29766: LD_EXP 14
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// extraTime = extraTime - 0 0$01 ;
29775: LD_ADDR_EXP 14
29779: PUSH
29780: LD_EXP 14
29784: PUSH
29785: LD_INT 35
29787: MINUS
29788: ST_TO_ADDR
// end ; end ;
29789: GO 29792
29791: POP
// end ; end_of_file
29792: END
// every 7 7$0 do
29793: GO 29795
29795: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 0 , NorthAmericanSpawnArea ) ;
29796: LD_INT 3
29798: PPUSH
29799: LD_INT 1
29801: PPUSH
29802: LD_INT 0
29804: PPUSH
29805: LD_INT 7
29807: PPUSH
29808: CALL 5807 0 4
29812: END
// every 12 12$0 do
29813: GO 29815
29815: DISABLE
// PrepareAmericanSupportTroops ( 2 , 2 , 1 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ;
29816: LD_INT 2
29818: PPUSH
29819: LD_INT 2
29821: PPUSH
29822: LD_INT 1
29824: PPUSH
29825: LD_INT 9
29827: PUSH
29828: LD_INT 8
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: PPUSH
29838: LD_INT 2
29840: PPUSH
29841: CALL_OW 12
29845: ARRAY
29846: PPUSH
29847: CALL 5807 0 4
29851: END
// every 20 20$0 do
29852: GO 29854
29854: DISABLE
// PrepareAmericanSupportTroops ( 4 , 2 , 0 , NorthAmericanSpawnArea ) ;
29855: LD_INT 4
29857: PPUSH
29858: LD_INT 2
29860: PPUSH
29861: LD_INT 0
29863: PPUSH
29864: LD_INT 7
29866: PPUSH
29867: CALL 5807 0 4
29871: END
// every 23 23$0 do
29872: GO 29874
29874: DISABLE
// PrepareAmericanSupportTroops ( 3 , 1 , 2 , [ SouthAmericanSpawnArea1 , SouthAmericanSpawnArea2 ] [ Rand ( 1 , 2 ) ] ) ; end_of_file
29875: LD_INT 3
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: LD_INT 2
29883: PPUSH
29884: LD_INT 9
29886: PUSH
29887: LD_INT 8
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PPUSH
29897: LD_INT 2
29899: PPUSH
29900: CALL_OW 12
29904: ARRAY
29905: PPUSH
29906: CALL 5807 0 4
29910: END
// export function Nef_PrepareNature ; var i , un ; begin
29911: LD_INT 0
29913: PPUSH
29914: PPUSH
29915: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
29916: LD_ADDR_VAR 0 2
29920: PUSH
29921: DOUBLE
29922: LD_INT 1
29924: DEC
29925: ST_TO_ADDR
29926: LD_EXP 32
29930: PUSH
29931: LD_INT 1
29933: ARRAY
29934: PUSH
29935: FOR_TO
29936: IFFALSE 30046
// begin uc_side = 0 ;
29938: LD_ADDR_OWVAR 20
29942: PUSH
29943: LD_INT 0
29945: ST_TO_ADDR
// uc_nation = nation_nature ;
29946: LD_ADDR_OWVAR 21
29950: PUSH
29951: LD_INT 0
29953: ST_TO_ADDR
// hc_class = class_apeman ;
29954: LD_ADDR_OWVAR 28
29958: PUSH
29959: LD_INT 12
29961: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
29962: LD_ADDR_OWVAR 31
29966: PUSH
29967: LD_EXP 33
29971: PUSH
29972: LD_INT 1
29974: ARRAY
29975: PUSH
29976: LD_EXP 33
29980: PUSH
29981: LD_INT 2
29983: ARRAY
29984: PUSH
29985: LD_EXP 33
29989: PUSH
29990: LD_INT 3
29992: ARRAY
29993: PUSH
29994: LD_EXP 33
29998: PUSH
29999: LD_INT 4
30001: ARRAY
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30009: LD_ADDR_OWVAR 35
30013: PUSH
30014: LD_EXP 34
30018: ST_TO_ADDR
// un = CreateHuman ;
30019: LD_ADDR_VAR 0 3
30023: PUSH
30024: CALL_OW 44
30028: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30029: LD_VAR 0 3
30033: PPUSH
30034: LD_INT 27
30036: PPUSH
30037: LD_INT 0
30039: PPUSH
30040: CALL_OW 49
// end ;
30044: GO 29935
30046: POP
30047: POP
// for i := 1 to animalsAmount [ 2 ] do
30048: LD_ADDR_VAR 0 2
30052: PUSH
30053: DOUBLE
30054: LD_INT 1
30056: DEC
30057: ST_TO_ADDR
30058: LD_EXP 32
30062: PUSH
30063: LD_INT 2
30065: ARRAY
30066: PUSH
30067: FOR_TO
30068: IFFALSE 30178
// begin uc_side = 0 ;
30070: LD_ADDR_OWVAR 20
30074: PUSH
30075: LD_INT 0
30077: ST_TO_ADDR
// uc_nation = nation_nature ;
30078: LD_ADDR_OWVAR 21
30082: PUSH
30083: LD_INT 0
30085: ST_TO_ADDR
// hc_class = class_phororhacos ;
30086: LD_ADDR_OWVAR 28
30090: PUSH
30091: LD_INT 18
30093: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30094: LD_ADDR_OWVAR 31
30098: PUSH
30099: LD_EXP 33
30103: PUSH
30104: LD_INT 1
30106: ARRAY
30107: PUSH
30108: LD_EXP 33
30112: PUSH
30113: LD_INT 2
30115: ARRAY
30116: PUSH
30117: LD_EXP 33
30121: PUSH
30122: LD_INT 3
30124: ARRAY
30125: PUSH
30126: LD_EXP 33
30130: PUSH
30131: LD_INT 4
30133: ARRAY
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30141: LD_ADDR_OWVAR 35
30145: PUSH
30146: LD_EXP 34
30150: ST_TO_ADDR
// un = CreateHuman ;
30151: LD_ADDR_VAR 0 3
30155: PUSH
30156: CALL_OW 44
30160: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30161: LD_VAR 0 3
30165: PPUSH
30166: LD_INT 27
30168: PPUSH
30169: LD_INT 0
30171: PPUSH
30172: CALL_OW 49
// end ;
30176: GO 30067
30178: POP
30179: POP
// for i := 1 to animalsAmount [ 3 ] do
30180: LD_ADDR_VAR 0 2
30184: PUSH
30185: DOUBLE
30186: LD_INT 1
30188: DEC
30189: ST_TO_ADDR
30190: LD_EXP 32
30194: PUSH
30195: LD_INT 3
30197: ARRAY
30198: PUSH
30199: FOR_TO
30200: IFFALSE 30310
// begin uc_side = 0 ;
30202: LD_ADDR_OWVAR 20
30206: PUSH
30207: LD_INT 0
30209: ST_TO_ADDR
// uc_nation = nation_nature ;
30210: LD_ADDR_OWVAR 21
30214: PUSH
30215: LD_INT 0
30217: ST_TO_ADDR
// hc_class = class_tiger ;
30218: LD_ADDR_OWVAR 28
30222: PUSH
30223: LD_INT 14
30225: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30226: LD_ADDR_OWVAR 31
30230: PUSH
30231: LD_EXP 33
30235: PUSH
30236: LD_INT 1
30238: ARRAY
30239: PUSH
30240: LD_EXP 33
30244: PUSH
30245: LD_INT 2
30247: ARRAY
30248: PUSH
30249: LD_EXP 33
30253: PUSH
30254: LD_INT 3
30256: ARRAY
30257: PUSH
30258: LD_EXP 33
30262: PUSH
30263: LD_INT 4
30265: ARRAY
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30273: LD_ADDR_OWVAR 35
30277: PUSH
30278: LD_EXP 34
30282: ST_TO_ADDR
// un = CreateHuman ;
30283: LD_ADDR_VAR 0 3
30287: PUSH
30288: CALL_OW 44
30292: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30293: LD_VAR 0 3
30297: PPUSH
30298: LD_INT 27
30300: PPUSH
30301: LD_INT 0
30303: PPUSH
30304: CALL_OW 49
// end ;
30308: GO 30199
30310: POP
30311: POP
// for i := 1 to animalsAmount [ 4 ] do
30312: LD_ADDR_VAR 0 2
30316: PUSH
30317: DOUBLE
30318: LD_INT 1
30320: DEC
30321: ST_TO_ADDR
30322: LD_EXP 32
30326: PUSH
30327: LD_INT 4
30329: ARRAY
30330: PUSH
30331: FOR_TO
30332: IFFALSE 30442
// begin uc_side = 0 ;
30334: LD_ADDR_OWVAR 20
30338: PUSH
30339: LD_INT 0
30341: ST_TO_ADDR
// uc_nation = nation_nature ;
30342: LD_ADDR_OWVAR 21
30346: PUSH
30347: LD_INT 0
30349: ST_TO_ADDR
// hc_class = 21 ;
30350: LD_ADDR_OWVAR 28
30354: PUSH
30355: LD_INT 21
30357: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
30358: LD_ADDR_OWVAR 31
30362: PUSH
30363: LD_EXP 33
30367: PUSH
30368: LD_INT 1
30370: ARRAY
30371: PUSH
30372: LD_EXP 33
30376: PUSH
30377: LD_INT 2
30379: ARRAY
30380: PUSH
30381: LD_EXP 33
30385: PUSH
30386: LD_INT 3
30388: ARRAY
30389: PUSH
30390: LD_EXP 33
30394: PUSH
30395: LD_INT 4
30397: ARRAY
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
30405: LD_ADDR_OWVAR 35
30409: PUSH
30410: LD_EXP 34
30414: ST_TO_ADDR
// un = CreateHuman ;
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: CALL_OW 44
30424: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30425: LD_VAR 0 3
30429: PPUSH
30430: LD_INT 27
30432: PPUSH
30433: LD_INT 0
30435: PPUSH
30436: CALL_OW 49
// end ;
30440: GO 30331
30442: POP
30443: POP
// for i := 1 to animalsAmount [ 5 ] do
30444: LD_ADDR_VAR 0 2
30448: PUSH
30449: DOUBLE
30450: LD_INT 1
30452: DEC
30453: ST_TO_ADDR
30454: LD_EXP 32
30458: PUSH
30459: LD_INT 5
30461: ARRAY
30462: PUSH
30463: FOR_TO
30464: IFFALSE 30525
// begin uc_side = 0 ;
30466: LD_ADDR_OWVAR 20
30470: PUSH
30471: LD_INT 0
30473: ST_TO_ADDR
// uc_nation = nation_nature ;
30474: LD_ADDR_OWVAR 21
30478: PUSH
30479: LD_INT 0
30481: ST_TO_ADDR
// vc_chassis := 31 ;
30482: LD_ADDR_OWVAR 37
30486: PUSH
30487: LD_INT 31
30489: ST_TO_ADDR
// vc_control := control_rider ;
30490: LD_ADDR_OWVAR 38
30494: PUSH
30495: LD_INT 4
30497: ST_TO_ADDR
// un := CreateVehicle ;
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: CALL_OW 45
30507: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
30508: LD_VAR 0 3
30512: PPUSH
30513: LD_INT 27
30515: PPUSH
30516: LD_INT 0
30518: PPUSH
30519: CALL_OW 49
// end ;
30523: GO 30463
30525: POP
30526: POP
// end ; end_of_file
30527: LD_VAR 0 1
30531: RET
// every 1 trigger scholtzeSaved do
30532: LD_EXP 7
30536: IFFALSE 30548
30538: GO 30540
30540: DISABLE
// SetAchievement ( ACH_PROFESSOR ) ;
30541: LD_STRING ACH_PROFESSOR
30543: PPUSH
30544: CALL_OW 543
30548: END
// every 1 trigger IsDead ( Sikorski ) do
30549: LD_INT 290
30551: PPUSH
30552: CALL_OW 301
30556: IFFALSE 30568
30558: GO 30560
30560: DISABLE
// SetAchievement ( ACH_SIKORSKI ) ;
30561: LD_STRING ACH_SIKORSKI
30563: PPUSH
30564: CALL_OW 543
30568: END
// every 1 trigger not americanTroopsArriveOmicronCounter and not canExitBattlefield do
30569: LD_EXP 12
30573: NOT
30574: PUSH
30575: LD_EXP 24
30579: NOT
30580: AND
30581: IFFALSE 30593
30583: GO 30585
30585: DISABLE
// SetAchievement ( ACH_REINFORCE ) ; end_of_file
30586: LD_STRING ACH_REINFORCE
30588: PPUSH
30589: CALL_OW 543
30593: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
30594: LD_INT 0
30596: PPUSH
// ru_radar := 98 ;
30597: LD_ADDR_EXP 90
30601: PUSH
30602: LD_INT 98
30604: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30605: LD_ADDR_EXP 91
30609: PUSH
30610: LD_INT 89
30612: ST_TO_ADDR
// us_hack := 99 ;
30613: LD_ADDR_EXP 92
30617: PUSH
30618: LD_INT 99
30620: ST_TO_ADDR
// us_artillery := 97 ;
30621: LD_ADDR_EXP 93
30625: PUSH
30626: LD_INT 97
30628: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30629: LD_ADDR_EXP 94
30633: PUSH
30634: LD_INT 91
30636: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
30637: LD_ADDR_EXP 95
30641: PUSH
30642: LD_INT 92
30644: ST_TO_ADDR
// tech_Artillery := 80 ;
30645: LD_ADDR_EXP 96
30649: PUSH
30650: LD_INT 80
30652: ST_TO_ADDR
// tech_RadMat := 81 ;
30653: LD_ADDR_EXP 97
30657: PUSH
30658: LD_INT 81
30660: ST_TO_ADDR
// tech_BasicTools := 82 ;
30661: LD_ADDR_EXP 98
30665: PUSH
30666: LD_INT 82
30668: ST_TO_ADDR
// tech_Cargo := 83 ;
30669: LD_ADDR_EXP 99
30673: PUSH
30674: LD_INT 83
30676: ST_TO_ADDR
// tech_Track := 84 ;
30677: LD_ADDR_EXP 100
30681: PUSH
30682: LD_INT 84
30684: ST_TO_ADDR
// tech_Crane := 85 ;
30685: LD_ADDR_EXP 101
30689: PUSH
30690: LD_INT 85
30692: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30693: LD_ADDR_EXP 102
30697: PUSH
30698: LD_INT 86
30700: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30701: LD_ADDR_EXP 103
30705: PUSH
30706: LD_INT 87
30708: ST_TO_ADDR
// end ;
30709: LD_VAR 0 1
30713: RET
// every 1 do
30714: GO 30716
30716: DISABLE
// InitGlobalVariables ; end_of_file
30717: CALL 30594 0 0
30721: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30722: LD_INT 0
30724: PPUSH
30725: PPUSH
// if exist_mode then
30726: LD_VAR 0 2
30730: IFFALSE 30755
// unit := CreateCharacter ( prefix & ident ) else
30732: LD_ADDR_VAR 0 5
30736: PUSH
30737: LD_VAR 0 3
30741: PUSH
30742: LD_VAR 0 1
30746: STR
30747: PPUSH
30748: CALL_OW 34
30752: ST_TO_ADDR
30753: GO 30770
// unit := NewCharacter ( ident ) ;
30755: LD_ADDR_VAR 0 5
30759: PUSH
30760: LD_VAR 0 1
30764: PPUSH
30765: CALL_OW 25
30769: ST_TO_ADDR
// result := unit ;
30770: LD_ADDR_VAR 0 4
30774: PUSH
30775: LD_VAR 0 5
30779: ST_TO_ADDR
// end ;
30780: LD_VAR 0 4
30784: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30785: LD_INT 0
30787: PPUSH
30788: PPUSH
// if not side or not nation then
30789: LD_VAR 0 1
30793: NOT
30794: PUSH
30795: LD_VAR 0 2
30799: NOT
30800: OR
30801: IFFALSE 30805
// exit ;
30803: GO 31569
// case nation of nation_american :
30805: LD_VAR 0 2
30809: PUSH
30810: LD_INT 1
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 31032
30818: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30819: LD_ADDR_VAR 0 4
30823: PUSH
30824: LD_INT 35
30826: PUSH
30827: LD_INT 45
30829: PUSH
30830: LD_INT 46
30832: PUSH
30833: LD_INT 47
30835: PUSH
30836: LD_INT 82
30838: PUSH
30839: LD_INT 83
30841: PUSH
30842: LD_INT 84
30844: PUSH
30845: LD_INT 85
30847: PUSH
30848: LD_INT 86
30850: PUSH
30851: LD_INT 1
30853: PUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 6
30859: PUSH
30860: LD_INT 15
30862: PUSH
30863: LD_INT 16
30865: PUSH
30866: LD_INT 7
30868: PUSH
30869: LD_INT 12
30871: PUSH
30872: LD_INT 13
30874: PUSH
30875: LD_INT 10
30877: PUSH
30878: LD_INT 14
30880: PUSH
30881: LD_INT 20
30883: PUSH
30884: LD_INT 21
30886: PUSH
30887: LD_INT 22
30889: PUSH
30890: LD_INT 25
30892: PUSH
30893: LD_INT 32
30895: PUSH
30896: LD_INT 27
30898: PUSH
30899: LD_INT 36
30901: PUSH
30902: LD_INT 69
30904: PUSH
30905: LD_INT 39
30907: PUSH
30908: LD_INT 34
30910: PUSH
30911: LD_INT 40
30913: PUSH
30914: LD_INT 48
30916: PUSH
30917: LD_INT 49
30919: PUSH
30920: LD_INT 50
30922: PUSH
30923: LD_INT 51
30925: PUSH
30926: LD_INT 52
30928: PUSH
30929: LD_INT 53
30931: PUSH
30932: LD_INT 54
30934: PUSH
30935: LD_INT 55
30937: PUSH
30938: LD_INT 56
30940: PUSH
30941: LD_INT 57
30943: PUSH
30944: LD_INT 58
30946: PUSH
30947: LD_INT 59
30949: PUSH
30950: LD_INT 60
30952: PUSH
30953: LD_INT 61
30955: PUSH
30956: LD_INT 62
30958: PUSH
30959: LD_INT 80
30961: PUSH
30962: LD_INT 82
30964: PUSH
30965: LD_INT 83
30967: PUSH
30968: LD_INT 84
30970: PUSH
30971: LD_INT 85
30973: PUSH
30974: LD_INT 86
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: ST_TO_ADDR
31030: GO 31493
31032: LD_INT 2
31034: DOUBLE
31035: EQUAL
31036: IFTRUE 31040
31038: GO 31262
31040: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
31041: LD_ADDR_VAR 0 4
31045: PUSH
31046: LD_INT 35
31048: PUSH
31049: LD_INT 45
31051: PUSH
31052: LD_INT 46
31054: PUSH
31055: LD_INT 47
31057: PUSH
31058: LD_INT 82
31060: PUSH
31061: LD_INT 83
31063: PUSH
31064: LD_INT 84
31066: PUSH
31067: LD_INT 85
31069: PUSH
31070: LD_INT 87
31072: PUSH
31073: LD_INT 70
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 11
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 4
31087: PUSH
31088: LD_INT 5
31090: PUSH
31091: LD_INT 6
31093: PUSH
31094: LD_INT 15
31096: PUSH
31097: LD_INT 18
31099: PUSH
31100: LD_INT 7
31102: PUSH
31103: LD_INT 17
31105: PUSH
31106: LD_INT 8
31108: PUSH
31109: LD_INT 20
31111: PUSH
31112: LD_INT 21
31114: PUSH
31115: LD_INT 22
31117: PUSH
31118: LD_INT 72
31120: PUSH
31121: LD_INT 26
31123: PUSH
31124: LD_INT 69
31126: PUSH
31127: LD_INT 39
31129: PUSH
31130: LD_INT 40
31132: PUSH
31133: LD_INT 41
31135: PUSH
31136: LD_INT 42
31138: PUSH
31139: LD_INT 43
31141: PUSH
31142: LD_INT 48
31144: PUSH
31145: LD_INT 49
31147: PUSH
31148: LD_INT 50
31150: PUSH
31151: LD_INT 51
31153: PUSH
31154: LD_INT 52
31156: PUSH
31157: LD_INT 53
31159: PUSH
31160: LD_INT 54
31162: PUSH
31163: LD_INT 55
31165: PUSH
31166: LD_INT 56
31168: PUSH
31169: LD_INT 60
31171: PUSH
31172: LD_INT 61
31174: PUSH
31175: LD_INT 62
31177: PUSH
31178: LD_INT 66
31180: PUSH
31181: LD_INT 67
31183: PUSH
31184: LD_INT 68
31186: PUSH
31187: LD_INT 81
31189: PUSH
31190: LD_INT 82
31192: PUSH
31193: LD_INT 83
31195: PUSH
31196: LD_INT 84
31198: PUSH
31199: LD_INT 85
31201: PUSH
31202: LD_INT 87
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: ST_TO_ADDR
31260: GO 31493
31262: LD_INT 3
31264: DOUBLE
31265: EQUAL
31266: IFTRUE 31270
31268: GO 31492
31270: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31271: LD_ADDR_VAR 0 4
31275: PUSH
31276: LD_INT 46
31278: PUSH
31279: LD_INT 47
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 82
31290: PUSH
31291: LD_INT 83
31293: PUSH
31294: LD_INT 84
31296: PUSH
31297: LD_INT 85
31299: PUSH
31300: LD_INT 86
31302: PUSH
31303: LD_INT 11
31305: PUSH
31306: LD_INT 9
31308: PUSH
31309: LD_INT 20
31311: PUSH
31312: LD_INT 19
31314: PUSH
31315: LD_INT 21
31317: PUSH
31318: LD_INT 24
31320: PUSH
31321: LD_INT 22
31323: PUSH
31324: LD_INT 25
31326: PUSH
31327: LD_INT 28
31329: PUSH
31330: LD_INT 29
31332: PUSH
31333: LD_INT 30
31335: PUSH
31336: LD_INT 31
31338: PUSH
31339: LD_INT 37
31341: PUSH
31342: LD_INT 38
31344: PUSH
31345: LD_INT 32
31347: PUSH
31348: LD_INT 27
31350: PUSH
31351: LD_INT 33
31353: PUSH
31354: LD_INT 69
31356: PUSH
31357: LD_INT 39
31359: PUSH
31360: LD_INT 34
31362: PUSH
31363: LD_INT 40
31365: PUSH
31366: LD_INT 71
31368: PUSH
31369: LD_INT 23
31371: PUSH
31372: LD_INT 44
31374: PUSH
31375: LD_INT 48
31377: PUSH
31378: LD_INT 49
31380: PUSH
31381: LD_INT 50
31383: PUSH
31384: LD_INT 51
31386: PUSH
31387: LD_INT 52
31389: PUSH
31390: LD_INT 53
31392: PUSH
31393: LD_INT 54
31395: PUSH
31396: LD_INT 55
31398: PUSH
31399: LD_INT 56
31401: PUSH
31402: LD_INT 57
31404: PUSH
31405: LD_INT 58
31407: PUSH
31408: LD_INT 59
31410: PUSH
31411: LD_INT 63
31413: PUSH
31414: LD_INT 64
31416: PUSH
31417: LD_INT 65
31419: PUSH
31420: LD_INT 82
31422: PUSH
31423: LD_INT 83
31425: PUSH
31426: LD_INT 84
31428: PUSH
31429: LD_INT 85
31431: PUSH
31432: LD_INT 86
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: ST_TO_ADDR
31490: GO 31493
31492: POP
// if state > - 1 and state < 3 then
31493: LD_VAR 0 3
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: GREATER
31502: PUSH
31503: LD_VAR 0 3
31507: PUSH
31508: LD_INT 3
31510: LESS
31511: AND
31512: IFFALSE 31569
// for i in result do
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: LD_VAR 0 4
31523: PUSH
31524: FOR_IN
31525: IFFALSE 31567
// if GetTech ( i , side ) <> state then
31527: LD_VAR 0 5
31531: PPUSH
31532: LD_VAR 0 1
31536: PPUSH
31537: CALL_OW 321
31541: PUSH
31542: LD_VAR 0 3
31546: NONEQUAL
31547: IFFALSE 31565
// result := result diff i ;
31549: LD_ADDR_VAR 0 4
31553: PUSH
31554: LD_VAR 0 4
31558: PUSH
31559: LD_VAR 0 5
31563: DIFF
31564: ST_TO_ADDR
31565: GO 31524
31567: POP
31568: POP
// end ;
31569: LD_VAR 0 4
31573: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31574: LD_INT 0
31576: PPUSH
31577: PPUSH
31578: PPUSH
// result := true ;
31579: LD_ADDR_VAR 0 3
31583: PUSH
31584: LD_INT 1
31586: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31587: LD_ADDR_VAR 0 5
31591: PUSH
31592: LD_VAR 0 2
31596: PPUSH
31597: CALL_OW 480
31601: ST_TO_ADDR
// if not tmp then
31602: LD_VAR 0 5
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 31660
// for i in tmp do
31611: LD_ADDR_VAR 0 4
31615: PUSH
31616: LD_VAR 0 5
31620: PUSH
31621: FOR_IN
31622: IFFALSE 31658
// if GetTech ( i , side ) <> state_researched then
31624: LD_VAR 0 4
31628: PPUSH
31629: LD_VAR 0 1
31633: PPUSH
31634: CALL_OW 321
31638: PUSH
31639: LD_INT 2
31641: NONEQUAL
31642: IFFALSE 31656
// begin result := false ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: LD_INT 0
31651: ST_TO_ADDR
// exit ;
31652: POP
31653: POP
31654: GO 31660
// end ;
31656: GO 31621
31658: POP
31659: POP
// end ;
31660: LD_VAR 0 3
31664: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31665: LD_INT 0
31667: PPUSH
31668: PPUSH
31669: PPUSH
31670: PPUSH
31671: PPUSH
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31680: LD_VAR 0 1
31684: NOT
31685: PUSH
31686: LD_VAR 0 1
31690: PPUSH
31691: CALL_OW 257
31695: PUSH
31696: LD_INT 9
31698: NONEQUAL
31699: OR
31700: IFFALSE 31704
// exit ;
31702: GO 32277
// side := GetSide ( unit ) ;
31704: LD_ADDR_VAR 0 9
31708: PUSH
31709: LD_VAR 0 1
31713: PPUSH
31714: CALL_OW 255
31718: ST_TO_ADDR
// tech_space := tech_spacanom ;
31719: LD_ADDR_VAR 0 12
31723: PUSH
31724: LD_INT 29
31726: ST_TO_ADDR
// tech_time := tech_taurad ;
31727: LD_ADDR_VAR 0 13
31731: PUSH
31732: LD_INT 28
31734: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31735: LD_ADDR_VAR 0 11
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 310
31749: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31750: LD_VAR 0 11
31754: PPUSH
31755: CALL_OW 247
31759: PUSH
31760: LD_INT 2
31762: EQUAL
31763: IFFALSE 31767
// exit ;
31765: GO 32277
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31767: LD_ADDR_VAR 0 8
31771: PUSH
31772: LD_INT 81
31774: PUSH
31775: LD_VAR 0 9
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: LD_INT 21
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PPUSH
31805: CALL_OW 69
31809: ST_TO_ADDR
// if not tmp then
31810: LD_VAR 0 8
31814: NOT
31815: IFFALSE 31819
// exit ;
31817: GO 32277
// if in_unit then
31819: LD_VAR 0 11
31823: IFFALSE 31847
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31825: LD_ADDR_VAR 0 10
31829: PUSH
31830: LD_VAR 0 8
31834: PPUSH
31835: LD_VAR 0 11
31839: PPUSH
31840: CALL_OW 74
31844: ST_TO_ADDR
31845: GO 31867
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31847: LD_ADDR_VAR 0 10
31851: PUSH
31852: LD_VAR 0 8
31856: PPUSH
31857: LD_VAR 0 1
31861: PPUSH
31862: CALL_OW 74
31866: ST_TO_ADDR
// if not enemy then
31867: LD_VAR 0 10
31871: NOT
31872: IFFALSE 31876
// exit ;
31874: GO 32277
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31876: LD_VAR 0 11
31880: PUSH
31881: LD_VAR 0 11
31885: PPUSH
31886: LD_VAR 0 10
31890: PPUSH
31891: CALL_OW 296
31895: PUSH
31896: LD_INT 13
31898: GREATER
31899: AND
31900: PUSH
31901: LD_VAR 0 1
31905: PPUSH
31906: LD_VAR 0 10
31910: PPUSH
31911: CALL_OW 296
31915: PUSH
31916: LD_INT 12
31918: GREATER
31919: OR
31920: IFFALSE 31924
// exit ;
31922: GO 32277
// missile := [ 1 ] ;
31924: LD_ADDR_VAR 0 14
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31935: LD_VAR 0 9
31939: PPUSH
31940: LD_VAR 0 12
31944: PPUSH
31945: CALL_OW 325
31949: IFFALSE 31978
// missile := Insert ( missile , missile + 1 , 2 ) ;
31951: LD_ADDR_VAR 0 14
31955: PUSH
31956: LD_VAR 0 14
31960: PPUSH
31961: LD_VAR 0 14
31965: PUSH
31966: LD_INT 1
31968: PLUS
31969: PPUSH
31970: LD_INT 2
31972: PPUSH
31973: CALL_OW 2
31977: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31978: LD_VAR 0 9
31982: PPUSH
31983: LD_VAR 0 13
31987: PPUSH
31988: CALL_OW 325
31992: PUSH
31993: LD_VAR 0 10
31997: PPUSH
31998: CALL_OW 255
32002: PPUSH
32003: LD_VAR 0 13
32007: PPUSH
32008: CALL_OW 325
32012: NOT
32013: AND
32014: IFFALSE 32043
// missile := Insert ( missile , missile + 1 , 3 ) ;
32016: LD_ADDR_VAR 0 14
32020: PUSH
32021: LD_VAR 0 14
32025: PPUSH
32026: LD_VAR 0 14
32030: PUSH
32031: LD_INT 1
32033: PLUS
32034: PPUSH
32035: LD_INT 3
32037: PPUSH
32038: CALL_OW 2
32042: ST_TO_ADDR
// if missile < 2 then
32043: LD_VAR 0 14
32047: PUSH
32048: LD_INT 2
32050: LESS
32051: IFFALSE 32055
// exit ;
32053: GO 32277
// x := GetX ( enemy ) ;
32055: LD_ADDR_VAR 0 4
32059: PUSH
32060: LD_VAR 0 10
32064: PPUSH
32065: CALL_OW 250
32069: ST_TO_ADDR
// y := GetY ( enemy ) ;
32070: LD_ADDR_VAR 0 5
32074: PUSH
32075: LD_VAR 0 10
32079: PPUSH
32080: CALL_OW 251
32084: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32085: LD_ADDR_VAR 0 6
32089: PUSH
32090: LD_VAR 0 4
32094: PUSH
32095: LD_INT 1
32097: NEG
32098: PPUSH
32099: LD_INT 1
32101: PPUSH
32102: CALL_OW 12
32106: PLUS
32107: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32108: LD_ADDR_VAR 0 7
32112: PUSH
32113: LD_VAR 0 5
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PPUSH
32122: LD_INT 1
32124: PPUSH
32125: CALL_OW 12
32129: PLUS
32130: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32131: LD_VAR 0 6
32135: PPUSH
32136: LD_VAR 0 7
32140: PPUSH
32141: CALL_OW 488
32145: NOT
32146: IFFALSE 32168
// begin _x := x ;
32148: LD_ADDR_VAR 0 6
32152: PUSH
32153: LD_VAR 0 4
32157: ST_TO_ADDR
// _y := y ;
32158: LD_ADDR_VAR 0 7
32162: PUSH
32163: LD_VAR 0 5
32167: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32168: LD_ADDR_VAR 0 3
32172: PUSH
32173: LD_INT 1
32175: PPUSH
32176: LD_VAR 0 14
32180: PPUSH
32181: CALL_OW 12
32185: ST_TO_ADDR
// case i of 1 :
32186: LD_VAR 0 3
32190: PUSH
32191: LD_INT 1
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32216
32199: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32200: LD_VAR 0 1
32204: PPUSH
32205: LD_VAR 0 10
32209: PPUSH
32210: CALL_OW 115
32214: GO 32277
32216: LD_INT 2
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32246
32224: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32225: LD_VAR 0 1
32229: PPUSH
32230: LD_VAR 0 6
32234: PPUSH
32235: LD_VAR 0 7
32239: PPUSH
32240: CALL_OW 153
32244: GO 32277
32246: LD_INT 3
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32276
32254: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32255: LD_VAR 0 1
32259: PPUSH
32260: LD_VAR 0 6
32264: PPUSH
32265: LD_VAR 0 7
32269: PPUSH
32270: CALL_OW 154
32274: GO 32277
32276: POP
// end ;
32277: LD_VAR 0 2
32281: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32282: LD_INT 0
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
// if not unit or not building then
32290: LD_VAR 0 1
32294: NOT
32295: PUSH
32296: LD_VAR 0 2
32300: NOT
32301: OR
32302: IFFALSE 32306
// exit ;
32304: GO 32464
// x := GetX ( building ) ;
32306: LD_ADDR_VAR 0 5
32310: PUSH
32311: LD_VAR 0 2
32315: PPUSH
32316: CALL_OW 250
32320: ST_TO_ADDR
// y := GetY ( building ) ;
32321: LD_ADDR_VAR 0 6
32325: PUSH
32326: LD_VAR 0 2
32330: PPUSH
32331: CALL_OW 251
32335: ST_TO_ADDR
// for i = 0 to 5 do
32336: LD_ADDR_VAR 0 4
32340: PUSH
32341: DOUBLE
32342: LD_INT 0
32344: DEC
32345: ST_TO_ADDR
32346: LD_INT 5
32348: PUSH
32349: FOR_TO
32350: IFFALSE 32462
// begin _x := ShiftX ( x , i , 3 ) ;
32352: LD_ADDR_VAR 0 7
32356: PUSH
32357: LD_VAR 0 5
32361: PPUSH
32362: LD_VAR 0 4
32366: PPUSH
32367: LD_INT 3
32369: PPUSH
32370: CALL_OW 272
32374: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32375: LD_ADDR_VAR 0 8
32379: PUSH
32380: LD_VAR 0 6
32384: PPUSH
32385: LD_VAR 0 4
32389: PPUSH
32390: LD_INT 3
32392: PPUSH
32393: CALL_OW 273
32397: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32398: LD_VAR 0 7
32402: PPUSH
32403: LD_VAR 0 8
32407: PPUSH
32408: CALL_OW 488
32412: NOT
32413: IFFALSE 32417
// continue ;
32415: GO 32349
// if HexInfo ( _x , _y ) = 0 then
32417: LD_VAR 0 7
32421: PPUSH
32422: LD_VAR 0 8
32426: PPUSH
32427: CALL_OW 428
32431: PUSH
32432: LD_INT 0
32434: EQUAL
32435: IFFALSE 32460
// begin ComMoveXY ( unit , _x , _y ) ;
32437: LD_VAR 0 1
32441: PPUSH
32442: LD_VAR 0 7
32446: PPUSH
32447: LD_VAR 0 8
32451: PPUSH
32452: CALL_OW 111
// exit ;
32456: POP
32457: POP
32458: GO 32464
// end ; end ;
32460: GO 32349
32462: POP
32463: POP
// end ;
32464: LD_VAR 0 3
32468: RET
// export function ScanBase ( side , base_area ) ; begin
32469: LD_INT 0
32471: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32472: LD_ADDR_VAR 0 3
32476: PUSH
32477: LD_VAR 0 2
32481: PPUSH
32482: LD_INT 81
32484: PUSH
32485: LD_VAR 0 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PPUSH
32494: CALL_OW 70
32498: ST_TO_ADDR
// end ;
32499: LD_VAR 0 3
32503: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32504: LD_INT 0
32506: PPUSH
32507: PPUSH
32508: PPUSH
32509: PPUSH
// result := false ;
32510: LD_ADDR_VAR 0 2
32514: PUSH
32515: LD_INT 0
32517: ST_TO_ADDR
// side := GetSide ( unit ) ;
32518: LD_ADDR_VAR 0 3
32522: PUSH
32523: LD_VAR 0 1
32527: PPUSH
32528: CALL_OW 255
32532: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32533: LD_ADDR_VAR 0 4
32537: PUSH
32538: LD_VAR 0 1
32542: PPUSH
32543: CALL_OW 248
32547: ST_TO_ADDR
// case nat of 1 :
32548: LD_VAR 0 4
32552: PUSH
32553: LD_INT 1
32555: DOUBLE
32556: EQUAL
32557: IFTRUE 32561
32559: GO 32572
32561: POP
// tech := tech_lassight ; 2 :
32562: LD_ADDR_VAR 0 5
32566: PUSH
32567: LD_INT 12
32569: ST_TO_ADDR
32570: GO 32611
32572: LD_INT 2
32574: DOUBLE
32575: EQUAL
32576: IFTRUE 32580
32578: GO 32591
32580: POP
// tech := tech_mortar ; 3 :
32581: LD_ADDR_VAR 0 5
32585: PUSH
32586: LD_INT 41
32588: ST_TO_ADDR
32589: GO 32611
32591: LD_INT 3
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32610
32599: POP
// tech := tech_bazooka ; end ;
32600: LD_ADDR_VAR 0 5
32604: PUSH
32605: LD_INT 44
32607: ST_TO_ADDR
32608: GO 32611
32610: POP
// if Researched ( side , tech ) then
32611: LD_VAR 0 3
32615: PPUSH
32616: LD_VAR 0 5
32620: PPUSH
32621: CALL_OW 325
32625: IFFALSE 32652
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: LD_INT 5
32634: PUSH
32635: LD_INT 8
32637: PUSH
32638: LD_INT 9
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: PUSH
32646: LD_VAR 0 4
32650: ARRAY
32651: ST_TO_ADDR
// end ;
32652: LD_VAR 0 2
32656: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32657: LD_INT 0
32659: PPUSH
32660: PPUSH
32661: PPUSH
// if not mines then
32662: LD_VAR 0 2
32666: NOT
32667: IFFALSE 32671
// exit ;
32669: GO 32815
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: LD_INT 81
32678: PUSH
32679: LD_VAR 0 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: LD_INT 21
32693: PUSH
32694: LD_INT 3
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PPUSH
32709: CALL_OW 69
32713: ST_TO_ADDR
// for i in mines do
32714: LD_ADDR_VAR 0 4
32718: PUSH
32719: LD_VAR 0 2
32723: PUSH
32724: FOR_IN
32725: IFFALSE 32813
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32727: LD_VAR 0 4
32731: PUSH
32732: LD_INT 1
32734: ARRAY
32735: PPUSH
32736: LD_VAR 0 4
32740: PUSH
32741: LD_INT 2
32743: ARRAY
32744: PPUSH
32745: CALL_OW 458
32749: NOT
32750: IFFALSE 32754
// continue ;
32752: GO 32724
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32754: LD_VAR 0 4
32758: PUSH
32759: LD_INT 1
32761: ARRAY
32762: PPUSH
32763: LD_VAR 0 4
32767: PUSH
32768: LD_INT 2
32770: ARRAY
32771: PPUSH
32772: CALL_OW 428
32776: PUSH
32777: LD_VAR 0 5
32781: IN
32782: IFFALSE 32811
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32784: LD_VAR 0 4
32788: PUSH
32789: LD_INT 1
32791: ARRAY
32792: PPUSH
32793: LD_VAR 0 4
32797: PUSH
32798: LD_INT 2
32800: ARRAY
32801: PPUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 456
// end ;
32811: GO 32724
32813: POP
32814: POP
// end ;
32815: LD_VAR 0 3
32819: RET
// export function Count ( array ) ; var i ; begin
32820: LD_INT 0
32822: PPUSH
32823: PPUSH
// result := 0 ;
32824: LD_ADDR_VAR 0 2
32828: PUSH
32829: LD_INT 0
32831: ST_TO_ADDR
// for i in array do
32832: LD_ADDR_VAR 0 3
32836: PUSH
32837: LD_VAR 0 1
32841: PUSH
32842: FOR_IN
32843: IFFALSE 32867
// if i then
32845: LD_VAR 0 3
32849: IFFALSE 32865
// result := result + 1 ;
32851: LD_ADDR_VAR 0 2
32855: PUSH
32856: LD_VAR 0 2
32860: PUSH
32861: LD_INT 1
32863: PLUS
32864: ST_TO_ADDR
32865: GO 32842
32867: POP
32868: POP
// end ;
32869: LD_VAR 0 2
32873: RET
// export function IsEmpty ( building ) ; begin
32874: LD_INT 0
32876: PPUSH
// if not building then
32877: LD_VAR 0 1
32881: NOT
32882: IFFALSE 32886
// exit ;
32884: GO 32929
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32886: LD_ADDR_VAR 0 2
32890: PUSH
32891: LD_VAR 0 1
32895: PUSH
32896: LD_INT 22
32898: PUSH
32899: LD_VAR 0 1
32903: PPUSH
32904: CALL_OW 255
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 58
32915: PUSH
32916: EMPTY
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 69
32927: IN
32928: ST_TO_ADDR
// end ;
32929: LD_VAR 0 2
32933: RET
// export function IsNotFull ( building ) ; begin
32934: LD_INT 0
32936: PPUSH
// if not building then
32937: LD_VAR 0 1
32941: NOT
32942: IFFALSE 32946
// exit ;
32944: GO 32965
// result := UnitsInside ( building ) < 6 ;
32946: LD_ADDR_VAR 0 2
32950: PUSH
32951: LD_VAR 0 1
32955: PPUSH
32956: CALL_OW 313
32960: PUSH
32961: LD_INT 6
32963: LESS
32964: ST_TO_ADDR
// end ;
32965: LD_VAR 0 2
32969: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32970: LD_INT 0
32972: PPUSH
32973: PPUSH
32974: PPUSH
32975: PPUSH
// tmp := [ ] ;
32976: LD_ADDR_VAR 0 3
32980: PUSH
32981: EMPTY
32982: ST_TO_ADDR
// list := [ ] ;
32983: LD_ADDR_VAR 0 5
32987: PUSH
32988: EMPTY
32989: ST_TO_ADDR
// for i = 16 to 25 do
32990: LD_ADDR_VAR 0 4
32994: PUSH
32995: DOUBLE
32996: LD_INT 16
32998: DEC
32999: ST_TO_ADDR
33000: LD_INT 25
33002: PUSH
33003: FOR_TO
33004: IFFALSE 33077
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33006: LD_ADDR_VAR 0 3
33010: PUSH
33011: LD_VAR 0 3
33015: PUSH
33016: LD_INT 22
33018: PUSH
33019: LD_VAR 0 1
33023: PPUSH
33024: CALL_OW 255
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 91
33035: PUSH
33036: LD_VAR 0 1
33040: PUSH
33041: LD_INT 6
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: LD_VAR 0 4
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: PUSH
33066: EMPTY
33067: LIST
33068: PPUSH
33069: CALL_OW 69
33073: ADD
33074: ST_TO_ADDR
33075: GO 33003
33077: POP
33078: POP
// for i = 1 to tmp do
33079: LD_ADDR_VAR 0 4
33083: PUSH
33084: DOUBLE
33085: LD_INT 1
33087: DEC
33088: ST_TO_ADDR
33089: LD_VAR 0 3
33093: PUSH
33094: FOR_TO
33095: IFFALSE 33183
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33097: LD_ADDR_VAR 0 5
33101: PUSH
33102: LD_VAR 0 5
33106: PUSH
33107: LD_VAR 0 3
33111: PUSH
33112: LD_VAR 0 4
33116: ARRAY
33117: PPUSH
33118: CALL_OW 266
33122: PUSH
33123: LD_VAR 0 3
33127: PUSH
33128: LD_VAR 0 4
33132: ARRAY
33133: PPUSH
33134: CALL_OW 250
33138: PUSH
33139: LD_VAR 0 3
33143: PUSH
33144: LD_VAR 0 4
33148: ARRAY
33149: PPUSH
33150: CALL_OW 251
33154: PUSH
33155: LD_VAR 0 3
33159: PUSH
33160: LD_VAR 0 4
33164: ARRAY
33165: PPUSH
33166: CALL_OW 254
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: PUSH
33177: EMPTY
33178: LIST
33179: ADD
33180: ST_TO_ADDR
33181: GO 33094
33183: POP
33184: POP
// result := list ;
33185: LD_ADDR_VAR 0 2
33189: PUSH
33190: LD_VAR 0 5
33194: ST_TO_ADDR
// end ;
33195: LD_VAR 0 2
33199: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33200: LD_INT 0
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
33206: PPUSH
33207: PPUSH
33208: PPUSH
// if not factory then
33209: LD_VAR 0 1
33213: NOT
33214: IFFALSE 33218
// exit ;
33216: GO 33811
// if control = control_apeman then
33218: LD_VAR 0 4
33222: PUSH
33223: LD_INT 5
33225: EQUAL
33226: IFFALSE 33335
// begin tmp := UnitsInside ( factory ) ;
33228: LD_ADDR_VAR 0 8
33232: PUSH
33233: LD_VAR 0 1
33237: PPUSH
33238: CALL_OW 313
33242: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33243: LD_VAR 0 8
33247: PPUSH
33248: LD_INT 25
33250: PUSH
33251: LD_INT 12
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PPUSH
33258: CALL_OW 72
33262: NOT
33263: IFFALSE 33273
// control := control_manual ;
33265: LD_ADDR_VAR 0 4
33269: PUSH
33270: LD_INT 1
33272: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33273: LD_ADDR_VAR 0 8
33277: PUSH
33278: LD_VAR 0 1
33282: PPUSH
33283: CALL 32970 0 1
33287: ST_TO_ADDR
// if tmp then
33288: LD_VAR 0 8
33292: IFFALSE 33335
// begin for i in tmp do
33294: LD_ADDR_VAR 0 7
33298: PUSH
33299: LD_VAR 0 8
33303: PUSH
33304: FOR_IN
33305: IFFALSE 33333
// if i [ 1 ] = b_ext_radio then
33307: LD_VAR 0 7
33311: PUSH
33312: LD_INT 1
33314: ARRAY
33315: PUSH
33316: LD_INT 22
33318: EQUAL
33319: IFFALSE 33331
// begin control := control_remote ;
33321: LD_ADDR_VAR 0 4
33325: PUSH
33326: LD_INT 2
33328: ST_TO_ADDR
// break ;
33329: GO 33333
// end ;
33331: GO 33304
33333: POP
33334: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33335: LD_VAR 0 1
33339: PPUSH
33340: LD_VAR 0 2
33344: PPUSH
33345: LD_VAR 0 3
33349: PPUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: LD_VAR 0 5
33359: PPUSH
33360: CALL_OW 448
33364: IFFALSE 33399
// begin result := [ chassis , engine , control , weapon ] ;
33366: LD_ADDR_VAR 0 6
33370: PUSH
33371: LD_VAR 0 2
33375: PUSH
33376: LD_VAR 0 3
33380: PUSH
33381: LD_VAR 0 4
33385: PUSH
33386: LD_VAR 0 5
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: ST_TO_ADDR
// exit ;
33397: GO 33811
// end ; _chassis := AvailableChassisList ( factory ) ;
33399: LD_ADDR_VAR 0 9
33403: PUSH
33404: LD_VAR 0 1
33408: PPUSH
33409: CALL_OW 475
33413: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33414: LD_ADDR_VAR 0 11
33418: PUSH
33419: LD_VAR 0 1
33423: PPUSH
33424: CALL_OW 476
33428: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33429: LD_ADDR_VAR 0 12
33433: PUSH
33434: LD_VAR 0 1
33438: PPUSH
33439: CALL_OW 477
33443: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33444: LD_ADDR_VAR 0 10
33448: PUSH
33449: LD_VAR 0 1
33453: PPUSH
33454: CALL_OW 478
33458: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33459: LD_VAR 0 9
33463: NOT
33464: PUSH
33465: LD_VAR 0 11
33469: NOT
33470: OR
33471: PUSH
33472: LD_VAR 0 12
33476: NOT
33477: OR
33478: PUSH
33479: LD_VAR 0 10
33483: NOT
33484: OR
33485: IFFALSE 33520
// begin result := [ chassis , engine , control , weapon ] ;
33487: LD_ADDR_VAR 0 6
33491: PUSH
33492: LD_VAR 0 2
33496: PUSH
33497: LD_VAR 0 3
33501: PUSH
33502: LD_VAR 0 4
33506: PUSH
33507: LD_VAR 0 5
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
// exit ;
33518: GO 33811
// end ; if not chassis in _chassis then
33520: LD_VAR 0 2
33524: PUSH
33525: LD_VAR 0 9
33529: IN
33530: NOT
33531: IFFALSE 33557
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33533: LD_ADDR_VAR 0 2
33537: PUSH
33538: LD_VAR 0 9
33542: PUSH
33543: LD_INT 1
33545: PPUSH
33546: LD_VAR 0 9
33550: PPUSH
33551: CALL_OW 12
33555: ARRAY
33556: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33557: LD_VAR 0 2
33561: PPUSH
33562: LD_VAR 0 3
33566: PPUSH
33567: CALL 33816 0 2
33571: NOT
33572: IFFALSE 33631
// repeat engine := _engine [ 1 ] ;
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_VAR 0 11
33583: PUSH
33584: LD_INT 1
33586: ARRAY
33587: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33588: LD_ADDR_VAR 0 11
33592: PUSH
33593: LD_VAR 0 11
33597: PPUSH
33598: LD_INT 1
33600: PPUSH
33601: CALL_OW 3
33605: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33606: LD_VAR 0 2
33610: PPUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: CALL 33816 0 2
33620: PUSH
33621: LD_VAR 0 11
33625: PUSH
33626: EMPTY
33627: EQUAL
33628: OR
33629: IFFALSE 33574
// if not control in _control then
33631: LD_VAR 0 4
33635: PUSH
33636: LD_VAR 0 12
33640: IN
33641: NOT
33642: IFFALSE 33668
// control := _control [ rand ( 1 , _control ) ] ;
33644: LD_ADDR_VAR 0 4
33648: PUSH
33649: LD_VAR 0 12
33653: PUSH
33654: LD_INT 1
33656: PPUSH
33657: LD_VAR 0 12
33661: PPUSH
33662: CALL_OW 12
33666: ARRAY
33667: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33668: LD_VAR 0 2
33672: PPUSH
33673: LD_VAR 0 5
33677: PPUSH
33678: CALL 34036 0 2
33682: NOT
33683: IFFALSE 33742
// repeat weapon := _weapon [ 1 ] ;
33685: LD_ADDR_VAR 0 5
33689: PUSH
33690: LD_VAR 0 10
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33699: LD_ADDR_VAR 0 10
33703: PUSH
33704: LD_VAR 0 10
33708: PPUSH
33709: LD_INT 1
33711: PPUSH
33712: CALL_OW 3
33716: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33717: LD_VAR 0 2
33721: PPUSH
33722: LD_VAR 0 5
33726: PPUSH
33727: CALL 34036 0 2
33731: PUSH
33732: LD_VAR 0 10
33736: PUSH
33737: EMPTY
33738: EQUAL
33739: OR
33740: IFFALSE 33685
// result := [ ] ;
33742: LD_ADDR_VAR 0 6
33746: PUSH
33747: EMPTY
33748: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33749: LD_VAR 0 1
33753: PPUSH
33754: LD_VAR 0 2
33758: PPUSH
33759: LD_VAR 0 3
33763: PPUSH
33764: LD_VAR 0 4
33768: PPUSH
33769: LD_VAR 0 5
33773: PPUSH
33774: CALL_OW 448
33778: IFFALSE 33811
// result := [ chassis , engine , control , weapon ] ;
33780: LD_ADDR_VAR 0 6
33784: PUSH
33785: LD_VAR 0 2
33789: PUSH
33790: LD_VAR 0 3
33794: PUSH
33795: LD_VAR 0 4
33799: PUSH
33800: LD_VAR 0 5
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: ST_TO_ADDR
// end ;
33811: LD_VAR 0 6
33815: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33816: LD_INT 0
33818: PPUSH
// if not chassis or not engine then
33819: LD_VAR 0 1
33823: NOT
33824: PUSH
33825: LD_VAR 0 2
33829: NOT
33830: OR
33831: IFFALSE 33835
// exit ;
33833: GO 34031
// case engine of engine_solar :
33835: LD_VAR 0 2
33839: PUSH
33840: LD_INT 2
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33886
33848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33849: LD_ADDR_VAR 0 3
33853: PUSH
33854: LD_INT 11
33856: PUSH
33857: LD_INT 12
33859: PUSH
33860: LD_INT 13
33862: PUSH
33863: LD_INT 14
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 3
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: ST_TO_ADDR
33884: GO 34015
33886: LD_INT 1
33888: DOUBLE
33889: EQUAL
33890: IFTRUE 33894
33892: GO 33956
33894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33895: LD_ADDR_VAR 0 3
33899: PUSH
33900: LD_INT 11
33902: PUSH
33903: LD_INT 12
33905: PUSH
33906: LD_INT 13
33908: PUSH
33909: LD_INT 14
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: LD_INT 4
33923: PUSH
33924: LD_INT 5
33926: PUSH
33927: LD_INT 21
33929: PUSH
33930: LD_INT 23
33932: PUSH
33933: LD_INT 22
33935: PUSH
33936: LD_INT 24
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: ST_TO_ADDR
33954: GO 34015
33956: LD_INT 3
33958: DOUBLE
33959: EQUAL
33960: IFTRUE 33964
33962: GO 34014
33964: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33965: LD_ADDR_VAR 0 3
33969: PUSH
33970: LD_INT 13
33972: PUSH
33973: LD_INT 14
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: LD_INT 4
33984: PUSH
33985: LD_INT 5
33987: PUSH
33988: LD_INT 21
33990: PUSH
33991: LD_INT 22
33993: PUSH
33994: LD_INT 23
33996: PUSH
33997: LD_INT 24
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
34012: GO 34015
34014: POP
// result := ( chassis in result ) ;
34015: LD_ADDR_VAR 0 3
34019: PUSH
34020: LD_VAR 0 1
34024: PUSH
34025: LD_VAR 0 3
34029: IN
34030: ST_TO_ADDR
// end ;
34031: LD_VAR 0 3
34035: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34036: LD_INT 0
34038: PPUSH
// if not chassis or not weapon then
34039: LD_VAR 0 1
34043: NOT
34044: PUSH
34045: LD_VAR 0 2
34049: NOT
34050: OR
34051: IFFALSE 34055
// exit ;
34053: GO 35081
// case weapon of us_machine_gun :
34055: LD_VAR 0 2
34059: PUSH
34060: LD_INT 2
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34098
34068: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34069: LD_ADDR_VAR 0 3
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: LD_INT 4
34085: PUSH
34086: LD_INT 5
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
34096: GO 35065
34098: LD_INT 3
34100: DOUBLE
34101: EQUAL
34102: IFTRUE 34106
34104: GO 34136
34106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34107: LD_ADDR_VAR 0 3
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: LD_INT 3
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: LD_INT 5
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: ST_TO_ADDR
34134: GO 35065
34136: LD_INT 11
34138: DOUBLE
34139: EQUAL
34140: IFTRUE 34144
34142: GO 34174
34144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: LD_INT 4
34161: PUSH
34162: LD_INT 5
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: ST_TO_ADDR
34172: GO 35065
34174: LD_INT 4
34176: DOUBLE
34177: EQUAL
34178: IFTRUE 34182
34180: GO 34208
34182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34183: LD_ADDR_VAR 0 3
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 4
34196: PUSH
34197: LD_INT 5
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: ST_TO_ADDR
34206: GO 35065
34208: LD_INT 5
34210: DOUBLE
34211: EQUAL
34212: IFTRUE 34216
34214: GO 34242
34216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34217: LD_ADDR_VAR 0 3
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: LD_INT 4
34230: PUSH
34231: LD_INT 5
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: ST_TO_ADDR
34240: GO 35065
34242: LD_INT 9
34244: DOUBLE
34245: EQUAL
34246: IFTRUE 34250
34248: GO 34276
34250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34251: LD_ADDR_VAR 0 3
34255: PUSH
34256: LD_INT 2
34258: PUSH
34259: LD_INT 3
34261: PUSH
34262: LD_INT 4
34264: PUSH
34265: LD_INT 5
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
34274: GO 35065
34276: LD_INT 7
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 34310
34284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34285: LD_ADDR_VAR 0 3
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: LD_INT 4
34298: PUSH
34299: LD_INT 5
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: ST_TO_ADDR
34308: GO 35065
34310: LD_INT 12
34312: DOUBLE
34313: EQUAL
34314: IFTRUE 34318
34316: GO 34344
34318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34319: LD_ADDR_VAR 0 3
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: LD_INT 3
34329: PUSH
34330: LD_INT 4
34332: PUSH
34333: LD_INT 5
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: ST_TO_ADDR
34342: GO 35065
34344: LD_INT 13
34346: DOUBLE
34347: EQUAL
34348: IFTRUE 34352
34350: GO 34378
34352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34353: LD_ADDR_VAR 0 3
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 4
34366: PUSH
34367: LD_INT 5
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: ST_TO_ADDR
34376: GO 35065
34378: LD_INT 14
34380: DOUBLE
34381: EQUAL
34382: IFTRUE 34386
34384: GO 34404
34386: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34387: LD_ADDR_VAR 0 3
34391: PUSH
34392: LD_INT 4
34394: PUSH
34395: LD_INT 5
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: ST_TO_ADDR
34402: GO 35065
34404: LD_INT 6
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34412
34410: GO 34430
34412: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34413: LD_ADDR_VAR 0 3
34417: PUSH
34418: LD_INT 4
34420: PUSH
34421: LD_INT 5
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: ST_TO_ADDR
34428: GO 35065
34430: LD_INT 10
34432: DOUBLE
34433: EQUAL
34434: IFTRUE 34438
34436: GO 34456
34438: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34439: LD_ADDR_VAR 0 3
34443: PUSH
34444: LD_INT 4
34446: PUSH
34447: LD_INT 5
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: ST_TO_ADDR
34454: GO 35065
34456: LD_INT 22
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34464
34462: GO 34490
34464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34465: LD_ADDR_VAR 0 3
34469: PUSH
34470: LD_INT 11
34472: PUSH
34473: LD_INT 12
34475: PUSH
34476: LD_INT 13
34478: PUSH
34479: LD_INT 14
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
34488: GO 35065
34490: LD_INT 23
34492: DOUBLE
34493: EQUAL
34494: IFTRUE 34498
34496: GO 34524
34498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34499: LD_ADDR_VAR 0 3
34503: PUSH
34504: LD_INT 11
34506: PUSH
34507: LD_INT 12
34509: PUSH
34510: LD_INT 13
34512: PUSH
34513: LD_INT 14
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
34522: GO 35065
34524: LD_INT 24
34526: DOUBLE
34527: EQUAL
34528: IFTRUE 34532
34530: GO 34558
34532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: LD_INT 11
34540: PUSH
34541: LD_INT 12
34543: PUSH
34544: LD_INT 13
34546: PUSH
34547: LD_INT 14
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
34556: GO 35065
34558: LD_INT 30
34560: DOUBLE
34561: EQUAL
34562: IFTRUE 34566
34564: GO 34592
34566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_INT 11
34574: PUSH
34575: LD_INT 12
34577: PUSH
34578: LD_INT 13
34580: PUSH
34581: LD_INT 14
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: ST_TO_ADDR
34590: GO 35065
34592: LD_INT 25
34594: DOUBLE
34595: EQUAL
34596: IFTRUE 34600
34598: GO 34618
34600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_INT 13
34608: PUSH
34609: LD_INT 14
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: ST_TO_ADDR
34616: GO 35065
34618: LD_INT 27
34620: DOUBLE
34621: EQUAL
34622: IFTRUE 34626
34624: GO 34644
34626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_INT 13
34634: PUSH
34635: LD_INT 14
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: ST_TO_ADDR
34642: GO 35065
34644: LD_INT 28
34646: DOUBLE
34647: EQUAL
34648: IFTRUE 34652
34650: GO 34670
34652: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34653: LD_ADDR_VAR 0 3
34657: PUSH
34658: LD_INT 13
34660: PUSH
34661: LD_INT 14
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: ST_TO_ADDR
34668: GO 35065
34670: LD_INT 29
34672: DOUBLE
34673: EQUAL
34674: IFTRUE 34678
34676: GO 34696
34678: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34679: LD_ADDR_VAR 0 3
34683: PUSH
34684: LD_INT 13
34686: PUSH
34687: LD_INT 14
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: ST_TO_ADDR
34694: GO 35065
34696: LD_INT 31
34698: DOUBLE
34699: EQUAL
34700: IFTRUE 34704
34702: GO 34722
34704: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34705: LD_ADDR_VAR 0 3
34709: PUSH
34710: LD_INT 13
34712: PUSH
34713: LD_INT 14
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: ST_TO_ADDR
34720: GO 35065
34722: LD_INT 26
34724: DOUBLE
34725: EQUAL
34726: IFTRUE 34730
34728: GO 34748
34730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34731: LD_ADDR_VAR 0 3
34735: PUSH
34736: LD_INT 13
34738: PUSH
34739: LD_INT 14
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: ST_TO_ADDR
34746: GO 35065
34748: LD_INT 42
34750: DOUBLE
34751: EQUAL
34752: IFTRUE 34756
34754: GO 34782
34756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34757: LD_ADDR_VAR 0 3
34761: PUSH
34762: LD_INT 21
34764: PUSH
34765: LD_INT 22
34767: PUSH
34768: LD_INT 23
34770: PUSH
34771: LD_INT 24
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
34780: GO 35065
34782: LD_INT 43
34784: DOUBLE
34785: EQUAL
34786: IFTRUE 34790
34788: GO 34816
34790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34791: LD_ADDR_VAR 0 3
34795: PUSH
34796: LD_INT 21
34798: PUSH
34799: LD_INT 22
34801: PUSH
34802: LD_INT 23
34804: PUSH
34805: LD_INT 24
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 35065
34816: LD_INT 44
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 34850
34824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 21
34832: PUSH
34833: LD_INT 22
34835: PUSH
34836: LD_INT 23
34838: PUSH
34839: LD_INT 24
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
34848: GO 35065
34850: LD_INT 45
34852: DOUBLE
34853: EQUAL
34854: IFTRUE 34858
34856: GO 34884
34858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34859: LD_ADDR_VAR 0 3
34863: PUSH
34864: LD_INT 21
34866: PUSH
34867: LD_INT 22
34869: PUSH
34870: LD_INT 23
34872: PUSH
34873: LD_INT 24
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
34882: GO 35065
34884: LD_INT 49
34886: DOUBLE
34887: EQUAL
34888: IFTRUE 34892
34890: GO 34918
34892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34893: LD_ADDR_VAR 0 3
34897: PUSH
34898: LD_INT 21
34900: PUSH
34901: LD_INT 22
34903: PUSH
34904: LD_INT 23
34906: PUSH
34907: LD_INT 24
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
34916: GO 35065
34918: LD_INT 51
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34926
34924: GO 34952
34926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34927: LD_ADDR_VAR 0 3
34931: PUSH
34932: LD_INT 21
34934: PUSH
34935: LD_INT 22
34937: PUSH
34938: LD_INT 23
34940: PUSH
34941: LD_INT 24
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: ST_TO_ADDR
34950: GO 35065
34952: LD_INT 52
34954: DOUBLE
34955: EQUAL
34956: IFTRUE 34960
34958: GO 34986
34960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34961: LD_ADDR_VAR 0 3
34965: PUSH
34966: LD_INT 21
34968: PUSH
34969: LD_INT 22
34971: PUSH
34972: LD_INT 23
34974: PUSH
34975: LD_INT 24
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: ST_TO_ADDR
34984: GO 35065
34986: LD_INT 53
34988: DOUBLE
34989: EQUAL
34990: IFTRUE 34994
34992: GO 35012
34994: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34995: LD_ADDR_VAR 0 3
34999: PUSH
35000: LD_INT 23
35002: PUSH
35003: LD_INT 24
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: ST_TO_ADDR
35010: GO 35065
35012: LD_INT 46
35014: DOUBLE
35015: EQUAL
35016: IFTRUE 35020
35018: GO 35038
35020: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35021: LD_ADDR_VAR 0 3
35025: PUSH
35026: LD_INT 23
35028: PUSH
35029: LD_INT 24
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: ST_TO_ADDR
35036: GO 35065
35038: LD_INT 47
35040: DOUBLE
35041: EQUAL
35042: IFTRUE 35046
35044: GO 35064
35046: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35047: LD_ADDR_VAR 0 3
35051: PUSH
35052: LD_INT 23
35054: PUSH
35055: LD_INT 24
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: ST_TO_ADDR
35062: GO 35065
35064: POP
// result := ( chassis in result ) ;
35065: LD_ADDR_VAR 0 3
35069: PUSH
35070: LD_VAR 0 1
35074: PUSH
35075: LD_VAR 0 3
35079: IN
35080: ST_TO_ADDR
// end ;
35081: LD_VAR 0 3
35085: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
// result := array ;
35095: LD_ADDR_VAR 0 5
35099: PUSH
35100: LD_VAR 0 1
35104: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35105: LD_VAR 0 1
35109: NOT
35110: PUSH
35111: LD_VAR 0 2
35115: NOT
35116: OR
35117: PUSH
35118: LD_VAR 0 3
35122: NOT
35123: OR
35124: PUSH
35125: LD_VAR 0 2
35129: PUSH
35130: LD_VAR 0 1
35134: GREATER
35135: OR
35136: PUSH
35137: LD_VAR 0 3
35141: PUSH
35142: LD_VAR 0 1
35146: GREATER
35147: OR
35148: IFFALSE 35152
// exit ;
35150: GO 35448
// if direction then
35152: LD_VAR 0 4
35156: IFFALSE 35220
// begin d := 1 ;
35158: LD_ADDR_VAR 0 9
35162: PUSH
35163: LD_INT 1
35165: ST_TO_ADDR
// if i_from > i_to then
35166: LD_VAR 0 2
35170: PUSH
35171: LD_VAR 0 3
35175: GREATER
35176: IFFALSE 35202
// length := ( array - i_from ) + i_to else
35178: LD_ADDR_VAR 0 11
35182: PUSH
35183: LD_VAR 0 1
35187: PUSH
35188: LD_VAR 0 2
35192: MINUS
35193: PUSH
35194: LD_VAR 0 3
35198: PLUS
35199: ST_TO_ADDR
35200: GO 35218
// length := i_to - i_from ;
35202: LD_ADDR_VAR 0 11
35206: PUSH
35207: LD_VAR 0 3
35211: PUSH
35212: LD_VAR 0 2
35216: MINUS
35217: ST_TO_ADDR
// end else
35218: GO 35281
// begin d := - 1 ;
35220: LD_ADDR_VAR 0 9
35224: PUSH
35225: LD_INT 1
35227: NEG
35228: ST_TO_ADDR
// if i_from > i_to then
35229: LD_VAR 0 2
35233: PUSH
35234: LD_VAR 0 3
35238: GREATER
35239: IFFALSE 35259
// length := i_from - i_to else
35241: LD_ADDR_VAR 0 11
35245: PUSH
35246: LD_VAR 0 2
35250: PUSH
35251: LD_VAR 0 3
35255: MINUS
35256: ST_TO_ADDR
35257: GO 35281
// length := ( array - i_to ) + i_from ;
35259: LD_ADDR_VAR 0 11
35263: PUSH
35264: LD_VAR 0 1
35268: PUSH
35269: LD_VAR 0 3
35273: MINUS
35274: PUSH
35275: LD_VAR 0 2
35279: PLUS
35280: ST_TO_ADDR
// end ; if not length then
35281: LD_VAR 0 11
35285: NOT
35286: IFFALSE 35290
// exit ;
35288: GO 35448
// tmp := array ;
35290: LD_ADDR_VAR 0 10
35294: PUSH
35295: LD_VAR 0 1
35299: ST_TO_ADDR
// for i = 1 to length do
35300: LD_ADDR_VAR 0 6
35304: PUSH
35305: DOUBLE
35306: LD_INT 1
35308: DEC
35309: ST_TO_ADDR
35310: LD_VAR 0 11
35314: PUSH
35315: FOR_TO
35316: IFFALSE 35436
// begin for j = 1 to array do
35318: LD_ADDR_VAR 0 7
35322: PUSH
35323: DOUBLE
35324: LD_INT 1
35326: DEC
35327: ST_TO_ADDR
35328: LD_VAR 0 1
35332: PUSH
35333: FOR_TO
35334: IFFALSE 35422
// begin k := j + d ;
35336: LD_ADDR_VAR 0 8
35340: PUSH
35341: LD_VAR 0 7
35345: PUSH
35346: LD_VAR 0 9
35350: PLUS
35351: ST_TO_ADDR
// if k > array then
35352: LD_VAR 0 8
35356: PUSH
35357: LD_VAR 0 1
35361: GREATER
35362: IFFALSE 35372
// k := 1 ;
35364: LD_ADDR_VAR 0 8
35368: PUSH
35369: LD_INT 1
35371: ST_TO_ADDR
// if not k then
35372: LD_VAR 0 8
35376: NOT
35377: IFFALSE 35389
// k := array ;
35379: LD_ADDR_VAR 0 8
35383: PUSH
35384: LD_VAR 0 1
35388: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35389: LD_ADDR_VAR 0 10
35393: PUSH
35394: LD_VAR 0 10
35398: PPUSH
35399: LD_VAR 0 8
35403: PPUSH
35404: LD_VAR 0 1
35408: PUSH
35409: LD_VAR 0 7
35413: ARRAY
35414: PPUSH
35415: CALL_OW 1
35419: ST_TO_ADDR
// end ;
35420: GO 35333
35422: POP
35423: POP
// array := tmp ;
35424: LD_ADDR_VAR 0 1
35428: PUSH
35429: LD_VAR 0 10
35433: ST_TO_ADDR
// end ;
35434: GO 35315
35436: POP
35437: POP
// result := array ;
35438: LD_ADDR_VAR 0 5
35442: PUSH
35443: LD_VAR 0 1
35447: ST_TO_ADDR
// end ;
35448: LD_VAR 0 5
35452: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35453: LD_INT 0
35455: PPUSH
35456: PPUSH
// result := 0 ;
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: LD_INT 0
35464: ST_TO_ADDR
// if not array or not value in array then
35465: LD_VAR 0 1
35469: NOT
35470: PUSH
35471: LD_VAR 0 2
35475: PUSH
35476: LD_VAR 0 1
35480: IN
35481: NOT
35482: OR
35483: IFFALSE 35487
// exit ;
35485: GO 35541
// for i = 1 to array do
35487: LD_ADDR_VAR 0 4
35491: PUSH
35492: DOUBLE
35493: LD_INT 1
35495: DEC
35496: ST_TO_ADDR
35497: LD_VAR 0 1
35501: PUSH
35502: FOR_TO
35503: IFFALSE 35539
// if value = array [ i ] then
35505: LD_VAR 0 2
35509: PUSH
35510: LD_VAR 0 1
35514: PUSH
35515: LD_VAR 0 4
35519: ARRAY
35520: EQUAL
35521: IFFALSE 35537
// begin result := i ;
35523: LD_ADDR_VAR 0 3
35527: PUSH
35528: LD_VAR 0 4
35532: ST_TO_ADDR
// exit ;
35533: POP
35534: POP
35535: GO 35541
// end ;
35537: GO 35502
35539: POP
35540: POP
// end ;
35541: LD_VAR 0 3
35545: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35546: LD_INT 0
35548: PPUSH
// vc_chassis := chassis ;
35549: LD_ADDR_OWVAR 37
35553: PUSH
35554: LD_VAR 0 1
35558: ST_TO_ADDR
// vc_engine := engine ;
35559: LD_ADDR_OWVAR 39
35563: PUSH
35564: LD_VAR 0 2
35568: ST_TO_ADDR
// vc_control := control ;
35569: LD_ADDR_OWVAR 38
35573: PUSH
35574: LD_VAR 0 3
35578: ST_TO_ADDR
// vc_weapon := weapon ;
35579: LD_ADDR_OWVAR 40
35583: PUSH
35584: LD_VAR 0 4
35588: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35589: LD_ADDR_OWVAR 41
35593: PUSH
35594: LD_VAR 0 5
35598: ST_TO_ADDR
// end ;
35599: LD_VAR 0 6
35603: RET
// export function WantPlant ( unit ) ; var task ; begin
35604: LD_INT 0
35606: PPUSH
35607: PPUSH
// result := false ;
35608: LD_ADDR_VAR 0 2
35612: PUSH
35613: LD_INT 0
35615: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35616: LD_ADDR_VAR 0 3
35620: PUSH
35621: LD_VAR 0 1
35625: PPUSH
35626: CALL_OW 437
35630: ST_TO_ADDR
// if task then
35631: LD_VAR 0 3
35635: IFFALSE 35663
// if task [ 1 ] [ 1 ] = p then
35637: LD_VAR 0 3
35641: PUSH
35642: LD_INT 1
35644: ARRAY
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PUSH
35650: LD_STRING p
35652: EQUAL
35653: IFFALSE 35663
// result := true ;
35655: LD_ADDR_VAR 0 2
35659: PUSH
35660: LD_INT 1
35662: ST_TO_ADDR
// end ;
35663: LD_VAR 0 2
35667: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35668: LD_INT 0
35670: PPUSH
35671: PPUSH
35672: PPUSH
35673: PPUSH
// if pos < 1 then
35674: LD_VAR 0 2
35678: PUSH
35679: LD_INT 1
35681: LESS
35682: IFFALSE 35686
// exit ;
35684: GO 35989
// if pos = 1 then
35686: LD_VAR 0 2
35690: PUSH
35691: LD_INT 1
35693: EQUAL
35694: IFFALSE 35727
// result := Replace ( arr , pos [ 1 ] , value ) else
35696: LD_ADDR_VAR 0 4
35700: PUSH
35701: LD_VAR 0 1
35705: PPUSH
35706: LD_VAR 0 2
35710: PUSH
35711: LD_INT 1
35713: ARRAY
35714: PPUSH
35715: LD_VAR 0 3
35719: PPUSH
35720: CALL_OW 1
35724: ST_TO_ADDR
35725: GO 35989
// begin tmp := arr ;
35727: LD_ADDR_VAR 0 6
35731: PUSH
35732: LD_VAR 0 1
35736: ST_TO_ADDR
// s_arr := [ tmp ] ;
35737: LD_ADDR_VAR 0 7
35741: PUSH
35742: LD_VAR 0 6
35746: PUSH
35747: EMPTY
35748: LIST
35749: ST_TO_ADDR
// for i = 1 to pos - 1 do
35750: LD_ADDR_VAR 0 5
35754: PUSH
35755: DOUBLE
35756: LD_INT 1
35758: DEC
35759: ST_TO_ADDR
35760: LD_VAR 0 2
35764: PUSH
35765: LD_INT 1
35767: MINUS
35768: PUSH
35769: FOR_TO
35770: IFFALSE 35815
// begin tmp := tmp [ pos [ i ] ] ;
35772: LD_ADDR_VAR 0 6
35776: PUSH
35777: LD_VAR 0 6
35781: PUSH
35782: LD_VAR 0 2
35786: PUSH
35787: LD_VAR 0 5
35791: ARRAY
35792: ARRAY
35793: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35794: LD_ADDR_VAR 0 7
35798: PUSH
35799: LD_VAR 0 7
35803: PUSH
35804: LD_VAR 0 6
35808: PUSH
35809: EMPTY
35810: LIST
35811: ADD
35812: ST_TO_ADDR
// end ;
35813: GO 35769
35815: POP
35816: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35817: LD_ADDR_VAR 0 6
35821: PUSH
35822: LD_VAR 0 6
35826: PPUSH
35827: LD_VAR 0 2
35831: PUSH
35832: LD_VAR 0 2
35836: ARRAY
35837: PPUSH
35838: LD_VAR 0 3
35842: PPUSH
35843: CALL_OW 1
35847: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35848: LD_ADDR_VAR 0 7
35852: PUSH
35853: LD_VAR 0 7
35857: PPUSH
35858: LD_VAR 0 7
35862: PPUSH
35863: LD_VAR 0 6
35867: PPUSH
35868: CALL_OW 1
35872: ST_TO_ADDR
// for i = s_arr downto 2 do
35873: LD_ADDR_VAR 0 5
35877: PUSH
35878: DOUBLE
35879: LD_VAR 0 7
35883: INC
35884: ST_TO_ADDR
35885: LD_INT 2
35887: PUSH
35888: FOR_DOWNTO
35889: IFFALSE 35973
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35891: LD_ADDR_VAR 0 6
35895: PUSH
35896: LD_VAR 0 7
35900: PUSH
35901: LD_VAR 0 5
35905: PUSH
35906: LD_INT 1
35908: MINUS
35909: ARRAY
35910: PPUSH
35911: LD_VAR 0 2
35915: PUSH
35916: LD_VAR 0 5
35920: PUSH
35921: LD_INT 1
35923: MINUS
35924: ARRAY
35925: PPUSH
35926: LD_VAR 0 7
35930: PUSH
35931: LD_VAR 0 5
35935: ARRAY
35936: PPUSH
35937: CALL_OW 1
35941: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35942: LD_ADDR_VAR 0 7
35946: PUSH
35947: LD_VAR 0 7
35951: PPUSH
35952: LD_VAR 0 5
35956: PUSH
35957: LD_INT 1
35959: MINUS
35960: PPUSH
35961: LD_VAR 0 6
35965: PPUSH
35966: CALL_OW 1
35970: ST_TO_ADDR
// end ;
35971: GO 35888
35973: POP
35974: POP
// result := s_arr [ 1 ] ;
35975: LD_ADDR_VAR 0 4
35979: PUSH
35980: LD_VAR 0 7
35984: PUSH
35985: LD_INT 1
35987: ARRAY
35988: ST_TO_ADDR
// end ; end ;
35989: LD_VAR 0 4
35993: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35994: LD_INT 0
35996: PPUSH
35997: PPUSH
// if not list then
35998: LD_VAR 0 1
36002: NOT
36003: IFFALSE 36007
// exit ;
36005: GO 36098
// i := list [ pos1 ] ;
36007: LD_ADDR_VAR 0 5
36011: PUSH
36012: LD_VAR 0 1
36016: PUSH
36017: LD_VAR 0 2
36021: ARRAY
36022: ST_TO_ADDR
// if not i then
36023: LD_VAR 0 5
36027: NOT
36028: IFFALSE 36032
// exit ;
36030: GO 36098
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36032: LD_ADDR_VAR 0 1
36036: PUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: LD_VAR 0 2
36046: PPUSH
36047: LD_VAR 0 1
36051: PUSH
36052: LD_VAR 0 3
36056: ARRAY
36057: PPUSH
36058: CALL_OW 1
36062: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36063: LD_ADDR_VAR 0 1
36067: PUSH
36068: LD_VAR 0 1
36072: PPUSH
36073: LD_VAR 0 3
36077: PPUSH
36078: LD_VAR 0 5
36082: PPUSH
36083: CALL_OW 1
36087: ST_TO_ADDR
// result := list ;
36088: LD_ADDR_VAR 0 4
36092: PUSH
36093: LD_VAR 0 1
36097: ST_TO_ADDR
// end ;
36098: LD_VAR 0 4
36102: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36103: LD_INT 0
36105: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36106: LD_ADDR_VAR 0 5
36110: PUSH
36111: LD_VAR 0 1
36115: PPUSH
36116: CALL_OW 250
36120: PPUSH
36121: LD_VAR 0 1
36125: PPUSH
36126: CALL_OW 251
36130: PPUSH
36131: LD_VAR 0 2
36135: PPUSH
36136: LD_VAR 0 3
36140: PPUSH
36141: LD_VAR 0 4
36145: PPUSH
36146: CALL 36156 0 5
36150: ST_TO_ADDR
// end ;
36151: LD_VAR 0 5
36155: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36156: LD_INT 0
36158: PPUSH
36159: PPUSH
36160: PPUSH
36161: PPUSH
// if not list then
36162: LD_VAR 0 3
36166: NOT
36167: IFFALSE 36171
// exit ;
36169: GO 36559
// result := [ ] ;
36171: LD_ADDR_VAR 0 6
36175: PUSH
36176: EMPTY
36177: ST_TO_ADDR
// for i in list do
36178: LD_ADDR_VAR 0 7
36182: PUSH
36183: LD_VAR 0 3
36187: PUSH
36188: FOR_IN
36189: IFFALSE 36391
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36191: LD_ADDR_VAR 0 9
36195: PUSH
36196: LD_VAR 0 7
36200: PPUSH
36201: LD_VAR 0 1
36205: PPUSH
36206: LD_VAR 0 2
36210: PPUSH
36211: CALL_OW 297
36215: ST_TO_ADDR
// if not result then
36216: LD_VAR 0 6
36220: NOT
36221: IFFALSE 36247
// result := [ [ i , tmp ] ] else
36223: LD_ADDR_VAR 0 6
36227: PUSH
36228: LD_VAR 0 7
36232: PUSH
36233: LD_VAR 0 9
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: ST_TO_ADDR
36245: GO 36389
// begin if result [ result ] [ 2 ] < tmp then
36247: LD_VAR 0 6
36251: PUSH
36252: LD_VAR 0 6
36256: ARRAY
36257: PUSH
36258: LD_INT 2
36260: ARRAY
36261: PUSH
36262: LD_VAR 0 9
36266: LESS
36267: IFFALSE 36309
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36269: LD_ADDR_VAR 0 6
36273: PUSH
36274: LD_VAR 0 6
36278: PPUSH
36279: LD_VAR 0 6
36283: PUSH
36284: LD_INT 1
36286: PLUS
36287: PPUSH
36288: LD_VAR 0 7
36292: PUSH
36293: LD_VAR 0 9
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PPUSH
36302: CALL_OW 2
36306: ST_TO_ADDR
36307: GO 36389
// for j = 1 to result do
36309: LD_ADDR_VAR 0 8
36313: PUSH
36314: DOUBLE
36315: LD_INT 1
36317: DEC
36318: ST_TO_ADDR
36319: LD_VAR 0 6
36323: PUSH
36324: FOR_TO
36325: IFFALSE 36387
// begin if tmp < result [ j ] [ 2 ] then
36327: LD_VAR 0 9
36331: PUSH
36332: LD_VAR 0 6
36336: PUSH
36337: LD_VAR 0 8
36341: ARRAY
36342: PUSH
36343: LD_INT 2
36345: ARRAY
36346: LESS
36347: IFFALSE 36385
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36349: LD_ADDR_VAR 0 6
36353: PUSH
36354: LD_VAR 0 6
36358: PPUSH
36359: LD_VAR 0 8
36363: PPUSH
36364: LD_VAR 0 7
36368: PUSH
36369: LD_VAR 0 9
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PPUSH
36378: CALL_OW 2
36382: ST_TO_ADDR
// break ;
36383: GO 36387
// end ; end ;
36385: GO 36324
36387: POP
36388: POP
// end ; end ;
36389: GO 36188
36391: POP
36392: POP
// if result and not asc then
36393: LD_VAR 0 6
36397: PUSH
36398: LD_VAR 0 4
36402: NOT
36403: AND
36404: IFFALSE 36479
// begin tmp := result ;
36406: LD_ADDR_VAR 0 9
36410: PUSH
36411: LD_VAR 0 6
36415: ST_TO_ADDR
// for i = tmp downto 1 do
36416: LD_ADDR_VAR 0 7
36420: PUSH
36421: DOUBLE
36422: LD_VAR 0 9
36426: INC
36427: ST_TO_ADDR
36428: LD_INT 1
36430: PUSH
36431: FOR_DOWNTO
36432: IFFALSE 36477
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36434: LD_ADDR_VAR 0 6
36438: PUSH
36439: LD_VAR 0 6
36443: PPUSH
36444: LD_VAR 0 9
36448: PUSH
36449: LD_VAR 0 7
36453: MINUS
36454: PUSH
36455: LD_INT 1
36457: PLUS
36458: PPUSH
36459: LD_VAR 0 9
36463: PUSH
36464: LD_VAR 0 7
36468: ARRAY
36469: PPUSH
36470: CALL_OW 1
36474: ST_TO_ADDR
36475: GO 36431
36477: POP
36478: POP
// end ; tmp := [ ] ;
36479: LD_ADDR_VAR 0 9
36483: PUSH
36484: EMPTY
36485: ST_TO_ADDR
// if mode then
36486: LD_VAR 0 5
36490: IFFALSE 36559
// begin for i = 1 to result do
36492: LD_ADDR_VAR 0 7
36496: PUSH
36497: DOUBLE
36498: LD_INT 1
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 6
36506: PUSH
36507: FOR_TO
36508: IFFALSE 36547
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36510: LD_ADDR_VAR 0 9
36514: PUSH
36515: LD_VAR 0 9
36519: PPUSH
36520: LD_VAR 0 7
36524: PPUSH
36525: LD_VAR 0 6
36529: PUSH
36530: LD_VAR 0 7
36534: ARRAY
36535: PUSH
36536: LD_INT 1
36538: ARRAY
36539: PPUSH
36540: CALL_OW 1
36544: ST_TO_ADDR
36545: GO 36507
36547: POP
36548: POP
// result := tmp ;
36549: LD_ADDR_VAR 0 6
36553: PUSH
36554: LD_VAR 0 9
36558: ST_TO_ADDR
// end ; end ;
36559: LD_VAR 0 6
36563: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36564: LD_INT 0
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36572: LD_ADDR_VAR 0 5
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: ST_TO_ADDR
// if not x or not y then
36594: LD_VAR 0 2
36598: NOT
36599: PUSH
36600: LD_VAR 0 3
36604: NOT
36605: OR
36606: IFFALSE 36610
// exit ;
36608: GO 38256
// if not range then
36610: LD_VAR 0 4
36614: NOT
36615: IFFALSE 36625
// range := 10 ;
36617: LD_ADDR_VAR 0 4
36621: PUSH
36622: LD_INT 10
36624: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36625: LD_ADDR_VAR 0 8
36629: PUSH
36630: LD_INT 81
36632: PUSH
36633: LD_VAR 0 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 92
36644: PUSH
36645: LD_VAR 0 2
36649: PUSH
36650: LD_VAR 0 3
36654: PUSH
36655: LD_VAR 0 4
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: LD_INT 21
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: PPUSH
36688: CALL_OW 69
36692: ST_TO_ADDR
// if not tmp then
36693: LD_VAR 0 8
36697: NOT
36698: IFFALSE 36702
// exit ;
36700: GO 38256
// for i in tmp do
36702: LD_ADDR_VAR 0 6
36706: PUSH
36707: LD_VAR 0 8
36711: PUSH
36712: FOR_IN
36713: IFFALSE 38231
// begin points := [ 0 , 0 , 0 ] ;
36715: LD_ADDR_VAR 0 9
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: ST_TO_ADDR
// bpoints := 1 ;
36734: LD_ADDR_VAR 0 10
36738: PUSH
36739: LD_INT 1
36741: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36742: LD_VAR 0 6
36746: PPUSH
36747: CALL_OW 247
36751: PUSH
36752: LD_INT 1
36754: DOUBLE
36755: EQUAL
36756: IFTRUE 36760
36758: GO 37338
36760: POP
// begin if GetClass ( i ) = 1 then
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 257
36770: PUSH
36771: LD_INT 1
36773: EQUAL
36774: IFFALSE 36795
// points := [ 10 , 5 , 3 ] ;
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_INT 10
36783: PUSH
36784: LD_INT 5
36786: PUSH
36787: LD_INT 3
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36795: LD_VAR 0 6
36799: PPUSH
36800: CALL_OW 257
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 3
36810: PUSH
36811: LD_INT 4
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: IN
36819: IFFALSE 36840
// points := [ 3 , 2 , 1 ] ;
36821: LD_ADDR_VAR 0 9
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: LIST
36839: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36840: LD_VAR 0 6
36844: PPUSH
36845: CALL_OW 257
36849: PUSH
36850: LD_INT 5
36852: EQUAL
36853: IFFALSE 36874
// points := [ 130 , 5 , 2 ] ;
36855: LD_ADDR_VAR 0 9
36859: PUSH
36860: LD_INT 130
36862: PUSH
36863: LD_INT 5
36865: PUSH
36866: LD_INT 2
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36874: LD_VAR 0 6
36878: PPUSH
36879: CALL_OW 257
36883: PUSH
36884: LD_INT 8
36886: EQUAL
36887: IFFALSE 36908
// points := [ 35 , 35 , 30 ] ;
36889: LD_ADDR_VAR 0 9
36893: PUSH
36894: LD_INT 35
36896: PUSH
36897: LD_INT 35
36899: PUSH
36900: LD_INT 30
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: LIST
36907: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36908: LD_VAR 0 6
36912: PPUSH
36913: CALL_OW 257
36917: PUSH
36918: LD_INT 9
36920: EQUAL
36921: IFFALSE 36942
// points := [ 20 , 55 , 40 ] ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: LD_INT 20
36930: PUSH
36931: LD_INT 55
36933: PUSH
36934: LD_INT 40
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36942: LD_VAR 0 6
36946: PPUSH
36947: CALL_OW 257
36951: PUSH
36952: LD_INT 12
36954: PUSH
36955: LD_INT 16
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: IN
36962: IFFALSE 36983
// points := [ 5 , 3 , 2 ] ;
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_INT 5
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL_OW 257
36992: PUSH
36993: LD_INT 17
36995: EQUAL
36996: IFFALSE 37017
// points := [ 100 , 50 , 75 ] ;
36998: LD_ADDR_VAR 0 9
37002: PUSH
37003: LD_INT 100
37005: PUSH
37006: LD_INT 50
37008: PUSH
37009: LD_INT 75
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37017: LD_VAR 0 6
37021: PPUSH
37022: CALL_OW 257
37026: PUSH
37027: LD_INT 15
37029: EQUAL
37030: IFFALSE 37051
// points := [ 10 , 5 , 3 ] ;
37032: LD_ADDR_VAR 0 9
37036: PUSH
37037: LD_INT 10
37039: PUSH
37040: LD_INT 5
37042: PUSH
37043: LD_INT 3
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37051: LD_VAR 0 6
37055: PPUSH
37056: CALL_OW 257
37060: PUSH
37061: LD_INT 14
37063: EQUAL
37064: IFFALSE 37085
// points := [ 10 , 0 , 0 ] ;
37066: LD_ADDR_VAR 0 9
37070: PUSH
37071: LD_INT 10
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37085: LD_VAR 0 6
37089: PPUSH
37090: CALL_OW 257
37094: PUSH
37095: LD_INT 11
37097: EQUAL
37098: IFFALSE 37119
// points := [ 30 , 10 , 5 ] ;
37100: LD_ADDR_VAR 0 9
37104: PUSH
37105: LD_INT 30
37107: PUSH
37108: LD_INT 10
37110: PUSH
37111: LD_INT 5
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37119: LD_VAR 0 1
37123: PPUSH
37124: LD_INT 5
37126: PPUSH
37127: CALL_OW 321
37131: PUSH
37132: LD_INT 2
37134: EQUAL
37135: IFFALSE 37152
// bpoints := bpoints * 1.8 ;
37137: LD_ADDR_VAR 0 10
37141: PUSH
37142: LD_VAR 0 10
37146: PUSH
37147: LD_REAL  1.80000000000000E+0000
37150: MUL
37151: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37152: LD_VAR 0 6
37156: PPUSH
37157: CALL_OW 257
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: LD_INT 4
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: IN
37180: PUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: LD_INT 51
37188: PPUSH
37189: CALL_OW 321
37193: PUSH
37194: LD_INT 2
37196: EQUAL
37197: AND
37198: IFFALSE 37215
// bpoints := bpoints * 1.2 ;
37200: LD_ADDR_VAR 0 10
37204: PUSH
37205: LD_VAR 0 10
37209: PUSH
37210: LD_REAL  1.20000000000000E+0000
37213: MUL
37214: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37215: LD_VAR 0 6
37219: PPUSH
37220: CALL_OW 257
37224: PUSH
37225: LD_INT 5
37227: PUSH
37228: LD_INT 7
37230: PUSH
37231: LD_INT 9
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: LIST
37238: IN
37239: PUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: LD_INT 52
37247: PPUSH
37248: CALL_OW 321
37252: PUSH
37253: LD_INT 2
37255: EQUAL
37256: AND
37257: IFFALSE 37274
// bpoints := bpoints * 1.5 ;
37259: LD_ADDR_VAR 0 10
37263: PUSH
37264: LD_VAR 0 10
37268: PUSH
37269: LD_REAL  1.50000000000000E+0000
37272: MUL
37273: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_INT 66
37281: PPUSH
37282: CALL_OW 321
37286: PUSH
37287: LD_INT 2
37289: EQUAL
37290: IFFALSE 37307
// bpoints := bpoints * 1.1 ;
37292: LD_ADDR_VAR 0 10
37296: PUSH
37297: LD_VAR 0 10
37301: PUSH
37302: LD_REAL  1.10000000000000E+0000
37305: MUL
37306: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37307: LD_ADDR_VAR 0 10
37311: PUSH
37312: LD_VAR 0 10
37316: PUSH
37317: LD_VAR 0 6
37321: PPUSH
37322: LD_INT 1
37324: PPUSH
37325: CALL_OW 259
37329: PUSH
37330: LD_REAL  1.15000000000000E+0000
37333: MUL
37334: MUL
37335: ST_TO_ADDR
// end ; unit_vehicle :
37336: GO 38160
37338: LD_INT 2
37340: DOUBLE
37341: EQUAL
37342: IFTRUE 37346
37344: GO 38148
37346: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37347: LD_VAR 0 6
37351: PPUSH
37352: CALL_OW 264
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: LD_INT 42
37362: PUSH
37363: LD_INT 24
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: IN
37371: IFFALSE 37392
// points := [ 25 , 5 , 3 ] ;
37373: LD_ADDR_VAR 0 9
37377: PUSH
37378: LD_INT 25
37380: PUSH
37381: LD_INT 5
37383: PUSH
37384: LD_INT 3
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: LIST
37391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37392: LD_VAR 0 6
37396: PPUSH
37397: CALL_OW 264
37401: PUSH
37402: LD_INT 4
37404: PUSH
37405: LD_INT 43
37407: PUSH
37408: LD_INT 25
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: IN
37416: IFFALSE 37437
// points := [ 40 , 15 , 5 ] ;
37418: LD_ADDR_VAR 0 9
37422: PUSH
37423: LD_INT 40
37425: PUSH
37426: LD_INT 15
37428: PUSH
37429: LD_INT 5
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37437: LD_VAR 0 6
37441: PPUSH
37442: CALL_OW 264
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: LD_INT 23
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: IN
37457: IFFALSE 37478
// points := [ 7 , 25 , 8 ] ;
37459: LD_ADDR_VAR 0 9
37463: PUSH
37464: LD_INT 7
37466: PUSH
37467: LD_INT 25
37469: PUSH
37470: LD_INT 8
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: LIST
37477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37478: LD_VAR 0 6
37482: PPUSH
37483: CALL_OW 264
37487: PUSH
37488: LD_INT 5
37490: PUSH
37491: LD_INT 27
37493: PUSH
37494: LD_INT 44
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: IN
37502: IFFALSE 37523
// points := [ 14 , 50 , 16 ] ;
37504: LD_ADDR_VAR 0 9
37508: PUSH
37509: LD_INT 14
37511: PUSH
37512: LD_INT 50
37514: PUSH
37515: LD_INT 16
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37523: LD_VAR 0 6
37527: PPUSH
37528: CALL_OW 264
37532: PUSH
37533: LD_INT 6
37535: PUSH
37536: LD_INT 46
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: IN
37543: IFFALSE 37564
// points := [ 32 , 120 , 70 ] ;
37545: LD_ADDR_VAR 0 9
37549: PUSH
37550: LD_INT 32
37552: PUSH
37553: LD_INT 120
37555: PUSH
37556: LD_INT 70
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
37564: LD_VAR 0 6
37568: PPUSH
37569: CALL_OW 264
37573: PUSH
37574: LD_INT 7
37576: PUSH
37577: LD_INT 28
37579: PUSH
37580: LD_INT 45
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: IN
37588: IFFALSE 37609
// points := [ 35 , 20 , 45 ] ;
37590: LD_ADDR_VAR 0 9
37594: PUSH
37595: LD_INT 35
37597: PUSH
37598: LD_INT 20
37600: PUSH
37601: LD_INT 45
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: LIST
37608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37609: LD_VAR 0 6
37613: PPUSH
37614: CALL_OW 264
37618: PUSH
37619: LD_INT 47
37621: PUSH
37622: EMPTY
37623: LIST
37624: IN
37625: IFFALSE 37646
// points := [ 67 , 45 , 75 ] ;
37627: LD_ADDR_VAR 0 9
37631: PUSH
37632: LD_INT 67
37634: PUSH
37635: LD_INT 45
37637: PUSH
37638: LD_INT 75
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37646: LD_VAR 0 6
37650: PPUSH
37651: CALL_OW 264
37655: PUSH
37656: LD_INT 26
37658: PUSH
37659: EMPTY
37660: LIST
37661: IN
37662: IFFALSE 37683
// points := [ 120 , 30 , 80 ] ;
37664: LD_ADDR_VAR 0 9
37668: PUSH
37669: LD_INT 120
37671: PUSH
37672: LD_INT 30
37674: PUSH
37675: LD_INT 80
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37683: LD_VAR 0 6
37687: PPUSH
37688: CALL_OW 264
37692: PUSH
37693: LD_INT 22
37695: PUSH
37696: EMPTY
37697: LIST
37698: IN
37699: IFFALSE 37720
// points := [ 40 , 1 , 1 ] ;
37701: LD_ADDR_VAR 0 9
37705: PUSH
37706: LD_INT 40
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37720: LD_VAR 0 6
37724: PPUSH
37725: CALL_OW 264
37729: PUSH
37730: LD_INT 29
37732: PUSH
37733: EMPTY
37734: LIST
37735: IN
37736: IFFALSE 37757
// points := [ 70 , 200 , 400 ] ;
37738: LD_ADDR_VAR 0 9
37742: PUSH
37743: LD_INT 70
37745: PUSH
37746: LD_INT 200
37748: PUSH
37749: LD_INT 400
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37757: LD_VAR 0 6
37761: PPUSH
37762: CALL_OW 264
37766: PUSH
37767: LD_INT 14
37769: PUSH
37770: LD_INT 53
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: IN
37777: IFFALSE 37798
// points := [ 40 , 10 , 20 ] ;
37779: LD_ADDR_VAR 0 9
37783: PUSH
37784: LD_INT 40
37786: PUSH
37787: LD_INT 10
37789: PUSH
37790: LD_INT 20
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37798: LD_VAR 0 6
37802: PPUSH
37803: CALL_OW 264
37807: PUSH
37808: LD_INT 9
37810: PUSH
37811: EMPTY
37812: LIST
37813: IN
37814: IFFALSE 37835
// points := [ 5 , 70 , 20 ] ;
37816: LD_ADDR_VAR 0 9
37820: PUSH
37821: LD_INT 5
37823: PUSH
37824: LD_INT 70
37826: PUSH
37827: LD_INT 20
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37835: LD_VAR 0 6
37839: PPUSH
37840: CALL_OW 264
37844: PUSH
37845: LD_INT 10
37847: PUSH
37848: EMPTY
37849: LIST
37850: IN
37851: IFFALSE 37872
// points := [ 35 , 110 , 70 ] ;
37853: LD_ADDR_VAR 0 9
37857: PUSH
37858: LD_INT 35
37860: PUSH
37861: LD_INT 110
37863: PUSH
37864: LD_INT 70
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37872: LD_VAR 0 6
37876: PPUSH
37877: CALL_OW 265
37881: PUSH
37882: LD_INT 25
37884: EQUAL
37885: IFFALSE 37906
// points := [ 80 , 65 , 100 ] ;
37887: LD_ADDR_VAR 0 9
37891: PUSH
37892: LD_INT 80
37894: PUSH
37895: LD_INT 65
37897: PUSH
37898: LD_INT 100
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37906: LD_VAR 0 6
37910: PPUSH
37911: CALL_OW 263
37915: PUSH
37916: LD_INT 1
37918: EQUAL
37919: IFFALSE 37954
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37921: LD_ADDR_VAR 0 10
37925: PUSH
37926: LD_VAR 0 10
37930: PUSH
37931: LD_VAR 0 6
37935: PPUSH
37936: CALL_OW 311
37940: PPUSH
37941: LD_INT 3
37943: PPUSH
37944: CALL_OW 259
37948: PUSH
37949: LD_INT 4
37951: MUL
37952: MUL
37953: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37954: LD_VAR 0 6
37958: PPUSH
37959: CALL_OW 263
37963: PUSH
37964: LD_INT 2
37966: EQUAL
37967: IFFALSE 38018
// begin j := IsControledBy ( i ) ;
37969: LD_ADDR_VAR 0 7
37973: PUSH
37974: LD_VAR 0 6
37978: PPUSH
37979: CALL_OW 312
37983: ST_TO_ADDR
// if j then
37984: LD_VAR 0 7
37988: IFFALSE 38018
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37990: LD_ADDR_VAR 0 10
37994: PUSH
37995: LD_VAR 0 10
37999: PUSH
38000: LD_VAR 0 7
38004: PPUSH
38005: LD_INT 3
38007: PPUSH
38008: CALL_OW 259
38012: PUSH
38013: LD_INT 3
38015: MUL
38016: MUL
38017: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38018: LD_VAR 0 6
38022: PPUSH
38023: CALL_OW 264
38027: PUSH
38028: LD_INT 5
38030: PUSH
38031: LD_INT 6
38033: PUSH
38034: LD_INT 46
38036: PUSH
38037: LD_INT 44
38039: PUSH
38040: LD_INT 47
38042: PUSH
38043: LD_INT 45
38045: PUSH
38046: LD_INT 28
38048: PUSH
38049: LD_INT 7
38051: PUSH
38052: LD_INT 27
38054: PUSH
38055: LD_INT 29
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: IN
38070: PUSH
38071: LD_VAR 0 1
38075: PPUSH
38076: LD_INT 52
38078: PPUSH
38079: CALL_OW 321
38083: PUSH
38084: LD_INT 2
38086: EQUAL
38087: AND
38088: IFFALSE 38105
// bpoints := bpoints * 1.2 ;
38090: LD_ADDR_VAR 0 10
38094: PUSH
38095: LD_VAR 0 10
38099: PUSH
38100: LD_REAL  1.20000000000000E+0000
38103: MUL
38104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38105: LD_VAR 0 6
38109: PPUSH
38110: CALL_OW 264
38114: PUSH
38115: LD_INT 6
38117: PUSH
38118: LD_INT 46
38120: PUSH
38121: LD_INT 47
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: IN
38129: IFFALSE 38146
// bpoints := bpoints * 1.2 ;
38131: LD_ADDR_VAR 0 10
38135: PUSH
38136: LD_VAR 0 10
38140: PUSH
38141: LD_REAL  1.20000000000000E+0000
38144: MUL
38145: ST_TO_ADDR
// end ; unit_building :
38146: GO 38160
38148: LD_INT 3
38150: DOUBLE
38151: EQUAL
38152: IFTRUE 38156
38154: GO 38159
38156: POP
// ; end ;
38157: GO 38160
38159: POP
// for j = 1 to 3 do
38160: LD_ADDR_VAR 0 7
38164: PUSH
38165: DOUBLE
38166: LD_INT 1
38168: DEC
38169: ST_TO_ADDR
38170: LD_INT 3
38172: PUSH
38173: FOR_TO
38174: IFFALSE 38227
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38176: LD_ADDR_VAR 0 5
38180: PUSH
38181: LD_VAR 0 5
38185: PPUSH
38186: LD_VAR 0 7
38190: PPUSH
38191: LD_VAR 0 5
38195: PUSH
38196: LD_VAR 0 7
38200: ARRAY
38201: PUSH
38202: LD_VAR 0 9
38206: PUSH
38207: LD_VAR 0 7
38211: ARRAY
38212: PUSH
38213: LD_VAR 0 10
38217: MUL
38218: PLUS
38219: PPUSH
38220: CALL_OW 1
38224: ST_TO_ADDR
38225: GO 38173
38227: POP
38228: POP
// end ;
38229: GO 36712
38231: POP
38232: POP
// result := Replace ( result , 4 , tmp ) ;
38233: LD_ADDR_VAR 0 5
38237: PUSH
38238: LD_VAR 0 5
38242: PPUSH
38243: LD_INT 4
38245: PPUSH
38246: LD_VAR 0 8
38250: PPUSH
38251: CALL_OW 1
38255: ST_TO_ADDR
// end ;
38256: LD_VAR 0 5
38260: RET
// export function DangerAtRange ( unit , range ) ; begin
38261: LD_INT 0
38263: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38264: LD_ADDR_VAR 0 3
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 255
38278: PPUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 250
38288: PPUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 251
38298: PPUSH
38299: LD_VAR 0 2
38303: PPUSH
38304: CALL 36564 0 4
38308: ST_TO_ADDR
// end ;
38309: LD_VAR 0 3
38313: RET
// export function DangerInArea ( side , area ) ; begin
38314: LD_INT 0
38316: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38317: LD_ADDR_VAR 0 3
38321: PUSH
38322: LD_VAR 0 2
38326: PPUSH
38327: LD_INT 81
38329: PUSH
38330: LD_VAR 0 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PPUSH
38339: CALL_OW 70
38343: ST_TO_ADDR
// end ;
38344: LD_VAR 0 3
38348: RET
// export function IsExtension ( b ) ; begin
38349: LD_INT 0
38351: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38352: LD_ADDR_VAR 0 2
38356: PUSH
38357: LD_VAR 0 1
38361: PUSH
38362: LD_INT 23
38364: PUSH
38365: LD_INT 20
38367: PUSH
38368: LD_INT 22
38370: PUSH
38371: LD_INT 17
38373: PUSH
38374: LD_INT 24
38376: PUSH
38377: LD_INT 21
38379: PUSH
38380: LD_INT 19
38382: PUSH
38383: LD_INT 16
38385: PUSH
38386: LD_INT 25
38388: PUSH
38389: LD_INT 18
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: IN
38404: ST_TO_ADDR
// end ;
38405: LD_VAR 0 2
38409: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
38410: LD_INT 0
38412: PPUSH
38413: PPUSH
38414: PPUSH
// result := [ ] ;
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: EMPTY
38421: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38422: LD_ADDR_VAR 0 4
38426: PUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_INT 21
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PPUSH
38442: CALL_OW 70
38446: ST_TO_ADDR
// if not tmp then
38447: LD_VAR 0 4
38451: NOT
38452: IFFALSE 38456
// exit ;
38454: GO 38514
// for i in tmp do
38456: LD_ADDR_VAR 0 5
38460: PUSH
38461: LD_VAR 0 4
38465: PUSH
38466: FOR_IN
38467: IFFALSE 38502
// if GetBase ( i ) <> base then
38469: LD_VAR 0 5
38473: PPUSH
38474: CALL_OW 274
38478: PUSH
38479: LD_VAR 0 1
38483: NONEQUAL
38484: IFFALSE 38500
// ComLinkToBase ( base , i ) ;
38486: LD_VAR 0 1
38490: PPUSH
38491: LD_VAR 0 5
38495: PPUSH
38496: CALL_OW 169
38500: GO 38466
38502: POP
38503: POP
// result := tmp ;
38504: LD_ADDR_VAR 0 3
38508: PUSH
38509: LD_VAR 0 4
38513: ST_TO_ADDR
// end ;
38514: LD_VAR 0 3
38518: RET
// export function ComComplete ( unit , b ) ; var i ; begin
38519: LD_INT 0
38521: PPUSH
38522: PPUSH
// if BuildingStatus ( b ) = bs_build then
38523: LD_VAR 0 2
38527: PPUSH
38528: CALL_OW 461
38532: PUSH
38533: LD_INT 1
38535: EQUAL
38536: IFFALSE 38596
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38538: LD_VAR 0 1
38542: PPUSH
38543: LD_STRING h
38545: PUSH
38546: LD_VAR 0 2
38550: PPUSH
38551: CALL_OW 250
38555: PUSH
38556: LD_VAR 0 2
38560: PPUSH
38561: CALL_OW 251
38565: PUSH
38566: LD_VAR 0 2
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: PPUSH
38592: CALL_OW 446
// end ;
38596: LD_VAR 0 3
38600: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38601: LD_INT 0
38603: PPUSH
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
38608: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
38609: LD_VAR 0 1
38613: NOT
38614: PUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 263
38624: PUSH
38625: LD_INT 2
38627: EQUAL
38628: NOT
38629: OR
38630: IFFALSE 38634
// exit ;
38632: GO 38950
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38634: LD_ADDR_VAR 0 6
38638: PUSH
38639: LD_INT 22
38641: PUSH
38642: LD_VAR 0 1
38646: PPUSH
38647: CALL_OW 255
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 30
38661: PUSH
38662: LD_INT 36
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 34
38671: PUSH
38672: LD_INT 31
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PPUSH
38688: CALL_OW 69
38692: ST_TO_ADDR
// if not tmp then
38693: LD_VAR 0 6
38697: NOT
38698: IFFALSE 38702
// exit ;
38700: GO 38950
// result := [ ] ;
38702: LD_ADDR_VAR 0 2
38706: PUSH
38707: EMPTY
38708: ST_TO_ADDR
// for i in tmp do
38709: LD_ADDR_VAR 0 3
38713: PUSH
38714: LD_VAR 0 6
38718: PUSH
38719: FOR_IN
38720: IFFALSE 38791
// begin t := UnitsInside ( i ) ;
38722: LD_ADDR_VAR 0 4
38726: PUSH
38727: LD_VAR 0 3
38731: PPUSH
38732: CALL_OW 313
38736: ST_TO_ADDR
// if t then
38737: LD_VAR 0 4
38741: IFFALSE 38789
// for j in t do
38743: LD_ADDR_VAR 0 7
38747: PUSH
38748: LD_VAR 0 4
38752: PUSH
38753: FOR_IN
38754: IFFALSE 38787
// result := Insert ( result , result + 1 , j ) ;
38756: LD_ADDR_VAR 0 2
38760: PUSH
38761: LD_VAR 0 2
38765: PPUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_INT 1
38773: PLUS
38774: PPUSH
38775: LD_VAR 0 7
38779: PPUSH
38780: CALL_OW 2
38784: ST_TO_ADDR
38785: GO 38753
38787: POP
38788: POP
// end ;
38789: GO 38719
38791: POP
38792: POP
// if not result then
38793: LD_VAR 0 2
38797: NOT
38798: IFFALSE 38802
// exit ;
38800: GO 38950
// mech := result [ 1 ] ;
38802: LD_ADDR_VAR 0 5
38806: PUSH
38807: LD_VAR 0 2
38811: PUSH
38812: LD_INT 1
38814: ARRAY
38815: ST_TO_ADDR
// if result > 1 then
38816: LD_VAR 0 2
38820: PUSH
38821: LD_INT 1
38823: GREATER
38824: IFFALSE 38936
// for i = 2 to result do
38826: LD_ADDR_VAR 0 3
38830: PUSH
38831: DOUBLE
38832: LD_INT 2
38834: DEC
38835: ST_TO_ADDR
38836: LD_VAR 0 2
38840: PUSH
38841: FOR_TO
38842: IFFALSE 38934
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38844: LD_ADDR_VAR 0 4
38848: PUSH
38849: LD_VAR 0 2
38853: PUSH
38854: LD_VAR 0 3
38858: ARRAY
38859: PPUSH
38860: LD_INT 3
38862: PPUSH
38863: CALL_OW 259
38867: PUSH
38868: LD_VAR 0 2
38872: PUSH
38873: LD_VAR 0 3
38877: ARRAY
38878: PPUSH
38879: CALL_OW 432
38883: MINUS
38884: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38885: LD_VAR 0 4
38889: PUSH
38890: LD_VAR 0 5
38894: PPUSH
38895: LD_INT 3
38897: PPUSH
38898: CALL_OW 259
38902: PUSH
38903: LD_VAR 0 5
38907: PPUSH
38908: CALL_OW 432
38912: MINUS
38913: GREATEREQUAL
38914: IFFALSE 38932
// mech := result [ i ] ;
38916: LD_ADDR_VAR 0 5
38920: PUSH
38921: LD_VAR 0 2
38925: PUSH
38926: LD_VAR 0 3
38930: ARRAY
38931: ST_TO_ADDR
// end ;
38932: GO 38841
38934: POP
38935: POP
// ComLinkTo ( vehicle , mech ) ;
38936: LD_VAR 0 1
38940: PPUSH
38941: LD_VAR 0 5
38945: PPUSH
38946: CALL_OW 135
// end ;
38950: LD_VAR 0 2
38954: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38955: LD_INT 0
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
// result := [ ] ;
38970: LD_ADDR_VAR 0 7
38974: PUSH
38975: EMPTY
38976: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 266
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: IN
38997: NOT
38998: IFFALSE 39002
// exit ;
39000: GO 40633
// if name then
39002: LD_VAR 0 3
39006: IFFALSE 39022
// SetBName ( base_dep , name ) ;
39008: LD_VAR 0 1
39012: PPUSH
39013: LD_VAR 0 3
39017: PPUSH
39018: CALL_OW 500
// base := GetBase ( base_dep ) ;
39022: LD_ADDR_VAR 0 15
39026: PUSH
39027: LD_VAR 0 1
39031: PPUSH
39032: CALL_OW 274
39036: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39037: LD_ADDR_VAR 0 16
39041: PUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 255
39051: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39052: LD_ADDR_VAR 0 17
39056: PUSH
39057: LD_VAR 0 1
39061: PPUSH
39062: CALL_OW 248
39066: ST_TO_ADDR
// if sources then
39067: LD_VAR 0 5
39071: IFFALSE 39118
// for i = 1 to 3 do
39073: LD_ADDR_VAR 0 8
39077: PUSH
39078: DOUBLE
39079: LD_INT 1
39081: DEC
39082: ST_TO_ADDR
39083: LD_INT 3
39085: PUSH
39086: FOR_TO
39087: IFFALSE 39116
// AddResourceType ( base , i , sources [ i ] ) ;
39089: LD_VAR 0 15
39093: PPUSH
39094: LD_VAR 0 8
39098: PPUSH
39099: LD_VAR 0 5
39103: PUSH
39104: LD_VAR 0 8
39108: ARRAY
39109: PPUSH
39110: CALL_OW 276
39114: GO 39086
39116: POP
39117: POP
// buildings := GetBaseBuildings ( base , area ) ;
39118: LD_ADDR_VAR 0 18
39122: PUSH
39123: LD_VAR 0 15
39127: PPUSH
39128: LD_VAR 0 2
39132: PPUSH
39133: CALL 38410 0 2
39137: ST_TO_ADDR
// InitHc ;
39138: CALL_OW 19
// InitUc ;
39142: CALL_OW 18
// uc_side := side ;
39146: LD_ADDR_OWVAR 20
39150: PUSH
39151: LD_VAR 0 16
39155: ST_TO_ADDR
// uc_nation := nation ;
39156: LD_ADDR_OWVAR 21
39160: PUSH
39161: LD_VAR 0 17
39165: ST_TO_ADDR
// if buildings then
39166: LD_VAR 0 18
39170: IFFALSE 40492
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39172: LD_ADDR_VAR 0 19
39176: PUSH
39177: LD_VAR 0 18
39181: PPUSH
39182: LD_INT 2
39184: PUSH
39185: LD_INT 30
39187: PUSH
39188: LD_INT 29
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 30
39197: PUSH
39198: LD_INT 30
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: PPUSH
39210: CALL_OW 72
39214: ST_TO_ADDR
// if tmp then
39215: LD_VAR 0 19
39219: IFFALSE 39267
// for i in tmp do
39221: LD_ADDR_VAR 0 8
39225: PUSH
39226: LD_VAR 0 19
39230: PUSH
39231: FOR_IN
39232: IFFALSE 39265
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39234: LD_VAR 0 8
39238: PPUSH
39239: CALL_OW 250
39243: PPUSH
39244: LD_VAR 0 8
39248: PPUSH
39249: CALL_OW 251
39253: PPUSH
39254: LD_VAR 0 16
39258: PPUSH
39259: CALL_OW 441
39263: GO 39231
39265: POP
39266: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39267: LD_VAR 0 18
39271: PPUSH
39272: LD_INT 2
39274: PUSH
39275: LD_INT 30
39277: PUSH
39278: LD_INT 32
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 30
39287: PUSH
39288: LD_INT 33
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: PPUSH
39300: CALL_OW 72
39304: IFFALSE 39392
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39306: LD_ADDR_VAR 0 8
39310: PUSH
39311: LD_VAR 0 18
39315: PPUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 30
39321: PUSH
39322: LD_INT 32
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 30
39331: PUSH
39332: LD_INT 33
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: LIST
39343: PPUSH
39344: CALL_OW 72
39348: PUSH
39349: FOR_IN
39350: IFFALSE 39390
// begin if not GetBWeapon ( i ) then
39352: LD_VAR 0 8
39356: PPUSH
39357: CALL_OW 269
39361: NOT
39362: IFFALSE 39388
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39364: LD_VAR 0 8
39368: PPUSH
39369: LD_VAR 0 8
39373: PPUSH
39374: LD_VAR 0 2
39378: PPUSH
39379: CALL 40638 0 2
39383: PPUSH
39384: CALL_OW 431
// end ;
39388: GO 39349
39390: POP
39391: POP
// end ; for i = 1 to personel do
39392: LD_ADDR_VAR 0 8
39396: PUSH
39397: DOUBLE
39398: LD_INT 1
39400: DEC
39401: ST_TO_ADDR
39402: LD_VAR 0 6
39406: PUSH
39407: FOR_TO
39408: IFFALSE 40472
// begin if i > 4 then
39410: LD_VAR 0 8
39414: PUSH
39415: LD_INT 4
39417: GREATER
39418: IFFALSE 39422
// break ;
39420: GO 40472
// case i of 1 :
39422: LD_VAR 0 8
39426: PUSH
39427: LD_INT 1
39429: DOUBLE
39430: EQUAL
39431: IFTRUE 39435
39433: GO 39515
39435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39436: LD_ADDR_VAR 0 12
39440: PUSH
39441: LD_VAR 0 18
39445: PPUSH
39446: LD_INT 22
39448: PUSH
39449: LD_VAR 0 16
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 58
39460: PUSH
39461: EMPTY
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 30
39469: PUSH
39470: LD_INT 32
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 30
39479: PUSH
39480: LD_INT 4
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 30
39489: PUSH
39490: LD_INT 5
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: LIST
39507: PPUSH
39508: CALL_OW 72
39512: ST_TO_ADDR
39513: GO 39737
39515: LD_INT 2
39517: DOUBLE
39518: EQUAL
39519: IFTRUE 39523
39521: GO 39585
39523: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39524: LD_ADDR_VAR 0 12
39528: PUSH
39529: LD_VAR 0 18
39533: PPUSH
39534: LD_INT 22
39536: PUSH
39537: LD_VAR 0 16
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 2
39548: PUSH
39549: LD_INT 30
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 30
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PPUSH
39578: CALL_OW 72
39582: ST_TO_ADDR
39583: GO 39737
39585: LD_INT 3
39587: DOUBLE
39588: EQUAL
39589: IFTRUE 39593
39591: GO 39655
39593: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39594: LD_ADDR_VAR 0 12
39598: PUSH
39599: LD_VAR 0 18
39603: PPUSH
39604: LD_INT 22
39606: PUSH
39607: LD_VAR 0 16
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 30
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 30
39631: PUSH
39632: LD_INT 3
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PPUSH
39648: CALL_OW 72
39652: ST_TO_ADDR
39653: GO 39737
39655: LD_INT 4
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39663
39661: GO 39736
39663: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39664: LD_ADDR_VAR 0 12
39668: PUSH
39669: LD_VAR 0 18
39673: PPUSH
39674: LD_INT 22
39676: PUSH
39677: LD_VAR 0 16
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: PUSH
39689: LD_INT 30
39691: PUSH
39692: LD_INT 6
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 30
39701: PUSH
39702: LD_INT 7
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 30
39711: PUSH
39712: LD_INT 8
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PPUSH
39729: CALL_OW 72
39733: ST_TO_ADDR
39734: GO 39737
39736: POP
// if i = 1 then
39737: LD_VAR 0 8
39741: PUSH
39742: LD_INT 1
39744: EQUAL
39745: IFFALSE 39856
// begin tmp := [ ] ;
39747: LD_ADDR_VAR 0 19
39751: PUSH
39752: EMPTY
39753: ST_TO_ADDR
// for j in f do
39754: LD_ADDR_VAR 0 9
39758: PUSH
39759: LD_VAR 0 12
39763: PUSH
39764: FOR_IN
39765: IFFALSE 39838
// if GetBType ( j ) = b_bunker then
39767: LD_VAR 0 9
39771: PPUSH
39772: CALL_OW 266
39776: PUSH
39777: LD_INT 32
39779: EQUAL
39780: IFFALSE 39807
// tmp := Insert ( tmp , 1 , j ) else
39782: LD_ADDR_VAR 0 19
39786: PUSH
39787: LD_VAR 0 19
39791: PPUSH
39792: LD_INT 1
39794: PPUSH
39795: LD_VAR 0 9
39799: PPUSH
39800: CALL_OW 2
39804: ST_TO_ADDR
39805: GO 39836
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39807: LD_ADDR_VAR 0 19
39811: PUSH
39812: LD_VAR 0 19
39816: PPUSH
39817: LD_VAR 0 19
39821: PUSH
39822: LD_INT 1
39824: PLUS
39825: PPUSH
39826: LD_VAR 0 9
39830: PPUSH
39831: CALL_OW 2
39835: ST_TO_ADDR
39836: GO 39764
39838: POP
39839: POP
// if tmp then
39840: LD_VAR 0 19
39844: IFFALSE 39856
// f := tmp ;
39846: LD_ADDR_VAR 0 12
39850: PUSH
39851: LD_VAR 0 19
39855: ST_TO_ADDR
// end ; x := personel [ i ] ;
39856: LD_ADDR_VAR 0 13
39860: PUSH
39861: LD_VAR 0 6
39865: PUSH
39866: LD_VAR 0 8
39870: ARRAY
39871: ST_TO_ADDR
// if x = - 1 then
39872: LD_VAR 0 13
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: EQUAL
39881: IFFALSE 40090
// begin for j in f do
39883: LD_ADDR_VAR 0 9
39887: PUSH
39888: LD_VAR 0 12
39892: PUSH
39893: FOR_IN
39894: IFFALSE 40086
// repeat InitHc ;
39896: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39900: LD_VAR 0 9
39904: PPUSH
39905: CALL_OW 266
39909: PUSH
39910: LD_INT 5
39912: EQUAL
39913: IFFALSE 39983
// begin if UnitsInside ( j ) < 3 then
39915: LD_VAR 0 9
39919: PPUSH
39920: CALL_OW 313
39924: PUSH
39925: LD_INT 3
39927: LESS
39928: IFFALSE 39964
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39930: LD_INT 0
39932: PPUSH
39933: LD_INT 5
39935: PUSH
39936: LD_INT 8
39938: PUSH
39939: LD_INT 9
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: LIST
39946: PUSH
39947: LD_VAR 0 17
39951: ARRAY
39952: PPUSH
39953: LD_VAR 0 4
39957: PPUSH
39958: CALL_OW 380
39962: GO 39981
// PrepareHuman ( false , i , skill ) ;
39964: LD_INT 0
39966: PPUSH
39967: LD_VAR 0 8
39971: PPUSH
39972: LD_VAR 0 4
39976: PPUSH
39977: CALL_OW 380
// end else
39981: GO 40000
// PrepareHuman ( false , i , skill ) ;
39983: LD_INT 0
39985: PPUSH
39986: LD_VAR 0 8
39990: PPUSH
39991: LD_VAR 0 4
39995: PPUSH
39996: CALL_OW 380
// un := CreateHuman ;
40000: LD_ADDR_VAR 0 14
40004: PUSH
40005: CALL_OW 44
40009: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40010: LD_ADDR_VAR 0 7
40014: PUSH
40015: LD_VAR 0 7
40019: PPUSH
40020: LD_INT 1
40022: PPUSH
40023: LD_VAR 0 14
40027: PPUSH
40028: CALL_OW 2
40032: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40033: LD_VAR 0 14
40037: PPUSH
40038: LD_VAR 0 9
40042: PPUSH
40043: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40047: LD_VAR 0 9
40051: PPUSH
40052: CALL_OW 313
40056: PUSH
40057: LD_INT 6
40059: EQUAL
40060: PUSH
40061: LD_VAR 0 9
40065: PPUSH
40066: CALL_OW 266
40070: PUSH
40071: LD_INT 32
40073: PUSH
40074: LD_INT 31
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: IN
40081: OR
40082: IFFALSE 39896
40084: GO 39893
40086: POP
40087: POP
// end else
40088: GO 40470
// for j = 1 to x do
40090: LD_ADDR_VAR 0 9
40094: PUSH
40095: DOUBLE
40096: LD_INT 1
40098: DEC
40099: ST_TO_ADDR
40100: LD_VAR 0 13
40104: PUSH
40105: FOR_TO
40106: IFFALSE 40468
// begin InitHc ;
40108: CALL_OW 19
// if not f then
40112: LD_VAR 0 12
40116: NOT
40117: IFFALSE 40206
// begin PrepareHuman ( false , i , skill ) ;
40119: LD_INT 0
40121: PPUSH
40122: LD_VAR 0 8
40126: PPUSH
40127: LD_VAR 0 4
40131: PPUSH
40132: CALL_OW 380
// un := CreateHuman ;
40136: LD_ADDR_VAR 0 14
40140: PUSH
40141: CALL_OW 44
40145: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40146: LD_ADDR_VAR 0 7
40150: PUSH
40151: LD_VAR 0 7
40155: PPUSH
40156: LD_INT 1
40158: PPUSH
40159: LD_VAR 0 14
40163: PPUSH
40164: CALL_OW 2
40168: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40169: LD_VAR 0 14
40173: PPUSH
40174: LD_VAR 0 1
40178: PPUSH
40179: CALL_OW 250
40183: PPUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 251
40193: PPUSH
40194: LD_INT 10
40196: PPUSH
40197: LD_INT 0
40199: PPUSH
40200: CALL_OW 50
// continue ;
40204: GO 40105
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40206: LD_VAR 0 12
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PPUSH
40215: CALL_OW 313
40219: PUSH
40220: LD_VAR 0 12
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: CALL_OW 266
40233: PUSH
40234: LD_INT 32
40236: PUSH
40237: LD_INT 31
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: IN
40244: AND
40245: PUSH
40246: LD_VAR 0 12
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PPUSH
40255: CALL_OW 313
40259: PUSH
40260: LD_INT 6
40262: EQUAL
40263: OR
40264: IFFALSE 40284
// f := Delete ( f , 1 ) ;
40266: LD_ADDR_VAR 0 12
40270: PUSH
40271: LD_VAR 0 12
40275: PPUSH
40276: LD_INT 1
40278: PPUSH
40279: CALL_OW 3
40283: ST_TO_ADDR
// if not f then
40284: LD_VAR 0 12
40288: NOT
40289: IFFALSE 40307
// begin x := x + 2 ;
40291: LD_ADDR_VAR 0 13
40295: PUSH
40296: LD_VAR 0 13
40300: PUSH
40301: LD_INT 2
40303: PLUS
40304: ST_TO_ADDR
// continue ;
40305: GO 40105
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40307: LD_VAR 0 12
40311: PUSH
40312: LD_INT 1
40314: ARRAY
40315: PPUSH
40316: CALL_OW 266
40320: PUSH
40321: LD_INT 5
40323: EQUAL
40324: IFFALSE 40398
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40326: LD_VAR 0 12
40330: PUSH
40331: LD_INT 1
40333: ARRAY
40334: PPUSH
40335: CALL_OW 313
40339: PUSH
40340: LD_INT 3
40342: LESS
40343: IFFALSE 40379
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40345: LD_INT 0
40347: PPUSH
40348: LD_INT 5
40350: PUSH
40351: LD_INT 8
40353: PUSH
40354: LD_INT 9
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: PUSH
40362: LD_VAR 0 17
40366: ARRAY
40367: PPUSH
40368: LD_VAR 0 4
40372: PPUSH
40373: CALL_OW 380
40377: GO 40396
// PrepareHuman ( false , i , skill ) ;
40379: LD_INT 0
40381: PPUSH
40382: LD_VAR 0 8
40386: PPUSH
40387: LD_VAR 0 4
40391: PPUSH
40392: CALL_OW 380
// end else
40396: GO 40415
// PrepareHuman ( false , i , skill ) ;
40398: LD_INT 0
40400: PPUSH
40401: LD_VAR 0 8
40405: PPUSH
40406: LD_VAR 0 4
40410: PPUSH
40411: CALL_OW 380
// un := CreateHuman ;
40415: LD_ADDR_VAR 0 14
40419: PUSH
40420: CALL_OW 44
40424: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40425: LD_ADDR_VAR 0 7
40429: PUSH
40430: LD_VAR 0 7
40434: PPUSH
40435: LD_INT 1
40437: PPUSH
40438: LD_VAR 0 14
40442: PPUSH
40443: CALL_OW 2
40447: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40448: LD_VAR 0 14
40452: PPUSH
40453: LD_VAR 0 12
40457: PUSH
40458: LD_INT 1
40460: ARRAY
40461: PPUSH
40462: CALL_OW 52
// end ;
40466: GO 40105
40468: POP
40469: POP
// end ;
40470: GO 39407
40472: POP
40473: POP
// result := result ^ buildings ;
40474: LD_ADDR_VAR 0 7
40478: PUSH
40479: LD_VAR 0 7
40483: PUSH
40484: LD_VAR 0 18
40488: ADD
40489: ST_TO_ADDR
// end else
40490: GO 40633
// begin for i = 1 to personel do
40492: LD_ADDR_VAR 0 8
40496: PUSH
40497: DOUBLE
40498: LD_INT 1
40500: DEC
40501: ST_TO_ADDR
40502: LD_VAR 0 6
40506: PUSH
40507: FOR_TO
40508: IFFALSE 40631
// begin if i > 4 then
40510: LD_VAR 0 8
40514: PUSH
40515: LD_INT 4
40517: GREATER
40518: IFFALSE 40522
// break ;
40520: GO 40631
// x := personel [ i ] ;
40522: LD_ADDR_VAR 0 13
40526: PUSH
40527: LD_VAR 0 6
40531: PUSH
40532: LD_VAR 0 8
40536: ARRAY
40537: ST_TO_ADDR
// if x = - 1 then
40538: LD_VAR 0 13
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: EQUAL
40547: IFFALSE 40551
// continue ;
40549: GO 40507
// PrepareHuman ( false , i , skill ) ;
40551: LD_INT 0
40553: PPUSH
40554: LD_VAR 0 8
40558: PPUSH
40559: LD_VAR 0 4
40563: PPUSH
40564: CALL_OW 380
// un := CreateHuman ;
40568: LD_ADDR_VAR 0 14
40572: PUSH
40573: CALL_OW 44
40577: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40578: LD_VAR 0 14
40582: PPUSH
40583: LD_VAR 0 1
40587: PPUSH
40588: CALL_OW 250
40592: PPUSH
40593: LD_VAR 0 1
40597: PPUSH
40598: CALL_OW 251
40602: PPUSH
40603: LD_INT 10
40605: PPUSH
40606: LD_INT 0
40608: PPUSH
40609: CALL_OW 50
// result := result ^ un ;
40613: LD_ADDR_VAR 0 7
40617: PUSH
40618: LD_VAR 0 7
40622: PUSH
40623: LD_VAR 0 14
40627: ADD
40628: ST_TO_ADDR
// end ;
40629: GO 40507
40631: POP
40632: POP
// end ; end ;
40633: LD_VAR 0 7
40637: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
40653: PPUSH
40654: PPUSH
40655: PPUSH
// result := false ;
40656: LD_ADDR_VAR 0 3
40660: PUSH
40661: LD_INT 0
40663: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40664: LD_VAR 0 1
40668: NOT
40669: PUSH
40670: LD_VAR 0 1
40674: PPUSH
40675: CALL_OW 266
40679: PUSH
40680: LD_INT 32
40682: PUSH
40683: LD_INT 33
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: IN
40690: NOT
40691: OR
40692: IFFALSE 40696
// exit ;
40694: GO 41832
// nat := GetNation ( tower ) ;
40696: LD_ADDR_VAR 0 12
40700: PUSH
40701: LD_VAR 0 1
40705: PPUSH
40706: CALL_OW 248
40710: ST_TO_ADDR
// side := GetSide ( tower ) ;
40711: LD_ADDR_VAR 0 16
40715: PUSH
40716: LD_VAR 0 1
40720: PPUSH
40721: CALL_OW 255
40725: ST_TO_ADDR
// x := GetX ( tower ) ;
40726: LD_ADDR_VAR 0 10
40730: PUSH
40731: LD_VAR 0 1
40735: PPUSH
40736: CALL_OW 250
40740: ST_TO_ADDR
// y := GetY ( tower ) ;
40741: LD_ADDR_VAR 0 11
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 251
40755: ST_TO_ADDR
// if not x or not y then
40756: LD_VAR 0 10
40760: NOT
40761: PUSH
40762: LD_VAR 0 11
40766: NOT
40767: OR
40768: IFFALSE 40772
// exit ;
40770: GO 41832
// weapon := 0 ;
40772: LD_ADDR_VAR 0 18
40776: PUSH
40777: LD_INT 0
40779: ST_TO_ADDR
// fac_list := [ ] ;
40780: LD_ADDR_VAR 0 17
40784: PUSH
40785: EMPTY
40786: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
40787: LD_ADDR_VAR 0 6
40791: PUSH
40792: LD_VAR 0 1
40796: PPUSH
40797: CALL_OW 274
40801: PPUSH
40802: LD_VAR 0 2
40806: PPUSH
40807: CALL 38410 0 2
40811: PPUSH
40812: LD_INT 30
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PPUSH
40822: CALL_OW 72
40826: ST_TO_ADDR
// if not factories then
40827: LD_VAR 0 6
40831: NOT
40832: IFFALSE 40836
// exit ;
40834: GO 41832
// for i in factories do
40836: LD_ADDR_VAR 0 8
40840: PUSH
40841: LD_VAR 0 6
40845: PUSH
40846: FOR_IN
40847: IFFALSE 40872
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40849: LD_ADDR_VAR 0 17
40853: PUSH
40854: LD_VAR 0 17
40858: PUSH
40859: LD_VAR 0 8
40863: PPUSH
40864: CALL_OW 478
40868: UNION
40869: ST_TO_ADDR
40870: GO 40846
40872: POP
40873: POP
// if not fac_list then
40874: LD_VAR 0 17
40878: NOT
40879: IFFALSE 40883
// exit ;
40881: GO 41832
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40883: LD_ADDR_VAR 0 5
40887: PUSH
40888: LD_INT 4
40890: PUSH
40891: LD_INT 5
40893: PUSH
40894: LD_INT 9
40896: PUSH
40897: LD_INT 10
40899: PUSH
40900: LD_INT 6
40902: PUSH
40903: LD_INT 7
40905: PUSH
40906: LD_INT 11
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 27
40920: PUSH
40921: LD_INT 28
40923: PUSH
40924: LD_INT 26
40926: PUSH
40927: LD_INT 30
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 43
40938: PUSH
40939: LD_INT 44
40941: PUSH
40942: LD_INT 46
40944: PUSH
40945: LD_INT 45
40947: PUSH
40948: LD_INT 47
40950: PUSH
40951: LD_INT 49
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: PUSH
40967: LD_VAR 0 12
40971: ARRAY
40972: ST_TO_ADDR
// for i in list do
40973: LD_ADDR_VAR 0 8
40977: PUSH
40978: LD_VAR 0 5
40982: PUSH
40983: FOR_IN
40984: IFFALSE 41017
// if not i in fac_list then
40986: LD_VAR 0 8
40990: PUSH
40991: LD_VAR 0 17
40995: IN
40996: NOT
40997: IFFALSE 41015
// list := list diff i ;
40999: LD_ADDR_VAR 0 5
41003: PUSH
41004: LD_VAR 0 5
41008: PUSH
41009: LD_VAR 0 8
41013: DIFF
41014: ST_TO_ADDR
41015: GO 40983
41017: POP
41018: POP
// if not list then
41019: LD_VAR 0 5
41023: NOT
41024: IFFALSE 41028
// exit ;
41026: GO 41832
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41028: LD_VAR 0 12
41032: PUSH
41033: LD_INT 3
41035: EQUAL
41036: PUSH
41037: LD_INT 49
41039: PUSH
41040: LD_VAR 0 5
41044: IN
41045: AND
41046: PUSH
41047: LD_INT 31
41049: PPUSH
41050: LD_VAR 0 16
41054: PPUSH
41055: CALL_OW 321
41059: PUSH
41060: LD_INT 2
41062: EQUAL
41063: AND
41064: IFFALSE 41124
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41066: LD_INT 22
41068: PUSH
41069: LD_VAR 0 16
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 35
41080: PUSH
41081: LD_INT 49
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 91
41090: PUSH
41091: LD_VAR 0 1
41095: PUSH
41096: LD_INT 10
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: PPUSH
41109: CALL_OW 69
41113: NOT
41114: IFFALSE 41124
// weapon := ru_time_lapser ;
41116: LD_ADDR_VAR 0 18
41120: PUSH
41121: LD_INT 49
41123: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41124: LD_VAR 0 12
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: IN
41139: PUSH
41140: LD_INT 11
41142: PUSH
41143: LD_VAR 0 5
41147: IN
41148: PUSH
41149: LD_INT 30
41151: PUSH
41152: LD_VAR 0 5
41156: IN
41157: OR
41158: AND
41159: PUSH
41160: LD_INT 6
41162: PPUSH
41163: LD_VAR 0 16
41167: PPUSH
41168: CALL_OW 321
41172: PUSH
41173: LD_INT 2
41175: EQUAL
41176: AND
41177: IFFALSE 41342
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41179: LD_INT 22
41181: PUSH
41182: LD_VAR 0 16
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 35
41196: PUSH
41197: LD_INT 11
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 35
41206: PUSH
41207: LD_INT 30
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 91
41221: PUSH
41222: LD_VAR 0 1
41226: PUSH
41227: LD_INT 18
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: PPUSH
41240: CALL_OW 69
41244: NOT
41245: PUSH
41246: LD_INT 22
41248: PUSH
41249: LD_VAR 0 16
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: LD_INT 30
41263: PUSH
41264: LD_INT 32
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 30
41273: PUSH
41274: LD_INT 33
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 91
41288: PUSH
41289: LD_VAR 0 1
41293: PUSH
41294: LD_INT 12
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: PPUSH
41310: CALL_OW 69
41314: PUSH
41315: LD_INT 2
41317: GREATER
41318: AND
41319: IFFALSE 41342
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41321: LD_ADDR_VAR 0 18
41325: PUSH
41326: LD_INT 11
41328: PUSH
41329: LD_INT 30
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_VAR 0 12
41340: ARRAY
41341: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41342: LD_VAR 0 18
41346: NOT
41347: PUSH
41348: LD_INT 40
41350: PPUSH
41351: LD_VAR 0 16
41355: PPUSH
41356: CALL_OW 321
41360: PUSH
41361: LD_INT 2
41363: EQUAL
41364: AND
41365: PUSH
41366: LD_INT 7
41368: PUSH
41369: LD_VAR 0 5
41373: IN
41374: PUSH
41375: LD_INT 28
41377: PUSH
41378: LD_VAR 0 5
41382: IN
41383: OR
41384: PUSH
41385: LD_INT 45
41387: PUSH
41388: LD_VAR 0 5
41392: IN
41393: OR
41394: AND
41395: IFFALSE 41649
// begin hex := GetHexInfo ( x , y ) ;
41397: LD_ADDR_VAR 0 4
41401: PUSH
41402: LD_VAR 0 10
41406: PPUSH
41407: LD_VAR 0 11
41411: PPUSH
41412: CALL_OW 546
41416: ST_TO_ADDR
// if hex [ 1 ] then
41417: LD_VAR 0 4
41421: PUSH
41422: LD_INT 1
41424: ARRAY
41425: IFFALSE 41429
// exit ;
41427: GO 41832
// height := hex [ 2 ] ;
41429: LD_ADDR_VAR 0 15
41433: PUSH
41434: LD_VAR 0 4
41438: PUSH
41439: LD_INT 2
41441: ARRAY
41442: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41443: LD_ADDR_VAR 0 14
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 2
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: LD_INT 5
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: ST_TO_ADDR
// for i in tmp do
41466: LD_ADDR_VAR 0 8
41470: PUSH
41471: LD_VAR 0 14
41475: PUSH
41476: FOR_IN
41477: IFFALSE 41647
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41479: LD_ADDR_VAR 0 9
41483: PUSH
41484: LD_VAR 0 10
41488: PPUSH
41489: LD_VAR 0 8
41493: PPUSH
41494: LD_INT 5
41496: PPUSH
41497: CALL_OW 272
41501: PUSH
41502: LD_VAR 0 11
41506: PPUSH
41507: LD_VAR 0 8
41511: PPUSH
41512: LD_INT 5
41514: PPUSH
41515: CALL_OW 273
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41524: LD_VAR 0 9
41528: PUSH
41529: LD_INT 1
41531: ARRAY
41532: PPUSH
41533: LD_VAR 0 9
41537: PUSH
41538: LD_INT 2
41540: ARRAY
41541: PPUSH
41542: CALL_OW 488
41546: IFFALSE 41645
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41548: LD_ADDR_VAR 0 4
41552: PUSH
41553: LD_VAR 0 9
41557: PUSH
41558: LD_INT 1
41560: ARRAY
41561: PPUSH
41562: LD_VAR 0 9
41566: PUSH
41567: LD_INT 2
41569: ARRAY
41570: PPUSH
41571: CALL_OW 546
41575: ST_TO_ADDR
// if hex [ 1 ] then
41576: LD_VAR 0 4
41580: PUSH
41581: LD_INT 1
41583: ARRAY
41584: IFFALSE 41588
// continue ;
41586: GO 41476
// h := hex [ 2 ] ;
41588: LD_ADDR_VAR 0 13
41592: PUSH
41593: LD_VAR 0 4
41597: PUSH
41598: LD_INT 2
41600: ARRAY
41601: ST_TO_ADDR
// if h + 7 < height then
41602: LD_VAR 0 13
41606: PUSH
41607: LD_INT 7
41609: PLUS
41610: PUSH
41611: LD_VAR 0 15
41615: LESS
41616: IFFALSE 41645
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41618: LD_ADDR_VAR 0 18
41622: PUSH
41623: LD_INT 7
41625: PUSH
41626: LD_INT 28
41628: PUSH
41629: LD_INT 45
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: LIST
41636: PUSH
41637: LD_VAR 0 12
41641: ARRAY
41642: ST_TO_ADDR
// break ;
41643: GO 41647
// end ; end ; end ;
41645: GO 41476
41647: POP
41648: POP
// end ; if not weapon then
41649: LD_VAR 0 18
41653: NOT
41654: IFFALSE 41714
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41656: LD_ADDR_VAR 0 5
41660: PUSH
41661: LD_VAR 0 5
41665: PUSH
41666: LD_INT 11
41668: PUSH
41669: LD_INT 30
41671: PUSH
41672: LD_INT 49
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: DIFF
41680: ST_TO_ADDR
// if not list then
41681: LD_VAR 0 5
41685: NOT
41686: IFFALSE 41690
// exit ;
41688: GO 41832
// weapon := list [ rand ( 1 , list ) ] ;
41690: LD_ADDR_VAR 0 18
41694: PUSH
41695: LD_VAR 0 5
41699: PUSH
41700: LD_INT 1
41702: PPUSH
41703: LD_VAR 0 5
41707: PPUSH
41708: CALL_OW 12
41712: ARRAY
41713: ST_TO_ADDR
// end ; if weapon then
41714: LD_VAR 0 18
41718: IFFALSE 41832
// begin tmp := CostOfWeapon ( weapon ) ;
41720: LD_ADDR_VAR 0 14
41724: PUSH
41725: LD_VAR 0 18
41729: PPUSH
41730: CALL_OW 451
41734: ST_TO_ADDR
// j := GetBase ( tower ) ;
41735: LD_ADDR_VAR 0 9
41739: PUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 274
41749: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41750: LD_VAR 0 9
41754: PPUSH
41755: LD_INT 1
41757: PPUSH
41758: CALL_OW 275
41762: PUSH
41763: LD_VAR 0 14
41767: PUSH
41768: LD_INT 1
41770: ARRAY
41771: GREATEREQUAL
41772: PUSH
41773: LD_VAR 0 9
41777: PPUSH
41778: LD_INT 2
41780: PPUSH
41781: CALL_OW 275
41785: PUSH
41786: LD_VAR 0 14
41790: PUSH
41791: LD_INT 2
41793: ARRAY
41794: GREATEREQUAL
41795: AND
41796: PUSH
41797: LD_VAR 0 9
41801: PPUSH
41802: LD_INT 3
41804: PPUSH
41805: CALL_OW 275
41809: PUSH
41810: LD_VAR 0 14
41814: PUSH
41815: LD_INT 3
41817: ARRAY
41818: GREATEREQUAL
41819: AND
41820: IFFALSE 41832
// result := weapon ;
41822: LD_ADDR_VAR 0 3
41826: PUSH
41827: LD_VAR 0 18
41831: ST_TO_ADDR
// end ; end ;
41832: LD_VAR 0 3
41836: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41837: LD_INT 0
41839: PPUSH
41840: PPUSH
// result := true ;
41841: LD_ADDR_VAR 0 3
41845: PUSH
41846: LD_INT 1
41848: ST_TO_ADDR
// if array1 = array2 then
41849: LD_VAR 0 1
41853: PUSH
41854: LD_VAR 0 2
41858: EQUAL
41859: IFFALSE 41919
// begin for i = 1 to array1 do
41861: LD_ADDR_VAR 0 4
41865: PUSH
41866: DOUBLE
41867: LD_INT 1
41869: DEC
41870: ST_TO_ADDR
41871: LD_VAR 0 1
41875: PUSH
41876: FOR_TO
41877: IFFALSE 41915
// if array1 [ i ] <> array2 [ i ] then
41879: LD_VAR 0 1
41883: PUSH
41884: LD_VAR 0 4
41888: ARRAY
41889: PUSH
41890: LD_VAR 0 2
41894: PUSH
41895: LD_VAR 0 4
41899: ARRAY
41900: NONEQUAL
41901: IFFALSE 41913
// begin result := false ;
41903: LD_ADDR_VAR 0 3
41907: PUSH
41908: LD_INT 0
41910: ST_TO_ADDR
// break ;
41911: GO 41915
// end ;
41913: GO 41876
41915: POP
41916: POP
// end else
41917: GO 41927
// result := false ;
41919: LD_ADDR_VAR 0 3
41923: PUSH
41924: LD_INT 0
41926: ST_TO_ADDR
// end ;
41927: LD_VAR 0 3
41931: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41932: LD_INT 0
41934: PPUSH
41935: PPUSH
41936: PPUSH
// pom := GetBase ( fac ) ;
41937: LD_ADDR_VAR 0 5
41941: PUSH
41942: LD_VAR 0 1
41946: PPUSH
41947: CALL_OW 274
41951: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41952: LD_ADDR_VAR 0 4
41956: PUSH
41957: LD_VAR 0 2
41961: PUSH
41962: LD_INT 1
41964: ARRAY
41965: PPUSH
41966: LD_VAR 0 2
41970: PUSH
41971: LD_INT 2
41973: ARRAY
41974: PPUSH
41975: LD_VAR 0 2
41979: PUSH
41980: LD_INT 3
41982: ARRAY
41983: PPUSH
41984: LD_VAR 0 2
41988: PUSH
41989: LD_INT 4
41991: ARRAY
41992: PPUSH
41993: CALL_OW 449
41997: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: LD_VAR 0 5
42007: PPUSH
42008: LD_INT 1
42010: PPUSH
42011: CALL_OW 275
42015: PUSH
42016: LD_VAR 0 4
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: GREATEREQUAL
42025: PUSH
42026: LD_VAR 0 5
42030: PPUSH
42031: LD_INT 2
42033: PPUSH
42034: CALL_OW 275
42038: PUSH
42039: LD_VAR 0 4
42043: PUSH
42044: LD_INT 2
42046: ARRAY
42047: GREATEREQUAL
42048: AND
42049: PUSH
42050: LD_VAR 0 5
42054: PPUSH
42055: LD_INT 3
42057: PPUSH
42058: CALL_OW 275
42062: PUSH
42063: LD_VAR 0 4
42067: PUSH
42068: LD_INT 3
42070: ARRAY
42071: GREATEREQUAL
42072: AND
42073: ST_TO_ADDR
// end ;
42074: LD_VAR 0 3
42078: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42079: LD_INT 0
42081: PPUSH
42082: PPUSH
42083: PPUSH
42084: PPUSH
// pom := GetBase ( building ) ;
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_VAR 0 1
42094: PPUSH
42095: CALL_OW 274
42099: ST_TO_ADDR
// if not pom then
42100: LD_VAR 0 3
42104: NOT
42105: IFFALSE 42109
// exit ;
42107: GO 42279
// btype := GetBType ( building ) ;
42109: LD_ADDR_VAR 0 5
42113: PUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: CALL_OW 266
42123: ST_TO_ADDR
// if btype = b_armoury then
42124: LD_VAR 0 5
42128: PUSH
42129: LD_INT 4
42131: EQUAL
42132: IFFALSE 42142
// btype := b_barracks ;
42134: LD_ADDR_VAR 0 5
42138: PUSH
42139: LD_INT 5
42141: ST_TO_ADDR
// if btype = b_depot then
42142: LD_VAR 0 5
42146: PUSH
42147: LD_INT 0
42149: EQUAL
42150: IFFALSE 42160
// btype := b_warehouse ;
42152: LD_ADDR_VAR 0 5
42156: PUSH
42157: LD_INT 1
42159: ST_TO_ADDR
// if btype = b_workshop then
42160: LD_VAR 0 5
42164: PUSH
42165: LD_INT 2
42167: EQUAL
42168: IFFALSE 42178
// btype := b_factory ;
42170: LD_ADDR_VAR 0 5
42174: PUSH
42175: LD_INT 3
42177: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42178: LD_ADDR_VAR 0 4
42182: PUSH
42183: LD_VAR 0 5
42187: PPUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: CALL_OW 248
42197: PPUSH
42198: CALL_OW 450
42202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42203: LD_ADDR_VAR 0 2
42207: PUSH
42208: LD_VAR 0 3
42212: PPUSH
42213: LD_INT 1
42215: PPUSH
42216: CALL_OW 275
42220: PUSH
42221: LD_VAR 0 4
42225: PUSH
42226: LD_INT 1
42228: ARRAY
42229: GREATEREQUAL
42230: PUSH
42231: LD_VAR 0 3
42235: PPUSH
42236: LD_INT 2
42238: PPUSH
42239: CALL_OW 275
42243: PUSH
42244: LD_VAR 0 4
42248: PUSH
42249: LD_INT 2
42251: ARRAY
42252: GREATEREQUAL
42253: AND
42254: PUSH
42255: LD_VAR 0 3
42259: PPUSH
42260: LD_INT 3
42262: PPUSH
42263: CALL_OW 275
42267: PUSH
42268: LD_VAR 0 4
42272: PUSH
42273: LD_INT 3
42275: ARRAY
42276: GREATEREQUAL
42277: AND
42278: ST_TO_ADDR
// end ;
42279: LD_VAR 0 2
42283: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42284: LD_INT 0
42286: PPUSH
42287: PPUSH
42288: PPUSH
// pom := GetBase ( building ) ;
42289: LD_ADDR_VAR 0 4
42293: PUSH
42294: LD_VAR 0 1
42298: PPUSH
42299: CALL_OW 274
42303: ST_TO_ADDR
// if not pom then
42304: LD_VAR 0 4
42308: NOT
42309: IFFALSE 42313
// exit ;
42311: GO 42414
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42313: LD_ADDR_VAR 0 5
42317: PUSH
42318: LD_VAR 0 2
42322: PPUSH
42323: LD_VAR 0 1
42327: PPUSH
42328: CALL_OW 248
42332: PPUSH
42333: CALL_OW 450
42337: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42338: LD_ADDR_VAR 0 3
42342: PUSH
42343: LD_VAR 0 4
42347: PPUSH
42348: LD_INT 1
42350: PPUSH
42351: CALL_OW 275
42355: PUSH
42356: LD_VAR 0 5
42360: PUSH
42361: LD_INT 1
42363: ARRAY
42364: GREATEREQUAL
42365: PUSH
42366: LD_VAR 0 4
42370: PPUSH
42371: LD_INT 2
42373: PPUSH
42374: CALL_OW 275
42378: PUSH
42379: LD_VAR 0 5
42383: PUSH
42384: LD_INT 2
42386: ARRAY
42387: GREATEREQUAL
42388: AND
42389: PUSH
42390: LD_VAR 0 4
42394: PPUSH
42395: LD_INT 3
42397: PPUSH
42398: CALL_OW 275
42402: PUSH
42403: LD_VAR 0 5
42407: PUSH
42408: LD_INT 3
42410: ARRAY
42411: GREATEREQUAL
42412: AND
42413: ST_TO_ADDR
// end ;
42414: LD_VAR 0 3
42418: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
42419: LD_INT 0
42421: PPUSH
42422: PPUSH
42423: PPUSH
42424: PPUSH
42425: PPUSH
42426: PPUSH
42427: PPUSH
42428: PPUSH
42429: PPUSH
42430: PPUSH
// result := false ;
42431: LD_ADDR_VAR 0 6
42435: PUSH
42436: LD_INT 0
42438: ST_TO_ADDR
// if not base or not btype or not x or not y then
42439: LD_VAR 0 1
42443: NOT
42444: PUSH
42445: LD_VAR 0 2
42449: NOT
42450: OR
42451: PUSH
42452: LD_VAR 0 3
42456: NOT
42457: OR
42458: PUSH
42459: LD_VAR 0 4
42463: NOT
42464: OR
42465: IFFALSE 42469
// exit ;
42467: GO 43078
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
42469: LD_ADDR_VAR 0 12
42473: PUSH
42474: LD_VAR 0 2
42478: PPUSH
42479: LD_VAR 0 3
42483: PPUSH
42484: LD_VAR 0 4
42488: PPUSH
42489: LD_VAR 0 5
42493: PPUSH
42494: LD_VAR 0 1
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: PPUSH
42503: CALL_OW 248
42507: PPUSH
42508: LD_INT 0
42510: PPUSH
42511: CALL 43915 0 6
42515: ST_TO_ADDR
// if not hexes then
42516: LD_VAR 0 12
42520: NOT
42521: IFFALSE 42525
// exit ;
42523: GO 43078
// for i = 1 to hexes do
42525: LD_ADDR_VAR 0 7
42529: PUSH
42530: DOUBLE
42531: LD_INT 1
42533: DEC
42534: ST_TO_ADDR
42535: LD_VAR 0 12
42539: PUSH
42540: FOR_TO
42541: IFFALSE 43076
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42543: LD_ADDR_VAR 0 11
42547: PUSH
42548: LD_VAR 0 12
42552: PUSH
42553: LD_VAR 0 7
42557: ARRAY
42558: PUSH
42559: LD_INT 1
42561: ARRAY
42562: PPUSH
42563: LD_VAR 0 12
42567: PUSH
42568: LD_VAR 0 7
42572: ARRAY
42573: PUSH
42574: LD_INT 2
42576: ARRAY
42577: PPUSH
42578: CALL_OW 428
42582: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42583: LD_VAR 0 12
42587: PUSH
42588: LD_VAR 0 7
42592: ARRAY
42593: PUSH
42594: LD_INT 1
42596: ARRAY
42597: PPUSH
42598: LD_VAR 0 12
42602: PUSH
42603: LD_VAR 0 7
42607: ARRAY
42608: PUSH
42609: LD_INT 2
42611: ARRAY
42612: PPUSH
42613: CALL_OW 351
42617: PUSH
42618: LD_VAR 0 12
42622: PUSH
42623: LD_VAR 0 7
42627: ARRAY
42628: PUSH
42629: LD_INT 1
42631: ARRAY
42632: PPUSH
42633: LD_VAR 0 12
42637: PUSH
42638: LD_VAR 0 7
42642: ARRAY
42643: PUSH
42644: LD_INT 2
42646: ARRAY
42647: PPUSH
42648: CALL_OW 488
42652: NOT
42653: OR
42654: PUSH
42655: LD_VAR 0 11
42659: PPUSH
42660: CALL_OW 247
42664: PUSH
42665: LD_INT 3
42667: EQUAL
42668: OR
42669: IFFALSE 42675
// exit ;
42671: POP
42672: POP
42673: GO 43078
// if not tmp or not tmp in base then
42675: LD_VAR 0 11
42679: NOT
42680: PUSH
42681: LD_VAR 0 11
42685: PUSH
42686: LD_VAR 0 1
42690: IN
42691: NOT
42692: OR
42693: IFFALSE 42697
// continue ;
42695: GO 42540
// result := true ;
42697: LD_ADDR_VAR 0 6
42701: PUSH
42702: LD_INT 1
42704: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42705: LD_ADDR_VAR 0 15
42709: PUSH
42710: LD_VAR 0 1
42714: PPUSH
42715: LD_INT 22
42717: PUSH
42718: LD_VAR 0 11
42722: PPUSH
42723: CALL_OW 255
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 30
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 30
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PPUSH
42764: CALL_OW 72
42768: ST_TO_ADDR
// if dep then
42769: LD_VAR 0 15
42773: IFFALSE 42909
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42775: LD_ADDR_VAR 0 14
42779: PUSH
42780: LD_VAR 0 15
42784: PUSH
42785: LD_INT 1
42787: ARRAY
42788: PPUSH
42789: CALL_OW 250
42793: PPUSH
42794: LD_VAR 0 15
42798: PUSH
42799: LD_INT 1
42801: ARRAY
42802: PPUSH
42803: CALL_OW 254
42807: PPUSH
42808: LD_INT 5
42810: PPUSH
42811: CALL_OW 272
42815: PUSH
42816: LD_VAR 0 15
42820: PUSH
42821: LD_INT 1
42823: ARRAY
42824: PPUSH
42825: CALL_OW 251
42829: PPUSH
42830: LD_VAR 0 15
42834: PUSH
42835: LD_INT 1
42837: ARRAY
42838: PPUSH
42839: CALL_OW 254
42843: PPUSH
42844: LD_INT 5
42846: PPUSH
42847: CALL_OW 273
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42856: LD_VAR 0 14
42860: PUSH
42861: LD_INT 1
42863: ARRAY
42864: PPUSH
42865: LD_VAR 0 14
42869: PUSH
42870: LD_INT 2
42872: ARRAY
42873: PPUSH
42874: CALL_OW 488
42878: IFFALSE 42909
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42880: LD_VAR 0 11
42884: PPUSH
42885: LD_VAR 0 14
42889: PUSH
42890: LD_INT 1
42892: ARRAY
42893: PPUSH
42894: LD_VAR 0 14
42898: PUSH
42899: LD_INT 2
42901: ARRAY
42902: PPUSH
42903: CALL_OW 111
// continue ;
42907: GO 42540
// end ; end ; r := GetDir ( tmp ) ;
42909: LD_ADDR_VAR 0 13
42913: PUSH
42914: LD_VAR 0 11
42918: PPUSH
42919: CALL_OW 254
42923: ST_TO_ADDR
// if r = 5 then
42924: LD_VAR 0 13
42928: PUSH
42929: LD_INT 5
42931: EQUAL
42932: IFFALSE 42942
// r := 0 ;
42934: LD_ADDR_VAR 0 13
42938: PUSH
42939: LD_INT 0
42941: ST_TO_ADDR
// for j = r to 5 do
42942: LD_ADDR_VAR 0 8
42946: PUSH
42947: DOUBLE
42948: LD_VAR 0 13
42952: DEC
42953: ST_TO_ADDR
42954: LD_INT 5
42956: PUSH
42957: FOR_TO
42958: IFFALSE 43072
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42960: LD_ADDR_VAR 0 9
42964: PUSH
42965: LD_VAR 0 11
42969: PPUSH
42970: CALL_OW 250
42974: PPUSH
42975: LD_VAR 0 8
42979: PPUSH
42980: LD_INT 2
42982: PPUSH
42983: CALL_OW 272
42987: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42988: LD_ADDR_VAR 0 10
42992: PUSH
42993: LD_VAR 0 11
42997: PPUSH
42998: CALL_OW 251
43002: PPUSH
43003: LD_VAR 0 8
43007: PPUSH
43008: LD_INT 2
43010: PPUSH
43011: CALL_OW 273
43015: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43016: LD_VAR 0 9
43020: PPUSH
43021: LD_VAR 0 10
43025: PPUSH
43026: CALL_OW 488
43030: PUSH
43031: LD_VAR 0 9
43035: PPUSH
43036: LD_VAR 0 10
43040: PPUSH
43041: CALL_OW 428
43045: NOT
43046: AND
43047: IFFALSE 43070
// begin ComMoveXY ( tmp , _x , _y ) ;
43049: LD_VAR 0 11
43053: PPUSH
43054: LD_VAR 0 9
43058: PPUSH
43059: LD_VAR 0 10
43063: PPUSH
43064: CALL_OW 111
// break ;
43068: GO 43072
// end ; end ;
43070: GO 42957
43072: POP
43073: POP
// end ;
43074: GO 42540
43076: POP
43077: POP
// end ;
43078: LD_VAR 0 6
43082: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
43083: LD_INT 0
43085: PPUSH
43086: PPUSH
43087: PPUSH
43088: PPUSH
43089: PPUSH
43090: PPUSH
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
// result := false ;
43095: LD_ADDR_VAR 0 6
43099: PUSH
43100: LD_INT 0
43102: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43103: LD_VAR 0 1
43107: NOT
43108: PUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 266
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: IN
43129: NOT
43130: OR
43131: PUSH
43132: LD_VAR 0 2
43136: NOT
43137: OR
43138: PUSH
43139: LD_VAR 0 5
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: LD_INT 5
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: IN
43170: NOT
43171: OR
43172: PUSH
43173: LD_VAR 0 3
43177: PPUSH
43178: LD_VAR 0 4
43182: PPUSH
43183: CALL_OW 488
43187: NOT
43188: OR
43189: IFFALSE 43193
// exit ;
43191: GO 43910
// pom := GetBase ( depot ) ;
43193: LD_ADDR_VAR 0 10
43197: PUSH
43198: LD_VAR 0 1
43202: PPUSH
43203: CALL_OW 274
43207: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43208: LD_ADDR_VAR 0 11
43212: PUSH
43213: LD_VAR 0 2
43217: PPUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: CALL_OW 248
43227: PPUSH
43228: CALL_OW 450
43232: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43233: LD_VAR 0 10
43237: PPUSH
43238: LD_INT 1
43240: PPUSH
43241: CALL_OW 275
43245: PUSH
43246: LD_VAR 0 11
43250: PUSH
43251: LD_INT 1
43253: ARRAY
43254: GREATEREQUAL
43255: PUSH
43256: LD_VAR 0 10
43260: PPUSH
43261: LD_INT 2
43263: PPUSH
43264: CALL_OW 275
43268: PUSH
43269: LD_VAR 0 11
43273: PUSH
43274: LD_INT 2
43276: ARRAY
43277: GREATEREQUAL
43278: AND
43279: PUSH
43280: LD_VAR 0 10
43284: PPUSH
43285: LD_INT 3
43287: PPUSH
43288: CALL_OW 275
43292: PUSH
43293: LD_VAR 0 11
43297: PUSH
43298: LD_INT 3
43300: ARRAY
43301: GREATEREQUAL
43302: AND
43303: NOT
43304: IFFALSE 43308
// exit ;
43306: GO 43910
// if GetBType ( depot ) = b_depot then
43308: LD_VAR 0 1
43312: PPUSH
43313: CALL_OW 266
43317: PUSH
43318: LD_INT 0
43320: EQUAL
43321: IFFALSE 43333
// dist := 28 else
43323: LD_ADDR_VAR 0 14
43327: PUSH
43328: LD_INT 28
43330: ST_TO_ADDR
43331: GO 43341
// dist := 36 ;
43333: LD_ADDR_VAR 0 14
43337: PUSH
43338: LD_INT 36
43340: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43341: LD_VAR 0 1
43345: PPUSH
43346: LD_VAR 0 3
43350: PPUSH
43351: LD_VAR 0 4
43355: PPUSH
43356: CALL_OW 297
43360: PUSH
43361: LD_VAR 0 14
43365: GREATER
43366: IFFALSE 43370
// exit ;
43368: GO 43910
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43370: LD_ADDR_VAR 0 12
43374: PUSH
43375: LD_VAR 0 2
43379: PPUSH
43380: LD_VAR 0 3
43384: PPUSH
43385: LD_VAR 0 4
43389: PPUSH
43390: LD_VAR 0 5
43394: PPUSH
43395: LD_VAR 0 1
43399: PPUSH
43400: CALL_OW 248
43404: PPUSH
43405: LD_INT 0
43407: PPUSH
43408: CALL 43915 0 6
43412: ST_TO_ADDR
// if not hexes then
43413: LD_VAR 0 12
43417: NOT
43418: IFFALSE 43422
// exit ;
43420: GO 43910
// hex := GetHexInfo ( x , y ) ;
43422: LD_ADDR_VAR 0 15
43426: PUSH
43427: LD_VAR 0 3
43431: PPUSH
43432: LD_VAR 0 4
43436: PPUSH
43437: CALL_OW 546
43441: ST_TO_ADDR
// if hex [ 1 ] then
43442: LD_VAR 0 15
43446: PUSH
43447: LD_INT 1
43449: ARRAY
43450: IFFALSE 43454
// exit ;
43452: GO 43910
// height := hex [ 2 ] ;
43454: LD_ADDR_VAR 0 13
43458: PUSH
43459: LD_VAR 0 15
43463: PUSH
43464: LD_INT 2
43466: ARRAY
43467: ST_TO_ADDR
// for i = 1 to hexes do
43468: LD_ADDR_VAR 0 7
43472: PUSH
43473: DOUBLE
43474: LD_INT 1
43476: DEC
43477: ST_TO_ADDR
43478: LD_VAR 0 12
43482: PUSH
43483: FOR_TO
43484: IFFALSE 43814
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43486: LD_VAR 0 12
43490: PUSH
43491: LD_VAR 0 7
43495: ARRAY
43496: PUSH
43497: LD_INT 1
43499: ARRAY
43500: PPUSH
43501: LD_VAR 0 12
43505: PUSH
43506: LD_VAR 0 7
43510: ARRAY
43511: PUSH
43512: LD_INT 2
43514: ARRAY
43515: PPUSH
43516: CALL_OW 488
43520: NOT
43521: PUSH
43522: LD_VAR 0 12
43526: PUSH
43527: LD_VAR 0 7
43531: ARRAY
43532: PUSH
43533: LD_INT 1
43535: ARRAY
43536: PPUSH
43537: LD_VAR 0 12
43541: PUSH
43542: LD_VAR 0 7
43546: ARRAY
43547: PUSH
43548: LD_INT 2
43550: ARRAY
43551: PPUSH
43552: CALL_OW 428
43556: PUSH
43557: LD_INT 0
43559: GREATER
43560: OR
43561: PUSH
43562: LD_VAR 0 12
43566: PUSH
43567: LD_VAR 0 7
43571: ARRAY
43572: PUSH
43573: LD_INT 1
43575: ARRAY
43576: PPUSH
43577: LD_VAR 0 12
43581: PUSH
43582: LD_VAR 0 7
43586: ARRAY
43587: PUSH
43588: LD_INT 2
43590: ARRAY
43591: PPUSH
43592: CALL_OW 351
43596: OR
43597: IFFALSE 43603
// exit ;
43599: POP
43600: POP
43601: GO 43910
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43603: LD_ADDR_VAR 0 8
43607: PUSH
43608: LD_VAR 0 12
43612: PUSH
43613: LD_VAR 0 7
43617: ARRAY
43618: PUSH
43619: LD_INT 1
43621: ARRAY
43622: PPUSH
43623: LD_VAR 0 12
43627: PUSH
43628: LD_VAR 0 7
43632: ARRAY
43633: PUSH
43634: LD_INT 2
43636: ARRAY
43637: PPUSH
43638: CALL_OW 546
43642: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43643: LD_VAR 0 8
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PUSH
43652: LD_VAR 0 8
43656: PUSH
43657: LD_INT 2
43659: ARRAY
43660: PUSH
43661: LD_VAR 0 13
43665: PUSH
43666: LD_INT 2
43668: PLUS
43669: GREATER
43670: OR
43671: PUSH
43672: LD_VAR 0 8
43676: PUSH
43677: LD_INT 2
43679: ARRAY
43680: PUSH
43681: LD_VAR 0 13
43685: PUSH
43686: LD_INT 2
43688: MINUS
43689: LESS
43690: OR
43691: PUSH
43692: LD_VAR 0 8
43696: PUSH
43697: LD_INT 3
43699: ARRAY
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 8
43706: PUSH
43707: LD_INT 9
43709: PUSH
43710: LD_INT 10
43712: PUSH
43713: LD_INT 11
43715: PUSH
43716: LD_INT 12
43718: PUSH
43719: LD_INT 13
43721: PUSH
43722: LD_INT 16
43724: PUSH
43725: LD_INT 17
43727: PUSH
43728: LD_INT 18
43730: PUSH
43731: LD_INT 19
43733: PUSH
43734: LD_INT 20
43736: PUSH
43737: LD_INT 21
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: IN
43755: NOT
43756: OR
43757: PUSH
43758: LD_VAR 0 8
43762: PUSH
43763: LD_INT 5
43765: ARRAY
43766: NOT
43767: OR
43768: PUSH
43769: LD_VAR 0 8
43773: PUSH
43774: LD_INT 6
43776: ARRAY
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: LD_INT 7
43786: PUSH
43787: LD_INT 9
43789: PUSH
43790: LD_INT 10
43792: PUSH
43793: LD_INT 11
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: IN
43804: NOT
43805: OR
43806: IFFALSE 43812
// exit ;
43808: POP
43809: POP
43810: GO 43910
// end ;
43812: GO 43483
43814: POP
43815: POP
// side := GetSide ( depot ) ;
43816: LD_ADDR_VAR 0 9
43820: PUSH
43821: LD_VAR 0 1
43825: PPUSH
43826: CALL_OW 255
43830: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43831: LD_VAR 0 9
43835: PPUSH
43836: LD_VAR 0 3
43840: PPUSH
43841: LD_VAR 0 4
43845: PPUSH
43846: LD_INT 20
43848: PPUSH
43849: CALL 36564 0 4
43853: PUSH
43854: LD_INT 4
43856: ARRAY
43857: IFFALSE 43861
// exit ;
43859: GO 43910
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43861: LD_VAR 0 2
43865: PUSH
43866: LD_INT 29
43868: PUSH
43869: LD_INT 30
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: IN
43876: PUSH
43877: LD_VAR 0 3
43881: PPUSH
43882: LD_VAR 0 4
43886: PPUSH
43887: LD_VAR 0 9
43891: PPUSH
43892: CALL_OW 440
43896: NOT
43897: AND
43898: IFFALSE 43902
// exit ;
43900: GO 43910
// result := true ;
43902: LD_ADDR_VAR 0 6
43906: PUSH
43907: LD_INT 1
43909: ST_TO_ADDR
// end ;
43910: LD_VAR 0 6
43914: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
43915: LD_INT 0
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
43936: PPUSH
43937: PPUSH
43938: PPUSH
43939: PPUSH
43940: PPUSH
43941: PPUSH
43942: PPUSH
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
// result = [ ] ;
43975: LD_ADDR_VAR 0 7
43979: PUSH
43980: EMPTY
43981: ST_TO_ADDR
// temp_list = [ ] ;
43982: LD_ADDR_VAR 0 9
43986: PUSH
43987: EMPTY
43988: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43989: LD_VAR 0 4
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 3
44005: PUSH
44006: LD_INT 4
44008: PUSH
44009: LD_INT 5
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: IN
44020: NOT
44021: PUSH
44022: LD_VAR 0 1
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: IN
44037: PUSH
44038: LD_VAR 0 5
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: IN
44057: NOT
44058: AND
44059: OR
44060: IFFALSE 44064
// exit ;
44062: GO 62455
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44064: LD_VAR 0 1
44068: PUSH
44069: LD_INT 6
44071: PUSH
44072: LD_INT 7
44074: PUSH
44075: LD_INT 8
44077: PUSH
44078: LD_INT 13
44080: PUSH
44081: LD_INT 12
44083: PUSH
44084: LD_INT 15
44086: PUSH
44087: LD_INT 11
44089: PUSH
44090: LD_INT 14
44092: PUSH
44093: LD_INT 10
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: IN
44107: IFFALSE 44117
// btype = b_lab ;
44109: LD_ADDR_VAR 0 1
44113: PUSH
44114: LD_INT 6
44116: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44117: LD_VAR 0 6
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: IN
44136: NOT
44137: PUSH
44138: LD_VAR 0 1
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: LD_INT 6
44157: PUSH
44158: LD_INT 36
44160: PUSH
44161: LD_INT 4
44163: PUSH
44164: LD_INT 5
44166: PUSH
44167: LD_INT 31
44169: PUSH
44170: LD_INT 32
44172: PUSH
44173: LD_INT 33
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: IN
44189: NOT
44190: PUSH
44191: LD_VAR 0 6
44195: PUSH
44196: LD_INT 1
44198: EQUAL
44199: AND
44200: OR
44201: PUSH
44202: LD_VAR 0 1
44206: PUSH
44207: LD_INT 2
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: IN
44217: NOT
44218: PUSH
44219: LD_VAR 0 6
44223: PUSH
44224: LD_INT 2
44226: EQUAL
44227: AND
44228: OR
44229: IFFALSE 44239
// mode = 0 ;
44231: LD_ADDR_VAR 0 6
44235: PUSH
44236: LD_INT 0
44238: ST_TO_ADDR
// case mode of 0 :
44239: LD_VAR 0 6
44243: PUSH
44244: LD_INT 0
44246: DOUBLE
44247: EQUAL
44248: IFTRUE 44252
44250: GO 55705
44252: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44253: LD_ADDR_VAR 0 11
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: NEG
44335: PUSH
44336: LD_INT 2
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 3
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: LD_INT 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44446: LD_ADDR_VAR 0 12
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44642: LD_ADDR_VAR 0 13
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 3
44801: NEG
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: NEG
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44841: LD_ADDR_VAR 0 14
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: NEG
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 3
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45037: LD_ADDR_VAR 0 15
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 1
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 3
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 3
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45230: LD_ADDR_VAR 0 16
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: LD_INT 3
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45423: LD_ADDR_VAR 0 17
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45653: LD_ADDR_VAR 0 18
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45883: LD_ADDR_VAR 0 19
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46113: LD_ADDR_VAR 0 20
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46343: LD_ADDR_VAR 0 21
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 2
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: LD_INT 2
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46573: LD_ADDR_VAR 0 22
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46803: LD_ADDR_VAR 0 23
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: NEG
47015: PUSH
47016: LD_INT 3
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 3
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47083: LD_ADDR_VAR 0 24
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 2
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47359: LD_ADDR_VAR 0 25
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: LD_INT 2
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: NEG
47559: PUSH
47560: LD_INT 2
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: LD_INT 3
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47633: LD_ADDR_VAR 0 26
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: NEG
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47909: LD_ADDR_VAR 0 27
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 2
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48189: LD_ADDR_VAR 0 28
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 1
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 2
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: NEG
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48471: LD_ADDR_VAR 0 29
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 3
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 2
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48750: LD_ADDR_VAR 0 30
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 1
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 0
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: NEG
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: NEG
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 3
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: NEG
48983: PUSH
48984: LD_INT 1
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49028: LD_ADDR_VAR 0 31
49032: PUSH
49033: LD_INT 0
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: LD_INT 2
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: LD_INT 2
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: LD_INT 2
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 3
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49306: LD_ADDR_VAR 0 32
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 3
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49584: LD_ADDR_VAR 0 33
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 0
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: NEG
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: LD_INT 3
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49863: LD_ADDR_VAR 0 34
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 1
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: LD_INT 1
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: LD_INT 2
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 3
50108: NEG
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50143: LD_ADDR_VAR 0 35
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50255: LD_ADDR_VAR 0 36
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50367: LD_ADDR_VAR 0 37
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50479: LD_ADDR_VAR 0 38
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 2
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50591: LD_ADDR_VAR 0 39
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50703: LD_ADDR_VAR 0 40
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: NEG
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50815: LD_ADDR_VAR 0 41
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: LD_INT 3
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: NEG
51125: PUSH
51126: LD_INT 3
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51165: LD_ADDR_VAR 0 42
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 3
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 3
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 3
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 3
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 3
51462: NEG
51463: PUSH
51464: LD_INT 2
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 3
51474: NEG
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51515: LD_ADDR_VAR 0 43
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 3
51719: NEG
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 2
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 2
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51863: LD_ADDR_VAR 0 44
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 2
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: LD_INT 2
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: NEG
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: NEG
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: NEG
52173: PUSH
52174: LD_INT 3
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52213: LD_ADDR_VAR 0 45
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 3
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: LD_INT 3
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 3
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 3
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: NEG
52511: PUSH
52512: LD_INT 2
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 3
52522: NEG
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52563: LD_ADDR_VAR 0 46
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 3
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 2
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52911: LD_ADDR_VAR 0 47
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: PUSH
52940: LD_INT 0
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: NEG
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 2
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53062: LD_ADDR_VAR 0 48
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 1
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53209: LD_ADDR_VAR 0 49
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53353: LD_ADDR_VAR 0 50
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53497: LD_ADDR_VAR 0 51
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: NEG
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53644: LD_ADDR_VAR 0 52
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53795: LD_ADDR_VAR 0 53
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54025: LD_ADDR_VAR 0 54
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54255: LD_ADDR_VAR 0 55
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54485: LD_ADDR_VAR 0 56
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54715: LD_ADDR_VAR 0 57
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: NEG
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54945: LD_ADDR_VAR 0 58
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 0
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55175: LD_ADDR_VAR 0 59
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 1
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: LD_INT 1
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55263: LD_ADDR_VAR 0 60
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55351: LD_ADDR_VAR 0 61
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 1
55371: NEG
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 0
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 1
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55439: LD_ADDR_VAR 0 62
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55527: LD_ADDR_VAR 0 63
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: NEG
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55615: LD_ADDR_VAR 0 64
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// end ; 1 :
55703: GO 61600
55705: LD_INT 1
55707: DOUBLE
55708: EQUAL
55709: IFTRUE 55713
55711: GO 58336
55713: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55714: LD_ADDR_VAR 0 11
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: LIST
55757: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55758: LD_ADDR_VAR 0 12
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55799: LD_ADDR_VAR 0 13
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 3
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55839: LD_ADDR_VAR 0 14
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 3
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55880: LD_ADDR_VAR 0 15
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 3
55898: NEG
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: NEG
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55924: LD_ADDR_VAR 0 16
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: NEG
55944: PUSH
55945: LD_INT 2
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 3
55955: NEG
55956: PUSH
55957: LD_INT 3
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55970: LD_ADDR_VAR 0 17
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 3
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56014: LD_ADDR_VAR 0 18
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56055: LD_ADDR_VAR 0 19
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: LD_INT 3
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: LD_INT 3
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56095: LD_ADDR_VAR 0 20
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 3
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 2
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56136: LD_ADDR_VAR 0 21
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: NEG
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 3
56165: NEG
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56180: LD_ADDR_VAR 0 22
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 3
56199: NEG
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56226: LD_ADDR_VAR 0 23
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 3
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 4
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 3
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56270: LD_ADDR_VAR 0 24
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56311: LD_ADDR_VAR 0 25
56315: PUSH
56316: LD_INT 3
56318: PUSH
56319: LD_INT 3
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 4
56328: PUSH
56329: LD_INT 3
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 3
56338: PUSH
56339: LD_INT 4
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56351: LD_ADDR_VAR 0 26
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 3
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: LD_INT 4
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 3
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: LIST
56391: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56392: LD_ADDR_VAR 0 27
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 4
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56436: LD_ADDR_VAR 0 28
56440: PUSH
56441: LD_INT 3
56443: NEG
56444: PUSH
56445: LD_INT 3
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: LD_INT 4
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: LIST
56481: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56482: LD_ADDR_VAR 0 29
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: LD_INT 3
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: LD_INT 2
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 4
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 4
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 3
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: LD_INT 5
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 5
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 6
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 6
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 5
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56637: LD_ADDR_VAR 0 30
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 3
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 4
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 6
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 6
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56780: LD_ADDR_VAR 0 31
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: LD_INT 3
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 4
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 4
56827: PUSH
56828: LD_INT 4
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: LD_INT 4
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 5
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 5
56857: PUSH
56858: LD_INT 5
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 4
56867: PUSH
56868: LD_INT 5
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 6
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 6
56887: PUSH
56888: LD_INT 6
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 5
56897: PUSH
56898: LD_INT 6
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56919: LD_ADDR_VAR 0 32
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: LD_INT 3
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 3
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 4
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 4
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 5
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 5
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 4
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 6
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 6
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 5
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57062: LD_ADDR_VAR 0 33
57066: PUSH
57067: LD_INT 2
57069: NEG
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 0
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 3
57091: NEG
57092: PUSH
57093: LD_INT 1
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: NEG
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 4
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 5
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 5
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 5
57171: NEG
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 6
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 6
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57217: LD_ADDR_VAR 0 34
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: NEG
57237: PUSH
57238: LD_INT 2
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: LD_INT 3
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 4
57272: NEG
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: NEG
57285: PUSH
57286: LD_INT 4
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 4
57296: NEG
57297: PUSH
57298: LD_INT 5
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 5
57308: NEG
57309: PUSH
57310: LD_INT 4
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 5
57320: NEG
57321: PUSH
57322: LD_INT 5
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 5
57332: NEG
57333: PUSH
57334: LD_INT 6
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 6
57344: NEG
57345: PUSH
57346: LD_INT 5
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 6
57356: NEG
57357: PUSH
57358: LD_INT 6
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57380: LD_ADDR_VAR 0 41
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 2
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57424: LD_ADDR_VAR 0 42
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 2
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: LIST
57464: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57465: LD_ADDR_VAR 0 43
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57505: LD_ADDR_VAR 0 44
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57546: LD_ADDR_VAR 0 45
57550: PUSH
57551: LD_INT 2
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57590: LD_ADDR_VAR 0 46
57594: PUSH
57595: LD_INT 2
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57636: LD_ADDR_VAR 0 47
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 3
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57669: LD_ADDR_VAR 0 48
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57700: LD_ADDR_VAR 0 49
57704: PUSH
57705: LD_INT 3
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: PUSH
57718: LD_INT 2
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57729: LD_ADDR_VAR 0 50
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: LD_INT 3
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57758: LD_ADDR_VAR 0 51
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 2
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57789: LD_ADDR_VAR 0 52
57793: PUSH
57794: LD_INT 3
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57822: LD_ADDR_VAR 0 53
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 3
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 1
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57866: LD_ADDR_VAR 0 54
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57907: LD_ADDR_VAR 0 55
57911: PUSH
57912: LD_INT 3
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 2
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57947: LD_ADDR_VAR 0 56
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 3
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: LD_INT 2
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57988: LD_ADDR_VAR 0 57
57992: PUSH
57993: LD_INT 2
57995: NEG
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 3
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58032: LD_ADDR_VAR 0 58
58036: PUSH
58037: LD_INT 2
58039: NEG
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 3
58051: NEG
58052: PUSH
58053: LD_INT 2
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: NEG
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58078: LD_ADDR_VAR 0 59
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: LD_INT 2
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58122: LD_ADDR_VAR 0 60
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 1
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58163: LD_ADDR_VAR 0 61
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58203: LD_ADDR_VAR 0 62
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58244: LD_ADDR_VAR 0 63
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 2
58273: NEG
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58288: LD_ADDR_VAR 0 64
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// end ; 2 :
58334: GO 61600
58336: LD_INT 2
58338: DOUBLE
58339: EQUAL
58340: IFTRUE 58344
58342: GO 61599
58344: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58345: LD_ADDR_VAR 0 29
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 4
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 5
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 5
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 4
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 3
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: LD_INT 1
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 3
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: LD_INT 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: LD_INT 2
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 4
58465: PUSH
58466: LD_INT 3
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 4
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: LD_INT 4
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: PUSH
58506: LD_INT 2
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 4
58515: PUSH
58516: LD_INT 2
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 2
58525: PUSH
58526: LD_INT 4
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 4
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 3
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: LD_INT 5
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 4
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: LD_INT 3
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: PUSH
58608: LD_INT 5
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 4
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 4
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 4
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 4
58730: NEG
58731: PUSH
58732: LD_INT 4
58734: NEG
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 4
58742: NEG
58743: PUSH
58744: LD_INT 5
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 3
58754: NEG
58755: PUSH
58756: LD_INT 4
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: LD_INT 3
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 5
58790: NEG
58791: PUSH
58792: LD_INT 4
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 5
58802: NEG
58803: PUSH
58804: LD_INT 5
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: NEG
58815: PUSH
58816: LD_INT 5
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 5
58826: NEG
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58883: LD_ADDR_VAR 0 30
58887: PUSH
58888: LD_INT 4
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 4
58900: PUSH
58901: LD_INT 3
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 5
58910: PUSH
58911: LD_INT 4
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 5
58920: PUSH
58921: LD_INT 5
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 4
58930: PUSH
58931: LD_INT 5
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 3
58940: PUSH
58941: LD_INT 4
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 5
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 5
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 4
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 4
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: NEG
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 2
59052: PUSH
59053: LD_INT 4
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 2
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 4
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 4
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 3
59107: NEG
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 4
59118: NEG
59119: PUSH
59120: LD_INT 1
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 5
59129: NEG
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 5
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 5
59152: NEG
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 3
59175: NEG
59176: PUSH
59177: LD_INT 3
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: LD_INT 4
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 2
59199: NEG
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: NEG
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: LD_INT 4
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: NEG
59260: PUSH
59261: LD_INT 4
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 4
59271: NEG
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 4
59286: NEG
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 5
59297: NEG
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 0
59327: PUSH
59328: LD_INT 3
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 5
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 5
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59430: LD_ADDR_VAR 0 31
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 4
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 4
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: LD_INT 5
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 5
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 4
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 2
59509: PUSH
59510: LD_INT 5
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: NEG
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 3
59530: NEG
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 4
59609: NEG
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 4
59632: NEG
59633: PUSH
59634: LD_INT 4
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: LD_INT 5
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: LD_INT 4
59660: NEG
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: NEG
59669: PUSH
59670: LD_INT 3
59672: NEG
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 4
59680: NEG
59681: PUSH
59682: LD_INT 3
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 5
59692: NEG
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 5
59704: NEG
59705: PUSH
59706: LD_INT 5
59708: NEG
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: NEG
59717: PUSH
59718: LD_INT 5
59720: NEG
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 5
59728: NEG
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 3
59743: NEG
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: LD_INT 4
59754: NEG
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 2
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 3
59799: NEG
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 4
59811: NEG
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 2
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: LD_INT 4
59834: NEG
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 4
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 4
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 5
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 5
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 3
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 3
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 3
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 5
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59980: LD_ADDR_VAR 0 32
59984: PUSH
59985: LD_INT 4
59987: NEG
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 4
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 3
60021: NEG
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 4
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 5
60043: NEG
60044: PUSH
60045: LD_INT 0
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: NEG
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 5
60066: NEG
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 3
60089: NEG
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: LD_INT 4
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: NEG
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 4
60149: NEG
60150: PUSH
60151: LD_INT 3
60153: NEG
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: LD_INT 4
60165: NEG
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 4
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 4
60185: NEG
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 0
60197: PUSH
60198: LD_INT 4
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 5
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: LD_INT 4
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 4
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 5
60268: NEG
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: LD_INT 5
60291: NEG
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 4
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 4
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 3
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 2
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 2
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 4
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 4
60392: PUSH
60393: LD_INT 4
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 4
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 5
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 5
60422: PUSH
60423: LD_INT 5
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 4
60432: PUSH
60433: LD_INT 5
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: LD_INT 4
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 5
60462: PUSH
60463: LD_INT 3
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: LD_INT 5
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60527: LD_ADDR_VAR 0 33
60531: PUSH
60532: LD_INT 4
60534: NEG
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 4
60546: NEG
60547: PUSH
60548: LD_INT 5
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 3
60558: NEG
60559: PUSH
60560: LD_INT 4
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: NEG
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 4
60582: NEG
60583: PUSH
60584: LD_INT 3
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 5
60594: NEG
60595: PUSH
60596: LD_INT 4
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: LD_INT 5
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 3
60618: NEG
60619: PUSH
60620: LD_INT 5
60622: NEG
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: PUSH
60628: LD_INT 5
60630: NEG
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 4
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 2
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 4
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 2
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 2
60732: NEG
60733: PUSH
60734: LD_INT 4
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 4
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 5
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 5
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 4
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 3
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: PUSH
60817: LD_INT 2
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 5
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: LD_INT 3
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 4
60867: PUSH
60868: LD_INT 4
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 3
60877: PUSH
60878: LD_INT 4
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 2
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 4
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 2
60917: PUSH
60918: LD_INT 4
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 4
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 3
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: LD_INT 4
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 5
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: LD_INT 4
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 3
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 2
60999: PUSH
61000: LD_INT 5
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61065: LD_ADDR_VAR 0 34
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: LD_INT 5
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: LD_INT 4
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 3
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 4
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 1
61139: NEG
61140: PUSH
61141: LD_INT 5
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: LD_INT 3
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: LD_INT 5
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 4
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 4
61205: PUSH
61206: LD_INT 1
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 2
61249: NEG
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 4
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 4
61277: PUSH
61278: LD_INT 3
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 5
61297: PUSH
61298: LD_INT 5
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: PUSH
61308: LD_INT 5
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: LD_INT 4
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 3
61327: PUSH
61328: LD_INT 3
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 5
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 3
61347: PUSH
61348: LD_INT 5
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: PUSH
61430: LD_INT 4
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 4
61450: NEG
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 4
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 4
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 5
61506: NEG
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 5
61517: NEG
61518: PUSH
61519: LD_INT 1
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 5
61529: NEG
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: ST_TO_ADDR
// end ; end ;
61597: GO 61600
61599: POP
// case btype of b_depot , b_warehouse :
61600: LD_VAR 0 1
61604: PUSH
61605: LD_INT 0
61607: DOUBLE
61608: EQUAL
61609: IFTRUE 61619
61611: LD_INT 1
61613: DOUBLE
61614: EQUAL
61615: IFTRUE 61619
61617: GO 61820
61619: POP
// case nation of nation_american :
61620: LD_VAR 0 5
61624: PUSH
61625: LD_INT 1
61627: DOUBLE
61628: EQUAL
61629: IFTRUE 61633
61631: GO 61689
61633: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
61634: LD_ADDR_VAR 0 9
61638: PUSH
61639: LD_VAR 0 11
61643: PUSH
61644: LD_VAR 0 12
61648: PUSH
61649: LD_VAR 0 13
61653: PUSH
61654: LD_VAR 0 14
61658: PUSH
61659: LD_VAR 0 15
61663: PUSH
61664: LD_VAR 0 16
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: PUSH
61677: LD_VAR 0 4
61681: PUSH
61682: LD_INT 1
61684: PLUS
61685: ARRAY
61686: ST_TO_ADDR
61687: GO 61818
61689: LD_INT 2
61691: DOUBLE
61692: EQUAL
61693: IFTRUE 61697
61695: GO 61753
61697: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
61698: LD_ADDR_VAR 0 9
61702: PUSH
61703: LD_VAR 0 17
61707: PUSH
61708: LD_VAR 0 18
61712: PUSH
61713: LD_VAR 0 19
61717: PUSH
61718: LD_VAR 0 20
61722: PUSH
61723: LD_VAR 0 21
61727: PUSH
61728: LD_VAR 0 22
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: PUSH
61741: LD_VAR 0 4
61745: PUSH
61746: LD_INT 1
61748: PLUS
61749: ARRAY
61750: ST_TO_ADDR
61751: GO 61818
61753: LD_INT 3
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61761
61759: GO 61817
61761: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61762: LD_ADDR_VAR 0 9
61766: PUSH
61767: LD_VAR 0 23
61771: PUSH
61772: LD_VAR 0 24
61776: PUSH
61777: LD_VAR 0 25
61781: PUSH
61782: LD_VAR 0 26
61786: PUSH
61787: LD_VAR 0 27
61791: PUSH
61792: LD_VAR 0 28
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: PUSH
61805: LD_VAR 0 4
61809: PUSH
61810: LD_INT 1
61812: PLUS
61813: ARRAY
61814: ST_TO_ADDR
61815: GO 61818
61817: POP
61818: GO 62373
61820: LD_INT 2
61822: DOUBLE
61823: EQUAL
61824: IFTRUE 61834
61826: LD_INT 3
61828: DOUBLE
61829: EQUAL
61830: IFTRUE 61834
61832: GO 61890
61834: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61835: LD_ADDR_VAR 0 9
61839: PUSH
61840: LD_VAR 0 29
61844: PUSH
61845: LD_VAR 0 30
61849: PUSH
61850: LD_VAR 0 31
61854: PUSH
61855: LD_VAR 0 32
61859: PUSH
61860: LD_VAR 0 33
61864: PUSH
61865: LD_VAR 0 34
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: PUSH
61878: LD_VAR 0 4
61882: PUSH
61883: LD_INT 1
61885: PLUS
61886: ARRAY
61887: ST_TO_ADDR
61888: GO 62373
61890: LD_INT 16
61892: DOUBLE
61893: EQUAL
61894: IFTRUE 61952
61896: LD_INT 17
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61952
61902: LD_INT 18
61904: DOUBLE
61905: EQUAL
61906: IFTRUE 61952
61908: LD_INT 19
61910: DOUBLE
61911: EQUAL
61912: IFTRUE 61952
61914: LD_INT 22
61916: DOUBLE
61917: EQUAL
61918: IFTRUE 61952
61920: LD_INT 20
61922: DOUBLE
61923: EQUAL
61924: IFTRUE 61952
61926: LD_INT 21
61928: DOUBLE
61929: EQUAL
61930: IFTRUE 61952
61932: LD_INT 23
61934: DOUBLE
61935: EQUAL
61936: IFTRUE 61952
61938: LD_INT 24
61940: DOUBLE
61941: EQUAL
61942: IFTRUE 61952
61944: LD_INT 25
61946: DOUBLE
61947: EQUAL
61948: IFTRUE 61952
61950: GO 62008
61952: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61953: LD_ADDR_VAR 0 9
61957: PUSH
61958: LD_VAR 0 35
61962: PUSH
61963: LD_VAR 0 36
61967: PUSH
61968: LD_VAR 0 37
61972: PUSH
61973: LD_VAR 0 38
61977: PUSH
61978: LD_VAR 0 39
61982: PUSH
61983: LD_VAR 0 40
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: PUSH
61996: LD_VAR 0 4
62000: PUSH
62001: LD_INT 1
62003: PLUS
62004: ARRAY
62005: ST_TO_ADDR
62006: GO 62373
62008: LD_INT 6
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62064
62014: LD_INT 7
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62064
62020: LD_INT 8
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62064
62026: LD_INT 13
62028: DOUBLE
62029: EQUAL
62030: IFTRUE 62064
62032: LD_INT 12
62034: DOUBLE
62035: EQUAL
62036: IFTRUE 62064
62038: LD_INT 15
62040: DOUBLE
62041: EQUAL
62042: IFTRUE 62064
62044: LD_INT 11
62046: DOUBLE
62047: EQUAL
62048: IFTRUE 62064
62050: LD_INT 14
62052: DOUBLE
62053: EQUAL
62054: IFTRUE 62064
62056: LD_INT 10
62058: DOUBLE
62059: EQUAL
62060: IFTRUE 62064
62062: GO 62120
62064: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
62065: LD_ADDR_VAR 0 9
62069: PUSH
62070: LD_VAR 0 41
62074: PUSH
62075: LD_VAR 0 42
62079: PUSH
62080: LD_VAR 0 43
62084: PUSH
62085: LD_VAR 0 44
62089: PUSH
62090: LD_VAR 0 45
62094: PUSH
62095: LD_VAR 0 46
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: PUSH
62108: LD_VAR 0 4
62112: PUSH
62113: LD_INT 1
62115: PLUS
62116: ARRAY
62117: ST_TO_ADDR
62118: GO 62373
62120: LD_INT 36
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62128
62126: GO 62184
62128: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62129: LD_ADDR_VAR 0 9
62133: PUSH
62134: LD_VAR 0 47
62138: PUSH
62139: LD_VAR 0 48
62143: PUSH
62144: LD_VAR 0 49
62148: PUSH
62149: LD_VAR 0 50
62153: PUSH
62154: LD_VAR 0 51
62158: PUSH
62159: LD_VAR 0 52
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: PUSH
62172: LD_VAR 0 4
62176: PUSH
62177: LD_INT 1
62179: PLUS
62180: ARRAY
62181: ST_TO_ADDR
62182: GO 62373
62184: LD_INT 4
62186: DOUBLE
62187: EQUAL
62188: IFTRUE 62210
62190: LD_INT 5
62192: DOUBLE
62193: EQUAL
62194: IFTRUE 62210
62196: LD_INT 34
62198: DOUBLE
62199: EQUAL
62200: IFTRUE 62210
62202: LD_INT 37
62204: DOUBLE
62205: EQUAL
62206: IFTRUE 62210
62208: GO 62266
62210: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62211: LD_ADDR_VAR 0 9
62215: PUSH
62216: LD_VAR 0 53
62220: PUSH
62221: LD_VAR 0 54
62225: PUSH
62226: LD_VAR 0 55
62230: PUSH
62231: LD_VAR 0 56
62235: PUSH
62236: LD_VAR 0 57
62240: PUSH
62241: LD_VAR 0 58
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: PUSH
62254: LD_VAR 0 4
62258: PUSH
62259: LD_INT 1
62261: PLUS
62262: ARRAY
62263: ST_TO_ADDR
62264: GO 62373
62266: LD_INT 31
62268: DOUBLE
62269: EQUAL
62270: IFTRUE 62316
62272: LD_INT 32
62274: DOUBLE
62275: EQUAL
62276: IFTRUE 62316
62278: LD_INT 33
62280: DOUBLE
62281: EQUAL
62282: IFTRUE 62316
62284: LD_INT 27
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62316
62290: LD_INT 26
62292: DOUBLE
62293: EQUAL
62294: IFTRUE 62316
62296: LD_INT 28
62298: DOUBLE
62299: EQUAL
62300: IFTRUE 62316
62302: LD_INT 29
62304: DOUBLE
62305: EQUAL
62306: IFTRUE 62316
62308: LD_INT 30
62310: DOUBLE
62311: EQUAL
62312: IFTRUE 62316
62314: GO 62372
62316: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
62317: LD_ADDR_VAR 0 9
62321: PUSH
62322: LD_VAR 0 59
62326: PUSH
62327: LD_VAR 0 60
62331: PUSH
62332: LD_VAR 0 61
62336: PUSH
62337: LD_VAR 0 62
62341: PUSH
62342: LD_VAR 0 63
62346: PUSH
62347: LD_VAR 0 64
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: PUSH
62360: LD_VAR 0 4
62364: PUSH
62365: LD_INT 1
62367: PLUS
62368: ARRAY
62369: ST_TO_ADDR
62370: GO 62373
62372: POP
// temp_list2 = [ ] ;
62373: LD_ADDR_VAR 0 10
62377: PUSH
62378: EMPTY
62379: ST_TO_ADDR
// for i in temp_list do
62380: LD_ADDR_VAR 0 8
62384: PUSH
62385: LD_VAR 0 9
62389: PUSH
62390: FOR_IN
62391: IFFALSE 62443
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62393: LD_ADDR_VAR 0 10
62397: PUSH
62398: LD_VAR 0 10
62402: PUSH
62403: LD_VAR 0 8
62407: PUSH
62408: LD_INT 1
62410: ARRAY
62411: PUSH
62412: LD_VAR 0 2
62416: PLUS
62417: PUSH
62418: LD_VAR 0 8
62422: PUSH
62423: LD_INT 2
62425: ARRAY
62426: PUSH
62427: LD_VAR 0 3
62431: PLUS
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: ADD
62440: ST_TO_ADDR
62441: GO 62390
62443: POP
62444: POP
// result = temp_list2 ;
62445: LD_ADDR_VAR 0 7
62449: PUSH
62450: LD_VAR 0 10
62454: ST_TO_ADDR
// end ;
62455: LD_VAR 0 7
62459: RET
// export function EnemyInRange ( unit , dist ) ; begin
62460: LD_INT 0
62462: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62463: LD_ADDR_VAR 0 3
62467: PUSH
62468: LD_VAR 0 1
62472: PPUSH
62473: CALL_OW 255
62477: PPUSH
62478: LD_VAR 0 1
62482: PPUSH
62483: CALL_OW 250
62487: PPUSH
62488: LD_VAR 0 1
62492: PPUSH
62493: CALL_OW 251
62497: PPUSH
62498: LD_VAR 0 2
62502: PPUSH
62503: CALL 36564 0 4
62507: PUSH
62508: LD_INT 4
62510: ARRAY
62511: ST_TO_ADDR
// end ;
62512: LD_VAR 0 3
62516: RET
// export function PlayerSeeMe ( unit ) ; begin
62517: LD_INT 0
62519: PPUSH
// result := See ( your_side , unit ) ;
62520: LD_ADDR_VAR 0 2
62524: PUSH
62525: LD_OWVAR 2
62529: PPUSH
62530: LD_VAR 0 1
62534: PPUSH
62535: CALL_OW 292
62539: ST_TO_ADDR
// end ;
62540: LD_VAR 0 2
62544: RET
// export function ReverseDir ( unit ) ; begin
62545: LD_INT 0
62547: PPUSH
// if not unit then
62548: LD_VAR 0 1
62552: NOT
62553: IFFALSE 62557
// exit ;
62555: GO 62580
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62557: LD_ADDR_VAR 0 2
62561: PUSH
62562: LD_VAR 0 1
62566: PPUSH
62567: CALL_OW 254
62571: PUSH
62572: LD_INT 3
62574: PLUS
62575: PUSH
62576: LD_INT 6
62578: MOD
62579: ST_TO_ADDR
// end ;
62580: LD_VAR 0 2
62584: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62585: LD_INT 0
62587: PPUSH
62588: PPUSH
62589: PPUSH
62590: PPUSH
62591: PPUSH
// if not hexes then
62592: LD_VAR 0 2
62596: NOT
62597: IFFALSE 62601
// exit ;
62599: GO 62749
// dist := 9999 ;
62601: LD_ADDR_VAR 0 5
62605: PUSH
62606: LD_INT 9999
62608: ST_TO_ADDR
// for i = 1 to hexes do
62609: LD_ADDR_VAR 0 4
62613: PUSH
62614: DOUBLE
62615: LD_INT 1
62617: DEC
62618: ST_TO_ADDR
62619: LD_VAR 0 2
62623: PUSH
62624: FOR_TO
62625: IFFALSE 62737
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62627: LD_VAR 0 1
62631: PPUSH
62632: LD_VAR 0 2
62636: PUSH
62637: LD_VAR 0 4
62641: ARRAY
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PPUSH
62647: LD_VAR 0 2
62651: PUSH
62652: LD_VAR 0 4
62656: ARRAY
62657: PUSH
62658: LD_INT 2
62660: ARRAY
62661: PPUSH
62662: CALL_OW 297
62666: PUSH
62667: LD_VAR 0 5
62671: LESS
62672: IFFALSE 62735
// begin hex := hexes [ i ] ;
62674: LD_ADDR_VAR 0 7
62678: PUSH
62679: LD_VAR 0 2
62683: PUSH
62684: LD_VAR 0 4
62688: ARRAY
62689: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62690: LD_ADDR_VAR 0 5
62694: PUSH
62695: LD_VAR 0 1
62699: PPUSH
62700: LD_VAR 0 2
62704: PUSH
62705: LD_VAR 0 4
62709: ARRAY
62710: PUSH
62711: LD_INT 1
62713: ARRAY
62714: PPUSH
62715: LD_VAR 0 2
62719: PUSH
62720: LD_VAR 0 4
62724: ARRAY
62725: PUSH
62726: LD_INT 2
62728: ARRAY
62729: PPUSH
62730: CALL_OW 297
62734: ST_TO_ADDR
// end ; end ;
62735: GO 62624
62737: POP
62738: POP
// result := hex ;
62739: LD_ADDR_VAR 0 3
62743: PUSH
62744: LD_VAR 0 7
62748: ST_TO_ADDR
// end ;
62749: LD_VAR 0 3
62753: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62754: LD_INT 0
62756: PPUSH
62757: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62758: LD_VAR 0 1
62762: NOT
62763: PUSH
62764: LD_VAR 0 1
62768: PUSH
62769: LD_INT 21
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 23
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PPUSH
62793: CALL_OW 69
62797: IN
62798: NOT
62799: OR
62800: IFFALSE 62804
// exit ;
62802: GO 62851
// for i = 1 to 3 do
62804: LD_ADDR_VAR 0 3
62808: PUSH
62809: DOUBLE
62810: LD_INT 1
62812: DEC
62813: ST_TO_ADDR
62814: LD_INT 3
62816: PUSH
62817: FOR_TO
62818: IFFALSE 62849
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62820: LD_VAR 0 1
62824: PPUSH
62825: CALL_OW 250
62829: PPUSH
62830: LD_VAR 0 1
62834: PPUSH
62835: CALL_OW 251
62839: PPUSH
62840: LD_INT 1
62842: PPUSH
62843: CALL_OW 453
62847: GO 62817
62849: POP
62850: POP
// end ;
62851: LD_VAR 0 2
62855: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62856: LD_INT 0
62858: PPUSH
62859: PPUSH
62860: PPUSH
62861: PPUSH
62862: PPUSH
62863: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62864: LD_VAR 0 1
62868: NOT
62869: PUSH
62870: LD_VAR 0 2
62874: NOT
62875: OR
62876: PUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: CALL_OW 314
62886: OR
62887: IFFALSE 62891
// exit ;
62889: GO 63332
// x := GetX ( enemy_unit ) ;
62891: LD_ADDR_VAR 0 7
62895: PUSH
62896: LD_VAR 0 2
62900: PPUSH
62901: CALL_OW 250
62905: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62906: LD_ADDR_VAR 0 8
62910: PUSH
62911: LD_VAR 0 2
62915: PPUSH
62916: CALL_OW 251
62920: ST_TO_ADDR
// if not x or not y then
62921: LD_VAR 0 7
62925: NOT
62926: PUSH
62927: LD_VAR 0 8
62931: NOT
62932: OR
62933: IFFALSE 62937
// exit ;
62935: GO 63332
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62937: LD_ADDR_VAR 0 6
62941: PUSH
62942: LD_VAR 0 7
62946: PPUSH
62947: LD_INT 0
62949: PPUSH
62950: LD_INT 4
62952: PPUSH
62953: CALL_OW 272
62957: PUSH
62958: LD_VAR 0 8
62962: PPUSH
62963: LD_INT 0
62965: PPUSH
62966: LD_INT 4
62968: PPUSH
62969: CALL_OW 273
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_VAR 0 7
62982: PPUSH
62983: LD_INT 1
62985: PPUSH
62986: LD_INT 4
62988: PPUSH
62989: CALL_OW 272
62993: PUSH
62994: LD_VAR 0 8
62998: PPUSH
62999: LD_INT 1
63001: PPUSH
63002: LD_INT 4
63004: PPUSH
63005: CALL_OW 273
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_VAR 0 7
63018: PPUSH
63019: LD_INT 2
63021: PPUSH
63022: LD_INT 4
63024: PPUSH
63025: CALL_OW 272
63029: PUSH
63030: LD_VAR 0 8
63034: PPUSH
63035: LD_INT 2
63037: PPUSH
63038: LD_INT 4
63040: PPUSH
63041: CALL_OW 273
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 7
63054: PPUSH
63055: LD_INT 3
63057: PPUSH
63058: LD_INT 4
63060: PPUSH
63061: CALL_OW 272
63065: PUSH
63066: LD_VAR 0 8
63070: PPUSH
63071: LD_INT 3
63073: PPUSH
63074: LD_INT 4
63076: PPUSH
63077: CALL_OW 273
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_VAR 0 7
63090: PPUSH
63091: LD_INT 4
63093: PPUSH
63094: LD_INT 4
63096: PPUSH
63097: CALL_OW 272
63101: PUSH
63102: LD_VAR 0 8
63106: PPUSH
63107: LD_INT 4
63109: PPUSH
63110: LD_INT 4
63112: PPUSH
63113: CALL_OW 273
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_VAR 0 7
63126: PPUSH
63127: LD_INT 5
63129: PPUSH
63130: LD_INT 4
63132: PPUSH
63133: CALL_OW 272
63137: PUSH
63138: LD_VAR 0 8
63142: PPUSH
63143: LD_INT 5
63145: PPUSH
63146: LD_INT 4
63148: PPUSH
63149: CALL_OW 273
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: ST_TO_ADDR
// for i = tmp downto 1 do
63166: LD_ADDR_VAR 0 4
63170: PUSH
63171: DOUBLE
63172: LD_VAR 0 6
63176: INC
63177: ST_TO_ADDR
63178: LD_INT 1
63180: PUSH
63181: FOR_DOWNTO
63182: IFFALSE 63283
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63184: LD_VAR 0 6
63188: PUSH
63189: LD_VAR 0 4
63193: ARRAY
63194: PUSH
63195: LD_INT 1
63197: ARRAY
63198: PPUSH
63199: LD_VAR 0 6
63203: PUSH
63204: LD_VAR 0 4
63208: ARRAY
63209: PUSH
63210: LD_INT 2
63212: ARRAY
63213: PPUSH
63214: CALL_OW 488
63218: NOT
63219: PUSH
63220: LD_VAR 0 6
63224: PUSH
63225: LD_VAR 0 4
63229: ARRAY
63230: PUSH
63231: LD_INT 1
63233: ARRAY
63234: PPUSH
63235: LD_VAR 0 6
63239: PUSH
63240: LD_VAR 0 4
63244: ARRAY
63245: PUSH
63246: LD_INT 2
63248: ARRAY
63249: PPUSH
63250: CALL_OW 428
63254: PUSH
63255: LD_INT 0
63257: NONEQUAL
63258: OR
63259: IFFALSE 63281
// tmp := Delete ( tmp , i ) ;
63261: LD_ADDR_VAR 0 6
63265: PUSH
63266: LD_VAR 0 6
63270: PPUSH
63271: LD_VAR 0 4
63275: PPUSH
63276: CALL_OW 3
63280: ST_TO_ADDR
63281: GO 63181
63283: POP
63284: POP
// j := GetClosestHex ( unit , tmp ) ;
63285: LD_ADDR_VAR 0 5
63289: PUSH
63290: LD_VAR 0 1
63294: PPUSH
63295: LD_VAR 0 6
63299: PPUSH
63300: CALL 62585 0 2
63304: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63305: LD_VAR 0 1
63309: PPUSH
63310: LD_VAR 0 5
63314: PUSH
63315: LD_INT 1
63317: ARRAY
63318: PPUSH
63319: LD_VAR 0 5
63323: PUSH
63324: LD_INT 2
63326: ARRAY
63327: PPUSH
63328: CALL_OW 111
// end ;
63332: LD_VAR 0 3
63336: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63337: LD_INT 0
63339: PPUSH
63340: PPUSH
63341: PPUSH
// uc_side = 0 ;
63342: LD_ADDR_OWVAR 20
63346: PUSH
63347: LD_INT 0
63349: ST_TO_ADDR
// uc_nation = 0 ;
63350: LD_ADDR_OWVAR 21
63354: PUSH
63355: LD_INT 0
63357: ST_TO_ADDR
// InitHc ;
63358: CALL_OW 19
// InitVc ;
63362: CALL_OW 20
// if mastodonts then
63366: LD_VAR 0 6
63370: IFFALSE 63437
// for i = 1 to mastodonts do
63372: LD_ADDR_VAR 0 11
63376: PUSH
63377: DOUBLE
63378: LD_INT 1
63380: DEC
63381: ST_TO_ADDR
63382: LD_VAR 0 6
63386: PUSH
63387: FOR_TO
63388: IFFALSE 63435
// begin vc_chassis := 31 ;
63390: LD_ADDR_OWVAR 37
63394: PUSH
63395: LD_INT 31
63397: ST_TO_ADDR
// vc_control := control_rider ;
63398: LD_ADDR_OWVAR 38
63402: PUSH
63403: LD_INT 4
63405: ST_TO_ADDR
// animal := CreateVehicle ;
63406: LD_ADDR_VAR 0 12
63410: PUSH
63411: CALL_OW 45
63415: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63416: LD_VAR 0 12
63420: PPUSH
63421: LD_VAR 0 8
63425: PPUSH
63426: LD_INT 0
63428: PPUSH
63429: CALL 65506 0 3
// end ;
63433: GO 63387
63435: POP
63436: POP
// if horses then
63437: LD_VAR 0 5
63441: IFFALSE 63508
// for i = 1 to horses do
63443: LD_ADDR_VAR 0 11
63447: PUSH
63448: DOUBLE
63449: LD_INT 1
63451: DEC
63452: ST_TO_ADDR
63453: LD_VAR 0 5
63457: PUSH
63458: FOR_TO
63459: IFFALSE 63506
// begin hc_class := 21 ;
63461: LD_ADDR_OWVAR 28
63465: PUSH
63466: LD_INT 21
63468: ST_TO_ADDR
// hc_gallery :=  ;
63469: LD_ADDR_OWVAR 33
63473: PUSH
63474: LD_STRING 
63476: ST_TO_ADDR
// animal := CreateHuman ;
63477: LD_ADDR_VAR 0 12
63481: PUSH
63482: CALL_OW 44
63486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63487: LD_VAR 0 12
63491: PPUSH
63492: LD_VAR 0 8
63496: PPUSH
63497: LD_INT 0
63499: PPUSH
63500: CALL 65506 0 3
// end ;
63504: GO 63458
63506: POP
63507: POP
// if birds then
63508: LD_VAR 0 1
63512: IFFALSE 63579
// for i = 1 to birds do
63514: LD_ADDR_VAR 0 11
63518: PUSH
63519: DOUBLE
63520: LD_INT 1
63522: DEC
63523: ST_TO_ADDR
63524: LD_VAR 0 1
63528: PUSH
63529: FOR_TO
63530: IFFALSE 63577
// begin hc_class = 18 ;
63532: LD_ADDR_OWVAR 28
63536: PUSH
63537: LD_INT 18
63539: ST_TO_ADDR
// hc_gallery =  ;
63540: LD_ADDR_OWVAR 33
63544: PUSH
63545: LD_STRING 
63547: ST_TO_ADDR
// animal := CreateHuman ;
63548: LD_ADDR_VAR 0 12
63552: PUSH
63553: CALL_OW 44
63557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63558: LD_VAR 0 12
63562: PPUSH
63563: LD_VAR 0 8
63567: PPUSH
63568: LD_INT 0
63570: PPUSH
63571: CALL 65506 0 3
// end ;
63575: GO 63529
63577: POP
63578: POP
// if tigers then
63579: LD_VAR 0 2
63583: IFFALSE 63667
// for i = 1 to tigers do
63585: LD_ADDR_VAR 0 11
63589: PUSH
63590: DOUBLE
63591: LD_INT 1
63593: DEC
63594: ST_TO_ADDR
63595: LD_VAR 0 2
63599: PUSH
63600: FOR_TO
63601: IFFALSE 63665
// begin hc_class = class_tiger ;
63603: LD_ADDR_OWVAR 28
63607: PUSH
63608: LD_INT 14
63610: ST_TO_ADDR
// hc_gallery =  ;
63611: LD_ADDR_OWVAR 33
63615: PUSH
63616: LD_STRING 
63618: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63619: LD_ADDR_OWVAR 35
63623: PUSH
63624: LD_INT 7
63626: NEG
63627: PPUSH
63628: LD_INT 7
63630: PPUSH
63631: CALL_OW 12
63635: ST_TO_ADDR
// animal := CreateHuman ;
63636: LD_ADDR_VAR 0 12
63640: PUSH
63641: CALL_OW 44
63645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63646: LD_VAR 0 12
63650: PPUSH
63651: LD_VAR 0 8
63655: PPUSH
63656: LD_INT 0
63658: PPUSH
63659: CALL 65506 0 3
// end ;
63663: GO 63600
63665: POP
63666: POP
// if apemans then
63667: LD_VAR 0 3
63671: IFFALSE 63794
// for i = 1 to apemans do
63673: LD_ADDR_VAR 0 11
63677: PUSH
63678: DOUBLE
63679: LD_INT 1
63681: DEC
63682: ST_TO_ADDR
63683: LD_VAR 0 3
63687: PUSH
63688: FOR_TO
63689: IFFALSE 63792
// begin hc_class = class_apeman ;
63691: LD_ADDR_OWVAR 28
63695: PUSH
63696: LD_INT 12
63698: ST_TO_ADDR
// hc_gallery =  ;
63699: LD_ADDR_OWVAR 33
63703: PUSH
63704: LD_STRING 
63706: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63707: LD_ADDR_OWVAR 35
63711: PUSH
63712: LD_INT 5
63714: NEG
63715: PPUSH
63716: LD_INT 5
63718: PPUSH
63719: CALL_OW 12
63723: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63724: LD_ADDR_OWVAR 31
63728: PUSH
63729: LD_INT 1
63731: PPUSH
63732: LD_INT 3
63734: PPUSH
63735: CALL_OW 12
63739: PUSH
63740: LD_INT 1
63742: PPUSH
63743: LD_INT 3
63745: PPUSH
63746: CALL_OW 12
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: ST_TO_ADDR
// animal := CreateHuman ;
63763: LD_ADDR_VAR 0 12
63767: PUSH
63768: CALL_OW 44
63772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63773: LD_VAR 0 12
63777: PPUSH
63778: LD_VAR 0 8
63782: PPUSH
63783: LD_INT 0
63785: PPUSH
63786: CALL 65506 0 3
// end ;
63790: GO 63688
63792: POP
63793: POP
// if enchidnas then
63794: LD_VAR 0 4
63798: IFFALSE 63865
// for i = 1 to enchidnas do
63800: LD_ADDR_VAR 0 11
63804: PUSH
63805: DOUBLE
63806: LD_INT 1
63808: DEC
63809: ST_TO_ADDR
63810: LD_VAR 0 4
63814: PUSH
63815: FOR_TO
63816: IFFALSE 63863
// begin hc_class = 13 ;
63818: LD_ADDR_OWVAR 28
63822: PUSH
63823: LD_INT 13
63825: ST_TO_ADDR
// hc_gallery =  ;
63826: LD_ADDR_OWVAR 33
63830: PUSH
63831: LD_STRING 
63833: ST_TO_ADDR
// animal := CreateHuman ;
63834: LD_ADDR_VAR 0 12
63838: PUSH
63839: CALL_OW 44
63843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63844: LD_VAR 0 12
63848: PPUSH
63849: LD_VAR 0 8
63853: PPUSH
63854: LD_INT 0
63856: PPUSH
63857: CALL 65506 0 3
// end ;
63861: GO 63815
63863: POP
63864: POP
// if fishes then
63865: LD_VAR 0 7
63869: IFFALSE 63936
// for i = 1 to fishes do
63871: LD_ADDR_VAR 0 11
63875: PUSH
63876: DOUBLE
63877: LD_INT 1
63879: DEC
63880: ST_TO_ADDR
63881: LD_VAR 0 7
63885: PUSH
63886: FOR_TO
63887: IFFALSE 63934
// begin hc_class = 20 ;
63889: LD_ADDR_OWVAR 28
63893: PUSH
63894: LD_INT 20
63896: ST_TO_ADDR
// hc_gallery =  ;
63897: LD_ADDR_OWVAR 33
63901: PUSH
63902: LD_STRING 
63904: ST_TO_ADDR
// animal := CreateHuman ;
63905: LD_ADDR_VAR 0 12
63909: PUSH
63910: CALL_OW 44
63914: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63915: LD_VAR 0 12
63919: PPUSH
63920: LD_VAR 0 9
63924: PPUSH
63925: LD_INT 0
63927: PPUSH
63928: CALL 65506 0 3
// end ;
63932: GO 63886
63934: POP
63935: POP
// end ;
63936: LD_VAR 0 10
63940: RET
// export function WantHeal ( sci , unit ) ; begin
63941: LD_INT 0
63943: PPUSH
// if GetTaskList ( sci ) > 0 then
63944: LD_VAR 0 1
63948: PPUSH
63949: CALL_OW 437
63953: PUSH
63954: LD_INT 0
63956: GREATER
63957: IFFALSE 64027
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63959: LD_VAR 0 1
63963: PPUSH
63964: CALL_OW 437
63968: PUSH
63969: LD_INT 1
63971: ARRAY
63972: PUSH
63973: LD_INT 1
63975: ARRAY
63976: PUSH
63977: LD_STRING l
63979: EQUAL
63980: PUSH
63981: LD_VAR 0 1
63985: PPUSH
63986: CALL_OW 437
63990: PUSH
63991: LD_INT 1
63993: ARRAY
63994: PUSH
63995: LD_INT 4
63997: ARRAY
63998: PUSH
63999: LD_VAR 0 2
64003: EQUAL
64004: AND
64005: IFFALSE 64017
// result := true else
64007: LD_ADDR_VAR 0 3
64011: PUSH
64012: LD_INT 1
64014: ST_TO_ADDR
64015: GO 64025
// result := false ;
64017: LD_ADDR_VAR 0 3
64021: PUSH
64022: LD_INT 0
64024: ST_TO_ADDR
// end else
64025: GO 64035
// result := false ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_INT 0
64034: ST_TO_ADDR
// end ;
64035: LD_VAR 0 3
64039: RET
// export function HealTarget ( sci ) ; begin
64040: LD_INT 0
64042: PPUSH
// if not sci then
64043: LD_VAR 0 1
64047: NOT
64048: IFFALSE 64052
// exit ;
64050: GO 64117
// result := 0 ;
64052: LD_ADDR_VAR 0 2
64056: PUSH
64057: LD_INT 0
64059: ST_TO_ADDR
// if GetTaskList ( sci ) then
64060: LD_VAR 0 1
64064: PPUSH
64065: CALL_OW 437
64069: IFFALSE 64117
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64071: LD_VAR 0 1
64075: PPUSH
64076: CALL_OW 437
64080: PUSH
64081: LD_INT 1
64083: ARRAY
64084: PUSH
64085: LD_INT 1
64087: ARRAY
64088: PUSH
64089: LD_STRING l
64091: EQUAL
64092: IFFALSE 64117
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64094: LD_ADDR_VAR 0 2
64098: PUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 437
64108: PUSH
64109: LD_INT 1
64111: ARRAY
64112: PUSH
64113: LD_INT 4
64115: ARRAY
64116: ST_TO_ADDR
// end ;
64117: LD_VAR 0 2
64121: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64122: LD_INT 0
64124: PPUSH
64125: PPUSH
64126: PPUSH
64127: PPUSH
// if not base_units then
64128: LD_VAR 0 1
64132: NOT
64133: IFFALSE 64137
// exit ;
64135: GO 64224
// result := false ;
64137: LD_ADDR_VAR 0 2
64141: PUSH
64142: LD_INT 0
64144: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64145: LD_ADDR_VAR 0 5
64149: PUSH
64150: LD_VAR 0 1
64154: PPUSH
64155: LD_INT 21
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PPUSH
64165: CALL_OW 72
64169: ST_TO_ADDR
// if not tmp then
64170: LD_VAR 0 5
64174: NOT
64175: IFFALSE 64179
// exit ;
64177: GO 64224
// for i in tmp do
64179: LD_ADDR_VAR 0 3
64183: PUSH
64184: LD_VAR 0 5
64188: PUSH
64189: FOR_IN
64190: IFFALSE 64222
// begin result := EnemyInRange ( i , 22 ) ;
64192: LD_ADDR_VAR 0 2
64196: PUSH
64197: LD_VAR 0 3
64201: PPUSH
64202: LD_INT 22
64204: PPUSH
64205: CALL 62460 0 2
64209: ST_TO_ADDR
// if result then
64210: LD_VAR 0 2
64214: IFFALSE 64220
// exit ;
64216: POP
64217: POP
64218: GO 64224
// end ;
64220: GO 64189
64222: POP
64223: POP
// end ;
64224: LD_VAR 0 2
64228: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64229: LD_INT 0
64231: PPUSH
64232: PPUSH
// if not units then
64233: LD_VAR 0 1
64237: NOT
64238: IFFALSE 64242
// exit ;
64240: GO 64312
// result := [ ] ;
64242: LD_ADDR_VAR 0 3
64246: PUSH
64247: EMPTY
64248: ST_TO_ADDR
// for i in units do
64249: LD_ADDR_VAR 0 4
64253: PUSH
64254: LD_VAR 0 1
64258: PUSH
64259: FOR_IN
64260: IFFALSE 64310
// if GetTag ( i ) = tag then
64262: LD_VAR 0 4
64266: PPUSH
64267: CALL_OW 110
64271: PUSH
64272: LD_VAR 0 2
64276: EQUAL
64277: IFFALSE 64308
// result := Insert ( result , result + 1 , i ) ;
64279: LD_ADDR_VAR 0 3
64283: PUSH
64284: LD_VAR 0 3
64288: PPUSH
64289: LD_VAR 0 3
64293: PUSH
64294: LD_INT 1
64296: PLUS
64297: PPUSH
64298: LD_VAR 0 4
64302: PPUSH
64303: CALL_OW 2
64307: ST_TO_ADDR
64308: GO 64259
64310: POP
64311: POP
// end ;
64312: LD_VAR 0 3
64316: RET
// export function IsDriver ( un ) ; begin
64317: LD_INT 0
64319: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64320: LD_ADDR_VAR 0 2
64324: PUSH
64325: LD_VAR 0 1
64329: PUSH
64330: LD_INT 55
64332: PUSH
64333: EMPTY
64334: LIST
64335: PPUSH
64336: CALL_OW 69
64340: IN
64341: ST_TO_ADDR
// end ;
64342: LD_VAR 0 2
64346: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64347: LD_INT 0
64349: PPUSH
64350: PPUSH
// list := [ ] ;
64351: LD_ADDR_VAR 0 5
64355: PUSH
64356: EMPTY
64357: ST_TO_ADDR
// case d of 0 :
64358: LD_VAR 0 3
64362: PUSH
64363: LD_INT 0
64365: DOUBLE
64366: EQUAL
64367: IFTRUE 64371
64369: GO 64504
64371: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64372: LD_ADDR_VAR 0 5
64376: PUSH
64377: LD_VAR 0 1
64381: PUSH
64382: LD_INT 4
64384: MINUS
64385: PUSH
64386: LD_VAR 0 2
64390: PUSH
64391: LD_INT 4
64393: MINUS
64394: PUSH
64395: LD_INT 2
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: PUSH
64403: LD_VAR 0 1
64407: PUSH
64408: LD_INT 3
64410: MINUS
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: PUSH
64425: LD_VAR 0 1
64429: PUSH
64430: LD_INT 4
64432: PLUS
64433: PUSH
64434: LD_VAR 0 2
64438: PUSH
64439: LD_INT 4
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: PUSH
64447: LD_VAR 0 1
64451: PUSH
64452: LD_INT 3
64454: PLUS
64455: PUSH
64456: LD_VAR 0 2
64460: PUSH
64461: LD_INT 3
64463: PLUS
64464: PUSH
64465: LD_INT 5
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_VAR 0 1
64477: PUSH
64478: LD_VAR 0 2
64482: PUSH
64483: LD_INT 4
64485: PLUS
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: ST_TO_ADDR
// end ; 1 :
64502: GO 65202
64504: LD_INT 1
64506: DOUBLE
64507: EQUAL
64508: IFTRUE 64512
64510: GO 64645
64512: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64513: LD_ADDR_VAR 0 5
64517: PUSH
64518: LD_VAR 0 1
64522: PUSH
64523: LD_VAR 0 2
64527: PUSH
64528: LD_INT 4
64530: MINUS
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: PUSH
64540: LD_VAR 0 1
64544: PUSH
64545: LD_INT 3
64547: MINUS
64548: PUSH
64549: LD_VAR 0 2
64553: PUSH
64554: LD_INT 3
64556: MINUS
64557: PUSH
64558: LD_INT 2
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: PUSH
64566: LD_VAR 0 1
64570: PUSH
64571: LD_INT 4
64573: MINUS
64574: PUSH
64575: LD_VAR 0 2
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: PUSH
64588: LD_VAR 0 1
64592: PUSH
64593: LD_VAR 0 2
64597: PUSH
64598: LD_INT 3
64600: PLUS
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: LIST
64609: PUSH
64610: LD_VAR 0 1
64614: PUSH
64615: LD_INT 4
64617: PLUS
64618: PUSH
64619: LD_VAR 0 2
64623: PUSH
64624: LD_INT 4
64626: PLUS
64627: PUSH
64628: LD_INT 5
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// end ; 2 :
64643: GO 65202
64645: LD_INT 2
64647: DOUBLE
64648: EQUAL
64649: IFTRUE 64653
64651: GO 64782
64653: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64654: LD_ADDR_VAR 0 5
64658: PUSH
64659: LD_VAR 0 1
64663: PUSH
64664: LD_VAR 0 2
64668: PUSH
64669: LD_INT 3
64671: MINUS
64672: PUSH
64673: LD_INT 3
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: PUSH
64681: LD_VAR 0 1
64685: PUSH
64686: LD_INT 4
64688: PLUS
64689: PUSH
64690: LD_VAR 0 2
64694: PUSH
64695: LD_INT 4
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: PUSH
64703: LD_VAR 0 1
64707: PUSH
64708: LD_VAR 0 2
64712: PUSH
64713: LD_INT 4
64715: PLUS
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: PUSH
64725: LD_VAR 0 1
64729: PUSH
64730: LD_INT 3
64732: MINUS
64733: PUSH
64734: LD_VAR 0 2
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: PUSH
64747: LD_VAR 0 1
64751: PUSH
64752: LD_INT 4
64754: MINUS
64755: PUSH
64756: LD_VAR 0 2
64760: PUSH
64761: LD_INT 4
64763: MINUS
64764: PUSH
64765: LD_INT 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: ST_TO_ADDR
// end ; 3 :
64780: GO 65202
64782: LD_INT 3
64784: DOUBLE
64785: EQUAL
64786: IFTRUE 64790
64788: GO 64923
64790: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64791: LD_ADDR_VAR 0 5
64795: PUSH
64796: LD_VAR 0 1
64800: PUSH
64801: LD_INT 3
64803: PLUS
64804: PUSH
64805: LD_VAR 0 2
64809: PUSH
64810: LD_INT 4
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: LIST
64817: PUSH
64818: LD_VAR 0 1
64822: PUSH
64823: LD_INT 4
64825: PLUS
64826: PUSH
64827: LD_VAR 0 2
64831: PUSH
64832: LD_INT 4
64834: PLUS
64835: PUSH
64836: LD_INT 5
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: PUSH
64844: LD_VAR 0 1
64848: PUSH
64849: LD_INT 4
64851: MINUS
64852: PUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: PUSH
64866: LD_VAR 0 1
64870: PUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_INT 4
64878: MINUS
64879: PUSH
64880: LD_INT 3
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: LIST
64887: PUSH
64888: LD_VAR 0 1
64892: PUSH
64893: LD_INT 3
64895: MINUS
64896: PUSH
64897: LD_VAR 0 2
64901: PUSH
64902: LD_INT 3
64904: MINUS
64905: PUSH
64906: LD_INT 2
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// end ; 4 :
64921: GO 65202
64923: LD_INT 4
64925: DOUBLE
64926: EQUAL
64927: IFTRUE 64931
64929: GO 65064
64931: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64932: LD_ADDR_VAR 0 5
64936: PUSH
64937: LD_VAR 0 1
64941: PUSH
64942: LD_VAR 0 2
64946: PUSH
64947: LD_INT 4
64949: PLUS
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: LIST
64958: PUSH
64959: LD_VAR 0 1
64963: PUSH
64964: LD_INT 3
64966: PLUS
64967: PUSH
64968: LD_VAR 0 2
64972: PUSH
64973: LD_INT 3
64975: PLUS
64976: PUSH
64977: LD_INT 5
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 4
64992: PLUS
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: LD_INT 4
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: PUSH
65007: LD_VAR 0 1
65011: PUSH
65012: LD_VAR 0 2
65016: PUSH
65017: LD_INT 3
65019: MINUS
65020: PUSH
65021: LD_INT 3
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: PUSH
65029: LD_VAR 0 1
65033: PUSH
65034: LD_INT 4
65036: MINUS
65037: PUSH
65038: LD_VAR 0 2
65042: PUSH
65043: LD_INT 4
65045: MINUS
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// end ; 5 :
65062: GO 65202
65064: LD_INT 5
65066: DOUBLE
65067: EQUAL
65068: IFTRUE 65072
65070: GO 65201
65072: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65073: LD_ADDR_VAR 0 5
65077: PUSH
65078: LD_VAR 0 1
65082: PUSH
65083: LD_INT 4
65085: MINUS
65086: PUSH
65087: LD_VAR 0 2
65091: PUSH
65092: LD_INT 1
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: PUSH
65100: LD_VAR 0 1
65104: PUSH
65105: LD_VAR 0 2
65109: PUSH
65110: LD_INT 4
65112: MINUS
65113: PUSH
65114: LD_INT 3
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: PUSH
65122: LD_VAR 0 1
65126: PUSH
65127: LD_INT 4
65129: PLUS
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_INT 4
65138: PLUS
65139: PUSH
65140: LD_INT 5
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_INT 3
65155: PLUS
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 4
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_VAR 0 2
65179: PUSH
65180: LD_INT 3
65182: PLUS
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: LIST
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: ST_TO_ADDR
// end ; end ;
65199: GO 65202
65201: POP
// result := list ;
65202: LD_ADDR_VAR 0 4
65206: PUSH
65207: LD_VAR 0 5
65211: ST_TO_ADDR
// end ;
65212: LD_VAR 0 4
65216: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65217: LD_INT 0
65219: PPUSH
65220: PPUSH
65221: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65222: LD_VAR 0 1
65226: NOT
65227: PUSH
65228: LD_VAR 0 2
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: LD_INT 3
65241: PUSH
65242: LD_INT 4
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: IN
65251: NOT
65252: OR
65253: IFFALSE 65257
// exit ;
65255: GO 65349
// tmp := [ ] ;
65257: LD_ADDR_VAR 0 5
65261: PUSH
65262: EMPTY
65263: ST_TO_ADDR
// for i in units do
65264: LD_ADDR_VAR 0 4
65268: PUSH
65269: LD_VAR 0 1
65273: PUSH
65274: FOR_IN
65275: IFFALSE 65318
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65277: LD_ADDR_VAR 0 5
65281: PUSH
65282: LD_VAR 0 5
65286: PPUSH
65287: LD_VAR 0 5
65291: PUSH
65292: LD_INT 1
65294: PLUS
65295: PPUSH
65296: LD_VAR 0 4
65300: PPUSH
65301: LD_VAR 0 2
65305: PPUSH
65306: CALL_OW 259
65310: PPUSH
65311: CALL_OW 2
65315: ST_TO_ADDR
65316: GO 65274
65318: POP
65319: POP
// if not tmp then
65320: LD_VAR 0 5
65324: NOT
65325: IFFALSE 65329
// exit ;
65327: GO 65349
// result := SortListByListDesc ( units , tmp ) ;
65329: LD_ADDR_VAR 0 3
65333: PUSH
65334: LD_VAR 0 1
65338: PPUSH
65339: LD_VAR 0 5
65343: PPUSH
65344: CALL_OW 77
65348: ST_TO_ADDR
// end ;
65349: LD_VAR 0 3
65353: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65354: LD_INT 0
65356: PPUSH
65357: PPUSH
65358: PPUSH
// x := GetX ( building ) ;
65359: LD_ADDR_VAR 0 4
65363: PUSH
65364: LD_VAR 0 2
65368: PPUSH
65369: CALL_OW 250
65373: ST_TO_ADDR
// y := GetY ( building ) ;
65374: LD_ADDR_VAR 0 5
65378: PUSH
65379: LD_VAR 0 2
65383: PPUSH
65384: CALL_OW 251
65388: ST_TO_ADDR
// if GetTaskList ( unit ) then
65389: LD_VAR 0 1
65393: PPUSH
65394: CALL_OW 437
65398: IFFALSE 65493
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65400: LD_STRING e
65402: PUSH
65403: LD_VAR 0 1
65407: PPUSH
65408: CALL_OW 437
65412: PUSH
65413: LD_INT 1
65415: ARRAY
65416: PUSH
65417: LD_INT 1
65419: ARRAY
65420: EQUAL
65421: PUSH
65422: LD_VAR 0 4
65426: PUSH
65427: LD_VAR 0 1
65431: PPUSH
65432: CALL_OW 437
65436: PUSH
65437: LD_INT 1
65439: ARRAY
65440: PUSH
65441: LD_INT 2
65443: ARRAY
65444: EQUAL
65445: AND
65446: PUSH
65447: LD_VAR 0 5
65451: PUSH
65452: LD_VAR 0 1
65456: PPUSH
65457: CALL_OW 437
65461: PUSH
65462: LD_INT 1
65464: ARRAY
65465: PUSH
65466: LD_INT 3
65468: ARRAY
65469: EQUAL
65470: AND
65471: IFFALSE 65483
// result := true else
65473: LD_ADDR_VAR 0 3
65477: PUSH
65478: LD_INT 1
65480: ST_TO_ADDR
65481: GO 65491
// result := false ;
65483: LD_ADDR_VAR 0 3
65487: PUSH
65488: LD_INT 0
65490: ST_TO_ADDR
// end else
65491: GO 65501
// result := false ;
65493: LD_ADDR_VAR 0 3
65497: PUSH
65498: LD_INT 0
65500: ST_TO_ADDR
// end ;
65501: LD_VAR 0 3
65505: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65506: LD_INT 0
65508: PPUSH
65509: PPUSH
65510: PPUSH
65511: PPUSH
// if not unit or not area then
65512: LD_VAR 0 1
65516: NOT
65517: PUSH
65518: LD_VAR 0 2
65522: NOT
65523: OR
65524: IFFALSE 65528
// exit ;
65526: GO 65692
// tmp := AreaToList ( area , i ) ;
65528: LD_ADDR_VAR 0 6
65532: PUSH
65533: LD_VAR 0 2
65537: PPUSH
65538: LD_VAR 0 5
65542: PPUSH
65543: CALL_OW 517
65547: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65548: LD_ADDR_VAR 0 5
65552: PUSH
65553: DOUBLE
65554: LD_INT 1
65556: DEC
65557: ST_TO_ADDR
65558: LD_VAR 0 6
65562: PUSH
65563: LD_INT 1
65565: ARRAY
65566: PUSH
65567: FOR_TO
65568: IFFALSE 65690
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65570: LD_ADDR_VAR 0 7
65574: PUSH
65575: LD_VAR 0 6
65579: PUSH
65580: LD_INT 1
65582: ARRAY
65583: PUSH
65584: LD_VAR 0 5
65588: ARRAY
65589: PUSH
65590: LD_VAR 0 6
65594: PUSH
65595: LD_INT 2
65597: ARRAY
65598: PUSH
65599: LD_VAR 0 5
65603: ARRAY
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65609: LD_VAR 0 7
65613: PUSH
65614: LD_INT 1
65616: ARRAY
65617: PPUSH
65618: LD_VAR 0 7
65622: PUSH
65623: LD_INT 2
65625: ARRAY
65626: PPUSH
65627: CALL_OW 428
65631: PUSH
65632: LD_INT 0
65634: EQUAL
65635: IFFALSE 65688
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65637: LD_VAR 0 1
65641: PPUSH
65642: LD_VAR 0 7
65646: PUSH
65647: LD_INT 1
65649: ARRAY
65650: PPUSH
65651: LD_VAR 0 7
65655: PUSH
65656: LD_INT 2
65658: ARRAY
65659: PPUSH
65660: LD_VAR 0 3
65664: PPUSH
65665: CALL_OW 48
// result := IsPlaced ( unit ) ;
65669: LD_ADDR_VAR 0 4
65673: PUSH
65674: LD_VAR 0 1
65678: PPUSH
65679: CALL_OW 305
65683: ST_TO_ADDR
// exit ;
65684: POP
65685: POP
65686: GO 65692
// end ; end ;
65688: GO 65567
65690: POP
65691: POP
// end ;
65692: LD_VAR 0 4
65696: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65697: LD_INT 0
65699: PPUSH
65700: PPUSH
65701: PPUSH
// if not side or side > 8 then
65702: LD_VAR 0 1
65706: NOT
65707: PUSH
65708: LD_VAR 0 1
65712: PUSH
65713: LD_INT 8
65715: GREATER
65716: OR
65717: IFFALSE 65721
// exit ;
65719: GO 65908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65721: LD_ADDR_VAR 0 4
65725: PUSH
65726: LD_INT 22
65728: PUSH
65729: LD_VAR 0 1
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 21
65740: PUSH
65741: LD_INT 3
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PPUSH
65752: CALL_OW 69
65756: ST_TO_ADDR
// if not tmp then
65757: LD_VAR 0 4
65761: NOT
65762: IFFALSE 65766
// exit ;
65764: GO 65908
// enable_addtolog := true ;
65766: LD_ADDR_OWVAR 81
65770: PUSH
65771: LD_INT 1
65773: ST_TO_ADDR
// AddToLog ( [ ) ;
65774: LD_STRING [
65776: PPUSH
65777: CALL_OW 561
// for i in tmp do
65781: LD_ADDR_VAR 0 3
65785: PUSH
65786: LD_VAR 0 4
65790: PUSH
65791: FOR_IN
65792: IFFALSE 65899
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65794: LD_STRING [
65796: PUSH
65797: LD_VAR 0 3
65801: PPUSH
65802: CALL_OW 266
65806: STR
65807: PUSH
65808: LD_STRING , 
65810: STR
65811: PUSH
65812: LD_VAR 0 3
65816: PPUSH
65817: CALL_OW 250
65821: STR
65822: PUSH
65823: LD_STRING , 
65825: STR
65826: PUSH
65827: LD_VAR 0 3
65831: PPUSH
65832: CALL_OW 251
65836: STR
65837: PUSH
65838: LD_STRING , 
65840: STR
65841: PUSH
65842: LD_VAR 0 3
65846: PPUSH
65847: CALL_OW 254
65851: STR
65852: PUSH
65853: LD_STRING , 
65855: STR
65856: PUSH
65857: LD_VAR 0 3
65861: PPUSH
65862: LD_INT 1
65864: PPUSH
65865: CALL_OW 268
65869: STR
65870: PUSH
65871: LD_STRING , 
65873: STR
65874: PUSH
65875: LD_VAR 0 3
65879: PPUSH
65880: LD_INT 2
65882: PPUSH
65883: CALL_OW 268
65887: STR
65888: PUSH
65889: LD_STRING ],
65891: STR
65892: PPUSH
65893: CALL_OW 561
// end ;
65897: GO 65791
65899: POP
65900: POP
// AddToLog ( ]; ) ;
65901: LD_STRING ];
65903: PPUSH
65904: CALL_OW 561
// end ;
65908: LD_VAR 0 2
65912: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65913: LD_INT 0
65915: PPUSH
65916: PPUSH
65917: PPUSH
65918: PPUSH
65919: PPUSH
// if not area or not rate or not max then
65920: LD_VAR 0 1
65924: NOT
65925: PUSH
65926: LD_VAR 0 2
65930: NOT
65931: OR
65932: PUSH
65933: LD_VAR 0 4
65937: NOT
65938: OR
65939: IFFALSE 65943
// exit ;
65941: GO 66135
// while 1 do
65943: LD_INT 1
65945: IFFALSE 66135
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65947: LD_ADDR_VAR 0 9
65951: PUSH
65952: LD_VAR 0 1
65956: PPUSH
65957: LD_INT 1
65959: PPUSH
65960: CALL_OW 287
65964: PUSH
65965: LD_INT 10
65967: MUL
65968: ST_TO_ADDR
// r := rate / 10 ;
65969: LD_ADDR_VAR 0 7
65973: PUSH
65974: LD_VAR 0 2
65978: PUSH
65979: LD_INT 10
65981: DIVREAL
65982: ST_TO_ADDR
// time := 1 1$00 ;
65983: LD_ADDR_VAR 0 8
65987: PUSH
65988: LD_INT 2100
65990: ST_TO_ADDR
// if amount < min then
65991: LD_VAR 0 9
65995: PUSH
65996: LD_VAR 0 3
66000: LESS
66001: IFFALSE 66019
// r := r * 2 else
66003: LD_ADDR_VAR 0 7
66007: PUSH
66008: LD_VAR 0 7
66012: PUSH
66013: LD_INT 2
66015: MUL
66016: ST_TO_ADDR
66017: GO 66045
// if amount > max then
66019: LD_VAR 0 9
66023: PUSH
66024: LD_VAR 0 4
66028: GREATER
66029: IFFALSE 66045
// r := r / 2 ;
66031: LD_ADDR_VAR 0 7
66035: PUSH
66036: LD_VAR 0 7
66040: PUSH
66041: LD_INT 2
66043: DIVREAL
66044: ST_TO_ADDR
// time := time / r ;
66045: LD_ADDR_VAR 0 8
66049: PUSH
66050: LD_VAR 0 8
66054: PUSH
66055: LD_VAR 0 7
66059: DIVREAL
66060: ST_TO_ADDR
// if time < 0 then
66061: LD_VAR 0 8
66065: PUSH
66066: LD_INT 0
66068: LESS
66069: IFFALSE 66086
// time := time * - 1 ;
66071: LD_ADDR_VAR 0 8
66075: PUSH
66076: LD_VAR 0 8
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: MUL
66085: ST_TO_ADDR
// wait ( time ) ;
66086: LD_VAR 0 8
66090: PPUSH
66091: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66095: LD_INT 35
66097: PPUSH
66098: LD_INT 875
66100: PPUSH
66101: CALL_OW 12
66105: PPUSH
66106: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66110: LD_INT 1
66112: PPUSH
66113: LD_INT 5
66115: PPUSH
66116: CALL_OW 12
66120: PPUSH
66121: LD_VAR 0 1
66125: PPUSH
66126: LD_INT 1
66128: PPUSH
66129: CALL_OW 55
// end ;
66133: GO 65943
// end ;
66135: LD_VAR 0 5
66139: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66140: LD_INT 0
66142: PPUSH
66143: PPUSH
66144: PPUSH
66145: PPUSH
66146: PPUSH
66147: PPUSH
66148: PPUSH
66149: PPUSH
// if not turrets or not factories then
66150: LD_VAR 0 1
66154: NOT
66155: PUSH
66156: LD_VAR 0 2
66160: NOT
66161: OR
66162: IFFALSE 66166
// exit ;
66164: GO 66473
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66166: LD_ADDR_VAR 0 10
66170: PUSH
66171: LD_INT 5
66173: PUSH
66174: LD_INT 6
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: LD_INT 4
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 3
66193: PUSH
66194: LD_INT 5
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 24
66208: PUSH
66209: LD_INT 25
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 23
66218: PUSH
66219: LD_INT 27
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 42
66232: PUSH
66233: LD_INT 43
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 44
66242: PUSH
66243: LD_INT 46
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 45
66252: PUSH
66253: LD_INT 47
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: ST_TO_ADDR
// result := [ ] ;
66270: LD_ADDR_VAR 0 3
66274: PUSH
66275: EMPTY
66276: ST_TO_ADDR
// for i in turrets do
66277: LD_ADDR_VAR 0 4
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: FOR_IN
66288: IFFALSE 66471
// begin nat := GetNation ( i ) ;
66290: LD_ADDR_VAR 0 7
66294: PUSH
66295: LD_VAR 0 4
66299: PPUSH
66300: CALL_OW 248
66304: ST_TO_ADDR
// weapon := 0 ;
66305: LD_ADDR_VAR 0 8
66309: PUSH
66310: LD_INT 0
66312: ST_TO_ADDR
// if not nat then
66313: LD_VAR 0 7
66317: NOT
66318: IFFALSE 66322
// continue ;
66320: GO 66287
// for j in list [ nat ] do
66322: LD_ADDR_VAR 0 5
66326: PUSH
66327: LD_VAR 0 10
66331: PUSH
66332: LD_VAR 0 7
66336: ARRAY
66337: PUSH
66338: FOR_IN
66339: IFFALSE 66380
// if GetBWeapon ( i ) = j [ 1 ] then
66341: LD_VAR 0 4
66345: PPUSH
66346: CALL_OW 269
66350: PUSH
66351: LD_VAR 0 5
66355: PUSH
66356: LD_INT 1
66358: ARRAY
66359: EQUAL
66360: IFFALSE 66378
// begin weapon := j [ 2 ] ;
66362: LD_ADDR_VAR 0 8
66366: PUSH
66367: LD_VAR 0 5
66371: PUSH
66372: LD_INT 2
66374: ARRAY
66375: ST_TO_ADDR
// break ;
66376: GO 66380
// end ;
66378: GO 66338
66380: POP
66381: POP
// if not weapon then
66382: LD_VAR 0 8
66386: NOT
66387: IFFALSE 66391
// continue ;
66389: GO 66287
// for k in factories do
66391: LD_ADDR_VAR 0 6
66395: PUSH
66396: LD_VAR 0 2
66400: PUSH
66401: FOR_IN
66402: IFFALSE 66467
// begin weapons := AvailableWeaponList ( k ) ;
66404: LD_ADDR_VAR 0 9
66408: PUSH
66409: LD_VAR 0 6
66413: PPUSH
66414: CALL_OW 478
66418: ST_TO_ADDR
// if not weapons then
66419: LD_VAR 0 9
66423: NOT
66424: IFFALSE 66428
// continue ;
66426: GO 66401
// if weapon in weapons then
66428: LD_VAR 0 8
66432: PUSH
66433: LD_VAR 0 9
66437: IN
66438: IFFALSE 66465
// begin result := [ i , weapon ] ;
66440: LD_ADDR_VAR 0 3
66444: PUSH
66445: LD_VAR 0 4
66449: PUSH
66450: LD_VAR 0 8
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: ST_TO_ADDR
// exit ;
66459: POP
66460: POP
66461: POP
66462: POP
66463: GO 66473
// end ; end ;
66465: GO 66401
66467: POP
66468: POP
// end ;
66469: GO 66287
66471: POP
66472: POP
// end ;
66473: LD_VAR 0 3
66477: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66478: LD_INT 0
66480: PPUSH
// if not side or side > 8 then
66481: LD_VAR 0 3
66485: NOT
66486: PUSH
66487: LD_VAR 0 3
66491: PUSH
66492: LD_INT 8
66494: GREATER
66495: OR
66496: IFFALSE 66500
// exit ;
66498: GO 66559
// if not range then
66500: LD_VAR 0 4
66504: NOT
66505: IFFALSE 66516
// range := - 12 ;
66507: LD_ADDR_VAR 0 4
66511: PUSH
66512: LD_INT 12
66514: NEG
66515: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66516: LD_VAR 0 1
66520: PPUSH
66521: LD_VAR 0 2
66525: PPUSH
66526: LD_VAR 0 3
66530: PPUSH
66531: LD_VAR 0 4
66535: PPUSH
66536: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66540: LD_VAR 0 1
66544: PPUSH
66545: LD_VAR 0 2
66549: PPUSH
66550: LD_VAR 0 3
66554: PPUSH
66555: CALL_OW 331
// end ;
66559: LD_VAR 0 5
66563: RET
// export function Video ( mode ) ; begin
66564: LD_INT 0
66566: PPUSH
// ingame_video = mode ;
66567: LD_ADDR_OWVAR 52
66571: PUSH
66572: LD_VAR 0 1
66576: ST_TO_ADDR
// interface_hidden = mode ;
66577: LD_ADDR_OWVAR 54
66581: PUSH
66582: LD_VAR 0 1
66586: ST_TO_ADDR
// end ;
66587: LD_VAR 0 2
66591: RET
// export function Join ( array , element ) ; begin
66592: LD_INT 0
66594: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66595: LD_ADDR_VAR 0 3
66599: PUSH
66600: LD_VAR 0 1
66604: PPUSH
66605: LD_VAR 0 1
66609: PUSH
66610: LD_INT 1
66612: PLUS
66613: PPUSH
66614: LD_VAR 0 2
66618: PPUSH
66619: CALL_OW 1
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 3
66628: RET
// export function JoinUnion ( array , element ) ; begin
66629: LD_INT 0
66631: PPUSH
// result := array union element ;
66632: LD_ADDR_VAR 0 3
66636: PUSH
66637: LD_VAR 0 1
66641: PUSH
66642: LD_VAR 0 2
66646: UNION
66647: ST_TO_ADDR
// end ;
66648: LD_VAR 0 3
66652: RET
// export function GetBehemoths ( side ) ; begin
66653: LD_INT 0
66655: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66656: LD_ADDR_VAR 0 2
66660: PUSH
66661: LD_INT 22
66663: PUSH
66664: LD_VAR 0 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 31
66675: PUSH
66676: LD_INT 25
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PPUSH
66687: CALL_OW 69
66691: ST_TO_ADDR
// end ;
66692: LD_VAR 0 2
66696: RET
// export function Shuffle ( array ) ; var i , index ; begin
66697: LD_INT 0
66699: PPUSH
66700: PPUSH
66701: PPUSH
// result := [ ] ;
66702: LD_ADDR_VAR 0 2
66706: PUSH
66707: EMPTY
66708: ST_TO_ADDR
// if not array then
66709: LD_VAR 0 1
66713: NOT
66714: IFFALSE 66718
// exit ;
66716: GO 66817
// Randomize ;
66718: CALL_OW 10
// for i = array downto 1 do
66722: LD_ADDR_VAR 0 3
66726: PUSH
66727: DOUBLE
66728: LD_VAR 0 1
66732: INC
66733: ST_TO_ADDR
66734: LD_INT 1
66736: PUSH
66737: FOR_DOWNTO
66738: IFFALSE 66815
// begin index := rand ( 1 , array ) ;
66740: LD_ADDR_VAR 0 4
66744: PUSH
66745: LD_INT 1
66747: PPUSH
66748: LD_VAR 0 1
66752: PPUSH
66753: CALL_OW 12
66757: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66758: LD_ADDR_VAR 0 2
66762: PUSH
66763: LD_VAR 0 2
66767: PPUSH
66768: LD_VAR 0 2
66772: PUSH
66773: LD_INT 1
66775: PLUS
66776: PPUSH
66777: LD_VAR 0 1
66781: PUSH
66782: LD_VAR 0 4
66786: ARRAY
66787: PPUSH
66788: CALL_OW 2
66792: ST_TO_ADDR
// array := Delete ( array , index ) ;
66793: LD_ADDR_VAR 0 1
66797: PUSH
66798: LD_VAR 0 1
66802: PPUSH
66803: LD_VAR 0 4
66807: PPUSH
66808: CALL_OW 3
66812: ST_TO_ADDR
// end ;
66813: GO 66737
66815: POP
66816: POP
// end ;
66817: LD_VAR 0 2
66821: RET
// export function GetBaseMaterials ( base ) ; begin
66822: LD_INT 0
66824: PPUSH
// result := [ 0 , 0 , 0 ] ;
66825: LD_ADDR_VAR 0 2
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 0
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: ST_TO_ADDR
// if not base then
66844: LD_VAR 0 1
66848: NOT
66849: IFFALSE 66853
// exit ;
66851: GO 66902
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66853: LD_ADDR_VAR 0 2
66857: PUSH
66858: LD_VAR 0 1
66862: PPUSH
66863: LD_INT 1
66865: PPUSH
66866: CALL_OW 275
66870: PUSH
66871: LD_VAR 0 1
66875: PPUSH
66876: LD_INT 2
66878: PPUSH
66879: CALL_OW 275
66883: PUSH
66884: LD_VAR 0 1
66888: PPUSH
66889: LD_INT 3
66891: PPUSH
66892: CALL_OW 275
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: ST_TO_ADDR
// end ;
66902: LD_VAR 0 2
66906: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66907: LD_INT 0
66909: PPUSH
66910: PPUSH
// result := array ;
66911: LD_ADDR_VAR 0 3
66915: PUSH
66916: LD_VAR 0 1
66920: ST_TO_ADDR
// if size > 0 then
66921: LD_VAR 0 2
66925: PUSH
66926: LD_INT 0
66928: GREATER
66929: IFFALSE 66975
// for i := array downto size do
66931: LD_ADDR_VAR 0 4
66935: PUSH
66936: DOUBLE
66937: LD_VAR 0 1
66941: INC
66942: ST_TO_ADDR
66943: LD_VAR 0 2
66947: PUSH
66948: FOR_DOWNTO
66949: IFFALSE 66973
// result := Delete ( result , result ) ;
66951: LD_ADDR_VAR 0 3
66955: PUSH
66956: LD_VAR 0 3
66960: PPUSH
66961: LD_VAR 0 3
66965: PPUSH
66966: CALL_OW 3
66970: ST_TO_ADDR
66971: GO 66948
66973: POP
66974: POP
// end ;
66975: LD_VAR 0 3
66979: RET
// export function ComExit ( unit ) ; var tmp ; begin
66980: LD_INT 0
66982: PPUSH
66983: PPUSH
// if not IsInUnit ( unit ) then
66984: LD_VAR 0 1
66988: PPUSH
66989: CALL_OW 310
66993: NOT
66994: IFFALSE 66998
// exit ;
66996: GO 67058
// tmp := IsInUnit ( unit ) ;
66998: LD_ADDR_VAR 0 3
67002: PUSH
67003: LD_VAR 0 1
67007: PPUSH
67008: CALL_OW 310
67012: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67013: LD_VAR 0 3
67017: PPUSH
67018: CALL_OW 247
67022: PUSH
67023: LD_INT 2
67025: EQUAL
67026: IFFALSE 67039
// ComExitVehicle ( unit ) else
67028: LD_VAR 0 1
67032: PPUSH
67033: CALL_OW 121
67037: GO 67048
// ComExitBuilding ( unit ) ;
67039: LD_VAR 0 1
67043: PPUSH
67044: CALL_OW 122
// result := tmp ;
67048: LD_ADDR_VAR 0 2
67052: PUSH
67053: LD_VAR 0 3
67057: ST_TO_ADDR
// end ;
67058: LD_VAR 0 2
67062: RET
// export function ResetHc ; begin
67063: LD_INT 0
67065: PPUSH
// InitHc ;
67066: CALL_OW 19
// hc_importance := 0 ;
67070: LD_ADDR_OWVAR 32
67074: PUSH
67075: LD_INT 0
67077: ST_TO_ADDR
// end ;
67078: LD_VAR 0 1
67082: RET
